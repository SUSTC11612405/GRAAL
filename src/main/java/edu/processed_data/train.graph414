class C{  public static String toHexString(byte[] bytes){  StringBuilder sb=new StringBuilder();  for (int i=0; i < bytes.length; ++i) {    int value=0xff & bytes[i];    String hexStr=Integer.toHexString(value);    sb.append("0x");    if (hexStr.length() < 2) {      sb.append("0");    }    sb.append(hexStr);    if (i % 8 == 0) {      sb.append("\n");    }  }  return sb.toString();}  }
class C{  public void writeLists(String folder,String descriptor){  File f=new File(folder);  if (!f.exists() || !f.isDirectory() || !f.canWrite()) {    throw new RuntimeException("Cannot write output to " + folder);  }  LOG.info("Writing vehicle splits to " + folder);  for (  String s : this.lists.keySet()) {    LOG.info("   " + s + " vehicles.");    String filename=f.getAbsolutePath() + "/" + s+ "_"+ descriptor+ ".txt";    BufferedWriter bw=IOUtils.getBufferedWriter(filename);    try {      for (      Id<Vehicle> id : this.lists.get(s)) {        bw.write(id.toString());        bw.newLine();      }    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot write to " + filename);    } finally {      try {        bw.close();      } catch (      IOException e) {        e.printStackTrace();        throw new RuntimeException("Cannot close " + filename);      }    }  }  LOG.info("Done writing vehicle splits.");}  }
class C{  public StringLexerSource(String string) throws IOException {  this(string,false);}  }
class C{  @NotNull public TabBuilder presenter(@NotNull TabPresenter presenter){  this.presenter=presenter;  return this;}  }
class C{  public String toString(){  return getStringVectorRepresentation();}  }
class C{  private void heapifyUp(int twopos,Object cur){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    Object par=twoheap[parent];    if (comparator.compare(cur,par) >= 0) {      break;    }    twoheap[twopos]=par;    twopos=parent;  }  twoheap[twopos]=cur;}  }
class C{  private static String javaScriptEscapeHelper(String s,boolean escapeToAscii){  StringBuilder sb=new StringBuilder(s.length() * 9 / 8);  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '\n':      sb.append("\\n");    break;case '\r':  sb.append("\\r");break;case '\t':sb.append("\\t");break;case '\\':sb.append("\\\\");break;case '\"':sb.append("\\\"");break;case '\'':sb.append("\\\'");break;case '=':appendHexJavaScriptRepresentation(sb,c);break;case '<':case '/':boolean isUnsafe=false;for (String tag : UNSAFE_TAGS) {if (s.regionMatches(true,i + 1,tag,0,tag.length())) {isUnsafe=true;break;}}if (isUnsafe) {appendHexJavaScriptRepresentation(sb,c);} else {sb.append(c);}break;case '>':if (sb.length() > 0 && sb.charAt(sb.length() - 1) == '-') {sb.append('\\');}sb.append(c);break;case '\u2028':sb.append("\\u2028");break;case '\u2029':sb.append("\\u2029");break;default :if (c >= 128 && escapeToAscii) {appendHexJavaScriptRepresentation(sb,c);} else {sb.append(c);}}}return sb.toString();}  }
class C{  public HarddriveStorage(String name,double capacity) throws ParameterException {  if (name == null || name.length() == 0) {    throw new ParameterException("HarddriveStorage(): Error - invalid storage name.");  }  if (capacity <= 0) {    throw new ParameterException("HarddriveStorage(): Error - capacity <= 0.");  }  this.name=name;  this.capacity=capacity;  init();}  }
class C{  public RectangleLocationResult locateRectangles(Mat grayImage){  Mat gray=grayImage.clone();  Filter.downsample(gray,2);  Filter.upsample(gray,2);  Mat cacheHierarchy=new Mat();  Mat grayTemp=new Mat();  List<Rectangle> rectangles=new ArrayList<>();  List<Contour> contours=new ArrayList<>();  Imgproc.Canny(gray,grayTemp,0,THRESHOLD_CANNY,APERTURE_CANNY,true);  Filter.dilate(gray,2);  List<MatOfPoint> contoursTemp=new ArrayList<>();  Imgproc.findContours(grayTemp,contoursTemp,cacheHierarchy,Imgproc.CV_RETR_LIST,Imgproc.CHAIN_APPROX_SIMPLE);  MatOfPoint2f approx=new MatOfPoint2f();  for (  MatOfPoint co : contoursTemp) {    MatOfPoint2f matOfPoint2f=new MatOfPoint2f(co.toArray());    Contour c=new Contour(co);    Imgproc.approxPolyDP(matOfPoint2f,approx,c.arcLength(true) * EPLISON_APPROX_TOLERANCE_FACTOR,true);    Contour approxContour=new Contour(approx);    if (approx.toArray().length == 4 && Math.abs(approxContour.area()) > 1000 && approxContour.isClosed()) {      contours.add(approxContour);      double maxCosine=0;      for (int j=2; j < 5; j++) {        double cosine=Math.abs(MathUtil.angle(approx.toArray()[j % 4],approx.toArray()[j - 2],approx.toArray()[j - 1]));        maxCosine=Math.max(maxCosine,cosine);      }      if (maxCosine < MAX_COSINE_VALUE) {        rectangles.add(new Rectangle(approx.toArray()));      }    }  }  return new RectangleLocationResult(contours,rectangles);}  }
class C{  private State applyPatch(State current,State patch){  ServiceUtils.logInfo(this,"Moving to stage %s",patch.taskState.stage);  if (patch.nextPageLink == null) {    current.nextPageLink=null;  }  PatchUtils.patchState(current,patch);  return current;}  }
class C{  @Override public int hashCode(){  return getDescription().hashCode();}  }
class C{  final public MutableString append(final CharList list){  final int l=list.size();  if (l == 0)   return this;  final int newLength=length() + l;  expand(newLength);  list.getElements(0,array,newLength - l,l);  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  private void createSceneVao(){  int vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(boxes.length * 4 * (3 + 3)* 6* 6);  FloatBuffer fv=bb.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    DemoUtils.triangulateBox(boxes[i],boxes[i + 1],fv);  }  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,4 * (3 + 3),0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);  this.vaoScene=vao;}  }
class C{  public long unpackValue(final long packedVal){  long idVal=(long)packedId << 58;  long unpackedVal=packedVal & ~idVal;  return unpackedVal;}  }
class C{  public EditSession(final EventBus eventBus,World world,final int maxBlocks,@Nullable final BlockBag blockBag,EditSessionEvent event){  this(world,null,null,null,null,null,true,null,null,null,blockBag,eventBus,event);}  }
class C{  public PostOffice(){  super();}  }
class C{  public void readExif(String inFileName) throws FileNotFoundException, IOException {  if (inFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=new BufferedInputStream(new FileInputStream(inFileName));    readExif(is);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  public static String dump(String description,byte[] b,int offset,int length){  StringBuffer sb=new StringBuffer();  sb.append(length + "b");  if (description != null)   sb.append(" (" + description + ")");  sb.append(':');  int prefixlen=sb.toString().length();  prefixlen=(prefixlen + 8) & ~7;  sb.append('\t');  int perline=(80 - prefixlen) / 3;  for (int i=0; i < length; i++) {    if (i != 0 && i % perline == 0) {      sb.append('\n');      for (int j=0; j < prefixlen / 8; j++)       sb.append('\t');    }    int value=(int)(b[i + offset]) & 0xFF;    sb.append(hex[(value >> 4)]);    sb.append(hex[(value & 0xF)]);    sb.append(' ');  }  sb.append('\n');  return sb.toString();}  }
class C{  private void displayLoadingView(){  if (null == mLoadingView) {    View parent=getView();    while ((parent != null) && (mLoadingView == null)) {      mLoadingView=parent.findViewById(R.id.vector_settings_spinner_views);      parent=(View)parent.getParent();    }  }  if (null != mLoadingView) {    mLoadingView.setVisibility(View.VISIBLE);  }}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  private XYSeries createSeries2(){  XYSeries series2=new XYSeries("Series 2",true,false);  series2.add(2.0,2.0);  series2.add(3.0,2.0);  series2.add(4.0,2.0);  series2.add(5.0,2.0);  series2.add(6.0,2.0);  return series2;}  }
class C{  void release(){  cancelAll();  if (downloadQueue != null) {    downloadQueue=null;  }  if (dispatchers != null) {    stop();    for (int i=0; i < dispatchers.length; i++) {      dispatchers[i]=null;    }    dispatchers=null;  }}  }
class C{  public static void main(String[] args){  System.out.println("\n SalesAmount     Commission");  System.out.println("-----------------------------");  for (double salesAmount=10000; salesAmount <= 100000; salesAmount+=5000) {    System.out.printf(" %-16.0f",salesAmount);    System.out.printf("%8.1f\n",computeCommission(salesAmount));  }}  }
class C{  private void updateCoordinateProjectionComboBoxes(){  adjustDimension1Model.removeAllElements();  adjustDimension2Model.removeAllElements();  int dims=getWorkspaceComponent().getProjector().getDimensions();  for (int i=0; i < dims; i++) {    adjustDimension1Model.addElement(i + 1);    adjustDimension2Model.addElement(i + 1);  }}  }
class C{  public TimeSynchronizationException(String message,long roundtripEstimateSeconds,long requestValiditySeconds){  super(message,Key.TIME_SYNCHRONIZATION_ERROR,null,roundtripEstimateSeconds,requestValiditySeconds);}  }
class C{  @Override public String toString(){  return expression;}  }
class C{  public <T>T removeStickyEventLocal(Class<T> eventType){  return eventBus.removeStickyEvent(eventType);}  }
class C{  public static void reload(){  try {    reload(getDeviceConfFile());  } catch (  Exception e) {    log.error("Failed to load module conf",e);  }}  }
class C{  @LogMessageDoc(level="ERROR",message="Failure writing PacketOut " + "switch={switch} packet-in={packet-in} " + "packet-out={packet-out}",explanation="An I/O error occured while writing a packet " + "out message to the switch",recommendation=LogMessageDoc.CHECK_SWITCH) protected void doFlood(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  if (topology.isIncomingBroadcastAllowed(sw.getId(),pi.getInPort()) == false) {    if (log.isTraceEnabled()) {      log.trace("doFlood, drop broadcast packet, pi={}, " + "from a blocked port, srcSwitch=[{},{}], linkInfo={}",new Object[]{pi,sw.getId(),pi.getInPort()});    }    return;  }  OFPacketOut po=(OFPacketOut)floodlightProvider.getOFMessageFactory().getMessage(OFType.PACKET_OUT);  List<OFAction> actions=new ArrayList<OFAction>();  if (sw.hasAttribute(IOFSwitch.PROP_SUPPORTS_OFPP_FLOOD)) {    actions.add(new OFActionOutput(OFPort.OFPP_FLOOD.getValue(),(short)0xFFFF));  } else {    actions.add(new OFActionOutput(OFPort.OFPP_ALL.getValue(),(short)0xFFFF));  }  po.setActions(actions);  po.setActionsLength((short)OFActionOutput.MINIMUM_LENGTH);  short poLength=(short)(po.getActionsLength() + OFPacketOut.MINIMUM_LENGTH);  po.setBufferId(OFPacketOut.BUFFER_ID_NONE);  po.setInPort(pi.getInPort());  byte[] packetData=pi.getPacketData();  poLength+=packetData.length;  po.setPacketData(packetData);  po.setLength(poLength);  try {    if (log.isTraceEnabled()) {      log.trace("Writing flood PacketOut switch={} packet-in={} packet-out={}",new Object[]{sw,pi,po});    }    messageDamper.write(sw,po,cntx);  } catch (  IOException e) {    log.error("Failure writing PacketOut switch={} packet-in={} packet-out={}",new Object[]{sw,pi,po},e);  }  return;}  }
class C{  public static boolean equal(File file1,File file2) throws IOException {  checkNotNull(file1);  checkNotNull(file2);  if (file1 == file2 || file1.equals(file2)) {    return true;  }  long len1=file1.length();  long len2=file2.length();  if (len1 != 0 && len2 != 0 && len1 != len2) {    return false;  }  return asByteSource(file1).contentEquals(asByteSource(file2));}  }
class C{  public Eqn3(final double h,final double k,final double asr){  this.hk=h * k;  this.hs=(h * h + k * k) / 2;  this.asr=asr;}  }
class C{  public static FloatBuffer createFloatBuffer(float[] coords){  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * SIZEOF_FLOAT);  bb.order(ByteOrder.nativeOrder());  FloatBuffer fb=bb.asFloatBuffer();  fb.put(coords);  fb.position(0);  return fb;}  }
class C{  public void addMappedPort(int port){  mappedPorts.add(port);}  }
class C{  public Vector3i add(int x,int y,int z,Vector3i dest){  dest.x=this.x + x;  dest.y=this.y + y;  dest.z=this.z + z;  return dest;}  }
class C{  public void done(Transfer transfer) throws IOException {  transfer.flush();  int status=transfer.readInt();  if (status == STATUS_ERROR) {    String sqlstate=transfer.readString();    String message=transfer.readString();    String sql=transfer.readString();    int errorCode=transfer.readInt();    String stackTrace=transfer.readString();    JdbcSQLException s=new JdbcSQLException(message,sql,sqlstate,errorCode,null,stackTrace);    if (errorCode == ErrorCode.CONNECTION_BROKEN_1) {      IOException e=new IOException(s.toString(),s);      throw e;    }    throw DbException.convert(s);  } else   if (status == STATUS_CLOSED) {    transferList=null;  } else   if (status == STATUS_OK_STATE_CHANGED) {    sessionStateChanged=true;  } else   if (status == STATUS_OK) {  } else {    throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"unexpected status " + status);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namespaceURI04.class,args);}  }
class C{  public void tagDefineSound(int id,int format,int frequency,boolean bits16,boolean stereo,int sampleCount,byte[] soundData) throws IOException {  if (tags != null) {    tags.tagDefineSound(id,format,frequency,bits16,stereo,sampleCount,soundData);  }}  }
class C{  public Response priorResponse(){  return priorResponse;}  }
class C{  public String convertUndefModifierToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.SINGLE_IS_A__EXTENDS_NAME_1:    return getExtendsName_1();case UmplePackage.SINGLE_IS_A__ANONYMOUS_SINGLE_IS_A11:  return getAnonymous_singleIsA_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeprocessinginstructionnodetype.class,args);}  }
class C{  public void onFilterChange(Consumer<Filter> filterChange){  this.onFilterChange.add(filterChange);}  }
class C{  public TransferEntropyCalculatorDiscrete(int base,int destHistoryEmbedLength){  this(base,destHistoryEmbedLength,1,1,1,1);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputName=null;  String workingDirectory=null;  WhiteboxRasterInfo[] images=null;  int nCols=0;  int nRows=0;  double z;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[] imageAverages;  double[] imageTotals;  double[] imageNumPixels;  double[][] data;  double[] noDataValues;  String pathSep=File.separator;  boolean standardizedPCA=false;  int numberOfComponentImagesToCreate=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputName=args[1];  if (outputName.toLowerCase().contains(".dep")) {    outputName=outputName.replace(".dep","");  }  standardizedPCA=Boolean.parseBoolean(args[2]);  if (args[3].toLowerCase().contains("not")) {    numberOfComponentImagesToCreate=9999999;  } else {    numberOfComponentImagesToCreate=Integer.parseInt(args[3]);  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageAverages=new double[numImages];    imageTotals=new double[numImages];    imageNumPixels=new double[numImages];    noDataValues=new double[numImages];    data=new double[numImages][];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      noDataValues[i]=images[i].getNoDataValue();      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        File file=new File(imageFiles[i]);        workingDirectory=file.getParent();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }    }    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        for (i=0; i < numImages; i++) {          if (data[i][col] != noDataValues[i]) {            imageTotals[i]+=data[i][col];            imageNumPixels[i]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Calculating image means:",progress);    }    for (i=0; i < numImages; i++) {      imageAverages[i]=imageTotals[i] / imageNumPixels[i];    }    double[] imageTotalDeviation=new double[numImages];    double[][] covariances=new double[numImages][numImages];    double[][] correlationMatrix=new double[numImages][numImages];    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        for (i=0; i < numImages; i++) {          if (data[i][col] != noDataValues[i]) {            imageTotalDeviation[i]+=(data[i][col] - imageAverages[i]) * (data[i][col] - imageAverages[i]);            for (a=0; a < numImages; a++) {              if (data[a][col] != noDataValues[a]) {                covariances[i][a]+=(data[i][col] - imageAverages[i]) * (data[a][col] - imageAverages[a]);              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Calculating covariances:",progress);    }    for (i=0; i < numImages; i++) {      for (a=0; a < numImages; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(imageTotalDeviation[i] * imageTotalDeviation[a]));      }    }    for (i=0; i < numImages; i++) {      for (a=0; a < numImages; a++) {        covariances[i][a]=covariances[i][a] / (imageNumPixels[i] - 1);      }    }    Matrix cov=null;    if (!standardizedPCA) {      cov=new Matrix(covariances);    } else {      cov=new Matrix(correlationMatrix);    }    EigenvalueDecomposition eigen=cov.eig();    double[] eigenvalues;    Matrix eigenvectors;    SortedSet<PrincipalComponent> principalComponents;    eigenvalues=eigen.getRealEigenvalues();    eigenvectors=eigen.getV();    double[][] vecs=eigenvectors.getArray();    int numComponents=eigenvectors.getColumnDimension();    principalComponents=new TreeSet<PrincipalComponent>();    for (i=0; i < numComponents; i++) {      double[] eigenvector=new double[numComponents];      for (j=0; j < numComponents; j++) {        eigenvector[j]=vecs[j][i];      }      principalComponents.add(new PrincipalComponent(eigenvalues[i],eigenvector));    }    double totalEigenvalue=0;    for (i=0; i < numComponents; i++) {      totalEigenvalue+=eigenvalues[i];    }    double[][] explainedVarianceArray=new double[numComponents][2];    j=0;    for (    PrincipalComponent pc : principalComponents) {      explainedVarianceArray[j][0]=pc.eigenValue / totalEigenvalue * 100.0;      if (j == 0) {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0];      } else {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0] + explainedVarianceArray[j - 1][1];      }      j++;    }    DecimalFormat df1=new DecimalFormat("0.00");    DecimalFormat df2=new DecimalFormat("0.0000");    DecimalFormat df3=new DecimalFormat("0.000000");    String ret="Principal Component Analysis Report:\n\n";    ret+="Component\tExplained Var.\tCum. %\tEigenvalue\tEigenvector\n";    j=0;    for (    PrincipalComponent pc : principalComponents) {      String explainedVariance=df1.format(explainedVarianceArray[j][0]);      String explainedCumVariance=df1.format(explainedVarianceArray[j][1]);      double[] eigenvector=pc.eigenVector.clone();      ret+=(j + 1) + "\t" + explainedVariance+ "\t"+ explainedCumVariance+ "\t"+ df2.format(pc.eigenValue)+ "\t";      String eigenvec="[";      for (i=0; i < numComponents; i++) {        if (i < numComponents - 1) {          eigenvec+=df3.format(eigenvector[i]) + ", ";        } else {          eigenvec+=df3.format(eigenvector[i]);        }      }      eigenvec+="]";      ret+=eigenvec + "\n";      if (j < numberOfComponentImagesToCreate) {        String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (j + 1)+ ".dep";        WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,0);        output.setDataScale(DataScale.CONTINUOUS);        for (row=0; row < nRows; row++) {          for (i=0; i < numImages; i++) {            data[i]=images[i].getRowValues(row);          }          for (col=0; col < nCols; col++) {            if (data[0][col] != noDataValues[0]) {              z=0;              for (i=0; i < numImages; i++) {                z+=data[i][col] * eigenvector[i];              }              output.setValue(row,col,z);            } else {              output.setValue(row,col,noDataValues[0]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (nRows - 1));          updateProgress("Creating component images:",progress);        }        output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        output.addMetadataEntry("Created on " + new Date());        output.addMetadataEntry("Principal Component Num.: " + (j + 1));        output.addMetadataEntry("Eigenvalue: " + pc.eigenValue);        eigenvec="[";        for (i=0; i < numComponents; i++) {          if (i < numComponents - 1) {            eigenvec+=eigenvector[i] + ", ";          } else {            eigenvec+=eigenvector[i];          }        }        eigenvec+="]";        output.addMetadataEntry("Eigenvector: " + eigenvec);        if (!standardizedPCA) {          output.addMetadataEntry("PCA Type: unstandardized");        } else {          output.addMetadataEntry("PCA Type: standardized");        }        output.close();      }      j++;    }    ret+="\nFactor Loadings:\n";    ret+="\t\tComponent\n\t";    for (i=0; i < numComponents; i++) {      ret+=(i + 1) + "\t";    }    ret+="\n";    double loading=0;    if (!standardizedPCA) {      for (i=0; i < numImages; i++) {        ret+="band" + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev)) / Math.sqrt(covariances[i][i]);          ret+=df1.format(loading) + "\t";        }        ret+="\n";      }    } else {      for (i=0; i < numImages; i++) {        ret+="band" + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev));          ret+=df1.format(loading) + "\t";        }        ret+="\n";      }    }    for (i=0; i < numImages; i++) {      images[i].close();    }    returnData(ret);    ScreePlot plot=new ScreePlot(explainedVarianceArray);    returnData(plot);    if (numComponents > 3) {      for (i=2; i >= 0; i--) {        if (i < numberOfComponentImagesToCreate) {          String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (i + 1)+ ".dep";          returnData(outputHeader);        }      }    } else {      for (i=numComponents - 1; i >= 0; i--) {        if (i < numberOfComponentImagesToCreate) {          String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (i + 1)+ ".dep";          returnData(outputHeader);        }      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void checkUserExists(String entidad) throws Exception {  int count;  UsersTable table=new UsersTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (_id == Defs.NULL_ID)     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameQual(_name)); else     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameIdQual(_id,_name));    if (count > 0)     AdminException.throwException(UserErrorCodes.EC_USER_EXISTS_NAME);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  private static void printStats(final String title,final Map<String,Stat> extStatMap){  System.out.println("\n_______________________________________________");  System.out.println(title);  final List<Stat> statList=new ArrayList<>(extStatMap.values());  Collections.sort(statList);  System.out.printf("%13s  %9s%12s%11s\n","","Files","Size","Lines");  for (  final Stat stat : statList) {    System.out.printf(Locale.US,"%13s: %,9d%,12d%,11d\n",stat.ext,stat.files,stat.size,stat.lines);  }}  }
class C{  private Stream<EdgeItem> streamStructureEdges(){  Stream<EdgeItem> stream;  if (this.graph.getTupleCount() > 0) {    stream=Stream.concat(streamOutEdges(this.getRoot()),this.map.values().stream().filter(null).map(null).flatMap(null));  } else {    stream=Stream.empty();  }  return stream;}  }
class C{  private int measureHeight(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  mAscent=(int)mTextPaint.ascent();  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  default B removeAuthor(){  this.meta().removeAuthor();  return this.getBuilder();}  }
class C{  private boolean trySetSystemFieldPosition(int id){  assert fieldIdLen == BinaryUtils.FIELD_ID_LEN;  int searchPos=footerStart;  int searchTail=searchPos + footerLen;  while (true) {    if (searchPos >= searchTail)     return false;    int id0=in.readIntPositioned(searchPos);    if (id0 == id) {      int pos=start + BinaryUtils.fieldOffsetRelative(in,searchPos + BinaryUtils.FIELD_ID_LEN,fieldOffLen);      streamPosition(pos);      return true;    }    searchPos+=BinaryUtils.FIELD_ID_LEN + fieldOffLen;  }}  }
class C{  private void relayoutMeasuredItem(View child){  final int w=child.getMeasuredWidth();  final int h=child.getMeasuredHeight();  final int childLeft=mListPadding.left;  final int childRight=childLeft + w;  final int childTop=child.getTop();  final int childBottom=childTop + h;  child.layout(childLeft,childTop,childRight,childBottom);}  }
class C{  public void testGetWarContextWhenNoJbossWebXml() throws Exception {  JBossWAR war=new JBossWAR(getResourcePath(PACKAGE_PATH + "jboss-empty.war"));  assertEquals("jboss-empty",war.getContext());}  }
class C{  public SystemPropertiesLoader withAddOn(){  withAddOn=true;  return this;}  }
class C{  public static <T>void post(String url,ClanHttpParams params,final HttpCallback<T> callback){  async(HttpMethod.POST,url,params,callback);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  private static void handleEOD(EncoderContext context,CharSequence buffer){  try {    int count=buffer.length();    if (count == 0) {      return;    }    if (count == 1) {      context.updateSymbolInfo();      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      int remaining=context.getRemainingCharacters();      if (remaining == 0 && available <= 2) {        return;      }    }    if (count > 4) {      throw new IllegalStateException("Count must not exceed 4");    }    int restChars=count - 1;    String encoded=encodeToCodewords(buffer,0);    boolean endOfSymbolReached=!context.hasMoreCharacters();    boolean restInAscii=endOfSymbolReached && restChars <= 2;    if (restChars <= 2) {      context.updateSymbolInfo(context.getCodewordCount() + restChars);      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      if (available >= 3) {        restInAscii=false;        context.updateSymbolInfo(context.getCodewordCount() + encoded.length());      }    }    if (restInAscii) {      context.resetSymbolInfo();      context.pos-=restChars;    } else {      context.writeCodewords(encoded);    }  }  finally {    context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void send(Object message,boolean sent) throws RemotingException {  initClient();  client.send(message,sent);}  }
class C{  public static double median(final double[] list){  return getStatistics(list).getPercentile(50);}  }
class C{  public SecureChannel createSecureChannel(String connectUrl,EndpointDescription endpoint) throws ServiceResultException {  TransportChannelSettings settings=new TransportChannelSettings();  settings.setDescription(endpoint);  return createSecureChannel(connectUrl,settings);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> copyOfSorted(SortedMap<K,? extends V> map){  Comparator<? super K> comparator=map.comparator();  if (comparator == null) {    comparator=(Comparator<? super K>)NATURAL_ORDER;  }  if (map instanceof ImmutableSortedMap) {    @SuppressWarnings("unchecked") ImmutableSortedMap<K,V> kvMap=(ImmutableSortedMap<K,V>)map;    if (!kvMap.isPartialView()) {      return kvMap;    }  }  return fromEntries(comparator,true,map.entrySet());}  }
class C{  public boolean hasReturn3y(){  return getReturn3y() != null;}  }
class C{  public static int emit(GasStack stack,TileEntity from,Collection<ForgeDirection> sides){  if (stack == null) {    return 0;  }  List<IGasHandler> availableAcceptors=new ArrayList<IGasHandler>();  IGasHandler[] possibleAcceptors=getConnectedAcceptors(from,sides);  for (int i=0; i < possibleAcceptors.length; i++) {    IGasHandler handler=possibleAcceptors[i];    if (handler != null && handler.canReceiveGas(ForgeDirection.getOrientation(i).getOpposite(),stack.getGas())) {      availableAcceptors.add(handler);    }  }  Collections.shuffle(availableAcceptors);  int toSend=stack.amount;  int prevSending=toSend;  if (!availableAcceptors.isEmpty()) {    int divider=availableAcceptors.size();    int remaining=toSend % divider;    int sending=(toSend - remaining) / divider;    for (    IGasHandler acceptor : availableAcceptors) {      int currentSending=sending;      if (remaining > 0) {        currentSending++;        remaining--;      }      ForgeDirection dir=ForgeDirection.getOrientation(Arrays.asList(possibleAcceptors).indexOf(acceptor)).getOpposite();      toSend-=acceptor.receiveGas(dir,new GasStack(stack.getGas(),currentSending),true);    }  }  return prevSending - toSend;}  }
class C{  public ModeledConnectionRecord(ConnectionRecordModel model){  this.model=model;}  }
class C{  public IteratorModel(Iterator iterator,BeansWrapper wrapper){  super(iterator,wrapper);}  }
class C{  public static Color rgbafc(int rgb,float alpha){  return rgbac(rgb,colorConvert(alpha));}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof Size2DSyntax && this.x == ((Size2DSyntax)object).x && this.y == ((Size2DSyntax)object).y);}  }
class C{  public CallSpec<Void,HttpError> blockRecommendation(String userId){  return Resource.<Void,HttpError>newDeleteSpec(api,"/v1/users/me/network/recommendations/user/{id}",false).pathParam("id",userId).responseAs(Void.class).build();}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public AccountHeaderBuilder withAccountHeader(@LayoutRes int resLayout){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (resLayout != -1) {    this.mAccountHeaderContainer=mActivity.getLayoutInflater().inflate(resLayout,null,false);  } else {    if (mCompactStyle) {      this.mAccountHeaderContainer=mActivity.getLayoutInflater().inflate(R.layout.material_drawer_compact_header,null,false);    } else {      this.mAccountHeaderContainer=mActivity.getLayoutInflater().inflate(R.layout.material_drawer_header,null,false);    }  }  return this;}  }
class C{  protected void parseBodies(TypeDeclaration type,CompilationUnitDeclaration unit){  FieldDeclaration[] fields=type.fields;  if (fields != null) {    for (int i=0; i < fields.length; i++) {      FieldDeclaration field=fields[i];      if (field instanceof Initializer)       this.parse((Initializer)field,type,unit);      field.traverse(this.localDeclarationVisitor,null);    }  }  AbstractMethodDeclaration[] methods=type.methods;  if (methods != null) {    for (int i=0; i < methods.length; i++) {      AbstractMethodDeclaration method=methods[i];      if (method.sourceStart >= type.bodyStart) {        if (method instanceof MethodDeclaration) {          MethodDeclaration methodDeclaration=(MethodDeclaration)method;          this.parse(methodDeclaration,unit);          methodDeclaration.traverse(this.localDeclarationVisitor,(ClassScope)null);        } else         if (method instanceof ConstructorDeclaration) {          ConstructorDeclaration constructorDeclaration=(ConstructorDeclaration)method;          this.parse(constructorDeclaration,unit,false);          constructorDeclaration.traverse(this.localDeclarationVisitor,(ClassScope)null);        }      } else       if (method.isDefaultConstructor()) {        method.parseStatements(this,unit);      }    }  }  TypeDeclaration[] memberTypes=type.memberTypes;  if (memberTypes != null) {    for (int i=0; i < memberTypes.length; i++) {      TypeDeclaration memberType=memberTypes[i];      this.parseBodies(memberType,unit);      memberType.traverse(this.localDeclarationVisitor,(ClassScope)null);    }  }}  }
class C{  private void addObservedFile(String localPath,Account account){  File file=new File(localPath);  String parentPath=file.getParent();  FolderObserver observer=mFolderObserversMap.get(parentPath);  if (observer == null) {    observer=new FolderObserver(parentPath,account,getApplicationContext());    mFolderObserversMap.put(parentPath,observer);    Log_OC.d(TAG,"Observer added for parent folder " + parentPath + "/");  }  observer.startWatching(file.getName());  Log_OC.d(TAG,"Added " + localPath + " to list of observed children");}  }
class C{  public T caseQuantifier(Quantifier object){  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.256 -0500",hash_original_method="5CBCB44F730AFA5B014234B536635195",hash_generated_method="5E69CBAD463CAB8D45FF21CFF47912ED") public static Long valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseLong(string,radix));}  }
class C{  public FigureEvent(Figure source,AttributeKey attribute,@Nullable Object oldValue,@Nullable Object newValue){  super(source);  this.attribute=attribute;  this.oldValue=oldValue;  this.newValue=newValue;}  }
class C{  public static double exactBinomial(int k,int n,double p){  double total=0.0;  for (int m=k; m <= n; m++) {    double nChooseM=1.0;    for (int r=1; r <= m; r++) {      nChooseM*=(n - r) + 1;      nChooseM/=r;    }    total+=nChooseM * Math.pow(p,m) * Math.pow(1.0 - p,n - m);  }  return total;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:10.518 -0400",hash_original_method="23D602EF1169EC1FFBB7BD36AD3498D5",hash_generated_method="7F2BC7617B7D4C02F5D1C384289F87EA") public boolean isCancelled(){  PrintService.throwIfNotCalledOnMainThread();  return getInfo().getState() == PrintJobInfo.STATE_CANCELED;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((databaseName == null) ? 0 : databaseName.hashCode());  result=prime * result + ((tableUniqueName == null) ? 0 : tableUniqueName.hashCode());  return result;}  }
class C{  public Scene createScene(ProjectContext project,String name){  Scene scene=new Scene();  long id=project.obtainID();  scene.setId(id);  scene.setName(name);  scene.skybox=SkyboxBuilder.createDefaultSkybox();  project.scenes.add(scene.getName());  kryoManager.saveScene(project,scene);  return scene;}  }
class C{  public String parseString(boolean decodeUTF8) throws DecodeException {  return parseStringWithTag(ASN_SIMPLE_STRING,decodeUTF8,null);}  }
class C{  protected void editorContextMenuAboutToShow(IMenuManager menuManager){  menuManager.removeAll();}  }
class C{  public V put(K key,V value){  return putInternal(key,value,expireTimeNanos);}  }
class C{  public int sMaxAgeSeconds(){  return sMaxAgeSeconds;}  }
class C{  public void evenMore(int i,int j){  if (true)   System.out.println("True");}  }
class C{  void compact(ConstPool cp){  name=cp.addUtf8Info(getName());  descriptor=cp.addUtf8Info(getDescriptor());  attribute=AttributeInfo.copyAll(attribute,cp);  constPool=cp;}  }
class C{  public ParserConfigurationException(String msg){  super(msg);}  }
class C{  @SuppressWarnings("unchecked") public void init(){  String[] featureExtractorList=prop.getProperty(FEATURE_EXTRACTORS_OPT,DEFAULT_FEATURE_SET).split(PhraseExtract.FEATURE_EXTRACTOR_DELIM);  alTemps=new AlignmentTemplates(prop,sourceFilter);  alTemp=new AlignmentTemplateInstance();  extractors=new ArrayList<>();  phrasePrinter=null;  for (  String featureExtractorSpec : featureExtractorList) {    AbstractFeatureExtractor featureExtractor;    String[] extractorAndFileName=featureExtractorSpec.trim().split(FILE_DELIM);    if (extractorAndFileName.length < 2) {      throw new RuntimeException("Invalid extractor specification: " + featureExtractorSpec);    }    String className=extractorAndFileName[0].trim();    String outFile=extractorAndFileName[1].trim();    String args[]=null;    if (extractorAndFileName.length > 2) {      args=new String[extractorAndFileName.length - 2];      System.arraycopy(extractorAndFileName,2,args,0,args.length);    }    if (outputDir != null) {      outFile=outputDir + "/" + outFile;    }    try {      Class<AbstractFeatureExtractor> extractorClass=(Class<AbstractFeatureExtractor>)ClassLoader.getSystemClassLoader().loadClass(className);      featureExtractor=args == null ? (AbstractFeatureExtractor)extractorClass.newInstance() : (AbstractFeatureExtractor)extractorClass.getConstructor(args.getClass()).newInstance(new Object[]{args});      featureExtractor.init(prop,featureIndex,alTemps);      extractors.add(featureExtractor);      System.err.printf("Feature extractor: %s => %s%n",featureExtractor.getClass().getName(),outFile);      extractorToFileString.put(featureExtractor,outFile);      if (!fileStringToWriter.containsKey(outFile)) {        fileStringToWriter.put(outFile,IOTools.getWriterFromFile(outFile));      }    } catch (    Exception e) {      throw new RuntimeException(e);    }  }  for (  AbstractFeatureExtractor extractor : extractors) {    if (extractor instanceof PhrasePrinter) {      if (phrasePrinter == null) {        phrasePrinter=(PhrasePrinter)extractor;      } else {        throw new RuntimeException("Only one feature extractor may implement the PhrasePrinter interface");      }    }  }  if (phrasePrinter == null) {    phrasePrinter=new PlainPhrasePrinter();  }  final boolean withGaps=PropertiesUtils.getBool(prop,WITH_GAPS_OPT,false);  String phraseExtractorName=prop.getProperty(PHRASE_EXTRACTOR_OPT,null);  if (phraseExtractorName != null) {    System.err.println("Phrase extractor: " + phraseExtractorName);    try {      Class<AbstractPhraseExtractor> cls=(Class<AbstractPhraseExtractor>)Class.forName(phraseExtractorName);      Constructor<AbstractPhraseExtractor> ct=cls.getConstructor(new Class[]{Properties.class,AlignmentTemplates.class,List.class});      phraseExtractor=ct.newInstance(prop,alTemps,extractors);    } catch (    Exception e) {      throw new RuntimeException(e);    }  } else {    phraseExtractor=withGaps ? new DTUPhraseExtractor(prop,alTemps,extractors) : new FlatPhraseExtractor(prop,alTemps,extractors);  }  setTotalPassNumber();}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public String[][] parse(InputStream r,String encoding) throws IOException {  return parse(new InputStreamReader(r,encoding));}  }
class C{  private void tryAgain(){  Intent intent=new Intent(AuthenticationErrorActivity.this,AuthenticationActivity.class);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AuthenticationActivity.class.getSimpleName());  intent.putExtra(getResources().getString(R.string.intent_extra_regid),registrationId);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);  finish();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void clearIdentificadores(){  identificadores.clear();}  }
class C{  public WaferMapPlot(){  this(null);}  }
class C{  private boolean validateNetworkStates(){  if (mStateDepository.isEmpty()) {    Log.v(LOG_TAG,"no state is recorded");    mReason="no state is recorded.";    return false;  } else   if (mStateDepository.size() > 1) {    Log.v(LOG_TAG,"no broadcast is expected, instead broadcast is probably received");    mReason="no broadcast is expected, instead broadcast is probably received";    return false;  } else   if (mStateDepository.get(0) != mTransitionTarget) {    Log.v(LOG_TAG,String.format("%s is expected, but it is %s",mTransitionTarget.toString(),mStateDepository.get(0).toString()));    mReason=String.format("%s is expected, but it is %s",mTransitionTarget.toString(),mStateDepository.get(0).toString());    return false;  }  return true;}  }
class C{  public ReplacesHeader createReplacesHeader(String callId,String toTag,String fromTag) throws ParseException {  Replaces replaces=new Replaces();  replaces.setCallId(callId);  replaces.setFromTag(fromTag);  replaces.setToTag(toTag);  return replaces;}  }
class C{  KeyStore loadStore(String file,String pass,String type) throws Exception {  KeyStore ks=KeyStore.getInstance(type);  FileInputStream is=null;  if (file != null && !file.equals("NONE")) {    is=new FileInputStream(file);  }  ks.load(is,pass.toCharArray());  is.close();  return ks;}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  private void findBestPlanAndAddOneVehicle(){  PPlan bestPlan=null;  for (  PPlan plan : this.plans) {    if (bestPlan == null) {      bestPlan=plan;    } else {      if (plan.getScorePerVehicle() > bestPlan.getScorePerVehicle()) {        bestPlan=plan;      }    }  }  bestPlan.setNVehicles(bestPlan.getNVehicles() + 1);}  }
class C{  @Override protected void complete(){  notifyComplete();  super.isComplete=true;  if (hasNext()) {    getNext().setPipeline(this.getPipeline());    super.getPipeline().taskDispatcher().accept(getNext());  }}  }
class C{  private String leafText(INode next){  String leafText="";  if (next instanceof LeafNode) {    leafText=((LeafNode)next).getText();  }  return leafText;}  }
class C{  public void store(Element root){  store(root,Xml.COLORS,Xml.COLOR,Xml.CAR_COLORS);}  }
class C{  public void scrollLineToVisible(int line){  int margin=parentHeight() / 3;  scrollLineToVisibleImpl(line,margin);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static boolean equals(Block block,ItemStack stack){  if (stack == null)   return false;  return block == getBlock(stack);}  }
class C{  @Override public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound){  this.xTile=par1NBTTagCompound.getShort("xTile");  this.yTile=par1NBTTagCompound.getShort("yTile");  this.zTile=par1NBTTagCompound.getShort("zTile");  this.inTile=Block.getBlockById(par1NBTTagCompound.getInteger("inTile"));  this.inData=par1NBTTagCompound.getByte("inData") & 255;  this.arrowShake=par1NBTTagCompound.getByte("shake") & 255;  this.inGround=par1NBTTagCompound.getByte("inGround") == 1;  this.isExplosive=par1NBTTagCompound.getBoolean("isExplosive");}  }
class C{  public BigInteger calculateBalanceForAddress(Address address) throws BlockStoreException {  maybeConnect();  PreparedStatement s=null;  try {    s=conn.get().prepareStatement("select sum(('x'||lpad(substr(value::text, 3, 50),16,'0'))::bit(64)::bigint) " + "from openoutputs where toaddress = ?");    s.setString(1,address.toString());    ResultSet rs=s.executeQuery();    if (rs.next()) {      return BigInteger.valueOf(rs.getLong(1));    } else {      throw new BlockStoreException("Failed to execute balance lookup");    }  } catch (  SQLException ex) {    throw new BlockStoreException(ex);  } finally {    if (s != null)     try {      s.close();    } catch (    SQLException e) {      throw new BlockStoreException("Could not close statement");    }  }}  }
class C{  public <D,E extends Element>void adapt(ElementKey<D,E> source,String kind,ElementKey<? extends D,? extends E> adaptation){  build(source).adapt(kind,adaptation);}  }
class C{  void validConversion(Converter converter,Object expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public static org.oscm.internal.vo.VOOrganization convertToUp(org.oscm.vo.VOOrganization oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOOrganization newVO=new org.oscm.internal.vo.VOOrganization();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setOrganizationId(oldVO.getOrganizationId());  newVO.setAddress(oldVO.getAddress());  newVO.setEmail(oldVO.getEmail());  newVO.setLocale(oldVO.getLocale());  newVO.setName(oldVO.getName());  newVO.setPhone(oldVO.getPhone());  newVO.setUrl(oldVO.getUrl());  newVO.setDescription(oldVO.getDescription());  newVO.setDiscount(convertToUp(oldVO.getDiscount()));  newVO.setDistinguishedName(oldVO.getDistinguishedName());  newVO.setDomicileCountry(oldVO.getDomicileCountry());  newVO.setNameSpace(oldVO.getNameSpace());  newVO.setImageDefined(oldVO.isImageDefined());  newVO.setSupportEmail(oldVO.getSupportEmail());  return newVO;}  }
class C{  public void add(double val){  ensureCapacity(_pos + 1);  _data[_pos++]=val;}  }
class C{  public SVGGElementBridge(){}  }
class C{  private void tryPopulateLogcat(Intent redirectAction){  redirectAction.putExtra(FINISHED_LOGCAT_EXTRACTION_KEY,true);  Context context=getApplicationContext();  CrashFileManager fileManager=new CrashFileManager(context.getCacheDir());  File[] dumps=fileManager.getMinidumpWithoutLogcat();  if (dumps.length == 0) {    onHandleIntent(redirectAction);    return;  }  context.startService(LogcatExtractionService.createLogcatExtractionTask(context,dumps,redirectAction));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (connectivity == null) {    throw new NullPointerException();  }  if (maxLagAllowable < 1) {    throw new IllegalStateException();  }}  }
class C{  public void dismissWithAnimation(){  if (mBehavior != null) {    mBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);  }}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  Instances result=new Instances(inputFormat,0);  if (m_ClassIndex == FIRST) {    result.setClassIndex(0);  } else   if (m_ClassIndex == LAST) {    result.setClassIndex(result.numAttributes() - 1);  } else   if (m_ClassIndex == UNSET) {    result.setClassIndex(-1);  } else {    result.setClassIndex(m_ClassIndex);  }  return result;}  }
class C{  public static void startCPUProfiling(boolean use_sampling_mode){  if (m_profiler != null) {    m_profiler.startCPUProfiling(use_sampling_mode);  }}  }
class C{  public void clear(){  mStrings.clear();  notifyDataSetChanged();}  }
class C{  public ProductionFrontier(final String name,final GameData data){  super(name,data);}  }
class C{  public boolean canSetList(){  return filter.canSetList();}  }
class C{  public static <T,K,L extends List<T>>BiConsumer<Partition<T,K,L>,T> scheduleEvictIfEmpty(long time,TimeUnit unit){  return null;}  }
class C{  public boolean areEqual(Value a,Value b){  return a.compareTo(b,compareMode) == 0;}  }
class C{  protected boolean isAccelerationEnabled(){  return false;}  }
class C{  public _Fields fieldForId(int fieldId){  return _Fields.findByThriftId(fieldId);}  }
class C{  public void write(String str){  buf.append(str);}  }
class C{  public Builder numBookies(int numBookies){  this._numBookies=numBookies;  return this;}  }
class C{  public PtSubModeRouterSet(TransitRouterConfig config,Map<String,TransitRouterNetwork> networks,TransitRouterNetworkTravelTimeAndDisutility timeAndDisutility,boolean routeOnSameMode){  this.modeRouter=new HashMap<String,TransitRouter>();  this.routeOnSameMode=routeOnSameMode;  this.initRouter(config,networks,timeAndDisutility);}  }
class C{  @SuppressWarnings({"unchecked"}) public void localListen(long hnd,int type){  events.localListen(localFilter(hnd),type);}  }
class C{  private void reportProblems(CompilationUnit workingCopy,IProblemRequestor problemRequestor){  try {    problemRequestor.beginReporting();    for (Iterator iteraror=this.problems.values().iterator(); iteraror.hasNext(); ) {      CategorizedProblem[] categorizedProblems=(CategorizedProblem[])iteraror.next();      if (categorizedProblems == null)       continue;      for (int i=0, length=categorizedProblems.length; i < length; i++) {        CategorizedProblem problem=categorizedProblems[i];        if (JavaModelManager.VERBOSE) {          System.out.println("PROBLEM FOUND while reconciling : " + problem.getMessage());        }        if (this.progressMonitor != null && this.progressMonitor.isCanceled())         break;        problemRequestor.acceptProblem(problem);      }    }  }  finally {    problemRequestor.endReporting();  }}  }
class C{  public void mark(int readAheadLimit) throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  public UserCompanyObject(){  super();}  }
class C{  @Override public boolean isUndoEnabled(){  return m_UndoEnabled;}  }
class C{  public static <T>ResourceList<T> xenonQueryResultToResourceList(Class<T> documentType,ServiceDocumentQueryResult queryResult){  List<T> documents=new ArrayList<>();  if (queryResult.documentLinks != null) {    for (    String link : queryResult.documentLinks) {      documents.add(Utils.fromJson(queryResult.documents.get(link),documentType));    }  }  ResourceList<T> resourceList=new ResourceList<>();  resourceList.setItems(documents);  resourceList.setNextPageLink(queryResult.nextPageLink);  resourceList.setPreviousPageLink(queryResult.prevPageLink);  return resourceList;}  }
class C{  public void initialize(InputSplit split,Configuration cfg){  close();  Credential cred;{    String in=cfg.get(Credential.kTableStoreCredential);    Preconditions.checkNotNull(in,"Must set \"TABLESTORE_CREDENTIAL\"");    cred=Credential.deserialize(in);  }  Endpoint ep;{    String in=cfg.get(Endpoint.kTableStoreEndpoint);    Preconditions.checkNotNull(in,"Must set \"TABLESTORE_ENDPOINT\"");    ep=Endpoint.deserialize(in);  }  if (cred.securityToken == null) {    ots=new SyncClient(ep.endpoint,cred.accessKeyId,cred.accessKeySecret,ep.instance);  } else {    ots=new SyncClient(ep.endpoint,cred.accessKeyId,cred.accessKeySecret,ep.instance,cred.securityToken);  }  TableStoreInputSplit tsSplit=(TableStoreInputSplit)split;  scan=tsSplit.getRangeRowQueryCriteria();  logger.info("table: {} columns-to-get: {} start: {} end: {}",scan.getTableName(),scan.getColumnsToGet(),scan.getInclusiveStartPrimaryKey().toString(),scan.getExclusiveEndPrimaryKey().toString());  results=ots.createRangeIterator(new RangeIteratorParameter(scan));}  }
class C{  public Boolean isParentEnabled(){  return parentEnabled;}  }
class C{  public static float[] insert(float[] field,int index,int size,float... values){  if (index < size) {    field=rshift(field,index,(size - index),values.length,true);  } else {    field=expand(field,(size + values.length),true);    index=size;  }  System.arraycopy(values,0,field,index,values.length);  return field;}  }
class C{  public final String rightSide(int index,Instances data){  StringBuffer text;  text=new StringBuffer();  if (data.attribute(m_attIndex).isNominal())   text.append(" = " + data.attribute(m_attIndex).value(index)); else   if (index == 0)   text.append(" <= " + Utils.doubleToString(m_splitPoint,6)); else   text.append(" > " + Utils.doubleToString(m_splitPoint,6));  return text.toString();}  }
class C{  public static void refreshGateAttributes(LogicCircuit lc,GateLibrary gate_library){  refreshGateAttributes(lc.get_logic_gates(),gate_library);  refreshGateAttributes(lc.get_output_gates(),gate_library);}  }
class C{  public static Method findMethod(Class clazz,String name,String desc){  Method m=findMethod2(clazz,name,desc);  if (m == null)   error(clazz,name,desc);  return m;}  }
class C{  public static boolean InnerAddLabels(Vector stmtseq,boolean firstLabeled,boolean inWith,Vector inAssigned,Vector outAssigned) throws ParseAlgorithmException {  int i=0;  Copy(inAssigned,outAssigned);  boolean nextStepNeedsLabel=firstLabeled;  boolean hadOrAddedLabel=false;  while (i < stmtseq.size()) {    AST stmt=(AST)stmtseq.elementAt(i);    if (!stmt.lbl.equals("")) {      hadOrAddedLabel=true;      outAssigned.removeAllElements();      if (inWith) {        throw new ParseAlgorithmException("Label in `with' statement",stmt);      }      ;    }    ;    if (nextStepNeedsLabel) {      if (inWith) {        throw new ParseAlgorithmException("Statement follows `call' or `return' inside a " + "`with' statement.",stmt);      }      ;      NeedsLabel((AST)stmtseq.elementAt(i));      nextStepNeedsLabel=false;      hadOrAddedLabel=true;      outAssigned.removeAllElements();    }    ;    if (stmt.getClass().equals(AST.LabelIfObj.getClass())) {      AST.LabelIf obj=(AST.LabelIf)stmt;      Vector thenAssigned=new Vector();      Vector elseAssigned=new Vector();      nextStepNeedsLabel=InnerAddLabels(obj.unlabThen,false,inWith,outAssigned,thenAssigned);      nextStepNeedsLabel=InnerAddLabels(obj.unlabElse,false,inWith,outAssigned,elseAssigned) || nextStepNeedsLabel;      Copy(Union(thenAssigned,elseAssigned),outAssigned);    } else     if (stmt.getClass().equals(AST.LabelEitherObj.getClass())) {      AST.LabelEither obj=(AST.LabelEither)stmt;      int j=0;      Vector newOutAssigned=new Vector();      Vector newOutWithAssigned=new Vector();      while (j < obj.clauses.size()) {        AST.Clause clause=(AST.Clause)obj.clauses.elementAt(j);        Vector orAssigned=new Vector();        Vector orWithAssigned=new Vector();        nextStepNeedsLabel=InnerAddLabels(clause.unlabOr,false,inWith,outAssigned,orAssigned) || nextStepNeedsLabel;        Copy(Union(orAssigned,newOutAssigned),newOutAssigned);        j=j + 1;      }      ;      Copy(newOutAssigned,outAssigned);    } else     if (stmt.getClass().equals(AST.WhileObj.getClass())) {      AST.While obj=(AST.While)stmt;      if (inWith) {        throw new ParseAlgorithmException("`while' inside a `with' statement",stmt);      }      ;      NeedsLabel(stmt);      hadOrAddedLabel=true;      outAssigned.removeAllElements();      Vector newOutAssigned=new Vector();      InnerAddLabels(obj.unlabDo,false,false,outAssigned,newOutAssigned);      nextStepNeedsLabel=false;    } else     if (stmt.getClass().equals(AST.WithObj.getClass())) {      AST.With obj=(AST.With)stmt;      Vector newInAssigned=new Vector();      if (inWith) {        Copy(inAssigned,newInAssigned);      }      ;      Vector newOutAssigned=new Vector();      nextStepNeedsLabel=InnerAddLabels(obj.Do,false,true,newInAssigned,newOutAssigned);      Copy(newOutAssigned,outAssigned);      if (!inWith) {        if (!HasEmptyIntersection(inAssigned,outAssigned)) {          NeedsLabel(stmt);          hadOrAddedLabel=true;          outAssigned.removeAllElements();        }        ;      }      ;    } else     if (stmt.getClass().equals(AST.AssignObj.getClass())) {      AST.Assign obj=(AST.Assign)stmt;      Vector assignedVbls=new Vector();      int j=0;      while (j < obj.ass.size()) {        AST.SingleAssign assgn=(AST.SingleAssign)obj.ass.elementAt(j);        String vbl=assgn.lhs.var;        if (!IsIn(vbl,assignedVbls)) {          assignedVbls.addElement(vbl);        }        ;        j=j + 1;      }      ;      if (HasEmptyIntersection(outAssigned,assignedVbls)) {        Copy(Union(outAssigned,assignedVbls),outAssigned);      } else {        if (inWith) {          throw new ParseAlgorithmException("Second assignment to same variable " + "inside a `with' statement",stmt);        }        ;        NeedsLabel(stmt);        hadOrAddedLabel=true;        Copy(assignedVbls,outAssigned);      }      ;      nextStepNeedsLabel=false;    } else {      nextStepNeedsLabel=false;      Vector assignedVbls=new Vector();      boolean isCallOrReturn=false;      boolean setsPrcdVbls=false;      if (stmt.getClass().equals(AST.CallObj.getClass())) {        AST.Call obj=(AST.Call)stmt;        isCallOrReturn=true;        if (obj.to.equals(currentProcedure)) {          setsPrcdVbls=true;        }        ;      } else       if (stmt.getClass().equals(AST.ReturnObj.getClass()) || stmt.getClass().equals(AST.CallReturnObj.getClass())) {        isCallOrReturn=true;        setsPrcdVbls=true;      } else       if (stmt.getClass().equals(AST.GotoObj.getClass())) {        nextStepNeedsLabel=true;      }      ;      if (isCallOrReturn) {        nextStepNeedsLabel=true;        assignedVbls.addElement("stack");        if (setsPrcdVbls) {          int j=0;          while (j < procedures.size()) {            AST.Procedure prcd=(AST.Procedure)procedures.elementAt(j);            int k=0;            while (k < prcd.params.size()) {              AST.PVarDecl decl=(AST.PVarDecl)prcd.params.elementAt(k);              assignedVbls.addElement(decl.var);              k=k + 1;            }            ;            k=0;            while (k < prcd.decls.size()) {              AST.PVarDecl decl=(AST.PVarDecl)prcd.decls.elementAt(k);              assignedVbls.addElement(decl.var);              k=k + 1;            }            ;            j=j + 1;          }        }        ;      }      if (HasEmptyIntersection(outAssigned,assignedVbls)) {        Copy(Union(outAssigned,assignedVbls),outAssigned);      } else {        if (inWith) {          throw new ParseAlgorithmException("Call or return makes second assignment " + "to a variable inside a `with' statement",stmt);        }        ;        NeedsLabel(stmt);        hadOrAddedLabel=true;        Copy(assignedVbls,outAssigned);      }      ;    }    ;    i=i + 1;  }  return hadOrAddedLabel || nextStepNeedsLabel;}  }
class C{  public String open(){  shell=new Shell(getParent(),getStyle());  shell.setText(getText());  createContents(shell);  SWTUtils.center(shell);  shell.pack();  shell.open();  Display display=getParent().getDisplay();  while (!shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }  return result;}  }
class C{  public void begin(){  m_out.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");  println();}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  static String classNameOf(TypeElement type){  String name=type.getQualifiedName().toString();  String pkgName=packageNameOf(type);  return pkgName.isEmpty() ? name : name.substring(pkgName.length() + 1);}  }
class C{  public Type0Font(String baseFont,PDFObject fontObj,PDFFontDescriptor descriptor) throws IOException {  super(baseFont,descriptor);  PDFObject[] descendantFonts=fontObj.getDictRef("DescendantFonts").getArray();  fonts=new PDFFont[descendantFonts.length];  for (int i=0; i < descendantFonts.length; i++) {    fonts[i]=PDFFont.getFont(descendantFonts[i],null);  }}  }
class C{  public void testHotDeployFailureEJBJar(){  this.fileHandler.createFile("ram:///test.jar");  EJB ejb=(EJB)factory.createDeployable("jonas4x","ram:///test.jar",DeployableType.EJB);  setupAdminHotDeploymentFailure();  try {    deployer.deploy(ejb);    fail("No CargoException raised");  } catch (  CargoException expected) {    assertTrue(fileHandler.exists(deployer.getDeployableDir(ejb) + "/test.jar"));  }}  }
class C{  public ObjectArrayMutableBiomeBuffer(BiomeType[] biomes,Vector3i start,Vector3i size){  super(start,size);  this.biomes=biomes;}  }
class C{  public static double dot(double[] u,double[] v){  int n=length(u,v);  double dot=0.0;  for (int i=0; i < n; i++) {    dot+=u[i] * v[i];  }  return dot;}  }
class C{  @VisibleForTesting public void testFling(float velocity){  fling(SystemClock.uptimeMillis(),0,0,velocity,0);}  }
class C{  public boolean isPostal(){  if (getPostals(false) == null)   return false;  return getPostals(false).length > 0;}  }
class C{  public void cut(){  this.checkWidget();  this.text.cut();}  }
class C{  void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {  out.writeByte(CONSTANT_CLASS);  out.writeShort(tab.index(name));}  }
class C{  public void rejectDistribution(String sessionId,String idEntidad,boolean isLdap,Locale locale,List dis,int state,int firstRow,int typeDist,String remarks,String distWhere,String regWhere) throws ValidationException, DistributionException, SessionException, BookException {  UseCaseConf useCaseConf=new UseCaseConf();  useCaseConf.setEntidadId(idEntidad);  useCaseConf.setSessionID(sessionId);  useCaseConf.setUseLdap(Boolean.valueOf(isLdap));  useCaseConf.setLocale(locale);  rejectDistribution(useCaseConf,dis,state,firstRow,typeDist,remarks,distWhere,regWhere);}  }
class C{  public synchronized void newPixels(int[] newpix,ColorModel newmodel,int offset,int scansize){  this.pixels=newpix;  this.model=newmodel;  this.pixeloffset=offset;  this.pixelscan=scansize;  newPixels();}  }
class C{  @Override public void windowOpened(WindowEvent e){  Dimension size=DemoFrame.this.getSize();  size.height*=.8;  DemoFrame.this.setMinimumSize(size);}  }
class C{  private static void upateHostTenant(DbClient dbClient,URI dataCenterId,URI tenantId){  List<NamedElement> hostUris=listChildren(dbClient,dataCenterId,Host.class,"label","vcenterDataCenter");  for (  NamedElement hostUri : hostUris) {    Host host=dbClient.queryObject(Host.class,hostUri.getId());    if (host != null) {      host.setTenant(tenantId);      dbClient.persistObject(host);    }  }}  }
class C{  @Override public void processOtherContent(Wrapper<Content> contentWrapper){  contentWrapper.getContent().detach();}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  @Inline static void compilePutfieldBarrierLong(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.longFieldWriteBarrierMethod);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.065 -0500",hash_original_method="2F91CFDA044E15B06DFDEA717627020F",hash_generated_method="F838F350808EF8DE76A2A3DA20F92096") public Builder penaltyLog(){  return enable(PENALTY_LOG);}  }
class C{  private String createOrderSummary(String name,int price,boolean addWhippedCream,boolean addChocolate){  String priceMessage=getString(R.string.order_summary_name,name);  priceMessage+="\n" + getString(R.string.order_summary_whipped_cream,addWhippedCream);  priceMessage+="\n" + getString(R.string.order_summary_chocolate,addChocolate);  priceMessage+="\n" + getString(R.string.order_summary_quantity,quantity);  priceMessage+="\n" + getString(R.string.order_summary_price,NumberFormat.getCurrencyInstance().format(price));  priceMessage+="\n" + getString(R.string.thank_you);  return priceMessage;}  }
class C{  public boolean isCurrentlyLive(){  return this.currentlyLive;}  }
class C{  public static <A>SetTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public static File showSaveFile(final Shell parent,final File workingDir){  final JFileImageChooser chooser=new JFileImageChooser(parent,SWT.SAVE,workingDir);  chooser.setFilter(supportedWriters);  final FileDialog dialog=chooser.getFileDialog();  dialog.setText("Save image");  final String path=dialog.open();  File file=null;  if (path != null && path.length() >= 1) {    file=new File(path);  }  return file;}  }
class C{  private void populateBusinessObjectFormatSchema(BusinessObjectFormatEntity businessObjectFormatEntity,Schema schema){  if (schema != null) {    PartitionKeyGroupEntity partitionKeyGroupEntity=null;    if (StringUtils.isNotBlank(schema.getPartitionKeyGroup())) {      partitionKeyGroupEntity=partitionKeyGroupDaoHelper.getPartitionKeyGroupEntity(schema.getPartitionKeyGroup());    }    businessObjectFormatEntity.setNullValue(schema.getNullValue());    businessObjectFormatEntity.setDelimiter(schema.getDelimiter());    businessObjectFormatEntity.setEscapeCharacter(schema.getEscapeCharacter());    businessObjectFormatEntity.setPartitionKeyGroup(partitionKeyGroupEntity);    Collection<SchemaColumnEntity> schemaColumnEntities=businessObjectFormatEntity.getSchemaColumns();    if (schemaColumnEntities == null) {      schemaColumnEntities=new ArrayList<>();      businessObjectFormatEntity.setSchemaColumns(schemaColumnEntities);    }    Map<String,SchemaColumnEntity> schemaColumnMap=new HashMap<>();    createSchemaColumnEntities(schema.getColumns(),false,schemaColumnEntities,schemaColumnMap,businessObjectFormatEntity);    createSchemaColumnEntities(schema.getPartitions(),true,schemaColumnEntities,schemaColumnMap,businessObjectFormatEntity);  }}  }
class C{  @Override public String enhanceClassName(){  return "org.apache.http.impl.client.DefaultRequestDirector";}  }
class C{  public static void owlRegisterCustom(IOwlObserver view){  if (view instanceof View) {    View target=(View)view;    insertEmptyTag(target);    view.onSkinChange(owlCurrentMode(),null);  } else {    throw new IllegalArgumentException("owlRegisterCustom param must be a instance of View");  }}  }
class C{  public static Typeface tangerineBold(Context context){  return FontSourceProcessor.process(R.raw.tangerine_bold,context);}  }
class C{  private boolean isBeforeEnd(ConcurrentSkipListMap.Node<K,V> n){  if (n == null)   return false;  if (hi == null)   return true;  K k=n.key;  if (k == null)   return true;  int c=m.compare(k,hi);  if (c > 0 || (c == 0 && !hiInclusive))   return false;  return true;}  }
class C{  public JXMapViewer(){  factory=new EmptyTileFactory();  try {    ImageIcon imageIcon=new ImageIcon("images/loading.png");    this.setLoadingImage(imageIcon.getImage());  } catch (  Throwable ex) {    mLog.error("JXMapViewer could not load 'loading.png'");    BufferedImage img=new BufferedImage(16,16,BufferedImage.TYPE_INT_ARGB);    Graphics2D g2=img.createGraphics();    g2.setColor(Color.black);    g2.fillRect(0,0,16,16);    g2.dispose();    this.setLoadingImage(img);  }}  }
class C{  public void testEngineGenerateCertPathLjava_io_InputStream_Ljava_lang_String02(){  CertificateFactorySpi certFactorySpi=new extCertificateFactorySpi();  ByteArrayInputStream bais=new ByteArrayInputStream(new byte[0]);  DataInputStream dis=new DataInputStream(bais);  try {    certFactorySpi.engineGenerateCertPath(dis,"encoding");    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  @GwtIncompatible CacheBuilder<K,V> lenientParsing(){  strictParsing=false;  return this;}  }
class C{  private FlexibleNode readBranch(TaxonList taxonList) throws IOException, ImportException {  double length=0.0;  FlexibleNode branch;  if (nextCharacter() == '(') {    branch=readInternalNode(taxonList);  } else {    branch=readExternalNode(taxonList);  }  final String comment=getLastMetaComment();  if (comment != null) {    branch.setAttribute(COMMENT,comment);    clearLastMetaComment();  }  if (getLastDelimiter() == ':') {    length=readDouble(",():;");  }  branch.setLength(length);  return branch;}  }
class C{  protected byte[] engineUpdate(byte[] input,int inputOffset,int inputLen){  return core.update(input,inputOffset,inputLen);}  }
class C{  public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  log.info("VMerge.init - WinNo=" + m_WindowNo);  try {    preInit();    jbInit();    frame.getContentPane().add(panel,BorderLayout.CENTER);    action_loadTree();  } catch (  Exception ex) {    log.log(Level.SEVERE,"VTreeMaintenance.init",ex);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean intersectLineCircle(float a,float b,float c,float centerX,float centerY,float radius,Vector3f intersectionCenterAndHL){  float invDenom=1.0f / (float)Math.sqrt(a * a + b * b);  float dist=(a * centerX + b * centerY + c) * invDenom;  if (-radius <= dist && dist <= radius) {    intersectionCenterAndHL.x=centerX + dist * a * invDenom;    intersectionCenterAndHL.y=centerY + dist * b * invDenom;    intersectionCenterAndHL.z=(float)Math.sqrt(radius * radius - dist * dist);    return true;  }  return false;}  }
class C{  public static double log2(double x){  return Math.log(x) / LOG2;}  }
class C{  protected Connection createConnection() throws Exception {  return getConnectionFactory().createConnection();}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  public static boolean transientLastDdlTimesMatch(String expectedTldt,Table table){  return StringUtils.equals(expectedTldt,table.getParameters().get(HiveParameterKeys.TLDT));}  }
class C{  private Iterable<ClusterNode> nodes(List<List<ClusterNode>> assignment,AffinityFunction aff,Object key){  return assignment.get(aff.partition(key));}  }
class C{  public ServiceAlreadyExistsException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void reinitializeAnimationArrays(){  final int childCount=mWorkspace.getChildCount();  if (mLastChildCount == childCount)   return;  mOldBackgroundAlphas=new float[childCount];  mOldAlphas=new float[childCount];  mNewBackgroundAlphas=new float[childCount];  mNewAlphas=new float[childCount];}  }
class C{  @Override public void onLogoutSuccess(HttpServletRequest request,HttpServletResponse response,Authentication authentication) throws IOException, ServletException {  response.sendRedirect("/api/account");}  }
class C{  public final boolean isHeadlightEnabled(){  return (headlightEnabled);}  }
class C{  private void drawText(final Rectangle clientArea,final GC gc){  if (text == null || "".equals(text)) {    return;  }  final Font font;  if (textFont == null) {    font=parent.getDisplay().getSystemFont();  } else {    font=textFont;  }  final Color color;  if (textColor == null) {    color=parent.getDisplay().getSystemColor(SWT.COLOR_BLACK);  } else {    color=textColor;  }  gc.setForeground(color);  gc.setFont(font);  gc.setTextAntialias(SWT.ON);  final Point textSize=gc.textExtent(text,SWT.DRAW_TRANSPARENT);  final int textWidth=textSize.x;  final int textHeight=textSize.y;  gc.drawString(text,(clientArea.width - textWidth) / 2,(clientArea.height - textHeight) / 2,true);}  }
class C{  public String toStringHeader(){  return new ResultMatrixPlainText(this).toStringHeader();}  }
class C{  private void addArgWithValue(StringBuilder sb,String arg,Object val){  sb.append("\"");  sb.append(arg);  sb.append("=");  sb.append(val);  sb.append("\"");  sb.append(ARGS_DELIMITER);}  }
class C{  public long env_start(){  return Long.parseLong(fields[49]);}  }
class C{  public OrderPositionSplitKey(AbstractOrder<?,?> ord,Integer posNo,Integer sNo){  super();  this.orderId=ord.getOrderId();  this.positionNo=posNo;  this.splitNo=sNo;}  }
class C{  @SuppressWarnings("unchecked") public K params(Map<String,?> params){  this.params=(Map<String,Object>)params;  return self();}  }
class C{  public GaussianDensityFunction(double[] mean,double[] variance){  this.mean=mean;  if (mean.length != variance.length) {    log.warning("different lengths for mean and variance");  }  stdDev=new double[variance.length];  for (int i=0; i < variance.length; i++) {    if (variance[i] < 0) {      log.warning("variance should not be negative, but is : " + variance);    }    stdDev[i]=Math.sqrt(variance[i]);  }  this.variance=variance;}  }
class C{  private void executeImpl(){  if (getArgs().getIterator().hasNext()) {    getArgs().getAdapter().startDelete(this,0,ContactsContract.RawContacts.CONTENT_URI,ContactsContract.Contacts.DISPLAY_NAME + "=?",new String[]{getArgs().getIterator().next()});  } else   Utils.showToast(getArgs().getOps().getActivityContext(),getArgs().getCounter().getValue() + " contact(s) deleted");}  }
class C{  public boolean isDebugging(){  return debugging;}  }
class C{  public TSIGRecord generate(Message m,byte[] b,int error,TSIGRecord old){  Date timeSigned;  if (error != Rcode.BADTIME)   timeSigned=new Date(); else   timeSigned=old.getTimeSigned();  int fudge;  HMAC hmac=null;  if (error == Rcode.NOERROR || error == Rcode.BADTIME)   hmac=new HMAC(digest,digestBlockLength,key);  fudge=Options.intValue("tsigfudge");  if (fudge < 0 || fudge > 0x7FFF)   fudge=FUDGE;  if (old != null) {    DNSOutput out=new DNSOutput();    out.writeU16(old.getSignature().length);    if (hmac != null) {      hmac.update(out.toByteArray());      hmac.update(old.getSignature());    }  }  if (hmac != null)   hmac.update(b);  DNSOutput out=new DNSOutput();  name.toWireCanonical(out);  out.writeU16(DClass.ANY);  out.writeU32(0);  alg.toWireCanonical(out);  long time=timeSigned.getTime() / 1000;  int timeHigh=(int)(time >> 32);  long timeLow=(time & 0xFFFFFFFFL);  out.writeU16(timeHigh);  out.writeU32(timeLow);  out.writeU16(fudge);  out.writeU16(error);  out.writeU16(0);  if (hmac != null)   hmac.update(out.toByteArray());  byte[] signature;  if (hmac != null)   signature=hmac.sign(); else   signature=new byte[0];  byte[] other=null;  if (error == Rcode.BADTIME) {    out=new DNSOutput();    time=new Date().getTime() / 1000;    timeHigh=(int)(time >> 32);    timeLow=(time & 0xFFFFFFFFL);    out.writeU16(timeHigh);    out.writeU32(timeLow);    other=out.toByteArray();  }  return (new TSIGRecord(name,DClass.ANY,0,alg,timeSigned,fudge,signature,m.getHeader().getID(),error,other));}  }
class C{  public void mouseMoved(MouseEvent event){}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  @Transactional(readOnly=true) public List<StepInstance> retrieveUnfinishedStepInstances(){  Query query=entityManager.createQuery("select distinct i " + "from StepInstance i " + "where i not in ("+ "select j "+ "from StepInstance j "+ "inner join j.executions e "+ "where e.state = :successful"+ ") order by i.id desc");  query.setParameter("successful",StepExecutionState.STEP_EXECUTION_SUCCESSFUL);synchronized (lockObject) {    LOGGER.debug("StepInstanceDAO locked");    return query.getResultList();  }}  }
class C{  public void windowActivated(WindowEvent e){  if (AWTEventMonitor.windowListener_private != null) {    AWTEventMonitor.windowListener_private.windowActivated(e);  }}  }
class C{  void writeAndClear(){  write();  clear();}  }
class C{  public void auditControl(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){  URI username=null;  username=URI.create(getUserFromContext().getName());  _auditMgr.recordAuditLog(null,username,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);}  }
class C{  public static IsNullValue nullOnSimplePathValue(){  return instanceByFlagsList[0][NSP];}  }
class C{  private Mode resolve(Mode mode){  if (mode == Mode.CURRENT) {    return currentMode;  }  if (mode.isAnonymous() && !mode.isDefined()) {    return currentMode;  }  return mode;}  }
class C{  public static void main(String[] args){  runFileLoader(new SerializedInstancesLoader(),args);}  }
class C{  public String reverseStringD(String s){  int length=s.length();  if (length <= 1)   return s;  String leftStr=s.substring(0,length / 2);  String rightStr=s.substring(length / 2,length);  return reverseString(rightStr) + reverseString(leftStr);}  }
class C{  private void paintLine(Component c,Graphics g,int w,int h){  int y=h - SPACE;  g.setColor(Color.darkGray);  g.drawLine(GAP,y,w - GAP,y);  g.setColor(Color.white);  g.drawLine(GAP,y + 1,w - GAP,y + 1);  if (m_header == null || m_header.length() == 0)   return;  g.setColor(m_color);  g.setFont(m_font);  int x=GAP;  if (!Language.getLoginLanguage().isLeftToRight()) {  }  g.drawString(m_header,GAP,h - SPACE - 1);}  }
class C{  static boolean interrupted(){  RVMThread current=RVMThread.getCurrentThread();  if (current.isInterrupted()) {    current.clearInterrupted();    return true;  }  return false;}  }
class C{  public void registerInput(String varName,DataFrame df,boolean containsID) throws DMLRuntimeException {  int blksz=ConfigurationManager.getBlocksize();  MatrixCharacteristics mcOut=new MatrixCharacteristics(-1,-1,blksz,blksz);  JavaPairRDD<MatrixIndexes,MatrixBlock> rdd=RDDConverterUtils.dataFrameToBinaryBlock(new JavaSparkContext(_sc),df,mcOut,containsID,false);  registerInput(varName,rdd,mcOut);}  }
class C{  public LocalDate withCenturyOfEra(int centuryOfEra){  return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(),centuryOfEra));}  }
class C{  public boolean add(Object o){synchronized (w) {    try {      w.write("" + System.currentTimeMillis() + ": "+ o+ "\n");      w.flush();    } catch (    Exception e) {      System.err.println("WriterSet: " + e);    }    return false;  }}  }
class C{  public static int[] randomPermutation(final int[] out,Random random){  for (int i=out.length - 1; i > 0; i--) {    int ri=random.nextInt(i + 1);    int tmp=out[ri];    out[ri]=out[i];    out[i]=tmp;  }  return out;}  }
class C{  public void removeModifyListener(final ModifyListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.modifyListeners.remove(listener);}  }
class C{  public void addRequest(ScriptMethodRequest request){  requests.add(request);}  }
class C{  public StatementsTest(String name){  super(name);}  }
class C{  public static List<UnManagedVolume> findUnManagedVolumesForHost(URI hostUri,DbClient dbClient,CoordinatorClient coordinator){  _logger.info("finding unmanaged volumes for host " + hostUri);  List<UnManagedVolume> unmanagedVolumes=new ArrayList<UnManagedVolume>();  List<Initiator> initiators=ComputeSystemHelper.queryInitiators(dbClient,hostUri);  Map<String,UnManagedExportMask> cache=new HashMap<String,UnManagedExportMask>();  Host host=dbClient.queryObject(Host.class,hostUri);  Set<String> clusterInis=new HashSet<String>();  if (!NullColumnValueGetter.isNullURI(host.getCluster())) {    List<URI> hostUris=ComputeSystemHelper.getChildrenUris(dbClient,host.getCluster(),Host.class,"cluster");    hostUris.remove(hostUri);    for (    URI uri : hostUris) {      List<URI> inis=dbClient.queryByConstraint(ContainmentConstraint.Factory.getContainedObjectsConstraint(uri,Initiator.class,"host"));      clusterInis.addAll(Collections2.transform(inis,CommonTransformerFunctions.FCTN_URI_TO_STRING));    }  }  Set<URI> unManagedVolumeUris=new HashSet<URI>();  URIQueryResultList results=new URIQueryResultList();  for (  Initiator initiator : initiators) {    _logger.info("      looking at initiator " + initiator.getInitiatorPort());    dbClient.queryByConstraint(AlternateIdConstraint.Factory.getUnManagedVolumeInitiatorNetworkIdConstraint(initiator.getInitiatorPort()),results);    if (results.iterator() != null) {      for (      URI uri : results) {        _logger.debug("      found UnManagedVolume " + uri);        unManagedVolumeUris.add(uri);      }    }  }  _logger.info("Found Unmanaged volumes {} associated to Host {}",Joiner.on(",").join(unManagedVolumeUris),hostUri);  for (  URI unmanagedVolumeUri : unManagedVolumeUris) {    UnManagedVolume unmanagedVolume=dbClient.queryObject(UnManagedVolume.class,unmanagedVolumeUri);    if (unmanagedVolume == null || unmanagedVolume.getInactive() == true) {      continue;    }    boolean noFilteringOutClusterVolumes=Boolean.valueOf(ControllerUtils.getPropertyValueFromCoordinator(coordinator,UNMANAGEDVOLUME_CLUSTER_FILTERING_SETTING));    Set<String> inisOfunManagedMask=getInitiatorsOfUnmanagedExportMask(unmanagedVolume,cache,dbClient);    Set<String> interSection=Sets.intersection(clusterInis,inisOfunManagedMask);    if (noFilteringOutClusterVolumes || interSection.isEmpty()) {      unmanagedVolumes.add(unmanagedVolume);      _logger.info("   volume: " + unmanagedVolume.getLabel() + " nativeGuid: "+ unmanagedVolume.getNativeGuid());    } else {      _logger.info("UnManagedVolume {} is exposed to cluster as well, skipping",unmanagedVolume.getNativeGuid());    }  }  if (unmanagedVolumes.isEmpty()) {    _logger.info("   did not find any unmanaged volumes for this host");  }  return unmanagedVolumes;}  }
class C{  public static String byteArrayToHexString(final byte[] b){  final StringBuffer sb=new StringBuffer(b.length * 2);  for (  final byte element : b) {    final int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase();}  }
class C{  public static boolean isSignedDouble(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    Double.parseDouble(s);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  OptionListModel clone=(OptionListModel)super.clone();  clone.value=(BitSet)value.clone();  clone.listenerList=new EventListenerList();  return clone;}  }
class C{  public static void demuxArray(Object src,int[] dims,Object dst){  if (Array.getLength(src) != getLength(dims))   throw new IllegalArgumentException("The length of src does not match the length of dst");  _fillDemux(0,dims,src,0,dst);}  }
class C{  @Override public double distance(NumberVector v1,NumberVector v2){  return 1 - PearsonCorrelation.coefficient(v1,v2);}  }
class C{  @Override public void addValue(double data,double given,double weight){  int insertIndex=findNearestPair(given,data);  if ((m_Values.size() <= insertIndex) || (m_CondValues.elementAt(insertIndex).doubleValue() != given) || (m_Values.elementAt(insertIndex).doubleValue() != data)) {    m_CondValues.insertElementAt(new Double(given),insertIndex);    m_Values.insertElementAt(new Double(data),insertIndex);    m_Weights.insertElementAt(new Double(weight),insertIndex);    if (weight != 1) {    }  } else {    double newWeight=m_Weights.elementAt(insertIndex).doubleValue();    newWeight+=weight;    m_Weights.setElementAt(new Double(newWeight),insertIndex);  }  m_SumOfWeights+=weight;  m_Covariance=null;}  }
class C{  public void connectPort(DCCppNetworkPortController p){  istream=p.getInputStream();  istreamReader=new BufferedReader(new InputStreamReader(istream));  ostream=p.getOutputStream();  if (networkController != null) {    log.warn("connectPort: connect called while connected");  }  networkController=p;}  }
class C{  public DataSource createIsilonFileSystemPathDataSource(Project project,VirtualPool vPool,TenantOrg tenant,StorageSystem storageSystem){  return createDataSource(CustomConfigConstants.ISILON_PATH_CUSTOMIZATION,new DataObject[]{project,vPool,tenant,storageSystem});}  }
class C{  void markInternalClasses(){  for (int i=mClassDefs.length - 1; i >= 0; i--) {    mTypeIds[mClassDefs[i].classIdx].internal=true;  }  for (int i=0; i < mTypeIds.length; i++) {    String className=mStrings[mTypeIds[i].descriptorIdx];    if (className.length() == 1) {      mTypeIds[i].internal=true;    } else     if (className.charAt(0) == '[') {      mTypeIds[i].internal=true;    }  }}  }
class C{  protected XBeeMessage(){}  }
class C{  public T caseVariableDeclarationOrBinding(VariableDeclarationOrBinding object){  return null;}  }
class C{  public GridClientFutureAdapter(R res){  onDone(res,null);}  }
class C{  private void handleSelection(String selection,SelectionType type){  mShouldHandleSelectionModification=true;  mHandler.handleSelection(selection,isValidSelection(selection),type,mX,mY);}  }
class C{  @Override public boolean isMessage(){  return true;}  }
class C{  StackMap(ConstPool cp,byte[] newInfo){  super(cp,tag,newInfo);}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (action.has(VALUE)) {    final Outfit outfit=new Outfit(action.getInt(VALUE));    if (outfit.isChoosableByPlayers()) {      new GameEvent(player.getName(),OUTFIT,action.get(VALUE)).raise();      player.setOutfit(outfit,false);      String color=action.get("hair");      if (color != null) {        player.put(COLOR_MAP,"hair",color);      } else {        player.remove(COLOR_MAP,"hair");      }      color=action.get("dress");      if (color != null) {        player.put(COLOR_MAP,"dress",color);      } else {        player.remove(COLOR_MAP,"dress");      }    }  }}  }
class C{  public static void registerSubTile(String key,Class<? extends SubTileEntity> subtileClass){  Preconditions.checkArgument(Loader.instance().isInState(LoaderState.PREINITIALIZATION));  subTiles.put(key,subtileClass);  subTileMods.put(key,Loader.instance().activeModContainer().getModId());}  }
class C{  public TextEditGroup(String name,TextEdit[] edits){  super();  fDescription=name;  fEdits=new ArrayList(Arrays.asList(edits));}  }
class C{  public String post(String request,String content) throws IOException {  HttpPost httpPost=new HttpPost(getBaseURL() + request);  httpPost.setEntity(new StringEntity(content,ContentType.create("application/json",StandardCharsets.UTF_8)));  return getResponse(httpPost);}  }
class C{  public static void uncomment(Vector inp,int begLine,int begCol) throws ParseAlgorithmException {  int line=begLine;  int col=begCol;  boolean notDone=true;  int commentDepth=0;  StringBuffer newLine=new StringBuffer(((String)inp.elementAt(line)).substring(0,col));  while (notDone && line < inp.size()) {    String oldLine=(String)inp.elementAt(line);    boolean inString=false;    boolean afterBackslash=false;    boolean afterAsterisk=false;    while (notDone && col < oldLine.length()) {      char inChar=oldLine.charAt(col);      char outChar=inChar;      if ((inChar == '(') && !inString && (col < oldLine.length() - 1)&& (oldLine.charAt(col + 1) == '*')) {        commentDepth=commentDepth + 1;        outChar=' ';        col=col + 1;        newLine.append(outChar);      } else       if ((inChar == '*') && !inString && (col < oldLine.length() - 1)&& (oldLine.charAt(col + 1) == ')')) {        if (commentDepth == 0) {          newLine.append(inChar);          outChar=')';          col=col + 1;          notDone=false;        } else {          commentDepth=commentDepth - 1;          outChar=' ';          col=col + 1;          newLine.append(outChar);        }        ;      } else       if (commentDepth == 0) {        if (inString) {          if (inChar == '"') {            inString=false;          } else           if ((inChar == '\\') && (col < oldLine.length() - 1)) {            newLine.append(inChar);            outChar=oldLine.charAt(col + 1);            col=col + 1;          }          ;        } else {          if ((inChar == '\\') && (col < oldLine.length() - 1) && (oldLine.charAt(col + 1) == '*')) {            outChar=' ';            col=oldLine.length();          } else           if (inChar == '"') {            inString=true;          }        }        ;      } else {        outChar=' ';      }      ;      newLine.append(outChar);      col=col + 1;    }    ;    if (inString) {      throw new ParseAlgorithmException("Unterminated string in line " + (line + 1));    }    inp.set(line,newLine.toString());    newLine=new StringBuffer();    col=0;    line=line + 1;  }  return;}  }
class C{  public Key keyOf(int i){  if (i < 0 || i >= nmax)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  return keys[i + d];}  }
class C{  public void startProcessing(){  interrupted=false;  start();}  }
class C{  @Override public boolean handles(Class cls){  return (ClassDiscovery.hasInterface(MultiLabelClassifier.class,cls));}  }
class C{  private void validateEmrClusterDefinition(Integer expectedEmrClusterDefinitionId,String expectedNamespace,String expectedEmrClusterDefinitionName,EmrClusterDefinition expectedEmrClusterConfiguration,EmrClusterDefinitionInformation actualEmrClusterDefinition){  assertNotNull(actualEmrClusterDefinition);  if (expectedEmrClusterDefinitionId != null) {    assertEquals(expectedEmrClusterDefinitionId,Integer.valueOf(actualEmrClusterDefinition.getId()));  }  assertEquals(expectedNamespace,actualEmrClusterDefinition.getEmrClusterDefinitionKey().getNamespace());  assertEquals(expectedEmrClusterDefinitionName,actualEmrClusterDefinition.getEmrClusterDefinitionKey().getEmrClusterDefinitionName());  assertEquals(expectedEmrClusterConfiguration,actualEmrClusterDefinition.getEmrClusterDefinition());}  }
class C{  private static void disableObjectAddressRemapper(){  Magic.setObjectAddressRemapper(null);  RVMMember remapper=Entrypoints.magicObjectRemapperField;  Statics.setSlotContents(remapper.getOffset(),0);}  }
class C{  private AppInfo findApplicationInfoLocked(String packageName,UserHandleCompat user,String className){  for (  AppInfo info : data) {    final ComponentName component=info.intent.getComponent();    if (user.equals(info.user) && packageName.equals(component.getPackageName()) && className.equals(component.getClassName())) {      return info;    }  }  return null;}  }
class C{  public JSONArray put(Map value){  this.put(new JSONObject(value));  return this;}  }
class C{  public boolean removeAll(Object key1,Object key2){  boolean modified=false;  MapIterator it=mapIterator();  while (it.hasNext()) {    MultiKey multi=(MultiKey)it.next();    if (multi.size() >= 2 && (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) && (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1)))) {      it.remove();      modified=true;    }  }  return modified;}  }
class C{  Vector3 tmp3(){  return tmp3.set(this);}  }
class C{  public static <T extends GenericEntity>List<T> filterByOr(List<T> values,List<? extends EntityCondition> exprs){  if (values == null)   return null;  if (UtilValidate.isEmpty(exprs)) {    return values;  }  List<T> result=new LinkedList<T>();  for (  T value : values) {    boolean include=false;    for (    EntityCondition condition : exprs) {      include=condition.entityMatches(value);      if (include)       break;    }    if (include) {      result.add(value);    }  }  return result;}  }
class C{  @Override public void updateTextViews(Recharge recharge){  unitTypeTextView.setText(recharge.getUnits());  unitValueTextView.setText(String.valueOf(recharge.getCurrentAmount()));  costTextView.setText(Currency.localize(recharge.getCurrentCost(),true));  rechargeName.setText(recharge.getTitle());  confirmationTextView.setText("Add " + recharge.getCurrentAmount() + " extra "+ recharge.getUnits()+ " for the month?");  if (recharge.getCurrentAmount() == recharge.getInitialAmount()) {    downArrow.setVisibility(View.INVISIBLE);  } else {    downArrow.setVisibility(View.VISIBLE);  }}  }
class C{  public void deiconifyFrame(JInternalFrame f){  JInternalFrame.JDesktopIcon desktopIcon=f.getDesktopIcon();  Container c=desktopIcon.getParent();  JDesktopPane d=f.getDesktopPane();  if (c != null && d != null) {    c.add(f);    if (f.isMaximum()) {      Rectangle desktopBounds=c.getBounds();      if (f.getWidth() != desktopBounds.width || f.getHeight() != desktopBounds.height) {        setBoundsForFrame(f,0,0,desktopBounds.width,desktopBounds.height);      }    }    removeIconFor(f);    if (f.isSelected()) {      f.moveToFront();      f.restoreSubcomponentFocus();    } else {      try {        f.setSelected(true);      } catch (      PropertyVetoException e2) {      }    }  }}  }
class C{  public void testTimedInvokeAll3() throws InterruptedException {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new StringTask());    l.add(null);    try {      e.invokeAll(l,MEDIUM_DELAY_MS,MILLISECONDS);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  private boolean isBadVersion(int m){  return m > 1;}  }
class C{  public static double incompleteBeta(double aa,double bb,double xx){  double a, b, t, x, xc, w, y;  boolean flag;  if (aa <= 0.0 || bb <= 0.0) {    throw new ArithmeticException("ibeta: Domain error!");  }  if ((xx <= 0.0) || (xx >= 1.0)) {    if (xx == 0.0) {      return 0.0;    }    if (xx == 1.0) {      return 1.0;    }    throw new ArithmeticException("ibeta: Domain error!");  }  flag=false;  if ((bb * xx) <= 1.0 && xx <= 0.95) {    t=powerSeries(aa,bb,xx);    return t;  }  w=1.0 - xx;  if (xx > (aa / (aa + bb))) {    flag=true;    a=bb;    b=aa;    xc=xx;    x=w;  } else {    a=aa;    b=bb;    xc=w;    x=xx;  }  if (flag && (b * x) <= 1.0 && x <= 0.95) {    t=powerSeries(a,b,x);    if (t <= MACHEP) {      t=1.0 - MACHEP;    } else {      t=1.0 - t;    }    return t;  }  y=x * (a + b - 2.0) - (a - 1.0);  if (y < 0.0) {    w=incompleteBetaFraction1(a,b,x);  } else {    w=incompleteBetaFraction2(a,b,x) / xc;  }  y=a * Math.log(x);  t=b * Math.log(xc);  if ((a + b) < MAXGAM && Math.abs(y) < MAXLOG && Math.abs(t) < MAXLOG) {    t=Math.pow(xc,b);    t*=Math.pow(x,a);    t/=a;    t*=w;    t*=gamma(a + b) / (gamma(a) * gamma(b));    if (flag) {      if (t <= MACHEP) {        t=1.0 - MACHEP;      } else {        t=1.0 - t;      }    }    return t;  }  y+=t + lnGamma(a + b) - lnGamma(a) - lnGamma(b);  y+=Math.log(w / a);  if (y < MINLOG) {    t=0.0;  } else {    t=Math.exp(y);  }  if (flag) {    if (t <= MACHEP) {      t=1.0 - MACHEP;    } else {      t=1.0 - t;    }  }  return t;}  }
class C{  public static <T>Single.Transformer<T,T> observeOnUIThreadTransformerSingle(){  return null;}  }
class C{  public static Match.Builder createForgetfulBuilder(Match m){  return OFFactories.getFactory(m.getVersion()).buildMatch();}  }
class C{  public static Map<String,List<GenericValue>> makeCategoryFeatureLists(String productCategoryId,Delegator delegator){  return makeCategoryFeatureLists(productCategoryId,delegator,DEFAULT_PER_TYPE_MAX_SIZE);}  }
class C{  @Override public void fill(GL2 gl){  draw(gl);}  }
class C{  public Builder nb(){  this.withBorder=false;  return this;}  }
class C{  public int isMidFreqCoeff8x8(int coeff){switch (coeff) {case 3:case 10:case 17:case 24:    return 1;case 4:case 11:case 18:case 25:case 32:  return 2;case 5:case 12:case 19:case 26:case 33:case 40:return 3;case 13:case 20:case 27:case 34:case 41:return 4;case 28:case 35:return 5;default :return 0;}}  }
class C{  public boolean isAfterNow(){  return isAfter(DateTimeUtils.currentTimeMillis());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String objectName(){  return objectName;}  }
class C{  public void update(URI id,PolicyParam input){  client.put(String.class,input,PathConstants.SCHEDULE_POLICIES_BY_POLICY_URL,id);}  }
class C{  protected FloatBuffer fillBuffer(float[] arr){  FloatBuffer buffer=ByteBuffer.allocateDirect(arr.length * BYTES_PER_FLOAT).order(ByteOrder.nativeOrder()).asFloatBuffer();  buffer.put(arr).position(0);  return buffer;}  }
class C{  public void createTable(String name,String... fields) throws SQLException {  if (fields.length == 0) {    throw new IllegalArgumentException("Must specify at least one column when creating a table");  }  if (fields.length % 2 != 0) {    throw new IllegalArgumentException("Must specify files in pairs of name followed by " + "column spec");  }  StringBuilder statement=new StringBuilder();  statement.append("CREATE TABLE ");  statement.append(quoteCaseSensitive(name));  statement.append(" (");  for (int i=0; i < fields.length; i+=2) {    if (i > 0) {      statement.append(", ");    }    statement.append(quoteCaseSensitive(fields[i]));    statement.append(" ");    statement.append(fields[i + 1]);  }  statement.append(")");  Statement stmt=conn.createStatement();  String statementStr=statement.toString();  log.debug("Creating table {} in {} with statement {}",name,this.name,statementStr);  stmt.execute(statementStr);}  }
class C{  public static void error(Object message){  RuntimeSingleton.error(message);}  }
class C{  public void createVictoryConditions(){  victory=vf.createVictory("this string should be taken from game options");}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (title: ");  result.append(title);  result.append(", actualTitle: ");  result.append(actualTitle);  result.append(')');  return result.toString();}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  public int readXRefs(int current,final byte[] Bytes,final int endTable,int i,final long eof,final RandomAccessBuffer pdf_datafile){  char flag;  int id, tokenCount, generation, lineLen, startLine, endLine;  boolean skipNext=false;  boolean isFirstValue=true;  final int[] breaks=new int[5];  final int[] starts=new int[5];  while (i < endTable) {    startLine=i;    endLine=-1;    while (Bytes[i] != 10 && Bytes[i] != 13) {      if ((endLine == -1) && (Bytes[i] == 37)) {        endLine=i - 1;      }      i++;    }    if (endLine == -1) {      endLine=i - 1;    }    while (Bytes[startLine] == 32) {      startLine++;    }    while (Bytes[endLine] == 32) {      endLine--;    }    i++;    tokenCount=0;    lineLen=endLine - startLine + 1;    if (lineLen > 0) {      int lastChar=1, currentChar;      for (int j=1; j < lineLen; j++) {        currentChar=Bytes[startLine + j];        if ((currentChar == 32) && (lastChar != 32)) {          breaks[tokenCount]=j;          tokenCount++;        } else         if ((currentChar != 32) && (lastChar == 32)) {          starts[tokenCount]=j;        }        lastChar=currentChar;      }      breaks[tokenCount]=lineLen;      tokenCount++;      if (tokenCount == 1) {        if (skipNext) {          skipNext=false;        } else {          current=NumberUtils.parseInt(startLine,startLine + breaks[0],Bytes);          skipNext=true;        }      } else       if (tokenCount == 2) {        current=NumberUtils.parseInt(startLine,startLine + breaks[0],Bytes);      } else {        id=NumberUtils.parseInt(startLine,startLine + breaks[0],Bytes);        generation=NumberUtils.parseInt(startLine + starts[1],startLine + breaks[1],Bytes);        flag=(char)Bytes[startLine + starts[2]];        if ((flag == 'n')) {          boolean isValid=false;          int bufSize=20;          if (id + bufSize > eof) {            bufSize=(int)(eof - id);          }          if (bufSize > 0) {            final byte[] buffer=getBytes(id,bufSize,pdf_datafile);            for (int ii=4; ii < bufSize; ii++) {              if ((buffer[ii - 3] == 32 || buffer[ii - 3] == 10) && (buffer[ii - 2] == 111) && (buffer[ii - 1] == 98)&& (buffer[ii] == 106)) {                isValid=true;                ii=bufSize;              }            }            if (isValid && isFirstValue) {              isFirstValue=false;              if (buffer[0] == 48 && buffer[1] != 48 && current == 1) {                current=0;              } else               if (buffer[0] == 49 && buffer[1] == 32) {                current=1;              }            }            if (isValid) {              storeObjectOffset(current,id,generation,false,false);              xref.addElement(id);            } else             if (LogWriter.isRunningFromIDE) {              LogWriter.writeLog(current + " " + id+ " is bum reference");            }          }          current++;        } else         if (flag == 'f') {          current++;        }      }    }  }  return current;}  }
class C{  private MapTile findTile(int zoom,long i,long j){  Long key=i * (1 << zoom) + j;  SoftReference<MapTile> exists=tiles[zoom].get(key);  return (exists == null) ? null : exists.get();}  }
class C{  @Override public boolean isStartElement(){  log.log(Level.FINE,"isStartElement(): {0}",event == START_ELEMENT);  return event == START_ELEMENT;}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  public static long overSize(long minTargetSize){  return overSize(minTargetSize,PAGE_SIZE_IN_BYTES / 8,1);}  }
class C{  public static void main(String[] args){  try {    if (args.length == 0) {      throw new Exception("Usage: Regression \"some text\"");    }    Properties props=System.getProperties();    props.setProperty(ROOT_PROPERTY,props.getProperty("java.io.tmpdir"));    Regression reg=new Regression(Regression.class);    for (    String arg : args) {      reg.println(arg);    }    String diff=reg.diff();    if (diff == null) {      System.err.println("Created reference output");    } else     if (diff.equals("")) {      System.err.println("Passed");    } else {      System.err.println("Failed: " + diff);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDR");  translateAll(environment,instruction,"LDR",instructions);}  }
class C{  protected void addContextPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ServiceInvocation_context_feature"),getString("_UI_PropertyDescriptor_description","_UI_ServiceInvocation_context_feature","_UI_ServiceInvocation_type"),EipPackage.Literals.SERVICE_INVOCATION__CONTEXT,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private String badRegister(long s){  return "Attempt to register more than " + MAX_PARTIES + " parties for "+ stateToString(s);}  }
class C{  static boolean spanSetFromAttributes(int axis,SizeRequirements r,CSS.LengthValue cssWidth,CSS.LengthValue cssHeight){  if (axis == X_AXIS) {    if ((cssWidth != null) && (!cssWidth.isPercentage())) {      r.minimum=r.preferred=r.maximum=(int)cssWidth.getValue();      return true;    }  } else {    if ((cssHeight != null) && (!cssHeight.isPercentage())) {      r.minimum=r.preferred=r.maximum=(int)cssHeight.getValue();      return true;    }  }  return false;}  }
class C{  void createFinish(int width,int height){  if (mWXSDKInstance.getRenderStrategy() == WXRenderStrategy.APPEND_ONCE) {    mWXSDKInstance.onViewCreated(mGodComponent);  }  mWXSDKInstance.onRenderSuccess(width,height);}  }
class C{  public Vector rotateXY(final double angle){  return rotateXY(Math.sin(angle),Math.cos(angle));}  }
class C{  public FolderEntry(BaseEntry<FolderEntry> sourceEntry){  super(sourceEntry);}  }
class C{  public FacebookGraphObjectException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  public Coordinate orig(){  return orig;}  }
class C{  public SimpleProperty(String namespace,String localName,String value){  super();  this.namespace=namespace;  this.localName=localName;  this.value=value;}  }
class C{  private void fetch(String host,int port,boolean secure,String path,int outerLoop,int innerLoop,int delay,int timeout) throws IOException {  fetch(clientFactory,host,port,secure,path,outerLoop,innerLoop,delay,timeout);}  }
class C{  protected void storeState(){  if (storePartials) {    likelihoodCore.storeState();    precisionLikelihoodCore.storeState();  }  super.storeState();}  }
class C{  public DefaultWaypoint(){  this(new GeoPosition(0,0));}  }
class C{  protected void print(final List<String> lines){  ensureViewOpened();  for (  final String line : lines) {    console.print(line);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.453 -0500",hash_original_method="92CC6877DF7B50AD61B75778CFB22735",hash_generated_method="44EAD4A20182A38DB6FCBEBB6380CA34") public SIPHeader parse() throws ParseException {  ReplyTo replyTo=new ReplyTo();  if (debug)   dbg_enter("ReplyTo.parse");  try {    headerName(TokenTypes.REPLY_TO);    replyTo.setHeaderName(SIPHeaderNames.REPLY_TO);    super.parse(replyTo);    return replyTo;  }  finally {    if (debug)     dbg_leave("ReplyTo.parse");  }}  }
class C{  public static Vector<Vector<MappingObject>> RemoveRedundantParens(Vector<Vector<MappingObject>> mappingVec){  Vector<Vector<MappingObject>> out=new Vector<Vector<MappingObject>>();  Vector<PCalLocation> unmatchedLeft=new Vector<PCalLocation>();  PCalLocation lastMatchedLeft=null;  PCalLocation lastAddedRight=null;  int i=0;  while (i < mappingVec.size()) {    Vector<MappingObject> inLine=mappingVec.elementAt(i);    Vector<MappingObject> outLine=new Vector<MappingObject>();    out.addElement(outLine);    int j=0;    while (j < inLine.size()) {      MappingObject inObj=inLine.elementAt(j);      if (inObj.getType() == MappingObject.LEFT_PAREN) {        unmatchedLeft.addElement(new PCalLocation(i,outLine.size()));      } else       if (inObj.getType() == MappingObject.RIGHT_PAREN) {        PCalLocation lastUnmatchedLeft=null;        if (unmatchedLeft.size() != 0) {          lastUnmatchedLeft=unmatchedLeft.elementAt(unmatchedLeft.size() - 1);        }        if (IsNextIn(lastAddedRight,new PCalLocation(i,j),mappingVec) && IsNextIn(lastUnmatchedLeft,lastMatchedLeft,out)) {          (out.elementAt(lastMatchedLeft.getLine())).remove(lastMatchedLeft.getColumn());          Vector<MappingObject> lastLine=outLine;          int lastLineNum=out.size() - 1;          while (lastLine.size() == 0) {            lastLineNum--;            lastLine=out.elementAt(lastLineNum);          }          lastLine.remove(lastLine.size() - 1);        }        lastMatchedLeft=unmatchedLeft.remove(unmatchedLeft.size() - 1);        lastAddedRight=new PCalLocation(i,j);      }      outLine.addElement(inObj);      j++;    }    i++;  }  return out;}  }
class C{  public static char[] copyFrom(char[] array,int newLength){  char[] copy=(char[])Array.newInstance(Character.TYPE,newLength);  System.arraycopy(array,0,copy,0,Math.min(array.length,newLength));  return copy;}  }
class C{  public boolean isConnected(){  return connected;}  }
class C{  public void update(){  m_last=m_current;  m_current=m_joy.getRawButton(m_buttonPort);}  }
class C{  public static void addMemoryLimitedTask(Runnable run){  MemUtil.addMemoryLimitedTask(run);}  }
class C{  private CSVParser(Path path,Charset encoding) throws IOException {  this(new String(Files.readAllBytes(path),encoding));}  }
class C{  private boolean advancePP(PhrasePositions pp) throws IOException {  if (!pp.nextPosition()) {    return false;  }  if (pp.position > end) {    end=pp.position;  }  return true;}  }
class C{  public PcGesSearchEditor(PcRunner runner){  super(runner,"Result forbid_latent_common_causes");}  }
class C{  private Object[] computeNonJavaResources(ArrayList entryNames){  int length=entryNames.size();  if (length == 0)   return JavaElementInfo.NO_NON_JAVA_RESOURCES;  HashMap jarEntries=new HashMap();  HashMap childrenMap=new HashMap();  ArrayList topJarEntries=new ArrayList();  for (int i=0; i < length; i++) {    String resName=(String)entryNames.get(i);    if (!org.eclipse.che.jdt.internal.core.util.Util.isJavaLikeFileName(resName)) {      IPath filePath=new Path(resName);      IPath childPath=filePath.removeFirstSegments(this.names.length);      if (jarEntries.containsKey(childPath)) {        continue;      }      JarEntryFile file=new JarEntryFile(filePath.lastSegment(),manager);      jarEntries.put(childPath,file);      if (childPath.segmentCount() == 1) {        file.setParent(this);        topJarEntries.add(file);      } else {        IPath parentPath=childPath.removeLastSegments(1);        while (parentPath.segmentCount() > 0) {          ArrayList parentChildren=(ArrayList)childrenMap.get(parentPath);          if (parentChildren == null) {            Object dir=new JarEntryDirectory(parentPath.lastSegment());            jarEntries.put(parentPath,dir);            childrenMap.put(parentPath,parentChildren=new ArrayList());            parentChildren.add(childPath);            if (parentPath.segmentCount() == 1) {              topJarEntries.add(dir);              break;            }            childPath=parentPath;            parentPath=childPath.removeLastSegments(1);          } else {            parentChildren.add(childPath);            break;          }        }      }    }  }  Iterator entries=childrenMap.entrySet().iterator();  while (entries.hasNext()) {    Map.Entry entry=(Map.Entry)entries.next();    IPath entryPath=(IPath)entry.getKey();    ArrayList entryValue=(ArrayList)entry.getValue();    JarEntryDirectory jarEntryDirectory=(JarEntryDirectory)jarEntries.get(entryPath);    int size=entryValue.size();    IJarEntryResource[] children=new IJarEntryResource[size];    for (int i=0; i < size; i++) {      JarEntryResource child=(JarEntryResource)jarEntries.get(entryValue.get(i));      child.setParent(jarEntryDirectory);      children[i]=child;    }    jarEntryDirectory.setChildren(children);    if (entryPath.segmentCount() == 1) {      jarEntryDirectory.setParent(this);    }  }  return topJarEntries.toArray(new Object[topJarEntries.size()]);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  public DomainObjectException(String message,ClassEnum classEnum,String businessKey){  super(message,new Object[]{businessKey});  setDomainObjectClassEnum(classEnum);}  }
class C{  @Override public void SyncComplete(String result){  Log.i(t,"disk sync task complete");  TextView tv=(TextView)findViewById(R.id.status_text);  tv.setText(result);}  }
class C{  private HARegionQueue createHARegionQueue(String name,HARegionQueueAttributes attrs) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,attrs,HARegionQueue.NON_BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  public Number viewToWorld(Axis axis,double value,boolean extrapolate){  checkAxisBounds(axis);  double min=axis.getMin().doubleValue();  double max=axis.getMax().doubleValue();  if (!extrapolate) {    if (value <= 0.0) {      return min;    }    if (value >= getShapeLength()) {      return max;    }  }  double minLog=(min > 0.0) ? Math.log10(min) : 0.0;  double maxLog=(max > 0.0) ? Math.log10(max) : 1.0;  return Math.pow(10.0,value * (maxLog - minLog) / getShapeLength() + minLog);}  }
class C{  protected XintroFragmentBuilder(){}  }
class C{  private CaseMapper(){}  }
class C{  public void rollback() throws IllegalStateException, SecurityException, SystemException {  if (!isActive) {    throw new SystemException(LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGER_INVALID.toLocalizedString());  }  LogWriterI18n writer=TransactionUtils.getLogWriterI18n();  Transaction transactionImpl=getTransaction();  if (transactionImpl == null) {    String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_ROLLBACK_NO_TRANSACTION_EXISTS.toLocalizedString();    if (VERBOSE)     writer.fine(exception);    throw new IllegalStateException(exception);  }  GlobalTransaction gtx=getGlobalTransaction(transactionImpl);  if (gtx == null) {    String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_ROLLBACK_NO_GLOBAL_TRANSACTION_EXISTS.toLocalizedString();    if (VERBOSE)     writer.fine(exception);    throw new SystemException(exception);  }  int status=gtx.getStatus();  if (!(status == Status.STATUS_ACTIVE || status == Status.STATUS_MARKED_ROLLBACK)) {    String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_ROLLBACK_TRANSACTION_STATUS_DOES_NOT_ALLOW_ROLLBACK_TRANSACTIONAL_STATUS_0.toLocalizedString(Integer.valueOf(status));    if (VERBOSE)     writer.fine(exception);    throw new IllegalStateException(exception);  }  status=-1;synchronized (gtx) {    if ((status=gtx.getStatus()) == Status.STATUS_ACTIVE || status == Status.STATUS_MARKED_ROLLBACK)     gtx.setStatus(Status.STATUS_ROLLING_BACK); else     if (gtx.getStatus() == Status.STATUS_ROLLING_BACK) {      String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_ROLLBACK_TRANSACTION_ALREADY_IN_A_ROLLING_BACK_STATE_TRANSACTIONAL_STATUS_0.toLocalizedString(Integer.valueOf(status));      if (VERBOSE)       writer.fine(exception);      throw new IllegalStateException(exception);    } else {      String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_ROLLBACK_TRANSACTION_STATUS_DOES_NOT_ALLOW_ROLLBACK.toLocalizedString();      if (VERBOSE)       writer.fine(exception);      throw new IllegalStateException(exception);    }  }  SystemException se=null;  try {    gtx.rollback();  } catch (  SystemException se1) {    se=se1;  }  try {    ((TransactionImpl)transactionImpl).notifyAfterCompletion(gtx.getStatus());  } catch (  Exception e1) {    if (writer.infoEnabled())     writer.info(LocalizedStrings.TransactionManagerImpl_EXCEPTION_IN_NOTIFY_AFTER_COMPLETION_DUE_TO__0,e1.getMessage(),e1);  }  Thread thread=Thread.currentThread();  transactionMap.remove(thread);  this.gtxSet.remove(gtx);  if (se != null) {    if (VERBOSE)     writer.fine(se);    throw se;  }  gtx.setStatus(Status.STATUS_NO_TRANSACTION);}  }
class C{  public InvalidSyntaxException(String msg,String filter){  super(msg);  this.filter=filter;}  }
class C{  public static <K,V>LinkedHashMap<K,V> linkedHashMap(){  return new LinkedHashMap<K,V>();}  }
class C{  public boolean isBOM(){  Object oo=get_Value(COLUMNNAME_IsBOM);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void updateActorPosition(final Actor actor,final Stage stage,final Vector2 newScreenSizeInStageCoords){  if (actor != null && stage != null) {    actor.setPosition((int)((actor.getX() + actor.getWidth() / 2f) / stage.getWidth() * newScreenSizeInStageCoords.x - actor.getWidth() / 2f),(int)((actor.getY() + actor.getHeight() / 2f) / stage.getHeight() * newScreenSizeInStageCoords.y - actor.getHeight() / 2f));  }}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  public int add(T dl,int row){  _list.add(row,dl);  fireTableRowsInserted(row,row);  return row;}  }
class C{  public List<Product> scrollCartOfUser(final User user,final int skip,final int top){  if (user == null)   return Collections.emptyList();  ProductCart cart=getCartOfUser(user);  if (cart == null)   return Collections.emptyList();  return setToLimitedList(cart.getProducts(),skip,top);}  }
class C{  public ImmutableMap<Service,Long> startupTimes(){  return state.startupTimes();}  }
class C{  public FloatSparseArrayDataRow(){  this(0);}  }
class C{  public InstructionPrinter(PrintStream stream){  this.stream=stream;}  }
class C{  public void irvineHash(final String s){  for (int i=0; i < s.length(); i++) {    irvineHash(s.charAt(i));  }}  }
class C{  public <K2,V2>JavaPairRDD<Tuple2<K,V>,V2> joinGeodeRegion(String regionPath,Function<Tuple2<K,V>,K2> func){  return joinGeodeRegion(regionPath,func,rddf.defaultConnectionConf());}  }
class C{  public void addChild(XMLElement2 child){  this.children.addElement(child);}  }
class C{  public final void del(int bagIndex,Instance instance) throws Exception {  int classIndex;  double weight;  classIndex=(int)instance.classValue();  weight=instance.weight();  m_perClassPerBag[bagIndex][classIndex]=m_perClassPerBag[bagIndex][classIndex] - weight;  m_perBag[bagIndex]=m_perBag[bagIndex] - weight;  m_perClass[classIndex]=m_perClass[classIndex] - weight;  totaL=totaL - weight;}  }
class C{  public final TextBuilder append(int i,int radix){  if (radix == 10)   return append(i);  if (radix < 2 || radix > 36)   throw new IllegalArgumentException("radix: " + radix);  if (i < 0) {    append('-');    if (i == Integer.MIN_VALUE) {      appendPositive(-(i / radix),radix);      return (TextBuilder)append(DIGIT_TO_CHAR[-(i % radix)]);    }    i=-i;  }  appendPositive(i,radix);  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatainsertdatanomodificationallowederrEE.class,args);}  }
class C{  @Post public String store(String fmJson){  IFirewallService firewall=(IFirewallService)getContext().getAttributes().get(IFirewallService.class.getCanonicalName());  FirewallRule rule=jsonToFirewallRule(fmJson);  if (rule == null) {    return "{\"status\" : \"Error! Could not parse firewall rule, see log for details.\"}";  }  String status=null;  if (checkRuleExists(rule,firewall.getRules())) {    status="Error! A similar firewall rule already exists.";    log.error(status);    return ("{\"status\" : \"" + status + "\"}");  } else {    firewall.addRule(rule);    status="Rule added";    return ("{\"status\" : \"" + status + "\", \"rule-id\" : \""+ Integer.toString(rule.ruleid)+ "\"}");  }}  }
class C{  public NicknameFeed retrieveNicknames(String username) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving nicknames for user '" + username + "'.");  URL feedUrl=new URL(domainUrlBase + "nickname/" + SERVICE_VERSION);  AppsForYourDomainQuery query=new AppsForYourDomainQuery(feedUrl);  query.setUsername(username);  return nicknameService.query(query,NicknameFeed.class);}  }
class C{  private void scanNumber(int pos,int radix){  this.radix=radix;  int digitRadix=(radix == 8 ? 10 : radix);  boolean seendigit=false;  if (reader.digit(pos,digitRadix) >= 0) {    seendigit=true;    scanDigits(pos,digitRadix);  }  if (radix == 16 && reader.ch == '.') {    scanHexFractionAndSuffix(pos,seendigit);  } else   if (seendigit && radix == 16 && (reader.ch == 'p' || reader.ch == 'P')) {    scanHexExponentAndSuffix(pos);  } else   if (digitRadix == 10 && reader.ch == '.') {    reader.putChar(true);    scanFractionAndSuffix(pos);  } else   if (digitRadix == 10 && (reader.ch == 'e' || reader.ch == 'E' || reader.ch == 'f' || reader.ch == 'F' || reader.ch == 'd' || reader.ch == 'D')) {    scanFractionAndSuffix(pos);  } else {    if (reader.ch == 'l' || reader.ch == 'L') {      reader.scanChar();      tk=TokenKind.LONGLITERAL;    } else {      tk=TokenKind.INTLITERAL;    }  }}  }
class C{  default <U>Zippable<Tuple2<T,U>> zip(final Iterable<? extends U> other){  return zip((Stream<? extends U>)ReactiveSeq.fromIterable(other));}  }
class C{  public void method(String name){  try {    Method method=getClass().getMethod(name,new Class[]{});    method.invoke(this,new Object[]{});  } catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.getTargetException().printStackTrace();  }catch (  NoSuchMethodException nsme) {    System.err.println("There is no public " + name + "() method "+ "in the class "+ getClass().getName());  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static byte[] decodeHex(String hexString){  if ((hexString.length() & 0x01) != 0) {    throw new IllegalArgumentException("Odd number of characters.");  }  char[] hexChars=hexString.toUpperCase(Locale.ROOT).toCharArray();  byte[] result=new byte[hexChars.length / 2];  for (int i=0; i < hexChars.length; i+=2) {    result[i / 2]=(byte)(Arrays.binarySearch(hexArray,hexChars[i]) * 16 + Arrays.binarySearch(hexArray,hexChars[i + 1]));  }  return result;}  }
class C{  public synchronized void moveMembers(final BaseType parentType,final List<TypeMember> members,final int delta) throws CouldntSaveDataException {  Preconditions.checkNotNull(parentType,"Error: parent type can not be null.");  Preconditions.checkNotNull(members,"Error: members can not be null.");  Preconditions.checkArgument(delta != 0,"Move delta can not be zero.");  final MemberMoveResult result=parentType.moveMembers(Sets.newTreeSet(members),delta);  final Set<BaseType> affectedTypes=typesContainer.getAffectedTypes(parentType);  backend.updateMemberOffsets(membersToIds(members),delta,membersToIds(result.getImplicitlyMoved()),result.getImplicitlyMovedDelta());  notifyMembersMoved(affectedTypes);}  }
class C{  public T flashVersion(String value){  setString(FLASH_VERSION,value);  return (T)this;}  }
class C{  private boolean shouldItemIconsBeShown(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  String key=getString(R.string.show_item_icons_preference_key);  boolean defaultValue=getResources().getBoolean(R.bool.show_item_icons_preference_default_value);  return sharedPreferences.getBoolean(key,defaultValue);}  }
class C{  @LargeTest public void testNavigationByCharacter() throws Exception {  sExecutedTestCount++;  String html="<html>" + "<head>" + "</head>"+ "<body>"+ "<p>"+ "a<b>b</b>c"+ "</p>"+ "<p>"+ "d"+ "<p/>"+ "e"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,META_STATE_ALT_LEFT_ON);  assertSelectionString("1");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,META_STATE_ALT_LEFT_ON);  assertSelectionString("0");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("a");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<b>b</b>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("c");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("d");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("e");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("e");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("d");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("c");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<b>b</b>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("a");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("a");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<b>b</b>");}  }
class C{  public static void traverse(TreeModel model,TreeNodeAction action){  traverse(model,model.getRoot(),action);}  }
class C{  public void put(CoapHandler handler,byte[] payload,int format){  asynchronous(format(newPut().setURI(uri).setPayload(payload),format),handler);}  }
class C{  public static SubqueryInExpression subqueryNotIn(Expression expression,EPStatementObjectModel model){  return new SubqueryInExpression(expression,model,true);}  }
class C{  public TextLineEncoder(Charset charset,LineDelimiter delimiter){  if (charset == null) {    throw new IllegalArgumentException("charset");  }  if (delimiter == null) {    throw new IllegalArgumentException("delimiter");  }  if (LineDelimiter.AUTO.equals(delimiter)) {    throw new IllegalArgumentException("AUTO delimiter is not allowed for encoder.");  }  this.charset=charset;  this.delimiter=delimiter;}  }
class C{  private static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new HashMap<String,String>();  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public JSONArray put(int index,Collection<?> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  public void remove(){  throw new UnsupportedOperationException("Can't remove keys from KeyStore");}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tThe seed for the random number generator used\n" + "\tin selecting random anchor.\n" + "(default: 1)","S",1,"-S <num>"));  newVector.addElement(new Option("\tUse randomly chosen initial anchors.","R",0,"-R"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  private boolean isOfType(String settingName,int type){  Setting obj=settings.get(settingName);  if (obj != null && obj.isOfType(type)) {    return true;  }  return false;}  }
class C{  public MoreLikeThisQueryBuilder boostTerms(float boostTerms){  this.boostTerms=boostTerms;  return this;}  }
class C{  private X509Certificate findMatchedCertificate(PrivateKeyEntry entry){  CertEntry keyIdMatch=null;  CertEntry aliasMatch=null;  for (  CertEntry ce : certEntries) {    if (Arrays.equals(entry.keyId,ce.keyId)) {      keyIdMatch=ce;      if (entry.alias.equalsIgnoreCase(ce.alias)) {        return ce.cert;      }    } else     if (entry.alias.equalsIgnoreCase(ce.alias)) {      aliasMatch=ce;    }  }  if (keyIdMatch != null)   return keyIdMatch.cert; else   if (aliasMatch != null)   return aliasMatch.cert; else   return null;}  }
class C{  private int calculateLimit(int feedId,boolean isCat){  int limit;switch (feedId) {case VCAT_STAR:case VCAT_PUB:    limit=JSONConnector.PARAM_LIMIT_MAX_VALUE;  break;case VCAT_FRESH:limit=DBHelper.getInstance().getUnreadCount(feedId,true);break;case VCAT_ALL:limit=DBHelper.getInstance().getUnreadCount(feedId,true);break;default :limit=DBHelper.getInstance().getUnreadCount(feedId,isCat);}if (feedId < -10 && limit <= 0) limit=50;return limit;}  }
class C{  public void bindDouble(int index,double value){}  }
class C{  protected boolean isFieldSeparatorAtStart(){  return fieldSeparatorAtStart;}  }
class C{  public boolean isAnyProject(){  Object oo=get_Value(COLUMNNAME_AnyProject);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static void appendModeInfo(Mode mode,BitArray bits){  bits.appendBits(mode.getBits(),4);}  }
class C{  public Quaternionf rotateLocalY(float angle){  return rotateLocalY(angle,this);}  }
class C{  public StringBand append(boolean b){  return append(b ? StringPool.TRUE : StringPool.FALSE);}  }
class C{  protected LocoNetMessage stopIBComPT(){  LocoNetMessage m=new LocoNetMessage(7);  m.setOpCode(LnConstants.OPC_PEER_XFER);  m.setElement(1,0x07);  m.setElement(2,0x01);  m.setElement(3,0x49);  m.setElement(4,0x42);  m.setElement(5,0x40);  return m;}  }
class C{  public long forceGetValueAsLong(long defaultValue){  long[] l=getValueAsLongs();  if (l != null && l.length >= 1) {    return l[0];  }  byte[] b=getValueAsBytes();  if (b != null && b.length >= 1) {    return b[0];  }  Rational[] r=getValueAsRationals();  if (r != null && r.length >= 1 && r[0].getDenominator() != 0) {    return (long)r[0].toDouble();  }  return defaultValue;}  }
class C{  private void manageHangUpEvent(String callId){  if (null != callId) {    Log.d(LOG_TAG,"manageHangUpEvent : hide call notification and stopRinging for call " + callId);    hideCallNotifications();  } else {    Log.d(LOG_TAG,"manageHangUpEvent : stopRinging");  }  VectorCallSoundManager.stopRinging();}  }
class C{  public static BufferedImage toBufferedImage(Resource res,String format) throws IOException {  return coder.toBufferedImage(res,format);}  }
class C{  public void dropTail(int n){  if (n > mLength) {    throw new IndexOutOfBoundsException("Trying to drop " + n + " items from array of length "+ mLength);  }  mLength-=n;}  }
class C{  public JCaret(final int blinkPeriod){  this(blinkPeriod,DEFAULT_CARET_COLOR);}  }
class C{  private void calculateEdgePoints(){  Edge edge=getEdge(0);  addPoint(start,edge.fromNode);  lastPointAdded.fromNode=edge.fromNode;  Funnel funnel=new Funnel();  funnel.pivot.set(start);  funnel.setPlanes(funnel.pivot,edge);  int leftIndex=0;  int rightIndex=0;  int lastRestart=0;  for (int i=1; i < numEdges(); ++i) {    edge=getEdge(i);    Plane.PlaneSide leftPlaneLeftDP=funnel.sideLeftPlane(edge.leftVertex);    Plane.PlaneSide leftPlaneRightDP=funnel.sideLeftPlane(edge.rightVertex);    Plane.PlaneSide rightPlaneLeftDP=funnel.sideRightPlane(edge.leftVertex);    Plane.PlaneSide rightPlaneRightDP=funnel.sideRightPlane(edge.rightVertex);    if (rightPlaneRightDP != Plane.PlaneSide.Front) {      if (leftPlaneRightDP != Plane.PlaneSide.Front) {        funnel.setRightPlane(funnel.pivot,edge.rightVertex);        rightIndex=i;      } else {        calculateEdgeCrossings(lastRestart,leftIndex,funnel.pivot,funnel.leftPortal);        funnel.pivot.set(funnel.leftPortal);        i=leftIndex;        rightIndex=i;        if (i < numEdges() - 1) {          lastRestart=i;          funnel.setPlanes(funnel.pivot,getEdge(i + 1));          continue;        }        break;      }    }    if (leftPlaneLeftDP != Plane.PlaneSide.Front) {      if (rightPlaneLeftDP != Plane.PlaneSide.Front) {        funnel.setLeftPlane(funnel.pivot,edge.leftVertex);        leftIndex=i;      } else {        calculateEdgeCrossings(lastRestart,rightIndex,funnel.pivot,funnel.rightPortal);        funnel.pivot.set(funnel.rightPortal);        i=rightIndex;        leftIndex=i;        if (i < numEdges() - 1) {          lastRestart=i;          funnel.setPlanes(funnel.pivot,getEdge(i + 1));          continue;        }        break;      }    }  }  calculateEdgeCrossings(lastRestart,numEdges() - 1,funnel.pivot,end);  for (int i=1; i < pathPoints.size; i++) {    EdgePoint p=pathPoints.get(i);    p.fromNode=pathPoints.get(i - 1).toNode;  }  return;}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public static Connection ensureTableExists(final Table table) throws SQLException {  establishConnection();  try (final Statement stmt=connection.createStatement()){    stmt.execute(table.getCreationStatement());    return connection;  } }  }
class C{  public RobustSingularValueDecomposition(DoubleMatrix2D Arg) throws ArithmeticException {  this(Arg,maxIterationsDefault);}  }
class C{  public void testSize(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(SIZE - i,q.size());    q.removeFirst();  }  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.size());    q.add(new Integer(i));  }}  }
class C{  @Override public boolean load(Element shared,Element perNode){  boolean result=true;  String hostName=shared.getAttribute("port").getValue();  String manufacturer=null;  try {    manufacturer=shared.getAttribute("manufacturer").getValue();  } catch (  NullPointerException ex) {  }  ConnectionConfig cc=new ConnectionConfig(hostName,manufacturer);  jmri.jmrix.loconet.locormi.LnMessageClient client=new jmri.jmrix.loconet.locormi.LnMessageClient();  cc.setLnMessageClient(client);  if (shared.getAttribute("disabled") != null) {    String yesno=shared.getAttribute("disabled").getValue();    if ((yesno != null) && (!yesno.equals(""))) {      if (yesno.equals("no")) {        cc.setDisabled(false);      } else       if (yesno.equals("yes")) {        cc.setDisabled(true);      }    }  }  if (client.getAdapterMemo() != null) {    if (shared.getAttribute("userName") != null) {      client.getAdapterMemo().setUserName(shared.getAttribute("userName").getValue());    }    if (shared.getAttribute("systemPrefix") != null) {      client.getAdapterMemo().setSystemPrefix(shared.getAttribute("systemPrefix").getValue());    }  }  if (!cc.getDisabled()) {    JFrame f=new JFrame("LocoNet server connection");    f.getContentPane().add(new JLabel("Connecting to " + hostName));    f.pack();    f.setVisible(true);    try {      client.configureRemoteConnection(hostName,500);      connected=true;    } catch (    jmri.jmrix.loconet.LocoNetException ex) {      log.error("Error opening connection to " + hostName + " was: "+ ex);      f.setTitle("Server connection failed");      f.getContentPane().removeAll();      f.getContentPane().add(new JLabel("failed, error was " + ex));      f.pack();      jmri.jmrix.ConnectionStatus.instance().setConnectionState(cc.getInfo(),jmri.jmrix.ConnectionStatus.CONNECTION_DOWN);      connected=false;      result=false;    }    if (connected) {      jmri.jmrix.ConnectionStatus.instance().setConnectionState(cc.getInfo(),jmri.jmrix.ConnectionStatus.CONNECTION_UP);      client.configureLocalServices();      f.setVisible(false);      f.dispose();    }  }  register(cc);  return result;}  }
class C{  public static Intent createLoginIntent(@NonNull String action,@NonNull String accountType,@Nullable String tokenType){  Intent intent=new Intent(action);  intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE,accountType);  intent.putExtra(AccountAuthenticator.KEY_TOKEN_TYPE,tokenType);  return intent;}  }
class C{  public AddPoiTutoManager(Activity activity,boolean forceDisplay){  super(activity);  this.forceDisplay=forceDisplay;}  }
class C{  private void removeOrgRole(OrganizationRoleType type){  List<OrganizationRoleType> orgRoles=getSelectedOrganization().getOrganizationRoles();  orgRoles.remove(type);}  }
class C{  public synchronized void deletePreset(String id){  if (id.equals(ID_DEFAULT))   throw new RuntimeException("Cannot delete default");  SQLiteDatabase db=getWritableDatabase();  db.delete("presets","id = ?",new String[]{id});  db.close();  removePresetDirectory(id);  if (id.equals(getCurrentAPI().preset))   Application.resetPresets();}  }
class C{  public DistributionPoint(DerValue val) throws IOException {  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding of DistributionPoint.");  }  while ((val.data != null) && (val.data.available() != 0)) {    DerValue opt=val.data.getDerValue();    if (opt.isContextSpecific(TAG_DIST_PT) && opt.isConstructed()) {      if ((fullName != null) || (relativeName != null)) {        throw new IOException("Duplicate DistributionPointName in " + "DistributionPoint.");      }      DerValue distPnt=opt.data.getDerValue();      if (distPnt.isContextSpecific(TAG_FULL_NAME) && distPnt.isConstructed()) {        distPnt.resetTag(DerValue.tag_Sequence);        fullName=new GeneralNames(distPnt);      } else       if (distPnt.isContextSpecific(TAG_REL_NAME) && distPnt.isConstructed()) {        distPnt.resetTag(DerValue.tag_Set);        relativeName=new RDN(distPnt);      } else {        throw new IOException("Invalid DistributionPointName in " + "DistributionPoint");      }    } else     if (opt.isContextSpecific(TAG_REASONS) && !opt.isConstructed()) {      if (reasonFlags != null) {        throw new IOException("Duplicate Reasons in " + "DistributionPoint.");      }      opt.resetTag(DerValue.tag_BitString);      reasonFlags=(opt.getUnalignedBitString()).toBooleanArray();    } else     if (opt.isContextSpecific(TAG_ISSUER) && opt.isConstructed()) {      if (crlIssuer != null) {        throw new IOException("Duplicate CRLIssuer in " + "DistributionPoint.");      }      opt.resetTag(DerValue.tag_Sequence);      crlIssuer=new GeneralNames(opt);    } else {      throw new IOException("Invalid encoding of " + "DistributionPoint.");    }  }  if ((crlIssuer == null) && (fullName == null) && (relativeName == null)) {    throw new IOException("One of fullName, relativeName, " + " and crlIssuer has to be set");  }}  }
class C{  public void exceptionThrown(SQLException e,String sql){  if (eventListener != null) {    try {      eventListener.exceptionThrown(e,sql);    } catch (    Exception e2) {    }  }}  }
class C{  public static PsiFile findLayoutResource(PsiElement element){  if (element == null) {    return null;  }  if (!(element instanceof PsiIdentifier)) {    return null;  }  PsiElement layout=element.getParent().getFirstChild();  if (layout == null) {    return null;  }  if (!"R.layout".equals(layout.getText())) {    return null;  }  Project project=element.getProject();  String name=String.format("%s.xml",element.getText());  return resolveLayoutResourceFile(element,project,name);}  }
class C{  public static CGAffineTransform makeRotation(double angle,double x,double y){  CGAffineTransform t=new CGAffineTransform();  t.setToRotation(angle,x,y);  return t;}  }
class C{  public void test_ConstructorILjava_util_Random(){  try {    new BigInteger(128,(Random)null);    fail();  } catch (  NullPointerException expected) {  }  bi=new BigInteger(70,rand);  bi2=new BigInteger(70,rand);  assertTrue("Random number is negative",bi.compareTo(BigInteger.ZERO) >= 0);  assertTrue("Random number is too big",bi.compareTo(two.pow(70)) < 0);  assertTrue("Two random numbers in a row are the same (might not be a bug but it very likely is)",!bi.equals(bi2));  assertTrue("Not zero",new BigInteger(0,rand).equals(BigInteger.ZERO));  try {    new BigInteger(-1,(Random)null);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public EditableOMDistance(){  super();}  }
class C{  public SitemapsRegularEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);  getCategories().add(CATEGORY);}  }
class C{  public NodeSetDTM(NodeIterator iterator,XPathContext xctxt){  super();  Node node;  m_manager=xctxt.getDTMManager();  while (null != (node=iterator.nextNode())) {    int handle=xctxt.getDTMHandleFromNode(node);    addNodeInDocOrder(handle,xctxt);  }}  }
class C{  public LocalDate roundHalfEvenCopy(){  return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));}  }
class C{  public String[] snapshots(){  return this.snapshots;}  }
class C{  public static boolean instanceofShortArray(Object o){  return getImplementation().instanceofShortArray(o);}  }
class C{  public void removeAll(@Nullable String spaceName,Collection<SwapKey> keys,IgniteBiInClosure<SwapKey,byte[]> c,@Nullable ClassLoader ldr) throws IgniteCheckedException {  assert keys != null;  try {    getSpi().removeAll(spaceName,keys,c,context(ldr));  } catch (  IgniteSpiException e) {    throw new IgniteCheckedException("Failed to remove from swap space [space=" + spaceName + ", "+ "keysCnt="+ keys.size()+ ']',e);  }}  }
class C{  private boolean isExported(URI id,List<URI> exportedVolumes){  return exportedVolumes.contains(id);}  }
class C{  public LauncherScroller(Context context,Interpolator interpolator){  this(context,interpolator,context.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB);}  }
class C{  protected Node newNode(){  return new SVGOMFEImageElement();}  }
class C{  public void deleteSecretsByName(String name){  checkArgument(!name.isEmpty());  secretSeriesDAOFactory.using(dslContext.configuration()).deleteSecretSeriesByName(name);}  }
class C{  protected void endTag(Element elem) throws IOException {  if (synthesizedElement(elem)) {    return;  }  closeOutUnwantedEmbeddedTags(elem.getAttributes());  if (inContent) {    if (!newlineOutputed && !inPre) {      writeLineSeparator();    }    newlineOutputed=false;    inContent=false;  }  if (!inPre) {    indentSmart();  }  if (matchNameAttribute(elem.getAttributes(),HTML.Tag.PRE)) {    inPre=false;  }  write('<');  write('/');  write(elem.getName());  write('>');  writeLineSeparator();}  }
class C{  @Override @GraphTransaction public void addTrait(String guid,ITypedStruct traitInstance) throws RepositoryException {  Preconditions.checkNotNull(traitInstance,"Trait instance cannot be null");  final String traitName=traitInstance.getTypeName();  LOG.debug("Adding a new trait={} for entity={}",traitName,guid);  try {    AtlasVertex instanceVertex=graphHelper.getVertexForGUID(guid);    final String typeName=GraphHelper.getTypeName(instanceVertex);    TypedInstanceToGraphMapper instanceToGraphMapper=new TypedInstanceToGraphMapper(graphToInstanceMapper,deleteHandler);    instanceToGraphMapper.mapTraitInstanceToVertex(traitInstance,typeSystem.getDataType(ClassType.class,typeName),instanceVertex);    GraphHelper.addProperty(instanceVertex,Constants.TRAIT_NAMES_PROPERTY_KEY,traitName);    GraphHelper.setProperty(instanceVertex,Constants.MODIFICATION_TIMESTAMP_PROPERTY_KEY,RequestContext.get().getRequestTime());  } catch (  RepositoryException e) {    throw e;  }catch (  Exception e) {    throw new RepositoryException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.913 -0500",hash_original_method="A86C65F03AA643F0D379154D6D12D2B7",hash_generated_method="1C1F5D545DAF534BA47E913D76165DCF") protected boolean includeAuthorityInRequestLine(){  return policy.usingProxy();}  }
class C{  public static double[][] computeMinMax(Relation<? extends NumberVector> relation){  int dim=RelationUtil.dimensionality(relation);  double[] mins=new double[dim], maxs=new double[dim];  for (int i=0; i < dim; i++) {    mins[i]=Double.MAX_VALUE;    maxs[i]=-Double.MAX_VALUE;  }  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    final NumberVector o=relation.get(iditer);    for (int d=0; d < dim; d++) {      final double v=o.doubleValue(d);      mins[d]=(v < mins[d]) ? v : mins[d];      maxs[d]=(v > maxs[d]) ? v : maxs[d];    }  }  return new double[][]{mins,maxs};}  }
class C{  public ECDHServerKeyExchange(SignatureAndHashAlgorithm signatureAndHashAlgorithm,ECDHECryptography ecdhe,PrivateKey serverPrivateKey,Random clientRandom,Random serverRandom,int namedCurveId,InetSocketAddress peerAddress) throws GeneralSecurityException {  this(signatureAndHashAlgorithm,namedCurveId,peerAddress);  publicKey=ecdhe.getPublicKey();  ECParameterSpec parameters=publicKey.getParams();  point=publicKey.getW();  pointEncoded=ECDHECryptography.encodePoint(point,parameters.getCurve());  Signature signature=Signature.getInstance(this.signatureAndHashAlgorithm.toString());  signature.initSign(serverPrivateKey);  updateSignature(signature,clientRandom,serverRandom);  signatureEncoded=signature.sign();}  }
class C{  void compile(File dir,String[] opts,File src) throws Exception {  dir.mkdirs();  List<String> opts2=new ArrayList<String>();  opts2.addAll(Arrays.asList("-d",dir.getPath()));  opts2.addAll(Arrays.asList(opts));  compile(opts2,Collections.singletonList(src));}  }
class C{  public void removeSiteAssignedVirtualArrayEntry(String internalSiteName,String virtualArray){  if (this.siteAssignedVirtualArrays == null) {    return;  }  if (this.siteAssignedVirtualArrays.get(internalSiteName) == null) {    return;  }  this.siteAssignedVirtualArrays.get(internalSiteName).remove(virtualArray);  if (this.siteAssignedVirtualArrays.get(internalSiteName).isEmpty()) {    this.siteAssignedVirtualArrays.remove(internalSiteName);  }}  }
class C{  public void releaseInputStream(){}  }
class C{  protected PrimitivePropertyTypeImpl(){  super();}  }
class C{  public String toString(){  return "StrictChronology[" + getBase().toString() + ']';}  }
class C{  public ContextOfPastMeasureCalculatorDiscrete(int base,int history){  this(base,history,false);}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  public final void pushCurrentNode(int n){  m_currentNodes.push(n);}  }
class C{  public static boolean equals(ExtensionData x,ExtensionData y){  if (x == null || y == null) {    return x == y;  } else {    return x.equals(y);  }}  }
class C{  protected void drawGridBackground(Canvas c){  if (mDrawGridBackground) {    c.drawRect(mViewPortHandler.getContentRect(),mGridBackgroundPaint);  }  if (mDrawBorders) {    c.drawRect(mViewPortHandler.getContentRect(),mBorderPaint);  }}  }
class C{  public MemoryPostingsFormat(boolean doPackFST,float acceptableOverheadRatio){  super("Memory");  this.doPackFST=doPackFST;  this.acceptableOverheadRatio=acceptableOverheadRatio;}  }
class C{  public boolean isCompatibleSampleModel(SampleModel sm){  if (!(sm instanceof ComponentSampleModel)) {    return false;  }  if (numComponents != sm.getNumBands()) {    return false;  }  if (sm.getTransferType() != transferType) {    return false;  }  return true;}  }
class C{  public boolean contains(T dataSet){  for (  T set : mDataSets) {    if (set.equals(dataSet))     return true;  }  return false;}  }
class C{  private void writeThumbnailMultipart(DataOutputStream outputStream) throws IOException {  long size=mFileIcon.getSize();  Uri fileIcon=mFileIcon.getUri();  if (sLogger.isActivated()) {    sLogger.debug("Write file icon " + fileIcon + " (size="+ size+ ")");  }  FileInputStream fileInputStream=null;  try {    fileInputStream=(FileInputStream)AndroidFactory.getApplicationContext().getContentResolver().openInputStream(fileIcon);    int bufferSize=(int)size;    byte[] fileIconData=new byte[bufferSize];    if (size != fileInputStream.read(fileIconData,0,bufferSize)) {      throw new IOException("Unable to read fileIcon from '" + fileIcon + "'!");    }    outputStream.writeBytes(TWO_HYPENS + BOUNDARY_TAG + LINE_END);    outputStream.writeBytes("Content-Disposition: form-data; name=\"Thumbnail\"; filename=\"thumb_" + mContent.getName() + "\""+ LINE_END);    outputStream.writeBytes("Content-Type: image/jpeg".concat(LINE_END));    outputStream.writeBytes("Content-Length: ".concat(Long.toString(size)));    outputStream.writeBytes(LINE_END.concat(LINE_END));    outputStream.write(fileIconData);    outputStream.writeBytes(LINE_END);  }  finally {    CloseableUtils.tryToClose(fileInputStream);  }}  }
class C{  public static HttpResponse httpGet(HttpRequest request){  if (request == null) {    return null;  }  BufferedReader input=null;  HttpURLConnection con=null;  try {    URL url=new URL(request.getUrl());    try {      HttpResponse response=new HttpResponse(request.getUrl());      con=(HttpURLConnection)url.openConnection();      setURLConnection(request,con);      input=new BufferedReader(new InputStreamReader(con.getInputStream()));      StringBuilder sb=new StringBuilder();      String s;      while ((s=input.readLine()) != null) {        sb.append(s).append("\n");      }      response.setResponseBody(sb.toString());      setHttpResponse(con,response);      return response;    } catch (    IOException e) {      e.printStackTrace();    }  } catch (  MalformedURLException e1) {    e1.printStackTrace();  } finally {    if (input != null) {      try {        input.close();      } catch (      IOException e) {        e.printStackTrace();      }    }    if (con != null) {      con.disconnect();    }  }  return null;}  }
class C{  public static Label createLabel(Composite parent,String text,int hspan){  Label l=new Label(parent,SWT.NONE);  l.setFont(parent.getFont());  l.setText(text);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  gd.grabExcessHorizontalSpace=false;  l.setLayoutData(gd);  return l;}  }
class C{  public void gatherPredictSets(GrammarNode gn,GrammarNode parent){  gatherFirstSets(gn,null);  gatherFollowSets(gn,null);  if (ruleToFollowSet.isEmpty()) {    ruleToPredictSet=(HashMap)ruleToFirstSet.clone();  } else {    ;  }}  }
class C{  public Anonymous_activity_2_ createAnonymous_activity_2_(){  Anonymous_activity_2_Impl anonymous_activity_2_=new Anonymous_activity_2_Impl();  return anonymous_activity_2_;}  }
class C{  public Dot(final Context context,final AttributeSet attrs,final int defStyleAttr){  super(context,attrs,defStyleAttr);  init(attrs,defStyleAttr,0);}  }
class C{  public static Knowledge2 serializableInstance(){  return new Knowledge2();}  }
class C{  private boolean isOperator(String c){  if ("+".equalsIgnoreCase(c))   return true;  if ("-".equalsIgnoreCase(c))   return true;  if ("*".equalsIgnoreCase(c))   return true;  if ("/".equalsIgnoreCase(c))   return true;  return false;}  }
class C{  public void reverse(){  reverse(0,_pos);}  }
class C{  public void nextBytes(byte[] bytes){  doNextBytes(bytes,0,bytes.length);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public GPUImageRGBDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  public boolean vmCreate(Vm vm){  if (getStorage() < vm.getSize()) {    Log.printConcatLine("[VmScheduler.vmCreate] Allocation of VM #",vm.getId()," to Host #",getId()," failed by storage");    return false;  }  if (!getRamProvisioner().allocateRamForVm(vm,vm.getCurrentRequestedRam())) {    Log.printConcatLine("[VmScheduler.vmCreate] Allocation of VM #",vm.getId()," to Host #",getId()," failed by RAM");    return false;  }  if (!getBwProvisioner().allocateBwForVm(vm,vm.getCurrentRequestedBw())) {    Log.printConcatLine("[VmScheduler.vmCreate] Allocation of VM #",vm.getId()," to Host #",getId()," failed by BW");    getRamProvisioner().deallocateRamForVm(vm);    return false;  }  if (!getVmScheduler().allocatePesForVm(vm,vm.getCurrentRequestedMips())) {    Log.printConcatLine("[VmScheduler.vmCreate] Allocation of VM #",vm.getId()," to Host #",getId()," failed by MIPS");    getRamProvisioner().deallocateRamForVm(vm);    getBwProvisioner().deallocateBwForVm(vm);    return false;  }  setStorage(getStorage() - vm.getSize());  getVmList().add(vm);  vm.setHost(this);  return true;}  }
class C{  private void sendSelfPatch(State s){  sendRequest(buildSelfPatchOperation(s));}  }
class C{  protected void addOffsetPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_StateVector_offset_feature"),getString("_UI_PropertyDescriptor_description","_UI_StateVector_offset_feature","_UI_StateVector_type"),SexecPackage.Literals.STATE_VECTOR__OFFSET,true,false,false,ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,null,null));}  }
class C{  public boolean endsWith(java.lang.CharSequence suffix){  return startsWith(suffix,length() - suffix.length());}  }
class C{  public static double noise(double x,double y,double z,double w){  double n0=0, n1=0, n2=0, n3=0, n4=0;  double s=(x + y + z+ w) * F4;  int i=fastfloor(x + s);  int j=fastfloor(y + s);  int k=fastfloor(z + s);  int l=fastfloor(w + s);  double t=(i + j + k+ l) * G4;  double x0=x - (i - t);  double y0=y - (j - t);  double z0=z - (k - t);  double w0=w - (l - t);  int c=0;  if (x0 > y0) {    c=0x20;  }  if (x0 > z0) {    c|=0x10;  }  if (y0 > z0) {    c|=0x08;  }  if (x0 > w0) {    c|=0x04;  }  if (y0 > w0) {    c|=0x02;  }  if (z0 > w0) {    c|=0x01;  }  int i1, j1, k1, l1;  int i2, j2, k2, l2;  int i3, j3, k3, l3;  int[] sc=simplex[c];  i1=sc[0] >= 3 ? 1 : 0;  j1=sc[1] >= 3 ? 1 : 0;  k1=sc[2] >= 3 ? 1 : 0;  l1=sc[3] >= 3 ? 1 : 0;  i2=sc[0] >= 2 ? 1 : 0;  j2=sc[1] >= 2 ? 1 : 0;  k2=sc[2] >= 2 ? 1 : 0;  l2=sc[3] >= 2 ? 1 : 0;  i3=sc[0] >= 1 ? 1 : 0;  j3=sc[1] >= 1 ? 1 : 0;  k3=sc[2] >= 1 ? 1 : 0;  l3=sc[3] >= 1 ? 1 : 0;  double x1=x0 - i1 + G4;  double y1=y0 - j1 + G4;  double z1=z0 - k1 + G4;  double w1=w0 - l1 + G4;  double x2=x0 - i2 + G42;  double y2=y0 - j2 + G42;  double z2=z0 - k2 + G42;  double w2=w0 - l2 + G42;  double x3=x0 - i3 + G43;  double y3=y0 - j3 + G43;  double z3=z0 - k3 + G43;  double w3=w0 - l3 + G43;  double x4=x0 + G44;  double y4=y0 + G44;  double z4=z0 + G44;  double w4=w0 + G44;  int ii=i & 0xff;  int jj=j & 0xff;  int kk=k & 0xff;  int ll=l & 0xff;  double t0=0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;  if (t0 > 0) {    t0*=t0;    int gi0=perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;    n0=t0 * t0 * dot(grad4[gi0],x0,y0,z0,w0);  }  double t1=0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;  if (t1 > 0) {    t1*=t1;    int gi1=perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;    n1=t1 * t1 * dot(grad4[gi1],x1,y1,z1,w1);  }  double t2=0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;  if (t2 > 0) {    t2*=t2;    int gi2=perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;    n2=t2 * t2 * dot(grad4[gi2],x2,y2,z2,w2);  }  double t3=0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;  if (t3 > 0) {    t3*=t3;    int gi3=perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;    n3=t3 * t3 * dot(grad4[gi3],x3,y3,z3,w3);  }  double t4=0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;  if (t4 > 0) {    t4*=t4;    int gi4=perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;    n4=t4 * t4 * dot(grad4[gi4],x4,y4,z4,w4);  }  return 27.0 * (n0 + n1 + n2+ n3+ n4);}  }
class C{  public static JClass findFirstClassBySimpleName(JCodeModel[] codeModels,String simpleClassName){  if (codeModels != null && codeModels.length > 0) {    for (    JCodeModel codeModel : codeModels) {      Iterator<JPackage> packages=codeModel.packages();      while (packages.hasNext()) {        JPackage jPackage=packages.next();        Iterator<JDefinedClass> classes=jPackage.classes();        while (classes.hasNext()) {          JDefinedClass aClass=classes.next();          if (aClass.name().equals(simpleClassName)) {            return aClass;          }        }      }    }    JType parseType;    try {      parseType=codeModels[0].parseType(simpleClassName);      if (parseType != null) {        if (parseType.isPrimitive()) {          return parseType.boxify();        } else         if (parseType instanceof JClass) {          return (JClass)parseType;        }      }    } catch (    ClassNotFoundException e) {      ;    }    JClass boxedPrimitive=codeModels[0].ref("java.lang." + simpleClassName);    if (boxedPrimitive != null) {      return boxedPrimitive;    }    throw new InvalidCodeModelException("No unique class found for simple class name " + simpleClassName);  }  throw new InvalidCodeModelException("No code models provided for " + simpleClassName);}  }
class C{  public CommunicationException(Throwable target,String msg){  super(msg);  initCause(target);}  }
class C{  static <T>GeneralRange<T> range(Comparator<? super T> comparator,@Nullable T lower,BoundType lowerType,@Nullable T upper,BoundType upperType){  return new GeneralRange<T>(comparator,true,lower,lowerType,true,upper,upperType);}  }
class C{  public void debug(){  System.out.println("------------ Debug model ------------");  for (int i=0; i < dataset.getRowCount(); i++) {    for (int j=0; j < dataset.getColumnCount(); j++) {      System.out.println("<" + i + ","+ j+ "> "+ dataset.getValue(i,j));    }  }  System.out.println("--------------------------------------");}  }
class C{  @Override protected void executeInternal(JobExecutionContext context) throws JobExecutionException {  try {    String name=ScheduleUtil.getTaskNameFormBean(context.getJobDetail().getKey().getName(),this.methodInvoker.getTargetMethod());    boolean isOwner=false;    try {      if (ConsoleManager.getScheduleManager().getZkManager().checkZookeeperState()) {        isOwner=ConsoleManager.getScheduleManager().getScheduleDataManager().isOwner(name,ConsoleManager.getScheduleManager().getScheduleServerUUid());        ConsoleManager.getScheduleManager().getIsOwnerMap().put(name,isOwner);      } else {        if (null != ConsoleManager.getScheduleManager().getIsOwnerMap()) {          isOwner=ConsoleManager.getScheduleManager().getIsOwnerMap().get(name);        }      }    } catch (    Exception e) {      LOGGER.error("Check task owner error.",e);    }    if (isOwner) {      ReflectionUtils.invokeMethod(setResultMethod,context,this.methodInvoker.invoke());      LOGGER.info("Cron job has been executed.");    }  } catch (  InvocationTargetException ex) {    if (ex.getTargetException() instanceof JobExecutionException) {      throw (JobExecutionException)ex.getTargetException();    } else {      throw new JobMethodInvocationFailedException(this.methodInvoker,ex.getTargetException());    }  }catch (  Exception ex) {    throw new JobMethodInvocationFailedException(this.methodInvoker,ex);  }}  }
class C{  private DomainConfigManager(int id){  super(PlotDimension.DOMAIN);  ungroupedMasterDimensionConfig=null;  groupedMasterDimensionConfig=null;  plotConfiguration=null;  crosshairLines.addAxisParallelLinesConfigurationListener(this);  this.id=id;}  }
class C{  public void flushLocal(){  if (tail.NE(Deque.TAIL_INITIAL_VALUE)) {    closeAndEnqueueTail(queue.getArity());    tail=Deque.TAIL_INITIAL_VALUE;    tailBufferEnd=Deque.TAIL_INITIAL_VALUE;  }}  }
class C{  public void color(int i,int j,Color color){  StyleConstants.setForeground(attrs,color);  getStyledDocument().setCharacterAttributes(i,j - i,attrs,true);}  }
class C{  public int hashCode(){  return 17 + 65537 * super.hashCode() + 37 * _host.hashCode() + _port;}  }
class C{  public Column goal(Goal goal){  this.goal=goal;  return this;}  }
class C{  public FileList keep(String pattern){  return filter(true,pattern);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public INaviOperandTreeNode determineDropNode(){  final Object dropTarget=ZyGraphDragAndDropSupport.getDragOverState(graph,support.getDropLocation().getDropPoint()).getDragOverObject().getObject();  return (dropTarget instanceof INaviOperandTreeNode) ? (INaviOperandTreeNode)dropTarget : null;}  }
class C{  public final int peek(){  try {    return m_map[m_firstFree - 1];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public void addCertifiedSignerRole(final String certifiedSignerRole){  throw new DSSException("eu.europa.esig.dss.BLevelParameters.addCertifiedSignerRole");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean equals(Object otherObj){  return equals(otherObj,true);}  }
class C{  public static double jaccardIndex(final boolean[] s1,final boolean[] s2){  if (s1.length != s2.length) {    throw new InvalidParameterException("sets must be same size!");  }  return jaccardIndex(convert2Set(s1),convert2Set(s2));}  }
class C{  public Network cloneGraph(){  return copyTo(new Network(directed));}  }
class C{  public PrivateKeyPbeNotSupportedException(String unsupportedPbe){  super();  this.unsupportedPbe=unsupportedPbe;}  }
class C{  public void optimize(Environment env){  do {    optimize(env,first);  } while (eliminate() && env.opt());}  }
class C{  public LoadContext<?> copy(){  LoadContext<?> ctx;  try {    ctx=getClass().newInstance();  } catch (  InstantiationException|IllegalAccessException e) {    throw new RuntimeException("Error copying LoadContext",e);  }  ctx.metaClass=metaClass;  ctx.setQuery(query.copy());  ctx.view=view;  ctx.id=id;  ctx.softDeletion=softDeletion;  ctx.prevQueries.addAll(prevQueries.stream().map(null).collect(Collectors.toList()));  ctx.queryKey=queryKey;  if (dbHints != null) {    ctx.getDbHints().putAll(dbHints);  }  ctx.loadDynamicAttributes=loadDynamicAttributes;  return ctx;}  }
class C{  public static void initializeDispatchStructures(RVMClass klass){  if (klass.isAbstract())   return;  RVMClass[] interfaces=klass.getAllImplementedInterfaces();  if (interfaces.length != 0) {    if (VM.BuildForIMTInterfaceInvocation) {      IMTDict d=buildIMTDict(klass,interfaces);      populateIMT(klass,d);    }  }}  }
class C{  public CharSequence loadAuthor(PackageManager pm) throws NotFoundException {  if (mAuthorResource <= 0)   throw new NotFoundException();  String packageName=mService.resolvePackageName;  ApplicationInfo applicationInfo=null;  if (packageName == null) {    packageName=mService.serviceInfo.packageName;    applicationInfo=mService.serviceInfo.applicationInfo;  }  return pm.getText(packageName,mAuthorResource,applicationInfo);}  }
class C{  public static Drawable makeDefaultScrimDrawable(Context context){  return ScrimUtils.makeCubicGradientScrimDrawable(context.getResources().getColor(R.color.black_overlay),4,Gravity.TOP);}  }
class C{  public static boolean isXML11Space(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_SPACE) != 0);}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  public static void serializeInt(int val,byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  buffer[0 + offsetInt]=(byte)((val >> 24) & 0xFF);  buffer[1 + offsetInt]=(byte)((val >> 16) & 0xFF);  buffer[2 + offsetInt]=(byte)((val >> 8) & 0xFF);  buffer[3 + offsetInt]=(byte)(val & 0xFF);  offset.add(Type.INTEGER.getByteSize());}  }
class C{  @HLEFunction(nid=0x53B00E9A,version=150) public int sceKernelSetVTimerHandlerWide(@CheckArgument("checkVTimerID") int vtimerUid,long schedule,TPointer handlerAddress,int handlerArgument){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  sceKernelVTimerInfo.handlerAddress=handlerAddress.getAddress();  sceKernelVTimerInfo.handlerArgument=handlerArgument;  scheduleVTimer(sceKernelVTimerInfo,schedule);  return 0;}  }
class C{  protected void sendFunctionGroup3(){  setSpeedSetting(this.speedSetting);  if (sendA2command) {    int locoAddr=address.getNumber();    if (address.isLongAddress()) {      locoAddr+=0xC000;    }    int data=0x00 | (f12 ? 0x08 : 0) | (f11 ? 0x04 : 0)| (f10 ? 0x02 : 0)| (f9 ? 0x01 : 0);    byte[] bl=NceBinaryCommand.nceLocoCmd(locoAddr,NceBinaryCommand.LOCO_CMD_FG3,(byte)data);    NceMessage m=NceMessage.createBinaryMessage(tc,bl);    tc.sendNceMessage(m,null);  } else {    byte[] result=jmri.NmraPacket.function9Through12Packet(address.getNumber(),address.isLongAddress(),getF9(),getF10(),getF11(),getF12());    NceMessage m=NceMessage.sendPacketMessage(tc,result);    tc.sendNceMessage(m,null);  }}  }
class C{  static WhiteListSkeleton makeSkeleton(List<WhiteListSkeleton> loaded,Set<String> allowed,Set<String> denied,List<JSONObject> definitions){  WhiteListSkeleton w=new WhiteListSkeleton();  w.denied.addAll(denied);  for (  WhiteListSkeleton lw : loaded) {    w.allowed.addAll(lw.allowed);    for (    Map.Entry<String,List<JSONObject>> e : lw.definitions.entrySet()) {      multimapAdd(w.definitions,e.getKey(),e.getValue());    }  }  for (  WhiteListSkeleton lw : loaded) {    w.allowed.removeAll(lw.denied);  }  w.allowed.addAll(allowed);  w.allowed.removeAll(denied);  for (  JSONObject type : definitions) {    w.definitions.remove(type.get("key"));  }  for (  JSONObject type : definitions) {    multimapAdd(w.definitions,(String)type.get("key"),Collections.singletonList(type));  }  for (  List<JSONObject> defs : w.definitions.values()) {    if (defs.size() == 1) {      continue;    }    JSONObject definition=defs.get(0);    List<JSONObject> rest=defs.subList(1,defs.size());    for (Iterator<JSONObject> otherIt=rest.iterator(); otherIt.hasNext(); ) {      JSONObject other=otherIt.next();      if (other.equals(definition)) {        otherIt.remove();      }    }  }  return w;}  }
class C{  public String trimSpecialChars(String text){  TextStream stream=new TextStream(text);  StringWriter writer=new StringWriter();  while (!stream.atEnd()) {    char next=stream.next();    if (next == (char)3) {      stream.skip(2);    } else {      writer.append(next);    }  }  return writer.toString();}  }
class C{  public void tick(){  tick(1);}  }
class C{  public static void indicateEarlyReturn(StatementContext statementContext,UniformPair<EventBean[]> newOldEvents){  if (newOldEvents == null) {    return;  }  if ((statementContext.getMetricReportingService() != null) && (statementContext.getMetricReportingService().getStatementOutputHooks() != null) && (!statementContext.getMetricReportingService().getStatementOutputHooks().isEmpty())) {    for (    StatementResultListener listener : statementContext.getMetricReportingService().getStatementOutputHooks()) {      listener.update(newOldEvents.getFirst(),newOldEvents.getSecond(),statementContext.getStatementName(),null,null);    }  }}  }
class C{  private void findNT(){  try {    Process p;    p=Runtime.getRuntime().exec("ipconfig /all");    findWin(p.getInputStream());    p.destroy();  } catch (  Exception e) {    return;  }}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(CalendarSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/?api=calendar " + "into calendar-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,Collections.singleton(CalendarScopes.CALENDAR)).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  private void dumpService(String prefix,FileDescriptor fd,PrintWriter pw,final ServiceRecord r,String[] args,boolean dumpAll){  String innerPrefix=prefix + "  ";synchronized (this) {    pw.print(prefix);    pw.print("SERVICE ");    pw.print(r.shortName);    pw.print(" ");    pw.print(Integer.toHexString(System.identityHashCode(r)));    pw.print(" pid=");    if (r.app != null)     pw.println(r.app.pid); else     pw.println("(not running)");    if (dumpAll) {      r.dump(pw,innerPrefix);    }  }  if (r.app != null && r.app.thread != null) {    pw.print(prefix);    pw.println("  Client:");    pw.flush();    try {      TransferPipe tp=new TransferPipe();      try {        r.app.thread.dumpService(tp.getWriteFd().getFileDescriptor(),r,args);        tp.setBufferPrefix(prefix + "    ");        tp.go(fd);      }  finally {        tp.kill();      }    } catch (    IOException e) {      pw.println(prefix + "    Failure while dumping the service: " + e);    }catch (    RemoteException e) {      pw.println(prefix + "    Got a RemoteException while dumping the service");    }  }}  }
class C{  final private void computeNextState(IntGrid2D d,IntGrid2D s,int x,int y){  int cell=s.get(x,y);  if (cell == 0) {    int cNW=s.get(s.stx(x - 1),s.sty(y - 1));    int cN=s.get(s.stx(x),s.sty(y - 1));    int cNE=s.get(s.stx(x + 1),s.sty(y - 1));    int cW=s.get(s.stx(x - 1),s.sty(y));    int cE=s.get(s.stx(x + 1),s.sty(y));    int cSW=s.get(s.stx(x - 1),s.sty(y + 1));    int cS=s.get(s.stx(x),s.sty(y + 1));    int cSE=s.get(s.stx(x + 1),s.sty(y + 1));    int aN=p.replication[cN] + p.rSupport[cN][cNE] + p.rSupport[cN][cNW]+ p.rSupport[cN][cE]+ p.rSupport[cN][cW];    int aS=p.replication[cS] + p.rSupport[cS][cSE] + p.rSupport[cS][cSW]+ p.rSupport[cS][cE]+ p.rSupport[cS][cW];    int aE=p.replication[cE] + p.rSupport[cE][cNE] + p.rSupport[cE][cSE]+ p.rSupport[cE][cN]+ p.rSupport[cE][cS];    int aW=p.replication[cW] + p.rSupport[cW][cNW] + p.rSupport[cW][cSW]+ p.rSupport[cW][cN]+ p.rSupport[cW][cS];    int a=p.aEmpty + aN + aS+ aE+ aW;    float pEmpty=(float)p.aEmpty / (float)a;    float pN=(float)aN / (float)a;    float pS=(float)aS / (float)a;    float pE=(float)aE / (float)a;    float pW=(float)aW / (float)a;    pS+=pN;    pE+=pS;    pW+=pE;    pEmpty+=pW;    float r=p.r.nextFloat();    if (r < pN)     cell=cN; else     if (r < pS)     cell=cS; else     if (r < pE)     cell=cE; else     if (r < pW)     cell=cW;  } else {    if (p.r.nextFloat() < p.decays[cell])     cell=0;  }  d.set(x,y,cell);}  }
class C{  public UnicodePropertiesSkeleton(String skeletonFilename) throws Exception {  read(skeletonFilename);}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  public Object decode(Object value) throws DecoderException {  if (value == null) {    return null;  } else   if (value instanceof String) {    return decode((String)value);  } else {    throw new DecoderException("Objects of type " + value.getClass().getName() + " cannot be decoded using BCodec");  }}  }
class C{  public void onHealthAppConfigurationStatusChange(BluetoothHealthAppConfiguration config,int status){  Log.d(TAG,"onHealthAppConfigurationStatusChange: " + config + "Status: "+ status);}  }
class C{  public Viewport(int x,int y,int width,int height){  this.x=x;  this.y=y;  this.width=width;  this.height=height;}  }
class C{  private void degradateCorpse(){  stage++;  put("stage",stage);  modify();}  }
class C{  private void dagDFS(Lop root,boolean[] marked){  if (!IDMap.containsKey(root.getID()))   return;  int mapID=IDMap.get(root.getID());  if (marked[mapID])   return;  marked[mapID]=true;  for (  Lop lop : root.getOutputs()) {    dagDFS(lop,marked);  }}  }
class C{  public PolicyConstraintsExtension(Boolean critical,int require,int inhibit) throws IOException {  this.require=require;  this.inhibit=inhibit;  this.extensionId=PKIXExtensions.PolicyConstraints_Id;  this.critical=critical.booleanValue();  encodeThis();}  }
class C{  private String columnsWithSeparator(Database conn,ArrayList<Column> columns,String separator){  if (columns != null && columns.size() > 0) {    StringBuffer sb=new StringBuffer();    sb.append(conn.getDatabaseObjectName(columns.get(0).getName()));    for (int i=1; i < columns.size(); i++) {      sb.append(separator);      sb.append(conn.getDatabaseObjectName(columns.get(i).getName()));    }    return sb.toString();  } else {    return null;  }}  }
class C{  public final void renameAttribute(int att,String name){  Attribute newAtt=attribute(att).copy(name);  FastVector newVec=new FastVector(numAttributes());  for (int i=0; i < numAttributes(); i++) {    if (i == att) {      newVec.addElement(newAtt);    } else {      newVec.addElement(attribute(i));    }  }  m_Attributes=newVec;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.182 -0500",hash_original_method="4C12D3BC3A1875DEC95F9E2E6B90AD5C",hash_generated_method="E4ED9CBDDFFECC7DA411A3A817D8F161") public ConnectException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public final void rotX(float angle){  float sinAngle, cosAngle;  sinAngle=(float)Math.sin(angle);  cosAngle=(float)Math.cos(angle);  this.m00=(float)1.0;  this.m01=(float)0.0;  this.m02=(float)0.0;  this.m03=(float)0.0;  this.m10=(float)0.0;  this.m11=cosAngle;  this.m12=-sinAngle;  this.m13=(float)0.0;  this.m20=(float)0.0;  this.m21=sinAngle;  this.m22=cosAngle;  this.m23=(float)0.0;  this.m30=(float)0.0;  this.m31=(float)0.0;  this.m32=(float)0.0;  this.m33=(float)1.0;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void legacyLoadDictionary(){  try {    IterableFile file=new IterableFile("src/main/java/CaptainMarkov/generators/resources/dictionary.txt");    for (    String s : file) {      dictionary.add(s);    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  protected void fadeCrosshairs(){  if (this.crosshairsActive) {    this.crosshairsActive=false;    if (!this.animatorSet.isStarted()) {      this.animatorSet.start();    }  }}  }
class C{  public <T>SmashRequest<T> add(SmashRequest<T> request,Looper looper){  request.setSmashQueue(this);  request.setDeliverResponseOn(looper);synchronized (mCurrentRequests) {    mCurrentRequests.add(request);  }  mQueue.add(request);  return request;}  }
class C{  @Override public String toString(){  StringBuilder providerContent;  if (mLabel == null) {    providerContent=new StringBuilder();  } else {    providerContent=new StringBuilder(mLabel);  }  return providerContent.append(",").append(mLatitude).append(",").append(mLongitude).append(",").append(mExpiration).append(",").append(mAccuracy).toString();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:40.768 -0500",hash_original_method="E5E4BC7A2B363BE6E2FBD0B5C26F4050",hash_generated_method="78375C615A16504B3FCA36BE4D985473") private void initProgressBar(){  mMax=100;  mProgress=0;  mSecondaryProgress=0;  mIndeterminate=false;  mOnlyIndeterminate=false;  mDuration=4000;  mBehavior=AlphaAnimation.RESTART;  mMinWidth=24;  mMaxWidth=48;  mMinHeight=24;  mMaxHeight=48;}  }
class C{  public void selectTab(String groupKey){  if (groupKeysToTabIndexMap.containsKey(groupKey)) {    setSelectedIndex(groupKeysToTabIndexMap.get(groupKey));  }}  }
class C{  public Vertex parseStateMachine(File file,String encoding,boolean debug,Network network){  try {    return parseStateMachine(new FileInputStream(file),debug,network,encoding,MAX_FILE_SIZE);  } catch (  IOException exception) {    throw new SelfParseException("Parsing error occurred",exception);  }}  }
class C{  public CharIterator(char[] primitiveArray){  super(primitiveArray);}  }
class C{  private void updateMaxKeyInfo(String tabColumnName,int maxKey){  checkAndUpdateMap(maxKey,tabColumnName);}  }
class C{  Map<T,Double> calcWeights(final HasPlansAndId<T,?> person){  double maxScore=Double.NEGATIVE_INFINITY;  for (  T plan1 : person.getPlans()) {    if ((plan1.getScore() != null) && plan1.getScore().isNaN()) {      Logger.getLogger(this.getClass()).error("encountering getScore().isNaN().  This class is not well behaved in this situation.  Continuing anyway ...");    }    if ((plan1.getScore() != null) && (plan1.getScore() > maxScore)) {      maxScore=plan1.getScore();    }  }  Map<T,Double> weights=new LinkedHashMap<T,Double>(person.getPlans().size());  for (  T plan : person.getPlans()) {    weights.put(plan,this.calcPlanWeight(plan,maxScore));  }  return weights;}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Object value=entry.getValue();        if (value instanceof String && !((String)value).startsWith("http")) {          File file=new File((String)value);          if (!file.exists() || file.isDirectory()) {            return false;          }          spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } else {          spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }      }    }  }  return hasChanges;}  }
class C{  @SuppressWarnings("deprecation") private void initCropGridStyle(@NonNull TypedArray a){  int cropGridStrokeSize=a.getDimensionPixelSize(R.styleable.ucrop_UCropView_ucrop_grid_stroke_size,getResources().getDimensionPixelSize(R.dimen.ucrop_default_crop_grid_stoke_width));  int cropGridColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_grid_color,getResources().getColor(R.color.ucrop_color_default_crop_grid));  mCropGridPaint.setStrokeWidth(cropGridStrokeSize);  mCropGridPaint.setColor(cropGridColor);  mCropGridRowCount=a.getInt(R.styleable.ucrop_UCropView_ucrop_grid_row_count,DEFAULT_CROP_GRID_ROW_COUNT);  mCropGridColumnCount=a.getInt(R.styleable.ucrop_UCropView_ucrop_grid_column_count,DEFAULT_CROP_GRID_COLUMN_COUNT);}  }
class C{  public static void putBoolean(Context context,String key,boolean value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putBoolean(key,value);  editor.commit();}  }
class C{  public static String serializeJobResult(TaskEstimate estimate,HiveObjectSpec spec){  return ReplicationUtils.genValue(estimate.getTaskType().name(),String.valueOf(estimate.isUpdateMetadata()),String.valueOf(estimate.isUpdateData()),!estimate.getSrcPath().isPresent() ? null : estimate.getSrcPath().get().toString(),!estimate.getDestPath().isPresent() ? null : estimate.getDestPath().get().toString(),spec.getDbName(),spec.getTableName(),spec.getPartitionName());}  }
class C{  @Benchmark public void intern(){  run();}  }
class C{  public static void downgrade(String message,Throwable failure){  LOG.warn("Downgrading test " + message,failure);  AssumptionViolatedException ave=new AssumptionViolatedException(failure,null);  throw ave;}  }
class C{  public ActionLocation locate(int offset){  return m_container.locationLessOrEqualTo(offset);}  }
class C{  public static double[][] submatrix(double[][] m,int rem){  int[] indices=new int[m.length];  int j=-1;  for (int i=0; i < m.length; i++) {    j++;    if (j == rem) {      j++;    }    indices[i]=j;  }  return new TetradMatrix(m).getSelection(indices,indices).toArray();}  }
class C{  public tr addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static final Vector2 show(Window owner){  ApplyForceDialog afd=new ApplyForceDialog(owner);  afd.setLocationRelativeTo(owner);  afd.setVisible(true);  if (!afd.canceled) {    return afd.forcePanel.getForce();  }  return null;}  }
class C{  private static float CallNonvirtualFloatMethod(JNIEnvironment env,int objJREF,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualFloatMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Float,true);    return Reflection.unwrapFloat(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  protected Action createAudioAction(Object key){  if (key != null) {    String audioKey=(String)key;    String audioValue=(String)UIManager.get(key);    return new AudioAction(audioKey,audioValue);  } else {    return null;  }}  }
class C{  public static PublicRegexp parse(String regex,int flags) throws PatternSyntaxException {  return PublicRegexp.deepCopy(Parser.parse(regex,flags));}  }
class C{  public QueryStringQueryBuilder fuzzyPrefixLength(int fuzzyPrefixLength){  this.fuzzyPrefixLength=fuzzyPrefixLength;  return this;}  }
class C{  public void addRecord(String messageId,int i,double d){  if (m_msgData == null) {    m_msgData=new TreeMap<String,LogNormalScore.MsgData>();    m_minLambda=1;  }  final MsgData data=new MsgData();  data.m_totalLogCounts=i;  data.m_lambda=d;  m_msgData.put(messageId,data);  m_minLambda=Math.min(data.m_lambda,m_minLambda);  m_totalIntervalCount=1;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public void clear(){  list.clear();}  }
class C{  public int bucketCount(){  return _symbols.length;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  int length=mCharts.length;  mMenuText=new String[length + 3];  mMenuSummary=new String[length + 3];  mMenuText[0]="Embedded line chart demo";  mMenuSummary[0]="A demo on how to include a clickable line chart into a graphical activity";  mMenuText[1]="Embedded pie chart demo";  mMenuSummary[1]="A demo on how to include a clickable pie chart into a graphical activity";  for (int i=0; i < length; i++) {    mMenuText[i + 2]=mCharts[i].getName();    mMenuSummary[i + 2]=mCharts[i].getDesc();  }  mMenuText[length + 2]="Random values charts";  mMenuSummary[length + 2]="Chart demos using randomly generated values";  setListAdapter(new SimpleAdapter(this,getListValues(),android.R.layout.simple_list_item_2,new String[]{IDemoChart.NAME,IDemoChart.DESC},new int[]{android.R.id.text1,android.R.id.text2}));}  }
class C{  public static void handleSubscriptionNotifications(StatefulService service,Operation update,String notificationTaskLink,TaskState opTaskState,int expectedNotificationCount,Object returnState,Set<String> finishedTaskLinks,boolean deleteTask){  int finishedTaskCount;  update.complete();  if ((update.getAction() != Action.PATCH && update.getAction() != Action.PUT)) {    return;  }  if (TaskState.isCancelled(opTaskState) || TaskState.isFailed(opTaskState)) {    sendFailureSelfPatch(service,new IllegalStateException("Operation failed:" + Utils.toJsonHtml(update)));    if (deleteTask) {      service.sendRequest(Operation.createDelete(service,notificationTaskLink).setBody(new ServiceDocument()));    }    return;  }  if (!TaskState.isFinished(opTaskState)) {    return;  }synchronized (finishedTaskLinks) {    if (!finishedTaskLinks.add(notificationTaskLink)) {      return;    }    finishedTaskCount=finishedTaskLinks.size();  }  Operation deleteOp=Operation.createDelete(service,notificationTaskLink).setReferer(service.getUri()).setCompletion(null);  service.getHost().stopSubscriptionService(deleteOp,UriUtils.buildPublicUri(service.getHost(),update.getUri().getPath()));  if (deleteTask) {    service.sendRequest(Operation.createDelete(service,notificationTaskLink).setBody(new ServiceDocument()));  }  if (finishedTaskCount == expectedNotificationCount) {    sendPatch(service,returnState);  }}  }
class C{  public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer M_Product_ID=(Integer)value;  Integer M_AttributeSetInstance_ID=0;  if (M_Product_ID == null || M_Product_ID.intValue() == 0)   return "";  mTab.setValue("C_Charge_ID",null);  MProduct m_product=MProduct.get(Env.getCtx(),M_Product_ID);  mTab.setValue("M_AttributeSetInstance_ID",m_product.getEnvAttributeSetInstance(ctx,WindowNo));  boolean IsSOTrx=Env.getContext(ctx,WindowNo,"IsSOTrx").equals("Y");  int C_BPartner_ID=Env.getContextAsInt(ctx,WindowNo,WindowNo,"C_BPartner_ID");  BigDecimal Qty=(BigDecimal)mTab.getValue("QtyInvoiced");  MProductPricing pp=new MProductPricing(M_Product_ID.intValue(),C_BPartner_ID,Qty,IsSOTrx);  int M_PriceList_ID=Env.getContextAsInt(ctx,WindowNo,"M_PriceList_ID");  pp.setM_PriceList_ID(M_PriceList_ID);  Timestamp invoiceDate=Env.getContextAsDate(ctx,WindowNo,"DateInvoiced");  int M_PriceList_Version_ID=Env.getContextAsInt(ctx,WindowNo,"M_PriceList_Version_ID");  if (M_PriceList_Version_ID == 0 && M_PriceList_ID > 0) {    String sql="SELECT plv.M_PriceList_Version_ID " + "FROM M_PriceList_Version plv " + "WHERE plv.M_PriceList_ID=? "+ " AND plv.ValidFrom <= ? "+ "ORDER BY plv.ValidFrom DESC";    M_PriceList_Version_ID=DB.getSQLValueEx(null,sql,M_PriceList_ID,invoiceDate);    if (M_PriceList_Version_ID > 0)     Env.setContext(ctx,WindowNo,"M_PriceList_Version_ID",M_PriceList_Version_ID);  }  pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);  Timestamp date=Env.getContextAsDate(ctx,WindowNo,"DateInvoiced");  pp.setPriceDate(date);  mTab.setValue("PriceList",pp.getPriceList());  mTab.setValue("PriceLimit",pp.getPriceLimit());  mTab.setValue("PriceActual",pp.getPriceStd());  mTab.setValue("PriceEntered",pp.getPriceStd());  mTab.setValue("C_Currency_ID",new Integer(pp.getC_Currency_ID()));  mTab.setValue("C_UOM_ID",new Integer(pp.getC_UOM_ID()));  Env.setContext(ctx,WindowNo,"EnforcePriceLimit",pp.isEnforcePriceLimit() ? "Y" : "N");  Env.setContext(ctx,WindowNo,"DiscountSchema",pp.isDiscountSchema() ? "Y" : "N");  return tax(ctx,WindowNo,mTab,mField,value);}  }
class C{  static public PVector div(PVector v,float n){  return div(v,n,null);}  }
class C{  @Override public Class<? extends Task> taskClass(){  return MongodbSinkTask.class;}  }
class C{  public static void main(String[] args){  TestPackageDeprecation tester=new TestPackageDeprecation();  run(tester,ARGS1,TEST1,NEGATED_TEST1);  run(tester,ARGS2,TEST2,NEGATED_TEST2);  if ((new java.io.File(BUG_ID + "-2" + FS+ "pkg1"+ FS+ "package-summary.html")).exists()) {    throw new Error("Test Fails: packages summary should not be" + "generated for deprecated package.");  } else {    System.out.println("Test passes:  package-summary.html not found.");  }  if ((new java.io.File(BUG_ID + "-2" + FS+ "FooDepr.html")).exists()) {    throw new Error("Test Fails: FooDepr should not be" + "generated as it is deprecated.");  } else {    System.out.println("Test passes:  FooDepr.html not found.");  }  tester.printSummary();}  }
class C{  private void deleteTargetGroup(StorageSystem system,String replicationGroupInstance) throws Exception {  if (system.getUsingSmis80()) {    if (!replicationGroupInstance.contains("+")) {      replicationGroupInstance=String.format("%s+%s",system.getSerialNumber(),replicationGroupInstance);    }  }  CIMObjectPath groupPath=_cimPath.getReplicationGroupObjectPath(system,replicationGroupInstance);  CIMArgument[] outArgs=new CIMArgument[5];  CIMArgument[] deleteGroupInArgs=_helper.getDeleteReplicationGroupInputArguments(system,groupPath,true);  _helper.invokeMethod(system,_cimPath.getControllerReplicationSvcPath(system),DELETE_GROUP,deleteGroupInArgs,outArgs);}  }
class C{  public double phi(double element){  double elementsLessThanOrEqualToElement=0.0;  for (int i=buffers.length; --i >= 0; ) {    if (!buffers[i].isEmpty()) {      elementsLessThanOrEqualToElement+=buffers[i].weight * buffers[i].rank(element);    }  }  return elementsLessThanOrEqualToElement / totalSize();}  }
class C{  MultiplexedSocket(MultiplexingSocket multiplexing,DatagramPacketFilter filter) throws SocketException {  super(multiplexing);  if (multiplexing == null)   throw new NullPointerException("multiplexing");  this.multiplexing=multiplexing;  this.filter=filter;}  }
class C{  public static ComponentUI createUI(JComponent c){  if (viewportUI == null)   viewportUI=new CompiereViewportUI();  return viewportUI;}  }
class C{  public void createFailureNullCapacity1(){  new World((Capacity)null);}  }
class C{  final public static double sphericalAzimuth(double phi1,double lambda0,double phi,double lambda){  double ldiff=lambda - lambda0;  double cosphi=Math.cos(phi);  return Math.atan2(cosphi * Math.sin(ldiff),(Math.cos(phi1) * Math.sin(phi) - Math.sin(phi1) * cosphi * Math.cos(ldiff)));}  }
class C{  public BitField(final int mask){  _mask=mask;  int count=0;  int bit_pattern=mask;  if (bit_pattern != 0) {    while ((bit_pattern & 1) == 0) {      count++;      bit_pattern>>=1;    }  }  _shift_count=count;}  }
class C{  public static <T>LazyIterable<T> distinct(Iterable<T> iterable){  return new DistinctIterable<>(iterable);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  private boolean isFreshnessLifetimeHeuristic(){  return maxAgeSeconds == -1 && expires == null;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof TimePeriodValue)) {    return false;  }  TimePeriodValue timePeriodValue=(TimePeriodValue)obj;  if (this.period != null ? !this.period.equals(timePeriodValue.period) : timePeriodValue.period != null) {    return false;  }  if (this.value != null ? !this.value.equals(timePeriodValue.value) : timePeriodValue.value != null) {    return false;  }  return true;}  }
class C{  public boolean isRange(int start,int end,boolean value){  if (end < start) {    throw new IllegalArgumentException();  }  if (end == start) {    return true;  }  end--;  int firstInt=start / 32;  int lastInt=end / 32;  for (int i=firstInt; i <= lastInt; i++) {    int firstBit=i > firstInt ? 0 : start & 0x1F;    int lastBit=i < lastInt ? 31 : end & 0x1F;    int mask;    if (firstBit == 0 && lastBit == 31) {      mask=-1;    } else {      mask=0;      for (int j=firstBit; j <= lastBit; j++) {        mask|=1 << j;      }    }    if ((bits[i] & mask) != (value ? mask : 0)) {      return false;    }  }  return true;}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  public static void main(String[] args){  System.out.println("Calculate Surface Distance between two Latitudes/Longitudes");  LatLng lld1=new LatLng(40.718119,-73.995667);  System.out.println("New York Lat/Long: " + lld1.toString());  LatLng lld2=new LatLng(51.499981,-0.125313);  System.out.println("London Lat/Long: " + lld2.toString());  double d=lld1.distance(lld2);  System.out.println("Surface Distance between New York and London: " + d + "km");  System.out.println();  System.out.println("Convert OS Grid Reference to Latitude/Longitude");  System.out.println("Using OSGB36");  OSRef os1=new OSRef(651409.903,313177.270);  System.out.println("OS Grid Reference: " + os1.toString() + " - "+ os1.toSixFigureString());  LatLng ll1=os1.toLatLng();  System.out.println("Converted to Lat/Long: " + ll1.toString());  System.out.println();  System.out.println("Using WGS84");  OSRef os1w=new OSRef(651409.903,313177.270);  System.out.println("OS Grid Reference: " + os1w.toString() + " - "+ os1w.toSixFigureString());  LatLng ll1w=os1w.toLatLng();  ll1w.toWGS84();  System.out.println("Converted to Lat/Long: " + ll1w.toString());  System.out.println();  System.out.println("Convert Latitude/Longitude to OS Grid Reference");  System.out.println("Using OSGB36");  LatLng ll2=new LatLng(52.657570301933,1.7179215806451);  System.out.println("Latitude/Longitude: " + ll2.toString());  OSRef os2=ll2.toOSRef();  System.out.println("Converted to OS Grid Ref: " + os2.toString() + " - "+ os2.toSixFigureString());  System.out.println();  System.out.println("Using WGS84");  LatLng ll2w=new LatLng(52.657570301933,1.7179215806451);  System.out.println("Latitude/Longitude: " + ll2.toString());  ll2w.toOSGB36();  OSRef os2w=ll2w.toOSRef();  System.out.println("Converted to OS Grid Ref: " + os2w.toString() + " - "+ os2w.toSixFigureString());  System.out.println();  System.out.println("Convert Six-Figure OS Grid Reference String to an OSRef Object");  String os6="TG514131";  System.out.println("Six figure string: " + os6);  OSRef os6x=new OSRef(os6);  System.out.println("Converted to OS Grid Ref: " + os6x.toString() + " - "+ os6x.toSixFigureString());  System.out.println();  System.out.println("Convert UTM Reference to Latitude/Longitude");  UTMRef utm1=new UTMRef(456463.99,3335334.05,'E',12);  System.out.println("UTM Reference: " + utm1.toString());  LatLng ll3=utm1.toLatLng();  System.out.println("Converted to Lat/Long: " + ll3.toString());  System.out.println();  System.out.println("Convert Latitude/Longitude to UTM Reference");  LatLng ll4=new LatLng(-60.1167,-111.7833);  System.out.println("Latitude/Longitude: " + ll4.toString());  UTMRef utm2=ll4.toUTMRef();  System.out.println("Converted to UTM Ref: " + utm2.toString());  System.out.println();}  }
class C{  public void addAddressBookListener(AddressBookEventListener listener){  listeners.add(listener);}  }
class C{  public static Injector createInjector(Module... modules){  return createInjector(Arrays.asList(modules));}  }
class C{  public String toString(int units,String unitsName){  StringBuffer result=new StringBuffer();  result.append(getCrossFeedResolution(units));  result.append('x');  result.append(getFeedResolution(units));  if (unitsName != null) {    result.append(' ');    result.append(unitsName);  }  return result.toString();}  }
class C{  protected Instances generateSubset(Instances data,Range range) throws Exception {  Remove filter;  StringBuilder atts;  Instances result;  int[] indices;  int i;  indices=range.getSelection();  atts=new StringBuilder();  for (i=0; i < indices.length; i++) {    if (i > 0) {      atts.append(",");    }    atts.append("" + (indices[i] + 1));  }  if ((data.classIndex() > -1) && (!range.isInRange(data.classIndex()))) {    atts.append("," + (data.classIndex() + 1));  }  filter=new Remove();  filter.setAttributeIndices(atts.toString());  filter.setInvertSelection(true);  filter.setInputFormat(data);  result=Filter.useFilter(data,filter);  return result;}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {    TypedValue tv=new TypedValue();    int actionBarHeight=0;    if (getActivity().getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {      actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());    }    mListView.setBackgroundColor(0xFFEEEEEE);    mRootView.setPadding(0,actionBarHeight + mApp.getStatusBarHeight(mContext),0,0);    mListView.setPadding(10,0,10,mApp.getNavigationBarHeight(mContext));    mListView.setClipToPadding(false);    getActivity().getWindow().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(mContext));  }}  }
class C{  private static List<String> filterNameServers(List<String> input,boolean oneIsEnough){  SecurityManager security=System.getSecurityManager();  if (security == null || input == null || input.isEmpty()) {    return input;  } else {    List<String> output=new ArrayList<>();    for (    String platformServer : input) {      int colon=platformServer.indexOf(':',platformServer.indexOf(']') + 1);      int p=(colon < 0) ? DEFAULT_PORT : Integer.parseInt(platformServer.substring(colon + 1));      String s=(colon < 0) ? platformServer : platformServer.substring(0,colon);      try {        security.checkConnect(s,p);        output.add(platformServer);        if (oneIsEnough) {          return output;        }      } catch (      SecurityException se) {        continue;      }    }    return output;  }}  }
class C{  public void testGetF2(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF2();  assertEquals(expResult,result);}  }
class C{  public StatusServlet(BaleenStatus status){  super(LOGGER,StatusServlet.class);  this.status=status;}  }
class C{  @Interruptible private void addAllSpills(int[] spillArray){  java.util.Arrays.sort(spillArray);  for (  int spill : spillArray) {    addSpillLocation(spill);  }}  }
class C{  static boolean pairDiff(int ar[],int x){  Arrays.sort(ar);  int len=ar.length;  for (int i=0, j=1; i < len && j < len; ) {    if (i != j && ar[j] - ar[i] == x) {      return true;    } else     if (ar[j] - ar[i] < x) {      j++;    } else {      i++;    }  }  return false;}  }
class C{  public ActionTargetNotGrumpyTowardsSender(String targetAttribute){  this.targetAttribute=targetAttribute;}  }
class C{  public int size(){  return values.size();}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  this.encrypting=encrypting;  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);      for (int i=0; i < IV.length - iv.length; i++) {        IV[i]=0;      }    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    if (ivParam.getParameters() != null) {      cipher.init(true,ivParam.getParameters());    }  } else {    reset();    if (params != null) {      cipher.init(true,params);    }  }}  }
class C{  protected String sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,Context context) throws HttpException {  String responseBody="";  if (contentType != null) {    uriRequest.addHeader("Content-Type",contentType);  }  List<Cookie> list=cookieStore.getCookies();  if (list != null && list.size() > 0) {    for (    Cookie cookie : list) {      uriRequest.setHeader("Cookie",cookie.getValue());    }  }  try {    URI uri=uriRequest.getURI();    NLog.e(tag,"url : " + uri.toString());    String scheme=uri.getScheme();    if (!TextUtils.isEmpty(scheme) && ASSETS_PATH.equals(scheme)) {      String fileName=uri.getAuthority();      InputStream intput=context.getAssets().open(fileName);      responseBody=inputSteamToString(intput);      NLog.e(tag,"responseBody : " + responseBody);      return responseBody;    }    HttpEntity bufferEntity=null;    HttpResponse response=client.execute(uriRequest,httpContext);    HttpEntity entity=response.getEntity();    if (entity != null) {      bufferEntity=new BufferedHttpEntity(entity);      responseBody=EntityUtils.toString(bufferEntity,ENCODE_UTF8);      NLog.e(tag,"responseBody : " + responseBody);    }    Header[] headers=response.getHeaders("Set-Cookie");    if (headers != null && headers.length > 0) {      for (int i=0; i < headers.length; i++) {        String cookie=headers[i].getValue();        BasicClientCookie newCookie=new BasicClientCookie("cookie" + i,cookie);        cookieStore.addCookie(newCookie);      }    }  } catch (  Exception e) {    e.printStackTrace();    throw new HttpException(e);  }  return responseBody;}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedLength(null,SVG_X_ATTRIBUTE,SVG_FOREIGN_OBJECT_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y=createLiveAnimatedLength(null,SVG_Y_ATTRIBUTE,SVG_FOREIGN_OBJECT_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  width=createLiveAnimatedLength(null,SVG_WIDTH_ATTRIBUTE,null,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);  height=createLiveAnimatedLength(null,SVG_HEIGHT_ATTRIBUTE,null,SVGOMAnimatedLength.VERTICAL_LENGTH,true);  preserveAspectRatio=createLiveAnimatedPreserveAspectRatio();}  }
class C{  public CompilationUnit parse1(Source source,SymbolTable symbolTable){  CompilerContext context=new CompilerContext();  CompilationUnit unit=source.newCompilationUnit(null,context);  setupLogger();  FXGParser parser;  if (FXG_PROFILE_MOBILE.equals(profile))   parser=FXGParserFactory.createDefaultParserForMobile(); else   parser=FXGParserFactory.createDefaultParser();  parser.registerElementNode(1.0,FXG_NAMESPACE,FXG_GRAPHIC_ELEMENT,FlexGraphicNode.class);  parser.registerElementNode(1.0,FXG_NAMESPACE,FXG_TEXTGRAPHIC_ELEMENT,FlexTextGraphicNode.class);  parser.registerElementNode(1.0,FXG_NAMESPACE,FXG_P_ELEMENT,FlexParagraphNode.class);  parser.registerElementNode(1.0,FXG_NAMESPACE,FXG_SPAN_ELEMENT,FlexSpanNode.class);  parser.registerElementNode(2.0,FXG_NAMESPACE,FXG_GRAPHIC_ELEMENT,FlexGraphicNode.class);  parser.registerElementNode(2.0,FXG_NAMESPACE,FXG_RICHTEXT_ELEMENT,FlexRichTextNode.class);  try {    FXGNode node=parser.parse(source.getInputStream(),source.getNameForReporting());    context.setAttribute(FXG_DOM_ROOT,node);    QName topLevelQName=getQNameFromSource(source);    unit.topLevelDefinitions.add(topLevelQName);    MultiName baseMultiName=MULTINAME_SPRITEVISUALELEMENT;    if (node instanceof GraphicNode) {      GraphicNode graphicNode=(GraphicNode)node;      if (graphicNode.baseClassName != null) {        String pkg="";        String baseClassName=graphicNode.baseClassName;        String className=baseClassName;        int lastDot=baseClassName.lastIndexOf(".");        if (lastDot > -1) {          pkg=baseClassName.substring(0,lastDot);          className=baseClassName.substring(lastDot + 1);        }        baseMultiName=new MultiName(NameFormatter.toColon(pkg,className));      }    }    unit.inheritance.add(baseMultiName);  } catch (  FXGException ex) {    ThreadLocalToolkit.log(new FXGParseException(ex),source,ex.getLineNumber(),ex.getColumnNumber());    unit=null;  }catch (  IOException ex) {    ThreadLocalToolkit.log(new FXGParseException(ex),source);    unit=null;  }  return unit;}  }
class C{  public void leave() throws RcsPersistentStorageException, RcsGenericException {  try {    mGroupChatInf.leave();  } catch (  Exception e) {    RcsUnsupportedOperationException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void actualizarValoresIniciales(Ficha ficha){  for (int contAreas=0; contAreas < ficha.getTotalAreas(); contAreas++)   inicializaContenedorElementos(ficha.getArea(contAreas));}  }
class C{  private Object readResolve(){  if (getDescriptor().getFieldNames().length == 0) {    return new OpenMBeanOperationInfoSupport(name,description,arrayCopyCast(getSignature()),returnOpenType,getImpact());  } else   return this;}  }
class C{  private static int jobType(Lop lops,ArrayList<ArrayList<Lop>> jobvec) throws LopsException {  for (  JobType jt : JobType.values()) {    int i=jt.getId();    if (i > 0 && jobvec.get(i) != null && jobvec.get(i).contains(lops)) {      return i;    }  }  return -1;}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  protected Logger(String name){  this.name=name;  String prop=System.getProperty(name + ".LEVEL");  if (prop != null) {    this.level=Level.parse(prop);  } else {    this.level=Level.INFO;  }  this.handlers=new HashSet();  this.handlers.add(new StreamHandler(System.err,new SimpleFormatter()));}  }
class C{  public boolean canRead(){  return true;}  }
class C{  final byte[] sequenceNumber(){  return Arrays.copyOf(block,8);}  }
class C{  public void pauseShotDetection(final boolean isPaused){  camerasSupervisor.setDetectingAll(!isPaused);}  }
class C{  public void testPutBytes(){  byte[] expectedResult={3,0,0,1,1,2,3};  byte[] bytes={1,2,3};  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putBytes(bytes);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public static Integer computeAND(ArrayList<Integer> inputs){  for (  Integer i : inputs) {    if (i == 0) {      return 0;    }  }  return 1;}  }
class C{  public static byte[] escapeEasternUnicodeByteStream(byte[] origBytes,String origString){  if (origBytes == null) {    return null;  }  if (origBytes.length == 0) {    return new byte[0];  }  int bytesLen=origBytes.length;  int bufIndex=0;  int strIndex=0;  ByteArrayOutputStream bytesOut=new ByteArrayOutputStream(bytesLen);  while (true) {    if (origString.charAt(strIndex) == '\\') {      bytesOut.write(origBytes[bufIndex++]);    } else {      int loByte=origBytes[bufIndex];      if (loByte < 0) {        loByte+=256;      }      bytesOut.write(loByte);      if (loByte >= 0x80) {        if (bufIndex < (bytesLen - 1)) {          int hiByte=origBytes[bufIndex + 1];          if (hiByte < 0) {            hiByte+=256;          }          bytesOut.write(hiByte);          bufIndex++;          if (hiByte == 0x5C) {            bytesOut.write(hiByte);          }        }      } else       if (loByte == 0x5c) {        if (bufIndex < (bytesLen - 1)) {          int hiByte=origBytes[bufIndex + 1];          if (hiByte < 0) {            hiByte+=256;          }          if (hiByte == 0x62) {            bytesOut.write(0x5c);            bytesOut.write(0x62);            bufIndex++;          }        }      }      bufIndex++;    }    if (bufIndex >= bytesLen) {      break;    }    strIndex++;  }  return bytesOut.toByteArray();}  }
class C{  public static IOException create(String msg,IOException exn){  if (exn.getClass().equals(IOException.class) || exn.getClass().equals(java.net.SocketException.class) || exn.getClass().getName().equals("javax.net.ssl.SSLException")) {    return new ClientDisconnectException(msg,exn);  } else   return exn;}  }
class C{  private boolean hasLogPointer(TransactionLog tlog){  for (  CdcrLogPointer pointer : logPointers.values()) {    if (!pointer.isInitialised()) {      return true;    }    if (pointer.tlogFile == tlog.tlogFile) {      return true;    }  }  return false;}  }
class C{  public String escapeAttributeEntities(String str){  StringBuffer buffer;  char ch;  String entity;  buffer=null;  for (int i=0; i < str.length(); i++) {    ch=str.charAt(i);switch (ch) {case '<':      entity="&lt;";    break;case '>':  entity="&gt;";break;case '\"':entity="&quot;";break;case '&':entity="&amp;";break;case '\r':entity="&#xD;";break;case '\t':entity="&#x9;";break;case '\n':entity="&#xA;";break;default :entity=null;break;}if (buffer == null) {if (entity != null) {buffer=new StringBuffer(str.length() + 20);buffer.append(str.substring(0,i));buffer.append(entity);}} else {if (entity == null) {buffer.append(ch);} else {buffer.append(entity);}}}return (buffer == null) ? str : buffer.toString();}  }
class C{  private void checkPausedOrCanceled(State state) throws StopRequest {  if (mService.getControl() == DownloaderService.CONTROL_PAUSED) {    int status=mService.getStatus();switch (status) {case DownloaderService.STATUS_PAUSED_BY_APP:      throw new StopRequest(mService.getStatus(),"download paused");  }}}  }
class C{  @ViewDebug.ExportedProperty(category="progress") public synchronized boolean isIndeterminate(){  return mIndeterminate;}  }
class C{  private static String[][] findMatch(String[][] clientContentTypes,String[][] serverSupportedContentTypes,String[][] preferredContentType){  List<String[]> resultList=new ArrayList<>(serverSupportedContentTypes.length);  double highestQFactor=0;  int idx=0;  for (int sidx=0, slen=serverSupportedContentTypes.length; sidx < slen; sidx++) {    String serverType=serverSupportedContentTypes[sidx][1];    if (serverType != null) {      for (int cidx=0, clen=clientContentTypes.length; cidx < clen; cidx++) {        String browserType=clientContentTypes[cidx][1];        if (browserType != null) {          if ((browserType.equalsIgnoreCase(serverType)) || (browserType.equals("*"))) {            if ((clientContentTypes[cidx][2].equalsIgnoreCase(serverSupportedContentTypes[sidx][2])) || (clientContentTypes[cidx][2].equals("*"))) {              double cLevel=0.0;              double sLevel=0.0;              if (clientContentTypes[cidx][3] != null) {                cLevel=(Double.parseDouble(clientContentTypes[cidx][3])) * .10;              }              if (serverSupportedContentTypes[sidx][3] != null) {                sLevel=(Double.parseDouble(serverSupportedContentTypes[sidx][3])) * .10;              }              double cQfactor=Double.parseDouble(clientContentTypes[cidx][0]) + cLevel;              double sQfactor=Double.parseDouble(serverSupportedContentTypes[sidx][0]) + sLevel;              double resultQuality=cQfactor * sQfactor;              String[] curResult=new String[MAX_CONTENT_TYPE_PARTS];              resultList.add(curResult);              curResult[0]=String.valueOf(resultQuality);              if (clientContentTypes[cidx][2].equals("*")) {                curResult[1]=clientContentTypes[cidx][1];                curResult[2]=clientContentTypes[cidx][2];              } else {                curResult[1]=serverSupportedContentTypes[sidx][1];                curResult[2]=serverSupportedContentTypes[sidx][2];                curResult[3]=serverSupportedContentTypes[sidx][3];              }              if (resultQuality > highestQFactor) {                idx=resultList.size() - 1;                highestQFactor=resultQuality;              }            }          }        }      }    }  }  String[][] match=new String[1][3];  if (preferredContentType.length != 0 && preferredContentType[0][0] != null) {    BigDecimal highestQual=BigDecimal.valueOf(highestQFactor);    for (int i=0, len=resultList.size(); i < len; i++) {      String[] result=resultList.get(i);      if ((BigDecimal.valueOf(Double.parseDouble(result[0])).compareTo(highestQual) == 0) && (result[1]).equals(preferredContentType[0][1]) && (result[2]).equals(preferredContentType[0][2])) {        match[0][0]=result[0];        match[0][1]=result[1];        match[0][2]=result[2];        return match;      }    }  }  if (!resultList.isEmpty()) {    String[] fallBack=resultList.get(idx);    match[0][0]=fallBack[0];    match[0][1]=fallBack[1];    match[0][2]=fallBack[2];  }  return match;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  private IPath sourceFolderRelativePath(IResource resource){  IPath path=resource.getFullPath().makeRelativeTo(this.sourceFolder.getFullPath());  if (path.toString().equals(IPath.SEPARATOR)) {    return new Path("");  }  return path;}  }
class C{  private void logMandatoryNote(JavaFileObject file,String msg,Object... args){  if (enforceMandatory)   log.mandatoryNote(file,msg,args); else   log.note(file,msg,args);}  }
class C{  public static OutputLimitClause create(OutputLimitSelector selector,String frequencyVariable){  return new OutputLimitClause(selector,frequencyVariable);}  }
class C{  public void onRenderingRejected(){}  }
class C{  protected void writeAttributes(AttributeSet attr) throws IOException {  convAttr.removeAttributes(convAttr);  convertToHTML32(attr,convAttr);  Enumeration names=convAttr.getAttributeNames();  while (names.hasMoreElements()) {    Object name=names.nextElement();    if (name instanceof HTML.Tag || name instanceof StyleConstants || name == HTML.Attribute.ENDTAG) {      continue;    }    write(" " + name + "=\""+ convAttr.getAttribute(name)+ "\"");  }}  }
class C{  public TemporalOMScalingIcon(Object id,int renderType,boolean interpolate,Image image){  this(id,renderType,interpolate);  setColorModel(OMRasterObject.COLORMODEL_IMAGEICON);  setImage(image);  setBaseScale(40000000);  setMaxScale(4000000);  setMinScale(4000000);}  }
class C{  @Override public void applyConfig(final ConfigSettings config){  Object o=config.getConfigParameter(ConfigurationKeys.LOGGING_PATH_DIFFTOOL);  if (o != null) {    this.diffToolField.setText((String)o);  } else {    this.diffToolField.setText("");  }  o=config.getConfigParameter(ConfigurationKeys.LOGGING_LOGLEVEL_DIFFTOOL);  if (o != null) {    this.diffToolLogLevelComboBox.setSelectedItem(o);  }}  }
class C{  public int numAnnotations(){  return ByteArray.readU16bit(info,0);}  }
class C{  public static void println(int priority,String tag,String msg){  println(priority,tag,msg,null);}  }
class C{  private void rollbackTriple(IsolationLevel level) throws RepositoryException {  clear(store);  RepositoryConnection con=store.getConnection();  try {    con.begin(level);    con.add(RDF.NIL,RDF.TYPE,RDF.LIST);    con.rollback();    assertEquals(0,count(con,RDF.NIL,RDF.TYPE,RDF.LIST,false));  }  finally {    con.close();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.303 -0500",hash_original_method="764159AB96CDD9290AC2E4282412C52D",hash_generated_method="8C82E85DEB08E4AD4A6B6EC8A7E2BD0C") public Matcher region(int start,int end){  return reset(input,start,end);}  }
class C{  public static GridFieldVO createParameter(Properties ctx,int WindowNo,ResultSet rs){  GridFieldVO vo=new GridFieldVO(ctx,WindowNo,0,0,0,false);  vo.isProcess=true;  vo.IsDisplayed=true;  vo.IsReadOnly=false;  vo.IsUpdateable=true;  try {    vo.AD_Table_ID=0;    vo.AD_Column_ID=rs.getInt("AD_Process_Para_ID");    vo.ColumnName=rs.getString("ColumnName");    vo.Header=rs.getString("Name");    vo.Description=rs.getString("Description");    vo.Help=rs.getString("Help");    vo.displayType=rs.getInt("AD_Reference_ID");    vo.IsMandatory=rs.getString("IsMandatory").equals("Y");    vo.FieldLength=rs.getInt("FieldLength");    vo.DisplayLength=vo.FieldLength;    vo.DefaultValue=rs.getString("DefaultValue");    vo.DefaultValue2=rs.getString("DefaultValue2");    vo.VFormat=rs.getString("VFormat");    vo.ValueMin=rs.getString("ValueMin");    vo.ValueMax=rs.getString("ValueMax");    vo.isRange=rs.getString("IsRange").equals("Y");    vo.AD_Reference_Value_ID=rs.getInt("AD_Reference_Value_ID");    vo.ValidationCode=rs.getString("ValidationCode");    vo.ReadOnlyLogic=rs.getString("ReadOnlyLogic");    vo.DisplayLogic=rs.getString("DisplayLogic");  } catch (  SQLException e) {    CLogger.get().log(Level.SEVERE,"createParameter",e);  }  vo.initFinish();  if (vo.DefaultValue2 == null)   vo.DefaultValue2="";  return vo;}  }
class C{  public static double dnormLog(double x,double mean,double sd){  if (sd <= 0.0)   throw new IllegalArgumentException("standard deviation <= 0.0");  return -Math.log(sd) + dnormLog((x - mean) / sd);}  }
class C{  public String promptForText(final String question,String answer){  if (!isDisposed()) {    InputDialog dialog=new InputDialog(Raptor.getInstance().raptorWindow.getShell(),local.getString("entText"),question);    if (answer != null) {      dialog.setInput(answer);    }    return dialog.open();  } else {    return null;  }}  }
class C{  public boolean isAnnotationPresent(GridDeployment dep,Object target,Class<? extends Annotation> annCls){  return ioc.isAnnotationPresent(target,annCls,dep);}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  private void newFolder(Fragment triggeringFragment,long parentFolderId,String parentName){  AddEditBookmarkFragment newFolderFragment=AddEditBookmarkFragment.newAddNewFolderInstance(parentFolderId,parentName);  newFolderFragment.setTargetFragment(triggeringFragment,0);  setActionListenerOnAddEdit(newFolderFragment);  getFragmentManager().beginTransaction().hide(triggeringFragment).add(android.R.id.content,newFolderFragment,ADD_FOLDER_FRAGMENT_TAG).addToBackStack(null).commit();}  }
class C{  public static void notifyNativeGestureStarted(View view,MotionEvent event){  RootViewUtil.getRootView(view).onChildStartedNativeGesture(event);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"CMN");  translateAll(environment,instruction,"CMN",instructions);}  }
class C{  public static boolean deleteDirectoryRecursively(File directory){  if (!directory.exists() || !directory.isDirectory()) {    return false;  }  for (  File entry : directory.listFiles()) {    if (entry.isDirectory()) {      deleteDirectoryRecursively(entry);    }    if (!entry.delete()) {      return false;    }  }  return directory.delete();}  }
class C{  public static void signalCacheClose(){  if (INSTANCE != null && INSTANCE.consumerThread != null) {    INSTANCE.consumerThread.interrupt();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.014 -0400",hash_original_method="8FA9092EFDAC72016D6F832FCE94F2A1",hash_generated_method="0DDAE922B1B20D822375E9CF52DB16AD") public final void fatal(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {    log(SimpleLog.LOG_LEVEL_FATAL,message,null);  }}  }
class C{  public static int safeToInt(long value){  if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {    return (int)value;  }  throw new ArithmeticException("Value cannot fit in an int: " + value);}  }
class C{  public Checkpoint(Checkpoint source){  this.partitionId=source.partitionId;  this.offset=source.offset;  this.sequenceNumber=source.sequenceNumber;}  }
class C{  public void updateRecordHard(int id,byte[] record) throws IOException {  if (!database.isOpen())   throw new IllegalStateException("don't access the table before opening the database");  if (!hardWriteMode)   throw new IllegalStateException("hard write attempted during soft write mode");  if (id < committedNextRowId && !softModeSavedRows.get(id,false))   throw new IllegalStateException("hard write attempted for row not soft written: " + id);synchronized (this) {    rwRaf.seek(HEADER_SIZE + id * recordSize);    rwRaf.write(record);  }}  }
class C{  public String foreignKey(String className){  return foreignKey(className,true);}  }
class C{  static DocumentTab create(DocumentActivity activity,boolean incognito,WindowAndroid window,String url,WebContents webContents,TabState tabState,boolean initiallyHidden){  int parentTabId=activity.getIntent().getIntExtra(IntentHandler.EXTRA_PARENT_TAB_ID,Tab.INVALID_TAB_ID);  if (webContents != null) {    DocumentTab tab=new DocumentTab(activity,incognito,window,url,parentTabId,webContents);    webContents.resumeLoadingCreatedWebContents();    return tab;  }  if (tabState == null) {    return new DocumentTab(activity,incognito,window,url,parentTabId,initiallyHidden);  } else {    return new DocumentTab(activity,incognito,window,"",tabState,parentTabId);  }}  }
class C{  public boolean remove(Object key){  return m_map.remove(key) == OBJECT;}  }
class C{  public static Element firstChildElement(Element element,String childElementName,String attrName,String attrValue){  if (element == null)   return null;  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE && (childElementName == null || childElementName.equals(node.getLocalName() != null ? node.getLocalName() : node.getNodeName()))) {        Element childElement=(Element)node;        String value=childElement.getAttribute(attrName);        if (value != null && value.equals(attrValue)) {          return childElement;        }      }    } while ((node=node.getNextSibling()) != null);  }  return null;}  }
class C{  boolean markDone(long id){  Transaction transaction=datastore.newTransaction();  try {    Entity task=transaction.get(keyFactory.newKey(id));    if (task != null) {      transaction.put(Entity.builder(task).set("done",true).build());    }    transaction.commit();    return task != null;  }  finally {    if (transaction.active()) {      transaction.rollback();    }  }}  }
class C{  public void init(){  try {synchronized (lock.validated()) {      remote.init();    }  } catch (  Throwable t) {    Util.handleException(t);  }}  }
class C{  public void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  public Result run(Request request){  return run(request.getRunner());}  }
class C{  private void parsePersonsDatabase(Connection connection,String query,boolean isUsingHouseholds) throws SQLException {  Statement statement=connection.createStatement();  ResultSet set=null;  if (isUsingHouseholds) {    set=statement.executeQuery("select * from mid2008.persons_raw");  } else {    set=statement.executeQuery(query);  }  while (set.next()) {    String hhId=set.getString(MiDConstants.HOUSEHOLD_ID);    String personId=set.getString(MiDConstants.PERSON_ID);    double personWeight=set.getDouble(MiDConstants.PERSON_WEIGHT);    String carAvail=set.getString(MiDConstants.PERSON_CAR_AVAIL);    String license=set.getString(MiDConstants.PERSON_LICENSE);    String sex=set.getString(MiDConstants.PERSON_SEX);    String age=set.getString(MiDConstants.PERSON_AGE);    String employed=set.getString(MiDConstants.PERSON_EMPLOYED);    int personGroup=set.getInt(MiDConstants.PERSON_GROUP_12);    int phase=set.getInt(MiDConstants.PERSON_LIFE_PHASE);    MiDPerson person=new MiDPerson(hhId + personId,sex,age,carAvail,license,employed);    person.setWeight(personWeight);    person.setPersonGroup(personGroup);    person.setLifePhase(phase);    if (isUsingHouseholds) {      if (!this.midHouseholds.containsKey(hhId)) {        continue;      } else {        this.midHouseholds.get(hhId).getMemberIds().add(person.getId());      }    }    if (!this.midPersons.containsKey(person.getId())) {      this.midPersons.put(person.getId(),person);    }    String hash=HashGenerator.generateAgeGroupHash(person);    if (!this.midPersonsClassified.containsKey(hash)) {      this.midPersonsClassified.put(hash,new ArrayList<MiDPerson>());    }    this.midPersonsClassified.get(hash).add(person);  }  set.close();  statement.close();  if (this.midPersons.isEmpty()) {    log.warn("The selected query \"" + query + "\" yielded no results...");    log.warn("This eventually results in no population.");    log.warn("Continuing anyway");  } else {    log.info("Created " + this.midPersons.size() + " persons from MiD database.");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.550 -0500",hash_original_method="D633463C720A911377C680E8AA0DAE0C",hash_generated_method="E4AE7F97116A9A6E76E29F66F26D5110") public static String formatNumberToE164(String phoneNumber,String defaultCountryIso){  PhoneNumberUtil util=PhoneNumberUtil.getInstance();  String result=null;  try {    PhoneNumber pn=util.parse(phoneNumber,defaultCountryIso);    if (util.isValidNumber(pn)) {      result=util.format(pn,PhoneNumberFormat.E164);    }  } catch (  NumberParseException e) {  }  return result;}  }
class C{  public static void saveAsImage(int width,int height,String path) throws FileNotFoundException {  saveAsImage(0,0,width,height,path,CompressFormat.PNG,100);}  }
class C{  private void checkTrackFromGpxFile(){  EndToEndTestUtils.SOLO.clickOnText(GPX_FILE_TRACK_NAME);  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.waitForActivity(TrackDetailActivity.class,EndToEndTestUtils.LONG_WAIT_TIME);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_stats_tab));  instrumentation.waitForIdleSync();  double acceptDeviation=0.1f;  Activity activity=EndToEndTestUtils.SOLO.getCurrentActivity();  double elevationMin=Double.parseDouble(((TextView)activity.findViewById(R.id.stats_elevation_min).findViewById(R.id.stats_value)).getText().toString());  double elevationMax=Double.parseDouble(((TextView)activity.findViewById(R.id.stats_elevation_max).findViewById(R.id.stats_value)).getText().toString());  double distance=Double.parseDouble(((TextView)activity.findViewById(R.id.stats_distance).findViewById(R.id.stats_value)).getText().toString());  double averageSpeed=Double.parseDouble(((TextView)activity.findViewById(R.id.stats_average_speed).findViewById(R.id.stats_value)).getText().toString());  assertEquals(Double.parseDouble(GPX_FILE_ELEVATION_MIN),elevationMin);  assertEquals(getGpxFileElevationMax(),elevationMax);  double calculateDistance=getGpxFileDistance();  double calculateAverageSpeed=calculateDistance / (GPX_FILE_TIME_INTERVAL + UnitConversions.S_TO_MIN * UnitConversions.MIN_TO_HR);  assertTrue((calculateDistance - distance) / calculateDistance < acceptDeviation);  assertTrue((calculateAverageSpeed - averageSpeed) / calculateAverageSpeed < acceptDeviation);  EndToEndTestUtils.SOLO.goBack();}  }
class C{  public CSVFormat withCommentStart(final char commentStart){  return withCommentStart(Character.valueOf(commentStart));}  }
class C{  public void add(double element){  if (size == elements.length)   ensureCapacity(size + 1);  elements[size++]=element;}  }
class C{  public static EWMA fifteenMinuteEWMA(){  return new EWMA(M15_ALPHA,5,TimeUnit.SECONDS);}  }
class C{  @SuppressWarnings("unchecked") private void rewrite(final StaticAnalysis sa,final Set<IVariable<?>> exogenousVars,final QueryBase query,final GraphPatternGroup<IGroupMemberNode> p){  final int arity=p.size();  for (int i=0; i < arity; i++) {    final IGroupMemberNode child=(IGroupMemberNode)p.get(i);    if (child instanceof FilterNode) {      final FilterNode filter=(FilterNode)child;      final IValueExpressionNode vexp=filter.getValueExpressionNode();      if (vexp != null) {        final Object gpGroup=child.get(0).getProperty(Annotations.GRAPH_PATTERN,null);        if (gpGroup instanceof GraphPatternGroup) {          rewrite(sa,exogenousVars,query,(GraphPatternGroup<IGroupMemberNode>)gpGroup);        }      }      rewrite(sa,exogenousVars,query,p,filter,vexp);    }    if (child instanceof GraphPatternGroup<?>) {      rewrite(sa,exogenousVars,query,(GraphPatternGroup<IGroupMemberNode>)child);    }    if (child instanceof SubqueryRoot) {      final SubqueryRoot subquery=(SubqueryRoot)child;      rewrite(sa,exogenousVars,subquery,subquery.getWhereClause());    }    if (child instanceof AssignmentNode) {      final AssignmentNode bind=(AssignmentNode)child;      final IValueExpressionNode vexp=bind.getValueExpressionNode();      if (vexp != null) {        final Object gpGroup=child.get(0).getProperty(Annotations.GRAPH_PATTERN,null);        if (gpGroup instanceof GraphPatternGroup) {          rewrite(sa,exogenousVars,query,(GraphPatternGroup<IGroupMemberNode>)gpGroup);        }      }      rewrite(sa,exogenousVars,query,p,bind,vexp);    }  }}  }
class C{  public TestSuiteBuilder excludePackages(String... packageNames){  testGrouping.removePackagesRecursive(packageNames);  return this;}  }
class C{  public boolean isZero(){  return value.isZero();}  }
class C{  private static void delete(String path){  File file=new File(path);  file.delete();}  }
class C{  private void computeIntersectionNodes(int argIndex){  for (Iterator i=arg[argIndex].getEdgeIterator(); i.hasNext(); ) {    Edge e=(Edge)i.next();    int eLoc=e.getLabel().getLocation(argIndex);    for (Iterator eiIt=e.getEdgeIntersectionList().iterator(); eiIt.hasNext(); ) {      EdgeIntersection ei=(EdgeIntersection)eiIt.next();      RelateNode n=(RelateNode)nodes.addNode(ei.coord);      if (eLoc == Location.BOUNDARY)       n.setLabelBoundary(argIndex); else {        if (n.getLabel().isNull(argIndex))         n.setLabel(argIndex,Location.INTERIOR);      }    }  }}  }
class C{  private static void init(String args[]) throws FileNotFoundException, IOException {  System.out.println("Init program ...");  source1=args[0];  System.out.println("Set working directory to: " + source1);  File folder=new File(source1);  fileList1=folder.listFiles(new TabFilter());  if (args.length == 3) {    System.out.println("Detected multiple data set");    isSingleDataSet=false;    source2=args[1];    System.out.println("Set second  working directory to: " + source2);    folder=new File(source2);    fileList2=folder.listFiles(new TabFilter());    if (!dataSetsAreOk())     System.exit(-1);    zone_id=Integer.parseInt(args[2]);  } else   zone_id=Integer.parseInt(args[1]);  zone_id_tmp=zone_id;  System.out.println("... finished init.");}  }
class C{  void cancelAllSuperActivityToastsForActivity(Activity activity){  Iterator<SuperActivityToast> superActivityToastIterator=mList.iterator();  while (superActivityToastIterator.hasNext()) {    SuperActivityToast superActivityToast=superActivityToastIterator.next();    if ((superActivityToast.getActivity()) != null && superActivityToast.getActivity().equals(activity)) {      if (superActivityToast.isShowing()) {        superActivityToast.getViewGroup().removeView(superActivityToast.getView());      }      removeMessages(Messages.DISPLAY,superActivityToast);      removeMessages(Messages.REMOVE,superActivityToast);      superActivityToastIterator.remove();    }  }}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec09(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public static String patternToString(List<LockPatternViewEx.Cell> pattern){  if (pattern == null) {    return "";  }  final int patternSize=pattern.size();  byte[] res=new byte[patternSize];  for (int i=0; i < patternSize; i++) {    LockPatternViewEx.Cell cell=pattern.get(i);    res[i]=(byte)(cell.getRow() * 3 + cell.getColumn());  }  return new String(res);}  }
class C{  public String lookupNamespaceURI(String specifiedPrefix){  short type=this.getNodeType();switch (type) {case Node.ELEMENT_NODE:{      String namespace=this.getNamespaceURI();      String prefix=this.getPrefix();      if (namespace != null) {        if (specifiedPrefix == null && prefix == specifiedPrefix) {          return namespace;        } else         if (prefix != null && prefix.equals(specifiedPrefix)) {          return namespace;        }      }      if (this.hasAttributes()) {        NamedNodeMap map=this.getAttributes();        int length=map.getLength();        for (int i=0; i < length; i++) {          Node attr=map.item(i);          String attrPrefix=attr.getPrefix();          String value=attr.getNodeValue();          namespace=attr.getNamespaceURI();          if (namespace != null && namespace.equals("http://www.w3.org/2000/xmlns/")) {            if (specifiedPrefix == null && attr.getNodeName().equals("xmlns")) {              return value;            } else             if (attrPrefix != null && attrPrefix.equals("xmlns") && attr.getLocalName().equals(specifiedPrefix)) {              return value;            }          }        }      }      return null;    }case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:  return null;case Node.ATTRIBUTE_NODE:{  if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);  }  return null;}default :{return null;}}}  }
class C{  public static String cdmaBcdToString(byte[] data,int offset,int length){  StringBuilder ret=new StringBuilder(length);  int count=0;  for (int i=offset; count < length; i++) {    int v;    v=data[i] & 0xf;    if (v > 9)     v=0;    ret.append((char)('0' + v));    if (++count == length)     break;    v=(data[i] >> 4) & 0xf;    if (v > 9)     v=0;    ret.append((char)('0' + v));    ++count;  }  return ret.toString();}  }
class C{  protected String paramString(){  String str="key=" + key;  if (usesShiftModifier()) {    str+=",usesShiftModifier";  }  return str;}  }
class C{  public void addDislike(Song song){  addLikingImpl(song,PREF_DISLIKED_ENTRIES);}  }
class C{  public PlusMove(){}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"ShutdownGracefully")).start();}  }
class C{  @Override public Object encode(Object obj) throws EncoderException {  if (!(obj instanceof String)) {    throw new EncoderException("DoubleMetaphone encode parameter is not of type String");  }  return doubleMetaphone((String)obj);}  }
class C{  @Override public void close() throws SQLException {  debugCodeCall("close");  Connection lastHandle=handleConn;  if (lastHandle != null) {    listeners.clear();    lastHandle.close();  }  if (physicalConn != null) {    try {      physicalConn.close();    }  finally {      physicalConn=null;    }  }}  }
class C{  protected static void property(List ps,String name,Class beanClass){  property(ps,name,beanClass,null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.getAudioDecoderFilter();}  }
class C{  public boolean isHtml4ModeCompatibleWithXhtml1Schemata(){  return html4ModeCompatibleWithXhtml1Schemata;}  }
class C{  public ScandiumFormatter(){  logPolicy=new LogPolicy();}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  suspendEncoding=true;}  }
class C{  public void unregister(Object subscriber){  eventBus.unregister(subscriber);}  }
class C{  private boolean performAction(int action){  AccessibilityNodeInfoCompat current=null;  try {    current=getCursor();    return current != null && PerformActionUtils.performAction(current,action);  }  finally {    AccessibilityNodeInfoUtils.recycleNodes(current);  }}  }
class C{  private void sendpackets(){  for (  Vm vm : super.getVmList()) {    for (    Entry<Integer,List<HostPacket>> es : ((NetworkCloudletSpaceSharedScheduler)vm.getCloudletScheduler()).pkttosend.entrySet()) {      List<HostPacket> pktlist=es.getValue();      for (      HostPacket pkt : pktlist) {        NetworkPacket hpkt=new NetworkPacket(getId(),pkt,vm.getId(),pkt.sender);        Vm vm2=VmList.getById(this.getVmList(),hpkt.recievervmid);        if (vm2 != null) {          packetTosendLocal.add(hpkt);        } else {          packetTosendGlobal.add(hpkt);        }      }      pktlist.clear();    }  }  boolean flag=false;  for (  NetworkPacket hs : packetTosendLocal) {    flag=true;    hs.stime=hs.rtime;    hs.pkt.recievetime=CloudSim.clock();    Vm vm=VmList.getById(getVmList(),hs.pkt.reciever);    List<HostPacket> pktlist=((NetworkCloudletSpaceSharedScheduler)vm.getCloudletScheduler()).pktrecv.get(hs.pkt.sender);    if (pktlist == null) {      pktlist=new ArrayList<HostPacket>();      ((NetworkCloudletSpaceSharedScheduler)vm.getCloudletScheduler()).pktrecv.put(hs.pkt.sender,pktlist);    }    pktlist.add(hs.pkt);  }  if (flag) {    for (    Vm vm : super.getVmList()) {      vm.updateVmProcessing(CloudSim.clock(),getVmScheduler().getAllocatedMipsForVm(vm));    }  }  packetTosendLocal.clear();  double avband=bandwidth / packetTosendGlobal.size();  for (  NetworkPacket hs : packetTosendGlobal) {    double delay=(1000 * hs.pkt.data) / avband;    NetworkConstants.totaldatatransfer+=hs.pkt.data;    CloudSim.send(getDatacenter().getId(),sw.getId(),delay,CloudSimTags.Network_Event_UP,hs);  }  packetTosendGlobal.clear();}  }
class C{  public static void increasePageNumber(){  pageNumber++;}  }
class C{  public static String toHexString(byte[] array){  StringBuilder sb=new StringBuilder(2 * array.length);  for (int i=0; i < array.length; i++) {    String hex=Integer.toHexString(array[i] & 0xff);    if (hex.length() == 1) {      sb.append('0');    }    sb.append(hex);  }  return sb.toString();}  }
class C{  private void trackBranchOpcode(Map<RuntimeVariable,Set<Integer>> trackedMap,RuntimeVariable v,int branch_id){  if (!trackedMap.containsKey(v))   trackedMap.put(v,new HashSet<Integer>());  Set<Integer> branchSet=trackedMap.get(v);  branchSet.add(branch_id);  trackedMap.put(v,branchSet);}  }
class C{  private boolean adjustGranularity(int direction){  AccessibilityNodeInfoCompat currentNode=null;  try {    currentNode=getCursor();    if (currentNode == null) {      return false;    }    final boolean wasAdjusted=mGranularityManager.adjustGranularityAt(currentNode,direction);    if (wasAdjusted) {      granularityUpdated(mGranularityManager.getCurrentGranularity(),true);    }    return wasAdjusted;  }  finally {    AccessibilityNodeInfoUtils.recycleNodes(currentNode);  }}  }
class C{  public IntBuffer3D(IntBuffer3DConsumer target,int capacity){  this.target=target;  this.capacity=capacity;  this.xElements=new int[capacity];  this.yElements=new int[capacity];  this.zElements=new int[capacity];  this.xList=new IntArrayList(xElements);  this.yList=new IntArrayList(yElements);  this.zList=new IntArrayList(zElements);  this.size=0;}  }
class C{  @Deprecated public static void preLoadInjectHeader(WebView mWebView){  mWebView.setBackgroundColor(Color.TRANSPARENT);  mWebView.setVisibility(View.INVISIBLE);}  }
class C{  private boolean isLiveDown(){  int size=quorumManager.getMaxClusterSize();  QuorumVoteServerConnect quorumVote=new QuorumVoteServerConnect(size,storageManager);  quorumManager.vote(quorumVote);  try {    quorumVote.await(LATCH_TIMEOUT,TimeUnit.SECONDS);  } catch (  InterruptedException interruption) {  }  quorumManager.voteComplete(quorumVote);  return quorumVote.getDecision();}  }
class C{  public boolean isInDescription(){  return this.tagValue == NO_TAG_VALUE || (this.flags & IN_DESCRIPTION) == IN_DESCRIPTION;}  }
class C{  public void accept(final ClassVisitor cv){  String[] exceptions=new String[this.exceptions.size()];  this.exceptions.toArray(exceptions);  MethodVisitor mv=cv.visitMethod(access,name,desc,signature,exceptions);  if (mv != null) {    accept(mv);  }}  }
class C{  public MatchResult matches(String text){  return regExp.exec(text);}  }
class C{  public static int ECONNREFUSED(){  return Errno.ECONNREFUSED.intValue();}  }
class C{  public static void main(String[] args){  TestRunner.run(AdapterTest.class);}  }
class C{  public static Geo[] LLaToGa(float[] lla){  return LLaToGa(lla,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.158 -0500",hash_original_method="9049C36C2683070F72629A8BA1D4C193",hash_generated_method="D8858A88BA20CC0A6A20C0B768D5BE33") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {}  }
class C{  @Description(summary="Run the Emma code coverage.") public void coverage(){  downloadTest();  downloadUsingMaven("ext/emma-2.0.5312.jar","emma","emma","2.0.5312","30a40933caf67d88d9e75957950ccf353b181ab7");  String cp="temp" + File.pathSeparator + "bin"+ File.pathSeparator+ "ext/emma-2.0.5312.jar"+ File.pathSeparator+ "ext/postgresql-9.4.1209.jre6.jar"+ File.pathSeparator+ "ext/servlet-api-3.1.0.jar"+ File.pathSeparator+ "ext/lucene-core-3.6.2.jar"+ File.pathSeparator+ "ext/h2mig_pagestore_addon.jar"+ File.pathSeparator+ "ext/org.osgi.core-4.2.0.jar"+ File.pathSeparator+ "ext/org.osgi.enterprise-4.2.0.jar"+ File.pathSeparator+ "ext/jts-core-1.14.0.jar"+ File.pathSeparator+ "ext/slf4j-api-1.6.0.jar"+ File.pathSeparator+ "ext/slf4j-nop-1.6.0.jar"+ File.pathSeparator+ javaToolsJar;  execJava(args("-Xmx128m","-XX:-UseSplitVerifier","-cp",cp,"emma","run","-cp","temp","-sp","src/main","-r","html,txt","-ix","-org.h2.test.*,-org.h2.dev.*," + "-org.h2.jaqu.*,-org.h2.mode.*,-org.h2.server.pg.*","org.h2.test.TestAll"));}  }
class C{  public OpenAction(final GuiComponent guiComponent){  super("Open...");  if (guiComponent == null) {    throw new IllegalArgumentException("component must not be null");  }  putValue(SMALL_ICON,ResourceManager.getImageIcon("Open.png"));  this.putValue(this.ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_O,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(SHORT_DESCRIPTION,"Open a new component");  this.guiComponent=guiComponent;}  }
class C{  FIRTypeI(int numBands,int nHalf){  super(numBands,nHalf + 1,2 * nHalf + 1);}  }
class C{  protected TInterfaceImpl(){  super();}  }
class C{  protected void handleAppendResponseFailure(MemberState member,AppendRequest request,Throwable error){  updateHeartbeatTime(member,error);  super.handleAppendResponseFailure(member,request,error);}  }
class C{  public LinkedHashMap(){  super();  accessOrder=false;}  }
class C{  protected void addSeparator(){  MENU.addSeparator();}  }
class C{  public static double sigmaToGamma(double sigma){  if (sigma <= 0 || Double.isNaN(sigma) || Double.isInfinite(sigma))   throw new IllegalArgumentException("sigma must be positive, not " + sigma);  return 1 / (2 * sigma * sigma);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  long seedVal;  seedVal=(long)fields.get("seed",-1L);  if (seedVal < 0)   throw new java.io.StreamCorruptedException("Random: invalid seed");  seed=new AtomicLong(seedVal);  nextNextGaussian=fields.get("nextNextGaussian",0.0);  haveNextNextGaussian=fields.get("haveNextNextGaussian",false);}  }
class C{  public InputStream fetchFileSystemUsageStats(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating filesystem usage query");  InputStream iStream=null;  try {    QueryStats queryStats=new QueryStats();    FileSystemUsageSet fsUsageSet=new FileSystemUsageSet();    queryStats.setFileSystemUsage(fsUsageSet);    iStream=_vnxFileInputRequestBuilder.getSingleQueryStatsPacket(queryStats);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for fileSystem usage info",jaxbException.getCause());  }  return iStream;}  }
class C{  public static double ellipsoidalDistance(LatLon p1,LatLon p2,double equatorialRadius,double polarRadius){  final double F=(equatorialRadius - polarRadius) / equatorialRadius;  final double R=1.0 - F;  final double EPS=0.5E-13;  if (p1 == null || p2 == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double GLAT1=p1.getLatitude().radians;  double GLAT2=p2.getLatitude().radians;  double TU1=R * Math.sin(GLAT1) / Math.cos(GLAT1);  double TU2=R * Math.sin(GLAT2) / Math.cos(GLAT2);  double CU1=1. / Math.sqrt(TU1 * TU1 + 1.);  double SU1=CU1 * TU1;  double CU2=1. / Math.sqrt(TU2 * TU2 + 1.);  double S=CU1 * CU2;  double BAZ=S * TU2;  double FAZ=BAZ * TU1;  double GLON1=p1.getLongitude().radians;  double GLON2=p2.getLongitude().radians;  double X=GLON2 - GLON1;  double D, SX, CX, SY, CY, Y, SA, C2A, CZ, E, C;  int iterCount=0;  do {    SX=Math.sin(X);    CX=Math.cos(X);    TU1=CU2 * SX;    TU2=BAZ - SU1 * CU2 * CX;    SY=Math.sqrt(TU1 * TU1 + TU2 * TU2);    CY=S * CX + FAZ;    Y=Math.atan2(SY,CY);    SA=S * SX / SY;    C2A=-SA * SA + 1.;    CZ=FAZ + FAZ;    if (C2A > 0.) {      CZ=-CZ / C2A + CY;    }    E=CZ * CZ * 2. - 1.;    C=((-3. * C2A + 4.) * F + 4.) * C2A * F / 16.;    D=X;    X=((E * CY * C + CZ) * SY * C + Y) * SA;    X=(1. - C) * X * F + GLON2 - GLON1;    ++iterCount;  } while (Math.abs(D - X) > EPS && iterCount <= 10);  X=Math.sqrt((1. / R / R - 1.) * C2A + 1.) + 1.;  X=(X - 2.) / X;  C=1. - X;  C=(X * X / 4. + 1.) / C;  D=(0.375 * X * X - 1.) * X;  X=E * CY;  S=1. - E - E;  S=((((SY * SY * 4. - 3.) * S * CZ* D / 6. - X) * D / 4. + CZ) * SY * D + Y) * C * equatorialRadius* R;  return S;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:53.340 -0500",hash_original_method="17FDCF259E4D17E2ACC4CF1446DF5669",hash_generated_method="D90BD738D4964C7B89299F008DECB9AE") public NeighboringCellInfo(Parcel in){  mRssi=in.readInt();  mLac=in.readInt();  mCid=in.readInt();  mPsc=in.readInt();  mNetworkType=in.readInt();}  }
class C{  private void assertVatRates(VatRateDetails result,BigDecimal defaultVatRate,BigDecimal countryVatRate,BigDecimal customerVatRate){  assertNotNull(result);  assertEquals(defaultVatRate,result.getDefaultVatRate());  assertEquals(countryVatRate,result.getCountryVatRate());  assertEquals(customerVatRate,result.getCustomerVatRate());}  }
class C{  public static void createDirectories(String dir){  if (dir != null) {    if (exists(dir)) {      if (!isDirectory(dir)) {        createDirectory(dir);      }    } else {      String parent=getParent(dir);      createDirectories(parent);      createDirectory(dir);    }  }}  }
class C{  private S2Edge randomEdgeCrossingCap(double maxLengthMeters,S2Cap cap){  S2Point edgeCenter=samplePoint(cap);  S2Cap edgeCap=S2Cap.fromAxisAngle(edgeCenter,S1Angle.radians(maxLengthMeters / S2LatLng.EARTH_RADIUS_METERS / 2));  S2Point p1=samplePoint(edgeCap);  S2Point p2=samplePoint(edgeCap);  return new S2Edge(p1,p2);}  }
class C{  private WriteRequest(GridNioEmbeddedFuture<Object> fut,ByteBuffer buf){  this.fut=fut;  this.buf=buf;}  }
class C{  static Source populateSource(Source s,long fileTime,VirtualFile pathRoot,String relativePath,String shortName,Object owner,boolean isInternal,boolean isRoot,boolean isDebuggable,Set<VirtualFile> includes,Map<VirtualFile,Long> includeTimes,LocalLogger logger){  assert s != null;  s.fileTime=fileTime;  s.pathRoot=pathRoot;  s.relativePath=relativePath;  s.shortName=shortName;  s.owner=owner;  s.isInternal=isInternal;  s.isRoot=isRoot;  s.isDebuggable=isDebuggable;  s.fileIncludeTimes.putAll(includeTimes);  s.logger=logger;  return s;}  }
class C{  private void recoverInternal(String streamIdentifier) throws IOException {  checkClosedOrInError("recoverInternal");  BKLogWriteHandler ledgerHandler=createWriteHandler(true);  try {    FutureUtils.result(ledgerHandler.recoverIncompleteLogSegments());  }  finally {    Utils.closeQuietly(ledgerHandler);  }}  }
class C{  public RestStatus status(){  return RestStatus.OK;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.DISPLAY_COLOR___ANONYMOUS_DISPLAY_COLOR_11:    return anonymous_displayColor_1_1 != null && !anonymous_displayColor_1_1.isEmpty();case UmplePackage.DISPLAY_COLOR___COLOR_VALUE_1:  return COLOR_VALUE_1_EDEFAULT == null ? colorValue_1 != null : !COLOR_VALUE_1_EDEFAULT.equals(colorValue_1);}return super.eIsSet(featureID);}  }
class C{  private long test(){  System.out.println("");  long totalStart=System.currentTimeMillis();  long start=System.currentTimeMillis();  try {    m_conn=DriverManager.getConnection(m_jdbcURL,m_uid,m_pwd);  } catch (  SQLException ex) {    System.err.println("Test get Connection: " + ex);    return -1;  }  long end=System.currentTimeMillis();  System.out.println("(A) Get Connection = " + (end - start) + "ms");  try {    start=System.currentTimeMillis();    Statement stmt=m_conn.createStatement();    end=System.currentTimeMillis();    System.out.println("(B) Create Statement = " + (end - start) + "ms");    start=System.currentTimeMillis();    ResultSet rs=stmt.executeQuery(m_sql);    end=System.currentTimeMillis();    System.out.println("(C) Execute Query = " + (end - start) + "ms");    int no=0;    start=System.currentTimeMillis();    while (rs.next()) {      int i=rs.getInt("AD_Client_ID");      String s=rs.getString("Name");      i+=s.length();      no++;    }    end=System.currentTimeMillis();    System.out.println("(D) Read ResultSet = " + (end - start) + "ms - per 10 rows "+ ((end - start) / (no / 10))+ "ms");    start=System.currentTimeMillis();    rs.close();    end=System.currentTimeMillis();    System.out.println("(E) Close ResultSet = " + (end - start) + "ms");    start=System.currentTimeMillis();    stmt.close();    end=System.currentTimeMillis();    System.out.println("(F) Close Statement = " + (end - start) + "ms");  } catch (  SQLException e) {    System.err.println("Test: " + e);  }  start=System.currentTimeMillis();  try {    if (m_conn != null)     m_conn.close();  } catch (  SQLException ex) {    System.err.println("Test close Connection: " + ex);  }  end=System.currentTimeMillis();  System.out.println("(G) Close Connection = " + (end - start) + "ms");  long totalEnd=System.currentTimeMillis();  System.out.println("Total Test = " + (totalEnd - totalStart) + "ms");  return (totalEnd - totalStart);}  }
class C{  public static Tuple min(Iterator tuples,String field){  return min(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  @Override public void V(final Object ex,final FormObject formObj,final int actionID){  if (showMethods) {    System.out.println("DefaultActionHandler.V()");  }  javascript.execute(formObj,PdfDictionary.V,actionID,getKeyPressed(ex));}  }
class C{  public VOLocalizedText(String locale,String text){  this.locale=locale;  this.text=text;}  }
class C{  void unsubscribe(final String[] topic,String invocationContext,String activityToken){  service.traceDebug(TAG,"unsubscribe({" + topic + "},{"+ invocationContext+ "}, {"+ activityToken+ "})");  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.UNSUBSCRIBE_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.unsubscribe(topic,invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError("subscribe",NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }}  }
class C{  public static <T extends SabresObject>void deleteAll(List<T> objects) throws SabresException {  final Sabres sabres=Sabres.self();  sabres.open();  sabres.beginTransaction();  try {    for (    T o : objects) {      o.deleteInTransaction(sabres);    }    sabres.setTransactionSuccessful();  }  finally {    sabres.endTransaction();    sabres.close();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Builder superscript(){  this.superscript=true;  return this;}  }
class C{  public void testAndNotPosPosFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=1;  int bSign=1;  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.andNot(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private DLockQueryProcessor(DM dm,InternalDistributedMember grantor,String serviceName){  super(dm,grantor);}  }
class C{  public TXRemoteCommitMessage(){}  }
class C{  public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isNominal()) {        ((AddValues)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  public void writes(int writes){  this.writes=writes;}  }
class C{  private static void initializeTimeZoneAndStartOfToday() throws AdeException {synchronized (LinuxSyslog3164ParserBase.class) {    if (END_OF_TODAY == null) {      final IAdeConfigProperties adeConfig=Ade.getAde().getConfigProperties();      final TimeZone timeZone=adeConfig.getInputTimeZone();      final TimeZone outputTimezone=adeConfig.getOutputTimeZone();      INPUT_TIME_ZONE=DateTimeZone.forOffsetMillis(timeZone.getRawOffset());      OUTPUT_TIME_ZONE=DateTimeZone.forOffsetMillis(outputTimezone.getRawOffset());      END_OF_TODAY=DateTime.now();      END_OF_TODAY=END_OF_TODAY.withZone(OUTPUT_TIME_ZONE);      END_OF_TODAY=END_OF_TODAY.plusDays(1);      END_OF_TODAY=END_OF_TODAY.withTimeAtStartOfDay();    }  }}  }
class C{  private boolean closeTab(Tab tabToClose,boolean animate,boolean uponExit,boolean canUndo,boolean notify){  if (tabToClose == null) {    assert false : "Tab is null!";    return false;  }  if (!mTabs.contains(tabToClose)) {    assert false : "Tried to close a tab from another model!";    return false;  }  canUndo&=supportsPendingClosures();  startTabClosure(tabToClose,animate,uponExit,canUndo);  if (notify && canUndo) {    for (    TabModelObserver obs : mObservers)     obs.tabPendingClosure(tabToClose);  }  if (!canUndo)   finalizeTabClosure(tabToClose);  return true;}  }
class C{  public SystemIsRunningException(){  super();}  }
class C{  private void deleteFile(){  FileFactory.FileType fileType=FileFactory.getFileType(this.filePath);  CarbonFile carbonFile=FileFactory.getCarbonFile(this.filePath,fileType);  carbonFile.delete();}  }
class C{  public ApplicationFrame(){  initComponents();  addLayeredValidator();  addValidations();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.221 -0400",hash_original_method="4A800992C7207640FD66622294F7F61C",hash_generated_method="7F9D886B9FFC59B6FABB98A7972F3809") public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public Boolean isDestroyWithParent(){  return destroyWithParent;}  }
class C{  @Override protected void dispatchDraw(final Canvas canvas){  super.dispatchDraw(canvas);  if (mHoverCell != null) {    mHoverCell.draw(canvas);  }}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  @Override public String toString(){  final StringBuffer sb=new StringBuffer("[LockGrantorId: ");  sb.append("lockGrantorMember=").append(this.lockGrantorMember);  sb.append(", lockGrantorVersion=").append(this.lockGrantorVersion);  sb.append(", lockGrantorSerialNumber=").append(this.lockGrantorSerialNumber);  sb.append("]");  return sb.toString();}  }
class C{  private void createJournalEntriesForDisbursements(final LoanDTO loanDTO,final LoanTransactionDTO loanTransactionDTO,final Office office){  final Long loanProductId=loanDTO.getLoanProductId();  final Long loanId=loanDTO.getLoanId();  final String currencyCode=loanDTO.getCurrencyCode();  final String transactionId=loanTransactionDTO.getTransactionId();  final Date transactionDate=loanTransactionDTO.getTransactionDate();  final BigDecimal disbursalAmount=loanTransactionDTO.getAmount();  final boolean isReversed=loanTransactionDTO.isReversed();  final Long paymentTypeId=loanTransactionDTO.getPaymentTypeId();  if (loanTransactionDTO.isLoanToLoanTransfer()) {    this.helper.createAccrualBasedJournalEntriesAndReversalsForLoan(office,currencyCode,ACCRUAL_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),FINANCIAL_ACTIVITY.ASSET_TRANSFER.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,disbursalAmount,isReversed);  } else   if (loanTransactionDTO.isAccountTransfer()) {    this.helper.createAccrualBasedJournalEntriesAndReversalsForLoan(office,currencyCode,ACCRUAL_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),FINANCIAL_ACTIVITY.LIABILITY_TRANSFER.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,disbursalAmount,isReversed);  } else {    this.helper.createAccrualBasedJournalEntriesAndReversalsForLoan(office,currencyCode,ACCRUAL_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.FUND_SOURCE.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,disbursalAmount,isReversed);  }}  }
class C{  public boolean isReseller(){  return isRoleAvailable(getSelectedOrganization(),OrganizationRoleType.RESELLER);}  }
class C{  private void heapifyUp(int index){  int current=index;  int parent=index / 2;  while (parent > 0 && counts[parent] < counts[current]) {    swap(parent,current);    current=parent;    parent=parent / 2;  }}  }
class C{  public void speakInstruction(int resId,boolean repeat,Object... formatArgs){  stopRepeating();  lockOrientation();  setTouchGuardActive(true);  speakInternal(resId,formatArgs);  if (repeat) {    mResourceIdToRepeat=resId;    mRepeatedFormatArgs=formatArgs;  } else {    mResourceIdToRepeat=0;  }}  }
class C{  public static void disposeOf(final Disposable disposable){  if (disposable != null) {    disposable.dispose();  }}  }
class C{  public void generate(Projection p,long time){  TemporalPoint tp=setPosition(time);  if (tp == null) {    return;  }  Point2D pt=tp.getLocation();switch (renderType) {case RENDERTYPE_XY:    setX((int)pt.getX());  setY((int)pt.getY());break;default :setLat(pt.getY());setLon(pt.getX());}super.generate(p);}  }
class C{  private Unit copyBlock(Block block){  Map<Unit,List> traps=getTraps();  Set<Trap> openedTraps=new HashSet<Trap>();  Map<Trap,Trap> copiedTraps=new HashMap<Trap,Trap>();  Chain unitChain=body.getUnits();  Unit tail=block.getTail();  Unit immediateSucc=(Unit)unitChain.getSuccOf(tail);  Unit newGoto=insertGotoAfter(tail,immediateSucc);  Unit last=newGoto;  boolean first=true;  Unit copiedHead=null;  for (Unit currentUnit=block.getHead(); currentUnit != newGoto; currentUnit=(Unit)unitChain.getSuccOf(currentUnit)) {    last=insertCloneAfter(unitChain,last,currentUnit);    if (first) {      first=false;      copiedHead=last;    }    List currentTraps=traps.get(currentUnit);    if (currentTraps != null) {      Iterator trapIt=currentTraps.iterator();      while (trapIt.hasNext()) {        Trap trap=(Trap)trapIt.next();        if (trap.getBeginUnit() == currentUnit) {          Trap copiedTrap=(Trap)trap.clone();          copiedTrap.setBeginUnit(last);          copiedTraps.put(trap,copiedTrap);          openedTraps.add(copiedTrap);          body.getTraps().insertAfter(copiedTrap,trap);        }        if (trap.getEndUnit() == currentUnit) {          Trap copiedTrap=copiedTraps.get(trap);          if (copiedTrap == null) {            copiedTrap=(Trap)trap.clone();            copiedTrap.setBeginUnit(copiedHead);            body.getTraps().insertAfter(copiedTrap,trap);          } else {            openedTraps.remove(copiedTrap);          }          copiedTrap.setEndUnit(last);        }      }    }  }  Iterator<Trap> openedIterator=openedTraps.iterator();  while (openedIterator.hasNext()) {    openedIterator.next().setEndUnit(last);  }  return copiedHead;}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void updateDouble(int columnIndex,double x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDouble(" + columnIndex + ", "+ x+ "d);");    }    update(columnIndex,ValueDouble.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static Accounts run(AdSense adsense,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all AdSense accounts");  System.out.println("=================================================================");  String pageToken=null;  Accounts accounts=null;  do {    accounts=adsense.accounts().list().setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (accounts.getItems() != null && !accounts.getItems().isEmpty()) {      for (      Account account : accounts.getItems()) {        System.out.printf("Account with ID \"%s\" and name \"%s\" was found.\n",account.getId(),account.getName());      }    } else {      System.out.println("No accounts found.");    }    pageToken=accounts.getNextPageToken();  } while (pageToken != null);  System.out.println();  return accounts;}  }
class C{  public boolean hasReturn3y(){  return getReturn3y() != null;}  }
class C{  public void store(int val){  SimulatedMemory.setInt(this,val);}  }
class C{  public void rotateAround(Vector3 axis,double angle,boolean append){  if (append) {    mTmpOrientation.fromAngleAxis(axis,angle);    mOrientation.multiply(mTmpOrientation);  } else {    mOrientation.fromAngleAxis(axis,angle);  }  markModelMatrixDirty();}  }
class C{  private void updateAssociatedOrganisationsMetadata(){  try {    for (    Map.Entry<String,Organisation> entry : registration.getAssociatedOrganisations().entrySet()) {      Organisation o=entry.getValue();      updateOrganisationMetadata(o);      registration.getAssociatedOrganisations().put(entry.getKey(),o);    }    Organisation hostingOrganisation=registration.getHostingOrganisation();    if (hostingOrganisation != null) {      updateOrganisationMetadata(hostingOrganisation);    }    save();  } catch (  IOException e) {    log.error("A problem occurred saving ");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.744 -0500",hash_original_method="2ABCB1D0790925DD46BDC5BB8C03FD73",hash_generated_method="1A95363C7BC3159ED8353369C2AEC0BA") public Reader retrieveArticle() throws IOException {  return retrieveArticle(null);}  }
class C{  public double value(){  return _map._values[_index];}  }
class C{  public OperationNotPermittedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public pre removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public boolean isValid(){  return m_valid;}  }
class C{  protected Container createButtonArea(){  final Container bottom=super.createButtonArea();  bottom.setLayout(new AquaButtonAreaLayout(true,kDialogSmallPadding));  return bottom;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void stop(){  final String methodName="stop";  stopping=true;synchronized (lifecycle) {    log.fine(CLASS_NAME,methodName,"850");    if (running) {      running=false;      receiving=false;      closeOutputStream();      if (!Thread.currentThread().equals(receiverThread)) {        try {          receiverThread.join();        } catch (        InterruptedException ex) {        }      }    }  }  receiverThread=null;  log.fine(CLASS_NAME,methodName,"851");}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent event){  lastY=event.getY();  if (event.getAction() == MotionEvent.ACTION_DOWN) {    isDown=true;  }  return true;}  }
class C{  public boolean hasHeader(){  return hasExtension(Header.class);}  }
class C{  @Override public void keyReleased(GlobalKeyEvent event){}  }
class C{  @Override public View onCreateFloatView(int position){  View v=mListView.getChildAt(position + mListView.getHeaderViewsCount() - mListView.getFirstVisiblePosition());  if (v == null) {    return null;  }  v.setPressed(false);  v.setDrawingCacheEnabled(true);  final Bitmap drawingCache=v.getDrawingCache();  if (drawingCache != null) {    mFloatBitmap=Bitmap.createBitmap(drawingCache);    v.setDrawingCacheEnabled(false);    ImageView iv=new ImageView(mListView.getContext());    iv.setBackgroundColor(mFloatBGColor);    iv.setPadding(0,0,0,0);    iv.setImageBitmap(mFloatBitmap);    return iv;  } else {    v.setDrawingCacheEnabled(false);    return null;  }}  }
class C{  public Edge findEdge(Unit u,SootMethod callee){  Edge e=srcUnitToEdge.get(u);  while (e.srcUnit() == u && e.kind() != Kind.INVALID) {    if (e.tgt() == callee)     return e;    e=e.nextByUnit();  }  return null;}  }
class C{  private void onPostScrollToPosition(int pos){  if (pos < 0)   return;  checkLastSticky(pos);}  }
class C{  public void writeExif(Bitmap bmap,String exifOutFileName) throws FileNotFoundException, IOException {  if (bmap == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    bmap.compress(Bitmap.CompressFormat.JPEG,90,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  private void ensureSortedByValue(){  if (currentSortOrder != SORT_ORDER_BY_VALUE) {    Collections.sort(samples,VALUE_COMPARATOR);    currentSortOrder=SORT_ORDER_BY_VALUE;  }}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  public static _BuildQueryOrder fromString(final String value) throws SOAPSerializationException {  return (_BuildQueryOrder)Enumeration.fromString(value,_BuildQueryOrder.VALUES_TO_INSTANCES);}  }
class C{  static boolean isElementName(Element element,String name){  return element.getName().equals(name);}  }
class C{  public void buildGoogleApiClient(Activity activity){  if (mGoogleApiClient != null) {    return;  }  Utils.logDebug(TAG,"Building the Google Api Client.");  mActivity=activity;  mGoogleApiClient=new GoogleApiClient.Builder(activity,this,this).addApi(Fitness.API).addScope(Fitness.SCOPE_ACTIVITY_READ).addScope(Fitness.SCOPE_LOCATION_READ).addApi(Games.API).addScope(Games.SCOPE_GAMES).build();}  }
class C{  public static String decodeCssIdentifier(CharSequence ident){  StringBuilder sb=null;  int pos=0;  for (int i=0, n=ident.length(); i < n; ) {    if (ident.charAt(i) == '\\') {      if (sb == null) {        sb=new StringBuilder();      }      sb.append(ident,pos,i);      int codepoint=0;      while (++i < n && isHexChar(ident.charAt(i))) {        char ch=ident.charAt(i);        codepoint<<=4;        if (ch >= '0' && ch <= '9') {          codepoint|=ch - '0';        } else         if (ch >= 'a' && ch <= 'f') {          codepoint|=ch + 10 - 'a';        } else {          codepoint|=ch + 10 - 'A';        }      }      sb.appendCodePoint(codepoint < Character.MAX_CODE_POINT ? codepoint : 0xfffd);      if (i < n && isSpaceChar(ident.charAt(i))) {        ++i;      }      pos=i;    } else {      ++i;    }  }  if (sb == null) {    return ident.toString();  }  return sb.append(ident,pos,ident.length()).toString();}  }
class C{  @SuppressWarnings("fallthrough") private void nonResident(){switch (status) {case HOT:    hotSize--;case COLD:  size--;default :}status=Status.NONRES;}  }
class C{  public void onHealthChannelStateChange(BluetoothHealthAppConfiguration config,BluetoothDevice device,int prevState,int newState,ParcelFileDescriptor fd,int channelId){  Log.d(TAG,"onHealthChannelStateChange: " + config + "Device: "+ device+ "prevState:"+ prevState+ "newState:"+ newState+ "ParcelFd:"+ fd+ "ChannelId:"+ channelId);}  }
class C{  public AbstractValidatorImplementation(final Context context,final int resourceId){  super(context,resourceId);}  }
class C{  @Override public Dimension minimumLayoutSize(Container target){  Dimension minimum=layoutSize(target,false);  minimum.width=minimum.width - getHgap() - 1;  return minimum;}  }
class C{  public Object clone(){  DoubleBuffer copy=(DoubleBuffer)super.clone();  if (this.values != null)   copy.values=copy.values.copy();  return copy;}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  if (fDebug) {    System.out.println("number of triplets = " + numberTriplets);  }  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    if (fDebug) {      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);    }    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    if (fDebug) {      System.out.println("val2 = " + val2);      System.out.println("k4   = " + (k << 4));      System.out.println("vak  = " + (val2 | (k << 4)));    }    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    if (fDebug) {      System.out.println("b1=" + b1);      System.out.println("b1<<2 = " + (b1 >> 2));    }    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public void clear(){  errorViewer.setDocument(EMPTY_DOCUMENT());  setTraceInput(new TLCError());  traceExplorerComposite.getTableViewer().setInput(new Vector<TLCState>());  traceExplorerComposite.changeExploreEnablement(false);  valueViewer.setInput(EMPTY_DOCUMENT());}  }
class C{  @VisibleForTesting boolean checkIsSyncAllowed(Context context){  return FeatureUtilities.canAllowSync(context) && !SigninManager.get(context).isSigninDisabledByPolicy();}  }
class C{  private boolean probeCodeBaseForResource(DiscoveredCodeBase discoveredCodeBase,String resourceName){  ICodeBaseEntry resource=discoveredCodeBase.getCodeBase().lookupResource(resourceName);  return resource != null;}  }
class C{  private static DataSource createDataSource(final MimePart part) throws MessagingException, IOException {  final DataHandler dataHandler=part.getDataHandler();  final DataSource dataSource=dataHandler.getDataSource();  final String contentType=getBaseMimeType(dataSource.getContentType());  final byte[] content=MimeMessageParser.getContent(dataSource.getInputStream());  final ByteArrayDataSource result=new ByteArrayDataSource(content,contentType);  final String dataSourceName=getDataSourceName(part,dataSource);  result.setName(dataSourceName);  return result;}  }
class C{  public NodeTable(CoverageTable cov,TileDirectory tile,boolean isEntityNode) throws FormatException {  super(cov,tile,isEntityNode ? Constants.endTableName : Constants.cndTableName);  this.isEntityNode=isEntityNode;  if ((coordColumn=whatColumn(Constants.ND_COORDINATE)) == -1) {    throw new FormatException("nodetable couldn't get " + Constants.ND_COORDINATE + " column");  }  firstEdgeColumn=whatColumn(Constants.ND_FIRSTEDGE);  containingFaceColumn=whatColumn(Constants.ND_CONTAININGFACE);}  }
class C{  @Override public int hashCode(){  return (this.data != null ? this.data.hashCode() : 0);}  }
class C{  public void remove(Component comp){  if (comp == rootPane) {    super.remove(comp);  } else {    getContentPane().remove(comp);  }}  }
class C{  public void test_syntax_update_01() throws MalformedQueryException {  final String query="BASE <http://example/base#>\n" + "PREFIX : <http://example/>\n" + "LOAD <http://example.org/faraway>";  parseOperation(query);}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}"+ "/subPartition2Values/{subPartition2Value}"+ "/businessObjectDataVersions/{businessObjectDataVersion}/businessObjectDataAttributeNames/{businessObjectDataAttributeName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_PUT) public BusinessObjectDataAttribute updateBusinessObjectDataAttribute(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@PathVariable("businessObjectDataAttributeName") String businessObjectDataAttributeName,@RequestBody BusinessObjectDataAttributeUpdateRequest request){  return businessObjectDataAttributeService.updateBusinessObjectDataAttribute(new BusinessObjectDataAttributeKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value),businessObjectDataVersion,businessObjectDataAttributeName),request);}  }
class C{  public void addHelpMenu(String ref,boolean direct){  JMenuBar bar=getJMenuBar();  if (bar == null) {    bar=new JMenuBar();  }  bar.add(new WindowMenu(this));  jmri.util.HelpUtil.helpMenu(bar,ref,direct);  setJMenuBar(bar);}  }
class C{  private void initLocations(){  locations.add(new Location("0_semos_mountain_n_w2",10,65,116));  locations.add(new Location("0_ados_outside_nw",10,52,39));  locations.add(new Location("0_kirdneh_city",15,63,26));  locations.add(new Location("0_fado_forest",20,66,35));  locations.add(new Location("0_orril_castle",20,62,75));  locations.add(new Location("int_ados_haunted_house",25,4,27));  locations.add(new Location("-2_orril_dungeon",25,106,21));  locations.add(new Location("-1_semos_mine_nw",30,22,75));  locations.add(new Location("0_athor_island",30,77,73));  locations.add(new Location("-1_ados_wall",30,91,62));  locations.add(new Location("-2_kotoch_entrance",30,20,111));  locations.add(new Location("0_nalwor_city",60,88,85));  locations.add(new Location("-1_semos_yeti_cave",60,13,39));  locations.add(new Location("-2_ados_outside_nw",70,28,5));  locations.add(new Location("0_ados_mountain_n2",70,52,28));  locations.add(new Location("1_kikareukin_cave",70,18,97));  locations.add(new Location("-6_kanmararn_city",70,33,52));  locations.add(new Location("-2_orril_lich_palace",70,67,118));  locations.add(new Location("-2_orril_dwarf_mine",70,50,40));  locations.add(new Location("0_amazon_island_nw",90,30,30));  locations.add(new Location("-1_ados_abandoned_keep",90,3,103));  locations.add(new Location("-1_fado_great_cave_n_e2",120,113,19));  locations.add(new Location("int_kalavan_castle_basement",150,30,103));  locations.add(new Location("int_oni_palace_1",150,28,28));  locations.add(new Location("-4_ados_abandoned_keep",150,11,27));  locations.add(new Location("-2_semos_mine_w2",150,22,39));  locations.add(new Location("-1_nalwor_drows_tunnel_n",170,58,44));  locations.add(new Location("-6_ados_abandoned_keep",170,15,19));  locations.add(new Location("int_mithrilbourgh_stores",170,6,5));  locations.add(new Location("hell",200,66,77));  locations.add(new Location("-1_fado_great_cave_w2",200,90,57));  locations.add(new Location("4_kikareukin_cave",200,10,10));  locations.add(new Location("5_kikareukin_cave",200,31,100));  locations.add(new Location("-2_semos_mine_e2",200,4,5));  locations.add(new Location("-1_ados_outside_w",200,33,30));  locations.add(new Location("6_kikareukin_islands",200,10,10));}  }
class C{  public static String buildSelectorFromElementsAndAttributeValue(String elementName,String attributeName,String attributeValue){  StringBuilder strb=new StringBuilder();  strb.append(elementName);  strb.append(OPEN_BRACKET);  strb.append(attributeName);  strb.append(EQUAL);  strb.append(attributeValue);  strb.append(CLOSE_BRACKET);  return strb.toString();}  }
class C{  @Override protected boolean handleInterval(final RPEntity entity){  return doDamage(entity);}  }
class C{  @Override public DummyProjectBuilder withVisibility(String visibility){  dummyProject.setVisibility(visibility);  return this;}  }
class C{  private String stripSessionID(final String uri){  return uri.replaceFirst("(?i)(;jsessionid.*)","");}  }
class C{  public String runCommand(String[] args){  if ((args != null) && (args.length > 0) && commandsHash.containsKey(args[0])) {    return commandsHash.get(args[0]).run(args);  }  return "Unknown Client Command.";}  }
class C{  private void downcastAbstractEntities(QueryObject<?> queryObject) throws IllegalQueryStateException {  List<Entity> loadedEntities=entityLoaders.getEntitiesForQueryObject(queryObject);  for (  Entity e : loadedEntities) {    if (e.getEntityType().isAbstract()) {      LOG.debug("Attempting to downcast abstract entity {}",e);      downcastEntity(e);    }  }  for (  QJoin join : queryObject.getJoins()) {    downcastAbstractEntities(join.getTo());  }}  }
class C{  public static String random(final int count,final int start,final int end,final boolean letters,final boolean numbers){  return random(count,start,end,letters,numbers,null,RANDOM);}  }
class C{  public Vertex createPronoun(String text,Vertex meaning,Network network,Primitive type){  Vertex word=createWord(text,meaning,false,network,Primitive.PRONOUN,null,type,null,null);  return word;}  }
class C{  public static List<SootMethod> findPossibleInheritedMethods(SootClass clz,String name,String returnType,int numArgs){  Hierarchy hierarchy=Scene.v().getActiveHierarchy();  LinkedList<SootMethod> methods=new LinkedList<SootMethod>();  List<SootClass> classes=new LinkedList<SootClass>();  if (!clz.isInterface())   classes.addAll(hierarchy.getSuperclassesOfIncluding(clz));  classes.addAll(clz.getInterfaces());  for (  SootClass parent : classes) {    for (    SootMethod method : parent.getMethods()) {      if (method.getName().equals(name) && method.getParameterCount() == numArgs && method.getReturnType().toString().equals(returnType))       methods.add(method);    }  }  return methods;}  }
class C{  public void printElements(){  for (int i=getNext(-1); i != -1; i=getNext(i)) {    System.err.print(i + " ");  }  System.err.println();  for (int i=0; i < m_indicators.length; i++) {    if (m_indicators[i]) {      System.err.print(i + " ");    }  }  System.err.println();  System.err.println(m_number);}  }
class C{  @DELETE @Path("/login-failed-ips/{ip}") @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN}) public Response removeLoginFailedIP(@PathParam("ip") String ip){  if (StringUtils.isEmpty(ip)) {    throw APIException.badRequests.propertyIsNullOrEmpty();  }  if (!_invLoginManager.isClientIPExist(ip)) {    throw APIException.badRequests.clientIpNotExist();  }  _invLoginManager.removeInvalidRecord(ip);  return Response.ok().build();}  }
class C{  public void invalidate(){  this.authScheme=null;  this.authScope=null;  this.credentials=null;}  }
class C{  public static Value noExceptionThrowing(Value val){  if (val == null)   return null;  if (!throwsException(val))   return val; else   return null;}  }
class C{  @Interruptible public static void addPhantomReference(PhantomReference<?> obj,Object referent){  ReferenceProcessor.addPhantomCandidate(obj,ObjectReference.fromObject(referent));}  }
class C{  private void updateDisplayedMnemonicIndex(String text,int mnemonic){  setDisplayedMnemonicIndex(SwingUtilities.findDisplayedMnemonicIndex(text,mnemonic));}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof MBeanAttributeInfo))   return false;  MBeanAttributeInfo p=(MBeanAttributeInfo)o;  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getType(),getType()) && Objects.equals(p.getDescription(),getDescription())&& Objects.equals(p.getDescriptor(),getDescriptor())&& p.isReadable() == isReadable() && p.isWritable() == isWritable() && p.isIs() == isIs());}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  ElemAttributeSet eat=new ElemAttributeSet();  eat.setLocaterInfo(handler.getLocator());  try {    eat.setPrefixes(handler.getNamespaceSupport());  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }  eat.setDOMBackPointer(handler.getOriginatingNode());  setPropertiesFromAttributes(handler,rawName,attributes,eat);  handler.getStylesheet().setAttributeSet(eat);  ElemTemplateElement parent=handler.getElemTemplateElement();  parent.appendChild(eat);  handler.pushElemTemplateElement(eat);}  }
class C{  public SignatureVisitor visitReturnType(){  return this;}  }
class C{  static public PVector random2D(PApplet parent){  return random2D(null,parent);}  }
class C{  public String toString(String pattern,Locale locale) throws IllegalArgumentException {  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);}  }
class C{  public void addOverlay(Overlay overlay){  ParamChecks.nullNotPermitted(overlay,"overlay");  this.overlays.add(overlay);  overlay.addChangeListener(this);  repaint();}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public static TouchedChecker listTouched(List<String> touched){  return (null);}  }
class C{  boolean repliedNotGrantor(){  return this.replyCode == DLockQueryReplyMessage.NOT_GRANTOR;}  }
class C{  private boolean isCollection(Field field){  return Collection.class.isAssignableFrom(field.getType());}  }
class C{  public static <T>List<T> findAll(final Collection<T> collection,final Filter<T> filter){  final List<T> matches=new ArrayList<T>(collection.size());  for (  final T element : collection) {    if (filter.accept(element)) {      matches.add(element);    }  }  return matches;}  }
class C{  public void init() throws ServletException {}  }
class C{  private ExpressionRule(final Rule r){  super();  this.rule=r;}  }
class C{  private boolean checkIfContextSupportsExtension(GL10 gl,String extension){  String extensions=" " + gl.glGetString(GL10.GL_EXTENSIONS) + " ";  return extensions.indexOf(" " + extension + " ") >= 0;}  }
class C{  public void handleStatsRequest(GCPStatsDataHolder statsData){switch (statsData.stage) {case VM_DESC:    getVMDescription(statsData,StatsCollectionStage.PARENT_VM_DESC,StatsCollectionStage.CREDENTIALS);  break;case PARENT_VM_DESC:getParentVMDescription(statsData,StatsCollectionStage.CREDENTIALS);break;case CREDENTIALS:getParentAuth(statsData,StatsCollectionStage.PROJECT_ID);break;case PROJECT_ID:getProjectId(statsData,StatsCollectionStage.ACCESS_TOKEN);break;case ACCESS_TOKEN:try {getAccessToken(statsData,StatsCollectionStage.STATS);} catch (GeneralSecurityException|IOException e) {handleError(statsData,e);return;}break;case STATS:getStats(statsData,StatsCollectionStage.FINISHED);break;case ERROR:statsData.gcpStatsCollectionOperation.fail(statsData.error);AdapterUtils.sendFailurePatchToProvisioningTask(this,statsData.statsRequest.taskReference,statsData.error);break;case FINISHED:AdapterUtils.sendPatchToProvisioningTask(this,statsData.statsRequest.taskReference);break;default :String err=String.format("Unknown GCP stats collection stage %s ",statsData.stage.toString());logSevere(err);statsData.error=new IllegalStateException(err);statsData.gcpStatsCollectionOperation.fail(statsData.error);AdapterUtils.sendFailurePatchToProvisioningTask(this,statsData.statsRequest.taskReference,statsData.error);}}  }
class C{  public void loadClasses(){  SootConfig.loadAppClasses(getSrcClasses());  Set<String> modeledLibraryClzs=SootConfig.loadAppClasses(getLibClasses());}  }
class C{  @HLEFunction(nid=0x328F9E52,version=150,checkInsideInterrupt=true) public int sceKernelDeleteVTimer(@CheckArgument("checkVTimerID") int vtimerUid){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.remove(vtimerUid);  sceKernelVTimerInfo.delete();  return 0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public TSTLookup(){  this(null,null);}  }
class C{  public void add(double x,double y){  data.add(x);  data.add(y);  minx=Math.min(minx,x);  maxx=Math.max(maxx,x);  miny=Math.min(miny,y);  maxy=Math.max(maxy,y);}  }
class C{  public static boolean isClassFile(IJavaElement elt){  if (elt == null) {    return false;  }  return elt instanceof IClassFile || elt instanceof ICompilationUnit;}  }
class C{  public BinaryBufferedFile(String name) throws IOException {  this(name,4096);}  }
class C{  public String toOIDString(){  if (sOID == null) {    sOID="OID." + toString();  }  return sOID;}  }
class C{  public ContentStorage(ContentStorageBO contentStorageBO,List<GenericPackage> genericPackageList,List<EssenceContainerData> essenceContainerDataList){  this.contentStorageBO=contentStorageBO;  this.genericPackageList=Collections.unmodifiableList(genericPackageList);  this.essenceContainerDataList=Collections.unmodifiableList(essenceContainerDataList);}  }
class C{  public void keepBinary(boolean keepBinary){  setFlag(keepBinary,KEEP_BINARY_FLAG_MASK);}  }
class C{  public boolean isHoldCarsWithCustomLoadsEnabled(){  return _holdCustomLoads;}  }
class C{  public void connectToDevice(String address,boolean secure){  BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);  mChatService.connect(device,secure);}  }
class C{  protected boolean isTypeCompatible(CargoProject project){  boolean isMatching=false;  if (getType().equalsIgnoreCase(project.getPackaging()) || getType().equalsIgnoreCase("file")) {    isMatching=true;  } else   if (getType().equalsIgnoreCase("war") && project.getPackaging().equalsIgnoreCase(Deployable.UBERWAR)) {    isMatching=true;  } else   if (project.getPackaging().startsWith(Deployable.JBOSS) && getType().equalsIgnoreCase(project.getPackaging().substring(Deployable.JBOSS_STRIP))) {    isMatching=true;  }  return isMatching;}  }
class C{  private final void updateBuffer(int offset){  fBufferOffset=offset;  if (fBufferOffset + fBuffer.length > fRangeOffset + fRangeLength)   fBufferLength=fRangeLength - (fBufferOffset - fRangeOffset); else   fBufferLength=fBuffer.length;  try {    final String content=fDocument.get(fBufferOffset,fBufferLength);    content.getChars(0,fBufferLength,fBuffer,0);  } catch (  BadLocationException e) {  }}  }
class C{  public void prevCharacter(EditorState editorState){  int currentOffset=editorState.getCurrentOffset();  MathSequence currentField=editorState.getCurrentField();  if (currentOffset - 1 >= 0 && currentField.getArgument(currentOffset - 1) != null && currentField.getArgument(currentOffset - 1) instanceof MathContainer && ((MathContainer)currentField.getArgument(currentOffset - 1)).hasChildren()) {    MathComponent component=currentField.getArgument(currentOffset - 1);    lastField(editorState,(MathContainer)component);  } else   if (currentOffset > 0) {    editorState.decCurrentOffset();  } else {    prevField(editorState);  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X500Name || obj instanceof ASN1Sequence)) {    return false;  }  ASN1Primitive derO=((ASN1Encodable)obj).toASN1Primitive();  if (this.toASN1Primitive().equals(derO)) {    return true;  }  try {    return style.areEqual(this,new X500Name(ASN1Sequence.getInstance(((ASN1Encodable)obj).toASN1Primitive())));  } catch (  Exception e) {    return false;  }}  }
class C{  @Override public void run(){  amIActive=true;  String redHeader, greenHeader, blueHeader, intensityHeader, saturationHeader, hueHeader;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  redHeader=args[0];  greenHeader=args[1];  blueHeader=args[2];  intensityHeader=args[3];  hueHeader=args[4];  saturationHeader=args[5];  if (redHeader.isEmpty() || greenHeader.isEmpty() || blueHeader == null || intensityHeader.isEmpty() || hueHeader.isEmpty() || saturationHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal;    double r, g, b;    double i, s, h, m;    float progress;    WhiteboxRasterInfo red=new WhiteboxRasterInfo(redHeader);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(greenHeader);    if (green.getNumberRows() != rows || green.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(blueHeader);    if (blue.getNumberRows() != rows || blue.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    double redNoData=red.getNoDataValue();    double greenNoData=green.getNoDataValue();    double blueNoData=blue.getNoDataValue();    WhiteboxRaster intensity=new WhiteboxRaster(intensityHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    WhiteboxRaster hue=new WhiteboxRaster(hueHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    WhiteboxRaster saturation=new WhiteboxRaster(saturationHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    double overallMin=Math.min(Math.min(red.getDisplayMinimum(),green.getDisplayMinimum()),blue.getDisplayMinimum());    double overallMax=Math.max(Math.max(red.getDisplayMaximum(),green.getDisplayMaximum()),blue.getDisplayMaximum());    double range=overallMax - overallMin;    double[] dataRed, dataGreen, dataBlue;    for (row=0; row < rows; row++) {      dataRed=red.getRowValues(row);      dataGreen=green.getRowValues(row);      dataBlue=blue.getRowValues(row);      for (col=0; col < cols; col++) {        redVal=dataRed[col];        greenVal=dataGreen[col];        blueVal=dataBlue[col];        if ((redVal != redNoData) && (greenVal != greenNoData) && (blueVal != blueNoData)) {          r=(redVal - overallMin) / range;          if (r < 0) {            r=0;          }          if (r > 1) {            r=1;          }          g=(greenVal - overallMin) / range;          if (g < 0) {            g=0;          }          if (g > 1) {            g=1;          }          b=(blueVal - overallMin) / range;          if (b < 0) {            b=0;          }          if (b > 1) {            b=1;          }          m=Math.min(Math.min(r,g),b);          i=r + g + b;          if (i == 3) {            h=0;          } else           if (m == b) {            h=(g - b) / (i - 3 * b);          } else           if (m == r) {            h=(b - r) / (i - 3 * r) + 1;          } else {            h=(r - g) / (i - 3 * g) + 2;          }          if (h <= 1) {            s=(i - 3 * b) / i;          } else           if (h <= 2) {            s=(i - 3 * r) / i;          } else {            s=(i - 3 * g) / i;          }          intensity.setValue(row,col,i);          hue.setValue(row,col,h);          saturation.setValue(row,col,s);        } else {          intensity.setValue(row,col,redNoData);          hue.setValue(row,col,redNoData);          saturation.setValue(row,col,redNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    intensity.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    intensity.addMetadataEntry("Created on " + new Date());    intensity.close();    hue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    hue.addMetadataEntry("Created on " + new Date());    hue.close();    saturation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    saturation.addMetadataEntry("Created on " + new Date());    saturation.close();    red.close();    green.close();    blue.close();    returnData(intensityHeader);    returnData(hueHeader);    returnData(saturationHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public CollectMembersHelper(ContainerType<?> type,boolean includeImplicitSuperTypes,boolean includePolyfills,Predicate<TMember> filter){  super(type,includeImplicitSuperTypes,includePolyfills);  this.filter=filter == null ? null : filter;  nameAccessToMember=Maps.newLinkedHashMap();}  }
class C{  private boolean alreadyPresent(IDocument document,char ch,int position){  int pos=firstNonWhitespaceForward(document,position,fPartitioning,document.getLength());  try {    if (pos != -1 && document.getChar(pos) == ch)     return true;  } catch (  BadLocationException e) {  }  return false;}  }
class C{  public MChangeLog changeLog(String TrxName,int AD_ChangeLog_ID,int AD_Table_ID,int AD_Column_ID,int Record_ID,int AD_Client_ID,int AD_Org_ID,Object OldValue,Object NewValue,String event){  if (OldValue == null && NewValue == null)   return null;  if (OldValue != null && NewValue != null && OldValue.equals(NewValue))   return null;  MRole role=MRole.getDefault(getCtx(),false);  if (m_webStoreSession || MChangeLog.isLogged(AD_Table_ID) || (role != null && role.isChangeLog()))   ; else   return null;  log.finest("AD_ChangeLog_ID=" + AD_ChangeLog_ID + ", AD_Session_ID="+ getAD_Session_ID()+ ", AD_Table_ID="+ AD_Table_ID+ ", AD_Column_ID="+ AD_Column_ID+ ": "+ OldValue+ " -> "+ NewValue);  try {    MChangeLog cl=new MChangeLog(getCtx(),AD_ChangeLog_ID,TrxName,getAD_Session_ID(),AD_Table_ID,AD_Column_ID,Record_ID,AD_Client_ID,AD_Org_ID,OldValue,NewValue,event);    if (cl.save())     return cl;  } catch (  Exception e) {    log.log(Level.SEVERE,"AD_ChangeLog_ID=" + AD_ChangeLog_ID + ", AD_Session_ID="+ getAD_Session_ID()+ ", AD_Table_ID="+ AD_Table_ID+ ", AD_Column_ID="+ AD_Column_ID,e);    return null;  }  log.log(Level.SEVERE,"AD_ChangeLog_ID=" + AD_ChangeLog_ID + ", AD_Session_ID="+ getAD_Session_ID()+ ", AD_Table_ID="+ AD_Table_ID+ ", AD_Column_ID="+ AD_Column_ID);  return null;}  }
class C{  public int size(){  return count;}  }
class C{  public static int editDistance_old(String s,String t){  int d[][];  int n;  int m;  int i;  int j;  char s_i;  char t_j;  int cost;  int k=127;  n=s.length();  m=t.length();  if (n == 0) {    return m;  }  if (m == 0) {    return n;  }  d=new int[n + 1][m + 1];  for (i=0; i <= n; i++) {    d[i][0]=i;  }  for (j=0; j <= m; j++) {    d[0][j]=j;  }  for (i=1; i <= n; i++) {    s_i=s.charAt(i - 1);    for (j=1; j <= m; j++) {      t_j=t.charAt(j - 1);      if (s_i == t_j) {        cost=0;      } else {        cost=127;      }      d[i][j]=min(d[i - 1][j] + k,d[i][j - 1] + k,d[i - 1][j - 1] + cost);    }  }  return d[n][m];}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private boolean isFirstElemHTML(){  boolean isHTML;  isHTML=getLocalNameUnknown(m_firstElementName).equalsIgnoreCase("html");  if (isHTML && m_firstElementURI != null && !EMPTYSTRING.equals(m_firstElementURI)) {    isHTML=false;  }  if (isHTML && m_namespacePrefix != null) {    final int max=m_namespacePrefix.size();    for (int i=0; i < max; i++) {      final String prefix=(String)m_namespacePrefix.elementAt(i);      final String uri=(String)m_namespaceURI.elementAt(i);      if (m_firstElementPrefix != null && m_firstElementPrefix.equals(prefix) && !EMPTYSTRING.equals(uri)) {        isHTML=false;        break;      }    }  }  return isHTML;}  }
class C{  public ProfilePeriod next(){  long nextStart=getStartTimeMillis() + durationMillis;  return new ProfilePeriod(nextStart,durationMillis,TimeUnit.MILLISECONDS);}  }
class C{  public WeightedEuclideanDistance(Vec w){  setWeight(w);}  }
class C{  @Inject LDAPAuthService(SystemConfiguration config,UserService userService,MonitorService monitorService){  super(config);  requireArgument(config != null,"The system configuration cannot be null.");  requireArgument(userService != null,"The user service cannot be null.");  requireArgument(monitorService != null,"The monitor service cannot be null.");  _userService=userService;  _config=config;  _monitorService=monitorService;  _dailyUsers=new UserCountCache(86400000L);  _monthlyUsers=new UserCountCache(2592000000L);}  }
class C{  private void engineReset(){  buffered=0;  count=0;  digest[0]=0x67452301;  digest[1]=0xefcdab89;  digest[2]=0x98badcfe;  digest[3]=0x10325476;  digest[4]=0xc3d2e1f0;  for (int i=0; i < DATA_LENGTH; i++) {    tmp[i]=0;    buffer[i]=0;  }  for (int i=0; i < DATA_LENGTH / 4; i++)   data[i]=0;  for (int i=0; i < 80; i++)   z[i]=0;}  }
class C{  public Tree(String s){  final String[] tokens=s.replaceAll("\\)"," )").split("\\s+");  int numNodes=0;  for (  String t : tokens) {    if (!t.equals(")")) {      numNodes++;    }  }  labels=new String[numNodes];  numChildren=new int[numNodes];  sourceStartIndices=new int[numNodes];  sourceEndIndices=new int[numNodes];  try {    initialize(tokens);  } catch (  Exception e) {    throw new IllegalArgumentException(String.format("couldn't create tree from string: \"%s\"",s),e);  }}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  public static DeleteInstance parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteInstance object=new DeleteInstance();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deleteInstance".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeleteInstance)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","organizationId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setOrganizationId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static void backgroundMusicStart(Context mContext){  mContext.startService(new Intent(mContext,BackgroundMusicService.class));}  }
class C{  void assignNewToLocal(Stmt stmt,Local left){  PurityNode node=cacheNode(new PurityStmtNode(stmt,true));  localsRemove(left);  localsPut(left,node);  nodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  private void initialize(){  this.setName(Constant.messages.getString("options.script.title"));  this.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.LINE_START;  gbc.fill=GridBagConstraints.BOTH;  this.add(new JLabel(Constant.messages.getString("options.script.label.dirs")),gbc);  tokensOptionsPanel=new AntiCsrfMultipleOptionsPanel(this.extension,getScriptDirModel());  gbc.weighty=1.0;  this.add(tokensOptionsPanel,gbc);}  }
class C{  public SecureChannel createSecureChannel(String connectUrl,String endpointUri,SecurityMode mode,Cert remoteCertificate) throws ServiceResultException {  EndpointDescription ed=new EndpointDescription();  ed.setEndpointUrl(endpointUri);  ed.setSecurityMode(mode.getMessageSecurityMode());  ed.setSecurityPolicyUri(mode.getSecurityPolicy().getPolicyUri());  Cert _remoteCertificate=mode.getMessageSecurityMode() == MessageSecurityMode.None ? null : remoteCertificate;  if (_remoteCertificate != null)   ed.setServerCertificate(_remoteCertificate.getEncoded());  return createSecureChannel(connectUrl,ed);}  }
class C{  public boolean needPostProcess(){  return (isIntegratedSecurity() && postProcessor != null);}  }
class C{  public void save() throws IOException {  if (pom == null) {    throw new IllegalStateException("Model is not associated with any pom file");  }  writeTo(pom);}  }
class C{  public void addFeature(Feature feature){  getFeatures().add(feature);}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  setupBounds(w,h);  setupPaints();  invalidate();}  }
class C{  public void selfSub(Matrix m){  if ((rows != m.rows) || (columns != m.columns)) {    throw new IllegalArgumentException("cannot substract a " + m.rows + 'x'+ m.columns+ " matrix from a "+ rows+ 'x'+ columns+ " matrix");  }  for (int index=0; index < rows * columns; ++index) {    data[index]-=m.data[index];  }}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArray(String key,CharSequence[] value){  bundle.putCharSequenceArray(key,value);  return this;}  }
class C{  public boolean contains(SnmpTableHandler handler,SnmpOid index){  if (handler.getData(index) instanceof GarbageCollectorMXBean)   return true;  return false;}  }
class C{  public static void dump(ServletContext ctx){  log.config("ServletContext " + ctx.getServletContextName());  log.config("- ServerInfo=" + ctx.getServerInfo());  if (!CLogMgt.isLevelFiner())   return;  boolean first=true;  Enumeration e=ctx.getInitParameterNames();  while (e.hasMoreElements()) {    if (first)     log.finer("InitParameter:");    first=false;    String key=(String)e.nextElement();    Object value=ctx.getInitParameter(key);    log.finer("- " + key + " = "+ value);  }  first=true;  e=ctx.getAttributeNames();  while (e.hasMoreElements()) {    if (first)     log.finer("Attributes:");    first=false;    String key=(String)e.nextElement();    Object value=ctx.getAttribute(key);    log.finer("- " + key + " = "+ value);  }}  }
class C{  public void stopContinuousQuery(String queryName) throws Exception {  CqService cqService=cache.getCqService();  if (cqService != null) {    Collection<? extends InternalCqQuery> allCqs=cqService.getAllCqs();    for (    InternalCqQuery query : allCqs) {      if (query.getName().equals(queryName)) {        try {          query.stop();          return;        } catch (        CqClosedException e) {          throw new Exception(e.getMessage());        }catch (        CqException e) {          throw new Exception(e.getMessage());        }      }    }  }}  }
class C{  public SimpleTypeReference createSimpleTypeReference(){  SimpleTypeReferenceImpl simpleTypeReference=new SimpleTypeReferenceImpl();  return simpleTypeReference;}  }
class C{  private LongUtil(){  instanceNotAllowed(getClass());}  }
class C{  public String levelDataToString(){  return "Dummy level string";}  }
class C{  @Override protected void init() throws ConfigurationException, LoggingException {  this.sqlEncoder=new TimedSQLEncoder(logger);  super.sqlEncoder=this.sqlEncoder;}  }
class C{  int encrypt(byte[] in,int inOff,int len,byte[] out,int outOff){  return crypt(in,inOff,len,out,outOff);}  }
class C{  @GwtIncompatible <K,V>MapMakerInternalMap<K,V> makeCustomMap(){  return new MapMakerInternalMap<K,V>(this);}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep deactivateIpInterface(@PathParam("id") URI id) throws DatabaseException {  IpInterface ipInterface=queryResource(id);  ArgValidator.checkEntity(ipInterface,id,isIdEmbeddedInURL(id));  if (ipInterface.getIsManualCreation() != null && !ipInterface.getIsManualCreation()) {    throw APIException.badRequests.ipInterfaceNotCreatedManuallyAndCannotBeDeleted();  }  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(IpInterface.class,ipInterface.getId(),taskId,ResourceOperationTypeEnum.DELETE_HOST_IPINTERFACE);  if (ComputeSystemHelper.isHostIpInterfacesInUse(_dbClient,Collections.singletonList(ipInterface.getIpAddress()),ipInterface.getHost())) {    ComputeSystemController controller=getController(ComputeSystemController.class,null);    controller.removeIpInterfaceFromFileShare(ipInterface.getHost(),ipInterface.getId(),taskId);  } else {    _dbClient.ready(IpInterface.class,ipInterface.getId(),taskId);    _dbClient.markForDeletion(ipInterface);  }  auditOp(OperationTypeEnum.DELETE_HOST_IPINTERFACE,true,null,ipInterface.auditParameters());  return toTask(ipInterface,taskId,op);}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  return new Instances(inputFormat);}  }
class C{  public static boolean hasFoundPage(EntityPlayer player,String page,Item itemManual){  ItemStack stack=player.getHeldItem(EnumHand.MAIN_HAND);  if (stack != null && stack.getItem() == ItemRegistry.MANUAL_HL) {    IDiscoveryProvider<ItemStack> provider=(IDiscoveryProvider<ItemStack>)stack.getItem();    DiscoveryContainer container=provider.getContainer(stack);    ItemStack ingredient=null;    Map<AspectManager.AspectItem,List<AspectManager.AspectItemEntry>> matchedAspects=AspectManager.getRegisteredItems();    for (    Map.Entry<AspectManager.AspectItem,List<AspectManager.AspectItemEntry>> e : matchedAspects.entrySet()) {      if (e.getKey() != null) {        if ((new ItemStack(e.getKey().getOriginal().getItem(),1,e.getKey().getOriginal().getItemDamage()).getDisplayName().toLowerCase().replace(" ","").equals(page))) {          ingredient=new ItemStack(e.getKey().getOriginal().getItem(),1,e.getKey().getOriginal().getItemDamage());          break;        }      }    }    ItemAspectContainer aspectContainer=ItemAspectContainer.fromItem(ingredient,AspectManager.get(Minecraft.getMinecraft().theWorld));    return ingredient != null && aspectContainer.getAspects(container).size() > 0;  }  return player != null && page != null && getFoundPages(player,itemManual) != null && getFoundPages(player,itemManual).contains(page);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void sendMessage() throws Exception {  for (int i=1; i <= maximumSendMessages || maximumSendMessages == 0; i++) {    String myMsg="My TestMessage " + i;    if (myMsg.length() > messageSize) {      myMsg=myMsg.substring(0,messageSize);    }    TextMessage message=session.createTextMessage(myMsg);    producer.send(message);    sendData.put(i,myMsg);    sendCount++;    if (verbose) {      String msg=message.getText();      if (msg.length() > messageSize) {        msg=msg.substring(0,messageSize) + "...";      }      if (i <= debugMessageCount) {        System.out.println("[" + this + "] Sending message from generator: '"+ msg+ "'");      }    }  }}  }
class C{  public static ChcpXmlConfig loadFromCordovaConfig(final Context context){  ChcpXmlConfig chcpConfig=new ChcpXmlConfig();  new ChcpXmlConfigParser().parse(context,chcpConfig);  return chcpConfig;}  }
class C{  public static void updateAsset(SetGetModel m,int A_Asset_Group_ID){  if (A_Asset_Group_ID < 0) {    A_Asset_Group_ID=MAssetGroup.getDefault_ID(SetGetUtil.wrap(m));    m.set_AttrValue(MAsset.COLUMNNAME_A_Asset_Group_ID,A_Asset_Group_ID);  }}  }
class C{  public static void delete(File resourceToDelete) throws IOException {  if (resourceToDelete.exists()) {    delete(resourceToDelete.toPath());  }}  }
class C{  public void openCache(String cName,int cacheDiskSizeInMegabytes,int cacheHeapSizeInMegabytes){  if (disableCache)   logger.error("Trying to open cache, but disableCache is set to 'true'."); else {    cacheManager=CacheManager.getCacheManager(cName);    if (null == cacheManager) {      DiskStoreConfiguration diskStoreConfiguration=new DiskStoreConfiguration();      diskStoreConfiguration.setPath(cName);      Configuration cacheManagerConfig=new Configuration();      cacheManagerConfig.setName(cName);      cacheManagerConfig.addDiskStore(diskStoreConfiguration);      cacheManagerConfig.setMaxBytesLocalDisk(1000000L * cacheDiskSizeInMegabytes);      cacheManagerConfig.setMaxBytesLocalHeap(1000000L * cacheHeapSizeInMegabytes);      cacheManager=new CacheManager(cacheManagerConfig);      if (cacheManager.cacheExists(cName)) {        annotationCache=cacheManager.getCache(cName);      } else {        CacheConfiguration cacheConfiguration=new CacheConfiguration().eternal(true).name(cName).diskPersistent(true).overflowToDisk(true);        annotationCache=new Cache(cacheConfiguration);        cacheManager.addCache(annotationCache);      }    }  }}  }
class C{  private void onNowHidden(){}  }
class C{  public static List<Uri> deserializeAndFilter(String key,Context context,String emergencyContactString){  String[] emergencyContactsArray=emergencyContactString.split(QUOTE_CONTACT_SEPARATOR);  List<Uri> filteredEmergencyContacts=new ArrayList<>(emergencyContactsArray.length);  for (  String emergencyContact : emergencyContactsArray) {    Uri contactUri=Uri.parse(emergencyContact);    if (EmergencyContactManager.isValidEmergencyContact(context,contactUri)) {      filteredEmergencyContacts.add(contactUri);    }  }  if (filteredEmergencyContacts.size() != emergencyContactsArray.length) {    String emergencyContactStrings=serialize(filteredEmergencyContacts);    SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);    sharedPreferences.edit().putString(key,emergencyContactStrings).apply();  }  return filteredEmergencyContacts;}  }
class C{  public void editQuality(final IBuildDetail detail){  getViewer().editElement(detail,BUILD_QUALITY_COLUMN);}  }
class C{  public boolean validatePendingSetBeanContext(BeanContext newValue){  return true;}  }
class C{  private void readGlobalHeader() throws IOException {  int magic=is.readInt();  short major=is.readShort();  short minor=is.readShort();  int tz=is.readInt();  int sigfigs=is.readInt();  int snaplen=is.readInt();  int network=is.readInt();  globalHeader=new GlobalHeader(magic,major,minor,tz,sigfigs,snaplen,network);  if (globalHeader.getMagicNumber() == 0xD4C3B2A1) {    globalHeader.swapByteOrder();  }}  }
class C{  void _m11(float m11){  this.m11=m11;}  }
class C{  public Matrix4x3f translationRotateScale(float tx,float ty,float tz,float qx,float qy,float qz,float qw,float sx,float sy,float sz){  float dqx=qx + qx;  float dqy=qy + qy;  float dqz=qz + qz;  float q00=dqx * qx;  float q11=dqy * qy;  float q22=dqz * qz;  float q01=dqx * qy;  float q02=dqx * qz;  float q03=dqx * qw;  float q12=dqy * qz;  float q13=dqy * qw;  float q23=dqz * qw;  m00=sx - (q11 + q22) * sx;  m01=(q01 + q23) * sx;  m02=(q02 - q13) * sx;  m10=(q01 - q23) * sy;  m11=sy - (q22 + q00) * sy;  m12=(q12 + q03) * sy;  m20=(q02 + q13) * sz;  m21=(q12 - q03) * sz;  m22=sz - (q11 + q00) * sz;  m30=tx;  m31=ty;  m32=tz;  properties=0;  return this;}  }
class C{  public static void absentRelationship(Class<?> configuredClass,Class<?> targetClass){  throw new AbsentRelationshipException(MSG.INSTANCE.message(noRelationshipException,configuredClass.getSimpleName(),targetClass.getSimpleName()));}  }
class C{  public static void append(String fileName,Iterable<String> list) throws IOException {  append(fileName,list,new StringTransformer<String>());}  }
class C{  public DuringChangeListManagerUpdateTestScheme(final Project project,final String tmpDirPath){  final MockAbstractVcs vcs=new MockAbstractVcs(project);  myChangeProvider=new MockDelayingChangeProvider();  vcs.setChangeProvider(myChangeProvider);  final File mockVcsRoot=new File(tmpDirPath,"mock");  mockVcsRoot.mkdir();  final VirtualFile vRoot=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(mockVcsRoot);  final ProjectLevelVcsManagerImpl projectLevelVcsManager=(ProjectLevelVcsManagerImpl)ProjectLevelVcsManager.getInstance(project);  projectLevelVcsManager.registerVcs(vcs);  final ArrayList<VcsDirectoryMapping> list=new ArrayList<VcsDirectoryMapping>(projectLevelVcsManager.getDirectoryMappings());  list.add(new VcsDirectoryMapping(vRoot.getPath(),vcs.getName()));  projectLevelVcsManager.setDirectoryMappings(list);  AbstractVcs vcsFound=projectLevelVcsManager.findVcsByName(vcs.getName());  final VirtualFile[] roots=projectLevelVcsManager.getRootsUnderVcs(vcsFound);  assert roots.length == 1 : Arrays.asList(roots) + "; " + vcs.getName()+ "; "+ Arrays.toString(AllVcses.getInstance(project).getAll());  myDirtyScopeManager=VcsDirtyScopeManager.getInstance(project);  myClManager=ChangeListManager.getInstance(project);}  }
class C{  public void appendSuper(StringBuffer buffer,String superToString){  appendToString(buffer,superToString);}  }
class C{  @SneakyThrows public RSAPrivateKey loadPrivateKey(String privateKeyLocation){  Resource keyRes=resourceLoader.getResource(privateKeyLocation);  byte[] keyBytes=StreamUtils.copyToByteArray(keyRes.getInputStream());  PKCS8EncodedKeySpec privateKeySpec=new PKCS8EncodedKeySpec(keyBytes);  KeyFactory keyFactory=KeyFactory.getInstance("RSA");  RSAPrivateKey privateKey=(RSAPrivateKey)keyFactory.generatePrivate(privateKeySpec);  return privateKey;}  }
class C{  public static String[] permute(String s){  ArrayList<String> a=new ArrayList<String>();  permute("",s,a);  return a.toArray(new String[0]);}  }
class C{  public String option2Name(){  return "Match Detected Locos to Roster: ";}  }
class C{  protected Solution findExtremePoint(int objective){  double eps=0.000001;  double[] weights=new double[numberOfObjectives];  for (int i=0; i < numberOfObjectives; i++) {    if (i == objective) {      weights[i]=1.0;    } else {      weights[i]=eps;    }  }  Solution result=null;  double resultASF=Double.POSITIVE_INFINITY;  for (int i=0; i < size(); i++) {    Solution solution=get(i);    double solutionASF=achievementScalarizingFunction(solution,weights);    if (solutionASF < resultASF) {      result=solution;      resultASF=solutionASF;    }  }  return result;}  }
class C{  public void testComplexMultiplePartitions(){  final IGroupMemberNode n1=stmtPatternWithVar("x1");  final IGroupMemberNode n2=stmtPatternWithVar("x2");  final IGroupMemberNode n3=joinGroupWithVars("x2","x4");  final JoinGroupNode n4=joinGroupWithVars("x5");  n4.setOptional(true);  final IGroupMemberNode n5=joinGroupWithVars("x2","x6");  final SubqueryRoot n6=subqueryWithVars("x5","x1");  final JoinGroupNode n7=joinGroupWithVars("x3","x4");  n7.setMinus(true);  final IGroupMemberNode n8=serviceSparql11WithConstant("x7","x1");  final IGroupMemberNode n9=unionWithVars("x2","x3");  final IGroupMemberNode n10=unionWithVars("x8","x8","x7");  final List<IGroupMemberNode> nodes=new ArrayList<IGroupMemberNode>();  nodes.add(n1);  nodes.add(n2);  nodes.add(n3);  nodes.add(n4);  nodes.add(n5);  nodes.add(n6);  nodes.add(n7);  nodes.add(n8);  nodes.add(n9);  nodes.add(n10);  final GroupNodeVarBindingInfoMap bindingInfo=new GroupNodeVarBindingInfoMap(nodes,statisAnalysisForNodes(nodes),null);  final ASTJoinGroupPartitions partitions=new ASTJoinGroupPartitions(nodes,bindingInfo,new HashSet<IVariable<?>>());  assertEquals(3,partitions.getPartitionList().size());  assertEquals(nodes,partitions.extractNodeList(true));  final ASTJoinGroupPartition p1=partitions.getPartitionList().get(0);  final List<IGroupMemberNode> p1Exp=new ArrayList<IGroupMemberNode>();  p1Exp.add(n1);  p1Exp.add(n2);  p1Exp.add(n3);  p1Exp.add(n4);  assertEquals(p1Exp,p1.extractNodeList(true));  assertEquals(n4,p1.optionalOrMinus);  assertEquals(varSet("x1","x2","x4"),p1.definitelyProduced);  final ASTJoinGroupPartition p2=partitions.getPartitionList().get(1);  final List<IGroupMemberNode> p2Exp=new ArrayList<IGroupMemberNode>();  p2Exp.add(n5);  p2Exp.add(n6);  p2Exp.add(n7);  assertEquals(p2Exp,p2.extractNodeList(true));  assertEquals(n7,p2.optionalOrMinus);  assertEquals(varSet("x1","x2","x4","x5","x6"),p2.definitelyProduced);  final ASTJoinGroupPartition p3=partitions.getPartitionList().get(2);  final List<IGroupMemberNode> p3Exp=new ArrayList<IGroupMemberNode>();  p3Exp.add(n8);  p3Exp.add(n9);  p3Exp.add(n10);  assertEquals(p3Exp,p3.extractNodeList(true));  assertNull(p3.optionalOrMinus);  assertEquals(varSet("x1","x2","x4","x5","x6","x7","x8"),p3.definitelyProduced);}  }
class C{  public PasswordManager(String securityPropertiesFileLocation,ClientApplicationType clientApplicationType) throws ConfigurationException {  this.setClientApplicationType(clientApplicationType);  try {    this.authenticationInfo=SecurityHelper.loadAuthenticationInformation(securityPropertiesFileLocation,false,TUNGSTEN_APPLICATION_NAME.ANY);  } catch (  ConfigurationException ce) {    logger.debug(MessageFormat.format("Configuration error: {0}",ce.getMessage()));    throw ce;  }catch (  ServerRuntimeException sre) {    logger.debug(MessageFormat.format("Could not get authentication information : {0}",sre.getMessage()));  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 82) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do {      map[j++]=value;    } while (--count > 0);  }  return map;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.112 -0500",hash_original_method="ACD960FD5413B931010CFE492BF9890E",hash_generated_method="E4393AFD6958329A32860BFDC2E67D73") public DHParameterSpec(BigInteger p,BigInteger g,int l){  this.p=p;  this.g=g;  this.l=l;}  }
class C{  public static double moment(int k,double c,int size,double[] sumOfPowers){  double sum=0;  int sign=1;  for (int i=0; i <= k; i++) {    double y;    if (i == 0)     y=1; else     if (i == 1)     y=c; else     if (i == 2)     y=c * c; else     if (i == 3)     y=c * c * c; else     y=Math.pow(c,i);    sum+=sign * cern.jet.math.Arithmetic.binomial(k,i) * y* sumOfPowers[k - i];    sign=-sign;  }  return sum / size;}  }
class C{  public static boolean isNumber(Object value){  if (value instanceof Number)   return true; else   if (value instanceof CharSequence || value instanceof Character) {    return isNumber(value.toString());  } else   return false;}  }
class C{  public boolean delete(String playlistId){  return dbHelper.getWritableDatabase().delete(YouTubePlaylistEntry.TABLE_NAME,YouTubePlaylistEntry.COLUMN_PLAYLIST_ID + "='" + playlistId+ "'",null) > 0;}  }
class C{  protected Region createAckRegion(boolean mirror,boolean conflate) throws CacheException {  final AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  if (mirror) {    factory.setDataPolicy(DataPolicy.REPLICATE);  }  if (conflate) {    factory.setEnableAsyncConflation(true);  }  final Region r=createRootRegion("AckRegion",factory.create());  return r;}  }
class C{  public static void main(String[] args){  try {    if (args.length == 0) {      throw new Exception("The first argument must be the name of a " + "clusterer");    }    String ClustererString=args[0];    args[0]="";    Clusterer newClusterer=AbstractClusterer.forName(ClustererString,null);    System.out.println(evaluateClusterer(newClusterer,args));  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  @Override public void resize(long newSize){  final int numPages=numPages(newSize);  if (numPages > pages.length) {    pages=Arrays.copyOf(pages,ArrayUtil.oversize(numPages,RamUsageEstimator.NUM_BYTES_OBJECT_REF));  }  for (int i=numPages - 1; i >= 0 && pages[i] == null; --i) {    pages[i]=newIntPage(i);  }  for (int i=numPages; i < pages.length && pages[i] != null; ++i) {    pages[i]=null;    releasePage(i);  }  this.size=newSize;}  }
class C{  public BlackNode(Quadrant quadrant,QuadTreeNode parent){  super(quadrant,parent);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.REACTIVE_ELEMENT__LOCAL_REACTIONS:    return !getLocalReactions().isEmpty();}return super.eIsSet(featureID);}  }
class C{  private boolean isContainsNodesInContext(SiteNode node){  if (isInContext(node)) {    return true;  }  @SuppressWarnings("unchecked") Enumeration<SiteNode> en=node.children();  while (en.hasMoreElements()) {    SiteNode sn=en.nextElement();    if (isContainsNodesInContext(sn)) {      return true;    }  }  return false;}  }
class C{  boolean touch(){  while (true) {    long time0=lastTouchTime.get();    if (time0 == TIMEDOUT_FLAG)     return false;    boolean success=lastTouchTime.compareAndSet(time0,U.currentTimeMillis());    if (success)     return true;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.STRING_LIT___QUOTE_1:    setQuote_1(QUOTE_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static String copyToString(Reader in) throws IOException {  StringWriter out=new StringWriter();  copy(in,out);  String str=out.toString();  if (str.startsWith("\ufeff")) {    return str.substring(1);  }  return str;}  }
class C{  public void onScaleChanged(WebView view,float oldScale,float newScale){}  }
class C{  public boolean init(StepMetaInterface smi,StepDataInterface sdi){  meta=(CarbonSliceMergerStepMeta)smi;  data=(CarbonSliceMergerStepData)sdi;  return super.init(smi,sdi);}  }
class C{  private SyncResult mockSyncResult(boolean needsStash,boolean hasRemoteRepository){  SyncResult syncResult=mock(SyncResult.class);  when(syncResult.needsStash()).thenReturn(needsStash);  when(syncResult.needsSync()).thenReturn(false);  when(syncResult.getTargetSyncSha()).thenReturn(null);  when(syncResult.hasRemoteRepository()).thenReturn(hasRemoteRepository);  return syncResult;}  }
class C{  public NecronomiconSummonRitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,boolean requiresSacrifice,Class<? extends EntityLivingBase> entity,Object... offerings){  super(unlocalizedName,bookType,dimension,requiredEnergy,requiresSacrifice,offerings);  this.entity=entity;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.LINE_TAG__DOCLET:    return basicSetDoclet(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public boolean removeByName(String pluginName){  AbstractPlugin toRemove=getByName(pluginName);  return remove(toRemove);}  }
class C{  private static void fail(String message,Object... args){  throw new AssertionError(args.length == 0 ? message : String.format(message,args));}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  protected ShaderVar addUniform(IGlobalShaderVar var,String suffix){  return addUniform(var.getVarString() + suffix,var.getDataType());}  }
class C{  public EsriPolygonZList(){  super();}  }
class C{  public void remove(final AbstractInsnNode insn){  --size;  AbstractInsnNode next=insn.next;  AbstractInsnNode prev=insn.prev;  if (next == null) {    if (prev == null) {      first=null;      last=null;    } else {      prev.next=null;      last=prev;    }  } else {    if (prev == null) {      first=next;      next.prev=null;    } else {      prev.next=next;      next.prev=prev;    }  }  cache=null;  insn.index=-1;  insn.prev=null;  insn.next=null;}  }
class C{  protected Dashboard(){  super(null);}  }
class C{  public static char highSurrogate(int c){  return (char)(((c - 0x00010000) >> 10) + 0xD800);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAllocationHdr[");  sb.append(get_ID()).append("-").append(getSummary()).append("]");  return sb.toString();}  }
class C{  @SuppressWarnings("unchecked") public T read(File file){  Preconditions.checkNotNull(file);  try (InputStream stream=new FileInputStream(file)){    return (T)yamlParser.load(stream);  } catch (  IOException e) {    throw new RuntimeException("Could not load config file: " + file.getName(),e);  }}  }
class C{  public URI(){}  }
class C{  public int lastIndexOfAnyBut(final char[] c){  return lastIndexOfAnyBut(c,0);}  }
class C{  public Message editMessageText(String chatId,Long messageId,String text,ParseMode parseMode,boolean disableWebPagePreview,InlineReplyMarkup inlineReplyMarkup){  if (chatId != null && messageId != null && text != null) {    JSONObject jsonResponse=this.editMessageText(chatId,messageId,null,text,parseMode,disableWebPagePreview,inlineReplyMarkup);    if (jsonResponse != null) {      return MessageImpl.createMessage(jsonResponse.getJSONObject("result"),this);    }  }  return null;}  }
class C{  public boolean removeStickyEvent(Object event){  removeStickyEventRemote(event);  return removeStickyEventLocal(event);}  }
class C{  public void startLoading(){  if (m_ioThread == null) {    m_state=BATCH_LOADING;    m_stopped=false;    m_ioThread=new LoadThread(Loader.this);    m_ioThread.setPriority(Thread.MIN_PRIORITY);    m_ioThread.start();  } else {    m_ioThread=null;    m_state=IDLE;  }}  }
class C{  public void applyBodyForceToCenter(Vec2 force){  getBody().applyForceToCenter(force);}  }
class C{  public AdditiveModel generateFeatureIndexer(){  featureIndexer.clear();  int count=0;  for (  Map.Entry<String,Map<String,Function>> family : weights.entrySet()) {    String familyName=family.getKey();    Map<String,Integer> featureIndex=new HashMap<>();    featureIndexer.put(familyName,featureIndex);    for (    Map.Entry<String,Function> feature : family.getValue().entrySet()) {      featureIndex.put(feature.getKey(),count++);    }  }  weightVector=new Function[count];  return this;}  }
class C{  public boolean isCatalogAtStart() throws SQLException {  return false;}  }
class C{  public FixedSizeRandomPartition(int n){  random=new Random();  this.n=n;}  }
class C{  @Nullable public PsiElement resolveModuleAt(@Nullable PsiDirectory directory){  if (directory == null || !directory.isValid())   return null;  PsiElement seeker=directory;  for (  String name : myQualifiedName.getComponents()) {    if (name == null) {      return null;    }    seeker=ResolveImportUtil.resolveChild(seeker,name,myContext.getFootholdFile(),!myWithMembers,myCheckForPackage);  }  return seeker;}  }
class C{  public void append(StringBuffer buffer,String fieldName,long[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<E>(list,mutex);  }  return this;}  }
class C{  public static <K extends Comparable<? super K>,V>TreeMap<K,V> of(K key,V value){  return new TreeMap<>(Ord.fromComparable(),Node.singleton(key,value));}  }
class C{  public void billingTypeChanged(ValueChangeEvent event){  BillingDataType selectedBillingType=(BillingDataType)event.getNewValue();  model.setSelectedBillingDataType(selectedBillingType);  model.setFromDate(null);  model.setToDate(null);  model.setSelectedSharesResultType(null);  if (BillingDataType.CustomerBillingData.equals(model.getSelectedBillingDataType())) {    initSelectableOrganizations();  }}  }
class C{  public CSVFileWriter(String path,String separator){  log.info("Initializing the writer.");  this.separator=separator;  try {    writer=IOUtils.getBufferedWriter(path);  } catch (  Exception ee) {    ee.printStackTrace();    throw new RuntimeException("writer could not be instantiated");  }  if (writer == null) {    throw new RuntimeException("writer is null");  }  log.info("... done!");}  }
class C{  public void store(int value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void testSingleMultiPolygonHolesRoundTrip() throws SAXException, IOException, ParserConfigurationException {  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setGenerationAlgorithm(PolygonGenerator.BOX);  pgc.setNumberPoints(10);  pgc.setNumberHoles(4);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPolygon pt=(MultiPolygon)pg.create();  checkRoundTrip(pt);}  }
class C{  @SafeVarargs public static <T>boolean addAll(Collection<? super T> c,T... a){  boolean modified=false;  for (int i=0; i < a.length; i++) {    modified|=c.add(a[i]);  }  return modified;}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject);  this.m_order=order;  this.m_multiAllowed=multiAllowed;}  }
class C{  public GF2nONBField(int deg) throws RuntimeException {  if (deg < 3) {    throw new IllegalArgumentException("k must be at least 3");  }  mDegree=deg;  mLength=mDegree / MAXLONG;  mBit=mDegree & (MAXLONG - 1);  if (mBit == 0) {    mBit=MAXLONG;  } else {    mLength++;  }  computeType();  if (mType < 3) {    mMult=new int[mDegree][2];    for (int i=0; i < mDegree; i++) {      mMult[i][0]=-1;      mMult[i][1]=-1;    }    computeMultMatrix();  } else {    throw new RuntimeException("\nThe type of this field is " + mType);  }  computeFieldPolynomial();  fields=new Vector();  matrices=new Vector();}  }
class C{  void reportImport(){  this.hasImports=true;}  }
class C{  public static Blackhole newBlackhole(){  return Blackhole_generated._jmh_tryInit_NewBlackhole();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","sanquanyixuey");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void step(){  casings.forEach(null);  casings.forEach(null);  casings.forEach(null);  stepPipes();  stepForwarders();}  }
class C{  public CacheWriterException(){}  }
class C{  public void testCompositeAttributeCanBeNull() throws Exception {  HtmlPage page=getPage("/faces/composite/defaultAttributeValueExpression_1986.xhtml");  assertElementAttributeEquals(page,"WithValueNull:Input","value","");  assertElementAttributeEquals(page,"WithValueEmpty:Input","value","");}  }
class C{  public static boolean isInputStreamGZIPCompressed(final PushbackInputStream inputStream) throws IOException {  if (inputStream == null)   return false;  byte[] signature=new byte[2];  int readStatus=inputStream.read(signature);  inputStream.unread(signature);  int streamHeader=((int)signature[0] & 0xff) | ((signature[1] << 8) & 0xff00);  return readStatus == 2 && GZIPInputStream.GZIP_MAGIC == streamHeader;}  }
class C{  public void checkNode(Node node) throws TransformerException {}  }
class C{  public double entropyMutualInformation(){  return (entropyFirst() + entropySecond() - entropyJoint());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:57.616 -0500",hash_original_method="95C694273499781A6977EEA3A6EB256B",hash_generated_method="DD118F7DB3B777EDEDF07C7206EE0C52") public static String keyFor(String name){  if (name != null) {    boolean sortfirst=false;    if (name.equals(UNKNOWN_STRING)) {      return "\001";    }    if (name.startsWith("\001")) {      sortfirst=true;    }    name=name.trim().toLowerCase();    if (name.startsWith("the ")) {      name=name.substring(4);    }    if (name.startsWith("an ")) {      name=name.substring(3);    }    if (name.startsWith("a ")) {      name=name.substring(2);    }    if (name.endsWith(", the") || name.endsWith(",the") || name.endsWith(", an")|| name.endsWith(",an")|| name.endsWith(", a")|| name.endsWith(",a")) {      name=name.substring(0,name.lastIndexOf(','));    }    name=name.replaceAll("[\\[\\]\\(\\)\"'.,?!]","").trim();    if (name.length() > 0) {      StringBuilder b=new StringBuilder();      b.append('.');      int nl=name.length();      for (int i=0; i < nl; i++) {        b.append(name.charAt(i));        b.append('.');      }      name=b.toString();      String key=DatabaseUtils.getCollationKey(name);      if (sortfirst) {        key="\001" + key;      }      return key;    } else {      return "";    }  }  return null;}  }
class C{  public boolean contains(T item){  return data.contains(item);}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  public SubscriptionMigrationException(String message,SubscriptionMigrationExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  public static void main(String[] args) throws Exception {  log.info("Starting SecureLog performance test...");  new MessageLogPerformanceTest().run();}  }
class C{  public static UsesDatabase usesDatabase(){  return new UsesDatabase(true);}  }
class C{  public UndeployDeployableScriptCommand(Configuration configuration,String resourcePath,Deployable deployable){  super(configuration,resourcePath);  this.deployable=deployable;}  }
class C{  public static boolean shareAverageOf(int n,String currentPuzzle,String currentPuzzleSubtype,DatabaseHandler dbHandler,Context context){  if (dbHandler.getSolveCount(currentPuzzle,currentPuzzleSubtype,true) >= n) {    Intent shareIntent=new Intent();    shareIntent.setAction(Intent.ACTION_SEND);    shareIntent.putExtra(Intent.EXTRA_TEXT,context.getString(PuzzleUtils.getPuzzleName(currentPuzzle)) + ": " + PuzzleUtils.createAverageList(n,currentPuzzle,currentPuzzleSubtype,dbHandler));    shareIntent.setType("text/plain");    context.startActivity(shareIntent);    return true;  } else {    return false;  }}  }
class C{  public static boolean isZero(final BigDecimal amount){  return amount.compareTo(BigDecimal.ZERO) == 0 ? true : false;}  }
class C{  public void writeTo(final PacketOutputStream os){  os.write(ParameterWriter.QUOTE);  os.write(dateToByte());  ParameterWriter.formatMicroseconds(os,ts.getNanos() / 1000,fractionalSeconds);  os.write(ParameterWriter.QUOTE);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof AvailableExpression)) {    return false;  }  AvailableExpression ae=(AvailableExpression)o;  if (isLoadOrStore()) {    if (!ae.isLoadOrStore()) {      return false;    }    boolean result=LocationOperand.mayBeAliased(location,ae.location);    if (ops == null || ae.ops == null) {      return result && ops == ae.ops;    }    result=result && ops[0].similar(ae.ops[0]);    if (ops.length > 1) {      result=result && ops[1].similar(ae.ops[1]);    } else {      if (ae.ops.length > 1) {        return false;      }    }    return result;  } else   if (isBoundsCheck()) {    if (!opr.equals(ae.opr)) {      return false;    }    if (!ops[0].similar(ae.ops[0])) {      return false;    }    if (ops[1].similar(ae.ops[1])) {      return true;    }    if (ops[1] instanceof IntConstantOperand && ae.ops[1] instanceof IntConstantOperand) {      int C1=((IntConstantOperand)ops[1]).value;      int C2=((IntConstantOperand)ae.ops[1]).value;      return C1 > 0 && C2 >= 0 && C1 > C2;    } else {      return false;    }  } else {    if (!opr.equals(ae.opr)) {      return false;    }    if (ops.length != ae.ops.length) {      return false;    } else {      if (ops.length == 2) {        return (ops[0].similar(ae.ops[0]) && ops[1].similar(ae.ops[1])) || (isCommutative() && ops[0].similar(ae.ops[1]) && ops[1].similar(ae.ops[0]));      } else {        for (int i=0; i < ops.length; i++) {          if (!ops[i].similar(ae.ops[i])) {            return false;          }        }        return true;      }    }  }}  }
class C{  public boolean containsExcludeResultPrefix(String prefix,String uri){  if (null == m_ExcludeResultPrefixs || uri == null)   return false;  for (int i=0; i < m_ExcludeResultPrefixs.size(); i++) {    if (uri.equals(getNamespaceForPrefix(m_ExcludeResultPrefixs.elementAt(i))))     return true;  }  return false;}  }
class C{  public static boolean isVolatile(int mod){  return (mod & VOLATILE) != 0;}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public void addViews(List<View> views){  addAdapter(new ViewAdapter(views));}  }
class C{  public Boolean isInside(){  return inside;}  }
class C{  public boolean mousePressed(MouseEvent e){  return false;}  }
class C{  public T caseMappingRule(MappingRule object){  return null;}  }
class C{  public static Test suite(){  return new TestSuite(MergeInfrequentNominalValuesTest.class);}  }
class C{  @GET @Path("search") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public Response search(@QueryParam("query") String query,@DefaultValue(LIMIT_OFFSET_DEFAULT) @QueryParam("limit") int limit,@DefaultValue(LIMIT_OFFSET_DEFAULT) @QueryParam("offset") int offset){  AtlasPerfTracer perf=null;  if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {    perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"MetadataDiscoveryResource.search(" + query + ", "+ limit+ ", "+ offset+ ")");  }  boolean dslQueryFailed=false;  Response response=null;  try {    response=searchUsingQueryDSL(query,limit,offset);    if (response.getStatus() != Response.Status.OK.getStatusCode()) {      dslQueryFailed=true;    }  } catch (  Exception e) {    LOG.debug("Error while running DSL. Switching to fulltext for query {}",query,e);    dslQueryFailed=true;  }  if (dslQueryFailed) {    response=searchUsingFullText(query,limit,offset);  }  AtlasPerfTracer.log(perf);  return response;}  }
class C{  @SuppressWarnings("unchecked") public static List<Style> parseListImageStyle(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    List<Style> styleList=new ArrayList<Style>();    List<Element> styleElems=root.getChildren("Style");    for (    Element e : styleElems) {      Style style=new Style();      style.SetStyleName(e.getChildText("Name"));      style.SetStyle(e.getChildText("Content"));      style.SetLastModifyTime(DateUtil.parseRfc822Date(e.getChildText("LastModifyTime")));      style.SetCreationDate(DateUtil.parseRfc822Date(e.getChildText("CreateTime")));      styleList.add(style);    }    return styleList;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public PolicyFactory and(PolicyFactory f){  ImmutableMap.Builder<String,ElementAndAttributePolicies> b=ImmutableMap.builder();  for (  Map.Entry<String,ElementAndAttributePolicies> e : policies.entrySet()) {    String elName=e.getKey();    ElementAndAttributePolicies p=e.getValue();    ElementAndAttributePolicies q=f.policies.get(elName);    if (q != null) {      p=p.and(q);    } else {      p=p.andGlobals(f.globalAttrPolicies);    }    b.put(elName,p);  }  for (  Map.Entry<String,ElementAndAttributePolicies> e : f.policies.entrySet()) {    String elName=e.getKey();    if (!policies.containsKey(elName)) {      ElementAndAttributePolicies p=e.getValue();      p=p.andGlobals(globalAttrPolicies);      b.put(elName,p);    }  }  ImmutableSet<String> allTextContainers;  if (this.textContainers.containsAll(f.textContainers)) {    allTextContainers=this.textContainers;  } else   if (f.textContainers.containsAll(this.textContainers)) {    allTextContainers=f.textContainers;  } else {    allTextContainers=ImmutableSet.<String>builder().addAll(this.textContainers).addAll(f.textContainers).build();  }  ImmutableMap<String,AttributePolicy> allGlobalAttrPolicies;  if (f.globalAttrPolicies.isEmpty()) {    allGlobalAttrPolicies=this.globalAttrPolicies;  } else   if (this.globalAttrPolicies.isEmpty()) {    allGlobalAttrPolicies=f.globalAttrPolicies;  } else {    ImmutableMap.Builder<String,AttributePolicy> ab=ImmutableMap.builder();    for (    Map.Entry<String,AttributePolicy> e : this.globalAttrPolicies.entrySet()) {      String attrName=e.getKey();      ab.put(attrName,AttributePolicy.Util.join(e.getValue(),f.globalAttrPolicies.get(attrName)));    }    for (    Map.Entry<String,AttributePolicy> e : f.globalAttrPolicies.entrySet()) {      String attrName=e.getKey();      if (!this.globalAttrPolicies.containsKey(attrName)) {        ab.put(attrName,e.getValue());      }    }    allGlobalAttrPolicies=ab.build();  }  HtmlStreamEventProcessor compositionOfPreprocessors=HtmlStreamEventProcessor.Processors.compose(this.preprocessor,f.preprocessor);  HtmlStreamEventProcessor compositionOfPostprocessors=HtmlStreamEventProcessor.Processors.compose(this.postprocessor,f.postprocessor);  return new PolicyFactory(b.build(),allTextContainers,allGlobalAttrPolicies,compositionOfPreprocessors,compositionOfPostprocessors);}  }
class C{  protected ExampleTaskServiceState validateStartPost(Operation taskOperation){  ExampleTaskServiceState task=super.validateStartPost(taskOperation);  if (task == null) {    return null;  }  if (ServiceHost.isServiceCreate(taskOperation)) {    if (task.subStage != null) {      taskOperation.fail(new IllegalArgumentException("Do not specify subStage: internal use only"));      return null;    }    if (task.exampleQueryTask != null) {      taskOperation.fail(new IllegalArgumentException("Do not specify exampleQueryTask: internal use only"));      return null;    }  }  if (task.taskLifetime != null && task.taskLifetime <= 0) {    taskOperation.fail(new IllegalArgumentException("taskLifetime must be positive"));    return null;  }  return task;}  }
class C{  protected Anonymous_afterCode_2_Impl(){  super();}  }
class C{  public synchronized long avgMessageProcessingTime(){  return avgMsgProcTime;}  }
class C{  public boolean isObject(){  return (type != null) && type.isObject();}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public boolean isDirectDeposit(){  if (!isACH())   return false;  String s=getBPBankAcctUse();  if (s == null)   return true;  return (s.equals(BPBANKACCTUSE_Both) || s.equals(BPBANKACCTUSE_DirectDeposit));}  }
class C{  public boolean isSmsFallbackServiceActivated(){  return readBoolean(RcsSettingsData.SMS_FALLBACK_SERVICE);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void processAndStoreDocument(final List<Document> documents){  documents.forEach(null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.PRIMITIVE_PROPERTY_TYPE__TYPE:    return type != TYPE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static boolean putLong(ContentResolver cr,String name,long value){  return putLongForUser(cr,name,value,UserHandle.myUserId());}  }
class C{  public boolean isRelationship(){  return isManyToOne() || isManyToMany() || isOneToMany()|| isOneToOne()|| isVariableOneToOne();}  }
class C{  String print(JCTree tree){  if (tree == null)   return null;  tree.accept(this);  return result;}  }
class C{  public void connect(){  if (zkStateReader == null) {synchronized (this) {      if (zkStateReader == null) {        ZkStateReader zk=null;        try {          zk=new ZkStateReader(zkHost,zkClientTimeout,zkConnectTimeout);          zk.createClusterStateWatchersAndUpdate();          zkStateReader=zk;        } catch (        InterruptedException e) {          if (zk != null)           zk.close();          Thread.currentThread().interrupt();          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);        }catch (        KeeperException e) {          if (zk != null)           zk.close();          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);        }catch (        IOException e) {          if (zk != null)           zk.close();          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);        }catch (        TimeoutException e) {          if (zk != null)           zk.close();          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);        }catch (        Exception e) {          if (zk != null)           zk.close();          throw e;        }      }    }  }}  }
class C{  public boolean isCNAME(){  return (type == CNAME);}  }
class C{  public InsnNode copy(){  if (this.getClass() == InsnNode.class) {    return copyCommonParams(new InsnNode(insnType,getArgsCount()));  }  return INSN_CLONER.deepClone(this);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.ATOM_ESCAPE;}  }
class C{  public void printExpr(JCTree tree) throws IOException {  printExpr(tree,TreeInfo.noPrec);}  }
class C{  public String stopwordsTipText(){  return "The stopwords algorithms to apply sequentially.";}  }
class C{  private void stopLocation(){  if (_gpsController != null) {    _gpsController.stopLocation();    _gpsController=null;  }  if (_networkLocationController != null) {    _networkLocationController.stopLocation();    _networkLocationController=null;  }  if (_cellLocationController != null) {    _cellLocationController.stopLocation();    _cellLocationController=null;  }  Log.d(TAG,"Stopping geolocation");}  }
class C{  protected BaseMediaSource(String mediaType){  this.mediaType=mediaType;}  }
class C{  public static File createFileOnDevice(String fileDirectory,String fileName,boolean overwrite) throws IOException {  fileDirectory=Environment.getExternalStorageDirectory().getAbsolutePath() + fileDirectory;  File dir=new File(fileDirectory);  if (!dir.exists()) {    if (!dir.mkdirs())     throw new IOException("Cannot create directory containing the file!");  }  File file=new File(fileDirectory,fileName);  if (!file.exists() || overwrite) {    if (file.exists() && overwrite)     if (!file.delete())     throw new IOException("Cannot overwrite the file!");    if (!file.createNewFile())     throw new IOException("Cannot create new file on the device!");  } else {    int i=0;    while (file.exists()) {      file=new File(fileDirectory,fileName + "." + i);      i++;    }    if (!file.createNewFile())     throw new IOException("Cannot create the file on the device!");  }  return file;}  }
class C{  public void registerGatewayType(String type,Class<? extends Gateway> clazz){  gatewayTypes.registerExtension(type,clazz);}  }
class C{  public void updatePhysics(GlowBlock block){}  }
class C{  public int computePastValue(int[][] x,int i,int t){  int pastVal=0;  for (int p=0; p < k; p++) {    pastVal*=numDiscreteValues;    pastVal+=x[t - k + 1 + p][i];  }  return pastVal;}  }
class C{  public static double log2(double x){  return log2_2pd1(x);}  }
class C{  public ForwardEventListener(Element svgElement,Element imgElement){  this.svgElement=svgElement;  this.imgElement=imgElement;}  }
class C{  public static Set<SimpleFeature> readFeatures(String filename,String type) throws IOException {  Map<String,URL> params=new HashMap<String,URL>();  params.put("url",new File(filename).toURI().toURL());  DataStore dataStore=DataStoreFinder.getDataStore(params);  Set<SimpleFeature> features=new HashSet<SimpleFeature>();  if (type == null) {    for (    String fType : dataStore.getTypeNames()) {      addFeatures(dataStore.getFeatureSource(fType),features);    }  } else {    addFeatures(dataStore.getFeatureSource(type),features);  }  return features;}  }
class C{  public static <A>ListTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  private void stackPop(){  stack.pop(2);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.306 -0500",hash_original_method="642ABD7E73780470D384DD3A60166E0E",hash_generated_method="0A0CF9F1A77E65FC8EAE564F16A81F7F") public static Float valueOf(String string) throws NumberFormatException {  return parseFloat(string);}  }
class C{  public void addEventListener(final JIPEventListener listener){  m_eventNotifier.addEventListener(listener);}  }
class C{  public RefactoringStatus renameValidateNewName(ValidateNewName newName) throws RefactoringException {  RefactoringSession session=getRefactoringSession(newName.getSessionId());  if (session instanceof RenameSession) {    return DtoConverter.toRefactoringStatusDto(((RenameSession)session).validateNewName(newName.getNewName()));  } else {    throw new RefactoringException("Validating of new name only available on RenameSession.");  }}  }
class C{  public boolean addAll(double[] array){  boolean changed=false;  for (int i=array.length; i-- > 0; ) {    if (add(array[i])) {      changed=true;    }  }  return changed;}  }
class C{  public Object createImplementation(){  return new GameCanvasImplementation();}  }
class C{  public static <T,S extends Comparator<T>>List<T> mergeIntoList(Iterable<? extends Iterable<T>> iterablesToMerge,S comparator,int limit){  List<T> mergedCols=Lists.newLinkedList();  Iterator<T> mergeIterator=Iterables.mergeSorted(iterablesToMerge,comparator).iterator();  while (mergeIterator.hasNext() && mergedCols.size() < limit) {    mergedCols.add(mergeIterator.next());  }  return mergedCols;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void process(MRequisitionLine rLine) throws Exception {  if (rLine.getM_Product_ID() == 0 && rLine.getC_Charge_ID() == 0) {    log.warning("Ignored Line" + rLine.getLine() + " "+ rLine.getDescription()+ " - "+ rLine.getLineNetAmt());    return;  }  if (!p_ConsolidateDocument && rLine.getM_Requisition_ID() != m_M_Requisition_ID) {    closeOrder();  }  if (m_orderLine == null || rLine.getM_Product_ID() != m_M_Product_ID || rLine.getM_AttributeSetInstance_ID() != m_M_AttributeSetInstance_ID || rLine.getC_Charge_ID() != 0 || m_order == null || m_order.getDatePromised().compareTo(rLine.getDateRequired()) != 0) {    newLine(rLine);    if (m_orderLine == null)     return;  }  m_orderLine.setQty(m_orderLine.getQtyOrdered().add(rLine.getQty()));  rLine.setC_OrderLine_ID(m_orderLine.getC_OrderLine_ID());  rLine.saveEx();}  }
class C{  public T caseInvariant_(Invariant_ object){  return null;}  }
class C{  void switchState(State newstate){  canvas.removeMouseListener(menuStarter);  canvas.removeMouseListener(menuOverlay);  canvas.removeMouseListener(arcball);  canvas.removeMouseMotionListener(arcball);  canvas.removeMouseWheelListener(arcball);switch (newstate) {case EXPLORE:{      canvas.addMouseListener(menuStarter);      canvas.addMouseListener(arcball);      canvas.addMouseMotionListener(arcball);      canvas.addMouseWheelListener(arcball);      break;    }case MENU:{    canvas.addMouseListener(menuOverlay);    break;  }case PREPARATION:{  break;}}if (state != newstate) {this.state=newstate;canvas.repaint();}}  }
class C{  public IncreaseKarmaAction(final double karmaDiff){  this.karmaDiff=karmaDiff;}  }
class C{  public static Scale scale(int scale){  return new Scale(scale);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TMEMBER__ANNOTATIONS:    return getAnnotations();case TypesPackage.TMEMBER__AST_ELEMENT:  if (resolve)   return getAstElement();return basicGetAstElement();case TypesPackage.TMEMBER__DECLARED_FINAL:return isDeclaredFinal();case TypesPackage.TMEMBER__DECLARED_STATIC:return isDeclaredStatic();case TypesPackage.TMEMBER__DECLARED_OVERRIDE:return isDeclaredOverride();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public boolean addVertex(V vertex){  setRoot(vertex);  return true;}  }
class C{  public static Method findSetMethod(Field field,boolean throwExceptions){  String methodName=methodFromField(field,"set");  Method fieldSetMethod;  try {    fieldSetMethod=field.getDeclaringClass().getMethod(methodName,field.getType());  } catch (  Exception e) {    if (throwExceptions) {      throw new IllegalArgumentException("Could not find appropriate set method for " + field);    } else {      return null;    }  }  if (fieldSetMethod.getReturnType() != void.class) {    if (throwExceptions) {      throw new IllegalArgumentException("Return type of set method " + methodName + " returns "+ fieldSetMethod.getReturnType()+ " instead of void");    } else {      return null;    }  }  return fieldSetMethod;}  }
class C{  public ChartDataLogic createChartDataLogic(User user,long categoryId){  return new ChartDataLogic(user,categoryId,mApplication,mChallengeDataSource,mCompletionDataSource,mStatisticsDataSource,this);}  }
class C{  public void loadIdentity(){  mMat[0]=1;  mMat[1]=0;  mMat[2]=0;  mMat[3]=1;}  }
class C{  static public String showTable(final Path[] a,final Path[] pruned){  return showTable(a,pruned,null);}  }
class C{  public T casePropertyAssignmentAnnotationList(PropertyAssignmentAnnotationList object){  return null;}  }
class C{  public LevelCheckingPortal(final int minLevel,final int maxLevel,final String rejectMessage){  super(rejectMessage);  this.minLevel=minLevel;  this.maxLevel=maxLevel;}  }
class C{  protected void onMoved(final int oldX,final int oldY,final int newX,final int newY){}  }
class C{  public List<JCCatch> translateCatchers(List<JCCatch> trees){  for (List<JCCatch> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  private void doRegistration() throws StorageException {  try {    if (!connection.isConnected()) {      connect();    }    if (!isPlatformRegistered()) {      register();    }    serverErrorOccured=false;  } catch (  ServerUnavailableException serverUnavailableException) {    if (serverUnavailableException.isServerTimeout()) {      log.error("Server timeout while trying to register something at the server.");    } else {      if (!serverErrorOccured) {        log.error("Server unavailable while trying to register something at the server.");      }      serverErrorOccured=true;    }  }catch (  RegistrationException registrationException) {    log.error("Registration exception occurred while trying to register something at the server.",registrationException);  }catch (  ConnectException connectException) {    if (!serverErrorOccured) {      log.error("Connection to the server failed.",connectException);    }    serverErrorOccured=true;  }}  }
class C{  public boolean isDiscard(){  return (flags & FLAG_DISCARD) != 0;}  }
class C{  public static String cdmaCellLocationJSON(CdmaCellLocation location){  final Calendar calendar=Calendar.getInstance();  final JSONObject json=new JSONObject();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 && location != null) {    try {      json.put("provider",CELLLOCATION_PROVIDER);      json.put("type",CDMA);      json.put("timestamp",calendar.getTimeInMillis());      json.put("baseStationId",location.getBaseStationId());      json.put("networkId",location.getNetworkId());      json.put("systemId",location.getSystemId());      json.put("baseStationLatitude",CdmaCellLocation.convertQuartSecToDecDegrees(location.getBaseStationLatitude()));      json.put("baseStationLongitude",CdmaCellLocation.convertQuartSecToDecDegrees(location.getBaseStationLongitude()));    } catch (    JSONException exc) {      logJSONException(exc);    }  }  return json.toString();}  }
class C{  public Map<ProjectComparisonEntry,String> readDocumentation(ProjectComparison comparison,int[] implIndices){  final Map<ProjectComparisonEntry,String> result=new HashMap<>();  final ResourceSet resourceSetForDocRetrieval=n4jsCore.createResourceSet(Optional.absent());  comparison.getAllEntries().forEach(null);  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatainsertdatabeginning.class,args);}  }
class C{  public TLongHashSet(int initialCapacity,float loadFactor,TLongHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public void addDiscoveredEventListener(Executor executor,PeerDiscoveredEventListener listener){  peerDiscoveredEventListeners.add(new ListenerRegistration<PeerDiscoveredEventListener>(checkNotNull(listener),executor));}  }
class C{  public Object[] unwrapBinariesInArrayIfNeeded(Object[] arr,boolean keepBinary,boolean cpy){  if (BinaryUtils.knownArray(arr))   return arr;  Object[] res=new Object[arr.length];  for (int i=0; i < arr.length; i++)   res[i]=unwrapBinary(arr[i],keepBinary,cpy);  return res;}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public static boolean isEmpty(CharSequence value){  return value == null || value.length() == 0;}  }
class C{  public void resolvePrefixTables() throws TransformerException {  super.resolvePrefixTables();  StylesheetRoot stylesheet=getStylesheetRoot();  if ((null != m_namespace) && (m_namespace.length() > 0)) {    NamespaceAlias nsa=stylesheet.getNamespaceAliasComposed(m_namespace);    if (null != nsa) {      m_namespace=nsa.getResultNamespace();      String resultPrefix=nsa.getStylesheetPrefix();      if ((null != resultPrefix) && (resultPrefix.length() > 0))       m_rawName=resultPrefix + ":" + m_localName; else       m_rawName=m_localName;    }  }  if (null != m_avts) {    int n=m_avts.size();    for (int i=0; i < n; i++) {      AVT avt=(AVT)m_avts.get(i);      String ns=avt.getURI();      if ((null != ns) && (ns.length() > 0)) {        NamespaceAlias nsa=stylesheet.getNamespaceAliasComposed(m_namespace);        if (null != nsa) {          String namespace=nsa.getResultNamespace();          String resultPrefix=nsa.getStylesheetPrefix();          String rawName=avt.getName();          if ((null != resultPrefix) && (resultPrefix.length() > 0))           rawName=resultPrefix + ":" + rawName;          avt.setURI(namespace);          avt.setRawName(rawName);        }      }    }  }}  }
class C{  protected Object readResolve() throws ObjectStreamException {  throw new InvalidObjectException("Load balancer cannot be used from remote node.");}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  int nodeType;  doc=(Document)load("hc_staff",false);  rootNode=doc.getDocumentElement();  nodeType=(int)rootNode.getNodeType();  assertEquals("nodeElementNodeTypeAssert1",1,nodeType);}  }
class C{  public final boolean isInstance(Object obj){  return javaClass.isInstance(obj);}  }
class C{  public void onNewIntentWithGesture(Intent intent){  mIntentToken=new byte[32];  mSecureRandom.nextBytes(mIntentToken);  intent.putExtra(EXTRA_USER_GESTURE_TOKEN,mIntentToken);  mUri=IntentHandler.getUrlFromIntent(intent);}  }
class C{  public OutOfOffHeapMemoryException(String message){  super(message);}  }
class C{  protected int endGap(){  return (current == -1) ? 0 : 1;}  }
class C{  private FormData prepareFormDataSet(FormFields form){  List<HtmlParameter> formDataSet=new LinkedList<>();  List<HtmlParameter> submitFields=new ArrayList<>();  Iterator<FormField> it=form.iterator();  while (it.hasNext()) {    FormField field=it.next();    if (log.isDebugEnabled()) {      log.debug("New form field: " + field.getDebugInfo());    }    List<HtmlParameter> currentList=formDataSet;    if (field.getFormControl().getFormControlType().isSubmit()) {      currentList=submitFields;    }    for (    String value : getValues(field)) {      currentList.add(new HtmlParameter(Type.form,field.getName(),value));    }  }  return new FormData(formDataSet,submitFields);}  }
class C{  public static CorsServiceBuilder forOrigins(final String... origins){  requireNonNull(origins,"origins");  for (int i=0; i < origins.length; i++) {    if (origins[i] == null) {      throw new NullPointerException("origins[" + i + ']');    }  }  return new CorsServiceBuilder(origins);}  }
class C{  public int typeId(String typeName){  A.notNull(typeName,"typeName");  int id=isLowerCase ? lowerCaseHashCode(typeName) : typeName.hashCode();  if (id != 0)   return id; else {    throw new BinaryObjectException("Binary ID mapper resolved type ID to zero " + "(either change type's name or use custom ID mapper) " + "[name=" + typeName + ", isLowerCase="+ isLowerCase+ "]");  }}  }
class C{  public boolean isSetNewshort(){  return EncodingUtils.testBit(__isset_bitfield,__NEWSHORT_ISSET_ID);}  }
class C{  public mxCellCodec(Object template){  this(template,null,null,null);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.ContentVersionList buildContentVersionList(List<org.smpte_ra.schemas.st2067_2_2013.ContentVersionType> contentVersions){  org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.ContentVersionList contentVersionList=new CompositionPlaylistType.ContentVersionList();  contentVersionList.getContentVersion().addAll(contentVersions);  return contentVersionList;}  }
class C{  public HadoopDaemon(){  super();  runnable=this;  enqueueIfNeeded();}  }
class C{  static String valueToString(Object value,int indentFactor,int indent) throws JSONException {  if (value == null) {    return "null";  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean) {    return value.toString();  }  if (value instanceof JSONObject) {    return ((JSONObject)value).toString(indentFactor,indent);  }  if (value instanceof JSONArray) {    return ((JSONArray)value).toString(indentFactor,indent);  }  return quote(value.toString());}  }
class C{  @RequestMapping(value="/interests",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional public ResponseEntity<Void> create(@Valid @RequestBody Interest interest) throws URISyntaxException {  log.debug("REST request to save Interest : {}",interest);  if (interest.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new interest cannot already have an ID").build();  }  ownerService.checkNewOwner(interest);  interest=interestRepository.save(interest);  return ResponseEntity.created(new URI("/api/interests/" + interest.getId())).build();}  }
class C{  @Override public DefaultAsciiArray withColumns(List<String>... columns){  for (  List<String> column : columns) {    addColumn(column);  }  return this;}  }
class C{  public final CC sizeGroup(String... xy){switch (xy.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + xy.length);case 2:  sizeGroupY(xy[1]);case 1:sizeGroupX(xy[0]);}return this;}  }
class C{  @Override protected String escapeColumnValue(Object value){  if (value != null && !value.toString().trim().equalsIgnoreCase("")) {    value=removeHtmlTagsAndSpaces(value.toString());    return "\"" + StringUtils.replace(StringUtils.trim(value.toString()),"\"","\"\"") + "\"";  }  return null;}  }
class C{  private HttpResponse sendRequest(State state,AndroidHttpClient client,HttpGet request) throws StopRequest {  try {    return client.execute(request);  } catch (  IllegalArgumentException ex) {    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"while trying to execute request: " + ex.toString(),ex);  }catch (  IOException ex) {    logNetworkState();    throw new StopRequest(getFinalStatusForHttpError(state),"while trying to execute request: " + ex.toString(),ex);  }}  }
