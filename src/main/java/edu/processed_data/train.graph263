class C{  public final AC fill(int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setFill(true);  }  return this;}  }
class C{  private CopycatServer createServer(Member member){  CopycatServer.Builder builder=CopycatServer.builder(member.clientAddress(),member.serverAddress()).withType(member.type()).withTransport(new LocalTransport(registry)).withStorage(Storage.builder().withStorageLevel(StorageLevel.MEMORY).withMaxSegmentSize(1024 * 1024).withCompactionThreads(1).build()).withStateMachine(null);  CopycatServer server=builder.build();  server.serializer().disableWhitelist();  servers.add(server);  return server;}  }
class C{  public void addImageTask(ImageTask imageTask,CubeImageView imageView){  if (!mHasBeenAddedToComponentManager) {    CLog.w(LOG_TAG,"ImageLoader has not been add to a Component Manager.",this);  }  LoadImageTask runningTask=mLoadWorkList.get(imageTask.getIdentityKey());  if (runningTask != null) {    if (imageView != null) {      if (DEBUG) {        CLog.d(LOG_TAG,MSG_ATTACK_TO_RUNNING_TASK,imageTask,runningTask.getImageTask());      }      runningTask.getImageTask().addImageView(imageView);      runningTask.getImageTask().notifyLoading(mImageLoadHandler,imageView);    }    return;  } else {    imageTask.addImageView(imageView);  }  imageTask.onLoading(mImageLoadHandler);  LoadImageTask loadImageTask=createLoadImageTask(imageTask);  mLoadWorkList.put(imageTask.getIdentityKey(),loadImageTask);  mImageTaskExecutor.execute(loadImageTask);}  }
class C{  public boolean isXMLSearch(){  return xml != null && xml.length() > 0;}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    try (IgniteCache<Integer,String> cache=ignite.getOrCreateCache(CACHE_NAME)){      putGet(cache);      putAllGetAll(cache);    }   } }  }
class C{  public static String mnem(int opcode){  return Mneumonics.mnem[opcode];}  }
class C{  private LdapAttribute(String id,DirContext baseCtx,Name rdn){  super(id);  this.baseCtx=baseCtx;  this.rdn=rdn;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  static void readNextPacket(ReadableByteChannel channel,ByteBuffer buffer) throws IOException {  assert !buffer.hasRemaining();  try {    buffer.clear();    int read=channel.read(buffer);    if (read == -1) {      try {        channel.close();      } catch (      IOException e) {      }      throw new ServiceUnavailableException("Connection terminated while receiving data. This can happen due to network " + "instabilities, or due to restarts of the database.");    }  } catch (  ClosedByInterruptException e) {    throw new ServiceUnavailableException("Connection to the database was lost because someone called `interrupt()` on the driver " + "thread waiting for a reply. " + "This normally happens because the JVM is shutting down, but it can also happen because your "+ "application code or some "+ "framework you are using is manually interrupting the thread.");  }catch (  IOException e) {    String message=e.getMessage() == null ? e.getClass().getSimpleName() : e.getMessage();    throw new ServiceUnavailableException("Unable to process request: " + message + " buffer: \n"+ BytePrinter.hex(buffer),e);  } finally {    buffer.flip();  }}  }
class C{  public PacketReceivedEvent(Object source,Packet packet){  super(source,PACKET_RECEIVED);  this.packet=packet;}  }
class C{  public void start(){  stopped=false;  focus();}  }
class C{  public static int binarySearchLongs(Memory mem,int fromLongIndex,int toLongIndex,long key){  assertBounds(fromLongIndex << 3,(toLongIndex - fromLongIndex) << 3,mem.getCapacity());  int low=fromLongIndex;  int high=toLongIndex - 1;  while (low <= high) {    int mid=(low + high) >>> 1;    long midVal=mem.getLong(mid << 3);    if (midVal < key) {      low=mid + 1;    } else     if (midVal > key) {      high=mid - 1;    } else {      return mid;    }  }  return -(low + 1);}  }
class C{  private void initLocalOrdering(int[] charsLtoV,byte[] levels,int start,int limit){  this.graphicCount=limit - start;  if (charsLtoV == null || charsLtoV.length == graphicCount) {    this.charsLtoV=charsLtoV;  } else {    this.charsLtoV=BidiUtils.createNormalizedMap(charsLtoV,levels,start,limit);  }  if (levels == null || levels.length == graphicCount) {    this.levels=levels;  } else {    this.levels=new byte[graphicCount];    System.arraycopy(levels,start,this.levels,0,graphicCount);  }}  }
class C{  public static void print(char[] word,int missed){  System.out.print("The word is ");  System.out.print(word);  System.out.println(" You missed " + missed + " time");}  }
class C{  private Iterator<Expression> iteratorFromExpression(final Expression expr){  final Iterator<Expression> it=expressions.iterator();  while (it.hasNext()) {    if (expr == it.next()) {      break;    }  }  return it;}  }
class C{  void checkRequiredChildren(Locator locator) throws SAXParseException {  ArrayList<Element> requiredChildren=this.requiredChilden;  if (requiredChildren != null) {    for (int i=requiredChildren.size() - 1; i >= 0; i--) {      Element child=requiredChildren.get(i);      if (!child.visited) {        throw new BadXmlException("Element named " + this + " is missing required"+ " child element named "+ child+ ".",locator);      }    }  }}  }
class C{  private ASCIIHexDecode(ByteBuffer buf){  this.buf=buf;}  }
class C{  public UDToast show(CharSequence toastMessage){  if (toastMessage != null) {    ToastUtil.showToast(getContext(),toastMessage);  }  return this;}  }
class C{  public boolean isHighlightable(OMGraphic omg){  return true;}  }
class C{  private void superActivate(){  super.activate();}  }
class C{  @Override public boolean add(E o){  return offer(o);}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  GeneralPath path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);  Element elem=element.getChild("path");  float[] coord=new float[6];  java.util.List<Element> list=elem.getChildren("vertex");  for (int j=0; j < list.size(); j++) {    Element e=list.get(j);    int type=getInt(e,"type");    for (int i=0; i < coord.length; i++) {      coord[i]=getFloat(e,"idx" + i);    }switch (type) {case PathIterator.SEG_MOVETO:      path.moveTo(coord[0],coord[1]);    break;case PathIterator.SEG_LINETO:  path.lineTo(coord[0],coord[1]);break;case PathIterator.SEG_QUADTO:path.quadTo(coord[0],coord[1],coord[2],coord[3]);break;case PathIterator.SEG_CUBICTO:path.curveTo(coord[0],coord[1],coord[2],coord[3],coord[4],coord[5]);break;case PathIterator.SEG_CLOSE:path.closePath();break;}}PositionablePolygon ps=new PositionablePolygon(ed,path);ed.putItem(ps);loadCommonAttributes(ps,Editor.MARKERS,element);}  }
class C{  public void removeDispatcherListener(DispatcherListener listener){  removeListener(BeforeDispatch,listener);  removeListener(AfterDispatch,listener);}  }
class C{  public static String rowToString(JSONArray ja){  StringBuilder sb=new StringBuilder();  for (int i=0; i < ja.length(); i+=1) {    if (i > 0) {      sb.append(',');    }    Object object=ja.opt(i);    if (object != null) {      String string=object.toString();      if (string.length() > 0 && (string.indexOf(',') >= 0 || string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '"')) {        sb.append('"');        int length=string.length();        for (int j=0; j < length; j+=1) {          char c=string.charAt(j);          if (c >= ' ' && c != '"') {            sb.append(c);          }        }        sb.append('"');      } else {        sb.append(string);      }    }  }  sb.append('\n');  return sb.toString();}  }
class C{  @Override public boolean isInfinite() throws RemoteException {  return false;}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  @Override public Collection<Partition<RabbitMQLogsInputOperator>> definePartitions(Collection<Partition<RabbitMQLogsInputOperator>> partitions,PartitioningContext context){  if (routingKeys == null || routingKeys.length == 0) {    return partitions;  }  ArrayList<Partition<RabbitMQLogsInputOperator>> newPartitions=new ArrayList<Partition<RabbitMQLogsInputOperator>>();  for (  String rKey : routingKeys) {    try {      RabbitMQLogsInputOperator oper=new RabbitMQLogsInputOperator();      oper.host=host;      oper.port=port;      oper.exchange=exchange;      oper.exchangeType=exchangeType;      oper.registry=registry;      oper.routingKeys=routingKeys;      oper.routingKey=rKey;      oper.queueName=rKey;      Partition<RabbitMQLogsInputOperator> partition=new DefaultPartition<RabbitMQLogsInputOperator>(oper);      newPartitions.add(partition);    } catch (    Throwable ex) {      DTThrowable.rethrow(ex);    }  }  return newPartitions;}  }
class C{  public boolean isDefined(Object key){  if (key instanceof StyleConstants) {    Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);    if (cssKey != null) {      return super.isDefined(cssKey);    }  }  return super.isDefined(key);}  }
class C{  public s addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public HashedTextVectorCreator(int dimensionSize,Tokenizer tokenizer,WordWeighting weighting){  if (dimensionSize <= 1)   throw new ArithmeticException("Vector dimension must be a positive value");  this.dimensionSize=dimensionSize;  this.tokenizer=tokenizer;  this.weighting=weighting;}  }
class C{  private void saveSelection(){  if (m_changed && m_adTabPanel != null) {    int row=m_adTabPanel.getGridTab().getCurrentRow();    if (row >= 0)     m_C_ValidCombination_ID=((Integer)m_mTab.getValue(row,"C_ValidCombination_ID")).intValue();    log.config("(" + row + ") - "+ m_C_ValidCombination_ID);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void useMock(AmazonEC2Client ec2){  ec2_stub=ec2;}  }
class C{  public static final String stringEncode(final double lon,final double lat){  return stringEncode(lon,lat,12);}  }
class C{  public void removePanListener(PanListener listener){  mTouchHandler.removePanListener(listener);}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now \"resumed\")");}  }
class C{  public void addRow(Expression[] expr){  list.add(expr);}  }
class C{  private static CharBuffer grow(CharBuffer buf){  char[] copy=Arrays.copyOf(buf.array(),buf.capacity() * 2);  CharBuffer bigger=CharBuffer.wrap(copy);  bigger.position(buf.position());  bigger.limit(buf.limit());  return bigger;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(8);  newVector.addElement(new Option("\tUse conservative forward search","-C",0,"-C"));  newVector.addElement(new Option("\tUse a backward search instead of a" + "\n\tforward one.","-B",0,"-B"));  newVector.addElement(new Option("\tSpecify a starting set of attributes." + "\n\tEg. 1,3,5-7.","P",1,"-P <start set>"));  newVector.addElement(new Option("\tProduce a ranked list of attributes.","R",0,"-R"));  newVector.addElement(new Option("\tSpecify a theshold by which attributes" + "\n\tmay be discarded from the ranking." + "\n\tUse in conjuction with -R","T",1,"-T <threshold>"));  newVector.addElement(new Option("\tSpecify number of attributes to select","N",1,"-N <num to select>"));  newVector.addElement(new Option("\t" + numExecutionSlotsTipText() + " (default 1)\n","-num-slots",1,"-num-slots <int>"));  newVector.addElement(new Option("\tPrint debugging output","D",0,"-D"));  return newVector.elements();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static String toString(int mod){  return java.lang.reflect.Modifier.toString(mod);}  }
class C{  public static <T extends Node>List<T> findNodes(List<Node> nodes,Class<T> cls){  List<T> results=new ArrayList<>();  findNodes(nodes,cls,results);  return results;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public int existsInCallStack(String packageorclass,String method){  Pattern porc=Pattern.compile(packageorclass);  Pattern meth=Pattern.compile(method);  StackTraceElement[] elements=Thread.currentThread().getStackTrace();  for (int i=0; i < elements.length; i++) {    if (porc.matcher(elements[i].getClassName()).matches() && meth.matcher(elements[i].getMethodName()).matches())     return i;  }  return -1;}  }
class C{  public boolean ready() throws IOException {  return (in.available() > 0);}  }
class C{  public static Matrix createDiagonalMatrix(List<Double> values){  Matrix m=new Matrix(values.size(),values.size(),0);  for (int i=0; i < values.size(); i++) {    m.set(i,i,values.get(i));  }  return m;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void onPostExecute(String address){  if (!TextUtils.isEmpty(address))   mContactAddressMapper.startMapperActivity(address); else   Toast.makeText(MapFromContactsAsyncActivity.this,"No address found",Toast.LENGTH_SHORT).show();}  }
class C{  public void remove() throws ServerException, ForbiddenException {  virtualFile.delete(null);}  }
class C{  private void updateReceivedNotifications(DefaultMutableTreeNode emitter,long received,boolean bold){  String text=Messages.NOTIFICATIONS + "[" + received+ "]";  DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)mbeansTab.getTree().getLastSelectedPathComponent();  if (bold && emitter != selectedNode) {    text="<html><b>" + text + "</b></html>";  }  updateNotificationsNodeLabel(emitter,text);}  }
class C{  public BaseDateTime(long instant,Chronology chronology){  super();  iChronology=checkChronology(chronology);  iMillis=checkInstant(instant,iChronology);  if (iChronology.year().isSupported()) {    iChronology.year().set(iMillis,iChronology.year().get(iMillis));  }}  }
class C{  public static boolean looksLikeAFontWeight(String val){  return FONT_WEIGHTS.get(val) != null;}  }
class C{  public static Object buildMultiDimensionalArray(int methodId,int[] numElements,RVMArray arrayType){  RVMMethod method=MemberReference.getMethodRef(methodId).peekResolvedMethod();  if (VM.VerifyAssertions)   VM._assert(method != null);  return buildMDAHelper(method,numElements,0,arrayType);}  }
class C{  public void testInvokeAny3() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(null);    try {      e.invokeAny(l);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  private void removeFromCache(){  String key=mProfileName;  if (isArtist()) {    key=mArtistName;  } else   if (isAlbum()) {    key=ImageFetcher.generateAlbumCacheKey(mProfileName,mArtistName);  }  mImageFetcher.removeFromCache(key);  SystemClock.sleep(80);}  }
class C{  public PointCloud3D clear(){  points.clear();  min=Vec3D.MAX_VALUE.copy();  max=Vec3D.NEG_MAX_VALUE.copy();  centroid=new Vec3D();  return this;}  }
class C{  public ClusterMetrics metrics(){  return ClusterMetricsSnapshot.deserialize(metrics,0);}  }
class C{  public ExceptionInInitializerError(){  initCause(null);}  }
class C{  private List<String> validateExpectedPartitionValues(List<String> expectedPartitionValues){  Assert.notEmpty(expectedPartitionValues,"At least one expected partition value must be specified.");  Set<String> validatedExpectedPartitionValuesSet=new LinkedHashSet<>();  for (  String expectedPartitionValue : expectedPartitionValues) {    String trimmedExpectedPartitionValue=alternateKeyHelper.validateStringParameter("An","expected partition value",expectedPartitionValue);    if (validatedExpectedPartitionValuesSet.contains(trimmedExpectedPartitionValue)) {      throw new IllegalArgumentException(String.format("Duplicate expected partition value \"%s\" found.",trimmedExpectedPartitionValue));    }    validatedExpectedPartitionValuesSet.add(trimmedExpectedPartitionValue);  }  List<String> validatedExpectedPartitionValues=new ArrayList<>(validatedExpectedPartitionValuesSet);  Collections.sort(validatedExpectedPartitionValues);  return validatedExpectedPartitionValues;}  }
class C{  public boolean isHideZeroSized(){  return hideZeroSized;}  }
class C{  public void increment(){  if (mCount == 0 && !mFirstIncRunnables.isEmpty()) {    int numRunnables=mFirstIncRunnables.size();    for (int i=0; i < numRunnables; i++) {      mFirstIncRunnables.get(i).run();    }  }  mCount++;}  }
class C{  public OracleBatchException(Throwable cause,int processedCount){  super(cause);  this.processedCount=processedCount;}  }
class C{  public String[] categoryArray(){  return keyToValue.values().toArray(new String[size()]);}  }
class C{  public ArrayList<CamusRequest> fetchLatestOffsetAndCreateEtlRequests(JobContext context,HashMap<LeaderInfo,ArrayList<TopicAndPartition>> offsetRequestInfo){  ArrayList<CamusRequest> finalRequests=new ArrayList<CamusRequest>();  for (  LeaderInfo leader : offsetRequestInfo.keySet()) {    SimpleConsumer consumer=new SimpleConsumer(leader.getUri().getHost(),leader.getUri().getPort(),CamusJob.getKafkaTimeoutValue(context),CamusJob.getKafkaBufferSize(context),CamusJob.getKafkaClientName(context));    PartitionOffsetRequestInfo partitionLatestOffsetRequestInfo=new PartitionOffsetRequestInfo(kafka.api.OffsetRequest.LatestTime(),1);    PartitionOffsetRequestInfo partitionEarliestOffsetRequestInfo=new PartitionOffsetRequestInfo(kafka.api.OffsetRequest.EarliestTime(),1);    Map<TopicAndPartition,PartitionOffsetRequestInfo> latestOffsetInfo=new HashMap<TopicAndPartition,PartitionOffsetRequestInfo>();    Map<TopicAndPartition,PartitionOffsetRequestInfo> earliestOffsetInfo=new HashMap<TopicAndPartition,PartitionOffsetRequestInfo>();    ArrayList<TopicAndPartition> topicAndPartitions=offsetRequestInfo.get(leader);    for (    TopicAndPartition topicAndPartition : topicAndPartitions) {      latestOffsetInfo.put(topicAndPartition,partitionLatestOffsetRequestInfo);      earliestOffsetInfo.put(topicAndPartition,partitionEarliestOffsetRequestInfo);    }    OffsetResponse latestOffsetResponse=consumer.getOffsetsBefore(new OffsetRequest(latestOffsetInfo,kafka.api.OffsetRequest.CurrentVersion(),CamusJob.getKafkaClientName(context)));    OffsetResponse earliestOffsetResponse=consumer.getOffsetsBefore(new OffsetRequest(earliestOffsetInfo,kafka.api.OffsetRequest.CurrentVersion(),CamusJob.getKafkaClientName(context)));    consumer.close();    for (    TopicAndPartition topicAndPartition : topicAndPartitions) {      long latestOffset=latestOffsetResponse.offsets(topicAndPartition.topic(),topicAndPartition.partition())[0];      long earliestOffset=earliestOffsetResponse.offsets(topicAndPartition.topic(),topicAndPartition.partition())[0];      CamusRequest etlRequest=new EtlRequest(context,topicAndPartition.topic(),Integer.toString(leader.getLeaderId()),topicAndPartition.partition(),leader.getUri());      etlRequest.setLatestOffset(latestOffset);      etlRequest.setEarliestOffset(earliestOffset);      finalRequests.add(etlRequest);    }  }  return finalRequests;}  }
class C{  public final DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException, FormatException {  resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);  FinderPatternFinder finder=new FinderPatternFinder(image,resultPointCallback);  FinderPatternInfo info=finder.find(hints);  return processFinderPatternInfo(info);}  }
class C{  private void print(Object o){  if (logWriter != null) {    System.out.print(o);  }}  }
class C{  public static String calculateCertHexHash(byte[] bytes) throws Exception {  return hexDigest(DEFAULT_CERT_HASH_ALGORITHM_ID,bytes);}  }
class C{  public InterfacesComponent(InterfacesContainingModel interfacesContainingModel,WizardComponentContainer container){  super(container);  this.model=interfacesContainingModel;  Composite parent=getParentComposite();  Label interfacesLabel=new Label(parent,SWT.NONE);  GridData interfacesLabelGridData=fillLabelDefaults();  interfacesLabelGridData.verticalAlignment=SWT.TOP;  interfacesLabel.setLayoutData(interfacesLabelGridData);  interfacesLabel.setText("Interfaces:");  interfacesTable=new Table(parent,SWT.BORDER | SWT.FULL_SELECTION | SWT.VIRTUAL);  interfacesTable.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));  Composite interfacesButtonsComposite=new Composite(parent,SWT.NONE);  interfacesButtonsComposite.setLayoutData(GridDataFactory.fillDefaults().create());  interfacesButtonsComposite.setLayout(GridLayoutFactory.swtDefaults().numColumns(1).margins(0,0).create());  interfacesAddButton=new Button(interfacesButtonsComposite,SWT.NONE);  interfacesAddButton.setText("Add...");  interfacesAddButton.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).create());  interfacesRemoveButton=new Button(interfacesButtonsComposite,SWT.NONE);  interfacesRemoveButton.setText("Remove");  interfacesRemoveButton.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).create());  setupBindings();}  }
class C{  public void mouseRelease(int x,int y,int mouseButton){  mouseX=x;  mouseY=y;  if (Math.abs(velocity) > 10) {    amplitude=0.8 * velocity;    timestamp=System.currentTimeMillis();    double length=Math.sqrt(lastDx * lastDx + lastDy * lastDy);    lastDx/=length;    lastDy/=length;  } else {    amplitude=0;    updateLookAt();  }}  }
class C{  public void addCollector(Collector collector){  collectors.add(collector);}  }
class C{  private void markErrors(IJavaProject project,List<JavacError> errors){  for (  JavacError error : errors) {    if (error.file == null) {      continue;    }    IResource file=ResourceUtils.getFile(project,error.file);    if (file == null)     continue;    MarkerUtil.addMarker(error.message,project.getProject(),file,error.lineNumber,error.errorKey,error.errorArguments,error.startPosition,error.endPosition);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isExternalIdAlreadyTaken(String externalId,String id){  return resourceDao.isExternalIdAlreadyTaken(externalId,id);}  }
class C{  public void start(){  try {    demoDocument=DocumentHelper.parseText(DEMO_XML);    new XMLWriter(OutputFormat.createPrettyPrint()).write(demoDocument);  } catch (  DocumentException documentEx) {    documentEx.printStackTrace();  }catch (  Exception ex) {    ex.printStackTrace();  }  demoXPath();  repaint();}  }
class C{  public GeneralSubtrees(GeneralSubtree[] subtrees){  this.subtrees=new ArrayList<GeneralSubtree>(Arrays.asList(subtrees));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.634 -0400",hash_original_method="18307823C6D4849DA161FBBDECA74E79",hash_generated_method="8ACAF867DB0ABDB5F0E4708E7AA920D4") private void calculateItemFittingMetadata(int width){  int maxNumItemsPerRow=mMaxItemsPerRow;  int numItems=getChildCount();  for (int i=0; i < numItems; i++) {    LayoutParams lp=(LayoutParams)getChildAt(i).getLayoutParams();    lp.maxNumItemsOnRow=1;    for (int curNumItemsPerRow=maxNumItemsPerRow; curNumItemsPerRow > 0; curNumItemsPerRow--) {      if (lp.desiredWidth < width / curNumItemsPerRow) {        lp.maxNumItemsOnRow=curNumItemsPerRow;        break;      }    }  }}  }
class C{  public static void installJsfJsIfNecessary(FacesContext context){  if (isJsfJsInstalled(context)) {    return;  }  ResourceHandler resourceHandler=context.getApplication().getResourceHandler();  if (resourceHandler.isResourceRendered(context,JSF_SCRIPT_RESOURCE_NAME,JSF_SCRIPT_LIBRARY_NAME)) {    return;  }  UIOutput output=new UIOutput();  output.setRendererType("javax.faces.resource.Script");  output.getAttributes().put("name",JSF_SCRIPT_RESOURCE_NAME);  output.getAttributes().put("library",JSF_SCRIPT_LIBRARY_NAME);  context.getViewRoot().addComponentResource(context,output,"head");}  }
class C{  public void addProperty(String p){  if (m_missingProperties == null) {    m_missingProperties=new Vector<String>();  }  m_missingProperties.addElement(p);}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  public void recordEvent(InternalCacheEvent event){  EventID eventID=event.getEventId();  if (ignoreEvent(event,eventID)) {    return;  }  LocalRegion lr=(LocalRegion)event.getRegion();  ThreadIdentifier membershipID=new ThreadIdentifier(eventID.getMembershipID(),eventID.getThreadID());  VersionTag tag=null;  if (lr.getServerProxy() == null) {    tag=event.getVersionTag();    RegionVersionVector v=((LocalRegion)event.getRegion()).getVersionVector();    if (v != null && tag != null) {      tag.setMemberID(v.getCanonicalId(tag.getMemberID()));      if (tag.getPreviousMemberID() != null) {        tag.setPreviousMemberID(v.getCanonicalId(tag.getPreviousMemberID()));      }    }  }  if (lr.concurrencyChecksEnabled && (event.getOperation().isPutAll() || event.getOperation().isRemoveAll()) && lr.getServerProxy() == null) {    recordBulkOpEvent(event,membershipID);  }  EventSeqnoHolder newEvh=new EventSeqnoHolder(eventID.getSequenceID(),tag);  if (logger.isTraceEnabled()) {    logger.trace("region event tracker recording {}",event);  }  recordSeqno(membershipID,newEvh);}  }
class C{  public Builder(Activity activity,String tag){  this.activity=activity;  showcaseView=new ShowcaseView(activity);  showcaseView.setShowcaseTag(tag);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.034 -0500",hash_original_method="DD851A8041FFB3055294FF15D1DC9C59",hash_generated_method="30EE3B42F5C6B086AF598CBF64677C2F") public boolean checkError(){  OutputStream delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError || delegate.checkError();}  }
class C{  private void useItemInSlot(final Player player,final RPAction action){  final Entity object=EntityHelper.entityFromSlot(player,action);  if ((object != null) && ItemAccessPermissions.mayAccessContainedEntity(player,object)) {    tryUse(player,object);  }}  }
class C{  protected Color colorForRow(int row){  return (row % 2 == 0) ? alternateRowColor() : getBackground();}  }
class C{  public Object callFunction(Object[] inputs,int function,int numFunctions){  if (function == F_ADD) {    return (Float)inputs[0] + (Float)inputs[1];  } else   if (function == F_SUB) {    return (Float)inputs[0] - (Float)inputs[1];  } else   if (function == F_MUL) {    return (Float)inputs[0] * (Float)inputs[1];  } else   if (function == F_DIV) {    if ((Float)inputs[1] == 0)     return 1f;    return (Float)inputs[0] / (Float)inputs[1];  } else   throw new IllegalArgumentException("Function #" + function + " is unknown.");}  }
class C{  @SuppressWarnings("rawtypes") public EachRowEditor(JTable table){  this.table=table;  editors=new Hashtable();  defaultEditor=new DefaultCellEditor(new JTextField());}  }
class C{  private Object readResponse(final boolean asLineList){  final boolean ok=isServerResponseOk();  String responseCharset=DEFAULT_CHARSET;  final String contentType=httpUrlConnection.getHeaderField("Content-Type");  if (contentType != null) {    for (    final String token : contentType.replace(" ","").split(";")) {      if (token.startsWith("charset=")) {        responseCharset=token.split("=",2)[1];        break;      }    }  }  try (final BufferedReader reader=new BufferedReader(new InputStreamReader(ok ? httpUrlConnection.getInputStream() : httpUrlConnection.getErrorStream(),responseCharset))){    if (asLineList) {      String line;      final List<String> lineList=new ArrayList<>();      while ((line=reader.readLine()) != null)       lineList.add(line);      state=State.RESPONSE_PROCESSED;      return lineList;    } else {      final StringBuilder responseBuilder=new StringBuilder();      final char[] buffer=new char[64];      int charsRead;      while ((charsRead=reader.read(buffer)) > 0)       responseBuilder.append(buffer,0,charsRead);      state=State.RESPONSE_PROCESSED;      return responseBuilder.toString();    }  } catch (  final IOException ie) {    Env.LOGGER.error("Failed to read response from server: " + url,ie);  }  state=State.PROCESSING_RESPONSE_FAILED;  return null;}  }
class C{  public boolean hasPrevious(){  return peekBackwards() != null;}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    value=NULL_OBJECT;  }  for (int i=1; i < elementData.length; i=i + 2) {    if (elementData[i] == value) {      return true;    }  }  return false;}  }
class C{  @Override protected Collection<AttributeMetaData> modifyAttributeMetaData(ExampleSetMetaData emd,AttributeMetaData amd){  return null;}  }
class C{  private void scheduleUpdate(){  mHandler.removeCallbacks(mCreateTinyPlanetRunnable);  mHandler.postDelayed(mCreateTinyPlanetRunnable,RENDER_DELAY_MILLIS);}  }
class C{  public Vector3f cross(float otherX,float otherY,float otherZ,Vector3f result){  if (result == null)   result=new Vector3f();  float resX=((y * otherZ) - (z * otherY));  float resY=((z * otherX) - (x * otherZ));  float resZ=((x * otherY) - (y * otherX));  result.set(resX,resY,resZ);  return result;}  }
class C{  public List<Appointment> searchAppointmentByName(String SID,String appointmentName){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      return appointmentLogic.searchAppointmentByName(appointmentName);    }  } catch (  Exception err) {    log.error("[searchAppointmentByName]",err);  }  return null;}  }
class C{  public String hget(final String key,final String field){  checkIsInMulti();  client.hget(key,field);  return client.getBulkReply();}  }
class C{  public java.lang.String substring(int beginIndex){  return null;}  }
class C{  protected String signJWT(JWTClaimsSet jwtClaimsSet,OAuthTokenReqMessageContext request) throws IdentityOAuth2Exception {  if (JWSAlgorithm.RS256.equals(signatureAlgorithm) || JWSAlgorithm.RS384.equals(signatureAlgorithm) || JWSAlgorithm.RS512.equals(signatureAlgorithm)) {    return signJWTWithRSA(jwtClaimsSet,request);  } else   if (JWSAlgorithm.HS256.equals(signatureAlgorithm) || JWSAlgorithm.HS384.equals(signatureAlgorithm) || JWSAlgorithm.HS512.equals(signatureAlgorithm)) {    return null;  } else {    return null;  }}  }
class C{  public void insertBefore(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=insn;  } else {    prev.next=insn;  }  location.prev=insn;  insn.next=location;  insn.prev=prev;  cache=null;  insn.index=0;}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("\nEquations:\n");  for (  Node node : variableNodes) {    buf.append("\n").append(node).append(" = ").append(nodeExpressionStrings.get(node));  }  buf.append("\n\nErrors:\n");  for (  Node node : errorNodes) {    buf.append("\n").append(node).append(" ~ ").append(nodeExpressionStrings.get(node));  }  buf.append("\n\nParameters:\n");  for (  String param : getParameters()) {    buf.append("\n").append(param).append(" ~ ").append(getParameterExpressionString(param));  }  return buf.toString();}  }
class C{  public Closure<V> memoize(){  return Memoize.buildMemoizeFunction(new UnlimitedConcurrentCache(),this);}  }
class C{  private Set<Word> gatherTerms(List<PatternReference> patterns){  return patterns.stream().flatMap(null).collect(Collectors.toSet());}  }
class C{  public RetryException(String message){  super(message);}  }
class C{  public double[] computeLocal(int timeSeries[][][],int agentIndex1,int agentIndex2){  initialise();  addObservations(timeSeries,agentIndex1,agentIndex2);  return computeLocalFromPreviousObservations(timeSeries,agentIndex1,agentIndex2);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public CMemorySectionPanel(final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  Preconditions.checkNotNull(debugPerspectiveModel,"IE01453: Debug perspective model argument can not be null");  setBorder(new TitledBorder(""));  add(m_memoryLayoutBox);  m_synchronizer=new CMemorySectionPanelSynchronizer(m_memoryLayoutBox,debugPerspectiveModel);}  }
class C{  public Player(){  away=null;  grumpy=null;}  }
class C{  private synchronized void removeLock(FileLock lock){  locks.remove(lock);}  }
class C{  public void fill(byte value){  value&=0xf;  Arrays.fill(data,(byte)(value << 4 | value));}  }
class C{  public GemFireException(String message){  super(message);}  }
class C{  public static void main(String[] args){  double preBuffer=Double.parseDouble(args[4]);  double postBuffer=Double.parseDouble(args[5]);  run(args[0],args[1],args[2],args[3],preBuffer,postBuffer);}  }
class C{  Cookie encode(){  Cookie result=null;  String value=((null != previousRequestFlashInfo) ? previousRequestFlashInfo.encode() : "") + "_" + ((null != nextRequestFlashInfo) ? nextRequestFlashInfo.encode() : "");  String encryptedValue=guard.encrypt(value);  try {    result=new Cookie(FLASH_COOKIE_NAME,URLEncoder.encode(encryptedValue,"UTF-8"));  } catch (  UnsupportedEncodingException uee) {    result=new Cookie(FLASH_COOKIE_NAME,encryptedValue);  }  if (1 == value.length()) {    result.setMaxAge(0);  }  String requestContextPath=FacesContext.getCurrentInstance().getExternalContext().getRequestContextPath();  if (requestContextPath.isEmpty()) {    requestContextPath="/";  }  result.setPath(requestContextPath);  return result;}  }
class C{  public void append(String name,Object val,ValueFilterType filterType){  if (val != null) {    Map<String,Object> apiFilter=new HashMap<>();    apiFilter.put("attributeName",name);    apiFilter.put("attributeValue",val);    apiFilter.put("filterType",filterType.getValue());    filters.add(apiFilter);  }}  }
class C{  protected void appendCyclicObject(StringBuffer buffer,String fieldName,Object value){  ObjectUtils.identityToString(buffer,value);}  }
class C{  @Override public void xml(String xml){  if (TextUtils.isEmpty(xml)) {    d("Empty/Null xml content");    return;  }  try {    Source xmlInput=new StreamSource(new StringReader(xml));    StreamResult xmlOutput=new StreamResult(new StringWriter());    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(xmlInput,xmlOutput);    d(xmlOutput.getWriter().toString().replaceFirst(">",">\n"));  } catch (  TransformerException e) {    e(e.getCause().getMessage() + "\n" + xml);  }}  }
class C{  @SuppressWarnings("unchecked") public final String printMapValues(final Map<String,Object> keyMap){  final StringBuilder strbuilder=new StringBuilder();  for (  Entry<String,Object> keyType : keyMap.entrySet()) {    String key=keyType.getKey();    strbuilder.append("*****************\n");    strbuilder.append("key : ");    strbuilder.append(key);    strbuilder.append("\n");    Object result=keyType.getValue();    if (result instanceof List) {      List<Object> objList=(List<Object>)result;      strbuilder.append("Value List : \n");      for (      Object obj : objList) {        strbuilder.append(obj.toString());        strbuilder.append("\n");      }    } else {      strbuilder.append("Value : ");      strbuilder.append(result);      strbuilder.append("\n");    }  }  return strbuilder.toString();}  }
class C{  public boolean understandsProperty(String propertyToTest){  String[] understood=this.engineGetPropertyKeys();  if (understood != null) {    for (int i=0; i < understood.length; i++) {      if (understood[i].equals(propertyToTest)) {        return true;      }    }  }  return false;}  }
class C{  @Override public void onDestroyView(){  super.onDestroyView();}  }
class C{  public Cursor queryAllPurchasedItems(){  return mDb.query(PURCHASED_ITEMS_TABLE_NAME,PURCHASED_COLUMNS,null,null,null,null,null);}  }
class C{  public MaterialCollapsibleHeader(){  super(Document.get().createDivElement(),"collapsible-header");}  }
class C{  public static void checkReader(IndexReader reader) throws IOException {  for (  LeafReaderContext context : reader.leaves()) {    checkReader(context.reader(),true);  }}  }
class C{  public void clear(){  table=null;}  }
class C{  public LineNumber(int line,JasDocument doc){  initComponents();  this.line=line;  this.doc=doc;  jLabel1.setFont(new java.awt.Font(doc.frame.getProperty("font"),Font.PLAIN,doc.frame.getProperty("font.size",12)));  jLabel1.setText("" + line);  doLayout();}  }
class C{  public UnresolvedPermission(String type,String name,String actions,java.security.cert.Certificate certs[]){  super(type);  if (type == null)   throw new NullPointerException("type can't be null");  this.type=type;  this.name=name;  this.actions=actions;  if (certs != null) {    for (int i=0; i < certs.length; i++) {      if (!(certs[i] instanceof X509Certificate)) {        this.certs=certs.clone();        break;      }    }    if (this.certs == null) {      int i=0;      int count=0;      while (i < certs.length) {        count++;        while (((i + 1) < certs.length) && ((X509Certificate)certs[i]).getIssuerDN().equals(((X509Certificate)certs[i + 1]).getSubjectDN())) {          i++;        }        i++;      }      if (count == certs.length) {        this.certs=certs.clone();      }      if (this.certs == null) {        ArrayList<java.security.cert.Certificate> signerCerts=new ArrayList<>();        i=0;        while (i < certs.length) {          signerCerts.add(certs[i]);          while (((i + 1) < certs.length) && ((X509Certificate)certs[i]).getIssuerDN().equals(((X509Certificate)certs[i + 1]).getSubjectDN())) {            i++;          }          i++;        }        this.certs=new java.security.cert.Certificate[signerCerts.size()];        signerCerts.toArray(this.certs);      }    }  }}  }
class C{  public DepartmentObject(){  super();}  }
class C{  public final void transform(Vector3f normal,Vector3f normalOut){  float x, y;  x=m00 * normal.x + m01 * normal.y + m02 * normal.z;  y=m10 * normal.x + m11 * normal.y + m12 * normal.z;  normalOut.z=m20 * normal.x + m21 * normal.y + m22 * normal.z;  normalOut.x=x;  normalOut.y=y;}  }
class C{  public void addDocumentFrame(int chip,DocumentFrame frame){  mdiPane[chip].add(frame);}  }
class C{  public void startAuthActivity(Context context){  startAuthActivity(context,null);}  }
class C{  private Dimension interpolate(Dimension startSize,Dimension finalSize,double progress){  Dimension size=new Dimension();  size.width=interpolate(startSize.width,finalSize.width,progress);  size.height=interpolate(startSize.height,finalSize.height,progress);  return size;}  }
class C{  private void wakeThreadsFromSpin(){}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public void updatePackageBadge(String packageName){  mModel.updatePackageBadge(packageName);}  }
class C{  public void playSequentially(List<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    if (items.size() == 1) {      play(items.get(0));    } else {      for (int i=0; i < items.size() - 1; ++i) {        play(items.get(i)).before(items.get(i + 1));      }    }  }}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  return newVector.elements();}  }
class C{  @Override public void renderParticle(VertexBuffer worldRendererIn,Entity entityIn,float partialTicks,float rotationX,float rotationZ,float rotationYZ,float rotationXY,float rotationXZ){  float f=(this.particleAge + partialTicks) / this.particleMaxAge * 32.0F;  f=MathHelper.clamp_float(f,0.0F,1.0F);  this.particleScale=this.smokeParticleScale * f;  super.renderParticle(worldRendererIn,entityIn,partialTicks,rotationX,rotationZ,rotationYZ,rotationXY,rotationXZ);}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static String removeLastChar(String stringText,String endingChar){  if (!stringText.equals("") && stringText != null) {    if (stringText.endsWith(endingChar)) {      stringText=stringText.substring(0,stringText.length() - 1);    }  }  return stringText;}  }
class C{  @Override protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  for (int i=0; i < mYAxis.mEntryCount; i++) {    String text=mYAxis.getFormattedLabel(i);    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;    c.drawText(text,positions[i * 2],fixedPosition - offset,mAxisLabelPaint);  }}  }
class C{  public Loader() throws CannotCompileException, NotFoundException {  super();  delegateLoadingOf("javassist.tools.reflect.Loader");  reflection=new Reflection();  ClassPool pool=ClassPool.getDefault();  addTranslator(pool,reflection);}  }
class C{  public IconDrawerItem withIconTintingEnabled(boolean iconTintingEnabled){  this.iconTinted=iconTintingEnabled;  return this;}  }
class C{  public boolean isNoncollider(Node i,Node j,Node k){  return getMinSepset(i,k).contains(j);}  }
class C{  private void drawSmoothLine(Canvas canvas,LineSet set){  float minY=this.getInnerChartBottom();  float thisPointX;  float thisPointY;  float nextPointX;  float nextPointY;  float startdiffX;  float startdiffY;  float endDiffX;  float endDiffY;  float firstControlX;  float firstControlY;  float secondControlX;  float secondControlY;  Path path=new Path();  path.moveTo(set.getEntry(set.getBegin()).getX(),set.getEntry(set.getBegin()).getY());  Path bgPath=new Path();  bgPath.moveTo(set.getEntry(set.getBegin()).getX(),set.getEntry(set.getBegin()).getY());  int begin=set.getBegin();  int end=set.getEnd();  float x;  float y;  for (int i=begin; i < end - 1; i++) {    x=set.getEntry(i).getX();    y=set.getEntry(i).getY();    if (y < minY)     minY=y;    thisPointX=x;    thisPointY=y;    nextPointX=set.getEntry(i + 1).getX();    nextPointY=set.getEntry(i + 1).getY();    startdiffX=(nextPointX - set.getEntry(si(set.size(),i - 1)).getX());    startdiffY=(nextPointY - set.getEntry(si(set.size(),i - 1)).getY());    endDiffX=(set.getEntry(si(set.size(),i + 2)).getX() - thisPointX);    endDiffY=(set.getEntry(si(set.size(),i + 2)).getY() - thisPointY);    firstControlX=thisPointX + (0.15f * startdiffX);    firstControlY=thisPointY + (0.15f * startdiffY);    secondControlX=nextPointX - (0.15f * endDiffX);    secondControlY=nextPointY - (0.15f * endDiffY);    path.cubicTo(firstControlX,firstControlY,secondControlX,secondControlY,nextPointX,nextPointY);    bgPath.cubicTo(firstControlX,firstControlY,secondControlX,secondControlY,nextPointX,nextPointY);  }  if (set.hasFill() || set.hasGradientFill())   drawBackground(canvas,bgPath,set,minY);  canvas.drawPath(path,mStyle.mLinePaint);}  }
class C{  protected void tearDown(){  try {    pbr.close();  } catch (  IOException e) {  }}  }
class C{  public Exchange aggregate(Exchange oldExchange,Exchange newExchange){  if (oldExchange == null) {    return newExchange;  }  String oldBody=oldExchange.getIn().getBody(String.class);  String newBody=newExchange.getIn().getBody(String.class);  if ("END".equals(newBody)) {    return oldExchange;  }  String body=oldBody + newBody;  oldExchange.getIn().setBody(body);  return oldExchange;}  }
class C{  @Override public void schedule(){  startRunning();  for (  Thread t : mutatorThreads) {    t.start();  }  while (mutatorThreads.size() > activeMutators) {synchronized (count) {      try {        count.wait();      } catch (      InterruptedException e) {      }      Trace.trace(Item.SCHEDULER,"Active mutators = " + activeMutators + ", mutatorThreads = "+ mutatorThreads.size());    }  }  while (activeMutators > 0) {synchronized (count) {      try {        count.wait();      } catch (      InterruptedException e) {      }      Trace.trace(Item.SCHEDULER,"Active mutators = " + activeMutators);    }  }}  }
class C{  public TungstenProperties generateBatchApplyProps(File testDir,String serviceName,boolean partitioned) throws Exception {  File scriptFile=this.createMergeProcedure(testDir,"test.js");  PipelineConfigBuilder builder=new PipelineConfigBuilder();  builder.setProperty(ReplicatorConf.SERVICE_NAME,serviceName);  builder.setRole("master");  builder.setProperty(ReplicatorConf.METADATA_SCHEMA,serviceName);  builder.addPipeline("master","q-to-batch-apply","queue","datasource");  builder.addComponent("store","queue",InMemoryQueueStore.class);  builder.addProperty("store","queue","maxSize","500");  builder.addStage("q-to-batch-apply","q-extract","batch-applier",null);  builder.addProperty("stage","q-to-batch-apply","blockCommitRowCount",new Integer(1).toString());  builder.addComponent("extractor","q-extract",InMemoryQueueAdapter.class);  builder.addProperty("extractor","q-extract","storeName","queue");  builder.addComponent("applier","batch-applier",SimpleBatchApplier.class);  builder.addProperty("applier","batch-applier","dataSource","fs");  builder.addProperty("applier","batch-applier","loadScript",scriptFile.getAbsolutePath());  builder.addProperty("applier","batch-applier","timezone","GMT+0:00");  builder.addProperty("applier","batch-applier","charset","UTF-8");  builder.addProperty("applier","batch-applier","stageDirectory",new File(testDir,"staging").getAbsolutePath());  builder.addProperty("applier","batch-applier","stageTablePrefix","stage_xxx_");  builder.addProperty("applier","batch-applier","stageColumnPrefix","tungsten_");  if (partitioned)   builder.addProperty("applier","batch-applier","partitionBy","tungsten_commit_timestamp");  builder.addProperty("applier","batch-applier","partitionByClass",DateTimeValuePartitioner.class.getName());  builder.addProperty("applier","batch-applier","partitionByFormat","'commit_hour='yyyy-MM-dd-HH");  builder.addComponent("service","datasource",DataSourceService.class);  builder.setProperty("replicator.datasources","fs");  builder.addComponent("datasource","fs",FileDataSource.class);  builder.addProperty("datasource","fs","serviceName",serviceName);  builder.addProperty("datasource","fs","directory",new File(testDir,"data").getAbsolutePath());  builder.addProperty("datasource","fs","csvType","default");  return builder.getConfig();}  }
class C{  public ObjectFactory(){}  }
class C{  public static String maskImageURLPassword(String imageUrl){  String password=extractPasswordFromImageUrl(imageUrl);  String maskedPasswordURL=imageUrl;  if (StringUtils.isNotBlank(password)) {    maskedPasswordURL=StringUtils.replace(imageUrl,":" + password + "@",":" + MASKED_PASSWORD + "@");  }  return maskedPasswordURL;}  }
class C{  public double toSpeed(){  return Math.sqrt(x * x + y * y);}  }
class C{  private void broadcastStart(){  sendBroadcast(new Intent(MainActivity.MISSION_START));}  }
class C{  public double rate(TimeUnit rateUnit){  return rate * (double)rateUnit.toNanos(1);}  }
class C{  public void dropByIndex(int idx){  SAXRecord entry=realTSindex.get(idx);  if (null != entry) {    realTSindex.remove(idx);    entry.removeIndex(idx);    if (entry.getIndexes().isEmpty()) {      records.remove(String.valueOf(entry.getPayload()));    }  }}  }
class C{  protected boolean isOnlyIssue(){  super.setIsOnlyIssue(pickcombo.getValue().equals(2));  return super.isOnlyIssue();}  }
class C{  public static IVariableBinding findFieldInHierarchy(ITypeBinding type,String fieldName){  IVariableBinding field=findFieldInType(type,fieldName);  if (field != null)   return field;  ITypeBinding superClass=type.getSuperclass();  if (superClass != null) {    field=findFieldInHierarchy(superClass,fieldName);    if (field != null)     return field;  }  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    field=findFieldInHierarchy(interfaces[i],fieldName);    if (field != null)     return field;  }  return null;}  }
class C{  public void add(char ch){  if (i == b.length) {    char[] new_b=new char[i + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  b[i++]=ch;}  }
class C{  private static PermissionCollection createAllPermissions(){  Permissions permissions=new Permissions();  permissions.add(new AllPermission());  return permissions;}  }
class C{  private void prependYield(BasicBlock bb,Operator yp,int bcIndex,InlineSequence position){  Instruction insertionPoint=null;  if (bb.isEmpty()) {    insertionPoint=bb.lastInstruction();  } else {    insertionPoint=bb.firstRealInstruction();  }  if (yp == YIELDPOINT_PROLOGUE) {    if (VM.VerifyAssertions) {      VM._assert((insertionPoint != null) && (insertionPoint.getOpcode() == IR_PROLOGUE_opcode));    }    insertionPoint=insertionPoint.nextInstructionInCodeOrder();  } else   if (VM.UseEpilogueYieldPoints && yp == YIELDPOINT_EPILOGUE) {    insertionPoint=bb.lastRealInstruction();  }  Instruction s=Empty.create(yp);  insertionPoint.insertBefore(s);  s.setSourcePosition(bcIndex,position);}  }
class C{  public static String encryptString(String str2Encrypt) throws Exception {  byte[] keyByteArray=Base64.decode(GOOGLE_PUBLIC_KEY,Base64.DEFAULT);  byte[] header=new byte[5];  byte[] digest=MessageDigest.getInstance("SHA-1").digest(keyByteArray);  header[0]=0;  System.arraycopy(digest,0,header,1,4);  PublicKey publicKey=createKey(keyByteArray);  Cipher cipher=Cipher.getInstance("RSA/ECB/OAEPWITHSHA1ANDMGF1PADDING");  byte[] bytes2Encrypt=str2Encrypt.getBytes("UTF-8");  int len=((bytes2Encrypt.length - 1) / 86) + 1;  byte[] cryptedBytes=new byte[len * 133];  for (int j=0; j < len; j++) {    cipher.init(1,publicKey);    byte[] arrayOfByte4=cipher.doFinal(bytes2Encrypt,j * 86,(bytes2Encrypt.length - j * 86));    System.arraycopy(header,0,cryptedBytes,j * 133,header.length);    System.arraycopy(arrayOfByte4,0,cryptedBytes,j * 133 + header.length,arrayOfByte4.length);  }  return Base64.encodeToString(cryptedBytes,10);}  }
class C{  public static void orderBestPatterns(ResultPoint[] patterns){  float zeroOneDistance=distance(patterns[0],patterns[1]);  float oneTwoDistance=distance(patterns[1],patterns[2]);  float zeroTwoDistance=distance(patterns[0],patterns[2]);  ResultPoint pointA;  ResultPoint pointB;  ResultPoint pointC;  if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {    pointB=patterns[0];    pointA=patterns[1];    pointC=patterns[2];  } else   if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {    pointB=patterns[1];    pointA=patterns[0];    pointC=patterns[2];  } else {    pointB=patterns[2];    pointA=patterns[0];    pointC=patterns[1];  }  if (crossProductZ(pointA,pointB,pointC) < 0.0f) {    ResultPoint temp=pointA;    pointA=pointC;    pointC=temp;  }  patterns[0]=pointA;  patterns[1]=pointB;  patterns[2]=pointC;}  }
class C{  public void addStartElement(String tag,XmlAttribute[] attribs) throws IOException {  throw new IOException("Not implemented");}  }
class C{  public Iterator<BugPattern> bugPatternIterator(){  return bugPatternMap.values().iterator();}  }
class C{  public static boolean intersectLineLine(double ps1x,double ps1y,double pe1x,double pe1y,double ps2x,double ps2y,double pe2x,double pe2y,Vector2d p){  double d1x=ps1x - pe1x;  double d1y=pe1y - ps1y;  double d1ps1=d1y * ps1x + d1x * ps1y;  double d2x=ps2x - pe2x;  double d2y=pe2y - ps2y;  double d2ps2=d2y * ps2x + d2x * ps2y;  double det=d1y * d2x - d2y * d1x;  if (det == 0.0)   return false;  p.x=(d2x * d1ps1 - d1x * d2ps2) / det;  p.y=(d1y * d2ps2 - d2y * d1ps1) / det;  return true;}  }
class C{  protected void initTokenizer(){  m_Tokenizer.resetSyntax();  m_Tokenizer.whitespaceChars(0,' ');  m_Tokenizer.wordChars(' ' + 1,'\u00FF');  if (m_fieldSeparator != null) {    m_Tokenizer.whitespaceChars(m_fieldSeparator.charAt(0),m_fieldSeparator.charAt(0));  } else {    m_Tokenizer.whitespaceChars(',',',');  }  m_Tokenizer.commentChar('%');  if (m_enclosures != null && m_enclosures.size() > 0) {    for (    String e : m_enclosures) {      m_Tokenizer.quoteChar(e.charAt(0));    }  } else {    m_Tokenizer.quoteChar('"');    m_Tokenizer.quoteChar('\'');  }  m_Tokenizer.ordinaryChar('{');  m_Tokenizer.ordinaryChar('}');  m_Tokenizer.eolIsSignificant(true);}  }
class C{  protected void stat(POP3Session session){  try {    List<MessageMetaData> messages=session.getUserMailbox().getMessages();    session.setAttachment(POP3Session.UID_LIST,messages,State.Transaction);    session.setAttachment(POP3Session.DELETED_UID_LIST,new ArrayList<String>(),State.Transaction);  } catch (  IOException e) {    session.getLogger().error("Unable to STAT mail box ",e);  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterMoreInfo);}  }
class C{  private void paintDibit(Graphics graphics,int index,Dibit value){  Graphics2D g2=(Graphics2D)graphics;  Path2D.Float polyline=new Path2D.Float(Path2D.Float.WIND_EVEN_ODD,mSamples.size());  float middleY=((float)getHeight() / 2.0f);  float indexWidth=(float)(getWidth()) / (float)mSampleCount;  float startX=(float)index * indexWidth;  float stopX=(float)(index + 1) * indexWidth;  float fivePercent=indexWidth * .05f;  float leftX=startX + fivePercent;  float rightX=stopX - fivePercent;  polyline.moveTo(startX,middleY);  polyline.lineTo(leftX,middleY);  float y=middleY;switch (value) {case D01_PLUS_3:    y=middleY - (middleY * 0.75f);  break;case D00_PLUS_1:y=middleY - (middleY * 0.25f);break;case D10_MINUS_1:y=middleY + (middleY * 0.25f);break;case D11_MINUS_3:y=middleY + (middleY * 0.75f);break;}polyline.lineTo(leftX,y);polyline.lineTo(rightX,y);polyline.lineTo(rightX,middleY);polyline.lineTo(stopX,middleY);g2.draw(polyline);String bit=null;switch (value) {case D00_PLUS_1:bit="+1";break;case D01_PLUS_3:bit="+3";break;case D10_MINUS_1:bit="-1";break;case D11_MINUS_3:bit="-3";break;}FontMetrics fontMetrics=graphics.getFontMetrics(this.getFont());Rectangle2D label=fontMetrics.getStringBounds(bit,graphics);float offsetX=(float)label.getWidth() / 2.0f;float offsetY=(float)label.getWidth() / 2.0f;float middleX=startX + (indexWidth / 2.0f);graphics.drawString(bit,(int)(middleX - offsetX),(int)(middleY - offsetY));}  }
class C{  public boolean isSecure(){  return this.getScheme().equalsIgnoreCase(SIPS);}  }
class C{  private void tryRippleEnter(){  if (mExitingRipplesCount >= MAX_RIPPLES) {    return;  }  if (mRipple == null) {    final float x;    final float y;    if (mHasPending) {      mHasPending=false;      x=mPendingX;      y=mPendingY;    } else {      x=mHotspotBounds.exactCenterX();      y=mHotspotBounds.exactCenterY();    }    final boolean isBounded=isBounded();    mRipple=new RippleForeground(this,mHotspotBounds,x,y,isBounded);  }  mRipple.setup(mState.mMaxRadius,mDensity);  mRipple.enter(false);}  }
class C{  public static ExecutionSystem newExecutionSystem(URI uri,Map<String,?> env) throws IOException {  return newExecutionSystem(uri,env,null);}  }
class C{  public static void removeProblemMarkers(final IResource resource,final IProgressMonitor monitor){  removeProblemMarkers(resource,monitor,TLAMarkerHelper.TOOLBOX_MARKERS_TLAPARSER_MARKER_ID);}  }
class C{  protected String urlString() throws ParseException {  StringBuffer retval=new StringBuffer();  lexer.selectLexer("charLexer");  while (lexer.hasMoreChars()) {    char la=lexer.lookAhead(0);    if (la == ' ' || la == '\t' || la == '\n' || la == '>' || la == '<')     break;    lexer.consume(0);    retval.append(la);  }  return retval.toString();}  }
class C{  public static MethodCoverageTestFitness createMethodTestFitness(BytecodeInstruction instruction){  if (instruction == null)   throw new IllegalArgumentException("null given");  return createMethodTestFitness(instruction.getClassName(),instruction.getMethodName());}  }
class C{  private static void checkSupported(){  if (!supported())   throw new UnsupportedOperationException("ScriptEngine not supported in this JDK!");}  }
class C{  public static <T>ReactiveSeq<T> reactiveSeq(Adapter<T> adapter){  return adapter.stream();}  }
class C{  private boolean hasNewMaster(){  String oldMaster=previousState().getNodes().masterNodeId();  String newMaster=state().getNodes().masterNodeId();  if (oldMaster == null && newMaster == null) {    return false;  }  if (oldMaster == null && newMaster != null) {    return true;  }  return oldMaster.equals(newMaster) == false;}  }
class C{  public MemoryImageSource(int w,int h,int pix[],int off,int scan,Hashtable<?,?> props){  initialize(w,h,ColorModel.getRGBdefault(),(Object)pix,off,scan,props);}  }
class C{  public ClientConfig withProtocol(String protocol){  setProtocol(protocol);  return this;}  }
class C{  public boolean hasTransaction(){  return mTransactionStack != null;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public String methodDescriptor(){  ConstPool cp=getConstPool();  int mi=methodIndex();  int ti=cp.getNameAndTypeDescriptor(mi);  return cp.getUtf8Info(ti);}  }
class C{  private static int calculateChecksum(BinaryMessage frame,int startIndex){  int calculated=0;  for (int i=frame.nextSetBit(startIndex); i >= startIndex && i < startIndex + 6; i=frame.nextSetBit(i + 1)) {    calculated^=CHECKSUMS[i - startIndex];  }  return calculated;}  }
class C{  public PutIndexTemplateRequestBuilder addMapping(String type,String source){  request.mapping(type,source);  return this;}  }
class C{  private void onExpandImageArea(){  imageAreaIsExpanded=true;  setActionBarIconBack();}  }
class C{  public boolean canDockWest(){  return canDockWest;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.500 -0500",hash_original_method="D9A9DAD002038F54D59084B945A008ED",hash_generated_method="4C9173AD3605BE46EEB06DBE1A2B9E52") public void connect(Context srcContext,Handler srcHandler,Messenger dstMessenger){  if (DBG)   log("connect srcHandler to the dstMessenger  E");  connected(srcContext,srcHandler,dstMessenger);  replyHalfConnected(STATUS_SUCCESSFUL);  if (DBG)   log("connect srcHandler to the dstMessenger X");}  }
class C{  @Override public boolean csConsistNeedsSeperateAddress(){  return true;}  }
class C{  public void processTransactionTerminated(TransactionTerminatedEvent transactionTerminatedEvent){}  }
class C{  public CreateBucketConfiguration(String locationConstraint) throws XmlPullParserException {  super();  super.name="CreateBucketConfiguration";  super.namespaceDictionary.set("","http://s3.amazonaws.com/doc/2006-03-01/");  this.locationConstraint=locationConstraint;}  }
class C{  public GeoBoundingBoxQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public void reduce(Text key,Iterator<MetaWrapper> values,OutputCollector<Text,MetaWrapper> output,Reporter reporter) throws IOException {  CrawlDatum lastG=null;  CrawlDatum lastF=null;  CrawlDatum lastSig=null;  Content lastC=null;  ParseData lastPD=null;  ParseText lastPT=null;  String lastGname=null;  String lastFname=null;  String lastSigname=null;  String lastCname=null;  String lastPDname=null;  String lastPTname=null;  TreeMap<String,ArrayList<CrawlDatum>> linked=new TreeMap<String,ArrayList<CrawlDatum>>();  while (values.hasNext()) {    MetaWrapper wrapper=values.next();    Object o=wrapper.get();    String spString=wrapper.getMeta(SEGMENT_PART_KEY);    if (spString == null) {      throw new IOException("Null segment part, key=" + key);    }    SegmentPart sp=SegmentPart.parse(spString);    if (o instanceof CrawlDatum) {      CrawlDatum val=(CrawlDatum)o;      if (sp.partName.equals(CrawlDatum.GENERATE_DIR_NAME)) {        if (lastG == null) {          lastG=val;          lastGname=sp.segmentName;        } else {          if (lastGname.compareTo(sp.segmentName) < 0) {            lastG=val;            lastGname=sp.segmentName;          }        }      } else       if (sp.partName.equals(CrawlDatum.FETCH_DIR_NAME)) {        if (lastF == null) {          lastF=val;          lastFname=sp.segmentName;        } else {          if (lastFname.compareTo(sp.segmentName) < 0) {            lastF=val;            lastFname=sp.segmentName;          }        }      } else       if (sp.partName.equals(CrawlDatum.PARSE_DIR_NAME)) {        if (val.getStatus() == CrawlDatum.STATUS_SIGNATURE) {          if (lastSig == null) {            lastSig=val;            lastSigname=sp.segmentName;          } else {            if (lastSigname.compareTo(sp.segmentName) < 0) {              lastSig=val;              lastSigname=sp.segmentName;            }          }          continue;        }        ArrayList<CrawlDatum> segLinked=linked.get(sp.segmentName);        if (segLinked == null) {          segLinked=new ArrayList<CrawlDatum>();          linked.put(sp.segmentName,segLinked);        }        segLinked.add(val);      } else {        throw new IOException("Cannot determine segment part: " + sp.partName);      }    } else     if (o instanceof Content) {      if (lastC == null) {        lastC=(Content)o;        lastCname=sp.segmentName;      } else {        if (lastCname.compareTo(sp.segmentName) < 0) {          lastC=(Content)o;          lastCname=sp.segmentName;        }      }    } else     if (o instanceof ParseData) {      if (lastPD == null) {        lastPD=(ParseData)o;        lastPDname=sp.segmentName;      } else {        if (lastPDname.compareTo(sp.segmentName) < 0) {          lastPD=(ParseData)o;          lastPDname=sp.segmentName;        }      }    } else     if (o instanceof ParseText) {      if (lastPT == null) {        lastPT=(ParseText)o;        lastPTname=sp.segmentName;      } else {        if (lastPTname.compareTo(sp.segmentName) < 0) {          lastPT=(ParseText)o;          lastPTname=sp.segmentName;        }      }    }  }  if (mergeFilters != null && !mergeFilters.filter(key,lastG,lastF,lastSig,lastC,lastPD,lastPT,linked.isEmpty() ? null : linked.lastEntry().getValue())) {    return;  }  curCount++;  String sliceName=null;  MetaWrapper wrapper=new MetaWrapper();  if (sliceSize > 0) {    sliceName=String.valueOf(curCount / sliceSize);    wrapper.setMeta(SEGMENT_SLICE_KEY,sliceName);  }  SegmentPart sp=new SegmentPart();  if (lastG != null) {    wrapper.set(lastG);    sp.partName=CrawlDatum.GENERATE_DIR_NAME;    sp.segmentName=lastGname;    wrapper.setMeta(SEGMENT_PART_KEY,sp.toString());    output.collect(key,wrapper);  }  if (lastF != null) {    wrapper.set(lastF);    sp.partName=CrawlDatum.FETCH_DIR_NAME;    sp.segmentName=lastFname;    wrapper.setMeta(SEGMENT_PART_KEY,sp.toString());    output.collect(key,wrapper);  }  if (lastSig != null) {    wrapper.set(lastSig);    sp.partName=CrawlDatum.PARSE_DIR_NAME;    sp.segmentName=lastSigname;    wrapper.setMeta(SEGMENT_PART_KEY,sp.toString());    output.collect(key,wrapper);  }  if (lastC != null) {    wrapper.set(lastC);    sp.partName=Content.DIR_NAME;    sp.segmentName=lastCname;    wrapper.setMeta(SEGMENT_PART_KEY,sp.toString());    output.collect(key,wrapper);  }  if (lastPD != null) {    wrapper.set(lastPD);    sp.partName=ParseData.DIR_NAME;    sp.segmentName=lastPDname;    wrapper.setMeta(SEGMENT_PART_KEY,sp.toString());    output.collect(key,wrapper);  }  if (lastPT != null) {    wrapper.set(lastPT);    sp.partName=ParseText.DIR_NAME;    sp.segmentName=lastPTname;    wrapper.setMeta(SEGMENT_PART_KEY,sp.toString());    output.collect(key,wrapper);  }  if (linked.size() > 0) {    String name=linked.lastKey();    sp.partName=CrawlDatum.PARSE_DIR_NAME;    sp.segmentName=name;    wrapper.setMeta(SEGMENT_PART_KEY,sp.toString());    ArrayList<CrawlDatum> segLinked=linked.get(name);    for (int i=0; i < segLinked.size(); i++) {      CrawlDatum link=segLinked.get(i);      wrapper.set(link);      output.collect(key,wrapper);    }  }}  }
class C{  public Matrix3d m10(double m10){  this.m10=m10;  return this;}  }
class C{  public static final boolean isValidChar(char ch){  return RSyntaxUtilities.isLetterOrDigit(ch) || ch == '_';}  }
class C{  public Source<Boolean> all(){  return Booleans.generate();}  }
class C{  public void bind(BooleanBinding binding){  if (!isAchieved())   achieved.bind(binding);}  }
class C{  private boolean createNew(MProduct product,MAcctSchema as){  MCost dimension=MCost.getOrCreate(product,0,as,0,0,as.getM_CostType_ID(),m_ce.getM_CostElement_ID());  if (dimension.is_new())   return dimension.save();  return false;}  }
class C{  public Instrumenter attach(Collector collector){  customCollectors.add(collector);  return this;}  }
class C{  private boolean isSame(final Relation a,final Relation b){  boolean sameSourceTarget=false;  if (isSame(a.getSource(),b.getSource()) && isSame(a.getTarget(),b.getTarget())) {    sameSourceTarget=true;  } else   if (symmetric && isSame(a.getSource(),b.getTarget()) && isSame(a.getTarget(),b.getSource())) {    sameSourceTarget=true;  }  return sameSourceTarget && isSame(a.getRelationshipType(),b.getRelationshipType()) && isSame(a.getRelationSubType(),b.getRelationSubType());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int[] palette2rgba(ImageLineInt line,PngChunkPLTE pal,PngChunkTRNS trns,int[] buf){  return palette2rgb(line,pal,trns,buf,true);}  }
class C{  @Bean public CommandLineRunner commandLineRunner(GraphDatabaseConfiguration graphDatabaseConfiguration){  return null;}  }
class C{  private void parseAeroCrit(Element aeroCritTag,Entity entity){  String avionics=aeroCritTag.getAttribute(AVIONICS);  String sensors=aeroCritTag.getAttribute(SENSORS);  String engine=aeroCritTag.getAttribute(ENGINE);  String fcs=aeroCritTag.getAttribute(FCS);  String cic=aeroCritTag.getAttribute(CIC);  String leftThrust=aeroCritTag.getAttribute(LEFT_THRUST);  String rightThrust=aeroCritTag.getAttribute(RIGHT_THRUST);  String lifeSupport=aeroCritTag.getAttribute(LIFE_SUPPORT);  String gear=aeroCritTag.getAttribute(GEAR);  Aero a=(Aero)entity;  if (avionics.length() > 0) {    a.setAvionicsHits(Integer.parseInt(avionics));  }  if (sensors.length() > 0) {    a.setSensorHits(Integer.parseInt(sensors));  }  if (engine.length() > 0) {    a.setEngineHits(Integer.parseInt(engine));  }  if (fcs.length() > 0) {    a.setFCSHits(Integer.parseInt(fcs));  }  if (cic.length() > 0) {    a.setCICHits(Integer.parseInt(cic));  }  if (leftThrust.length() > 0) {    a.setLeftThrustHits(Integer.parseInt(leftThrust));  }  if (rightThrust.length() > 0) {    a.setRightThrustHits(Integer.parseInt(rightThrust));  }  if (lifeSupport.length() > 0) {    a.setLifeSupport(false);  }  if (gear.length() > 0) {    a.setGearHit(true);  }}  }
class C{  public PutResponseMessage(PutResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public boolean isSameAs(FirewallRule r){  if (this.action != r.action || this.any_dl_type != r.any_dl_type || (this.any_dl_type == false && !this.dl_type.equals(r.dl_type)) || this.any_tp_src != r.any_tp_src || (this.any_tp_src == false && !this.tp_src.equals(r.tp_src)) || this.any_tp_dst != r.any_tp_dst || (this.any_tp_dst == false && !this.tp_dst.equals(r.tp_dst)) || this.any_dpid != r.any_dpid || (this.any_dpid == false && !this.dpid.equals(r.dpid)) || this.any_in_port != r.any_in_port || (this.any_in_port == false && !this.in_port.equals(r.in_port)) || this.any_nw_src != r.any_nw_src || (this.any_nw_src == false && !this.nw_src_prefix_and_mask.equals(r.nw_src_prefix_and_mask)) || this.any_dl_src != r.any_dl_src || (this.any_dl_src == false && !this.dl_src.equals(r.dl_src)) || this.any_nw_proto != r.any_nw_proto || (this.any_nw_proto == false && !this.nw_proto.equals(r.nw_proto)) || this.any_nw_dst != r.any_nw_dst || (this.any_nw_dst == false && !this.nw_dst_prefix_and_mask.equals(r.nw_dst_prefix_and_mask)) || this.any_dl_dst != r.any_dl_dst || (this.any_dl_dst == false && this.dl_dst != r.dl_dst)) {    return false;  }  return true;}  }
class C{  public static double dot(final double x1,final double y1,final double z1,final double x2,final double y2,final double z2){  return (x1 * x2 + y1 * y2 + z1 * z2);}  }
class C{  public JLBHOptions jlbhTask(JLBHTask JLBHTask){  this.jlbhTask=JLBHTask;  return this;}  }
class C{  public static void generateTypeface(Context context){  sTypeface=Typeface.createFromAsset(context.getAssets(),"RobotoCondensed-Regular.ttf");}  }
class C{  public Object[] keys(){  return m_map.keySet().toArray();}  }
class C{  private void compactGroup(List<Segment> segments,List<OffsetPredicate> predicates,Segment compactSegment){  for (int i=0; i < segments.size(); i++) {    compactSegment(segments.get(i),predicates.get(i),compactSegment);  }}  }
class C{  protected boolean[] canTakeOptions(){  boolean[] result=new boolean[2];  print("options...");  if (getTestObject() instanceof OptionHandler) {    println("yes");    if (m_Debug) {      println("\n=== Full report ===");      Enumeration<Option> enu=((OptionHandler)getTestObject()).listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        print(option.synopsis() + "\n" + option.description()+ "\n");      }      println("\n");    }    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  @Override protected void onStartLoading(){  if (mCursor != null) {    deliverResult(mCursor);  }  if (takeContentChanged() || mCursor == null) {    forceLoad();  }}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final TemporalPoint other=(TemporalPoint)obj;  return other.time == time;}  }
class C{  private void focusPrevious(){  final Element current=Elements.getDocument().getActiveElement();  if (current.getParentElement().isEqualNode(listElement)) {    final Element prev=current.getPreviousElementSibling();    if (prev != null) {      prev.focus();    } else {      focusLast();    }  } else {    focusFirst();  }}  }
class C{  public DomainObjectException(){  super();}  }
class C{  public void releaseSurface(EGLSurface eglSurface){  EGL14.eglDestroySurface(mEGLDisplay,eglSurface);}  }
class C{  public Observable<Integer> exerciseFlatMap(Observable<Movies> movies){  return Observable.error(new RuntimeException("Not Implemented"));}  }
class C{  public static boolean checkAndRollback(BashPsiBuilder builder,Function<BashPsiBuilder,Boolean> function){  final PsiBuilder.Marker start=builder.mark();  builder.enterNewErrorLevel(false);  Boolean result=function.apply(builder);  builder.leaveLastErrorLevel();  start.rollbackTo();  return result;}  }
class C{  public boolean isGras(){  return gras;}  }
class C{  private ByteBuffer decode() throws PDFParseException {  int cW=CLEARDICT;  ByteArrayOutputStream baos=new ByteArrayOutputStream();  while (true) {    int pW=cW;    cW=nextCode();    if (cW == -1) {      throw new PDFParseException("Missed the stop code in LZWDecode!");    }    if (cW == STOP) {      break;    } else     if (cW == CLEARDICT) {      resetDict();    } else     if (pW == CLEARDICT) {      baos.write(dict[cW],0,dict[cW].length);    } else {      if (cW < dictlen) {        baos.write(dict[cW],0,dict[cW].length);        byte[] p=new byte[dict[pW].length + 1];        System.arraycopy(dict[pW],0,p,0,dict[pW].length);        p[dict[pW].length]=dict[cW][0];        dict[dictlen++]=p;      } else {        byte[] p=new byte[dict[pW].length + 1];        System.arraycopy(dict[pW],0,p,0,dict[pW].length);        p[dict[pW].length]=p[0];        baos.write(p,0,p.length);        dict[dictlen++]=p;      }      if (dictlen >= (1 << bitspercode) - 1 && bitspercode < 12) {        bitspercode++;      }    }  }  return ByteBuffer.wrap(baos.toByteArray());}  }
class C{  public Object readFontUIResource(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  int i;  String name;  Font font;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  children=XMLDocument.getChildTags(node);  font=null;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_FONT)) {      font=(Font)invokeReadFromXML(child);    } else {      System.out.println("WARNING: '" + name + "' is not a recognized name for "+ node.getAttribute(ATT_NAME)+ "!");    }  }  result=new FontUIResource(font);  return result;}  }
class C{  private void measureAndAdjustRight(View child,int childIndex,int numChildren){  int oldWidth=child.getWidth();  measureItem(child);  if (child.getMeasuredWidth() != oldWidth) {    relayoutMeasuredItem(child);    final int widthDelta=child.getMeasuredWidth() - oldWidth;    for (int i=childIndex + 1; i < numChildren; i++) {      getChildAt(i).offsetLeftAndRight(widthDelta);    }  }}  }
class C{  @Override public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  w.startElement(atomPubNs,"service",null,null);  w.startRepeatingElement();  for (  Workspace workspace : workspaces) {    workspace.generate(w,extProfile);  }  w.endRepeatingElement();  generateExtensions(w,extProfile);  w.endElement(atomPubNs,"service");}  }
class C{  public void removeAll(){  clear();}  }
class C{  public int sizeNonResident(){  int x=0;  for (  Segment<K,V> s : segments) {    x+=s.queue2Size;  }  return x;}  }
class C{  public double[] computeLocalUsingPreviousObservations(double[][] continuousNewStates,int[] discreteNewStates) throws Exception {  if (normalise) {    continuousNewStates=MatrixUtils.normaliseIntoNewArray(continuousNewStates,means,stds);  }  int N_newObservations=continuousNewStates.length;  int N_samplesForPdfs=continuousData.length;  double[] locals=new double[N_newObservations];  double fixedPartOfLocals=MathsUtils.digamma(k) + MathsUtils.digamma(N_samplesForPdfs);  double testSum=0.0;  if (debug) {    System.out.printf("digamma(k)=%.3f + digamma(N)=%.3f\n",MathsUtils.digamma(k),MathsUtils.digamma(N_samplesForPdfs));  }  double avNx=0;  double avNy=0;  for (int t=0; t < N_newObservations; t++) {    double[] norms=new double[continuousData.length];    for (int t2=0; t2 < continuousData.length; t2++) {      norms[t2]=normCalculator.norm(continuousNewStates[t],continuousData[t2]);    }    double eps_x=MatrixUtils.kthMinSubjectTo(norms,k,discreteData,discreteNewStates[t]);    int n_x=0;    for (int t2=0; t2 < continuousData.length; t2++) {      if (norms[t2] <= eps_x) {        n_x++;      }    }    int n_y=counts[discreteData[t]];    avNx+=n_x;    avNy+=n_y;    locals[t]=fixedPartOfLocals - MathsUtils.digamma(n_x) - MathsUtils.digamma(n_y);    if (debug) {      testSum+=locals[t];      if (dimensions == 1) {        System.out.printf("t=%d: x=%.3f, eps_x=%.3f, n_x=%d, n_y=%d, local=%.3f, running total = %.5f\n",t,continuousNewStates[t][0],eps_x,n_x,n_y,locals[t],testSum);      } else {        System.out.printf("t=%d: eps_x=%.3f, n_x=%d, n_y=%d, local=%.3f, running total = %.5f\n",t,eps_x,n_x,n_y,locals[t],testSum);      }    }  }  if (debug) {    avNx/=(double)N_newObservations;    avNy/=(double)N_newObservations;    System.out.printf("Average n_x=%.3f, Average n_y=%.3f\n",avNx,avNy);  }  return locals;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (obj instanceof IfdData) {    IfdData data=(IfdData)obj;    if (data.getId() == mIfdId && data.getTagCount() == getTagCount()) {      ExifTag[] tags=data.getAllTags();      for (      ExifTag tag : tags) {        if (ExifInterface.isOffsetTag(tag.getTagId())) {          continue;        }        ExifTag tag2=mExifTags.get(tag.getTagId());        if (!tag.equals(tag2)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public String publish() throws Exception {  if (resource == null) {    return NOT_FOUND;  }  if (publish) {    if (resource.isRegistered() && !resource.isAssignedGBIFSupportedLicense()) {      String msg=getText("manage.overview.prevented.resource.publishing.noGBIFLicense");      addActionError(msg);      LOG.error(msg);      return INPUT;    }    if (resource.getDoi() != null && resource.isPubliclyAvailable()) {      if (registrationManager.getDoiService() == null) {        String msg=getText("manage.overview.doi.operation.failed.noAccount");        LOG.error(msg);        addActionError(msg);        return INPUT;      }      try {        DoiData doiData=registrationManager.getDoiService().resolve(resource.getDoi());        if (doiData != null && doiData.getStatus() != null) {          if (doiData.getStatus().compareTo(DoiStatus.RESERVED) == 0 || doiData.getStatus().compareTo(DoiStatus.REGISTERED) == 0) {            LOG.info("Pre-publication check: successfully resolved " + resource.getDoi().toString());          } else {            String errorMsg=getText("manage.overview.publishing.doi.publish.check.registered.failed",new String[]{resource.getDoi().toString(),doiData.getStatus().toString()});            LOG.error(errorMsg);            addActionError(errorMsg);            return INPUT;          }        } else {          String errorMsg=getText("manage.overview.publishing.doi.publish.check.existing.failed",new String[]{resource.getDoi().toString()});          LOG.error(errorMsg);          addActionError(errorMsg);          return INPUT;        }      } catch (      DoiException e) {        String errorMsg=getText("manage.overview.publishing.doi.publish.check.existing.failed.exception",new String[]{resource.getDoi().toString(),e.getMessage()});        LOG.error(errorMsg,e);        addActionError(errorMsg);        return INPUT;      }    }    if (resourceManager.getProcessFailures().containsKey(resource.getShortname())) {      logProcessFailures(resource);      LOG.info("Clearing publish event failures for resource: " + resource.getTitleAndShortname());      resourceManager.getProcessFailures().removeAll(resource.getShortname());    }    String pm=StringUtils.trimToNull(req.getParameter(Constants.REQ_PARAM_PUBLICATION_MODE));    if (!Strings.isNullOrEmpty(pm)) {      try {        if (PublicationMode.AUTO_PUBLISH_OFF == PublicationMode.valueOf(pm) && resource.usesAutoPublishing()) {          resourceManager.publicationModeToOff(resource);        } else {          String pf=StringUtils.trimToNull(req.getParameter(Constants.REQ_PARAM_PUBLICATION_FREQUENCY));          if (!Strings.isNullOrEmpty(pf)) {            resource.setUpdateFrequency(pf);            resource.setPublicationMode(PublicationMode.valueOf(pm));          } else {            LOG.debug("No change to auto-publishing settings");          }        }      } catch (      IllegalArgumentException e) {        LOG.error("Exception encountered while parsing parameters: " + e.getMessage(),e);      } finally {        populateFrequencies();      }    }    BigDecimal nextVersion=new BigDecimal(resource.getNextVersion().toPlainString());    resource.setChangeSummary(getSummary());    try {      if (resourceManager.publish(resource,nextVersion,this)) {        addActionMessage(getText("publishing.started",new String[]{String.valueOf(nextVersion),resource.getShortname()}));        return PUBLISHING;      } else {        if (resource.getCoreType() != null && !resource.getCoreType().equalsIgnoreCase(Constants.DATASET_TYPE_METADATA_IDENTIFIER)) {          addActionWarning(getText("manage.overview.data.missing"));        }        missingRegistrationMetadata=!hasMinimumRegistryInfo(resource);        metadataModifiedSinceLastPublication=setMetadataModifiedSinceLastPublication(resource);        mappingsModifiedSinceLastPublication=setMappingsModifiedSinceLastPublication(resource);        return SUCCESS;      }    } catch (    PublicationException e) {      if (PublicationException.TYPE.LOCKED == e.getType()) {        addActionError(getText("manage.overview.resource.being.published",new String[]{resource.getTitleAndShortname()}));      } else {        addActionError(getText("publishing.failed",new String[]{String.valueOf(nextVersion),resource.getShortname(),e.getMessage()}));        resourceManager.restoreVersion(resource,nextVersion,this);        resourceManager.getProcessFailures().put(resource.getShortname(),new Date());      }    }catch (    InvalidConfigException e) {      String msg=getText("publishing.failed",new String[]{String.valueOf(nextVersion),resource.getShortname(),e.getMessage()});      LOG.error(msg,e);      addActionError(msg);    }  } else {    return HOME;  }  return ERROR;}  }
class C{  public synchronized EventType addXMLDOMType(String eventTypeName,ConfigurationEventTypeXMLDOM configurationEventTypeXMLDOM,SchemaModel optionalSchemaModel,boolean isPreconfiguredStatic){  return addXMLDOMType(eventTypeName,configurationEventTypeXMLDOM,optionalSchemaModel,isPreconfiguredStatic,false);}  }
class C{  public static String capitalize(String s){  if (Character.isLowerCase(s.charAt(0))) {    return Character.toUpperCase(s.charAt(0)) + s.substring(1);  } else {    return s;  }}  }
class C{  public CTextPane(JTextPane textPane){  super(textPane);  m_textPane=textPane;  super.setOpaque(false);  super.getViewport().setOpaque(false);  m_textPane.setContentType("text/html");}  }
class C{  public boolean isPaintingTile(){  return getFlag(IS_PAINTING_TILE);}  }
class C{  public String from(){  return from;}  }
class C{  public static void main(String[] args){  Properties config=new Properties();  config.put(StreamsConfig.APPLICATION_ID_CONFIG,"exclamation-advanced-kafka-streams");  config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  config.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG,"localhost:2181");  config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG,Serdes.ByteArray().getClass().getName());  config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());  KStreamBuilder builder=new KStreamBuilder();  KStream<byte[],String> text=builder.stream("console");  KStream<byte[],String> exclamation=text.mapValues(null).mapValues(null);  KStream<byte[],String> muchExclamation=exclamation.filter(null);  exclamation.to("exclamated");  muchExclamation.to("much-exclamated");  KafkaStreams streams=new KafkaStreams(builder,config);  streams.start();}  }
class C{  public void createTimer(){  Timer t=new Timer(updateInterval,this);  t.setInitialDelay(0);  setTimer(t);}  }
class C{  public void testParseLargestSubnormalDoublePrecision(){  assertEquals(2.2250738585072014E-308,Double.parseDouble("2.2250738585072012e-308"));  assertEquals(2.2250738585072014E-308,Double.parseDouble("0.00022250738585072012e-304"));  assertEquals(2.2250738585072014E-308,Double.parseDouble("00000002.2250738585072012e-308"));  assertEquals(2.2250738585072014E-308,Double.parseDouble("2.225073858507201200000e-308"));  assertEquals(2.2250738585072014E-308,Double.parseDouble("2.2250738585072012e-00308"));  assertEquals(2.2250738585072014E-308,Double.parseDouble("2.22507385850720129978001e-308"));  assertEquals(-2.2250738585072014E-308,Double.parseDouble("-2.2250738585072012e-308"));}  }
class C{  private void showOverlay(boolean forceCheck){  if (forceCheck)   mOverlayTimeout=0;  showOverlayTimeout(0);}  }
class C{  public boolean isMyDbSvcGood(String svcName){  String nodeSeq=getNodeSeqFromSvcId(mySvcId);  String dbVersion=_coordinator.getTargetDbSchemaVersion();  return getGoodNodes(svcName,dbVersion).contains(nodeSeq);}  }
class C{  public static void resizeGridView(GridView gridView,int columns){  ListAdapter listAdapter=gridView.getAdapter();  if (listAdapter == null) {    return;  }  int totalHeight=0;  int items=listAdapter.getCount();  int rows=0;  int maxHeight=0;  for (int i=0; i < listAdapter.getCount(); i++) {    View listItem=listAdapter.getView(i,null,gridView);    listItem.measure(0,0);    totalHeight=listItem.getMeasuredHeight();    if (maxHeight < totalHeight) {      maxHeight=totalHeight;    }  }  float x=1;  if (items > columns) {    x=items / columns;    rows=(int)(x + 1);    maxHeight*=rows;  }  ViewGroup.LayoutParams params=gridView.getLayoutParams();  params.height=maxHeight;  gridView.setLayoutParams(params);}  }
class C{  private String userAgent(){  return mUserAgent;}  }
class C{  @Override public String toString(){  return String.format("Function Edge [%s -> %s]",super.getSource().getFunction().getName(),super.getTarget().getFunction().getName());}  }
class C{  public Alert(PrincipalUser creator,PrincipalUser owner,String name,String expression,String cronEntry){  super(creator);  setOwner(owner);  setName(name);  setExpression(expression);  setCronEntry(cronEntry);  setEnabled(false);  setMissingDataNotificationEnabled(false);}  }
class C{  public void addObserver(Observer observer){  Assert.notNull("observer",observer);  observers.addIfAbsent(observer);}  }
class C{  public boolean within(float lat,float lon){  double y=(double)lat;  double x=(double)lon;  return (y < nw_lat && y > se_lat && x < se_lon && x > nw_lon);}  }
class C{  public static void printStatistics(){  printStatistics(System.out);}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final Object[] array,final Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public static void main(String... args) throws Exception {  String file="test.txt";  String cipher="AES";  String filePassword="password";  String compressionAlgorithm="DEFLATE";  String url="jdbc:h2:mem:test";  String user="sa", dbPassword="sa";  PrintWriter w=openScriptWriter(file,compressionAlgorithm,cipher,filePassword,"UTF-8");  w.println("create table test(id int primary key);");  w.println("insert into test select x from system_range(1, 10);");  w.close();  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection(url,user,dbPassword);  RunScript.main("-url",url,"-user",user,"-password",dbPassword,"-script",file,"-options","compression",compressionAlgorithm,"cipher",cipher,"password","'" + filePassword + "'");  Script.main("-url",url,"-user",user,"-password",dbPassword,"-script",file,"-options","compression",compressionAlgorithm,"cipher",cipher,"password","'" + filePassword + "'");  conn.close();  LineNumberReader r=openScriptReader(file,compressionAlgorithm,cipher,filePassword,"UTF-8");  while (true) {    String line=r.readLine();    if (line == null) {      break;    }    System.out.println(line);  }  r.close();}  }
class C{  public TableId(String catalogName,String schemaName,String tableName){  this.catalogName=catalogName;  this.schemaName=schemaName;  this.tableName=tableName;  assert this.tableName != null;  this.id=tableId(this.catalogName,this.schemaName,this.tableName);}  }
class C{  private void handleOtherStatus(State state,InnerState innerState,int statusCode) throws StopRequest {  int finalStatus;  if (DownloaderService.isStatusError(statusCode)) {    finalStatus=statusCode;  } else   if (statusCode >= 300 && statusCode < 400) {    finalStatus=DownloaderService.STATUS_UNHANDLED_REDIRECT;  } else   if (innerState.mContinuingDownload && statusCode == DownloaderService.STATUS_SUCCESS) {    finalStatus=DownloaderService.STATUS_CANNOT_RESUME;  } else {    finalStatus=DownloaderService.STATUS_UNHANDLED_HTTP_CODE;  }  throw new StopRequest(finalStatus,"http error " + statusCode);}  }
class C{  public void singletonInScope(){  Binding.this.singletonInScope();}  }
class C{  public Boolean isSnapshotRelayoutSupported(){  return snapshotRelayoutSupported;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.574 -0500",hash_original_method="75DB599AC418C41475672A1B4451EF2E",hash_generated_method="D78DA0B30534EA4E14CCF1B283BF2E88") protected void queueNextSignalStrengthPoll(){  if (dontPollSignalStrength || (cm.getRadioState().isGsm())) {    return;  }  Message msg;  msg=obtainMessage();  msg.what=EVENT_POLL_SIGNAL_STRENGTH;  sendMessageDelayed(msg,POLL_PERIOD_MILLIS);}  }
class C{  public Object[] parse(String string) throws ParseException {  ParsePosition position=new ParsePosition(0);  Object[] result=parse(string,position);  if (position.getIndex() == 0) {    throw new ParseException("Parse failure",position.getErrorIndex());  }  return result;}  }
class C{  public void readListEnd() throws IOException {  expectTag(TAG_LIST_END);}  }
class C{  public void runStartServerCommand(String... arguments){  runWebSphereCommand("startServer",arguments);}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  protected String shortenName(int shortenBy) throws VPlexApiException {  s_logger.info("claimed volume name {} needs to be shortened by {} characters",_volumeInfo.getVolumeNativeId(),shortenBy);  if (_storageSystemSerialNumber.length() > shortenBy) {    return assembleDefaultName(_storageSystemSerialNumber.substring(shortenBy),_volumeNativeId);  } else   if (_volumeNativeId.length() > shortenBy) {    return assembleDefaultName(_storageSystemSerialNumber,_volumeNativeId.substring(shortenBy));  } else {    s_logger.warn("The storage system serial number {}  and volume native id" + "{} is not long enough to be " + "used for shortening the volume name by {} characters, so we "+ "are going to truncate the beginning of the whole name",_storageSystemSerialNumber,_volumeNativeId,shortenBy);    String volumeName=assembleDefaultName(_storageSystemSerialNumber,_volumeNativeId);    return VPlexApiConstants.VOLUME_NAME_PREFIX + volumeName.substring(shortenBy + 1);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case STORE_NAME:    return isSetStoreName();case SCOPE:  return isSetScope();case PERSIST:return isSetPersist();}throw new IllegalStateException();}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public StringBuilder append(StringBuffer sb){  super.append(sb);  return this;}  }
class C{  public static String toXml(Object obj){  return xstream.toXML(obj);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ToolbarArmedXYGraph(final XYGraph xyGraph,final int flags){  this.xyGraph=xyGraph;  toolbar=new XYGraphToolbar(this.xyGraph,flags);  xyGraph.setOpaque(false);  toolbar.setOpaque(false);  add(toolbar);  add(xyGraph);}  }
class C{  public double correct(){  double correct=0;  for (int i=0; i < size(); i++) {    correct+=get(i,i);  }  return correct;}  }
class C{  public ClearSourceNeurons(final NetworkPanel networkPanel){  super(networkPanel,"Clear Source Neurons",EnablingCondition.SOURCE_NEURONS);  putValue(NAME,"Clear Source Neurons");  putValue(SHORT_DESCRIPTION,"Remove all source neurons (neurons with red" + " squares around them)");}  }
class C{  public DecimalStyle withDecimalSeparator(char decimalSeparator){  if (decimalSeparator == this.decimalSeparator) {    return this;  }  return new DecimalStyle(zeroDigit,positiveSign,negativeSign,decimalSeparator);}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public Object peek(int n){  try {    return m_map[m_firstFree - (1 + n)];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public static Object stringToValue(String string){  if ("true".equalsIgnoreCase(string)) {    return Boolean.TRUE;  }  if ("false".equalsIgnoreCase(string)) {    return Boolean.FALSE;  }  if ("null".equalsIgnoreCase(string)) {    return JSONObject.NULL;  }  try {    char initial=string.charAt(0);    if (initial == '-' || (initial >= '0' && initial <= '9')) {      Long value=new Long(string);      if (value.toString().equals(string)) {        return value;      }    }  } catch (  Exception ignore) {    try {      Double value=new Double(string);      if (value.toString().equals(string)) {        return value;      }    } catch (    Exception ignoreAlso) {    }  }  return string;}  }
class C{  public StringCharacterIterator(String text){  this(text,0);}  }
class C{  boolean isBookmark(){  return mStar.isChecked();}  }
class C{  private void zInternalSetTimeTextField(String text){  skipTextFieldChangedFunctionWhileTrue=true;  if (settings.useLowercaseForDisplayTime) {    text=text.toLowerCase(settings.getLocale());  }  timeTextField.setText(text);  skipTextFieldChangedFunctionWhileTrue=false;  zEventTextFieldChanged();}  }
class C{  private State buildPatch(TaskState.TaskStage stage,TaskState.SubStage substage,Throwable e){  State s=new State();  s.taskState=new TaskState();  s.taskState.stage=stage;  s.taskState.subStage=substage;  if (e != null) {    s.taskState.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public boolean hasActionNode(String nodeId){  return actionNodes.containsKey(nodeId);}  }
class C{  public KeyStoreTab(String title,KseFrame kseFrame,KeyStoreHistory history){  this.kseFrame=kseFrame;  this.history=history;  initComponents(title);}  }
class C{  public void configure(){  setCommandStationType(getOptionState(option2Name));  setTurnoutHandling(getOptionState(option3Name));  LnPacketizer packets=new LnPacketizer();  packets.connectPort(this);  this.getSystemConnectionMemo().setLnTrafficController(packets);  this.getSystemConnectionMemo().configureCommandStation(commandStationType,mTurnoutNoRetry,mTurnoutExtraSpace);  this.getSystemConnectionMemo().configureManagers();  packets.startThreads();}  }
class C{  public ConfigPropertiesWrapper(String parameterPrefix){  m_parameterPrefix=parameterPrefix;}  }
class C{  public static TokenKeysBundle createNewTokenKeysBundleWithRotatedKeys(TokenKeysBundle currentBundle) throws NoSuchAlgorithmException {  TokenKeysBundle newBundle=new TokenKeysBundle();  newBundle._cachedProxyKey=currentBundle._cachedProxyKey;  newBundle._cachedKeyPairs.addAll(currentBundle._cachedKeyPairs);  newBundle._cachedKeyPairs.add(getNewKeyPair());  if (newBundle._cachedKeyPairs.size() > 2) {    newBundle._cachedKeyPairs.remove(0);  }  return newBundle;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.231 -0500",hash_original_method="4AB8965ACD48B286E6BCF28D614F6B00",hash_generated_method="BC575776DFB584ABEB1578CB4B01E8B5") public void drawColor(int color,PorterDuff.Mode mode){  addTaint(color + mode.nativeInt);}  }
class C{  public final String nodeName(){  return settings.get("name","");}  }
class C{  public Builder deleteRoles(){  deleteFields.add("roles");  return this;}  }
class C{  public void remove(String key){  attr.remove(key);  invalidate();}  }
class C{  static public Locator northEast(boolean isTransform){  return new RelativeLocator(1.0,0.0,isTransform);}  }
class C{  public T animate(Animation anim){  if (view != null && anim != null) {    view.startAnimation(anim);  }  return self();}  }
class C{  private void evaluteAveragesAndAddToTimeSeries(MetricTimeSeries timeSeries,double[] values,long[] times,int startIdx,int end){  if (startIdx == end) {    timeSeries.add(times[startIdx],values[startIdx]);  }  double valueSum=0;  long timeSum=0;  for (int i=startIdx; i < end; i++) {    valueSum+=values[i];    timeSum+=times[i];  }  int amount=end - startIdx;  timeSeries.add(timeSum / amount,valueSum / amount);}  }
class C{  public void putBoolean(String key,boolean value){  unparcel();  mMap.put(key,value);}  }
class C{  public DNSOutgoing(int flags,boolean multicast,int senderUDPPayload){  super(flags,0,multicast);  _names=new HashMap<String,Integer>();  _maxUDPPayload=(senderUDPPayload > 0 ? senderUDPPayload : DNSConstants.MAX_MSG_TYPICAL);  _questionsBytes=new MessageOutputStream(senderUDPPayload,this);  _answersBytes=new MessageOutputStream(senderUDPPayload,this);  _authoritativeAnswersBytes=new MessageOutputStream(senderUDPPayload,this);  _additionalsAnswersBytes=new MessageOutputStream(senderUDPPayload,this);}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX);  mScrollerY.fling(startY,velocityY,minY,maxY,overY);}  }
class C{  Shape adjustPaintRegion(Shape a){  return a;}  }
class C{  protected void init_actions(){  action_obj=new CUP$LexParse$actions(this);}  }
class C{  public boolean isPopupOpen(){  return (popup != null);}  }
class C{  private void writeOutputFiles(){  if (config.getOutputNetworkFile() != null && config.getOutputScheduleFile() != null) {    try {      ScheduleTools.writeTransitSchedule(schedule,config.getOutputScheduleFile());      NetworkTools.writeNetwork(network,config.getOutputNetworkFile());    } catch (    Exception e) {      log.error("Cannot write to output directory! Trying to write schedule and network file in working directory");      long t=System.nanoTime() / 1000000;      try {        ScheduleTools.writeTransitSchedule(schedule,t + "schedule.xml.gz");        NetworkTools.writeNetwork(network,t + "network.xml.gz");      } catch (      Exception e1) {        throw new RuntimeException("Files could not be written in working directory");      }    }    if (config.getOutputStreetNetworkFile() != null) {      NetworkTools.writeNetwork(NetworkTools.filterNetworkByLinkMode(network,Collections.singleton(TransportMode.car)),config.getOutputStreetNetworkFile());    }  } else {    log.info("");    log.info("No output paths defined, schedule and network are not written to files.");  }}  }
class C{  protected static Map<String,Object> anns(final GlobalAnnotations globals,final NV... anns){  final int size=2 + (anns != null ? anns.length : 0);  final NV[] nv=new NV[size];  nv[0]=new NV(Annotations.NAMESPACE,globals.lex);  nv[1]=new NV(Annotations.TIMESTAMP,globals.timestamp);  if (anns != null) {    for (int i=0; i < anns.length; i++) {      nv[i + 2]=anns[i];    }  }  return NV.asMap(nv);}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  static public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public static GeoDistanceRangeQueryBuilder geoDistanceRangeQuery(String name){  return new GeoDistanceRangeQueryBuilder(name);}  }
class C{  @Deprecated public JPAMailbox(){  super();}  }
class C{  private boolean checkGooglePlayServicesAvailable(){  final int connectionStatusCode=GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);  if (GooglePlayServicesUtil.isUserRecoverableError(connectionStatusCode)) {    showGooglePlayServicesAvailabilityErrorDialog(connectionStatusCode);    return false;  }  return true;}  }
class C{  public boolean hasAppendix(){  return hasAppendix;}  }
class C{  protected boolean[] runBasicTest(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int missingLevel,boolean predictorMissing,boolean classMissing,int numTrain,int numClasses,ArrayList<String> accepts){  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,TestInstances.CLASS_IS_LAST,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  @Override public ArrayList<ArrayList<Region>> defineRegions(ArrayList<ChartSet> data){  int dataSize=data.size();  int setSize=data.get(0).size();  float innerChartBottom=this.getInnerChartBottom();  ArrayList<ArrayList<Region>> result=new ArrayList<ArrayList<Region>>(dataSize);  for (int i=0; i < dataSize; i++)   result.add(new ArrayList<Region>(setSize));  float verticalOffset;  float nextBottomY;  float dist;  BarSet barSet;  Bar bar;  for (int i=0; i < setSize; i++) {    verticalOffset=0;    nextBottomY=innerChartBottom;    for (int j=0; j < dataSize; j++) {      barSet=(BarSet)data.get(j);      bar=(Bar)barSet.getEntry(i);      dist=innerChartBottom - bar.getY();      result.get(j).add(new Region((int)(bar.getX() - barWidth / 2),(int)(innerChartBottom - (dist + verticalOffset)),(int)(bar.getX() + barWidth / 2),(int)(nextBottomY)));      nextBottomY=innerChartBottom - (dist + verticalOffset);      verticalOffset+=dist + 2;    }  }  return result;}  }
class C{  public Joiner join(Class<? extends DataObject> clazz,String alias,DataObject... objs){  return join(clazz,alias,new ArrayList<DataObject>(Arrays.asList(objs)));}  }
class C{  protected final boolean isDescendant(int identity){  return (_parent2(identity) >= _startNode) || (_startNode == identity);}  }
class C{  protected AbstractColorInterpolationRable(List srcs){  super(srcs);}  }
class C{  private static Instruction makePhiInstruction(HeapVariable<Object> H,BasicBlock bb){  int n=bb.getNumberOfIn();  Enumeration<BasicBlock> in=bb.getIn();  HeapOperand<Object> lhs=new HeapOperand<Object>(H);  Instruction s=Phi.create(PHI,lhs,n);  lhs.setInstruction(s);  for (int i=0; i < n; i++) {    HeapOperand<Object> op=new HeapOperand<Object>(H);    op.setInstruction(s);    Phi.setValue(s,i,op);    BasicBlock pred=in.nextElement();    Phi.setPred(s,i,new BasicBlockOperand(pred));  }  return s;}  }
class C{  private TFSRepository connectInternal(final IProject project,final boolean disconnectOtherServers,final ProjectRepositoryData projectData){  ProjectRepositoryConnectionJob connectionJob;  if (testLicense() == false) {synchronized (projectData) {      if (projectData.getStatus() == ProjectRepositoryStatus.CONNECTING) {        projectData.setStatus(ProjectRepositoryStatus.OFFLINE);        return null;      }      return projectData.getRepository();    }  }synchronized (projectData) {    if (projectData.getStatus() != ProjectRepositoryStatus.CONNECTING) {      return projectData.getRepository();    }    connectionJob=projectData.getConnectionJob();    if (connectionJob == null) {      connectionJob=new ProjectRepositoryConnectionJob(project,disconnectOtherServers,projectData);      connectionJob.schedule();      projectData.setConnectionJob(connectionJob);    }  }  try {    new ExtensionPointAsyncObjectWaiter().joinJob(connectionJob);  } catch (  final InterruptedException e) {    log.error(MessageFormat.format("Interrupted while waiting to connect to project {0}",project.getName()));    return null;  }synchronized (projectData) {    return projectData.getRepository();  }}  }
class C{  public void moveY(double dy){  double zoom=zoomProperty.get();  double maxty=256 * Math.pow(2,zoom) - this.getScene().getHeight();  if (debug) {    System.out.println("ty = " + getTranslateY() + " and dy = "+ dy);  }  if (getTranslateY() <= 0) {    if (getTranslateY() + maxty >= 0) {      setTranslateY(Math.min(0,getTranslateY() - dy));    } else {      setTranslateY(-maxty + 1);    }  } else {    setTranslateY(0);  }  loadTiles();}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  public QuadTreeNode child(QuadTreeNode node){  return node.getSouthWest();}  }
class C{  protected static Vector convertToVector(Object[][] anArray){  if (anArray == null) {    return null;  }  Vector<Vector> v=new Vector<Vector>(anArray.length);  for (  Object[] o : anArray) {    v.addElement(convertToVector(o));  }  return v;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapreturnfirstitem.class,args);}  }
class C{  protected <T extends AbstractDiscoveredTenantResource>List<NamedElementQueryResultList.NamedElement> filterDiscoveredTenantResourcesByTenant(URI tenantId,Class<T> clazz,List<NamedElementQueryResultList.NamedElement> elements){  if (CollectionUtils.isEmpty(elements)) {    return elements;  }  URI localTenantId=tenantId;  if (NullColumnValueGetter.isNullURI(localTenantId) || AbstractDiscoveredTenantResource.NO_TENANT_SELECTOR.equalsIgnoreCase(localTenantId.toString())) {    return elements;  }  if (AbstractDiscoveredTenantResource.TENANT_SELECTOR_FOR_UNASSIGNED.equalsIgnoreCase(localTenantId.toString())) {    localTenantId=NullColumnValueGetter.getNullURI();  }  Iterator<NamedElementQueryResultList.NamedElement> elementIterator=elements.iterator();  while (elementIterator.hasNext()) {    NamedElementQueryResultList.NamedElement element=elementIterator.next();    if (element == null) {      continue;    }    T dataCenter=_dbClient.queryObject(clazz,element.getId());    if (dataCenter == null) {      continue;    }    if (areEqual(localTenantId,dataCenter.getTenant())) {      continue;    }    elementIterator.remove();  }  return elements;}  }
class C{  public CommandLine add(String... args){  if (args != null && args.length > 0) {    Collections.addAll(line,args);  }  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String ouptutFile=null;  String shapefileName=null;  int i=0;  int row, col, rows, cols;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  Geometry[] JTSGeometries;  GMLWriter gmlWriter=new GMLWriter();  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  if (inputFilesString.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  try {    for (i=0; i < numFiles; i++) {      if (numFiles > 1) {        progress=(int)(100f * i / (numFiles - 1));        updateProgress("Loop " + (i + 1) + " of "+ numFiles+ ":",progress);      }      shapefileName=imageFiles[i];      if (!((new File(shapefileName)).exists())) {        showFeedback("Vector file does not exist.");        break;      }      ShapeFile shapefile=new ShapeFile(shapefileName);      ouptutFile=shapefileName.replace(".shp",".gml");      (new File(ouptutFile)).delete();      fw=new FileWriter(ouptutFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=0;      int n=0;      int onePercentOfRecs=shapefile.getNumberOfRecords() / 100;      for (      ShapeFileRecord record : shapefile.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          JTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < JTSGeometries.length; a++) {            str1=gmlWriter.write(JTSGeometries[a]);            out.println(str1);          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        if (n == onePercentOfRecs) {          n=0;          progress++;          updateProgress("Exporting shapefile data:",progress);        }      }    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void runListPackages(boolean showApplicationPackage){  int getFlags=0;  boolean listDisabled=false, listEnabled=false;  boolean listSystem=false, listThirdParty=false;  boolean listInstaller=false;  int userId=UserHandle.USER_OWNER;  try {    String opt;    while ((opt=nextOption()) != null) {      if (opt.equals("-l")) {      } else       if (opt.equals("-lf")) {        showApplicationPackage=true;      } else       if (opt.equals("-f")) {        showApplicationPackage=true;      } else       if (opt.equals("-d")) {        listDisabled=true;      } else       if (opt.equals("-e")) {        listEnabled=true;      } else       if (opt.equals("-s")) {        listSystem=true;      } else       if (opt.equals("-3")) {        listThirdParty=true;      } else       if (opt.equals("-i")) {        listInstaller=true;      } else       if (opt.equals("--user")) {        userId=Integer.parseInt(nextArg());      } else       if (opt.equals("-u")) {        getFlags|=PackageManager.GET_UNINSTALLED_PACKAGES;      } else {        System.err.println("Error: Unknown option: " + opt);        return;      }    }  } catch (  RuntimeException ex) {    System.err.println("Error: " + ex.toString());    return;  }  String filter=nextArg();  try {    final List<PackageInfo> packages=getInstalledPackages(mPm,getFlags,userId);    int count=packages.size();    for (int p=0; p < count; p++) {      PackageInfo info=packages.get(p);      if (filter != null && !info.packageName.contains(filter)) {        continue;      }      final boolean isSystem=(info.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;      if ((!listDisabled || !info.applicationInfo.enabled) && (!listEnabled || info.applicationInfo.enabled) && (!listSystem || isSystem)&& (!listThirdParty || !isSystem)) {        System.out.print("package:");        if (showApplicationPackage) {          System.out.print(info.applicationInfo.sourceDir);          System.out.print("=");        }        System.out.print(info.packageName);        if (listInstaller) {          System.out.print("  installer=");          System.out.print(mPm.getInstallerPackageName(info.packageName));        }        System.out.println();      }    }  } catch (  RemoteException e) {    System.err.println(e.toString());    System.err.println(PM_NOT_RUNNING_ERR);  }}  }
class C{  public void initSenTokenization(){  isTokenization=true;}  }
class C{  public boolean isModified(){  boolean modified=((isSelected() && vo.getStatus() == ServiceStatus.INACTIVE) || (!isSelected() && vo.getStatus() == ServiceStatus.ACTIVE));  if (!modified && isVisibleInCatalogSupported() && isVisibleInCatalog() != oldVisibility)   modified=true;  return modified;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.174 -0400",hash_original_method="A945BA78507B2858D4067FE8A778400D",hash_generated_method="C1E5EEA7D61B02119B90AA417B51ABB8") public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  public boolean containsFieldValues(Object[] fieldValues){  return super.contains(fieldValues);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.KEY___KEY_ID_1:    return getKeyId_1();case UmplePackage.KEY___ANONYMOUS_KEY_11:  return getAnonymous_key_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean equalInZ(Coordinate c,double tolerance){  return NumberUtil.equalsWithTolerance(this.z,c.z,tolerance);}  }
class C{  public static void cancelEdit(Extent extent,BBC reason){  try {    WEManager.IMP.cancelEdit(extent,reason);  } catch (  WorldEditException ignore) {  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static InputStream tryGzipInput(InputStream in) throws IOException {  if (!in.markSupported()) {    PushbackInputStream pb=new PushbackInputStream(in,16);    in=pb;    byte[] magic={0,0};    pb.read(magic);    pb.unread(magic);    if (magic[0] == 31 && magic[1] == -117) {      return new GZIPInputStream(pb);    }    return in;  }  in.mark(16);  boolean isgzip=(in.read() == 31 && in.read() == -117);  in.reset();  if (isgzip) {    in=new GZIPInputStream(in);  }  return in;}  }
class C{  public void replaceText(int startIndex,int endIndex,String s){  selectText(startIndex,endIndex);  JTextComponent.this.replaceSelection(s);}  }
class C{  private void initializeUsernameEditText(){  usernameEditText=(EditText)findViewById(R.id.username_edit_text);  usernameEditText.addValidator(Validators.notEmpty(this,R.string.not_empty_validator_error_message));  usernameEditText.addValidator(Validators.maxLength(this,R.string.max_length_validator_error_messsage,MAX_CHARACTERS));  usernameEditText.addValidator(Validators.letterOrNumber(this,R.string.letter_or_number_validator_error_message,Case.CASE_INSENSITIVE,false,new char[]{'-','_'}));}  }
class C{  void inconsistentOnType(Resource type,Derivation fact){  if (!possibleInconsistencies.containsKey(type)) {    possibleInconsistencies.put(type,new LinkedList<Derivation>());  }  possibleInconsistencies.get(type).add(fact);  if (knownTypes.containsKey(type)) {    Derivation d=fact.clone();    d.addSource(knownTypes.get(type));    collectInconsistency(d);  }}  }
class C{  public XML(String element_type,boolean close,Filter filter){  setElementType(element_type);  setNeedClosingTag(close);  setFilter(filter);}  }
class C{  public synchronized void save(CloudObject object){  if (storageQueue.contains(object)) {    storageQueue.remove(object);  }  storageQueue.addElement(object);  Storage.getInstance().writeObject("CN1StorageQueue",storageQueue);  object.setStatus(CloudObject.STATUS_COMMIT_IN_PROGRESS);}  }
class C{  @SuppressWarnings("unchecked") public SimpleLexicon splitAllStates(int[] counts,boolean moreSubstatesThanCounts,int mode){  SimpleLexicon splitLex=this.copyLexicon();  short[] newNumSubStates=new short[numSubStates.length];  newNumSubStates[0]=1;  Random random=GrammarTrainer.RANDOM;  for (short i=1; i < numSubStates.length; i++) {    newNumSubStates[i]=(short)(numSubStates[i] * 2);  }  splitLex.numSubStates=newNumSubStates;  double[][][] newScores=new double[scores.length][][];  double[][][] newExpCounts=new double[scores.length][][];  for (int tag=0; tag < expectedCounts.length; tag++) {    int nTagWords=tagWordIndexer[tag].size();    newScores[tag]=new double[newNumSubStates[tag]][nTagWords];    newExpCounts[tag]=new double[newNumSubStates[tag]][nTagWords];    for (int substate=0; substate < numSubStates[tag]; substate++) {      for (int word=0; word < expectedCounts[tag][substate].length; word++) {        newScores[tag][2 * substate][word]=newScores[tag][2 * substate + 1][word]=scores[tag][substate][word];        if (mode == 2)         newScores[tag][2 * substate][word]=newScores[tag][2 * substate + 1][word]=1.0 + random.nextDouble() / 100.0;      }    }  }  splitLex.scores=newScores;  splitLex.expectedCounts=newExpCounts;  return splitLex;}  }
class C{  public JSONException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public void closeXml(){}  }
class C{  public GenerationalDistance(Problem problem,NondominatedPopulation referenceSet){  this(problem,referenceSet,Settings.getGDPower());}  }
class C{  public static Object stringToValue(String string){  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char initial=string.charAt(0);  if ((initial >= '0' && initial <= '9') || initial == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1 || "-0".equals(string)) {        Double d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong.longValue() == myLong.intValue()) {            return Integer.valueOf(myLong.intValue());          }          return myLong;        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  public ConsoleDisplay(final boolean bufferOutput){  super();  outputWriter=new PrintWriter(System.out,bufferOutput == false);  errorWriter=new PrintWriter(System.err,bufferOutput == false);  int consoleWidth=ConsoleUtils.getInstance().getConsoleColumns();  int consoleHeight=ConsoleUtils.getInstance().getConsoleRows();  if (consoleWidth == 0) {    consoleWidth=DEFAULT_CONSOLE_WIDTH;  } else   if (consoleWidth > MAXIMUM_CONSOLE_WIDTH) {    consoleWidth=MAXIMUM_CONSOLE_WIDTH;  }  if (consoleHeight == 0) {    consoleHeight=DEFAULT_CONSOLE_HEIGHT;  } else   if (consoleHeight > MAXIMUM_CONSOLE_HEIGHT) {    consoleHeight=MAXIMUM_CONSOLE_HEIGHT;  }  width=consoleWidth;  height=consoleHeight;}  }
class C{  public EditorScene loadScene(ProjectContext context,String sceneName) throws FileNotFoundException {  SceneDescriptor descriptor=kryoManager.loadScene(context,sceneName);  EditorScene scene=DescriptorConverter.convert(descriptor,context.assetManager.getAssetMap());  scene.skybox=SkyboxBuilder.createDefaultSkybox();  SceneGraph sceneGraph=scene.sceneGraph;  sceneGraph.batch=modelBatch;  for (  GameObject go : sceneGraph.getGameObjects()) {    initGameObject(context,go);  }  Array<Component> terrainComponents=new Array<>();  for (  GameObject go : sceneGraph.getGameObjects()) {    go.findComponentsByType(terrainComponents,Component.Type.TERRAIN,true);  }  for (  Component c : terrainComponents) {    if (c instanceof TerrainComponent) {      scene.terrains.add(((TerrainComponent)c).getTerrain());    }  }  return scene;}  }
class C{  public static int size(ButtonGroup self){  return self.getButtonCount();}  }
class C{  public GridLayoutManager.SpanSizeLookup createSpanSizeLookup(GridLayoutManager.SpanSizeLookup wrap,int spanCount){  return new SectionSpanSizeLookup(wrap,spanCount);}  }
class C{  public Builder map(String fullyQualifiedColumnNames,ColumnMapper mapper){  Predicate<ColumnId> columnMatcher=Predicates.includes(fullyQualifiedColumnNames,null);  rules.add(new MapperRule(columnMatcher,mapper));  return this;}  }
class C{  public String format(){  String result=message;  for (  Object object : objects) {    String s=result.replaceFirst("%%",Matcher.quoteReplacement(stringify(object)));    if (result.equals(s)) {      throw new IllegalStateException("Too many parameters");    }    result=s;  }  if (result.contains("%%")) {    throw new IllegalStateException("Not enough parameters");  }  return result;}  }
class C{  public static Page nextPage(Page currentPage){  if (currentPage.getParentDoc().getNumPages() < currentPage.getParentDoc().getPageIndex(currentPage) + 2) {    currentPage.getParentDoc().addBlankPage();    currentPage=currentPage.getParentDoc().getPage(currentPage.getParentDoc().getNumPages() - 1);  } else {    currentPage=currentPage.getParentDoc().getPage(currentPage.getParentDoc().getPageIndex(currentPage) + 1);  }  return currentPage;}  }
class C{  public void read(){  StateInPipe stateOld;  StateInPipe stateNew;  do {    stateOld=_stateInRef.get();    stateNew=stateOld.toActive();  } while (!_stateInRef.compareAndSet(stateOld,stateNew));  while (stateNew.isActive()) {    readPipe();    wakeOut();    do {      stateOld=_stateInRef.get();      stateNew=stateOld.toIdle();    } while (!_stateInRef.compareAndSet(stateOld,stateNew));  }  if (_stateInRef.get().isClosed()) {    StateOutPipe outStateOld=_stateOutRef.getAndSet(StateOutPipe.CLOSE);    if (!outStateOld.isClosed()) {      _outFlow.cancel();    }  }}  }
class C{  public static JBBPParser prepare(final String script,final JBBPBitOrder bitOrder,final int flags){  return new JBBPParser(script,bitOrder,null,flags);}  }
class C{  public DroneConfig(ControlTower tower,boolean modal){  super(tower,modal);  this.tower=tower;  prefs=Preferences.userNodeForPackage(this.getClass());  initComponents();  loadSettings();}  }
class C{  public static Border createDottedBorder(int thickness){  return createCSSBorder(TYPE_DOTTED,thickness);}  }
class C{  SolrInputDocument processAdd(final String chain,final SolrInputDocument docIn) throws IOException {  SolrCore core=h.getCore();  UpdateRequestProcessorChain pc=core.getUpdateProcessingChain(chain);  assertNotNull("No Chain named: " + chain,pc);  SolrQueryResponse rsp=new SolrQueryResponse();  SolrQueryRequest req=new LocalSolrQueryRequest(core,new ModifiableSolrParams());  try {    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));    AddUpdateCommand cmd=new AddUpdateCommand(req);    cmd.solrDoc=docIn;    UpdateRequestProcessor processor=pc.createProcessor(req,rsp);    processor.processAdd(cmd);    return cmd.solrDoc;  }  finally {    SolrRequestInfo.clearRequestInfo();    req.close();  }}  }
class C{  protected void pop_source() throws IOException {  if (listener != null)   listener.handleSourceChange(this.source,"pop");  Source s=this.source;  this.source=s.getParent();  s.close();  if (listener != null && this.source != null)   listener.handleSourceChange(this.source,"resume");}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  private void loadGroup(int group){  if (group < 0 || group > groupCount) {    throw new IndexOutOfBoundsException("Group index out of bounds: " + group);  }  if (!hasMatch) {    throw new IllegalStateException("perhaps no match attempted");  }  if (group == 0 || hasGroups) {    return;  }  int end=groups[1] + 1;  if (end > inputLength) {    end=inputLength;  }  boolean ok=pattern.re2().match(inputSequence,groups[0],end,anchorFlag,groups,1 + groupCount);  if (!ok) {    throw new IllegalStateException("inconsistency in matching group data");  }  hasGroups=true;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public final void extend(final int amount){  setHeight(getHeight() + amount);}  }
class C{  public void clearCache(){  if (_lifecycle.isStopping()) {    return;  }  if (log.isLoggable(Level.FINER)) {    log.finest("clearCache");  }  getInvocationManager().clearCache();}  }
class C{  protected void addModule(Map<Class<? extends IFloodlightService>,IFloodlightModule> moduleMap,Collection<IFloodlightModule> moduleList,IFloodlightModule module){  Collection<Class<? extends IFloodlightService>> servs=moduleServiceMap.get(module);  if (servs != null) {    for (    Class<? extends IFloodlightService> c : servs)     moduleMap.put(c,module);  }  moduleList.add(module);}  }
class C{  public void prepare() throws ReplicatorException, InterruptedException {}  }
class C{  private static SessionService createServiceProxy(){  if (wsProxyInfo.getServicePort() == ServicePort.STS) {    return WsProxy.getProxySTS(wsProxyInfo.getWsInfo(),wsProxyInfo.getUserCredentials(),SessionService.class);  } else {    return WsProxy.getProxyInternal(wsProxyInfo.getWsInfo(),wsProxyInfo.getUserCredentials(),SessionService.class);  }}  }
class C{  public MarketingPermissionNotFoundException(String message,Object[] params){  super(message,params);}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.214 -0500",hash_original_method="6593DA2291538241F61FD613E7FE6D5B",hash_generated_method="681D0242EDBE5796B0251F8FE01E5F4A") public boolean quickReject(RectF rect,EdgeType type){  return native_quickReject(mNativeCanvas,rect,type.nativeInt);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SWFVectors tagDefineFont2(int id,int flags,String name,int numGlyphs,int ascent,int descent,int leading,int[] codes,int[] advances,Rect[] bounds,int[] kernCodes1,int[] kernCodes2,int[] kernAdjustments) throws IOException {  if (tags != null) {    return tags.tagDefineFont2(id,flags,name,numGlyphs,ascent,descent,leading,codes,advances,bounds,kernCodes1,kernCodes2,kernAdjustments);  }  return null;}  }
class C{  static NameConstraintsExtension mergeNameConstraints(X509Certificate currCert,NameConstraintsExtension prevNC) throws CertPathValidatorException {  X509CertImpl currCertImpl;  try {    currCertImpl=X509CertImpl.toImpl(currCert);  } catch (  CertificateException ce) {    throw new CertPathValidatorException(ce);  }  NameConstraintsExtension newConstraints=currCertImpl.getNameConstraintsExtension();  if (debug != null) {    debug.println("prevNC = " + prevNC + ", newNC = "+ String.valueOf(newConstraints));  }  if (prevNC == null) {    if (debug != null) {      debug.println("mergedNC = " + String.valueOf(newConstraints));    }    if (newConstraints == null) {      return newConstraints;    } else {      return (NameConstraintsExtension)newConstraints.clone();    }  } else {    try {      prevNC.merge(newConstraints);    } catch (    IOException ioe) {      throw new CertPathValidatorException(ioe);    }    if (debug != null) {      debug.println("mergedNC = " + prevNC);    }    return prevNC;  }}  }
class C{  public boolean isEmpty(){  if (object instanceof String) {    return ((String)object).length() == 0;  }  if (object instanceof Collection) {    return ((Collection)object).isEmpty();  }  if (object instanceof Iterator && wrapper.is2324Bugfixed()) {    return !((Iterator)object).hasNext();  }  if (object instanceof Map) {    return ((Map)object).isEmpty();  }  return object == null || Boolean.FALSE.equals(object);}  }
class C{  private void ensureCapacity(int wordsRequired){  if (words.length < wordsRequired) {    int request=Math.max(2 * words.length,wordsRequired);    words=Arrays.copyOf(words,request);  }}  }
class C{  public static void openBugWhoWindowItem(Connector connector){  RaptorWindowItem[] items=Raptor.getInstance().getWindow().getWindowItems(BugWhoWindowItem.class);  boolean openNewWindow=true;  for (  RaptorWindowItem item : items) {    BugWhoWindowItem bugWhoWindowItem=(BugWhoWindowItem)item;    if (bugWhoWindowItem.getConnector() == connector) {      Raptor.getInstance().getWindow().forceFocus(item);      openNewWindow=false;      break;    }  }  if (openNewWindow) {    BugWhoWindowItem item=new BugWhoWindowItem(connector.getBughouseService());    Raptor.getInstance().getWindow().addRaptorWindowItem(item);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildHouseArea(zone);}  }
class C{  public double loadDouble(Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public GroupCommand(String name,int matches,int nGroups){  _name=name;  _matches=matches;  _ngroups=nGroups;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'READ_THREAD'";  db.execSQL(sql);}  }
class C{  private PublisherBlockingStub publisherStub() throws IOException {  if (cachedPublisherStub == null) {    cachedPublisherStub=PublisherGrpc.newBlockingStub(newChannel());  }  return cachedPublisherStub.withDeadlineAfter(timeoutSec,TimeUnit.SECONDS);}  }
class C{  private static int countUppercase(String str,int index,int count){  if (index < 0)   return count; else   if (Character.isUpperCase(str.charAt(index)))   return countUppercase(str,index - 1,count + 1); else   return countUppercase(str,index - 1,count);}  }
class C{  public InputNode put(String name,String value){  InputNode node=new InputAttribute(source,name,value);  if (name != null) {    put(name,node);  }  return node;}  }
class C{  @Override public synchronized void print(String x){  StyledDocument doc;  doc=m_Parent.m_Output.getStyledDocument();  try {    doc.insertString(doc.getLength(),x,doc.getStyle(m_Style));    m_Parent.m_Output.setCaretPosition(doc.getLength());    m_Parent.trim();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public XorPredicate(Predicate p1){  add(p1);}  }
class C{  public static AdClients run(AdSenseHost service,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all ad clients for host account");  System.out.println("=================================================================");  String pageToken=null;  AdClients adClients=null;  do {    adClients=service.adclients().list().setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if ((adClients.getItems() != null) && !adClients.getItems().isEmpty()) {      for (      AdClient adClient : adClients.getItems()) {        System.out.printf("Ad client for product \"%s\" with ID \"%s\" was found.\n",adClient.getProductCode(),adClient.getId());        System.out.printf("\tSupports reporting: %s\n",adClient.getSupportsReporting() ? "Yes" : "No");      }    } else {      System.out.println("No ad clients found.");    }    pageToken=adClients.getNextPageToken();  } while (pageToken != null);  System.out.println();  return adClients;}  }
class C{  public static String dumpAsString(Object obj){  return dumpAsString(obj,false);}  }
class C{  public static PrivateKey fromHexString(final String hex){  try {    return new PrivateKey(new BigInteger(1,HexEncoder.getBytes(hex)));  } catch (  final IllegalArgumentException e) {    throw new CryptoException(e);  }}  }
class C{  public static void cleanUpHttpClient(StatelessService service,OkHttpClient httpClient){  if (httpClient == null) {    return;  }  httpClient.connectionPool().evictAll();  ExecutorService httpClientExecutor=httpClient.dispatcher().executorService();  httpClientExecutor.shutdown();  awaitTermination(service,httpClientExecutor);  httpClient=null;}  }
class C{  @Override public void windowIconified(WindowEvent e){}  }
class C{  public void testBug60816() throws Exception {  createProcedure("test60816_1","(INOUT x INTEGER)\nBEGIN\nSET x = x + 1;\nEND");  createProcedure("test60816_2","(x INTEGER, OUT y INTEGER)\nBEGIN\nSET y = x + 1;\nEND");  createProcedure("test60816_3","(INOUT x INTEGER)\nBEGIN\nSET x = 10;\nEND");  CallableStatement call=this.conn.prepareCall("{ call test60816_1(?) }");  call.setInt(1,1);  call.registerOutParameter(1,Types.INTEGER);  call.execute();  assertEquals(2,call.getInt(1));  call=this.conn.prepareCall("{ call test60816_2(?, ?) }");  call.setInt(1,1);  call.registerOutParameter(2,Types.INTEGER);  call.execute();  assertEquals(2,call.getInt(2));  call=this.conn.prepareCall("{ call test60816_2(?, ?) }");  call.setNull(1,Types.INTEGER);  call.registerOutParameter(2,Types.INTEGER);  call.execute();  assertEquals(0,call.getInt(2));  assertTrue(call.wasNull());  call=this.conn.prepareCall("{ call test60816_1(?) }");  call.setNull(1,Types.INTEGER);  call.registerOutParameter(1,Types.INTEGER);  call.execute();  assertEquals(0,call.getInt(1));  assertTrue(call.wasNull());  call=this.conn.prepareCall("{ call test60816_3(?) }");  call.setNull(1,Types.INTEGER);  call.registerOutParameter(1,Types.INTEGER);  call.execute();  assertEquals(10,call.getInt(1));}  }
class C{  public SystemException(Throwable cause){  super(cause);}  }
class C{  public static byte[] decode(String input) throws IOException {  byte[] src=input.replaceAll("\\s+","").getBytes();  try {    return Base64.getDecoder().decode(src);  } catch (  IllegalArgumentException e) {    throw new IOException(e);  }}  }
class C{  public ConfigPaymentPanelCaixa(){  initComponents();}  }
class C{  public static int EREMCHG(){  return 78;}  }
class C{  public void startAfterLoginActivity(Context context,Bundle extras){  if (!startDelegateActivity(context,delegate.getStartAfterLoginIntent(),extras)) {    startMessagingActivity(context,extras);  }}  }
class C{  public void excludeFrom(int start){  Assert.check(currentState != BitsState.UNKNOWN);  Bits temp=new Bits();  temp.sizeTo(bits.length);  temp.inclRange(0,start);  internalAndSet(temp);  currentState=BitsState.NORMAL;}  }
class C{  public static boolean snapshotExists(SolrZkClient zkClient,String collectionName,String commitName) throws KeeperException, InterruptedException {  String zkPath=getSnapshotMetaDataZkPath(collectionName,Optional.ofNullable(commitName));  return zkClient.exists(zkPath,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.915 -0400",hash_original_method="50002FAC0CC159EBEC26C7D3BEE7C633",hash_generated_method="1B7200FDFBA1CFC37E61FAB2E13DF1EF") public XmlStreamWriter(File file) throws FileNotFoundException {  this(file,null);}  }
class C{  @Override public void onReceive(Context context,Intent intent){  String action=intent.getAction();  if (BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)) {    onBluetoothActionStateChanged(context,intent);  } else   if (BluetoothDevice.ACTION_ACL_CONNECTED.equals(action)) {    onBluetoothConnected(context,intent);  } else   if (BluetoothDevice.ACTION_ACL_DISCONNECTED.equals(action)) {    onBluetoothDisconnected(context,intent);  } else   if (BluetoothDevice.ACTION_ACL_DISCONNECT_REQUESTED.equals(action)) {    onBluetoothDisconnectRequested(context,intent);  } else   if (BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(action)) {    onBluetoothBondStateChange(context,intent);  } else   if (BluetoothDevice.ACTION_CLASS_CHANGED.equals(action)) {    onBluetoothRemoteDeviceClassChange(context,intent);  } else   if (BluetoothDevice.ACTION_FOUND.equals(action)) {    onBluetoothPeerFound(context,intent);  } else   if (BluetoothDevice.ACTION_NAME_CHANGED.equals(action)) {    onBluetoothRemoteNameChange(context,intent);  } else   if (BluetoothDevice.ACTION_UUID.equals(action)) {    onBluetoothBroadcastRemoteUUID(context,intent);  } else {    log.debug("Received an event we weren't expecting: " + action);  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("MiscFormat ver[");  buffer.append(ver);  buffer.append("] fdrname [");  buffer.append(fdrname);  buffer.append("] vollisttype [");  buffer.append(vollisttype);  buffer.append("] id [");  buffer.append(id);  buffer.append("]");  return buffer.toString();}  }
class C{  public void enableDashedHighlightLine(float lineLength,float spaceLength,float phase){  mHighlightDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  HasOrdinalPositionView(Document parent,Map<String,Object> data,Class<? extends Document> mainInterface){  super(parent,data,mainInterface);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CategoryStepRenderer)) {    return false;  }  CategoryStepRenderer that=(CategoryStepRenderer)obj;  if (this.stagger != that.stagger) {    return false;  }  return super.equals(obj);}  }
class C{  public Matrix4x3f rotationZYX(float angleZ,float angleY,float angleX){  float cosZ=(float)Math.cos(angleZ);  float sinZ=(float)Math.sin(angleZ);  float cosY=(float)Math.cos(angleY);  float sinY=(float)Math.sin(angleY);  float cosX=(float)Math.cos(angleX);  float sinX=(float)Math.sin(angleX);  float m_sinZ=-sinZ;  float m_sinY=-sinY;  float m_sinX=-sinX;  float nm00=cosZ;  float nm01=sinZ;  float nm10=m_sinZ;  float nm11=cosZ;  float nm20=nm00 * sinY;  float nm21=nm01 * sinY;  float nm22=cosY;  m00=nm00 * cosY;  m01=nm01 * cosY;  m02=m_sinY;  m10=nm10 * cosX + nm20 * sinX;  m11=nm11 * cosX + nm21 * sinX;  m12=nm22 * sinX;  m20=nm10 * m_sinX + nm20 * cosX;  m21=nm11 * m_sinX + nm21 * cosX;  m22=nm22 * cosX;  m30=0.0f;  m31=0.0f;  m32=0.0f;  properties=0;  return this;}  }
class C{  static int compare(char[] str1,char[] str2,int len1,int len2){  int n=Math.min(len1,len2);  int i=0;  while (n-- != 0) {    char c1=str1[i];    char c2=str2[i++];    if (c1 != c2) {      return c1 - c2;    }  }  return len1 - len2;}  }
class C{  public static void scopeCrawlUp(@NotNull PsiScopeProcessor processor,@NotNull PsiElement element,@Nullable String name,@Nullable PsiElement roof){  final PsiElement realContext=PyPsiUtils.getRealContext(element);  final ScopeOwner originalOwner;  if (realContext != element && realContext instanceof PyFile) {    originalOwner=(PyFile)realContext;  } else {    originalOwner=ScopeUtil.getScopeOwner(realContext);  }  final PsiElement parent=element.getParent();  final boolean isGlobalOrNonlocal=parent instanceof PyGlobalStatement || parent instanceof PyNonlocalStatement;  ScopeOwner owner=originalOwner;  if (isGlobalOrNonlocal) {    final ScopeOwner outerScopeOwner=ScopeUtil.getScopeOwner(owner);    if (outerScopeOwner != null) {      owner=outerScopeOwner;    }  }  scopeCrawlUp(processor,owner,originalOwner,name,roof,realContext);}  }
class C{  public void selectDoNotFireEvent(final int start,final int end){  select(start,end,false);}  }
class C{  public static double[] logSpace(double lowBoundary,double highBoundary,int numSlices){  lowBoundary=Math.log10(lowBoundary);  highBoundary=Math.log10(highBoundary);  double[] logSpace=new double[numSlices];  double distance=highBoundary - lowBoundary;  int numOfSlices=numSlices - 1;  double delta=distance / numOfSlices;  for (short i=0; i < numOfSlices; i++) {    logSpace[i]=Math.pow(10,lowBoundary + (i * delta));  }  logSpace[numOfSlices]=Math.pow(10,highBoundary);  return logSpace;}  }
class C{  private void resetSideAnimation(View view){  if (!mIsMenuOpen) {    ViewHelper.setRotation(view,0);    ViewHelper.setRotationY(view,-90);    ViewHelper.setRotationX(view,0);  }  ViewHelper.setPivotX(view,mMenuItemSize);  ViewHelper.setPivotY(view,mMenuItemSize / 2);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  @Override public void put(String instanceKey){}  }
class C{  public static void isNotNull(Object object,String message){  checkAssertion(!(object == null),message);}  }
class C{  public boolean isSupported(){  return isSupported(new Version());}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getAddressItemDao() : null;}  }
class C{  private long position(long index){  return index % 64;}  }
class C{  static boolean hasIntentReceiver(String action){  return !getIntentReceivers(action).isEmpty();}  }
class C{  private synchronized void sortTemplates(){  maxTemplateIDLength=0;  for (Iterator i=templates.iterator(); i.hasNext(); ) {    CodeTemplate temp=(CodeTemplate)i.next();    if (temp == null || temp.getID() == null) {      i.remove();    } else {      maxTemplateIDLength=Math.max(maxTemplateIDLength,temp.getID().length());    }  }  Collections.sort(templates);}  }
class C{  public Method resumeSRDFGroupMethod(final URI systemURI,final RemoteDirectorGroup group,final List<URI> sourceVolumes,final List<URI> targetVolumes){  return new Workflow.Method(RESUME_SRDF_GROUP_METHOD,systemURI,group,sourceVolumes,targetVolumes);}  }
class C{  @ConstructorProperties({"text"}) public JButton(String text){  this(text,null);}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public SizeAction(){  super(SIZE_CMD);}  }
class C{  public boolean isTrailingComma(){  return trailingComma;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void addAndAnimateRandomTile(Location randomLocation){  Tile tile=board.addRandomTile(randomLocation);  gameGrid.put(tile.getLocation(),tile);  animateNewlyAddedTile(tile).play();}  }
class C{  public static Predicates2<String,String> contains(){  return CONTAINS_STRING;}  }
class C{  private static LimeProcess launchFileMacOSX(final String file) throws IOException {  return LimeProcess.exec(new String[]{"open",file});}  }
class C{  public static void logCategoryView(long categoryId,String categoryName,boolean isSearch){  Bundle parameters=new Bundle();  parameters.putString(AppEventsConstants.EVENT_PARAM_CONTENT_TYPE,"category");  if (categoryId == 0) {    Timber.e("Is categoryId = 0.");  } else {    parameters.putLong(AppEventsConstants.EVENT_PARAM_CONTENT_ID,categoryId);    parameters.putString(AppEventsConstants.EVENT_PARAM_DESCRIPTION,categoryName);    logFbEvent(AppEventsConstants.EVENT_NAME_VIEWED_CONTENT,null,parameters);    Map<String,String> event=new HitBuilders.EventBuilder().setCategory("VIEW_CATEGORY").setAction(isSearch ? "SEARCH" : "VIEW_CATEGORY").setLabel(isSearch ? "Search: " + categoryName : "CategoryId: " + categoryId + ". CategoryName: "+ categoryName).build();    sendEventToAppTrackers(event);  }}  }
class C{  public SparseBooleanArray(){  this(10);}  }
class C{  protected static Config commandLineConfigs(String cluster,String role,String environ,Boolean verbose){  Config config=Config.newBuilder().put(Keys.cluster(),cluster).put(Keys.role(),role).put(Keys.environ(),environ).put(Keys.verbose(),verbose).build();  return config;}  }
class C{  public HighlightBuilder field(String name){  if (fields == null) {    fields=new ArrayList<>();  }  fields.add(new Field(name));  return this;}  }
class C{  public long available() throws IOException {  return (length() - getFilePointer());}  }
class C{  private String underscoreName(String name){  if (!StringUtils.hasLength(name)) {    return "";  }  StringBuilder result=new StringBuilder();  result.append(name.substring(0,1).toLowerCase());  for (int i=1; i < name.length(); i++) {    String s=name.substring(i,i + 1);    String slc=s.toLowerCase();    if (!s.equals(slc)) {      result.append("_").append(slc);    } else {      result.append(s);    }  }  return result.toString();}  }
class C{  public Node<K,V> last(){  Node<K,V> node=this;  Node<K,V> child=node.right;  while (child != null) {    node=child;    child=node.right;  }  return node;}  }
class C{  public double evaluateIteration(){  double delta=f.value(result) / df.value(result);  result-=delta;  return relativePrecision(Math.abs(delta));}  }
class C{  @Provides @PerActivity Activity activity(){  return activity;}  }
class C{  public static boolean isInBox(final float x,final float y,final float radius){  return Math.abs(x) <= Math.abs(radius) && Math.abs(y) <= Math.abs(radius);}  }
class C{  public RuntimeCryptoException(String message){  super(message);}  }
class C{  @DELETE @Path("/typedefs") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) @Experimental public void deleteAtlasTypeDefs(final AtlasTypesDef typesDef){  try {    typeDefStore.deleteTypesDef(typesDef);  } catch (  AtlasBaseException ex) {    throw new WebApplicationException(Servlets.getErrorResponse(ex,Response.Status.NOT_MODIFIED));  }}  }
class C{  @PostConstruct public void init(){  _localJavac.set(this);}  }
class C{  @Override public void run(){  amIActive=true;  String ouptutFile=null;  String shapefileName=null;  int i=0;  int row, col, rows, cols;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  Geometry[] JTSGeometries;  WKTWriter wktWriter=new WKTWriter();  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  if (inputFilesString.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  try {    for (i=0; i < numFiles; i++) {      if (numFiles > 1) {        progress=(int)(100f * i / (numFiles - 1));        updateProgress("Loop " + (i + 1) + " of "+ numFiles+ ":",progress);      }      shapefileName=imageFiles[i];      if (!((new File(shapefileName)).exists())) {        showFeedback("Vector file does not exist.");        break;      }      ShapeFile shapefile=new ShapeFile(shapefileName);      ouptutFile=shapefileName.replace(".shp",".wkt");      (new File(ouptutFile)).delete();      fw=new FileWriter(ouptutFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=0;      int n=0;      int onePercentOfRecs=shapefile.getNumberOfRecords() / 100;      for (      ShapeFileRecord record : shapefile.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          JTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < JTSGeometries.length; a++) {            str1=wktWriter.write(JTSGeometries[a]);            out.println(str1);          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        if (n == onePercentOfRecs) {          n=0;          progress++;          updateProgress("Exporting shapefile data:",progress);        }      }      showFeedback("Operation complete!");    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  private Set<ContainerModel> buildContainerModels(Set<TaskModel> tasks,List<TaskGroup> containerTasks){  Map<String,TaskModel> taskNameToModel=new HashMap<>();  for (  TaskModel model : tasks) {    taskNameToModel.put(model.getTaskName().getTaskName(),model);  }  Set<ContainerModel> containerModels=new HashSet<>();  for (  TaskGroup container : containerTasks) {    Map<TaskName,TaskModel> containerTaskModels=new HashMap<>();    for (    String taskName : container.taskNames) {      TaskModel model=taskNameToModel.get(taskName);      containerTaskModels.put(model.getTaskName(),model);    }    containerModels.add(new ContainerModel(container.containerId,containerTaskModels));  }  return Collections.unmodifiableSet(containerModels);}  }
class C{  private boolean isOneOf(char ch,final char[] charray){  boolean result=false;  for (int i=0; i < charray.length; i++) {    if (ch == charray[i]) {      result=true;      break;    }  }  return result;}  }
class C{  public synchronized VisualTable addTable(String group,Table table,Predicate filter,Schema schema){  VisualTable vt=new VisualTable(table,this,group,filter,schema);  addDataGroup(group,vt,table);  return vt;}  }
class C{  private void nextSegment() throws IOException {  ensureNotClosed();  final SegmentBlock block=blocks.get(currentBlock);  if (!block.hasMoreSegments())   return;  block.nextSegment();  long absPos=currentStartMarker + relativePos;  currentStartMarker=block.currentStartMarker();  currentStopMarker=block.currentStopMarker();  if (currentStartMarker - absPos > 0) {    long diff=in.skip(currentStartMarker - absPos);    if (diff != currentStartMarker - absPos)     throw new IllegalStateException("Should have skipped " + (currentStartMarker - absPos) + " bytes, got "+ diff);  }  relativePos=0;  segmentLen=(int)(currentStopMarker - currentStartMarker);  if (DEBUG)   LOGGER.debug("New segment for block # " + currentBlock);}  }
class C{  public ColumnVector roundTo(final int numPlaces){  return this.transform(null);}  }
class C{  public void sortMovies(){synchronized (movies) {    Utils.sortList(movies,MOVIE_SET_COMPARATOR);    movieIds.clear();    for (    Movie movie : movies) {      movieIds.add(movie.getDbId());    }  }  firePropertyChange("movies",null,movies);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.779 -0500",hash_original_method="2DA36736B256CECB86984D41B76F2A40",hash_generated_method="BEADFC2B62F6E215351018013EAE25A0") public String format(String format){synchronized (Time.class) {    Locale locale=Locale.getDefault();    if (sLocale == null || locale == null || !(locale.equals(sLocale))) {      Resources r=Resources.getSystem();      sShortMonths=new String[]{r.getString(com.android.internal.R.string.month_medium_january),r.getString(com.android.internal.R.string.month_medium_february),r.getString(com.android.internal.R.string.month_medium_march),r.getString(com.android.internal.R.string.month_medium_april),r.getString(com.android.internal.R.string.month_medium_may),r.getString(com.android.internal.R.string.month_medium_june),r.getString(com.android.internal.R.string.month_medium_july),r.getString(com.android.internal.R.string.month_medium_august),r.getString(com.android.internal.R.string.month_medium_september),r.getString(com.android.internal.R.string.month_medium_october),r.getString(com.android.internal.R.string.month_medium_november),r.getString(com.android.internal.R.string.month_medium_december)};      sLongMonths=new String[]{r.getString(com.android.internal.R.string.month_long_january),r.getString(com.android.internal.R.string.month_long_february),r.getString(com.android.internal.R.string.month_long_march),r.getString(com.android.internal.R.string.month_long_april),r.getString(com.android.internal.R.string.month_long_may),r.getString(com.android.internal.R.string.month_long_june),r.getString(com.android.internal.R.string.month_long_july),r.getString(com.android.internal.R.string.month_long_august),r.getString(com.android.internal.R.string.month_long_september),r.getString(com.android.internal.R.string.month_long_october),r.getString(com.android.internal.R.string.month_long_november),r.getString(com.android.internal.R.string.month_long_december)};      sLongStandaloneMonths=new String[]{r.getString(com.android.internal.R.string.month_long_standalone_january),r.getString(com.android.internal.R.string.month_long_standalone_february),r.getString(com.android.internal.R.string.month_long_standalone_march),r.getString(com.android.internal.R.string.month_long_standalone_april),r.getString(com.android.internal.R.string.month_long_standalone_may),r.getString(com.android.internal.R.string.month_long_standalone_june),r.getString(com.android.internal.R.string.month_long_standalone_july),r.getString(com.android.internal.R.string.month_long_standalone_august),r.getString(com.android.internal.R.string.month_long_standalone_september),r.getString(com.android.internal.R.string.month_long_standalone_october),r.getString(com.android.internal.R.string.month_long_standalone_november),r.getString(com.android.internal.R.string.month_long_standalone_december)};      sShortWeekdays=new String[]{r.getString(com.android.internal.R.string.day_of_week_medium_sunday),r.getString(com.android.internal.R.string.day_of_week_medium_monday),r.getString(com.android.internal.R.string.day_of_week_medium_tuesday),r.getString(com.android.internal.R.string.day_of_week_medium_wednesday),r.getString(com.android.internal.R.string.day_of_week_medium_thursday),r.getString(com.android.internal.R.string.day_of_week_medium_friday),r.getString(com.android.internal.R.string.day_of_week_medium_saturday)};      sLongWeekdays=new String[]{r.getString(com.android.internal.R.string.day_of_week_long_sunday),r.getString(com.android.internal.R.string.day_of_week_long_monday),r.getString(com.android.internal.R.string.day_of_week_long_tuesday),r.getString(com.android.internal.R.string.day_of_week_long_wednesday),r.getString(com.android.internal.R.string.day_of_week_long_thursday),r.getString(com.android.internal.R.string.day_of_week_long_friday),r.getString(com.android.internal.R.string.day_of_week_long_saturday)};      sTimeOnlyFormat=r.getString(com.android.internal.R.string.time_of_day);      sDateOnlyFormat=r.getString(com.android.internal.R.string.month_day_year);      sDateTimeFormat=r.getString(com.android.internal.R.string.date_and_time);      sAm=r.getString(com.android.internal.R.string.am);      sPm=r.getString(com.android.internal.R.string.pm);      sLocale=locale;    }    return format1(format);  }}  }
class C{  public boolean removeConfiguredNetworksAndDisableWifi(){  if (!disconnectAP()) {    return false;  }  sleep(SHORT_TIMEOUT);  if (!mWifiManager.setWifiEnabled(false)) {    return false;  }  sleep(SHORT_TIMEOUT);  return true;}  }
class C{  private static String postFormatCurrency(String currency){  if (sPostFormatCurrency) {    return currency.replace(",00",",-").replace(".00",".-");  } else {    return currency;  }}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue((V)val));}  }
class C{  public static String readFileToString(String fileName,Charset charset) throws IOException {  Reader input=new InputStreamReader(new FileInputStream(fileName),charset);  StringWriter output=new StringWriter();  char[] buf=new char[4096];  int n;  while ((n=input.read(buf)) != -1)   output.write(buf,0,n);  return output.toString();}  }
class C{  public BluetoothPeerNetwork(BluetoothDevice bluetoothDevice){  this.mBluetoothDevice=bluetoothDevice;}  }
class C{  public boolean isSelectionVisible(){  return isRowVisible(getSelectedRow());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.659 -0500",hash_original_method="7AF224A0221DFF0013A72A01287D2D95",hash_generated_method="819F4559335C9CF8A66F92D1D8519B6E") @SuppressWarnings("unchecked") public boolean equals(Object other){  if (other == this)   return true;  if (other instanceof SIPHeaderList) {    SIPHeaderList<SIPHeader> that=(SIPHeaderList<SIPHeader>)other;    if (this.hlist == that.hlist)     return true; else     if (this.hlist == null)     return that.hlist == null || that.hlist.size() == 0;    return this.hlist.equals(that.hlist);  }  return false;}  }
class C{  public void markPotentiallyUnknownBit(LocalVariableBinding local){  if (this != DEAD_END) {    this.tagBits|=NULL_FLAG_MASK;    int position;    long mask;    if ((position=local.id + this.maxFieldCount) < BitCacheSize) {      mask=1L << position;      isTrue((this.nullBit1 & mask) == 0,"Adding 'unknown' mark in unexpected state");      this.nullBit4|=mask;      if (COVERAGE_TEST_FLAG) {        if (CoverageTestId == 46) {          this.nullBit4=~0;        }      }    } else {      int vectorIndex=(position / BitCacheSize) - 1;      if (this.extra == null) {        int length=vectorIndex + 1;        this.extra=new long[extraLength][];        for (int j=2; j < extraLength; j++) {          this.extra[j]=new long[length];        }      } else {        int oldLength;        if (vectorIndex >= (oldLength=this.extra[2].length)) {          for (int j=2; j < extraLength; j++) {            System.arraycopy(this.extra[j],0,(this.extra[j]=new long[vectorIndex + 1]),0,oldLength);          }        }      }      mask=1L << (position % BitCacheSize);      isTrue((this.extra[2][vectorIndex] & mask) == 0,"Adding 'unknown' mark in unexpected state");      this.extra[5][vectorIndex]|=mask;      if (COVERAGE_TEST_FLAG) {        if (CoverageTestId == 47) {          this.extra[5][vectorIndex]=~0;        }      }    }  }}  }
class C{  public void updateListIndex(){  if (gridTab == null || !gridTab.isOpen())   return;  int rowIndex=gridTab.getCurrentRow();  if (pageSize > 0) {    if (paging.getTotalSize() != gridTab.getRowCount())     paging.setTotalSize(gridTab.getRowCount());    int pgIndex=rowIndex >= 0 ? rowIndex % pageSize : 0;    int pgNo=rowIndex >= 0 ? (rowIndex - pgIndex) / pageSize : 0;    if (listModel.getPage() != pgNo) {      listModel.setPage(pgNo);      if (renderer.isEditing()) {        renderer.stopEditing(false);      }    } else     if (rowIndex == renderer.getCurrentRowIndex()) {      if (modeless && !renderer.isEditing())       Events.echoEvent("onPostSelectedRowChanged",this,null);      return;    } else {      if (renderer.isEditing()) {        renderer.stopEditing(false);        if (((renderer.getCurrentRowIndex() - pgIndex) / pageSize) == pgNo) {          listModel.updateComponent(renderer.getCurrentRowIndex() % pageSize);        }      }    }    if (paging.getActivePage() != pgNo) {      paging.setActivePage(pgNo);    }    if (rowIndex >= 0 && pgIndex >= 0) {      Events.echoEvent("onPostSelectedRowChanged",this,null);    }  } else {    if (rowIndex >= 0) {      Events.echoEvent("onPostSelectedRowChanged",this,null);    }  }}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (!mAreMarginsAdjusted) {    calculateShadowPadding();    widthMeasureSpec=MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec) + mShadowPadding.left + mShadowPadding.right,MeasureSpec.getMode(widthMeasureSpec));    heightMeasureSpec=MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec) + mShadowPadding.top + mShadowPadding.bottom,MeasureSpec.getMode(heightMeasureSpec));    MarginLayoutParams params=(MarginLayoutParams)getLayoutParams();    params.setMargins(params.leftMargin - mShadowPadding.left,params.topMargin - mShadowPadding.top,params.rightMargin - mShadowPadding.right,params.bottomMargin - mShadowPadding.bottom);    requestLayout();    mAreMarginsAdjusted=true;  }  super.onMeasure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public LookupInstructionExec makeExec(String statementName,int statementId,Annotation[] annotations,Map<TableLookupIndexReqKey,EventTable>[] indexesPerStream,EventType[] streamTypes,Viewable[] streamViews,HistoricalStreamIndexList[] historicalStreamIndexLists,VirtualDWView[] viewExternal){  JoinExecTableLookupStrategy strategies[]=new JoinExecTableLookupStrategy[lookupPlans.length];  for (int i=0; i < lookupPlans.length; i++) {    if (lookupPlans[i] != null) {      strategies[i]=lookupPlans[i].makeStrategy(statementName,statementId,annotations,indexesPerStream,streamTypes,viewExternal);    } else {      strategies[i]=historicalPlans[i].makeOuterJoinStategy(streamViews,fromStream,historicalStreamIndexLists);    }  }  return new LookupInstructionExec(fromStream,fromStreamName,toStreams,strategies,requiredPerStream);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PAREN_EXPRESSION__EXPRESSION:    return expression != null;}return super.eIsSet(featureID);}  }
class C{  public boolean removeAll(AbstractByteList other){  if (!(other instanceof ByteArrayList))   return super.removeAll(other);  if (other.size() == 0) {    return false;  }  int limit=other.size() - 1;  int j=0;  byte[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    ByteArrayList sortedList=(ByteArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public void unlinkTriggers(BigInteger alertId,BigInteger notificationId) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/notifications/"+ notificationId.toString()+ "/triggers";  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.DELETE,requestUrl,null);  assertValidResponse(response,requestUrl);}  }
class C{  public SystemServiceImpl(final GenericDAO<System,Long> systemDao,final AttributeService attributeService){  this.systemDao=systemDao;  this.attributeService=attributeService;}  }
class C{  public static void placeQueens(char[] board){  int location;  for (int i=0; i < 8; i++) {    do {      location=placeQueens();    } while (isOccupied(board[location]));    board[location]='Q';  }}  }
class C{  protected void write(DataOutputStream stream) throws Exception {  stream.writeFloat(value);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public DelegatingSocket(String host,int port,InetAddress localAddr,int localPort){  this((Socket)null);}  }
class C{  @Override public boolean matches(SolrDocument doc){  Object v=doc.getFieldValue(this.key.getSolrFieldName());  if (v == null)   return false;  return true;}  }
class C{  @SuppressWarnings("unchecked") private void prepareBlockDropDownData(final boolean wardExists,final boolean blockExists){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Entered into prepareBlockDropDownData method");    LOGGER.debug("Ward Exists ? : " + wardExists + ", "+ "Block Exists ? : "+ blockExists);  }  if (wardExists && blockExists) {    List<Boundary> blockList=new ArrayList<Boundary>();    blockList=boundaryService.getActiveChildBoundariesByBoundaryId(getWardId());    addDropdownData("blockList",blockList);  } else   addDropdownData("blockList",Collections.EMPTY_LIST);  if (LOGGER.isDebugEnabled())   LOGGER.debug("Exit from prepareWardDropDownData method");}  }
class C{  private void prepareBorderRadius(){  if (mBorderRadius != null) {    float factor=getScaleFactor();    if (mOverlappingBorderRadius == null) {      mOverlappingBorderRadius=new SparseArray<>(5);      mOverlappingBorderRadius.put(Spacing.ALL,0f);    }    if (!Float.isNaN(factor) && factor < 1) {      mOverlappingBorderRadius.put(BORDER_TOP_LEFT_RADIUS,getBorderRadius(mBorderRadius,BORDER_TOP_LEFT_RADIUS) * factor);      mOverlappingBorderRadius.put(BORDER_TOP_RIGHT_RADIUS,getBorderRadius(mBorderRadius,BORDER_TOP_RIGHT_RADIUS) * factor);      mOverlappingBorderRadius.put(BORDER_BOTTOM_RIGHT_RADIUS,getBorderRadius(mBorderRadius,BORDER_BOTTOM_RIGHT_RADIUS) * factor);      mOverlappingBorderRadius.put(BORDER_BOTTOM_LEFT_RADIUS,getBorderRadius(mBorderRadius,BORDER_BOTTOM_LEFT_RADIUS) * factor);    } else {      mOverlappingBorderRadius.put(BORDER_TOP_LEFT_RADIUS,getBorderRadius(mBorderRadius,BORDER_TOP_LEFT_RADIUS));      mOverlappingBorderRadius.put(BORDER_TOP_RIGHT_RADIUS,getBorderRadius(mBorderRadius,BORDER_TOP_RIGHT_RADIUS));      mOverlappingBorderRadius.put(BORDER_BOTTOM_RIGHT_RADIUS,getBorderRadius(mBorderRadius,BORDER_BOTTOM_RIGHT_RADIUS));      mOverlappingBorderRadius.put(BORDER_BOTTOM_LEFT_RADIUS,getBorderRadius(mBorderRadius,BORDER_BOTTOM_LEFT_RADIUS));    }  }}  }
class C{  public java.lang.String toString(){  if (value) {    return "true";  }  return "false";}  }
class C{  private static Object[] create(int index,String className,int mode,int type,String typeName,int precision,int scale,int nullable,boolean signed,String descriptiveName){  return new Object[]{index,new ParameterMetaDataInfo(className,mode,type,typeName,precision,scale,nullable,signed),descriptiveName};}  }
class C{  @Deprecated private void jsSetPluginOptions(CordovaArgs arguments,CallbackContext callback){  if (!isPluginReadyForWork) {    sendPluginNotReadyToWork("",callback);    return;  }  try {    JSONObject jsonObject=(JSONObject)arguments.get(0);    chcpXmlConfig.mergeOptionsFromJs(jsonObject);  } catch (  JSONException e) {    Log.d("CHCP","Failed to process plugin options, received from JS.",e);  }  callback.success();}  }
class C{  public void add(Timestamp DueDate,int daysDue,BigDecimal invoicedAmt,BigDecimal openAmt){  if (invoicedAmt == null)   invoicedAmt=Env.ZERO;  setInvoicedAmt(getInvoicedAmt().add(invoicedAmt));  if (openAmt == null)   openAmt=Env.ZERO;  setOpenAmt(getOpenAmt().add(openAmt));  m_noItems++;  m_daysDueSum+=daysDue;  setDaysDue(m_daysDueSum / m_noItems);  if (getDueDate().after(DueDate))   setDueDate(DueDate);  BigDecimal amt=openAmt;  if (daysDue <= 0) {    setDueAmt(getDueAmt().add(amt));    if (daysDue == 0)     setDue0(getDue0().add(amt));    if (daysDue >= -7)     setDue0_7(getDue0_7().add(amt));    if (daysDue >= -30)     setDue0_30(getDue0_30().add(amt));    if (daysDue <= -1 && daysDue >= -7)     setDue1_7(getDue1_7().add(amt));    if (daysDue <= -8 && daysDue >= -30)     setDue8_30(getDue8_30().add(amt));    if (daysDue <= -31 && daysDue >= -60)     setDue31_60(getDue31_60().add(amt));    if (daysDue <= -31)     setDue31_Plus(getDue31_Plus().add(amt));    if (daysDue <= -61 && daysDue >= -90)     setDue61_90(getDue61_90().add(amt));    if (daysDue <= -61)     setDue61_Plus(getDue61_Plus().add(amt));    if (daysDue <= -91)     setDue91_Plus(getDue91_Plus().add(amt));  } else {    setPastDueAmt(getPastDueAmt().add(amt));    if (daysDue <= 7)     setPastDue1_7(getPastDue1_7().add(amt));    if (daysDue <= 30)     setPastDue1_30(getPastDue1_30().add(amt));    if (daysDue >= 8 && daysDue <= 30)     setPastDue8_30(getPastDue8_30().add(amt));    if (daysDue >= 31 && daysDue <= 60)     setPastDue31_60(getPastDue31_60().add(amt));    if (daysDue >= 31)     setPastDue31_Plus(getPastDue31_Plus().add(amt));    if (daysDue >= 61 && daysDue <= 90)     setPastDue61_90(getPastDue61_90().add(amt));    if (daysDue >= 61)     setPastDue61_Plus(getPastDue61_Plus().add(amt));    if (daysDue >= 91)     setPastDue91_Plus(getPastDue91_Plus().add(amt));  }}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public ObserveRequest(int objectId){  this(null,new LwM2mPath(objectId),null);}  }
class C{  public void append(String text,AttributeSet attrSet){  try {    this.getDocument().insertString(this.getDocument().getLength(),text,attrSet);  } catch (  BadLocationException ex) {    _log.error("Error appending text:",ex);  }}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  private void createColumns(TableViewer tableViewer){  TableViewerColumn classColumn=new TableViewerColumn(tableViewer,SWT.NONE);  classColumn.getColumn().setResizable(true);  classColumn.getColumn().setWidth(350);  classColumn.getColumn().setText("Class");  classColumn.getColumn().setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_CLASS));  classColumn.getColumn().setToolTipText("Fully qualified name of the class or interface.");  TableViewerColumn methodColumn=new TableViewerColumn(tableViewer,SWT.NONE);  methodColumn.getColumn().setResizable(true);  methodColumn.getColumn().setWidth(450);  methodColumn.getColumn().setText("Method");  methodColumn.getColumn().setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_METHOD_PUBLIC));  methodColumn.getColumn().setToolTipText("Method name with parameters. Note that constructors are displayed as '<init>' methods.");  TableViewerColumn optionsColumn=new TableViewerColumn(tableViewer,SWT.NONE);  optionsColumn.getColumn().setResizable(true);  optionsColumn.getColumn().setWidth(200);  optionsColumn.getColumn().setText("Options");  optionsColumn.getColumn().setToolTipText("Additional options that are defined for the sensor assignment.");}  }
class C{  public static String buildUuid(){  return UUID.randomUUID().toString();}  }
class C{  @SuppressWarnings("unchecked") Entry<K,V>[] newElementArray(int s){  return new Entry[s];}  }
class C{  public RequestFilesCommand(final int packetId){  super(DebugCommandType.CMD_LIST_FILES,packetId);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRasterInfo image;  WhiteboxRaster output;  int cols, rows, col, row, a, progress;  double noData;  String inputHeader;  String outputHeader;  double[] data;  double reclassInterval=0;  double startingValue=0;  double endingValue=Float.POSITIVE_INFINITY;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  reclassInterval=Double.parseDouble(args[2]);  startingValue=Double.parseDouble(args[3]);  if (!args[4].isEmpty() && !args[4].toLowerCase().contains("not specified")) {    endingValue=Double.parseDouble(args[4]);  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRasterInfo(inputHeader);    noData=image.getNoDataValue();    rows=image.getNumberRows();    cols=image.getNumberColumns();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          if (isBetween(data[col],startingValue,endingValue)) {            z=Math.floor(data[col] / reclassInterval) * reclassInterval;            output.setValue(row,col,z);          } else {            output.setValue(row,col,data[col]);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String toJvmName(String classname){  return Descriptor.toJvmName(classname);}  }
class C{  public UnsupportedOperationException(){  super();}  }
class C{  @Override protected void reset(){  super.reset();  assignOptiongroup.select(singleAssignStr);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success || newRecord)   return success;  if (is_ValueChanged("Description") || is_ValueChanged("POReference")) {    String sql="UPDATE M_Movement i" + " SET (Description,POReference)=" + "(SELECT Description,POReference "+ "FROM DD_Order o WHERE i.DD_Order_ID=o.DD_Order_ID) "+ "WHERE DocStatus NOT IN ('RE','CL') AND DD_Order_ID="+ getDD_Order_ID();    int no=DB.executeUpdate(sql,get_TrxName());    log.fine("Description -> #" + no);  }  afterSaveSync("AD_Org_ID");  afterSaveSync("C_BPartner_ID");  afterSaveSync("C_BPartner_Location_ID");  afterSaveSync("DateOrdered");  afterSaveSync("DatePromised");  afterSaveSync("M_Shipper_ID");  return true;}  }
class C{  @Override public boolean solutionGoodEnough(Population pop){  return true;}  }
class C{  public FailedOplet(int afterTuples,int sleepMillis){  if (afterTuples < 0)   throw new IllegalArgumentException("afterTuples=" + afterTuples);  if (sleepMillis < 0)   throw new IllegalArgumentException("sleepMillis=" + sleepMillis);  this.threshold=afterTuples;  this.sleepMillis=sleepMillis;}  }
class C{  protected void welcomeNewPlayer(){  concreteQuest.getNPC().add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new AndCondition(new GreetingMatchesNameCondition(concreteQuest.getNPC().getName()),new QuestNotStartedCondition(concreteQuest.getSlotName())),ConversationStates.ATTENDING,concreteQuest.welcomeBeforeStartingQuest(),null);}  }
class C{  public FBDriverNotCapableException(String reason){  super(reason,SQLStateConstants.SQL_STATE_FEATURE_NOT_SUPPORTED);}  }
class C{  public final void add(final GeneratedMessageLite.GeneratedExtension<?,?> extension){  extensionsByNumber.put(new ObjectIntPair(extension.getContainingTypeDefaultInstance(),extension.getNumber()),extension);}  }
class C{  public GzipConfigurableOutputStream(OutputStream out,int size,int compression) throws IOException {  super(out,new Deflater(compression,true),size);  writeHeader();  crc.reset();}  }
class C{  private void initialize(){  this.setSize(601,568);  this.setTitle("Request dialog");  this.setResizable(false);  this.setContentPane(getJContentPane());}  }
class C{  public VNXeCommandResult deleteFileSystemSync(String fileSystemId,boolean isForceSnapDeletion) throws VNXeException {  String resourceId=getStorageResourceId(fileSystemId);  if (resourceId == null || resourceId.isEmpty()) {    String error="Could not find corresponding storage resource Id for the " + "file system Id:" + fileSystemId;    _logger.error(error);    throw VNXeException.exceptions.vnxeCommandFailed(error);  }  return deleteResourceSync(resourceId,isForceSnapDeletion);}  }
class C{  private String unmountAndDetachVolumes(Map<URI,Collection<URI>> vCenterHostExportMap,URI virtualDataCenter,String waitFor,Workflow workflow){  if (vCenterHostExportMap == null) {    return waitFor;  }  for (  URI hostId : vCenterHostExportMap.keySet()) {    Host esxHost=_dbClient.queryObject(Host.class,hostId);    if (esxHost != null) {      VcenterDataCenter vcenterDataCenter=_dbClient.queryObject(VcenterDataCenter.class,virtualDataCenter);      if (vcenterDataCenter != null) {        URI vCenterId=vcenterDataCenter.getVcenter();        for (        URI export : vCenterHostExportMap.get(hostId)) {          waitFor=workflow.createStep(UNMOUNT_AND_DETACH_STEP,String.format("Unmounting and detaching volumes from export group %s",export),waitFor,export,export.toString(),this.getClass(),unmountAndDetachMethod(export,esxHost.getId(),vCenterId,vcenterDataCenter.getId()),rollbackMethodNullMethod(),null);        }      }    }  }  return waitFor;}  }
class C{  public boolean isBucketDestroyed(){  return super.isDestroyed();}  }
class C{  public static String encodeClass(String c_j,String c_k){  return "c_" + join(decodeClasses(c_j),"+") + "+"+ join(decodeClasses(c_k),"+");}  }
class C{  public void addReference(String name,String hashMethod,byte[] hashValue){  addReference(new MessagePart(name,hashMethod,hashValue));}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[] numbers=new double[10];  System.out.print("Enter ten numbers: ");  for (int i=0; i < numbers.length; i++)   numbers[i]=input.nextDouble();  selectionSort(numbers);  for (  double e : numbers)   System.out.print(e + " ");  System.out.println();}  }
class C{  public Key(byte data[],KeyType type){  super(data,type);}  }
class C{  public void sortXml(){  newDocument=(Document)originalDocument.clone();  final Element rootElement=(Element)originalDocument.getRootElement().clone();  HierarchyWrapper rootWrapper=factory.createFromRootElement(rootElement);  rootWrapper.createWrappedStructure(factory);  rootWrapper.detachStructure();  rootWrapper.sortStructureAttributes();  rootWrapper.sortStructureElements();  rootWrapper.connectXmlStructure();  newDocument.setRootElement(rootWrapper.getElementContent().getContent());}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public static void fill(boolean[] array,boolean value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreateelement.class,args);}  }
class C{  private void addFlag(final List<String> args,final String argName,final boolean value){  if (value) {    args.add(argName);  }}  }
class C{  public BasicElevationModelBulkDownloader(BasicElevationModel elevationModel,Sector sector,double resolution,BulkRetrievalListener listener){  super(elevationModel,sector,resolution,elevationModel.getDataFileStore(),listener);  this.elevationModel=elevationModel;  this.level=computeLevelForResolution(sector,resolution);}  }
class C{  public static Object str2Object(String type,String value){  Object rtn=null;  String nullvalue="null";  type=null2Str(type);  if (type.equals(""))   return null;  if (value == null)   return null;  value=null2Str(value);  if (type.equalsIgnoreCase("string")) {    return value;  } else   if (type.equalsIgnoreCase("date")) {    return str2SqlDate(value);  }  return rtn;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));  RequestQueue requestQueue=getRequestQueue(request);  if (requestQueue != null) {    requestQueue.add(request);  }  throw new RetryError();}  }
class C{  public void testKeyStore02() throws KeyStoreException {  String[] invalidValues=SpiEngUtils.invalidValues;  try {    KeyStore.getInstance(null);    fail("NullPointerException must be thrown when type is null");  } catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyStore.getInstance(invalidValues[i]);      fail("KeyStoreException must be thrown (type: ".concat(invalidValues[i]).concat(" )"));    } catch (    KeyStoreException e) {    }  }}  }
class C{  private void interruptIdleWorkers(){  interruptIdleWorkers(false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:06.708 -0500",hash_original_method="2B2DE235A31ECF6D427ED4CC1BA78F0B",hash_generated_method="BABE2D99577BBBDD84C82A81744F7046") protected SSLSocketInputStream(SSLSocketImpl owner){  this.owner=owner;}  }
class C{  public int loadPerms(int destType,int destId,int archId,String entidad) throws Exception {  LdapUsersTable table=new LdapUsersTable();  int perms=ISicresAdminDefsKeys.OBJ_PERM_NONE;  String qual;  IeciTdLongIntegerArrayList vals;  int objType=ISicresAdminDefsKeys.OBJECT_OWNER_TYPE_ARCHIVE;  if (_logger.isDebugEnabled())   _logger.debug("loadPerm");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    vals=new IeciTdLongIntegerArrayList();    qual=table.getLoadObjPermsQual(destType,destId,objType,archId);    DbSelectFns.select(dbConn,table.getObjPermsTableName(),table.getLoadObjPermColumnName(),qual,false,vals);    for (int i=0; i < vals.count(); i++) {      perms=perms | vals.get(i);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return perms;}  }
class C{  public DOMSource(Node node,String systemID){  setNode(node);  setSystemId(systemID);}  }
class C{  public boolean hasCountry(){  return hasExtension(Country.class);}  }
class C{  public Symbol resolveIdent(String name){  if (name.equals(""))   return syms.errSymbol;  JavaFileObject prev=log.useSource(null);  try {    JCExpression tree=null;    for (    String s : name.split("\\.",-1)) {      if (!SourceVersion.isIdentifier(s))       return syms.errSymbol;      tree=(tree == null) ? make.Ident(names.fromString(s)) : make.Select(tree,names.fromString(s));    }    JCCompilationUnit toplevel=make.TopLevel(List.<JCTree.JCAnnotation>nil(),null,List.<JCTree>nil());    toplevel.packge=syms.unnamedPackage;    return attr.attribIdent(tree,toplevel);  }  finally {    log.useSource(prev);  }}  }
class C{  public TaskDTO(String taskId,String description,String userName){  super();  this.taskId=taskId;  this.description=description;  this.completed=false;  this.userName=userName;}  }
class C{  public boolean isMemOutput(){  return (flags & MEM_OUTPUT) != 0;}  }
class C{  protected void checkElement(Element element,DescriptorTag expectedTag) throws IllegalArgumentException {  if (!expectedTag.getTagName().equals(element.getName())) {    throw new IllegalArgumentException("Not a [" + expectedTag + "] element");  }}  }
class C{  @Override public void useDefaultVisual(){  String name=m_ClassifierTemplate.getClass().toString();  String packageName=name.substring(0,name.lastIndexOf('.'));  packageName=packageName.substring(packageName.lastIndexOf('.') + 1,packageName.length());  if (!m_visual.loadIcons(BeanVisual.ICON_PATH + "Default_" + packageName+ "Classifier.gif",BeanVisual.ICON_PATH + "Default_" + packageName+ "Classifier_animated.gif")) {    m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultClassifier.gif",BeanVisual.ICON_PATH + "DefaultClassifier_animated.gif");  }}  }
class C{  public static WhereBuilder b(){  return new WhereBuilder();}  }
class C{  public int nextInt(){  return 0;}  }
class C{  private void addUserInfoToSignature(PGPPublicKey publicKey,PGPSignatureGenerator signer){  @SuppressWarnings("unchecked") Iterator<String> uidIter=publicKey.getUserIDs();  if (uidIter.hasNext()) {    PGPSignatureSubpacketGenerator spg=new PGPSignatureSubpacketGenerator();    spg.setSignerUserID(false,uidIter.next());    signer.setHashedSubpackets(spg.generate());  }}  }
class C{  private void doLoadFile() throws Exception {  loadFile("src/test/java/com/bigdata/rdf/sail/webapp/dataset-update.trig",RDFFormat.TRIG);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public List<Integer> largestDivisibleSubset(int[] nums){  if (nums == null)   throw new NullPointerException("Input array nums is null");  if (nums.length <= 1)   throw new IllegalArgumentException("Input array must have at least 2 elements");  Arrays.sort(nums);  int[] parent=new int[nums.length];  int[] count=new int[nums.length];  int max=0;  int maxIndex=-1;  for (int i=nums.length - 1; i >= 0; i--) {    for (int j=i; j < nums.length; j++) {      if (nums[j] % nums[i] == 0 && count[i] < 1 + count[j]) {        count[i]=1 + count[j];        parent[i]=j;        if (count[i] > max) {          max=count[i];          maxIndex=i;        }      }    }  }  List<Integer> res=new ArrayList<>();  for (int i=0; i < max; i++) {    res.add(nums[maxIndex]);    maxIndex=parent[maxIndex];  }  return res;}  }
class C{  public StrSubstitutor(final StrLookup<?> variableResolver,final String prefix,final String suffix,final char escape,final String valueDelimiter){  this.setVariableResolver(variableResolver);  this.setVariablePrefix(prefix);  this.setVariableSuffix(suffix);  this.setEscapeChar(escape);  this.setValueDelimiter(valueDelimiter);}  }
class C{  public static boolean isNotEmptyString(String string){  return !isEmptyString(string);}  }
class C{  public static TemporalPrecisionMode parse(String value,String defaultValue){  TemporalPrecisionMode mode=parse(value);  if (mode == null && defaultValue != null)   mode=parse(defaultValue);  return mode;}  }
class C{  public void removeContainer(final RemoveContainerParams params) throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("DELETE").path(apiVersionPathPrefix + "/containers/" + params.getContainer())){    addQueryParamIfNotNull(connection,"force",params.isForce());    addQueryParamIfNotNull(connection,"v",params.isRemoveVolumes());    final DockerResponse response=connection.request();    if (NO_CONTENT.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }  } }  }
class C{  public void sendMessage(ChannelHandlerContext ctx,MqttMessage msg,String clientId,Integer packetId,boolean flush){  String pid=packetId == null || packetId <= 0 ? "" : String.valueOf(packetId);  ChannelFuture future=flush ? ctx.writeAndFlush(msg) : ctx.write(msg);  future.addListener(null);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  final void eraseThreadLocals(){  U.putObject(this,THREADLOCALS,null);  U.putObject(this,INHERITABLETHREADLOCALS,null);}  }
class C{  public static boolean isUnknown(){  return !isWindows() && !isLinux() && !isMacOs()&& !isUnix()&& !isOs2();}  }
class C{  public boolean isCached(RepositoryProxyCache proxyCache){  File cacheFile=buildFile(proxyCache.getCacheDir(),proxyCache.getFileName(),DEFAULT_FILE_NAME);  return isCached(cacheFile);}  }
class C{  @Override public void deactivate(){  resetFonts();  getViewer().getEditDomain().getCommandStack().removeCommandStackListener(stackListener);  super.deactivate();}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public static void unzip(File file,File destDir){  destDir.mkdir();  try {    ZipFile zipFile=new ZipFile(file);    Enumeration<? extends ZipEntry> entries=zipFile.entries();    while (entries.hasMoreElements()) {      ZipEntry ze=entries.nextElement();      if (ze.isDirectory())       (new File(destDir,ze.getName())).mkdir(); else {        File f=new File(destDir,ze.getName());        (new File(f.getParent())).mkdirs();        FileOutputStream fos=null;        BufferedOutputStream bos=null;        InputStream in=null;        try {          fos=new FileOutputStream(f);          bos=new BufferedOutputStream(fos);          in=zipFile.getInputStream(ze);          copystream(in,bos);        }  finally {          if (bos != null)           bos.close(); else           if (fos != null)           fos.close();          if (in != null)           in.close();        }      }    }    zipFile.close();  } catch (  IOException ioex) {    ioex.printStackTrace();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public PlatformEvents withAsync(){  if (events.isAsync())   return this;  return new PlatformEvents(platformCtx,events.withAsync());}  }
class C{  public DESKeySpec(byte[] key) throws InvalidKeyException {  this(key,0);}  }
class C{  @Override public void onDrawChart(Canvas canvas,ArrayList<ChartSet> data){  LineSet lineSet;  for (  ChartSet set : data) {    lineSet=(LineSet)set;    if (lineSet.isVisible()) {      mStyle.mLinePaint.setColor(lineSet.getLineColor());      mStyle.mLinePaint.setStrokeWidth(lineSet.getLineThickness());      applyAlpha(mStyle.mLinePaint,lineSet.getAlpha());      if (lineSet.isDashed())       mStyle.mLinePaint.setPathEffect(new DashPathEffect(new float[]{10,10},lineSet.getPhase())); else       mStyle.mLinePaint.setPathEffect(null);      if (!lineSet.isSmooth())       drawLine(canvas,lineSet); else       drawSmoothLine(canvas,lineSet);      if (lineSet.hasDots())       drawPoints(canvas,lineSet);    }  }}  }
class C{  public void componentShown(final ComponentEvent e){  setVisible(true);}  }
class C{  public void addColumn(String name,String expr){  throw new UnsupportedOperationException();}  }
class C{  public long add(long instant,long amount){  return getWrappedField().add(instant,amount * iDivisor);}  }
class C{  public static Collector wrap(Random random,Collector in){  if (in instanceof AssertingCollector) {    return in;  }  return new AssertingCollector(random,in);}  }
class C{  boolean parseArgs(String args[]){  try {    args=CommandLine.parse(args);  } catch (  FileNotFoundException e) {    fatalError(formatMsg("error.cant.open",e.getMessage()));    return false;  }catch (  IOException e) {    fatalError(e);    return false;  }  int count=1;  try {    String flags=args[0];    if (flags.startsWith("-")) {      flags=flags.substring(1);    }    for (int i=0; i < flags.length(); i++) {switch (flags.charAt(i)) {case 'c':        if (xflag || tflag || uflag|| iflag) {          usageError();          return false;        }      cflag=true;    break;case 'u':  if (cflag || xflag || tflag|| iflag) {    usageError();    return false;  }uflag=true;break;case 'x':if (cflag || uflag || tflag|| iflag) {usageError();return false;}xflag=true;break;case 't':if (cflag || uflag || xflag|| iflag) {usageError();return false;}tflag=true;break;case 'M':Mflag=true;break;case 'v':vflag=true;break;case 'f':fname=args[count++];break;case 'm':mname=args[count++];break;case '0':flag0=true;break;case 'i':if (cflag || uflag || xflag|| tflag) {usageError();return false;}rootjar=args[count++];iflag=true;break;case 'n':nflag=true;break;case 'e':ename=args[count++];break;case 'P':pflag=true;break;default :error(formatMsg("error.illegal.option",String.valueOf(flags.charAt(i))));usageError();return false;}}} catch (ArrayIndexOutOfBoundsException e) {usageError();return false;}if (!cflag && !tflag && !xflag&& !uflag&& !iflag) {error(getMsg("error.bad.option"));usageError();return false;}int n=args.length - count;if (n > 0) {int k=0;String[] nameBuf=new String[n];try {for (int i=count; i < args.length; i++) {if (args[i].equals("-C")) {String dir=args[++i];dir=(dir.endsWith(File.separator) ? dir : (dir + File.separator));dir=dir.replace(File.separatorChar,'/');while (dir.indexOf("//") > -1) {dir=dir.replace("//","/");}paths.add(dir.replace(File.separatorChar,'/'));nameBuf[k++]=dir + args[++i];} else {nameBuf[k++]=args[i];}}} catch (ArrayIndexOutOfBoundsException e) {usageError();return false;}files=new String[k];System.arraycopy(nameBuf,0,files,0,k);} else if (cflag && (mname == null)) {error(getMsg("error.bad.cflag"));usageError();return false;} else if (uflag) {if ((mname != null) || (ename != null)) {return true;} else {error(getMsg("error.bad.uflag"));usageError();return false;}}return true;}  }
class C{  public Boolean isIssuerSerialMatch(){  return issuerSerialMatch;}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public boolean usesDefaultPropertyAccess(){  return m_defaultAccess.equals(JPA_ACCESS_PROPERTY);}  }
class C{  public TxInterruptRequest(Type type){  super();  this.type=type;}  }
class C{  public static String escape(Object obj){  if (obj == null) {    return "";  }  return escapeAndShorten(obj.toString(),-1);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TMETHOD;}  }
class C{  private boolean checkMatchIp(Map<String,Object> rows){  boolean matchEther=false;  String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);  if (val != null) {    int type=0;    if (val.startsWith("0x")) {      type=Integer.parseInt(val.substring(2),16);    } else {      try {        type=Integer.parseInt(val);      } catch (      NumberFormatException e) {      }    }    if (type == 2048)     matchEther=true;  }  if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false;  return true;}  }
class C{  public static boolean isWeakKey(byte[] key,int offset){  if (key.length - offset < DES_KEY_LENGTH) {    throw new IllegalArgumentException("key material too short.");  }  nextkey:   for (int i=0; i < N_DES_WEAK_KEYS; i++) {    for (int j=0; j < DES_KEY_LENGTH; j++) {      if (key[j + offset] != DES_weak_keys[i * DES_KEY_LENGTH + j]) {        continue nextkey;      }    }    return true;  }  return false;}  }
class C{  @SafeVarargs public final Set<A> plus(A... as){  Set<A> result=this;  for (  A a : as) {    result=result.plus(a);  }  return result;}  }
class C{  @Dev public KilledCondition(final List<String> toKill){  this.toKill=new TreeSet<String>(toKill);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"BX");  translateAll(environment,instruction,"BX",instructions);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildblacksheepjoe(zone);}  }
class C{  public static BitSequence assemble(List<BitSequence> sequences){  BitSequence masterSequence=new BitSequence();  for (  BitSequence bs : sequences) {    masterSequence.append(bs);  }  return masterSequence;}  }
class C{  public static long parseXsDuration(String value){  Matcher matcher=XS_DURATION_PATTERN.matcher(value);  if (matcher.matches()) {    boolean negated=!TextUtils.isEmpty(matcher.group(1));    String years=matcher.group(3);    double durationSeconds=(years != null) ? Double.parseDouble(years) * 31556908 : 0;    String months=matcher.group(5);    durationSeconds+=(months != null) ? Double.parseDouble(months) * 2629739 : 0;    String days=matcher.group(7);    durationSeconds+=(days != null) ? Double.parseDouble(days) * 86400 : 0;    String hours=matcher.group(10);    durationSeconds+=(hours != null) ? Double.parseDouble(hours) * 3600 : 0;    String minutes=matcher.group(12);    durationSeconds+=(minutes != null) ? Double.parseDouble(minutes) * 60 : 0;    String seconds=matcher.group(14);    durationSeconds+=(seconds != null) ? Double.parseDouble(seconds) : 0;    long durationMillis=(long)(durationSeconds * 1000);    return negated ? -durationMillis : durationMillis;  } else {    return (long)(Double.parseDouble(value) * 3600 * 1000);  }}  }
class C{  protected void updateEstimator(long measuredRTT,int estimatorType,RemoteEndpoint endpoint){  long newRTO=config.getInt(NetworkConfig.Keys.ACK_TIMEOUT);  endpoint.updateRTO(newRTO);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.309 -0500",hash_original_method="A9B3EEBBDFB6A55F67B5E3A75165CDD6",hash_generated_method="5F8DCFFC54A7FDCF3608E9F5C2195FF4") public static boolean isSpaceChar(int codePoint){  if (codePoint == 0x20 || codePoint == 0xa0 || codePoint == 0x1680) {    return true;  }  if (codePoint < 0x2000) {    return false;  }  if (codePoint <= 0xffff) {    return codePoint <= 0x200b || codePoint == 0x2028 || codePoint == 0x2029 || codePoint == 0x202f || codePoint == 0x3000;  }  return isSpaceCharImpl(codePoint);}  }
class C{  public int read() throws IOException {  int b0=fInputStream.read();  if (b0 > 0x80) {    throw new IOException(Localizer.getMessage("jsp.error.xml.invalidASCII",Integer.toString(b0)));  }  return b0;}  }
class C{  public void testSetPhoneSensorValues_phoneFlatOnEquatorAtMeridian(){  LatLong location=new LatLong(0,0);  Vector3 acceleration=new Vector3(0,0,-10);  Vector3 magneticField=new Vector3(0,-1,10);  Vector3 expectedZenith=new Vector3(1,0,0);  Vector3 expectedNadir=new Vector3(-1,0,0);  Vector3 expectedNorth=new Vector3(0,0,1);  Vector3 expectedEast=new Vector3(0,1,0);  Vector3 expectedSouth=new Vector3(0,0,-1);  Vector3 expectedWest=new Vector3(0,-1,0);  Vector3 expectedPointing=expectedNadir;  Vector3 expectedUpAlongPhone=expectedNorth;  checkModelOrientation(location,acceleration,magneticField,expectedZenith,expectedNadir,expectedNorth,expectedEast,expectedSouth,expectedWest,expectedPointing,expectedUpAlongPhone);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getVideoDiskspaceRules();}  }
class C{  public void isActive() throws RelationServiceNotRegisteredException {  if (myMBeanServer == null) {    String excMsg="Relation Service not registered in the MBean Server.";    throw new RelationServiceNotRegisteredException(excMsg);  }  return;}  }
class C{  private static Envelope createTileEnvelope(int buffer,int size){  Coordinate[] coords=new Coordinate[5];  coords[0]=new Coordinate(0 - buffer,size + buffer);  coords[1]=new Coordinate(size + buffer,size + buffer);  coords[2]=new Coordinate(size + buffer,0 - buffer);  coords[3]=new Coordinate(0 - buffer,0 - buffer);  coords[4]=coords[0];  return new GeometryFactory().createPolygon(coords).getEnvelopeInternal();}  }
class C{  public void onRestoreInstanceState(@Nullable final Parcelable parcelable){  if (parcelable instanceof Bundle) {    Bundle bundle=(Bundle)parcelable;    mFirstAnimatedPosition=bundle.getInt(SAVEDINSTANCESTATE_FIRSTANIMATEDPOSITION);    mLastAnimatedPosition=bundle.getInt(SAVEDINSTANCESTATE_LASTANIMATEDPOSITION);    mShouldAnimate=bundle.getBoolean(SAVEDINSTANCESTATE_SHOULDANIMATE);  }}  }
class C{  public static void doMoveDirectory(final PsiDirectory aDirectory,final PsiDirectory destDirectory) throws IncorrectOperationException {  PsiManager manager=aDirectory.getManager();  checkMove(aDirectory,destDirectory);  try {    aDirectory.getVirtualFile().move(manager,destDirectory.getVirtualFile());  } catch (  IOException e) {    throw new IncorrectOperationException(e);  }}  }
class C{  public PlaySoundEntity(String sound,int radius,int volume){  this.sounds=sound.split(", *");  this.radius=radius;  this.volume=volume;}  }
class C{  public boolean onLongClick(int index){  if (mLastLongPressIndex == null) {    if (mFastAdapter.getAdapterItem(index).isSelectable()) {      mLastLongPressIndex=index;      mFastAdapter.select(index);      if (mActionModeHelper != null)       mActionModeHelper.checkActionMode(null);      return true;    }  } else   if (mLastLongPressIndex != index) {    selectRange(mLastLongPressIndex,index,true);    mLastLongPressIndex=null;  }  return false;}  }
class C{  public Seq<CharSeq> rPartition(String regex){  Matcher m=Pattern.compile(regex).matcher(str);  String match=null;  int start=0, end=0;  while (m.find()) {    match=m.group();    start=m.start();    end=m.end();  }  if (match != null) {    return Seqs.newSeq(CharSeq.of(str.substring(0,start)),CharSeq.of(match),CharSeq.of(str.substring(end)));  }  return Seqs.newSeq(CharSeq.of(""),CharSeq.of(""),CharSeq.of(str));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument05.class,args);}  }
class C{  public float bezierPoint(float a,float b,float c,float d,float t){  return g.bezierPoint(a,b,c,d,t);}  }
class C{  public static Scheduler immediate(){  return ImmediateScheduler.instance();}  }
class C{  public void actionPerformed(ActionEvent e){  int parserCount=getParserCount();  if (parserCount == 0) {    return;  }  long begin=0;  if (DEBUG_PARSING) {    begin=System.currentTimeMillis();  }  RSyntaxDocument doc=(RSyntaxDocument)textArea.getDocument();  Element root=doc.getDefaultRootElement();  int firstLine=firstOffsetModded == null ? 0 : root.getElementIndex(firstOffsetModded.getOffset());  int lastLine=lastOffsetModded == null ? root.getElementCount() - 1 : root.getElementIndex(lastOffsetModded.getOffset());  firstOffsetModded=lastOffsetModded=null;  if (DEBUG_PARSING) {    System.out.println("[DEBUG]: Minimum lines to parse: " + firstLine + "-"+ lastLine);  }  String style=textArea.getSyntaxEditingStyle();  doc.readLock();  try {    for (int i=0; i < parserCount; i++) {      Parser parser=getParser(i);      if (parser.isEnabled()) {        ParseResult res=parser.parse(doc,style);        addParserNoticeHighlights(res);      } else {        clearParserNoticeHighlights(parser);      }    }    textArea.fireParserNoticesChange();  }  finally {    doc.readUnlock();  }  if (DEBUG_PARSING) {    float time=(System.currentTimeMillis() - begin) / 1000f;    System.err.println("Total parsing time: " + time + " seconds");  }}  }
class C{  protected void initializeValues(){  mIsRendererCreated=false;  mIsValidForCameraAnimation=false;  mInternalCameraListener=new PLInternalCameraListener(this);  mAnimationInterval=PLConstants.kDefaultAnimationTimerInterval;  mAnimationFrameInterval=PLConstants.kDefaultAnimationFrameInterval;  mIsAnimating=false;  mStartPoint=CGPoint.CGPointMake(0.0f,0.0f);  mEndPoint=CGPoint.CGPointMake(0.0f,0.0f);  mAuxiliarStartPoint=CGPoint.CGPointMake(0.0f,0.0f);  mAuxiliarEndPoint=CGPoint.CGPointMake(0.0f,0.0f);  mIsAccelerometerEnabled=false;  mIsAccelerometerLeftRightEnabled=mIsAccelerometerUpDownEnabled=true;  mAccelerometerInterval=PLConstants.kDefaultAccelerometerInterval;  mAccelerometerSensitivity=PLConstants.kDefaultAccelerometerSensitivity;  mSensorialRotationType=PLSensorialRotationType.PLSensorialRotationTypeUnknow;  mIsScrollingEnabled=false;  mMinDistanceToEnableScrolling=PLConstants.kDefaultMinDistanceToEnableScrolling;  mMinDistanceToEnableDrawing=PLConstants.kDefaultMinDistanceToEnableDrawing;  mIsInertiaEnabled=false;  mInertiaInterval=PLConstants.kDefaultInertiaInterval;  mIsResetEnabled=true;  mIsShakeResetEnabled=false;  mNumberOfTouchesForReset=PLConstants.kDefaultNumberOfTouchesForReset;  mShakeData=PLShakeData.PLShakeDataMake(0);  mShakeThreshold=PLConstants.kShakeThreshold;  mIsValidForTransition=false;  mTouchStatus=PLTouchStatus.PLTouchStatusNone;  mCurrentDeviceOrientation=UIDeviceOrientation.UIDeviceOrientationPortrait;  mFileDownloaderManager=new PLFileDownloaderManager();  this.reset();  this.setPanorama(new PLBlankPanorama());}  }
class C{  public void addCondition(Expression cond){  if (condition == null) {    condition=cond;  } else {    condition=new ConditionAndOr(ConditionAndOr.AND,cond,condition);  }}  }
class C{  protected void loadHistory(){  int size;  int i;  String cmd;  size=Integer.parseInt(PROPERTIES.getProperty("HistorySize","50"));  m_CommandHistory.clear();  for (i=0; i < size; i++) {    cmd=PROPERTIES.getProperty("Command" + i,"");    if (cmd.length() != 0) {      m_CommandHistory.add(cmd);    } else {      break;    }  }  m_HistoryPos=m_CommandHistory.size();}  }
class C{  public synchronized boolean addHost(String hostPortPair){  if (this.hostsToListIndexMap.containsKey(hostPortPair)) {    return false;  }  long[] newResponseTimes=new long[this.responseTimes.length + 1];  System.arraycopy(this.responseTimes,0,newResponseTimes,0,this.responseTimes.length);  this.responseTimes=newResponseTimes;  if (!this.hostList.contains(hostPortPair)) {    this.hostList.add(hostPortPair);  }  this.hostsToListIndexMap.put(hostPortPair,this.responseTimes.length - 1);  this.hostsToRemove.remove(hostPortPair);  return true;}  }
class C{  public ISchedulingRule derivedRule(IResource resource){  return null;}  }
class C{  public final Graph search(){  return search(independenceTest.getVariables());}  }
class C{  public <E extends T>E min(E a,E b,E c,E... rest){  E minSoFar=min(min(a,b),c);  for (  E r : rest) {    minSoFar=min(minSoFar,r);  }  return minSoFar;}  }
class C{  public final void add(int bagIndex,Instance instance) throws Exception {  int classIndex;  double weight;  classIndex=(int)instance.classValue();  weight=instance.weight();  m_perClassPerBag[bagIndex][classIndex]=m_perClassPerBag[bagIndex][classIndex] + weight;  m_perBag[bagIndex]=m_perBag[bagIndex] + weight;  m_perClass[classIndex]=m_perClass[classIndex] + weight;  totaL=totaL + weight;}  }
class C{  public boolean doAction(OMGraphic graphic,OMAction action){  return filter.doAction(graphic,action);}  }
class C{  public String paramString(){  String scrollTypeStr=null;  if (getScrollType() == WHEEL_UNIT_SCROLL) {    scrollTypeStr="WHEEL_UNIT_SCROLL";  } else   if (getScrollType() == WHEEL_BLOCK_SCROLL) {    scrollTypeStr="WHEEL_BLOCK_SCROLL";  } else {    scrollTypeStr="unknown scroll type";  }  return super.paramString() + ",scrollType=" + scrollTypeStr+ ",scrollAmount="+ getScrollAmount()+ ",wheelRotation="+ getWheelRotation()+ ",preciseWheelRotation="+ getPreciseWheelRotation();}  }
class C{  public final double max(){  double max=Double.NEGATIVE_INFINITY;  final int width=this.width;  final int height=this.height;  double[] fieldx=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++)     if (max < fieldx[y])     max=fieldx[y];  }  return max;}  }
class C{  public TriangleMesh transform(Matrix4x4 mat,boolean updateNormals){  for (  Vertex v : vertices.values()) {    v.set(mat.applyTo(v));  }  if (updateNormals) {    computeFaceNormals();  }  return this;}  }
class C{  public double eval(double params[]){  boolean p1=params[0] == 0.0 ? false : true;  boolean p2=params[1] == 0.0 ? false : true;  return (((p1 ^ p2) == true) ? 0.0 : 1.0);}  }
class C{  public void assignContactFromEmail(String emailAddress,boolean lazyLookup){  assignContactFromEmail(emailAddress,lazyLookup,null);}  }
class C{  public boolean isTableAccessLevel(int AD_Table_ID,boolean ro){  if (ro)   return true;  loadTableInfo(false);  String roleAccessLevel=(String)m_tableAccessLevel.get(new Integer(AD_Table_ID));  if (roleAccessLevel == null) {    log.fine("NO - No AccessLevel - AD_Table_ID=" + AD_Table_ID);    return false;  }  if (roleAccessLevel.equals(X_AD_Table.ACCESSLEVEL_All))   return true;  String userLevel=getUserLevel();  if (userLevel.charAt(0) == 'S' && (roleAccessLevel.equals(X_AD_Table.ACCESSLEVEL_SystemOnly) || roleAccessLevel.equals(X_AD_Table.ACCESSLEVEL_SystemPlusClient)))   return true;  if (userLevel.charAt(1) == 'C' && (roleAccessLevel.equals(X_AD_Table.ACCESSLEVEL_ClientOnly) || roleAccessLevel.equals(X_AD_Table.ACCESSLEVEL_SystemPlusClient)))   return true;  if (userLevel.charAt(2) == 'O' && (roleAccessLevel.equals(X_AD_Table.ACCESSLEVEL_Organization) || roleAccessLevel.equals(X_AD_Table.ACCESSLEVEL_ClientPlusOrganization)))   return true;  log.fine("NO - AD_Table_ID=" + AD_Table_ID + ", UserLevel="+ userLevel+ ", AccessLevel="+ roleAccessLevel);  return false;}  }
class C{  public DocumentReader(IDocument document){  Assert.isNotNull(document);  fDocument=document;  fCharSequence=new DocumentCharSequence(fDocument);  fDocument.addDocumentListener(fDocumentListener);  fLength=fCharSequence.length();}  }
class C{  public synchronized void addNotOverriddenDependency(RVMMethod source,CompiledMethod cm){  int cmid=cm.getId();  if (TRACE || DEBUG) {    report("CLDM: " + cmid + "("+ cm.getMethod()+ ") is dependent on "+ source+ " not being overridden\n");  }  db.addNotOverriddenDependency(source,cmid);}  }
class C{  public static void main(final String[] args){}  }
class C{  @Override public void run(){  try {    if (mTokenInfo.getName().equals("load")) {      PLITokenInfo transitionTokenInfo=(mTokenInfo.hasValue(2) ? mTokenInfo.getTokenInfo(2) : null);      if (transitionTokenInfo != null && transitionTokenInfo.getName().equals("null"))       transitionTokenInfo=null;      mView.load(new PLJSONLoader(mTokenInfo.getString(0)),mTokenInfo.hasValue(1) ? mTokenInfo.getBoolean(1) : false,transitionTokenInfo != null ? new PLTransitionBlend(transitionTokenInfo.getFloat(0),transitionTokenInfo.hasValue(1) ? transitionTokenInfo.getFloat(1) : -1.0f) : null,mTokenInfo.hasValue(3) ? mTokenInfo.getFloat(3) : PLConstants.kFloatUndefinedValue,mTokenInfo.hasValue(4) ? mTokenInfo.getFloat(4) : PLConstants.kFloatUndefinedValue);    }  } catch (  Throwable e) {    PLLog.error("PLCommandRunnable::run",e);  }}  }
class C{  public NonLinearRace(String appName){  super(appName);  animator.setAcceleration(.5f);  animator.setDeceleration(.1f);}  }
class C{  public Location(long addr){  this.data=null;  this.offset=addr;}  }
class C{  public static boolean startsWith(String str,char prefix){  return str != null && str.length() > 0 && str.charAt(0) == prefix;}  }
class C{  protected static void addLine(PrintWriter file,String level,String string){  log.debug(string);  if (file != null) {    String[] lines=string.split(NEW_LINE);    for (    String line : lines) {      printLine(file,level,line);    }  }}  }
class C{  public Builder normalizePrefix(String prefix){  Map<String,String> replacements=Maps.newHashMap();  Iterator<Map.Entry<String,String>> iterator=map.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,String> entry=iterator.next();    if (entry.getKey().startsWith(prefix) == false) {      replacements.put(prefix + entry.getKey(),entry.getValue());      iterator.remove();    }  }  map.putAll(replacements);  return this;}  }
class C{  public TwoDNode construct(IPoint value){  return new VerticalNode(value);}  }
class C{  public Integer findByMaxVersion(Strategy strategy){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Object> query=builder.createQuery();    Root<Rule> from=query.from(Rule.class);    Expression<Integer> id=from.get("version");    Expression<Integer> minExpression=builder.max(id);    CriteriaQuery<Object> select=query.select(minExpression);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != strategy) {      Join<Rule,Strategy> strategies=from.join("strategy");      Predicate predicate=builder.equal(strategies.get("idStrategy"),strategy.getIdStrategy());      predicates.add(predicate);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Object> typedQuery=entityManager.createQuery(select);    Object item=typedQuery.getSingleResult();    entityManager.getTransaction().commit();    if (null == item)     item=new Integer(0);    return (Integer)item;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  private void updatePreview(){  Color newColor=chooser.getColor();  if (type == FOREGROUND) {    preview.update(newColor,secondaryColor);  } else {    preview.update(secondaryColor,newColor);  }}  }
class C{  @Override public void openOptionsMenu(){  if (!publicWebRender.getUrlDomain().isEmpty()) {    if (AdBlockParser.isHostListed(publicWebRender.getUrlDomain(),getBrowserStorage().getAdBlockWhitelist())) {      optionsMenuItems[optMenuItems.ADD_DOMAIN_TO_ADBLOCK_WHITELIST]=getString(R.string.cornmenu_item_rmfrmadwl);      isAdWhitelisted=true;    } else {      optionsMenuItems[optMenuItems.ADD_DOMAIN_TO_ADBLOCK_WHITELIST]=getString(R.string.cornmenu_item_addtoadwl);      isAdWhitelisted=false;    }  } else   isAdWhitelisted=false;  optionsMenuDialog.show();}  }
class C{  @SideEffectFree public void finer(@Nullable String msg){  throw new RuntimeException();}  }
class C{  private void doFailTask(Class<? extends DataObject> clazz,URI id,String opId,ServiceCoded serviceCoded){  try {    _dbClient.error(clazz,id,opId,serviceCoded);  } catch (  DatabaseException ioe) {    _log.error(ioe.getMessage());  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NEW_NODE_ID:  return isSetNewNodeId();case NODE_STORE:return isSetNodeStore();}throw new IllegalStateException();}  }
class C{  public DefaultClientConnectionOperator(SchemeRegistry schemes){  if (schemes == null) {    throw new IllegalArgumentException("Scheme registry must not be null.");  }  schemeRegistry=schemes;}  }
class C{  static String dateString(){  return dateString(new Date());}  }
class C{  public boolean isFrameworkClass(){  return getDetails().isFrameworkClass();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public RuntimeProperties overrideProps(RuntimeProperties props){  if (props == null) {    if (defaultRuntimeProperties == null) {      throw new IllegalStateException("No default runtime properties for environment.");    }    return defaultRuntimeProperties;  } else   if (defaultRuntimeProperties == null) {    return props;  } else {    return props.override(defaultRuntimeProperties);  }}  }
class C{  public static boolean deleteGeneratedDraft(Properties ctx,int C_Payment_ID,String trxName){  MHRPaySelectionCheck mpsc=MHRPaySelectionCheck.getOfPayment(ctx,C_Payment_ID,trxName);  if (mpsc != null && mpsc.isGeneratedDraft()) {    MHRPaySelection mps=new MHRPaySelection(ctx,mpsc.getHR_PaySelection_ID(),trxName);    MHRPaySelectionLine[] mpsl=mps.getLines(true);    for (int i=0; i < mpsl.length; i++) {      if (!mpsl[i].delete(true,trxName))       return false;    }    if (!mpsc.delete(true,trxName))     return false;    if (!mps.delete(true,trxName))     return false;  }  return true;}  }
class C{  public void moveLayer(Layer layer,String command){  if (logger.isLoggable(Level.FINE)) {    logger.fine(command + " for " + layer.getName());  }  moveLayer((LayerPane)paneLookUp.get(layer),command);}  }
class C{  public SparseFloatArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new float[initialCapacity];  mSize=0;}  }
class C{  public List<Entry> filter(List<Entry> points,double tolerance){  if (tolerance <= 0)   return points;  keep=new boolean[points.size()];switch (mType) {case DOUGLAS_PEUCKER:    return reduceWithDouglasPeuker(points,tolerance);case NONE:  return points;default :return points;}}  }
class C{  public Certificate toASN1Structure(){  return x509Certificate;}  }
class C{  void reportError(String message) throws SAXException {  if (errorHandler != null)   errorHandler.error(makeException(message));}  }
class C{  public SoftwareModuleEvent(final SoftwareModuleEventType softwareModuleEventType,final SoftwareModule softwareModule){  super(null,softwareModule);  this.softwareModuleEventType=softwareModuleEventType;}  }
class C{  protected MouseEvent convertToWindows(MouseEvent e){  int x=e.getX();  int y=e.getY();  y=this.frameSize.height - y;  if (e instanceof MouseWheelEvent) {    return new MouseWheelEvent((Component)e.getSource(),e.getID(),e.getWhen(),e.getModifiers(),x,y,e.getClickCount(),e.isPopupTrigger(),((MouseWheelEvent)e).getScrollType(),((MouseWheelEvent)e).getScrollAmount(),((MouseWheelEvent)e).getWheelRotation());  } else {    return new MouseEvent((Component)e.getSource(),e.getID(),e.getWhen(),e.getModifiers(),x,y,e.getClickCount(),e.isPopupTrigger(),e.getButton());  }}  }
class C{  StackMapTable(ConstPool cp,byte[] newInfo){  super(cp,tag,newInfo);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void onCancelMarketData(Contract contract){  if (m_marketDataRequests.containsKey(contract.getId())) {    if (m_client.isConnected())     m_client.cancelMktData(contract.getId());synchronized (m_marketDataRequests) {      m_marketDataRequests.remove(contract.getId());    }  }}  }
class C{  private boolean isDefaultPortAndStateUnknown(){  return publicSocket.getLocalPort() == preferencesService.getPreferences().getForgedAlliance().getPort() && connectivityState.get() == ConnectivityState.UNKNOWN;}  }
class C{  public QuotedStringTokenizer(String text,String separators,boolean returnSeparators){  this.text=text;  this.maxIndex=text.length() - 1;  this.separators=separators;  this.returnSeparators=returnSeparators;}  }
class C{  private boolean ensureDataInBuffer() throws IOException {  if (mBufferOffset < mBufferedSize) {    return true;  }  final int readData=mInputStream.read(mByteArray);  if (readData <= 0) {    return false;  }  mBufferedSize=readData;  mBufferOffset=0;  return true;}  }
class C{  public CDFT(int log2N){  if (log2N < 3)   throw new IllegalArgumentException("DFT size must be >= 8");  arraysUnlinked=true;  this.log2N=log2N;  N=1 << log2N;  createTable();  if (log2N == 3)   dft=new CDFTsr8(0,1,0); else   if (log2N == 4)   dft=new CDFTsr16(0,1,0); else   if (log2N >= 5) {    dft=new CDFTsr(log2N,c,c3,s,s3);  }}  }
class C{  static String[] loadStringArray(File file) throws java.io.FileNotFoundException {  Iterator<String> it=new StringFileIterator(file);  ArrayList<String> wordsAL=new ArrayList<String>();  while (it.hasNext()) {    wordsAL.add(it.next());  }  String[] words=wordsAL.toArray(new String[]{});  wordsAL.clear();  wordsAL=null;  return words;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static double[][] resize(double[][] M,int m,int n){  double[][] array=new double[m][n];  for (int i=0; i < Math.min(M.length,m); i++)   System.arraycopy(M[i],0,array[i],0,Math.min(M[i].length,n));  return array;}  }
class C{  protected void handlePopupMenu(MouseEvent evt){  Point p=new Point(evt.getX(),evt.getY());  Figure figure=getView().findFigure(p);  if (figure != null || drawingActions.size() > 0) {    showPopupMenu(figure,p,evt.getComponent());  } else {    popupMenu=null;  }}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix1D other){  if (other instanceof SelectedSparseDoubleMatrix1D) {    SelectedSparseDoubleMatrix1D otherMatrix=(SelectedSparseDoubleMatrix1D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseDoubleMatrix1D) {    SparseDoubleMatrix1D otherMatrix=(SparseDoubleMatrix1D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  private void findNaturalLoop(SpaceEffGraphEdge edge,BitVector loop){  SpaceEffGraphNode fromNode=edge.fromNode();  if (!fromNode.dfsVisited()) {    fromNode.setDfsVisited();    loop.set(fromNode.getNumber());    for (SpaceEffGraphEdge in=fromNode.firstInEdge(); in != null; in=in.getNextIn()) {      findNaturalLoop(in,loop);    }  }}  }
class C{  public boolean checkIfVideosBeenPublishedSinceLastVisit(YouTubeChannel channel){  if (channel.getLastVisitTime() < 0)   return false;  boolean videosPublished=false;  this.activitiesList.setChannelId(channel.getId());  this.activitiesList.setPublishedAfter(new DateTime(channel.getLastVisitTime()));  try {    ActivityListResponse response=activitiesList.execute();    List<Activity> activitiesList=response.getItems();    videosPublished=(!activitiesList.isEmpty());  } catch (  IOException ex) {    Log.e(TAG,"An error has occurred while retrieving activities",ex);  }  return videosPublished;}  }
class C{  public void plnI(String s) throws IOException {  p(s);  pln();  pI();}  }
class C{  public SimplePayload(String elementName,String namespace,String xmlPayload){  elemName=elementName;  payload=xmlPayload;  ns=namespace;}  }
class C{  public FillArrayDataPayloadDecodedInstruction(InstructionCodec format,int opcode,long[] data){  this(format,opcode,data,data.length,8);}  }
class C{  public void prepareToPullDownShade(int shadeColorId,int modeIconResourceId,CameraAppUI.AnimationFinishedListener listener){  ;  prepareShadeAnimation(PULL_DOWN_SHADE,shadeColorId,modeIconResourceId,listener);}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public void runDownloadMultipleSwitching() throws Exception {  String filename=DOWNLOAD_5MB_FILENAME;  long filesize=DOWNLOAD_5MB_FILESIZE;  doCommonDownloadSetup();  String localDownloadDirectory=Environment.getExternalStorageDirectory().getPath();  File downloadedFile=new File(localDownloadDirectory,filename);  long dlRequest=-1;  try {    downloadedFile.delete();    removeAllCurrentDownloads();    Uri remoteUri=getExternalFileUri(filename);    Request request=new Request(remoteUri);    Uri localUri=Uri.fromFile(downloadedFile);    Log.i(LOG_TAG,"setting localUri to: " + localUri.getPath());    request.setDestinationUri(localUri);    request.setAllowedNetworkTypes(Request.NETWORK_MOBILE | Request.NETWORK_WIFI);    dlRequest=mDownloadManager.enqueue(request);    waitForDownloadToStart(dlRequest);    waitForFileToGrow(downloadedFile);    setWiFiStateOn(false);    Log.i(LOG_TAG,"Turning on airplane mode...");    setAirplaneModeOn(true);    Thread.sleep(30 * 1000);    setWiFiStateOn(true);    Thread.sleep(30 * 1000);    Log.i(LOG_TAG,"Turning off airplane mode...");    setAirplaneModeOn(false);    Thread.sleep(5 * 1000);    Log.i(LOG_TAG,"Turning off WiFi...");    setWiFiStateOn(false);    Thread.sleep(30 * 1000);    Log.i(LOG_TAG,"Turning on WiFi...");    setWiFiStateOn(true);    Log.i(LOG_TAG,"Waiting up to 3 minutes for download to complete...");    waitForDownloadsOrTimeout(dlRequest,3 * 60 * 1000);    ParcelFileDescriptor pfd=mDownloadManager.openDownloadedFile(dlRequest);    verifyFileSize(pfd,filesize);  }  finally {    Log.i(LOG_TAG,"Cleaning up files...");    if (dlRequest != -1) {      mDownloadManager.remove(dlRequest);    }    downloadedFile.delete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.488 -0500",hash_original_method="B811CBD1AC15B296829E7D50AE8C3355",hash_generated_method="A810294C07066476F9BAC36021118ED2") public synchronized void clear(){  this.credMap.clear();}  }
class C{  @Override public String toString(){  String result;  result="";  result+="Relation: " + getRelation() + "\n";  result+="Seed: " + getSeed() + "\n";  result+="# Instances: " + getNumInstances() + "\n";  result+="ClassType: " + getClassType() + "\n";  result+="# Classes: " + getNumClasses() + "\n";  result+="Class index: " + getClassIndex() + "\n";  result+="# Nominal: " + getNumNominal() + "\n";  result+="# Nominal values: " + getNumNominalValues() + "\n";  result+="# Numeric: " + getNumNumeric() + "\n";  result+="# String: " + getNumString() + "\n";  result+="# Date: " + getNumDate() + "\n";  result+="# Relational: " + getNumRelational() + "\n";  result+="  - # Nominal: " + getNumRelationalNominal() + "\n";  result+="  - # Nominal values: " + getNumRelationalNominalValues() + "\n";  result+="  - # Numeric: " + getNumRelationalNumeric() + "\n";  result+="  - # String: " + getNumRelationalString() + "\n";  result+="  - # Date: " + getNumRelationalDate() + "\n";  result+="  - # Instances: " + getNumInstancesRelational() + "\n";  result+="Multi-Instance: " + getMultiInstance() + "\n";  result+="Words: " + getWords() + "\n";  result+="Word separators: " + getWordSeparators() + "\n";  return result;}  }
class C{  public final boolean isProtected(){  return Modifier.isProtected(getModifiers());}  }
class C{  public static String lastToken(String s,String delimiter){  String[] parts=split(s,delimiter);  return (parts.length == 0) ? "" : parts[parts.length - 1];}  }
class C{  public void background(float x,float y,float z,float a){  colorCalc(x,y,z,a);  backgroundFromCalc();}  }
class C{  protected boolean isJdk13LumberjackAvailable(){  return isLogLibraryAvailable("Jdk13Lumberjack","org.apache.commons.logging.impl.Jdk13LumberjackLogger");}  }
class C{  public static UiObjectMatcher withTextContaining(String text,Class klass){  UiSelector uiSelector=new UiSelector().textContains(text);  BySelector bySelector=By.textContains(text);  if (klass != null) {    uiSelector=uiSelector.className(klass);    bySelector.clazz(klass);  }  return new UiObjectMatcher(uiSelector,bySelector);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:40.052 -0500",hash_original_method="B2B9C2CAFA68DE31B1652169B991D7C7",hash_generated_method="4DCCD9846A398E942F29E613D3E79B18") public static Bitmap parseToRGB(byte[] data,int length,boolean transparency){  int valueIndex=0;  int width=data[valueIndex++] & 0xFF;  int height=data[valueIndex++] & 0xFF;  int bits=data[valueIndex++] & 0xFF;  int colorNumber=data[valueIndex++] & 0xFF;  int clutOffset=((data[valueIndex++] & 0xFF) << 8) | (data[valueIndex++] & 0xFF);  int[] colorIndexArray=getCLUT(data,clutOffset,colorNumber);  if (true == transparency) {    colorIndexArray[colorNumber - 1]=Color.TRANSPARENT;  }  int[] resultArray=null;  if (0 == (8 % bits)) {    resultArray=mapTo2OrderBitColor(data,valueIndex,(width * height),colorIndexArray,bits);  } else {    resultArray=mapToNon2OrderBitColor(data,valueIndex,(width * height),colorIndexArray,bits);  }  return Bitmap.createBitmap(resultArray,width,height,Bitmap.Config.RGB_565);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.855 -0500",hash_original_method="D9199A85D0846E817E80F47C2D9F0FC6",hash_generated_method="922BC111CD5564A1BFC8994725FA9DD1") public static String toString(boolean value){  return String.valueOf(value);}  }
class C{  public boolean forEachEntry(TDoubleIntProcedure procedure){  byte[] states=_states;  double[] keys=_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  private void rollbackMove(final Throwable t,final String scaleOutIndexName,final String targetIndexName,final IDataService targetDataService,final PartitionLocator oldLocator,final PartitionLocator newLocator) throws Exception {  try {    final IndexMetadata tmp=(IndexMetadata)targetDataService.submit(ITx.UNISOLATED,targetIndexName,new IsIndexRegistered_UsingWriteService()).get();    if (tmp == null) {      throw new AssertionError("Not expecting [null] return.");    }    log.error("Move successful - ignoring spurious exception: " + t);    return;  } catch (  ExecutionException ex) {    if (ex.getCause() instanceof NoSuchIndexException) {    } else     throw ex;  }  try {    final PartitionLocator current=resourceManager.getFederation().getMetadataService().get(scaleOutIndexName,ITx.UNISOLATED,oldLocator.getLeftSeparatorKey());    final boolean mdsWasUpdated=current.getPartitionId() != oldLocator.getPartitionId();    if (mdsWasUpdated) {      try {        resourceManager.getFederation().getMetadataService().moveIndexPartition(scaleOutIndexName,newLocator,oldLocator);      } catch (      Throwable t2) {        log.error("Problem writing MDS? ",t2);      }    }  } catch (  Throwable t2) {    log.error("Problem reading MDS? ",t2);  }  if (t instanceof Exception)   throw (Exception)t;  throw new RuntimeException(t);}  }
class C{  public ErrorDialog(final Throwable what){  this();  String hdr;  String msg;  if (what instanceof StatusCodeException) {    StatusCodeException sc=(StatusCodeException)what;    if (RestApi.isExpected(sc.getStatusCode())) {      hdr=null;      msg=sc.getEncodedResponse();    } else     if (sc.getStatusCode() == Response.SC_INTERNAL_SERVER_ERROR) {      hdr=null;      msg=what.getMessage();    } else {      hdr=RpcConstants.C.errorServerUnavailable();      msg=what.getMessage();    }  } else   if (what instanceof RemoteJsonException) {    hdr=RpcConstants.C.errorRemoteJsonException();    msg=what.getMessage();  } else {    hdr=what.getClass().getName();    if (hdr.startsWith("java.lang.")) {      hdr=hdr.substring("java.lang.".length());    } else     if (hdr.startsWith("com.google.gerrit.")) {      hdr=hdr.substring(hdr.lastIndexOf('.') + 1);    }    if (hdr.endsWith("Exception")) {      hdr=hdr.substring(0,hdr.length() - "Exception".length());    } else     if (hdr.endsWith("Error")) {      hdr=hdr.substring(0,hdr.length() - "Error".length());    }    msg=what.getMessage();  }  if (hdr != null) {    final Label r=new Label(hdr);    r.setStyleName(Gerrit.RESOURCES.css().errorDialogErrorType());    body.add(r);  }  if (msg != null) {    final Label m=new Label(msg);    m.getElement().getStyle().setProperty("whiteSpace","pre");    body.add(m);  }}  }
class C{  protected void dropExpiredMessages(){  Message[] messages=getMessageCollection().toArray(new Message[0]);  for (int i=0; i < messages.length; i++) {    int ttl=messages[i].getTtl();    if (ttl <= 0) {      deleteMessage(messages[i].getId(),true);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String creekHeader=null;  String ttControlHeader=null;  String eacOutputHeader=null;  String dfcOutputHeader=null;  String gtcOutputHeader=null;  String ttpOutputHeader=null;  WhiteboxRaster dem;  WhiteboxRaster creek;  WhiteboxRaster ttControl=null;  WhiteboxRaster eacOutput;  WhiteboxRaster dfcOutput;  WhiteboxRaster gtcOutput;  WhiteboxRaster ttpOutput;  int numCols, numRows;  double gridRes;  boolean blnTTControl=true;  int flowIndex;  List<FlowCell> flowPath=new ArrayList<>();  int c;  int x, y;  int xn, yn;  double p;  int maxDirection;  double grad, maxGrad;  double deltaElev;  double deltaXY;  int radius;  float maxRadius=200;  int maxX=0, maxY=0;  double ttControlMean;  int[] xd=new int[]{0,-1,-1,-1,0,1,1,1};  int[] yd=new int[]{-1,-1,0,1,1,1,0,-1};  double[] dd=new double[]{1,Math.sqrt(2),1,Math.sqrt(2),1,Math.sqrt(2),1,Math.sqrt(2)};  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      creekHeader=args[i];    } else     if (i == 2) {      ttControlHeader=args[i];      if (ttControlHeader.toLowerCase().contains("not specified")) {        blnTTControl=false;      }    } else     if (i == 3) {      eacOutputHeader=args[i];    } else     if (i == 4) {      dfcOutputHeader=args[i];    } else     if (i == 5) {      gtcOutputHeader=args[i];    } else     if (i == 6) {      ttpOutputHeader=args[i];    }  }  if ((demHeader == null) || (creekHeader == null) || (eacOutputHeader == null)|| (dfcOutputHeader == null)|| (gtcOutputHeader == null)|| (ttpOutputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    creek=new WhiteboxRaster(creekHeader,"r");    if (blnTTControl == true) {      ttControl=new WhiteboxRaster(ttControlHeader,"r");    }    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    eacOutput=new WhiteboxRaster(eacOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    eacOutput.setPreferredPalette("blueyellow.pal");    eacOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    eacOutput.setZUnits("dimensionless");    dfcOutput=new WhiteboxRaster(dfcOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    dfcOutput.setPreferredPalette("blueyellow.pal");    dfcOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    dfcOutput.setZUnits("dimensionless");    gtcOutput=new WhiteboxRaster(gtcOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    gtcOutput.setPreferredPalette("blueyellow.pal");    gtcOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    gtcOutput.setZUnits("dimensionless");    ttpOutput=new WhiteboxRaster(ttpOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    ttpOutput.setPreferredPalette("blueyellow.pal");    ttpOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    ttpOutput.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          if (creek.getValue(row,col) <= 0) {            eacOutput.setValue(row,col,-1048);          }        } else {          eacOutput.setValue(row,col,noData);          dfcOutput.setValue(row,col,noData);          gtcOutput.setValue(row,col,noData);          ttpOutput.setValue(row,col,noData);        }      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (eacOutput.getValue(row,col) == -1048) {          flowIndex=-1;          flowPath=new ArrayList<>();          x=col;          y=row;          while (eacOutput.getValue(y,x) == -1048) {            flowIndex=flowIndex + 1;            flowPath.add(new FlowCell(y,x));            p=dem.getValue(y,x);            maxDirection=-1;            maxGrad=0;            for (c=0; c < 8; c++) {              xn=x + xd[c];              yn=y + yd[c];              if (dem.getValue(yn,xn) != noData) {                grad=(p - dem.getValue(yn,xn)) / (dd[c] * gridRes);                if (grad > maxGrad) {                  maxGrad=grad;                  maxDirection=c;                }              }            }            if (maxDirection > -1) {              x=x + xd[maxDirection];              y=y + yd[maxDirection];            } else {              radius=1;              do {                for (int i=-radius; i <= radius; i++) {                  for (int j=-radius; j <= radius; j++) {                    if (Math.abs(i) > radius - 1 || Math.abs(j) > radius - 1) {                      xn=x + i;                      yn=y + j;                      if (dem.getValue(yn,xn) != noData && dem.getValue(yn,xn) < p) {                        grad=(p - dem.getValue(yn,xn)) / (Math.sqrt(i * i + j * j) * gridRes);                        if (grad > maxGrad) {                          maxGrad=grad;                          maxX=xn;                          maxY=yn;                        }                      }                    }                  }                }                radius=radius + 1;              } while (maxGrad == 0 & radius <= maxRadius);              if (maxGrad > 0) {                x=maxX;                y=maxY;              } else {                eacOutput.setValue(y,x,noData);                dfcOutput.setValue(y,x,noData);                gtcOutput.setValue(y,x,noData);                ttpOutput.setValue(y,x,noData);              }            }          }          if (eacOutput.getValue(y,x) == noData) {            eacOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            dfcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            gtcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);          } else {            deltaElev=dem.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex) - dem.getValue(y,x);            deltaXY=Math.sqrt(Math.pow(flowPath.get(flowIndex).rowIndex - y,2) + Math.pow(flowPath.get(flowIndex).columnIndex - x,2)) * gridRes;            eacOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,eacOutput.getValue(y,x) + deltaElev);            dfcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,dfcOutput.getValue(y,x) + deltaXY);            gtcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,(gtcOutput.getValue(y,x) * dfcOutput.getValue(y,x) + deltaElev) / dfcOutput.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex));            if (blnTTControl == false) {              ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,ttpOutput.getValue(y,x) + Math.pow(deltaXY,2) / deltaElev);            } else {              ttControlMean=(ttControl.getValue(y,x) + ttControl.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex)) / 2;              ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,ttpOutput.getValue(y,x) + Math.pow(deltaXY,2) / (deltaElev * ttControlMean));            }          }          for (int i=flowIndex - 1; i >= 0; i--) {            if (eacOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) == noData) {              eacOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              dfcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              gtcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);            } else {              deltaElev=dem.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex) - dem.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex);              deltaXY=Math.sqrt(Math.pow(flowPath.get(i).rowIndex - flowPath.get(i + 1).rowIndex,2) + Math.pow(flowPath.get(i).columnIndex - flowPath.get(i + 1).columnIndex,2)) * gridRes;              eacOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,eacOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaElev);              dfcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,dfcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaXY);              gtcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,(gtcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) * dfcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaElev) / dfcOutput.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex));              if (blnTTControl == false) {                ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,ttpOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + Math.pow(deltaXY,2) / deltaElev);              } else {                ttControlMean=(ttControl.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex) + ttControl.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex)) / 2;                ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,ttpOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + Math.pow(deltaXY,2) / (deltaElev * ttControlMean));              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    eacOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    eacOutput.addMetadataEntry("Created on " + new Date());    dfcOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    dfcOutput.addMetadataEntry("Created on " + new Date());    gtcOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    gtcOutput.addMetadataEntry("Created on " + new Date());    ttpOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    ttpOutput.addMetadataEntry("Created on " + new Date());    dem.close();    creek.close();    if (blnTTControl == true) {      ttControl.close();    }    eacOutput.close();    dfcOutput.close();    gtcOutput.close();    ttpOutput.close();    returnData(eacOutputHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static void s_uacmxx(SparseBlock a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  Arrays.fill(c,init);  int[] cnt=new int[n];  if (a.isContiguous()) {    int alen=(int)a.size(rl,ru);    builtinAgg(a.values(rl),c,a.indexes(rl),a.pos(rl),alen,builtin);    countAgg(a.values(rl),cnt,a.indexes(rl),a.pos(rl),alen);  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i)) {        int apos=a.pos(i);        int alen=a.size(i);        double[] avals=a.values(i);        int[] aix=a.indexes(i);        builtinAgg(avals,c,aix,apos,alen,builtin);        countAgg(avals,cnt,aix,apos,alen);      }    }  }  for (int i=0; i < n; i++)   if (cnt[i] < m)   c[i]=builtin.execute2(c[i],0);}  }
class C{  public FetchVersionReplyMessage(){}  }
class C{  public Packet(){  id=0;  command=EvidenceBuilder.INTERRUPT;}  }
class C{  @LargeTest public void testPropertieNULLFile() throws Exception {  final String videoItemFilename=null;  boolean flagForException=false;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  try {    new MediaVideoItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Media Properties for NULL  File ",flagForException);}  }
class C{  public void restore(){  network.streetLayer.edgeStore.flags=originalFlags;}  }
class C{  @Override public File exportConstraintAsFile(ConstraintSet aSet){  String constraintRulesPath=dir.getAbsolutePath() + PROJECT + aSet.getProject().getId()+ CONSTRAINTS;  String filename=aSet.getId() + ".txt";  File constraintsFile=new File(constraintRulesPath,filename);  if (constraintsFile.exists()) {    createLog(aSet.getProject()).info("Exported constraints set file [" + filename + "] for project ["+ aSet.getProject().getName()+ "] with ID ["+ aSet.getProject().getId()+ "]");    createLog(aSet.getProject()).removeAllAppenders();    return constraintsFile;  } else {    createLog(aSet.getProject()).error("Unable to read constraint File [" + filename + "] for project ["+ aSet.getProject().getName()+ "] with ID ["+ aSet.getProject().getId()+ "]");    createLog(aSet.getProject()).removeAllAppenders();    return null;  }}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_inCData=true;  append(m_doc.createCDATASection(""));}  }
class C{  protected void updatePageCompletion(){  boolean pageComplete=determinePageCompletion();  setPageComplete(pageComplete);  if (pageComplete) {    setErrorMessage(null);  }}  }
class C{  private static boolean isSorted(Comparable[] a){  for (int i=1; i < a.length; i++)   if (less(a[i],a[i - 1]))   return false;  return true;}  }
class C{  public AppConfiguration(final String applicationId,final String longName,final AppVersion version){  this(applicationId,version);  setLongName(longName);}  }
class C{  public static void showAboutDialog(final JFrame parent){  try {    final List<Pair<String,URL>> urls=new ArrayList<>();    urls.add(new Pair<>("zynamics Website",new URL("http://www.zynamics.com")));    urls.add(new Pair<>("BinNavi Product Site",new URL("http://www.zynamics.com/binnavi.html")));    urls.add(new Pair<>("Report Bugs",new URL("mailto:zynamics-support@google.com")));    final String message=Constants.PROJECT_NAME_VERSION_BUILD + "\n\nCopyright \u00a92004-2011 zynamics GmbH.\nCopyright \u00a92011-2016 Google Inc.\n";    final String description="\nParts of this software were created by third parties and have different licensing " + "requirements.\nPlease see the manual file for a complete list.\n";    final Image appImage=new ImageIcon(CMain.class.getResource("data/binnavi_logo3_border.png")).getImage();    final CDialogAboutEx dlg=new CDialogAboutEx(parent,new ImageIcon(appImage),Constants.PROJECT_NAME_VERSION,message,description,urls);    GuiHelper.centerOnScreen(dlg);    dlg.setVisible(true);  } catch (  final Exception e) {    CUtilityFunctions.logException(e);  }}  }
class C{  public static <T>Predicate<T> memoizePredicate(Predicate<T> p){  Function<T,Boolean> memoised=memoizeFunction((Function1<T,Boolean>)null);  return null;}  }
class C{  public void andNot(LongBitSet other){  int pos=Math.min(numWords,other.numWords);  while (--pos >= 0) {    bits[pos]&=~other.bits[pos];  }}  }
class C{  public CommandActionListener(String identifier){  action=SlashActionRepository.get(identifier);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public SourceFileAttribute(ConstPool cp,String filename){  super(cp,tag);  int index=cp.addUtf8Info(filename);  byte[] bvalue=new byte[2];  bvalue[0]=(byte)(index >>> 8);  bvalue[1]=(byte)index;  set(bvalue);}  }
class C{  @PostConstruct public void init(){  final Panel rootPanel=new Panel();  rootPanel.setSizeFull();  rootPanel.addStyleName("config-panel");  final VerticalLayout vlayout=new VerticalLayout();  vlayout.setMargin(true);  vlayout.setSizeFull();  final String disSetTypeTitle=i18n.get("configuration.defaultdistributionset.title");  final Label headerDisSetType=new Label(disSetTypeTitle);  headerDisSetType.addStyleName("config-panel-header");  vlayout.addComponent(headerDisSetType);  final DistributionSetType currentDistributionSetType=getCurrentDistributionSetType();  currentDefaultDisSetType=currentDistributionSetType.getId();  final HorizontalLayout hlayout=new HorizontalLayout();  hlayout.setSpacing(true);  hlayout.setStyleName("config-h-panel");  final Label configurationLabel=new Label(i18n.get("configuration.defaultdistributionset.select.label"));  hlayout.addComponent(configurationLabel);  hlayout.setComponentAlignment(configurationLabel,Alignment.MIDDLE_LEFT);  final Pageable pageReq=new PageRequest(0,100);  final Iterable<DistributionSetType> distributionSetTypeCollection=distributionSetManagement.findDistributionSetTypesAll(pageReq);  combobox=SPUIComponentProvider.getComboBox(null,"330",null,null,false,"","label.combobox.tag");  combobox.setId(UIComponentIdProvider.SYSTEM_CONFIGURATION_DEFAULTDIS_COMBOBOX);  combobox.setNullSelectionAllowed(false);  for (  final DistributionSetType distributionSetType : distributionSetTypeCollection) {    combobox.addItem(distributionSetType.getId());    combobox.setItemCaption(distributionSetType.getId(),distributionSetType.getKey() + " (" + distributionSetType.getName()+ ")");    if (distributionSetType.getId().equals(currentDistributionSetType.getId())) {      combobox.select(distributionSetType.getId());    }  }  combobox.setImmediate(true);  combobox.addValueChangeListener(null);  hlayout.addComponent(combobox);  changeIcon=new Label();  changeIcon.setIcon(FontAwesome.CHECK);  hlayout.addComponent(changeIcon);  changeIcon.setVisible(false);  vlayout.addComponent(hlayout);  rootPanel.setContent(vlayout);  setCompositionRoot(rootPanel);}  }
class C{  public void addTotals(Info_Column[] layout){  addTotals((ColumnInfo[])layout);}  }
class C{  private void copyProperties(FileExportRule dest,ExportRule orig){  String subDirPath="";  if (param.getSubDir() != null && param.getSubDir().length() > 0) {    subDirPath="/" + param.getSubDir();  }  _log.info("Sub Dir Path : {}",subDirPath);  dest.setSecFlavor(orig.getSecFlavor());  if (snapshot != null) {    dest.setSnapshotId(snapshot.getId());    dest.setExportPath(snapshot.getPath() + subDirPath);  } else {    dest.setFileSystemId(fs.getId());    dest.setExportPath(fs.getPath() + subDirPath);  }  _log.info("After copying properties to DB Model Export Rule {}",dest.toString());}  }
class C{  public static Settings init(){  return settings;}  }
class C{  public void log(String indent){  String wordString="";  if (words != null) {    wordString=getWords().stream().map(null).collect(Collectors.joining(","));  }  String chunkString="";  if (chunk != null) {    chunkString=chunk.getChunkType();  }  String parentString="";  if (parent != null) {    parentString=getParent().toString();  }  LOGGER.info("{}{}: {}: {}",indent,chunkString,wordString,parentString);  if (children != null) {    String childIndent="\t" + indent;    for (    ParseTreeNode c : children) {      c.log(childIndent);    }  }}  }
class C{  @POST public Response createOrder(Order order){  String id=orderService.createOrder(order);  return Response.ok(id).build();}  }
class C{  public Alias filter(QueryBuilder filterBuilder){  if (filterBuilder == null) {    this.filter=null;    return this;  }  try {    XContentBuilder builder=XContentFactory.jsonBuilder();    filterBuilder.toXContent(builder,ToXContent.EMPTY_PARAMS);    builder.close();    this.filter=builder.string();    return this;  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to build json for alias request",e);  }}  }
class C{  public PowerVmAllocationPolicyAbstract(List<? extends Host> list){  super(list);}  }
class C{  @Override public double utility(double totalExampleWeight,double totalPositiveWeight,Hypothesis hypo){  double fp=hypo.getCoveredWeight() - hypo.getPositiveWeight();  double tn=totalExampleWeight - totalPositiveWeight - fp;  return (hypo.getPositiveWeight() + tn) / totalExampleWeight;}  }
class C{  public void updateGrid(float lt,float ln,int offset_x1,int offset_y1,int rows,int columns,float orientation,float vResolution,float hResolution,int major,int[] data,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkGrid.write(lt,ln,offset_x1,offset_y1,rows,columns,orientation,vResolution,hResolution,major,data,properties,link.dos);}  }
class C{  @CheckReturnValue public ThreadFactory build(){  return build(this);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatasubstringexceedsvalue.class,args);}  }
class C{  @NonNull private String replaceFirstOne(@NonNull String content,@NonNull String target,@NonNull String replacement){  if (target == null) {    throw new NullPointerException("target == null");  }  if (replacement == null) {    throw new NullPointerException("replacement == null");  }  int matchStart=content.indexOf(target,0);  if (matchStart == -1) {    return content;  }  int targetLength=target.length();  if (targetLength == 0) {    int resultLength=content.length() + (content.length() + 1) * replacement.length();    StringBuilder result=new StringBuilder(resultLength);    result.append(replacement);    for (int i=0; i != content.length(); ++i) {      result.append(content.charAt(i));      result.append(replacement);    }    return result.toString();  }  StringBuilder result=new StringBuilder(content.length());  for (int i=0; i < matchStart; ++i) {    result.append(content.charAt(i));  }  result.append(replacement);  int over=matchStart + targetLength;  for (int i=over; i < content.length(); ++i) {    result.append(content.charAt(i));  }  return result.toString();}  }
class C{  public ReceiptDetail createUnsavedReceiptDetail(CChartOfAccounts coa,BigDecimal crAmt,BigDecimal drAmt,CFunction function,long orderNum,String description,ReceiptHeader receiptHeader,Boolean isActualDemand){  ReceiptDetail receiptDetail=new ReceiptDetail();  receiptDetail.setAccounthead(coa);  receiptDetail.setCramount(crAmt);  receiptDetail.setDramount(drAmt);  receiptDetail.setFunction(function);  receiptDetail.setOrdernumber(orderNum);  receiptDetail.setDescription(description);  receiptDetail.setReceiptHeader(receiptHeader);  receiptDetail.setIsActualDemand(isActualDemand);  receiptDetail.setCramountToBePaid(crAmt);  return receiptDetail;}  }
class C{  public boolean isIdentifier(){  Object oo=get_Value(COLUMNNAME_IsIdentifier);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean isAssertion(InstructionHandle handle){  return assertionMethods.isAssertionHandle(handle,methodGen.getConstantPool());}  }
class C{  public void normalizeNode(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    normalizeRow(nodeIndex,rowIndex);  }}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  int rgb=s.readInt();  paint=rgb == -1 ? null : new Color(rgb);  alphaComposite=null;}  }
class C{  void unlock(Table t){  locks.remove(t);}  }
class C{  @Override public int hashCode(){  int hashcode=((negated) ? -2 : 1) * variableLabel.hashCode() ^ (new Boolean(exclusive)).hashCode() ^ priority ^ variableValue.hashCode();  return hashcode;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return B1;case 10:  return B10;case 100:return B100;case 500:return CHECK_TRUE;case 1000:return B1000;case 1500:return CHECK_FALSE;case 2000:return VERTWO2000;case 2500:return A_SET2500;case 3000:return VERTWO3000;case 4000:return BIG_NUMBERS;default :return null;}}  }
class C{  public boolean isUserSubscribedToChannel(String channelId) throws IOException {  Cursor cursor=getReadableDatabase().query(SubscriptionsTable.TABLE_NAME,new String[]{SubscriptionsTable.COL_ID},SubscriptionsTable.COL_CHANNEL_ID + " = ?",new String[]{channelId},null,null,null);  boolean isUserSubbed=cursor.moveToNext();  cursor.close();  return isUserSubbed;}  }
class C{  public void initialize(){}  }
class C{  public AnimatableLengthListValue(AnimationTarget target,short[] types,float[] values,short pcInterp){  super(target);  this.lengthTypes=types;  this.lengthValues=values;  this.percentageInterpretation=pcInterp;}  }
class C{  public Rational(BigInteger numerator,BigInteger denominator){  BigInteger gcd=gcd(numerator,denominator);  r[0]=(denominator.compareTo(BigInteger.ZERO) > 0 ? BigInteger.ONE : new BigInteger("-1")).multiply(numerator.divide(gcd));  r[1]=denominator.divide(gcd);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetprevioussibling.class,args);}  }
class C{  public boolean addressTypeUnique(){  return false;}  }
class C{  @PostConstruct public void initialize(){  if (encodedParam == null || encodedParam.length() == 0) {    addErrorMessage(BaseBean.ERROR_CONFIRMATION_INVALID_LINK,false,false);    return;  }  if (encodedParam.endsWith("&et")) {    encodedParam=encodedParam.substring(0,encodedParam.indexOf("&et"));  }  String[] decodedParam=ParameterEncoder.decodeParameters(encodedParam);  if (decodedParam == null) {    addErrorMessage(BaseBean.ERROR_CONFIRMATION_INVALID_LINK,false,false);    return;  }  String userId=null;  String serviceKeyString=null;  String marketplaceId=null;switch (decodedParam.length) {case 4:    serviceKeyString=decodedParam[3];  try {    Long serviceKey=Long.valueOf(serviceKeyString);    sessionBean.setSubscribeToServiceKey(serviceKey);    sessionBean.setServiceKeyForPayment(serviceKey);  } catch (  NumberFormatException ex) {    addErrorMessage(BaseBean.ERROR_CONFIRMATION_INVALID_LINK,false,false);    return;  }case 3:marketplaceId=decodedParam[2];setMarketplaceId(marketplaceId);case 2:organizationId=decodedParam[0];userId=decodedParam[1];break;default :addErrorMessage(BaseBean.ERROR_CONFIRMATION_INVALID_LINK,false,false);return;}IdentityService service=getIdService();VOUser voUser=new VOUser();voUser.setOrganizationId(organizationId);voUser.setUserId(userId);try {voUser=service.getUser(voUser);if (voUser.getStatus() != UserAccountStatus.LOCKED_NOT_CONFIRMED) {addErrorMessage(BaseBean.ERROR_USER_ALREADY_CONFIRMED,true);} else {try {service.confirmAccount(voUser,marketplaceId);FacesContext fc=FacesContext.getCurrentInstance();VOUserDetails currentUser=getUserFromSessionWithoutException(fc);HttpServletRequest request=getRequest();HttpSession session=request.getSession(false);if (currentUser != null && currentUser.getUserId() != null && !currentUser.getUserId().equals(userId)) {session.removeAttribute(Constants.SESS_ATTR_USER);getSessionService().deletePlatformSession(session.getId());SessionListener.cleanup(session);session=request.getSession(true);if (sessionBean != null) {session.setAttribute(Constants.SESS_ATTR_SESSION_BEAN,sessionBean);}setMarketplaceId(marketplaceId);}if (isServiceProvider()) {String password=(String)session.getAttribute(Constants.REQ_ATTR_PASSWORD);loginUser(voUser,password,request,session);}} catch (MailOperationException e) {addErrorMessage(BaseBean.ERROR_REGISTRATION_ACKNOWLEDGE_MAIL,false);}catch (OperationNotPermittedException e) {addErrorMessage(BaseBean.ERROR_USER_LOCKED,false);}catch (LoginException|CommunicationException e) {addErrorMessage(BaseBean.ERROR_USER_CONFIRMED_LOGIN_FAIL,true);}}} catch (ObjectNotFoundException e) {addErrorMessage(e.getMessageKey(),false);}catch (OperationNotPermittedException e) {addErrorMessage(e.getMessageKey(),false);}catch (OrganizationRemovedException e) {addErrorMessage(e.getMessageKey(),false);}}  }
class C{  public static boolean isEmpty(long[] array){  return array == null || array.length == 0;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  void repositionCursor(int offset,int direction){  getFormattedTextField().getCaret().setDot(getNextCursorPosition(offset,direction));}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  public CompressedInputStream(Connection conn,InputStream streamFromServer){  this.traceProtocol=((ConnectionPropertiesImpl)conn).traceProtocol;  try {    this.log=conn.getLog();  } catch (  SQLException e) {    this.log=new NullLogger(null);  }  this.in=streamFromServer;  this.inflater=new Inflater();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (const: ");  result.append(const_);  result.append(", hasExpression: ");  result.append(hasExpression);  result.append(')');  return result.toString();}  }
class C{  public RuntimeCollector(Algorithm algorithm,int frequency,ResultFileWriter writer){  super(algorithm,frequency,FrequencyType.EVALUATIONS);  this.writer=writer;  startTime=System.nanoTime();}  }
class C{  @Override protected SerializationPolicy doGetSerializationPolicy(HttpServletRequest request,String moduleBaseURL,String strongName){  SerializationPolicy policy=super.doGetSerializationPolicy(request,moduleBaseURL,strongName);  if (policy == null) {    return SerializationPolicyUtil.loadSerializationPolicy(this,request,moduleBaseURL,strongName);  } else {    return policy;  }}  }
class C{  @Override public void onAction(final ActionType at){switch (at) {case USE:    if (!isReleased() || !entity.isOnGround()) {      at.send(at.fillTargetInfo(entity));    }  break;default :super.onAction(at);break;}}  }
class C{  public static boolean putString(ContentResolver resolver,String name,String value){  return putStringForUser(resolver,name,value,UserHandle.myUserId());}  }
class C{  public static File[] filesOverRetentionAndInactive(File dir,String prefix,int retention,String activeFile){  FileFilter fileFilter=new PrefixFileFilter(prefix);  File[] files=dir.listFiles(fileFilter);  if (files == null) {    return new File[0];  }  Arrays.sort(files);  int discard=files.length - retention;  if (discard < 0)   discard=0;  ArrayList<File> overRetentionFiles=new ArrayList<File>();  for (int i=0; i < discard; i++) {    String name=files[i].getName();    if (activeFile == null || name.compareToIgnoreCase(activeFile) < 0)     overRetentionFiles.add(files[i]);  }  File[] overFileArray=new File[overRetentionFiles.size()];  return overRetentionFiles.toArray(overFileArray);}  }
class C{  public void addRow(Object... row){  data.add(row);  for (int col=0; col < row.length; col++) {    dispatcher.fireDataChangeEvent(col,data.size() - 1);  }}  }
class C{  @Override public boolean isEnabled(){  return combinedEnabled;}  }
class C{  protected TagNode clean(Reader reader,final CleanTimeValues cleanTimeValues) throws IOException {  pushNesting(cleanTimeValues);  cleanTimeValues._headOpened=false;  cleanTimeValues._bodyOpened=false;  cleanTimeValues._headTags.clear();  cleanTimeValues.allTags.clear();  cleanTimeValues.pruneTagSet=new HashSet<ITagNodeCondition>(this.properties.getPruneTagSet());  cleanTimeValues.allowTagSet=new HashSet<ITagNodeCondition>(this.properties.getAllowTagSet());  this.transformations=this.properties.getCleanerTransformations();  cleanTimeValues.pruneNodeSet.clear();  cleanTimeValues.htmlNode=this.newTagNode("html");  cleanTimeValues.bodyNode=this.newTagNode("body");  cleanTimeValues.headNode=this.newTagNode("head");  cleanTimeValues.rootNode=null;  cleanTimeValues.htmlNode.addChild(cleanTimeValues.headNode);  cleanTimeValues.htmlNode.addChild(cleanTimeValues.bodyNode);  HtmlTokenizer htmlTokenizer=new HtmlTokenizer(this,reader,cleanTimeValues);  htmlTokenizer.start();  if (Thread.currentThread().isInterrupted()) {    handleInterruption();    return null;  }  List nodeList=htmlTokenizer.getTokenList();  closeAll(nodeList,cleanTimeValues);  if (Thread.currentThread().isInterrupted()) {    handleInterruption();    return null;  }  createDocumentNodes(nodeList,cleanTimeValues);  if (Thread.currentThread().isInterrupted()) {    handleInterruption();    return null;  }  calculateRootNode(cleanTimeValues,htmlTokenizer.getNamespacePrefixes());  if (Thread.currentThread().isInterrupted()) {    handleInterruption();    return null;  }  while (markNodesToPrune(nodeList,cleanTimeValues)) {    if (Thread.currentThread().isInterrupted()) {      handleInterruption();      return null;    }  }  if (cleanTimeValues.pruneNodeSet != null && !cleanTimeValues.pruneNodeSet.isEmpty()) {    Iterator<TagNode> iterator=cleanTimeValues.pruneNodeSet.iterator();    while (iterator.hasNext()) {      if (Thread.currentThread().isInterrupted()) {        handleInterruption();        return null;      }      TagNode tagNode=iterator.next();      TagNode parent=tagNode.getParent();      if (parent != null) {        parent.removeChild(tagNode);      }    }  }  cleanTimeValues.rootNode.setDocType(htmlTokenizer.getDocType());  popNesting(cleanTimeValues);  return cleanTimeValues.rootNode;}  }
class C{  private void prependDecrement(BasicBlock bb,IR ir){  if (DEBUG)   VM.sysWrite("Adding Increment to " + bb + "\n");  RegisterOperand use=cbsReg.copyRO();  RegisterOperand def=use.copyU2D();  Instruction inc=Binary.create(INT_ADD,def,use,IRTools.IC(-1));  bb.prependInstruction(inc);}  }
class C{  private void updatesATMWithLUB(AnnotatedTypeFactory atf,AnnotatedTypeMirror sourceCodeATM,AnnotatedTypeMirror jaifATM){switch (sourceCodeATM.getKind()) {case TYPEVAR:    updatesATMWithLUB(atf,((AnnotatedTypeVariable)sourceCodeATM).getLowerBound(),((AnnotatedTypeVariable)jaifATM).getLowerBound());  updatesATMWithLUB(atf,((AnnotatedTypeVariable)sourceCodeATM).getUpperBound(),((AnnotatedTypeVariable)jaifATM).getUpperBound());break;case ARRAY:updatesATMWithLUB(atf,((AnnotatedArrayType)sourceCodeATM).getComponentType(),((AnnotatedArrayType)jaifATM).getComponentType());break;default :break;}Set<AnnotationMirror> annosToReplace=new HashSet<>();for (AnnotationMirror amSource : sourceCodeATM.getAnnotations()) {AnnotationMirror amJaif=jaifATM.getAnnotationInHierarchy(amSource);if (amJaif != null) {amSource=atf.getQualifierHierarchy().leastUpperBound(amSource,amJaif);}annosToReplace.add(amSource);}sourceCodeATM.replaceAnnotations(annosToReplace);}  }
class C{  private String csrfToken() throws IOException, ParseException {  URI uri=uris.csrfToken();  log.debug("Fetching csrf token from {}",uri);  return ((JSONObject)((JSONObject)getJson(new HttpGet(uri)).get("query")).get("tokens")).get("csrftoken").toString();}  }
class C{  private void notifyDead(final RPEntity dead){  if (!rats.remove(dead)) {    logger.warn("killed creature isn't in control list (" + dead.toString() + ").");  }  if (rats.size() == 0) {    phaseToDefaultPhase(new LinkedList<String>(Arrays.asList("pied piper")));  }}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  void addBindingsSetSourceToHashIndexOnce(final HTree rightSolutions,final IBindingSet[] bsFromBindingsSetSource){  if (!bsFromBindingsSetSourceAddedToHashIndex) {    final IKeyBuilder keyBuilder=rightSolutions.getIndexMetadata().getKeyBuilder();    final AtomicInteger vectorSize=new AtomicInteger();    final BS[] a=vector(bsFromBindingsSetSource,getJoinVars(),null,false,vectorSize);    final int n=vectorSize.get();    for (int i=0; i < n; i++) {      final BS tmp=a[i];      final byte[] key=keyBuilder.reset().append(tmp.hashCode).getKey();      final byte[] val=getEncoder().encodeSolution(tmp.bset);      rightSolutions.insert(key,val);    }    getEncoder().flush();    bsFromBindingsSetSourceAddedToHashIndex=true;  }}  }
class C{  protected void reset(){  this.labelLocationIndex=-1;}  }
class C{  static double fourNeighborsIDW(SpatialGrid sg,double xCoord,double yCoord,double exp){  double xDif=(xCoord - sg.getXmin()) % sg.getResolution();  double yDif=(yCoord - sg.getYmin()) % sg.getResolution();  if (xDif == 0 && yDif == 0) {    return sg.getValue(xCoord,yCoord);  }  double x1=xCoord - xDif;  double x2=x1 + sg.getResolution();  double y1=yCoord - yDif;  double y2=y1 + sg.getResolution();  double d11=Math.pow(distance(x1,y1,xCoord,yCoord),exp);  double d12=Math.pow(distance(x1,y2,xCoord,yCoord),exp);  double d21=Math.pow(distance(x2,y1,xCoord,yCoord),exp);  double d22=Math.pow(distance(x2,y2,xCoord,yCoord),exp);  if (xCoord == sg.getXmax()) {    return (sg.getValue(x1,y1) / d11 + sg.getValue(x1,y2) / d12) / (1 / d11 + 1 / d12);  }  if (yCoord == sg.getYmax()) {    return (sg.getValue(x1,y1) / d11 + sg.getValue(x2,y1) / d21) / (1 / d11 + 1 / d21);  }  return (sg.getValue(x1,y1) / d11 + sg.getValue(x1,y2) / d12 + sg.getValue(x2,y1) / d21 + sg.getValue(x2,y2) / d22) / (1 / d11 + 1 / d12 + 1 / d21 + 1 / d22);}  }
class C{  public boolean isAlwaysOnTop(){  return this.alwaysOnTop;}  }
class C{  public void load(){  if (!isLoaded()) {    setEstimatedMajorSpan(true);    Element e=getElement();    ViewFactory f=getViewFactory();    int index0=e.getElementIndex(getStartOffset());    int index1=e.getElementIndex(getEndOffset());    View[] added=new View[index1 - index0 + 1];    for (int i=index0; i <= index1; i++) {      added[i - index0]=f.create(e.getElement(i));    }    replace(0,0,added);    zoneWasLoaded(this);  }}  }
class C{  public static void stopThreadedReferenceManager(){  ReferenceBundle.getSoftBundle().getManager().stopThread();  ReferenceBundle.getWeakBundle().getManager().stopThread();}  }
class C{  public boolean hasScope(){  return hasExtension(ScopeEntry.class);}  }
class C{  public static Hash fromHexString(final String hex){  try {    return new Hash(HexEncoder.getBytes(hex));  } catch (  final IllegalArgumentException e) {    throw new CryptoException(e);  }}  }
class C{  @ResponseBody @RequestMapping(method=RequestMethod.POST) public JsonResponse createApplication(@RequestBody JsonInput input) throws ServiceException, CheckException, InterruptedException {  input.validateCreateApp();  User user=authentificationUtils.getAuthentificatedUser();  authentificationUtils.canStartNewAction(user,null,Locale.ENGLISH);  applicationService.create(input.getApplicationName(),input.getLogin(),input.getServerName(),null,null);  return new HttpOk();}  }
class C{  public boolean canRemoveFolder(AcsAccessObject acs,ArchiveObject arch,int fdrId,String entidad) throws Exception {  boolean can=false;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    can=FolderMdoFdr.canRemoveFolder(dbConn,acs.getAccessToken(),arch.getArchiveToken(),fdrId);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public void test_syn_bad_02() throws MalformedQueryException {  final String query="SELECT ?o { ?s ?p ?o } GROUP BY ?s";  negativeTest(query);}  }
class C{  public void addCIFSAcl(CifsAcl acl){  FlexFileShare share=new FlexFileShare(server.getNaServer(),null);  share.addCIFSAcl(acl);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Second)) {    return false;  }  Second that=(Second)obj;  if (this.second != that.second) {    return false;  }  if (this.minute != that.minute) {    return false;  }  if (this.hour != that.hour) {    return false;  }  if (!this.day.equals(that.day)) {    return false;  }  return true;}  }
class C{  public boolean visitLiteralResultElement(ElemLiteralResult elem){  return true;}  }
class C{  @Override public PaymentResponse parsePaymentResponse(final String response){  LOGGER.info("Response message from Axis Payment gateway: " + response);  final PaymentResponse axisResponse=new DefaultPaymentResponse();  final String[] keyValueStr=response.replace("{","").replace("}","").split(",");  final Map<String,String> fields=new HashMap<String,String>(0);  for (  final String pair : keyValueStr) {    final String[] entry=pair.split("=");    if (entry.length == 2)     fields.put(entry[0].trim(),entry[1].trim());  }  final String[] merchantRef=fields.get(CollectionConstants.AXIS_MERCHANT_TXN_REF).split(CollectionConstants.SEPARATOR_HYPHEN);  final String receiptId=merchantRef[1];  final String ulbCode=merchantRef[0];  final ReceiptHeader receiptHeader;  final Query qry=entityManager.createNamedQuery(CollectionConstants.QUERY_RECEIPT_BY_ID_AND_CITYCODE);  qry.setParameter(1,Long.valueOf(receiptId));  qry.setParameter(2,ulbCode);  receiptHeader=(ReceiptHeader)qry.getSingleResult();  axisResponse.setAuthStatus(fields.get(CollectionConstants.AXIS_TXN_RESPONSE_CODE).equals("0") ? "0300" : fields.get(CollectionConstants.AXIS_TXN_RESPONSE_CODE));  axisResponse.setErrorDescription(fields.get(CollectionConstants.AXIS_RESP_MESSAGE));  axisResponse.setAdditionalInfo6(receiptHeader.getConsumerCode());  axisResponse.setReceiptId(receiptId);  axisResponse.setTxnAmount(new BigDecimal(fields.get(CollectionConstants.AXIS_AMOUNT)).divide(PAISE_RUPEE_CONVERTER));  axisResponse.setTxnReferenceNo(fields.get(CollectionConstants.AXIS_TXN_NO));  axisResponse.setAdditionalInfo2(fields.get(CollectionConstants.AXIS_ORDER_INFO));  final SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd",Locale.getDefault());  Date transactionDate=null;  try {    transactionDate=sdf.parse(fields.get(CollectionConstants.AXIS_BATCH_NO));    axisResponse.setTxnDate(transactionDate);  } catch (  final ParseException e) {    LOGGER.error("Error occured in parsing the transaction date [" + fields.get("vpc_BatchNo") + "]",e);    throw new ApplicationRuntimeException(".transactiondate.parse.error",e);  }  final String vpc_Txn_Secure_Hash=null2unknown(fields.remove("vpc_SecureHash"));  boolean errorExists=false;  final String axisSecureSecret=collectionApplicationProperties.axisSecureSecret();  if (axisSecureSecret != null && (fields.get(CollectionConstants.AXIS_TXN_RESPONSE_CODE) != null || fields.get(CollectionConstants.AXIS_TXN_RESPONSE_CODE) != "No Value Returned")) {    final String secureHash=hashAllFields(fields);    if (vpc_Txn_Secure_Hash.equalsIgnoreCase(secureHash)) {    } else     errorExists=true;  } else {  }  null2unknown(fields.get("Title"));  null2unknown(fields.get("AgainLink"));  null2unknown(fields.get("vpc_Amount"));  null2unknown(fields.get("vpc_Locale"));  null2unknown(fields.get("vpc_BatchNo"));  null2unknown(fields.get("vpc_Command"));  null2unknown(fields.get("vpc_Message"));  null2unknown(fields.get("vpc_Version"));  null2unknown(fields.get("vpc_Card"));  null2unknown(fields.get("vpc_OrderInfo"));  null2unknown(fields.get("vpc_ReceiptNo"));  null2unknown(fields.get("vpc_Merchant"));  null2unknown(fields.get("vpc_MerchTxnRef"));  null2unknown(fields.get("vpc_AuthorizeId"));  null2unknown(fields.get("vpc_TransactionNo"));  null2unknown(fields.get("vpc_AcqResponseCode"));  final String txnResponseCode=null2unknown(fields.get("vpc_TxnResponseCode"));  null2unknown(fields.get("vpc_CSCResultCode"));  null2unknown(fields.get("vpc_CSCRequestCode"));  null2unknown(fields.get("vpc_AcqCSCRespCode"));  null2unknown(fields.get("vpc_AVS_City"));  null2unknown(fields.get("vpc_AVS_Country"));  null2unknown(fields.get("vpc_AVS_Street01"));  null2unknown(fields.get("vpc_AVS_PostCode"));  null2unknown(fields.get("vpc_AVS_StateProv"));  null2unknown(fields.get("vpc_AVSResultCode"));  null2unknown(fields.get("vpc_AVSRequestCode"));  null2unknown(fields.get("vpc_AcqAVSRespCode"));  null2unknown(fields.get("vpc_VerType"));  null2unknown(fields.get("vpc_VerStatus"));  null2unknown(fields.get("vpc_VerToken"));  null2unknown(fields.get("vpc_VerSecurityLevel"));  null2unknown(fields.get("vpc_3DSenrolled"));  null2unknown(fields.get("vpc_3DSXID"));  null2unknown(fields.get("vpc_3DSECI"));  null2unknown(fields.get("vpc_3DSstatus"));  if (txnResponseCode.equals("7") || txnResponseCode.equals("No Value Returned") || errorExists) {  }  return axisResponse;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  private Images(){}  }
class C{  public void deleteAllNotes(){  dbHandler.clearAllNotes();  noteAdapter.clear();  noteAdapter.notifyDataSetChanged();}  }
class C{  public void startNonEscaping() throws org.xml.sax.SAXException {  m_disableOutputEscapingStates.push(true);}  }
class C{  public static boolean isNumber(String str){  try {    Double.parseDouble(str);  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public static boolean isCompleted(DownloadFileInfo downloadFileInfo){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return false;  }switch (downloadFileInfo.getStatus()) {case Status.DOWNLOAD_STATUS_COMPLETED:    return true;}return false;}  }
class C{  public ShouldNotReachHereException(){}  }
class C{  public void recoverAnnotationsFromNodes(){  List<Annotation> annoList=new ArrayList<Annotation>();  Iterator<Tree> treeIterator=tokenTree.getTree().iterator();  CAS srcCAS=null;  while (treeIterator.hasNext()) {    Tree curTree=treeIterator.next();    Collection<Annotation> annotations=((CoreLabel)curTree.label()).get(UIMAAnnotations.class);    if (annotations != null && annotations.size() > 0) {      IntPair span=tokenTree.getSpan(curTree);      for (      Annotation curAnno : annotations) {        srcCAS=srcCAS == null ? curAnno.getCAS() : srcCAS;        curAnno.setBegin(span.getSource());        curAnno.setEnd(span.getTarget());        annoList.add(curAnno);      }    }  }  CasCopier copier=new CasCopier(srcCAS,jCas.getCas());  List<Annotation> copiedAnnos=copier.batchCopyAnnotations(annoList);  for (  Annotation cAnno : copiedAnnos) {    jCas.addFsToIndexes(cAnno);  }}  }
class C{  public void cleanTemp(){  CommandLine dumpcommand=adbCommand("shell","rm","-r","/data/local/tmp/local/tmp/dump.xml");  executeCommandQuietly(dumpcommand);  try {    Thread.sleep(1000);  } catch (  InterruptedException ie) {    throw new RuntimeException(ie);  }  CommandLine qiancommand=adbCommand("shell","rm","-r","/data/local/tmp/local/tmp/qian.xml");  String output=executeCommandQuietly(qiancommand);  log.debug("Delete file qian.xml: {}",output);  try {    Thread.sleep(1000);  } catch (  InterruptedException ie) {    throw new RuntimeException(ie);  }  CommandLine command=adbCommand("shell","rm","-r","/data/local/tmp/uidump.xml");  executeCommandQuietly(command);  try {    Thread.sleep(1000);  } catch (  InterruptedException ie) {    throw new RuntimeException(ie);  }}  }
class C{  private static boolean wrapBlocks(IRegion replaceRegion,TryCatchBlock tb,BlockNode dominator){  if (replaceRegion == null) {    return false;  }  if (replaceRegion instanceof LoopRegion) {    LoopRegion loop=(LoopRegion)replaceRegion;    return wrapBlocks(loop.getBody(),tb,dominator);  }  if (replaceRegion instanceof IBranchRegion) {    return wrapBlocks(replaceRegion.getParent(),tb,dominator);  }  Region tryRegion=new Region(replaceRegion);  List<IContainer> subBlocks=replaceRegion.getSubBlocks();  for (  IContainer cont : subBlocks) {    if (RegionUtils.hasPathThroughBlock(dominator,cont)) {      if (isHandlerPath(tb,cont)) {        break;      }      tryRegion.getSubBlocks().add(cont);    }  }  if (tryRegion.getSubBlocks().isEmpty()) {    return false;  }  TryCatchRegion tryCatchRegion=new TryCatchRegion(replaceRegion,tryRegion);  tryRegion.setParent(tryCatchRegion);  tryCatchRegion.setTryCatchBlock(tb.getCatchAttr().getTryBlock());  IContainer firstNode=tryRegion.getSubBlocks().get(0);  if (!replaceRegion.replaceSubBlock(firstNode,tryCatchRegion)) {    return false;  }  subBlocks.removeAll(tryRegion.getSubBlocks());  for (  IContainer cont : tryRegion.getSubBlocks()) {    if (cont instanceof AbstractRegion) {      AbstractRegion aReg=(AbstractRegion)cont;      aReg.setParent(tryRegion);    }  }  return true;}  }
class C{  protected JPanel makeParamsPanel(){  JPanel panel=super.makeParamsPanel();  JPanel p=new JPanel();  p.setLayout(new BoxLayout(p,BoxLayout.Y_AXIS));  p.add(new JLabel(Bundle.getMessage("Circle")));  JPanel pp=new JPanel();  _radiusText=new JTextField(6);  _radiusText.setText(Integer.toString(_radius));  _radiusText.setHorizontalAlignment(JTextField.RIGHT);  pp.add(_radiusText);  pp.add(new JLabel(Bundle.getMessage("circleRadius")));  p.add(pp);  panel.add(p);  panel.add(Box.createVerticalStrut(STRUT_SIZE));  return panel;}  }
class C{  public StringTokenizer(String str,String delim){  this(str,delim,false);}  }
class C{  @Override public int read(byte[] b) throws IOException {  return this.read(b,0,b.length);}  }
class C{  protected ClassNode inferReturnTypeGenerics(ClassNode receiver,MethodNode method,Expression arguments){  return inferReturnTypeGenerics(receiver,method,arguments,null);}  }
class C{  public String foundType(){  return foundType;}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection<Object>)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map<String,Object>)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public static boolean CS_TRIPLET(Scs A){  return (A != null && (A.nz >= 0));}  }
class C{  public void resendAck() throws SipException {  if (this.getLastAckSent() != null) {    if (getLastAckSent().getHeader(TimeStampHeader.NAME) != null && sipStack.generateTimeStampHeader) {      TimeStamp ts=new TimeStamp();      try {        ts.setTimeStamp(System.currentTimeMillis());        getLastAckSent().setHeader(ts);      } catch (      InvalidArgumentException e) {      }    }    this.sendAck(getLastAckSent(),false);  }}  }
class C{  public static double[][] makeDelayEmbeddingVector(double[][] data,int k,int tau,int startKthPoint,int numEmbeddingVectors) throws Exception {  if (startKthPoint < (k - 1) * tau) {    throw new Exception("Start point t=" + startKthPoint + " is too early for a "+ k+ " length embedding vector with delay "+ tau);  }  if (numEmbeddingVectors + startKthPoint > data.length) {    throw new Exception("Too many embedding vectors " + numEmbeddingVectors + " requested for the given startPoint "+ startKthPoint+ " and time series length "+ data.length);  }  int columns=data[0].length;  double[][] embeddingVectors=new double[numEmbeddingVectors][k * columns];  for (int t=startKthPoint; t < numEmbeddingVectors + startKthPoint; t++) {    for (int i=0; i < k; i++) {      for (int c=0; c < columns; c++) {        embeddingVectors[t - startKthPoint][i * columns + c]=data[t - i * tau][c];      }    }  }  return embeddingVectors;}  }
class C{  @Override public void connectionStateChanged(State state){  log.info("Restore status connection state changed to {}",state);  if (state.equals(State.CONNECTED)) {    log.info("Curator (re)connected.");    onRestoreStatusChange();  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  changeSupport.removePropertyChangeListener(listener);}  }
class C{  public static Number sqrt(Number a){  if ((a.doubleValue() < 0.0) && Settings.isProtectedFunctions()) {    return Math.sqrt(Math.abs(a.doubleValue()));  } else {    return Math.sqrt(a.doubleValue());  }}  }
class C{  protected void forceSetComponentCount(int count){  mComponentCountActual=count;}  }
class C{  public void addBranchlessMethod(String className,String methodName,int lineNumber){  if (!branchlessMethods.containsKey(className))   branchlessMethods.put(className,new HashMap<String,Integer>());  branchlessMethods.get(className).put(methodName,lineNumber);}  }
class C{  private void beforeKey() throws JSONException {  Scope context=peek();  if (context == Scope.NONEMPTY_OBJECT) {    out.append(',');  } else   if (context != Scope.EMPTY_OBJECT) {    throw new JSONException("Nesting problem");  }  newline();  replaceTop(Scope.DANGLING_KEY);}  }
class C{  public CLoadPanel(final INaviModule module){  Preconditions.checkNotNull(module,"IE01961: Module argument can not be null");  m_storeButton=new JButton(CActionProxy.proxy(new CStoreAction(module)));  setLayout(new BorderLayout());  final JPanel innerPanelLeft=new JPanel(new BorderLayout());  innerPanelLeft.add(new JButton(CActionProxy.proxy(new CLoadDatabaseAction(module))),BorderLayout.WEST);  add(innerPanelLeft,BorderLayout.WEST);  final JPanel innerPanel=new JPanel(new BorderLayout());  final JPanel loadButtonPanel=new JPanel(new BorderLayout());  loadButtonPanel.setBorder(new EmptyBorder(0,0,0,3));  loadButtonPanel.add(new JButton(CActionProxy.proxy(new CLoadAction(module))),BorderLayout.CENTER);  innerPanel.add(loadButtonPanel,BorderLayout.WEST);  innerPanel.add(m_storeButton,BorderLayout.EAST);  add(innerPanel,BorderLayout.EAST);  setBorder(new TitledBorder("Data Options"));}  }
class C{  public PiecewisePopulationModel(String name,Parameter N0Parameter,double[] epochLengths,boolean isLinear,Type units){  super(name);  this.epochCount=epochLengths.length + 1;  if (N0Parameter.getDimension() != epochCount) {    throw new IllegalArgumentException("epochSize parameter must have the same dimensions as the number of epochs: (" + epochCount + ") but instead has "+ N0Parameter.getDimension()+ "!");  }  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,N0Parameter.getDimension()));  setUnits(units);  if (isLinear) {    piecewiseFunction=new PiecewiseLinearPopulation(epochLengths,new double[N0Parameter.getDimension()],units);  } else {    piecewiseFunction=new PiecewiseConstantPopulation(epochLengths,new double[N0Parameter.getDimension()],units);  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.CATCH_BLOCK__CATCH_VARIABLE:    return catchVariable != null;}return super.eIsSet(featureID);}  }
class C{  @Override public boolean beforeSampling(Sampler<?,?,?> sampler,SampledVertexDecorator<?> vertex){  return true;}  }
class C{  public void execute(final Action anAction,final Mail aMail,final ActionContext context) throws MessagingException {  final MailAction mailAction=getMethodMap().get(anAction.getClass());  mailAction.execute(anAction,aMail,context);}  }
class C{  public void replaceByJPlagException(SOAPMessageContext smsg,String desc,String rep){  try {    SOAPMessage msg=smsg.getMessage();    SOAPEnvelope envelope=msg.getSOAPPart().getEnvelope();    SOAPHeader oldheader=envelope.getHeader();    if (oldheader != null)     oldheader.detachNode();    SOAPBody oldbody=envelope.getBody();    if (oldbody != null)     oldbody.detachNode();    SOAPBody sb=envelope.addBody();    SOAPFault sf=sb.addFault(envelope.createName("Server","env",SOAPConstants.URI_NS_SOAP_ENVELOPE),"jplagWebService.server.JPlagException");    Detail detail=sf.addDetail();    DetailEntry de=detail.addDetailEntry(envelope.createName("JPlagException","ns0",JPLAG_WEBSERVICE_BASE_URL + "types"));    SOAPElement e=de.addChildElement("exceptionType");    e.addTextNode("accessException");    e=de.addChildElement("description");    e.addTextNode(desc);    e=de.addChildElement("repair");    e.addTextNode(rep);  } catch (  SOAPException x) {    x.printStackTrace();  }}  }
class C{  @Override protected PfScanRawMatch buildMatchObject(String sequenceIdentifier,String model,String signatureLibraryRelease,int seqStart,int seqEnd,String cigarAlign,Double score,ProfileScanRawMatch.Level profileLevel,PatternScanMatch.PatternScanLocation.Level patternLevel){  return new ProSiteProfileRawMatch(sequenceIdentifier,model,signatureLibraryRelease,seqStart,seqEnd,cigarAlign,score,profileLevel);}  }
class C{  public WifiDirectPeerNetwork(){}  }
class C{  boolean DD(Object name1,Object name2){  ValueGraphVertex v1=valueGraph.getVertex(name1);  ValueGraphVertex v2=valueGraph.getVertex(name2);  return DD(v1.getValueNumber(),v2.getValueNumber());}  }
class C{  private void testTranslationResult(String text,TranslationResult translationResult){  assertNotNull(translationResult);  assertEquals(translationResult.getWordCount().intValue(),text.split(" ").length);  assertNotNull(translationResult.getTranslations());  assertNotNull(translationResult.getTranslations().get(0).getTranslation());}  }
class C{  void toJSON(InputStream xml_stream,OutputStream output) throws IOException, JSONException {  StringWriter writer=new StringWriter();  IOUtils.copy(xml_stream,writer,"UTF-8");  JSONObject xmlJSONObj=XML.toJSONObject(writer.toString().trim());  String jsonPrettyPrintString=xmlJSONObj.toString(3);  output.write(jsonPrettyPrintString.getBytes());}  }
class C{  protected void performTest(){  String sigStr=m_SigTex.getText();  if (sigStr.length() != 0) {    m_TTester.setSignificanceLevel((new Double(sigStr)).doubleValue());  } else {    m_TTester.setSignificanceLevel(ExperimenterDefaults.getSignificance());  }  m_TTester.setShowStdDevs(m_ShowStdDevs.isSelected());  if (m_Instances.attribute(m_SortCombo.getSelectedItem().toString()) != null) {    m_TTester.setSortColumn(m_Instances.attribute(m_SortCombo.getSelectedItem().toString()).index());  } else {    m_TTester.setSortColumn(-1);  }  int compareCol=m_CompareCombo.getSelectedIndex();  int tType=m_TestsList.getSelectedIndex();  String name=(new SimpleDateFormat("HH:mm:ss - ")).format(new Date()) + (String)m_CompareCombo.getSelectedItem() + " - "+ (String)m_TestsList.getSelectedValue();  StringBuffer outBuff=new StringBuffer();  outBuff.append(m_TTester.header(compareCol));  outBuff.append("\n");  m_History.addResult(name,outBuff);  m_History.setSingle(name);  m_TTester.setDisplayedResultsets(m_DisplayedList.getSelectedIndices());  m_TTester.setResultMatrix(m_ResultMatrix);  try {    if (tType < m_TTester.getNumResultsets()) {      outBuff.append(m_TTester.multiResultsetFull(tType,compareCol));    } else     if (tType == m_TTester.getNumResultsets()) {      outBuff.append(m_TTester.multiResultsetSummary(compareCol));    } else {      outBuff.append(m_TTester.multiResultsetRanking(compareCol));    }    outBuff.append("\n");  } catch (  Exception ex) {    outBuff.append(ex.getMessage() + "\n");  }  m_History.updateResult(name);}  }
class C{  public boolean checkMatch(@Nonnull final Notification notification){  if (!rule.getMatchOn().isPresent()) {    return true;  }  if (matchOn == null || matchValue == null) {    return false;  }  final Map<String,String> properties=notification.getProperties();  return properties.containsKey(matchOn) && Objects.equals(properties.get(matchOn),matchValue);}  }
class C{  private Rotation(){}  }
class C{  @Override public int read(byte[] buf,int offset,int byteCount) throws IOException {  BlockGuard.getThreadPolicy().onNetwork();synchronized (readLock) {    checkOpen();    Arrays.checkOffsetAndCount(buf.length,offset,byteCount);    if (byteCount == 0) {      return 0;    }    return NativeCrypto.SSL_read(sslNativePointer,socket.getFileDescriptor$(),OpenSSLSocketImpl.this,buf,offset,byteCount,getSoTimeout());  }}  }
class C{  public static org.apache.nutch.storage.ParseStatus.Builder newBuilder(org.apache.nutch.storage.ParseStatus.Builder other){  return new org.apache.nutch.storage.ParseStatus.Builder(other);}  }
class C{  public boolean isOverwriteLocTo(){  Object oo=get_Value(COLUMNNAME_OverwriteLocTo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String mapMethodName(String owner,String name,String desc){  return name;}  }
class C{  public static void doBeep(){  Toolkit.getDefaultToolkit().beep();}  }
class C{  protected void saveExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionErrors errores=validateSaveForm(form);  if (errores.isEmpty()) {    TipoDocumentoVitalForm frm=(TipoDocumentoVitalForm)form;    TipoDocumentoVitalVO tipo=new TipoDocumentoVitalVO();    frm.populate(tipo);    if (StringUtils.isBlank(tipo.getId())) {      tipo=getGestionDocumentosVitalesBI(request).insertTipoDocumentoVital(tipo);      popLastInvocation(request);    } else {      getGestionDocumentosVitalesBI(request).updateTipoDocumentoVital(tipo);    }    setReturnActionFordward(request,redirectForwardMethod(request,"method","retrieve&id=" + tipo.getId()));  } else {    obtenerErrores(request,true).add(errores);    goLastClientExecuteLogic(mapping,form,request,response);  }}  }
class C{  public void releaseAnimationLock(){  globalAnimationLock=false;}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.SIMPLE_QUANTIFIER;}  }
class C{  private void initPersistantFragments(){  fm=getSupportFragmentManager();  mUploadTaskFragment=(UploadTaskFragment)fm.findFragmentByTag(UPLOAD_TASK);  mSaveGpxTaskFragment=(SaveGpxTaskFragment)fm.findFragmentByTag(SAVE_GPX_TASK);  if (mUploadTaskFragment == null) {    Log.d(TAG,"Task fragment not found. Creating..");    mUploadTaskFragment=new UploadTaskFragment();    fm.beginTransaction().add(mUploadTaskFragment,UPLOAD_TASK).commit();    fm.executePendingTransactions();    initUploadTaskDialog(true);  } else {    Log.d(TAG,"Showing existing upload task fragment");    initUploadTaskDialog(false);    showUploadTaskDialog();  }  if (mSaveGpxTaskFragment == null) {    Log.d(TAG,"Task fragment not found. Creating..");    mSaveGpxTaskFragment=new SaveGpxTaskFragment();    fm.beginTransaction().add(mSaveGpxTaskFragment,SAVE_GPX_TASK).commit();    fm.executePendingTransactions();    initSaveGpxTaskDialog(true);  } else {    Log.d(TAG,"Showing existings export gpx task fragment");    initSaveGpxTaskDialog(false);    showSaveGpxTaskDialog();  }}  }
class C{  public int size(){  return this.tickUnits.size();}  }
class C{  public void testFindUserGroupsOpenLdap() throws Exception {  LdapManager mgr=getLdapOpenLdap();  List ret=null;  AndFilter filter=new AndFilter();  filter.and(new EqualsFilter(mgr.getGroupsReturningAttribute(LdapGroupAttributeConstants.LDAP_GROUP_ATTRIBUTE_MEMBER),"cn=ngomila,ou=Usuarios,DC=portsdebalears,DC=com"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setAddGroupClasses(true);    ret=mgr.findUserGroups(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(2,ret.size());}  }
class C{  public Skyline(IntervalList intervals,double mutationRate,double epsilon){  init(intervals,mutationRate,epsilon);}  }
class C{  private void sendErrorMessageToUI(String valuetosend){  Log.e("medtronicCGMService",valuetosend);  log.error("Send Error Message to UI " + valuetosend);  if (mClients != null && mClients.size() > 0) {    for (int i=mClients.size() - 1; i >= 0; i--) {      try {        Message mSend=null;        mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_ERROR_RECEIVED);        Bundle b=new Bundle();        b.putString("data",valuetosend);        mSend.setData(b);        mClients.get(i).send(mSend);      } catch (      RemoteException e) {        mClients.remove(i);      }    }  }}  }
class C{  public boolean validate() throws BulkUserImportException {  int count=1;  try {    for (Iterator<CSVRecord> i=csvParser.iterator(); i.hasNext(); count++) {      CSVRecord record=i.next();      if (!record.isConsistent()) {        throw new BulkUserImportException(Reason.WRONG_NUMBER_OF_FIELDS,null,count);      }      if (record.get("UserId").isEmpty()) {        throw new BulkUserImportException(Reason.MISSING_USERID,null,count);      }      if (record.get("Locale").isEmpty()) {        throw new BulkUserImportException(Reason.MISSING_LOCALE,null,count);      }      try {        mapToSalutation(record.get("Salutation"));      } catch (      Exception e) {        throw new BulkUserImportException(Reason.WRONG_SALUTATION,e,count);      }      try {        mapToUserRoles(record.get("Roles"));      } catch (      Exception e) {        throw new BulkUserImportException(Reason.WRONG_ROLE,e,count);      }    }  } catch (  RuntimeException e) {    throw new BulkUserImportException(Reason.PARSING_FAILED,e,count);  }  return true;}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  public static boolean isPairedEndDirectory(final File dir){  if (dir == null || !dir.exists() || !dir.isDirectory()) {    return false;  }  final File lDir=new File(dir,"left");  final File rDir=new File(dir,"right");  return lDir.exists() && rDir.exists() && lDir.isDirectory()&& rDir.isDirectory();}  }
class C{  public SymbolTableEntryInternal steFor_System(){  return getSymbolTableEntryInternal("System",true);}  }
class C{  public static IAuthService lookupAuthService(){  IAuthService authService=(IAuthService)VeriniceContext.get(VeriniceContext.AUTH_SERVICE);  if (permissionHandlingNeeded == null) {    permissionHandlingNeeded=authService.isPermissionHandlingNeeded();  }  return authService;}  }
class C{  private void initPanel(){  final JPanel mainPanel=new JPanel(new BorderLayout());  mainPanel.setBorder(new TitledBorder("Edit Visibility Condition"));  final JPanel comboPanel=new JPanel(new BorderLayout());  comboPanel.setBorder(new EmptyBorder(5,5,5,5));  visibilityStateBox.addItem(VisibilityState.VISIBLE);  visibilityStateBox.addItem(VisibilityState.UNVISIBLE);  comboPanel.add(visibilityStateBox,BorderLayout.CENTER);  mainPanel.add(comboPanel,BorderLayout.NORTH);  add(mainPanel,BorderLayout.CENTER);}  }
class C{  public void startDocument() throws SAXException {  m_endDocumentOccured=false;  m_prefixMappings=new java.util.Vector();  m_contextIndexes=new IntStack();  m_parents=new IntStack();  m_currentDocumentNode=m_size;  super.startDocument();}  }
class C{  public boolean insert_null_checks(){  return soot.PhaseOptions.getBoolean(options,"insert-null-checks");}  }
class C{  public boolean isAutoIncrement(final int column) throws SQLException {  return (getColumnInformation(column).getFlags() & ColumnFlags.AUTO_INCREMENT) != 0;}  }
class C{  public void listCatalogs() throws SQLException {  log.info(m_md.getCatalogTerm() + " -> " + m_md.getCatalogSeparator());  ResultSet rs=m_md.getCatalogs();  while (rs.next()) {    dump(rs);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new CompiereMenuItemUI();}  }
class C{  private void sendInitPacket(final BluetoothGatt gatt) throws RemoteDfuException, DeviceDisconnectedException, DfuException, UploadAbortedException, UnknownResponseException {  final CRC32 crc32=new CRC32();  ObjectChecksum checksum;  logi("Setting object to Command (Op Code = 6, Type = 1)");  final ObjectInfo info=selectObject(OBJECT_COMMAND);  mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,String.format(Locale.US,"Command object info received (Max size = %d, Offset = %d, CRC = %08X)",info.maxSize,info.offset,info.CRC32));  if (mInitPacketSizeInBytes > info.maxSize) {  }  boolean skipSendingInitPacket=false;  boolean resumeSendingInitPacket=false;  if (info.offset > 0 && info.offset <= mInitPacketSizeInBytes) {    try {      final byte[] buffer=new byte[info.offset];      mInitPacketStream.read(buffer);      crc32.update(buffer);      final int crc=(int)(crc32.getValue() & 0xFFFFFFFFL);      if (info.CRC32 == crc) {        logi("Init packet CRC is the same");        if (info.offset == mInitPacketSizeInBytes) {          logi("-> Whole Init packet was sent before");          skipSendingInitPacket=true;          mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Received CRC match Init packet");        } else {          logi("-> " + info.offset + " bytes of Init packet were sent before");          resumeSendingInitPacket=true;          mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Resuming sending Init packet...");        }      } else {        mInitPacketStream.reset();        crc32.reset();      }    } catch (    final IOException e) {      loge("Error while reading " + info.offset + " bytes from the init packet stream",e);      try {        mInitPacketStream.reset();        crc32.reset();      } catch (      final IOException e1) {        loge("Error while resetting the init packet stream",e1);        mService.terminateConnection(gatt,DfuBaseService.ERROR_FILE_IO_EXCEPTION);        return;      }    }  }  if (!skipSendingInitPacket) {    logi("Disabling Packet Receipt Notifications (Op Code = 2, Value = 0)");    setPacketReceiptNotifications(0);    mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Packet Receipt Notif disabled (Op Code = 2, Value = 0)");    for (int attempt=1; attempt <= MAX_ATTEMPTS; ) {      if (!resumeSendingInitPacket) {        logi("Creating Init packet object (Op Code = 1, Type = 1, Size = " + mInitPacketSizeInBytes + ")");        writeCreateRequest(OBJECT_COMMAND,mInitPacketSizeInBytes);        mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Command object created");      }      logi("Sending " + (mInitPacketSizeInBytes - info.offset) + " bytes of init packet...");      writeInitData(mPacketCharacteristic,crc32);      final int crc=(int)(crc32.getValue() & 0xFFFFFFFFL);      mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,String.format(Locale.US,"Command object sent (CRC = %08X)",crc));      logi("Sending Calculate Checksum command (Op Code = 3)");      checksum=readChecksum();      mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,String.format(Locale.US,"Checksum received (Offset = %d, CRC = %08X)",checksum.offset,checksum.CRC32));      logi(String.format(Locale.US,"Checksum received (Offset = %d, CRC = %08X)",checksum.offset,checksum.CRC32));      if (crc == checksum.CRC32) {        break;      } else {        if (attempt < MAX_ATTEMPTS) {          attempt++;          logi("CRC does not match! Retrying...(" + attempt + "/"+ MAX_ATTEMPTS+ ")");          mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_WARNING,"CRC does not match! Retrying...(" + attempt + "/"+ MAX_ATTEMPTS+ ")");          try {            resumeSendingInitPacket=false;            info.offset=0;            info.CRC32=0;            mInitPacketStream.reset();            crc32.reset();          } catch (          final IOException e) {            loge("Error while resetting the init packet stream",e);            mService.terminateConnection(gatt,DfuBaseService.ERROR_FILE_IO_EXCEPTION);            return;          }        } else {          loge("CRC does not match!");          mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_ERROR,"CRC does not match!");          mService.terminateConnection(gatt,DfuBaseService.ERROR_CRC_ERROR);          return;        }      }    }  }  logi("Executing init packet (Op Code = 4)");  writeExecute();  mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_APPLICATION,"Command object executed");}  }
class C{  public static EncodedStringValue[] extract(String src){  String[] values=src.split(";");  ArrayList<EncodedStringValue> list=new ArrayList<EncodedStringValue>();  for (int i=0; i < values.length; i++) {    if (values[i].length() > 0) {      list.add(new EncodedStringValue(values[i]));    }  }  int len=list.size();  if (len > 0) {    return list.toArray(new EncodedStringValue[len]);  } else {    return null;  }}  }
class C{  SortedSet<String> typesToImport(){  SortedSet<String> typesToImport=new TreeSet<String>();  for (  Map.Entry<String,Spelling> entry : imports.entrySet()) {    if (entry.getValue().importIt) {      typesToImport.add(entry.getKey());    }  }  return typesToImport;}  }
class C{  public void start(final String dbName,final int port){  HsqlProperties props=new HsqlProperties();  props.setProperty("server.port",port);  props.setProperty("server.database.0","target/" + dbName);  props.setProperty("server.dbname.0",dbName);  doStart(props);}  }
class C{  protected JScrollPane createScroller(){  JScrollPane sp=new JScrollPane(list,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);  sp.setHorizontalScrollBar(null);  return sp;}  }
class C{  private long discardPurgeableFiles(int destination,long targetBytes){  LLog.i("discardPurgeableFiles: destination = " + destination + ", targetBytes = "+ targetBytes);  String destStr=(destination == DownloadsDestination.DESTINATION_SYSTEMCACHE_PARTITION) ? String.valueOf(destination) : String.valueOf(DownloadsDestination.DESTINATION_CACHE_PARTITION_PURGEABLE);  String[] bindArgs=new String[]{destStr};  Cursor cursor=contentResolver.query(downloadsUriProvider.getAllDownloadsUri(),null,"( " + DownloadContract.Downloads.COLUMN_STATUS + " = '"+ DownloadStatus.SUCCESS+ "' AND "+ DownloadContract.Downloads.COLUMN_DESTINATION+ " = ? )",bindArgs,DownloadContract.Downloads.COLUMN_LAST_MODIFICATION);  if (cursor == null) {    return 0;  }  long totalFreed=0;  try {    final int dataIndex=cursor.getColumnIndex(DownloadContract.Downloads.COLUMN_DATA);    while (cursor.moveToNext() && totalFreed < targetBytes) {      final String data=cursor.getString(dataIndex);      if (TextUtils.isEmpty(data))       continue;      File file=new File(data);      LLog.d("purging " + file.getAbsolutePath() + " for "+ file.length()+ " bytes");      totalFreed+=file.length();      file.delete();      long id=cursor.getLong(cursor.getColumnIndex(DownloadContract.Downloads._ID));      contentResolver.delete(ContentUris.withAppendedId(downloadsUriProvider.getAllDownloadsUri(),id),null,null);    }  }  finally {    cursor.close();  }  LLog.i("Purged files, freed " + totalFreed + " for "+ targetBytes+ " requested");  return totalFreed;}  }
class C{  public void parseAtom(ExtensionProfile extProfile,XmlParser parser) throws IOException, ParseException {  Handler handler=new Handler(extProfile,null);  parser.parse(handler,atomPubNs.getUri(),"categories");}  }
class C{  public void testBug34703() throws Exception {  if (!com.mysql.jdbc.Util.isJdbc4()) {    return;  }  Method isValid=java.sql.Connection.class.getMethod("isValid",new Class[]{Integer.TYPE});  Connection newConn=getConnectionWithProps((Properties)null);  isValid.invoke(newConn,new Object[]{new Integer(1)});  Thread.sleep(2000);  assertTrue(((Boolean)isValid.invoke(newConn,new Object[]{new Integer(0)})).booleanValue());}  }
class C{  public static void close(Closeable stream){  if (null != stream) {    try {      stream.close();    } catch (    IOException e) {      LOG.error("Exception while closing the Log stream");    }  }}  }
class C{  void createImpl() throws SocketException {  if (impl == null)   setImpl();  try {    impl.create(true);    created=true;  } catch (  IOException e) {    throw new SocketException(e.getMessage());  }}  }
class C{  public int nextInt(int n,double p){  if (n * Math.min(p,1 - p) <= 0.0)   throw new IllegalArgumentException();  return generateBinomial(n,p);}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int mixHashCodes(int hash1,int hash2){  return (int)(hash1 * HASHPRIME + hash2);}  }
class C{  public T caseAbstractCaseClause(AbstractCaseClause object){  return null;}  }
class C{  @SuppressWarnings("unchecked") @Test @Category(RunnableOnService.class) public void testCoGroupByKeyHandleResults(){  TupleTag<String> namesTag=new TupleTag<>();  TupleTag<String> addressesTag=new TupleTag<>();  TupleTag<String> purchasesTag=new TupleTag<>();  Pipeline p=TestPipeline.create();  PCollection<KV<Integer,CoGbkResult>> coGbkResults=buildPurchasesCoGbk(p,purchasesTag,addressesTag,namesTag);  PCollection<KV<String,Integer>> purchaseCountByKnownAddressesWithoutKnownNames=coGbkResults.apply(ParDo.of(new CorrelatePurchaseCountForAddressesWithoutNamesFn(purchasesTag,addressesTag,namesTag)));  PAssert.that(purchaseCountByKnownAddressesWithoutKnownNames).containsInAnyOrder(KV.of("29 School Rd",2),KV.of("383 Jackson Street",1));  p.run();}  }
class C{  protected static RSSDoublinCoreModule buildDcModule(Hashtable t){  if (t == null || t.size() == 0)   return null;  RSSDoublinCoreModule dc=new RSSDoublinCoreModule();  Hashtable tbl=t;  Enumeration en=t.keys();  while (en.hasMoreElements()) {    String qName=(String)en.nextElement();    String data=(String)tbl.get(qName);    if (data == null)     continue;    if (RSSHandler.tagIsEqual(RSSHandler.DC_TITLE_TAG,qName))     dc.setDcTitle(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_CREATOR_TAG,qName))     dc.setDcCreator(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_SUBJECT_TAG,qName))     dc.setDcSubject(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_DESCRIPTION_TAG,qName))     dc.setDcDescription(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_PUBLISHER_TAG,qName))     dc.setDcPublisher(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_CONTRIBUTOR_TAG,qName))     dc.setDcContributor(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_DATE_TAG,qName))     dc.setDcDate(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_TYPE_TAG,qName))     dc.setDcType(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_FORMAT_TAG,qName))     dc.setDcFormat(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_IDENTIFIER_TAG,qName))     dc.setDcIdentifier(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_SOURCE_TAG,qName))     dc.setDcSource(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_LANGUAGE_TAG,qName))     dc.setDcLanguage(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_RELATION_TAG,qName))     dc.setDcRelation(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_COVERAGE_TAG,qName))     dc.setDcCoverage(data);    if (RSSHandler.tagIsEqual(RSSHandler.DC_RIGHTS_TAG,qName))     dc.setDcRights(data);  }  return dc;}  }
class C{  @Override public void onViewStateRestored(@Nullable Bundle savedInstanceState){  super.onViewStateRestored(savedInstanceState);  if (savedInstanceState != null) {    Parcelable safeGamesLoadedParcel=savedInstanceState.getParcelable(EXTRA_CURRENT_GAMES_LOADED);    List<Game> safeGamesLoaded=Parcels.unwrap(safeGamesLoadedParcel);    gameListPresenter.updateViewWithSafeGames(safeGamesLoaded);  }}  }
class C{  public static boolean isInteger(String s){  try {    Integer.valueOf(s);    return true;  } catch (  NumberFormatException e) {    return false;  }}  }
class C{  public boolean isSysTableLockedBy(Session session){  return meta == null || meta.isLockedExclusivelyBy(session);}  }
class C{  @Override public void notifyShutdown(ShutdownEvent event){  log.info("Entering notifyShutdown ...");  int benchmarkID=this.benchmark.addMeasure("zone-to-zone impedances");  MatsimServices controler=event.getServices();  Scenario sc=controler.getScenario();  double samplingRate=ConfigurationUtils.getUrbanSimParameterConfigModule(sc).getPopulationSampleRate();  double inverseOfSamplingRate=1 / samplingRate;  double walkSpeedMeterPerMinute=sc.getConfig().plansCalcRoute().getTeleportedModeSpeeds().get(TransportMode.walk) * 60.;  double bikeSpeedMeterPerMinute=sc.getConfig().plansCalcRoute().getTeleportedModeSpeeds().get(TransportMode.bike) * 60.;  TravelTime ttf=new FreeSpeedTravelTime();  TravelDisutility tdFree=controler.getTravelDisutilityFactory().createTravelDisutility(ttf);  LeastCostPathTreeExtended lcptExtFreeSpeedCarTrvelTime=new LeastCostPathTreeExtended(ttf,tdFree,(RoadPricingSchemeImpl)controler.getScenario().getScenarioElement(RoadPricingScheme.ELEMENT_NAME));  TravelTime ttc=controler.getLinkTravelTimes();  TravelDisutility tdCongested=controler.getTravelDisutilityFactory().createTravelDisutility(ttc);  LeastCostPathTreeExtended lcptExtCongestedCarTravelTime=new LeastCostPathTreeExtended(ttc,tdCongested,(RoadPricingSchemeImpl)controler.getScenario().getScenarioElement(RoadPricingScheme.ELEMENT_NAME));  LeastCostPathTree lcptTravelDistance=new LeastCostPathTree(ttf,new TravelDistanceCalculator());  Network network=(Network)controler.getScenario().getNetwork();  double depatureTime=8. * 3600;  Matrix originDestinationMatrix=new Matrix("tripMatrix","Zone to Zone origin destination trip matrix");  try {    UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)event.getServices().getConfig().getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME);    BufferedWriter travelDataWriter=initZone2ZoneImpedaceWriter(module.getMATSim4OpusTemp() + FILE_NAME);    computeZoneToZoneTrips(sc,originDestinationMatrix,depatureTime);    log.info("Computing and writing zone2zone impedance matrix ...");    ZoneObject[] zones=ZoneUtil.mapZoneCentroid2NearestNode(this.zones,network);    ProgressBar bar=new ProgressBar(zones.length);    log.info("Processing " + zones.length + " UrbanSim zones ...");    for (int fromZoneIndex=0; fromZoneIndex < zones.length; fromZoneIndex++) {      bar.update();      Node fromNode=zones[fromZoneIndex].getNearestNode();      Id originZoneID=zones[fromZoneIndex].getZoneID();      lcptExtCongestedCarTravelTime.calculateExtended(network,fromNode,depatureTime);      lcptExtFreeSpeedCarTrvelTime.calculateExtended(network,fromNode,depatureTime);      lcptTravelDistance.calculate(network,fromNode,depatureTime);      for (int toZoneIndex=0; toZoneIndex < zones.length; toZoneIndex++) {        Node toNode=zones[toZoneIndex].getNearestNode();        Id destinationZoneID=zones[toZoneIndex].getZoneID();        double arrivalTimeFS=lcptExtFreeSpeedCarTrvelTime.getTree().get(toNode.getId()).getTime();        double freeSpeedTravelTime_min=(arrivalTimeFS - depatureTime) / 60.;        if (freeSpeedTravelTime_min < 1.2)         freeSpeedTravelTime_min=1.2;        double travelDisutility_util=lcptExtCongestedCarTravelTime.getTree().get(toNode.getId()).getCost();        double arrivalTimeCC=lcptExtCongestedCarTravelTime.getTree().get(toNode.getId()).getTime();        double congestedTravelTime_min=(arrivalTimeCC - depatureTime) / 60.;        if (congestedTravelTime_min < 1.2)         congestedTravelTime_min=1.2;        double travelDistance_meter=lcptTravelDistance.getTree().get(toNode.getId()).getCost();        double bikeTravelTime_min=travelDistance_meter / bikeSpeedMeterPerMinute;        if (bikeTravelTime_min < 1.2)         bikeTravelTime_min=1.2;        double walkTravelTime_min=travelDistance_meter / walkSpeedMeterPerMinute;        if (walkTravelTime_min < 1.2)         walkTravelTime_min=1.2;        double ptTravelTime_min=-1.;        if (this.ptMatrix != null) {          ptTravelTime_min=this.ptMatrix.getTotalTravelTime_seconds(fromNode.getCoord(),toNode.getCoord()) / 60.;          if (ptTravelTime_min < 1.2)           ptTravelTime_min=1.2;        }        double trips=0.0;        Entry e=originDestinationMatrix.getEntry(originZoneID.toString(),destinationZoneID.toString());        if (e != null)         trips=e.getValue() * inverseOfSamplingRate;        travelDataWriter.write(originZoneID.toString() + "," + destinationZoneID.toString()+ ","+ freeSpeedTravelTime_min+ ","+ travelDisutility_util+ ","+ congestedTravelTime_min+ ","+ bikeTravelTime_min+ ","+ walkTravelTime_min+ ","+ ptTravelTime_min+ ","+ travelDistance_meter+ ","+ trips);        travelDataWriter.newLine();      }    }    System.out.println();    travelDataWriter.flush();    travelDataWriter.close();    log.info("Copying " + module.getMATSim4OpusTemp() + FILE_NAME+ " to "+ module.getMATSim4OpusOutput()+ FILE_NAME);    IOUtils.copyFile(new File(module.getMATSim4OpusTemp() + FILE_NAME),new File(module.getMATSim4OpusOutput() + FILE_NAME));    log.info("... done with writing travel_data.csv");    if (this.benchmark != null && benchmarkID > 0) {      this.benchmark.stoppMeasurement(benchmarkID);      log.info("Zone-to-zone impedance measure with " + zones.length + " zones took "+ this.benchmark.getDurationInSeconds(benchmarkID)+ " seconds ("+ this.benchmark.getDurationInSeconds(benchmarkID) / 60. + " minutes).");    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  log.info("... done with notifyShutdown.");}  }
class C{  public synchronized void forgetAllPeers(){  mCurrentPeers.clear();}  }
class C{  public String delete(){  userManager.removeUser(user.getId().toString());  List<String> args=new ArrayList<String>();  args.add(user.getFullName());  saveMessage(getText("user.deleted",args.toArray(new String[]{})));  return SUCCESS;}  }
class C{  private void reply(final String response,final boolean error,final String errorMessage,final String stackTrace,final String statusCode,final int statusCodeInt){  if (!sentReply) {    sentReply=true;    if (channel != null && channel.isOpen())     channel.close().awaitUninterruptibly();    final ResponseOnSingeRequest res=new ResponseOnSingeRequest(response,error,errorMessage,stackTrace,statusCode,statusCodeInt,PcDateUtils.getNowDateTimeStrStandard(),null);    if (!getContext().system().deadLetters().equals(sender)) {      sender.tell(res,getSelf());    }    if (getContext() != null) {      getContext().stop(getSelf());    }  }}  }
class C{  public double length(){  return max - min;}  }
class C{  public static void main(String[] args){  Locale.setDefault(Locale.US);  AimaDemoFrame frame=new AimaDemoFrame();  frame.setTitle("AIMA3e Java Demos with OSM");  AimaDemoApp.registerDemos(frame);  registerDemos(frame);  frame.setSize(1000,700);  frame.setVisible(true);}  }
class C{  private MethodDescriptor[] introspectMethods(){  return introspectMethods(false,beanClass);}  }
class C{  public String dump(){  StringBuilder sb=new StringBuilder("create \"");  sb.append(path).append("\"").append(" --version ").append(getVersion()).append(" --start ").append(getStartTime()).append(" --step ").append(getStep()).append(" ");  for (  DsDef dsDef : dsDefs) {    sb.append(dsDef.dump()).append(" ");  }  for (  ArcDef arcDef : arcDefs) {    sb.append(arcDef.dump()).append(" ");  }  return sb.toString().trim();}  }
class C{  @Override protected void onPreExecute(){  offersListLabel.setText(R.string.retrievingOffers);  PlaceDetailsActivity.this.setProgressBarIndeterminateVisibility(true);}  }
class C{  void recordAccess(HashMapPro<K,V> m){}  }
class C{  private long convertUPSToMGRS(String Hemisphere,Double Easting,Double Northing,long Precision){  double false_easting;  double false_northing;  double grid_easting;  double grid_northing;  int ltr2_low_value;  long[] letters=new long[MGRS_LETTERS];  double divisor;  int index;  long error_code=MGRS_NO_ERROR;  if (!AVKey.NORTH.equals(Hemisphere) && !AVKey.SOUTH.equals(Hemisphere))   error_code|=MGRS_HEMISPHERE_ERROR;  if ((Easting < MIN_EAST_NORTH) || (Easting > MAX_EAST_NORTH))   error_code|=MGRS_EASTING_ERROR;  if ((Northing < MIN_EAST_NORTH) || (Northing > MAX_EAST_NORTH))   error_code|=MGRS_NORTHING_ERROR;  if ((Precision < 0) || (Precision > MAX_PRECISION))   error_code|=MGRS_PRECISION_ERROR;  if (error_code == MGRS_NO_ERROR) {    divisor=Math.pow(10.0,(5 - Precision));    Easting=roundMGRS(Easting / divisor) * divisor;    Northing=roundMGRS(Northing / divisor) * divisor;    if (AVKey.NORTH.equals(Hemisphere)) {      if (Easting >= TWOMIL)       letters[0]=LETTER_Z; else       letters[0]=LETTER_Y;      index=(int)letters[0] - 22;      ltr2_low_value=(int)upsConstants[index][1];      false_easting=(double)upsConstants[index][4];      false_northing=(double)upsConstants[index][5];    } else {      if (Easting >= TWOMIL)       letters[0]=LETTER_B; else       letters[0]=LETTER_A;      ltr2_low_value=(int)upsConstants[(int)letters[0]][1];      false_easting=(double)upsConstants[(int)letters[0]][4];      false_northing=(double)upsConstants[(int)letters[0]][5];    }    grid_northing=Northing;    grid_northing=grid_northing - false_northing;    letters[2]=(int)(grid_northing / ONEHT);    if (letters[2] > LETTER_H)     letters[2]=letters[2] + 1;    if (letters[2] > LETTER_N)     letters[2]=letters[2] + 1;    grid_easting=Easting;    grid_easting=grid_easting - false_easting;    letters[1]=(int)ltr2_low_value + ((int)(grid_easting / ONEHT));    if (Easting < TWOMIL) {      if (letters[1] > LETTER_L)       letters[1]=letters[1] + 3;      if (letters[1] > LETTER_U)       letters[1]=letters[1] + 2;    } else {      if (letters[1] > LETTER_C)       letters[1]=letters[1] + 2;      if (letters[1] > LETTER_H)       letters[1]=letters[1] + 1;      if (letters[1] > LETTER_L)       letters[1]=letters[1] + 3;    }    makeMGRSString(0,letters,Easting,Northing,Precision);  }  return (error_code);}  }
class C{  @Inline @Override public final float floatRead(ObjectReference objref,Word offset,Word location,int mode){  return Magic.getFloatAtOffset(objref.toObject(),offset.toOffset());}  }
class C{  public AlertReport createAlertReport(long reportTimestamp,long detecedTimestamp,String dbGroupName,String dbHost,String alertReason,String alertValue){  AlertReport ar=new AlertReport();  ar.setReportTimestamp(reportTimestamp);  ar.setDbGroupName(dbGroupName);  ar.setDbHostName(dbHost);  ar.setTimestamp(detecedTimestamp);  ar.setRootPath(getAlertRootPath());  ar.setAlertReason(alertReason);  ar.setAlertValue(alertValue);  return ar;}  }
class C{  private static Process createIdaProcess(final String idaExe,final String idbFileName,final String host,final int port,final String user,final String password,final String name) throws IdaException {  final String tempPath=SystemHelpers.getTempDirectory();  final File idcFile=new File(tempPath + BINEXPORT_IDC_FILE);  try {    if (!idcFile.exists()) {      idcFile.createNewFile();    }    FileWriter fw=new FileWriter(idcFile.getAbsoluteFile());    BufferedWriter bw=new BufferedWriter(fw);    bw.write(BINEXPORT_IDC_FILE_CONTENT);    bw.close();  } catch (  final IOException exception) {    CUtilityFunctions.logException(exception);  }  final String idcPath=idcFile.getAbsolutePath();  final ProcessBuilder processBuilder=new ProcessBuilder(idaExe,"-A","-OExporterHost:" + host,"-OExporterPort:" + port,"-OExporterUser:" + user,"-OExporterPassword:" + password,"-OExporterDatabase:" + name,"-OExporterSchema:public",IdaHelpers.getSArgument(idcPath,SystemHelpers.isRunningWindows()),idbFileName);  try {    Process processInfo=null;    processBuilder.redirectErrorStream(true);    processInfo=processBuilder.start();    final BufferedReader reader=new BufferedReader(new InputStreamReader(processInfo.getInputStream()));    @SuppressWarnings("unused") String line;    try {      while ((line=reader.readLine()) != null) {        System.out.println(line);      }    } catch (    final IOException exception) {      reader.close();    }    reader.close();    return processInfo;  } catch (  final Exception exception) {    try {      CUtilityFunctions.logException(exception);    } catch (    final UnknownFormatConversionException e) {    }    throw new IdaException("E00210: Failed attempting to launch the importer with IDA: " + exception,exception);  }}  }
class C{  public static boolean containsIgnoreCase(String[] array,String value){  for (  String str : array) {    if (value == null && str == null)     return true;    if (value != null && value.equalsIgnoreCase(str))     return true;  }  return false;}  }
class C{  private void print(Object o){  if (logWriter != null) {    System.out.print(o);  }}  }
class C{  protected static void initRuntimeProperties(Properties p){  if (isApplet()) {    p.put("user.name","appletUser");  }  java.net.InetAddress addr=null;  try {    addr=java.net.InetAddress.getLocalHost();  } catch (  NullPointerException npe) {    Debug.output("Environment.init: Can't get hostname from InetAddress!");  }catch (  java.net.UnknownHostException e) {    Debug.output("Environment.init: I don't know my hostname!");  }catch (  IndexOutOfBoundsException ioobe) {    Debug.output("Environment.init: network may not be available");  }  p.put(UniqueID,"_" + Environment.get("user.name") + "_"+ Environment.get(Version)+ "_"+ Environment.get("os.arch")+ "_"+ Environment.get("os.name")+ "_"+ ((addr != null) ? addr.getHostName() : "nohost")+ "_"+ timestamp()+ "_");  String osname=Environment.get("os.name");  if (osname == null) {    isXWindows=false;    doingXWindowsWorkaround=false;    Debug.message("env","Environment: is applet, Web Start.");    return;  }  if (osname.equalsIgnoreCase("solaris") || osname.equalsIgnoreCase("SunOS")) {    isXWindows=true;    doingXWindowsWorkaround=true;    Debug.message("env","Environment: is X Windows!");  } else   if (osname.equalsIgnoreCase("linux")) {    isXWindows=true;    doingXWindowsWorkaround=true;    Debug.message("env","Environment: is X Windows!");  } else   if (osname.startsWith("Windows")) {    isXWindows=false;    doingXWindowsWorkaround=false;    isXWindows=true;    doingXWindowsWorkaround=true;    Debug.message("env","Environment: is MS Windows!");  } else   if (osname.equalsIgnoreCase("Mac OS")) {    isXWindows=false;    doingXWindowsWorkaround=false;    Debug.message("env","Environment: is Mac OS!");  } else   if (osname.equalsIgnoreCase("Mac OS X")) {    isXWindows=true;    doingXWindowsWorkaround=true;    com.bbn.openmap.omGraphics.DrawingAttributes.alwaysSetTextToBlack=true;    Debug.message("env","Environment: Excellent! Mac OS X!");  } else {    System.err.println("Environment.initRuntimeProperties(): " + "running on unknown/untested OS: " + osname);  }  if (Environment.get(OpenMapPrefix + ".noXWindowsWorkaround") != null) {    Debug.message("env","Environment.initRuntimeProperties(): " + "not working around XWindows clipping bug.");    doingXWindowsWorkaround=false;  }}  }
class C{  public Element writeMetaBean(Element parent,Object o,String name) throws Exception {  Element node;  MetaBean meta;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  meta=(MetaBean)o;  node=writeToXML(parent,o,name);  invokeWriteToXML(node,getIDsForBeanInstances(meta.getBeansInInputs()),VAL_INPUTSID);  invokeWriteToXML(node,getIDsForBeanInstances(meta.getBeansInOutputs()),VAL_OUTPUTSID);  return node;}  }
class C{  boolean isMariadbServer() throws SQLException {  DatabaseMetaData md=sharedConnection.getMetaData();  return md.getDatabaseProductVersion().indexOf("MariaDB") != -1;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(mailbox);  sb.append(" ");  sb.append(textDomain);  return sb.toString();}  }
class C{  private void handleMedia(Intent intent){  int intentMediaType=intent.getIntExtra(Config.YOUTUBE_TYPE,Config.YOUTUBE_MEDIA_NO_NEW_REQUEST);switch (intentMediaType) {case Config.YOUTUBE_MEDIA_NO_NEW_REQUEST:    mMediaPlayer.start();  break;case Config.YOUTUBE_MEDIA_TYPE_VIDEO:mediaType=Config.YOUTUBE_MEDIA_TYPE_VIDEO;videoItem=(YouTubeVideo)intent.getSerializableExtra(Config.YOUTUBE_TYPE_VIDEO);if (videoItem.getId() != null) {playVideo();}break;case Config.YOUTUBE_MEDIA_TYPE_PLAYLIST:mediaType=Config.YOUTUBE_MEDIA_TYPE_PLAYLIST;youTubeVideos=(ArrayList<YouTubeVideo>)intent.getSerializableExtra(Config.YOUTUBE_TYPE_PLAYLIST);int startPosition=intent.getIntExtra(Config.YOUTUBE_TYPE_PLAYLIST_VIDEO_POS,0);iterator=youTubeVideos.listIterator(startPosition);playNext();break;default :Log.d(TAG,"Unknown command");break;}}  }
class C{  private void append(BitSequence bs){  for (int i=0; i < bs.numBits; i+=1) {    append(bs.bitAt(i));  }}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  StorageTierList response=client.get(StorageTierList.class,baseUrl);  return ResourceUtils.defaultList(response.getStorageTiers());}  }
class C{  void save(){  if (registerSave == null) {    registerSave=new byte[blockSize];  }  System.arraycopy(register,0,registerSave,0,blockSize);}  }
class C{  public boolean isValidEntity(Entity entity,IGame game){  return isValidEntity(entity,game,true);}  }
class C{  public boolean isFromDHCP(){  return fromDHCP;}  }
class C{  public Profile migrateConfigToProfile(File config,String name) throws IllegalArgumentException, IOException {  String pid=FileUtil.sanitizeFilename(name);  File pp=new File(FileUtil.getPreferencesPath(),pid);  Profile profile=new Profile(name,pid,pp);  FileUtil.copy(config,new File(profile.getPath(),Profile.CONFIG_FILENAME));  FileUtil.copy(new File(config.getParentFile(),"UserPrefs" + config.getName()),new File(profile.getPath(),"UserPrefs" + Profile.CONFIG_FILENAME));  this.addProfile(profile);  log.info("Migrated \"{}\" config to profile \"{}\"",name,name);  return profile;}  }
class C{  private boolean greater(Key n,Key m){  if (n == null)   return false;  if (m == null)   return true;  return comp.compare(n,m) > 0;}  }
class C{  public void put(String key,long value){  Editor edit=context.getSharedPreferences(prefName,Context.MODE_PRIVATE).edit();  edit.putLong(key,value).commit();}  }
class C{  public void add_return(VasaAssociationObject param){  if (local_return == null) {    local_return=new VasaAssociationObject[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(VasaAssociationObject[])list.toArray(new VasaAssociationObject[list.size()]);}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  @Override public int read() throws IOException {  if (lookaheadChar == UNDEFINED) {    lookaheadChar=super.read();  }  lastChar=lookaheadChar;  if (super.ready()) {    lookaheadChar=super.read();  } else {    lookaheadChar=UNDEFINED;  }  if (lastChar == '\n') {    lineCounter++;  }  return lastChar;}  }
class C{  public void execute(){  acquireReference();  try {    getSession().execute(getSql(),getBindArgs(),getConnectionFlags());  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  protected void rescaleImage(int width,int height,int hint){  Image master=getMasterImage();  if (master != null) {    bgImage=master.getScaledInstance(width,height,hint);    tracker.addImage(bgImage,1);    try {      tracker.waitForID(1);    } catch (    InterruptedException e) {      e.printStackTrace();      bgImage=null;      return;    } finally {      tracker.removeImage(bgImage,1);    }  } else {    bgImage=null;  }}  }
class C{  public void restoreOriginal() throws SQLException {  Row currentRow;  for (Iterator<?> i=rvh.iterator(); i.hasNext(); ) {    currentRow=(Row)i.next();    if (currentRow.getInserted() == true) {      i.remove();      --numRows;    } else {      if (currentRow.getDeleted() == true) {        currentRow.clearDeleted();      }      if (currentRow.getUpdated() == true) {        currentRow.clearUpdated();      }    }  }  cursorPos=0;  notifyRowSetChanged();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.ENUMERATION_TYPE__ENUMERATOR:    return ((InternalEList<?>)getEnumerator()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.158 -0500",hash_original_method="F92C099980BF3075944300484370C03E",hash_generated_method="77BC8B89B31A6D4C76D7878ADA540AEF") public final void tunnelProxy(HttpHost proxy,boolean secure){  if (proxy == null) {    throw new IllegalArgumentException("Proxy host may not be null.");  }  if (!this.connected) {    throw new IllegalStateException("No tunnel unless connected.");  }  if (this.proxyChain == null) {    throw new IllegalStateException("No proxy tunnel without proxy.");  }  HttpHost[] proxies=new HttpHost[this.proxyChain.length + 1];  System.arraycopy(this.proxyChain,0,proxies,0,this.proxyChain.length);  proxies[proxies.length - 1]=proxy;  this.proxyChain=proxies;  this.secure=secure;}  }
class C{  public RequestHandle delete(String url,ResponseHandlerInterface responseHandler){  return delete(null,url,responseHandler);}  }
class C{  @HLEFunction(nid=0x8916C003,version=150) public int sceNetAdhocctlGetNameByAddr(pspNetMacAddress macAddress,TPointer nickNameAddr){  checkInitialized();  String nickName="";  for (  AdhocctlPeer peer : peers) {    if (sceNetAdhoc.isSameMacAddress(macAddress.macAddress,peer.macAddress)) {      nickName=peer.nickName;    }  }  nickNameAddr.setStringNZ(NICK_NAME_LENGTH,nickName);  return 0;}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("weblogic8x",DeployerType.INSTALLED,WebLogic8xSwitchableLocalDeployer.class);  deployerFactory.registerDeployer("weblogic9x",DeployerType.INSTALLED,WebLogic9x10x103x12xCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("weblogic10x",DeployerType.INSTALLED,WebLogic9x10x103x12xCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("weblogic103x",DeployerType.INSTALLED,WebLogic9x10x103x12xCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("weblogic103x",DeployerType.REMOTE,WebLogicWlstRemoteDeployer.class);  deployerFactory.registerDeployer("weblogic12x",DeployerType.INSTALLED,WebLogic9x10x103x12xCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("weblogic121x",DeployerType.INSTALLED,WebLogic9x10x103x12xCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("weblogic121x",DeployerType.REMOTE,WebLogicWlstRemoteDeployer.class);  deployerFactory.registerDeployer("weblogic122x",DeployerType.INSTALLED,WebLogic9x10x103x12xCopyingInstalledLocalDeployer.class);  deployerFactory.registerDeployer("weblogic122x",DeployerType.REMOTE,WebLogicWlstRemoteDeployer.class);}  }
class C{  private void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  public void clear(int bitIndex){  if (bitIndex < 0 || bitIndex >= nbits)   throw new IndexOutOfBoundsException(String.valueOf(bitIndex));  QuickBitVector.clear(bits,bitIndex);}  }
class C{  @Override public boolean containsValue(Object value){  final Segment<V>[] segments=this.segments;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    int sum=0;    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      int c=segments[i].count;      mcsum+=mc[i]=segments[i].modCount;      if (segments[i].containsValue(value))       return true;    }    boolean cleanSweep=true;    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        int c=segments[i].count;        if (mc[i] != segments[i].modCount) {          cleanSweep=false;          break;        }      }    }    if (cleanSweep)     return false;  }  for (int i=0; i < segments.length; ++i)   segments[i].lock();  boolean found=false;  try {    for (int i=0; i < segments.length; ++i) {      if (segments[i].containsValue(value)) {        found=true;        break;      }    }  }  finally {    for (int i=0; i < segments.length; ++i)     segments[i].unlock();  }  return found;}  }
class C{  public void configure(){  SerialTrafficController tc=null;  tc=new SpecificTrafficController(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().setTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().configureManagers();  tc.connectPort(this);  this.getSystemConnectionMemo().setSerialAddress(new jmri.jmrix.powerline.SerialAddress(this.getSystemConnectionMemo()));}  }
class C{  public static int maxProfit(int[] prices){  if (prices == null || prices.length < 2) {    return 0;  }  int max=0;  int min=prices[0];  for (int i=1; i < prices.length; i++) {    min=Math.min(min,prices[i]);    if (prices[i] > prices[i - 1]) {      max=Math.max(max,prices[i] - min);    }  }  return max;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.110 -0500",hash_original_method="2166D40B30A2B78A2A8578391CF70C71",hash_generated_method="29BDC10AADFD96C19F029D1714A554B1") public void startJitCompilation(){}  }
class C{  private void doPrepareTx(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final long beginNanos=System.nanoTime();  final AtomicLong txId=new AtomicLong();  if (!getTxId(req,resp,txId))   return;  final boolean ok;  try {    if (getIndexManager() instanceof IBigdataFederation) {      ok=true;    } else {      final ITx tx=((Journal)getIndexManager()).getTransactionManager().getTx(txId.get());      if (tx == null) {        buildAndCommitResponse(resp,HttpServletResponse.SC_NOT_FOUND,MIME_TEXT_PLAIN,"PREPARE-TX: Transaction not found: txId=" + txId);        return;      }      if (!tx.isEmptyWriteSet()) {        if (!isWritable(getServletContext(),req,resp)) {          return;        }      }      ok=((Journal)getIndexManager()).prepare(txId.get());    }    final long elapsedMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - beginNanos);    final StringWriter w=new StringWriter();    final XMLBuilder t=new XMLBuilder(w);    final Node root=t.root("response");    root.attr("elapsed",elapsedMillis);    addTx(root,txId.get(),getReadsOnCommitTimeOrNull(txId.get()));    root.close();    final int statusCode=ok ? HttpServletResponse.SC_OK : HttpServletResponse.SC_CONFLICT;    buildAndCommitResponse(resp,statusCode,MIME_APPLICATION_XML,w.toString());  } catch (  Throwable t) {    if (InnerCause.isInnerCause(t,IllegalStateException.class)) {      buildAndCommitResponse(resp,HttpServletResponse.SC_NOT_FOUND,MIME_TEXT_PLAIN,"PREPARE-TX: Transaction not found: txId=" + txId);      return;    }    launderThrowable(t,resp,"PREPARE-TX:: txId=" + txId);  }}  }
class C{  @SuppressWarnings({"RedundantIfStatement"}) public boolean isOutsideGridZone(){  if (this.isPositionInside(this.nw))   return false;  if (this.isPositionInside(this.ne))   return false;  if (this.isPositionInside(this.sw))   return false;  if (this.isPositionInside(this.se))   return false;  return true;}  }
class C{  public Iterator<TreeNode> findChildren(String name){  List<TreeNode> results;  if (children == null)   results=Collections.emptyList(); else {    results=new ArrayList<TreeNode>();    for (    TreeNode item : children) {      if (name.equals(item.getName()))       results.add(item);    }  }  return results.iterator();}  }
class C{  public TimelineDelegate(Timeline<T> timeline){  this(timeline,null,null);}  }
class C{  public List<ErrorLogger.ErrorObject> buildPackingList_2016(@Nonnull org.smpte_ra.schemas.st2067_2_2016.PKL.UserText annotationText,@Nonnull org.smpte_ra.schemas.st2067_2_2016.PKL.UserText issuer,@Nonnull org.smpte_ra.schemas.st2067_2_2016.PKL.UserText creator,@Nonnull List<PackingListBuilderAsset_2016> assets) throws IOException, SAXException, JAXBException {  int numErrors=imfErrorLogger.getNumberOfErrors();  org.smpte_ra.schemas.st2067_2_2016.PKL.PackingListType packingListType=IMFPKLObjectFieldsFactory.constructPackingListType_2016();  packingListType.setId(UUIDHelper.fromUUID(this.uuid));  packingListType.setIconId(this.iconId);  packingListType.setAnnotationText(annotationText);  packingListType.setIssueDate(this.issueDate);  packingListType.setIssuer(issuer);  packingListType.setCreator(creator);  packingListType.setGroupId(this.groupId);  org.smpte_ra.schemas.st2067_2_2016.PKL.PackingListType.AssetList assetList=new org.smpte_ra.schemas.st2067_2_2016.PKL.PackingListType.AssetList();  List<org.smpte_ra.schemas.st2067_2_2016.PKL.AssetType> packingListAssets=assetList.getAsset();  for (  PackingListBuilderAsset_2016 asset : assets) {    org.smpte_ra.schemas.st2067_2_2016.PKL.AssetType packingListAssetType=new org.smpte_ra.schemas.st2067_2_2016.PKL.AssetType();    packingListAssetType.setId(asset.getUUID());    packingListAssetType.setAnnotationText(asset.getAnnotationText());    packingListAssetType.setHash(asset.getHash());    packingListAssetType.setSize(asset.getSize());    packingListAssetType.setType(asset.getAssetType().toString());    packingListAssetType.setOriginalFileName(asset.getOriginalFileName());    packingListAssetType.setHashAlgorithm(asset.getHashAlgorithm());    packingListAssets.add(packingListAssetType);  }  packingListType.setAssetList(assetList);  packingListType.setSigner(null);  packingListType.setSignature(null);  File outputFile=new File(this.workingDirectory + File.separator + this.pklFileName);  boolean formatted=true;  ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();  try (InputStream packingListSchemaAsAStream=contextClassLoader.getResourceAsStream("org/smpte_ra/schemas/st2067_2_2016/PKL/packingList_schema.xsd");InputStream dsigSchemaAsAStream=contextClassLoader.getResourceAsStream("org/w3/_2000_09/xmldsig/xmldsig-core-schema.xsd");OutputStream outputStream=new FileOutputStream(outputFile)){    SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);    StreamSource[] schemaSources=new StreamSource[2];    schemaSources[0]=new StreamSource(dsigSchemaAsAStream);    schemaSources[1]=new StreamSource(packingListSchemaAsAStream);    Schema schema=schemaFactory.newSchema(schemaSources);    JAXBContext jaxbContext=JAXBContext.newInstance("org.smpte_ra.schemas.st2067_2_2016.PKL");    Marshaller marshaller=jaxbContext.createMarshaller();    ValidationEventHandlerImpl validationEventHandler=new ValidationEventHandlerImpl(true);    marshaller.setEventHandler(validationEventHandler);    marshaller.setSchema(schema);    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formatted);    marshaller.marshal(new JAXBElement<>(new QName("http://www.smpte-ra.org/schemas/2067-2/2016/PKL","PackingList"),org.smpte_ra.schemas.st2067_2_2016.PKL.PackingListType.class,packingListType),outputStream);    outputStream.close();    if (validationEventHandler.hasErrors()) {      for (      ValidationEventHandlerImpl.ValidationErrorObject validationErrorObject : validationEventHandler.getErrors()) {        this.imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_PKL_ERROR,validationErrorObject.getValidationEventSeverity(),validationErrorObject.getErrorMessage());      }    }  }   if (this.imfErrorLogger.getNumberOfErrors() > numErrors) {    List<ErrorLogger.ErrorObject> fatalErrors=imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,this.imfErrorLogger.getNumberOfErrors());    if (fatalErrors.size() > 0) {      throw new IMFAuthoringException(String.format("Following FATAL errors were detected while building the PackingList document %s",fatalErrors.toString()));    }  }  return imfErrorLogger.getErrors();}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setError(null);  mPasswordView.setError(null);  String email=mEmailView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);  }}  }
class C{  private ProfileList loadProfiles(){  final ProfileList tmpProfiles=new ProfileList();  try {    final InputStream is=Persistence.get().getInputStream(false,stendhal.getGameFolder(),"user.dat");    try {      tmpProfiles.load(is);    }  finally {      is.close();    }  } catch (  final FileNotFoundException fnfe) {  }catch (  final IOException ioex) {    JOptionPane.showMessageDialog(this,"An error occurred while loading your login information","Error Loading Login Information",JOptionPane.WARNING_MESSAGE);  }  return tmpProfiles;}  }
class C{  public TimestampVerifier(long tolerance,TimeUnit unit){  if (tolerance < 0) {    throw new IllegalArgumentException("A negative tolerance is not supported");  }  toleranceInMilliseconds=unit.toMillis(tolerance);}  }
class C{  public boolean isPriorityClass(){  return priorityClass;}  }
class C{  public static boolean checkForTypeNonfatal(final EvolutionState state,GPNode toBchecked,String type){  if (type.equalsIgnoreCase("L")) {    if (!(toBchecked instanceof LNode)) {      return false;    } else {      return true;    }  } else   if (type.equalsIgnoreCase("P")) {    if (!(toBchecked instanceof PNode)) {      return false;    } else {      return true;    }  } else   if (type.equalsIgnoreCase("I")) {    if (!(toBchecked instanceof IndexNode)) {      return false;    } else {      return true;    }  } else {    return false;  }}  }
class C{  public static String toString(Timestamp timestamp){  if (timestamp == null)   return null; else   return timestamp.toString();}  }
class C{  @Override public void addOtherWindowItems(JMenu m,Application app,@Nullable View v){}  }
class C{  public void testUsername(){  RuntimeConfiguration configuration=new Jonas4xRuntimeConfiguration();  configuration.setProperty(RemotePropertySet.USERNAME,"foo");  Hashtable<String,Object> connectionOptions=factory.readConfiguration(configuration);  assertEquals(connectionOptions.get(Context.INITIAL_CONTEXT_FACTORY),MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_INITIAL_CTX_FACTORY);  assertEquals(connectionOptions.get(Context.PROVIDER_URL),MEJBMBeanServerConnectionFactory.DEFAULT_PROVIDER_URI);  assertNull(connectionOptions.get(Context.SECURITY_PRINCIPAL));  assertNull(connectionOptions.get(Context.SECURITY_CREDENTIALS));  assertEquals(factory.mejbJndiPath,MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_MEJB_PATH);  assertNull(factory.username);  assertNull(factory.password);  assertNull(factory.jaasFile);  assertNull(factory.jaasEntry);}  }
class C{  public final void testGetPrimeQ(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPrimeQ()));}  }
class C{  public DrawerBuilder withTranslucentNavigationBar(boolean translucentNavigationBar){  this.mTranslucentNavigationBar=translucentNavigationBar;  if (!translucentNavigationBar) {    this.mTranslucentNavigationBarProgrammatically=false;  }  return this;}  }
class C{  private GridTestPrintStreamFactory(){}  }
class C{  public MAsset(MInventory inventory,MInventoryLine invLine,BigDecimal qty,BigDecimal costs){  super(invLine.getCtx(),0,invLine.get_TrxName());  setClientOrg(invLine);  MProduct product=MProduct.get(getCtx(),invLine.getM_Product_ID());  MAssetGroup assetGroup=MAssetGroup.get(invLine.getCtx(),invLine.getM_Product().getM_Product_Category().getA_Asset_Group_ID());  if (assetGroup == null)   assetGroup=MAssetGroup.get(invLine.getCtx(),product.getA_Asset_Group_ID());  setAssetGroup(assetGroup);  setName(product.getName());  setHelp(invLine.getDescription());  setAssetServiceDate(inventory.getMovementDate());  setIsOwned(true);  setIsInPosession(true);  setM_Product_ID(product.getM_Product_ID());  setVersionNo(product.getVersionNo());  if (invLine.getM_AttributeSetInstance_ID() != 0) {    MAttributeSetInstance asi=new MAttributeSetInstance(getCtx(),invLine.getM_AttributeSetInstance_ID(),get_TrxName());    setASI(asi);  }  setQty(qty);  if (inventory.getC_Activity_ID() > 0)   setC_Activity_ID(inventory.getC_Activity_ID());  if (MAssetType.isFixedAsset(this)) {    setA_Asset_Status(A_ASSET_STATUS_New);  } else {    setA_Asset_Status(A_ASSET_STATUS_Activated);    setProcessed(true);  }  setA_Asset_Status(A_ASSET_STATUS_New);}  }
class C{  public CharBuffer delete(int start,int end){  int length=length();  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();  end=Math.min(length,end);  int tail=length - end;  char[] buffer=buffer();  for (int i=0; i < tail; i++) {    buffer[start + i]=buffer[end + i];  }  length(length - (end - start));  return this;}  }
class C{  public boolean isIsChange(){  return isChange;}  }
class C{  public XintroActivityBuilder removeFragment(IntroFragmentModel introFragmentModel){  introFragmentModelList.remove(introFragmentModel);  return this;}  }
class C{  private void executeDownload(State state,AndroidHttpClient client,HttpGet request) throws StopRequest, RetryDownload {  InnerState innerState=new InnerState();  byte data[]=new byte[Constants.BUFFER_SIZE];  checkPausedOrCanceled(state);  setupDestinationFile(state,innerState);  addRequestHeaders(innerState,request);  checkConnectivity(state);  mNotification.onDownloadStateChanged(IDownloaderClient.STATE_CONNECTING);  HttpResponse response=sendRequest(state,client,request);  handleExceptionalStatus(state,innerState,response);  if (Constants.LOGV) {    Log.v(Constants.TAG,"received response for " + mInfo.mUri);  }  processResponseHeaders(state,innerState,response);  InputStream entityStream=openResponseEntity(state,response);  mNotification.onDownloadStateChanged(IDownloaderClient.STATE_DOWNLOADING);  transferData(state,innerState,data,entityStream);}  }
class C{  @Override public synchronized void updateAsciiStream(String columnName,java.io.InputStream x,int length) throws SQLException {  updateAsciiStream(findColumn(columnName),x,length);}  }
class C{  protected static void logException(Exception failed){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  failed.printStackTrace(pw);  System.out.println("BaseServiceTest :: Logging exception details : " + sw.getBuffer().toString());}  }
class C{  private void initializeComponents(){  setTitle("LGoodDatePicker Basic Demo " + InternalUtilities.getProjectVersionString());  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setLayout(new FlowLayout());  setSize(new Dimension(640,480));  setLocationRelativeTo(null);  DatePicker datePicker1=new DatePicker();  add(datePicker1);  TimePicker timePicker1=new TimePicker();  add(timePicker1);  DateTimePicker dateTimePicker1=new DateTimePicker();  DatePickerSettings dateSettings=new DatePickerSettings();  dateSettings.setFirstDayOfWeek(DayOfWeek.MONDAY);  DatePicker datePicker2=new DatePicker(dateSettings);  TimePickerSettings timeSettings=new TimePickerSettings();  timeSettings.setColor(TimeArea.TimePickerTextValidTime,Color.blue);  timeSettings.initialTime=LocalTime.now();  TimePicker timePicker2=new TimePicker(timeSettings);}  }
class C{  public void testSendRemoteNoWindowScale(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setLocalOptRcvBuf(100000);  test.disableRemoteWindowScale();  test.doTestTransfer(1000000);}  }
class C{  private static int autoMode(){  long time=speedTest();  if (time < 300000000) {    return Transparency.TRANSLUCENT;  }  Logger.getLogger(TransparencyMode.class).info("The system is slow - disabling translucency.");  return Transparency.BITMASK;}  }
class C{  public static String remove(String string,char ch){  int stringLen=string.length();  char[] result=new char[stringLen];  int offset=0;  for (int i=0; i < stringLen; i++) {    char c=string.charAt(i);    if (c == ch) {      continue;    }    result[offset]=c;    offset++;  }  if (offset == stringLen) {    return string;  }  return new String(result,0,offset);}  }
class C{  public static void zoomToScreen(final AbstractZyGraph<?,?> graph){  graph.getView().fitContent();  ZoomHelpers.keepZoomValid(graph.getView());  graph.updateViews();}  }
class C{  void dropCollection(String collectionName) throws OracleException {  if (collectionName == null) {    throw SODAUtils.makeException(SODAMessage.EX_ARG_CANNOT_BE_NULL,"collectionName");  }  callDropPLSQL(collectionName);  if (sharedDescriptorCache != null) {    sharedDescriptorCache.remove(collectionName);  }  if (localDescriptorCache != null) {    localDescriptorCache.remove(collectionName);  }  if (localCollectionCache != null) {    localCollectionCache.remove(collectionName);  }}  }
class C{  public boolean hasProperty(String name){  for (  Property property : this.properties) {    if (property.getName().equals(name)) {      return true;    }  }  return false;}  }
class C{  public void rotateY(float angle){  g.rotateY(angle);}  }
class C{  CSSElement parseCSS(ExtInputStreamReader r,HTMLComponent htmlC,CSSElement addTo,String firstToken) throws IOException {  if (addTo == null) {    addTo=new CSSElement("style");  }  CSSElement parent=addTo;  Vector selectors=new Vector();  CSSElement lastGroupedParent=null;  boolean selectorMode=true;  boolean grouping=false;  boolean childSelector=false;  boolean siblingSelector=false;  String token="";  while (true) {    if (firstToken != null) {      token=firstToken;      firstToken=null;    } else {      token=nextToken(r,true,false,selectorMode,false);    }    if (token == null || token.indexOf("</style") > -1) {      break;    }    if ("{".equals(token)) {      selectorMode=false;      grouping=false;      continue;    }    if ("}".equals(token)) {      selectorMode=true;      copyAttributes(parent,selectors,addTo);      parent=addTo;      selectors=new Vector();      lastGroupedParent=null;      continue;    }    if (selectorMode) {      if (",".equals(token)) {        grouping=true;        continue;      }      if (">".equals(token)) {        childSelector=true;        continue;      }      if ("+".equals(token)) {        siblingSelector=true;        continue;      }      if (token.startsWith(",")) {        token=token.substring(1);        grouping=true;      } else       if (token.startsWith(">")) {        token=token.substring(1);        childSelector=true;      } else       if (token.startsWith("+")) {        token=token.substring(1);        siblingSelector=true;      }      boolean nextIsChildSelector=false;      boolean nextIsSiblingSelector=false;      if (token.endsWith(">")) {        nextIsChildSelector=true;        token=token.substring(0,token.length() - 1);      } else       if (token.endsWith("+")) {        nextIsSiblingSelector=true;        token=token.substring(0,token.length() - 1);      }      if (grouping) {        if (token.endsWith(",")) {          token=token.substring(0,token.length() - 1);        } else {          grouping=false;        }        CSSElement entry=new CSSElement(token);        selectors.addElement(entry);        lastGroupedParent=entry;      } else {        if (token.endsWith(",")) {          grouping=true;          token=token.substring(0,token.length() - 1);        }        CSSElement entry=new CSSElement(token);        entry.descendantSelector=!childSelector;        entry.siblingSelector=siblingSelector;        if (lastGroupedParent == null) {          parent.addChild(entry);          parent=entry;        } else {          lastGroupedParent.addChild(entry);          lastGroupedParent=entry;        }      }      childSelector=nextIsChildSelector;      siblingSelector=nextIsSiblingSelector;    } else {      boolean compoundToken=false;      for (int iter=0; iter < CSSElement.CSS_SHORTHAND_ATTRIBUTE_LIST.length; iter++) {        if (CSSElement.CSS_SHORTHAND_ATTRIBUTE_LIST[iter].equals(token)) {          compoundToken=true;          boolean collattable=CSSElement.CSS_IS_SHORTHAND_ATTRIBUTE_COLLATABLE[iter];          int valsAdded=0;          token=nextToken(r,false,false,false,false);          String[] tokens=new String[4];          while (token != null) {            if (collattable) {              if (valsAdded < tokens.length) {                tokens[valsAdded]=token;                valsAdded++;              }            } else {              addShorthandAttribute(token,iter,parent);            }            token=nextToken(r,false,false,false,false);          }          if ((collattable) && (valsAdded > 0)) {            for (int i=0; i < CSSElement.CSS_COLLATABLE_ORDER[valsAdded - 1].length; i++) {              for (int j=0; j < CSSElement.CSS_COLLATABLE_ORDER[valsAdded - 1][i].length; j++) {                int side=CSSElement.CSS_COLLATABLE_ORDER[valsAdded - 1][i][j];                addAttributeTo(parent,CSSElement.CSS_SHORTHAND_ATTRIBUTE_INDEX[iter][side],tokens[i],htmlC);              }            }          }          break;        }      }      if (!compoundToken) {        int result=addAttributeTo(parent,token,nextToken(r,false,true,false,(token.equalsIgnoreCase("-wap-access-key") || (token.equalsIgnoreCase("font-family")) || (token.equalsIgnoreCase("quotes"))|| (token.equalsIgnoreCase("border-spacing"))|| (token.equalsIgnoreCase("content"))|| (token.equalsIgnoreCase("counter-reset"))|| (token.equalsIgnoreCase("counter-increment")))),htmlC);        if (result != -1) {          while (nextToken(r,false,false,false,false) != null) {          }        }      }    }  }  return addTo;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState,R.layout.activity_search);}  }
class C{  public BalloonController(WorldWindow wwd){  if (wwd == null) {    String message=Logging.getMessage("nullValue.WorldWindow");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.wwd=wwd;  this.wwd.addSelectListener(this);  this.wwd.getInputHandler().addMouseListener(this);  this.wwd.getInputHandler().addMouseMotionListener(this);}  }
class C{  public DTMAxisIterator reset(){  m_ancestorsPos=m_ancestors.size() - 1;  _currentNode=(m_ancestorsPos >= 0) ? m_ancestors.elementAt(m_ancestorsPos) : DTM.NULL;  return resetPosition();}  }
class C{  public void outputExampleXML(PrintWriter writer,ElementRule rule,int level){  if (rule.getElementClass() == null) {    if (rule.getName() == null)     System.err.println(rule + " has a null name");    outputElementRules(writer,rule.getName(),rule.getRules(),level);  } else {    if (rule.hasExample()) {      writer.println(spaces(level + 1) + rule.getExample());    } else {      outputExampleXML(writer,rule.getElementClass(),level + 1);    }  }}  }
class C{  private SpeechletResponse newAskResponse(String stringOutput,String repromptText){  return newAskResponse(stringOutput,false,repromptText,false);}  }
class C{  private void handleException(Exception e){  System.err.println("Can't read from input stream:");  e.printStackTrace();  close();  System.exit(1);}  }
class C{  @Override protected boolean pass(JCas aJCas){  return select(aJCas,Sentence.class).size() > 0;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthTreeUI();}  }
class C{  public boolean isPlaying(){  return false;}  }
class C{  void copyTo(MouseState target){  target.x=x;  target.y=y;  target.wheel=wheel;  buttonsPressed.copyTo(target.buttonsPressed);  target.window=window;}  }
class C{  public void coreEventOnGetCompleted(final WorkspaceEvent e){  if (e.getWorkspaceSource() == WorkspaceEventSource.EXTERNAL) {    refresh();  }}  }
class C{  private void createTestUser(String name,String channel){  testUser=new User(name,"abc",channel);  testUser.setColor("blue");  testUser.setGlobalMod(true);  testUser.setBot(true);  testUser.setEmoteSets("4280");  LinkedHashMap<String,String> badgesTest=new LinkedHashMap<>();  badgesTest.put("moderator","1");  badgesTest.put("premium","1");  badgesTest.put("bits","100");  testUser.setTwitchBadges(badgesTest);}  }
class C{  public AudioChannelLabelSubDescriptorBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,AudioChannelLabelSubDescriptor.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.mca_label_dictionary_id == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,AudioChannelLabelSubDescriptor.ERROR_DESCRIPTION_PREFIX + "mca_label_dictionary_id is null");  }  if (this.mca_link_id == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,AudioChannelLabelSubDescriptor.ERROR_DESCRIPTION_PREFIX + "mca_link_id is null");  }  if (this.mca_tag_symbol == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,AudioChannelLabelSubDescriptor.ERROR_DESCRIPTION_PREFIX + "mca_tag_symbol is null");  }}  }
class C{  public ProtocolDecoderException(){}  }
class C{  public void createAppearanceString(final FormObject formObj,final PdfObjectReader inCurrentPdfFile){  currentPdfFile=inCurrentPdfFile;  init(formObj);}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    value=NULL_OBJECT;  }  for (int i=1; i < elementData.length; i=i + 2) {    if (elementData[i] == value) {      return true;    }  }  return false;}  }
class C{  public static Request createRefreshRequest(int lifetime){  Request refreshRequest=new Request();  try {    refreshRequest.setMessageType(Message.REFRESH_REQUEST);    LifetimeAttribute lifetimeReq=AttributeFactory.createLifetimeAttribute(lifetime);    refreshRequest.putAttribute(lifetimeReq);  } catch (  IllegalArgumentException ex) {    logger.log(Level.FINE,"Failed to set message type.",ex);  }  return refreshRequest;}  }
class C{  @Override public void run(){  amIActive=true;  String ouptutFile=null;  String shapefileName=null;  int i=0;  int row, col, rows, cols;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  Geometry[] JTSGeometries;  GMLWriter gmlWriter=new GMLWriter();  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  if (inputFilesString.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  try {    for (i=0; i < numFiles; i++) {      if (numFiles > 1) {        progress=(int)(100f * i / (numFiles - 1));        updateProgress("Loop " + (i + 1) + " of "+ numFiles+ ":",progress);      }      shapefileName=imageFiles[i];      if (!((new File(shapefileName)).exists())) {        showFeedback("Vector file does not exist.");        break;      }      ShapeFile shapefile=new ShapeFile(shapefileName);      ouptutFile=shapefileName.replace(".shp",".gml");      (new File(ouptutFile)).delete();      fw=new FileWriter(ouptutFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=0;      int n=0;      int onePercentOfRecs=shapefile.getNumberOfRecords() / 100;      for (      ShapeFileRecord record : shapefile.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          JTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < JTSGeometries.length; a++) {            str1=gmlWriter.write(JTSGeometries[a]);            out.println(str1);          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        if (n == onePercentOfRecs) {          n=0;          progress++;          updateProgress("Exporting shapefile data:",progress);        }      }    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean startsWith(MetaPropertyPath other){  if (other.getPath().length > path.length)   return false;  MetaProperty[] subarray=Arrays.copyOf(this.metaProperties,other.getMetaProperties().length);  return Arrays.equals(subarray,other.metaProperties);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:10.445 -0500",hash_original_method="9A297062C2D2EDFA0EA27742D0F1F520",hash_generated_method="4702E1F913E3FD9A825CCD513A01703B") public boolean isNetworkSpecific(){  return ton == TON_NETWORK;}  }
class C{  private void drawDiamond(Canvas canvas,Paint paint,float[] path,float x,float y){  path[0]=x;  path[1]=y - size;  path[2]=x - size;  path[3]=y;  path[4]=x;  path[5]=y + size;  path[6]=x + size;  path[7]=y;  drawPath(canvas,path,paint,true);}  }
class C{  public void testBug38367() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  try {    createProcedure("sptestBug38367","(OUT nfact VARCHAR(100), IN ccuenta VARCHAR(100),\nOUT ffact VARCHAR(100),\nOUT fdoc VARCHAR(100))" + "\nBEGIN\nEND");    DatabaseMetaData dbMeta=this.conn.getMetaData();    this.rs=dbMeta.getProcedureColumns(this.conn.getCatalog(),null,"sptestBug38367",null);    while (this.rs.next()) {      String columnName=this.rs.getString(4);      Short columnNullable=new Short(this.rs.getShort(12));      assertTrue("Parameter " + columnName + " is not java.sql.DatabaseMetaData.procedureNullable.",columnNullable.intValue() == java.sql.DatabaseMetaData.procedureNullable);    }  }  finally {  }}  }
class C{  public static boolean isTransient(int flags){  return (flags & TRANSIENT) != 0;}  }
class C{  protected String parseIntelligenceSymCode(String symCode){  StringBuilder sb=new StringBuilder();  String s=symCode.substring(0,1);  if (s != null && s.equalsIgnoreCase(SymbologyConstants.SCHEME_INTELLIGENCE))   this.setScheme(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.scheme"));  s=symCode.substring(1,2);  if (SymbologyConstants.STANDARD_IDENTITY_ALL.contains(s.toUpperCase()))   this.setStandardIdentity(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.standardIdentity"));  s=symCode.substring(2,3);  if (SymbologyConstants.BATTLE_DIMENSION_ALL_INTELLIGENCE.contains(s.toUpperCase()))   this.setBattleDimension(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.battleDimension"));  s=symCode.substring(3,4);  if (SymbologyConstants.STATUS_ALL_UEI_SIGINT_SO_EM.contains(s.toUpperCase()))   this.setStatus(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.status"));  s=symCode.substring(4,10);  if (!"------".equals(s))   this.setFunctionId(s);  s=symCode.substring(10,12);  if (!"--".equals(s))   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.symbolModifier"));  s=symCode.substring(12,14);  if (!"--".equals(s))   this.setCountryCode(s);  s=symCode.substring(14,15);  if (SymbologyConstants.ORDER_OF_BATTLE_ALL_UEI_SIGINT_SO_EM.contains(s.toUpperCase()))   this.setOrderOfBattle(s); else   if (!"-".equals(s))   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.orderOfBattle"));  return sb.length() > 0 ? Logging.getMessage("Symbology.SymbolCodeFieldsUnrecognized",sb.toString(),symCode) : null;}  }
class C{  @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.535 -0500",hash_original_method="4391FF82C7FA76BDB2CDCD1D85612F8D",hash_generated_method="F531D5EBDD0D953AA2BA79FD6C6C9618") public boolean computeScrollOffset(){  if (isFinished()) {    return false;  }switch (mMode) {case SCROLL_MODE:    long time=AnimationUtils.currentAnimationTimeMillis();  final long elapsedTime=time - mScrollerX.mStartTime;final int duration=mScrollerX.mDuration;if (elapsedTime < duration) {float q=(float)(elapsedTime) / duration;if (mInterpolator == null) {  q=Scroller.viscousFluid(q);} else {  q=mInterpolator.getInterpolation(q);}mScrollerX.updateScroll(q);mScrollerY.updateScroll(q);} else {abortAnimation();}break;case FLING_MODE:if (!mScrollerX.mFinished) {if (!mScrollerX.update()) {if (!mScrollerX.continueWhenFinished()) {mScrollerX.finish();}}}if (!mScrollerY.mFinished) {if (!mScrollerY.update()) {if (!mScrollerY.continueWhenFinished()) {mScrollerY.finish();}}}break;}return true;}  }
class C{  public static void registerForBeam(final Activity activity,final BeamProvider provider){  final NfcAdapter nfcAdapter=NfcAdapter.getDefaultAdapter(activity);  if (nfcAdapter == null)   return;  if (activity.checkPermission(Manifest.permission.NFC,Process.myPid(),Process.myUid()) == PackageManager.PERMISSION_DENIED)   return;  try {    final BeamCallback beamCallback=new BeamCallback(activity,provider);    nfcAdapter.setNdefPushMessageCallback(beamCallback,activity);    nfcAdapter.setOnNdefPushCompleteCallback(beamCallback,activity);  } catch (  IllegalStateException e) {    Log.w("BeamController","NFC registration failure. Can't retry, giving up.");  }}  }
class C{  public static byte[] decode(String input) throws ParseException {  if (input.length() == 0) {    return new byte[0];  }  byte[] input58=new byte[input.length()];  for (int i=0; i < input.length(); ++i) {    char c=input.charAt(i);    int digit=c < 128 ? INDEXES[c] : -1;    if (digit < 0) {      throw new ParseException("Illegal character " + c + " at position "+ i,i);    }    input58[i]=(byte)digit;  }  int zeros=0;  while (zeros < input58.length && input58[zeros] == 0) {    ++zeros;  }  byte[] decoded=new byte[input.length()];  int outputStart=decoded.length;  for (int inputStart=zeros; inputStart < input58.length; ) {    decoded[--outputStart]=divmod(input58,inputStart,58,256);    if (input58[inputStart] == 0) {      ++inputStart;    }  }  while (outputStart < decoded.length && decoded[outputStart] == 0) {    ++outputStart;  }  return Arrays.copyOfRange(decoded,outputStart - zeros,decoded.length);}  }
class C{  public String reformat(final String input) throws ParseException {  return format(parseObject(input));}  }
class C{  public LessEqualConstraint(double constraintValue){  super(Double.valueOf(constraintValue));}  }
class C{  public boolean reset() throws SQLException {  writerCalls++;  return writerCalls == 1;}  }
class C{  public static void createLoginPage(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,Properties ctx,String AD_Message) throws ServletException, IOException {  request.getSession().invalidate();  String url=WebEnv.getBaseDirectory("index.html");  WebDoc doc=null;  if (ctx != null && AD_Message != null && !AD_Message.equals(""))   doc=WebDoc.create(Msg.getMsg(ctx,AD_Message)); else   if (AD_Message != null)   doc=WebDoc.create(AD_Message); else   doc=WebDoc.create(false);  script script=new script("window.top.location.replace('" + url + "');");  doc.getBody().addElement(script);  createResponse(request,response,servlet,null,doc,false);}  }
class C{  static int applyMaskPenaltyRule3(ByteMatrix matrix){  int numPenalties=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      byte[] arrayY=array[y];      if (x + 6 < width && arrayY[x] == 1 && arrayY[x + 1] == 0 && arrayY[x + 2] == 1 && arrayY[x + 3] == 1 && arrayY[x + 4] == 1 && arrayY[x + 5] == 0 && arrayY[x + 6] == 1 && (isWhiteHorizontal(arrayY,x - 4,x) || isWhiteHorizontal(arrayY,x + 7,x + 11))) {        numPenalties++;      }      if (y + 6 < height && array[y][x] == 1 && array[y + 1][x] == 0 && array[y + 2][x] == 1 && array[y + 3][x] == 1 && array[y + 4][x] == 1 && array[y + 5][x] == 0 && array[y + 6][x] == 1 && (isWhiteVertical(array,x,y - 4,y) || isWhiteVertical(array,x,y + 7,y + 11))) {        numPenalties++;      }    }  }  return numPenalties * N3;}  }
class C{  public HtmlDocumentBuilder(DOMImplementation implementation,XmlViolationPolicy xmlPolicy){  this.implementation=implementation;  this.domTreeBuilder=new DOMTreeBuilder(implementation);  this.tokenizer=new Driver(domTreeBuilder);  this.tokenizer.setXmlnsPolicy(XmlViolationPolicy.ALTER_INFOSET);  setXmlPolicy(xmlPolicy);}  }
class C{  @SuppressWarnings("unchecked") public void createStandardMBean(String implementationClassName,String interfaceClassName,boolean isMXBean,ObjectName name) throws Exception {  Object implementation=Class.forName(implementationClassName).newInstance();  Class<Object> interfaceClass=interfaceClassName == null ? null : (Class<Object>)Class.forName(interfaceClassName);  StandardMBean standardMBean=new StandardMBean(implementation,interfaceClass,isMXBean);  mbeanServer.registerMBean(standardMBean,name);}  }
class C{  public void testWithSubquery() throws RepositoryException, QueryEvaluationException, TupleQueryResultHandlerException, MalformedQueryException {  final String query="SELECT ?i ?i_label ?i_class ?i_v1 ?i_v2 ?i_v2_label ?i_v2_class ?i_v2_v1" + "WHERE {" + "?i <http://www.w3.org/2000/01/rdf-schema#label> ?i_label ."+ "?i a ?i_class ."+ "?i_class <http://www.w3.org/2000/01/rdf-schema#subClassOf>* <http://dragon-research.com/cham/model/model1#Event> ."+ "OPTIONAL { ?i <http://dragon-research.com/cham/model/model1#name> ?i_v1 } ."+ "?i <http://dragon-research.com/cham/model/model1#hasTemporalEntity> ?i_v2 ."+ "{"+ "SELECT ?i_v2 ?i_v2_label ?i_v2_class ?i_v2_v1"+ "WHERE {"+ "?i_v2 <http://www.w3.org/2000/01/rdf-schema#label> ?i_v2_label ."+ "?i_v2 a ?i_v2_class ."+ "?i_v2_class <http://www.w3.org/2000/01/rdf-schema#subClassOf>* <http://dragon-research.com/cham/model/model1#TemporalInstant> ."+ "OPTIONAL { ?i_v2 <http://dragon-research.com/cham/model/model1#dateTime> ?i_v2_v1 } ."+ "}"+ "ORDER BY ?i_v2_label"+ "}"+ "}"+ "ORDER BY ?i_label";  final RepositoryConnection conn=repository.getConnection();  final TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,query);  RdfCloudTripleStoreConnectionTest.CountTupleHandler countTupleHandler=new RdfCloudTripleStoreConnectionTest.CountTupleHandler();  tupleQuery.evaluate(countTupleHandler);  assertEquals(6,countTupleHandler.getCount());  conn.close();}  }
class C{  protected void drawLabel(Canvas c,float x,float y,String label){  c.drawText(label,x,y,mLegendLabelPaint);}  }
class C{  public Year(Date time,TimeZone zone){  this(time,zone,Locale.getDefault());}  }
class C{  public void truncate(long length) throws SerialException {  isValid();  if (length > len) {    throw new SerialException("Length more than what can be truncated");  } else {    len=length;    if (len == 0) {      buf=new char[]{};    } else {      buf=(this.getSubString(1,(int)len)).toCharArray();    }  }}  }
class C{  public static OkHttpClient defaultClient(){  return new OkHttpClient.Builder().connectionPool(connectionPool).build();}  }
class C{  public static void generateCsvFile(String sFileName,String data) throws IOException, JSONException {  JSONObject objectToWrite=new JSONObject(data);  File folder=new File(Environment.getExternalStorageDirectory() + "/Folder");  boolean var=false;  if (!folder.exists()) {    var=folder.mkdir();  }  System.out.println("" + var);  final String filename=folder.toString() + "/" + sFileName;  FileWriter writer=new FileWriter(filename,true);  try {    writer.append(objectToWrite.get("x").toString());    writer.append(',');    writer.append(objectToWrite.get("y").toString());    writer.append(',');    writer.append(objectToWrite.get("z").toString());    writer.append('\n');    writer.flush();    writer.close();  } catch (  Exception e) {    writer.flush();    writer.close();    e.printStackTrace();  }}  }
class C{  void cleanupObsoleteOptionDescriptions() throws UpdateConstraintException {  List<VOLocalizedText> obsoleteLocalizedTexts=obsoleteOptionDescriptions.get(Long.valueOf(parameterOption.getKey()));  if (obsoleteLocalizedTexts != null && obsoleteLocalizedTexts.size() > 0) {    if (parameterDef.definesParametersOfUndeletedProduct()) {      UpdateConstraintException e=new UpdateConstraintException(ClassEnum.TECHNICAL_SERVICE,technicalProductId);      throw e;    } else {      for (      VOLocalizedText lt : obsoleteLocalizedTexts) {        localizer.removeLocalizedValue(parameterOption.getKey(),LocalizedObjectTypes.OPTION_PARAMETER_DEF_DESC,lt.getLocale());      }      obsoleteOptionDescriptions.remove(Long.valueOf(parameterOption.getKey()));    }  }}  }
class C{  public void write(byte[] b,int o,int len){  while (len > 0) {    int n=len <= availLen ? len : availLen;    System.arraycopy(b,o,buf,offset,n);    incrementOffset(n);    len-=n;    o+=n;  }}  }
class C{  public void onControlAcquired(int type){  removeMessages(MSG_CONTROL);  removeMessages(MSG_RELEASE_CONTROL);  final Message msg=obtainMessage(MSG_CONTROL,type,0);  sendMessageDelayed(msg,ACQUIRED_CONTROL_TIMEOUT);}  }
class C{  public static void drawDefaultLineAndArrows(DrawHandler drawer,RelationPointHandler relationPoints){  drawLineAndArrows(drawer,relationPoints,new Match<LineType>("",LineType.SOLID),new Match<ArrowEnd>("",null),new Match<ArrowEnd>("",null));}  }
class C{  void checkFrames(ThreadReference thread,String[] matchList) throws Exception {  for (int i=0; i < matchList.length; ++i) {    String match=matchList[i];    StackFrame frame=thread.frame(i);    Location loc=frame.location();    ReferenceType refType=loc.declaringType();    Method meth=loc.method();    String errInfo="\nframe " + i + ": "+ loc+ "\n  match: "+ match;    if (!findReferenceType("RedefineSubTarg").equals(refType)) {      failure("FAIL: Bad reference type - " + errInfo);      return;    }    StringTokenizer st=new StringTokenizer(match);    boolean expectObs=st.nextToken().equals("O");    println("Frame " + i + ": "+ meth);    if (meth.isObsolete()) {      if (!expectObs) {        failure("FAIL: Method should NOT be obsolete - " + errInfo);      }    } else {      if (expectObs) {        failure("FAIL: Method should be obsolete - " + errInfo);        break;      }      if (!findMethod(refType,meth.name(),meth.signature()).equals(meth)) {        failure("FAIL: Non matching method - " + errInfo);      }      int line=loc.lineNumber();      if (line != Integer.parseInt(st.nextToken())) {        failure("FAIL: Unexpected line number: " + errInfo);      }      int lvCnt=0;      while (st.hasMoreTokens()) {        ++lvCnt;        String lvName=st.nextToken();        int lvValue=Integer.parseInt(st.nextToken());        boolean isArg=st.nextToken().equals("T");        LocalVariable lv=frame.visibleVariableByName(lvName);        if (lv == null) {          failure("FAIL: local var not found: '" + lvName + "' -- "+ errInfo);        } else {          Value val=frame.getValue(lv);          int ival=((IntegerValue)val).value();          if (ival != lvValue) {            failure("FAIL: expected value: '" + lvValue + "' got: '"+ ival+ "' -- "+ errInfo);          }          if (lv.isArgument() != isArg) {            failure("FAIL: expected argument: '" + isArg + "' got: '"+ lv.isArgument()+ "' -- "+ errInfo);          }        }      }      List locals=frame.visibleVariables();      if (locals.size() != lvCnt) {        failure("FAIL: expected '" + lvCnt + "' locals were '"+ locals.size()+ "' -- "+ errInfo+ "' -- "+ locals);      }    }  }}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm determines the maximum weight spanning tree " + "and returns a Naive Bayes network augmented with a tree.\n\n" + "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  private static int computeOpcode(int deltaLines,int deltaAddress){  if (deltaLines < DBG_LINE_BASE || deltaLines > (DBG_LINE_BASE + DBG_LINE_RANGE - 1)) {    throw new RuntimeException("Parameter out of range");  }  return (deltaLines - DBG_LINE_BASE) + (DBG_LINE_RANGE * deltaAddress) + DBG_FIRST_SPECIAL;}  }
class C{  public CartoonSSAO(float downsample){  this();  this.downsample=downsample;}  }
class C{  public DataSet(final int capacity){  this.dataSet=new double[capacity];  this.dataSetSize=0;}  }
class C{  public void unregisterSmsProvisioningReceiver(){  mSmsManager.unregisterSmsProvisioningReceiver();}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a list of characters in one line: ");  String str=input.nextLine();  char[] chars=new char[str.length() - 1];  for (int i=0; i < chars.length; i++)   chars[i]=str.charAt(i);  char ch=str.charAt(str.length() - 1);  System.out.println("The character \"" + ch + "\" occurs "+ count(chars,ch)+ " times in the list \""+ str.substring(0,str.length() - 1)+ "\".");}  }
class C{  public static void resubmitOrder(@Required String orderId){  checkAuthenticity();  OrderRestRep order=OrderUtils.getOrder(uri(orderId));  addParametersToFlash(order);  Services.showForm(order.getCatalogService().getId().toString());}  }
class C{  public CF8(){  this(10);}  }
class C{  public String typeName(){  return "float";}  }
class C{  private static Byte[] castToByte(byte[] d){  Byte[] dest=new Byte[d.length];  for (int i=0; i < d.length; i++) {    dest[i]=(byte)d[i];  }  return dest;}  }
class C{  public String schema(){  return tableId.schema();}  }
class C{  public EndpointDescription[] discoverEndpoints(String connectUrl) throws ServiceResultException {  return discoverEndpoints(connectUrl,"");}  }
class C{  public Result send(Email email,boolean... sync){  return service.send(email,boolToInt(true,sync));}  }
class C{  public NumericalUnaryExpression createNumericalUnaryExpression(){  NumericalUnaryExpressionImpl numericalUnaryExpression=new NumericalUnaryExpressionImpl();  return numericalUnaryExpression;}  }
class C{  public void reset(){  remainingMethods.addAll(allMethods);  attemptedMethods.clear();}  }
class C{  protected void pickUpCarTruncated(PrintWriter file,Car car,boolean isManifest){  pickUpCar(file,car,new StringBuffer(padAndTruncateString(Setup.getPickupCarPrefix(),Setup.getManifestPrefixLength())),Setup.getPickupTruncatedManifestMessageFormat(),isManifest);}  }
class C{  public void makeKey(final byte[] key){  try {    crypto=new Crypto(key);  } catch (  final Exception e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(e);    }  }}  }
class C{  ExtendedBufferedReader(final Reader reader){  super(reader);}  }
class C{  public CAT(){  cat=new ConcurrentAutoTable();}  }
class C{  public static IsNullValue parameterMarkedAsMightBeNull(XMethodParameter mp){  return instanceByFlagsList[PARAM >> FLAG_SHIFT][NSP];}  }
class C{  public static void main(String[] args){  LogWindow log;  LookAndFeel.setLookAndFeel();  log=new LogWindow();  log.setVisible(true);  log.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  System.out.print("a");  System.err.print("a");  System.out.print("a");  System.out.println();  System.err.println(new java.util.Date());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @GwtIncompatible public static <T>T[] toArray(Iterable<? extends T> iterable,Class<T> type){  return toArray(iterable,ObjectArrays.newArray(type,0));}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  public Caret createCaret(){  return null;}  }
class C{  public Process exec(String[] progArray,String[] envp,File directory) throws java.io.IOException {  SecurityManager currentSecurity=System.getSecurityManager();  if (currentSecurity != null) {    currentSecurity.checkExec(progArray[0]);  }  if (progArray == null) {    throw new NullPointerException("Command argument shouldn't be empty.");  }  if (progArray.length == 0) {    throw new IndexOutOfBoundsException();  }  for (int i=0; i < progArray.length; i++) {    if (progArray[i] == null) {      throw new NullPointerException("An element of progArray shouldn't be empty.");    }  }  if (envp == null) {    envp=new String[0];  } else   if (envp.length > 0) {    for (int i=0; i < envp.length; i++) {      if (envp[i] == null) {        throw new NullPointerException("An element of envp shouldn't be empty.");      }    }  }  return SystemProcess.create(progArray,envp,directory);}  }
class C{  final boolean seqNumIsHuge(){  return (block.length != 0 && block[0] == (byte)0xFF && block[1] == (byte)0xFF);}  }
class C{  public static String stringFor(int n){switch (n) {case cudaKeyValuePair:    return "cudaKeyValuePair";case cudaCSV:  return "cudaCSV";}return "INVALID cudaOutputMode: " + n;}  }
class C{  @Override public void validate(){}  }
class C{  private String timestamp(){  String timestamp=null;  Calendar cal=Calendar.getInstance();  DateFormat dfm=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");  dfm.setTimeZone(TimeZone.getTimeZone("GMT"));  timestamp=dfm.format(cal.getTime());  return timestamp;}  }
class C{  public static ByteBuffer convertTsvToByteBuffer(String starsFileName,float radius){  try {    ArrayList<Float> tmpBuffer=new ArrayList<Float>();    InputStream starsStream=StarsConvertor.class.getResourceAsStream("/" + starsFileName);    if (starsStream == null) {      File starsFile=new File(starsFileName);      if (starsFile.exists()) {        starsStream=new FileInputStream(starsFile);      }    }    if (starsStream == null)     return null;    BufferedReader starsReader=new BufferedReader(new InputStreamReader(starsStream));    String line;    int idxRAhms=2;    int idxDEdms=3;    int idxVmag=4;    int idxBV=5;    double longitude;    double latitude;    boolean isData=false;    tmpBuffer.add(radius);    while ((line=starsReader.readLine()) != null) {      if (line.length() < 3)       continue;      if (line.substring(0,1).equals("#"))       continue;      if (isData) {        String[] starData=line.trim().split(";");        String RAhms, DEdms, Vmag, BV;        RAhms=starData[idxRAhms];        DEdms=starData[idxDEdms];        Vmag=starData[idxVmag];        BV=idxBV < starData.length ? starData[idxBV] : "";        double RAh=Double.parseDouble(RAhms.substring(0,2));        double RAm=Double.parseDouble(RAhms.substring(3,5));        double RAs=Double.parseDouble(RAhms.substring(6));        longitude=(RAh * 15) + (RAm * .25) + (RAs * 0.0041666) - 180;        String DEsign=DEdms.substring(0,1);        double DEd=Double.parseDouble(DEdms.substring(1,3));        double DEm=Double.parseDouble(DEdms.substring(4,6));        double DEs=Double.parseDouble(DEdms.substring(7));        latitude=DEd + (DEm / 60) + (DEs / 3600);        if (DEsign.equals("-"))         latitude*=-1;        double VM=Double.parseDouble(Vmag);        double Vdec=255 - ((VM + 1.5) * 255 / 10);        if (Vdec > 255)         Vdec=255;        Vdec/=255;        double BVdec;        try {          BVdec=Double.parseDouble(BV);        } catch (        Exception e) {          BVdec=0;        }        Color color=BVColor(BVdec);        tmpBuffer.add(color.getRed() / 255f * (float)Vdec);        tmpBuffer.add(color.getGreen() / 255f * (float)Vdec);        tmpBuffer.add(color.getBlue() / 255f * (float)Vdec);        Vec4 pos=SphericalToCartesian(latitude,longitude,radius);        tmpBuffer.add((float)pos.getX());        tmpBuffer.add((float)pos.getY());        tmpBuffer.add((float)pos.getZ());      }      if (line.substring(0,3).equals("---"))       isData=true;    }    starsReader.close();    ByteBuffer buf=Buffers.newDirectByteBuffer(tmpBuffer.size() * 4);    buf.order(ByteOrder.LITTLE_ENDIAN);    FloatBuffer fBuf=buf.asFloatBuffer();    for (    Float fVal : tmpBuffer) {      fBuf.put(fVal);    }    buf.rewind();    return buf;  } catch (  IOException e) {    String message="IOException while loading stars data from " + starsFileName;    Logging.logger().severe(message);  }catch (  Exception e) {    String message="Error while loading stars data from " + starsFileName;    Logging.logger().severe(message);  }  return null;}  }
class C{  public static boolean isAccessModifier(String str){  return str.equals("static") || str.equals("public") || str.equals("protected")|| str.equals("private")|| str.equals("final")|| str.equals("transient");}  }
class C{  public ConnectionConsumer(RTMPConnection conn,int videoChannel,int audioChannel,int dataChannel){  log.debug("Channel ids - video: {} audio: {} data: {}",new Object[]{videoChannel,audioChannel,dataChannel});  this.conn=conn;  this.video=conn.getChannel(videoChannel);  this.audio=conn.getChannel(audioChannel);  this.data=conn.getChannel(dataChannel);}  }
class C{  @Override public int graphType(){  return Drawable.TREE;}  }
class C{  public AsyncResult SetTriggeringAsync(SetTriggeringRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.185 -0500",hash_original_method="038CE78D7B15BBF2D949EA22EA3CF00F",hash_generated_method="8CB802138D26B533B0BAF7DCC442BB43") public void writeToParcel(Parcel dest,int flags){  if (mHost != null) {    dest.writeByte((byte)1);    dest.writeString(mHost);    dest.writeInt(mPort);  } else {    dest.writeByte((byte)0);  }  dest.writeString(mExclusionList);  dest.writeStringArray(mParsedExclusionList);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.INLINE_TAG__TITLE:    setTitle((TagTitle)null);  return;case DomPackage.INLINE_TAG__VALUES:getValues().clear();return;case DomPackage.INLINE_TAG__TAG_DEFINITION:setTagDefinition(TAG_DEFINITION_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public TagException(Tag tag,String message,Throwable cause){  super(tag + " " + message,cause);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void ensureCapacity(int newCapacity){  int oldCapacity=data.length;  if (newCapacity <= oldCapacity) {    return;  }  if (size == 0) {    threshold=calculateThreshold(newCapacity,loadFactor);    data=new HashEntry[newCapacity];  } else {    HashEntry<K,V> oldEntries[]=data;    HashEntry<K,V> newEntries[]=new HashEntry[newCapacity];    modCount++;    for (int i=oldCapacity - 1; i >= 0; i--) {      HashEntry<K,V> entry=oldEntries[i];      if (entry != null) {        oldEntries[i]=null;        do {          HashEntry<K,V> next=entry.next;          int index=hashIndex(entry.hashCode,newCapacity);          entry.next=newEntries[index];          newEntries[index]=entry;          entry=next;        } while (entry != null);      }    }    threshold=calculateThreshold(newCapacity,loadFactor);    data=newEntries;  }}  }
class C{  @Override public void internalRender(GL10 gl,PLIRenderer renderer){  PLITexture previewTexture=this.getPreviewTextures()[0], texture=this.getTextures()[0];  boolean textureIsValid=(texture != null && texture.getTextureId(gl) != 0);  if (textureIsValid || (previewTexture != null && previewTexture.getTextureId(gl) != 0)) {    gl.glEnable(GL10.GL_TEXTURE_2D);    int divs;    if (textureIsValid) {      divs=this.getDivs();      gl.glBindTexture(GL10.GL_TEXTURE_2D,texture.getTextureId(gl));      if (previewTexture != null)       this.removePreviewTextureAtIndex(0,true);    } else {      divs=this.getPreviewDivs();      gl.glBindTexture(GL10.GL_TEXTURE_2D,previewTexture.getTextureId(gl));    }    GLUES.gluSphere(gl,this.getQuadric(),PLConstants.kPanoramaRadius,divs,divs);    gl.glDisable(GL10.GL_TEXTURE_2D);  }}  }
class C{  public FullscreenParallaxPage recursive(boolean recursive){  this.parallaxRecursive=recursive;  return this;}  }
class C{  private void alignLabels(){  final int height=m_selectorLabel.getPreferredSize().height;  int width=m_selectorLabel.getPreferredSize().width;  if (m_editor != null) {    final int labelWidth=m_editor.getLabelWidth();    if (width < labelWidth) {      width=labelWidth;    } else {      m_editor.setLabelWidth(width);    }  }  final Dimension dimension=new Dimension(width,height);  m_selectorLabel.setPreferredSize(dimension);  m_selectorLabel.setSize(dimension);}  }
class C{  public synchronized void print(){  try {    if (null == mQueue || mQueue.size() <= 0) {      return;    }    if (null == mAdapter) {      mAdapter=BluetoothAdapter.getDefaultAdapter();    }    if (null == mBtService) {      mBtService=new BtService(mContext);    }    if (mBtService.getState() != BtService.STATE_CONNECTED) {      if (!TextUtils.isEmpty(AppInfo.btAddress)) {        BluetoothDevice device=mAdapter.getRemoteDevice(AppInfo.btAddress);        mBtService.connect(device);        return;      }    }    while (mQueue.size() > 0) {      mBtService.write(mQueue.get(0));      mQueue.remove(0);    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private GenerationContext(){}  }
class C{  @RequestMapping(method=RequestMethod.DELETE,value="/{tag}") public JsonResponse remove(@PathVariable String tag) throws ServiceException, CheckException {  User user=authentificationUtils.getAuthentificatedUser();  int count=applicationService.countApplicationsForImage(cuInstanceName,user,tag);  if (count > 0) {    throw new CheckException("At least one application uses this template. You must delete it before.");  }  snapshotService.remove(user.getLogin() + "-" + tag);  return new HttpOk();}  }
class C{  protected void close(){  reader.close();}  }
class C{  public void newDataAvailable(TableModelEvent event){  fireTableChanged(event);}  }
class C{  public static void main(String[] args){  if (args.length == 1) {    int step=Integer.parseInt(args[0]);    PScout pscout=new PScout();switch (step) {case 1:      LOGGER.log(Level.INFO,Statistics.getTime() + "\tExtracting Jars...");    pscout.extractJars();  LOGGER.log(Level.INFO,Statistics.getTime() + "\tDone!");break;case 2:LOGGER.log(Level.INFO,Statistics.getTime() + "\tCHCG Start...");pscout.buildClassHierarchyCallGraph();LOGGER.log(Level.INFO,Statistics.getTime() + "\tDone!");break;case 3:LOGGER.log(Level.INFO,Statistics.getTime() + "\tAnalyze Permission Start...");pscout.analyzeInvocations();LOGGER.log(Level.INFO,Statistics.getTime() + "\tDone!");break;default :break;}pscout.shutdown();} else {System.out.println("Usage: Pscout <step>\n Steps: 1 - extract jar   2 - build class hierarchy & call graph    3 - analyze permission invocations\n");}}  }
class C{  public static void fail(){  fail(null);}  }
class C{  private void placeComponent(boolean rtl,Constraint con,int x,int y,int width,int height){  con.parent.setX(x);  con.parent.setY(y);  con.parent.setWidth(width);  con.parent.setHeight(height);  Dimension pref=con.parent.getPreferredSize();  int pWidth=pref.getWidth();  int pHeight=pref.getHeight();  if (pWidth < width) {    int d=(width - pWidth);    int a=con.align;    if (rtl) {switch (a) {case Component.LEFT:        a=Component.RIGHT;      break;case Component.RIGHT:    a=Component.LEFT;  break;}}switch (a) {case Component.LEFT:con.parent.setX(x);con.parent.setWidth(width - d);break;case Component.RIGHT:con.parent.setX(x + d);con.parent.setWidth(width - d);break;case Component.CENTER:con.parent.setX(x + d / 2);con.parent.setWidth(width - d);break;}}if (pHeight < height) {int d=(height - pHeight);switch (con.valign) {case Component.TOP:con.parent.setY(y);con.parent.setHeight(height - d);break;case Component.BOTTOM:con.parent.setY(y + d);con.parent.setHeight(height - d);break;case Component.CENTER:con.parent.setY(y + d / 2);con.parent.setHeight(height - d);break;}}}  }
class C{  public Regexp(String s){  exp=s;  int firstst=s.indexOf('*');  int lastst=s.lastIndexOf('*');  if (firstst < 0) {    totalLen=s.length();    exact=true;  } else {    prefixLen=firstst;    if (firstst == 0)     prefix=null; else     prefix=s.substring(0,firstst);    suffixLen=s.length() - lastst - 1;    if (suffixLen == 0)     suffix=null; else     suffix=s.substring(lastst + 1);    int nmids=0;    int pos=firstst;    while (pos < lastst && pos >= 0) {      nmids++;      pos=s.indexOf('*',pos + 1);    }    totalLen=prefixLen + suffixLen;    if (nmids > 0) {      mids=new String[nmids];      pos=firstst;      for (int i=0; i < nmids; i++) {        pos++;        int npos=s.indexOf('*',pos);        if (pos < npos) {          mids[i]=s.substring(pos,npos);          totalLen+=mids[i].length();        }        pos=npos;      }    }  }}  }
class C{  @SuppressWarnings("rawtypes") public boolean contains(Class exType){  if (exType == null) {    return false;  }  if (exType.isInstance(this)) {    return true;  }  Throwable cause=getCause();  if (cause == this) {    return false;  }  if (cause instanceof NestedException) {    return ((NestedException)cause).contains(exType);  } else {    while (cause != null) {      if (exType.isInstance(cause)) {        return true;      }      if (cause.getCause() == cause) {        break;      }      cause=cause.getCause();    }    return false;  }}  }
class C{  public SubscriptionStateException(String message,SubscriptionStateExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  @Override protected synchronized boolean is(String word){  return m_Words.contains(word.trim().toLowerCase());}  }
class C{  public String hmset(final String key,final Map<String,String> hash){  checkIsInMulti();  client.hmset(key,hash);  return client.getStatusCodeReply();}  }
class C{  private static String arrayToString(int[] array){  StringBuilder result=new StringBuilder("[");  for (int index=0; index < array.length - 1; ++index) {    result.append(array[index]).append(",");  }  if (array.length > 0) {    result.append(array[array.length - 1]);  }  result.append("]");  return result.toString();}  }
class C{  private void computeNodeWeights(LSTNode n){  n.header.setExecutionFrequency(1f);  int idx=0;  while (topOrder[idx] != n.header)   idx++;  for (int numNodes=n.loop.populationCount(); numNodes > 0; ) {    if (idx >= topOrder.length) {      numNodes--;      continue;    }    BasicBlock cur=topOrder[idx++];    if (cur == null) {      numNodes--;      continue;    }    if (!n.loop.get(cur.getNumber()))     continue;    LSTNode other=lst.getLoop(cur);    if (other != n) {      if (cur == other.header) {        numNodes-=other.loop.populationCount();      }      continue;    }    numNodes--;    cur.setScratchFlag();    float weight=cur.getExecutionFrequency();    for (WeightedBranchTargets wbt=new WeightedBranchTargets(cur); wbt.hasMoreElements(); wbt.advance()) {      processEdge(n,cur,wbt.curBlock(),wbt.curWeight(),weight);    }  }}  }
class C{  public void restoreFilesFromDirectory(File directory) throws IOException {  log.debug("restoring files from directory {}",directory.getAbsolutePath());  copyBackupSet(directory,getOperationsRoot());}  }
class C{  public ClassPool registerClassLoader(ClassLoader ucl){synchronized (registeredCLs) {    if (registeredCLs.containsKey(ucl)) {      return (ClassPool)registeredCLs.get(ucl);    }    ScopedClassPool pool=createScopedClassPool(ucl,classpool);    registeredCLs.put(ucl,pool);    return pool;  }}  }
class C{  public boolean isSentByInitiator(){  return sentByInitiator;}  }
class C{  private com.amazonaws.services.ec2.model.Instance fakeInstance(){  return new com.amazonaws.services.ec2.model.Instance().withPrivateDnsName("any").withState(new InstanceState().withName("running"));}  }
class C{  public SortedSetSortField(String field,boolean reverse){  this(field,reverse,SortedSetSelector.Type.MIN);}  }
class C{  public int incAndGetLoopCnt(){  return loopCnt.incrementAndGet();}  }
class C{  @Override public void onDone(){  mOverlay.remove(mFaceGraphic);}  }
class C{  public int indexOf(Node elem){  runTo(-1);  if (null == m_map)   return -1;  for (int i=0; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(elem))     return i;  }  return -1;}  }
class C{  public static ReactiveNetwork create(){  return new ReactiveNetwork();}  }
