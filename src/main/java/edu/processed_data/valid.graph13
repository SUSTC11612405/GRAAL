class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.ConfirmationMethodElement createConfirmationMethodElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConfirmationMethodElementImpl(value);}  }
class C{  public boolean isForceOnError(){  return forceOnErrorArg.isPresent();}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.TransformType.XPath createTransformTypeXPath() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.TransformTypeImpl.XPathImpl();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String pattern=getStringOptionValue(IArgument.FILTER);  String agentGroupName=getStringOptionValue(IArgument.AGENT_GROUP_NAME);  String[] params={realm,agentGroupName};  if ((pattern == null) || (pattern.trim().length() == 0)) {    pattern="*";  }  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_AGENT_GROUP_MEMBERS",params);    AMIdentity amid=new AMIdentity(adminSSOToken,agentGroupName,IdType.AGENTGROUP,realm,null);    if (!amid.isExists()) {      String[] args={realm,agentGroupName,"agent group did not exist"};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT_GROUP_MEMBERS",args);      Object[] p={agentGroupName};      String msg=MessageFormat.format(getResourceString("list-agent-group-member-group-does-not-exist"),p);      throw new CLIException(msg,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    Set members=amid.getMembers(IdType.AGENT);    if ((members != null) && !members.isEmpty()) {      String msg=getResourceString("format-list-agent-group-members-results");      String[] arg={"",""};      for (Iterator i=members.iterator(); i.hasNext(); ) {        AMIdentity a=(AMIdentity)i.next();        if (DisplayUtils.wildcardMatch(a.getName(),pattern)) {          arg[0]=a.getName();          arg[1]=a.getUniversalId();          outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));        }      }    } else {      outputWriter.printlnMessage(getResourceString("list-agent-group-members-no-members"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SHOW_AGENT_GROUP_MEMBERS",params);  } catch (  IdRepoException e) {    String[] args={realm,agentGroupName,e.getMessage()};    debugError("ListAgentGroupMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT_GROUP_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentGroupName,e.getMessage()};    debugError("ListAgentGroupMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT_GROUP_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void handleTblDSAttributeMapListButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    WSPPServiceDSAttributeMapListAddViewBean vb=(WSPPServiceDSAttributeMapListAddViewBean)getViewBean(WSPPServiceDSAttributeMapListAddViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public TelURLImpl(){  this.scheme="tel";}  }
class C{  public ObjectStreamField(String name,Class<?> type){  this(name,type,false);}  }
class C{  static float powerOfTwoF(int n){  assert (n >= FloatConsts.MIN_EXPONENT && n <= FloatConsts.MAX_EXPONENT);  return Float.intBitsToFloat(((n + FloatConsts.EXP_BIAS) << (FloatConsts.SIGNIFICAND_WIDTH - 1)) & FloatConsts.EXP_BIT_MASK);}  }
class C{  public Job(String jobName,Runnable command){  this.jobName=jobName;  this.command=command;}  }
class C{  private void addGlobalAttributesToIntent(Intent intent){  if (!intent.hasExtra(Event.ATTRIBUTE_TIME)) {    insertTimeStamp(intent);  }  if (!intent.hasExtra(Event.ATTRIBUTE_LOCATION)) {    insertLocationData(intent);  }}  }
class C{  public void createAgent(String realmName,String name,String type,String password,String choice) throws AMConsoleException {  String[] params={realmName,name,type};  try {    logEvent("ATTEMPT_CREATE_AGENT",params);    Map map=AgentConfiguration.getDefaultValues(type,false);    Set set=new HashSet(2);    map.put(AgentConfiguration.ATTR_NAME_PWD,set);    set.add(password);    if ((choice != null) && (choice.equalsIgnoreCase(AgentConfiguration.VAL_CONFIG_REPO_LOCAL))) {      Set newset=new HashSet(2);      newset.add(AgentConfiguration.VAL_CONFIG_REPO_LOCAL);      map.put(AgentConfiguration.ATTR_CONFIG_REPO,newset);    }    AgentConfiguration.createAgent(getUserSSOToken(),realmName,name,type,map);    logEvent("SUCCEED_CREATE_AGENT",params);  } catch (  ConfigurationException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  @Override public void endAccess(){  isNew=false;  if (LAST_ACCESS_AT_START) {    this.lastAccessedTime=this.thisAccessedTime;    this.thisAccessedTime=System.currentTimeMillis();  } else {    this.thisAccessedTime=System.currentTimeMillis();    this.lastAccessedTime=this.thisAccessedTime;  }  if (ACTIVITY_CHECK) {    accessCount.decrementAndGet();  }}  }
class C{  public boolean validate(Set<String> values){  if (values.isEmpty()) {    return true;  }  Set<String> idSet=new HashSet<>();  Set<String> urlSet=new HashSet<>();  boolean serverLookup=getServerDetails();  for (  String value : values) {    StringTokenizer tok=new StringTokenizer(value,"|");    if (tok.countTokens() != 2) {      return false;    }    String url=tok.nextToken();    String id=tok.nextToken();    int byteLength=id.getBytes().length;    if (byteLength != 2 || idSet.contains(id)) {      return false;    } else {      idSet.add(id);    }    if (urlSet.contains(url)) {      return false;    } else {      urlSet.add(url);    }    if (serverLookup) {      if (serverAddrSet.contains(url)) {        return false;      }      if (serverIdSet.contains(id)) {        return false;      }    } else {      if (debug.messageEnabled()) {        debug.message("Unable to get server list information. " + "Server validation cannot be performed");      }    }  }  return true;}  }
class C{  @Override public String toString(){  return ruleString;}  }
class C{  public String toStringImpl(){  return id;}  }
class C{  RMIServerImpl newServer() throws IOException {  final boolean iiop=isIiopURL(address,true);  final int port;  if (address == null)   port=0; else   port=address.getPort();  if (iiop)   return newIIOPServer(attributes); else   return newJRMPServer(attributes,port);}  }
class C{  public static Foo removeByUUID_G(java.lang.String uuid,long groupId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().removeByUUID_G(uuid,groupId);}  }
class C{  static long divWord(long n,int d){  long dLong=d & LONG_MASK;  long r;  long q;  if (dLong == 1) {    q=(int)n;    r=0;    return (r << 32) | (q & LONG_MASK);  }  q=(n >>> 1) / (dLong >>> 1);  r=n - q * dLong;  while (r < 0) {    r+=dLong;    q--;  }  while (r >= dLong) {    r-=dLong;    q++;  }  return (r << 32) | (q & LONG_MASK);}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  public IdleTimeLimitThread(){  super("Idle Time Limit Thread");  setDaemon(true);  shutdownRequested=false;  DirectoryServer.registerShutdownListener(this);}  }
class C{  final void updateHead(Node<E> h,Node<E> p){  if (h != p && casHead(h,p))   h.lazySetNext(h);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  metaAlias=getStringOptionValue(ARGUMENT_METADATA);  bulkFedData=getStringOptionValue(ARGUMENT_BULK_DATA);  spec=FederationManager.getIDFFSubCommandSpecification(rc);  String[] params={metaAlias,bulkFedData,spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IMPORT_BULK_FED_DATA",params);  try {    if (spec.equals(FederationManager.DEFAULT_SPECIFICATION)) {      saml2GetRoleAndEntityId();      Map nameIds=new HashMap();      validateFile(nameIds);      handleSAML2Request(nameIds);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_IMPORT_BULK_FED_DATA",params);    } else     if (spec.equals(FedCLIConstants.IDFF_SPECIFICATION)) {      idffGetRoleAndEntityId();      Map nameIds=new HashMap();      validateFile(nameIds);      handleIDFFRequest(nameIds);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_IMPORT_BULK_FED_DATA",params);    } else {      throw new CLIException(getResourceString("unsupported-specification"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  CLIException e) {    String[] args={metaAlias,bulkFedData,spec,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IMPORT_BULK_FED_DATA",args);    throw e;  }}  }
class C{  public boolean verify(X509Certificate cert,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CertificateExpiredException, CertificateNotYetValidException, CMSException {  return verify(cert,CMSUtils.getProvider(sigProvider));}  }
class C{  public SkipPageException(){  super();}  }
class C{  protected boolean update(String ssoId,Principal principal,String authType,String username,String password){  SingleSignOnEntry sso=cache.get(ssoId);  if (sso != null && !sso.getCanReauthenticate()) {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.update",ssoId,authType));    }    sso.updateCredentials(principal,authType,username,password);    return true;  }  return false;}  }
class C{  public boolean isADS(){  return isADS;}  }
class C{  public void generateUUID(){  byte[] data=new byte[16];  UUIDGenerator.randomUUID(USE_SECURE_RANDOM_FOR_UUID,data,0);  setUniqueId(data);}  }
class C{  public ItemStack toItemStack(){  return new ItemStack(type,0,data);}  }
class C{  public final int length(){  return array.length;}  }
class C{  public BeanContextServiceRevokedEvent(BeanContextServices bcs,Class sc,boolean invalidate){  super((BeanContext)bcs);  serviceClass=sc;  invalidateRefs=invalidate;}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public void windowLostFocus(WindowEvent e){}  }
class C{  private void flushMyWriter(){  if (m_writer != null) {    try {      m_writer.flush();    } catch (    IOException ioe) {    }  }}  }
class C{  public boolean equals(Object o){  if (!(o instanceof FormatInformation)) {    return false;  }  FormatInformation other=(FormatInformation)o;  return this.errorCorrectionLevel == other.errorCorrectionLevel && this.dataMask == other.dataMask;}  }
class C{  protected void tearDown(){  objArray=null;  objArray2=null;  hm=null;}  }
class C{  public NewServiceWrapper(String serviceName,Map<String,ServiceSchemaModificationWrapper> modifiedSchemaMap,Document document){  this.serviceName=serviceName;  this.modifiedSchemaMap=modifiedSchemaMap;  this.document=document;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  fullyLock();  try {    s.defaultWriteObject();    for (Node<E> p=head.next; p != null; p=p.next)     s.writeObject(p.item);    s.writeObject(null);  }  finally {    fullyUnlock();  }}  }
class C{  private static Unmarshaller assertionFailed() throws JAXBException {  throw new JAXBException(Messages.format(Messages.RESULT_NULL_CONTEXT));}  }
class C{  protected void bcsPreDeserializationHook(ObjectInputStream ois) throws IOException, ClassNotFoundException {}  }
class C{  public FrameBodyTSRC(){}  }
class C{  private boolean performSessionDestroyIfNecessary(InternalSession session){switch (session.checkSessionUpdate()) {case NO_CHANGE:    return false;case DESTROY:  delete(session);session.changeStateWithoutNotify(SessionState.DESTROYED);sessionNotificationSender.sendEvent(session,SessionEventType.DESTROY);return true;case MAX_TIMEOUT:session.changeStateAndNotify(SessionEventType.MAX_TIMEOUT);sessionAuditor.auditActivity(session.toSessionInfo(),AM_SESSION_MAX_TIMED_OUT);return false;case IDLE_TIMEOUT:session.changeStateAndNotify(SessionEventType.IDLE_TIMEOUT);sessionAuditor.auditActivity(session.toSessionInfo(),AM_SESSION_IDLE_TIMED_OUT);return false;default :return false;}}  }
class C{  private String[] newLDIFEntries(){  return new String[]{"dn: " + baseDN + "\n"+ "objectClass: top\n"+ "objectClass: organization\n"+ "entryUUID: 21111111-1111-1111-1111-111111111111\n"+ "\n","dn: ou=People," + baseDN + "\n"+ "objectClass: top\n"+ "objectClass: organizationalUnit\n"+ "entryUUID: 21111111-1111-1111-1111-111111111112\n"+ "\n","dn: cn=Fiona Jensen,ou=people," + baseDN + "\n"+ "objectclass: top\n"+ "objectclass: person\n"+ "objectclass: organizationalPerson\n"+ "objectclass: inetOrgPerson\n"+ "cn: Fiona Jensen\n"+ "sn: Jensen\n"+ "uid: fiona\n"+ "telephonenumber: +1 408 555 1212\n"+ "entryUUID: 21111111-1111-1111-1111-111111111113\n"+ "\n","dn: cn=Robert Langman,ou=people," + baseDN + "\n"+ "objectclass: top\n"+ "objectclass: person\n"+ "objectclass: organizationalPerson\n"+ "objectclass: inetOrgPerson\n"+ "cn: Robert Langman\n"+ "sn: Langman\n"+ "uid: robert\n"+ "telephonenumber: +1 408 555 1213\n"+ "entryUUID: 21111111-1111-1111-1111-111111111114\n"+ "\n"};}  }
class C{  public AttributeSet copyAttributes(){  return this;}  }
class C{  public static void convertToGnuStepASCII(File in,File out) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  NSObject root=parse(in);  if (root instanceof NSDictionary) {    saveAsGnuStepASCII((NSDictionary)root,out);  } else   if (root instanceof NSArray) {    saveAsGnuStepASCII((NSArray)root,out);  } else {    throw new PropertyListFormatException("The root of the given input property list " + "is neither a Dictionary nor an Array!");  }}  }
class C{  public void testHasFeatureCore() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("staff",builder);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("core","2.0");  assertTrue("domimplementationFeaturecoreAssert",state);}  }
class C{  private void appendHeader(Operation operation,StringBuilder buffer){  buffer.append("# ");  buffer.append(TimeThread.getLocalTime());  buffer.append("; conn=");  buffer.append(operation.getConnectionID());  buffer.append("; op=");  buffer.append(operation.getOperationID());  buffer.append(EOL);}  }
class C{  private String makeEscaped(String name){  int length=name.length();  if (length == 0) {    return name;  }  StringBuilder buf=new StringBuilder(length * 2);  for (int index=0; index < length; index++) {    char ch=name.charAt(index);switch (ch) {case ' ':      if (index == 0 || index == (length - 1)) {        buf.append('\\');      }    buf.append(' ');  break;case '"':case '\\':hasQE=true;buf.append('\\');buf.append(ch);break;case ',':case '+':case '<':case '>':case ';':case '#':case '=':buf.append('\\');buf.append(ch);break;default :buf.append(ch);break;}}return buf.toString();}  }
class C{  @Override public boolean accept(ClusterMessage msg){  return (msg instanceof SessionMessage);}  }
class C{  private static int[][] parse(int[][] members){  Vector ranges=new Vector();  int n=(members == null ? 0 : members.length);  for (int i=0; i < n; ++i) {    int lb, ub;    if (members[i].length == 1) {      lb=ub=members[i][0];    } else     if (members[i].length == 2) {      lb=members[i][0];      ub=members[i][1];    } else {      throw new IllegalArgumentException();    }    if (lb <= ub && lb < 0) {      throw new IllegalArgumentException();    }    accumulate(ranges,lb,ub);  }  return canonicalArrayForm(ranges);}  }
class C{  public void paintPanelBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private static Attribute makeAttrFromServerGroupProperty(ServerGroupProperty property,Object value){switch (property) {case MEMBERS:    return new LinkedAttribute(ServerGroupProperty.MEMBERS.getAttributeName(),(Collection<?>)value);default :  return new LinkedAttribute(property.getAttributeName(),value);}}  }
class C{  public boolean add(E e){  return map.put(e,PRESENT) == null;}  }
class C{  public void testAddItalicSpan(){  mRichTextView.formatSpan(0,5,RichTextView.FormatType.ITALIC);  Object[] spans=mRichTextView.getSpans();  assertEquals(1,spans.length);  Object firstSpan=spans[0];  assertTrue(firstSpan instanceof StyleSpan);  assertTrue(((StyleSpan)firstSpan).getStyle() == Typeface.ITALIC);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.KeyStorageType createKeyStorageType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyStorageTypeImpl();}  }
class C{  public void clearAccessibleSelection(){  MenuElement old[]=MenuSelectionManager.defaultManager().getSelectedPath();  if (old != null) {    for (int j=0; j < old.length; j++) {      if (old[j] == JMenu.this) {        MenuElement me[]=new MenuElement[j + 1];        System.arraycopy(old,0,me,0,j);        me[j]=JMenu.this.getPopupMenu();        MenuSelectionManager.defaultManager().setSelectedPath(me);      }    }  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.usa.com";  String qualifiedName="dmstc:domestic";  Document doc;  Node arg;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node retnode;  String value;  doc=(Document)load("staffNS",true);  arg=doc.createAttributeNS(namespaceURI,qualifiedName);  arg.setNodeValue("newValue");  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(0);  attributes=testAddress.getAttributes();  retnode=attributes.setNamedItemNS(arg);  value=retnode.getNodeValue();  assertEquals("throw_Equals","Yes",value);}  }
class C{  public void test_ConstructorLjava_lang_String(){  Locale x=new Locale("xx");  assertTrue("Failed to create Locale",x.getVariant().equals(""));  try {    new Locale(null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public void uninstallUI(JComponent c){}  }
class C{  public static String removeJSessionId(String str){  if (!StringUtils.isEmpty(str) && StringUtils.contains(str.toLowerCase(),";jsessionid")) {    return str.substring(0,StringUtils.indexOf(str,";jsessionid"));  }  return str;}  }
class C{  public static RationaleDialog newInstance(int requestCode,boolean finishActivity){  Bundle arguments=new Bundle();  arguments.putInt(ARGUMENT_PERMISSION_REQUEST_CODE,requestCode);  arguments.putBoolean(ARGUMENT_FINISH_ACTIVITY,finishActivity);  RationaleDialog dialog=new RationaleDialog();  dialog.setArguments(arguments);  return dialog;}  }
class C{  public InitializeTargetMsg(DN baseDN,int serverID,int destination,int requestorID,long entryCount,int initWindow){  super(serverID,destination);  this.requestorID=requestorID;  this.baseDN=baseDN;  this.entryCount=entryCount;  this.initWindow=initWindow;}  }
class C{  public byte[] perform(byte[] data) throws TokenStrategyFailedException {  return apply(strategies,true,data);}  }
class C{  private static ObjectMapper createObjectMapper(){  ObjectMapper mapper=new ObjectMapper();  mapper.enable(SerializationFeature.INDENT_OUTPUT);  return mapper;}  }
class C{  public Entity defEntity(String name,int type,int ch){  char data[]={(char)ch};  return defineEntity(name,type,data);}  }
class C{  private boolean verifyResponseSignature(HttpServletRequest request,ProviderDescriptorType remoteDescriptor,String remoteEntityId,boolean isIDP) throws SAMLException, FSException {  FSUtils.debug.message("Entered FSRegistrationRequestServlet::verifyRegistrationSignature");  X509Certificate cert=KeyUtil.getVerificationCert(remoteDescriptor,remoteEntityId,isIDP);  if (cert == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSRegistrationRequestServlet.verifyRegistrationSignature: " + "couldn't obtain this site's cert.");    }    throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT));  }  boolean isValidSign=FSSignatureUtil.verifyRequestSignature(request,cert);  if (!isValidSign) {    FSUtils.debug.error("Registration response is not properly signed");    return false;  } else {    FSUtils.debug.message("Registration response is properly signed");    return true;  }}  }
class C{  public boolean addAll(AttributeList list){  return (super.addAll(list));}  }
class C{  @DataProvider private static Object[][] okResourceResponses(){  return new Object[][]{{new Response(OK)},{new Response(FOUND)},{new Response(MOVED_PERMANENTLY)},{new Response(CREATED)}};}  }
class C{  void chooseFirstProvider(){  if (sigSpi != null) {    return;  }synchronized (lock) {    if (sigSpi != null) {      return;    }    if (debug != null) {      int w=--warnCount;      if (w >= 0) {        debug.println("Signature.init() not first method " + "called, disabling delayed provider selection");        if (w == 0) {          debug.println("Further warnings of this type will " + "be suppressed");        }        new Exception("Call trace").printStackTrace();      }    }    Exception lastException=null;    while ((firstService != null) || serviceIterator.hasNext()) {      Service s;      if (firstService != null) {        s=firstService;        firstService=null;      } else {        s=serviceIterator.next();      }      if (isSpi(s) == false) {        continue;      }      try {        sigSpi=newInstance(s);        provider=s.getProvider();        firstService=null;        serviceIterator=null;        return;      } catch (      NoSuchAlgorithmException e) {        lastException=e;      }    }    ProviderException e=new ProviderException("Could not construct SignatureSpi instance");    if (lastException != null) {      e.initCause(lastException);    }    throw e;  }}  }
class C{  public final boolean equals(Object obj){  return ((CharKey)obj).m_char == m_char;}  }
class C{  public static Application policyToApplication(Policy policy) throws EntitlementException {  String applicationName=getApplicationNameFromPolicy(policy);  Application application=new Application();  application.setName(applicationName);  application.setDescription(generateDefaultApplicationDescription(applicationName));  application.setEntitlementCombiner(getRuleCombiningAlg(applicationName));  application.setSubjects(EntitlementUtils.getSubjectsShortNames());  application.setConditions(EntitlementUtils.getConditionsShortNames());  return application;}  }
class C{  public void addAttributes(AttributeSet attr){  if (attr instanceof SmallAttributeSet) {    Object[] tbl=((SmallAttributeSet)attr).attributes;    int n=tbl.length;    for (int i=0; i < n; i+=2) {      addAttribute(tbl[i],tbl[i + 1]);    }  } else {    Enumeration names=attr.getAttributeNames();    while (names.hasMoreElements()) {      Object name=names.nextElement();      addAttribute(name,attr.getAttribute(name));    }  }}  }
class C{  private float calculateDeltaScale(float t){  float zoom=startZoom + t * (targetZoom - startZoom);  return zoom / normalizedScale;}  }
class C{  @NonNull public static Agera generate(@NonNull Binder<Updatable,Condition> generator){  return new AgeraGenerateIf(generator);}  }
class C{  public void notifyListeners(ProgressStep current,Integer ratio,LocalizableMessage currentPhaseSummary,LocalizableMessage newLogDetail){  ProgressUpdateEvent ev=new ProgressUpdateEvent(current,ratio,currentPhaseSummary,newLogDetail);  for (  ProgressUpdateListener l : listeners) {    l.progressUpdate(ev);  }}  }
class C{  protected static boolean isObjectClassPresent(Set objectClasses,String objectClass){  if (objectClasses != null && !objectClasses.isEmpty()) {    Iterator itr=objectClasses.iterator();    while (itr.hasNext()) {      String serviceOC=(String)itr.next();      if (serviceOC.equalsIgnoreCase(objectClass)) {        return true;      }    }  }  return false;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiDesktopIconUI();  return MultiLookAndFeel.createUIs(mui,((MultiDesktopIconUI)mui).uis,a);}  }
class C{  @Override public String toString(){  return name + ": " + cipherSuiteCode[0]+ " "+ cipherSuiteCode[1];}  }
class C{  public void testSetBitNegativeInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=44;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public Elevation(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public void loadLocal(final int local,final Type type){  setLocalType(local,type);  loadInsn(type,local);}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ZoneOffset) {    return totalSeconds == ((ZoneOffset)obj).totalSeconds;  }  return false;}  }
class C{  private void parse_array_exp() throws SyntaxException {  LineCol lineCol=current.getLineCol();  nextNode(false);  if (current instanceof Element) {    expecting("]",current.previous(),current,err);    parsedExps.push(new AST.ArrayExp(Collections.emptyList(),lineCol));    nextNode(true);  } else {    expecting("]",current,current.next() == null ? null : current.next().next(),err);    ElementStartNode startNode=(ElementStartNode)current;    Node linked=startNode.getLinkedNode();    boolean isMap=false;    while (linked != null) {      if (linked instanceof Element && ((Element)linked).getContent().equals(":")) {        isMap=true;        break;      }      linked=linked.next();    }    List<Statement> stmts=parseElemStart(startNode,true,Collections.emptySet(),isMap);    if (isMap) {      parsedExps.push(parseExpMap(startNode));    } else {      List<Expression> exps=new ArrayList<>();      for (      Statement stmt : stmts) {        if (stmt instanceof Expression) {          exps.add((Expression)stmt);        } else {          err.UnexpectedTokenException("array contents",stmt.toString(),stmt.line_col());          err.debug("ignore the statement");        }      }      parsedExps.push(new AST.ArrayExp(exps,lineCol));    }    nextNode(false);    nextNode(true);  }  parse_expression();}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  forwardTo();}  }
class C{  public boolean isFloatable(){  return floatable;}  }
class C{  public static Date parseDate(String dateStr){  try {    return mSimpleDateFormat.parse(dateStr);  } catch (  ParseException e) {    e.printStackTrace();    throw new RuntimeException("date formatDateTime error");  }}  }
class C{  public static CipherParameters makePBEMacParameters(BCPBEKey pbeKey,AlgorithmParameterSpec spec){  if ((spec == null) || !(spec instanceof PBEParameterSpec)) {    throw new IllegalArgumentException("Need a PBEParameter spec with a PBE key.");  }  PBEParameterSpec pbeParam=(PBEParameterSpec)spec;  PBEParametersGenerator generator=makePBEGenerator(pbeKey.getType(),pbeKey.getDigest());  byte[] key=pbeKey.getEncoded();  CipherParameters param;  if (pbeKey.shouldTryWrongPKCS12()) {    key=new byte[2];  }  generator.init(key,pbeParam.getSalt(),pbeParam.getIterationCount());  param=generator.generateDerivedMacParameters(pbeKey.getKeySize());  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  public Rdn(String type,Object value) throws InvalidNameException {  if (value == null) {    throw new NullPointerException("Cannot set value to null");  }  if (type.equals("") || isEmptyValue(value)) {    throw new InvalidNameException("type or value cannot be empty, type:" + type + " value:"+ value);  }  entries=new ArrayList<>(DEFAULT_SIZE);  put(type,value);}  }
class C{  public FileWriter(String fileName) throws IOException {  super(new FileOutputStream(fileName));}  }
class C{  @NonNull public final Agera subscribeOn(@NonNull Executor executor){  return new AgeraSubscribeOnExecutor(this,executor);}  }
class C{  public INTERNAL(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public AllowEventsHeader createAllowEventsHeader(String eventType) throws ParseException {  if (eventType == null)   throw new NullPointerException("null arg eventType");  AllowEvents allowEvents=new AllowEvents();  allowEvents.setEventType(eventType);  return allowEvents;}  }
class C{  Future<Job> failedAttempt(Throwable err){  return this.error(err).compose(null).compose(null);}  }
class C{  public static void close(Closeable closeable){  if (closeable == null) {    return;  }  try {    closeable.close();  } catch (  IOException e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public RxGalleryFinal cropAspectRatioOptions(int selectedByDefault,AspectRatio... aspectRatio){  configuration.setSelectedByDefault(selectedByDefault);  configuration.setAspectRatio(aspectRatio);  return this;}  }
class C{  public ConnectionWrapper createConnectionWrapper() throws LdapException {  if (trustManager != null) {    trustManager.resetLastRefusedItems();    String host=(String)serverProperties.get(ServerProperty.HOST_NAME);    trustManager.setHost(host);  }  for (  PreferredConnection conn : getLDAPURLsByPreference()) {    lastLdapHostPort=conn.getHostPort();    return new ConnectionWrapper(conn.getHostPort(),conn.getType(),dn,pwd,timeout,trustManager);  }  return null;}  }
class C{  public static String orgNameToRealmName(String orgName){  if ((orgName == null) || (orgName.length() == 0)) {    return "/";  }  if (orgName.equalsIgnoreCase(SMSEntry.baseDN) || orgName.equalsIgnoreCase(serviceDN)) {    return "/";  }  if (!orgName.contains("=")) {    return orgName;  }  DN orgdnObject=DN.valueOf(orgName);  StringBuilder answer=new StringBuilder(100);  answer.append("/");  Set resultSet=new HashSet(2);  resultSet.add(orgName);  String orgdn=orgdnObject.toString();  String orgdnlc=orgdn.toLowerCase();  Set returnSet=null;  if (orgdnlc.endsWith(serviceDN)) {    returnSet=SMSEntry.parseResult(resultSet,serviceDN,true);  } else   if (orgdnlc.endsWith(SMSEntry.baseDN)) {    returnSet=SMSEntry.parseResult(resultSet,serviceDN,true);  }  if (returnSet != null && !returnSet.isEmpty()) {    answer.append(returnSet.iterator().next().toString());  }  return (answer.toString());}  }
class C{  public void destroy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("destroy",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.destroy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public PromptingTrustManager(final ConsoleApplication app,final String acceptedStorePath,final X509TrustManager sourceTrustManager) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException {  Reject.ifNull(app,acceptedStorePath);  this.app=app;  this.nestedTrustManager=sourceTrustManager;  inMemoryTrustStore=KeyStore.getInstance(KeyStore.getDefaultType());  onDiskTrustStore=KeyStore.getInstance(KeyStore.getDefaultType());  final File onDiskTrustStorePath=new File(acceptedStorePath);  inMemoryTrustStore.load(null,null);  if (!onDiskTrustStorePath.exists()) {    onDiskTrustStore.load(null,null);  } else {    try (final FileInputStream fos=new FileInputStream(onDiskTrustStorePath)){      onDiskTrustStore.load(fos,DEFAULT_PASSWORD);    }   }  final TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());  tmf.init(inMemoryTrustStore);  X509TrustManager x509tm=null;  for (  final TrustManager tm : tmf.getTrustManagers()) {    if (tm instanceof X509TrustManager) {      x509tm=(X509TrustManager)tm;      break;    }  }  if (x509tm == null) {    throw new NoSuchAlgorithmException();  }  this.inMemoryTrustManager=x509tm;  tmf.init(onDiskTrustStore);  x509tm=null;  for (  final TrustManager tm : tmf.getTrustManagers()) {    if (tm instanceof X509TrustManager) {      x509tm=(X509TrustManager)tm;      break;    }  }  if (x509tm == null) {    throw new NoSuchAlgorithmException();  }  this.onDiskTrustManager=x509tm;}  }
class C{  public String toString(){  return image;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens05.class,args);}  }
class C{  public static void onlyForTestsClearLocalReplicationServerList(){  localPorts.clear();}  }
class C{  public static boolean isInitialized(){  return logFile != null;}  }
class C{  protected void addNewDTMID(int nodeIndex){  try {    if (m_mgr == null)     throw new ClassCastException();    DTMManagerDefault mgrD=(DTMManagerDefault)m_mgr;    int id=mgrD.getFirstFreeDTMID();    mgrD.addDTM(this,id,nodeIndex);    m_dtmIdent.addElement(id << DTMManager.IDENT_DTM_NODE_BITS);  } catch (  ClassCastException e) {    error(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DTMIDS_AVAIL,null));  }}  }
class C{  public void promoteSession(SessionID sessionID){  InternalSession session=removeSession(sessionID);  if (session == null) {    throw new IllegalStateException("Attempted to promote non existent session");  }  session.setStored(true);  sessionAccessManager.persistInternalSession(session);}  }
class C{  public void add(int index,E element){  checkPositionIndex(index);  if (index == size)   linkLast(element); else   linkBefore(element,node(index));}  }
class C{  java.awt.Point absolute_panel_location(){  int x=scroll_pane.getX();  int y=scroll_pane.getY();  java.awt.Container curr_parent=scroll_pane.getParent();  while (curr_parent != null) {    x+=curr_parent.getX();    y+=curr_parent.getY();    curr_parent=curr_parent.getParent();  }  return new java.awt.Point(x,y);}  }
class C{  public static boolean isXML11Invalid(int c){  return !isXML11Valid(c);}  }
class C{  private byte[] performUpdate(byte[] data,BidiMap map) throws TokenStrategyFailedException {  try {    return blobUtils.fromUTF8(applyReplacement(map,blobUtils.toUTF8(data)));  } catch (  UnsupportedEncodingException e) {    throw new TokenStrategyFailedException(e);  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof DecimalStyle) {    DecimalStyle other=(DecimalStyle)obj;    return (zeroDigit == other.zeroDigit && positiveSign == other.positiveSign && negativeSign == other.negativeSign && decimalSeparator == other.decimalSeparator);  }  return false;}  }
class C{  public void startHeader(){}  }
class C{  public LogoutActionHandler(SSOTokenManager ssoTokenManager,AuthUtilsWrapper authUtilsWrapper){  this.authUtilsWrapper=authUtilsWrapper;  this.ssoTokenManager=ssoTokenManager;}  }
class C{  public void removeAccountFedInfo(String userID,FSAccountFedInfoKey fedInfoKey,String providerID) throws FSAccountMgmtException {  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAccountManager.removeAccountFedInfo(): userID=" + userID + ", infoKey="+ FSAccountUtils.createFilter(fedInfoKey)+ ", providerID="+ providerID);  }  if (fedInfoKey == null) {    FSUtils.debug.error("FSAccountManager.removeAccountFedInfo():" + "Invalid Argument : FedInfo key is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_FED_INFO_KEY_OBJECT,null);  }  if ((providerID == null) || (providerID.length() <= 0)) {    FSUtils.debug.error("FSAccountManager.removeAccountFedInfo():" + "Invalid Argument : providerID is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_PROVIDER_ID,null);  }  if (userID == null) {    FSUtils.debug.error("FSAccountManager.removeAccountFedInfo():" + "Invalid Argument : user ID is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_USER_DN,null);  }  try {    Map attrMap=new HashMap();    boolean found=false;    Set existFedInfoKeySet=provider.getAttribute(userID,FSAccountUtils.USER_FED_INFO_KEY_ATTR);    String existFedInfoKeyStr="";    if (existFedInfoKeySet != null && !existFedInfoKeySet.isEmpty()) {      String filter=FSAccountUtils.createFilter(fedInfoKey);      Iterator i=existFedInfoKeySet.iterator();      while (i.hasNext()) {        existFedInfoKeyStr=(String)i.next();        if (existFedInfoKeyStr.indexOf(filter) >= 0) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAccountManager.removeAccountFedInfo():" + "Account Fed Info Key Exists, will remove it");          }          existFedInfoKeySet.remove(existFedInfoKeyStr);          attrMap.put(FSAccountUtils.USER_FED_INFO_KEY_ATTR,existFedInfoKeySet);          found=true;          break;        }      }    }    String nameIDValue=fedInfoKey.getName();    Set existFedInfoSet=provider.getAttribute(userID,FSAccountUtils.USER_FED_INFO_ATTR);    if (existFedInfoSet != null && !existFedInfoSet.isEmpty()) {      Iterator i=existFedInfoSet.iterator();      String existFedInfoStr="";      String filter=FSAccountUtils.createFilter(providerID);      while (i.hasNext()) {        existFedInfoStr=(String)i.next();        if ((existFedInfoStr.indexOf(filter) >= 0) && (existFedInfoStr.indexOf(nameIDValue) >= 0)) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAccountManager.removeAccountFedInfo():" + "Account Fed Info Exists, will remove it");          }          existFedInfoSet.remove(existFedInfoStr);          attrMap.put(FSAccountUtils.USER_FED_INFO_ATTR,existFedInfoSet);          found=true;          break;        }      }    }    if (found) {      provider.setAttributes(userID,attrMap);      String[] args={userID,providerID,existFedInfoKeyStr};      LogUtil.access(Level.INFO,LogUtil.REMOVE_ACCOUNT_FED_INFO,args);    } else {      FSUtils.debug.error("FSAccountManager.removeAccountFedInfo():" + "Account Federation Info not Found");      throw new FSAccountMgmtException(IFSConstants.ACT_FED_INFO_NOT_FOUND,null);    }  } catch (  DataStoreProviderException ame) {    FSUtils.debug.error("FSAccountManager.removeAccountFedInfo():Exception:",ame);    throw new FSAccountMgmtException(ame.getMessage());  }}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(addr[0]).append(".").append(addr[1]).append(".").append(addr[2]).append(".").append(addr[3]).toString();}  }
class C{  public static boolean verifyMessage(Message m){  try {    Document doc=m.toDocument(false);    Certificate clientCert=(Certificate)m.getPeerCertificate();    Certificate messageCert=(Certificate)m.getMessageCertificate();    int securityProfileType=m.getSecurityProfileType();    if (securityProfileType == Message.SAML_TOKEN || securityProfileType == Message.BEARER_TOKEN) {      SecurityAssertion assertion=m.getAssertion();      String certAlias=null;      Certificate signingCert=getAssertionSigningCert(assertion);      if (signingCert == null) {        certAlias=(String)issuerTrustedCACertAliases.get(assertion.getIssuer());        if (certAlias == null) {          debug.error("SecurityUtils.verifyMessage: " + "assertion doesn't have keyInfo and " + "issuer is not in "+ "com.sun.identity.liberty.ws.trustedca.certalias"+ " in AMConfig");          return false;        }      } else {        certAlias=keystore.getCertificateAlias(signingCert);        if (certAlias == null) {          debug.error("SecurityUtils.verifyMessage: " + "assertion is signed with a certificate that " + " is not in the keystore");          return false;        } else         if (!trustedCACertAliases.contains(certAlias)) {          debug.error("SecurityUtils.verifyMessage: " + "assertion is signed with a certificate that " + " is in the keystore but not in "+ "com.sun.identity.liberty.ws.trustedca.certalias"+ " in AMConfig");          return false;        }      }      assertion.setVerifyingCertAlias(certAlias);      if (!assertion.isSignatureValid()) {        debug.error("SecurityUtils.verifyMessage: assertion " + "signature invalid");        return false;      }      if (debug.messageEnabled()) {        debug.message("SecurityUtils.verifyMessage: Assertion " + " signing cert alias = " + certAlias);      }    }    if ((clientCert != null) && (!clientCert.equals(messageCert))) {      debug.error("Client authentication certificate is not " + "the same as the certificate inside the " + "soap message");      return false;    }    if (messageCert != null) {      String messageCertAlias=keystore.getCertificateAlias(messageCert);      return sm.verifyXMLSignature(m.getWSFVersion(),messageCertAlias,doc);    }    return true;  } catch (  Exception e) {    debug.error("Unable to verify Soap Message!",e);  }  return false;}  }
class C{  private void ensureCapacity(int wordsRequired){  if (words.length < wordsRequired) {    int request=Math.max(2 * words.length,wordsRequired);    words=Arrays.copyOf(words,request);    sizeIsSticky=false;  }}  }
class C{  public ELException(String message){  super(message);}  }
class C{  public void addShutdownListener(ShutdownListener listener) throws IllegalMonitorStateException {  addShutdownListener(listener,ShutdownPriority.DEFAULT);}  }
class C{  @Override public List<Foo> findByUuid(String uuid){  return findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public SAML2ConfigBuilder signatureKeyPassword(byte[] signatureKeyPassword){  this.signatureKeyPassword=signatureKeyPassword;  return this;}  }
class C{  public static void deregisterShutdownListener(ServerShutdownListener listener){  directoryServer.shutdownListeners.remove(listener);}  }
class C{  public CallMethodRule(int targetOffset,String methodName,int paramCount){  this.targetOffset=targetOffset;  this.methodName=methodName;  this.paramCount=paramCount;  if (paramCount == 0) {    this.paramTypes=new Class[]{String.class};  } else {    this.paramTypes=new Class[paramCount];    for (int i=0; i < this.paramTypes.length; i++) {      this.paramTypes[i]=String.class;    }  }  this.paramClassNames=null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehasattributes01.class,args);}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (!m_foundFirstElement && null != m_serializer) {    m_foundFirstElement=true;    Serializer newSerializer;    try {      newSerializer=SerializerSwitcher.switchSerializerIfHTML(uri,localName,m_outputFormat.getProperties(),m_serializer);    } catch (    TransformerException te) {      throw new SAXException(te);    }    if (newSerializer != m_serializer) {      try {        m_resultContentHandler=newSerializer.asContentHandler();      } catch (      IOException ioe) {        throw new SAXException(ioe);      }      if (m_resultContentHandler instanceof DTDHandler)       m_resultDTDHandler=(DTDHandler)m_resultContentHandler;      if (m_resultContentHandler instanceof LexicalHandler)       m_resultLexicalHandler=(LexicalHandler)m_resultContentHandler;      m_serializer=newSerializer;    }  }  flushStartDoc();  m_resultContentHandler.startElement(uri,localName,qName,attributes);}  }
class C{  public InputStreamReader(InputStream in,Charset cs){  super(in);  if (cs == null)   throw new NullPointerException("charset");  sd=StreamDecoder.forInputStreamReader(in,this,cs);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Element element;  Attr attribute;  Attr newAttr1;  Attr newAttribute;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(1);  newAttr1=doc.createAttributeNS("http://www.w3.org/DOM/L1","street");  newAttribute=element.setAttributeNodeNS(newAttr1);  attributes=element.getAttributes();  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L1","street");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemns04","street",attrName);}  }
class C{  public Builder addFormDataPart(String name,String filename,RequestBody body){  return addPart(Part.createFormData(name,filename,body));}  }
class C{  public static <T>T unmarshal(Source xml,Class<T> type){  try {    JAXBElement<T> item=getContext(type).createUnmarshaller().unmarshal(toSource(xml),type);    return item.getValue();  } catch (  JAXBException e) {    throw new DataBindingException(e);  }catch (  IOException e) {    throw new DataBindingException(e);  }}  }
class C{  private void reinitializeAnimationArrays(){  final int childCount=mWorkspace.getChildCount();  if (mLastChildCount == childCount)   return;  mOldBackgroundAlphas=new float[childCount];  mOldAlphas=new float[childCount];  mNewBackgroundAlphas=new float[childCount];  mNewAlphas=new float[childCount];}  }
class C{  private IdRepo constructIdRepoPlugin(String orgName,Map configMap,String name) throws IdRepoException, SSOException {  IdRepo answer=null;  if (debug.messageEnabled()) {    debug.message("IdRepoPluginsCache.constructIdRepoPlugin: config=" + configMap.get("sunIdRepoClass"));  }  if (configMap == null || configMap.isEmpty()) {    if (debug.warningEnabled()) {      debug.warning("IdRepoPluginsCache.constructIdRepoPlugin: " + "Cannot construct with empty config data");    }    return (null);  }  Set vals=(Set)configMap.get(IdConstants.ID_REPO);  if ((vals != null) && !vals.isEmpty()) {    String className=(String)vals.iterator().next();    Class thisClass;    try {      thisClass=Thread.currentThread().getContextClassLoader().loadClass(className);      answer=(IdRepo)thisClass.newInstance();    } catch (    Throwable ex) {      debug.error("IdRepoPluginsCached.constructIdRepoPlugin " + " OrgName: " + orgName + " ConfigMap: "+ configMap,ex);      throw (new IdRepoException(ex.getMessage()));    }    answer.initialize(configMap);    Map listenerConfig=new HashMap();    listenerConfig.put("realm",orgName);    listenerConfig.put("plugin-name",name);    if (className.equals(IdConstants.AMSDK_PLUGIN)) {      listenerConfig.put("amsdk","true");    }    IdRepoListener listener=new IdRepoListener();    listener.setConfigMap(listenerConfig);    answer.addListener(getAdminToken(),listener);  }  return (answer);}  }
class C{  private static int gallopRight(Comparable<Object> key,Object[] a,int base,int len,int hint){  assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (key.compareTo(a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  assert lastOfs == ofs;  return ofs;}  }
class C{  static TextLine recycle(TextLine tl){  tl.mText=null;  tl.mPaint=null;  tl.mDirections=null;  tl.layoutContext=null;  tl.mSpanned=null;  tl.mTabs=null;  tl.mChars=null;  tl.mMetricAffectingSpanSpanSet.recycle();  tl.mCharacterStyleSpanSet.recycle();  tl.mReplacementSpanSpanSet.recycle();synchronized (sCached) {    for (int i=0; i < sCached.length; ++i) {      if (sCached[i] == null) {        sCached[i]=tl;        break;      }    }  }  return null;}  }
class C{  protected String paramString(){  String rootVisibleString=(rootVisible ? "true" : "false");  String showsRootHandlesString=(showsRootHandles ? "true" : "false");  String editableString=(editable ? "true" : "false");  String largeModelString=(largeModel ? "true" : "false");  String invokesStopCellEditingString=(invokesStopCellEditing ? "true" : "false");  String scrollsOnExpandString=(scrollsOnExpand ? "true" : "false");  return super.paramString() + ",editable=" + editableString+ ",invokesStopCellEditing="+ invokesStopCellEditingString+ ",largeModel="+ largeModelString+ ",rootVisible="+ rootVisibleString+ ",rowHeight="+ rowHeight+ ",scrollsOnExpand="+ scrollsOnExpandString+ ",showsRootHandles="+ showsRootHandlesString+ ",toggleClickCount="+ toggleClickCount+ ",visibleRowCount="+ visibleRowCount;}  }
class C{  public Remote activate(boolean force) throws ActivationException, UnknownObjectException, RemoteException {  try {    MarshalledObject<? extends Remote> mobj=activator.activate(this,force);    return mobj.get();  } catch (  RemoteException e) {    throw e;  }catch (  IOException e) {    throw new UnmarshalException("activation failed",e);  }catch (  ClassNotFoundException e) {    throw new UnmarshalException("activation failed",e);  }}  }
class C{  public void unregisterModifiedIndexesInBackend(String backendName){  HashSet<AbstractIndexDescriptor> toDelete=new HashSet<>();  for (  AbstractIndexDescriptor index : modifiedIndexes) {    if (index.getBackend().getBackendID().equalsIgnoreCase(backendName)) {      toDelete.add(index);    }  }  modifiedIndexes.removeAll(toDelete);  for (  BackendDescriptor backend : getServerDescriptor().getBackends()) {    if (backend.getBackendID().equals(backendName)) {      IndexModifiedEvent ev=new IndexModifiedEvent(backend);      for (      IndexModifiedListener listener : indexListeners) {        listener.backendIndexesModified(ev);      }      break;    }  }}  }
class C{  public PagedRequest(int start,int size){  page=start;  pageSize=size;}  }
class C{  public static UIFields createFieldsRegion(){  return (UIFields)JSFComponentFactory.createComponent(UIFields.COMPONENT_TYPE);}  }
class C{  public int next(){  final int result=_currentNode;  if (result == END)   return DTM.NULL;  _currentNode=END;  if (_nodeType >= DTM.NTYPES) {    if (_exptype2(makeNodeIdentity(result)) == _nodeType) {      return returnNode(result);    }  } else {    if (_type2(makeNodeIdentity(result)) == _nodeType) {      return returnNode(result);    }  }  return NULL;}  }
class C{  public boolean canWriteCompressed(){  return canWriteCompressed;}  }
class C{  SessionTracker(Context context,Session.StatusCallback callback,Session session){  this(context,callback,session,true);}  }
class C{  private void serviceInfoFromProperties(Provider.Service s){  super.remove(s.type + "." + s.algorithm);  if (s.aliases != null) {    for (Iterator<String> i=s.aliases.iterator(); i.hasNext(); ) {      super.remove("Alg.Alias." + s.type + "."+ i.next());    }  }  if (s.attributes != null) {    for (    Map.Entry<String,String> entry : s.attributes.entrySet()) {      super.remove(s.type + "." + s.algorithm+ " "+ entry.getKey());    }  }  if (providerNumber != -1) {    Services.setNeedRefresh();  }}  }
class C{  public UnrecoverableEntryException(String msg){  super(msg);}  }
class C{  public boolean save(){  if (design_file == null)   return false;  try {    File to_file=design_file.get_output_file();    stat.userPrintln(classname + "save to_file " + to_file);    java.io.OutputStream output_stream=new FileOutputStream(to_file);    java.io.ObjectOutputStream object_stream=new java.io.ObjectOutputStream(output_stream);    board_panel.itera_board.save_design_file(object_stream);    save_win_state(object_stream);    object_stream.flush();    output_stream.close();    stat.userPrintln(classname + "save to_file DONE");    return true;  } catch (  Exception exc) {    stat.userPrintln(classname + "save to_file ",exc);    return false;  }}  }
class C{  public JRadioButtonMenuItem(String text){  this(text,null,false);}  }
class C{  public NameIDMappingResponse createNameIDMappingResponse(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEIDMAPPING_RES);  if (obj == null) {    return new NameIDMappingResponseImpl();  } else {    return (NameIDMappingResponse)obj;  }}  }
class C{  protected void installDefaults(){  spinner.setLayout(createLayout());  LookAndFeel.installBorder(spinner,"Spinner.border");  LookAndFeel.installColorsAndFont(spinner,"Spinner.background","Spinner.foreground","Spinner.font");  LookAndFeel.installProperty(spinner,"opaque",Boolean.TRUE);}  }
class C{  public static byte[] parseBase64Binary(String lexicalXSDBase64Binary){  if (theConverter == null)   initConverter();  return theConverter.parseBase64Binary(lexicalXSDBase64Binary);}  }
class C{  public ArtifactResponse createArtifactResponse(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ARTIFACT_RESPONSE);  if (obj == null) {    return new ArtifactResponseImpl();  } else {    return (ArtifactResponse)obj;  }}  }
class C{  public ConversationFactory withInitialSessionData(Map<Object,Object> initialSessionData){  this.initialSessionData=initialSessionData;  return this;}  }
class C{  public void makeImmutable(){  if (isMutable) {    super.makeImmutable();    if ((nameid != null) && (nameid.isMutable())) {      nameid.makeImmutable();    }    isMutable=false;  }}  }
class C{  protected void paintDisabledText(JLabel l,Graphics g,String s,int textX,int textY){  int mnemIndex=l.getDisplayedMnemonicIndex();  g.setColor(UIManager.getColor("Label.disabledForeground"));  SwingUtilities2.drawStringUnderlineCharAt(l,g,s,mnemIndex,textX,textY);}  }
class C{  public void stop(){  if (log.isDebugEnabled())   log.debug(sm.getString("hostConfig.stop"));  if (oname != null) {    try {      Registry.getRegistry(null,null).unregisterComponent(oname);    } catch (    Exception e) {      log.error(sm.getString("hostConfig.jmx.unregister",oname),e);    }  }  oname=null;}  }
class C{  public boolean equals(Object object){  if (!(object instanceof ObjectInstance)) {    return false;  }  ObjectInstance val=(ObjectInstance)object;  if (!name.equals(val.getObjectName()))   return false;  if (className == null)   return (val.getClassName() == null);  return className.equals(val.getClassName());}  }
class C{  @Override public void write(byte[] b,int off,int len){}  }
class C{  private boolean isAttributeDN(AttributeType attribute){  return SYNTAX_DN_OID.equals(attribute.getSyntax().getOID());}  }
class C{  public void organizationConfigChanged(String orgName){  organizationConfigChanged(null,null,orgName,null,null,0);}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  protected FastDateFormat(final String pattern,final TimeZone timeZone,final Locale locale){  this(pattern,timeZone,locale,null);}  }
class C{  public static void embedTypeInfo(ErrorCorrectionLevel ecLevel,int maskPattern,ByteMatrix matrix) throws WriterException {  BitVector typeInfoBits=new BitVector();  makeTypeInfoBits(ecLevel,maskPattern,typeInfoBits);  for (int i=0; i < typeInfoBits.size(); ++i) {    int bit=typeInfoBits.at(typeInfoBits.size() - 1 - i);    int x1=TYPE_INFO_COORDINATES[i][0];    int y1=TYPE_INFO_COORDINATES[i][1];    matrix.set(x1,y1,bit);    if (i < 8) {      int x2=matrix.getWidth() - i - 1;      int y2=8;      matrix.set(x2,y2,bit);    } else {      int x2=8;      int y2=matrix.getHeight() - 7 + (i - 8);      matrix.set(x2,y2,bit);    }  }}  }
class C{  private static void legacyMergeSort(Object[] a,int fromIndex,int toIndex){  Object[] aux=copyOfRange(a,fromIndex,toIndex);  mergeSort(aux,a,fromIndex,toIndex,-fromIndex);}  }
class C{  public void characters(String chars) throws SAXException {  final int length=chars.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  chars.getChars(0,length,m_charsBuff,0);  this.characters(m_charsBuff,0,length);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XML","9.0");  assertFalse("throw_False",state);}  }
class C{  JSONStringer close(Scope empty,Scope nonempty,String closeBracket) throws JSONException {  Scope context=peek();  if (context != nonempty && context != empty) {    throw new JSONException("Nesting problem");  }  stack.remove(stack.size() - 1);  if (context == nonempty) {    newline();  }  out.append(closeBracket);  return this;}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  @Override public int hashCode(){  return attribute.hashCode();}  }
class C{  public static void updateRenderer(JComponent c,String text){  View value=null;  View oldValue=(View)c.getClientProperty(BasicHTML.propertyKey);  Boolean htmlDisabled=(Boolean)c.getClientProperty(htmlDisable);  if (htmlDisabled != Boolean.TRUE && BasicHTML.isHTMLString(text)) {    value=BasicHTML.createHTMLView(c,text);  }  if (value != oldValue && oldValue != null) {    for (int i=0; i < oldValue.getViewCount(); i++) {      oldValue.getView(i).setParent(null);    }  }  c.putClientProperty(BasicHTML.propertyKey,value);}  }
class C{  public void log(String logName,Level level,String message,Object actor,Object cred){  LogRecord rec=new LogRecord(level,message,actor);  ((Logger)Logger.getLogger(logName)).log(rec,cred);}  }
class C{  public void testSystemRunFinalizationReturnsEvenIfQueueIsNonEmpty() throws Exception {  AtomicInteger count=new AtomicInteger();  AtomicBoolean keepGoing=new AtomicBoolean(true);  createChainedFinalizer(count,keepGoing);  while (count.get() == 0) {    Thread.sleep(500);    FinalizationTester.induceFinalization();  }  keepGoing.set(false);  assertTrue(count.get() > 0);}  }
class C{  @Override public void close() throws IOException {  sc.close();}  }
class C{  public void init(ToXMLSAXHandler h,Transformer transformer,ContentHandler realHandler){  h.setTransformer(transformer);  h.setContentHandler(realHandler);}  }
class C{  public AssertionArtifact createAssertionArtifact(String id,String destID,HttpServletRequest request,HttpServletResponse response,String targetUrl,String version) throws SAMLException {  if ((id == null) || (destID == null)) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("AssertionManager: null input for" + " method createAssertionArtifact.");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  Map partner=(Map)SAMLServiceManager.getAttribute(SAMLConstants.PARTNER_URLS);  if ((partner == null) || (!partner.containsKey(destID))) {    SAMLUtils.debug.error("AssertionManager.createAssertionArtifact:" + "(String, String): destID not in partner list.");    throw new SAMLException(SAMLUtils.bundle.getString("destIDNotFound"));  }  String handle=SAMLUtils.generateAssertionHandle();  if (handle == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("AssertionManager.createAssertionArt" + "ifact: couldn't generate assertion handle.");    }    throw new SAMLResponderException(SAMLUtils.bundle.getString("errorCreateArtifact"));  }  String sourceID=(String)SAMLServiceManager.getAttribute(SAMLConstants.SITE_ID);  AssertionArtifact art=new AssertionArtifact(sourceID,handle);  Assertion assertion=createSSOAssertion(id,art,request,response,destID,targetUrl,version);  try {    if (version != null) {      StringTokenizer st=new StringTokenizer(version,".");      if (st.countTokens() == 2) {        assertion.setMajorVersion(Integer.parseInt(st.nextToken().trim()));        assertion.setMinorVersion(Integer.parseInt(st.nextToken().trim()));      }    }  } catch (  NumberFormatException ne) {    throw new SAMLException(ne.getMessage());  }  return art;}  }
class C{  public void testCase9(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-2,-3,-4,-5,-16,-27,-38,-42,-53,-64,-75,-16,-27,-37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AuthnAuthorityDescriptorType createAuthnAuthorityDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AuthnAuthorityDescriptorTypeImpl();}  }
class C{  protected void paintContent(SynthContext context,Graphics g,Rectangle bounds){  SynthLookAndFeel.updateSubregion(context,g,bounds);  context.getPainter().paintToolBarContentBackground(context,g,bounds.x,bounds.y,bounds.width,bounds.height,toolBar.getOrientation());  context.getPainter().paintToolBarContentBorder(context,g,bounds.x,bounds.y,bounds.width,bounds.height,toolBar.getOrientation());}  }
class C{  public void addPowerupEffect(double x,double y,int marioState){  root.getChildren().add(powerupEffectView);  powerupEffectView.setImage(powerupEffect[marioState]);  powerupEffectView.toFront();  powerupEffectView.setTranslateX(x);  powerupEffectView.setTranslateY(y);  powerupEffectView.setFitHeight(9.3 * REL_HEIGHT);}  }
class C{  static List<String> readExtensions(final SubstringReader reader) throws DecodeException {  int length=0;  List<String> values;  reader.skipWhitespaces();  reader.mark();  try {    char c=reader.read();    if (c == '\'') {      reader.mark();      while (reader.read() != '\'') {        length++;      }      reader.reset();      values=Collections.singletonList(reader.read(length));      reader.read();    } else     if (c == '(') {      reader.skipWhitespaces();      reader.mark();      c=reader.read();      if (c == ')') {        values=Collections.emptyList();      } else {        values=new ArrayList<>();        do {          reader.reset();          values.add(readQuotedString(reader));          reader.skipWhitespaces();          reader.mark();        } while (reader.read() != ')');        values=Collections.unmodifiableList(values);      }    } else {      do {        length++;      } while (reader.read() != ' ');      reader.reset();      values=Collections.singletonList(reader.read(length));    }    return values;  } catch (  final StringIndexOutOfBoundsException e) {    throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());  }}  }
class C{  public static void centerOnScreen(Component comp){  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();  int width=(int)comp.getPreferredSize().getWidth();  int height=(int)comp.getPreferredSize().getHeight();  boolean multipleScreen=screenSize.width / screenSize.height >= 2;  if (multipleScreen) {    comp.setLocation(screenSize.width / 4 - width / 2,(screenSize.height - height) / 2);  } else {    comp.setLocation((screenSize.width - width) / 2,(screenSize.height - height) / 2);  }}  }
class C{  public ResourceType(final ResourceType type){  super();  this.name=type.name;  this.url=type.url;  this.path=type.path;  this.maxSize=type.maxSize;  this.allowedExtensions=type.allowedExtensions;  this.deniedExtensions=type.deniedExtensions;}  }
class C{  protected SmallAttributeSet createSmallAttributeSet(AttributeSet a){  return new SmallAttributeSet(a);}  }
class C{  public void schedule(TaskRunnable task,long delay) throws IllegalArgumentException, IllegalStateException {  schedule(task,new Date(currentTimeMillis() + delay));}  }
class C{  public boolean authenticate(Callback[] credentials) throws IdRepoException, com.sun.identity.authentication.spi.AuthLoginException {  IdServices idServices=IdServicesFactory.getDataStoreServices();  return (idServices.authenticate(organizationDN,credentials));}  }
class C{  public AuthorizationIdentityResponseControl(){  this(false);}  }
class C{  public boolean containsRuleActionId(String ruleActionId){  return getAggregationMap().containsKey(ruleActionId);}  }
class C{  protected void removeIconFor(JInternalFrame f){  JInternalFrame.JDesktopIcon di=f.getDesktopIcon();  Container c=di.getParent();  if (c != null) {    c.remove(di);    c.repaint(di.getX(),di.getY(),di.getWidth(),di.getHeight());  }}  }
class C{  public String convert(String line){  return line;}  }
class C{  @Override public boolean isValid(){  if (!this.isValid) {    return false;  }  if (this.expiring) {    return true;  }  if (ACTIVITY_CHECK && accessCount.get() > 0) {    return true;  }  if (maxInactiveInterval > 0) {    int timeIdle=(int)(getIdleTimeInternal() / 1000L);    if (isPrimarySession()) {      if (timeIdle >= maxInactiveInterval) {        expire(true);      }    } else {      if (timeIdle >= (2 * maxInactiveInterval)) {        expire(true,false);      }    }  }  return (this.isValid);}  }
class C{  private void stopIdleThreads(Context context){  if (serverStopping)   return;  if (!(context instanceof StandardContext) || !((StandardContext)context).getRenewThreadsWhenStoppingContext()) {    log.debug("Not renewing threads when the context is stopping. " + "It is not configured to do it.");    return;  }  Engine engine=(Engine)context.getParent().getParent();  Service service=engine.getService();  Connector[] connectors=service.findConnectors();  if (connectors != null) {    for (    Connector connector : connectors) {      ProtocolHandler handler=connector.getProtocolHandler();      Executor executor=null;      if (handler != null) {        executor=handler.getExecutor();      }      if (executor instanceof ThreadPoolExecutor) {        ThreadPoolExecutor threadPoolExecutor=(ThreadPoolExecutor)executor;        threadPoolExecutor.contextStopping();      } else       if (executor instanceof StandardThreadExecutor) {        StandardThreadExecutor stdThreadExecutor=(StandardThreadExecutor)executor;        stdThreadExecutor.contextStopping();      }    }  }}  }
class C{  public short acceptNode(int testNode){  boolean foundKey=false;  KeyIterator ki=(KeyIterator)m_lpi;  org.apache.xpath.XPathContext xctxt=ki.getXPathContext();  Vector keys=ki.getKeyDeclarations();  QName name=ki.getName();  try {    int nDeclarations=keys.size();    for (int i=0; i < nDeclarations; i++) {      KeyDeclaration kd=(KeyDeclaration)keys.elementAt(i);      if (!kd.getName().equals(name))       continue;      foundKey=true;      XPath matchExpr=kd.getMatch();      double score=matchExpr.getMatchScore(xctxt,testNode);      if (score == kd.getMatch().MATCH_SCORE_NONE)       continue;      return DTMIterator.FILTER_ACCEPT;    }  } catch (  TransformerException se) {  }  if (!foundKey)   throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_XSLKEY_DECLARATION,new Object[]{name.getLocalName()}));  return DTMIterator.FILTER_REJECT;}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) - m_right.num(xctxt));}  }
class C{  private void reset(String homepath,String filename){  File file;  try {    file=new File(homepath + SEP + filename);    if (file.isFile()) {      file.delete();    } else     if (file.isDirectory()) {      File[] files=file.listFiles();      for (int i=0; i < files.length; i++) {        files[i].delete();      }      file.delete();    }  } catch (  Exception e) {    e.printStackTrace();  }  try {    file=new File(homepath + SEP + filename+ ".lck");    file.delete();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public final void addElements(Object value,int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  for (int i=0; i < numberOfElements; i++) {    m_map[m_firstFree]=value;    m_firstFree++;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported01.class,args);}  }
class C{  static MatchingRuleImpl partialDateAndTimeMatchingRule(){  return new PartialDateAndTimeMatchingRuleImpl();}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  @Override public int hashCode(){  return oid.hashCode();}  }
class C{  public static Vector send(URL url,RequestSet set,HashMap cookieTable) throws SendRequestException {  return send(url,null,set,cookieTable);}  }
class C{  private static boolean copyTillEnd(BufferedReader reader,Writer writer){  boolean success=false;  String line=null;  try {    if ((reader != null) && (writer != null)) {      line=reader.readLine();      while (line != null) {        writeLine(writer,line);        line=reader.readLine();      }    }    reader.close();    success=true;  } catch (  Exception ex) {    ex.printStackTrace();    Debug.log("FileUtils.copyTillEnd() threw exception : ",ex);  }  return success;}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){  if (debug.messageEnabled()) {    debug.message("authlevel : globalConfigChanged " + serviceName + ", ver="+ version+ ", group="+ groupName+ ", componnet="+ serviceComponent+ ", type="+ type);  }  if (serviceName.equals(ISAuthConstants.AUTH_SERVICE_NAME)) {    AMAuthenticationManager.reInitializeAuthServices();  }}  }
class C{  public void addButtonActionListener(ButtonActionListener l){  for (  WizardStep s : hmPanels.keySet()) {    getPanel(s).addButtonActionListener(l);  }}  }
class C{  public static Document toDOMDocument(String xmlString,Debug debug){  if ((xmlString == null) || (xmlString.length() == 0)) {    return null;  }  try {    ByteArrayInputStream is=new ByteArrayInputStream(xmlString.getBytes("UTF-8"));    return toDOMDocument(is,debug);  } catch (  UnsupportedEncodingException uee) {    if (debug != null && debug.warningEnabled()) {      debug.warning("Can't parse the XML document:\n" + xmlString,uee);    }    return null;  }}  }
class C{  public static byte[] scalarMult(byte[] n,byte[] q){  if (n.length != 32 || q.length != 32) {    throw new IllegalArgumentException("All keys must be exactly 32 bytes long.");  }  toPrivateKey(n);  Polynomial25519 qPolynomial=new Polynomial25519(q);  Polynomial25519.Montgomery m=Polynomial25519.multiple(n,qPolynomial);  Polynomial25519 reciprocal=m.z.reciprocal();  reciprocal.mult(m.x);  return reciprocal.toBytes();}  }
class C{  public String toXML(){  StringBuilder buff=new StringBuilder();  buff.append("<").append(DSConfigMgr.ROOT).append(">\n");  buff.append(defaultServerGroup.toXML(DSConfigMgr.DEFAULT));  buff.append(smsServerGroup.toXML("sms"));  buff.append("</").append(DSConfigMgr.ROOT).append(">\n");  return buff.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  ProcessingInstruction newPINode;  String piValue;  String piName;  int piType;  doc=(Document)load("staff",true);  newPINode=doc.createProcessingInstruction("TESTPI","This is a new PI node");  assertNotNull("createdPINotNull",newPINode);  piName=newPINode.getNodeName();  assertEquals("name","TESTPI",piName);  piValue=newPINode.getNodeValue();  assertEquals("value","This is a new PI node",piValue);  piType=(int)newPINode.getNodeType();  assertEquals("type",7,piType);}  }
class C{  public Response(String content){  responseContent=XMLUtils.removeInvalidXMLChars(content);}  }
class C{  public AsfTag(final boolean copy){  super();  this.copyFields=copy;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String prefix;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("employee");  testEmployee=elementList.item(0);  prefix=testEmployee.getPrefix();  assertNull("throw_Null",prefix);}  }
class C{  public void notifyCookieEntryAdded(DN baseDN,UpdateMsg updateMsg) throws ChangelogException {  if (!(updateMsg instanceof LDAPUpdateMsg)) {    return;  }  try {    for (    PersistentSearch pSearch : cookieBasedPersistentSearches) {      final SearchOperation searchOp=pSearch.getSearchOperation();      final CookieEntrySender entrySender=searchOp.getAttachment(ENTRY_SENDER_ATTACHMENT);      entrySender.persistentSearchSendEntry(baseDN,updateMsg);    }  } catch (  DirectoryException e) {    throw new ChangelogException(e.getMessageObject(),e);  }}  }
class C{  Object processENUM_OR_PQNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  Object objToReturn=null;  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      if (!avt.isSimple())       return avt; else       objToReturn=avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  }  int key=this.getEnum(value);  if (key != StringToIntTable.INVALID_KEY) {    if (objToReturn == null)     objToReturn=new Integer(key);  } else {    try {      QName qname=new QName(value,handler,true);      if (objToReturn == null)       objToReturn=qname;      if (qname.getPrefix() == null) {        StringBuffer enumNamesList=getListOfEnums();        enumNamesList.append(" <qname-but-not-ncname>");        handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},null);        return null;      }    } catch (    IllegalArgumentException ie) {      StringBuffer enumNamesList=getListOfEnums();      enumNamesList.append(" <qname-but-not-ncname>");      handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},ie);      return null;    }catch (    RuntimeException re) {      StringBuffer enumNamesList=getListOfEnums();      enumNamesList.append(" <qname-but-not-ncname>");      handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},re);      return null;    }  }  return objToReturn;}  }
class C{  public Duration minusMillis(long millisToSubtract){  return (millisToSubtract == Long.MIN_VALUE ? plusMillis(Long.MAX_VALUE).plusMillis(1) : plusMillis(-millisToSubtract));}  }
class C{  @Override public boolean hasKernPairs(){  return kernPairs.size() > 0;}  }
class C{  private AdditionalLogItem(final Class<?> source,final String key,final Object value,final boolean isQuoted){  this.source=source;  this.key=key;  this.value=value;  this.isQuoted=isQuoted;}  }
class C{  private TreeNode findLastMatchingNode(TreeNode startNode,StringBuilder rule){  assert (startNode != null) : "The start node must not be null";  TreeNode parentNode=startNode;  TreeNode childNode=null;  while (rule.length() > 0) {    childNode=parentNode.getChild();    while (childNode != null && childNode.getNodeValue() != rule.charAt(0)) {      childNode=childNode.getSibling();    }    if (childNode == null) {      break;    }    rule.delete(0,1);    parentNode=childNode;  }  return parentNode;}  }
class C{  private void checkNegativeNumberExpression(){  if ((numberFormat instanceof DecimalFormat) && !numberFormat.equals(originalNumberFormat)) {    String numberPattern=((DecimalFormat)numberFormat).toPattern();    if (!numberPattern.equals(originalNumberPattern)) {      hasFollowingMinusSign=false;      int separatorIndex=numberPattern.indexOf(';');      if (separatorIndex > -1) {        int minusIndex=numberPattern.indexOf('-',separatorIndex);        if ((minusIndex > numberPattern.lastIndexOf('0')) && (minusIndex > numberPattern.lastIndexOf('#'))) {          hasFollowingMinusSign=true;          minusSign=((DecimalFormat)numberFormat).getDecimalFormatSymbols().getMinusSign();        }      }      originalNumberPattern=numberPattern;    }    originalNumberFormat=numberFormat;  }}  }
class C{  public PdfNumTree(PdfCatalog catalog,PdfName treeType){  this.treeType=treeType;  this.catalog=catalog;}  }
class C{  public AddRequestProtocolOp(ByteString dn,List<RawAttribute> attributes){  this.dn=dn;  if (attributes == null) {    this.attributes=new ArrayList<>();  } else {    this.attributes=attributes;  }}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKey02(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    try {      TestDataGenerator g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfoDamaged,null);      EncryptedPrivateKeyInfo epki;      if (g.ap() == null) {        epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());      } else {        epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());      }      try {        epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK());        fail(algName[i][0] + ", " + algName[i][1]);      } catch (      InvalidKeyException e) {      }      performed=true;    } catch (    TestDataGenerator.AllowedFailure allowedFailure) {    }catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  @Update(operationDescription=@Operation(errors={@ApiError(code=500,description=CORE_TOKEN_RESOURCE + "error.unexpected.server.error." + DESCRIPTION)},description=CORE_TOKEN_RESOURCE + UPDATE_DESCRIPTION)) public Promise<ResourceResponse,ResourceException> updateInstance(Context serverContext,String tokenId,UpdateRequest updateRequest){  String principal=PrincipalRestUtils.getPrincipalNameFromServerContext(serverContext);  String value=updateRequest.getContent().toString();  Token newToken=serialisation.deserialise(value,Token.class);  try {    store.updateAsync(newToken);    ResourceResponse resource=newResourceResponse(newToken.getTokenId(),String.valueOf(currentTimeMillis()),new JsonValue("Token Updated"));    debug("UPDATE by {0}: Updated token resource with ID: {1}",principal,tokenId);    return newResultPromise(resource);  } catch (  CoreTokenException e) {    error(e,"UPDATE by {0}: Error updating token resource with ID: {1}",principal,tokenId);    return generateException(e).asPromise();  }}  }
class C{  public void clearRect(int x,int y,int width,int height){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Clearing rect: " + new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.clearRect(x,y,width,height);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.clearRect(x,y,width,height);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.clearRect(x,y,width,height);}  }
class C{  public final void testClone() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PKIXCertPathValidatorResult vr1=new PKIXCertPathValidatorResult(ta,TestUtils.getPolicyTree(),testPublicKey);  PKIXCertPathValidatorResult vr2=(PKIXCertPathValidatorResult)vr1.clone();  assertNotSame("notSame",vr1,vr2);  assertSame("trustAncor",vr1.getTrustAnchor(),vr2.getTrustAnchor());  assertSame("policyTree",vr1.getPolicyTree(),vr2.getPolicyTree());  assertSame("publicKey",vr1.getPublicKey(),vr2.getPublicKey());  byte[] encoding={0x01};  MyPKIXCertPathBuilderResult my=new MyPKIXCertPathBuilderResult(ta,TestUtils.getPolicyTree(),testPublicKey,encoding);  MyPKIXCertPathBuilderResult myClone=(MyPKIXCertPathBuilderResult)my.clone();  assertSame(my.getPolicyTree(),myClone.getPolicyTree());  assertSame(my.getPublicKey(),myClone.getPublicKey());  assertSame(my.getTrustAnchor(),myClone.getTrustAnchor());  assertSame(my.enc,myClone.enc);}  }
class C{  private void configurePostRedirectCallback(final String postMsg,final String ssoURL,final RedirectCallback redirectCallback) throws AuthLoginException {  final Map<String,String> postData=new HashMap<>();  postData.put(SAML2Constants.SAML_REQUEST,postMsg);  final RedirectCallback rcNew=new RedirectCallback(ssoURL,postData,"POST",redirectCallback.getStatusParameter(),redirectCallback.getRedirectBackUrlCookieName());  rcNew.setTrackingCookie(true);  replaceCallback(REDIRECT,REDIRECT_CALLBACK,rcNew);}  }
class C{  public Principal localPrincipal(){  return !localCertificates.isEmpty() ? ((X509Certificate)localCertificates.get(0)).getSubjectX500Principal() : null;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public static String toString(short value){  return Integer.toString(value);}  }
class C{  public boolean equal(org.omg.DynamicAny.DynAny dyn_any){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("equal",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    return $self.equal(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void transformNode(int node) throws TransformerException {  setExtensionsTable(getStylesheet());synchronized (m_serializationHandler) {    m_hasBeenReset=false;    XPathContext xctxt=getXPathContext();    DTM dtm=xctxt.getDTM(node);    try {      pushGlobalVars(node);      StylesheetRoot stylesheet=this.getStylesheet();      int n=stylesheet.getGlobalImportCount();      for (int i=0; i < n; i++) {        StylesheetComposed imported=stylesheet.getGlobalImport(i);        int includedCount=imported.getIncludeCountComposed();        for (int j=-1; j < includedCount; j++) {          Stylesheet included=imported.getIncludeComposed(j);          included.runtimeInit(this);          for (ElemTemplateElement child=included.getFirstChildElem(); child != null; child=child.getNextSiblingElem()) {            child.runtimeInit(this);          }        }      }      DTMIterator dtmIter=new org.apache.xpath.axes.SelfIteratorNoPredicate();      dtmIter.setRoot(node,xctxt);      xctxt.pushContextNodeList(dtmIter);      try {        this.applyTemplateToNode(null,null,node);      }  finally {        xctxt.popContextNodeList();      }      if (null != m_serializationHandler) {        m_serializationHandler.endDocument();      }    } catch (    Exception se) {      while (se instanceof org.apache.xml.utils.WrappedRuntimeException) {        Exception e=((org.apache.xml.utils.WrappedRuntimeException)se).getException();        if (null != e)         se=e;      }      if (null != m_serializationHandler) {        try {          if (se instanceof org.xml.sax.SAXParseException)           m_serializationHandler.fatalError((org.xml.sax.SAXParseException)se); else           if (se instanceof TransformerException) {            TransformerException te=((TransformerException)se);            SAXSourceLocator sl=new SAXSourceLocator(te.getLocator());            m_serializationHandler.fatalError(new org.xml.sax.SAXParseException(te.getMessage(),sl,te));          } else {            m_serializationHandler.fatalError(new org.xml.sax.SAXParseException(se.getMessage(),new SAXSourceLocator(),se));          }        } catch (        Exception e) {        }      }      if (se instanceof TransformerException) {        m_errorHandler.fatalError((TransformerException)se);      } else       if (se instanceof org.xml.sax.SAXParseException) {        m_errorHandler.fatalError(new TransformerException(se.getMessage(),new SAXSourceLocator((org.xml.sax.SAXParseException)se),se));      } else {        m_errorHandler.fatalError(new TransformerException(se));      }    } finally {      this.reset();    }  }}  }
class C{  static public void assertFalse(boolean condition){  assertFalse(null,condition);}  }
class C{  public boolean isEmpty(){  return list.isEmpty();}  }
class C{  public static InputMethodListener add(InputMethodListener a,InputMethodListener b){  return (InputMethodListener)addInternal(a,b);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodetextnodeattribute.class,args);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public SessionEvent(Session session,SessionEventType eventType,long eventTime){  Reject.ifNull(session,eventType);  this.session=session;  this.eventType=eventType;  this.eventTime=eventTime;}  }
class C{  @SuppressWarnings("unchecked") public void writeString(String x) throws SQLException {  attribs.add(x);}  }
class C{  private static boolean isSchemeChar(char c){  return Character.isLetterOrDigit(c) || c == '+' || c == '-' || c == '.';}  }
class C{  public UninstallUserData createUserData(UninstallerArgumentParser args) throws UserDataException, ClientException {  parser=args;  UninstallUserData userData=new UninstallUserData();  try {    boolean isInteractive=args.isInteractive();    userData.setQuiet(args.isQuiet());    userData.setVerbose(args.isVerbose());    userData.setForceOnError(args.isForceOnError());    userData.setTrustManager(args.getTrustManager());    userData.setConnectTimeout(getConnectTimeout());    LocalizableMessageBuilder buf=new LocalizableMessageBuilder();    int v=args.validateGlobalOptions(buf);    if (v != ReturnCode.SUCCESS.get()) {      throw new UserDataException(null,buf.toMessage());    }    Set<String> outsideDbs;    Set<String> outsideLogs;    Configuration config=Installation.getLocal().getCurrentConfiguration();    try {      outsideDbs=config.getOutsideDbs();    } catch (    IOException ioe) {      outsideDbs=Collections.emptySet();      logger.info(LocalizableMessage.raw("error determining outside databases",ioe));    }    try {      outsideLogs=config.getOutsideLogs();    } catch (    IOException ioe) {      outsideLogs=Collections.emptySet();      logger.info(LocalizableMessage.raw("error determining outside logs",ioe));    }    boolean somethingSpecifiedToDelete=args.removeAll() || args.removeBackupFiles() || args.removeDatabases()|| args.removeLDIFFiles()|| args.removeConfigurationFiles()|| args.removeLogFiles()|| args.removeServerLibraries();    boolean isCanceled=false;    if (somethingSpecifiedToDelete) {      userData.setRemoveBackups(args.removeAll() || args.removeBackupFiles());      userData.setRemoveConfigurationAndSchema(args.removeAll() || args.removeConfigurationFiles());      userData.setRemoveDatabases(args.removeAll() || args.removeDatabases());      userData.setRemoveLDIFs(args.removeAll() || args.removeLDIFFiles());      userData.setRemoveLibrariesAndTools(args.removeAll() || args.removeServerLibraries());      userData.setRemoveLogs(args.removeAll() || args.removeLogFiles());      userData.setExternalDbsToRemove(outsideDbs);      userData.setExternalLogsToRemove(outsideLogs);    } else     if (!isInteractive) {      throw new UserDataException(null,ERR_CLI_UNINSTALL_NOTHING_TO_BE_UNINSTALLED_NON_INTERACTIVE.get());    } else {      isCanceled=askWhatToDelete(userData,outsideDbs,outsideLogs);    }    String adminUid=args.getAdministratorUID();    if (adminUid == null && !args.isInteractive()) {      adminUid=args.getDefaultAdministratorUID();    }    userData.setAdminUID(adminUid);    userData.setAdminPwd(args.getBindPassword());    String referencedHostName=args.getReferencedHostName();    if (referencedHostName == null && !args.isInteractive()) {      referencedHostName=args.getDefaultReferencedHostName();    }    try {      UninstallData d=new UninstallData(Installation.getLocal());      userData.setReplicationServer(new HostPort(referencedHostName,d.getReplicationServerPort()));    } catch (    Throwable t) {      logger.error(LocalizableMessage.raw("Could not create UninstallData: " + t,t));      userData.setReplicationServer(new HostPort(referencedHostName,8989));    }    info=ControlPanelInfo.getInstance();    info.setTrustManager(userData.getTrustManager());    info.setConnectTimeout(getConnectTimeout());    info.regenerateDescriptor();    info.setConnectionPolicy(ConnectionProtocolPolicy.USE_ADMIN);    HostPort adminConnectorHostPort=info.getAdminConnectorHostPort();    if (adminConnectorHostPort == null) {      logger.warn(LocalizableMessage.raw("Error retrieving a valid LDAP URL in conf file."));      if (!parser.isInteractive()) {        LocalizableMessage msg=ERR_COULD_NOT_FIND_VALID_LDAPURL.get();        throw new ClientException(ReturnCode.APPLICATION_ERROR,msg);      }    }    userData.setLocalServer(adminConnectorHostPort,true);    userData.setReferencedHostName(referencedHostName);    if (!isCanceled) {      isCanceled=checkServerState(userData);      if (isCanceled && !userData.isForceOnError()) {        logger.info(LocalizableMessage.raw("User cancelled uninstall."));        userData=null;      }    }    if (userData != null && !args.isQuiet()) {      println();    }  } catch (  Throwable t) {    logger.warn(LocalizableMessage.raw("Exception: " + t,t));    if (t instanceof UserDataException) {      throw (UserDataException)t;    } else     if (t instanceof ClientException) {      throw (ClientException)t;    } else {      throw new IllegalStateException("Unexpected error: " + t,t);    }  }  logger.info(LocalizableMessage.raw("Successfully created user data"));  return userData;}  }
class C{  public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_matchPattern)   m_matchPattern.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());  if (null != m_use)   m_use.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  public final boolean isExpired(){  return currentTimeMillis() > getExpiryTime();}  }
class C{  @Override public boolean validate(Set<String> values){  try {    for (    String toTest : values) {      if (Integer.valueOf(toTest) < MIN_CODE_LENGTH) {        return false;      }    }  } catch (  NumberFormatException nfe) {    return false;  }  return true;}  }
class C{  public static Hashtable<String,String[]> parsePostData(int len,ServletInputStream in){  if (len <= 0)   return new Hashtable<>();  if (in == null) {    throw new IllegalArgumentException();  }  byte[] postedBytes=new byte[len];  try {    int offset=0;    do {      int inputLen=in.read(postedBytes,offset,len - offset);      if (inputLen <= 0) {        String msg=lStrings.getString("err.io.short_read");        throw new IllegalArgumentException(msg);      }      offset+=inputLen;    } while ((len - offset) > 0);  } catch (  IOException e) {    throw new IllegalArgumentException(e.getMessage(),e);  }  try {    String postedBody=new String(postedBytes,0,len,"8859_1");    return parseQueryString(postedBody);  } catch (  java.io.UnsupportedEncodingException e) {    throw new IllegalArgumentException(e.getMessage(),e);  }}  }
class C{  public void testToPlainStringPosPosExp(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+100";  BigDecimal aNumber=new BigDecimal(a);  String result="1238096483923847545735673567457356356789029578490276878767828700000000000000000000000000000000000000000000000000000000000000000000000";  assertTrue("incorrect value",aNumber.toPlainString().equals(result));}  }
class C{  @ForceInline static Object internalMemberName(Object mh){  return ((DirectMethodHandle)mh).member;}  }
class C{  protected final void process(PdfObject obj){  PdfIndirectReference ref=obj.getIndirectReference();  if (ref == null) {    loopOver(obj);  } else   if (!resources.containsKey(ref.getObjNumber())) {    resources.put(ref.getObjNumber(),obj);    loopOver(obj);  }}  }
class C{  @Override public boolean accept(File file){  boolean newer=FileUtils.isFileNewer(file,cutoff);  return acceptOlder ? !newer : newer;}  }
class C{  public AtomicReferenceArray(E[] array){  this.array=Arrays.copyOf(array,array.length,Object[].class);}  }
class C{  public int doStartTag() throws JspException {  reset();  try {    if (fireBeginDisplayEvent()) {      ViewBean viewBean=getParentViewBean();      AuthViewBeanBase dsameVB=(AuthViewBeanBase)viewBean;      String value=(String)viewBean.getDisplayFieldValue(getName());      buffer=new NonSyncStringBuffer("<a href=\"");      String pgEncoding=(String)dsameVB.getDisplayFieldValue(AuthViewBeanBase.PAGE_ENCODING);      NonSyncStringBuffer url=new NonSyncStringBuffer(value);      url.append(value.contains("?") ? '&' : '?');      url.append(AuthViewBeanBase.PAGE_ENCODING).append('=').append(pgEncoding);      appendQueryParams(url);      if (getAnchor() != null) {        url.append("#").append(getAnchor());      }      buffer.append(ESAPI.encoder().encodeForHTMLAttribute(url.toString())).append('\"');      if (getTarget() != null) {        buffer.append(" target=\"").append(getTarget()).append("\"");      }      if (getTitle() != null) {        buffer.append(" title=\"").append(getTitle()).append("\"");      }      appendCommonHtmlAttributes(buffer);      appendJavaScriptAttributes(buffer);      appendStyleAttributes(buffer);      buffer.append(">");      displayed=true;    } else {      displayed=false;    }  } catch (  CompleteRequestException e) {    abortedException=e;    return SKIP_BODY;  }  if (displayed) {    return EVAL_BODY_BUFFERED;  } else {    return SKIP_BODY;  }}  }
class C{  public static boolean returnBindErrorMessages(){  return directoryServer.returnBindErrorMessages;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  Node appendedChild;  doc=(Document)load("staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);{    boolean success=false;    try {      appendedChild=employeeNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public NightModeHelper(Activity activity,int theme){  int currentMode=(activity.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK);  mPrefs=PreferenceManager.getDefaultSharedPreferences(activity);  init(activity,theme,mPrefs.getInt(PREF_KEY,currentMode));}  }
class C{  private int handleX(String value,DoubleMetaphoneResult result,int index){  if (index == 0) {    result.append('S');    index++;  } else {    if (!((index == value.length() - 1) && (contains(value,index - 3,3,"IAU","EAU") || contains(value,index - 2,2,"AU","OU")))) {      result.append("KS");    }    index=contains(value,index + 1,1,"C","X") ? index + 2 : index + 1;  }  return index;}  }
class C{  public boolean containsAudience(String audience){  if ((audience != null) && !(audience.length() == 0)) {    if (_audience.contains((String)audience)) {      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  public SubjectProxyViewBean(){  super("SubjectProxy");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  private void webServerStart(){  mAppManager.startService(WebServerService.class,WEB_SERVER_SERVICE_START);}  }
class C{  public void submitRequiredInfo(Callback[] callback){  if (debug.messageEnabled() && callback != null && callback.length > 0) {    debug.message("submit required info... :" + callback[0]);  }  if (isPureJAAS()) {    authContext.getLoginState().setSubmittedCallback(callback,this);  } else {    authContext.getLoginState().setSubmittedCallback_NoThread(callback);  }  if (debug.messageEnabled()) {    debug.message("Returning from submitRequiredInfo");  }}  }
class C{  protected final boolean askConfirmation(LocalizableMessage prompt,boolean defaultValue,LocalizedLogger logger) throws ClientException {  int nTries=0;  while (nTries < CONFIRMATION_MAX_TRIES) {    nTries++;    try {      return confirmAction(prompt,defaultValue);    } catch (    ClientException ce) {      if (ce.getMessageObject().toString().contains(ERR_CONFIRMATION_TRIES_LIMIT_REACHED.get(nTries))) {        throw ce;      }      logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));      println();    }  }  throw new ClientException(ReturnCode.ERROR_USER_DATA,ERR_CONFIRMATION_TRIES_LIMIT_REACHED.get(CONFIRMATION_MAX_TRIES));}  }
class C{  public Assertion createSSOAssertion(String id,AssertionArtifact artifact,String destID,String targetUrl,String version) throws SAMLException {  return createSSOAssertion(id,artifact,null,null,destID,targetUrl,version);}  }
class C{  public LocalObject(){}  }
class C{  @Override public Map<String,MappedClass> read(BufferedReader fileReader) throws Exception {  Map<String,MappedClass> remap=new HashMap<String,MappedClass>();  int lineNumber=0;  String line=null;  MappedClass curClass=null;  while ((line=fileReader.readLine()) != null) {    lineNumber++;    int commentPos=line.indexOf('#');    if (commentPos >= 0) {      line=line.substring(0,commentPos);    }    if (line.trim().length() <= 0) {      continue;    }    int indent=0;    for (int i=0; i < line.length(); i++) {      if (line.charAt(i) != '\t') {        break;      }      indent++;    }    String[] parts=line.trim().split("\\s");    try {      String token=parts[0];      if (token.equalsIgnoreCase("CLASS")) {        if (indent <= 0) {          curClass=readClass(parts);          remap.put(curClass.getOriginalName(),curClass);        } else {        }      } else       if (token.equalsIgnoreCase("FIELD")) {        if (curClass == null) {          throw new Exception("Unexpected FIELD entry (Line: " + lineNumber + " )");        }        addField(curClass,parts);      } else       if (token.equalsIgnoreCase("METHOD")) {        if (curClass == null) {          throw new Exception("Unexpected METHOD entry (Line: " + lineNumber + " )");        }        addMethod(curClass,parts);      } else       if (token.equalsIgnoreCase("ARG")) {        if (curClass == null) {          throw new Exception("Unexpected ARG entry (Line: " + lineNumber + " )");        }      }    } catch (    ArrayIndexOutOfBoundsException|IllegalArgumentException ex) {      throw new Exception("Malformed line:\n" + line);    }  }  for (  String className : remap.keySet()) {    MappedClass mappedClass=remap.get(className);    remap=MappingFactory.linkMappings(mappedClass,remap);  }  return remap;}  }
class C{  private static void skip(GifParameters gif) throws java.io.IOException {  do {    readBlock(gif);  } while (gif.blockSize > 0);}  }
class C{  private void registerDefaultTags(){  Class<?>[] defaultTagClasses={AttributeValueTag.class,DNTag.class,FileTag.class,FirstNameTag.class,GUIDTag.class,IfAbsentTag.class,IfPresentTag.class,LastNameTag.class,ListTag.class,ParentDNTag.class,PresenceTag.class,RandomTag.class,RDNTag.class,SequentialTag.class,StaticTextTag.class,UnderscoreDNTag.class,UnderscoreParentDNTag.class};  for (  Class<?> c : defaultTagClasses) {    try {      Tag t=(Tag)c.newInstance();      registeredTags.put(toLowerCase(t.getName()),t);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public void initializeCoreConfig() throws ConfigException, InitializationException {  GlobalCfg globalConfig=serverContext.getRootConfig().getGlobalConfiguration();  globalConfig.addChangeListener(this);  Set<String> smtpServers=globalConfig.getSMTPServer();  if (smtpServers != null) {    for (    String server : smtpServers) {      try {        HostPort.valueOf(server,SMTP_DEFAULT_PORT);      } catch (      RuntimeException e) {        LocalizableMessage message=ERR_CONFIG_CORE_INVALID_SMTP_SERVER.get(server);        throw new ConfigException(message,e);      }    }  }  applyGlobalConfiguration(globalConfig,serverContext);}  }
class C{  public SAML2ConfigBuilder customAttributeMapperClassName(String customAttributeMapperClassName){  this.customAttributeMapperClassName=customAttributeMapperClassName;  return this;}  }
class C{  public ClientParamsStack(ClientParamsStack stack,HttpParams aparams,HttpParams cparams,HttpParams rparams,HttpParams oparams){  this((aparams != null) ? aparams : stack.getApplicationParams(),(cparams != null) ? cparams : stack.getClientParams(),(rparams != null) ? rparams : stack.getRequestParams(),(oparams != null) ? oparams : stack.getOverrideParams());}  }
class C{  @Override public void close(){  if (rootRenderer != null) {    rootRenderer.close();  }  pdfDocument.close();}  }
class C{  private void checkComplianceAttributes(AttrSet attrSet,boolean ignoreCompliance) throws AMException {  if (!ignoreCompliance && ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {    complianceImpl.verifyAttributes(attrSet);  }}  }
class C{  @Override public void write(String str){synchronized (lock) {    buf.append(str);  }}  }
class C{  public static ByteString valueOfLong(long l){  final byte[] bytes=new byte[8];  for (int i=7; i >= 0; i--) {    bytes[i]=(byte)l;    l>>>=8;  }  return wrap(bytes);}  }
class C{  private SOAPMessage FormSOAPError(Message req,String faultCode,String faultString){  String logMsg;  if (req == null) {    logMsg=faultString;  } else {    logMsg=Utils.bundle.getString("messageID") + "=" + req.getCorrelationHeader().getMessageID()+ ". "+ faultString;  }  String[] data={logMsg};  LogUtil.error(Level.INFO,LogUtil.WS_FAILURE,data);  try {    SOAPFault sf=new SOAPFault(new QName(SOAPBindingConstants.NS_SOAP,faultCode),faultString);    Message resp=new Message(sf);    return resp.toSOAPMessage();  } catch (  Exception e) {    Utils.debug.error("SOAPReceiver.FormSOAPError: ",e);  }  return null;}  }
class C{  public NSString(byte[] bytes,String encoding) throws UnsupportedEncodingException {  this(bytes,0,bytes.length,encoding);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  protected AbstractLongSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  public InvalidSessionIdException(){  this("");}  }
class C{  private String extractNameFromURL(URL url,Map<String,String> labels){  String text=url.toString();  int idx=text.lastIndexOf('!');  if (idx > 0) {    text=text.substring(0,idx);  }  String[] parts=text.split("/");  if (parts != null && parts.length > 2) {    String version=parts[parts.length - 2];    String name=parts[parts.length - 3];    labels.put("project",name);    labels.put("version",version);    return name;  }  return null;}  }
class C{  private static void swap(double x[],int a,int b){  double t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  public void resetDebug(String mf){  getDebugServiceInstance().resetDebug(mf);}  }
class C{  void publish(FakeReplicationDomain domain,byte[] msg){  UpdateMsg updateMsg;synchronized (this) {    updateMsg=new UpdateMsg(domain.getGenerator().newCSN(),msg);    domain.prepareWaitForAckIfAssuredEnabled(updateMsg);    domain.publish(updateMsg);  }  try {    domain.waitForAckIfAssuredEnabled(updateMsg);  } catch (  TimeoutException ex) {    logger.info(NOTE_DS_ACK_TIMEOUT,domain.getBaseDN(),domain.getAssuredTimeout(),updateMsg);  }}  }
class C{  public static ValueExp value(boolean val){  return new BooleanValueExp(val);}  }
class C{  public static void pickImage(Context context,Fragment fragment){  pickImage(context,fragment,REQUEST_PICK);}  }
class C{  public UserData(){  interactive=true;  startServer=true;  enableWindowsService=false;  forceOnError=true;  verbose=false;  LinkedList<String> baseDn=CollectionUtils.newLinkedList("dc=example,dc=com");  NewSuffixOptions defaultNewSuffixOptions=NewSuffixOptions.createEmpty(baseDn);  setNewSuffixOptions(defaultNewSuffixOptions);  int defaultLdapPort=getDefaultPort();  if (defaultLdapPort != -1) {    setServerPort(defaultLdapPort);  }  int defaultAdminPort=getDefaultAdminConnectorPort();  if (defaultAdminPort != -1) {    setAdminConnectorPort(defaultAdminPort);  }  setHostName(getDefaultHostName());  setDirectoryManagerDn(DN.valueOf(Constants.DIRECTORY_MANAGER_DN));  setNewSuffixOptions(defaultNewSuffixOptions);  DataReplicationOptions repl=DataReplicationOptions.createStandalone();  setReplicationOptions(repl);  setGlobalAdministratorUID(Constants.GLOBAL_ADMIN_UID);  SuffixesToReplicateOptions suffixes=new SuffixesToReplicateOptions(SuffixesToReplicateOptions.Type.REPLICATE_WITH_EXISTING_SUFFIXES,new HashSet<SuffixDescriptor>(),new HashSet<SuffixDescriptor>());  setSuffixesToReplicateOptions(suffixes);  SecurityOptions sec=SecurityOptions.createNoCertificateOptions();  sec.setSslPort(getDefaultSslPort(defaultLdapPort));  setSecurityOptions(sec);  remoteWithNoReplicationPort=new HashMap<>();  createDefaultJavaArguments();}  }
class C{  public RestException(int errorCode,Object[] params){  this.errorCode=errorCode;  this.params=params;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public static void assertNullability(ResultSet rs,boolean[] nullability) throws SQLException {  ResultSetMetaData rsmd=rs.getMetaData();  int actualCols=rsmd.getColumnCount();  assertEquals("Unexpected column count:",nullability.length,rsmd.getColumnCount());  for (int i=0; i < actualCols; i++) {    int expected=nullability[i] ? ResultSetMetaData.columnNullable : ResultSetMetaData.columnNoNulls;    assertEquals("Column nullability do not match for column " + (i + 1),expected,rsmd.isNullable(i + 1));  }}  }
class C{  public ServerEntryNotFoundException(Throwable t){  super(t.getMessage());  fillInStackTrace();}  }
class C{  public CheckSession(){  ssoTokenManager=InjectorHolder.getInstance(SSOTokenManager.class);  openAMSettings=InjectorHolder.getInstance(OpenAMSettings.class);  signingManager=InjectorHolder.getInstance(SigningManager.class);  clientRegistrationStore=InjectorHolder.getInstance(ClientRegistrationStore.class);  cts=InjectorHolder.getInstance(CTSPersistentStore.class);  tokenAdapter=InjectorHolder.getInstance(Key.get(new TypeLiteral<TokenAdapter<JsonValue>>(){  },Names.named(OAuth2Constants.CoreTokenParams.OAUTH_TOKEN_ADAPTER)));}  }
class C{  public EasyNfcMod(final Context context){  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.GINGERBREAD_MR1) {    nfcAdapter=NfcAdapter.getDefaultAdapter(context);  }}  }
class C{  public ImageInfo(int image,int title,int id){  this.image=image;  this.title=title;  this.id=id;}  }
class C{  @Override public int hashCode(){  if (hash == 0) {    int result=17;    result=37 * result + range.hashCode();    long bitsWeight=Double.doubleToLongBits(weight);    result=37 * result + (int)(bitsWeight ^ (bitsWeight >>> 32));    hash=result;  }  return hash;}  }
class C{  public final void testGetPort(){  int portNumber=-1099;  LDAPCertStoreParameters cp=new LDAPCertStoreParameters("serverName",portNumber);  assertTrue(cp.getPort() == portNumber);}  }
class C{  public boolean isDomainSensitive(){  return CollectionUtils.isNotEmpty(permittedDomains) || CollectionUtils.isNotEmpty(restrictedDomains);}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  @Override public Animation onCreateAnimation(final int transit,final boolean enter,final int nextAnim){  return super.onCreateAnimation(transit,enter,nextAnim);}  }
class C{  @Override public void close(){  if (closed) {    return;  }  isClosing=true;  try {    if (writer != null) {      if (catalog.isFlushed()) {        throw new PdfException(PdfException.CannotCloseDocumentWithAlreadyFlushedPdfCatalog);      }      updateXmpMetadata();      if (getXmpMetadata() != null) {        PdfStream xmp=new PdfStream().makeIndirect(this);        xmp.getOutputStream().write(xmpMetadata);        xmp.put(PdfName.Type,PdfName.Metadata);        xmp.put(PdfName.Subtype,PdfName.XML);        PdfEncryption crypto=writer.crypto;        if (crypto != null && !crypto.isMetadataEncrypted()) {          PdfArray ar=new PdfArray();          ar.add(PdfName.Crypt);          xmp.put(PdfName.Filter,ar);        }        catalog.getPdfObject().put(PdfName.Metadata,xmp);      }      checkIsoConformance();      PdfObject crypto=null;      if (properties.appendMode) {        if (structTreeRoot != null && structTreeRoot.getPdfObject().isModified()) {          tryFlushTagStructure();        }        if (catalog.isOCPropertiesMayHaveChanged() && catalog.getOCProperties(false).getPdfObject().isModified()) {          catalog.getOCProperties(false).flush();        }        if (catalog.pageLabels != null) {          catalog.put(PdfName.PageLabels,catalog.pageLabels.buildTree());        }        PdfObject pageRoot=catalog.getPageTree().generateTree();        if (catalog.getPdfObject().isModified() || pageRoot.isModified()) {          catalog.getPdfObject().put(PdfName.Pages,pageRoot);          catalog.getPdfObject().flush(false);        }        for (        Map.Entry<PdfName,PdfNameTree> entry : catalog.nameTrees.entrySet()) {          PdfNameTree tree=entry.getValue();          if (tree.isModified()) {            ensureTreeRootAddedToNames(tree.buildTree().makeIndirect(this),entry.getKey());          }        }        if (info.getPdfObject().isModified()) {          info.flush();        }        flushFonts();        writer.flushModifiedWaitingObjects();        if (writer.crypto != null) {          assert reader.decrypt.getPdfObject() == writer.crypto.getPdfObject() : "Conflict with source encryption";          crypto=reader.decrypt.getPdfObject();        }      } else {        if (structTreeRoot != null) {          tryFlushTagStructure();        }        if (catalog.isOCPropertiesMayHaveChanged()) {          catalog.getPdfObject().put(PdfName.OCProperties,catalog.getOCProperties(false).getPdfObject());          catalog.getOCProperties(false).flush();        }        if (catalog.pageLabels != null) {          catalog.put(PdfName.PageLabels,catalog.pageLabels.buildTree());        }        catalog.getPdfObject().put(PdfName.Pages,catalog.getPageTree().generateTree());        for (        Map.Entry<PdfName,PdfNameTree> entry : catalog.nameTrees.entrySet()) {          PdfNameTree tree=entry.getValue();          if (tree.isModified()) {            ensureTreeRootAddedToNames(tree.buildTree().makeIndirect(this),entry.getKey());          }        }        for (int pageNum=1; pageNum <= getNumberOfPages(); pageNum++) {          getPage(pageNum).flush();        }        catalog.getPdfObject().flush(false);        info.flush();        flushFonts();        writer.flushWaitingObjects();        if (isFlushUnusedObjects()) {          for (int i=0; i < xref.size(); i++) {            PdfIndirectReference indirectReference=xref.get(i);            if (!indirectReference.isFree() && !indirectReference.checkState(PdfObject.FLUSHED)) {              PdfObject object=indirectReference.getRefersTo();              object.flush();            }          }        }      }      byte[] originalFileID=null;      if (crypto == null && writer.crypto != null) {        originalFileID=writer.crypto.getDocumentId();        crypto=writer.crypto.getPdfObject();        crypto.makeIndirect(this);        writer.crypto=null;        crypto.flush(false);      }      PdfObject fileId;      boolean isModified=false;      if (originalFileID == null) {        if (getReader() != null) {          originalFileID=getReader().getOriginalFileId();          isModified=true;        }        if (originalFileID == null) {          originalFileID=PdfEncryption.generateNewDocumentId();        }      }      fileId=PdfEncryption.createInfoId(originalFileID,isModified);      trailer.put(PdfName.Root,catalog.getPdfObject());      trailer.put(PdfName.Info,info.getPdfObject());      xref.writeXrefTableAndTrailer(this,fileId,crypto);      writer.flush();      Counter counter=getCounter();      if (counter != null) {        counter.onDocumentWritten(writer.getCurrentPos());      }    }    catalog.getPageTree().clearPageRefs();    removeAllHandlers();  } catch (  IOException e) {    throw new PdfException(PdfException.CannotCloseDocument,e,this);  } finally {    if (writer != null && isCloseWriter()) {      try {        writer.close();      } catch (      Exception e) {        Logger logger=LoggerFactory.getLogger(PdfDocument.class);        logger.error(LogMessageConstant.PDF_WRITER_CLOSING_FAILED,e);      }    }    if (reader != null && isCloseReader()) {      try {        reader.close();      } catch (      Exception e) {        Logger logger=LoggerFactory.getLogger(PdfDocument.class);        logger.error(LogMessageConstant.PDF_READER_CLOSING_FAILED,e);      }    }  }  closed=true;}  }
class C{  public PixelInterleavedSampleModel(int dataType,int w,int h,int pixelStride,int scanlineStride,int bandOffsets[]){  super(dataType,w,h,pixelStride,scanlineStride,bandOffsets);  int minBandOff=this.bandOffsets[0];  int maxBandOff=this.bandOffsets[0];  for (int i=1; i < this.bandOffsets.length; i++) {    minBandOff=Math.min(minBandOff,this.bandOffsets[i]);    maxBandOff=Math.max(maxBandOff,this.bandOffsets[i]);  }  maxBandOff-=minBandOff;  if (maxBandOff > scanlineStride) {    throw new IllegalArgumentException("Offsets between bands must be" + " less than the scanline " + " stride");  }  if (pixelStride * w > scanlineStride) {    throw new IllegalArgumentException("Pixel stride times width " + "must be less than or " + "equal to the scanline "+ "stride");  }  if (pixelStride < maxBandOff) {    throw new IllegalArgumentException("Pixel stride must be greater" + " than or equal to the offsets" + " between bands");  }}  }
class C{  int[] findNearestArea(int pixelX,int pixelY,int spanX,int spanY,int[] result){  return findNearestArea(pixelX,pixelY,spanX,spanY,spanX,spanY,false,result,null);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static AddRequest copyOfAddRequest(final AddRequest request){  return new AddRequestImpl(request);}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(VALUE_TEXTFIELD,model.hasValueOptionList() ? CCSelect.class : TextField.class);}  }
class C{  public static void addEntries(String... lines) throws Exception {  for (  Entry entry : makeEntries(lines)) {    addEntry(entry);  }}  }
class C{  @Override public void onBackPressed(){  delegate.onBackPressed();}  }
class C{  public static boolean compileClasses(String nameRoot){  return false;}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public boolean validate(String value,String rule){  return validate(value);}  }
class C{  public static void createBackendOnline(String backendName,Collection<DN> baseDNs,ManagedObjectDefinition<? extends BackendCfgClient,? extends BackendCfg> backendType,ConnectionWrapper conn) throws Exception {  createBackend(conn.getRootConfiguration(),backendName,baseDNs,backendType);}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecCipher02(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    try {      TestDataGenerator g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfoDamaged,null);      EncryptedPrivateKeyInfo epki;      if (g.ap() == null) {        epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());      } else {        epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());      }      try {        epki.getKeySpec(g.c());        fail(algName[i][0] + ", " + algName[i][1]);      } catch (      InvalidKeySpecException ok) {      }      performed=true;    } catch (    TestDataGenerator.AllowedFailure allowedFailure) {    }catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node refChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node insertedNode;  doc=(Document)load("staff",true);  newChild=doc.createElement("newChild");  refChild=doc.createElement("refChild");  elementList=doc.getElementsByTagName("employee");  elementNode=elementList.item(1);{    boolean success=false;    try {      insertedNode=elementNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  @Override public long end() throws IOException {  long swallowed=0;  int read=0;  while ((read=doRead(readChunk)) >= 0) {    swallowed+=read;    if (maxSwallowSize > -1 && swallowed > maxSwallowSize) {      throwIOException(sm.getString("inputFilter.maxSwallow"));    }  }  return lastValid - pos;}  }
class C{  public boolean isSigned(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].signed;}  }
class C{  void dispatchServerCallback(TransactInfo transactInfo,Marshallable invokeParam){  mClientProxy.transact(transactInfo,invokeParam,null);}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateCrtKeyParameters key){  super(key);  this.publicExponent=key.getPublicExponent();  this.primeP=key.getP();  this.primeQ=key.getQ();  this.primeExponentP=key.getDP();  this.primeExponentQ=key.getDQ();  this.crtCoefficient=key.getQInv();}  }
class C{  MetalFontDesktopProperty(int type){  this(propertyMapping[type],type);}  }
class C{  int lastUseIndex(Name n){  if (arguments == null)   return -1;  for (int i=arguments.length; --i >= 0; ) {    if (arguments[i] == n)     return i;  }  return -1;}  }
class C{  private static String writeAsStringNoEolSlash(JsonValue json) throws JsonProcessingException {  return writePrettyValueAsString(json).replaceAll("\\n"," \\\n         ");}  }
class C{  public LocalizedHttpApplicationException(LocalizableMessage message){  super(message.toString());  this.message=message;}  }
class C{  public static boolean isContent(int c){  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public DateTimeParseException(String message,CharSequence parsedData,int errorIndex,Throwable cause){  super(message,cause);  this.parsedString=parsedData.toString();  this.errorIndex=errorIndex;}  }
class C{  public void addAdjustmentListener(AdjustmentListener l){  listenerList.add(AdjustmentListener.class,l);}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  addToBuffer(result,true,false,null);  return result.toString();}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new OutputLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    bufOff=0;    len-=gapLen;    inOff+=gapLen;    while (len > buf.length) {      resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  if (bufOff == buf.length) {    resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);    bufOff=0;  }  return resultLen;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeSchemaName=getStringOptionValue(IArgument.ATTRIBUTE_SCHEMA);  String type=getStringOptionValue(ARGUMENT_TYPE);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName,type};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MODIFY_ATTRIBUTE_SCHEMA_TYPE",params);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeSchemaName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,type,"attribute schema does not exist"};      attributeSchemaNoExist(attributeSchemaName,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_TYPE",args);    }    attrSchema.setType(type);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_MODIFY_ATTRIBUTE_SCHEMA_TYPE",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-modify-type-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,type,e.getMessage()};    debugError("ModifyAttributeSchemaType.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_TYPE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,type,e.getMessage()};    debugError("ModifyAttributeSchemaType.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_TYPE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  protected void normalizeAndPrint(char c,boolean isAttValue){switch (c) {case '<':{      fOut.print("&lt;");      break;    }case '>':{    fOut.print("&gt;");    break;  }case '&':{  fOut.print("&amp;");  break;}case '"':{if (isAttValue) {  fOut.print("&quot;");} else {  fOut.print("\"");}break;}case '\r':{fOut.print("&#xD;");break;}case '\n':{if (fCanonical) {fOut.print("&#xA;");break;}}default :{if (fXML11 && ((c >= 0x01 && c <= 0x1F && c != 0x09 && c != 0x0A) || (c >= 0x7F && c <= 0x9F) || c == 0x2028) || isAttValue && (c == 0x09 || c == 0x0A)) {fOut.print("&#x");fOut.print(Integer.toHexString(c).toUpperCase());fOut.print(";");} else {fOut.print(c);}}}}  }
class C{  public String toString(){  String answer=super.toString();  if (_exception != null && _exception != this) {    answer+=" [Caused by " + _exception.toString() + "]";  }  return answer;}  }
class C{  public void optimize_selected_items(){  if (board_is_read_only)   return;  if (!(interactive_state instanceof StateSelectedItem))   return;  r_board.generate_snapshot();  interactive_action_thread=new IteraPullTightThread(this);  interactive_action_thread.start();}  }
class C{  public void initializeNotificationHandlers() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addAccountStatusNotificationHandlerAddListener(this);  rootConfiguration.addAccountStatusNotificationHandlerDeleteListener(this);  for (  String handlerName : rootConfiguration.listAccountStatusNotificationHandlers()) {    AccountStatusNotificationHandlerCfg config=rootConfiguration.getAccountStatusNotificationHandler(handlerName);    config.addChangeListener(this);    if (config.isEnabled()) {      String className=config.getJavaClass();      loadAndInstallNotificationHandler(className,config);    }  }}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof SMPrincipal)) {    return false;  }  SMPrincipal that=(SMPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  private NullOutputStream(){}  }
class C{  public int rtf(XPathContext support){  return DTM.NULL;}  }
class C{  public FederationException(String message){  super(message);}  }
class C{  public BOMInputStream(InputStream delegate,ByteOrderMark... boms){  this(delegate,false,boms);}  }
class C{  public static String fixDescReverse(String description,Map<String,MappedClass> oldNamestoClasses,Map<String,MappedClass> newNamesToClasses){  if (description == null || description.length() == 0 || isPrimitive(description)) {    return description;  }  if (description.contains("L") && description.contains(";")) {    if (description.startsWith("(") || (description.startsWith("L") || description.startsWith("[")) && description.endsWith(";")) {      List<String> findClasses=RegexUtils.matchDescriptionClasses(description);      for (      String found : findClasses) {        MappedClass mc=newNamesToClasses.get(found);        if (mc != null) {          description=description.replace(found,mc.getOriginalName());        }      }      return description;    }  } else {    MappedClass mc=oldNamestoClasses.get(description);    if (mc == null) {      return description;    }    return mc.getNewName();  }  return description;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.TechnicalProtectionElement createTechnicalProtectionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TechnicalProtectionElementImpl();}  }
class C{  public static void createAgent(SSOToken ssoToken,String realm,String agentName,String agentType,Map attrValues,String serverURL,String agentURL) throws IdRepoException, SSOException, SMSException, ConfigurationException {  if ((serverURL == null) || (serverURL.trim().length() == 0)) {    throw new ConfigurationException("create.agent.invalid.server.url",null);  }  if ((agentURL == null) || (agentURL.trim().length() == 0)) {    throw new ConfigurationException("create.agent.invalid.agent.url",null);  }  FQDNUrl serverFQDNURL=null;  FQDNUrl agentFQDNURL=null;  try {    serverFQDNURL=new FQDNUrl(serverURL);  } catch (  MalformedURLException e) {    throw new ConfigurationException("create.agent.invalid.server.url",null);  }  try {    agentFQDNURL=new FQDNUrl(agentURL);  } catch (  MalformedURLException e) {    throw new ConfigurationException("create.agent.invalid.agent.url",null);  }  createAgentEx(ssoToken,realm,agentName,agentType,attrValues,serverFQDNURL,agentFQDNURL);}  }
class C{  public String renameEntry(SSOToken token,int objectType,String entryDN,String newName,boolean deleteOldName) throws AMException {  try {    PersistentObject po=UMSObject.getObjectHandle(token,new Guid(entryDN));    String newRDN=getNamingAttribute(objectType) + "=" + newName;    po.rename(newRDN,deleteOldName);    return po.getDN();  } catch (  AccessRightsException e) {    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.renameEntry(): User does " + "not have sufficient access rights ",e);    }    throw new AMException(token,"460");  }catch (  EntryNotFoundException e) {    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.renameEntry(): Entry " + "not found: ",e);    }    String msgid=getEntryNotFoundMsgID(objectType);    String entryName=getEntryName(e);    Object args[]={entryName};    throw new AMException(AMSDKBundle.getString(msgid,args),msgid,args);  }catch (  UMSException ume) {    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.renameEntry(): Unable to " + "rename entry: ",ume);    }    throw new AMException(token,"360",ume);  }}  }
class C{  @Override public boolean allowedInBranch(){  return false;}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  private void siftUp(int k,RunnableScheduledFuture<?> key){  while (k > 0) {    int parent=(k - 1) >>> 1;    RunnableScheduledFuture<?> e=queue[parent];    if (key.compareTo(e) >= 0)     break;    queue[k]=e;    setIndex(e,k);    k=parent;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  protected void drawCropGrid(@NonNull Canvas canvas){  if (mShowCropGrid) {    if (mGridPoints == null && !mCropViewRect.isEmpty()) {      mGridPoints=new float[(mCropGridRowCount) * 4 + (mCropGridColumnCount) * 4];      int index=0;      for (int i=0; i < mCropGridRowCount; i++) {        mGridPoints[index++]=mCropViewRect.left;        mGridPoints[index++]=(mCropViewRect.height() * (((float)i + 1.0f) / (float)(mCropGridRowCount + 1))) + mCropViewRect.top;        mGridPoints[index++]=mCropViewRect.right;        mGridPoints[index++]=(mCropViewRect.height() * (((float)i + 1.0f) / (float)(mCropGridRowCount + 1))) + mCropViewRect.top;      }      for (int i=0; i < mCropGridColumnCount; i++) {        mGridPoints[index++]=(mCropViewRect.width() * (((float)i + 1.0f) / (float)(mCropGridColumnCount + 1))) + mCropViewRect.left;        mGridPoints[index++]=mCropViewRect.top;        mGridPoints[index++]=(mCropViewRect.width() * (((float)i + 1.0f) / (float)(mCropGridColumnCount + 1))) + mCropViewRect.left;        mGridPoints[index++]=mCropViewRect.bottom;      }    }    if (mGridPoints != null) {      canvas.drawLines(mGridPoints,mCropGridPaint);    }  }  if (mShowCropFrame) {    canvas.drawRect(mCropViewRect,mCropFramePaint);  }  if (mIsFreestyleCropEnabled) {    canvas.save();    mTempRect.set(mCropViewRect);    mTempRect.inset(mCropRectCornerTouchAreaLineLength,-mCropRectCornerTouchAreaLineLength);    canvas.clipRect(mTempRect,Region.Op.DIFFERENCE);    mTempRect.set(mCropViewRect);    mTempRect.inset(-mCropRectCornerTouchAreaLineLength,mCropRectCornerTouchAreaLineLength);    canvas.clipRect(mTempRect,Region.Op.DIFFERENCE);    canvas.drawRect(mCropViewRect,mCropFrameCornersPaint);    canvas.restore();  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  FSUtils.debug.message("FSSSOAndFedService.doPost: Called");  if ((request == null) || (response == null)) {    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("nullInputParameter"));    return;  }  if (FSUtils.needSetLBCookieAndRedirect(request,response,true)) {    return;  }  if (isLECPRequest(request)) {    String useForward=(String)request.getAttribute(Constants.FORWARD_PARAM);    if (useForward != null && useForward.equals(Constants.FORWARD_YES_VALUE)) {      FSUtils.debug.message("FSSSOAndFedService.doPost: LECP forward");      this.doGet(request,response);    } else {      try {        MimeHeaders mimeHeaders=SAMLUtils.getMimeHeaders(request);        ServletInputStream sInputStream=request.getInputStream();        SOAPMessage soapMessage=msgFactory.createMessage(mimeHeaders,sInputStream);        this.onMessage(request,response,soapMessage);      } catch (      SOAPException se) {        throw new ServletException(se);      }    }    return;  }  String enocodedAuthnRequest=request.getParameter(IFSConstants.POST_AUTHN_REQUEST_PARAM);  if (enocodedAuthnRequest == null) {    doGet(request,response);    return;  }  enocodedAuthnRequest=enocodedAuthnRequest.replace(' ','\n');  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSSOAndFedService.doPost: " + "BASE64 encoded AuthnRequest at the RECEIVER: " + enocodedAuthnRequest);  }  FSAuthnRequest authnRequest=null;  try {    authnRequest=FSAuthnRequest.parseBASE64EncodedString(enocodedAuthnRequest);    if (authnRequest == null) {      FSUtils.debug.error("FSSSOAndFedService: " + FSUtils.bundle.getString("invalidAuthnRequest"));      String[] data={FSUtils.bundle.getString("invalidAuthnRequest")};      LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_REQUEST,data);      response.sendError(response.SC_BAD_REQUEST,FSUtils.bundle.getString("invalidAuthnRequest"));      return;    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSSOAndFedService: " + "AuthnRequest received:" + authnRequest.toXMLString());      }    }  } catch (  FSException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSSOAndFedService: " + FSUtils.bundle.getString("invalidAuthnRequest"),e);    }    response.sendError(response.SC_BAD_REQUEST,FSUtils.bundle.getString("invalidAuthnRequest"));    return;  }  String metaAlias=null;  String realm=null;  String hostEntityId=null;  IDPDescriptorType hostedDesc=null;  BaseConfigType hostedConfig=null;  try {    metaAlias=FSServiceUtils.getMetaAlias(request);    realm=IDFFMetaUtils.getRealmByMetaAlias(metaAlias);    hostEntityId=metaManager.getEntityIDByMetaAlias(metaAlias);    hostedDesc=metaManager.getIDPDescriptor(realm,hostEntityId);    hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostEntityId);  } catch (  Exception e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSSOAndFedService: couldn't obtain hosted entity id:",e);    }  }  handleAuthnRequest(request,response,authnRequest,false,false,realm,hostEntityId,metaAlias,hostedDesc,hostedConfig);  return;}  }
class C{  public FrameBodyTDOR(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  @Inject public PermissionRequestEndpoint(OAuth2ProviderSettingsFactory providerSettingsFactory,OAuth2RequestFactory requestFactory,UmaProviderSettingsFactory umaProviderSettingsFactory,ExtensionFilterManager extensionFilterManager,UmaExceptionHandler exceptionHandler,JacksonRepresentationFactory jacksonRepresentationFactory){  this.providerSettingsFactory=providerSettingsFactory;  this.requestFactory=requestFactory;  this.umaProviderSettingsFactory=umaProviderSettingsFactory;  this.extensionFilterManager=extensionFilterManager;  this.exceptionHandler=exceptionHandler;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  String tempPrefix="";  if (includeNS) {    if (prefix == null) {      prefix=DSTConstants.DEFAULT_NS_PREFIX;    }    tempPrefix=prefix + ":";  }  if (declareNS) {    if (nameSpaceURI == null) {      DSTUtils.debug.error("DSTModify.toString: Name Space is " + "not defined");      return "";    }  }  StringBuffer sb=new StringBuffer(300);  sb.append("<").append(tempPrefix).append("Modify");  if (id != null && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  if (itemID != null && itemID.length() != 0) {    sb.append(" itemID=\"").append(itemID).append("\"");  }  if (declareNS) {    sb.append(" xmlns:").append(prefix).append("=\"").append(nameSpaceURI).append("\"").append(" xmlns=\"").append(nameSpaceURI).append("\"");  }  sb.append(">");  if (encryptedResourceID == null) {    sb.append("<").append(tempPrefix).append("ResourceID").append(">").append(resourceID).append("</").append(tempPrefix).append("ResourceID").append(">");  } else {    sb.append(encryptedResourceID.toString(nameSpaceURI));  }  Iterator iter=modification.iterator();  while (iter.hasNext()) {    DSTModification modification=(DSTModification)iter.next();    sb.append(modification.toString());  }  sb.append("</").append(tempPrefix).append("Modify").append(">");  if (DSTUtils.debug.messageEnabled()) {    DSTUtils.debug.message("DSTModify.toString: " + sb.toString());  }  return sb.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr oldAttribute;  NodeList addressElementList;  Element testAddress;  Attr attrAddress;  doc=(Document)load("staff",true);  addressElementList=doc.getElementsByTagName("address");  testAddress=(Element)addressElementList.item(4);  oldAttribute=doc.createAttribute("oldAttribute");{    boolean success=false;    try {      attrAddress=testAddress.removeAttributeNode(oldAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public static void copyDirectory(File src,File dst) throws IOException {  if (src.isDirectory()) {    if (!dst.exists()) {      dst.mkdirs();    }    for (    String child : src.list()) {      copyDirectory(new File(src,child),new File(dst,child));    }  } else {    copyFile(src,dst);  }}  }
class C{  public StatefulAccessToken(String id,String authorizationCode,String resourceOwnerId,String clientId,String redirectUri,Set<String> scope,long expiryTime,RefreshToken refreshToken,String tokenName,String grantType,String nonce,String realm,String claims,String auditTrackingId,JsonValue confirmationKey){  this(id,authorizationCode,resourceOwnerId,clientId,redirectUri,scope,expiryTime,refreshToken,tokenName,grantType,nonce,realm,claims,auditTrackingId,TimeUnit.MILLISECONDS.toSeconds(currentTimeMillis()),confirmationKey);}  }
class C{  public static AuthenticationHandler passwordBased(final SecretProvider data,final boolean isDryRun){  return new AuthenticationHandler(data,isDryRun,false);}  }
class C{  @SuppressWarnings("unchecked") public void writeBigDecimal(java.math.BigDecimal x) throws SQLException {  attribs.add(x);}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  final Canvas canvas=new Canvas(mBitmap);  final Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  public Assertion createAssertion(Object token) throws SAMLException {  if (assertionVersion.equals(SAMLConstants.ASSERTION_VERSION_1_0)) {    return createAssertion(token,null,SAMLConstants.DEPRECATED_CONFIRMATION_METHOD_ARTIFACT,0);  } else   if (assertionVersion.equals(SAMLConstants.ASSERTION_VERSION_1_1)) {    return createAssertion(token,null,SAMLConstants.CONFIRMATION_METHOD_ARTIFACT,1);  } else {    throw new SAMLException(SAMLUtils.bundle.getString("assertionVersionNotSupport"));  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.IssuerNamesOfferedType createIssuerNamesOfferedType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.IssuerNamesOfferedTypeImpl();}  }
class C{  public boolean isVisible(){  return m_isVisible;}  }
class C{  boolean isSystemTheme(){  return (getClass() == MetalHighContrastTheme.class);}  }
class C{  int size(){  return scrolls.size();}  }
class C{  void adjustMultiRowSpan(int spanNeeded,int nrows,int rowIndex){  if ((rowIndex + nrows) > getCount()) {    nrows=getCount() - rowIndex;    if (nrows < 1) {      return;    }  }  int span=0;  for (int i=0; i < nrows; i++) {    RowView rv=getRow(rowIndex + i);    span+=rv.getPreferredSpan(Y_AXIS);  }  if (spanNeeded > span) {    int adjust=(spanNeeded - span);    int rowAdjust=adjust / nrows;    int firstAdjust=rowAdjust + (adjust - (rowAdjust * nrows));    RowView rv=getRow(rowIndex);    adjustments[rowIndex]=Math.max(adjustments[rowIndex],firstAdjust);    for (int i=1; i < nrows; i++) {      adjustments[rowIndex + i]=Math.max(adjustments[rowIndex + i],rowAdjust);    }  }}  }
class C{  JEStorage(final JEBackendCfg cfg,ServerContext serverContext) throws ConfigException {  this.serverContext=serverContext;  backendDirectory=getBackendDirectory(cfg);  config=cfg;  cfg.addJEChangeListener(this);}  }
class C{  public OpenSSOUserSubject(String user){  super(user);}  }
class C{  public ZipEntry(ZipEntry e){  Objects.requireNonNull(e,"entry");  name=e.name;  xdostime=e.xdostime;  mtime=e.mtime;  atime=e.atime;  ctime=e.ctime;  crc=e.crc;  size=e.size;  csize=e.csize;  method=e.method;  flag=e.flag;  extra=e.extra;  comment=e.comment;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.PolicyAttachmentElement createPolicyAttachmentElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.PolicyAttachmentElementImpl();}  }
class C{  public int querySurface(EGLSurface eglSurface,int what){  int[] value=new int[1];  EGL14.eglQuerySurface(mEGLDisplay,eglSurface,what,value,0);  return value[0];}  }
class C{  public static int hashIntArray(int[] array){  int intHash=0;  for (int i=0; i < array.length && i < 4; i++) {    intHash+=array[i] << (8 * i);  }  return intHash & 0x7FFFFFFF;}  }
class C{  public boolean isSpellCheck(){  return !getFieldFlag(FF_DO_NOT_SPELL_CHECK);}  }
class C{  public static boolean isSurrogatePair(String text,int idx){  return !(idx < 0 || idx > text.length() - 2) && isSurrogateHigh(text.charAt(idx)) && isSurrogateLow(text.charAt(idx + 1));}  }
class C{  public static JLabel createDefaultLabel(){  return createDefaultLabel(LocalizableMessage.EMPTY);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetownerdocument.class,args);}  }
class C{  public PdfCanvas openTag(TagReference tagReference){  if (tagReference.getRole() == null)   return this;  CanvasTag tag=new CanvasTag(tagReference.getRole(),tagReference.createNextMcid());  tag.setProperties(tagReference.getProperties());  return openTag(tag);}  }
class C{  static public void assertNull(String message,Object object){  assertTrue(message,object == null);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    logger.info("shootme:  dialog = " + requestEvent.getDialog());    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    Response response=messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);    }    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    this.byeSeen=true;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  boolean ancestorIsOk(ElemTemplateElement child){  while (child.getParentElem() != null && !(child.getParentElem() instanceof ElemExsltFunction)) {    ElemTemplateElement parent=child.getParentElem();    if (parent instanceof ElemExsltFuncResult || parent instanceof ElemVariable || parent instanceof ElemParam|| parent instanceof ElemMessage)     return true;    child=parent;  }  return false;}  }
class C{  public ECPRequestImpl(String xmlString) throws SAML2Exception {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (xmlDocument == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  parseElement(xmlDocument.getDocumentElement());}  }
class C{  public synchronized void clear(){  messageList.clear();}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public Compiler add(URL url){  config.classpath.add(url);  return this;}  }
class C{  @Override public Foo findByUuid_C_Last(String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_C_Last(uuid,companyId,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(6);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(", companyId=");  msg.append(companyId);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public static long lowerHexToUnsignedLong(String lowerHex){  int length=lowerHex.length();  if (length < 1 || length > 32)   throw isntLowerHexLong(lowerHex);  int i=length > 16 ? length - 16 : 0;  long result=0;  for (; i < length; i++) {    char c=lowerHex.charAt(i);    result<<=4;    if (c >= '0' && c <= '9') {      result|=c - '0';    } else     if (c >= 'a' && c <= 'f') {      result|=c - 'a' + 10;    } else {      throw isntLowerHexLong(lowerHex);    }  }  return result;}  }
class C{  public static Bitmap toRoundCorner(Bitmap bitmap){  int height=bitmap.getHeight();  int width=bitmap.getHeight();  Bitmap output=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(output);  final Paint paint=new Paint();  final Rect rect=new Rect(0,0,width,height);  paint.setAntiAlias(true);  canvas.drawARGB(0,0,0,0);  paint.setColor(0xff424242);  canvas.drawCircle(width / 2,height / 2,width / 2,paint);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));  canvas.drawBitmap(bitmap,rect,rect,paint);  return output;}  }
class C{  public void testTestBitNegative1(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(aNumber.testBit(number));}  }
class C{  public W3CEndpointReferenceBuilder serviceName(QName serviceName){  this.serviceName=serviceName;  return this;}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof Attributes)) {    Attributes target=(Attributes)obj;    if (ignoreCase != target.isCaseIgnored()) {      return false;    }    if (size() == target.size()) {      Attribute their, mine;      try {        NamingEnumeration<?> theirs=target.getAll();        while (theirs.hasMore()) {          their=(Attribute)theirs.next();          mine=get(their.getID());          if (!their.equals(mine)) {            return false;          }        }      } catch (      NamingException e) {        return false;      }      return true;    }  }  return false;}  }
class C{  public boolean equals(Object opObject){  if (opObject instanceof IdOperation) {    return (((IdOperation)opObject).op.equalsIgnoreCase(this.op));  }  return (false);}  }
class C{  public boolean isAttrFlagSet(String name,int flags){  return (null != m_attrs) ? ((m_attrs.getIgnoreCase(name) & flags) != 0) : false;}  }
class C{  public void applyLocalizedPattern(String template){  pattern=convertPattern(template,formatData.getLocalPatternChars(),PATTERN_CHARS,true);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkRadioEncryptionType createMobileNetworkRadioEncryptionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkRadioEncryptionTypeImpl();}  }
class C{  public ID3v23Tag(){  frameMap=new LinkedHashMap();  encryptedFrameMap=new LinkedHashMap();}  }
class C{  static <T>T newInstance(Class<T> type,String className,ClassLoader cl,boolean doFallback) throws DatatypeConfigurationException {  return newInstance(type,className,cl,doFallback,false);}  }
class C{  public void update(Document entity){  ValidationEngine.validateAndThrow(entity);  docRepo.update(entity);  notifyAllPlugins(NotifierPlugin.MutateType.UPDATE,entity);}  }
class C{  public FSAuthDomainsOpViewBeanBase(String name){  super(name);}  }
class C{  void logSearchResultEntry(SearchOperation searchOperation,SearchResultEntry searchEntry){}  }
class C{  private LambdaForm putInCache(Transform key,LambdaForm form){  key=key.withResult(form);  for (int pass=0; ; pass++) {    Object c=lambdaForm.transformCache;    if (c instanceof ConcurrentHashMap) {      @SuppressWarnings("unchecked") ConcurrentHashMap<Transform,Transform> m=(ConcurrentHashMap<Transform,Transform>)c;      Transform k=m.putIfAbsent(key,key);      if (k == null)       return form;      LambdaForm result=k.get();      if (result != null) {        return result;      } else {        if (m.replace(key,k,key)) {          return form;        } else {          continue;        }      }    }    assert (pass == 0);synchronized (lambdaForm) {      c=lambdaForm.transformCache;      if (c instanceof ConcurrentHashMap)       continue;      if (c == null) {        lambdaForm.transformCache=key;        return form;      }      Transform[] ta;      if (c instanceof Transform) {        Transform k=(Transform)c;        if (k.equals(key)) {          LambdaForm result=k.get();          if (result == null) {            lambdaForm.transformCache=key;            return form;          } else {            return result;          }        } else         if (k.get() == null) {          lambdaForm.transformCache=key;          return form;        }        ta=new Transform[MIN_CACHE_ARRAY_SIZE];        ta[0]=k;        lambdaForm.transformCache=ta;      } else {        ta=(Transform[])c;      }      int len=ta.length;      int stale=-1;      int i;      for (i=0; i < len; i++) {        Transform k=ta[i];        if (k == null) {          break;        }        if (k.equals(key)) {          LambdaForm result=k.get();          if (result == null) {            ta[i]=key;            return form;          } else {            return result;          }        } else         if (stale < 0 && k.get() == null) {          stale=i;        }      }      if (i < len || stale >= 0) {      } else       if (len < MAX_CACHE_ARRAY_SIZE) {        len=Math.min(len * 2,MAX_CACHE_ARRAY_SIZE);        ta=Arrays.copyOf(ta,len);        lambdaForm.transformCache=ta;      } else {        ConcurrentHashMap<Transform,Transform> m=new ConcurrentHashMap<>(MAX_CACHE_ARRAY_SIZE * 2);        for (        Transform k : ta) {          m.put(k,k);        }        lambdaForm.transformCache=m;        continue;      }      int idx=(stale >= 0) ? stale : i;      ta[idx]=key;      return form;    }  }}  }
class C{  private ReplicationServer createReplicationServer(int rsIndex,int weight,String testCase) throws Exception {  SortedSet<String> replServers=new TreeSet<>();  int nbRSs=getNbRSs(testCase);  for (int i=0; i < nbRSs; i++) {    if (i != rsIndex) {      replServers.add("localhost:" + rsPort[i]);    }  }  String dir="replicationServerLoadBalancingTest" + rsIndex + testCase+ "Db";  ReplServerFakeConfiguration conf=new ReplServerFakeConfiguration(rsPort[rsIndex],dir,0,rsIndex + 501,0,100,replServers,1,1000,5000,weight);  return new ReplicationServer(conf);}  }
class C{  public Future<Job> progress(int complete,int total){  int n=Math.min(100,complete * 100 / total);  this.emit("progress",n);  return this.setProgress(n).set("progress",String.valueOf(n)).compose(null);}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  private boolean recalculateSize(){  int oldSize=size;  size=0;  for (  long elt : elements)   size+=Long.bitCount(elt);  return size != oldSize;}  }
class C{  public byte[] composeString(byte[] oldString,byte newString){  int length=oldString.length;  byte[] str=new byte[length + 1];  System.arraycopy(oldString,0,str,0,length);  str[length]=newString;  return str;}  }
class C{  private boolean shove_trace_room(MazeListElement p_element,ExpandRoomObstacle p_obstacle_room){  if (p_element.section_no_of_door != 0 && p_element.section_no_of_door != p_element.door.maze_search_element_count() - 1) {    return true;  }  boolean result=false;  if (p_element.adjustment != MazeAdjustment.RIGHT) {    Collection<MazeDoorSection> left_to_door_section_list=new LinkedList<MazeDoorSection>();    if (maze_shove_trace.check_shove_trace_line(p_element,p_obstacle_room,false,left_to_door_section_list)) {      result=true;    }    for (    MazeDoorSection curr_left_door_section : left_to_door_section_list) {      MazeAdjustment curr_adjustment;      if (curr_left_door_section.door.dimension.is_area()) {        curr_adjustment=MazeAdjustment.LEFT;      } else {        curr_adjustment=MazeAdjustment.NONE;      }      expand_to_door_section(curr_left_door_section.door,curr_left_door_section.section_no,curr_left_door_section.section_line,p_element,0,curr_adjustment);    }  }  if (p_element.adjustment != MazeAdjustment.LEFT) {    Collection<MazeDoorSection> right_to_door_section_list=new java.util.LinkedList<MazeDoorSection>();    if (maze_shove_trace.check_shove_trace_line(p_element,p_obstacle_room,true,right_to_door_section_list)) {      result=true;    }    for (    MazeDoorSection curr_right_door_section : right_to_door_section_list) {      MazeAdjustment curr_adjustment;      if (curr_right_door_section.door.dimension.is_area()) {        curr_adjustment=MazeAdjustment.RIGHT;      } else {        curr_adjustment=MazeAdjustment.NONE;      }      expand_to_door_section(curr_right_door_section.door,curr_right_door_section.section_no,curr_right_door_section.section_line,p_element,0,curr_adjustment);    }  }  return result;}  }
class C{  public static <T>Promise<T,ResourceException> generateUnsupportedOperation(){  return new NotSupportedException("Operation is not supported.").asPromise();}  }
class C{  @Override protected final void prepareResponse() throws IOException {  response.setCommitted(true);  tmpMB.recycle();  responseMsgPos=-1;  responseMessage.reset();  responseMessage.appendByte(Constants.JK_AJP13_SEND_HEADERS);  int statusCode=response.getStatus();  if (statusCode < 200 || statusCode == 204 || statusCode == 205 || statusCode == 304) {    swallowResponse=true;  }  MessageBytes methodMB=request.method();  if (methodMB.equals("HEAD")) {    swallowResponse=true;  }  responseMessage.appendInt(statusCode);  tmpMB.setString(Integer.toString(response.getStatus()));  responseMessage.appendBytes(tmpMB);  MimeHeaders headers=response.getMimeHeaders();  String contentType=response.getContentType();  if (contentType != null) {    headers.setValue("Content-Type").setString(contentType);  }  String contentLanguage=response.getContentLanguage();  if (contentLanguage != null) {    headers.setValue("Content-Language").setString(contentLanguage);  }  long contentLength=response.getContentLengthLong();  if (contentLength >= 0) {    headers.setValue("Content-Length").setLong(contentLength);  }  int numHeaders=headers.size();  responseMessage.appendInt(numHeaders);  for (int i=0; i < numHeaders; i++) {    MessageBytes hN=headers.getName(i);    int hC=Constants.getResponseAjpIndex(hN.toString());    if (hC > 0) {      responseMessage.appendInt(hC);    } else {      responseMessage.appendBytes(hN);    }    MessageBytes hV=headers.getValue(i);    responseMessage.appendBytes(hV);  }  responseMessage.end();  socketWrapper.write(true,responseMessage.getBuffer(),0,responseMessage.getLen());  socketWrapper.flush(true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementsetattributenodenull.class,args);}  }
class C{  public boolean isSameNode(Node other){  return this == other;}  }
class C{  public TransformerConfigurationException(String message,SourceLocator locator,Throwable e){  super(message,locator,e);}  }
class C{  protected MuxingAttributeSet(){}  }
class C{  public void accept(final AnnotationVisitor av){  if (av != null) {    if (values != null) {      for (int i=0; i < values.size(); i+=2) {        String name=(String)values.get(i);        Object value=values.get(i + 1);        accept(av,name,value);      }    }    av.visitEnd();  }}  }
class C{  public void add(int field,int amount){  if (amount == 0) {    return;  }  if (field < 0 || field >= ZONE_OFFSET) {    throw new IllegalArgumentException();  }  complete();  if (field == YEAR) {    LocalGregorianCalendar.Date d=(LocalGregorianCalendar.Date)jdate.clone();    d.addYear(amount);    pinDayOfMonth(d);    set(ERA,getEraIndex(d));    set(YEAR,d.getYear());    set(MONTH,d.getMonth() - 1);    set(DAY_OF_MONTH,d.getDayOfMonth());  } else   if (field == MONTH) {    LocalGregorianCalendar.Date d=(LocalGregorianCalendar.Date)jdate.clone();    d.addMonth(amount);    pinDayOfMonth(d);    set(ERA,getEraIndex(d));    set(YEAR,d.getYear());    set(MONTH,d.getMonth() - 1);    set(DAY_OF_MONTH,d.getDayOfMonth());  } else   if (field == ERA) {    int era=internalGet(ERA) + amount;    if (era < 0) {      era=0;    } else     if (era > eras.length - 1) {      era=eras.length - 1;    }    set(ERA,era);  } else {    long delta=amount;    long timeOfDay=0;switch (field) {case HOUR:case HOUR_OF_DAY:      delta*=60 * 60 * 1000;    break;case MINUTE:  delta*=60 * 1000;break;case SECOND:delta*=1000;break;case MILLISECOND:break;case WEEK_OF_YEAR:case WEEK_OF_MONTH:case DAY_OF_WEEK_IN_MONTH:delta*=7;break;case DAY_OF_MONTH:case DAY_OF_YEAR:case DAY_OF_WEEK:break;case AM_PM:delta=amount / 2;timeOfDay=12 * (amount % 2);break;}if (field >= HOUR) {setTimeInMillis(time + delta);return;}long fd=cachedFixedDate;timeOfDay+=internalGet(HOUR_OF_DAY);timeOfDay*=60;timeOfDay+=internalGet(MINUTE);timeOfDay*=60;timeOfDay+=internalGet(SECOND);timeOfDay*=1000;timeOfDay+=internalGet(MILLISECOND);if (timeOfDay >= ONE_DAY) {fd++;timeOfDay-=ONE_DAY;} else if (timeOfDay < 0) {fd--;timeOfDay+=ONE_DAY;}fd+=delta;int zoneOffset=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);setTimeInMillis((fd - EPOCH_OFFSET) * ONE_DAY + timeOfDay - zoneOffset);zoneOffset-=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);if (zoneOffset != 0) {setTimeInMillis(time + zoneOffset);long fd2=cachedFixedDate;if (fd2 != fd) {setTimeInMillis(time - zoneOffset);}}}}  }
class C{  public static RemoveListenerRequest parseXML(Node pNode) throws PolicyEvaluationException {  RemoveListenerRequest removeListenerReq=new RemoveListenerRequest();  String attr=XMLUtils.getNodeAttributeValue(pNode,SERVICE_NAME);  if (attr == null) {    debug.error("RemoveListenerRequest: missing attribute " + SERVICE_NAME);    String objs[]={SERVICE_NAME};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  removeListenerReq.setServiceName(attr);  attr=XMLUtils.getNodeAttributeValue(pNode,NOTIFICATION_URL);  if (attr == null) {    debug.error("RemoveListenerRequest: missing attribute " + NOTIFICATION_URL);    String objs[]={NOTIFICATION_URL};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  removeListenerReq.setNotificationURL(attr);  return removeListenerReq;}  }
class C{  public int hashCode(){  int hash=name.hashCode() * 127;  if (tag == ARRAY) {    Class type=value.getClass();    if (type == int[].class) {      return hash ^ Arrays.hashCode((int[])value);    } else     if (type == byte[].class) {      return hash ^ Arrays.hashCode((byte[])value);    } else     if (type == short[].class) {      return hash ^ Arrays.hashCode((short[])value);    } else     if (type == long[].class) {      return hash ^ Arrays.hashCode((long[])value);    } else     if (type == char[].class) {      return hash ^ Arrays.hashCode((char[])value);    } else     if (type == boolean[].class) {      return hash ^ Arrays.hashCode((boolean[])value);    } else     if (type == float[].class) {      return hash ^ Arrays.hashCode((float[])value);    } else     if (type == double[].class) {      return hash ^ Arrays.hashCode((double[])value);    }    return hash ^ Arrays.hashCode((Object[])value);  } else {    return hash ^ value.hashCode();  }}  }
class C{  @Override public synchronized void reset(){  pos=0;}  }
class C{  public static AbstractInsnNode toInt(int i){switch (i) {case -1:    return new InsnNode(Opcodes.ICONST_M1);case 0:  return new InsnNode(Opcodes.ICONST_0);case 1:return new InsnNode(Opcodes.ICONST_1);case 2:return new InsnNode(Opcodes.ICONST_2);case 3:return new InsnNode(Opcodes.ICONST_3);case 4:return new InsnNode(Opcodes.ICONST_4);case 5:return new InsnNode(Opcodes.ICONST_5);}if (i > -129 && i < 128) {return new IntInsnNode(Opcodes.BIPUSH,i);}return new LdcInsnNode(i);}  }
class C{  public static boolean isValid(String s){  if (s == null) {    return false;  }  final int len=s.length();  if (len != 24) {    return false;  }  for (int i=0; i < len; i++) {    char c=s.charAt(i);    if (c >= '0' && c <= '9') {      continue;    }    if (c >= 'a' && c <= 'f') {      continue;    }    if (c >= 'A' && c <= 'F') {      continue;    }    return false;  }  return true;}  }
class C{  public void testCertPathValidator14() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator certPV;  for (int i=0; i < validValues.length; i++) {    try {      certPV=CertPathValidator.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect provider",certPV.getProvider(),defaultProvider);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchProviderException " + e.getMessage());    }    certPV=CertPathValidator.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect provider",certPV.getProvider(),defaultProvider);  }}  }
class C{  @AfterClass public static void afterClass(){  f.clearTestTables();}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  protected boolean isFragment(){  return fragment;}  }
class C{  public void handleNotification(Notification notification,Object handback){  if (notification instanceof MBeanServerNotification) {    MBeanServerNotification notif=(MBeanServerNotification)notification;    if (notif.getType().equals(MBeanServerNotification.REGISTRATION_NOTIFICATION)) {      ObjectName name=notif.getMBeanName();      if ((name.getKeyProperty("Rdn1").equals("cn-monitor")) && (isAConnectionHandler(name))) {        addRowInDsApplIfOpsTable(name);      }    } else     if (notif.getType().equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION)) {      ObjectName name=notif.getMBeanName();      if ((name.getKeyProperty("Rdn1").equals("cn-monitor")) && (isAConnectionHandler(name))) {        removeRowInDsApplIfOpsTable(name);      }    }  }}  }
class C{  public DefaultTableModel(Object[][] data,Object[] columnNames){  setDataVector(data,columnNames);}  }
class C{  void fillInTables(boolean f2ary,boolean swap,UCompactIntArray map,Vector<Vector<EntryPair>> cTbl,Vector<int[]> eTbl,IntHashtable cFlgs,short mso,short mto){  frenchSec=f2ary;  seAsianSwapping=swap;  mapping=map;  contractTable=cTbl;  expandTable=eTbl;  contractFlags=cFlgs;  maxSecOrder=mso;  maxTerOrder=mto;}  }
class C{  public boolean isCancelled(){  return this.cancelled;}  }
class C{  static XMPMetaImpl parse(Node xmlRoot) throws XMPException {  XMPMetaImpl xmp=new XMPMetaImpl();  rdf_RDF(xmp,xmlRoot);  return xmp;}  }
class C{  public String mapDomainToDN(String domain){  StringTokenizer st=new StringTokenizer(domain,".");  String dn=new String();  while (st.hasMoreElements()) {    dn=dn + "dc=" + st.nextToken()+ ",";  }  dn=dn + getDCRoot().getDN();  return dn;}  }
class C{  public void firePropertyChange(PropertyChangeEvent event){  Object oldValue=event.getOldValue();  Object newValue=event.getNewValue();  if (oldValue == null || newValue == null || !oldValue.equals(newValue)) {    String name=event.getPropertyName();    PropertyChangeListener[] common=this.map.get(null);    PropertyChangeListener[] named=(name != null) ? this.map.get(name) : null;    fire(common,event);    fire(named,event);  }}  }
class C{  @Override public ShapeTile[] split_to_convex(){  if (precalculated_convex_pieces != null) {    return precalculated_convex_pieces;  }  ShapeTile[] convex_border_pieces=border_shape.split_to_convex();  if (convex_border_pieces == null) {    System.err.println("PolylineArea. split_to_convex: convex_border_pieces==null");    precalculated_convex_pieces=new ShapeTile[0];    return precalculated_convex_pieces;  }  List<ShapeTile> curr_piece_list=new LinkedList<ShapeTile>();  for (int index=0; index < convex_border_pieces.length; ++index) {    curr_piece_list.add(convex_border_pieces[index]);  }  for (int index=0; index < hole_arr.length; ++index) {    if (!hole_arr[index].dimension().is_area()) {      System.out.println("PolylineArea. split_to_convex: dimennsion 2 for hole expected");      continue;    }    ShapeTile[] convex_hole_pieces=hole_arr[index].split_to_convex();    if (convex_hole_pieces == null) {      System.err.println("PolylineArea. split_to_convex: convex_hole_pieces==null");      precalculated_convex_pieces=new ShapeTile[0];      return precalculated_convex_pieces;    }    for (int j=0; j < convex_hole_pieces.length; ++j) {      ShapeTile curr_hole_piece=convex_hole_pieces[j];      List<ShapeTile> new_piece_list=new LinkedList<ShapeTile>();      Iterator<ShapeTile> it=curr_piece_list.iterator();      while (it.hasNext()) {        ShapeTile curr_divide_piece=it.next();        cutout_hole_piece(curr_divide_piece,curr_hole_piece,new_piece_list);      }      curr_piece_list=new_piece_list;    }  }  precalculated_convex_pieces=new ShapeTile[curr_piece_list.size()];  Iterator<ShapeTile> iter=curr_piece_list.iterator();  for (int index=0; index < precalculated_convex_pieces.length; ++index) {    precalculated_convex_pieces[index]=iter.next();  }  return precalculated_convex_pieces;}  }
class C{  public RowId readRowId() throws SQLException {  return (RowId)getNextAttribute();}  }
class C{  public static void sendAlertNotification(AlertGenerator generator,String alertType,LocalizableMessage alertMessage){  if (directoryServer.alertHandlers == null || directoryServer.alertHandlers.isEmpty()) {    if (!directoryServer.isRunning) {      try {        JMXAlertHandler alertHandler=new JMXAlertHandler();        alertHandler.initializeAlertHandler(null);        alertHandler.sendAlertNotification(generator,alertType,alertMessage);      } catch (      Exception e) {        logger.traceException(e);      }    }  } else {    for (    AlertHandler<?> alertHandler : directoryServer.alertHandlers) {      AlertHandlerCfg config=alertHandler.getAlertHandlerConfiguration();      Set<String> enabledAlerts=config.getEnabledAlertType();      Set<String> disabledAlerts=config.getDisabledAlertType();      if (enabledAlerts == null || enabledAlerts.isEmpty() || enabledAlerts.contains(alertType)) {        if (disabledAlerts != null && disabledAlerts.contains(alertType)) {          continue;        }      } else {        continue;      }      alertHandler.sendAlertNotification(generator,alertType,alertMessage);    }  }  String alertID=alertMessage != null ? alertMessage.resourceName() + "-" + alertMessage.ordinal() : "-1";  logger.info(NOTE_SENT_ALERT_NOTIFICATION,generator.getClassName(),alertType,alertID,alertMessage);}  }
class C{  public final boolean isSecure(){  return securityStatus;}  }
class C{  public void submit(String queueName,DispatcherTask dispatcherTask){synchronized (syncRoot) {    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);    if (currentTaskRunner == null) {      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);      currentTasksMap.put(queueName,currentTaskRunner);      executorService.execute(currentTaskRunner);    } else {      enqueueNextTask(queueName,dispatcherTask);    }  }}  }
class C{  public void normalizeDocumentRootTag(){  boolean forbid=forbidUnknownRoles;  forbidUnknownRoles=false;  List<IPdfStructElem> rootKids=document.getStructTreeRoot().getKids();  if (rootKids.size() == 1 && allowedRootTagRoles.contains(rootKids.get(0).getRole())) {    rootTagElement=(PdfStructElem)rootKids.get(0);  } else {    PdfStructElem prevRootTag=rootTagElement;    document.getStructTreeRoot().getPdfObject().remove(PdfName.K);    if (prevRootTag == null) {      rootTagElement=document.getStructTreeRoot().addKid(new PdfStructElem(document,PdfName.Document));    } else {      document.getStructTreeRoot().addKid(rootTagElement);      if (!PdfName.Document.equals(rootTagElement.getRole())) {        wrapAllKidsInTag(rootTagElement,rootTagElement.getRole());        rootTagElement.setRole(PdfName.Document);      }    }    int originalRootKidsIndex=0;    boolean isBeforeOriginalRoot=true;    for (    IPdfStructElem elem : rootKids) {      PdfStructElem kid=(PdfStructElem)elem;      if (kid.getPdfObject() == rootTagElement.getPdfObject()) {        isBeforeOriginalRoot=false;        continue;      }      boolean kidIsDocument=PdfName.Document.equals(kid.getRole());      if (isBeforeOriginalRoot) {        rootTagElement.addKid(originalRootKidsIndex,kid);        originalRootKidsIndex+=kidIsDocument ? kid.getKids().size() : 1;      } else {        rootTagElement.addKid(kid);      }      if (kidIsDocument) {        removeOldRoot(kid);      }    }  }  forbidUnknownRoles=forbid;}  }
class C{  public void close() throws IOException {}  }
class C{  public MessageChannel createMessageChannel(HostPort targetHostPort) throws UnknownHostException {  return new UDPMessageChannel(targetHostPort.getInetAddress(),targetHostPort.getPort(),sipStack,this);}  }
class C{  public boolean equals(XObject obj2){  try {    if (XObject.CLASS_NODESET == obj2.getType()) {      return obj2.equals(this);    } else     if (XObject.CLASS_BOOLEAN == obj2.getType()) {      return bool() == obj2.bool();    } else     if (XObject.CLASS_NUMBER == obj2.getType()) {      return num() == obj2.num();    } else     if (XObject.CLASS_NODESET == obj2.getType()) {      return xstr().equals(obj2.xstr());    } else     if (XObject.CLASS_STRING == obj2.getType()) {      return xstr().equals(obj2.xstr());    } else     if (XObject.CLASS_RTREEFRAG == obj2.getType()) {      return xstr().equals(obj2.xstr());    } else {      return super.equals(obj2);    }  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  public Map<String,Object> validate(Map<String,Object> resourceSetDescription) throws BadRequestException {  JsonValue description=json(resourceSetDescription);  validateName(description);  validateUri(description);  validateType(description);  validateScopes(description);  validateIconUri(description);  validateLabels(description);  return resourceSetDescription;}  }
class C{  public boolean handleRequest(final HttpServletRequest req,final HttpServletResponse res){  if (req.getHeader(CORSConstants.ORIGIN) == null) {    return true;  }  if (!isValidCORSRequest(req)) {    return false;  }  if (isPreflightFlow(req)) {    handlePreflightFlow(req,res);    return false;  } else {    return handleActualRequestFlow(req,res);  }}  }
class C{  public void rewind(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("rewind",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.rewind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static void serverFailed(String serviceName){  if (validRemoteURL == null) {    if (debug.warningEnabled()) {      debug.warning("JAXRPCHelper: No valid server found");    }    serverFailed=true;  } else   if (serviceName.startsWith(validRemoteURL)) {    serverFailed=true;  }}  }
class C{  public void visitTypeVariable(String name){}  }
class C{  public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public boolean isAllowed(SSOToken token,Map env) throws PolicyException, SSOException {  return getConditionDecision(token,env).isAllowed();}  }
class C{  private org.w3c.dom.Document encryptAndReplace(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keyStrength,java.security.Key kek,int kekStrength,String providerID,boolean isEncryptResourceID) throws EncryptionException {  if (doc == null || element == null || kek == null) {    EncryptionUtils.debug.error("AMEncryptionProvider.encryptAnd" + "Replace: Null values");    throw new EncryptionException(EncryptionUtils.bundle.getString("nullValues"));  }  SecretKey secretKey=null;  String secretKeyAlgShortName=getEncryptionAlgorithmShortName(secretKeyAlg);  if (providerID != null) {    if (keyMap.containsKey(providerID)) {      secretKey=(SecretKey)keyMap.get(providerID);    } else {      secretKey=generateSecretKey(secretKeyAlgShortName,keyStrength);      keyMap.put(providerID,secretKey);    }  } else {    secretKey=generateSecretKey(secretKeyAlgShortName,keyStrength);  }  if (secretKey == null) {    throw new EncryptionException(EncryptionUtils.bundle.getString("generateKeyError"));  }  try {    XMLCipher cipher=null;    String keyEncAlg=kek.getAlgorithm();    if (keyEncAlg.equals(EncryptionConstants.RSA)) {      cipher=XMLCipher.getInstance(XMLCipher.RSA_v1dot5);    } else     if (keyEncAlg.equals(EncryptionConstants.TRIPLEDES)) {      cipher=XMLCipher.getInstance(XMLCipher.TRIPLEDES_KeyWrap);    } else     if (keyEncAlg.equals(EncryptionConstants.AES)) {      if (kekStrength == 0 || kekStrength == 128) {        cipher=XMLCipher.getInstance(XMLCipher.AES_128_KeyWrap);      } else       if (kekStrength == 192) {        cipher=XMLCipher.getInstance(XMLCipher.AES_192_KeyWrap);      } else       if (kekStrength == 256) {        cipher=XMLCipher.getInstance(XMLCipher.AES_256_KeyWrap);      } else {        throw new EncryptionException(EncryptionUtils.bundle.getString("invalidKeyStrength"));      }    } else {      throw new EncryptionException(EncryptionUtils.bundle.getString("unsupportedKeyAlg"));    }    cipher.init(XMLCipher.WRAP_MODE,kek);    EncryptedKey encryptedKey=cipher.encryptKey(doc,secretKey);    KeyInfo insideKi=new KeyInfo(doc);    X509Data x509Data=new X509Data(doc);    x509Data.addCertificate((X509Certificate)keyProvider.getCertificate((PublicKey)kek));    insideKi.add(x509Data);    encryptedKey.setKeyInfo(insideKi);    String ekID=null;    if (isEncryptResourceID) {      ekID=com.sun.identity.saml.common.SAMLUtils.generateID();      encryptedKey.setId(ekID);    }    if (EncryptionUtils.debug.messageEnabled()) {      EncryptionUtils.debug.message("AMEncryptionProvider.encrypt" + "AndReplace: Encrypted key = " + toString(cipher.martial(doc,encryptedKey)));    }    String encAlgorithm=getEncryptionAlgorithm(secretKeyAlgShortName,keyStrength);    cipher=XMLCipher.getInstance(encAlgorithm);    cipher.init(XMLCipher.ENCRYPT_MODE,secretKey);    EncryptedData builder=cipher.getEncryptedData();    KeyInfo builderKeyInfo=builder.getKeyInfo();    if (builderKeyInfo == null) {      builderKeyInfo=new KeyInfo(doc);      builder.setKeyInfo(builderKeyInfo);    }    if (isEncryptResourceID) {      builderKeyInfo.addKeyName(providerID);      builderKeyInfo.addRetrievalMethod("#" + ekID,null,"http://www.w3.org/2001/04/xmlenc#EncryptedKey");    } else {      builderKeyInfo.add(encryptedKey);    }    Document result=cipher.doFinal(doc,element);    if (isEncryptResourceID) {      Element ee=(Element)result.getElementsByTagNameNS("http://www.w3.org/2001/04/xmlenc#","EncryptedData").item(0);      Node parentNode=ee.getParentNode();      Element newone=result.createElementNS("urn:liberty:disco:2003-08","EncryptedResourceID");      parentNode.replaceChild(newone,ee);      newone.appendChild(ee);      Element ek=cipher.martial(doc,encryptedKey);      Element carriedName=doc.createElementNS("http://www.w3.org/2001/04/xmlenc#","xenc:CarriedKeyName");      carriedName.appendChild(doc.createTextNode(providerID));      ek.appendChild(carriedName);      newone.appendChild(ek);    }    return result;  } catch (  Exception xe) {    EncryptionUtils.debug.error("AMEncryptionProvider.encryptAnd" + "Replace: XML Encryption error",xe);    throw new EncryptionException(xe);  }}  }
class C{  public OmnidroidException(int code,String message){  super(message);  this.code=code;}  }
class C{  public XObject execute(XPathContext xctxt,org.w3c.dom.Node contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  return execute(xctxt,xctxt.getDTMHandleFromNode(contextNode),namespaceContext);}  }
class C{  @SuppressWarnings("unchecked") public boolean containsKey(Object key){  Segment<K,V> s;  HashEntry<K,V>[] tab;  int h=hash(key.hashCode());  long u=(((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;  if ((s=(Segment<K,V>)UNSAFE.getObjectVolatile(segments,u)) != null && (tab=s.table) != null) {    for (HashEntry<K,V> e=(HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE); e != null; e=e.next) {      K k;      if ((k=e.key) == key || (e.hash == h && key.equals(k)))       return true;    }  }  return false;}  }
class C{  public void resetZoom(){  normalizedScale=1;  fitImageToView();}  }
class C{  public LoginContextWrapper(javax.security.auth.login.LoginContext javaxContext){  this.javaxContext=javaxContext;}  }
class C{  private void waitForDomainStatus(ReplicationDomain replicationDomain,ServerStatus expectedStatus,int nSec){  int toWait=nSec;  ServerStatus serverStatus=null;  while (nSec > 0) {    serverStatus=replicationDomain.getStatus();    if (serverStatus == expectedStatus) {      debugInfo("waitForDomainStatus: expected replication " + "domain status obtained after " + (toWait - nSec) + " second(s).");      return;    }    TestCaseUtils.sleep(1000);    nSec--;  }  fail("Did not get expected replication domain status: expected <" + expectedStatus + "> but got <"+ serverStatus+ ">, after "+ toWait+ " second(s)");}  }
class C{  @Override public void heartbeat(){  if (getTransport() != null)   getTransport().keepalive();}  }
class C{  public int size(){  return encodedNames.size();}  }
class C{  private void registerReverseAggregationPropertyDefinition(AggregationPropertyDefinition<?,?> apd){  apd.getRelationDefinition().getChildDefinition().reverseAggregationPropertyDefinitions.add(apd);}  }
class C{  public static String generateSourceID(String siteURL){  if ((siteURL == null) || (siteURL.length() == 0)) {    return null;  }  MessageDigest md=null;  try {    md=MessageDigest.getInstance("SHA");  } catch (  Exception e) {    e.printStackTrace();    return null;  }  char chars[]=siteURL.toCharArray();  byte bytes[]=new byte[chars.length];  for (int i=0; i < chars.length; i++) {    bytes[i]=(byte)chars[i];  }  md.update(bytes);  byte byteResult[]=md.digest();  String result=null;  try {    result=Base64.encode(byteResult);  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  @Override public Container findChild(String name){  if (name == null) {    return null;  }synchronized (children) {    return children.get(name);  }}  }
class C{  protected byte[] serializeDeltaRequest(DeltaSession session,DeltaRequest deltaRequest) throws IOException {  session.lock();  try {    return deltaRequest.serialize();  }  finally {    session.unlock();  }}  }
class C{  void shutdown(){  cursor=NONE;  if (nextIndex >= 0)   nextIndex=REMOVED;  if (lastRet >= 0) {    lastRet=REMOVED;    lastItem=null;  }  prevTakeIndex=DETACHED;}  }
class C{  public boolean hasAuthAttributes(String type){  boolean has=false;  try {    AMAuthenticationManager mgr=new AMAuthenticationManager(getUserSSOToken(),currentRealm);    AMAuthenticationSchema schema=mgr.getAuthenticationSchema(type);    has=!schema.getAttributeSchemas().isEmpty();  } catch (  AMConfigurationException e) {    debug.warning("AuthPropertiesModelImpl.hasAuthAttributes",e);  }  return has;}  }
class C{  @Override public String toString(){  return "RS id: " + rsServerId + " ; RS URL: "+ rsServerURL+ " ; Generation id: "+ generationId+ " ; Group id: "+ groupId+ " ; Weight: "+ weight;}  }
class C{  public void writeStatement(Statement oldStm){  Statement newStm=cloneStatement(oldStm);  if (oldStm.getTarget() != this && executeStatements) {    try {      newStm.execute();    } catch (    Exception e) {      getExceptionListener().exceptionThrown(new Exception("Encoder: discarding statement " + newStm,e));    }  }}  }
class C{  public Node cloneNode(boolean deep){  IIOMetadataNode newNode=new IIOMetadataNode(this.nodeName);  newNode.setUserObject(getUserObject());  if (deep) {    for (IIOMetadataNode child=firstChild; child != null; child=child.nextSibling) {      newNode.appendChild(child.cloneNode(true));    }  }  return newNode;}  }
class C{  public boolean isLossless(){  return isLossless;}  }
class C{  public static int mainVerifyIndex(String[] args,boolean initializeServer,OutputStream errStream){  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.enableConsoleLoggingForOpenDJTool();  StringArgument configFile=null;  StringArgument baseDNString=null;  StringArgument indexList=null;  BooleanArgument cleanMode=null;  BooleanArgument countErrors=null;  BooleanArgument displayUsage=null;  LocalizableMessage toolDescription=INFO_VERIFYINDEX_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser("org.opends.server.tools.VerifyIndex",toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_VERIFY_INDEX.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    configFile=StringArgument.builder("configFile").shortIdentifier('f').description(INFO_DESCRIPTION_CONFIG_FILE.get()).hidden().required().valuePlaceholder(INFO_CONFIGFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    baseDNString=StringArgument.builder(OPTION_LONG_BASEDN).shortIdentifier(OPTION_SHORT_BASEDN).description(INFO_VERIFYINDEX_DESCRIPTION_BASE_DN.get()).required().valuePlaceholder(INFO_BASEDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    indexList=StringArgument.builder("index").shortIdentifier('i').description(INFO_VERIFYINDEX_DESCRIPTION_INDEX_NAME.get()).multiValued().valuePlaceholder(INFO_INDEX_PLACEHOLDER.get()).buildAndAddToParser(argParser);    cleanMode=BooleanArgument.builder("clean").shortIdentifier('c').description(INFO_VERIFYINDEX_DESCRIPTION_VERIFY_CLEAN.get()).buildAndAddToParser(argParser);    countErrors=BooleanArgument.builder("countErrors").description(INFO_VERIFYINDEX_DESCRIPTION_COUNT_ERRORS.get()).buildAndAddToParser(argParser);    displayUsage=showUsageArgument();    argParser.addArgument(displayUsage);    argParser.setUsageArgument(displayUsage);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return 1;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return 1;  }  if (argParser.usageOrVersionDisplayed()) {    return 0;  }  if (cleanMode.isPresent() && indexList.getValues().size() != 1) {    argParser.displayMessageAndUsageReference(err,ERR_VERIFYINDEX_VERIFY_CLEAN_REQUIRES_SINGLE_INDEX.get());    return 1;  }  try {    BuildVersion.checkVersionMismatch();  } catch (  InitializationException e) {    printWrappedText(err,e.getMessage());    return 1;  }  if (initializeServer) {    try {      new DirectoryServer.InitializationBuilder(configFile.getValue()).requireCryptoServices().initialize();    } catch (    InitializationException ie) {      printWrappedText(err,ERR_CANNOT_INITIALIZE_SERVER_COMPONENTS.get(ie.getLocalizedMessage()));      return 1;    }  }  DN verifyBaseDN;  try {    verifyBaseDN=DN.valueOf(baseDNString.getValue());  } catch (  Exception e) {    printWrappedText(err,ERR_CANNOT_DECODE_BASE_DN.get(baseDNString.getValue(),getExceptionMessage(e)));    return 1;  }  List<Backend<?>> backendList=new ArrayList<>();  List<BackendCfg> entryList=new ArrayList<>();  List<List<DN>> dnList=new ArrayList<>();  BackendToolUtils.getBackends(backendList,entryList,dnList);  Backend<?> backend=null;  int numBackends=backendList.size();  for (int i=0; i < numBackends; i++) {    Backend<?> b=backendList.get(i);    List<DN> baseDNs=dnList.get(i);    if (baseDNs.contains(verifyBaseDN)) {      if (backend != null) {        printWrappedText(err,ERR_MULTIPLE_BACKENDS_FOR_BASE.get(baseDNString.getValue()));        return 1;      }      backend=b;    }  }  if (backend == null) {    printWrappedText(err,ERR_NO_BACKENDS_FOR_BASE.get(baseDNString.getValue()));    return 1;  }  if (!backend.supports(BackendOperation.INDEXING)) {    printWrappedText(err,ERR_BACKEND_NO_INDEXING_SUPPORT.get());    return 1;  }  VerifyConfig verifyConfig=new VerifyConfig();  verifyConfig.setBaseDN(verifyBaseDN);  if (cleanMode.isPresent()) {    for (    String s : indexList.getValues()) {      verifyConfig.addCleanIndex(s);    }  } else {    for (    String s : indexList.getValues()) {      verifyConfig.addCompleteIndex(s);    }  }  try {    String lockFile=LockFileManager.getBackendLockFileName(backend);    StringBuilder failureReason=new StringBuilder();    if (!LockFileManager.acquireSharedLock(lockFile,failureReason)) {      printWrappedText(err,ERR_VERIFYINDEX_CANNOT_LOCK_BACKEND.get(backend.getBackendID(),failureReason));      return 1;    }  } catch (  Exception e) {    printWrappedText(err,ERR_VERIFYINDEX_CANNOT_LOCK_BACKEND.get(backend.getBackendID(),getExceptionMessage(e)));    return 1;  }  try {    final long errorCount=backend.verifyBackend(verifyConfig);    if (countErrors.isPresent()) {      if (errorCount > Integer.MAX_VALUE) {        return Integer.MAX_VALUE;      }      return (int)errorCount;    }    return 0;  } catch (  InitializationException e) {    printWrappedText(err,ERR_VERIFYINDEX_ERROR_DURING_VERIFY.get(e.getMessage()));    return 1;  }catch (  Exception e) {    printWrappedText(err,ERR_VERIFYINDEX_ERROR_DURING_VERIFY.get(stackTraceToSingleLineString(e)));    return 1;  } finally {    try {      String lockFile=LockFileManager.getBackendLockFileName(backend);      StringBuilder failureReason=new StringBuilder();      if (!LockFileManager.releaseLock(lockFile,failureReason)) {        printWrappedText(err,WARN_VERIFYINDEX_CANNOT_UNLOCK_BACKEND.get(backend.getBackendID(),failureReason));      }    } catch (    Exception e) {      printWrappedText(err,WARN_VERIFYINDEX_CANNOT_UNLOCK_BACKEND.get(backend.getBackendID(),getExceptionMessage(e)));    }  }}  }
class C{  public static void main(String[] args){  int result=configureWindowsService(args,System.out,System.err);  System.exit(filterExitCode(result));}  }
class C{  @Override public Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByField2(field2,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  private RuleProcessor(){}  }
class C{  public Collection<ExpandRoomFreespaceIncomplete> complete_shape(ExpandRoomFreespaceIncomplete p_room,int p_net_no,AwtreeObject p_ignore_object,ShapeTile p_ignore_shape){  Collection<ExpandRoomFreespaceIncomplete> result=new LinkedList<ExpandRoomFreespaceIncomplete>();  if (p_room.get_contained_shape() == null) {    System.out.println("ShapeSearchTree.complete_shape: p_shape_to_be_contained != null expected");    return result;  }  if (root_node == null)   return result;  ShapeTile start_shape=r_board.get_bounding_box();  if (p_room.get_shape() != null) {    start_shape=start_shape.intersection(p_room.get_shape());  }  ShapeTileRegular bounding_shape=start_shape.bounding_shape();  if (start_shape.dimension() == PlaDimension.AREA) {    ExpandRoomFreespaceIncomplete new_room=new ExpandRoomFreespaceIncomplete(start_shape,p_room.get_layer(),p_room.get_contained_shape());    result.add(new_room);  }  node_stack.reset();  node_stack.push(root_node);  AwtreeNode curr_node;  int room_layer=p_room.get_layer();  for (; ; ) {    curr_node=node_stack.pop();    if (curr_node == null)     break;    if (!curr_node.bounding_shape.intersects(bounding_shape))     continue;    if (!(curr_node instanceof AwtreeNodeLeaf)) {      node_stack.push(((AwtreeNodeFork)curr_node).first_child);      node_stack.push(((AwtreeNodeFork)curr_node).second_child);      continue;    }    AwtreeNodeLeaf curr_leaf=(AwtreeNodeLeaf)curr_node;    AwtreeObject curr_object=curr_leaf.object;    int shape_index=curr_leaf.shape_index_in_object;    if (!(curr_object.is_trace_obstacle(p_net_no) && curr_object.shape_layer(shape_index) == room_layer && curr_object != p_ignore_object))     continue;    ShapeTile curr_object_shape=curr_object.get_tree_shape(this,shape_index);    LinkedList<ExpandRoomFreespaceIncomplete> new_result=new LinkedList<ExpandRoomFreespaceIncomplete>();    ShapeTileRegular new_bounding_shape=ShapeTileOctagon.EMPTY;    for (    ExpandRoomFreespaceIncomplete curr_incomplete_room : result) {      boolean something_changed=false;      ShapeTile intersection=curr_incomplete_room.get_shape().intersection(curr_object_shape);      if (intersection.dimension() == PlaDimension.AREA) {        boolean ignore_expansion_room=curr_object instanceof ExpandRoomFreespaceComplete && p_ignore_shape != null && p_ignore_shape.contains(intersection);        if (!ignore_expansion_room) {          something_changed=true;          new_result.addAll(restrain_shape(curr_incomplete_room,curr_object_shape));          for (          ExpandRoomFreespaceIncomplete tmp_room : new_result) {            new_bounding_shape=new_bounding_shape.union(tmp_room.get_shape().bounding_shape());          }        }      }      if (!something_changed) {        new_result.add(curr_incomplete_room);        new_bounding_shape=new_bounding_shape.union(curr_incomplete_room.get_shape().bounding_shape());      }    }    result=new_result;    bounding_shape=new_bounding_shape;  }  result=divide_large_room(result,r_board.get_bounding_box());  return result;}  }
class C{  public boolean hasAnyActiveFederation(String userID) throws FSAccountMgmtException {  FSUtils.debug.message("FSAccountManager.hasAnyActiveFederation():called");  if (userID == null) {    FSUtils.debug.error("FSAccountManager.hasAnyActiveFederation():" + "Invalid Argument : user ID is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_USER_DN,null);  }  Set existFedInfoSet=null;  try {    existFedInfoSet=provider.getAttribute(userID,FSAccountUtils.USER_FED_INFO_ATTR);  } catch (  DataStoreProviderException ame) {    FSUtils.debug.error("FSAccountManager.hasAnyActiveFederation():Exception: ",ame);    throw new FSAccountMgmtException(ame.getMessage());  }  if (existFedInfoSet != null && !existFedInfoSet.isEmpty()) {    Iterator i=existFedInfoSet.iterator();    String existFedInfoStr="";    while (i.hasNext()) {      existFedInfoStr=(String)i.next();      FSAccountFedInfo afi=FSAccountUtils.stringToObject(existFedInfoStr);      if (afi.isFedStatusActive() && afi.isRoleIDP()) {        return true;      }    }    return false;  }  return false;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierElement createNameIdentifierElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierElementImpl();}  }
class C{  public void debug(Object message){  log(Level.FINE,String.valueOf(message),null);}  }
class C{  protected Expression lt(int opPos) throws TransformerException {  return compileOperation(new Lt(),opPos);}  }
class C{  void toString(final StringBuilder buffer){  boolean first=true;  for (  CSN csn : serverIdToCSN.values()) {    if (!first) {      buffer.append(" ");    }    csn.toString(buffer);    first=false;  }}  }
class C{  public char next(){  if (pos < end - 1) {    pos++;    return text.charAt(pos);  } else {    pos=end;    return DONE;  }}  }
class C{  public static String ifNullOrEmpty(final String original,final String defaultString){  Reject.ifNull(defaultString,"Default string must not be null");  return (original == null || original.isEmpty()) ? defaultString : original;}  }
class C{  private static void trustAllConnect(){  Connection connection=null;  try {    final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port,getTrustAllOptions());    connection=factory.getConnection();    connection.bind(bindDN,bindPassword.toCharArray());    System.out.println("Authenticated as " + bindDN + ".");  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  }catch (  final GeneralSecurityException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_CONNECT_ERROR.intValue());  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public static void logCompareRequest(CompareOperation compareOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logCompareRequest(compareOperation);  }}  }
class C{  private final int _shortUTF8Encode2(char[] str,int i,int end,int outputPtr){  final byte[] outBuf=_outputBuffer;  while (i < end) {    int c=str[i++];    if (c <= 0x7F) {      outBuf[outputPtr++]=(byte)c;      continue;    }    if (c < 0x800) {      outBuf[outputPtr++]=(byte)(0xc0 | (c >> 6));      outBuf[outputPtr++]=(byte)(0x80 | (c & 0x3f));      continue;    }    if (c < SURR1_FIRST || c > SURR2_LAST) {      outBuf[outputPtr++]=(byte)(0xe0 | (c >> 12));      outBuf[outputPtr++]=(byte)(0x80 | ((c >> 6) & 0x3f));      outBuf[outputPtr++]=(byte)(0x80 | (c & 0x3f));      continue;    }    if (c > SURR1_LAST) {      _throwIllegalSurrogate(c);    }    if (i >= end) {      _throwIllegalSurrogate(c);    }    c=_convertSurrogate(c,str[i++]);    if (c > 0x10FFFF) {      _throwIllegalSurrogate(c);    }    outBuf[outputPtr++]=(byte)(0xf0 | (c >> 18));    outBuf[outputPtr++]=(byte)(0x80 | ((c >> 12) & 0x3f));    outBuf[outputPtr++]=(byte)(0x80 | ((c >> 6) & 0x3f));    outBuf[outputPtr++]=(byte)(0x80 | (c & 0x3f));  }  int codedLen=outputPtr - _outputTail;  _outputTail=outputPtr;  return codedLen;}  }
class C{  public Future<Long> failedCount(String type){  Future<Long> future=Future.future();  jobService.failedCount(type,future.completer());  return future;}  }
class C{  @Override public void invoke(Request request,Response response) throws IOException, ServletException {  if (controlConcurrency(request,response)) {    boolean shouldRelease=true;    try {      if (block) {        if (interruptible) {          try {            semaphore.acquire();          } catch (          InterruptedException e) {            shouldRelease=false;            permitDenied(request,response);            return;          }        } else {          semaphore.acquireUninterruptibly();        }      } else {        if (!semaphore.tryAcquire()) {          shouldRelease=false;          permitDenied(request,response);          return;        }      }      getNext().invoke(request,response);    }  finally {      if (shouldRelease) {        semaphore.release();      }    }  } else {    getNext().invoke(request,response);  }}  }
class C{  public boolean markSupported(){  return in.markSupported();}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 3)   reportWrongNumberArgs();}  }
class C{  void cacheAuthorizationHeader(String callId,AuthorizationHeader authorization,int cacheTime){  String user=authorization.getUsername();  if (callId == null)   throw new NullPointerException("Call ID is null!");  if (authorization == null)   throw new NullPointerException("Null authorization domain");  List<AuthorizationHeader> authHeaders=authorizationHeaders.get(callId);  if (authHeaders == null) {    authHeaders=new LinkedList<AuthorizationHeader>();    authorizationHeaders.put(callId,authHeaders);  } else {    String realm=authorization.getRealm();    for (ListIterator<AuthorizationHeader> li=authHeaders.listIterator(); li.hasNext(); ) {      AuthorizationHeader authHeader=(AuthorizationHeader)li.next();      if (realm.equals(authHeader.getRealm())) {        li.remove();      }    }  }  authHeaders.add(authorization);  TimeoutTask timeoutTask=new TimeoutTask(callId,user);  if (cacheTime != -1)   this.timer.schedule(timeoutTask,cacheTime * 1000);}  }
class C{  void beforeDelete(WriteableTransaction txn) throws StorageRuntimeException {}  }
class C{  @Override public long dynamicQueryCount(DynamicQuery dynamicQuery){  return fooPersistence.countWithDynamicQuery(dynamicQuery);}  }
class C{  public PolicyException(String message){  super(message);}  }
class C{  public int hashCode(){  return (ref == null) ? super.hashCode() : ref.remoteHashCode();}  }
class C{  public NSDate(byte[] bytes){  this(bytes,0,bytes.length);}  }
class C{  public DatatypeConfigurationException(String message){  super(message);}  }
class C{  public static boolean isErrorLoggable(Level level){  SSOToken authSSOToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  if ((authSSOToken == null) || !logActive) {    return false;  }  return errorLogger.isLoggable(level);}  }
class C{  public void endMonitoringOf(final InetAddress inetAddress,final int inode){  candidateSockets.endMonitoringOfSocketIdentifier(fromInet4AddressAndInode(inetAddress,inode));}  }
class C{  public FilePermission(int encodedPermission){  this.encodedPermission=encodedPermission;}  }
class C{  public X509CertImpl(byte[] encoding) throws IOException {  this((Certificate)Certificate.ASN1.decode(encoding));}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public String displayStructureAsPlainText(){  createPlainTextStructureFormatter();  tagFormatter.openHeadingElement("file",this.getFile().getAbsolutePath());  if (this.getID3v1Tag() != null) {    this.getID3v1Tag().createStructure();  }  if (this.getID3v2Tag() != null) {    this.getID3v2Tag().createStructure();  }  tagFormatter.closeHeadingElement("file");  return tagFormatter.toString();}  }
class C{  public boolean isAllowed(SSOToken token,String resourceName,String actionName) throws PolicyException, SSOException {  return isAllowed(token,resourceName,actionName,null);}  }
class C{  public static void destroyMBean(ContextResource resource) throws Exception {  if ("org.apache.catalina.UserDatabase".equals(resource.getType())) {    destroyMBeanUserDatabase(resource.getName());  }  String mname=createManagedName(resource);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    return;  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  ObjectName oname=createObjectName(domain,resource);  if (mserver.isRegistered(oname))   mserver.unregisterMBean(oname);}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (callId == null)   return retval; else {    retval.append(callId);    if (!parameters.isEmpty()) {      retval.append(SEMICOLON);      parameters.encode(retval);    }    return retval;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.CipherDataType createCipherDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.CipherDataTypeImpl();}  }
class C{  public void summarizeOggPageHeaders(File oggFile) throws CannotReadException, IOException {  RandomAccessFile raf=new RandomAccessFile(oggFile,"r");  while (raf.getFilePointer() < raf.length()) {    System.out.println("pageHeader starts at absolute file position:" + raf.getFilePointer());    OggPageHeader pageHeader=OggPageHeader.read(raf);    System.out.println("pageHeader finishes at absolute file position:" + raf.getFilePointer());    System.out.println(pageHeader + "\n");    raf.seek(raf.getFilePointer() + pageHeader.getPageLength());  }  System.out.println("Raf File Pointer at:" + raf.getFilePointer() + "File Size is:"+ raf.length());  raf.close();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("CollectionCertStoreParameters: [\ncollection: ");  sb.append(getCollection().toString());  sb.append("\n]");  return sb.toString();}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  @Deprecated public FurnaceRecipe(ItemStack result,Material source,int data,float experience){  this.output=new ItemStack(result);  this.ingredient=new ItemStack(source,1,(short)data);  this.experience=experience;}  }
class C{  public final boolean isVbr(){  return true;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiSeparatorUI();  return MultiLookAndFeel.createUIs(mui,((MultiSeparatorUI)mui).uis,a);}  }
class C{  public void convertToXml(OutputStream os) throws IOException {  convertToXml(os,"UTF-8");}  }
class C{  private void resort(){  int edge_count=shape.border_line_count();  if (from_side.side_no < 0 || from_side.side_no >= edge_count) {    System.out.println("ShapeTraceEntries.resort: from side not calculated");    return;  }  PlaPointFloat compare_corner_1=shape.corner_approx(from_side.side_no);  PlaPointFloat compare_corner_2;  if (from_side.side_no == edge_count - 1) {    compare_corner_2=shape.corner_approx(0);  } else {    compare_corner_2=shape.corner_approx(from_side.side_no + 1);  }  double from_point_dist=0;  PlaPointFloat from_point_projection=null;  if (from_side.border_intersection != null) {    from_point_projection=from_side.border_intersection.projection_approx(shape.border_line(from_side.side_no));    from_point_dist=from_point_projection.distance_square(compare_corner_1);    if (from_point_dist >= compare_corner_1.distance_square(compare_corner_2)) {      from_side=new BrdFromSide(from_side.side_no,null);    }  }  ShoveTraceEntryPoint curr=list_anchor;  ShoveTraceEntryPoint prev=null;  while (curr != null) {    if (curr.edge_no > from_side.side_no) {      break;    }    if (curr.edge_no == from_side.side_no) {      if (from_side.border_intersection != null) {        PlaPointFloat curr_projection=curr.entry_approx.projection_approx(shape.border_line(from_side.side_no));        if (curr_projection.distance_square(compare_corner_1) >= from_point_dist && curr_projection.distance_square(from_point_projection) <= curr_projection.distance_square(compare_corner_1)) {          break;        }      } else {        if (curr.entry_approx.distance_square(compare_corner_2) <= curr.entry_approx.distance_square(compare_corner_1)) {          break;        }      }    }    prev=curr;    curr=prev.next;  }  if (curr != null && curr != list_anchor) {    ShoveTraceEntryPoint new_anchor=curr;    while (curr != null) {      prev=curr;      curr=prev.next;    }    prev.next=list_anchor;    curr=list_anchor;    while (curr != new_anchor) {      curr.edge_no+=edge_count;      prev=curr;      curr=prev.next;    }    prev.next=null;    list_anchor=new_anchor;  }  if (list_anchor == null) {    return;  }  prev=list_anchor;  NetNosList prev_net_nos=prev.trace.net_nos;  curr=list_anchor.next;  NetNosList curr_net_nos;  ShoveTraceEntryPoint next;  if (curr != null) {    curr_net_nos=curr.trace.net_nos;    next=curr.next;  } else {    next=null;    curr_net_nos=NetNosList.EMPTY;  }  ShoveTraceEntryPoint before_prev=null;  while (next != null) {    NetNosList next_net_nos=next.trace.net_nos;    if (prev_net_nos.net_nos_equal(curr_net_nos) && curr_net_nos.net_nos_equal(next_net_nos)) {      prev.next=next;    } else {      before_prev=prev;      prev=curr;      prev_net_nos=curr_net_nos;    }    curr_net_nos=next_net_nos;    curr=next;    next=curr.next;  }  if (curr != null && curr_net_nos.net_nos_equal(own_net_nos)) {    prev.next=null;    if (prev_net_nos.net_nos_equal(own_net_nos)) {      if (before_prev != null) {        before_prev.next=null;      } else {        list_anchor=null;      }    }  }  if (list_anchor != null && list_anchor.trace.nets_equal(own_net_nos)) {    list_anchor=list_anchor.next;    if (list_anchor != null && list_anchor.trace.nets_equal(own_net_nos)) {      list_anchor=list_anchor.next;    }  }}  }
class C{  public boolean isAnnotationsAllowed(){  return annotationsAllowed;}  }
class C{  public void testEqualsUnequal3(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertFalse(aNumber.equals(b));}  }
class C{  protected void removeThumbnailData(){  clearThumbnailAndStrips();  mIfdDatas[IfdId.TYPE_IFD_1]=null;}  }
class C{  public static boolean isXML11ValidNCName(String ncName){  int length=ncName.length();  if (length == 0)   return false;  int i=1;  char ch=ncName.charAt(0);  if (!isXML11NCNameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=ncName.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCNameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=ncName.charAt(i);    if (!isXML11NCName(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=ncName.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCName(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  public static boolean isDisabled(Privilege privilege){  return directoryServer.disabledPrivileges.contains(privilege);}  }
class C{  public void write(final String s) throws IOException {  if (m_writer != null)   m_writer.write(s);  final int length=s.length();  int lengthx3=(length << 1) + length;  if (lengthx3 >= buf_length) {    flushBuffer();    setBufferSize(2 * lengthx3);  }  if (lengthx3 > buf_length - count) {    flushBuffer();  }  for (int i=0; i < length; i++) {    final char c=s.charAt(i);    if (c < 0x80)     buf[count++]=(byte)(c); else     if (c < 0x800) {      buf[count++]=(byte)(0xc0 + (c >> 6));      buf[count++]=(byte)(0x80 + (c & 0x3f));    } else {      buf[count++]=(byte)(0xe0 + (c >> 12));      buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf[count++]=(byte)(0x80 + (c & 0x3f));    }  }}  }
class C{  public boolean isSatisfied(Object context) throws Exception {  if (context == null) {    return false;  } else   if (context instanceof SSOToken) {    if (DEBUG.messageEnabled()) {      DEBUG.message("DNOrIPAddressListTokenRestriction.isSatisfied(): context is instance of SSOToken");    }    SSOToken usedBy=(SSOToken)context;    String udn=Misc.canonicalize(usedBy.getPrincipal().getName());    StringTokenizer st=new StringTokenizer(dn,"|");    while (st.hasMoreTokens()) {      if (st.nextToken().equals(udn)) {        return true;      }    }    if (DEBUG.messageEnabled()) {      DEBUG.message("DNOrIPAddressListTokenRestriction:isSatisfied SSOToken of " + udn + " does not match with restriction "+ dn);    }    return false;  } else   if (context instanceof InetAddress) {    if (isDNRestrictionOnly()) {      if (DEBUG.warningEnabled()) {        DEBUG.warning("DNOrIPAddressListTokenRestriction.isSatisfied():dnRestrictionOnly is true, but IP " + "has been received as the restriction context, this could be a suspicious activity. " + "Received InetAddress is: "+ ((InetAddress)context).toString());      }      return true;    } else {      if (DEBUG.messageEnabled()) {        DEBUG.message("DNOrIPAddressListTokenRestriction.isSatisfied(): dnRestrictionOnly is false");        DEBUG.message("DNOrIPAddressListTokenRestriction.isSatisfied(): IP based restriction received and " + "accepted");      }      return addressList.contains((InetAddress)context);    }  } else {    if (DEBUG.warningEnabled()) {      DEBUG.warning("Unknown context type:" + context);    }    return false;  }}  }
class C{  private String findNextDomainId(){  int nextId=1;  for (  final String domainId : domains.values()) {    final Integer id=Integer.valueOf(domainId);    if (nextId <= id) {      nextId=id + 1;    }  }  return String.valueOf(nextId);}  }
class C{  @Override public synchronized boolean isPoolPreparedStatements(){  return this.poolPreparedStatements;}  }
class C{  public void clear(){  decimalAt=0;  count=0;}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  return (obj instanceof DialogState) && ((DialogState)obj).m_dialogState == m_dialogState;}  }
class C{  @Override public void checkClientTrusted(X509Certificate[] chain,String authType) throws CertificateException {  LocalizableMessage message=ERR_PROMPTTM_REJECTING_CLIENT_CERT.get();  throw new CertificateException(message.toString());}  }
class C{  public static <T>void fill(List<? super T> list,T object){  ListIterator<? super T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(object);  }}  }
class C{  public static AdditionalLogItem quotedKeyValue(final Class<?> source,final String key,final Object value){  Reject.ifNull(source,key,value);  return new AdditionalLogItem(source,key,value,true);}  }
class C{  public boolean isTypesOnly(){  return typesOnly;}  }
class C{  @Override public void close() throws SQLException {  if (!isClosed()) {    try {      _pool.returnObject(_key,this);    } catch (    final SQLException e) {      throw e;    }catch (    final RuntimeException e) {      throw e;    }catch (    final Exception e) {      throw new SQLException("Cannot close preparedstatement (return to pool failed)",e);    }  }}  }
class C{  public static String toLatinAlphabetNumber(int number,boolean upperCase){  return upperCase ? toLatinAlphabetNumberUpperCase(number) : toLatinAlphabetNumberLowerCase(number);}  }
class C{  public ServiceAvailableEvent(Intent intent){  super(APPLICATION_NAME,EVENT_NAME,intent);}  }
class C{  @NonNull public static Agera wrap(@NonNull Observable observable){  if (observable instanceof Agera) {    return (Agera)observable;  }  return new AgeraWrapper(observable);}  }
class C{  public java.lang.String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public static String applyFontToHtml(String html,Font font){  StringBuilder buf=new StringBuilder();  buf.append("<span style=\"").append(getFontStyle(font)).append("\">").append(html).append(SPAN_CLOSE);  return buf.toString();}  }
class C{  private List createFaultSAMLArtifact(){  FSUtils.debug.message("FSSSOBrowserArtifactProfileHandler. In createFaultSAMLArtifacts");  String handle=SAMLUtils.generateAssertionHandle();  if (handle == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSSOBrowserArtifactProfileHandler." + "create FaultSAMLArtifacts: couldn't generate assertion " + "handle.");    }    return null;  }  try {    String sourceSuccinctID=FSUtils.generateSourceID(hostedEntityId);    AssertionArtifact art=new FSAssertionArtifact(SAMLUtils.stringToByteArray(sourceSuccinctID),handle.getBytes(IFSConstants.SOURCEID_ENCODING));    List artis=new ArrayList();    artis.add(art.getAssertionArtifact());    FSAssertionManager am=FSAssertionManager.getInstance(metaAlias);    am.setErrStatus(art,noFedStatus);    return artis;  } catch (  Exception e) {    FSUtils.debug.error("FSBrowserArtifactProfileHandler.createFaultSAMLArtifacts: ",e);    return null;  }}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  @Override public void release(){  parent=null;  id=null;  if (values != null) {    values.clear();  }  values=null;}  }
class C{  public int size(){  return entries.size();}  }
class C{  private static void tweakOldXMP(XMPNode tree) throws XMPException {  if (tree.getName() != null && tree.getName().length() >= Utils.UUID_LENGTH) {    String nameStr=tree.getName().toLowerCase();    if (nameStr.startsWith("uuid:")) {      nameStr=nameStr.substring(5);    }    if (Utils.checkUUIDFormat(nameStr)) {      XMPPath path=XMPPathParser.expandXPath(XMPConst.NS_XMP_MM,"InstanceID");      XMPNode idNode=XMPNodeUtils.findNode(tree,path,true,null);      if (idNode != null) {        idNode.setOptions(null);        idNode.setValue("uuid:" + nameStr);        idNode.removeChildren();        idNode.removeQualifiers();        tree.setName(null);      } else {        throw new XMPException("Failure creating xmpMM:InstanceID",XMPError.INTERNALFAILURE);      }    }  }}  }
class C{  private String matchMap(List<ELNode.Function> functions){  String mapName=null;  for (  ELNode.Function f : functions) {    String temName=gMap.get(f.getPrefix() + ':' + f.getName()+ ':'+ f.getUri());    if (temName == null) {      return null;    }    if (mapName == null) {      mapName=temName;    } else     if (!temName.equals(mapName)) {      return null;    }  }  return mapName;}  }
class C{  public org.omg.DynamicAny.DynAny copy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("copy",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    return $self.copy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected AccessibleState(String key){  this.key=key;}  }
class C{  @Override public void addConstraint(SecurityConstraint constraint){  SecurityCollection collections[]=constraint.findCollections();  for (int i=0; i < collections.length; i++) {    String patterns[]=collections[i].findPatterns();    for (int j=0; j < patterns.length; j++) {      patterns[j]=adjustURLPattern(patterns[j]);      if (!validateURLPattern(patterns[j]))       throw new IllegalArgumentException(sm.getString("standardContext.securityConstraint.pattern",patterns[j]));    }    if (collections[i].findMethods().length > 0 && collections[i].findOmittedMethods().length > 0) {      throw new IllegalArgumentException(sm.getString("standardContext.securityConstraint.mixHttpMethod"));    }  }synchronized (constraintsLock) {    SecurityConstraint results[]=new SecurityConstraint[constraints.length + 1];    for (int i=0; i < constraints.length; i++)     results[i]=constraints[i];    results[constraints.length]=constraint;    constraints=results;  }}  }
class C{  static void usePostReadRequestControl(Connection connection) throws LdapException {  if (isSupported(PostReadRequestControl.OID)) {    final String dn="uid=bjensen,ou=People,dc=example,dc=com";    final ModifyRequest request=Requests.newModifyRequest(dn).addControl(PostReadRequestControl.newControl(true,"description")).addModification(ModificationType.REPLACE,"description","Using the PostReadRequestControl");    final Result result=connection.modify(request);    try {      final PostReadResponseControl control=result.getControl(PostReadResponseControl.DECODER,new DecodeOptions());      final Entry entry=control.getEntry();      final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);      writer.writeEntry(entry);      writer.close();    } catch (    final DecodeException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());    }catch (    final IOException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    }  } else {    System.err.println("PostReadRequestControl not supported");  }}  }
class C{  public GSERException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  public SMG11NModelImpl(HttpServletRequest req,String serviceName,Map map) throws AMConsoleException {  super(req,serviceName,map);}  }
class C{  @Nullable private P retrievePresenterFromExistingLoader(PresenterRetainLoader loader,Class<? extends P> presenterClazz){  Object presenter=loader.getPresenter();  if (presenterClazz.isInstance(presenter)) {    return presenterClazz.cast(presenter);  } else {    return null;  }}  }
class C{  static <T>PromiseHandle<T> deferCall(Consumer<CallbackHandle<T>> promiseConsumer){  return new InvokerPromise<>(promiseConsumer);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  Attr attribute;  String namespaceURI=null;  String qualifiedName="abc:def";  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","dom:doc",docType);{    boolean success=false;    try {      attribute=newDoc.createAttributeNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("documentcreateattributeNS05",success);  }}  }
class C{  public Collection<Long> listDurationOfTokens(TokenType tokenType) throws CoreTokenException {  final Collection<Long> results=new ArrayList<Long>();  final long unixTime=TimeUtils.currentUnixTime();  final TokenFilter filter=new TokenFilterBuilder().returnAttribute(CoreTokenField.CREATE_TIMESTAMP).and().withAttribute(CoreTokenField.TOKEN_TYPE,tokenType).build();  for (  PartialToken token : store.attributeQuery(filter)) {    Calendar timestamp=token.getValue(CoreTokenField.CREATE_TIMESTAMP);    results.add(unixTime - TimeUtils.toUnixTime(timestamp));  }  return results;}  }
class C{  private void readHeadTable() throws java.io.IOException {  int table_location[];  table_location=tables.get("head");  if (table_location == null) {    if (fileName != null) {      throw new IOException("table.1.does.not.exist.in.2").setMessageParams("head",fileName);    } else {      throw new IOException("table.1.does.not.exist").setMessageParams("head");    }  }  raf.seek(table_location[0] + 16);  head=new HeaderTable();  head.flags=raf.readUnsignedShort();  head.unitsPerEm=raf.readUnsignedShort();  raf.skipBytes(16);  head.xMin=raf.readShort();  head.yMin=raf.readShort();  head.xMax=raf.readShort();  head.yMax=raf.readShort();  head.macStyle=raf.readUnsignedShort();}  }
class C{  public synchronized void stop(){  stopPointAdder=true;  while (!pointAdderStopped) {    try {      t.interrupt();      Thread.sleep(100);    } catch (    Throwable t) {    }  }}  }
class C{  protected static void migrateDelegationPolicies(SSOToken token,String orgName) throws SSOException {  System.out.println("Migrating delegation policies for org: " + orgName);  try {    DelegationManager dm=new DelegationManager(token,orgName);    Set privileges=dm.getPrivileges();    Set newPrivileges=new HashSet();    for (Iterator items=privileges.iterator(); items.hasNext(); ) {      DelegationPrivilege dp=(DelegationPrivilege)items.next();      String name=dp.getName();      dm.removePrivilege(name);      Set permissions=dp.getPermissions();      DelegationPermission perm=null;      int index=-1;      for (Iterator perms=permissions.iterator(); perms.hasNext(); ) {        perm=(DelegationPermission)perms.next();        String resource=perm.getOrganizationName();        index=resource.toLowerCase().indexOf("," + SMSEntry.getRootSuffix());        if (index != -1) {          resource=resource.substring(0,index) + "," + DNMapper.serviceDN+ resource.substring(index + SMSEntry.getRootSuffix().length() + 1);          perm.setOrganizationName(resource);        }      }      Set subjects=dp.getSubjects();      Set newSubjects=new HashSet();      for (Iterator ss=subjects.iterator(); ss.hasNext(); ) {        String subject=(String)ss.next();        index=subject.toLowerCase().indexOf("," + SMSEntry.getRootSuffix());        if (index != -1) {          subject=subject.substring(0,index) + "," + DNMapper.serviceDN+ subject.substring(index + SMSEntry.getRootSuffix().length() + 1);        }        newSubjects.add(subject);      }      dp.setSubjects(newSubjects);      newPrivileges.add(dp);    }    int index=orgName.toLowerCase().indexOf("," + SMSEntry.getRootSuffix());    if (index != -1) {      orgName=orgName.substring(0,index) + "," + DNMapper.serviceDN+ orgName.substring(index + 1 + SMSEntry.getRootSuffix().length());    }    dm=new DelegationManager(token,orgName);    for (Iterator items=newPrivileges.iterator(); items.hasNext(); ) {      DelegationPrivilege dp=(DelegationPrivilege)items.next();      dm.addPrivilege(dp);    }    System.out.println("Delegation Policies for org: " + orgName + "\n"+ privileges);  } catch (  DelegationException de) {    System.out.println("   " + de.getMessage());  }}  }
class C{  public ManageNameIDRequest createManageNameIDRequest(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.MANAGE_NAMEID_REQUEST);  if (obj == null) {    return new ManageNameIDRequestImpl();  } else {    return (ManageNameIDRequest)obj;  }}  }
class C{  public StateRouteSupport(PlaPointInt p_start_corner,int p_layer,int[] p_pen_half_width_arr,boolean[] p_layer_active_arr,NetNosList p_net_no_arr,int p_clearance_class,RuleViaInfoList p_via_rule,boolean p_push_enabled,BrdItem p_start_item,Set<BrdItem> p_target_set,RoutingBoard p_board,boolean p_is_stitch_mode,boolean p_via_snap_to_smd_center,IteraSettings p_itera_settings){  r_board=p_board;  itera_settings=p_itera_settings;  layer_active_no=p_layer;  if (p_push_enabled) {    max_shove_trace_recursion_depth=20;    max_shove_via_recursion_depth=8;    max_spring_over_recursion_depth=5;  } else {    max_shove_trace_recursion_depth=0;    max_shove_via_recursion_depth=0;    max_spring_over_recursion_depth=0;  }  prev_corner=p_start_corner;  net_nos=p_net_no_arr;  pen_half_width_arr=p_pen_half_width_arr;  layer_active_arr=p_layer_active_arr;  clearance_class=p_clearance_class;  via_rule=p_via_rule;  start_item=p_start_item;  target_set=p_target_set;  is_stitch_mode=p_is_stitch_mode;  via_snap_to_smd_center=p_via_snap_to_smd_center;  calculate_target_points_and_areas();  swap_pin_infos=calculate_swap_pin_infos();}  }
class C{  @Override public String toString(){  String delegate=fileFilter != null ? fileFilter.toString() : filenameFilter.toString();  return super.toString() + "(" + delegate+ ")";}  }
class C{  private static Version readVersion(BitMatrix bitMatrix) throws FormatException {  int numRows=bitMatrix.getHeight();  int numColumns=bitMatrix.getWidth();  return Version.getVersionForDimensions(numRows,numColumns);}  }
class C{  @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  public SessionTimeoutAttribute(byte[] octets){  super(octets);  timeout=OctetUtils.toIntVal(octets);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newElement;  String newElementName;  int newElementType;  String newElementValue;  doc=(Document)load("staff",true);  newElement=doc.createElement("address");  newElementName=newElement.getNodeName();  assertEquals("name","address",newElementName);  newElementType=(int)newElement.getNodeType();  assertEquals("type",1,newElementType);  newElementValue=newElement.getNodeValue();  assertNull("valueInitiallyNull",newElementValue);}  }
class C{  private IndexRuleTree createAndPopulateTree(String realm) throws EntitlementException {  IndexRuleTree indexTree=null;  String baseDN=String.format(REALM_DN_TEMPLATE,dnMapper.orgNameToDN(realm));  SSOToken token=AccessController.doPrivileged(adminAction);  if (smDAO.checkIfEntryExists(baseDN,token)) {    indexTree=new SimpleReferenceTree();    try {      Set<String> excludes=Collections.emptySet();      Iterator<SMSDataEntry> i=smDAO.search(token,baseDN,SEARCH_FILTER,0,0,false,false,excludes);      while (i.hasNext()) {        SMSDataEntry e=i.next();        @SuppressWarnings("unchecked") Set<String> policyPathIndexes=e.getAttributeValues(INDEX_PATH_ATT);        indexTree.addIndexRules(policyPathIndexes);      }    } catch (    SMSException smsE) {      throw new EntitlementException(52,new Object[]{baseDN},smsE);    }    if (DEBUG.messageEnabled()) {      DEBUG.message(String.format("Index rule tree created for '%s'.",realm));    }  }  return indexTree;}  }
class C{  private E awaitMatch(Node s,Node pred,E e,boolean timed,long nanos){  final long deadline=timed ? System.nanoTime() + nanos : 0L;  Thread w=Thread.currentThread();  int spins=-1;  ThreadLocalRandom randomYields=null;  for (; ; ) {    Object item=s.item;    if (item != e) {      s.forgetContents();      return LinkedTransferQueue.<E>cast(item);    }    if ((w.isInterrupted() || (timed && nanos <= 0)) && s.casItem(e,s)) {      unsplice(pred,s);      return e;    }    if (spins < 0) {      if ((spins=spinsFor(pred,s.isData)) > 0)       randomYields=ThreadLocalRandom.current();    } else     if (spins > 0) {      --spins;      if (randomYields.nextInt(CHAINED_SPINS) == 0)       Thread.yield();    } else     if (s.waiter == null) {      s.waiter=w;    } else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos > 0L)       LockSupport.parkNanos(this,nanos);    } else {      LockSupport.park(this);    }  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthPasswordFieldUI();}  }
class C{  public int length(){  return nameValuePairs.size();}  }
class C{  XPathFactory createInstance(String className) throws XPathFactoryConfigurationException {  return createInstance(className,false);}  }
class C{  public boolean isRemoteLDAPServer(int serverId){synchronized (remoteDirectoryServers) {    for (    LightweightServerHandler server : remoteDirectoryServers.values()) {      if (serverId == server.getServerId()) {        return true;      }    }    return false;  }}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);  writer.writeStartSequence();  writer.writeEnumerated(resultCode);  if (attributeType != null) {    writer.writeOctetString(TYPE_ATTRIBUTE_TYPE,attributeType);  }  writer.writeEndSequence();  writer.writeEndSequence();}  }
class C{  private String listToString(List roleNames){  StringBuffer sb=new StringBuffer();  for (Iterator i=roleNames.iterator(); i.hasNext(); ) {    String role=(String)i.next();    if (sb.length() > 0) {      sb.append("; ");    }    sb.append(getLocalizedString(role + ".label"));  }  return sb.toString();}  }
class C{  public void insert_boolean(boolean value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_boolean",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_boolean(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testMultiplyDiffScaleNegPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="9.20003122862175749786430095741145455670101391569026662845893091880727173060570190220616E+91";  int cScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.multiply(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  protected void sendMessage(byte[] msg,InetAddress peerAddress,int peerPort,String peerProtocol,boolean retry) throws IOException {  if (peerPort == -1) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      this.logger.logDebug(getClass().getName() + ":sendMessage: Dropping reply!");    }    throw new IOException("Receiver port not set ");  } else {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      this.logger.logDebug(":sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n"+ " messageSize = "+ msg.length);    }  }  if (peerProtocol.compareToIgnoreCase("UDP") == 0) {    DatagramPacket reply=new DatagramPacket(msg,msg.length,peerAddress,peerPort);    try {      DatagramSocket sock;      if (sipStack.udpFlag) {        sock=((UDPMessageProcessor)messageProcessor).sock;      } else {        sock=sipStack.getNetworkLayer().createDatagramSocket();      }      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        this.logger.logDebug("sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n"+ new String(msg));      }      sock.send(reply);      if (!sipStack.udpFlag)       sock.close();    } catch (    IOException ex) {      throw ex;    }catch (    Exception ex) {      InternalErrorHandler.handleException(ex);    }  } else {    Socket outputSocket=sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),peerAddress,peerPort,"tcp",msg,retry,this);    OutputStream myOutputStream=outputSocket.getOutputStream();    myOutputStream.write(msg,0,msg.length);    myOutputStream.flush();  }}  }
class C{  public SynchronizationProviderConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  registeredProviders=new ConcurrentHashMap<>();}  }
class C{  protected static Vector convertToVector(Object[] anArray){  if (anArray == null) {    return null;  }  Vector<Object> v=new Vector<Object>(anArray.length);  for (  Object o : anArray) {    v.addElement(o);  }  return v;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.ParameterType createParameterType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.ParameterTypeImpl();}  }
class C{  private SchemaFactory _newFactory(String schemaLanguage){  SchemaFactory sf;  String propertyName=SERVICE_CLASS.getName() + ":" + schemaLanguage;  try {    debugPrintln("Looking up system property '" + propertyName + "'");    String r=ss.getSystemProperty(propertyName);    if (r != null) {      debugPrintln("The value is '" + r + "'");      sf=createInstance(r,true);      if (sf != null)       return sf;    } else     debugPrintln("The property is undefined.");  } catch (  Throwable t) {    if (debug) {      debugPrintln("failed to look up system property '" + propertyName + "'");      t.printStackTrace();    }  }  String javah=ss.getSystemProperty("java.home");  String configFile=javah + File.separator + "lib"+ File.separator+ "jaxp.properties";  try {    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          File f=new File(configFile);          firstTime=false;          if (ss.doesFileExist(f)) {            debugPrintln("Read properties file " + f);            cacheProps.load(ss.getFileInputStream(f));          }        }      }    }    final String factoryClassName=cacheProps.getProperty(propertyName);    debugPrintln("found " + factoryClassName + " in $java.home/jaxp.properties");    if (factoryClassName != null) {      sf=createInstance(factoryClassName,true);      if (sf != null) {        return sf;      }    }  } catch (  Exception ex) {    if (debug) {      ex.printStackTrace();    }  }  final SchemaFactory factoryImpl=findServiceProvider(schemaLanguage);  if (factoryImpl != null) {    return factoryImpl;  }  if (schemaLanguage.equals("http://www.w3.org/2001/XMLSchema")) {    debugPrintln("attempting to use the platform default XML Schema validator");    return createInstance("com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory",true);  }  debugPrintln("all things were tried, but none was found. bailing out.");  return null;}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.EntityConfigType createEntityConfigType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.EntityConfigTypeImpl();}  }
class C{  private int finishLoginModule(int state) throws AuthLoginException {  if (authenticationContext.getStatus().equals(AuthContext.Status.IN_PROGRESS)) {    return processError(bundle.getString("invalidLoginState"),"SAML2 :: injectCallbacks() : Authentication Module - invalid login state");  }  return stepLogin(null,state);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  KeyDeclaration kd=new KeyDeclaration(handler.getStylesheet(),handler.nextUid());  kd.setDOMBackPointer(handler.getOriginatingNode());  kd.setLocaterInfo(handler.getLocator());  setPropertiesFromAttributes(handler,rawName,attributes,kd);  handler.getStylesheet().setKey(kd);}  }
class C{  protected void constructApplication(String[] args){  try {    quickSetupClass=Class.forName("org.opends.quicksetup.ui.QuickSetup");    quickSetup=quickSetupClass.newInstance();    quickSetupClass.getMethod("initialize",new Class[]{TempLogFile.class,String[].class}).invoke(quickSetup,tempLogFile,args);  } catch (  Exception e) {    InternalError error=new InternalError("Failed to invoke initialize method");    error.initCause(e);    throw error;  }}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    r.run();  }}  }
class C{  private void playJumpTrailEffect(){  if (opacity > 0) {    sMario.getJumpEffect().setOpacity(opacity);    sMario.getJumpTrail().setOpacity(opacity);    sMario.getJumpTrail().setFitHeight(sMario.getJumpTrail().getFitHeight() + (opacity * jumpTrailHeightDelta));    sMario.getJumpTrail().setTranslateY(sMario.getJumpTrail().getTranslateY() - (opacity * jumpTrailHeightDelta));    opacity-=0.06;  }}  }
class C{  protected File file(){  if (pathname == null || pathname.length() == 0) {    return null;  }  File file=new File(pathname);  if (!file.isAbsolute()) {    Context context=getContext();    ServletContext servletContext=context.getServletContext();    File tempdir=(File)servletContext.getAttribute(ServletContext.TEMPDIR);    if (tempdir != null) {      file=new File(tempdir,pathname);    }  }  return file;}  }
class C{  private byte[] randomSalt(){synchronized (saltLock) {    int sb1=randomSaltIndex.nextInt(SALT_CHARS.length);    int sb2=randomSaltIndex.nextInt(SALT_CHARS.length);    return new byte[]{SALT_CHARS[sb1],SALT_CHARS[sb2]};  }}  }
class C{  public void test_getInstanceLjava_lang_String01() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  SSLContext sslContext;  for (int i=0; i < validValues.length; i++) {    sslContext=SSLContext.getInstance(validValues[i]);    assertNotNull("No SSLContext created",sslContext);    assertEquals("Invalid protocol",validValues[i],sslContext.getProtocol());  }}  }
class C{  public void addExtension(String oid,boolean critical,ASN1Encodable value){  this.addExtension(new DERObjectIdentifier(oid),critical,value);}  }
class C{  public PasswordPolicyException(IdRepoException e){  super(IdRepoBundle.BUNDLE_NAME,e.getErrorCode(),e.getLDAPErrorCode(),e.getMessageArgs());}  }
class C{  public void drawOval(int x,int y,int width,int height){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing oval: " + new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawOval(x,y,width,height);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawOval(x,y,width,height);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawOval(x,y,width,height);}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  @Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){  return _fooLocalService.dynamicQueryCount(dynamicQuery,projection);}  }
class C{  protected void firePopupMenuCanceled(){  Object[] listeners=listenerList.getListenerList();  PopupMenuEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == PopupMenuListener.class) {      if (e == null)       e=new PopupMenuEvent(this);      ((PopupMenuListener)listeners[i + 1]).popupMenuCanceled(e);    }  }}  }
class C{  public void removeLayoutComponent(Component comp){  invalidateLayout(comp.getParent());}  }
class C{  public SubSchemaUpgradeWrapper(SubSchemaModificationWrapper sAdd){  subSchemasAdded=sAdd;}  }
class C{  public void addObjectCreate(String pattern,String className){  addRule(pattern,new ObjectCreateRule(className));}  }
class C{  public static boolean isValidGenre(String genreId){  try {    short genreVal=Short.parseShort(genreId);    if ((genreVal - 1) <= GenreTypes.getMaxStandardGenreId()) {      return true;    }  } catch (  NumberFormatException nfe) {  }  Integer id3GenreId=GenreTypes.getInstanceOf().getIdForValue(genreId);  if (id3GenreId != null) {    if (id3GenreId <= GenreTypes.getMaxStandardGenreId()) {      return true;    }  }  return false;}  }
class C{  private static void rdf_LiteralPropertyElement(XMPMetaImpl xmp,XMPNode xmpParent,Node xmlNode,boolean isTopLevel) throws XMPException {  XMPNode newChild=addChildNode(xmp,xmpParent,xmlNode,null,isTopLevel);  for (int i=0; i < xmlNode.getAttributes().getLength(); i++) {    Node attribute=xmlNode.getAttributes().item(i);    if ("xmlns".equals(attribute.getPrefix()) || (attribute.getPrefix() == null && "xmlns".equals(attribute.getNodeName()))) {      continue;    }    String attrNS=attribute.getNamespaceURI();    String attrLocal=attribute.getLocalName();    if (XML_LANG.equals(attribute.getNodeName())) {      addQualifierNode(newChild,XML_LANG,attribute.getNodeValue());    } else     if (NS_RDF.equals(attrNS) && ("ID".equals(attrLocal) || "datatype".equals(attrLocal))) {      continue;    } else {      throw new XMPException("Invalid attribute for literal property element",BADRDF);    }  }  String textValue="";  for (int i=0; i < xmlNode.getChildNodes().getLength(); i++) {    Node child=xmlNode.getChildNodes().item(i);    if (child.getNodeType() == Node.TEXT_NODE) {      textValue+=child.getNodeValue();    } else {      throw new XMPException("Invalid child of literal property element",BADRDF);    }  }  newChild.setValue(textValue);}  }
class C{  private void mergeAdministrators(ADSContext adsCtx) throws ADSContextException {  Set<Map<AdministratorProperty,Object>> admins2=adsCtx.readAdministratorRegistry();  SortedSet<String> notDefinedAdmins=new TreeSet<>();  for (  Map<AdministratorProperty,Object> admin2 : admins2) {    String uid=(String)admin2.get(AdministratorProperty.UID);    if (!isAdministratorAlreadyRegistered(uid)) {      notDefinedAdmins.add(uid);    }  }  if (!notDefinedAdmins.isEmpty()) {    LocalizableMessage msg=ERR_ADS_ADMINISTRATOR_MERGE.get(adsCtx.getHostPort(),getHostPort(),joinAsString(Constants.LINE_SEPARATOR,notDefinedAdmins),getHostPort());    throw new ADSContextException(ErrorType.ERROR_MERGING,msg,null);  }}  }
class C{  static IndexQuery createNullIndexQuery(){  return new NullIndexQuery();}  }
class C{  private SAXUnmarshallerHandler createUnmarshallerHandler(Locator locator){  SAXUnmarshallerHandler unmarshaller=new SAXUnmarshallerHandlerImpl(this,grammarInfo);  try {    if (isValidating()) {      unmarshaller=ValidatingUnmarshaller.create(context.getGrammar(),unmarshaller,locator);    }  } catch (  JAXBException e) {    e.printStackTrace();  }  return unmarshaller;}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public boolean isDecimalSeparatorAlwaysShown(){  return decimalSeparatorAlwaysShown;}  }
class C{  private static List<Field> filterFieldList(List<Field> fields,Class<?> filterClass){  List<Field> filteredFields=new LinkedList<>();  for (  Field f : fields) {    if ((filterClass == null) || filterClass.isAssignableFrom(f.getType())) {      filteredFields.add(f);    }  }  return filteredFields;}  }
class C{  public void write(byte[] data,int offset,int count){  byte[] tmp=new byte[count];  System.arraycopy(data,offset,tmp,0,count);  this.audioConsumer.consume(tmp);}  }
class C{  private void loadDataState() throws DirectoryException {  state.clearInMemory();  state.loadState();  getGenerator().adjust(state.getMaxCSN(getServerId()));  generationId=loadGenerationId();}  }
class C{  private static String reasonToString(int reason){  if ((reason > 0) && (reason < REASON_STRINGS.length)) {    return REASON_STRINGS[reason];  }  return "Unknown reason " + reason;}  }
class C{  protected boolean scrollLeft(TextView widget,Spannable buffer,int amount){  final int minScrollX=getScrollBoundsLeft(widget);  int scrollX=widget.getScrollX();  if (scrollX > minScrollX) {    scrollX=Math.max(scrollX - getCharacterWidth(widget) * amount,minScrollX);    widget.scrollTo(scrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public void testAbsMathContextPos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  int precision=41;  RoundingMode rm=RoundingMode.HALF_EVEN;  MathContext mc=new MathContext(precision,rm);  String result="1.2380964839238475457356735674573563567890E+53";  int resScale=-13;  BigDecimal res=aNumber.abs(mc);  assertEquals("incorrect value",result,res.toString());  assertEquals("incorrect scale",resScale,res.scale());}  }
class C{  ReconQueryResult querySourceIter(int pageSize,String pagingCookie) throws SynchronizationException {  ReconQueryResult result=getReconHandler().querySource(pageSize,pagingCookie);  setSourceIds(result.getAllIds());  return result;}  }
class C{  public static DsnCircuitReadScopeResult read_scope(JflexScanner p_scanner){  Object next_token=null;  double min_trace_length=0;  double max_trace_length=0;  Collection<String> use_via=new LinkedList<String>();  Collection<String> use_layer=new LinkedList<String>();  for (; ; ) {    Object prev_token=next_token;    try {      next_token=p_scanner.next_token();    } catch (    java.io.IOException e) {      System.out.println("Circuit.read_scope: IO error scanning file");      return null;    }    if (next_token == null) {      System.out.println("Circuit.read_scope: unexpected end of file");      return null;    }    if (next_token == DsnKeyword.CLOSED_BRACKET) {      break;    }    if (prev_token == DsnKeyword.OPEN_BRACKET) {      if (next_token == DsnKeyword.LENGTH) {        DsnCircuitLengthMatch length_rule=read_length_scope(p_scanner);        if (length_rule != null) {          min_trace_length=length_rule.min_length;          max_trace_length=length_rule.max_length;        }      } else       if (next_token == DsnKeyword.USE_VIA) {        use_via.addAll(DsnKeywordStructure.read_via_padstacks(p_scanner));      } else       if (next_token == DsnKeyword.USE_LAYER) {        use_layer.addAll(DsnReadUtils.read_string_list_scope(p_scanner));      } else {        DsnKeywordScope.skip_scope(p_scanner);      }    }  }  return new DsnCircuitReadScopeResult(max_trace_length,min_trace_length,use_via,use_layer);}  }
class C{  protected boolean createTunnelToProxy(HttpRoute route,int hop,HttpContext context) throws HttpException, IOException {  throw new UnsupportedOperationException("Proxy chains are not supported.");}  }
class C{  public FrameBodyTORY(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static PasswordExpiringResponseControl newControl(final int secondsUntilExpiration){  return new PasswordExpiringResponseControl(false,secondsUntilExpiration);}  }
class C{  public Action createAction(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ACTION,elem);  if (obj == null) {    return new ActionImpl(elem);  } else {    return (Action)obj;  }}  }
class C{  public boolean isInactive(){  return isInactive;}  }
class C{  public ParallelWorkerThread(ParallelWorkQueue workQueue,int threadID){  super("Worker Thread " + threadID);  this.workQueue=workQueue;  stoppedByReducedThreadNumber=false;  shutdownRequested=false;  waitingForWork=false;  operation=null;  workerThread=null;}  }
class C{  public void store(String realm,String config) throws AMConsoleException {  String errorMsg=null;  String[] params={realm,config};  logEvent("ATTEMPT_MODIFY_AUTH_CONFIG_PROFILE",params);  try {    AMAuthConfigUtils.replaceNamedConfig(config,DEFAULT_PRIORITY,configData,realm,getUserSSOToken());    logEvent("SUCCEED_MODIFY_AUTH_CONFIG_PROFILE",params);  } catch (  SSOException e) {    errorMsg=getErrorString(e);    String[] paramsEx={realm,config,errorMsg};    logEvent("SSO_EXCEPTION_MODIFY_AUTH_CONFIG_PROFILE",paramsEx);  }catch (  SMSException e) {    errorMsg=getErrorString(e);    String[] paramsEx={realm,config,errorMsg};    logEvent("SMS_EXCEPTION_MODIFY_AUTH_CONFIG_PROFILE",paramsEx);  }catch (  AMConfigurationException e) {    errorMsg=getErrorString(e);    String[] paramsEx={realm,config,errorMsg};    logEvent("AUTH_CONFIGURATION_EXCEPTION_MODIFY_AUTH_CONFIG_PROFILE",paramsEx);  }  if (errorMsg != null) {    throw new AMConsoleException(errorMsg);  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String agentName=getStringOptionValue(IArgument.AGENT_NAME);  String agentType=getStringOptionValue(IArgument.AGENT_TYPE);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  Map attributeValues=Collections.EMPTY_MAP;  if ((datafile != null) || (attrValues != null)) {    attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  }  if ((attributeValues == null) || attributeValues.isEmpty()) {    throw new CLIException(getResourceString("agent-creation-pwd-needed"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  String serverURL=getStringOptionValue(IArgument.SERVER_URL);  String agentURL=getStringOptionValue(AGENT_URL);  boolean webJ2EEAgent=agentType.equals("WebAgent") || agentType.equals("J2EEAgent");  if (!webJ2EEAgent) {    if (serverURL != null) {      throw new CLIException(getResourceString("does-not-support-server-url"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    if (agentURL != null) {      throw new CLIException(getResourceString("does-not-support-agent-url"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } else {    if (agentURL != null && serverURL == null) {      throw new CLIException(getResourceString("server-url-missing"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    if (serverURL != null && agentURL == null) {      throw new CLIException(getResourceString("agent-url-missing"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    if (serverURL == null && agentURL == null && attributeValues.size() == 1) {      throw new CLIException(getResourceString("missing-urls"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  }  boolean hasPassword=false;  for (Iterator i=attributeValues.keySet().iterator(); (i.hasNext() && !hasPassword); ) {    String k=(String)i.next();    if (k.equals(CLIConstants.ATTR_SCHEMA_AGENT_PWD)) {      Set values=(Set)attributeValues.get(k);      if ((values != null) && !values.isEmpty()) {        String pwd=(String)values.iterator().next();        hasPassword=(pwd.trim().length() > 0);      }    }  }  if (!hasPassword) {    throw new CLIException(getResourceString("agent-creation-pwd-needed"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  String[] params={realm,agentType,agentName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_AGENT",params);  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set set=amir.getAllowedIdOperations(IdType.AGENTONLY);    if (!set.contains(IdOperation.CREATE)) {      String[] args={realm};      throw new CLIException(MessageFormat.format(getResourceString("does-not-support-agent-creation"),(Object[])args),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    if (webJ2EEAgent) {      if (serverURL != null) {        FQDNUrl fqdnServerURL=null;        try {          fqdnServerURL=new FQDNUrl(serverURL);        } catch (        MalformedURLException e) {          throw new CLIException(getResourceString("server-url-invalid"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);        }        FQDNUrl fqdnAgentURL=null;        try {          fqdnAgentURL=new FQDNUrl(agentURL);        } catch (        MalformedURLException e) {          throw new CLIException(getResourceString("agent-url-invalid"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);        }        Map map=AgentConfiguration.getDefaultValues(agentType,false);        map.putAll(attributeValues);        AgentConfiguration.tagswapAttributeValues(map,agentType,fqdnServerURL,fqdnAgentURL);        AgentConfiguration.removeDefaultDuplicates(attributeValues,map);        AgentConfiguration.createAgent(adminSSOToken,realm,agentName,agentType,map);      } else {        AgentConfiguration.createAgent(adminSSOToken,realm,agentName,agentType,attributeValues);      }    } else {      AgentConfiguration.createAgent(adminSSOToken,realm,agentName,agentType,attributeValues);    }    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("create-agent-succeeded"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_CREATE_AGENT",params);  } catch (  ConfigurationException e) {    String[] args={realm,agentType,agentName,e.getMessage()};    debugError("CreateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IdRepoException e) {    String[] args={realm,agentType,agentName,e.getMessage()};    debugError("CreateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,agentType,agentName,e.getMessage()};    debugError("CreateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentType,agentName,e.getMessage()};    debugError("CreateAgent.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AGENT",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public final HashCode append(float value){  hashCode=combine(hashCode,value);  return this;}  }
class C{  private void initClipRectForHeader(Rect clipRect,RecyclerView recyclerView,View header){  mDimensionCalculator.initMargins(clipRect,header);  if (mOrientationProvider.getOrientation(recyclerView) == LinearLayout.VERTICAL) {    clipRect.set(recyclerView.getPaddingLeft(),recyclerView.getPaddingTop(),recyclerView.getWidth() - recyclerView.getPaddingRight() - clipRect.right,recyclerView.getHeight() - recyclerView.getPaddingBottom());  } else {    clipRect.set(recyclerView.getPaddingLeft(),recyclerView.getPaddingTop(),recyclerView.getWidth() - recyclerView.getPaddingRight(),recyclerView.getHeight() - recyclerView.getPaddingBottom() - clipRect.bottom);  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public static byte[] flateDecode(byte[] input,boolean strict){  ByteArrayInputStream stream=new ByteArrayInputStream(input);  InflaterInputStream zip=new InflaterInputStream(stream);  ByteArrayOutputStream output=new ByteArrayOutputStream();  byte[] b=new byte[strict ? 4092 : 1];  try {    int n;    while ((n=zip.read(b)) >= 0) {      output.write(b,0,n);    }    zip.close();    output.close();    return output.toByteArray();  } catch (  Exception e) {    return strict ? null : output.toByteArray();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeelementnodeattributes.class,args);}  }
class C{  public Set<N> nodeSet(){  return theNodeSet;}  }
class C{  public int read() throws IOException {synchronized (lock) {    ensureOpen();    if (pos >= count)     return -1; else     return buf[pos++];  }}  }
class C{  public void syncEndTagFile(){  copyTagToPageScope(VariableInfo.AT_BEGIN);  copyTagToPageScope(VariableInfo.AT_END);  restoreNestedVariables();}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof SocketPermission))   return false;  SocketPermission that=(SocketPermission)obj;  if (this.mask != that.mask)   return false;  if ((that.mask & RESOLVE) != that.mask) {    if ((this.portrange[0] != that.portrange[0]) || (this.portrange[1] != that.portrange[1])) {      return false;    }  }  if (this.getName().equalsIgnoreCase(that.getName())) {    return true;  }  try {    this.getCanonName();    that.getCanonName();  } catch (  UnknownHostException uhe) {    return false;  }  if (this.invalid || that.invalid)   return false;  if (this.cname != null) {    return this.cname.equalsIgnoreCase(that.cname);  }  return false;}  }
class C{  synchronized void insertExtendedStyleAt(Style attr,int index){  insertAttributeSetAt(attr,extendedIndex + index);}  }
class C{  public void testCertificateFactory18() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    try {      CertificateFactory certF=CertificateFactory.getInstance(validValues[i]);      assertEquals("Incorrect type: ",validValues[i],certF.getType());      certF=CertificateFactory.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect type",certF.getType(),validValues[i]);      certF=CertificateFactory.getInstance(validValues[i],defaultProvider);      assertEquals("Incorrect provider",certF.getProvider(),defaultProvider);      assertEquals("Incorrect type",certF.getType(),validValues[i]);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchProviderException " + e.getMessage());    }  }}  }
class C{  public static void mySetSystemScope(IdentityScope scope){  IdentityScope.setSystemScope(scope);}  }
class C{  protected RemoteServer(){  super();}  }
class C{  public static void addToSite(SSOToken ssoToken,String instanceName,String siteId) throws SMSException, SSOException, ConfigurationException {  ServiceConfig svr=getServerConfig(ssoToken,instanceName);  if (svr != null) {    Map attrs=svr.getAttributes();    Set setID=(Set)attrs.get(ATTR_SERVER_ID);    String serverId=(String)setID.iterator().next();    if (!serverId.equals(DEFAULT_SERVER_ID)) {      Set set=new HashSet(2);      set.add(siteId);      attrs.put(ATTR_PARENT_SITE_ID,set);      svr.setAttributes(attrs);    }  } else {    Object[] param={instanceName};    throw new ConfigurationException("invalid.server.instance",param);  }}  }
class C{  public String productName(){  return properties.getProperty("product.name");}  }
class C{  @Override public void cancelAllOperations(CancelRequest cancelRequest){}  }
class C{  public void testConstructor_StringI() throws Exception {  int sport=startServer("Cons String,I");  int[] invalidPort={-1,Integer.MIN_VALUE,65536,Integer.MAX_VALUE};  SSLSocket ssl=getSSLSocket(InetAddress.getLocalHost().getHostName(),sport);  assertNotNull(ssl);  assertEquals(sport,ssl.getPort());  ssl.close();  try {    getSSLSocket("localhost",8082);    fail();  } catch (  IOException expected) {  }  for (int i=0; i < invalidPort.length; i++) {    try {      getSSLSocket(InetAddress.getLocalHost().getHostName(),invalidPort[i]);      fail();    } catch (    IllegalArgumentException expected) {    }  }  try {    getSSLSocket("bla-bla",sport);    fail();  } catch (  UnknownHostException expected) {  }}  }
class C{  public void paintTabbedPaneContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @DataProvider(name="invalidStatements") public Object[][] invalids(){  return new Object[][]{{"add=st:(st=*),deeeel =st:(st=*)"},{"add=st:(st=*),foo =st:(st=*)"},{"add=st:(st=*),,,del=st:(st=*)"},{"add=st:(st=*),dellll =st:(st=*)"},{"add=st:(st=*)del=st:(st=*)"},{"add=st:(st=*),add=st:(st=*)"},{"add=st:(st=*),del=st:(st=*),add=st:(st=*)"},{"add=st:(st=*),del=cn:(st=*)"},{"add=st:(st=*) && cn:(cn=c*), del=st:(st=*) && l:(cn=c*)"}};}  }
class C{  public static PrintServiceAttributeSet synchronizedView(PrintServiceAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new SynchronizedPrintServiceAttributeSet(attributeSet);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("CGIEnvironment Info:");  sb.append(System.lineSeparator());  if (isValid()) {    sb.append("Validity: [true]");    sb.append(System.lineSeparator());    sb.append("Environment values:");    sb.append(System.lineSeparator());    for (    Entry<String,String> entry : env.entrySet()) {      sb.append("  ");      sb.append(entry.getKey());      sb.append(": [");      sb.append(blanksToString(entry.getValue(),"will be set to blank"));      sb.append("]");      sb.append(System.lineSeparator());    }    sb.append("Derived Command :[");    sb.append(nullsToBlanks(command));    sb.append("]");    sb.append(System.lineSeparator());    sb.append("Working Directory: [");    if (workingDirectory != null) {      sb.append(workingDirectory.toString());    }    sb.append("]");    sb.append(System.lineSeparator());    sb.append("Command Line Params:");    sb.append(System.lineSeparator());    for (    String param : cmdLineParameters) {      sb.append("  [");      sb.append(param);      sb.append("]");      sb.append(System.lineSeparator());    }  } else {    sb.append("Validity: [false]");    sb.append(System.lineSeparator());    sb.append("CGI script not found or not specified.");    sb.append(System.lineSeparator());    sb.append("Check the HttpServletRequest pathInfo property to see if it is what ");    sb.append(System.lineSeparator());    sb.append("you meant it to be. You must specify an existant and executable file ");    sb.append(System.lineSeparator());    sb.append("as part of the path-info.");    sb.append(System.lineSeparator());  }  return sb.toString();}  }
class C{  public void removeService(String serviceName,String version) throws SMSException, SSOException {  if (serviceName.equalsIgnoreCase(IdConstants.REPO_SERVICE) || serviceName.equalsIgnoreCase(ISAuthConstants.AUTH_SERVICE_NAME)) {    Object args[]={serviceName};    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-SERVICE_CORE_CANNOT_DELETE",args));  }  SMSEntry.validateToken(token);  String[] objs={serviceName};  Iterator results=SMSEntry.search(token,SMSEntry.baseDN,MessageFormat.format(SMSEntry.FILTER_PATTERN,(Object[])objs),0,0,false,false).iterator();  while (results.hasNext()) {    String dn=(String)results.next();    String configdn=SMSEntry.PLACEHOLDER_RDN + SMSEntry.EQUALS + version+ SMSEntry.COMMA+ dn;    CachedSMSEntry configsmse=CachedSMSEntry.getInstance(token,configdn);    if (configsmse.isDirty()) {      configsmse.refresh();    }    SMSEntry confige=configsmse.getClonedSMSEntry();    if (!confige.isNewEntry()) {      confige.delete(token);      configsmse.refresh(confige);    }    CachedSMSEntry smse=CachedSMSEntry.getInstance(token,dn);    if (smse.isDirty()) {      smse.refresh();    }    SMSEntry e=smse.getSMSEntry();    Iterator versions=e.subEntries(token,"*",0,false,false).iterator();    if (!versions.hasNext()) {      e.delete(token);      smse.refresh(e);    }  }}  }
class C{  protected void runSQL(String sql){  try {    DataSource dataSource=fooPersistence.getDataSource();    DB db=DBManagerUtil.getDB();    sql=db.buildSQL(sql);    sql=PortalUtil.transformSQL(sql);    SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);    sqlUpdate.update();  } catch (  Exception e) {    throw new SystemException(e);  }}  }
class C{  public static String advicesToXMLString(Map advices) throws PolicyException {  String advicesXML=null;  StringBuilder sb=new StringBuilder(200);  sb.append(ADVICES_START_TAG).append(NEW_LINE);  if (advices != null) {    sb.append(mapToXMLString(advices));  }  sb.append(ADVICES_END_TAG).append(NEW_LINE);  advicesXML=sb.toString();  return advicesXML;}  }
class C{  public static long rotateLeft(long v,int distance){  return (v << distance) | (v >>> -distance);}  }
class C{  public void addRequiredAttribute(Attr attr){  if (m_required == null) {    m_required=new AttrSet();  }  m_required.add(attr);}  }
class C{  public static int booleans(int nbFields){  return nbFields;}  }
class C{  @Override public synchronized int hashCode(){  int result=1;  for (int i=0; i < elementCount; i++) {    result=(31 * result) + (elementData[i] == null ? 0 : elementData[i].hashCode());  }  return result;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  protected void unregisterListeners(){  component.removeMouseListener(this);  component.removeMouseMotionListener(this);}  }
class C{  public String toASCIIString(){  if (length == 0) {    return "";  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < length; i++) {    byte b=buffer[offset + i];    if (StaticUtils.isPrintable(b)) {      sb.append((char)b);    } else {      sb.append('%');      sb.append(StaticUtils.byteToHex(b));    }  }  return sb.toString();}  }
class C{  public synchronized void start() throws Exception {  if (running) {    throw new IllegalStateException("Monitor is already running");  }  for (  FileAlterationObserver observer : observers) {    observer.initialize();  }  running=true;  if (threadFactory != null) {    thread=threadFactory.newThread(this);  } else {    thread=new Thread(this);  }  thread.start();}  }
class C{  void checkLayout(Container parent){  if (parent.getLayout() != this) {    throw new IllegalArgumentException("wrong parent for CardLayout");  }}  }
class C{  public void test_getPublicExponent(){  assertEquals("invalid public exponent",Util.rsaCrtParam.getPublicExponent(),key.getPublicExponent());}  }
class C{  public void close() throws IOException {  closedByReader=true;synchronized (this) {    in=-1;  }}  }
class C{  private Object doPrivileged(final String methodName,final Class<?>[] clazz,Object[] params){  try {    Method method=context.getClass().getMethod(methodName,clazz);    return executeMethod(method,context,params);  } catch (  Exception ex) {    try {      handleException(ex);    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      throw new RuntimeException(t.getMessage());    }    return null;  } finally {    params=null;  }}  }
class C{  public void close() throws IOException {  in=-1;  closedByReader=true;}  }
class C{  private void validate() throws ConnectorException {  if (!this.configuration.getThumbsEnabled()) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_THUMBNAILS_DISABLED);  }  if (!AccessControlUtil.getInstance(this.configuration).checkFolderACL(this.type,this.currentFolder,this.userRole,AccessControlUtil.CKFINDER_CONNECTOR_ACL_FILE_VIEW)) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_UNAUTHORIZED);  }  if (!FileUtils.checkFileName(this.fileName)) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_REQUEST);  }  if (FileUtils.checkIfFileIsHidden(this.fileName,this.configuration)) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_FILE_NOT_FOUND);  }  File typeThumbDir=new File(configuration.getThumbsPath() + File.separator + type);  try {    this.fullCurrentPath=typeThumbDir.getAbsolutePath() + currentFolder;    if (!typeThumbDir.exists()) {      FileUtils.mkdir(typeThumbDir,configuration);    }  } catch (  SecurityException e) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,e);  }}  }
class C{  private void emitStoreResult(Name name){  if (name != null && name.type != V_TYPE) {    emitStoreInsn(name.type,name.index());  }}  }
class C{  @Override protected void uninstallListeners(){  super.uninstallListeners();  splitPane.removePropertyChangeListener(this);}  }
class C{  public void addLifecycleListener(String type) throws MBeanException {  LifecycleListener listener=null;  try {    listener=(LifecycleListener)Class.forName(type).newInstance();  } catch (  InstantiationException e) {    throw new MBeanException(e);  }catch (  IllegalAccessException e) {    throw new MBeanException(e);  }catch (  ClassNotFoundException e) {    throw new MBeanException(e);  }  if (listener != null) {    try {      Container container=(Container)getManagedResource();      container.addLifecycleListener(listener);    } catch (    InstanceNotFoundException e) {      throw new MBeanException(e);    }catch (    RuntimeOperationsException e) {      throw new MBeanException(e);    }catch (    InvalidTargetObjectTypeException e) {      throw new MBeanException(e);    }  }}  }
class C{  public PdfObject remove(PdfName key){  return map.remove(key);}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  private boolean includesEphemerals(){  return portrange[0] == 0;}  }
class C{  public static short readSwappedShort(byte[] data,int offset){  return (short)(((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8));}  }
class C{  public void runTest() throws Throwable {  Document doc;  Text newTextNode;  String newTextName;  String newTextValue;  int newTextType;  doc=(Document)load("staff",true);  newTextNode=doc.createTextNode("This is a new Text node");  newTextValue=newTextNode.getNodeValue();  assertEquals("value","This is a new Text node",newTextValue);  newTextName=newTextNode.getNodeName();  assertEquals("name","#text",newTextName);  newTextType=(int)newTextNode.getNodeType();  assertEquals("type",3,newTextType);}  }
class C{  private static boolean isFinalCased(String src,int index,Locale locale){  BreakIterator wordBoundary=BreakIterator.getWordInstance(locale);  wordBoundary.setText(src);  int ch;  for (int i=index; (i >= 0) && !wordBoundary.isBoundary(i); i-=Character.charCount(ch)) {    ch=src.codePointBefore(i);    if (isCased(ch)) {      int len=src.length();      for (i=index + Character.charCount(src.codePointAt(index)); (i < len) && !wordBoundary.isBoundary(i); i+=Character.charCount(ch)) {        ch=src.codePointAt(i);        if (isCased(ch)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public UnexpectedException(String s,Exception ex){  super(s,ex);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitTryCatchBlock(start.getLabel(),end.getLabel(),handler == null ? null : handler.getLabel(),type);  int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,false));  }}  }
class C{  public void clear(){  data.remove(ATTR_ACTION_DATA);  data.put(ATTR_PENDING,false);}  }
class C{  public TRANSACTION_UNAVAILABLE(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  private void writeHostnameContents(ServerDescriptor desc,int maxLabelWidth){  writeLabelValue(INFO_HOSTNAME_LABEL.get(),desc.getHostname(),maxLabelWidth);}  }
class C{  public void print(char[] charArray){  print(new String(charArray,0,charArray.length));}  }
class C{  private static void insertInto(int pos,int[] starts,int numStarts){  while (starts[--numStarts] > pos) {    starts[numStarts]+=1;  }}  }
class C{  private void upgradePrivilege(PrivilegeManager privilegeManager,Privilege privilege,String resourceTypeUUID) throws UpgradeException {  try {    UpgradeProgress.reportStart(AUDIT_MODIFIED_POLICY_UUID_START,privilege.getName());    if (privilege != null) {      privilege.setResourceTypeUuid(resourceTypeUUID);      privilegeManager.modify(privilege);    }    UpgradeProgress.reportEnd(AUDIT_UPGRADE_SUCCESS);  } catch (  EntitlementException ee) {    UpgradeProgress.reportEnd(AUDIT_UPGRADE_FAIL);    throw new UpgradeException("Failed to add resource type uuid to privilege " + privilege.getName(),ee);  }}  }
class C{  private Key createLookupKey(Object key){  return new Key(key,null);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.ReferenceType createReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.ReferenceTypeImpl();}  }
class C{  public void undo(){  if (board_is_read_only || !(interactive_state instanceof StateMenu))   return;  TreeSet<Integer> changed_nets=new TreeSet<Integer>();  if (r_board.undo(changed_nets)) {    for (    Integer changed_net : changed_nets) {      update_ratsnest(changed_net);    }    if (changed_nets.size() > 0) {      itera_settings.autoroute_settings.pass_no_set(1);    }    screen_messages.set_status_message(resources.getString("undo"));  } else {    screen_messages.set_status_message(resources.getString("no_more_undo_possible"));  }  actlog.start_scope(LogfileScope.UNDO);  repaint();}  }
class C{  public void layerProtocol(HttpContext context,HttpParams params) throws IOException {  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  if (!this.tracker.isTunnelled()) {    throw new IllegalStateException("Protocol layering without a tunnel not supported.");  }  if (this.tracker.isLayered()) {    throw new IllegalStateException("Multiple protocol layering not supported.");  }  final HttpHost target=tracker.getTargetHost();  connOperator.updateSecureConnection(this.connection,target,context,params);  this.tracker.layerProtocol(this.connection.isSecure());}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.ProblemActionType createProblemActionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.ProblemActionTypeImpl();}  }
class C{  public ConfigException(LocalizableMessage message){  super(message);}  }
class C{  public NamedStyle(String name,Style parent){  attributes=getEmptySet();  if (name != null) {    setName(name);  }  if (parent != null) {    setResolveParent(parent);  }}  }
class C{  public Enumeration<V> elements(){  return new ValueIterator();}  }
class C{  public String mapInvokeDynamicMethodName(String name,String desc){  return name;}  }
class C{  public boolean canRedo(){  return alive && !hasBeenDone;}  }
class C{  public void presentLicenses(boolean preAccept){  LicenseSet licenses=licenseModule.getRequiredLicenses();  if (preAccept) {    licenses.acceptAll();  } else {    for (    License license : licenses) {      if (license.isAccepted()) {        continue;      }      user.show("");      user.show(license.getLicenseText());      String input=user.ask("prompt");      if (input != null && YES.startsWith(input.toLowerCase())) {        license.accept();      } else {        license.reject();      }    }  }}  }
class C{  @AfterClass public void enableLogging(){  TestCaseUtils.setDefaultLogLevel(Level.INFO);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.TransformElement createTransformElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.TransformElementImpl();}  }
class C{  public boolean isInteractive(){  return !noPromptArg.isPresent();}  }
class C{  public AuthLoginException(String message,Throwable nestedException){  super(message);  initCause(nestedException);}  }
class C{  public NameAlreadyExistsException(String rbName,String errorCode,Object[] args,Throwable t,String name,int type){  super(rbName,errorCode,args,t);  this.name=name;  this.type=type;  fillInStackTrace();}  }
class C{  public int elementAt(int i){  runTo(i);  return super.elementAt(i);}  }
class C{  @Override public Attribute toAttribute() throws LDAPException {  AttributeBuilder builder;  int semicolonPos=attributeType.indexOf(';');  if (semicolonPos > 0) {    builder=new AttributeBuilder(attributeType.substring(0,semicolonPos));    int nextPos=attributeType.indexOf(';',semicolonPos + 1);    while (nextPos > 0) {      String option=attributeType.substring(semicolonPos + 1,nextPos);      if (option.length() > 0) {        builder.setOption(option);      }      semicolonPos=nextPos;      nextPos=attributeType.indexOf(';',semicolonPos + 1);    }    String option=attributeType.substring(semicolonPos + 1);    if (option.length() > 0) {      builder.setOption(option);    }  } else {    builder=new AttributeBuilder(attributeType);  }  for (  ByteString value : values) {    if (!builder.add(value)) {      LocalizableMessage message=ERR_LDAP_ATTRIBUTE_DUPLICATE_VALUES.get(attributeType);      throw new LDAPException(LDAPResultCode.ATTRIBUTE_OR_VALUE_EXISTS,message);    }  }  return builder.toAttribute();}  }
class C{  public boolean isEnabled(){  return getTextComponent().isEnabled();}  }
class C{  public void testJavaContextClassLoader() throws Exception {  Assert.assertNotNull("Must have a Java context ClassLoader",Thread.currentThread().getContextClassLoader());}  }
class C{  public void invalidate(ShapeTile p_shape){  Collection<ExpandDrillPage> overlaps=overlapping_pages(p_shape);  for (  ExpandDrillPage curr_page : overlaps) {    curr_page.invalidate();  }}  }
class C{  public static int secondaryOrder(int order){  return (order & SECONDARY_ORDER_MASK_) >> SECONDARY_ORDER_SHIFT_;}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  public boolean use(String name){  if (includes != null && includes.contains(name)) {    return true;  } else   if (excludes != null && excludes.contains(name)) {    return false;  } else {    return includes != null ? false : true;  }}  }
class C{  public static void validateAttributes(AttrSet attrSet,Class cls,Guid guid) throws UMSException, DataConstraintException {  if (attrSet == null) {    return;  }  String[] attrNames=attrSet.getAttributeNames();  for (int i=0; i < attrNames.length; i++) {    Attr attr=attrSet.getAttribute(attrNames[i]);    validateAttribute(attr,cls,guid);  }}  }
class C{  private static void handleForwardError(String url,Exception exception,HttpServletResponse response){  debug.error("SAMLUtils.sendError: Exception occurred while trying to forward to resource: " + url,exception);  try {    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,exception.getMessage());  } catch (  IOException ioE) {    debug.error("Failed to inform the response of caught exception",ioE);  }}  }
class C{  public int previous(){  return this.icuIterator.previous();}  }
class C{  public InvalidTagException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  public AbandonOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,int idToAbandon){  super(clientConnection,operationID,messageID,requestControls);  this.idToAbandon=idToAbandon;  this.cancelResult=new CancelResult(ResultCode.CANNOT_CANCEL,ERR_CANNOT_CANCEL_ABANDON.get());}  }
class C{  @Override public void logAccess(Request request,Response response,long time,boolean useDefault){  boolean logged=false;  if (getAccessLog() != null) {    accessLog.log(request,response,time);    logged=true;  }  if (!logged && useDefault) {    AccessLog newDefaultAccessLog=defaultAccessLog.get();    if (newDefaultAccessLog == null) {      Host host=(Host)findChild(getDefaultHost());      Context context=null;      if (host != null && host.getState().isAvailable()) {        newDefaultAccessLog=host.getAccessLog();        if (newDefaultAccessLog != null) {          if (defaultAccessLog.compareAndSet(null,newDefaultAccessLog)) {            AccessLogListener l=new AccessLogListener(this,host,null);            l.install();          }        } else {          context=(Context)host.findChild("");          if (context != null && context.getState().isAvailable()) {            newDefaultAccessLog=context.getAccessLog();            if (newDefaultAccessLog != null) {              if (defaultAccessLog.compareAndSet(null,newDefaultAccessLog)) {                AccessLogListener l=new AccessLogListener(this,null,context);                l.install();              }            }          }        }      }      if (newDefaultAccessLog == null) {        newDefaultAccessLog=new NoopAccessLog();        if (defaultAccessLog.compareAndSet(null,newDefaultAccessLog)) {          AccessLogListener l=new AccessLogListener(this,host,context);          l.install();        }      }    }    newDefaultAccessLog.log(request,response,time);  }}  }
class C{  private void markDataDependenciesOf(Instruction primitive){  Set<Instruction> visiting=new LinkedHashSet<Instruction>();  Set<Instruction> toVisit=new LinkedHashSet<Instruction>();  toVisit.add(primitive);  while (toVisit.size() > 0) {    listener.notice("Finding output affecting code (" + Util.commas(toVisit.size()) + " remaining)...");    listener.progress(((double)dataDependenciesVisited.size()) / trace.getNumberOfInstructions() / 2);    Set<Instruction> temp=visiting;    visiting=toVisit;    toVisit=temp;    toVisit.clear();    for (    Instruction inst : visiting) {      if (inst != null && !dataDependenciesVisited.contains(inst)) {        dataDependenciesVisited.add(inst);        if (inst instanceof GETFIELD) {          FieldInfo field=trace.resolveFieldReference(((GETFIELD)inst).getFieldref());          if (field != null) {            fieldsPotentiallyAffectingOutput.add(field);            for (            Definition definition : field.getDefinitions())             toVisit.add(definition);          }        } else         if (inst instanceof Invoke) {          for (          MethodInfo method : trace.getMethodsFromReference((Invoke)inst)) {            methodsPotentiallyAffectingOutput.add(method);            for (            AbstractReturn ret : method.getReturns())             toVisit.add(ret);          }        } else         if (inst instanceof GetLocal) {          GetLocal get=(GetLocal)inst;          for (          SetLocal set : get.getCode().getLocalDependencies().getPotentialDefinitionsOfGetLocal(get))           toVisit.add(set);          if (get.getsMethodArgument()) {            int argumentNumber=get.getMethod().getArgumentNumberOfLocalID(get.getLocalID());            for (            Invoke potentialCaller : get.getMethod().getPotentialCallers()) {              StackDependencies.Producers producers=potentialCaller.getProducersOfArgument(argumentNumber);              for (int i=0; i < producers.getNumberOfProducers(); i++)               toVisit.add(producers.getProducer(i));            }          }        }        for (        Instruction branch : inst.getBranchDependencies())         toVisit.add(branch);        for (int arg=0; arg < inst.getNumberOfArgumentProducers(); arg++) {          StackDependencies.Producers producers=inst.getProducersOfArgument(arg);          for (int i=0; i < producers.getNumberOfProducers(); i++)           toVisit.add(producers.getProducer(i));        }      }    }  }}  }
class C{  protected void printComponent(Graphics g){  paintComponent(g);}  }
class C{  @Override public String toString(){  return "AccountStatusNotification(type=" + notificationType.getName() + ",dn="+ userEntry.getName()+ ",message="+ message+ ")";}  }
class C{  protected void handleRestricted(File directory,int depth,Collection<T> results) throws IOException {}  }
class C{  static void addPreReadResponse(final Operation operation,final LDAPPreReadRequestControl preReadRequest,final Entry entry){  if (preReadRequest == null) {    return;  }  final SearchResultEntry unfilteredSearchEntry=new SearchResultEntry(entry,null);  if (getAccessControlHandler().maySend(operation,unfilteredSearchEntry)) {    final Entry filteredEntry=entry.filterEntry(preReadRequest.getRequestedAttributes(),false,false,false);    final SearchResultEntry filteredSearchEntry=new SearchResultEntry(filteredEntry,null);    getAccessControlHandler().filterEntry(operation,unfilteredSearchEntry,filteredSearchEntry);    operation.addResponseControl(new LDAPPreReadResponseControl(filteredSearchEntry));  }}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){}  }
class C{  public CropImageFilter(int x,int y,int w,int h){  cropX=x;  cropY=y;  cropW=w;  cropH=h;}  }
class C{  public MP3File(){}  }
class C{  public void forceToDisplay(){  this.forceToDisplay=true;  framePanel=null;  frame.getContentPane().removeAll();  frame.getContentPane().add(getFramePanel());  frame.pack();  Utilities.centerOnScreen(frame);  setFocusOnButton(ButtonName.NEXT);}  }
class C{  @Override public void addAttributeChangeNotificationListener(NotificationListener listener,String name,Object handback) throws IllegalArgumentException {  if (listener == null)   throw new IllegalArgumentException("Listener is null");  if (attributeBroadcaster == null)   attributeBroadcaster=new BaseNotificationBroadcaster();  if (log.isDebugEnabled())   log.debug("addAttributeNotificationListener " + listener);  BaseAttributeFilter filter=new BaseAttributeFilter(name);  attributeBroadcaster.addNotificationListener(listener,filter,handback);}  }
class C{  public boolean tryUnlockWrite(){  long s;  WNode h;  if (((s=state) & WBIT) != 0L) {    state=(s+=WBIT) == 0L ? ORIGIN : s;    if ((h=whead) != null && h.status != 0)     release(h);    return true;  }  return false;}  }
class C{  private final void _writeNonSharedString(final String text,final int len) throws IOException {  int maxLen=len + len + len+ 2;  if (maxLen > _outputBuffer.length) {    _writeByte(SmileConstants.TOKEN_MISC_LONG_TEXT_UNICODE);    _mediumUTF8Encode(text,0,len);    _writeByte(BYTE_MARKER_END_OF_STRING);    return;  }  if ((_outputTail + maxLen) >= _outputEnd) {    _flushBuffer();  }  int origOffset=_outputTail;  _writeByte(TOKEN_BYTE_LONG_STRING_ASCII);  int byteLen=_shortUTF8Encode(text,0,len);  if (byteLen > len) {    _outputBuffer[origOffset]=SmileConstants.TOKEN_MISC_LONG_TEXT_UNICODE;  }  _outputBuffer[_outputTail++]=BYTE_MARKER_END_OF_STRING;}  }
class C{  public PdfCanvasProcessor(IEventListener eventListener,Map<String,IContentOperator> additionalContentOperators){  this(eventListener);  for (  Map.Entry<String,IContentOperator> entry : additionalContentOperators.entrySet()) {    registerContentOperator(entry.getKey(),entry.getValue());  }}  }
class C{  protected final void walk(File startDirectory,Collection<T> results) throws IOException {  if (startDirectory == null) {    throw new NullPointerException("Start Directory is null");  }  try {    handleStart(startDirectory,results);    walk(startDirectory,0,results);    handleEnd(results);  } catch (  CancelException cancel) {    handleCancelled(startDirectory,results,cancel);  }}  }
class C{  public SequenceHandler addBinding(final Handler handler,final Expression<Boolean> postcondition){  bindings.add(new Binding(handler,postcondition));  return this;}  }
class C{  private void addBaseEntry(String suffix,String namingAttribute) throws Exception {  TestCaseUtils.addEntry("dn: " + suffix,"objectClass: top","objectClass: organization","o: " + namingAttribute);}  }
class C{  public boolean canTraverseOutsideSubtree(){  return (null == m_arg0) ? false : super.canTraverseOutsideSubtree();}  }
class C{  public void destroy(Session requester,Session session) throws SessionException {  if (debug.messageEnabled()) {    debug.message(MessageFormat.format("Remote destroy {0}",session));  }  SessionRequest sreq=new SessionRequest(SessionRequest.DestroySession,requester.getID().toString(),false);  sreq.setDestroySessionID(session.getID().toString());  requests.sendRequestWithRetry(session.getSessionServiceURL(),sreq,session);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  transformer.pushCurrentTemplateRuleIsNull(true);  try {    transformSelectedNodes(transformer);  }  finally {    transformer.popCurrentTemplateRuleIsNull();  }}  }
class C{  @NonNull public static Interpolator path(int controlX1,int controlY1,int controlX2,int controlY2){  return PathInterpolatorCompat.create(controlX1,controlY1,controlX2,controlY2);}  }
class C{  public static final <V>V fromJson(String json,Class<V> type){  return GSON.fromJson(json,type);}  }
class C{  protected void drawTextAppearance(Rectangle rect,PdfFont font,float fontSize,String value,PdfFormXObject appearance){  PdfStream stream=new PdfStream().makeIndirect(getDocument());  PdfResources resources=appearance.getResources();  PdfCanvas canvas=new PdfCanvas(stream,resources,getDocument());  setDefaultAppearance(generateDefaultAppearanceString(font,fontSize,color,resources));  float height=rect.getHeight();  float width=rect.getWidth();  PdfFormXObject xObject=new PdfFormXObject(new Rectangle(0,0,width,height));  drawBorder(canvas,xObject,width,height);  if (isPassword()) {    value=obfuscatePassword(value);  }  canvas.beginVariableText().saveState().newPath();  Paragraph paragraph=new Paragraph(value).setFont(font).setFontSize(fontSize).setMultipliedLeading(1).setPaddings(0,2,0,2);  if (color != null) {    paragraph.setFontColor(color);  }  Integer justification=getJustification();  if (justification == null) {    justification=0;  }  float x=2;  TextAlignment textAlignment=TextAlignment.LEFT;  if (justification == ALIGN_RIGHT) {    textAlignment=TextAlignment.RIGHT;    x=rect.getWidth();  } else   if (justification == ALIGN_CENTER) {    textAlignment=TextAlignment.CENTER;    x=rect.getWidth() / 2;  }  Canvas modelCanvas=new Canvas(canvas,getDocument(),new Rectangle(0,-height,0,2 * height));  modelCanvas.setProperty(Property.APPEARANCE_STREAM_LAYOUT,true);  modelCanvas.showTextAligned(paragraph,x,rect.getHeight() / 2,textAlignment,VerticalAlignment.MIDDLE);  canvas.restoreState().endVariableText();  appearance.getPdfObject().setData(stream.getBytes());}  }
class C{  private synchronized void writeObject(ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  serialize(oos,(Collection)bcsListeners);}  }
class C{  public int indexOf(int elem){  return indexOf(elem,0);}  }
class C{  private JsonResourceType createJsonResourceType(JsonValue jsonValue) throws EntitlementException {  try {    String s=jsonValue.toString();    return MAPPER.readValue(s,JsonResourceType.class);  } catch (  IOException e) {    logger.error("Caught IOException while creating JSON wrapper",e);    throw new EntitlementException(INVALID_CLASS,getMessage(e));  }}  }
class C{  public String createXMLErrorString(){  StringBuilder errorXMLString=new StringBuilder();  errorXMLString.append(AuthXMLTags.EXCEPTION_BEGIN).append(AuthXMLTags.SPACE);  if (authErrorMessage != null) {    errorXMLString.append(AuthXMLTags.MESSAGE).append(AuthXMLTags.EQUAL).append(AuthXMLTags.QUOTE).append(XMLUtils.escapeSpecialCharacters(authErrorMessage)).append(AuthXMLTags.QUOTE).append(AuthXMLTags.SPACE);  }  if (tokenId != null) {    errorXMLString.append(AuthXMLTags.TOKEN_ID).append(AuthXMLTags.EQUAL).append(AuthXMLTags.QUOTE).append(tokenId).append(AuthXMLTags.QUOTE);  }  if (errorCode != null) {    errorXMLString.append(AuthXMLTags.SPACE).append(AuthXMLTags.ERROR_CODE).append(AuthXMLTags.EQUAL).append(AuthXMLTags.QUOTE).append(errorCode).append(AuthXMLTags.QUOTE);  }  if (authErrorTemplate != null) {    errorXMLString.append(AuthXMLTags.SPACE).append(AuthXMLTags.TEMPLATE_NAME).append(AuthXMLTags.EQUAL).append(AuthXMLTags.QUOTE).append(authErrorTemplate).append(AuthXMLTags.QUOTE);  }  errorXMLString.append(AuthXMLTags.ELEMENT_CLOSE).append(AuthXMLTags.EXCEPTION_END);  String errorString=errorXMLString.toString();  if (debug.messageEnabled()) {    debug.message("Error Response String : " + errorString);  }  return errorString;}  }
class C{  public void writeModifyChangeRecord(DN dn,List<Modification> modifications) throws IOException {  ifNull(dn,modifications);  if (modifications.isEmpty()) {    return;  }  BufferedWriter writer=exportConfig.getWriter();  int wrapColumn=exportConfig.getWrapColumn();  boolean wrapLines=wrapColumn > 1;  writeDN("dn",dn,writer,wrapLines,wrapColumn);  StringBuilder changeTypeLine=new StringBuilder("changetype: modify");  writeLDIFLine(changeTypeLine,writer,wrapLines,wrapColumn);  Iterator<Modification> iterator=modifications.iterator();  while (iterator.hasNext()) {    Modification m=iterator.next();    Attribute a=m.getAttribute();    String name=a.getAttributeDescription().toString();    StringBuilder modTypeLine=new StringBuilder();    modTypeLine.append(m.getModificationType());    modTypeLine.append(": ");    modTypeLine.append(name);    writeLDIFLine(modTypeLine,writer,wrapLines,wrapColumn);    for (    ByteString v : a) {      writeAttribute(name,v,writer,wrapLines,wrapColumn);    }    if (iterator.hasNext()) {      writer.write("-");    }    writer.newLine();  }}  }
class C{  public int removeAttribute(String name){  failIfDeleted();  ArrayList attributes=getAttributes();  int count=0;  if (attributes != null && attributes.size() > 0) {    Iterator it=attributes.iterator();    while (it.hasNext()) {      XMLElementAttribute attr=(XMLElementAttribute)it.next();      if (attr.getName().equals(name)) {        it.remove();        count++;      }    }  }  if (count > 0) {    setAttributes(attributes);    updateAttributeStrings();  }  return count;}  }
class C{  public static boolean isNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;}  }
class C{  public PowerTile(Mario mario,int stageZone,float xPos,float yPos,float xVel,float yVel,Group parent,Image... sprites){  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,sprites);  this.parent=parent;  this.mario=mario;  pHeight=(int)((18.0 * REL_HEIGHT) + 0.5);  power=new Fries(stageZone,xPos,yPos,xVel,yVel,pHeight);  zone=stageZone;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS01.class,args);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null || getClass() != obj.getClass())   return false;  DateFormatSymbols that=(DateFormatSymbols)obj;  return (Arrays.equals(eras,that.eras) && Arrays.equals(months,that.months) && Arrays.equals(shortMonths,that.shortMonths)&& Arrays.equals(weekdays,that.weekdays)&& Arrays.equals(shortWeekdays,that.shortWeekdays)&& Arrays.equals(ampms,that.ampms)&& Arrays.deepEquals(getZoneStringsWrapper(),that.getZoneStringsWrapper())&& ((localPatternChars != null && localPatternChars.equals(that.localPatternChars)) || (localPatternChars == null && that.localPatternChars == null)));}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }  if (oldValue < 0 || newValue < 0 || itemsLayout == null)   return;  View oldView=itemsLayout.getChildAt(oldValue - firstItem);  View newView=itemsLayout.getChildAt(newValue - firstItem);  refreshTextStatus(oldView,oldValue);  refreshTextStatus(newView,newValue);}  }
class C{  public void translate_by(PlaVectorInt p_vector){  if (p_vector == null)   return;  if (location != null) {    location=location.translate_by(p_vector);  }}  }
class C{  public StatusCode createStatusCode(Element elem) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_CODE,elem);  if (object == null) {    return new StatusCodeImpl(elem);  } else {    return (StatusCode)object;  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();  if (Constants.ELEMNAME_WITHPARAM == type) {    setParamElem((ElemWithParam)newChild);  }  return super.appendChild(newChild);}  }
class C{  public Evidence(Set evidenceContent) throws SAMLException {  super(evidenceContent);}  }
class C{  public static ByteOrder nativeOrder(){  return Bits.byteOrder();}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  return encodeProduct(retval);}  }
class C{  public boolean before(Timestamp ts){  return compareTo(ts) < 0;}  }
class C{  public String buildOs(){  return properties.getProperty("build.os");}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int n=s.readInt();  attrs=(n >= 1) ? new Hashtable<String,Attribute>(n * 2) : new Hashtable<String,Attribute>(2);  while (--n >= 0) {    put((Attribute)s.readObject());  }}  }
class C{  public Builder removeAllNames(){  this.names.clear();  return this;}  }
class C{  public Rectangle(float width,float height){  this(0,0,width,height);}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public MemoryUserDatabaseMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  public PasswordPolicyRequestControl(){  this(false);}  }
class C{  public static String reverse(String encoding){  return s_revhash.get(encoding.toUpperCase(Locale.ENGLISH));}  }
class C{  private Set<TaskEntry> createRandomTasksList(){  Set<TaskEntry> list=new HashSet<>();  Random r=new Random();  int numberTasks=r.nextInt(10);  for (int i=0; i < numberTasks; i++) {    Entry csr=new LinkedHashMapEntry("cn=mytask" + i + ",cn=tasks");    String p="ds-task-";    String[] attrNames={p + "id",p + "class-name",p + "state",p + "scheduled-start-time",p + "actual-start-time",p + "completion-time",p + "dependency-id",p + "failed-dependency-action",p + "log-message",p + "notify-on-error",p + "notify-on-completion",p + "ds-recurring-task-schedule"};    String[] values={"ID","TheClassName","TheState","Schedule Start Time","Actual Start Time","Completion Time","Dependency ID","Failed Dependency Action","Log LocalizableMessage.                              Should be pretty long" + "Log LocalizableMessage.                              Should be pretty long" + "Log LocalizableMessage.                              Should be pretty long"+ "Log LocalizableMessage.                              Should be pretty long"+ "Log LocalizableMessage.                              Should be pretty long","Notify On Error","Notify On Completion","Recurring Task Schedule"};    for (int j=0; j < attrNames.length; j++) {      final LinkedAttribute attr=new LinkedAttribute(attrNames[j]);      attr.add(values[j] + r.nextInt());      csr.removeAttribute(attr.getAttributeDescription());      csr.addAttribute(attr);    }    try {      list.add(new TaskEntry(Converters.to(csr)));    } catch (    Throwable t) {      logger.error(LocalizableMessage.raw("Error getting entry '" + csr.getName() + "': "+ t,t));    }  }  return list;}  }
class C{  protected void digestWarFile(String hashAlg,Properties digestResult,JarFile wfile,boolean intoJar){  Enumeration wEnum=wfile.entries();  byte[] digestCode=null;  String wename=null;  InputStream in=null;  try {    while (wEnum.hasMoreElements()) {      JarEntry we=(JarEntry)wEnum.nextElement();      if (!we.isDirectory()) {        wename=we.getName();        if (wename.endsWith(JAR_FILE_EXT) && (intoJar)) {          in=wfile.getInputStream(we);          digestCode=digestJarFile(hashAlg,in);          in.close();        } else {          in=wfile.getInputStream(we);          digestCode=Utils.getHash(hashAlg,in);          in.close();        }        appendResult(digestResult,wename,digestCode);      }    }  } catch (  IOException ex) {    ex.printStackTrace();  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException ignored) {      }      in=null;    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  String namespaceURI=null;  String qualifiedName="test";  String name;  String nodeName;  String nodeValue;  doc=(Document)load("staffNS",false);  attribute=doc.createAttributeNS(namespaceURI,qualifiedName);  nodeName=attribute.getNodeName();  nodeValue=attribute.getNodeValue();  assertEquals("documentcreateattributeNS01","test",nodeName);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  return view.modelToView(pos,a,b);}  }
class C{  public Scanner(ReadableByteChannel source,String charsetName){  this(makeReadable(Objects.requireNonNull(source,"source"),toDecoder(charsetName)),WHITESPACE_PATTERN);}  }
class C{  public RSeqHeader createRSeqHeader(long sequenceNumber) throws InvalidArgumentException {  if (sequenceNumber < 0)   throw new InvalidArgumentException("invalid sequenceNumber arg " + sequenceNumber);  RSeq rseq=new RSeq();  rseq.setSeqNumber(sequenceNumber);  return rseq;}  }
class C{  public void execute(Context context,Map<String,Object> schedulerContext) throws ExecutionException {  try {    JsonValue params=new JsonValue(schedulerContext).get(CONFIGURED_INVOKE_CONTEXT);    if (params.get("action").as(enumConstant(SystemAction.class)).isLiveSync()) {      String source=params.get("source").required().asString();      liveSync(context,source,true);    }  } catch (  JsonValueException jve) {    throw new ExecutionException(jve);  }catch (  ResourceException e) {    throw new ExecutionException(e);  }catch (  IllegalArgumentException e) {  }catch (  RuntimeException e) {    throw new ExecutionException(e);  }}  }
class C{  public PromptingTrustManager(final ConsoleApplication app,final X509TrustManager sourceTrustManager) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException {  this(app,DEFAULT_PATH,sourceTrustManager);}  }
class C{  public TableView(Element elem){  super(elem,View.Y_AXIS);  rows=new Vector<RowView>();  gridValid=false;  captionIndex=-1;  totalColumnRequirements=new SizeRequirements();}  }
class C{  public ParentDNTag(){}  }
class C{  public static final ParsedQuery createTestParsedQuery(){  Query query=createTestQuery();  WhereClause whereClause=new WhereClause(query.getWhere());  return new ParsedQuery(query,whereClause,createTestIndexOneField());}  }
class C{  public Ansi(final Attribute attr,final Color foreground,final Color background){  init(attr,AnsiColor.forStandardColor(foreground),AnsiColor.forStandardColor(background));}  }
class C{  public static void waitForBridgeAndUIIdle(ReactBridgeIdleSignaler idleSignaler,final ReactContext reactContext,long timeoutMs){  UiThreadUtil.assertNotOnUiThread();  long startTime=SystemClock.uptimeMillis();  waitInner(idleSignaler,timeoutMs);  long timeToWait=Math.max(1,timeoutMs - (SystemClock.uptimeMillis() - startTime));  waitForChoreographer(timeToWait);  waitForJSIdle(reactContext);  timeToWait=Math.max(1,timeoutMs - (SystemClock.uptimeMillis() - startTime));  waitInner(idleSignaler,timeToWait);  timeToWait=Math.max(1,timeoutMs - (SystemClock.uptimeMillis() - startTime));  waitForChoreographer(timeToWait);}  }
class C{  private <T>void registerModification(PropertyDefinition<T> pd,SortedSet<T> newValues,SortedSet<T> previousValues){  if (isLastChoiceReset) {    registerResetModification(pd,previousValues);  } else   if (!newValues.equals(previousValues)) {    if (newValues.containsAll(previousValues)) {      if (newValues.size() <= 1) {        registerSetModification(pd,newValues,previousValues);      } else {        registerAddModification(pd,newValues,previousValues);      }    } else     if (previousValues.containsAll(newValues)) {      registerRemoveModification(pd,newValues,previousValues);    } else     if (newValues.size() <= 1) {      registerSetModification(pd,newValues,previousValues);    } else {      SortedSet<T> removedValues=new TreeSet<>(previousValues);      removedValues.removeAll(newValues);      PropertyEditorModification<T> removeMod=PropertyEditorModification.createRemoveModification(pd,removedValues,previousValues);      addModification(removeMod);      SortedSet<T> retainedValues=new TreeSet<>(previousValues);      retainedValues.retainAll(newValues);      SortedSet<T> addedValues=new TreeSet<>(newValues);      addedValues.removeAll(retainedValues);      PropertyEditorModification<T> addMod=PropertyEditorModification.createAddModification(pd,addedValues,retainedValues);      addModification(addMod);    }  }}  }
class C{  private void beforeValue() throws JSONException {  if (stack.isEmpty()) {    return;  }  Scope context=peek();  if (context == Scope.EMPTY_ARRAY) {    replaceTop(Scope.NONEMPTY_ARRAY);    newline();  } else   if (context == Scope.NONEMPTY_ARRAY) {    out.append(',');    newline();  } else   if (context == Scope.DANGLING_KEY) {    out.append(indent == null ? ":" : ": ");    replaceTop(Scope.NONEMPTY_OBJECT);  } else   if (context != Scope.NULL) {    throw new JSONException("Nesting problem");  }}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public static Foo fetchByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_Last(uuid,orderByComparator);}  }
class C{  public static FileChannel newFileChannel(Object stream,FileDescriptor fd,int mode){  return new FileChannelImpl(stream,fd,mode);}  }
class C{  public PolicyEvaluator(String orgName,String serviceTypeName,String applicationName) throws PolicyException, SSOException {  this(orgName,serviceTypeName);  this.applicationName=applicationName;  registerListener();}  }
class C{  @Override public boolean modified(){  return classLoader != null ? classLoader.modified() : false;}  }
class C{  protected void layoutMinorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  baselineLayout(targetSpan,axis,offsets,spans);}  }
class C{  public final void test_chooseEngineServerAlias(){  X509ExtendedKeyManager km=new MyX509ExtendedKeyManager();  if (km.chooseEngineServerAlias(null,null,null) != null) {    fail("non null result");  }}  }
class C{  private void processElement(Element element) throws XACMLException {  if (element == null) {    XACMLSDKUtils.debug.error("ResponseImpl.processElement(): invalid root element");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("invalid_element"));  }  String elemName=element.getLocalName();  if (elemName == null) {    XACMLSDKUtils.debug.error("ResponseImpl.processElement(): local name missing");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("missing_local_name"));  }  if (!elemName.equals(XACMLConstants.RESPONSE)) {    XACMLSDKUtils.debug.error("ResponseImpl.processElement(): invalid local name " + elemName);    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("invalid_local_name"));  }  NodeList nodes=element.getChildNodes();  int numOfNodes=nodes.getLength();  int nextElem=0;  while (nextElem < numOfNodes) {    Node child=(Node)nodes.item(nextElem);    if (child.getNodeType() == Node.ELEMENT_NODE) {      String childName=child.getLocalName();      if (childName != null) {        if (childName.equals(XACMLConstants.RESULT)) {          results.add(ContextFactory.getInstance().createResult((Element)child));        } else {          XACMLSDKUtils.debug.error("ResponseImpl.processElement(): " + " invalid child element: " + elemName);          throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("invalid_child_name"));        }      }    }    nextElem++;  }}  }
class C{  public SubjectKeyIdentifier(SubjectPublicKeyInfo spki){  this.keyidentifier=getDigest(spki);}  }
class C{  public String toString(){  return principal;}  }
class C{  private Request parseRequestElement(Element elem){  Request req=new Request();  String temp=elem.getAttribute("dtdid");  if (temp != null) {    req.setDtdID(temp);  }  temp=elem.getAttribute("sid");  if (temp != null) {    req.setSessionID(temp);  }  Node text=elem.getFirstChild();  if (text != null) {    req.setContent(text.getNodeValue());  }  return req;}  }
class C{  public void logout() throws AuthLoginException {  debug.message("in logout:");  try {    if (null != loginContext) {      loginContext.logout();    }    authContext.getLoginState().logLogout();    auditor.auditLogout(getSSOToken());    authContext.getLoginState().postProcess(indexType,indexName,LoginState.PostProcessEvent.LOGOUT);    destroySession();    loginStatus.setStatus(LoginStatus.AUTH_COMPLETED);  } catch (  AuthLoginException le) {    debug.message("Error during logout : ");    if (debug.messageEnabled()) {      debug.message("Exception ",le);    }    throw new AuthLoginException(BUNDLE_NAME,"failedLogout",null,le);  }catch (  Exception e) {    debug.message("Error during logout : ");    if (debug.messageEnabled()) {      debug.message("Exception ",e);    }  }}  }
class C{  private void parseSecurityElement(Element securityE) throws SOAPBindingException {  if (securityE == null) {    securityProfileType=ANONYMOUS;    return;  }  String wsseNS=securityE.getNamespaceURI();  if (wsseNS == null) {    securityProfileType=ANONYMOUS;    return;  }  String wsuNS=null;  if (wsseNS.equals(WSSEConstants.NS_WSSE_WSF11)) {    wsfVersion=SOAPBindingConstants.WSF_11_VERSION;    wsuNS=WSSEConstants.NS_WSU_WSF11;  } else   if (wsseNS.equals(WSSEConstants.NS_WSSE)) {    wsfVersion=SOAPBindingConstants.WSF_10_VERSION;    wsuNS=WSSEConstants.NS_WSU;  } else {    securityProfileType=ANONYMOUS;    return;  }  NodeList nl=securityE.getElementsByTagNameNS(wsseNS,SAMLConstants.TAG_SECURITYTOKENREFERENCE);  Element securityTokenRefE=null;  String uri=null;  if (nl != null && nl.getLength() > 0) {    securityTokenRefE=(Element)nl.item(0);    List list=XMLUtils.getElementsByTagNameNS1(securityTokenRefE,wsseNS,SAMLConstants.TAG_REFERENCE);    if (!list.isEmpty()) {      Element referenceE=(Element)list.get(0);      uri=XMLUtils.getNodeAttributeValue(referenceE,SAMLConstants.TAG_URI);      if (uri != null && uri.length() > 1 && uri.startsWith("#")) {        uri=uri.substring(1);      } else {        String msg=Utils.bundle.getString("invalidReferenceURI");        Utils.debug.error("Message.parseSecurityElement: " + msg);        throw new SOAPBindingException(msg);      }      if (Utils.debug.messageEnabled()) {        Utils.debug.message("Message.parseSecurityElement: " + "SecurityTokenReference Reference URI = " + uri);      }    }  }  securityProfileType=ANONYMOUS;  securityHeaders=new ArrayList();  nl=securityE.getChildNodes();  int length=nl.getLength();  for (int i=0; i < length; i++) {    Node child=nl.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      String localName=child.getLocalName();      String ns=child.getNamespaceURI();      if (securityProfileType != ANONYMOUS) {        securityHeaders.add(child);        continue;      }      if (SAMLConstants.BINARYSECURITYTOKEN.equals(localName) && wsseNS.equals(ns)) {        Element binarySecurityTokenE=(Element)child;        String valuetype=XMLUtils.getNodeAttributeValue(binarySecurityTokenE,"ValueType");        Utils.debug.message("ValueType: " + valuetype);        if ((valuetype != null) && valuetype.endsWith("ServiceSessionContext")) {          securityHeaders.add(child);          continue;        }        if (uri != null) {          String id=XMLUtils.getNodeAttributeValueNS(binarySecurityTokenE,wsuNS,SAMLConstants.TAG_ID);          if (!uri.equals(id)) {            securityHeaders.add(child);            continue;          }        }        try {          binarySecurityToken=new BinarySecurityToken(binarySecurityTokenE);          messageCertificate=(X509Certificate)SecurityUtils.getCertificate(binarySecurityToken);        } catch (        Exception ex) {          String msg=Utils.bundle.getString("cannotProcessBinarySecurityToken");          Utils.debug.error("Message.parseSecurityElement: " + msg);          throw new SOAPBindingException(msg);        }        if (Utils.debug.messageEnabled()) {          Utils.debug.message("Message.parseSecurityElement:" + " found binary security token");        }        securityProfileType=X509_TOKEN;      } else       if (SAMLConstants.TAG_ASSERTION.equals(localName) && SAMLConstants.assertionSAMLNameSpaceURI.equals(ns)) {        Element assertionE=(Element)child;        if (uri != null) {          String assertionID=XMLUtils.getNodeAttributeValue(assertionE,SAMLConstants.TAG_ASSERTION_ID);          if (!uri.equals(assertionID)) {            securityHeaders.add(child);            continue;          }        }        try {          assertion=new SecurityAssertion(assertionE);        } catch (        SAMLException ex) {          String msg=Utils.bundle.getString("cannotProcessSAMLAssertion");          Utils.debug.error("Message.parseSecurityElement: " + msg);          throw new SOAPBindingException(msg);        }        if (Utils.debug.messageEnabled()) {          Utils.debug.message("Message.parseSecurityElement:" + " found security assertion, " + "isBearer = "+ assertion.isBearer());        }        if (assertion.isBearer()) {          securityProfileType=BEARER_TOKEN;        } else {          securityProfileType=SAML_TOKEN;          messageCertificate=(X509Certificate)SecurityUtils.getCertificate(assertion);        }      } else {        securityHeaders.add(child);      }    }  }  if (securityHeaders.isEmpty()) {    securityHeaders=null;  }}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer(200);  result.append("<<\n");  result.append(" mode: ");  result.append(mode);  result.append("\n ecLevel: ");  result.append(ecLevel);  result.append("\n version: ");  result.append(version);  result.append("\n matrixWidth: ");  result.append(matrixWidth);  result.append("\n maskPattern: ");  result.append(maskPattern);  result.append("\n numTotalBytes: ");  result.append(numTotalBytes);  result.append("\n numDataBytes: ");  result.append(numDataBytes);  result.append("\n numECBytes: ");  result.append(numECBytes);  result.append("\n numRSBlocks: ");  result.append(numRSBlocks);  if (matrix == null) {    result.append("\n matrix: null\n");  } else {    result.append("\n matrix:\n");    result.append(matrix.toString());  }  result.append(">>\n");  return result.toString();}  }
class C{  public Assertion createAssertion(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION);  if (obj == null) {    return new AssertionImpl();  } else {    return (Assertion)obj;  }}  }
class C{  boolean verifyDeveloperPayload(Purchase p){  String payload=p.getDeveloperPayload();  return true;}  }
class C{  protected AbstractPooledConnAdapter(ClientConnectionManager manager,AbstractPoolEntry entry){  super(manager,entry.connection);  this.poolEntry=entry;}  }
class C{  public void makeVisible(TreePath path){  if (path != null) {    TreePath parentPath=path.getParentPath();    if (parentPath != null) {      expandPath(parentPath);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  int nodeType;  java.util.List result=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  expected.add("em");  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  for (int indexN10073=0; indexN10073 < employeeList.getLength(); indexN10073++) {    child=(Node)employeeList.item(indexN10073);    nodeType=(int)child.getNodeType();    childName=child.getNodeName();    if (equals(1,nodeType)) {      result.add(childName);    } else {      assertEquals("textNodeType",3,nodeType);      assertEquals("textNodeName","#text",childName);    }  }  assertEqualsAutoCase("element","nodeNames",expected,result);}  }
class C{  public int _hash(int maximum){  return hashCode();}  }
class C{  private int constrainY(JTextComponent target,int y,int vis){  if (y < 0) {    y=0;  } else   if (y + vis > target.getHeight()) {    y=Math.max(0,target.getHeight() - vis);  }  return y;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementchangeattributevalue.class,args);}  }
class C{  public void init(Tailer tailer){}  }
class C{  protected void installComponents(){  arrowButton=createArrowButton();  if (arrowButton != null) {    comboBox.add(arrowButton);    configureArrowButton();  }  if (comboBox.isEditable()) {    addEditor();  }  comboBox.add(currentValuePane);}  }
class C{  public final Key doPhase(Key key,boolean lastPhase) throws InvalidKeyException, IllegalStateException {  return spiImpl.engineDoPhase(key,lastPhase);}  }
class C{  public static byte[] decode(char[] in){  return decode(in,0,in.length);}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public final void pushPredicateRoot(int n){  m_predicateRoots.push(n);}  }
class C{  void registerConnection(final Connection<?> connection,final GrizzlyLDAPConnection ldapConnection){  LDAP_CONNECTION_ATTR.set(connection,ldapConnection);}  }
class C{  RootContainer(String backendID,ServerContext serverContext,Storage storage,PluggableBackendCfg config){  this.backendId=backendID;  this.serverContext=serverContext;  this.storage=storage;  this.config=config;  getMonitorProvider().enableFilterUseStats(config.isIndexFilterAnalyzerEnabled());  getMonitorProvider().setMaxEntries(config.getIndexFilterAnalyzerMaxFilters());  config.addPluggableChangeListener(this);}  }
class C{  void updateMonitoringPeriod(long period){  if (period == 0) {    stopMonitoringPublisher();    return;  }  final MonitoringPublisher mpThread=monitoringPublisher.get();  if (mpThread != null) {    mpThread.setPeriod(period);  } else   if (!connectedDSs.isEmpty() || !connectedRSs.isEmpty()) {    startMonitoringPublisher();  }}  }
class C{  public static MessageDigest hashing(MessageDigest md,InputStream in){  try {    DigestInputStream din=new DigestInputStream(in,md);synchronized (buf) {      while (din.read(buf) != -1)       ;    }  } catch (  IOException ex) {    ex.printStackTrace();  }  return md;}  }
class C{  private String toPattern(boolean localized){  StringBuffer result=new StringBuffer();  for (int j=1; j >= 0; --j) {    if (j == 1)     appendAffix(result,posPrefixPattern,positivePrefix,localized); else     appendAffix(result,negPrefixPattern,negativePrefix,localized);    int i;    int digitCount=useExponentialNotation ? getMaximumIntegerDigits() : Math.max(groupingSize,getMinimumIntegerDigits()) + 1;    for (i=digitCount; i > 0; --i) {      if (i != digitCount && isGroupingUsed() && groupingSize != 0 && i % groupingSize == 0) {        result.append(localized ? symbols.getGroupingSeparator() : PATTERN_GROUPING_SEPARATOR);      }      result.append(i <= getMinimumIntegerDigits() ? (localized ? symbols.getZeroDigit() : PATTERN_ZERO_DIGIT) : (localized ? symbols.getDigit() : PATTERN_DIGIT));    }    if (getMaximumFractionDigits() > 0 || decimalSeparatorAlwaysShown)     result.append(localized ? symbols.getDecimalSeparator() : PATTERN_DECIMAL_SEPARATOR);    for (i=0; i < getMaximumFractionDigits(); ++i) {      if (i < getMinimumFractionDigits()) {        result.append(localized ? symbols.getZeroDigit() : PATTERN_ZERO_DIGIT);      } else {        result.append(localized ? symbols.getDigit() : PATTERN_DIGIT);      }    }    if (useExponentialNotation) {      result.append(localized ? symbols.getExponentSeparator() : PATTERN_EXPONENT);      for (i=0; i < minExponentDigits; ++i)       result.append(localized ? symbols.getZeroDigit() : PATTERN_ZERO_DIGIT);    }    if (j == 1) {      appendAffix(result,posSuffixPattern,positiveSuffix,localized);      if ((negSuffixPattern == posSuffixPattern && negativeSuffix.equals(positiveSuffix)) || (negSuffixPattern != null && negSuffixPattern.equals(posSuffixPattern))) {        if ((negPrefixPattern != null && posPrefixPattern != null && negPrefixPattern.equals("'-" + posPrefixPattern)) || (negPrefixPattern == posPrefixPattern && negativePrefix.equals(symbols.getMinusSign() + positivePrefix)))         break;      }      result.append(localized ? symbols.getPatternSeparator() : PATTERN_SEPARATOR);    } else     appendAffix(result,negSuffixPattern,negativeSuffix,localized);  }  return result.toString();}  }
class C{  public void addServerIdToDomain(int serverId,DN baseDN){  Set<Integer> serverIds=domainToServerIds.get(baseDN);  if (serverIds == null) {    serverIds=new HashSet<>();    final Set<Integer> existingServerIds=domainToServerIds.putIfAbsent(baseDN,serverIds);    if (existingServerIds != null) {      serverIds=existingServerIds;    }  }  serverIds.add(serverId);}  }
class C{  @Modified void modified(ComponentContext compContext) throws Exception {  logger.debug("Reconfiguring the JDBC Repository Service with configuration {}",compContext.getProperties());  try {    JsonValue newConfig=enhancedConfig.getConfigurationAsJson(compContext);    if (hasConfigChanged(config,newConfig)) {      DataSourceService oldDataSourceService=configuredDataSourceService.getAndSet(initDataSourceService(newConfig,compContext.getBundleContext()));      oldDataSourceService.shutdown();      logger.info("Reconfigured the JDBC Repository Service {}",compContext.getProperties());    }  } catch (  Exception ex) {    logger.warn("Configuration invalid, can not reconfigure the JDBC Repository Service.",ex);    throw ex;  }}  }
class C{  public SolidLine(){}  }
class C{  public boolean enableMixins(){  return false;}  }
class C{  public void testProxyAuthConnectionFailed() throws Throwable {  setUpStoreProperties();  ServerSocket ss=new ServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://requested.host:55555/requested.data");  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",ss.getLocalPort())));  connection.setSSLSocketFactory(getContext().getSocketFactory());  try {    doInteraction(connection,ss,AUTHENTICATION_REQUIRED_CODE,true);  } catch (  IOException e) {    if (DO_LOG) {      System.out.println("Got expected IOException: " + e.getMessage());    }  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_NEWS\"";  db.execSQL(sql);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(entitygetentityname.class,args);}  }
class C{  public static float[] cmykFromRgb(int rgbColor){  int red=(0xff0000 & rgbColor) >> 16;  int green=(0xff00 & rgbColor) >> 8;  int blue=(0xff & rgbColor);  float black=Math.min(1.0f - red / 255.0f,Math.min(1.0f - green / 255.0f,1.0f - blue / 255.0f));  float cyan=1.0f;  float magenta=1.0f;  float yellow=1.0f;  if (black != 1.0f) {    cyan=(1.0f - (red / 255.0f) - black) / (1.0f - black);    magenta=(1.0f - (green / 255.0f) - black) / (1.0f - black);    yellow=(1.0f - (blue / 255.0f) - black) / (1.0f - black);  }  return new float[]{cyan,magenta,yellow,black};}  }
class C{  public void testPosPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-128,9,56,100,-2,-3,-3,-3,95,15,-9,39,58,-69,87,87,-17,-73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public ASN1InputStream(InputStream input,boolean lazyEvaluate){  this(input,StreamUtil.findLimit(input),lazyEvaluate);}  }
class C{  public short readShort() throws SQLException {  Short attrib=(Short)getNextAttribute();  return (attrib == null) ? 0 : attrib.shortValue();}  }
class C{  public void evaluatePostAction(LazyObjectAccessor source,LazyObjectAccessor target,ReconAction action,boolean sourceAction,String linkQualifier,String reconId,Context context) throws SynchronizationException {  if (postAction != null) {    Map<String,Object> scope=new HashMap<String,Object>();    scope.put("linkQualifier",linkQualifier);    scope.put("sourceAction",sourceAction);    scope.put("action",action.name());    scope.put("situation",situation.name());    scope.put("reconId",reconId);    if (source != null) {      scope.put("source",source.asMap());    }    if (target != null) {      scope.put("target",target.asMap());    }    try {      postAction.exec(scope,context);    } catch (    ScriptException se) {      LOGGER.debug("action script encountered exception",se);      throw new SynchronizationException(se);    }  }}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  processRequest(request,response);}  }
class C{  public void dispatchToEvents(int nodeHandle,org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  DTMTreeWalker treeWalker=m_walker;  ContentHandler prevCH=treeWalker.getcontentHandler();  if (null != prevCH) {    treeWalker=new DTMTreeWalker();  }  treeWalker.setcontentHandler(ch);  treeWalker.setDTM(this);  try {    treeWalker.traverse(nodeHandle);  }  finally {    treeWalker.setcontentHandler(null);  }}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  protected void disconnectEvent(PooledConnection con,boolean finalizing){  JdbcInterceptor handler=con.getHandler();  while (handler != null) {    handler.disconnected(this,con,finalizing);    handler=handler.getNext();  }}  }
class C{  private boolean isCauseIndexException(Throwable ex,int maxLevels){  return isCauseException(ex,OIndexException.class,maxLevels);}  }
class C{  public String toString(){  return super.toString() + " limit: " + limit+ " indexOfNextAdd: "+ indexOfNextAdd;}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public PageFormat(){  mPaper=new Paper();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  boolean recursive=isOptionSet(IArgument.RECURSIVE);  String strRecursive=(recursive) ? "recursive" : "non recursive";  String[] params={realm,strRecursive};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_REALM",params);  try {    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    ocm.deleteSubOrganization(null,recursive);    getOutputWriter().printlnMessage(getResourceString("delete-realm-succeed"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_DELETE_REALM",params);  } catch (  SMSException e) {    String[] args={realm,strRecursive,e.getMessage()};    debugError("DeleteRealm.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public ValidationEventImpl(int _severity,String _message,ValidationEventLocator _locator){  this(_severity,_message,_locator,null);}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public void updateUserAttribute(SSOToken token,Set members,String staticGroupDN,boolean toAdd) throws AMException {  if (debug.messageEnabled()) {    debug.message("DirectoryServicesImpl.updateUserAttribute(): " + "groupDN:" + staticGroupDN + ", toAdd: "+ toAdd+ " members: "+ members);  }  Attr attr=new Attr(STATIC_GROUP_DN_ATTRIBUTE,staticGroupDN);  Iterator itr=members.iterator();  while (itr.hasNext()) {    String userDN=(String)itr.next();    try {      PersistentObject po=UMSObject.getObjectHandle(token,new Guid(userDN));      if (toAdd) {        po.modify(attr,ModificationType.ADD);      } else {        po.modify(attr,ModificationType.DELETE);      }      po.save();    } catch (    UMSException e) {      debug.error("DirectoryServicesImpl.updateUserAttribute(): " + "Failed while trying to set the static groupDN " + staticGroupDN + " for user: "+ userDN,e);      throw new AMException(token,"351",e);    }  }}  }
class C{  public void decode(int[] received,int twoS) throws ReedSolomonException {  GenericGFPoly poly=new GenericGFPoly(field,received);  int[] syndromeCoefficients=new int[twoS];  boolean noError=true;  for (int i=0; i < twoS; i++) {    int eval=poly.evaluateAt(field.exp(i + field.getGeneratorBase()));    syndromeCoefficients[syndromeCoefficients.length - 1 - i]=eval;    if (eval != 0) {      noError=false;    }  }  if (noError) {    return;  }  GenericGFPoly syndrome=new GenericGFPoly(field,syndromeCoefficients);  GenericGFPoly[] sigmaOmega=runEuclideanAlgorithm(field.buildMonomial(twoS,1),syndrome,twoS);  GenericGFPoly sigma=sigmaOmega[0];  GenericGFPoly omega=sigmaOmega[1];  int[] errorLocations=findErrorLocations(sigma);  int[] errorMagnitudes=findErrorMagnitudes(omega,errorLocations);  for (int i=0; i < errorLocations.length; i++) {    int position=received.length - 1 - field.log(errorLocations[i]);    if (position < 0) {      throw new ReedSolomonException("Bad error location");    }    received[position]=GenericGF.addOrSubtract(received[position],errorMagnitudes[i]);  }}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("arc iterator out of bounds");  }  double angle=angStRad;  if (index == 0) {    coords[0]=x + Math.cos(angle) * w;    coords[1]=y + Math.sin(angle) * h;    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_MOVETO;  }  if (index > arcSegs) {    if (index == arcSegs + lineSegs) {      return SEG_CLOSE;    }    coords[0]=x;    coords[1]=y;    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_LINETO;  }  angle+=increment * (index - 1);  double relx=Math.cos(angle);  double rely=Math.sin(angle);  coords[0]=x + (relx - cv * rely) * w;  coords[1]=y + (rely + cv * relx) * h;  angle+=increment;  relx=Math.cos(angle);  rely=Math.sin(angle);  coords[2]=x + (relx + cv * rely) * w;  coords[3]=y + (rely - cv * relx) * h;  coords[4]=x + relx * w;  coords[5]=y + rely * h;  if (affine != null) {    affine.transform(coords,0,coords,0,3);  }  return SEG_CUBICTO;}  }
class C{  public PropertyPermissionCollection(){  perms=new HashMap<>(32);  all_allowed=false;}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_String() throws IOException {  RandomAccessFile raf=null;  File tmpFile=new File(fileName);  try {    raf=new java.io.RandomAccessFile(fileName,"r");    fail("Test 1: FileNotFoundException expected.");  } catch (  FileNotFoundException e) {  }catch (  IllegalArgumentException e) {    fail("Test 2: Unexpected IllegalArgumentException: " + e.getMessage());  }  try {    try {      raf=new java.io.RandomAccessFile(fileName,"rwd");    } catch (    IllegalArgumentException e) {      fail("Test 3: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(fileName,"rws");    } catch (    IllegalArgumentException e) {      fail("Test 4: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(fileName,"rw");    } catch (    IllegalArgumentException e) {      fail("Test 5: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(fileName,"i");      fail("Test 6: IllegalArgumentException expected.");    } catch (    IllegalArgumentException e) {    }    raf=new java.io.RandomAccessFile(fileName,"r");    FileChannel fcr=raf.getChannel();    try {      fcr.lock(0L,Long.MAX_VALUE,false);      fail("Test 7: NonWritableChannelException expected.");    } catch (    NonWritableChannelException e) {    }  }  finally {    if (raf != null)     raf.close();    if (tmpFile.exists())     tmpFile.delete();  }}  }
class C{  public boolean hasAttributes(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  @Override public StringBuffer format(double number,StringBuffer result,FieldPosition fieldPosition){  boolean tryFastPath=false;  if (fieldPosition == DontCareFieldPosition.INSTANCE)   tryFastPath=true; else {    fieldPosition.setBeginIndex(0);    fieldPosition.setEndIndex(0);  }  if (tryFastPath) {    String tempResult=fastFormat(number);    if (tempResult != null) {      result.append(tempResult);      return result;    }  }  return format(number,result,fieldPosition.getFieldDelegate());}  }
class C{  public char previous(){  if (pos > begin) {    pos--;    return text.charAt(pos);  } else {    return DONE;  }}  }
class C{  private void computeYAxisStops(float minY,float maxY){  int start=(int)minY;  int end=(int)Math.ceil(maxY);  float range=end - start;  if (range < 0) {    return;  }  int stepsCount=2;  if (range == 0) {    start-=stepsCount;    end+=stepsCount;  }  int interval=range == 0 ? stepsCount : (int)Math.ceil(range / stepsCount);  while (start + interval * stepsCount <= end) {    stepsCount++;    interval=range == 0 ? stepsCount : (int)Math.ceil(range / stepsCount);  }  float value=start;  int n=1;  while (value <= end) {    value+=interval;    n++;  }  yStops.numStops=n;  if (yStops.stops.length < n) {    yStops.stops=new float[n];  }  value=start;  for (int i=0; i < n; i++, value+=interval) {    yStops.stops[i]=value;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.AttributeQueryType createAttributeQueryType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AttributeQueryTypeImpl();}  }
class C{  @AfterClass public void entryCacheTestFini() throws Exception {  super.cache.finalizeEntryCache();}  }
class C{  public boolean nonEmpty(){  return tail != null;}  }
class C{  public Polyline spring_over_obstacles(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_cl_type,Set<BrdAbitPin> p_contact_pins){  final int c_max_spring_over_recursion_depth=20;  Polyline counter_clock_wise_result=spring_over(p_polyline,p_half_width,p_layer,p_net_no_arr,p_cl_type,true,c_max_spring_over_recursion_depth,p_contact_pins);  if (counter_clock_wise_result == p_polyline)   return p_polyline;  Polyline clock_wise_result=spring_over(p_polyline.reverse(),p_half_width,p_layer,p_net_no_arr,p_cl_type,true,c_max_spring_over_recursion_depth,p_contact_pins);  if (clock_wise_result != null && counter_clock_wise_result != null) {    if (clock_wise_result.length_approx() <= counter_clock_wise_result.length_approx())     return clock_wise_result.reverse(); else     return counter_clock_wise_result;  } else   if (clock_wise_result != null)   return clock_wise_result.reverse(); else   if (counter_clock_wise_result != null)   return counter_clock_wise_result; else   return null;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private static final byte[] convert(byte[] value,Direction direction,String secret,Authenticator ra) throws IOException {  MessageDigest md5=null;  try {    md5=MessageDigest.getInstance("MD5");  } catch (  final NoSuchAlgorithmException e) {    throw new IOException(e.getMessage());  }  md5.update(secret.getBytes(StandardCharsets.UTF_8));  md5.update(ra.getOctets());  byte[] sum=md5.digest();  final byte[] up=value;  int oglen=(up.length / 16);  if (up.length % 16 != 0) {    oglen=oglen + 1;  }  final byte[] ret=new byte[oglen * 16];  for (int i=0; i < ret.length; i++) {    if ((i % 16) == 0) {      md5.reset();      md5.update(secret.getBytes(StandardCharsets.UTF_8));    }    if (i < up.length) {      ret[i]=(byte)(sum[i % 16] ^ up[i]);    } else {      ret[i]=(byte)(sum[i % 16] ^ 0);    }    if (direction == Direction.ENCRYPT) {      md5.update(ret[i]);    } else {      md5.update(up[i]);    }    if ((i % 16) == 15) {      sum=md5.digest();    }  }  return ret;}  }
class C{  public PdfStream(){  this(null);}  }
class C{  @Override public int doAfterBody() throws JspException {  return SKIP_BODY;}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize,byte[] iv){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length < 2 * (wordSize / 8)) {    throw new IllegalArgumentException("iv.length < 2 * (wordSize / 8)");  }  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;  this.iv=new byte[2 * (wordSize / 8)];  System.arraycopy(iv,0,this.iv,0,2 * (wordSize / 8));}  }
class C{  public String toXMLString() throws XACMLException {  return this.toXMLString(true,true);}  }
class C{  public static void seedAdsTrustStore(ConnectionWrapper connWrapper,Map<String,byte[]> keyEntryMap) throws LdapException {  Connection conn=connWrapper.getConnection();  for (  Map.Entry<String,byte[]> keyEntry : keyEntryMap.entrySet()) {    String instanceKeyId=ADSContext.ServerProperty.INSTANCE_KEY_ID.getAttributeName();    String instancePublicKeyCertificate=ADSContext.ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE.getAttributeName() + ";binary";    String dn=instanceKeyId + "=" + Rdn.escapeValue(keyEntry.getKey())+ ","+ TRUSTSTORE_DN;    AddRequest request=newAddRequest(dn).addAttribute("objectclass","top","ds-cfg-instance-key").addAttribute(instanceKeyId,keyEntry.getKey()).addAttribute(instancePublicKeyCertificate,keyEntry.getValue());    try {      conn.add(request);    } catch (    LdapException e) {      if (e.getResult().getResultCode() != ResultCode.ENTRY_ALREADY_EXISTS) {        throw e;      }      conn.delete(dn);      conn.add(request);    }  }}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  @Deprecated public void write(byte b[],int off,int len){  if (len < 0)   throw new ArrayIndexOutOfBoundsException(len);  for (int i=0; i < len; ++i)   write(b[off + i]);}  }
class C{  private int findHeaderEnd(final byte[] buf,int rlen){  int splitbyte=0;  while (splitbyte + 3 < rlen) {    if (buf[splitbyte] == '\r' && buf[splitbyte + 1] == '\n' && buf[splitbyte + 2] == '\r' && buf[splitbyte + 3] == '\n')     return splitbyte + 4;    splitbyte++;  }  return 0;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node parentNode;  String parentName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  parentNode=employeeNode.getParentNode();  parentName=parentNode.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgTagName","svg",parentName);  } else {    assertEquals("nodeParentNodeAssert1","staff",parentName);  }}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  private void storeECLConfiguration(ReplicationDomainCfg domCfg) throws ConfigException {  ExternalChangelogDomainCfg eclDomCfg=null;  try {    DN configDn=config.dn();    ConfigurationHandler configHandler=DirectoryServer.getConfigurationHandler();    if (configHandler.hasEntry(config.dn())) {      try {        eclDomCfg=domCfg.getExternalChangelogDomain();      } catch (      Exception e) {      }      if (eclDomCfg == null) {        DN eclConfigEntryDN=DN.valueOf("cn=external changelog," + configDn);        if (!configHandler.hasEntry(eclConfigEntryDN)) {          String ldif=makeLdif("dn: cn=external changelog," + configDn,"objectClass: top","objectClass: ds-cfg-external-changelog-domain","cn: external changelog","ds-cfg-enabled: " + !getBackend().isPrivateBackend());          LDIFImportConfig ldifImportConfig=new LDIFImportConfig(new StringReader(ldif));          ldifImportConfig.setValidateSchema(false);          LDIFReader reader=new LDIFReader(ldifImportConfig);          Entry eclEntry=reader.readEntry();          configHandler.addEntry(Converters.from(eclEntry));          ldifImportConfig.close();        }      }    }    eclDomCfg=domCfg.getExternalChangelogDomain();    if (eclDomain != null) {      eclDomain.applyConfigurationChange(eclDomCfg);    } else {      eclDomain=new ExternalChangelogDomain(this,eclDomCfg);    }  } catch (  Exception e) {    throw new ConfigException(NOTE_ERR_UNABLE_TO_ENABLE_ECL.get("Replication Domain on " + getBaseDN(),stackTraceToSingleLineString(e)),e);  }}  }
class C{  public String lookupNamespaceURI(String specifiedPrefix){  short type=this.getNodeType();switch (type) {case Node.ELEMENT_NODE:{      String namespace=this.getNamespaceURI();      String prefix=this.getPrefix();      if (namespace != null) {        if (specifiedPrefix == null && prefix == specifiedPrefix) {          return namespace;        } else         if (prefix != null && prefix.equals(specifiedPrefix)) {          return namespace;        }      }      if (this.hasAttributes()) {        NamedNodeMap map=this.getAttributes();        int length=map.getLength();        for (int i=0; i < length; i++) {          Node attr=map.item(i);          String attrPrefix=attr.getPrefix();          String value=attr.getNodeValue();          namespace=attr.getNamespaceURI();          if (namespace != null && namespace.equals("http://www.w3.org/2000/xmlns/")) {            if (specifiedPrefix == null && attr.getNodeName().equals("xmlns")) {              return value;            } else             if (attrPrefix != null && attrPrefix.equals("xmlns") && attr.getLocalName().equals(specifiedPrefix)) {              return value;            }          }        }      }      return null;    }case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:  return null;case Node.ATTRIBUTE_NODE:{  if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);  }  return null;}default :{return null;}}}  }
class C{  protected boolean handleSignature(boolean consumeFirstByte,boolean throwException) throws IOException {  if (consumeFirstByte) {    ++_inputPtr;  }  if (_inputPtr >= _inputEnd) {    _loadMoreGuaranteed();  }  if (_inputBuffer[_inputPtr] != SmileConstants.HEADER_BYTE_2) {    if (throwException) {      _reportError("Malformed content: signature not valid, starts with 0x3a but followed by 0x" + Integer.toHexString(_inputBuffer[_inputPtr]) + ", not 0x29");    }    return false;  }  if (++_inputPtr >= _inputEnd) {    _loadMoreGuaranteed();  }  if (_inputBuffer[_inputPtr] != SmileConstants.HEADER_BYTE_3) {    if (throwException) {      _reportError("Malformed content: signature not valid, starts with 0x3a, 0x29, but followed by 0x" + Integer.toHexString(_inputBuffer[_inputPtr]) + ", not 0xA");    }    return false;  }  if (++_inputPtr >= _inputEnd) {    _loadMoreGuaranteed();  }  int ch=_inputBuffer[_inputPtr++];  int versionBits=(ch >> 4) & 0x0F;  if (versionBits != SmileConstants.HEADER_VERSION_0) {    _reportError("Header version number bits (0x" + Integer.toHexString(versionBits) + ") indicate unrecognized version; only 0x0 handled by parser");  }  if ((ch & SmileConstants.HEADER_BIT_HAS_SHARED_NAMES) == 0) {    _seenNames=null;    _seenNameCount=-1;  }  if ((ch & SmileConstants.HEADER_BIT_HAS_SHARED_STRING_VALUES) != 0) {    _seenStringValues=NO_STRINGS;    _seenStringValueCount=0;  }  _mayContainRawBinary=((ch & SmileConstants.HEADER_BIT_HAS_RAW_BINARY) != 0);  return true;}  }
class C{  @Override public void close() throws IOException {  PipedInputStream stream=target;  if (stream != null) {    stream.done();    target=null;  }}  }
class C{  public void printlnMessage(String str){  System.out.println(str);}  }
class C{  public void updateIDPAuthenticationContexts(String realm,String entityName,IDFFAuthContexts cxt) throws AMConsoleException {  List list=cxt.toIDPAuthContextInfo();  String[] params={realm,entityName,"IDFF","IDP-updateIDPAuthenticationContexts"};  logEvent("ATTEMPT_MODIFY_ENTITY_DESCRIPTOR",params);  try {    IDFFMetaManager idffMetaMgr=getIDFFMetaManager();    EntityConfigElement entityConfig=idffMetaMgr.getEntityConfig(realm,entityName);    if (entityConfig == null) {      throw new AMConsoleException("invalid.entity.name");    }    IDPDescriptorConfigElement idpDecConfigElement=idffMetaMgr.getIDPDescriptorConfig(realm,entityName);    if (idpDecConfigElement == null) {      throw new AMConsoleException("invalid.config.element");    } else {      updateAttrInConfig(idpDecConfigElement,ATTR_IDP_AUTHN_CONTEXT_MAPPING,list);    }    idffMetaMgr.setEntityConfig(realm,entityConfig);    logEvent("SUCCEED_MODIFY_ENTITY_DESCRIPTOR",params);  } catch (  IDFFMetaException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"IDFF","IDP-updateIDPAuthenticationContexts",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }  return;}  }
class C{  public void testEqualsEqual(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=-24;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  assertEquals(aNumber,bNumber);}  }
class C{  boolean importStackContains(String hrefUrl){  return stackContains(m_importStack,hrefUrl);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int p0=getStartOffset();  int p1=getEndOffset();  if ((pos >= p0) && (pos <= p1)) {    Rectangle r=a.getBounds();    if (pos == p1) {      r.x+=r.width;    }    r.width=0;    return r;  }  throw new BadLocationException(pos + " not in range " + p0+ ","+ p1,pos);}  }
class C{  private void alignOnBaseline(GridBagConstraints cons,Rectangle r,int cellY,int cellHeight){  if (cons.ascent >= 0) {    if (cons.baselineResizeBehavior == Component.BaselineResizeBehavior.CONSTANT_DESCENT) {      int maxY=cellY + cellHeight - layoutInfo.maxDescent[cons.tempY + cons.tempHeight - 1] + cons.descent - cons.insets.bottom;      if (!cons.isVerticallyResizable()) {        r.y=maxY - cons.minHeight;        r.height=cons.minHeight;      } else {        r.height=maxY - cellY - cons.insets.top;      }    } else {      int baseline;      int ascent=cons.ascent;      if (layoutInfo.hasConstantDescent(cons.tempY)) {        baseline=cellHeight - layoutInfo.maxDescent[cons.tempY];      } else {        baseline=layoutInfo.maxAscent[cons.tempY];      }      if (cons.baselineResizeBehavior == Component.BaselineResizeBehavior.OTHER) {        boolean fits=false;        ascent=componentAdjusting.getBaseline(r.width,r.height);        if (ascent >= 0) {          ascent+=cons.insets.top;        }        if (ascent >= 0 && ascent <= baseline) {          if (baseline + (r.height - ascent - cons.insets.top) <= cellHeight - cons.insets.bottom) {            fits=true;          } else           if (cons.isVerticallyResizable()) {            int ascent2=componentAdjusting.getBaseline(r.width,cellHeight - cons.insets.bottom - baseline + ascent);            if (ascent2 >= 0) {              ascent2+=cons.insets.top;            }            if (ascent2 >= 0 && ascent2 <= ascent) {              r.height=cellHeight - cons.insets.bottom - baseline + ascent;              ascent=ascent2;              fits=true;            }          }        }        if (!fits) {          ascent=cons.ascent;          r.width=cons.minWidth;          r.height=cons.minHeight;        }      }      r.y=cellY + baseline - ascent + cons.insets.top;      if (cons.isVerticallyResizable()) {switch (cons.baselineResizeBehavior) {case CONSTANT_ASCENT:          r.height=Math.max(cons.minHeight,cellY + cellHeight - r.y - cons.insets.bottom);        break;case CENTER_OFFSET:{        int upper=r.y - cellY - cons.insets.top;        int lower=cellY + cellHeight - r.y - cons.minHeight - cons.insets.bottom;        int delta=Math.min(upper,lower);        delta+=delta;        if (delta > 0 && (cons.minHeight + cons.centerPadding + delta) / 2 + cons.centerOffset != baseline) {          delta--;        }        r.height=cons.minHeight + delta;        r.y=cellY + baseline - (r.height + cons.centerPadding) / 2 - cons.centerOffset;      }    break;case OTHER:  break;default :break;}}}} else {centerVertically(cons,r,cellHeight);}}  }
class C{  @Override public void send(HandshakeIODataStream out){}  }
class C{  public void testReceive_NonBlockNoServerReadonly() throws Exception {  this.channel1.configureBlocking(false);  receiveNoServerReadonly();}  }
class C{  public AsfTagTextField(final AsfFieldKey field,final String value){  super(field);  toWrap.setString(value);}  }
class C{  public static void sort(long[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public Node item(int index){  ElemTemplateElement node=m_firstChild;  for (int i=0; i < index && node != null; i++) {    node=node.m_nextSibling;  }  return node;}  }
class C{  public SwitchFilter addResponseCase(final Expression<Boolean> condition,final Handler handler){  responseCases.add(new Case(condition,handler));  return this;}  }
class C{  public static boolean inequal(final String first,final String second){  return !Objects.equals(first,second);}  }
class C{  public int indexOfTab(String title){  for (int i=0; i < getTabCount(); i++) {    if (getTitleAt(i).equals(title == null ? "" : title)) {      return i;    }  }  return -1;}  }
class C{  public Action createAction(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ACTION);  if (obj == null) {    return new ActionImpl();  } else {    return (Action)obj;  }}  }
class C{  public int read() throws IOException {  if (this.closed) {    throw new IOException("Attempted read from closed stream.");  }  if (this.eof) {    return -1;  }  if (this.pos >= this.chunkSize) {    nextChunk();    if (this.eof) {      return -1;    }  }  pos++;  return in.read();}  }
class C{  private void doAcquireShared(long arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public InternalSession newInternalSession(String domain,boolean stateless){  try {    final SessionID sessionID=generateSessionId(domain);    return generateInternalSession(sessionID,stateless);  } catch (  SessionException e) {    sessionDebug.error("Error creating new session",e);    return null;  }}  }
class C{  public static Remote exportObject(Remote obj,ActivationID id,int port,RMIClientSocketFactory csf,RMIServerSocketFactory ssf) throws RemoteException {  return exportObject(obj,new ActivatableServerRef(id,port,csf,ssf));}  }
class C{  public void encode(OutputStream stream) throws KeyException, IOException {}  }
class C{  @BeforeClass public void startServerAndCreatePasswordFiles() throws Exception {  TestCaseUtils.startServer();  File pwFile=File.createTempFile("valid-bind-password-",".txt");  pwFile.deleteOnExit();  FileWriter fileWriter=new FileWriter(pwFile);  fileWriter.write("password" + System.getProperty("line.separator"));  fileWriter.close();  validPasswordFile=pwFile.getAbsolutePath();  pwFile=File.createTempFile("invalid-bind-password-",".txt");  pwFile.deleteOnExit();  fileWriter=new FileWriter(pwFile);  fileWriter.write("wrongPassword" + System.getProperty("line.separator"));  fileWriter.close();  invalidPasswordFile=pwFile.getAbsolutePath();}  }
class C{  public MembershipPrincipal(String name){  if (name == null) {    throw new NullPointerException("illegal null input");  }  this.name=name;}  }
class C{  public void makeImmutable(){}  }
class C{  private void initializeAuthority(String p_uriSpec) throws MalformedURIException {  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  String userinfo=null;  if (p_uriSpec.indexOf('@',start) != -1) {    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '@') {        break;      }      index++;    }    userinfo=p_uriSpec.substring(start,index);    index++;  }  String host=null;  start=index;  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':') {      break;    }    index++;  }  host=p_uriSpec.substring(start,index);  int port=-1;  if (host.length() > 0) {    if (testChar == ':') {      index++;      start=index;      while (index < end) {        index++;      }      String portStr=p_uriSpec.substring(start,index);      if (portStr.length() > 0) {        for (int i=0; i < portStr.length(); i++) {          if (!isDigit(portStr.charAt(i))) {            throw new MalformedURIException(portStr + " is invalid. Port should only contain digits!");          }        }        try {          port=Integer.parseInt(portStr);        } catch (        NumberFormatException nfe) {        }      }    }  }  setHost(host);  setPort(port);  setUserinfo(userinfo);}  }
class C{  public static WaspDb openOrCreateDatabase(String path,String name,String password){  if (WaspFactory.existsDatabase(path,name)) {    return WaspFactory.loadDatabase(path,name,password);  } else {    return WaspFactory.createDatabase(path,name,password);  }}  }
class C{  public BasicPoolEntry(ClientConnectionOperator op,HttpRoute route,ReferenceQueue<Object> queue){  super(op,route);  if (route == null) {    throw new IllegalArgumentException("HTTP route may not be null");  }  this.reference=new BasicPoolEntryRef(this,queue);}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);  writer.writeStartSequence();  writer.writeInteger(resultCode);  writer.writeOctetString(section);  writer.writeEndSequence();  writer.writeEndSequence();}  }
class C{  public ServerRequestInterface newSIPServerRequest(SIPRequest sipRequest,SIPTransaction sipTransaction){  if (sipTransaction == null || sipRequest == null) {    throw new IllegalArgumentException("Null Arg!");  }  SIPTransactionStack theStack=sipTransaction.getSIPStack();  DialogFilter retval=new DialogFilter(theStack);  retval.transactionChannel=sipTransaction;  retval.listeningPoint=sipTransaction.getMessageProcessor().getListeningPoint();  if (retval.listeningPoint == null)   return null;  if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))   logger.logDebug("Returning request interface for " + sipRequest.getFirstLine() + " "+ retval+ " sipTransaction = "+ sipTransaction);  return retval;}  }
class C{  private void addTestEntries(String suffix,char c) throws Exception {  TestCaseUtils.addEntries("dn: ou=People," + suffix,"objectClass: top","objectClass: organizationalUnit","ou: People","aci: (targetattr= \"*\")" + "(version 3.0; acl \"allow all\";" + "allow(all) userdn=\"ldap:///anyone\";)","","dn: ou=People1," + suffix,"objectClass: top","objectClass: organizationalUnit","ou: People1","aci: (targetattr= \"*\")" + "(version 3.0; acl \"allow all\";" + "allow(all) userdn=\"ldap:///anyone\";)","","dn: ou=New People1," + suffix,"objectClass: top","objectClass: organizationalUnit","ou: New People","","","dn: ou=New People," + suffix,"objectClass: top","objectClass: organizationalUnit","ou: New People","","dn: uid=1user.1,ou=People," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 1","givenName: 1User","sn: 1","cn: 1User 1","userPassword: password","mail: user1" + c + "@test","employeeNumber: 1","mobile: 1-111-1234","pager: 1-111-5678","telephoneNumber: 1-111-9012","","dn: uid=2user.2,ou=People," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 2","givenName: 2User","sn: 2","cn: User 2","mail: user2" + c + "@test","userPassword: password","employeeNumber: 2","mobile: 1-222-1234","pager: 1-222-5678","telephoneNumber: 1-222-9012","","dn: uid=3user.3,ou=People," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 3","givenName: 3User","sn: 3","cn: User 3","mail: user3" + c + "@test","userPassword: password","employeeNumber: 3","mobile: 1-333-1234","pager: 1-333-5678","telephoneNumber: 1-333-9012","","dn: uid=4user.4,ou=People," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 4","givenName: 4User","sn: 4","cn: User 4","mail: user4" + c + "@test","userPassword: password","employeeNumber: 4","mobile: 1-444-1234","pager: 1-444-5678","telephoneNumber: 1-444-9012","","dn: uid=5user.5,ou=People," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 5","givenName: 5User","sn: 5","cn: User 5","mail: user5" + c + "@test","userPassword: password","employeeNumber: 5","mobile: 1-555-1234","pager: 1-555-5678","telephoneNumber: 1-555-9012","","dn: uid=1user.1,ou=People1," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 1","givenName: 1User","sn: 11","cn: 1User 11","userPassword: password","mail: user11" + c + "@test","employeeNumber: 111","mobile: 2-111-1234","pager: 2-111-5678","telephoneNumber: 2-111-9012","","dn: uid=2user.22,ou=People1," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 2","givenName: 2User","sn: 22","cn: User 22","mail: user22" + c + "@test","userPassword: password","employeeNumber: 222","mobile: 2-222-1234","pager: 2-222-5678","telephoneNumber: 2-222-9012","","dn: uid=3user.33,ou=People1," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 33","givenName: 3User","sn: 3","cn: User 33","mail: user33" + c + "@test","userPassword: password","employeeNumber: 333","mobile: 2-333-1234","pager: 2-333-5678","telephoneNumber: 2-333-9012");  if (suffix.equals("dc=example,dc=com")) {    TestCaseUtils.addEntries("dn: uid=2user.77,ou=People," + suffix,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 2","givenName: 2User","sn: 22","cn: User 22","mail: user77" + c + "@test","userPassword: password","employeeNumber: 777","mobile: 2-777-1234","pager: 2-777-5678","telephoneNumber: 2-777-9012");  }}  }
class C{  public DecimalStyle withPositiveSign(char positiveSign){  if (positiveSign == this.positiveSign) {    return this;  }  return new DecimalStyle(zeroDigit,positiveSign,negativeSign,decimalSeparator);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS10.class,args);}  }
class C{  public AccessibleRelation(String key){  this.key=key;  this.target=null;}  }
class C{  public static Entry valueOfLDIFEntry(final String... ldifLines){  try (final LDIFEntryReader reader=new LDIFEntryReader(ldifLines)){    if (!reader.hasNext()) {      final LocalizableMessage message=WARN_READ_LDIF_RECORD_NO_CHANGE_RECORD_FOUND.get();      throw new LocalizedIllegalArgumentException(message);    }    final Entry entry=reader.readEntry();    if (reader.hasNext()) {      final LocalizableMessage message=WARN_READ_LDIF_RECORD_MULTIPLE_CHANGE_RECORDS_FOUND.get();      throw new LocalizedIllegalArgumentException(message);    }    return entry;  } catch (  final DecodeException e) {    throw new LocalizedIllegalArgumentException(e.getMessageObject());  }catch (  final IOException e) {    final LocalizableMessage message=WARN_READ_LDIF_RECORD_UNEXPECTED_IO_ERROR.get(e.getMessage());    throw new LocalizedIllegalArgumentException(message);  }}  }
class C{  public void _write(OutputStream output){  output.write_longlong(value);}  }
class C{  public BuilderImages<T> size(Size size){  this.config.setSize(size);  return this;}  }
class C{  public static void main(String[] args){  OpenAMUpgrade upgrade=InjectorHolder.getInstance(OpenAMUpgrade.class);  upgrade.execute(args);}  }
class C{  public boolean authenticate(String orgName,Callback[] credentials){  return authenticate(orgName,credentials,null);}  }
class C{  public KeyFieldParser(String keyField){  this.lexer=new Lexer("charLexer",keyField);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  transformer.pushCurrentTemplateRuleIsNull(false);  boolean pushMode=false;  try {    QName mode=transformer.getMode();    if (!m_isDefaultTemplate) {      if (((null == mode) && (null != m_mode)) || ((null != mode) && !mode.equals(m_mode))) {        pushMode=true;        transformer.pushMode(m_mode);      }    }    transformSelectedNodes(transformer);  }  finally {    if (pushMode)     transformer.popMode();    transformer.popCurrentTemplateRuleIsNull();  }}  }
class C{  @Override public void refreshSession(SSOToken token,boolean possiblyResetIdleTime) throws SSOException {  try {    SSOTokenID tokenId=token.getTokenID();    SessionID sid=new SessionID(tokenId.toString());    Session session=sessionCache.getSession(sid,false,false);    session.refresh(possiblyResetIdleTime);  } catch (  Exception e) {    debug.error("Error in refreshing the session from sessions server");    throw new SSOException(e);  }}  }
class C{  protected void onBeforeRequest(RequestContext requestContext) throws ServletException {  HttpServletRequest req=requestContext.getRequest();  String host=req.getHeader("Host");  if (host == null) {    host=getConsoleHost();  } else {    String validHost=validateHost(host);    if (validHost != null) {      try {        requestContext.getResponse().sendRedirect(replaceHostNameInUrl(req,validHost));      } catch (      IOException ioe) {        getDebug().error("ConsoleServletBase.onBeforeRequest, " + "failed to redirect to fully qualified host");      }      throw new CompleteRequestException();    }  }  validateSSOToken(requestContext);}  }
class C{  public static QrCode encodeSegments(List<QrSegment> segs,Ecc ecl){  return encodeSegments(segs,ecl,1,40,-1,true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocumentType04.class,args);}  }
class C{  private void initializeMetadataAndCOT(){  try {    File homeDir=new File(fedletHomeDir);    String[] files=homeDir.list();    if ((files == null) || (files.length == 0)) {      return;    }    for (int i=0; i < files.length; i++) {      String fileName=files[i];      if (debug.messageEnabled()) {        debug.message("FedletConfigImpl.initMetaCOT: " + fileName);      }      if (fileName.endsWith(EXTENDED_XML_SUFFIX)) {        handleSAML2Metadata(fileName.substring(0,fileName.length() - EXTENDED_XML_SUFFIX.length()));      } else       if (fileName.endsWith(COT_FILE_SUFFIX)) {        handleCOT(fileName.substring(0,fileName.length() - COT_FILE_SUFFIX.length()));      } else {        continue;      }    }  } catch (  NullPointerException npe) {    debug.error("FedletConfigurationImpl.processSAML2Metadata()",npe);  }catch (  SecurityException se) {    debug.error("FedletConfigurationImpl.processSAML2Metadata()",se);  }}  }
class C{  public int next(){  final int result=_currentNode;  _currentNode=END;  return returnNode(result);}  }
class C{  public void paintCurrentValueBackground(Graphics g,Rectangle bounds,boolean hasFocus){  if (MetalLookAndFeel.usingOcean()) {    g.setColor(MetalLookAndFeel.getControlDarkShadow());    g.drawRect(bounds.x,bounds.y,bounds.width,bounds.height - 1);    g.setColor(MetalLookAndFeel.getControlShadow());    g.drawRect(bounds.x + 1,bounds.y + 1,bounds.width - 2,bounds.height - 3);    if (hasFocus && !isPopupVisible(comboBox) && arrowButton != null) {      g.setColor(listBox.getSelectionBackground());      Insets buttonInsets=arrowButton.getInsets();      if (buttonInsets.top > 2) {        g.fillRect(bounds.x + 2,bounds.y + 2,bounds.width - 3,buttonInsets.top - 2);      }      if (buttonInsets.bottom > 2) {        g.fillRect(bounds.x + 2,bounds.y + bounds.height - buttonInsets.bottom,bounds.width - 3,buttonInsets.bottom - 2);      }    }  } else   if (g == null || bounds == null) {    throw new NullPointerException("Must supply a non-null Graphics and Rectangle");  }}  }
class C{  public static boolean isAuthorized(String logName,String operation,Object credential){  return authorizer.isAuthorized(logName,operation,credential);}  }
class C{  public Tree<E> addChild(E item,int insertionIndex) throws IndexOutOfBoundsException {  Tree<E> it=new Tree<E>(this,item);  children.add(insertionIndex,it);  return it;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  boolean forwarded=false;  submitCycle=true;  try {    ResponseProvider provider=createResponseProvider();    if (provider != null) {      CachedPolicy cachedPolicy=getCachedPolicy();      Policy policy=cachedPolicy.getPolicy();      String name=(String)propertySheetModel.getValue(RESPONSEPROVIDER_NAME);      policy.addResponseProvider(name,provider);      backTrail();      forwardToPolicyViewBean();      forwarded=true;    }  } catch (  NameAlreadyExistsException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));  }catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  if (!forwarded) {    forwardTo();  }}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  public IOException(String message,Throwable cause,Object obj){  this(message,cause);  this.obj=obj;}  }
class C{  public PlaSide side_of_intersection(PlaLineInt p_1,PlaLineInt p_2){  PlaPointFloat intersection_approx=p_1.intersection_approx(p_2);  if (intersection_approx.is_NaN()) {    System.err.println("side_of_intersection NAN, fix it");    return PlaSide.ON_THE_LEFT;  }  PlaSide result=side_of(intersection_approx,1.0);  if (result == PlaSide.COLLINEAR) {    PlaPoint intersection=p_1.intersection(p_2,"this should never happen");    return side_of(intersection);  }  return result;}  }
class C{  private String buildBrowseUrl(final String type){  return PathUtils.escape(basePath.concat(CKFINDER_PAGE).concat(type == null ? "" : "?type=".concat(type)));}  }
class C{  private static boolean clearance_equals(freert.rules.ClearanceMatrix p_cl_matrix,int p_layer_1,int p_layer_2){  if (p_layer_1 == p_layer_2) {    return true;  }  for (int i=1; i < p_cl_matrix.get_class_count(); ++i) {    for (int j=i; j < p_cl_matrix.get_class_count(); ++j) {      if (p_cl_matrix.value_at(i,j,p_layer_1) != p_cl_matrix.value_at(i,j,p_layer_2)) {        return false;      }    }  }  return true;}  }
class C{  public ReorderAuthChainsViewBean(){  super("ReorderAuthChains");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  registerChildren();}  }
class C{  public MethodType basicType(){  return basicType;}  }
class C{  @SuppressWarnings("UnusedDeclaration") public static boolean isDomainName(String domainName){  if (StringUtils.isEmpty(domainName) || !StringUtils.contains(domainName,".")) {    return false;  }  String url="http://" + domainName;  String normalizedDomainName=getDomainName(url);  if (normalizedDomainName != null && "".equals(normalizedDomainName.replaceAll("[a-zA-Z0-9-.]+",""))) {    return true;  }  return false;}  }
class C{  public PrinterMakeAndModel(String makeAndModel,Locale locale){  super(makeAndModel,locale);}  }
class C{  public void stop(){  end=currentTimeMillis();}  }
class C{  private void removeFromMemCacheLocked(String packageName,UserHandleCompat user){  HashSet<ComponentKey> forDeletion=new HashSet<ComponentKey>();  for (  ComponentKey key : mCache.keySet()) {    if (key.componentName.getPackageName().equals(packageName) && key.user.equals(user)) {      forDeletion.add(key);    }  }  for (  ComponentKey condemned : forDeletion) {    mCache.remove(condemned);  }}  }
class C{  public MimeVersionHeader createMimeVersionHeader(int majorVersion,int minorVersion) throws InvalidArgumentException {  if (majorVersion < 0 || minorVersion < 0)   throw new javax.sip.InvalidArgumentException("bad major/minor version");  MimeVersion m=new MimeVersion();  m.setMajorVersion(majorVersion);  m.setMinorVersion(minorVersion);  return m;}  }
class C{  public boolean checkDependencies(DeleteOperation op){  final CSN csn=OperationContext.getCSN(op);  final PendingChange change=getPendingChange(csn);  if (change == null) {    return false;  }  boolean hasDependencies=false;  final DN targetDN=op.getEntryDN();  for (  PendingChange pendingChange : activeAndDependentChanges) {    if (pendingChange.getCSN().isNewerThanOrEqualTo(csn)) {      break;    }    final LDAPUpdateMsg pendingMsg=pendingChange.getLDAPUpdateMsg();    if (pendingMsg instanceof DeleteMsg) {      if (pendingMsg.getDN().isSubordinateOrEqualTo(targetDN)) {        hasDependencies=true;        addDependency(change);      }    } else     if (pendingMsg instanceof AddMsg) {      if (pendingMsg.getDN().equals(targetDN)) {        hasDependencies=true;        addDependency(change);      }    } else     if (pendingMsg instanceof ModifyDNMsg) {      final ModifyDNMsg pendingModDn=(ModifyDNMsg)pendingMsg;      if (pendingMsg.getDN().isSubordinateOrEqualTo(targetDN) || pendingModDn.newDNIsParent(targetDN)) {        hasDependencies=true;        addDependency(change);      }    }  }  return hasDependencies;}  }
class C{  public SQLTransactionRollbackException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias) throws XMLSignatureException {  return sp.signXML(doc,certAlias);}  }
class C{  public String toString(){  return "NotificationResult: earliest=" + getEarliestSequenceNumber() + "; next="+ getNextSequenceNumber()+ "; nnotifs="+ getTargetedNotifications().length;}  }
class C{  public void refresh(){  if (holder != null) {    canvas=holder.lockCanvas();    if (canvas != null) {      canvas.drawColor(-1);      if (isMapLoadFinish) {        for (        MapBaseLayer layer : layers) {          if (layer.isVisible) {            layer.draw(canvas,currentMatrix,currentZoom,currentRotateDegrees);          }        }      }      holder.unlockCanvasAndPost(canvas);    }  }}  }
class C{  public static void disableLogs(){  sLogsEnabled=false;}  }
class C{  public JobService existsJob(long id,Handler<AsyncResult<Boolean>> handler){  delegate.existsJob(id,handler);  return this;}  }
class C{  public int doIDPSingleLogout(Set userSession,String userID,HttpServletRequest request,HttpServletResponse response,boolean isSOAPInitiated,boolean isIDPInitiated,String protocol,String realm,String idpEntityID,String spEntityID,String relayState,String singleLogoutRequestXML,String singleLogoutResponseXML,int currentStatus) throws Exception {  SingleLogoutManager.debug.message("IDFFSingleLogoutHandler.doIDPSLO : start");  String idpMetaAlias=findIDPMetaAlias(idpEntityID,spEntityID,realm,protocol);  if (idpMetaAlias == null) {    return SingleLogoutManager.LOGOUT_NO_ACTION_STATUS;  }  if (SingleLogoutManager.debug.messageEnabled()) {    SingleLogoutManager.debug.message("IDFFSingleLogoutHandler: " + "IDFF idp meta alias=" + idpMetaAlias + ", userID="+ userID+ ", session="+ userSession+ ", isSOAInitiated="+ isSOAPInitiated+ ", isIDPInitiated="+ isIDPInitiated+ ", protocol="+ protocol+ ", relam="+ realm+ ", idpEntityID="+ idpEntityID+ ", spEntityID="+ spEntityID+ ", status="+ currentStatus+ "\nlogout Request XML="+ singleLogoutRequestXML+ "\nlogout response XML="+ singleLogoutResponseXML);  }  IDFFMetaManager idffManager=new IDFFMetaManager(null);  String idpEntityId=idffManager.getEntityIDByMetaAlias(idpMetaAlias);  if (!FSLogoutUtil.liveConnectionsExist(userID,idpMetaAlias)) {    return SingleLogoutManager.LOGOUT_NO_ACTION_STATUS;  }  if (isSOAPInitiated) {    return handleSOAPInitiatedSingleLogout(userSession,userID,request,response,realm,idpMetaAlias,idpEntityId,relayState,idffManager);  } else {    SingleLogoutManager.debug.message("IDFFSingleLogoutHandler.doIDPSLO : HTTP initiated SLO");    if (!MultiProtocolUtils.usedInProtocol(request,SingleLogoutManager.IDFF)) {      return SingleLogoutManager.LOGOUT_NO_ACTION_STATUS;    }    String redirectURL=MultiProtocolUtils.geServerBaseURL(request) + "/liberty-logout?" + IFSConstants.META_ALIAS+ "="+ idpMetaAlias+ "&"+ IFSConstants.RELAY_STATE+ "="+ URLEncoder.encode(relayState,"UTF-8");    if (SingleLogoutManager.debug.messageEnabled()) {      SingleLogoutManager.debug.message("IDFFSingleLogoutHandler.doIDPSLO : HTTP init, redirect to " + redirectURL);    }    response.sendRedirect(redirectURL);    return SingleLogoutManager.LOGOUT_REDIRECTED_STATUS;  }}  }
class C{  public synchronized int hashCode(){  return super.hashCode();}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_ByteBuffer_ByteBuffer_02(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100).asReadOnlyBuffer();  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bbs,bbd);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of ReadOnlyBufferException");  }}  }
class C{  public static TitledBorder createTitledBorder(Border border,String title){  return new TitledBorder(border,title);}  }
class C{  public boolean avoidingGui(){  return !okToUseGui && needsGui();}  }
class C{  public static String decodeBase64(final String value){  if (value != null) {    return new String(Base64.decode(value));  }  return null;}  }
class C{  public ByteArrayBuilder appendZeroTerminatedByteArray(byte[] bytes){  builder.appendBytes(bytes);  return appendZeroSeparator();}  }
class C{  public static Class<?> loadClass(Context context,String className){  ClassLoader cl=context.getLoader().getClassLoader();  Log log=context.getLogger();  Class<?> clazz=null;  try {    clazz=cl.loadClass(className);  } catch (  ClassNotFoundException|NoClassDefFoundError|ClassFormatError e) {    log.debug(sm.getString("introspection.classLoadFailed",className),e);  }catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.debug(sm.getString("introspection.classLoadFailed",className),t);  }  return clazz;}  }
class C{  @Parameters({"parent-realms"}) @AfterSuite(groups={"api"}) public void suiteTearDown(String realms) throws SSOException, SMSException {  Object[] params={realms};  entering("suiteTearDown",params);  StringTokenizer st=new StringTokenizer(realms,",");  while (st.hasMoreElements()) {    String realm=st.nextToken().trim();    deleteRealm(getAdminSSOToken(),realm);  }  exiting("suiteTearDown");}  }
class C{  @Deprecated public Date(int year,int month,int date,int hrs,int min){  this(year,month,date,hrs,min,0);}  }
class C{  public ClientCredentials(final String clientId,final char[] clientSecret,final boolean isAuthenticated,final boolean basicAuth){  this.clientId=clientId;  this.clientSecret=clientSecret;  this.isAuthenticated=isAuthenticated;  this.basicAuth=basicAuth;}  }
class C{  public String tableName(){  return tableName;}  }
class C{  public ClientConfigurationException(String configName,String badConfigItemName){  super("Configuration setting " + badConfigItemName + " in RADIUS Client configuration named '"+ configName+ "' is invalid. Requests from this client will be ignored.");}  }
class C{  private void addElements(int value,int numberOfElements){  if (m_firstFree + numberOfElements < m_blocksize)   for (int i=0; i < numberOfElements; i++) {    m_map0[m_firstFree++]=value;  } else {    int index=m_firstFree >>> m_SHIFT;    int offset=m_firstFree & m_MASK;    m_firstFree+=numberOfElements;    while (numberOfElements > 0) {      if (index >= m_map.length) {        int newsize=index + m_numblocks;        int[][] newMap=new int[newsize][];        System.arraycopy(m_map,0,newMap,0,m_map.length);        m_map=newMap;      }      int[] block=m_map[index];      if (null == block)       block=m_map[index]=new int[m_blocksize];      int copied=(m_blocksize - offset < numberOfElements) ? m_blocksize - offset : numberOfElements;      numberOfElements-=copied;      while (copied-- > 0)       block[offset++]=value;      ++index;      offset=0;    }  }}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public void testUpdate3(){  int newValue1=-1;  int newValue2=-2;  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2="+ newValue1+ ", field3="+ newValue2;  try {    int num=statement.executeUpdate(updateQuery);    assertEquals("Not all records in the database were updated",numberOfRecords,num);    String selectQuery="SELECT field2, field3 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public static void fill(boolean[] array,boolean value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String providerAlias=FSServiceUtils.getMetaAlias(request);  if (providerAlias == null || providerAlias.length() < 1) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Unable to retrieve alias, Hosted " + "Provider. Cannot process request");    }    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("aliasNotFound"));    return;  }  if (metaManager == null) {    FSUtils.debug.error("Cannot retrieve hosted descriptor. Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  ProviderDescriptorType hostedProviderDesc=null;  BaseConfigType hostedConfig=null;  String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);  String hostedEntityId=null;  String hostedProviderRole=null;  try {    hostedProviderRole=metaManager.getProviderRoleByMetaAlias(providerAlias);    hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);    if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.IDP)) {      hostedProviderDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);      hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);    } else     if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {      hostedProviderDesc=metaManager.getSPDescriptor(realm,hostedEntityId);      hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);    }    if (hostedProviderDesc == null) {      throw new IDFFMetaException((String)null);    }  } catch (  IDFFMetaException eam) {    FSUtils.debug.error("Unable to find Hosted Provider. not process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  this.request=request;  setTerminationURL(hostedConfig,providerAlias);  FSFederationTerminationNotification fedTermObj=new FSFederationTerminationNotification();  try {    fedTermObj=FSFederationTerminationNotification.parseURLEncodedRequest(request);  } catch (  FSMsgException e) {    FSServiceUtils.showErrorPage(response,commonErrorPage,IFSConstants.TERMINATION_REQUEST_IMPROPER,IFSConstants.TERMINATION_LOCAL_FAILED);    return;  }catch (  SAMLException e) {    FSServiceUtils.showErrorPage(response,commonErrorPage,IFSConstants.TERMINATION_REQUEST_IMPROPER,IFSConstants.TERMINATION_LOCAL_FAILED);    return;  }  if (fedTermObj == null) {    FSServiceUtils.showErrorPage(response,commonErrorPage,IFSConstants.TERMINATION_REQUEST_IMPROPER,IFSConstants.TERMINATION_LOCAL_FAILED);  } else {    doRequestProcessing(request,response,hostedProviderDesc,hostedConfig,hostedProviderRole,realm,hostedEntityId,providerAlias,fedTermObj);  }  return;}  }
class C{  public void add(int index,E element){  insertElementAt(element,index);}  }
class C{  public static void registerSupportedExtension(String oid,ExtendedOperationHandler<?> handler){  directoryServer.extendedOperationHandlers.put(toLowerCase(oid),handler);}  }
class C{  public String encode(){  String encoded_string=CONNECTION_FIELD;  if (nettype != null)   encoded_string+=nettype;  if (addrtype != null)   encoded_string+=Separators.SP + addrtype;  if (address != null)   encoded_string+=Separators.SP + address.encode();  return encoded_string+=Separators.NEWLINE;}  }
class C{  public int hashCode(){  return (int)objNum;}  }
class C{  private String generateSafeName(String name){  StringBuilder buffer=new StringBuilder();  boolean lastWasUppercase=false;  boolean lastWasDash=false;  for (int i=0; i < name.length(); i++) {    char c=name.charAt(i);    if (Character.isLetter(c)) {      if (Character.isUpperCase(c)) {        char lowerCaseCharacter=Character.toLowerCase(c);        if (buffer.length() > 0 && !lastWasUppercase && !lastWasDash) {          buffer.append('-');        }        buffer.append(lowerCaseCharacter);        lastWasUppercase=true;        lastWasDash=false;      } else {        buffer.append(c);        lastWasUppercase=false;        lastWasDash=false;      }    } else     if (Character.isDigit(c)) {      buffer.append(c);      lastWasUppercase=false;      lastWasDash=false;    } else     if (c == ' ' || c == '_' || c == '-') {      if (!lastWasDash) {        buffer.append('-');      }      lastWasUppercase=false;      lastWasDash=true;    }  }  return buffer.toString();}  }
class C{  SystemStartupGuiceModule(ServletContext servletContext){  this.servletContext=servletContext;}  }
class C{  public SQLDataException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element lastEmployee;  NodeList lastempList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("em");  expectedResult.add("strong");  expectedResult.add("code");  expectedResult.add("sup");  expectedResult.add("var");  expectedResult.add("acronym");  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  lastEmployee=(Element)elementList.item(4);  lastempList=lastEmployee.getElementsByTagName("*");  for (int indexN10067=0; indexN10067 < lastempList.getLength(); indexN10067++) {    child=(Node)lastempList.item(indexN10067);    childName=child.getNodeName();    result.add(childName);  }  assertEqualsAutoCase("element","tagNames",expectedResult,result);}  }
class C{  protected boolean PrimaryExpr() throws javax.xml.transform.TransformerException {  boolean matchFound;  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if ((m_tokenChar == '\'') || (m_tokenChar == '"')) {    appendOp(2,OpCodes.OP_LITERAL);    Literal();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if (m_tokenChar == '$') {    nextToken();    appendOp(2,OpCodes.OP_VARIABLE);    QName();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if (m_tokenChar == '(') {    nextToken();    appendOp(2,OpCodes.OP_GROUP);    Expr();    consumeExpected(')');    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if ((null != m_token) && ((('.' == m_tokenChar) && (m_token.length() > 1) && Character.isDigit(m_token.charAt(1))) || Character.isDigit(m_tokenChar))) {    appendOp(2,OpCodes.OP_NUMBERLIT);    Number();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if (lookahead('(',1) || (lookahead(':',1) && lookahead('(',3))) {    matchFound=FunctionCall();  } else {    matchFound=false;  }  return matchFound;}  }
class C{  public PdfFormXObject createFormXObject(Color foreground,float moduleSize,PdfDocument document){  PdfFormXObject xObject=new PdfFormXObject((Rectangle)null);  Rectangle rect=placeBarcode(new PdfCanvas(xObject,document),foreground,moduleSize);  xObject.setBBox(new PdfArray(rect));  return xObject;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node childNode;  Node clonedNode;  Node lastChildNode;  String childValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("sup");  childNode=elementList.item(1);  clonedNode=childNode.cloneNode(true);  lastChildNode=clonedNode.getLastChild();  childValue=lastChildNode.getNodeValue();  assertEquals("cloneContainsText","35,000",childValue);}  }
class C{  static void checkTypeRefAndPath(int typeRef,TypePath typePath){  int mask=0;switch (typeRef >>> 24) {case TypeReference.CLASS_TYPE_PARAMETER:case TypeReference.METHOD_TYPE_PARAMETER:case TypeReference.METHOD_FORMAL_PARAMETER:    mask=0xFFFF0000;  break;case TypeReference.FIELD:case TypeReference.METHOD_RETURN:case TypeReference.METHOD_RECEIVER:case TypeReference.LOCAL_VARIABLE:case TypeReference.RESOURCE_VARIABLE:case TypeReference.INSTANCEOF:case TypeReference.NEW:case TypeReference.CONSTRUCTOR_REFERENCE:case TypeReference.METHOD_REFERENCE:mask=0xFF000000;break;case TypeReference.CLASS_EXTENDS:case TypeReference.CLASS_TYPE_PARAMETER_BOUND:case TypeReference.METHOD_TYPE_PARAMETER_BOUND:case TypeReference.THROWS:case TypeReference.EXCEPTION_PARAMETER:mask=0xFFFFFF00;break;case TypeReference.CAST:case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:mask=0xFF0000FF;break;default :throw new IllegalArgumentException("Invalid type reference sort 0x" + Integer.toHexString(typeRef >>> 24));}if ((typeRef & ~mask) != 0) {throw new IllegalArgumentException("Invalid type reference 0x" + Integer.toHexString(typeRef));}if (typePath != null) {for (int i=0; i < typePath.getLength(); ++i) {int step=typePath.getStep(i);if (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) {throw new IllegalArgumentException("Invalid type path step " + i + " in "+ typePath);}if (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) {throw new IllegalArgumentException("Invalid type path step argument for step " + i + " in "+ typePath);}}}}  }
class C{  public static void unregisterAll(Listener listener){synchronized (allLists) {    for (    HandlerList h : allLists) {      h.unregister(listener);    }  }}  }
class C{  UpdateMsg(byte[] bytes) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(bytes);  decodeHeader(MSG_TYPE_GENERIC_UPDATE,scanner);  payload=scanner.remainingBytes();}  }
class C{  public static Tailer create(File file,TailerListener listener,long delayMillis){  return create(file,listener,delayMillis,false);}  }
class C{  public static double nextDouble(double value,boolean increment){  return increment ? nextDouble(value) : previousDouble(value);}  }
class C{  public CSeqHeader createCSeqHeader(long sequenceNumber,String method) throws ParseException, InvalidArgumentException {  if (sequenceNumber < 0)   throw new InvalidArgumentException("bad arg " + sequenceNumber);  if (method == null)   throw new NullPointerException("null arg method");  CSeq cseq=new CSeq();  cseq.setMethod(method);  cseq.setSeqNumber(sequenceNumber);  return cseq;}  }
class C{  @Override public void removeAttribute(String name){  myAttributes.remove(name);}  }
class C{  public SmallConversionSet(AttributeSet attrs){  super(attrs);}  }
class C{  private static int unsignedBytesToInt(byte b0,byte b1,byte b2,byte b3){  return (unsignedByteToInt(b0) + (unsignedByteToInt(b1) << 8)) + (unsignedByteToInt(b2) << 16) + (unsignedByteToInt(b3) << 24);}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.ExtensionTypeImpl();}  }
class C{  @Override public Response<GeocodingResponse> executeCall() throws IOException {  return getCall().execute();}  }
class C{  public FrameBodyTMED(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static String buildView(final FacesContext context,final String viewId) throws IOException {  final UIViewRoot view=JKJsfUtil.createView(viewId);  view.encodeAll(FacesContext.getCurrentInstance());  final ResponseWriter originalWriter=context.getResponseWriter();  final StringWriter writer=new StringWriter();  try {    context.setResponseWriter(context.getRenderKit().createResponseWriter(writer,"text/html","UTF-8"));    view.encodeAll(context);  }  finally {    if (originalWriter != null) {      context.setResponseWriter(originalWriter);    }  }  return writer.toString();}  }
class C{  public MBeanOperationInfo(String name,String description,MBeanParameterInfo[] signature,String type,int impact){  this(name,description,signature,type,impact,(Descriptor)null);}  }
class C{  void elementDequeued(){  if (count == 0)   queueIsEmpty(); else   if (takeIndex == 0)   takeIndexWrapped();}  }
class C{  public static MyFragment newInstance(int param1){  MyFragment fragment=new MyFragment();  Bundle args=new Bundle();  args.putInt(ARG_COLOR,param1);  fragment.setArguments(args);  return fragment;}  }
class C{  public void migrateTo(DTMManager manager){  super.migrateTo(manager);  int numDTMs=m_dtmIdent.size();  int dtmId=m_mgrDefault.getFirstFreeDTMID();  int nodeIndex=0;  for (int i=0; i < numDTMs; i++) {    m_dtmIdent.setElementAt(dtmId << DTMManager.IDENT_DTM_NODE_BITS,i);    m_mgrDefault.addDTM(this,dtmId,nodeIndex);    dtmId++;    nodeIndex+=(1 << DTMManager.IDENT_DTM_NODE_BITS);  }}  }
class C{  public List<Order> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  private void deleteInstallationFiles(int minRatio,int maxRatio) throws ApplicationException {  if (isVerbose()) {    notifyListeners(getFormattedProgressWithLineBreak(INFO_PROGRESS_DELETING_INSTALLATION_FILES.get()));  } else {    notifyListeners(getFormattedWithPoints(INFO_PROGRESS_DELETING_INSTALLATION_FILES_NON_VERBOSE.get()));  }  String installPath=getInstallPathFromClasspath();  File installFile=new File(installPath);  try {    installPath=installFile.getCanonicalPath();  } catch (  Exception e) {    installPath=getInstallPathFromClasspath();  }  String instancePath=Utils.getInstancePathFromInstallPath(installFile.getAbsolutePath());  File instanceFile=new File(instancePath);  try {    instancePath=instanceFile.getCanonicalPath();  } catch (  Exception e) {    instancePath=Utils.getInstancePathFromInstallPath(installFile.getAbsolutePath());  }  InstallationFilesToDeleteFilter filter=new InstallationFilesToDeleteFilter();  File[] installFiles=installFile.listFiles();  File[] instanceFiles=null;  if (!installPath.equals(instancePath)) {    instanceFiles=new File(instancePath).listFiles();  }  File[] rootFiles=null;  if (installFiles == null) {    rootFiles=new File(instancePath).listFiles();  } else   if (instanceFiles == null) {    rootFiles=installFiles;  } else {    rootFiles=new File[installFiles.length + instanceFiles.length];    System.arraycopy(installFiles,0,rootFiles,0,installFiles.length);    System.arraycopy(instanceFiles,0,rootFiles,installFiles.length,instanceFiles.length);  }  if (rootFiles != null) {    int totalRatio=0;    ArrayList<Integer> cumulatedRatio=new ArrayList<>();    for (    File f : rootFiles) {      if (filter.accept(f)) {        Installation installation=getInstallation();        int relativeRatio=getRelativeRatio(f,installation);        cumulatedRatio.add(totalRatio);        totalRatio+=relativeRatio;      } else {        cumulatedRatio.add(totalRatio);      }    }    Iterator<Integer> it=cumulatedRatio.iterator();    for (    File rootFile : rootFiles) {      int beforeRatio=minRatio + (it.next() * (maxRatio - minRatio)) / totalRatio;      hmRatio.put(DELETING_INSTALLATION_FILES,beforeRatio);      deleteRecursively(rootFile,filter);    }    hmRatio.put(DELETING_INSTALLATION_FILES,maxRatio);  }  if (!isVerbose()) {    notifyListeners(getFormattedDone());  }}  }
class C{  public IDRepoSelectTypeViewBean(){  super("IDRepoSelectType");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  protected String ensureAttributesNamespaceIsDeclared(String ns,String localName,String rawName) throws org.xml.sax.SAXException {  if (ns != null && ns.length() > 0) {    int index=0;    String prefixFromRawName=(index=rawName.indexOf(":")) < 0 ? "" : rawName.substring(0,index);    if (index > 0) {      String uri=m_prefixMap.lookupNamespace(prefixFromRawName);      if (uri != null && uri.equals(ns)) {        return null;      } else {        this.startPrefixMapping(prefixFromRawName,ns,false);        this.addAttribute("http://www.w3.org/2000/xmlns/",prefixFromRawName,"xmlns:" + prefixFromRawName,"CDATA",ns,false);        return prefixFromRawName;      }    } else {      String prefix=m_prefixMap.lookupPrefix(ns);      if (prefix == null) {        prefix=m_prefixMap.generateNextPrefix();        this.startPrefixMapping(prefix,ns,false);        this.addAttribute("http://www.w3.org/2000/xmlns/",prefix,"xmlns:" + prefix,"CDATA",ns,false);      }      return prefix;    }  }  return null;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  List urls=(List)getPageSessionAttribute(AMServiceProfile.PG_SESSION_PROFILE_VIEWBEANS);  String url=(String)urls.remove(0);  AMPostViewBean vb=(AMPostViewBean)getViewBean(AMPostViewBean.class);  backTrail();  passPgSessionMap(vb);  vb.setTargetViewBeanURL(url);  vb.forwardTo(getRequestContext());}  }
class C{  public DynamicLayout(LayoutContext layoutContext,CharSequence base,CharSequence display,TextPaint paint,int width,Alignment align,float spacingmult,float spacingadd,boolean includepad){  this(layoutContext,base,display,paint,width,align,TextDirectionHeuristics.FIRSTSTRONG_LTR,spacingmult,spacingadd,includepad);}  }
class C{  protected void replaceRange(int start,int end,Object[] marks){  int g0=getGapStart();  int g1=getGapEnd();  int index=start;  int newIndex=0;  Object[] array=(Object[])getArray();  if (start >= g0) {    index+=(g1 - g0);    end+=(g1 - g0);  } else   if (end >= g0) {    end+=(g1 - g0);    while (index < g0) {      array[index++]=marks[newIndex++];    }    index=g1;  } else {    while (index < end) {      array[index++]=marks[newIndex++];    }  }  while (index < end) {    array[index++]=marks[newIndex++];  }}  }
class C{  protected Color(PdfColorSpace colorSpace,float[] colorValue){  this.colorSpace=colorSpace;  if (colorValue == null)   this.colorValue=new float[colorSpace.getNumberOfComponents()]; else   this.colorValue=colorValue;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.SurNameElement createSurNameElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.SurNameElementImpl(value);}  }
class C{  public boolean isAccessLoggable(Level level){  return accessLogger.isLoggable(level);}  }
class C{  public static SearchFilter createEqualityFilter(AttributeType attributeType,Set<String> attributeOptions,ByteString assertionValue){  return new SearchFilter(FilterType.EQUALITY,null,null,attributeType,attributeOptions,assertionValue,null,null,null,null,false);}  }
class C{  public Soundex(){  this(US_ENGLISH_MAPPING);}  }
class C{  public com.sun.identity.federation.jaxb.entityconfig.ValueElement createValueElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.federation.jaxb.entityconfig.impl.ValueElementImpl(value);}  }
class C{  public String cachePolicy(String policyName,String description,boolean isReferral,boolean isActive) throws AMConsoleException {  try {    Policy policy=new Policy(policyName,description,isReferral,isActive);    PolicyCache cache=PolicyCache.getInstance();    return cache.cachePolicy(getUserSSOToken(),new CachedPolicy(policy));  } catch (  InvalidNameException e) {    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public static Control createDelayControl(long delay){  return new DelayRequestControl(false,delay);}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public static boolean isRealmEnabled(){  if (!initialized) {    try {      initialize((SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance()));    } catch (    Exception ssme) {      debug.error("ServiceManager::isRealmEnabled unable to " + "initialize",ssme);    }  }  return (realmCache);}  }
class C{  @DataProvider(name="exactRuleData") public Object[][] createExactRuleData(){  return new Object[][]{{"12345678","12345678",ConditionResult.TRUE},{"ABC45678","ABC45678",ConditionResult.TRUE},{"ABC45678","abc45678",ConditionResult.FALSE},{"\u0020foo\u0020bar\u0020\u0020","foo bar",ConditionResult.TRUE},{"test\u00AD\u200D","test",ConditionResult.TRUE},{"foo\u000Bbar","foo\u0020bar",ConditionResult.TRUE},{"foo\u070Fbar","foobar",ConditionResult.TRUE}};}  }
class C{  protected String paramString(){  String isViewSizeSetString=(isViewSizeSet ? "true" : "false");  String lastPaintPositionString=(lastPaintPosition != null ? lastPaintPosition.toString() : "");  String scrollUnderwayString=(scrollUnderway ? "true" : "false");  return super.paramString() + ",isViewSizeSet=" + isViewSizeSetString+ ",lastPaintPosition="+ lastPaintPositionString+ ",scrollUnderway="+ scrollUnderwayString;}  }
class C{  @Override public MapboxStaticImage build() throws ServicesException {  validateAccessToken(accessToken);  if (styleId == null || styleId.isEmpty()) {    throw new ServicesException("You need to set a map style.");  }  if (lon == null || lat == null) {    throw new ServicesException("You need to set the map lon/lat coordinates.");  }  if (zoom == null) {    throw new ServicesException("You need to set the map zoom level.");  }  if (width == null || width < 1 || width > 1280) {    throw new ServicesException("You need to set a valid image width (between 1 and 1280).");  }  if (height == null || height < 1 || height > 1280) {    throw new ServicesException("You need to set a valid image height (between 1 and 1280).");  }  return new MapboxStaticImage(this);}  }
class C{  public static boolean isHardcore(){  return server.isHardcore();}  }
class C{  public static void writeSwappedFloat(OutputStream output,float value) throws IOException {  writeSwappedInteger(output,Float.floatToIntBits(value));}  }
class C{  private ByteBuffer writeStringUTF16LEBOM(String next,int i,int noOfValues) throws CharacterCodingException {  CharsetEncoder encoder=Charset.forName(TextEncoding.CHARSET_UTF_16_LE_ENCODING_FORMAT).newEncoder();  encoder.onMalformedInput(CodingErrorAction.IGNORE);  encoder.onUnmappableCharacter(CodingErrorAction.IGNORE);  ByteBuffer bb=null;  if ((i + 1) == noOfValues) {    bb=encoder.encode(CharBuffer.wrap('\ufeff' + next));  } else {    bb=encoder.encode(CharBuffer.wrap('\ufeff' + next + '\0'));  }  bb.rewind();  return bb;}  }
class C{  public void startDocument() throws SAXException {}  }
class C{  public void testGetObject3() throws Exception {  try {    new SealedObject("secret string",new NullCipher()).getObject(new SecretKeySpec(new byte[]{0,0,0},"algorithm"),null);    fail("IllegalArgumentException should be thrown in the case of " + "null provider.");  } catch (  IllegalArgumentException e) {  }  try {    new SealedObject("secret string",new NullCipher()).getObject(new SecretKeySpec(new byte[]{0,0,0},"algorithm"),"");    fail("IllegalArgumentException should be thrown in the case of " + "empty provider.");  } catch (  IllegalArgumentException e) {  }  KeyGenerator kg=KeyGenerator.getInstance("DES");  Key key=kg.generateKey();  Cipher cipher=Cipher.getInstance("DES");  String provider=cipher.getProvider().getName();  cipher.init(Cipher.ENCRYPT_MODE,key);  String secret="secret string";  SealedObject so=new SealedObject(secret,cipher);  cipher.init(Cipher.DECRYPT_MODE,key);  assertEquals("The returned object does not equals to the " + "original object.",secret,so.getObject(key,provider));  kg=KeyGenerator.getInstance("DESede");  key=kg.generateKey();  try {    so.getObject(key,provider);    fail("InvalidKeyException expected");  } catch (  InvalidKeyException e) {  }  try {    so.getObject(key,"Wrong provider name");    fail("NoSuchProviderException expected");  } catch (  NoSuchProviderException e) {  }}  }
class C{  public void testGetSigAlgOID(){  if (this.cert == null) {    return;  }  assertEquals("The name of OID of signature algorithm is not correct.",tbt_cert.getSigAlgOID(),cert.getSigAlgOID());}  }
class C{  public void removeAttribute(String attrName) throws SSOException, SMSException {  validateServiceInstance();  SMSEntry e=instance.getSMSEntry();  SMSUtils.removeAttribute(e,attrName);  e.save(token);  instance.refresh(e);}  }
class C{  public String toXMLString(){  StringBuilder xml=new StringBuilder(300);  xml.append("<SessionNotification vers=").append(QUOTE).append(notificationVersion).append(QUOTE).append(" notid=").append(QUOTE).append(notificationID).append(QUOTE).append(">").append(NL);  xml.append(sessionInfo.toXMLString()).append(NL);  xml.append("<Type>").append(Integer.toString(notificationType)).append("</Type>").append(NL);  xml.append("<Time>").append(Long.toString(notificationTime)).append("</Time>").append(NL);  xml.append("</SessionNotification>");  return xml.toString();}  }
class C{  @Override public int hashCode(){  long nod=toNanoOfDay();  return (int)(nod ^ (nod >>> 32));}  }
class C{  public static Bitmap createIconBitmap(Drawable icon,Context context){synchronized (sCanvas) {    final int iconBitmapSize=getIconBitmapSize();    int width=iconBitmapSize;    int height=iconBitmapSize;    if (icon instanceof PaintDrawable) {      PaintDrawable painter=(PaintDrawable)icon;      painter.setIntrinsicWidth(width);      painter.setIntrinsicHeight(height);    } else     if (icon instanceof BitmapDrawable) {      BitmapDrawable bitmapDrawable=(BitmapDrawable)icon;      Bitmap bitmap=bitmapDrawable.getBitmap();      if (bitmap.getDensity() == Bitmap.DENSITY_NONE) {        bitmapDrawable.setTargetDensity(context.getResources().getDisplayMetrics());      }    }    int sourceWidth=icon.getIntrinsicWidth();    int sourceHeight=icon.getIntrinsicHeight();    if (sourceWidth > 0 && sourceHeight > 0) {      final float ratio=(float)sourceWidth / sourceHeight;      if (sourceWidth > sourceHeight) {        height=(int)(width / ratio);      } else       if (sourceHeight > sourceWidth) {        width=(int)(height * ratio);      }    }    int textureWidth=iconBitmapSize;    int textureHeight=iconBitmapSize;    final Bitmap bitmap=Bitmap.createBitmap(textureWidth,textureHeight,Bitmap.Config.ARGB_8888);    final Canvas canvas=sCanvas;    canvas.setBitmap(bitmap);    final int left=(textureWidth - width) / 2;    final int top=(textureHeight - height) / 2;    @SuppressWarnings("all") final boolean debug=false;    if (debug) {      canvas.drawColor(sColors[sColorIndex]);      if (++sColorIndex >= sColors.length)       sColorIndex=0;      Paint debugPaint=new Paint();      debugPaint.setColor(0xffcccc00);      canvas.drawRect(left,top,left + width,top + height,debugPaint);    }    sOldBounds.set(icon.getBounds());    icon.setBounds(left,top,left + width,top + height);    icon.draw(canvas);    icon.setBounds(sOldBounds);    canvas.setBitmap(null);    return bitmap;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SPKIDataType.SPKISexp createSPKIDataTypeSPKISexp(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SPKIDataTypeImpl.SPKISexpImpl(value);}  }
class C{  @Override public Foo findByUuid_C_First(String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_C_First(uuid,companyId,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(6);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(", companyId=");  msg.append(companyId);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  protected String embeddedIconsInConsole(String iconRef,String prefix){  if (iconRef == null) {    return null;  }  if (iconRef.startsWith("icons/")) {    iconRef=iconRef.substring(6);  }  if (iconRef.contains("fabric8")) {    return "img/fabric8_icon.svg";  }  if (iconRef.contains("activemq")) {    return prefix + "activemq.svg";  } else   if (iconRef.contains("apiman")) {    return prefix + "apiman.png";  } else   if (iconRef.contains("api-registry")) {    return prefix + "api-registry.svg";  } else   if (iconRef.contains("brackets")) {    return prefix + "brackets.svg";  } else   if (iconRef.contains("camel")) {    return prefix + "camel.svg";  } else   if (iconRef.contains("chaos-monkey")) {    return prefix + "chaos-monkey.png";  } else   if (iconRef.contains("docker-registry")) {    return prefix + "docker-registry.png";  } else   if (iconRef.contains("elasticsearch")) {    return prefix + "elasticsearch.png";  } else   if (iconRef.contains("fluentd")) {    return prefix + "fluentd.png";  } else   if (iconRef.contains("forge")) {    return prefix + "forge.svg";  } else   if (iconRef.contains("funktion")) {    return prefix + "funktion.png";  } else   if (iconRef.contains("gerrit")) {    return prefix + "gerrit.png";  } else   if (iconRef.contains("gitlab")) {    return prefix + "gitlab.svg";  } else   if (iconRef.contains("gogs")) {    return prefix + "gogs.png";  } else   if (iconRef.contains("grafana")) {    return prefix + "grafana.png";  } else   if (iconRef.contains("hubot-irc")) {    return prefix + "hubot-irc.png";  } else   if (iconRef.contains("hubot-letschat")) {    return prefix + "hubot-letschat.png";  } else   if (iconRef.contains("hubot-notifier")) {    return prefix + "hubot-notifier.png";  } else   if (iconRef.contains("hubot-slack")) {    return prefix + "hubot-slack.png";  } else   if (iconRef.contains("image-linker")) {    return prefix + "image-linker.svg";  } else   if (iconRef.contains("javascript")) {    return prefix + "javascript.png";  } else   if (iconRef.contains("java")) {    return prefix + "java.svg";  } else   if (iconRef.contains("jenkins")) {    return prefix + "jenkins.svg";  } else   if (iconRef.contains("jetty")) {    return prefix + "jetty.svg";  } else   if (iconRef.contains("karaf")) {    return prefix + "karaf.svg";  } else   if (iconRef.contains("keycloak")) {    return prefix + "keycloak.svg";  } else   if (iconRef.contains("kibana")) {    return prefix + "kibana.svg";  } else   if (iconRef.contains("kiwiirc")) {    return prefix + "kiwiirc.png";  } else   if (iconRef.contains("letschat")) {    return prefix + "letschat.png";  } else   if (iconRef.contains("mule")) {    return prefix + "mule.svg";  } else   if (iconRef.contains("nexus")) {    return prefix + "nexus.png";  } else   if (iconRef.contains("node")) {    return prefix + "node.svg";  } else   if (iconRef.contains("orion")) {    return prefix + "orion.png";  } else   if (iconRef.contains("prometheus")) {    return prefix + "prometheus.png";  } else   if (iconRef.contains("django") || iconRef.contains("python")) {    return prefix + "python.png";  } else   if (iconRef.contains("spring-boot")) {    return prefix + "spring-boot.svg";  } else   if (iconRef.contains("taiga")) {    return prefix + "taiga.png";  } else   if (iconRef.contains("tomcat")) {    return prefix + "tomcat.svg";  } else   if (iconRef.contains("tomee")) {    return prefix + "tomee.svg";  } else   if (iconRef.contains("vertx")) {    return prefix + "vertx.svg";  } else   if (iconRef.contains("wildfly")) {    return prefix + "wildfly.svg";  } else   if (iconRef.contains("wildfly-swarm")) {    return prefix + "wildfly-swarm.png";  } else   if (iconRef.contains("weld")) {    return prefix + "weld.svg";  } else   if (iconRef.contains("zipkin")) {    return prefix + "zipkin.png";  }  return null;}  }
class C{  public static XMPDateTime create(int year,int month,int day){  XMPDateTime dt=new XMPDateTimeImpl();  dt.setYear(year);  dt.setMonth(month);  dt.setDay(day);  return dt;}  }
class C{  private static void processAgentOptions(String optionsString) throws IOException {  AgentOptions options=new AgentOptions(optionsString);  projectPath=(String)options.getOption(Option.PROJECT);  String classPaths=(String)options.getOption(Option.CLASSES);  Whyline.debug("Writing user's classes...");  processUserClasses(classPaths);  Whyline.debug("Writing user's source...");  String sourcePaths=(String)options.getOption(Option.SOURCE);  cacheUserSourceFiles(sourcePaths);  if (options.declaresOption(Option.PRINT_INSTRUMENTATION_SUMMARY))   ClassInstrumenter.DEBUG_INSTRUMENTATION=(Boolean)options.getOption(Option.PRINT_INSTRUMENTATION_SUMMARY);  if (options.declaresOption(Option.PRINT_INSTRUMENTATION_SUMMARY))   Tracer.DEBUG_CLASSES_INSTRUMENTED=(Boolean)options.getOption(Option.PRINT_INSTRUMENTATION_SUMMARY);  if (options.declaresOption(Option.PRINT_METHODS_BEFORE_AND_AFTER))   ClassInstrumenter.DEBUG_BEFORE_AND_AFTER=(Boolean)options.getOption(Option.PRINT_METHODS_BEFORE_AND_AFTER);  String prefixesToSkip=(String)options.getOption(AgentOptions.Option.SKIP);  for (  String prefix : prefixesToSkip.split("\n"))   ClassInstrumenter.addPrefixToSkip(prefix.replace(".","/"));}  }
class C{  protected void ReadFDArray(int Font){  seek(fonts[Font].fdarrayOffset);  fonts[Font].FDArrayCount=getCard16();  fonts[Font].FDArrayOffsize=getCard8();  if (fonts[Font].FDArrayOffsize < 4)   fonts[Font].FDArrayOffsize++;  fonts[Font].FDArrayOffsets=getIndex(fonts[Font].fdarrayOffset);}  }
class C{  public void testAddIssuerLjavax_security_auth_x500_X500Principal02(){  X509CRLSelector selector=new X509CRLSelector();  X500Principal iss1=new X500Principal("O=First Org.");  X500Principal iss2=new X500Principal("O=Second Org.");  CRL crl1=new TestCRL(iss1);  CRL crl2=new TestCRL(iss2);  selector.addIssuer(iss1);  assertTrue("The CRL should match the selection criteria.",selector.match(crl1));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl2));  selector.addIssuer(iss2);  assertTrue("The CRL should match the selection criteria.",selector.match(crl2));}  }
class C{  public static <T,U>T[] copyOf(U[] original,int newLength,Class<? extends T[]> newType){  @SuppressWarnings("unchecked") T[] copy=((Object)newType == (Object)Object[].class) ? (T[])new Object[newLength] : (T[])Array.newInstance(newType.getComponentType(),newLength);  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public void popCurrentTemplateRuleIsNull(){  m_currentTemplateRuleIsNull.pop();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrValue;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("domestic");  attrValue=addrAttr.getNodeValue();  assertEquals("nodeAttributeNodeValueAssert1","Yes",attrValue);}  }
class C{  public boolean hasDescription(){  return fieldSetFlags()[0];}  }
class C{  public SubjectAddViewBean(){  super("SubjectAdd",DEFAULT_DISPLAY_URL);}  }
class C{  public final void testGetPublicExponent(){  RSAPublicKeySpec rpks=new RSAPublicKeySpec(BigInteger.valueOf(3L),BigInteger.valueOf(1234567890L));  assertTrue(BigInteger.valueOf(1234567890L).equals(rpks.getPublicExponent()));}  }
class C{  final int dec(int i){  return ((i == 0) ? items.length : i) - 1;}  }
class C{  public static String rdocify(String comment){  comment=CommentPatterns.BACK_QUOTE_PATTERN.matcher(comment).replaceAll("+");  comment=rdocifyProtoMarkdownLinks(comment);  comment=rdocifyCloudMarkdownLinks(comment);  comment=rdocifyAbsoluteMarkdownLinks(comment);  comment=rdocifyHeadline(comment);  return cleanupTrailingWhitespaces(comment);}  }
class C{  public RealmTest(){  super("CLI");}  }
class C{  @Override public void run(){  DirectoryServer.shutDown(CLASS_NAME,shutdownMessage);}  }
class C{  public void addChildPeopleContainer(PeopleContainer pc) throws AccessRightsException, EntryAlreadyExistsException, UMSException {  super.addChild(pc);}  }
class C{  public String extractPassword(Authenticator a,String secret) throws IOException {  final int valLen=((super.getOctets()[1]) & 0xFF) - 2;  final byte[] cipherText=new byte[valLen];  System.arraycopy(super.getOctets(),2,cipherText,0,valLen);  final byte[] clearText=UserPasswordAttribute.convert(cipherText,Direction.DECRYPT,secret,a);  int i=0;  for (; i < clearText.length; i++) {    if (clearText[i] == 0) {      break;    }  }  return new String(clearText,0,i,StandardCharsets.UTF_8);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  backTrail();  ServicesViewBean vb=(ServicesViewBean)getViewBean(ServicesViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  String instance=(String)getPageSessionAttribute(SERVICE_TYPE);  if (getServiceName(instance) == null) {    debug.warning("EditAuthTypeViewBean.handleButton2Request() " + "The instance " + instance + " could not be found");    AuthPropertiesModel model=getAuthModel();    returnToAuthProperties(model.getLocalizedString("no.module.instance"));  } else {    super.handleButton2Request(event);  }}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  public void putAll(Map<? extends String,? extends Object> toMerge){  if (toMerge == null) {    throw new NullPointerException("toMerge map is null");  }  for (  Map.Entry<? extends String,? extends Object> entry : toMerge.entrySet()) {    String key=entry.getKey();    checkKey(key);    put(key,entry.getValue());  }}  }
class C{  public Set createDynamicGroups(Set groupNames) throws AMException, SSOException {  Iterator iter=groupNames.iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + ((String)iter.next())+ ","+ entryDN;    AMDynamicGroupImpl groupImpl=new AMDynamicGroupImpl(token,groupDN);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  public boolean isPasswordInHistory(ByteString password){  if (!maintainHistory()) {    if (logger.isTraceEnabled()) {      logger.trace("Returning false because password history checking is disabled.");    }    return false;  }  if (passwordMatches(password)) {    if (logger.isTraceEnabled()) {      logger.trace("Returning true because the provided password is currently in use.");    }    return true;  }  TreeMap<Long,ByteString> historyMap=getSortedHistoryValues(null);  int historyCount=passwordPolicy.getPasswordHistoryCount();  if (historyCount > 0 && historyMap.size() > historyCount) {    int numToDelete=historyMap.size() - historyCount;    Iterator<Long> iterator=historyMap.keySet().iterator();    while (iterator.hasNext() && numToDelete > 0) {      iterator.next();      iterator.remove();      numToDelete--;    }  }  long historyDuration=passwordPolicy.getPasswordHistoryDuration();  if (historyDuration > 0L) {    long retainDate=currentTime - 1000 * historyDuration;    Iterator<Long> iterator=historyMap.keySet().iterator();    while (iterator.hasNext()) {      long historyDate=iterator.next();      if (historyDate >= retainDate) {        break;      }      iterator.remove();    }  }  for (  ByteString v : historyMap.values()) {    if (historyValueMatches(password,v)) {      if (logger.isTraceEnabled()) {        logger.trace("Returning true because the password is in the history.");      }      return true;    }  }  if (logger.isTraceEnabled()) {    logger.trace("Returning false because the password isn't in the history.");  }  return false;}  }
