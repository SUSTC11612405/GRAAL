class C{  public void destroy(){  super.destroy();}  }
class C{  protected void writeStyles() throws IOException {  DefaultStyledDocument styledDoc=((DefaultStyledDocument)getDocument());  Enumeration styleNames=styledDoc.getStyleNames();  while (styleNames.hasMoreElements()) {    Style s=styledDoc.getStyle((String)styleNames.nextElement());    if (s.getAttributeCount() == 1 && s.isDefined(StyleConstants.NameAttribute)) {      continue;    }    indent();    write("p." + addStyleName(s.getName()));    write(" {\n");    incrIndent();    writeAttributes(s);    decrIndent();    indent();    write("}\n");  }}  }
class C{  public static void main(String[] argv){  System.out.println("#########################################");  System.out.println("# Properties for the JAVA RpfLayer");  System.out.println("# Mandatory properties:");  System.out.println("layer.class=com.bbn.openmap.layer.rpf.RpfLayer");  System.out.println("layer.prettyName=CADRG");  System.out.println("# This property should reflect the paths to the RPF directories");  System.out.println("layer.paths=<Path to RPF dir>;/cdrom/cdrom0/RPF");  System.out.println("# Optional properties - Defaults will be set for properties not included (defaults are listed):");  System.out.println("# Number between 0-255: 0 is transparent, 255 is opaque");  System.out.println("layer.opaque=255");  System.out.println("# Number of colors to use on the maps - 16, 32, 216");  System.out.println("layer.numberColors=216");  System.out.println("# Display maps on startup");  System.out.println("layer.showMaps=true");  System.out.println("# Display attribute information on startup");  System.out.println("layer.showInfo=false");  System.out.println("# Scale images to match map scale");  System.out.println("layer.scaleImages=true");  System.out.println("# The scale factor to allow when scaling images (2x, 4x, also mean 1/2, 1/4).  Default is 4.");  System.out.println("rpf.imageScaleFactor=4");  System.out.println("# Reset the cache if layer is removed from map");  System.out.println("layer.killCache=false");  System.out.println("# Limit the display to the chart code specified. (GN, JN, ON, TP, etc.)");  System.out.println("layer.chartSeries=ANY");  System.out.println("# Set the subframe cache size. (Number of subframes to hold on to, 256x256 pixels");  System.out.println("layer.subframeCacheSize=128");  System.out.println("# Get the subframe attribute data from the frame provider.");  System.out.println("rpf.autofetchAttributes=false");  System.out.println("#If you want the coverage tool to be available");  System.out.println("layer.coverage=true");  System.out.println("#Then add coverage constants as needed.");}  }
class C{  public Clob readClob() throws SQLException {  return (Clob)getNextAttribute();}  }
class C{  protected void removeThumbnailData(){  clearThumbnailAndStrips();  mIfdDatas[IfdId.TYPE_IFD_1]=null;}  }
class C{  @Override protected void internalClear(){  this.removeAllPreviewTextures(true);  this.removeAllTextures(true);  this.removeAllHotspots(true);  super.internalClear();}  }
class C{  private void build(final ByteArrayOutputStream mimeContent) throws Exception {  try (MultipartEncoder encoder=new MultipartEncoder(mimeContent,dataBoundary)){    DateTime expireDate=new DateTime().plusSeconds(conf.getValidityIntervalSeconds());    encoder.startPart(null,new String[]{HEADER_EXPIRE_DATE + ": " + expireDate.toDateTime(DateTimeZone.UTC)});    String instance=conf.getInstance();    confDir.eachFile(null);  } }  }
class C{  public NATURAL_LEFT_JOIN NATURAL_LEFT_JOIN(String tableToJoin){  return new NATURAL_LEFT_JOIN(this,tableToJoin);}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  public CCAnimation animationByName(String animationName){  assert animationName != null : "animationName parameter must be non null";  return animations_.get(animationName);}  }
class C{  public EditorAnnotation(String text){  super(text,new Point(0,0));  this.initializeAttributes();}  }
class C{  private void runImport(ImportItem item){  item.setImporter(this);  item.run();}  }
class C{  public void flush() throws IOException {  closeStartIfNecessary();}  }
class C{  private void initData(){  this.nameList=new ArrayList<>();  List<Location> locationList=DatabaseHelper.getInstance(this).readLocation();  for (  Location l : locationList) {    nameList.add(l.location);  }  this.location=new Location(nameList.get(0),null);  this.weatherUtils=new WeatherUtils();  this.locationUtils=new LocationUtils(this);}  }
class C{  IntEntry<VALUE> removeEntryForKey(int key){  int hash=hash(key);  int i=indexFor(hash,table.length);  IntEntry<VALUE> prev=table[i];  IntEntry<VALUE> e=prev;  while (e != null) {    IntEntry<VALUE> next=e.next;    if (e.hash == hash && key == e.key) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String slotString=getString(stack);  if (slotString == null)   slotString="";  java.util.StringTokenizer toker=new java.util.StringTokenizer(slotString,";");  int slotType=0;  java.util.ArrayList slots=new java.util.ArrayList();  Agent a=(Agent)stack.pop();  while (toker.hasMoreTokens()) {    int[] ts=BigBrother.getTimeslotForString(toker.nextToken());    if (slotType == 0)     slotType=ts[0]; else     if (slotType != ts[0])     throw new IllegalArgumentException("All timeslots passed into SetFavoriteTimeslot must be of the same type!");    if (slotType != 0)     slots.add(new Integer(ts[1]));  }  int newMask=a.getAgentMask();  newMask=newMask & ~(Agent.DAYSLOT_MASK | Agent.TIMESLOT_MASK | Agent.FULLSLOT_MASK);  if (slotType == BigBrother.DAY_ALIGN)   newMask=newMask | Agent.DAYSLOT_MASK; else   if (slotType == BigBrother.TIME_ALIGN)   newMask=newMask | Agent.TIMESLOT_MASK; else   if (slotType == BigBrother.FULL_ALIGN)   newMask=newMask | Agent.FULLSLOT_MASK;  int[] rawSlots=null;  if (slots.size() > 0) {    rawSlots=new int[slots.size()];    for (int i=0; i < slots.size(); i++)     rawSlots[i]=((Integer)slots.get(i)).intValue();  }  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,a.getTitle(),a.getCategory(),a.getSubCategory(),a.getPersonObj(),a.getRole(),a.getRated(),a.getYear(),a.getPR(),a.getNetwork(),a.getChannelName(),slotType,rawSlots,a.getKeyword());    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  private void processAnsiCommand_n(){  String reply;  this.processAnsiCommand_n=true;}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  ComputingConcurrentHashMap(MapMaker builder,Function<? super K,? extends V> computingFunction){  super(builder);  this.computingFunction=checkNotNull(computingFunction);}  }
class C{  public DeclarationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static Date nextDate(final Date date,final boolean mainCycle){  Date refDate;  if (date.isNull()) {    refDate=new Settings().evaluationDate();  } else {    refDate=date;  }  int y=refDate.year();  int m=refDate.month().value();  final int offset=mainCycle ? 3 : 1;  int skipMonths=offset - (m % offset);  if (skipMonths != offset || refDate.dayOfMonth() > 21) {    skipMonths+=m;    if (skipMonths <= 12) {      m=skipMonths;    } else {      m=skipMonths - 12;      y+=1;    }  }  Date result=Date.nthWeekday(3,Weekday.Wednesday,Month.valueOf(m),y);  if (result.le(refDate)) {    result=nextDate(new Date(22,Month.valueOf(m),y),mainCycle);  }  return result;}  }
class C{  private void initAttachmentStoreDetails(Properties ctx,String trxName){  final MClient client=new MClient(ctx,this.getAD_Client_ID(),trxName);  isStoreAttachmentsOnFileSystem=client.isStoreAttachmentsOnFileSystem();  if (isStoreAttachmentsOnFileSystem) {    if (File.separatorChar == '\\') {      m_attachmentPathRoot=client.getWindowsAttachmentPath();    } else {      m_attachmentPathRoot=client.getUnixAttachmentPath();    }    if (m_attachmentPathRoot == null || "".equals(m_attachmentPathRoot)) {      log.severe("no attachmentPath defined");    } else     if (!m_attachmentPathRoot.endsWith(File.separator)) {      log.warning("attachment path doesn't end with " + File.separator);      m_attachmentPathRoot=m_attachmentPathRoot + File.separator;      log.fine(m_attachmentPathRoot);    }  }}  }
class C{  public boolean isTransparentBridge(){  return transparentBridge;}  }
class C{  protected ResultCursor processResource(final RepositoryConnection con,final TupleResultBuilder builder,final Value value,final int offset,final int limit,final boolean render) throws RDF4JException {  final ResultCursor cursor=new ResultCursor(offset,limit,render);  boolean resource=value instanceof Resource;  if (resource) {    export(con,builder,cursor,(Resource)value,null,null);    logger.debug("After subject, total = {}",cursor.getTotalResultCount());  }  if (value instanceof IRI) {    export(con,builder,cursor,null,(IRI)value,null);    logger.debug("After predicate, total = {}",cursor.getTotalResultCount());  }  if (value != null) {    export(con,builder,cursor,null,null,value);    logger.debug("After object, total = {}",cursor.getTotalResultCount());  }  if (resource) {    export(con,builder,cursor,null,null,null,(Resource)value);    logger.debug("After context, total = {}",cursor.getTotalResultCount());  }  return cursor;}  }
class C{  public static String updateAssociatedDistributor(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  GenericValue party=null;  java.net.URL ecommercePropertiesUrl=null;  try {    ecommercePropertiesUrl=((ServletContext)request.getAttribute("servletContext")).getResource("/WEB-INF/ecommerce.properties");  } catch (  java.net.MalformedURLException e) {    Debug.logWarning(e,module);  }  String store=UtilProperties.getPropertyValue(ecommercePropertiesUrl,"distributor.store.customer");  if (store == null || store.toUpperCase().startsWith("N")) {    return "success";  }  String storeOnClick=UtilProperties.getPropertyValue(ecommercePropertiesUrl,"distributor.store.onclick");  if (storeOnClick == null || storeOnClick.toUpperCase().startsWith("N")) {    return "success";  }  try {    party=userLogin == null ? null : userLogin.getRelatedOne("Party",false);  } catch (  GenericEntityException gee) {    Debug.logWarning(gee,module);  }  if (party != null) {    String currentDistributorId=getId(party,"DISTRIBUTOR");    if (UtilValidate.isEmpty(currentDistributorId)) {      String distributorId=(String)request.getSession().getAttribute(DISTRIBUTOR_ID);      if (UtilValidate.isNotEmpty(distributorId)) {        List<GenericValue> toBeStored=new LinkedList<GenericValue>();        GenericValue partyRelationship=delegator.makeValue("PartyRelationship",UtilMisc.toMap("partyIdFrom",party.getString("partyId"),"partyIdTo",distributorId,"roleTypeIdFrom","CUSTOMER","roleTypeIdTo","DISTRIBUTOR"));        partyRelationship.set("fromDate",UtilDateTime.nowTimestamp());        partyRelationship.set("partyRelationshipTypeId","DISTRIBUTION_CHANNEL");        toBeStored.add(partyRelationship);        toBeStored.add(delegator.makeValue("Party",UtilMisc.toMap("partyId",distributorId)));        toBeStored.add(delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",distributorId,"roleTypeId","DISTRIBUTOR")));        try {          delegator.storeAll(toBeStored);          if (Debug.infoOn())           Debug.logInfo("Distributor for user " + party.getString("partyId") + " set to "+ distributorId,module);        } catch (        GenericEntityException gee) {          Debug.logWarning(gee,module);        }      } else {        Debug.logInfo("No distributor in session or already associated with user " + userLogin.getString("partyId"),module);        return "success";      }    } else {      request.getSession().setAttribute(DISTRIBUTOR_ID,currentDistributorId);    }    return "success";  } else {    Debug.logWarning("Cannot associate distributor since not logged in yet",module);    return "success";  }}  }
class C{  public SQLFeatureNotSupportedException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static NamedValue parse(String string,String separator) throws MessageFormatException {  String[] parts=string.split(separator,2);  if (parts.length == 2) {    String sep=string.substring(parts[0].length(),string.length() - parts[1].length());    return new NamedValue(parts[0],sep,parts[1]);  } else   if (parts.length == 1) {    if (parts[0].length() < string.length()) {      String sep=string.substring(parts[0].length(),string.length());      return new NamedValue(parts[0],sep,"");    } else {      return new NamedValue(parts[0],null,null);    }  }  throw new MessageFormatException("Error parsing '" + string + "' into a NamedValue using '"+ separator+ "'");}  }
class C{  public static <T,V>Function<T,V> cast(Function<T,V> function){  return function;}  }
class C{  public static Integer[] valuesOf(int[] array){  Integer[] dest=new Integer[array.length];  for (int i=0; i < array.length; i++) {    dest[i]=Integer.valueOf(array[i]);  }  return dest;}  }
class C{  private void advanceBarrier(){  if (currentNode != null) {    currentNode.setSortMarker(Integer.MIN_VALUE);  }  if ((currentNode == barrier) && (barrier != null)) {    barrier=barrier.getSortedNext(forward);  }}  }
class C{  @Override void addEntry(int hash,K key,V value,int bucketIndex){  super.addEntry(hash,key,value,bucketIndex);  Entry<K,V> eldest=header.after;  if (removeEldestEntry(eldest)) {    removeEntryForKey(eldest.key);  }}  }
class C{  public void writeAttrURI(final java.io.Writer writer,String string,boolean doURLEscaping) throws IOException {  final int end=string.length();  if (end > m_attrBuff.length) {    m_attrBuff=new char[end * 2 + 1];  }  string.getChars(0,end,m_attrBuff,0);  final char[] chars=m_attrBuff;  int cleanStart=0;  int cleanLength=0;  char ch=0;  for (int i=0; i < end; i++) {    ch=chars[i];    if ((ch < 32) || (ch > 126)) {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      if (doURLEscaping) {        if (ch <= 0x7F) {          writer.write('%');          writer.write(makeHHString(ch));        } else         if (ch <= 0x7FF) {          int high=(ch >> 6) | 0xC0;          int low=(ch & 0x3F) | 0x80;          writer.write('%');          writer.write(makeHHString(high));          writer.write('%');          writer.write(makeHHString(low));        } else         if (Encodings.isHighUTF16Surrogate(ch)) {          int highSurrogate=((int)ch) & 0x03FF;          int wwww=((highSurrogate & 0x03C0) >> 6);          int uuuuu=wwww + 1;          int zzzz=(highSurrogate & 0x003C) >> 2;          int yyyyyy=((highSurrogate & 0x0003) << 4) & 0x30;          ch=chars[++i];          int lowSurrogate=((int)ch) & 0x03FF;          yyyyyy=yyyyyy | ((lowSurrogate & 0x03C0) >> 6);          int xxxxxx=(lowSurrogate & 0x003F);          int byte1=0xF0 | (uuuuu >> 2);          int byte2=0x80 | (((uuuuu & 0x03) << 4) & 0x30) | zzzz;          int byte3=0x80 | yyyyyy;          int byte4=0x80 | xxxxxx;          writer.write('%');          writer.write(makeHHString(byte1));          writer.write('%');          writer.write(makeHHString(byte2));          writer.write('%');          writer.write(makeHHString(byte3));          writer.write('%');          writer.write(makeHHString(byte4));        } else {          int high=(ch >> 12) | 0xE0;          int middle=((ch & 0x0FC0) >> 6) | 0x80;          int low=(ch & 0x3F) | 0x80;          writer.write('%');          writer.write(makeHHString(high));          writer.write('%');          writer.write(makeHHString(middle));          writer.write('%');          writer.write(makeHHString(low));        }      } else       if (escapingNotNeeded(ch)) {        writer.write(ch);      } else {        writer.write("&#");        writer.write(Integer.toString(ch));        writer.write(';');      }      cleanStart=i + 1;    } else     if (ch == '"') {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      if (doURLEscaping)       writer.write("%22"); else       writer.write("&quot;");      cleanStart=i + 1;    } else     if (ch == '&') {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      writer.write("&amp;");      cleanStart=i + 1;    } else {      cleanLength++;    }  }  if (cleanLength > 1) {    if (cleanStart == 0)     writer.write(string); else     writer.write(chars,cleanStart,cleanLength);  } else   if (cleanLength == 1) {    writer.write(ch);  }}  }
class C{  protected void initIntensity(double intensity){  maxDimStep=tc.getNumberOfIntensitySteps();  if (intensity <= 0.5) {    X10Sequence out=new X10Sequence();    out.addAddress(housecode,devicecode);    out.addFunction(housecode,X10Sequence.FUNCTION_OFF,0);    out.addFunction(housecode,X10Sequence.FUNCTION_DIM,maxDimStep);    tc.sendX10Sequence(out,null);    lastOutputStep=0;    if (log.isDebugEnabled()) {      log.debug("initIntensity: sent dim reset");    }  } else {    X10Sequence out=new X10Sequence();    out.addAddress(housecode,devicecode);    out.addFunction(housecode,X10Sequence.FUNCTION_ON,0);    out.addFunction(housecode,X10Sequence.FUNCTION_BRIGHT,maxDimStep);    tc.sendX10Sequence(out,null);    lastOutputStep=maxDimStep;    if (log.isDebugEnabled()) {      log.debug("initIntensity: sent bright reset");    }  }}  }
class C{  public int read(char ch[],int offset,int length) throws IOException {  int out=offset;  if (fSurrogate != -1) {    ch[offset + 1]=(char)fSurrogate;    fSurrogate=-1;    length--;    out++;  }  int count=0;  if (fOffset == 0) {    if (length > fBuffer.length) {      length=fBuffer.length;    }    count=fInputStream.read(fBuffer,0,length);    if (count == -1) {      return -1;    }    count+=out - offset;  } else {    count=fOffset;    fOffset=0;  }  final int total=count;  for (int in=0; in < total; in++) {    int b0=fBuffer[in] & 0x00FF;    if (b0 < 0x80) {      ch[out++]=(char)b0;      continue;    }    if ((b0 & 0xE0) == 0xC0) {      int b1=-1;      if (++in < total) {        b1=fBuffer[in] & 0x00FF;      } else {        b1=fInputStream.read();        if (b1 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fOffset=1;            return out - offset;          }          expectedByte(2,2);        }        count++;      }      if ((b1 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fOffset=2;          return out - offset;        }        invalidByte(2,2,b1);      }      int c=((b0 << 6) & 0x07C0) | (b1 & 0x003F);      ch[out++]=(char)c;      count-=1;      continue;    }    if ((b0 & 0xF0) == 0xE0) {      int b1=-1;      if (++in < total) {        b1=fBuffer[in] & 0x00FF;      } else {        b1=fInputStream.read();        if (b1 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fOffset=1;            return out - offset;          }          expectedByte(2,3);        }        count++;      }      if ((b1 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fOffset=2;          return out - offset;        }        invalidByte(2,3,b1);      }      int b2=-1;      if (++in < total) {        b2=fBuffer[in] & 0x00FF;      } else {        b2=fInputStream.read();        if (b2 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fBuffer[1]=(byte)b1;            fOffset=2;            return out - offset;          }          expectedByte(3,3);        }        count++;      }      if ((b2 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fBuffer[2]=(byte)b2;          fOffset=3;          return out - offset;        }        invalidByte(3,3,b2);      }      int c=((b0 << 12) & 0xF000) | ((b1 << 6) & 0x0FC0) | (b2 & 0x003F);      ch[out++]=(char)c;      count-=2;      continue;    }    if ((b0 & 0xF8) == 0xF0) {      int b1=-1;      if (++in < total) {        b1=fBuffer[in] & 0x00FF;      } else {        b1=fInputStream.read();        if (b1 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fOffset=1;            return out - offset;          }          expectedByte(2,4);        }        count++;      }      if ((b1 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fOffset=2;          return out - offset;        }        invalidByte(2,4,b1);      }      int b2=-1;      if (++in < total) {        b2=fBuffer[in] & 0x00FF;      } else {        b2=fInputStream.read();        if (b2 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fBuffer[1]=(byte)b1;            fOffset=2;            return out - offset;          }          expectedByte(3,4);        }        count++;      }      if ((b2 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fBuffer[2]=(byte)b2;          fOffset=3;          return out - offset;        }        invalidByte(3,4,b2);      }      int b3=-1;      if (++in < total) {        b3=fBuffer[in] & 0x00FF;      } else {        b3=fInputStream.read();        if (b3 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fBuffer[1]=(byte)b1;            fBuffer[2]=(byte)b2;            fOffset=3;            return out - offset;          }          expectedByte(4,4);        }        count++;      }      if ((b3 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fBuffer[2]=(byte)b2;          fBuffer[3]=(byte)b3;          fOffset=4;          return out - offset;        }        invalidByte(4,4,b2);      }      int uuuuu=((b0 << 2) & 0x001C) | ((b1 >> 4) & 0x0003);      if (uuuuu > 0x10) {        invalidSurrogate(uuuuu);      }      int wwww=uuuuu - 1;      int zzzz=b1 & 0x000F;      int yyyyyy=b2 & 0x003F;      int xxxxxx=b3 & 0x003F;      int hs=0xD800 | ((wwww << 6) & 0x03C0) | (zzzz << 2)| (yyyyyy >> 4);      int ls=0xDC00 | ((yyyyyy << 6) & 0x03C0) | xxxxxx;      ch[out++]=(char)hs;      ch[out++]=(char)ls;      count-=2;      continue;    }    if (out > offset) {      fBuffer[0]=(byte)b0;      fOffset=1;      return out - offset;    }    invalidByte(1,1,b0);  }  return count;}  }
class C{  public static String canonicalClassName(Class<?> c,Class<?> parent){  if (parent == null) {    return canonicalClassName(c,null,ELKIServiceRegistry.FACTORY_POSTFIX);  }  return canonicalClassName(c,parent.getPackage(),ELKIServiceRegistry.FACTORY_POSTFIX);}  }
class C{  public YearMonthDay addToCopy(int valueToAdd){  int[] newValues=iYearMonthDay.getValues();  newValues=getField().add(iYearMonthDay,iFieldIndex,newValues,valueToAdd);  return new YearMonthDay(iYearMonthDay,newValues);}  }
class C{  protected GenericEntityReference(){}  }
class C{  public void goBackBusquedaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  Boolean showInformeBusqueda=(Boolean)getFromTemporalSession(request,Constants.SHOW_INFORME_BUSQUEDA_BUTTON);  InvocationStack invocationStack=getInvocationStack(request);  ClientInvocation lastClientReturnPoint=invocationStack.goBackClientInvocation(request);  if (Boolean.TRUE.equals(showInformeBusqueda)) {    setInTemporalSession(request,Constants.SHOW_INFORME_BUSQUEDA_BUTTON,Boolean.TRUE);  }  if ((lastClientReturnPoint != null) && (lastClientReturnPoint == invocationStack.getHome())) {    String uri="/action/homepage?method=loadBandeja";    uri=ClientInvocationUtils.getInvocationURIWithoutEmptyParameters(uri,invocationStack.getHome().getAddedParams());    setReturnActionFordward(request,new ActionForward(uri,true));  } else {    ActionRedirect redirect=new ActionRedirect(new ActionForward(lastClientReturnPoint.getInvocationURI(),true),true);    if (lastClientReturnPoint.getTreeView() != null) {      redirect.addParameter(Constants.TREE_VIEW_RELOAD,Boolean.TRUE);    }    setReturnActionFordward(request,redirect);  }}  }
class C{  public ResultKey(String algorithm,String problem){  super();  this.algorithm=algorithm;  this.problem=problem;}  }
class C{  public void initialize(Context context,TimePickerController controller,boolean hasInnerCircle,boolean disappearsOut,int selectionDegrees,boolean isInnerCircle){  if (mIsInitialized) {    Log.e(TAG,"This RadialSelectorView may only be initialized once.");    return;  }  Resources res=context.getResources();  int accentColor=controller.getAccentColor();  mPaint.setColor(accentColor);  mPaint.setAntiAlias(true);  mSelectionAlpha=controller.isThemeDark() ? SELECTED_ALPHA_THEME_DARK : SELECTED_ALPHA;  mIs24HourMode=controller.is24HourMode();  if (mIs24HourMode) {    mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_circle_radius_multiplier_24HourMode));  } else {    mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_circle_radius_multiplier));    mAmPmCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_ampm_circle_radius_multiplier));  }  mHasInnerCircle=hasInnerCircle;  if (hasInnerCircle) {    mInnerNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_numbers_radius_multiplier_inner));    mOuterNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_numbers_radius_multiplier_outer));  } else {    mNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_numbers_radius_multiplier_normal));  }  mSelectionRadiusMultiplier=Float.parseFloat(res.getString(R.string.mdtp_selection_radius_multiplier));  mAnimationRadiusMultiplier=1;  mTransitionMidRadiusMultiplier=1f + (0.05f * (disappearsOut ? -1 : 1));  mTransitionEndRadiusMultiplier=1f + (0.3f * (disappearsOut ? 1 : -1));  mInvalidateUpdateListener=new InvalidateUpdateListener();  setSelection(selectionDegrees,isInnerCircle,false);  mIsInitialized=true;}  }
class C{  @Override public void handleMessage(final Message msg){switch (msg.what) {case MSG_PREVIEW_START:    mThread.startPreview(msg.arg1,msg.arg2);  break;case MSG_PREVIEW_STOP:mThread.stopPreview();synchronized (this) {notifyAll();}Looper.myLooper().quit();mThread=null;break;default :throw new RuntimeException("unknown message:what=" + msg.what);}}  }
class C{  void abortPasteItems(){  if (log.isDebugEnabled()) {    log.debug("abortPasteItems: _selectionGroup{}",_selectionGroup == null ? "=null" : (".size=" + _selectionGroup.size()));  }  if (_selectionGroup != null) {    for (    Positionable comp : _selectionGroup) {      comp.setVisible(false);      comp.remove();    }  }  deselectSelectionGroup();  _pastePending=false;}  }
class C{  private static void divide(int[] n1,int[] n2,int[] quotient,int[] remainder){  if (isZero(n2)) {    throw new ArithmeticException("Divide by Zero");  }  clear(remainder);  clear(quotient);  if (compareTo(n2,n1) > 0) {    int idx=remainder.length - 1;    for (int i=0; i < n1.length; i++) {      remainder[idx--]=n1[i];    }    return;  }  n1=reduce(n1);  n2=reduce(n2);  while (compareTo(n2,0,n2.length,n1,0) > 0) {    n2=expand(n2);  }  String result=subProcess(n1,n2);  int idx=result.indexOf("+");  if (idx == -1) {    for (int i=0; i < quotient.length; i++) {      quotient[i]=0;    }    pack(remainder,result);  } else {    pack(quotient,result.substring(0,idx));    pack(remainder,result.substring(idx + 1));  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>AssociationFunction<T> association(Association<T> association){  return ((AssociationReferenceHandler<T>)Proxy.getInvocationHandler(association)).association();}  }
class C{  public static void main(String[] args){  String inputFile="cfg-input.java";  String outputDir="cfg";  String method="test";  String clazz="Test";  ConstantPropagationTransfer transfer=new ConstantPropagationTransfer();  Analysis<Constant,ConstantPropagationStore,ConstantPropagationTransfer> analysis=new Analysis<>(null,transfer);  JavaSource2CFGDOT.generateDOTofCFG(inputFile,outputDir,method,clazz,true,analysis);}  }
class C{  @Override public void addAttribute(String name,String value){  if (value != null) {    current.setAttribute(name,value);  }}  }
class C{  public DirectShardManagerClient(Config config){  this.config=config;  config.registerForUpdates(null);}  }
class C{  public static boolean isTheSameDate(long dateLong1,long dateLong2){  dateLong1=getDayStartLong(dateLong1);  dateLong2=getDayStartLong(dateLong2);  return dateLong1 == dateLong2;}  }
class C{  protected void postorder(TreeNode<E> root){  if (root == null)   return;  postorder(root.left);  postorder(root.right);  System.out.print(root.element + " ");}  }
class C{  public void testIntegration3(){  boolean res;  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  String originalAppIdName=mAppIdName;  String originalContentTypeName=mContentTypeName;  String originalClassName=mClassName;  byte[] originalMessageBody=mMessageBody;  Random rd=new Random();  IWapPushManager iwapman=getInterface();  IDataVerify dataverify=getVerifyInterface();  mClassName="com.android.smspush.unitTests.ReceiverService";  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {    mAppIdName=OMA_APPLICATION_ID_NAMES[i];    mContentTypeValue=rd.nextInt(0x0FFF);    mMessageBody=new byte[100 + rd.nextInt(100)];    rd.nextBytes(mMessageBody);    byte[] pdu=createPDU(6);    byte[] wappushPdu=retrieveWspBody();    try {      dataverify.resetData();      if (isContentTypeMapped(mContentTypeValue)) {        mContentTypeName=getContentTypeName(mContentTypeValue);        Log.d(LOG_TAG,"mContentTypeValue mapping " + mContentTypeValue + ":"+ mContentTypeName);      } else {        mContentTypeName=Integer.toString(mContentTypeValue);      }      iwapman.addPackage(mAppIdName,mContentTypeName,mPackageName,mClassName,WapPushManagerParams.APP_TYPE_SERVICE,false,false);      dispatchWapPdu(wappushPdu,iwapman);      iwapman.deletePackage(mAppIdName,mContentTypeName,mPackageName,mClassName);      if (mContentTypeName.equals(WspTypeDecoder.CONTENT_TYPE_B_PUSH_CO)) {        assertTrue(dataverify.verifyData(wappushPdu));      } else {        assertTrue(dataverify.verifyData(mMessageBody));      }    } catch (    RemoteException e) {    }  }  mClassName=originalClassName;  mAppIdName=originalAppIdName;  mContentTypeName=originalContentTypeName;  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;  mMessageBody=originalMessageBody;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.213 -0500",hash_original_method="C775BDC9F3E1BDD0956086FF7A6B9FE1",hash_generated_method="77A4000D5E4B0EB1242736CCFCFCDD77") public static void main(String args[]) throws ParseException {  String r[]={"P-Charging-Function-Addresses: ccf=\"test str\"; ecf=token\n","P-Charging-Function-Addresses: ccf=192.1.1.1; ccf=192.1.1.2; ecf=192.1.1.3; ecf=192.1.1.4\n","P-Charging-Function-Addresses: ccf=[5555::b99:c88:d77:e66]; ccf=[5555::a55:b44:c33:d22]; " + "ecf=[5555::1ff:2ee:3dd:4cc]; ecf=[5555::6aa:7bb:8cc:9dd]\n"};  for (int i=0; i < r.length; i++) {    PChargingFunctionAddressesParser parser=new PChargingFunctionAddressesParser(r[i]);    System.out.println("original = " + r[i]);    PChargingFunctionAddresses chargAddr=(PChargingFunctionAddresses)parser.parse();    System.out.println("encoded = " + chargAddr.encode());  }}  }
class C{  @Override public String toString(){  if (type == NUM) {    return "NUM: " + value;  } else   if (type == CMD) {    return "CMD: " + name;  } else   if (type == UNK) {    return "UNK";  } else   if (type == EOF) {    return "EOF";  } else   if (type == NAME) {    return "NAME: " + name;  } else   if (type == CMD) {    return "CMD: " + name;  } else   if (type == STR) {    return "STR: (" + name;  } else   if (type == ARYB) {    return "ARY [";  } else   if (type == ARYE) {    return "ARY ]";  } else {    return "some kind of brace (" + type + ")";  }}  }
class C{  protected void init(){}  }
class C{  public static boolean isLevelAll(){  return Level.ALL.intValue() == s_currentLevel.intValue();}  }
class C{  public GenericClass(Class<?> clazz){  this.type=addTypeParameters(clazz);  this.rawClass=clazz;}  }
class C{  protected void forceSetComponentCount(int count){  mComponentCountActual=count;}  }
class C{  @Override public void closeImpl() throws IOException {  unlock();  _fileChannel=null;  RandomAccessFile file=_file;  _file=null;  if (file != null)   file.close();}  }
class C{  public void joinChannel(String channel){  checkArgument(StringUtils.isNotBlank(channel),"Channel '%s' is blank",channel);  bot.sendRaw().rawLine("JOIN " + channel);}  }
class C{  void paintLayeredHighlights(Graphics g,int p0,int p1,Shape viewBounds,JTextComponent editor,View view){  int start=getStartOffset();  int end=getEndOffset();  p0=Math.max(start,p0);  p1=Math.min(end,p1);  union(((LayeredHighlighter.LayerPainter)painter).paintLayer(g,p0,p1,viewBounds,editor,view));}  }
class C{  public void clearTuner(){  if (mTuner != null) {    mTuner.getTunerController().removeListener(this);    mTuner.removeListener((Listener<ComplexBuffer>)mDFTProcessor);    mTuner=null;  }}  }
class C{  public void exhaustiveSearch(int lag){  double[] entropies=new double[ngenes];  for (int g=0; g < ngenes; g++) {    entropies[g]=re.entropy(g,lag);  }  int[][] ct=null;  for (int child=0; child < ngenes; child++) {    System.out.println("Crosstabs of gene " + child);    for (int parent=0; parent < ngenes; parent++) {      if (parent == child) {        continue;      }      ct=re.crossTab(child,parent,lag);      System.out.println("with parent " + parent + " at lag "+ lag);      System.out.println("  " + ct[0][0] + " "+ ct[0][1]);      System.out.println("  " + ct[1][0] + " "+ ct[1][1]);    }  }  int[][] parents=new int[ngenes][];  double[] best1=new double[ngenes];  double[] best2=new double[ngenes];  double[] best3=new double[ngenes];  int[] p=new int[1];  for (int child=0; child < ngenes; child++) {    System.out.println("For gene " + child);    best1[child]=-1.0;    for (int i=0; i < ngenes; i++) {      p[0]=i;      double m=re.mutualInformation(child,p,lag);      double me=m / entropies[child];      if (me > best1[child]) {        best1[child]=me;        parents[child]=new int[1];        parents[child][0]=i;      }      System.out.println("for parent = " + i + " m = "+ m+ " m/e = "+ me);    }  }  int[] pp=new int[2];  for (int child=0; child < ngenes; child++) {    System.out.println("For gene " + child);    best2[child]=-1.0;    for (int p1=0; p1 < ngenes; p1++) {      for (int p2=0; p2 < ngenes && p1 != p2; p2++) {        pp[0]=p1;        pp[1]=p2;        double mm=re.mutualInformation(child,pp,lag);        double mme=mm / entropies[child];        if (mme > best2[child] && mme > best1[child]) {          best2[child]=mme;          parents[child]=new int[2];          parents[child][0]=p1;          parents[child][1]=p2;        }        System.out.println("for parents = " + p1 + ","+ p2+ " m = "+ mm+ " m/e = "+ mme);      }    }  }  int[] ppp=new int[3];  for (int child=0; child < ngenes; child++) {    best3[child]=-1.0;    System.out.println("For gene " + child);    for (int p1=0; p1 < ngenes; p1++) {      for (int p2=0; p2 < ngenes && p2 != p1; p2++) {        for (int p3=0; p3 < ngenes && p3 != p2 && p3 != p1; p3++) {          ppp[0]=p1;          ppp[1]=p2;          ppp[2]=p3;          double mmm=re.mutualInformation(child,ppp,lag);          double mmme=mmm / entropies[child];          if (mmme > best3[child] && mmme > best2[child] && mmme > best1[child]) {            best3[child]=mmme;            parents[child]=new int[3];            parents[child][0]=p1;            parents[child][1]=p2;            parents[child][2]=p3;          }          System.out.println("for parents = " + p1 + ","+ p2+ ","+ p3+ " m = "+ mmm+ " m/e = "+ mmme);        }      }    }  }  for (int gene=0; gene < ngenes; gene++) {    System.out.println("Parents of gene " + gene);    for (int par=0; par < parents[gene].length; par++) {      System.out.print(parents[gene][par] + " ");    }    System.out.println();  }  int[][] lags=new int[ngenes][];  for (int i=0; i < ngenes; i++) {    int k=parents[i].length;    lags[i]=new int[k];    for (int j=0; j < k; j++) {      lags[i][j]=1;    }  }  RevealOutputGraph log=new RevealOutputGraph(ngenes,parents,lags,names,"TestReveal");}  }
class C{  public CopyService(final IProgressObserver progressObserver,final CnATreeElement group,final List<CnATreeElement> elementList,final boolean copyLinks){  this.progressObserver=progressObserver;  this.selectedGroup=group;  this.elements=elementList;  this.copyLinks=copyLinks;}  }
class C{  public SVGRasterizer(Reader reader){  this.input=new TranscoderInput(reader);}  }
class C{  public static long readLong(){  long x=0;  for (int i=0; i < 8; i++) {    char c=readChar();    x<<=8;    x|=c;  }  return x;}  }
class C{  protected InteractiveBrokersBroker(){}  }
class C{  @DSComment("Private Method") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.295 -0500",hash_original_method="1E13D8D8B85E56AF9BB58282CB9C7392",hash_generated_method="0FE0075551BE07BF37B703967428CA6E") private Matcher reset(CharSequence input,int start,int end){  if (input == null) {    throw new IllegalArgumentException();  }  if (start < 0 || end < 0 || start > input.length() || end > input.length() || start > end) {    throw new IndexOutOfBoundsException();  }  this.input=input.toString();  this.regionStart=start;  this.regionEnd=end;  resetForInput();  matchFound=false;  findPos=regionStart;  appendPos=0;  return this;}  }
class C{  DirectArrayOfDoublesQuickSelectSketch(final Memory mem,final long seed){  super(mem.getByte(NUM_VALUES_BYTE),seed);  mem_=mem;  SerializerDeserializer.validateFamily(mem.getByte(FAMILY_ID_BYTE),mem.getByte(PREAMBLE_LONGS_BYTE));  SerializerDeserializer.validateType(mem_.getByte(SKETCH_TYPE_BYTE),SerializerDeserializer.SketchType.ArrayOfDoublesQuickSelectSketch);  final byte version=mem_.getByte(SERIAL_VERSION_BYTE);  if (version != serialVersionUID) {    throw new SketchesArgumentException("Serial version mismatch. Expected: " + serialVersionUID + ", actual: "+ version);  }  final boolean isBigEndian=mem.isAllBitsSet(FLAGS_BYTE,(byte)(1 << Flags.IS_BIG_ENDIAN.ordinal()));  if (isBigEndian ^ ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN)) {    throw new SketchesArgumentException("Byte order mismatch");  }  Util.checkSeedHashes(mem.getShort(SEED_HASH_SHORT),Util.computeSeedHash(seed));  keysOffset_=ENTRIES_START;  valuesOffset_=keysOffset_ + SIZE_OF_KEY_BYTES * getCurrentCapacity();  lgCurrentCapacity_=Integer.numberOfTrailingZeros(getCurrentCapacity());  theta_=mem_.getLong(THETA_LONG);  isEmpty_=mem_.isAllBitsSet(FLAGS_BYTE,(byte)(1 << Flags.IS_EMPTY.ordinal()));  setRebuildThreshold();}  }
class C{  public void shuffle(Random rand){  for (int i=_pos; i-- > 1; ) {    swap(i,rand.nextInt(i));  }}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (eventName.compareTo("dataSet") == 0 && (m_dataProvider != null)) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.386 -0400",hash_original_method="87E4447E26C3107C6DF2678BD461EF96",hash_generated_method="B0D9B1E23058F28E118D0AED26ABE5C9") @DSSink(DSSinkKind.ENCODER) public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  protected SimpleSelector parseSimpleSelector(){  SimpleSelector result;  String uri=defaultNamespace;  int currentLineNumber=getLineNumber();switch (current) {case LexicalUnits.IDENTIFIER:    String name=scanner.getStringValue();  next();if (current == LexicalUnits.NAMESPACE_QUALIFIED) {  if (name == null || "".equals(name))   uri=""; else   if ("*".equals(name))   uri=null; else {    uri=(String)namespaces.get(name);    if (uri == null) {      errorHandler.error(createCSSParseException("unresolved.namespace"));    }  }  next();  name=scanner.getStringValue();  next();}result=selectorFactory.createElementSelector(uri,name);break;case LexicalUnits.ANY:next();default :result=selectorFactory.createElementSelector(uri,null);}if (result != null) {if (result instanceof AbstractSelector) {((AbstractSelector)result).setLineNumber(currentLineNumber);}}Condition cond=null;loop: for (; ; ) {Condition c=null;switch (current) {case LexicalUnits.HASH:c=conditionFactory.createIdCondition(scanner.getStringValue());next();break;case LexicalUnits.DOT:if (next() != LexicalUnits.IDENTIFIER) {throw createCSSParseException("identifier");}c=conditionFactory.createClassCondition(null,scanner.getStringValue());next();break;case LexicalUnits.LEFT_BRACKET:if (nextIgnoreSpaces() != LexicalUnits.IDENTIFIER) {throw createCSSParseException("identifier");}String name=scanner.getStringValue();int op=nextIgnoreSpaces();switch (op) {default :throw createCSSParseException("right.bracket");case LexicalUnits.RIGHT_BRACKET:nextIgnoreSpaces();c=conditionFactory.createAttributeCondition(name,null,false,null);break;case LexicalUnits.EQUAL:case LexicalUnits.INCLUDES:case LexicalUnits.DASHMATCH:String val=null;switch (nextIgnoreSpaces()) {default :throw createCSSParseException("identifier.or.string");case LexicalUnits.STRING:case LexicalUnits.IDENTIFIER:val=scanner.getStringValue();nextIgnoreSpaces();}if (current != LexicalUnits.RIGHT_BRACKET) {throw createCSSParseException("right.bracket");}next();switch (op) {case LexicalUnits.EQUAL:c=conditionFactory.createAttributeCondition(name,null,false,val);break;case LexicalUnits.INCLUDES:c=conditionFactory.createOneOfAttributeCondition(name,null,false,val);break;default :c=conditionFactory.createBeginHyphenAttributeCondition(name,null,false,val);}}break;case LexicalUnits.COLON:switch (nextIgnoreSpaces()) {case LexicalUnits.IDENTIFIER:String val=scanner.getStringValue();if (isPseudoElement(val)) {if (pseudoElement != null) {throw createCSSParseException("duplicate.pseudo.element");}pseudoElement=val;} else {c=conditionFactory.createPseudoClassCondition(null,val);}next();break;case LexicalUnits.FUNCTION:String func=scanner.getStringValue();if (nextIgnoreSpaces() != LexicalUnits.IDENTIFIER) {throw createCSSParseException("identifier");}String lang=scanner.getStringValue();if (nextIgnoreSpaces() != LexicalUnits.RIGHT_BRACE) {throw createCSSParseException("right.brace");}if (!func.equalsIgnoreCase("lang")) {throw createCSSParseException("pseudo.function");}c=conditionFactory.createLangCondition(lang);next();break;default :throw createCSSParseException("identifier");}break;default :break loop;}if (c != null) {if (cond == null) {cond=c;} else {cond=conditionFactory.createAndCondition(cond,c);}}}skipSpaces();if (cond != null) {result=selectorFactory.createConditionalSelector(result,cond);}return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addUdocsExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DivisionFraccionSeriePO divisionFSVO=(DivisionFraccionSeriePO)getFromTemporalSession(request,FondosConstants.DIVISION_FRACCION_SERIE);  if (divisionFSVO.getNivelDocumental().getSubtipo() == ElementoCuadroClasificacion.SUBTIPO_CAJA)   saveCurrentInvocation(KeysClientsInvocations.CUADRO_NUEVA_FS_EN_DIVISIONFS,request); else   saveCurrentInvocation(KeysClientsInvocations.CUADRO_NUEVA_UDOC_EN_DIVISIONFS,request);  setInTemporalSession(request,FondosConstants.BANDERA_CREACION_EDICION,FondosConstants.VALOR_BANDERA_CREACION);  setReturnActionFordward(request,mappings.findForward("edicion_udocEnFS"));}  }
class C{  public void testGetF20(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF20();  assertEquals(expResult,result);}  }
class C{  @Override public String toString(){  final StringBuilder b=new StringBuilder(this.getClass().getName());  b.append(":");  if (rmiServer != null) {    b.append(" rmiServer=").append(rmiServer.toString());  }  if (jmxServiceURL != null) {    if (rmiServer != null)     b.append(",");    b.append(" jmxServiceURL=").append(jmxServiceURL.toString());  }  return b.toString();}  }
class C{  protected RawMemcacheClient connectRaw(boolean binary){  List<HostAndPort> addresses=this.addresses;  RawMemcacheClient client;  if (srvRecord != null) {    if (addresses != null) {      throw new IllegalStateException("You may not specify both srvRecord and addresses");    }    client=createSRVClient(binary);  } else {    if (addresses == null) {      addresses=ImmutableList.of(HostAndPort.fromParts(DEFAULT_HOSTNAME,DEFAULT_PORT));    }    final List<RawMemcacheClient> clients=createClients(addresses,binary);    if (addresses.size() > 1) {      checkState(clients.size() == addresses.size());      final List<AddressAndClient> aac=Lists.newArrayListWithCapacity(clients.size());      for (int i=0; i < clients.size(); i++) {        final HostAndPort address=addresses.get(i);        aac.add(new AddressAndClient(address,clients.get(i)));      }      client=new KetamaMemcacheClient(aac);    } else {      client=clients.get(0);    }  }  if (retry) {    return new RetryingClient(client);  }  return client;}  }
class C{  public boolean isFragmentizerEnabled(){  return fragmentizerEnabled;}  }
class C{  String alligator(){  List<TypeParameterElement> allParameters=allParameters();  if (allParameters.isEmpty()) {    return "";  }  StringBuilder alligator=new StringBuilder("<");  joinOn(alligator,", ",allParameters);  return alligator.append(">").toString();}  }
class C{  public BooleanPanel(){  initComponents();}  }
class C{  private stendhal(){}  }
class C{  public ObjectFactory(){}  }
class C{  protected void recycleExistingPanel(String id,Map settings,JComponent panel){  provider.recycle(id,controller,settings,panel);}  }
class C{  public static boolean isValidIPv6(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ":";  boolean doubleColonFound=false;  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf(':',start)) >= start) {    if (octets == 8) {      return false;    }    if (start != pos) {      String value=temp.substring(start,pos);      if (pos == (temp.length() - 1) && value.indexOf('.') > 0) {        if (!isValidIPv4(value)) {          return false;        }        octets++;      } else {        try {          octet=Integer.parseInt(temp.substring(start,pos),16);        } catch (        NumberFormatException ex) {          return false;        }        if (octet < 0 || octet > 0xffff) {          return false;        }      }    } else {      if (pos != 1 && pos != temp.length() - 1 && doubleColonFound) {        return false;      }      doubleColonFound=true;    }    start=pos + 1;    octets++;  }  return octets == 8 || doubleColonFound;}  }
class C{  public boolean isExiting(){  return mFocusState == FocusState.STATE_FADE_OUT || mFocusState == FocusState.STATE_HARD_STOP;}  }
class C{  public void unload(){  if (latch.getCount() > 0) {    unloadDetected=true;    latch.countDown();  }}  }
class C{  @Override public VasaProviderInfo registerVASACertificate(String username,String password,String certificateStr) throws InvalidCertificate, InvalidLogin, InvalidSession, StorageFault {  final String methodName="registerVASACertificate() :";  log.debug(methodName + "Entry with inputs username[" + username+ "] password["+ (password != null ? "****" : null)+ "] certificateStr["+ (certificateStr != null ? "****" : null)+ "]");  try {    _sosManager=new SOSManager();    _sosManager.verifyLoginCredentials(username,password);    log.debug(methodName + "Valid username and password. User credentials accepted.");    String clientAddress=_sslUtil.checkHttpRequest(false,false);    X509Certificate x509Cert=(X509Certificate)_sslUtil.buildCertificate(certificateStr);    x509Cert.checkValidity();    if (!_sslUtil.certificateIsTrusted((Certificate)x509Cert)) {      _sslUtil.addCertificateToTrustStore(clientAddress,(Certificate)x509Cert);      log.trace(methodName + "new certificate added as trusted");      _sslUtil.refreshTrustStore();      invalidateSession();    } else {      log.trace(methodName + "certificate was already trusted");    }    log.trace(methodName + "vpInfo: defaultNameSpace[" + _vpInfo.getDefaultNamespace()+ "] name["+ _vpInfo.getName()+ "] sessionId["+ _vpInfo.getSessionId()+ " vasaApiVersion["+ _vpInfo.getVasaApiVersion()+ "] vasaProviderVersion["+ _vpInfo.getVasaProviderVersion()+ "]");    log.debug(methodName + "Exit returning vpInfo");    return _vpInfo;  } catch (  InvalidSession is) {    log.error(methodName + "Session is invalid",is);    throw is;  }catch (  InvalidCertificate ic) {    log.error(methodName + "Certificate is invalid",ic);    throw ic;  }catch (  CertificateExpiredException e) {    log.error(methodName + "Certificate is expired",e);    throw FaultUtil.InvalidCertificate(e);  }catch (  CertificateNotYetValidException e) {    log.error(methodName + "Certificate is not in validity period ",e);    throw FaultUtil.InvalidCertificate(e);  }catch (  InvalidLogin il) {    log.error(methodName + "Invalid login",il);    throw il;  }catch (  Exception e) {    log.error(methodName + "registration failed: ",e);    throw FaultUtil.StorageFault(methodName + "registration failed: ",e);  }}  }
class C{  private void addLine(int line,JLabel label,JComponent field){  gbc.gridy=line;  gbc.insets=labelInsets;  gbc.gridx=0;  gbc.weightx=0.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  label.setHorizontalAlignment(SwingConstants.RIGHT);  mainPanel.add(label,gbc);  gbc.insets=fieldInsets;  gbc.gridx=1;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.NONE;  gbc.insets=fieldInsets;  mainPanel.add(field,gbc);}  }
class C{  public static Object execute(File artemisHome,File artemisInstance,List<String> args) throws Throwable {  return execute(artemisHome,artemisInstance,args.toArray(new String[args.size()]));}  }
class C{  public void addLogFile(LogFile logFile){  this.logFileMap.put(logFile.getFile(),logFile);}  }
class C{  protected void waitUntilAllProcessCompleted(){  long startTime=System.currentTimeMillis();  while (activitiRuntimeService.createProcessInstanceQuery().active().count() > 0) {    long currentTime=System.currentTimeMillis();    long elapsedTime=currentTime - startTime;    if (elapsedTime > 15000) {      StringBuilder builder=new StringBuilder("dumping workflow variables due to error:\n");      List<Execution> executions=activitiRuntimeService.createExecutionQuery().list();      for (      Execution execution : executions) {        Map<String,Object> executionVariables=activitiRuntimeService.getVariables(execution.getId());        builder.append(execution).append('\n');        for (        Map.Entry<String,Object> variable : executionVariables.entrySet()) {          builder.append(variable).append('\n');        }      }      LOGGER.error(builder.toString());      Assert.fail("The test did not finished in the specified timeout (15s). See error logs for variable dump.");    }  }}  }
class C{  public HashMap<String,Boolean> stopInstances(PropertyHandler ph) throws HeatException, APPlatformException, NovaException {  OpenStackConnection connection=getConnection(ph);  List<String> serverIds=new HeatClient(connection).getServerIds(ph.getStackName());  HashMap<String,Boolean> operationStatuses=new HashMap<String,Boolean>();  if (serverIds.size() == 0) {    throw new InstanceNotAliveException(Messages.getAll("error_stopping_failed_instance_not_found"));  }  NovaClient nc=new NovaClient(connection);  for (  String id : serverIds) {    Boolean result=Boolean.FALSE;    try {      result=nc.stopServer(ph,id);    } catch (    OpenStackConnectionException ex) {      if (ex.getResponseCode() == 401) {        logger.info("Could not stop server (Server ID:" + id + ") in stack (Stack ID: "+ ph.getStackId()+ ") because of unauthorized. Retry once after authorised.",ex);        try {          connection=getConnection(ph);          nc=new NovaClient(connection);          result=nc.stopServer(ph,id);        } catch (        OpenStackConnectionException e) {          logger.info("Could not stop server (Server ID:" + id + ") in stack (Stack ID: "+ ph.getStackId()+ ")",e);          result=Boolean.FALSE;        }      } else {        logger.info("Could not stop server (Server ID:" + id + ") in stack (Stack ID: "+ ph.getStackId()+ ")",ex);        result=Boolean.FALSE;      }    }    operationStatuses.put(id,result);  }  return operationStatuses;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (!isFirstBatchDone()) {    bufferInput(instance);    return false;  } else {    convertInstance(instance);    return true;  }}  }
class C{  public void updateGrid(float lt,float ln,int rows,int columns,float orientation,float vResolution,float hResolution,int major,int[] data,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkGrid.write(lt,ln,rows,columns,orientation,vResolution,hResolution,major,data,properties,link.dos);}  }
class C{  public boolean isActiva(){  return ACCOUNTTYPE_Asset.equals(getAccountType());}  }
class C{  public void addProperty(String property,Number value){  add(property,createJsonElement(value));}  }
class C{  public CancelException(Throwable cause){  super(cause);}  }
class C{  @Override public int compare(File lhs,File rhs){  return lhs.lastModified() > rhs.lastModified() ? -1 : 1;}  }
class C{  String buildUnionQuery(String[] subQueries,String orderBy,String limit){  return null;}  }
class C{  public PrivateDataManager(Connection connection,String user){  if (!connection.isAuthenticated()) {    throw new IllegalStateException("Must be logged in to XMPP server.");  }  this.connection=connection;  this.user=user;}  }
class C{  static public void appendEscapingCDATA(final StringBuffer buf,final String str){  if (str != null) {    int end=str.indexOf(CDATA_END);    if (end < 0) {      buf.append(str);    } else {      int start=0;      while (end > -1) {        buf.append(str.substring(start,end));        buf.append(CDATA_EMBEDED_END);        start=end + CDATA_END_LEN;        if (start < str.length()) {          end=str.indexOf(CDATA_END,start);        } else {          return;        }      }      buf.append(str.substring(start));    }  }}  }
class C{  @Override public void updateBinaryStream(int columnIndex,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBinaryStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private WebDoc createFirstPage(Properties cProp,HttpServletRequest request,String errorMessage){  log.info(" - " + errorMessage);  String AD_Language=(cProp.getProperty(Env.LANGUAGE,Language.getAD_Language(request.getLocale())));  String windowTitle=Msg.getMsg(AD_Language,"Login");  String usrText=Msg.getMsg(AD_Language,"User");  String pwdText=Msg.getMsg(AD_Language,"Password");  String lngText=Msg.translate(AD_Language,"AD_Language");  String okText=Msg.getMsg(AD_Language,"OK");  String cancelText=Msg.getMsg(AD_Language,"Cancel");  String storeTxt=Msg.getMsg(AD_Language,"SaveCookie");  String action=request.getRequestURI();  form myForm=null;  myForm=new form(action).setName("Login1");  table table=new table().setAlign(AlignType.CENTER).setWidth("25%");  tr line=new tr();  line.addElement(new td().addElement(" "));  String userData=cProp.getProperty(P_USERNAME,"");  line=new tr();  label usrLabel=new label().setFor(P_USERNAME + "F").addElement(usrText);  usrLabel.setID(P_USERNAME + "L");  line.addElement(new td().addElement(usrLabel).setAlign(AlignType.RIGHT));  input usr=new input(input.TYPE_TEXT,P_USERNAME,userData).setSize(20).setMaxlength(30);  usr.setID(P_USERNAME + "F");  line.addElement(new td().addElement(usr).setAlign(AlignType.LEFT));  table.addElement(line);  String pwdData=cProp.getProperty(P_PASSWORD,"");  line=new tr();  label pwdLabel=new label().setFor(P_PASSWORD + "F").addElement(pwdText);  pwdLabel.setID(P_PASSWORD + "L");  line.addElement(new td().addElement(pwdLabel).setAlign(AlignType.RIGHT));  input pwd=new input(input.TYPE_PASSWORD,P_PASSWORD,pwdData).setSize(20).setMaxlength(30);  pwd.setID(P_PASSWORD + "F");  line.addElement(new td().addElement(pwd).setAlign(AlignType.LEFT));  table.addElement(line);  String langData=cProp.getProperty(AD_Language);  line=new tr();  label langLabel=new label().setFor(Env.LANGUAGE + "F").addElement(lngText);  langLabel.setID(Env.LANGUAGE + "L");  line.addElement(new td().addElement(langLabel).setAlign(AlignType.RIGHT));  option options[]=new option[Language.getLanguageCount()];  for (int i=0; i < Language.getLanguageCount(); i++) {    Language language=Language.getLanguage(i);    options[i]=new option(language.getAD_Language()).addElement(Util.maskHTML(language.getName()));    if (language.getAD_Language().equals(langData))     options[i].setSelected(true); else     options[i].setSelected(false);  }  line.addElement(new td().addElement(new select(Env.LANGUAGE,options).setID(Env.LANGUAGE + "F")));  table.addElement(line);  String storeData=cProp.getProperty(P_STORE,"N");  line=new tr();  line.addElement(new td());  input store=new input(input.TYPE_CHECKBOX,P_STORE,"Y").addElement(storeTxt).setChecked(storeData.equals("Y"));  store.setID(P_STORE + "F");  line.addElement(new td().addElement(store).setAlign(AlignType.LEFT));  table.addElement(line);  if (errorMessage != null && errorMessage.length() > 0) {    line=new tr();    line.addElement(new td().setColSpan(2).addElement(new font(HtmlColor.red,4).addElement(new b(errorMessage))));    table.addElement(line);  }  line=new tr();  table tablebutton=new table().setAlign(AlignType.CENTER).setWidth("25%");  input cancel=new input(input.TYPE_RESET,"Reset","  " + "Cancel");  cancel.setClass("cancelbtn");  line.addElement(new td().addElement(cancel).setWidth("50%")).setAlign(AlignType.CENTER);  input submit=new input(input.TYPE_SUBMIT,P_SUBMIT,"  " + "OK");  submit.setClass("loginbtn");  line.addElement(new td().addElement(submit).setWidth("50%").setAlign(AlignType.CENTER));  tablebutton.addElement(line);  table.addElement(tablebutton);  myForm.addElement(table);  WebDoc doc=WebDoc.createWindow(windowTitle);  img img=new img(WebEnv.getImageDirectory("Logo.gif"),"logo");  doc.addWindowCenter(true).addElement(img).addElement(new p()).addElement(new p()).addElement(myForm).addElement(new p()).addElement(new p());  doc.getBody().addElement(WebUtil.getClearFrame(WebEnv.TARGET_MENU)).setTitle(windowTitle);  return doc;}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=NetworkUtil.getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  public static <I,A>Parser<I,A> choice(Parser<I,? extends A> p1,Parser<I,? extends A> p2,Parser<I,? extends A> p3,Parser<I,? extends A> p4,Parser<I,? extends A> p5,Parser<I,? extends A> p6,Parser<I,? extends A> p7){  return or(p1,or(p2,or(p3,or(p4,or(p5,or(p6,p7))))));}  }
class C{  public void fail(){synchronized (this) {    if (mStatus.equals(Status.IN_PROGRESS)) {      try {        final int requestType=mInfo.getRequestType();switch (requestType) {case RequestInfo.TYPE_WEATHER_BY_GEO_LOCATION_REQ:case RequestInfo.TYPE_WEATHER_BY_WEATHER_LOCATION_REQ:          mClient.setServiceRequestState(mInfo,null,CMWeatherManager.RequestStatus.FAILED);        break;case RequestInfo.TYPE_LOOKUP_CITY_NAME_REQ:      mClient.setServiceRequestState(mInfo,null,CMWeatherManager.RequestStatus.FAILED);    break;}} catch (RemoteException e) {}mStatus=Status.FAILED;}}}  }
class C{  private JMenu createViewMenu(){  JMenu viewMenu=new JMenu("View");  viewMenu.add(actionManager.getPropertyTabAction());  viewMenu.addSeparator();  viewMenu.add(new JMenuItem(actionManager.getRepositionAllWindowsAction()));  return viewMenu;}  }
class C{  ModuleMarshal marshal(Class<?> sourceType,Class<?> targetType,Class<?> declaredTargetType){  ImportKey key=new ImportKey(sourceType,targetType);  ModuleMarshal marshal=_marshalMap.get(key);  if (marshal != null) {    return marshal;  }  marshal=marshalImpl(sourceType,targetType,declaredTargetType);  _marshalMap.putIfAbsent(key,marshal);  return marshal;}  }
class C{  public void decrementSelectedObjects(){  for (Iterator i=getSelection().iterator(); i.hasNext(); ) {    PNode node=(PNode)i.next();    if (node instanceof NeuronNode) {      NeuronNode neuronNode=(NeuronNode)node;      neuronNode.getNeuron().getUpdateRule().decrementActivation(neuronNode.getNeuron());      neuronNode.update();    } else     if (node instanceof SynapseNode) {      SynapseNode synapseNode=(SynapseNode)node;      synapseNode.getSynapse().decrementWeight();      synapseNode.updateColor();      synapseNode.updateDiameter();    }  }}  }
class C{  public Trim(){  super("text_transformation.trim",1);}  }
class C{  public int addPatterns() throws IOException {  if (paintList.size() > 0) {    PDFDictionary patterns=pdf.openDictionary("Pattern");    ListIterator<Entry> i=paintList.listIterator();    while (i.hasNext()) {      Entry e=(Entry)i.next();      patterns.entry(e.name,pdf.ref(e.name));    }    pdf.close(patterns);  }  return paintList.size();}  }
class C{  private void updateStimulusPanel(){  for (int i=0; i < valArray.length; i++) {    stimulusVals[i]=new JTextField("" + valArray[i]);    final int col=7;    stimulusVals[i].setColumns(col);    int lbl=i + 1;    JLabel tmp=new JLabel(lbl + ":");    con.weightx=0.3;    con.gridx=1;    con.gridy=i + 1;    stimulusPanel.add(tmp,con);    con.weightx=3;    con.gridx=2;    con.gridy=i + 1;    stimulusPanel.add(stimulusVals[i],con);  }}  }
class C{  public void growStack(int diff){  setStackDepth(stackDepth + diff);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void moveToCamera(float camX,float camY){  renderer.moveToPosition(camX,camY);}  }
class C{  public void recompilingAllDynamicallyLoadedMethods(){  if (Controller.options.LOGGING_LEVEL >= 1) {    printlnToLogWithTimePrefix(" Recompiling all dynamically loaded methods");  }}  }
class C{  public ComparableObjectSeries(Comparable key,boolean autoSort,boolean allowDuplicateXValues){  super(key);  this.data=new java.util.ArrayList();  this.autoSort=autoSort;  this.allowDuplicateXValues=allowDuplicateXValues;}  }
class C{  public boolean isConcurrent(){  return !stw;}  }
class C{  public MWMStrategy(Properties ctx,int WM_Strategy_ID,String trxName){  super(ctx,WM_Strategy_ID,trxName);  if (WM_Strategy_ID == 0) {  }}  }
class C{  public @Override void characters(char[] ch,int start,int length) throws SAXException {  mStringBuilder.append(ch,start,length);}  }
class C{  private void dropTables(SQLiteDatabase paramSQLiteDatabase){  for (  String table : sTables) {    try {      paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS " + table);    } catch (    Exception localException) {      localException.printStackTrace();    }  }}  }
class C{  public void testXMLCreate() throws JDOMException, IOException {  Assert.assertEquals("OperationsJUnitTestCarRoster.xml",CarManagerXml.instance().getOperationsFileName());  Assert.assertEquals("Default car empty","E",CarLoads.instance().getDefaultEmptyName());  Assert.assertEquals("Default car load","L",CarLoads.instance().getDefaultLoadName());  CarManager manager=CarManager.instance();  List<RollingStock> tempcarList=manager.getByIdList();  Assert.assertEquals("Starting Number of Cars",0,tempcarList.size());  Car c1=manager.newCar("CP","Test Number 1");  Car c2=manager.newCar("ACL","Test Number 2");  Car c3=manager.newCar("CP","Test Number 3");  c1.setBuilt("5619");  c1.setCaboose(false);  c1.setColor("black");  c1.setComment("no comment");  c1.setLength("04");  c1.setLoadName("FULL");  c1.setMoves(1);  c1.setNumber("X Test Number c1");  c1.setOutOfService(false);  jmri.InstanceManager.getDefault(jmri.IdTagManager.class).provideIdTag("norfidc1");  c1.setRfid("norfidc1");  c1.setRoadName("OLDRoad");  c1.setTypeName("noCaboose");  c1.setWait(6);  c1.setWeight("54");  c1.setWeightTons("001");  c2.setBuilt("1234");  c2.setFred(true);  c2.setColor("red");  c2.setComment("c2 comment");  c2.setLength("77");  c2.setLoadName("c2 Load");  c2.setMoves(10000);  c2.setNumber("X Test Number c2");  c2.setOutOfService(true);  jmri.InstanceManager.getDefault(jmri.IdTagManager.class).provideIdTag("rfidc2");  c2.setRfid("rfidc2");  c2.setRoadName("c2 Road");  c2.setTypeName("c2 Boxcar");  c2.setWait(61);  c2.setWeight("33");  c2.setWeightTons("798");  c3.setBuilt("234");  c3.setCaboose(true);  c3.setColor("green");  c3.setComment("c3 comment");  c3.setLength("453");  c3.setLoadName("c3 Load");  c3.setMoves(243);  c3.setNumber("X Test Number c3");  c3.setOutOfService(false);  jmri.InstanceManager.getDefault(jmri.IdTagManager.class).provideIdTag("rfidc3");  c3.setRfid("rfidc3");  c3.setRoadName("c3 Road");  c3.setTypeName("c3 Boxcar");  c3.setWait(0);  c3.setWeight("345");  c3.setWeightTons("1798");  tempcarList=manager.getByIdList();  Assert.assertEquals("New Number of Cars",3,tempcarList.size());  CarManagerXml.instance().writeOperationsFile();  Car c4=manager.newCar("PC","Test Number 4");  Car c5=manager.newCar("BM","Test Number 5");  Car c6=manager.newCar("SP","Test Number 6");  Assert.assertNotNull("car c4 exists",c4);  Assert.assertNotNull("car c5 exists",c5);  Assert.assertNotNull("car c6 exists",c6);  c1.setBuilt("1956");  c1.setCaboose(true);  c1.setColor("white");  c1.setComment("c1 comment");  c1.setLength("40");  c1.setLoadName("Empty");  c1.setMoves(3);  c1.setNumber("New Test Number c1");  c1.setOutOfService(true);  jmri.InstanceManager.getDefault(jmri.IdTagManager.class).provideIdTag("rfidc1");  c1.setRfid("rfidc1");  c1.setRoadName("newRoad");  c1.setTypeName("bigCaboose");  c1.setWait(5);  c1.setWeight("45");  c1.setWeightTons("100");  c5.setBuilt("2010");  c5.setCaboose(false);  c5.setColor("blue");  c5.setComment("c5 comment");  c5.setLength("44");  c5.setLoadName("Full");  c5.setMoves(5);  c5.setNumber("New Test Number c5");  c5.setOutOfService(true);  jmri.InstanceManager.getDefault(jmri.IdTagManager.class).provideIdTag("rfidc5");  c5.setRfid("rfidc5");  c5.setRoadName("c5Road");  c5.setTypeName("smallCaboose");  c5.setWait(55);  c5.setWeight("66");  c5.setWeightTons("77");  tempcarList=manager.getByIdList();  Assert.assertEquals("New Number of Cars",6,tempcarList.size());  CarManagerXml.instance().writeOperationsFile();  manager.dispose();  manager=CarManager.instance();  tempcarList=manager.getByIdList();  Assert.assertEquals("Starting Number of Cars",0,tempcarList.size());  CarManagerXml.instance().readFile(CarManagerXml.instance().getDefaultOperationsFilename());  tempcarList=manager.getByIdList();  Assert.assertEquals("Number of Cars",6,tempcarList.size());  c1=manager.getByRoadAndNumber("CP","Test Number 1");  c2=manager.getByRoadAndNumber("ACL","Test Number 2");  c3=manager.getByRoadAndNumber("CP","Test Number 3");  c4=manager.getByRoadAndNumber("PC","Test Number 4");  c5=manager.getByRoadAndNumber("BM","Test Number 5");  c6=manager.getByRoadAndNumber("SP","Test Number 6");  Assert.assertNotNull("car c1 exists",c1);  Assert.assertNotNull("car c2 exists",c2);  Assert.assertNotNull("car c3 exists",c3);  Assert.assertNotNull("car c4 exists",c4);  Assert.assertNotNull("car c5 exists",c5);  Assert.assertNotNull("car c6 exists",c6);  Assert.assertEquals("car c1 built date","1956",c1.getBuilt());  Assert.assertEquals("car c1 caboose",true,c1.isCaboose());  Assert.assertEquals("car c1 color","white",c1.getColor());  Assert.assertEquals("car c1 comment","c1 comment",c1.getComment());  Assert.assertEquals("car c1 length","40",c1.getLength());  Assert.assertEquals("car c1 load","Empty",c1.getLoadName());  Assert.assertEquals("car c1 moves",3,c1.getMoves());  Assert.assertEquals("car c1 number","New Test Number c1",c1.getNumber());  Assert.assertEquals("car c1 out of service",true,c1.isOutOfService());  Assert.assertEquals("car c1 rfid","rfidc1",c1.getRfid());  Assert.assertEquals("car c1 road","newRoad",c1.getRoadName());  Assert.assertEquals("car c1 type","bigCaboose",c1.getTypeName());  Assert.assertEquals("car c1 wait",5,c1.getWait());  Assert.assertEquals("car c1 weight","45",c1.getWeight());  Assert.assertEquals("car c1 weight tons","100",c1.getWeightTons());  Assert.assertEquals("car c2 built date","1234",c2.getBuilt());  Assert.assertEquals("car c2 caboose",false,c2.isCaboose());  Assert.assertEquals("car c2 fred",true,c2.hasFred());  Assert.assertEquals("car c2 color","red",c2.getColor());  Assert.assertEquals("car c2 comment","c2 comment",c2.getComment());  Assert.assertEquals("car c2 length","77",c2.getLength());  Assert.assertEquals("car c2 load","c2 Load",c2.getLoadName());  Assert.assertEquals("car c2 moves",10000,c2.getMoves());  Assert.assertEquals("car c2 number","X Test Number c2",c2.getNumber());  Assert.assertEquals("car c2 out of service",true,c2.isOutOfService());  Assert.assertEquals("car c2 rfid","rfidc2",c2.getRfid());  Assert.assertEquals("car c2 road","c2 Road",c2.getRoadName());  Assert.assertEquals("car c2 type","c2 Boxcar",c2.getTypeName());  Assert.assertEquals("car c2 wait",61,c2.getWait());  Assert.assertEquals("car c2 weight","33",c2.getWeight());  Assert.assertEquals("car c2 weight tons","798",c2.getWeightTons());  Assert.assertEquals("car c3 built date","234",c3.getBuilt());  Assert.assertEquals("car c3 caboose",true,c3.isCaboose());  Assert.assertEquals("car c3 fred",false,c3.hasFred());  Assert.assertEquals("car c3 color","green",c3.getColor());  Assert.assertEquals("car c3 comment","c3 comment",c3.getComment());  Assert.assertEquals("car c3 length","453",c3.getLength());  Assert.assertEquals("car c3 load","c3 Load",c3.getLoadName());  Assert.assertEquals("car c3 moves",243,c3.getMoves());  Assert.assertEquals("car c3 number","X Test Number c3",c3.getNumber());  Assert.assertEquals("car c3 out of service",false,c3.isOutOfService());  Assert.assertEquals("car c3 rfid","rfidc3",c3.getRfid());  Assert.assertEquals("car c3 road","c3 Road",c3.getRoadName());  Assert.assertEquals("car c3 type","c3 Boxcar",c3.getTypeName());  Assert.assertEquals("car c3 wait",0,c3.getWait());  Assert.assertEquals("car c3 weight","345",c3.getWeight());  Assert.assertEquals("car c3 weight tons","1798",c3.getWeightTons());  Assert.assertEquals("car c4 built date","",c4.getBuilt());  Assert.assertEquals("car c4 caboose",false,c4.isCaboose());  Assert.assertEquals("car c4 fred",false,c4.hasFred());  Assert.assertEquals("car c4 color","",c4.getColor());  Assert.assertEquals("car c4 comment","",c4.getComment());  Assert.assertEquals("car c4 length","0",c4.getLength());  Assert.assertEquals("car c4 load","E",c4.getLoadName());  Assert.assertEquals("car c4 moves",0,c4.getMoves());  Assert.assertEquals("car c4 number","Test Number 4",c4.getNumber());  Assert.assertEquals("car c4 out of service",false,c4.isOutOfService());  Assert.assertEquals("car c4 rfid","",c4.getRfid());  Assert.assertEquals("car c4 road","PC",c4.getRoadName());  Assert.assertEquals("car c4 type","",c4.getTypeName());  Assert.assertEquals("car c4 wait",0,c4.getWait());  Assert.assertEquals("car c4 weight","0",c4.getWeight());  Assert.assertEquals("car c4 weight tons","0",c4.getWeightTons());  Assert.assertEquals("car c5 built date","2010",c5.getBuilt());  Assert.assertEquals("car c5 caboose",false,c5.isCaboose());  Assert.assertEquals("car c5 color","blue",c5.getColor());  Assert.assertEquals("car c5 comment","c5 comment",c5.getComment());  Assert.assertEquals("car c5 length","44",c5.getLength());  Assert.assertEquals("car c5 load","Full",c5.getLoadName());  Assert.assertEquals("car c5 moves",5,c5.getMoves());  Assert.assertEquals("car c5 number","New Test Number c5",c5.getNumber());  Assert.assertEquals("car c5 out of service",true,c5.isOutOfService());  Assert.assertEquals("car c5 rfid","rfidc5",c5.getRfid());  Assert.assertEquals("car c5 road","c5Road",c5.getRoadName());  Assert.assertEquals("car c5 type","smallCaboose",c5.getTypeName());  Assert.assertEquals("car c5 wait",55,c5.getWait());  Assert.assertEquals("car c5 weight","66",c5.getWeight());  Assert.assertEquals("car c5 weight tons","77",c5.getWeightTons());  Assert.assertEquals("car c6 built date","",c6.getBuilt());  Assert.assertEquals("car c6 caboose",false,c6.isCaboose());  Assert.assertEquals("car c6 fred",false,c6.hasFred());  Assert.assertEquals("car c6 color","",c6.getColor());  Assert.assertEquals("car c6 comment","",c6.getComment());  Assert.assertEquals("car c6 length","0",c6.getLength());  Assert.assertEquals("car c6 load","E",c6.getLoadName());  Assert.assertEquals("car c6 moves",0,c6.getMoves());  Assert.assertEquals("car c6 number","Test Number 6",c6.getNumber());  Assert.assertEquals("car c6 out of service",false,c6.isOutOfService());  Assert.assertEquals("car c6 rfid","",c6.getRfid());  Assert.assertEquals("car c6 road","SP",c6.getRoadName());  Assert.assertEquals("car c6 type","",c6.getTypeName());  Assert.assertEquals("car c6 wait",0,c6.getWait());  Assert.assertEquals("car c6 weight","0",c6.getWeight());  Assert.assertEquals("car c6 weight tons","0",c6.getWeightTons());  manager.dispose();  manager=CarManager.instance();  tempcarList=manager.getByIdList();  Assert.assertEquals("Starting Number of Cars",0,tempcarList.size());  CarManagerXml.instance().setOperationsFileName("OperationsJUnitTestCarRoster.xml.bak");  CarManagerXml.instance().readFile(CarManagerXml.instance().getDefaultOperationsFilename());  tempcarList=manager.getByIdList();  Assert.assertEquals("Number of Cars",3,tempcarList.size());  c1=manager.getByRoadAndNumber("CP","Test Number 1");  c2=manager.getByRoadAndNumber("ACL","Test Number 2");  c3=manager.getByRoadAndNumber("CP","Test Number 3");  c4=manager.getByRoadAndNumber("PC","Test Number 4");  c5=manager.getByRoadAndNumber("BM","Test Number 5");  c6=manager.getByRoadAndNumber("SP","Test Number 6");  Assert.assertNotNull("car c1 exists",c1);  Assert.assertNotNull("car c2 exists",c2);  Assert.assertNotNull("car c3 exists",c3);  Assert.assertNull("car c4 does not exist",c4);  Assert.assertNull("car c5 does not exist",c5);  Assert.assertNull("car c6 does not exist",c6);  Assert.assertEquals("car c1 built date","5619",c1.getBuilt());  Assert.assertEquals("car c1 caboose",false,c1.isCaboose());  Assert.assertEquals("car c1 color","black",c1.getColor());  Assert.assertEquals("car c1 comment","no comment",c1.getComment());  Assert.assertEquals("car c1 length","04",c1.getLength());  Assert.assertEquals("car c1 load","FULL",c1.getLoadName());  Assert.assertEquals("car c1 moves",1,c1.getMoves());  Assert.assertEquals("car c1 number","X Test Number c1",c1.getNumber());  Assert.assertEquals("car c1 out of service",false,c1.isOutOfService());  Assert.assertEquals("car c1 rfid","norfidc1",c1.getRfid());  Assert.assertEquals("car c1 road","OLDRoad",c1.getRoadName());  Assert.assertEquals("car c1 type","noCaboose",c1.getTypeName());  Assert.assertEquals("car c1 wait",6,c1.getWait());  Assert.assertEquals("car c1 weight","54",c1.getWeight());  Assert.assertEquals("car c1 weight tons","001",c1.getWeightTons());  Assert.assertEquals("car c2 built date","1234",c2.getBuilt());  Assert.assertEquals("car c2 caboose",false,c2.isCaboose());  Assert.assertEquals("car c2 fred",true,c2.hasFred());  Assert.assertEquals("car c2 color","red",c2.getColor());  Assert.assertEquals("car c2 comment","c2 comment",c2.getComment());  Assert.assertEquals("car c2 length","77",c2.getLength());  Assert.assertEquals("car c2 load","c2 Load",c2.getLoadName());  Assert.assertEquals("car c2 moves",10000,c2.getMoves());  Assert.assertEquals("car c2 number","X Test Number c2",c2.getNumber());  Assert.assertEquals("car c2 out of service",true,c2.isOutOfService());  Assert.assertEquals("car c2 rfid","rfidc2",c2.getRfid());  Assert.assertEquals("car c2 road","c2 Road",c2.getRoadName());  Assert.assertEquals("car c2 type","c2 Boxcar",c2.getTypeName());  Assert.assertEquals("car c2 wait",61,c2.getWait());  Assert.assertEquals("car c2 weight","33",c2.getWeight());  Assert.assertEquals("car c2 weight tons","798",c2.getWeightTons());  Assert.assertEquals("car c3 built date","234",c3.getBuilt());  Assert.assertEquals("car c3 caboose",true,c3.isCaboose());  Assert.assertEquals("car c3 fred",false,c3.hasFred());  Assert.assertEquals("car c3 color","green",c3.getColor());  Assert.assertEquals("car c3 comment","c3 comment",c3.getComment());  Assert.assertEquals("car c3 length","453",c3.getLength());  Assert.assertEquals("car c3 load","c3 Load",c3.getLoadName());  Assert.assertEquals("car c3 moves",243,c3.getMoves());  Assert.assertEquals("car c3 number","X Test Number c3",c3.getNumber());  Assert.assertEquals("car c3 out of service",false,c3.isOutOfService());  Assert.assertEquals("car c3 rfid","rfidc3",c3.getRfid());  Assert.assertEquals("car c3 road","c3 Road",c3.getRoadName());  Assert.assertEquals("car c3 type","c3 Boxcar",c3.getTypeName());  Assert.assertEquals("car c3 wait",0,c3.getWait());  Assert.assertEquals("car c3 weight","345",c3.getWeight());  Assert.assertEquals("car c3 weight tons","1798",c3.getWeightTons());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.632 -0500",hash_original_method="048A7854E0D4842D61BAD40D57C0F82F",hash_generated_method="6F116209E01E7D086216611601F1D84C") public boolean hasUsernamePassword(){synchronized (mPasswordLock) {    return hasEntries(TABLE_PASSWORD_ID);  }}  }
class C{  public void sortPickingQueue(){  sort(pitems,pscores,psize);  psorted=true;}  }
class C{  public BigDecimal balance(){  return crAmount.subtract(drAmount);}  }
class C{  protected void resetLoginTimeCountdown() throws SocketException {  if (this.loginTimeoutCountdown > 0) {    long now=System.currentTimeMillis();    this.loginTimeoutCountdown-=now - this.loginTimeoutCheckTimestamp;    if (this.loginTimeoutCountdown <= 0) {      throw new SocketException(Messages.getString("Connection.LoginTimeout"));    }    this.loginTimeoutCheckTimestamp=now;  }}  }
class C{  @Scheduled(fixedRate=300000,initialDelay=20000) public void schedulePageRank(){  logger.info("PageRank scheduled on follows graph " + dateFormat.format(new Date()));  if (userRepository.findNextUserToCrawl() != null) {    String jobUrl=String.format(PAGERANK_JOB_URL,neo4jServer.url());    restTemplate.getForEntity(jobUrl,null);  }}  }
class C{  public static void buildOperands(final INaviInstruction instruction,final ZyGraphViewSettings graphSettings,final StringBuffer line,final List<CStyleRunData> styleRun,final INodeModifier modifier){  int counter=0;  for (  final INaviOperandTree operandTree : instruction.getOperands()) {    buildOperand(instruction,operandTree,graphSettings,line,styleRun,modifier,counter);    counter++;  }}  }
class C{  public String groupName(){  return grpName;}  }
class C{  public String IDFTransformTipText(){  return "Sets whether if the word frequencies in a document should be " + "transformed into: \n" + "   fij*log(num of Docs/num of Docs with word i) \n"+ "      where fij is the frequency of word i in document (instance) j.";}  }
class C{  public StatementMetric[] reportGroup(int group){  return groupMetrics[group].flushMetrics();}  }
class C{  public boolean isAbstract(){  return abstract_;}  }
class C{  public static final Value<String> string(String text){  return new TextValue(requireNonNull(text));}  }
class C{  public boolean approveIt(){  log.info(toString());  setIsApproved(true);  return true;}  }
class C{  public QQPlot(DataSet dataSet,Node selectedNode){  boolean testMode=false;  if (selectedNode != null) {    testMode=false;  }  if (dataSet == null) {    throw new NullPointerException("the given dataset must not be null");  }  if (dataSet.getNumColumns() == 0) {    throw new IllegalArgumentException("The given dataset should not be empty");  }  if (!testMode) {    for (int i=0; i < dataSet.getNumColumns(); i++) {      if (dataSet.getVariable(i) instanceof ContinuousVariable) {        break;      }      if (i == dataSet.getNumColumns() - 1) {        JOptionPane.showMessageDialog(new JFrame(),"You must have at least one continuous variable to construct a q-q plot!");        throw new IllegalArgumentException("You must have at least one continuous variable to construct a q-q plot!");      }    }  }  this.dataSet=dataSet.copy();  if (selectedNode == null && dataSet.getNumColumns() != 0) {    int[] selected=dataSet.getSelectedIndices();    if (selected == null || selected.length == 0) {      for (int i=0; i < selected.length; i++) {        if (dataSet.getVariable(selected[i]) instanceof ContinuousVariable) {          selectedNode=dataSet.getVariable(selected[i]);          break;        }      }    }  }  try {    this.selectedVariable=(ContinuousVariable)selectedNode;  } catch (  Exception e) {    JOptionPane.showMessageDialog(new JFrame(),"You cannot construct a q-q plot for a discrete variable!");    throw new IllegalArgumentException("Only attempt to construct a q-q plot on a continuous variable!");  }  if (testMode)   testPlot(); else   buildQQPlotData(this.selectedVariable);}  }
class C{  @Override public boolean supportsANSI92FullSQL(){  debugCodeCall("supportsANSI92FullSQL");  return false;}  }
class C{  @Override public boolean teleport(Location location){  return teleport(location,TeleportCause.UNKNOWN);}  }
class C{  @Field(43) public __VARIANT_NAME_3_union pintVal(Pointer<Integer> pintVal){  this.io.setPointerField(this,43,pintVal);  return this;}  }
class C{  public DeviceAutomator pressDPadCenter(){  mDevice.pressDPadCenter();  return this;}  }
class C{  public void close(){  getConnectionManager().shutdown();}  }
class C{  public List<StorageUnitEntity> excludeBusinessObjectDataStatus(List<StorageUnitEntity> storageUnitEntities,String excludedBusinessObjectDataStatus){  List<StorageUnitEntity> result=new ArrayList<>();  for (  StorageUnitEntity storageUnitEntity : storageUnitEntities) {    if (!storageUnitEntity.getBusinessObjectData().getStatus().getCode().equalsIgnoreCase(excludedBusinessObjectDataStatus)) {      result.add(storageUnitEntity);    }  }  return result;}  }
class C{  protected Object writeReplace() throws java.io.ObjectStreamException {  return new LongArrayCounterSnapshot(getName(),getUnits(),getVariability(),getFlags(),getVectorLength(),longArrayValue());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSSource({DSSourceKind.LOCATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.196 -0500",hash_original_method="B0C87E65C5430C3898079FF855C10E98",hash_generated_method="8D9B2644325A2F7E8FBEFDF7D614187B") static public Allocation createFromBitmapResource(RenderScript rs,Resources res,int id){  return createFromBitmapResource(rs,res,id,MipmapControl.MIPMAP_NONE,USAGE_GRAPHICS_TEXTURE);}  }
class C{  static boolean usingOcean(){  return (getCurrentTheme() instanceof OceanTheme);}  }
class C{  public Blade route(String path,Class<?> clazz,String method){  routers.route(path,clazz,method);  return this;}  }
class C{  public void log(Level level,String msg,Throwable thrown){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setThrown(thrown);  doLog(lr);}  }
class C{  public void reset(){  clearMetadataCache();  clearAclCache();  clearLockTokensCache();}  }
class C{  public Difference(TupleExpr leftArg,TupleExpr rightArg){  super(leftArg,rightArg);}  }
class C{  public static AuthnRequest createSamlAuthnRequestWithOptions(String id,int tenantId){  AuthnRequest retval=createSamlAuthnRequest(id,tenantId);  ConditionsBuilder conditionsBuilder=new ConditionsBuilder();  Conditions conditions=conditionsBuilder.buildObject();  DateTime dt=new DateTime();  conditions.setNotBefore(dt);  conditions.getConditions().add(createRenewable());  conditions.getConditions().add(createDelegable());  retval.setConditions(conditions);  return retval;}  }
class C{  protected void reuseEntry(HashEntry entry,int hashIndex,int hashCode,Object key,Object value){  entry.next=data[hashIndex];  entry.hashCode=hashCode;  entry.key=key;  entry.value=value;}  }
class C{  public static BidiMap mapVocabularyToIntegers(SortedSet<String> names){  BidiMap result=new DualTreeBidiMap();  int index=1;  for (  String featureName : names) {    result.put(featureName,index);    index++;  }  return result;}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  String namespace=getName().getNamespace();  String handlerClass=sroot.getExtensionHandlerClass();  Object[] args={namespace,sroot};  ExtensionNamespaceSupport extNsSpt=new ExtensionNamespaceSupport(namespace,handlerClass,args);  sroot.getExtensionNamespacesManager().registerExtension(extNsSpt);  if (!(namespace.equals(Constants.S_EXSLT_FUNCTIONS_URL))) {    namespace=Constants.S_EXSLT_FUNCTIONS_URL;    args=new Object[]{namespace,sroot};    extNsSpt=new ExtensionNamespaceSupport(namespace,handlerClass,args);    sroot.getExtensionNamespacesManager().registerExtension(extNsSpt);  }}  }
class C{  public static void uiImpl(){  UIManager.put("TabbedPane.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("TabbedPane.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("TabbedPane.tabsOverlapBorder",true);  UIManager.put("TabbedPaneUI",org.jb2011.lnf.beautyeye.ch2_tab.BETabbedPaneUI.class.getName());  UIManager.put("TabbedPane.tabAreaInsets",new javax.swing.plaf.InsetsUIResource(3,20,2,20));  UIManager.put("TabbedPane.contentBorderInsets",new javax.swing.plaf.InsetsUIResource(2,0,3,0));  UIManager.put("TabbedPane.selectedTabPadInsets",new javax.swing.plaf.InsetsUIResource(0,1,0,2));  UIManager.put("TabbedPane.tabInsets",new javax.swing.plaf.InsetsUIResource(7,15,9,15));  UIManager.put("TabbedPane.focus",new ColorUIResource(130,130,130));  ColorUIResource highlight=new ColorUIResource(BeautyEyeLNFHelper.commonFocusedBorderColor);  UIManager.put("TabbedPane.highlight",highlight);  UIManager.put("TabbedPane.shadow",highlight);  UIManager.put("TabbedPane.darkShadow",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));}  }
class C{  protected void writeTOCFile(String filename,RpfHeader head,Vector<Frame> frames,Vector<Group> groups) throws MakeTocException {  short us;  int i, j, tail;  double left_b, left_t, right_b, right_t, top, bottom;  double xleft, xright, ytop, ybottom;  int TOC_Nitf_hdr_size=0;  int Loc_sec_len;  int Bound_tbl_len;  int Frame_hdr_len=13;  int Frame_index_rec_len=33;  int Frame_sec_len;  RandomAccessFile fout=null;  int groupCount=groups.size();  int nFrames=frames.size();  int[] pathname_pos=new int[nFrames];  String[] direct=new String[nFrames];  int[] uniq_dir_ptr=new int[nFrames];  int[] uniq_dir_pos=new int[nFrames];  String[] uniq_dir=new String[nFrames];  String georef="AAAAAA";  Frame frame;  Group group;  try {    fout=new RandomAccessFile(filename,"rw");    if (Debug.debugging("maketoc")) {      Debug.output("MakeToc: *** writing TOC ***\n  at: " + filename);    }    if (Debug.debugging("maketoc")) {      Debug.output("MakeToc: *** writing header section ***");    }    String charString;    char[] nt=new char[1];    nt[0]='\0';    fout.writeBoolean(head.endian);    fout.writeShort(RpfHeader.HEADER_SECTION_LENGTH);    fout.writeBytes("       A.TOC");    fout.writeByte(head.neww);    fout.writeBytes(head.standardNumber);    if (head.standardNumber.length() < 15) {      fout.writeBytes(createPadding(15 - head.standardNumber.length(),false));    }    fout.writeBytes(head.standardDate);    if (head.standardDate.length() < 8) {      fout.writeBytes(createPadding(8 - head.standardDate.length(),false));    }    char[] charArray=new char[1];    charArray[0]=head.classification;    charString=new String(charArray);    fout.writeBytes(charString);    Debug.message("maketoc","MakeToc: writing country(" + head.country + ") and release("+ head.release+ ")");    fout.writeBytes(head.country);    fout.writeBytes(head.release);    int location_section_location=(int)fout.getFilePointer() + 4;    fout.writeInt(location_section_location);    if (Debug.debugging("maketoc")) {      Debug.output("MakeToc: location section location is : " + location_section_location);    }    if (Debug.debugging("maketoc")) {      Debug.output("MakeToc: *** writing location section ***");    }    int Loc_hdr_len=14;    int Loc_sec_comp_len=10;    Loc_sec_len=Loc_hdr_len + (RpfFileSections.TOC_LOCATION_KEY * Loc_sec_comp_len);    fout.writeShort(Loc_sec_len);    fout.writeInt(Loc_hdr_len);    fout.writeShort(RpfFileSections.TOC_LOCATION_KEY);    fout.writeShort(Loc_sec_comp_len);    if (Debug.debugging("maketoc")) {      Debug.output("MakeToc:\n  location section length: " + Loc_sec_len + "\n  location header length: "+ Loc_hdr_len+ "\n  number of location records: "+ RpfFileSections.TOC_LOCATION_KEY+ "\n  location section comp length: "+ Loc_sec_comp_len);    }    long agg_loc=fout.getFilePointer();    fout.writeInt(0);    int Bound_hdr_len=8;    int Bound_rec_len=132;    int Bound_sec_len=Bound_hdr_len + (groupCount * Bound_rec_len);    pathname_pos[0]=0;    int uniq_dir_cnt=0;    for (i=0; i < nFrames; i++) {      frame=(Frame)frames.elementAt(i);      tail=frame.filename.lastIndexOf(File.separatorChar);      if (tail == -1) {        direct[i]=frame.filename;      } else {        direct[i]=frame.filename.substring(0,++tail).replace('\\','/');      }      if (Debug.debugging("maketocdetail"))       Debug.output("MakeToc: Matching directory: " + direct[i]);      boolean uniq_dir_match=false;      String tmpDir=null;      if (relativeFramePaths) {        int rpfIndex=direct[i].lastIndexOf("RPF");        if (rpfIndex == -1) {          rpfIndex=direct[i].lastIndexOf("rpf");        }        if (rpfIndex != -1) {          rpfIndex+=3;          if (direct[i].length() > rpfIndex && direct[i].charAt(rpfIndex) == '/') {            rpfIndex++;          }          tmpDir="./" + direct[i].substring(rpfIndex);        } else {          if (Debug.debugging("maketoc")) {            Debug.output("RPF directory not found in directory path " + direct[i] + ", using absolute path");          }          tmpDir=direct[i];        }      } else {        tmpDir=direct[i];      }      for (j=0; j < uniq_dir_cnt; j++) {        if (tmpDir.equals(uniq_dir[j])) {          uniq_dir_ptr[i]=j;          uniq_dir_match=true;          if (Debug.debugging("maketocdetail"))           Debug.output("Found match with: " + uniq_dir[j]);          break;        }      }      if (!uniq_dir_match) {        uniq_dir[uniq_dir_cnt]=tmpDir;        uniq_dir_ptr[i]=uniq_dir_cnt;        if (Debug.debugging("maketoc"))         Debug.output("Adding Unique directory: " + uniq_dir[uniq_dir_cnt]);        uniq_dir_cnt++;      }    }    if (Debug.debugging("maketoc"))     Debug.output("Uniq_dir_cnt: " + uniq_dir_cnt);    int path_table_len=0;    for (j=0; j < uniq_dir_cnt; j++) {      path_table_len+=2 + uniq_dir[j].length();    }    uniq_dir_pos[0]=0;    for (j=1; j < uniq_dir_cnt; j++) {      uniq_dir_pos[j]=uniq_dir_pos[j - 1] + 2 + uniq_dir[j - 1].length();    }    for (j=0; j < uniq_dir_cnt; j++) {      if (Debug.debugging("maketocdetail"))       Debug.output("j: " + j + ", uniq_dir_pos[j]: "+ uniq_dir_pos[j]);    }    for (i=0; i < nFrames; i++) {      pathname_pos[i]=uniq_dir_pos[uniq_dir_ptr[i]];      if (Debug.debugging("maketocdetail"))       Debug.output("i: " + i + ", pathname_pos[i]:"+ pathname_pos[i]);    }    Frame_sec_len=Frame_hdr_len + nFrames * Frame_index_rec_len + path_table_len;    fout.writeShort((short)RpfFileSections.LOC_BOUNDARY_SECTION_SUBHEADER);    fout.writeInt(Bound_hdr_len);    fout.writeInt(TOC_Nitf_hdr_size + RpfHeader.HEADER_SECTION_LENGTH + Loc_sec_len);    fout.writeShort((short)RpfFileSections.LOC_BOUNDARY_RECTANGLE_TABLE);    Bound_tbl_len=groupCount * Bound_rec_len;    fout.writeInt(Bound_tbl_len);    fout.writeInt(TOC_Nitf_hdr_size + RpfHeader.HEADER_SECTION_LENGTH + Loc_sec_len+ Bound_hdr_len);    Bound_sec_len=Bound_hdr_len + Bound_tbl_len;    fout.writeShort((short)RpfFileSections.LOC_FRAME_FILE_INDEX_SUBHEADER);    fout.writeInt(Frame_hdr_len);    fout.writeInt(TOC_Nitf_hdr_size + RpfHeader.HEADER_SECTION_LENGTH + Loc_sec_len+ Bound_sec_len);    fout.writeShort((short)RpfFileSections.LOC_FRAME_FILE_INDEX_SUBSECTION);    fout.writeInt(Frame_sec_len - Frame_hdr_len);    fout.writeInt(TOC_Nitf_hdr_size + RpfHeader.HEADER_SECTION_LENGTH + Loc_sec_len+ Bound_sec_len+ Frame_hdr_len);    if (Debug.debugging("maketoc")) {      Debug.output("MakeToc: boundary section at : " + fout.getFilePointer());    }    if (Debug.debugging("maketoc")) {      Debug.output("MakeToc: *** writing boundary rectangles ***");    }    fout.writeInt(0);    fout.writeShort((short)groupCount);    fout.writeShort((short)Bound_rec_len);    for (i=0; i < groupCount; i++) {      group=(Group)groups.elementAt(i);      if (group.cib) {        fout.writeBytes("CIB  ");        fout.writeBytes("8:1  ");      } else       if (group.cdted) {        fout.writeBytes("CDTED");        fout.writeBytes("6.5:1");      } else {        fout.writeBytes("CADRG");        fout.writeBytes("55:1 ");      }      if (group.scale.length() < 12) {        fout.writeBytes(group.scale);        fout.writeBytes(createPadding(12 - group.scale.length(),false));      } else {        fout.writeBytes(group.scale.substring(0,12));      }      charArray[0]=group.zone;      charString=new String(charArray);      fout.writeBytes(charString);      fout.writeBytes(producer);      if (group.zone == '9' || group.zone == 'J') {        ytop=group.horiz_pos[group.top];        ybottom=group.horiz_pos[group.bottom];        xleft=group.vert_pos[group.left];        xright=group.vert_pos[group.right];        if (Debug.debugging("maketoc")) {          Debug.output("POLAR ZONE. ytop: " + ytop + ", ybottom: "+ ybottom+ ", xleft: "+ xleft+ ", xright:"+ xright);        }        if (group.zone == '9') {          top=90 - (Math.sqrt((ytop * ytop) + (xleft * xleft)) * (group.h_interval));          bottom=90 - (Math.sqrt((ybottom * ybottom) + (xright * xright)) * (group.h_interval));        } else {          top=-90 + (Math.sqrt((ytop * ytop) + (xleft * xleft)) * (group.h_interval));          bottom=-90 + (Math.sqrt((ybottom * ybottom) + (xright * xright)) * (group.h_interval));        }        if (Debug.debugging("maketoc"))         Debug.output("LATS. top: " + top + ", bottom: "+ bottom);        if (group.zone == '9') {          left_t=180.0 / Math.PI * Math.acos(-ytop / Math.sqrt((ytop * ytop) + (xleft * xleft)));          left_b=180.0 / Math.PI * Math.acos(-ybottom / Math.sqrt((ybottom * ybottom) + (xleft * xleft)));          right_t=180.0 / Math.PI * Math.acos(-ytop / Math.sqrt((ytop * ytop) + (xright * xright)));          right_b=180.0 / Math.PI * Math.acos(-ybottom / Math.sqrt((ybottom * ybottom) + (xright * xright)));        } else {          left_t=180.0 / Math.PI * Math.acos(ytop / Math.sqrt((ytop * ytop) + (xleft * xleft)));          left_b=180.0 / Math.PI * Math.acos(ybottom / Math.sqrt((ybottom * ybottom) + (xleft * xleft)));          right_t=180.0 / Math.PI * Math.acos(ytop / Math.sqrt((ytop * ytop) + (xright * xright)));          right_b=180.0 / Math.PI * Math.acos(ybottom / Math.sqrt((ybottom * ybottom) + (xright * xright)));        }        if (xleft < 0) {          left_t=-left_t;          left_b=-left_b;        }        if (xright < 0) {          right_t=-right_t;          right_b=-right_b;        }        if (Debug.debugging("maketoc"))         Debug.output("LONGS. left_t: " + left_t + ", right_t: "+ right_t);        if (Debug.debugging("maketoc"))         Debug.output("LONGS. left_b: " + left_b + ", right_b: "+ right_b);      } else {        left_t=group.vert_pos[group.left];        left_b=left_t;        right_t=group.vert_pos[group.right];        right_b=right_t;        top=group.horiz_pos[group.top];        bottom=group.horiz_pos[group.bottom];      }      fout.writeDouble(top);      fout.writeDouble(left_t);      fout.writeDouble(bottom);      fout.writeDouble(left_b);      fout.writeDouble(top);      fout.writeDouble(right_t);      fout.writeDouble(bottom);      fout.writeDouble(right_b);      fout.writeDouble(group.v_resolution);      fout.writeDouble(group.h_resolution);      fout.writeDouble(group.v_interval);      fout.writeDouble(group.h_interval);      fout.writeInt((int)(group.bottom - group.top));      fout.writeInt((int)(group.right - group.left));    }    if (Debug.debugging("maketoc")) {      Debug.output("MakeToc: *** writing frame section ***");      Debug.output("MakeToc: started with a 'U'");    }    charArray[0]='U';    charString=new String(charArray);    fout.writeBytes(charString);    fout.writeInt(0);    fout.writeInt(nFrames);    fout.writeShort(uniq_dir_cnt);    fout.writeShort(Frame_index_rec_len);    for (i=0; i < nFrames; i++) {      frame=(Frame)frames.elementAt(i);      group=(Group)groups.elementAt(frame.group);      if (!frame.marked) {        Debug.error(frame.filename + ": not in a boundary rect??");      }      fout.writeShort(frame.group);      us=(short)(group.bottom - frame.y - 1);      if (Debug.debugging("maketocframedetail")) {        Debug.output("iframe: " + i + ", frame.y: "+ frame.y);        Debug.output("frame.group: " + frame.group);        Debug.output("group.bottom:" + group.bottom);        Debug.output("group.top:" + group.top);        Debug.output("frame row #:" + us);      }      fout.writeShort(us);      fout.writeShort((short)(frame.x - group.left));      fout.writeInt((int)(nFrames * Frame_index_rec_len + pathname_pos[i]));      String framename;      tail=frame.filename.lastIndexOf(File.separatorChar);      if (tail == -1) {        framename=frame.filename;      } else {        framename=frame.filename.substring(++tail);      }      if (framename.length() > 12) {        Debug.error("MakeToc: encountered a frame name that's too long!\n" + framename);        framename=framename.substring(0,12);      }      fout.writeBytes(framename);      String seriesCode=framename.substring(9,11);      if (!seriesCode.equalsIgnoreCase("OV") && !seriesCode.equalsIgnoreCase("LG") && !seriesCode.equalsIgnoreCase("OI")) {        if (frame.zone != '9' || frame.zone != 'J') {          georef=latlong2GEOREF(frame.swlat,frame.swlon);        } else {          georef=latlong2GEOREF(frame.bottom,frame.left);        }      } else {        if (Debug.debugging("maketoc"))         Debug.output("Overview image has no GEOREF");        georef="000000";      }      fout.writeBytes(georef);      fout.writeBytes(charString);      fout.writeBytes(head.country);      fout.writeBytes(head.release);    }    Debug.message("maketoc","MakeToc: *** writing directory section ***");    for (j=0; j < uniq_dir_cnt; j++) {      fout.writeShort((short)(uniq_dir[j].length()));      fout.writeBytes(uniq_dir[j]);    }    fout.seek(agg_loc);    fout.writeInt((int)(Bound_sec_len + Frame_sec_len));    fout.close();    Debug.message("maketoc","MakeToc: *** Normal end of make-toc ***");  } catch (  IOException ioe) {    throw new MakeTocException(ioe.getMessage());  }}  }
class C{  private void fireChangedAdded(final RPObject object,final RPObject changes){  for (  final RPSlot cslot : changes.slots()) {    if (cslot.size() != 0) {      fireChangedAdded(object,cslot);    }  }  listener.onChangedAdded(object,changes);  userListener.onChangedAdded(object,changes);}  }
class C{  public static <T>List<T> each(List<T> self,@ClosureParams(FirstParam.FirstGenericType.class) Closure closure){  return (List<T>)each((Iterable<T>)self,closure);}  }
class C{  public Transformerator(final ILookaheadTupleIterator<E> src,final Object context){  if (src == null)   throw new IllegalArgumentException();  this.src=src;  this.context=context;}  }
class C{  public String table(){  return tableName;}  }
class C{  public void paint(AttributedCharacterIterator aci,Point2D location,TextNode.Anchor anchor,Graphics2D g2d){  TextLayout layout=new TextLayout(aci,fontRenderContext);  float advance=layout.getAdvance();  float tx=0;switch (anchor.getType()) {case TextNode.Anchor.ANCHOR_MIDDLE:    tx=-advance / 2;  break;case TextNode.Anchor.ANCHOR_END:tx=-advance;}layout.draw(g2d,(float)(location.getX() + tx),(float)(location.getY()));}  }
class C{  protected void handleErrorResponseCode(int code,String message){  if (failSilently) {    failureErrorCode=code;    return;  }  if (responseCodeListeners != null) {    if (!isKilled()) {      NetworkEvent n=new NetworkEvent(this,code,message);      responseCodeListeners.fireActionEvent(n);    }    return;  }  if (Display.isInitialized() && !Display.getInstance().isMinimized() && Dialog.show("Error",code + ": " + message,"Retry","Cancel")) {    retry();  } else {    retrying=false;    if (!isReadResponseForErrors()) {      killed=true;    }  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value={"UC_USELESS_CONDITION","RpC_REPEATED_CONDITIONAL_TEST"},justification="isChanged value is dependent on which user button is activated") private void buildSwitchList(boolean isPreview,boolean isChanged,boolean isCsv,boolean isUpdate){  TrainSwitchLists trainSwitchLists=new TrainSwitchLists();  for (  JCheckBox checkbox : new ArrayList<JCheckBox>(locationCheckBoxes)) {    String locationName=checkbox.getName();    Location location=locationManager.getLocationByName(locationName);    if (location.isSwitchListEnabled()) {      if (!isCsv) {        trainSwitchLists.buildSwitchList(location);        if (!isUpdate && (!isChanged || (isChanged && (location.getStatus().equals(Location.MODIFIED) || location.getStatus().equals(Location.UPDATED))))) {          trainSwitchLists.printSwitchList(location,isPreview);        }      } else       if (Setup.isGenerateCsvSwitchListEnabled() && (!isChanged || (isChanged && location.getStatus().equals(Location.MODIFIED)))) {        TrainCsvSwitchLists trainCsvSwitchLists=new TrainCsvSwitchLists();        trainCsvSwitchLists.buildSwitchList(location);      }    }  }  TrainManager.instance().setTrainsSwitchListStatus(Train.PRINTED);}  }
class C{  public RVMMethod obtainTarget(){  return Call.getMethod(call).getTarget();}  }
class C{  public DOMX509Data(Element xdElem) throws MarshalException {  NodeList nl=xdElem.getChildNodes();  int length=nl.getLength();  List<Object> content=new ArrayList<Object>(length);  for (int i=0; i < length; i++) {    Node child=nl.item(i);    if (child.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    Element childElem=(Element)child;    String localName=childElem.getLocalName();    if (localName.equals("X509Certificate")) {      content.add(unmarshalX509Certificate(childElem));    } else     if (localName.equals("X509IssuerSerial")) {      content.add(new DOMX509IssuerSerial(childElem));    } else     if (localName.equals("X509SubjectName")) {      content.add(childElem.getFirstChild().getNodeValue());    } else     if (localName.equals("X509SKI")) {      try {        content.add(Base64.decode(childElem));      } catch (      Base64DecodingException bde) {        throw new MarshalException("cannot decode X509SKI",bde);      }    } else     if (localName.equals("X509CRL")) {      content.add(unmarshalX509CRL(childElem));    } else {      content.add(new javax.xml.crypto.dom.DOMStructure(childElem));    }  }  this.content=Collections.unmodifiableList(content);}  }
class C{  public void makeCircuitRPUFigure(String prefixA){  String cmd="perl " + _home + "/resources/scripts/make_gnuplot_rpu.pl "+ _output_directory+ " "+ prefixA;  String command_result=Util.executeCommand(cmd);}  }
class C{  public static void gaussianKernel(int rows,int cols,float sigma,FloatBuffer dest){  if ((rows & 1) == 0) {    throw new IllegalArgumentException("rows must be an odd number");  }  if ((cols & 1) == 0) {    throw new IllegalArgumentException("cols must be an odd number");  }  if (dest == null) {    throw new IllegalArgumentException("dest must not be null");  }  if (dest.remaining() < rows * cols) {    throw new IllegalArgumentException("dest must have at least " + (rows * cols) + " remaining values");  }  float sum=0.0f;  int pos=dest.position();  for (int i=0, y=-(rows - 1) / 2; y <= (rows - 1) / 2; y++) {    for (int x=-(cols - 1) / 2; x <= (cols - 1) / 2; x++, i++) {      float k=(float)Math.exp(-(y * y + x * x) / (2.0 * sigma * sigma));      dest.put(pos + i,k);      sum+=k;    }  }  for (int i=0; i < rows * cols; i++) {    dest.put(pos + i,dest.get(pos + i) / sum);  }}  }
class C{  public boolean executeProvenanceQuery(Repository repo) throws Exception {  if (!((BigdataSailRepository)repo).getDatabase().isStatementIdentifiers()) {    return false;  }  RepositoryConnection cxn=repo.getConnection();  cxn.setAutoCommit(false);  try {    cxn.remove((Resource)null,(URI)null,(Value)null);    cxn.commit();    cxn.add(getReader(getClass(),"provenance.rdf"),"",RDFFormat.RDFXML);    cxn.commit();    RepositoryResult<Statement> results=cxn.getStatements(null,null,null,false);    while (results.hasNext()) {      log.info(results.next());    }  } catch (  Exception ex) {    cxn.rollback();    throw ex;  } finally {    cxn.close();  }  if (repo instanceof BigdataSailRepository) {    cxn=((BigdataSailRepository)repo).getReadOnlyConnection();  } else {    cxn=repo.getConnection();  }  try {    RepositoryResult<Statement> results=cxn.getStatements(null,null,null,false);    while (results.hasNext()) {      log.info(results.next());    }  }  finally {    cxn.close();  }  String NS="http://www.bigdata.com/rdf#";  String MIKE=NS + "Mike";  String LOVES=NS + "loves";  String RDF=NS + "RDF";  String query="construct { ?sid ?p ?o } " + "where { " + "  ?sid ?p ?o ."+ "  graph ?sid { <" + MIKE + "> <"+ LOVES+ "> <"+ RDF+ "> } "+ "}";  executeConstructQuery(repo,query,QueryLanguage.SPARQL);  return true;}  }
class C{  public static void populateRequestMetadata(Map<String,String> headers,ObjectMetadata metadata){  if (metadata == null) {    return;  }  Map<String,Object> rawMetadata=metadata.getRawMetadata();  if (rawMetadata != null) {    for (    Map.Entry<String,Object> entry : rawMetadata.entrySet()) {      headers.put(entry.getKey(),entry.getValue().toString());    }  }  Map<String,String> userMetadata=metadata.getUserMetadata();  if (userMetadata != null) {    for (    Map.Entry<String,String> entry : userMetadata.entrySet()) {      String key=entry.getKey();      String value=entry.getValue();      if (key != null)       key=key.trim();      if (value != null)       value=value.trim();      headers.put(key,value);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.878 -0400",hash_original_method="25BE7F1A3C205E6611494C34BFEDC156",hash_generated_method="E85BD8A99A155BF179CB59A2650B80D8") public static void enable(){}  }
class C{  @Override public short[][] reduce_table(){  return _reduce_table;}  }
class C{  public cudaChannelFormatDesc(){}  }
class C{  public static void applyPinchZoomImage(ImageView mImageView){  mImageView.setOnTouchListener(new PinchZoom());}  }
class C{  public Quaternion idt(){  this.set(0,0,0,1);  return this;}  }
class C{  public static void logTradeOrder(com.ib.client.Order order){  _log.debug("OrderKey: " + +order.m_orderId + " ClientId: "+ order.m_clientId+ " PermId: "+ order.m_permId+ " Action: "+ order.m_action+ " TotalQuantity: "+ order.m_totalQuantity+ " OrderType: "+ order.m_orderType+ " LmtPrice: "+ order.m_lmtPrice+ " AuxPrice: "+ order.m_auxPrice+ " Tif: "+ order.m_tif+ " OcaGroup: "+ order.m_ocaGroup+ " OcaType: "+ order.m_ocaType+ " OrderRef: "+ order.m_orderRef+ " Transmit: "+ order.m_transmit+ " DisplaySize: "+ order.m_displaySize+ " TriggerMethod: "+ order.m_triggerMethod+ " Hidden: "+ order.m_hidden+ " ParentId: "+ order.m_parentId+ " GoodAfterTime: "+ order.m_goodAfterTime+ " GoodTillDate: "+ order.m_goodTillDate+ " TrailStopPrice: "+ order.m_trailStopPrice+ " TrailingPercent: "+ order.m_trailingPercent+ " OverridePercentageConstraints: "+ order.m_overridePercentageConstraints+ " AllOrNone: "+ order.m_allOrNone+ " Account: "+ order.m_account+ " FAGroup: "+ order.m_faGroup+ " FAMethod: "+ order.m_faMethod+ " FAPercent: "+ order.m_faPercentage+ " FAProfile: "+ order.m_faProfile);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SmashQueue(int threadPoolSize){  mDispatchers=new SmashDispatcher[threadPoolSize];}  }
class C{  public void removeConnection(TileEntity connection,ForgeDirection side){}  }
class C{  void dispose(){  end=0;  numCurves=0;  if (DO_STATS) {    rdrCtx.stats.stat_rdr_poly_stack_types.add(curveTypesUseMark);    rdrCtx.stats.stat_rdr_poly_stack_curves.add(curvesUseMark);    curveTypesUseMark=0;    curvesUseMark=0;  }  if (curves != curves_initial) {    rdrCtx.putDirtyFloatArray(curves);    curves=curves_initial;  }  if (curveTypes != curveTypes_initial) {    rdrCtx.putDirtyByteArray(curveTypes);    curveTypes=curveTypes_initial;  }}  }
class C{  public void addFilePart(String fieldName,File uploadFile) throws IOException {  addFilePart(fieldName,uploadFile,URLConnection.guessContentTypeFromName(uploadFile.getName()));}  }
class C{  private void toggleTransactionID(){  if (isCheckingValidity()) {    if (transactionID == (Short.MAX_VALUE * 2)) {      transactionID=0;    } else {      transactionID++;    }  }  request.setTransactionID(getTransactionID());}  }
class C{  public XYSplineRenderer(int precision){  this(precision,FillType.NONE);}  }
class C{  public static void rollbackFileSet(ZooKeeperManager zkManager,String fileSet,FileSetInfo fileSetInfo,int versionIndex) throws Exception {  List<FileSetInfo.ServingInfo> oldServingInfoList=fileSetInfo.oldServingInfoList;  if (versionIndex >= 0 && versionIndex < oldServingInfoList.size()) {    String currentHdfsPath=fileSetInfo.servingInfo.hdfsPath;    String rollbackHdfsPath=oldServingInfoList.get(versionIndex).hdfsPath;    fileSetInfo.servingInfo=oldServingInfoList.get(versionIndex);    fileSetInfo.oldServingInfoList=oldServingInfoList.subList(versionIndex + 1,oldServingInfoList.size());    zkManager.setFileSetInfo(fileSet,fileSetInfo);    LOG.info(String.format("successfully rollback %s from %s to %s",fileSet,currentHdfsPath,rollbackHdfsPath));  } else {    throw new IllegalArgumentException("version index is out of bound");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isPrepareError(){  return true;}  }
class C{  public String disabledStyleIfNoMatches(String type){  return (hasMatches(type)) ? "" : "class=\"disabled\"";}  }
class C{  public Object postMessage(String id,Object data){  Object obj=this.ctx.onMessage(id,data);  if (obj != null) {    return obj;  }  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      obj=plugin.onMessage(id,data);      if (obj != null) {        return obj;      }    }  }  return null;}  }
class C{  public static Scsn cs_lu(Scs A,Scss S,float tol){  Scs L, U;  Scsn N;  float pivot, Lx[], Ux[], x[], a, t;  int Lp[], Li[], Up[], Ui[], pinv[], xi[], q[], n, ipiv, k, top, p, i, col, lnz, unz;  if (!Scs_util.CS_CSC(A) || S == null)   return (null);  n=A.n;  q=S.q;  lnz=S.lnz;  unz=S.unz;  x=new float[n];  xi=new int[2 * n];  N=new Scsn();  N.L=L=Scs_util.cs_spalloc(n,n,lnz,true,false);  N.U=U=Scs_util.cs_spalloc(n,n,unz,true,false);  N.pinv=pinv=new int[n];  Lp=L.p;  Up=U.p;  for (i=0; i < n; i++)   x[i]=0;  for (i=0; i < n; i++)   pinv[i]=-1;  for (k=0; k <= n; k++)   Lp[k]=0;  lnz=unz=0;  for (k=0; k < n; k++) {    Lp[k]=lnz;    Up[k]=unz;    if (lnz + n > L.nzmax) {      Scs_util.cs_sprealloc(L,2 * L.nzmax + n);    }    if (unz + n > U.nzmax) {      Scs_util.cs_sprealloc(U,2 * U.nzmax + n);    }    Li=L.i;    Lx=L.x;    Ui=U.i;    Ux=U.x;    col=q != null ? (q[k]) : k;    top=Scs_spsolve.cs_spsolve(L,A,col,xi,x,pinv,true);    ipiv=-1;    a=-1;    for (p=top; p < n; p++) {      i=xi[p];      if (pinv[i] < 0) {        if ((t=Math.abs(x[i])) > a) {          a=t;          ipiv=i;        }      } else {        Ui[unz]=pinv[i];        Ux[unz++]=x[i];      }    }    if (ipiv == -1 || a <= 0)     return (null);    if (pinv[col] < 0 && Math.abs(x[col]) >= a * tol)     ipiv=col;    pivot=x[ipiv];    Ui[unz]=k;    Ux[unz++]=pivot;    pinv[ipiv]=k;    Li[lnz]=ipiv;    Lx[lnz++]=1;    for (p=top; p < n; p++) {      i=xi[p];      if (pinv[i] < 0) {        Li[lnz]=i;        Lx[lnz++]=x[i] / pivot;      }      x[i]=0;    }  }  Lp[n]=lnz;  Up[n]=unz;  Li=L.i;  for (p=0; p < lnz; p++)   Li[p]=pinv[Li[p]];  Scs_util.cs_sprealloc(L,0);  Scs_util.cs_sprealloc(U,0);  return N;}  }
class C{  @Override public void processKeyEvent(KeyEvent evt){  if (inputHandler == null) {    return;  }switch (evt.getID()) {case KeyEvent.KEY_TYPED:    inputHandler.keyTyped(evt);  break;case KeyEvent.KEY_PRESSED:inputHandler.keyPressed(evt);break;case KeyEvent.KEY_RELEASED:inputHandler.keyReleased(evt);break;}}  }
class C{  public void reset(){  parser.reset();  next=null;}  }
class C{  static boolean checkClosure(String profile){  boolean fail=false;  for (  Map.Entry<String,Set<String>> entry : unknownRefs.entrySet()) {    String target=entry.getKey();    for (    String origin : entry.getValue()) {      String value=allowedBadRefs.getProperty(target);      if (value == null) {        System.err.format("%s -> %s (unknown type)%n",origin,target);        fail=true;      } else {        boolean found=false;        boolean applicable=false;        for (        String s : value.split(",")) {          s=s.trim();          if (s.equals(origin))           found=true;          if (s.equals(profile))           applicable=true;        }        if (!found || !applicable) {          if (!found) {            System.err.format("%s -> %s (not allowed)%n",origin,target);          } else {            System.err.format("%s -> %s (reference not applicable to %s)%n",origin,target,profile);          }          fail=true;        }      }    }  }  return !fail;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_TYPE_DEFINITION__DEFINED_TYPE:    setDefinedType((Type)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static String formatNanosToSeconds(long time){  double sec=time / 1000000000d;  return nanosFormat.format(sec) + " s";}  }
class C{  protected boolean osDeleteFile(File file){  return file.delete();}  }
class C{  public void buildChain(){  chain=new MarkovChain();  SeriesReader seriesReader=new SeriesReader(series);  for (  String curr : seriesReader) {    curr=curr.replaceAll("\\(.*?\\)","");    curr=curr.replaceAll("\\[.*?\\]","");    curr=curr.trim();    if (curr.contains(keyPhrase)) {      System.out.println(curr);      if (cutToPhrase)       curr=curr.substring(curr.indexOf(keyPhrase));      String out=curr.trim() + "#";      if (!out.equals("#")) {        chain.addWords(out.trim());      }    }  }}  }
class C{  public InvitationObject(int id){  this.id=id;}  }
class C{  private Stream<KeyPair> createKeyPairBlockStream(final long size){  return range(0,size).parallel().mapToObj(null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:11.857 -0500",hash_original_method="AC508E1EC1805645807F80E8793DDCA5",hash_generated_method="61AE4AD3CB08912ADE9B987299285E5F") public EdgeEffect(Context context){  final Resources res=context.getResources();  mEdge=res.getDrawable(R.drawable.overscroll_edge);  mGlow=res.getDrawable(R.drawable.overscroll_glow);  mMinWidth=(int)(res.getDisplayMetrics().density * MIN_WIDTH + 0.5f);  mInterpolator=new DecelerateInterpolator();}  }
class C{  public boolean hasNext(){  checkTokenized();  return tokenPos < tokens.length;}  }
class C{  public void showNotificationNoSound(String title,String subtitle,int icon,Intent resultIntent){  PendingIntent pendingResultIntent=PendingIntent.getActivity(mContext,0,resultIntent,PendingIntent.FLAG_CANCEL_CURRENT);  Notification mBuilder=new NotificationCompat.Builder(mContext).setContentTitle(title).setContentText(subtitle).setSmallIcon(icon).setContentIntent(pendingResultIntent).setAutoCancel(true).build();  NotificationManagerCompat mNotifyMgr=NotificationManagerCompat.from(mContext);  mNotifyMgr.cancelAll();  mNotifyMgr.notify(0,mBuilder);}  }
class C{  public MatFileHeader(String description,int version,byte[] endianIndicator){  this.description=description;  this.version=version;  this.endianIndicator=endianIndicator;}  }
class C{  @Override public void configure(Context context){  springCfgPath=context.getString(IgniteSinkConstants.CFG_PATH);  cacheName=context.getString(IgniteSinkConstants.CFG_CACHE_NAME);  eventTransformerCls=context.getString(IgniteSinkConstants.CFG_EVENT_TRANSFORMER);  batchSize=context.getInteger(IgniteSinkConstants.CFG_BATCH_SIZE,DFLT_BATCH_SIZE);  if (sinkCounter == null)   sinkCounter=new SinkCounter(getName());}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public void testBug() throws Exception {  final BigdataSail sail=getSail();  try {    final BigdataSailRepository repo=new BigdataSailRepository(sail);    try {      repo.initialize();      String update1="insert data {  \r\n" + "  <x:s>	<http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.ft.com/ontology/thing/Thing> .\r\n" + "  <<<x:s>	<http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.ft.com/ontology/thing/Thing>  >> <http://www.ft.com/ontology/event/prov> <http://x>  \r\n"+ "}";      executeUpdate(repo,update1);      String update2="prefix rdf:          <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \r\n" + "insert data {  \r\n" + "  <x:s>	rdf:type <http://x/o> .\r\n"+ "  <<<x:s>	rdf:type <http://x/o>  >> <http://x/pr> <http://x/or>  \r\n"+ "}";      executeUpdate(new BigdataSailRepository(sail),update2);      String update3="prefix bbb: <http://x/> \r\n" + "insert data {   \r\n" + "  <x:a> rdf:type bbb:B .\r\n"+ "  << <x:a> rdf:type bbb:B >><x:pr> <x:pr> .\r\n"+ "}";      executeUpdate(new BigdataSailRepository(sail),update3);    }  finally {      repo.shutDown();    }  }  finally {    sail.__tearDownUnitTest();  }}  }
class C{  public static void eachDir(Path self,@ClosureParams(value=SimpleType.class,options="java.nio.file.Path") Closure closure) throws IOException {  eachFile(self,FileType.DIRECTORIES,closure);}  }
class C{  private void showHelp(){  if (help == null) {    File helpfile=new File("docs","editor-readme.txt");    help=new CommonHelpDialog(frame,helpfile);  }  help.setVisible(true);}  }
class C{  private void initialize(){  this.setContentPane(getJPanel());  this.pack();  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(406,133);  }}  }
class C{  public String saveAsocRegs(UseCaseConf useCaseConf,String asocRegsSelected,String primaryReg,int code,Integer bookId,Integer folderId) throws BookException {  Document doc=null;  String resultCode="10";switch (code) {case 0:    try {      Integer[] primario=BookUseCaseAsocRegsUtil.getAsocRegPrimario(useCaseConf,bookId,folderId);      if (primario != null) {        List listaRegs=BookUseCaseAsocRegsUtil.getAsocRegsResults(asocRegsSelected,useCaseConf.getLocale());        if (listaRegs != null && !listaRegs.isEmpty()) {          BookUseCaseAsocRegsUtil.saveAsocRegsSec(useCaseConf,listaRegs,primario[0],primario[1]);        }      }    } catch (    Exception e) {      resultCode="-1";    }  break;case 1:try {  List listaRegs=BookUseCaseAsocRegsUtil.getAsocRegsResults(asocRegsSelected,useCaseConf.getLocale());  if (listaRegs != null && !listaRegs.isEmpty()) {    Integer[] primario=BookUseCaseAsocRegsUtil.getAsocRegPrimario(useCaseConf,listaRegs);    if (primario != null) {      BookUseCaseAsocRegsUtil.saveAsocRegsSec(useCaseConf,primario[0],primario[1],bookId,folderId);    }  }} catch (Exception e) {  resultCode="-1";}break;case 2:try {AsocRegsResults regCurrent=new AsocRegsResults(bookId,folderId,"","","");List listaRegs=BookUseCaseAsocRegsUtil.getAsocRegsResults(asocRegsSelected,useCaseConf.getLocale());if (listaRegs == null) {listaRegs=new ArrayList();}if (!listaRegs.isEmpty()) {Integer[] primario=BookUseCaseAsocRegsUtil.getAsocRegPrimario(useCaseConf,listaRegs);listaRegs=BookUseCaseAsocRegsUtil.getNoAsocRegsResults(useCaseConf,listaRegs);listaRegs.add(regCurrent);if (primario != null) {  BookUseCaseAsocRegsUtil.saveAsocRegsSec(useCaseConf,listaRegs,primario[0],primario[1]);}}} catch (Exception e) {resultCode="-1";}break;case 3:try {List listaRegs=BookUseCaseAsocRegsUtil.getAsocRegsResults(asocRegsSelected,useCaseConf.getLocale());if (listaRegs != null && !listaRegs.isEmpty()) {AsocRegsResults asocRegsResults=(AsocRegsResults)listaRegs.get(0);BookUseCaseAsocRegsUtil.saveAsocRegsSec(useCaseConf,asocRegsResults.getBookId(),asocRegsResults.getFolderId(),bookId,folderId);}} catch (Exception e) {resultCode="-1";}break;case 4:try {List listaPrimaryRegs=BookUseCaseAsocRegsUtil.getAsocRegsResults(primaryReg,useCaseConf.getLocale());if (listaPrimaryRegs != null && !listaPrimaryRegs.isEmpty()) {AsocRegsResults asocRegsResultsPrimary=(AsocRegsResults)listaPrimaryRegs.get(0);List listaRegs=BookUseCaseAsocRegsUtil.getAsocRegsResults(asocRegsSelected,useCaseConf.getLocale());listaRegs=BookUseCaseAsocRegsUtil.filterRegsResultByCurrent(listaRegs,asocRegsResultsPrimary.getBookId(),asocRegsResultsPrimary.getFolderId());if (listaRegs == null) {listaRegs=new ArrayList();}AsocRegsResults regCurrent=new AsocRegsResults(bookId,folderId,"","","");listaRegs.add(regCurrent);BookUseCaseAsocRegsUtil.saveAsocRegsSec(useCaseConf,listaRegs,asocRegsResultsPrimary.getBookId(),asocRegsResultsPrimary.getFolderId());}} catch (Exception e) {resultCode="-1";}break;default :break;}doc=XMLAsocRegsValidate.createXMLAsocRegsValidate(resultCode,asocRegsSelected);OutputFormat format=OutputFormat.createPrettyPrint();format.setEncoding("UTF-8");StringWriter writer=new StringWriter();XMLWriter xmlWriter=new XMLWriter(writer,format);try {xmlWriter.write(doc);} catch (IOException e) {throw new BookException(BookException.ERROR_ASOCREGS_VALIDATED_SELECTED);}String xml=writer.toString();if (_logger.isDebugEnabled()) {_logger.debug(xml);}return xml;}  }
class C{  EncryptedPrivateKeyInfo(byte[] encoded) throws IOException {  DerValue val=new DerValue(encoded);  DerValue[] seq=new DerValue[2];  seq[0]=val.data.getDerValue();  seq[1]=val.data.getDerValue();  if (val.data.available() != 0) {    throw new IOException("overrun, bytes = " + val.data.available());  }  this.algid=AlgorithmId.parse(seq[0]);  if (seq[0].data.available() != 0) {    throw new IOException("encryptionAlgorithm field overrun");  }  this.encryptedData=seq[1].getOctetString();  if (seq[1].data.available() != 0)   throw new IOException("encryptedData field overrun");  this.encoded=encoded.clone();}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:08:59.983 -0500",hash_original_method="1EB83165D4FFE21B80D3B0941C45F1A7",hash_generated_method="12810EE045ABDAD97226FEC44D830099") public int read() throws IOException {  int r=read(singleByte,0,1);  while (r == 0) {    r=read(singleByte,0,1);  }  if (r > 0) {    return singleByte[0] < 0 ? 256 + singleByte[0] : singleByte[0];  }  return -1;}  }
class C{  @Override public boolean supportsCorrelatedSubqueries(){  debugCodeCall("supportsCorrelatedSubqueries");  return true;}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInStoppedState);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(stateErrors.errorInErrorState);  assertTrue(stateErrors.errorInIdleStateAfterReset);  assertTrue(stateErrors.errorInIdleState);}  }
class C{  protected void applyUseSchema(String schema) throws SQLException {  boolean schemaSet=false;  if (schema != null && schema.length() > 0 && !schema.equals(this.currentSchema)) {    currentSchema=schema;    if (conn.supportsUseDefaultSchema()) {      String useQuery=conn.getUseSchemaQuery(schema);      if (logger.isDebugEnabled()) {        logger.debug("Setting default schema: " + useQuery);      }      statement.addBatch(useQuery);      schemaSet=true;    }  }  if (!schemaSet) {    if (logger.isDebugEnabled()) {      logger.debug("Schema was not set: schema=" + schema + " currentSchema="+ currentSchema);    }  }}  }
class C{  public SuggestionsBuilder changeGroup(final boolean main){  myCurrentGroup=(main ? myMainGroup : myPrefixGroup);  return this;}  }
class C{  public void addView(GoToButton newOne){  ensureCustomViews().add(newOne);  add(newOne);  revalidate();}  }
class C{  public void addObject(Object object,Comparable rowKey,Comparable columnKey){  setObject(object,rowKey,columnKey);}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  public RequestBuilder withEnvVars(Map<String,String> envVars){  this.envVars=envVars;  return this;}  }
class C{  public int valueInt(int index) throws Exception {  if (m_type != ArrayType.INT && m_type != ArrayType.INT_SPARSE) {    throw new Exception("[Array] Array does not contain integers!");  }  return Integer.parseInt(value(index));}  }
class C{  public void tagShowFrame() throws IOException {  tags.tag(TAG_SHOWFRAME,false,null);}  }
class C{  public void sendFile(File file,String rootPassword,String sshPort,String address,String destParentDirectory) throws CheckException {  sendFile(file,"root",rootPassword,sshPort,address,destParentDirectory);}  }
class C{  public static Date fixEncounterDateTime(Date datetime){  Date now=new Date();  if (datetime.after(now)) {    datetime=now;  }  return datetime;}  }
class C{  private boolean isPublicTestMethod(Method m){  return isTestMethod(m) && Modifier.isPublic(m.getModifiers());}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void putAll(Map<? extends Integer,? extends Integer> map){  Iterator<? extends Entry<? extends Integer,? extends Integer>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Integer,? extends Integer> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public JSONObject toJSON() throws JSONException {  JSONObject json=new JSONObject();  if (entries.size() > 0) {    JSONObject history=new JSONObject();    for (    Entry e : entries) {      history.put(e.pushId,e.timestamp);    }    json.put("seen",history);  }  json.putOpt("lastTime",lastTime);  return json;}  }
class C{  void refresh(){  if (system.getDomain().isEmpty()) {    lines.setToolTipText("No dialogue domain currently selected");    inputField.setToolTipText("No dialogue domain currently selected");  } else {    lines.setToolTipText(null);    inputField.setToolTipText(null);  }}  }
class C{  public RuntimeExceptionConfig(){}  }
class C{  public TStructMember basicGetDefinedMember(){  return definedMember;}  }
class C{  public NodeSetDTM(NodeSetDTM nodelist){  super();  m_manager=nodelist.getDTMManager();  m_root=nodelist.getRoot();  addNodes((DTMIterator)nodelist);}  }
class C{  public static GridEmbeddedHttpServer startHttpsServer() throws Exception {  return createAndStart(true);}  }
class C{  public int load32(int addr){  return load32(addr,AccessSource.CODE);}  }
class C{  private boolean checkHeader() throws IOException {  long pos=raf.getPos();  byte[] buf=new byte[headerbytes.length];  int n=raf.read(buf);  if (n < headerbytes.length) {    return false;  }  n=lastIndexOf(buf,headerbytes,0,buf.length - 1);  raf.seek(pos);  if (n == -1) {    return false;  } else {    return true;  }}  }
class C{  public JPaymentDebt(JPaymentNotifier notifier){  this.notifier=notifier;  initComponents();  m_jTendered.addPropertyChangeListener("Edition",new RecalculateState());  m_jTendered.addEditorKeys(m_jKeys);}  }
class C{  public static JNIWriter instance(Context context){  JNIWriter instance=context.get(jniWriterKey);  if (instance == null)   instance=new JNIWriter(context);  return instance;}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  public VelocityTextGuesser(){  fType=TYPE_INVALID;  fText="";  fLine=-1;}  }
class C{  private static void printStats(SessionFactory sesFactory){  System.out.println("=== Hibernate L2 cache statistics ===");  for (  String entityName : ENTITY_NAMES) {    System.out.println("\tEntity: " + entityName);    SecondLevelCacheStatistics stats=sesFactory.getStatistics().getSecondLevelCacheStatistics(entityName);    System.out.println("\t\tPuts: " + stats.getPutCount());    System.out.println("\t\tHits: " + stats.getHitCount());    System.out.println("\t\tMisses: " + stats.getMissCount());  }  System.out.println("=====================================");}  }
class C{  private boolean showUncompressedSynapseGroupWarning(){  boolean showPanel=false;  for (  SynapseGroup group : networkPanel.getNetwork().getSynapseGroups()) {    if (group.getAllSynapses().size() > saveWarningThreshold) {      if (!group.isUseGroupLevelSettings()) {        showPanel=true;      }    }  }  if (showPanel) {    int n=JOptionPane.showConfirmDialog(null,"<html><body><p style='width: 200px;'>You are saving at least one large synapse group without compression. " + "It is reccomended that you enable 'optimize as group' in all large synapse groups so that " + "their weight matrices are compressed.   Otherwise the save will take a "+ "long time and the saved file will be large. Click Cancel to go ahead with the save, "+ "and OK to return to the network and change settings.</body></html>","Save Warning",JOptionPane.OK_CANCEL_OPTION);    if (n == JOptionPane.OK_OPTION) {      return false;    }  }  return true;}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public static Object instantiate(ClassLoader cls,String beanName,BeanContext beanContext,AppletInitializer initializer) throws IOException, ClassNotFoundException {  InputStream ins;  ObjectInputStream oins=null;  Object result=null;  boolean serialized=false;  IOException serex=null;  if (cls == null) {    try {      cls=ClassLoader.getSystemClassLoader();    } catch (    SecurityException ex) {    }  }  final String serName=beanName.replace('.','/').concat(".ser");  if (cls == null)   ins=ClassLoader.getSystemResourceAsStream(serName); else   ins=cls.getResourceAsStream(serName);  if (ins != null) {    try {      if (cls == null) {        oins=new ObjectInputStream(ins);      } else {        oins=new ObjectInputStreamWithLoader(ins,cls);      }      result=oins.readObject();      serialized=true;      oins.close();    } catch (    IOException ex) {      ins.close();      serex=ex;    }catch (    ClassNotFoundException ex) {      ins.close();      throw ex;    }  }  if (result == null) {    Class<?> cl;    try {      cl=ClassFinder.findClass(beanName,cls);    } catch (    ClassNotFoundException ex) {      if (serex != null) {        throw serex;      }      throw ex;    }    if (!Modifier.isPublic(cl.getModifiers())) {      throw new ClassNotFoundException("" + cl + " : no public access");    }    try {      result=cl.newInstance();    } catch (    Exception ex) {      throw new ClassNotFoundException("" + cl + " : "+ ex,ex);    }  }  if (result != null) {    AppletStub stub=null;    if (result instanceof Applet) {      Applet applet=(Applet)result;      boolean needDummies=initializer == null;      if (needDummies) {        final String resourceName;        if (serialized) {          resourceName=beanName.replace('.','/').concat(".ser");        } else {          resourceName=beanName.replace('.','/').concat(".class");        }        URL objectUrl=null;        URL codeBase=null;        URL docBase=null;        if (cls == null) {          objectUrl=ClassLoader.getSystemResource(resourceName);        } else         objectUrl=cls.getResource(resourceName);        if (objectUrl != null) {          String s=objectUrl.toExternalForm();          if (s.endsWith(resourceName)) {            int ix=s.length() - resourceName.length();            codeBase=new URL(s.substring(0,ix));            docBase=codeBase;            ix=s.lastIndexOf('/');            if (ix >= 0) {              docBase=new URL(s.substring(0,ix + 1));            }          }        }        BeansAppletContext context=new BeansAppletContext(applet);        stub=(AppletStub)new BeansAppletStub(applet,context,codeBase,docBase);        applet.setStub(stub);      } else {        initializer.initialize(applet,beanContext);      }      if (beanContext != null) {        unsafeBeanContextAdd(beanContext,result);      }      if (!serialized) {        applet.setSize(100,100);        applet.init();      }      if (needDummies) {        ((BeansAppletStub)stub).active=true;      } else       initializer.activate(applet);    } else     if (beanContext != null)     unsafeBeanContextAdd(beanContext,result);  }  return result;}  }
class C{  public synchronized void warning(String sourceClass,String sourceMethod,String msg,Object[] params){  LogRecord record=new LogRecord(Level.WARNING,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  log(record);}  }
class C{  ElementCreatorImpl build(ElementKey<?,?> parent,ElementKey<?,?> key,MetadataContext context){  Preconditions.checkNotNull(key,"key");  TransformKey transformKey=TransformKey.forTransform(parent,key,context);synchronized (root) {    ElementCreatorImpl creator=creators.get(transformKey);    if (creator == null) {      creator=new ElementCreatorImpl(root,transformKey);      creators.put(transformKey,creator);      root.dirty();    }    return creator;  }}  }
class C{  public static void registerPacketHandler(PacketHandlerBase handler,byte id){  if (packethandlers.get(id) != null) {    throw new RuntimeException("Multiple id registrations for packet type on " + CHANNEL + " channel");  }  packethandlers.put(id,handler);  idmap.put(handler.getClass(),id);}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeBoolean(isLeaf);  out.writeInt(numEntries);}  }
class C{  public static String toString(JSONArray names,JSONArray ja) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  StringBuffer sb=new StringBuffer();  for (int i=0; i < ja.length(); i+=1) {    JSONObject jo=ja.optJSONObject(i);    if (jo != null) {      sb.append(rowToString(jo.toJSONArray(names)));    }  }  return sb.toString();}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public static void resetOmniPositionState(){  if (!OmniboxAnimations.isBottom())   publicWebRenderLayout.setTranslationY(omnibox.getHeight()); else   publicWebRenderLayout.setTranslationY(0);  omnibox.setTranslationY(0);  publicWebRenderLayout.setScrollY(0);  publicWebRenderLayout.setScrollX(0);}  }
class C{  public final void add(Matrix4f m1,Matrix4f m2){  this.m00=m1.m00 + m2.m00;  this.m01=m1.m01 + m2.m01;  this.m02=m1.m02 + m2.m02;  this.m03=m1.m03 + m2.m03;  this.m10=m1.m10 + m2.m10;  this.m11=m1.m11 + m2.m11;  this.m12=m1.m12 + m2.m12;  this.m13=m1.m13 + m2.m13;  this.m20=m1.m20 + m2.m20;  this.m21=m1.m21 + m2.m21;  this.m22=m1.m22 + m2.m22;  this.m23=m1.m23 + m2.m23;  this.m30=m1.m30 + m2.m30;  this.m31=m1.m31 + m2.m31;  this.m32=m1.m32 + m2.m32;  this.m33=m1.m33 + m2.m33;}  }
class C{  public void addCustomParser(SpiderParser parser){  validateParameterNonNull(parser,"parser");  this.customParsers.add(parser);}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  static int makeTag(final int fieldNumber,final int wireType){  return (fieldNumber << TAG_TYPE_BITS) | wireType;}  }
class C{  void put(String id,T t){  objectIDs.put(id,t);  typeObjectIDs.put(t,id);}  }
class C{  public OutputChannel send(){  try {    return output.get();  } catch (  ConcurrentException ex) {    throw new RuntimeException("Could not generate OutputChannel for " + getName(),ex);  }}  }
class C{  public T caseContinueStatement(ContinueStatement object){  return null;}  }
class C{  public Builder color(@ColorInt int color){  mColor=color;  return this;}  }
class C{  public void generateCode(ClassScope classScope){  if ((this.bits & ASTNode.HasBeenGenerated) != 0)   return;  if (this.binding != null) {    SyntheticArgumentBinding[] enclosingInstances=((NestedTypeBinding)this.binding).syntheticEnclosingInstances();    for (int i=0, slotSize=0, count=enclosingInstances == null ? 0 : enclosingInstances.length; i < count; i++) {      SyntheticArgumentBinding enclosingInstance=enclosingInstances[i];      enclosingInstance.resolvedPosition=++slotSize;      if (slotSize > 0xFF) {        classScope.problemReporter().noMoreAvailableSpaceForArgument(enclosingInstance,classScope.referenceType());      }    }  }  generateCode();}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.041 -0500",hash_original_method="A95CEE47ED6D08FEFE672AAA66725922",hash_generated_method="0AB6F4FFFBE41D5DDFA26AA1238B2C05") @SuppressWarnings({"UnusedParameters"}) public BitmapDrawable(Resources res,java.io.InputStream is){  this(new BitmapState(BitmapFactory.decodeStream(is)),null);  mBitmapState.mTargetDensity=mTargetDensity;  if (mBitmap == null) {    android.util.Log.w("BitmapDrawable","BitmapDrawable cannot decode " + is);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.785 -0500",hash_original_method="8145A6EACBA97C57F61472FF031DA600",hash_generated_method="01E0841E6BF347E7D560F63EBEB8A44D") public SAXNotSupportedException(){}  }
class C{  private static Object parse(XMLTokener x,boolean arrayForm,JSONArray ja) throws JSONException {  String attribute;  char c;  String closeTag=null;  int i;  JSONArray newja=null;  JSONObject newjo=null;  Object token;  String tagName=null;  while (true) {    if (!x.more()) {      throw x.syntaxError("Bad XML");    }    token=x.nextContent();    if (token == XML.LT) {      token=x.nextToken();      if (token instanceof Character) {        if (token == XML.SLASH) {          token=x.nextToken();          if (!(token instanceof String)) {            throw new JSONException("Expected a closing name instead of '" + token + "'.");          }          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped close tag");          }          return token;        } else         if (token == XML.BANG) {          c=x.next();          if (c == '-') {            if (x.next() == '-') {              x.skipPast("-->");            } else {              x.back();            }          } else           if (c == '[') {            token=x.nextToken();            if (token.equals("CDATA") && x.next() == '[') {              if (ja != null) {                ja.put(x.nextCDATA());              }            } else {              throw x.syntaxError("Expected 'CDATA['");            }          } else {            i=1;            do {              token=x.nextMeta();              if (token == null) {                throw x.syntaxError("Missing '>' after '<!'.");              } else               if (token == XML.LT) {                i+=1;              } else               if (token == XML.GT) {                i-=1;              }            } while (i > 0);          }        } else         if (token == XML.QUEST) {          x.skipPast("?>");        } else {          throw x.syntaxError("Misshaped tag");        }      } else {        if (!(token instanceof String)) {          throw x.syntaxError("Bad tagName '" + token + "'.");        }        tagName=(String)token;        newja=new JSONArray();        newjo=new JSONObject();        if (arrayForm) {          newja.put(tagName);          if (ja != null) {            ja.put(newja);          }        } else {          newjo.put("tagName",tagName);          if (ja != null) {            ja.put(newjo);          }        }        token=null;        for (; ; ) {          if (token == null) {            token=x.nextToken();          }          if (token == null) {            throw x.syntaxError("Misshaped tag");          }          if (!(token instanceof String)) {            break;          }          attribute=(String)token;          if (!arrayForm && ("tagName".equals(attribute) || "childNode".equals(attribute))) {            throw x.syntaxError("Reserved attribute.");          }          token=x.nextToken();          if (token == XML.EQ) {            token=x.nextToken();            if (!(token instanceof String)) {              throw x.syntaxError("Missing value");            }            newjo.accumulate(attribute,XML.stringToValue((String)token));            token=null;          } else {            newjo.accumulate(attribute,"");          }        }        if (arrayForm && newjo.length() > 0) {          newja.put(newjo);        }        if (token == XML.SLASH) {          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          if (ja == null) {            if (arrayForm) {              return newja;            } else {              return newjo;            }          }        } else {          if (token != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          closeTag=(String)parse(x,arrayForm,newja);          if (closeTag != null) {            if (!closeTag.equals(tagName)) {              throw x.syntaxError("Mismatched '" + tagName + "' and '"+ closeTag+ "'");            }            tagName=null;            if (!arrayForm && newja.length() > 0) {              newjo.put("childNodes",newja);            }            if (ja == null) {              if (arrayForm) {                return newja;              } else {                return newjo;              }            }          }        }      }    } else {      if (ja != null) {        ja.put(token instanceof String ? XML.stringToValue((String)token) : token);      }    }  }}  }
class C{  public Map<String,Set<URI>> findRESTExportMasks(StorageSystem storage,List<String> initiatorNames,boolean mustHaveAllPorts){  long startTime=System.currentTimeMillis();  Map<String,Set<URI>> matchingMasks=new HashMap<String,Set<URI>>();  try {    final String storageIP=storage.getSmisProviderIP();    XIVRestClient restExportOpr=getRestClient(storage);    StringBuilder builder=new StringBuilder();    for (    String initiatorName : initiatorNames) {      final String hostName=restExportOpr.getHostPortContainer(storageIP,initiatorName);      Set<String> exportMaskNames=new HashSet<String>();      if (null != hostName) {        exportMaskNames.add(hostName);        final String clusterNames=restExportOpr.getHostContainer(storageIP,hostName);        if (null != clusterNames) {          exportMaskNames.add(clusterNames);        }      }      for (      String exportMaskName : exportMaskNames) {        URIQueryResultList uriQueryList=new URIQueryResultList();        _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportMaskByNameConstraint(exportMaskName),uriQueryList);        ExportMask exportMask=null;        while (uriQueryList.iterator().hasNext()) {          URI uri=uriQueryList.iterator().next();          exportMask=_dbClient.queryObject(ExportMask.class,uri);          if (exportMask != null && !exportMask.getInactive() && exportMask.getStorageDevice().equals(storage.getId())) {            ExportMaskUtils.sanitizeExportMaskContainers(_dbClient,exportMask);            _dbClient.updateAndReindexObject(exportMask);            Set<URI> maskURIs=matchingMasks.get(initiatorName);            if (maskURIs == null) {              maskURIs=new HashSet<URI>();              matchingMasks.put(initiatorName,maskURIs);            }            maskURIs.add(exportMask.getId());            break;          }        }        Initiator initiator=ExportUtils.getInitiator(Initiator.toPortNetworkId(initiatorName),_dbClient);        if (null != initiator && null != initiator.getHost()) {          Host hostIns=_dbClient.queryObject(Host.class,initiator.getHost());          String label=hostIns.getLabel();          if (label.equals(exportMaskName)) {            unsetTag(hostIns,storage.getSerialNumber());          } else {            setTag(hostIns,storage.getSerialNumber(),exportMaskName);          }        }      }    }    _log.info(builder.toString());  } catch (  Exception e) {    String msg="Error when attempting to query LUN masking information: " + e.getMessage();    _log.error(MessageFormat.format("Encountered an SMIS error when attempting to query existing exports: {0}",msg),e);    throw XIVRestException.exceptions.queryExistingMasksFailure(msg,e);  } finally {    long totalTime=System.currentTimeMillis() - startTime;    _log.info(String.format("findExportMasks took %f seconds",(double)totalTime / (double)1000));  }  return matchingMasks;}  }
class C{  public boolean isAggregationPacket(){  return decodeNalUnitType == NalUnitType.STAP_A || decodeNalUnitType == NalUnitType.STAP_B || decodeNalUnitType == NalUnitType.MTAP16 || decodeNalUnitType == NalUnitType.MTAP24;}  }
class C{  private void scaleComponent(final FormObject formObject,final int rotate,final Region curComp,final boolean redraw,int indent,final boolean isPrinting){  float scale=1f;  if (curComp == null || formObject.getPageNumber() == -1) {    return;  }  final int curPage=formObject.getPageNumber();  if (layers != null) {    final String layerName=formObject.getLayerName();    if (layerName != null && layers.isLayerName(layerName)) {      final boolean isVisible=layers.isVisible(layerName);      curComp.setVisible(isVisible);    }  }  final int[] bounds;  if (formObject.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Popup && !isPrinting) {    bounds=cropComponent(formObject,scale,rotate,redraw,true);  } else {    bounds=cropComponent(formObject,scale,rotate,redraw,false);  }  if (xReached != null) {    bounds[0]+=xReached[curPage];    bounds[1]+=yReached[curPage];  }  final int pageWidth;  final int pageHeight;  if ((pageData.getRotation(curPage) + rotate) % 180 == 90) {    pageWidth=pageData.getCropBoxHeight(curPage);    pageHeight=pageData.getCropBoxWidth(curPage);  } else {    pageWidth=pageData.getCropBoxWidth(curPage);    pageHeight=pageData.getCropBoxHeight(curPage);  }  if (displayView == Display.CONTINUOUS) {    final double newIndent;    if (rotate == 0 || rotate == 180) {      newIndent=(widestPageNR - (pageWidth)) / 2;    } else {      newIndent=(widestPageR - (pageWidth)) / 2;    }    indent=(int)(indent + (newIndent * scale));  }  final int totalOffsetX=userX + indent;  final int totalOffsetY=userY;  curComp.setPrefWidth(bounds[2]);  curComp.setPrefHeight(bounds[3]);  curComp.setTranslateX(totalOffsetX + bounds[0]);  curComp.setTranslateY((pageHeight - (totalOffsetY + bounds[1])));  curComp.getTransforms().clear();  curComp.getTransforms().add(Transform.affine(1,0,0,-1,0,0));}  }
class C{  private static boolean isImagesResized(String filename,int TargetSize){  File sizeFile=new File(filename);  return false;}  }
class C{  public static ExceptionBuilder forbidden(){  return new ExceptionBuilder(Status.FORBIDDEN);}  }
class C{  public void math(final int op,final Type type){  mv.visitInsn(type.getOpcode(op));}  }
class C{  private static int availableCapacity(Buffer buffer){  return buffer.capacity() - buffer.limit();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public boolean visitLocationPath(ExpressionOwner owner,LocPathIterator path){  if (path instanceof SelfIteratorNoPredicate) {    return true;  } else   if (path instanceof WalkingIterator) {    WalkingIterator wi=(WalkingIterator)path;    AxesWalker aw=wi.getFirstWalker();    if ((aw instanceof FilterExprWalker) && (null == aw.getNextWalker())) {      FilterExprWalker few=(FilterExprWalker)aw;      Expression exp=few.getInnerExpression();      if (exp instanceof Variable)       return true;    }  }  if (isAbsolute(path) && (null != m_absPaths)) {    if (DEBUG)     validateNewAddition(m_absPaths,owner,path);    m_absPaths.addElement(owner);  } else   if (m_isSameContext && (null != m_paths)) {    if (DEBUG)     validateNewAddition(m_paths,owner,path);    m_paths.addElement(owner);  }  return true;}  }
class C{  public boolean isOnline(){  return (ONLINE.equals(status));}  }
class C{  @Nullable private IgfsPath convert(@Nullable Path path){  if (path == null)   return null;  return path.isAbsolute() ? new IgfsPath(path.toUri().getPath()) : new IgfsPath(convert(workingDir),path.toUri().getPath());}  }
class C{  public boolean isCached(String pointsetId){  return new File(POINT_DIR,pointsetId + ".json").exists();}  }
class C{  public static void main(String[] args) throws Throwable {  if (args.length == 0) {    System.err.println("Usage: abcdump [-b] [-c mx.core:UIObject] [-m setColor] [-l 10-15] foo.abc");    System.err.println();    System.err.println("  -b:                     include opcodes in the output");    System.err.println("  -c className:           restrict output to the specified class");    System.err.println("  -m methodName:          restrict output to the specified method");    System.err.println("  -l startLine[-endLine]: restrict output to the specified line(s)");    return;  }  for (int i=0, argc=args.length; i < argc; i++) {    if ("-c".equals(args[i])) {      className=args[i + 1].intern();      i++;    } else     if ("-m".equals(args[i])) {      methodName=args[i + 1].intern();      i++;    } else     if ("-l".equals(args[i])) {      String lineRange=args[i + 1];      int index=lineRange.indexOf("-");      if (index != -1) {        startLine=Integer.parseInt(lineRange.substring(0,index));        endLine=Integer.parseInt(lineRange.substring(index + 1));      } else {        startLine=Integer.parseInt(lineRange);        endLine=startLine + 1;      }      i++;    } else     if ("-b".equals(args[i])) {      showOpcodes=true;    } else     if (i == argc - 1) {      fileName=args[i];    }  }  byte[] bytecodes=readBytes(new File(fileName));  BytecodeBuffer in=new BytecodeBuffer(bytecodes);  decoder=new Decoder(in);  processScripts();}  }
class C{  private Query readTextQuery(BinaryRawReader reader){  boolean loc=reader.readBoolean();  String txt=reader.readString();  String typ=reader.readString();  final int pageSize=reader.readInt();  return new TextQuery(typ,txt).setPageSize(pageSize).setLocal(loc);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue03.class,args);}  }
class C{  public ClusterControl connectToNodeInCluster(ClientSessionFactoryInternal sf){  sf.getServerLocator().setProtocolManagerFactory(ActiveMQServerSideProtocolManagerFactory.getInstance(sf.getServerLocator()));  return new ClusterControl(sf,server);}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  private void updatePanels(){  pnlGeneral.updateInfo();  pnlPageSetup.updateInfo();  pnlAppearance.updateInfo();}  }
class C{  public void append(int b){  if (_length + 1 > _capacity)   ensureCapacity(_length + 1);  _buffer[_length++]=(byte)b;}  }
class C{  public boolean supportsUserTokenType(EndpointDescription endpoint,UserTokenType type){  return findUserTokenPolicy(type) != null;}  }
class C{  public tt addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public final void dump(final DataOutputStream file) throws IOException {  super.dump(file);  file.writeShort(map.length);  for (  StackMapTableEntry entry : map) {    entry.dump(file);  }}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  @Override public void doRun(){  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"doRun","Packet received:\n" + SnmpMessage.dumpHexBuffer(packet.getData(),0,packet.getLength()));  }  DatagramPacket respPacket=makeResponsePacket(packet);  if ((SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) && (respPacket != null)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"doRun","Packet to be sent:\n" + SnmpMessage.dumpHexBuffer(respPacket.getData(),0,respPacket.getLength()));  }  if (respPacket != null) {    try {      socket.send(respPacket);    } catch (    SocketException e) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        if (e.getMessage().equals(InterruptSysCallMsg)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"doRun","interrupted");        } else {          SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"doRun","I/O exception",e);        }      }    }catch (    InterruptedIOException e) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"doRun","interrupted");      }    }catch (    Exception e) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"doRun","failure when sending response",e);      }    }  }}  }
class C{  public InvalidDatabaseVersionException(final Exception exception){  super(exception);}  }
class C{  public ProxyData(GlowSession session,String sourceText) throws Exception {  try {    JSONObject payload=(JSONObject)new JSONParser().parse(sourceText);    securityKey=(String)payload.get("s");    name=(String)payload.get("n");    hostname=(String)payload.get("h");    uuid=UuidUtils.fromFlatString((String)payload.get("u"));    address=new InetSocketAddress((String)payload.get("rIp"),((Long)payload.get("rP")).intValue());    if (payload.containsKey("p")) {      JSONArray props=(JSONArray)payload.get("p");      properties=new ArrayList<>(props.size());      for (      Object obj : props) {        JSONObject prop=(JSONObject)obj;        String propName=(String)prop.get("n");        String value=(String)prop.get("v");        String signature=(String)prop.get("s");        properties.add(new PlayerProperty(propName,value,signature));      }    } else {      properties=new ArrayList<>(0);    }    return;  } catch (  ParseException ignored) {  }  String[] parts=sourceText.split("\0");  if (parts.length != 3 && parts.length != 4) {    throw new IllegalArgumentException("parts length was " + parts.length + ", should be 3 or 4");  }  name=null;  securityKey=null;  hostname=parts[0];  address=new InetSocketAddress(parts[1],session.getAddress().getPort());  uuid=UuidUtils.fromFlatString(parts[2]);  if (parts.length == 4) {    JSONArray jsonProperties=(JSONArray)new JSONParser().parse(parts[3]);    properties=new ArrayList<>(jsonProperties.size());    for (    Object obj : jsonProperties) {      JSONObject propJson=(JSONObject)obj;      String propName=(String)propJson.get("name");      String value=(String)propJson.get("value");      String signature=(String)propJson.get("signature");      properties.add(new PlayerProperty(propName,value,signature));    }  } else {    properties=new ArrayList<>(0);  }}  }
class C{  public boolean canUndo(){  return ((DataTableModel)getModel()).canUndo();}  }
class C{  @Override public boolean isParameterSet(String key){  return getParameters().isSet(key);}  }
class C{  public SingleOutcome(double[] goldstandard,double[] prediction,List<String> labels,String id){  this.goldstandard=goldstandard;  this.prediction=prediction;  this.bipartitionThreshold=-1;  this.labels=labels;  this.setId(id);}  }
class C{  protected double unwrap(Object value){  return ((Double)value).doubleValue();}  }
class C{  public boolean removeEventListener(PeerEventListener listener){  return ListenerRegistration.removeFromList(listener,peerEventListeners);}  }
class C{  public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  public static RMID createRMID(){  return createRMID(System.out,System.err,true);}  }
class C{  public static void generateErrorException(final String errCode,final Object[] errParams,final Logger logger){  generateErrorException(errCode,null,logger,null);}  }
class C{  public VariableTypeAttributes clone(){  VariableTypeAttributes result=new VariableTypeAttributes();  result.SpecifiedAttributes=SpecifiedAttributes;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  result.Value=Value;  result.DataType=DataType;  result.ValueRank=ValueRank;  result.ArrayDimensions=ArrayDimensions == null ? null : ArrayDimensions.clone();  result.IsAbstract=IsAbstract;  return result;}  }
class C{  public final boolean hasDataAuthority(Uri data){  return matchDataAuthority(data) >= 0;}  }
class C{  private static String removeTemplateMarker(String str){  return str.replaceAll("\\{\\{(.*?)\\}\\}","");}  }
class C{  public void end(){  if (!hasStarted)   throw new RuntimeException("timer " + name + " has not been started!"); else   hasStarted=false;  duration+=System.currentTimeMillis() - startTime;  if (!G.v().Timer_isGarbageCollecting) {    G.v().Timer_outstandingTimers.remove(this);  }}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  private static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  Exception e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public UserActiveException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public TextLineComponent applyJustificationDeltas(float[] deltas,int deltaStart,boolean[] flags){  return this;}  }
class C{  public static Angle fromDMS(int degrees,int minutes,int seconds){  if (minutes < 0 || minutes >= 60) {    throw new IllegalArgumentException("Argument Out Of Range");  }  if (seconds < 0 || seconds >= 60) {    throw new IllegalArgumentException("Argument Out Of Range");  }  return Angle.fromDegrees(Math.signum(degrees) * (Math.abs(degrees) + minutes / 60d + seconds / 3600d));}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  @Override public double calculateAnomalyScore(double value){  int instanceIndex=metricDataValues.indexOf(value);  Instance valueInstance=trainingData.instance(instanceIndex);  Instance centroidInstance=clusterCentroids.instance(centroidAssignments[instanceIndex]);  if (meanDistancesToCentroids.get(centroidInstance) == 0.0) {    throw new ArithmeticException("Cannot divide by 0");  }  double distanceToCentroid=Math.abs(valueInstance.value(0) - centroidInstance.value(0));  double relativeDistanceToCentroid=distanceToCentroid / meanDistancesToCentroids.get(centroidInstance);  return relativeDistanceToCentroid;}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){}  }
class C{  public void readFrom(ChannelBuffer data){  this.wildcards=data.readInt();  this.inputPort=data.readShort();  this.dataLayerSource=new byte[6];  data.readBytes(this.dataLayerSource);  this.dataLayerDestination=new byte[6];  data.readBytes(this.dataLayerDestination);  this.dataLayerVirtualLan=data.readShort();  this.dataLayerVirtualLanPriorityCodePoint=data.readByte();  data.readByte();  this.dataLayerType=data.readShort();  this.networkTypeOfService=data.readByte();  this.networkProtocol=data.readByte();  data.readByte();  data.readByte();  this.networkSource=data.readInt();  this.networkDestination=data.readInt();  this.transportSource=data.readShort();  this.transportDestination=data.readShort();}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=reach(env,vset);  ctx=new Context(ctx,this);  Type type=texpr.toType(env,ctx);  try {    if (ctx.getLocalField(id) != null) {      env.error(where,"local.redefined",id);    }    if (type.isType(TC_ERROR)) {    } else     if (!type.isType(TC_CLASS)) {      env.error(where,"catch.not.throwable",type);    } else {      ClassDefinition def=env.getClassDefinition(type);      if (!def.subClassOf(env,env.getClassDeclaration(idJavaLangThrowable))) {        env.error(where,"catch.not.throwable",def);      }    }    field=new LocalMember(where,ctx.field.getClassDefinition(),mod,type,id);    ctx.declare(env,field);    vset.addVar(field.number);    return body.check(env,ctx,vset,exp);  } catch (  ClassNotFound e) {    env.error(where,"class.not.found",e.name,opNames[op]);    return vset;  }}  }
class C{  public Element replaceWith(NewElement newElement){  checkNotRemoved();  notPermittedOnRootElement();  requireNonNull(newElement,"Required not null new element");  insertAfter(newElement);  final Element inserted=getNextSibling();  remove();  return inserted;}  }
class C{  private void updateRemoteControlClient(final String what){  if (mRemoteControlClient == null) {    LOG.info("mRemoteControlClient is null, review your logic");    return;  }  int playState;  if (isPlaying()) {    playState=RemoteControlClient.PLAYSTATE_PLAYING;  } else {    playState=RemoteControlClient.PLAYSTATE_PAUSED;    if (what.equals(PLAYSTATE_STOPPED)) {      playState=RemoteControlClient.PLAYSTATE_STOPPED;    }  }  if (what == null) {    return;  }switch (what) {case PLAYSTATE_CHANGED:case POSITION_CHANGED:case PLAYSTATE_STOPPED:    mRemoteControlClient.setPlaybackState(playState);  break;case META_CHANGED:case QUEUE_CHANGED:Bitmap albumArt=getAlbumArt();if (albumArt != null) {Bitmap.Config config=albumArt.getConfig();if (config == null) {  config=Bitmap.Config.ARGB_8888;}albumArt=albumArt.copy(config,false);}mRemoteControlClient.editMetadata(true).putString(MediaMetadataRetriever.METADATA_KEY_ARTIST,getArtistName()).putString(MediaMetadataRetriever.METADATA_KEY_ALBUMARTIST,getAlbumArtistName()).putString(MediaMetadataRetriever.METADATA_KEY_ALBUM,getAlbumName()).putString(MediaMetadataRetriever.METADATA_KEY_TITLE,getTrackName()).putLong(MediaMetadataRetriever.METADATA_KEY_DURATION,duration()).putBitmap(RemoteControlClient.MetadataEditor.BITMAP_KEY_ARTWORK,albumArt).apply();mRemoteControlClient.setPlaybackState(playState);break;}}  }
class C{  protected CollectionManager(){  super(NutchConfiguration.create());}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  Collection<Var> outputs(boolean pack){  if (pack) {    return outputs;  } else {    return selected;  }}  }
class C{  public ColorPropertyEditor(){  button=new JButton(title);}  }
class C{  public static Byte valueOf(String string) throws NumberFormatException {  return valueOf(parseByte(string));}  }
class C{  public void startLiteFragmentForResult(int requestCode,LiteFragment f,Intent requestIntent){  f.setRequestCode(requestCode);  f.setRequestIntent(requestIntent);  mManager.addToBackStack(f);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,final Intent data){  if (!mComposeView.onActivityResult(requestCode,resultCode,data)) {  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.CLASS_DEFINITION___CLASS_CONTENT_1:    return ((InternalEList<?>)getClassContent_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {  if (ks.containsAlias(alias) == false) {    MessageFormat form=new MessageFormat(rb.getString("Alias.alias.does.not.exist"));    Object[] source={alias};    throw new Exception(form.format(source));  }  PasswordProtection pp=null;  Entry entry;  try {    entry=ks.getEntry(alias,pp);    pkey=null;  } catch (  UnrecoverableEntryException une) {    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {      throw une;    }    if (pkey != null) {      pp=new PasswordProtection(pkey);      entry=ks.getEntry(alias,pp);    } else {      try {        pp=new PasswordProtection(pstore);        entry=ks.getEntry(alias,pp);        pkey=pstore;      } catch (      UnrecoverableEntryException une2) {        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {          throw une2;        } else {          pkey=getKeyPasswd(alias,null,null);          pp=new PasswordProtection(pkey);          entry=ks.getEntry(alias,pp);        }      }    }  }  return Pair.of(entry,pkey);}  }
class C{  public RandomLayout(){  super();}  }
class C{  public Integer mapStringIndexToTSPosition(int idx){  return this.stringPosToRealPos.get(idx);}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  long[][] arrays=new long[ncycles][size];  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,arrays,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,arrays,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public int size(){  return content.size();}  }
class C{  public void clean(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    String name=theAtts.getLocalName(i);    if (theAtts.getValue(i) == null || name == null || name.length() == 0) {      theAtts.removeAttribute(i);      continue;    }  }}  }
class C{  public void startTracking(Window containingWindow,Component actionSource){  this.containingWindow=containingWindow;  KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(PERMANENT_FOCUS_OWNER,this);}  }
class C{  Map<String,TypeName> convertPropertiesToTypes(Map<String,ExecutableElement> properties){  Map<String,TypeName> types=new LinkedHashMap<String,TypeName>();  for (  Map.Entry<String,ExecutableElement> entry : properties.entrySet()) {    ExecutableElement el=entry.getValue();    types.put(entry.getKey(),TypeName.get(el.getReturnType()));  }  return types;}  }
class C{  public SoundPlayer(Context appContext){  mAppContext=appContext;  final int audioType=getAudioTypeForSoundPool();  mSoundPool=new SoundPool(1,audioType,0);}  }
class C{  void removeDependent(InstanceTime dependent,boolean forBegin){  if (forBegin) {    beginDependents.remove(dependent);  } else {    endDependents.remove(dependent);  }}  }
class C{  public long created(){  return this.data.readDateTimeAsLong(Offset.created.offset);}  }
class C{  public Future<SyncReply> sendRequest(int xid,SyncMessage request) throws RemoteStoreException {  ensureConnected();  RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration);  futureMap.put(Integer.valueOf(xid),future);  if (futureMap.size() > MAX_PENDING_REQUESTS) {synchronized (futureNotify) {      while (futureMap.size() > MAX_PENDING_REQUESTS) {        try {          futureNotify.wait();        } catch (        InterruptedException e) {          throw new RemoteStoreException("Could not send request",e);        }      }    }  }  channel.write(request);  return future;}  }
class C{  public Path toPath(){  return currentPath;}  }
class C{  private void updateBlockSnapshotConsistencyGroup(){  log.info("Migrating BlockSnapshot consistencyGroup to consistencyGroups.");  DbClient dbClient=getDbClient();  List<URI> blockSnapshotURIs=dbClient.queryByType(BlockSnapshot.class,false);  Iterator<BlockSnapshot> blockSnapshots=dbClient.queryIterativeObjects(BlockSnapshot.class,blockSnapshotURIs);  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (blockSnapshots.hasNext()) {    blockObjects.add(blockSnapshots.next());  }  migrate(blockObjects);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:17.899 -0500",hash_original_method="FD6957908D778700DE2EEE696A8B754C",hash_generated_method="D118BA6F916221C8B09E2997DCAB4C14") public ArrayIndexOutOfBoundsException(int sourceLength,int index){  super("length=" + sourceLength + "; index="+ index);}  }
class C{  public final double doOperation(){  double logHastingRatio=0;  int rootNode=treeModel.getRoot().getNumber();  double change=Math.random() * maxWalkSize - maxWalkSize / 2;  double originalValue=serumDrift.getParameterValue(0);  double newValue=originalValue + change;  serumDrift.setParameterValue(0,newValue);  for (int i=0; i < mu.getParameterCount(); i++) {    if ((int)indicators.getParameterValue(i) == 1 && i != rootNode) {      Parameter curMu=mu.getParameter(i);      double originalMu0=curMu.getParameterValue(0);      double newMu0=originalMu0 * newValue / originalValue;      curMu.setParameterValue(0,newMu0);    }  }  return (logHastingRatio);}  }
class C{  @Override public void flush() throws IOException {}  }
class C{  private VoiceChannel findUsersChannel(MessageReceivedEvent event,Guild guild){  VoiceChannel channel=null;  outerloop:   for (  VoiceChannel channel1 : guild.getVoiceChannels()) {    for (    net.dv8tion.jda.entities.User user : channel1.getUsers()) {      if (user.getId().equals(event.getAuthor().getId())) {        channel=channel1;        break outerloop;      }    }  }  return channel;}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  return org.apache.commons.codec.binary.Base64.decodeBase64(base64Data);}  }
class C{  public static String reverseDelimitedString(String str,String delimiter){  String[] strs=split(str,delimiter);  reverseArray(strs);  return join(strs,delimiter);}  }
class C{  public BooleanTextParser(){  super();}  }
class C{  public boolean isListening(){  return listening;}  }
class C{  public boolean hasOrgTitle(){  return hasExtension(OrgTitle.class);}  }
class C{  private void computeAllAppsButtonSize(Context context){  Resources res=context.getResources();  float padding=res.getInteger(R.integer.config_allAppsButtonPaddingPercent) / 100f;  allAppsButtonVisualSize=(int)(hotseatIconSizePx * (1 - padding)) - context.getResources().getDimensionPixelSize(R.dimen.all_apps_button_scale_down);}  }
class C{  private void resize(int c){  int[] newItems=new int[c];  for (int i=0; i < items.length; i+=1) {    newItems[i]=items[i];  }  items=newItems;}  }
class C{  public Vector2D add(Vector2D op2){  return new Vector2D(this.x + op2.x,this.y + op2.y);}  }
class C{  protected boolean clickIfMatchesDescription(Intent intent,String actionName,String extraName){  String action=intent.getAction();  if (actionName.equals(action)) {    String description=intent.getStringExtra(extraName);    if (mContentDescription.equalsIgnoreCase(description)) {      SantaLog.d(TAG,String.format("Voice command: [%s] [%s]",actionName,description));      onClick(mClickTarget);      return true;    }  }  return false;}  }
class C{  public void renderPaymentProduct(PaymentProduct product,ViewGroup parent){  renderer.renderPaymentItem(product,parent);}  }
class C{  public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (getPredicateCount() > 0)   return super.asNode(xctxt);  int current=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(current);  DTMAxisTraverser traverser=dtm.getAxisTraverser(m_axis);  String localName=getLocalName();  String namespace=getNamespace();  int what=m_whatToShow;  if (DTMFilter.SHOW_ALL == what || localName == NodeTest.WILD || namespace == NodeTest.WILD) {    return traverser.first(current);  } else {    int type=getNodeTypeTest(what);    int extendedType=dtm.getExpandedTypeID(namespace,localName,type);    return traverser.first(current,extendedType);  }}  }
class C{  public void doTestMessageDigest(Digest oldDigest,Digest newDigest){  final int ITERATIONS=10;  byte[] data=new byte[1024];  byte[] oldHash=new byte[oldDigest.getDigestSize()];  byte[] newHash=new byte[newDigest.getDigestSize()];  assertEquals("Hash names must be equal",oldDigest.getAlgorithmName(),newDigest.getAlgorithmName());  assertEquals("Hash sizes must be equal",oldHash.length,newHash.length);  assertEquals("Hash block sizes must be equal",((ExtendedDigest)oldDigest).getByteLength(),((ExtendedDigest)newDigest).getByteLength());  for (int i=0; i < data.length; i++) {    data[i]=(byte)i;  }  long oldTime=0;  long newTime=0;  for (int j=0; j < ITERATIONS; j++) {    long t0=System.currentTimeMillis();    for (int i=0; i < 4; i++) {      oldDigest.update(data,0,data.length);    }    int oldLength=oldDigest.doFinal(oldHash,0);    long t1=System.currentTimeMillis();    oldTime=oldTime + (t1 - t0);    long t2=System.currentTimeMillis();    for (int i=0; i < 4; i++) {      newDigest.update(data,0,data.length);    }    int newLength=newDigest.doFinal(newHash,0);    long t3=System.currentTimeMillis();    newTime=newTime + (t3 - t2);    assertEquals("Hash sizes must be equal",oldLength,newLength);    for (int i=0; i < oldLength; i++) {      assertEquals("Hashes[" + i + "] must be equal",oldHash[i],newHash[i]);    }  }  System.out.println("Time for " + ITERATIONS + " x old hash processing: "+ oldTime+ " ms");  System.out.println("Time for " + ITERATIONS + " x new hash processing: "+ newTime+ " ms");  assertTrue("New hash should be faster",newTime < oldTime);}  }
class C{  public Osyczka2(){  super(6,2,6);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void print(double[][] a){  int m=a.length;  int n=a[0].length;  StdOut.println(m + " " + n);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      StdOut.printf("%9.5f ",a[i][j]);    }    StdOut.println();  }}  }
class C{  public void saveToBundle(Bundle bundle,String tag){  checkNotNull(bundle,"bundle == null");  checkStringNotEmpty(tag,"tag is empty");  bundle.putParcelable(tag,stack);}  }
class C{  private boolean isUploadSizeAndFrequencyAllowed(){  if (mFileToUpload.length() > LOG_SIZE_LIMIT_BYTES)   return false;  if (mSharedPreferences.getInt(PREF_LAST_UPLOAD_DAY,0) != getCurrentDay())   return true;  return mSharedPreferences.getInt(PREF_UPLOAD_COUNT,0) < LOG_UPLOAD_LIMIT_PER_DAY;}  }
class C{  void check(JCTree tree,int expectCount){  foundCount=0;  scan(tree);  if (foundCount != expectCount)   error(file,tree,"Wrong number of annotations found: " + foundCount + ", expected: "+ expectCount);}  }
class C{  private AnalysisResultSet makeLogAnal(ReportDescription description,Integer targetDateInt){  Set<String> levelSet=new HashSet<>();  levelSet.add(Level.ERROR.toString());  levelSet.add(Level.WARN.toString());  levelSet.add(Level.FATAL.toString());  List<String> group=new ArrayList<>();  group.add("rabbitId");  group.add("loggingEvent.categoryName");  group.add("loggingEvent.level");  LogAnalysisRequest req=new LogAnalysisRequest();  req.setFilterRabbits(description.getTargets());  req.setFilterBeginDate(targetDateInt);  req.setFilterEndDate(targetDateInt);  req.setFilterLevels(levelSet);  req.setGroup(group);  logger.trace("logAnalReq > " + req);  return analyzer.aggregation(req);}  }
class C{  public void test_GET_accessPath_delete_c_nothingMatched() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.trig");  final long result=countResults(doGetWithAccessPath(null,null,null,new URIImpl("http://xmlns.com/foaf/0.1/XXX")));  assertEquals(0,result);}  }
class C{  public void flushBuffer() throws IOException {  if (closed) {    return;  }  if (count > 0) {    out.write(buf,0,count);    count=0;  }}  }
class C{  public void testCase10(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-2,-3,-4,-5,-16,-27,-38,-42,-53,-64,-75,-16,-27,-37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static MockAngleSensor angleSensor(){  return new MockAngleSensor();}  }
class C{  public Table parseTableName(String sql){  parameters=New.arrayList();  initialize(sql);  read();  return readTableOrView();}  }
class C{  private void addApplicationTypeDetector(ProfilerPluginSetupContext context){  context.addApplicationTypeDetector(new DubboProviderDetector());}  }
class C{  public static <T1,T2,R>Mono<R> combine(Mono<? extends T1> mono,Value<? extends T2> app,BiFunction<? super T1,? super T2,? extends R> fn){  return Mono.from(FutureW.of(mono.toFuture()).combine(app,fn));}  }
class C{  @RpcMethod public CopyImageResponse copyImage(String imageId,String source,String destination) throws InterruptedException, RpcException {  SyncHandler<CopyImageResponse,Host.AsyncClient.copy_image_call> syncHandler=new SyncHandler<>();  copyImage(imageId,source,destination,syncHandler);  syncHandler.await();  return ResponseValidator.checkCopyImageResponse(syncHandler.getResponse());}  }
class C{  public static void main(String[] args){  SpringApplication.run(ConfigApplication.class,args);}  }
class C{  private String writeStacksToFile(Map<String,byte[]> dumps,String fileName) throws IOException {  String filePath=null;  OutputStream os=null;  PrintWriter ps=null;  File outputFile=null;  try {    outputFile=new File(fileName);    os=new FileOutputStream(outputFile);    ps=new PrintWriter(os);    for (    Map.Entry<String,byte[]> entry : dumps.entrySet()) {      ps.append("*** Stack-trace for member " + entry.getKey() + " ***");      ps.flush();      GZIPInputStream zipIn=new GZIPInputStream(new ByteArrayInputStream(entry.getValue()));      BufferedInputStream bin=new BufferedInputStream(zipIn);      byte[] buffer=new byte[10000];      int count;      while ((count=bin.read(buffer)) != -1) {        os.write(buffer,0,count);      }      ps.append('\n');    }    ps.flush();    filePath=outputFile.getCanonicalPath();  }  finally {    os.close();  }  return filePath;}  }
class C{  public JournalStream openJournal(String name){  String contextName=EnvLoader.getEnvironmentName();  String fullName=contextName + ":" + name;  return new JournalStreamImpl(_journalStore.openJournal(fullName));}  }
class C{  protected IJavaElement createHandle(FieldDeclaration fieldDeclaration,TypeDeclaration typeDeclaration,IJavaElement parent){  if (!(parent instanceof IType))   return parent;  IType type=(IType)parent;switch (fieldDeclaration.getKind()) {case AbstractVariableDeclaration.FIELD:case AbstractVariableDeclaration.ENUM_CONSTANT:    return ((IType)parent).getField(new String(fieldDeclaration.name));}if (type.isBinary()) {  return type;}int occurrenceCount=0;FieldDeclaration[] fields=typeDeclaration.fields;int length=fields == null ? 0 : fields.length;for (int i=0; i < length; i++) {  if (fields[i].getKind() == AbstractVariableDeclaration.INITIALIZER) {    occurrenceCount++;    if (fields[i].equals(fieldDeclaration))     break;  }}return ((IType)parent).getInitializer(occurrenceCount);}  }
class C{  public void processNotifications(StatAlert[] alerts,GemFireVM remoteVM){  if (logger.isDebugEnabled()) {    logger.debug("Entered AdminDistributedSystemJmxImpl.processNotifications(StatAlert[{}], GemFireVM) *************",alerts.length);  }  if (remoteVM == null) {    if (logger.isDebugEnabled()) {      logger.debug("Could not process stat alert notifications as given GemFireVM is null.");    }    return;  }  ArrayList notificationObjects=new ArrayList();  String memberId=remoteVM.getId().getId();  final boolean isSystemWide=false;  StatAlert alert=null;  Integer defId=null;  for (int i=0; i < alerts.length; i++) {    alert=alerts[i];    if (getAlertDefinition(alert.getDefinitionId()) == null)     continue;    StatAlertNotification alertNotification=new StatAlertNotification(alert,memberId);    if (!isSystemWide) {      notificationObjects.add(alertNotification);      continue;    }    HashSet accumulatedAlertValues;synchronized (alertsStore) {      accumulatedAlertValues=(HashSet)alertsStore.get(defId);      if (accumulatedAlertValues == null) {        accumulatedAlertValues=new HashSet();        alertsStore.put(defId,accumulatedAlertValues);      }    }synchronized (accumulatedAlertValues) {      accumulatedAlertValues.add(alertNotification);    }  }  if (!notificationObjects.isEmpty()) {    sendNotifications(notificationObjects,getObjectName());  }  if (logger.isDebugEnabled()) {    logger.debug("Exiting AdminDistributedSystemJmxImpl.processNotifications(StatAlert[], GemFireVM) *************");  }}  }
class C{  protected double computeABOF(KernelMatrix kernelMatrix,DBIDRef pA,DBIDArrayIter pB,DBIDArrayIter pC,MeanVariance s){  s.reset();  double simAA=kernelMatrix.getSimilarity(pA,pA);  for (pB.seek(0); pB.valid(); pB.advance()) {    if (DBIDUtil.equal(pB,pA)) {      continue;    }    double simBB=kernelMatrix.getSimilarity(pB,pB);    double simAB=kernelMatrix.getSimilarity(pA,pB);    double sqdAB=simAA + simBB - simAB - simAB;    if (!(sqdAB > 0.)) {      continue;    }    for (pC.seek(pB.getOffset() + 1); pC.valid(); pC.advance()) {      if (DBIDUtil.equal(pC,pA)) {        continue;      }      double simCC=kernelMatrix.getSimilarity(pC,pC);      double simAC=kernelMatrix.getSimilarity(pA,pC);      double sqdAC=simAA + simCC - simAC - simAC;      if (!(sqdAC > 0.)) {        continue;      }      double simBC=kernelMatrix.getSimilarity(pB,pC);      double numerator=simBC - simAB - simAC + simAA;      double div=1. / (sqdAB * sqdAC);      s.put(numerator * div,Math.sqrt(div));    }  }  return s.getNaiveVariance();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case FunctionblockPackage.PRIMITIVE_PARAM__CONSTRAINT_RULE:    return basicSetConstraintRule(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public final void testIdentityScopeString(){  is=new IdentityScopeStub("Aleksei Semenov");  assertNotNull(is);  assertEquals("Aleksei Semenov",is.getName());}  }
class C{  @Override public boolean checkAndSignal(RVMThread t){  t.codePatchSyncRequested=true;  return true;}  }
class C{  static <T>UnaryOperator<T> identity(){  return null;}  }
class C{  static int compare(IQualifiedNameProvider fqnProvider,TypeArgument arg1,TypeArgument arg2){  if (arg1 == arg2) {    return 0;  }  if (arg1 == null) {    return -1;  }  if (arg2 == null) {    return 1;  }  if (arg1 instanceof Wildcard || arg2 instanceof Wildcard) {    if (arg1 instanceof Wildcard && arg2 instanceof Wildcard) {      final Wildcard w1=(Wildcard)arg1;      final Wildcard w2=(Wildcard)arg2;      int c;      c=compare(fqnProvider,w1.getDeclaredLowerBound(),w2.getDeclaredLowerBound());      if (c != 0) {        return c;      }      c=compare(fqnProvider,w1.getDeclaredUpperBound(),w2.getDeclaredUpperBound());      if (c != 0) {        return c;      }      return 0;    }    return compareEClasses(arg1.eClass(),arg2.eClass());  }  final TypeRef ref1=(TypeRef)arg1;  final TypeRef ref2=(TypeRef)arg2;  if (ref1 instanceof ExistentialTypeRef && ref2 instanceof ExistentialTypeRef) {    return compare(fqnProvider,((ExistentialTypeRef)ref1).getWildcard(),((ExistentialTypeRef)ref2).getWildcard());  }  if (ref1 instanceof FunctionTypeExprOrRef && ref2 instanceof FunctionTypeExprOrRef) {    final FunctionTypeExprOrRef f1=(FunctionTypeExprOrRef)ref1;    final FunctionTypeExprOrRef f2=(FunctionTypeExprOrRef)ref2;    return compareFunctionTypeExprOrRefs(fqnProvider,f1,f2);  }  int c;  c=compareEClasses(ref1.eClass(),ref2.eClass());  if (c != 0) {    return c;  }  c=compare(fqnProvider,ref1.getDeclaredType(),ref2.getDeclaredType());  if (c != 0) {    return c;  }  if (ref1 instanceof StructuralTypeRef) {    final StructuralTypeRef sref1=(StructuralTypeRef)ref1;    final StructuralTypeRef sref2=(StructuralTypeRef)ref2;    c=compareComparables(sref1.getTypingStrategy(),sref2.getTypingStrategy());    if (c != 0) {      return c;    }    c=compare(fqnProvider,sref1.getStructuralType(),sref2.getStructuralType());    if (c != 0) {      return c;    }    final Iterator<TStructMember> iter1=sref1.getStructuralMembers().iterator();    final Iterator<TStructMember> iter2=sref2.getStructuralMembers().iterator();    while (iter1.hasNext() && iter2.hasNext()) {      c=compareMembers(fqnProvider,iter1.next(),iter2.next());      if (c != 0) {        return c;      }    }    if (iter1.hasNext()) {      return 1;    }    if (iter2.hasNext()) {      return -1;    }  }  if (ref1 instanceof ParameterizedTypeRef) {    final ParameterizedTypeRef pref1=(ParameterizedTypeRef)ref1;    final ParameterizedTypeRef pref2=(ParameterizedTypeRef)ref2;    c=compareTypeArguments(fqnProvider,pref1.getTypeArgs(),pref2.getTypeArgs());    if (c != 0) {      return c;    }  } else   if (ref1 instanceof ComposedTypeRef) {    final ComposedTypeRef cref1=(ComposedTypeRef)ref1;    final ComposedTypeRef cref2=(ComposedTypeRef)ref2;    c=compareTypeArguments(fqnProvider,cref1.getTypeRefs(),cref2.getTypeRefs());    if (c != 0) {      return c;    }  } else   if (ref1 instanceof TypeTypeRef) {    final TypeTypeRef cref1=(TypeTypeRef)ref1;    final TypeTypeRef cref2=(TypeTypeRef)ref2;    c=compareComparables(cref1.isConstructorRef(),cref2.isConstructorRef());    if (c != 0) {      return c;    }    c=compare(fqnProvider,cref1.getTypeArg(),cref2.getTypeArg());    if (c != 0) {      return c;    }  } else   if (ref1 instanceof BoundThisTypeRef) {    final BoundThisTypeRef bref1=(BoundThisTypeRef)ref1;    final BoundThisTypeRef bref2=(BoundThisTypeRef)ref2;    c=compare(fqnProvider,bref1.getActualThisTypeRef(),bref2.getActualThisTypeRef());    if (c != 0) {      return c;    }  }  c=Boolean.compare(ref1.isDynamic(),ref2.isDynamic());  if (c != 0) {    return c;  }  return 0;}  }
class C{  @Override public double outputValue(boolean calculate){  if (Double.isNaN(m_unitValue) && calculate) {    if (m_input) {      if (m_currentInstance.isMissing(m_link)) {        m_unitValue=0;      } else {        m_unitValue=m_currentInstance.value(m_link);      }    } else {      m_unitValue=0;      for (int noa=0; noa < m_numInputs; noa++) {        m_unitValue+=m_inputList[noa].outputValue(true);      }      if (m_numeric && m_normalizeClass) {        m_unitValue=m_unitValue * m_attributeRanges[m_instances.classIndex()] + m_attributeBases[m_instances.classIndex()];      }    }  }  return m_unitValue;}  }
class C{  public void writeLexiconToOutputStream(OutputStream out) throws IOException {  if (!isBinaryTask)   writeLexicon(labelLex,out);  writeLexicon(featureLex,out);}  }
class C{  protected static double gini(Map<String,WeightMass> dist,double sumOfWeights){  double gini=1.0;  for (  Map.Entry<String,WeightMass> e : dist.entrySet()) {    double frac=e.getValue().m_weight / sumOfWeights;    gini-=frac * frac;  }  return gini;}  }
class C{  public static final boolean isDatagramMode(byte esmClass){  return isMessagingMode(esmClass,SMPPConstant.ESMCLS_DATAGRAM_MODE);}  }
class C{  public static String[] toStringArray(char[] array){  if (array == null) {    return null;  }  String[] result=new String[array.length];  for (int i=0; i < array.length; i++) {    result[i]=String.valueOf(array[i]);  }  return result;}  }
class C{  public static Range<Integer> valueOfInteger(String str){  return Range.valueOf(str,null);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebDoc doc=WebDoc.create("WStatus Get Request");  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  private String cleanInput(String input){  if (input == null) {    return null;  }  input=input.trim();  if (input.length() == 0) {    return null;  }  return input.toUpperCase();}  }
class C{  void storeUserName(NamedBean t,Element elem){  String uname=t.getUserName();  if (uname != null && uname.length() > 0) {    elem.setAttribute("userName",uname);    elem.addContent(new Element("userName").addContent(uname));  }}  }
class C{  private void createGui(){  final JPanel topPanel=new JPanel(new BorderLayout());  final JPanel innerTopPanel=new JPanel(new BorderLayout());  topPanel.add(innerTopPanel);  innerTopPanel.add(m_stdEditPanel);  innerTopPanel.add(m_debuggerPanel,BorderLayout.SOUTH);  final JPanel buttonPanel=new JPanel(new GridLayout(1,2));  buttonPanel.setBorder(new EmptyBorder(0,0,5,2));  buttonPanel.add(new JPanel());  buttonPanel.add(m_saveButton);  topPanel.add(buttonPanel,BorderLayout.SOUTH);  final JPanel innerSp=new JPanel(new BorderLayout());  m_middlePanel.setPreferredSize(new Dimension(m_middlePanel.getPreferredSize().width,75));  innerSp.add(m_middlePanel,BorderLayout.NORTH);  innerSp.add(m_bottomPanel,BorderLayout.CENTER);  final JSplitPane outerSp=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,topPanel,innerSp);  outerSp.setOneTouchExpandable(true);  outerSp.setDividerLocation(outerSp.getMinimumDividerLocation());  outerSp.setResizeWeight(0.5);  final JPanel innerPanel=new JPanel(new BorderLayout());  innerPanel.add(outerSp);  add(innerPanel);}  }
class C{  public boolean canAttach(){  return canAttach;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,10,10,8,8,new ECBlocks(5,new ECB(1,3))),new Version(2,12,12,10,10,new ECBlocks(7,new ECB(1,5))),new Version(3,14,14,12,12,new ECBlocks(10,new ECB(1,8))),new Version(4,16,16,14,14,new ECBlocks(12,new ECB(1,12))),new Version(5,18,18,16,16,new ECBlocks(14,new ECB(1,18))),new Version(6,20,20,18,18,new ECBlocks(18,new ECB(1,22))),new Version(7,22,22,20,20,new ECBlocks(20,new ECB(1,30))),new Version(8,24,24,22,22,new ECBlocks(24,new ECB(1,36))),new Version(9,26,26,24,24,new ECBlocks(28,new ECB(1,44))),new Version(10,32,32,14,14,new ECBlocks(36,new ECB(1,62))),new Version(11,36,36,16,16,new ECBlocks(42,new ECB(1,86))),new Version(12,40,40,18,18,new ECBlocks(48,new ECB(1,114))),new Version(13,44,44,20,20,new ECBlocks(56,new ECB(1,144))),new Version(14,48,48,22,22,new ECBlocks(68,new ECB(1,174))),new Version(15,52,52,24,24,new ECBlocks(42,new ECB(2,102))),new Version(16,64,64,14,14,new ECBlocks(56,new ECB(2,140))),new Version(17,72,72,16,16,new ECBlocks(36,new ECB(4,92))),new Version(18,80,80,18,18,new ECBlocks(48,new ECB(4,114))),new Version(19,88,88,20,20,new ECBlocks(56,new ECB(4,144))),new Version(20,96,96,22,22,new ECBlocks(68,new ECB(4,174))),new Version(21,104,104,24,24,new ECBlocks(56,new ECB(6,136))),new Version(22,120,120,18,18,new ECBlocks(68,new ECB(6,175))),new Version(23,132,132,20,20,new ECBlocks(62,new ECB(8,163))),new Version(24,144,144,22,22,new ECBlocks(62,new ECB(8,156),new ECB(2,155))),new Version(25,8,18,6,16,new ECBlocks(7,new ECB(1,5))),new Version(26,8,32,6,14,new ECBlocks(11,new ECB(1,10))),new Version(27,12,26,10,24,new ECBlocks(14,new ECB(1,16))),new Version(28,12,36,10,16,new ECBlocks(18,new ECB(1,22))),new Version(29,16,36,14,16,new ECBlocks(24,new ECB(1,32))),new Version(30,16,48,14,22,new ECBlocks(28,new ECB(1,49)))};}  }
class C{  public static int computeLazyFieldSize(final int fieldNumber,final LazyFieldLite value){  return computeTagSize(fieldNumber) + computeLazyFieldSizeNoTag(value);}  }
class C{  protected DocumentLoader(){}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){}  }
class C{  public boolean send(){  Intent shareIntent=new Intent(Intent.ACTION_SEND);  shareIntent.setType(this.mimeType);  shareIntent.putExtra(Intent.EXTRA_TEXT,buildText());  if (this.uri != null) {    shareIntent.putExtra(Intent.EXTRA_STREAM,this.uri);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    shareIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT);  } else {    shareIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  }  if (shareIntent.resolveActivity(this.context.getPackageManager()) != null) {    this.context.startActivity(shareIntent);    return true;  }  return false;}  }
class C{  public Object readResolve(){switch (val) {case TRANSFORM_TRANSLATE:    return TransformType.TRANSLATE;case TRANSFORM_ROTATE:  return TransformType.ROTATE;case TRANSFORM_SCALE:return TransformType.SCALE;case TRANSFORM_SHEAR:return TransformType.SHEAR;case TRANSFORM_GENERAL:return TransformType.GENERAL;default :throw new Error("Unknown TransformType value:" + val);}}  }
class C{  public static final String nameForDaemon(final CassandraDaemonTask daemon){  return nameForDaemon(daemon.getName());}  }
class C{  public void update(final T datum){  if (datum == null) {    return;  }  if (gadget_ == null) {    final int maxK=ReservoirSize.decodeValue(encodedMaxK_);    gadget_=ReservoirItemsSketch.getInstance(maxK);  }  gadget_.update(datum);}  }
class C{  @Override public RecyclerView.ViewHolder newFooterHolder(View view){  return new ViewHolder(view,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.883 -0400",hash_original_method="A2E72EB00086C962A248F7B09D4CAB08",hash_generated_method="E603A35B874788089D482F7930493722") public static IOFileFilter magicNumberFileFilter(String magicNumber){  return new MagicNumberFileFilter(magicNumber);}  }
class C{  public void remove(lalr_item itm) throws internal_error {  not_null(itm);  hashcode_cache=null;  _all.remove(itm);}  }
class C{  private void layoutItems(int width){  int numItems=getChildCount();  if (numItems == 0) {    mLayoutNumRows=0;    return;  }  int curNumRows=Math.min((int)Math.ceil(numItems / (float)mMaxItemsPerRow),mMaxRows);  for (; curNumRows <= mMaxRows; curNumRows++) {    layoutItemsUsingGravity(curNumRows,numItems);    if (curNumRows >= numItems) {      break;    }    if (doItemsFit()) {      break;    }  }}  }
class C{  public boolean isCurrentConnectionCorrect(){  return (mConnectedNode == null || mConstellation.getInput() == mConnectedNode.getStateDibit());}  }
class C{  public void testDomainMatchesOnLocalAddresses(){  assertFalse(HttpCookie.domainMatches("localhost","localhost"));  assertFalse(HttpCookie.domainMatches("b","b"));}  }
class C{  @Override public Long zrem(final String key,final String... members){  checkIsInMultiOrPipeline();  client.zrem(key,members);  return client.getIntegerReply();}  }
class C{  protected View newView(int viewType,int position){  return newView(viewType);}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public void compact(){  if (prev == this)   throw new IllegalStateException();  if (!prev.owner)   return;  int byteCount=limit - pos;  int availableByteCount=SIZE - prev.limit + (prev.shared ? 0 : prev.pos);  if (byteCount > availableByteCount)   return;  writeTo(prev,byteCount);  pop();  SegmentPool.recycle(this);}  }
class C{  public boolean requiresIntegerRate(){  if (DEBUG_SHOW_PUBLIC_CALLS && log.isDebugEnabled()) {    log.debug("requiresIntegerRate");  }  return true;}  }
class C{  protected void mineTree(FPTreeRoot tree,FrequentItemSets largeItemSets,int recursionLevel,FrequentBinaryItemSet conditionalItems,int minSupport){  if (!tree.isEmpty(recursionLevel)) {    if (m_maxItems > 0 && recursionLevel >= m_maxItems) {      return;    }    Map<BinaryItem,FPTreeRoot.Header> headerTable=tree.getHeaderTable();    Set<BinaryItem> keys=headerTable.keySet();    Iterator<BinaryItem> i=keys.iterator();    while (i.hasNext()) {      BinaryItem item=i.next();      FPTreeRoot.Header itemHeader=headerTable.get(item);      int support=itemHeader.getProjectedCounts().getCount(recursionLevel);      if (support >= minSupport) {        for (        FPTreeNode n : itemHeader.getHeaderList()) {          int currentCount=n.getProjectedCount(recursionLevel);          if (currentCount > 0) {            FPTreeNode temp=n.getParent();            while (temp != tree) {              temp.increaseProjectedCount(recursionLevel + 1,currentCount);              headerTable.get(temp.getItem()).getProjectedCounts().increaseCount(recursionLevel + 1,currentCount);              temp=temp.getParent();            }          }        }        FrequentBinaryItemSet newConditional=(FrequentBinaryItemSet)conditionalItems.clone();        newConditional.addItem(item);        newConditional.setSupport(support);        largeItemSets.addItemSet(newConditional);        mineTree(tree,largeItemSets,recursionLevel + 1,newConditional,minSupport);        for (        FPTreeNode n : itemHeader.getHeaderList()) {          FPTreeNode temp=n.getParent();          while (temp != tree) {            temp.removeProjectedCount(recursionLevel + 1);            temp=temp.getParent();          }        }        for (        FPTreeRoot.Header h : headerTable.values()) {          h.getProjectedCounts().removeCount(recursionLevel + 1);        }      }    }  }}  }
class C{  public SemGraph(Graph graph){  if (graph instanceof SemGraph) {    if (graph.isTimeLagModel()) {      this.graph=new TimeLagGraph((TimeLagGraph)((SemGraph)graph).graph);    } else {      this.graph=new EdgeListGraph(graph);    }    this.errorNodes=new HashMap<>(((SemGraph)graph).errorNodes);    for (    Node node : graph.getNodes()) {      if (!errorNodes.containsKey(node)) {        addErrorNode(node);      }    }    this.showErrorTerms=((SemGraph)graph).showErrorTerms;  } else   if (graph instanceof TimeLagGraph) {    this.graph=new TimeLagGraph((TimeLagGraph)graph);  } else {    this.graph=new EdgeListGraph(graph.getNodes());    for (    Node node : this.graph.getNodes()) {      addErrorNode(node);    }    setShowErrorTerms(true);    for (    Edge edge : graph.getEdges()) {      if (Edges.isDirectedEdge(edge)) {        addEdge(edge);      } else       if (Edges.isBidirectedEdge(edge)) {        Node node1=edge.getNode1();        Node node2=edge.getNode2();        addBidirectedEdge(getExogenous(node1),getExogenous(node2));      } else {        throw new IllegalArgumentException("A SEM graph may contain " + "only directed and bidirected edges: " + edge);      }    }    setShowErrorTerms(false);  }  for (  Edge edge : graph.getEdges()) {    if (graph.isHighlighted(edge)) {      setHighlighted(edge,true);    }  }}  }
class C{  public static void initializeInterfaceFilters(){synchronized (HostCandidateHarvester.class) {    if (interfaceFiltersInitialized)     return;    interfaceFiltersInitialized=true;  }  allowedInterfaces=StackProperties.getStringArray(StackProperties.ALLOWED_INTERFACES,";");  if (allowedInterfaces != null) {    for (    String iface : allowedInterfaces)     try {      NetworkInterface.getByName(iface);    } catch (    SocketException e) {      throw new IllegalStateException("there is no network " + "interface with the name " + iface,e);    }  } else {    blockedInterfaces=StackProperties.getStringArray(StackProperties.BLOCKED_INTERFACES,";");    if (blockedInterfaces != null) {      for (      String iface : blockedInterfaces)       try {        NetworkInterface.getByName(iface);      } catch (      SocketException e) {        throw new IllegalStateException("there is no " + "network interface with the name " + iface,e);      }      Enumeration<NetworkInterface> allInterfaces;      try {        allInterfaces=NetworkInterface.getNetworkInterfaces();      } catch (      SocketException e) {        throw new IllegalStateException("could not get the " + "list of the available network interfaces",e);      }      int count=0;      while (allInterfaces.hasMoreElements()) {        allInterfaces.nextElement();        count++;      }      if (blockedInterfaces.length >= count)       throw new IllegalStateException("all network " + "interfaces are blocked");    }  }}  }
class C{  private String findIdpTypeRegistered(String tenantName,IdentityStoreType type) throws Exception {  Collection<IIdentityStoreData> extIDPs=_configStore.getProviders(tenantName,EnumSet.of(DomainType.EXTERNAL_DOMAIN),true);  for (  IIdentityStoreData idp : extIDPs) {    if (idp.getExtendedIdentityStoreData().getProviderType() == type) {      return idp.getName();    }  }  return null;}  }
class C{  public void drawingComplete(OMGraphic omg,OMAction action){  if (DTL_DEBUG) {    String cname=omg.getClass().getName();    int lastPeriod=cname.lastIndexOf('.');    if (lastPeriod != -1) {      cname=cname.substring(lastPeriod + 1);    }    Debug.output("DrawingToolLayer: DrawingTool complete for " + cname + " > "+ action);  }  releaseProxyMouseMode();  OMGraphicList omgl=new OMGraphicList();  omg.putAttribute(OMGraphicConstants.UPDATED,Boolean.TRUE);  omgl.add(omg);  deselect(omgl);  OMGraphicList list=getOMGraphics();  if (list == null) {    list=new OMGraphicList();    setOMGraphics(list);  }  DbfTableModel dbf=(DbfTableModel)list.getAttribute(ShapeConstants.DBF_ATTRIBUTE);  if (dbf == null && dbfFactory != null) {    dbf=dbfFactory.createDbf(list);  }  if (dbf != null) {    dbf.doAction(list,omg,action,dbfFactory);  } else {    list.doAction(omg,action);  }  doPrepare();}  }
class C{  public static XMLReader createXMLReader() throws SAXException {  final Logger logger=LoggerFactory.getLogger(XMLReader.class);  XMLReader reader=null;  String xmlReaderName=System.getProperty("org.xml.sax.driver");  if (xmlReaderName != null) {    try {      reader=_createXMLReader(xmlReaderName);    } catch (    ClassNotFoundException e) {      logger.warn("Class " + xmlReaderName + " not found");    }catch (    ClassCastException e) {      logger.warn(xmlReaderName + " is not a valid XMLReader.");    }catch (    Exception e) {      logger.warn("could not create instance of " + xmlReaderName);    }    logger.debug("XMLReader initialized using system property: " + xmlReaderName);  }  if (reader == null) {    try {      javax.xml.parsers.SAXParserFactory factory=javax.xml.parsers.SAXParserFactory.newInstance();      factory.setNamespaceAware(true);      reader=factory.newSAXParser().getXMLReader();    } catch (    NoClassDefFoundError e) {      logger.warn("javax.xml.parsers.SAXParserFactory not available");    }catch (    Exception e) {      logger.warn("Failed to initialize XMLReader through JAXP");    }    logger.debug("XMLReader initialized using JAXP: " + reader);  }  if (reader == null) {    try {      reader=_createXMLReader(XERCES_SAXPARSER);    } catch (    ClassNotFoundException e) {      String message="Class " + XERCES_SAXPARSER + " not found";      logger.error(message);      throw new SAXException(message);    }catch (    ClassCastException e) {      String message=XERCES_SAXPARSER + " is not a valid XMLReader.";      logger.error(message);      throw new SAXException(message);    }catch (    Exception e) {      String message="Could not create instance of " + XERCES_SAXPARSER;      logger.error(message);      throw new SAXException(message);    }    logger.debug("XMLReader initialized using default Xerces SAX parser " + XERCES_SAXPARSER);  }  return reader;}  }
class C{  public Value evaluate(macromedia.asc.util.Context cx,EmptyElementNode node){  return null;}  }
class C{  public PaymentException(){}  }
class C{  @Override public void removeLifecycleListener(LifecycleListener listener){  lifecycle.removeLifecycleListener(listener);}  }
class C{  public static final boolean isDuplexGroupMessage(LocoNetMessage m){  if ((m.getElement(0) == LnConstants.OPC_PEER_XFER) && (m.getElement(1) == LnConstants.RE_DPLX_OP_LEN)) {    Integer byte2=m.getElement(2);    if ((byte2 == LnConstants.RE_DPLX_GP_CHAN_TYPE) || (byte2 == LnConstants.RE_DPLX_GP_NAME_TYPE) || (byte2 == LnConstants.RE_DPLX_GP_ID_TYPE)|| (byte2 == LnConstants.RE_DPLX_GP_PW_TYPE)) {      Integer byte3=m.getElement(3);      if ((byte3 == LnConstants.RE_DPLX_OP_TYPE_QUERY) || (byte3 == LnConstants.RE_DPLX_OP_TYPE_REPORT) || (byte3 == LnConstants.RE_DPLX_OP_TYPE_WRITE)) {        return true;      }    }  }  return false;}  }
class C{  public boolean isDrawCenterTextEnabled(){  return mDrawCenterText;}  }
class C{  public ClipboardEvent(){  super(new Object());}  }
class C{  public FixedSecureRandom(boolean intPad,byte[][] values){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != values.length; i++) {    try {      bOut.write(values[i]);    } catch (    IOException e) {      throw new IllegalArgumentException("can't save value array.");    }  }  _data=bOut.toByteArray();  if (intPad) {    _intPad=_data.length % 4;  }}  }
class C{  public static ImageTree waveletTransformWp(Image origImg,int currLevel,int level,FilterGH[] filterGHList,int method){  int width=0;  int height=0;  int min=0;  int maxLevel=0;  Image coarseImg=null;  Image horizontalImg=null;  Image verticalImg=null;  Image diagonalImg=null;  Image tempImg=null;  ImageTree returnTree=null;  ImageTree tempTree=null;  width=origImg.getWidth();  height=origImg.getHeight();  tempImg=new Image(width,height);  copyIntoImage(tempImg,origImg,0,0);  returnTree=new ImageTree();  tempTree=returnTree;  tempTree.setLevel(currLevel);  min=origImg.getWidth();  if (origImg.getHeight() < min) {    min=origImg.getHeight();  }  maxLevel=(int)(Math.log(min) / Math.log(2)) - 2;  if (maxLevel < level) {    level=maxLevel;  }  if (currLevel >= level) {    returnTree.setImage(tempImg);    return returnTree;  }  for (int i=currLevel; i < level; i++) {    width=(width + 1) / 2;    height=(height + 1) / 2;    coarseImg=new Image(width,height);    horizontalImg=new Image(width,height);    verticalImg=new Image(width,height);    diagonalImg=new Image(width,height);    decomposition(tempImg,coarseImg,horizontalImg,verticalImg,diagonalImg,filterGHList[i].getG(),filterGHList[i].getH(),method);    tempTree.setCoarse(new ImageTree());    tempTree.getCoarse().setLevel(i + 1);    tempTree.setHorizontal(waveletTransformWp(horizontalImg,i + 1,level,filterGHList,method));    tempTree.setVertical(waveletTransformWp(verticalImg,i + 1,level,filterGHList,method));    tempTree.setDiagonal(waveletTransformWp(diagonalImg,i + 1,level,filterGHList,method));    horizontalImg=null;    verticalImg=null;    diagonalImg=null;    tempImg=null;    if (i != (level - 1)) {      tempImg=new Image(width,height);      copyIntoImage(tempImg,coarseImg,0,0);      coarseImg=null;    }    tempTree=tempTree.getCoarse();  }  tempTree.setImage(coarseImg);  return returnTree;}  }
class C{  public WindowSurface(EglCore eglCore,SurfaceTexture surfaceTexture){  super(eglCore);  createWindowSurface(surfaceTexture);}  }
class C{  @SuppressWarnings("unused") public StreamingViewAsSingleton(FlinkRunner runner,View.AsSingleton<T> transform){  this.transform=transform;}  }
class C{  public static boolean booted(){  return booted;}  }
class C{  @SuppressWarnings({"SameParameterValue"}) public static void testPrint(int a){  PermutationGenerator cg=new PermutationGenerator(a);  int[] choice;  System.out.println();  System.out.println("Printing permutations for " + a + " objects:");  System.out.println();  while ((choice=cg.next()) != null) {    if (choice.length == 0) {      System.out.println("zero-length array");    } else {      for (      int aChoice : choice) {        System.out.print(aChoice + "\t");      }      System.out.println();    }  }  System.out.println();}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public JGradientPanel(Color color1,Color color2){  this.color1=color1;  this.color2=color2;}  }
class C{  private void emitGetter(Method getter,String fieldName,String returnType,StringBuilder builder){  if (getter.isAnnotationPresent(javax.validation.constraints.NotNull.class)) {    builder.append("    @javax.validation.constraints.NotNull\n");  } else   if (getter.isAnnotationPresent(org.eclipse.che.commons.annotation.Nullable.class)) {    builder.append("    @org.eclipse.che.commons.annotation.Nullable\n");  }  builder.append("    @Override\n    public ");  builder.append(returnType);  builder.append(" ");  builder.append(getter.getName());  builder.append("() {\n");  Class<?> returnTypeClass=getter.getReturnType();  if (isList(returnTypeClass) || isMap(returnTypeClass)) {    builder.append("      ");    builder.append(getEnsureName(fieldName));    builder.append("();\n");  }  builder.append("      return ");  emitReturn(getter,fieldName,builder);  builder.append(";\n    }\n\n");}  }
class C{  public void close(){  try {    if (mySock != null) {      mySock.close();      mySock=null;    }    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Closing message Channel " + this);  } catch (  IOException ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Error closing socket " + ex);  }}  }
class C{  public final int bitLength(){  return _bitLength;}  }
class C{  public void testBasicRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_de:[tone TO tp]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=4]","//result/doc[2]/int[@name='id'][.=7]");}  }
class C{  protected Namespace createNamespace(String prefix,String namespaceURI){  return documentFactory.createNamespace(prefix,namespaceURI);}  }
class C{  public int add(T dl,int row){  E init=dl.getInitializeObject();  if (_indexes.containsKey(init)) {    return -1;  } else {    _indexes.put(init,new Integer(row));    int addedAt=super.add(dl,row);    remapIndexes(addedAt + 1);    return addedAt;  }}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  protected void updateValue(){  if (value == null) {    setText("...");    return;  }  if (getFormatter() != null) {    setText(formatter.format(value));    return;  }switch (type) {case Display.PICKER_TYPE_STRINGS:    value=getUIManager().localize(value.toString(),value.toString());  setText(value.toString());break;case Display.PICKER_TYPE_DATE:setText(L10NManager.getInstance().formatDateShortStyle((Date)value));break;case Display.PICKER_TYPE_TIME:int v=((Integer)value).intValue();int hour=v / 60;int minute=v % 60;if (showMeridiem) {String text;if (hour >= 12) {text="pm";} else {text="am";}setText(twoDigits(hour <= 12 ? hour : hour - 12) + ":" + twoDigits(minute)+ text);} else {setText(twoDigits(hour) + ":" + twoDigits(minute));}break;case Display.PICKER_TYPE_DATE_AND_TIME:setText(L10NManager.getInstance().formatDateTimeShort((Date)value));break;}}  }
class C{  public static boolean isIdentifierHelperChar(char ch){  return ':' == ch || '.' == ch || '-' == ch || '_' == ch;}  }
class C{  protected void computePij(DBIDRange ids,KNNQuery<?> knnq,boolean square,int numberOfNeighbours,double[][] pij,int[][] indices,double initialScale){  Duration timer=LOG.isStatistics() ? LOG.newDuration(this.getClass().getName() + ".runtime.neighborspijmatrix").begin() : null;  final double logPerp=Math.log(perplexity);  DoubleArray dists=new DoubleArray(numberOfNeighbours + 10);  IntegerArray inds=new IntegerArray(numberOfNeighbours + 10);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Finding neighbors and optimizing perplexity",ids.size(),LOG) : null;  for (DBIDArrayIter ix=ids.iter(); ix.valid(); ix.advance()) {    dists.clear();    inds.clear();    KNNList neighbours=knnq.getKNNForDBID(ix,numberOfNeighbours + 1);    convertNeighbors(ids,ix,square,neighbours,dists,inds);    computeSigma(ix.getOffset(),dists,perplexity,logPerp,pij[ix.getOffset()]=new double[dists.size()]);    indices[ix.getOffset()]=inds.toArray();    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  double sum=0.;  for (int i=0; i < pij.length; i++) {    final double[] pij_i=pij[i];    for (int j=0; j < pij_i.length; j++) {      sum+=pij_i[j];    }  }  final double scale=initialScale / (2 * sum);  for (int i=0; i < pij.length; i++) {    final double[] pij_i=pij[i];    for (int offi=0; offi < pij_i.length; offi++) {      int j=indices[i][offi];      assert (i != j);      int offj=containsIndex(indices[j],i);      if (offj >= 0) {        assert (indices[j][offj] == i);        if (i < j) {          final double val=pij_i[offi] + pij[j][offj];          pij_i[offi]=pij[j][offj]=MathUtil.max(val * scale,MIN_PIJ);        }      } else {        pij_i[offi]=MathUtil.max(pij_i[offi] * scale,MIN_PIJ);      }    }  }  if (timer != null) {    LOG.statistics(timer.end());  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.570 -0500",hash_original_method="720E366141B1E6A3092F9CE363C44766",hash_generated_method="FB49B0EB754E7FF4B7B137E2B4C0B486") private CoderResult(int type,int length){  addTaint(type + length);  this.type=type;  this.length=length;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static List<MRelationType> retrieveTypes(final PO po,final int windowId){  if (po.get_KeyColumns().length != 1) {    logger.severe(po + " has " + po.get_KeyColumns().length+ " key column(s). Should have one.");    PORelationException.throwWrongKeyColumnCount(po);  }  final String keyColumn=po.get_KeyColumns()[0];  final int colId=MColumn.getColumn_ID(po.get_TableName(),keyColumn);  final PreparedStatement pstmt=DB.prepareStatement(SQL,po.get_TrxName());  ResultSet rs=null;  try {    pstmt.setInt(1,po.get_Table_ID());    pstmt.setInt(2,colId);    rs=pstmt.executeQuery();    final List<MRelationType> result=evalResultSet(po,windowId,rs);    logger.info("There are " + result.size() + " matching types for "+ po);    return result;  } catch (  SQLException e) {    logger.severe(e.getMessage());    throw new AdempiereException(e);  } finally {    DB.close(rs,pstmt);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSource({DSSourceKind.NFC}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:48.967 -0500",hash_original_method="8FB7A232CD74B358E0C2332FDF0D5629",hash_generated_method="8FB7A232CD74B358E0C2332FDF0D5629") byte[] transceive(byte[] data,boolean raw) throws IOException {  checkConnected();  try {    TransceiveResult result=mTag.getTagService().transceive(mTag.getServiceHandle(),data,raw);    if (result == null) {      throw new IOException("transceive failed");    } else {      return result.getResponseOrThrow();    }  } catch (  RemoteException e) {    Log.e(TAG,"NFC service dead",e);    throw new IOException("NFC service died");  }}  }
class C{  static void checkAccess(final int access,final int possibleAccess){  if ((access & ~possibleAccess) != 0) {    throw new IllegalArgumentException("Invalid access flags: " + access);  }  int pub=(access & Opcodes.ACC_PUBLIC) == 0 ? 0 : 1;  int pri=(access & Opcodes.ACC_PRIVATE) == 0 ? 0 : 1;  int pro=(access & Opcodes.ACC_PROTECTED) == 0 ? 0 : 1;  if (pub + pri + pro > 1) {    throw new IllegalArgumentException("public private and protected are mutually exclusive: " + access);  }  int fin=(access & Opcodes.ACC_FINAL) == 0 ? 0 : 1;  int abs=(access & Opcodes.ACC_ABSTRACT) == 0 ? 0 : 1;  if (fin + abs > 1) {    throw new IllegalArgumentException("final and abstract are mutually exclusive: " + access);  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=MadMu.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="mad";  String vmSelectionPolicy="mu";  String parameter="2.5";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static Coordinate[] computeTangentsThroughPoint(Coordinate circleCenter,double radius,Coordinate point){  Coordinate[] ret=new Coordinate[3];  double dx=(point.x - circleCenter.x) / 2;  double dy=(point.y - circleCenter.y) / 2;  double d=Math.sqrt(dx * dx + dy * dy);  double a=(radius * radius) / (2.0 * d);  double x2=circleCenter.x + (dx * a / d);  double y2=circleCenter.y + (dy * a / d);  double h=Math.sqrt(radius * radius - a * a);  double rx=-dy * (h / d);  double ry=dx * (h / d);  double xi=x2 + rx;  double yi=y2 + ry;  double xiPrime=x2 - rx;  double yiPrime=y2 - ry;  ret[0]=new Coordinate(point);  ret[1]=new Coordinate(xi,yi);  ret[2]=new Coordinate(xiPrime,yiPrime);  return ret;}  }
class C{  void drawWeather(Graphics g,int x,int y,int width,int height){  if (currentZone != null) {    if (currentZone.getName().equals(area)) {      currentZone.getWeather().draw(g,x,y,width,height);    }  }}  }
class C{  public static Document xcalProperty(ICalPropertyScribe<? extends ICalProperty> marshaller,String body){  QName qname=marshaller.getQName();  try {    return XmlUtils.toDocument("<" + qname.getLocalPart() + " xmlns=\""+ qname.getNamespaceURI()+ "\">"+ body+ "</"+ qname.getLocalPart()+ ">");  } catch (  SAXException e) {    throw new RuntimeException(e);  }}  }
class C{  public static float run(double minSeconds,TimerProcedure procedure){  long iter=0;  long minMillis=(long)(minSeconds * 1000);  long begin=System.currentTimeMillis();  long limit=begin + minMillis;  while (System.currentTimeMillis() < limit) {    procedure.init();    procedure.apply(null);    iter++;  }  long end=System.currentTimeMillis();  if (minSeconds / iter < 0.1) {    begin=System.currentTimeMillis();    for (long i=iter; --i >= 0; ) {      procedure.init();      procedure.apply(null);    }    end=System.currentTimeMillis();  }  long begin2=System.currentTimeMillis();  int dummy=1;  for (long i=iter; --i >= 0; ) {    dummy*=i;    procedure.init();  }  long end2=System.currentTimeMillis();  long elapsed=(end - begin) - (end2 - begin2);  return (float)elapsed / 1000.0f / iter;}  }
class C{  private void deselect(final int index,final boolean shouldFireEvents){  checkWidget();  if (index < 0 || index >= items.size()) {    return;  }  final DLItem item=selection.remove(index);  if (shouldFireEvents) {    fireSelectionEvent(item);  }  final List<DLItem> deselectedItems=new ArrayList<DLItem>();  item.setLastAction(LAST_ACTION.DESELECTION);  deselectedItems.add(item);  if (shouldFireEvents) {    fireSelectionChangeEvent(deselectedItems);  }  redrawTables();}  }
class C{  private void onPing(Message message){  LOGGER.trace("Received Ping: {}",message);  PingData data=message.data();  if (!data.getTo().equals(membership.member())) {    LOGGER.warn("Received Ping to {}, but local member is {}",data.getTo(),transport.address());    return;  }  String correlationId=message.correlationId();  Message ackMessage=Message.withData(data).qualifier(PING_ACK).correlationId(correlationId).build();  LOGGER.trace("Send PingAck to {}",data.getFrom().address());  transport.send(data.getFrom().address(),ackMessage);}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public void aliasSystemAttribute(final String alias,final String systemAttributeName){  if (systemAttributeAliasingMapper == null) {    throw new InitializationException("No " + SystemAttributeAliasingMapper.class.getName() + " available");  }  systemAttributeAliasingMapper.addAliasFor(systemAttributeName,alias);}  }
class C{  public static double RMSEfitness(boolean useTrainingData,GEPIndividual ind){  double RMSE=RMSErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + RMSE);}  }
class C{  public String invertSelectionTipText(){  return "Inverts the selection (only if instances are drawn WITHOUT replacement).";}  }
class C{  public static String buildQueryString(boolean distinct,String tables,String[] columns,String where,String groupBy,String having,String orderBy,String limit){  if (TextUtils.isEmpty(groupBy) && !TextUtils.isEmpty(having)) {    throw new IllegalArgumentException("HAVING clauses are only permitted when using a groupBy clause");  }  if (!TextUtils.isEmpty(limit) && !sLimitPattern.matcher(limit).matches()) {    throw new IllegalArgumentException("invalid LIMIT clauses:" + limit);  }  StringBuilder query=new StringBuilder(120);  query.append("SELECT ");  if (distinct) {    query.append("DISTINCT ");  }  if (columns != null && columns.length != 0) {    appendColumns(query,columns);  } else {    query.append("* ");  }  query.append("FROM ");  query.append(tables);  appendClause(query," WHERE ",where);  appendClause(query," GROUP BY ",groupBy);  appendClause(query," HAVING ",having);  appendClause(query," ORDER BY ",orderBy);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public synchronized MatrixBlock readMatrixPartition(IndexRange pred) throws CacheException {  if (LOG.isTraceEnabled())   LOG.trace("Acquire partition " + getVarName() + " "+ pred);  long t0=DMLScript.STATISTICS ? System.nanoTime() : 0;  if (!_partitioned)   throw new CacheException("MatrixObject not available to indexed read.");  if (_partitionInMemory != null)   return _partitionInMemory;  MatrixBlock mb=null;  try {    boolean blockwise=(_partitionFormat == PDataPartitionFormat.ROW_BLOCK_WISE || _partitionFormat == PDataPartitionFormat.COLUMN_BLOCK_WISE);    MatrixFormatMetaData iimd=(MatrixFormatMetaData)_metaData;    MatrixCharacteristics mc=iimd.getMatrixCharacteristics();    int brlen=mc.getRowsPerBlock();    int bclen=mc.getColsPerBlock();    String fname=getPartitionFileName(pred,brlen,bclen);    if (blockwise && _partitionCacheName != null && _partitionCacheName.equals(fname)) {      mb=_cache.get();    }    if (mb == null) {      long rows=-1;      long cols=-1;switch (_partitionFormat) {case ROW_WISE:        rows=1;      cols=mc.getCols();    break;case ROW_BLOCK_WISE:  rows=brlen;cols=mc.getCols();break;case COLUMN_WISE:rows=mc.getRows();cols=1;break;case COLUMN_BLOCK_WISE:rows=mc.getRows();cols=bclen;break;default :throw new CacheException("Unsupported partition format: " + _partitionFormat);}if (MapReduceTool.existsFileOnHDFS(fname)) mb=readBlobFromHDFS(fname,rows,cols); else {mb=new MatrixBlock((int)rows,(int)cols,true);LOG.warn("Reading empty matrix partition " + fname);}}if (blockwise) {_partitionCacheName=fname;_cache=new SoftReference<MatrixBlock>(mb);if (_partitionFormat == PDataPartitionFormat.ROW_BLOCK_WISE) {int rix=(int)((pred.rowStart - 1) % brlen);mb=mb.sliceOperations(rix,rix,(int)(pred.colStart - 1),(int)(pred.colEnd - 1),new MatrixBlock());}if (_partitionFormat == PDataPartitionFormat.COLUMN_BLOCK_WISE) {int cix=(int)((pred.colStart - 1) % bclen);mb=mb.sliceOperations((int)(pred.rowStart - 1),(int)(pred.rowEnd - 1),cix,cix,new MatrixBlock());}}} catch (Exception ex) {throw new CacheException(ex);}if (DMLScript.STATISTICS) {long t1=System.nanoTime();CacheStatistics.incrementAcquireRTime(t1 - t0);}return mb;}  }
class C{  public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    super.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      out.write(encode3to4(b4,buffer,bufferLength));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (DECODABET[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0);        out.write(b4,0,len);        position=0;      }    } else     if (DECODABET[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public boolean hasUsage(){  return getUsage() != null;}  }
class C{  public static SRegRequest createFetchRequest(){  return new SRegRequest();}  }
class C{  private StructuredContent _getByLast(List elements,String expr) throws IllegalArgumentException {  int index=expr.indexOf("-");  if (index == -1) {    throw new IllegalArgumentException("Could not handle expression: " + expr);  }  String rvalue=expr.substring(index + 1).trim();  int dim=(elements.size() - 1) - Integer.parseInt(rvalue);  if (dim < 0) {    return null;  }  return (StructuredContent)elements.get(dim);}  }
class C{  public ShardRouting[] drain(){  ShardRouting[] mutableShardRoutings=unassigned.toArray(new ShardRouting[unassigned.size()]);  unassigned.clear();  primaries=0;  return mutableShardRoutings;}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public static void createIconCacheDirIfNotExists(){  createDirIfNotExists(SYSTEM_THEME_ICON_CACHE_DIR);}  }
class C{  public String foldTipText(){  return "The fold which is selected.";}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  return mInflater.inflate(mLayout,parent,false);}  }
class C{  private void showResetFor8020(boolean show){  if (show && !resetDisplayed) {    resetDisplayed=true;    slowestCount.setText("<form><p>" + slowestContent + " "+ RESET_LINK+ "</p></form>",true,false);  } else   if (!show && resetDisplayed) {    resetDisplayed=false;    slowestCount.setText("<form><p>" + slowestContent + "</p></form>",true,false);  }}  }
class C{  @Override public void handleStart(Operation startOperation){  ServiceUtils.logInfo(this,"Starting service %s",getSelfLink());  State startState=startOperation.getBody(State.class);  InitializationUtils.initialize(startState);  validateState(startState);  if (startState.taskState.stage == TaskState.TaskStage.CREATED) {    startState.taskState.stage=TaskState.TaskStage.STARTED;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  startOperation.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      sendStageProgressPatch(startState.taskState.stage);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public static final void shuffle(int[] a,Random r){  shuffle(a,0,a.length,r);}  }
class C{  public void addTokenToFilterChain(FilterChain filterChain,String key,String value){  ReplaceTokens replaceToken=new ReplaceTokens();  ReplaceTokens.Token token=new ReplaceTokens.Token();  token.setKey(key);  token.setValue(value);  replaceToken.addConfiguredToken(token);  filterChain.addReplaceTokens(replaceToken);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:14.454 -0400",hash_original_method="3D6ED86CB32057B75140F25F5AFE5484",hash_generated_method="AC2B6074B8350E280C8D594B75EA9D8C") public void on(boolean on){  isOn=on;}  }
class C{  Object processNUMBER(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    Double val;    AVT avt=null;    try {      avt=new AVT(handler,uri,name,rawName,value,owner);      if (avt.isSimple()) {        val=Double.valueOf(value);      }    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }catch (    NumberFormatException nfe) {      handleError(handler,XSLTErrorResources.INVALID_NUMBER,new Object[]{name,value},nfe);      return null;    }    return avt;  } else {    try {      return Double.valueOf(value);    } catch (    NumberFormatException nfe) {      handleError(handler,XSLTErrorResources.INVALID_NUMBER,new Object[]{name,value},nfe);      return null;    }  }}  }
class C{  public synchronized LogRecord readRecord(int waitMillis) throws IOException, InterruptedException, LogTimeoutException, ReplicatorException {  assertReadMode();  long offset=dataInput.getOffset();  if (logger.isDebugEnabled())   logger.debug("Reading log file position=" + offset);  dataInput.mark(65636);  long startIntervalMillis=System.currentTimeMillis();  long available=dataInput.waitAvailable(RECORD_LENGTH_SIZE,waitMillis);  if (available < RECORD_LENGTH_SIZE) {    dataInput.reset();    if (waitMillis > 0) {      throw new LogTimeoutException("Log read timeout: waitMillis=" + waitMillis + " file="+ file.getName()+ " offset="+ offset);    } else     if (available == 0) {      if (logger.isDebugEnabled())       logger.debug("Read empty record");      return new LogRecord(file,offset,false);    } else     if (available < RECORD_LENGTH_SIZE) {      if (logger.isDebugEnabled())       logger.debug("Length is truncated; returning immediately");      return new LogRecord(file,offset,true);    }  }  int recordLength=dataInput.readInt();  if (recordLength < LogRecord.NON_DATA_BYTES || recordLength > MAX_RECORD_LENGTH) {    logger.warn("Record length is invalid, log may be corrupt: offset=" + offset + " record length="+ recordLength);    dataInput.reset();    return new LogRecord(file,offset,true);  }  if (logger.isDebugEnabled())   logger.debug("Record length=" + recordLength);  waitMillis=waitMillis + (int)(startIntervalMillis - System.currentTimeMillis());  int remainingRecordLength=recordLength - RECORD_LENGTH_SIZE;  available=dataInput.waitAvailable(remainingRecordLength,waitMillis);  if (available < remainingRecordLength) {    dataInput.reset();    if (waitMillis > 0) {      throw new LogTimeoutException("Log read timeout: waitMillis=" + waitMillis + " file="+ file.getName()+ " offset="+ offset);    } else {      return new LogRecord(file,offset,true);    }  }  byte[] bytesToRead=new byte[recordLength - LogRecord.NON_DATA_BYTES];  dataInput.readFully(bytesToRead);  byte crcType=dataInput.readByte();  long crc=dataInput.readLong();  return new LogRecord(file,offset,bytesToRead,crcType,crc);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:57.507 -0500",hash_original_method="F400F1CB4F55C1DB38DB506118AEBF9E",hash_generated_method="399E1A91FCB7925032E7C1A70F4E4379") public int[] startSubnegotiationLocal(){  return null;}  }
class C{  public BooleanCondition not(Condition... conditions){  not=add(not,conditions);  return this;}  }
class C{  RefactoringHistory readRefactoringHistory(final long start,final long end,final IProgressMonitor monitor){  try {    monitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_retrieving_history,200);    final Set set=new HashSet();    try {      if (fHistoryStore.fetchInfo(EFS.NONE,new SubProgressMonitor(monitor,20,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)).exists())       readRefactoringDescriptorProxies(fHistoryStore,fProjectName,set,start,end,new SubProgressMonitor(monitor,80),RefactoringCoreMessages.RefactoringHistoryService_retrieving_history);      final IFileStore store=EFS.getLocalFileSystem().getStore(RefactoringCorePlugin.getDefault().getStateLocation()).getChild(RefactoringHistoryService.NAME_HISTORY_FOLDER).getChild(RefactoringHistoryService.NAME_WORKSPACE_PROJECT);      if (store.fetchInfo(EFS.NONE,new SubProgressMonitor(monitor,20,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)).exists())       readRefactoringDescriptorProxies(store,null,set,start,end,new SubProgressMonitor(monitor,80),RefactoringCoreMessages.RefactoringHistoryService_retrieving_history);    } catch (    CoreException exception) {      RefactoringCorePlugin.log(exception);    }    final RefactoringDescriptorProxy[] proxies=new RefactoringDescriptorProxy[set.size()];    set.toArray(proxies);    return new RefactoringHistoryImplementation(proxies);  }  finally {    monitor.done();  }}  }
class C{  protected void updatePicker(){  GraphEdgeMatcherDescriptor selected=(GraphEdgeMatcherDescriptor)((IStructuredSelection)setsList.getSelection()).getFirstElement();  this.selectedSet=selected;  edgeMatcherEditor.selectEdgeMatcher(selected,false);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","bupt");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void exportImport(TrackFileFormat trackFileFormat){  deleteExternalStorageFiles(trackFileFormat);  assertEquals(0,getExternalStorageFiles(trackFileFormat).length);  int trackCount=EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount();  exportTracks(trackFileFormat,trackCount);  assertEquals(trackCount,getExternalStorageFiles(trackFileFormat).length);  if (trackCount == 1) {    EndToEndTestUtils.deleteAllTracks();  }  importTracks(trackFileFormat);  EndToEndTestUtils.rotateCurrentActivity();  checkImportSuccess();  EndToEndTestUtils.SOLO.waitForActivity(TrackListActivity.class);  assertEquals(trackCount == 1 ? 1 : trackCount * 2,EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount());}  }
class C{  private void focusLast(){  if (this.listElement.hasChildNodes()) {    this.listElement.getLastElementChild().focus();  }}  }
class C{  private RealMatrix newRotationMatrix(int i,int j,double theta){  RealMatrix rotation=newIdentityMatrix();  rotation.setEntry(i,i,Math.cos(theta));  rotation.setEntry(i,j,-Math.sin(theta));  rotation.setEntry(j,i,Math.sin(theta));  rotation.setEntry(j,j,Math.cos(theta));  return rotation;}  }
class C{  void switchNodes(){  switchNodesCheck=true;}  }
class C{  public boolean hasInitialResponse(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.585 -0500",hash_original_method="F8AC228F4E44CF9CD673B1404700AC77",hash_generated_method="A35033C75A0CA6CDA8C6841148E74AFE") private float handleText(TextPaint wp,int start,int end,int contextStart,int contextEnd,boolean runIsRtl,Canvas c,float x,int top,int y,int bottom,FontMetricsInt fmi,boolean needWidth){  if (fmi != null) {    expandMetricsFromPaint(fmi,wp);  }  int runLen=end - start;  if (runLen == 0) {    return 0f;  }  float ret=0;  int contextLen=contextEnd - contextStart;  if (needWidth || (c != null && (wp.bgColor != 0 || wp.underlineColor != 0 || runIsRtl))) {    int flags=runIsRtl ? Paint.DIRECTION_RTL : Paint.DIRECTION_LTR;    if (mCharsValid) {      ret=wp.getTextRunAdvances(mChars,start,runLen,contextStart,contextLen,flags,null,0);    } else {      int delta=mStart;      ret=wp.getTextRunAdvances(mText,delta + start,delta + end,delta + contextStart,delta + contextEnd,flags,null,0);    }  }  if (c != null) {    if (runIsRtl) {      x-=ret;    }    if (wp.bgColor != 0) {      int previousColor=wp.getColor();      Paint.Style previousStyle=wp.getStyle();      wp.setColor(wp.bgColor);      wp.setStyle(Paint.Style.FILL);      c.drawRect(x,top,x + ret,bottom,wp);      wp.setStyle(previousStyle);      wp.setColor(previousColor);    }    if (wp.underlineColor != 0) {      float underlineTop=y + wp.baselineShift + (1.0f / 9.0f) * wp.getTextSize();      int previousColor=wp.getColor();      Paint.Style previousStyle=wp.getStyle();      boolean previousAntiAlias=wp.isAntiAlias();      wp.setStyle(Paint.Style.FILL);      wp.setAntiAlias(true);      wp.setColor(wp.underlineColor);      c.drawRect(x,underlineTop,x + ret,underlineTop + wp.underlineThickness,wp);      wp.setStyle(previousStyle);      wp.setColor(previousColor);      wp.setAntiAlias(previousAntiAlias);    }    drawTextRun(c,wp,start,end,contextStart,contextEnd,runIsRtl,x,y + wp.baselineShift);  }  return runIsRtl ? -ret : ret;}  }
class C{  @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  resp.getWriter().write("<html><body>");  processRequest(req,resp);}  }
class C{  public final BufferedImage filter(BufferedImage src,BufferedImage dst){  ColorModel srcCM=src.getColorModel();  ColorModel dstCM;  int numBands=srcCM.getNumColorComponents();  if (srcCM instanceof IndexColorModel) {    throw new IllegalArgumentException("Rescaling cannot be " + "performed on an indexed image");  }  if (length != 1 && length != numBands && length != srcCM.getNumComponents()) {    throw new IllegalArgumentException("Number of scaling constants " + "does not equal the number of" + " of color or color/alpha "+ " components");  }  boolean needToConvert=false;  if (length > numBands && srcCM.hasAlpha()) {    length=numBands + 1;  }  int width=src.getWidth();  int height=src.getHeight();  if (dst == null) {    dst=createCompatibleDestImage(src,null);    dstCM=srcCM;  } else {    if (width != dst.getWidth()) {      throw new IllegalArgumentException("Src width (" + width + ") not equal to dst width ("+ dst.getWidth()+ ")");    }    if (height != dst.getHeight()) {      throw new IllegalArgumentException("Src height (" + height + ") not equal to dst height ("+ dst.getHeight()+ ")");    }    dstCM=dst.getColorModel();    if (srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()) {      needToConvert=true;      dst=createCompatibleDestImage(src,null);    }  }  BufferedImage origDst=dst;  if (ImagingLib.filter(this,src,dst) == null) {    WritableRaster srcRaster=src.getRaster();    WritableRaster dstRaster=dst.getRaster();    if (srcCM.hasAlpha()) {      if (numBands - 1 == length || length == 1) {        int minx=srcRaster.getMinX();        int miny=srcRaster.getMinY();        int[] bands=new int[numBands - 1];        for (int i=0; i < numBands - 1; i++) {          bands[i]=i;        }        srcRaster=srcRaster.createWritableChild(minx,miny,srcRaster.getWidth(),srcRaster.getHeight(),minx,miny,bands);      }    }    if (dstCM.hasAlpha()) {      int dstNumBands=dstRaster.getNumBands();      if (dstNumBands - 1 == length || length == 1) {        int minx=dstRaster.getMinX();        int miny=dstRaster.getMinY();        int[] bands=new int[numBands - 1];        for (int i=0; i < numBands - 1; i++) {          bands[i]=i;        }        dstRaster=dstRaster.createWritableChild(minx,miny,dstRaster.getWidth(),dstRaster.getHeight(),minx,miny,bands);      }    }    filter(srcRaster,dstRaster);  }  if (needToConvert) {    ColorConvertOp ccop=new ColorConvertOp(hints);    ccop.filter(dst,origDst);  }  return origDst;}  }
class C{  public BlackVarianceTermStructure(final Date referenceDate,final Calendar cal){  this(referenceDate,cal,BusinessDayConvention.Following,new DayCounter());}  }
class C{  private void writeResults(final Connector accumuloConn,final String pcjTableName,final Collection<VisibilityBindingSet> results) throws PCJStorageException {  checkNotNull(accumuloConn);  checkNotNull(pcjTableName);  checkNotNull(results);  final PcjMetadata metadata=getPcjMetadata(accumuloConn,pcjTableName);  BatchWriter writer=null;  try {    writer=accumuloConn.createBatchWriter(pcjTableName,new BatchWriterConfig());    for (    final VisibilityBindingSet result : results) {      final Set<Mutation> addResultMutations=makeWriteResultMutations(metadata.getVarOrders(),result);      writer.addMutations(addResultMutations);    }  } catch (  TableNotFoundException|MutationsRejectedException e) {    throw new PCJStorageException("Could not add results to the PCJ table named: " + pcjTableName,e);  } finally {    if (writer != null) {      try {        writer.close();      } catch (      final MutationsRejectedException e) {        throw new PCJStorageException("Could not add results to a PCJ table because some of the mutations were rejected.",e);      }    }  }}  }
class C{  public static Properties filteredSystemProperties(final Properties existing,final boolean withMaven){  final Properties properties=new Properties();  System.getProperties().stringPropertyNames().forEach(null);  return properties;}  }
class C{  private void container(int x,int y){  TargetMarker container=new TargetMarker(1,1);  container.setPosition(this.getX() + x,this.getY() + y);  this.getZone().add(container);  entitiesToCleanup.add(container);  containerLocations.add(new Pair<Integer,Integer>(Integer.valueOf(this.getX() + x),Integer.valueOf(this.getY() + y)));}  }
class C{  public static boolean isValidGetId(DispatchContext ctx,Map<String,?> context){  String currentUserLoginId=null;  GenericValue userLogin=(GenericValue)context.get("userLogin");  if (userLogin == null) {    currentUserLoginId=DEFAULT_UID;  } else {    currentUserLoginId=userLogin.getString("userLoginId");  }  String userLoginIdArg=(String)context.get(LOGINID_PARAMETER_NAME);  if (!currentUserLoginId.equals(DEFAULT_UID) && !currentUserLoginId.equals(userLoginIdArg) && userLoginIdArg != null) {    Security security=ctx.getSecurity();    return security.hasPermission(ADMIN_PERMISSION,userLogin);  }  return true;}  }
class C{  @Override public void delete(){  if (!deleted) {    deleted=true;    commitsToDelete.add(this);  }}  }
class C{  public String removeDetalle(String tipo){  return (String)detalles.remove(tipo);}  }
class C{  public void testAutoPortSelection() throws CoreException {  final MockLaunchConfiguration config=new MockLaunchConfiguration();  config.setAttribute(WebAppLaunchAttributes.AUTO_PORT_SELECTION,Boolean.TRUE);  WebAppLaunchDelegate delegate=new WebAppLaunchDelegate();  assertTrue(delegate.promptUserToContinueIfPortNotAvailable(config));}  }
class C{  public static void register(){  DdmServer.registerHandler(CHUNK_MPRS,mInstance);  DdmServer.registerHandler(CHUNK_MPRE,mInstance);  DdmServer.registerHandler(CHUNK_MPSS,mInstance);  DdmServer.registerHandler(CHUNK_MPSE,mInstance);  DdmServer.registerHandler(CHUNK_MPRQ,mInstance);}  }
class C{  protected AnnotationConfigApplicationContext buildContext(){  return null;}  }
class C{  void handleClient() throws IOException {  InputStream is=new BufferedInputStream(s.getInputStream());  PrintStream ps=new PrintStream(s.getOutputStream());  int nread=0;  s.setSoTimeout(mTimeout);  s.setTcpNoDelay(true);  do {    nread=parseStatusLine(is);    if (requestMethod != UNKNOWN_METHOD) {      nread=readHeaders(is);      pathToRequest().put(path,new Request(path,headers));      if (headers.get(requestHeaders[REQ_CONTENT_LENGTH]) != null) {        nread=readContent(is);      }    } else {      if (nread > 0) {        ps.print(HTTP_VERSION_STRING + " " + HTTP_BAD_METHOD+ " unsupported method type: ");        ps.write(buf,0,5);        ps.write(EOL);        ps.flush();      } else {      }      if (!keepAlive || nread <= 0) {        headers.clear();        readStarted=false;        log("SOCKET CLOSED");        s.close();        return;      }    }    testNum=-1;    printStatus(ps);    printHeaders(ps);    psWriteEOL(ps);    if (redirectCode == -1) {switch (requestMethod) {case GET_METHOD:        if ((testNum < -1) || (testNum > Support_TestWebData.tests.length - 1)) {          send404(ps);        } else {          sendFile(ps);        }      break;case HEAD_METHOD:    break;case POST_METHOD:  if ((testNum > 0) || (testNum < Support_TestWebData.tests.length - 1)) {    sendFile(ps);  }break;default :break;}} else {switch (redirectCode) {case 301:psPrint(ps,Support_TestWebData.testServerResponse[Support_TestWebData.REDIRECT_301]);break;case 302:psPrint(ps,Support_TestWebData.testServerResponse[Support_TestWebData.REDIRECT_302]);break;case 303:psPrint(ps,Support_TestWebData.testServerResponse[Support_TestWebData.REDIRECT_303]);break;case 307:psPrint(ps,Support_TestWebData.testServerResponse[Support_TestWebData.REDIRECT_307]);break;default :break;}}ps.flush();readStarted=false;headers.clear();} while (keepAlive);log("SOCKET CLOSED");s.close();}  }
class C{  private void hideSoftKeyboard(){  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);}  }
class C{  @DSComment("not sensitive/not an action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:20.339 -0500",hash_original_method="01B773645C99A4A75AE8FF989ECB51E3",hash_generated_method="B92B51CE45AEE8F572792599DBFF4411") public static XmlSerializer newSerializer(){  try {    return XmlSerializerFactory.instance.newSerializer();  } catch (  XmlPullParserException e) {    throw new AssertionError(e);  }}  }
class C{  public boolean isUnselectAllowed(){  return unselectAllowed;}  }
class C{  public static void groupSelectedNodes(final ZyGraph graph){  final List<NaviNode> nodes=filterSelectedNodes(graph.getSelectedNodes());  if (!nodes.isEmpty()) {    groupNodes(graph,nodes);  }}  }
class C{  protected CSSValue createCSSValue(int idx){  if (idx > SVGCSSEngine.FINAL_INDEX) {    if (cssEngine.getValueManagers()[idx] instanceof SVGPaintManager) {      return new ComputedCSSPaintValue(idx);    }    if (cssEngine.getValueManagers()[idx] instanceof SVGColorManager) {      return new ComputedCSSColorValue(idx);    }  } else {switch (idx) {case SVGCSSEngine.FILL_INDEX:case SVGCSSEngine.STROKE_INDEX:      return new ComputedCSSPaintValue(idx);case SVGCSSEngine.FLOOD_COLOR_INDEX:case SVGCSSEngine.LIGHTING_COLOR_INDEX:case SVGCSSEngine.STOP_COLOR_INDEX:    return new ComputedCSSColorValue(idx);}}return super.createCSSValue(idx);}  }
class C{  private BooleanProperty createActiveBooleanProperty(Function<FileEditor,ObservableBooleanValue> func){  BooleanProperty b=new SimpleBooleanProperty();  FileEditor fileEditor=fileEditorTabPane.getActiveFileEditor();  if (fileEditor != null)   b.bind(func.apply(fileEditor));  fileEditorTabPane.activeFileEditorProperty().addListener(null);  return b;}  }
class C{  public static int intArrayGet(int[] a,int i){  try {    return a[i];  } catch (  Throwable t) {    return a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)];  }}  }
class C{  public static void fillInt(int[] array,int x){  for (int i=0; i < array.length; i++) {    array[i]=x;  }}  }
class C{  public boolean containsExcludeResultPrefix(String prefix,String uri){  if (uri == null || (null == m_excludeResultPrefixes && null == m_ExtensionElementURIs))   return super.containsExcludeResultPrefix(prefix,uri);  if (prefix.length() == 0)   prefix=Constants.ATTRVAL_DEFAULT_PREFIX;  if (m_excludeResultPrefixes != null)   for (int i=0; i < m_excludeResultPrefixes.size(); i++) {    if (uri.equals(getNamespaceForPrefix(m_excludeResultPrefixes.elementAt(i))))     return true;  }  if (m_ExtensionElementURIs != null && m_ExtensionElementURIs.contains(uri))   return true;  return super.containsExcludeResultPrefix(prefix,uri);}  }
class C{  public static void initializeSquare(char[][] square){  Scanner input=new Scanner(System.in);  for (int i=0; i < square.length; i++) {    for (int j=0; j < square[i].length; j++) {      String str=input.next();      char ch=str.charAt(0);      if (ch >= 'A' && ch < (char)('A' + square.length))       square[i][j]=ch; else {        System.out.println("Wrong input: the letters must be from A to " + (char)('A' + square.length - 1));        System.exit(1);      }    }  }}  }
class C{  public IvParameterSpec(byte[] iv){  if (iv == null) {    throw new NullPointerException("iv == null");  }  this.iv=new byte[iv.length];  System.arraycopy(iv,0,this.iv,0,iv.length);}  }
class C{  public boolean isMinimized(){  return getImplementation().isMinimized();}  }
class C{  public static void register(Map tagletMap){  UnderlineTaglet tag=new UnderlineTaglet();  Taglet t=(Taglet)tagletMap.get(tag.getName());  if (t != null) {    tagletMap.remove(tag.getName());  }  tagletMap.put(tag.getName(),tag);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.035 -0500",hash_original_method="2E50FC990DF5F99ED2B436DB68D65D30",hash_generated_method="00378E813D9AAE96C89E687C495CF7FE") @SuppressWarnings({"UnusedParameters"}) public BitmapDrawable(Resources res,String filepath){  this(new BitmapState(BitmapFactory.decodeFile(filepath)),null);  mBitmapState.mTargetDensity=mTargetDensity;  if (mBitmap == null) {    android.util.Log.w("BitmapDrawable","BitmapDrawable cannot decode " + filepath);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Matcher reset(){  matcher.reset();  return this;}  }
class C{  private Workflow.Method rollbackMethodNullMethod(){  return new Workflow.Method(ROLLBACK_METHOD_NULL);}  }
class C{  public void font(int fontId,int textHeight) throws IOException {  getCurrentStyle()[0]=new int[]{fontId,textHeight};}  }
class C{  public void idr(){  ff_h264_remove_all_refs();  this.prev_frame_num=0;  this.prev_frame_num_offset=0;  this.prev_poc_msb=this.prev_poc_lsb=0;}  }
class C{  private String badArrive(long s){  return "Attempted arrival of unregistered party for " + stateToString(s);}  }
class C{  public static LineIterator lineIterator(File file) throws IOException {  return lineIterator(file,null);}  }
class C{  public static CCScaleTo action(float t,float s){  return new CCScaleTo(t,s);}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  int modulus=length % 3;  int dataLength=(length - modulus);  int a1, a2, a3;  for (int i=off; i < off + dataLength; i+=3) {    a1=data[i] & 0xff;    a2=data[i + 1] & 0xff;    a3=data[i + 2] & 0xff;    out.write(encodingTable[(a1 >>> 2) & 0x3f]);    out.write(encodingTable[((a1 << 4) | (a2 >>> 4)) & 0x3f]);    out.write(encodingTable[((a2 << 2) | (a3 >>> 6)) & 0x3f]);    out.write(encodingTable[a3 & 0x3f]);  }  int b1, b2, b3;  int d1, d2;switch (modulus) {case 0:    break;case 1:  d1=data[off + dataLength] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=(d1 << 4) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(padding);out.write(padding);break;case 2:d1=data[off + dataLength] & 0xff;d2=data[off + dataLength + 1] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=((d1 << 4) | (d2 >>> 4)) & 0x3f;b3=(d2 << 2) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(encodingTable[b3]);out.write(padding);break;}return (dataLength / 3) * 4 + ((modulus == 0) ? 0 : 4);}  }
class C{  public void removeEffect(Effect e){  effects.remove(e);}  }
class C{  private boolean allVolumeSizesMatch(List<Long> currentVolumeSizes){  List<Long> currentVolumeSizesCopy=new ArrayList<Long>();  currentVolumeSizesCopy.addAll(currentVolumeSizes);  for (  Long currentSize : currentVolumeSizes) {    for (    Long compareSize : currentVolumeSizesCopy) {      if (currentSize.longValue() != compareSize.longValue()) {        return false;      }    }  }  _log.info("All volumes are of the same size. No need for capacity calculations.");  return true;}  }
class C{  public static void mergeSort(char[] a,int fromIndex,int toIndex,CharComparator c){  rangeCheck(a.length,fromIndex,toIndex);  char aux[]=(char[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex,c);}  }
class C{  public void fillRadialGradient(int startColor,int endColor,int x,int y,int width,int height,int startAngle,int arcAngle){  impl.fillRadialGradient(nativeGraphics,startColor,endColor,x + xTranslate,y + yTranslate,width,height,startAngle,arcAngle);}  }
class C{  public long nextId() throws NotificationStoreException {  final long id;  if (enabled) {    try {      id=snowizard.nextId();    } catch (    InvalidSystemClock e) {      LOGGER.error("Clock is moving backward to generate IDs",e);      throw new NotificationStoreException(e);    }  } else {    id=nextId.getAndIncrement();  }  return id;}  }
class C{  public void addUnloadEvent(int part){  if (!cctx.events().isRecordable(EVT_CACHE_REBALANCE_PART_UNLOADED))   LT.warn(log,"Added event without checking if event is recordable: " + U.gridEventName(EVT_CACHE_REBALANCE_PART_UNLOADED));  cctx.gridEvents().record(new CacheRebalancingEvent(cctx.name(),cctx.localNode(),"Cache unloading event.",EVT_CACHE_REBALANCE_PART_UNLOADED,part,null,0,0));}  }
class C{  public final double min(){  double min=Double.POSITIVE_INFINITY;  final int width=this.width;  final int height=this.height;  double[] fieldx=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++)     if (min > fieldx[y])     min=fieldx[y];  }  return min;}  }
class C{  public void removeActionListener(ActionListener l){  dispatcher.removeListener(l);}  }
class C{  @RequestMapping(method=RequestMethod.GET) public ResultVO all(@And({@Spec(path="name",spec=Like.class),@Spec(path="path",spec=Like.class),@Spec(path="validFlag",constVal="VALID",spec=In.class),@Spec(path="createdDate",params={"createdDateAfter, createdDateBefore"},spec=DateBetween.class)}) Specification<Resource> resourceSpecification,ResourceParam param){  try {    if (param.getPageNo() == null) {      return resultHelper.successResp(resourceDomain.getAll(resourceSpecification,QueryHelper.getSort(param.getSortBy()),ResourceVO.class));    }    return resultHelper.successResp(resourceDomain.getPage(resourceSpecification,QueryHelper.getPageRequest(param),ResourceVO.class));  } catch (  CommonsException e) {    return resultHelper.infoResp(logger,e.getErrorType(),e.getMessage());  }catch (  Exception e) {    return resultHelper.errorResp(logger,e,ErrorType.UNKNOWN,e.getMessage());  }}  }
class C{  private void updateWifiStatusDisplay(){  final WifiManager wifiManager=(WifiManager)getActivity().getSystemService(Context.WIFI_SERVICE);  wifi.setText(Boolean.toString(wifiManager.isWifiEnabled()));}  }
class C{  private String findTempDir(){  for (  String path : PATHS) {    File logFile=new File(path,"admin.log");    try {      logFile.createNewFile();      if (logFile.canWrite()) {        return path;      }    } catch (    IOException e) {    }  }  return "";}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  private void createSummaryPage(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebDoc doc=WebDoc.create("Adempiere Server Monitor");  body bb=doc.getBody();  if (m_message != null) {    bb.addElement(new hr());    bb.addElement(m_message);    bb.addElement(new hr());  }  table table=new table();  table.setBorder(1);  table.setCellSpacing(2);  table.setCellPadding(2);  tr line=new tr();  line.addElement(new th().addElement(Adempiere.getName()));  line.addElement(new td().addElement(Adempiere.getVersion()));  table.addElement(line);  line=new tr();  line.addElement(new th().addElement(Adempiere.getImplementationVendor()));  line.addElement(new td().addElement(Adempiere.getImplementationVersion()));  table.addElement(line);  line=new tr();  line.addElement(new th().addElement("Manager"));  line.addElement(new td().addElement(WebEnv.getCellContent(m_serverMgr.getDescription())));  table.addElement(line);  line=new tr();  line.addElement(new th().addElement("Start - Elapsed"));  line.addElement(new td().addElement(WebEnv.getCellContent(m_serverMgr.getStartTime()) + " - " + TimeUtil.formatElapsed(m_serverMgr.getStartTime())));  table.addElement(line);  line=new tr();  line.addElement(new th().addElement("Servers"));  line.addElement(new td().addElement(WebEnv.getCellContent(m_serverMgr.getServerCount())));  table.addElement(line);  line=new tr();  line.addElement(new th().addElement("Last Updated"));  line.addElement(new td().addElement(new Timestamp(System.currentTimeMillis()).toString()));  table.addElement(line);  bb.addElement(table);  p para=new p();  a link=new a("adempiereMonitor?Action=Start_All","Start All");  para.addElement(link);  para.addElement(" - ");  link=new a("adempiereMonitor?Action=Stop_All","Stop All");  para.addElement(link);  para.addElement(" - ");  link=new a("adempiereMonitor","Refresh");  para.addElement(link);  bb.addElement(para);  bb.addElement(new hr());  para=new p();  AdempiereServer[] servers=m_serverMgr.getAll();  for (int i=0; i < servers.length; i++) {    if (i > 0)     para.addElement(new br());    AdempiereServer server=servers[i];    link=new a("#" + server.getServerID(),server.getName());    para.addElement(link);    font status=null;    if (server.isAlive())     status=new font().setColor(HtmlColor.GREEN).addElement(" (Running)"); else     status=new font().setColor(HtmlColor.RED).addElement(" (Stopped)");    para.addElement(status);  }  bb.addElement(para);  createLogMgtPage(bb);  for (int i=0; i < servers.length; i++) {    AdempiereServer server=servers[i];    bb.addElement(new hr());    bb.addElement(new a().setName(server.getServerID()));    bb.addElement(new h2(server.getName()));    table=new table();    table.setBorder(1);    table.setCellSpacing(2);    table.setCellPadding(2);    line=new tr();    if (server.isAlive()) {      String msg="Stop";      if (server.isInterrupted())       msg+=" (Interrupted)";      link=new a("adempiereMonitor?Action=Stop_" + server.getServerID(),msg);      if (server.isSleeping()) {        line.addElement(new th().addElement("Sleeping"));        line.addElement(new td().addElement(link));      } else {        line.addElement(new th().addElement("Running"));        line.addElement(new td().addElement(link));      }      table.addElement(line);      line=new tr();      line.addElement(new th().addElement("Start - Elapsed"));      line.addElement(new td().addElement(WebEnv.getCellContent(server.getStartTime()) + " - " + TimeUtil.formatElapsed(server.getStartTime())));    } else {      String msg="Start";      if (server.isInterrupted())       msg+=" (Interrupted)";      line.addElement(new th().addElement("Not Started"));      link=new a("adempiereMonitor?Action=Start_" + server.getServerID(),msg);      line.addElement(new td().addElement(link));    }    table.addElement(line);    line=new tr();    line.addElement(new th().addElement("Description"));    line.addElement(new td().addElement(WebEnv.getCellContent(server.getDescription())));    table.addElement(line);    line=new tr();    line.addElement(new th().addElement("Last Run"));    line.addElement(new td().addElement(WebEnv.getCellContent(server.getDateLastRun())));    table.addElement(line);    line=new tr();    line.addElement(new th().addElement("Info"));    line.addElement(new td().addElement(WebEnv.getCellContent(server.getServerInfo())));    table.addElement(line);    line=new tr();    line.addElement(new th().addElement("Next Run"));    td td=new td();    td.addElement(WebEnv.getCellContent(server.getDateNextRun(false)));    td.addElement(" - ");    link=new a("adempiereMonitor?RunNow=" + server.getServerID(),"(Run Now)");    td.addElement(link);    line.addElement(td);    table.addElement(line);    line=new tr();    line.addElement(new th().addElement("Statistics"));    line.addElement(new td().addElement(server.getStatistics()));    table.addElement(line);    bb.addElement(table);    link=new a("#top","Top");    bb.addElement(link);    bb.addElement(" - ");    link=new a("adempiereMonitor?Log=" + server.getServerID(),"Log");    bb.addElement(link);    bb.addElement(" - ");    link=new a("adempiereMonitor","Refresh");    bb.addElement(link);  }  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public void firePropertyChange(String propertyName,char oldValue,char newValue){}  }
class C{  protected void sequence_TAnnotationTypeRefArgument(ISerializationContext context,TAnnotationTypeRefArgument semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.TANNOTATION_TYPE_REF_ARGUMENT__TYPE_REF));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTAnnotationTypeRefArgumentAccess().getTypeRefTypeRefParserRuleCall_0(),semanticObject.getTypeRef());  feeder.finish();}  }
class C{  public static void clear(){  if (mCachePool != null) {    mCachePool.clear();  }}  }
class C{  protected void updateTextChange(){  fText=fDocumentUndoManager.fTextBuffer.toString();  fDocumentUndoManager.fTextBuffer.setLength(0);  fPreservedText=fDocumentUndoManager.fPreservedTextBuffer.toString();  fDocumentUndoManager.fPreservedTextBuffer.setLength(0);}  }
class C{  public void requestCallback(WebView webView,Runnable callbackRunnable){  mCallbackRunnable=callbackRunnable;  webView.loadUrl("javascript:(function() { " + mInterfaceName + ".callback(); })();");}  }
class C{  public void add(int id,String name,int parentId,int srvArchId,String srvArchName,int srvFdrId){  FolderTokenFdrLink link;  link=new FolderTokenFdrLink(id,name,parentId,srvArchId,srvArchName,srvFdrId);  super.add(link);}  }
class C{  public void readMapEnd() throws IOException {  int code=read();  if (code != 'z')   throw error("expected end of map ('z') at " + codeName(code));}  }
class C{  public boolean isIgnoreJTA(){  return ignoreJTA;}  }
class C{  private static byte[] timeKey(ProfilePeriod period){  return Bytes.toBytes(period.getPeriod());}  }
class C{  public ServiceInfo[] list(long timeout){  if (_infos.isEmpty() || !_events.isEmpty() || _needToWaitForInfos) {    long loops=(timeout / 200L);    if (loops < 1) {      loops=1;    }    for (int i=0; i < loops; i++) {      try {        Thread.sleep(200);      } catch (      final InterruptedException e) {      }      if (_events.isEmpty() && !_infos.isEmpty() && !_needToWaitForInfos) {        break;      }    }  }  _needToWaitForInfos=false;  return _infos.values().toArray(new ServiceInfo[_infos.size()]);}  }
class C{  public ProvidedRuntimeLibraries createProvidedRuntimeLibraries(){  ProvidedRuntimeLibrariesImpl providedRuntimeLibraries=new ProvidedRuntimeLibrariesImpl();  return providedRuntimeLibraries;}  }
class C{  public SampleVcpcFastRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static String createGridNodeId(int x,int y){  return (x + "_" + y);}  }
class C{  public MatsimFacilitiesReader(final Scenario scenario){  this(new IdentityTransformation(),scenario);}  }
class C{  @Override protected void portWarn(Exception e){}  }
class C{  public void writeByte(byte x){  data[pos++]=x;}  }
class C{  private void saveConfig(String path){  File file=new File(path);  if (!file.exists()) {    try {      file.createNewFile();    } catch (    IOException ex) {      JOptionPane.showMessageDialog(this,"Can not create the config file.","Can not create file.",JOptionPane.ERROR_MESSAGE);      Logging.getInstance().log(getClass(),ex);    }catch (    Exception ex) {      Logging.getInstance().log(getClass(),ex);    }  }  if (!file.isDirectory() && file.canWrite() && file.canRead()) {    JSONObject config_obj=new JSONObject();    config_obj.put("SSOActive",activeSSOProtocols.isSelected());    config_obj.put("OpenIDActive",openID1.isSelected());    config_obj.put("OpenIDConnectActive",openIDConnect1.isSelected());    config_obj.put("OAuthActive",oAuth.isSelected());    config_obj.put("FacebookConnectActive",facebookConnect.isSelected());    config_obj.put("BrowserIDActive",browserID1.isSelected());    config_obj.put("SAMLActive",saml1.isSelected());    config_obj.put("MicrosoftAccountActive",msAccount.isSelected());    config_obj.put("HighlightActive",highlightBool);    config_obj.put("Schema",schemaText1.getText());    config_obj.put("Certificate",certText1.getText());    config_obj.put("Private Key",privKeyText1.getText());    config_obj.put("Public Key",pubKeyText1.getText());    config_obj.put("Input Script",scriptInText1.getText());    config_obj.put("Output Script",scriptOutText1.getText());    config_obj.put("Libraries",libText1.getText());    config_obj.put("Config",path);    config_obj.put("LogLvl",LoggingLevel);    try {      FileWriter fw=new FileWriter(file);      try {        fw.write(config_obj.toJSONString());      } catch (      IOException ex) {        JOptionPane.showMessageDialog(this,"The config file can not be written!\n\nError:\n" + ex.toString(),"Can not write in config file",JOptionPane.ERROR_MESSAGE);        Logging.getInstance().log(getClass(),ex);      } finally {        fw.flush();        fw.close();      }    } catch (    IOException ex) {      JOptionPane.showMessageDialog(this,"Can not open the config file!\n\nError:\n" + ex.toString(),"Can not open config file",JOptionPane.ERROR_MESSAGE);      Logging.getInstance().log(getClass(),ex);    }catch (    Exception ex) {      Logging.getInstance().log(getClass(),ex);    }  } else {    JOptionPane.showMessageDialog(this,"The file:\n" + path + "\n is not readable/writable.","File not Found!",JOptionPane.ERROR_MESSAGE);    Logging.getInstance().log(getClass(),"The file:" + path + " is not readable/writable.",Logging.ERROR);  }}  }
class C{  public StateMachine(State[] s){  for (int i=0; i < s.length; i++)   states.addElement(s[i]);}  }
class C{  public boolean covers(final int offset){  return ((this.getBegin() <= offset) && (this.getEnd() > offset));}  }
class C{  private boolean skipToNextSync(ParsableByteArray pesBuffer){  while (pesBuffer.bytesLeft() > 0) {    syncBytes<<=8;    syncBytes|=pesBuffer.readUnsignedByte();    if (syncBytes == SYNC_VALUE) {      syncBytes=0;      return true;    }  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.752 -0500",hash_original_method="7D28734FCE7370D8FDCC234164691F4C",hash_generated_method="F2CD77CABB152658A32F315E702CC3F9") public static Bitmap decodeFile(String pathName){  return decodeFile(pathName,null);}  }
class C{  public void saveCameraDirection(ScenePreferences prefs){  CameraDirPreference prefsDir=prefs.getCameraDir();  if (null == prefsDir) {    prefsDir=CameraPosPreference.getDefaultCameraDir();    prefs.setCameraDir(prefsDir);  }  float[] scenePos=glPanel.getCameraDirection();  prefsDir.setX(scenePos[0]);  prefsDir.setY(scenePos[1]);  prefsDir.setZ(scenePos[2]);}  }
class C{  private static String handleServerError(Object err,Context context){  VolleyError error=(VolleyError)err;  NetworkResponse response=error.networkResponse;  if (response != null) {switch (response.statusCode) {case 404:case 422:case 401:      try {        HashMap<String,String> result=new Gson().fromJson(new String(response.data),new TypeToken<Map<String,String>>(){        }.getType());        if (result != null && result.containsKey("error")) {          return result.get("error");        }      } catch (      Exception e) {        e.printStackTrace();      }    return error.getMessage();default :  return context.getResources().getString(R.string.generic_server_down);}}return context.getResources().getString(R.string.generic_error);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) byte dirTypeForward(){  lastChar=text.charAt(charIndex);  if (Character.isHighSurrogate(lastChar)) {    int codePoint=Character.codePointAt(text,charIndex);    charIndex+=Character.charCount(codePoint);    return Character.getDirectionality(codePoint);  }  charIndex++;  byte dirType=getCachedDirectionality(lastChar);  if (isHtml) {    if (lastChar == '<') {      dirType=skipTagForward();    } else     if (lastChar == '&') {      dirType=skipEntityForward();    }  }  return dirType;}  }
class C{  @DSSource({DSSourceKind.DATE_TIME}) @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:11.277 -0500",hash_original_method="F7971D7A9962AA78000A8292B336C43C",hash_generated_method="C4F82B04518E944139744F728FE1B9E7") @Override public String toString(){  StringBuilder sb=new StringBuilder(10);  format((getYear() + 1900),4,sb);  sb.append('-');  format((getMonth() + 1),2,sb);  sb.append('-');  format(getDate(),2,sb);  return sb.toString();}  }
class C{  @Override public void execute() throws MojoExecutionException {  Reader r=null;  if (this.descriptor != null) {    try {      r=new FileReader(this.descriptor);    } catch (    FileNotFoundException ex) {      throw new MojoExecutionException("Could not find specified descriptor");    }  } else   if (this.descriptorId != null) {    InputStream resourceAsStream=getClass().getResourceAsStream("/uberwar/" + this.descriptorId + ".xml");    if (resourceAsStream == null) {      throw new MojoExecutionException("Descriptor with ID '" + this.descriptorId + "' not found");    }    r=new InputStreamReader(resourceAsStream);  } else {    throw new MojoExecutionException("You must specify descriptor or descriptorId");  }  try {    UberWarXpp3Reader reader=new UberWarXpp3Reader();    MergeRoot root=reader.read(r);    WarArchiveMerger wam=new WarArchiveMerger();    List<String> wars=root.getWars();    if (wars.size() == 0) {      addAllWars(wam);    } else {      for (      String id : wars) {        addWar(wam,id);      }    }    if (resolveDependencies) {      wam.setMergeJarFiles(false);      addAllTransitiveJars(wam);    } else {      addAllDependentJars(wam);    }    for (    Object mergeObject : root.getMerges()) {      Merge merge=(Merge)mergeObject;      doMerge(wam,merge);    }    File assembleDir=new File(this.outputDirectory,this.warName);    File warFile=new File(this.outputDirectory,this.warName + ".war");    MergedWarArchive output=(MergedWarArchive)wam.performMerge();    output.merge(assembleDir.getAbsolutePath());    WarArchiver warArchiver=new WarArchiver();    warArchiver.addDirectory(assembleDir);    warArchiver.setIgnoreWebxml(false);    MavenArchiver mar=new MavenArchiver();    mar.setArchiver(warArchiver);    mar.setOutputFile(warFile);    mar.createArchive(mavenProject,archive);    getProject().getArtifact().setFile(warFile);  } catch (  XmlPullParserException e) {    throw new MojoExecutionException("Invalid XML descriptor",e);  }catch (  IOException e) {    throw new MojoExecutionException("IOException creating UBERWAR",e);  }catch (  JDOMException e) {    throw new MojoExecutionException("Xml format exception creating UBERWAR",e);  }catch (  MergeException e) {    throw new MojoExecutionException("Merging exception creating UBERWAR",e);  }catch (  ArchiverException e) {    throw new MojoExecutionException("Archiver exception creating UBERWAR",e);  }catch (  ManifestException e) {    throw new MojoExecutionException("Manifest exception creating UBERWAR",e);  }catch (  DependencyResolutionRequiredException e) {    throw new MojoExecutionException("Dependency resolution exception creating UBERWAR",e);  }}  }
class C{  public DatatypeConfigurationException(){}  }
class C{  public static boolean deserializeBoolean(byte[] buffer,MutableInt offset){  boolean val=buffer[offset.intValue()] != 0;  offset.add(Type.BOOLEAN.getByteSize());  return val;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST:    setAnnotationList((AnnotationList)null);  return;}super.eUnset(featureID);}  }
class C{  public static RuntimeException rSuicide(String msg){  if (RInterfaceCallbacks.R_Suicide.isOverridden()) {    RFFIFactory.getRFFI().getREmbedRFFI().suicide(msg);  }  throw rSuicideDefault(msg);}  }
class C{  public static long[] append(long buffer[],long newElement){  long[] t=resize(buffer,buffer.length + 1);  t[buffer.length]=newElement;  return t;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void doWriteObject(ObjectOutputStream outStream) throws IOException {  outStream.writeInt(keyType);  outStream.writeInt(valueType);  outStream.writeBoolean(purgeValues);  outStream.writeFloat(loadFactor);  outStream.writeInt(data.length);  for (MapIterator it=mapIterator(); it.hasNext(); ) {    outStream.writeObject(it.next());    outStream.writeObject(it.getValue());  }  outStream.writeObject(null);}  }
class C{  public static void deleteLocalEdgeComment(final AbstractSQLProvider provider,final INaviEdge edge,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE00509: provider argument can not be null");  Preconditions.checkNotNull(edge,"IE00510: codeNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE00511: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE00512: userId argument can not be null");  final String function=" { ? = call delete_local_edge_comment(?, ?, ?) } ";  try {    final CallableStatement deleteCommentFunction=provider.getConnection().getConnection().prepareCall(function);    try {      deleteCommentFunction.registerOutParameter(1,Types.INTEGER);      deleteCommentFunction.setInt(2,edge.getId());      deleteCommentFunction.setInt(3,commentId);      deleteCommentFunction.setInt(4,userId);      deleteCommentFunction.execute();      deleteCommentFunction.getInt(1);      if (deleteCommentFunction.wasNull()) {        throw new IllegalArgumentException("Error: the comment id returned from the database was null");      }    }  finally {      deleteCommentFunction.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  @Override public Class<OFMatch> handledType(){  return OFMatch.class;}  }
class C{  public void close(){  try {    mKeepAliveManager.stop();    mListeners.clear();    for (    SipProvider sipProvider : mSipProviders) {      sipProvider.removeSipListener(this);      sipProvider.removeListeningPoints();      try {        mSipStack.deleteSipProvider(sipProvider);      } catch (      ObjectInUseException e) {        sLogger.error("SipProvider still has an associated SipListener!",e);      }    }  }  finally {    if (mSipStack != null) {      mSipStack.stop();    } else {      if (sLogger.isActivated()) {        sLogger.debug("SIP stack is null");      }    }    SipFactory.getInstance().resetFactory();  }}  }
class C{  @After public void executeTest() throws Throwable {  try {    testEnv.executeTest();  } catch (  AssertionError assertionError) {    if (testEnv.hasBeenStopped()) {      throw new AssertionError("Test terminated due timeout!" + assertionError.getMessage());    }    throw assertionError;  }}  }
class C{  protected void afterWriting(){  if (session != null) {    session.afterWriting();  }}  }
class C{  public static FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder,ScoreFunctionBuilder function){  return (new FunctionScoreQueryBuilder(queryBuilder)).add(function);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected SecretKey engineGenerateSecret(KeySpec keySpec) throws InvalidKeySpecException {  if (!(keySpec instanceof PBEKeySpec)) {    throw new InvalidKeySpecException("Invalid key spec");  }  PBEKeySpec ks=(PBEKeySpec)keySpec;  return new PBKDF2KeyImpl(ks,"HmacSHA1");}  }
class C{  public boolean isShowCustomerSelectStep(){  if (model.getSelectedBillingDataType() == null)   return false;  if (model.getSelectedBillingDataType().equals(BillingDataType.RevenueShare))   return false;  if (model.getBillingSharesResultTypes().contains(BillingSharesResultType.RESELLER))   return true;  if (model.getBillingSharesResultTypes().contains(BillingSharesResultType.SUPPLIER))   return true;  return false;}  }
class C{  public CubicArea(int x1,int y1,int z1,int x2,int y2,int z2,World world){  this.x1=x1;  this.y1=y1;  this.z1=z1;  this.x2=x2;  this.y2=y2;  this.z2=z2;  this.world=world;}  }
class C{  public synchronized void deleteObserver(Observer observer){  observers.remove(observer);}  }
class C{  public boolean userCanEditUser(int connectedUserId,int UserId,String entidad) throws Exception {  boolean can=false;  int parentId=Defs.NULL_ID;  int deptMgrId=Defs.NULL_ID;  try {    parentId=getUserParentId(UserId,entidad);    deptMgrId=getDeptMgrId(parentId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_EDIT,deptMgrId,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public static void clear(){  getEntityManager().clear();}  }
class C{  public void translate(Point point,Location location){  translate(point.x,point.y,location);}  }
class C{  public void savePaymentChannelToFundSourceMappings(final JsonCommand command,final JsonElement element,final Long productId,final Map<String,Object> changes){  savePaymentChannelToFundSourceMappings(command,element,productId,changes,PortfolioProductType.SAVING);}  }
class C{  protected boolean beforeDownstream(){  return true;}  }
class C{  private View fillSpecific(int position,int top){  if (DEBUG)   Log.d("PLA_ListView","FillSpecific: " + position + ":"+ top);  View temp=makeAndAddView(position,top,true,false);  mFirstPosition=position;  final int dividerHeight=mDividerHeight;  if (!mStackFromBottom) {    fillUp(position - 1,temp.getTop() - dividerHeight);    adjustViewsUpOrDown();    fillDown(position + 1,temp.getBottom() + dividerHeight);    int childCount=getChildCount();    if (childCount > 0) {      correctTooHigh(childCount);    }  } else {    fillDown(position + 1,temp.getBottom() + dividerHeight);    adjustViewsUpOrDown();    fillUp(position - 1,temp.getTop() - dividerHeight);    int childCount=getChildCount();    if (childCount > 0) {      correctTooLow(childCount);    }  }  return null;}  }
class C{  private SelectResults singleBaseCollectionFilterEvaluate(ExecutionContext context,SelectResults intermediateResults,boolean completeExpansionNeeded,CompiledValue iterOperands,IndexInfo indexInfo,RuntimeIterator[] indpndntItr,boolean isIntersection,boolean conditioningNeeded,boolean evalProj) throws TypeMismatchException, AmbiguousNameException, FunctionDomainException, NameResolutionException, QueryInvocationTargetException {  ObjectType resultType=indexInfo._index.getResultSetType();  int indexFieldsSize=-1;  SelectResults results=null;  if (resultType instanceof StructType) {    indexFieldsSize=((StructTypeImpl)resultType).getFieldNames().length;  } else {    indexFieldsSize=1;  }  boolean useLinkedDataStructure=false;  boolean nullValuesAtStart=true;  Boolean orderByClause=(Boolean)context.cacheGet(CompiledValue.CAN_APPLY_ORDER_BY_AT_INDEX);  if (orderByClause != null && orderByClause.booleanValue()) {    List orderByAttrs=(List)context.cacheGet(CompiledValue.ORDERBY_ATTRIB);    useLinkedDataStructure=orderByAttrs.size() == 1;    nullValuesAtStart=!((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();  }  List projAttrib=null;  ObjectType projResultType=null;  if (!conditioningNeeded) {    projResultType=evalProj ? (ObjectType)context.cacheGet(RESULT_TYPE) : null;    if (projResultType != null) {      resultType=projResultType;      context.cachePut(RESULT_TYPE,Boolean.TRUE);      projAttrib=(List)context.cacheGet(PROJ_ATTRIB);    }    if (isIntersection) {      if (resultType instanceof StructType) {        context.getCache().getLogger().fine("StructType resultType.class=" + resultType.getClass().getName());        if (useLinkedDataStructure) {          results=context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) : new SortedResultsBag<Struct>((StructTypeImpl)resultType,nullValuesAtStart);        } else {          results=QueryUtils.createStructCollection(context,(StructTypeImpl)resultType);        }        indexFieldsSize=((StructTypeImpl)resultType).getFieldNames().length;      } else {        context.getCache().getLogger().fine("non-StructType resultType.class=" + resultType.getClass().getName());        if (useLinkedDataStructure) {          results=context.isDistinct() ? new LinkedResultSet(resultType) : new SortedResultsBag(resultType,nullValuesAtStart);        } else {          results=QueryUtils.createResultCollection(context,resultType);        }        indexFieldsSize=1;      }    } else {      if (intermediateResults != null && !completeExpansionNeeded) {        results=intermediateResults;      } else {        if (resultType instanceof StructType) {          context.getCache().getLogger().fine("StructType resultType.class=" + resultType.getClass().getName());          if (useLinkedDataStructure) {            results=context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) : new SortedResultsBag<Struct>((StructTypeImpl)resultType,nullValuesAtStart);          } else {            results=QueryUtils.createStructCollection(context,(StructTypeImpl)resultType);          }          indexFieldsSize=((StructTypeImpl)resultType).getFieldNames().length;        } else {          context.getCache().getLogger().fine("non-StructType resultType.class=" + resultType.getClass().getName());          if (useLinkedDataStructure) {            results=context.isDistinct() ? new LinkedResultSet(resultType) : new SortedResultsBag(resultType,nullValuesAtStart);          } else {            results=QueryUtils.createResultCollection(context,resultType);          }          indexFieldsSize=1;        }      }    }  } else {    if (resultType instanceof StructType) {      context.getCache().getLogger().fine("StructType resultType.class=" + resultType.getClass().getName());      if (useLinkedDataStructure) {        results=context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) : new SortedResultsBag<Struct>((StructTypeImpl)resultType,nullValuesAtStart);      } else {        results=QueryUtils.createStructCollection(context,(StructTypeImpl)resultType);      }      indexFieldsSize=((StructTypeImpl)resultType).getFieldNames().length;    } else {      context.getCache().getLogger().fine("non-StructType resultType.class=" + resultType.getClass().getName());      if (useLinkedDataStructure) {        results=context.isDistinct() ? new LinkedResultSet(resultType) : new SortedResultsBag(resultType,nullValuesAtStart);      } else {        results=QueryUtils.createResultCollection(context,resultType);      }      indexFieldsSize=1;    }  }  QueryObserver observer=QueryObserverHolder.getInstance();  try {    Object evalColln=evaluateColln(context);    observer.beforeIndexLookup(indexInfo._index,TOK_EQ,evalColln);    if (!conditioningNeeded) {      if (projResultType != null) {        resultType=projResultType;        context.cachePut(RESULT_TYPE,Boolean.TRUE);      }    }    if (evalColln instanceof Map) {      Iterator itr=((Map)evalColln).entrySet().iterator();      while (itr.hasNext()) {        this.queryIndex(itr.next(),indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);      }    } else     if (evalColln instanceof Collection) {      Object key=indexInfo.evaluateIndexKey(context);      if (key instanceof Object[]) {        Iterator iterator=((ResultsSet)((Object[])key)[0]).iterator();        while (iterator.hasNext()) {          this.queryIndex(new Object[]{iterator.next(),((Object[])key)[1]},indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);        }      } else {        HashSet set=new HashSet((Collection)evalColln);        Iterator itr=set.iterator();        while (itr.hasNext()) {          this.queryIndex(itr.next(),indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);        }      }    } else {      if (!evalColln.getClass().isArray()) {        throw new TypeMismatchException("Operand of IN cannot be interpreted as a Collection. " + "Is instance of " + evalColln.getClass().getName());      }      if (evalColln instanceof Object[]) {        Object[] arr=(Object[])evalColln;        for (int i=0; i < arr.length; ++i) {          this.queryIndex(arr[i],indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);        }      } else       if (evalColln instanceof long[]) {        long[] a=(long[])evalColln;        for (int i=0; i < a.length; i++) {          this.queryIndex(Long.valueOf(a[i]),indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);        }      } else       if (evalColln instanceof double[]) {        double[] a=(double[])evalColln;        for (int i=0; i < a.length; i++) {          this.queryIndex(Double.valueOf(a[i]),indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);        }      } else       if (evalColln instanceof float[]) {        float[] a=(float[])evalColln;        for (int i=0; i < a.length; i++) {          this.queryIndex(new Float(a[i]),indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);        }      } else       if (evalColln instanceof int[]) {        int[] a=(int[])evalColln;        for (int i=0; i < a.length; i++) {          this.queryIndex(Integer.valueOf(a[i]),indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);        }      } else       if (evalColln instanceof short[]) {        short[] a=(short[])evalColln;        for (int i=0; i < a.length; i++) {          this.queryIndex(new Short(a[i]),indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);        }      } else       if (evalColln instanceof char[]) {        char[] a=(char[])evalColln;        for (int i=0; i < a.length; i++) {          this.queryIndex(new Character(a[i]),indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);        }      } else       if (evalColln instanceof byte[]) {        byte[] a=(byte[])evalColln;        for (int i=0; i < a.length; i++) {          this.queryIndex(new Byte(a[i]),indexInfo,results,iterOperands,indpndntItr,context,projAttrib,conditioningNeeded);        }      } else {        throw new TypeMismatchException("Operand of IN cannot be interpreted as a Comparable Object. Operand is of type =" + evalColln.getClass());      }    }    if (conditioningNeeded) {      results=QueryUtils.getconditionedIndexResults(results,indexInfo,context,indexFieldsSize,completeExpansionNeeded,iterOperands,indpndntItr);    } else {      if (isIntersection && intermediateResults != null) {        results=QueryUtils.intersection(intermediateResults,results,context);      }    }    return results;  }  finally {    observer.afterIndexLookup(results);  }}  }
class C{  @Override public void transform(AffineTransform tx){  Point2D.Double anchor=getStartPoint();  Point2D.Double lead=getEndPoint();  setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));}  }
class C{  @Override public boolean touchUp(int screenX,int screenY,int pointer,int button){  if (flicking) {    flicking=false;    Vector2 flickEnd=viewport.unproject(new Vector2(screenX,screenY));    Vector2 flickVector=new Vector2(flickEnd.x - flickStart.x,flickEnd.y - flickStart.y);    velocity.mulAdd(flickVector,FLICK_MULTIPLIER);  }  return true;}  }
class C{  public void testTypical(){  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  int mergedIndex=-1;  for (int i=0; i < result.numInstances(); i++) {    if ((m_Instances.instance(i).value(1) == 0) || (m_Instances.instance(i).value(1) == 1)) {      if (mergedIndex == -1) {        mergedIndex=(int)result.instance(i).value(1);      } else {        assertEquals("Checking merged value for instance: " + (i + 1),mergedIndex,(int)result.instance(i).value(1));      }    }  }}  }
class C{  public Commitment(byte[] data) throws NoSuchAlgorithmException {  this.salt=Digest.makeRand();  byte[] d=serialize(data);  this.value=Digest.digest(d);}  }
class C{  public static String number(final String s){  String ret=null;  try {    if (s.indexOf('.') == -1) {      ret=number(Long.parseLong(s));    } else {      ret=number(Float.parseFloat(s));    }  } catch (  final NumberFormatException e) {  }  return (ret == null ? "-" : ret);}  }
class C{  public void clearCache(){  try {    Class<?> klass=java.net.URLClassLoader.class;    Field ucp=klass.getDeclaredField("ucp");    ucp.setAccessible(true);    Object sunMiscURLClassPath=ucp.get(this);    Field loaders=sunMiscURLClassPath.getClass().getDeclaredField("loaders");    loaders.setAccessible(true);    Object collection=loaders.get(sunMiscURLClassPath);    for (    Object sunMiscURLClassPathJarLoader : ((Collection<?>)collection).toArray()) {      try {        Field loader=sunMiscURLClassPathJarLoader.getClass().getDeclaredField("jar");        loader.setAccessible(true);        Object jarFile=loader.get(sunMiscURLClassPathJarLoader);        ((JarFile)jarFile).close();      } catch (      Throwable t) {        t.printStackTrace();      }    }  } catch (  Throwable t) {    t.printStackTrace();  }  return;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String employeeNamespace;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("employee");  testEmployee=elementList.item(0);  assertNotNull("employeeNotNull",testEmployee);  employeeNamespace=testEmployee.getNamespaceURI();  assertEquals("namespaceURI","http://www.nist.gov",employeeNamespace);}  }
class C{  public void recreate(){  int newSize=noxItems.size();  WeakReference<Bitmap> newBitmaps[]=new WeakReference[newSize];  Drawable newDrawables[]=new Drawable[newSize];  Drawable newPlaceholders[]=new Drawable[newSize];  boolean newLoadings[]=new boolean[newSize];  ImageLoader.Listener newListeners[]=new ImageLoader.Listener[newSize];  float length=Math.min(bitmaps.length,newSize);  for (int i=0; i < length; i++) {    newBitmaps[i]=bitmaps[i];    newDrawables[i]=drawables[i];    newPlaceholders[i]=placeholders[i];    newLoadings[i]=loading[i];    newListeners[i]=listeners[i];  }  bitmaps=newBitmaps;  drawables=newDrawables;  placeholders=newPlaceholders;  loading=newLoadings;  listeners=newListeners;}  }
class C{  public JListNavigator(BrowsableEditableData bd){  this(bd,false);}  }
class C{  public R scan(Iterable<? extends DocTree> nodes,P p){  R r=null;  if (nodes != null) {    boolean first=true;    for (    DocTree node : nodes) {      r=(first ? scan(node,p) : scanAndReduce(node,p,r));      first=false;    }  }  return r;}  }
class C{  protected String doIt() throws Exception {  log.info("M_InOut_ID=" + p_Search_InOut_ID + ", C_Order_ID="+ p_Search_Order_ID+ ", C_Invoice_ID="+ p_Search_Invoice_ID);  if (p_Search_InOut_ID != 0)   insertTrx("SELECT NVL(ma.M_AttributeSetInstance_ID,iol.M_AttributeSetInstance_ID) " + "FROM M_InOutLine iol" + " LEFT OUTER JOIN M_InOutLineMA ma ON (iol.M_InOutLine_ID=ma.M_InOutLine_ID) "+ "WHERE M_InOut_ID="+ p_Search_InOut_ID); else   if (p_Search_Order_ID != 0)   insertTrx("SELECT NVL(ma.M_AttributeSetInstance_ID,iol.M_AttributeSetInstance_ID) " + "FROM M_InOutLine iol" + " LEFT OUTER JOIN M_InOutLineMA ma ON (iol.M_InOutLine_ID=ma.M_InOutLine_ID) "+ " INNER JOIN M_InOut io ON (iol.M_InOut_ID=io.M_InOut_ID)"+ "WHERE io.C_Order_ID="+ p_Search_Order_ID); else   if (p_Search_Invoice_ID != 0)   insertTrx("SELECT NVL(ma.M_AttributeSetInstance_ID,iol.M_AttributeSetInstance_ID) " + "FROM M_InOutLine iol" + " LEFT OUTER JOIN M_InOutLineMA ma ON (iol.M_InOutLine_ID=ma.M_InOutLine_ID) "+ " INNER JOIN C_InvoiceLine il ON (iol.M_InOutLine_ID=il.M_InOutLine_ID) "+ "WHERE il.C_Invoice_ID="+ p_Search_Invoice_ID); else   throw new AdempiereUserError("Select one Parameter");  return "";}  }
class C{  public void scroll(int row){  int rows=data.getRows();  if (rows < 1) {    return;  }  if (row < 0) {    data.setFirst(0);  } else   if (row >= data.getRowCount()) {    data.setFirst(data.getRowCount() - 1);  } else {    data.setFirst(row - (row % rows));  }}  }
class C{  private static boolean isAncestor(TableSource leafTable,TableSource rootTable){  do {    if (leafTable == rootTable)     return true;    leafTable=leafTable.getParentTable();  } while (leafTable != null);  return false;}  }
class C{  public boolean mouseOver(MapMouseEvent mme){  return false;}  }
class C{  public IntervalleDate previousYear(){  Calendar lower=null;  if (lower_bound != null) {    lower=Calendar.getInstance();    lower.setTime(lower_bound);    lower.add(Calendar.YEAR,-1);  }  Calendar upper=null;  if (upper_bound != null) {    upper=Calendar.getInstance();    upper.setTime(upper_bound);    upper.add(Calendar.YEAR,-1);  }  return new IntervalleDate(lower.getTime(),upper.getTime());}  }
class C{  public void toAxisAngle(Vector4f output){  if (getW() > 1) {    normalise();  }  float angle=2 * (float)Math.toDegrees(Math.acos(getW()));  float x;  float y;  float z;  float s=(float)Math.sqrt(1 - getW() * getW());  if (s < 0.001) {    x=points[0];    y=points[1];    z=points[2];  } else {    x=points[0] / s;    y=points[1] / s;    z=points[2] / s;  }  output.points[0]=x;  output.points[1]=y;  output.points[2]=z;  output.points[3]=angle;}  }
class C{  public CDebuggerEventSettingsPanel(final DebuggerEventSettings eventSettings){  super(new BorderLayout());  final JPanel innerPanel=new JPanel(new BorderLayout());  final JPanel componentPanel=new JPanel(new GridLayout(2,2));  m_breakOnDllLoadCheckbox=new JCheckBox("Break on module load");  m_breakOnDllUnloadCheckbox=new JCheckBox("Break on module unload");  m_breakOnDllLoadCheckbox.setSelected(eventSettings.getBreakOnDllLoad());  m_breakOnDllUnloadCheckbox.setSelected(eventSettings.getBreakOnDllUnload());  componentPanel.add(m_breakOnDllLoadCheckbox);  componentPanel.add(m_breakOnDllUnloadCheckbox);  innerPanel.add(new JScrollPane(componentPanel),BorderLayout.NORTH);  add(innerPanel);}  }
class C{  public PKCS10Attributes(DerInputStream in) throws IOException {  DerValue[] attrs=in.getSet(3,true);  if (attrs == null)   throw new IOException("Illegal encoding of attributes");  for (int i=0; i < attrs.length; i++) {    PKCS10Attribute attr=new PKCS10Attribute(attrs[i]);    map.put(attr.getAttributeId().toString(),attr);  }}  }
class C{  private Class parseClass(String param){  Class paramClass=TypeUtils.findClass(param);  if ("javax.servlet.FilterChain".equalsIgnoreCase(param) || "FilterChain".equalsIgnoreCase(param) || "chain".equalsIgnoreCase(param)) {    filter=true;    paramClass=FilterChain.class;  }  if (loadClass) {    if (paramClass == null) {      try {        paramClass=Class.forName(param);      } catch (      ClassNotFoundException e) {        setError("could not find " + param + " got a "+ e.toString(),e);        return null;      }catch (      NoClassDefFoundError e) {        setError("could not find " + param + " got a "+ e.toString(),e);        return null;      }    }    if (paramClass == null) {      setError("could not find class of type " + param);      return null;    }  }  if (log.isDebugEnabled()) {    log.debug("parseClass found class " + paramClass + " for "+ param);  }  return paramClass;}  }
class C{  public DependencyGraph findDependencyGraph(ThreadReference thread){  return graph.getSubGraph(thread);}  }
class C{  public Object onMessage(String id,Object data){  return null;}  }
class C{  @Override public void input(Object input){  int attempt=0;  Exception failure=null;  while (attempt < RETRY) {    if (!isEnabled()) {      return;    }    attempt++;    try {      Network network=getBot().memory().newMemory();      input(input,network);      network.save();      return;    } catch (    BotException error) {      log(error.toString(),Bot.WARNING);      throw error;    }catch (    Exception failed) {      failure=failed;      log(failed.toString(),Bot.WARNING);      log("Retrying",Bot.WARNING);    }  }  log("Retry failed",Bot.WARNING);  log(failure);  notifyExceptionListeners(failure);}  }
class C{  private List<UpdateResult> updateOrCreateSkeletons(Map<String,PyBinaryItem> modules) throws InvalidSdkException {  long startTime=System.currentTimeMillis();  final List<String> names=Lists.newArrayList(modules.keySet());  Collections.sort(names);  final List<UpdateResult> results=new ArrayList<UpdateResult>();  final int count=names.size();  for (int i=0; i < count; i++) {    checkCanceled();    if (myIndicator != null) {      myIndicator.setFraction((double)i / count);    }    final String name=names.get(i);    final PyBinaryItem module=modules.get(name);    if (module != null) {      updateOrCreateSkeleton(module,results);    }  }  finishSkeletonsGeneration();  long doneInMs=System.currentTimeMillis() - startTime;  LOG.info("Rebuilding skeletons for binaries took " + doneInMs + " ms");  return results;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public boolean isSelected(){  return getBooleanProperty(BOOLEAN_PROPERTY_SELECTED);}  }
class C{  private int checkBuffer() throws IOException {  assert buffer != null : "Buffer should never be null";synchronized (owner.getSynchronizationObject()) {    checkClosed();    if (pos < buffer.length) {      return buffer.length - pos;    }    if (blobHandle.isEof()) {      return -1;    }    try {      buffer=blobHandle.getSegment(owner.getBufferLength());      pos=0;      return buffer.length != 0 ? buffer.length : -1;    } catch (    SQLException ge) {      throw new IOException("Blob read problem: " + ge.toString(),ge);    }  }}  }
class C{  public void moveRow(int from,int to){  m_model.moveRow(from,to);}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  public static int compileShader(final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compileStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compileStatus,0);    if (compileStatus[0] == 0) {      Log.e(TAG,"Error compiling shader: " + GLES20.glGetShaderInfoLog(shaderHandle));      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  protected BindableElement(){}  }
class C{  public PacketHELO(String devicename,byte iconType,byte[] iconData){  super(PT_HELO);  this.appendPayload(devicename);  this.appendPayload(iconType);  this.appendPayload((short)0);  this.appendPayload(0);  this.appendPayload(0);  this.appendPayload(iconData);}  }
class C{  public void handleDiscontinuity(){  if (startMediaTimeState == START_IN_SYNC) {    startMediaTimeState=START_NEED_SYNC;  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public Measurement convert(Reading r,Measurement last){  if (last != null) {    this.Xt=last.getX();    this.Yt=last.getY();    this.Zt=last.getZ();  }  if (this.Xt > 9.E99) {    this.Xt=0;  }  if (this.Yt > 9.E99) {    this.Yt=0;  }  if (this.Zt > 9.E99) {    this.Zt=0;  }  return convert(r);}  }
class C{  protected StatusSourceImpl(){  super();}  }
class C{  public ExtentTest pass(Throwable t){  log(Status.PASS,t);  return this;}  }
class C{  @Override protected Concept retrieveImpl(String uuid,RequestContext context,long snapshotTime){  return conceptService.getConceptByUuid(uuid);}  }
class C{  public static boolean isJarFile(File file){  return file.isFile() && file.getName().toLowerCase().endsWith(JAR_EXTENSION);}  }
class C{  public ElementCreatorImpl addUndeclaredAttributeMarker(){  addAttribute(ATTRIBUTE_MARKER);  return this;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"PLAN_NODE_TABLE\" ("+ "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"NODE_LATITUDE\" REAL,"+ "\"NODE_LONGITUDE\" REAL,"+ "\"NODE_ADDRESS\" TEXT,"+ "\"TYPE_ID\" INTEGER);");}  }
class C{  private static void buildJar(String jarName) throws Throwable {  String testClasses=System.getProperty("test.classes","?");  String testSrc=System.getProperty("test.src","?");  String jar=String.format("%s/%s.jar",testClasses,jarName);  String manifest=String.format("%s/%s.mf",testSrc,jarName.toLowerCase());  String clazz=String.format("%s.class",jarName);  RunnerUtil.createJar("-cfm",jar,manifest,"-C",testClasses,clazz);}  }
class C{  public BindingPattern createBindingPattern(){  BindingPatternImpl bindingPattern=new BindingPatternImpl();  return bindingPattern;}  }
class C{  public void check(PlatformUser originalUser,PlatformUser modifiedUser){  if (originalUser == null || modifiedUser == null) {    return;  }  boolean isAdditionalNameMapped=mappedLdapSettings.contains(SettingType.LDAP_ATTR_ADDITIONAL_NAME);  if (isAdditionalNameMapped && !Strings.areStringsEqual(originalUser.getAdditionalName(),modifiedUser.getAdditionalName())) {    handleViolation("additionalName");  }  boolean isFirstNameMapped=mappedLdapSettings.contains(SettingType.LDAP_ATTR_FIRST_NAME);  if (isFirstNameMapped && !Strings.areStringsEqual(originalUser.getFirstName(),modifiedUser.getFirstName())) {    handleViolation("firstName");  }  boolean isLastNameMapped=mappedLdapSettings.contains(SettingType.LDAP_ATTR_LAST_NAME);  if (isLastNameMapped && !Strings.areStringsEqual(originalUser.getLastName(),modifiedUser.getLastName())) {    handleViolation("lastName");  }  boolean isEmailMapped=mappedLdapSettings.contains(SettingType.LDAP_ATTR_EMAIL);  if (isEmailMapped && !Strings.areStringsEqual(originalUser.getEmail(),modifiedUser.getEmail())) {    handleViolation("email");  }  boolean isUserIdMapped=mappedLdapSettings.contains(SettingType.LDAP_ATTR_UID);  if (isUserIdMapped && !Strings.areStringsEqual(originalUser.getUserId(),modifiedUser.getUserId())) {    handleViolation("userId");  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  @Override public V remove(Object key){  if (key == null) {    key=NULL_OBJECT;  }  boolean hashedOk;  int index, next, hash;  Object result, object;  index=next=findIndex(key,elementData);  if (elementData[index] != key) {    return null;  }  result=elementData[index + 1];  int length=elementData.length;  while (true) {    next=(next + 2) % length;    object=elementData[next];    if (object == null) {      break;    }    hash=getModuloHash(object,length);    hashedOk=hash > index;    if (next < index) {      hashedOk=hashedOk || (hash <= next);    } else {      hashedOk=hashedOk && (hash <= next);    }    if (!hashedOk) {      elementData[index]=object;      elementData[index + 1]=elementData[next + 1];      index=next;    }  }  size--;  modCount++;  elementData[index]=null;  elementData[index + 1]=null;  return massageValue(result);}  }
class C{  @RpcMethod public AttachISOResponse attachISO(String vmId,String isoPath) throws InterruptedException, RpcException {  SyncHandler<AttachISOResponse,Host.AsyncClient.attach_iso_call> syncHandler=new SyncHandler<>();  attachISOtoVM(vmId,isoPath,syncHandler);  syncHandler.await();  logger.info("finished attach_iso vm {}, isoPath {}, target {}",vmId,isoPath,getHostIp());  return ResponseValidator.checkAttachISOResponse(syncHandler.getResponse());}  }
class C{  public static VOTriggerProcess toVOTriggerProcess(TriggerProcess domObj,LocalizerFacade facade){  if (domObj == null) {    return null;  }  VOTriggerProcess vo=new VOTriggerProcess();  vo.setUser(UserDataAssembler.toVOUser(domObj.getUser()));  vo.setTriggerDefinition(TriggerDefinitionAssembler.toVOTriggerDefinition(domObj.getTriggerDefinition()));  vo.setActivationDate(domObj.getActivationDate());  vo.setReason(facade.getText(domObj.getKey(),LocalizedObjectTypes.TRIGGER_PROCESS_REASON));  vo.setStatus(domObj.getStatus());  List<String> names=new ArrayList<String>();  TriggerProcessParameter param=domObj.getParamValueForName(org.oscm.types.enumtypes.TriggerProcessParameterName.OBJECT_ID);  if (param != null) {    names.add(param.getValue(String.class));  }switch (domObj.getTriggerDefinition().getType()) {case SUBSCRIBE_TO_SERVICE:case UPGRADE_SUBSCRIPTION:    appendSubscription(domObj,vo);  appendService(domObj,vo);param=domObj.getParamValueForName(org.oscm.types.enumtypes.TriggerProcessParameterName.PRODUCT);if (param != null) {names.add(param.getValue(VOService.class).getNameToDisplay());}break;case REGISTER_OWN_USER:param=domObj.getParamValueForName(org.oscm.types.enumtypes.TriggerProcessParameterName.USER);if (param != null) {names.add(param.getValue(VOUserDetails.class).getUserId());}break;case SAVE_PAYMENT_CONFIGURATION:if (domObj.getParamValueForName(org.oscm.types.enumtypes.TriggerProcessParameterName.DEFAULT_CONFIGURATION) != null) {vo.setParameter(org.oscm.types.enumtypes.TriggerProcessParameterName.DEFAULT_CONFIGURATION.name());} else if (domObj.getParamValueForName(org.oscm.types.enumtypes.TriggerProcessParameterName.DEFAULT_SERVICE_PAYMENT_CONFIGURATION) != null) {vo.setParameter(org.oscm.types.enumtypes.TriggerProcessParameterName.DEFAULT_SERVICE_PAYMENT_CONFIGURATION.name());} else if (domObj.getParamValueForName(org.oscm.types.enumtypes.TriggerProcessParameterName.CUSTOMER_CONFIGURATION) != null) {vo.setParameter(org.oscm.types.enumtypes.TriggerProcessParameterName.CUSTOMER_CONFIGURATION.name());param=domObj.getParamValueForName(org.oscm.types.enumtypes.TriggerProcessParameterName.CUSTOMER_CONFIGURATION);VOOrganization org=param.getValue(VOOrganizationPaymentConfiguration.class).getOrganization();if (org != null) {if (org.getName() != null && org.getName().length() > 0) {names.add(org.getName() + " (" + org.getOrganizationId()+ ")");} else {names.add(org.getOrganizationId());}}} else if (domObj.getParamValueForName(org.oscm.types.enumtypes.TriggerProcessParameterName.SERVICE_PAYMENT_CONFIGURATION) != null) {param=domObj.getParamValueForName(org.oscm.types.enumtypes.TriggerProcessParameterName.SERVICE_PAYMENT_CONFIGURATION);vo.setParameter(org.oscm.types.enumtypes.TriggerProcessParameterName.SERVICE_PAYMENT_CONFIGURATION.name());VOService svc=param.getValue(VOServicePaymentConfiguration.class).getService();if (svc != null) {names.add(svc.getServiceId());}}break;default :break;}vo.setTargetNames(names);updateValueObject(vo,domObj);return vo;}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public void transform(AffineTransform Tx){  mGraphics.transform(Tx);}  }
class C{  @Override protected boolean isArgument(){  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_BASE_TYPE:    return delegationBaseType != null;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:  return delegationSuperClassSteps != DELEGATION_SUPER_CLASS_STEPS_EDEFAULT;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET:return delegationTarget != null;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:return delegationTargetIsAbstract != DELEGATION_TARGET_IS_ABSTRACT_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  protected void createTable(Table table,StringBuilder ddl,boolean temporary,boolean recreate){  writeTableCreationStmt(table,ddl);  writeTableCreationStmtEnding(table,ddl);  if (!databaseInfo.isIndicesEmbedded()) {    writeExternalIndicesCreateStmt(table,ddl);  }  if (!databaseInfo.isPrimaryKeyEmbedded()) {    writeExternalPrimaryKeysCreateStmt(table,table.getPrimaryKeyColumns(),ddl);  }}  }
class C{  private PrintElement createFieldElement(MPrintFormatItem item,int maxWidth,String FieldAlignmentType,boolean isForm){  Object obj=m_data.getNode(new Integer(item.getAD_Column_ID()));  if (obj == null)   return null; else   if (obj instanceof PrintDataElement)   ; else {    log.log(Level.SEVERE,"Element not PrintDataElement " + obj.getClass());    return null;  }  PrintDataElement data=(PrintDataElement)obj;  if (data.isNull() && item.isSuppressNull())   return null;  String stringContent=data.getValueDisplay(m_format.getLanguage());  if ((stringContent == null || stringContent.length() == 0) && item.isSuppressNull())   return null;  Object content=stringContent;  if (data.getValue() instanceof Boolean)   content=data.getValue();  if (item.getColumnName().equals("AmtInWords")) {    log.fine("AmtInWords: " + stringContent);    stringContent=Msg.getAmtInWords(m_format.getLanguage(),stringContent);    content=stringContent;  }  String label=item.getPrintName(m_format.getLanguage());  String labelSuffix=item.getPrintNameSuffix(m_format.getLanguage());  NamePair ID=null;  if (data.isID()) {    Object value=data.getValue();    if (value instanceof KeyNamePair)     ID=new KeyNamePair(((KeyNamePair)value).getKey(),item.getColumnName()); else     if (value instanceof ValueNamePair)     ID=new ValueNamePair(((ValueNamePair)value).getValue(),item.getColumnName());  } else   if (MPrintFormatItem.FIELDALIGNMENTTYPE_Default.equals(FieldAlignmentType)) {    if (data.isNumeric())     FieldAlignmentType=MPrintFormatItem.FIELDALIGNMENTTYPE_TrailingRight; else     FieldAlignmentType=MPrintFormatItem.FIELDALIGNMENTTYPE_LeadingLeft;  }  Color color=getColor();  if (ID != null && !isForm)   ; else   if (item.getAD_PrintColor_ID() != 0 && m_printColor.get_ID() != item.getAD_PrintColor_ID()) {    MPrintColor c=MPrintColor.get(getCtx(),item.getAD_PrintColor_ID());    if (c.getColor() != null)     color=c.getColor();  }  Font font=m_printFont.getFont();  if (item.getAD_PrintFont_ID() != 0 && m_printFont.get_ID() != item.getAD_PrintFont_ID()) {    MPrintFont f=MPrintFont.get(item.getAD_PrintFont_ID());    if (f.getFont() != null)     font=f.getFont();  }  PrintElement e=null;  if (data.getDisplayType() == DisplayType.Location) {    e=new LocationElement(m_printCtx,((KeyNamePair)ID).getKey(),font,color,item.isHeightOneLine(),label,labelSuffix,m_format.getLanguage().getAD_Language());    e.layout(maxWidth,item.getMaxHeight(),item.isHeightOneLine(),FieldAlignmentType);  } else {    if (HTMLElement.isHTML(stringContent))     e=new HTMLElement(stringContent); else     e=new StringElement(content,font,color,isForm ? null : ID,label,labelSuffix);    e.layout(maxWidth,item.getMaxHeight(),item.isHeightOneLine(),FieldAlignmentType);  }  return e;}  }
class C{  public static void quickSelect(ModifiableDoubleDBIDList data,int rank){  quickSelect(data,0,data.size(),rank);}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_util_Map(){  String test="Test string";  try {    AttributedString attrString=new AttributedString(test,new WeakHashMap<AttributedCharacterIterator.Attribute,String>());    AttributedCharacterIterator it=attrString.getIterator();    StringBuffer buf=new StringBuffer();    buf.append(it.first());    char ch;    while ((ch=it.next()) != CharacterIterator.DONE)     buf.append(ch);    assertTrue("Wrong string: " + buf,buf.toString().equals(test));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }  try {    Map<AttributedCharacterIterator.Attribute,String> whm=new WeakHashMap<AttributedCharacterIterator.Attribute,String>();    whm.put(new TestAttributedCharacterIteratorAttribute("test"),"value");    new AttributedString("",whm);    fail("Expected IllegalArgumentException was not thrown");  } catch (  Exception e) {  }}  }
class C{  protected void nofityChange(){  if (observer != null) {    observer.onChange();  }}  }
class C{  public void declare(FieldId<?,?> fieldId,int flags,Object staticValue){  TypeDeclaration typeDeclaration=getTypeDeclaration(fieldId.declaringType);  if (typeDeclaration.fields.containsKey(fieldId)) {    throw new IllegalStateException("already declared: " + fieldId);  }  int supportedFlags=Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED| Modifier.STATIC| Modifier.FINAL| Modifier.VOLATILE| Modifier.TRANSIENT;  if ((flags & ~supportedFlags) != 0) {    throw new IllegalArgumentException("Unexpected flag: " + Integer.toHexString(flags));  }  if ((flags & Modifier.STATIC) == 0 && staticValue != null) {    throw new IllegalArgumentException("staticValue is non-null, but field is not static");  }  FieldDeclaration fieldDeclaration=new FieldDeclaration(fieldId,flags,staticValue);  typeDeclaration.fields.put(fieldId,fieldDeclaration);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMColorProfileElement(prefix,(AbstractDocument)doc);}  }
class C{  public static void removeConnections(BeanInstance instance,Integer... tab){  int tabIndex=0;  if (tab.length > 0) {    tabIndex=tab[0].intValue();  }  Vector<BeanConnection> connections=TABBED_CONNECTIONS.get(tabIndex);  Vector<Object> instancesToRemoveFor=new Vector<Object>();  if (instance.getBean() instanceof MetaBean) {    instancesToRemoveFor=((MetaBean)instance.getBean()).getBeansInSubFlow();  } else {    instancesToRemoveFor.add(instance);  }  Vector<BeanConnection> removeVector=new Vector<BeanConnection>();  for (int j=0; j < instancesToRemoveFor.size(); j++) {    BeanInstance tempInstance=(BeanInstance)instancesToRemoveFor.elementAt(j);    for (int i=0; i < connections.size(); i++) {      BeanConnection bc=connections.elementAt(i);      BeanInstance tempTarget=bc.getTarget();      BeanInstance tempSource=bc.getSource();      EventSetDescriptor tempEsd=bc.getSourceEventSetDescriptor();      if (tempInstance == tempTarget) {        try {          Method deregisterMethod=tempEsd.getRemoveListenerMethod();          Object targetBean=tempTarget.getBean();          Object[] args=new Object[1];          args[0]=targetBean;          deregisterMethod.invoke(tempSource.getBean(),args);          removeVector.addElement(bc);        } catch (        Exception ex) {          ex.printStackTrace();        }      } else       if (tempInstance == tempSource) {        removeVector.addElement(bc);        if (tempTarget.getBean() instanceof BeanCommon) {          ((BeanCommon)tempTarget.getBean()).disconnectionNotification(tempEsd.getName(),tempSource.getBean());        }      }    }  }  for (int i=0; i < removeVector.size(); i++) {    connections.removeElement(removeVector.elementAt(i));  }}  }
class C{  public boolean remove(){  return remove(getFrameList());}  }
class C{  WhoisException(DateTime timestamp,int status,String message,@Nullable Throwable cause){  super(message,cause);  checkArgument(300 <= status && status < 700,"WhoisException status must be a non-2xx HTTP status code: %s",status);  this.timestamp=checkNotNull(timestamp,"timestamp");  this.status=status;}  }
class C{  public boolean equals(Object o){  if (o instanceof CoverageCharVdt) {    CoverageCharVdt civ=(CoverageCharVdt)o;    return ((attribute == civ.attribute) && (value == civ.value));  } else {    return false;  }}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (int i=0; i < files.length; i++) {    File file=files[i];    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public T expirementId(String value){  setString(EXPERIMENT_ID,value);  return (T)this;}  }
class C{  public static <K,V>SynchronizedListMultimap<K,V> of(MutableListMultimap<K,V> multimap,Object lock){  if (multimap == null) {    throw new IllegalArgumentException("cannot create a SynchronizedListMultimap for null");  }  return new SynchronizedListMultimap<>(multimap,lock);}  }
class C{  public static void main(String[] args) throws Exception {  double[] first={2.3,1.2,5.0};  try {    AlgVector test=new AlgVector(first);    System.out.println("test:\n " + test);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public GameBoardTimer(GameBoard gameBoard,int seconds){  this.gameBoard=gameBoard;  this.seconds=seconds;}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new RomanianAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public void deselect(OMGraphic omg){  if (grp != null && grp.isSelectable(omg)) {    OMGraphicList omgl=new OMGraphicList();    omgl.add(omg);    grp.deselect(omgl);  }}  }
class C{  private static HashMap<Territory,Float> rankTerritories(final GameData data,final List<Territory> ourFriendlyTerr,final List<Territory> ourEnemyTerr,final List<Territory> ignoreTerr,final PlayerID player,final boolean tFirst,final boolean waterBased,final boolean nonCombat){  final HashMap<Territory,Float> landRankMap=new HashMap<>();  final HashMap<Territory,Float> landStrengthMap=new HashMap<>();  final CompositeMatch<Territory> noEnemyOrWater=new CompositeMatchAnd<>(Matches.TerritoryIsNotImpassableToLandUnits(player,data),Matches.isTerritoryAllied(player,data));  final CompositeMatch<Territory> enemyAndNoWater=new CompositeMatchAnd<>(Matches.TerritoryIsNotImpassableToLandUnits(player,data),Matches.isTerritoryEnemyAndNotUnownedWaterOrImpassableOrRestricted(player,data));  final List<PlayerID> ePlayers=getEnemyPlayers(data,player);  final PlayerID ePlayer=ePlayers.get(0);  final List<Territory> enemyCapitals=getEnemyCapitals(data,player);  int minDist=1000;  final int playerPUs=getLeftToSpend(data,player);  final List<Territory> myCapitals=TerritoryAttachment.getAllCurrentlyOwnedCapitals(player,data);  if (myCapitals.isEmpty()) {    myCapitals.addAll(TerritoryAttachment.getAllCapitals(player,data));  }  if (myCapitals.isEmpty()) {    myCapitals.addAll(Match.getMatches(data.getMap().getTerritories(),new CompositeMatchAnd<>(Matches.TerritoryIsNotImpassableToLandUnits(player,data),Matches.territoryHasUnitsThatMatch(Matches.unitIsLandAndOwnedBy(player)))));  }  for (  final Territory myCapital : myCapitals) {    final Iterator<Territory> eCapsIter=enemyCapitals.iterator();    while (eCapsIter.hasNext()) {      final Territory eCap=eCapsIter.next();      if (Matches.isTerritoryFriendly(player,data).match(eCap) && Matches.territoryHasAlliedUnits(player,data).match(eCap) && !Matches.territoryHasEnemyLandNeighbor(data,player).match(eCap)) {        eCapsIter.remove();        continue;      }      final int dist=data.getMap().getDistance(myCapital,eCap);      minDist=Math.min(minDist,dist);    }  }  final List<Territory> alliedFactories=getEnemyCapitals(data,ePlayer);  final Iterator<Territory> aFIter=alliedFactories.iterator();  while (aFIter.hasNext()) {    final Territory aFTerr=aFIter.next();    final float aFPotential=getStrengthOfPotentialAttackers(aFTerr,data,player,tFirst,true,null);    final float alliedStrength=strengthOfTerritory(data,aFTerr,player,false,false,tFirst,true);    if (aFPotential < alliedStrength * 0.75F || aFPotential < 1.0F || !Matches.TerritoryIsPassableAndNotRestricted(player,data).match(aFTerr) || (Matches.isTerritoryEnemyAndNotUnownedWaterOrImpassableOrRestricted(player,data).match(aFTerr) && Matches.territoryHasEnemyLandNeighbor(data,player).match(aFTerr))) {      aFIter.remove();    }  }  final List<Territory> aFNeighbors=new ArrayList<>();  for (  final Territory aF : alliedFactories) {    aFNeighbors.addAll(data.getMap().getNeighbors(aF,Matches.isTerritoryAllied(player,data)));  }  for (  final Territory eTerr : data.getMap().getTerritories()) {    if (eTerr.isWater() || Matches.TerritoryIsImpassable.match(eTerr) || !Matches.TerritoryIsPassableAndNotRestricted(player,data).match(eTerr)) {      continue;    }    final float alliedPotential=getStrengthOfPotentialAttackers(eTerr,data,ePlayer,tFirst,true,null);    final float rankStrength=getStrengthOfPotentialAttackers(eTerr,data,player,tFirst,true,ignoreTerr);    final TerritoryAttachment ta=TerritoryAttachment.get(eTerr);    if (ta == null) {      continue;    }    final float productionValue=ta.getProduction();    float eTerrValue=0.0F;    final boolean island=!doesLandExistAt(eTerr,data,false);    eTerrValue+=ta.getVictoryCity() > 0 ? 2.0F : 0.0F;    final boolean lRCap=hasLandRouteToEnemyOwnedCapitol(eTerr,player,data);    eTerrValue+=lRCap ? 16.0F : 0.0F;    if (lRCap && (!Matches.territoryIsEnemyNonNeutralAndHasEnemyUnitMatching(data,player,Matches.UnitCanProduceUnits).match(eTerr) && !Matches.territoryIsAlliedAndHasAlliedUnitMatching(data,player,Matches.UnitCanProduceUnits).match(eTerr))) {      final Route eCapRoute=findNearest(eTerr,Matches.territoryIsEnemyNonNeutralAndHasEnemyUnitMatching(data,player,Matches.UnitCanProduceUnits),Matches.TerritoryIsNotImpassableToLandUnits(player,data),data);      if (eCapRoute != null) {        eTerrValue=Math.max(eTerrValue - 8,eTerrValue - (eCapRoute.numberOfSteps() - 1));      }    }    eTerrValue+=Matches.territoryHasEnemyNonNeutralNeighborWithEnemyUnitMatching(data,player,Matches.UnitCanProduceUnits).match(eTerr) ? 3.0F : 0.0F;    int eMinDist=1000;    for (    final Territory eTerrCap : enemyCapitals) {      final int eDist=data.getMap().getDistance(eTerr,eTerrCap,Matches.TerritoryIsNotImpassable);      eMinDist=Math.min(eMinDist,eDist);    }    eTerrValue-=eMinDist - 1;    if (Matches.TerritoryIsLand.match(eTerr) && Matches.isTerritoryEnemyAndNotUnownedWaterOrImpassableOrRestricted(player,data).match(eTerr)) {      ourEnemyTerr.add(eTerr);      eTerrValue+=productionValue * 2;      final float eTerrStrength=strength(eTerr.getUnits().getMatches(Matches.enemyUnit(player,data)),false,false,tFirst);      eTerrValue+=alliedPotential > (rankStrength + eTerrStrength) ? productionValue : 0.0F;      if (island) {        eTerrValue+=5.0F;      }      eTerrValue+=eTerr.getUnits().countMatches(Matches.UnitIsAir) * 2;      eTerrValue+=Matches.territoryIsEnemyNonNeutralAndHasEnemyUnitMatching(data,player,Matches.UnitCanProduceUnits).match(eTerr) ? 4.0F : 0.0F;      eTerrValue+=Matches.territoryHasAlliedNeighborWithAlliedUnitMatching(data,player,Matches.UnitCanProduceUnits).match(eTerr) ? 8.0F : 0.0F;      eTerrValue+=Matches.territoryHasEnemyLandNeighbor(data,player).invert().match(eTerr) ? productionValue + 1 : 0.0F;      final float netStrength=(eTerrStrength - alliedPotential + 0.5F * rankStrength);      landStrengthMap.put(eTerr,netStrength);      landRankMap.put(eTerr,eTerrValue + netStrength * 0.25F);    } else     if (Matches.isTerritoryAllied(player,data).match(eTerr) && Matches.TerritoryIsNotNeutralButCouldBeWater.match(eTerr)) {      final boolean hasENeighbors=Matches.territoryHasEnemyLandNeighbor(data,player).match(eTerr);      final Route testERoute=findNearest(eTerr,enemyAndNoWater,noEnemyOrWater,data);      if (island) {        eTerrValue+=-5.0F;      }      eTerrValue+=(hasENeighbors ? 2.0F : -2.0F);      eTerrValue+=(aFNeighbors.contains(eTerr)) ? 8.0F : 0.0F;      eTerrValue+=(testERoute == null ? -20.0F : Math.max(-10.0F,-(testERoute.numberOfSteps() - 2)));      eTerrValue+=(testERoute != null ? productionValue : 0.0F);      final float aTerrStrength=strength(eTerr.getUnits().getMatches(Matches.alliedUnit(player,data)),false,false,tFirst);      final boolean hasAlliedFactory=Matches.territoryIsAlliedAndHasAlliedUnitMatching(data,player,Matches.UnitCanProduceUnits).match(eTerr);      if (hasAlliedFactory) {        eTerrValue+=4.0F + (hasENeighbors && rankStrength > 5.0F ? 3.0F : 0.0F);        alliedFactories.add(eTerr);      }      final float netStrength=rankStrength - aTerrStrength - 0.5F * alliedPotential;      landStrengthMap.put(eTerr,netStrength);      landRankMap.put(eTerr,eTerrValue + netStrength * 0.50F);      if ((netStrength > -15.0F && rankStrength > 2.0F) || hasENeighbors || testERoute != null) {        ourFriendlyTerr.add(eTerr);      }    } else     if (Matches.TerritoryIsNeutralButNotWater.match(eTerr)) {      if (Matches.TerritoryIsNotImpassable.match(eTerr) && (Matches.isTerritoryFreeNeutral(data).match(eTerr) || Properties.getNeutralCharge(data) <= playerPUs)) {        eTerrValue+=-100.0F;        final boolean hasENeighbors=Matches.territoryHasEnemyLandNeighbor(data,player).match(eTerr);        final Route testERoute=findNearest(eTerr,enemyAndNoWater,noEnemyOrWater,data);        eTerrValue+=(hasENeighbors ? 1.0F : -1.0F);        eTerrValue+=(testERoute == null ? -1.0F : -(testERoute.numberOfSteps() - 1));        eTerrValue+=productionValue > 0 ? productionValue : -5.0F;        final float netStrength=rankStrength - 0.5F * alliedPotential;        landStrengthMap.put(eTerr,netStrength);        landRankMap.put(eTerr,eTerrValue + netStrength * 0.50F);      }    }  }  if (nonCombat) {    final CompositeMatch<Territory> alliedLandTerr=new CompositeMatchAnd<>(Matches.isTerritoryAllied(player,data),Matches.TerritoryIsLand,Matches.TerritoryIsNotImpassable);    for (    final Territory terr1 : alliedFactories) {      if (!landRankMap.containsKey(terr1)) {        continue;      }      float landRank=landRankMap.get(terr1);      if (Matches.territoryHasEnemyLandNeighbor(data,player).match(terr1)) {        for (        final Territory neighbor : data.getMap().getNeighbors(terr1,alliedLandTerr)) {          if (!landRankMap.containsKey(neighbor)) {            continue;          }          final float thisRank=landRankMap.get(neighbor);          landRank=Math.max(landRank,thisRank);        }        landRank+=1.0F;        landRankMap.put(terr1,landRank);      }    }  }  return landRankMap;}  }
class C{  public static byte[] toByteArray(float[] data){  byte[] tmp, result=new byte[data.length * 4];  for (int i=0; i < data.length; i++) {    tmp=toBytes(data[i]);    System.arraycopy(tmp,0,result,i * 4,4);  }  return result;}  }
class C{  private void onFinishedMovement(){  if (mSuppressSelectionChanged) {    mSuppressSelectionChanged=false;    super.selectionChanged();  }  checkSelectionChanged();  invalidate();}  }
class C{  public CCShaky3D(int range,boolean sz,ccGridSize gSize,float d){  super(gSize,d);  randrange=range;  shakeZ=sz;}  }
class C{  public MXFUID(byte[] uid){  this.uid=Arrays.copyOf(uid,uid.length);}  }
class C{  public boolean isWasAdmin(){  return wasAdmin;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (comment: ");  result.append(comment);  result.append(')');  return result.toString();}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  private StringBuffer createIndent(int start,final int indent,final boolean convertSpaceRunsToTabs){  final boolean convertTabs=fPrefs.prefUseTabs && convertSpaceRunsToTabs;  final int tabLen=fPrefs.prefTabSize;  final StringBuffer ret=new StringBuffer();  try {    int spaces=0;    while (start < indent) {      char ch=fDocument.getChar(start);      if (ch == '\t') {        ret.append('\t');        spaces=0;      } else       if (convertTabs) {        spaces++;        if (spaces == tabLen) {          ret.append('\t');          spaces=0;        }      } else {        ret.append(' ');      }      start++;    }    while (spaces-- > 0)     ret.append(' ');  } catch (  BadLocationException e) {  }  return ret;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer().append("[ option: ");  buf.append(opt);  if (longOpt != null) {    buf.append(" ").append(longOpt);  }  buf.append(" ");  if (hasArgs()) {    buf.append("[ARG...]");  } else   if (hasArg()) {    buf.append(" [ARG]");  }  buf.append(" :: ").append(description);  if (type != null) {    buf.append(" :: ").append(type);  }  buf.append(" ]");  return buf.toString();}  }
class C{  public static void traverseBreadthFirstSearch(@NotNull ASTNode start,@NotNull TraversalObjectFinder<ASTNode> finder){  finder.found(start);  ASTNode[] children=start.getChildren(null);  Queue<ASTNode> nodes=new Queue<>(children.length);  for (  ASTNode child : children) {    nodes.addLast(child);  }  ASTNode node;  while (nodes.size() > 0) {    node=nodes.pullFirst();    finder.found(node);    if (finder.stopped()) {      return;    }    if (finder.traverseFoundNodesChildren()) {      children=node.getChildren(null);      for (      ASTNode child : children) {        nodes.addLast(child);      }    }  }}  }
class C{  public static void assertQ(String request,String... tests){  try {    int queryStartPos=request.indexOf('?');    String query;    String path;    if (-1 == queryStartPos) {      query="";      path=request;    } else {      query=request.substring(queryStartPos + 1);      path=request.substring(0,queryStartPos);    }    if (!query.matches(".*wt=schema\\.xml.*")) {      query=setParam(query,"wt","xml");    }    request=path + '?' + setParam(query,"indent","on");    String response=restTestHarness.query(request);    String results=TestHarness.validateXPath(response,tests);    if (null != results) {      String msg="REQUEST FAILED: xpath=" + results + "\n\txml response was: "+ response+ "\n\trequest was:"+ request;      log.error(msg);      throw new RuntimeException(msg);    }  } catch (  XPathExpressionException e1) {    throw new RuntimeException("XPath is invalid",e1);  }catch (  Exception e2) {    SolrException.log(log,"REQUEST FAILED: " + request,e2);    throw new RuntimeException("Exception during query",e2);  }}  }
class C{  @Override public void registerPackages(ResourceSet resourceSet){  super.registerPackages(resourceSet);  if (!isInWorkspace(com.github.lbroudoux.dsl.eip.EipPackage.class)) {    resourceSet.getPackageRegistry().put(com.github.lbroudoux.dsl.eip.EipPackage.eINSTANCE.getNsURI(),com.github.lbroudoux.dsl.eip.EipPackage.eINSTANCE);  }}  }
class C{  protected void dispatchMouseEvent(String eventType,Element targetElement,Element relatedElement,Point clientXY,GraphicsNodeMouseEvent evt,boolean cancelable){  if (targetElement == null) {    return;  }  Point screenXY=evt.getScreenPoint();  DocumentEvent d=(DocumentEvent)targetElement.getOwnerDocument();  DOMMouseEvent mouseEvt=(DOMMouseEvent)d.createEvent("MouseEvents");  String modifiers=DOMUtilities.getModifiersList(evt.getLockState(),evt.getModifiers());  mouseEvt.initMouseEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,eventType,true,cancelable,null,evt.getClickCount(),screenXY.x,screenXY.y,clientXY.x,clientXY.y,(short)(evt.getButton() - 1),(EventTarget)relatedElement,modifiers);  try {    ((EventTarget)targetElement).dispatchEvent(mouseEvt);  } catch (  RuntimeException e) {    ua.displayError(e);  } finally {    lastTargetElement=targetElement;  }}  }
class C{  public static KindName kindName(int kind){switch (kind) {case PCK:    return KindName.PACKAGE;case TYP:  return KindName.CLASS;case VAR:return KindName.VAR;case VAL:return KindName.VAL;case MTH:return KindName.METHOD;default :throw new AssertionError("Unexpected kind: " + kind);}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.412 -0400",hash_original_method="CEF9D34BF3086FDA40BC370A70DF5AD2",hash_generated_method="D60384CEF658CF51488D146FB7DCDC10") @Override public void close() throws IOException {  throw exception;}  }
class C{  public List findAll(Sort sort){  return PagingAndSortingUtils.sort(retrieveAll(),sort);}  }
class C{  public static String utf8BytesWithUtf16LengthToString(@Nonnull byte[] bytes,int start,int utf16Length){  return utf8BytesWithUtf16LengthToString(bytes,start,utf16Length,null);}  }
class C{  public boolean shouldDelay(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent,String url){  return Common.shouldDelay(groupPosition,childPosition,convertView,parent,url);}  }
class C{  public AbstractColumn(Class columnType){  this(columnType,null);}  }
class C{  public SymbolTableEntryInternal steFor_$implements(){  return getSymbolTableEntryInternal("$implements",true);}  }
class C{  @Override public void afterLast() throws SQLException {  try {    debugCodeCall("afterLast");    checkClosed();    while (nextRow()) {    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override protected GraphDocument generateAnalysisDocument(IProgressMonitor monitor) throws IOException {  GraphModel analysisGraph=new GraphModel();  DependenciesListener builder=new DependenciesDispatcher(analysisGraph.getBuilder());  monitor.worked(1);  monitor.setTaskName("Loading Maven POM...");  try {    processModule(builder,page.getPathFile());  } catch (  Exception err) {    Tools.warnThrown("Unable to analyze Maven POM at " + page.getPathText(),err);  }  monitor.worked(1);  monitor.setTaskName("Resolving references...");  MavenGraphResolver resolver=new MavenGraphResolver();  GraphModel result=resolver.resolveReferences(analysisGraph);  monitor.worked(1);  return createGraphDocument(result,MavenActivator.PLUGIN_ID,Resources.PLUGIN_ID);}  }
class C{  static boolean isReparsePoint(int attributes){  return (attributes & FILE_ATTRIBUTE_REPARSE_POINT) != 0;}  }
class C{  private void checkIfOpenStackSnapshot(BlockSnapshot snapshot){  if (TechnologyType.NATIVE.toString().equalsIgnoreCase(snapshot.getTechnologyType())) {    StorageSystem system=_dbClient.queryObject(StorageSystem.class,snapshot.getStorageController());    if (system.getSystemType().equalsIgnoreCase(Type.openstack.name())) {      throw APIException.badRequests.snapshotExportNotSupported(Type.openstack.name(),snapshot.getId());    }  }}  }
class C{  public boolean wasEntryDeletedInThisTransaction(Entry entry){  return db.wasEntryDeletedInThisTransaction(entry);}  }
class C{  public double weightedFalseNegativeRate(){  return m_delegate.weightedFalseNegativeRate();}  }
class C{  public void testBoundedDoubles(){  AtomicInteger fails=new AtomicInteger(0);  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=456;  for (double least=0.00011; least < 1.0e20; least*=9) {    for (double bound=least * 1.0011; bound < 1.0e20; bound*=17) {      final double lo=least, hi=bound;      r.doubles(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  public void addActualQty(BigDecimal add){  m_actualQty=m_actualQty.add(add);}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  public static LocalGitRepo fromCurrentDir(String remoteUrl) throws ValidationException {  Git git;  File gitDir=new File(".");  try {    git=Git.open(gitDir);  } catch (  RepositoryNotFoundException rnfe) {    String fullPathOfCurrentDir=pathOf(gitDir);    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));    String summary;    List<String> messages=new ArrayList<String>();    if (gitRoot == null) {      summary="Releases can only be performed from Git repositories.";      messages.add(summary);      messages.add(fullPathOfCurrentDir + " is not a Git repository.");    } else {      summary="The release plugin can only be run from the root folder of your Git repository";      messages.add(summary);      messages.add(fullPathOfCurrentDir + " is not the root of a Gir repository");      messages.add("Try running the release plugin from " + pathOf(gitRoot));    }    throw new ValidationException(summary,messages);  }catch (  Exception e) {    throw new ValidationException("Could not open git repository. Is " + pathOf(gitDir) + " a git repository?",Arrays.asList("Exception returned when accessing the git repo:",e.toString()));  }  return new LocalGitRepo(git,remoteUrl);}  }
class C{  public void remove(String key){  preferences.edit().remove(key).apply();}  }
class C{  public static void sort(byte[] array){  sort(0,array.length,array);}  }
class C{  HGAtomType toRuntimeInstance(HGPersistentHandle handle,HGAtomType type){  return getSchema().toRuntimeType(handle,type);}  }
class C{  void createLockRequest(LocalRegion r,TXLockRequest req){  if (this.uaMods == null && this.entryMods.isEmpty()) {    return;  }  if (this.txState.logger.isDebugEnabled()) {    this.txState.logger.debug("TXRegionState.createLockRequest 1 " + r.getClass().getSimpleName() + " region-state="+ this);  }  if (r.getScope().isDistributed()) {    if (this.isCreatedDuringCommit()) {      return;    }    DistributedRegion dr=(DistributedRegion)r;    Set<InternalDistributedMember> advice=dr.getCacheDistributionAdvisor().adviseTX();    if (!advice.isEmpty()) {      this.otherMembers=advice;    }  }  if (this.txState.logger.isDebugEnabled()) {    this.txState.logger.debug("TXRegionState.createLockRequest 2");  }  boolean byPassDLock=false;  if (r instanceof BucketRegion) {    byPassDLock=true;  }  final boolean distributedTX=!byPassDLock && r.getScope().isDistributedAck();  if (this.uaMods != null || (!distributedTX && this.entryMods.size() > 0)) {    TXRegionLockRequestImpl rlr=new TXRegionLockRequestImpl(r);    if (this.uaMods != null) {      rlr.addEntryKeys(this.uaMods.keySet());    }    if (!distributedTX && this.entryMods.size() > 0) {      rlr.addEntryKeys(getLockRequestEntryKeys());    }    if (!rlr.isEmpty()) {      req.addLocalRequest(rlr);    }  }  if (distributedTX && this.entryMods.size() > 0) {    TXRegionLockRequestImpl rlr=new TXRegionLockRequestImpl(r);    rlr.addEntryKeys(getLockRequestEntryKeys());    if (!rlr.isEmpty()) {      req.setOtherMembers(this.otherMembers);      req.addDistributedRequest(rlr);    }  }}  }
class C{  public RegularExpressionLiteral createRegularExpressionLiteral(){  RegularExpressionLiteralImpl regularExpressionLiteral=new RegularExpressionLiteralImpl();  return regularExpressionLiteral;}  }
class C{  private void sendReportFileToEmailRecipients(final ReportMailingJob reportMailingJob,final String fileName,final ByteArrayOutputStream byteArrayOutputStream,final StringBuilder errorLog){  final Set<String> emailRecipients=this.reportMailingJobValidator.validateEmailRecipients(reportMailingJob.getEmailRecipients());  try {    final File file=new File(fileName);    final FileOutputStream outputStream=new FileOutputStream(file);    byteArrayOutputStream.writeTo(outputStream);    for (    String emailRecipient : emailRecipients) {      final ReportMailingJobEmailData reportMailingJobEmailData=new ReportMailingJobEmailData(emailRecipient,reportMailingJob.getEmailMessage(),reportMailingJob.getEmailSubject(),file);      this.reportMailingJobEmailService.sendEmailWithAttachment(reportMailingJobEmailData);    }    outputStream.close();  } catch (  IOException e) {    errorLog.append("The ReportMailingJobWritePlatformServiceImpl.sendReportFileToEmailRecipients method threw an IOException " + "exception: " + e + " ---------- ");  }}  }
class C{  public void addSnapshot(final CSelectionSnapshot snapshot){  m_snapshotList.add(snapshot);  if (m_snapshotList.size() > m_maxSnapshots) {    m_snapshotList.remove(0);    for (    final ISelectionHistoryListener listener : m_listeners) {      listener.snapshotRemoved();    }  }  m_undoIndex=size() - 1;  for (  final ISelectionHistoryListener listener : m_listeners) {    listener.snapshotAdded(snapshot);  }}  }
class C{  public List<HostScsiTopologyTarget> listScsiTopologyTargets(){  List<HostScsiTopologyTarget> targets=Lists.newArrayList();  for (  HostScsiTopologyInterface adapter : listScsiTopologyInterfaces()) {    if (adapter.getTarget() == null) {      continue;    }    addItems(targets,adapter.getTarget());  }  return targets;}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public int size(){  return n;}  }
class C{  @Override public void close() throws IOException {  close(false);}  }
class C{  public final Mat22 add(final Mat22 B){  Mat22 m=new Mat22();  m.ex.x=ex.x + B.ex.x;  m.ex.y=ex.y + B.ex.y;  m.ey.x=ey.x + B.ey.x;  m.ey.y=ey.y + B.ey.y;  return m;}  }
class C{  @SuppressWarnings("unchecked") @SneakyThrows public T invoke(Object instance){  try {    return (T)invoker.invoke(instance);  } catch (  ClassCastException|WrongMethodTypeException e) {    if (!getHandle().getDeclaringClass().isInstance(instance)) {      throw new IllegalArgumentException("Object is not of expected type. Got " + instance.getClass() + " instead of "+ getHandle().getDeclaringClass());    } else     if (getHandle().getParameterCount() != 0) {      throw new IllegalArgumentException("Was passed no arguments but needed " + getHandle().getParameterCount());    }    throw new AssertionError("Unknown error",e);  }}  }
class C{  public CUnselectNodesAction(final ZyGraph graph,final CTag tag){  super("Unselect Nodes");  m_graph=Preconditions.checkNotNull(graph,"IE02321: Graph argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE02322: Tag can't be null");}  }
class C{  public static void putFloat(String property,float val){  SIMBRAIN_PREFERENCES.putFloat(property,val);}  }
class C{  void messageInvalidSignalHeadAppearance(String name,String appearance){  javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Error21"),new Object[]{name,appearance}),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);}  }
class C{  private void headerStmt(ColumnFormat cf) throws ParserException, IOException {  match(HEADER);  String headerString=lookahead.sval;  matchQuotedString();  cf.setHeader(headerString);  log(pdebug,"Parsed: header -> " + headerString);}  }
class C{  public Loader(){  this(null);}  }
class C{  public String buildQuery(String[] projectionIn,String selection,String groupBy,String having,String sortOrder,String limit){  String[] projection=computeProjection(projectionIn);  StringBuilder where=new StringBuilder();  boolean hasBaseWhereClause=mWhereClause != null && mWhereClause.length() > 0;  if (hasBaseWhereClause) {    where.append(mWhereClause.toString());    where.append(')');  }  if (selection != null && selection.length() > 0) {    if (hasBaseWhereClause) {      where.append(" AND ");    }    where.append('(');    where.append(selection);    where.append(')');  }  return buildQueryString(mDistinct,mTables,projection,where.toString(),groupBy,having,sortOrder,limit);}  }
class C{  private void preorder(){  preorder(root);}  }
class C{  @Override public void run(){  if (!_lifecycle.toActive()) {    log.fine(this + " cannot start because an instance is active");    return;  }  try {    runImpl();  }  finally {  }}  }
class C{  public SVGOMColorProfileElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  if (info != null) {    info.setPlotArea(area);  }  RectangleInsets insets=getInsets();  insets.trim(area);  AxisSpace space=calculateAxisSpace(g2,area);  Rectangle2D dataArea=space.shrink(area,null);  setFixedDomainAxisSpaceForSubplots(space);  ValueAxis axis=getRangeAxis();  RectangleEdge rangeEdge=getRangeAxisEdge();  double cursor=RectangleEdge.coordinate(dataArea,rangeEdge);  AxisState state=axis.draw(g2,cursor,area,dataArea,rangeEdge,info);  if (parentState == null) {    parentState=new PlotState();  }  parentState.getSharedAxisStates().put(axis,state);  for (int i=0; i < this.subplots.size(); i++) {    CategoryPlot plot=(CategoryPlot)this.subplots.get(i);    PlotRenderingInfo subplotInfo=null;    if (info != null) {      subplotInfo=new PlotRenderingInfo(info.getOwner());      info.addSubplotInfo(subplotInfo);    }    Point2D subAnchor=null;    if (anchor != null && this.subplotArea[i].contains(anchor)) {      subAnchor=anchor;    }    plot.draw(g2,this.subplotArea[i],subAnchor,parentState,subplotInfo);  }  if (info != null) {    info.setDataArea(dataArea);  }}  }
class C{  private void pad(StringBuilder sb,int length){  while (sb.length() < length) {    sb.append(" ");  }}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public void removeTokens(String tokens){  for (int col=0; col < getColumnCount(); col++) {    removeTokens(tokens,col);  }}  }
class C{  public void removeTable(Table table){  if (table != null) {    tables.remove(table);  }}  }
class C{  public void append(final char[] data){  if (data == null) {    return;  }  provideCapacity(length + data.length);  System.arraycopy(data,0,c,length,data.length);  length+=data.length;}  }
class C{  public synchronized void engineLoad(KeyStore.LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException {  token.ensureValid();  if (NSS_TEST) {    ATTR_SKEY_TOKEN_TRUE=new CK_ATTRIBUTE(CKA_TOKEN,false);  }  if (param == null) {    throw new IllegalArgumentException("invalid null LoadStoreParameter");  }  if (useSecmodTrust) {    if (param instanceof Secmod.KeyStoreLoadParameter) {      nssTrustType=((Secmod.KeyStoreLoadParameter)param).getTrustType();    } else {      nssTrustType=Secmod.TrustType.ALL;    }  }  CallbackHandler handler;  KeyStore.ProtectionParameter pp=param.getProtectionParameter();  if (pp instanceof PasswordProtection) {    char[] password=((PasswordProtection)pp).getPassword();    if (password == null) {      handler=null;    } else {      handler=new PasswordCallbackHandler(password);    }  } else   if (pp instanceof CallbackHandlerProtection) {    handler=((CallbackHandlerProtection)pp).getCallbackHandler();  } else {    throw new IllegalArgumentException("ProtectionParameter must be either " + "PasswordProtection or CallbackHandlerProtection");  }  try {    login(handler);    if (mapLabels() == true) {      writeDisabled=true;    }    if (debug != null) {      dumpTokenMap();    }  } catch (  LoginException|KeyStoreException|PKCS11Exception e) {    throw new IOException("load failed",e);  }}  }
class C{  public void copyStream(byte[] b,int off,int len){  super.setContentEncoding(null);  content=new byte[len];  System.arraycopy(b,off,content,0,len);}  }
class C{  private Map<String,List<TableBlockInfo>> mappedAndGetTaskIdToTableBlockInfo(Map<String,List<TableBlockInfo>> segmentToTableBlocksInfos){  Map<String,List<TableBlockInfo>> taskIdToTableBlockInfoMap=new HashMap<String,List<TableBlockInfo>>();  Iterator<Entry<String,List<TableBlockInfo>>> iterator=segmentToTableBlocksInfos.entrySet().iterator();  while (iterator.hasNext()) {    Entry<String,List<TableBlockInfo>> next=iterator.next();    List<TableBlockInfo> value=next.getValue();    for (    TableBlockInfo blockInfo : value) {      String taskNo=DataFileUtil.getTaskNo(blockInfo.getFilePath());      List<TableBlockInfo> list=taskIdToTableBlockInfoMap.get(taskNo);      if (null == list) {        list=new ArrayList<TableBlockInfo>();        taskIdToTableBlockInfoMap.put(taskNo,list);      }      list.add(blockInfo);    }  }  return taskIdToTableBlockInfoMap;}  }
class C{  private int search(String url,String exactURL){  String sql="SELECT W_ClickCount_ID, TargetURL FROM W_ClickCount WHERE TargetURL LIKE ?";  int W_ClickCount_ID=0;  int exactW_ClickCount_ID=0;  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setString(1,"%" + url + "%");    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      W_ClickCount_ID=rs.getInt(1);      if (exactURL.equals(rs.getString(2))) {        exactW_ClickCount_ID=W_ClickCount_ID;        break;      }    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  SQLException ex) {    log.log(Level.SEVERE,sql,ex);  }  try {    if (pstmt != null)     pstmt.close();  } catch (  SQLException ex1) {  }  pstmt=null;  if (exactW_ClickCount_ID != 0)   W_ClickCount_ID=exactW_ClickCount_ID;  return W_ClickCount_ID;}  }
class C{  protected Motion(int sourceValue,int destinationValue,int duration){  this.sourceValue=sourceValue;  this.destinationValue=destinationValue;  this.duration=duration;  lastReturnedValue=sourceValue;  if (slowMotion) {    this.duration*=50;  }  previousLastReturnedValue[0]=-1;}  }
class C{  public Example(DataRow data,ExampleSet parentExampleSet){  this.data=data;  this.parentExampleSet=parentExampleSet;}  }
class C{  private ClassifierSplitModel localModel(){  return (ClassifierSplitModel)m_localModel;}  }
class C{  public static void main(String[] args){  final int NUMBER_OF_EMIRPS=100;  final int EMIRPS_PER_LINE=10;  int count=0;  int n=2;  while (count < NUMBER_OF_EMIRPS) {    if (isEmirp(n)) {      count++;      System.out.print(count % EMIRPS_PER_LINE == 0 ? n + "\n" : n + " ");    }    n++;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.781 -0500",hash_original_method="CC5526DB6A3104361CDD33B14CCC4EB8",hash_generated_method="1F8C4851622F9EC8D371D8D36157952C") public void trace(Object message,Throwable exception){  log(Level.FINEST,String.valueOf(message),exception);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static int partition(int[] list,int first,int last){  int middle=list[(list.length - 1) / 2];  int pivot=median(first,middle,last);  int low=first + 1;  int high=last;  while (high > low) {    while (low <= high && list[low] <= pivot)     low++;    while (low <= high && list[high] > pivot)     high--;    if (high > low) {      int temp=list[high];      list[high]=list[low];      list[low]=temp;    }  }  while (high > first && list[high] >= pivot)   high--;  if (pivot > list[high]) {    list[first]=list[high];    list[high]=pivot;    return high;  } else {    return first;  }}  }
class C{  public void tagNameCharacter(byte[] data) throws IOException {  startTag(SWFConstants.TAG_NAMECHARACTER,false);  out.write(data);  completeTag();}  }
class C{  private static byte[] groupKey(List<Object> groups){  StringBuilder builder=new StringBuilder();  groups.forEach(null);  return Bytes.toBytes(builder.toString());}  }
class C{  public TextHasNumberCondition(){  this.min=0;  this.max=Integer.MAX_VALUE;}  }
class C{  public static int createWithIdGeneration(Connection connection,String rawSqlQuery,Object... parameters) throws SQLException {  PreparedStatement stmt=null;  ResultSet rs=null;  try {    stmt=connection.prepareStatement(rawSqlQuery,Statement.RETURN_GENERATED_KEYS);    for (int index=0; index < parameters.length; index++) {      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);    }    stmt.executeUpdate();    rs=stmt.getGeneratedKeys();    rs.next();    return rs.getInt(1);  }  finally {    JdbcUtils.closeResultSet(rs);    JdbcUtils.closeStatement(stmt);  }}  }
class C{  public boolean undo(INode n){  if (!(n instanceof EightPuzzleNode)) {    throw new IllegalArgumentException("SlideMove expects state objects of class EightPuzzleNode");  }  EightPuzzleNode state=(EightPuzzleNode)n;  return state.swap(toR,toC,fromR,fromC);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.869 -0400",hash_original_method="48B0AC99E6E43892210E9D31CA5A86DE",hash_generated_method="EE1A34A3FF19C1D2A20777E27A943D8A") public static IOFileFilter prefixFileFilter(String prefix,IOCase caseSensitivity){  return new PrefixFileFilter(prefix,caseSensitivity);}  }
class C{  public void startElement(String name,String nsPrefix,String nsURI,String systemID,int lineNr){  String fullName=name;  if (nsPrefix != null) {    fullName=nsPrefix + ':' + name;  }  IXMLElement elt=this.prototype.createElement(fullName,nsURI,systemID,lineNr);  if (this.stack.empty()) {    this.root=elt;  } else {    IXMLElement top=(IXMLElement)this.stack.peek();    top.addChild(elt);  }  this.stack.push(elt);}  }
class C{  public ChoiceFormat(double[] limits,String[] formats){  setChoices(limits,formats);}  }
class C{  protected S_ReturnImpl(){  super();}  }
class C{  private void addInterfaceNodeSpecs(StaticDefinitions staticDefs,EntitySpec entitySpec,Class<?> interfaceDefinitionClass){  if (!interfaceDefinitionClass.getEnclosingClass().isAssignableFrom(staticDefs.getClass())) {    throw new IllegalStateException(interfaceDefinitionClass + " not defined in " + staticDefs.getClass());  }  for (  Class<?> interfaceClass : interfaceDefinitionClass.getInterfaces()) {    addInterfaceNodeSpecs(staticDefs.resolveStaticDefinitionFor(interfaceClass),entitySpec,interfaceClass);  }  if (interfaceDefinitionClass.isInterface()) {    for (    FieldValuePair<NodeSpec> fieldValue : getStaticFieldValues(interfaceDefinitionClass,NodeSpec.class)) {      NodeSpec interfaceNodeSpec=fieldValue.value;      if (interfaceNodeSpec.getName() == null) {        interfaceNodeSpec.setName(fieldValue.field.getName());      }      NodeSpec clonedSpec=interfaceNodeSpec.clone();      processNodeSpecAndAddToEntity(staticDefs,entitySpec,clonedSpec,fieldValue.field);    }  }}  }
class C{  public T modules(Module... modules){  bootique.modules(modules);  return (T)this;}  }
class C{  public void testHandlingOfUnrecognized() throws Exception {  try {    new ObjectMapper().readValue("{\"bar\":3}",Bean.class);    fail("Should have failed binding");  } catch (  UnrecognizedPropertyException e) {    assertEquals("bar",e.getUnrecognizedPropertyName());    assertEquals(Bean.class,e.getReferringClass());  }}  }
class C{  protected GraphicsNode instantiateGraphicsNode(){  return new TextNode();}  }
class C{  public boolean canBeZero(){  boolean zero=true;  if (getFormat().equals(QUANTITY_POSITIVE_7_0)) {    zero=false;  } else   if (getFormat().equals(QUANTITY_POSITIVE_10_0)) {    zero=false;  }  return zero;}  }
class C{  public void testInternBeforeLiteralIsLoaded() throws Exception {  String programmatic=Arrays.asList("5058","9962","1563","5744").toString().intern();  String literal=(String)Class.forName("libcore.java.lang.StringTest$HasLiteral").getDeclaredField("literal").get(null);  assertEquals(System.identityHashCode(programmatic),System.identityHashCode(literal));  assertSame(programmatic,literal);}  }
class C{  public Dimension maximumLayoutSize(Container parent){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  public void logEvent(String eventName,double valueToSum,Bundle parameters){  logEvent(eventName,valueToSum,parameters,false);}  }
class C{  public EventException(Throwable cause,String message){  super(message);  this.cause=cause;}  }
class C{  public TriXWriter(Writer writer){  this(new XMLWriter(writer));}  }
class C{  public void post(Object event){  mBusSubject.onNext(event);}  }
class C{  public UUID processId(){  return procId;}  }
class C{  public Bitmap decodeSampledBitmapFromResource(int resID,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  options.inPurgeable=true;  return BitmapFactory.decodeResource(mContext.getResources(),resID,options);}  }
class C{  public DefaultIODescription(Class[] input,Class[] output,int outputBehaviour){  this.inputClasses=input;  this.outputClasses=output;  if (inputClasses == null) {    inputClasses=new Class[0];  }  if (outputClasses == null) {    outputClasses=new Class[0];  }  this.outputBehaviour=outputBehaviour;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){  player.setItemInUse(stack,this.getMaxItemUseDuration(stack));  return stack;}  }
class C{  public void rotate(float angle){  showMissingWarning("rotate");}  }
class C{  public final void sendMessageDelayed(Message msg,long delayMillis){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageDelayed(msg,delayMillis);}  }
class C{  void commit(){  table.commit(operation,row);}  }
class C{  void storeInitialText(){  try {    initialText=getText(0,getLength());  } catch (  BadLocationException e) {  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public String pattern(){  return internal.toString();}  }
class C{  protected void updateStatsForPredictor(double predictedValue,Instance instance) throws Exception {  if (!instance.classIsMissing()) {    m_WithClass+=instance.weight();    if (Utils.isMissingValue(predictedValue)) {      m_Unclassified+=instance.weight();      return;    }    m_SumClass+=instance.weight() * instance.classValue();    m_SumSqrClass+=instance.weight() * instance.classValue() * instance.classValue();    m_SumClassPredicted+=instance.weight() * instance.classValue() * predictedValue;    m_SumPredicted+=instance.weight() * predictedValue;    m_SumSqrPredicted+=instance.weight() * predictedValue * predictedValue;    updateNumericScores(makeDistribution(predictedValue),makeDistribution(instance.classValue()),instance.weight());  } else {    m_MissingClass+=instance.weight();  }  if (m_pluginMetrics != null) {    for (    AbstractEvaluationMetric m : m_pluginMetrics) {      if (m instanceof StandardEvaluationMetric) {        ((StandardEvaluationMetric)m).updateStatsForPredictor(predictedValue,instance);      } else       if (m instanceof InformationTheoreticEvaluationMetric) {        ((InformationTheoreticEvaluationMetric)m).updateStatsForPredictor(predictedValue,instance);      }    }  }}  }
class C{  private static final ExprNode addSubsts(ExprNode expr,List subs){  ExprNode res=expr;  while (!subs.isEmpty()) {    SubstInNode sn=(SubstInNode)subs.car();    res=new SubstInNode(sn.stn,sn.getSubsts(),res,sn.getInstantiatingModule(),sn.getInstantiatedModule());    subs=subs.cdr();  }  return res;}  }
class C{  public static boolean isIntentType(IAllocNode node){  Type type=node.getType();  return type instanceof RefType && Scene.v().getActiveHierarchy().isClassSuperclassOfIncluding(Scene.v().getSootClass("android.content.Intent"),((RefType)type).getSootClass());}  }
class C{  public Element store(Object o){  SignalGroupManager m=(SignalGroupManager)o;  Element element=new Element("signalgroups");  element.setAttribute("class",this.getClass().getName());  List<String> names=m.getSystemNameList();  for (int i=0; i < names.size(); i++) {    Element e=new Element("signalgroup");    SignalGroup p=m.getSignalGroup(names.get(i));    e.setAttribute("systemName",p.getSystemName());    e.addContent(new Element("systemName").addContent(p.getSystemName()));    e.setAttribute("userName",p.getUserName());    element.addContent(e);    for (int x=0; x < p.getNumSignalMastAppearances(); x++) {      Element app=new Element("appearance").setAttribute("valid",p.getSignalMastAppearanceByIndex(x));      e.addContent(app);    }    e.setAttribute("signalMast",p.getSignalMastName());    for (int x=0; x < p.getNumSignalHeadItems(); x++) {      storeSignalHead(e,p,x);    }  }  return element;}  }
class C{  public static boolean isUuidPresent(ParcelUuid[] uuidArray,ParcelUuid uuid){  if ((uuidArray == null || uuidArray.length == 0) && uuid == null)   return true;  if (uuidArray == null)   return false;  for (  ParcelUuid element : uuidArray) {    if (element.equals(uuid))     return true;  }  return false;}  }
class C{  public PointDataImpl(ExtensionPoint extensionPoint){  this.extPoint=extensionPoint;}  }
class C{  public static ECKey toECKey(Key key) throws InvalidKeyException {  if (key instanceof ECKey) {    ECKey ecKey=(ECKey)key;    checkKey(ecKey);    return ecKey;  } else {    return (ECKey)getInstance().translateKey(key);  }}  }
class C{  public synchronized VisualTable addTable(String group,Table table){  return addTable(group,table,(Predicate)null);}  }
class C{  public JSONTokener(InputStream inputStream){  this(new InputStreamReader(inputStream));}  }
class C{  public static DemoFragment newInstance(int index){  DemoFragment fragment=new DemoFragment();  Bundle b=new Bundle();  b.putInt("index",index);  fragment.setArguments(b);  return fragment;}  }
class C{  public boolean exportOpenSsl(){  return jrbOpenSsl.isSelected();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getInterfaceBody_();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void assertNonNegativeValue(final int value,final JBBPToken token){  if (value < 0) {    throw new JBBPCompilationException("Detected unsupported negative value for a field must have only zero or a positive one",token);  }}  }
class C{  public boolean isFileTransferHttpSupported(){  return mFileTransferHttp;}  }
class C{  private String replaceReservedChars(String str){  if (StringUtils.isBlank(str)) {    return str;  }  return str.replace(TAB,WHITESPACE).replace(NEWLINE,WHITESPACE);}  }
class C{  private Object executePlus(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  Object left=executeExp(pc,sql,qr,expression.getOperand(0),row);  Object right=executeExp(pc,sql,qr,expression.getOperand(1),row);  try {    return new Double(Caster.toDoubleValue(left) + Caster.toDoubleValue(right));  } catch (  PageException e) {    return Caster.toString(left) + Caster.toString(right);  }}  }
class C{  protected boolean requiresFullHeapCollection(){  if (userTriggeredCollection && Options.fullHeapSystemGC.getValue()) {    return true;  }  if (nextGCWholeHeap || collectionAttempt > 1) {    return true;  }  return false;}  }
class C{  public void evaluateIndividual(final EvolutionState state,Individual ind,int subpop){  problem.evaluate(state,ind,subpop,0);  queue.addLast(new QueueIndividual(ind,subpop));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private BytesRef ser2bytes(Serializable ser) throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  ObjectOutputStream oos=null;  try {    oos=new ObjectOutputStream(out);    oos.writeObject(ser);    oos.flush();  }  finally {    if (oos != null) {      try {        oos.close();      } catch (      Exception ignore) {      }    }  }  return new BytesRef(out.toByteArray());}  }
class C{  private static Person localCreatePopWOnePerson(Scenario scenario,Link link,ActivityFacility facility1,double workActEndTime){  Population population=scenario.getPopulation();  Person person=population.getFactory().createPerson(Id.create(1,Person.class));  population.addPerson(person);  Plan plan=(Plan)population.getFactory().createPlan();  person.addPlan(plan);{    Activity act=population.getFactory().createActivityFromCoord("home",new Coord((double)0,(double)0));    act.setEndTime(8.0 * 3600);    plan.addActivity(act);  }  plan.addLeg(population.getFactory().createLeg(TransportMode.car));{    Activity act=population.getFactory().createActivityFromCoord("work",scenario.getActivityFacilities().getFacilities().get(facility1.getId()).getCoord());    act.setEndTime(workActEndTime);    ((Activity)act).setFacilityId(facility1.getId());    plan.addActivity(act);  }  PopulationUtils.createAndAddLeg(plan,TransportMode.car);{    Activity act=population.getFactory().createActivityFromCoord("home",new Coord((double)0,(double)0));    plan.addActivity(act);  }  return person;}  }
class C{  public static String[] doctype2mime(String ext,char doctype){  if (doctype == DT_PDFPS)   return new String[]{"application/pdf"};  if (doctype == DT_HTML)   return new String[]{"text/html"};  if (doctype == DT_DOC)   return new String[]{"application/msword"};  if (doctype == DT_FLASH)   return new String[]{"application/x-shockwave-flash"};  if (doctype == DT_SHARE)   return new String[]{"text/plain"};  if (doctype == DT_BINARY)   return new String[]{"application/octet-stream"};  String mime=Classification.ext2mime(ext);  int p=mime.indexOf('/');  if (p < 0)   return new String[]{mime};  if (doctype == DT_TEXT)   return new String[]{"text" + mime.substring(p)};  if (doctype == DT_IMAGE)   return new String[]{"image" + mime.substring(p)};  if (doctype == DT_AUDIO)   return new String[]{"audio" + mime.substring(p)};  if (doctype == DT_MOVIE)   return new String[]{"video" + mime.substring(p)};  return new String[]{mime};}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  private OFFactory computeInitialFactory(Set<OFVersion> ofVersions){  if (ofVersions == null || ofVersions.isEmpty()) {    throw new IllegalStateException("OpenFlow version list should never be null or empty at this point. Make sure it's set in the OFSwitchManager.");  }  OFVersion highest=null;  for (  OFVersion v : ofVersions) {    if (highest == null) {      highest=v;    } else     if (v.compareTo(highest) > 0) {      highest=v;    }  }  return OFFactories.getFactory(highest);}  }
class C{  private void appendCompactFlagUsage(final WrappingStringBuilder wb,final SortedSet<Flag> optionals){  boolean first=true;  if (getOptional().size() > 0) {    wb.wrapWord("[OPTION]...");    first=false;  }  for (  Flag flag : getRequired()) {    wb.wrapWord((first ? "" : " ") + flag.getCompactFlagUsage());    first=false;  }  for (  final Flag f : optionals) {    wb.wrapWord((first ? "" : " ") + f.getCompactFlagUsage());    first=false;  }}  }
class C{  public void changeStateToLeg(){  state=State.LEG;  endLeg=false;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private Text intersect(){  return new Text("Two circles intersect? " + (isIntersect() ? "Yes" : "No"));}  }
class C{  public static String toDateTimeString(java.util.Date date){  if (date == null)   return "";  String dateString=toDateString(date);  String timeString=toTimeString(date);  if (dateString != null && timeString != null) {    return dateString + " " + timeString;  } else {    return "";  }}  }
class C{  private byte[] unzip(byte[] body){  ZipEntry ze;  byte buf[]=new byte[1024];  try (ByteArrayOutputStream bao=new ByteArrayOutputStream();ByteArrayInputStream bytein=new ByteArrayInputStream(body);ZipInputStream zis=new ZipInputStream(bytein)){    while ((ze=zis.getNextEntry()) != null) {      int l=0;      while ((l=zis.read(buf)) > 0) {        bao.write(buf,0,l);      }    }    return bao.toByteArray();  } catch (  IOException e) {  }  return null;}  }
class C{  private void prepareBlockMirrorData(String name,int numBlockMirrors) throws Exception {  BlockConsistencyGroup cg=createBlockConsistencyGroup("blockMirrorConsistencyGroup",null,Types.LOCAL.name(),true);  for (int i=1; i <= numBlockMirrors; i++) {    BlockMirror blockMirror=new BlockMirror();    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);    blockMirrorURIs.add(blockMirrorURI);    blockMirror.setId(blockMirrorURI);    blockMirror.setLabel(name + i);    blockMirror.addConsistencyGroup(cg.getId().toString());    _dbClient.createObject(blockMirror);  }}  }
class C{  public HttpContainer http(){  HttpContainer httpSystem=HttpContainer.current();  return httpSystem;}  }
class C{  public WKTFileReader(File file,WKTReader wktReader){  this.file=file;  this.wktReader=wktReader;}  }
class C{  public static int compareLocationValues(int componentIndex0,int segmentIndex0,double segmentFraction0,int componentIndex1,int segmentIndex1,double segmentFraction1){  if (componentIndex0 < componentIndex1)   return -1;  if (componentIndex0 > componentIndex1)   return 1;  if (segmentIndex0 < segmentIndex1)   return -1;  if (segmentIndex0 > segmentIndex1)   return 1;  if (segmentFraction0 < segmentFraction1)   return -1;  if (segmentFraction0 > segmentFraction1)   return 1;  return 0;}  }
class C{  public boolean isPanEnabled(){  return isPanXEnabled() || isPanYEnabled();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addFooter(View view){  bookends.addFooter(view);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.517 -0500",hash_original_method="DF73FA582D888219D7BAD8AC6A6DFD56",hash_generated_method="936390A4CBBD5E8A16D4D481EAAD3882") public void onCallBusy(SipSession session){}  }
class C{  public boolean exportOrchestrationRollbackSteps(URI parentWorkflow,String exportOrchestrationStepId,String token) throws WorkflowException {  _workflowService.rollbackChildWorkflow(parentWorkflow,exportOrchestrationStepId,token);  return true;}  }
class C{  private static void addAllChildrenToSet(View rootView,Set<View> theSet){  if (!(rootView instanceof ViewGroup)) {    return;  }  ViewGroup rootViewGroup=(ViewGroup)rootView;  for (int i=0; i < rootViewGroup.getChildCount(); ++i) {    View nextView=rootViewGroup.getChildAt(i);    theSet.add(nextView);    addAllChildrenToSet(nextView,theSet);  }}  }
class C{  private void renderTestScene(ShapeRenderer renderer){  renderer.begin(ShapeType.Filled);  renderer.setColor(Color.GREEN);  renderer.circle(100,100,90);  renderer.setColor(Color.RED);  renderer.rect(200,10,200,200);  renderer.setColor(Color.YELLOW);  renderer.triangle(10,200,200,200,100,400);  renderer.end();  renderer.begin(ShapeType.Line);  renderer.setColor(Color.CYAN);  renderer.curve(210,210,400,210,210,400,400,300,20);  renderer.end();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ValidationPackage.VALIDATION_MARKER__DELEGATE_RESOURCE:    setDelegateResource(DELEGATE_RESOURCE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void testCase14(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=-1;  int bSign=1;  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public double convictionForRule(AprioriItemSet premise,AprioriItemSet consequence,int premiseCount,int consequenceCount){  double num=(double)premiseCount * (double)(m_totalTransactions - consequenceCount) / m_totalTransactions;  double denom=((premiseCount - consequence.m_counter) + 1);  if (num < 0 || denom < 0) {    System.err.println("*** " + num + " "+ denom);    System.err.println("premis count: " + premiseCount + " consequence count "+ consequenceCount+ " total trans "+ m_totalTransactions);  }  return num / denom;}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  private static Set<Graph> listMbDags(Graph mbPattern,boolean orientBidirectedEdges,IndependenceTest test,int depth,Node target){  Set<Graph> dags=new HashSet<>();  Graph graph=new EdgeListGraph(mbPattern);  doAbbreviatedMbOrientation(graph,test,depth,target);  Set<Edge> edges=graph.getEdges();  Edge edge=null;  for (  Edge _edge : edges) {    if (orientBidirectedEdges && Edges.isBidirectedEdge(_edge)) {      edge=_edge;      break;    }    if (Edges.isUndirectedEdge(_edge)) {      edge=_edge;      break;    }  }  if (edge == null) {    dags.add(graph);    return dags;  }  graph.setEndpoint(edge.getNode2(),edge.getNode1(),Endpoint.TAIL);  graph.setEndpoint(edge.getNode1(),edge.getNode2(),Endpoint.ARROW);  dags.addAll(listMbDags(graph,orientBidirectedEdges,test,depth,target));  graph.setEndpoint(edge.getNode1(),edge.getNode2(),Endpoint.TAIL);  graph.setEndpoint(edge.getNode2(),edge.getNode1(),Endpoint.ARROW);  dags.addAll(listMbDags(graph,orientBidirectedEdges,test,depth,target));  return dags;}  }
class C{  protected boolean decrementTaskDone(ImageShadowTask imageShadowTask){synchronized (mShadowTaskMap) {    int remainingTasks=imageShadowTask.getProtocol().addCount(-1);    if (remainingTasks == 0) {      mShadowTaskMap.remove(imageShadowTask.getSession());      imageShadowTask.getProtocol().signal();      return true;    } else {      return false;    }  }}  }
class C{  @SuppressFBWarnings("DM_EXIT") public static void show(Activity activity,int errorCode){  int msg;switch (errorCode) {case LoaderErrors.LOADER_ERROR_NATIVE_LIBRARY_LOAD_FAILED:    msg=R.string.os_version_missing_features;  break;case LoaderErrors.LOADER_ERROR_NATIVE_LIBRARY_WRONG_VERSION:msg=R.string.incompatible_libraries;break;default :msg=R.string.native_startup_failed;}final String message=activity.getResources().getString(msg);if (!(activity instanceof FragmentActivity)) {Log.e(TAG,"Unable to start chrome due to: " + msg);System.exit(-1);return;}Bundle dialogArgs=new Bundle();dialogArgs.putString(MESSAGE_KEY,message);InvalidStartupDialog dialog=new InvalidStartupDialog();dialog.setArguments(dialogArgs);dialog.show(((FragmentActivity)activity).getSupportFragmentManager(),"InvalidStartupDialog");}  }
class C{  public void addHeaders(List<Header> headers){  if (this.headers == null) {    this.headers=new ArrayList<HeaderItem>();  }  for (  Header header : headers) {    this.headers.add(new HeaderItem(header));  }}  }
class C{  protected SAXContentHandler createContentHandler(XMLReader reader){  return new SAXContentHandler(getDocumentFactory(),dispatchHandler);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected static double sec(double x){  return 1.0 / Math.cos(x);}  }
class C{  public static final Query createLuceneQuery(SearchQuery searchQuery){  return createLuceneQuery(Operator.AND,searchQuery);}  }
class C{  private SipRequest createInviteRequest(String content) throws PayloadException {  try {    SipRequest invite=SipMessageFactory.createMultipartInvite(getDialogPath(),getFeatureTags(),getAcceptContactTags(),content,BOUNDARY_TAG);    final String subject=getSubject();    if (subject != null) {      invite.addHeader(SubjectHeader.NAME,subject);    }    invite.addHeader(RequireHeader.NAME,"recipient-list-invite");    invite.addHeader(ChatUtils.HEADER_CONTRIBUTION_ID,getContributionID());    return invite;  } catch (  ParseException e) {    throw new PayloadException("Failed to create invite request!",e);  }}  }
class C{  @SafeVarargs public final <Result,Progress>Promise<MultipleResult<Result,Progress>,Progress> afterAll(Promise<Result,Progress>... promises){  return afterAll(Arrays.asList(promises));}  }
class C{  public ToastBuilder message(CharSequence message){  this.message=message;  return this;}  }
class C{  @Override public boolean continueExecuting(){  return entity.getCurrentTask() == null && !this.entity.getNavigator().noPath();}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_StateA:    return stateVector[0] == State.main_region_StateA;case main_region_StateB:  return stateVector[0] == State.main_region_StateB;default :return false;}}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public Enumeration<Element> elements(){  return ec.elements();}  }
class C{  public int count(){  return count;}  }
class C{  public void removeElementAt(int i){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.removeElementAt(i);}  }
class C{  public SuperBit(){}  }
class C{  protected int proxiedStep(RouteInfo plan,RouteInfo fact){  if (fact.getHopCount() <= 1)   return UNREACHABLE;  if (!plan.getTargetHost().equals(fact.getTargetHost()))   return UNREACHABLE;  final int phc=plan.getHopCount();  final int fhc=fact.getHopCount();  if (phc < fhc)   return UNREACHABLE;  for (int i=0; i < fhc - 1; i++) {    if (!plan.getHopTarget(i).equals(fact.getHopTarget(i)))     return UNREACHABLE;  }  if (phc > fhc)   return TUNNEL_PROXY;  if ((fact.isTunnelled() && !plan.isTunnelled()) || (fact.isLayered() && !plan.isLayered()))   return UNREACHABLE;  if (plan.isTunnelled() && !fact.isTunnelled())   return TUNNEL_TARGET;  if (plan.isLayered() && !fact.isLayered())   return LAYER_PROTOCOL;  if (plan.isSecure() != fact.isSecure())   return UNREACHABLE;  return COMPLETE;}  }
class C{  public double angle(Tuple3d location){  return Geometric.angle(this.location,location);}  }
class C{  @Override public boolean isAutoIncrement(int column) throws SQLException {  try {    debugCodeCall("isAutoIncrement",column);    checkColumnIndex(column);    return result.isAutoIncrement(--column);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void intrinsifyTruffleOnlyIntrinsics(){  intrinsics.put("@strlen",LLVMStrlenFactory.getInstance());  intrinsics.put("@strcmp",LLVMStrCmpFactory.getInstance());}  }
class C{  public DenseMatrix(Matrix toCopy){  this(toCopy.rows(),toCopy.cols());  toCopy.copyTo(this);}  }
class C{  String opcodeToString(char opcode){  String ret=(String)hashOpcode.get(new Integer(opcode));  if (ret == null) {    ret="OP_????";  }  return ret;}  }
class C{  public boolean process(ContentEvent event){  if (event instanceof ClusteringContentEvent) {    ClusteringContentEvent cce=(ClusteringContentEvent)event;    outputStream.put(event);    if (cce.isSample()) {      evaluationStream.put(new ClusteringEvaluationContentEvent(null,new DataPoint(cce.getInstance(),numInstances++),cce.isLastEvent()));    }  } else   if (event instanceof ClusteringEvaluationContentEvent) {    evaluationStream.put(event);  }  return true;}  }
class C{  public static String[] lsFiles(String directory,FilenameFilter filter) throws IOException {  File dir=new File(directory);  ArrayList<String> files=new ArrayList<>();  for (  File filepath : dir.listFiles(filter)) {    if (isFile(filepath.getAbsolutePath()))     files.add(filepath.getAbsolutePath());  }  return files.toArray(new String[files.size()]);}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public Element store(Object o){  SensorIcon p=(SensorIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("sensoricon");  element.setAttribute("sensor",p.getNamedSensor().getName());  storeCommonAttributes(p,element);  element.setAttribute("momentary",p.getMomentary() ? "true" : "false");  element.setAttribute("icon",p.isIcon() ? "yes" : "no");  storeIconInfo(p,element);  storeTextInfo(p,element);  element.setAttribute("class","jmri.jmrit.display.configurexml.SensorIconXml");  return element;}  }
class C{  public void reload(){  FACTORY.reload();  fireSettingsEvent(EventType.RELOAD);}  }
class C{  private JokeEntiyForUI generateJokeContentUI(JokeEntity.ResultBean.DataBean dataBean){  JokeEntiyForUI jokeEntiyForUI=new JokeEntiyForUI();  jokeEntiyForUI.setContent(dataBean.getContent());  jokeEntiyForUI.setHashId(dataBean.getHashId());  jokeEntiyForUI.setUnixtime(dataBean.getUnixtime());  jokeEntiyForUI.setUpdatetime(dataBean.getUpdatetime());  return jokeEntiyForUI;}  }
class C{  @Override public int compareTo(final TemporalInstant that){  return getAsKeyString().compareTo(that.getAsKeyString());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Wildcards of(Wildcards.Flag setFlag,Wildcards.Flag setFlag2){  return Wildcards.of(setFlag.wildcard(setFlag2.wildcard(0)));}  }
class C{  public static int compareInt(int a,int b){  return a == b ? 0 : a < b ? -1 : 1;}  }
class C{  public boolean isValid(Object obj){  return m_members.add(obj);}  }
class C{  public static KeyStroke fromString(String keyStr){  String keyStrLC=keyStr.toLowerCase();  KeyStroke k;  if (keyStr.length() == 1) {    k=new KeyStroke(KeyType.Character,keyStr.charAt(0),false,false,false);  } else   if (keyStr.startsWith("<") && keyStr.endsWith(">")) {    if (keyStrLC.equals("<s-tab>")) {      k=new KeyStroke(KeyType.ReverseTab);    } else     if (keyStr.contains("-")) {      ArrayList<String> segments=new ArrayList<String>(Arrays.asList(keyStr.substring(1,keyStr.length() - 1).split("-")));      if (segments.size() < 2) {        throw new IllegalArgumentException("Invalid vim notation: " + keyStr);      }      String characterStr=segments.remove(segments.size() - 1);      boolean altPressed=false;      boolean ctrlPressed=false;      for (      String modifier : segments) {        if ("c".equals(modifier.toLowerCase())) {          ctrlPressed=true;        } else         if ("a".equals(modifier.toLowerCase())) {          altPressed=true;        } else         if ("s".equals(modifier.toLowerCase())) {          characterStr=characterStr.toUpperCase();        }      }      k=new KeyStroke(characterStr.charAt(0),ctrlPressed,altPressed);    } else {      if (keyStrLC.startsWith("<esc")) {        k=new KeyStroke(KeyType.Escape);      } else       if (keyStrLC.equals("<cr>") || keyStrLC.equals("<enter>") || keyStrLC.equals("<return>")) {        k=new KeyStroke(KeyType.Enter);      } else       if (keyStrLC.equals("<bs>")) {        k=new KeyStroke(KeyType.Backspace);      } else       if (keyStrLC.equals("<tab>")) {        k=new KeyStroke(KeyType.Tab);      } else       if (keyStrLC.equals("<space>")) {        k=new KeyStroke(' ',false,false);      } else       if (keyStrLC.equals("<up>")) {        k=new KeyStroke(KeyType.ArrowUp);      } else       if (keyStrLC.equals("<down>")) {        k=new KeyStroke(KeyType.ArrowDown);      } else       if (keyStrLC.equals("<left>")) {        k=new KeyStroke(KeyType.ArrowLeft);      } else       if (keyStrLC.equals("<right>")) {        k=new KeyStroke(KeyType.ArrowRight);      } else       if (keyStrLC.equals("<insert>")) {        k=new KeyStroke(KeyType.Insert);      } else       if (keyStrLC.equals("<del>")) {        k=new KeyStroke(KeyType.Delete);      } else       if (keyStrLC.equals("<home>")) {        k=new KeyStroke(KeyType.Home);      } else       if (keyStrLC.equals("<end>")) {        k=new KeyStroke(KeyType.End);      } else       if (keyStrLC.equals("<pageup>")) {        k=new KeyStroke(KeyType.PageUp);      } else       if (keyStrLC.equals("<pagedown>")) {        k=new KeyStroke(KeyType.PageDown);      } else       if (keyStrLC.equals("<f1>")) {        k=new KeyStroke(KeyType.F1);      } else       if (keyStrLC.equals("<f2>")) {        k=new KeyStroke(KeyType.F2);      } else       if (keyStrLC.equals("<f3>")) {        k=new KeyStroke(KeyType.F3);      } else       if (keyStrLC.equals("<f4>")) {        k=new KeyStroke(KeyType.F4);      } else       if (keyStrLC.equals("<f5>")) {        k=new KeyStroke(KeyType.F5);      } else       if (keyStrLC.equals("<f6>")) {        k=new KeyStroke(KeyType.F6);      } else       if (keyStrLC.equals("<f7>")) {        k=new KeyStroke(KeyType.F7);      } else       if (keyStrLC.equals("<f8>")) {        k=new KeyStroke(KeyType.F8);      } else       if (keyStrLC.equals("<f9>")) {        k=new KeyStroke(KeyType.F9);      } else       if (keyStrLC.equals("<f10>")) {        k=new KeyStroke(KeyType.F10);      } else       if (keyStrLC.equals("<f11>")) {        k=new KeyStroke(KeyType.F11);      } else       if (keyStrLC.equals("<f12>")) {        k=new KeyStroke(KeyType.F12);      } else {        throw new IllegalArgumentException("Invalid vim notation: " + keyStr);      }    }  } else {    throw new IllegalArgumentException("Invalid vim notation: " + keyStr);  }  return k;}  }
class C{  public org.oscm.example.client.EventServiceStub.RecordEventForInstanceResponseE recordEventForInstance(org.oscm.example.client.EventServiceStub.RecordEventForInstanceE recordEventForInstance2) throws java.rmi.RemoteException, org.oscm.example.client.DuplicateEventExceptionException, org.oscm.example.client.ObjectNotFoundExceptionException, org.oscm.example.client.OrganizationAuthoritiesExceptionException, org.oscm.example.client.ValidationExceptionException {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[1].getName());    _operationClient.getOptions().setAction("http://oscm.org/EventService/recordEventForInstanceRequest");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),recordEventForInstance2,optimizeContent(new javax.xml.namespace.QName("http://oscm.org","recordEventForInstance")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.oscm.example.client.EventServiceStub.RecordEventForInstanceResponseE.class,getEnvelopeNamespaces(_returnEnv));    return (org.oscm.example.client.EventServiceStub.RecordEventForInstanceResponseE)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof org.oscm.example.client.DuplicateEventExceptionException) {            throw (org.oscm.example.client.DuplicateEventExceptionException)ex;          }          if (ex instanceof org.oscm.example.client.ObjectNotFoundExceptionException) {            throw (org.oscm.example.client.ObjectNotFoundExceptionException)ex;          }          if (ex instanceof org.oscm.example.client.OrganizationAuthoritiesExceptionException) {            throw (org.oscm.example.client.OrganizationAuthoritiesExceptionException)ex;          }          if (ex instanceof org.oscm.example.client.ValidationExceptionException) {            throw (org.oscm.example.client.ValidationExceptionException)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public void alertOngoing(AlertingState alertingState,double violationValue){  if (log.isDebugEnabled()) {    log.debug("Alert definition '{}' is ongoing.",alertingState.getAlertingDefinition().getName());  }  if (alertingState.getAlertingDefinition().getThresholdType() == ThresholdType.UPPER_THRESHOLD) {    alertingState.setExtremeValue(Math.max(violationValue,alertingState.getExtremeValue()));  } else {    alertingState.setExtremeValue(Math.min(violationValue,alertingState.getExtremeValue()));  }  for (  IAlertAction alertAction : alertActions) {    alertAction.onOngoing(alertingState);  }}  }
class C{  public void write16bit(int offset,int value){  write(offset,value >> 8);  write(offset + 1,value);}  }
class C{  protected int define(boolean textFont,Movie movie,SWFTagTypes tagwriter) throws IOException {  Integer integerId=textFont ? (Integer)movie.definedSymbols.get(font1Key) : (Integer)movie.definedSymbols.get(font2Key);  if (integerId == null) {    if (textFont) {      integerId=new Integer(defineFont1(movie,tagwriter));      movie.definedSymbols.put(font1Key,integerId);    } else {      integerId=new Integer(defineFont2(movie,tagwriter));      movie.definedSymbols.put(font2Key,integerId);    }  }  id=integerId.intValue();  return id;}  }
class C{  public static void addBuildInEngines(SQLiteDatabase db){  for (int i=0; i < (BuildConfig.hideOtherEngine ? 1 : 6); i++) {    CustomEngineParcelable parcelable=new CustomEngineParcelable();    parcelable.data.id=i;    parcelable.data.enabled=1;    parcelable.data.name=BUILD_IN_ENGINE_NAME[i];    parcelable.data.upload_url=BUILD_IN_ENGINE_URL[i];    parcelable.data.post_file_key=BUILD_IN_ENGINE_FILE_KEY[i];    parcelable.data.result_open_action=BUILD_IN_ENGINE_OPEN_ACTION[i];switch (i) {case SITE_IQDB:      parcelable.data.post_text_key.add("service");    parcelable.data.post_text_value.add("");  parcelable.data.post_text_type.add(-1);parcelable.data.post_text_key.add("forcegray");parcelable.data.post_text_value.add("");parcelable.data.post_text_type.add(-1);break;case SITE_SAUCENAO:parcelable.data.post_text_key.add("hide");parcelable.data.post_text_value.add("");parcelable.data.post_text_type.add(-1);parcelable.data.post_text_key.add("database");parcelable.data.post_text_value.add("");parcelable.data.post_text_type.add(-1);break;}addEngineToDb(db,parcelable,i);}}  }
class C{  @Override public void createTabs(ILaunchConfigurationDialog dialog,String mode){  ILaunchConfigurationTab[] tabs=new ILaunchConfigurationTab[]{new JavaMainTab(),new JavaArgumentsTab(),new JavaJRETab(),new JavaClasspathTab(),new EnvironmentTab(),new CommonTab()};  setTabs(tabs);}  }
class C{  public Crop output(Uri output){  cropIntent.putExtra(MediaStore.EXTRA_OUTPUT,output);  return this;}  }
class C{  void outputEntityDecl(String name,String value) throws IOException {  final java.io.Writer writer=m_writer;  writer.write("<!ENTITY ");  writer.write(name);  writer.write(" \"");  writer.write(value);  writer.write("\">");  writer.write(m_lineSep,0,m_lineSepLen);}  }
class C{  public ScriptingEventListener(String attr){  attribute=attr;}  }
class C{  private boolean findAndRemove(Object e){  if (e != null) {    for (Node pred=null, p=head; p != null; ) {      Object item=p.item;      if (p.isData) {        if (item != null && item != p && e.equals(item) && p.tryMatchData()) {          unsplice(pred,p);          return true;        }      } else       if (item == null)       break;      pred=p;      if ((p=p.next) == pred) {        pred=null;        p=head;      }    }  }  return false;}  }
class C{  private static boolean isProductInventoryAvailableByFacility(String productId,String inventoryFacilityId,BigDecimal quantity,LocalDispatcher dispatcher){  BigDecimal availableToPromise=null;  try {    Map<String,Object> result=dispatcher.runSync("getInventoryAvailableByFacility",UtilMisc.toMap("productId",productId,"facilityId",inventoryFacilityId));    availableToPromise=(BigDecimal)result.get("availableToPromiseTotal");    if (availableToPromise == null) {      Debug.logWarning("The getInventoryAvailableByFacility service returned a null availableToPromise, the error message was:\n" + result.get(ModelService.ERROR_MESSAGE),module);      return false;    }  } catch (  GenericServiceException e) {    Debug.logWarning(e,"Error invoking getInventoryAvailableByFacility service in isCatalogInventoryAvailable",module);    return false;  }  if (availableToPromise.compareTo(quantity) >= 0) {    if (Debug.infoOn())     Debug.logInfo("Inventory IS available in facility with id " + inventoryFacilityId + " for product id "+ productId+ "; desired quantity is "+ quantity+ ", available quantity is "+ availableToPromise,module);    return true;  } else {    if (Debug.infoOn())     Debug.logInfo("Returning false because there is insufficient inventory available in facility with id " + inventoryFacilityId + " for product id "+ productId+ "; desired quantity is "+ quantity+ ", available quantity is "+ availableToPromise,module);    return false;  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public GenericProxyFactory providerName(String providerName){  this.providerName=providerName;  return this;}  }
class C{  protected int readBlock(){  blockSize=read();  int n=0;  if (blockSize > 0) {    try {      int count=0;      while (n < blockSize) {        count=in.read(block,n,blockSize - n);        if (count == -1)         break;        n+=count;      }    } catch (    IOException e) {    }    if (n < blockSize) {      status=STATUS_FORMAT_ERROR;    }  }  return n;}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_t == null) {    return "Gaussian Processes: No model built yet.";  }  try {    text.append("Gaussian Processes\n\n");    text.append("Kernel used:\n  " + m_kernel.toString() + "\n\n");    text.append("All values shown based on: " + TAGS_FILTER[m_filterType].getReadable() + "\n\n");    text.append("Average Target Value : " + m_avg_target + "\n");    text.append("Inverted Covariance Matrix:\n");    double min=-m_L[0][0];    double max=-m_L[0][0];    for (int i=0; i < m_NumTrain; i++) {      for (int j=0; j <= i; j++) {        if (-m_L[i][j] < min) {          min=-m_L[i][j];        } else         if (-m_L[i][j] > max) {          max=-m_L[i][j];        }      }    }    text.append("    Lowest Value = " + min + "\n");    text.append("    Highest Value = " + max + "\n");    text.append("Inverted Covariance Matrix * Target-value Vector:\n");    min=m_t.get(0,0);    max=m_t.get(0,0);    for (int i=0; i < m_NumTrain; i++) {      if (m_t.get(i,0) < min) {        min=m_t.get(i,0);      } else       if (m_t.get(i,0) > max) {        max=m_t.get(i,0);      }    }    text.append("    Lowest Value = " + min + "\n");    text.append("    Highest Value = " + max + "\n \n");  } catch (  Exception e) {    return "Can't print the classifier.";  }  return text.toString();}  }
class C{  private void interrupted(Context cx,final StackFrame frame,Throwable scriptException){  ContextData contextData=frame.contextData();  boolean eventThreadFlag=callback.isGuiEventThread();  contextData.eventThreadFlag=eventThreadFlag;  boolean recursiveEventThreadCall=false;  interruptedCheck: synchronized (eventThreadMonitor) {    if (eventThreadFlag) {      if (interruptedContextData != null) {        recursiveEventThreadCall=true;        break interruptedCheck;      }    } else {      while (interruptedContextData != null) {        try {          eventThreadMonitor.wait();        } catch (        InterruptedException exc) {          return;        }      }    }    interruptedContextData=contextData;  }  if (recursiveEventThreadCall) {    if (false) {      while (this.returnValue == -1) {        try {          callback.dispatchNextGuiEvent();        } catch (        InterruptedException exc) {        }      }    }    return;  }  if (interruptedContextData == null)   Kit.codeBug();  try {    do {      int frameCount=contextData.frameCount();      this.frameIndex=frameCount - 1;      final String threadTitle=Thread.currentThread().toString();      final String alertMessage;      if (scriptException == null) {        alertMessage=null;      } else {        alertMessage=scriptException.toString();      }      int returnValue=-1;      if (!eventThreadFlag) {synchronized (monitor) {          if (insideInterruptLoop)           Kit.codeBug();          this.insideInterruptLoop=true;          this.evalRequest=null;          this.returnValue=-1;          callback.enterInterrupt(frame,threadTitle,alertMessage);          try {            for (; ; ) {              try {                monitor.wait();              } catch (              InterruptedException exc) {                Thread.currentThread().interrupt();                break;              }              if (evalRequest != null) {                this.evalResult=null;                try {                  evalResult=do_eval(cx,evalFrame,evalRequest);                }  finally {                  evalRequest=null;                  evalFrame=null;                  monitor.notify();                }                continue;              }              if (this.returnValue != -1) {                returnValue=this.returnValue;                break;              }            }          }  finally {            insideInterruptLoop=false;          }        }      } else {        this.returnValue=-1;        callback.enterInterrupt(frame,threadTitle,alertMessage);        while (this.returnValue == -1) {          try {            callback.dispatchNextGuiEvent();          } catch (          InterruptedException exc) {          }        }        returnValue=this.returnValue;      }switch (returnValue) {case STEP_OVER:        contextData.breakNextLine=true;      contextData.stopAtFrameDepth=contextData.frameCount();    break;case STEP_INTO:  contextData.breakNextLine=true;contextData.stopAtFrameDepth=-1;break;case STEP_OUT:if (contextData.frameCount() > 1) {contextData.breakNextLine=true;contextData.stopAtFrameDepth=contextData.frameCount() - 1;}break;}} while (false);}  finally {synchronized (eventThreadMonitor) {interruptedContextData=null;eventThreadMonitor.notifyAll();}}}  }
class C{  void close(boolean force){  logger.log(Level.FINE,debugName + " close (" + force+ ")");  m_shutdown=force ? EnShutdown.SD_FORCEFUL : EnShutdown.SD_GRACEFUL;  if (force) {    m_state=PseudoTcpState.TCP_CLOSED;  }}  }
class C{  public void downloadFile() throws IOException, FileNotDownloadedException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("Download file " + getHttpServerAddr());  }  if (mFileDownloadStream == null) {    mFileDownloadStream=openStreamForFile(mFile);  }  if (isHttpTraceEnabled()) {    System.out.println(">>> Send HTTP request:\nGET " + getHttpServerAddr());  }  try {    writeHttpContentToFile(new URL(getHttpServerAddr().toString()),new HashMap<String,String>());  } catch (  SSLHandshakeException e) {    throw e;  }catch (  IOException e) {    if (!isPaused() && !isCancelled()) {      pauseTransferBySystem();    }    throw e;  }catch (  FileNotDownloadedException e) {    if (mRetryCount < RETRY_MAX && !isCancelled() && !isPaused()) {      mRetryCount++;      downloadFile();    } else {      throw e;    }  }}  }
class C{  private void initWidget(){  this.widgetCard=(ImageView)findViewById(R.id.widget_clock_day_center_card);  widgetCard.setVisibility(View.GONE);  this.widgetIcon=(ImageView)findViewById(R.id.widget_clock_day_center_icon);  this.widgetClock=(TextClock)findViewById(R.id.widget_clock_day_center_clock);  this.widgetWeather=(TextView)findViewById(R.id.widget_clock_day_center_weather);  this.widgetTemp=(TextView)findViewById(R.id.widget_clock_day_center_temp);  this.widgetRefreshTime=(TextView)findViewById(R.id.widget_clock_day_center_refreshTime);  ImageView wallpaper=(ImageView)findViewById(R.id.activity_create_widget_clock_day_center_wall);  wallpaper.setImageDrawable(WallpaperManager.getInstance(this).getDrawable());  this.container=(CoordinatorLayout)findViewById(R.id.activity_create_widget_clock_day_center_container);  ArrayAdapter<String> adapter=new ArrayAdapter<>(this,R.layout.spinner_text,nameList);  adapter.setDropDownViewResource(R.layout.spinner_text);  Spinner locationSpinner=(Spinner)findViewById(R.id.activity_create_widget_clock_day_center_spinner);  locationSpinner.setAdapter(adapter);  locationSpinner.setOnItemSelectedListener(this);  this.showCardSwitch=(Switch)findViewById(R.id.activity_create_widget_clock_day_center_showCardSwitch);  showCardSwitch.setOnCheckedChangeListener(new ShowCardSwitchCheckListener());  this.hideRefreshTimeSwitch=(Switch)findViewById(R.id.activity_create_widget_clock_day_center_hideRefreshTimeSwitch);  hideRefreshTimeSwitch.setOnCheckedChangeListener(new HideRefreshTimeSwitchCheckListener());  this.blackTextSwitch=(Switch)findViewById(R.id.activity_create_widget_clock_day_center_blackTextSwitch);  blackTextSwitch.setOnCheckedChangeListener(new BlackTextSwitchCheckListener());  Button doneButton=(Button)findViewById(R.id.activity_create_widget_clock_day_center_doneButton);  doneButton.setOnClickListener(this);}  }
class C{  public void initialize() throws IOException {  getIndexData().initialize();}  }
class C{  private void drawShadows(Canvas canvas){  topShadow.setBounds(0,0,getWidth(),getHeight() / visibleItems);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - getHeight() / visibleItems,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  public ExecutionTargetException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  protected void startDisconnected(){}  }
class C{  public Range(final double start,final double end){  lower=start;  upper=end;}  }
class C{  public static void startActivity(Context context,String messageId){  Intent intent=new Intent(context,GroupDeliveryInfoList.class);  intent.putExtra(EXTRA_MESSAGE_ID,messageId);  context.startActivity(intent);}  }
class C{  @Override public synchronized boolean startAll(){  HashMap<Integer,ConfEvent> events=status.getEventsMap();  if (events == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " Events map null");    }    return false;  }  if (instances == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " Running Events map null");    }    return false;  }  final Iterator<Map.Entry<Integer,ConfEvent>> it=events.entrySet().iterator();  while (it.hasNext()) {    final Map.Entry<Integer,ConfEvent> pairs=it.next();    int key=pairs.getKey();    start(key);  }  return true;}  }
class C{  public TechnicalServiceOperationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public BitemporalCondition ttFrom(Object ttFrom){  this.ttFrom=ttFrom;  return this;}  }
class C{  public long endTime(){  return endTime;}  }
class C{  ZoneInfoOld(String ID,int rawOffset,int dstSavings,int checksum,long[] transitions,int[] offsets,int[] simpleTimeZoneParams,boolean willGMTOffsetChange){  setID(ID);  this.rawOffset=rawOffset;  this.dstSavings=dstSavings;  this.checksum=checksum;  this.transitions=transitions;  this.offsets=offsets;  this.simpleTimeZoneParams=simpleTimeZoneParams;  this.willGMTOffsetChange=willGMTOffsetChange;}  }
class C{  public SearchSourceBuilder query(byte[] queryBinary){  return query(queryBinary,0,queryBinary.length);}  }
class C{  public Pong(Ping ping){  setType(IQ.Type.RESULT);  setFrom(ping.getTo());  setTo(ping.getFrom());  setPacketID(ping.getPacketID());}  }
class C{  private boolean dynInit(String title){  if (AD_Table_ID != 0) {    MTable table1=MTable.get(Env.getCtx(),AD_Table_ID);    setTitle(title + " - " + table1.getName());  }  if (!MRole.PREFERENCETYPE_Client.equals(MRole.getDefault().getPreferenceType()))   return false;  if (Record_ID == 0)   return false;  String sql="SELECT AD_Column_ID, Updated, UpdatedBy, OldValue, NewValue " + "FROM AD_ChangeLog " + "WHERE AD_Table_ID=? AND Record_ID=? AND AD_Column_ID=?"+ "ORDER BY Updated DESC";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    pstmt.setInt(2,Record_ID);    pstmt.setInt(3,AD_Column_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      addLine(rs.getInt(1),rs.getTimestamp(2),rs.getInt(3),rs.getString(4),rs.getString(5));    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);  }  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),"NewValue"));  columnNames.add(Msg.translate(Env.getCtx(),"OldValue"));  columnNames.add(Msg.translate(Env.getCtx(),"UpdatedBy"));  columnNames.add(Msg.translate(Env.getCtx(),"Updated"));  DefaultTableModel model=new DefaultTableModel(m_data,columnNames);  table.setModel(model);  table.autoSize(false);  return true;}  }
class C{  @Override public boolean isDefinitelyWritable(int columnIndex){  return false;}  }
class C{  public SendableAudioMessage.SendableAudioMessageBuilder disableNotification(boolean disableNotification){  this.disableNotification=disableNotification;  return this;}  }
class C{  public void addStatsError(boolean moreResultAvailable){  this.affectedRows.add(Statement.EXECUTE_FAILED);  this.insertId.add(null);  setMoreResultAvailable(moreResultAvailable);}  }
class C{  public List<String> bottom(int n){  List<String> bottom=new ArrayList<>();  CategoryColumn copy=this.copy();  copy.sortAscending();  for (int i=0; i < n; i++) {    bottom.add(copy.get(i));  }  return bottom;}  }
class C{  public void mark(int readLimit){  markOffset=offset;  bufferedInput.mark(readLimit);}  }
class C{  public static Object decodeToObject(String encodedObject){  byte[] objBytes=decode(encodedObject);  java.io.ByteArrayInputStream bais=null;  java.io.ObjectInputStream ois=null;  Object obj=null;  try {    bais=new java.io.ByteArrayInputStream(objBytes);    ois=new java.io.ObjectInputStream(bais);    obj=ois.readObject();  } catch (  java.io.IOException e) {    e.printStackTrace();    obj=null;  }catch (  java.lang.ClassNotFoundException e) {    e.printStackTrace();    obj=null;  } finally {    try {      bais.close();    } catch (    Exception e) {    }    try {      ois.close();    } catch (    Exception e) {    }  }  return obj;}  }
class C{  public boolean isCustom(){  return fId == null || fIsDeleted || fOriginalIsEnabled != fCustomIsEnabled || !fOriginalTemplate.equals(fCustomTemplate);}  }
class C{  public static void main(String[] args) throws IOException {  byte[] b1=FileUtils.readFileToByteArray(new File("/Users/sheetal/Downloads/constructedTcpDump.1.pcap"));  byte[] b2=FileUtils.readFileToByteArray(new File("/Users/sheetal/Downloads/constructedTcpDump.2.pcap"));  byte[] b3=FileUtils.readFileToByteArray(new File("/Users/sheetal/Downloads/constructedTcpDump.3.pcap"));  ByteArrayOutputStream boas=new ByteArrayOutputStream();  PcapMerger.merge(boas,b1,b2,b3);  FileUtils.writeByteArrayToFile(new File("/Users/sheetal/Downloads/constructedTcpDump.automerged.1.2.pcap"),boas.toByteArray(),false);}  }
class C{  public boolean retainAll(Collection<?> c){  return al.retainAll(c);}  }
class C{  public static XORManager populateXORManager(WakeableLooper looper,TopologyAPI.Topology topology,int nBuckets,Map<String,List<Integer>> componentToTaskIds){  List<Integer> allSpoutTasks=new LinkedList<>();  for (  TopologyAPI.Spout spout : topology.getSpoutsList()) {    for (    TopologyAPI.OutputStream outputStream : spout.getOutputsList()) {      List<Integer> spoutTaskIds=componentToTaskIds.get(outputStream.getStream().getComponentName());      allSpoutTasks.addAll(spoutTaskIds);    }  }  return new XORManager(looper,PhysicalPlanUtil.extractTopologyTimeout(topology),allSpoutTasks,nBuckets);}  }
class C{  public static float calculateAspectRatio(Rect rect){  final float aspectRatio=(float)rect.width() / (float)rect.height();  return aspectRatio;}  }
class C{  public void configureManagers(){  setPowerManager(new jmri.jmrix.jmriclient.JMRIClientPowerManager(this));  jmri.InstanceManager.store(getPowerManager(),jmri.PowerManager.class);  setTurnoutManager(new jmri.jmrix.jmriclient.JMRIClientTurnoutManager(this));  jmri.InstanceManager.setTurnoutManager(getTurnoutManager());  setSensorManager(new jmri.jmrix.jmriclient.JMRIClientSensorManager(this));  jmri.InstanceManager.setSensorManager(getSensorManager());  setLightManager(new jmri.jmrix.jmriclient.JMRIClientLightManager(this));  jmri.InstanceManager.setLightManager(getLightManager());  setReporterManager(new jmri.jmrix.jmriclient.JMRIClientReporterManager(this));  jmri.InstanceManager.setReporterManager(getReporterManager());}  }
class C{  protected void drawDaySeparators(Canvas canvas){  if (mHasSelectedDay) {    r.top=1;    r.bottom=mHeight - 1;    r.left=mSelectedLeft + 1;    r.right=mSelectedRight - 1;    p.setStrokeWidth(MINI_TODAY_OUTLINE_WIDTH);    p.setStyle(Style.STROKE);    p.setColor(mTodayOutlineColor);    canvas.drawRect(r,p);  }}  }
class C{  public void add(VostroItem dataItem,boolean notify){  if (!this.isEmpty()) {    VostroItem item0=(VostroItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  private void printRecoveryWorkAround(Exception e){  if (e.getMessage().startsWith("A node required to move the data consistently is down (")) {    String sourceIp=e.getMessage().split("\\(")[1].split("\\)")[0];    _log.error("{} of node {} is unavailable during node recovery, please double check the node status.",isGeoDbsvc() ? "geodbsvc" : "dbsvc",sourceIp);    _log.error("Node recovery will fail in 30 minutes if {} not back to normal state.",sourceIp);  }}  }
class C{  public static void scrollRelatively(@NotNull Editor editor,int lineShift,int columnShift,boolean moveCaret){  if (lineShift != 0) {    editor.getScrollingModel().scrollVertically(editor.getScrollingModel().getVerticalScrollOffset() + lineShift * editor.getLineHeight());  }  if (columnShift != 0) {    editor.getScrollingModel().scrollHorizontally(editor.getScrollingModel().getHorizontalScrollOffset() + columnShift * EditorUtil.getSpaceWidth(Font.PLAIN,editor));  }  if (!moveCaret) {    return;  }  Rectangle viewRectangle=editor.getScrollingModel().getVisibleArea();  int lineNumber=editor.getCaretModel().getVisualPosition().line;  VisualPosition startPos=editor.xyToVisualPosition(new Point(0,viewRectangle.y));  int start=startPos.line + 1;  VisualPosition endPos=editor.xyToVisualPosition(new Point(0,viewRectangle.y + viewRectangle.height));  int end=endPos.line - 2;  if (lineNumber < start) {    editor.getCaretModel().moveCaretRelatively(0,start - lineNumber,false,false,true);  } else   if (lineNumber > end) {    editor.getCaretModel().moveCaretRelatively(0,end - lineNumber,false,false,true);  }}  }
class C{  public DViewAsn1Dump(JDialog parent,X509Ext extension) throws Asn1Exception, IOException {  super(res.getString("DViewAsn1Dump.Extension.Title"));  this.extension=extension;  initComponents();}  }
class C{  @Override public int hashCode(){  int hash=37;  return hash;}  }
class C{  public ResizingArrayBag(){  a=(Item[])new Object[2];  n=0;}  }
class C{  public void testBug35115() throws Exception {  Connection testConnection=null;  ResultSetMetaData rsMetaData=null;  createTable("testBug35115","(year YEAR)");  this.stmt=this.conn.createStatement();  this.stmt.executeUpdate("INSERT INTO testBug35115 VALUES ('2002'), ('2013')");  testConnection=getConnectionWithProps("yearIsDateType=false");  this.stmt=testConnection.createStatement();  this.rs=this.stmt.executeQuery("SELECT * FROM testBug35115");  rsMetaData=this.rs.getMetaData();  assertTrue(this.rs.next());  assertEquals("YEAR columns should be treated as java.sql.Types.DATE",Types.DATE,rsMetaData.getColumnType(1));  assertEquals("YEAR columns should be identified as 'YEAR'","YEAR",rsMetaData.getColumnTypeName(1));  assertEquals("YEAR columns should be mapped to java.lang.Short",java.lang.Short.class.getName(),rsMetaData.getColumnClassName(1));  assertEquals("YEAR columns should be returned as java.lang.Short",java.lang.Short.class.getName(),this.rs.getObject(1).getClass().getName());  testConnection.close();  testConnection=getConnectionWithProps("yearIsDateType=true");  this.stmt=testConnection.createStatement();  this.rs=this.stmt.executeQuery("SELECT * FROM testBug35115");  rsMetaData=this.rs.getMetaData();  assertTrue(this.rs.next());  assertEquals("YEAR columns should be treated as java.sql.Types.DATE",Types.DATE,rsMetaData.getColumnType(1));  assertEquals("YEAR columns should be identified as 'YEAR'","YEAR",rsMetaData.getColumnTypeName(1));  assertEquals("YEAR columns should be mapped to java.sql.Date",java.sql.Date.class.getName(),rsMetaData.getColumnClassName(1));  assertEquals("YEAR columns should be returned as java.sql.Date",java.sql.Date.class.getName(),this.rs.getObject(1).getClass().getName());  testConnection.close();}  }
class C{  public DesiredCapabilities createCapabilities(final DriverConfig webDriverConfig){  DesiredCapabilities capability;  capability=new DesiredCapabilities();  capability.setBrowserName(DesiredCapabilities.firefox().getBrowserName());  FirefoxProfile profile=getFirefoxProfile(webDriverConfig);  configProfile(profile,webDriverConfig);  capability.setCapability(FirefoxDriver.PROFILE,profile);  if (webDriverConfig.isEnableJavascript()) {    capability.setJavascriptEnabled(true);  } else {    capability.setJavascriptEnabled(false);  }  capability.setCapability(CapabilityType.TAKES_SCREENSHOT,true);  capability.setCapability(CapabilityType.ACCEPT_SSL_CERTS,true);  if (webDriverConfig.getBrowserVersion() != null) {    capability.setVersion(webDriverConfig.getBrowserVersion());  }  if (webDriverConfig.getWebPlatform() != null) {    capability.setPlatform(webDriverConfig.getWebPlatform());  }  if (webDriverConfig.getProxyHost() != null) {    capability.setCapability(CapabilityType.PROXY,webDriverConfig.getProxy());  }  return capability;}  }
class C{  public static long[] parseDate(long val){  long[] dt=parseDateTime(val);  dt[HOUR_INDEX]=dt[MIN_INDEX]=dt[SEC_INDEX]=0;  return dt;}  }
class C{  private NodeImpl shallowCopy(short operation,Node node){switch (node.getNodeType()) {case Node.ATTRIBUTE_NODE:    AttrImpl attr=(AttrImpl)node;  AttrImpl attrCopy;if (attr.namespaceAware) {  attrCopy=createAttributeNS(attr.getNamespaceURI(),attr.getLocalName());  attrCopy.setPrefix(attr.getPrefix());} else {  attrCopy=createAttribute(attr.getName());}attrCopy.setNodeValue(attr.getValue());return attrCopy;case Node.CDATA_SECTION_NODE:return createCDATASection(((CharacterData)node).getData());case Node.COMMENT_NODE:return createComment(((Comment)node).getData());case Node.DOCUMENT_FRAGMENT_NODE:return createDocumentFragment();case Node.DOCUMENT_NODE:case Node.DOCUMENT_TYPE_NODE:throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Cannot copy node of type " + node.getNodeType());case Node.ELEMENT_NODE:ElementImpl element=(ElementImpl)node;ElementImpl elementCopy;if (element.namespaceAware) {elementCopy=createElementNS(element.getNamespaceURI(),element.getLocalName());elementCopy.setPrefix(element.getPrefix());} else {elementCopy=createElement(element.getTagName());}NamedNodeMap attributes=element.getAttributes();for (int i=0; i < attributes.getLength(); i++) {AttrImpl elementAttr=(AttrImpl)attributes.item(i);AttrImpl elementAttrCopy=(AttrImpl)shallowCopy(operation,elementAttr);notifyUserDataHandlers(operation,elementAttr,elementAttrCopy);if (elementAttr.namespaceAware) {elementCopy.setAttributeNodeNS(elementAttrCopy);} else {elementCopy.setAttributeNode(elementAttrCopy);}}return elementCopy;case Node.ENTITY_NODE:case Node.NOTATION_NODE:throw new UnsupportedOperationException();case Node.ENTITY_REFERENCE_NODE:return createEntityReference(node.getNodeName());case Node.PROCESSING_INSTRUCTION_NODE:ProcessingInstruction pi=(ProcessingInstruction)node;return createProcessingInstruction(pi.getTarget(),pi.getData());case Node.TEXT_NODE:return createTextNode(((Text)node).getData());default :throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Unsupported node type " + node.getNodeType());}}  }
class C{  public boolean removeWatchedAddresses(final List<Address> addresses){  List<Script> scripts=Lists.newArrayList();  for (  Address address : addresses) {    Script script=ScriptBuilder.createOutputScript(address);    scripts.add(script);  }  return removeWatchedScripts(scripts);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void resetTimeBounds(){  TimeBounds oldtb=new TimeBounds(startTime,endTime);  startTime=Long.MAX_VALUE;  endTime=Long.MIN_VALUE;  int activeTimeBoundsProviderCount=0;  List<TimeBoundsProvider> copy;synchronized (timeBoundsProviders) {    copy=new ArrayList<TimeBoundsProvider>(timeBoundsProviders);  }  for (Iterator<TimeBoundsProvider> it=copy.iterator(); it.hasNext(); ) {    TimeBoundsProvider tbp=it.next();    if (tbp.isActive()) {      activeTimeBoundsProviderCount++;      TimeBounds bounds=tbp.getTimeBounds();      if (bounds != null && !bounds.isUnset()) {        addTime(bounds.getStartTime());        addTime(bounds.getEndTime());        if (Debug.debugging("clock")) {          Debug.output("Clock.resetTimeBounds(" + tbp.getClass().getName() + ") adding "+ bounds);        }      }    } else {      if (Debug.debugging("clock")) {        Debug.output("Clock.resetTimeBounds(" + tbp.getClass().getName() + ") not active");      }    }  }  systemTime=startTime;  TimeBounds tb=new TimeBounds(startTime,endTime);  for (Iterator<TimeBoundsProvider> it=copy.iterator(); it.hasNext(); ) {    it.next().handleTimeBounds(tb);  }  long currentTime=time;  if (activeTimeBoundsProviderCount == 0) {    setTime(startTime);  } else   if (currentTime < startTime || currentTime == Long.MAX_VALUE) {    setTime(startTime);  } else   if (currentTime > endTime) {    setTime(endTime);  }  fireUpdateTimeBounds(new TimeBoundsEvent(this,tb,oldtb));  if (tb.isUnset()) {    fireUpdateTime(TimeEvent.NO_TIME);  }}  }
class C{  public UTMPoint(LatLonPoint llpoint,Ellipsoid ellip){  this();  LLtoUTM(llpoint,ellip,this);}  }
class C{  private static byte[] encode(double[] min,double[] max){  checkArgs(min,max);  byte[] b=new byte[BYTES * 2 * min.length];  verifyAndEncode(min,max,b);  return b;}  }
class C{  public PluginsService(Settings settings,Path pluginsDirectory,Collection<Class<? extends Plugin>> classpathPlugins){  super(settings);  List<Tuple<PluginInfo,Plugin>> tupleBuilder=new ArrayList<>();  for (  Class<? extends Plugin> pluginClass : classpathPlugins) {    Plugin plugin=loadPlugin(pluginClass,settings);    PluginInfo pluginInfo=new PluginInfo(plugin.name(),plugin.description(),false,"NA",true,pluginClass.getName(),false);    if (logger.isTraceEnabled()) {      logger.trace("plugin loaded from classpath [{}]",pluginInfo);    }    tupleBuilder.add(new Tuple<>(pluginInfo,plugin));  }  if (pluginsDirectory != null) {    try {      List<Bundle> bundles=getPluginBundles(pluginsDirectory);      tupleBuilder.addAll(loadBundles(bundles));    } catch (    IOException ex) {      throw new IllegalStateException("Unable to initialize plugins",ex);    }  }  plugins=Collections.unmodifiableList(tupleBuilder);  info=new PluginsInfo();  for (  Tuple<PluginInfo,Plugin> tuple : plugins) {    info.add(tuple.v1());  }  Map<String,Plugin> jvmPlugins=new HashMap<>();  List<String> sitePlugins=new ArrayList<>();  for (  Tuple<PluginInfo,Plugin> tuple : plugins) {    PluginInfo info=tuple.v1();    if (info.isJvm()) {      jvmPlugins.put(info.getName(),tuple.v2());    }    if (info.isSite()) {      sitePlugins.add(info.getName());    }  }  String[] mandatoryPlugins=settings.getAsArray("plugin.mandatory",null);  if (mandatoryPlugins != null) {    Set<String> missingPlugins=new HashSet<>();    for (    String mandatoryPlugin : mandatoryPlugins) {      if (!jvmPlugins.containsKey(mandatoryPlugin) && !sitePlugins.contains(mandatoryPlugin) && !missingPlugins.contains(mandatoryPlugin)) {        missingPlugins.add(mandatoryPlugin);      }    }    if (!missingPlugins.isEmpty()) {      throw new ElasticsearchException("Missing mandatory plugins [" + Strings.collectionToDelimitedString(missingPlugins,", ") + "]");    }  }  logger.info("loaded {}, sites {}",jvmPlugins.keySet(),sitePlugins);  Map<Plugin,List<OnModuleReference>> onModuleReferences=new HashMap<>();  for (  Plugin plugin : jvmPlugins.values()) {    List<OnModuleReference> list=new ArrayList<>();    for (    Method method : plugin.getClass().getMethods()) {      if (!method.getName().equals("onModule")) {        continue;      }      if (method.getParameterTypes().length == 0 || method.getParameterTypes().length > 1) {        logger.warn("Plugin: {} implementing onModule with no parameters or more than one parameter",plugin.name());        continue;      }      Class moduleClass=method.getParameterTypes()[0];      if (!Module.class.isAssignableFrom(moduleClass)) {        logger.warn("Plugin: {} implementing onModule by the type is not of Module type {}",plugin.name(),moduleClass);        continue;      }      list.add(new OnModuleReference(moduleClass,method));    }    if (!list.isEmpty()) {      onModuleReferences.put(plugin,list);    }  }  this.onModuleReferences=Collections.unmodifiableMap(onModuleReferences);}  }
class C{  public Predicate(final IVariableOrConstant<?>[] values,final String relationName,final long timestamp){  this(values,relationName,-1,false,null,null,ITx.READ_COMMITTED);}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder mimeType(String mimeType){  this.mime_type=mimeType;  return this;}  }
class C{  public double doubleValue(Object obj){  if (obj == null)   return 0.0;  if (obj instanceof Number)   return ((Number)(obj)).doubleValue();  if (obj instanceof Valuable)   return ((Valuable)(obj)).doubleValue();  return 1.0;}  }
class C{  @Override public MinguoDate date(Era era,int yearOfEra,int month,int dayOfMonth){  return date(prolepticYear(era,yearOfEra),month,dayOfMonth);}  }
class C{  private void writeData(JsonGenerator gen,Object data,TypedParams<IncludedFieldsParams> includedFields,IncludedRelationsParams includedRelations) throws IOException {  Class<?> dataClass=data.getClass();  String resourceType=resourceRegistry.getResourceType(dataClass);  gen.writeStringField(TYPE_FIELD_NAME,resourceType);  RegistryEntry entry=resourceRegistry.getEntry(dataClass);  ResourceInformation resourceInformation=entry.getResourceInformation();  try {    writeId(gen,data,resourceInformation.getIdField());  } catch (  IllegalAccessException|InvocationTargetException|NoSuchMethodException e) {    throw new JsonSerializationException("Error writing id field: " + resourceInformation.getIdField().getUnderlyingName());  }  Set<String> notAttributesFields=entry.getResourceInformation().getNotAttributeFields();  writeAttributes(gen,data,includedFields,notAttributesFields);  Set<ResourceField> relationshipFields=getRelationshipFields(resourceType,resourceInformation,includedFields);  writeRelationshipFields(gen,data,relationshipFields,includedRelations);  writeMetaField(gen,data,entry);  writeLinksField(gen,data,entry);}  }
class C{  public int readUShort(int index){  return 0xffff & (this.readUByte(index) << 8 | this.readUByte(index + 1));}  }
class C{  public void testIsUnderflow(){  assertTrue(CoderResult.UNDERFLOW.isUnderflow());  assertFalse(CoderResult.OVERFLOW.isUnderflow());  assertFalse(CoderResult.malformedForLength(1).isUnderflow());  assertFalse(CoderResult.unmappableForLength(1).isUnderflow());}  }
class C{  public boolean hasBatchStatus(){  return hasExtension(BatchStatus.class);}  }
class C{  public boolean isInterface(){  return this.isInterface;}  }
class C{  public static boolean oat2dexBoot(File bootOat){  return oat2dexBootCmdWay(bootOat);}  }
class C{  private GeoLocation geocode(final String text,final String[] tags,final int maxlength){  LinkedHashMap<Integer,String> mix=nomix(tags);  GeoMatch geolocTag=geomatch(mix,false);  mix=mix(split(text),maxlength);  GeoMatch geolocText=geomatch(mix,true);  if (geolocTag == null && geolocText == null)   return null;  if (geolocText == null)   return geolocTag.loc;  Integer geolocTextHash=geolocText == null ? null : normalize(geolocText.name).hashCode();  boolean geolocTextIsStopword=geolocTextHash == null ? true : this.stopwordHashes.contains(geolocTextHash);  if (geolocTag == null)   return geolocTextIsStopword ? null : geolocText.loc;  if (geolocText.equals(geolocTag))   return geolocTag.loc;  if (geolocText.name.equals(geolocTag.name))   return geolocText.loc;  if (normalize(geolocText.name).indexOf(' ') > 0) {    return geolocText.loc;  }  Integer geolocTagHash=geolocTag == null ? null : normalize(geolocTag.name).hashCode();  boolean geolocTagIsStopword=geolocTagHash == null ? true : this.stopwordHashes.contains(geolocTagHash);  if (geolocTagIsStopword && !geolocTextIsStopword)   return geolocText.loc;  if (!geolocTagIsStopword && geolocTextIsStopword)   return geolocTag.loc;  int pivotpopulation=100000;  if (geolocTag.loc.getPopulation() < pivotpopulation && geolocText.loc.getPopulation() < pivotpopulation)   return null;  int pivotlength=6;  if (geolocTag.name.length() > pivotlength && geolocText.name.length() < pivotlength)   return geolocTag.loc;  if (geolocText.name.length() > pivotlength && geolocText.loc.getPopulation() > geolocTag.loc.getPopulation() && geolocTag.name.length() < pivotlength)   return geolocText.loc;  return geolocTag.loc.getPopulation() >= geolocText.loc.getPopulation() || geolocTextIsStopword ? geolocTag.loc : geolocText.loc;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean hasPermission(Activity activity,String permission){  return ContextCompat.checkSelfPermission(activity,permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  public static Class<?> loadUserClass(String className){  if (allowedClassNames == null) {    String s=SysProperties.ALLOWED_CLASSES;    ArrayList<String> prefixes=New.arrayList();    boolean allowAll=false;    HashSet<String> classNames=New.hashSet();    for (    String p : StringUtils.arraySplit(s,',',true)) {      if (p.equals("*")) {        allowAll=true;      } else       if (p.endsWith("*")) {        prefixes.add(p.substring(0,p.length() - 1));      } else {        classNames.add(p);      }    }    allowedClassNamePrefixes=new String[prefixes.size()];    prefixes.toArray(allowedClassNamePrefixes);    allowAllClasses=allowAll;    allowedClassNames=classNames;  }  if (!allowAllClasses && !allowedClassNames.contains(className)) {    boolean allowed=false;    for (    String s : allowedClassNamePrefixes) {      if (className.startsWith(s)) {        allowed=true;      }    }    if (!allowed) {      throw DbException.get(ErrorCode.ACCESS_DENIED_TO_CLASS_1,className);    }  }  for (  Utils.ClassFactory classFactory : getUserClassFactories()) {    if (classFactory.match(className)) {      try {        Class<?> userClass=classFactory.loadClass(className);        if (!(userClass == null)) {          return userClass;        }      } catch (      Exception e) {        throw DbException.get(ErrorCode.CLASS_NOT_FOUND_1,e,className);      }    }  }  try {    return Class.forName(className);  } catch (  ClassNotFoundException e) {    try {      return Class.forName(className,true,Thread.currentThread().getContextClassLoader());    } catch (    Exception e2) {      throw DbException.get(ErrorCode.CLASS_NOT_FOUND_1,e,className);    }  }catch (  NoClassDefFoundError e) {    throw DbException.get(ErrorCode.CLASS_NOT_FOUND_1,e,className);  }catch (  Error e) {    throw DbException.get(ErrorCode.GENERAL_ERROR_1,e,className);  }}  }
class C{  @Override public final void curveTo(final float x,final float y,final float x2,final float y2,final float x3,final float y3){  shape_primitives.addElement(C);  shape_primitive_x.addElement(x);  shape_primitive_y.addElement(y);  shape_primitive_x2.addElement(x2);  shape_primitive_y2.addElement(y2);  shape_primitive_x3.addElement(x3);  shape_primitive_y3.addElement(y3);}  }
class C{  protected final void emitCode(){  int bytecodeSize=request.graph.method() == null ? 0 : request.graph.getBytecodeSize();  request.compilationResult.setHasUnsafeAccess(request.graph.hasUnsafeAccess());  GraalCompiler.emitCode(request.backend,request.graph.getAssumptions(),request.graph.method(),request.graph.getInlinedMethods(),bytecodeSize,lirGenRes,request.compilationResult,request.installedCodeOwner,request.factory);}  }
class C{  public AssetOptionsMethodInfo findAssetMethodInfo(String assetTypeName,Set<String> availableAssets){  if (!supportedAssetTypes.containsKey(assetTypeName)) {    throw new RuntimeException(String.format("No asset found with name: %s",assetTypeName));  }  int lastMatch=-1;  AssetOptionsMethodInfo foundMatch=null;  for (  AssetOptionsMethodInfo info : supportedAssetTypes.get(assetTypeName)) {    int matchingParentAssets=0;    for (    String parentAsset : availableAssets) {      if (info.assetDependencies.contains(parentAsset)) {        matchingParentAssets++;      }    }    if (info.assetDependencies.size() == matchingParentAssets) {      if (info.assetDependencies.size() > lastMatch) {        foundMatch=info;        lastMatch=info.assetDependencies.size();      }    }  }  if (foundMatch == null) {    final String errorMessage=String.format("Query for Asset '%s' requires additional asset dependencies. Supplied: %s",assetTypeName,availableAssets.toString());    log.warn(errorMessage);    throw new IllegalStateException(errorMessage);  }  return foundMatch;}  }
class C{  private static long dateValueFromCalendar(Calendar cal){  int year, month, day;  year=getYear(cal);  month=cal.get(Calendar.MONTH) + 1;  day=cal.get(Calendar.DAY_OF_MONTH);  return ((long)year << SHIFT_YEAR) | (month << SHIFT_MONTH) | day;}  }
class C{  public TeXParser(String parseString,TeXFormula formula,boolean firstpass){  this(false,parseString,formula,firstpass);}  }
class C{  public static void logAndShowError(Activity activity,String tag,String message){  String errorMessage=getErrorMessage(activity,message);  Log.e(tag,errorMessage);  showErrorInternal(activity,errorMessage);}  }
class C{  public boolean isClassSuperclassOfIncluding(SootClass parent,SootClass possibleChild){  parent.checkLevel(SootClass.HIERARCHY);  possibleChild.checkLevel(SootClass.HIERARCHY);  return getSubclassesOfIncluding(parent).contains(possibleChild);}  }
class C{  @Override public int hashCode(){  return id;}  }
class C{  protected SelectorList parseSelectorList(){  CSSSelectorList result=new CSSSelectorList();  result.append(parseSelector());  for (; ; ) {    if (current != LexicalUnits.COMMA) {      return result;    }    nextIgnoreSpaces();    result.append(parseSelector());  }}  }
class C{  private void createFirstVersion() throws IOException {  version=0;  writeVersionFile(false);}  }
class C{  private void updateViewVisibility(@NearbyConnectionState int newState){  mState=newState;switch (mState) {case STATE_IDLE:    findViewById(R.id.layout_nearby_buttons).setVisibility(View.GONE);  findViewById(R.id.layout_message).setVisibility(View.GONE);break;case STATE_READY:findViewById(R.id.layout_nearby_buttons).setVisibility(View.VISIBLE);findViewById(R.id.layout_message).setVisibility(View.GONE);break;case STATE_ADVERTISING:break;case STATE_DISCOVERING:break;case STATE_CONNECTED:findViewById(R.id.layout_nearby_buttons).setVisibility(View.VISIBLE);findViewById(R.id.layout_message).setVisibility(View.VISIBLE);break;}}  }
class C{  public void putImageStyle(PutImageStyleRequest putImageStyleRequest) throws OSSException, ClientException {  assertParameterNotNull(putImageStyleRequest,"putImageStyleRequest");  String bucketName=putImageStyleRequest.GetBucketName();  String styleName=putImageStyleRequest.GetStyleName();  assertParameterNotNull(styleName,"styleName");  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new HashMap<String,String>();  params.put(SUBRESOURCE_STYLE,null);  params.put(STYLE_NAME,styleName);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.PUT).setBucket(bucketName).setParameters(params).setOriginalRequest(putImageStyleRequest).setInputStreamWithLength(putImageStyleRequestMarshaller.marshall(putImageStyleRequest)).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:33.362 -0500",hash_original_method="415FA7137AA653EF40F66C5BED279EE7",hash_generated_method="8C9A165489888831002D2F518C304D06") public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24);  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24);  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (int)((startA + (int)(fraction * (endA - startA))) << 24) | (int)((startR + (int)(fraction * (endR - startR))) << 16) | (int)((startG + (int)(fraction * (endG - startG))) << 8)| (int)((startB + (int)(fraction * (endB - startB))));}  }
class C{  long nextCommandSequence(){  return commandSequence + 1;}  }
class C{  public void insertBefore(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=insn;  } else {    prev.next=insn;  }  location.prev=insn;  insn.next=location;  insn.prev=prev;  cache=null;  insn.index=0;}  }
class C{  public Object loadStepData(String stepOrWorkflowId){  return loadStepData(stepOrWorkflowId,null);}  }
class C{  public void removeFromSearchMatch(ScriptStep step){  searchMatch.remove(step);}  }
class C{  public static String removeQuotationMarksIfNeeded(String str){  if (str.startsWith("\"") && str.endsWith("\""))   return str.substring(1,str.length() - 1);  return str;}  }
class C{  private static double det(double m00,double m01,double m10,double m11){  return m00 * m11 - m01 * m10;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public static void check(boolean condition,int errorCode,String parameter) throws RuntimeException {  if (!condition) {    throw new RuntimeException(MP.getMessage(errorCode,parameter));  }}  }
class C{  public static int binarySearchFloor(long[] a,long key,boolean inclusive,boolean stayInBounds){  int index=Arrays.binarySearch(a,key);  index=index < 0 ? -(index + 2) : (inclusive ? index : (index - 1));  return stayInBounds ? Math.max(0,index) : index;}  }
class C{  protected void initView(Context context,@Nullable AttributeSet attrs){  inflateVideoView(context,attrs);  previewImageView=(ImageView)findViewById(R.id.exomedia_video_preview_image);  videoViewImpl=(VideoViewApi)findViewById(R.id.exomedia_video_view);  muxNotifier=new MuxNotifier();  listenerMux=new EMListenerMux(muxNotifier);  videoViewImpl.setListenerMux(listenerMux);}  }
class C{  public static KeyListener add(KeyListener a,KeyListener b){  return (KeyListener)addInternal(a,b);}  }
class C{  @Override public void doWork() throws OperatorException {  super.doWork();  runVectorOutput.deliver(runVector);}  }
class C{  public static <S>S fromSpec(String spec,final Class<S> type,final String[] packages,final String[] factoryMethod) throws IllegalArgumentException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {  return fromSpec(NO_CONTEXT,spec,type,packages,factoryMethod);}  }
class C{  void validateMirrorsOrNulls(Collection<? extends Mirror> mirrors){  Iterator<? extends Mirror> iter=mirrors.iterator();  while (iter.hasNext()) {    MirrorImpl mirror=(MirrorImpl)iter.next();    if ((mirror != null) && !vm.equals(mirror.vm)) {      throw new VMMismatchException(mirror.toString());    }  }}  }
class C{  public void paintPanelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean isPropertyChanged(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps,String property){  String oldValue=oldProps.getProperty(property);  String newValue=newProps.getProperty(property);  if (newValue == null) {    return false;  }  if (oldValue == null) {    Map<String,PropertyMetadata> metadata=PropertiesMetadata.getGlobalMetadata();    if (metadata == null) {      return false;    }    final PropertyMetadata propertyMetadata=metadata.get(property);    if (propertyMetadata != null) {      oldValue=propertyMetadata.getValue();    }  }  if (oldValue != null && oldValue.equals(newValue)) {    return false;  }  return true;}  }
class C{  protected void fireEventListeners(NodeEventTarget node,AbstractEvent e,EventListenerList.Entry[] listeners,HashSet stoppedGroups,HashSet toBeStoppedGroups){  if (listeners == null) {    return;  }  String eventNS=e.getNamespaceURI();  for (int i=0; i < listeners.length; i++) {    try {      String listenerNS=listeners[i].getNamespaceURI();      if (listenerNS != null && eventNS != null && !listenerNS.equals(eventNS)) {        continue;      }      Object group=listeners[i].getGroup();      if (stoppedGroups == null || !stoppedGroups.contains(group)) {        listeners[i].getListener().handleEvent(e);        if (e.getStopImmediatePropagation()) {          if (stoppedGroups != null) {            stoppedGroups.add(group);          }          e.stopImmediatePropagation(false);        } else         if (e.getStopPropagation()) {          if (toBeStoppedGroups != null) {            toBeStoppedGroups.add(group);          }          e.stopPropagation(false);        }      }    } catch (    ThreadDeath td) {      throw td;    }catch (    Throwable th) {      th.printStackTrace();    }  }}  }
class C{  public Not(Queryable<T> parent,QueryFactory queryFactory,JoinAlias joinAlias){  this.queryFactory=queryFactory;  this.parent=parent;  this.joinAlias=joinAlias;}  }
class C{  public static Element drawFrame(SVGPlot svgp,Projection2D proj,NumberVector min,NumberVector max){  SVGPath path=new SVGPath();  ArrayList<double[]> edges=getVisibleEdges(proj,min,max);  double[] rv_min=proj.fastProjectDataToRenderSpace(min);  recDrawEdges(path,rv_min[0],rv_min[1],edges,BitsUtil.zero(edges.size()));  return path.makeElement(svgp);}  }
class C{  public int[] calculateObjectLength(final int eof){  if (refTableInvalid) {    return null;  }  xref.addElement(eof);  final int[] xrefs=xref.get();  final int xrefCount=xrefs.length;  int[] xrefID=new int[xrefCount];  for (int i=0; i < xrefCount; i++) {    xrefID[i]=i;  }  xrefID=Sorts.quicksort(xrefs,xrefID);  final int objectCount=this.getCapacity();  int[] id=new int[objectCount];  final int[] offsets=new int[objectCount];  final int[] off=this.get();  final boolean[] isComp=isCompressed.get();  for (int i=0; i < objectCount; i++) {    if (!isComp[i]) {      offsets[i]=off[i];      id[i]=i;    }  }  id=Sorts.quicksort(offsets,id);  int i=0;  while (true) {    if (offsets[id[i]] != 0) {      break;    }    i++;  }  int start=offsets[id[i]], end;  int j=0;  while (xrefs[xrefID[j]] < start + 1) {    j++;  }  final int[] ObjLengthTable=new int[objectCount];  while (i < objectCount - 1) {    end=offsets[id[i + 1]];    if (end > eof) {      break;    }    int objLength=end - start - 1;    if (xrefs[xrefID[j]] < end) {      objLength=xrefs[xrefID[j]] - start - 1;      while (xrefs[xrefID[j]] < end + 1) {        j++;      }    }    ObjLengthTable[id[i]]=objLength;    start=end;    while (xrefs[xrefID[j]] < start + 1) {      j++;    }    i++;  }  ObjLengthTable[id[i]]=xrefs[xrefID[j]] - start - 1;  return ObjLengthTable;}  }
class C{  public void stopSubscriptionService(Operation unsubscribe,URI notificationTarget){  if (unsubscribe == null) {    throw new IllegalArgumentException("unsubscribe operation is required");  }  if (unsubscribe.getUri() == null) {    unsubscribe.fail(new IllegalArgumentException("unsubscribe URI is required"));    return;  }  if (!unsubscribe.getUri().getPath().endsWith(SERVICE_URI_SUFFIX_SUBSCRIPTIONS)) {    unsubscribe.setUri(UriUtils.extendUri(unsubscribe.getUri(),SERVICE_URI_SUFFIX_SUBSCRIPTIONS));  }  unsubscribe.setAction(Action.DELETE);  ServiceSubscriber unSubscribeBody=new ServiceSubscriber();  unSubscribeBody.reference=notificationTarget;  sendRequest(unsubscribe.setBody(unSubscribeBody).nestCompletion(null));  sendRequest(Operation.createDelete(notificationTarget).transferRefererFrom(unsubscribe).setCompletion(null));}  }
class C{  public static ByteBuffer writeStringData(ByteBuffer buff,String s,int len){  buff=DataUtils.ensureCapacity(buff,3 * len);  for (int i=0; i < len; i++) {    int c=s.charAt(i);    if (c < 0x80) {      buff.put((byte)c);    } else     if (c >= 0x800) {      buff.put((byte)(0xe0 | (c >> 12)));      buff.put((byte)(((c >> 6) & 0x3f)));      buff.put((byte)(c & 0x3f));    } else {      buff.put((byte)(0xc0 | (c >> 6)));      buff.put((byte)(c & 0x3f));    }  }  return buff;}  }
class C{  boolean needToCompleteHandshake(){  return handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_WRAP && !isInboundDone();}  }
class C{  private static Map<URI,Set<Initiator>> generateNetworkToInitiatorsMap(Map<Initiator,List<StoragePort>> existingAssignments){  Map<URI,Set<Initiator>> network2InitiatorsMap=new HashMap<URI,Set<Initiator>>();  if (existingAssignments == null) {    return network2InitiatorsMap;  }  for (  Initiator initiator : existingAssignments.keySet()) {    List<StoragePort> ports=existingAssignments.get(initiator);    if (ports == null || ports.isEmpty()) {      continue;    }    URI network=ports.get(0).getNetwork();    if (network2InitiatorsMap.get(network) == null) {      network2InitiatorsMap.put(network,new HashSet<Initiator>());    }    network2InitiatorsMap.get(network).add(initiator);  }  return network2InitiatorsMap;}  }
class C{  private void connect(){  CloudantClient cloudant=new CloudantClient(AppPropertiesReader.getStringProperty(Constants.CLOUDANT_ACCOUNT),AppPropertiesReader.getStringProperty(Constants.CLOUDANT_USERNAME),AppPropertiesReader.getStringProperty(Constants.CLOUDANT_PASSWORD));  db=cloudant.database(AppPropertiesReader.getStringProperty(Constants.CLOUDANT_DB_NAME),true);}  }
class C{  protected void checkSize(double[] B){  if (size != B.length)   throw new IllegalArgumentException("Incompatible sizes: " + toStringShort() + " and "+ B.length);}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector(2);  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  newVector.addElement(new Option("\tUse report file to output debug specific information of ARAM.\n","Rt",0,"-Rt"));  return newVector.elements();}  }
class C{  public boolean needsUpdateOnTyping(){  if (myNeedsUpdateOnTyping == null) {    return mySeverity != HighlightSeverity.INFORMATION;  }  return myNeedsUpdateOnTyping.booleanValue();}  }
class C{  public LocationMenuItem(String text){  super(text);  this.addActionListener(this);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new ArmenianAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public void releaseWithMutation(MutationBatch m) throws Exception {  releaseWithMutation(m,false);}  }
class C{  int findEndText(String source,int ofs){  for (int i=ofs; i < source.length(); i++) {    if (isAlpha(source.charAt(i)) == false && isNumeric(source.charAt(i)) == false) {      return i;    }  }  return -1;}  }
class C{  private void newDistribution(Instances data) throws Exception {  Instances[] localInstances;  localModel().resetDistribution(data);  m_train=data;  if (!m_isLeaf) {    localInstances=(Instances[])localModel().split(data);    for (int i=0; i < m_sons.length; i++)     son(i).newDistribution(localInstances[i]);  } else {    if (!Utils.eq(data.sumOfWeights(),0)) {      m_isEmpty=false;    }  }}  }
class C{  @Override protected final boolean failIfRegionMissing(){  return false;}  }
class C{  public void put(String handleId,Handle handle){  handles.put(handleId,handle);}  }
class C{  private boolean intersects(Ball ball,Ball nextBall){  return Math.sqrt(Math.pow(ball.getCenterX() - nextBall.getCenterX(),2) + Math.pow(ball.getCenterY() - nextBall.getCenterY(),2)) <= ball.getRadius() + nextBall.getRadius();}  }
class C{  default Object fromLiteral(final Literal l){  final URI datatype=l.getDatatype();  if (datatype == null) {    return l.getLabel();  } else   if (datatype.equals(XSD.FLOAT)) {    return l.floatValue();  } else   if (datatype.equals(XSD.DOUBLE)) {    return l.doubleValue();  } else   if (datatype.equals(XSD.INT)) {    return l.intValue();  } else   if (datatype.equals(XSD.LONG)) {    return l.longValue();  } else   if (datatype.equals(XSD.BOOLEAN)) {    return l.booleanValue();  } else   if (datatype.equals(XSD.SHORT)) {    return l.shortValue();  } else   if (datatype.equals(XSD.BYTE)) {    return l.byteValue();  } else {    return l.getLabel();  }}  }
class C{  private File copyFormat(int AD_PrintFormat_ID,int To_Client_ID,HttpServletRequest request,GridTab m_curTab,MQuery m_query){  WebSessionCtx wsc=WebSessionCtx.get(request);  MPrintFormat pf=MPrintFormat.copyToClient(wsc.ctx,AD_PrintFormat_ID,To_Client_ID);  File file=launchReport(pf,request,m_curTab,m_query);  return file;}  }
class C{  private boolean mapFont(final String s){  if (fontMappings.get(s) != null) {    fontID=s;    return true;  }  return false;}  }
class C{  public void unregisterBlob(IBlobHandler handler){  blobs.remove(handler);}  }
class C{  public Matrix33(Vector3 v1,Vector3 v2,Vector3 v3,boolean columnVectors){  if (columnVectors) {    this.xx=v1.x;    this.yx=v1.y;    this.zx=v1.z;    this.xy=v2.x;    this.yy=v2.y;    this.zy=v2.z;    this.xz=v3.x;    this.yz=v3.y;    this.zz=v3.z;  } else {    this.xx=v1.x;    this.xy=v1.y;    this.xz=v1.z;    this.yx=v2.x;    this.yy=v2.y;    this.yz=v2.z;    this.zx=v3.x;    this.zy=v3.y;    this.zz=v3.z;  }}  }
class C{  public ASTFlattener(){  this.fBuffer=new StringBuffer();}  }
class C{  public boolean equals(Object b){  if (!(b instanceof InvocationKey))   return false;  InvocationKey test=(InvocationKey)b;  if (_isSecure != test._isSecure)   return false;  if (_port != test._port)   return false;  int length=_uriLength;  if (length != test._uriLength)   return false;  byte[] uriA=_uri;  byte[] uriB=test._uri;  for (int i=length - 1; i >= 0; i--)   if (uriA[i] != uriB[i])   return false;  if (_host == null)   return test._host == null; else   return _host.equals(test._host);}  }
class C{  public static void closeOutputDirLogging(){  Logger root=Logger.getRootLogger();  Appender app=root.getAppender(LOGFILE);  root.removeAppender(app);  app.close();  app=root.getAppender(WARNLOGFILE);  root.removeAppender(app);  app.close();}  }
class C{  public static String[] split(String str){  return split(str,null,-1);}  }
class C{  public ExecutionError(@Nullable Error cause){  super(cause);}  }
class C{  public static AngleAnimator createRollAnimator(View view,Angle begin,Angle end){  if (begin == null || end == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  final long MIN_LENGTH_MILLIS=500;  final long MAX_LENGTH_MILLIS=3000;  long lengthMillis=AnimationSupport.getScaledTimeMillisecs(begin,end,Angle.POS180,MIN_LENGTH_MILLIS,MAX_LENGTH_MILLIS);  return new AngleAnimator(new ScheduledInterpolator(lengthMillis),begin,end,new ViewPropertyAccessor.RollAccessor(view));}  }
class C{  protected boolean[] multiInstanceHandler(){  boolean[] result=new boolean[2];  print("multi-instance scheme...");  if (getTestObject() instanceof MultiInstanceCapabilitiesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  protected ShadowOverlayHelper.Options createShadowOverlayOptions(){  return ShadowOverlayHelper.Options.DEFAULT;}  }
class C{  public void insertReverseSorted(final int idx,final double distance){  int i=0;  for (  ListNode temp : m_List) {    if (temp.distance < distance) {      break;    }    i++;  }  m_List.add(i,new ListNode(idx,distance));}  }
class C{  private void updateVolumeConsistencyGroup(){  log.info("Migrating Volume consistencyGroup to consistencyGroups.");  DbClient dbClient=getDbClient();  List<URI> volumeURIs=dbClient.queryByType(Volume.class,false);  Iterator<Volume> volumes=dbClient.queryIterativeObjects(Volume.class,volumeURIs);  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (volumes.hasNext()) {    blockObjects.add(volumes.next());  }  migrate(blockObjects);}  }
class C{  public ConstraintBody_ createConstraintBody_(){  ConstraintBody_Impl constraintBody_=new ConstraintBody_Impl();  return constraintBody_;}  }
class C{  public int autoAddParameters(DataSet data){  return autoAddParameters(data,10);}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  public void init() throws MessagingException {  passThrough=(getInitParameter("passThrough","true").compareToIgnoreCase("true") == 0);  String targetUrl=getInitParameter("url");  parameterKey=getInitParameter("parameterKey");  parameterValue=getInitParameter("parameterValue");  if (targetUrl == null || targetUrl.equals("")) {    throw new MessagingException("Please configure a targetUrl (\"url\")");  } else {    try {      url=new URL(targetUrl).toExternalForm();    } catch (    MalformedURLException e) {      throw new MessagingException("Unable to contruct URL object from url");    }  }  log("I will attempt to deliver serialised messages to " + targetUrl + ". "+ (((parameterKey == null) || (parameterKey.length() < 1)) ? "I will not add any fields to the post. " : "I will prepend: " + parameterKey + "="+ parameterValue+ ". ")+ (passThrough ? "Messages will pass through." : "Messages will be ghosted."));}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final PrecedingIterator clone=(PrecedingIterator)super.clone();    final int[] stackCopy=new int[_stack.length];    System.arraycopy(_stack,0,stackCopy,0,_stack.length);    clone._stack=stackCopy;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  public double distance(final double x,final double y){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public void removeLayoutComponent(Component comp){}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public void add(double value){  if (count == 0) {    count=1;    mean=value;    min=value;    max=value;    if (!isFinite(value)) {      sumOfSquaresOfDeltas=NaN;    }  } else {    count++;    if (isFinite(value) && isFinite(mean)) {      double delta=value - mean;      mean+=delta / count;      sumOfSquaresOfDeltas+=delta * (value - mean);    } else {      mean=calculateNewMeanNonFinite(mean,value);      sumOfSquaresOfDeltas=NaN;    }    min=Math.min(min,value);    max=Math.max(max,value);  }}  }
class C{  public void mousePressed(MouseEvent evt){  downx=evt.getX();  downy=evt.getY();}  }
class C{  private LDAPGuacamoleProperties(){}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public void initialScore(Text url,CrawlDatum datum) throws ScoringFilterException {  for (int i=0; i < this.filters.length; i++) {    this.filters[i].initialScore(url,datum);  }}  }
class C{  public CleanUpContext(CompilationUnit ast,Document document){  fAst=ast;  this.document=document;}  }
class C{  private void trimDatabase(){  LLog.i("in trimDatabase");  Cursor cursor=null;  try {    cursor=contentResolver.query(downloadsUriProvider.getAllDownloadsUri(),new String[]{DownloadContract.Downloads._ID},DownloadContract.Downloads.COLUMN_STATUS + " >= '200'",null,DownloadContract.Downloads.COLUMN_LAST_MODIFICATION);    if (cursor == null) {      LLog.e("null cursor in trimDatabase");      return;    }    if (cursor.moveToFirst()) {      int numDelete=cursor.getCount() - Constants.MAX_DOWNLOADS;      int columnId=cursor.getColumnIndexOrThrow(DownloadContract.Downloads._ID);      while (numDelete > 0) {        Uri downloadUri=ContentUris.withAppendedId(downloadsUriProvider.getAllDownloadsUri(),cursor.getLong(columnId));        contentResolver.delete(downloadUri,null,null);        if (!cursor.moveToNext()) {          break;        }        numDelete--;      }    }  } catch (  SQLiteException e) {    LLog.w("trimDatabase failed with exception: " + e.getMessage());    return;  } finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public static String repeat(String str,int count){  final StringBuilder result=new StringBuilder();  for (int i=0; i < count; i++) {    result.append(str);  }  return result.toString();}  }
class C{  public void generateCode(BlockScope currentScope,boolean valueRequired){  if (this.initializer != null) {    this.initializer.generateCode(currentScope,valueRequired);    return;  }  for (int i=0, max=this.dimensions.length; i < max; i++) {    Expression dimExpression;    if ((dimExpression=this.dimensions[i]) == null)     break;    dimExpression.generateCode(currentScope,true);  }}  }
class C{  public Token(int kind){  this(kind,null);}  }
