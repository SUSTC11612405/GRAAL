class C{  public static void sort(int[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public Set keySet(){  return map.keySet();}  }
class C{  public void deleteNotification(BigInteger alertId,BigInteger notificationId) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/notifications/"+ notificationId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.DELETE,requestUrl,null);  assertValidResponse(response,requestUrl);}  }
class C{  protected void sequence_TypeDefs(ISerializationContext context,TypeDefs semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public DocumentAdapter(IOpenable owner,IPath path,String content){  fOwner=owner;  fPath=path;  fDocument=new Document(content);  initialize();}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble());      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public boolean isOpen(){  if (m_mTable != null)   return m_mTable.isOpen();  return false;}  }
class C{  private int freeDeferrals(final AbstractJournal journal,final long fromTime,final long toTime){  final IIndex commitRecordIndex=journal.getReadOnlyCommitRecordIndex();  if (commitRecordIndex == null) {    return 0;  }  final IndexMetadata metadata=commitRecordIndex.getIndexMetadata();  final byte[] fromKey=metadata.getTupleSerializer().serializeKey(fromTime);  final byte[] toKey=metadata.getTupleSerializer().serializeKey(toTime);  final ITupleIterator<CommitRecordIndex.Entry> commitRecords=commitRecordIndex.rangeIterator(fromKey,toKey);  int totalFreed=0;  int commitPointsRecycled=0;  while (commitRecords.hasNext()) {    final ITuple<CommitRecordIndex.Entry> tuple=commitRecords.next();    final CommitRecordIndex.Entry entry=tuple.getObject();    try {      final ICommitRecord record=CommitRecordSerializer.INSTANCE.deserialize(journal.read(entry.addr));      final long blockAddr=record.getRootAddr(AbstractJournal.DELETEBLOCK);      if (blockAddr != 0) {        totalFreed+=freeDeferrals(blockAddr,record.getTimestamp());      }      commitPointsRecycled++;    } catch (    RuntimeException re) {      throw new RuntimeException("Problem with entry at " + entry.addr,re);    }  }  final int commitPointsRemoved=journal.removeCommitRecordEntries(fromKey,toKey);  if (txLog.isInfoEnabled())   txLog.info("fromTime=" + fromTime + ", toTime="+ toTime+ ", totalFreed="+ totalFreed+ ", commitPointsRecycled="+ commitPointsRecycled+ ", commitPointsRemoved="+ commitPointsRemoved);  if (commitPointsRecycled != commitPointsRemoved)   throw new AssertionError("commitPointsRecycled=" + commitPointsRecycled + " != commitPointsRemoved="+ commitPointsRemoved);  return totalFreed;}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  private int computePower(){  int acc=0;  for (  final EnumFacing facing : EnumFacing.VALUES) {    acc+=Math.max(0,Math.min(15,getWorld().getRedstonePower(getPos().offset(facing),facing)));  }  return acc;}  }
class C{  public XmlTextBuilder(int initialCapacity){  m_textBuf=new StringBuffer(initialCapacity);  m_auxBuf=new StringBuffer(AUX_CAPACITY);}  }
class C{  public void testDoublesCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.doubles(size).parallel().forEach(null);    assertEquals(size,counter.sum());    size+=524959;  }}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  super.onChangedRemoved(object,changes);  if (changes.has("text")) {    text="";  }}  }
class C{  void addCaseProofs(Vector<String[]> pfStepVec,Vector<NodeRepresentation> childVec,String[] assumpArray,String[] proofText,String[] assumpArrayAsFormula){  int newAssumpCount=assumpArray.length;  String[] newAssumpArrayAsFormula=assumpArrayAsFormula;  if (childVec.elementAt(0).nodeType == NodeRepresentation.NEW_NODE) {    newAssumpArrayAsFormula=null;  } else {    newAssumpArrayAsFormula=new String[0];  }  NodeRepresentation lastChildNode=childVec.elementAt(childVec.size() - 1);  int lenOfChildAssumps=childVec.size();  if (lastChildNode.nodeType == NodeRepresentation.OR_DECOMP) {    lenOfChildAssumps--;  }  for (int i=0; i < lenOfChildAssumps; i++) {    newAssumpCount=newAssumpCount + childVec.elementAt(i).primedNodeText().length;  }  String[] newAssumpArray=new String[newAssumpCount];  for (int i=0; i < assumpArray.length; i++) {    newAssumpArray[i]=assumpArray[i];  }  if (lenOfChildAssumps > 0) {    if (assumpArray.length > 0) {      newAssumpArray[assumpArray.length - 1]=newAssumpArray[assumpArray.length - 1] + ",";    }    int idx=assumpArray.length;    for (int i=0; i < lenOfChildAssumps; i++) {      String[] assump=childVec.elementAt(i).primedNodeText();      for (int j=0; j < assump.length; j++) {        newAssumpArray[idx]=assump[j];        idx++;      }      if (i != lenOfChildAssumps - 1) {        newAssumpArray[idx - 1]=newAssumpArray[idx - 1] + ",";      }    }  }  if (lastChildNode.nodeType == NodeRepresentation.OR_DECOMP) {    for (int i=0; i < lastChildNode.children.size(); i++) {      addCaseProofs(pfStepVec,lastChildNode.children.elementAt(i),newAssumpArray,proofText,newAssumpArrayAsFormula);    }  } else {    String[] step;    if ((assumpArrayAsFormula != null) && useCaseButton.getSelection() && (childVec.size() == 1)) {      if (assumpArrayAsFormula.length == 0) {        step=prependToStringArray(lastChildNode.primedNodeText(),"CASE ");      } else {        String[] aarrayAsForm=assumpArrayAsFormula.clone();        if (assumpArrayAsFormula.length == 1) {          aarrayAsForm[0]="/\\ " + aarrayAsForm[0];        }        step=prependToStringArray(concatStringArrays(aarrayAsForm,prependToStringArray(lastChildNode.primedNodeText(),"/\\ ")),"CASE ");      }    } else {      step=concatStringArrays(prependToStringArray(newAssumpArray,"ASSUME "),prependToStringArray(this.state.goalRep.primedNodeText(),"PROVE  "));    }    String stepNum=proofLevelString + (pfStepVec.size() + 1);    step=prependToStringArray(step,stepNum + STEP_NUMBER_PUNCTUATION + " ");    if (proofText != null) {      String[] newProofText=proofText.clone();      addStepNumToProof(stepNum,newProofText);      step=concatStringArrays(step,newProofText);    }    pfStepVec.add(step);  }}  }
class C{  private static int roundAway0(BigDecimal b1,BigDecimal b2){  int failures=0;  BigDecimal exactSum=b1.add(b2);  for (int precision=1; precision < exactSum.precision() + 2; precision++) {    for (    RoundingMode rm : nonExactRoundingModes) {      MathContext mc=new MathContext(precision,rm);      BigDecimal roundedExactSum=exactSum.round(mc);      try {        BigDecimal sum=b1.add(b2,mc);        if (!roundedExactSum.equals(sum)) {          failures++;          System.out.println("Exact sum " + exactSum + "\trounded by "+ mc+ "\texpected: "+ roundedExactSum+ " got: ");          printAddition(b1,b2,sum.toString());        }      } catch (      ArithmeticException ae) {        printAddition(b1,b2,"Exception!");        failures++;      }    }  }  return failures;}  }
class C{  private void createDatabase(){  SQLiteDatabase database=openOrCreateDatabase("contacts.db",Context.MODE_PRIVATE,null);  database.execSQL("CREATE TABLE IF NOT EXISTS Contact(first_name TEXT, last_name TEXT, phone TEXT PRIMARY KEY, email TEXT);");  database.close();}  }
class C{  public void writeTo(OutputStream outputStream) throws IOException {  outputStream.write(getBytes());}  }
class C{  public void updateEdgeMatcher(EdgeMatcher<String> edgeMatcher){  forwardMatchers.clear();  reverseMatchers.clear();  for (  Relation relation : content.getObjects()) {    if (edgeMatcher.relationForward(relation)) {      forwardMatchers.add(relation);    }    if (edgeMatcher.relationReverse(relation)) {      reverseMatchers.add(relation);    }    viewer.update(relation,BOTH_MATCHERS);  }}  }
class C{  public Resources(AssetManager assets,DisplayMetrics metrics,Configuration config){  this(assets,metrics,config,null);}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      System.out.println("Please specify a set of instances.");      return;    }    int currentA=Integer.parseInt(argv[0]);    int maxA=currentA;    int currentB=Integer.parseInt(argv[1]);    int maxB=currentB;    for (int i=2; i < argv.length - 1; i+=2) {      currentA=Integer.parseInt(argv[i]);      currentB=Integer.parseInt(argv[i + 1]);      if (currentA > maxA) {        maxA=currentA;      }      if (currentB > maxB) {        maxB=currentB;      }    }    NDConditionalEstimator newEst=new NDConditionalEstimator(maxB + 1,1);    for (int i=0; i < argv.length - 1; i+=2) {      currentA=Integer.parseInt(argv[i]);      currentB=Integer.parseInt(argv[i + 1]);      System.out.println(newEst);      System.out.println("Prediction for " + currentA + '|'+ currentB+ " = "+ newEst.getProbability(currentA,currentB));      newEst.addValue(currentA,currentB,1);    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public boolean hasSource(){  return getSource() != null;}  }
class C{  public static ExprNode[] validate(String viewName,EventType eventType,StatementContext statementContext,List<ExprNode> expressions,boolean allowConstantResult) throws ViewParameterException {  List<ExprNode> results=new ArrayList<ExprNode>();  int expressionNumber=0;  StreamTypeService streamTypeService=new StreamTypeServiceImpl(eventType,null,false,statementContext.getEngineURI());  for (  ExprNode expr : expressions) {    ExprNode validated=validateExpr(viewName,statementContext,expr,streamTypeService,expressionNumber);    results.add(validated);    if ((!allowConstantResult) && (validated.isConstantResult())) {      String message="Invalid view parameter expression " + expressionNumber + getViewDesc(viewName)+ ", the expression returns a constant result value, are you sure?";      log.error(message);      throw new ViewParameterException(message);    }    expressionNumber++;  }  return results.toArray(new ExprNode[results.size()]);}  }
class C{  public IntMap(){  this(256);}  }
class C{  private static float[] doubleToFloatArray(double[] doubles){  float[] floats=new float[doubles.length];  for (int i=0; i < doubles.length; i++) {    floats[i]=(float)doubles[i];  }  return floats;}  }
class C{  public synchronized boolean isSectionDefined(String section){  return sectionNames.containsKey(section);}  }
class C{  public void insert(String s,int pos){  if (pos < 0) {    throw new IllegalArgumentException("index less than zero.");  }  ensurePopupMenuCreated();  popupMenu.insert(new JMenuItem(s),pos);}  }
class C{  public SpeechConfiguration(){}  }
class C{  public static char[] encode(byte[] in,int iLen){  return encode(in,0,iLen);}  }
class C{  public Source<List<T>> ofSize(int size){  return ofSizeBetween(size,size);}  }
class C{  private static void blankOutline(final Image alphaChannelImage,final BufferedImage relief){  final Graphics2D gc=(Graphics2D)relief.getGraphics();  final Composite prevComposite=gc.getComposite();  gc.setComposite(AlphaComposite.getInstance(AlphaComposite.DST_IN));  final ImageIoCompletionWatcher watcher=new ImageIoCompletionWatcher();  final boolean drawComplete=gc.drawImage(alphaChannelImage,0,0,watcher);  if (!drawComplete) {    watcher.waitForCompletion();  }  gc.setComposite(prevComposite);}  }
class C{  public cudaExtent(){}  }
class C{  public Map<String,Set<String>> groupInitiatorsByProtocol(Set<String> iniStrList,DbClient dbClient){  Map<String,Set<String>> iniByProtocol=new HashMap<String,Set<String>>();  List<URI> iniList=new ArrayList<URI>(Collections2.transform(iniStrList,CommonTransformerFunctions.FCTN_STRING_TO_URI));  List<Initiator> initiators=dbClient.queryObject(Initiator.class,iniList);  for (  Initiator ini : initiators) {    if (null == ini.getProtocol()) {      _logger.warn("Initiator {} with protocol set to Null",ini.getId());      continue;    }    if (!iniByProtocol.containsKey(ini.getProtocol())) {      iniByProtocol.put(ini.getProtocol(),new HashSet<String>());    }    iniByProtocol.get(ini.getProtocol()).add(ini.getId().toString());  }  return iniByProtocol;}  }
class C{  public SingletonTask(ScheduledExecutorService ses,Runnable task){  super();  this.task=task;  this.ses=ses;}  }
class C{  protected ReferencedStateMachine_Impl(){  super();}  }
class C{  public Notification store(@Nonnull final String username,@Nonnull final Notification notification) throws NotificationStoreException {  Objects.requireNonNull(username);  Preconditions.checkArgument(!username.isEmpty(),"username cannot be empty");  Objects.requireNonNull(notification);  final Notification updatedNotification=Notification.builder(notification).withId(idGenerator.nextId()).withCreatedAt(now()).build();  final NotificationListAddition update=new NotificationListAddition(updatedNotification);  final Location location=new Location(NAMESPACE,username);  final UpdateValue updateValue=new UpdateValue.Builder(location).withUpdate(update).withStoreOption(StoreValue.Option.RETURN_BODY,false).build();  LOGGER.debug("Updating key: {}",location);  try (Timer.Context context=updateTimer.time()){    client.execute(updateValue);  } catch (  ExecutionException e) {    LOGGER.error("Unable to update key: " + location,e);    throw new NotificationStoreException(e);  }catch (  InterruptedException e) {    LOGGER.warn("Update request was interrupted",e);    Thread.currentThread().interrupt();    throw new NotificationStoreException(e);  }  return updatedNotification;}  }
class C{  final Node<V>[] helpTransfer(Node<V>[] tab,Node<V> f){  Node<V>[] nextTab;  int sc;  if (tab != null && (f instanceof ForwardingNode) && (nextTab=((ForwardingNode<V>)f).nextTable) != null) {    int rs=resizeStamp(tab.length);    while (nextTab == nextTable && table == tab && (sc=sizeCtl) < 0) {      if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || transferIndex <= 0)       break;      if (U.compareAndSwapInt(this,SIZECTL,sc,sc + 1)) {        transfer(tab,nextTab);        break;      }    }    return nextTab;  }  return table;}  }
class C{  private void readLandUseData() throws FileNotFoundException {  System.out.println("Reading land use data ...");  GeomGridField landuseGridField=new GeomGridField();  readData(landuseGridField,LAND_USE_DATA_FILE_NAME);  for (int y=0; y < landscape.getHeight(); y++) {    for (int x=0; x < landscape.getWidth(); x++) {      if (landscape.get(x,y) != null) {        Tile tile=(Tile)landscape.get(x,y);        tile.landuse=((IntGrid2D)landuseGridField.getGrid()).get(x,y);      }    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput cdi=getCapDevInput(stack);  return (cdi == null) ? new Integer(0) : new Integer(Math.min(100,Math.max(0,cdi.getSignalStrength())));}  }
class C{  private void cleanUpCloneObjects(CephClient cephClient,String poolId,String cloneVolumeId,String snapshotId,String sourceVolumeId,BlockSnapshot snapshot){  try {    if (cloneVolumeId != null) {      cephClient.deleteImage(poolId,cloneVolumeId);    }    if (snapshotId != null) {      List<String> children=cephClient.getChildren(poolId,sourceVolumeId,snapshotId);      if (children.isEmpty()) {        if (cephClient.snapIsProtected(poolId,sourceVolumeId,snapshotId)) {          cephClient.unprotectSnap(poolId,sourceVolumeId,snapshotId);        }        if (snapshot != null && snapshot.checkInternalFlags(Flag.INTERNAL_OBJECT)) {          cephClient.deleteSnap(poolId,sourceVolumeId,snapshotId);        }      }    }  } catch (  Exception e) {    _log.error(String.format("Could not clean up volumes %s, %s, interim snapshot %s from Ceph pool %s, " + "handling exception of a clone operation",cloneVolumeId,sourceVolumeId,snapshotId,poolId),e);  }  try {    if (snapshot != null && snapshot.checkInternalFlags(Flag.INTERNAL_OBJECT)) {      _dbClient.markForDeletion(snapshot);    }  } catch (  Exception e) {    _log.error(String.format("Could not clean up interim snapshot %s, " + "handling exception of a clone operation",snapshot.getId()),e);  }}  }
class C{  public static String replace(String text,char repl,char with){  return replace(text,repl,with,-1);}  }
class C{  public String toString(){  return "URIName: " + uri.toString();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TMODULE__ANNOTATIONS:    return getAnnotations();case TypesPackage.TMODULE__QUALIFIED_NAME:  return getQualifiedName();case TypesPackage.TMODULE__PROJECT_ID:return getProjectId();case TypesPackage.TMODULE__VENDOR_ID:return getVendorID();case TypesPackage.TMODULE__MODULE_LOADER:return getModuleLoader();case TypesPackage.TMODULE__N4JSD_MODULE:return isN4jsdModule();case TypesPackage.TMODULE__STATIC_POLYFILL_MODULE:return isStaticPolyfillModule();case TypesPackage.TMODULE__STATIC_POLYFILL_AWARE:return isStaticPolyfillAware();case TypesPackage.TMODULE__MAIN_MODULE:return isMainModule();case TypesPackage.TMODULE__PRE_LINKING_PHASE:return isPreLinkingPhase();case TypesPackage.TMODULE__TOP_LEVEL_TYPES:return getTopLevelTypes();case TypesPackage.TMODULE__VARIABLES:return getVariables();case TypesPackage.TMODULE__INTERNAL_TYPES:return getInternalTypes();case TypesPackage.TMODULE__EXPOSED_INTERNAL_TYPES:return getExposedInternalTypes();case TypesPackage.TMODULE__MODULE_SPECIFIER:return getModuleSpecifier();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void testLockWhenSomeoneHeldLock(long timeout) throws Exception {  String lockPath="/test-lock-nowait-" + timeout + "-"+ System.currentTimeMillis();  String clientId0="test-lock-nowait-0-" + System.currentTimeMillis();  String clientId1="test-lock-nowait-1-" + System.currentTimeMillis();  String clientId2="test-lock-nowait-2-" + System.currentTimeMillis();  createLockPath(zkc.get(),lockPath);  ZKSessionLock lock0=new ZKSessionLock(zkc0,lockPath,clientId0,lockStateExecutor);  ZKSessionLock lock1=new ZKSessionLock(zkc,lockPath,clientId1,lockStateExecutor);  lock0.tryLock(Long.MAX_VALUE,TimeUnit.MILLISECONDS);  assertEquals(State.CLAIMED,lock0.getLockState());  List<String> children=getLockWaiters(zkc0,lockPath);  assertEquals(1,children.size());  assertEquals(lock0.getLockId(),Await.result(asyncParseClientID(zkc0.get(),lockPath,children.get(0))));  try {    lock1.tryLock(timeout,TimeUnit.MILLISECONDS);    fail("lock1 should fail on locking since lock0 is holding the lock.");  } catch (  OwnershipAcquireFailedException oafe) {    assertEquals(lock0.getLockId().getLeft(),oafe.getCurrentOwner());  }  assertEquals(State.CLAIMED,lock0.getLockState());  assertEquals(State.CLOSED,lock1.getLockState());  children=getLockWaiters(zkc0,lockPath);  assertEquals(1,children.size());  assertEquals(lock0.getLockId(),Await.result(asyncParseClientID(zkc0.get(),lockPath,children.get(0))));  lock0.unlock();  assertEquals(State.CLOSED,lock0.getLockState());  assertEquals(0,getLockWaiters(zkc,lockPath).size());  ZKSessionLock lock2=new ZKSessionLock(zkc,lockPath,clientId2,lockStateExecutor);  lock2.tryLock(timeout,TimeUnit.MILLISECONDS);  assertEquals(State.CLOSED,lock0.getLockState());  assertEquals(State.CLOSED,lock1.getLockState());  assertEquals(State.CLAIMED,lock2.getLockState());  children=getLockWaiters(zkc,lockPath);  assertEquals(1,children.size());  assertEquals(lock2.getLockId(),Await.result(asyncParseClientID(zkc.get(),lockPath,children.get(0))));  lock2.unlock();}  }
class C{  public Single<Void> logout(){  return getStorage().getStoredAccessToken().toObservable().filter(null).concatMap(null).doOnNext(null).toSingle();}  }
class C{  private boolean hasStage(InputProcessor processor){  if (!(processor instanceof InputMultiplexer)) {    return processor == stage;  }  InputMultiplexer im=(InputMultiplexer)processor;  Array<InputProcessor> ips=im.getProcessors();  for (  InputProcessor ip : ips) {    if (hasStage(ip)) {      return true;    }  }  return false;}  }
class C{  public boolean shouldRewriteQueryFromData(){  return 0 != (mSearchMode & SEARCH_MODE_QUERY_REWRITE_FROM_DATA);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:40.762 -0500",hash_original_method="224A1F0FE2A7F3DC81BFFEE36861F394",hash_generated_method="9798DB3B91AFBFE542192DDF8FB12827") private Drawable tileify(Drawable drawable,boolean clip){  if (drawable instanceof LayerDrawable) {    LayerDrawable background=(LayerDrawable)drawable;    final int N=background.getNumberOfLayers();    Drawable[] outDrawables=new Drawable[N];    for (int i=0; i < N; i++) {      int id=background.getId(i);      outDrawables[i]=tileify(background.getDrawable(i),(id == R.id.progress || id == R.id.secondaryProgress));    }    LayerDrawable newBg=new LayerDrawable(outDrawables);    for (int i=0; i < N; i++) {      newBg.setId(i,background.getId(i));    }    return newBg;  } else   if (drawable instanceof StateListDrawable) {    StateListDrawable in=(StateListDrawable)drawable;    StateListDrawable out=new StateListDrawable();    int numStates=in.getStateCount();    for (int i=0; i < numStates; i++) {      out.addState(in.getStateSet(i),tileify(in.getStateDrawable(i),clip));    }    return out;  } else   if (drawable instanceof BitmapDrawable) {    final Bitmap tileBitmap=((BitmapDrawable)drawable).getBitmap();    if (mSampleTile == null) {      mSampleTile=tileBitmap;    }    final ShapeDrawable shapeDrawable=new ShapeDrawable(getDrawableShape());    final BitmapShader bitmapShader=new BitmapShader(tileBitmap,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);    shapeDrawable.getPaint().setShader(bitmapShader);    return (clip) ? new ClipDrawable(shapeDrawable,Gravity.LEFT,ClipDrawable.HORIZONTAL) : shapeDrawable;  }  return drawable;}  }
class C{  private static void returnParse(PsiBuilder builder,GroovyParser parser){  PsiBuilder.Marker marker=builder.mark();  ParserUtils.getToken(builder,GroovyTokenTypes.kRETURN);  AssignmentExpression.parse(builder,parser);  marker.done(GroovyElementTypes.RETURN_STATEMENT);}  }
class C{  private void runTestCase(TestScenario testScenario,TestCase testCase,TestEnvironmentExecutor testEnvironmentExecutor) throws TestFailException {  log.info(String.format("Executing test case: %s",testCase));  String environmentId=null;  ApmMockServer apmServer=new ApmMockServer();  apmServer.setHost("0.0.0.0");  apmServer.setPort(apmServerPort);  apmServer.setShutdownTimer(60 * 60 * 1000);  try {    if (testScenario.getEnvironment().getApmAddress() != null) {      testEnvironmentExecutor.createNetwork();    }    apmServer.run();    environmentId=testEnvironmentExecutor.run(testScenario.getEnvironment());    Thread.sleep(testScenario.getEnvironment().getInitWaitSeconds() * 1000);    testEnvironmentExecutor.execScript(environmentId,testCase.getScriptServiceName(),testCase.getAction());    Thread.sleep(testCase.getAfterActionWaitSeconds() * 1000);    Collection<JsonPathVerify> jsonPathVerifies=verifyResults(testScenario,testCase,apmServer);    if (!jsonPathVerifies.isEmpty()) {      throw new TestFailException(testCase,jsonPathVerifies);    }  } catch (  InterruptedException ex) {    log.severe("Interruption exception");    log.severe(ex.toString());    throw new TestFailException(testCase,ex);  } finally {    if (environmentId != null) {      testEnvironmentExecutor.stopAndRemove(environmentId);    }    if (apmServer != null) {      apmServer.shutdown();    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void clearReplicaFlagsInIngestionContext(IngestionRequestContext requestContext,List<Volume> volumes,DbClient dbClient){  _logger.info("Clearing flags of replicas in the context");  List<String> rpVolumes=new ArrayList<String>();  for (  Volume volume : volumes) {    rpVolumes.add(volume.getId().toString());    if (RPHelper.isVPlexVolume(volume,dbClient) && volume.getAssociatedVolumes() != null && !volume.getAssociatedVolumes().isEmpty()) {      StringSet associatedVolumes=volume.getAssociatedVolumes();      rpVolumes.addAll(associatedVolumes);    }  }  for (  VolumeIngestionContext volumeIngestionContext : requestContext.getRootIngestionRequestContext().getProcessedUnManagedVolumeMap().values()) {    if (volumeIngestionContext instanceof IngestionRequestContext) {      for (      Set<DataObject> objectsToBeUpdated : ((IngestionRequestContext)volumeIngestionContext).getDataObjectsToBeUpdatedMap().values()) {        for (        DataObject o : objectsToBeUpdated) {          boolean rpBlockSnapshot=(o instanceof BlockSnapshot && rpVolumes.contains(((BlockSnapshot)o).getParent().getURI().toString()));          boolean rpBlockSnapshotSession=(o instanceof BlockSnapshotSession && rpVolumes.contains(((BlockSnapshotSession)o).getParent().getURI().toString()));          if (rpBlockSnapshot || rpBlockSnapshotSession) {            _logger.info(String.format("Clearing internal volume flag of %s %s of RP volume ",(rpBlockSnapshot ? "BlockSnapshot" : "BlockSnapshotSession"),o.getLabel()));            o.clearInternalFlags(BlockIngestOrchestrator.INTERNAL_VOLUME_FLAGS);          }        }      }    }  }}  }
class C{  public static void showFab(FloatingActionButton fab){  fab.show();  fab.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  public static String appendParameter(String classname,String desc){  int i=desc.indexOf(')');  if (i < 0)   return desc; else {    StringBuffer newdesc=new StringBuffer();    newdesc.append(desc.substring(0,i));    newdesc.append('L');    newdesc.append(classname.replace('.','/'));    newdesc.append(';');    newdesc.append(desc.substring(i));    return newdesc.toString();  }}  }
class C{  @SuppressWarnings("unchecked") public StateMachineTestPlanStepBuilder expectStateEntered(S... states){  this.expectStatesEntrered.addAll(Arrays.asList(states));  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=evalBool(stack.pop());  Show s=getShow(stack);  if (s == null)   return null;  String imgUrl=s.getAnyImageUrl(0,thumb);  return (imgUrl == null) ? null : MetaImage.getMetaImage(imgUrl,stack.getUIComponent());}  }
class C{  private void changeSize(int newSize){  if (newSize >= length) {    long[] oldData=data;    int oldLength=length;    data=new long[newSize];    length=0;    add(oldData,oldLength);  }}  }
class C{  protected void nodeConnected(short nodeId,Channel channel){  logger.debug("[{}->{}] Connection established",syncManager.getLocalNodeId(),nodeId);synchronized (connections) {    NodeConnection c=connections.get(nodeId);    if (c == null) {      connections.put(nodeId,c=new NodeConnection());    }    c.nodeChannel=channel;    c.state=NodeConnectionState.CONNECTED;  }}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == create_note_cmd) {    if (resultCode == RESULT_OK) {      DBNote createdNote=(DBNote)data.getExtras().getSerializable(CREATED_NOTE);      adapter.add(createdNote);    }  } else   if (requestCode == show_single_note_cmd) {    if (resultCode == RESULT_OK || resultCode == RESULT_FIRST_USER) {      int notePosition=data.getExtras().getInt(EditNoteActivity.PARAM_NOTE_POSITION);      Item oldItem=adapter.getItem(notePosition);      if (resultCode == RESULT_FIRST_USER) {        adapter.remove(oldItem);      }      if (resultCode == RESULT_OK) {        DBNote editedNote=(DBNote)data.getExtras().getSerializable(EditNoteActivity.PARAM_NOTE);        if (oldItem instanceof DBNote && !editedNote.getModified().after(((DBNote)oldItem).getModified())) {          adapter.replace(editedNote,notePosition);        } else {          adapter.remove(oldItem);          adapter.add(editedNote);        }      }    }  } else   if (requestCode == server_settings) {    db=new NoteSQLiteOpenHelper(this);    if (db.getNoteServerSyncHelper().isSyncPossible()) {      adapter.removeAll();      swipeRefreshLayout.setRefreshing(true);      synchronize();    } else {      Toast.makeText(getApplicationContext(),getString(R.string.error_sync,getString(NotesClientUtil.LoginStatus.NO_NETWORK.str)),Toast.LENGTH_LONG).show();    }  }}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public EventException(String message){  super(message);  cause=null;}  }
class C{  public void append(char character){  this.buffer.append(character);  this.charCount++;}  }
class C{  @Deprecated public MoreLikeThisQueryBuilder ignoreLike(Item... docs){  return unlike(docs);}  }
class C{  private static boolean inList(Context context,String activityType,int[] list){  for (  int i : list) {    if (context.getString(i).equals(activityType)) {      return true;    }  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getPreOrPostCondition_();}  }
class C{  private UnManagedVolume createUnManagedVolume(UnManagedVolume unManagedVolume,String unManagedVolumeNativeGuid,VNXeLun lun,StorageSystem system,StoragePool pool,DbClient dbClient,Map<String,List<UnManagedVolume>> hostVolumeMap){  boolean created=false;  if (null == unManagedVolume) {    unManagedVolume=new UnManagedVolume();    unManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));    unManagedVolume.setNativeGuid(unManagedVolumeNativeGuid);    unManagedVolume.setStorageSystemUri(system.getId());    unManagedVolume.setStoragePoolUri(pool.getId());    created=true;  }  unManagedVolume.setLabel(lun.getName());  Map<String,StringSet> unManagedVolumeInformation=new HashMap<String,StringSet>();  Map<String,String> unManagedVolumeCharacteristics=new HashMap<String,String>();  Boolean isVolumeExported=false;  if (lun.getHostAccess() != null && !lun.getHostAccess().isEmpty()) {    unManagedVolume.getUnmanagedExportMasks().clear();    unManagedVolume.getInitiatorNetworkIds().clear();    unManagedVolume.getInitiatorUris().clear();    for (    BlockHostAccess access : lun.getHostAccess()) {      int accessMask=access.getAccessMask();      if (accessMask == BlockHostAccess.HostLUNAccessEnum.BOTH.getValue() || accessMask == BlockHostAccess.HostLUNAccessEnum.PRODUCTION.getValue()) {        isVolumeExported=true;        String hostId=access.getHost().getId();        List<UnManagedVolume> exportedVolumes=hostVolumeMap.get(hostId);        if (exportedVolumes == null) {          exportedVolumes=new ArrayList<UnManagedVolume>();          hostVolumeMap.put(hostId,exportedVolumes);        }        exportedVolumes.add(unManagedVolume);      }    }  }  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),isVolumeExported.toString());  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),Boolean.FALSE.toString());  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString(),Boolean.FALSE.toString());  StringSet deviceLabel=new StringSet();  deviceLabel.add(lun.getName());  unManagedVolumeInformation.put(SupportedVolumeInformation.DEVICE_LABEL.toString(),deviceLabel);  String volumeWWN=lun.getWwn().replaceAll(":","");  unManagedVolume.setWwn(volumeWWN);  StringSet systemTypes=new StringSet();  systemTypes.add(system.getSystemType());  StringSet provCapacity=new StringSet();  provCapacity.add(String.valueOf(lun.getSizeTotal()));  unManagedVolumeInformation.put(SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);  StringSet allocatedCapacity=new StringSet();  allocatedCapacity.add(String.valueOf(lun.getSizeAllocated()));  unManagedVolumeInformation.put(SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  unManagedVolumeInformation.put(SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);  StringSet nativeId=new StringSet();  nativeId.add(lun.getId());  unManagedVolumeInformation.put(SupportedVolumeInformation.NATIVE_ID.toString(),nativeId);  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),Boolean.TRUE.toString());  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),lun.getIsThinEnabled().toString());  if (null != pool) {    unManagedVolume.setStoragePoolUri(pool.getId());    StringSet pools=new StringSet();    pools.add(pool.getId().toString());    unManagedVolumeInformation.put(SupportedVolumeInformation.STORAGE_POOL.toString(),pools);    StringSet driveTypes=pool.getSupportedDriveTypes();    if (null != driveTypes) {      unManagedVolumeInformation.put(SupportedVolumeInformation.DISK_TECHNOLOGY.toString(),driveTypes);    }    StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(dbClient,pool.getId(),unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString()));    log.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));    if (null == matchedVPools || matchedVPools.isEmpty()) {      unManagedVolume.getSupportedVpoolUris().clear();    } else {      unManagedVolume.getSupportedVpoolUris().replace(matchedVPools);      log.info("Replaced Pools : {}",Joiner.on("\t").join(unManagedVolume.getSupportedVpoolUris()));    }  }  unManagedVolume.addVolumeInformation(unManagedVolumeInformation);  if (unManagedVolume.getVolumeCharacterstics() == null) {    unManagedVolume.setVolumeCharacterstics(new StringMap());  }  unManagedVolume.getVolumeCharacterstics().replace(unManagedVolumeCharacteristics);  if (created) {    unManagedVolumesInsert.add(unManagedVolume);  } else {    unManagedVolumesUpdate.add(unManagedVolume);  }  return unManagedVolume;}  }
class C{  public DefaultStateMachineContext(S state,E event,Map<String,Object> eventHeaders,ExtendedState extendedState){  this(new ArrayList<StateMachineContext<S,E>>(),state,event,eventHeaders,extendedState);}  }
class C{  public void incCqsOnClient(){  this._stats.incLong(_numCqsOnClientId,1);}  }
class C{  public Response load(final Request request,final boolean acceptOnlyParseable) throws IOException {  Latency.updateBeforeLoad(request.url());  final long start=System.currentTimeMillis();  final DigestURL entryUrl=request.url();  final String fullPath=getPath(entryUrl);  Response response=null;  String file, path;  if (fullPath.endsWith("/")) {    file="";    path=fullPath;  } else {    final int pos=fullPath.lastIndexOf("/");    if (pos == -1) {      file=fullPath;      path="/";    } else {      path=fullPath.substring(0,pos + 1);      file=fullPath.substring(pos + 1);    }  }  assert path.endsWith("/") : "FTPLoader: path is not a path: '" + path + "'";  final ByteArrayOutputStream berr=new ByteArrayOutputStream();  final FTPClient ftpClient=new FTPClient();  final CrawlProfile profile=this.sb.crawler.get(ASCII.getBytes(request.profileHandle()));  if (openConnection(ftpClient,entryUrl)) {    if (file.length() > 0) {      ftpClient.exec("cd \"" + path + "\"",false);      final boolean isFolder=ftpClient.isFolder(file);      if (isFolder) {        path=fullPath + "/";        file="";      }    }    if (file.isEmpty()) {      final RequestHeader requestHeader=new RequestHeader();      if (request.referrerhash() != null) {        final DigestURL u=this.sb.getURL(request.referrerhash());        if (u != null)         requestHeader.put(RequestHeader.REFERER,u.toNormalform(true));      }      final StringBuilder dirList=ftpClient.dirhtml(path);      if (dirList == null) {        response=null;      } else {        final ResponseHeader responseHeader=new ResponseHeader(200);        responseHeader.put(HeaderFramework.LAST_MODIFIED,HeaderFramework.formatRFC1123(new Date()));        responseHeader.put(HeaderFramework.CONTENT_TYPE,"text/html");        response=new Response(request,requestHeader,responseHeader,profile,false,UTF8.getBytes(dirList.toString()));      }    } else {      try {        response=getFile(ftpClient,request,acceptOnlyParseable);      } catch (      final Exception e) {        ConcurrentLog.logException(e);        (new PrintStream(berr)).print(e.getMessage());      }    }    closeConnection(ftpClient);  }  if (berr.size() > 0 || response == null) {    final String detail=(berr.size() > 0) ? "Errorlog: " + berr.toString() : "";    this.sb.crawlQueues.errorURL.push(request.url(),request.depth(),profile,FailCategory.TEMPORARY_NETWORK_FAILURE," ftp server download, " + detail,-1);    throw new IOException("FTPLoader: Unable to download URL '" + request.url().toString() + "': "+ detail);  }  Latency.updateAfterLoad(request.url(),System.currentTimeMillis() - start);  return response;}  }
class C{  public int onConnect(HeaderSet request,HeaderSet reply){  return ResponseCodes.OBEX_HTTP_OK;}  }
class C{  private void extract(Detail detail) throws Exception {  List<MethodDetail> methods=detail.getMethods();  for (  MethodDetail entry : methods) {    Annotation[] list=entry.getAnnotations();    Method method=entry.getMethod();    for (    Annotation label : list) {      scan(method,label,list);    }  }}  }
class C{  @Override final public int hashCode(){  return super.hashCode();}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  void resetToPreferences(){  try {    Preferences systemPrefs=Prefs.getGlobalPreferences(getPreferencesKey());    Preferences appPrefs=Prefs.getAppPreferences(simulation,getPreferencesKey());    int val=appPrefs.getInt(DRAW_GRIDS_KEY,systemPrefs.getInt(DRAW_GRIDS_KEY,useNoBuffer.isSelected() ? 0 : useBuffer.isSelected() ? 1 : 2));    if (val == 0)     useNoBuffer.setSelected(true); else     if (val == 1)     useBuffer.setSelected(true); else     useDefault.setSelected(true);    xOffsetField.setValue(xOffsetField.newValue(appPrefs.getDouble(X_OFFSET_KEY,systemPrefs.getDouble(X_OFFSET_KEY,0))));    yOffsetField.setValue(yOffsetField.newValue(appPrefs.getDouble(Y_OFFSET_KEY,systemPrefs.getDouble(Y_OFFSET_KEY,0))));    antialias.setSelected(appPrefs.getBoolean(ANTIALIAS_KEY,systemPrefs.getBoolean(ANTIALIAS_KEY,false)));    alphaInterpolation.setSelected(appPrefs.getBoolean(BETTER_TRANSPARENCY_KEY,systemPrefs.getBoolean(BETTER_TRANSPARENCY_KEY,false)));    interpolation.setSelected(appPrefs.getBoolean(INTERPOLATION_KEY,systemPrefs.getBoolean(INTERPOLATION_KEY,false)));    tooltips.setSelected(appPrefs.getBoolean(TOOLTIPS_KEY,systemPrefs.getBoolean(TOOLTIPS_KEY,false)));    preciseDrawing.setSelected(appPrefs.getBoolean(PRECISE_KEY,systemPrefs.getBoolean(PRECISE_KEY,false)));    listener.actionPerformed(null);  } catch (  java.security.AccessControlException e) {  }}  }
class C{  public boolean moveTo(final DestinationObject dest,final Player player){  if (!((EquipListener)item).canBeEquippedIn(dest.getContentSlotName())) {    player.sendPrivateText("You can't carry this " + item.getTitle() + " on your "+ dest.getContentSlotName()+ ".");    logger.warn("tried to equip an entity into disallowed slot: " + item.getClass() + "; equip rejected");    return false;  }  if (!dest.isValid() || !dest.preCheck(item,player)) {    return false;  }  final String[] srcInfo=getLogInfo();  final Item entity=removeFromWorld();  logger.debug("item removed");  dest.addToWorld(entity,player);  logger.debug("item readded");  new ItemLogger().equipAction(player,entity,srcInfo,dest.getLogInfo());  return true;}  }
class C{  private IFilterTest createNativeDistinctQuadsFilter(final ConstructNode construct){  return createHashDistinctQuadsFilter(construct);}  }
class C{  public PrincipalId(String name,String domain){  ValidateUtil.validateNotEmpty(name,"name");  ValidateUtil.validateNotEmpty(domain,"domain");  _name=name;  _domain=domain;}  }
class C{  public PrincipalName(DerValue encoding,Realm realm) throws Asn1Exception, IOException {  if (realm == null) {    throw new IllegalArgumentException("Null realm not allowed");  }  realmDeduced=false;  nameRealm=realm;  DerValue der;  if (encoding == null) {    throw new IllegalArgumentException("Null encoding not allowed");  }  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x00) {    BigInteger bint=der.getData().getBigInteger();    nameType=bint.intValue();  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x01F) == 0x01) {    DerValue subDer=der.getData().getDerValue();    if (subDer.getTag() != DerValue.tag_SequenceOf) {      throw new Asn1Exception(Krb5.ASN1_BAD_ID);    }    Vector<String> v=new Vector<>();    DerValue subSubDer;    while (subDer.getData().available() > 0) {      subSubDer=subDer.getData().getDerValue();      String namePart=new KerberosString(subSubDer).toString();      v.addElement(namePart);    }    nameStrings=new String[v.size()];    v.copyInto(nameStrings);    validateNameStrings(nameStrings);  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){  if (addStr != null) {    if (addStr.length() == 0) {      delimiter="";    }    return source.append(addStr).append(delimiter);  }  return source;}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public void addClade(TaxonList taxonList,SubstitutionModel substitutionModel,double stemWeight) throws Tree.MissingTaxonException {  int index=substitutionModels.indexOf(substitutionModel);  if (index == -1) {    index=substitutionModels.size();    substitutionModels.add(substitutionModel);    addModel(substitutionModel);  }  BitSet tips=Tree.Utils.getTipsBitSetForTaxa(treeModel,taxonList);  Clade clade=new Clade(index,tips,stemWeight);  clades.put(tips,clade);  if (stemWeight > 0.0 || stemWeight < 1.0) {    requiresMatrixConvolution=true;  }}  }
class C{  public void addTableFilter(TableFilter filter,boolean isTop){  filters.add(filter);  if (isTop) {    topFilters.add(filter);  }}  }
class C{  public boolean isActivateOrDeactivateServicePending(VOService service){  ArgumentValidator.notNull("service",service);  TriggerProcessIdentifiers.validateObjectKey(service);  Query query=ds.createNamedQuery("TriggerProcessIdentifier.isActivateDeactivateServicePending");  query.setParameter("pendingStates",TriggerProcess.getUnfinishedStatus());  query.setParameter("triggerTypes",Arrays.asList(TriggerType.ACTIVATE_SERVICE,TriggerType.DEACTIVATE_SERVICE));  query.setParameter("serviceKeyName",TriggerProcessIdentifierName.SERVICE_KEY);  query.setParameter("serviceKey",String.valueOf(service.getKey()));  return ((Long)query.getSingleResult()).longValue() > 0;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public FastBlurFilter(){  this(3);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof MediaNode)   return ((MediaNode)o).getPrimaryLabel(); else   if (o != null)   return o.toString(); else   return "";}  }
class C{  public GameEntity build(){  return entity;}  }
class C{  public static boolean equals(Object a,Object b){  if (!(a instanceof Vector3) || !(b instanceof Vector3)) {    return false;  }  if (a == b) {    return true;  }  Vector3 x=(Vector3)a;  Vector3 y=(Vector3)b;  return x.getX() == y.getX() && x.getY() == y.getY() && x.getZ() == y.getZ();}  }
class C{  private void initDefaultArchiveSettings(){  updateUserCountries();  fileScannerDao.resetAll();  printDatabaseRowCounts();  processUnprocessed();  doIncomingRepopulate();  if (!doForceReset())   doProductReindex();  doSynchronizeLocalArchive();  doArchiveCheck();  inactiveOldSearchQueries();  doforcePublic();}  }
class C{  @Override public void removeRangeCrosshair(Crosshair crosshair){  removeRangeCrosshair(0,crosshair);}  }
class C{  public VisorLogFile(File file){  this(file.getAbsolutePath(),file.length(),file.lastModified());}  }
class C{  public boolean isSetGetRequest(){  return this.getRequest != null;}  }
class C{  public StoredItemStack removeToPlayerInventory(StoredItemStack stack,long extractSize,INetworkCache network,EntityPlayer player,ActionType type){  return null;}  }
class C{  public void initContext(Object context){}  }
class C{  public int insert(Database database,Shard shard) throws SQLException {  shardName.setValue(shard.getShardId());  shardMaster.setValue(shard.getMaster());  shardCritical.setValue(shard.isCritical());  return database.insert(shardTable);}  }
class C{  private void fillCorrelation() throws Exception {  m_correlation=new double[m_numAttribs][m_numAttribs];  double[] att1=new double[m_numInstances];  double[] att2=new double[m_numInstances];  double corr;  for (int i=0; i < m_numAttribs; i++) {    for (int j=0; j < m_numAttribs; j++) {      for (int k=0; k < m_numInstances; k++) {        att1[k]=m_trainInstances.instance(k).value(i);        att2[k]=m_trainInstances.instance(k).value(j);      }      if (i == j) {        m_correlation[i][j]=1.0;        m_stdDevs[i]=Math.sqrt(Utils.variance(att1));      } else {        corr=Utils.correlation(att1,att2,m_numInstances);        m_correlation[i][j]=corr;        m_correlation[j][i]=corr;      }    }  }  m_standardizeFilter=new Standardize();  m_standardizeFilter.setInputFormat(m_trainInstances);  m_trainInstances=Filter.useFilter(m_trainInstances,m_standardizeFilter);}  }
class C{  @Override public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("storesUpperCaseQuotedIdentifiers");  String m=getMode();  return m.equals("MySQL");}  }
class C{  private static ClassNode adjustWithTraits(final MethodNode directMethodCallCandidate,final ClassNode receiver,final ClassNode[] args,final ClassNode returnType){  if (directMethodCallCandidate instanceof ExtensionMethodNode) {    ExtensionMethodNode emn=(ExtensionMethodNode)directMethodCallCandidate;    if ("withTraits".equals(emn.getName()) && "DefaultGroovyMethods".equals(emn.getExtensionMethodNode().getDeclaringClass().getNameWithoutPackage())) {      List<ClassNode> nodes=new LinkedList<ClassNode>();      Collections.addAll(nodes,receiver.getInterfaces());      for (      ClassNode arg : args) {        if (isClassClassNodeWrappingConcreteType(arg)) {          nodes.add(arg.getGenericsTypes()[0].getType());        } else {          nodes.add(arg);        }      }      return new LowestUpperBoundClassNode(returnType.getName() + "Composed",OBJECT_TYPE,nodes.toArray(new ClassNode[nodes.size()]));    }  }  return returnType;}  }
class C{  public boolean isDisplayValues(){  return mDisplayValues;}  }
class C{  public GammaInvFitnessFunction(int genomeLength,double alpha,double beta,double pInv,int stateSize,boolean randomFittest){  GammaDistribution gamma=new GammaDistribution(beta,alpha);  fitness=new double[genomeLength][stateSize];  fittest=new byte[genomeLength];  int fitpos=0;  for (int i=0; i < genomeLength; i++) {    if (randomFittest) {      fitpos=MathUtils.nextInt(stateSize);    }    fitness[i][fitpos]=1.0;    fittest[i]=(byte)fitpos;    for (int j=0; j < stateSize; j++) {      if (j != fitpos) {        if (MathUtils.nextDouble() > pInv) {          double prob=Math.round(MathUtils.nextDouble() * 1000.0) / 1000.0;          while ((prob <= 0.0) || (prob >= 1.0)) {            prob=Math.round(MathUtils.nextDouble() * 1000.0) / 1000.0;          }          fitness[i][j]=Math.max(0.0,1.0 - gamma.quantile(prob));        } else {          fitness[i][j]=0.0;        }      }    }  }}  }
class C{  public T caseTStructMember(TStructMember object){  return null;}  }
class C{  @Override public void clear(){  map.clear();}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  getData();  int count=0;  for (int i=0; i < states.size(); i++) {    System.out.print("What is the capital of " + states.get(i) + "? ");    String capital=input.nextLine();    if (isEqual(capitals.get(i),capital)) {      System.out.println("Your answer is correct");      count++;    } else {      System.out.println("The correct answer should be " + capitals.get(i));    }  }  System.out.println("\nThe correct count is " + count);}  }
class C{  public void resendMessageItem(final MessageItem msgItem){  String body=msgItem.mBody;  deleteMessageItem(msgItem);  mComposeView.setText(body);  mComposeView.sendSms();}  }
class C{  private UTF16_REVReader(InputStream is){  this.is=is;}  }
class C{  public static String concat(EncodedStringValue[] addr){  StringBuilder sb=new StringBuilder();  int maxIndex=addr.length - 1;  for (int i=0; i <= maxIndex; i++) {    sb.append(addr[i].getString());    if (i < maxIndex) {      sb.append(";");    }  }  return sb.toString();}  }
class C{  public void testBlockCommentWithString() throws IOException {  final InputStream stream=this.getStream(R.raw.block_comment_with_string);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql1,commands.get(0));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static final long transfer(InputStream in,OutputStream out) throws IOException {  long totalBytes=0;  int bytesInBuf=0;  byte[] buf=new byte[4096];  while ((bytesInBuf=in.read(buf)) != -1) {    out.write(buf,0,bytesInBuf);    totalBytes+=bytesInBuf;  }  return totalBytes;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.503 -0500",hash_original_method="EC17AB4FB84DCA37B1579E7D41B287E3",hash_generated_method="4A2F130B701175FEA8A0343BA238F9B3") public void stopStack(){  if (this.timer != null)   this.timer.cancel();  timer=null;  this.pendingTransactions.clear();  this.toExit=true;synchronized (this) {    this.notifyAll();  }synchronized (this.clientTransactionTable) {    clientTransactionTable.notifyAll();  }synchronized (this.messageProcessors) {    MessageProcessor[] processorList;    processorList=getMessageProcessors();    for (int processorIndex=0; processorIndex < processorList.length; processorIndex++) {      removeMessageProcessor(processorList[processorIndex]);    }    this.ioHandler.closeAll();  }  try {    Thread.sleep(1000);  } catch (  InterruptedException ex) {  }  this.clientTransactionTable.clear();  this.serverTransactionTable.clear();  this.dialogTable.clear();  this.serverLogger.closeLogFile();}  }
class C{  public final boolean doPeriodicWork() throws Exception {  final boolean createCheckPoint=TLCGlobals.doCheckPoint();  if ((!this.checkLiveness || runtimeRatio > TLCGlobals.livenessRatio || !liveCheck.doLiveCheck()) && !forceLiveCheck && !createCheckPoint) {    updateRuntimeRatio(0L);    return true;  }  if (this.theStateQueue.suspendAll()) {    if (this.checkLiveness && (runtimeRatio < TLCGlobals.livenessRatio || forceLiveCheck)) {      final long preLivenessChecking=System.currentTimeMillis();      if (!liveCheck.check(forceLiveCheck)) {        return false;      }      forceLiveCheck=false;      updateRuntimeRatio(System.currentTimeMillis() - preLivenessChecking);    } else     if (runtimeRatio > TLCGlobals.livenessRatio) {      updateRuntimeRatio(0L);    }    if (createCheckPoint) {      MP.printMessage(EC.TLC_CHECKPOINT_START,this.metadir);      this.theStateQueue.beginChkpt();      this.trace.beginChkpt();      this.theFPSet.beginChkpt();      this.theStateQueue.resumeAll();      UniqueString.internTbl.beginChkpt(this.metadir);      if (this.checkLiveness) {        liveCheck.beginChkpt();      }      this.theStateQueue.commitChkpt();      this.trace.commitChkpt();      this.theFPSet.commitChkpt();      UniqueString.internTbl.commitChkpt(this.metadir);      if (this.checkLiveness) {        liveCheck.commitChkpt();      }      MP.printMessage(EC.TLC_CHECKPOINT_END);    } else {      this.theStateQueue.resumeAll();    }  }  return true;}  }
class C{  public Days dividedBy(int divisor){  if (divisor == 1) {    return this;  }  return Days.days(getValue() / divisor);}  }
class C{  protected static long[] unknown_N_compute_B_and_K_raw(double epsilon,double delta,int quantiles){  if (epsilon <= 0.0) {    long[] result=new long[4];    result[0]=1;    result[1]=Long.MAX_VALUE;    result[2]=Long.MAX_VALUE;    result[3]=0;    return result;  }  if (epsilon >= 1.0 || delta >= 1.0) {    long[] result=new long[4];    result[0]=2;    result[1]=1;    result[2]=3;    result[3]=0;    return result;  }  if (delta <= 0.0) {    long[] result=new long[4];    result[0]=1;    result[1]=Long.MAX_VALUE;    result[2]=Long.MAX_VALUE;    result[3]=0;    return result;  }  int max_b=50;  int max_h=50;  int max_H=50;  int max_Iterations=2;  long best_b=Long.MAX_VALUE;  long best_k=Long.MAX_VALUE;  long best_h=Long.MAX_VALUE;  long best_memory=Long.MAX_VALUE;  double pow=Math.pow(2.0,max_H);  double logDelta=Math.log(2.0 / (delta / quantiles)) / (2.0 * epsilon * epsilon);  while (best_b == Long.MAX_VALUE && max_Iterations-- > 0) {    for (int b=2; b <= max_b; b++) {      for (int h=2; h <= max_h; h++) {        double Ld=Arithmetic.binomial(b + h - 2,h - 1);        double Ls=Arithmetic.binomial(b + h - 3,h - 1);        double c=logDelta / Math.min(Ld,8.0 * Ls / 3.0);        double beta=Ld / Ls;        double cc=(beta - 2.0) * (max_H - 2.0) / (beta + pow - 2.0);        double d=(h + 3 + cc) / (2.0 * epsilon);        double f=c * c + 4.0 * c * d;        if (f < 0.0)         continue;        double root=Math.sqrt(f);        double alpha_one=(c + 2.0 * d + root) / (2.0 * d);        double alpha_two=(c + 2.0 * d - root) / (2.0 * d);        boolean alpha_one_OK=false;        boolean alpha_two_OK=false;        if (0.0 < alpha_one && alpha_one < 1.0)         alpha_one_OK=true;        if (0.0 < alpha_two && alpha_two < 1.0)         alpha_two_OK=true;        if (alpha_one_OK || alpha_two_OK) {          double alpha=alpha_one;          if (alpha_one_OK && alpha_two_OK) {            alpha=Math.max(alpha_one,alpha_two);          } else           if (alpha_two_OK) {            alpha=alpha_two;          }          long k=(long)Math.ceil(Math.max(d / alpha,(h + 1) / (2.0 * epsilon)));          if (k > 0) {            long memory=b * k;            if (memory < best_memory) {              best_k=k;              best_b=b;              best_h=h;              best_memory=memory;            }          }        }      }    }    if (best_b == Long.MAX_VALUE) {      System.out.println("Warning: Computing b and k looks like a lot of work!");      max_b*=2;      max_h*=2;      max_H*=2;    }  }  long[] result=new long[4];  result[3]=0;  if (best_b == Long.MAX_VALUE) {    result[0]=1;    result[1]=Long.MAX_VALUE;    result[2]=Long.MAX_VALUE;  } else {    result[0]=best_b;    result[1]=best_k;    result[2]=best_h;  }  return result;}  }
class C{  private static void appendCodepoint(StringBuilder dst,int codePoint){  if (Character.isBmpCodePoint(codePoint)) {    dst.append((char)codePoint);  } else   if (Character.isValidCodePoint(codePoint)) {    dst.append(Character.highSurrogate(codePoint));    dst.append(Character.lowSurrogate(codePoint));  } else {    throw new IllegalArgumentException("Invalid codepoint " + codePoint);  }}  }
class C{  public static KeyToken fromInboundMessage(final Message msg){  return new KeyToken(msg.getToken(),msg.getSource().getAddress(),msg.getSourcePort());}  }
class C{  public int capacity(){  return delegate.capacity();}  }
class C{  public GameObjectOutputStream(final OutputStream output) throws IOException {  super(output);  enableReplaceObject(true);}  }
class C{  public Builder writeBufferHighWaterMark(int writeBufferHighWaterMark){  this.writeBufferHighWaterMark=writeBufferHighWaterMark;  return this;}  }
class C{  @Override public void changeEvent(final IChangeRecord record){  if (changeSet == null) {    changeSet=new HashMap<ISPO,IChangeRecord>();    ndx=getHistoryIndex(tripleStore);    if (minReleaseAge > 0) {      pruneHistory();    }  }  final ISPO spo=record.getStatement();  changeSet.put(spo,record);  if (changeSet.size() > threshold) {    flush();  }}  }
class C{  public void send(String remoteAddr,int remotePort,byte[] data) throws IOException {  if (data == null) {    return;  }  if (connection != null) {    InetAddress address=InetAddress.getByName(remoteAddr);    DatagramPacket packet=new DatagramPacket(data,data.length,address,remotePort);    connection.send(packet);  } else {    throw new IOException("Connection not openned");  }}  }
class C{  public void loadFileAndPersist(String fileName){  try {    readXMLAndPersist(fileName,DbCliOperation.LOAD);    System.out.println(String.format("Load from file: %s successfully",fileName));    log.info("Load from file: {} successfully",fileName);  } catch (  Exception e) {    System.err.println("Caught Exception: " + e);    log.error("Caught Exception: ",e);  }}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public static String createBase64(Bitmap mBitmap){  ByteArrayOutputStream baos1=new ByteArrayOutputStream();  mBitmap.compress(Bitmap.CompressFormat.JPEG,100,baos1);  byte[] b1=baos1.toByteArray();  return Base64.encodeToString(b1,Base64.DEFAULT);}  }
class C{  public void trace(Object message){  log(Level.FINEST,String.valueOf(message),null);}  }
class C{  public Calculator(Frame frame,String title,int displayType,DecimalFormat format,BigDecimal number){  super(frame,title,true);  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  m_WindowNo=Env.getWindowNo(frame);  m_DisplayType=displayType;  if (!DisplayType.isNumeric(m_DisplayType))   m_DisplayType=DisplayType.Number;  m_format=format;  if (m_format == null)   m_format=DisplayType.getNumberFormat(m_DisplayType);  m_number=number;  if (m_number == null)   m_number=new BigDecimal(0.0);  try {    jbInit();    finishSetup();  } catch (  Exception ex) {    log.log(Level.SEVERE,"Calculator" + ex);  }}  }
class C{  public static String buildString(Consumer<StringPrinter> printer){  StringBuilder builder=new StringBuilder();  printer.accept(new StringPrinter(null));  return builder.toString();}  }
class C{  private Object readResolve(){  Chronology base=getBase();  return base == null ? getInstanceUTC() : getInstance(base.getZone());}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildBlacksmith(zone);}  }
class C{  public DefaultValueDataset(Number value){  super();  this.value=value;}  }
class C{  public boolean color(){  return color;}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  AbstractNotation an=(AbstractNotation)n;  an.nodeName=nodeName;  an.publicId=publicId;  an.systemId=systemId;  return n;}  }
class C{  private boolean show(ComponentName componentName,Bundle appSearchData){  if (DBG) {    Log.d(LOG_TAG,"show(" + componentName + ", "+ appSearchData+ ")");  }  SearchManager searchManager=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  mSearchable=searchManager.getSearchableInfo(componentName);  if (mSearchable == null) {    return false;  }  mLaunchComponent=componentName;  mAppSearchData=appSearchData;  mActivityContext=mSearchable.getActivityContext(getContext());  if (!isShowing()) {    createContentView();    mSearchView.setSearchableInfo(mSearchable);    mSearchView.setAppSearchData(mAppSearchData);    show();  }  updateUI();  return true;}  }
class C{  public void evaluateMultiThreaded(){  final int SIZE=1000;  final int numcores=Runtime.getRuntime().availableProcessors();  ArrayList<NERThread> threads=new ArrayList<>();  for (int i=0; i < numcores; i++) {    NERThread t=new NERThread(SIZE);    threads.add(t);    t.start();  }  for (  Thread t : threads) {    try {      t.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  for (  NERThread t : threads) {    if (t.averageRunTime == -1) {      System.out.println("Error : " + t.error);      assertTrue(t.error,false);    }    assertTrue("Deficient average run time.",t.averageRunTime < 100);    for (    Constituent c : t.view.getConstituents()) {      assertTrue("Entity " + c.toString() + " was not found",entities.contains(c.toString()));    }  }}  }
class C{  public JournalFile openFile() throws InterruptedException, ActiveMQIOErrorException {  if (logger.isTraceEnabled()) {    logger.trace("enqueueOpenFile with openedFiles.size=" + openedFiles.size());  }  if (openFilesExecutor == null) {    pushOpenRunnable.run();  } else {    openFilesExecutor.execute(pushOpenRunnable);  }  JournalFile nextFile=openedFiles.poll(5,TimeUnit.SECONDS);  if (nextFile == null) {    fileFactory.onIOError(ActiveMQJournalBundle.BUNDLE.fileNotOpened(),"unable to open ",null);    fileFactory.activateBuffer(journal.getCurrentFile().getFile());    throw ActiveMQJournalBundle.BUNDLE.fileNotOpened();  }  if (logger.isTraceEnabled()) {    logger.trace("Returning file " + nextFile);  }  return nextFile;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean isDocOrdered(){  return m_inNaturalOrderStatic;}  }
class C{  private static void writeInstallInfo(){  if (fgInstallTimeMap != null) {    OutputStream stream=null;    try {      Document doc=newDocument();      Element root=doc.createElement("dirs");      doc.appendChild(root);      Map.Entry<String,Long> entry=null;      Element e=null;      String key=null;      for (Iterator<Map.Entry<String,Long>> i=fgInstallTimeMap.entrySet().iterator(); i.hasNext(); ) {        entry=i.next();        key=entry.getKey();        if (fgLibraryInfoMap == null || fgLibraryInfoMap.containsKey(key)) {          e=doc.createElement("entry");          root.appendChild(e);          e.setAttribute("loc",key);          e.setAttribute("stamp",entry.getValue().toString());        }      }      String xml=serializeDocument(doc);      IPath libPath=getDefault().getStateLocation();      libPath=libPath.append(".install.xml");      File file=libPath.toFile();      if (!file.exists()) {        file.createNewFile();      }      stream=new BufferedOutputStream(new FileOutputStream(file));      stream.write(xml.getBytes("UTF8"));    } catch (    IOException e) {      log(e);    }catch (    CoreException e) {      log(e);    } finally {      if (stream != null) {        try {          stream.close();        } catch (        IOException e1) {        }      }    }  }}  }
class C{  public static <T>List<T>[] split(Collection<T> set,double[] weights){  if (set.size() >= weights.length) {    @SuppressWarnings("unchecked") List<T>[] arrays=new List[weights.length];    double totalweight=0.0;    for (    double w : weights)     totalweight+=w;    double[] relativeWeight=new double[weights.length];    for (int i=0; i < weights.length; i++)     relativeWeight[i]=weights[i] / totalweight;    int[] listSizes=new int[weights.length];    for (int i=0; i < weights.length; i++)     listSizes[i]=(int)(weights[i] / totalweight * (double)set.size());    int allocated=0;    for (    int ls : listSizes)     allocated+=ls;    int remainder=set.size() - allocated;    listSizes[0]+=remainder;    Iterator<T> it=set.iterator();    for (int i=0; i < listSizes.length; i++) {      List<T> segment=new ArrayList<>(listSizes[i]);      for (int k=0; k < listSizes[i]; k++) {        segment.add(it.next());      }      arrays[i]=segment;    }    return arrays;  } else {    throw new IllegalArgumentException("weigths.length must not be smaller than set size!");  }}  }
class C{  public CheckboxGroup(){}  }
class C{  @Override public double computeScoreNormalization(double cooccurrence,int similarNodeDegree,int nodeDegree){  return 1.0;}  }
class C{  public boolean on(ASN1ObjectIdentifier stem){  String id=getId(), stemId=stem.getId();  return id.length() > stemId.length() && id.charAt(stemId.length()) == '.' && id.startsWith(stemId);}  }
class C{  public void runTestOnMethod(MediaPlayerMethodUnderTest testMethod){  mMethodUnderTest=testMethod;  if (mMethodUnderTest != null) {    initializeMessageLooper();synchronized (lock) {      try {        lock.wait(WAIT_FOR_COMMAND_TO_COMPLETE);      } catch (      Exception e) {        Log.v(TAG,"runTestOnMethod: wait was interrupted.");      }    }    assertTrue(mInitialized);    checkMethodUnderTestInAllPossibleStates();    terminateMessageLooper();    assertTrue(mOnCompletionHasBeenCalled);    mMethodUnderTest.checkStateErrors(mStateErrors);    cleanUp();  }}  }
class C{  @Override public void onConnected(Bundle connectionHint){  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"onConnected: " + connectionHint);  }}  }
class C{  private static synchronized boolean isUpdatePending(){  return updatePending;}  }
class C{  @Override protected void onPause(){  super.onPause();  if (mPingReceiver != null) {    unregisterReceiver(mPingReceiver);    UiUtils.updateStatusBar(this,"Paused",R.drawable.idle,NOTIFICATION_ID);  }}  }
class C{  public InvocationKey(){}  }
class C{  public boolean contains(int indx){  return _elements.get(indx);}  }
class C{  public final int readUnsignedShort() throws IOException {  return ((int)readShort()) & 0xffff;}  }
class C{  public void createProcessPage(HttpServletRequest request,HttpServletResponse response,int AD_Process_ID,int AD_Window_ID){  WebSessionCtx wsc=WebSessionCtx.get(request);  MProcess process=MProcess.get(wsc.ctx,AD_Process_ID);  log.info("PI table id " + process.get_Table_ID());  log.info("PI table name id " + process.get_TableName());  log.info("PI table client id " + process.getAD_Client_ID());  log.info("PI table process id " + process.getAD_Process_ID());  log.info("PI  process class name " + process.getClassname());  WebDoc doc=null;  if (process == null) {    doc=WebDoc.createWindow("Process Not Found");  } else {    doc=WebDoc.createWindow(process.getName());    td center=doc.addWindowCenter(false);    if (process.getDescription() != null)     center.addElement(new p(new i(process.getDescription())));    if (process.getHelp() != null)     center.addElement(new p(process.getHelp(),AlignType.LEFT));    MPInstance pInstance=fillParameter(request,process);    int AD_Table_ID=WebUtil.getParameterAsInt(request,"AD_Table_ID");    int AD_Record_ID=WebUtil.getParameterAsInt(request,"AD_Record_ID");    ProcessInfo pi=new ProcessInfo(process.getName(),process.getAD_Process_ID(),AD_Table_ID,AD_Record_ID);    pi.setAD_User_ID(Env.getAD_User_ID(wsc.ctx));    pi.setAD_Client_ID(Env.getAD_Client_ID(wsc.ctx));    pi.setClassName(process.getClassname());    log.info("PI client id " + pi.getAD_Client_ID());    pi.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());    p p=new p();    p.addElement(Msg.translate(wsc.ctx,"AD_PInstance_ID") + ": " + pInstance.getAD_PInstance_ID());    center.addElement(p);    boolean processOK=false;    if (process.isWorkflow()) {      Trx trx=Trx.get(Trx.createTrxName("WebPrc"),true);      try {        WProcessCtl.process(this,AD_Window_ID,pi,trx,request);        trx.commit();        trx.close();      } catch (      Throwable t) {        trx.rollback();        trx.close();      }      if (pi.isError()) {        center.addElement(new p("Error:" + pi.getSummary(),AlignType.LEFT).setClass("Cerror"));        processOK=false;      } else {        center.addElement(new p("OK: Workflow Started",AlignType.LEFT));        processOK=true;      }      center.addElement(new p().addElement(pi.getSummary()));      center.addElement(pi.getLogInfo(true));    }    String jasper=process.getJasperReport();    if (process.isJavaProcess()) {      if (jasper != null) {        pi.setPrintPreview(false);        pi.setIsBatch(true);      }      Trx trx=Trx.get(Trx.createTrxName("WebPrc"),true);      try {        processOK=process.processIt(pi,trx);        trx.commit();        trx.close();      } catch (      Throwable t) {        trx.rollback();        trx.close();      }      if (!processOK || pi.isError()) {        center.addElement(new p("Error:" + pi.getSummary(),AlignType.LEFT).setClass("Cerror"));        processOK=false;      } else {        if (jasper != null) {          String error=WebUtil.streamFile(response,pi.getPDFReport());          if (error == null)           return;          doc=WebDoc.create(error);          wsc.ctx.put("AD_PInstance_ID=" + pInstance.getAD_PInstance_ID(),"ok");        } else {          center.addElement(new p().addElement(pi.getSummary()));          center.addElement(pi.getLogInfo(true));        }      }    }    if (process.isReport()) {      if (jasper == null) {        log.info(response.toString());        ReportEngine re=ReportEngine.get(wsc.ctx,pi);        if (re == null) {          center.addElement(new p("Could not start ReportEngine",AlignType.LEFT).setClass("Cerror"));        } else {          try {            File file=File.createTempFile("WProcess",".pdf");            boolean ok=re.createPDF(file);            if (ok) {              String error=WebUtil.streamFile(response,file);              if (error == null)               return;              doc=WebDoc.create(error);              wsc.ctx.put("AD_PInstance_ID=" + pInstance.getAD_PInstance_ID(),"ok");            } else             center.addElement(new p("Could not create Report",AlignType.LEFT).setClass("Cerror"));          } catch (          Exception e) {            center.addElement(new p("Could not create Report:",AlignType.LEFT).setClass("Cerror"));            center.addElement(e.toString());          }        }      }    }  }  doc.addPopupClose(wsc.ctx);  try {    WebUtil.createResponse(request,response,this,null,doc,false);  } catch (  IOException e) {    log.info(e.toString());  }}  }
class C{  public TransformerHandler newTransformerHandler() throws TransformerConfigurationException {  return new TransformerIdentityImpl(m_isSecureProcessing);}  }
class C{  private float[] popFloat(int count) throws PDFParseException {  float[] ary=new float[count];  for (int i=count - 1; i >= 0; i--) {    ary[i]=popFloat();  }  return ary;}  }
class C{  private Base64(){}  }
class C{  @SuppressWarnings({"ConstantConditions"}) private Object readResolve() throws ObjectStreamException {  try {    IgniteBiTuple<GridKernalContext,String> t=stash.get();    return t.get1().dataStructures().countDownLatch(t.get2(),0,false,false);  } catch (  IgniteCheckedException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  } finally {    stash.remove();  }}  }
class C{  public List<String> finish() throws IOException {  List<String> response=new ArrayList<String>();  writer.append("--" + boundary + "--").append(LINE_FEED);  writer.close();  int status=httpConn.getResponseCode();  if (status == HttpURLConnection.HTTP_OK) {    BufferedReader reader=new BufferedReader(new InputStreamReader(httpConn.getInputStream()));    String line=null;    while ((line=reader.readLine()) != null) {      response.add(line);    }    reader.close();    httpConn.disconnect();  } else {    throw new IOException("Server returned non-OK status: " + status);  }  return response;}  }
class C{  public static Collection<String> commaDelimitedListToSecurityAttributes(String attributes){  Collection<String> attrs=new HashSet<String>();  for (  String attribute : attributes.split(",")) {    attribute=attribute.trim();    if (!"".equals(attribute)) {      attrs.add(attribute);    }  }  return attrs;}  }
class C{  public final MonoProcessor<T> subscribe(){  MonoProcessor<T> s;  if (this instanceof MonoProcessor) {    s=(MonoProcessor<T>)this;  } else {    s=new MonoProcessor<>(this);  }  s.connect();  return s;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.POSTCONDITION___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.POSTCONDITION___CONSTRAINT_1:getConstraint_1().clear();return;}super.eUnset(featureID);}  }
class C{  public boolean hasProtocol(){  return super.hasAttribute(PROTOCOL);}  }
class C{  public void init() throws ServletException {}  }
class C{  public void dispose(){  form.dispose();}  }
class C{  public void addTableListener(TableListener listnr){  if (!m_listeners.contains(listnr))   m_listeners.add(listnr);}  }
class C{  private static <K,V>CacheConfiguration<K,V> cacheDepartment(){  CacheConfiguration<K,V> ccfg=cacheConfiguration(DEPARTMENT_CACHE_NAME);  Collection<QueryEntity> qryEntities=new ArrayList<>();  QueryEntity type=new QueryEntity();  qryEntities.add(type);  type.setKeyType(Integer.class.getName());  type.setValueType(Department.class.getName());  LinkedHashMap<String,String> qryFlds=new LinkedHashMap<>();  qryFlds.put("id","java.lang.Integer");  qryFlds.put("countryId","java.lang.Integer");  qryFlds.put("name","java.lang.String");  type.setFields(qryFlds);  ccfg.setQueryEntities(qryEntities);  return ccfg;}  }
class C{  public IllegalMonitorStateException(){}  }
class C{  @Nullable public Bitmap generateIconForUrl(String url,boolean includePrivateRegistries){  if (TextUtils.isEmpty(url))   return null;  String text=getIconTextForUrl(url,includePrivateRegistries);  if (TextUtils.isEmpty(text))   return null;  return generateIconForText(text);}  }
class C{  private static boolean useOfficialYouTubePlayer(Context context){  SharedPreferences sharedPref=PreferenceManager.getDefaultSharedPreferences(context);  return sharedPref.getBoolean(context.getString(R.string.pref_key_use_offical_player),false);}  }
class C{  public DateTimeFormatterBuilder append(DateTimeFormatter formatter){  if (formatter == null) {    throw new IllegalArgumentException("No formatter supplied");  }  return append0(formatter.getPrinter(),formatter.getParser());}  }
class C{  public void showProfileForId(String profileId) throws IOException, ServiceException {  out.println("CCR records for profile id: " + profileId);  ProfileFeed feed=service.getFeed(new URL(PROFILE_FEED_PATH + "ui/" + profileId),ProfileFeed.class);  for (  ProfileEntry entry : feed.getEntries()) {    out.println(entry.getContinuityOfCareRecord().getXmlBlob().getBlob());  }}  }
class C{  public Class<?> loadClass(final File classfile) throws ClassNotFoundException {  Class<?> c;  final int p=classfile.getName().indexOf('.',0);  if (p < 0)   throw new ClassNotFoundException("wrong class name: " + classfile.getName());  final String classname=classfile.getName().substring(0,p);  byte[] b;  try {    b=FileUtils.read(classfile);    c=this.defineClass(null,b,0,b.length);    resolveClass(c);  } catch (  final LinkageError ee) {    c=findLoadedClass(classname);    if (c != null)     return c;    throw new ClassNotFoundException("linkageError, " + ee.getMessage() + ":"+ classfile.toString());  }catch (  final IOException ee) {    throw new ClassNotFoundException(ee.getMessage() + ":" + classfile.toString());  }  return c;}  }
class C{  public int originalEventNumber(){  return originalEvent().eventNumber;}  }
class C{  public static void apply(View v,int rippleColor){  RippleConfig config=new RippleConfig();  config.setRippleColor(rippleColor);  apply(v,config,null);}  }
class C{  public static java.sql.Timestamp monthBegin(){  Calendar mth=Calendar.getInstance();  mth.set(Calendar.DAY_OF_MONTH,1);  mth.set(Calendar.HOUR_OF_DAY,0);  mth.set(Calendar.MINUTE,0);  mth.set(Calendar.SECOND,0);  mth.set(Calendar.MILLISECOND,0);  mth.set(Calendar.AM_PM,Calendar.AM);  return new java.sql.Timestamp(mth.getTime().getTime());}  }
class C{  public static String geFileFromRaw(Context context,int resId){  if (context == null) {    return null;  }  StringBuilder s=new StringBuilder();  try {    InputStreamReader in=new InputStreamReader(context.getResources().openRawResource(resId));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  private void addSynapseGroup(final SynapseGroup synapseGroup){  if (synapseGroup.isDisplaySynapses()) {    addSynapseGroupVisible(synapseGroup);  } else {    if (synapseGroup.getTargetNeuronGroup().equals(synapseGroup.getSourceNeuronGroup())) {      addSynapseGroupRecurrent(synapseGroup);    } else {      Set<SynapseGroup> targetGroupOutgoing=synapseGroup.getTargetNeuronGroup().getOutgoingSg();      Set<SynapseGroup> sourceGroupIncoming=synapseGroup.getSourceNeuronGroup().getIncomingSgs();      targetGroupOutgoing.retainAll(sourceGroupIncoming);      if (targetGroupOutgoing.size() != 0) {        final SynapseGroup reverse=(SynapseGroup)targetGroupOutgoing.toArray()[0];        if (objectNodeMap.get(reverse) != null) {          removeGroup(reverse);          addSynapseGroupBidirectional(synapseGroup,reverse);        } else {          addSynapseGroupSimple(synapseGroup);        }        return;      } else {        addSynapseGroupSimple(synapseGroup);      }    }  }  SynapseGroupNode synapseGroupNode=(SynapseGroupNode)objectNodeMap.get(synapseGroup);  NeuronGroupNode srcNode=(NeuronGroupNode)objectNodeMap.get(synapseGroup.getSourceNeuronGroup());  if (srcNode != null) {    srcNode.addPropertyChangeListener(PNode.PROPERTY_FULL_BOUNDS,synapseGroupNode);  }  NeuronGroupNode tarNode=(NeuronGroupNode)objectNodeMap.get(synapseGroup.getTargetNeuronGroup());  if (tarNode != null) {    tarNode.addPropertyChangeListener(PNode.PROPERTY_FULL_BOUNDS,synapseGroupNode);  }}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  public boolean isTimeout(){  return this.timeout;}  }
class C{  public InlineQueryResultDocument.InlineQueryResultDocumentBuilder description(String description){  this.description=description;  return this;}  }
class C{  public long addWrapField(long instant,int value){  throw unsupported();}  }
class C{  public void stopLocation(){  if (_phoneStateListener != null && _telephonyManager != null) {    _telephonyManager.listen(_phoneStateListener,PhoneStateListener.LISTEN_NONE);    _telephonyManager.listen(_signalStrengthListener,PhoneStateListener.LISTEN_NONE);    _phoneStateListener=null;    _signalStrengthListener=null;    _telephonyManager=null;    try {      Thread.currentThread().interrupt();    } catch (    SecurityException exc) {      Log.e(TAG,exc.getMessage());      sendCallback(PluginResult.Status.ERROR,JSONHelper.errorJSON(CELLINFO_PROVIDER,ErrorMessages.FAILED_THREAD_INTERRUPT()));    }    Log.d(TAG,"Stopping cell location listeners");  }}  }
class C{  @NonNull public <T>MapperBuilder bind(@NonNull Class<? extends T> itemClass,@NonNull Binder<? super T,? extends View> binder){  return bind(itemClass,0,binder,ALWAYS);}  }
class C{  public void insert(Item x,int position){  Item[] newItems=(Item[])new Object[items.length + 1];  System.arraycopy(items,0,newItems,0,position);  newItems[position]=x;  System.arraycopy(items,position,newItems,position + 1,items.length - position);  items=newItems;}  }
class C{  public static void checkFieldSignature(final String signature){  int pos=checkFieldTypeSignature(signature,0);  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected <T extends ManagedEntity>List<T> searchManagedEntities(ManagedEntity parent,Class<T> type,boolean recurse) throws VMWareException {  String typeName=type.getSimpleName();  List<T> results=Lists.newArrayList();  for (  ManagedEntity entity : searchManagedEntities(parent,typeName,recurse)) {    results.add((T)entity);  }  return results;}  }
class C{  public Interval copy(){  return new Interval(start,end);}  }
class C{  protected double assignRemainingToNearestCluster(ArrayDBIDs means,DBIDs ids,DBIDs rids,WritableIntegerDataStore assignment,DistanceQuery<V> distQ){  rids=DBIDUtil.ensureSet(rids);  double distsum=0.;  DBIDArrayIter miter=means.iter();  for (DBIDIter iditer=distQ.getRelation().iterDBIDs(); iditer.valid(); iditer.advance()) {    if (rids.contains(iditer)) {      continue;    }    double mindist=Double.POSITIVE_INFINITY;    int minIndex=0;    miter.seek(0);    for (int i=0; miter.valid(); miter.advance(), i++) {      double dist=distQ.distance(iditer,miter);      if (dist < mindist) {        minIndex=i;        mindist=dist;      }    }    distsum+=mindist;    assignment.put(iditer,minIndex);  }  return distsum;}  }
class C{  public boolean accept(File f){  if (f.isDirectory()) {    return true;  }  String extension=getExtension(f);  if (extension != null) {    return extension.equals(csv);  }  return false;}  }
class C{  @Ignore @Test public void test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  Thread.sleep(60000);{    AsyncInvocation inv1=vm7.invokeAsync(null);    Thread.sleep(1000);    AsyncInvocation inv2=vm4.invokeAsync(null);    Thread.sleep(2000);    AsyncInvocation inv3=vm6.invokeAsync(null);    Thread.sleep(1500);    AsyncInvocation inv4=vm5.invokeAsync(null);    try {      inv1.join();      inv2.join();      inv3.join();      inv4.join();    } catch (    Exception e) {      Assert.fail("UnExpected Exception",e);    }  }  vm6.invoke(null);  vm7.invoke(null);  vm2.invoke(null);}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  public void clearAllAttacks(){  attackSprites.clear();}  }
class C{  public long keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected Node newNode(){  return new SVGOMFEFuncBElement();}  }
class C{  public final static int findFirstEqual(char[] source,int index,char match){  for (int i=index; i < source.length; i++) {    if (source[i] == match) {      return i;    }  }  return -1;}  }
class C{  private void updateKeyWithLatestBlockKeygenerator(){  try {    long[] data=null;    ByteArrayWrapper key=null;    for (int i=0; i < listBasedResult.size(); i++) {      key=listBasedResult.get(i).getKey();      data=tableBlockExecutionInfos.getBlockKeyGenerator().getKeyArray(key.getDictionaryKey(),tableBlockExecutionInfos.getMaskedByteForBlock());      key.setDictionaryKey(QueryUtil.getMaskedKey(restructureInfos.getKeyGenerator().generateKey(data),restructureInfos.getMaxKey(),restructureInfos.getMaskByteRanges(),restructureInfos.getMaskByteRanges().length));      listBasedResult.get(i).setKey(key);    }  } catch (  KeyGenException e) {    LOGGER.error(e);  }}  }
class C{  @Override public void stop(){}  }
class C{  private boolean isStringContinuation(int offset){  int nextNonWSCharPosition=fScanner.findNonWhitespaceBackwardInAnyPartition(offset - 1,JavaHeuristicScanner.UNBOUND);  try {    if (nextNonWSCharPosition != JavaHeuristicScanner.NOT_FOUND && fDocument.getChar(nextNonWSCharPosition) == '"')     return true; else     return false;  } catch (  BadLocationException e) {    JavaPlugin.log(e);    return false;  }}  }
class C{  private String _serializeStruct(Struct struct,Set<Object> done) throws ConverterException {  StringBuilder sb=new StringBuilder(goIn() + "<struct>");  Iterator<Key> it=struct.keyIterator();  deep++;  while (it.hasNext()) {    Key key=it.next();    sb.append(goIn() + "<var name=" + del+ XMLUtil.escapeXMLString(key.toString())+ del+ ">");    sb.append(_serialize(struct.get(key,null),done));    sb.append(goIn() + "</var>");  }  deep--;  sb.append(goIn() + "</struct>");  return sb.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public PhotoUrls photoUrls(){  return photoUrls;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) private void initialize(boolean isRtlContext){  mIsRtlContext=isRtlContext;  mTextDirectionHeuristicCompat=DEFAULT_TEXT_DIRECTION_HEURISTIC;  mFlags=DEFAULT_FLAGS;}  }
class C{  PrivateKeyInfo(byte[] encoded) throws IOException {  DerValue val=new DerValue(encoded);  if (val.tag != DerValue.tag_Sequence)   throw new IOException("private key parse error: not a sequence");  BigInteger parsedVersion=val.data.getBigInteger();  if (!parsedVersion.equals(VERSION)) {    throw new IOException("version mismatch: (supported: " + VERSION + ", parsed: "+ parsedVersion);  }  this.algid=AlgorithmId.parse(val.data.getDerValue());  this.privkey=val.data.getOctetString();}  }
class C{  public CLIOutputResponse proplist(final PropertyListRequest request) throws IOException, ServerException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  uArgs.add("proplist");  final CommandLineResult result=runCommand(null,uArgs,projectPath,Arrays.asList(request.getPath()));  List<String> output;  if (result.getStdout() != null && result.getStdout().size() > 0) {    output=result.getStdout().subList(1,result.getStdout().size());  } else {    output=result.getStdout();  }  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(output);}  }
class C{  public boolean checkExists(TriggerKey triggerKey) throws SchedulerException {  return sched.checkExists(triggerKey);}  }
class C{  @SuppressWarnings("unchecked") public SortedSet<E> headSet(E end){  return headSet(end,false);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public SQLClientInfoException(){  this.failedProperties=null;}  }
class C{  protected void init(String topic,String groupId){  Properties props=new Properties();  props.put("bootstrap.servers",PropertyUtil.getProperty(PropertyUtil.HAWKULAR_APM_URI,PropertyUtil.KAFKA_PREFIX + "localhost:9092").substring(PropertyUtil.KAFKA_PREFIX.length()));  props.put("group.id",groupId);  props.put("enable.auto.commit","true");  props.put("auto.commit.interval.ms",PropertyUtil.getProperty(PropertyUtil.HAWKULAR_APM_KAFKA_CONSUMER_AUTO_COMMIT_INTERVAL,"1000"));  props.put("session.timeout.ms",PropertyUtil.getProperty(PropertyUtil.HAWKULAR_APM_KAFKA_CONSUMER_SESSION_TIMEOUT,"30000"));  props.put("key.deserializer","org.apache.kafka.common.serialization.StringDeserializer");  props.put("value.deserializer","org.apache.kafka.common.serialization.StringDeserializer");  String maxPollRecords=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_APM_KAFKA_MAX_POLL_RECORDS);  if (maxPollRecords != null) {    props.put("max.poll.records",maxPollRecords);  }  consumer=new KafkaConsumer<>(props);  consumer.subscribe(Arrays.asList(topic));  pollingInterval=PropertyUtil.getPropertyAsInteger(PropertyUtil.HAWKULAR_APM_KAFKA_POLLING_INTERVAL,DEFAULT_POLLING_INTERVAL);}  }
class C{  public List<T> findByProject(URI projectId){  return search().byProject(projectId).run();}  }
class C{  public static boolean idEquals(RelatedResourceRep first,DataObjectRestRep second){  return equals(id(first),id(second));}  }
class C{  public PreRemoveFromViewEvent(UIComponent component){  super(component);}  }
class C{  public boolean toStopping(){  LifecycleState state;synchronized (this) {    state=_state;    if (state.isAfterStopping() || state.isStarting()) {      return false;    }    _state=STOPPING;    _lastChangeTime=CurrentTime.currentTime();  }  if (_log != null && _log.isLoggable(_level)) {    _log.log(_level,"stopping " + _name);  }  notifyListeners(state,STOPPING);  return true;}  }
class C{  public static boolean cs_utsolve(Scs U,float[] x){  int p, j, n, Up[], Ui[];  float Ux[];  if (!Scs_util.CS_CSC(U) || x == null)   return (false);  n=U.n;  Up=U.p;  Ui=U.i;  Ux=U.x;  for (j=0; j < n; j++) {    for (p=Up[j]; p < Up[j + 1] - 1; p++) {      x[j]-=Ux[p] * x[Ui[p]];    }    x[j]/=Ux[Up[j + 1] - 1];  }  return (true);}  }
class C{  public void createSubUsageScenario05() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.hoursToMillis(25.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO05_PERUNIT_HOUR",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_HOUR_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO05_PERUNIT_HOUR",serviceDetails,basicSetup.getSecondCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.hoursToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO05_PERUNIT_HOUR",subDetails);}  }
class C{  public static int nextGreaterValueToTarget(int currentIndex,FixedLengthDimensionDataChunk dimColumnDataChunk,byte[] compareValue,int numerOfRows){  while (currentIndex + 1 < numerOfRows && ByteUtil.UnsafeComparer.INSTANCE.compareTo(dimColumnDataChunk.getCompleteDataChunk(),(currentIndex + 1) * compareValue.length,compareValue.length,compareValue,0,compareValue.length) <= 0) {    ++currentIndex;  }  return ++currentIndex;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.447 -0500",hash_original_method="68C20202F4C35ADB2F9CDE7850BF84CC",hash_generated_method="86CC35C50127CAC1253F81E3702F1634") public boolean endBatchEdit(){  return false;}  }
class C{  public static void main(String[] args){  TestAnnotationTypes tester=new TestAnnotationTypes();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void add(String level,Integer hour,Integer value){  if (value == null || value == 0)   return;  getTimeLine(level).put(hour,getTimeLine(level).get(hour) + value);}  }
class C{  public NotificationChain basicSetElseStmt(Statement newElseStmt,NotificationChain msgs){  Statement oldElseStmt=elseStmt;  elseStmt=newElseStmt;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.IF_STATEMENT__ELSE_STMT,oldElseStmt,newElseStmt);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override protected boolean operateOnRegion(DistributionManager dm,LocalRegion r,long startTime) throws EntryExistsException, RemoteOperationException {  InternalDistributedMember eventSender=originalSender;  if (eventSender == null) {    eventSender=getSender();  }  final Object key=getKey();  @Released final EntryEventImpl event=EntryEventImpl.create(r,getOperation(),key,null,getCallbackArg(),this.useOriginRemote,eventSender,true,false);  try {    if (this.bridgeContext != null) {      event.setContext(this.bridgeContext);    }    event.setCausedByMessage(this);    if (this.versionTag != null) {      this.versionTag.replaceNullIDs(getSender());      event.setVersionTag(this.versionTag);    }    Assert.assertTrue(eventId != null);    event.setEventId(eventId);    event.setPossibleDuplicate(this.possibleDuplicate);    boolean eventShouldHaveOldValue=getHasOldValue();    if (eventShouldHaveOldValue) {      if (getOldValueIsSerialized()) {        event.setSerializedOldValue(getOldValueBytes());      } else {        event.setOldValue(getOldValueBytes());      }    }    boolean sendReply=true;    try {      r.checkReadiness();      r.checkForLimitedOrNoAccess();      r.basicInvalidate(event);      if (logger.isTraceEnabled(LogMarker.DM)) {        logger.trace(LogMarker.DM,"remoteInvalidated key: {}",key);      }      sendReply(getSender(),this.processorId,dm,null,event.getRegion(),event.getVersionTag(),startTime);      sendReply=false;    } catch (    EntryNotFoundException eee) {      if (logger.isDebugEnabled()) {        logger.debug("operateOnRegion caught EntryNotFoundException");      }      sendReply(getSender(),getProcessorId(),dm,new ReplyException(eee),r,null,startTime);      sendReply=false;    }catch (    PrimaryBucketException pbe) {      sendReply(getSender(),getProcessorId(),dm,new ReplyException(pbe),r,startTime);      return false;    }    return sendReply;  }  finally {    event.release();  }}  }
class C{  public boolean isClosed() throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.opnotysupp").toString());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static MarkupModel forDocument(@NotNull Document document,@Nullable Project project,boolean create){  if (document instanceof DocumentWindow) {    final Document delegate=((DocumentWindow)document).getDelegate();    final MarkupModelEx baseMarkupModel=(MarkupModelEx)forDocument(delegate,project,true);    return new MarkupModelWindow(baseMarkupModel,(DocumentWindow)document);  }  if (project == null) {    MarkupModelEx markupModel=document.getUserData(MARKUP_MODEL_KEY);    if (create && markupModel == null) {      MarkupModelEx newModel=new MarkupModelImpl((DocumentEx)document);      if ((markupModel=((UserDataHolderEx)document).putUserDataIfAbsent(MARKUP_MODEL_KEY,newModel)) != newModel) {        newModel.dispose();      }    }    return markupModel;  }  final DocumentMarkupModelManager documentMarkupModelManager=project.isDisposed() ? null : DocumentMarkupModelManager.getInstance(project);  if (documentMarkupModelManager == null || documentMarkupModelManager.isDisposed() || project.isDisposed()) {    return new EmptyMarkupModel(document);  }  ConcurrentMap<Project,MarkupModelImpl> markupModelMap=getMarkupModelMap(document);  MarkupModelImpl model=markupModelMap.get(project);  if (create && model == null) {    MarkupModelImpl newModel=new MarkupModelImpl((DocumentEx)document);    if ((model=ConcurrencyUtil.cacheOrGet(markupModelMap,project,newModel)) == newModel) {      documentMarkupModelManager.registerDocument(document);    } else {      newModel.dispose();    }  }  return model;}  }
class C{  protected boolean usePortal(final Player player){  if (!player.isZoneChangeAllowed()) {    player.sendPrivateText("For some reason you cannot get through right now.");    return false;  }  if (!nextTo(player) && has("use")) {    player.sendPrivateText("You must come closer before you can use this orb.");    return false;  }  if (!nextTo(player)) {    if (!player.getZone().isMoveToAllowed()) {      player.sendPrivateText("Mouse movement is not possible here. Use your keyboard.");    } else     if (player.hasStatus(StatusType.POISONED)) {      player.sendPrivateText("Poison has disoriented you and you cannot move normally. You only seem able to walk backwards and cannot plan out any route in advance.");    } else {      final List<Node> path=Path.searchPath(player,this.getX(),this.getY());      player.setPath(new FixedPath(path,false));    }    return false;  }  if (getDestinationZone() == null) {    logger.error(this + " has no destination.");    return false;  }  final StendhalRPZone destZone=SingletonRepository.getRPWorld().getZone(getDestinationZone());  if (destZone == null) {    logger.error(this + " has invalid destination zone: " + getDestinationZone());    return false;  }  final Portal dest=destZone.getPortal(getDestinationReference());  if (dest == null) {    logger.error(this + " has invalid destination identitifer: " + getDestinationReference());    return false;  }  if (player.teleport(destZone,dest.getX(),dest.getY(),null,null)) {    if (!Testing.MOVEMENT) {      player.stop();    }    dest.onUsedBackwards(player);  }  return true;}  }
class C{  public MilitaryPlatform_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public static LimeProcess exec(String[] cmdarray) throws SecurityException, LaunchException {  LimeProcess p=new LimeProcess(cmdarray);  p.exec();  return p;}  }
class C{  public void clearWarnings() throws SQLException {  if (this.isClosed()) {    throw ExceptionMapper.getSqlException("Connection.clearWarnings cannot be called on a closed connection");  }  warningsCleared=true;}  }
class C{  public void terminateActiveTrain(ActiveTrain at){  if (at == null) {    log.error("Null ActiveTrain pointer when attempting to terminate an ActiveTrain");    return;  }  for (int k=allocationRequests.size(); k > 0; k--) {    if (at == allocationRequests.get(k - 1).getActiveTrain()) {      allocationRequests.get(k - 1).dispose();      allocationRequests.remove(k - 1);    }  }  for (int k=allocatedSections.size(); k > 0; k--) {    try {      if (at == allocatedSections.get(k - 1).getActiveTrain()) {        releaseAllocatedSection(allocatedSections.get(k - 1),true);      }    } catch (    Exception e) {      log.warn("releaseAllocatedSection failed - maybe the AllocatedSection was removed due to a terminating train??",e.toString());      continue;    }  }  for (int j=restartingTrainsList.size(); j > 0; j--) {    if (at == restartingTrainsList.get(j - 1)) {      restartingTrainsList.remove(j - 1);    }  }  for (int m=activeTrainsList.size(); m > 0; m--) {    if (at == activeTrainsList.get(m - 1)) {      activeTrainsList.remove(m - 1);      at.removePropertyChangeListener(_atListeners.get(m - 1));      _atListeners.remove(m - 1);    }  }  if (at.getAutoRun()) {    AutoActiveTrain aat=at.getAutoActiveTrain();    _autoTrainsFrame.removeAutoActiveTrain(aat);    aat.terminate();    aat.dispose();  }  removeHeldMast(null,at);  at.terminate();  at.dispose();  activeTrainsTableModel.fireTableDataChanged();  if (allocatedSectionTableModel != null) {    allocatedSectionTableModel.fireTableDataChanged();  }  allocationRequestTableModel.fireTableDataChanged();}  }
class C{  public static void main(String argv[]){  if (argv.length != 3) {    System.out.println("Tungsten ping utility");    System.out.println("Usage: tping hostname port timeout");    System.out.println("   timeout is in milliseconds");    System.exit(1);  } else {    try {      String hostName=argv[0];      int portNumber=Integer.parseInt(argv[1]);      int timeout=Integer.parseInt(argv[2]);      TungstenProperties result=isReachable(hostName,portNumber,timeout);      if (result.getObject(Echo.STATUS_KEY) == EchoStatus.OK) {        System.exit(0);      } else {        EchoStatus echoStatus=(EchoStatus)result.getObject(STATUS_KEY);        System.exit(1 + echoStatus.ordinal());      }    } catch (    NumberFormatException e) {      System.out.println("Error parsing number: " + e.getMessage());      System.exit(1);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().hasRemoteFSSupport()) {    return new Long(((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).fsGetFileSize(getString(stack)));  } else   return new Long(getFile(stack).length());}  }
class C{  @Deprecated public void addTrapFish(FishTrapEntry entry){  addCatchToGroup(entry,"fish");}  }
class C{  public static void main(final String[] args) throws IOException {  String queryString=System.getProperty("query");  if (queryString == null || queryString.isEmpty()) {    System.out.println("The query property was not set, using default.");    queryString=DEFAULT_QUERY;  }  System.out.printf("query: %s\n",queryString);  String waitTimeString=System.getProperty("waitTime");  if (waitTimeString == null || waitTimeString.isEmpty()) {    waitTimeString="1000";  }  long waitTime=Long.parseLong(waitTimeString);  System.out.printf("waitTime: %d (milliseconds)\n",waitTime);  if (waitTime > TEN_SECONDS_MILLIS) {    System.out.println("WARNING: If the query is going to take longer than 10 seconds to complete, use an" + " asynchronous query.");  }  String useLegacySqlString=System.getProperty("useLegacySql");  if (useLegacySqlString == null || useLegacySqlString.isEmpty()) {    useLegacySqlString="false";  }  boolean useLegacySql=Boolean.parseBoolean(useLegacySqlString);  run(System.out,queryString,waitTime,useLegacySql);}  }
class C{  public Gobble(InputStream in){  this(null,in,null);}  }
class C{  public void testBitLengthPositive2(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(96,aNumber.bitLength());}  }
class C{  public void addColumn(String header){  WTableColumn tableColumn;  tableColumn=new WTableColumn();  tableColumn.setHeaderValue(Util.cleanAmp(header));  setColumnVisibility(tableColumn,true);  m_tableColumns.add(tableColumn);  return;}  }
class C{  @LargeTest public void testCameraPairwiseScenario20() throws Exception {  genericPairwiseTestCase(Flash.OFF,Exposure.MAX,WhiteBalance.FLUORESCENT,SceneMode.AUTO,PictureSize.MEDIUM,Geotagging.OFF);}  }
class C{  public VCardValidateChecker prop(VCardProperty property,Integer... expectedCodes){  expectedPropCodes.put(property,expectedCodes);  return this;}  }
class C{  public int computePastValue(int[] x,int t){  int pastVal=0;  for (int p=0; p < k; p++) {    pastVal*=base;    pastVal+=x[t - k + 1 + p];  }  return pastVal;}  }
class C{  public ScanCostReport estimateCost(){  if (ndx instanceof UnisolatedReadWriteIndex) {    return ((UnisolatedReadWriteIndex)ndx).estimateCost(diskCostModel,rangeCount(false));  }  if (ndx instanceof BTree) {    final long rangeCount=rangeCount(false);    return estimateCost(diskCostModel,(BTree)ndx,rangeCount);  }  if (ndx instanceof ILocalBTreeView) {    final long rangeCount=rangeCount(false);    return estimateCost((ILocalBTreeView)ndx,rangeCount,fromKey,toKey);  }  if (ndx instanceof IScaleOutClientIndex) {    return estimateCost((IScaleOutClientIndex)ndx);  }  throw new UnsupportedOperationException("index=" + ndx);}  }
class C{  public void endElement(String uri,String localName,String rawName) throws org.xml.sax.SAXException {  m_elementID--;  if (!m_shouldProcess)   return;  if ((m_elementID + 1) == m_fragmentID)   m_shouldProcess=false;  flushCharacters();  popSpaceHandling();  XSLTElementProcessor p=getCurrentProcessor();  p.endElement(this,uri,localName,rawName);  this.popProcessor();  this.getNamespaceSupport().popContext();}  }
class C{  private void jsFetchUpdate(CallbackContext callback,CordovaArgs args){  if (!isPluginReadyForWork) {    sendPluginNotReadyToWork(UpdateDownloadErrorEvent.EVENT_NAME,callback);    return;  }  FetchUpdateOptions fetchOptions=null;  try {    fetchOptions=new FetchUpdateOptions(args.optJSONObject(0));  } catch (  JSONException ignored) {  }  fetchUpdate(callback,fetchOptions);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case ImPackage.REFERENCING_ELEMENT_EXPRESSION_IM___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:    return isValidSimpleAssignmentTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean applyTo(ImageView imageView,String tag){  if (mUri != null) {    imageView.setImageURI(mUri);  } else   if (mIcon != null) {    imageView.setImageDrawable(mIcon);  } else   if (mBitmap != null) {    imageView.setImageBitmap(mBitmap);  } else   if (mIconRes != -1) {    imageView.setImageResource(mIconRes);  } else {    imageView.setImageBitmap(null);    return false;  }  return true;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected boolean addHash(Object entity,Hasher hasher){  EntityType entityType=getElementType(entity);  if (entityType == UNKNOWN) {    return false;  }  try {    hasher.putString(getJson(entity,entityType),Charset.defaultCharset());  } catch (  RuntimeException e) {    return false;  }  return true;}  }
class C{  public String tableNameTipText(){  return "Sets the name of the table.";}  }
class C{  private boolean xor(boolean... args){  boolean currentVal=args[0];  for (int i=1; i < args.length; i++) {    if (currentVal && args[i]) {      return false;    }    currentVal|=args[i];  }  return currentVal;}  }
class C{  public SVGFeOffsetElementBridge(){}  }
class C{  public RoundedBitmapBuilder oval(boolean oval){  mOval=oval;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String inputFilesString=null;  WhiteboxRaster.DataScale dataScale=WhiteboxRaster.DataScale.CONTINUOUS;  String[] imageFiles;  int numImages=0;  int i;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      if (args[i].toLowerCase().contains("bool")) {        dataScale=WhiteboxRaster.DataScale.BOOLEAN;      } else       if (args[i].toLowerCase().contains("cat")) {        dataScale=WhiteboxRaster.DataScale.CATEGORICAL;      } else       if (args[i].toLowerCase().contains("con")) {        dataScale=WhiteboxRaster.DataScale.CONTINUOUS;      } else       if (args[i].toLowerCase().contains("rgb")) {        dataScale=WhiteboxRaster.DataScale.RGB;      }    }  }  if (inputFilesString == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      inputHeader=imageFiles[i];      WhiteboxRaster wbr=new WhiteboxRaster(inputHeader,"r");      if (dataScale == WhiteboxRaster.DataScale.RGB && wbr.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("Data scale RGB is only compatible with data type 'float'. " + "This tool will not execute");        return;      }      wbr.setDataScale(dataScale);      wbr.writeHeaderFile();      wbr.close();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void refreshArrow(){  fExpandBlock.setEnabled(fContentProvider.hasChildren(getData()));}  }
class C{  public static boolean isMetaDataAvailable(EncodedImage encodedImage){  return encodedImage.mRotationAngle >= 0 && encodedImage.mWidth >= 0 && encodedImage.mHeight >= 0;}  }
class C{  public MatrixAtom(boolean isPartial,ArrayOfAtoms array,String options){  this(isPartial,array,options,false);}  }
class C{  private CNode findHost(Instance newInstance,boolean structureFrozen) throws Exception {  if (!structureFrozen) {    updateStats(newInstance,false);  }  double[] categoryUtils=cuScoresForChildren(newInstance);  CNode newLeaf=new CNode(m_numAttributes,newInstance);  m_children.add(newLeaf);  double bestHostCU=categoryUtility();  CNode finalBestHost=newLeaf;  m_children.remove(m_children.size() - 1);  int best=0;  int secondBest=0;  for (int i=0; i < categoryUtils.length; i++) {    if (categoryUtils[i] > categoryUtils[secondBest]) {      if (categoryUtils[i] > categoryUtils[best]) {        secondBest=best;        best=i;      } else {        secondBest=i;      }    }  }  CNode a=m_children.get(best);  CNode b=m_children.get(secondBest);  if (categoryUtils[best] > bestHostCU) {    bestHostCU=categoryUtils[best];    finalBestHost=a;  }  if (structureFrozen) {    if (finalBestHost == newLeaf) {      return null;    } else {      return finalBestHost;    }  }  double mergedCU=-Double.MAX_VALUE;  CNode merged=new CNode(m_numAttributes);  if (a != b) {    mergedCU=cuScoreForBestTwoMerged(merged,a,b,newInstance);    if (mergedCU > bestHostCU) {      bestHostCU=mergedCU;      finalBestHost=merged;    }  }  double splitCU=-Double.MAX_VALUE;  double splitBestChildCU=-Double.MAX_VALUE;  double splitPlusNewLeafCU=-Double.MAX_VALUE;  double splitPlusMergeBestTwoCU=-Double.MAX_VALUE;  if (a.m_children != null) {    ArrayList<CNode> tempChildren=new ArrayList<CNode>();    for (int i=0; i < m_children.size(); i++) {      CNode existingChild=m_children.get(i);      if (existingChild != a) {        tempChildren.add(existingChild);      }    }    for (int i=0; i < a.m_children.size(); i++) {      CNode promotedChild=a.m_children.get(i);      tempChildren.add(promotedChild);    }    tempChildren.add(newLeaf);    ArrayList<CNode> saveStatusQuo=m_children;    m_children=tempChildren;    splitPlusNewLeafCU=categoryUtility();    tempChildren.remove(tempChildren.size() - 1);    categoryUtils=cuScoresForChildren(newInstance);    best=0;    secondBest=0;    for (int i=0; i < categoryUtils.length; i++) {      if (categoryUtils[i] > categoryUtils[secondBest]) {        if (categoryUtils[i] > categoryUtils[best]) {          secondBest=best;          best=i;        } else {          secondBest=i;        }      }    }    CNode sa=m_children.get(best);    CNode sb=m_children.get(secondBest);    splitBestChildCU=categoryUtils[best];    CNode mergedSplitChildren=new CNode(m_numAttributes);    if (sa != sb) {      splitPlusMergeBestTwoCU=cuScoreForBestTwoMerged(mergedSplitChildren,sa,sb,newInstance);    }    splitCU=(splitBestChildCU > splitPlusNewLeafCU) ? splitBestChildCU : splitPlusNewLeafCU;    splitCU=(splitCU > splitPlusMergeBestTwoCU) ? splitCU : splitPlusMergeBestTwoCU;    if (splitCU > bestHostCU) {      bestHostCU=splitCU;      finalBestHost=this;    } else {      m_children=saveStatusQuo;    }  }  if (finalBestHost != this) {    m_clusterInstances.add(newInstance);  } else {    m_numberSplits++;  }  if (finalBestHost == merged) {    m_numberMerges++;    m_children.remove(m_children.indexOf(a));    m_children.remove(m_children.indexOf(b));    m_children.add(merged);  }  if (finalBestHost == newLeaf) {    finalBestHost=new CNode(m_numAttributes);    m_children.add(finalBestHost);  }  if (bestHostCU < m_cutoff) {    if (finalBestHost == this) {      m_clusterInstances.add(newInstance);    }    m_children=null;    finalBestHost=null;  }  if (finalBestHost == this) {    updateStats(newInstance,true);  }  return finalBestHost;}  }
class C{  private static int generateLocalUdpPort(int portBase){  int resp=-1;  int port=portBase;  while ((resp == -1) && (port < Integer.MAX_VALUE)) {    if (isLocalUdpPortFree(port)) {      resp=port;    } else {      port+=2;    }  }  return resp;}  }
class C{  public void addDataSource(){  Integer index=dataset.getSeriesCount();  dataset.addSeries(new XYSeries(index + 1));  this.fireDataSourceAdded(index + 1);}  }
class C{  static String stringToIdentifier(String jsonName,boolean preserveCase){  String identifierName=null;  if (jsonName != null) {    char[] data=jsonName.toCharArray();    if (data.length == 0)     return ("");    boolean hasUpper=false;    boolean hasLower=false;    boolean toUpper=!preserveCase;    for (int i=0; i < data.length; ++i) {      char ch=data[i];      if (ch == '"')       data[i]='_'; else       if (ch < ' ')       data[i]='_'; else       if ((ch >= 'A') && (ch <= 'Z'))       hasUpper=true; else       if ((ch >= 'a') && (ch <= 'z'))       hasLower=true; else       if (((ch < '0') || (ch > '9')) && ((ch != '_') && (ch != '$') && (ch != '#')))       toUpper=false;    }    if (toUpper && hasUpper && hasLower)     toUpper=false;    if (toUpper) {      char ch=data[0];      if (((ch < 'A') || (ch > 'Z')) && ((ch < 'a') || (ch > 'z')))       toUpper=false;    }    identifierName=new String(data);    if (toUpper)     identifierName=identifierName.toUpperCase(Locale.US);  }  return (identifierName);}  }
class C{  public static int nextZipfInt(double z,MersenneTwisterFast randomGenerator){  final double b=Math.pow(2.0,z - 1.0);  final double constant=-1.0 / (z - 1.0);  int result=0;  for (; ; ) {    double u=randomGenerator.nextDouble();    double v=randomGenerator.nextDouble();    result=(int)(Math.floor(Math.pow(u,constant)));    double t=Math.pow(1.0 + 1.0 / result,z - 1.0);    if (v * result * (t - 1.0) / (b - 1.0) <= t / b)     break;  }  return result;}  }
class C{  private static void removeDashes(Editable text){  int p=0;  while (p < text.length()) {    if (text.charAt(p) == '-') {      text.delete(p,p + 1);    } else {      p++;    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable ignored) {  }}  }
class C{  public DefaultMapEntry(final Map.Entry<? extends K,? extends V> entry){  super(entry.getKey(),entry.getValue());}  }
class C{  private void checkForBrokenTransitions(States states){  List<State> allStates=states.getStates();  for (  State s : allStates) {    if (s.getEvents() == null) {      continue;    }    for (    Event e : s.getEvents()) {      findStateById(e.getState(),states);    }  }}  }
class C{  public void checkSortability() throws SolrException {  if (!(indexed() || hasDocValues())) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"can not sort on a field which is neither indexed nor has doc values: " + getName());  }  if (multiValued()) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"can not sort on multivalued field: " + getName());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:10.340 -0500",hash_original_method="EB96D9E246D4FDE5EEEAEC5ECFA9C261",hash_generated_method="7C1050428167AAF5169AA19185F44CF4") public boolean isGMT(){  return __isGMT;}  }
class C{  public String peek(){  return executeStack.isEmpty() ? null : executeStack.peek();}  }
class C{  public static long average(List<Long> values){  double sum=0d;  for (  long value : values) {    sum+=value;  }  return (long)(sum / (double)values.size());}  }
class C{  public void test_CtorLjava_io_OutputStreamLjava_security_MessageDigest(){  MessageDigest md=new MyMessageDigest1();  MyOutputStream out=new MyOutputStream();  MyDigestOutputStream dos=new MyDigestOutputStream(out,md);  assertSame(out,dos.myOutputStream());  assertSame(md,dos.myMessageDigest());  dos=new MyDigestOutputStream(null,null);  assertNull(dos.myOutputStream());  assertNull(dos.myMessageDigest());  dos=new MyDigestOutputStream(null,md);  assertNull(dos.myOutputStream());  assertNotNull(dos.myMessageDigest());  dos=new MyDigestOutputStream(out,null);  assertNotNull(dos.myOutputStream());  assertNull(dos.myMessageDigest());}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public HttpHeaders preflightResponseHeaders(){  ensureEnabled();  if (preflightResponseHeaders.isEmpty()) {    return HttpHeaders.EMPTY_HEADERS;  }  final HttpHeaders preflightHeaders=new DefaultHttpHeaders(false);  for (  Entry<AsciiString,Supplier<?>> entry : preflightResponseHeaders.entrySet()) {    final Object value=getValue(entry.getValue());    if (value instanceof Iterable) {      preflightHeaders.addObject(entry.getKey(),(Iterable<?>)value);    } else {      preflightHeaders.addObject(entry.getKey(),value);    }  }  return preflightHeaders;}  }
class C{  public static Query toQuery(Object o,Query defaultValue){  if (o instanceof Query)   return (Query)o; else   if (o instanceof ObjectWrap) {    return toQuery(((ObjectWrap)o).getEmbededObject(defaultValue),defaultValue);  }  return defaultValue;}  }
class C{  private static SimplexNoise createNoiseFunction(long seed){  Random random=new Random(seed);  fakePerlin3dOctavesConstructor(random,16);  fakePerlin3dOctavesConstructor(random,16);  fakePerlin3dOctavesConstructor(random,8);  fakePerlin3dOctavesConstructor(random,10);  fakePerlin3dOctavesConstructor(random,16);  return new SimplexNoise(random);}  }
class C{  private static boolean parentExists(Resource res){  res=res.getParentResource();  return res != null && res.exists();}  }
class C{  public RunPanel(Experiment exp){  this();  setExperiment(exp);}  }
class C{  private AsyncFuture<FindTags> findSingle(final String tag) throws Exception {  final Filter filter=modifier.removeTag(this.filter,tag);  final FilterBuilder f=ctx.filter(filter);  return findtags(setup,ctx,f,tag);}  }
class C{  @Override public Handle stringLiteral(TerminalAST stringLiteralAST){  String chars=stringLiteralAST.getText();  chars=CharSupport.getStringFromGrammarStringLiteral(chars);  int n=chars.length();  ATNState left=newState(stringLiteralAST);  ATNState prev=left;  ATNState right=null;  for (int i=0; i < n; i++) {    right=newState(stringLiteralAST);    prev.addTransition(new AtomTransition(right,chars.charAt(i)));    prev=right;  }  stringLiteralAST.atnState=left;  return new Handle(left,right);}  }
class C{  public static String decode(final String encodedValue){  return decode(encodedValue,DEFAULT_ENCODING);}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public ClusterMembershipDigest(String name,Collection<String> configuredDBMembers,Collection<String> configuredActiveWitnesses,Collection<String> viewDBMembers,Collection<String> viewActiveWitnessMembers,List<String> passiveWitnesses){  this.name=name;  if (configuredDBMembers != null) {    this.configuredDBMembers.addAll(configuredDBMembers);  }  if (configuredActiveWitnesses != null && configuredActiveWitnesses.size() > 0) {    this.configuredActiveWitnesses.addAll(configuredActiveWitnesses);  }  if (viewDBMembers != null) {    this.viewDBMembers.addAll(viewDBMembers);    this.consolidatedViewMembers.addAll(viewDBMembers);  }  if (viewActiveWitnessMembers != null) {    this.viewActiveWitnessMembers.addAll(viewActiveWitnessMembers);    this.consolidatedViewMembers.addAll(viewActiveWitnessMembers);  }  if (passiveWitnesses != null) {    this.passiveWitnesses.addAll(passiveWitnesses);  }  derivePotentialQuorumMembersSet();}  }
class C{  protected void precomputeInterestingRadii(DBIDs ids,RangeQuery<O> rangeQuery,WritableDataStore<DoubleIntArrayList> interestingDistances){  FiniteProgress progressPreproc=LOG.isVerbose() ? new FiniteProgress("LOCI preprocessing",ids.size(),LOG) : null;  for (DBIDIter iditer=ids.iter(); iditer.valid(); iditer.advance()) {    DoubleDBIDList neighbors=rangeQuery.getRangeForDBID(iditer,rmax);    DoubleIntArrayList cdist=new DoubleIntArrayList(neighbors.size() << 1);{      int i=0;      DoubleDBIDListIter ni=neighbors.iter();      while (ni.valid()) {        final double curdist=ni.doubleValue();        ++i;        ni.advance();        if (ni.valid() && curdist == ni.doubleValue()) {          continue;        }        cdist.append(curdist,i);        if (alpha != 1.) {          final double ri=curdist / alpha;          if (ri <= rmax) {            cdist.append(ri,Integer.MIN_VALUE);          }        }      }    }    cdist.sort();    int lastk=0;    for (int i=0, size=cdist.size(); i < size; i++) {      final int k=cdist.getInt(i);      if (k == Integer.MIN_VALUE) {        cdist.setValue(i,lastk);      } else {        lastk=k;      }    }    interestingDistances.put(iditer,cdist);    LOG.incrementProcessed(progressPreproc);  }  LOG.ensureCompleted(progressPreproc);}  }
class C{  private void validateRequiredProtocol(Element roleDescriptorElem) throws IDMException {  String protocols=roleDescriptorElem.getAttribute(SAMLNames.PSE);  if (!protocols.contains(SAMLNames.REQUIREDPROTOCAL)) {    throw new IDMException(String.format("SAML meta data error. Element's attribute %s=[%s]" + "does not have required protocal declaration [%s]!",SAMLNames.PSE,protocols,SAMLNames.REQUIREDPROTOCAL));  }}  }
class C{  public void testPathMatcherTermIsRecursive(){  MultipleDirectedRelationFinder finder=new MultipleDirectedRelationFinder();  RelationshipSetAdapter setAdapter=new RelationshipSetAdapter("Temporary",finder,relations);  PathMatcherTerm term=new PathMatcherTerm(setAdapter,true,false);  assertTrue("This PathMatcherTerm has to be recursive",term.isRecursive());  term.setRecursive(false);  assertFalse("This PathMatcherTerm has to be non-recursive",term.isRecursive());}  }
class C{  private void unregisterMBeans(){  List<ObjectName> unregistered=new ArrayList<ObjectName>();  for (  ObjectName name : mbeans) {    try {      mbeanserver.unregisterMBean(name);      unregistered.add(name);    } catch (    JMException e) {    }  }  mbeans.removeAll(unregistered);}  }
class C{  public static void rejectDistribution(User user,Integer distributionId,String remarks,String entidad) throws ValidationException, SecurityException, DistributionException, SessionException, BookException, TecDocException {  String sessionID=null;  try {    sessionID=Login.login(user,entidad);    List idsDist=new ArrayList();    idsDist.add(distributionId);    DistributionSessionEx.rejectDistributionEx(sessionID,idsDist,remarks,entidad);  }  finally {    SecuritySession.logout(sessionID,entidad);  }}  }
class C{  public void process(final Set<RawProtein<PIRSFHmmer2RawMatch>> subfamRawProteins,final Map<String,RawProtein<PIRSFHmmer2RawMatch>> proteinIdToProteinMap,final Map<String,String> subfamToSuperFamMap){  LOGGER.info("Added sub families to result...");  for (  RawProtein<PIRSFHmmer2RawMatch> subfamRawProtein : subfamRawProteins) {    if (isExpectedMatchSize(subfamRawProtein)) {      final String proteinId=subfamRawProtein.getProteinIdentifier();      RawProtein<PIRSFHmmer2RawMatch> superfamRawProtein=proteinIdToProteinMap.get(proteinId);      if (superfamRawProtein != null) {        List<PIRSFHmmer2RawMatch> subfamRawMatches=new ArrayList<PIRSFHmmer2RawMatch>(subfamRawProtein.getMatches());        List<PIRSFHmmer2RawMatch> superfamRawMatches=new ArrayList<PIRSFHmmer2RawMatch>(superfamRawProtein.getMatches());        PIRSFHmmer2RawMatch bestSuperfamMatch=superfamRawMatches.get(0);        String bestSuperFamModelId=bestSuperfamMatch.getModelId();        PIRSFHmmer2RawMatch bestSubfamMatch=subfamRawMatches.get(0);        String parentFamModelId=subfamToSuperFamMap.get(bestSubfamMatch.getModelId());        if (isChildOfCheck(bestSuperFamModelId,parentFamModelId)) {          superfamRawProtein.addMatch(bestSubfamMatch);          proteinIdToProteinMap.put(proteinId,superfamRawProtein);        } else {          PIRSFHmmer2RawMatch parentFamMatch=rawMatchDAO.getMatchesByModel(parentFamModelId);          if (parentFamMatch != null) {            subfamRawProtein.addMatch(parentFamMatch);            proteinIdToProteinMap.put(proteinId,subfamRawProtein);          } else {            LOGGER.warn("Missing parent match for best subfamily: " + bestSubfamMatch.getModelId());          }        }      } else {        LOGGER.warn("No super family matches found for protein with ID " + proteinId + "! Ironically found sub family matches.");      }    }  }}  }
class C{  public static boolean deleteRecursiveOrLog(File path){  if (path.isDirectory()) {    boolean success=true;    final File[] files=path.listFiles();    for (    File file : files) {      success=deleteRecursiveOrLog(file) && success;    }    if (!success) {      logger.warn("Cannot delete " + path.getPath() + ": failed to delete all files inside");      return false;    }  }  if (!path.delete()) {    logger.warn(FAILED_DELETING_FILE + path.getPath());    return false;  }  return true;}  }
class C{  public static Map<String,Integer> extractWwnToHluMap(UnManagedExportMask unManagedExportMask,DbClient dbClient){  Map<String,Integer> wwnToHluMap=new HashMap<String,Integer>();  Iterator<UnManagedVolume> unManagedVolumes=dbClient.queryIterativeObjects(UnManagedVolume.class,Collections2.transform(unManagedExportMask.getUnmanagedVolumeUris(),CommonTransformerFunctions.FCTN_STRING_TO_URI));  while (unManagedVolumes.hasNext()) {    UnManagedVolume vol=unManagedVolumes.next();    String wwn=vol.getWwn();    if (wwn != null) {      wwnToHluMap.put(wwn,findHlu(vol,unManagedExportMask.getMaskName()));    }  }  _logger.info("wwn to hlu map for {} is " + wwnToHluMap,unManagedExportMask.getMaskName());  return wwnToHluMap;}  }
class C{  void paintSkin(Graphics g,int dx,int dy,State state){  if (state == null) {    state=this.state;  }  paintSkin(g,dx,dy,getWidth(state),getHeight(state),state);}  }
class C{  private boolean internalIsLoggable(Level l){  int effectiveLevel=levelIntVal;  if (effectiveLevel == Level.OFF.intValue()) {    return false;  }  return l.intValue() >= effectiveLevel;}  }
class C{  public AppiumServiceBuilder appiumServerForAndroid(String deviceID,String methodName) throws Exception {  System.out.println("**************************************************************************\n");  System.out.println("Starting Appium Server to handle Android Device::" + deviceID + "\n");  System.out.println("**************************************************************************\n");  input=new FileInputStream("config.properties");  prop.load(input);  int port=ap.getPort();  int chromePort=ap.getPort();  int bootstrapPort=ap.getPort();  int selendroidPort=ap.getPort();  AppiumServiceBuilder builder=new AppiumServiceBuilder().withAppiumJS(new File(prop.getProperty("APPIUM_JS_PATH"))).withArgument(GeneralServerFlag.LOG_LEVEL,"info").withLogFile(new File(System.getProperty("user.dir") + "/target/appiumlogs/" + deviceID.replaceAll("\\W","_")+ "__"+ methodName+ ".txt")).withArgument(AndroidServerFlag.CHROME_DRIVER_PORT,Integer.toString(chromePort)).withArgument(AndroidServerFlag.BOOTSTRAP_PORT_NUMBER,Integer.toString(bootstrapPort)).withArgument(GeneralServerFlag.SESSION_OVERRIDE).withArgument(AndroidServerFlag.SUPPRESS_ADB_KILL_SERVER).withArgument(AndroidServerFlag.SELENDROID_PORT,Integer.toString(selendroidPort)).usingPort(port);  ;  appiumDriverLocalService=builder.build();  appiumDriverLocalService.start();  return builder;}  }
class C{  final public void position(final int pos){  if (len < 0 || len > buf.length) {    throw new IndexOutOfBoundsException("pos=" + pos + ", but capacity="+ buf.length);  }  len=pos;}  }
class C{  public AdBlockerAdviseDialog(Context context){  this.libraryPreferences=new LibraryPreferences(context);  this.context=context;  this.title=context.getResources().getString(R.string.dialog_title);  this.text=String.format(context.getResources().getString(R.string.dialog_text),UtilsLibrary.getAppName(context));  this.onlyOnce=false;}  }
class C{  public void skip(long count) throws IOException {  assert count >= 0;  if (ord + count > valueCount || ord + count < 0) {    throw new EOFException();  }  final int skipBuffer=(int)Math.min(count,blockSize - off);  off+=skipBuffer;  ord+=skipBuffer;  count-=skipBuffer;  if (count == 0L) {    return;  }  assert off == blockSize;  while (count >= blockSize) {    final int token=in.readByte() & 0xFF;    final int bitsPerValue=token >>> BPV_SHIFT;    if (bitsPerValue > 64) {      throw new IOException("Corrupted");    }    if ((token & MIN_VALUE_EQUALS_0) == 0) {      readVLong(in);    }    final long blockBytes=PackedInts.Format.PACKED.byteCount(packedIntsVersion,blockSize,bitsPerValue);    skipBytes(blockBytes);    ord+=blockSize;    count-=blockSize;  }  if (count == 0L) {    return;  }  assert count < blockSize;  refill();  ord+=count;  off+=count;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public ShortMemberValue(short s,ConstPool cp){  super('S',cp);  setValue(s);}  }
class C{  public boolean isGeneral(String name){  try {    getComponent(GENERAL,name);    return true;  } catch (  ArrayIndexOutOfBoundsException e) {    return false;  }}  }
class C{  public void showCrosshairs(float x,float y){  map.showCrosshairs(x,y);  map.invalidate();}  }
class C{  public static Collection<VCardDataType> all(){  return enums.all();}  }
class C{  int[] toIntArray(){  int[] out=new int[size()];  int a=0, b=out.length;  for (int i=-1; (i=ints.nextSetBit(i + 1)) >= 0; ) {    int n=decode(i);    if (n < 0) {      out[a++]=n;    } else {      out[--b]=n;    }  }  reverse(out,0,a);  reverse(out,a,out.length);  return out;}  }
class C{  public String select(int i){  if (i < 0 || i >= suffixes.length)   throw new IndexOutOfBoundsException();  return suffixes[i].toString();}  }
class C{  public void insert(int n,int value){  if (n > size) {    throw new IndexOutOfBoundsException("n > size()");  }  growIfNeeded();  System.arraycopy(values,n,values,n + 1,size - n);  values[n]=value;  size++;  sorted=sorted && (n == 0 || value > values[n - 1]) && (n == (size - 1) || value < values[n + 1]);}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  updateThreadCount();  if (log.isInfoEnabled()) {    log.info("|-Agent Storage Service active...");  }}  }
class C{  public ResultMatrixPlainText(int cols,int rows){  super(cols,rows);}  }
class C{  public static <T>T[] newArray(T[] reference,int length){  return Platform.newArray(reference,length);}  }
class C{  public Boolean isRTPTCP(){  return rtptcp;}  }
class C{  @Override public String toString(){  return "cudaTextureObject[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  String formatAlphaNumerals(int itemNum){  String result;  if (itemNum > 26) {    result=formatAlphaNumerals(itemNum / 26) + formatAlphaNumerals(itemNum % 26);  } else {    result=String.valueOf((char)('a' + itemNum - 1));  }  return result;}  }
class C{  public static <T,F extends EntityCapability<F,T,E>,E extends Entity>void registerEntityCapability(EntityCapability<F,T,E> entityCapability){  Preconditions.checkState(entityCapability.getCapabilityClass().isAssignableFrom(entityCapability.getClass()),"Entity capability %s must implement %s",entityCapability.getClass().getName(),entityCapability.getCapabilityClass().getName());  REGISTERED_CAPABILITIES.add(entityCapability);}  }
class C{  public int markRowDeleted(long... ids){  if (ids == null || ids.length == 0) {    throw new IllegalArgumentException("input param 'ids' can't be null");  }  ContentValues values=new ContentValues();  values.put(Downloads.Impl.COLUMN_DELETED,1);  if (ids.length == 1) {    return mResolver.update(ContentUris.withAppendedId(mBaseUri,ids[0]),values,null,null);  }  return mResolver.update(mBaseUri,values,getWhereClauseForIds(ids),getWhereArgsForIds(ids));}  }
class C{  public TtmlStyle inherit(TtmlStyle ancestor){  return inherit(ancestor,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.720 -0400",hash_original_method="7F8CAB6D20F7AC107E4A95701A6FE6CB",hash_generated_method="0578DE253C812004FB2864653CC2386E") public void warn(Object message){}  }
class C{  public static String toInitLiteral(long[] larr){  return Arrays.toString(larr).replaceAll("\\[","{").replaceAll("\\]","}");}  }
class C{  public String processFilename(String filename){  if (!filename.startsWith(getDir()))   filename=getDir() + filename;  return filename;}  }
class C{  public Boolean isShownInSolutionManager(){  return shownInSolutionManager;}  }
class C{  public void mergeSortFromTo(int from,int to){  countSortFromTo(from,to);}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public final int readUnsignedShort() throws IOException {  int ch1=this.read();  int ch2=this.read();  if ((ch1 | ch2) < 0) {    throw new EOFException();  }  if (bigEndian) {    return ((ch1 << 8) + (ch2));  } else {    return ((ch2 << 8) + (ch1));  }}  }
class C{  public Env<AttrContext> attribute(Env<AttrContext> env){  if (compileStates.isDone(env,CompileState.ATTR))   return env;  if (verboseCompilePolicy)   printNote("[attribute " + env.enclClass.sym + "]");  if (verbose)   log.printVerbose("checking.attribution",env.enclClass.sym);  if (!taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.ANALYZE,env.toplevel,env.enclClass.sym);    taskListener.started(e);  }  JavaFileObject prev=log.useSource(env.enclClass.sym.sourcefile != null ? env.enclClass.sym.sourcefile : env.toplevel.sourcefile);  try {    attr.attrib(env);    if (errorCount() > 0 && !shouldStop(CompileState.ATTR)) {      attr.postAttr(env.tree);    }    compileStates.put(env,CompileState.ATTR);    if (rootClasses != null && rootClasses.contains(env.enclClass)) {      reportPublicApi(env.enclClass.sym);    }  }  finally {    log.useSource(prev);  }  return env;}  }
class C{  public static void checkHashAndThetaCorruption(final long thetaLong,final long hash){  if ((hash | thetaLong | (thetaLong - 1L)) < 0L) {    throw new SketchesStateException("Data Corruption: Either hash was negative or thetaLong was negative or zero: " + "Hash: " + hash + ", ThetaLong: "+ thetaLong);  }}  }
class C{  public GVector(ReadonlyVec2D v){  values=new double[]{v.x(),v.y()};  length=2;}  }
class C{  @Override public String validateOutputFilePrefixSupported(String filePrefix){  String returnValue=verifyPath(filePrefix);  verifyPathIsAccessible(filePrefix,"Output path does not exist or is not writeable: %s");  return returnValue;}  }
class C{  final PriorityQueue<SweepLineVertex> initialize(Vector2[] points){  this.dcel=new DoubleEdgeList(points);  int size=points.length;  PriorityQueue<SweepLineVertex> queue=new PriorityQueue<SweepLineVertex>(size);  SweepLineVertex rootVertex=null;  SweepLineVertex prevVertex=null;  SweepLineEdge rootEdge=null;  SweepLineEdge prevEdge=null;  for (int i=0; i < size; i++) {    Vector2 point=points[i];    SweepLineVertex vertex=new SweepLineVertex(point,i);    vertex.type=SweepLineVertexType.REGULAR;    vertex.prev=prevVertex;    if (prevVertex != null) {      prevVertex.next=vertex;    }    if (rootVertex == null) {      rootVertex=vertex;    }    Vector2 point1=points[i + 1 == size ? 0 : i + 1];    Vector2 point0=points[i == 0 ? size - 1 : i - 1];    vertex.type=this.getType(point0,point,point1);    prevVertex=vertex;    queue.offer(vertex);    SweepLineEdge e=new SweepLineEdge(this.referenceY);    e.v0=vertex;    double my=point.y - point1.y;    if (my == 0.0) {      e.slope=Double.POSITIVE_INFINITY;    } else {      double mx=point.x - point1.x;      e.slope=(mx / my);    }    if (prevEdge != null) {      prevEdge.v1=vertex;    }    if (rootEdge == null) {      rootEdge=e;    }    vertex.left=e;    vertex.right=prevEdge;    prevEdge=e;  }  prevEdge.v1=rootEdge.v0;  rootVertex.right=prevEdge;  rootVertex.prev=prevVertex;  prevVertex.next=rootVertex;  return queue;}  }
class C{  @Override public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  final String host=origin.getHost().toLowerCase();  final String cookieDomain=cookie.getDomain();  if (!domainMatch(host,cookieDomain)) {    return false;  }  final String effectiveHostWithoutDomain=host.substring(0,host.length() - cookieDomain.length());  if (effectiveHostWithoutDomain.indexOf('.') != -1) {    return false;  }  return true;}  }
class C{  public boolean implies(Permission permission){synchronized (this) {    Permission p=permsMap.get(permission);    if (p == null) {      for (      Permission p_ : permsMap.values()) {        if (p_.implies(permission))         return true;      }      return false;    } else {      return true;    }  }}  }
class C{  public static void removeDir(String dir) throws Exception {  File file=new File(dir);  if (file != null && file.exists()) {    if (file.isDirectory()) {      File[] subs=file.listFiles();      int length=subs.length;      for (int i=0; i < length; i++) {        if (subs[i].isDirectory()) {          removeDir(subs[i].getAbsolutePath());        } else {          subs[i].delete();        }      }    } else {      file.delete();    }  }}  }
class C{  protected void outputSolution(final IBuffer<IBindingSet> outputBuffer,final IBindingSet outSolution){  if (log.isDebugEnabled())   log.debug("Output solution: " + outSolution);  outputBuffer.add(outSolution);}  }
class C{  public boolean isPrimaryKey(){  return (type == Primary);}  }
class C{  public static void writePemToFile(byte[] certBytes,String filename) throws IOException {  try (FileOutputStream fos=new FileOutputStream(filename)){    fos.write(certBytes);  } }  }
class C{  public int enumerate(ThreadGroup[] groups,boolean recurse){  return enumerateGeneric(groups,recurse,0,false);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public AuthenticationFailedReply(){  super(0,0);}  }
class C{  public PeriodFormatter withLocale(Locale locale){  if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {    return this;  }  return new PeriodFormatter(iPrinter,iParser,locale,iParseType);}  }
class C{  private boolean isValidAuthority(String authority){  if (authority == null) {    return false;  }  Matcher authorityMatcher=AUTHORITY_PATTERN.matcher(authority);  if (!authorityMatcher.matches()) {    return false;  }  boolean ipV4Address=false;  boolean hostname=false;  String hostIP=authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);  Matcher matchIPV4Pat=IP_V4_DOMAIN_PATTERN.matcher(hostIP);  ipV4Address=matchIPV4Pat.matches();  if (ipV4Address) {    for (int i=1; i <= 4; i++) {      String ipSegment=matchIPV4Pat.group(i);      if (ipSegment == null || ipSegment.length() <= 0) {        return false;      }      try {        if (Integer.parseInt(ipSegment) > 255) {          return false;        }      } catch (      NumberFormatException e) {        return false;      }    }  } else {    hostname=DOMAIN_PATTERN.matcher(hostIP).matches();  }  if (hostname) {    char[] chars=hostIP.toCharArray();    int size=1;    for (int i=0; i < chars.length; i++) {      if (chars[i] == '.') {        size++;      }    }    String[] domainSegment=new String[size];    int segCount=0;    int segLen=0;    Matcher atomMatcher=ATOM_PATTERN.matcher(hostIP);    while (atomMatcher.find()) {      domainSegment[segCount]=atomMatcher.group();      segLen=domainSegment[segCount].length() + 1;      hostIP=(segLen >= hostIP.length()) ? "" : hostIP.substring(segLen);      segCount++;    }    String topLevel=domainSegment[segCount - 1];    if (topLevel.length() < 2 || topLevel.length() > 4) {      return false;    }    if (!ALPHA_PATTERN.matcher(topLevel.substring(0,1)).matches()) {      return false;    }    if (segCount < 2) {      return false;    }  }  if (!hostname && !ipV4Address) {    return false;  }  String port=authorityMatcher.group(PARSE_AUTHORITY_PORT);  if (port != null) {    if (!PORT_PATTERN.matcher(port).matches()) {      return false;    }  }  String extra=authorityMatcher.group(PARSE_AUTHORITY_EXTRA);  return isBlankOrNull(extra);}  }
class C{  public JdbcUrlParserImpl(String url){  setUrl(url);}  }
class C{  public static void configNotPresent(Class<?> clazz,XML xml){  throw new MappingNotFoundException(MSG.INSTANCE.message(Constants.mappingNotFoundException1path,clazz.getSimpleName(),xml.getXmlPath()));}  }
class C{  public static void writeColumn(Transfer out,ResultInterface result,int i) throws IOException {  out.writeString(result.getAlias(i));  out.writeString(result.getSchemaName(i));  out.writeString(result.getTableName(i));  out.writeString(result.getColumnName(i));  out.writeInt(result.getColumnType(i));  out.writeLong(result.getColumnPrecision(i));  out.writeInt(result.getColumnScale(i));  out.writeInt(result.getDisplaySize(i));  out.writeBoolean(result.isAutoIncrement(i));  out.writeInt(result.getNullable(i));}  }
class C{  public SVGRectElementBridge(){}  }
class C{  private void validatePatch(State current,State patch){  ValidationUtils.validatePatch(current,patch);  ValidationUtils.validateTaskStageProgression(current.taskState,patch.taskState);}  }
class C{  public static TriggerMethod newInstance(String value){  final TriggerMethod returnInstance=new TriggerMethod();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  protected boolean[] parseIdentification(final byte[] result) throws ProtocolException {  final boolean[] capabilities=new boolean[Proto.LASTTYPE];  final int res=ByteArray.byteArrayToInt(result,0);  if (res == Proto.OK) {    if (Cfg.DEBUG) {      Check.log(TAG + " Info: got Identification");    }    final DataBuffer dataBuffer=new DataBuffer(result,4,result.length - 4);    try {      final int totSize=dataBuffer.readInt();      final long dateServer=dataBuffer.readLong();      if (Cfg.DEBUG) {        Check.log(TAG + " parseIdentification: " + dateServer);      }      final Date date=new Date();      final int drift=(int)(dateServer - (date.getTime() / 1000));      if (Cfg.DEBUG) {        Check.log(TAG + " parseIdentification drift: " + drift);      }      Status.self().drift=drift;      final int numElem=dataBuffer.readInt();      for (int i=0; i < numElem; i++) {        final int cap=dataBuffer.readInt();        if (cap < Proto.LASTTYPE) {          capabilities[cap]=true;          if (Cfg.DEBUG) {            Check.log(TAG + " capabilities: " + capabilities[i]);          }        }      }    } catch (    final IOException e) {      if (Cfg.EXCEPTION) {        Check.log(e);      }      if (Cfg.DEBUG) {        Check.log(TAG + " Error: " + e.toString());      }      throw new ProtocolException();    }  } else   if (res == Proto.NO) {    if (Cfg.DEBUG) {      Check.log(TAG + " Info: no new conf: ");    }  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: parseNewConf: " + res);    }    throw new ProtocolException();  }  return capabilities;}  }
class C{  public void addDataSourceInfo(DataSourceInfo dataSourceInfoDelta){  addBusyConnections(dataSourceInfoDelta.getBusyConnections());  addEstablishedConnections(dataSourceInfoDelta.getEstablishedConnections());  addMaxConnections(dataSourceInfoDelta.getMaxConnections());  addDataSourceCount(1);}  }
class C{  public StockModel(BrowsableData bd,Formats[] f,boolean[] bedit){  m_bd=bd;  m_formats=f;  m_bedit=bedit;}  }
class C{  private void updateComponent(int rowIndex,int columnIndex){  Pair<Integer,Integer> key=new Pair<>(rowIndex,columnIndex);  Component oldComponent=mapOfComponents.get(key);  if (oldComponent != null) {    innerPanel.remove(oldComponent);  }  Component updatedComponent=createComponentForCell(rowIndex,columnIndex);  if (isConstraintsUsed()) {    updatedComponent.setMinimumSize(constraints[columnIndex]);    updatedComponent.setMaximumSize(constraints[columnIndex]);    updatedComponent.setPreferredSize(constraints[columnIndex]);  }  if (isConstraintsUsed()) {    gbc.weightx=0.0;  } else {    if (Collection.class.isAssignableFrom(model.getColumnClass(columnIndex))) {      gbc.weightx=0.1;    } else {      gbc.weightx=1.0 / model.getColumnCount();    }  }  gbc.weighty=0.0;  if (isConstraintsUsed() && fillerMode == FillerMode.NONE) {    gbc.fill=GridBagConstraints.VERTICAL;  } else {    gbc.fill=GridBagConstraints.BOTH;  }  gbc.gridx=columnIndex;  gbc.gridy=rowIndex;  innerPanel.add(updatedComponent,gbc);  innerPanel.revalidate();  innerPanel.repaint();  mapOfComponents.put(key,updatedComponent);}  }
class C{  public void componentRemoved(ContainerEvent e){}  }
class C{  protected void findIssues(List<Node> nodes,Notification notification){  for (int i=0; i < nodes.size(); i++) {    Node node=nodes.get(i);    if (!node.getIssues().isEmpty()) {      notification.getIssues().addAll(node.getIssues());    }    if (node.containerNode()) {      findIssues(((ContainerNode)node).getNodes(),notification);    }  }}  }
class C{  public final void initSign(PrivateKey privateKey,SecureRandom random) throws InvalidKeyException {  engineInitSign(privateKey,random);  state=SIGN;  if (!skipDebug && pdebug != null) {    pdebug.println("Signature." + algorithm + " signing algorithm from: "+ this.provider.getName());  }}  }
class C{  public MkCoPTreeNode(int capacity,boolean isLeaf){  super(capacity,isLeaf,MkCoPEntry.class);}  }
class C{  public void initializeContacts(EvolutionState state){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.975 -0500",hash_original_method="542474DD15BDDADB068A65C6A3EEA8E2",hash_generated_method="5382BEC9FC26C12CD9CFD624B7778E49") public final boolean isWithinBoundsNoHistory(float left,float top,float right,float bottom){  final int pointerCount=nativeGetPointerCount(mNativePtr);  for (int i=0; i < pointerCount; i++) {    final float x=nativeGetAxisValue(mNativePtr,AXIS_X,i,HISTORY_CURRENT);    final float y=nativeGetAxisValue(mNativePtr,AXIS_Y,i,HISTORY_CURRENT);    if (x < left || x > right || y < top || y > bottom) {      return false;    }  }  return true;}  }
class C{  public void putAll(LongKeyMap<VALUE> t){  int n=t.size();  if (n == 0)   return;  if (n >= threshold) {    n=(int)(n / loadFactor + 1);    if (n > MAXIMUM_CAPACITY)     n=MAXIMUM_CAPACITY;    int capacity=table.length;    while (capacity < n)     capacity<<=1;    resize(capacity);  }  for (Iterator<LongEntry<VALUE>> i=t.entrySet().iterator(); i.hasNext(); ) {    LongEntry<VALUE> e=i.next();    put(e.key,e.value);  }}  }
class C{  protected static Method resolveJavaMethod(BshClassManager bcm,Class clas,String name,Class[] types,boolean staticOnly) throws UtilEvalError {  if (clas == null)   throw new InterpreterError("null class");  Method method=null;  if (bcm == null)   Interpreter.debug("resolveJavaMethod UNOPTIMIZED lookup"); else   method=bcm.getResolvedMethod(clas,name,types,staticOnly);  if (method == null) {    boolean publicOnly=!Capabilities.haveAccessibility();    try {      method=findOverloadedMethod(clas,name,types,publicOnly);    } catch (    SecurityException e) {      throw new UtilTargetError("Security Exception while searching methods of: " + clas,e);    }    checkFoundStaticMethod(method,staticOnly,clas);    if (method != null && !publicOnly) {      try {        ReflectManager.RMSetAccessible(method);      } catch (      UtilEvalError e) {      }    }    if (method != null && bcm != null)     bcm.cacheResolvedMethod(clas,types,method);  }  return method;}  }
class C{  private QueryBuilderKraken parseNotify(){  NotifyQueryBuilder query=new NotifyQueryBuilder(_tableManager,_sql);  Token token;  String tableName=parseTableName();  query.setTableName(tableName);  _query=query;  ExprKraken whereExpr=null;  token=scanToken();  if (token == Token.WHERE) {    whereExpr=parseExpr();  } else   if (token != null) {    throw error("expected WHERE at '{0}'",token);  }  ParamExpr[] params=_params.toArray(new ParamExpr[_params.size()]);  query.setParams(params);  query.setWhereExpr(whereExpr);  return query;}  }
class C{  private static void rebalanceInlineContent(List content){  Map boxesByElement=new HashMap();  for (Iterator i=content.iterator(); i.hasNext(); ) {    Styleable styleable=(Styleable)i.next();    if (styleable instanceof InlineBox) {      InlineBox iB=(InlineBox)styleable;      Element elem=iB.getElement();      if (!boxesByElement.containsKey(elem)) {        iB.setStartsHere(true);      }      boxesByElement.put(elem,iB);    }  }  for (Iterator i=boxesByElement.values().iterator(); i.hasNext(); ) {    InlineBox iB=(InlineBox)i.next();    iB.setEndsHere(true);  }}  }
class C{  public boolean hasNext() throws IOException {  peek();  return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;}  }
class C{  public final void moveFirst() throws BasicException {  saveData();  if (m_bd.getSize() > 0) {    baseMoveTo(0);  }}  }
class C{  public void shutdown(){  for (  final JmxReporter jmxReporter : jmxReporters.values()) {    jmxReporter.stop();  }  jmxReporters.clear();  for (  final ScheduledReporter scheduledReporter : scheduledReporters.values()) {    scheduledReporter.stop();  }  scheduledReporters.clear();}  }
class C{  public static int extractReference(String text){  int lparenthIndex=text.indexOf('(');  int spaceIndex=text.indexOf(' ');  if (spaceIndex < 0) {    spaceIndex=text.length();  }  if (lparenthIndex < 0) {    return spaceIndex;  } else {    if (spaceIndex < lparenthIndex) {      return spaceIndex;    }    int rparenthIndex=text.indexOf(')',lparenthIndex);    if (rparenthIndex < 0) {      rparenthIndex=text.length() - 1;    }    return rparenthIndex + 1;  }}  }
class C{  public static void startup(){  setupProtocolHandlerUri();}  }
class C{  public Node find(Node node){  while (node.getParent().getParent() != node.getParent()) {    Node t=node.getParent().getParent();    node.setParent(t);    node=t;  }  return node.getParent();}  }
class C{  public String interpolate(String message,Context context){  return defaultInterpolator.interpolate(message,context,this.defaultLocale);}  }
class C{  public Anonymous_parameterList_1_ createAnonymous_parameterList_1_(){  Anonymous_parameterList_1_Impl anonymous_parameterList_1_=new Anonymous_parameterList_1_Impl();  return anonymous_parameterList_1_;}  }
class C{  public Schedule(Element e){  org.jdom2.Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in schedule element when reading operations");  }  if ((a=e.getAttribute(Xml.NAME)) != null) {    _name=a.getValue();  }  if ((a=e.getAttribute(Xml.COMMENT)) != null) {    _comment=a.getValue();  }  if (e.getChildren(Xml.ITEM) != null) {    @SuppressWarnings("unchecked") List<Element> eScheduleItems=e.getChildren(Xml.ITEM);    log.debug("schedule: {} has {} items",getName(),eScheduleItems.size());    for (    Element eScheduleItem : eScheduleItems) {      register(new ScheduleItem(eScheduleItem));    }  }}  }
class C{  protected Expression gt(int opPos) throws TransformerException {  return compileOperation(new Gt(),opPos);}  }
class C{  public InstanceTime(TimingSpecifier creator,float time,boolean clearOnReset){  this.creator=creator;  this.time=time;  this.clearOnReset=clearOnReset;}  }
class C{  public X509CertificatePair(X509Certificate forward,X509Certificate reverse) throws CertificateException {  if (forward == null && reverse == null) {    throw new CertificateException("at least one of certificate pair " + "must be non-null");  }  this.forward=forward;  this.reverse=reverse;  checkPair();}  }
class C{  public static HllSketchBuilder builder(){  return new HllSketchBuilder();}  }
class C{  public void addSubtype(AnnotationMirror sub,AnnotationMirror sup){  assertNotBuilt();  addQualifier(sub);  addQualifier(sup);  supertypes.get(sub).add(sup);}  }
class C{  public void afterMerge(Entity entity,View view){  if (!isAuthorizationRequired()) {    return;  }  if (entity != null) {    metadataTools.traverseAttributesByView(view,entity,new ClearInaccessibleAttributesVisitor());  }}  }
class C{  public SortedMap findMultipleTermsInRectangleWithMatchingTeasers(final int x1,final int y1,final int x2,final int y2,final int rotation,final String[] terms,final int searchType,final SearchListener listener) throws PdfException {  usingMultipleTerms=true;  multipleTermTeasers.clear();  teasers=null;  final boolean origIncludeTease=includeTease;  includeTease=true;  final List highlights=findMultipleTermsInRectangle(x1,y1,x2,y2,terms,searchType,listener);  final SortedMap<Object,String> highlightsWithTeasers=new TreeMap<Object,String>(new ResultsComparatorRectangle(rotation));  for (int i=0; i < highlights.size(); i++) {    highlightsWithTeasers.put(highlights.get(i),multipleTermTeasers.get(i));  }  usingMultipleTerms=false;  includeTease=origIncludeTease;  return highlightsWithTeasers;}  }
class C{  public ServerAuthenticator startSession(Socket s) throws IOException {  PushbackInputStream in=new PushbackInputStream(s.getInputStream());  OutputStream out=s.getOutputStream();  int version=in.read();  if (version == 5) {    if (!selectSocks5Authentication(in,out,0))     return null;  } else   if (version == 4) {    in.unread(version);  } else   return null;  return new ServerAuthenticatorNone(in,out);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void readNetscapeExt(){  do {    readBlock();    if (block[0] == 1) {      int b1=block[1] & 0xff;      int b2=block[2] & 0xff;      loopCount=(b2 << 8) | b1;    }  } while ((blockSize > 0) && !err());}  }
class C{  protected void afterAttachActions() throws SQLException {  getServiceInfo(null,getDescribeServiceRequestBuffer(),1024,getServiceInformationProcessor());}  }
class C{  @Override public void run(){  try {    if (!running.compareAndSet(false,true)) {      Operators.error(subscriber,new IllegalStateException("Thread is already running"));      return;    }    if (!processor.startSubscriber(subscriber,this)) {      return;    }    boolean processedSequence=true;    long cachedAvailableSequence=Long.MIN_VALUE;    long nextSequence=sequence.getAsLong();    Slot<T> event=null;    if (!EventLoopProcessor.waitRequestOrTerminalEvent(pendingRequest,barrier,running,sequence,waiter)) {      if (!running.get()) {        return;      }      if (processor.terminated == 1 && processor.ringBuffer.getAsLong() == -1L) {        if (processor.error != null) {          subscriber.onError(processor.error);          return;        }        subscriber.onComplete();        return;      }    }    final boolean unbounded=pendingRequest.getAsLong() == Long.MAX_VALUE;    if (replay(unbounded)) {      running.set(false);      return;    }    while (true) {      try {        if (processedSequence) {          processedSequence=false;          do {            nextSequence=processor.workSequence.getAsLong() + 1L;            while ((!unbounded && pendingRequest.getAsLong() == 0L)) {              if (!isRunning()) {                WaitStrategy.throwAlert();              }              LockSupport.parkNanos(1L);            }            sequence.set(nextSequence - 1L);          } while (!processor.workSequence.compareAndSet(nextSequence - 1L,nextSequence));        }        if (cachedAvailableSequence >= nextSequence) {          event=processor.ringBuffer.get(nextSequence);          try {            readNextEvent(unbounded);          } catch (          Exception ce) {            if (!WaitStrategy.isAlert(ce)) {              throw ce;            }            barrier.clearAlert();            throw Exceptions.failWithCancel();          }          subscriber.onNext(event.value);          processedSequence=true;        } else {          processor.readWait.signalAllWhenBlocking();          try {            cachedAvailableSequence=barrier.waitFor(nextSequence,waiter);          } catch (          Exception ce) {            if (!WaitStrategy.isAlert(ce)) {              throw ce;            }            barrier.clearAlert();            if (!running.get()) {              processor.decrementSubscribers();            } else {              throw ce;            }            try {              for (; ; ) {                try {                  cachedAvailableSequence=barrier.waitFor(nextSequence);                  event=processor.ringBuffer.get(nextSequence);                  break;                } catch (                Exception cee) {                  if (!WaitStrategy.isAlert(cee)) {                    throw ce;                  }                  barrier.clearAlert();                }              }              reschedule(event);            } catch (            Exception c) {            }            processor.incrementSubscribers();            throw ce;          }        }      } catch (      RuntimeException ce) {        if (Exceptions.isCancel(ce)) {          reschedule(event);          break;        }        if (!WaitStrategy.isAlert(ce)) {          throw ce;        }        barrier.clearAlert();        if (!running.get()) {          break;        }        if (processor.terminated == 1) {          if (processor.error != null) {            subscriber.onError(processor.error);            break;          }          if (processor.ringBuffer.getPending() == 0) {            subscriber.onComplete();            break;          }        }      }catch (      final Throwable ex) {        reschedule(event);        subscriber.onError(ex);        sequence.set(nextSequence);        processedSequence=true;      }    }  }  finally {    processor.decrementSubscribers();    processor.ringBuffer.removeGatingSequence(sequence);    running.set(false);    processor.writeWait.signalAllWhenBlocking();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String buildFailureOutput(Throwable cause){  String message=getMessageFromCause(cause);  return "Verification failed: " + message;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public int compare(EventPoint o1,EventPoint o2){  double fp=FloatingPoint.value(o1.point.getY() - o2.point.getY());  if (fp > 0) {    return -1;  }  if (fp < 0) {    return +1;  }  fp=FloatingPoint.value(o1.point.getX() - o2.point.getX());  if (fp < 0) {    return -1;  }  if (fp > 0) {    return +1;  }  return 0;}  }
class C{  private void cleanUpFrontier(){  while (!frontier.isEmpty() && isExplored(frontier.element()))   frontier.remove();}  }
class C{  public void onComplete(ResponseOnSingeRequest sshResponse){  cancelCancellable();  reply(sshResponse.getResponseBody(),sshResponse.isFailObtainResponse(),sshResponse.getErrorMessage(),null,sshResponse.getStatusCode(),sshResponse.getStatusCodeInt());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ACTIVITY___ANONYMOUS_ACTIVITY_11:    getAnonymous_activity_1_1().clear();  getAnonymous_activity_1_1().addAll((Collection<? extends Anonymous_activity_1_>)newValue);return;case UmplePackage.ACTIVITY___CODE_1:setCode_1((String)newValue);return;case UmplePackage.ACTIVITY___ANONYMOUS_ACTIVITY_21:getAnonymous_activity_2_1().clear();getAnonymous_activity_2_1().addAll((Collection<? extends Anonymous_activity_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public PeProvisionerSimple(double availableMips){  super(availableMips);  setPeTable(new HashMap<String,ArrayList<Double>>());}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  if (++bufpos >= maxNextCharInd)   FillBuff();  char c=buffer[bufpos];  UpdateLineColumn(c);  return c;}  }
class C{  protected final LeafIndexLookup indexLookup(){  return lookup.indexLookup();}  }
class C{  private void validate(InputNode node,LabelMap map) throws Exception {  Position line=node.getPosition();  for (  Label label : map) {    Class expect=type.getType();    if (label.isRequired() && revision.isEqual()) {      throw new ValueRequiredException("Unable to satisfy %s for %s at %s",label,expect,line);    }  }}  }
class C{  public DistanceCentralityScorer(Hypergraph<V,E> graph,Function<E,? extends Number> edge_weights,boolean averaging,boolean ignore_missing,boolean ignore_self_distances){  this(graph,new DijkstraDistance<V,E>(graph,edge_weights),averaging,ignore_missing,ignore_self_distances);}  }
class C{  BufferedImage paintBuffered(final Graphics2D graphics,final Rectangle2D clip){  double ww=clip.getWidth();  double hh=clip.getHeight();  if (buffer == null || (buffer.getWidth(null)) != ww || (buffer.getHeight(null)) != hh) {    buffer=getGraphicsConfiguration().createCompatibleImage((int)ww,(int)hh);  }  Graphics2D g=(Graphics2D)(buffer.getGraphics());  g.setColor(port.getBackground());  g.fillRect(0,0,buffer.getWidth(null),buffer.getHeight(null));  g.translate(-(int)clip.getX(),-(int)clip.getY());  paintUnbuffered(g,clip);  g.dispose();  if (graphics != null) {    graphics.setRenderingHints(bufferedHints);    graphics.drawImage(buffer,(int)(clip.getX()),(int)(clip.getY()),null);  }  return buffer;}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent intent){}  }
class C{  @Field(11) public __VARIANT_NAME_3_union bstrVal(Pointer<Byte> bstrVal){  this.io.setPointerField(this,11,bstrVal);  return this;}  }
class C{  private void calculateNewPosition(){  View offsetView=mAnchorView;  int xOffset=0;  int yOffset=0;  if (mAnchorBelow)   yOffset=mAnchorView.getHeight();  while (offsetView != null) {    xOffset+=offsetView.getLeft();    yOffset+=offsetView.getTop();    if (!(offsetView.getParent() instanceof View))     break;    offsetView=(View)offsetView.getParent();  }  if (mCenterView) {    xOffset+=mAnchorView.getWidth() / 2;  } else   if (LocalizationUtils.isLayoutRtl()) {    xOffset+=mAnchorView.getWidth();  }  int tooltipWidth=mTooltipText.getMeasuredWidth();  xOffset-=tooltipWidth / 2;  getBackground().getPadding(mCachedPaddingRect);  tooltipWidth+=mCachedPaddingRect.left + mCachedPaddingRect.right;  xOffset-=mCachedPaddingRect.left;  int defaultXOffset=xOffset;  View rootView=mAnchorView.getRootView();  if (xOffset + tooltipWidth > rootView.getWidth()) {    xOffset=rootView.getWidth() - tooltipWidth - mTooltipEdgeMargin;  } else   if (xOffset < 0) {    xOffset=mTooltipEdgeMargin;  }  int newOffset=-(xOffset - defaultXOffset);  if (Math.abs(newOffset) > mTooltipText.getMeasuredWidth() / 2 - mBubbleTipXMargin) {    newOffset=(mTooltipText.getMeasuredWidth() / 2 - mBubbleTipXMargin) * (int)Math.signum(newOffset);  }  ((BubbleBackgroundDrawable)getBackground()).setBubbleArrowXOffset(newOffset);  if (mAnchorBelow) {    mXPosition=xOffset;    mYPosition=yOffset - mTooltipTopMargin;  } else {    mXPosition=xOffset;    mYPosition=mAnchorView.getRootView().getHeight() - yOffset + mTooltipTopMargin;  }}  }
class C{  protected synchronized void log(AbstractExperimenterTab tab,String msg){  m_LogTab.log(tab,msg);}  }
class C{  void verifyNoSubscriptionCopy(Product product) throws OperationNotPermittedException {  if (product.getTemplate() == null) {    return;  }  if (ServiceType.isSubscription(product.getType())) {    OperationNotPermittedException onp=new OperationNotPermittedException("Access to product copy not allowed.");    logger.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,onp,LogMessageIdentifier.WARN_ACCESS_PRODUCT_COPY_NOT_ALLOWED,Long.toString(product.getKey()));    throw onp;  }}  }
class C{  private static boolean requiresFlatMapFunction(CacheType type,MatrixCharacteristics mcBc){  return (type == CacheType.LEFT && mcBc.getRows() > mcBc.getRowsPerBlock()) || (type == CacheType.RIGHT && mcBc.getCols() > mcBc.getColsPerBlock());}  }
class C{  private void proposeMove(){  AdversarialSearch<TicTacToeState,XYLocation> search;  XYLocation action;switch (strategyCombo.getSelectedIndex()) {case 0:    search=MinimaxSearch.createFor(game);  break;case 1:search=AlphaBetaSearch.createFor(game);break;case 2:search=IterativeDeepeningAlphaBetaSearch.createFor(game,0.0,1.0,1000);break;default :search=IterativeDeepeningAlphaBetaSearch.createFor(game,0.0,1.0,1000);((IterativeDeepeningAlphaBetaSearch<?,?,?>)search).setLogEnabled(true);}action=search.makeDecision(currState);searchMetrics=search.getMetrics();currState=game.getResult(currState,action);}  }
class C{  public static boolean isDirectory(String path){  File f=new File(path);  return f.isDirectory();}  }
class C{  private void createDownloadsTable(SQLiteDatabase db){  try {    db.execSQL("DROP TABLE IF EXISTS " + DownloadContract.Downloads.DOWNLOADS_TABLE_NAME);    db.execSQL("CREATE TABLE " + DownloadContract.Downloads.DOWNLOADS_TABLE_NAME + "("+ DownloadContract.Downloads._ID+ " INTEGER PRIMARY KEY AUTOINCREMENT,"+ DownloadContract.Downloads.COLUMN_URI+ " TEXT, "+ Constants.RETRY_AFTER_X_REDIRECT_COUNT+ " INTEGER, "+ DownloadContract.Downloads.COLUMN_APP_DATA+ " TEXT, "+ DownloadContract.Downloads.COLUMN_NO_INTEGRITY+ " BOOLEAN, "+ DownloadContract.Downloads.COLUMN_FILE_NAME_HINT+ " TEXT, "+ DownloadContract.Downloads.COLUMN_DATA+ " TEXT, "+ DownloadContract.Downloads.COLUMN_MIME_TYPE+ " TEXT, "+ DownloadContract.Downloads.COLUMN_DESTINATION+ " INTEGER, "+ Constants.NO_SYSTEM_FILES+ " BOOLEAN, "+ DownloadContract.Downloads.COLUMN_CONTROL+ " INTEGER, "+ DownloadContract.Downloads.COLUMN_STATUS+ " INTEGER, "+ DownloadContract.Downloads.COLUMN_FAILED_CONNECTIONS+ " INTEGER, "+ DownloadContract.Downloads.COLUMN_LAST_MODIFICATION+ " BIGINT, "+ DownloadContract.Downloads.COLUMN_NOTIFICATION_CLASS+ " TEXT, "+ DownloadContract.Downloads.COLUMN_NOTIFICATION_EXTRAS+ " TEXT, "+ DownloadContract.Downloads.COLUMN_COOKIE_DATA+ " TEXT, "+ DownloadContract.Downloads.COLUMN_USER_AGENT+ " TEXT, "+ DownloadContract.Downloads.COLUMN_REFERER+ " TEXT, "+ DownloadContract.Downloads.COLUMN_TOTAL_BYTES+ " INTEGER NOT NULL DEFAULT -1, "+ DownloadContract.Downloads.COLUMN_CURRENT_BYTES+ " INTEGER NOT NULL DEFAULT 0, "+ Constants.ETAG+ " TEXT, "+ Constants.UID+ " INTEGER, "+ DownloadContract.Downloads.COLUMN_OTHER_UID+ " INTEGER, "+ DownloadContract.Downloads.COLUMN_ALLOW_ROAMING+ " INTEGER NOT NULL DEFAULT 0, "+ DownloadContract.Downloads.COLUMN_ALLOWED_NETWORK_TYPES+ " INTEGER NOT NULL DEFAULT 0, "+ DownloadContract.Downloads.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI+ " INTEGER NOT NULL DEFAULT 1, "+ DownloadContract.Downloads.COLUMN_BYPASS_RECOMMENDED_SIZE_LIMIT+ " INTEGER NOT NULL DEFAULT 0, "+ DownloadContract.Downloads.COLUMN_MEDIAPROVIDER_URI+ " TEXT, "+ DownloadContract.Downloads.COLUMN_DELETED+ " BOOLEAN NOT NULL DEFAULT 0, "+ DownloadContract.Downloads.COLUMN_ERROR_MSG+ " TEXT, "+ DownloadContract.Downloads.COLUMN_ALLOW_METERED+ " INTEGER NOT NULL DEFAULT 1, "+ DownloadContract.Downloads.COLUMN_BATCH_ID+ " INTEGER, "+ DownloadContract.Downloads.COLUMN_EXTRA_DATA+ " TEXT, "+ DownloadContract.Downloads.COLUMN_ALWAYS_RESUME+ " INTEGER NOT NULL DEFAULT 0, "+ DownloadContract.Downloads.COLUMN_ALLOW_TAR_UPDATES+ " INTEGER NOT NULL DEFAULT 0, "+ Constants.MEDIA_SCANNED+ " BOOLEAN);");  } catch (  SQLException ex) {    LLog.e("couldn't create table in downloads database");    throw ex;  }}  }
class C{  @Bean public Boolean createQuartzTables(){  return true;}  }
class C{  protected Object readExtensionObject(Class expectedClass,String tag) throws IOException {  throw new BurlapProtocolException("unknown object tag <" + tag + ">");}  }
class C{  public void update(double X_[][]){  Matrix X=new Matrix(MatrixUtils.addBias(X_));  update(X);}  }
class C{  public void connect(){  if (executor == null) {synchronized (this) {      if (executor == null) {        executor=new ThreadPoolExecutor(0,processors,10L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());        executor.allowCoreThreadTimeOut(true);      }    }  }  int c=this.connected.incrementAndGet();  if (c == 1) {    executor.allowCoreThreadTimeOut(false);    executor.setCorePoolSize(executor.getMaximumPoolSize());  }}  }
class C{  public void remove(Object context){  if (context == null) {    noContextValue=null;  } else {    contextToValueMap.remove(context);  }}  }
class C{  @Override public synchronized boolean rowUpdated() throws SQLException {  throw SQLError.createSQLFeatureNotSupportedException();}  }
class C{  @Override protected void configure(HttpSecurity http) throws Exception {  http.httpBasic().authenticationEntryPoint(new RedirectAuthenticationEntryPoint()).and().rememberMe().userDetailsService(userDetailsService).key("steam").useSecureCookie(true).tokenValiditySeconds(25000).and().authorizeRequests().antMatchers("/index.html","/","/login","/javascript/**","/fonts/**","/stylesheets/**","/images/**","/api/currency-rate").permitAll().antMatchers(HttpMethod.GET,"/attention").hasAnyAuthority("ROLE_ADMIN","ROLE_ENGINEER","ROLE_BOSS").antMatchers(HttpMethod.GET,"/delay").hasAnyAuthority("ROLE_ADMIN","ROLE_ENGINEER","ROLE_BOSS").antMatchers(HttpMethod.POST,"/api/cheques/{\\d+}/diagnostics").hasAnyAuthority("ROLE_ADMIN","ROLE_ENGINEER","ROLE_BOSS").antMatchers(HttpMethod.DELETE,"/api/cheques/{\\d+}/diagnostics/{\\d+}").hasAuthority("ROLE_ADMIN").antMatchers(HttpMethod.DELETE,"/api/cheques/{\\d+}/notes/{\\d+}").hasAuthority("ROLE_ADMIN").antMatchers(HttpMethod.DELETE,"/api/cheques/{\\d+}").hasAuthority("ROLE_ADMIN").antMatchers(HttpMethod.DELETE,"/api/photo/{\\d+}/{\\d+}").hasAuthority("ROLE_ADMIN").antMatchers(HttpMethod.GET,"/api/currency-rate-list").hasAuthority("ROLE_ADMIN").antMatchers(HttpMethod.POST,"/api/currency-rate").hasAuthority("ROLE_ADMIN").antMatchers(HttpMethod.POST,"/api/user").hasAuthority("ROLE_ADMIN").antMatchers(HttpMethod.DELETE,"/api/user/{\\d+}").hasAuthority("ROLE_ADMIN").anyRequest().authenticated().and().logout().logoutSuccessUrl("/").invalidateHttpSession(true).deleteCookies("JSESSIONID").and().csrf().csrfTokenRepository(csrfTokenRepository()).and().addFilterAfter(csrfHeaderFilter(),SessionManagementFilter.class).addFilterBefore(new ReCaptchaAuthFilter(reCaptchaProperties),BasicAuthenticationFilter.class);}  }
class C{  public boolean isOppUpdatesEnabled(){  return oppUpdatesEnabled;}  }
class C{  public static String formatElapsed(long elapsedMS){  if (elapsedMS == 0)   return "0";  StringBuffer sb=new StringBuffer();  if (elapsedMS < 0) {    elapsedMS=-elapsedMS;    sb.append("-");  }  long miliSeconds=elapsedMS % 1000;  elapsedMS=elapsedMS / 1000;  long seconds=elapsedMS % 60;  elapsedMS=elapsedMS / 60;  long minutes=elapsedMS % 60;  elapsedMS=elapsedMS / 60;  long hours=elapsedMS % 24;  long days=elapsedMS / 24;  if (days != 0)   sb.append(days).append("'");  if (hours != 0)   sb.append(get2digits(hours)).append(":"); else   if (days != 0)   sb.append("00:");  if (minutes != 0)   sb.append(get2digits(minutes)).append(":"); else   if (hours != 0 || days != 0)   sb.append("00:");  sb.append(get2digits(seconds)).append(".").append(miliSeconds);  return sb.toString();}  }
class C{  @Nullable public GridCacheMvccCandidate releaseLocal(long threadId){  GridCacheMvccCandidate owner=localOwner();  if (owner == null || owner.threadId() != threadId)   return owner;  owner.setUsed();  remove0(owner.version(),true);  return anyOwner();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public TableColumn(int modelIndex){  this(modelIndex,75,null,null);}  }
class C{  public boolean hasLanding(){synchronized (activities) {    for (int i=0; i < activities.size(); i++) {      if (activities.get(i).isLanding())       return true;    }  }  return false;}  }
class C{  private void addCleanupInstruction(ProgramBlock pb,Instruction inst) throws DMLRuntimeException {  if (pb instanceof WhileProgramBlock) {    WhileProgramBlock wpb=(WhileProgramBlock)pb;    ArrayList<ProgramBlock> childs=wpb.getChildBlocks();    if (!childs.get(childs.size() - 1).getInstructions().isEmpty())     childs.get(childs.size() - 1).addInstruction(inst); else {      ProgramBlock pbNew=new ProgramBlock(pb.getProgram());      pbNew.addInstruction(inst);      childs.add(pbNew);    }  } else   if (pb instanceof ForProgramBlock) {    ForProgramBlock wpb=(ForProgramBlock)pb;    ArrayList<ProgramBlock> childs=wpb.getChildBlocks();    if (!childs.get(childs.size() - 1).getInstructions().isEmpty())     childs.get(childs.size() - 1).addInstruction(inst); else {      ProgramBlock pbNew=new ProgramBlock(pb.getProgram());      pbNew.addInstruction(inst);      childs.add(pbNew);    }  } else   if (pb instanceof IfProgramBlock)   ((IfProgramBlock)pb).addExitInstruction(inst); else   if (pb instanceof FunctionProgramBlock)   ; else {    pb.addInstruction(inst);  }}  }
class C{  public PrintStream(OutputStream out,boolean autoFlush,String encoding) throws UnsupportedEncodingException {  this(autoFlush,requireNonNull(out,"Null output stream"),toCharset(encoding));}  }
class C{  public StatsCollectionEvent(String name,long time,long data){  this(name,new XYDataItem(time,data));}  }
class C{  @Override public boolean supportsBatchUpdates(){  debugCodeCall("supportsBatchUpdates");  return true;}  }
class C{  public TamsTurnout(int number,String prefix,TamsTrafficController etc){  super(prefix + "T" + number);  _number=number;  this.prefix=prefix;  tc=etc;  TamsMessage m=new TamsMessage("xT " + _number + ",,0");  m.setBinary(false);  m.setReplyType('T');  tc.sendTamsMessage(m,this);  _validFeedbackTypes|=MONITORING;  _activeFeedbackType=MONITORING;  if (modeNames == null) {    initFeedbackModes();  }  _validFeedbackNames=modeNames;  _validFeedbackModes=modeValues;}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  @SuppressWarnings("fallthrough") boolean parseIdentifier(boolean lower) throws IOException {switch (ch) {case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':    if (lower) {      ch='a' + (ch - 'A');    }case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':  break;default :return false;}addString(ch);ch=in.read();parseNameToken(lower);return true;}  }
class C{  public static void checkAttributeMismatch(IgniteLogger log,String cfgName,UUID rmtNodeId,String attrName,String attrMsg,@Nullable Object locVal,@Nullable Object rmtVal,boolean fail) throws IgniteCheckedException {  assert rmtNodeId != null;  assert attrName != null;  assert attrMsg != null;  if (!F.eq(locVal,rmtVal)) {    if (fail) {      throw new IgniteCheckedException(attrMsg + " mismatch (fix " + attrMsg.toLowerCase()+ " in cache "+ "configuration or set -D"+ IGNITE_SKIP_CONFIGURATION_CONSISTENCY_CHECK+ "=true "+ "system property) [cacheName="+ cfgName+ ", local"+ capitalize(attrName)+ "="+ locVal+ ", remote"+ capitalize(attrName)+ "="+ rmtVal+ ", rmtNodeId="+ rmtNodeId+ ']');    } else {      assert log != null;      U.warn(log,attrMsg + " mismatch (fix " + attrMsg.toLowerCase()+ " in cache "+ "configuration) [cacheName="+ cfgName+ ", local"+ capitalize(attrName)+ "="+ locVal+ ", remote"+ capitalize(attrName)+ "="+ rmtVal+ ", rmtNodeId="+ rmtNodeId+ ']');    }  }}  }
class C{  private void appendType(Type genericType,final StringBuilder builder){  builder.append(getImplName(genericType,false));}  }
class C{  public static String encode(final char c){  if (c >= 32 && c < 127 && c != '\\' && c != '\'')   return "'" + String.valueOf(c) + "'"; else {    if (c == '\b')     return "'\\b'"; else     if (c == '\n')     return "'\\n'"; else     if (c == '\t')     return "'\\t'"; else     if (c == '\'')     return "'\\''"; else     if (c == '\\')     return "'\\\\'"; else     if (c == '\0')     return "'\\\\0"; else {      String s=Integer.toHexString((int)c);switch (s.length()) {case 1:        s="'\\u000" + s + "'";      break;case 2:    s="'\\u00" + s + "'";  break;case 3:s="'\\u0" + s + "'";break;case 4:s="'\\u" + s + "'";break;default :throw new RuntimeException("Default case should never occur");}return s;}}}  }
class C{  public void removeChartMouseListener(ChartMouseListenerFX listener){  this.chartMouseListeners.remove(listener);}  }
class C{  public double contentsAsDouble() throws NumberFormatException {  return Double.parseDouble(contentsAsString());}  }
class C{  public DocumentListFeed search(Map<String,String> searchParameters,String category) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (searchParameters == null) {    throw new DocumentListException("searchParameters null");  }  URL url;  if (category == null || category.equals("")) {    url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED);  } else   if (category.equals("documents")) {    url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + URL_CATEGORY_DOCUMENT);  } else   if (category.equals("spreadsheets")) {    url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + URL_CATEGORY_SPREADSHEET);  } else   if (category.equals("presentations")) {    url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + URL_CATEGORY_PRESENTATION);  } else   if (category.equals("starred")) {    url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + URL_CATEGORY_STARRED);  } else   if (category.equals("trashed")) {    url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + URL_CATEGORY_TRASHED);  } else   if (category.equals("folders")) {    url=buildUrl(URL_DEFAULT + URL_DOCLIST_FEED + URL_CATEGORY_FOLDER);  } else {    throw new DocumentListException("invaild category");  }  Query qry=new Query(url);  for (  String key : searchParameters.keySet()) {    qry.setStringCustomParameter(key,searchParameters.get(key));  }  return service.query(qry,DocumentListFeed.class);}  }
class C{  private CharSequence toLowercase(CharSequence chs){  final int length=chs.length();  scratch.setLength(length);  scratch.grow(length);  char buffer[]=scratch.chars();  for (int i=0; i < length; ) {    i+=Character.toChars(Character.toLowerCase(Character.codePointAt(chs,i)),buffer,i);  }  return scratch.get();}  }
class C{  public IPackageFragment[] findPackageFragments(String name,boolean partialMatch){  return findPackageFragments(name,partialMatch,false);}  }
class C{  public void clear(){  for (  List<V> value : map.values()) {    value.clear();  }  map.clear();}  }
class C{  public static boolean isFile(String file){  return (new File(file)).isFile();}  }
class C{  @SuppressLint("NewApi") public static void postInvalidateOnAnimation(View view){  if (Build.VERSION.SDK_INT >= 16)   view.postInvalidateOnAnimation(); else   view.postInvalidateDelayed(10);}  }
class C{  MultiplexedDatagramSocket(MultiplexingDatagramSocket multiplexing,DatagramPacketFilter filter) throws SocketException {  super(multiplexing);  if (multiplexing == null)   throw new NullPointerException("multiplexing");  this.multiplexing=multiplexing;  this.filter=filter;}  }
class C{  public static ThreadSafeSwfInfo wrap(Object syncObj,SwfInfo swfInfo){  if (swfInfo != null)   return new ThreadSafeSwfInfo(syncObj,swfInfo); else   return null;}  }
class C{  public void forcePersistLocked(long currentTimeMillis){  if (mPending.isDirty()) {    if (LOGD)     Slog.d(TAG,"forcePersistLocked() writing for " + mCookie);    try {      mRotator.rewriteActive(mPendingRewriter,currentTimeMillis);      mRotator.maybeRotate(currentTimeMillis);      mPending.reset();    } catch (    IOException e) {      Log.wtf(TAG,"problem persisting pending stats",e);      recoverFromWtf();    }  }}  }
class C{  public void write(OutputStream out) throws IOException {  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(out,"UTF8"));  bw.write("JarIndex-Version: 1.0\n\n");  if (jarFiles != null) {    for (int i=0; i < jarFiles.length; i++) {      String jar=jarFiles[i];      bw.write(jar + "\n");      LinkedList<String> jarlist=jarMap.get(jar);      if (jarlist != null) {        Iterator<String> listitr=jarlist.iterator();        while (listitr.hasNext()) {          bw.write(listitr.next() + "\n");        }      }      bw.write("\n");    }    bw.flush();  }}  }
class C{  void declarePrefix(String prefix,String uri){  if (!tablesDirty) {    copyTables();  }  if (declarations == null) {    declarations=new Vector();  }  prefix=prefix.intern();  uri=uri.intern();  if ("".equals(prefix)) {    if ("".equals(uri)) {      defaultNS=null;    } else {      defaultNS=uri;    }  } else {    prefixTable.put(prefix,uri);    uriTable.put(uri,prefix);  }  declarations.addElement(prefix);}  }
class C{  public String namespaceURI(){  return this.node.namespaceURI();}  }
class C{  public Vector3f divide(float scalar){  scalar=1f / scalar;  return new Vector3f(x * scalar,y * scalar,z * scalar);}  }
class C{  public static long reverse(long v){  v=((v >>> 1) & 0x5555555555555555L) | ((v & 0x5555555555555555L) << 1);  v=((v >>> 2) & 0x3333333333333333L) | ((v & 0x3333333333333333L) << 2);  v=((v >>> 4) & 0x0F0F0F0F0F0F0F0FL) | ((v & 0x0F0F0F0F0F0F0F0FL) << 4);  v=((v >>> 8) & 0x00FF00FF00FF00FFL) | ((v & 0x00FF00FF00FF00FFL) << 8);  v=((v >>> 16) & 0x0000FFFF0000FFFFL) | ((v & 0x0000FFFF0000FFFFL) << 16);  return ((v >>> 32)) | ((v) << 32);}  }
class C{  private void addCSSClasses(SVGPlot svgp,int clusterID,double opac){  final StyleLibrary style=context.getStyleLibrary();  ColorLibrary colors=style.getColorSet(StyleLibrary.PLOT);  CSSClass cls=new CSSClass(this,CLUSTERHULL + clusterID);  cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,.5 * style.getLineWidth(StyleLibrary.PLOT));  final String color=colors.getColor(clusterID);  cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,color);  cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,color);  cls.setStatement(SVGConstants.CSS_FILL_OPACITY_PROPERTY,opac);  svgp.addCSSClassOrLogError(cls);}  }
class C{  public final String[] keys(){  String[] keysArr=new String[m_firstFree];  for (int i=0; i < m_firstFree; i++) {    keysArr[i]=m_map[i];  }  return keysArr;}  }
class C{  public static boolean isProduction(){  if (isProduction == null) {    lock.lock();    try {      if (isProduction == null) {        try {          String developement=System.getProperty(CRUX_DEV_PROPERTY);          if (StringUtils.isEmpty(developement)) {            isProduction=true;          } else {            isProduction=!Boolean.parseBoolean(developement);          }        } catch (        Throwable e) {          isProduction=true;        }      }    }  finally {      lock.unlock();    }  }  return isProduction;}  }
class C{  public static Test suite(){  return new TestSuite(ArffTest.class);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateFractalDimensionRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateFractalDimensionVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public KeyException(String msg){  super(msg);}  }
class C{  public Property yearOfCentury(){  return new Property(this,getChronology().yearOfCentury());}  }
class C{  public boolean isHttp2Only(){  return this.isHttp2Only;}  }
class C{  @Override public <T extends Proxy>T retrieveProxy(String proxyName){  return this.model.retrieveProxy(proxyName);}  }
class C{  public static <T>Collection<T> applyFilter(Iterable<? extends T> elements,GridClientPredicate<? super T>... filters){  assert filters != null;  Collection<T> res=new LinkedList<>();  for (  T e : elements) {    boolean add=true;    for (    GridClientPredicate<? super T> filter : filters)     if (filter != null && !filter.apply(e)) {      add=false;      break;    }    if (add)     res.add(e);  }  return res;}  }
class C{  @Override public boolean isFinished(){  return true;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public long run(String[] args) throws Exception {  int depth=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  Node[] trees=genTrees(depth,ncycles);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,trees,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,trees,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public static List<Cloudlet> createCloudletList(int brokerId,int cloudletsNumber){  List<Cloudlet> list=new ArrayList<Cloudlet>();  long fileSize=300;  long outputSize=300;  long seed=RandomConstants.CLOUDLET_UTILIZATION_SEED;  UtilizationModel utilizationModelNull=new UtilizationModelNull();  for (int i=0; i < cloudletsNumber; i++) {    Cloudlet cloudlet=null;    if (seed == -1) {      cloudlet=new Cloudlet(i,Constants.CLOUDLET_LENGTH,Constants.CLOUDLET_PES,fileSize,outputSize,new UtilizationModelStochastic(),utilizationModelNull,utilizationModelNull);    } else {      cloudlet=new Cloudlet(i,Constants.CLOUDLET_LENGTH,Constants.CLOUDLET_PES,fileSize,outputSize,new UtilizationModelStochastic(seed * i),utilizationModelNull,utilizationModelNull);    }    cloudlet.setUserId(brokerId);    cloudlet.setVmId(i);    list.add(cloudlet);  }  return list;}  }
class C{  private void beforeReadFromSourceStream(){  FloatSampleBuffer lBuffer=thisBuffer;  if (lBuffer != null && lBuffer.getSampleCount() != sourceBufferSizeSamples) {    lBuffer.changeSampleCount(sourceBufferSizeSamples,false);  }}  }
class C{  public JSONNode addPrimitive(String name,Boolean value){  return add(name,value,NodeType.PRIMITIVE);}  }
class C{  public void pause(){  checkState();  if (mState == STATE_PLAYING) {    PlaybackService.pause(getContext(),mClientKey);    mState=STATE_PAUSED;  }}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,"uil-pool-"));}  }
class C{  public DropboxSettingsPanel(ActionListener a,DocumentListener d){  this.settings=Settings.getInstance();  this.dropboxAdapterFactory=(DropboxAdapterFactory)CSPAdapterFactory.getInstance(StorageBackendType.DROPBOX);  initComponents();  syncDirTextField.getDocument().addDocumentListener(d);  accessTokenRefreshButton.addActionListener(a);  refresh();}  }
class C{  private Event findEvent(List<Event> events,String id){  for (  Event evt : events) {    if (evt.getEventType() == EventType.SERVICE_EVENT && evt.getEventIdentifier().equals(id)) {      return evt;    }  }  return null;}  }
class C{  protected void undeploy(HttpServletResponse response,String contextPath) throws IOException {  boolean error=false;  if (!contextPath.startsWith("/")) {    sendError(response,"Path must start with a forward slash");    error=true;  }  ContextHandler handler=getContextHandler(contextPath);  if (handler == null) {    sendError(response,"Could not find handler for the context " + contextPath);    error=true;  }  try {    handler.stop();  } catch (  Exception e) {    sendError(response,"Could not stop context handler " + contextPath);    Log.warn(e);    error=true;  }  if (error) {    return;  } else {    chc.removeHandler(handler);    String webAppLocation=getWebAppLocation((WebAppContext)handler);    File webAppFile=new File(webAppLocation);    if (!webAppFile.exists()) {      sendError(response,"Can't find a valid file for the context " + contextPath);    } else     if (!webAppFile.getPath().startsWith(webAppDirectory.getPath())) {      sendMessage(response,"Webapp with context " + contextPath + " has been undeployed but not removed from the filesystem");    } else {      boolean deleted=false;      if (webAppFile.isFile()) {        deleted=webAppFile.delete();      } else {        deleteDirectory(webAppFile);        deleted=!webAppFile.exists();      }      if (deleted) {        sendMessage(response,"Webapp with context " + contextPath + " has been undeployed and removed from the filesystem");      } else {        sendError(response,"Webapp with context " + contextPath + " has been undeployed but it couldn't be removed from the filesystem");      }    }  }}  }
class C{  private void grow(int minCapacity){  int oldCapacity=buf.length;  int newCapacity=oldCapacity << 1;  if (newCapacity - minCapacity < 0)   newCapacity=minCapacity;  if (newCapacity - MAX_ARRAY_SIZE > 0)   newCapacity=hugeCapacity(minCapacity);  buf=Arrays.copyOf(buf,newCapacity);}  }
class C{  protected void engineSetPadding(String paddingScheme) throws NoSuchPaddingException {  core.setPadding(paddingScheme);}  }
class C{  public void removeExtension(Class<? extends Extension> extensionClass){  nonRepeatingExtensionMap.remove(extensionClass);}  }
class C{  private double warp(double f,double delta){  return Math.tan(Math.PI * f * delta);}  }
class C{  public void makePredefined(){  addPerspective(DESIGN,false);  restoreDefault(DESIGN);  addPerspective(RESULT,false);  restoreDefault(RESULT);}  }
class C{  public DefaultHandler popSubHandler(){  return (DefaultHandler)this.subHandlers.pop();}  }
class C{  public void updateParametersFrom(SQLiteDatabaseConfiguration other){  if (other == null) {    throw new IllegalArgumentException("other must not be null.");  }  if (!path.equals(other.path)) {    throw new IllegalArgumentException("other configuration must refer to " + "the same database.");  }  openFlags=other.openFlags;  maxSqlCacheSize=other.maxSqlCacheSize;  locale=other.locale;  foreignKeyConstraintsEnabled=other.foreignKeyConstraintsEnabled;  customFunctions.clear();  customFunctions.addAll(other.customFunctions);}  }
class C{  public VerticalDoubleDataBox(DataBox dataBox){  data=new double[dataBox.numCols()][dataBox.numRows()];  for (int i=0; i < dataBox.numRows(); i++) {    for (int j=0; j < dataBox.numCols(); j++) {      data[j][i]=dataBox.get(i,j).doubleValue();    }  }}  }
class C{  protected void incrementAndEnqueue(Runnable runner){synchronized (LOCK) {    openCount+=1;    enqueue(runner);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void drawCustomCursor(final Graphics2D graphics,final RouteDescription routeDescription,final int xOffset,final int yOffset,final double scale){  final BufferedImage cursorImage=(BufferedImage)routeDescription.getCursorImage();  if (cursorImage != null) {    for (    Point[] endPoint : routeOptimizer.getAllPoints(routeOptimizer.getLastEndPoint())) {      graphics.drawImage(cursorImage,(int)(((endPoint[0].x - xOffset) - (cursorImage.getWidth() / 2)) * scale),(int)(((endPoint[0].y - yOffset) - (cursorImage.getHeight() / 2)) * scale),null);    }  }}  }
class C{  public static String join(List l){  return join(l," ");}  }
class C{  protected static Node deserializeString(String doc){  try {    StringReader reader=new StringReader(doc);    StreamSource source=new StreamSource(reader);    DOMResult result=new DOMResult();    TransformerFactory tf=TransformerFactory.newInstance();    Transformer transformer=tf.newTransformer();    transformer.setOutputProperty(OutputKeys.ENCODING,DEFAULT_ENCODING);    transformer.setOutputProperty(OutputKeys.INDENT,DEFAULT_INDENT);    transformer.transform(source,result);    return result.getNode();  } catch (  Throwable e) {    log.log(Level.SEVERE,"Failed to serialize node",e);  }  return null;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  void remove(){  deactivateTurnout();  active=false;}  }
class C{  public static CCSpriteFrameCache sharedSpriteFrameCache(){  if (sharedSpriteFrameCache_ == null) {    sharedSpriteFrameCache_=new CCSpriteFrameCache();  }  return sharedSpriteFrameCache_;}  }
class C{  public byte[] receiveSpecLenBytes(int len){  Log.d(TAG,"receiveSpecLenBytes() entrance: len = " + len);  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    byte[] recDatas=Arrays.copyOf(mReceivePacket.getData(),mReceivePacket.getLength());    Log.d(TAG,"received len : " + recDatas.length);    for (int i=0; i < recDatas.length; i++) {      Log.e(TAG,"recDatas[" + i + "]:"+ recDatas[i]);    }    Log.e(TAG,"receiveSpecLenBytes: " + new String(recDatas));    if (recDatas.length != len) {      Log.w(TAG,"received len is different from specific len, return null");      return null;    }    return recDatas;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public static void fillAsterisks(char[] list){  for (int i=0; i < list.length; i++) {    list[i]='*';  }}  }
class C{  public RenderResult render(String path,String resourceType,String wcmmode,Cqx cqx){  Invocable invocable=((Invocable)engine);  try {    engine.getBindings(ScriptContext.ENGINE_SCOPE).put("Cqx",cqx);    Object AemGlobal=engine.get("AemGlobal");    Object value=invocable.invokeMethod(AemGlobal,"renderReactComponent",path,resourceType,wcmmode);    RenderResult result=new RenderResult();    result.html=(String)((Map<String,Object>)value).get("html");    result.cache=((Map<String,Object>)value).get("state").toString();    return result;  } catch (  NoSuchMethodException|ScriptException e) {    throw new TechnicalException("cannot render react on server",e);  }}  }
class C{  public TableViewerColumnBuilder pixelWidth(int width){  this.widthPixel=width;  return this;}  }
class C{  protected void serializeAttList(Element node) throws SAXException {  NamedNodeMap atts=node.getAttributes();  int nAttrs=atts.getLength();  for (int i=0; i < nAttrs; i++) {    Node attr=atts.item(i);    String localName=attr.getLocalName();    String attrName=attr.getNodeName();    String attrPrefix=attr.getPrefix() == null ? "" : attr.getPrefix();    String attrValue=attr.getNodeValue();    String type=null;    if (fIsLevel3DOM) {      type=((Attr)attr).getSchemaTypeInfo().getTypeName();    }    type=type == null ? "CDATA" : type;    String attrNS=attr.getNamespaceURI();    if (attrNS != null && attrNS.length() == 0) {      attrNS=null;      attrName=attr.getLocalName();    }    boolean isSpecified=((Attr)attr).getSpecified();    boolean addAttr=true;    boolean applyFilter=false;    boolean xmlnsAttr=attrName.equals("xmlns") || attrName.startsWith("xmlns:");    if ((fFeatures & WELLFORMED) != 0) {      isAttributeWellFormed(attr);    }    if ((fFeatures & NAMESPACES) != 0 && !xmlnsAttr) {      if (attrNS != null) {        attrPrefix=attrPrefix == null ? "" : attrPrefix;        String declAttrPrefix=fNSBinder.getPrefix(attrNS);        String declAttrNS=fNSBinder.getURI(attrPrefix);        if ("".equals(attrPrefix) || "".equals(declAttrPrefix) || !attrPrefix.equals(declAttrPrefix)) {          if (declAttrPrefix != null && !"".equals(declAttrPrefix)) {            attrPrefix=declAttrPrefix;            if (declAttrPrefix.length() > 0) {              attrName=declAttrPrefix + ":" + localName;            } else {              attrName=localName;            }          } else {            if (attrPrefix != null && !"".equals(attrPrefix) && declAttrNS == null) {              if ((fFeatures & NAMESPACEDECLS) != 0) {                fSerializer.addAttribute(XMLNS_URI,attrPrefix,XMLNS_PREFIX + ":" + attrPrefix,"CDATA",attrNS);                fNSBinder.declarePrefix(attrPrefix,attrNS);                fLocalNSBinder.declarePrefix(attrPrefix,attrNS);              }            } else {              int counter=1;              attrPrefix="NS" + counter++;              while (fLocalNSBinder.getURI(attrPrefix) != null) {                attrPrefix="NS" + counter++;              }              attrName=attrPrefix + ":" + localName;              if ((fFeatures & NAMESPACEDECLS) != 0) {                fSerializer.addAttribute(XMLNS_URI,attrPrefix,XMLNS_PREFIX + ":" + attrPrefix,"CDATA",attrNS);                fNSBinder.declarePrefix(attrPrefix,attrNS);                fLocalNSBinder.declarePrefix(attrPrefix,attrNS);              }            }          }        }      } else {        if (localName == null) {          String msg=Utils.messages.createMessage(MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,new Object[]{attrName});          if (fErrorHandler != null) {            fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,null,null,null));          }        } else {        }      }    }    if ((((fFeatures & DISCARDDEFAULT) != 0) && isSpecified) || ((fFeatures & DISCARDDEFAULT) == 0)) {      applyFilter=true;    } else {      addAttr=false;    }    if (applyFilter) {      if (fFilter != null && (fFilter.getWhatToShow() & NodeFilter.SHOW_ATTRIBUTE) != 0) {        if (!xmlnsAttr) {          short code=fFilter.acceptNode(attr);switch (code) {case NodeFilter.FILTER_REJECT:case NodeFilter.FILTER_SKIP:            addAttr=false;          break;default :      }    }  }}if (addAttr && xmlnsAttr) {  if ((fFeatures & NAMESPACEDECLS) != 0) {    if (localName != null && !"".equals(localName)) {      fSerializer.addAttribute(attrNS,localName,attrName,type,attrValue);    }  }} else if (addAttr && !xmlnsAttr) {  if (((fFeatures & NAMESPACEDECLS) != 0) && (attrNS != null)) {    fSerializer.addAttribute(attrNS,localName,attrName,type,attrValue);  } else {    fSerializer.addAttribute("",localName,attrName,type,attrValue);  }}if (xmlnsAttr && ((fFeatures & NAMESPACEDECLS) != 0)) {  int index;  String prefix=(index=attrName.indexOf(":")) < 0 ? "" : attrName.substring(index + 1);  if (!"".equals(prefix)) {    fSerializer.namespaceAfterStartElement(prefix,attrValue);  }}}}  }
class C{  public del addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private void createFileLink(Path targetDir,Path sourceFile){  try {    Files.createLink(targetDir,sourceFile);    log.debug("The link({} to {}) was successfully created!",sourceFile.toString(),targetDir.toString());  } catch (  IOException|UnsupportedOperationException|SecurityException e) {    throw BackupException.fatals.failedToCreateFileLink(sourceFile.toString(),targetDir.toString(),e);  }}  }
class C{  public ButtonGroup(RadioButton... rb){  addAll(rb);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public Projectron(KernelTrick k,double eta,boolean useMarginUpdates){  setKernel(k);  setEta(eta);  setUseMarginUpdates(useMarginUpdates);}  }
class C{  public void sort(){  Arrays.sort(_data,0,_pos);}  }
class C{  private Set<Emoticon> fetchEmoteSet(String room,int emoteset){  UrlRequest r=new UrlRequest("https://api.frankerfacez.com/v1/set/" + emoteset);  r.run();  if (r.getResult() != null) {    Set<Emoticon> emotes=FrankerFaceZParsing.parseSetEmotes(r.getResult(),Emoticon.SubType.EVENT,room);    return emotes;  }  return new HashSet<>();}  }
class C{  public static boolean isAccessibilityServiceEnabled(Context context,String packageName){  final ContentResolver resolver=context.getContentResolver();  final String enabledServices=Settings.Secure.getString(resolver,Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);  return enabledServices.contains(packageName);}  }
class C{  private byte parseUnsignedByte(final String v){  short pv=XMLDatatypeUtil.parseShort(v);  if (pv < 0 || pv > MAX_UNSIGNED_BYTE) {    throw new NumberFormatException("Value out of range for unsigned byte");  }  pv+=Byte.MIN_VALUE;  return (byte)pv;}  }
class C{  public Set<Cache.Entry<K,V>> entrySetx(CacheEntryPredicate... filter){  GridCacheGateway<K,V> gate=this.gate;  CacheOperationContext prev=onEnter(gate,opCtx);  try {    return delegate.entrySetx(filter);  }  finally {    onLeave(gate,prev);  }}  }
class C{  public boolean confirmEnoughAbsoluteSources(int[][] sourcesAbsolute,int destAgentRow,int destAgentColumn){  if (countOfAbsoluteSources(sourcesAbsolute,destAgentRow,destAgentColumn) != numSources) {    throw new RuntimeException("Incorrect number of sources in absolutes");  }  return true;}  }
class C{  public void saveSupportedExtensions(Set<String> supportedExts){  mRcsSettings.setSupportedRcsExtensions(supportedExts);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:38.067 -0500",hash_original_method="BF37BBD9CA2A2DE01ED617F2C2EA69AA",hash_generated_method="3B0CFEE9CA9904EF17EDFCD35393AA9C") public int compareTo(UUID uuid){  if (uuid == this) {    return 0;  }  if (this.mostSigBits != uuid.mostSigBits) {    return this.mostSigBits < uuid.mostSigBits ? -1 : 1;  }  assert this.mostSigBits == uuid.mostSigBits;  if (this.leastSigBits != uuid.leastSigBits) {    return this.leastSigBits < uuid.leastSigBits ? -1 : 1;  }  assert this.leastSigBits == uuid.leastSigBits;  return 0;}  }
class C{  protected void endHtml(final PrintWriter out){  out.println("</body></html>");}  }
class C{  public boolean isIconBtn3(){  return isIconBtn3;}  }
class C{  public static void tagNode(final JFrame parent,final JTree tagsTree,final NaviNode node){  try {    tagNode(parent,node,getSelectedTag(tagsTree));  } catch (  final MaybeNullException exception) {  }}  }
class C{  @SuppressWarnings("unused") private void debugTime(String s,boolean collectGarbage){  if (false) {    if (collectGarbage)     System.gc();    System.out.println(s + ": " + System.currentTimeMillis());  }}  }
class C{  public boolean hasLimit(){  return limit >= 0L;}  }
class C{  public static int asUShort(EnumSet<EmbeddingFlags> flagSet){  int flags=0;  for (  EmbeddingFlags flag : flagSet) {    flags|=flag.mask();  }  return flags;}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public Object[] toArray(Object array[]){  if (array.length < size)   array=(Object[])java.lang.reflect.Array.newInstance(array.getClass().getComponentType(),size);  Object[] theElements=elements;  for (int i=size; --i >= 0; )   array[i]=theElements[i];  if (array.length > size)   array[size]=null;  return array;}  }
class C{  @Inline public static void checkJNICountDownToGC(){  if (false && canForceGC()) {    if (jniCountDownToGC-- <= 0) {      jniCountDownToGC=VM.StressGCAllocationInterval;      System.gc();    }  }}  }
class C{  public static Short toRef(short s){  return Short.valueOf(s);}  }
class C{  protected void deactivateFrame(JInternalFrame f){  getDesktopManager().deactivateFrame(f);}  }
class C{  private static void sort(int[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        int ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        int a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      int last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    int t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    int t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    int t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    int t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    int pivot1=a[e2];    int pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      int ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        int ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    int pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      int ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  synchronized void removeUnusedSets(){  attributesPool.size();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.405 -0500",hash_original_method="3B08BDE00067F884387760F12D698F42",hash_generated_method="90A061C63C0EE738AA3B18172571066F") private boolean isViewAncestorOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewAncestorOf((View)theParent,parent);}  }
class C{  private String escapeElementContent(String value){  return escapeXmlValue(value,false);}  }
class C{  private void intersect(SegmentString ss0,SegmentString ss1,SegmentIntersector segInt){  Coordinate[] pts0=ss0.getCoordinates();  Coordinate[] pts1=ss1.getCoordinates();  for (int i0=0; i0 < pts0.length - 1; i0++) {    for (int i1=0; i1 < pts1.length - 1; i1++) {      segInt.processIntersections(ss0,i0,ss1,i1);      if (segInt.isDone())       return;    }  }}  }
class C{  @Deprecated public static <E>Iterable<E> unmodifiableIterable(ImmutableCollection<E> iterable){  return checkNotNull(iterable);}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void checkUpdatedTimesForStop(final TransitRouteStop stop){  TreeMap<Double,Double> test=this.updatedTravelTimes.get(stop);  for (  Double e : test.descendingKeySet())   System.out.println("At time " + Time.writeTime(e) + " travel time is "+ test.get(e));}  }
class C{  public static byte[] encrypt(final SecretKeySpec key,final byte[] iv,final byte[] message) throws GeneralSecurityException {  final Cipher cipher=Cipher.getInstance(AES_MODE);  IvParameterSpec ivSpec=new IvParameterSpec(iv);  cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);  byte[] cipherText=cipher.doFinal(message);  return cipherText;}  }
class C{  public int totalElements(){  return childrenTotal + members.size();}  }
class C{  public SignatureXref addCrossReference(SignatureXref xref) throws IllegalArgumentException {  if (xref == null) {    throw new IllegalArgumentException("'xref' must not be null");  }  crossReferences.add(xref);  xref.setSignature(this);  return xref;}  }
class C{  public void testUnsizedDoublesCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.doubles().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  private ClientDetailsEntity loadClientObject(final OIDCAuthorizationRequestContext authorizationRequest){  log.debug("Loading client by id {}",authorizationRequest.getClientId());  return clientService.loadClientByClientId(authorizationRequest.getClientId());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRANSITION___GUARD_1:    return ((InternalEList<?>)getGuard_1()).basicRemove(otherEnd,msgs);case UmplePackage.TRANSITION___EVENT_DEFINITION_1:  return ((InternalEList<?>)getEventDefinition_1()).basicRemove(otherEnd,msgs);case UmplePackage.TRANSITION___ACTION_1:return ((InternalEList<?>)getAction_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void checkEnabledCipherSuites() throws SSLException {  for (  String enabledCipherSuite : enabledCipherSuites) {    if (enabledCipherSuite.equals(NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {      continue;    }    String keyType=CipherSuite.getByName(enabledCipherSuite).getServerKeyType();    if (keyType == null) {      return;    }    if (keyType.equals(CipherSuite.KEY_TYPE_RSA) || keyType.equals(CipherSuite.KEY_TYPE_DH_RSA)) {      if (checkForPrivateKey(keyType,RSAPrivateKey.class)) {        return;      }      continue;    }    if (keyType.equals(CipherSuite.KEY_TYPE_DSA) || keyType.equals(CipherSuite.KEY_TYPE_DH_DSA)) {      if (checkForPrivateKey(keyType,DSAPrivateKey.class)) {        return;      }      continue;    }    if (keyType.equals(CipherSuite.KEY_TYPE_EC) || keyType.equals(CipherSuite.KEY_TYPE_EC_RSA) || keyType.equals(CipherSuite.KEY_TYPE_EC_EC)) {      if (checkForPrivateKey(keyType,ECPrivateKey.class)) {        return;      }      continue;    }    throw new IllegalStateException("Unknown key type " + keyType);  }  throw new SSLException("Could not find any key store entries " + "to support the enabled cipher suites.");}  }
class C{  protected int computeScrollDeltaToGetChildRectOnScreenY(Rect rect){  int height=getHeight();  int screenTop=getScrollY();  int screenBottom=screenTop + height;  int fadingEdge=getVerticalFadingEdgeLength();  if (rect.top > 0) {    screenTop+=fadingEdge;  }  if (rect.bottom < getChildAt(0).getHeight()) {    screenBottom-=fadingEdge;  }  int scrollYDelta=0;  if (localLOGV)   Log.v(TAG,"child=" + rect.toString() + " screenTop="+ screenTop+ " screenBottom="+ screenBottom+ " height="+ height);  if (rect.bottom > screenBottom && rect.top > screenTop) {    if (rect.height() > height) {      scrollYDelta+=(rect.top - screenTop);    } else {      scrollYDelta+=(rect.bottom - screenBottom);    }    int bottom=getChildAt(getChildCount() - 1).getBottom();    int distanceToBottom=bottom - screenBottom;    if (localLOGV)     Log.v(TAG,"scrollYDelta=" + scrollYDelta + " distanceToBottom="+ distanceToBottom);    scrollYDelta=Math.min(scrollYDelta,distanceToBottom);  } else   if (rect.top < screenTop && rect.bottom < screenBottom) {    if (rect.height() > height) {      scrollYDelta-=(screenBottom - rect.bottom);    } else {      scrollYDelta-=(screenTop - rect.top);    }    scrollYDelta=Math.max(scrollYDelta,-getScrollY());  }  return scrollYDelta;}  }
class C{  private void processStart(final State current){  if (current.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    return;  }  try {    if (!isFinalStage(current) && current.nextPageLink == null) {      Operation queryIpLeasePagination=Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_LOCAL_QUERY_TASKS)).setBody(buildIpLeaseQuery(current));      queryIpLeasePagination.setCompletion((null)).sendWith(this);    } else {      sendStageProgressPatch(current);    }  } catch (  Throwable e) {    failTask(e);  }}  }
class C{  private void showInfoWindow(String infoText,boolean newPosition){  if (infoWindow == null) {    createInfoWindow();  }  Point location=prevCaretLocation;  if (location == null || newPosition) {    location=textField.getCaret().getMagicCaretPosition();  }  if (location == null) {    return;  }  prevCaretLocation=new Point(location);  int prevHeight=infoWindow.getHeight();  int prevWidth=infoWindow.getWidth();  infoLabel.setText(infoText);  Dimension preferredSize=infoWindow.getPreferredSize();  if (prevWidth > preferredSize.width && !newPosition) {    infoWindow.setSize(prevWidth,preferredSize.height);  } else {    infoWindow.setSize(preferredSize);  }  if (prevHeight != infoWindow.getHeight() || prevWidth != infoWindow.getWidth()) {    newPosition=true;  }  if (newPosition || !infoWindow.isVisible()) {    location.x-=infoWindow.getWidth() / 4;    if (location.x + infoWindow.getWidth() > textField.getWidth()) {      location.x=textField.getWidth() - infoWindow.getWidth();    } else     if (location.x < 8) {      location.x=8;    }    location.y-=infoWindow.getHeight();    SwingUtilities.convertPointToScreen(location,textField);    infoWindow.setLocation(location);  }  infoWindow.setVisible(true);}  }
class C{  public LocationRequestBuilder addRequestLocation(@NonNull String provider){  return addRequestLocation(provider,null);}  }
class C{  public void transformValues(TLongFunction function){  byte[] states=_states;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public OtaBitmap(byte[] otaBitmapData){  if (otaBitmapData != null) {    int infoField=otaBitmapData[0];    width_=otaBitmapData[1];    height_=otaBitmapData[2];    int depth=otaBitmapData[3];    int length=otaBitmapData.length - 4;    otaImgData_=new byte[length];    System.arraycopy(otaBitmapData,4,otaImgData_,0,length);  }}  }
class C{  public static Set<SimpleFeature> readFeatures(String filename,String type) throws IOException {  DataStore dataStore=FileDataStoreFinder.getDataStore(new File(filename));  Set<SimpleFeature> features=new HashSet<SimpleFeature>();  if (type == null) {    for (    String fType : dataStore.getTypeNames()) {      addFeatures(dataStore.getFeatureSource(fType),features);    }  } else {    addFeatures(dataStore.getFeatureSource(type),features);  }  return features;}  }
class C{  private void displayColorTransformAnimation(){  addCompleteFabView();  ViewCompat.setElevation(completeFABView,ViewCompat.getElevation(getChildAt(0)) + 1);  completeFABView.animate(progressArc.getScaleDownAnimator());}  }
class C{  public static void parse(String[] args) throws CmdLineException {  for (int i=0; i < args.length; i++) {    String a=args[i];    try {      if (a.equals("-o")) {        Options.outputDir=new File(args[i + 1]);        i++;      } else       if (a.startsWith("--output=")) {        Options.outputDir=new File(a.substring(9));      } else       if (a.equals("-a")) {        String[] parts=args[i + 1].split(",");        Options.minX=Integer.parseInt(parts[0]);        Options.minZ=Integer.parseInt(parts[1]);        Options.maxX=Integer.parseInt(parts[2]);        Options.maxZ=Integer.parseInt(parts[3]);        i++;      } else       if (a.startsWith("--area=")) {        String[] parts=a.substring(7).split(",");        Options.minX=Integer.parseInt(parts[0]);        Options.minZ=Integer.parseInt(parts[1]);        Options.maxX=Integer.parseInt(parts[2]);        Options.maxZ=Integer.parseInt(parts[3]);      } else       if (a.equals("-c")) {        String[] parts=args[i + 1].split(",");        Options.minX=Integer.parseInt(parts[0]) * 16;        Options.minZ=Integer.parseInt(parts[1]) * 16;        Options.maxX=Integer.parseInt(parts[2]) * 16;        Options.maxZ=Integer.parseInt(parts[3]) * 16;        i++;      } else       if (a.startsWith("--chunks=")) {        String[] parts=a.substring(9).split(",");        Options.minX=Integer.parseInt(parts[0]) * 16;        Options.minZ=Integer.parseInt(parts[1]) * 16;        Options.maxX=Integer.parseInt(parts[2]) * 16;        Options.maxZ=Integer.parseInt(parts[3]) * 16;      } else       if (a.equals("-h")) {        String[] parts=args[i + 1].split(",");        Options.minY=Integer.parseInt(parts[0]);        Options.maxY=Integer.parseInt(parts[1]);        i++;      } else       if (a.startsWith("--height=")) {        String[] parts=a.substring(9).split(",");        Options.minY=Integer.parseInt(parts[0]);        Options.maxY=Integer.parseInt(parts[1]);      } else       if (a.equals("-d")) {        Options.dimension=Integer.parseInt(args[i + 1]);        i++;      } else       if (a.startsWith("--dimension=")) {        Options.dimension=Integer.parseInt(a.substring(12));      } else       if (a.equals("-e")) {        Options.exportObj=false;        Options.exportMtl=false;        Options.exportTex=false;        for (        String part : args[i + 1].split(",")) {          if (part.equals("obj"))           Options.exportObj=true; else           if (part.equals("mtl"))           Options.exportMtl=true; else           if (part.equals("tex"))           Options.exportTex=true; else           throw new CmdLineException("Invalid argument to option -e: " + part);        }        i++;      } else       if (a.startsWith("--export=")) {        Options.exportObj=false;        Options.exportMtl=false;        Options.exportTex=false;        for (        String part : a.substring(9).split(",")) {          if (part.equals("obj"))           Options.exportObj=true; else           if (part.equals("mtl"))           Options.exportMtl=true; else           if (part.equals("tex"))           Options.exportTex=true; else           throw new CmdLineException("Invalid argument to option --export: " + part);        }      } else       if (a.startsWith("--texturepack=")) {        Options.texturePack=new File(a.substring(14));      } else       if (a.startsWith("--texturescale=")) {        Options.textureScale=Float.parseFloat(a.substring(15));      } else       if (a.startsWith("--objfile=")) {        Options.objFileName=a.substring(10);      } else       if (a.startsWith("--mtlfile=")) {        Options.mtlFileName=a.substring(10);      } else       if (a.startsWith("--scale=")) {        Options.scale=Float.parseFloat(a.substring(8));      } else       if (a.startsWith("--offset=")) {        String aux=a.substring(9);        if (aux.equals("none")) {          Options.offsetType=OffsetType.NONE;        } else         if (aux.equals("center")) {          Options.offsetType=OffsetType.CENTER;        } else {          Options.offsetType=OffsetType.CUSTOM;          String[] parts=aux.split(",");          Options.offsetX=Integer.parseInt(parts[0]);          Options.offsetZ=Integer.parseInt(parts[1]);        }      } else       if (a.equals("-s")) {        Options.renderSides=true;      } else       if (a.equals("--render-sides")) {        Options.renderSides=true;      } else       if (a.equals("--include-unknown")) {        Options.renderUnknown=true;      } else       if (a.equals("--ignore-biomes")) {        Options.renderBiomes=false;      } else       if (a.equals("--render-entities")) {        Options.renderEntities=true;      } else       if (a.equals("--object-per-chunk")) {        Options.objectPerChunk=true;      } else       if (a.equals("--object-per-mat")) {        Options.objectPerMaterial=true;      } else       if (a.equals("--object-per-block")) {        Options.objectPerBlock=true;      } else       if (a.equals("--remove-dup")) {        Options.removeDuplicates=true;      } else       if (a.equals("--optimize-geometry")) {        Options.optimiseGeometry=true;      } else       if (a.equals("--help")) {        printUsage();        System.exit(-1);      } else       if (a.startsWith("-")) {        throw new CmdLineException("Unrecognized option: " + a);      } else {        if (Options.worldDir == null)         Options.worldDir=new File(a); else         throw new CmdLineException("Only one world directory must be given.");      }    } catch (    CmdLineException ex) {      throw ex;    }catch (    IndexOutOfBoundsException ex) {      throw new CmdLineException("Missing argument to option " + a);    }catch (    Exception ex) {      throw new CmdLineException("Invalid option: " + a);    }  }  if (Options.worldDir == null)   throw new CmdLineException("Must specify the world directory.");  if (!Options.worldDir.isDirectory())   throw new CmdLineException(Options.worldDir + " is not a valid directory.");  if (!Options.outputDir.isDirectory())   throw new CmdLineException(Options.outputDir + " is not a valid directory.");}  }
class C{  protected void readFullyDirect(byte[] b,int off,int len){  readFully(b,off,len);}  }
class C{  private ReservoirItemsSketch(final T[] data,final long itemsSeen,final ResizeFactor rf,final short encodedResSize){  final int reservoirSize=ReservoirSize.decodeValue(encodedResSize);  if (data == null) {    throw new SketchesArgumentException("Instantiating sketch with null reservoir");  }  if (reservoirSize < 2) {    throw new SketchesArgumentException("Cannot instantiate sketch with reservoir size less than 2");  }  if (reservoirSize < data.length) {    throw new SketchesArgumentException("Instantiating sketch with max size less than array length: " + reservoirSize + " max size, array of length "+ data.length);  }  if ((itemsSeen >= reservoirSize && data.length < reservoirSize) || (itemsSeen < reservoirSize && data.length < itemsSeen)) {    throw new SketchesArgumentException("Instantiating sketch with too few samples. Items seen: " + itemsSeen + ", max reservoir size: "+ reservoirSize+ ", data array length: "+ data.length);  }  encodedResSize_=encodedResSize;  reservoirSize_=reservoirSize;  currItemsAlloc_=data.length;  itemsSeen_=itemsSeen;  rf_=rf;  data_=data;}  }
class C{  public JSONArray put(Map value){  put(new JSONObject(value));  return this;}  }
class C{  public static ByteString merge(Set<ByteString> serializedBags){  List<Bag> bags=Lists.newArrayList();  for (  ByteString serializedBag : serializedBags) {    try {      bags.add(Bag.parseFrom(serializedBag));    } catch (    InvalidProtocolBufferException e) {    }  }  if (bags.size() == 0) {    return null;  } else   if (bags.size() == 1) {    return bags.get(0).toByteString();  } else {    Bag.Builder builder=Bag.newBuilder();    for (    Bag bag : bags) {      builder.mergeFrom(bag);    }    if (builder.hasTupleBag()) {      builder.clearGroupBag();      builder.clearFilterBag();    } else     if (builder.hasGroupBag()) {      builder.clearTupleBag();      builder.clearFilterBag();    } else     if (builder.hasFilterBag()) {      builder.clearTupleBag();      builder.clearGroupBag();    } else {      return null;    }    return builder.build().toByteString();  }}  }
class C{  private boolean matchesOverlap(SmartRawMatch one,SmartRawMatch two){  int minEnd=(Math.min(one.getLocationEnd(),two.getLocationEnd()));  int maxStart=(Math.max(one.getLocationStart(),two.getLocationStart()));  int overlap=minEnd - maxStart + 1;  return overlap > SIBLINGS_OVERLAP_THRESHOLD;}  }
class C{  public boolean isSmapDumped(){  return smapDumped;}  }
class C{  public static CharArraySet makeStopSet(List<?> stopWords,boolean ignoreCase){  CharArraySet stopSet=new CharArraySet(stopWords.size(),ignoreCase);  stopSet.addAll(stopWords);  return stopSet;}  }
class C{  public JScrollBar createVerticalScrollBar(){  return new ScrollBar(JScrollBar.VERTICAL);}  }
class C{  public int acceptBacklog(){  return reader.getInteger(ACCEPT_BACKLOG,DEFAULT_ACCEPT_BACKLOG);}  }
class C{  public CarrierVehicleTypeLoader(Carriers carriers){  super();  this.carriers=carriers;}  }
class C{  private View findFocusableViewInBoundsY(boolean topFocus,int top,int bottom){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewTop=view.getTop();    int viewBottom=view.getBottom();    if (top < viewBottom && viewTop < bottom) {      final boolean viewIsFullyContained=(top < viewTop) && (viewBottom < bottom);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToBoundary=(topFocus && viewTop < focusCandidate.getTop()) || (!topFocus && viewBottom > focusCandidate.getBottom());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  @Inline @Override public final boolean wordTryCompareAndSwap(ObjectReference ref,Word old,Word target,Word offset,Word unused,int mode){  if (org.jikesrvm.VM.BuildForIA32) {    return Magic.attemptWord(ref.toObject(),offset.toOffset(),old,target);  } else {    do {      Word currentValue=Magic.prepareWord(ref,offset.toOffset());      if (currentValue.NE(old))       return false;    } while (!Magic.attemptWord(ref,offset.toOffset(),old,target));    return true;  }}  }
class C{  public String regOptimizerTipText(){  return "The learning algorithm.";}  }
class C{  public boolean addressTypeUnique(){  return true;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private static Number convertNumberToTargetClass(final Number number,final Class<?> targetClass) throws IllegalArgumentException {  Hasor.assertIsNotNull(number,"Number must not be null");  Hasor.assertIsNotNull(targetClass,"Target class must not be null");  if (targetClass.isInstance(number)) {    return number;  } else   if (targetClass.equals(Byte.class)) {    long value=number.longValue();    if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {      AbstractRowMapper.raiseOverflowException(number,targetClass);    }    return new Byte(number.byteValue());  } else   if (targetClass.equals(Short.class)) {    long value=number.longValue();    if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {      AbstractRowMapper.raiseOverflowException(number,targetClass);    }    return new Short(number.shortValue());  } else   if (targetClass.equals(Integer.class)) {    long value=number.longValue();    if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {      AbstractRowMapper.raiseOverflowException(number,targetClass);    }    return new Integer(number.intValue());  } else   if (targetClass.equals(Long.class))   return new Long(number.longValue()); else   if (targetClass.equals(BigInteger.class)) {    if (number instanceof BigDecimal) {      return ((BigDecimal)number).toBigInteger();    } else {      return BigInteger.valueOf(number.longValue());    }  } else   if (targetClass.equals(Float.class)) {    return new Float(number.floatValue());  } else   if (targetClass.equals(Double.class)) {    return new Double(number.doubleValue());  } else   if (targetClass.equals(BigDecimal.class)) {    return new BigDecimal(number.toString());  } else {    throw new IllegalArgumentException("Could not convert number [" + number + "] of type ["+ number.getClass().getName()+ "] to unknown target class ["+ targetClass.getName()+ "]");  }}  }
class C{  @Override public boolean removeFilter(EventFilter filter){  return this.filters.remove(filter);}  }
class C{  private String binaryNameToClassName(boolean isSignature,String name){  while (name.startsWith("[")) {    name=name.substring(1,name.length());    isSignature=true;  }  if (name.startsWith("L") && name.endsWith(";")) {    name=name.substring(1,name.length() - 1);  } else   if (isSignature) {    if (name.equals("B") || name.equals("C") || name.equals("D")|| name.equals("F")|| name.equals("I")|| name.equals("J")|| name.equals("S")|| name.equals("Z")|| name.equals("V")) {      return null;    } else {      throw new RuntimeException("Don't know how to handle binary type: " + name);    }  } else {  }  name=name.replace('/','.');  return name;}  }
class C{  public static boolean verify(String host,String username,String password,int port) throws SMTPException {  try {    return _verify(host,username,password,port);  } catch (  MessagingException e) {    if (!StringUtil.isEmpty(username)) {      try {        _verify(host,null,null,port);        throw new SMTPExceptionImpl("can't connect to mail server, authentication settings are invalid");      } catch (      MessagingException e1) {      }    }    if (port > 0 && port != 25) {      try {        _verify(host,null,null,25);        throw new SMTPExceptionImpl("can't connect to mail server, port definition is invalid");      } catch (      MessagingException e1) {      }    }    throw new SMTPExceptionImpl("can't connect to mail server");  }}  }
class C{  public synchronized MethodCountSet collectHotMethods(int optLevel,double threshold){  if (DEBUG)   validityCheck();  ArrayList<HotMethodRecompilationEvent> collect=new ArrayList<HotMethodRecompilationEvent>();  collectHotOptMethodsInternal(1,collect,hotnessToCounts(threshold),optLevel);  int numHotMethods=collect.size();  double[] numCounts=new double[numHotMethods];  CompiledMethod[] hotMethods=new CompiledMethod[numHotMethods];  for (int i=0; i < numHotMethods; i++) {    HotMethodEvent event=collect.get(i);    hotMethods[i]=event.getCompiledMethod();    numCounts[i]=event.getNumSamples();  }  return new MethodCountSet(hotMethods,numCounts);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static float interpolateCatmullRom(float u,float T,float p0,float p1,float p2,float p3){  double c1, c2, c3, c4;  c1=p1;  c2=-1.0 * T * p0 + T * p2;  c3=2 * T * p0 + (T - 3) * p1 + (3 - 2 * T) * p2 + -T * p3;  c4=-T * p0 + (2 - T) * p1 + (T - 2) * p2 + T * p3;  return (float)(((c4 * u + c3) * u + c2) * u + c1);}  }
class C{  public static String decodeString(String str){  try {    return URLDecoder.decode(str,"UTF-8");  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();    return str;  }}  }
class C{  @Nullable public IgniteUuid discardedMessageId(){  return discardMsgId;}  }
class C{  public EpsilonBoxDominanceArchive(double[] epsilon,Iterable<? extends Solution> iterable){  super(new EpsilonBoxDominanceComparator(epsilon),iterable);}  }
class C{  public String(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public T caseThisTypeRefStructural(ThisTypeRefStructural object){  return null;}  }
class C{  public String id(){  return id;}  }
class C{  private void heapifyUp(int twopos,int cur,Object val){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    int par=twoheap[parent];    if (cur <= par) {      break;    }    twoheap[twopos]=par;    twovals[twopos]=twovals[parent];    twopos=parent;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  private static void reportProgress(final IDatabaseLoadProgressReporter<LoadEvents> reporter,final LoadEvents event) throws LoadCancelledException {  if (!reporter.report(event)) {    throw new LoadCancelledException();  }}  }
class C{  public static String millisToString(long millis){  return Strings.millisToString(millis,false);}  }
class C{  public void updateNString(int columnIndex,String nString) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  @android.view.RemotableViewMethod public void smoothScrollByOffset(int offset){  super.smoothScrollByOffset(offset);}  }
class C{  public static void fill(double[] array,double value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  @Override public void handleMouseClicked(ChartCanvas canvas,MouseEvent e){}  }
class C{  public void write(String s,int off,int len){  if (text != null) {    text.append(s.substring(off,off + len));    if ((col+=len) > wrap)     println();  } else {    super.write(s,off,len);    flush();  }}  }
class C{  public boolean isDirectory(){  return false;}  }
class C{  public static int readVariableInt(byte[] buff,int pos){  int x=buff[pos++] & 0xff;  if (x < 0x80) {    return x;  }  if (x < 0xc0) {    return ((x & 0x3f) << 8) + (buff[pos] & 0xff);  }  if (x < 0xe0) {    return ((x & 0x1f) << 16) + ((buff[pos++] & 0xff) << 8) + (buff[pos] & 0xff);  }  if (x < 0xf0) {    return ((x & 0xf) << 24) + ((buff[pos++] & 0xff) << 16) + ((buff[pos++] & 0xff) << 8)+ (buff[pos] & 0xff);  }  return ((buff[pos++] & 0xff) << 24) + ((buff[pos++] & 0xff) << 16) + ((buff[pos++] & 0xff) << 8)+ (buff[pos] & 0xff);}  }
class C{  public static double distSquaredCartesian(double[] vec1,double[] vec2){  double result=0;  for (int i=0; i < vec1.length; i++) {    double v=vec1[i] - vec2[i];    result+=v * v;  }  return result;}  }
class C{  protected void onCreate(){  isCreated=true;}  }
class C{  public boolean containsKey(long key){  return contains(key);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.152 -0500",hash_original_method="FBE272FA12218448E57FDD0F51163D2E",hash_generated_method="A90714BC8F2D627F45F2D7B13B278A01") public final void scale(float sx,float sy,float px,float py){  translate(px,py);  scale(sx,sy);  translate(-px,-py);}  }
class C{  private void onThreadsFinished(){  finish();}  }
class C{  public static String replace(String text,String repl,String with,int max){  if ((text == null) || (repl == null) || (with == null)|| (repl.length() == 0)) {    return text;  }  StringBuilder buf=new StringBuilder(text.length());  int start=0, end=0;  while ((end=text.indexOf(repl,start)) != -1) {    buf.append(text.substring(start,end)).append(with);    start=end + repl.length();    if (--max == 0) {      break;    }  }  buf.append(text.substring(start));  return buf.toString();}  }
class C{  void destroy(){  if (sslEngine == null) {    return;  }  try {    sslEngine.closeInbound();  } catch (  SSLException e) {    LOGGER.debug("Unexpected exception from SSLEngine.closeInbound().",e);  }  if (outNetBuffer != null) {    outNetBuffer.capacity(sslEngine.getSession().getPacketBufferSize());  } else {    createOutNetBuffer(0);  }  try {    do {      outNetBuffer.clear();    } while (sslEngine.wrap(emptyBuffer.buf(),outNetBuffer.buf()).bytesProduced() > 0);  } catch (  SSLException e) {  } finally {    outNetBuffer.free();    outNetBuffer=null;  }  sslEngine.closeOutbound();  sslEngine=null;  preHandshakeEventQueue.clear();}  }
class C{  @Override boolean isNotTabu(Operation oOperation){  for (int iTabu=0; iTabu < m_nTabuList; iTabu++) {    if (oOperation.equals(m_oTabuList[iTabu])) {      return false;    }  }  return true;}  }
class C{  public Request send(Endpoint endpoint){  validateBeforeSending();  endpoint.sendRequest(this);  return this;}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  myMimeType=new MimeType((String)s.readObject());}  }
class C{  public static LatLong toLatLong(final Location location){  if (!isValidLocation(location)) {    throw new IllegalArgumentException("Invalid location");  }  return new LatLong(location.getLatitude(),location.getLongitude());}  }
class C{  private static String[] callCalculateSuffix(int value,int value2,int fullBlocks,int partialBlocks){  String body="{0} ";  VisualScoreTag visualScoreTag=new VisualScoreTag();  visualScoreTag.setFullBlocks(fullBlocks);  visualScoreTag.setPartialBlocks(partialBlocks);  visualScoreTag.setShowEmptyBlocks(true);  visualScoreTag.setShowA(true);  visualScoreTag.setShowB(true);  visualScoreTag.setValue(value);  visualScoreTag.setValue2(value2);  String buf=visualScoreTag.calculateSuffix(body);  return buf.split(" ");}  }
class C{  public String toString(){  return "Line " + getLine() + ": "+ getMessage();}  }
class C{  public final void delRange(int bagIndex,Instances source,int startIndex,int lastPlusOne) throws Exception {  double sumOfWeights=0;  int classIndex;  Instance instance;  int i;  for (i=startIndex; i < lastPlusOne; i++) {    instance=source.instance(i);    classIndex=(int)instance.classValue();    sumOfWeights=sumOfWeights + instance.weight();    m_perClassPerBag[bagIndex][classIndex]-=instance.weight();    m_perClass[classIndex]-=instance.weight();  }  m_perBag[bagIndex]-=sumOfWeights;  totaL-=sumOfWeights;}  }
class C{  protected POInfo initPO(Properties ctx){  PropertiesWrapper wrapper=(PropertiesWrapper)ctx;  p_ctx=wrapper.source;  tableName=wrapper.tableName;  tableID=MTable.getTable_ID(tableName);  POInfo poi=POInfo.getPOInfo(ctx,tableID,this.get_TrxName());  return poi;}  }
class C{  protected String paramsToString(){  if (params == null) {    return "";  } else   if (algParams != null) {    return algParams.toString();  } else {    return ", params unparsed";  }}  }
class C{  protected int skipSpaces(){  int lex=scanner.getType();  while (lex == LexicalUnits.SPACE) {    lex=next();  }  return lex;}  }
class C{  public static Funnel<Long> longFunnel(){  return LongFunnel.INSTANCE;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public JsonObject add(String name,JsonValue value){  if (name == null) {    throw new NullPointerException("name is null");  }  if (value == null) {    throw new NullPointerException("value is null");  }  table.add(name,names.size());  names.add(name);  values.add(value);  return this;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_JIT_INPUT_CUBIN:    return "CU_JIT_INPUT_CUBIN";case CU_JIT_INPUT_PTX:  return "CU_JIT_INPUT_PTX";case CU_JIT_INPUT_FATBINARY:return "CU_JIT_INPUT_FATBINARY";case CU_JIT_INPUT_OBJECT:return "CU_JIT_INPUT_OBJECT";case CU_JIT_INPUT_LIBRARY:return "CU_JIT_INPUT_LIBRARY";}return "INVALID CUjitInputType: " + n;}  }
class C{  public final boolean execute() throws SQLException {  return m_ps.execute();}  }
class C{  public void testDynFloatSortMissingLast() throws Exception {  checkSortMissingLast("dyn_floatdv_missinglast","-1.3","4.2");}  }
class C{  @SuppressWarnings("unchecked") private static <T>T newInstance(String clsName,@Nullable ClassLoader ldr,Object proxy){  try {    Class delegateCls=ldr == null ? Class.forName(clsName) : Class.forName(clsName,true,ldr);    Constructor[] ctors=delegateCls.getConstructors();    assert ctors.length == 1;    Object res=ctors[0].newInstance(proxy);    return (T)res;  } catch (  ReflectiveOperationException e) {    throw new IgniteException("Failed to instantiate delegate for proxy [proxy=" + proxy + ", delegateClsName="+ clsName+ ']',e);  }}  }
class C{  public static int overload0(){  return 0;}  }
class C{  private void assertStateChange(TestProbe theTestProbe,Probe.State correctState,String... correctMessages){  try {    if (correctMessages == null) {      correctMessages=new String[]{null};    }    for (    String correctMessage : correctMessages) {      String message=testProbe.messageQueue.poll(100,TimeUnit.MILLISECONDS);      if (correctMessage == null) {        assertNull(message);      } else {        assertNotNull(message);        assertEquals(correctMessage,message);      }    }    assertEquals(correctState,testProbe.getState());  } catch (  InterruptedException e) {    fail();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private <T>Provider<T> lookupProvider(InjectionPoint<T> ip){  Key<T> key=ip.key();  BindingInject<T> bean=findBean(key);  if (bean != null) {    return bean.provider(ip);  }  BindingAmp<T> provider=findBinding(key);  if (provider != null) {    return provider.provider(ip);  }  provider=findObjectBinding(key);  if (provider != null) {    return provider.provider(ip);  }  return null;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("CollectionCertStoreParameters: [\ncollection: ");  sb.append(getCollection().toString());  sb.append("\n]");  return sb.toString();}  }
class C{  protected boolean isForbiddenAttribute(TagNode tagNode,String attName,String value){  return !props.isNamespacesAware() && (XMLNS_NAMESPACE.equals(attName) || attName.startsWith(XMLNS_NAMESPACE + ":"));}  }
class C{  public void log(final String message){  if (Platform.isFxApplicationThread()) {    append(message);  } else {    try {      Platform.runLater(null);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  private void createAttachMenuBar(){  JMenuBar bar=new JMenuBar();  JMenu fileMenu=new JMenu("File");  for (  Action action : actionManager.getOpenSavePlotActions()) {    fileMenu.add(action);  }  fileMenu.addSeparator();  fileMenu.add(new CloseAction(this.getWorkspaceComponent()));  JMenu editMenu=new JMenu("Edit");  JMenuItem preferences=new JMenuItem("Preferences...");  preferences.addActionListener(this);  preferences.setActionCommand("dialog");  editMenu.add(preferences);  JMenu helpMenu=new JMenu("Help");  ShowHelpAction helpAction=new ShowHelpAction("Pages/Plot/pie_chart.html");  JMenuItem helpItem=new JMenuItem(helpAction);  helpMenu.add(helpItem);  bar.add(fileMenu);  bar.add(editMenu);  bar.add(helpMenu);  getParentFrame().setJMenuBar(bar);}  }
class C{  @JsonIgnore public boolean isFor(EventDefinition eventDefinition){  return this.name.equals(eventDefinition.getName()) && this.type.equals(eventDefinition.getType());}  }
class C{  public static String readFile(Path parentDir,String name) throws IOException {  if (parentDir == null) {    return null;  }  Path path=parentDir.resolve(name);  try (InputStream in=Files.newInputStream(path)){    return new String(ByteStreams.toByteArray(in),ENC);  } catch (  NoSuchFileException e) {    return null;  }catch (  IOException e) {    throw new IOException("Error reading " + path,e);  }}  }
class C{  public int executeNativeQuery(String sql){  this.bot.log(this,"SQL",Bot.FINE,sql);  int rowCount=0;synchronized (this.bot.memory()) {    try {      this.entityManager.getTransaction().begin();      rowCount=this.entityManager.createNativeQuery(sql).executeUpdate();      this.entityManager.getTransaction().commit();      resetSize();    } catch (    RuntimeException failed) {      this.bot.log(this,failed);      if (this.entityManager.getTransaction().isActive()) {        this.entityManager.getTransaction().rollback();      }      clear();      throw failed;    }  }  ((DatabaseNetwork)this.bot.memory().getLongTermMemory()).resetSize();  return rowCount;}  }
class C{  public void addHeader(String name,String value){  headers=ReqRspUtil.add(headers,name,value);}  }
class C{  public static GeoTimeSerie slowmerge(GeoTimeSerie base,GeoTimeSerie gts,boolean overwrite){  GeoTimeSerie.TYPE baseType=base.getType();  GeoTimeSerie.TYPE gtsType=gts.getType();  if (TYPE.UNDEFINED.equals(baseType) || baseType.equals(gtsType)) {    for (int i=0; i < gts.values; i++) {      GTSHelper.setValue(base,gts.ticks[i],null != gts.locations ? gts.locations[i] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[i] : GeoTimeSerie.NO_ELEVATION,valueAtIndex(gts,i),overwrite);    }  }  return base;}  }
class C{  public void checkJvmClassesVerboseLevel(EnumJvmClassesVerboseLevel x) throws SnmpStatusException {  if (JvmClassesVerboseLevelVerbose.equals(x))   return;  if (JvmClassesVerboseLevelSilent.equals(x))   return;  throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);}  }
class C{  public static void removeLastChild(Element tag){  final Node last=tag.getLastChild();  if (last != null) {    tag.removeChild(last);  }}  }
class C{  public boolean favoriteMessage(String message,boolean favorite){  SQLiteDatabase db=getWritableDatabase();  if (db != null && message != null) {    db.execSQL("UPDATE " + TABLE + " SET "+ COL_FAVIRITE+ "="+ (favorite ? TRUE : FALSE)+ " WHERE "+ COL_DELETED+ " ="+ FALSE+ " AND "+ COL_MESSAGE+ " ='"+ Utils.makeTextSafeForSQL(message)+ "';");    return true;  }  return false;}  }
class C{  public static LocalAttribute localAttribute(String name,String customGet,String customSet){  return new LocalAttribute(name,customGet,customSet);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  public String subst(String substituteIn,String substitution){  return subst(substituteIn,substitution,REPLACE_ALL);}  }
class C{  public void testWildcardsDoesNotNeedTwoDots() throws Exception {  String cert="-----BEGIN CERTIFICATE-----\n" + "MIIBjDCCATagAwIBAgIJAOVulXCSu6HuMA0GCSqGSIb3DQEBBQUAMBAxDjAMBgNV\n" + "BAMUBSouY29tMCAXDTEwMTIyMDE2NDkzOFoYDzIxMTAxMTI2MTY0OTM4WjAQMQ4w\n"+ "DAYDVQQDFAUqLmNvbTBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQDJd8xqni+h7Iaz\n"+ "ypItivs9kPuiJUqVz+SuJ1C05SFc3PmlRCvwSIfhyD67fHcbMdl+A/LrIjhhKZJe\n"+ "1joO0+pFAgMBAAGjcTBvMB0GA1UdDgQWBBS4Iuzf5w8JdCp+EtBfdFNudf6+YzBA\n"+ "BgNVHSMEOTA3gBS4Iuzf5w8JdCp+EtBfdFNudf6+Y6EUpBIwEDEOMAwGA1UEAxQF\n"+ "Ki5jb22CCQDlbpVwkruh7jAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA0EA\n"+ "U6LFxmZr31lFyis2/T68PpjAppc0DpNQuA2m/Y7oTHBDi55Fw6HVHCw3lucuWZ5d\n"+ "qUYo4ES548JdpQtcLrW2sA==\n"+ "-----END CERTIFICATE-----";  CertificateFactory cf=CertificateFactory.getInstance("X.509");  InputStream in=new ByteArrayInputStream(cert.getBytes("UTF-8"));  X509Certificate x509=(X509Certificate)cf.generateCertificate(in);  mySSLSession session=new mySSLSession(new X509Certificate[]{x509});  HostnameVerifier verifier=HttpsURLConnection.getDefaultHostnameVerifier();  assertTrue(verifier.verify("google.com",session));}  }
class C{  private void collectUnicodeVersions() throws IOException {  SortedMap<String,SortedMap<Integer,String>> allUnicodeVersions=new TreeMap<String,SortedMap<Integer,String>>();  URL unicodeURL=new URL(UNICODE_DOT_ORG_URL);  Matcher matcher=UNICODE_VERSION_LINK_PATTERN.matcher(getPageContent(unicodeURL));  while (matcher.find()) {    String relativeURL=matcher.group(1);    String baseVersion=matcher.group(2);    String update=matcher.group(3);    int updateNumber=-1;    if (null != update) {      updateNumber=0;      if (null != matcher.group(4) && matcher.group(4).length() > 0) {        updateNumber=Integer.parseInt(matcher.group(4));      }    }    SortedMap<Integer,String> updates=allUnicodeVersions.get(baseVersion);    if (null == updates) {      updates=new TreeMap<Integer,String>(Collections.reverseOrder());      allUnicodeVersions.put(baseVersion,updates);    }    updates.put(updateNumber,relativeURL);  }  for (  String version : allUnicodeVersions.keySet()) {    populateUnicodeVersion(version,allUnicodeVersions.get(version));  }}  }
class C{  public void fireTableChanged(TableModelEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableModelListener.class) {      ((TableModelListener)listeners[i + 1]).tableChanged(e);    }  }}  }
class C{  public boolean deleteMapping(ExtensionMapping mapping){  if (mapping != null && mappings.contains(mapping)) {    String coreRowType=getCoreRowType();    if (coreRowType != null && coreRowType.equalsIgnoreCase(mapping.getExtension().getRowType())) {      List<ExtensionMapping> coreMappings=getMappings(coreRowType);      if (coreMappings.size() > 1) {        if (mappings.indexOf(mapping) == 0) {          ExtensionMapping next=coreMappings.get(1);          int nextIndex=mappings.indexOf(next);          log.debug("Swapping first core mapping with next core mapping with index#" + String.valueOf(nextIndex));          Collections.swap(mappings,0,nextIndex);        }        log.debug("Deleting core mapping...");        return mappings.remove(mapping);      } else {        log.debug("Deleting only core mapping and thus clearing all mappings...");        mappings.clear();        return true;      }    } else {      log.debug("Deleting non-core mapping...");      return mappings.remove(mapping);    }  }  log.debug("Mapping was null, or resource no longer has this mapping, thus it could not be deleted!");  return false;}  }
class C{  private String computeJavadocIndent(IDocument document,int line,JavaHeuristicScanner scanner,ITypedRegion partition) throws BadLocationException {  if (line == 0)   return null;  final IRegion lineInfo=document.getLineInformation(line);  final int lineStart=lineInfo.getOffset();  final int lineLength=lineInfo.getLength();  final int lineEnd=lineStart + lineLength;  int nonWS=scanner.findNonWhitespaceForwardInAnyPartition(lineStart,lineEnd);  if (nonWS == JavaHeuristicScanner.NOT_FOUND || document.getChar(nonWS) != '*') {    if (nonWS == JavaHeuristicScanner.NOT_FOUND)     return document.get(lineStart,lineLength);    return document.get(lineStart,nonWS - lineStart);  }  IRegion previousLine=document.getLineInformation(line - 1);  int previousLineStart=previousLine.getOffset();  int previousLineLength=previousLine.getLength();  int previousLineEnd=previousLineStart + previousLineLength;  StringBuffer buf=new StringBuffer();  int previousLineNonWS=scanner.findNonWhitespaceForwardInAnyPartition(previousLineStart,previousLineEnd);  if (previousLineNonWS == JavaHeuristicScanner.NOT_FOUND || document.getChar(previousLineNonWS) != '*') {    previousLine=document.getLineInformationOfOffset(partition.getOffset());    previousLineStart=previousLine.getOffset();    previousLineLength=previousLine.getLength();    previousLineEnd=previousLineStart + previousLineLength;    previousLineNonWS=scanner.findNonWhitespaceForwardInAnyPartition(previousLineStart,previousLineEnd);    if (previousLineNonWS == JavaHeuristicScanner.NOT_FOUND)     previousLineNonWS=previousLineEnd;    buf.append(' ');  }  String indentation=document.get(previousLineStart,previousLineNonWS - previousLineStart);  buf.insert(0,indentation);  return buf.toString();}  }
class C{  public CStatusLabelSynchronizer(final JLabel label,final BackEndDebuggerProvider debuggerProvider){  m_label=Preconditions.checkNotNull(label,"IE01095: Label argument can not be null");  m_debuggerProvider=Preconditions.checkNotNull(debuggerProvider,"IE01096: Debugger provider argument can not be null");  m_processListener=new CProcessListener(label);  m_debugEventListener=new CDebugEventListener(label);  for (  final IDebugger debugger : debuggerProvider) {    addListeners(debugger);  }  debuggerProvider.addListener(m_debuggerProviderListener);}  }
class C{  private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){  if (array != null) {    final int arrayLength=Array.getLength(array);    final Object newArray=Array.newInstance(array.getClass().getComponentType(),arrayLength + 1);    System.arraycopy(array,0,newArray,0,arrayLength);    return newArray;  }  return Array.newInstance(newArrayComponentType,1);}  }
class C{  public Vector4d fma(double a,Vector4dc b){  x+=a * b.x();  y+=a * b.y();  z+=a * b.z();  w+=a * b.w();  return this;}  }
class C{  public static String strip(String str){  return megastrip(str,true,true,WHITE_SPACES);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    return new Float(uiComp.getWidthf() / uiComp.getReality().getWidth());  }  return null;}  }
class C{  public ChartChangeEvent(Object source,JFreeChart chart){  this(source,chart,ChartChangeEventType.GENERAL);}  }
class C{  public Boolean updateStoragePortOperationalStatus(){  _logger.info("Updating operationalStatus for the StoragePort initiated");  boolean updateStatus=false;  StoragePort storagePort=getStoargePortFromDBBasedOnPortName();  OperationalStatus operationalStatus=StoragePortProcessor.getPortOperationalStatus(getOperationalStatusCodesArray());  newOperationalStatus=operationalStatus.name();  storagePort.setOperationalStatus(newOperationalStatus);  _dbClient.persistObject(storagePort);  updateStatus=true;  _logger.info("Updating operationalStatus for the StoragePort completed status:{}",updateStatus);  return updateStatus;}  }
class C{  private Builder(){  super(org.apache.nutch.storage.WebPage.SCHEMA$);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void clear(float r,float g,float b,float a,double depth){  if (this.depthBufferFBO != null) {    this.depthBufferFBO.bindFramebuffer(false);    GL11.glClearColor(r,g,b,a);    GL11.glClearDepth(depth);    GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);  }}  }
class C{  public void addLast(StatementSequence statements){  if (statements != null) {    sequence.addAll(statements.sequence);  }}  }
class C{  public X509CRLImpl(InputStream in) throws CRLException {  try {    this.crl=(CertificateList)CertificateList.ASN1.decode(in);    this.tbsCertList=crl.getTbsCertList();    this.extensions=tbsCertList.getCrlExtensions();  } catch (  IOException e) {    throw new CRLException(e);  }}  }
class C{  public PrincipalId addPersonUser(String tenantName,String userName,PersonDetail detail,char[] password) throws Exception {  return getService().addUser(tenantName,userName,detail,password,this.getServiceContext());}  }
class C{  public String cTipText(){  return "The complexity parameter C.";}  }
class C{  @Override public void run(){  try {    doRun();  } catch (  SocketTerminationException e) {    logger.info("Server stopped by close on socket");  }catch (  InterruptedException e) {    logger.info("Server stopped by interrupt on thread");  }catch (  Throwable t) {    throwable=t;    logger.info("Echo server failed: " + throwable.getMessage(),t);  } finally {    pool.shutdown();    socketService.close();  }}  }
class C{  @SuppressWarnings("MethodOverridesStaticMethodOfSuperclass") @Nullable public static URL convertToURL(@NotNull String vfsUrl){  return VfsUtilCore.convertToURL(vfsUrl);}  }
class C{  public static String parseCharset(Map<String,String> headers){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return HTTP.DEFAULT_CONTENT_CHARSET;}  }
class C{  private void forwardSingleChatMessage2UI(Intent messageIntent,ChatMessageDAO message){  ContactId contact=message.getContact();  String content=message.getContent();  Intent intent=OneToOneTalkView.forgeIntentOnStackEvent(this,contact,messageIntent);  Integer uniqueId=mChatPendingIntentManager.tryContinueChatConversation(intent,message.getChatId());  if (uniqueId != null) {    PendingIntent contentIntent=PendingIntent.getActivity(this,uniqueId,intent,PendingIntent.FLAG_UPDATE_CURRENT);    String displayName=RcsContactUtil.getInstance(this).getDisplayName(contact);    String title=getString(R.string.title_recv_chat,displayName);    String mimeType=message.getMimeType();    String msg;switch (mimeType) {case ChatLog.Message.MimeType.GEOLOC_MESSAGE:      msg=getString(R.string.label_geoloc_msg);    break;case ChatLog.Message.MimeType.TEXT_MESSAGE:  msg=content;break;default :if (LogUtils.isActive) {Log.e(LOGTAG,"Discard message type '".concat(mimeType));}return;}Notification notif=buildNotification(contentIntent,title,msg);mChatPendingIntentManager.postNotification(uniqueId,notif);TalkList.notifyNewConversationEvent(this,OneToOneChatIntent.ACTION_NEW_ONE_TO_ONE_CHAT_MESSAGE);}}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.METHOD_BODY___ANONYMOUS_METHOD_BODY_11:    getAnonymous_methodBody_1_1().clear();  getAnonymous_methodBody_1_1().addAll((Collection<? extends Anonymous_methodBody_1_>)newValue);return;case UmplePackage.METHOD_BODY___CODE_1:setCode_1((String)newValue);return;case UmplePackage.METHOD_BODY___ANONYMOUS_METHOD_BODY_21:getAnonymous_methodBody_2_1().clear();getAnonymous_methodBody_2_1().addAll((Collection<? extends Anonymous_methodBody_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void rollback() throws MailboxException {  try {    getSession().refresh(false);  } catch (  RepositoryException e) {  }}  }
class C{  public void init(RemoteAuthenticatedUser user,ModeledConnection connection){  init(user,null,connection);}  }
class C{  public com.netflix.turbine.discovery.Instance convert(final Instance ec2){  final String addr=this.address(ec2);  final boolean state=InstanceStateName.fromValue(ec2.getState().getName()) == InstanceStateName.Running;  return new com.netflix.turbine.discovery.Instance(addr,this.cluster,state);}  }
class C{  @Override public void onPause(){  super.onPause();  mWebView.onPause();}  }
class C{  public GPIndividual lightClone(){  GPIndividual myobj=(GPIndividual)(super.clone());  myobj.trees=new GPTree[trees.length];  for (int x=0; x < trees.length; x++) {    myobj.trees[x]=(GPTree)(trees[x].lightClone());    myobj.trees[x].owner=myobj;  }  return myobj;}  }
class C{  public void start(){  mVibrator=(Vibrator)mContext.getSystemService(Service.VIBRATOR_SERVICE);  mIsGloballyEnabled=checkGlobalSetting(mContext);  Uri uri=Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED);  mContext.getContentResolver().registerContentObserver(uri,false,mContentObserver);}  }
class C{  public static Function max(Object column){  return new Function(format("max(%s)",column));}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  private IType[] computeInheritancePath(IType subType,IType superType) throws JavaModelException {  if (superType == null)   return null;  if (superType.equals(subType))   return new IType[]{subType};  ITypeHierarchy hierarchy=subType.newSupertypeHierarchy(getProgressMonitor());  if (!hierarchy.contains(superType))   return null;  List<IType> path=new LinkedList<IType>();  path.add(superType);  do {    superType=hierarchy.getSubtypes(superType)[0];    path.add(superType);  } while (!superType.equals(subType));  return path.toArray(new IType[path.size()]);}  }
class C{  protected void validateMessageParams(java.lang.String[] param){}  }
class C{  public EndOfFilePacket(Buffer buffer){  buffer.skipByte();  warningCount=buffer.readShort();  statusFlags=buffer.readShort();}  }
class C{  public String stripContentExtras(String contentType){  int index=contentType.indexOf(';');  return (index >= 0) ? contentType.substring(0,index) : contentType;}  }
class C{  public SortedGraphNode buildRevTopSort(){  if (!backwardTopSorted) {    return TopSort.buildTopological(this,false);  } else {    return null;  }}  }
class C{  @Override public void emitTuple(K key,ArrayList<SimpleMovingAverageObject> obj){  double sum=0;  int count=0;  for (int i=0; i < windowSize; i++) {    SimpleMovingAverageObject d=obj.get(i);    sum+=d.getSum();    count+=d.getCount();  }  if (count == 0) {    return;  }  if (doubleSMA.isConnected()) {    doubleSMA.emit(new KeyValPair<K,Double>(key,(sum / count)));  }  if (floatSMA.isConnected()) {    floatSMA.emit(new KeyValPair<K,Float>(key,(float)(sum / count)));  }  if (longSMA.isConnected()) {    longSMA.emit(new KeyValPair<K,Long>(key,(long)(sum / count)));  }  if (integerSMA.isConnected()) {    integerSMA.emit(new KeyValPair<K,Integer>(key,(int)(sum / count)));  }}  }
class C{  public final V updateAndGet(UnaryOperator<V> updateFunction){  V prev, next;  do {    prev=get();    next=updateFunction.apply(prev);  } while (!compareAndSet(prev,next));  return next;}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public static BigDecimal roundOff(final BigDecimal amount){  return amount.setScale(DECIMALS,ROUNDING_MODE);}  }
class C{  public String objectToString(T object){  StringBuilder sb=new StringBuilder(64);  sb.append(object.getClass().getSimpleName());  for (  FieldType fieldType : fieldTypes) {    sb.append(' ').append(fieldType.getColumnName()).append("=");    try {      sb.append(fieldType.extractJavaFieldValue(object));    } catch (    Exception e) {      throw new IllegalStateException("Could not generate toString of field " + fieldType,e);    }  }  return sb.toString();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static RefactoringStatus createFatalErrorStatus(String msg){  return createStatus(FATAL,msg,null,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  public SuperClassComponent(N4JSClassWizardModel model,WizardComponentContainer container){  super(container);  this.model=model;  Label superClassLabel=new Label(container.getComposite(),SWT.NONE);  superClassLabel.setText("Super class:");  text=new Text(container.getComposite(),SWT.BORDER);  text.setLayoutData(fillTextDefaults());  browseButton=new Button(container.getComposite(),SWT.NONE);  browseButton.setToolTipText("Opens a dialog to choose the super class");  browseButton.setText("Browse...");  setupBindings();  setupDialog();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static int toInt(byte b){  int value=b & 0x7F;  if ((b & 0x80) != 0) {    value|=0x80;  }  return value;}  }
class C{  protected void writeChangeRecord() throws IOException {  boolean hasMoveTo=(moveXY != null);  boolean hasFillStyle0=fill0Index >= 0;  boolean hasFillStyle1=fill1Index >= 0;  boolean hasLineStyle=lineIndex >= 0;  if (hasFillStyle0 || hasFillStyle1 || hasLineStyle|| hasMoveTo) {    this.out.writeUBits(1,0);    this.out.writeUBits(1,0);    this.out.writeUBits(1,hasLineStyle ? 1 : 0);    this.out.writeUBits(1,hasFillStyle1 ? 1 : 0);    this.out.writeUBits(1,hasFillStyle0 ? 1 : 0);    this.out.writeUBits(1,hasMoveTo ? 1 : 0);    if (hasMoveTo) {      int moveX=moveXY[0];      int moveY=moveXY[1];      int moveBits=OutStream.determineSignedBitSize(moveX);      int moveYBits=OutStream.determineSignedBitSize(moveY);      if (moveYBits > moveBits) {        moveBits=moveYBits;      }      this.out.writeUBits(5,moveBits);      this.out.writeSBits(moveBits,moveX);      this.out.writeSBits(moveBits,moveY);    }    if (hasFillStyle0) {      this.out.writeUBits(fillBitSize,fill0Index);    }    if (hasFillStyle1) {      this.out.writeUBits(fillBitSize,fill1Index);    }    if (hasLineStyle) {      this.out.writeUBits(lineBitSize,lineIndex);    }    moveXY=null;    fill0Index=-1;    fill1Index=-1;    lineIndex=-1;  }}  }
class C{  public void paintSplitPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public AuthenticationException(){  super();}  }
class C{  FunctionalDecoratingService(Service<? super I,? extends O> delegate,DecoratingServiceFunction<? super I,? extends O> function){  super(delegate);  this.function=requireNonNull(function,"function");}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void loop(AuroraListener listener,final List<HostAddress> addresses,SearchFilter searchFilter) throws QueryException {  AuroraProtocol protocol;  ArrayDeque<HostAddress> loopAddresses=new ArrayDeque<>((!addresses.isEmpty()) ? addresses : listener.getBlacklistKeys());  if (loopAddresses.isEmpty()) {    loopAddresses.addAll(listener.getUrlParser().getHostAddresses());  }  int maxConnectionTry=listener.getRetriesAllDown();  QueryException lastQueryException=null;  HostAddress probableMasterHost=null;  while (!loopAddresses.isEmpty() || (!searchFilter.isFailoverLoop() && maxConnectionTry > 0)) {    protocol=getNewProtocol(listener.getProxy(),listener.getUrlParser());    if (listener.isExplicitClosed() || (!listener.isSecondaryHostFailReconnect() && !listener.isMasterHostFailReconnect())) {      return;    }    maxConnectionTry--;    try {      HostAddress host=loopAddresses.pollFirst();      if (host == null) {        for (        HostAddress hostAddress : listener.getUrlParser().getHostAddresses()) {          if (!hostAddress.equals(listener.getClusterHostAddress())) {            loopAddresses.add(hostAddress);          }        }        if (listener.getClusterHostAddress() != null && listener.getUrlParser().getHostAddresses().size() < 2) {          loopAddresses.add(listener.getClusterHostAddress());        }        host=loopAddresses.pollFirst();      }      protocol.setHostAddress(host);      protocol.connect();      if (listener.isExplicitClosed()) {        protocol.close();        return;      }      listener.removeFromBlacklist(protocol.getHostAddress());      if (listener.isMasterHostFailReconnect() && protocol.isMasterConnection()) {        if (searchFilter.isFineIfFoundOnlyMaster() && listener.getUrlParser().getHostAddresses().size() <= 1 && protocol.getHostAddress().equals(listener.getClusterHostAddress())) {          listener.retrieveAllEndpointsAndSet(protocol);          if (listener.getUrlParser().getHostAddresses().size() > 1) {            loopAddresses.addAll(listener.getUrlParser().getHostAddresses());            searchFilter=new SearchFilter(false);          }        }        if (foundMaster(listener,protocol,searchFilter)) {          return;        }      } else       if (!protocol.isMasterConnection()) {        if (listener.isSecondaryHostFailReconnect()) {          if (foundSecondary(listener,protocol,searchFilter)) {            return;          }        }        if (listener.isSecondaryHostFailReconnect() || (listener.isMasterHostFailReconnect() && probableMasterHost == null)) {          probableMasterHost=listener.searchByStartName(protocol,listener.getUrlParser().getHostAddresses());          if (probableMasterHost != null) {            loopAddresses.remove(probableMasterHost);            AuroraProtocol.searchProbableMaster(listener,probableMasterHost);            if (listener.isMasterHostFailReconnect() && searchFilter.isFineIfFoundOnlySlave()) {              return;            }          }        }      } else {        protocol.close();      }    } catch (    QueryException e) {      lastQueryException=e;      listener.addToBlacklist(protocol.getHostAddress());    }    if (!listener.isMasterHostFailReconnect() && !listener.isSecondaryHostFailReconnect()) {      return;    }    if (loopAddresses.isEmpty() && !searchFilter.isFailoverLoop() && maxConnectionTry > 0) {      loopAddresses=new ArrayDeque<>(listener.getBlacklistKeys());    }    if (maxConnectionTry == 0 && !loopAddresses.contains(listener.getClusterHostAddress()) && listener.getClusterHostAddress() != null) {      loopAddresses.add(listener.getClusterHostAddress());    }  }  if (listener.isMasterHostFailReconnect() || listener.isSecondaryHostFailReconnect()) {    String error="No active connection found for replica";    if (listener.isMasterHostFailReconnect()) {      error="No active connection found for master";    }    if (lastQueryException != null) {      throw new QueryException(error,lastQueryException.getErrorCode(),lastQueryException.getSqlState(),lastQueryException);    }    throw new QueryException(error);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getCategory();}  }
class C{  public InputStream openClassfile(String classname){  if (this.classname.equals(classname))   return new ByteArrayInputStream(classfile); else   return null;}  }
class C{  @Override public int findColumn(String columnLabel) throws SQLException {  if (columnLabel != null && columns != null) {    for (int i=0, size=columns.size(); i < size; i++) {      if (columnLabel.equalsIgnoreCase(getColumn(i).name)) {        return i + 1;      }    }  }  throw DbException.get(ErrorCode.COLUMN_NOT_FOUND_1,columnLabel).getSQLException();}  }
class C{  private ArchitecturalWord loadArchitecturalWord(){  return SimulatedMemory.getWord(this);}  }
class C{  protected Boolean send() throws PropagationException {  Participant part=getParticipant();  try {    part.rollback();  } catch (  HeurCommitException heurc) {    throw new PropagationException(heurc,false);  }catch (  HeurMixedException heurm) {    throw new PropagationException(heurm,false);  }catch (  Exception e) {    if (indoubt_) {      HeurHazardException heurh=new HeurHazardException();      throw new PropagationException(heurh,true);    }  }  return null;}  }
class C{  public Builder cacheOnDisk(boolean cacheOnDisk){  this.cacheOnDisk=cacheOnDisk;  return this;}  }
class C{  public T[] toArray(T[] tArray){  List<T> array=new ArrayList<T>(100);  for (Iterator<T> it=iterator(); it.hasNext(); ) {    T val=it.next();    if (val != null)     array.add(val);  }  return array.toArray(tArray);}  }
class C{  private static String classNameOf(TypeElement type){  String name=type.getQualifiedName().toString();  String pkgName=packageNameOf(type);  return pkgName.isEmpty() ? name : name.substring(pkgName.length() + 1);}  }
class C{  private void truncateToBox(int[] t,int x1,int y1,int x2,int y2){  if (t[0] > t[2]) {    if (t[0] > x2 && t[2] < x1)     t[0]=t[2]=-1; else {      if (t[0] > x2 || t[0] < x1)       t[0]=x1;      if (t[2] > x2 || t[2] < x1)       t[2]=x1;    }  } else {    if (t[0] < x1)     t[0]=x1;    if (t[0] > x2)     t[0]=x2;    if (t[2] < x1)     t[2]=x1;    if (t[2] > x2)     t[2]=x2;  }  if (t[1] < y1)   t[1]=y1;  if (t[1] > y2)   t[1]=y2;  if (t[3] < y1)   t[3]=y1;  if (t[3] > y2)   t[3]=y2;  if (t[2] - t[0] == 0 || t[3] - t[1] == 0) {    t[0]=-1;    t[1]=-1;    t[2]=-1;    t[3]=-1;  }}  }
class C{  public <T>T unwrap(final Class<T> iface) throws SQLException {  return null;}  }
class C{  public AnimatableNumberOrPercentageValue(AnimationTarget target,float n,boolean isPercentage){  super(target,n);  this.isPercentage=isPercentage;}  }
class C{  public synchronized void remove(int index){  mCategories.remove(index);  mValues.remove(index);}  }
class C{  public void clear(){  elements.clear();}  }
class C{  private static int indexOf(CharSequence source,CharSequence target,int fromIndex){  int sourceOffset=0, sourceCount=source.length(), targetOffset=0, targetCount=target.length();  if (fromIndex >= sourceCount) {    return (targetCount == 0 ? sourceCount : -1);  }  if (fromIndex < 0) {    fromIndex=0;  }  if (targetCount == 0) {    return fromIndex;  }  char first=target.charAt(targetOffset);  int max=sourceOffset + (sourceCount - targetCount);  for (int i=sourceOffset + fromIndex; i <= max; i++) {    if (source.charAt(i) != first) {      while (++i <= max && source.charAt(i) != first)       ;    }    if (i <= max) {      int j=i + 1;      int end=j + targetCount - 1;      for (int k=targetOffset + 1; j < end && source.charAt(j) == target.charAt(k); j++, k++)       ;      if (j == end) {        return i - sourceOffset;      }    }  }  return -1;}  }
class C{  public void removeListener(TrackingListener listener){  listeners.remove(listener);}  }
class C{  public String toString(){  return getPropertyName() + ": " + getValue().toString();}  }
class C{  public <V>Callable<V> wrap(Callable<V> callable,String description){  TraceScope parentScope=threadLocalScope.get();  if (parentScope == null) {    return callable;  }  return new TraceCallable<V>(this,parentScope.getSpanId(),callable,description);}  }
class C{  protected Command dropFilter(DatapathId sw,OFPacketIn pi,FloodlightContext cntx){  Command result=Command.CONTINUE;  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  if (isAllowed(sw,inPort) == false) {    if (log.isTraceEnabled()) {      log.trace("Ignoring packet because of topology " + "restriction on switch={}, port={}",sw.getLong(),inPort.getPortNumber());      result=Command.STOP;    }  }  return result;}  }
class C{  public Set<String> mappedCells(){  return mappedCells;}  }
class C{  public void write16bit(int value){  output.write((value >>> 8) & 0xff);  output.write(value & 0xff);}  }
class C{  public static String cleanTabs(String yaml){  if (yaml.contains("\t")) {    LOGGER.warn("Yaml contains a tab characters, automatically converting to {} spaces " + "(if they occur at the beginning of a sentence). This may cause parsing" + " errors, please reformat the Yaml to use spaces only.",TAB_AS_SPACES.length());    List<String> lines=NEWLINE_SPLITTER.splitToList(yaml);    StringBuilder sb=new StringBuilder();    for (    String line : lines) {      String cleanLine=replaceStartingTabsWithSpaces(line);      sb.append(cleanLine);      sb.append("\n");    }    return sb.toString();  } else {    return yaml;  }}  }
class C{  public void append(String value){  text.append(value);}  }
class C{  public Discretizer(DataSet dataSet){  this.sourceDataSet=dataSet;  specs=new HashMap<>();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_ENUM_LITERAL__NAME:    setName((String)newValue);  return;case N4JSPackage.N4_ENUM_LITERAL__VALUE:setValue((String)newValue);return;case N4JSPackage.N4_ENUM_LITERAL__DEFINED_LITERAL:setDefinedLiteral((TEnumLiteral)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Set<String> validateEmailRecipients(String emailRecipients){  Set<String> emailRecipientsSet=new HashSet<>();  if (emailRecipients != null) {    String[] split=emailRecipients.split(",");    for (    String emailAddress : split) {      emailAddress=emailAddress.trim();      if (this.isValidEmail(emailAddress)) {        emailRecipientsSet.add(emailAddress);      }    }  }  return emailRecipientsSet;}  }
class C{  public ConfigurationSource createConfigurationSource(){  ConfigurationSourceImpl configurationSource=new ConfigurationSourceImpl();  return configurationSource;}  }
class C{  public static SecretKeys generateKeyFromPassword(String password,byte[] salt) throws GeneralSecurityException {  fixPrng();  KeySpec keySpec=new PBEKeySpec(password.toCharArray(),salt,PBE_ITERATION_COUNT,AES_KEY_LENGTH_BITS + HMAC_KEY_LENGTH_BITS);  SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(PBE_ALGORITHM);  byte[] keyBytes=keyFactory.generateSecret(keySpec).getEncoded();  byte[] confidentialityKeyBytes=copyOfRange(keyBytes,0,AES_KEY_LENGTH_BITS / 8);  byte[] integrityKeyBytes=copyOfRange(keyBytes,AES_KEY_LENGTH_BITS / 8,AES_KEY_LENGTH_BITS / 8 + HMAC_KEY_LENGTH_BITS / 8);  SecretKey confidentialityKey=new SecretKeySpec(confidentialityKeyBytes,CIPHER);  SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM);  return new SecretKeys(confidentialityKey,integrityKey);}  }
class C{  public static boolean testValidation(String variable_name,String variable_type,String structDecl) throws VerifierException {  if (variable_name.contains("\"") || variable_name.contains(",") || variable_name.contains(":")) {    throw new VerifierException("Invalid file format: " + variable_name + ":"+ variable_type+ " in Layout "+ structDecl.split(":")[0]);  }  for (  primitiveType typeIndex : primitiveType.values()) {    if (typeIndex.name().toLowerCase().equals(variable_type)) {      return true;    }  }  if (isPointer(variable_type)) {    return true;  }  if (isNestedStruct(variable_type)) {    return true;  }  throw new VerifierException("Neither a primitive type nor Nested struct: " + variable_name + ":"+ variable_type+ " in Layout '"+ structDecl.split(":")[0]+ "'");}  }
class C{  public Observable<Boolean> performPlaceCheckin(long placeId){  Observable<Boolean> checkin=routes.performCheckin(KEY,(int)placeId).map(null);  if (!isSignedIn())   checkin=checkin.startWith(getLoginCookie());  return checkin;}  }
class C{  protected static DomainHistoryObject<?> createHistoryObject(DomainObject<?> obj){  final String histClassName=obj.getClass().getName() + "History";  Class<?> clazz=obj.getClass();  final ClassLoader classLoader=getClassLoader(clazz);  try {    final Class<?> histClass=classLoader.loadClass(histClassName);    final Constructor<?> constructor=histClass.getConstructor(new Class[]{obj.getClass()});    return (DomainHistoryObject<?>)constructor.newInstance(new Object[]{obj});  } catch (  Exception e) {    throw new SaaSSystemException("Exception creating History Object " + histClassName,e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void addFormatter(String formatter){  if (!StringUtils.isEmpty(formatter)) {    formatters.add(formatter);  }}  }
class C{  public void prune(){  ConstPool cp=compact0();  ArrayList newAttributes=new ArrayList();  AttributeInfo invisibleAnnotations=getAttribute(AnnotationsAttribute.invisibleTag);  if (invisibleAnnotations != null) {    invisibleAnnotations=invisibleAnnotations.copy(cp,null);    newAttributes.add(invisibleAnnotations);  }  AttributeInfo visibleAnnotations=getAttribute(AnnotationsAttribute.visibleTag);  if (visibleAnnotations != null) {    visibleAnnotations=visibleAnnotations.copy(cp,null);    newAttributes.add(visibleAnnotations);  }  AttributeInfo signature=getAttribute(SignatureAttribute.tag);  if (signature != null) {    signature=signature.copy(cp,null);    newAttributes.add(signature);  }  ArrayList list=methods;  int n=list.size();  for (int i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    minfo.prune(cp);  }  list=fields;  n=list.size();  for (int i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    finfo.prune(cp);  }  attributes=newAttributes;  constPool=cp;}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("ascan.options.title"));  this.add(new JScrollPane(getPanelScanner()));}  }
class C{  public boolean hasExpired(){  long maxAge=getMaxAge();  if (maxAge == -1l) {    return false;  }  boolean expired=false;  if (maxAge <= 0l) {    expired=true;  }  return expired;}  }
class C{  public String epsilonTipText(){  return "The epsilon threshold for epsilon insensitive and Huber " + "loss. An error with absolute value less that this " + "threshold has loss of 0 for epsilon insensitive loss. "+ "For Huber loss this is the boundary between the quadratic "+ "and linear parts of the loss function.";}  }
class C{  public static boolean copyAssetFolder(AssetManager assetManager,String fromAssetPath,String toPath){  try {    String[] files=assetManager.list(fromAssetPath);    new File(toPath).mkdirs();    boolean res=true;    for (    String file : files)     if (file.contains(".")) {      res&=copyAsset(assetManager,fromAssetPath + "/" + file,toPath + "/" + file);    } else {      res&=copyAssetFolder(assetManager,fromAssetPath + "/" + file,toPath + "/" + file);    }    return res;  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  public boolean isSpringDamper(){  return this.frequency > 0.0 && this.dampingRatio > 0.0;}  }
class C{  protected String exchangeForSessionToken(String oneTimeToken) throws IOException, GeneralSecurityException, AuthenticationException {  return AuthSubUtil.exchangeForSessionToken(authsubProtocol,authsubHostname,oneTimeToken,null);}  }
class C{  public String authenticate(Credentials credentials,String token) throws GuacamoleException {  GuacamoleSession existingSession;  if (token != null)   existingSession=tokenSessionMap.get(token); else   existingSession=null;  AuthenticatedUser authenticatedUser=getAuthenticatedUser(existingSession,credentials);  List<UserContext> userContexts=getUserContexts(existingSession,authenticatedUser,credentials);  String authToken;  if (existingSession != null) {    authToken=token;    existingSession.setAuthenticatedUser(authenticatedUser);    existingSession.setUserContexts(userContexts);  } else {    authToken=authTokenGenerator.getToken();    tokenSessionMap.put(authToken,new GuacamoleSession(environment,authenticatedUser,userContexts));    logger.debug("Login was successful for user \"{}\".",authenticatedUser.getIdentifier());  }  return authToken;}  }
class C{  public static boolean startsWithIgnoreCase(String s,String start){  if (s.length() < start.length()) {    return false;  }  return s.substring(0,start.length()).equalsIgnoreCase(start);}  }
class C{  public ConsumesRequestCondition(String... consumes){  this(consumes,null);}  }
class C{  public KeyName itemKeyName(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_KEYNAME,i);  if (e != null) {    return new KeyName(e,this.baseURI);  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static GF2nPolynomialElement ONE(GF2nPolynomialField f){  GF2Polynomial polynomial=new GF2Polynomial(f.getDegree(),new int[]{1});  return new GF2nPolynomialElement(f,polynomial);}  }
class C{  protected void unsubscribe(){  if (subscriber != null && !subscriber.isUnsubscribed()) {    subscriber.unsubscribe();  }  subscriber=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Benchmark public Frame encodeStaticHelloIntoFrame(Input input){  input.HELLO.position(0);  return Frame.Response.from(0,FrameType.NEXT_COMPLETE,input.HELLOpayload);}  }
class C{  public void uninstallApplication(Operation operation) throws AndroidAgentException {  String packageName;  String type;  String schedule=null;  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"uninstallApplication started. Payload - " + operation.getPayLoad().toString());  }  try {    JSONObject appData=new JSONObject(operation.getPayLoad().toString());    type=appData.getString(getContextResources().getString(R.string.app_type));    if (getContextResources().getString(R.string.intent_extra_web).equalsIgnoreCase(type)) {      String appUrl=appData.getString(getContextResources().getString(R.string.app_url));      String name=appData.getString(getContextResources().getString(R.string.intent_extra_name));      String operationType=getContextResources().getString(R.string.operation_uninstall);      JSONObject payload=new JSONObject();      payload.put(getContextResources().getString(R.string.intent_extra_identity),appUrl);      payload.put(getContextResources().getString(R.string.intent_extra_title),name);      payload.put(getContextResources().getString(R.string.operation_type),operationType);      operation.setPayLoad(payload.toString());      manageWebClip(operation);    } else {      packageName=appData.getString(getContextResources().getString(R.string.app_identifier));      if (appData.has(getContextResources().getString(R.string.app_schedule))) {        schedule=appData.getString(getContextResources().getString(R.string.app_schedule));      }      getAppList().uninstallApplication(packageName,schedule);      operation.setStatus(getContextResources().getString(R.string.operation_value_completed));      getResultBuilder().build(operation);    }    if (Constants.DEBUG_MODE_ENABLED) {      Log.d(TAG,"Application started to uninstall");    }  } catch (  JSONException e) {    operation.setStatus(getContextResources().getString(R.string.operation_value_error));    operation.setOperationResponse("Error in parsing APPLICATION payload.");    getResultBuilder().build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }}  }
class C{  private void freeSlot(StackSlot slot){  SlotSize size=forKind(slot.getValueKind());  if (size == SlotSize.Illegal) {    return;  }  getOrInitFreeSlots(size).addLast(slot);}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  public static Vector2D calculateFromPolar(double length,double heading){  final double x=length * Math.cos(heading);  final double y=length * Math.sin(heading);  return new Vector2D(x,y);}  }
class C{  static byte[] pad(byte[] data){  int len;  if (data.length < 8)   len=data.length; else   len=data.length % 8;  if (len == 0)   return data; else {    byte[] padding=new byte[8 - len + data.length];    for (int i=padding.length - 1; i > data.length - 1; i--) {      padding[i]=0;    }    System.arraycopy(data,0,padding,0,data.length);    return padding;  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","yngsxy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void updateProcessCpuTime(long actualProcessCpuTime){  if (actualProcessCpuTime > processCpuTime) {    processCpuTime=actualProcessCpuTime;  }}  }
class C{  private void updateConfigForConnectedVdc(){  List<VirtualDataCenter> newVdcList=new ArrayList<>();  for (  VirtualDataCenter vdc : getAllVdc()) {    if (!vdc.getId().equals(operatedVdc.getId())) {      newVdcList.add(vdc);    }  }  log.info("number of vdc {} after removal",newVdcList.size());  VdcConfigSyncParam syncParam=buildConfigParam(newVdcList);  for (  VirtualDataCenter vdc : connectedVdc) {    if (vdc.getId().equals(myVdc.getId()) || vdc.getId().equals(operatedVdc.getId())) {      continue;    }    geoClientCache.getGeoClient(vdc.getShortId()).syncVdcConfig(syncParam,vdc.getLabel());  }  dbClient.stopClusterGossiping();  if (newVdcList.size() == 1) {    if (!syncParam.getVirtualDataCenters().isEmpty()) {      VdcConfig vdcConfig=syncParam.getVirtualDataCenters().get(0);      vdcConfig.setConnectionStatus(ConnectionStatus.ISOLATED.toString());      vdcConfig.setVersion(new Date().getTime());    } else {      log.error("Unexpected Vdc list size in sync config param");    }  }  helper.syncVdcConfig(syncParam.getVirtualDataCenters(),null,syncParam.getVdcConfigVersion(),syncParam.getIpsecKey());}  }
class C{  public static String stripComments(String src,String stringOpens,String stringCloses,boolean slashStarComments,boolean slashSlashComments,boolean hashComments,boolean dashDashComments){  if (src == null) {    return null;  }  StringBuilder strBuilder=new StringBuilder(src.length());  StringReader sourceReader=new StringReader(src);  int contextMarker=Character.MIN_VALUE;  boolean escaped=false;  int markerTypeFound=-1;  int ind=0;  int currentChar=0;  try {    while ((currentChar=sourceReader.read()) != -1) {      if (markerTypeFound != -1 && currentChar == stringCloses.charAt(markerTypeFound) && !escaped) {        contextMarker=Character.MIN_VALUE;        markerTypeFound=-1;      } else       if ((ind=stringOpens.indexOf(currentChar)) != -1 && !escaped && contextMarker == Character.MIN_VALUE) {        markerTypeFound=ind;        contextMarker=currentChar;      }      if (contextMarker == Character.MIN_VALUE && currentChar == '/' && (slashSlashComments || slashStarComments)) {        currentChar=sourceReader.read();        if (currentChar == '*' && slashStarComments) {          int prevChar=0;          while ((currentChar=sourceReader.read()) != '/' || prevChar != '*') {            if (currentChar == '\r') {              currentChar=sourceReader.read();              if (currentChar == '\n') {                currentChar=sourceReader.read();              }            } else {              if (currentChar == '\n') {                currentChar=sourceReader.read();              }            }            if (currentChar < 0) {              break;            }            prevChar=currentChar;          }          continue;        } else         if (currentChar == '/' && slashSlashComments) {          while ((currentChar=sourceReader.read()) != '\n' && currentChar != '\r' && currentChar >= 0) {          }        }      } else       if (contextMarker == Character.MIN_VALUE && currentChar == '#' && hashComments) {        while ((currentChar=sourceReader.read()) != '\n' && currentChar != '\r' && currentChar >= 0) {        }      } else       if (contextMarker == Character.MIN_VALUE && currentChar == '-' && dashDashComments) {        currentChar=sourceReader.read();        if (currentChar == -1 || currentChar != '-') {          strBuilder.append('-');          if (currentChar != -1) {            strBuilder.append(currentChar);          }          continue;        }        while ((currentChar=sourceReader.read()) != '\n' && currentChar != '\r' && currentChar >= 0) {        }      }      if (currentChar != -1) {        strBuilder.append((char)currentChar);      }    }  } catch (  IOException ioEx) {  }  return strBuilder.toString();}  }
class C{  private static Network createTriangularNetwork(){  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=(Network)scenario.getNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create(1,Node.class),new Coord(0,0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create(2,Node.class),new Coord(50,100));  Node node3=NetworkUtils.createAndAddNode(network,Id.create(3,Node.class),new Coord(50,0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create(4,Node.class),new Coord(100,0));  final Node fromNode=node1;  final Node toNode=node2;  NetworkUtils.createAndAddLink(network,Id.create(1,Link.class),fromNode,toNode,500.0,10.0,3600.0,(double)1);  final Node fromNode1=node2;  final Node toNode1=node4;  NetworkUtils.createAndAddLink(network,Id.create(2,Link.class),fromNode1,toNode1,500.0,10.0,3600.0,(double)1);  final Node fromNode2=node1;  final Node toNode2=node3;  NetworkUtils.createAndAddLink(network,Id.create(3,Link.class),fromNode2,toNode2,50.0,0.1,3600.0,(double)1);  final Node fromNode3=node3;  final Node toNode3=node4;  NetworkUtils.createAndAddLink(network,Id.create(4,Link.class),fromNode3,toNode3,50.0,0.1,3600.0,(double)1);  return network;}  }
class C{  @ResponseBody @RequestMapping(value="/messages/rows/{rows}/login/{login}",method=RequestMethod.GET) public List<Message> listMessages(@PathVariable String login,@PathVariable String rows) throws NumberFormatException, ServiceException {  return messageService.listByUser(userService.findByLogin(login),Integer.parseInt(rows));}  }
class C{  public static void marginLeft(Node no,double left){  AnchorPane.setLeftAnchor(no,left);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public <T>T read(T value,InputStream source) throws Exception {  return read(value,source,true);}  }
class C{  protected String doIt() throws Exception {  MProject project=new MProject(getCtx(),m_C_Project_ID,get_TrxName());  log.info("doIt - " + project);  MProjectLine[] projectLines=project.getLines();  if (MProject.PROJECTCATEGORY_WorkOrderJob.equals(project.getProjectCategory()) || MProject.PROJECTCATEGORY_AssetProject.equals(project.getProjectCategory())) {  }  for (int line=0; line < projectLines.length; line++) {    projectLines[line].setProcessed(true);    projectLines[line].saveEx();  }  project.setProcessed(true);  project.saveEx();  return "";}  }
class C{  private static TimerMomentData parseTimerMoment(String momentId,Element momentElement) throws MissionParseException {  float momentLengthMinutes=parseLengthMinutesElement(findSingleChildElementByTag(momentElement,ELEMENT_LENGTH_MINUTES));  String nextMomentId=getNextMomentId(momentElement);  ArrayList<String> fictionalProgress=parseMomentFictionalProgress(momentElement);  return new TimerMomentData(momentId,nextMomentId,fictionalProgress,momentLengthMinutes);}  }
class C{  public void startAutoScroll(int delayTimeInMills){  sendScrollMessage(delayTimeInMills);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public GuildMemberRemoveHandler(ImplDiscordAPI api){  super(api,true,"GUILD_MEMBER_REMOVE");}  }
class C{  public static JSONObject toJSONObject(XMLTokener x) throws JSONException {  return (JSONObject)parse(x,false,null);}  }
class C{  void removeAt(final int removeIndex){  final Object[] items=this.items;  if (removeIndex == takeIndex) {    items[takeIndex]=null;    takeIndex=inc(takeIndex);    count--;    if (itrs != null)     itrs.elementDequeued();  } else {    final int putIndex=this.putIndex;    for (int i=removeIndex; ; ) {      int next=inc(i);      if (next != putIndex) {        items[i]=items[next];        i=next;      } else {        items[i]=null;        this.putIndex=i;        break;      }    }    count--;    if (itrs != null)     itrs.removedAt(removeIndex);  }  notFull.signal();}  }
class C{  public boolean ping(HostAddress address,int timeout) throws HostException {  notes="InetAddress.isReachable()";  InetAddress inetAddress=address.getInetAddress();  try {    return inetAddress.isReachable(timeout);  } catch (  IOException e) {    throw new HostException("Ping operation failed unexpectedly",e);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static DataGenOp copyDataGenOp(DataGenOp inputGen,double scale,double shift) throws HopsException {  HashMap<String,Integer> params=inputGen.getParamIndexMap();  Hop rows=inputGen.getInput().get(params.get(DataExpression.RAND_ROWS));  Hop cols=inputGen.getInput().get(params.get(DataExpression.RAND_COLS));  Hop min=inputGen.getInput().get(params.get(DataExpression.RAND_MIN));  Hop max=inputGen.getInput().get(params.get(DataExpression.RAND_MAX));  Hop pdf=inputGen.getInput().get(params.get(DataExpression.RAND_PDF));  Hop mean=inputGen.getInput().get(params.get(DataExpression.RAND_LAMBDA));  Hop sparsity=inputGen.getInput().get(params.get(DataExpression.RAND_SPARSITY));  Hop seed=inputGen.getInput().get(params.get(DataExpression.RAND_SEED));  if (!(min instanceof LiteralOp) || !(max instanceof LiteralOp))   return null;  double smin=getDoubleValue((LiteralOp)min);  double smax=getDoubleValue((LiteralOp)max);  smin=smin * scale + shift;  smax=smax * scale + shift;  Hop sminHop=new LiteralOp(smin);  Hop smaxHop=new LiteralOp(smax);  HashMap<String,Hop> params2=new HashMap<String,Hop>();  params2.put(DataExpression.RAND_ROWS,rows);  params2.put(DataExpression.RAND_COLS,cols);  params2.put(DataExpression.RAND_MIN,sminHop);  params2.put(DataExpression.RAND_MAX,smaxHop);  params2.put(DataExpression.RAND_PDF,pdf);  params2.put(DataExpression.RAND_LAMBDA,mean);  params2.put(DataExpression.RAND_SPARSITY,sparsity);  params2.put(DataExpression.RAND_SEED,seed);  DataGenOp datagen=new DataGenOp(DataGenMethod.RAND,new DataIdentifier("tmp"),params2);  datagen.setRowsInBlock(inputGen.getRowsInBlock());  datagen.setColsInBlock(inputGen.getColsInBlock());  if (smin == 0 && smax == 0) {    datagen.setNnz(0);  }  return datagen;}  }
class C{  public void activateVAD(boolean activateVAD){  this.voiceActivityDetection=activateVAD;}  }
class C{  public void updateUI(){  setUI((TabbedPaneUI)UIManager.getUI(this));}  }
class C{  public ExceptionlessOutputStream(OutputStream out){  super(new DataOutputStream(out));  dos=(DataOutputStream)this.out;}  }
class C{  private DataTableModel(){  super();  m_Listeners=new HashSet<TableModelListener>();  m_Data=null;  m_NotificationEnabled=true;  m_UndoList=new Vector<File>();  m_IgnoreChanges=false;  m_UndoEnabled=true;  m_ReadOnly=false;  m_ShowAttributeIndex=false;  m_Cache=new Hashtable<String,String>();}  }
class C{  public static void load(InputStream stream,Object holder){  handle(ConfigFactory.parseReader(new InputStreamReader(stream)),holder,"");}  }
class C{  public UrlResource(String path) throws MalformedURLException {  Assert.notNull(path,"Path must not be null");  this.uri=null;  this.url=new URL(path);  this.cleanedUrl=getCleanedUrl(this.url,path);}  }
class C{  public String format(final double w){  final StringBuilder sb=new StringBuilder();  format(sb,w);  return sb.toString();}  }
class C{  public static NoteModel serializableInstance(){  return new NoteModel(new Parameters());}  }
class C{  protected ValueConverter[] convertersForColumns(Schema schema,TableId tableId,List<Column> columns,Predicate<ColumnId> filter,ColumnMappers mappers){  ValueConverter[] converters=new ValueConverter[columns.size()];  AtomicInteger i=new AtomicInteger(0);  columns.forEach(null);  return converters;}  }
class C{  public static void fill(char[] array,int start,int end,char value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  byte[] asn1EncPrincipal=(byte[])ois.readObject();  byte[] encRealm=(byte[])ois.readObject();  try {    Realm realmObject=new Realm(new DerValue(encRealm));    PrincipalName krb5Principal=new PrincipalName(new DerValue(asn1EncPrincipal),realmObject);    realm=realmObject.toString();    fullName=krb5Principal.toString();    nameType=krb5Principal.getNameType();  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  public IMqttDeliveryToken publish(String clientHandle,String topic,byte[] payload,int qos,boolean retained,String invocationContext,String activityToken) throws MqttPersistenceException, MqttException {  MqttConnection client=getConnection(clientHandle);  return client.publish(topic,payload,qos,retained,invocationContext,activityToken);}  }
class C{  public static void main(String[] args){  TestRunner.run(suite());}  }
class C{  public void addSessionListener(SessionListener l){  getSessionSupport().addSessionListener(l);}  }
class C{  @SuppressWarnings("unchecked") private void startSecondary() throws Exception {  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("dataCache");  igfsCfg.setMetaCacheName("metaCache");  igfsCfg.setName(IGFS_SECONDARY);  igfsCfg.setBlockSize(SECONDARY_BLOCK_SIZE);  igfsCfg.setDefaultMode(PRIMARY);  igfsCfg.setIpcEndpointConfiguration(SECONDARY_REST_CFG);  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();  dataCacheCfg.setName("dataCache");  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setNearConfiguration(null);  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  dataCacheCfg.setBackups(0);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("metaCache");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setNearConfiguration(null);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName("grid-secondary");  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  Ignite g=G.start(cfg);  igfsSecondary=(IgfsImpl)g.fileSystem(IGFS_SECONDARY);}  }
class C{  public void testWrite2() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestOutputStream tos=new TestOutputStream();  CipherOutputStream cos=new CipherOutputStream(tos,new NullCipher());  cos.write(data);  cos.flush();  byte[] result=tos.toByteArray();  if (!Arrays.equals(result,data)) {    fail("CipherOutputStream wrote incorrect data.");  }  try {    cos.write(null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public static Request createSharedSecretRequest(){  throw new UnsupportedOperationException("Shared Secret Support is not currently implemented");}  }
class C{  public static void toggleProximityBrowsing(final JFrame parent,final ZyGraph graph){  Preconditions.checkNotNull(parent,"IE01750: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE01751: Graph argument can not be null");  if (graph.getSettings().getProximitySettings().getProximityBrowsing()) {    CProgressDialog.showEndless(parent,"Switching off proximity browsing",new ProximityWaiter(graph));  } else {    CProgressDialog.showEndless(parent,"Switching on proximity browsing",new ProximityWaiter(graph));  }}  }
class C{  public Matrix4x3f rotateZYX(float angleZ,float angleY,float angleX){  return rotateZYX(angleZ,angleY,angleX,this);}  }
class C{  protected void sequence_TStructGetter(ISerializationContext context,TStructGetter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected int scale(int length){  return (int)Math.round(scale * length);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  int size=0;  if (obj == null)   size=0; else   if (obj instanceof java.util.Collection)   size=((java.util.Collection)obj).size(); else   if (obj instanceof java.util.Map)   size=((java.util.Map)obj).size(); else   if (obj.getClass().isArray())   size=java.lang.reflect.Array.getLength(obj); else   if (obj instanceof String || obj instanceof sage.Person)   size=obj.toString().length();  return new Integer(size);}  }
class C{  private static final int possiblyBrighter(int i){  if (i < 255) {    i+=(int)((255 - i) * 0.8f);  }  return i;}  }
class C{  private void analyze(){  logger.info("Action hotspots: " + hotspots.size());  System.out.println("JSA Hotspots: " + hotspots.size());  StopWatch timer=new StopWatch();  timer.start();  sa=new StringAnalysis(hotspots);  timer.stop();  logger.info("[Strig Analysis] Multi-level automaton: " + timer);  timeout-=timer.getTime() / 1000 / 60;  for (  ValueBox h : hotspots) {    nonterminals.put(h.getValue(),sa.getNonterminal(h));  }  gv=new GrammarVisitor(sa.getGrammar());  return;}  }
class C{  private void chooseDirectory(){  JFileChooser chooser=new JFileChooser(getCurrentPath().toFile());  chooser.setAcceptAllFileFilterUsed(false);  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  if (chooser.showDialog(parentComponent,"Select folder") == JFileChooser.APPROVE_OPTION) {    setSettingValue(chooser.getSelectedFile().getPath());  }}  }
class C{  private void updateCommonRPProperties(UnManagedProtectionSet unManagedProtectionSet,UnManagedVolume unManagedVolume,String personalityType,GetVolumeResponse volume,DbClient dbClient){  StringSet rpCopyName=new StringSet();  rpCopyName.add(volume.getRpCopyName());  StringSet rpInternalSiteName=new StringSet();  rpInternalSiteName.add(volume.getInternalSiteName());  if (volume.isProductionStandby()) {    unManagedVolume.putVolumeInfo(SupportedVolumeInformation.RP_STANDBY_COPY_NAME.toString(),rpCopyName);    unManagedVolume.putVolumeInfo(SupportedVolumeInformation.RP_STANDBY_INTERNAL_SITENAME.toString(),rpInternalSiteName);    String metroPoint=unManagedProtectionSet.getCGCharacteristics().get(UnManagedProtectionSet.SupportedCGCharacteristics.IS_MP.name());    if (metroPoint == null || metroPoint.isEmpty() || !Boolean.parseBoolean(metroPoint)) {      unManagedProtectionSet.getCGCharacteristics().put(UnManagedProtectionSet.SupportedCGCharacteristics.IS_MP.name(),Boolean.TRUE.toString());    }  } else {    unManagedVolume.putVolumeInfo(SupportedVolumeInformation.RP_COPY_NAME.toString(),rpCopyName);    unManagedVolume.putVolumeInfo(SupportedVolumeInformation.RP_INTERNAL_SITENAME.toString(),rpInternalSiteName);  }  StringSet personality=new StringSet();  personality.add(personalityType);  unManagedVolume.putVolumeInfo(SupportedVolumeInformation.RP_PERSONALITY.toString(),personality);  StringSet rpProtectionSystemId=new StringSet();  rpProtectionSystemId.add(unManagedProtectionSet.getProtectionSystemUri().toString());  unManagedVolume.putVolumeInfo(SupportedVolumeInformation.RP_PROTECTIONSYSTEM.toString(),rpProtectionSystemId);  filterProtectedVpools(dbClient,unManagedVolume,personality.iterator().next());}  }
class C{  private void printProperties(Properties properties) throws IOException {  StringWriter stringBuffer=new StringWriter();  BufferedReader reader=null;  properties.store(stringBuffer,null);  try {    reader=new BufferedReader(new StringReader(stringBuffer.toString()));    reader.readLine();    String line=null;    while ((line=reader.readLine()) != null) {      writer.print("//");      writer.println(line);    }  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private void printServiceUrls(MesosCluster cluster){  String masterContainer=cluster.getMaster().getContainerId();  String gateway=String.format("export %s=%s",MesosCluster.TOKEN_NETWORK_GATEWAY,DockerContainersUtil.getGatewayIpAddress(masterContainer));  output.println(gateway);  List<ClusterProcess> uniqueMembers=ClusterUtil.getDistinctRoleProcesses(cluster.getMemberProcesses());  for (  ClusterProcess process : uniqueMembers) {    URI serviceUrl=process.getServiceUrl();    if (serviceUrl != null) {      String service=String.format("export %s%s=%s",MesosCluster.MINIMESOS_TOKEN_PREFIX,process.getRole().toUpperCase(),serviceUrl.toString());      String serviceIp=String.format("export %s%s_IP=%s",MesosCluster.MINIMESOS_TOKEN_PREFIX,process.getRole().toUpperCase(),serviceUrl.getHost());      output.println(String.format("%s; %s",service,serviceIp));    }  }}  }
class C{  private void checkInvocationArguments(Tree.InvocationExpression that,Reference prf,Functional dec){  List<ParameterList> pls=dec.getParameterLists();  if (pls.isEmpty()) {  } else {    ParameterList pl=pls.get(0);    Tree.PositionalArgumentList args=that.getPositionalArgumentList();    if (args != null) {      checkPositionalArguments(pl,prf,args,that);    }    Tree.NamedArgumentList namedArgs=that.getNamedArgumentList();    if (namedArgs != null) {      if (pl.isNamedParametersSupported()) {        namedArgs.getNamedArgumentList().setParameterList(pl);        checkNamedArguments(pl,prf,namedArgs);      }    }  }}  }
class C{  public static long subAddressToLong(final String subaddress){  Preconditions.checkNotNull(subaddress,"Argument subaddress can't be null.");  if (subaddress.contains(".")) {    final String[] parts=subaddress.split("\\.");    Preconditions.checkArgument(parts.length == 2,"Argument subaddress is not a valid subaddress.");    final long firstPart=Long.parseLong(parts[0]);    final long secondPart=Long.parseLong(parts[1]);    return (firstPart * 0x100) + secondPart;  } else {    throw new IllegalArgumentException("Argument subaddress is not a valid subaddress.");  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);}  }
class C{  public static void main(String... args) throws SQLException {  new Console().runTool(args);}  }
class C{  protected void pan(final PInputEvent event){  final PCamera c=event.getCamera();  final Point2D l=event.getPosition();  if (c.getViewBounds().contains(l)) {    final PDimension d=event.getDelta();    c.translateView(d.getWidth(),d.getHeight());  }}  }
class C{  public boolean hasCoverage(){  return hasExtension(GwoCoverage.class);}  }
class C{  public void runtimeInit(TransformerImpl transformer) throws TransformerException {}  }
class C{  public static List<org.oscm.internal.vo.VOPricedOption> convertToUpVOPricedOption(List<org.oscm.vo.VOPricedOption> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOPricedOption> newVO=new ArrayList<org.oscm.internal.vo.VOPricedOption>();  for (  org.oscm.vo.VOPricedOption tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  this.changeSupport.addPropertyChangeListener(listener);}  }
class C{  public String globalInfo(){  return "Implements John Platt's sequential minimal optimization " + "algorithm for training a support vector classifier.\n\n" + "This implementation globally replaces all missing values and "+ "transforms nominal attributes into binary ones. It also "+ "normalizes all attributes by default. (In that case the coefficients "+ "in the output are based on the normalized data, not the "+ "original data --- this is important for interpreting the classifier.)\n\n"+ "Multi-class problems are solved using pairwise classification "+ "(1-vs-1 and if logistic models are built pairwise coupling "+ "according to Hastie and Tibshirani, 1998).\n\n"+ "To obtain proper probability estimates, use the option that fits "+ "logistic regression models to the outputs of the support vector "+ "machine. In the multi-class case the predicted probabilities "+ "are coupled using Hastie and Tibshirani's pairwise coupling "+ "method.\n\n"+ "Note: for improved speed normalization should be turned off when "+ "operating on SparseInstances.\n\n"+ "For more information on the SMO algorithm, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.672 -0500",hash_original_method="4C60E3731E2F1A6A961C2EAF6730B8EA",hash_generated_method="2CDCA23B58D35C8E8E168DF40A730FA4") public void removeUserType(){  if (uriParms != null)   uriParms.delete(USER);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String grassFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      grassFile=whiteboxHeaderFile.replace(".dep",".grd");      (new File(grassFile)).delete();      fw=new FileWriter(grassFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="DSAA";      out.println(str1);      str1=String.valueOf(cols) + " " + String.valueOf(rows);      out.println(str1);      double xMin=Math.min(wbr.getEast(),wbr.getWest());      double xMax=Math.max(wbr.getEast(),wbr.getWest());      str1=String.valueOf(xMin) + " " + String.valueOf(xMax);      out.println(str1);      double yMin=Math.min(wbr.getNorth(),wbr.getSouth());      double yMax=Math.max(wbr.getNorth(),wbr.getSouth());      str1=String.valueOf(yMin) + " " + String.valueOf(yMax);      out.println(str1);      str1=String.valueOf(0) + " " + String.valueOf(1);      out.println(str1);      double[] data=null;      String line="";      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=rows - 1; row >= 0; row--) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * (rows - 1 - row) / (rows - 1));          updateProgress(progress);        }      } else {        for (row=rows - 1; row >= 0; row--) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * (rows - 1 - row) / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public void saveAll(){  saveQueue.forEach(null);  saveQueue.clear();}  }
class C{  public final void reset(){  m_currentCodepoint_=0;  m_nextCodepoint_=0;  m_nextIndex_=0;  m_nextBlock_=m_trie_.m_index_[0] << Trie.INDEX_STAGE_2_SHIFT_;  if (m_nextBlock_ == 0) {    m_nextValue_=m_initialValue_;  } else {    m_nextValue_=extract(m_trie_.getValue(m_nextBlock_));  }  m_nextBlockIndex_=0;  m_nextTrailIndexOffset_=TRAIL_SURROGATE_INDEX_BLOCK_LENGTH_;}  }
class C{  public CLIOutputResponse propget(final PropertyGetRequest request) throws IOException, ServerException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  uArgs.add("propget");  uArgs.add(request.getName());  final CommandLineResult result=runCommand(null,uArgs,projectPath,Arrays.asList(request.getPath()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout());}  }
class C{  protected boolean reachedStoppingCriterion(WeightVector w,int epoch,SLParameters params){  if (epochUpdateCount == 0) {    log.info("No errors made. Stopping outer loop because learning is complete!");    return false;  }  return epoch < params.MAX_NUM_ITER;}  }
class C{  static char[] unqualifiedName(char[] className){  if (className == null)   return null;  int count=0;  for (int i=className.length - 1; i > -1; i--) {    if (className[i] == '/') {      char[] name=new char[count];      System.arraycopy(className,i + 1,name,0,count);      return name;    }    count++;  }  return className;}  }
class C{  public LibraryException(final String message,final Throwable cause){  super(message,cause);  QL.error(this);}  }
class C{  private String[] platformNames(String libraryName){  if (isWindows)   return new String[]{libraryName + (is64Bit ? "64.dll" : ".dll")};  if (isLinux)   return new String[]{"lib" + libraryName + (is64Bit ? "64.so" : ".so")};  if (isMac)   return new String[]{"lib" + libraryName + ".jnilib","lib" + libraryName + ".dylib"};  return new String[]{libraryName};}  }
class C{  public static HistoricalEventViewable createPollMethodView(int streamNumber,MethodStreamSpec methodStreamSpec,EventAdapterService eventAdapterService,EPStatementAgentInstanceHandle epStatementAgentInstanceHandle,EngineImportService engineImportService,SchedulingService schedulingService,ScheduleBucket scheduleBucket,ExprEvaluatorContext exprEvaluatorContext,VariableService variableService,String contextName,DataCacheFactory dataCacheFactory,StatementContext statementContext) throws ExprValidationException {  VariableMetaData variableMetaData=variableService.getVariableMetaData(methodStreamSpec.getClassName());  MethodPollingExecStrategyEnum strategy;  VariableReader variableReader;  String variableName;  Method methodReflection;  Class declaringClass;  Object invocationTarget;  try {    if (variableMetaData != null) {      variableName=variableMetaData.getVariableName();      if (variableMetaData.getContextPartitionName() != null) {        if (contextName == null || !contextName.equals(variableMetaData.getContextPartitionName())) {          throw new ExprValidationException("Variable by name '" + variableMetaData.getVariableName() + "' has been declared for context '"+ variableMetaData.getContextPartitionName()+ "' and can only be used within the same context");        }        strategy=MethodPollingExecStrategyEnum.TARGET_VAR_CONTEXT;        variableReader=null;        invocationTarget=null;      } else {        variableReader=variableService.getReader(methodStreamSpec.getClassName(),EPStatementStartMethod.DEFAULT_AGENT_INSTANCE_ID);        if (variableMetaData.isConstant()) {          invocationTarget=variableReader.getValue();          if (invocationTarget instanceof EventBean) {            invocationTarget=((EventBean)invocationTarget).getUnderlying();          }          strategy=MethodPollingExecStrategyEnum.TARGET_CONST;        } else {          invocationTarget=null;          strategy=MethodPollingExecStrategyEnum.TARGET_VAR;        }      }      methodReflection=engineImportService.resolveNonStaticMethodOverloadChecked(variableMetaData.getType(),methodStreamSpec.getMethodName());    } else {      methodReflection=engineImportService.resolveMethodOverloadChecked(methodStreamSpec.getClassName(),methodStreamSpec.getMethodName());      invocationTarget=null;      variableReader=null;      variableName=null;      strategy=MethodPollingExecStrategyEnum.TARGET_CONST;    }    declaringClass=methodReflection.getDeclaringClass();  } catch (  ExprValidationException e) {    throw e;  }catch (  Exception e) {    throw new ExprValidationException(e.getMessage(),e);  }  Class beanClass=methodReflection.getReturnType();  if ((beanClass == void.class) || (beanClass == Void.class) || (JavaClassHelper.isJavaBuiltinDataType(beanClass))) {    throw new ExprValidationException("Invalid return type for static method '" + methodReflection.getName() + "' of class '"+ methodStreamSpec.getClassName()+ "', expecting a Java class");  }  if (methodReflection.getReturnType().isArray()) {    beanClass=methodReflection.getReturnType().getComponentType();  }  boolean isCollection=JavaClassHelper.isImplementsInterface(beanClass,Collection.class);  Class collectionClass=null;  if (isCollection) {    collectionClass=JavaClassHelper.getGenericReturnType(methodReflection,true);    beanClass=collectionClass;  }  boolean isIterator=JavaClassHelper.isImplementsInterface(beanClass,Iterator.class);  Class iteratorClass=null;  if (isIterator) {    iteratorClass=JavaClassHelper.getGenericReturnType(methodReflection,true);    beanClass=iteratorClass;  }  Map<String,Object> mapType=null;  String mapTypeName=null;  if ((JavaClassHelper.isImplementsInterface(methodReflection.getReturnType(),Map.class)) || (methodReflection.getReturnType().isArray() && JavaClassHelper.isImplementsInterface(methodReflection.getReturnType().getComponentType(),Map.class)) || (isCollection && JavaClassHelper.isImplementsInterface(collectionClass,Map.class))|| (isIterator && JavaClassHelper.isImplementsInterface(iteratorClass,Map.class))) {    MethodMetadataDesc metadata;    if (variableMetaData != null) {      metadata=getCheckMetadataVariable(methodStreamSpec.getMethodName(),variableMetaData,variableReader,engineImportService,Map.class);    } else {      metadata=getCheckMetadataNonVariable(methodStreamSpec.getMethodName(),methodStreamSpec.getClassName(),engineImportService,Map.class);    }    mapTypeName=metadata.getTypeName();    mapType=(Map<String,Object>)metadata.getTypeMetadata();  }  LinkedHashMap<String,Object> oaType=null;  String oaTypeName=null;  if (methodReflection.getReturnType() == Object[].class || methodReflection.getReturnType() == Object[][].class || (isCollection && collectionClass == Object[].class) || (isIterator && iteratorClass == Object[].class)) {    MethodMetadataDesc metadata;    if (variableMetaData != null) {      metadata=getCheckMetadataVariable(methodStreamSpec.getMethodName(),variableMetaData,variableReader,engineImportService,LinkedHashMap.class);    } else {      metadata=getCheckMetadataNonVariable(methodStreamSpec.getMethodName(),methodStreamSpec.getClassName(),engineImportService,LinkedHashMap.class);    }    oaTypeName=metadata.getTypeName();    oaType=(LinkedHashMap<String,Object>)metadata.getTypeMetadata();  }  EventType eventType;  if (mapType != null) {    eventType=eventAdapterService.addNestableMapType(mapTypeName,mapType,null,false,true,true,false,false);  } else   if (oaType != null) {    eventType=eventAdapterService.addNestableObjectArrayType(oaTypeName,oaType,null,false,true,true,false,false,false,null);  } else {    eventType=eventAdapterService.addBeanType(beanClass.getName(),beanClass,false,true,true);  }  ConfigurationMethodRef configCache=engineImportService.getConfigurationMethodRef(declaringClass.getName());  if (configCache == null) {    configCache=engineImportService.getConfigurationMethodRef(declaringClass.getSimpleName());  }  ConfigurationDataCache dataCacheDesc=(configCache != null) ? configCache.getDataCacheDesc() : null;  DataCache dataCache=dataCacheFactory.getDataCache(dataCacheDesc,statementContext,epStatementAgentInstanceHandle,schedulingService,scheduleBucket,streamNumber);  MethodPollingViewableMeta meta=new MethodPollingViewableMeta(declaringClass,mapType,oaType,invocationTarget,strategy,isCollection,isIterator,variableReader,variableName);  return new MethodPollingViewable(variableMetaData == null,methodReflection.getDeclaringClass(),methodStreamSpec,methodStreamSpec.getExpressions(),dataCache,eventType,exprEvaluatorContext,meta);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.ENUM__ENUMS:    return getEnums();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public NumberFormatException(@Nullable String s){  super(s);}  }
class C{  public String optimizeJoinOrder(String sparql){  Op op=Algebra.compile(QueryFactory.create(sparql));  Transform joinReorder=new TransformJoinStrategy();  op=Transformer.transform(joinReorder,op);  return OpAsQuery.asQuery(op).serialize();}  }
class C{  protected void drawSimpleEdge(RenderContext<V,E> rc,Layout<V,E> layout,E e){  int[] coords=new int[4];  boolean[] loop=new boolean[1];  Shape edgeShape=edgeShapeMap.get(e);  if (edgeShape == null || dirtyEdges.contains(e)) {    edgeShape=prepareFinalEdgeShape(rc,layout,e,coords,loop);    edgeShapeMap.put(e,edgeShape);    dirtyEdges.remove(e);  }  int x1=coords[0];  int y1=coords[1];  int x2=coords[2];  int y2=coords[3];  boolean isLoop=loop[0];  GraphicsDecorator g=rc.getGraphicsContext();  Graph<V,E> graph=layout.getGraph();  boolean edgeHit=true;  boolean arrowHit=true;  Rectangle deviceRectangle=null;  JComponent vv=rc.getScreenDevice();  if (vv != null) {    Dimension d=vv.getSize();    deviceRectangle=new Rectangle(0,0,d.width,d.height);  }  MutableTransformer vt=rc.getMultiLayerTransformer().getTransformer(Layer.VIEW);  if (vt instanceof LensTransformer) {    vt=((LensTransformer)vt).getDelegate();  }  edgeHit=vt.transform(edgeShape).intersects(deviceRectangle);  if (edgeHit == true) {    Paint oldPaint=g.getPaint();    Paint fill_paint=rc.getEdgeFillPaintTransformer().apply(e);    if (fill_paint != null) {      g.setPaint(fill_paint);      g.fill(edgeShape);    }    Paint draw_paint=rc.getEdgeDrawPaintTransformer().apply(e);    if (draw_paint != null) {      g.setPaint(draw_paint);      g.draw(edgeShape);    }    float scalex=(float)g.getTransform().getScaleX();    float scaley=(float)g.getTransform().getScaleY();    if (scalex < .3 || scaley < .3)     return;    if (rc.getEdgeArrowPredicate().apply(Context.<Graph<V,E>,E>getInstance(graph,e))) {      Stroke new_stroke=rc.getEdgeArrowStrokeTransformer().apply(e);      Stroke old_stroke=g.getStroke();      if (new_stroke != null)       g.setStroke(new_stroke);      Shape destVertexShape=rc.getVertexShapeTransformer().apply(graph.getEndpoints(e).getSecond());      AffineTransform xf=AffineTransform.getTranslateInstance(x2,y2);      destVertexShape=xf.createTransformedShape(destVertexShape);      arrowHit=rc.getMultiLayerTransformer().getTransformer(Layer.VIEW).transform(destVertexShape).intersects(deviceRectangle);      if (arrowHit) {        AffineTransform at=edgeArrowRenderingSupport.getArrowTransform(rc,edgeShape,destVertexShape);        if (at == null)         return;        Shape arrow=rc.getEdgeArrowTransformer().apply(Context.<Graph<V,E>,E>getInstance(graph,e));        arrow=at.createTransformedShape(arrow);        g.setPaint(rc.getArrowFillPaintTransformer().apply(e));        g.fill(arrow);        g.setPaint(rc.getArrowDrawPaintTransformer().apply(e));        g.draw(arrow);      }      if (graph.getEdgeType(e) == EdgeType.UNDIRECTED) {        Shape vertexShape=rc.getVertexShapeTransformer().apply(graph.getEndpoints(e).getFirst());        xf=AffineTransform.getTranslateInstance(x1,y1);        vertexShape=xf.createTransformedShape(vertexShape);        arrowHit=rc.getMultiLayerTransformer().getTransformer(Layer.VIEW).transform(vertexShape).intersects(deviceRectangle);        if (arrowHit) {          AffineTransform at=edgeArrowRenderingSupport.getReverseArrowTransform(rc,edgeShape,vertexShape,!isLoop);          if (at == null)           return;          Shape arrow=rc.getEdgeArrowTransformer().apply(Context.<Graph<V,E>,E>getInstance(graph,e));          arrow=at.createTransformedShape(arrow);          g.setPaint(rc.getArrowFillPaintTransformer().apply(e));          g.fill(arrow);          g.setPaint(rc.getArrowDrawPaintTransformer().apply(e));          g.draw(arrow);        }      }      if (new_stroke != null)       g.setStroke(old_stroke);    }    g.setPaint(oldPaint);  }}  }
class C{  public Canvas(){}  }
class C{  public String tokenizerTipText(){  return "The tokenizing algorithm to use on the strings.";}  }
class C{  public void endArray() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_END_ARRAY) {    stackSize--;    pathIndices[stackSize - 1]++;    peeked=PEEKED_NONE;  } else {    throw new IllegalStateException("Expected END_ARRAY but was " + peek() + locationString());  }}  }
class C{  public void addNew(String classname){  addOpcode(NEW);  addIndex(constPool.addClassInfo(classname));}  }
class C{  public void freeEntry(BasicPoolEntry entry){  if (numEntries < 1) {    throw new IllegalStateException("No entry created for this pool. " + route);  }  if (numEntries <= freeEntries.size()) {    throw new IllegalStateException("No entry allocated from this pool. " + route);  }  freeEntries.add(entry);}  }
class C{  @Deprecated public static <T>void sort(T[] array,int size,Comparator<? super T> comparator){  if (comparator == null) {    Arrays.sort(array,0,size);  } else {    Arrays.sort(array,0,size,comparator);  }}  }
class C{  @Override public boolean compareValue(int val1,int val2){  return (val1 < val2);}  }
class C{  private static Map<NetworkLite,List<StoragePort>> groupPortsByNetwork(Collection<StoragePort> ports,DbClient dbClient){  return getNetworksMap(ports,dbClient);}  }
class C{  public boolean isSyntheticPublic(){  return syntheticPublic;}  }
class C{  public static <T extends Enum<T> & EnumClass<V>,V>T fromIdSafe(Class<T> e,V id,T defaultValue){  if (id == null)   return defaultValue;  for (  T enumConstant : e.getEnumConstants()) {    if (enumConstant.getId().equals(id)) {      return enumConstant;    }  }  return defaultValue;}  }
class C{  public void finish(){}  }
class C{  protected int oldFindAndEliminateRedundant(int start,int firstOccuranceIndex,ExpressionOwner firstOccuranceOwner,ElemTemplateElement psuedoVarRecipient,Vector paths) throws org.w3c.dom.DOMException {  QName uniquePseudoVarName=null;  boolean foundFirst=false;  int numPathsFound=0;  int n=paths.size();  Expression expr1=firstOccuranceOwner.getExpression();  if (DEBUG)   assertIsLocPathIterator(expr1,firstOccuranceOwner);  boolean isGlobal=(paths == m_absPaths);  LocPathIterator lpi=(LocPathIterator)expr1;  for (int j=start; j < n; j++) {    ExpressionOwner owner2=(ExpressionOwner)paths.elementAt(j);    if (null != owner2) {      Expression expr2=owner2.getExpression();      boolean isEqual=expr2.deepEquals(lpi);      if (isEqual) {        LocPathIterator lpi2=(LocPathIterator)expr2;        if (!foundFirst) {          foundFirst=true;          ElemVariable var=createPseudoVarDecl(psuedoVarRecipient,lpi,isGlobal);          if (null == var)           return 0;          uniquePseudoVarName=var.getName();          changeToVarRef(uniquePseudoVarName,firstOccuranceOwner,paths,psuedoVarRecipient);          paths.setElementAt(var.getSelect(),firstOccuranceIndex);          numPathsFound++;        }        changeToVarRef(uniquePseudoVarName,owner2,paths,psuedoVarRecipient);        paths.setElementAt(null,j);        numPathsFound++;      }    }  }  if ((0 == numPathsFound) && (paths == m_absPaths)) {    ElemVariable var=createPseudoVarDecl(psuedoVarRecipient,lpi,true);    if (null == var)     return 0;    uniquePseudoVarName=var.getName();    changeToVarRef(uniquePseudoVarName,firstOccuranceOwner,paths,psuedoVarRecipient);    paths.setElementAt(var.getSelect(),firstOccuranceIndex);    numPathsFound++;  }  return numPathsFound;}  }
class C{  public static byte[] assetAsByteArray(Resources res,String path) throws IOException {  InputStream is=res.getAssets().open(path);  ByteArrayOutputStream buf=new ByteArrayOutputStream();  byte[] temp=new byte[1024];  int read;  while ((read=is.read(temp)) > 0) {    buf.write(temp,0,read);  }  is.close();  return buf.toByteArray();}  }
class C{  public MessageParserException(final String message){  super(message);}  }
class C{  private static String templateToHtml(Template t){  if (t == null) {    return "null";  }  StringBuilder result=new StringBuilder();  result.append("<table class=\"Template\">\n" + "<tr><th class=\"Template\">Template</th></tr>\n" + "<tr><td class=\"Template\">"+ "Name: \"" + convertTags(t.getName()) + "\"<br/>"+ "</td></tr>\n");  if (t.getParameters().size() != 0) {    result.append("<tr><td class=\"Template\">");    for (    String parameter : t.getParameters()) {      result.append("Parameter: \"" + convertTags(parameter) + "\"<br/>");    }    result.append("</td></tr>\n");  }  result.append("</table>");  return result.toString();}  }
class C{  public boolean isArray(){  return arraySize >= 0;}  }
class C{  public Hypercube(double xlow,double xhigh,double ylow,double yhigh){  lows=new double[]{xlow,ylow};  highs=new double[]{xhigh,yhigh};  dimension=2;}  }
class C{  public synchronized long maxRingMessageTime(){  return maxRingMsgTime;}  }
class C{  @POST @Produces(MediaType.APPLICATION_JSON) @Path("/redrivetask/{taskId}") public Response redriveTask(@PathParam("taskId") Long taskId) throws Exception {  this.workFlowExecutionController.redriveTask(taskId);  return Response.status(Response.Status.ACCEPTED.getStatusCode()).build();}  }
class C{  protected CompilationUnitContext(TemplateContextType type,IDocument document,int completionOffset,int completionLength,ISourceFile compilationUnit){  super(type,document,completionOffset,completionLength);  fCompilationUnit=compilationUnit;  fIsManaged=false;}  }
class C{  @Override public void append(ResultEntry entry){  qualityIndicator.calculate(entry.getPopulation());  writer.print(qualityIndicator.getHypervolume());  writer.print(' ');  writer.print(qualityIndicator.getGenerationalDistance());  writer.print(' ');  writer.print(qualityIndicator.getInvertedGenerationalDistance());  writer.print(' ');  writer.print(qualityIndicator.getSpacing());  writer.print(' ');  writer.print(qualityIndicator.getAdditiveEpsilonIndicator());  writer.print(' ');  writer.print(qualityIndicator.getMaximumParetoFrontError());  writer.println();  numberOfEntries++;}  }
class C{  public String globalInfo(){  return "GainRatioAttributeEval :\n\nEvaluates the worth of an attribute " + "by measuring the gain ratio with respect to the class.\n\n" + "GainR(Class, Attribute) = (H(Class) - H(Class | Attribute)) / "+ "H(Attribute).\n";}  }
class C{  public void testAddAll2(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);    Integer[] ints=new Integer[SIZE];    q.addAll(Arrays.asList(ints));    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  @Override public void process(final Task<Diff> task) throws ConfigurationException, IOException, SQLConsumerException {  try {    List<String> data=dataFileEncoder.encodeTask(task);    for (    String d : data) {      this.output.write((d + ";").getBytes());      this.output.flush();    }    if (task.getTaskType() == TaskTypes.TASK_FULL || task.getTaskType() == TaskTypes.TASK_PARTIAL_LAST) {      if (this.dataArchive.length() > LIMIT_SQL_ARCHIVE_SIZE) {        writeHeader();      }      if (!MODE_STATISTICAL_OUTPUT) {        System.out.println(task.toString());      }    } else {      System.out.println(task.toString());    }  } catch (  EncodingException e) {    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_FILEWRITER_EXCEPTION,e);  }catch (  DecodingException e) {    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_FILEWRITER_EXCEPTION,e);  }}  }
class C{  protected final StringBuilder write(final Object... objects){  return write(new StringBuilder(),objects);}  }
class C{  public static String right(final int n){  return ESC + "[" + n+ "C";}  }
class C{  private void syncDestination(State state){  FileOutputStream downloadedFileStream=null;  try {    downloadedFileStream=new FileOutputStream(state.mFilename,true);    downloadedFileStream.getFD().sync();  } catch (  FileNotFoundException ex) {    Log.w(Constants.TAG,"file " + state.mFilename + " not found: "+ ex);  }catch (  SyncFailedException ex) {    Log.w(Constants.TAG,"file " + state.mFilename + " sync failed: "+ ex);  }catch (  IOException ex) {    Log.w(Constants.TAG,"IOException trying to sync " + state.mFilename + ": "+ ex);  }catch (  RuntimeException ex) {    Log.w(Constants.TAG,"exception while syncing file: ",ex);  } finally {    if (downloadedFileStream != null) {      try {        downloadedFileStream.close();      } catch (      IOException ex) {        Log.w(Constants.TAG,"IOException while closing synced file: ",ex);      }catch (      RuntimeException ex) {        Log.w(Constants.TAG,"exception while closing file: ",ex);      }    }  }}  }
class C{  public void watchForUnavailability(){  watch(false);}  }
class C{  public KMLCamera(String namespaceURI){  super(namespaceURI);}  }
class C{  public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  this.subject=subject;  this.callbackHandler=callbackHandler;  this.sharedState=sharedState;  this.options=options;  debug="true".equalsIgnoreCase((String)options.get("debug"));}  }
class C{  public void putIdElement(String id,Element obj){  objWithId.put(id,new WeakReference<>(obj));}  }
class C{  public DriveRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public byte[] compress(byte[] unCompInput){  try {    return Snappy.rawCompress(unCompInput,unCompInput.length);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  private void createDirtyRegion(final DocumentChangeEvent event){  if (event.getLength() == 0 && event.getText() != null) {    dirtyRegionQueue.addDirtyRegion(new DirtyRegion(event.getOffset(),event.getText().length(),DirtyRegion.INSERT,event.getText()));  } else   if (event.getText() == null || event.getText().length() == 0) {    dirtyRegionQueue.addDirtyRegion(new DirtyRegion(event.getOffset(),event.getLength(),DirtyRegion.REMOVE,null));  } else {    dirtyRegionQueue.addDirtyRegion(new DirtyRegion(event.getOffset(),event.getLength(),DirtyRegion.REMOVE,null));    dirtyRegionQueue.addDirtyRegion(new DirtyRegion(event.getOffset(),event.getText().length(),DirtyRegion.INSERT,event.getText()));  }}  }
class C{  private int updateSeq(int seq){  long udelta=seq - maxSeq;  if (probation > 0) {    if (seq == maxSeq + 1) {      probation--;      maxSeq=seq;      if (probation == 0) {        initSeq(seq);        received++;        return 1;      }    } else {      probation=MIN_SEQUENCIAL - 1;      maxSeq=seq;      return 1;    }    return 0;  } else   if (udelta < MAX_DROPOUT) {    if (seq < maxSeq && (udelta >= (MAX_MISORDER * -1))) {      received++;      return 1;    }    if (seq < maxSeq) {      cycles++;    }    maxSeq=seq;  } else   if (udelta <= RTP_SEQ_MOD - MAX_MISORDER) {    if (seq == badSeq) {      initSeq(seq);    } else {      badSeq=(seq + 1) & (RTP_SEQ_MOD - 1);      return 0;    }  } else {  }  received++;  return 1;}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static int checkKnowLog(BigInteger c,BigInteger d,BigInteger g,BigInteger x,int version) throws SMException {  BigInteger gd=g.modPow(d,MODULUS_S);  BigInteger xc=x.modPow(c,MODULUS_S);  BigInteger gdxc=gd.multiply(xc).mod(MODULUS_S);  BigInteger hgdxc=hash(version,gdxc,null);  return hgdxc.compareTo(c);}  }
class C{  protected void refreshLegendLayout(){  double absoluteLegendDistance=0.0;  if (MathUtils.isCalculatable(legendDistance)) {    absoluteLegendDistance=legendDistance * font.getSize2D();  }  OuterEdgeLayout layout=new OuterEdgeLayout(absoluteLegendDistance);  legendContainer.setLayout(layout);}  }
class C{  public static void broadcastBgEstimate(double bgEstimate,double rawEstimate,long timestamp,double slope,String slopeName,int batteryLevel,Context context){  final Bundle bundle=new Bundle();  bundle.putDouble(EXTRA_BG_ESTIMATE,bgEstimate);  bundle.putDouble(EXTRA_BG_SLOPE,slope);  bundle.putString(EXTRA_BG_SLOPE_NAME,slopeName == null ? SLOPE_NONE : slopeName);  bundle.putInt(EXTRA_SENSOR_BATTERY,batteryLevel);  bundle.putLong(EXTRA_TIMESTAMP,timestamp);  bundle.putDouble(EXTRA_RAW,rawEstimate);  Intent intent=(new Intent(ACTION_NEW_BG_ESTIMATE)).putExtras(bundle).addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);  context.sendBroadcast(intent,null);}  }
class C{  public synchronized void activate(){  activated=true;}  }
class C{  @Override protected int calculateKind() throws TeamException {  int description=IN_SYNC;  final boolean localExists=local.exists();  final String localPath=LocalPath.canonicalize(local.getLocation().toOSString());  if (localChanges == null && remoteOperation == null) {    description=IN_SYNC;  } else   if (localChanges != null && remoteOperation == null) {    description=OUTGOING;  } else   if (localChanges == null && remoteOperation != null) {    description=INCOMING;  } else {    description=CONFLICTING;  }  if (localChanges != null) {    final ChangeType changeTypes=localChanges.getChangeType();    if (changeTypes.contains(ChangeType.ADD) || changeTypes.contains(ChangeType.BRANCH) || changeTypes.contains(ChangeType.MERGE)|| changeTypes.contains(ChangeType.UNDELETE)) {      description|=ADDITION;    } else     if (changeTypes.contains(ChangeType.DELETE)) {      description|=DELETION;      if (remoteItem != null && localChanges.getVersion() < remoteItem.getChangeSetID()) {        description|=CONFLICTING;      }    } else     if (changeTypes.contains(ChangeType.RENAME)) {      String source=null, dest=null;      try {        if (localChanges.getSourceServerItem() != null) {          source=repository.getWorkspace().getMappedLocalPath(localChanges.getSourceServerItem());        }        if (localChanges.getServerItem() != null) {          dest=repository.getWorkspace().getMappedLocalPath(localChanges.getServerItem());        }      } catch (      final ServerPathFormatException e) {      }      if (source != null && source.equalsIgnoreCase(localPath)) {        description|=DELETION;      } else       if (dest != null && dest.equalsIgnoreCase(localPath)) {        description|=ADDITION;      } else {        description|=CHANGE;      }    } else {      description|=CHANGE;    }  }  if (remoteOperation != null) {    if (remoteOperation.isDelete()) {      description|=DELETION;      if (local.getType() == IWorkspaceRoot.FILE && !local.isReadOnly()) {        description|=CONFLICTING;      }    } else     if (localExists && TFSEclipseClientPlugin.getDefault().getResourceDataManager().hasResourceData(local) == false) {      description|=(CONFLICTING | ADDITION);    } else     if (!repository.getWorkspace().isLocalWorkspace() && localExists && local.getType() == IWorkspaceRoot.FILE && !local.isReadOnly()) {      description|=(CONFLICTING | CHANGE);    } else     if (!localExists) {      description|=ADDITION;    } else     if (remoteOperation.getCurrentLocalItem() != null && remoteOperation.getTargetLocalItem() != null && !remoteOperation.getCurrentLocalItem().equals(remoteOperation.getTargetLocalItem())) {      description|=DELETION;      if (local.getType() == IWorkspaceRoot.FILE && !local.isReadOnly()) {        description|=CONFLICTING;      }    } else {      description|=CHANGE;    }  }  return description;}  }
class C{  public NTriplesWriter(OutputStream out){  this(new OutputStreamWriter(out,Charset.forName("UTF-8")));}  }
class C{  private boolean wasTapCloseToPreviousTap(int x,int y){  float deltaXDp=(mX - x) * mPxToDp;  float deltaYDp=(mY - y) * mPxToDp;  float distanceSquaredDp=deltaXDp * deltaXDp + deltaYDp * deltaYDp;  return distanceSquaredDp <= RETAP_DISTANCE_SQUARED_DP;}  }
class C{  public void replaceBiomeBlocks(int chunkX,int chunkZ,ChunkPrimer primer,Biome[] biomesIn){  if (!net.minecraftforge.event.ForgeEventFactory.onReplaceBiomeBlocks(this,chunkX,chunkZ,primer,this.worldObj))   return;  this.surfaceNoiseBuffer=this.surfaceNoise.getRegion(this.surfaceNoiseBuffer,(double)(chunkX * 16),(double)(chunkZ * 16),16,16,0.0625D,0.0625D,1.0D);  this.initializedNoiseGenerators.clear();  for (int z=0; z < 16; z++) {    for (int x=0; x < 16; x++) {      float terrainBiomeWeight=this.interpolatedTerrainBiomeWeights[x + z * 16];      double baseBlockNoise=this.surfaceNoiseBuffer[z + x * 16];      Biome biome=biomesIn[z + x * 16];      if (biome instanceof BiomeBetweenlands) {        BiomeGenerator generator=((BiomeBetweenlands)biome).getBiomeGenerator();        if (!this.initializedGenerators.contains(generator))         generator.initializeGenerators(this.seed);        if (!this.initializedNoiseGenerators.contains(generator)) {          generator.generateNoise(chunkZ,chunkX);          this.initializedNoiseGenerators.add(generator);        }        generator.runBiomeFeatures(chunkZ * 16 + z,chunkX * 16 + x,z,x,baseBlockNoise,primer,this,biomesIn,terrainBiomeWeight,this.terrainBiomeWeights,EnumGeneratorPass.PRE_REPLACE_BIOME_BLOCKS);        generator.replaceBiomeBlocks(chunkZ * 16 + z,chunkX * 16 + x,z,x,baseBlockNoise,this.rand,this.seed,primer,this,biomesIn,terrainBiomeWeight,this.terrainBiomeWeights);        generator.runBiomeFeatures(chunkZ * 16 + z,chunkX * 16 + x,z,x,baseBlockNoise,primer,this,biomesIn,terrainBiomeWeight,this.terrainBiomeWeights,EnumGeneratorPass.POST_REPLACE_BIOME_BLOCKS);      } else {        biome.genTerrainBlocks(this.worldObj,this.rand,primer,chunkX * 16 + x,chunkZ * 16 + z,baseBlockNoise);      }    }  }}  }
class C{  public static Calendar convertStrToCalendar(String formattedTime){  Calendar cal=Calendar.getInstance();  try {    SimpleDateFormat sdf=new SimpleDateFormat(ScheduleInfo.FULL_DAYTIME_FORMAT);    cal.setTime(sdf.parse(formattedTime));  } catch (  Exception e) {    log.info(e.getMessage());  }  return cal;}  }
class C{  public void testBuildTextFromElement(){  LOGGER.debug("buildTextFromElement");  Element element=null;  CompleteTextElementBuilder instance=new CompleteTextElementBuilder();  String expResult="";}  }
class C{  public Element first(){  return (state != null) ? state.first() : null;}  }
class C{  private List _getByPositionLess(List elements,int rvalue){  if (rvalue > elements.size()) {    return elements;  }  if (rvalue < 0) {    return null;  }  List array;  if (elements instanceof Vector) {    array=new Vector();  } else {    array=new ArrayList();  }  for (int i=0; i < rvalue; i++) {    array.add(elements.get(i));  }  return array;}  }
class C{  @Override public boolean isHidden(){  return has(ATTR_HIDDEN);}  }
class C{  public static Coords nextHex(Coords current,IdealHex iSrc,IdealHex iDest,int[] directions){  for (  int direction : directions) {    Coords testing=current.translated(direction);    if (IdealHex.get(testing).isIntersectedBy(iSrc.cx,iSrc.cy,iDest.cx,iDest.cy)) {      return testing;    }  }  throw new RuntimeException("Couldn't find the next hex!");}  }
class C{  public double[] countsForInstance(Instance instance) throws Exception {  double[] fCounts=new double[m_NumClasses];  for (int iClass=0; iClass < m_NumClasses; iClass++) {    fCounts[iClass]=0.0;  }  for (int iClass=0; iClass < m_NumClasses; iClass++) {    double fCount=0;    for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {      double iCPT=0;      for (int iParent=0; iParent < m_ParentSets[iAttribute].getNrOfParents(); iParent++) {        int nParent=m_ParentSets[iAttribute].getParent(iParent);        if (nParent == m_Instances.classIndex()) {          iCPT=iCPT * m_NumClasses + iClass;        } else {          iCPT=iCPT * m_Instances.attribute(nParent).numValues() + instance.value(nParent);        }      }      if (iAttribute == m_Instances.classIndex()) {        fCount+=((DiscreteEstimatorBayes)m_Distributions[iAttribute][(int)iCPT]).getCount(iClass);      } else {        fCount+=((DiscreteEstimatorBayes)m_Distributions[iAttribute][(int)iCPT]).getCount(instance.value(iAttribute));      }    }    fCounts[iClass]+=fCount;  }  return fCounts;}  }
class C{  public void testMoveFileSourceAndDestinationMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,null,null);  igfs.rename(FILE,SUBDIR_NEW);  checkExist(igfs,DIR,SUBDIR,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  int[] decodeEnd(BitArray row) throws NotFoundException {  row.reverse();  try {    int endStart=skipWhiteSpace(row);    int[] endPattern=findGuardPattern(row,endStart,END_PATTERN_REVERSED);    validateQuietZone(row,endPattern[0]);    int temp=endPattern[0];    endPattern[0]=row.getSize() - endPattern[1];    endPattern[1]=row.getSize() - temp;    return endPattern;  }  finally {    row.reverse();  }}  }
class C{  public List<V> replace(K key,V value){  List<V> replaced=removeAll(key);  if (value != null) {    put(key,value);  }  return replaced;}  }
class C{  public AutoColumnGridLayoutManager(@NonNull Context context,int gridItemWidth){  super(context,1);  requestedColumnWidth=gridItemWidth;}  }
class C{  public void engineNextBytes(byte[] bytes){  fillData(bytes);}  }
class C{  private boolean shouldAddSyntheticSemicolon(CustomInternalN4JSParser previousParser,int lastTokenIndex,CommonToken lastNonHiddenToken){  return lastTokenIndex != lastNonHiddenToken.getTokenIndex() && previousParser.getState().lastErrorIndex != lastNonHiddenToken.getTokenIndex();}  }
class C{  @Override public void onMouseDown(MouseDownEvent event){  if (!enabled) {    return;  }  if (selected) {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanelSelectedDown());  } else {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanelDown());  }}  }
class C{  public long indexVersion(){  return indexVersion;}  }
class C{  public static int testIfRead4Snippet(int a){  if (a > 0) {    int res=container.a;    container.a=0x20;    return res;  } else {    return 0x10;  }}  }
class C{  public void removeValueFromDomain(Variable var,Object value){  Domain currDomain=getDomain(var);  List<Object> values=new ArrayList<Object>(currDomain.size());  for (  Object v : currDomain)   if (!v.equals(value))   values.add(v);  setDomain(var,new Domain(values));}  }
class C{  public synchronized float dotProduct(IFeatureVector fv){  float res=0.0f;  if (fv.getMaxIdx() >= size) {    for (int i=0; i < fv.getNumActiveFeatures(); i++) {      if (fv.getIdx(i) < size) {        res+=u[fv.getIdx(i)] * fv.getValue(i);      }    }  } else {    for (int i=0; i < fv.getNumActiveFeatures(); i++) {      res+=u[fv.getIdx(i)] * fv.getValue(i);    }  }  return res;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!MobileEnv.initWeb(config))   throw new ServletException("WMenu.init");}  }
class C{  public void normalize(){  throw new UnsupportedOperationException("There is no internal data structure to normalize.");}  }
class C{  public static void uiImpl(){  UIManager.put("InternalFrame.borderColor",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("InternalFrame.minimizeIconBackground",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("InternalFrame.icon",__IconFactory__.getInstance().getInternalFrameIcon());  UIManager.put("InternalFrame.iconifyIcon",__IconFactory__.getInstance().getInternalIconfiedIcon());  UIManager.put("InternalFrame.minimizeIcon",__IconFactory__.getInstance().getInternalFrameMinIcon());  UIManager.put("InternalFrame.maximizeIcon",__IconFactory__.getInstance().getInternalFrameMaxIcon());  UIManager.put("InternalFrame.closeIcon",__IconFactory__.getInstance().getInternalFrameCloseIcon());  UIManager.put("InternalFrameUI",org.jb2011.lnf.beautyeye.ch10_internalframe.BEInternalFrameUI.class.getName());  Object internalFrameBorder=new BorderUIResource(new BEShadowBorder());  UIManager.put("InternalFrame.border",internalFrameBorder);  UIManager.put("InternalFrame.paletteBorder",internalFrameBorder);  UIManager.put("InternalFrame.optionDialogBorder",internalFrameBorder);  UIManager.put("Desktop.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("DesktopIcon.width",180);  UIManager.put("DesktopIconUI",org.jb2011.lnf.beautyeye.ch10_internalframe.BEDesktopIconUI.class.getName());}  }
class C{  private static void assertAuthHeader(Request request,String signature){  assertThat(request.header("Authorization")).isEqualTo("OAuth " + "oauth_consumer_key=\"xvz1evFS4wEEPTGEFPHBog\", " + "oauth_nonce=\"kYjzVBB8Y0ZFabxSWbWovY3uYSQ2pTgmZeNu2VS4cg\", "+ "oauth_signature=\"" + signature + "\", "+ "oauth_signature_method=\"HMAC-SHA1\", "+ "oauth_timestamp=\"1318622958\", "+ "oauth_token=\"370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb\", "+ "oauth_version=\"1.0\"");}  }
class C{  public AssociationRules(List<AssociationRule> rules){  this(rules,"Unknown");}  }
class C{  public void testConstrDoubleMathContext(){  double a=732546982374982347892379283571094797.287346782359284756;  int precision=21;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="732546982374982285074";  int resScale=-15;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());  BigDecimal bd;  mc=new MathContext(9,RoundingMode.UP);  bd=new BigDecimal(123456789.125,mc);  assertEquals("incorrect value","123456790",bd.toString());  bd=new BigDecimal(-123456789.125,mc);  assertEquals("incorrect value","-123456790",bd.toString());  mc=new MathContext(8,RoundingMode.DOWN);  bd=new BigDecimal(123456789.125,mc);  assertEquals("incorrect value","1.2345678E+8",bd.toString());  bd=new BigDecimal(-123456789.125,mc);  assertEquals("incorrect value","-1.2345678E+8",bd.toString());  mc=new MathContext(10,RoundingMode.CEILING);  bd=new BigDecimal(123456789.125,mc);  assertEquals("incorrect value","123456789.2",bd.toString());  bd=new BigDecimal(-123456789.125,mc);  assertEquals("incorrect value","-123456789.1",bd.toString());  mc=new MathContext(8,RoundingMode.FLOOR);  bd=new BigDecimal(123456789.125,mc);  assertEquals("incorrect value","1.2345678E+8",bd.toString());  bd=new BigDecimal(-123456789.125,mc);  assertEquals("incorrect value","-1.2345679E+8",bd.toString());  mc=new MathContext(11,RoundingMode.HALF_EVEN);  bd=new BigDecimal("123456789.125",mc);  assertEquals("incorrect value","123456789.12",bd.toString());  bd=new BigDecimal(-123456789.135,mc);  assertEquals("incorrect value","-123456789.14",bd.toString());  mc=new MathContext(11,RoundingMode.HALF_UP);  bd=new BigDecimal("123456789.125",mc);  assertEquals("incorrect value","123456789.13",bd.toString());  mc=new MathContext(11,RoundingMode.HALF_DOWN);  bd=new BigDecimal("123456789.125",mc);  assertEquals("incorrect value","123456789.12",bd.toString());  mc=new MathContext(8,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(123456789.125,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(-123456789.125,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }}  }
class C{  private void expandTo(int wordIndex){  int wordsRequired=wordIndex + 1;  if (wordsInUse < wordsRequired) {    ensureCapacity(wordsRequired);    wordsInUse=wordsRequired;  }}  }
class C{  public TypedListGeneratorBuilder<T> ofType(Collector<T,List<T>,List<T>> collector){  return new TypedListGeneratorBuilder<T>(source,collector);}  }
class C{  public BatchOperation(BatchOperationType type){  this.type=type;}  }
class C{  public Long hsetnx(final byte[] key,final byte[] field,final byte[] value){  checkIsInMulti();  client.hsetnx(key,field,value);  return client.getIntegerReply();}  }
class C{  public DateTimeFormatterBuilder appendYearOfCentury(int minDigits,int maxDigits){  return appendDecimal(DateTimeFieldType.yearOfCentury(),minDigits,maxDigits);}  }
class C{  private void testCombined(int szx,boolean m,int num){  BlockOption block=new BlockOption(szx,m,num);  BlockOption copy=new BlockOption(block.getValue());  assertEquals(block.getSzx(),copy.getSzx());  assertEquals(block.isM(),copy.isM());  assertEquals(block.getNum(),copy.getNum());  System.out.println(Utils.toHexString(block.getValue()) + " == " + "(szx="+ block.getSzx()+ ", m="+ block.isM()+ ", num="+ block.getNum()+ ")");}  }
class C{  private static void parseCommandLine(String[] args){  int i=0;  while (i < args.length - 1) {    if (args[i].equals("-c")) {      serverIni=args[i + 1];    }    i++;  }}  }
class C{  public BubbleActions withInterpolator(Interpolator interpolator){  overlay.setInterpolator(interpolator);  return this;}  }
class C{  public static boolean isNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;}  }
class C{  public DefaultImportSpecifier createDefaultImportSpecifier(){  DefaultImportSpecifierImpl defaultImportSpecifier=new DefaultImportSpecifierImpl();  return defaultImportSpecifier;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static <T>ObjectAnimator ofArgb(T target,Property<T,Integer> property,int... values){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    return ObjectAnimatorCompatLollipop.ofArgb(target,property,values);  }  return ObjectAnimatorCompatBase.ofArgb(target,property,values);}  }
class C{  public void testDefaultOperatorWithMm() throws Exception {  assertQ("test default operator with mm (AND + 0% => 0 hits)",req("q","(line notfound) OR notfound","qf","text","q.op","AND","mm","0%","defType","edismax"),"*[count(//doc)=0]");  assertQ("test default operator with mm (OR + 0% => 1 hit)",req("q","line notfound OR notfound","qf","text","q.op","OR","mm","0%","defType","edismax"),"*[count(//doc)=1]");  assertQ("test default operator with mm (OR + 100% => 0 hits)",req("q","line notfound OR notfound","qf","text","q.op","OR","mm","100%","defType","edismax"),"*[count(//doc)=0]");  assertQ("test default operator with mm (OR + 35% => 1 hit)",req("q","line notfound notfound2 OR notfound","qf","text","q.op","OR","mm","35%","defType","edismax"),"*[count(//doc)=1]");  assertQ("test default operator with mm (OR + 75% => 0 hits)",req("q","line notfound notfound2 OR notfound3","qf","text","q.op","OR","mm","75%","defType","edismax"),"*[count(//doc)=0]");  assertQ("test default operator with mm (AND + 0% => 1 hit)",req("q","(line enemy) OR notfound","qf","text","q.op","AND","mm","0%","defType","edismax"),"*[count(//doc)=1]");  assertQ("test default operator with mm (AND + 50% => 1 hit)",req("q","(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)","qf","text","q.op","AND","mm","50%","defType","edismax"),"*[count(//doc)=1]");  assertQ("test default operator with mm (AND + 75% => 0 hits)",req("q","(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)","qf","text","q.op","AND","mm","75%","defType","edismax"),"*[count(//doc)=0]");}  }
class C{  public RequestResponseGUI_NB(){  initComponents();}  }
class C{  public void testMixed() throws IOException {  ObjectMapper om=new ObjectMapper();  String JSON="{\"node\" : { \"a\" : 3 }, \"x\" : 9 }";  Bean bean=om.readValue(JSON,Bean.class);  assertEquals(9,bean._x);  JsonNode n=bean._node;  assertNotNull(n);  assertEquals(1,n.size());  ObjectNode on=(ObjectNode)n;  assertEquals(3,on.get("a").getIntValue());}  }
class C{  public GeoRssWhere(Double lat,Double lon){  this(new GmlPoint(lat,lon));}  }
class C{  public Edited(){  super(KEY);}  }
class C{  public void testValueOfDocType13() throws Exception {  DocType docType=new DocType("application",ApplicationXmlVersion.V1_3.getPublicId(),ApplicationXmlVersion.V1_3.getSystemId());  assertEquals(ApplicationXmlVersion.V1_3,ApplicationXmlVersion.valueOf(docType));}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  Object processCHAR(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      if ((avt.isSimple()) && (value.length() != 1)) {        handleError(handler,XSLTErrorResources.INVALID_TCHAR,new Object[]{name,value},null);        return null;      }      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    if (value.length() != 1) {      handleError(handler,XSLTErrorResources.INVALID_TCHAR,new Object[]{name,value},null);      return null;    }    return new Character(value.charAt(0));  }}  }
class C{  public static boolean equals(long[] a,long[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length) {    return false;  }  for (int i=0; i < length; i++) {    if (a[i] != a2[i])     return false;  }  return true;}  }
class C{  public Vertex discover(Vertex source,Vertex vertex,Vertex vertex2){  return discover(source,vertex,vertex2,null,null,null);}  }
class C{  public OMPoly(int[] xypoints){  super(RENDERTYPE_XY,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setLocation(xypoints);}  }
class C{  public static StringBuffer encodePath(StringBuffer buf,String path){  if (buf == null) {    loop:     for (int i=0; i < path.length(); i++) {      char c=path.charAt(i);switch (c) {case '%':case '?':case ';':case '#':case ' ':        buf=new StringBuffer(path.length() << 1);      break loop;  }}if (buf == null) return null;}synchronized (buf) {for (int i=0; i < path.length(); i++) {  char c=path.charAt(i);switch (c) {case '%':    buf.append("%25");  continue;case '?':buf.append("%3F");continue;case ';':buf.append("%3B");continue;case '#':buf.append("%23");continue;case ' ':buf.append("%20");continue;default :buf.append(c);continue;}}}return buf;}  }
class C{  public PlayerMinedNumberOfItemsCondition(int number,String... items){  itemMinedList=new ArrayList<String>();  if (items != null) {    for (    String item : items) {      itemMinedList.add(item);    }  }  quantity=number;}  }
class C{  public static Border createRoundBorder(int arcWidth,int arcHeight){  Border b=new Border();  b.type=TYPE_ROUNDED;  b.themeColors=true;  b.arcHeight=arcHeight;  b.arcWidth=arcWidth;  return b;}  }
class C{  protected Feed(ElementKey<?,? extends Feed> key){  super(key);  feedState=new FeedState();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.ENUM_SOURCE__MODEL:    return model != null;}return super.eIsSet(featureID);}  }
class C{  public void watch(TOMMessage request){  rwLock.writeLock().lock();  watched.add(request);  if (watched.size() >= 1 && enabled)   startTimer();  rwLock.writeLock().unlock();}  }
class C{  private static boolean compareReflective(final String val,final int comparator,final Object attr){  final Class<?> clazz=attr.getClass();  Object typedVal=null;  try {    final Constructor<?> constr=clazz.getConstructor(String.class);    typedVal=constr.newInstance(new Object[]{val});    if (attr instanceof Comparable) {      return compareTyped(typedVal,comparator,(Comparable<?>)attr);    } else {      return typedVal.equals(attr);    }  } catch (  final Exception didNotWork) {    return false;  }}  }
class C{  public void denormalize(int minLevel,int levelMod,ArrayList<S2CellId> output){  output.clear();  output.ensureCapacity(size());  for (  S2CellId id : this) {    int level=id.level();    int newLevel=Math.max(minLevel,level);    if (levelMod > 1) {      newLevel+=(S2CellId.MAX_LEVEL - (newLevel - minLevel)) % levelMod;      newLevel=Math.min(S2CellId.MAX_LEVEL,newLevel);    }    if (newLevel == level) {      output.add(id);    } else {      S2CellId end=id.childEnd(newLevel);      for (id=id.childBegin(newLevel); !id.equals(end); id=id.next()) {        output.add(id);      }    }  }}  }
class C{  public MimSearchEditor(PurifyRunner runner){  this(runner,"Result MAG");}  }
class C{  private Id<TransitStopFacility> createChildStopFacilityId(String stopIdStr,String refLinkId){  return Id.create(getParentId(stopIdStr) + SUFFIX + refLinkId,TransitStopFacility.class);}  }
class C{  public static MessageService instance(){  return INSTANCE;}  }
class C{  public void shuffle(PApplet sketch){  int num=count;  while (num > 1) {    int value=(int)sketch.random(num);    num--;    float temp=data[num];    data[num]=data[value];    data[value]=temp;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SerializationException(String message){  super(message);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (namespace_1: ");  result.append(namespace_1);  result.append(')');  return result.toString();}  }
class C{  public E poll(){  return pollFirst();}  }
class C{  protected Size2D arrangeNN(BlockContainer container,Graphics2D g2){  double x=0.0;  double width=0.0;  double maxHeight=0.0;  List blocks=container.getBlocks();  int blockCount=blocks.size();  if (blockCount > 0) {    Size2D[] sizes=new Size2D[blocks.size()];    for (int i=0; i < blocks.size(); i++) {      Block block=(Block)blocks.get(i);      sizes[i]=block.arrange(g2,RectangleConstraint.NONE);      width=width + sizes[i].getWidth();      maxHeight=Math.max(sizes[i].height,maxHeight);      block.setBounds(new Rectangle2D.Double(x,0.0,sizes[i].width,sizes[i].height));      x=x + sizes[i].width + this.horizontalGap;    }    if (blockCount > 1) {      width=width + this.horizontalGap * (blockCount - 1);    }    if (this.verticalAlignment != VerticalAlignment.TOP) {      for (int i=0; i < blocks.size(); i++) {        if (this.verticalAlignment == VerticalAlignment.CENTER) {        } else         if (this.verticalAlignment == VerticalAlignment.BOTTOM) {        }      }    }  }  return new Size2D(width,maxHeight);}  }
class C{  public synchronized PerfRate cloneAndReset(){  PerfRate rc=new PerfRate();  rc.totalCount=totalCount;  rc.count=count;  rc.startTime=startTime;  count=0;  startTime=System.currentTimeMillis();  return rc;}  }
class C{  protected void shift(int cnt){  pos+=cnt;}  }
class C{  public static double minus(double left,double right){  return left - right;}  }
class C{  public int hashCode(){  if (destroyed) {    throw new IllegalStateException("This credential is " + "no longer valid");  }  return 1;}  }
class C{  public static String toString(int type,String defaultValue){switch (type) {case TYPE_ANY:    return "any";case TYPE_ARRAY:  return "array";case TYPE_BASE64:return "base64";case TYPE_BINARY:return "binary";case TYPE_BOOLEAN:return "boolean";case TYPE_DATETIME:return "datetime";case TYPE_GUID:return "guid";case TYPE_IMAGE:return "image";case TYPE_NUMERIC:return "numeric";case TYPE_QUERY:return "query";case TYPE_QUERY_COLUMN:return "querycolumn";case TYPE_STRING:return "string";case TYPE_STRUCT:return "struct";case TYPE_TIMESPAN:return "timespan";case TYPE_UNDEFINED:return "any";case TYPE_UNKNOW:return "any";case TYPE_UUID:return "uuid";case TYPE_VARIABLE_NAME:return "variablename";case TYPE_VARIABLE_STRING:return "variablestring";case TYPE_VOID:return "void";case TYPE_XML:return "xml";case TYPE_LOCALE:return "locale";case TYPE_TIMEZONE:return "timezone";case TYPE_FUNCTION:return "function";}return defaultValue;}  }
class C{  public void unlockOrientation(){  impl.unlockOrientation();}  }
class C{  public boolean isSecureConnection(){  return secureConnection;}  }
class C{  public void print(double x){  out.print(x);  out.flush();}  }
class C{  public MesosEvent(Object source){  super(source);}  }
class C{  public static int monthFirstDayOffset(long monthMillis){  if (isNotTime(monthMillis)) {    return 0;  }  DateOnlyCalendar calendar=DateOnlyCalendar.fromTime(monthMillis);  int offset=calendar.get(Calendar.DAY_OF_WEEK) - calendar.getFirstDayOfWeek();  if (offset < 0) {    offset=7 + offset;  }  calendar.recycle();  return offset;}  }
class C{  public HTMLFrameHyperlinkEvent(Object source,EventType type,URL targetURL,String desc,String targetFrame){  super(source,type,targetURL,desc);  this.targetFrame=targetFrame;}  }
class C{  private void pushDeleteMessage(long start,long end,long minage,Metadata metadata) throws IOException {  if (null != metadata) {    KafkaDataMessage msg=new KafkaDataMessage();    msg.setType(KafkaDataMessageType.DELETE);    msg.setDeletionStartTimestamp(start);    msg.setDeletionEndTimestamp(end);    msg.setDeletionMinAge(minage);    msg.setClassId(metadata.getClassId());    msg.setLabelsId(metadata.getLabelsId());    if (this.sendMetadataOnDelete) {      msg.setMetadata(metadata);    }    sendDataMessage(msg);  } else {    sendDataMessage(null);  }}  }
class C{  public void put(byte dataValue,String[] mtlNames){  if (dataValue < 0 || dataValue > 15)   throw new IllegalArgumentException("dataValue must be between 0 and 15");  if (mtlNames == null || mtlNames.length == 0)   throw new IllegalArgumentException("mtlNames must not be null or empty");  dataMaterials[dataValue]=mtlNames;}  }
class C{  public void addEnum(String value,Enum e){  enumToValueMap.put(e,value);  Set<Enum> enums;  if (valueToEnumMap.containsKey(value)) {    enums=valueToEnumMap.get(value);  } else {    enums=new HashSet<Enum>();    valueToEnumMap.put(value,enums);  }  enums.add(e);}  }
class C{  private void createLogDir(){  File file;  boolean mkOk;  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    file=new File(LOG_PATH_SDCARD_DIR);    if (!file.isDirectory()) {      mkOk=file.mkdirs();      if (!mkOk) {        return;      }    }  }}  }
class C{  public void lock(boolean shared) throws IgniteCheckedException {  if (fileLock != null)   throw new IgniteCheckedException("Already locked [lockFile=" + file + ']');  try {    fileLock=raFile.getChannel().tryLock(0,Long.MAX_VALUE,shared);    if (fileLock == null)     throw new IgniteCheckedException("Failed to get exclusive lock on lock file [lockFile=" + file + ']');  } catch (  IOException|OverlappingFileLockException e) {    throw new IgniteCheckedException("Failed to get exclusive lock on lock file [lockFile=" + file + ']',e);  }}  }
class C{  public VoltageScorer(Hypergraph<V,E> g,Function<? super E,? extends Number> edge_weights,Map<V,? extends Number> source_voltages,Collection<V> sinks){  super(g,edge_weights);  this.source_voltages=source_voltages;  this.sinks=sinks;  initialize();}  }
class C{  public void populateDAO(Object value,int row,int column){  final TradelogSummary element=getData().getTradelogSummary().get(row);switch (column) {case 1:{      element.setPeriod((String)value);      break;    }case 2:{    element.setBattingAverage(((Percent)value).getBigDecimalValue());    break;  }case 3:{  element.setSimpleSharpeRatio(((Decimal)value).getBigDecimalValue());  break;}case 4:{element.setGrossProfitLoss(((Money)value).getBigDecimalValue());break;}case 5:{element.setQuantity(((Quantity)value).getIntegerValue());break;}case 6:{element.setCommission(((Money)value).getBigDecimalValue());break;}case 7:{element.setNetProfitLoss(((Money)value).getBigDecimalValue());break;}case 8:{element.setWinCount(((Quantity)value).getIntegerValue());break;}case 9:{element.setProfitAmount(((Money)value).getBigDecimalValue());break;}case 10:{element.setLossCount(((Quantity)value).getIntegerValue());break;}case 11:{element.setLossAmount(((Money)value).getBigDecimalValue());break;}case 12:{element.setPositionCount(((Quantity)value).getIntegerValue());break;}case 13:{element.setTradestrategyCount(((Quantity)value).getIntegerValue());break;}default :{}}}  }
class C{  public boolean match(final ServiceReference<?> reference){  try {    return match(((ServiceReferenceImpl)reference).properties);  } catch (  final ClassCastException e) {    final Dictionary<String,Object> dict=new Hashtable<String,Object>();    final String[] keys=reference.getPropertyKeys();    for (int i=0; i < keys.length; i++) {      dict.put(keys[i],reference.getProperty(keys[i]));    }    return match(dict);  }}  }
class C{  private void registerDefaultJaxrsApp(ConfigurableListableBeanFactory beanFactory){  BeanDefinitionRegistry registry=(BeanDefinitionRegistry)beanFactory;  GenericBeanDefinition applicationServletBean=createApplicationServlet(Application.class,"/");  registry.registerBeanDefinition(Application.class.getName(),applicationServletBean);}  }
class C{  public ContentLanguageParser(String contentLanguage){  super(contentLanguage);}  }
class C{  public void compress(byte[] bytes,OutputStream os){  compress(bytes,os);}  }
class C{  public Task<FileSnapshotRestRep> removeShare(URI id,String shareName){  return deleteTask(getSharesUrl() + "/{shareName}",id,shareName);}  }
class C{  public MyComparableObjectSeries(Comparable key){  super(key);}  }
class C{  public boolean isNegative(){  return isNegative;}  }
class C{  private PDFColorSpace parseColorSpace(PDFObject csobj) throws IOException {  if (csobj == null) {    return state.fillCS;  }  return PDFColorSpace.getColorSpace(csobj,resources);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void killAllStrategyWorkersForTradestrategy(final Tradestrategy tradestrategy){  String key=tradestrategy.getStrategy().getClassName() + tradestrategy.getIdTradeStrategy();  if (isStrategyWorkerRunning(key)) {    killStrategyWorker(key);  }  if (tradestrategy.getStrategy().hasStrategyManager()) {    key=tradestrategy.getStrategy().getStrategyManager().getClassName() + tradestrategy.getIdTradeStrategy();    if (isStrategyWorkerRunning(key)) {      killStrategyWorker(key);    }  }}  }
class C{  private void printResults(Range sizes,Range parallelism,long[][] times){  System.out.println("Time in milliseconds. Y-axis: number of elements. X-axis parallelism used.");  long[] sums=new long[times[0].length];  System.out.format("%8s  ","");  for (int i=0; i < times[0].length; i++) {    System.out.format("%4d ",parallelism.get(i));  }  System.out.println("");  for (int size=0; size < sizes.getIterations(); size++) {    System.out.format("%8d: ",sizes.get(size));    for (int i=0; i < times[size].length; i++) {      sums[i]+=times[size][i];      System.out.format("%4d ",times[size][i]);    }    System.out.println("");  }  System.out.format("%8s: ","Total");  for (  long sum : sums) {    System.out.format("%4d ",sum);  }  System.out.println("");}  }
class C{  public JCaret(final Color caretColor){  this(DEFAULT_BLINK_TIME,caretColor);}  }
class C{  public boolean equals(Object object){  if (!(object instanceof FXGVersion))   return false;  return equalTo((FXGVersion)object);}  }
class C{  private void titleTextModified(){  setFindEnablement();}  }
class C{  public String toJsonString(){  try {    final ObjectMapper mapper=new ObjectMapper(new JsonPrettyPrinterFactory());    return mapper.writeValueAsString(this);  } catch (  final Exception e) {    throw new RuntimeException("Error while serializing to JSON.",e);  }}  }
class C{  public void stop(){  running.set(false);  monitorThread=null;}  }
class C{  public int sendBufferSize(){  return reader.getInteger(SEND_BUFFER_SIZE,DEFAULT_SEND_BUFFER_SIZE);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private List<IpLeaseService.State> parseIpLeaseServiceQueryResults(QueryTask result){  List<IpLeaseService.State> ipLeaseList=new LinkedList<>();  if (result != null && result.results != null && result.results.documentCount > 0) {    for (    Map.Entry<String,Object> doc : result.results.documents.entrySet()) {      ipLeaseList.add(Utils.fromJson(doc.getValue(),IpLeaseService.State.class));    }  }  return ipLeaseList;}  }
class C{  public AsyncMessage(){  requestFileName="async.query";  responseFile="getstate.answer";}  }
class C{  public static Read from(String streamName,InitialPositionInStream initialPosition){  return new Read(streamName,new StartingPoint(checkNotNull(initialPosition,"initialPosition")));}  }
class C{  @Override public void close(){  assertIsOpen();  flush();  compactor.close();  segments.close();  open=false;}  }
class C{  @NonNull public DividerAdapterBuilder resource(@LayoutRes int resource){  return view(asViewFactory(resource));}  }
class C{  private static String parseUsername(String authorizationHeader){  String decodedAuthorizationHeader=decodeHeader(authorizationHeader);  int delimiterIndex=decodedAuthorizationHeader.indexOf(':');  if (delimiterIndex > -1) {    return decodedAuthorizationHeader.substring(0,delimiterIndex);  } else {    return decodedAuthorizationHeader;  }}  }
class C{  private static void launchElevatedCreation(final String regeditFilePath){  try {    final String[] cmd={"cmd","/C","regedit","/s",regeditFilePath};    final ProcessBuilder processBuilder=new ProcessBuilder(cmd);    final Process process=processBuilder.start();    process.waitFor();  } catch (  IOException e) {    logger.warn("Running regedit encountered an IOException: {}",e.getMessage());  }catch (  Exception e) {    logger.warn("Waiting for the process to execute resulted in an error: " + e.getMessage());  }}  }
class C{  protected long singlePhaseCommit(final TxState state) throws Exception {  if (!state.lock.isHeldByCurrentThread())   throw new IllegalMonitorStateException();  final UUID[] uuids=state.getDataServiceUUIDs();  if (uuids.length != 1)   throw new AssertionError();  final UUID serviceUUID=uuids[0];  final IDataService dataService=getFederation().getDataService(serviceUUID);  try {    final long commitTime=dataService.singlePhaseCommit(state.tx);    state.setRunState(RunState.Committed);    return commitTime;  } catch (  Throwable t) {    state.setRunState(RunState.Aborted);    throw new RuntimeException(t);  }}  }
class C{  public Y le(X value){  return add(" <= ?",value);}  }
class C{  public void showDialog(Project project){  this.project=project;  view.setCheckoutButEnableState(false);  view.showDialog();}  }
class C{  public ListIterator listIterator(){  return new RLMIterator();}  }
class C{  public void init(){}  }
class C{  File createDir(File dir,String... entries) throws Exception {  if (!dir.mkdirs())   throw new Exception("cannot create directories " + dir);  for (  String e : entries) {    writeFile(new File(dir,getPathForDirEntry(e)),getBodyForEntry(e));  }  return dir;}  }
class C{  public CF9(int numberOfVariables){  super(numberOfVariables,3,1);}  }
class C{  public void close(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        if (!mDiskLruCache.isClosed()) {          mDiskLruCache.close();          mDiskLruCache=null;          if (BuildConfig.DEBUG) {            Log.d(TAG,"Disk cache closed");          }        }      } catch (      IOException e) {        Log.e(TAG,"close - " + e);      }    }  }}  }
class C{  public X509Name(boolean reverse,String dirName,X509NameEntryConverter converter){  this(reverse,DefaultLookUp,dirName,converter);}  }
class C{  private static boolean checkMessageStripped(String expected,String result){  int cxr=result.lastIndexOf(':');  int cxe=expected.lastIndexOf(':');  if (cxr < 0 || cxe < 0) {    return false;  }  String resultStripped=result.substring(cxr + 1).trim();  String expectedStripped=expected.substring(cxe + 1).trim();  return resultStripped.equals(expectedStripped);}  }
class C{  private final int rookBonus(Position pos){  int score=0;  final long wPawns=pos.pieceTypeBB[Piece.WPAWN];  final long bPawns=pos.pieceTypeBB[Piece.BPAWN];  final long occupied=pos.whiteBB | pos.blackBB;  long m=pos.pieceTypeBB[Piece.WROOK];  while (m != 0) {    int sq=BitBoard.numberOfTrailingZeros(m);    final int x=Position.getX(sq);    if ((wPawns & BitBoard.maskFile[x]) == 0) {      score+=(bPawns & BitBoard.maskFile[x]) == 0 ? 25 : 12;    }    long atk=BitBoard.rookAttacks(sq,occupied);    wAttacksBB|=atk;    score+=rookMobScore[Long.bitCount(atk & ~(pos.whiteBB | bPawnAttacks))];    if ((atk & bKingZone) != 0)     bKingAttacks+=Long.bitCount(atk & bKingZone);    m&=m - 1;  }  long r7=(pos.pieceTypeBB[Piece.WROOK] >>> 48) & 0x00ffL;  if (((r7 & (r7 - 1)) != 0) && ((pos.pieceTypeBB[Piece.BKING] & 0xff00000000000000L) != 0))   score+=30;  m=pos.pieceTypeBB[Piece.BROOK];  while (m != 0) {    int sq=BitBoard.numberOfTrailingZeros(m);    final int x=Position.getX(sq);    if ((bPawns & BitBoard.maskFile[x]) == 0) {      score-=(wPawns & BitBoard.maskFile[x]) == 0 ? 25 : 12;    }    long atk=BitBoard.rookAttacks(sq,occupied);    bAttacksBB|=atk;    score-=rookMobScore[Long.bitCount(atk & ~(pos.blackBB | wPawnAttacks))];    if ((atk & wKingZone) != 0)     wKingAttacks+=Long.bitCount(atk & wKingZone);    m&=m - 1;  }  r7=pos.pieceTypeBB[Piece.BROOK] & 0xff00L;  if (((r7 & (r7 - 1)) != 0) && ((pos.pieceTypeBB[Piece.WKING] & 0xffL) != 0))   score-=30;  return score;}  }
class C{  public void testCFII_ServerClosedAfterFinish_NonBlock() throws Exception {  connectServerNonBlock();  ensureServerClosed();  assertTrue(this.channel1.isOpen());  this.channel1.close();  statusChannelClosed();}  }
class C{  private void updateTCPEndPointDetails(Map<String,Object> keyMap,StoragePort port,CIMInstance tcpPointInstance,String portInstanceID) throws IOException {  if (null != port) {    port.setTcpPortNumber(Long.parseLong(getCIMPropertyValue(tcpPointInstance,PORTNUMBER)));    _dbClient.persistObject(port);  }}  }
class C{  public boolean isDescending(){  return descending;}  }
class C{  public ToStringBuilder append(String fieldName,Object obj,boolean fullDetail){  style.append(buffer,fieldName,obj,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public void test_qname_escape_01b() throws MalformedQueryException {  if (!BigdataStatics.runKnownBadTests) {    return;  }  final String query="PREFIX og: <http://ogp.me/ns#>\n" + "SELECT ( og:audio\\:title as ?x )" + "WHERE {?page og:foo ?title}";  parseOperation(query);}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXECUTION;}  }
class C{  private void sendNotification(final String text){  if (!"NONE".equals(text)) {    this.getRemotePlayer().reportMessage(text,text);  }}  }
class C{  @Override public boolean showVertexLabelsDefault(){  return true;}  }
class C{  @Override public void testConfigureManager(){  configuration.configure(container);  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/webapps/manager"));  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/webapps/host-manager"));}  }
class C{  protected void createGrid(){  grid.clear();  for (int r=0; r <= rows; ++r) {    grid.add(new LineSegment(leftMargin,graphHeight - (bottomMargin + r * pixelsPerYTic),leftMargin + width,graphHeight - (bottomMargin + r * pixelsPerYTic)));  }  for (int c=0; c <= cols; ++c) {    grid.add(new LineSegment(leftMargin + c * pixelsPerXTic,graphHeight - bottomMargin,leftMargin + c * pixelsPerXTic,graphHeight - (bottomMargin + height)));  }}  }
class C{  public static StringBuilder stripXML(final String raw_data,final boolean isXMLExtraction){  if (raw_data == null) {    return null;  } else {    return stripXML(new StringBuilder(raw_data),isXMLExtraction);  }}  }
class C{  private void create(){  DocumentBuilderFactory docBFac;  DocumentBuilder docBuild;  try {    docBFac=DocumentBuilderFactory.newInstance();    docBuild=docBFac.newDocumentBuilder();    doc=docBuild.newDocument();  } catch (  Exception ex) {    ex.printStackTrace();    return;  }  rootElement=doc.createElement("account-requests");  doc.appendChild(rootElement);  nonValidatedRequestsElement=doc.createElement("nonvalidated-requests");  validatedRequestsElement=doc.createElement("validated-requests");  rootElement.appendChild(nonValidatedRequestsElement);  rootElement.appendChild(validatedRequestsElement);  writeXMLFile();}  }
class C{  public RangeQueryBuilder timeZone(String timezone){  this.timeZone=timezone;  return this;}  }
class C{  private long computeMethodHash(){  long hash=0;  ByteArrayOutputStream sink=new ByteArrayOutputStream(512);  try {    MessageDigest md=MessageDigest.getInstance("SHA");    DataOutputStream out=new DataOutputStream(new DigestOutputStream(sink,md));    String methodString=nameAndDescriptor();    out.writeUTF(methodString);    out.flush();    byte hashArray[]=md.digest();    for (int i=0; i < Math.min(8,hashArray.length); i++) {      hash+=((long)(hashArray[i] & 0xFF)) << (i * 8);    }  } catch (  IOException e) {    throw new AssertionError(e);  }catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }  return hash;}  }
class C{  public Vector2f add(float x,float y){  this.x+=x;  this.y+=y;  return this;}  }
class C{  public void changeBufferData(BufferInfo bufferInfo,Buffer newData,int index,boolean resizeBuffer){  changeBufferData(bufferInfo,newData,index,newData.capacity(),resizeBuffer);}  }
class C{  public static void unstar(final Window parent,final INaviView[] views){  for (  final INaviView view : views) {    try {      view.getConfiguration().setStared(false);    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00176: " + "View could not be unstared";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The view '%s' could not be unstared.",view.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The view star was not updated."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  public void flush() throws java.io.IOException {  return;}  }
class C{  public void shutDown(){  executorService.shutdown();}  }
class C{  private void assertTrue(boolean condition){  if (!condition) {    throw new RuntimeException("assertTrue failed while treebuilding");  }}  }
class C{  public AbstractInsnNode[] toArray(){  int i=0;  AbstractInsnNode elem=first;  AbstractInsnNode[] insns=new AbstractInsnNode[size];  while (elem != null) {    insns[i]=elem;    elem.index=i++;    elem=elem.next;  }  return insns;}  }
class C{  @InterfaceAudience.Private public Referenceable(Id id,String typeName,Map<String,Object> values,List<String> _traitNames,Map<String,IStruct> _traits){  super(typeName,values);  this.id=id;  traitNames=ImmutableList.copyOf(_traitNames);  traits=ImmutableMap.copyOf(_traits);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (a >= b) {    throw new IllegalStateException();  }}  }
class C{  public boolean isIndicatorSelected(){  return this.mIndicator.isSelected();}  }
class C{  public boolean isComposite(){  return false;}  }
class C{  @ValueConverter(rule="ID") public IValueConverter<String> ID(){  return idValueConverter;}  }
class C{  private double[] writeGeometryOrdinates(List elemTriplets,List ordGeoms,int ordSize,int dim){  double[] ords=new double[ordSize];  int ordIndex=0;  for (int ielem=0; ielem < elemTriplets.size(); ielem++) {    int[] triplet=(int[])elemTriplets.get(ielem);    int startOffset=triplet[0];    Assert.isTrue(startOffset == ordIndex + 1,"ElemInfo computed startingOffset does not match actual ordinates position");    int elemType=triplet[1];    int interp=triplet[2];    Geometry geom=(Geometry)ordGeoms.get(ielem);switch (elemType) {case OraGeom.ETYPE.POINT:      if (interp == 1) {        ordIndex=writeOrds(((Point)geom).getCoordinateSequence(),dim,ords,ordIndex);      } else {        ordIndex=writeOrds((MultiPoint)geom,dim,ords,ordIndex);      }    break;case OraGeom.ETYPE.LINE:  ordIndex=writeOrds(((LineString)geom).getCoordinateSequence(),dim,ords,ordIndex);break;case OraGeom.ETYPE.POLYGON_EXTERIOR:if (interp == OraGeom.INTERP.RECTANGLE) {ordIndex=writeRectangleOrds(geom,dim,ords,ordIndex);} else {ordIndex=writeOrdsOriented(((LineString)geom).getCoordinateSequence(),dim,ords,ordIndex,true);}break;case OraGeom.ETYPE.POLYGON_INTERIOR:ordIndex=writeOrdsOriented(((LineString)geom).getCoordinateSequence(),dim,ords,ordIndex,false);break;}}return ords;}  }
class C{  public static UnitValue[] parseInsets(String s,boolean acceptPanel){  if (s.length() == 0 || s.equals("dialog") || s.equals("panel")) {    if (acceptPanel == false)     throw new IllegalAccessError("Insets now allowed: " + s + "\n");    boolean isPanel=s.startsWith("p");    UnitValue[] ins=new UnitValue[4];    for (int j=0; j < 4; j++)     ins[j]=isPanel ? PlatformDefaults.getPanelInsets(j) : PlatformDefaults.getDialogInsets(j);    return ins;  } else {    String[] insS=toTrimmedTokens(s,' ');    UnitValue[] ins=new UnitValue[4];    for (int j=0; j < 4; j++) {      UnitValue insSz=parseUnitValue(insS[j < insS.length ? j : insS.length - 1],UnitValue.ZERO,j % 2 == 1);      ins[j]=insSz != null ? insSz : PlatformDefaults.getPanelInsets(j);    }    return ins;  }}  }
class C{  public boolean contains(IntervalWindow other){  return !this.start.isAfter(other.start) && !this.end.isBefore(other.end);}  }
class C{  public void handleEvent(Event e){  boolean matched;  if (e.getType().charAt(3) == 'p') {    DOMKeyEvent evt=(DOMKeyEvent)e;    matched=evt.getCharCode() == accesskey;  } else {    KeyboardEvent evt=(KeyboardEvent)e;    matched=evt.getKeyIdentifier().equals(keyName);  }  if (matched) {    owner.eventOccurred(this,e);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.FEATURE_CONFIGURATION__TYPE:    return type != null;case SGenPackage.FEATURE_CONFIGURATION__PARAMETER_VALUES:  return parameterValues != null && !parameterValues.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public VirtualInvokeExpr newVirtualInvokeExpr(Local base,SootMethodRef method,List args){  return new JVirtualInvokeExpr(base,method,args);}  }
class C{  public void filter(double[] x,double[] y){  Arrays.fill(y,0.0f);  sections.get(0).filter(x,y);  for (int i=1; i < sections.size(); i++) {    sections.get(i).filter(y,y);  }}  }
class C{  public void attach(@NotNull Component childComponent) throws MultiParentException, ProviderConflictException {  attach(childComponent,false);}  }
class C{  public void addRefreshable(Refreshable refreshable){  refreshables.add(refreshable);}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:18.326 -0500",hash_original_method="80B25DE2FCBFBCCF6E0A2A88A3316812",hash_generated_method="901CD9BB0992FD3EB90507D2EC9F1B80") public DERSet(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("CertId \n");  sb.append("Algorithm: " + hashAlgId.toString() + "\n");  sb.append("issuerNameHash \n");  HexDumpEncoder encoder=new HexDumpEncoder();  sb.append(encoder.encode(issuerNameHash));  sb.append("\nissuerKeyHash: \n");  sb.append(encoder.encode(issuerKeyHash));  sb.append("\n" + certSerialNumber.toString());  return sb.toString();}  }
class C{  protected void establecerBotonesVista(HttpServletRequest request,AppUser userVO,ConsultaVO consulta_VO,Collection detallesConsultas){  boolean todostratados=true;  if (detallesConsultas != null && !detallesConsultas.isEmpty()) {    Iterator todosDetalles=detallesConsultas.iterator();    while (todostratados && todosDetalles.hasNext())     todostratados=((DetalleConsultaVO)todosDetalles.next()).getEstado() != ConsultasConstants.ESTADO_SOLICITUD_PENDIENTE;  }  if ((userVO.hasPermission(AppPermissions.ADMINISTRACION_TOTAL_SISTEMA) || userVO.hasPermission(AppPermissions.GESTION_SOLICITUDES_CONSULTAS)) && consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_SOLICITADA) {    request.setAttribute(ConsultasConstants.VER_BOTON_ENVIAR_DENEGAR_AUTORIZAR,new Boolean(todostratados));    request.setAttribute(ConsultasConstants.VER_BOTON_VER_DISPONIBILIDAD,new Boolean(true));  } else {    request.setAttribute(ConsultasConstants.VER_BOTON_ENVIAR_DENEGAR_AUTORIZAR,new Boolean(false));  }  if ((userVO.hasPermission(AppPermissions.ADMINISTRACION_TOTAL_SISTEMA) || userVO.hasPermission(AppPermissions.ENTREGA_UNIDADES_DOCUMENTALES)) && (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_ENTREGADA)) {    request.setAttribute(ConsultasConstants.VER_BOTON_IMPRIMIR_SALIDA,new Boolean(true));  } else   request.setAttribute(ConsultasConstants.VER_BOTON_IMPRIMIR_SALIDA,new Boolean(false));  if ((userVO.hasPermission(AppPermissions.ADMINISTRACION_TOTAL_SISTEMA) || userVO.hasPermission(AppPermissions.ENTREGA_UNIDADES_DOCUMENTALES)) && (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_DEVUELTA_INCOMPLETA || consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_DEVUELTA)) {    request.setAttribute(ConsultasConstants.VER_BOTON_IMPRIMIR_ENTRADA,new Boolean(true));  } else   request.setAttribute(ConsultasConstants.VER_BOTON_IMPRIMIR_ENTRADA,new Boolean(false));  if (!consulta_VO.isFueraPlazoEntrega() && (userVO.hasPermission(AppPermissions.ENTREGA_UNIDADES_DOCUMENTALES) || userVO.hasPermission(AppPermissions.ADMINISTRACION_TOTAL_SISTEMA)) && consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_AUTORIZADA) {    request.setAttribute(ConsultasConstants.VER_BOTON_ENTREGAR,new Boolean(true));  } else   request.setAttribute(ConsultasConstants.VER_BOTON_ENTREGAR,new Boolean(false));  if (consulta_VO.isFueraPlazoEntrega()) {    request.setAttribute(ConsultasConstants.VER_BOTON_VOLVER_A_SOLICITADA,new Boolean(true));  } else {    request.setAttribute(ConsultasConstants.VER_BOTON_VOLVER_A_SOLICITADA,new Boolean(false));  }  if ((consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_ABIERTA || (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_RESERVADA)) && (userVO.getId().equals(consulta_VO.getIdusrsolicitante())) && (consulta_VO.getFfinalreserva() == null ? true : consulta_VO.getFinicialreserva().after(GregorianCalendar.getInstance().getTime()))) {    request.setAttribute(ConsultasConstants.VER_BOTON_EDITAR,new Boolean(true));  } else {    request.setAttribute(ConsultasConstants.VER_BOTON_EDITAR,new Boolean(false));    if (userVO.isUsuarioArchivo()) {      request.setAttribute(PrestamosConstants.PERMITIR_EDITAR_OBSERVACIONES,new Boolean(true));    }  }  if ((consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_ABIERTA || consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_RESERVADA) && userVO.getId().equals(consulta_VO.getIdusrsolicitante())) {    request.setAttribute(ConsultasConstants.VER_BOTON_ELIMINAR,new Boolean(true));  } else   request.setAttribute(ConsultasConstants.VER_BOTON_ELIMINAR,new Boolean(false));  if (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_ABIERTA && (userVO.getId().equals(consulta_VO.getIdusrsolicitante()))) {    request.setAttribute(ConsultasConstants.VER_BOTON_ANADIR_DETALLE,new Boolean(true));  } else   request.setAttribute(ConsultasConstants.VER_BOTON_ANADIR_DETALLE,new Boolean(false));  if (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_ABIERTA && (userVO.getId().equals(consulta_VO.getIdusrsolicitante())) && (detallesConsultas != null && !detallesConsultas.isEmpty())) {    request.setAttribute(ConsultasConstants.VER_BOTON_ELIMINAR_DETALLE,new Boolean(true));  } else   request.setAttribute(ConsultasConstants.VER_BOTON_ELIMINAR_DETALLE,new Boolean(false));  if ((userVO.hasPermission(AppPermissions.ADMINISTRACION_TOTAL_SISTEMA) || userVO.hasPermission(AppPermissions.GESTION_SOLICITUDES_CONSULTAS)) && (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_SOLICITADA)) {    request.setAttribute(ConsultasConstants.VER_BOTON_AUTORIZAR_DETALLE,new Boolean(true));  } else   request.setAttribute(ConsultasConstants.VER_BOTON_AUTORIZAR_DETALLE,new Boolean(false));  if ((userVO.hasPermission(AppPermissions.ADMINISTRACION_TOTAL_SISTEMA) || userVO.hasPermission(AppPermissions.GESTION_SOLICITUDES_CONSULTAS)) && (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_SOLICITADA)) {    request.setAttribute(ConsultasConstants.VER_BOTON_DENEGAR_DETALLE,new Boolean(true));  } else   request.setAttribute(ConsultasConstants.VER_BOTON_DENEGAR_DETALLE,new Boolean(false));  if ((userVO.hasPermission(AppPermissions.ADMINISTRACION_TOTAL_SISTEMA) || userVO.hasPermission(AppPermissions.GESTION_SOLICITUDES_CONSULTAS)) && (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_ENTREGADA || consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_DEVUELTA_INCOMPLETA)) {    request.setAttribute(ConsultasConstants.VER_BOTON_DEVOLVER,new Boolean(true));  } else   request.setAttribute(ConsultasConstants.VER_BOTON_DEVOLVER,new Boolean(false));  if ((userVO.getId().equals(consulta_VO.getIdusrsolicitante())) && (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_RESERVADA)) {    Boolean estamosEnFechaReserva=new Boolean(DateUtils.esHoy(consulta_VO.getFinicialreserva()));    request.setAttribute(ConsultasConstants.VER_BOTON_SOLICITAR_RESERVA,estamosEnFechaReserva);    request.setAttribute(ConsultasConstants.VER_BOTON_VER_DISPONIBILIDAD,estamosEnFechaReserva);  } else {    request.setAttribute(ConsultasConstants.VER_BOTON_SOLICITAR_RESERVA,new Boolean(false));  }  if (userVO.isUsuarioArchivo() || (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_ABIERTA || consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_SOLICITADA) && userVO.getId().equals(consulta_VO.getIdusrsolicitante())) {    request.setAttribute(ConsultasConstants.VER_BOTONES_MODIFICAR_COLUMNAS,new Boolean(true));  } else {    request.setAttribute(ConsultasConstants.VER_BOTONES_MODIFICAR_COLUMNAS,new Boolean(false));  }  if ((consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_ABIERTA || consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_SOLICITADA) && userVO.getId().equals(consulta_VO.getIdusrsolicitante()))   request.setAttribute(ConsultasConstants.VER_BOTON_MODIFICAR_COLUMNA_EXPEDIENTEFS,new Boolean(true)); else   request.setAttribute(ConsultasConstants.VER_BOTON_MODIFICAR_COLUMNA_EXPEDIENTEFS,new Boolean(false));  if (userVO.isUsuarioArchivo() || (consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_ABIERTA || consulta_VO.getEstado() == ConsultasConstants.ESTADO_CONSULTA_SOLICITADA) && userVO.getId().equals(consulta_VO.getIdusrsolicitante())) {    request.setAttribute(ConsultasConstants.VER_BOTON_MODIFICAR_COLUMNA_OBSERVACIONES,new Boolean(true));  } else   request.setAttribute(ConsultasConstants.VER_BOTON_MODIFICAR_COLUMNA_OBSERVACIONES,new Boolean(false));}  }
class C{  public MouseTracker(BasicPanel panel){  _panel=panel;  _handlers=new LinkedHashMap();}  }
class C{  public GridConcurrentPhantomHashSet(){  store=new GridConcurrentHashSet<>();}  }
class C{  public void update(){  setValue(getValue());}  }
