class C{  public static boolean isResultWarningSuppressed(Operator operator){  if (operator == null) {    throw new IllegalArgumentException("operator must not be null!");  }  return REGISTERED_OPERATORS.contains(operator.getClass());}  }
class C{  public SaveDataAction(DataEditor editor){  super("Save Data...");  if (editor == null) {    throw new NullPointerException("Data Editor must not be null.");  }  this.setDataEditor(editor);}  }
class C{  public void openPetSelector(Player player,boolean sendMessage){  SelectorLayout.getSelectorMenu().showTo(player);  if (false) {    Lang.sendTo(player,Lang.OPEN_SELECTOR.toString());  }}  }
class C{  public boolean idParsingStillNeeded(){  return shouldParseId && !idResolved;}  }
class C{  public void print(){  log.info(m_info.toString());  if (m_layout == null)   layout();  PrintRequestAttributeSet prats=m_layout.getPaper().getPrintRequestAttributeSet();  if (m_info.isDocumentCopy() || m_info.getCopies() < 1)   prats.add(new Copies(1)); else   prats.add(new Copies(m_info.getCopies()));  Locale locale=Language.getLoginLanguage().getLocale();  prats.add(new JobName(m_printFormat.getName(),locale));  prats.add(PrintUtil.getJobPriority(m_layout.getNumberOfPages(),m_info.getCopies(),true));  try {    PrinterJob job=getPrinterJob(m_info.getPrinterName());    job.setPageable(m_layout.getPageable(false));    try {      if (m_info.isWithDialog() && !job.printDialog(prats))       return;    } catch (    Exception e) {      log.log(Level.WARNING,"Operating System Print Issue, check & try again",e);      return;    }    boolean printCopy=m_info.isDocumentCopy() && m_info.getCopies() > 1;    ArchiveEngine.get().archive(m_layout,m_info);    PrintUtil.print(job,prats,false,printCopy);    if (printCopy) {      log.info("Copy " + (m_info.getCopies() - 1));      prats.add(new Copies(m_info.getCopies() - 1));      job=getPrinterJob(m_info.getPrinterName());      job.setPageable(m_layout.getPageable(true));      PrintUtil.print(job,prats,false,false);    }  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  public SwitchToDemoAction(SwingSet2 swingset,DemoModule demo){  super(demo.getName(),demo.getIcon());  this.swingset=swingset;  this.demo=demo;}  }
class C{  public static double ACCfitness(boolean useTrainingData,GEPIndividual ind){  double ACC=ACCrawFitness(useTrainingData,ind,0);  return (1000.0 * ACC);}  }
class C{  private boolean sort(){  final int[] d=this.d;  if (LOGGER.isDebugEnabled())   LOGGER.debug("Peeling hypergraph (" + numVertices + " vertices, "+ numEdges+ " edges)...");  top=0;  for (int i=0; i < numVertices; i++)   if (d[i] == 1)   peel(i);  if (top == numEdges) {    if (LOGGER.isDebugEnabled())     LOGGER.debug("Peeling completed.");    return true;  }  if (LOGGER.isDebugEnabled())   LOGGER.debug("Peeled " + top + " edges out of "+ numEdges+ ".");  return false;}  }
class C{  public static boolean isFileExist(String filePath){  if (StringUtils.isEmpty(filePath)) {    return false;  }  File file=new File(filePath);  return (file.exists() && file.isFile());}  }
class C{  protected HttpURLConnection createDeployConnection(WAR war) throws IOException {  String deployUrl=this.deployerUrl + "/deploy?path=/" + war.getContext();  URL url=new URL(deployUrl);  HttpURLConnection connection=(HttpURLConnection)url.openConnection();  connection.setAllowUserInteraction(false);  connection.setDoInput(true);  connection.setDoOutput(true);  connection.setUseCaches(false);  connection.setRequestMethod("PUT");  connection.setRequestProperty("Content-Type","application/octet-stream");  try {    connection.getClass().getMethod("setChunkedStreamingMode",new Class[]{Integer.TYPE}).invoke(connection,new Object[]{new Integer(0)});  } catch (  Exception e) {    getLogger().debug("Not calling setChunkedStreamingMode() method as JVM [" + System.getProperty("java.version") + "] doesn't support it.",getClass().getName());  }  if (this.username != null) {    String authorization=toAuthorization(this.username,this.password);    connection.setRequestProperty("Authorization",authorization);  }  connection.connect();  return connection;}  }
class C{  public boolean isWillingToCommit(){  Object oo=get_Value(COLUMNNAME_IsWillingToCommit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int calcScore(String regex,Task task,Game game,int lvl){  if (task == null || regex == null)   return 0;  int len=regex.length(), max=game.calcMax(task,lvl), right=task.getRight().size(), wrong=task.getWrong().size();  return (int)Math.round((max < 0) ? (Math.pow(len,2) / 4 + 1) : ((max - len) / 2 + 1) * (1 / ((Math.abs(right - wrong) + 1)) + 3 * calcVal(regex)));}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected ShaderVar addConst(String name,float value){  return addConst(name,new RFloat(value));}  }
class C{  public Matcher(Document document,String findString,boolean matchCase,MatchType matchType){  this.document=document;  this.findString=findString;  startIndex=0;  if (matchCase) {    matchLowerCase=matchUpperCase=findString.toCharArray();  } else {    matchUpperCase=findString.toUpperCase().toCharArray();    matchLowerCase=findString.toLowerCase().toCharArray();  }  this.matchType=matchType;}  }
class C{  public ErrorDetails validatePaymentDetails(final String assessmentNo,final String paymentMode,final BigDecimal totalAmount,final String paidBy){  ErrorDetails errorDetails=null;  if (assessmentNo == null || assessmentNo.trim().length() == 0) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(THIRD_PARTY_ERR_CODE_ASSESSMENT_NO_REQUIRED);    errorDetails.setErrorMessage(THIRD_PARTY_ERR_MSG_ASSESSMENT_NO_REQUIRED);  } else {    if (assessmentNo.trim().length() > 0 && assessmentNo.trim().length() < 10) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(THIRD_PARTY_ERR_CODE_ASSESSMENT_NO_LEN);      errorDetails.setErrorMessage(THIRD_PARTY_ERR_MSG_ASSESSMENT_NO_LEN);    }    if (!basicPropertyDAO.isAssessmentNoExist(assessmentNo)) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(THIRD_PARTY_ERR_CODE_ASSESSMENT_NO_NOT_FOUND);      errorDetails.setErrorMessage(THIRD_PARTY_ERR_MSG_ASSESSMENT_NO_NOT_FOUND);    }  }  if (paymentMode == null || paymentMode.trim().length() == 0) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(THIRD_PARTY_ERR_CODE_PAYMENT_MODE_REQUIRED);    errorDetails.setErrorMessage(THIRD_PARTY_ERR_MSG_PAYMENT_MODE_REQUIRED);  } else   if (!THIRD_PARTY_PAYMENT_MODE_CASH.equalsIgnoreCase(paymentMode.trim()) && !THIRD_PARTY_PAYMENT_MODE_CHEQUE.equalsIgnoreCase(paymentMode.trim()) && !THIRD_PARTY_PAYMENT_MODE_DD.equalsIgnoreCase(paymentMode.trim())) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(THIRD_PARTY_ERR_CODE_PAYMENT_MODE_INVALID);    errorDetails.setErrorMessage(THIRD_PARTY_ERR_MSG_PAYMENT_MODE_INVALID);  }  return errorDetails;}  }
class C{  private void handleMotionEventStateDelegating(MotionEvent event,int policyFlags){switch (event.getActionMasked()) {case MotionEvent.ACTION_DOWN:{      throw new IllegalStateException("Delegating state can only be reached if " + "there is at least one pointer down!");    }case MotionEvent.ACTION_MOVE:{    final int notInjectedCount=getNotInjectedActivePointerCount(mReceivedPointerTracker,mInjectedPointerTracker);    if (notInjectedCount > 0) {      MotionEvent prototype=MotionEvent.obtain(event);      sendDownForAllActiveNotInjectedPointers(prototype,policyFlags);    }  }break;case MotionEvent.ACTION_UP:sendAccessibilityEvent(AccessibilityEvent.TYPE_TOUCH_INTERACTION_END);case MotionEvent.ACTION_POINTER_UP:{mAms.onTouchInteractionEnd();mLongPressingPointerId=-1;mLongPressingPointerDeltaX=0;mLongPressingPointerDeltaY=0;if (mReceivedPointerTracker.getActivePointerCount() == 0) {mCurrentState=STATE_TOUCH_EXPLORING;}}break;case MotionEvent.ACTION_CANCEL:{clear(event,policyFlags);}break;}sendMotionEventStripInactivePointers(event,policyFlags);}  }
class C{  @Subscribe public void listen(final DeadEvent event){  LOG.info("DeadEvent on bus! {}",event.getEvent());}  }
class C{  public boolean isFixedRotation(){  return (m_flags & e_fixedRotationFlag) == e_fixedRotationFlag;}  }
class C{  protected QueryRequest makeQueryRequest(final ShardRequest sreq,ModifiableSolrParams params,String shard){  return new QueryRequest(params);}  }
class C{  public EPStatementObjectModel whereClause(Expression whereClause){  this.whereClause=whereClause;  return this;}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isFirstBatchDone()) {    m_Range.setUpper(getInputFormat().numInstances() - 1);    for (int i=0; i < getInputFormat().numInstances(); i++) {      if (!m_Range.isInRange(i)) {        push(getInputFormat().instance(i));      }    }  } else {    for (int i=0; i < getInputFormat().numInstances(); i++) {      push(getInputFormat().instance(i));    }  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#characters: " + start + ", "+ length);  if (m_contentHandler != null) {    m_contentHandler.characters(ch,start,length);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.390 -0500",hash_original_method="1992218C2CA2A9A793E8A4995C16BACA",hash_generated_method="64D74600A863EF1A66C3817EBCC9190A") public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  @Override public ImmutableCollection<V> values(){  return valueList;}  }
class C{  @Override public boolean isDisplayedLw(){  final AppWindowToken atoken=mAppToken;  return isDrawnLw() && mPolicyVisibility && ((!mAttachedHidden && (atoken == null || !atoken.hiddenRequested)) || mWinAnimator.mAnimating || (atoken != null && atoken.mAppAnimator.animation != null));}  }
class C{  public boolean isOver(){  return over || pressed;}  }
class C{  public void tabClosed(long time,int id){  if (findTabById(id) == null)   return;  boolean closingLastTab=mStripTabs[mStripTabs.length - 1].getId() == id;  computeAndUpdateTabOrders(!closingLastTab);  mUpdateHost.requestUpdate();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return new Float(0); else   return new Float((1.0f - (uiMgr.getOverscanOffsetX() * 1.0f / (uiMgr.getRootPanel().getWidth())) - uiMgr.getOverscanScaleWidth()) / uiMgr.getOverscanScaleWidth());}  }
class C{  public static void prependParserContext(String[] mimeTypes,XMLEventParserContext prototypeContext){  if (mimeTypes == null || mimeTypes.length == 0) {    String message=Logging.getMessage("nullValue.MimeTypeListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (prototypeContext == null) {    String message=Logging.getMessage("nullValue.ParserContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  parsers.add(0,new ParserTableEntry(mimeTypes,prototypeContext));}  }
class C{  boolean hasRequired(){  return m_has_required;}  }
class C{  public TypeSignature parseTypeSig(String s){  if (DEBUG)   System.out.println("Parsing type sig:" + s);  input=s.toCharArray();  return parseTypeSignature();}  }
class C{  public DefaultSQLDataHandler(){  this(true);}  }
class C{  private WebResourceStatistics computeHttpStatusCode(WebResourceStatistics wrStatistics){  wrStatistics.setHttpStatusCode(webResourceStatisticsDataService.getHttpStatusCodeByWebResource(webResource.getId()));  return wrStatistics;}  }
class C{  public void dispose(){  if (change != null) {    change.dispose();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.012 -0500",hash_original_method="E1FFD425535E2D30F5D43A147688D9A7",hash_generated_method="0C49D2C39D6052044BC4541376015902") public boolean hasPostDial(){  return parameters.getValue(POSTDIAL) != null;}  }
class C{  public void requestPermissions(){  requestPermissions(REQUEST_CODE_ASK_PERMISSIONS);}  }
class C{  @Override public Type RELATIONSHIP(){  return relationshipType;}  }
class C{  public void test_default_graph_joins_01d() throws Exception {  if (!store.isQuads())   return;  new TestHelper("default-graph-joins-01d","default-graph-joins-01d.rq","default-graph-joins-01.trig","default-graph-joins-01d.srx").runTest();}  }
class C{  public void reset(){  hits=total=sumOfSquares=lastValue=0.0;  firstAccess=lastAccess=0;  min=MIN_DOUBLE;  max=MAX_DOUBLE;  startHasBeenCalled=false;  trackActivity=false;  listeners=null;  maxActive=totalActive=0.0;  activityStats.thisActive.setCount(0);  allActiveTotal=primaryActiveTotal=thisActiveTotal=0;  if (range != null) {    range.reset();  }}  }
class C{  public void unregisterToolbar(RTToolbar toolbar){  mToolbars.remove(toolbar.getId());  toolbar.removeToolbarListener();  updateToolbarVisibility();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element entRefAddr;  Node entRefNode;  String entRefName;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  entRefAddr=(Element)elementList.item(1);  entRefNode=entRefAddr.getFirstChild();  nodeType=(int)entRefNode.getNodeType();  if (!equals(5,nodeType)) {    entRefNode=doc.createEntityReference("ent2");    assertNotNull("createdEntRefNotNull",entRefNode);  }  entRefName=entRefNode.getNodeName();  assertEquals("nodeEntityReferenceNodeNameAssert1","ent2",entRefName);}  }
class C{  private boolean unsignedLongCompare(long one,long two){  return (one + Long.MIN_VALUE) > (two + Long.MIN_VALUE);}  }
class C{  protected IndexKey convertStartKeyToNodeEntry(byte[] startKey){  ByteBuffer buffer=ByteBuffer.wrap(startKey);  buffer.rewind();  int dictonaryKeySize=buffer.getInt();  int nonDictonaryKeySize=buffer.getInt();  byte[] dictionaryKey=new byte[dictonaryKeySize];  buffer.get(dictionaryKey);  byte[] nonDictionaryKey=new byte[nonDictonaryKeySize];  buffer.get(nonDictionaryKey);  IndexKey entry=new IndexKey(dictionaryKey,nonDictionaryKey);  return entry;}  }
class C{  public CovSum(int inputDimensions,CovarianceFunction... f){  this.D=inputDimensions;  this.f=f;  idx=new int[f.length + 1];  for (int i=0; i < f.length; i++) {    idx[i + 1]=idx[i] + f[i].numParameters();  }}  }
class C{  @Override public LongsRef clone(){  return new LongsRef(longs,offset,length);}  }
class C{  void nextLine(){  try {    nextLine=currentEpisode.readLine();    while (nextLine.equals("#"))     nextLine=currentEpisode.readLine();  } catch (  IOException|NullPointerException e) {    nextLine=null;  }}  }
class C{  @Override public void emitTuples(){  if (!once) {    int key;    int val;    for (int i=0; i < tupleBlast; i++) {      key=rand.nextInt(numKeys);      val=rand.nextInt(numVals);      outport.emit(new KeyValPair<Integer,Object>(key,val));      if (verport.isConnected()) {        Set<Integer> count=valhistory.get(key);        if (count == null) {          Set<Integer> tempset=new HashSet<Integer>();          tempset.add(val);          valhistory.put(key,tempset);          LOG.debug("key {} val {}",key,tempset);        } else         if (!valhistory.get(key).contains(val)) {          valhistory.get(key).add(val);        }      }    }    once=true;  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public String attList_IrrTipText(){  return "The array with the indices of the irrelevant attributes.";}  }
class C{  public static void validateImageMimeType(final String mimeType){  if (!(mimeType.equalsIgnoreCase(IMAGE_MIME_TYPE.GIF.getValue()) || mimeType.equalsIgnoreCase(IMAGE_MIME_TYPE.JPEG.getValue()) || mimeType.equalsIgnoreCase(IMAGE_MIME_TYPE.PNG.getValue()))) {    throw new ImageUploadException();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.908 -0500",hash_original_method="C585F9D3DE53AA6116980D3F6C4B8FC9",hash_generated_method="83FEE9530342B72CBD7433E103FE771F") public final TestSuite build(){  rootSuite=new TestSuite(getSuiteName());  currentClassname=null;  try {    for (    TestMethod test : testGrouping.getTests()) {      if (satisfiesAllPredicates(test)) {        addTest(test);      }    }    if (testCases.size() > 0) {      for (      TestCase testCase : testCases) {        if (satisfiesAllPredicates(new TestMethod(testCase))) {          addTest(testCase);        }      }    }  } catch (  Exception exception) {    Log.i("TestSuiteBuilder","Failed to create test.",exception);    TestSuite suite=new TestSuite(getSuiteName());    suite.addTest(new FailedToCreateTests(exception));    return suite;  }  return rootSuite;}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  MACDDataset clone=(MACDDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public double calculateLogLikelihood(){  return contTraitLikelihood.calculateLikelihood(treeModel,traitNames,mles,1.0);}  }
class C{  public void testSimpleRange() throws Exception {  int upper=10;  String range="1-3";  Range index=getRange(range,upper);  int[] expected=new int[]{0,1,2};  assertEquals(range,index.getRanges());  assertEquals(expected.length,index.getSelection().length);  for (int i=0; i < expected.length; i++)   assertEquals(expected[i],index.getSelection()[i]);}  }
class C{  public boolean forEach(TIntProcedure procedure){  byte[] states=_states;  int[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public char next(){  return pos < in.length() ? in.charAt(pos++) : '\0';}  }
class C{  static int checkPosition(int position){  if (position < 0) {    throw new IllegalArgumentException("Position can't be less than 0.");  }  return position;}  }
class C{  public void testHugeDoc() throws IOException {  StringBuilder sb=new StringBuilder();  char whitespace[]=new char[4094];  Arrays.fill(whitespace,'\n');  sb.append(whitespace);  sb.append("testing 1234");  String input=sb.toString();  assertAnalyzesTo(sentenceAndWord,input,new String[]{"testing","1234"});}  }
class C{  public EventPoint event(EventPoint ep){  BalancedBinaryNode<EventPoint,EventPoint> bn=events.getEntry(ep);  if (bn == null) {    return null;  }  return bn.key();}  }
class C{  public GetTVShows(ListType.Limits limits,String... properties){  super();  addParameterToRequest("properties",properties);  addParameterToRequest("limits",limits);}  }
class C{  public static String[] readStrings(){  return new In().readAllStrings();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String readString(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonArray.getString(index);  }  if (notNull && jsonArray.isNull(index)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));  }  String value=null;  if (!jsonArray.isNull(index)) {    value=jsonArray.getString(index);  }  return value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.225 -0500",hash_original_method="2D091C8CAFC19B749551E2F1187B6105",hash_generated_method="CFF082B2C43AC35F1DBB1110DFE2B4F0") public BasicListHeaderIterator(List headers,String name){  if (headers == null) {    throw new IllegalArgumentException("Header list must not be null.");  }  this.allHeaders=headers;  this.headerName=name;  this.currentIndex=findNext(-1);  this.lastIndex=-1;}  }
class C{  public static long toLong(ByteString bs){  return bs.asReadOnlyByteBuffer().getLong();}  }
class C{  public UrlParser(String url) throws MalformedURLException {  if (url != null && url.length() > 0) {    int ppos=url.indexOf("://");    if (ppos >= 0) {      protocol=url.substring(0,ppos);      url=url.substring(ppos + 3);    }    String hostport;    ppos=url.indexOf("/");    if (ppos >= 0) {      hostport=url.substring(0,ppos);      path=url.substring(ppos + 1);    } else {      hostport=url;    }    ppos=hostport.indexOf(":");    if (ppos >= 0) {      host=hostport.substring(0,ppos);      String portString=hostport.substring(ppos + 1);      try {        this.port=Integer.parseInt(portString);      } catch (      NumberFormatException e) {        logger.trace("",e);        throw new MalformedURLException("Invalid port " + portString);      }    } else {      host=hostport;    }  } else {    throw new MalformedURLException("Empty URL");  }}  }
class C{  @Reference(title="Algorithm AS 91: The percentage points of the $\\chi^2$ distribution",authors="D.J. Best, D. E. Roberts",booktitle="Journal of the Royal Statistical Society. Series C (Applied Statistics)") public static double quantile(double x,double dof){  return GammaDistribution.quantile(x,.5 * dof,.5);}  }
class C{  private Object[] newElementArray(int s){  return new Object[s];}  }
class C{  public static boolean exchangeWord(Address address,ArchitecturalWord oldValue,ArchitecturalWord value){switch (ArchitecturalWord.getModel()) {case BITS32:    return getPage(address).exchangeInt(address,oldValue.toInt(),value.toInt());case BITS64:  return getPage(address).exchangeLong(address,oldValue.toLongSignExtend(),value.toLongSignExtend());}throw new RuntimeException("ArchitecturalWord.model is neither 32 or 64 bits");}  }
class C{  public IconicsDrawable sizePx(int size){  this.mSize=size;  setBounds(0,0,size,size);  invalidateSelf();  return this;}  }
class C{  private static DroidModel findOne(DroidModel model) throws DroidModelException {  return null;}  }
class C{  public DOMXMLSignature(SignedInfo si,KeyInfo ki,List<? extends XMLObject> objs,String id,String signatureValueId){  if (si == null) {    throw new NullPointerException("signedInfo cannot be null");  }  this.si=si;  this.id=id;  this.sv=new DOMSignatureValue(signatureValueId);  if (objs == null) {    this.objects=Collections.emptyList();  } else {    this.objects=Collections.unmodifiableList(new ArrayList<XMLObject>(objs));    for (int i=0, size=this.objects.size(); i < size; i++) {      if (!(this.objects.get(i) instanceof XMLObject)) {        throw new ClassCastException("objs[" + i + "] is not an XMLObject");      }    }  }  this.ki=ki;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  protected Region createRegion(int id){  Region region=new Region(id,this.m_method,this.m_class,this.m_cfg);  if (id == 0)   this.m_topLevelRegion=region;  return region;}  }
class C{  public String convertVarianceToString(EDataType eDataType,Object instanceValue){  return super.convertToString(eDataType,instanceValue);}  }
class C{  @Field(15) public __VARIANT_NAME_3_union pbVal(Pointer<Byte> pbVal){  this.io.setPointerField(this,15,pbVal);  return this;}  }
class C{  protected EventImpl(){  super();}  }
class C{  @Override protected void doAction(){  BufferEntry bufferEntry=bufferSelectedEntry();  if (bufferEntry != null) {    Buffer.populate(bufferEntry);    kseFrame.updateControls(false);  }}  }
class C{  public CompoundName searchCompoundName(AbstractList<Expression> expressions,int idx){  Expression first=expressions.get(idx);  Set<CompoundName> candidates=compoundNames.get(first.getOriginal().toLowerCase());  if (candidates != null) {    for (    CompoundName compName : candidates) {      if (compName.matches(expressions,idx)) {        return compName;      }    }  }  return null;}  }
class C{  protected void addLayer(WMSCapabilities caps,WMSLayerCapabilities layerCaps,LayerTreeGroupNode groupNode,LayerTreeModel model){  java.util.List<WMSLayerCapabilities> subLayers=layerCaps.getLayers();  if (subLayers != null && subLayers.size() > 0) {    LayerTreeGroupNode subGroupNode=new LayerTreeGroupNode(new WMSLayerInfo(caps,layerCaps,null));    if (groupNode == null)     model.insertNodeInto(subGroupNode,(LayerTreeGroupNode)model.getRoot(),((LayerTreeGroupNode)model.getRoot()).getChildCount()); else     model.insertNodeInto(subGroupNode,groupNode,groupNode.getChildCount());    for (    WMSLayerCapabilities subLayerCaps : subLayers) {      addLayer(caps,subLayerCaps,subGroupNode,model);    }    String toolTipText=layerCaps.getLayerAbstract();    if (!WWUtil.isEmpty(toolTipText))     subGroupNode.setToolTipText(Util.makeMultiLineToolTip(toolTipText));  } else {    java.util.List<WMSLayerInfo> layerInfos=WMSLayerInfo.createLayerInfos(caps,layerCaps);    for (    WMSLayerInfo layerInfo : layerInfos) {      LayerTreeNode layerNode=new LayerTreeNode(layerInfo);      layerNode.setSelected(false);      layerNode.setAllowsChildren(false);      if (groupNode == null)       model.insertNodeInto(layerNode,(LayerTreeNode)model.getRoot(),((DefaultMutableTreeNode)model.getRoot()).getChildCount()); else       model.insertNodeInto(layerNode,groupNode,groupNode.getChildCount());      String toolTipText=layerCaps.getLayerAbstract();      if (!WWUtil.isEmpty(toolTipText))       layerNode.setToolTipText(Util.makeMultiLineToolTip(toolTipText));    }  }}  }
class C{  public textarea addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void toggleSelection(int position){  if (selectedItems.get(position,false)) {    selectedItems.delete(position);  } else {    selectedItems.put(position,true);  }  notifyItemChanged(position);}  }
class C{  public static Intent createAddToHomeIntent(String url,String title,Bitmap icon,Intent shortcutIntent){  Intent i=new Intent(INSTALL_SHORTCUT);  i.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);  i.putExtra(Intent.EXTRA_SHORTCUT_NAME,title);  i.putExtra(Intent.EXTRA_SHORTCUT_ICON,icon);  return i;}  }
class C{  @HLEFunction(nid=0x9D689E13,version=150,checkInsideInterrupt=true) public int sceNetAdhocctlTerm(){  doTerminate=true;  isInitialized=false;  networkAdapter.sceNetAdhocctlTerm();  return 0;}  }
class C{  protected void tearDown(){  objArray=null;  myobjArray=null;  ll=null;  myll=null;  reversedLinkedList=null;  myReversedLinkedList=null;  s=null;  mys=null;  hm=null;}  }
class C{  @Nullable public static byte[] decode(String s){  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length);  if (bytes != null && bytes.length >= 4) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  private static BufferedImage createImage(final boolean aa,final AffineTransform gtx,final AffineTransform ftx){  final BufferedImage bi=new BufferedImage(SIZE,SIZE,TYPE_INT_RGB);  final Graphics2D bg=bi.createGraphics();  bg.setRenderingHint(RenderingHints.KEY_ANTIALIASING,aa ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);  bg.setColor(Color.RED);  bg.fillRect(0,0,SIZE,SIZE);  bg.translate(100,100);  bg.transform(gtx);  bg.setColor(Color.BLACK);  bg.setFont(bg.getFont().deriveFont(20.0f).deriveFont(ftx));  bg.drawString(STR,0,0);  bg.dispose();  return bi;}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"Sales for 2008","Sales for 2007","Difference between 2008 and 2007 sales"};  List<double[]> values=new ArrayList<double[]>();  values.add(new double[]{14230,12300,14240,15244,14900,12200,11030,12000,12500,15500,14600,15000});  values.add(new double[]{10230,10900,11240,12540,13500,14200,12530,11200,10500,12500,11600,13500});  int length=values.get(0).length;  double[] diff=new double[length];  for (int i=0; i < length; i++) {    diff[i]=values.get(0)[i] - values.get(1)[i];  }  values.add(diff);  int[] colors=new int[]{Color.BLUE,Color.CYAN,Color.GREEN};  PointStyle[] styles=new PointStyle[]{PointStyle.POINT,PointStyle.POINT,PointStyle.POINT};  XYMultipleSeriesRenderer renderer=buildRenderer(colors,styles);  setChartSettings(renderer,"Monthly sales in the last 2 years","Month","Units sold",0.75,12.25,-5000,19000,Color.GRAY,Color.LTGRAY);  renderer.setXLabels(12);  renderer.setYLabels(10);  renderer.setChartTitleTextSize(20);  renderer.setTextTypeface("sans_serif",Typeface.BOLD);  renderer.setLabelsTextSize(14f);  renderer.setAxisTitleTextSize(15);  renderer.setLegendTextSize(15);  length=renderer.getSeriesRendererCount();  for (int i=0; i < length; i++) {    XYSeriesRenderer seriesRenderer=(XYSeriesRenderer)renderer.getSeriesRendererAt(i);    if (i == length - 1) {      FillOutsideLine fill=new FillOutsideLine(FillOutsideLine.Type.BOUNDS_ALL);      fill.setColor(Color.GREEN);      seriesRenderer.addFillOutsideLine(fill);    }    seriesRenderer.setLineWidth(2.5f);    seriesRenderer.setDisplayChartValues(true);    seriesRenderer.setChartValuesTextSize(10f);  }  return ChartFactory.getCubicLineChartIntent(context,buildBarDataset(titles,values),renderer,0.5f);}  }
class C{  public static final String convert(int value){  if (value == MoveEvaluation.minimum()) {    return "-INF";  } else   if (value == MoveEvaluation.maximum()) {    return "INF";  }  return "" + value;}  }
class C{  public ComponentItem clone(){  final ComponentItem result=new ComponentItem(myProject,myClassName,myIconPath,myToolTipText,(GridConstraints)myDefaultConstraints.clone(),(HashMap<String,StringDescriptor>)myPropertyName2initialValue.clone(),myRemovable,myAutoCreateBinding,myCanAttachLabel);  result.setIsContainer(myIsContainer);  return result;}  }
class C{  @Override public void splitNode(BallNode node,int numNodesCreated) throws Exception {  correctlyInitialized();  double maxDist=Double.NEGATIVE_INFINITY, dist=0.0;  Instance furthest1=null, furthest2=null, pivot=node.getPivot(), temp;  double distList[]=new double[node.m_NumInstances];  for (int i=node.m_Start; i <= node.m_End; i++) {    temp=m_Instances.instance(m_Instlist[i]);    dist=m_DistanceFunction.distance(pivot,temp,Double.POSITIVE_INFINITY);    if (dist > maxDist) {      maxDist=dist;      furthest1=temp;    }  }  maxDist=Double.NEGATIVE_INFINITY;  furthest1=(Instance)furthest1.copy();  for (int i=0; i < node.m_NumInstances; i++) {    temp=m_Instances.instance(m_Instlist[i + node.m_Start]);    distList[i]=m_DistanceFunction.distance(furthest1,temp,Double.POSITIVE_INFINITY);    if (distList[i] > maxDist) {      maxDist=distList[i];      furthest2=temp;    }  }  furthest2=(Instance)furthest2.copy();  dist=0.0;  int numRight=0;  for (int i=0; i < node.m_NumInstances - numRight; i++) {    temp=m_Instances.instance(m_Instlist[i + node.m_Start]);    dist=m_DistanceFunction.distance(furthest2,temp,Double.POSITIVE_INFINITY);    if (dist < distList[i]) {      int t=m_Instlist[node.m_End - numRight];      m_Instlist[node.m_End - numRight]=m_Instlist[i + node.m_Start];      m_Instlist[i + node.m_Start]=t;      double d=distList[distList.length - 1 - numRight];      distList[distList.length - 1 - numRight]=distList[i];      distList[i]=d;      numRight++;      i--;    }  }  if (!(numRight > 0 && numRight < node.m_NumInstances)) {    throw new Exception("Illegal value for numRight: " + numRight);  }  node.m_Left=new BallNode(node.m_Start,node.m_End - numRight,numNodesCreated + 1,(pivot=BallNode.calcCentroidPivot(node.m_Start,node.m_End - numRight,m_Instlist,m_Instances)),BallNode.calcRadius(node.m_Start,node.m_End - numRight,m_Instlist,m_Instances,pivot,m_DistanceFunction));  node.m_Right=new BallNode(node.m_End - numRight + 1,node.m_End,numNodesCreated + 2,(pivot=BallNode.calcCentroidPivot(node.m_End - numRight + 1,node.m_End,m_Instlist,m_Instances)),BallNode.calcRadius(node.m_End - numRight + 1,node.m_End,m_Instlist,m_Instances,pivot,m_DistanceFunction));}  }
class C{  public ComboBoxRenderer(){  setOpaque(true);  setHorizontalAlignment(LEFT);  setVerticalAlignment(CENTER);}  }
class C{  public Item withEnabled(boolean enabled){  this.mEnabled=enabled;  return (Item)this;}  }
class C{  static public long unpackLong(byte[] ba,int index){  long result=0;  for (int offset=0; offset < 64; offset+=7) {    long b=ba[index++];    result|=(b & 0x7F) << offset;    if ((b & 0x80) == 0) {      return result;    }  }  throw new Error("Malformed long.");}  }
class C{  public static Map<String,String> parseUrl(String url){  url=url.replace("fbconnect","http");  try {    URL u=new URL(url);    Map<String,String> params=decodeUrl(u.getQuery());    params.putAll(decodeUrl(u.getRef()));    return params;  } catch (  MalformedURLException e) {    return new HashMap<>();  }}  }
class C{  protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  return core.wrap(key);}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.827 -0500",hash_original_method="2C5209A970780A5B14F30F7C2DFA5DF9",hash_generated_method="EC869BF9FC4BCA570DC9F4A5DABCF245") public void handleSslErrorResponse(boolean proceed){  if (mRequest != null) {    mRequest.handleSslErrorResponse(proceed);  }}  }
class C{  public void addEditPopUpMenu(JMenuItem menu){  if (!editAdditionalMenu.contains(menu)) {    editAdditionalMenu.add(menu);  }}  }
class C{  public ExtendedClassesIterable(TClass root){  this.root=root;}  }
class C{  private Set<IEditorReference> isScopeIdOpen(int scopeId) throws PartInitException {  Set<IEditorReference> closeableEditors=new HashSet();  for (  IEditorReference editorReference : PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences()) {    Object o=editorReference.getEditorInput();    if (o instanceof BSIElementEditorInput) {      BSIElementEditorInput bsiElementEditorInput=(BSIElementEditorInput)o;      if (scopeId == bsiElementEditorInput.getCnAElement().getScopeId()) {        closeableEditors.add(editorReference);      }    }  }  return closeableEditors;}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path("/annotations") @Description("Submits externally collected annotation data.") public Map<String,Object> submitAnnotations(@Context HttpServletRequest req,final List<AnnotationDto> annotationDtos){  PrincipalUser remoteUser=getRemoteUser(req);  SystemAssert.requireArgument(annotationDtos != null,"Cannot submit null annotations list.");  List<Annotation> legalAnnotations=new ArrayList<>();  List<AnnotationDto> illegalAnnotations=new ArrayList<>();  List<String> errorMessages=new ArrayList<>();  for (  AnnotationDto annotationDto : annotationDtos) {    try {      Annotation annotation=new Annotation(annotationDto.getSource(),annotationDto.getId(),annotationDto.getType(),annotationDto.getScope(),annotationDto.getMetric(),annotationDto.getTimestamp());      copyProperties(annotation,annotationDto);      legalAnnotations.add(annotation);    } catch (    Exception e) {      illegalAnnotations.add(annotationDto);      errorMessages.add(e.getMessage());    }  }  _collectionService.submitAnnotations(remoteUser,legalAnnotations);  Map<String,Object> result=new HashMap<>();  result.put("Success",legalAnnotations.size() + " annotations");  result.put("Error",illegalAnnotations.size() + " annotations");  result.put("Error Messages",errorMessages);  return result;}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public StringIndexOutOfBoundsException(@Nullable String s){  super(s);}  }
class C{  public ProfileRable(Filter src,ICCColorSpaceExt colorSpace){  super(src);  this.colorSpace=colorSpace;}  }
class C{  public LocalVmManager(){  this(null);}  }
class C{  public void test_DELETE_accessPath_delete_o_Literal() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,null,new URIImpl("http://www.bigdata.com/Bryan"));  assertEquals(1,mutationResult);}  }
class C{  public InlineQueryResultMpeg4Gif.InlineQueryResultMpeg4GifBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  s.append(V + " vertices, " + E+ " edges "+ NEWLINE);  for (int v=0; v < V; v++) {    s.append(String.format("%d: ",v));    for (    int w : adj[v]) {      s.append(String.format("%d ",w));    }    s.append(NEWLINE);  }  return s.toString();}  }
class C{  static long durationMillis(long startNanos){  return (System.nanoTime() - startNanos) / (1000L * 1000L);}  }
class C{  public Subject login(String username,String password){  if (StringUtils.isBlank(username) || StringUtils.isBlank(password))   return null;  Properties credentials=new Properties();  credentials.setProperty(ResourceConstants.USER_NAME,username);  credentials.setProperty(ResourceConstants.PASSWORD,password);  return login(credentials);}  }
class C{  public TabState restoreTabState(int tabId,boolean encrypted){  return TabState.restoreTabState(getTabStateFile(tabId,encrypted),encrypted);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.971 -0400",hash_original_method="F4A3D80B5A2814FAD6E3165323DA2B3F",hash_generated_method="B9F4A18BC8F4B2B576F83CC8FC1247DB") private static String matchablePath(String path){  if (path == null) {    return "/";  } else   if (path.endsWith("/")) {    return path;  } else {    return path + "/";  }}  }
class C{  public void testMd5FileCheck() throws Exception {  undeployCntr.set(0);  DeploymentResource task=getSpi().findResource("GridUriDeploymentTestWithNameTask7");  assert task == null;  U.copy(getGarFile(),new File(getDeployDir(),"uri1.gar"),true);  Thread.sleep(500);  task=getSpi().findResource("GridUriDeploymentTestWithNameTask7");  assert task != null;  assert undeployCntr.get() == 0;  U.copy(getGarFile(),new File(getDeployDir(),"uri2.gar"),true);  Thread.sleep(500);  task=getSpi().findResource("GridUriDeploymentTestWithNameTask7");  assert task != null;  assert undeployCntr.get() == 0;}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  private boolean isLiteral(int c){switch (c) {case '=':case '<':case '>':case '/':case ' ':    return false;default :  return true;}}  }
class C{  public List<String> listDbsByUserInfo(String user,boolean restricted){  Set<String> mydb=this.getMyDatabases(user,restricted).getMyDbList();  List<String> alldb=new ArrayList<String>(this.groups.size());synchronized (this) {    for (    String db : mydb) {      if (this.groups.containsKey(db))       alldb.add(db);    }    if (!restricted)     for (    String key : this.groups.keySet()) {      if (!mydb.contains(key))       alldb.add(key);    }  }  return alldb;}  }
class C{  public static boolean isEncoded(final HttpEntity entity){  final Header contentType=entity.getContentType();  return (contentType != null && contentType.getValue().equalsIgnoreCase(CONTENT_TYPE));}  }
class C{  private void addADTStoPacket(byte[] packet,int packetLen){  int profile=2;  int freqIdx=4;  int chanCfg=2;  packet[0]=(byte)0xFF;  packet[1]=(byte)0xF9;  packet[2]=(byte)(((profile - 1) << 6) + (freqIdx << 2) + (chanCfg >> 2));  packet[3]=(byte)(((chanCfg & 3) << 6) + (packetLen >> 11));  packet[4]=(byte)((packetLen & 0x7FF) >> 3);  packet[5]=(byte)(((packetLen & 7) << 5) + 0x1F);  packet[6]=(byte)0xFC;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementretrieveallattributes.class,args);}  }
class C{  protected int stableAttrsSize(){  return 8;}  }
class C{  public void add(final SpeakerNPC npc,final MerchantBehaviour behaviour){  final String npcName=npc.getName();  npc.put("job_merchant",0);  if (behaviour instanceof BuyerBehaviour) {    Pair<String,BuyerBehaviour> pair=new Pair<String,BuyerBehaviour>(npcName,(BuyerBehaviour)behaviour);    buyers.add(pair);  } else {    Pair<String,SellerBehaviour> pair=new Pair<String,SellerBehaviour>(npcName,(SellerBehaviour)behaviour);    sellers.add(pair);  }}  }
class C{  public void init(boolean forSigning,CipherParameters parameters){  this.forSigning=forSigning;  AsymmetricKeyParameter k;  if (parameters instanceof ParametersWithRandom) {    k=(AsymmetricKeyParameter)((ParametersWithRandom)parameters).getParameters();  } else {    k=(AsymmetricKeyParameter)parameters;  }  if (forSigning && !k.isPrivate()) {    throw new IllegalArgumentException("signing requires private key");  }  if (!forSigning && k.isPrivate()) {    throw new IllegalArgumentException("verification requires public key");  }  reset();  rsaEngine.init(forSigning,parameters);}  }
class C{  public static MockTemperatureSensor temperatureSensor(){  return new MockTemperatureSensor();}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  protected void checkIntegrity() throws MalformedTreeException {}  }
class C{  @Override public boolean hasStableIds(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:06.353 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public static boolean endsWith(BytesRef ref,BytesRef suffix){  return sliceEquals(ref,suffix,ref.length - suffix.length);}  }
class C{  protected PShape createShapePrimitive(int kind,float... p){  return new PShape(this,kind,p);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public ElmProt(){}  }
class C{  public void applyLayoutUpdate(View view,int x,int y,int width,int height){  UiThreadUtil.assertOnUiThread();  AbstractLayoutAnimation layoutAnimation=(view.getWidth() == 0 || view.getHeight() == 0) ? mLayoutCreateAnimation : mLayoutUpdateAnimation;  Animation animation=layoutAnimation.createAnimation(view,x,y,width,height);  if (animation == null || !(animation instanceof HandleLayout)) {    view.layout(x,y,x + width,y + height);  }  if (animation != null) {    view.startAnimation(animation);  }}  }
class C{  default SimpleReactStream<T> toSimpleReact(){  return new SimpleReact().ofAsync(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.387 -0500",hash_original_method="C36F73D80556F0AA7A8914E669A58B4A",hash_generated_method="93CE7279FC564F96637EFF721C7474AD") public BufferIterator littleEndianIterator(){  return new NioBufferIterator((int)address,(int)size,ByteOrder.nativeOrder() != ByteOrder.LITTLE_ENDIAN);}  }
class C{  public boolean isSuper(){  return iterator.byteAt(currentPos) == INVOKESPECIAL && !where().getDeclaringClass().getName().equals(getClassName());}  }
class C{  boolean forgetNetwork(int netId){  if (mWifiNative.removeNetwork(netId)) {    for (    WifiConfiguration config : mConfiguredNetworks.values()) {      if (config != null && config.status == Status.DISABLED) {        if (mWifiNative.enableNetwork(config.networkId,false)) {          config.status=Status.ENABLED;        } else {          loge("Enable network failed on " + config.networkId);        }      }    }    mWifiNative.saveConfig();    removeConfigAndSendBroadcastIfNeeded(netId);    return true;  } else {    loge("Failed to remove network " + netId);    return false;  }}  }
class C{  protected static void emit_parser() throws internal_error {  emit.symbols(symbol_class_file,include_non_terms);  emit.parser(parser_class_file,action_table,reduce_table,start_state.index(),emit.start_production,opt_compact_red);}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.SYSTEM_ADMIN}) public SMISProviderRestRep updateSMISProvider(@PathParam("id") URI id,SMISProviderUpdateParam param){  StorageProvider smisProvider=_dbClient.queryObject(StorageProvider.class,id);  if (null == smisProvider) {    throw APIException.notFound.unableToFindEntityInURL(id);  } else   if (!smisProvider.getInactive()) {    if (param.getName() != null && !param.getName().equals("") && !param.getName().equalsIgnoreCase(smisProvider.getLabel())) {      checkForDuplicateName(param.getName(),StorageProvider.class);      smisProvider.setLabel(param.getName());    }    String existingIPAddress=smisProvider.getIPAddress();    Integer existingPortNumber=smisProvider.getPortNumber();    if ((param.getIpAddress() != null && !param.getIpAddress().equals(existingIPAddress)) || (param.getPortNumber() != null && !param.getPortNumber().equals(existingPortNumber))) {      String ipAddress=(param.getIpAddress() != null) ? param.getIpAddress() : existingIPAddress;      Integer portNumber=(param.getPortNumber() != null) ? param.getPortNumber() : existingPortNumber;      ArgValidator.checkFieldRange(portNumber,1,65535,"port_number");      String providerKey=ipAddress + "-" + portNumber;      List<StorageProvider> providers=CustomQueryUtility.getActiveStorageProvidersByProviderId(_dbClient,providerKey);      if (providers != null && !providers.isEmpty()) {        throw APIException.badRequests.invalidParameterSMISProviderAlreadyRegistered(providerKey);      }      if (!existingIPAddress.equals(param.getIpAddress()) && isOldConnectionAlive(existingIPAddress,existingPortNumber,smisProvider.getInterfaceType())) {        throw APIException.badRequests.cannotUpdateProviderIP(existingIPAddress + "-" + existingPortNumber);      }      smisProvider.setIPAddress(ipAddress);      smisProvider.setPortNumber(portNumber);    }    if (param.getUserName() != null && !param.getUserName().equals("")) {      smisProvider.setUserName(param.getUserName());    }    if (param.getPassword() != null && !param.getPassword().equals("")) {      smisProvider.setPassword(param.getPassword());    }    if (param.getUseSSL() != null) {      smisProvider.setUseSSL(param.getUseSSL());    }    _dbClient.persistObject(smisProvider);  }  auditOp(OperationTypeEnum.UPDATE_SMISPROVIDER,true,null,smisProvider.getId().toString(),smisProvider.getLabel(),smisProvider.getIPAddress(),smisProvider.getPortNumber(),smisProvider.getUserName());  return mapStorageProviderToSMISRep(smisProvider);}  }
class C{  public static CommandLineResult executeCommandLine(@Nullable final Map<String,String> env,final String cmd,@Nullable final String[] args,@Nullable final String[] redactedArgs,final long timeout,@Nullable final File workingDirectory) throws IOException {  return executeCommandLine(env,cmd,args,null,timeout,workingDirectory,null);}  }
class C{  private void closeStream(String msg,long length){  if (wrappedStream != null) {    long remaining=remainingInCurrentRequest();    boolean shouldAbort=remaining > readahead;    if (!shouldAbort) {      try {        wrappedStream.close();      } catch (      IOException e) {        LOG.debug("When closing {} stream for {}",uri,msg,e);        shouldAbort=true;      }    }    if (shouldAbort) {      wrappedStream.abort();    }    LOG.trace("Close stream {} {}: {}; streamPos={}, nextReadPos={}," + " request range {}-{} length={}",uri,(shouldAbort ? "aborted" : "closed"),msg,pos,nextReadPos,contentRangeStart,contentRangeFinish,length);    wrappedStream=null;  }}  }
class C{  public final void testEqualsObject01(){  ECFieldF2m obj=new ECFieldF2m(1999,new int[]{367});  assertTrue(obj.equals(obj));}  }
class C{  public static List<AssociationRule> generateRulesBruteForce(FrequentItemSets largeItemSets,DefaultAssociationRule.METRIC_TYPE metricToUse,double metricThreshold,int upperBoundMinSuppAsInstances,int lowerBoundMinSuppAsInstances,int totalTransactions){  List<AssociationRule> rules=new ArrayList<AssociationRule>();  largeItemSets.sort();  Map<Collection<BinaryItem>,Integer> frequencyLookup=new HashMap<Collection<BinaryItem>,Integer>();  Iterator<FrequentBinaryItemSet> setI=largeItemSets.iterator();  while (setI.hasNext()) {    FrequentBinaryItemSet fis=setI.next();    frequencyLookup.put(fis.getItems(),fis.getSupport());    if (fis.getItems().size() > 1) {      boolean[] subset=new boolean[fis.getItems().size()];      Collection<Item> premise=null;      Collection<Item> consequence=null;      while ((premise=getPremise(fis,subset)) != null) {        if (premise.size() > 0 && premise.size() < fis.getItems().size()) {          consequence=getConsequence(fis,subset);          int totalSupport=fis.getSupport();          int supportPremise=frequencyLookup.get(premise).intValue();          int supportConsequence=frequencyLookup.get(consequence).intValue();          DefaultAssociationRule candidate=new DefaultAssociationRule(premise,consequence,metricToUse,supportPremise,supportConsequence,totalSupport,totalTransactions);          if (candidate.getPrimaryMetricValue() > metricThreshold && candidate.getTotalSupport() >= lowerBoundMinSuppAsInstances && candidate.getTotalSupport() <= upperBoundMinSuppAsInstances) {            rules.add(candidate);          }        }        nextSubset(subset);      }    }  }  return rules;}  }
class C{  public boolean containsNested(S2Loop b){  if (!bound.contains(b.getRectBound())) {    return false;  }  int m=findVertex(b.vertex(1));  if (m < 0) {    return contains(b.vertex(1));  }  return (new S2EdgeUtil.WedgeContains()).test(vertex(m - 1),vertex(m),vertex(m + 1),b.vertex(0),b.vertex(2)) > 0;}  }
class C{  public final boolean sendEmptyMessageDelayed(int what,long delayMillis){  return mExec.sendEmptyMessageDelayed(what,delayMillis);}  }
class C{  @Override protected void update(){  super.update();  m_Statistics=new ArrayList<>();  if (m_Experiment != null)   m_Statistics.addAll(m_Experiment.getStatistics());  updateView();}  }
class C{  public void disconnect(){  try {    mCtx.unbindService(apiConnection);  } catch (  IllegalArgumentException e) {  }}  }
class C{  public MembersInvitationAdapter(Context context,HomeserverConnectionConfig hsConfig,int layoutResourceId,MXMediasCache mediasCache){  super(context,layoutResourceId);  mContext=context;  mLayoutResourceId=layoutResourceId;  mLayoutInflater=LayoutInflater.from(mContext);  mSelectedMembers=new ArrayList<RoomMember>();  mMediasCache=mediasCache;  mHsConfig=hsConfig;  setNotifyOnChange(false);}  }
class C{  private FactoryHelper(){}  }
class C{  private static void copy(File inFile,File outFile) throws IOException {  FileInputStream fin=null;  FileOutputStream fout=null;  try {    fin=new FileInputStream(inFile);    fout=new FileOutputStream(outFile);    copy(fin,fout);  }  finally {    try {      if (fin != null)       fin.close();    } catch (    IOException e) {    }    try {      if (fout != null)       fout.close();    } catch (    IOException e) {    }  }}  }
class C{  public OptionMultiFileGUI_NB(){  initComponents();}  }
class C{  public GemFireRethrowable(){}  }
class C{  public FaultEvent endPlayerCodeExecution(int isolateId){  DManagerIsolateState state=getIsolateState(isolateId);  state.m_executingPlayerCode=false;  FaultEvent e=state.m_faultEventDuringPlayerCodeExecution;  state.m_faultEventDuringPlayerCodeExecution=null;  return e;}  }
class C{  public void ignoreBytestreamRequestOnce(String sessionID){  this.ignoredBytestreamRequests.add(sessionID);}  }
class C{  private static void drawTriangleDown(Graphics gx,double x,double y,int size){  gx.drawLine((int)(x),(int)(y + size),(int)(x - size),(int)(y - size));  gx.drawLine((int)(x - size),(int)(y - size),(int)(x + size),(int)(y - size));  gx.drawLine((int)(x + size),(int)(y - size),(int)(x),(int)(y + size));}  }
class C{  protected static List<String> checkOsRequirements(final String osName,final String osVersion){  final ArrayList<String> result=new ArrayList<String>();  if (Provider.isMac(osName)) {    final Version version=Version.parseVersion(osVersion);    final String badVersionMessage="The version of Mac OS X running is " + version.getMajor() + "."+ version.getMinor()+ "."+ version.getPatch()+ " which does not meet the minimum version of 10.9.5 needed for installation. Please upgrade to Mac OS X 10.9.5 or above to proceed.";    if (version.getMajor() < 10) {      result.add(badVersionMessage);    } else     if (version.getMajor() == 10) {      if (version.getMinor() < 9) {        result.add(badVersionMessage);      } else       if (version.getMinor() == 9) {        if (version.getPatch() < 5) {          result.add(badVersionMessage);        }      }    }  } else   if (Provider.isLinux(osName)) {  } else   if (Provider.isWindows(osName)) {    result.add("It looks like you are running on Windows, please consider using the Git Credential Manager for Windows: https://github.com/Microsoft/Git-Credential-Manager-for-Windows");  } else {    result.add("The Git Credential Manager for Mac and Linux is only supported on, well, Mac OS X and Linux. The operating system detected is " + osName + ", which is not supported.");  }  return result;}  }
class C{  @Pure public static boolean isVMIdentifierStart(char c){  return ((!Character.isWhitespace(c)) && isVMIdentifierPart(c));}  }
class C{  protected void dumpStmtBody(StmtBody stmtBody){  System.out.printf("Dumping statement body ");  Chain units=stmtBody.getUnits();  Chain locals=stmtBody.getLocals();  Iterator localIt=locals.snapshotIterator();  while (localIt.hasNext()) {    Local local=(Local)localIt.next();    System.out.printf("%s %s\n",local.getType(),local.getName());  }  Iterator stmtIt=units.snapshotIterator();  while (stmtIt.hasNext()) {    Stmt stmt=(Stmt)stmtIt.next();    System.out.printf("%s \n",stmt);  }}  }
class C{  private void showMainLayout(){  mMainLayout.setVisibility(View.VISIBLE);  mProgressTextView.setVisibility(View.GONE);}  }
class C{  private BinaryProperty buildBinaryProperty(String pathStr,Class<?> resType,Map<String,String> aliases){  String[] path=pathStr.split("\\.");  BinaryProperty res=null;  StringBuilder fullName=new StringBuilder();  for (  String prop : path) {    if (fullName.length() != 0)     fullName.append('.');    fullName.append(prop);    String alias=aliases.get(fullName.toString());    res=new BinaryProperty(prop,res,resType,alias);  }  return res;}  }
class C{  private JPopupMenu createPopupMenu(){  JPopupMenu menu=new JPopupMenu();  LogModel currentModel=getLogSelectionModel().getCurrentLogModel();  if (currentModel != null && currentModel.equals(RapidMinerGUI.getDefaultLogModel())) {    menu.add(TOGGLE_CLEAR_ON_START_ACTION.createMenuItem());  }  if (currentModel != null && currentModel.getLogMode() != LogMode.PULL) {    menu.add(CLEAR_MESSAGE_VIEWER_ACTION);  } else {    menu.add(CLOSE_ACTION);  }  menu.add(SAVE_LOGFILE_ACTION);  menu.add(SEARCH_ACTION);  if (currentModel != null && currentModel.getLogMode() == LogMode.PULL) {    menu.add(REFRESH_ACTION);  }  menu.addSeparator();  menu.add(makeLogLevelMenu());  return menu;}  }
class C{  @Override public void onDeleted(List<String> chatIds) throws RemoteException {  mListener.onDeleted(new HashSet<>(chatIds));}  }
class C{  public int findMax(PairDblInt[] cols){  int maxIdx=0;  double maxVal=-1.0;  for (int i=0; i < numLabels; i++) {    if (cols[i].first > maxVal) {      maxVal=cols[i].first;      maxIdx=i;    }  }  return maxIdx;}  }
class C{  public void removeFrom(Object obj){  mapHandler.remove(obj);}  }
class C{  public JSONObject fetchRecentChangesBackoff(Date nextStartTime,int batchSize,boolean useBackoff) throws RetryableException {  if (useBackoff) {    return fetchRecentChanges(backoffTime(nextStartTime),batchSize);  } else {    return fetchRecentChanges(nextStartTime,batchSize);  }}  }
class C{  public static double[] one(int m,double c){  return fill(m,c);}  }
class C{  public Matrix3f mul(Matrix3fc right){  return mul(right,this);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int mediaMask=DBObject.MEDIA_MASK_ALL;  if (curNumberOfParameters == 1) {    mediaMask=getMediaMask(stack);  }  String[] allCats=Wizard.getInstance().getAllCategories(mediaMask);  java.util.Map catMap=new java.util.HashMap();  for (int i=0; i < allCats.length; i++) {    java.util.StringTokenizer toker=new java.util.StringTokenizer(allCats[i],";,");    while (toker.hasMoreTokens()) {      String toke=toker.nextToken().trim();      String tokeUp=toke.toUpperCase();      if (!catMap.containsKey(tokeUp))       catMap.put(tokeUp,toke);    }  }  String[] rv=(String[])catMap.values().toArray(Pooler.EMPTY_STRING_ARRAY);  java.util.Arrays.sort(rv);  return rv;}  }
class C{  public void clear(){  m.clear();}  }
class C{  public boolean isVisible(){  return popup != null;}  }
class C{  public void removeExpiredOffer(Offer offerToRemove){  this.getSlot(EXPIRED_OFFERS_SLOT_NAME).remove(offerToRemove.getID());  Item item=offerToRemove.getItem();  if (item != null) {    new ItemLogger().destroy(null,this.getSlot(EXPIRED_OFFERS_SLOT_NAME),item,"timeout");  }  this.getZone().storeToDatabase();}  }
class C{  public static XMLTree from(byte[] xml){  requireNonNull(xml,"Required not null bytes");  return new XMLTree(Arrays.copyOf(xml,xml.length));}  }
class C{  public static boolean isValid(String entry){  boolean result=true;  try {    shouldRun(entry);  } catch (  Exception ex) {    result=false;  }  return result;}  }
class C{  public final void destroy(){  checkAccess();synchronized (this.childrenThreadsLock) {synchronized (this.childrenGroupsLock) {      int toDestroy=numGroups;      for (int i=0; i < toDestroy; i++) {        this.childrenGroups[0].destroy();      }      if (parent != null) {        parent.remove(this);      }      this.isDestroyed=true;    }  }}  }
class C{  public Shape createArrowUp(final double x,final double y,final double w,final double h){  path.reset();  path.moveTo(x,y + h);  path.lineTo(x + w / 2,y);  path.lineTo(x + w,y + h);  path.closePath();  return path;}  }
class C{  protected static boolean isTrue(boolean expression,String message){  if (!expression)   throw new AssertionFailedException("assertion failed: " + message);  return expression;}  }
class C{  public CenterQuad(float width,float height){  updateGeometry(width,height);}  }
class C{  public NodePortTuple(DatapathId nodeId,OFPort portId){  this.nodeId=nodeId;  this.portId=portId;}  }
class C{  private String buildOrfIdentifier(OpenReadingFrame orf){  return "orf_" + getIdentifierSuffix(orf);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static MediaType parse(String input){  checkNotNull(input);  Tokenizer tokenizer=new Tokenizer(input);  try {    String type=tokenizer.consumeToken(TOKEN_MATCHER);    tokenizer.consumeCharacter('/');    String subtype=tokenizer.consumeToken(TOKEN_MATCHER);    ImmutableListMultimap.Builder<String,String> parameters=ImmutableListMultimap.builder();    while (tokenizer.hasMore()) {      tokenizer.consumeCharacter(';');      tokenizer.consumeTokenIfPresent(LINEAR_WHITE_SPACE);      String attribute=tokenizer.consumeToken(TOKEN_MATCHER);      tokenizer.consumeCharacter('=');      final String value;      if ('"' == tokenizer.previewChar()) {        tokenizer.consumeCharacter('"');        StringBuilder valueBuilder=new StringBuilder();        while ('"' != tokenizer.previewChar()) {          if ('\\' == tokenizer.previewChar()) {            tokenizer.consumeCharacter('\\');            valueBuilder.append(tokenizer.consumeCharacter(ascii()));          } else {            valueBuilder.append(tokenizer.consumeToken(QUOTED_TEXT_MATCHER));          }        }        value=valueBuilder.toString();        tokenizer.consumeCharacter('"');      } else {        value=tokenizer.consumeToken(TOKEN_MATCHER);      }      parameters.put(attribute,value);    }    return create(type,subtype,parameters.build());  } catch (  IllegalStateException e) {    throw new IllegalArgumentException("Could not parse '" + input + "'",e);  }}  }
class C{  private void addKeyMultiValueElements(Map.Entry<String,List<String>> entry,Directives directives){  for (  String value : entry.getValue()) {    directives.add(entry.getKey()).set(value).up();  }}  }
class C{  private static NSObject parseObject(Node n) throws ParseException, IOException {  String type=n.getNodeName();  if (type.equals("dict")) {    NSDictionary dict=new NSDictionary();    List<Node> children=filterElementNodes(n.getChildNodes());    for (int i=0; i < children.size(); i+=2) {      Node key=children.get(i);      Node val=children.get(i + 1);      String keyString=getNodeTextContents(key);      dict.put(keyString,parseObject(val));    }    return dict;  } else   if (type.equals("array")) {    List<Node> children=filterElementNodes(n.getChildNodes());    NSArray array=new NSArray(children.size());    for (int i=0; i < children.size(); i++) {      array.setValue(i,parseObject(children.get(i)));    }    return array;  } else   if (type.equals("true")) {    return new NSNumber(true);  } else   if (type.equals("false")) {    return new NSNumber(false);  } else   if (type.equals("integer")) {    return new NSNumber(getNodeTextContents(n));  } else   if (type.equals("real")) {    return new NSNumber(getNodeTextContents(n));  } else   if (type.equals("string")) {    return new NSString(getNodeTextContents(n));  } else   if (type.equals("data")) {    return new NSData(getNodeTextContents(n));  } else   if (type.equals("date")) {    return new NSDate(getNodeTextContents(n));  }  return null;}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  public static InputStream openContactPhotoInputStream(ContentResolver cr,Uri contactUri,boolean preferHighres){  if (preferHighres) {    final Uri displayPhotoUri=Uri.withAppendedPath(contactUri,Contacts.Photo.DISPLAY_PHOTO);    InputStream inputStream;    try {      AssetFileDescriptor fd=cr.openAssetFileDescriptor(displayPhotoUri,"r");      return fd.createInputStream();    } catch (    IOException e) {    }  }  Uri photoUri=Uri.withAppendedPath(contactUri,Photo.CONTENT_DIRECTORY);  if (photoUri == null) {    return null;  }  Cursor cursor=cr.query(photoUri,new String[]{ContactsContract.CommonDataKinds.Photo.PHOTO},null,null,null);  try {    if (cursor == null || !cursor.moveToNext()) {      return null;    }    byte[] data=cursor.getBlob(0);    if (data == null) {      return null;    }    return new ByteArrayInputStream(data);  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.429 -0500",hash_original_method="564A7128C5B00F982644F6E1BD9B5118",hash_generated_method="CA381C39136474BC252F3F016835318F") public DefaultClientConnectionOperator(SchemeRegistry schemes){  if (schemes == null) {    throw new IllegalArgumentException("Scheme registry must not be null.");  }  schemeRegistry=schemes;}  }
class C{  public void loadProperties(final InputStream is){  properties.loadProperties(is);}  }
class C{  public ByteArrayBody(final byte[] data,final String mimeType,final String filename){  super(mimeType);  if (data == null) {    throw new IllegalArgumentException("byte[] may not be null");  }  this.data=data;  this.filename=filename;}  }
class C{  public void codeValue(Environment env,Context ctx,Assembler asm){  right.codeValue(env,ctx,asm);  asm.add(where,opc_ldc,new Integer(1));  asm.add(where,opc_ixor);}  }
class C{  public boolean isSetSyncOffer(){  return this.syncOffer != null;}  }
class C{  public static void putPWStat(long id,Stat type,double s){  if (_disabled)   return;  if (!_pwstats.containsKey(id))   _pwstats.put(id,new HashMap<Stat,LinkedList<Double>>());  HashMap<Stat,LinkedList<Double>> allstats=_pwstats.get(id);  if (!allstats.containsKey(type))   allstats.put(type,new LinkedList<Double>());  LinkedList<Double> stats=allstats.get(type);  stats.addLast(s);}  }
class C{  public static Object[] ordinalArray(TupleSet tuples,String field){  return ordinalArray(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  protected void sequence_ForStatement(ISerializationContext context,ForStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public BRView(Element elem){  super(elem);}  }
class C{  public void copyCredentialsFromControllerSettings(ProvisioningSettings settings,HashMap<String,String> controllerSettings){  String userKey=controllerSettings.get(ControllerConfigurationKey.BSS_USER_KEY.name());  String userPwd=controllerSettings.get(ControllerConfigurationKey.BSS_USER_PWD.name());  if (!Strings.isEmpty(userKey) && !Strings.isEmpty(userPwd)) {    settings.getParameters().put(InstanceParameter.BSS_USER,userKey);    settings.getParameters().put(InstanceParameter.BSS_USER_PWD,userPwd);  }}  }
class C{  public static int threadId(Env env){  return Mutator.current().getContext().getId();}  }
class C{  public void visit(String name,Object value){  if (visitor != null) {    visitor.visit(name,value);  }}  }
class C{  public long createLangGameWord(String rootword,String language,String englishtranslation,String difficulty){  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_LANG_ROOTWORD,rootword);  initialValues.put(KEY_LANG_LANGUAGE,language);  initialValues.put(KEY_LANG_ENGLISHTRANS,englishtranslation);  initialValues.put(KEY_GAME_DIFFICULTY,difficulty);  return mDb.insert(TABLE_LEXIS,null,initialValues);}  }
class C{  @Override public void processEvent(SimEvent ev){switch (ev.getTag()) {case CloudSimTags.RESOURCE_CHARACTERISTICS_REQUEST:    processResourceCharacteristicsRequest(ev);  break;case CloudSimTags.RESOURCE_CHARACTERISTICS:processResourceCharacteristics(ev);break;case CloudSimTags.CLOUDLET_RETURN:processCloudletReturn(ev);break;case CloudSimTags.END_OF_SIMULATION:shutdownEntity();break;case CloudSimTags.NextCycle:if (NetworkConstants.BASE) {createVmsInDatacenterBase(linkDC.getId());}break;default :processOtherEvent(ev);break;}}  }
class C{  @VisibleForTesting protected String tabRow(String[] columns){  Preconditions.checkNotNull(columns);  boolean empty=true;  for (int i=0; i < columns.length; i++) {    if (columns[i] != null) {      empty=false;      columns[i]=StringUtils.trimToNull(escapeChars.matcher(columns[i]).replaceAll(" "));    }  }  if (empty) {    return null;  }  return StringUtils.join(columns,'\t') + "\n";}  }
class C{  @Override public Cursor runQueryOnBackgroundThread(CharSequence constraint){  if (DBG)   Log.d(LOG_TAG,"runQueryOnBackgroundThread(" + constraint + ")");  String query=(constraint == null) ? "" : constraint.toString();  Cursor cursor=null;  if (mSearchView.getVisibility() != View.VISIBLE || mSearchView.getWindowVisibility() != View.VISIBLE) {    return null;  }  try {    cursor=getSuggestions(query,QUERY_LIMIT);    if (cursor != null) {      cursor.getCount();      return cursor;    }  } catch (  RuntimeException e) {    Log.w(LOG_TAG,"Search suggestions query threw an exception.",e);  }  return null;}  }
class C{  public static int rgb(int r,int g,int b){  return argb(0xff,r,g,b);}  }
class C{  public static weka.core.Instance tcInstanceToWekaInstance(Instance instance,Instances trainingData,List<String> allClasses,boolean isRegressionExperiment) throws Exception {  AttributeStore attributeStore=new AttributeStore();  for (int i=0; i < trainingData.numAttributes() - 1; i++) {    attributeStore.addAttribute(trainingData.attribute(i).name(),trainingData.attribute(i));  }  Attribute outcomeAttribute=createOutcomeAttribute(allClasses,isRegressionExperiment);  attributeStore.addAttribute(outcomeAttribute.name(),outcomeAttribute);  double[] featureValues=getFeatureValues(attributeStore,instance);  SparseInstance sparseInstance=new SparseInstance(1.0,featureValues);  sparseInstance.setDataset(trainingData);  return sparseInstance;}  }
class C{  public boolean determines(List<Node> z,Node x) throws UnsupportedOperationException {  throw new UnsupportedOperationException();}  }
class C{  @Override public int read(byte[] buf,int offset,int length) throws IOException {  try {    SocketChannel s=_s;    if (s == null) {      return -1;    }    int remaining=_readBuffer.remaining();    if (remaining <= 0) {      _readBuffer.clear();      if (s.read(_readBuffer) < 0) {        _readBuffer.flip();        return -1;      }      _readBuffer.flip();      remaining=_readBuffer.remaining();    }    int sublen=Math.min(remaining,length);    _readBuffer.get(buf,offset,sublen);    int readLength=sublen;    if (readLength >= 0) {      _totalReadBytes+=readLength;    }    return readLength;  } catch (  InterruptedIOException e) {    if (_throwReadInterrupts)     throw e;    log.log(Level.FINEST,e.toString(),e);  }catch (  IOException e) {    if (_throwReadInterrupts) {      throw e;    }    if (log.isLoggable(Level.FINEST)) {      log.log(Level.FINEST,e.toString(),e);    } else {      log.finer(e.toString());    }  }  return -1;}  }
class C{  private static void printGoalEventDetails(EventDetails eventDetails){  System.out.println("Goal Type:  EVENT");  System.out.println("EVENT - Use Event Value: " + eventDetails.getUseEventValue());  if (eventDetails.getEventConditions() != null) {    System.out.println("Goal Conditions: ");    for (    EventConditions conditions : eventDetails.getEventConditions()) {      System.out.println("Type: " + conditions.getType());      if (conditions.getType().equals("VALUE")) {        System.out.println("Comparison Type: " + conditions.getComparisonType());        System.out.println("Comparison Value: " + conditions.getComparisonValue());      } else {        System.out.println("matchType: " + conditions.getMatchType());        System.out.println("expression: " + conditions.getExpression());      }    }  }}  }
class C{  public void writeHouseholds(String outputfolder){  if (this.sc.getHouseholds() == null || this.sc.getHouseholds().getHouseholdAttributes() == null) {    throw new RuntimeException("Either no households or household attributes to write.");  } else {    LOG.info("Writing households to file... (" + this.sc.getHouseholds().getHouseholds().size() + ")");    HouseholdsWriterV10 hw=new HouseholdsWriterV10(this.sc.getHouseholds());    hw.setPrettyPrint(true);    hw.writeFile(outputfolder + "Households.xml");    LOG.info("Writing household attributes to file...");    ObjectAttributesXmlWriter oaw=new ObjectAttributesXmlWriter(sc.getHouseholds().getHouseholdAttributes());    oaw.setPrettyPrint(true);    oaw.writeFile(outputfolder + "HouseholdAttributes.xml");  }}  }
class C{  @Deprecated public synchronized boolean isStrictMode(){  return false;}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (val instanceof Long) {          V k=unwrapKey(key);          long v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  protected BigDecimal[][] prepareParametersAndOptionsBase(int paramTestMonth,final Subscription subscription,String value) throws Exception {  final BigDecimal[] pricePerUserArray={BD100,BD200,BD300,BD400,BD500,BD600,BD700};  final BigDecimal[] pricePerSubscriptionArray={BD1100,BD1200,BD1300,BD1400,BD1500,BD1600,BD1700};  final BigDecimal costs[][]={{BD100,BD200,BD300,BD400,BD500,BD600},{BD1100,BD1200,BD1300,BD1400,BD1500,BD1600}};  final String[] parametersIdentifiersArray={"CONCURRENT_USER","MAX_FILE_NUMBER","PERIOD","HAS_OPTIONS","BOOLEAN_PARAMETER_TRUE","BOOLEAN_PARAMETER_FALSE"};  String PARAMETER_VALUE="1";  if (value.equals("NumberFormatException")) {    PARAMETER_VALUE="NumberFormatException";  }  final PriceModel priceModel=subscription.getPriceModel();  Date date=getDate(testYear,paramTestMonth,-2,8,0);  for (int i=0; i < 6; i++) {    Parameter parameter=createParameter(parametersIdentifiersArray[i],PARAMETER_VALUE,0,date);    PricedParameter pricedParameter=createPricedParameter(pricePerUserArray[i],pricePerSubscriptionArray[i],priceModel,parameter,date);    createPricedOption(pricePerUserArray[i],pricePerSubscriptionArray[i],pricedParameter,date);  }  if (value.equals("deleteParameterOptionHistory")) {    deleteParameterOptionHistory();  }  if (value.equals("deleteParameterDefinitionHistory")) {    deleteParameterDefinitionHistory();  }  return costs;}  }
class C{  public boolean hasServer(@NonNull Jedis jedis,@NonNull UUID playerUuid) throws ProcessingException {  try {    return jedis.hexists(RedisKeys.PLAYER_REPO.toString(),playerUuid.toString());  } catch (  Exception ex) {    throw new ProcessingException("There was an error checking if \"" + playerUuid + "\" has an owner!",ex);  }}  }
class C{  private static void vecswap(double x[],int a,int b,int n){  for (int i=0; i < n; i++, a++, b++) {    swap(x,a,b);  }}  }
class C{  public CSVParser(){  this(DEFAULT_SEPARATOR,DEFAULT_QUOTE_CHARACTER,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  @Override public long removeAll(){  assertInitialized();  if (DEBUG) {    log.debug(this.toString());  }  final ITupleIterator<?> itr=rangeIterator(0,IRangeQuery.REMOVEALL,indexLocalFilter);  long n=0;  while (itr.hasNext()) {    itr.next();    n++;  }  return n;}  }
class C{  public char[] genericTypeSignature(){  if (this.genericTypeSignature != null)   return this.genericTypeSignature;  return this.genericTypeSignature=CharOperation.concat('T',this.sourceName,';');}  }
class C{  public void start(){  mCtx.registerReceiver(new RcsServiceReceiver(),new IntentFilter(RcsService.ACTION_SERVICE_UP));  mCtx.registerReceiver(new ReceiveTimerToReConnectApi(),new IntentFilter(ACTION_CONNECT));  mRetryCount=0;  connectApis();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().searchByExactTitle(getString(stack),((DBObject.MEDIA_MASK_TV | DBObject.MEDIA_MASK_VIDEO | DBObject.MEDIA_MASK_PICTURE| DBObject.MEDIA_MASK_DVD| DBObject.MEDIA_MASK_BLURAY) & DBObject.MEDIA_MASK_ALL));}  }
class C{  public void parsePersons(String filename){  LOG.info("Parsing persons from " + filename);  Counter counter=new Counter("  persons # ");  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=null;    while ((line=br.readLine()) != null) {      String serial=line.substring(1,12);      String person=line.substring(12,15);      String age=line.substring(15,18);      String gender=line.substring(18,19);      String relationship=line.substring(27,29);      String population=line.substring(32,33);      String income=line.substring(82,84);      String school=line.substring(84,85);      String educationInstitution=line.substring(85,86);      String employment=line.substring(147,148);      String s=Integer.parseInt(age.replaceAll(" ","")) + "," + Gender2011.parseGenderFromCensusCode(gender)+ ","+ Relationship2011.parseRelationshipFromCensusCode(relationship)+ ","+ PopulationGroup2011.parseTypeFromCensusCode(population)+ ","+ School2011.parseEducationFromCensusCode(school,educationInstitution)+ ","+ Employment2011.parseEmploymentFromCensusCode(employment)+ ","+ Income2011.parseIncome2011FromCensusCode(income);      personMap.put(Id.create(serial + "_" + String.valueOf(Integer.parseInt(person.replaceAll(" ",""))),Person.class),s);      counter.incCounter();    }  } catch (  IOException e) {    throw new RuntimeException("Could not read from BufferedReader " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedReader " + filename);    }  }  counter.printCounter();  LOG.info("Done parsing persons (" + personMap.size() + ").");}  }
class C{  private void preorder(){  preorder(root);}  }
class C{  public Alias filter(String filter){  this.filter=filter;  return this;}  }
class C{  public String customPropsFileTipText(){  return "The custom properties that the user can use to override the default ones.";}  }
class C{  public DViewCrl(JDialog parent,String title,Dialog.ModalityType modality,X509CRL crl){  super(parent,title,modality);  this.crl=crl;  initComponents();}  }
class C{  protected void calcModulus(){  float[] values=new float[9];  mMatrixTouch.getValues(values);  mLegendGridModulus=(int)Math.ceil((mData.getXValCount() * mXLegendWidth) / (mContentRect.width() * values[Matrix.MSCALE_X]));}  }
class C{  protected void evalPopChunk(EvolutionState state,int[] numinds,int[] from,int threadnum,SimpleProblemForm p){  ((ec.Problem)p).prepareToEvaluate(state,threadnum);  Subpopulation[] subpops=state.population.subpops;  int len=subpops.length;  for (int pop=0; pop < len; pop++) {    int fp=from[pop];    int upperbound=fp + numinds[pop];    Individual[] inds=subpops[pop].individuals;    for (int x=fp; x < upperbound; x++)     p.evaluate(state,inds[x],pop,threadnum);  }  ((ec.Problem)p).finishEvaluating(state,threadnum);}  }
class C{  @DSComment("Layout") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.439 -0500",hash_original_method="2DBA50ED74E78B2838BC7527149D5669",hash_generated_method="DB53A452C8765AE47CA428268C2E64C8") public TableLayout(Context context){  super(context);  initTableLayout();}  }
class C{  protected void replyRejectPacket(IQ request){  XMPPError xmppError=new XMPPError(XMPPError.Condition.no_acceptable);  IQ error=IQ.createErrorResponse(request,xmppError);  this.connection.sendPacket(error);}  }
class C{  public static InputStream post(URL url,String name1,Object value1,String name2,Object value2,String name3,Object value3) throws IOException {  return new ClientHttpRequest(url).post(name1,value1,name2,value2,name3,value3);}  }
class C{  public static void writeMediumInt(IoBuffer out,int value){  byte[] bytes=new byte[3];  bytes[0]=(byte)((value >>> 16) & 0xff);  bytes[1]=(byte)((value >>> 8) & 0xff);  bytes[2]=(byte)(value & 0xff);  out.put(bytes);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void refresh(){  refresh(new LabelProviderChangedEvent(this));}  }
class C{  public boolean isSourceType(){  return this.sourceTypes != null;}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  PerformanceCriterion expected=(PerformanceCriterion)expectedObj;  PerformanceCriterion actual=(PerformanceCriterion)actualObj;  List<Asserter> averegableAsserter=RapidAssert.ASSERTER_REGISTRY.getAsserterForClass(Averagable.class);  if (averegableAsserter != null) {    for (    Asserter asserter : averegableAsserter) {      asserter.assertEquals(message,expected,actual);    }  } else {    throw new ComparisonFailure("Comparison of " + Averagable.class.toString() + " is not supported. ",expectedObj.toString(),actualObj.toString());  }  assertDouble(message + " (fitness is not equal)",expected.getFitness(),actual.getFitness());  assertDouble(message + " (max fitness is not equal)",expected.getMaxFitness(),actual.getMaxFitness());  assertDouble(message + " (example count is not equal)",expected.getExampleCount(),actual.getExampleCount());}  }
class C{  private static synchronized boolean cancelScheduledTimeout(AsyncTimeout node){  for (AsyncTimeout prev=head; prev != null; prev=prev.next) {    if (prev.next == node) {      prev.next=node.next;      node.next=null;      return false;    }  }  return true;}  }
class C{  public void dragExit(DragSourceEvent dse){  System.out.println("[Source] dragExit");  changeCursor(dse.getDragSourceContext(),DnDConstants.ACTION_NONE);}  }
class C{  protected void defaultFontOrDeath(String method){  defaultFontOrDeath(method,12);}  }
class C{  protected ArrayList<String> createLabels(Element parent) throws Exception {  ArrayList<String> result;  Vector<Element> list;  Element node;  Element labelsnode;  int i;  result=new ArrayList<String>();  labelsnode=null;  list=getChildTags(parent,TAG_LABELS);  if (list.size() > 0) {    labelsnode=list.get(0);  }  if (labelsnode != null) {    list=getChildTags(labelsnode,TAG_LABEL);    for (i=0; i < list.size(); i++) {      node=list.get(i);      result.add(getContent(node));    }  }  return result;}  }
class C{  public void addObject(SearchObject objectToAdd){  this.listOfObjects.addElement(objectToAdd);  for (int i=0; i < this.getDimensions(); i++) {    if (this.getMinimumVectorValue(i) > objectToAdd.getVektor(i)) {      this.setMinimumVectorValue(i,objectToAdd.getVektor(i));    }    if (this.getMaximumVectorValue(i) < objectToAdd.getVektor(i)) {      this.setMaximumVectorValue(i,objectToAdd.getVektor(i));    }    this.setRangeVectorValue(i,this.getMaximumVectorValue(i) - this.getMinimumVectorValue(i));  }}  }
class C{  public String typeAsString(){  String typeStr="?";  String subtypeStr="?";switch (this.type) {case ETYPE_CONTROL:    typeStr=" control/";switch (this.subtype) {case ESTYPE_HEADER:    subtypeStr="header";  break;case ESTYPE_FOOTER:subtypeStr="footer";break;}break;case ETYPE_TRANSACTIONS:typeStr=" transaction/";switch (this.subtype) {case ESTYPE_TRAN_START:subtypeStr="start";break;case ESTYPE_TRAN_COMMIT:subtypeStr="commit";break;case ESTYPE_TRAN_ROLLBACK:subtypeStr="rollback";break;case ESTYPE_TRAN_ROLLBACK_TO_SAVEPOINT:subtypeStr="rollback_to_savepoint";break;case ESTYPE_TRAN_AUDIT:subtypeStr="audit";break;}break;case ETYPE_LCR_DATA:typeStr=" LCR data/";switch (this.subtype) {case ESTYPE_LCR_INSERT:subtypeStr="insert";break;case ESTYPE_LCR_DELETE:subtypeStr="delete";break;case ESTYPE_LCR_UPDATE:subtypeStr="update";break;case ESTYPE_LCR_LOB_WRITE:subtypeStr="LOB write";break;case ESTYPE_LCR_LOB_TRIM:subtypeStr="LOB trim";break;case ESTYPE_LCR_LOB_ERASE:subtypeStr="LOB erase";break;case ESTYPE_LCR_DDL:subtypeStr="DDL";break;}break;case ETYPE_LCR_PLOG:typeStr=" LCR plog/";switch (this.subtype) {case ESTYPE_LCR_PLOG_IFILE:subtypeStr="include plog file";break;case ESTYPE_LCR_PLOG_IFILE_STATS:subtypeStr="include plog file - rowcount";break;}break;default :typeStr=" ?" + this.type + "/";subtypeStr="?" + this.subtype;}return typeStr + subtypeStr;}  }
class C{  public static Double toDouble(float f){  return new Double(f);}  }
class C{  public boolean isPrivacyPolicyAccepted(){  return privacyPolicyAccepted;}  }
class C{  public boolean drawImage(Image img,int x,int y,ImageObserver observer){  Element imageElement=getGenericImageHandler().createElement(getGeneratorContext());  AffineTransform xform=getGenericImageHandler().handleImage(img,imageElement,x,y,img.getWidth(null),img.getHeight(null),getGeneratorContext());  if (xform == null) {    domGroupManager.addElement(imageElement);  } else {    AffineTransform inverseTransform=null;    try {      inverseTransform=xform.createInverse();    } catch (    NoninvertibleTransformException e) {      throw new SVGGraphics2DRuntimeException(ERR_UNEXPECTED);    }    gc.transform(xform);    domGroupManager.addElement(imageElement);    gc.transform(inverseTransform);  }  return true;}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  public static void write(float latPoint,float lonPoint,String stuff,String font,int just,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.TEXT_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_TEXT);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeFloat(latPoint);  dos.writeFloat(lonPoint);  dos.writeByte(just);  properties.setProperty(LPC_LINKTEXTSTRING,stuff);  properties.setProperty(LPC_LINKTEXTFONT,font);  properties.write(dos);}  }
class C{  public DeleteReferencesItem clone(){  DeleteReferencesItem result=new DeleteReferencesItem();  result.SourceNodeId=SourceNodeId;  result.ReferenceTypeId=ReferenceTypeId;  result.IsForward=IsForward;  result.TargetNodeId=TargetNodeId;  result.DeleteBidirectional=DeleteBidirectional;  return result;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processRequest(request,response);}  }
class C{  public boolean isDocNoControlled(){  Object oo=get_Value(COLUMNNAME_IsDocNoControlled);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public double applyMinMaxRescaleCast(double prediction) throws Exception {  if (m_optype != Optype.CONTINUOUS) {    throw new Exception("[TargetMetaInfo] target must be continuous!");  }  if (!Utils.isMissingValue(m_min) && prediction < m_min) {    prediction=m_min;  }  if (!Utils.isMissingValue(m_max) && prediction > m_max) {    prediction=m_max;  }  prediction*=m_rescaleFactor;  prediction+=m_rescaleConstant;  if (m_castInteger.length() > 0) {    if (m_castInteger.equals("round")) {      prediction=Math.round(prediction);    } else     if (m_castInteger.equals("ceiling")) {      prediction=Math.ceil(prediction);    } else     if (m_castInteger.equals("floor")) {      prediction=Math.floor(prediction);    } else {      throw new Exception("[TargetMetaInfo] unknown castInteger value " + m_castInteger);    }  }  return prediction;}  }
class C{  private String diff_linesToCharsMunge(String text,List<String> lineArray,Map<String,Integer> lineHash){  int lineStart=0;  int lineEnd=-1;  String line;  StringBuilder chars=new StringBuilder();  while (lineEnd < text.length() - 1) {    lineEnd=text.indexOf('\n',lineStart);    if (lineEnd == -1) {      lineEnd=text.length() - 1;    }    line=text.substring(lineStart,lineEnd + 1);    lineStart=lineEnd + 1;    if (lineHash.containsKey(line)) {      chars.append(String.valueOf((char)(int)lineHash.get(line)));    } else {      lineArray.add(line);      lineHash.put(line,lineArray.size() - 1);      chars.append(String.valueOf((char)(lineArray.size() - 1)));    }  }  return chars.toString();}  }
class C{  protected void addDocumentationPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DocumentedElement_documentation_feature"),getString("_UI_PropertyDescriptor_description","_UI_DocumentedElement_documentation_feature","_UI_DocumentedElement_type"),BasePackage.Literals.DOCUMENTED_ELEMENT__DOCUMENTATION,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public <T>T read(T value,Reader source,boolean strict) throws Exception {  return read(value,NodeBuilder.read(source),strict);}  }
class C{  protected void newpage(){  pagenum++;  linenum=0;  charnum=0;  if (page == null) {    if (!isPreview) {      if (pagenum >= prFirst) {        page=job.getGraphics();      } else {        JFrame f=new JFrame();        f.pack();        page=f.createImage(pagesize.width,pagesize.height).getGraphics();      }    } else {      previewImage=previewPanel.createImage(pagesize.width,pagesize.height);      page=previewImage.getGraphics();      page.setColor(Color.white);      page.fillRect(0,0,previewImage.getWidth(previewPanel),previewImage.getHeight(previewPanel));      page.setColor(color);    }  }  if (printHeader && page != null && pagenum >= prFirst) {    page.setFont(headerfont);    page.drawString(jobname,x0,headery);    String s="- " + pagenum + " -";    int w=headermetrics.stringWidth(s);    page.drawString(s,x0 + (this.width - w) / 2,headery);    w=headermetrics.stringWidth(time);    page.drawString(time,x0 + width - w,headery);    int y=headery + headermetrics.getDescent() + 1;    page.drawLine(x0,y,x0 + width,y);  }  if (page != null) {    page.setFont(font);  }}  }
class C{  @Inject public EntityResource(MetadataService metadataService){  this.metadataService=metadataService;}  }
class C{  protected int _columnOffset(int absRank){  return columnOffsets[absRank];}  }
class C{  private void state0() throws IOException {  Initialization initialization=new RandomInitialization(problem,alpha);  Solution[] initialPopulation=initialization.initialize();  int[] initialIds=new int[alpha];  evaluateAll(initialPopulation);  for (int i=0; i < alpha; i++) {    initialIds[i]=addToPopulation(initialPopulation[i]);  }  writePopulation(new File(filePrefix + "ini"),initialIds);}  }
class C{  public static void copyHdfsToLocal(final Path hdfsInputPath,final Path localOutputPath,final Configuration configuration) throws IOException {  final FileSystem fs=FileSystem.get(configuration);  fs.copyToLocalFile(hdfsInputPath,localOutputPath);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  public void disconnect(){  if (mAuthenticationContext.getCache() != null) {    mAuthenticationContext.getCache().removeAll();  }  removeUserId();}  }
class C{  public static Byte[] valuesOf(byte[] array){  Byte[] dest=new Byte[array.length];  for (int i=0; i < array.length; i++) {    dest[i]=Byte.valueOf(array[i]);  }  return dest;}  }
class C{  @Override public boolean handleMessage(Message msg){  if (msg.what == 1) {    BillListAdapter adapter=new BillListAdapter(BillListActivity.this,bills);    listViewOrder.setAdapter(adapter);  }  return true;}  }
class C{  @SuppressWarnings("deprecation") public void show(){  Component component=getComponent();  if (component != null) {    component.show();  }}  }
class C{  public void testUrlDecoderIgnoresUnnecessaryCharset() throws Exception {  try {    assertEquals("ab",URLDecoder.decode("ab","no-such-charset"));  } catch (  UnsupportedCharsetException expected) {  }}  }
class C{  @Override public boolean supportsCreateDB(){  return true;}  }
class C{  public void updateBuildVersionFields(){  Module module=ModulesManager.instance().getModuleByName((String)projectCombo.getSelectedItem());  String[] apk=new String[3];  if (apkAbsolutePath != null) {    binary.initPath(apkAbsolutePath);  }}  }
class C{  CdmaSmsCbProgramData(Parcel in){  mOperation=in.readInt();  mCategory=in.readInt();  mLanguage=in.readInt();  mMaxMessages=in.readInt();  mAlertOption=in.readInt();  mCategoryName=in.readString();}  }
class C{  public int read(byte b[]) throws IOException {  return checkInputFile().read(b);}  }
class C{  public ExprCfg parseExpr(){  ExprCfg left=parseTerm();  while (true) {    ExprToken token=scanToken();switch (token) {case COND_BINARY:{        ExprCfg defaultExpr=parseExpr();        left=new ExprCfgCondNull(left,defaultExpr);      }    break;case EQ:case NE:case LT:case LE:case GT:case GE:case MATCHES:  left=parseCmpExpr(token,left,parseTerm());break;case COND:left=parseCondExpr(left);break;default :unreadToken();return left;}}}  }
class C{  public void invite(Channel channel){  bot.sendIRC().invite(serverUser.getNick(),channel.getName());}  }
class C{  public SubCategoriesCentralView(final String id,final long categoryId,final NavigationContext navigationContext){  super(id,categoryId,navigationContext);}  }
class C{  public void addIconst(int n){  if (n < 6 && -2 < n)   addOpcode(3 + n); else   if (n <= 127 && -128 <= n) {    addOpcode(16);    add(n);  } else   if (n <= 32767 && -32768 <= n) {    addOpcode(17);    add(n >> 8);    add(n);  } else   addLdc(constPool.addIntegerInfo(n));}  }
class C{  public String convertAssignmentOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  private Base64(){}  }
class C{  @Override final public boolean isBigdataNativeService(){  return true;}  }
class C{  public boolean logout() throws LoginException {  if (debug) {    System.out.println("\t\t[Krb5LoginModule]: " + "Entering logout");  }  if (subject.isReadOnly()) {    cleanKerberosCred();    throw new LoginException("Subject is Readonly");  }  subject.getPrincipals().remove(kerbClientPrinc);  Iterator<Object> it=subject.getPrivateCredentials().iterator();  while (it.hasNext()) {    Object o=it.next();    if (o instanceof KerberosTicket || o instanceof KerberosKey || o instanceof KeyTab) {      it.remove();    }  }  cleanKerberosCred();  succeeded=false;  commitSucceeded=false;  if (debug) {    System.out.println("\t\t[Krb5LoginModule]: " + "logged out Subject");  }  return true;}  }
class C{  static void map_idx_10_to_20(int par_mapped[],final int par[],boolean full){  int b;  if (full) {    b=9;  } else {    b=4;    par_mapped[10]=0;  }  for (; b >= 0; b--) {    par_mapped[2 * b + 1]=par_mapped[2 * b]=par[b];  }}  }
class C{  public static boolean compareSignatures(String plainSignature,String genericSignature){  GenericSignatureParser plainParser=new GenericSignatureParser(plainSignature);  GenericSignatureParser genericParser=new GenericSignatureParser(genericSignature);  if (plainParser.getNumParameters() != genericParser.getNumParameters()) {    return false;  }  return true;}  }
class C{  public void close(){  mSocket.close();}  }
class C{  public AbstractRecalculatePriceCartCommandImpl(final ShoppingCartCommandRegistry registry,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final ShopService shopService){  super(registry);  this.priceService=priceService;  this.pricingPolicyProvider=pricingPolicyProvider;  this.productService=productService;  this.shopService=shopService;}  }
class C{  @Override default CompletableFuture<DoubleSummaryStatistics> summaryStatisticsDouble(final ToDoubleFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  public static Map<String,Float> parseFieldBoosts(String[] fieldLists){  if (null == fieldLists || 0 == fieldLists.length) {    return new HashMap<>();  }  Map<String,Float> out=new HashMap<>(7);  for (  String in : fieldLists) {    if (null == in) {      continue;    }    in=in.trim();    if (in.length() == 0) {      continue;    }    String[] bb=whitespacePattern.split(in);    for (    String s : bb) {      String[] bbb=caratPattern.split(s);      out.put(bbb[0],1 == bbb.length ? null : Float.valueOf(bbb[1]));    }  }  return out;}  }
class C{  public static DirectoryScannerConfig xmlClone(DirectoryScannerConfig bean){  final Object clone=copy(bean);  return (DirectoryScannerConfig)clone;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/cancel") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep cancelMigration(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,Migration.class,"id");  Migration migration=queryResource(id);  if (!BulkList.MigrationFilter.isUserAuthorizedForMigration(migration,getUserFromContext(),_permissionsHelper)) {    StorageOSUser user=getUserFromContext();    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }  if (migration == null || migration.getInactive()) {    throw APIException.badRequests.cancelMigrationFailed(id.toString(),"The migration is invalid");  }  String status=migration.getMigrationStatus();  String migrationName=migration.getLabel();  URI volId=migration.getVolume();  Volume vplexVol=_dbClient.queryObject(Volume.class,volId);  if (vplexVol == null || vplexVol.getInactive()) {    throw APIException.badRequests.cancelMigrationFailed(migrationName,"The migrating volume is not valid");  }  URI cgURI=vplexVol.getConsistencyGroup();  if (!NullColumnValueGetter.isNullURI(cgURI)) {    throw APIException.badRequests.cancelMigrationFailed(migrationName,"Migration cancellation is not supported for the volumes in consistency group");  }  if (status == null || status.isEmpty() || migrationName == null || migrationName.isEmpty()) {    throw APIException.badRequests.migrationHasntStarted(id.toString());  }  if (status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.COMMITTED.getStatusValue())) {    throw APIException.badRequests.migrationCantBeCancelled(migrationName,status);  }  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Volume.class,volId,taskId,ResourceOperationTypeEnum.CANCEL_MIGRATION);  TaskResourceRep task=toTask(vplexVol,taskId,op);  if (status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.CANCELLED.getStatusValue()) || status.equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.PARTIALLY_CANCELLED.getStatusValue())) {    s_logger.info("Migration {} has been cancelled",id);    op.ready();    vplexVol.getOpStatus().createTaskStatus(taskId,op);    _dbClient.persistObject(vplexVol);    return task;  }  try {    VPlexController controller=_vplexBlockServiceApi.getController();    controller.cancelMigration(vplexVol.getStorageController(),id,taskId);  } catch (  InternalException e) {    s_logger.error("Controller Error",e);    String errMsg=String.format("Controller Error: %s",e.getMessage());    task.setState(Operation.Status.error.name());    task.setMessage(errMsg);    op.error(e);    vplexVol.getOpStatus().updateTaskStatus(taskId,op);    _dbClient.persistObject(vplexVol);  }  return task;}  }
class C{  @SuppressWarnings("unchecked") public Set<File> glob(SBJob job,File workingDir,Object glob) throws SBGlobException {  Preconditions.checkNotNull(job);  Preconditions.checkNotNull(workingDir);  if (SBExpressionBeanHelper.isExpression(glob)) {    try {      glob=SBExpressionBeanHelper.<String>evaluate(job,glob);    } catch (    SBExpressionException e) {      logger.error("Failed to evaluate glob " + glob,e);      throw new SBGlobException("Failed to evaluate glob " + glob,e);    }  }  if (glob == null) {    return Collections.<File>emptySet();  }  List<String> globs=new ArrayList<>();  if (glob instanceof List<?>) {    globs=(List<String>)glob;  } else   if (glob instanceof String && ((String)glob).startsWith("{") && ((String)glob).endsWith("}")) {    String globRemoveBracket=((String)glob).substring(1,((String)glob).length() - 1);    for (    String globItem : globRemoveBracket.split(",")) {      globs.add(globItem);    }  } else {    globs.add((String)glob);  }  Set<File> files=new HashSet<File>();  for (  String singleGlob : globs) {    List<File> globDirs=new ArrayList<File>();    if (singleGlob.startsWith("/")) {      File globDir=new File(singleGlob).getParentFile();      globDirs.add(globDir);      String globString=new File(singleGlob).getName();      files.addAll(listDir(globString,false,globDirs));    } else     if (singleGlob.contains("/") && !(singleGlob.startsWith("/"))) {      String[] splitGlob=singleGlob.split("/");      globDirs.add(workingDir);      for (int i=0; i < splitGlob.length - 1; i++) {        if (splitGlob[i].equals("..")) {          List<File> newGlobDirs=new ArrayList<File>();          for (          File dir : globDirs) {            newGlobDirs.add(dir.getParentFile());          }          globDirs=newGlobDirs;        } else {          Set<File> newGlobDirs=listDir(splitGlob[i],true,globDirs);          globDirs.clear();          for (          File dir : newGlobDirs) {            globDirs.add(dir);          }        }      }      files.addAll(listDir(splitGlob[splitGlob.length - 1],false,globDirs));    } else {      globDirs.add(workingDir);      files.addAll(listDir(singleGlob,false,globDirs));    }  }  return files;}  }
class C{  public CategoryLabelPosition(RectangleAnchor categoryAnchor,TextBlockAnchor labelAnchor){  this(categoryAnchor,labelAnchor,TextAnchor.CENTER,0.0,CategoryLabelWidthType.CATEGORY,0.95f);}  }
class C{  public static boolean hasPermission(Activity activity,String[] permissions){  for (  String permission : permissions) {    if (activity.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  public TDoubleHashSet(TDoubleHashingStrategy strategy){  super(strategy);}  }
class C{  public Timer timer(String name){  return metrics.getTimer(name);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static VMStatsContract create(StatisticsFactory f,long id){  VMStatsContract result;  try {    result=new VMStats50(f,id);  } catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable ignore) {    SystemFailure.checkFailure();    result=new VMStats(f,id);  }  return result;}  }
class C{  public final void onCreate(@NonNull final Object client,@Nullable final Bundle savedInstanceState){  mGUIClient=client;  if (savedInstanceState != null) {    mChronosListener=ChronosListenerManager.getInstance().getListener(savedInstanceState.getInt(KEY_CHRONOS_LISTENER_ID));  } else {    mChronosListener=ChronosListenerManager.getInstance().createListener();  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildJynathHouse(zone);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public URLConnection openConnection() throws IOException {  return streamHandler.openConnection(this);}  }
class C{  public static void initialize(){  Security.addProvider(new OAuth2Provider());}  }
class C{  public SingleTileRenderedImage(Raster ras,ColorModel colorModel){  this.ras=ras;  this.tileGridXOffset=this.minX=ras.getMinX();  this.tileGridYOffset=this.minY=ras.getMinY();  this.tileWidth=this.width=ras.getWidth();  this.tileHeight=this.height=ras.getHeight();  this.sampleModel=ras.getSampleModel();  this.colorModel=colorModel;}  }
class C{  public void testCallCrawlerService(){  System.out.println("callCrawlerService");  mockInitialisationCalls(false,AuditStatus.CRAWLING);  EasyMock.expect(mockCrawlerService.crawlGroupOfPages(mockAudit,siteUrl,urlList)).andReturn(EasyMock.createMock(WebResource.class)).once();  setReplayMode();  GroupOfPagesCrawlerAuditCommandImpl groupOfPagesAuditCommand=getInstance();  groupOfPagesAuditCommand.callCrawlerService();  setVerifyMode();}  }
class C{  protected KMLAbstractOverlay(String namespaceURI){  super(namespaceURI);}  }
class C{  public DefaultAttributeAction(DrawingEditor editor,AttributeKey key,@Nullable String name){  this(editor,key,name,null);}  }
class C{  public boolean isZoomEnabled(){  return isZoomXEnabled() || isZoomYEnabled();}  }
class C{  public static void enable(){  final MetaClassRegistry metaClassRegistry=GroovySystem.getMetaClassRegistry();synchronized (metaClassRegistry) {    if (metaClassRegistry.getMetaClassCreationHandler() != instance) {      ClassInfo.clearModifiedExpandos();      metaClassRegistry.setMetaClassCreationHandle(instance);    }  }}  }
class C{  public void testSimpleProperties() throws RepositoryException, IOException {  final ValueFactory vf=om.getValueFactory();  final URI keyname=vf.createURI("attr:/test#name");  final URI keyage=vf.createURI("attr:/test#age");  final URI keyfriend=vf.createURI("attr:/test#friend");  final Resource id=vf.createURI("gpo:test#1");  final Resource id2=vf.createURI("gpo:test#2");  final int transCounter=om.beginNativeTransaction();  try {    final IGPO gpo=om.getGPO(id);    gpo.setValue(keyname,vf.createLiteral("Martyn"));    gpo.setValue(keyage,vf.createLiteral(53));    Iterator<URI> uris=((GPO)gpo).getPropertyURIs();    uris.next();    uris.next();    assertFalse(uris.hasNext());    om.getGPO(id2).setValue(keyfriend,id);    om.commitNativeTransaction(transCounter);    uris=((GPO)gpo).getPropertyURIs();    uris.next();    uris.next();    assertFalse(uris.hasNext());  } catch (  Throwable t) {    om.rollbackNativeTransaction();    throw new RuntimeException(t);  }  ((ObjectMgrModel)om).clearCache();{    final IGPO gpo=om.getGPO(vf.createURI("gpo:test#1"));    final Iterator<URI> uris=((GPO)gpo).getPropertyURIs();    uris.next();    uris.next();    assertFalse(uris.hasNext());  }}  }
class C{  public ServiceCall<Classifier> createClassifier(final String name,final String language,final File trainingData){  Validator.isTrue((trainingData != null) && trainingData.exists(),"trainingData cannot be null or not be found");  Validator.isTrue((language != null) && !language.isEmpty(),"language cannot be null or empty");  final JsonObject contentJson=new JsonObject();  contentJson.addProperty(LANGUAGE,language);  if ((name != null) && !name.isEmpty()) {    contentJson.addProperty(NAME,name);  }  final RequestBody body=new MultipartBody.Builder().setType(MultipartBody.FORM).addPart(Headers.of(HttpHeaders.CONTENT_DISPOSITION,FORM_DATA_TRAINING_DATA),RequestBody.create(HttpMediaType.BINARY_FILE,trainingData)).addFormDataPart(TRAINING_METADATA,contentJson.toString()).build();  final Request request=RequestBuilder.post(PATH_CLASSIFIERS).body(body).build();  return createServiceCall(request,ResponseConverterUtils.getObject(Classifier.class));}  }
class C{  public static void disposeCursors(){  for (  Cursor cursor : m_idToCursorMap.values()) {    cursor.dispose();  }  m_idToCursorMap.clear();}  }
class C{  public static String pathRelativeTo(String fn1,String dir){  try {    List<String> as=pathToNameList(new File(new File(fn1).getCanonicalPath()));    List<String> bs=pathToNameList(new File(new File(dir).getCanonicalPath()));    int longestCommonPrefix=CollectionHelper.longestCommonPrefix(asList(as,bs));    List<String> prefix=CollectionHelper.fillList(bs.size() - longestCommonPrefix,"..");    List<String> suffix=as.subList(longestCommonPrefix,as.size());    return StringHelper.join(CollectionHelper.listCat(prefix,suffix),File.separator);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void runBlender(){  if (!runBlender(null,true)) {    logger.log(Level.INFO,"Could not run blender, already running? Trying to focus window.");    DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message("Blender is already running!"));  }}  }
class C{  protected int parseArgumentsByteCode(DataOutputStream dataStream,Primitive type,int index,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean bracket,boolean debug,Network network) throws IOException {  dataStream.writeLong(network.createVertex(type).getId());  if (!bracket) {    bracket=checkNext('(',stream);  }  boolean moreArguments=true;  stream.skipWhitespace();  char peek=stream.peek();  if (peek == ')') {    moreArguments=false;  }  int count=0;  while (moreArguments) {    stream.skipWhitespace();    peek=stream.peek();    if (peek == ')' || peek == '}') {      break;    }    if ((peek == ',') || (peek == ';')) {      break;    }    parseElementByteCode(stream,dataStream,elements,debug,network);    count++;    if (!bracket) {      break;    }    stream.skipWhitespace();    peek=stream.peek();    if ((peek == ',') || (peek == ';')) {      stream.skip();    } else {      moreArguments=false;    }    index++;  }  if (bracket) {    ensureNext(')',stream);  }  dataStream.writeLong(0l);  return count;}  }
class C{  public static StringLiteralExpr escape(String string){  return new StringLiteralExpr(Utils.escapeEndOfLines(string));}  }
class C{  public T caseOctalIntLiteral(OctalIntLiteral object){  return null;}  }
class C{  public static FindRemoteTXMessageReplyProcessor send(Cache cache,TXId txId){  final InternalDistributedSystem system=(InternalDistributedSystem)cache.getDistributedSystem();  DM dm=system.getDistributionManager();  Set recipients=dm.getOtherDistributionManagerIds();  FindRemoteTXMessageReplyProcessor processor=new FindRemoteTXMessageReplyProcessor(dm,recipients,txId);  FindRemoteTXMessage msg=new FindRemoteTXMessage(txId,processor.getProcessorId(),recipients);  dm.putOutgoing(msg);  return processor;}  }
class C{  @ReactMethod public void show(ReadableMap shareContentMap,Promise promise){  if (getCurrentActivity() != null) {    ShareContent shareContent=Utility.buildShareContent(shareContentMap);    MessageDialog messageDialog=new MessageDialog(getCurrentActivity());    messageDialog.setShouldFailOnDataError(mShouldFailOnDataError);    messageDialog.registerCallback(getCallbackManager(),new MessageDialogCallback(promise));    messageDialog.show(shareContent);  } else {    promise.reject("No current activity.");  }}  }
class C{  public void cancel(){  isCanceled=true;}  }
class C{  public void load(X509Extension extensions){  Set<String> critExts=extensions.getCriticalExtensionOIDs();  Set<String> nonCritExts=extensions.getNonCriticalExtensionOIDs();  List<X509Ext> sortedExts=new ArrayList<X509Ext>();  for (Iterator<String> itr=critExts.iterator(); itr.hasNext(); ) {    String extOid=itr.next();    byte[] value=extensions.getExtensionValue(extOid);    X509Ext ext=new X509Ext(new ASN1ObjectIdentifier(extOid),value,true);    sortedExts.add(ext);  }  for (Iterator<String> itr=nonCritExts.iterator(); itr.hasNext(); ) {    String extOid=itr.next();    byte[] value=extensions.getExtensionValue(extOid);    X509Ext ext=new X509Ext(new ASN1ObjectIdentifier(extOid),value,false);    sortedExts.add(ext);  }  Collections.sort(sortedExts,new ExtensionNameComparator());  data=new Object[sortedExts.size()][3];  int i=0;  for (Iterator<X509Ext> itrSortedExts=sortedExts.iterator(); itrSortedExts.hasNext(); ) {    X509Ext ext=itrSortedExts.next();    loadRow(ext,i);    i++;  }  fireTableDataChanged();}  }
class C{  private String nonControl(String s,int start){  String ret="";  cPos=s.indexOf("%",start);  if (cPos == -1)   cPos=s.length();  return s.substring(start,cPos);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  protected boolean isLinkAllowed(DatapathId src,OFPort srcPort,DatapathId dst,OFPort dstPort){  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.LITERAL;}  }
class C{  public synchronized String deObfuscate(String str,SecretKey key) throws MissingIVException, ObfuscationException {  logger.debug("Obfuscator(" + this.shareName + ") DeObfuscate(String, key): "+ str);  if (cachedDeObfuscatedNames.containsKey(str)) {    logger.debug("DeObfuscate(String, key) - return cached value for: " + str);    return cachedDeObfuscatedNames.get(str);  }  byte[] lookupHash=createLookupHash(str,key);  String sLookupHash=Utils.bytesToHex(lookupHash);  byte[] iv=ivPoolImpl.getCachedIV(sLookupHash,this.shareName);  if (null == iv) {    logger.debug("Obfuscator: RE-fetch IV Pool");    ivPoolImpl.fetchIVPool(this.sharePath,this.shareName);    iv=ivPoolImpl.getCachedIV(sLookupHash,this.shareName);  }  if (iv == null) {    logger.error("Could not find IV for hash: " + sLookupHash + " generated from obfuscate file: "+ str);    throw new MissingIVException("Could not find IV for hash: " + sLookupHash + " generated from obfuscate file: "+ str,sLookupHash);  }  String originalName=null;  try {    originalName=decryptFileName(str,key.getEncoded(),iv,false,EncodingType.BASE64);  } catch (  InvalidKeyException|NoSuchAlgorithmException|NoSuchPaddingException|InvalidAlgorithmParameterException|IllegalBlockSizeException|BadPaddingException|DataFormatException|IOException e) {    logger.error("Could not deobfuscate string: " + str,e);    throw new ObfuscationException("Could not decrypt string: " + str,e);  }  cachedDeObfuscatedNames.put(str,originalName);  logger.debug("Obfuscator(" + this.shareName + ") DeObfuscate(String, key)-return: "+ originalName);  return originalName;}  }
class C{  public boolean warmup(long flags){  try {    return mService.warmup(flags);  } catch (  RemoteException e) {    return false;  }}  }
class C{  protected String[] readNext(LineNumberReader reader) throws IOException {  String[] rowDef=null;  do {    String nextLine=reader.readLine();    if (nextLine == null) {      hasNext=false;      return rowDef;    }    String[] r=parser.parseLineMulti(nextLine);    if (r.length > 0) {      if (rowDef == null) {        rowDef=r;      } else {        String[] t=new String[rowDef.length + r.length];        System.arraycopy(rowDef,0,t,0,rowDef.length);        System.arraycopy(r,0,t,rowDef.length,r.length);        rowDef=t;      }    }  } while (parser.isPending());  return rowDef;}  }
class C{  public boolean isEmpty(){  return (m_keys.size() == 0);}  }
class C{  public static float max(float a,float b,float c){  return Math.max(Math.max(a,b),c);}  }
class C{  public static void UF3(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double prod1=1.0;  double prod2=1.0;  double yj;  double pj;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.pow(x[0],0.5 * (1.0 + 3.0 * (j - 2.0) / (nx - 2.0)));    pj=Math.cos(20.0 * yj * PI / Math.sqrt(j + 0.0));    if (j % 2 == 0) {      sum2+=yj * yj;      prod2*=pj;      count2++;    } else {      sum1+=yj * yj;      prod1*=pj;      count1++;    }  }  f[0]=x[0] + 2.0 * (4.0 * sum1 - 2.0 * prod1 + 2.0) / (double)count1;  f[1]=1.0 - Math.sqrt(x[0]) + 2.0 * (4.0 * sum2 - 2.0 * prod2 + 2.0) / (double)count2;}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && (signature != null ? signature.equals(mw.signature) : mw.signature == null)) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  public boolean finished(){synchronized (finished) {    return finished.cardinality() == workers.length;  }}  }
class C{  public boolean isQuoting(){  return quoteChar != null;}  }
class C{  public void addMultiple(final IntegerMap<T> map,final int multiple){  for (  final T key : map.keySet()) {    add(key,map.getInt(key) * multiple);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ERROR_CODE:    return isSetErrorCode();case MESSAGE:  return isSetMessage();}throw new IllegalStateException();}  }
class C{  private void handle200OK(SipTransactionContext ctx){  if (sLogger.isActivated()) {    sLogger.info("200 OK response received");  }  mPublished=true;  SipResponse resp=ctx.getSipResponse();  mAuthenticationAgent.readProxyAuthenticateHeader(resp);  retrieveExpirePeriod(resp);  saveEntityTag((SIPETagHeader)resp.getHeader(SIPETagHeader.NAME));  startTimer(System.currentTimeMillis(),mExpirePeriod,0.5);}  }
class C{  public void testFailoverTransitions() throws Exception {  Set<String> downedHosts=new HashSet<String>();  testFailoverTransition(HOST_1,HOST_2,null,null,HOST_1_OK,HOST_2_OK);  downedHosts.clear();  downedHosts.add(HOST_2);  testFailoverTransition(HOST_1,HOST_3,downedHosts,null,HOST_1_OK,HOST_2_FAIL,HOST_3_OK);  downedHosts.clear();  downedHosts.add(HOST_1);  testFailoverTransition(HOST_2,HOST_3,downedHosts,null,HOST_1_FAIL,HOST_2_OK,HOST_3_OK);  downedHosts.clear();  downedHosts.add(HOST_1);  downedHosts.add(HOST_3);  testFailoverTransition(HOST_2,HOST_1,downedHosts,HOST_1,HOST_1_FAIL,HOST_2_OK,HOST_3_FAIL,HOST_2_FAIL,HOST_3_FAIL,HOST_1_OK);  downedHosts.clear();  downedHosts.add(HOST_1);  downedHosts.add(HOST_2);  testFailoverTransition(HOST_3,HOST_1,downedHosts,HOST_1,HOST_1_FAIL,HOST_2_FAIL,HOST_3_OK,HOST_2_FAIL,HOST_3_FAIL,HOST_1_OK);  downedHosts.clear();  downedHosts.add(HOST_1);  downedHosts.add(HOST_2);  testFailoverTransition(HOST_3,HOST_2,downedHosts,HOST_2,HOST_1_FAIL,HOST_2_FAIL,HOST_3_OK,HOST_2_OK);}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  reset();  m_header=new Instances(data,0);  if (m_selectedSplitMetric == GINI_SPLIT) {    m_splitMetric=new GiniSplitMetric();  } else {    m_splitMetric=new InfoGainSplitMetric(m_minFracWeightForTwoBranchesGain);  }  data=new Instances(data);  data.deleteWithMissingClass();  for (int i=0; i < data.numInstances(); i++) {    updateClassifier(data.instance(i));  }  getCapabilities().testWithFail(data);}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){  System.out.println("[Source] dragDropEnd");}  }
class C{  public ModdedZipArchiveOutputStream(OutputStream out){  this.out=out;  this.raf=null;}  }
class C{  public void closeStore(){  if (_storeHandle != null && !PointerRef.isNull(_storeHandle)) {    int error=VecsAdapter.VecsCloseCertStore(_storeHandle);    ;    BAIL_ON_ERROR(error,"Closing store '%s' failed. [Server: %s, User: %s]",_storeName,_serverName,_userName);    _storeHandle=null;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double minValue;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String whatToInterpolate="";  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  whatToInterpolate=args[2].toLowerCase();  returnNumberToInterpolate=args[3].toLowerCase();  resolution=Double.parseDouble(args[4]);  double circleCircumscrbingGridCell=Math.sqrt(2) * resolution / 2.0;  excludeNeverClassified=Boolean.parseBoolean(args[5]);  excludeUnclassified=Boolean.parseBoolean(args[6]);  excludeBareGround=Boolean.parseBoolean(args[7]);  excludeLowVegetation=Boolean.parseBoolean(args[8]);  excludeMediumVegetation=Boolean.parseBoolean(args[9]);  excludeHighVegetation=Boolean.parseBoolean(args[10]);  excludeBuilding=Boolean.parseBoolean(args[11]);  excludeLowPoint=Boolean.parseBoolean(args[12]);  excludeModelKeyPoint=Boolean.parseBoolean(args[13]);  excludeWater=Boolean.parseBoolean(args[14]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    PointRecColours pointColours;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      if (!whatToInterpolate.equals("rgb data")) {        str1="Data Scale:\tcontinuous";      } else {        str1="Data Scale:\trgb";      }      out.println(str1);      if (whatToInterpolate.equals("rgb data")) {        str1="Preferred Palette:\t" + "rgb.pal";      } else       if (whatToInterpolate.equals("intensity")) {        str1="Preferred Palette:\t" + "grey.pal";      } else {        str1="Preferred Palette:\t" + "spectrum.pal";      }      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      double halfResolution=resolution / 2;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          results=pointsTree.neighborsWithinRange(entry,circleCircumscrbingGridCell);          if (!results.isEmpty()) {            minValue=Float.POSITIVE_INFINITY;            for (i=0; i < results.size(); i++) {              z=results.get(i).value;              if (z < minValue) {                minValue=z;              }              ;            }            image.setValue(row,col,minValue);          } else {            image.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Interpolating point data:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean beginBatchEdit(){  return false;}  }
class C{  public int size(){  return _frameTop;}  }
class C{  public boolean deleteSafely(String datasource){  return Utils.deleteFileWithBackup(getFileAsPath(),datasource);}  }
class C{  public PopupExcludeFromSpiderMenu(){  super(Constant.messages.getString("sites.exclude.spider.popup"),true);}  }
class C{  public BackchainOwlSameAsPropertiesSPIterator(IChunkedOrderedIterator<ISPO> src,IV s,IV p,AbstractTripleStore db,final IV sameAs){  super(src,db,sameAs);{    SPO[] spos=new SPO[chunkSize];    int numSPOs=0;    Iterator<IV> samesIt=getSames(s).iterator();    while (samesIt.hasNext()) {      final IV same=samesIt.next();      IChunkedOrderedIterator<ISPO> propsIt=db.getAccessPath(same,p,null).iterator();      while (propsIt.hasNext()) {        final ISPO prop=propsIt.next();        if (IVUtility.equals(prop.p(),sameAs) && IVUtility.equals(s,prop.o())) {          continue;        }        if (numSPOs == chunkSize) {          boolean present=false;          IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);          if (absent.hasNext()) {            if (sameAs2 == null) {              sameAs2=createTempTripleStore();            }            db.addStatements(sameAs2,copyOnly,absent,null);          }          numSPOs=0;        }        spos[numSPOs++]=new SPO(s,prop.p(),prop.o(),StatementEnum.Inferred);      }    }    if (numSPOs > 0) {      boolean present=false;      IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);      if (absent.hasNext()) {        if (sameAs2 == null) {          sameAs2=createTempTripleStore();        }        db.addStatements(sameAs2,copyOnly,absent,null);      }    }  }}  }
class C{  protected void readDestination(final PortalSetupDescriptor desc,final Element element){  String zone;  Object identifier;  if (element.hasAttribute("zone")) {    zone=element.getAttribute("zone");  } else {    logger.error("Portal destination without zone");    return;  }  if (element.hasAttribute("ref")) {    final String s=element.getAttribute("ref");    try {      identifier=Integer.valueOf(s);    } catch (    final NumberFormatException ex) {      identifier=s;    }  } else {    logger.error("Portal destination without 'ref' value");    return;  }  desc.setDestination(zone,identifier);}  }
class C{  public void write(Node node) throws SAXException {  int nodeType=node.getNodeType();switch (nodeType) {case Node.ELEMENT_NODE:    write((Element)node);  break;case Node.ATTRIBUTE_NODE:write((Attribute)node);break;case Node.TEXT_NODE:write(node.getText());break;case Node.CDATA_SECTION_NODE:write((CDATA)node);break;case Node.ENTITY_REFERENCE_NODE:write((Entity)node);break;case Node.PROCESSING_INSTRUCTION_NODE:write((ProcessingInstruction)node);break;case Node.COMMENT_NODE:write((Comment)node);break;case Node.DOCUMENT_NODE:write((Document)node);break;case Node.DOCUMENT_TYPE_NODE:write((DocumentType)node);break;case Node.NAMESPACE_NODE:break;default :throw new SAXException("Invalid node type: " + node);}}  }
class C{  public String read(String value){  return value;}  }
class C{  public Drawable loadThumbnail(PackageManager pm){  if (mThumbnailResource < 0)   return null;  return pm.getDrawable(mService.serviceInfo.packageName,mThumbnailResource,mService.serviceInfo.applicationInfo);}  }
class C{  public DelaunayTriangle locate(DelaunayVertex point){  DelaunayTriangle triangle=mostRecent;  if (!this.contains(triangle)) {    triangle=null;  }  Set<DelaunayTriangle> visited=new HashSet<DelaunayTriangle>();  while (triangle != null) {    if (visited.contains(triangle)) {      System.out.println("Warning: Caught in a locate loop");      break;    }    visited.add(triangle);    DelaunayVertex corner=point.isOutside(triangle.toArray(new DelaunayVertex[0]));    if (corner == null) {      return triangle;    }    triangle=this.neighborOpposite(corner,triangle);  }  System.out.println("Warning: Checking all triangles for " + point);  for (  DelaunayTriangle tri : this) {    if (point.isOutside(tri.toArray(new DelaunayVertex[0])) == null) {      return tri;    }  }  System.out.println("Warning: No triangle holds " + point);  return null;}  }
class C{  public String displayRulesTipText(){  return "Sets whether rules are to be printed.";}  }
class C{  @Override public void deleteFile(Path filePath) throws IOException {  try {    super.deleteFile(filePath);    repo.rm().addFilepattern(filePath.toString()).call();    commitChanges();  } catch (  GitAPIException e) {    throw new IOException(e);  }}  }
class C{  public final MoveList pseudoLegalMoves(Position pos){  MoveList moveList=getMoveListObj();  final long occupied=pos.whiteBB | pos.blackBB;  if (pos.whiteMove) {    long squares=pos.pieceTypeBB[Piece.WQUEEN];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=(BitBoard.rookAttacks(sq,occupied) | BitBoard.bishopAttacks(sq,occupied)) & ~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.WROOK];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.rookAttacks(sq,occupied) & ~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.WBISHOP];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.bishopAttacks(sq,occupied) & ~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }{      int sq=pos.getKingSq(true);      long m=BitBoard.kingAttacks[sq] & ~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      final int k0=4;      if (sq == k0) {        final long OO_SQ=0x60L;        final long OOO_SQ=0xEL;        if (((pos.getCastleMask() & (1 << Position.H1_CASTLE)) != 0) && ((OO_SQ & (pos.whiteBB | pos.blackBB)) == 0) && (pos.getPiece(k0 + 3) == Piece.WROOK)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 + 1)) {          setMove(moveList,k0,k0 + 2,Piece.EMPTY);        }        if (((pos.getCastleMask() & (1 << Position.A1_CASTLE)) != 0) && ((OOO_SQ & (pos.whiteBB | pos.blackBB)) == 0) && (pos.getPiece(k0 - 4) == Piece.WROOK)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 - 1)) {          setMove(moveList,k0,k0 - 2,Piece.EMPTY);        }      }    }    long knights=pos.pieceTypeBB[Piece.WKNIGHT];    while (knights != 0) {      int sq=BitBoard.numberOfTrailingZeros(knights);      long m=BitBoard.knightAttacks[sq] & ~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      knights&=knights - 1;    }    long pawns=pos.pieceTypeBB[Piece.WPAWN];    long m=(pawns << 8) & ~occupied;    if (addPawnMovesByMask(moveList,pos,m,-8,true))     return moveList;    m=((m & BitBoard.maskRow3) << 8) & ~occupied;    addPawnDoubleMovesByMask(moveList,pos,m,-16);    int epSquare=pos.getEpSquare();    long epMask=(epSquare >= 0) ? (1L << epSquare) : 0L;    m=(pawns << 7) & BitBoard.maskAToGFiles & (pos.blackBB | epMask);    if (addPawnMovesByMask(moveList,pos,m,-7,true))     return moveList;    m=(pawns << 9) & BitBoard.maskBToHFiles & (pos.blackBB | epMask);    if (addPawnMovesByMask(moveList,pos,m,-9,true))     return moveList;  } else {    long squares=pos.pieceTypeBB[Piece.BQUEEN];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=(BitBoard.rookAttacks(sq,occupied) | BitBoard.bishopAttacks(sq,occupied)) & ~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.BROOK];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.rookAttacks(sq,occupied) & ~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.BBISHOP];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.bishopAttacks(sq,occupied) & ~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }{      int sq=pos.getKingSq(false);      long m=BitBoard.kingAttacks[sq] & ~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      final int k0=60;      if (sq == k0) {        final long OO_SQ=0x6000000000000000L;        final long OOO_SQ=0xE00000000000000L;        if (((pos.getCastleMask() & (1 << Position.H8_CASTLE)) != 0) && ((OO_SQ & (pos.whiteBB | pos.blackBB)) == 0) && (pos.getPiece(k0 + 3) == Piece.BROOK)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 + 1)) {          setMove(moveList,k0,k0 + 2,Piece.EMPTY);        }        if (((pos.getCastleMask() & (1 << Position.A8_CASTLE)) != 0) && ((OOO_SQ & (pos.whiteBB | pos.blackBB)) == 0) && (pos.getPiece(k0 - 4) == Piece.BROOK)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 - 1)) {          setMove(moveList,k0,k0 - 2,Piece.EMPTY);        }      }    }    long knights=pos.pieceTypeBB[Piece.BKNIGHT];    while (knights != 0) {      int sq=BitBoard.numberOfTrailingZeros(knights);      long m=BitBoard.knightAttacks[sq] & ~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      knights&=knights - 1;    }    long pawns=pos.pieceTypeBB[Piece.BPAWN];    long m=(pawns >>> 8) & ~occupied;    if (addPawnMovesByMask(moveList,pos,m,8,true))     return moveList;    m=((m & BitBoard.maskRow6) >>> 8) & ~occupied;    addPawnDoubleMovesByMask(moveList,pos,m,16);    int epSquare=pos.getEpSquare();    long epMask=(epSquare >= 0) ? (1L << epSquare) : 0L;    m=(pawns >>> 9) & BitBoard.maskAToGFiles & (pos.whiteBB | epMask);    if (addPawnMovesByMask(moveList,pos,m,9,true))     return moveList;    m=(pawns >>> 7) & BitBoard.maskBToHFiles & (pos.whiteBB | epMask);    if (addPawnMovesByMask(moveList,pos,m,7,true))     return moveList;  }  return moveList;}  }
class C{  public void testDistanceSort() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LatLonDocValuesField("location",40.759011,-73.9844722));  iw.addDocument(doc);  doc=new Document();  doc.add(new LatLonDocValuesField("location",40.718266,-74.007819));  iw.addDocument(doc);  doc=new Document();  doc.add(new LatLonDocValuesField("location",40.7051157,-74.0088305));  iw.addDocument(doc);  IndexReader reader=iw.getReader();  IndexSearcher searcher=newSearcher(reader);  iw.close();  Sort sort=new Sort(LatLonDocValuesField.newDistanceSort("location",40.7143528,-74.0059731));  TopDocs td=searcher.search(new MatchAllDocsQuery(),3,sort);  FieldDoc d=(FieldDoc)td.scoreDocs[0];  assertEquals(462.1028401330431,(Double)d.fields[0],0.0D);  d=(FieldDoc)td.scoreDocs[1];  assertEquals(1054.9842850974826,(Double)d.fields[0],0.0D);  d=(FieldDoc)td.scoreDocs[2];  assertEquals(5285.881528419706,(Double)d.fields[0],0.0D);  reader.close();  dir.close();}  }
class C{  public static Process spawn(final long maxMem,final String className,final boolean enableAssert,final String... args) throws IOException {  final String slash=System.getProperty("file.separator");  final String javahome=System.getProperty("java.home");  final String classpath=System.getProperty("java.class.path");  final ArrayList<String> command=new ArrayList<>();  command.add(javahome + slash + "bin"+ slash+ "java");  if (enableAssert) {    command.add("-ea");  }  command.add("-Xmx" + maxMem);  command.add("-cp");  command.add(classpath);  command.add(className);  command.addAll(Arrays.asList(args));  return new ProcessBuilder(command).start();}  }
class C{  public TurbolinksSession progressView(View progressView,int progressIndicatorResId,int progressIndicatorDelay){  this.progressView=progressView;  this.progressIndicator=progressView.findViewById(progressIndicatorResId);  this.progressIndicatorDelay=progressIndicatorDelay;  if (this.progressIndicator == null) {    throw new IllegalArgumentException("A progress indicator view must be provided in your custom progressView.");  }  return this;}  }
class C{  public static boolean isValidJavaEncoding(String javaEncoding){  if (javaEncoding != null) {    int length=javaEncoding.length();    if (length > 0) {      for (int i=1; i < length; i++) {        char c=javaEncoding.charAt(i);        if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public void start(){  for (  BaseDownloadTask task : tasks) {    task.setListener(target);    if (autoRetryTimes != null) {      task.setAutoRetryTimes(autoRetryTimes);    }    if (syncCallback != null) {      task.setSyncCallback(syncCallback);    }    if (isForceReDownload != null) {      task.setForceReDownload(isForceReDownload);    }    if (callbackProgressTimes != null) {      task.setCallbackProgressTimes(callbackProgressTimes);    }    if (callbackProgressMinIntervalMillis != null) {      task.setCallbackProgressMinInterval(callbackProgressMinIntervalMillis);    }    if (tag != null) {      task.setTag(tag);    }    if (taskFinishListenerList != null) {      for (      BaseDownloadTask.FinishListener finishListener : taskFinishListenerList) {        task.addFinishListener(finishListener);      }    }    if (this.directory != null) {      task.setPath(this.directory,true);    }    if (this.isWifiRequired != null) {      task.setWifiRequired(true);    }    task.asInQueueTask().enqueue();  }  FileDownloader.getImpl().start(target,isSerial);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Parameters)) {    return false;  } else {    Parameters p=(Parameters)o;    return p.keyToValueMap.equals(this.keyToValueMap);  }}  }
class C{  public boolean isSpdy(){  return spdyConnection != null;}  }
class C{  public Builder(){  this(null,null);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public StringToIntTable(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new String[blocksize];  m_values=new int[m_blocksize];}  }
class C{  private void redrawTilesInGameGrid(){  for (  Tile t : gameGrid.values()) {    if (t != null) {      board.addTile(t);    }  }}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public NotificationChain basicSetTypeRef(TypeRef newTypeRef,NotificationChain msgs){  TypeRef oldTypeRef=typeRef;  typeRef=newTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TFIELD__TYPE_REF,oldTypeRef,newTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isFilterLogTypeEnabled(int type){  return (logDisabledTypesMask & getMask(type)) == 0;}  }
class C{  public long addWrapField(long instant,int amount){  return set(instant,FieldUtils.getWrappedValue(get(instant),amount,0,iDivisor - 1));}  }
class C{  private void dynInit(){  primary1.setBackground(CompiereTheme.primary1);  primary2.setBackground(CompiereTheme.primary2);  primary3.setBackground(CompiereTheme.primary3);  secondary1.setBackground(CompiereTheme.secondary1);  secondary2.setBackground(CompiereTheme.secondary2);  secondary3.setBackground(CompiereTheme.secondary3);  white.setBackground(CompiereTheme.white);  black.setBackground(CompiereTheme.secondary3);  black.setForeground(CompiereTheme.black);  error.setBackground(CompiereTheme.error);  mandatory.setBackground(CompiereTheme.mandatory);  inactive.setBackground(CompiereTheme.inactive);  info.setBackground(CompiereTheme.info);  txt_ok.setBackground(CompiereTheme.white);  txt_ok.setForeground(CompiereTheme.txt_ok);  txt_error.setBackground(CompiereTheme.white);  txt_error.setForeground(CompiereTheme.txt_error);  controlFont.setFont(CompiereTheme.controlFont);  systemFont.setFont(CompiereTheme.systemFont);  userFont.setFont(CompiereTheme.userFont);  smallFont.setFont(CompiereTheme.smallFont);  menuFont.setFont(CompiereTheme.menuFont);  windowFont.setFont(CompiereTheme.windowFont);}  }
class C{  public static int compare(Comparable c1,Comparable c2,boolean nullGreater){  if (c1 == c2) {    return 0;  } else   if (c1 == null) {    return (nullGreater ? 1 : -1);  } else   if (c2 == null) {    return (nullGreater ? -1 : 1);  }  return c1.compareTo(c2);}  }
class C{  private boolean isUnaryAggregateOuterCPRewriteApplicable(){  boolean ret=false;  Hop input=getInput().get(0);  if ((input instanceof BinaryOp && ((BinaryOp)input).isOuterVectorOperator()) && (_op == AggOp.MAXINDEX || _op == AggOp.MININDEX || _op == AggOp.SUM) && (isCompareOperator(((BinaryOp)input).getOp())))   ret=true;  return ret;}  }
class C{  int read(int[] buffer){  int bufferUpto=0;  if (arr == null) {    int code=upto;    int delta=0;    for (; ; ) {      delta=(delta << 7) | (code & 0x7f);      if ((code & 0x80) == 0) {        if (delta == 0)         break;        tnum+=delta - TNUM_OFFSET;        buffer[bufferUpto++]=ordBase + tnum;        delta=0;      }      code>>>=8;    }  } else {    for (; ; ) {      int delta=0;      for (; ; ) {        byte b=arr[upto++];        delta=(delta << 7) | (b & 0x7f);        if ((b & 0x80) == 0)         break;      }      if (delta == 0)       break;      tnum+=delta - TNUM_OFFSET;      buffer[bufferUpto++]=ordBase + tnum;      if (bufferUpto == buffer.length) {        break;      }    }  }  return bufferUpto;}  }
class C{  void verifyPrincipal(String type,String name) throws ClassNotFoundException, InstantiationException {  if (type.equals(PolicyParser.PrincipalEntry.WILDCARD_CLASS) || type.equals(PolicyParser.PrincipalEntry.REPLACE_NAME)) {    return;  }  Class<?> PRIN=Class.forName("java.security.Principal");  Class<?> pc=Class.forName(type,true,Thread.currentThread().getContextClassLoader());  if (!PRIN.isAssignableFrom(pc)) {    MessageFormat form=new MessageFormat(getMessage("Illegal.Principal.Type.type"));    Object[] source={type};    throw new InstantiationException(form.format(source));  }  if (ToolDialog.X500_PRIN_CLASS.equals(pc.getName())) {    X500Principal newP=new X500Principal(name);  }}  }
class C{  public static void error(String msg){  throw new AssertionError(msg);}  }
class C{  protected void addNameDefiner(PsiElement definer){  myDefiners.add(definer);}  }
class C{  public void init(InputStream input,String sqlDefsSection,Connection conn,Map<String,String> configParameters) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  Document sqlDoc=builder.parse(input);  init(sqlDoc,sqlDefsSection,conn,configParameters);}  }
class C{  public JIPRuntimeException(final String strMsg){  super(strMsg);}  }
class C{  public static void gotoOffset(final CDebugPerspectiveModel model,final IAddress offset,final boolean focusMemoryWindow){  model.setActiveMemoryAddress(offset,focusMemoryWindow);}  }
class C{  public static boolean call(PageContext pc,String type,Object value) throws ExpressionException {  type=type.trim();  if ("range".equalsIgnoreCase(type))   throw new FunctionException(pc,"isValid",1,"type","for [range] you have to define a min and max value");  if ("regex".equalsIgnoreCase(type) || "regular_expression".equalsIgnoreCase(type))   throw new FunctionException(pc,"isValid",1,"type","for [regex] you have to define a pattern");  return Decision.isValid(type,value);}  }
class C{  public TieredQueue(int numTiers){  tiers=new ArrayList<>(numTiers);  for (int i=0; i < numTiers; i++)   tiers.add(new Tier(i));  tasksToQueue=new LinkedBlockingQueue<>();}  }
class C{  @Override protected void onCompleted(AsyncEventArgs e){  super.onCompleted(e);  if (e.getBytesTransferred() > 0) {    if (e.getBytesTransferred() < e.getCount())     sendAsync(e.getOffset() + e.getBytesTransferred(),e.getCount() - e.getBytesTransferred()); else     if (mCursor != mTotal)     sendEntity(); else     sendNext();  } else {    dispose();  }}  }
class C{  public static BlinkConn newConnection(Socket socket,int socketBufferSize,String resourcePath,String fileMark,Executor executor,ReceiveListener listener) throws Exception {  File rootDir=new File(resourcePath,DEFAULT_RESOURCE_DIR);  DiskResource resource=new DiskResource(rootDir,fileMark);  ReceiveParser parser=new ReceiveParser(resource);  SocketAdapter socketAdapter=new SocketAdapter(socket,socketBufferSize,parser);  ExecutorDelivery delivery=new ExecutorDelivery(executor,listener);  return new BlinkConn(socketAdapter,delivery,socketAdapter,delivery,resource);}  }
class C{  public byte decodeSigned16BitsTo8Bits(short s){  return (byte)((s + Short.MIN_VALUE) >> 8);}  }
class C{  private void startSmartBrowse(int AD_Browse_ID){  CFrame ff=new CFrame();  if (Ini.isPropertyBool(Ini.P_SINGLE_INSTANCE_PER_WINDOW)) {    ff=m_menu.getWindowManager().findBrowse(AD_Browse_ID).getFrame();    if (ff != null) {      ff.toFront();      return;    }  }  SwingUtilities.invokeLater(m_updatePB);  ff=VBrowser.openBrowse(AD_Browse_ID);  ff.setVisible(true);  ff.pack();  m_menu.getWindowManager().add(ff);  SwingUtilities.invokeLater(m_updatePB);  SwingUtilities.invokeLater(m_updatePB);  if (Ini.isPropertyBool(Ini.P_OPEN_WINDOW_MAXIMIZED)) {    AEnv.showMaximized(ff);  } else   AEnv.showCenterScreen(ff);}  }
class C{  public static ArrayList<String> randomList(int count){  Random random=new Random();  HashSet<String> items=new HashSet<String>();  count=Math.min(count,CHEESES.length);  while (items.size() < count) {    items.add(CHEESES[random.nextInt(CHEESES.length)]);  }  return new ArrayList<String>(items);}  }
class C{  public int[] updateBatch(@SQL @NotNull String sql,@NotNull List<? extends List<?>> argumentLists){  SqlQuery query=SqlQuery.query(sql,"<batch-update>");  return withCurrentTransaction(query,null);}  }
class C{  public void clearOnlineStatus(DBTransaction transaction) throws SQLException {  transaction.execute("UPDATE character_stats SET online=0",null);}  }
class C{  public DragControl(String action,boolean fixOnMouseOver){  this.repaint=false;  this.fixOnMouseOver=fixOnMouseOver;  this.action=action;}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  public TFloatFloatHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public String nextToken(String delim){  delimiters=delim;  return nextToken();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.313 -0500",hash_original_method="D32407A1261408285F08570A8F2494B0",hash_generated_method="ED8F22F63B370289A396B2E826A8FAF9") public boolean uiOverrideKeyEvent(KeyEvent event){  if (mWebViewClient != null) {    return mWebViewClient.shouldOverrideKeyEvent(mWebView,event);  }  return false;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return encrypt(plaintext,secretKeys,"UTF-8");}  }
class C{  public static boolean uninstallAddOnFiles(AddOn addOn,AddOnUninstallationProgressCallback callback){  Validate.notNull(addOn,"Parameter addOn must not be null.");  validateCallbackNotNull(callback);  List<String> fileNames=addOn.getFiles();  if (fileNames == null || fileNames.isEmpty()) {    return true;  }  callback.filesWillBeRemoved(fileNames.size());  boolean uninstalledWithoutErrors=true;  for (  String name : fileNames) {    if (name == null) {      continue;    }    logger.debug("Uninstall file: " + name);    File file=new File(Constant.getZapHome(),name);    try {      File parent=file.getParentFile();      if (!file.delete()) {        logger.error("Failed to delete: " + file.getAbsolutePath());        uninstalledWithoutErrors=false;      }      callback.fileRemoved();      if (parent.isDirectory() && parent.list().length == 0) {        logger.debug("Deleting: " + parent.getAbsolutePath());        if (!parent.delete()) {          logger.debug("Failed to delete: " + parent.getAbsolutePath());        }      }      deleteEmptyDirsCreatedForAddOnFiles(file);    } catch (    Exception e) {      logger.error("Failed to uninstall file " + file.getAbsolutePath(),e);    }  }  Control.getSingleton().getExtensionLoader().addonFilesRemoved();  return uninstalledWithoutErrors;}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.externalEntityDecl(name,publicId,systemId);}  }
class C{  public SolrCore(String name,String dataDir,SolrConfig config,IndexSchema schema,CoreDescriptor cd){  this(name,dataDir,config,schema,cd,null,null,null);}  }
class C{  public void deleteRow(int selectedRow){  Money startPrice=(Money)this.getValueAt(selectedRow,0);  for (  final Aspect element : getData().getAspect()) {    if (CoreUtils.nullSafeComparator(((Entrylimit)element).getStartPrice(),startPrice.getBigDecimalValue()) == 0) {      getData().remove(element);      getData().setDirty(true);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj == null) {    return false;  }  if (!(getClass() == obj.getClass())) {    return false;  }  return super.equals(obj);}  }
class C{  @Override protected boolean hasFab(){  return false;}  }
class C{  public static short max(final short... array){  validateArray(array);  short max=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] > max) {      max=array[i];    }  }  return max;}  }
class C{  void finishChange(){  if (stopTimer != null) {    stopTimer.stop();  }  stopTimer=null;  _throttle=null;  distanceRemaining=0;  desiredSpeedStep=-1;  extraDelay=0.0f;  referenced=null;synchronized (this) {    distanceTravelled=0;    stepQueue=new LinkedList<SpeedSetting>();  }}  }
class C{  protected void _error(String message){  if (config.calculatePosition) {    Position currentPosition=position(ndx);    message=message.concat(StringPool.SPACE).concat(currentPosition.toString());  } else {    message=message.concat(" [@").concat(Integer.toString(ndx)).concat(StringPool.RIGHT_SQ_BRACKET);  }  visitor.error(message);}  }
class C{  private void onCancelClicked(){  this.finish();}  }
class C{  public CResolveAllFunctionsSingleProjectAction(final JComponent parent,final IDatabase database,final INaviProject project){  super("Resolve all imported functions");  m_parent=Preconditions.checkNotNull(parent,"IE01915: Parent argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE01916: Database argument can not be null");  m_project=Preconditions.checkNotNull(project,"IE02342: module argument can not be null");}  }
class C{  public Task<VcenterRestRep> update(URI id,VcenterUpdateParam input){  return update(id,input,false);}  }
class C{  private String doubleToString(double input,boolean isInteger){  if (Double.isNaN(input)) {    return null;  }  if (isInteger && input == (int)input) {    return "" + (int)input;  } else {    return "" + input;  }}  }
class C{  public void startExecuting(){  this.field_75343_h=0;}  }
class C{  private void removeNavigation(){  MapHandler.getMapHandler().removeMarkers();  fromLocalET.setText("");  toLocalET.setText("");  Navigator.getNavigator().setOn(false);  Destination.getDestination().setStartPoint(null);  Destination.getDestination().setEndPoint(null);}  }
class C{  public UsersTableModel(){  this.users=new ArrayList<>();}  }
class C{  public long lastModified(){  return file != null ? file.lastModified() : zipEntry.getTime();}  }
class C{  protected void rejectRemoteReceivedHeaderInvalid() throws MessagingException {  if (!isLeaveRemoteReceivedHeaderInvalid())   setMessageDeleted();  if (isMarkRemoteReceivedHeaderInvalidSeen())   setMessageSeen();  StringBuilder messageBuffer=new StringBuilder("Rejected mail with an invalid Received: header at index ");  messageBuffer.append(getRemoteReceivedHeaderIndex());  messageBuffer.append(".");  logStatusInfo(messageBuffer.toString());}  }
class C{  public PCAResult processIds(DBIDs ids,Relation<? extends NumberVector> database){  return processCovarMatrix(covarianceMatrixBuilder.processIds(ids,database));}  }
class C{  public void layoutContainer(Container target){synchronized (target.getTreeLock()) {    Insets insets=target.getInsets();    Dimension d;    d=target.getSize();    int top=insets.top;    int bottom=d.height - insets.bottom;    int left=insets.left;    int right=d.width - insets.right;    int top1=top;    int bottom1=bottom;    int left1=left;    if ((xLabel != null) && xLabel.isVisible()) {      d=xLabel.getPreferredSize();      bottom1-=d.height + vgap;    }    if ((yLabel != null) && yLabel.isVisible()) {      d=yLabel.getPreferredSize();      left1+=d.width + hgap;    }    if ((title != null) && title.isVisible()) {      d=title.getPreferredSize();      top1+=d.height + vgap;    }    if ((xLabel != null) && xLabel.isVisible())     xLabel.setBounds(left1,bottom1,right - left1,bottom - bottom1);    if ((yLabel != null) && yLabel.isVisible())     yLabel.setBounds(left,top1,left1 - left,bottom1 - top1);    if ((title != null) && title.isVisible())     title.setBounds(left,top,right - left,top1 - top);    if ((chart != null) && chart.isVisible())     chart.setBounds(left1,top1,right - left1,bottom1 - top1);  }}  }
class C{  public static URI makeURI(Object path){  try {    if (path instanceof String)     return new URI((String)path); else     if (path instanceof File)     return ((File)path).toURI(); else     if (path instanceof URL)     return ((URL)path).toURI(); else     return null;  } catch (  Exception e) {    return null;  }}  }
class C{  public static ClassificationDataSet loadC(File file,double sparseRatio) throws FileNotFoundException, IOException {  return loadC(file,sparseRatio,-1);}  }
class C{  private void createFASTPolicy(String policyID,AutoTieringPolicy policy,String policyRuleName,URI storageSystemURI,String policyEnabled,String provisioningType) throws IOException {  boolean newPolicy=false;  if (null == policy) {    newPolicy=true;    policy=new AutoTieringPolicy();    policy.setId(URIUtil.createId(AutoTieringPolicy.class));    policy.setStorageSystem(storageSystemURI);    policy.setNativeGuid(policyID);    policy.setSystemType(getDeviceType(storageSystemURI));  }  policy.setLabel(policyRuleName);  policy.setPolicyName(policyRuleName);  policy.setPolicyEnabled(policyEnabled.equalsIgnoreCase("1"));  policy.setProvisioningType(provisioningType);  if (newPolicy) {    _newFastPolicies.add(policy);  } else {    _updateFastPolicies.add(policy);  }}  }
class C{  public boolean isValidAction(String action){  String[] options=getActionOptions();  for (int i=0; i < options.length; i++) {    if (options[i].equals(action))     return true;  }  return false;}  }
class C{  public Compiler createCompiler(boolean jspcMode) throws JasperException {  if (jspCompiler != null) {    return jspCompiler;  }  jspCompiler=new Compiler(this,jsw,jspcMode);  return jspCompiler;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.363 -0500",hash_original_method="5F8F1549FF6A2936584D81A340335636",hash_generated_method="5BA1C973DC010B01221EFF58C702D710") private boolean arrowScrollImpl(int direction){  if (getChildCount() <= 0) {    return false;  }  View selectedView=getSelectedView();  int selectedPos=mSelectedPosition;  int nextSelectedPosition=lookForSelectablePositionOnScreen(direction);  int amountToScroll=amountToScroll(direction,nextSelectedPosition);  final ArrowScrollFocusResult focusResult=mItemsCanFocus ? arrowScrollFocused(direction) : null;  if (focusResult != null) {    nextSelectedPosition=focusResult.getSelectedPosition();    amountToScroll=focusResult.getAmountToScroll();  }  boolean needToRedraw=focusResult != null;  if (nextSelectedPosition != INVALID_POSITION) {    handleNewSelectionChange(selectedView,direction,nextSelectedPosition,focusResult != null);    setSelectedPositionInt(nextSelectedPosition);    setNextSelectedPositionInt(nextSelectedPosition);    selectedView=getSelectedView();    selectedPos=nextSelectedPosition;    if (mItemsCanFocus && focusResult == null) {      final View focused=getFocusedChild();      if (focused != null) {        focused.clearFocus();      }    }    needToRedraw=true;    checkSelectionChanged();  }  if (amountToScroll > 0) {    scrollListItemsBy((direction == View.FOCUS_UP) ? amountToScroll : -amountToScroll);    needToRedraw=true;  }  if (mItemsCanFocus && (focusResult == null) && selectedView != null && selectedView.hasFocus()) {    final View focused=selectedView.findFocus();    if (!isViewAncestorOf(focused,this) || distanceToView(focused) > 0) {      focused.clearFocus();    }  }  if (nextSelectedPosition == INVALID_POSITION && selectedView != null && !isViewAncestorOf(selectedView,this)) {    selectedView=null;    hideSelector();    mResurrectToPosition=INVALID_POSITION;  }  if (needToRedraw) {    if (selectedView != null) {      positionSelector(selectedPos,selectedView);      mSelectedTop=selectedView.getTop();    }    if (!awakenScrollBars()) {      invalidate();    }    invokeOnItemScrollListener();    return true;  }  return false;}  }
class C{  public void err(String message) throws SAXException {  if (errorHandler != null) {    SAXParseException spe=new SAXParseException(message,locator);    errorHandler.error(spe);  }}  }
class C{  public boolean isFirst() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    return this.rowData.isFirst();  }}  }
class C{  protected static Connection createReceiver(ConnectionTable t,Socket s) throws IOException, ConnectionException {  Connection c=new Connection(t,s);  boolean readerStarted=false;  try {    c.startReader(t);    readerStarted=true;  }  finally {    if (!readerStarted) {      c.closeForReconnect(LocalizedStrings.Connection_COULD_NOT_START_READER_THREAD.toLocalizedString());    }  }  c.waitForHandshake();  c.finishedConnecting=true;  return c;}  }
class C{  public boolean crosses(Geometry g){  return baseGeom.crosses(g);}  }
class C{  private void additionalAction_Signature(final FormObject formObj,final int eventType){  if (showMethods) {    System.out.println("DefaultActionHandler.additionalAction_Signature()");  }  if (eventType == MOUSECLICKED) {    final PdfObject sigObject=formObj.getDictionary(PdfDictionary.V);    if (sigObject == null) {      return;    }    showSig(sigObject);  } else {    setCursor(eventType);  }}  }
class C{  private void outputErrorToStream(Writer writer,String msg) throws IOException {  if (outputMsgStart != null && outputMsgEnd != null) {    writer.write(outputMsgStart);    writer.write(msg);    writer.write(outputMsgEnd);  }  return;}  }
class C{  public void push(List<SlackAttachment> attachments) throws IOException {  slackService.push(webhookUrl,new SlackMessage(),user,icon,channel,parse,attachments);}  }
class C{  private static int determineConsecutiveBinaryCount(String msg,int startpos,Charset encoding) throws WriterException {  final CharsetEncoder encoder=encoding.newEncoder();  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch)) {      numericCount++;      int i=idx + numericCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (numericCount >= 13) {      return idx - startpos;    }    ch=msg.charAt(idx);    if (!encoder.canEncode(ch)) {      throw new WriterException("Non-encodable character detected: " + ch + " (Unicode: "+ (int)ch+ ')');    }    idx++;  }  return idx - startpos;}  }
class C{  private void validateFullCopyCreateRequest(List<BlockObject> fcSourceObjList,Project project,String name,int count,boolean createInactive,BlockFullCopyApi fullCopyApiImpl){  if (count <= 0) {    throw APIException.badRequests.parameterMustBeGreaterThan("count",0);  }  ArgValidator.checkFieldNotEmpty(name,"name");  TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());  ArgValidator.checkEntity(tenant,project.getTenantOrg().getURI(),false);  BlockServiceUtils.verifyUserIsAuthorizedForRequest(project,BlockServiceUtils.getUserFromContext(_securityContext),_permissionsHelper);  Map<URI,VirtualPool> vpoolMap=new HashMap<URI,VirtualPool>();  Map<URI,List<BlockObject>> vpoolSourceObjMap=new HashMap<URI,List<BlockObject>>();  for (  BlockObject fcSourceObj : fcSourceObjList) {    URI fcSourceURI=fcSourceObj.getId();    if (URIUtil.isType(fcSourceURI,Volume.class)) {      VolumeIngestionUtil.checkOperationSupportedOnIngestedVolume((Volume)fcSourceObj,ResourceOperationTypeEnum.CREATE_VOLUME_FULL_COPY,_dbClient);    }    BlockServiceUtils.validateNotAnInternalBlockObject(fcSourceObj,false);    VirtualPool vpool=BlockFullCopyUtils.queryFullCopySourceVPool(fcSourceObj,_dbClient);    URI vpoolURI=vpool.getId();    if (!vpoolMap.containsKey(vpoolURI)) {      vpoolMap.put(vpoolURI,vpool);    }    if (!vpoolSourceObjMap.containsKey(vpoolURI)) {      List<BlockObject> vpoolSourceObjs=new ArrayList<BlockObject>();      vpoolSourceObjs.add(fcSourceObj);      vpoolSourceObjMap.put(vpoolURI,vpoolSourceObjs);    } else {      List<BlockObject> vpoolSourceObjs=vpoolSourceObjMap.get(vpoolURI);      vpoolSourceObjs.add(fcSourceObj);    }  }  for (  URI vpoolURI : vpoolSourceObjMap.keySet()) {    long totalRequiredSize=0;    List<BlockObject> vpoolSourceObjs=vpoolSourceObjMap.get(vpoolURI);    for (    BlockObject vpoolSourcObj : vpoolSourceObjs) {      totalRequiredSize+=count * BlockFullCopyUtils.getCapacityForFullCopySource(vpoolSourcObj,_dbClient);    }    CapacityUtils.validateQuotasForProvisioning(_dbClient,vpoolMap.get(vpoolURI),project,tenant,totalRequiredSize,"volume");  }  fullCopyApiImpl.validateFullCopyCreateRequest(fcSourceObjList,count);}  }
class C{  public void onReqRealTimeBars(Contract contract,boolean mktData) throws BrokerModelException {}  }
class C{  public synchronized void clean(){  List<File> list=new ArrayList<File>(value.length);  File file=null;  for (int i=0; i < value.length; i++) {    file=value[i];    if (file == null)     continue;    if (!file.exists())     continue;    list.add(file);  }  setValue(list.toArray(new File[list.size()]));}  }
class C{  public Statement toOneStatementOrNull(){  return inner.isEmpty() ? null : toOptionalBlock();}  }
class C{  public static OptionHandler shallowCopy(OptionHandler obj){  if (obj == null) {    System.err.println("Cannot create shallow copy of null object!");    return null;  }  try {    return fromCommandLine(OptionHandler.class,toCommandLine(obj));  } catch (  Exception e) {    System.err.println("Failed to create shallow copy of " + obj.getClass().getName() + ":");    e.printStackTrace();    return null;  }}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  IntBuffer numEntriesBuffer(){  byteBuffer.position(PERFDATA_PROLOG_NUMENTRIES_OFFSET);  IntBuffer ib=byteBuffer.asIntBuffer();  ib.limit(1);  return ib;}  }
class C{  protected void paintIconForVertex(RenderContext<V,E> rc,V v,Layout<V,E> layout){  GraphicsDecorator g=rc.getGraphicsContext();  boolean vertexHit=true;  int[] coords=new int[2];  Shape shape=vertexShapeMap.get(v);  if (shape == null || dirtyVertices.contains(v)) {    shape=prepareFinalVertexShape(rc,v,layout,coords);    vertexShapeMap.put(v,shape);    dirtyVertices.remove(v);  }  vertexHit=vertexHit(rc,shape);  if (vertexHit) {    if (rc.getVertexIconTransformer() != null) {      Icon icon=rc.getVertexIconTransformer().apply(v);      if (icon != null) {        g.draw(icon,rc.getScreenDevice(),shape,coords[0],coords[1]);      } else {        paintShapeForVertex(rc,v,shape);      }    } else {      paintShapeForVertex(rc,v,shape);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addAll(Annotations annotations){  if (annotations != null) {    this.keyValueMap.putAll(annotations);  }}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  public static <Value extends Comparable<Value>>int nullSafeCompare(final Value first,final Value second){  if (first == null) {    return second == null ? EQUAL_COMPARE_RESULT : LOWER_THAN_COMPARE_RESULT;  }  return second == null ? GREATER_THAN_COMPARE_RESULT : first.compareTo(second);}  }
class C{  @Override public View onCreateFloatView(int position){  View v=mListView.getChildAt(position + mListView.getHeaderViewsCount() - mListView.getFirstVisiblePosition());  if (v == null) {    return null;  }  v.setPressed(false);  v.setDrawingCacheEnabled(true);  mFloatBitmap=Bitmap.createBitmap(v.getDrawingCache());  v.setDrawingCacheEnabled(false);  if (mImageView == null) {    mImageView=new ImageView(mListView.getContext());  }  mImageView.setBackgroundColor(mFloatBGColor);  mImageView.setPadding(0,0,0,0);  mImageView.setImageBitmap(mFloatBitmap);  mImageView.setLayoutParams(new ViewGroup.LayoutParams(v.getWidth(),v.getHeight()));  return mImageView;}  }
class C{  public static void updateDonators(){  Mekanism.donators.clear();  for (  String s : getHTML("https://dl.dropbox.com/u/90411166/Donators/Mekanism.txt")) {    Mekanism.donators.add(s);  }}  }
class C{  private boolean validate(Class type,InputNode node,Context context) throws Exception {  return new Traverser(context).validate(node,type);}  }
class C{  public PartitionKeyGroupCreateRequest createPartitionKeyGroupCreateRequest(String partitionKeyGroupName){  PartitionKeyGroupCreateRequest partitionKeyGroupCreateRequest=new PartitionKeyGroupCreateRequest();  partitionKeyGroupCreateRequest.setPartitionKeyGroupKey(createPartitionKeyGroupKey(partitionKeyGroupName));  return partitionKeyGroupCreateRequest;}  }
class C{  public boolean has(String name,Scriptable start){  return name.equals("dim");}  }
class C{  public boolean isDiscreteHours(){  return null == discreteHours ? _discreteHours : discreteHours.get();}  }
class C{  protected ArrayList<Attribute> createAttributes(Element parent,int[] classIndex) throws Exception {  Vector<Element> list;  ArrayList<Attribute> result;  int i;  Element node;  Attribute att;  result=new ArrayList<Attribute>();  classIndex[0]=-1;  list=getChildTags(parent,TAG_ATTRIBUTE);  for (i=0; i < list.size(); i++) {    node=list.get(i);    att=createAttribute(node);    if (node.getAttribute(ATT_CLASS).equals(VAL_YES)) {      classIndex[0]=i;    }    result.add(att);  }  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Visualization(){  m_actions=new ActivityMap();  m_renderers=new DefaultRendererFactory();  m_visual=new LinkedHashMap();  m_source=new HashMap();  m_focus=new HashMap();  m_displays=new ArrayList();  addFocusGroup(Visualization.FOCUS_ITEMS,new DefaultTupleSet());  addFocusGroup(Visualization.SELECTED_ITEMS,new DefaultTupleSet());}  }
class C{  public HashMap<T,V> vars(){  return vars;}  }
class C{  void presentAnimations(View parent,float offset,float offsetInPixel){  int animMapSize=mAnimations.size();  for (int i=0; i < animMapSize; i++) {    int key=mAnimations.keyAt(i);    ArrayList<Animation> animations=mAnimations.get(key);    int animListSize=animations.size();    for (int j=0; j < animListSize; j++) {      Animation animation=animations.get(j);      final View viewToAnimate;      if (key == parent.getId() || key == Animation.FULL_PAGE) {        viewToAnimate=parent;      } else {        viewToAnimate=parent.findViewById(key);      }      if (animation == null || viewToAnimate == null) {        continue;      }      animation.animate(viewToAnimate,offset,offsetInPixel,-1);    }  }}  }
class C{  public int numSources(){  return NUM_SOURCES;}  }
class C{  public static void main(String[] args){  String[][] tests=new String[42][2];  tests[0][0]=WARNING_OUTPUT;  tests[0][1]="warning - @inheritDoc used but testBadInheritDocTag() " + "does not override or implement any method.";  for (int i=1; i < tests.length - 2; i++) {    tests[i][0]=BUG_ID + FS + "pkg"+ FS+ "TestTagInheritence.html";    tests[i][1]="Test " + i + " passes";  }  tests[tests.length - 2][0]=BUG_ID + FS + "firstSentence"+ FS+ "B.html";  tests[tests.length - 2][1]="<div class=\"block\">First sentence.</div>";  tests[tests.length - 1][0]=BUG_ID + FS + "firstSentence2"+ FS+ "C.html";  tests[tests.length - 1][1]="<div class=\"block\">First sentence.</div>";  TestTagInheritence tester=new TestTagInheritence();  run(tester,ARGS,tests,NO_TEST);  tester.printSummary();}  }
class C{  private boolean isXMLString(String string){  return string.contains("</") || string.contains("/>");}  }
class C{  public static double toRadians(double angdeg){  if (USE_JDK_MATH) {    return Math.toRadians(angdeg);  }  return angdeg * (Math.PI / 180);}  }
class C{  public void sendShieldFrame(ShieldFrame frame){  sendShieldFrame(frame,false);}  }
class C{  @Override public double execute(double in1,double in2){  return (in1 <= in2 ? 1.0 : 0.0);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"STR");  translateAll(environment,instruction,"STR",instructions);}  }
class C{  public void addInterface(NetworkInterface ni){  GridCell c=cellFromCoord(ni.getLocation());  c.addInterface(ni);  ginterfaces.put(ni,c);}  }
class C{  public void test_exactNamespaceOverride(){  final IIndexManager indexManager=null;  final Properties properties=new Properties();  final String namespace="foo.baz";  final String globalName="bigdata.bar";  final String defaultValue="goo";  final String overrideValue="boo";  assertEquals(defaultValue,Configuration.getProperty(indexManager,properties,namespace,globalName,defaultValue));  final String overrideName=Configuration.getOverrideProperty(namespace,globalName);  properties.setProperty(overrideName,overrideValue);  assertEquals(overrideValue,Configuration.getProperty(indexManager,properties,namespace,globalName,defaultValue));}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  private static HGQueryCondition toDNF(HGQueryCondition C){  HGQueryCondition inputCondition=C;  if (C instanceof And) {    And and=(And)C;    HashSet<HGQueryCondition> andSet=new HashSet<HGQueryCondition>();    for (int i=0; i < and.size(); i++) {      HGQueryCondition sub=and.get(i);      sub=toDNF(sub);      if (sub instanceof And) {        for (        HGQueryCondition subsub : (And)sub)         if (!andSet.contains(subsub))         andSet.add(subsub);      } else       if (sub instanceof Or) {        Or result=new Or();        for (        HGQueryCondition subsub : (Or)sub) {          And newsub=new And();          newsub.add(subsub);          newsub.addAll(andSet);          newsub.addAll(and.subList(i + 1,and.size()));          result.add(newsub);        }        C=toDNF(result);        break;      } else       andSet.add(sub);    }    and=new And();    and.addAll(andSet);    if (C == inputCondition)     C=and;  } else   if (C instanceof Or) {    Or or=(Or)C;    HashSet<HGQueryCondition> orSet=new HashSet<HGQueryCondition>();    for (int i=0; i < or.size(); i++) {      HGQueryCondition sub=or.get(i);      sub=toDNF(sub);      if (sub instanceof Or) {        for (        HGQueryCondition subsub : (Or)sub)         if (!orSet.contains(subsub))         orSet.add(subsub);      } else       if (!orSet.contains(sub))       orSet.add(sub);    }    or=new Or();    or.addAll(orSet);    C=or;  } else   if (C instanceof MapCondition) {    MapCondition mcond=(MapCondition)C;    C=new MapCondition(toDNF(mcond.getCondition()),mcond.getMapping());  }  AnalyzedQuery<?> aquery=(AnalyzedQuery<?>)VarContext.ctx().get("$analyzed").get();  if (aquery != null && inputCondition != C)   aquery.transformed(inputCondition,C);  rememberInAnalyzer(inputCondition,C);  return C;}  }
class C{  private void deleteControlFromTreeViewer(RisikoMassnahmenUmsetzung massnahme){  try {    GefaehrdungsUmsetzung parent=(GefaehrdungsUmsetzung)massnahme.getParent();    if (massnahme instanceof RisikoMassnahmenUmsetzung && parent instanceof GefaehrdungsUmsetzung) {      RemoveMassnahmeFromGefaherdung command=new RemoveMassnahmeFromGefaherdung(parent,massnahme);      command=ServiceFactory.lookupCommandService().executeCommand(command);      parent=command.getParent();      parent.getChildren().remove(massnahme);      GefaehrdungsBaumRoot baumElement=(GefaehrdungsBaumRoot)viewerScenario.getInput();      baumElement.replaceChild(parent);      viewerScenario.refresh();    }  } catch (  Exception e) {    LOG.error(e);  }}  }
class C{  public char next(){  if (++pos < max) {    return chars[pos];  }  pos=max;  return DONE;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static StandardAppBarFragment newInstance(){  return new StandardAppBarFragment();}  }
class C{  private CellInfoLte(Parcel in){  super(in);  mCellIdentityLte=CellIdentityLte.CREATOR.createFromParcel(in);  mCellSignalStrengthLte=CellSignalStrengthLte.CREATOR.createFromParcel(in);  if (DBG)   log("CellInfoLte(Parcel): " + toString());}  }
class C{  public static IdentificadorBean altaNotificacion(String idSession_,NotificacionBean nuevo_,String entidad) throws ServicioWebExcepcion, DatosIncorrectosExcepcion {  String idNotificacionExternoConector=null;  NotificacionesDatos bd=new NotificacionesDatos();  if (StringUtils.isEmpty(nuevo_.getNumeroExpediente()) || StringUtils.isEmpty(nuevo_.getNifDest()))   throw new DatosIncorrectosExcepcion(DatosIncorrectosErrorCodigos.EC_UNKNOW_DATA);  ConectorNotificacion conector=getConectorString(nuevo_,entidad);  ResultadoAltaNotificacion resultado=null;  if (conector != null) {    try {      resultado=conector.crearNotificacion(nuevo_,entidad,idSession_);    } catch (    java.rmi.RemoteException ex) {      logger.debug("fallo la comunicacion con el servicio: " + ex.getMessage());      throw new ServicioWebExcepcion(ServicioWebErrorCodigos.EC_CONNECT_FAILD,ex);    }catch (    Exception ex) {      logger.debug("Fallo inesperado llamando al servicio: " + ex.getMessage());      throw new ServicioWebExcepcion(ServicioWebErrorCodigos.EC_UNKNOW_ERROR,ex);    }  }  if (resultado == null) {    bd.setError(MENSAJE_FALLO_INSERTAR);    bd.setEstado(VALOR_ESTADO_FALLO);  } else   if (StringUtils.isEmpty(resultado.getIdNotificacionSistemaExterno())) {    bd.setError(resultado.getErrorSistemaExterno());    bd.setEstado(VALOR_ESTADO_ERROR_DEVUELTO_CONECTOR);  } else {    bd.setEstado(conector.getEstadoNotificacionCreada());    idNotificacionExternoConector=resultado.getIdNotificacionSistemaExterno();  }  bd.setId(idNotificacionExternoConector);  bd.setNotiId(new Guid().toString());  bd.setFechaRegistroAnterior(nuevo_.getFechaRegistro());  bd.setFechaEfectuadaEntrega(nuevo_.getFechaEntrega());  bd.setNifDestinatario(nuevo_.getNifDest());  bd.setNumeroExpediente(nuevo_.getNumeroExpediente());  bd.setProcedimientoExpedienteAnterior(nuevo_.getProcedimiento());  bd.setRegistroSalida(nuevo_.getNumeroRegistro());  bd.setUsuario(nuevo_.getNifDest());  bd.setTipoCorrespondencia(nuevo_.getTipoCorrespondencia());  bd.setOrganismo(nuevo_.getOrganismo());  bd.setAsunto(nuevo_.getAsunto());  bd.setTipo(nuevo_.getTipo());  bd.setTexto(nuevo_.getTexto());  bd.setNombreDestinatario(nuevo_.getNombreDest());  bd.setApellidosDestinatario(nuevo_.getApellidosDest());  bd.setCorreoDestinatario(nuevo_.getCorreoDest());  bd.setDEU(nuevo_.getDeu());  bd.setIdioma(nuevo_.getIdioma());  bd.setTipoVia(nuevo_.getTipoViaDireccion());  bd.setNombreVia(nuevo_.getViaDireccion());  bd.setNumeroVia(nuevo_.getNumeroDireccion());  bd.setEscaleraVia(nuevo_.getEscaleraDireccion());  bd.setPisoVia(nuevo_.getPisoDireccion());  bd.setPuertaVia(nuevo_.getPuertaDireccion());  bd.setTelefono(nuevo_.getTelefono());  bd.setMunicipio(nuevo_.getMunicipio());  bd.setProvincia(nuevo_.getProvincia());  bd.setCodigoPostal(nuevo_.getCodigoPostal());  bd.setDescripcionEstado(nuevo_.getDescripcionEstado());  bd.setFechaActualizacionEstado(nuevo_.getFechaActualiEstado());  bd.setSistemaId(nuevo_.getSistemaId());  bd.setMovil(nuevo_.getMovil());  try {    bd.add(entidad);    if (nuevo_.documentoCount() > 0) {      DocumentosDatos bdDoc=new DocumentosDatos();      bdDoc.setCodigo(nuevo_.getNameDocumento(0));      bdDoc.setExpediente(nuevo_.getNumeroExpediente());      bdDoc.setNifDestinatario(nuevo_.getNifDest());      bdDoc.setGuid(new ieci.tecdoc.sgm.rde.ContenedorDocumentosManager().storeDocument(idSession_,nuevo_.getDataDocumento(0),nuevo_.getExtDocumento(0),entidad));      bdDoc.setNotiId(bd.getNotiId());      bdDoc.add(entidad);    }  } catch (  Exception ex) {    logger.debug("Fallo inesperado al dar de alta la notificacion: " + ex.getMessage());    throw new ServicioWebExcepcion(ServicioWebErrorCodigos.EC_UNKNOW_ERROR,ex);  }  if (StringUtils.isEmpty(idNotificacionExternoConector))   return null;  return new IdentificadorBean(bd.getNotiId());}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException {  path=IgfsUtils.readPath(in);  blockSize=in.readInt();  grpBlockSize=in.readLong();  len=in.readLong();  props=U.readStringMap(in);  accessTime=in.readLong();  modificationTime=in.readLong();  flags=in.readByte();}  }
class C{  @Override public void init(){  super.init();  initEnvironment();}  }
class C{  protected void onException(final WroRuntimeException e){  throw e;}  }
class C{  public float[] generateTransformedValuesCandle(List<CandleEntry> entries,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil((to - from) * phaseX) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    CandleEntry e=entries.get(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getHigh() * phaseY;    }  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  public int toLineNumber(int pc){  int n=tableLength();  int i=0;  for (; i < n; ++i)   if (pc < startPc(i))   if (i == 0)   return lineNumber(0); else   break;  return lineNumber(i - 1);}  }
class C{  public Map<Integer,Double> compute(Collection<? extends Number> dataset){  return computeInPlace(Doubles.toArray(dataset));}  }
class C{  public static void migrateDownloads(Properties ctx){  String sql="SELECT COUNT(*) FROM M_ProductDownload";  int no=DB.getSQLValue(null,sql);  if (no > 0)   return;  int count=0;  sql="SELECT AD_Client_ID, AD_Org_ID, M_Product_ID, Name, DownloadURL " + "FROM M_Product " + "WHERE DownloadURL IS NOT NULL";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int AD_Client_ID=rs.getInt(1);      int AD_Org_ID=rs.getInt(2);      int M_Product_ID=rs.getInt(3);      String Name=rs.getString(4);      String DownloadURL=rs.getString(5);      MProductDownload pdl=new MProductDownload(ctx,0,null);      pdl.setClientOrg(AD_Client_ID,AD_Org_ID);      pdl.setM_Product_ID(M_Product_ID);      pdl.setName(Name);      pdl.setDownloadURL(DownloadURL);      if (pdl.save()) {        count++;        String sqlUpdate="UPDATE M_Product SET DownloadURL = NULL WHERE M_Product_ID=" + M_Product_ID;        int updated=DB.executeUpdate(sqlUpdate,null);        if (updated != 1)         s_log.warning("Product not updated");      } else       s_log.warning("Product Download not created M_Product_ID=" + M_Product_ID);    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  s_log.info("#" + count);}  }
class C{  protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;}  }
class C{  protected boolean[] canPredict(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("basic predict");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("unary");  accepts.add("binary");  accepts.add("nominal");  accepts.add("numeric");  accepts.add("string");  accepts.add("date");  accepts.add("relational");  accepts.add("multi-instance");  accepts.add("not in classpath");  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  @Override public String graph() throws Exception {  if (m_Tree == null) {    throw new Exception("RandomTree: No model built yet.");  }  StringBuffer resultBuff=new StringBuffer();  m_Tree.toGraph(resultBuff,0,null);  String result="digraph RandomTree {\n" + "edge [style=bold]\n" + resultBuff.toString() + "\n}\n";  return result;}  }
class C{  public void initSharedConfiguration(boolean loadSharedConfigFromDir) throws Exception {  status.set(SharedConfigurationStatus.STARTED);  Region<String,Configuration> configRegion=this.getConfigurationRegion();  if (loadSharedConfigFromDir) {    lockSharedConfiguration();    try {      logger.info("Reading cluster configuration from '{}' directory",SharedConfiguration.CLUSTER_CONFIG_ARTIFACTS_DIR_NAME);      Map<String,Configuration> sharedConfigMap=this.readSharedConfigurationFromDisk();      final DM dm=cache.getDistributedSystem().getDistributionManager();      if (dm.getNormalDistributionManagerIds().isEmpty()) {        Set<DistributedMember> locatorsWithSC=new HashSet<DistributedMember>(dm.getAllHostedLocatorsWithSharedConfiguration().keySet());        if (!locatorsWithSC.isEmpty()) {          final ImportSharedConfigurationArtifactsFunction fn=new ImportSharedConfigurationArtifactsFunction();          final Date date=new Date();          String zipFileName=CliStrings.format(CliStrings.EXPORT_SHARED_CONFIG__FILE__NAME,new Timestamp(date.getTime()).toString());          try {            ZipUtils.zip(getSharedConfigurationDirPath(),zipFileName);            File zipFile=new File(zipFileName);            byte[] zipBytes=FileUtils.readFileToByteArray(zipFile);            Object[] args=new Object[]{zipFileName,zipBytes};            CliUtil.executeFunction(fn,args,locatorsWithSC).getResult();          } catch (          Exception e) {            logger.error(e.getMessage(),e);          }        }      }      configRegion.clear();      configRegion.putAll(sharedConfigMap);    }  finally {      unlockSharedConfiguration();    }  } else {    lockSharedConfiguration();    putSecurityPropsIntoClusterConfig(configRegion);    try {      Set<Entry<String,Configuration>> configEntries=configRegion.entrySet();      for (      Entry<String,Configuration> configEntry : configEntries) {        Configuration configuration=configEntry.getValue();        try {          this.writeConfig(configuration);        } catch (        Exception e) {          logger.info(e.getMessage(),e);        }      }      logger.info("Completed writing the shared configuration to 'cluster_config' directory");      this.getAllJarsFromOtherLocators();    }  finally {      unlockSharedConfiguration();    }  }  status.set(SharedConfigurationStatus.RUNNING);}  }
class C{  @Override public void bind(ShaderProgram shader){  bind(shader,null);}  }
class C{  protected ComboPopup createPopup(){  CompiereComboPopup newPopup=new CompiereComboPopup(comboBox);  newPopup.getAccessibleContext().setAccessibleParent(comboBox);  return newPopup;}  }
class C{  @SuppressWarnings("unchecked") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  public TranslateBrowsePathsToNodeIdsResponse TranslateBrowsePathsToNodeIds(TranslateBrowsePathsToNodeIdsRequest req) throws ServiceFaultException, ServiceResultException {  return (TranslateBrowsePathsToNodeIdsResponse)channel.serviceRequest(req);}  }
class C{  protected boolean isFirst(){  boolean defaultValue=myNode.getTreePrev() == null;  if (defaultValue) {    IElementType parentNodeType=PsiUtilCore.getElementType(myNode.getTreeParent());    if (parentNodeType == SET_DIRECTIVE) {      return PsiUtilCore.getElementType(myNode) == TT2_SET;    } else     if (parentNodeType == GET_DIRECTIVE) {      return PsiUtilCore.getElementType(myNode) == TT2_GET;    }  }  return defaultValue;}  }
class C{  public ComponentName(String pkg,String cls){  if (pkg == null)   throw new NullPointerException("package name is null");  if (cls == null)   throw new NullPointerException("class name is null");  mPackage=pkg;  mClass=cls;}  }
class C{  public void error(Throwable throwable,String msg,Object[] argArray){  innerLog(Level.ERROR,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,argArray);}  }
class C{  private LoggerHolder(){  throw new AssertionError("This should never be instantiated");}  }
class C{  public void append(StringBuffer buffer,String fieldName,short[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public static void map(Compiler compiler,Node.Nodes page) throws JasperException {  ELFunctionMapper map=new ELFunctionMapper();  map.ds=new StringBuilder();  map.ss=new StringBuilder();  page.visit(map.new ELFunctionVisitor());  String ds=map.ds.toString();  if (ds.length() > 0) {    Node root=page.getRoot();    new Node.Declaration(map.ss.toString(),null,root);    new Node.Declaration("static {\n" + ds + "}\n",null,root);  }}  }
class C{  public static File createTempFile(){  File tempFile;  try {    tempFile=File.createTempFile("cqengine_",".db");  } catch (  Exception e) {    throw new IllegalStateException("Failed to create temp file for CQEngine disk persistence",e);  }  return tempFile;}  }
class C{  public static String longToHexBytes(long v){  long mask=0XFFL;  StringBuilder sb=new StringBuilder();  for (int i=8; i-- > 0; ) {    String s=Long.toHexString((v >>> i * 8) & mask);    sb.append(zeroPad(s,2)).append(" ");  }  return sb.toString();}  }
class C{  public static final TColor newRandom(){  return newRGBA(MathUtils.random(1f),MathUtils.random(1f),MathUtils.random(1f),1);}  }
class C{  public TicTacToeBoard board(){  return board;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected void internalHandleException(Change change,Throwable t){}  }
class C{  public static Component createGap(int width){  return Box.createHorizontalStrut(width);}  }
class C{  private void fieldGoalAtt(Team offense,Team defense){  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {    if (gamePoss) {      homeScore+=3;      HomeKStats[3]++;      HomeKStats[2]++;    } else {      awayScore+=3;      AwayKStats[3]++;      AwayKStats[2]++;    }    gameEventLog+=getEventPrefix() + offense.abbr + " K "+ offense.getK(0).name+ " made the "+ (110 - gameYardLine)+ " yard FG.";    addPointsQuarter(3);    offense.getK(0).statsFGMade++;    offense.getK(0).statsFGAtt++;    if (!playingOT)     kickOff(offense); else     resetForOT();  } else {    gameEventLog+=getEventPrefix() + offense.abbr + " K "+ offense.getK(0).name+ " missed the "+ (110 - gameYardLine)+ " yard FG.";    offense.getK(0).statsFGAtt++;    if (!playingOT) {      gameYardLine=Math.max(100 - gameYardLine,20);      gameDown=1;      gameYardsNeed=10;      if (gamePoss) {        HomeKStats[3]++;      } else {        AwayKStats[3]++;      }      gamePoss=!gamePoss;    } else     resetForOT();  }  gameTime-=20;}  }
class C{  public boolean isSuccessful(){  return success;}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  public static Integer createServerCacheOne(Integer maxThreads) throws Exception {  new DataSerializerPropogationDUnitTest().createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setMirrorType(MirrorType.KEYS_VALUES);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  CacheServer server1=cache.addCacheServer();  server1.setPort(port);  server1.setMaxThreads(maxThreads.intValue());  server1.setNotifyBySubscription(true);  server1.start();  return new Integer(port);}  }
class C{  public void testForkGet(){  testForkGet(mainPool());}  }
class C{  public boolean parseStatement(PerlBuilder b,int l){  return false;}  }
class C{  public synchronized void clear(){  this.value=0;  this.released=false;}  }
class C{  @SuppressWarnings("unchecked") public NocacheFastmapDistanceMatrix(List userObjects,DistanceCalculator distanceFunction,boolean distributeObjects){  init(distanceFunction,userObjects);  this.distributeObjects=distributeObjects;}  }
class C{  protected static boolean eurliborEOM(final Period p){switch (p.units()) {case Days:case Weeks:    return false;case Months:case Years:  return true;default :throw new LibraryException("invalid time units");}}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  void testCloseShouldNotFlushIfInErrorState(int rcToFailComplete) throws Exception {  DistributedLogConfiguration confLocal=newLocalConf();  confLocal.setImmediateFlushEnabled(false);  confLocal.setOutputBufferSize(Integer.MAX_VALUE);  confLocal.setPeriodicFlushFrequencyMilliSeconds(0);  DistributedLock lock=createLock("/test/lock-" + runtime.getMethodName(),zkc,true);  BKLogSegmentWriter writer=createLogSegmentWriter(confLocal,0L,-1L,lock);  DistributedLock lock0=createLock("/test/lock-" + runtime.getMethodName(),zkc0,false);  Future<DistributedLock> lockFuture0=lock0.asyncAcquire();  int numRecords=10;  List<Future<DLSN>> futureList=new ArrayList<Future<DLSN>>(numRecords);  for (int i=0; i < numRecords; i++) {    futureList.add(writer.asyncWrite(DLMTestUtil.getLogRecordInstance(i)));  }  assertEquals("Last tx id should be " + (numRecords - 1),numRecords - 1,writer.getLastTxId());  assertEquals("Last acked tx id should be -1",-1L,writer.getLastTxIdAcknowledged());  assertEquals("Last DLSN should be " + DLSN.InvalidDLSN,DLSN.InvalidDLSN,writer.getLastDLSN());  assertEquals("Position should be " + numRecords,10,writer.getPositionWithinLogSegment());  writer.setTransmitResult(rcToFailComplete);  try {    closeWriterAndLock(writer,lock);    fail("Close a log segment writer in error state should throw exception");  } catch (  BKTransmitException bkte) {    assertEquals("Inconsistent rc is thrown",rcToFailComplete,bkte.getBKResultCode());  }  Await.result(lockFuture0);  lock0.checkOwnership();  assertEquals("Last tx id should still be " + (numRecords - 1),numRecords - 1,writer.getLastTxId());  assertEquals("Last acked tx id should still be " + (numRecords - 1),-1L,writer.getLastTxIdAcknowledged());  assertEquals("Last DLSN should still be " + DLSN.InvalidDLSN,DLSN.InvalidDLSN,writer.getLastDLSN());  assertEquals("Position should still be " + numRecords,10,writer.getPositionWithinLogSegment());  for (int i=0; i < numRecords; i++) {    try {      Await.result(futureList.get(i));      fail("Should be aborted record " + i + " with transmit exception");    } catch (    WriteCancelledException wce) {      assertTrue("Record " + i + " should be aborted because of ledger fenced",wce.getCause() instanceof BKTransmitException);      BKTransmitException bkte=(BKTransmitException)wce.getCause();      assertEquals("Record " + i + " should be aborted",rcToFailComplete,bkte.getBKResultCode());    }  }  LedgerHandle lh=getLedgerHandle(writer);  LedgerHandle readLh=openLedgerNoRecovery(lh);  assertFalse("Ledger " + lh.getId() + " should not be closed",readLh.isClosed());  assertEquals("There should be no entries in ledger " + lh.getId(),LedgerHandle.INVALID_ENTRY_ID,readLh.getLastAddConfirmed());}  }
class C{  public RunConfiguration createConfiguration(String runnerId,String implementationId,URI moduleToRun){  return createConfiguration(runnerId,implementationId,null,moduleToRun);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (!(obj instanceof NdefRecord))   return false;  NdefRecord other=(NdefRecord)obj;  if (!Arrays.equals(mId,other.getId()))   return false;  if (!Arrays.equals(mPayload,other.getPayload()))   return false;  if (mTnf != other.getTnf())   return false;  return Arrays.equals(mType,other.getType());}  }
class C{  public static void paint(final INaviView view,final Graphics graphics,final int width,final int height,final Color background){  graphics.setColor(background);  graphics.fillRect(0,0,width,height);  final GradientPaint paint=new GradientPaint(0,0,Color.WHITE,width,height,new Color(0,128,0));  ((Graphics2D)graphics).setPaint(paint);  graphics.fillRect(0,0,(int)(getLoadPercentage(view) * width),height);}  }
class C{  public void testKeyword() throws Exception {  Analyzer a=new MockAnalyzer(random(),MockTokenizer.KEYWORD,false);  assertAnalyzesTo(a,"a-bc123 defg+hijklmn567opqrstuv78wxy_z ",new String[]{"a-bc123 defg+hijklmn567opqrstuv78wxy_z "});  assertAnalyzesTo(a,"aba4cadaba-Shazam",new String[]{"aba4cadaba-Shazam"});  assertAnalyzesTo(a,"break+on/Nothing",new String[]{"break+on/Nothing"});  assertAnalyzesTo(a,"",new String[0]);}  }
class C{  public boolean copyNeededFilesToTempFolder(File tmpFolder){  tmpWorkingFolder=new File(tmpFolder.getAbsolutePath() + File.separator + folder.getName());  tmpWorkingFolder.mkdirs();  tempApk=new File(tmpWorkingFolder.getAbsolutePath() + File.separator + folder.getName()+ S.APK_EXT);  tempApkZipalign=new File(tmpWorkingFolder.getAbsolutePath() + File.separator + folder.getName()+ "_zipaligned"+ S.APK_EXT);  tempApkSigned=new File(tmpWorkingFolder.getAbsolutePath() + File.separator + folder.getName()+ "_signed"+ S.APK_EXT);  tempCompOdex=new File(tmpWorkingFolder.getAbsolutePath() + File.separator + this.odexFile.getName());  tempOdex=new File(tmpWorkingFolder.getAbsolutePath() + File.separator + this.pureName+ S.ODEX_EXT);  tempDex=new File(tmpWorkingFolder.getAbsolutePath() + File.separator + folder.getName()+ S.DEX_EXT);  tempDex2=new File(tmpWorkingFolder.getAbsolutePath() + File.separator + folder.getName()+ S.DEX2_EXT);  tempDex3=new File(tmpWorkingFolder.getAbsolutePath() + File.separator + folder.getName()+ S.DEX3_EXT);  setTempClasses1(new File(tmpWorkingFolder.getAbsolutePath() + File.separator + S.CLASSES));  setTempClasses2(new File(tmpWorkingFolder.getAbsolutePath() + File.separator + S.CLASSES_2));  setTempClasses3(new File(tmpWorkingFolder.getAbsolutePath() + File.separator + S.CLASSES_3));  Logger.appendLog("[ApkObj]" + this.origApk.getName() + "copying "+ this.origApk.getAbsolutePath()+ " to "+ tempApk.getAbsolutePath());  this.origApk.renameTo(tempApk);  Logger.appendLog("[ApkObj]" + "copying " + odexFile.getAbsolutePath() + " to "+ tempCompOdex.getAbsolutePath());  odexFile.renameTo(tempCompOdex);  return tempApk.exists() && tempCompOdex.exists();}  }
class C{  public static NamedRelatedResourceRep createNamedRef(DataObjectRestRep resource){  return (resource != null) ? new NamedRelatedResourceRep(id(resource),null,name(resource)) : null;}  }
class C{  @Override public void memberOffline(InternalDistributedMember member,PersistentMemberID persistentID){  if (logger.isDebugEnabled()) {    Set<String> onlineMembers=new HashSet<String>();    Set<PersistentMemberID> members=new HashSet<PersistentMemberID>();    members.addAll(PersistenceAdvisorImpl.this.advisor.adviseInitializedPersistentMembers().values());    members.remove(persistentID);    TransformUtils.transform(members,onlineMembers,TransformUtils.persistentMemberIdToLogEntryTransformer);    logger.info(LocalizedMessage.create(LocalizedStrings.PersistenceAdvisorImpl_PERSISTENT_VIEW,new Object[]{PersistenceAdvisorImpl.this.regionPath,TransformUtils.persistentMemberIdToLogEntryTransformer.transform(persistentID),onlineMembers}));  }}  }
class C{  public void user_init() throws java.lang.Exception {  action_obj.scanner=this.scanner;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double minValue;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String whatToInterpolate="";  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  whatToInterpolate=args[2].toLowerCase();  returnNumberToInterpolate=args[3].toLowerCase();  resolution=Double.parseDouble(args[4]);  double circleCircumscrbingGridCell=Math.sqrt(2) * resolution / 2.0;  excludeNeverClassified=Boolean.parseBoolean(args[5]);  excludeUnclassified=Boolean.parseBoolean(args[6]);  excludeBareGround=Boolean.parseBoolean(args[7]);  excludeLowVegetation=Boolean.parseBoolean(args[8]);  excludeMediumVegetation=Boolean.parseBoolean(args[9]);  excludeHighVegetation=Boolean.parseBoolean(args[10]);  excludeBuilding=Boolean.parseBoolean(args[11]);  excludeLowPoint=Boolean.parseBoolean(args[12]);  excludeModelKeyPoint=Boolean.parseBoolean(args[13]);  excludeWater=Boolean.parseBoolean(args[14]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    PointRecColours pointColours;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      if (!whatToInterpolate.equals("rgb data")) {        str1="Data Scale:\tcontinuous";      } else {        str1="Data Scale:\trgb";      }      out.println(str1);      if (whatToInterpolate.equals("rgb data")) {        str1="Preferred Palette:\t" + "rgb.pal";      } else       if (whatToInterpolate.equals("intensity")) {        str1="Preferred Palette:\t" + "grey.pal";      } else {        str1="Preferred Palette:\t" + "spectrum.pal";      }      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      double halfResolution=resolution / 2;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          results=pointsTree.neighborsWithinRange(entry,circleCircumscrbingGridCell);          if (!results.isEmpty()) {            minValue=Float.POSITIVE_INFINITY;            for (i=0; i < results.size(); i++) {              z=results.get(i).value;              if (z < minValue) {                minValue=z;              }              ;            }            image.setValue(row,col,minValue);          } else {            image.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Interpolating point data:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.518 -0500",hash_original_method="5D1D12A2E6FD98502CE24F8CA665F380",hash_generated_method="9815C0F7E268D68A617D519D01A1341F") public void addTransaction(SIPTransaction transaction){  SIPRequest sipRequest=(SIPRequest)transaction.getOriginalRequest();  if (firstTransactionSeen && !firstTransactionId.equals(transaction.getBranchId()) && transaction.getMethod().equals(firstTransactionMethod)) {    this.reInviteFlag=true;  }  if (firstTransactionSeen == false) {    storeFirstTransactionInfo(this,transaction);    if (sipRequest.getMethod().equals(Request.SUBSCRIBE))     this.eventHeader=(EventHeader)sipRequest.getHeader(EventHeader.NAME);    this.setLocalParty(sipRequest);    this.setRemoteParty(sipRequest);    this.setCallId(sipRequest);    if (this.originalRequest == null) {      this.originalRequest=sipRequest;    }    if (this.method == null) {      this.method=sipRequest.getMethod();    }    if (transaction instanceof SIPServerTransaction) {      this.hisTag=sipRequest.getFrom().getTag();    } else {      setLocalSequenceNumber(sipRequest.getCSeq().getSeqNumber());      this.originalLocalSequenceNumber=localSequenceNumber;      this.myTag=sipRequest.getFrom().getTag();      if (myTag == null)       if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logError("The request's From header is missing the required Tag parameter.");    }  } else   if (transaction.getMethod().equals(firstTransactionMethod) && firstTransactionIsServerTransaction != transaction.isServerTransaction()) {    storeFirstTransactionInfo(this,transaction);    this.setLocalParty(sipRequest);    this.setRemoteParty(sipRequest);    this.setCallId(sipRequest);    this.originalRequest=sipRequest;    this.method=sipRequest.getMethod();  }  if (transaction instanceof SIPServerTransaction)   setRemoteSequenceNumber(sipRequest.getCSeq().getSeqNumber());  this.lastTransaction=transaction;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("Transaction Added " + this + myTag+ "/"+ hisTag);    sipStack.getStackLogger().logDebug("TID = " + transaction.getTransactionId() + "/"+ transaction.isServerTransaction());    sipStack.getStackLogger().logStackTrace();  }}  }
class C{  public void executeProgram(Program program,Interpreter interpreter,int maxSteps){  interpreter.Execute(program,maxSteps);}  }
class C{  public SerialHandlerGeneric(){}  }
class C{  protected <T extends DataObject>List<T> listFileSystemsWithLabelName(String name,Class<T> type,URI parentToScope,String parentFieldName){  List<T> objectList=new ArrayList<T>();  if (parentToScope != null && parentFieldName != null) {    objectList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,type,ContainmentPrefixConstraint.Factory.getFullMatchConstraint(type,parentFieldName,parentToScope,name));  } else {    objectList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,type,PrefixConstraint.Factory.getFullMatchConstraint(type,DATAOBJECT_NAME_FIELD,name));  }  return objectList;}  }
class C{  public Surface drawCentered(Tile tile,float x,float y){  return draw(tile,x - tile.width() / 2,y - tile.height() / 2);}  }
class C{  protected BeanContextEvent(BeanContext bc){  super(bc);}  }
class C{  private void initialize(){  this.setTitle(Constant.messages.getString("cfu.manage.title"));  this.setContentPane(getTopPanel());  this.pack();  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(700,500);  }  state=State.IDLE;}  }
class C{  private static String obtainGenericContent(String structure){  String item=structure.substring(structure.indexOf("<") + 1,structure.indexOf(">"));  int internalGeneric=item.indexOf("<");  if (internalGeneric != -1)   item=item.substring(0,internalGeneric);  return item.equals("?") ? "java.lang.Object" : item;}  }
class C{  @RequestMapping(value="/users/{login}",method=RequestMethod.HEAD,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity checkUser(@PathVariable String login){  log.debug("REST request to check user login : {}",login);  return userRepository.findOneByLogin(login).map(null).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));}  }
class C{  public synchronized void loadFromSettings(Settings settings){  this.settings=settings;  List<List> loadFrom=settings.getList(SETTING_NAME);  hotkeys.clear();  for (  List l : loadFrom) {    Hotkey entry=listToHotkey(l);    if (entry != null) {      hotkeys.add(entry);    }  }  updateHotkeys();  checkGlobalHotkeyWarning();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_LEVEL___TRACE_LEVEL_1:    setTrace_level_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public StatementCollector(Collection<Statement> statements){  super(statements,SimpleValueFactory.getInstance());}  }
class C{  public static Map<String,Object> prodFindSelectedVariant(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  Map<String,String> selectedFeatures=UtilGenerics.checkMap(context.get("selectedFeatures"));  List<GenericValue> products=FastList.newInstance();  Map<String,Object> resVariants=prodFindAllVariants(dctx,context);  List<GenericValue> variants=UtilGenerics.checkList(resVariants.get("assocProducts"));  for (  GenericValue oneVariant : variants) {    Map<String,String> feaContext=FastMap.newInstance();    feaContext.put("productId",oneVariant.getString("productIdTo"));    feaContext.put("type","STANDARD_FEATURE");    Map<String,Object> resFeatures=prodGetFeatures(dctx,feaContext);    List<GenericValue> features=UtilGenerics.checkList(resFeatures.get("productFeatures"));    boolean variantFound=true;    for (    GenericValue oneFeature : features) {      if (selectedFeatures.containsKey(oneFeature.getString("productFeatureTypeId"))) {        if (!selectedFeatures.containsValue(oneFeature.getString("productFeatureId"))) {          variantFound=false;          break;        }      }    }    if (variantFound) {      try {        products.add(EntityQuery.use(delegator).from("Product").where("productId",oneVariant.getString("productIdTo")).queryOne());      } catch (      GenericEntityException e) {        Map<String,String> messageMap=UtilMisc.toMap("errProductFeatures",e.toString());        String errMsg=UtilProperties.getMessage(resourceError,"productservices.problem_reading_product_features_errors",messageMap,locale);        Debug.logError(e,errMsg,module);        return ServiceUtil.returnError(errMsg);      }    }  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("products",products);  return result;}  }
class C{  public void show(){  mAlertDialog.show();}  }
class C{  private void adjustExcessPenalty(EgDemand currentDemand,List<Installment> installments,BigDecimal excessPenalty){  final Set<String> demandReasons=new LinkedHashSet<String>(Arrays.asList(DEMANDRSN_CODE_PENALTY_FINES,DEMANDRSN_CODE_GENERAL_TAX,DEMANDRSN_CODE_VACANT_TAX,DEMANDRSN_CODE_EDUCATIONAL_CESS,DEMANDRSN_CODE_LIBRARY_CESS,DEMANDRSN_CODE_UNAUTHORIZED_PENALTY));  List<EgDemandDetails> demandDetailsList=new ArrayList<EgDemandDetails>(currentDemand.getEgDemandDetails());  final Map<Installment,Set<EgDemandDetails>> installmentWiseDemandDetails=getEgDemandDetailsSetAsMap(demandDetailsList,installments);  for (  Installment installment : installments) {    Set<EgDemandDetails> demandDetailsSet=installmentWiseDemandDetails.get(installment);    for (    String demandReason : demandReasons) {      EgDemandDetails demandDetails=getEgDemandDetailsForReason(demandDetailsSet,demandReason);      if (demandDetails != null) {        BigDecimal balance=demandDetails.getAmount().subtract(demandDetails.getAmtCollected());        if (balance.compareTo(BigDecimal.ZERO) > 0) {          if (excessPenalty.compareTo(BigDecimal.ZERO) > 0) {            if (excessPenalty.compareTo(balance) <= 0) {              demandDetails.setAmtCollected(demandDetails.getAmtCollected().add(excessPenalty));              demandDetails.setModifiedDate(new Date());              excessPenalty=BigDecimal.ZERO;            } else {              demandDetails.setAmtCollected(demandDetails.getAmtCollected().add(balance));              demandDetails.setModifiedDate(new Date());              excessPenalty=excessPenalty.subtract(balance);            }          }        }      }      if (excessPenalty.compareTo(BigDecimal.ZERO) == 0) {        break;      }    }    if (excessPenalty.compareTo(BigDecimal.ZERO) == 0) {      break;    }  }  if (excessPenalty.compareTo(BigDecimal.ZERO) > 0) {    EgDemandDetails advanceDemandDetails=ptBillServiceImpl.insertDemandDetails(DEMANDRSN_CODE_ADVANCE,excessPenalty,currentInstall);    currentDemand.getEgDemandDetails().add(advanceDemandDetails);  }}  }
class C{  public void userTriggeredGC(){  nextGCWholeHeap|=Options.fullHeapSystemGC.getValue();}  }
class C{  public boolean containsAll(int... values){  for (  int value : values) {    if (!this.contains(value)) {      return false;    }  }  return true;}  }
class C{  public void releaseConnection(String tenantIdentifier,Connection connection) throws SQLException {  releaseAnyConnection(connection);}  }
class C{  private void returnJson200(RequestAndResponse requestAndResponse) throws ServletException, IOException {  requestAndResponse.setResponseContentTypeJson();  requestAndResponse.print("{\"success\":true}");}  }
class C{  private void initialize(){  this.setContentPane(getJPanel());  this.pack();  getRootPane().getActionMap().put("ESCAPE",null);}  }
class C{  public String toString(Object... params){  return MessageFormat.format(this.text,params);}  }
class C{  public void filter(int kind){  g.filter(kind);}  }
class C{  @Override public void onTabSelected(final TabLayout.Tab tab){  int tabPosition=tab.getPosition();  viewPager.setCurrentItem(tabPosition,true);  tabChangeStream.onNext(tabPosition);  @AnalyticsCnsts.Page String page=null;switch (tabPosition) {case MY_PLAN:    page=AnalyticsCnsts.MYPLAN;  updateFABForMyPlanTab();setImageHighlight(planTabImage);break;case DATA:page=AnalyticsCnsts.MYDATA;rechargeIntent.putExtra(RechargeActivity.TYPE_BUNDLE_KEY,PlanConstants.DATA);updateFABForDataTalkText();setImageHighlight(dataTabImage);break;case TALK:page=AnalyticsCnsts.MYTALK;rechargeIntent.putExtra(RechargeActivity.TYPE_BUNDLE_KEY,PlanConstants.TALK);updateFABForDataTalkText();setImageHighlight(talkTabImage);break;case TEXT:page=AnalyticsCnsts.MYTEXT;rechargeIntent.putExtra(RechargeActivity.TYPE_BUNDLE_KEY,PlanConstants.TEXT);updateFABForDataTalkText();setImageHighlight(textTabImage);break;}NavTracker.getInstance().setScreen(page);}  }
class C{  public ChartLayout(int hgap,int vgap){  this.hgap=hgap;  this.vgap=vgap;}  }
class C{  public static String encodeBase64String(final byte[] binaryData){  return newStringUtf8(encodeBase64(binaryData,false));}  }
class C{  public static Map<String,Object> runEntitySync(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  EntitySyncContext esc=null;  try {    esc=new EntitySyncContext(dctx,context);    if ("Y".equals(esc.entitySync.get("forPullOnly"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtCannotDoEntitySyncPush",locale));    }    esc.runPushStartRunning();    esc.setSplitStartTime();    while (esc.hasMoreTimeToSync()) {      esc.totalSplits++;      ArrayList<GenericValue> valuesToCreate=esc.assembleValuesToCreate();      ArrayList<GenericValue> valuesToStore=esc.assembleValuesToStore();      List<GenericEntity> keysToRemove=esc.assembleKeysToRemove();      esc.runPushSendData(valuesToCreate,valuesToStore,keysToRemove);      esc.saveResultsReportedFromDataStore();      esc.advanceRunTimes();    }    esc.saveFinalSyncResults();  } catch (  SyncAbortException e) {    return e.returnError(module);  }catch (  SyncErrorException e) {    e.saveSyncErrorInfo(esc);    return e.returnError(module);  }  return ServiceUtil.returnSuccess();}  }
class C{  public static ConstantExpression constant(Object value,Class constantType){  return new ConstantExpression(value,constantType.getName());}  }
class C{  @Deprecated public static ChangeSetExecutor createRedo(ChangeSet changeSet,UndoContext context){  return new ChangeSetExecutor(changeSet,Type.REDO,context,null,0);}  }
class C{  public TermQueryBuilder(String name,Object value){  this.name=name;  this.value=value;}  }
class C{  public static ServerLocator createServerLocatorWithHA(TransportConfiguration... initialServers){  return new ServerLocatorImpl(true,initialServers);}  }
class C{  public JPopupButton(){  initComponents();  setFocusable(false);  itemFont=ITEM_FONT;}  }
class C{  protected void markUsed(){  lastUsed=U.currentTimeMillis();}  }
class C{  private int heightOfPhi(int Phi){  if (Phi == 0) {    return -1;  }  int Tau=0;  int modul=1;  while (Phi % modul == 0) {    modul*=2;    Tau+=1;  }  return Tau - 1;}  }
class C{  @AndroidOnly("Uses bks key store. Change useBKS to false to run on the RI") public void testClientAuth() throws Exception {  boolean useBKS=true;  listener=new MyHandshakeListener();  String serverKeys=(useBKS ? SERVER_KEYS_BKS : SERVER_KEYS_JKS);  String clientKeys=(useBKS ? CLIENT_KEYS_BKS : CLIENT_KEYS_JKS);  TestServer server=new TestServer(true,TestServer.CLIENT_AUTH_WANTED,serverKeys);  TestClient client=new TestClient(true,clientKeys);  Thread serverThread=new Thread(server);  Thread clientThread=new Thread(client);  serverThread.start();  Thread.currentThread().sleep(3000);  clientThread.start();  serverThread.join();  clientThread.join();  Exception e=server.getException();  if (e != null) {    e.printStackTrace();  }  e=client.getException();  if (e != null) {    e.printStackTrace();  }  assertNull(e);  assertTrue(listener.completeDone);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public static boolean isRequestLine(String data){  return patternPartialRequestLine.matcher(data).find();}  }
class C{  public DefaultFileFilter(String extension,String description){  ext=extension.toLowerCase();  desc=description;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected String buildDataSourceFileName(DataSource ds){  String configDir=getFileHandler().append(getDomainHome(),"config");  String jdbcDir=getFileHandler().append(configDir,"jdbc");  String file=ds.getId() + "-jdbc.xml";  return getFileHandler().append(jdbcDir,file);}  }
class C{  protected String encodeCookie(SerializableHttpCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  public FloatArrayList(){  this(10);}  }
class C{  public static double[] normalizeHistogramToNewMedian(double[] histogram,Double new_median,HistogramBins hbins){  int bin_median=HistogramUtil.bin_median(histogram);  int shift=bin_median - HistogramUtil.bin_of_logrpu(Math.log10(new_median),hbins);  double[] shifted_histogram=new double[hbins.get_NBINS()];  for (int bin=0; bin < hbins.get_NBINS(); ++bin) {    int shifted_bin=bin - shift;    if (shifted_bin > 0 && shifted_bin < hbins.get_NBINS()) {      shifted_histogram[shifted_bin]=histogram[bin];    }  }  HistogramUtil.normalize(shifted_histogram);  return shifted_histogram;}  }
class C{  @Override public boolean onInfo(MediaPlayer mp,int i,int i1){switch (i) {case MEDIA_INFO_BUFFERING_START:    buffering=true;  break;case MEDIA_INFO_BUFFERING_END:buffering=false;break;}return false;}  }
class C{  @Override @SuppressWarnings("FinalizeDoesntCallSuperFinalize") protected final void finalize(){}  }
class C{  public ODGAttributedFigure(){}  }
class C{  @TargetApi(value=Build.VERSION_CODES.M) public void request(){  requestPermissions(object,requestCode,permissions);}  }
class C{  @Override public void urlMenuItemClicked(ActionEvent e,String url){  String cmd=e.getActionCommand();  if (cmd.equals("open")) {    UrlOpener.openUrlPrompt(MainGui.this,url);  } else   if (cmd.equals("copy")) {    MiscUtil.copyToClipboard(url);  } else   if (cmd.equals("join")) {    client.commandJoinChannel(url);  }}  }
class C{  public WandEventHandler(NetworkPanel networkPanel){  super();  boundsFilter=new BoundsFilter();  setEventFilter(new ZoomEventFilter());  this.networkPanel=networkPanel;}  }
class C{  public static BooleanListBitVector of(final int... bit){  final BooleanListBitVector bitVector=BooleanListBitVector.getInstance(bit.length);  for (  int b : bit)   bitVector.add(b);  return bitVector;}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  ref=LiveRef.read(in,true);}  }
class C{  public FloatMatrix transpose(){  FloatMatrix result=new FloatMatrix(columns,rows);  for (int i=0; i < rows; i++) {    for (int j=0; j < columns; j++) {      result.put(j,i,get(i,j));    }  }  return result;}  }
class C{  public void testTimedPollFirst() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.pollFirst(SHORT_DELAY_MS,MILLISECONDS));  }  assertNull(q.pollFirst(SHORT_DELAY_MS,MILLISECONDS));}  }
class C{  public void encode(OutputStream stream) throws KeyException, IOException {}  }
class C{  @Override public boolean handleDrag(final int distanceX,final int distanceY){  updateDragRunnable.handleDrag(distanceX,distanceY);  getGLHandler().post(updateDragRunnable);  return false;}  }
class C{  public SetPaymentGatewayLabelCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  @Inject private WardenApiNotifier(MetricService metricService,AnnotationService annotationService,WardenService wardenService,TSDBService tsdbService,MailService mailService,SystemConfiguration config){  super(metricService,annotationService,wardenService,tsdbService,mailService,config);}  }
class C{  public static int measureViewHeight(View view){  view.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));  int w=View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);  int h=View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);  view.measure(w,h);  return view.getMeasuredHeight();}  }
class C{  public static byte[] drawableToByte(Drawable d){  return bitmapToByte(drawableToBitmap(d));}  }
class C{  public boolean matches(String input){  TrieNode node=root;  for (int i=0; i < input.length(); i++) {    node=node.getChild(input.charAt(i));    if (node == null)     return false;    if (node.isTerminal())     return true;  }  return false;}  }
class C{  private static boolean checkUnique(final int[] indices){  final Set<Integer> indicesSet=new HashSet<Integer>();  for (  int index : indices)   indicesSet.add(index);  return indices.length == indicesSet.size();}  }
class C{  public Translation decode(Sentence sentence){  try {    DecoderTask decoderTask=new DecoderTask(this.grammars,Decoder.weights,this.featureFunctions,joshuaConfiguration);    return decoderTask.translate(sentence);  } catch (  IOException e) {    throw new RuntimeException(String.format("Input %d: FATAL UNCAUGHT EXCEPTION: %s",sentence.id(),e.getMessage()),e);  }}  }
class C{  public void add_production(production prod) throws internal_error {  if (prod == null || prod.lhs() == null || prod.lhs().the_symbol() != this)   throw new internal_error("Attempt to add invalid production to non terminal production table");  _productions.put(prod,prod);}  }
class C{  public static void fillVerticalGradientRoundedRectangle(Graphics graphics,Rectangle bounds,Dimension corner,Color c1,Color c2){  graphics.pushState();  graphics.setForegroundColor(c2);  graphics.setBackgroundColor(c1);  graphics.fillGradient(bounds.x,bounds.y + (corner.height >> 1),bounds.width,bounds.height - corner.height,true);  Path p=new Path(null);  p.addArc(bounds.x,bounds.y + bounds.height - corner.height - 1,corner.width,corner.height,180,90);  p.addArc(bounds.x + bounds.width - corner.width - 1,bounds.y + bounds.height - corner.height - 1,corner.width,corner.height,270,90);  graphics.fillPath(p);  p.dispose();  p=new Path(null);  graphics.setBackgroundColor(c2);  p.addArc(bounds.x + bounds.width - corner.width - 1,bounds.y,corner.width,corner.height,0,90);  p.addArc(bounds.x,bounds.y,corner.width,corner.height,90,90);  graphics.fillPath(p);  p.dispose();  graphics.popState();}  }
class C{  public final void mesh(Mesh3D mesh){  mesh(mesh,false,0);}  }
class C{  private static Atom findOrCreate(byte[] utf8,int off,int len,String str){  if (str != null) {    Atom val=new Atom(null,-1,str.substring(off,off + len));    val=dictionary.get(val);    if (val != null)     return val;  }  byte[] val=new byte[len];  for (int i=0; i < len; ++i) {    val[i]=utf8[off++];  }  return findOrCreate(val,true,null);}  }
class C{  public void clearCachedInformation(){  privateLastModified=0;  privateCrc=CRC_NOT_SET;  setFlags(false,FLAG_CRC_CALCED + FLAG_MODIFIED_CHECKED + FLAG_EXISTS_CHECKED+ FLAG_LENGTH_CHECKED+ FLAG_EXISTS+ FLAG_IS_DIRECTORY+ FLAG_IS_DIRECTORY_CHECKED+ FLAG_CACHED_VALUES_CHECKED);  setFlags(true,FLAG_IS_CHANGED);}  }
class C{  public static UUID randomUUID(){  byte[] data=new byte[16];synchronized (UUID.class) {    if (rng == null) {      rng=new SecureRandom();    }  }  rng.nextBytes(data);  return makeUuid(data,4);}  }
class C{  @Override public String toString(){  assignLeafModelNumbers(0);  try {    StringBuffer text=new StringBuffer();    if (m_isLeaf) {      text.append(": ");      text.append("LM_" + m_leafModelNum + ":"+ getModelParameters());    } else {      dumpTree(0,text);    }    text.append("\n\nNumber of Leaves  : \t" + numLeaves() + "\n");    text.append("\nSize of the Tree : \t" + numNodes() + "\n");    text.append(modelsToString());    return text.toString();  } catch (  Exception e) {    return "Can't print logistic model tree";  }}  }
class C{  public void layoutContainer(Container container){  Dimension containerSize=container.getSize();  if (containerSize.height <= 0 || containerSize.width <= 0) {    lastSplitPaneSize=0;    return;  }  int spDividerLocation=splitPane.getDividerLocation();  Insets insets=splitPane.getInsets();  int availableSize=getAvailableSize(containerSize,insets);  int newSize=getSizeForPrimaryAxis(containerSize);  int beginLocation=getDividerLocation(splitPane);  int dOffset=getSizeForPrimaryAxis(insets,true);  Dimension dSize=(components[2] == null) ? null : components[2].getPreferredSize();  if ((doReset && !dividerLocationIsSet) || spDividerLocation < 0) {    resetToPreferredSizes(availableSize);  } else   if (lastSplitPaneSize <= 0 || availableSize == lastSplitPaneSize || !painted || (dSize != null && getSizeForPrimaryAxis(dSize) != sizes[2])) {    if (dSize != null) {      sizes[2]=getSizeForPrimaryAxis(dSize);    } else {      sizes[2]=0;    }    setDividerLocation(spDividerLocation - dOffset,availableSize);    dividerLocationIsSet=false;  } else   if (availableSize != lastSplitPaneSize) {    distributeSpace(availableSize - lastSplitPaneSize,getKeepHidden());  }  doReset=false;  dividerLocationIsSet=false;  lastSplitPaneSize=availableSize;  int nextLocation=getInitialLocation(insets);  int counter=0;  while (counter < 3) {    if (components[counter] != null && components[counter].isVisible()) {      setComponentToSize(components[counter],sizes[counter],nextLocation,insets,containerSize);      nextLocation+=sizes[counter];    }switch (counter) {case 0:      counter=2;    break;case 2:  counter=1;break;case 1:counter=3;break;}}if (painted) {int newLocation=getDividerLocation(splitPane);if (newLocation != (spDividerLocation - dOffset)) {int lastLocation=splitPane.getLastDividerLocation();ignoreDividerLocationChange=true;try {splitPane.setDividerLocation(newLocation);splitPane.setLastDividerLocation(lastLocation);}  finally {ignoreDividerLocationChange=false;}}}}  }
class C{  public void add(Collection geomList){  for (Iterator i=geomList.iterator(); i.hasNext(); ) {    Geometry geometry=(Geometry)i.next();    add(geometry);  }}  }
class C{  public void error(ServiceCoded sc){  if (sc != null) {    setServiceCode(sc.getServiceCode().getCode());    setMessage(sc.getMessage());  }  setStatus(Status.error.name());  if (sc instanceof Exception) {    _log.info("Setting operation to error due to an exception");    _log.info("Caused by: ",(Exception)sc);  }}  }
class C{  private static void removePrimes(DialogueState reduced){  for (  ChanceNode cn : new HashSet<ChanceNode>(reduced.getChanceNodes())) {    if (reduced.hasChanceNode(cn.getId() + "'")) {      log.warning("Reduction problem: two variables for " + cn.getId());      reduced.removeNode(cn.getId());    }  }  for (  String nodeId : new HashSet<String>(reduced.getChanceNodeIds())) {    if (nodeId.contains("'")) {      String newId=nodeId.replace("'","");      if (!reduced.hasChanceNode(newId)) {        reduced.getChanceNode(nodeId).setId(newId);      } else {        log.warning("reduced state still contains duplicates: " + reduced.getNodeIds());      }    }  }}  }
class C{  public int graphType(){  if (m_Classifier instanceof Drawable)   return ((Drawable)m_Classifier).graphType(); else   return Drawable.NOT_DRAWABLE;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void connect(String clientHandle,MqttConnectOptions connectOptions,String invocationContext,String activityToken) throws MqttSecurityException, MqttException {  MqttConnection client=getConnection(clientHandle);  client.connect(connectOptions,invocationContext,activityToken);}  }
class C{  public del addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public boolean isEditing(){  return Display.getInstance().isTextEditing(this);}  }
class C{  public static void checkForIndex(final EvolutionState state,GPNode toBchecked,int index){  if (!(toBchecked instanceof IndexNode)) {    state.output.fatal("Not a IndexNode",null,null);  }  if (((IndexNode)toBchecked).getIndex() != index) {    state.output.fatal("IndexNode's index does not match the target.",null,null);  }}  }
class C{  public void dismiss(){  mPopupView.mMarker.animateClose();}  }
class C{  public static Boolean valueOf(String string){  return parseBoolean(string) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  Object addParserHighlight(ParserNotice notice,HighlightPainter p) throws BadLocationException {  Document doc=textArea.getDocument();  TextUI mapper=textArea.getUI();  int start=notice.getOffset();  int end=0;  if (start == -1) {    int line=notice.getLine();    Element root=doc.getDefaultRootElement();    if (line >= 0 && line < root.getElementCount()) {      Element elem=root.getElement(line);      start=elem.getStartOffset();      end=elem.getEndOffset();    }  } else {    end=start + notice.getLength();  }  HighlightInfo i=new LayeredHighlightInfo();  i.painter=p;  i.p0=doc.createPosition(start);  i.p1=doc.createPosition(end);  i.notice=notice;  parserHighlights.add(i);  mapper.damageRange(textArea,start,end);  return i;}  }
class C{  @Override public RequestConditionHolder combine(RequestConditionHolder other){  if (this.condition == null && other.condition == null) {    return this;  } else   if (this.condition == null) {    return other;  } else   if (other.condition == null) {    return this;  } else {    assertEqualConditionTypes(other);    RequestCondition<?> combined=(RequestCondition<?>)this.condition.combine(other.condition);    return new RequestConditionHolder(combined);  }}  }
class C{  public static void redirect(InputStream inputStream){  new RedirectStream(inputStream).start();}  }
class C{  public final String nextLine(){  lineNumber++;  if (tempLine == null) {    try {      return readLine();    } catch (    IOException e) {      throw new RuntimeException(e);    }  } else {    String line=tempLine;    tempLine=null;    return line;  }}  }
class C{  private void buildContactData(){  Context context=getApplicationContext();  AppContactService appContactService=new AppContactService(context);  if (!appContactService.isContactExists("adarshk")) {    List<Contact> contactList=new ArrayList<Contact>();    Contact contact=new Contact();    contact.setUserId("adarshk");    contact.setFullName("John");    contact.setImageURL("R.drawable.couple");    contactList.add(contact);    Contact contactRaj=new Contact();    contactRaj.setUserId("raj");    contactRaj.setFullName("rajni");    contactRaj.setImageURL("https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p200x200/12049601_556630871166455_1647160929759032778_n.jpg?oh=7ab819fc614f202e144cecaad0eb696b&oe=56EBA555&__gda__=1457202000_85552414c5142830db00c1571cc50641");    contactList.add(contactRaj);    Contact contact2=new Contact();    contact2.setUserId("rathan");    contact2.setFullName("Liz");    contact2.setImageURL("R.drawable.liz");    contactList.add(contact2);    Contact contact3=new Contact();    contact3.setUserId("clem");    contact3.setFullName("Clement");    contact3.setImageURL("R.drawable.shivam");    contactList.add(contact3);    Contact contact4=new Contact();    contact4.setUserId("shanki.gupta");    contact4.setFullName("Bill");    contact4.setImageURL("R.drawable.contact_shanki");    contactList.add(contact4);    Contact contact6=new Contact();    contact6.setUserId("krishna");    contact6.setFullName("Krishi");    contact6.setImageURL("R.drawable.girl");    contactList.add(contact6);    Contact contact7=new Contact();    contact7.setUserId("heather");    contact7.setFullName("Heather");    contact7.setImageURL("R.drawable.heather");    contactList.add(contact7);    appContactService.addAll(contactList);  }}  }
class C{  public CandidateHarvesterSetElement(CandidateHarvester harvester){  this.harvester=harvester;  harvester.getHarvestStatistics().harvesterName=harvester.toString();}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  public void untagVolumes(URI systemURI,List<URI> volumeURIs,String opId) throws ControllerException {  try {    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,systemURI);    List<Volume> volumes=new ArrayList<Volume>();    List<VolumeTaskCompleter> volumeCompleters=new ArrayList<VolumeTaskCompleter>();    Iterator<URI> volumeURIsIter=volumeURIs.iterator();    String arrayName=systemURI.toString();    StringBuilder entryLogMsgBuilder=new StringBuilder(String.format("untagVolume start - Array:%s",arrayName));    StringBuilder exitLogMsgBuilder=new StringBuilder(String.format("untagVolume end - Array:%s",arrayName));    while (volumeURIsIter.hasNext()) {      URI volumeURI=volumeURIsIter.next();      Volume volume=_dbClient.queryObject(Volume.class,volumeURI);      if (volume != null) {        entryLogMsgBuilder.append(String.format("%nUntag operation: Volume: [%s](%s)",volume.getLabel(),volumeURI.toString()));        exitLogMsgBuilder.append(String.format("%nUntag operation: Volume: [%s](%s)",volume.getLabel(),volumeURI.toString()));        if (!volume.getInactive()) {          volumes.add(volume);        } else {          continue;        }        VolumeWorkflowCompleter volumeCompleter=new VolumeWorkflowCompleter(volumeURI,opId);        volumeCompleters.add(volumeCompleter);      }    }    _log.info(entryLogMsgBuilder.toString());    if (!volumes.isEmpty()) {      WorkflowStepCompleter.stepExecuting(opId);      TaskCompleter completer=new MultiVolumeTaskCompleter(volumeURIs,volumeCompleters,opId);      getDevice(storageSystem.getSystemType()).doUntagVolumes(storageSystem,opId,volumes,completer);    }    doSuccessTask(Volume.class,volumeURIs,opId);    WorkflowStepCompleter.stepSucceded(opId);    _log.info(exitLogMsgBuilder.toString());  } catch (  InternalException e) {    doFailTask(Volume.class,volumeURIs,opId,e);    WorkflowStepCompleter.stepFailed(opId,e);  }catch (  Exception e) {    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    doFailTask(Volume.class,volumeURIs,opId,serviceError);    WorkflowStepCompleter.stepFailed(opId,DeviceControllerException.exceptions.unexpectedCondition(e.getMessage()));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.284 -0500",hash_original_method="04008A13B0A5E88C87B63AAF08ED822A",hash_generated_method="1F99FB9C48EE9EEFAE67593C4664A6F1") public ContentDispositionParser(String contentDisposition){  super(contentDisposition);}  }
class C{  public boolean mouseReleased(MouseEvent e){  if (!active) {    return false;  }  setCurrentMouseEvent(e);  return testForAndHandlePopupTrigger(e) && consumeEvents;}  }
class C{  public void write(final byte[] b,final int off,final int len) throws IOException {  stream.write(b,off,len);}  }
class C{  public Reaction createReaction(){  ReactionImpl reaction=new ReactionImpl();  return reaction;}  }
class C{  public static byte[] loadClassBackup(Class c) throws IOException {  long t0=System.nanoTime();  try {    File classFile=getClassFile(c);    if (classFile.exists()) {      Log.print(2,"retrieving backup " + classFile);      byte[] buffer=new byte[(int)classFile.length()];      FileInputStream fis=new FileInputStream(classFile);      BufferedInputStream bis=new BufferedInputStream(fis);      bis.read(buffer);      bis.close();      return buffer;    }    return null;  }  finally {    long dt=System.nanoTime() - t0;    totalReadTime.addAndGet(dt);  }}  }
class C{  public void addIncomingInterceptorForReplication(Interceptor interceptor){  replicationLocator.addIncomingInterceptor(interceptor);}  }
class C{  public void zoomIn(){  if (zoomIndex >= ZOOM_FACTORS.length - 1) {    return;  }  this.zoomIndex+=1;}  }
class C{  private static IProcess findProcessForLaunch(ILaunch launch){  IProcess[] processes=DebugPlugin.getDefault().getLaunchManager().getProcesses();  for (int i=0; i < processes.length; i++) {    if (processes[i].getLaunch().equals(launch)) {      return processes[i];    }  }  return null;}  }
class C{  public final void invalidateOnChange(final boolean invalidateOnChange){  adapter.notifyOnChange(invalidateOnChange);}  }
class C{  public static final Criterion or(List<Criterion> criteria){  return new ConjunctionCriterion(Conjunction.OR,criteria);}  }
class C{  public synchronized boolean finishAccountRequest(FinishRequestData data,String adminname) throws JPlagException {  RequestData rd=requestAdmin.getRequestData(data.getOldUsername());  if (rd == null)   throw new JPlagException("requestAccount","Request doesn't exist (anymore)!","Wrong username or this request has already been decided!");  if (data.getPassword() != null) {    UserData ud=new UserData(data.getUsername(),data.getPassword(),new GregorianCalendar(TimeZone.getTimeZone("GMT")),adminname,data.getExpires(),null,0,data.getRealName(),data.getEmail(),data.getEmailSecond(),data.getHomepage(),data.getReason(),data.getNotes(),data.getState());    setUserData(ud,null,adminname,false);  }  if (data.getMailSubject() != null && data.getMailSubject().length() != 0) {    sendMail(data.getEmail(),data.getMailSubject(),data.getMailMessage());  }  requestAdmin.removeRequest(data.getOldUsername());  return true;}  }
class C{  public static byte[] decodeBase64(final byte[] base64Data){  return new Base64().decode(base64Data);}  }
class C{  public void addInitModules(List<String> modules){  this.initModules.addAll(modules);}  }
class C{  @IgniteInstanceResource protected void injectResources(Ignite ignite){  this.ignite=ignite;  if (ignite != null)   gridName=ignite.name();}  }
class C{  public boolean verify(PublicKey key,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return verify(key,CMSUtils.getProvider(sigProvider));}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.596 -0500",hash_original_method="3E1D9455881C3029C0C51566A563B8F4",hash_generated_method="3E1D9455881C3029C0C51566A563B8F4") void clearCookies(){  if (!checkInitialized()) {    return;  }synchronized (mCookieLock) {    mDatabase.delete(mTableNames[TABLE_COOKIES_ID],null,null);  }}  }
class C{  void appletStart(){  panel.sendEvent(AppletPanel.APPLET_START);}  }
class C{  public static double[] toLatLon(double[] inputCoordinates,double a,double b,double n0,double e0,double f0,double lat0Degrees,double lon0Degrees){  double coordE=inputCoordinates[0];  double coordN=inputCoordinates[1];  double e2=(Math.pow(a,2) - Math.pow(b,2)) / Math.pow(a,2);  double n=(a - b) / (a + b);  double n2=Math.pow(n,2);  double n3=Math.pow(n,3);  double lat0=Math.toRadians(lat0Degrees);  double lon0=Math.toRadians(lon0Degrees);  double m=0;  double latPrime=lat0;  double delta=1;  while (delta > 0.00001) {    latPrime=((coordN - n0 - m) / (a * f0)) + latPrime;    m=b * f0 * ((1 + n + (5.0 / 4.0) * n2 + (5.0 / 4.0) * n3) * (latPrime - lat0) - (3.0 * n + 3.0 * n2 + (21.0 / 8.0) * n3) * Math.sin(latPrime - lat0) * Math.cos(latPrime + lat0) + ((15.0 / 8.0) * n2 + (15.0 / 8.0) * n3) * Math.sin(2.0 * (latPrime - lat0)) * Math.cos(2.0 * (latPrime + lat0)) - (35.0 / 24.0) * n3 * Math.sin(3.0 * (latPrime - lat0))* Math.cos(3.0 * (latPrime + lat0)));    delta=Math.abs(coordN - n0 - m);  }  double eSinPhi=1 - e2 * Math.pow(Math.sin(latPrime),2);  double nu=a * f0 * Math.pow(eSinPhi,-0.5);  double rho=a * f0 * (1 - e2)* Math.pow(eSinPhi,-1.5);  double eta2=(nu / rho) - 1;  double vii=Math.tan(latPrime) / (2.0 * rho * nu);  double viii=(Math.tan(latPrime) / (24.0 * rho * Math.pow(nu,3))) * (5.0 + 3.0 * Math.pow(Math.tan(latPrime),2) + eta2 - 9.0 * Math.pow(Math.tan(latPrime),2) * eta2);  double ix=(Math.tan(latPrime) / (720.0 * rho * Math.pow(nu,5))) * (61.0 + 90.0 * Math.pow(Math.tan(latPrime),2) + 45.0 * Math.pow(Math.tan(latPrime),4));  double x=1.0 / (Math.cos(latPrime) * nu);  double xi=(1.0 / (6.0 * Math.cos(latPrime) * Math.pow(nu,3))) * (nu / rho + 2.0 * Math.pow(Math.tan(latPrime),2));  double xii=(1.0 / (120.0 * Math.cos(latPrime) * Math.pow(nu,5))) * (5.0 + 28.0 * Math.pow(Math.tan(latPrime),2) + 24.0 * Math.pow(Math.tan(latPrime),4));  double xiiA=(1.0 / (5040.0 * Math.cos(latPrime) * Math.pow(nu,7))) * (61.0 + 662.0 * Math.pow(Math.tan(latPrime),2) + 1320.0 * Math.pow(Math.tan(latPrime),4) + 720.0 * Math.pow(Math.tan(latPrime),6));  double dE=coordE - e0;  double lat=latPrime - vii * Math.pow(dE,2) + viii * Math.pow(dE,4) - ix * Math.pow(dE,6);  double lon=lon0 + x * dE - xi * Math.pow(dE,3) + xii * Math.pow(dE,5) - xiiA * Math.pow(dE,7);  lat=Math.toDegrees(lat);  lon=Math.toDegrees(lon);  return new double[]{lat,lon};}  }
class C{  public static <E>List<E> of(E e1,E e2,E e3){  List<E> list=new ArrayList<>();  list.add(e1);  list.add(e2);  list.add(e3);  return list;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.714 -0400",hash_original_method="BE83EA2C9E1EB2EC29161E3DAD228061",hash_generated_method="D922373678E66612A09917D044B663EA") private static int spinsFor(Node pred,boolean haveData){  if (MP && pred != null) {    if (pred.isData != haveData)     return FRONT_SPINS + CHAINED_SPINS;    if (pred.isMatched())     return FRONT_SPINS;    if (pred.waiter == null)     return CHAINED_SPINS;  }  return 0;}  }
class C{  public DoubleNode<E> last(){  return last;}  }
class C{  public static org.oscm.vo.VOPriceModelLocalization convertToApi(org.oscm.internal.vo.VOPriceModelLocalization oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOPriceModelLocalization newVO=new org.oscm.vo.VOPriceModelLocalization();  newVO.setDescriptions(convertToVOLocalizedText(oldVO.getDescriptions()));  newVO.setLicenses(convertToVOLocalizedText(oldVO.getLicenses()));  return newVO;}  }
class C{  public void init(WordAlignment s){  if (sentId != null && s.getId().equals(sentId)) {    return;  }  init(s.e().size(),s.f().size());  this.sent=s;  sentId=s.getId();}  }
class C{  public static double similarityNumberVector(NumberVector o1,NumberVector o2){  final int d1=o1.getDimensionality(), d2=o2.getDimensionality();  int intersection=0, union=0;  int d=0;  for (; d < d1 && d < d2; d++) {    double v1=o1.doubleValue(d), v2=o2.doubleValue(d);    if (v1 != v1 || v2 != v2) {      continue;    }    if (v1 != 0. || v2 != 0) {      ++union;      if (v1 == v2) {        ++intersection;      }    }  }  for (; d < d1; d++) {    if (o1.doubleValue(d) != 0) {      ++union;    }  }  for (; d < d2; d++) {    if (o2.doubleValue(d) != 0) {      ++union;    }  }  return intersection / (double)union;}  }
class C{  public final boolean isStatic(){  return Modifier.isStatic(getModifiers());}  }
class C{  protected final boolean startWorkers(Collection<WorkerThread> newWorkers) throws Exception {  if (true == Config.parms.getBoolean("wp",false)) {    return startWorkers(newWorkers,true);  }  final int workerInc=Config.parms.getInt("wi");  final int waitPeriod=Config.parms.getInt("wt") * 1000;  int status=0;  if (newWorkers != null) {    addWorkers(newWorkers);  }  final Iterator<WorkerThread> iter=workers.iterator();  Itera:   while (!shutdown && iter.hasNext()) {    final WorkerThread worker=iter.next();    if ((worker.getStatus() & WorkerThread.sCREATED) == 0) {      continue Itera;    }    worker.start();    if (waitPeriod > 0) {      long started=System.currentTimeMillis();      while (System.currentTimeMillis() - started < waitPeriod) {        if (shutdown) {          return false;        }        status=worker.getStatus();        if ((status & WorkerThread.sERROR) != 0) {          Log.logger.log(Level.SEVERE,"Error starting WorkerThread {0}",worker.getName());          return false;        }        if ((status & WorkerThread.sCREATED) == 0) {          if ((status & WorkerThread.sRUNNING) != 0) {            runningWorkers++;            if (iter.hasNext()) {              try {                Thread.sleep(workerInc);              } catch (              InterruptedException e) {              }            }            continue Itera;          } else           if ((status & (WorkerThread.sENDING | WorkerThread.sENDED)) != 0) {            continue Itera;          }        }        try {          Thread.sleep(200);        } catch (        InterruptedException e) {        }      }      Log.logger.log(Level.SEVERE,"WorkerThread start interval (-wt={0}) exceeded with no response from {1}",new Object[]{waitPeriod / 1000,worker.getName()});      return false;    }  }  return true;}  }
class C{  private void assertRange(String name,Object start,Object gap,Object end,int numCount,RangeFacet actual){  assertEquals("NAME: " + actual.toString(),name,actual.getName());  assertEquals("START: " + actual.toString(),start,actual.getStart());  assertEquals("GAP: " + actual.toString(),gap,actual.getGap());  assertEquals("END: " + actual.toString(),end,actual.getEnd());  assertEquals("#COUNT: " + actual.toString(),numCount,actual.getCounts().size());}  }
class C{  public void testOrOrAndSwitch(){  final ASTFilterNormalizationOptimizer rewriter=new ASTFilterNormalizationOptimizer();  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    given.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    given.setWhereClause(whereClause);    final StatementPatternNode spn=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS);    whereClause.addChild(spn);    final FunctionNode bound1=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")});    final FunctionNode bound2=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s2")});    final FunctionNode bound3=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s3")});    final FunctionNode bound4=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s4")});    final FunctionNode bound5=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s5")});    final FunctionNode bound6=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s6")});    final FunctionNode bound7=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s7")});    final FunctionNode bound8=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s8")});    final FilterNode filterNode=new FilterNode(FunctionNode.OR(FunctionNode.OR(FunctionNode.AND(bound1,bound2),FunctionNode.AND(bound3,bound4)),FunctionNode.OR(FunctionNode.AND(bound5,bound6),FunctionNode.AND(bound7,bound8))));    assertFalse(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    expected.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    expected.setWhereClause(whereClause);    final StatementPatternNode spn=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS);    whereClause.addChild(spn);    final FunctionNode bound1=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")});    final FunctionNode bound2=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s2")});    final FunctionNode bound3=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s3")});    final FunctionNode bound4=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s4")});    final FunctionNode bound5=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s5")});    final FunctionNode bound6=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s6")});    final FunctionNode bound7=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s7")});    final FunctionNode bound8=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s8")});    final List<FunctionNode> lefts=new ArrayList<FunctionNode>();    lefts.add(FunctionNode.OR(bound1,bound3));    lefts.add(FunctionNode.OR(bound1,bound4));    lefts.add(FunctionNode.OR(bound2,bound3));    lefts.add(FunctionNode.OR(bound2,bound4));    final List<FunctionNode> rights=new ArrayList<FunctionNode>();    rights.add(FunctionNode.OR(bound5,bound7));    rights.add(FunctionNode.OR(bound5,bound8));    rights.add(FunctionNode.OR(bound6,bound7));    rights.add(FunctionNode.OR(bound6,bound8));    for (    final FunctionNode left : lefts) {      for (      final FunctionNode right : rights) {        whereClause.addChild(new FilterNode(FunctionNode.OR(left,right)));      }    }  }  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.661 -0500",hash_original_method="440330E00D63CA8C46C2D2C8DF2C6AC6",hash_generated_method="6ADE5CB6ADC5D7A39E399D5D4E6783C5") public static Typeface create(Typeface family,int style){  int ni=0;  if (family != null) {    ni=family.native_instance;  }  return new Typeface(nativeCreateFromTypeface(ni,style));}  }
class C{  private static void rewriteUdpPrefLimit(int global,int realm) throws Exception {  BufferedReader fr=new BufferedReader(new FileReader(OneKDC.KRB5_CONF));  FileWriter fw=new FileWriter("alternative-krb5.conf");  while (true) {    String s=fr.readLine();    if (s == null) {      break;    }    if (s.startsWith("[realms]")) {      if (global != -1) {        fw.write("udp_preference_limit = " + global + "\n");      }    } else     if (s.trim().startsWith("kdc = ")) {      if (realm != -1) {        fw.write("    udp_preference_limit = " + realm + "\n");      }    }    fw.write(s + "\n");  }  fr.close();  fw.close();  sun.security.krb5.Config.refresh();}  }
class C{  public static String arrayToDelimitedString(Object[] arr,String delim){  return arrayToDelimitedString(arr,delim,new StringBuilder());}  }
class C{  public void write(){  try {    File prefFile=new File(SystemProperties.getProperty("user.home"),PREF_FILE_NAME);    write(new FileOutputStream(prefFile));  } catch (  IOException e) {    if (FindBugs.DEBUG) {      e.printStackTrace();    }  }}  }
class C{  public void add(SeriesDataset data){  fastAdd(data);  DatasetChangeEvent event=new DatasetChangeEvent(this,this);  notifyListeners(event);}  }
class C{  @Override public int hashCode(){  int result=193;  result=HashUtilities.hashCode(result,this.open);  result=HashUtilities.hashCode(result,this.high);  result=HashUtilities.hashCode(result,this.low);  result=HashUtilities.hashCode(result,this.close);  return result;}  }
class C{  public IDebugSearch debug(IDebugSearch debugger){  IDebugSearch old=debug;  debug=debugger;  return old;}  }
class C{  private synchronized void removeOld(){  long days=settings.getLong("channelHistoryKeepDays");  Map<String,Long> h=settings.getMap(HISTORY_SETTING);  long keepAfter=System.currentTimeMillis() - days * DAY;  Iterator<String> it=h.keySet().iterator();  while (it.hasNext()) {    String channel=it.next();    long time=h.get(channel);    if (time < keepAfter) {      it.remove();    }  }  settings.putMap(HISTORY_SETTING,h);  settings.setSettingChanged("channelHistory");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodechildnodesappendchild.class,args);}  }
class C{  @Override public Vertex parseStateMachine(String code,boolean debug,Network network){  TextStream stream=new TextStream(code);  try {    Map<String,Map<String,Vertex>> elements=buildElementsMap(network);    List<String> comments=getComments(stream);    stream.skipWhitespace();    Vertex state=null;    if (stream.peek(6).equalsIgnoreCase("state:")) {      state=new SelfCompiler().parseState(stream,elements,debug,network);      state.addRelationship(Primitive.LANGUAGE,network.createVertex(Primitive.SELF));      state.addRelationship(Primitive.LANGUAGE,network.createVertex(Primitive.SELF2));    } else {      state=parseState(stream,elements,debug,network);      state.addRelationship(Primitive.LANGUAGE,network.createVertex(Primitive.SELF));      state.addRelationship(Primitive.LANGUAGE,network.createVertex(Primitive.SELF4));    }    if (debug) {      for (      String comment : comments) {        state.addRelationship(Primitive.COMMENT,network.createVertex(comment),Integer.MAX_VALUE);      }    }    TextData text=new TextData();    text.setText(code);    Vertex sourceCode=network.createVertex(text);    sourceCode.setPinned(true);    state.addRelationship(Primitive.SOURCECODE,sourceCode);    network.getBot().log(this,"Compiled new state machine",Level.INFO,state);    return state;  } catch (  SelfParseException exception) {    throw exception;  }catch (  Exception exception) {    network.getBot().log(this,exception);    throw new SelfParseException("Parsing error occurred",stream,exception);  }}  }
class C{  private void createModelUsingArguments(Class modelClass,List<Object> models) throws Exception {  if (!(SessionModel.class.isAssignableFrom(modelClass))) {    throw new ClassCastException("Model class must implement SessionModel: " + modelClass);  }  Constructor[] constructors=modelClass.getConstructors();  for (  Constructor constructor : constructors) {    Class[] constructorTypes=constructor.getParameterTypes();    Object[] arguments=null;    if (constructorTypes.length == 2 && constructorTypes[0].isArray() && constructorTypes[1] == Parameters.class) {      List<Object> _objects=new ArrayList<>();      Class<?> c1=constructorTypes[0].getComponentType();      Parameters parameters=null;      for (int i=0; i < models.size(); i++) {        Class<?> c2=models.get(i).getClass();        if ((c1.isAssignableFrom(c2))) {          _objects.add(models.get(i));        }        if (c2 == Parameters.class) {          parameters=(Parameters)models.get(i);        }      }      if (_objects.isEmpty()) {        return;      }      if (parameters != null) {        Object o=Array.newInstance(c1,_objects.size());        for (int i=0; i < _objects.size(); i++) {          Array.set(o,i,_objects.get(i));        }        arguments=new Object[]{o,parameters};      } else {        Object o=Array.newInstance(c1,_objects.size());        for (int i=0; i < _objects.size(); i++) {          Array.set(o,i,_objects.get(i));        }        arguments=new Object[]{o};      }    }    if (arguments == null) {      arguments=assignParameters(constructorTypes,models);    }    if (constructorTypes.length == 0)     continue;    if (arguments != null) {      try {        this.model=(SessionModel)constructor.newInstance(arguments);        this.model.setName(getDisplayName());      } catch (      InstantiationException e) {        e.printStackTrace();        continue;      }catch (      IllegalAccessException e) {        e.printStackTrace();        continue;      }catch (      InvocationTargetException e) {        String packagePath=modelClass.getName();        int begin=packagePath.lastIndexOf('.') + 1;        String name=packagePath.substring(begin,packagePath.length());        if (e.getTargetException() instanceof ThreadDeath) {          e.printStackTrace();          return;        }        e.printStackTrace();        if (e.getCause().getMessage() != null && !e.getCause().getMessage().isEmpty()) {          throw new InvocationTargetException(e,e.getCause().getMessage());        } else {          throw new InvocationTargetException(e,"Could not construct node; root cause: " + e.getCause().getMessage() + " "+ packagePath+ " "+ begin+ " "+ name);        }      }      this.modelParamTypes=constructorTypes;      this.lastModelClass=modelClass;      getSessionSupport().fireModelCreated(this);      break;    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput conn=getCapDevInput(stack);  return new Integer(conn == null ? 0 : conn.getHue());}  }
class C{  public static void createImageToStorage(String url,Component targetList,int targetOffset,String targetKey,String cacheId,Dimension scale,byte priority){  createImageToStorage(url,targetList,null,targetOffset,targetKey,cacheId,false,scale,priority,null,defaultMaintainAspectRatio);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tRandom number seed.\n" + "\t(default 1)","S",1,"-S <num>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public SectionHeader(BinaryInputBuffer in) throws java.io.IOException {  startFP=in.getCurrent();  NameArray=new byte[8];  in.read(NameArray);  StringBuilder nBuilder=new StringBuilder();  for (int i=0; i < 8; i++) {    if ((NameArray[i] & 0xFF) > 32 && (NameArray[i] & 0xFF) < 128)     nBuilder.append((char)(NameArray[i] & 0xFF));  }  name=nBuilder.toString();  VirtualSize=in.readDWORD();  VirtualAddress=in.readDWORD();  SizeOfRawData=in.readDWORD();  PointerToRawData=in.readDWORD();  PointerToRelocations=in.readDWORD();  PointerToLinenumbers=in.readDWORD();  NumberOfRelocations=in.readWORD();  NumberOfLinenumbers=in.readWORD();  Characteristics=in.readDWORD();}  }
class C{  public TFloatHash(){  _hashingStrategy=this;}  }
class C{  void deleteMember(final TypeMember member){  members.remove(Preconditions.checkNotNull(member,"Error: member argument can not be null."));}  }
class C{  @Override protected String convertToString(final Object value){  return value instanceof Class ? ((Class)value).getName() : value.toString();}  }
class C{  private static void listen(MfCardListener listener) throws IOException {  Acr122Device acr122;  try {    acr122=new Acr122Device();  } catch (  RuntimeException re) {    System.out.println("No ACR122 reader found.");    return;  }  acr122.open();  acr122.listen(listener);  System.out.println("Press ENTER to exit");  System.in.read();  acr122.close();}  }
class C{  public String convertSystemNameToAlternate(String systemName){  return (AcelaAddress.convertSystemNameToAlternate(systemName));}  }
class C{  public String useTabTipText(){  return "Whether to use TAB instead of COMMA as column separator.";}  }
class C{  private static int[] multiplyToLen(int[] x,int xlen,int[] y,int ylen,int[] z){  int xstart=xlen - 1;  int ystart=ylen - 1;  if (z == null || z.length < (xlen + ylen))   z=new int[xlen + ylen];  long carry=0;  for (int j=ystart, k=ystart + 1 + xstart; j >= 0; j--, k--) {    long product=(y[j] & LONG_MASK) * (x[xstart] & LONG_MASK) + carry;    z[k]=(int)product;    carry=product >>> 32;  }  z[xstart]=(int)carry;  for (int i=xstart - 1; i >= 0; i--) {    carry=0;    for (int j=ystart, k=ystart + 1 + i; j >= 0; j--, k--) {      long product=(y[j] & LONG_MASK) * (x[i] & LONG_MASK) + (z[k] & LONG_MASK) + carry;      z[k]=(int)product;      carry=product >>> 32;    }    z[i]=(int)carry;  }  return z;}  }
class C{  static char[] toCharArray(final CharSequence cs){  if (cs instanceof String) {    return ((String)cs).toCharArray();  }  final int sz=cs.length();  final char[] array=new char[cs.length()];  for (int i=0; i < sz; i++) {    array[i]=cs.charAt(i);  }  return array;}  }
class C{  public ElementType parent(){  return theParent;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ValidationExceptionBean(ApplicationExceptionBean sup,ReasonEnum reason,String member){  super(sup);  setReason(reason);  setMember(member);}  }
class C{  public static String toString(final byte[] b1,String sep,final byte[] b2){  return toString(b1,0,b1.length) + sep + toString(b2,0,b2.length);}  }
class C{  public SSLContextManager(){  try {    _noClientCertContext=SSLContext.getInstance("SSL");    _noClientCertContext.init(null,_trustAllCerts,new SecureRandom());  } catch (  NoSuchAlgorithmException nsao) {    log.error("Could not get an instance of the SSL algorithm: " + nsao.getMessage(),nsao);  }catch (  KeyManagementException kme) {    log.error("Error initialising the SSL Context:  " + kme.getMessage(),kme);  }  try {    initMSCAPI();  } catch (  Exception e) {  }}  }
class C{  private String printXFormat(int x){  String sx=null;  if (x == Integer.MIN_VALUE)   sx="80000000"; else   if (x < 0) {    String t=Integer.toString((~(-x - 1)) ^ Integer.MIN_VALUE,16);switch (t.length()) {case 1:      sx="8000000" + t;    break;case 2:  sx="800000" + t;break;case 3:sx="80000" + t;break;case 4:sx="8000" + t;break;case 5:sx="800" + t;break;case 6:sx="80" + t;break;case 7:sx="8" + t;break;case 8:switch (t.charAt(0)) {case '1':sx="9" + t.substring(1,8);break;case '2':sx="a" + t.substring(1,8);break;case '3':sx="b" + t.substring(1,8);break;case '4':sx="c" + t.substring(1,8);break;case '5':sx="d" + t.substring(1,8);break;case '6':sx="e" + t.substring(1,8);break;case '7':sx="f" + t.substring(1,8);break;}break;}} else sx=Integer.toString(x,16);return printXFormat(sx);}  }
class C{  private Multimap<Class<?>,Subscriber> findAllSubscribers(Object listener){  Multimap<Class<?>,Subscriber> methodsInListener=HashMultimap.create();  Class<?> clazz=listener.getClass();  for (  Method method : getAnnotatedMethods(clazz)) {    Class<?>[] parameterTypes=method.getParameterTypes();    Class<?> eventType=parameterTypes[0];    methodsInListener.put(eventType,Subscriber.create(bus,listener,method));  }  return methodsInListener;}  }
class C{  private static String tag_(String key){  return "#{" + key + "}";}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  System.out.println("Error! Function.execute should not be called!");  return null;}  }
class C{  public Uniform(MersenneTwisterFast randomGenerator){  this(0,1,randomGenerator);}  }
class C{  public void checkCanceled(){  if (cancelAt == 0) {    return;  }  long time=System.currentTimeMillis();  if (time >= cancelAt) {    cancelAt=0;    doCancel();    throw DbException.get(ErrorCode.STATEMENT_WAS_CANCELED);  }}  }
class C{  private void handleFocusEvents(final int type){  if (isDisposed()) {    return;  }switch (type) {case SWT.FocusIn:{      if (this.hasFocus) {        return;      }      this.hasFocus=true;      final Shell shell=getShell();      shell.removeListener(SWT.Deactivate,this.listener);      shell.addListener(SWT.Deactivate,this.listener);      final Display display=getDisplay();      display.removeFilter(SWT.FocusIn,this.filter);      display.addFilter(SWT.FocusIn,this.filter);      final Event e=new Event();      notifyListeners(SWT.FocusIn,e);      break;    }case SWT.FocusOut:{    if (!this.hasFocus) {      return;    }    final Control focusControl=getDisplay().getFocusControl();    if (focusControl == this.arrow) {      return;    }    this.hasFocus=false;    final Shell shell=getShell();    shell.removeListener(SWT.Deactivate,this.listener);    final Display display=getDisplay();    display.removeFilter(SWT.FocusIn,this.filter);    final Event e=new Event();    notifyListeners(SWT.FocusOut,e);    break;  }}}  }
class C{  public void stop(){  if (mLocalPlayer != null) {    destroyLocalPlayer();  } else   if (mAllowRemote) {    try {      mRemotePlayer.stop(mRemoteToken);    } catch (    RemoteException e) {      Log.w(TAG,"Problem stopping ringtone: " + e);    }  }}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public void shutdown(){  ShutdownManager shutdownManager=injector.getInstance(ShutdownManager.class);  BootLogger logger=getBootLogger();  shutdown(shutdownManager,logger);}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector(2);  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  return newVector.elements();}  }
class C{  public static int nullSafeHashCode(int[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + array[i];  }  return hash;}  }
class C{  default void addClassAnnotation(char[] buffer,int offset,int length){}  }
class C{  protected void selectHorizontalAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  TickUnit unit=getTickUnit();  TickUnitSource tickUnitSource=getStandardTickUnits();  double length=getRange().getLength();  int count=(int)(length / unit.getSize());  if (count < 2 || count > 40) {    unit=tickUnitSource.getCeilingTickUnit(length / 20);  }  double tickLabelWidth=estimateMaximumTickLabelWidth(g2,unit);  TickUnit unit1=tickUnitSource.getCeilingTickUnit(unit);  double unit1Width=lengthToJava2D(unit1.getSize(),dataArea,edge);  double guess=(tickLabelWidth / unit1Width) * unit1.getSize();  NumberTickUnit unit2=(NumberTickUnit)tickUnitSource.getCeilingTickUnit(guess);  double unit2Width=lengthToJava2D(unit2.getSize(),dataArea,edge);  tickLabelWidth=estimateMaximumTickLabelWidth(g2,unit2);  if (tickLabelWidth > unit2Width) {    unit2=(NumberTickUnit)tickUnitSource.getLargerTickUnit(unit2);  }  setTickUnit(unit2,false,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns07.class,args);}  }
class C{  public BigInteger optBigInteger(String key,BigInteger defaultValue){  try {    return this.getBigInteger(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Deprecated public JCTree.JCCompilationUnit parse(String filename){  JavacFileManager fm=(JavacFileManager)fileManager;  return parse(fm.getJavaFileObjectsFromStrings(List.of(filename)).iterator().next());}  }
class C{  public Object invoke(String method,Class<?>[] sig,Object... params){  Object handler=view;  if (handler == null)   handler=act;  return AQUtility.invokeHandler(handler,method,false,false,sig,params);}  }
class C{  @Nullable public static Process createProcess(@Nullable final String workingDir,@NotNull final String... command) throws ExecutionException {  return createProcess(workingDir,null,command);}  }
class C{  public boolean hasExpression(){  return getExpression() != null;}  }
class C{  private static String replaceChars(String str){  StringBuffer buf=new StringBuffer(str);  int length=buf.length();  for (int i=0; i < length; i++) {    char currentChar=buf.charAt(i);    if (currentChar == ' ') {      buf.setCharAt(i,'%');      buf.insert(i + 1,"20");      length=length + 2;      i=i + 2;    } else     if (currentChar == '\\') {      buf.setCharAt(i,'/');    }  }  return buf.toString();}  }
class C{  public void put(IValidatable bean){  for (  Binding b : _optComponents.values()) {    b.put(bean);  }  for (  Binding b : _bindings.values()) {    if (isPropertyNull(bean,b)) {      b.clear(null);    } else {      b.put(bean);    }  }  _modified=false;}  }
class C{  public boolean addPart(PduPart part){  if (null == part) {    throw new NullPointerException();  }  putPartToMaps(part);  return mParts.add(part);}  }
class C{  private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  public boolean onMaterialScrolled(Object source,float yOffset){  if (initialDistance == -1 || initialDistance == 0) {    initialDistance=mHeader.mPagerSlidingTabStrip.getTop() - mHeader.toolbar.getBottom();  }  if (yOffset == lastYOffset) {    return false;  }  float scrollTop=-yOffset;{    if (mHeader.headerBackground != null) {      if (this.settings.parallaxHeaderFactor != 0) {        ViewCompat.setTranslationY(mHeader.headerBackground,scrollTop / this.settings.parallaxHeaderFactor);      }      if (ViewCompat.getY(mHeader.headerBackground) >= 0) {        ViewCompat.setY(mHeader.headerBackground,0);      }    }  }  if (ENABLE_LOG) {    Log.d("yOffset","" + yOffset);  }  dispatchScrollOffset(source,minMax(0,yOffset,scrollMaxDp));  float percent=yOffset / scrollMax;  if (ENABLE_LOG) {    Log.d("percent1","" + percent);  }  if (percent != 0) {    float newDistance=ViewCompat.getY(mHeader.mPagerSlidingTabStrip) - mHeader.toolbar.getBottom();    percent=1 - newDistance / initialDistance;    if (ENABLE_LOG) {      Log.d("percent2","" + percent);    }  }  if (Float.isNaN(percent)) {    return false;  }  if (percent == 0 && headerAnimator != null) {    cancelHeaderAnimator();    ViewCompat.setTranslationY(mHeader.toolbarLayout,0);  }  percent=minMax(0,percent,1);{    if (!settings.toolbarTransparent) {      setColorPercent(percent);    } else {      if (justToolbarAnimated) {        if (toolbarJoinsTabs()) {          setColorPercent(1);        } else         if (lastPercent != percent) {          animateColorPercent(0,200);        }      }    }    lastPercent=percent;    if (mHeader.mPagerSlidingTabStrip != null) {      if (ENABLE_LOG) {        Log.d(TAG,"" + scrollTop);      }      if (scrollTop <= 0) {        ViewCompat.setTranslationY(mHeader.mPagerSlidingTabStrip,scrollTop);        ViewCompat.setTranslationY(mHeader.toolbarLayoutBackground,scrollTop);        if (ViewCompat.getY(mHeader.mPagerSlidingTabStrip) < mHeader.getToolbar().getBottom()) {          float ty=mHeader.getToolbar().getBottom() - mHeader.mPagerSlidingTabStrip.getTop();          ViewCompat.setTranslationY(mHeader.mPagerSlidingTabStrip,ty);          ViewCompat.setTranslationY(mHeader.toolbarLayoutBackground,ty);        }      }    }    if (mHeader.mLogo != null) {      if (this.settings.hideLogoWithFade) {        ViewCompat.setAlpha(mHeader.mLogo,1 - percent);        ViewCompat.setTranslationY(mHeader.mLogo,(mHeader.finalTitleY - mHeader.originalTitleY) * percent);      } else {        ViewCompat.setTranslationY(mHeader.mLogo,(mHeader.finalTitleY - mHeader.originalTitleY) * percent);        ViewCompat.setTranslationX(mHeader.mLogo,(mHeader.finalTitleX - mHeader.originalTitleX) * percent);        float scale=(1 - percent) * (1 - mHeader.finalScale) + mHeader.finalScale;        setScale(scale,mHeader.mLogo);      }    }    if (this.settings.hideToolbarAndTitle && mHeader.toolbarLayout != null) {      boolean scrollUp=lastYOffset < yOffset;      if (scrollUp) {        scrollUp(yOffset);      } else {        scrollDown(yOffset);      }    }  }  if (headerAnimator != null && percent < 1) {    cancelHeaderAnimator();  }  lastYOffset=yOffset;  return true;}  }
class C{  protected boolean validateWorkDirectory(){  String dir=workDirectoryField.getText().trim();  if (dir.length() <= 0) {    return true;  }  String expandedDir=null;  try {    expandedDir=resolveValue(dir);    if (expandedDir == null) {      return true;    }  } catch (  CoreException e) {    setErrorMessage(e.getStatus().getMessage());    return false;  }  File file=new File(expandedDir);  if (!file.exists()) {    setErrorMessage(TypeScriptUIMessages.Launch_MainTab_workingDir_does_not_exist_or_is_invalid);    return false;  }  if (!file.isDirectory()) {    setErrorMessage(TypeScriptUIMessages.Launch_MainTab_Not_a_directory);    return false;  }  return true;}  }
class C{  ParseException(String messageKey){  super(messageKey);  this.messageKey=messageKey;}  }
class C{  public void hideEmptyView(){  if (mRootView == null || mRootView.getVisibility() == View.GONE) {    return;  }  resetViewStatus();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void pack(){  cellIds.trimToSize();}  }
class C{  @Override protected void initData(){  this.adapter=new SpanRecyclerAdapter(this);  this.spanRV.setAdapter(adapter);  this.spanRV.addItemDecoration(new EasyDividerItemDecoration(this,EasyDividerItemDecoration.VERTICAL_LIST,R.drawable.bg_recycler_view_divider));  List<SpanData> spans=new ArrayList<>();  SpanData spanData=new SpanData();  spanData.setContent(CONTENT);  spanData.setType(1);  spans.add(spanData);  for (int i=0; i < 23; i++) {    SpanData s=new SpanData();    s.setContent(CONTENT);    s.setType(0);    spans.add(s);  }  adapter.setList(spans);  adapter.notifyDataSetChanged();}  }
class C{  public synchronized void close(){  if (!this.mIsClosed) {    this.mSocket.close();    this.mIsClosed=true;  }}  }
class C{  private static int[] mult32(int a,int b){  int[] result=new int[2];  if (a == 0 || b == 0) {    return result;  }  long b2=b;  b2&=0x00000000ffffffffL;  int i;  long h=0;  for (i=1; i <= 32; i++) {    if ((a & bitMask[i - 1]) != 0) {      h^=b2;    }    b2<<=1;  }  result[1]=(int)(h >>> 32);  result[0]=(int)(h & 0x00000000ffffffffL);  return result;}  }
class C{  public static <K,V>void writeNullableMap(BinaryRawWriterEx writer,@Nullable Map<K,V> map){  if (map != null) {    writer.writeBoolean(true);    writeMap(writer,map);  } else   writer.writeBoolean(false);}  }
class C{  public static void w(String tag,String s,Object... args){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,String.format(s,args));}  }
class C{  protected Boolean computeMarkSeenPermanent(){  return getFolder().getPermanentFlags().contains(Flags.Flag.SEEN);}  }
class C{  public static LatLng random(){  return random(new Random());}  }
class C{  public static void main(String[] args){  try {    if (args.length == 0) {      throw new Exception("The first argument must be the name of an " + "attribute/subset evaluator");    }    String EvaluatorName=args[0];    args[0]="";    ASEvaluation newEval=ASEvaluation.forName(EvaluatorName,null);    System.out.println(SelectAttributes(newEval,args));  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public void onFirstLayout(WebViewCore.DrawData drawData){  assert drawData != null;  assert drawData.mViewState != null;  assert mWebView.getSettings() != null;  WebViewCore.ViewState viewState=drawData.mViewState;  final Point viewSize=drawData.mViewSize;  updateZoomRange(viewState,viewSize.x,drawData.mMinPrefWidth);  setupZoomOverviewWidth(drawData,mWebView.getViewWidth());  final float overviewScale=getZoomOverviewScale();  WebSettingsClassic settings=mWebView.getSettings();  if (!mMinZoomScaleFixed || settings.getUseWideViewPort()) {    mMinZoomScale=(mInitialScale > 0) ? Math.min(mInitialScale,overviewScale) : overviewScale;    mMaxZoomScale=Math.max(mMaxZoomScale,mMinZoomScale);    sanitizeMinMaxScales();  }  if (!mWebView.drawHistory()) {    float scale;    if (mInitialScale > 0) {      scale=mInitialScale;    } else     if (viewState.mIsRestored || viewState.mViewScale > 0) {      scale=(viewState.mViewScale > 0) ? viewState.mViewScale : overviewScale;      mTextWrapScale=(viewState.mTextWrapScale > 0) ? viewState.mTextWrapScale : getReadingLevelScale();    } else {      scale=overviewScale;      if (!settings.getUseWideViewPort() || !settings.getLoadWithOverviewMode()) {        scale=Math.max(mDefaultScale,scale);      }      if (settings.isNarrowColumnLayout() && settings.getUseFixedViewport()) {        mTextWrapScale=getReadingLevelScale();      }    }    boolean reflowText=false;    if (!viewState.mIsRestored) {      if (settings.getUseFixedViewport()) {        scale=Math.max(scale,overviewScale);        mTextWrapScale=Math.max(mTextWrapScale,overviewScale);      }      reflowText=exceedsMinScaleIncrement(mTextWrapScale,scale);    }    mInitialZoomOverview=settings.getLoadWithOverviewMode() && !exceedsMinScaleIncrement(scale,overviewScale);    setZoomScale(scale,reflowText);    updateZoomPicker();  }}  }
class C{  public void deploy(String module,Map<String,String> data,URL apiEndpoint,String org,String space,String email,String password,String namespace) throws IOException {  ModuleDetails details=getModuleDetails(module);  final Resource artifactToDeploy=findArtifact(details,ctx,data);  final Map<String,String> properties=getProperties(spinnakerConfiguration,details,data);  final Map<String,String> deploymentProperties=new HashMap<>();  deploymentProperties.put(CloudFoundryDeploymentProperties.USE_SPRING_APPLICATION_JSON_KEY,"false");  deploymentProperties.put(CloudFoundryDeploymentProperties.SERVICES_PROPERTY_KEY,Stream.concat(details.getServices().stream(),StringUtils.commaDelimitedListToSet(data.getOrDefault(CloudFoundryDeploymentProperties.SERVICES_PROPERTY_KEY,"")).stream()).collect(Collectors.joining(",")));  Optional.ofNullable(details.getProperties().get("buildpack")).ifPresent(null);  Optional.ofNullable(details.getProperties().get("memory")).ifPresent(null);  Optional.ofNullable(details.getProperties().get("disk")).ifPresent(null);  CloudFoundryAppDeployer appDeployer=appDeployerFactory.getAppDeployer(apiEndpoint,org,space,email,password,namespace);  log.debug("Uploading " + artifactToDeploy + "...");  String deploymentId=appDeployer.deploy(new AppDeploymentRequest(new AppDefinition(details.getName() + namespace,properties),artifactToDeploy,deploymentProperties));  try {    Mono.defer(null).filter(null).repeatWhenEmpty(exponentialBackOff(Duration.ofSeconds(1),Duration.ofSeconds(15),Duration.ofMinutes(15))).block(Duration.ofMinutes(20));  }  finally {    this.fileManager.delete(details);  }  counterService.increment(String.format(METRICS_DEPLOYED,module));}  }
class C{  @Override public boolean supportsANSI92EntryLevelSQL(){  debugCodeCall("supportsANSI92EntryLevelSQL");  return true;}  }
class C{  public static List<String> readLines(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.readLines(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public boolean isBootstrap(){  return loader == mySnapshot.getNullThing();}  }
class C{  protected void fireEditingStopped(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == CellEditorListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((CellEditorListener)listeners[i + 1]).editingStopped(changeEvent);    }  }}  }
class C{  public QPSKStarSlicer(){}  }
class C{  public void testCustomFactoryBoxedProperty(){  PlatformJavaObjectFactoryProxy proxy=proxyForCustom(NO_DFLT_CTOR_FACTORY_CLS_NAME,Collections.singletonMap("fIntBoxed",(Object)1));  Object val=proxy.factory(ctx).create();  assertEquals(val,new TestJavaObject().setIntBoxed(1));}  }
class C{  public Builder readBatchSize(int readBatchSize){  this.readBatchSize=readBatchSize;  return this;}  }
class C{  @SuppressWarnings({"PMD.InsufficientStringBufferDeclaration","PMD.AvoidInstantiatingObjectsInLoops"}) private static StringBuilder fakeBody(final Request... parts) throws IOException {  final StringBuilder builder=new StringBuilder();  for (  final Request part : parts) {    builder.append(String.format("--%s",RqMtFake.BOUNDARY)).append(RqMtFake.CRLF).append("Content-Disposition: ").append(new RqHeaders.Smart(new RqHeaders.Base(part)).single("Content-Disposition")).append(RqMtFake.CRLF);    final String body=new RqPrint(part).printBody();    if (!(RqMtFake.CRLF.equals(body) || body.isEmpty())) {      builder.append(RqMtFake.CRLF).append(body).append(RqMtFake.CRLF);    }  }  builder.append("Content-Transfer-Encoding: utf-8").append(RqMtFake.CRLF).append(String.format("--%s--",RqMtFake.BOUNDARY));  return builder;}  }
class C{  public SessionIndexNotFoundException(String message,ReasonEnum reason,Object[] params){  super(message,params);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public static Number cos(Number a){  return Math.cos(a.doubleValue());}  }
class C{  private String userAgent(){  String userAgent=originalDownloadInfo.getUserAgent();  if (userAgent == null) {    userAgent=Constants.DEFAULT_USER_AGENT;  }  return userAgent;}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[2]) - stateCount[1] / 2.0f;}  }
class C{  public BoundingBox(){  crn_dirty=true;  for (int l_idx=0; l_idx < 8; l_idx++)   crn[l_idx]=new Vector3();  clr();}  }
class C{  public DynamicSchema build() throws DescriptorValidationException {  FileDescriptorSet.Builder fileDescSetBuilder=FileDescriptorSet.newBuilder();  fileDescSetBuilder.addFile(mFileDescProtoBuilder.build());  fileDescSetBuilder.mergeFrom(mFileDescSetBuilder.build());  return new DynamicSchema(fileDescSetBuilder.build());}  }
class C{  public static String mediumFormat(Date dt){  return createDateFormatter().mediumFormat(dt);}  }
class C{  public Tabs addTab(String title,char materialIcon,float iconSize,Component component){  int index=tabsContainer.getComponentCount();  FontImage i=FontImage.createMaterial(materialIcon,"Tab",iconSize);  insertTab(title,i,component,index);  Style sel=getUIManager().getComponentSelectedStyle("Tab");  i=FontImage.createMaterial(materialIcon,sel,iconSize);  setTabSelectedIcon(index,i);  return this;}  }
class C{  private void plotPoint(int x,int y,int width,int height,double[] probs,boolean update){  Graphics osg=m_osi.getGraphics();  if (update) {    osg.setXORMode(Color.white);    osg.drawLine(0,y,m_panelWidth - 1,y);    update();    osg.drawLine(0,y,m_panelWidth - 1,y);  }  osg.setPaintMode();  float[] colVal=new float[3];  float[] tempCols=new float[3];  for (int k=0; k < probs.length; k++) {    Color curr=m_Colors.get(k % m_Colors.size());    curr.getRGBColorComponents(tempCols);    for (int z=0; z < 3; z++) {      colVal[z]+=probs[k] * tempCols[z];    }  }  for (int z=0; z < 3; z++) {    if (colVal[z] < 0) {      colVal[z]=0;    } else     if (colVal[z] > 1) {      colVal[z]=1;    }  }  osg.setColor(new Color(colVal[0],colVal[1],colVal[2]));  osg.fillRect(x,y,width,height);}  }
class C{  public static int loadShader(int type,String shaderCode){  int shader=GLES20.glCreateShader(type);  GLES20.glShaderSource(shader,shaderCode);  GLES20.glCompileShader(shader);  return shader;}  }
class C{  public void addInvokespecial(CtClass clazz,String name,String desc){  boolean isInterface=clazz == null ? false : clazz.isInterface();  addInvokespecial(isInterface,constPool.addClassInfo(clazz),name,desc);}  }
class C{  private void saveAsPDF(File f){  File file=f;  if (file == null) {    JFileChooser fileChooser=new JFileChooser();    fileChooser.setCurrentDirectory(this.defaultDirectoryForSaveAs);    FileNameExtensionFilter filter=new FileNameExtensionFilter(localizationResources.getString("PDF_Files"),"pdf");    fileChooser.addChoosableFileFilter(filter);    fileChooser.setFileFilter(filter);    int option=fileChooser.showSaveDialog(this);    if (option == JFileChooser.APPROVE_OPTION) {      String filename=fileChooser.getSelectedFile().getPath();      if (isEnforceFileExtensions()) {        if (!filename.endsWith(".pdf")) {          filename=filename + ".pdf";        }      }      file=new File(filename);      if (file.exists()) {        String fileExists=localizationResources.getString("FILE_EXISTS_CONFIRM_OVERWRITE");        int response=JOptionPane.showConfirmDialog(this,fileExists,localizationResources.getString("Save_as_PDF"),JOptionPane.OK_CANCEL_OPTION);        if (response == JOptionPane.CANCEL_OPTION) {          file=null;        }      }    }  }  if (file != null) {    writeAsPDF(file,getWidth(),getHeight());  }}  }
class C{  private void updateActionBarHomeIcon(Bitmap resource){  if (isAttached()) {    final AbstractYeloActivity activity=(AbstractYeloActivity)getActivity();    if (activity.getActionBar() != null) {      activity.getActionBar().setIcon(new BitmapDrawable(getResources(),resource));    }  }}  }
class C{  public ConcurrentSkipListMap(SortedMap<K,? extends V> m){  this.comparator=m.comparator();  initialize();  buildFromSorted(m);}  }
class C{  private double baseMatch(IHex org,IHex com){  double elevation;  double terrain;  double theme;  if (com.getLevel() == ITerrain.WILDCARD) {    elevation=1.0;  } else {    elevation=1.01 / (Math.abs(org.getLevel() - com.getLevel()) + 1.01);  }  double maxTerrains=Math.max(org.terrainsPresent(),com.terrainsPresent());  double matches=0.0;  int[] orgTerrains=org.getTerrainTypes();  for (int i=0; i < orgTerrains.length; i++) {    int terrType=orgTerrains[i];    ITerrain cTerr=com.getTerrain(terrType);    ITerrain oTerr=org.getTerrain(terrType);    if ((cTerr == null) || (oTerr == null)) {      continue;    }    double thisMatch=0;    if (cTerr.getLevel() == ITerrain.WILDCARD) {      thisMatch=1.0;    } else {      thisMatch=1.0 / (Math.abs(oTerr.getLevel() - cTerr.getLevel()) + 1.0);    }    if (cTerr.hasExitsSpecified() && (oTerr.getExits() != cTerr.getExits())) {      thisMatch*=0.5;    }    matches+=thisMatch;  }  if (maxTerrains == 0) {    terrain=1.0;  } else {    terrain=matches / maxTerrains;  }  if ((com.getTheme() == org.getTheme()) || ((com.getTheme() != null) && com.getTheme().equalsIgnoreCase(org.getTheme()))) {    theme=1.0;  } else   if ((org.getTheme() != null) && (com.getTheme() == null)) {    theme=0.001;  } else {    theme=0.0001;  }  return elevation * terrain * theme;}  }
class C{  public OsmAgentFrame(){  setTitle("OMAS - the Osm Map Agent Simulator");  setSelectors(new String[]{SCENARIO_SEL,AGENT_SEL,SEARCH_SEL,Q_SEARCH_IMPL_SEL,HEURISTIC_SEL},new String[]{"Select Scenario","Select Agent","Select Search Strategy","Select QSearch Implementation","Select Heuristic"});  setSelectorItems(SCENARIO_SEL,new String[]{"Use any way","Travel by car","Travel by bicycle"},0);  setSelectorItems(AGENT_SEL,new String[]{"Offline Search","Online Search (LRTA*)"},0);  setSelectorItems(SEARCH_SEL,SearchFactory.getInstance().getSearchStrategyNames(),5);  setSelectorItems(Q_SEARCH_IMPL_SEL,SearchFactory.getInstance().getQSearchImplNames(),1);  setSelectorItems(HEURISTIC_SEL,new String[]{"=0","SLD"},1);  getMessageLogger().setLogLater(true);}  }
class C{  public void addItem(final String labelText,final JComponent item){  JLabel label=new JLabel(labelText);  GridBagConstraints labelConstraints=new GridBagConstraints();  labelConstraints.gridx=0;  labelConstraints.gridy=myNextItemRow;  labelConstraints.insets=new Insets(10,10,0,0);  labelConstraints.anchor=GridBagConstraints.NORTHEAST;  labelConstraints.fill=GridBagConstraints.NONE;  add(label,labelConstraints);  GridBagConstraints itemConstraints=new GridBagConstraints();  itemConstraints.gridx=1;  itemConstraints.gridy=myNextItemRow;  itemConstraints.insets=new Insets(10,10,0,10);  itemConstraints.weightx=1.0;  itemConstraints.anchor=GridBagConstraints.WEST;  itemConstraints.fill=GridBagConstraints.HORIZONTAL;  add(item,itemConstraints);  myNextItemRow++;}  }
class C{  public void removeQueryExecuteListener(QueryExecuteListener l){  m_QueryPanel.removeQueryExecuteListener(l);}  }
class C{  public ReactiveTask requestAllAsync(){  return requestAsync(Long.MAX_VALUE);}  }
class C{  static private void swap(final QueryBase queryBase,final GraphPatternGroup<?> parent,final GraphPatternGroup<?> child){  if (parent.getParent() == null) {    queryBase.setWhereClause(child);  } else {    final GroupNodeBase<?> grandparent=(GroupNodeBase<?>)parent.getParent();    copyQueryHints(child,parent.getQueryHints());    grandparent.replaceWith(parent,child);  }  parent.setParent(null);}  }
class C{  public final GVector add(GVector v){  if (length != v.length) {    throw new MatrixSizeException();  }  double[] tmp=new double[length];  for (int i=0; i < length; i++) {    tmp[i]=values[i] + v.values[i];  }  return new GVector(tmp);}  }
class C{  protected void receiveAndAddConnection(){  try {    DatagramPacket receivePacket=new DatagramPacket(receiveData,receiveData.length);    if (logger != null)     logger.info("waiting for " + (numClients - connections.size()) + " more clients to reconnect...");    socket.receive(receivePacket);    InetAddress ip=receivePacket.getAddress();    int port=receivePacket.getPort();    String connID=UDPConnection.buildHash(ip,port);    if (connections.get(connID) == null) {      if (connections.size() == 0) {        frameCount=0;        if (logger != null)         logger.info("resetting frame count");      }      UDPConnection conn=new UDPConnection(ip,port);      connections.put(connID,conn);      conn.send(socket,getSyncPayload());      if (logger != null)       logger.fine("added new connection: " + conn);      if (listener != null) {        listener.clientConnected(conn);      }    }  } catch (  SocketTimeoutException e) {  }catch (  IOException e) {    handleException(e);  }}  }
class C{  private void resumeWebViewTimers(Tab tab){  boolean inLoad=tab.inPageLoad();  if ((!mActivityStopped && !inLoad) || (mActivityStopped && inLoad)) {    CookieSyncManager.getInstance().startSync();    WebView w=tab.getWebView();    WebViewTimersControl.getInstance().onBrowserActivityResume(w);  }}  }
class C{  public void whoisDetail(String target){  bot.sendRaw().rawLine("WHOIS " + target + " "+ target);}  }
class C{  public static RegisterVASACertificate parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  RegisterVASACertificate object=new RegisterVASACertificate();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"registerVASACertificate".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (RegisterVASACertificate)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","userName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setUserName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","password").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setPassword(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","newCertificate").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setNewCertificate(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static boolean isValidDomainName(String domainName){  Pattern p=Pattern.compile(DOMAIN_NAME_PATTERN);  Matcher m=p.matcher(domainName);  return m.matches();}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  public void addAttribute(String name,String type,String value){  names.add(name);  types.add(type);  values.add(value);}  }
class C{  private static MainCommands processMainMenuCommand(String cmd){  if (cmd.equals("portfolios") || cmd.equals("pr")) {    return FinancePortfoliosClient.MainCommands.PORTFOLIOS;  } else   if (cmd.equals("positions") || cmd.equals("ps")) {    return FinancePortfoliosClient.MainCommands.POSITIONS;  } else   if (cmd.equals("transactions") || cmd.equals("t")) {    return FinancePortfoliosClient.MainCommands.TRANSACTIONS;  } else   if (cmd.equals("quit") || cmd.equals("q")) {    return FinancePortfoliosClient.MainCommands.QUIT;  } else {    return FinancePortfoliosClient.MainCommands.HELP;  }}  }
class C{  public static boolean shouldHeldItemRevealHiddenBlocksClient(){  return lastCheckResult;}  }
class C{  private Matcher match(String pat){  return (match(this.toString(),pat,"Validator"));}  }
class C{  public void resetUser(String username){  Jetty9YaCySecurityHandler hx=this.server.getChildHandlerByClass(Jetty9YaCySecurityHandler.class);  if (hx != null) {    YaCyLoginService loginservice=(YaCyLoginService)hx.getLoginService();    loginservice.loadUser(username);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public RelyingPartyResource relyingParty(){  return relyingParty;}  }
class C{  public static MemcacheClientBuilder<byte[]> newByteArrayClient(){  return new MemcacheClientBuilder<>(ByteArrayTranscoder.INSTANCE);}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target,Mounted club,int aimTable){  final Entity ae=game.getEntity(attackerId);  MiscType clubType;  if ((ae == null) || (target == null)) {    throw new IllegalArgumentException("Attacker or target not valid");  }  if (club == null) {    throw new IllegalArgumentException("Club is null");  }  if (club.getType() == null) {    throw new IllegalArgumentException("Club type is null");  } else {    clubType=(MiscType)club.getType();  }  String impossible=PhysicalAttackAction.toHitIsImpossible(game,ae,target);  if (impossible != null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,impossible);  }  if (!(ae instanceof Mech)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Non-mechs can't club");  }  if (ae.entityIsQuad() && !(clubType.hasSubType(MiscType.S_BACKHOE)) && !(clubType.hasSubType(MiscType.S_WRECKING_BALL))&& !(clubType.hasSubType(MiscType.S_BUZZSAW))&& !(clubType.hasSubType(MiscType.S_DUAL_SAW))&& !(clubType.hasSubType(MiscType.S_COMBINE))&& !(clubType.hasSubType(MiscType.S_CHAINSAW))) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is a quad");  }  if (clubType.hasSubType(MiscType.S_RETRACTABLE_BLADE) && !((Mech)ae).hasExtendedRetractableBlade()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Blade is Retracted.");  }  if ((ae.getGrappled() != Entity.NONE) && (ae.getGrappleSide() == Entity.GRAPPLE_LEFT) && (club.getLocation() == Mech.LOC_LARM)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"impossible");  }  if ((ae.getGrappled() != Entity.NONE) && (ae.getGrappleSide() == Entity.GRAPPLE_RIGHT) && (club.getLocation() == Mech.LOC_RARM)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"impossible");  }  IHex attHex=game.getBoard().getHex(ae.getPosition());  IHex targHex=game.getBoard().getHex(target.getPosition());  final int attackerElevation=ae.getElevation() + attHex.getLevel();  final int attackerHeight=attackerElevation + ae.height();  final int targetElevation=target.getElevation() + targHex.getLevel();  final int targetHeight=targetElevation + target.getHeight();  final boolean bothArms=(club.getType().hasFlag(MiscType.F_CLUB) && ((MiscType)club.getType()).hasSubType(MiscType.S_CLUB));  final boolean hasClaws=((Mech)ae).hasClaw(Mech.LOC_RARM) || ((Mech)ae).hasClaw(Mech.LOC_LARM);  final boolean shield=clubType.isShield();  boolean needsHand=true;  final boolean armMounted=(club.getLocation() == Mech.LOC_LARM || club.getLocation() == Mech.LOC_RARM);  if (hasClaws || (clubType.hasSubType(MiscType.S_BACKHOE)) || (clubType.hasSubType(MiscType.S_BUZZSAW))|| (clubType.hasSubType(MiscType.S_CHAINSAW))|| (clubType.hasSubType(MiscType.S_COMBINE))|| (clubType.hasSubType(MiscType.S_DUAL_SAW))|| (clubType.hasSubType(MiscType.S_FLAIL))|| (clubType.hasSubType(MiscType.S_LANCE))|| (clubType.hasSubType(MiscType.S_MINING_DRILL))|| (clubType.hasSubType(MiscType.S_PILE_DRIVER))|| (clubType.hasSubType(MiscType.S_ROCK_CUTTER))|| (clubType.hasSubType(MiscType.S_SPOT_WELDER))|| (clubType.hasSubType(MiscType.S_WRECKING_BALL))) {    needsHand=false;  }  ToHitData toHit;  if (bothArms) {    if (ae.isLocationBad(Mech.LOC_RARM) || ae.isLocationBad(Mech.LOC_LARM)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Arm missing");    }    if (ae.weaponFiredFrom(Mech.LOC_RARM) || ae.weaponFiredFrom(Mech.LOC_LARM)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Weapons fired from arm this turn");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_RARM) || !ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_LARM)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Shoulder actuator destroyed");    }    if ((!ae.hasWorkingSystem(Mech.ACTUATOR_HAND,Mech.LOC_RARM) || !ae.hasWorkingSystem(Mech.ACTUATOR_HAND,Mech.LOC_LARM)) && needsHand) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Hand actuator destroyed");    }  } else   if (shield) {    if (!ae.hasPassiveShield(club.getLocation())) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Shield not in passive mode");    }  } else {    if (ae.isLocationBad(club.getLocation())) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Arm missing");    }    if (ae.weaponFiredFrom(club.getLocation()) && armMounted) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Weapons fired from arm this turn");    }    if (armMounted && !ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,club.getLocation())) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Shoulder actuator destroyed");    }    if (armMounted && !ae.hasWorkingSystem(Mech.ACTUATOR_HAND,club.getLocation()) && needsHand) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Hand actuator destroyed");    }  }  if (armMounted && ae.hasQuirk(OptionsConstants.QUIRK_NEG_NO_ARMS)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"No/minimal arms");  }  if (!shield && (ae.getBadCriticals(CriticalSlot.TYPE_EQUIPMENT,ae.getEquipmentNum(club),club.getLocation()) > 0)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Club is damaged");  }  if (target.isAirborneVTOLorWIGE()) {    if (((targetElevation - attackerElevation) > 3) || ((targetElevation - attackerElevation) < 0)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target elevation not in range");    }  } else   if ((targetHeight < attackerElevation) || (targetElevation > attackerHeight)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target elevation not in range");  }  int clubArc;  if (bothArms) {    clubArc=Compute.ARC_FORWARD;  } else {    if (club.getLocation() == Mech.LOC_LARM) {      clubArc=Compute.ARC_LEFTARM;    } else     if (armMounted) {      clubArc=Compute.ARC_RIGHTARM;    } else     if (club.isRearMounted()) {      clubArc=Compute.ARC_REAR;    } else {      clubArc=Compute.ARC_FORWARD;    }  }  if (!Compute.isInArc(ae.getPosition(),ae.getSecondaryFacing(),target,clubArc)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in arc");  }  if (ae.isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is prone");  }  if ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK) || (target instanceof GunEmplacement)) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Targeting adjacent building.");  }  int base=ae.getCrew().getPiloting();  if (clubType.hasSubType(MiscType.S_PILE_DRIVER)) {    base+=2;  } else   if (clubType.hasSubType(MiscType.S_BACKHOE) || clubType.hasSubType(MiscType.S_ROCK_CUTTER) || clubType.hasSubType(MiscType.S_WRECKING_BALL)|| clubType.hasSubType(MiscType.S_LANCE)|| clubType.hasSubType(MiscType.S_MACE)|| clubType.hasSubType(MiscType.S_MACE_THB)) {    base+=1;  } else   if (clubType.hasSubType(MiscType.S_CHAINSAW) || clubType.hasSubType(MiscType.S_DUAL_SAW) || clubType.hasSubType(MiscType.S_FLAIL)) {    base+=0;  } else   if (clubType.hasSubType(MiscType.S_HATCHET) || clubType.hasSubType(MiscType.S_MINING_DRILL)) {    base-=1;  } else   if (clubType.hasSubType(MiscType.S_COMBINE) || clubType.hasSubType(MiscType.S_RETRACTABLE_BLADE) || clubType.hasSubType(MiscType.S_SWORD)|| clubType.hasSubType(MiscType.S_CHAIN_WHIP)|| clubType.hasSubType(MiscType.S_SHIELD_SMALL)|| clubType.isVibroblade()|| clubType.hasSubType(MiscType.S_COMBINE)) {    base-=2;  } else   if (clubType.hasSubType(MiscType.S_SHIELD_MEDIUM)) {    base-=3;  } else   if (clubType.hasSubType(MiscType.S_SHIELD_LARGE)) {    base-=4;  } else {    base-=1;  }  toHit=new ToHitData(base,"base");  PhysicalAttackAction.setCommonModifiers(toHit,game,ae,target);  if (bothArms) {    if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,Mech.LOC_RARM)) {      toHit.addModifier(2,"Upper arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,Mech.LOC_LARM)) {      toHit.addModifier(2,"Upper arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_RARM)) {      toHit.addModifier(2,"Lower arm actuator missing or destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_LARM)) {      toHit.addModifier(2,"Lower arm actuator missing or destroyed");    }    if (hasClaws) {      toHit.addModifier(2,"Mek has claws");    }    if (ae.hasFunctionalArmAES(Mech.LOC_RARM) && ae.hasFunctionalArmAES(Mech.LOC_LARM)) {      toHit.addModifier(-1,"AES modifer");    }  } else {    if (armMounted && !ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,club.getLocation())) {      toHit.addModifier(2,"Upper arm actuator destroyed");    }    if (armMounted && !ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,club.getLocation())) {      toHit.addModifier(2,"Lower arm actuator missing or destroyed");    }    if (hasClaws && (clubType.hasSubType(MiscType.S_CLUB))) {      toHit.addModifier(2,"Mek has claws");    }    if (ae.hasFunctionalArmAES(club.getLocation())) {      toHit.addModifier(-1,"AES modifer");    }  }  if (game.getOptions().booleanOption("clubs_punch") && (target instanceof Mech)) {    toHit.setHitTable(ToHitData.HIT_PUNCH);    if ((attackerHeight == targetElevation) && !ae.isHullDown()) {      if (target.getHeight() == 0) {        toHit.setHitTable(ToHitData.HIT_NORMAL);      } else {        toHit.setHitTable(ToHitData.HIT_KICK);      }    } else {      if (ae.isHullDown()) {        toHit.setHitTable(ToHitData.HIT_KICK);      } else {        toHit.setHitTable(ToHitData.HIT_PUNCH);      }    }  } else {    if (attackerElevation == targetElevation) {      toHit.setHitTable(aimTable);      if (aimTable != ToHitData.HIT_NORMAL) {        toHit.addModifier(4,"called shot");      }    } else     if (attackerElevation < targetElevation) {      if (target.getHeight() == 0) {        if (shield) {          toHit.setHitTable(ToHitData.HIT_PUNCH);        } else {          toHit.setHitTable(ToHitData.HIT_NORMAL);        }      } else {        toHit.setHitTable(ToHitData.HIT_KICK);      }    } else {      toHit.setHitTable(ToHitData.HIT_PUNCH);    }  }  toHit.setSideTable(Compute.targetSideTable(ae,target));  return toHit;}  }
class C{  public static List<String> splitFileNames(String fileNames){  if (fileNames == null)   return Collections.<String>emptyList();  List<String> result=new ArrayList<>();  for (  String file : fileNames.split("(?<!\\\\),")) {    result.add(file.replaceAll("\\\\(?=,)",""));  }  return result;}  }
class C{  public static void markAsUnauthorizedForEdition(HasEnabled widget){  getPermissionsUIHandler().markAsUnauthorizedForEdition(widget);}  }
class C{  @RpcMethod public CreateVmResponse createVm(String reservation,Map<String,String> environment) throws InterruptedException, RpcException {  SyncHandler<CreateVmResponse,Host.AsyncClient.create_vm_call> syncHandler=new SyncHandler<>();  createVm(reservation,environment,syncHandler);  syncHandler.await();  logger.info("finished create_vm target {}, reservation {}",getHostIp(),reservation);  return ResponseValidator.checkCreateVmResponse(syncHandler.getResponse());}  }
class C{  void addTest(BulkTest bulk,Method m){  BulkTest bulk2=(BulkTest)bulk.clone();  bulk2.setName(m.getName());  bulk2.verboseName=prefix + "." + m.getName();  if (ignored.contains(bulk2.verboseName))   return;  result.addTest(bulk2);}  }
class C{  public char[][] toArray(){  char[][] result=new char[max + 1][];  for (  Map.Entry<Character,String> entry : map.entrySet()) {    result[entry.getKey()]=entry.getValue().toCharArray();  }  return result;}  }
class C{  public String toString(){  String s="";  s+=String.format("%.2f N + %.2f",slope(),intercept());  return s + "  (R^2 = " + String.format("%.3f",R2())+ ")";}  }
class C{  @Override public void activate(){  scriptHelper=getSlingScriptHelper();  emailService=scriptHelper.getService(EmailService.class);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.setCharacterEncoding("utf-8");  response.setCharacterEncoding("utf-8");  String school=(String)request.getSession().getAttribute("school");  if (school == null || "".equals(school)) {    response.sendRedirect("../index.jsp");    return;  }  SchoolController schoolController=(SchoolController)request.getSession().getAttribute("schoolController");  if (schoolController == null) {    schoolController=new SchoolController(school);  }  String method=request.getParameter("method");  if (method != null && !"".equals(method.trim()) && "checkNum".equals(method)) {    schoolController=new SchoolController(school);    request.getSession().setAttribute("schoolController",schoolController);    this.checkNum(request,response,schoolController);    return;  }  String username=request.getParameter("username");  String password=request.getParameter("password");  String checkNum=request.getParameter("checkNum");  AESTool aesTool=new AESTool();  User user=new User(aesTool.encrypt(username,"zhixin"),aesTool.encrypt(password,"zhixin"));  JSONObject jsonObject=new JSONObject();  jsonObject=schoolController.login(username,password,checkNum);  if (jsonObject.get("result") != null && !"null".equals(jsonObject.get("result").toString())) {    UserSql userSql=new UserSql(school);    if (!userSql.insertUser(user)) {      userSql.updateUser(user);    }    int userid=userSql.getUserId(user);    if (userid == -1) {      response.sendRedirect("../" + school);      return;    }    request.getSession().setAttribute("userid",userid);    Cookie cookie=new Cookie("userCookie",userid + "");    MD5Tool md5Tool=new MD5Tool();    String value=md5Tool.GetMD5Code(md5Tool.GetMD5Code(user.getPassword() + school) + user.getUsername());    Cookie token=new Cookie("token",value);    Cookie schoolCookie=new Cookie("school",school);    cookie.setPath("/");    token.setPath("/");    schoolCookie.setPath("/");    cookie.setMaxAge(60 * 60 * 24* 365* 2);    token.setMaxAge(60 * 60 * 24* 365* 2);    schoolCookie.setMaxAge(60 * 60 * 24* 365* 2);    response.addCookie(cookie);    response.addCookie(token);    response.addCookie(schoolCookie);    jsonObject=schoolController.crawler(user.getUsername(),user.getPassword(),userid,checkNum);  }  PrintWriter out=response.getWriter();  out.print(jsonObject);}  }
class C{  public static void main(String[] args){  Map map=new HashMap();  map.put("env-entry-type","DONTCARE");  List values=new ArrayList(3);  values.add("111111");  values.add("222222");  System.out.println("Entity Ref node type " + Node.ENTITY_REFERENCE_NODE);  try {    Document doc=XMLUtil.getDocument("d:\\try\\xml\\0095_a.xml");    NodeList ens=doc.getElementsByTagName("Environment");    Element env=(Element)ens.item(0);    Attr expireAttr=env.getAttributeNode("expires");    System.out.println("# of environment elements " + ens.getLength());    System.out.println(" Expire attrs XPath " + XMLUtil.generateXPath(expireAttr,true,true));  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @Override public int hashCode(){  return Objects.hash(hash);}  }
class C{  public DOMTestDocumentBuilderFactory newInstance(DocumentBuilderSetting[] newSettings) throws DOMTestIncompatibleException {  if (newSettings == null) {    return this;  }  DocumentBuilderSetting[] mergedSettings=mergeSettings(newSettings);  return new BatikTestDocumentBuilderFactory(mergedSettings);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col;  double x, y;  int i;  int progress=0;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  String whatToAssign=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("col")) {        whatToAssign="column";      } else       if (args[i].toLowerCase().contains("row")) {        whatToAssign="row";      } else       if (args[i].toLowerCase().contains("x")) {        whatToAssign="x";      } else       if (args[i].toLowerCase().contains("y")) {        whatToAssign="y";      } else {        showFeedback("Could not determine what variable to assign to grid cells.");        return;      }    } else     if (i == 3) {      if (args[i].toLowerCase().contains("double")) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=WhiteboxRaster.DataType.INTEGER;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,-32768);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (whatToAssign.equals("column")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          output.setValue(row,col,col);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("row")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          output.setValue(row,col,row);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("x")) {      double halfCellSize=image.getCellSizeX() / 2;      double west=image.getWest();      double east=image.getEast();      if (west > east) {        west=west - halfCellSize;        east=east + halfCellSize;      } else {        west=west + halfCellSize;        east=east - halfCellSize;      }      double range=east - west;      double colsLessOne=(double)cols - 1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          x=west + col / colsLessOne * range;          output.setValue(row,col,x);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (whatToAssign.equals("y")) {      double halfCellSize=image.getCellSizeY() / 2;      double north=image.getNorth();      double south=image.getSouth();      if (north > south) {        north=north - halfCellSize;        south=south + halfCellSize;      } else {        north=north + halfCellSize;        south=south - halfCellSize;      }      double range=north - south;      double rowsLessOne=(double)rows - 1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          y=north - row / rowsLessOne * range;          output.setValue(row,col,y);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final static NameValuePair[] parseParameters(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseParameters(buffer,cursor);}  }
class C{  public ECPoint multiply(ECPoint p,BigInteger k,PreCompInfo preCompInfo){  BigInteger e=k;  BigInteger h=e.multiply(BigInteger.valueOf(3));  ECPoint neg=p.negate();  ECPoint R=p;  for (int i=h.bitLength() - 2; i > 0; --i) {    R=R.twice();    boolean hBit=h.testBit(i);    boolean eBit=e.testBit(i);    if (hBit != eBit) {      R=R.add(hBit ? p : neg);    }  }  return R;}  }
class C{  @Override public boolean matches(Artifact specific,boolean checkVisibility){  if (!(specific instanceof Property)) {    return false;  }  Property specificProperty=(Property)specific;  if (checkVisibility && !visibilityMatches(specificProperty)) {    return false;  }  if (!name.equals(specific.name())) {    return false;  }  if (!type.isAssignableFrom(specificProperty.type)) {    return false;  }  if (!specificProperty.type.isAssignableFrom(type)) {    return false;  }  return true;}  }
class C{  private void initializeCacheRegionsAndStats(SystemMemberJmx memberJmx) throws OperationsException, AdminException {  if (memberJmx != null) {    SystemMemberCacheJmxImpl cache=(SystemMemberCacheJmxImpl)memberJmx.getCache();    if (cache != null) {      RegionSubRegionSnapshot regionSnapshot=cache.getRegionSnapshot();      initializeRegionSubRegions(cache,regionSnapshot);    }    initStats(memberJmx);  }}  }
class C{  public void testRoundMathContextHALF_DOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=-45;  int precision=75;  RoundingMode rm=RoundingMode.HALF_DOWN;  MathContext mc=new MathContext(precision,rm);  String res="3.736186567876876578956958765675671119238118911893939591735E+102";  int resScale=-45;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.round(mc);  assertEquals("incorrect quotient value",res,result.toString());  assertEquals("incorrect quotient scale",resScale,result.scale());}  }
class C{  public static void main(String[] args){  TestIndex tester=new TestIndex();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static MProject copyFrom(Properties ctx,int C_Project_ID,Timestamp dateDoc,String trxName){  MProject from=new MProject(ctx,C_Project_ID,trxName);  if (from.getC_Project_ID() == 0)   throw new IllegalArgumentException("From Project not found C_Project_ID=" + C_Project_ID);  MProject to=new MProject(ctx,0,trxName);  PO.copyValues(from,to,from.getAD_Client_ID(),from.getAD_Org_ID());  to.set_ValueNoCheck("C_Project_ID",I_ZERO);  String Value=to.getValue() + " ";  String Time=dateDoc.toString();  int length=Value.length() + Time.length();  if (length <= 40)   Value+=Time; else   Value+=Time.substring(length - 40);  to.setValue(Value);  to.setInvoicedAmt(Env.ZERO);  to.setProjectBalanceAmt(Env.ZERO);  to.setProcessed(false);  if (!to.save())   throw new IllegalStateException("Could not create Project");  if (to.copyDetailsFrom(from) == 0)   throw new IllegalStateException("Could not create Project Details");  return to;}  }
class C{  private int findOrCreateHeapIdx(int cmid){  if (cmid >= map.length) {    growHeapMap(cmid);  }  int index=map[cmid];  if (index == 0) {    index=nextIndex++;    if (index >= counts.length) {      growHeap();    }    counts[index]=0.0;    cmids[index]=cmid;    map[cmid]=index;  }  return index;}  }
class C{  protected void prepare(){  p_Record_ID=getRecord_ID();  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("DocAction")) {      p_DocAction=(String)para.getParameter();    } else     if (name.equals("IsIncludeNotAvailable")) {      p_IsIncludeNotAvailable="Y".equals(para.getParameter());    } else     if (name.equals("MovementDate")) {      p_MovementDate=(Timestamp)para.getParameter();    } else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  private static void initializeVM() throws Exception {  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  props.setProperty(LOG_LEVEL,"info");  distributedSystem=DistributedSystem.connect(props);  cache=CacheFactory.create(distributedSystem);  assertNotNull(cache);  DiskStoreFactory dsf=cache.createDiskStoreFactory();  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  File dir=new File("testingDirectoryDefault");  dir.mkdir();  dir.deleteOnExit();  File[] dirs={dir};  dsf.setDiskDirsAndSizes(dirs,new int[]{Integer.MAX_VALUE});  dsf.setAutoCompact(false);  DirectoryHolder.SET_DIRECTORY_SIZE_IN_BYTES_FOR_TESTING_PURPOSES=true;  try {    factory.setDiskStoreName(dsf.create(regionName).getName());  }  finally {    DirectoryHolder.SET_DIRECTORY_SIZE_IN_BYTES_FOR_TESTING_PURPOSES=false;  }  factory.setDiskSynchronous(true);  factory.setDataPolicy(DataPolicy.PERSISTENT_REPLICATE);  factory.setEvictionAttributes(EvictionAttributes.createLRUEntryAttributes(1,EvictionAction.OVERFLOW_TO_DISK));  RegionAttributes attr=factory.create();  DistributedRegion distRegion=new DistributedRegion(regionName,attr,null,(GemFireCacheImpl)cache,new InternalRegionArguments().setDestroyLockFlag(true).setRecreateFlag(false).setSnapshotInputStream(null).setImageTarget(null));  assertNotNull(distRegion);  ((AbstractLRURegionMap)distRegion.entries)._setLruList((new TestLRUClockHand(distRegion,((AbstractLRURegionMap)distRegion.entries)._getCCHelper())));  ((GemFireCacheImpl)cache).createVMRegion(regionName,attr,new InternalRegionArguments().setInternalMetaRegion(distRegion).setDestroyLockFlag(true).setSnapshotInputStream(null).setImageTarget(null));}  }
class C{  public ExternalEvent nextEvent(){  int responseSize=0;  int msgSize;  int interval;  int from;  int to;  boolean nextBurst=false;  from=this.hostRange[0] + nextFromOffset;  to=this.toHostRange[0] + nextToOffset;  if (to == from) {    to=this.toHostRange[0] + (++nextToOffset);  }  msgSize=drawMessageSize();  MessageCreateEvent mce=new MessageCreateEvent(from,to,getID(),msgSize,responseSize,this.nextEventsTime);  if (to < this.toHostRange[1] - 1) {    this.nextToOffset++;  } else {    if (from < this.hostRange[1] - 1) {      this.nextFromOffset++;      this.nextToOffset=0;    } else {      nextBurst=true;    }  }  if (this.hostRange[0] + nextFromOffset == this.toHostRange[0] + nextToOffset) {    nextToOffset++;    if (nextToOffset >= toHostRange[1]) {      nextBurst=true;    }  }  if (nextBurst) {    interval=drawNextEventTimeDiff();    this.nextEventsTime+=interval;    this.nextFromOffset=0;    this.nextToOffset=0;  }  if (this.msgTime != null && this.nextEventsTime > this.msgTime[1]) {    this.nextEventsTime=Double.MAX_VALUE;  }  return mce;}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT);}  }
class C{  public final void addVariable(Node variable){  if (variables.contains(variable)) {    throw new IllegalArgumentException("Expecting a new variable: " + variable);  }  variables.add(variable);  resize(tetradMatrix.rows(),variables.size());  int col=tetradMatrix.columns() - 1;  for (int i=0; i < tetradMatrix.rows(); i++) {    tetradMatrix.set(i,col,Double.NaN);  }}  }
class C{  public void configureSave(final String moduleName,final VersionBean moduleVersion,final Path path){  this.savedByModuleName=moduleName;  this.savedByModuleVersion=moduleVersion;  this.path=path;}  }
class C{  static public boolean isAllowedToAbortFileTransferSession(FileTransfer fileTransfer) throws RcsPersistentStorageException, RcsGenericException {switch (fileTransfer.getState()) {case STARTED:case QUEUED:case PAUSED:case INITIATING:case ACCEPTING:    return true;default :  return false;}}  }
class C{  public ProcessRequestException(String message,int errorCode,Throwable cause){  super(message,cause);  this.errorCode=errorCode;}  }
class C{  private void testBug71396StatementMultiCheck(Connection testConn,String[] queries,int[] expRowCount) throws SQLException {  if (queries.length != expRowCount.length) {    fail("Bad arguments!");  }  Statement testStmt=testConn.createStatement();  testBug71396StatementMultiCheck(testStmt,queries,expRowCount);  testStmt.close();}  }
class C{  public void handleConfiguration(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  if (mRetainedFragmentManager.firstTimeIn()) {    Log.d(TAG,"First time onCreate() call");    initialize(opsType,instance);  } else {    Log.d(TAG,"Second or subsequent onCreate() call");    mOpsInstance=mRetainedFragmentManager.get(opsType.getSimpleName());    if (mOpsInstance == null)     initialize(opsType,instance); else     mOpsInstance.onConfiguration(instance,false);  }}  }
class C{  public boolean updateAuthIndex(String userName,String indexName){  if (userName == null || userName.equals("") || indexName == null || indexName.equals("")) {    return false;  }  userName=userName.toLowerCase();  indexName=indexName.toLowerCase();  if (userName.equals("root")) {    return false;  }  UserData user=getUser(userName);  if (user == null) {    return false;  }  Set<String> indexFilters=Sets.newCopyOnWriteArraySet();  String[] indexNames=indexName.split(",");  for (  String index : indexNames) {    index=index.trim();    if (index == null || index.equals("")) {      continue;    }    if (index.charAt(0) != '/') {      index="/" + index;    }    if (index.equals("/*")) {      continue;    }    indexFilters.add(index);  }  user.setFilters(indexFilters);  return putUser(user);}  }
class C{  public synchronized void severe(String msg,Object[] params){  LogRecord record=new LogRecord(Level.SEVERE,msg);  record.setParameters(params);  log(record);}  }
class C{  public boolean intersects(double x,double y,double w,double h){  if (npoints <= 0 || !bounds.intersects(x,y,w,h)) {    return false;  }  updateComputingPath();  return closedPath.intersects(x,y,w,h);}  }
class C{  public Stack.Entry top(final String stack) throws IOException {  Stack s=getStack(stack);  if (s == null)   return null;  return s.top();}  }
class C{  @BeforeClass() public static void initClass() throws SQLException {  createTable("ServerPrepareStatementTest","id int not null primary key auto_increment, test boolean");  createTable("ServerPrepareStatementTestt","id int not null primary key auto_increment, test boolean");  createTable("ServerPrepareStatementTestt2","id int not null primary key auto_increment, test boolean");  createTable("ServerPrepareStatementTestCache","id int not null primary key auto_increment, test boolean");  createTable("ServerPrepareStatementCacheSize3","id int not null primary key auto_increment, test boolean");  createTable("preparetestFactionnal","time0 TIME(6) default '22:11:00', timestamp0 timestamp(6), datetime0 datetime(6) ");  createTable("ServerPrepareStatementCacheSize2","id int not null primary key auto_increment, test boolean");  createTable("ServerPrepareStatementCacheSize3","id int not null primary key auto_increment, test blob");  createTable("ServerPrepareStatementParameters","id int, id2 int");  createTable("ServerPrepareStatementCacheSize4","id int not null primary key auto_increment, test LONGBLOB","ROW_FORMAT=COMPRESSED ENGINE=INNODB");  createTable("streamtest2","id int primary key not null, strm text");  createTable("testServerPrepareMeta","id int not null primary key auto_increment, id2 int not null, id3 DEC(4,2), id4 BIGINT UNSIGNED ");  createTable("ServerPrepareStatementSync","id int not null primary key auto_increment, test varchar(1007), tt boolean");}  }
class C{  protected CountDownLatch updateIndicesStats(final ActionListener<IndicesStatsResponse> listener){  final CountDownLatch latch=new CountDownLatch(1);  final IndicesStatsRequest indicesStatsRequest=new IndicesStatsRequest();  indicesStatsRequest.clear();  indicesStatsRequest.store(true);  transportIndicesStatsAction.execute(indicesStatsRequest,new LatchedActionListener<>(listener,latch));  return latch;}  }
class C{  @SideEffect("Support_TestWebServer requires isolation.") public void test_findResource_String() throws Exception {  File tempFile1=File.createTempFile("textFile",".txt");  tempFile1.createNewFile();  tempFile1.deleteOnExit();  File tempFile2=File.createTempFile("jarFile",".jar");  tempFile2.delete();  tempFile2.deleteOnExit();  Support_TestWebServer server=new Support_TestWebServer();  try {    int port=server.initServer();    String tempPath1=tempFile1.getParentFile().getAbsolutePath() + "/";    InputStream is=getClass().getResourceAsStream("/tests/resources/hyts_patch.jar");    Support_Resources.copyLocalFileto(tempFile2,is);    String tempPath2=tempFile2.getAbsolutePath();    String tempPath3="http://localhost:" + port + "/";    URLClassLoader urlLoader=getURLClassLoader(tempPath1,tempPath2);    assertNull("Found inexistant resource",urlLoader.findResource("XXX"));    assertNotNull("Couldn't find resource from directory",urlLoader.findResource(tempFile1.getName()));    assertNotNull("Couldn't find resource from jar",urlLoader.findResource("Blah.txt"));    urlLoader=getURLClassLoader(tempPath1,tempPath2,tempPath3);    assertNotNull("Couldn't find resource from web",urlLoader.findResource("test1"));    assertNull("Found inexistant resource from web",urlLoader.findResource("test3"));  }  finally {    server.close();  }}  }
class C{  protected String doIt() throws Exception {  log.info("doIt - C_Commission_ID=" + p_C_Commission_ID + " - copy to "+ p_C_CommissionTo_ID);  MCommission comFrom=new MCommission(getCtx(),p_C_Commission_ID,get_TrxName());  if (comFrom.get_ID() == 0)   throw new AdempiereUserError("No From Commission");  MCommission comTo=new MCommission(getCtx(),p_C_CommissionTo_ID,get_TrxName());  if (comTo.get_ID() == 0)   throw new AdempiereUserError("No To Commission");  int no=comTo.copyLinesFrom(comFrom);  return "@Copied@: " + no;}  }
class C{  public void addSelectionPath(TreePath path){  if (path != null) {    TreePath[] toAdd=new TreePath[1];    toAdd[0]=path;    addSelectionPaths(toAdd);  }}  }
class C{  protected void handleInterpreterException(InterpreterException ie){  if (userAgent != null) {    Exception ex=ie.getException();    userAgent.displayError((ex == null) ? ie : ex);  }}  }
class C{  public void cleanContainer(Integer ID){  cleanContainer("" + ID);}  }
class C{  protected void finalize(){  if (primaryContext != null) {    dispose();  }}  }
class C{  public SurfaceImage(Object imageSource,Sector sector){  if (imageSource == null) {    String message=Logging.getMessage("nullValue.ImageSource");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (sector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.setImageSource(imageSource,sector);}  }
class C{  public static PrintStream open(File xmlFile) throws IOException {  PrintStream writer=new PrintStream(xmlFile);  writer.println("<server>");  return writer;}  }
class C{  @Override public void onInitializeInterface(){  if (mQwertyKeyboard != null) {    int displayWidth=getMaxWidth();    if (displayWidth == mLastDisplayWidth)     return;    mLastDisplayWidth=displayWidth;  }  mQwertyKeyboard=new LatinKeyboard(this,R.xml.qwerty);  mSymbolsKeyboard=new LatinKeyboard(this,R.xml.symbols);  mSymbolsShiftedKeyboard=new LatinKeyboard(this,R.xml.symbols_shift);}  }
class C{  private LocalDateTime with(LocalDate newDate,LocalTime newTime){  if (date == newDate && time == newTime) {    return this;  }  return new LocalDateTime(newDate,newTime);}  }
class C{  public ExtendedResolver(String[] servers) throws UnknownHostException {  init();  for (int i=0; i < servers.length; i++) {    Resolver r=new SimpleResolver(servers[i]);    r.setTimeout(quantum);    resolvers.add(r);  }}  }
class C{  public void testDataBind() throws Exception {  ObjectMapper m=new ObjectMapper();  JsonNode tree=m.readTree("{ \"name\" : \"Tatu\", \n" + "\"magicNumber\" : 42," + "\"kids\" : [ \"Leo\", \"Lila\", \"Leia\" ] \n"+ "}");  Person tatu=m.treeToValue(tree,Person.class);  assertNotNull(tatu);  assertEquals(42,tatu.magicNumber);  assertEquals("Tatu",tatu.name);  assertNotNull(tatu.kids);  assertEquals(3,tatu.kids.size());  assertEquals("Leo",tatu.kids.get(0));  assertEquals("Lila",tatu.kids.get(1));  assertEquals("Leia",tatu.kids.get(2));}  }
class C{  public boolean isStartNewYear(){  Object oo=get_Value(COLUMNNAME_StartNewYear);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  DirectArrayOfDoublesUnion(final Memory mem,final long seed){  super(new DirectArrayOfDoublesQuickSelectSketch(mem,seed));  mem_=mem;}  }
class C{  public static boolean isEmpty(Map map){  return (map == null || map.isEmpty());}  }
class C{  public void commandFollow(String channel,String parameter){  String user=settings.getString("username");  String target=Helper.toStream(channel);  if (parameter != null && !parameter.isEmpty()) {    target=Helper.toStream(parameter.trim());  }  if (!Helper.validateStream(target)) {    g.printSystem("No valid channel to follow.");    return;  }  if (!Helper.validateStream(user)) {    g.printSystem("No valid username.");    return;  }  api.followChannel(user,target);}  }
class C{  public Builder(){  this.customerPk=null;  this.user=null;  this.token=null;  this.clientId=null;}  }
class C{  private void scheduleAccessibilityEventSender(){  if (mAccessibilityEventSender == null) {    mAccessibilityEventSender=new AccessibilityEventSender();  } else {    removeCallbacks(mAccessibilityEventSender);  }  postDelayed(mAccessibilityEventSender,TIMEOUT_SEND_ACCESSIBILITY_EVENT);}  }
class C{  public CollectionNotFoundException(String message){  super(message);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  private String attachFooterToHTML(String content) throws MessagingException, IOException {  Matcher matcher=BODY_CLOSING_TAG.matcher(content);  if (!matcher.find()) {    return content + getFooterHTML();  }  int insertionIndex=matcher.start(matcher.groupCount() - 1);  return new StringBuilder().append(content.substring(0,insertionIndex)).append(getFooterHTML()).append(content.substring(insertionIndex,content.length())).toString();}  }
class C{  public double max(){  double result=-Double.MAX_VALUE;  for (int i=0; i < size; ++i)   if (vector[i] > result)   result=vector[i];  return result;}  }
class C{  public final TXStateProxy internalSuspend(){  TXStateProxy result=getTXState();  if (result != null) {    result.suspend();    setTXState(null);  }  return result;}  }
class C{  public void mark(int readlimit){  return;}  }
class C{  public void characters(final char chars[],final int start,final int length) throws org.xml.sax.SAXException {  if (length == 0 || (m_inEntityRef && !m_expandDTDEntities))   return;  m_docIsEmpty=false;  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  } else   if (m_needToCallStartDocument) {    startDocumentInternal();  }  if (m_cdataStartCalled || m_elemContext.m_isCdataSection) {    cdata(chars,start,length);    return;  }  if (m_cdataTagOpen)   closeCDATA();  if (m_disableOutputEscapingStates.peekOrFalse() || (!m_escaping)) {    charactersRaw(chars,start,length);    if (m_tracer != null)     super.fireCharEvent(chars,start,length);    return;  }  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  try {    int i;    int startClean;    final int end=start + length;    int lastDirtyCharProcessed=start - 1;    final Writer writer=m_writer;    boolean isAllWhitespace=true;    i=start;    while (i < end && isAllWhitespace) {      char ch1=chars[i];      if (m_charInfo.shouldMapTextChar(ch1)) {        writeOutCleanChars(chars,i,lastDirtyCharProcessed);        String outputStringForChar=m_charInfo.getOutputStringForChar(ch1);        writer.write(outputStringForChar);        isAllWhitespace=false;        lastDirtyCharProcessed=i;        i++;      } else {switch (ch1) {case CharInfo.S_SPACE:          i++;        break;case CharInfo.S_LINEFEED:      lastDirtyCharProcessed=processLineFeed(chars,i,lastDirtyCharProcessed,writer);    i++;  break;case CharInfo.S_CARRIAGERETURN:writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#13;");lastDirtyCharProcessed=i;i++;break;case CharInfo.S_HORIZONAL_TAB:i++;break;default :isAllWhitespace=false;break;}}}if (i < end || !isAllWhitespace) m_ispreserve=true;for (; i < end; i++) {char ch=chars[i];if (m_charInfo.shouldMapTextChar(ch)) {writeOutCleanChars(chars,i,lastDirtyCharProcessed);String outputStringForChar=m_charInfo.getOutputStringForChar(ch);writer.write(outputStringForChar);lastDirtyCharProcessed=i;} else {if (ch <= 0x1F) {switch (ch) {case CharInfo.S_HORIZONAL_TAB:break;case CharInfo.S_LINEFEED:lastDirtyCharProcessed=processLineFeed(chars,i,lastDirtyCharProcessed,writer);break;case CharInfo.S_CARRIAGERETURN:writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#13;");lastDirtyCharProcessed=i;break;default :writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');lastDirtyCharProcessed=i;break;}} else if (ch < 0x7F) {} else if (ch <= 0x9F) {writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');lastDirtyCharProcessed=i;} else if (ch == CharInfo.S_LINE_SEPARATOR) {writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#8232;");lastDirtyCharProcessed=i;} else if (m_encodingInfo.isInEncoding(ch)) {} else {writeOutCleanChars(chars,i,lastDirtyCharProcessed);writer.write("&#");writer.write(Integer.toString(ch));writer.write(';');lastDirtyCharProcessed=i;}}}startClean=lastDirtyCharProcessed + 1;if (i > startClean) {int lengthClean=i - startClean;m_writer.write(chars,startClean,lengthClean);}m_isprevtext=true;} catch (IOException e) {throw new SAXException(e);}if (m_tracer != null) super.fireCharEvent(chars,start,length);}  }
class C{  private void restoreAssociationUnregistration(BackupAssociation backupAssoc,int regLevel){  try {    String curMimeType=backupAssoc.getCurMimeType();    String curFileExt=backupAssoc.getCurFileExt();    if (backupAssoc.getCurMimeTypeExisted()) {      WinRegistryUtil.addMimeType(curMimeType,regLevel);      String backupFileExt=backupAssoc.getBackupFileExt();      if (backupFileExt != null) {        WinRegistryUtil.setFileExtByMimeType(backupFileExt,curMimeType,regLevel);      }    }    if (backupAssoc.getCurFileExtExisted()) {      WinRegistryUtil.addFileExt(curFileExt,regLevel);      String backupMimeType=backupAssoc.getBackupMimeType();      String backupClassID=backupAssoc.getBackupClassID();      if (backupMimeType != null) {        WinRegistryUtil.setMimeTypeByFileExt(backupMimeType,curFileExt,regLevel);      }      if (backupClassID != null) {        WinRegistryUtil.setClassIDByFileExt(curFileExt,backupClassID,regLevel);      }    }  } catch (  RegisterFailedException e) {  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LookupPaintScale)) {    return false;  }  LookupPaintScale that=(LookupPaintScale)obj;  if (this.lowerBound != that.lowerBound) {    return false;  }  if (this.upperBound != that.upperBound) {    return false;  }  if (!PaintUtilities.equal(this.defaultPaint,that.defaultPaint)) {    return false;  }  if (!this.lookupTable.equals(that.lookupTable)) {    return false;  }  return true;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response,Component component) throws ServletException {  PrintWriter writer=new FilterPrintWriter(response);  try {    if (!doGet(request,response,writer,component)) {      ReqRspUtil.setContentType(response,"text/html; charset=utf-8");      writer.println("<html><h1>" + lucee.runtime.config.Constants.NAME + " Webservice</h1>");      writer.println(Messages.getMessage("reachedServlet00"));      writer.println("<p>" + Messages.getMessage("transportName00","<b>http</b>"));      writer.println("</html>");    }  } catch (  Throwable e) {    if (e instanceof InvocationTargetException)     e=((InvocationTargetException)e).getTargetException();    if (e instanceof PageException)     throw new PageServletException((PageException)e);    throw new ServletException(e);  }}  }
class C{  private void addDeclaredSymbols(StringSet result,NodeRepresentation node){  Vector<NodeRepresentation> parentVec=node.getParentVector();  if (parentVec == null) {    parentVec=this.state.assumeReps;  }  int i=0;  while ((i < parentVec.size()) && (parentVec.elementAt(i) != node)) {    NodeRepresentation parent=parentVec.elementAt(i);    if (parent.nodeType == NodeRepresentation.NEW_NODE) {      result.add(parent.newId);    }    i++;  }  if (parentVec != this.state.assumeReps) {    if (node.parentNode != null) {      addDeclaredSymbols(result,node.parentNode);    } else {      System.out.println("Bug found in NewDecomposeProofHandler.addDeclaredSymbols.");    }  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case NODE_ID:    return isSetNodeId();case DOMAIN_ID:  return isSetDomainId();case HOSTNAME:return isSetHostname();case PORT:return isSetPort();}throw new IllegalStateException();}  }
class C{  public static void generateRPClass(){  createRPClass();}  }
class C{  public void writeDoubleArray(double[] array,boolean append){  try {    DataOutput dos;    if (bigEndian) {      dos=new DataOutputStream(stream);    } else {      dos=new LEDataOutputStream(stream);    }    for (int i=0; i < array.length; i++) {      dos.writeDouble(array[i]);    }    stream.close();  } catch (  IOException e) {    throw new IllegalArgumentException("InputStream is unwritable : " + e.toString());  }}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.Plane.defaultColor",StringUtil.colorToString(defaultColor));  properties.setProperty("MapElement.Plane.defaultSize",Float.toString(defaultSize));  properties.setProperty("MapElement.Plane.defaultTriangleVisible",Boolean.toString(defaultTriangleVisible));  properties.setProperty("MapElement.Plane.strikeAsCompassBearing",Boolean.toString(strikeAsCompassBearing));  properties.setProperty("MapElement.Plane.defaultLabelVisible",Boolean.toString(defaultLabelVisible));  properties.setProperty("MapElement.Plane.defaultColorMap",defaultColorMap);}  }
class C{  protected GitlabUrl(){}  }
class C{  private static void usageError(String errorMsg) throws AdeUsageException {  System.out.flush();  System.err.println("Usage:");  System.err.println("\tAdeUtilMain ");  System.err.println();  System.err.println("-v returns the version of the ADE code");  System.err.println();  System.err.println("-b returns the version of the database schema in the database pointeed to by ADE in flowlayout.xml");  System.err.println();  System.err.println("-d prints a text summary of the model stored in the file specified");  System.err.println();  System.err.println("-f checks the flowlayout.xml file specified against the xsd file");  System.err.println();  System.err.println("-h returns help information");  System.err.flush();  if (errorMsg != "")   throw new AdeUsageException(errorMsg);}  }
class C{  public TernaryInstruction(OperationTypes op,byte in1,double scalar_in2,byte in3,byte out,long outputDim1,long outputDim2,String istr){  super(null,out);  mrtype=MRINSTRUCTION_TYPE.Ternary;  _op=op;  input1=in1;  scalar_input2=scalar_in2;  input3=in3;  _outputDim1=outputDim1;  _outputDim2=outputDim2;  instString=istr;}  }
class C{  public void decTempQueueSize(){  this.stats.incInt(eventTmpQueueSizeId,-1);}  }
class C{  public static int intersectCubic(double x1,double y1,double cx1,double cy1,double cx2,double cy2,double x2,double y2,double rx1,double ry1,double rx2,double ry2){  if ((rx2 < x1 && rx2 < cx1 && rx2 < cx2 && rx2 < x2) || (rx1 > x1 && rx1 > cx1 && rx1 > cx2 && rx1 > x2) || (ry1 > y1 && ry1 > cy1 && ry1 > cy2 && ry1 > y2)) {    return 0;  }  if (ry2 < y1 && ry2 < cy1 && ry2 < cy2 && ry2 < y2 && rx1 != x1 && rx1 != x2) {    if (x1 < x2) {      return x1 < rx1 && rx1 < x2 ? 1 : 0;    }    return x2 < rx1 && rx1 < x1 ? -1 : 0;  }  CubicCurve c=new CubicCurve(x1,y1,cx1,cy1,cx2,cy2,x2,y2);  double px1=rx1 - x1;  double py1=ry1 - y1;  double px2=rx2 - x1;  double py2=ry2 - y1;  double res1[]=new double[3];  double res2[]=new double[3];  int rc1=c.solvePoint(res1,px1);  int rc2=c.solvePoint(res2,px2);  if (rc1 == 0 && rc2 == 0) {    return 0;  }  double minX=px1 - DELTA;  double maxX=px2 + DELTA;  double bound[]=new double[40];  int bc=0;  bc=c.addBound(bound,bc,res1,rc1,minX,maxX,false,0);  bc=c.addBound(bound,bc,res2,rc2,minX,maxX,false,1);  rc2=c.solveExtremX(res2);  bc=c.addBound(bound,bc,res2,rc2,minX,maxX,true,2);  rc2=c.solveExtremY(res2);  bc=c.addBound(bound,bc,res2,rc2,minX,maxX,true,4);  if (rx1 < x1 && x1 < rx2) {    bound[bc++]=0.0;    bound[bc++]=0.0;    bound[bc++]=0.0;    bound[bc++]=6;  }  if (rx1 < x2 && x2 < rx2) {    bound[bc++]=1.0;    bound[bc++]=c.ax;    bound[bc++]=c.ay;    bound[bc++]=7;  }  int cross=crossBound(bound,bc,py1,py2);  if (cross != UNKNOWN) {    return cross;  }  return c.cross(res1,rc1,py1,py2);}  }
class C{  public String toShortString(){  StringBuilder sb=new StringBuilder(64);  toShortString(sb);  return sb.toString();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.341 -0500",hash_original_method="E1E473BD4A5E19C1B1699A01EEA95F9A",hash_generated_method="9454753F528D595880A1AA56F6EBAA6D") private SAXParseException makeException(String message){  if (locator != null) {    return new SAXParseException(message,locator);  } else {    return new SAXParseException(message,null,null,-1,-1);  }}  }
class C{  @Override public void acceptInstance(InstanceEvent e){  if (m_log == null) {    System.err.println("Log is null");  }  m_incrementalEvent=e;  handleIncrementalEvent();}  }
class C{  final public void println(boolean v){  try {    _out.println(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public ColumnToColumnMove(int from,int to,int num){  this.fromCol=from;  this.toCol=to;  this.num=num;}  }
class C{  public static Map<String,Object> convertDocumentStreamToStream(DispatchContext dctx,Map<String,? extends Object> context){  XMultiComponentFactory xmulticomponentfactory=null;  String stringUrl="file:///" + context.get("filenameFrom");  String stringConvertedFile="file:///" + context.get("filenameTo");  String inputMimeType=(String)context.get("inputMimeType");  String outputMimeType=(String)context.get("outputMimeType");  String oooHost=(String)context.get("oooHost");  String oooPort=(String)context.get("oooPort");  try {    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);    File inputFile=new File(stringUrl);    long fileSize=inputFile.length();    FileInputStream fis=new FileInputStream(inputFile);    ByteArrayOutputStream baos=new ByteArrayOutputStream((int)fileSize);    int c;    while ((c=fis.read()) != -1) {      baos.write(c);    }    OpenOfficeByteArrayInputStream oobais=new OpenOfficeByteArrayInputStream(baos.toByteArray());    OpenOfficeByteArrayOutputStream oobaos=OpenOfficeWorker.convertOODocByteStreamToByteStream(xmulticomponentfactory,oobais,inputMimeType,outputMimeType);    FileOutputStream fos=new FileOutputStream(stringConvertedFile);    fos.write(oobaos.toByteArray());    fos.close();    fis.close();    oobais.close();    oobaos.close();    Map results=ServiceUtil.returnSuccess();    return results;  } catch (  IOException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }}  }
class C{  public void round(int precision){  boolean dirty=false;  m_precision=precision;  BigDecimal min=getMinQty();  if (min.scale() > m_precision) {    setMinQty(min.setScale(m_precision,BigDecimal.ROUND_HALF_UP));    dirty=true;  }  BigDecimal qty=getQty();  if (qty.scale() > m_precision) {    setQty(qty.setScale(m_precision,BigDecimal.ROUND_HALF_UP));    dirty=true;  }  if (dirty)   save();}  }
class C{  void nextFrame(){  SwingUtilities.invokeLater(nextFrameRunner);}  }
class C{  public T caseS_Species(S_Species object){  return null;}  }
class C{  @Override public NonVolatileMemAllocator disableActiveGC(){  m_activegc=false;  return this;}  }
class C{  public void testModPowPosExp(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75,48,-7};  byte eBytes[]={27,-15,65,39};  byte mBytes[]={-128,2,3,4,5};  int aSign=1;  int eSign=1;  int mSign=1;  byte rBytes[]={113,100,-84,-28,-85};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger exp=new BigInteger(eSign,eBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  BigInteger result=aNumber.modPow(exp,modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static String toString(long[] v){  if (v == null) {    return "null";  }  final int mag=magnitude(v);  if (mag == 0) {    return "0";  }  char[] digits=new char[mag];  int pos=mag - 1;  outer:   for (int w=0; w < v.length; w++) {    long f=1L;    for (int i=0; i < Long.SIZE; i++) {      digits[pos]=((v[w] & f) == 0) ? '0' : '1';      f<<=1;      --pos;      if (pos < 0) {        break outer;      }    }  }  for (; pos >= 0; --pos) {    digits[pos]='0';  }  return new String(digits);}  }
class C{  public void addUniqueKeyConstraint(String name,String sourceField){  UniqueKeyConstraint uniqueKey=new UniqueKeyConstraint(name,sourceField);  addUniqueKeyConstraint(uniqueKey);}  }
class C{  public void decorate(World world,ChunkGeneratorBetweenlands generator,Random rand,int x,int z){  this.x=x;  this.z=z;  this.y=world.getHeight(new BlockPos(x,0,z)).getY();  this.seaGroundY=this.y;  if (this.y <= WorldProviderBetweenlands.LAYER_HEIGHT && world.getBlockState(new BlockPos(this.x,this.y,this.z)).getMaterial().isLiquid()) {    MutableBlockPos offsetPos=new MutableBlockPos();    for (int oy=this.y; oy > 0; oy--) {      offsetPos.setPos(this.x,oy,this.z);      if (!world.getBlockState(offsetPos).getMaterial().isLiquid()) {        this.seaGroundY=oy;        break;      }    }  }  this.rand=rand;  this.world=world;  this.generator=generator;  this.generateOres();  this.generate(null);  this.generate(2,null);  this.generate(120,null);}  }
class C{  private void sendJAR(Connection c) throws IOException {  File f=((JobClassLoader)a.getClass().getClassLoader()).file;  Logger.debug(getClass().getName(),"sending " + f);  if (f.isFile()) {    c.oos.writeInt((int)f.length());    c.oos.flush();    InputStream jaris=new FileInputStream(f);    byte[] buff=new byte[1000];    int n=jaris.read(buff);    while (n != -1) {      c.oos.write(buff,0,n);      n=jaris.read(buff);    }    c.oos.flush();    jaris.close();  } else {    c.oos.writeInt(SENDING_DIR);    c.oos.writeObject(f);    c.oos.flush();  }  c.ois.readByte();  Logger.debug(getClass().getName(),"done sending " + f);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.341 -0500",hash_original_method="B69FF22D5176CDABC95151E4DBF25303",hash_generated_method="864F07A78B4E136B5334492F1D2210E8") public static long parseDate(String dateString){  return HttpDateTime.parse(dateString);}  }
class C{  public double[] IHStoRGB(double[] ihs){  double[] ret=new double[3];  double i, h, s;  double r, g, b;  i=ihs[0];  h=ihs[1];  s=ihs[2];  if (h <= 1) {    r=i * (1 + 2 * s - 3 * s * h) / 3;    g=i * (1 - s + 3 * s * h) / 3;    b=i * (1 - s) / 3;  } else   if (h <= 2) {    r=i * (1 - s) / 3;    g=i * (1 + 2 * s - 3 * s * (h - 1)) / 3;    b=i * (1 - s + 3 * s * (h - 1)) / 3;  } else {    r=i * (1 - s + 3 * s * (h - 2)) / 3;    g=i * (1 - s) / 3;    b=i * (1 + 2 * s - 3 * s * (h - 2)) / 3;  }  ret[0]=r;  ret[1]=g;  ret[2]=b;  return ret;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  FBWorkaroundStringField(FieldDescriptor fieldDescriptor,FieldDataProvider dataProvider,int requiredType) throws SQLException {  super(fieldDescriptor,dataProvider,requiredType);}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  protected AsyncHttpRequest newAsyncHttpRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  return new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler);}  }
class C{  public boolean canPace(){  return false;}  }
class C{  static String exceptionMessagesPath(Locale locale){  return "ExceptionMessages_" + locale.toString() + ".properties";}  }
class C{  private void appendToBuf(char[] ch,int start,int end){  if (start == end) {    return;  }  int neededBufLen=pos + (end - start);  if (neededBufLen > buf.length) {    char[] newBuf=new char[neededBufLen];    System.arraycopy(buf,0,newBuf,0,pos);    if (bufHolder == null) {      bufHolder=buf;    }    buf=newBuf;  }  System.arraycopy(ch,start,buf,pos,end - start);  pos+=(end - start);}  }
class C{  String writeToNamedTmpFile(String filename,Iterable<String> data) throws IOException {  return writeToNamedTmpFile(filename,FluentIterable.from(data).toArray(String.class));}  }
class C{  @Override public void onModuleLoad(){  IDEInjector injector=GWT.create(IDEInjector.class);  @SuppressWarnings("unused") BootstrapController bootstrap=injector.getBootstrapController();}  }
class C{  private void insertCallView(String avatarUrl){  ImageView avatarView=(ImageView)CallViewActivity.this.findViewById(R.id.call_other_member);  avatarView.setImageResource(R.drawable.ic_contact_picture_holo_light);  if (!TextUtils.isEmpty(avatarUrl)) {    int size=CallViewActivity.this.getResources().getDimensionPixelSize(R.dimen.member_list_avatar_size);    mSession.getMediasCache().loadAvatarThumbnail(mSession.getHomeserverConfig(),avatarView,avatarUrl,size);  }  RelativeLayout layout=(RelativeLayout)CallViewActivity.this.findViewById(R.id.call_layout);  RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT);  params.addRule(RelativeLayout.ALIGN_PARENT_LEFT,RelativeLayout.TRUE);  params.addRule(RelativeLayout.ALIGN_PARENT_TOP,RelativeLayout.TRUE);  layout.addView(mCallView,1,params);  mCall.setVisibility(View.GONE);}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  @ViewDebug.ExportedProperty(category="progress") public synchronized boolean isIndeterminate(){  return mIndeterminate;}  }
class C{  public String generateLocalUserName(RemoteCandidate remoteCandidate,LocalCandidate localCandidate){  return generateUserName(remoteCandidate,localCandidate);}  }
class C{  public void refreshDisplayables(){  repaint();}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  if (item.getItemId() == R.id.action_walkthrough) {    Intent intent=new Intent(this,OnboardingActivity.class);    intent.putExtra(OnboardingActivity.COMING_FROM_OVERFLOW,true);    startActivity(intent);    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  public void read(ByteCodeParser in) throws IOException {  int length=in.readInt();  if (length != 2)   throw new IOException("expected length of 2 at " + length);  int code=in.readShort();  _signature=in.getUTF8(code);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  if (guard != null) {    guard.checkGuard(object);  }  out.defaultWriteObject();}  }
class C{  public void add(int what,DownloadRequest downloadRequest,DownloadListener downloadListener){  if (downloadRequest.inQueue())   Logger.w("This request has been in the queue"); else {    downloadRequest.setQueue(mUnFinishQueue);    downloadRequest.onPreResponse(what,downloadListener);    downloadRequest.setSequence(mInteger.incrementAndGet());    mUnFinishQueue.add(downloadRequest);    mDownloadQueue.add(downloadRequest);  }}  }
class C{  static void checkCompatible(FieldInfo fieldInfo){  if (fieldInfo.getDocValuesType() != DocValuesType.NONE && fieldInfo.getDocValuesType() != TYPE.docValuesType()) {    throw new IllegalArgumentException("field=\"" + fieldInfo.name + "\" was indexed with docValuesType="+ fieldInfo.getDocValuesType()+ " but this type has docValuesType="+ TYPE.docValuesType()+ ", is the field really a Geo3DDocValuesField?");  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean hasGivenName(){  return super.hasElement(GivenName.KEY);}  }
class C{  public boolean isClassSuperclassOf(SootClass parent,SootClass possibleChild){  parent.checkLevel(SootClass.HIERARCHY);  possibleChild.checkLevel(SootClass.HIERARCHY);  return getSubclassesOf(parent).contains(possibleChild);}  }
class C{  public String toString(){  return (toString(MM,"mm"));}  }
class C{  private static boolean addRestriction(Object restriction,JSONObject restrictions,Emoticon.Builder builder){  try {    String key=(String)restriction;    if (key.equals("channels")) {      for (      Object chan : (JSONArray)restrictions.get(restriction)) {        if (chan instanceof String) {          builder.addStreamRestriction((String)chan);        }      }      return true;    } else     if (key.equals("emoticonSet")) {      Object emoticon_set=restrictions.get(key);      if (emoticon_set != null) {        if (emoticon_set instanceof String) {          return false;        } else {          builder.setEmoteset(((Number)emoticon_set).intValue());          return true;        }      }    } else {      Object value=restrictions.get(restriction);      if (value == null || ((JSONArray)value).isEmpty()) {        return true;      }    }  } catch (  NullPointerException|ClassCastException ex) {  }  return false;}  }
class C{  public static void close(Object o){  try {    o.getClass().getMethod("close").invoke(o);  } catch (  Throwable t) {  }}  }
class C{  default String toDebugString(){  StringBuilder sb=new StringBuilder();  sb.append("State of the: ").append(this.getClass().getSimpleName()).append("\n");  for (Class cls=this.getClass(); cls != null; cls=cls.getSuperclass()) {    for (    Field f : cls.getDeclaredFields()) {      try {        f.setAccessible(true);        sb.append(f.getName()).append(" : ").append(f.get(this)).append("\n");      } catch (      IllegalAccessException e) {      }    }  }  return sb.toString();}  }
class C{  public static char valueAsChar(String key,char defaultVal){  String val=valueFor(key);  if (val == null) {    return defaultVal;  }  if (val.length() > 1) {    XRLog.exception("Property '" + key + "' was requested as a character. The value of '"+ val+ "' is too long to be a char. Returning only the first character.");  }  return val.charAt(0);}  }
class C{  public void addEventChargingFunctionAddress(String ecfAddress) throws ParseException {  if (ecfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setEventChargingFunctionAddress(), the ecfAddress parameter is null.");  this.parameters.set(ParameterNamesIms.ECF,ecfAddress);}  }
class C{  public LocalDateTime withDurationAdded(ReadableDuration durationToAdd,int scalar){  if (durationToAdd == null || scalar == 0) {    return this;  }  long instant=getChronology().add(getLocalMillis(),durationToAdd.getMillis(),scalar);  return withLocalMillis(instant);}  }
class C{  public static String postSync(String url,List<StrParam> strParams){  return postSync(String.class,url,null,Util.listToParams(strParams,StrParam.class));}  }
class C{  protected MimeMessage createEmptyMessage() throws MessagingException {  MimeMessage messageOut=new MimeMessage(getSession());  @SuppressWarnings("unchecked") Enumeration<String> headersInEnum=getMessageIn().getAllHeaderLines();  while (headersInEnum.hasMoreElements())   messageOut.addHeaderLine(headersInEnum.nextElement());  messageOut.setSubject(getMessageIn().getSubject());  messageOut.setText("");  messageOut.saveChanges();  return messageOut;}  }
class C{  public void createDatabaseEntitiesForBusinessObjectDataSearchTesting(){  businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.PARTITION_VALUE,AbstractServiceTest.NO_SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);  businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE_2,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.PARTITION_VALUE,AbstractServiceTest.NO_SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.INVALID);  businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE_2,AbstractServiceTest.BDEF_NAME_2,AbstractServiceTest.FORMAT_USAGE_CODE_2,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION_2,AbstractServiceTest.PARTITION_VALUE,AbstractServiceTest.NO_SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.INVALID);  businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE_2,AbstractServiceTest.BDEF_NAME_2,AbstractServiceTest.FORMAT_USAGE_CODE_2,AbstractServiceTest.FORMAT_FILE_TYPE_CODE_2,AbstractServiceTest.FORMAT_VERSION_2,AbstractServiceTest.PARTITION_VALUE,AbstractServiceTest.NO_SUBPARTITION_VALUES,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);}  }
class C{  public BasicI18n(Locale loc){  this.loc=loc;}  }
class C{  public static Complex divide(double a,Complex c){  double scale=c.real * c.real + c.imag * c.imag;  return new Complex(c.real / scale,-c.imag / scale);}  }
class C{  @SuppressWarnings("unchecked") public synchronized E firstElement(){  if (elementCount > 0) {    return (E)elementData[0];  }  throw new NoSuchElementException();}  }
class C{  public void pointerHoverPressed(int[] x,int[] y){}  }
class C{  public boolean hasReturn1y(){  return getReturn1y() != null;}  }
class C{  private boolean dropClient(int clientID){  boolean result=false;  if (clientID == s_parameters.SYSTEMCLIENTID)   return result;  ArrayList<String> tablesToPreserve=new ArrayList<String>();  Collections.addAll(tablesToPreserve,"C_UOM","C_UOM_CONVERSION","C_REGION");  String clientName=m_target.getSystemClients().get(clientID);  s_logger.log(Level.FINE,"dropClient",new Object[]{m_objectType,clientName,m_direction});  Savepoint sp=m_target.setSavepoint(clientName);  Vector<String> v=new Vector<String>(m_targetMap.keySet());  java.util.Collections.sort(v);  for (Iterator<String> it=v.iterator(); it.hasNext(); ) {    String key=it.next();    DBObject obj=m_targetMap.get(key);    HashMap<Integer,DBObjectDefinition> columns=obj.getContents();    for (Iterator<Integer> it2=columns.keySet().iterator(); it2.hasNext(); ) {      int key2=it2.next();      DBObject_Table_Column col=(DBObject_Table_Column)columns.get(key2);      if (col.getName().equalsIgnoreCase("AD_Client_ID")) {        String vendor=m_target.getVendor();        String catalog=m_target.getCatalog();        String schema=m_target.getSchema();        String table=col.getTable();        String whereClause=new StringBuffer("AD_Client_ID = ").append(clientID).toString();        Statement stmt=m_target.setStatement();        String sqlCommand=s_dbEngine.sql_deleteByCondition(vendor,catalog,schema,table,whereClause);        Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);        if (sqlResult != null) {          logDropDetail(sqlResult,null);          result=true;        }        m_target.releaseStatement(stmt);      }    }  }  m_target.releaseSavepoint(sp);  return result;}  }
class C{  public ServerLocation(){}  }
class C{  public SpherePortrayal3D(Image image){  this(image,1f);}  }
class C{  public short[] lookupPixel(short[] src,short[] dst){  if (dst == null) {    dst=new short[src.length];  }  if (numComponents == 1) {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xffff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=data[0][s];    }  } else {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xffff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=data[i][s];    }  }  return dst;}  }
class C{  public void addEventListener(IFileUploadListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Add a file upload event listener");  }  try {synchronized (lock) {      mBroadcaster.addEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentfragmentnodevalue.class,args);}  }
class C{  public void testXformSubmitFailed_HidesSubmissionDialog(){  mController.init();  mFakeGlobalEventBus.post(new SubmitXformFailedEvent(SubmitXformFailedEvent.Reason.UNKNOWN));  verify(mMockUi).showFormSubmissionDialog(false);}  }
class C{  private static boolean[] createSafeOctets(String safeChars){  int maxChar=-1;  char[] safeCharArray=safeChars.toCharArray();  for (  char c : safeCharArray) {    maxChar=Math.max(c,maxChar);  }  boolean[] octets=new boolean[maxChar + 1];  for (  char c : safeCharArray) {    octets[c]=true;  }  return octets;}  }
class C{  public static void testSerializedMemory(){  Memory memory=new SerializedMemory();  memory.save();  System.out.println(memory.getLongTermMemory());  memory=new SerializedMemory();  memory.restore();  System.out.println(memory.getLongTermMemory());}  }
class C{  public TOMMessage(int sender,int session,int sequence,byte[] content,int view,TOMMessageType type){  this(sender,session,sequence,-1,content,view,type);}  }
class C{  public static boolean canSee(IGame game,Entity ae,Targetable target){  return canSee(game,ae,target,true,null,null);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case NODE_ID:    return isSetNodeId();case DOMAIN_ID:  return isSetDomainId();case HOSTNAME:return isSetHostname();case PORT:return isSetPort();}throw new IllegalStateException();}  }
class C{  @Override public void onServiceReady(){  startMonitoringRegisteredBeaconUuids();}  }
class C{  public GPOSRecord(Name name,int dclass,long ttl,String longitude,String latitude,String altitude){  super(name,Type.GPOS,dclass,ttl);  try {    this.longitude=byteArrayFromString(longitude);    this.latitude=byteArrayFromString(latitude);    validate(getLongitude(),getLatitude());    this.altitude=byteArrayFromString(altitude);  } catch (  TextParseException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  static <T>Collection<T> cast(Iterable<T> iterable){  return (Collection<T>)iterable;}  }
class C{  void showInterstitialNotification(){  NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  CharSequence from="Dianne";  CharSequence message;switch ((new Random().nextInt()) % 3) {case 0:    message="i am ready for some dinner";  break;case 1:message="how about thai down the block?";break;default :message="meet u soon. dont b late!";break;}Intent intent=new Intent(this,IncomingMessageInterstitial.class);intent.putExtra(IncomingMessageView.KEY_FROM,from);intent.putExtra(IncomingMessageView.KEY_MESSAGE,message);intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);PendingIntent contentIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_CANCEL_CURRENT);String tickerText=getString(R.string.imcoming_message_ticker_text,message);Notification notif=new Notification(R.drawable.stat_sample,tickerText,System.currentTimeMillis());notif.setLatestEventInfo(this,from,message,contentIntent);notif.defaults=Notification.DEFAULT_ALL;nm.notify(R.string.imcoming_message_ticker_text,notif);}  }
class C{  private NioDatagramAcceptor(IoSessionConfig sessionConfig,Executor executor){  super(sessionConfig,executor);  try {    init();    selectable=true;  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeIoException("Failed to initialize.",e);  } finally {    if (!selectable) {      try {        destroy();      } catch (      Exception e) {        ExceptionMonitor.getInstance().exceptionCaught(e);      }    }  }}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public static boolean shouldConsume(int keyCode){  return (keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT || keyCode == KeyEvent.KEYCODE_DPAD_UP || keyCode == KeyEvent.KEYCODE_DPAD_DOWN || keyCode == KeyEvent.KEYCODE_MOVE_HOME || keyCode == KeyEvent.KEYCODE_MOVE_END || keyCode == KeyEvent.KEYCODE_PAGE_UP || keyCode == KeyEvent.KEYCODE_PAGE_DOWN || keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL);}  }
class C{  public Element append(String name,String value){  Element child=document.createElementNS(namespace,name);  child.setTextContent(value);  element.appendChild(child);  return child;}  }
class C{  public static void tryOpenIndex(Path indexLocation) throws IOException {  try (Directory dir=new SimpleFSDirectory(indexLocation)){    failIfCorrupted(dir,new ShardId("",1));    Lucene.readSegmentInfos(dir);  } }  }
class C{  void zrot(double theta){  theta*=(pi / 180);  double ct=Math.cos(theta);  double st=Math.sin(theta);  float Nyx=(float)(yx * ct + xx * st);  float Nyy=(float)(yy * ct + xy * st);  float Nyz=(float)(yz * ct + xz * st);  float Nyo=(float)(yo * ct + xo * st);  float Nxx=(float)(xx * ct - yx * st);  float Nxy=(float)(xy * ct - yy * st);  float Nxz=(float)(xz * ct - yz * st);  float Nxo=(float)(xo * ct - yo * st);  yo=Nyo;  yx=Nyx;  yy=Nyy;  yz=Nyz;  xo=Nxo;  xx=Nxx;  xy=Nxy;  xz=Nxz;}  }
class C{  public DexFile(DexOptions dexOptions){  this.dexOptions=dexOptions;  header=new HeaderSection(this);  typeLists=new MixedItemSection(null,this,4,SortType.NONE);  wordData=new MixedItemSection("word_data",this,4,SortType.TYPE);  stringData=new MixedItemSection("string_data",this,1,SortType.INSTANCE);  classData=new MixedItemSection(null,this,1,SortType.NONE);  byteData=new MixedItemSection("byte_data",this,1,SortType.TYPE);  stringIds=new StringIdsSection(this);  typeIds=new TypeIdsSection(this);  protoIds=new ProtoIdsSection(this);  fieldIds=new FieldIdsSection(this);  methodIds=new MethodIdsSection(this);  classDefs=new ClassDefsSection(this);  map=new MixedItemSection("map",this,4,SortType.NONE);  sections=new Section[]{header,stringIds,typeIds,protoIds,fieldIds,methodIds,classDefs,wordData,typeLists,stringData,byteData,classData,map};  fileSize=-1;  dumpWidth=79;}  }
class C{  public boolean isValidName(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  return true;}  }
class C{  public Collection<?> toCollection(int column) throws SQLException {  int nRows=numRows;  Vector<Object> vec=new Vector<>(nRows);  CachedRowSetImpl crsTemp;  crsTemp=(CachedRowSetImpl)this.createCopy();  while (nRows != 0) {    crsTemp.next();    vec.add(crsTemp.getObject(column));    nRows--;  }  return (Collection)vec;}  }
class C{  private static int GetShortField(JNIEnvironment env,int objJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetShortField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getShortValueUnchecked(obj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  @Override public void messageSent(IoSession session,Object message) throws Exception {  MessageHandler<Object> handler=findSentMessageHandler(message.getClass());  if (handler != null) {    handler.handleMessage(session,message);  } else {    throw new UnknownMessageTypeException("No handler found for message type: " + message.getClass().getSimpleName());  }}  }
class C{  protected String generateFileForFrameworks(final Collection<Framework> fws,final Width arch) throws Exception {  File tempfile=File.createTempFile("JObjC-SORBB-" + arch + "-",".mm");  PrintWriter out=new PrintWriter(new FileWriter(tempfile));  out.println("#include<iostream>");  for (  Framework fw : fws)   printHeaderLines(fw,arch,out);  out.println("int main(int argc, char** argv){");  for (  Framework fw : fws)   printStructInfos(fw,arch,out);  out.println("\treturn 0;");  out.println("}");  out.close();  return tempfile.getAbsolutePath();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.468 -0500",hash_original_method="FA6574139DFC76BE59E80FCDD5F143D2",hash_generated_method="714C647AB4A599AF52FFAB6E11C1DD6A") public void fireIndexedPropertyChange(String propertyName,int index,boolean oldValue,boolean newValue){  if (oldValue != newValue) {    fireIndexedPropertyChange(propertyName,index,Boolean.valueOf(oldValue),Boolean.valueOf(newValue));  }}  }
class C{  public void addText(String text){  addSignaturesResource(new StringResource(text));}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(false);  WWindowStatus ws=WWindowStatus.get(request);  WebDoc doc=null;  if (session == null || ws == null) {    doc=WebDoc.createPopup("No Context");    doc.addPopupClose(ws.ctx);  } else {    String error=null;    int AD_Record_ID=WebUtil.getParameterAsInt(request,P_Record_ID);    int AD_Table_ID=WebUtil.getParameterAsInt(request,P_Table_ID);    if (AD_Record_ID == 0 || AD_Table_ID == 0) {      doc=WebDoc.createPopup("Invalid Record ID or Table ID");      doc.addPopupClose(ws.ctx);    } else {      doc=createPage(ws.ctx,request,AD_Record_ID,AD_Table_ID);    }  }  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public EchoBreakpointSetReply(final int packetId,final int errorCode,final List<Pair<RelocatedAddress,Integer>> addresses){  super(packetId,errorCode,addresses);}  }
class C{  public static String toHexString(byte[] data,boolean upper){  if (data == null) {    return null;  }  char[] table=(upper ? UPPER_HEX_CHARS : LOWER_HEX_CHARS);  char[] chars=new char[data.length * 2];  for (int i=0; i < data.length; ++i) {    chars[i * 2]=table[(data[i] & 0xF0) >> 4];    chars[i * 2 + 1]=table[(data[i] & 0x0F)];  }  return new String(chars);}  }
class C{  @Deprecated public static void saveCacheFile(String url,CacheResult cacheResult){  saveCacheFile(url,0,cacheResult);}  }
class C{  public HeaderCard(String key,long value,String comment) throws HeaderCardException {  this(key,String.valueOf(value),comment,false,false);}  }
class C{  public void resetScroll(){  if (scroller != null) {    scroller.reset();    refreshView();  }}  }
class C{  public boolean isStandardModule(String moduleName){  return false;}  }
class C{  public void sendSRCPMessage(SRCPMessage m,SRCPListener reply){  sendMessage(m,reply);}  }
class C{  public ForceDirectedLayout(String group,boolean enforceBounds,boolean runonce){  super(group);  m_nodeGroup=PrefuseLib.getGroupName(group,Graph.NODES);  m_edgeGroup=PrefuseLib.getGroupName(group,Graph.EDGES);  m_enforceBounds=enforceBounds;  m_runonce=runonce;  m_fsim=new ForceSimulator();  m_fsim.addForce(new NBodyForce());  m_fsim.addForce(new SpringForce());  m_fsim.addForce(new DragForce());}  }
class C{  private void unregisterReceiver(){  try {    getActivity().unregisterReceiver(mReceiver);  } catch (  final IllegalArgumentException e) {  }  if (EventBus.getDefault().isRegistered(this)) {    EventBus.getDefault().unregister(this);  }}  }
class C{  static public String unescapeJava(final String str){  if (str == null) {    return null;  }  final StringBuilder writer=new StringBuilder(str.length());  unescapeJava(writer,str);  final String result=writer.toString();  return result;}  }
class C{  public static RCFG v(){  if (v == null)   v=new RCFG();  return v;}  }
class C{  protected void sequence_IdentityEscapeSequence_Term(ISerializationContext context,IdentityEscapeSequence semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void testDivideBigDecimalScaleRoundingModeHALF_DOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=5;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=7;  RoundingMode rm=RoundingMode.HALF_DOWN;  String c="500002603731642864013619132621009722.1803810";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public void animateOut(){  animate(OUT);}  }
class C{  private void appendShape(Shape s){  if (!drawingComponent || !trackingAllowed) {    return;  }  Rectangle2D bounds=s.getBounds2D();  if (bounds.getWidth() > 1 && bounds.getHeight() > 1) {    Area area=new Area(s);    area.transform(currentTx);    currentArea.add(area);    lastShape=s;  }}  }
class C{  protected void initBPartner(boolean forInvoice) throws Exception {  int AD_Column_ID=3499;  MLookup lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,AD_Column_ID,DisplayType.Search);  bPartnerField=new VLookup("C_BPartner_ID",true,false,true,lookup);  int C_BPartner_ID=Env.getContextAsInt(Env.getCtx(),p_WindowNo,"C_BPartner_ID");  bPartnerField.setValue(new Integer(C_BPartner_ID));  initBPOrderDetails(C_BPartner_ID,forInvoice);}  }
class C{  public void addVariable(String variableName,Class type,Object initializationValue,boolean constant){  addVariable(variableName,type.getName(),initializationValue,constant);}  }
class C{  public synchronized boolean isAuthenticationComplete(){  return authenticated;}  }
class C{  public Enumeration enumerateAttributes(){  return m_Attributes.elements(m_ClassIndex);}  }
class C{  public JSONArray put(Map value){  put((Object)new JSONObject(value));  return this;}  }
class C{  public void internalCommit() throws ResourceException {  if (xid == null)   return;synchronized (mc.getSynchronizationObject()) {    try {      mc.internalEnd(xid,XAResource.TMSUCCESS);      mc.internalCommit(xid,true);    } catch (    XAException ex) {      throw new FBResourceTransactionException(ex.getMessage(),ex);    }catch (    SQLException ex) {      throw new FBResourceException(ex);    } finally {      xid=null;    }    if (commitEvent != null) {      mc.notify(FBManagedConnection.localTransactionCommittedNotifier,commitEvent);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public IdentifiableElement basicGetOriginalTarget(){  return originalTarget;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T fromXml(String xml,Class<T> clazz){  try {    StringReader reader=new StringReader(xml);    return (T)createUnmarshaller(clazz).unmarshal(reader);  } catch (  JAXBException e) {    throw Exceptions.unchecked(e);  }}  }
class C{  private void deleteFile(String name) throws IOException {  File f=new File(name);  if (!f.delete())   throw new IOException("couldn't remove file: " + name);}  }
class C{  public GenericProxyFactory addProviderAddress(List<UnresolvedAddress> addresses){  this.addresses.addAll(addresses);  return this;}  }
class C{  protected void registerResourceListener(final IEditorInput input){  if (input != null) {    if (inputListener != null) {      inputListener.stop();    }    inputListener=null;    final IFile file=getFileFor(input);    if (file != null) {      inputListener=new ImageResourceChangeListener(file);      inputListener.start();    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  s=domesticAttr.getPreviousSibling();  assertNull("attrPreviousSiblingNullAssert",s);}  }
class C{  protected UndoableEdit editToBeUndone(){  int i=indexOfNextAdd;  while (i > 0) {    UndoableEdit edit=edits.elementAt(--i);    if (edit.isSignificant()) {      return edit;    }  }  return null;}  }
class C{  public TypeTuple(){  this(new ArrayList<Type>());}  }
class C{  public Max(){  super(Number.class,Number.class,Number.class);}  }
class C{  public int optInt(String key,int defaultValue){  Object o=super.get(key);  if (o == null)   return defaultValue;  if (o instanceof Number)   return ((Number)o).intValue();  if (o instanceof String) {    try {      return Integer.parseInt((String)o);    } catch (    NumberFormatException e) {      return defaultValue;    }  } else   return defaultValue;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:14.057 -0500",hash_original_method="00EF7E908C3752F726679FF101FABBAF",hash_generated_method="0858B38F2818FEC2F00BB6525F26816C") public ASN1InputStream(byte[] input){  this(new ByteArrayInputStream(input),input.length);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("AD_Client_ID"))     m_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeleteOldImported"))     m_deleteOldImported="Y".equals(para[i].getParameter()); else     if (name.equals("IsValidateOnly"))     p_IsValidateOnly=para[i].getParameterAsBoolean(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (m_DateValue == null)   m_DateValue=new Timestamp(System.currentTimeMillis());}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState != null) {    if (patchState.taskState.stage != startState.taskState.stage) {      ServiceUtils.logInfo(this,"Moving to stage %s",patchState.taskState.stage);    }    startState.taskState=patchState.taskState;  }  return startState;}  }
class C{  public VNXeCommandJob deleteLunSnap(String snapId){  _logger.info("deleting lun snap:" + snapId);  LunSnapRequests req=new LunSnapRequests(_khClient);  return req.deleteLunSnap(snapId);}  }
class C{  public JavaType[] findTypeParameters(JavaType type,Class<?> expType){  Class<?> raw=type.getRawClass();  if (raw == expType) {    int count=type.containedTypeCount();    if (count == 0)     return null;    JavaType[] result=new JavaType[count];    for (int i=0; i < count; ++i) {      result[i]=type.containedType(i);    }    return result;  }  return findTypeParameters(raw,expType,new TypeBindings(this,type));}  }
class C{  public void removeCapabilitiesFilter(){  m_CapabilitiesFilter=null;}  }
class C{  SelectIterator(final Iterator<E> itr,final Condition<E> cond){  this.buffer=new LinkedList<E>();  this.condition=cond;  this.iterator=itr;}  }
class C{  public boolean isIgnoreClientDisconnect(){  return _isIgnoreClientDisconnect;}  }
class C{  protected void initIter(){  source=OWNED;  currentIter=members(source).iterator();}  }
class C{  private void stopResin3x(String[] args) throws Exception {  resin3xKeepAliveSocket.close();}  }
class C{  public static byte[] checkTlsPreMasterSecretKey(int clientVersion,int serverVersion,SecureRandom random,byte[] encoded,boolean isFailOver){  if (random == null) {    random=JCAUtil.getSecureRandom();  }  byte[] replacer=new byte[48];  random.nextBytes(replacer);  if (!isFailOver && (encoded != null)) {    if (encoded.length != 48) {      return replacer;    }    int encodedVersion=((encoded[0] & 0xFF) << 8) | (encoded[1] & 0xFF);    if (clientVersion != encodedVersion) {      if (clientVersion > 0x0301 || serverVersion != encodedVersion) {        encoded=replacer;      }    }    return encoded;  }  return replacer;}  }
class C{  public void loadIdentity(){  current=MatrixUtils.createRealIdentityMatrix(4);}  }
class C{  public boolean isOk(){  return regStatus == RegStatus.MATCH;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @SideOnly(Side.CLIENT) public void changeXStart(int xStart){  this.unchangedXStart=xStart;}  }
class C{  public boolean addFriendBytes(String name,byte[] key,int via,String number){  if (key == null) {    throw new IllegalArgumentException("Null friend added through addFriendBytes()");  }  return addFriend(name,bytesToBase64(key),via,number);}  }
class C{  public TDoubleDoubleHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public static String encodeToString(BufferedImage image,String type){  String imageString=null;  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    ImageIO.write(image,type,bos);    byte[] imageBytes=bos.toByteArray();    imageString=DatatypeConverter.printBase64Binary(imageBytes);    bos.close();  } catch (  IOException e) {    e.printStackTrace();  }  return imageString;}  }
class C{  @Override public boolean isAutoIncrement(int columnIndex){  return false;}  }
class C{  public IntArray(int capacity){  data=new int[capacity];}  }
class C{  private void printMenu(){  OUT.println("\n");  OUT.println("Choose one of the following demo options:");  OUT.println("\t1) Retrieve my albums with location");  OUT.println("\t2) Update location for an album");  OUT.println("\t0) Exit");  OUT.println("\nEnter Number (0-2): ");}  }
class C{  @CanIgnoreReturnValue public E removeFirst(){  return remove();}  }
class C{  public boolean hasBootCompleted(){  return mBootCompleted;}  }
class C{  public QName(String qname,Stack namespaces,boolean validate){  String namespace=null;  String prefix=null;  int indexOfNSSep=qname.indexOf(':');  if (indexOfNSSep > 0) {    prefix=qname.substring(0,indexOfNSSep);    if (prefix.equals("xml")) {      namespace=S_XMLNAMESPACEURI;    } else     if (prefix.equals("xmlns")) {      return;    } else {      int depth=namespaces.size();      for (int i=depth - 1; i >= 0; i--) {        NameSpace ns=(NameSpace)namespaces.elementAt(i);        while (null != ns) {          if ((null != ns.m_prefix) && prefix.equals(ns.m_prefix)) {            namespace=ns.m_uri;            i=-1;            break;          }          ns=ns.m_next;        }      }    }    if (null == namespace) {      throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));    }  }  _localName=(indexOfNSSep < 0) ? qname : qname.substring(indexOfNSSep + 1);  if (validate) {    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  _namespaceURI=namespace;  _prefix=prefix;  m_hashCode=toString().hashCode();}  }
class C{  public void close() throws SQLException {  if (rs != null) {    rs.close();  }  if (stmt != null) {    stmt.close();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.686 -0400",hash_original_method="A242DFA5F52516C95D0F167B92B745B6",hash_generated_method="1891156C8FEFAA68CD85CC13506CC1D3") protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  private void appendToEnd(Map<String,PsiMethod> sortedMethods){  for (  PsiMethod method : sortedMethods.values()) {    mPsiClass.add(method);  }}  }
class C{  public void clearBugs(){  map.clear();  hashes.clear();  lastBug=null;  lastSourceLine=null;}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public BufferedInputStream(InputStream in,String name){  this(in,defaultBufferSize,name);}  }
class C{  public Portfolio findPortfolioByName(String name) throws PersistentModelException {  return m_portfolioHome.findByName(name);}  }
class C{  public static boolean isDefaultPersistIdCache(){  return DEFAULT_PERSIST_ID_CACHE;}  }
class C{  public boolean arrowScroll(int direction){  View currentFocused=findFocus();  if (currentFocused == this)   currentFocused=null;  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);  final int maxJumpX=getMaxScrollAmountX();  final int maxJumpY=getMaxScrollAmountY();  if (nextFocused != null && isWithinDeltaOfScreenX(nextFocused,maxJumpX) && isWithinDeltaOfScreenY(nextFocused,maxJumpY)) {    nextFocused.getDrawingRect(mTempRect);    offsetDescendantRectToMyCoords(nextFocused,mTempRect);    int scrollDeltaX=computeScrollDeltaToGetChildRectOnScreenX(mTempRect);    doScrollX(scrollDeltaX);    int scrollDeltaY=computeScrollDeltaToGetChildRectOnScreenY(mTempRect);    doScrollY(scrollDeltaY);    nextFocused.requestFocus(direction);  } else {    int scrollDeltaX=maxJumpX;    int scrollDeltaY=maxJumpY;    if (direction == View.FOCUS_UP && getScrollX() < scrollDeltaX) {      scrollDeltaX=getScrollX();    } else     if (direction == View.FOCUS_DOWN) {      int daRight=getChildAt(getChildCount() - 1).getRight();      int screenRight=getScrollX() + getWidth();      if (daRight - screenRight < maxJumpX) {        scrollDeltaX=daRight - screenRight;      }    }    if (direction == View.FOCUS_UP && getScrollY() < scrollDeltaY) {      scrollDeltaY=getScrollY();    } else     if (direction == View.FOCUS_DOWN) {      int daBottom=getChildAt(getChildCount() - 1).getBottom();      int screenBottom=getScrollY() + getHeight();      if (daBottom - screenBottom < maxJumpY) {        scrollDeltaY=daBottom - screenBottom;      }    }    if (scrollDeltaX == 0 && scrollDeltaY == 0) {      return false;    } else     if (scrollDeltaX == 0) {      doScrollY(direction == View.FOCUS_DOWN ? scrollDeltaY : -scrollDeltaY);    } else     if (scrollDeltaY == 0) {      doScrollX(direction == View.FOCUS_DOWN ? scrollDeltaX : -scrollDeltaX);    }  }  if (currentFocused != null && currentFocused.isFocused() && isOffScreen(currentFocused)) {    final int descendantFocusability=getDescendantFocusability();    setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);    requestFocus();    setDescendantFocusability(descendantFocusability);  }  return true;}  }
class C{  private void paintImgBuffer(int top,int bottom){  int myHeight=imgBuffer.getHeight();  View view=editorPane.getUI().getRootView(editorPane);  Color background=ColorAndFontProvider.getBackgroundColor(editorPane);  Graphics2D g=imgBuffer.createGraphics();  if (prefViewHeight > myHeight) {    int width=Math.min(imgBuffer.getWidth() * prefViewHeight / myHeight,400);    int ytop=top * prefViewHeight / myHeight;    int ybtm=(bottom * prefViewHeight + myHeight - 1) / myHeight;    int height=ybtm - ytop;    if (height > 400) {      height=400;      ybtm=ytop + 400;      int newbottom=top + (height * myHeight / prefViewHeight);      if (newbottom <= top) {        newbottom=top + 1;        ybtm=(newbottom * prefViewHeight + myHeight - 1) / myHeight;        height=ybtm - ytop;      }      enqueueRepaint(newbottom,bottom);      bottom=newbottom;    }    if (height < 1) {      height=1;      ybtm=ytop + 1;      bottom=top + (height * myHeight / prefViewHeight);    }    Logger.getLogger("NaviView").finest(String.format("Tried to create an image %s x %s top=%s, bottom=%s, myHeight=%s, ytop=%s,ybtm=%s, which may lead to an OOME.",width,height,top,bottom,myHeight,ytop,ybtm));    BufferedImage bimage=g.getDeviceConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);    addRenderingHintsForAntialiasing(g);    g.setColor(background);    g.fillRect(0,top,imgBuffer.getWidth(),bottom - top);    Graphics2D bg=bimage.createGraphics();    Rectangle shape=new Rectangle(frw,frw,width,prefViewHeight);    bg.setClip(0,0,width,height);    bg.translate(-frw,-ytop - frw);    addRenderingHintsForAntialiasing(bg);    view.paint(bg,shape);    g.drawImage(bimage,0,top,imgBuffer.getWidth(),bottom,0,0,width,height,null);    bg.dispose();  } else {    int w=imgBuffer.getWidth();    int h=myHeight;    Rectangle rb=new Rectangle();    rb.x=0;    rb.y=Math.max(0,top);    rb.width=imgBuffer.getWidth();    rb.height=bottom - top;    g.setClip(rb);    g.setColor(background);    g.fillRect(rb.x,rb.y,rb.width,rb.height);    g.translate(-frw,-frw);    Rectangle bufferBounds=new Rectangle(frw,frw,w,h);    addRenderingHintsForAntialiasing(g);    view.paint(g,bufferBounds);  }  g.dispose();}  }
class C{  protected UncheckedExecutionException(@Nullable String message){  super(message);}  }
class C{  public void initTextEventNS(String namespaceURIArg,String typeArg,boolean canBubbleArg,boolean cancelableArg,AbstractView viewArg,String dataArg){  initUIEventNS(namespaceURIArg,typeArg,canBubbleArg,cancelableArg,viewArg,0);  data=dataArg;}  }
class C{  public Object invokeConstructor(final Object[] arguments){  if (interceptConstruction && null == interceptor)   throw new RuntimeException("cannot invoke constructor without interceptor");  if (interceptConstruction) {    GroovyObject newInstance=(GroovyObject)interceptor.beforeInvoke(null,getTheClass().getSimpleName(),arguments);    newInstance.setMetaClass(this);    return newInstance;  }  return adaptee.invokeConstructor(arguments);}  }
class C{  public Float parseFloat() throws SyntaxError {  String str=parseArg();  if (argWasQuoted())   throw new SyntaxError("Expected float instead of quoted string:" + str);  float value=Float.parseFloat(str);  return value;}  }
class C{  public InputStream findResource(String filename){  return getClass().getResourceAsStream(filename.startsWith("/") ? filename : "/" + filename);}  }
class C{  public static Bitmap generateWifiQrCode(int width,WifiNetwork wifiNetwork) throws WriterException {  int height=width;  com.google.zxing.Writer writer=new QRCodeWriter();  String wifiString=getWifiString(wifiNetwork);  BitMatrix bitMatrix=writer.encode(wifiString,BarcodeFormat.QR_CODE,width,height);  Bitmap imageBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  for (int i=0; i < width; i++) {    for (int j=0; j < height; j++) {      imageBitmap.setPixel(i,j,bitMatrix.get(i,j) ? Color.BLACK : Color.WHITE);    }  }  return imageBitmap;}  }
class C{  @Override protected int takeStep(int i1,int i2,double alpha2,double alpha2Star,double phi2) throws Exception {  if (i1 == i2) {    return 0;  }  double C1=m_C * m_data.instance(i1).weight();  double C2=m_C * m_data.instance(i2).weight();  double alpha1=m_alpha[i1];  double alpha1Star=m_alphaStar[i1];  double phi1=m_error[i1];  double k11=m_kernel.eval(i1,i1,m_data.instance(i1));  double k12=m_kernel.eval(i1,i2,m_data.instance(i1));  double k22=m_kernel.eval(i2,i2,m_data.instance(i2));  double eta=-2 * k12 + k11 + k22;  double gamma=alpha1 - alpha1Star + alpha2 - alpha2Star;  double alpha1old=alpha1;  double alpha1Starold=alpha1Star;  double alpha2old=alpha2;  double alpha2Starold=alpha2Star;  double deltaPhi=phi1 - phi2;  if (findOptimalPointOnLine(i1,alpha1,alpha1Star,C1,i2,alpha2,alpha2Star,C2,gamma,eta,deltaPhi)) {    alpha1=m_alpha[i1];    alpha1Star=m_alphaStar[i1];    alpha2=m_alpha[i2];    alpha2Star=m_alphaStar[i2];    double dAlpha1=alpha1 - alpha1old - (alpha1Star - alpha1Starold);    double dAlpha2=alpha2 - alpha2old - (alpha2Star - alpha2Starold);    for (int j=m_I0.getNext(-1); j != -1; j=m_I0.getNext(j)) {      if ((j != i1) && (j != i2)) {        m_error[j]-=dAlpha1 * m_kernel.eval(i1,j,m_data.instance(i1)) + dAlpha2 * m_kernel.eval(i2,j,m_data.instance(i2));      }    }    m_error[i1]-=dAlpha1 * k11 + dAlpha2 * k12;    m_error[i2]-=dAlpha1 * k12 + dAlpha2 * k22;    updateIndexSetFor(i1,C1);    updateIndexSetFor(i2,C2);    m_bUp=Double.MAX_VALUE;    m_bLow=-Double.MAX_VALUE;    for (int j=m_I0.getNext(-1); j != -1; j=m_I0.getNext(j)) {      updateBoundaries(j,m_error[j]);    }    if (!m_I0.contains(i1)) {      updateBoundaries(i1,m_error[i1]);    }    if (!m_I0.contains(i2)) {      updateBoundaries(i2,m_error[i2]);    }    return 1;  } else {    return 0;  }}  }
class C{  public void testTimedSearchTask() throws Exception {  String algLines[]={"log.step=100000","ResetSystemErase","CreateIndex","{ AddDoc } : 100","ForceMerge(1)","CloseIndex","OpenReader","{ CountingSearchTest } : .5s","CloseReader"};  CountingSearchTestTask.numSearches=0;  execBenchmark(algLines);  assertTrue(CountingSearchTestTask.numSearches > 0);  long elapsed=CountingSearchTestTask.prevLastMillis - CountingSearchTestTask.startMillis;  assertTrue("elapsed time was " + elapsed + " msec",elapsed <= 1500);}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  @CanIgnoreReturnValue public E removeLast(){  if (isEmpty()) {    throw new NoSuchElementException();  }  return removeAndGet(getMaxElementIndex());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.374 -0500",hash_original_method="D9DD3496C720D6870AF0B13C99983662",hash_generated_method="A33CD97AE5E143DCA83821682B4A3FE2") public static boolean isWildCard(int[] stateSetOrSpec){  return stateSetOrSpec.length == 0 || stateSetOrSpec[0] == 0;}  }
class C{  public Server(Service service,String... args) throws SQLException {  verifyArgs(args);  this.service=service;  try {    service.init(args);  } catch (  Exception e) {    throw DbException.toSQLException(e);  }}  }
class C{  public void printStackTrace(PrintWriter s){  if (!isJDK14OrAbove && causeOnJDK13OrBelow != null) {    printStackTrace0(s);  } else {    super.printStackTrace(s);  }}  }
class C{  public DoubleDataBox(double[][] data){  int length=data[0].length;  for (  double[] datum : data) {    if (datum.length != length) {      throw new IllegalArgumentException("All rows must have same length.");    }  }  this.data=data;}  }
class C{  @Override public String toString(){  return "(" + x + ", "+ y+ ")";}  }
class C{  private static String hashPassword(String username,String password,String alg){  String newPass;  if (alg == null || alg.equals("MD5")) {    newPass=DigestUtils.md5Hex(password);  } else   if (alg.equals("NONE")) {    newPass="password";  } else   if (alg.equals("SHA-256")) {    newPass=DigestUtils.sha256Hex(password);  } else   if (alg.equals("SHA-512")) {    newPass=DigestUtils.sha512Hex(password);  } else {    newPass=DigestUtils.sha1Hex(password);  }  return newPass;}  }
class C{  public boolean rewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  RandomAccessFile file=null;  InputStream is=null;  boolean ret;  try {    File temp=new File(filename);    is=new BufferedInputStream(new FileInputStream(temp));    ExifParser parser=null;    try {      parser=ExifParser.parse(is,this);    } catch (    ExifInvalidFormatException e) {      throw new IOException("Invalid exif format : ",e);    }    long exifSize=parser.getOffsetToExifEndFromSOF();    is.close();    is=null;    file=new RandomAccessFile(temp,"rw");    long fileLength=file.length();    if (fileLength < exifSize) {      throw new IOException("Filesize changed during operation");    }    ByteBuffer buf=file.getChannel().map(MapMode.READ_WRITE,0,exifSize);    ret=rewriteExif(buf,tags);  } catch (  IOException e) {    closeSilently(file);    throw e;  } finally {    closeSilently(is);  }  file.close();  return ret;}  }
class C{  public void addAllKeys(Collection<?> keys){  if (!this.hasKeys) {    this.hasKeys=true;    this.keys=new ArrayList(keys);  } else {    this.keys.addAll(keys);  }}  }
class C{  void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void flush(){  if (this.os != null) {    try {      if (this.writer != null) {        this.writer.flush();      } else {        this.os.flush();      }    } catch (    Exception e) {      getErrorManager().error("Exception occurred when flushing the output stream",e,ErrorManager.FLUSH_FAILURE);    }  }}  }
class C{  public static byte[] concat(byte[] base,byte[] other,int appendCount){  final int length=base.length;  byte[] newArray=copyFrom(base,base.length + appendCount);  System.arraycopy(other,0,newArray,length,appendCount);  return newArray;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,boolean value){  buffer.append(value);}  }
class C{  private void drawFirstAnimation(Canvas canvas){  if (radius1 < getWidth() / 2) {    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    radius1=(radius1 >= getWidth() / 2) ? (float)getWidth() / 2 : radius1 + 1;    canvas.drawCircle(getWidth() / 2,getHeight() / 2,radius1,paint);  } else {    Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);    Canvas temp=new Canvas(bitmap);    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    temp.drawCircle(getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);    Paint transparentPaint=new Paint();    transparentPaint.setAntiAlias(true);    transparentPaint.setColor(getResources().getColor(android.R.color.transparent));    transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    if (cont >= 50) {      radius2=(radius2 >= getWidth() / 2) ? (float)getWidth() / 2 : radius2 + 1;    } else {      radius2=(radius2 >= getWidth() / 2 - Utils.dpToPx(4,getResources())) ? (float)getWidth() / 2 - Utils.dpToPx(4,getResources()) : radius2 + 1;    }    temp.drawCircle(getWidth() / 2,getHeight() / 2,radius2,transparentPaint);    canvas.drawBitmap(bitmap,0,0,new Paint());    if (radius2 >= getWidth() / 2 - Utils.dpToPx(4,getResources()))     cont++;    if (radius2 >= getWidth() / 2)     firstAnimationOver=true;  }}  }
class C{  public static void logAddProductToCart(long remoteId,String name,double discountPrice){  Bundle parameters=new Bundle();  parameters.putString(AppEventsConstants.EVENT_PARAM_CONTENT_TYPE,PRODUCT);  parameters.putLong(AppEventsConstants.EVENT_PARAM_CONTENT_ID,remoteId);  parameters.putString(AppEventsConstants.EVENT_PARAM_DESCRIPTION,name);  logFbEvent(AppEventsConstants.EVENT_NAME_ADDED_TO_CART,discountPrice,parameters);  Map<String,String> event=new HitBuilders.EventBuilder().setCategory("ADDED_TO_CART").setAction("ADDED_TO_CART").setLabel("ADDED TO CART" + " product id: " + remoteId + " product name: "+ name+ " price: "+ discountPrice).build();  sendEventToAppTrackers(event);}  }
class C{  public int size(){synchronized (eventsList) {    return eventsList.size();  }}  }
class C{  private void migrate(String dbName){  loadFluxRuntimeContainer();  MigrationsRunner migrationsRunner=fluxRuntimeContainer.getComponentContext().getInstance(MigrationsRunner.class);  migrationsRunner.migrate(dbName);}  }
