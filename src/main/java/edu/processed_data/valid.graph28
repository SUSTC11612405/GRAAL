class C{  public void removePort(){  authority.removePort();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforerefchildnonexistent.class,args);}  }
class C{  public void forceStop(){synchronized (this.eventMutex) {    this.isStopped=true;    this.refCount=0;    this.eventMutex.notify();  }}  }
class C{  public JRadioButton(Icon icon,boolean selected){  this(null,icon,selected);}  }
class C{  @Override protected void onResume(){  if (mWZCameraView != null)   mWZCameraView.setPreviewReadyListener(this);  super.onResume();  if (sGoCoderSDK != null && mWZCameraView != null) {    if (mNinjaFace == null) {      Bitmap faceBitmap=BitmapFactory.decodeResource(getResources(),R.drawable.ninja_face);      mNinjaFace=new WZBitmap(faceBitmap);      mNinjaFace.setPosition(WZBitmap.CENTER,WZBitmap.CENTER);      mNinjaFace.setScale(0.50f,WZBitmap.SURFACE_WIDTH);      mNinjaFace.setVisible(false);      mWZCameraView.registerFrameRenderer(mNinjaFace);    }  }}  }
class C{  @SuppressWarnings("null") public ClusterMessage requestCompleted(String sessionId,boolean expires){  DeltaSession session=null;  SessionMessage msg=null;  try {    session=(DeltaSession)findSession(sessionId);    if (session == null) {      return null;    }    DeltaRequest deltaRequest=session.getDeltaRequest();    session.lock();    if (deltaRequest.getSize() > 0) {      counterSend_EVT_SESSION_DELTA++;      byte[] data=serializeDeltaRequest(session,deltaRequest);      msg=new SessionMessageImpl(getName(),SessionMessage.EVT_SESSION_DELTA,data,sessionId,sessionId + "-" + System.currentTimeMillis());      session.resetDeltaRequest();    }  } catch (  IOException x) {    log.error(sm.getString("deltaManager.createMessage.unableCreateDeltaRequest",sessionId),x);    return null;  } finally {    if (session != null)     session.unlock();  }  if (msg == null) {    if (!expires && !session.isPrimarySession()) {      counterSend_EVT_SESSION_ACCESSED++;      msg=new SessionMessageImpl(getName(),SessionMessage.EVT_SESSION_ACCESSED,null,sessionId,sessionId + "-" + System.currentTimeMillis());      if (log.isDebugEnabled()) {        log.debug(sm.getString("deltaManager.createMessage.accessChangePrimary",getName(),sessionId));      }    }  } else {    if (log.isDebugEnabled()) {      log.debug(sm.getString("deltaManager.createMessage.delta",getName(),sessionId));    }  }  if (!expires)   session.setPrimarySession(true);  if (!expires && (msg == null)) {    long replDelta=System.currentTimeMillis() - session.getLastTimeReplicated();    if (session.getMaxInactiveInterval() >= 0 && replDelta > (session.getMaxInactiveInterval() * 1000L)) {      counterSend_EVT_SESSION_ACCESSED++;      msg=new SessionMessageImpl(getName(),SessionMessage.EVT_SESSION_ACCESSED,null,sessionId,sessionId + "-" + System.currentTimeMillis());      if (log.isDebugEnabled()) {        log.debug(sm.getString("deltaManager.createMessage.access",getName(),sessionId));      }    }  }  if (msg != null) {    session.setLastTimeReplicated(System.currentTimeMillis());    msg.setTimestamp(session.getLastTimeReplicated());  }  return msg;}  }
class C{  static String encodeStub(RMIServer rmiServer,Map<String,?> env) throws IOException {  if (IIOPHelper.isStub(rmiServer))   return "/ior/" + encodeIIOPStub(rmiServer,env); else   return "/stub/" + encodeJRMPStub(rmiServer,env);}  }
class C{  public static Cookie createCookie(String cookieName,String cookieValue,String cookieDomain,String path){  if (debug.messageEnabled()) {    debug.message("cookieName   : " + cookieName);    debug.message("cookieValue  : " + cookieValue);    debug.message("cookieDomain : " + cookieDomain);    debug.message("path : " + path);  }  Cookie cookie=null;  try {    cookie=CookieUtils.newCookie(cookieName,cookieValue,path,cookieDomain);  } catch (  Exception ex) {    if (debug.messageEnabled()) {      debug.message("Error creating cookie. : " + ex.getMessage());    }  }  if (debug.messageEnabled()) {    debug.message("createCookie Cookie is set : " + cookie);  }  return cookie;}  }
class C{  private void addConflict(AddMsg msg) throws DecodeException {  String normalizedDN=msg.getDN().toString();  LocalizableMessage alertMessage=NOTE_UNRESOLVED_CONFLICT.get(normalizedDN);  DirectoryServer.sendAlertNotification(this,ALERT_TYPE_REPLICATION_UNRESOLVED_CONFLICT,alertMessage);  msg.addAttribute(DS_SYNC_CONFLICT,normalizedDN);}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  for (int i=0; i < indent; i++) {    buffer.append(' ');  }  buffer.append("Unbind Request");  buffer.append(EOL);}  }
class C{  public boolean isBroken(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return generation.broken;  }  finally {    lock.unlock();  }}  }
class C{  public final byte readByte() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return (byte)temp;}  }
class C{  private void addModifications(DN groupDn,Set<DN> dns,ModifyRequest modRequest) throws IOException {  SearchRequest searchRequest=newSearchRequest(groupDn,BASE_OBJECT,ALL_OBJECTS_FILTER,OBJECTCLASS_ATTRIBUTE_TYPE_NAME,ATTR_MEMBER,ATTR_UNIQUE_MEMBER);  try (ConnectionEntryReader reader=getInfo().getConnection().getConnection().search(searchRequest)){    String memberAttr=ATTR_MEMBER;    while (reader.hasNext()) {      SearchResultEntry sr=reader.readEntry();      Set<String> objectClasses=asSetOfString(sr,OBJECTCLASS_ATTRIBUTE_TYPE_NAME);      if (objectClasses.contains(OC_GROUP_OF_UNIQUE_NAMES)) {        memberAttr=ATTR_UNIQUE_MEMBER;      }      Set<DN> dnsToAdd=new LinkedHashSet<>(dns);      dnsToAdd.removeAll(asSetOfDN(sr,memberAttr));      if (!dnsToAdd.isEmpty()) {        modRequest.addModification(ADD,memberAttr,dnsToAdd.toArray());      }    }  } }  }
class C{  public int hashCode(){  long bits=Double.doubleToLongBits(m00);  bits=bits * 31 + Double.doubleToLongBits(m01);  bits=bits * 31 + Double.doubleToLongBits(m02);  bits=bits * 31 + Double.doubleToLongBits(m10);  bits=bits * 31 + Double.doubleToLongBits(m11);  bits=bits * 31 + Double.doubleToLongBits(m12);  return (((int)bits) ^ ((int)(bits >> 32)));}  }
class C{  public PlaSide side_of_border_line(int p_x,int p_y,int p_border_line_no){  int tmp;  if (p_border_line_no == 0) {    tmp=this.oct_ly - p_y;  } else   if (p_border_line_no == 2) {    tmp=p_x - this.oct_rx;  } else   if (p_border_line_no == 4) {    tmp=p_y - this.oct_uy;  } else   if (p_border_line_no == 6) {    tmp=this.oct_lx - p_x;  } else   if (p_border_line_no == 1) {    tmp=p_x - p_y - this.oct_lrx;  } else   if (p_border_line_no == 3) {    tmp=p_x + p_y - this.oct_urx;  } else   if (p_border_line_no == 5) {    tmp=this.oct_ulx + p_y - p_x;  } else   if (p_border_line_no == 7) {    tmp=this.oct_llx - p_x - p_y;  } else {    System.out.println("IntOctagon.side_of_border_line: p_border_line_no out of range");    tmp=0;  }  PlaSide result;  if (tmp < 0) {    result=PlaSide.ON_THE_LEFT;  } else   if (tmp > 0) {    result=PlaSide.ON_THE_RIGHT;  } else {    result=PlaSide.COLLINEAR;  }  return result;}  }
class C{  public ID3v24Frame(Lyrics3v2Field field) throws InvalidTagException {  String id=field.getIdentifier();  String value;  if (id.equals("IND")) {    throw new InvalidTagException("Cannot create ID3v2.40 frame from Lyrics3 indications field.");  } else   if (id.equals("LYR")) {    FieldFrameBodyLYR lyric=(FieldFrameBodyLYR)field.getBody();    Lyrics3Line line;    Iterator<Lyrics3Line> iterator=lyric.iterator();    FrameBodySYLT sync;    FrameBodyUSLT unsync;    boolean hasTimeStamp=lyric.hasTimeStamp();    sync=new FrameBodySYLT((byte)0,"ENG",(byte)2,(byte)1,"",new byte[0]);    unsync=new FrameBodyUSLT((byte)0,"ENG","","");    while (iterator.hasNext()) {      line=iterator.next();      if (hasTimeStamp) {      } else {        unsync.addLyric(line);      }    }    if (hasTimeStamp) {      this.frameBody=sync;      this.frameBody.setHeader(this);    } else {      this.frameBody=unsync;      this.frameBody.setHeader(this);    }  } else   if (id.equals("INF")) {    value=((FieldFrameBodyINF)field.getBody()).getAdditionalInformation();    this.frameBody=new FrameBodyCOMM((byte)0,"ENG","",value);    this.frameBody.setHeader(this);  } else   if (id.equals("AUT")) {    value=((FieldFrameBodyAUT)field.getBody()).getAuthor();    this.frameBody=new FrameBodyTCOM((byte)0,value);    this.frameBody.setHeader(this);  } else   if (id.equals("EAL")) {    value=((FieldFrameBodyEAL)field.getBody()).getAlbum();    this.frameBody=new FrameBodyTALB((byte)0,value);    this.frameBody.setHeader(this);  } else   if (id.equals("EAR")) {    value=((FieldFrameBodyEAR)field.getBody()).getArtist();    this.frameBody=new FrameBodyTPE1((byte)0,value);    this.frameBody.setHeader(this);  } else   if (id.equals("ETT")) {    value=((FieldFrameBodyETT)field.getBody()).getTitle();    this.frameBody=new FrameBodyTIT2((byte)0,value);    this.frameBody.setHeader(this);  } else   if (id.equals("IMG")) {    throw new InvalidTagException("Cannot create ID3v2.40 frame from Lyrics3 image field.");  } else {    throw new InvalidTagException("Cannot caret ID3v2.40 frame from " + id + " Lyrics3 field");  }}  }
class C{  public void reset(boolean reset){  this.reset=reset;}  }
class C{  public final void writeInt(int v) throws IOException {  out.write((v >>> 24) & 0xFF);  out.write((v >>> 16) & 0xFF);  out.write((v >>> 8) & 0xFF);  out.write((v >>> 0) & 0xFF);  incCount(4);}  }
class C{  public boolean hasNextLine(){  saveState();  String result=findWithinHorizon(linePattern(),0);  if (result != null) {    MatchResult mr=this.match();    String lineSep=mr.group(1);    if (lineSep != null) {      result=result.substring(0,result.length() - lineSep.length());      cacheResult(result);    } else {      cacheResult();    }  }  revertState();  return (result != null);}  }
class C{  public static long findNumber(String str,int offset) throws TagException {  if (str == null) {    throw new NullPointerException("String is null");  }  if ((offset < 0) || (offset >= str.length())) {    throw new IndexOutOfBoundsException("Offset to image string is out of bounds: offset = " + offset + ", string.length()"+ str.length());  }  int i;  int j;  long num;  i=offset;  while (i < str.length()) {    if (((str.charAt(i) >= '0') && (str.charAt(i) <= '9')) || (str.charAt(i) == '-')) {      break;    }    i++;  }  j=i + 1;  while (j < str.length()) {    if (((str.charAt(j) < '0') || (str.charAt(j) > '9'))) {      break;    }    j++;  }  if ((j <= str.length()) && (j > i)) {    num=Long.parseLong(str.substring(i,j));  } else {    throw new TagException("Unable to find integer in string: " + str);  }  return num;}  }
class C{  public void cleanDeletedOrgCache(String orgDN){  String tdn=orgDN;  while (!tdn.equalsIgnoreCase(rootSuffix)) {    if (deletedOrg.containsKey(tdn)) {synchronized (deletedOrg) {        deletedOrg.remove(tdn);      }    }    tdn=DN.valueOf(tdn).parent().toString().toLowerCase();  }}  }
class C{  public FocusEvent(Component source,int id){  this(source,id,false);}  }
class C{  public void appendDataTo(StringBuilder stringBuilder){  stringBuilder.append(buffer);}  }
class C{  public void removeActionListener(ActionListener listener){  listenerList.remove(ActionListener.class,listener);}  }
class C{  protected Digester createContextDigester(){  Digester digester=new Digester();  digester.setValidating(false);  digester.setRulesValidation(true);  HashMap<Class<?>,List<String>> fakeAttributes=new HashMap<>();  ArrayList<String> attrs=new ArrayList<>();  attrs.add("className");  fakeAttributes.put(Object.class,attrs);  digester.setFakeAttributes(fakeAttributes);  RuleSet contextRuleSet=new ContextRuleSet("",false);  digester.addRuleSet(contextRuleSet);  RuleSet namingRuleSet=new NamingRuleSet("Context/");  digester.addRuleSet(namingRuleSet);  return digester;}  }
class C{  private void doDispatch(RoutingContext context,String path,HttpClient client,Future<Object> cbFuture){  HttpClientRequest toReq=client.request(context.request().method(),path,null);  context.request().headers().forEach(null);  if (context.user() != null) {    toReq.putHeader("user-principal",context.user().principal().encode());  }  if (context.getBody() == null) {    toReq.end();  } else {    toReq.end(context.getBody());  }}  }
class C{  public void test_Range_EE(){  try {    EnumSet.range(EnumWithInnerClass.c,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(null,EnumWithInnerClass.c);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(null,(EnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(EnumWithInnerClass.b,EnumWithInnerClass.a);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }  EnumSet<EnumWithInnerClass> enumSet=EnumSet.range(EnumWithInnerClass.a,EnumWithInnerClass.a);  assertEquals("Size of enumSet should be 1",1,enumSet.size());  enumSet=EnumSet.range(EnumWithInnerClass.a,EnumWithInnerClass.c);  assertEquals("Size of enumSet should be 3",3,enumSet.size());  try {    EnumSet.range(HugeEnumWithInnerClass.c,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(null,HugeEnumWithInnerClass.c);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(null,(HugeEnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    EnumSet.range(HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.a);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.range(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.a);  assertEquals(1,hugeEnumSet.size());  hugeEnumSet=EnumSet.range(HugeEnumWithInnerClass.c,HugeEnumWithInnerClass.aa);  assertEquals(51,hugeEnumSet.size());  hugeEnumSet=EnumSet.range(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.mm);  assertEquals(65,hugeEnumSet.size());  hugeEnumSet=EnumSet.range(HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.mm);  assertEquals(64,hugeEnumSet.size());}  }
class C{  public StandardDecryptor(byte[] key,int off,int len){  arcfour=new ARCFOUREncryption();  arcfour.prepareARCFOURKey(key,off,len);}  }
class C{  private void createServiceModifications(Map<String,ServiceSchemaImpl> newSchemaMap) throws UpgradeException {  try {    final Map<String,ServiceSchemaModificationWrapper> serviceSchemaMap=new HashMap<String,ServiceSchemaModificationWrapper>();    for (    Map.Entry<String,ServiceSchemaImpl> newAttrSchemaEntry : newSchemaMap.entrySet()) {      final ServiceSchemaModificationWrapper attributesAdded=getServiceModificationsRecursive(newAttrSchemaEntry.getKey(),newAttrSchemaEntry.getValue());      if (attributesAdded.hasBeenModified()) {        serviceSchemaMap.put(newAttrSchemaEntry.getKey(),attributesAdded);      }    }    newServiceWrapper=new NewServiceWrapper(serviceName,serviceSchemaMap,serviceSchemaDoc);  } catch (  SMSException smse) {    UpgradeUtils.debug.error("Error whilst determining schema changes for service: " + serviceName,smse);    throw new UpgradeException(smse.getMessage(),smse);  }}  }
class C{  public static void processLogoutRequest(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String samlRequest,String relayState) throws SAML2Exception, SessionException {  String classMethod="IDPSingleLogout.processLogoutRequest : ";  if (debug.messageEnabled()) {    debug.message(classMethod + "IDPSingleLogout:processLogoutRequest");    debug.message(classMethod + "samlRequest : " + samlRequest);    debug.message(classMethod + "relayState : " + relayState);  }  String rmethod=request.getMethod();  String binding=SAML2Constants.HTTP_REDIRECT;  if (rmethod.equals("POST")) {    binding=SAML2Constants.HTTP_POST;  }  String metaAlias=SAML2MetaUtils.getMetaAliasByUri(request.getRequestURI());  String realm=SAML2Utils.getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));  String idpEntityID=sm.getEntityByMetaAlias(metaAlias);  if (!SAML2Utils.isIDPProfileBindingSupported(realm,idpEntityID,SAML2Constants.SLO_SERVICE,binding)) {    debug.error(classMethod + "SLO service binding " + binding+ " is not supported for "+ idpEntityID);    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  LogoutRequest logoutReq=null;  if (rmethod.equals("POST")) {    logoutReq=LogoutUtil.getLogoutRequestFromPost(samlRequest,response);  } else   if (rmethod.equals("GET")) {    String decodedStr=SAML2Utils.decodeFromRedirect(samlRequest);    if (decodedStr == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("nullDecodedStrFromSamlRequest"));    }    logoutReq=ProtocolFactory.getInstance().createLogoutRequest(decodedStr);  }  if (logoutReq == null) {    if (debug.messageEnabled()) {      debug.message("IDPSingleLogout:processLogoutRequest: logoutReq " + "is null");    }    return;  }  String spEntityID=logoutReq.getIssuer().getValue();  boolean needToVerify=SAML2Utils.getWantLogoutRequestSigned(realm,idpEntityID,SAML2Constants.IDP_ROLE);  if (debug.messageEnabled()) {    debug.message(classMethod + "metaAlias : " + metaAlias);    debug.message(classMethod + "realm : " + realm);    debug.message(classMethod + "idpEntityID : " + idpEntityID);    debug.message(classMethod + "spEntityID : " + spEntityID);  }  if (needToVerify) {    boolean valid=false;    if (binding.equals(SAML2Constants.HTTP_REDIRECT)) {      String queryString=request.getQueryString();      valid=SAML2Utils.verifyQueryString(queryString,realm,SAML2Constants.IDP_ROLE,spEntityID);    } else {      valid=LogoutUtil.verifySLORequest(logoutReq,realm,spEntityID,idpEntityID,SAML2Constants.IDP_ROLE);    }    if (!valid) {      debug.error("Invalid signature in SLO Request.");      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignInRequest"));    }    IDPSSODescriptorElement idpsso=sm.getIDPSSODescriptor(realm,idpEntityID);    String loc=null;    if (idpsso != null) {      List sloList=idpsso.getSingleLogoutService();      if ((sloList != null) && (!sloList.isEmpty())) {        loc=LogoutUtil.getSLOResponseServiceLocation(sloList,binding);        if ((loc == null) || (loc.length() == 0)) {          loc=LogoutUtil.getSLOServiceLocation(sloList,binding);        }      }    }    if (!SAML2Utils.verifyDestination(logoutReq.getDestination(),loc)) {      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidDestination"));    }  }  Object session=null;  try {    session=sessionProvider.getSession(request);  } catch (  SessionException ssoe) {    sendAlreadyLogedOutResp(response,request,logoutReq,relayState,realm,idpEntityID,spEntityID,binding);    return;  }  if (session != null && !SAML2FailoverUtils.isSAML2FailoverEnabled() && isMisroutedRequest(request,response,out,session)) {    return;  } else {    if (debug.messageEnabled()) {      debug.message(classMethod + "SAML2 Failover will be attempted. Be sure SFO is " + "properly configured or the attempt will fail");    }  }  LogoutResponse logoutRes=processLogoutRequest(logoutReq,request,response,out,binding,relayState,idpEntityID,realm,true);  if (logoutRes == null) {    return;  }  SingleLogoutServiceElement endpoint=getLogoutResponseEndpoint(realm,spEntityID,binding);  binding=endpoint.getBinding();  String location=getResponseLocation(endpoint);  logoutRes.setDestination(XMLUtils.escapeSpecialCharacters(location));  boolean isMultiProtocolSession=false;  int retStatus=SingleLogoutManager.LOGOUT_SUCCEEDED_STATUS;  try {    if ((session != null) && (sessionProvider.isValid(session)) && MultiProtocolUtils.isMultipleProtocolSession(session,SingleLogoutManager.SAML2)) {      isMultiProtocolSession=true;      SingleLogoutManager sloManager=SingleLogoutManager.getInstance();      Set set=new HashSet();      set.add(session);      String uid=sessionProvider.getPrincipalName(session);      debug.message("IDPSingleLogout.processLogReq: MP/SPinit/Http");      retStatus=sloManager.doIDPSingleLogout(set,uid,request,response,false,false,SingleLogoutManager.SAML2,realm,idpEntityID,spEntityID,relayState,logoutReq.toString(),logoutRes.toXMLString(),getLogoutStatus(logoutRes));    }  } catch (  SessionException e) {    debug.message("IDPSingleLogout.processLogoutRequest: session",e);  }catch (  Exception e) {    debug.message("IDPSingleLogout.processLogoutRequest: MP2",e);    retStatus=SingleLogoutManager.LOGOUT_FAILED_STATUS;  }  if (!isMultiProtocolSession || (retStatus != SingleLogoutManager.LOGOUT_REDIRECTED_STATUS)) {    logoutRes=updateLogoutResponse(logoutRes,retStatus);    List partners=IDPProxyUtil.getSessionPartners(request);    if (partners != null && !partners.isEmpty()) {      IDPProxyUtil.sendProxyLogoutRequest(request,response,out,logoutReq,partners,binding,relayState);    } else {      LogoutUtil.sendSLOResponse(response,request,logoutRes,location,relayState,realm,idpEntityID,SAML2Constants.IDP_ROLE,spEntityID,binding);    }  }}  }
class C{  protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  rowIterator.setLayoutArrays(offsets,spans);  CSS.calculateTiledLayout(rowIterator,targetSpan);  if (captionIndex != -1) {    View caption=getView(captionIndex);    int h=(int)caption.getPreferredSpan(Y_AXIS);    spans[captionIndex]=h;    short boxBottom=(short)painter.getInset(BOTTOM,this);    if (boxBottom != getBottomInset()) {      offsets[captionIndex]=targetSpan + boxBottom;    } else {      offsets[captionIndex]=-getTopInset();    }  }}  }
class C{  public CharHolder(char initial){  value=initial;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  Rule rule=createRule();  if (rule != null) {    try {      CachedPolicy cachedPolicy=getCachedPolicy();      Policy policy=cachedPolicy.getPolicy();      policy.addRule(rule);      backTrail();      cachedPolicy.setPolicyModified(true);      forwardToPolicyViewBean();    } catch (    NameAlreadyExistsException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));      forwardTo();    }catch (    InvalidNameException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));      forwardTo();    }catch (    AMConsoleException e) {      debug.warning("RuleAddViewBean.handleButton2Request",e);      redirectToStartURL();    }  } else {    forwardTo();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node secondCNode;  Node textNode;  NodeList childNodesList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  secondCNode=childList.item(1);  textNode=secondCNode.getFirstChild();  childNodesList=textNode.getChildNodes();  assertSize("nodeChildNodesEmptyAssert1",0,childNodesList);}  }
class C{  @Override public synchronized void load() throws ServletException {  instance=loadServlet();  if (!instanceInitialized) {    initServlet(instance);  }  if (isJspServlet) {    StringBuilder oname=new StringBuilder(getDomain());    oname.append(":type=JspMonitor");    oname.append(getWebModuleKeyProperties());    oname.append(",name=");    oname.append(getName());    oname.append(getJ2EEKeyProperties());    try {      jspMonitorON=new ObjectName(oname.toString());      Registry.getRegistry(null,null).registerComponent(instance,jspMonitorON,null);    } catch (    Exception ex) {      log.info("Error registering JSP monitoring with jmx " + instance);    }  }}  }
class C{  private void recalculateWordsInUse(){  int i;  for (i=wordsInUse - 1; i >= 0; i--)   if (words[i] != 0)   break;  wordsInUse=i + 1;}  }
class C{  public void testGenerateCertPath2() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCertPath((List<Certificate>)null);    fail("NullPointerException was not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public JarException(String s){  super(s);}  }
class C{  public NoSuchProviderException(){  super();}  }
class C{  public char previous(){  if (pos == offset) {    return DONE;  }  pos-=1;  return current();}  }
class C{  public static void closeSession() throws HibernateException {  Session session=(Session)threadLocal.get();  threadLocal.set(null);  if (session != null) {    session.close();  }}  }
class C{  public static boolean validate(SSOToken token,String clazz,Set values) throws SMSException {  try {    SMSJAXRPCObject smsObj=new SMSJAXRPCObject();    return smsObj.validateServiceAttributes(token,clazz,values);  } catch (  SSOException e) {    return false;  }}  }
class C{  public String toStringImpl(){  return latCodes;}  }
class C{  void loadData() throws java.io.IOException {  RandomAccessFileOrArray raf=new RandomAccessFileOrArray(new RandomAccessSourceFactory().createSource(url));  ByteArrayOutputStream stream=new ByteArrayOutputStream();  StreamUtil.transferBytes(raf,stream);  raf.close();  data=stream.toByteArray();}  }
class C{  public void removeResponseProvider(ResponseProvider respProvider){  String respProviderName=respProviders.getResponseProviderName(respProvider);  if (respProviderName != null) {    removeResponseProvider(respProviderName);  }}  }
class C{  public void testShiftLeft5(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=45;  byte rBytes[]={-49,-8,-13,96,41,116,-38,84,-97,-127,-37,-100,-64,0,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftLeft(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static PdfAction createLaunch(PdfFileSpec fileSpec){  PdfAction action=new PdfAction().put(PdfName.S,PdfName.Launch);  if (fileSpec != null) {    action.put(PdfName.F,fileSpec.getPdfObject());  }  return action;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (RESULT_OK == resultCode) {    if (REQUEST_CODE_FAVORITE != requestCode) {      Log.e(TAG,"Error: Invalid requestcode.");      return;    }    int iStation=data.getIntExtra(FmRadioFavorite.ACTIVITY_RESULT,mCurrentStation);    mCurrentStation=iStation;    mIsNeedDisablePower=true;    Log.d(TAG,"onActivityForReult:" + mIsNeedDisablePower);    if (null == mService) {      Log.d(TAG,"activity.onActivityResult mService is null");      mNeedTuneto=true;      return;    }    tuneToStation(iStation);    return;  }  if (FmRadioStation.isFavoriteStation(mContext,mCurrentStation)) {    mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_on_selector);    mTextStationName.setText(FmRadioStation.getStationName(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_FAVORITE));  } else {    mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_off_selector);    mTextStationName.setText("");  }  Log.v(TAG,"The activity for requestcode " + requestCode + " does not return any data.");}  }
class C{  private static BrdItem pick_start_item(PlaPointInt p_location,IteraBoard p_hdlg){  RoutingBoard routing_board=p_hdlg.get_routing_board();  BrdItem picked_item=routing_board.pick_nearest_routing_item(p_location,p_hdlg.itera_settings.layer_no,null);  if (picked_item != null)   return picked_item;  if (!p_hdlg.itera_settings.select_on_all_visible_layers)   return null;  int layer_count=routing_board.get_layer_count();  picked_item=pick_routing_item(p_location,0,p_hdlg);  if (picked_item != null)   return picked_item;  picked_item=pick_routing_item(p_location,layer_count - 1,p_hdlg);  if (picked_item != null)   return picked_item;  for (int index=1; index < layer_count - 1; ++index) {    if (!routing_board.layer_structure.is_signal(index))     continue;    picked_item=pick_routing_item(p_location,index,p_hdlg);    if (picked_item != null)     return picked_item;  }  for (int index=1; index < layer_count - 1; ++index) {    if (routing_board.layer_structure.is_signal(index))     continue;    picked_item=pick_routing_item(p_location,index,p_hdlg);    if (picked_item != null)     return picked_item;  }  return picked_item;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public static boolean checkIfFileIsHidden(final String fileName,final IConfiguration conf){  return Pattern.compile(getHiddenFileOrFolderRegex(conf.getHiddenFiles())).matcher(fileName).matches();}  }
class C{  public MappedMember findMethodByNameAndDesc(String name,String desc,boolean useOriginalName){  for (  MappedMember mm : getMethods()) {    if (mm.getDesc().equals(desc) && useOriginalName ? mm.getOriginalName().equals(name) : mm.getNewName().equals(name)) {      return mm;    }  }  return null;}  }
class C{  private void turnOnWifi(){  WifiManager wifiManager=(WifiManager)getSystemService(Context.WIFI_SERVICE);  wifiManager.setWifiEnabled(true);  ResultProcessor.process(this,intent,ResultProcessor.RESULT_SUCCESS,getString(R.string.wifi_turned_on));}  }
class C{  private void updateErrorMessages(Collection<LocalizableMessage> errorMessages){  Object type=((CategorizedComboBoxElement)scheduleType.getSelectedItem()).getValue();  if (type == LAUNCH_LATER) {    updateLaunchLaterErrorMessages(errorMessages);  } else   if (type == LAUNCH_DAILY) {    updateLaunchDailyErrorMessages(errorMessages);  } else   if (type == LAUNCH_WEEKLY) {    updateLaunchWeeklyErrorMessages(errorMessages);  } else   if (type == LAUNCH_MONTHLY) {    updateLaunchMonthlyErrorMessages(errorMessages);  } else   if (type == CRON) {    updateCronErrorMessages(errorMessages);  }}  }
class C{  boolean isPrivileged(){  return isPrivileged;}  }
class C{  private void assertion(boolean b,String msg) throws javax.xml.transform.TransformerException {  if (!b) {    ErrorListener errorHandler=getErrorListener();    if (errorHandler != null) {      errorHandler.fatalError(new TransformerException(XSLMessages.createMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg}),(SAXSourceLocator)this.getSAXLocator()));    }  }}  }
class C{  public ShapeTileSimplex(PlaLineIntAlist p_line_alist){  lines_list=new ArrayList<PlaLineInt>(p_line_alist.size());  for (  PlaLineInt a_line : p_line_alist)   lines_list.add(a_line);  Collections.sort(lines_list);}  }
class C{  public void testDisconnect_UnconnectedClosed() throws IOException {  assertFalse(this.channel1.isConnected());  this.channel1.close();  assertFalse(this.channel1.isOpen());  assertEquals(this.channel1,this.channel1.disconnect());  assertFalse(this.channel1.isConnected());}  }
class C{  public boolean isUnicast(){  return unicast;}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.DirectiveType createDirectiveType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.DirectiveTypeImpl();}  }
class C{  @BeforeClass public void beforeClass() throws Exception {  TestCaseUtils.startServer();  policyDN=DN.valueOf(policyDNString);}  }
class C{  public Transformer newTransformer(){  return new TransformerImpl(this);}  }
class C{  public boolean isRequiredOrOptional(final AttributeType attributeType){  return isRequired(attributeType) || isOptional(attributeType);}  }
class C{  public ExtensionFileComparator(){  this.caseSensitivity=IOCase.SENSITIVE;}  }
class C{  private <T>MenuResult<Boolean> runMenu(final PropertyDefinition<T> d,MenuBuilder<T> builder){  builder.addHelpOption(new PropertyHelpCallback(mo.getManagedObjectDefinition(),d));  builder.addQuitOption();  Menu<T> menu=builder.toMenu();  MenuResult<T> result;  try {    app.println();    result=menu.run();  } catch (  ClientException e) {    this.e=e;    return null;  }  if (result.isSuccess()) {    Collection<T> values=result.getValues();    SortedSet<T> newValues=new TreeSet<>(d);    newValues.addAll(values);    SortedSet<T> oldValues=new TreeSet<>(mo.getPropertyValues(d));    mo.setPropertyValues(d,values);    isLastChoiceReset=values.isEmpty();    registerModification(d,newValues,oldValues);    app.println();    app.pressReturnToContinue();    return MenuResult.success(false);  } else   if (result.isCancel()) {    app.println();    app.pressReturnToContinue();    return MenuResult.success(false);  } else {    return MenuResult.quit();  }}  }
class C{  protected static Set updateAndGetRemovableOCs(Set origSet,Set removeOCs){  Set returnOCs=removeOCs;  if (removeOCs != null && !removeOCs.isEmpty()) {    returnOCs=new HashSet();    Iterator itr1=origSet.iterator();    while (itr1.hasNext()) {      String origOC=(String)itr1.next();      Iterator itr2=removeOCs.iterator();      while (itr2.hasNext()) {        String removeOC=(String)itr2.next();        if (origOC.equalsIgnoreCase(removeOC)) {          returnOCs.add(origOC);          break;        }      }    }    origSet.removeAll(returnOCs);  }  return returnOCs;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementnotfounderr.class,args);}  }
class C{  public static Permission decode(String accessType,String rights) throws AciException {  return new Permission(accessType,rights);}  }
class C{  public String toString(){  try {    return parens(exp1,true) + " " + opString()+ " "+ parens(exp2,false);  } catch (  BadBinaryOpValueExpException ex) {    return "invalid expression";  }}  }
class C{  @SuppressWarnings("unchecked") private <C1 extends ConfigurationClient>List<ManagedObject<? extends C1>> findInstances(ManagementContext context,AbstractManagedObjectDefinition<C1,?> mod) throws LdapException {  List<ManagedObject<? extends C1>> instances=new LinkedList<>();  if (mod == RootCfgDefn.getInstance()) {    instances.add((ManagedObject<? extends C1>)context.getRootConfigurationManagedObject());  } else {    for (    RelationDefinition<? super C1,?> rd : mod.getAllReverseRelationDefinitions()) {      for (      ManagedObject<?> parent : findInstances(context,rd.getParentDefinition())) {        try {          if (rd instanceof SingletonRelationDefinition) {            SingletonRelationDefinition<? super C1,?> srd=(SingletonRelationDefinition<? super C1,?>)rd;            ManagedObject<?> mo=parent.getChild(srd);            if (mo.getManagedObjectDefinition().isChildOf(mod)) {              instances.add((ManagedObject<? extends C1>)mo);            }          } else           if (rd instanceof OptionalRelationDefinition) {            OptionalRelationDefinition<? super C1,?> ord=(OptionalRelationDefinition<? super C1,?>)rd;            ManagedObject<?> mo=parent.getChild(ord);            if (mo.getManagedObjectDefinition().isChildOf(mod)) {              instances.add((ManagedObject<? extends C1>)mo);            }          } else           if (rd instanceof InstantiableRelationDefinition) {            InstantiableRelationDefinition<? super C1,?> ird=(InstantiableRelationDefinition<? super C1,?>)rd;            for (            String name : parent.listChildren(ird)) {              ManagedObject<?> mo=parent.getChild(ird,name);              if (mo.getManagedObjectDefinition().isChildOf(mod)) {                instances.add((ManagedObject<? extends C1>)mo);              }            }          }        } catch (        OperationsException e) {        }      }    }  }  return instances;}  }
class C{  private ConfigManagerUMS() throws ConfigManagerException {  _cch=new Hashtable();  _checkListCache=new Cache(10000);  String[] args=new String[1];  try {    DSConfigMgr dm=DSConfigMgr.getDSConfigMgr();    ServerInstance si=dm.getServerInstance(LDAPUser.Type.AUTH_ADMIN);    _rootDN=si.getBaseDN();    _root=DN.valueOf(_rootDN);    _rootDN=_root.toString().toLowerCase();    if (_debug.messageEnabled())     _debug.message("ConfigManager->Constructor: root DN " + _rootDN);    String p=si.getAuthID();    _principal=new AuthPrincipal(p);    String psswd=(String)AccessController.doPrivileged(new ServerInstanceAction(si));    AuthContext ac=new AuthContext(_principal,psswd.toCharArray());    SSOToken token=ac.getSSOToken();    try {      SSOTokenManager.getInstance().validateToken(token);    } catch (    SSOException e) {      args[0]=e.toString();      throw new ConfigManagerException(i18n.getString(IUMSConstants.INVALID_TOKEN,args));    }    _smapi=new ServiceConfigManager(token,UMS_SRVC,UMS_VERSION);    _listener=new CMListener();    _lid=_smapi.addListener(_listener);  } catch (  Exception e) {    _debug.error("ConfigManager->Constructor: Caught exception " + e);    e.printStackTrace();    args[0]=e.toString();    throw new ConfigManagerException(i18n.getString(IUMSConstants.ERROR_CM,args));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  int length;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  child=employeeList.item(0);  childName=child.getNodeName();  if (equals(13,length)) {    assertEquals("childName_w_whitespace","#text",childName);  } else {    assertEqualsAutoCase("element","childName_wo_whitespace","em",childName);  }}  }
class C{  public static PasswordModifyExtendedRequest newPasswordModifyExtendedRequest(){  return new PasswordModifyExtendedRequestImpl();}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  return retval.append(entityTag);}  }
class C{  public void removeDeleteActionListener(ActionListener listener){  deleteButton.removeActionListener(listener);}  }
class C{  public Instant minusNanos(long nanosToSubtract){  if (nanosToSubtract == Long.MIN_VALUE) {    return plusNanos(Long.MAX_VALUE).plusNanos(1);  }  return plusNanos(-nanosToSubtract);}  }
class C{  public void initFullUpdate(int destId,long nEntries){  if (createReader) {    reader=new BrokerReader(rb,serverId);  }  debugInfo("Broker " + serverId + " initializer sending InitializeTargetMsg to server "+ destId);  this.destId=destId;  this.nEntries=nEntries;  RoutableMsg initTargetMsg=new InitializeTargetMsg(EXAMPLE_DN_,serverId,destId,serverId,nEntries,initWindow);  rb.publish(initTargetMsg);  String topEntry="dn: " + EXAMPLE_DN + "\n"+ "objectClass: top\n"+ "objectClass: domain\n"+ "dc: example\n"+ "entryUUID: 11111111-1111-1111-1111-111111111111\n\n";  EntryMsg entryMsg=new EntryMsg(serverId,destId,topEntry.getBytes(),1);  rb.publish(entryMsg);}  }
class C{  public void testCase02_FrequencyChangePerformance() throws Exception {  long startTime=System.currentTimeMillis();  Log.i(TAG,"[Performance test][FmRadio] decrease frequency start [" + startTime + "]");  clickView(mButtonDecrease);  sleep(WAIT_UI_STATE_CHANGE);  startTime=System.currentTimeMillis();  Log.i(TAG,"[Performance test][FmRadio] increase frequency start [" + startTime + "]");  clickView(mButtonIncrease);  sleep(WAIT_UI_STATE_CHANGE);}  }
class C{  public OpenDJLoggerAdapter(final String name){  this.tracer=DebugLogger.getTracer(name);  this.name=LoggingCategoryNames.getCategoryName(name);}  }
class C{  public boolean withFloorPlan(float x,float y){  float[] goal=convertMapXYToScreenXY(x,y);  return goal[0] > 0 && goal[0] < mapLayer.getImage().getWidth() && goal[1] > 0 && goal[1] < mapLayer.getImage().getHeight();}  }
class C{  protected void changeSessionID(Request request,String sessionId,String newSessionID,Session catalinaSession){  fireLifecycleEvent("Before session migration",catalinaSession);  catalinaSession.getManager().changeSessionId(catalinaSession,newSessionID);  changeRequestSessionID(request,sessionId,newSessionID);  fireLifecycleEvent("After session migration",catalinaSession);  if (log.isDebugEnabled()) {    log.debug(sm.getString("jvmRoute.changeSession",sessionId,newSessionID));  }}  }
class C{  private static Object invokePrimitive(Object a,String op,Object b){switch (op) {case LtRuntime.add:    a=prepareNumber(a);  if (a == null)   break;b=prepareNumber(b);if (b == null) break;int topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() + ((Number)b).intValue();if (topType == 2) return ((Number)a).floatValue() + ((Number)b).floatValue();if (topType == 3) return ((Number)a).longValue() + ((Number)b).longValue();return ((Number)a).doubleValue() + ((Number)b).doubleValue();case LtRuntime.and:if (a instanceof Boolean && b instanceof Boolean) return (Boolean)a & (Boolean)b;a=prepareNumber(a);if (a == null) break;b=prepareNumber(b);if (b == null) break;topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() & ((Number)b).intValue();if (topType == 2) break;if (topType == 3) return ((Number)a).longValue() & ((Number)b).longValue();break;case LtRuntime.or:if (a instanceof Boolean && b instanceof Boolean) return (Boolean)a | (Boolean)b;a=prepareNumber(a);if (a == null) break;b=prepareNumber(b);if (b == null) break;topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() | ((Number)b).intValue();if (topType == 2) break;if (topType == 3) return ((Number)a).longValue() | ((Number)b).longValue();break;case LtRuntime.divide:a=prepareNumber(a);if (a == null) break;b=prepareNumber(b);if (b == null) break;topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() / ((Number)b).intValue();if (topType == 2) return ((Number)a).floatValue() / ((Number)b).floatValue();if (topType == 3) return ((Number)a).longValue() / ((Number)b).longValue();return ((Number)a).doubleValue() / ((Number)b).doubleValue();case LtRuntime.ge:double x;double y;if (a instanceof Number) x=((Number)a).doubleValue(); else if (a instanceof Character) x=(Character)a; else break;if (b instanceof Number) y=((Number)b).doubleValue(); else if (b instanceof Character) y=((Character)b); else break;return x >= y;case LtRuntime.gt:if (a instanceof Number) x=((Number)a).doubleValue(); else if (a instanceof Character) x=(Character)a; else break;if (b instanceof Number) y=((Number)b).doubleValue(); else if (b instanceof Character) y=((Character)b); else break;return x > y;case LtRuntime.le:if (a instanceof Number) x=((Number)a).doubleValue(); else if (a instanceof Character) x=(Character)a; else break;if (b instanceof Number) y=((Number)b).doubleValue(); else if (b instanceof Character) y=((Character)b); else break;return x <= y;case LtRuntime.lt:if (a instanceof Number) x=((Number)a).doubleValue(); else if (a instanceof Character) x=(Character)a; else break;if (b instanceof Number) y=((Number)b).doubleValue(); else if (b instanceof Character) y=((Character)b); else break;return x < y;case LtRuntime.multiply:a=prepareNumber(a);if (a == null) break;b=prepareNumber(b);if (b == null) break;topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() * ((Number)b).intValue();if (topType == 2) return ((Number)a).floatValue() * ((Number)b).floatValue();if (topType == 3) return ((Number)a).longValue() * ((Number)b).longValue();return ((Number)a).doubleValue() * ((Number)b).doubleValue();case LtRuntime.remainder:a=prepareNumber(a);if (a == null) break;b=prepareNumber(b);if (b == null) break;topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() % ((Number)b).intValue();if (topType == 2) break;if (topType == 3) return ((Number)a).longValue() % ((Number)b).longValue();break;case LtRuntime.shiftLeft:a=prepareNumber(a);if (a == null) break;b=prepareNumber(b);if (b == null) break;topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() << ((Number)b).intValue();if (topType == 2) break;if (topType == 3) return ((Number)a).longValue() << ((Number)b).longValue();break;case LtRuntime.shiftRight:a=prepareNumber(a);if (a == null) break;b=prepareNumber(b);if (b == null) break;topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() >> ((Number)b).intValue();if (topType == 2) break;if (topType == 3) return ((Number)a).longValue() >> ((Number)b).longValue();break;case LtRuntime.subtract:a=prepareNumber(a);if (a == null) break;b=prepareNumber(b);if (b == null) break;topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() - ((Number)b).intValue();if (topType == 2) return ((Number)a).floatValue() - ((Number)b).floatValue();if (topType == 3) return ((Number)a).longValue() - ((Number)b).longValue();return ((Number)a).doubleValue() - ((Number)b).doubleValue();case LtRuntime.unsignedShiftRight:a=prepareNumber(a);if (a == null) break;b=prepareNumber(b);if (b == null) break;topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() >>> ((Number)b).intValue();if (topType == 2) break;if (topType == 3) return ((Number)a).longValue() >>> ((Number)b).longValue();break;case LtRuntime.xor:a=prepareNumber(a);if (a == null) break;b=prepareNumber(b);if (b == null) break;topType=topType(a,b);if (topType == 1) return ((Number)a).intValue() ^ ((Number)b).intValue();if (topType == 2) break;if (topType == 3) return ((Number)a).longValue() ^ ((Number)b).longValue();break;default :throw new LtRuntimeException("unknown two-variable operation method " + op);}throw new LtRuntimeException("cannot invoke " + a + " "+ op+ " "+ b);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  EntitiesModel model=(EntitiesModel)getModel();  AMPropertySheet prop=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  String universalId=(String)getPageSessionAttribute(UNIVERSAL_ID);  try {    Map oldValues=model.getAttributeValues(universalId,false);    Map values=prop.getAttributeValues(oldValues,true,model);    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    model.modifyEntity(curRealm,universalId,values);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  static XMPNode findChildNode(XMPNode parent,String childName,boolean createNodes) throws XMPException {  if (!parent.getOptions().isSchemaNode() && !parent.getOptions().isStruct()) {    if (!parent.isImplicit()) {      throw new XMPException("Named children only allowed for schemas and structs",XMPError.BADXPATH);    } else     if (parent.getOptions().isArray()) {      throw new XMPException("Named children not allowed for arrays",XMPError.BADXPATH);    } else     if (createNodes) {      parent.getOptions().setStruct(true);    }  }  XMPNode childNode=parent.findChildByName(childName);  if (childNode == null && createNodes) {    PropertyOptions options=new PropertyOptions();    childNode=new XMPNode(childName,options);    childNode.setImplicit(true);    parent.addChild(childNode);  }  assert childNode != null || !createNodes;  return childNode;}  }
class C{  public static List sortKeyInMap(Map map,Locale locale){  List sorted=Collections.EMPTY_LIST;  if ((map != null) && !map.isEmpty()) {    sorted=sortItems(map.keySet(),locale);  }  return sorted;}  }
class C{  public boolean isTemporary(){  return temporary;}  }
class C{  private StringBuffer subformat(StringBuffer result,FieldDelegate delegate,boolean isNegative,boolean isInteger,int maxIntDigits,int minIntDigits,int maxFraDigits,int minFraDigits){  char zero=symbols.getZeroDigit();  int zeroDelta=zero - '0';  char grouping=symbols.getGroupingSeparator();  char decimal=isCurrencyFormat ? symbols.getMonetaryDecimalSeparator() : symbols.getDecimalSeparator();  if (digitList.isZero()) {    digitList.decimalAt=0;  }  if (isNegative) {    append(result,negativePrefix,delegate,getNegativePrefixFieldPositions(),Field.SIGN);  } else {    append(result,positivePrefix,delegate,getPositivePrefixFieldPositions(),Field.SIGN);  }  if (useExponentialNotation) {    int iFieldStart=result.length();    int iFieldEnd=-1;    int fFieldStart=-1;    int exponent=digitList.decimalAt;    int repeat=maxIntDigits;    int minimumIntegerDigits=minIntDigits;    if (repeat > 1 && repeat > minIntDigits) {      if (exponent >= 1) {        exponent=((exponent - 1) / repeat) * repeat;      } else {        exponent=((exponent - repeat) / repeat) * repeat;      }      minimumIntegerDigits=1;    } else {      exponent-=minimumIntegerDigits;    }    int minimumDigits=minIntDigits + minFraDigits;    if (minimumDigits < 0) {      minimumDigits=Integer.MAX_VALUE;    }    int integerDigits=digitList.isZero() ? minimumIntegerDigits : digitList.decimalAt - exponent;    if (minimumDigits < integerDigits) {      minimumDigits=integerDigits;    }    int totalDigits=digitList.count;    if (minimumDigits > totalDigits) {      totalDigits=minimumDigits;    }    boolean addedDecimalSeparator=false;    for (int i=0; i < totalDigits; ++i) {      if (i == integerDigits) {        iFieldEnd=result.length();        result.append(decimal);        addedDecimalSeparator=true;        fFieldStart=result.length();      }      result.append((i < digitList.count) ? (char)(digitList.digits[i] + zeroDelta) : zero);    }    if (decimalSeparatorAlwaysShown && totalDigits == integerDigits) {      iFieldEnd=result.length();      result.append(decimal);      addedDecimalSeparator=true;      fFieldStart=result.length();    }    if (iFieldEnd == -1) {      iFieldEnd=result.length();    }    delegate.formatted(INTEGER_FIELD,Field.INTEGER,Field.INTEGER,iFieldStart,iFieldEnd,result);    if (addedDecimalSeparator) {      delegate.formatted(Field.DECIMAL_SEPARATOR,Field.DECIMAL_SEPARATOR,iFieldEnd,fFieldStart,result);    }    if (fFieldStart == -1) {      fFieldStart=result.length();    }    delegate.formatted(FRACTION_FIELD,Field.FRACTION,Field.FRACTION,fFieldStart,result.length(),result);    int fieldStart=result.length();    result.append(symbols.getExponentSeparator());    delegate.formatted(Field.EXPONENT_SYMBOL,Field.EXPONENT_SYMBOL,fieldStart,result.length(),result);    if (digitList.isZero()) {      exponent=0;    }    boolean negativeExponent=exponent < 0;    if (negativeExponent) {      exponent=-exponent;      fieldStart=result.length();      result.append(symbols.getMinusSign());      delegate.formatted(Field.EXPONENT_SIGN,Field.EXPONENT_SIGN,fieldStart,result.length(),result);    }    digitList.set(negativeExponent,exponent);    int eFieldStart=result.length();    for (int i=digitList.decimalAt; i < minExponentDigits; ++i) {      result.append(zero);    }    for (int i=0; i < digitList.decimalAt; ++i) {      result.append((i < digitList.count) ? (char)(digitList.digits[i] + zeroDelta) : zero);    }    delegate.formatted(Field.EXPONENT,Field.EXPONENT,eFieldStart,result.length(),result);  } else {    int iFieldStart=result.length();    int count=minIntDigits;    int digitIndex=0;    if (digitList.decimalAt > 0 && count < digitList.decimalAt) {      count=digitList.decimalAt;    }    if (count > maxIntDigits) {      count=maxIntDigits;      digitIndex=digitList.decimalAt - count;    }    int sizeBeforeIntegerPart=result.length();    for (int i=count - 1; i >= 0; --i) {      if (i < digitList.decimalAt && digitIndex < digitList.count) {        result.append((char)(digitList.digits[digitIndex++] + zeroDelta));      } else {        result.append(zero);      }      if (isGroupingUsed() && i > 0 && (groupingSize != 0) && (i % groupingSize == 0)) {        int gStart=result.length();        result.append(grouping);        delegate.formatted(Field.GROUPING_SEPARATOR,Field.GROUPING_SEPARATOR,gStart,result.length(),result);      }    }    boolean fractionPresent=(minFraDigits > 0) || (!isInteger && digitIndex < digitList.count);    if (!fractionPresent && result.length() == sizeBeforeIntegerPart) {      result.append(zero);    }    delegate.formatted(INTEGER_FIELD,Field.INTEGER,Field.INTEGER,iFieldStart,result.length(),result);    int sStart=result.length();    if (decimalSeparatorAlwaysShown || fractionPresent) {      result.append(decimal);    }    if (sStart != result.length()) {      delegate.formatted(Field.DECIMAL_SEPARATOR,Field.DECIMAL_SEPARATOR,sStart,result.length(),result);    }    int fFieldStart=result.length();    for (int i=0; i < maxFraDigits; ++i) {      if (i >= minFraDigits && (isInteger || digitIndex >= digitList.count)) {        break;      }      if (-1 - i > (digitList.decimalAt - 1)) {        result.append(zero);        continue;      }      if (!isInteger && digitIndex < digitList.count) {        result.append((char)(digitList.digits[digitIndex++] + zeroDelta));      } else {        result.append(zero);      }    }    delegate.formatted(FRACTION_FIELD,Field.FRACTION,Field.FRACTION,fFieldStart,result.length(),result);  }  if (isNegative) {    append(result,negativeSuffix,delegate,getNegativeSuffixFieldPositions(),Field.SIGN);  } else {    append(result,positiveSuffix,delegate,getPositiveSuffixFieldPositions(),Field.SIGN);  }  return result;}  }
class C{  public static MatchedValuesFilter createEqualityFilter(String rawAttributeType,ByteString rawAssertionValue){  Reject.ifNull(rawAttributeType,rawAssertionValue);  return new MatchedValuesFilter(EQUALITY_MATCH_TYPE,rawAttributeType,rawAssertionValue,null,null,null,null);}  }
class C{  public synchronized void ensureCapacity(int minimumCapacity){  if (elementData.length < minimumCapacity) {    int next=(capacityIncrement <= 0 ? elementData.length : capacityIncrement) + elementData.length;    grow(minimumCapacity > next ? minimumCapacity : next);  }}  }
class C{  @Override public boolean completeCycle(){  return cycleStats;}  }
class C{  public String toXML(){  ListIterator li=super.listIterator();  String xmlMessages="<description\n " + "logDescription = " + "\" sniffer capture "+ "\"\n name = "+ "\" snifferTrace \" /> \n";  int i=0;  while (li.hasNext()) {    SniffMessageList sml=(SniffMessageList)li.next();    xmlMessages+=sml.toXML();  }  return xmlMessages;}  }
class C{  static <T>T newInstance(Class<T> type,String className,ClassLoader cl,boolean doFallback,boolean useBSClsLoader) throws DatatypeConfigurationException {  assert type != null;  if (System.getSecurityManager() != null) {    if (className != null && className.startsWith(DEFAULT_PACKAGE)) {      cl=null;      useBSClsLoader=true;    }  }  try {    Class<?> providerClass=getProviderClass(className,cl,doFallback,useBSClsLoader);    if (!type.isAssignableFrom(providerClass)) {      throw new ClassCastException(className + " cannot be cast to " + type.getName());    }    Object instance=providerClass.newInstance();    if (debug) {      dPrint("created new instance of " + providerClass + " using ClassLoader: "+ cl);    }    return type.cast(instance);  } catch (  ClassNotFoundException x) {    throw new DatatypeConfigurationException("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new DatatypeConfigurationException("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public void addCleanIndex(String index){  Reject.ifNull(index);  cleanList.add(index);}  }
class C{  public IOException(String message,Throwable cause){  super(message,cause);}  }
class C{  public DLSequence(ASN1Encodable[] array){  super(array);}  }
class C{  public XMLSignatureException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  public String toString(){  return str;}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  String textValue;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  textValue=textNode.getNodeValue();  assertEquals("textNodeValue","1230 North Ave. Dallas, Texas 98551",textValue);}  }
class C{  public DsnLayer(String p_name,int p_no,boolean p_is_signal,Collection<String> p_net_names){  name=p_name;  layer_no=p_no;  is_signal=p_is_signal;  net_names=p_net_names;}  }
class C{  public final Node pop(){  m_firstFree--;  Node n=m_map[m_firstFree];  m_map[m_firstFree]=null;  return n;}  }
class C{  public void dispose(){  if (isVisible()) {    setVisible(false);  }  if (isSelected()) {    try {      setSelected(false);    } catch (    PropertyVetoException pve) {    }  }  if (!isClosed) {    firePropertyChange(IS_CLOSED_PROPERTY,Boolean.FALSE,Boolean.TRUE);    isClosed=true;  }  fireInternalFrameEvent(InternalFrameEvent.INTERNAL_FRAME_CLOSED);}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  if (m_insideDTD)   return;  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(DTM.COMMENT_NODE);  int dataIndex=m_valuesOrPrefixes.stringToIndex(new String(ch,start,length));  m_previous=addNode(DTM.COMMENT_NODE,exName,m_parents.peek(),m_previous,dataIndex,false);}  }
class C{  protected void prepareMyProtocolMessageBytes(ProtocolMessage pm){  LOGGER.debug("Preparing the following protocol message to send: {}",pm.getClass());  ProtocolMessageHandler handler=pm.getProtocolMessageHandler(tlsContext);  byte[] pmBytes=handler.prepareMessage();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(pm.toString());  }  if (pm.isGoingToBeSent()) {    messageBytesCollector.appendProtocolMessageBytes(pmBytes);  }}  }
class C{  public INV_OBJREF(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  @Override public void flush(){  flush(false);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AuthorizationDecisionStatementType createAuthorizationDecisionStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthorizationDecisionStatementTypeImpl();}  }
class C{  public Node replaceChild(Node newChild,Node oldChild) throws DOMException {  if (oldChild == null || oldChild.getParentNode() != this)   return null;  ElemTemplateElement newChildElem=((ElemTemplateElement)newChild);  ElemTemplateElement oldChildElem=((ElemTemplateElement)oldChild);  ElemTemplateElement prev=(ElemTemplateElement)oldChildElem.getPreviousSibling();  if (null != prev)   prev.m_nextSibling=newChildElem;  if (m_firstChild == oldChildElem)   m_firstChild=newChildElem;  newChildElem.m_parentNode=this;  oldChildElem.m_parentNode=null;  newChildElem.m_nextSibling=oldChildElem.m_nextSibling;  oldChildElem.m_nextSibling=null;  return newChildElem;}  }
class C{  private synchronized void closeOutputStreamQuietly(){  if (!mClosed) {    try {      mOutputStream.close();      reportDecodedSizeIfApplicable();    } catch (    IOException e) {      CLog.writeToConsole(mNetworkPeerManager,Console.MessageLevel.ERROR,Console.MessageSource.NETWORK,"Could not close the output stream" + e);    } finally {      mClosed=true;    }  }}  }
class C{  synchronized public void loadDefaultFavoritesIfNecessary(){  String spKey=LauncherAppState.getSharedPreferencesKey();  SharedPreferences sp=getContext().getSharedPreferences(spKey,Context.MODE_PRIVATE);  if (sp.getBoolean(EMPTY_DATABASE_CREATED,false)) {    Log.d(TAG,"loading default workspace");    AutoInstallsLayout loader=createWorkspaceLoaderFromAppRestriction();    if (loader == null) {      loader=AutoInstallsLayout.get(getContext(),mOpenHelper.mAppWidgetHost,mOpenHelper);    }    if (loader == null) {      final Partner partner=Partner.get(getContext().getPackageManager());      if (partner != null && partner.hasDefaultLayout()) {        final Resources partnerRes=partner.getResources();        int workspaceResId=partnerRes.getIdentifier(Partner.RES_DEFAULT_LAYOUT,"xml",partner.getPackageName());        if (workspaceResId != 0) {          loader=new DefaultLayoutParser(getContext(),mOpenHelper.mAppWidgetHost,mOpenHelper,partnerRes,workspaceResId);        }      }    }    final boolean usingExternallyProvidedLayout=loader != null;    if (loader == null) {      loader=getDefaultLayoutParser();    }    createEmptyDB();    if ((mOpenHelper.loadFavorites(mOpenHelper.getWritableDatabase(),loader) <= 0) && usingExternallyProvidedLayout) {      createEmptyDB();      mOpenHelper.loadFavorites(mOpenHelper.getWritableDatabase(),getDefaultLayoutParser());    }    clearFlagEmptyDbCreated();  }}  }
class C{  public ResourceResults(){}  }
class C{  public static String formatDouble(double d){  return formatDouble(d,null);}  }
class C{  public GregorianCalendar(int year,int month,int dayOfMonth,int hourOfDay,int minute){  this(year,month,dayOfMonth,hourOfDay,minute,0,0);}  }
class C{  public RMRealmAddViewBean(){  super("RMRealmAdd");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public void mark(int readAheadLimit) throws IOException {  if (readAheadLimit < 0) {    throw new IllegalArgumentException("Read-ahead limit < 0");  }synchronized (lock) {    ensureOpen();    this.readAheadLimit=readAheadLimit;    markedChar=nextChar;    markedSkipLF=skipLF;  }}  }
class C{  private void mapToSerial(Map<String,Class<?>> map) throws SerialException {  try {    for (int i=0; i < attribs.length; i++) {      if (attribs[i] instanceof Struct) {        attribs[i]=new SerialStruct((Struct)attribs[i],map);      } else       if (attribs[i] instanceof SQLData) {        attribs[i]=new SerialStruct((SQLData)attribs[i],map);      } else       if (attribs[i] instanceof Blob) {        attribs[i]=new SerialBlob((Blob)attribs[i]);      } else       if (attribs[i] instanceof Clob) {        attribs[i]=new SerialClob((Clob)attribs[i]);      } else       if (attribs[i] instanceof Ref) {        attribs[i]=new SerialRef((Ref)attribs[i]);      } else       if (attribs[i] instanceof java.sql.Array) {        attribs[i]=new SerialArray((java.sql.Array)attribs[i],map);      }    }  } catch (  SQLException e) {    throw new SerialException(e.getMessage());  }  return;}  }
class C{  public void write(int b) throws IOException {  if (sink == null) {    throw new IOException("Pipe not connected");  }  sink.receive(b);}  }
class C{  public ReconciliationContext(ReconciliationService.ReconAction reconAction,ObjectMapping mapping,Context callingContext,JsonValue reconParams,JsonValue overridingConfig,ReconciliationService service) throws BadRequestException {  this.reconAction=reconAction;  this.mapping=mapping;  this.reconId=callingContext.getId();  this.reconStat=new ReconciliationStatistic(this);  this.reconParams=reconParams;  this.overridingConfig=overridingConfig;  this.service=service;  reconTypeHandler=createReconTypeHandler(reconAction);  int noOfThreads=mapping.getTaskThreads();  if (noOfThreads > 0) {    executor=Executors.newFixedThreadPool(noOfThreads);  } else {    executor=null;  }}  }
class C{  public synchronized void readExternal(ObjectInput is) throws IOException, ClassNotFoundException {  String rcn=null;  mimeType=(MimeType)is.readObject();  if (mimeType != null) {    humanPresentableName=mimeType.getParameter("humanPresentableName");    mimeType.removeParameter("humanPresentableName");    rcn=mimeType.getParameter("class");    if (rcn == null) {      throw new IOException("no class parameter specified in: " + mimeType);    }  }  try {    representationClass=(Class)is.readObject();  } catch (  OptionalDataException ode) {    if (!ode.eof || ode.length != 0) {      throw ode;    }    if (rcn != null) {      representationClass=DataFlavor.tryToLoadClass(rcn,getClass().getClassLoader());    }  }}  }
class C{  protected ImageWriteParam(){}  }
class C{  public JSONObject toJSONObject() throws JSONException {  JSONObject jo=new JSONObject();  if (pSubjectName != null) {    jo.put("pSubjectName",pSubjectName);  }  if (eSubjects == null) {    return jo;  }  for (  EntitlementSubject eSubject : eSubjects) {    JSONObject subjo=new JSONObject();    subjo.put("className",eSubject.getClass().getName());    subjo.put("state",eSubject.getState());    jo.append("memberESubjects",subjo);  }  return jo;}  }
class C{  public boolean isExpanded(){  return expanded;}  }
class C{  @Inject public AuditServiceProviderImpl(AuditServiceConfigurationProvider configProvider,ShutdownManager shutdownManager){  this.configProvider=configProvider;  this.shutdownManager=shutdownManager;  this.eventTopicsMetaData=configProvider.getEventTopicsMetaData();  this.defaultAuditService=createDefaultAuditService();  registerListeners();}  }
class C{  @DataProvider(name="createCSN") public Object[][] createCSNData(){  long time[]={1,TimeThread.getTime()};  int seq[]={0,123};  int id[]={1,45};  Object[][] obj=new Object[time.length][5];  for (int i=0; i < time.length; i++) {    obj[i][0]=new CSN(time[i],seq[i],id[i]);    obj[i][1]=new CSN(time[i],seq[i],id[i]);    obj[i][2]=new CSN(time[i] + 1,seq[i],id[i]);    obj[i][3]=new CSN(time[i],seq[i] + 1,id[i]);    obj[i][4]=new CSN(time[i],seq[i],id[i] + 1);  }  return obj;}  }
class C{  public String toString(){  if (myToString == null) {    myToString=this.getClass().getName() + "(name=" + getTypeName()+ ")";  }  return myToString;}  }
class C{  static ZoneRules readExternal(DataInput in) throws IOException, ClassNotFoundException {  int stdSize=in.readInt();  long[] stdTrans=(stdSize == 0) ? EMPTY_LONG_ARRAY : new long[stdSize];  for (int i=0; i < stdSize; i++) {    stdTrans[i]=Ser.readEpochSec(in);  }  ZoneOffset[] stdOffsets=new ZoneOffset[stdSize + 1];  for (int i=0; i < stdOffsets.length; i++) {    stdOffsets[i]=Ser.readOffset(in);  }  int savSize=in.readInt();  long[] savTrans=(savSize == 0) ? EMPTY_LONG_ARRAY : new long[savSize];  for (int i=0; i < savSize; i++) {    savTrans[i]=Ser.readEpochSec(in);  }  ZoneOffset[] savOffsets=new ZoneOffset[savSize + 1];  for (int i=0; i < savOffsets.length; i++) {    savOffsets[i]=Ser.readOffset(in);  }  int ruleSize=in.readByte();  ZoneOffsetTransitionRule[] rules=(ruleSize == 0) ? EMPTY_LASTRULES : new ZoneOffsetTransitionRule[ruleSize];  for (int i=0; i < ruleSize; i++) {    rules[i]=ZoneOffsetTransitionRule.readExternal(in);  }  return new ZoneRules(stdTrans,stdOffsets,savTrans,savOffsets,rules);}  }
class C{  protected void tearDown() throws Exception {  if (rt != null)   rt.interrupt();  super.tearDown();}  }
class C{  public boolean validate(String value,String rule){  return validate(value);}  }
class C{  public SQLNonTransientException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public void update(Graphics g){  paint(g);}  }
class C{  @Override public void init(Subject subject,Map sharedState,Map options){  this.sharedState=sharedState;  authLoginModule.init(subject,sharedState,options);}  }
class C{  public Node removeNamedItem(String name){  throw new DTMException(DTMException.NO_MODIFICATION_ALLOWED_ERR);}  }
class C{  private static boolean isServiceURLValid(){  String protocol="http";  String port="80";  String hostName;  Map map=instance.defValues;  String hostURL=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_URL);  boolean valid=(hostURL != null) && (hostURL.length() > 0);  try {    if (valid) {      if ((hostURL.indexOf("http",0) == -1) && (hostURL.indexOf("https",0) == -1)) {        int idx=hostURL.lastIndexOf(":");        if ((idx != -1)) {          port=hostURL.substring(idx + 1);          hostName=hostURL.substring(0,idx);        } else {          hostName=hostURL;        }        if (port.equals("443")) {          protocol="https";        }      } else {        URL serverURL=new URL(hostURL);        int intPort=serverURL.getPort();        protocol=serverURL.getProtocol();        if (intPort < 0) {          if (protocol.equalsIgnoreCase("https")) {            port="443";          }        } else {          port=Integer.toString(intPort);        }        hostName=serverURL.getHost();      }      if (StringUtils.isNotEmpty(hostName)) {        map.put(SetupConstants.CONFIG_VAR_SERVER_HOST,hostName);        map.put(SetupConstants.CONFIG_VAR_SERVER_PROTO,protocol);        map.put(SetupConstants.CONFIG_VAR_SERVER_PORT,port);        map.put(SetupConstants.CONFIG_VAR_SERVER_URL,protocol + "://" + hostName+ ":"+ port);      } else {        valid=false;      }    }  } catch (  MalformedURLException mue) {    valid=false;  }  return valid;}  }
class C{  private void checkActionSupport(Action actionType){  if (!isSupported(actionType)) {    throw new UnsupportedOperationException("The " + actionType.name() + " action is not supported on the current platform!");  }}  }
class C{  public void testGetPrivateKey(){  createParams(false,false);  KeyStore.PrivateKeyEntry ksPKE=new KeyStore.PrivateKeyEntry(testPrivateKey,testChain);  assertEquals("Incorrect PrivateKey",testPrivateKey,ksPKE.getPrivateKey());}  }
class C{  public ContextAndRequest(Context context,Request request){  this.context=context;  this.request=request;}  }
class C{  public void transform(float[] srcPts,int srcOff,float[] dstPts,int dstOff,int numPts){  double M00, M01, M02, M10, M11, M12;  if (dstPts == srcPts && dstOff > srcOff && dstOff < srcOff + numPts * 2) {    System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);    srcOff=dstOff;  }switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=(float)(M00 * x + M01 * y + M02);dstPts[dstOff++]=(float)(M10 * x + M11 * y + M12);}return;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=(float)(M00 * x + M01 * y);dstPts[dstOff++]=(float)(M10 * x + M11 * y);}return;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=(float)(M01 * srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(M10 * x + M12);}return;case (APPLY_SHEAR):M01=m01;M10=m10;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=(float)(M01 * srcPts[srcOff++]);dstPts[dstOff++]=(float)(M10 * x);}return;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=(float)(M00 * srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(M11 * srcPts[srcOff++] + M12);}return;case (APPLY_SCALE):M00=m00;M11=m11;while (--numPts >= 0) {dstPts[dstOff++]=(float)(M00 * srcPts[srcOff++]);dstPts[dstOff++]=(float)(M11 * srcPts[srcOff++]);}return;case (APPLY_TRANSLATE):M02=m02;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=(float)(srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(srcPts[srcOff++] + M12);}return;case (APPLY_IDENTITY):if (srcPts != dstPts || srcOff != dstOff) {System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);}return;}}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  protected void maybeUpdateLayoutState(){  if (updateLayoutStateNeeded != 0) {    updateLayoutState();    updateLayoutStateNeeded=0;  }}  }
class C{  public DispatcherThreadPool(){  this(ExecutorsPool.getCachedExecutorService());}  }
class C{  public void schemaChanged(String serviceName,String version){  if (debug.messageEnabled()) {    debug.message("IdRepoPluginsCache: Schema changed called" + " Service name: " + serviceName);  }  clearIdRepoPluginsCache();}  }
class C{  public static Optional<String> trimStart(final String input){  return Optional.ofNullable(input).filter(null).map(null);}  }
class C{  public static int generateViewId(){  for (; ; ) {    final int result=sNextGeneratedId.get();    int newValue=result + 1;    if (newValue > 0x00FFFFFF)     newValue=1;    if (sNextGeneratedId.compareAndSet(result,newValue)) {      return result;    }  }}  }
class C{  public JKDataAccessException(){  super();}  }
class C{  public void insert_string(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_string",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_string(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {  in.defaultReadObject();  if (outputStream == null && duplicateContentBuffer != null) {    outputStream=new ByteArrayOutputStream();    write(duplicateContentBuffer);    duplicateContentBuffer=null;  }}  }
class C{  private void ensureCapacity(int minCapacity){  if (minCapacity - buf.length > 0)   grow(minCapacity);}  }
class C{  public PrintWriter format(Locale l,String format,Object... args){  try {synchronized (lock) {      ensureOpen();      if ((formatter == null) || (formatter.locale() != l))       formatter=new Formatter(this,l);      formatter.format(l,format,args);      if (autoFlush)       out.flush();    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }  return this;}  }
class C{  public NullLocationException(String msg){  super(msg);}  }
class C{  public SecretBlock genSecretBlock(float[] coords,int stageZone){  return new SecretBlock(player,stageContainer,stageZone,coords[0],coords[1],ASPECT_LENGTH,tile4,yolo);}  }
class C{  public void printlnMessage(String str){  buff.append(str).append("\n");}  }
class C{  public static void addCookieToResponse(HttpServletResponse response,Cookie cookie){  if (cookie == null) {    return;  }  if (!isCookieHttpOnly()) {    response.addCookie(cookie);    return;  }  StringBuffer sb=new StringBuffer(150);  sb.append(cookie.getName()).append("=").append(cookie.getValue());  String path=cookie.getPath();  if (path != null && path.length() > 0) {    sb.append(";path=").append(path);  } else {    sb.append(";path=/");  }  String domain=cookie.getDomain();  if (domain != null && domain.length() > 0) {    sb.append(";domain=").append(domain);  }  int age=cookie.getMaxAge();  if (age > -1) {    sb.append(";max-age=").append(age);  }  if (CookieUtils.isCookieSecure()) {    sb.append(";secure");  }  sb.append(";httponly");  if (debug.messageEnabled()) {    debug.message("CookieUtils:addCookieToResponse adds " + sb);  }  response.addHeader("SET-COOKIE",sb.toString());}  }
class C{  public void makeImmutable(){  if (isMutable) {    isMutable=false;  }}  }
class C{  public boolean isIgnorableWhitespace(Text node){  boolean isIgnorable=false;  return isIgnorable;}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  DescendantIterator clone=(DescendantIterator)super.cloneWithReset();  clone.m_traverser=m_traverser;  clone.resetProximityPositions();  return clone;}  }
class C{  public SchemaException(final LocalizableMessage message,final Throwable cause){  super(String.valueOf(message),cause);  this.message=message;}  }
class C{  private void buildMethod(StringBuilder sb,MethodDef methodDef,int indentation) throws SyntaxException {  assertNoAnno(methodDef.annos);  assertNoType(methodDef.returnType);  assertNoModifier(methodDef.modifiers);  buildIndentation(sb,indentation);  if (indentation == 0) {    sb.append("function ").append(methodDef.name).append("(");  } else {    sb.append("this.").append(methodDef.name).append(" = function(");  }  buildParameters(sb,methodDef.params);  sb.append(") {\n");  buildDefaultValues(sb,methodDef.params,indentation + INDENT);  buildStatements(sb,methodDef.body,indentation + INDENT);  buildIndentation(sb,indentation);  sb.append("}\n");}  }
class C{  boolean isOrdered(){  return m_isOrdered;}  }
class C{  public GeneralLog(long id,long timestamp,String text,int level){  super(id,timestamp,text);  this.level=level;}  }
class C{  public void testConstrStringException(){  String a="-238768.787678287a+10";  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public void paintInternalFrameBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("Internal Connection Handler");}  }
class C{  public static void enableBackend(String backendID) throws DirectoryException {  enableBackend(backendID,TRUE_VALUE,ERR_TASK_CANNOT_ENABLE_BACKEND);}  }
class C{  public LastNameTag(){}  }
class C{  public static boolean newSessionArgExists(Hashtable reqDataHash){  String arg=(String)reqDataHash.get("arg");  boolean newSessionArgExists=(arg != null) && arg.equals("newsession");  if (utilDebug.messageEnabled()) {    utilDebug.message("newSessionArgExists : " + newSessionArgExists);  }  return newSessionArgExists;}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute("/threaddump");}  }
class C{  private void updateTodaysDate(){  DateFormat dtFmt=new SimpleDateFormat("yyyy-MM-dd");  dtFmt.setTimeZone(timeZone);  todaysDate=dtFmt.format(Calendar.getInstance(timeZone).getTime());}  }
class C{  @Override public void clear(){  int count=data.size();  data.clear();  if (ani)   notifyItemRangeRemoved(0,count); else   notifyDataSetChanged();  closeAni();}  }
class C{  SignedMutableBigInteger(int val){  super(val);}  }
class C{  public NClob readNClob() throws SQLException {  return (NClob)getNextAttribute();}  }
class C{  public CallParamRule(int paramIndex){  this(paramIndex,null);}  }
class C{  public void initialize(String pdpEntityId,String pepEntityId,Map properties) throws XACMLException {}  }
class C{  public static String encryptWithSymmetricKey(String data,String encAlgorithm,String secret) throws Exception {  try {    String algorithm=encAlgorithm;    if (!algorithm.startsWith("PBEWith")) {      algorithm="PBEWithMD5And" + encAlgorithm;    }    SecretKeyFactory skFactory=SecretKeyFactory.getInstance(algorithm);    PBEKeySpec pbeKeySpec=new PBEKeySpec(secret.toCharArray());    SecretKey sKey=skFactory.generateSecret(pbeKeySpec);    Cipher cipher=Cipher.getInstance(algorithm);    cipher.init(Cipher.ENCRYPT_MODE,sKey,pbeParameterSpec);    byte[] encData=cipher.doFinal(data.getBytes("UTF-8"));    encData=addPrefix(encData);    return Base64.encode(encData);  } catch (  NoSuchAlgorithmException nse) {    throw new Exception(nse.getMessage());  }}  }
class C{  static final int advanceProbe(int probe){  probe^=probe << 13;  probe^=probe >>> 17;  probe^=probe << 5;  UNSAFE.putInt(Thread.currentThread(),PROBE,probe);  return probe;}  }
class C{  boolean isSignedJar(){  return certificates.size() > 0;}  }
class C{  private boolean sendEventToListeners(ClusterEvent event){  boolean success=true;  for (  String listenerId : Collections.unmodifiableSet(listeners.keySet())) {    logger.debug("Notifying listener {} of event {} for instance {}",listenerId,event.getType(),instanceId);    ClusterEventListener listener=listeners.get(listenerId);    if (listener != null && !listener.handleEvent(event)) {      success=false;    }  }  return success;}  }
class C{  private String formatLogLine(LoggingLevel level,LocalDateTime dateTime,String msg){  StringBuilder sb=new StringBuilder(msg.length() + 20);  sb.append(TIME_FORMATTER.format(dateTime));  sb.append(' ').append(level.displayName);  sb.append(" [").append(Thread.currentThread().getName()).append(']');  sb.append(' ').append(name);  sb.append(": ").append(msg);  return sb.toString();}  }
class C{  public void addToRequestQueue(CLIRequest request){  requestQueue.add(request);}  }
class C{  public LineIterator(final Reader reader) throws IllegalArgumentException {  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  if (reader instanceof BufferedReader) {    bufferedReader=(BufferedReader)reader;  } else {    bufferedReader=new BufferedReader(reader);  }}  }
class C{  public InvalidException(Throwable cause){  super(cause);}  }
class C{  public static Condition not(Condition condition){  return new NOTCondition(condition);}  }
class C{  public void visitBaseType(char descriptor){}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfBoolean copyTo(PdfDocument document,boolean allowDuplicating){  return (PdfBoolean)super.copyTo(document,allowDuplicating);}  }
class C{  private static int[][] calculateBlackPoints(byte[] luminances,int subWidth,int subHeight,int width,int height){  int[][] blackPoints=new int[subHeight][subWidth];  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int sum=0;      int min=0xFF;      int max=0;      for (int yy=0, offset=yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset+=width) {        for (int xx=0; xx < BLOCK_SIZE; xx++) {          int pixel=luminances[offset + xx] & 0xFF;          sum+=pixel;          if (pixel < min) {            min=pixel;          }          if (pixel > max) {            max=pixel;          }        }        if (max - min > MIN_DYNAMIC_RANGE) {          for (yy++, offset+=width; yy < BLOCK_SIZE; yy++, offset+=width) {            for (int xx=0; xx < BLOCK_SIZE; xx++) {              sum+=luminances[offset + xx] & 0xFF;            }          }        }      }      int average=sum >> (BLOCK_SIZE_POWER * 2);      if (max - min <= MIN_DYNAMIC_RANGE) {        average=min / 2;        if (y > 0 && x > 0) {          int averageNeighborBlackPoint=(blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) / 4;          if (min < averageNeighborBlackPoint) {            average=averageNeighborBlackPoint;          }        }      }      blackPoints[y][x]=average;    }  }  return blackPoints;}  }
class C{  private void writeSearch(SearchRequestProtocolOp searchRequest) throws IOException {  LDAPWriter writer=connection.getLDAPWriter();  LDAPMessage requestMessage=new LDAPMessage(nextMessageID.getAndIncrement(),searchRequest,new ArrayList<Control>());  writer.writeMessage(requestMessage);}  }
class C{  public INVALID_TRANSACTION(){  this("");}  }
class C{  public void rescanCurrentDirectory(JFileChooser a){  for (int i=0; i < uis.size(); i++) {    ((FileChooserUI)(uis.elementAt(i))).rescanCurrentDirectory(a);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  String publicId;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation1");  publicId=notationNode.getPublicId();  assertEquals("publicId","notation1File",publicId);}  }
class C{  protected View createChild(String name){  if (name.equals(VALUE_TEXTFIELD)) {    if (model.getValueOptionList() == null) {      return new TextField(this,name,null);    } else {      return new CCSelect(this,name,(Object)null,model.getValueOptionList());    }  } else {    return super.createChild(name);  }}  }
class C{  public Hyphenation hyphenate(String word){  return hyphenate(lang,country,hyphPathNames,word,leftMin,rightMin);}  }
class C{  public void restartable(int restartableId,Func0<Subscription> factory){  restartables.put(restartableId,factory);  if (requested.contains(restartableId))   start(restartableId);}  }
class C{  protected void startDragging(){  Component leftC=splitPane.getLeftComponent();  Component rightC=splitPane.getRightComponent();  ComponentPeer cPeer;  beginDragDividerLocation=getDividerLocation(splitPane);  draggingHW=false;  if (leftC != null && (cPeer=leftC.getPeer()) != null && !(cPeer instanceof LightweightPeer)) {    draggingHW=true;  } else   if (rightC != null && (cPeer=rightC.getPeer()) != null && !(cPeer instanceof LightweightPeer)) {    draggingHW=true;  }  if (orientation == JSplitPane.HORIZONTAL_SPLIT) {    setLastDragLocation(divider.getBounds().x);    dividerSize=divider.getSize().width;    if (!isContinuousLayout() && draggingHW) {      nonContinuousLayoutDivider.setBounds(getLastDragLocation(),0,dividerSize,splitPane.getHeight());      addHeavyweightDivider();    }  } else {    setLastDragLocation(divider.getBounds().y);    dividerSize=divider.getSize().height;    if (!isContinuousLayout() && draggingHW) {      nonContinuousLayoutDivider.setBounds(0,getLastDragLocation(),splitPane.getWidth(),dividerSize);      addHeavyweightDivider();    }  }}  }
class C{  void recomposeWhiteSpaceInfo(WhiteSpaceInfo wsi){  if (null == m_whiteSpaceInfoList)   m_whiteSpaceInfoList=new TemplateList();  m_whiteSpaceInfoList.setTemplate(wsi);}  }
class C{  public void addColumn(Object columnName,Object[] columnData){  addColumn(columnName,convertToVector(columnData));}  }
class C{  public XObject(Object obj){  setObject(obj);}  }
class C{  protected synchronized void init(){  pool=Pool.create(serverSockPool);  int defaultPollerSize=getMaxConnections();  if ((OS.IS_WIN32 || OS.IS_WIN64) && (defaultPollerSize > 1024)) {    actualPollerSize=1024;  } else {    actualPollerSize=defaultPollerSize;  }  timeouts=new SocketTimeouts(defaultPollerSize);  long pollset=allocatePoller(actualPollerSize,pool,-1);  if (pollset == 0 && actualPollerSize > 1024) {    actualPollerSize=1024;    pollset=allocatePoller(actualPollerSize,pool,-1);  }  if (pollset == 0) {    actualPollerSize=62;    pollset=allocatePoller(actualPollerSize,pool,-1);  }  pollerCount=defaultPollerSize / actualPollerSize;  pollerTime=pollTime / pollerCount;  nextPollerTime=pollerTime;  pollers=new long[pollerCount];  pollers[0]=pollset;  for (int i=1; i < pollerCount; i++) {    pollers[i]=allocatePoller(actualPollerSize,pool,-1);  }  pollerSpace=new int[pollerCount];  for (int i=0; i < pollerCount; i++) {    pollerSpace[i]=actualPollerSize;  }  desc=new long[actualPollerSize * 4];  connectionCount.set(0);  addList=new SocketList(defaultPollerSize);  closeList=new SocketList(defaultPollerSize);}  }
class C{  public org.omg.DynamicAny.DynAny member() throws org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("member",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.member();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes list) throws SAXException {  boolean debug=log.isDebugEnabled();  if (saxLog.isDebugEnabled()) {    saxLog.debug("startElement(" + namespaceURI + ","+ localName+ ","+ qName+ ")");  }  list=updateAttributes(list);  bodyTexts.push(bodyText);  bodyText=new StringBuilder();  String name=localName;  if ((name == null) || (name.length() < 1)) {    name=qName;  }  StringBuilder sb=new StringBuilder(match);  if (match.length() > 0) {    sb.append('/');  }  sb.append(name);  match=sb.toString();  if (debug) {    log.debug("  New match='" + match + "'");  }  List<Rule> rules=getRules().match(namespaceURI,match);  matches.push(rules);  if ((rules != null) && (rules.size() > 0)) {    for (int i=0; i < rules.size(); i++) {      try {        Rule rule=rules.get(i);        if (debug) {          log.debug("  Fire begin() for " + rule);        }        rule.begin(namespaceURI,name,list);      } catch (      Exception e) {        log.error("Begin event threw exception",e);        throw createSAXException(e);      }catch (      Error e) {        log.error("Begin event threw error",e);        throw e;      }    }  } else {    if (debug) {      log.debug("  No rules found matching '" + match + "'.");    }  }}  }
class C{  @DataProvider(name="arrayUpdateProvider") protected Object[][] arrayUpdateProvider(){  return new Object[][]{{new byte[]{1,2,3,4,5,6,7,8,9,10},0,10,45},{new byte[]{1,2,3,4,5,6,7,8,9,10},0,1,1},{new byte[]{1,2,3,4,5,6,7,8,9,10},0,2,3},{new byte[]{1,2,3,4,5,6,7,8,9,10},0,3,6},{new byte[]{1,2,3,4,5,6,7,8,9,10},3,1,4},{new byte[]{1,2,3,4,5,6,7,8,9,10},3,2,9},{new byte[]{1,2,3,4,5,6,7,8,9,10},3,3,15},{new byte[]{1,2,3,4,5,6,7,8,9,10},7,1,8},{new byte[]{1,2,3,4,5,6,7,8,9,10},7,2,17},{new byte[]{1,2,3,4,5,6,7,8,9,10},7,3,17},{new byte[]{1,2,3,4,5,6,7,8,9,10,11},9,2,11},{new byte[]{2,3,4,5,6,7,8,9,10,11},0,10,55},{new byte[]{118,119,120,121,122,123,124,125,126,127},0,10,1225}};}  }
class C{  synchronized boolean switchToAsyncMode(){  if (!syncMode)   throw new AssertionError();  syncMode=false;  return !isCompleted();}  }
class C{  public void updateAdsPropertiesWithServerProperties(){  adsProperties.put(ADSContext.ServerProperty.HOST_NAME,getHostName());  ServerProperty[][] sProps={{ServerProperty.LDAP_ENABLED,ServerProperty.LDAP_PORT},{ServerProperty.LDAPS_ENABLED,ServerProperty.LDAPS_PORT},{ServerProperty.ADMIN_ENABLED,ServerProperty.ADMIN_PORT},{ServerProperty.JMX_ENABLED,ServerProperty.JMX_PORT},{ServerProperty.JMXS_ENABLED,ServerProperty.JMXS_PORT}};  ADSContext.ServerProperty[][] adsProps={{ADSContext.ServerProperty.LDAP_ENABLED,ADSContext.ServerProperty.LDAP_PORT},{ADSContext.ServerProperty.LDAPS_ENABLED,ADSContext.ServerProperty.LDAPS_PORT},{ADSContext.ServerProperty.ADMIN_ENABLED,ADSContext.ServerProperty.ADMIN_PORT},{ADSContext.ServerProperty.JMX_ENABLED,ADSContext.ServerProperty.JMX_PORT},{ADSContext.ServerProperty.JMXS_ENABLED,ADSContext.ServerProperty.JMXS_PORT}};  for (int i=0; i < sProps.length; i++) {    List<?> s=(List<?>)serverProperties.get(sProps[i][0]);    List<?> p=(List<?>)serverProperties.get(sProps[i][1]);    if (s != null) {      int port=getPort(s,p);      if (port == -1) {        adsProperties.put(adsProps[i][0],"false");        if (!p.isEmpty()) {          port=(Integer)p.iterator().next();        }      } else {        adsProperties.put(adsProps[i][0],"true");      }      adsProperties.put(adsProps[i][1],String.valueOf(port));    }  }  List<?> array=(List<?>)serverProperties.get(ServerProperty.STARTTLS_ENABLED);  boolean startTLSEnabled=false;  if (array != null && !array.isEmpty()) {    startTLSEnabled=Boolean.TRUE.equals(array.get(array.size() - 1));  }  adsProperties.put(ADSContext.ServerProperty.STARTTLS_ENABLED,Boolean.toString(startTLSEnabled));  adsProperties.put(ADSContext.ServerProperty.ID,getHostPort(true).toString());  adsProperties.put(ADSContext.ServerProperty.INSTANCE_PUBLIC_KEY_CERTIFICATE,getInstancePublicKeyCertificate());}  }
class C{  private JsonValue createTestUser(String first,String last,String userPrincipalName) throws Exception {  System.out.println("1. Create a user: ");  HttpResponse<String> response=Unirest.post(azureEndpoint + "/account?_action=create").header("x-openidm-username","openidm-admin").header("x-openidm-password","openidm-admin").header("content-type","application/json").body(writeValueAsString(json(object(field("UserPrincipalName",userPrincipalName),field("LastName",last),field("FirstName",first),field("DisplayName","Mr. " + last),field("PasswordNeverExpires",false))))).asString();  return json(readJson(response.getBody()));}  }
class C{  public PKCS5S2ParametersGenerator(){  this(AndroidDigestFactory.getSHA1());}  }
class C{  private void squashMaps(Map<String,Set<String>> firstMap,Map<String,Set<String>> secondMap){  if (firstMap.isEmpty()) {    firstMap.putAll(secondMap);    return;  }  for (  Map.Entry<String,Set<String>> entry : secondMap.entrySet()) {    if (firstMap.containsKey(entry.getKey())) {      firstMap.get(entry.getKey()).addAll(entry.getValue());    } else {      firstMap.put(entry.getKey(),entry.getValue());    }  }}  }
class C{  public JKException(final String message,final Throwable cause,final boolean enableSuppression,final boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  @NonNull public static Interpolator rasterize(int samples,Interpolator interpolator){  return new RasterizeInterpolator(samples,interpolator);}  }
class C{  private void writeEndMask(int mask) throws IOException {  if (mask != 0) {    if ((mask & BOLD) != 0) {      write("</b>");    }    if ((mask & ITALIC) != 0) {      write("</i>");    }    if ((mask & UNDERLINE) != 0) {      write("</u>");    }  }}  }
class C{  public static final DataFlavor selectBestTextFlavor(DataFlavor[] availableFlavors){  if (availableFlavors == null || availableFlavors.length == 0) {    return null;  }  if (textFlavorComparator == null) {    textFlavorComparator=new TextFlavorComparator();  }  DataFlavor bestFlavor=(DataFlavor)Collections.max(Arrays.asList(availableFlavors),textFlavorComparator);  if (!bestFlavor.isFlavorTextType()) {    return null;  }  return bestFlavor;}  }
class C{  public static int sizeOfBoolean(){  return 1;}  }
class C{  public ByteArrayBuilder(int capacity){  builder=new ByteStringBuilder(capacity);}  }
class C{  public final void test_insertProviderAtLjava_security_ProviderLI(){  try {    Security.insertProviderAt(null,1);    fail("No expected NullPointerException");  } catch (  NullPointerException e) {  }  Provider p=new MyProvider();  int initNum=Security.getProviders().length;  Provider initialSecondProviderName=Security.getProviders()[1];  try {    assertEquals(initNum + 1,Security.insertProviderAt(p,-1));    assertSame(p,Security.getProviders()[initNum]);    assertEquals(-1,Security.insertProviderAt(p,1));    Security.removeProvider(p.getName());    assertEquals(initNum + 1,Security.insertProviderAt(p,initNum + 100));    assertSame(p,Security.getProviders()[initNum]);    Security.removeProvider(p.getName());    assertEquals(1,Security.insertProviderAt(p,1));    assertSame(p,Security.getProviders()[0]);    assertSame(initialSecondProviderName,Security.getProviders()[2]);  }  finally {    Security.removeProvider(p.getName());  }}  }
class C{  public void test_invalidate(){  SSLSession s=clientSession;  assertTrue(s.isValid());  s.invalidate();  assertFalse(s.isValid());}  }
class C{  protected Client loadClient(String clientType){  Client client=null;  long st=currentTimeMillis();  Map iMap=loadInternalClient(clientType);  Map eMap=loadExternalClient(clientType);  if ((iMap == null) && (eMap == null)) {    return client;  }  Map mergedMap=mergeMap(iMap,eMap);  String ct=clientType;  String parentID=getParentID(mergedMap);  OrderedSet os=new OrderedSet();  while ((parentID != null) && (!(ct.equals(parentID)))) {    os.add(parentID);    Map pMap=loadInternalClient(parentID);    if (pMap == null) {      break;    } else {      mergedMap=mergeMap(pMap,mergedMap);      ct=getClientType(pMap);      parentID=getParentID(pMap);    }  }  if (os.size() > 0) {    mergedMap.put(PARENT_ID,os);  }  mergedClientData.put(clientType,mergedMap);  client=new Client(clientType,mergedMap);  loadedClientsMap.put(clientType,client);  long end=currentTimeMillis();  if (debug.messageEnabled()) {    debug.message(CLASS + "Load Client " + clientType+ " Time (ms) = "+ (end - st));  }  return client;}  }
class C{  public synchronized boolean isNotificationEnabled(Notification notification){  String type=notification.getType();  if ((type == null) || (type.equals(AttributeChangeNotification.ATTRIBUTE_CHANGE) == false) || (!(notification instanceof AttributeChangeNotification))) {    return false;  }  String attributeName=((AttributeChangeNotification)notification).getAttributeName();  return enabledAttributes.contains(attributeName);}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  private void passwordCallback(final PasswordCallback passwordCallback){  if (authEntry == null) {    setCallbackMsg(ERR_SASL_NO_MATCHING_ENTRIES.get(userName));    return;  }  List<ByteString> clearPasswords;  try {    final AuthenticationPolicyState authState=AuthenticationPolicyState.forUser(authEntry,false);    if (!authState.isPasswordPolicy()) {      final LocalizableMessage message=ERR_SASL_ACCOUNT_NOT_LOCAL.get(mechanism,authEntry.getName());      setCallbackMsg(ResultCode.INAPPROPRIATE_AUTHENTICATION,message);      return;    }    final PasswordPolicyState pwPolicyState=(PasswordPolicyState)authState;    clearPasswords=pwPolicyState.getClearPasswords();    if (clearPasswords == null || clearPasswords.isEmpty()) {      setCallbackMsg(ERR_SASL_NO_REVERSIBLE_PASSWORDS.get(mechanism,authEntry.getName()));      return;    }  } catch (  final Exception e) {    logger.traceException(e);    setCallbackMsg(ERR_SASL_CANNOT_GET_REVERSIBLE_PASSWORDS.get(authEntry.getName(),mechanism,e));    return;  }  final char[] password=clearPasswords.get(0).toString().toCharArray();  passwordCallback.setPassword(password);}  }
class C{  @Override public void onServiceDisconnected(ComponentName className){  Log.d(TAG,"FmRadioActivity.onServiceDisconnected");}  }
class C{  public PdfCanvas resetStrokeColorRgb(){  return resetStrokeColorGray();}  }
class C{  public static Border createLoweredBevelBorder(){  return createSharedBevel(BevelBorder.LOWERED);}  }
class C{  public Object addHighlight(int p0,int p1,Highlighter.HighlightPainter p) throws BadLocationException {  if (p0 < 0) {    throw new BadLocationException("Invalid start offset",p0);  }  if (p1 < p0) {    throw new BadLocationException("Invalid end offset",p1);  }  Document doc=component.getDocument();  HighlightInfo i=(getDrawsLayeredHighlights() && (p instanceof LayeredHighlighter.LayerPainter)) ? new LayeredHighlightInfo() : new HighlightInfo();  i.painter=p;  i.p0=doc.createPosition(p0);  i.p1=doc.createPosition(p1);  highlights.addElement(i);  safeDamageRange(p0,p1);  return i;}  }
class C{  public String encodeURL(String url,String cookieName,Session session){  return encodeSessionURL(url,SessionUtils.QUERY,true,cookieName,session);}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  org.apache.xpath.VariableStack vars;  int savedStart;  if (-1 != m_stackFrame) {    vars=m_execContext.getVarStack();    savedStart=vars.getStackFrame();    vars.setStackFrame(m_stackFrame);  } else {    vars=null;    savedStart=0;  }  try {    if (DEBUG)     System.out.println("m_pattern" + m_pattern.toString());    do {      next=getNextNode();      if (DTM.NULL != next) {        if (DTMIterator.FILTER_ACCEPT == acceptNode(next,m_execContext))         break; else         continue;      } else       break;    } while (next != DTM.NULL);    if (DTM.NULL != next) {      if (DEBUG) {        System.out.println("next: " + next);        System.out.println("name: " + m_cdtm.getNodeName(next));      }      incrementCurrentPos();      return next;    } else {      m_foundLast=true;      return DTM.NULL;    }  }  finally {    if (-1 != m_stackFrame) {      vars.setStackFrame(savedStart);    }  }}  }
class C{  public UndoableEdit remove(int where,int nitems) throws BadLocationException {  if (where + nitems >= length()) {    throw new BadLocationException("Invalid remove",length() + 1);  }  String removedString=getString(where,nitems);  UndoableEdit edit=new RemoveUndo(where,removedString);  replace(where,nitems,empty,0);  return edit;}  }
class C{  public StateInteractive complete(){  if (return_state != this && actlog != null) {    actlog.start_scope(LogfileScope.COMPLETE_SCOPE);  }  return return_state;}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  public void appendCell(){  appendCell("");}  }
class C{  @Deprecated public MapCursor addCursor(int x,int y,byte direction,byte type){  return addCursor(x,y,direction,type,true);}  }
class C{  public void uninstallUI(JComponent c){  super.uninstallUI(c);  MetalToolBarUI.unregister(c);}  }
class C{  public BarcodeEAN(PdfDocument document){  super(document);  try {    x=0.8f;    font=PdfFontFactory.createFont(FontConstants.HELVETICA,PdfEncodings.WINANSI);    size=8;    baseline=size;    barHeight=size * 3;    guardBars=true;    codeType=EAN13;    code="";  } catch (  IOException e) {    throw new PdfException(e);  }}  }
class C{  int expressionCount(){  return names.length - arity;}  }
class C{  public View detachViewAndClearPreInfo(){  View original=mHost;  if (mBorder != null) {    mBorder.detachView();  }  mPreRealLeft=0;  mPreRealWidth=0;  mPreRealHeight=0;  mPreRealTop=0;  return original;}  }
class C{  public void registerServiceListener(){  configHelperFactory.addListener(new PushNotificationServiceListener());}  }
class C{  @Override public final String toString(){  if (stringRep == null) {    StringBuilder buffer=new StringBuilder();    buffer.append(this.name);    buffer.append(':');    buffer.append(Integer.toString(this.defaultPort));    stringRep=buffer.toString();  }  return stringRep;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node child;  String childName;  String childValue;  int commentCount=0;  int childType;  doc=(Document)load("staff",false);  elementList=doc.getChildNodes();  for (int indexN10057=0; indexN10057 < elementList.getLength(); indexN10057++) {    child=(Node)elementList.item(indexN10057);    childType=(int)child.getNodeType();    if (equals(8,childType)) {      childName=child.getNodeName();      assertEquals("nodeName","#comment",childName);      childValue=child.getNodeValue();      assertEquals("nodeValue"," This is comment number 1.",childValue);      commentCount=commentCount + 1;    }  }  assertEquals("commentCount",1,commentCount);}  }
class C{  private static void loadDeviceIdentifier(Context context){  ContentResolver resolver=context.getContentResolver();  String deviceIdentifier=Settings.Secure.getString(resolver,Settings.Secure.ANDROID_ID);  if (deviceIdentifier != null) {    CrashConstants.DEVICE_IDENTIFIER=tryHashStringSha256(context,deviceIdentifier);  }}  }
class C{  public DIRECTORY_SERVER_MIBImpl(boolean registeredMBean,ObjectName mibName){  super();  this.registeredSnmpMBean=registeredMBean;  this.mibObName=mibName;  logger.trace("DIRECTORY_SERVER_MIB=%s created with registerMBean=%s",this.mibObName,this.registeredSnmpMBean);}  }
class C{  public void addString(final String toAdd){  this.strings.add(toAdd);}  }
class C{  public static boolean usedInProtocol(HttpServletRequest request,String protocol){  try {    SessionProvider provider=SessionManager.getProvider();    Object session=provider.getSession(request);    return usedInProtocol(session,protocol);  } catch (  SessionException ex) {    SingleLogoutManager.debug.message("MPUtils.usedInProtocol?",ex);    return false;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens03.class,args);}  }
class C{  public void deleteCircleOfTrust(String realm,String cotName) throws COTException {  String classMethod="COTManager.deleteCircleOfTrust:";  if (realm == null) {    realm="/";  }  String[] data={cotName,realm};  isValidCOTName(realm,cotName);  try {    Set trustProviders=null;    Map attrs=configInst.getConfiguration(realm,cotName);    if (attrs != null) {      CircleOfTrustDescriptor cotDesc=new CircleOfTrustDescriptor(cotName,realm,attrs);      trustProviders=cotDesc.getTrustedProviders();    }    if (attrs == null || trustProviders == null || trustProviders.isEmpty()) {      configInst.deleteConfiguration(realm,cotName,null);      LogUtil.access(Level.INFO,LogUtil.COT_DESCRIPTOR_DELETED,data);    } else {      debug.error(classMethod + "Delete circle of trust" + " is not allowed since it contains members.");      LogUtil.error(Level.INFO,LogUtil.HAS_ENTITIES_DELETE_COT_DESCRIPTOR,data);      String[] args={cotName,realm};      throw new COTException("deleteCOTFailedHasMembers",args);    }  } catch (  ConfigurationException e) {    debug.error(classMethod,e);    String[] args={e.getMessage(),cotName,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_COT_DESCRIPTOR,args);    throw new COTException(e);  }}  }
class C{  private Builder(Event35Id other){  super(Event35Id.SCHEMA$);  if (isValidValue(fields()[0],other.description)) {    this.description=data().deepCopy(fields()[0].schema(),other.description);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.first)) {    this.first=data().deepCopy(fields()[1].schema(),other.first);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.second)) {    this.second=data().deepCopy(fields()[2].schema(),other.second);    fieldSetFlags()[2]=true;  }}  }
class C{  public static TitledBorder createTitledBorder(Border border,String title,int titleJustification,int titlePosition,Font titleFont,Color titleColor){  return new TitledBorder(border,title,titleJustification,titlePosition,titleFont,titleColor);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  static void appendLengthInfo(int numLetters,Version version,Mode mode,BitArray bits) throws WriterException {  int numBits=mode.getCharacterCountBits(version);  if (numLetters >= (1 << numBits)) {    throw new WriterException(numLetters + " is bigger than " + ((1 << numBits) - 1));  }  bits.appendBits(numLetters,numBits);}  }
class C{  public Object readObject(){  return (parsingComplete()) ? this.array[this.index++] : null;}  }
class C{  public static int mainDelete(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  LDAPConnectionOptions connectionOptions=new LDAPConnectionOptions();  LDAPDeleteOptions deleteOptions=new LDAPDeleteOptions();  LDAPConnection connection=null;  final BooleanArgument continueOnError;  final BooleanArgument deleteSubtree;  final BooleanArgument noop;  final BooleanArgument saslExternal;  final BooleanArgument showUsage;  final BooleanArgument startTLS;  final BooleanArgument trustAll;  final BooleanArgument useSSL;  final BooleanArgument verbose;  final FileBasedArgument bindPasswordFile;  final FileBasedArgument keyStorePasswordFile;  final FileBasedArgument trustStorePasswordFile;  final IntegerArgument port;  final IntegerArgument version;  final StringArgument bindDN;  final StringArgument bindPassword;  final StringArgument certNickname;  final StringArgument controlStr;  final StringArgument encodingStr;  final StringArgument filename;  final StringArgument hostName;  final StringArgument keyStorePath;  final StringArgument keyStorePassword;  final StringArgument saslOptions;  final StringArgument trustStorePath;  final StringArgument trustStorePassword;  final IntegerArgument connectTimeout;  final StringArgument propertiesFileArgument;  final BooleanArgument noPropertiesFileArgument;  Reader rdr=null;  List<String> dnStrings=new ArrayList<>();  LocalizableMessage toolDescription=INFO_LDAPDELETE_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false,true,0,1,"\"DN\"");  argParser.setShortToolDescription(REF_SHORT_DESC_LDAPDELETE.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    propertiesFileArgument=StringArgument.builder(OPTION_LONG_PROP_FILE_PATH).description(INFO_DESCRIPTION_PROP_FILE_PATH.get()).valuePlaceholder(INFO_PROP_FILE_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    argParser.setFilePropertiesArgument(propertiesFileArgument);    noPropertiesFileArgument=BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildAndAddToParser(argParser);    argParser.setNoPropertiesFileArgument(noPropertiesFileArgument);    hostName=StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(INFO_DESCRIPTION_HOST.get()).defaultValue("localhost").valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildAndAddToParser(argParser);    port=IntegerArgument.builder(OPTION_LONG_PORT).shortIdentifier(OPTION_SHORT_PORT).description(INFO_DESCRIPTION_PORT.get()).range(1,65535).defaultValue(389).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    useSSL=BooleanArgument.builder(OPTION_LONG_USE_SSL).shortIdentifier(OPTION_SHORT_USE_SSL).description(INFO_DESCRIPTION_USE_SSL.get()).buildAndAddToParser(argParser);    startTLS=BooleanArgument.builder(OPTION_LONG_START_TLS).shortIdentifier(OPTION_SHORT_START_TLS).description(INFO_DESCRIPTION_START_TLS.get()).buildAndAddToParser(argParser);    bindDN=StringArgument.builder(OPTION_LONG_BINDDN).shortIdentifier(OPTION_SHORT_BINDDN).description(INFO_DESCRIPTION_BINDDN.get()).valuePlaceholder(INFO_BINDDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPassword=StringArgument.builder(OPTION_LONG_BINDPWD).shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_DESCRIPTION_BINDPASSWORD.get()).valuePlaceholder(INFO_BINDPWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPasswordFile=FileBasedArgument.builder(OPTION_LONG_BINDPWD_FILE).shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_DESCRIPTION_BINDPASSWORDFILE.get()).valuePlaceholder(INFO_BINDPWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    filename=StringArgument.builder(OPTION_LONG_FILENAME).shortIdentifier(OPTION_SHORT_FILENAME).description(INFO_DELETE_DESCRIPTION_FILENAME.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    saslExternal=BooleanArgument.builder("useSASLExternal").shortIdentifier('r').description(INFO_DESCRIPTION_USE_SASL_EXTERNAL.get()).buildAndAddToParser(argParser);    saslOptions=StringArgument.builder(OPTION_LONG_SASLOPTION).shortIdentifier(OPTION_SHORT_SASLOPTION).description(INFO_DESCRIPTION_SASL_PROPERTIES.get()).multiValued().valuePlaceholder(INFO_SASL_OPTION_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustAll=trustAllArgument();    argParser.addArgument(trustAll);    keyStorePath=StringArgument.builder(OPTION_LONG_KEYSTOREPATH).shortIdentifier(OPTION_SHORT_KEYSTOREPATH).description(INFO_DESCRIPTION_KEYSTOREPATH.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    keyStorePassword=StringArgument.builder(OPTION_LONG_KEYSTORE_PWD).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD).description(INFO_DESCRIPTION_KEYSTOREPASSWORD.get()).valuePlaceholder(INFO_KEYSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    keyStorePasswordFile=FileBasedArgument.builder(OPTION_LONG_KEYSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD_FILE).description(INFO_DESCRIPTION_KEYSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_KEYSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    certNickname=StringArgument.builder("certNickname").shortIdentifier('N').description(INFO_DESCRIPTION_CERT_NICKNAME.get()).valuePlaceholder(INFO_NICKNAME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePath=StringArgument.builder(OPTION_LONG_TRUSTSTOREPATH).shortIdentifier(OPTION_SHORT_TRUSTSTOREPATH).description(INFO_DESCRIPTION_TRUSTSTOREPATH.get()).valuePlaceholder(INFO_TRUSTSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePassword=StringArgument.builder(OPTION_LONG_TRUSTSTORE_PWD).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePasswordFile=FileBasedArgument.builder(OPTION_LONG_TRUSTSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_TRUSTSTORE_PWD_FILE).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    deleteSubtree=BooleanArgument.builder("deleteSubtree").shortIdentifier('x').description(INFO_DELETE_DESCRIPTION_DELETE_SUBTREE.get()).buildAndAddToParser(argParser);    controlStr=StringArgument.builder("control").shortIdentifier('J').description(INFO_DESCRIPTION_CONTROLS.get()).multiValued().valuePlaceholder(INFO_LDAP_CONTROL_PLACEHOLDER.get()).buildAndAddToParser(argParser);    version=IntegerArgument.builder(OPTION_LONG_PROTOCOL_VERSION).shortIdentifier(OPTION_SHORT_PROTOCOL_VERSION).description(INFO_DESCRIPTION_VERSION.get()).defaultValue(3).valuePlaceholder(INFO_PROTOCOL_VERSION_PLACEHOLDER.get()).buildAndAddToParser(argParser);    connectTimeout=IntegerArgument.builder(OPTION_LONG_CONNECT_TIMEOUT).description(INFO_DESCRIPTION_CONNECTION_TIMEOUT.get()).lowerBound(0).defaultValue(CliConstants.DEFAULT_LDAP_CONNECT_TIMEOUT).valuePlaceholder(INFO_TIMEOUT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    encodingStr=StringArgument.builder(OPTION_LONG_ENCODING).shortIdentifier('i').description(INFO_DESCRIPTION_ENCODING.get()).valuePlaceholder(INFO_ENCODING_PLACEHOLDER.get()).buildAndAddToParser(argParser);    continueOnError=BooleanArgument.builder("continueOnError").shortIdentifier('c').description(INFO_DESCRIPTION_CONTINUE_ON_ERROR.get()).buildAndAddToParser(argParser);    noop=BooleanArgument.builder(OPTION_LONG_DRYRUN).shortIdentifier(OPTION_SHORT_DRYRUN).description(INFO_DESCRIPTION_NOOP.get()).buildAndAddToParser(argParser);    verbose=verboseArgument();    argParser.addArgument(verbose);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage,out);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return 0;  }  if (bindPassword.isPresent() && bindPasswordFile.isPresent()) {    printWrappedText(err,conflictingArgsErrorMessage(bindPassword,bindPasswordFile));    return CLIENT_SIDE_PARAM_ERROR;  }  String hostNameValue=hostName.getValue();  int portNumber=389;  try {    portNumber=port.getIntValue();  } catch (  ArgumentException ae) {    logger.traceException(ae);    argParser.displayMessageAndUsageReference(err,ae.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  try {    int versionNumber=version.getIntValue();    if (versionNumber != 2 && versionNumber != 3) {      printWrappedText(err,ERR_DESCRIPTION_INVALID_VERSION.get(versionNumber));      return CLIENT_SIDE_PARAM_ERROR;    }    connectionOptions.setVersionNumber(versionNumber);  } catch (  ArgumentException ae) {    logger.traceException(ae);    argParser.displayMessageAndUsageReference(err,ae.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  String bindDNValue=bindDN.getValue();  String fileNameValue=filename.getValue();  String bindPasswordValue;  try {    bindPasswordValue=getPasswordValue(bindPassword,bindPasswordFile,bindDNValue,out,err);  } catch (  Exception ex) {    logger.traceException(ex);    printWrappedText(err,ex.getMessage());    return CLIENT_SIDE_PARAM_ERROR;  }  String keyStorePathValue=keyStorePath.getValue();  String trustStorePathValue=trustStorePath.getValue();  String keyStorePasswordValue=null;  if (keyStorePassword.isPresent()) {    keyStorePasswordValue=keyStorePassword.getValue();  } else   if (keyStorePasswordFile.isPresent()) {    keyStorePasswordValue=keyStorePasswordFile.getValue();  }  String trustStorePasswordValue=null;  if (trustStorePassword.isPresent()) {    trustStorePasswordValue=trustStorePassword.getValue();  } else   if (trustStorePasswordFile.isPresent()) {    trustStorePasswordValue=trustStorePasswordFile.getValue();  }  deleteOptions.setShowOperations(noop.isPresent());  deleteOptions.setVerbose(verbose.isPresent());  deleteOptions.setContinueOnError(continueOnError.isPresent());  deleteOptions.setEncoding(encodingStr.getValue());  deleteOptions.setDeleteSubtree(deleteSubtree.isPresent());  if (controlStr.isPresent()) {    for (    String ctrlString : controlStr.getValues()) {      Control ctrl=LDAPToolUtils.getControl(ctrlString,err);      if (ctrl == null) {        printWrappedText(err,ERR_TOOL_INVALID_CONTROL_STRING.get(ctrlString));        return CLIENT_SIDE_PARAM_ERROR;      }      deleteOptions.getControls().add(ctrl);    }  }  if (deleteOptions.getDeleteSubtree()) {    Control control=new SubtreeDeleteControl(false);    deleteOptions.getControls().add(control);  }  ArrayList<String> trailingArgs=argParser.getTrailingArguments();  dnStrings.addAll(trailingArgs);  connectionOptions.setSASLExternal(saslExternal.isPresent());  if (saslOptions.isPresent()) {    for (    String saslOption : saslOptions.getValues()) {      boolean val=saslOption.startsWith("mech=") ? connectionOptions.setSASLMechanism(saslOption) : connectionOptions.addSASLProperty(saslOption);      if (!val) {        return CLIENT_SIDE_PARAM_ERROR;      }    }  }  connectionOptions.setUseSSL(useSSL.isPresent());  connectionOptions.setStartTLS(startTLS.isPresent());  if (connectionOptions.useSASLExternal()) {    if (!connectionOptions.useSSL() && !connectionOptions.useStartTLS()) {      printWrappedText(err,ERR_TOOL_SASLEXTERNAL_NEEDS_SSL_OR_TLS.get());      return CLIENT_SIDE_PARAM_ERROR;    }    if (keyStorePathValue == null) {      printWrappedText(err,ERR_TOOL_SASLEXTERNAL_NEEDS_KEYSTORE.get());      return CLIENT_SIDE_PARAM_ERROR;    }  }  LDAPDelete ldapDelete=null;  try {    if (initializeServer) {      DirectoryServer.bootstrapClient();    }    SSLConnectionFactory sslConnectionFactory=null;    if (connectionOptions.useSSL() || connectionOptions.useStartTLS()) {      String clientAlias;      if (certNickname.isPresent()) {        clientAlias=certNickname.getValue();      } else {        clientAlias=null;      }      sslConnectionFactory=new SSLConnectionFactory();      sslConnectionFactory.init(trustAll.isPresent(),keyStorePathValue,keyStorePasswordValue,clientAlias,trustStorePathValue,trustStorePasswordValue);      connectionOptions.setSSLConnectionFactory(sslConnectionFactory);    }    AtomicInteger nextMessageID=new AtomicInteger(1);    connection=new LDAPConnection(hostNameValue,portNumber,connectionOptions,out,err);    int timeout=connectTimeout.getIntValue();    connection.connectToHost(bindDNValue,bindPasswordValue,nextMessageID,timeout);    ldapDelete=new LDAPDelete(nextMessageID,out,err);    if (fileNameValue == null && dnStrings.isEmpty()) {      rdr=new InputStreamReader(System.in);    } else     if (fileNameValue != null) {      rdr=new FileReader(fileNameValue);    }    if (rdr != null) {      ldapDelete.readAndExecute(connection,rdr,deleteOptions);    } else {      ldapDelete.readAndExecute(connection,dnStrings,deleteOptions);    }  } catch (  LDAPException le) {    logger.traceException(le);    LDAPToolUtils.printErrorMessage(err,le.getMessageObject(),le.getResultCode(),le.getErrorMessage(),le.getMatchedDN());    return le.getResultCode();  }catch (  LDAPConnectionException lce) {    logger.traceException(lce);    LDAPToolUtils.printErrorMessage(err,lce.getMessageObject(),lce.getResultCode(),lce.getErrorMessage(),lce.getMatchedDN());    return lce.getResultCode();  }catch (  ArgumentException e) {    argParser.displayMessageAndUsageReference(err,e.getMessageObject());    return 1;  }catch (  Exception e) {    logger.traceException(e);    printWrappedText(err,e.getMessage());    return 1;  } finally {    if (connection != null) {      if (ldapDelete == null) {        connection.close(null);      } else {        connection.close(ldapDelete.nextMessageID);      }    }  }  return 0;}  }
class C{  public void checkAccess(){}  }
class C{  OperationMonitor createOperationRate(){  return new OperationMonitor();}  }
class C{  public void start(Context context,android.support.v4.app.Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  public void move(float newX){  float currWidth=viewportRect.width();  newX=Math.max(minX - currWidth,Math.min(newX,maxX - currWidth + currWidth));  viewportRect.left=newX;  viewportRect.right=newX + currWidth;}  }
class C{  public AttributeValueExp(String attr){  this.attr=attr;}  }
class C{  private int read1(byte[] b,int off,int len) throws IOException {  int avail=count - pos;  if (avail <= 0) {    if (len >= getBufIfOpen().length && markpos < 0) {      return getInIfOpen().read(b,off,len);    }    fill();    avail=count - pos;    if (avail <= 0)     return -1;  }  int cnt=(avail < len) ? avail : len;  System.arraycopy(getBufIfOpen(),pos,b,off,cnt);  pos+=cnt;  return cnt;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationDataElement createSubjectConfirmationDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataElementImpl();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnResponseType createAuthnResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnResponseTypeImpl();}  }
class C{  public UndoManager(){  super();  indexOfNextAdd=0;  limit=100;  edits.ensureCapacity(limit);}  }
class C{  public AddEditTaskPresenter(@Nullable String taskId,@NonNull TasksDataSource tasksRepository,@NonNull AddEditTaskContract.View addTaskView){  mTaskId=taskId;  mTasksRepository=checkNotNull(tasksRepository);  mAddTaskView=checkNotNull(addTaskView);  mAddTaskView.setPresenter(this);}  }
class C{  public boolean isValidDay(int dayOfMonth){  return dayOfMonth >= 1 && dayOfMonth <= lengthOfMonth();}  }
class C{  public void dump(Printer printer,boolean verbose){synchronized (mLock) {    printer.println("Connection pool for " + mConfiguration.path + ":");    printer.println("  Open: " + mIsOpen);    printer.println("  Max connections: " + mMaxConnectionPoolSize);    printer.println("  Available primary connection:");    if (mAvailablePrimaryConnection != null) {      mAvailablePrimaryConnection.dump(printer,verbose);    } else {      printer.println("<none>");    }    printer.println("  Available non-primary connections:");    if (!mAvailableNonPrimaryConnections.isEmpty()) {      for (      SQLiteConnection connection : mAvailableNonPrimaryConnections) {        connection.dump(printer,verbose);      }    } else {      printer.println("<none>");    }    printer.println("  Acquired connections:");    if (!mAcquiredConnections.isEmpty()) {      for (      Map.Entry<SQLiteConnection,AcquiredConnectionStatus> entry : mAcquiredConnections.entrySet()) {        final SQLiteConnection connection=entry.getKey();        connection.dumpUnsafe(printer,verbose);        printer.println("  Status: " + entry.getValue());      }    } else {      printer.println("<none>");    }    printer.println("  Connection waiters:");    if (mConnectionWaiterQueue != null) {      int i=0;      final long now=SystemClock.uptimeMillis();      for (ConnectionWaiter waiter=mConnectionWaiterQueue; waiter != null; waiter=waiter.mNext, i++) {        printer.println(i + ": waited for " + ((now - waiter.mStartTime) * 0.001f)+ " ms - thread="+ waiter.mThread+ ", priority="+ waiter.mPriority+ ", sql='"+ waiter.mSql+ "'");      }    } else {      printer.println("<none>");    }  }}  }
class C{  @Override public void initialize(MessagePolicy requestPolicy,MessagePolicy responsePolicy,CallbackHandler handler,Map<String,Object> options) throws AuthenticationException {  this.options=new JsonValue(options);  queryOnResource=new JsonValue(options).get(IDMAuthModuleWrapper.QUERY_ON_RESOURCE).required().asString();  authenticator=authenticatorFactory.apply(this.options);}  }
class C{  public NSNumber(boolean b){  boolValue=b;  doubleValue=longValue=b ? 1 : 0;  type=BOOLEAN;}  }
class C{  @Override protected void initializeInjector(ApplicationComponent applicationComponent){  applicationComponent.inject(this);  comicsComponent=DaggerComicsComponent.builder().applicationComponent(applicationComponent).activityModule(new ActivityModule(this)).comicsModule(new ComicsModule()).build();}  }
class C{  public boolean includeVirtualAttributes(){  return includeVirtualAttributes;}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  public void notifyDataSetInvalidated(){  mDataSetObservable.notifyInvalidated();}  }
class C{  public static char highSurrogate(int c){  return (char)(((c - 0x00010000) >> 10) + 0xD800);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.EncryptSignatureElement createEncryptSignatureElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.EncryptSignatureElementImpl();}  }
class C{  public static String hashpw(String password,String salt){  BCrypt B;  String real_salt;  byte passwordb[], saltb[], hashed[];  char minor=(char)0;  int rounds, off;  StringBuilder sb=new StringBuilder();  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {    throw new IllegalArgumentException("Invalid salt version");  }  if (salt.charAt(2) == '$') {    off=3;  } else {    minor=salt.charAt(2);    if (minor != 'a' || salt.charAt(3) != '$') {      throw new IllegalArgumentException("Invalid salt revision");    }    off=4;  }  if (salt.charAt(off + 2) > '$') {    throw new IllegalArgumentException("Missing salt rounds");  }  rounds=Integer.parseInt(salt.substring(off,off + 2));  real_salt=salt.substring(off + 3,off + 25);  try {    passwordb=(password + (minor >= 'a' ? "\000" : "")).getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    throw new AssertionError("UTF-8 is not supported");  }  saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);  B=new BCrypt();  hashed=B.crypt_raw(passwordb,saltb,rounds,bf_crypt_ciphertext.clone());  sb.append("$2");  if (minor >= 'a') {    sb.append(minor);  }  sb.append("$");  if (rounds < 10) {    sb.append("0");  }  if (rounds > 30) {    throw new IllegalArgumentException("rounds exceeds maximum (30)");  }  sb.append(Integer.toString(rounds));  sb.append("$");  sb.append(encode_base64(saltb,saltb.length));  sb.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));  return sb.toString();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("MessageDestination[");  sb.append("name=");  sb.append(getName());  if (displayName != null) {    sb.append(", displayName=");    sb.append(displayName);  }  if (largeIcon != null) {    sb.append(", largeIcon=");    sb.append(largeIcon);  }  if (smallIcon != null) {    sb.append(", smallIcon=");    sb.append(smallIcon);  }  if (getDescription() != null) {    sb.append(", description=");    sb.append(getDescription());  }  sb.append("]");  return (sb.toString());}  }
class C{  private static int readCode(boolean[] rawbits,int startIndex,int length){  int res=0;  for (int i=startIndex; i < startIndex + length; i++) {    res<<=1;    if (rawbits[i]) {      res|=0x01;    }  }  return res;}  }
class C{  public Object stringToValue(String text) throws ParseException {  Object value=stringToValue(text,getFormat());  if (value != null && getValueClass() != null && !getValueClass().isInstance(value)) {    value=super.stringToValue(value.toString());  }  try {    if (!isValidValue(value,true)) {      throw new ParseException("Value not within min/max range",0);    }  } catch (  ClassCastException cce) {    throw new ParseException("Class cast exception comparing values: " + cce,0);  }  return value;}  }
class C{  public DTMAxisIterator reset(){  _sp=_oldsp;  return resetPosition();}  }
class C{  final boolean shouldMapTextChar(int value){  if (value < ASCII_MAX)   return shouldMapTextChar_ASCII[value];  return get(value);}  }
class C{  @Override ShapeTileOctagon[] cutout_from(ShapeTileBox p_d){  ShapeTileOctagon c=this.intersection(p_d);  if (is_empty() || c.dimension().less(dimension())) {    ShapeTileOctagon[] result=new ShapeTileOctagon[1];    result[0]=p_d.bounding_octagon();    return result;  }  ShapeTileBox[] boxes=new ShapeTileBox[4];  boxes[0]=new ShapeTileBox(p_d.box_ll.v_x,c.oct_llx - c.oct_lx,c.oct_lx,c.oct_lx - c.oct_ulx);  boxes[1]=new ShapeTileBox(c.oct_rx,c.oct_rx - c.oct_lrx,p_d.box_ur.v_x,c.oct_urx - c.oct_rx);  boxes[2]=new ShapeTileBox(c.oct_llx - c.oct_ly,p_d.box_ll.v_y,c.oct_lrx + c.oct_ly,c.oct_ly);  boxes[3]=new ShapeTileBox(c.oct_ulx + c.oct_uy,c.oct_uy,c.oct_urx - c.oct_uy,p_d.box_ur.v_y);  ShapeTileOctagon[] octagons=new ShapeTileOctagon[4];  ShapeTileOctagon curr_oct=new ShapeTileOctagon(p_d.box_ll.v_x,boxes[0].box_ur.v_y,boxes[3].box_ll.v_x,p_d.box_ur.v_y,-PlaLimits.CRIT_INT,c.oct_ulx,-PlaLimits.CRIT_INT,PlaLimits.CRIT_INT);  octagons[0]=curr_oct.normalize();  curr_oct=new ShapeTileOctagon(p_d.box_ll.v_x,p_d.box_ll.v_y,boxes[2].box_ll.v_x,boxes[0].box_ll.v_y,-PlaLimits.CRIT_INT,PlaLimits.CRIT_INT,-PlaLimits.CRIT_INT,c.oct_llx);  octagons[1]=curr_oct.normalize();  curr_oct=new ShapeTileOctagon(boxes[2].box_ur.v_x,p_d.box_ll.v_y,p_d.box_ur.v_x,boxes[1].box_ll.v_y,c.oct_lrx,PlaLimits.CRIT_INT,-PlaLimits.CRIT_INT,PlaLimits.CRIT_INT);  octagons[2]=curr_oct.normalize();  curr_oct=new ShapeTileOctagon(boxes[3].box_ur.v_x,boxes[1].box_ur.v_y,p_d.box_ur.v_x,p_d.box_ur.v_y,-PlaLimits.CRIT_INT,PlaLimits.CRIT_INT,c.oct_urx,PlaLimits.CRIT_INT);  octagons[3]=curr_oct.normalize();  ShapeTileBox b=boxes[0];  ShapeTileOctagon o=octagons[0];  if (b.box_ur.v_x - b.box_ll.v_x > o.oct_uy - o.oct_ly) {    boxes[0]=new ShapeTileBox(b.box_ll.v_x,b.box_ll.v_y,b.box_ur.v_x,o.oct_uy);    curr_oct=new ShapeTileOctagon(b.box_ur.v_x,o.oct_ly,o.oct_rx,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);    octagons[0]=curr_oct.normalize();  }  b=boxes[3];  o=octagons[0];  if (b.box_ur.v_y - b.box_ll.v_y > o.oct_rx - o.oct_lx) {    boxes[3]=new ShapeTileBox(o.oct_lx,b.box_ll.v_y,b.box_ur.v_x,b.box_ur.v_y);    curr_oct=new ShapeTileOctagon(o.oct_lx,o.oct_ly,o.oct_rx,b.box_ll.v_y,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);    octagons[0]=curr_oct.normalize();  }  b=boxes[3];  o=octagons[3];  if (b.box_ur.v_y - b.box_ll.v_y > o.oct_rx - o.oct_lx) {    boxes[3]=new ShapeTileBox(b.box_ll.v_x,b.box_ll.v_y,o.oct_rx,b.box_ur.v_y);    curr_oct=new ShapeTileOctagon(o.oct_lx,o.oct_ly,o.oct_rx,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);    octagons[3]=curr_oct.normalize();  }  b=boxes[1];  o=octagons[3];  if (b.box_ur.v_x - b.box_ll.v_x > o.oct_uy - o.oct_ly) {    boxes[1]=new ShapeTileBox(b.box_ll.v_x,b.box_ll.v_y,b.box_ur.v_x,o.oct_uy);    curr_oct=new ShapeTileOctagon(o.oct_lx,o.oct_ly,b.box_ll.v_x,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);    octagons[3]=curr_oct.normalize();  }  b=boxes[1];  o=octagons[2];  if (b.box_ur.v_x - b.box_ll.v_x > o.oct_uy - o.oct_ly) {    boxes[1]=new ShapeTileBox(b.box_ll.v_x,o.oct_ly,b.box_ur.v_x,b.box_ur.v_y);    curr_oct=new ShapeTileOctagon(o.oct_lx,o.oct_ly,b.box_ll.v_x,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);    octagons[2]=curr_oct.normalize();  }  b=boxes[2];  o=octagons[2];  if (b.box_ur.v_y - b.box_ll.v_y > o.oct_rx - o.oct_lx) {    boxes[2]=new ShapeTileBox(b.box_ll.v_x,b.box_ll.v_y,o.oct_rx,b.box_ur.v_y);    curr_oct=new ShapeTileOctagon(o.oct_lx,b.box_ur.v_y,o.oct_rx,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);    octagons[2]=curr_oct.normalize();  }  b=boxes[2];  o=octagons[1];  if (b.box_ur.v_y - b.box_ll.v_y > o.oct_rx - o.oct_lx) {    boxes[2]=new ShapeTileBox(o.oct_lx,b.box_ll.v_y,b.box_ur.v_x,b.box_ur.v_y);    curr_oct=new ShapeTileOctagon(o.oct_lx,b.box_ur.v_y,o.oct_rx,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);    octagons[1]=curr_oct.normalize();  }  b=boxes[0];  o=octagons[1];  if (b.box_ur.v_x - b.box_ll.v_x > o.oct_uy - o.oct_ly) {    boxes[0]=new ShapeTileBox(b.box_ll.v_x,o.oct_ly,b.box_ur.v_x,b.box_ur.v_y);    curr_oct=new ShapeTileOctagon(b.box_ur.v_x,o.oct_ly,o.oct_rx,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);    octagons[1]=curr_oct.normalize();  }  ShapeTileOctagon[] result=new ShapeTileOctagon[8];  for (int i=0; i < 4; ++i) {    result[i]=boxes[i].bounding_octagon();  }  for (int i=0; i < 4; ++i) {    result[4 + i]=octagons[i];  }  return result;}  }
class C{  public void clear(){  int index1=delegate.size() - 1;  delegate.removeAllElements();  if (index1 >= 0) {    fireIntervalRemoved(this,0,index1);  }}  }
class C{  @Override public Object addToEnvironment(String propName,Object propVal){  return env.put(propName,propVal);}  }
class C{  public boolean equals(Object other){  if (other instanceof BigInt)   return equals((BigInt)other);  return false;}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (contentHandler != null) {    contentHandler.endPrefixMapping(prefix);  }}  }
class C{  public StreamHandler(){  sealed=false;  configure();  sealed=true;}  }
class C{  private void reloadAttributeTypeMaps(Mappings mappings,Mappings newMappings){  for (  Entry<AttributeDescription,Integer> entry : mappings.adEncodeMap.entrySet()) {    AttributeDescription ad=entry.getKey();    Integer id=entry.getValue();    loadAttributeToMaps(id,ad.getAttributeType().getNameOrOID(),ad.getOptions(),newMappings);  }}  }
class C{  private String generateSAML2AssertionId(String saml2Assertion) throws TokenIdGenerationException {  Element samlTokenElement=xmlUtilities.stringToDocumentConversion(saml2Assertion).getDocumentElement();  final String localName=samlTokenElement.getLocalName();  if (ASSERTION_LOCAL_NAME.equals(localName)) {    return generateIdentifierFromUnencryptedSAML2Assertion(samlTokenElement);  } else   if (ENCRYPTED_ASSERTION_LOCAL_NAME.equals(localName)) {    return generateIdentifierFromEncryptedSAML2Assertion(samlTokenElement);  } else {    throw new TokenIdGenerationException(ResourceException.BAD_REQUEST,"Unexpected local name in to-be-validated SAML2 assertion: " + localName);  }}  }
class C{  public PasswordPolicyException(String msg){  super(msg);}  }
class C{  protected void pathWasCollapsed(TreePath path){  if (tree != null) {    tree.fireTreeCollapsed(path);  }}  }
class C{  public AsfTagCoverField(final MetadataDescriptor source){  super(source);  if (!source.getName().equals(AsfFieldKey.COVER_ART.getFieldName())) {    throw new IllegalArgumentException("Descriptor description must be WM/Picture");  }  if (source.getType() != MetadataDescriptor.TYPE_BINARY) {    throw new IllegalArgumentException("Descriptor type must be binary");  }  try {    processRawContent();  } catch (  final UnsupportedEncodingException uee) {    throw new RuntimeException(uee);  }}  }
class C{  public void writeAttributes(ObjectOutputStream out,AttributeSet a) throws IOException {  writeAttributeSet(out,a);}  }
class C{  public InvalidParameterException(String msg){  super(msg);}  }
class C{  public AssertionArtifact createFSAssertionArtifact(String id,String realm,String spEntityID,NameIdentifier spHandle,NameIdentifier idpHandle,String inResponseTo,int minorVersion) throws FSException, SAMLException {  if ((id == null) || (spEntityID == null)) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionManager: null input for" + " method createFSAssertionArtifact.");    }    throw new FSException("nullInput",null);  }  String handle=SAMLUtils.generateAssertionHandle();  if (handle == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionManager.createFSAssertionArt" + "ifact: couldn't generate assertion handle.");    }    throw new FSException("errorCreateArtifact",null);  }  String sourceSuccinctID=FSUtils.generateSourceID(hostEntityId);  byte bytesSourceId[]=SAMLUtils.stringToByteArray(sourceSuccinctID);  byte bytesHandle[]=null;  try {    bytesHandle=handle.getBytes(IFSConstants.SOURCEID_ENCODING);  } catch (  Exception e) {    FSUtils.debug.error("FSAssertionManager.createFSAssertionArt: ",e);    return null;  }  AssertionArtifact art=new FSAssertionArtifact(bytesSourceId,bytesHandle);  int assertionMinorVersion=IFSConstants.FF_11_ASSERTION_MINOR_VERSION;  if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    assertionMinorVersion=IFSConstants.FF_12_ART_ASSERTION_MINOR_VERSION;  }  Assertion assertion=createFSAssertion(id,art,realm,spEntityID,spHandle,idpHandle,inResponseTo,assertionMinorVersion);  return art;}  }
class C{  private static void loadFilesPath(Context context){  if (context != null) {    try {      File file=context.getFilesDir();      if (file != null) {        CrashConstants.FILES_PATH=file.getAbsolutePath();      }    } catch (    Exception e) {      L.e("Exception thrown when accessing the files dir:");      e.printStackTrace();    }  }}  }
class C{  public void testSignumPositive(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public LazyReplicatedMap(MapOwner owner,Channel channel,long timeout,String mapContextName,int initialCapacity,float loadFactor,ClassLoader[] cls){  super(owner,channel,timeout,mapContextName,initialCapacity,loadFactor,Channel.SEND_OPTIONS_DEFAULT,cls,true);}  }
class C{  public boolean isServerTransaction(){  return m_isServerTransaction;}  }
class C{  public final void consume(@NonNull Receiver<Closeable> receiver){  ConsumingUpdatable cu=new ConsumingUpdatable(this,receiver);  addUpdatable(cu);}  }
class C{  private void processIncomingDataPacket(DatagramPacket packet) throws Exception {  this.peerAddress=packet.getAddress();  int packetLength=packet.getLength();  byte[] bytes=packet.getData();  byte[] msgBytes=new byte[packetLength];  System.arraycopy(bytes,0,msgBytes,0,packetLength);  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    this.logger.logDebug("UDPMessageChannel: processIncomingDataPacket : peerAddress = " + peerAddress.getHostAddress() + "/"+ packet.getPort()+ " Length = "+ packetLength);  }  SIPMessage sipMessage=null;  try {    this.receptionTime=System.currentTimeMillis();    sipMessage=myParser.parseSIPMessage(msgBytes,true,false,this);    if (sipMessage instanceof SIPRequest) {      String sipVersion=((SIPRequest)sipMessage).getRequestLine().getSipVersion();      if (!sipVersion.equals("SIP/2.0")) {        Response versionNotSupported=((SIPRequest)sipMessage).createResponse(Response.VERSION_NOT_SUPPORTED,"Bad version " + sipVersion);        this.sendMessage(versionNotSupported.toString().getBytes(),peerAddress,packet.getPort(),"UDP",false);        return;      }      String method=((SIPRequest)sipMessage).getMethod();      String cseqMethod=((SIPRequest)sipMessage).getCSeqHeader().getMethod();      if (!method.equalsIgnoreCase(cseqMethod)) {        SIPResponse sipResponse=((SIPRequest)sipMessage).createResponse(SIPResponse.BAD_REQUEST);        byte[] resp=sipResponse.encodeAsBytes(this.getTransport());        this.sendMessage(resp,peerAddress,packet.getPort(),"UDP",false);        return;      }    }  } catch (  ParseException ex) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      this.logger.logDebug("Rejecting message !  " + new String(msgBytes));      this.logger.logDebug("error message " + ex.getMessage());      this.logger.logException(ex);    }    String msgString=new String(msgBytes,0,packetLength);    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {      String badReqRes=createBadReqRes(msgString,ex);      if (badReqRes != null) {        if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {          logger.logDebug("Sending automatic 400 Bad Request:");          logger.logDebug(badReqRes);        }        try {          this.sendMessage(badReqRes.getBytes(),peerAddress,packet.getPort(),"UDP",false);        } catch (        IOException e) {          this.logger.logException(e);        }      } else {        if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {          logger.logDebug("Could not formulate automatic 400 Bad Request");        }      }    }    return;  }  if (sipMessage == null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      this.logger.logDebug("Rejecting message !  + Null message parsed.");    }    String key=packet.getAddress().getHostAddress() + ":" + packet.getPort();    if (pingBackRecord.get(key) == null && sipStack.getMinKeepAliveInterval() > 0) {      byte[] retval="\r\n\r\n".getBytes();      DatagramPacket keepalive=new DatagramPacket(retval,0,retval.length,packet.getAddress(),packet.getPort());      PingBackTimerTask task=new PingBackTimerTask(packet.getAddress().getHostAddress(),packet.getPort());      this.pingBackRecord.put(key,task);      this.sipStack.getTimer().schedule(task,sipStack.getMinKeepAliveInterval() * 1000);      ((UDPMessageProcessor)this.messageProcessor).sock.send(keepalive);    } else {      logger.logDebug("Not sending ping back");    }    return;  }  Via topMostVia=sipMessage.getTopmostVia();  if (sipMessage.getFrom() == null || sipMessage.getTo() == null || sipMessage.getCallId() == null || sipMessage.getCSeq() == null || topMostVia == null) {    String badmsg=new String(msgBytes);    if (logger.isLoggingEnabled()) {      this.logger.logError("bad message " + badmsg);      this.logger.logError(">>> Dropped Bad Msg " + "From = " + sipMessage.getFrom() + "To = "+ sipMessage.getTo()+ "CallId = "+ sipMessage.getCallId()+ "CSeq = "+ sipMessage.getCSeq()+ "Via = "+ sipMessage.getViaHeaders());    }    return;  }  if (sipStack.sipEventInterceptor != null) {    sipStack.sipEventInterceptor.beforeMessage(sipMessage);  }  if (sipMessage instanceof SIPRequest) {    Hop hop=sipStack.addressResolver.resolveAddress(topMostVia.getHop());    this.peerPort=hop.getPort();    this.peerProtocol=topMostVia.getTransport();    this.peerPacketSourceAddress=packet.getAddress();    this.peerPacketSourcePort=packet.getPort();    try {      this.peerAddress=packet.getAddress();      boolean hasRPort=topMostVia.hasParameter(Via.RPORT);      if (hasRPort || !hop.getHost().equals(this.peerAddress.getHostAddress())) {        topMostVia.setParameter(Via.RECEIVED,this.peerAddress.getHostAddress());      }      if (hasRPort) {        topMostVia.setParameter(Via.RPORT,Integer.toString(this.peerPacketSourcePort));      }    } catch (    java.text.ParseException ex1) {      InternalErrorHandler.handleException(ex1);    }  } else {    this.peerPacketSourceAddress=packet.getAddress();    this.peerPacketSourcePort=packet.getPort();    this.peerAddress=packet.getAddress();    this.peerPort=packet.getPort();    this.peerProtocol=topMostVia.getTransport();  }  this.processMessage(sipMessage);  if (sipStack.sipEventInterceptor != null) {    sipStack.sipEventInterceptor.afterMessage(sipMessage);  }}  }
class C{  private Class<?> createClass(String className){  Class clazz;  boolean internal=false;  if (System.getSecurityManager() != null) {    if (className != null && className.startsWith(DEFAULT_PACKAGE)) {      internal=true;    }  }  try {    if (classLoader != null && !internal) {      clazz=Class.forName(className,false,classLoader);    } else {      clazz=Class.forName(className);    }  } catch (  Throwable t) {    if (debug) {      t.printStackTrace();    }    return null;  }  return clazz;}  }
class C{  public TransformerHandler newTransformerHandler() throws TransformerConfigurationException {  return new TransformerIdentityImpl(m_isSecureProcessing);}  }
class C{  public SOAPElement create(String localName) throws SOAPException {  return soapFactory.createElement(localName);}  }
class C{  public void testDoubleValuePositive1(){  String a="27467238945";  double result=2.7467238945E10;  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public MetaDo(InputStream in,PdfCanvas cb){  this.cb=cb;  this.in=new InputMeta(in);}  }
class C{  private MutableBigInteger divideMagnitude(MutableBigInteger div,MutableBigInteger quotient,boolean needRemainder){  int shift=Integer.numberOfLeadingZeros(div.value[div.offset]);  final int dlen=div.intLen;  int[] divisor;  MutableBigInteger rem;  if (shift > 0) {    divisor=new int[dlen];    copyAndShift(div.value,div.offset,dlen,divisor,0,shift);    if (Integer.numberOfLeadingZeros(value[offset]) >= shift) {      int[] remarr=new int[intLen + 1];      rem=new MutableBigInteger(remarr);      rem.intLen=intLen;      rem.offset=1;      copyAndShift(value,offset,intLen,remarr,1,shift);    } else {      int[] remarr=new int[intLen + 2];      rem=new MutableBigInteger(remarr);      rem.intLen=intLen + 1;      rem.offset=1;      int rFrom=offset;      int c=0;      int n2=32 - shift;      for (int i=1; i < intLen + 1; i++, rFrom++) {        int b=c;        c=value[rFrom];        remarr[i]=(b << shift) | (c >>> n2);      }      remarr[intLen + 1]=c << shift;    }  } else {    divisor=Arrays.copyOfRange(div.value,div.offset,div.offset + div.intLen);    rem=new MutableBigInteger(new int[intLen + 1]);    System.arraycopy(value,offset,rem.value,1,intLen);    rem.intLen=intLen;    rem.offset=1;  }  int nlen=rem.intLen;  final int limit=nlen - dlen + 1;  if (quotient.value.length < limit) {    quotient.value=new int[limit];    quotient.offset=0;  }  quotient.intLen=limit;  int[] q=quotient.value;  if (rem.intLen == nlen) {    rem.offset=0;    rem.value[0]=0;    rem.intLen++;  }  int dh=divisor[0];  long dhLong=dh & LONG_MASK;  int dl=divisor[1];  for (int j=0; j < limit - 1; j++) {    int qhat=0;    int qrem=0;    boolean skipCorrection=false;    int nh=rem.value[j + rem.offset];    int nh2=nh + 0x80000000;    int nm=rem.value[j + 1 + rem.offset];    if (nh == dh) {      qhat=~0;      qrem=nh + nm;      skipCorrection=qrem + 0x80000000 < nh2;    } else {      long nChunk=(((long)nh) << 32) | (nm & LONG_MASK);      if (nChunk >= 0) {        qhat=(int)(nChunk / dhLong);        qrem=(int)(nChunk - (qhat * dhLong));      } else {        long tmp=divWord(nChunk,dh);        qhat=(int)(tmp & LONG_MASK);        qrem=(int)(tmp >>> 32);      }    }    if (qhat == 0)     continue;    if (!skipCorrection) {      long nl=rem.value[j + 2 + rem.offset] & LONG_MASK;      long rs=((qrem & LONG_MASK) << 32) | nl;      long estProduct=(dl & LONG_MASK) * (qhat & LONG_MASK);      if (unsignedLongCompare(estProduct,rs)) {        qhat--;        qrem=(int)((qrem & LONG_MASK) + dhLong);        if ((qrem & LONG_MASK) >= dhLong) {          estProduct-=(dl & LONG_MASK);          rs=((qrem & LONG_MASK) << 32) | nl;          if (unsignedLongCompare(estProduct,rs))           qhat--;        }      }    }    rem.value[j + rem.offset]=0;    int borrow=mulsub(rem.value,divisor,qhat,dlen,j + rem.offset);    if (borrow + 0x80000000 > nh2) {      divadd(divisor,rem.value,j + 1 + rem.offset);      qhat--;    }    q[j]=qhat;  }  int qhat=0;  int qrem=0;  boolean skipCorrection=false;  int nh=rem.value[limit - 1 + rem.offset];  int nh2=nh + 0x80000000;  int nm=rem.value[limit + rem.offset];  if (nh == dh) {    qhat=~0;    qrem=nh + nm;    skipCorrection=qrem + 0x80000000 < nh2;  } else {    long nChunk=(((long)nh) << 32) | (nm & LONG_MASK);    if (nChunk >= 0) {      qhat=(int)(nChunk / dhLong);      qrem=(int)(nChunk - (qhat * dhLong));    } else {      long tmp=divWord(nChunk,dh);      qhat=(int)(tmp & LONG_MASK);      qrem=(int)(tmp >>> 32);    }  }  if (qhat != 0) {    if (!skipCorrection) {      long nl=rem.value[limit + 1 + rem.offset] & LONG_MASK;      long rs=((qrem & LONG_MASK) << 32) | nl;      long estProduct=(dl & LONG_MASK) * (qhat & LONG_MASK);      if (unsignedLongCompare(estProduct,rs)) {        qhat--;        qrem=(int)((qrem & LONG_MASK) + dhLong);        if ((qrem & LONG_MASK) >= dhLong) {          estProduct-=(dl & LONG_MASK);          rs=((qrem & LONG_MASK) << 32) | nl;          if (unsignedLongCompare(estProduct,rs))           qhat--;        }      }    }    int borrow;    rem.value[limit - 1 + rem.offset]=0;    if (needRemainder)     borrow=mulsub(rem.value,divisor,qhat,dlen,limit - 1 + rem.offset); else     borrow=mulsubBorrow(rem.value,divisor,qhat,dlen,limit - 1 + rem.offset);    if (borrow + 0x80000000 > nh2) {      if (needRemainder)       divadd(divisor,rem.value,limit - 1 + 1 + rem.offset);      qhat--;    }    q[(limit - 1)]=qhat;  }  if (needRemainder) {    if (shift > 0)     rem.rightShift(shift);    rem.normalize();  }  quotient.normalize();  return needRemainder ? rem : null;}  }
class C{  public int indexOf(Node elem,int index){  runTo(-1);  if (null == m_map)   return -1;  for (int i=index; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(elem))     return i;  }  return -1;}  }
class C{  protected void processMaxIdleBackups(){  if (!getState().isAvailable() || maxIdleBackup < 0)   return;  Session sessions[]=findSessions();  if (maxIdleBackup >= 0) {    for (int i=0; i < sessions.length; i++) {      StandardSession session=(StandardSession)sessions[i];synchronized (session) {        if (!session.isValid())         continue;        long lastAccessedTime=session.getLastAccessedTimeInternal();        Long persistedLastAccessedTime=(Long)session.getNote(PERSISTED_LAST_ACCESSED_TIME);        if (persistedLastAccessedTime != null && lastAccessedTime == persistedLastAccessedTime.longValue())         continue;        int timeIdle=(int)(session.getIdleTimeInternal() / 1000L);        if (timeIdle >= maxIdleBackup) {          if (log.isDebugEnabled())           log.debug(sm.getString("persistentManager.backupMaxIdle",session.getIdInternal(),Integer.valueOf(timeIdle)));          try {            writeSession(session);          } catch (          IOException e) {          }          session.setNote(PERSISTED_LAST_ACCESSED_TIME,Long.valueOf(lastAccessedTime));        }      }    }  }}  }
class C{  protected void updateDefaultValues(Set defaultValues) throws SMSException, SSOException {  updateDefaultValues(defaultValues,null);}  }
class C{  @Override public String rename(String srcPath,String destPath) throws MalformedURLException, IOException, AuthenticationException {  String resp=null;  ensureValidToken();  String spec=MessageFormat.format("/webhdfs/v1/{0}?op=RENAME&destination={1}&user.name={2}",URLUtil.encodePath(srcPath),URLUtil.encodePath(destPath),this.principal);  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);  conn.setRequestMethod("PUT");  conn.connect();  resp=result(conn,true);  conn.disconnect();  return resp;}  }
class C{  public AMClientDetector(ClientDetectionInterface cd){  clientDetector=cd;}  }
class C{  public PropertyChangeSupport(Object sourceBean){  if (sourceBean == null) {    throw new NullPointerException();  }  source=sourceBean;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(commentgetcomment.class,args);}  }
class C{  public static int supplemental(char h,char l){  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;}  }
class C{  private static boolean discardStream(HttpEngine httpEngine,InputStream responseBodyIn){  Connection connection=httpEngine.connection;  if (connection == null)   return false;  Socket socket=connection.getSocket();  if (socket == null)   return false;  try {    int socketTimeout=socket.getSoTimeout();    socket.setSoTimeout(DISCARD_STREAM_TIMEOUT_MILLIS);    try {      Util.skipAll(responseBodyIn);      return true;    }  finally {      socket.setSoTimeout(socketTimeout);    }  } catch (  IOException e) {    return false;  }}  }
class C{  public void addMode(Mode mode){  String name=mode.getName();  modes.remove(name);  modes.put(name,mode);}  }
class C{  public boolean toWeatherState(){  return to;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.UsernameTokenType createUsernameTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.UsernameTokenTypeImpl();}  }
class C{  public RemoteServletResponse(ServletResponse response){  if (response == null) {    throw new IllegalArgumentException("Response cannot be null");  }  this.response=response;  processResponse();}  }
class C{  public boolean isMaximizable(){  return maximizable;}  }
class C{  public IllegalAccessError(){  super();}  }
class C{  public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb){  fsb.append(str());}  }
class C{  ResultSet readForUpdate(String fullId,String type,String localId,Connection connection) throws NotFoundException, SQLException {  PreparedStatement readForUpdateStatement=null;  ResultSet rs=null;  try {    readForUpdateStatement=queries.getPreparedStatement(connection,readForUpdateQueryStr);    logger.trace("Populating prepared statement {} for {}",readForUpdateStatement,fullId);    readForUpdateStatement.setString(1,localId);    logger.debug("Executing: {}",readForUpdateStatement);    rs=readForUpdateStatement.executeQuery();    if (rs.next()) {      logger.debug("Read for update full id: {}",fullId);      return rs;    } else {      CleanupHelper.loggedClose(rs);      CleanupHelper.loggedClose(readForUpdateStatement);      throw new NotFoundException("Object " + fullId + " not found in "+ type);    }  } catch (  SQLException ex) {    CleanupHelper.loggedClose(rs);    CleanupHelper.loggedClose(readForUpdateStatement);    throw ex;  }}  }
class C{  public static LdapException newLdapException(ResultCode resultCode,CharSequence diagnosticMessage,Throwable cause){  final Result result=Responses.newResult(resultCode);  if (diagnosticMessage != null) {    result.setDiagnosticMessage(diagnosticMessage.toString());  } else   if (cause != null) {    result.setDiagnosticMessage(cause.getLocalizedMessage());  }  result.setCause(cause);  return newLdapException(result);}  }
class C{  public boolean containsValue(Object value){  return dataMap.containsValue(value);}  }
class C{  public Application(String name,ApplicationType applicationType){  this.name=name;  this.applicationType=applicationType;}  }
class C{  public boolean isWhitespace(int nodeHandle){  int identity=makeNodeIdentity(nodeHandle);  int type;  if (identity == DTM.NULL)   type=DTM.NULL; else   type=_type(identity);  if (isTextType(type)) {    int dataIndex=_dataOrQName(identity);    int offset=m_data.elementAt(dataIndex);    int length=m_data.elementAt(dataIndex + 1);    return m_chars.isWhitespace(offset,length);  }  return false;}  }
class C{  protected void addListeners(Map listeners) throws AMEventManagerException {  EventService eventService=null;  try {    if (debug.messageEnabled()) {      debug.message("EventManager.start() - Getting EventService" + " instance");    }    eventService=EventService.getEventService();synchronized (eventService) {      if (!EventService.isStarted()) {        eventService.restartPSearches();      }    }  } catch (  Exception e) {    debug.error("EventManager.start() Unable to get EventService ",e);    throw new AMEventManagerException(AMSDKBundle.getString("501"),"501");  }  if (eventService != null) {    for (    Class<? extends IDSEventListener> listenerClass : PSEARCH_LISTENERS) {      IDSEventListener pSearchListener=eventService.getListener(listenerClass);      if (pSearchListener != null) {        pSearchListener.setListeners(listeners);        debug.message("EventManager.start() - Added listeners to " + "pSearch Listener: " + listenerClass.getSimpleName());      }    }  }}  }
class C{  public static FSAuthnRequest parseBASE64EncodedString(String encodedReq) throws FSMsgException {  if (encodedReq != null && encodedReq.length() != 0) {    String decodedAuthnReq=new String(Base64.decode(encodedReq));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest.parseBASE64EncodedString: " + "decoded input string: " + decodedAuthnReq);    }    return parseXML(decodedAuthnReq);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest.parseBASE64EncodedString: " + "null String passed in as argument.");    }    throw new FSMsgException("nullInput",null);  }}  }
class C{  public TitledBorder(String title){  this(null,title,LEADING,DEFAULT_POSITION,null,null);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  soapService=FSSOAPService.getInstance();  try {    msgFactory=MessageFactory.newInstance();  } catch (  SOAPException ex) {    FSUtils.debug.error("FSSOAPReceiver:Unable to get message factory",ex);    throw new ServletException(ex.getMessage());  }}  }
class C{  public boolean isMODDNOperation(){  return attrTypeIsNull && isModDN;}  }
class C{  private ArrayList<String> addAttributeValues(String attrId,Attributes attrs,ArrayList<String> values) throws NamingException {  if (containerLog.isTraceEnabled())   containerLog.trace("  retrieving values for attribute " + attrId);  if (attrId == null || attrs == null)   return values;  if (values == null)   values=new ArrayList<>();  Attribute attr=attrs.get(attrId);  if (attr == null)   return values;  NamingEnumeration<?> e=attr.getAll();  try {    while (e.hasMore()) {      String value=(String)e.next();      values.add(value);    }  } catch (  PartialResultException ex) {    if (!adCompat)     throw ex;  } finally {    e.close();  }  return values;}  }
class C{  private void initialize(){  shutdown.set(false);  try {    this.changelogDB.initializeDB();    setServerURL();    listenSocket=new ServerSocket();    listenSocket.bind(new InetSocketAddress(getReplicationPort()));    if (logger.isTraceEnabled()) {      logger.trace("RS " + getMonitorInstanceName() + " creates connect thread");    }    connectThread=new ReplicationServerConnectThread(this);    connectThread.start();    if (logger.isTraceEnabled()) {      logger.trace("RS " + getMonitorInstanceName() + " creates listen thread");    }    listenThread=new ReplicationServerListenThread(this);    listenThread.start();    if (logger.isTraceEnabled()) {      logger.trace("RS " + getMonitorInstanceName() + " successfully initialized");    }  } catch (  UnknownHostException e) {    logger.error(ERR_UNKNOWN_HOSTNAME);  }catch (  IOException e) {    logger.error(ERR_COULD_NOT_BIND_CHANGELOG,getReplicationPort(),e.getMessage());  }}  }
class C{  @Override public void add(String pattern,Rule rule){  int patternLength=pattern.length();  if (patternLength > 1 && pattern.endsWith("/")) {    pattern=pattern.substring(0,patternLength - 1);  }  List<Rule> list=cache.get(pattern);  if (list == null) {    list=new ArrayList<>();    cache.put(pattern,list);  }  list.add(rule);  rules.add(rule);  if (this.digester != null) {    rule.setDigester(this.digester);  }  if (this.namespaceURI != null) {    rule.setNamespaceURI(this.namespaceURI);  }}  }
class C{  public final void testGetReductionPolynomial01(){  BigInteger rp=BigInteger.valueOf(0L).setBit(0).setBit(1).setBit(2).setBit(981).setBit(2000);  assertTrue(new ECFieldF2m(2000,rp).getReductionPolynomial().equals(rp));}  }
class C{  public void propertyChange(PropertyChangeEvent event){  getListener().propertyChange(event);}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject){  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public static Builder newSuccessBuilder(){  return new Builder(true);}  }
class C{  public IllegalManagedObjectNameException(String illegalName,PropertyDefinition<?> namingPropertyDefinition){  super(createMessage(illegalName,namingPropertyDefinition));  this.illegalName=illegalName;  this.namingPropertyDefinition=namingPropertyDefinition;}  }
class C{  public IDMSecurityContextFactory(List<ScriptEntry> augmentationScripts){  this.augmentationScripts=augmentationScripts;}  }
class C{  @SideOnly(Side.CLIENT) public static void addHolderInfo(ITeslaHolder holder,List<String> tooltip){  addHolderInfo(holder.getStoredPower(),holder.getCapacity(),tooltip);}  }
class C{  private Conversation startToJoinMeeting(){  URI meetingURI=null;  Conversation conversation=null;  try {    meetingURI=new URI(getString(R.string.meeting_url));  } catch (  URISyntaxException e) {    e.printStackTrace();  }  try {    mApplication=Application.getInstance(this);    conversation=mApplication.joinMeetingAnonymously(getString(R.string.userDisplayName),meetingURI);  } catch (  SFBException e) {    e.printStackTrace();  }  return conversation;}  }
class C{  private Multiplication(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList newList;  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  newList=docElem.getElementsByTagNameNS("*","*");  assertSize("listSize",35,newList);}  }
class C{  public static void removeByUuid_C(java.lang.String uuid,long companyId){  getPersistence().removeByUuid_C(uuid,companyId);}  }
class C{  public Vertex addVertex(String label,List<DbDataContainer> attributes){  Object[] attributesArray=new Object[(attributes.size() + 1) * 2];  for (int i=1; i < attributes.size() + 1; i++) {    attributesArray[2 * i]=attributes.get(i - 1).getField();    attributesArray[2 * i + 1]=attributes.get(i - 1).getValue();  }  attributesArray[0]=T.label;  attributesArray[1]=label;  return this.graph.addVertex(attributesArray);}  }
class C{  public String encode(){  StringBuilder retval=new StringBuilder(ZONE_FIELD);  ListIterator li=zoneAdjustments.listIterator();  int num=0;  while (li.hasNext()) {    ZoneAdjustment za=(ZoneAdjustment)li.next();    if (num > 0)     retval.append(Separators.SP);    retval.append(za.encode());    num++;  }  retval.append(Separators.NEWLINE);  return retval.toString();}  }
class C{  protected boolean scrollLineEnd(TextView widget,Spannable buffer){  final int maxScrollX=getScrollBoundsRight(widget) - getInnerWidth(widget);  int scrollX=widget.getScrollX();  if (scrollX < maxScrollX) {    widget.scrollTo(maxScrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public static DN valueOf(final String dn){  return valueOf(dn,Schema.getDefaultSchema());}  }
class C{  protected static void loadApplicationServletAnnotations(Context context){  Container[] children=context.findChildren();  for (  Container child : children) {    if (child instanceof Wrapper) {      Wrapper wrapper=(Wrapper)child;      if (wrapper.getServletClass() == null) {        continue;      }      Class<?> classClass=Introspection.loadClass(context,wrapper.getServletClass());      if (classClass == null) {        continue;      }      loadClassAnnotation(context,classClass);      loadFieldsAnnotation(context,classClass);      loadMethodsAnnotation(context,classClass);      RunAs annotation=classClass.getAnnotation(RunAs.class);      if (annotation != null) {        wrapper.setRunAs(annotation.value());      }    }  }}  }
class C{  public void endEntity(String name) throws SAXException {}  }
class C{  public final int compare(Object obj1,Object obj2){  byte[] bytes1=(byte[])obj1;  byte[] bytes2=(byte[])obj2;  int diff;  for (int i=0; i < bytes1.length && i < bytes2.length; i++) {    diff=(bytes1[i] & 0xFF) - (bytes2[i] & 0xFF);    if (diff != 0) {      return diff;    }  }  return bytes1.length - bytes2.length;}  }
class C{  public static File createTempFile(final String ext) throws IOException {  final File file=File.createTempFile("fs-","." + ext);  return file;}  }
class C{  public LimitExceededException(String explanation){  super(explanation);}  }
class C{  public boolean hasValueOptionList(){  return valueOptionList != null && valueOptionList.size() > 0;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardToCallingViewBean();}  }
class C{  public static final short secondaryOrder(int order){  return (short)CollationElementIteratorICU.secondaryOrder(order);}  }
class C{  @Override public String delete(String path) throws MalformedURLException, IOException, AuthenticationException {  String resp=null;  ensureValidToken();  String spec=MessageFormat.format("/webhdfs/v1/{0}?op=DELETE&user.name={1}",URLUtil.encodePath(path),this.principal);  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);  conn.setRequestMethod("DELETE");  conn.setInstanceFollowRedirects(false);  conn.connect();  resp=result(conn,true);  conn.disconnect();  return resp;}  }
class C{  public ValueBaseHolder(){}  }
class C{  public SetupParameters ldifFile(String ldif){  this.ldifFiles.add(ldif);  return this;}  }
class C{  public RandomAccessSourceFactory(){}  }
class C{  public Message handleInteraction(Message requestMessage,InquiryElement inquiryElement,String language) throws InteractionException, InteractionSOAPFaultException, SOAPFaultException {  if (debug.messageEnabled()) {    debug.message("InteractionManager.handleInteraction():entering");  }  if (!interactionConfig.wspSupportsRedirect()) {    if (debug.warningEnabled()) {      debug.warning("InteractionManager.handleInteraction():" + " WSP requests for interaction:wspWillRedirect=" + interactionConfig.wspSupportsRedirect());      debug.warning("InteractionManager.handleInteraction():" + "throwing InteractionException");    }    throw new InteractionException(INTERACTION_RB_NAME,"wsp_does_not_support_interaction",null);  }  UserInteractionElement ue=getUserInteractionElement(requestMessage);  if (ue == null) {    SOAPFaultException sfe=newRedirectFaultError(QNAME_INTERACTION_REQUIRED);    if (debug.warningEnabled()) {      debug.warning("InteractionManager.handleInteraction():" + " WSP requests for interaction - WSC did not " + " provide UserInteractionHeader");      debug.warning("InteractionManager.handleInteraction():" + "throwing InteractionSOAPFaultException=" + sfe);    }    throw new InteractionSOAPFaultException(sfe);  }  if (ue.isRedirect() == false) {    SOAPFaultException sfe=newRedirectFaultError(QNAME_INTERACTION_REQUIRED);    if (debug.warningEnabled()) {      debug.warning("InteractionManager.handleInteraction():" + "WSP rquests for interaction - WSC  " + " says redirect=false");      debug.warning("InteractionManager.handleInteraction():" + "throwing InteractionSOAPFaultException=" + sfe);    }    throw new InteractionSOAPFaultException(sfe);  }  if (ue.getInteract().equals(QNAME_DO_NOT_INTERACT)) {    SOAPFaultException sfe=newRedirectFaultError(QNAME_INTERACTION_REQUIRED);    if (debug.warningEnabled()) {      debug.warning("InteractionManager.handleInteraction():" + "WSP rquests for interaction - WSC  " + " UserInteractionHeader says doNotInteract");      debug.warning("InteractionManager.handleInteraction():" + "throwing InteractionSOAPFaultException=" + sfe);    }    throw new InteractionSOAPFaultException(sfe);  }  if (interactionConfig.wspRedirectsForData() && ue.getInteract().equals(QNAME_DO_NOT_INTERACT_FOR_DATA)) {    SOAPFaultException sfe=newRedirectFaultError(QNAME_INTERACTION_REQUIRED_FOR_DATA);    if (debug.warningEnabled()) {      debug.warning("InteractionManager.handleInteraction():" + "WSP rquests interaction for data - WSC  " + " UserInteractionHeader says doNotInteractForData");      debug.warning("InteractionManager.handleInteraction():" + "throwing InteractionSOAPFaultException=" + sfe);    }    throw new InteractionSOAPFaultException(sfe);  }  BigInteger uemi=ue.getMaxInteractTime();  if ((uemi != null) && (interactionConfig.getWSPRedirectTime() > uemi.intValue())) {    SOAPFaultException sfe=newRedirectFaultError(QNAME_INTERACTION_TIME_NOT_SUFFICEINT);    if (debug.warningEnabled()) {      debug.warning("InteractionManager.handleInteraction():" + "WSP inteaction time =" + interactionConfig.getWSPRedirectTime() + " exceeds WSC maxInteractTime= "+ ue.getMaxInteractTime());      debug.warning("InteractionManager.handleInteraction():" + "throwing InteractionSOAPFaultException=" + sfe);    }    throw new InteractionSOAPFaultException(sfe);  }  String requestMessageID=requestMessage.getCorrelationHeader().getMessageID();  SOAPFaultException sfe=newRedirectFault(requestMessageID);  String redirectResponseID=getResponseID(sfe);  String requestIP=requestMessage.getIPAddress();  String requestHost=null;  if (interactionConfig.wspEnforcesReturnToHostEqualsRequestHost()) {    try {      InetAddress inetAddress=InetAddress.getByName(requestIP);      requestHost=inetAddress.getHostName();      if (debug.messageEnabled()) {        debug.message("InteractionManager.handleInteraction():" + " caching requestHost=" + requestHost + ", for redirectResponseID= "+ redirectResponseID);      }      setRequestHost(redirectResponseID,requestHost);    } catch (    UnknownHostException uhe) {      debug.error("InteractionManager.handleInteraction():" + " can not resolve host name",uhe);      debug.error("InteractionManager.handleInteraction():" + " throwing InteractionSOAPFaultException",sfe);      SOAPFaultException sfe1=newRedirectFaultError(QNAME_INTERACTION_CAN_NOT_DETERMINE_REQUEST_HOST);      throw new InteractionSOAPFaultException(sfe1);    }  }  setInquiryElement(redirectResponseID,inquiryElement);  setRequestMessageID(redirectResponseID,requestMessageID);  setLanguage(redirectResponseID,language);  if (debug.messageEnabled()) {    debug.message("InteractionManager.handleInteraction():" + " throwing InteractionSOAPFaultException " + " to redirect user agent="+ sfe);  }  throw new InteractionSOAPFaultException(sfe);}  }
class C{  public static String lookupTag(List<LanguageRange> priorityList,Collection<String> tags){  return LocaleMatcher.lookupTag(priorityList,tags);}  }
class C{  @Inject public PasswordCredentialsGrantTypeHandler(ClientAuthenticator clientAuthenticator,List<PasswordCredentialsRequestValidator> requestValidators,ResourceOwnerAuthenticator resourceOwnerAuthenticator,OAuth2ProviderSettingsFactory providerSettingsFactory,OAuth2UrisFactory urisFactory,TokenStore tokenStore){  super(providerSettingsFactory,urisFactory,clientAuthenticator);  this.requestValidators=requestValidators;  this.resourceOwnerAuthenticator=resourceOwnerAuthenticator;  this.tokenStore=tokenStore;}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  @Override public int read(byte[] bts,int st,int end) throws IOException {  int n=super.read(bts,st,end);  if (n != -1) {    branch.write(bts,st,n);  }  return n;}  }
class C{  public boolean skipPreamble() throws IOException {  System.arraycopy(boundary,2,boundary,0,boundary.length - 2);  boundaryLength=boundary.length - 2;  computeBoundaryTable();  try {    discardBodyData();    return readBoundary();  } catch (  MalformedStreamException e) {    return false;  } finally {    System.arraycopy(boundary,0,boundary,2,boundary.length - 2);    boundaryLength=boundary.length;    boundary[0]=CR;    boundary[1]=LF;    computeBoundaryTable();  }}  }
class C{  public String toPattern(){  return toPattern(false);}  }
class C{  public void testValueOfLongMax(){  long longVal=Long.MAX_VALUE;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={127,-1,-1,-1,-1,-1,-1,-1};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AttributeStatementType createAttributeStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeStatementTypeImpl();}  }
class C{  public void test_SSLEngineResultHandshakeStatus_values(){  String[] str={"NOT_HANDSHAKING","FINISHED","NEED_TASK","NEED_WRAP","NEED_UNWRAP"};  SSLEngineResult.HandshakeStatus[] enS=SSLEngineResult.HandshakeStatus.values();  if (enS.length == str.length) {    for (int i=0; i < enS.length; i++) {      assertEquals("Incorrect Status",enS[i].toString(),str[i]);    }  } else {    fail("Incorrect number of enum constant was returned");  }}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(UaaApp.class);  DefaultProfileUtil.addDefaultProfile(app);  Environment env=app.run(args).getEnvironment();  log.info("\n----------------------------------------------------------\n\t" + "Application '{}' is running! Access URLs:\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t"+ "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("spring.application.name"),env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));  String configServerStatus=env.getProperty("configserver.status");  log.info("\n----------------------------------------------------------\n\t" + "Config Server: \t{}\n----------------------------------------------------------",configServerStatus == null ? "Not found or not setup for this application" : configServerStatus);}  }
class C{  public static void test_diff_callStaticMethod(){  assertSame("frotz",Target2.frotz());}  }
class C{  public TableResult(){  clear();}  }
class C{  public SdpFactoryException(String msg,Exception ex){  super(msg);  this.ex=ex;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 54) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitStylesheet(this);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  if (xmlString != null) {    return xmlString;  }  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSAuthnRequest.toXMLString: " + "providerId is null in the request with requestId:" + requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSAuthnRequest.toXMLString: " + "couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(IFSConstants.DEFAULT_ENCODING).append("\" ?>");  }  String prefix="";  String samlpPrefix="";  String uri="";  String samlpUri="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;    samlpPrefix=IFSConstants.PROTOCOL_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uri=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      uri=IFSConstants.LIB_NAMESPACE_STRING;    }    samlpUri=IFSConstants.PROTOCOL_NAMESPACE_STRING;  }  String instantString=DateUtils.toUTCDateFormat(issueInstant);  if (requestID != null) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.AUTHN_REQUEST).append(uri).append(IFSConstants.SPACE).append(samlpUri);    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION && id != null && !(id.length() == 0)) {      xml.append(IFSConstants.SPACE).append(IFSConstants.ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(id).append(IFSConstants.QUOTE);    }    xml.append(IFSConstants.SPACE).append(IFSConstants.REQUEST_ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(requestID).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(majorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(minorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(instantString).append(IFSConstants.QUOTE);    if (consentURI != null) {      xml.append(IFSConstants.SPACE).append(IFSConstants.CONSENT).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(consentURI).append(IFSConstants.QUOTE);    }    xml.append(IFSConstants.RIGHT_ANGLE);    if ((respondWiths != null) && (respondWiths != Collections.EMPTY_LIST)) {      Iterator i=respondWiths.iterator();      while (i.hasNext()) {        xml.append(IFSConstants.LEFT_ANGLE).append(samlpPrefix).append(IFSConstants.RESPONDWITH).append(IFSConstants.RIGHT_ANGLE).append((String)i.next()).append(IFSConstants.START_END_ELEMENT).append(samlpPrefix).append(IFSConstants.RESPONDWITH).append(IFSConstants.RIGHT_ANGLE);      }    }    if (signed) {      if (signatureString != null) {        xml.append(signatureString);      } else       if (signature != null) {        signatureString=XMLUtils.print(signature);        xml.append(signatureString);      }    }    if ((extensions != null) && (!extensions.isEmpty())) {      for (Iterator iter=extensions.iterator(); iter.hasNext(); ) {        Extension extension=(Extension)iter.next();        extension.setMinorVersion(minorVersion);        xml.append(extension.toXMLString());      }    }    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE).append(providerId).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE);    if (affiliationID != null) {      xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.AFFILIATIONID).append(IFSConstants.RIGHT_ANGLE).append(affiliationID).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.AFFILIATIONID).append(IFSConstants.RIGHT_ANGLE);    }    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      String strFederate=IFSConstants.NAME_ID_POLICY_NONE;      if (federate) {        strFederate=IFSConstants.NAME_ID_POLICY_FEDERATED;        if (nameIDPolicy != null && nameIDPolicy.length() > 0) {          strFederate=nameIDPolicy;        }      }      xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.NAMEID_POLICY_ELEMENT).append(IFSConstants.RIGHT_ANGLE).append(strFederate).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.NAMEID_POLICY_ELEMENT).append(IFSConstants.RIGHT_ANGLE);    } else {      String strFederate=IFSConstants.FALSE;      if (federate) {        strFederate=IFSConstants.TRUE;      }      xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.FEDERATE).append(IFSConstants.RIGHT_ANGLE).append(strFederate).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.FEDERATE).append(IFSConstants.RIGHT_ANGLE);    }    String strForceAuthn=IFSConstants.FALSE;    if (forceAuthn) {      strForceAuthn=IFSConstants.TRUE;    }    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.FORCE_AUTHN_ELEM).append(IFSConstants.RIGHT_ANGLE).append(strForceAuthn).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.FORCE_AUTHN_ELEM).append(IFSConstants.RIGHT_ANGLE);    String strIsPassive=IFSConstants.FALSE;    if (isPassive) {      strIsPassive=IFSConstants.TRUE;    }    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.IS_PASSIVE_ELEM).append(IFSConstants.RIGHT_ANGLE).append(strIsPassive).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.IS_PASSIVE_ELEM).append(IFSConstants.RIGHT_ANGLE);    if (protocolProfile != null && protocolProfile.length() != 0) {      xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.PROTOCOL_PROFILE).append(IFSConstants.RIGHT_ANGLE).append(protocolProfile).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.PROTOCOL_PROFILE).append(IFSConstants.RIGHT_ANGLE);    }    if (assertionConsumerServiceID != null) {      xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.ASSERTION_CONSUMER_SVC_ID).append(IFSConstants.RIGHT_ANGLE).append(assertionConsumerServiceID).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.ASSERTION_CONSUMER_SVC_ID).append(IFSConstants.RIGHT_ANGLE);    }    if (authnContext != null) {      authnContext.setMinorVersion(minorVersion);      xml.append(authnContext.toXMLString());    }    if (relayState != null && relayState.length() != 0) {      xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.RELAY_STATE).append(IFSConstants.RIGHT_ANGLE).append(XMLUtils.escapeSpecialCharacters(relayState)).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.RELAY_STATE).append(IFSConstants.RIGHT_ANGLE);    }    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      if (scoping != null) {        xml.append(scoping.toXMLString(true,false));      }    }    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {      if (authContextCompType != null && authContextCompType.length() != 0) {        xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.AUTHN_CONTEXT_COMPARISON).append(IFSConstants.RIGHT_ANGLE).append(authContextCompType).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.AUTHN_CONTEXT_COMPARISON).append(IFSConstants.RIGHT_ANGLE);      }    }    xml.append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.AUTHN_REQUEST).append(IFSConstants.RIGHT_ANGLE);  } else {    FSUtils.debug.error("FSAuthnRequest.toString: requestID is null ");    throw new FSMsgException("nullAuthnRequestID",null);  }  return xml.toString();}  }
class C{  public OAuth2ErrorException(final OAuth2Error error,final String message){  super(message);  this.error=error;}  }
class C{  public void addAttribute(String userName,String attributeName,String attributeValue){  ScriptedIdentity amIdentity=getIdentity(userName);  if (amIdentity != null) {    amIdentity.addAttribute(attributeName,attributeValue);    amIdentity.store();  }}  }
class C{  public boolean isIndeterminate(){  return indeterminate;}  }
class C{  public ChangeRecordEntry readChangeRecord(boolean defaultAdd) throws IOException, LDIFException {  while (true) {    LinkedList<StringBuilder> lines=readEntryLines();    if (lines == null) {      return null;    }    DN entryDN=readDN(lines);    if (entryDN == null) {      continue;    }    String changeType=readChangeType(lines);    if (changeType != null) {switch (changeType) {case "add":        return parseAddChangeRecordEntry(entryDN,lines);case "delete":      return parseDeleteChangeRecordEntry(entryDN,lines);case "modify":    return parseModifyChangeRecordEntry(entryDN,lines);case "modrdn":  return parseModifyDNChangeRecordEntry(entryDN,lines);case "moddn":return parseModifyDNChangeRecordEntry(entryDN,lines);default :LocalizableMessage message=ERR_LDIF_INVALID_CHANGETYPE_ATTRIBUTE.get(changeType,"add, delete, modify, moddn, modrdn");throw new LDIFException(message,lastEntryLineNumber,false);}} else if (defaultAdd) {return parseAddChangeRecordEntry(entryDN,lines);} else {LocalizableMessage message=ERR_LDIF_INVALID_CHANGETYPE_ATTRIBUTE.get(null,"add, delete, modify, moddn, modrdn");throw new LDIFException(message,lastEntryLineNumber,false);}}}  }
class C{  boolean shuttingDown(){  return shuttingDown.get();}  }
class C{  public JTextPane(StyledDocument doc){  this();  setStyledDocument(doc);}  }
class C{  void shutdown(){  if (shutdown.compareAndSet(false,true)) {    log.close();    DirectoryServer.deregisterMonitorProvider(dbMonitor);  }}  }
class C{  public static <T>MenuResult<T> again(){  return new MenuResult<>(Type.AGAIN,Collections.<T>emptyList());}  }
class C{  public static ServerSideSortResponseControl newControl(final ResultCode result,final AttributeDescription attributeDescription){  Reject.ifNull(result);  return new ServerSideSortResponseControl(false,result,attributeDescription);}  }
class C{  public FramedIPAddressAttribute(byte[] octets){  super(octets);  addr[0]=octets[2];  addr[1]=octets[3];  addr[2]=octets[4];  addr[3]=octets[5];}  }
class C{  public void info(String msg){  print("[INFO] " + msg,out.info);}  }
class C{  public void componentMoved(ComponentEvent e){  ((ComponentListener)a).componentMoved(e);  ((ComponentListener)b).componentMoved(e);}  }
class C{  public org.omg.CORBA.TypeCode type(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("type",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.type();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private void updateOldestCSN(CSN csn){  if (csn != null && (this.oldestCSN == null || csn.isOlderThan(this.oldestCSN))) {    this.oldestCSN=csn;  }}  }
class C{  final void forgetNext(){  UNSAFE.putObject(this,nextOffset,this);}  }
class C{  public ParameterMap(Map<K,V> map){  super(map);}  }
class C{  public void testIsCurrency(){  try {    assertFalse(rsmd.isCurrency(1));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.testGetScale()" + e1.getMessage());    e1.printStackTrace();  }  try {    rsmd.isCurrency(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }  try {    rsmd.isCurrency(5);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }  try {    rs.close();    rsmd.isCurrency(1);    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  private boolean isDatabaseIndex(final String indexName){  for (  final String dbIndex : DATABASE_INDEXES) {    if (indexName.equalsIgnoreCase(dbIndex)) {      return true;    }  }  return false;}  }
class C{  public static boolean isRunning(JComponent c){  return sharedInstance._isRunning(c);}  }
class C{  public XmlStreamWriter(OutputStream out){  this(out,null);}  }
class C{  protected void runCommand(String commandName,CommandSession session,String[] params){  try {    Method method=service.getClass().getMethod(commandName,InputStream.class,PrintStream.class,String[].class);    method.invoke(service,session.getKeyboard(),session.getConsole(),params);  } catch (  NoSuchMethodException e) {    session.getConsole().println("No such command: " + commandName);  }catch (  Exception e) {    logger.warn("Unable to execute command: {} with args: {}",commandName,Arrays.toString(params),e);    e.printStackTrace(session.getConsole());  }}  }
class C{  public int hashCode(){  return selectedGroupDNs.hashCode();}  }
class C{  public static void CONSTANT_OBJECT_PRODUCED(long iid) throws IOException {  ThreadTracer tracer=getActiveThreadTracer();  if (tracer == null)   return;  tracer.header(iid);}  }
class C{  public void endElement(String namespaceURI,String localName,String name) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  m_prefixMap.popNamespaces(m_elemContext.m_currentElemDepth,null);  try {    final java.io.Writer writer=m_writer;    if (m_elemContext.m_startTagOpen) {      if (m_tracer != null)       super.fireStartElem(m_elemContext.m_elementName);      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        processAttributes(m_writer,nAttrs);        m_attributes.clear();      }      if (m_spaceBeforeClose)       writer.write(" />"); else       writer.write("/>");    } else {      if (m_cdataTagOpen)       closeCDATA();      if (shouldIndent())       indent(m_elemContext.m_currentElemDepth - 1);      writer.write('<');      writer.write('/');      writer.write(name);      writer.write('>');    }  } catch (  IOException e) {    throw new SAXException(e);  }  if (!m_elemContext.m_startTagOpen && m_doIndent) {    m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop();  }  m_isprevtext=false;  if (m_tracer != null)   super.fireEndElem(name);  m_elemContext=m_elemContext.m_prev;}  }
class C{  private void updateLaunchDailyErrorMessages(Collection<LocalizableMessage> errorMessages){  setPrimaryValid(lDailyTime);  int[] h={-1};  int[] min={-1};  checkTime(dailyTime,lDailyTime,h,min,errorMessages);}  }
class C{  synchronized void loadMapper() throws SMSException {  String fileName=mRootDir + File.separator + DIR_TREE_FILENAME;  File fileHandle=new File(fileName);  if (fileHandle.isFile()) {    if (!fileHandle.canRead()) {      String errmsg="SMSEnhancedFlatFileObject.initialize: cannot read file " + fileName;      mDebug.error(errmsg);      throw new SMSException(errmsg);    }    parseDirectoryTreeXML(fileName);  } else {    try {      fileHandle.createNewFile();    } catch (    IOException e) {      String errmsg="SMSEnhancedFlatFileObject.initialize: " + "cannot create file, " + fileName + ". Exception "+ e.getMessage();      mDebug.error("SMSEnhancedFlatFileObject.initialize",e);      throw new SMSException(errmsg);    }catch (    SecurityException e) {      String errmsg="SMSEnhancedFlatFileObject.initialize: " + "cannot create file, " + fileName + ". Exception "+ e.getMessage();      mDebug.error("SMSEnhancedFlatFileObject.initialize",e);      throw new SMSException(errmsg);    }    root=new SMSFlatFileTreeNode(mRootDN);    try {      Map map=new HashMap(2);      Set set=new HashSet(4);      set.add("top");      set.add("organizationalunit");      map.put("objectclass",set);      create(null,"ou=services," + mRootDN,map);      saveDirectoryTree();    } catch (    SSOException e) {    }catch (    ServiceAlreadyExistsException e) {      mDebug.message("SMSEnhancedFlatFileObject.initialize",e);    }  }}  }
class C{  public boolean isDuplicateToken(){  return dupToken;}  }
class C{  public R visitSize(SizePropertyDefinition pd,Long v,P p){  return visitUnknown(pd,v,p);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public Map<String,Object> toMap(){  Map<String,Object> map=new HashMap<>();  String id=(ordinal != null) ? ordinal.toString() : MESSAGE_NO_ORDINAL.get().toString();  map.put("xmlId","log-ref-" + xmlId);  map.put("id",MESSAGE_ORDINAL_ID.get(id));  map.put("severity",MESSAGE_SEVERITY.get(ERROR_SEVERITY_PRINTABLE.get()));  map.put("message",MESSAGE_MESSAGE.get(formatString));  return map;}  }
class C{  public StateInteractive delete_items(){  r_brd.generate_snapshot();  Set<Integer> changed_nets=new TreeSet<Integer>();  for (  BrdItem curr_item : items_list) {    if (!(curr_item instanceof BrdConnectable))     continue;    for (int index=0; index < curr_item.net_count(); ++index) {      changed_nets.add(curr_item.get_net_no(index));    }  }  boolean with_delete_fixed=!i_brd.debug(Mdbg.GUI,Ldbg.RELEASE);  boolean all_items_removed;  if (i_brd.itera_settings.push_enabled) {    all_items_removed=r_brd.remove_items_and_pull_tight(items_list,i_brd.itera_settings.trace_pullt_min_move,with_delete_fixed);  } else {    all_items_removed=r_brd.remove_items(items_list,with_delete_fixed);  }  if (!all_items_removed) {    i_brd.screen_messages.set_status_message(resources.getString("some_items_are_fixed_and_could_therefore_not_be_removed"));  }  actlog_start_scope(LogfileScope.DELETE_SELECTED);  for (  Integer curr_net_no : changed_nets)   i_brd.update_ratsnest(curr_net_no.intValue());  i_brd.repaint();  return return_state;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.IdentificationType createIdentificationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IdentificationTypeImpl();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.StatusElementImpl();}  }
class C{  public static GenericBindRequest copyOfGenericBindRequest(final GenericBindRequest request){  return new GenericBindRequestImpl(request);}  }
class C{  public static void init(final InputStream mimeTypes,final InputStream magicStream) throws IOException {  MimeUtil.mimeTypes.load(mimeTypes);  parse(new InputStreamReader(magicStream));}  }
class C{  public static boolean isValidWithNetMask(String address){  return isValidIPv4WithNetmask(address) || isValidIPv6WithNetmask(address);}  }
class C{  public static String formatTime(Object obj,boolean seconds){  long time=-1L;  if (obj instanceof Long) {    time=((Long)obj).longValue();  } else   if (obj instanceof Integer) {    time=((Integer)obj).intValue();  }  if (seconds) {    return ((((float)time) / 1000) + " s");  } else {    return (time + " ms");  }}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (debug.messageEnabled()) {    debug.message("CDCServlet.doGetPost: Query String received: " + request.getQueryString());  }  String gotoParameter=request.getParameter(GOTO_PARAMETER);  String targetParameter=request.getParameter(TARGET_PARAMETER);  if (targetParameter == null) {    targetParameter=request.getParameter(TARGET_PARAMETER.toLowerCase());  }  if ((gotoParameter != null) || (targetParameter != null)) {    debug.message("CDCServlet:doGetPost():goto or target is not null");    for (    String invalidStr : INVALID_SET) {      if (gotoParameter != null && gotoParameter.toLowerCase().contains(invalidStr)) {        showError(response,"GOTO parameter has invalid characters");        return;      }      if (targetParameter != null && targetParameter.toLowerCase().contains(invalidStr)) {        showError(response,"TARGET parameter has invalid characters");        return;      }    }  }  SSOToken token=getSSOToken(request,response);  String policyAdviceList=checkForPolicyAdvice(token,request,response);  if ((token == null) || (policyAdviceList != null)) {    redirectForAuthentication(request,response,policyAdviceList);  } else {    String cookieName=AuthClientUtils.getCookieName();    Cookie ssoCookie=CookieUtils.getCookieFromReq(request,cookieName);    if (ssoCookie == null) {      try {        String cookieValue=token.getTokenID().toString();        if (cookieName != null && cookieName.length() != 0) {          Set<String> domains=AuthClientUtils.getCookieDomainsForRequest(request);          if (!domains.isEmpty()) {            for (Iterator it=domains.iterator(); it.hasNext(); ) {              String domain=(String)it.next();              Cookie cookie=CookieUtils.newCookie(cookieName,cookieValue,"/",domain);              CookieUtils.addCookieToResponse(response,cookie);            }          } else {            Cookie cookie=CookieUtils.newCookie(cookieName,cookieValue,"/",null);            CookieUtils.addCookieToResponse(response,cookie);          }        }      } catch (      Exception e) {        if (debug.messageEnabled()) {          debug.message("Error creating cookie. : " + e.getMessage());        }      }    }    redirectWithAuthNResponse(request,response,token);  }}  }
class C{  public boolean isBigEndian(){  return bigEndian;}  }
class C{  public RequesterID createRequesterID() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.REQUESTERID);  if (obj == null) {    return new RequesterIDImpl();  } else {    return (RequesterID)obj;  }}  }
class C{  public boolean isSelected(){  return isSelected;}  }
class C{  public void load(URL url) throws ParseException, IOException {  if (url == null) {    throw new IllegalArgumentException("You must supply a valid Synth set URL");  }  if (defaultsMap == null) {    defaultsMap=new HashMap<String,Object>();  }  InputStream input=url.openStream();  new SynthParser().parse(input,(DefaultSynthStyleFactory)factory,url,null,defaultsMap);}  }
class C{  @Override public synchronized void delete(AudioFile af) throws CannotReadException, CannotWriteException {  ((MP3File)af).setID3v1Tag(null);  ((MP3File)af).setID3v2Tag(null);  af.commit();}  }
class C{  private void invokePostResponsePlugins(boolean workflowExecuted){  if (workflowExecuted) {    List localOperations=(List)getAttachment(Operation.LOCALBACKENDOPERATIONS);    if (localOperations != null) {      for (      Object localOp : localOperations) {        LocalBackendBindOperation localOperation=(LocalBackendBindOperation)localOp;        getPluginConfigManager().invokePostResponseBindPlugins(localOperation);      }    } else {    }  }}  }
class C{  protected PropertyListParser(){}  }
class C{  public static void main(String args[]){  if (args.length != 0) {    if (args.length == 1) {      System.out.println(Crypt.encrypt(args[0]));    } else     if ((args.length == 2) && ((args[0]).equalsIgnoreCase("-f"))) {      String passwd=null;      passwd=(readFromPasswordFile(args[1])).trim();      if (passwd != null) {        System.out.println(Crypt.encrypt(passwd));      }    }  }}  }
class C{  public STypeDef targetType(){  return targetType;}  }
class C{  public ResetGenerationIdMsg(long generationId){  this.generationId=generationId;}  }
class C{  private void addIndex(Index<K,V> idx,HeadIndex<K,V> h,int indexLevel){  int insertionLevel=indexLevel;  Comparable<? super K> key=comparable(idx.node.key);  if (key == null)   throw new NullPointerException();  for (; ; ) {    int j=h.level;    Index<K,V> q=h;    Index<K,V> r=q.right;    Index<K,V> t=idx;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        int c=key.compareTo(n.key);        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (c > 0) {          q=r;          r=r.right;          continue;        }      }      if (j == insertionLevel) {        if (t.indexesDeletedNode()) {          findNode(key);          return;        }        if (!q.link(r,t))         break;        if (--insertionLevel == 0) {          if (t.indexesDeletedNode())           findNode(key);          return;        }      }      if (--j >= insertionLevel && j < indexLevel)       t=t.down;      q=q.down;      r=q.right;    }  }}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return encodeProduct(buffer);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static void mergeSort(Object[] src,Object[] dest,int low,int high,int off){  int length=high - low;  if (length < INSERTIONSORT_THRESHOLD) {    for (int i=low; i < high; i++)     for (int j=i; j > low && ((Comparable)dest[j - 1]).compareTo(dest[j]) > 0; j--)     swap(dest,j,j - 1);    return;  }  int destLow=low;  int destHigh=high;  low+=off;  high+=off;  int mid=(low + high) >>> 1;  mergeSort(dest,src,low,mid,-off);  mergeSort(dest,src,mid,high,-off);  if (((Comparable)src[mid - 1]).compareTo(src[mid]) <= 0) {    System.arraycopy(src,low,dest,destLow,length);    return;  }  for (int i=destLow, p=low, q=mid; i < destHigh; i++) {    if (q >= high || p < mid && ((Comparable)src[p]).compareTo(src[q]) <= 0)     dest[i]=src[p++]; else     dest[i]=src[q++];  }}  }
class C{  public long toMinutes(){  return seconds / SECONDS_PER_MINUTE;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (!getClass().equals(obj.getClass())) {    return false;  }  UserAttributes object=(UserAttributes)obj;  if (propertyName == null) {    if (object.propertyName != null) {      return false;    }  } else {    if (!propertyName.equals(object.propertyName)) {      return false;    }  }  if (propertyValues == null) {    if (object.propertyValues != null) {      return false;    }  } else {    if (!propertyValues.equals(object.propertyValues)) {      return false;    }  }  if (pResponseProviderName == null) {    if (object.getPResponseProviderName() != null) {      return false;    }  } else {    if (!pResponseProviderName.equals(object.getPResponseProviderName())) {      return false;    }  }  return true;}  }
class C{  private void processWorkerExit(Worker w,boolean completedAbruptly){  if (completedAbruptly)   decrementWorkerCount();  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    completedTaskCount+=w.completedTasks;    workers.remove(w);  }  finally {    mainLock.unlock();  }  tryTerminate();  int c=ctl.get();  if (runStateLessThan(c,STOP)) {    if (!completedAbruptly) {      int min=allowCoreThreadTimeOut ? 0 : corePoolSize;      if (min == 0 && !workQueue.isEmpty())       min=1;      if (workerCountOf(c) >= min)       return;    }    addWorker(null,false);  }}  }
class C{  public void nextFirstAndLastNames(){  firstName=firstNames[firstNameIndex++];  lastName=lastNames[lastNameIndex++];  if (nameUniquenessCounter > 1) {    lastName+=nameUniquenessCounter;  }  if (firstNameIndex >= firstNames.length) {    firstNameIndex=0;    if (firstNames.length > lastNames.length) {      lastNameIndex=++nameLoopCounter;      if (lastNameIndex >= lastNames.length) {        lastNameIndex=0;        nameUniquenessCounter++;      }    }  }  if (lastNameIndex >= lastNames.length) {    lastNameIndex=0;    if (lastNames.length > firstNames.length) {      firstNameIndex=++nameLoopCounter;      if (firstNameIndex >= firstNames.length) {        firstNameIndex=0;        nameUniquenessCounter++;      }    }  }}  }
class C{  private static boolean evalAttrType(AttributeType a,TargetAttr targetAttr){  final EnumTargetOperator op=targetAttr.getOperator();  if (a.isOperational()) {    return evalAttrType(a,targetAttr.isAllOpAttributes(),targetAttr.opAttributes,op);  } else {    return evalAttrType(a,targetAttr.isAllUserAttributes(),targetAttr.attributes,op);  }}  }
class C{  public void write(OutputStream out,Document doc,int pos,int len) throws IOException, BadLocationException {  RTFGenerator.writeDocument(doc,out);}  }
class C{  @Override public void run(){  Collections.sort(files);  for (int i=files.size() - 1; i >= 0; i--) {    new File(files.get(i)).delete();  }}  }
class C{  public void read(Reader in,Document doc,int pos) throws IOException, BadLocationException {  if (doc instanceof StyledDocument) {    RTFReader rdr=new RTFReader((StyledDocument)doc);    rdr.readFromReader(in);    rdr.close();  } else {    super.read(in,doc,pos);  }}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  public NSDate(byte[] bytes){  this(bytes,0,bytes.length);}  }
class C{  public boolean hasString(){  return (null != m_strCache);}  }
class C{  public static int supplemental(char h,char l){  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;}  }
class C{  int readCorner2(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 4,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public void modifyUserOption(List questionAnswers,String userId,boolean forceReset) throws AMConsoleException {  Map mapData=new HashMap(4);  if (isLoggedInUser(userId)) {    Set attribVals=formatOptionData(questionAnswers);    mapData.put(PW_RESET_QUESTION_ANSWER,attribVals);  }  if (isRealmAdmin()) {    Set set=new HashSet(2);    set.add(String.valueOf(forceReset));    mapData.put(PW_RESET_FORCE_RESET,set);  }  if (!mapData.isEmpty()) {    String[] params={userId,PW_RESET_QUESTION_ANSWER};    logEvent("ATTEMPT_MODIFY_IDENTITY_ATTRIBUTE_VALUE",params);    try {      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),userId);      amid.setAttributes(mapData);      amid.store();      logEvent("SUCCEED_MODIFY_IDENTITY_ATTRIBUTE_VALUE",params);    } catch (    SSOException e) {      String strError=getErrorString(e);      String[] paramsEx={userId,PW_RESET_QUESTION_ANSWER,strError};      logEvent("SSO_EXCEPTION_MODIFY_IDENTITY_ATTRIBUTE_VALUE",paramsEx);      throw new AMConsoleException(strError);    }catch (    IdRepoException e) {      String strError=getErrorString(e);      String[] paramsEx={userId,PW_RESET_QUESTION_ANSWER,strError};      logEvent("IDM_EXCEPTION_MODIFY_IDENTITY_ATTRIBUTE_VALUE",paramsEx);      throw new AMConsoleException(strError);    }  }}  }
class C{  void updateAttributeVisibility(){  dataArray.clear();  for (  AttributeValuePair value : allSortedValues) {    if (!showOnlyAttrsWithValues.isSelected() || isRequired(value) || hasValue(value)) {      dataArray.add(value);    }  }  fireTableDataChanged();  Utilities.updateTableSizes(table);  Utilities.updateScrollMode(scroll,table);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ManagedBean[");  sb.append("name=");  sb.append(name);  sb.append(", className=");  sb.append(className);  sb.append(", description=");  sb.append(description);  if (group != null) {    sb.append(", group=");    sb.append(group);  }  sb.append(", type=");  sb.append(type);  sb.append("]");  return sb.toString();}  }
class C{  public synchronized void addConsumer(ImageConsumer ic){  if (!ics.contains(ic)) {    ics.addElement(ic);  }}  }
class C{  @Override public Behavior initialBehavior(Optional<ItineraryState> snapshotState){  BehaviorBuilder b=newBehaviorBuilder(snapshotState.orElse(ItineraryState.builder().id("").cargoId("").origin("").destination("").legs(TreePVector.empty()).timestamp(LocalDateTime.now()).build()));  b.setCommandHandler(CreateItinerary.class,null);  b.setCommandHandler(AddLeg.class,null);  b.setEventHandler(LegAdded.class,null);  b.setEventHandler(ItineraryCreated.class,null);  return b.build();}  }
class C{  public void releaseSurface(EGLSurface eglSurface){  EGL14.eglDestroySurface(mEGLDisplay,eglSurface);}  }
class C{  public LockableFileWriter(String fileName,boolean append) throws IOException {  this(fileName,append,null);}  }
class C{  public NotYetBoundException(){}  }
class C{  public void close() throws IOException {  guard.close();synchronized (this) {    if (channel != null && channel.isOpen()) {      channel.close();      channel=null;    }    IoUtils.close(fd);  }}  }
class C{  public BindOperation processSimpleBind(String rawBindDN,String password){  return processSimpleBind(ByteString.valueOfUtf8(rawBindDN),ByteString.valueOfUtf8(password),null);}  }
class C{  public static void main(String args[]) throws Exception {  System.out.println(getComponentName() + " " + getComponentVersion());  if (isNativeCodeLoaded()) {    System.out.println("Native code loaded OK " + OpenSslInfoNative.NativeVersion());    System.out.println("Native Name " + OpenSslInfoNative.NativeName());    System.out.println("Native Built " + OpenSslInfoNative.NativeTimeStamp());    System.out.println("OpenSSL library loaded OK, version: 0x" + Long.toHexString(OpenSslInfoNative.SSLeay()));    System.out.println(OpenSslInfoNative.SSLeayVersion(0));{      Properties props=new Properties();      props.setProperty(CryptoRandomFactory.CLASSES_KEY,CryptoRandomFactory.RandomProvider.OPENSSL.getClassName());      CryptoRandomFactory.getCryptoRandom(props);      System.out.println("Random instance created OK");    }{      Properties props=new Properties();      props.setProperty(CryptoCipherFactory.CLASSES_KEY,CryptoCipherFactory.CipherProvider.OPENSSL.getClassName());      CryptoCipherFactory.getCryptoCipher("AES/CTR/NoPadding",props);      System.out.println("Cipher instance created OK");    }    System.out.println("Additional SSLeay_version(n) details:");    for (int j=1; j < 6; j++) {      System.out.println(j + ": " + OpenSslInfoNative.SSLeayVersion(j));    }  } else {    System.out.println("Native load failed: " + getLoadingError());  }}  }
class C{  public boolean isStopped(){  return mDirection == STOPPED;}  }
class C{  protected void expandParentAndReceiver(){  TreeStateNode parent=(TreeStateNode)getParent();  if (parent != null)   parent.expandParentAndReceiver();  expand();}  }
class C{  public TabularDataSupport(TabularType tabularType,int initialCapacity,float loadFactor){  if (tabularType == null) {    throw new IllegalArgumentException("Argument tabularType cannot be null.");  }  this.tabularType=tabularType;  List<String> tmpNames=tabularType.getIndexNames();  this.indexNamesArray=tmpNames.toArray(new String[tmpNames.size()]);  String useHashMapProp=AccessController.doPrivileged(new GetPropertyAction("jmx.tabular.data.hash.map"));  boolean useHashMap="true".equalsIgnoreCase(useHashMapProp);  this.dataMap=useHashMap ? new HashMap<Object,CompositeData>(initialCapacity,loadFactor) : new LinkedHashMap<Object,CompositeData>(initialCapacity,loadFactor);}  }
class C{  public void removeAudioFileModificationListener(AudioFileModificationListener listener){  this.modificationHandler.removeAudioFileModificationListener(listener);}  }
class C{  public Object send(String functionName,Object param,String lbcookie,String cookies) throws Exception {  return (send(encodeMessage(functionName,param),lbcookie,cookies));}  }
class C{  private void appendHeader(final Operation operation,final String opType,final String category,final StringBuilder buffer){  buffer.append('[').append(TimeThread.getUserDefinedTime(timeStampFormat)).append("] ");  buffer.append(opType);  if (!isCombinedMode) {    buffer.append(' ').append(category);  }  buffer.append(" conn=").append(operation.getConnectionID());  buffer.append(" op=").append(operation.getOperationID());  buffer.append(" msgID=").append(operation.getMessageID());  appendTransactionId(operation,buffer);}  }
class C{  public String toString(boolean reverse,Hashtable oidSymbols){  StringBuffer buf=new StringBuffer();  Vector components=new Vector();  boolean first=true;  StringBuffer ava=null;  for (int i=0; i < ordering.size(); i++) {    if (((Boolean)added.elementAt(i)).booleanValue()) {      ava.append('+');      appendValue(ava,oidSymbols,(ASN1ObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));    } else {      ava=new StringBuffer();      appendValue(ava,oidSymbols,(ASN1ObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));      components.addElement(ava);    }  }  if (reverse) {    for (int i=components.size() - 1; i >= 0; i--) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  } else {    for (int i=0; i < components.size(); i++) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  }  return buf.toString();}  }
class C{  public IDPEntry createIDPEntry(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.IDPENTRY,value);  if (obj == null) {    return new IDPEntryImpl(value);  } else {    return (IDPEntry)obj;  }}  }
class C{  protected long allocatePoller(int size,long pool,int timeout){  try {    return Poll.create(size,pool,0,timeout * 1000);  } catch (  Error e) {    if (Status.APR_STATUS_IS_EINVAL(e.getError())) {      log.info(sm.getString("endpoint.poll.limitedpollsize","" + size));      return 0;    } else {      log.error(sm.getString("endpoint.poll.initfail"),e);      return -1;    }  }}  }
class C{  public BcryptPasswordStorageSchemeTestCase(){  super("cn=Bcrypt,cn=Password Storage Schemes,cn=config");}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SynthToggleButtonUI();}  }
class C{  public NodeSet(NodeIterator ni){  this(32);  addNodes(ni);}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  protected static TraceSettings parseTraceSettings(String value){  TraceSettings settings=null;  if (value != null) {    boolean enabled=false;    boolean exceptionsOnly=false;    boolean noArgs=false;    boolean noRetVal=false;    int stackDepth=0;    boolean includeCause=false;    String[] keywords=value.split(",");    for (    String keyword : keywords) {      if (keyword.startsWith(STACK_DUMP_KEYWORD)) {        if (keyword.length() == STACK_DUMP_KEYWORD.length()) {          stackDepth=DebugStackTraceFormatter.COMPLETE_STACK;        } else {          int depthStart=keyword.indexOf("=",STACK_DUMP_KEYWORD.length());          if (depthStart == STACK_DUMP_KEYWORD.length()) {            try {              stackDepth=Integer.valueOf(keyword.substring(depthStart + 1));            } catch (            NumberFormatException nfe) {              System.err.println("The keyword " + STACK_DUMP_KEYWORD + " contains an invalid depth value. The complete stack "+ "will be included.");            }          }        }      } else       if (INCLUDE_CAUSE_KEYWORD.equals(keyword)) {        includeCause=true;      } else       if (SUPPRESS_ARG_KEYWORD.equals(keyword)) {        noArgs=true;      } else       if (SUPPRESS_RETVAL_KEYWORD.equals(keyword)) {        noRetVal=true;      } else       if (ENABLED_KEYWORD.equals(keyword)) {        enabled=true;      } else       if (EXCEPTIONS_ONLY_KEYWORD.equals(keyword)) {        exceptionsOnly=true;      }    }    settings=new TraceSettings(Level.getLevel(enabled,exceptionsOnly),noArgs,noRetVal,stackDepth,includeCause);  }  return settings;}  }
class C{  protected AlertException(byte description,SSLException reason){  super(reason);  this.reason=reason;  this.description=description;}  }
class C{  public void testSetIssuersLjava_util_Collection(){  X509CRLSelector selector=new X509CRLSelector();  X500Principal iss1=new X500Principal("O=First Org.");  X500Principal iss2=new X500Principal("O=Second Org.");  X500Principal iss3=new X500Principal("O=Third Org.");  TestCRL crl1=new TestCRL(iss1);  TestCRL crl2=new TestCRL(iss2);  TestCRL crl3=new TestCRL(iss3);  selector.setIssuers(null);  assertTrue("Any CRL issuers should match in the case of null issuers.",selector.match(crl1) && selector.match(crl2));  ArrayList<X500Principal> issuers=new ArrayList<X500Principal>(2);  issuers.add(iss1);  issuers.add(iss2);  selector.setIssuers(issuers);  assertTrue("The CRL should match the selection criteria.",selector.match(crl1) && selector.match(crl2));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl3));  issuers.add(iss3);  assertFalse("The internal issuer collection is not protected " + "against the modifications.",selector.match(crl3));}  }
class C{  public ISPermission(String serviceName,String resourceName,String actions){  super("ISPermission");  this.serviceName=serviceName;  this.resourceName=resourceName;  this.actions=actions;  debug.message("ISPermission:: Constructor called");}  }
class C{  private String doSASLCRAMMD5(ByteSequence bindDN,ByteSequence bindPassword,Map<String,List<String>> saslProperties,List<Control> requestControls,List<Control> responseControls) throws ClientException, LDAPException {  String authID=null;  if (saslProperties == null || saslProperties.isEmpty()) {    LocalizableMessage message=ERR_LDAPAUTH_NO_SASL_PROPERTIES.get(SASL_MECHANISM_CRAM_MD5);    throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);  }  for (  Entry<String,List<String>> entry : saslProperties.entrySet()) {    String name=entry.getKey();    List<String> values=entry.getValue();    String lowerName=toLowerCase(name);    if (lowerName.equals(SASL_PROPERTY_AUTHID)) {      authID=getSingleValue(values,ERR_LDAPAUTH_AUTHID_SINGLE_VALUED);    } else {      LocalizableMessage message=ERR_LDAPAUTH_INVALID_SASL_PROPERTY.get(name,SASL_MECHANISM_CRAM_MD5);      throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);    }  }  if (authID == null || authID.length() == 0) {    LocalizableMessage message=ERR_LDAPAUTH_SASL_AUTHID_REQUIRED.get(SASL_MECHANISM_CRAM_MD5);    throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);  }  if (bindPassword == null) {    bindPassword=ByteString.empty();  }  sendInitialBindRequest(SASL_MECHANISM_CRAM_MD5,bindDN);  LDAPMessage responseMessage1=readBindResponse(ERR_LDAPAUTH_CANNOT_READ_INITIAL_BIND_RESPONSE,SASL_MECHANISM_CRAM_MD5);  checkConnected(responseMessage1);  BindResponseProtocolOp bindResponse1=responseMessage1.getBindResponseProtocolOp();  int resultCode1=bindResponse1.getResultCode();  if (resultCode1 != ReturnCode.SASL_BIND_IN_PROGRESS.get()) {    LocalizableMessage errorMessage=bindResponse1.getErrorMessage();    if (errorMessage == null) {      errorMessage=LocalizableMessage.EMPTY;    }    LocalizableMessage message=ERR_LDAPAUTH_UNEXPECTED_INITIAL_BIND_RESPONSE.get(SASL_MECHANISM_CRAM_MD5,resultCode1,ReturnCode.get(resultCode1),errorMessage);    throw new LDAPException(resultCode1,errorMessage,message,bindResponse1.getMatchedDN(),null);  }  ByteString serverChallenge=bindResponse1.getServerSASLCredentials();  if (serverChallenge == null) {    LocalizableMessage message=ERR_LDAPAUTH_NO_CRAMMD5_SERVER_CREDENTIALS.get();    throw new LDAPException(ReturnCode.PROTOCOL_ERROR.get(),message);  }  String salsCredentials=authID + ' ' + generateCRAMMD5Digest(bindPassword,serverChallenge);  sendSecondBindRequest(SASL_MECHANISM_CRAM_MD5,bindDN,salsCredentials,requestControls);  LDAPMessage responseMessage2=readBindResponse(ERR_LDAPAUTH_CANNOT_READ_SECOND_BIND_RESPONSE,SASL_MECHANISM_CRAM_MD5);  responseControls.addAll(responseMessage2.getControls());  checkConnected(responseMessage2);  checkSuccessfulBind(responseMessage2,SASL_MECHANISM_CRAM_MD5);  return null;}  }
class C{  void processDragEnter(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragEnter(dsde);  }}  }
class C{  @WXModuleAnno(moduleMethod=true,runOnUIThread=false) public void removeElement(String ref){  if (TextUtils.isEmpty(ref)) {    return;  }  Message msg=Message.obtain();  WXDomTask task=new WXDomTask();  task.instanceId=mWXSDKInstance.getInstanceId();  task.args=new ArrayList<>();  task.args.add(ref);  msg.what=WXDomHandler.MsgType.WX_DOM_REMOVE_DOM;  msg.obj=task;  WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);}  }
class C{  public void testSetScaleRoundHalfDown(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_HALF_DOWN);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public static int parseInt(String string,int radix) throws NumberFormatException {  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    throw new NumberFormatException("Invalid radix: " + radix);  }  if (string == null) {    throw invalidInt(string);  }  int length=string.length(), i=0;  if (length == 0) {    throw invalidInt(string);  }  boolean negative=string.charAt(i) == '-';  if (negative && ++i == length) {    throw invalidInt(string);  }  return parse(string,i,radix,negative);}  }
class C{  public Scroller(Context context,Interpolator interpolator){  this(context,interpolator,context.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB);}  }
class C{  public void removeAttribute(String name){  if (name == null)   throw new NullPointerException("null arg!");  if (name != null) {    int i=0;    for (i=0; i < this.attributeFields.size(); i++) {      AttributeField af=(AttributeField)this.attributeFields.elementAt(i);      if (af.getAttribute().getName().equals(name))       break;    }    if (i < attributeFields.size())     attributeFields.removeElementAt(i);  }}  }
class C{  public static boolean syncReplicatedServerList(Set currServerSet,String port,String passwd){  try (Connection conn=getLDAPConnection("localhost",port,"cn=Directory Manager",passwd)){    Set<String> dsServers=getServerSet(conn);    if (dsServers == null) {      return false;    }    for (    String tok : dsServers) {      if (!currServerSet.contains(tok)) {        delOpenDSServer(conn,tok);      }    }  } catch (  Exception ex) {    return false;  }  return true;}  }
class C{  public boolean isEmpty(){  return getData() <= CAULDRON_EMPTY;}  }
class C{  public void testUnequalObjectsUnequal(){  String value1="12378246728727834290276457386374882976782849";  String value2="-5634562095872038262928728727834290276457386374882976782849";  BigInteger aNumber1=new BigInteger(value1);  BigInteger aNumber2=new BigInteger(value2);  int code1=aNumber1.hashCode();  int code2=aNumber2.hashCode();  if (!aNumber1.equals(aNumber2)) {    assertTrue("hash codes for unequal objects are equal",code1 != code2);  }}  }
class C{  private boolean containsNullValue(){  Entry<K,V>[] tab=getTable();  for (int i=tab.length; i-- > 0; )   for (Entry<K,V> e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  int addVariableName(final org.apache.xml.utils.QName qname){  int pos=m_variableNames.size();  m_variableNames.addElement(qname);  int frameSize=m_variableNames.size() - getGlobalsSize();  if (frameSize > m_maxStackFrameSize)   m_maxStackFrameSize++;  return pos;}  }
class C{  public void addCharOption(LocalizableMessage c,LocalizableMessage description,MenuCallback<T> callback){  charKeys.add(c);  charSynopsis.add(description);  charCallbacks.add(callback);}  }
class C{  private void updateStyleImp(Map<String,Object> style){  if (style != null) {    if (style.containsKey(WXDomPropConstant.WX_LINES)) {      int lines=WXStyle.getLines(style);      if (lines > 0) {        mNumberOfLines=lines;      }    }    if (style.containsKey(WXDomPropConstant.WX_FONTSIZE)) {      mFontSize=WXStyle.getFontSize(style);    }    if (style.containsKey(WXDomPropConstant.WX_FONTWEIGHT)) {      mFontWeight=WXStyle.getFontWeight(style);    }    if (style.containsKey(WXDomPropConstant.WX_FONTSTYLE)) {      mFontStyle=WXStyle.getFontStyle(style);    }    if (style.containsKey(WXDomPropConstant.WX_COLOR)) {      mColor=WXResourceUtils.getColor(WXStyle.getTextColor(style));      mIsColorSet=mColor != Integer.MIN_VALUE;    }    if (style.containsKey(WXDomPropConstant.WX_TEXTDECORATION)) {      mTextDecoration=WXStyle.getTextDecoration(style);    }    if (style.containsKey(WXDomPropConstant.WX_FONTFAMILY)) {      mFontFamily=WXStyle.getFontFamily(style);    }    mAlignment=WXStyle.getTextAlignment(style);    textOverflow=WXStyle.getTextOverflow(style);    int lineHeight=WXStyle.getLineHeight(style);    if (lineHeight != UNSET)     mLineHeight=lineHeight;  }}  }
class C{  public final void testGetEncodings(){  CertPath cp1=new MyCertPath(testEncoding);  cp1.getEncodings();}  }
class C{  public TextLayout(String string,Map<? extends Attribute,?> attributes,FontRenderContext frc){  if (string == null) {    throw new IllegalArgumentException("Null string passed to TextLayout constructor.");  }  if (attributes == null) {    throw new IllegalArgumentException("Null map passed to TextLayout constructor.");  }  if (string.length() == 0) {    throw new IllegalArgumentException("Zero length string passed to TextLayout constructor.");  }  char[] text=string.toCharArray();  Font font=singleFont(text,0,text.length,attributes);  if (font != null) {    fastInit(text,font,attributes,frc);  } else {    AttributedString as=new AttributedString(string,attributes);    standardInit(as.getIterator(),text,frc);  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobMediaSheetsCompleted);}  }
class C{  private boolean isGenerateConnectorCoreConfig(JsonValue requestConfig){  return !requestConfig.get(CONNECTOR_REF).isNull() && !requestConfig.get(CONNECTOR_REF).get(CONNECTOR_NAME).isNull() && requestConfig.get(CONFIGURATION_PROPERTIES).isNull();}  }
class C{  public boolean equals(Object o){  return (this == o);}  }
class C{  public String toDbTable(){  return database.getName() + "_" + name;}  }
class C{  public String addListener(ConfigurationListener listener) throws ConfigurationException {  return "NO_OP";}  }
class C{  void addToParent(Element headerE){  Document doc=headerE.getOwnerDocument();  Element consentHeaderE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING,SOAPBindingConstants.PTAG_CONSENT);  headerE.appendChild(consentHeaderE);  consentHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_URI,uri);  if (timestamp != null) {    consentHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_TIMESTAMP,DateUtils.toUTCDateFormat(timestamp));  }  if (id != null) {    consentHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_id,id);  }  if (mustUnderstand != null) {    consentHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_MUSTUNDERSTAND,Utils.BooleanToString(mustUnderstand));  }  if (actor != null) {    consentHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_ACTOR,actor);  }}  }
class C{  public MemoryImageSource(int w,int h,ColorModel cm,int[] pix,int off,int scan,Hashtable<?,?> props){  initialize(w,h,cm,(Object)pix,off,scan,props);}  }
class C{  @Inject public OpenIDTokenIssuer(OpenIdConnectTokenStore tokenStore,ResourceOwnerSessionValidator resourceOwnerSessionValidator){  this.tokenStore=tokenStore;  this.resourceOwnerSessionValidator=resourceOwnerSessionValidator;}  }
class C{  public void testTestBitException(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  try {    aNumber.testBit(number);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public void handleTblProviderResourceIdMapperButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SMDiscoveryProviderResourceIdMapperAddViewBean vb=(SMDiscoveryProviderResourceIdMapperAddViewBean)getViewBean(SMDiscoveryProviderResourceIdMapperAddViewBean.class);    removePageSessionAttribute(SMDiscoveryProviderResourceIdMapperAddViewBean.PROPERTY_ATTRIBUTE);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  protected void reset() throws LoginException {  authDebug.message("AuthContext::reset()");  reset(null);  authDebug.message("AuthContext::reset() exiting");}  }
class C{  public PotionEffect(PotionEffectType type,int duration,int amplifier,boolean ambient){  this(type,duration,amplifier,ambient,true);}  }
class C{  @SuppressWarnings("deprecation") protected void processStyledAttributes(@NonNull TypedArray a){  float targetAspectRatioX=Math.abs(a.getFloat(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_aspect_ratio_x,DEFAULT_ASPECT_RATIO));  float targetAspectRatioY=Math.abs(a.getFloat(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_aspect_ratio_y,DEFAULT_ASPECT_RATIO));  if (targetAspectRatioX == SOURCE_IMAGE_ASPECT_RATIO || targetAspectRatioY == SOURCE_IMAGE_ASPECT_RATIO) {    mTargetAspectRatio=SOURCE_IMAGE_ASPECT_RATIO;  } else {    mTargetAspectRatio=targetAspectRatioX / targetAspectRatioY;  }}  }
class C{  protected void isCommentWellFormed(String data){  if (data == null || (data.length() == 0)) {    return;  }  char[] dataarray=data.toCharArray();  int datalength=dataarray.length;  if (fIsXMLVersion11) {    int i=0;    while (i < datalength) {      char c=dataarray[i++];      if (XML11Char.isXML11Invalid(c)) {        if (XMLChar.isHighSurrogate(c) && i < datalength) {          char c2=dataarray[i++];          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {            continue;          }        }        String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_COMMENT,new Object[]{new Character(c)});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      } else       if (c == '-' && i < datalength && dataarray[i] == '-') {        String msg=Utils.messages.createMessage(MsgKey.ER_WF_DASH_IN_COMMENT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      }    }  } else {    int i=0;    while (i < datalength) {      char c=dataarray[i++];      if (XMLChar.isInvalid(c)) {        if (XMLChar.isHighSurrogate(c) && i < datalength) {          char c2=dataarray[i++];          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {            continue;          }        }        String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_COMMENT,new Object[]{new Character(c)});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      } else       if (c == '-' && i < datalength && dataarray[i] == '-') {        String msg=Utils.messages.createMessage(MsgKey.ER_WF_DASH_IN_COMMENT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      }    }  }  return;}  }
class C{  public boolean hasMessageType(String messageTypeName){  for (  TypeElement type : _nativeTypes) {    if (messageTypeName.equals(type.name())) {      if (type instanceof MessageElement) {        return true;      }    }  }  return false;}  }
class C{  static public void assertEquals(short expected,short actual){  assertEquals(null,expected,actual);}  }
class C{  public static CharSequence downloadViaHttp(String uri,ContentType type) throws IOException {  return downloadViaHttp(uri,type,Integer.MAX_VALUE);}  }
class C{  public static void enqueueRequest(Operation operation) throws DirectoryException {  checkCanEnqueueRequest(operation,false);  directoryServer.workQueue.submitOperation(operation);}  }
class C{  static void appendConstant(final StringBuffer buf,final Object cst){  if (cst == null) {    buf.append("null");  } else   if (cst instanceof String) {    appendString(buf,(String)cst);  } else   if (cst instanceof Type) {    buf.append("Type.getType(\"");    buf.append(((Type)cst).getDescriptor());    buf.append("\")");  } else   if (cst instanceof Handle) {    buf.append("new Handle(");    Handle h=(Handle)cst;    buf.append("Opcodes.").append(HANDLE_TAG[h.getTag()]).append(", \"");    buf.append(h.getOwner()).append("\", \"");    buf.append(h.getName()).append("\", \"");    buf.append(h.getDesc()).append("\")");  } else   if (cst instanceof Byte) {    buf.append("new Byte((byte)").append(cst).append(')');  } else   if (cst instanceof Boolean) {    buf.append(((Boolean)cst).booleanValue() ? "Boolean.TRUE" : "Boolean.FALSE");  } else   if (cst instanceof Short) {    buf.append("new Short((short)").append(cst).append(')');  } else   if (cst instanceof Character) {    int c=((Character)cst).charValue();    buf.append("new Character((char)").append(c).append(')');  } else   if (cst instanceof Integer) {    buf.append("new Integer(").append(cst).append(')');  } else   if (cst instanceof Float) {    buf.append("new Float(\"").append(cst).append("\")");  } else   if (cst instanceof Long) {    buf.append("new Long(").append(cst).append("L)");  } else   if (cst instanceof Double) {    buf.append("new Double(\"").append(cst).append("\")");  } else   if (cst instanceof byte[]) {    byte[] v=(byte[])cst;    buf.append("new byte[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof boolean[]) {    boolean[] v=(boolean[])cst;    buf.append("new boolean[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof short[]) {    short[] v=(short[])cst;    buf.append("new short[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(short)").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof char[]) {    char[] v=(char[])cst;    buf.append("new char[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(char)").append((int)v[i]);    }    buf.append('}');  } else   if (cst instanceof int[]) {    int[] v=(int[])cst;    buf.append("new int[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof long[]) {    long[] v=(long[])cst;    buf.append("new long[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('L');    }    buf.append('}');  } else   if (cst instanceof float[]) {    float[] v=(float[])cst;    buf.append("new float[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('f');    }    buf.append('}');  } else   if (cst instanceof double[]) {    double[] v=(double[])cst;    buf.append("new double[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('d');    }    buf.append('}');  }}  }
class C{  private void fill() throws IOException {  byte[] buffer=getBufIfOpen();  if (markpos < 0)   pos=0; else   if (pos >= buffer.length)   if (markpos > 0) {    int sz=pos - markpos;    System.arraycopy(buffer,markpos,buffer,0,sz);    pos=sz;    markpos=0;  } else   if (buffer.length >= marklimit) {    markpos=-1;    pos=0;  } else   if (buffer.length >= MAX_BUFFER_SIZE) {    throw new OutOfMemoryError("Required array size too large");  } else {    int nsz=(pos <= MAX_BUFFER_SIZE - pos) ? pos * 2 : MAX_BUFFER_SIZE;    if (nsz > marklimit)     nsz=marklimit;    byte nbuf[]=new byte[nsz];    System.arraycopy(buffer,0,nbuf,0,pos);    if (!bufUpdater.compareAndSet(this,buffer,nbuf)) {      throw new IOException("Stream closed");    }    buffer=nbuf;  }  count=pos;  int n=getInIfOpen().read(buffer,pos,buffer.length - pos);  if (n > 0)   count=n + pos;}  }
class C{  private void markConflictEntry(Operation op,DN currentDN,DN conflictDN){  Attribute attr=Attributes.create(DS_SYNC_CONFLICT,conflictDN.toString());  List<Modification> mods=newArrayList(new Modification(ModificationType.REPLACE,attr));  ModifyOperation newOp=new ModifyOperationBasis(conn,nextOperationID(),nextMessageID(),new ArrayList<Control>(0),currentDN,mods);  runAsSynchronizedOperation(newOp);  if (newOp.getResultCode() != ResultCode.SUCCESS) {    logger.error(ERR_CANNOT_ADD_CONFLICT_ATTRIBUTE,op,newOp.getResultCode());  }  LocalizableMessage alertMessage=NOTE_UNRESOLVED_CONFLICT.get(conflictDN);  DirectoryServer.sendAlertNotification(this,ALERT_TYPE_REPLICATION_UNRESOLVED_CONFLICT,alertMessage);}  }
class C{  @Override public void cancelCall(){  getCall().cancel();}  }
class C{  public void testGetSigAlgName(){  if (this.cert == null) {    return;  }  assertEquals("The name of signature algorithm is not correct.",tbt_cert.getSigAlgName(),cert.getSigAlgName());}  }
class C{  private static void updateFormatCache(Long key,String value){  if (value == null) {    return;  }  if (formatCache.size() > CACHE_SIZE) {    formatCache.clear();  }  formatCache.put(key,value);}  }
class C{  public static void cloneToResultTree(int node,int nodeType,DTM dtm,SerializationHandler rth,boolean shouldCloneAttributes) throws TransformerException {  try {switch (nodeType) {case DTM.TEXT_NODE:      dtm.dispatchCharactersEvents(node,rth,false);    break;case DTM.DOCUMENT_FRAGMENT_NODE:case DTM.DOCUMENT_NODE:  break;case DTM.ELEMENT_NODE:{  String ns=dtm.getNamespaceURI(node);  if (ns == null)   ns="";  String localName=dtm.getLocalName(node);  rth.startElement(ns,localName,dtm.getNodeNameX(node));  if (shouldCloneAttributes) {    SerializerUtils.addAttributes(rth,node);    SerializerUtils.processNSDecls(rth,node,nodeType,dtm);  }}break;case DTM.CDATA_SECTION_NODE:rth.startCDATA();dtm.dispatchCharactersEvents(node,rth,false);rth.endCDATA();break;case DTM.ATTRIBUTE_NODE:SerializerUtils.addAttribute(rth,node);break;case DTM.NAMESPACE_NODE:SerializerUtils.processNSDecls(rth,node,DTM.NAMESPACE_NODE,dtm);break;case DTM.COMMENT_NODE:XMLString xstr=dtm.getStringValue(node);xstr.dispatchAsComment(rth);break;case DTM.ENTITY_REFERENCE_NODE:rth.entityReference(dtm.getNodeNameX(node));break;case DTM.PROCESSING_INSTRUCTION_NODE:{rth.processingInstruction(dtm.getNodeNameX(node),dtm.getNodeValue(node));}break;default :throw new TransformerException("Can't clone node: " + dtm.getNodeName(node));}} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);}}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  @Override public void run(){  captureThread=currentThread();  captureStartTime=System.currentTimeMillis();  while (!stopProfiling) {    long startTime=System.currentTimeMillis();    Map<Thread,StackTraceElement[]> stacks=getAllStackTraces();    numIntervals++;    for (    Thread t : stacks.keySet()) {      if (t == currentThread()) {        continue;      }      StackTraceElement[] threadStack=stacks.get(t);      if (threadStack == null || threadStack.length == 0) {        continue;      }      ProfileStack profileStack=new ProfileStack(threadStack);      Long currentCount=stackTraces.get(profileStack);      if (currentCount == null) {        stackTraces.put(profileStack,1L);      } else {        stackTraces.put(profileStack,1L + currentCount.intValue());      }    }    if (!stopProfiling) {      long sleepTime=sampleInterval - (System.currentTimeMillis() - startTime);      if (sleepTime > 0) {        try {          Thread.sleep(sleepTime);        } catch (        Exception e) {          logger.traceException(e);        }      }    }  }  captureStopTime=System.currentTimeMillis();  captureThread=null;}  }
class C{  public static QrSegment makeNumeric(String digits){  if (digits == null)   throw new NullPointerException();  if (!NUMERIC_REGEX.matcher(digits).matches())   throw new IllegalArgumentException("String contains non-numeric characters");  BitBuffer bb=new BitBuffer();  int i;  for (i=0; i + 3 <= digits.length(); i+=3)   bb.appendBits(Integer.parseInt(digits.substring(i,i + 3)),10);  int rem=digits.length() - i;  if (rem > 0)   bb.appendBits(Integer.parseInt(digits.substring(i)),rem * 3 + 1);  return new QrSegment(Mode.NUMERIC,digits.length(),bb.getBytes(),bb.bitLength());}  }
class C{  private void initialize(){  debug.message("inside AMConfiguration.initialize()");  jaasConfig.clear();  listenersMap.clear();}  }
class C{  public void assign_selected_to_new_group(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  StateInteractive new_state=((StateSelectedItem)interactive_state).assign_items_to_new_group();  set_interactive_state(new_state);}  }
class C{  public KeyStroke[] keys(){  if (arrayTable == null) {    return null;  }  KeyStroke[] keys=new KeyStroke[arrayTable.size()];  arrayTable.getKeys(keys);  return keys;}  }
class C{  public void deleteTag(AudioFile f) throws CannotReadException, CannotWriteException {  String ext=Utils.getExtension(f.getFile());  Object afw=writers.get(ext);  if (afw == null) {    throw new CannotWriteException(ErrorMessage.NO_DELETER_FOR_THIS_FORMAT.getMsg(ext));  }  ((AudioFileWriter)afw).delete(f);}  }
class C{  public static int checksum(int crc,final byte[] data,int offset,final int length){  int end=offset + length;  for (; offset < end; offset++) {    crc=(crc << 8) ^ crc_lookup[((crc >>> 24) & 0xff) ^ (data[offset] & 0xff)];  }  return crc;}  }
class C{  public TestCertificate(){  super(TYPE);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  StringBuffer namespaceBuffer=new StringBuffer(100);  String nsDeclaration="";  if (declareNS) {    namespaceBuffer.append(XACMLConstants.CONTEXT_NS_DECLARATION).append(XACMLConstants.SPACE);    namespaceBuffer.append(XACMLConstants.XSI_NS_URI).append(XACMLConstants.SPACE).append(XACMLConstants.CONTEXT_SCHEMA_LOCATION);  }  if (includeNSPrefix) {    nsDeclaration=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  sb.append("\n<").append(nsDeclaration).append(XACMLConstants.REQUEST).append(namespaceBuffer).append(">\n");  int length=0;  if (subjects != null && !subjects.isEmpty()) {    length=subjects.size();    for (int i=0; i < length; i++) {      Subject sub=(Subject)subjects.get(i);      sb.append(sub.toXMLString(includeNSPrefix,false));    }  }  if (resources != null && !resources.isEmpty()) {    length=resources.size();    for (int i=0; i < length; i++) {      Resource resource=(Resource)resources.get(i);      sb.append(resource.toXMLString(includeNSPrefix,false));    }  }  if (action != null) {    sb.append(action.toXMLString(includeNSPrefix,false));  }  if (env != null) {    sb.append(env.toXMLString(includeNSPrefix,false));  }  sb.append("</").append(nsDeclaration).append(XACMLConstants.REQUEST).append(">\n");  return sb.toString();}  }
class C{  public Builder obsolete(final boolean isObsolete){  this.isObsolete=isObsolete;  return this;}  }
class C{  public static String orgNameToDN(String orgName){  if (orgName == null || orgName.trim().length() == 0 || orgName.equals(SMSEntry.SLASH_STR)) {    return (SMSEntry.baseDN);  }  String orgdn=(String)cache.get(orgName);  if (orgdn != null) {    return (orgdn);  }  if (!orgName.startsWith("/")) {    DN orgdnObject=LDAPUtils.newDN(orgName);    if (orgdnObject.size() > 0) {      orgdn=orgdnObject.toString();      String orgdnlc=orgdn.toLowerCase();      if (orgdnlc.startsWith(SMSEntry.SUN_INTERNAL_REALM_PREFIX)) {        orgdn=orgdnObject.rdn().toString() + "," + serviceDN;        updateCache(orgName,orgdn);        return orgdn;      }      if (orgdnlc.equals(SMSEntry.baseDN) || orgdnlc.equals(serviceDN) || orgdnlc.equals(SMSEntry.amsdkbaseDN)) {        updateCache(orgName,SMSEntry.baseDN);        return (SMSEntry.baseDN);      }      if (realmEnabled) {        int ndx=orgdn.indexOf(serviceDN);        if (ndx == -1) {          ndx=orgdn.lastIndexOf(SMSEntry.baseDN);        }        if (ndx > 0) {          orgdn=orgdn.substring(0,ndx - 1);        }        int indx=orgdn.lastIndexOf(SMSEntry.COMMA);        if (indx >= 0) {          if (orgdn.substring(indx).equals(SMSEntry.COMMA)) {            orgdn=orgdn.substring(0,indx);          }        }        if (debug.messageEnabled()) {          debug.message("DNMapper.orgNameToDN():orgdn " + orgdn);        }        String answer=normalizeDN(orgdn) + serviceDN;        if (debug.messageEnabled()) {          debug.message("DNMapper.orgNameToDN(" + orgName + ")="+ answer);        }        updateCache(orgName,answer);        return (answer);      } else       if (!migration) {        orgdn=replaceString(orgdn,",ou=services,",",");        updateCache(orgName,orgdn);        return (orgdn);      } else {        return (orgdn);      }    }  }  StringBuffer buf=convertToDN(orgName);  if (realmEnabled || buf.toString().toLowerCase().indexOf(SMSEntry.SUN_INTERNAL_REALM_NAME) != -1) {    buf.append(",").append(serviceDN);  } else   if (SMSEntry.baseDN.length() > 0) {    buf.append(",").append(SMSEntry.baseDN);  }  if (debug.messageEnabled()) {    debug.message("DNMapper.orgNameToDN(" + orgName + ")="+ buf.toString());  }  String answer=buf.toString();  updateCache(orgName,answer);  return (answer);}  }
class C{  @Override public EnumEvalResult evaluate(AciEvalContext evalCtx){  EnumEvalResult matched=evaluate() ? EnumEvalResult.TRUE : EnumEvalResult.FALSE;  return matched.getRet(type,false);}  }
class C{  public void registerChangeListener(ConfigurationChangeListener<? super S> listener){  registerChangeListener(new ServerManagedObjectChangeListenerAdaptor<S>(listener));}  }
class C{  public void registerSubjectType(String name,Class<? extends EntitlementSubject> type){  register(name,subjects,type);}  }
class C{  public void entryChanged(DSEvent dsEvent){  DN dn=DN.valueOf(dsEvent.getID());  String normalizedDN=dn.toString().toLowerCase();  if (debug.messageEnabled()) {    debug.message("EntryEventListener.entryChanged(): DSEvent " + "generated for: " + dn);  }  boolean cosType=true;  String affectDNs="";  Set attrNames=Collections.EMPTY_SET;  String serviceName=null;  String objClasses=dsEvent.getClassName();  if (objClasses.indexOf("cosClassicDefinition") != -1) {    affectDNs=dn.parent().toString().toLowerCase();    serviceName=LDAPUtils.rdnValueFromDn(dn);    attrNames=getDynamicAttributeNames(serviceName);    if (debug.messageEnabled()) {      debug.message("EntryEventListener.entryChanged() " + "Cos Definition changed for service: " + serviceName + "Dynamic Attributes: "+ attrNames);    }  } else   if (objClasses.indexOf("costemplate") != -1) {    affectDNs=dn.parent().parent().toString().toLowerCase();    serviceName=LDAPUtils.rdnValueFromDn(dn.parent());    attrNames=getDynamicAttributeNames(serviceName);    if (debug.messageEnabled()) {      debug.message("EntryEventListener." + "entryChanged()" + "Cos template changed for service: " + serviceName + "Dynamic Attributes: "+ attrNames);    }  } else {    cosType=false;    affectDNs=normalizedDN;  }  if (debug.messageEnabled()) {    debug.message("EntryEventListener.entryChanged(): Affected dn: " + affectDNs + " cosType: "+ cosType);  }  IDirectoryServices dsServices=DirectoryServicesFactory.getInstance();synchronized (listeners) {    Set keys=listeners.keySet();    for (Iterator items=keys.iterator(); items.hasNext(); ) {      AMObjectListener listener=(AMObjectListener)items.next();      Map configMap=(Map)listeners.get(listener);      if (cosType) {        if (DirectoryServicesFactory.isCachingEnabled()) {          ((ICachedDirectoryServices)dsServices).dirtyCache(affectDNs,dsEvent.getEventType(),true,false,attrNames);          ((ICachedDirectoryServices)dsServices).dirtyCache(normalizedDN,dsEvent.getEventType(),false,false,Collections.EMPTY_SET);        }        listener.objectsChanged(affectDNs,dsEvent.getEventType(),attrNames,configMap);        listener.objectChanged(normalizedDN,dsEvent.getEventType(),configMap);      } else {        if (DirectoryServicesFactory.isCachingEnabled()) {          ((ICachedDirectoryServices)dsServices).dirtyCache(affectDNs,dsEvent.getEventType(),false,false,Collections.EMPTY_SET);        }        listener.objectChanged(affectDNs,dsEvent.getEventType(),configMap);      }    }  }}  }
class C{  public static <T>Promise<T,ResourceException> generateBadRequestException(){  return generateBadRequestException("Bad request.");}  }
class C{  private void cancelClicked(){  isCanceled=true;  dispose();}  }
class C{  public void printStackTrace(PrintWriter pw){  pw.println(fetchStackTrace());}  }
class C{  public ClientRegistration(final String name,final JsonValue config,final Issuer issuer,final Handler registrationHandler){  this.name=name != null ? name : firstOf(config,"client_name","client_id").asString();  this.clientId=firstOf(config,"clientId","client_id").required().asString();  this.clientSecret=firstOf(config,"clientSecret","client_secret").required().asString();  this.scopes=config.get("scopes").defaultTo(emptyList()).required().asList(String.class);  if (config.isDefined("token_endpoint_auth_method") && config.get("token_endpoint_auth_method").asString().equals("client_secret_post")) {    this.tokenEndpointUseBasicAuth=false;  } else {    this.tokenEndpointUseBasicAuth=config.get("tokenEndpointUseBasicAuth").defaultTo(true).asBoolean();  }  this.issuer=issuer;  this.registrationHandler=registrationHandler;}  }
class C{  public void testAddHighlightColorSpan(){  mRichTextView.colorSpan(0,5,RichTextView.ColorFormatType.HIGHLIGHT,Color.BLUE);  Object[] spans=mRichTextView.getSpans();  assertEquals(1,spans.length);  Object firstSpan=spans[0];  assertTrue(firstSpan instanceof BackgroundColorSpan);  assertTrue(((BackgroundColorSpan)firstSpan).getBackgroundColor() == Color.BLUE);}  }
class C{  public synchronized void removeHyperlinkListener(HyperlinkListener listener){  listenerList.remove(HyperlinkListener.class,listener);}  }
class C{  public String[] allKeys(){  return dict.keySet().toArray(new String[count()]);}  }
class C{  public void writeRequest(Headers headers,String requestLine) throws IOException {  if (state != STATE_IDLE)   throw new IllegalStateException("state: " + state);  sink.writeUtf8(requestLine).writeUtf8("\r\n");  for (int i=0, size=headers.size(); i < size; i++) {    sink.writeUtf8(headers.name(i)).writeUtf8(": ").writeUtf8(headers.value(i)).writeUtf8("\r\n");  }  sink.writeUtf8("\r\n");  state=STATE_OPEN_REQUEST_BODY;}  }
class C{  public final void testHashCode03(){  assertTrue(new ECFieldF2m(111).hashCode() == new ECFieldF2m(111).hashCode());}  }
class C{  public static DigestMD5SASLBindRequest newDigestMD5SASLBindRequest(final String authenticationID,final char[] password){  return new DigestMD5SASLBindRequestImpl(authenticationID,getBytes(password));}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  backTrail();  String tmp=(String)getPageSessionAttribute(AMAdminConstants.PREVIOUS_REALM);  setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,tmp);  tmp=(String)getPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID);  setPageSessionAttribute(getTrackingTabIDName(),tmp);  RMRealmViewBean vb=(RMRealmViewBean)getViewBean(RMRealmViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void goTo(final Label label){  mv.visitJumpInsn(Opcodes.GOTO,label);}  }
class C{  public String encode(){  StringBuilder retval=new StringBuilder();  if (mediaField != null)   retval.append(mediaField.encode());  if (informationField != null)   retval.append(informationField.encode());  if (connectionField != null)   retval.append(connectionField.encode());  if (bandwidthFields != null) {    for (int i=0; i < bandwidthFields.size(); i++) {      retval.append(((SDPField)bandwidthFields.elementAt(i)).encode());    }    if (preconditionFields != null) {      int precondSize=preconditionFields.getPreconditionSize();      for (int i=0; i < precondSize; i++) {        retval.append(((SDPField)preconditionFields.getPreconditions().elementAt(i)).encode());      }    }  }  if (keyField != null)   retval.append(keyField.encode());  if (attributeFields != null) {    for (int i=0; i < attributeFields.size(); i++)     retval.append(((SDPField)attributeFields.elementAt(i)).encode());  }  return retval.toString();}  }
class C{  private boolean checkSecurityLevel(int securityLevel){  return securityLevel >= this.securityLevel;}  }
class C{  public void insertInOrder(int value){  for (int i=0; i < m_firstFree; i++) {    if (value < m_map[i]) {      insertElementAt(value,i);      return;    }  }  addElement(value);}  }
class C{  boolean isSystemTheme(){  return (getClass() == DefaultMetalTheme.class);}  }
class C{  public void removeSession(Session session){  SingleSignOnSessionKey key=new SingleSignOnSessionKey(session);  sessionKeys.remove(key);}  }
class C{  public static KeywordBindRule decode(String expr,EnumBindRuleType type) throws AciException {  List<EnumDayOfWeek> days=new LinkedList<>();  String[] dayArray=expr.split(",",-1);  for (  String element : dayArray) {    EnumDayOfWeek day=EnumDayOfWeek.createDayOfWeek(element);    if (day == null) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_DAYOFWEEK.get(expr);      throw new AciException(message);    }    days.add(day);  }  return new DayOfWeek(days,type);}  }
class C{  private void updateEntryView(Entry searchResult,TreePath treePath){  boolean isReadOnly=isReadOnly(searchResult.getName());  boolean canDelete=canDelete(searchResult.getName());  delete.setVisible(canDelete);  saveChanges.setVisible(!isReadOnly);  String cardKey;switch (view) {case LDIF_VIEW:    displayedEntryPanel=ldifEntryPanel;  cardKey=LDIF_VIEW;break;case ATTRIBUTE_VIEW:displayedEntryPanel=tableEntryPanel;cardKey=ATTRIBUTE_VIEW;break;default :displayedEntryPanel=simplifiedEntryPanel;cardKey=SIMPLIFIED_VIEW;}displayedEntryPanel.update(searchResult,isReadOnly,treePath);saveChanges.setEnabled(false);cardLayout.show(mainPanel,cardKey);}  }
class C{  public boolean isObjectTriggering(){  return (getData() & 0x1) != 0;}  }
class C{  public SCSOAPBindingModelImpl(HttpServletRequest req,String serviceName,Map map) throws AMConsoleException {  super(req,serviceName,map);}  }
class C{  protected void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);  if (evt.getPropertyName().equals("lineWrap") || evt.getPropertyName().equals("wrapStyleWord") || evt.getPropertyName().equals("tabSize")) {    modelChanged();  } else   if ("editable".equals(evt.getPropertyName())) {    updateFocusTraversalKeys();  }}  }
class C{  public void makeImmutable(){}  }
class C{  void updateChildOffsetsToIndex(int index){  int pos=lastValidOffset.getChildView().getStartOffset();  int startIndex=getViewIndex(pos,Position.Bias.Forward);  float lastOffset=lastValidOffset.getMajorOffset();  for (int i=startIndex; i <= index; i++) {    ChildState cs=getChildState(i);    cs.setMajorOffset(lastOffset);    lastOffset+=cs.getMajorSpan();  }}  }
class C{  public void testCertPathBuilder05() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        CertPathBuilder.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be hrown");      } catch (      NoSuchProviderException e1) {      }    }  }}  }
class C{  private static void guessLetter(int offset,char[] solution) throws IOException {  for (char c=0; c < 256; c++) {    if (validChars[c]) {      solution[offset]=c;      checkAndSolve(solution,false);    }  }  solution[offset]=0;}  }
class C{  public XmlStreamWriter(File file,String defaultEncoding) throws FileNotFoundException {  this(new FileOutputStream(file),defaultEncoding);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aContext,StoreDescription parentDesc) throws Exception {  if (aContext instanceof StandardContext) {    StandardContext context=(StandardContext)aContext;    LifecycleListener listeners[]=context.findLifecycleListeners();    ArrayList<LifecycleListener> listenersArray=new ArrayList<>();    for (    LifecycleListener listener : listeners) {      if (!(listener instanceof ThreadLocalLeakPreventionListener)) {        listenersArray.add(listener);      }    }    storeElementArray(aWriter,indent,listenersArray.toArray());    Valve valves[]=context.getPipeline().getValves();    storeElementArray(aWriter,indent,valves);    Loader loader=context.getLoader();    storeElement(aWriter,indent,loader);    if (context.getCluster() == null || !context.getDistributable()) {      Manager manager=context.getManager();      storeElement(aWriter,indent,manager);    }    Realm realm=context.getRealm();    if (realm != null) {      Realm parentRealm=null;      if (context.getParent() != null) {        parentRealm=context.getParent().getRealm();      }      if (realm != parentRealm) {        storeElement(aWriter,indent,realm);      }    }    WebResourceRoot resources=context.getResources();    storeElement(aWriter,indent,resources);    String wLifecycles[]=context.findWrapperLifecycles();    getStoreAppender().printTagArray(aWriter,"WrapperListener",indent + 2,wLifecycles);    String wListeners[]=context.findWrapperListeners();    getStoreAppender().printTagArray(aWriter,"WrapperLifecycle",indent + 2,wListeners);    ApplicationParameter[] appParams=context.findApplicationParameters();    storeElementArray(aWriter,indent,appParams);    NamingResourcesImpl nresources=context.getNamingResources();    storeElement(aWriter,indent,nresources);    String[] wresources=context.findWatchedResources();    wresources=filterWatchedResources(context,wresources);    getStoreAppender().printTagArray(aWriter,"WatchedResource",indent + 2,wresources);    JarScanner jarScanner=context.getJarScanner();    storeElement(aWriter,indent,jarScanner);    CookieProcessor cookieProcessor=context.getCookieProcessor();    storeElement(aWriter,indent,cookieProcessor);  }}  }
class C{  private int mulsubBorrow(int[] q,int[] a,int x,int len,int offset){  long xLong=x & LONG_MASK;  long carry=0;  offset+=len;  for (int j=len - 1; j >= 0; j--) {    long product=(a[j] & LONG_MASK) * xLong + carry;    long difference=q[offset--] - product;    carry=(product >>> 32) + (((difference & LONG_MASK) > (((~(int)product) & LONG_MASK))) ? 1 : 0);  }  return (int)carry;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    int n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (int i=0; i < n; ++i) {      TryCatchBlockNode tcb=tryCatchBlocks.get(i);      if (tcb.visibleTypeAnnotations != null && tcb.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (tcb.invisibleTypeAnnotations != null && tcb.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }    }    for (int i=0; i < instructions.size(); ++i) {      AbstractInsnNode insn=instructions.get(i);      if (insn.visibleTypeAnnotations != null && insn.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn.invisibleTypeAnnotations != null && insn.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn instanceof MethodInsnNode) {        boolean itf=((MethodInsnNode)insn).itf;        if (itf != (insn.opcode == Opcodes.INVOKEINTERFACE)) {          throw new RuntimeException();        }      }    }    if (visibleLocalVariableAnnotations != null && visibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleLocalVariableAnnotations != null && invisibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  public void startDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.startDocument();  }}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  append(m_doc.createComment(new String(ch,start,length)));}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!(obj instanceof ParsePosition))   return false;  ParsePosition other=(ParsePosition)obj;  return (index == other.index && errorIndex == other.errorIndex);}  }
class C{  public ConsoleUser(Writer out,Reader in,ResourceBundle messages){  if (out == null) {    throw new NullPointerException("output stream is null");  }  if (in == null) {    throw new NullPointerException("input stream is null");  }  if (messages == null) {    throw new NullPointerException("message bundle is null");  }  this.out=new PrintWriter(out);  this.in=new BufferedReader(in);  this.messages=messages;}  }
class C{  public synchronized boolean isWorking(BasicNode node){  return workingList.get(node) != null;}  }
class C{  @Override public final boolean equals(PlaPointRational p_ob){  return false;}  }
class C{  private void redirectAuthentication(String idpEntityID,String realm) throws WSFederationException, IOException {  String classMethod="IDPSSOFederate.redirectAuthentication: ";  StringBuffer newURL=new StringBuffer(IDPSSOUtil.getAuthenticationServiceURL(realm,idpEntityID,request));  if (newURL.indexOf("?") == -1) {    newURL.append("?goto=");  } else {    newURL.append("&goto=");  }  StringBuffer target=request.getRequestURL().append("?").append(request.getQueryString());  if (debug.messageEnabled()) {    debug.message(classMethod + "Target to get back here: " + target.toString());  }  newURL.append(URLEncDec.encode(target.toString()));  if (debug.messageEnabled()) {    debug.message(classMethod + "New URL for authentication: " + newURL.toString());  }  WSFederationUtils.sessionProvider.setLoadBalancerCookie(request,response);  response.sendRedirect(newURL.toString());}  }
class C{  private void tabMenu(String activeTab){  htmlBuff.append("<div class=\"tabmenu\"> " + "<span><a " + (activeTab.equals(INHERITANCE_TREE_FILE) ? "class=\"activetab\" " : "") + "href=\""+ INHERITANCE_TREE_FILE+ "\""+ " title=\"Inheritance View of Components\">Inheritance</a></span> "+ "<span><a "+ (activeTab.equals(RELATION_TREE_FILE) ? "class=\"activetab\" " : "")+ "href=\""+ RELATION_TREE_FILE+ "\""+ " title=\"Relational View of Components\">Structure</a></span> "+ "<span><a "+ (activeTab.equals(MO_LIST_FILE) ? "class=\"activetab\" " : "")+ "href=\""+ MO_LIST_FILE+ "\""+ " title=\"Alphabetical Index of Components\">Components</a></span> "+ "<span><a "+ (activeTab.equals(PROPERTIES_INDEX_FILE) ? "class=\"activetab\" " : "")+ "href=\""+ PROPERTIES_INDEX_FILE+ "\""+ " title=\"Alphabetical Index of Properties\" >Properties</a></span>"+ "</div>"+ "\n");}  }
class C{  @Override public boolean accept(File file){  if (fileFilter != null) {    return fileFilter.accept(file);  } else {    return super.accept(file);  }}  }
class C{  public int size(){  return (tail - head) & (elements.length - 1);}  }
class C{  @Override public void remove(String contextName,boolean undeploy) throws IOException {  if (getCluster().getMembers().length > 0) {    if (log.isInfoEnabled())     log.info(sm.getString("farmWarDeployer.removeStart",contextName));    Member localMember=getCluster().getLocalMember();    UndeployMessage msg=new UndeployMessage(localMember,System.currentTimeMillis(),"Undeploy:" + contextName + ":"+ System.currentTimeMillis(),contextName);    if (log.isDebugEnabled())     log.debug(sm.getString("farmWarDeployer.removeTxMsg",contextName));    cluster.send(msg);  }  if (undeploy) {    try {      if (!isServiced(contextName)) {        addServiced(contextName);        try {          remove(contextName);        }  finally {          removeServiced(contextName);        }      } else       log.error(sm.getString("farmWarDeployer.removeFailRemote",contextName));    } catch (    Exception ex) {      log.error(sm.getString("farmWarDeployer.removeFailLocal",contextName),ex);    }  }}  }
class C{  public static boolean check(LocPathIterator path){  HasPositionalPredChecker hppc=new HasPositionalPredChecker();  path.callVisitors(null,hppc);  return hppc.m_hasPositionalPred;}  }
class C{  public static void unsetSecurityToken(Object name,Object token){  if (checkSecurityToken(name,token)) {    securityTokens.remove(name);  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiRootPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiRootPaneUI)mui).uis,a);}  }
class C{  public V pop() throws IndexOutOfBoundsException {  if (top == 0) {    throw new IndexOutOfBoundsException("Cannot pop operand off an empty stack.");  }  return values[--top + locals];}  }
class C{  public static BooleanArgument enableWindowsServiceArgument() throws ArgumentException {  return BooleanArgument.builder("enableWindowsService").shortIdentifier('e').description(INFO_ARGUMENT_DESCRIPTION_ENABLE_WINDOWS_SERVICE.get()).buildArgument();}  }
class C{  public final double distance(){  return Math.sqrt(distance_square());}  }
class C{  public TableColumn(int modelIndex){  this(modelIndex,75,null,null);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECT_ENTITY\"";  db.execSQL(sql);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.addFoo(foo);}  }
class C{  public void goToList(Activity activity){  activity.navigateUpTo(new Intent(activity,MainActivity.class));}  }
class C{  public void format(CommandManager mgr,SubCommand cmd) throws CLIException {  StringBuffer buff=new StringBuffer();  buff.append("\n\n");  ResourceBundle rb=mgr.getResourceBundle();  String commandName=mgr.getCommandName();  Object[] params={commandName,cmd.getName(),rb.getString("USAGE_OPTIONS"),rb.getString("USAGE_GLOBAL_OPTIONS"),cmd.getDescription()};  buff.append(MessageFormat.format(CLIConstants.USAGE_SUBCMD_LONG_FORMAT,params));  buff.append("\n");  formatUsage(mgr,buff,cmd);  formatGlobalOptions(mgr,buff);  formatOptions(mgr,buff,cmd);  mgr.getOutputWriter().printlnMessage(buff.toString());}  }
class C{  private boolean isValidCDCURI(String cdcUri){  int questionMark=cdcUri.indexOf(QUESTION_MARK);  if (questionMark != -1) {    cdcUri=cdcUri.substring(0,questionMark);  }  boolean result=VALID_LOGIN_URIS.contains(cdcUri);  if (debug.messageEnabled()) {    debug.message("CDCServlet.isValidCDCURI: checking if " + cdcUri + " is in validLoginURISet: "+ VALID_LOGIN_URIS+ " result:"+ result);  }  return result;}  }
class C{  private MappedClass readClass(String[] parts){  String original=parts[0].replace(".","/");  String obfuscated=parts[2].replace(".","/").substring(0,parts[2].length() - 1);  ClassNode node=nodes == null ? fakeNode(obfuscated) : nodes.get(obfuscated);  MappedClass mc=new MappedClass(node,obfuscated);  if (mc != null) {    mc.setNewName(original);  }  return mc;}  }
class C{  public static int rebuildIndex(String baseDir,String baseDN) throws Exception {  Map<String,String> rebuildIndexData=new HashMap<String,String>(2);  rebuildIndexData.put(SetupConstants.CONFIG_VAR_BASE_DIR,baseDir);  rebuildIndexData.put(SetupConstants.CONFIG_VAR_ROOT_SUFFIX,baseDN);  return rebuildIndex(rebuildIndexData);}  }
class C{  public void paintToolBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarBorder(context,g,x,y,w,h);}  }
class C{  private void sendHOTP(String otpCode,String subject,String message) throws AuthLoginException {  Exception cause=null;  try {    AMIdentity identity=getIdentity();    if (identity == null) {      throw new AuthLoginException("HOTP.sendSMS() : Unable to send OTP code " + "because of error searching identities with username : " + userName);    }    String phone=getTelephoneNumber(identity);    String mail=getEmailAddress(identity);    boolean delivered=false;    if (phone != null || mail != null) {      String from=CollectionHelper.getMapAttr(currentConfig,fromAddressAttributeName);      SMSGateway gateway=Class.forName(gatewaySMSImplClass).asSubclass(SMSGateway.class).newInstance();      if (codeDelivery.equals("SMS and E-mail")) {        try {          if (phone != null) {            gateway.sendSMSMessage(from,phone,subject,message,otpCode,currentConfig);            delivered=true;          }        } catch (        AuthLoginException ale) {          DEBUG.error("Error while sending HOTP code to user via SMS",ale);          cause=ale;        }        try {          if (mail != null) {            gateway.sendEmail(from,mail,subject,message,otpCode,currentConfig);            delivered=true;          }        } catch (        AuthLoginException ale) {          DEBUG.error("Error while sending HOTP code to user via e-mail",ale);          cause=ale;        }        if (!delivered && cause != null) {          throw cause;        }      } else       if (codeDelivery.equals("SMS")) {        gateway.sendSMSMessage(from,phone,subject,message,otpCode,currentConfig);      } else       if (codeDelivery.equals("E-mail")) {        gateway.sendEmail(from,mail,subject,message,otpCode,currentConfig);      }    } else {      if (DEBUG.messageEnabled()) {        DEBUG.message("HOTP.sendSMS() : IdRepo: no phone or email found with username : " + userName);      }      throw new AuthLoginException("HOTP.sendSMS() : Unable to send OTP code " + "because no phone or e-mail found for user: " + userName);    }  } catch (  ClassNotFoundException ee) {    DEBUG.error("HOTP.sendSMS() : " + "class not found SMSGateway class",ee);    cause=ee;  }catch (  InstantiationException ie) {    DEBUG.error("HOTP.sendSMS() : " + "can not instantiate SMSGateway class",ie);    cause=ie;  }catch (  IdRepoException e) {    DEBUG.error("HOTP.sendSMS() : error searching Identities with username : " + userName,e);    cause=e;  }catch (  AuthLoginException e) {    throw e;  }catch (  Exception e) {    DEBUG.error("HOTP.sendSMS() : HOTP module exception : ",e);    cause=e;  }  if (cause != null) {    throw new AuthLoginException("HOTP.sendSMS() : Unable to send OTP code",cause);  }}  }
class C{  protected boolean isDefaultLoader(Loader loader){  if (!(loader instanceof WebappLoader)) {    return false;  }  WebappLoader wloader=(WebappLoader)loader;  if ((wloader.getDelegate() != false) || !wloader.getLoaderClass().equals("org.apache.catalina.loader.WebappClassLoader")) {    return false;  }  return true;}  }
class C{  private static boolean useSpecificTrustStore(){  return ((SystemConfigurationUtil.getProperty(SOAP_KEYSTORE_FILE_PROP) != null) && (SystemConfigurationUtil.getProperty(SOAP_KEYSTORE_PASS_FILE_PROP) != null) && (SystemConfigurationUtil.getProperty(SOAP_KEYSTORE_TYPE_PROP) != null)&& (SystemConfigurationUtil.getProperty(SOAP_PRIVATE_KEY_PASS_FILE_PROP) != null));}  }
class C{  public TrustManagerProviderConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  providers=new ConcurrentHashMap<>();}  }
class C{  static <K extends Comparable<K>,V>LogFile<K,V> newReadOnlyLogFile(final File logFilePath,final RecordParser<K,V> parser) throws ChangelogException {  return new LogFile<>(logFilePath,parser,false);}  }
class C{  public SAMLRequesterException(String s){  super(s);}  }
class C{  public String buildJavaVersion(){  return properties.getProperty("build.java.version");}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Element element,java.lang.String idAttrName,java.lang.String certAlias) throws XMLSignatureException {  if (element == null) {    SAMLUtilsCommon.debug.error("signXML: element is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  Document doc=null;  try {    doc=XMLUtils.newDocument();    doc.appendChild(doc.importNode(element,true));  } catch (  Exception ex) {    SAMLUtilsCommon.debug.error("verifyXMLSignature Exception: ",ex);    throw new XMLSignatureException(ex.getMessage());  }  return verifyXMLSignature(doc,idAttrName,certAlias);}  }
class C{  public void testOAEPProvider() throws Exception {  AlgorithmParameters params=AlgorithmParameters.getInstance("OAEP");  assertEquals("Algorithm","OAEP",params.getAlgorithm());}  }
class C{  public static boolean isBoolean(final Class type){  if (Boolean.class.isAssignableFrom(type)) {    return true;  }  return type.getName().equals("boolean");}  }
class C{  public void testExceptionsOnSubMapSetValue(){  TreeMap<String,String> map=new TreeMap<String,String>();  map.put("A","a");  map.put("B","b");  map.put("C","c");  map.put("D","d");  assertAllEntryMethodsReturnImmutableEntries(map.subMap("A",true,"C",true));}  }
class C{  BufferedImage applyEffect(BufferedImage src,BufferedImage dst,int w,int h){  if (src == null || src.getType() != BufferedImage.TYPE_INT_ARGB) {    throw new IllegalArgumentException("Effect only works with " + "source images of type BufferedImage.TYPE_INT_ARGB.");  }  if (dst != null && dst.getType() != BufferedImage.TYPE_INT_ARGB) {    throw new IllegalArgumentException("Effect only works with " + "destination images of type BufferedImage.TYPE_INT_ARGB.");  }  double trangleAngle=Math.toRadians(angle - 90);  int offsetX=(int)(Math.sin(trangleAngle) * distance);  int offsetY=(int)(Math.cos(trangleAngle) * distance);  int tmpOffX=offsetX + size;  int tmpOffY=offsetX + size;  int tmpW=w + offsetX + size+ size;  int tmpH=h + offsetX + size;  int[] lineBuf=getArrayCache().getTmpIntArray(w);  byte[] srcAlphaBuf=getArrayCache().getTmpByteArray1(tmpW * tmpH);  Arrays.fill(srcAlphaBuf,(byte)0xFF);  byte[] tmpBuf1=getArrayCache().getTmpByteArray2(tmpW * tmpH);  byte[] tmpBuf2=getArrayCache().getTmpByteArray3(tmpW * tmpH);  Raster srcRaster=src.getRaster();  for (int y=0; y < h; y++) {    int dy=(y + tmpOffY);    int offset=dy * tmpW;    srcRaster.getDataElements(0,y,w,1,lineBuf);    for (int x=0; x < w; x++) {      int dx=x + tmpOffX;      srcAlphaBuf[offset + dx]=(byte)((255 - ((lineBuf[x] & 0xFF000000) >>> 24)) & 0xFF);    }  }  float[] kernel=EffectUtils.createGaussianKernel(size * 2);  EffectUtils.blur(srcAlphaBuf,tmpBuf2,tmpW,tmpH,kernel,size * 2);  EffectUtils.blur(tmpBuf2,tmpBuf1,tmpH,tmpW,kernel,size * 2);  float spread=Math.min(1 / (1 - (0.01f * this.spread)),255);  for (int i=0; i < tmpBuf1.length; i++) {    int val=(int)(((int)tmpBuf1[i] & 0xFF) * spread);    tmpBuf1[i]=(val > 255) ? (byte)0xFF : (byte)val;  }  if (dst == null)   dst=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  WritableRaster shadowRaster=dst.getRaster();  int red=color.getRed(), green=color.getGreen(), blue=color.getBlue();  for (int y=0; y < h; y++) {    int srcY=y + tmpOffY;    int offset=srcY * tmpW;    int shadowOffset=(srcY - offsetY) * tmpW;    for (int x=0; x < w; x++) {      int srcX=x + tmpOffX;      int origianlAlphaVal=255 - ((int)srcAlphaBuf[offset + srcX] & 0xFF);      int shadowVal=(int)tmpBuf1[shadowOffset + (srcX - offsetX)] & 0xFF;      int alphaVal=Math.min(origianlAlphaVal,shadowVal);      lineBuf[x]=((byte)alphaVal & 0xFF) << 24 | red << 16 | green << 8 | blue;    }    shadowRaster.setDataElements(0,y,w,1,lineBuf);  }  return dst;}  }
class C{  public ByteBufferOutputStream append(float i){  return append((double)i);}  }
class C{  public void test_read_writeByte() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeByte(Byte.MIN_VALUE);  raf.writeByte(11);  raf.writeByte(Byte.MAX_VALUE);  raf.writeByte(Byte.MIN_VALUE - 1);  raf.writeByte(Byte.MAX_VALUE + 1);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Byte.MIN_VALUE,raf.readByte());  assertEquals("Test 2: Incorrect value written or read;",11,raf.readByte());  assertEquals("Test 3: Incorrect value written or read;",Byte.MAX_VALUE,raf.readByte());  assertEquals("Test 4: Incorrect value written or read;",127,raf.readByte());  assertEquals("Test 5: Incorrect value written or read;",-128,raf.readByte());  try {    raf.readByte();    fail("Test 6: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeByte(13);    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readByte();    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  protected EnumControl(Type type,Object[] values,Object value){  super(type);  this.values=values;  this.value=value;}  }
class C{  public Mode(String name,String syntaxFilename,String fileNameGlob,String firstLineGlob){  this.fileNameGlob=fileNameGlob;  this.firstLineGlob=firstLineGlob;  this.name=name;  this.file="syntax/" + syntaxFilename;  this.ignoreWhitespace=true;  props=new Hashtable<String,Object>();  init();}  }
class C{  @Override public void actionPerformed(ActionEvent e){  int returnVal;  String path=field.getText();  if (path != null && path.trim().length() > 0) {    File f=new File(path);    while (f != null && !f.isDirectory()) {      f=f.getParentFile();    }    if (f != null) {      fc.setCurrentDirectory(f);    }  }switch (type) {case LOCATION_DIRECTORY:    returnVal=fc.showOpenDialog(parent);  break;case OPEN_LDIF_FILE:returnVal=fc.showOpenDialog(parent);break;case OPEN_ZIP_FILE:returnVal=fc.showOpenDialog(parent);break;case GENERIC_FILE:returnVal=fc.showOpenDialog(parent);break;default :throw new IllegalStateException("Unknown type: " + type);}if (returnVal == JFileChooser.APPROVE_OPTION) {File file=fc.getSelectedFile();field.setText(file.getAbsolutePath());field.requestFocusInWindow();field.selectAll();}}  }
class C{  public int send(byte[] buffer,int offset,int count){  checkArrayBounds(buffer,offset,count);  if (count == 0) {    return 0;  }  byte[] data=buffer;  if (offset > 0) {    data=new byte[count];    System.arraycopy(buffer,offset,data,0,count);  }  IntOut bytesSentOut=new IntOut();  try {    IDevice.checkResult(LibIMobileDevice.idevice_connection_send(getRef(),data,count,bytesSentOut));    return bytesSentOut.getValue();  }  finally {    bytesSentOut.delete();  }}  }
class C{  public void test_read_writeLong() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeLong(Long.MIN_VALUE);  raf.writeLong('T');  raf.writeLong(Long.MAX_VALUE);  raf.writeLong(Long.MIN_VALUE - 1);  raf.writeLong(Long.MAX_VALUE + 1);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Long.MIN_VALUE,raf.readLong());  assertEquals("Test 2: Incorrect value written or read;",'T',raf.readLong());  assertEquals("Test 3: Incorrect value written or read;",Long.MAX_VALUE,raf.readLong());  assertEquals("Test 4: Incorrect value written or read;",0x7fffffffffffffffl,raf.readLong());  assertEquals("Test 5: Incorrect value written or read;",0x8000000000000000l,raf.readLong());  try {    raf.readLong();    fail("Test 6: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeLong('E');    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readLong();    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  private void displayWelcomeMessage(){  String welcomeMessage=mFirebaseRemoteConfig.getString(WELCOME_MESSAGE_KEY);  if (mFirebaseRemoteConfig.getBoolean(WELCOME_MESSAGE_CAPS_KEY)) {    mWelcomeTextView.setAllCaps(true);  } else {    mWelcomeTextView.setAllCaps(false);  }  mWelcomeTextView.setText(welcomeMessage);}  }
class C{  public final void readFully(byte b[],int off,int len) throws IOException {  if (len < 0)   throw new IndexOutOfBoundsException();  int n=0;  while (n < len) {    int count=in.read(b,off + n,len - n);    if (count < 0)     throw new EOFException();    n+=count;  }}  }
class C{  public void initializeProvider(String debugConfigPath) throws InvalidDebugConfigurationException {  DebugConfigurationFromProperties debugConfig=new DebugConfigurationFromProperties(debugConfigPath);  debugFileProvider=new DebugFileProviderForTest(debugConfig,TimeService.SYSTEM);  provider=new DebugProviderImpl(debugFileProvider);}  }
class C{  public ContextHolder(String key){  this.cacheKey=key;}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  private void checkChangelogSize(int expectedCount) throws Exception {}  }
class C{  @Override protected StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(method);}  }
class C{  public void ifPresent(IntConsumer consumer){  if (isPresent)   consumer.accept(value);}  }
class C{  @Override public int compare(final String string1,final String string2){  String string1Copy=string1.toLowerCase();  String string2Copy=string2.toLowerCase();  int len1=string1.length();  int len2=string2.length();  String liczba1="";  String liczba2="";  for (int i=0; i < ((len1 > len2) ? len1 : len2); i++) {    if (i == len1 && len2 > len1) {      return -1;    }    if (i == len2 && len1 > len2) {      return 1;    }    Character c1=string1Copy.charAt(i);    Character c2=string2Copy.charAt(i);    if (isDigit(c1) && isDigit(c2)) {      liczba1+=c1;      liczba2+=c2;    } else     if (isDigit(c1) && liczba1.length() > 0) {      return 1;    } else     if (isDigit(c2) && liczba1.length() > 0) {      return -1;    } else {      if (!liczba1.equals(liczba2)) {        return liczba1.compareTo(liczba2);      }      liczba1="";      liczba2="";      if (!c1.equals(c2)) {        return c1.compareTo(c2);      }    }  }  return string1Copy.compareTo(string2Copy);}  }
class C{  public SynthLookAndFeel(){  factory=new DefaultSynthStyleFactory();  _handler=new Handler();}  }
class C{  public SQLNonTransientException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  static ObjectName createObjectName(String domain,UserDatabase userDatabase) throws MalformedObjectNameException {  ObjectName name=null;  name=new ObjectName(domain + ":type=UserDatabase,database=" + userDatabase.getId());  return (name);}  }
class C{  public CTSDJLDAPv3PersistentSearchBuilder returnAttributes(String... attributeNames){  this.attributeNames=attributeNames;  return this;}  }
class C{  public synchronized boolean hasService(Class serviceClass){  if (serviceClass == null)   throw new NullPointerException("serviceClass");synchronized (BeanContext.globalHierarchyLock) {    if (services.containsKey(serviceClass))     return true;    BeanContextServices bcs=null;    try {      bcs=(BeanContextServices)getBeanContext();    } catch (    ClassCastException cce) {      return false;    }    return bcs == null ? false : bcs.hasService(serviceClass);  }}  }
class C{  public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintScrollBarBackground(context,g,x,y,w,h);}  }
class C{  private void removeReferences(ConnectionWrapper connWrapper,HostPort serverToUpdate,Map<ADSContext.ServerProperty,Object> serverADSProperties) throws ApplicationException {  try {    ReplicationSynchronizationProviderCfgClient sync=(ReplicationSynchronizationProviderCfgClient)connWrapper.getRootConfiguration().getSynchronizationProvider("Multimaster Synchronization");    removeReferenceInReplicatonServer(sync,serverToUpdate);    removeReferenceInReplicationDomain(sync,serverToUpdate);  } catch (  ManagedObjectNotFoundException monfe) {    logger.info(LocalizableMessage.raw("No synchronization found on " + serverToUpdate + ".",monfe));  }catch (  Throwable t) {    logger.warn(LocalizableMessage.raw("Error removing references in replication server on " + serverToUpdate + ": "+ t,t));    LocalizableMessage errorMessage=INFO_ERROR_CONFIGURING_REMOTE_GENERIC.get(serverToUpdate,t);    throw new ApplicationException(ReturnCode.CONFIGURATION_ERROR,errorMessage,t);  }  ADSContext adsContext=new ADSContext(connWrapper);  try {    if (adsContext.hasAdminData() && serverADSProperties != null) {      logger.info(LocalizableMessage.raw("Unregistering server on ADS of server " + connWrapper.getHostPort() + ".  Properties: "+ serverADSProperties));      adsContext.unregisterServer(serverADSProperties);    }  } catch (  ADSContextException ace) {    if (ace.getError() != ADSContextException.ErrorType.NOT_YET_REGISTERED) {      throw new ApplicationException(ReturnCode.CONFIGURATION_ERROR,INFO_REMOTE_ADS_EXCEPTION.get(serverToUpdate,ace),ace);    } else {    }  }}  }
class C{  @Override public void onPause(){  super.onPause();  mWebView.onPause();}  }
class C{  public int variant(){  return variant;}  }
class C{  public static boolean isPackageProtectionEnabled(){  if (packageDefinitionEnabled && Constants.IS_SECURITY_ENABLED) {    return true;  }  return false;}  }
class C{  public RouteEvent(int type,final Router router,final RouteMatcher<Request> routeMatcher){  super(routeMatcher);  this.routeMatcher=routeMatcher;  this.router=router;  this.type=type;}  }
class C{  public com.sun.identity.saml2.jaxb.metadataextquery.AttributeQueryDescriptorType createAttributeQueryDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadataextquery.impl.AttributeQueryDescriptorTypeImpl();}  }
class C{  public MakeLDIFException(LocalizableMessage message){  super(message);}  }
class C{  public TableRowSorter(M model){  setModel(model);}  }
class C{  public QRCallbackBuilder addUriQueryComponent(String key,String value){  queryContents.put(key,value);  return this;}  }
class C{  @Override public synchronized void removeSTSInstance(String stsInstanceId,String realm) throws STSPublishException {  ServiceConfig baseService;  try {    baseService=new ServiceConfigManager(serviceName,getAdminToken()).getOrganizationConfig(realm,null);    if (baseService != null) {      baseService.removeSubConfig(stsInstanceId);      if (logger.isDebugEnabled()) {        logger.debug(restOrSoap() + "sts instance " + stsInstanceId+ " in realm "+ realm+ " removed from persistent store.");      }    } else {      throw new STSPublishException(ResourceException.NOT_FOUND,"Could not create ServiceConfigManager for realm " + realm + " in order to remove "+ restOrSoap()+ " sts instance with id "+ stsInstanceId);    }  } catch (  SMSException|SSOException e) {    throw new STSPublishException(ResourceException.INTERNAL_ERROR,"Exception caught removing " + restOrSoap() + " sts instance with id "+ stsInstanceId+ " from realm "+ realm+ ". Exception: "+ e,e);  }}  }
class C{  public void processAuthnRequest(FSAuthnRequest authnRequest,boolean bPostAuthn){  FSUtils.debug.message("FSSSOAndFedHandler.processAuthnRequest: Called");  this.authnRequest=authnRequest;  String message=null;  String inResponseTo=authnRequest.getRequestID();  Status status=null;  FSAuthnResponse errResponse=null;  spEntityId=authnRequest.getProviderId();  try {    spDescriptor=metaManager.getSPDescriptor(realm,spEntityId);    spConfig=metaManager.getSPDescriptorConfig(realm,spEntityId);    if (!metaManager.isTrustedProvider(realm,hostedEntityId,spEntityId)) {      FSUtils.debug.error("FSSSOAndFedHandler.processAuthnRequest: " + "RemoteProvider is not trusted");      message=FSUtils.bundle.getString("AuthnRequestProcessingFailed");      status=new Status(new StatusCode("samlp:Responder"),message,null);      errResponse=new FSAuthnResponse(null,inResponseTo,status,null,relayState);      errResponse.setMinorVersion(authnRequest.getMinorVersion());      sendAuthnResponse(errResponse);      return;    }    if (bPostAuthn) {      if (processPostAuthnSSO(authnRequest)) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSSSOAndFedHandler." + "processAuthnRequest: AuthnRequest Processing " + "successful");        }        return;      } else {        if (FSUtils.debug.warningEnabled()) {          FSUtils.debug.warning("FSSSOAndFedHandler.processAuthnRequest: " + "AuthnRequest Processing failed");        }        message=FSUtils.bundle.getString("AuthnRequestProcessingFailed");        if (noFedStatus != null) {          status=noFedStatus;        } else {          status=new Status(new StatusCode("samlp:Responder"),message,null);        }        errResponse=new FSAuthnResponse(null,inResponseTo,status,null,relayState);        errResponse.setMinorVersion(authnRequest.getMinorVersion());        sendAuthnResponse(errResponse);        return;      }    } else {      boolean authnRequestSigned=spDescriptor.isAuthnRequestsSigned();      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSSOAndFedHandler.processAuthnRequest: " + "ProviderID : " + spEntityId + " AuthnRequestSigned :this is for testing "+ authnRequestSigned);      }      if (FSServiceUtils.isSigningOn()) {        if (authnRequestSigned) {          if (!verifyRequestSignature(authnRequest)) {            FSUtils.debug.error("FSSSOAndFedHandler." + "processAuthnRequest: " + "AuthnRequest Signature Verification Failed");            message=FSUtils.bundle.getString("signatureVerificationFailed");            String[] data={message};            LogUtil.error(Level.INFO,LogUtil.SIGNATURE_VERIFICATION_FAILED,data,ssoToken);            status=new Status(new StatusCode("samlp:Responder",new StatusCode("lib:UnsignedAuthnRequest",null)),message,null);            errResponse=new FSAuthnResponse(null,inResponseTo,status,null,relayState);            errResponse.setMinorVersion(authnRequest.getMinorVersion());            sendAuthnResponse(errResponse);            return;          } else {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSSOAndFedHandler. processAuthnRequest" + ": AuthnRequest Signature Verified");            }          }        }      }      if (processPreAuthnSSO(authnRequest)) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSSSOAndFedHandler.processAuthnRequest: " + "AuthnRequest Processing successful");        }        return;      } else {        if (FSUtils.debug.warningEnabled()) {          FSUtils.debug.warning("FSSSOAndFedHandler.processAuthnRequest: " + "AuthnRequest Processing failed");        }        String[] data={FSUtils.bundle.getString("AuthnRequestProcessingFailed")};        LogUtil.error(Level.INFO,LogUtil.AUTHN_REQUEST_PROCESSING_FAILED,data,ssoToken);        message=FSUtils.bundle.getString("AuthnRequestProcessingFailed");        status=new Status(new StatusCode("samlp:Responder"),message,null);        if (noFedStatus != null) {          status=noFedStatus;        }        errResponse=new FSAuthnResponse(null,inResponseTo,status,null,relayState);        errResponse.setMinorVersion(authnRequest.getMinorVersion());        sendAuthnResponse(errResponse);        return;      }    }  } catch (  Exception e) {    ByteArrayOutputStream out=new ByteArrayOutputStream();    e.printStackTrace(new PrintStream(out));    FSUtils.debug.error("FSSSOAndFedHandler.processAuthnRequest: " + "Exception Occured: " + e.getMessage() + "Stack trace is "+ out.toString());    message=FSUtils.bundle.getString("AuthnRequestProcessingFailed");    try {      status=new Status(new StatusCode("samlp:Responder"),message,null);      errResponse=new FSAuthnResponse(null,inResponseTo,status,null,relayState);      errResponse.setMinorVersion(authnRequest.getMinorVersion());      sendAuthnResponse(errResponse);    } catch (    Exception ex) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSSOAndFedHandler.processAuthnRequest: " + "Exception Occured: ",ex);      }    }  }}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  public void replaceResourceData(int idx,SMDiscoEntryData data) throws AMConsoleException {  data.setDiscoStr(isUserResourceOffering());  SMDiscoEntryData old=(SMDiscoEntryData)discoData.set(idx,data);}  }
class C{  public final SecretKey generateSecret(KeySpec keySpec) throws InvalidKeySpecException {  return spiImpl.engineGenerateSecret(keySpec);}  }
class C{  public void addEmptyValue(final JKTableColumn col){  final JKTableColumnValue value=new JKTableColumnValue(col);  this.columnsValues.add(value);}  }
class C{  protected final void _loadToHaveAtLeast(int minAvailable) throws IOException {  if (_inputStream == null) {    throw _constructError("Needed to read " + minAvailable + " bytes, reached end-of-input");  }  int ptr=_inputPtr;  int amount=_inputEnd - ptr;  if (ptr > 0) {    _currInputProcessed+=ptr;    if (amount > 0) {      System.arraycopy(_inputBuffer,ptr,_inputBuffer,0,amount);    }    _currentEndOffset=_parsingContext.adjustEnd(ptr);  }  _inputPtr=0;  _inputEnd=amount;  while (_inputEnd < minAvailable) {    int count=_inputStream.read(_inputBuffer,_inputEnd,_inputBuffer.length - _inputEnd);    if (count < 1) {      _closeInput();      if (count == 0) {        throw new IOException("InputStream.read() returned 0 characters when trying to read " + amount + " bytes");      }      throw _constructError("Needed to read " + minAvailable + " bytes, missed "+ minAvailable+ " before end-of-input");    }    _inputEnd+=count;  }}  }
class C{  public void delete(int startIndex,int endIndex){  if (isEditable() && isEnabled()) {    try {      int p0=Math.min(startIndex,endIndex);      int p1=Math.max(startIndex,endIndex);      if (p0 != p1) {        Document doc=getDocument();        doc.remove(p0,p1 - p0);      }    } catch (    BadLocationException e) {    }  } else {    UIManager.getLookAndFeel().provideErrorFeedback(JTextComponent.this);  }}  }
class C{  public void next(){  index++;}  }
class C{  public static float[] colorToHSV(int color){  int r=Color.red(color);  int g=Color.green(color);  int b=Color.blue(color);  float[] hsv=new float[3];  Color.RGBToHSV(r,g,b,hsv);  return hsv;}  }
class C{  public void putAll(Map<?,?> attr){  if (!Attributes.class.isInstance(attr))   throw new ClassCastException();  for (  Map.Entry<?,?> me : (attr).entrySet())   put(me.getKey(),me.getValue());}  }
class C{  void reset(final DN parentDN,final int numberOfEntries){  this.parentDN=parentDN;  this.numberOfEntries=numberOfEntries;  entriesCount=0;  currentEntryIsInitialized=false;  subTemplateIndex=0;  nextEntry=null;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.lessThan(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  @Override public boolean containsHeader(String name){  char cc=name.charAt(0);  if (cc == 'C' || cc == 'c') {    if (name.equalsIgnoreCase("Content-Type")) {      return (getCoyoteResponse().getContentType() != null);    }    if (name.equalsIgnoreCase("Content-Length")) {      return (getCoyoteResponse().getContentLengthLong() != -1);    }  }  return getCoyoteResponse().containsHeader(name);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  for (int i=0; i < m_patterns.length; i++) {    m_patterns[i].fixupVariables(vars,globalsSize);  }}  }
class C{  protected static void processCRLB2(DistributionPoint dp,Object cert,X509CRL crl) throws AnnotatedException {  IssuingDistributionPoint idp=null;  try {    idp=IssuingDistributionPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(crl,RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT));  } catch (  Exception e) {    throw new AnnotatedException("Issuing distribution point extension could not be decoded.",e);  }  if (idp != null) {    if (idp.getDistributionPoint() != null) {      DistributionPointName dpName=IssuingDistributionPoint.getInstance(idp).getDistributionPoint();      List names=new ArrayList();      if (dpName.getType() == DistributionPointName.FULL_NAME) {        GeneralName[] genNames=GeneralNames.getInstance(dpName.getName()).getNames();        for (int j=0; j < genNames.length; j++) {          names.add(genNames[j]);        }      }      if (dpName.getType() == DistributionPointName.NAME_RELATIVE_TO_CRL_ISSUER) {        ASN1EncodableVector vec=new ASN1EncodableVector();        try {          Enumeration e=ASN1Sequence.getInstance(ASN1Sequence.fromByteArray(CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded())).getObjects();          while (e.hasMoreElements()) {            vec.add((ASN1Encodable)e.nextElement());          }        } catch (        IOException e) {          throw new AnnotatedException("Could not read CRL issuer.",e);        }        vec.add(dpName.getName());        names.add(new GeneralName(X509Name.getInstance(new DERSequence(vec))));      }      boolean matches=false;      if (dp.getDistributionPoint() != null) {        dpName=dp.getDistributionPoint();        GeneralName[] genNames=null;        if (dpName.getType() == DistributionPointName.FULL_NAME) {          genNames=GeneralNames.getInstance(dpName.getName()).getNames();        }        if (dpName.getType() == DistributionPointName.NAME_RELATIVE_TO_CRL_ISSUER) {          if (dp.getCRLIssuer() != null) {            genNames=dp.getCRLIssuer().getNames();          } else {            genNames=new GeneralName[1];            try {              genNames[0]=new GeneralName(new X509Name((ASN1Sequence)ASN1Sequence.fromByteArray(CertPathValidatorUtilities.getEncodedIssuerPrincipal(cert).getEncoded())));            } catch (            IOException e) {              throw new AnnotatedException("Could not read certificate issuer.",e);            }          }          for (int j=0; j < genNames.length; j++) {            Enumeration e=ASN1Sequence.getInstance(genNames[j].getName().toASN1Primitive()).getObjects();            ASN1EncodableVector vec=new ASN1EncodableVector();            while (e.hasMoreElements()) {              vec.add((ASN1Encodable)e.nextElement());            }            vec.add(dpName.getName());            genNames[j]=new GeneralName(new X509Name(new DERSequence(vec)));          }        }        if (genNames != null) {          for (int j=0; j < genNames.length; j++) {            if (names.contains(genNames[j])) {              matches=true;              break;            }          }        }        if (!matches) {          throw new AnnotatedException("No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");        }      } else {        if (dp.getCRLIssuer() == null) {          throw new AnnotatedException("Either the cRLIssuer or the distributionPoint field must " + "be contained in DistributionPoint.");        }        GeneralName[] genNames=dp.getCRLIssuer().getNames();        for (int j=0; j < genNames.length; j++) {          if (names.contains(genNames[j])) {            matches=true;            break;          }        }        if (!matches) {          throw new AnnotatedException("No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");        }      }    }    BasicConstraints bc=null;    try {      bc=BasicConstraints.getInstance(CertPathValidatorUtilities.getExtensionValue((X509Extension)cert,BASIC_CONSTRAINTS));    } catch (    Exception e) {      throw new AnnotatedException("Basic constraints extension could not be decoded.",e);    }    if (cert instanceof X509Certificate) {      if (idp.onlyContainsUserCerts() && (bc != null && bc.isCA())) {        throw new AnnotatedException("CA Cert CRL only contains user certificates.");      }      if (idp.onlyContainsCACerts() && (bc == null || !bc.isCA())) {        throw new AnnotatedException("End CRL only contains CA certificates.");      }    }    if (idp.onlyContainsAttributeCerts()) {      throw new AnnotatedException("onlyContainsAttributeCerts boolean is asserted.");    }  }}  }
class C{  public ServerResource create(Request request,Response response){  final OAuth2Request oAuth2Request=requestFactory.create(request);  final String grantType=oAuth2Request.getParameter("grant_type");  if (isEmpty(grantType)) {    logger.error("Type is not set");    return new ErrorResource(exceptionHandler,new InvalidRequestException("Grant type is not set"));  }  Finder finder=endpointClasses.get(grantType);  if (finder == null) {    logger.error("Unsupported grant type: Type is not supported: " + grantType);    return new ErrorResource(exceptionHandler,new UnsupportedGrantTypeException("Grant type is not supported"));  }  try {    return finder.create(request,response);  } catch (  Exception e) {    logger.warn("Exception while instantiating the target server resource.",e);    return new ErrorResource(exceptionHandler,new ServerException(e.getMessage()));  }}  }
class C{  public ConnectionPoolTimeoutException(){  super();}  }
class C{  public com.sun.identity.federation.jaxb.entityconfig.AttributeType createAttributeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.federation.jaxb.entityconfig.impl.AttributeTypeImpl();}  }
class C{  private boolean isSchemaConfigAttribute(Attribute attribute){  AttributeType attrType=attribute.getAttributeDescription().getAttributeType();  return attrType.hasName(ATTR_SCHEMA_ENTRY_DN) || attrType.hasName(ATTR_BACKEND_ENABLED) || attrType.hasName(ATTR_BACKEND_CLASS)|| attrType.hasName(ATTR_BACKEND_ID)|| attrType.hasName(ATTR_BACKEND_BASE_DN)|| attrType.hasName(ATTR_BACKEND_WRITABILITY_MODE)|| attrType.hasName(ATTR_SCHEMA_SHOW_ALL_ATTRIBUTES)|| attrType.hasName(ATTR_COMMON_NAME)|| attrType.hasName(OP_ATTR_CREATORS_NAME_LC)|| attrType.hasName(OP_ATTR_CREATE_TIMESTAMP_LC)|| attrType.hasName(OP_ATTR_MODIFIERS_NAME_LC)|| attrType.hasName(OP_ATTR_MODIFY_TIMESTAMP_LC);}  }
class C{  public static int countByField2(boolean field2){  return getPersistence().countByField2(field2);}  }
class C{  public DelegationPropertiesViewBean(){  super("DelegationProperties");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public void testGetInstanceStringString02() throws IllegalArgumentException, NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      KeyAgreement.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      KeyAgreement.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }    for (int j=1; j < invalidValues.length; j++) {      try {        KeyAgreement.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  public void add(AppInfo info){  if (mAppFilter != null && !mAppFilter.shouldShowApp(info.componentName)) {    return;  }  if (findActivity(data,info.componentName,info.user)) {    return;  }  data.add(info);  added.add(info);}  }
class C{  public static void checkScope(String scope,Node n,ErrorDispatcher err) throws JasperException {  if (scope != null && !scope.equals("page") && !scope.equals("request") && !scope.equals("session") && !scope.equals("application")) {    err.jspError(n,"jsp.error.invalid.scope",scope);  }}  }
class C{  public void testJarVerificationEmptyEntry() throws IOException {  Support_Resources.copyFile(resources,null,emptyEntryJar);  File f=new File(resources,emptyEntryJar);  JarFile jarFile=new JarFile(f);  ZipEntry zipEntry=jarFile.getJarEntry(emptyEntry1);  int res=jarFile.getInputStream(zipEntry).read(new byte[100],0,100);  assertEquals("Wrong length of empty jar entry",-1,res);  zipEntry=jarFile.getJarEntry(emptyEntry2);  res=jarFile.getInputStream(zipEntry).read(new byte[100],0,100);  assertEquals("Wrong length of empty jar entry",-1,res);  zipEntry=jarFile.getJarEntry(emptyEntry3);  res=jarFile.getInputStream(zipEntry).read();  assertEquals("Wrong length of empty jar entry",-1,res);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.DeactivationCallCenterElement createDeactivationCallCenterElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DeactivationCallCenterElementImpl();}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("roundrect iterator out of bounds");  }  double ctrls[]=ctrlpts[index];  int nc=0;  for (int i=0; i < ctrls.length; i+=4) {    coords[nc++]=(x + ctrls[i + 0] * w + ctrls[i + 1] * aw);    coords[nc++]=(y + ctrls[i + 2] * h + ctrls[i + 3] * ah);  }  if (affine != null) {    affine.transform(coords,0,coords,0,nc / 2);  }  return types[index];}  }
class C{  public XMLString newstr(String string){  return new XString(string);}  }
class C{  public org.omg.CORBA.TCKind current_member_kind() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_member_kind",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    return $self.current_member_kind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public ShutdownTaskThread(LocalizableMessage shutdownMessage){  super("Shutdown Task Thread");  this.shutdownMessage=shutdownMessage;  setDaemon(true);}  }
class C{  public static void removeFromCache(String key,MemoryCache memoryCache){  List<String> keysToRemove=new ArrayList<String>();  for (  String k : memoryCache.keys()) {    if (k.startsWith(key)) {      keysToRemove.add(k);    }  }  for (  String keyToRemove : keysToRemove) {    memoryCache.remove(keyToRemove);  }}  }
class C{  public void testReceive_NonBlockNoServerBufEmpty() throws Exception {  this.channel1.configureBlocking(false);  receiveNonBlockNoServer(CAPACITY_NORMAL);}  }
class C{  public PrinterException(){}  }
class C{  private synchronized void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  deserialize(ois,(Collection)bcsListeners);}  }
class C{  @Override public String[] findMappings(){  mappingsLock.readLock().lock();  try {    return mappings.toArray(new String[mappings.size()]);  }  finally {    mappingsLock.readLock().unlock();  }}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    changeSupport=new SwingPropertyChangeSupport(this);  }  changeSupport.addPropertyChangeListener(listener);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  ServicesViewBean vb=(ServicesViewBean)getViewBean(ServicesViewBean.class);  backTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void processRemoteNotification(Notification notification){  SessionNotification snot=SessionNotification.parseXML(notification.getContent());  if (snot != null) {    processNotification(snot,false);  }}  }
class C{  @Fluent public Job done(Throwable ex){  eventBus.send(Kue.workerAddress("done_fail",this),ex.getMessage());  return this;}  }
class C{  public final int length(){  return array.length;}  }
class C{  public Separator(Dimension size){  super(JSeparator.HORIZONTAL);  setSeparatorSize(size);}  }
class C{  public TransactionDoesNotExistException(){  super();}  }
class C{  public static boolean isCookieSecure(){  return secureCookie;}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws SAXException {  ElemTemplateElement function=handler.getElemTemplateElement();  validate(function,handler);  super.endElement(handler,uri,localName,rawName);}  }
class C{  public static void main(String[] args){  ControlPanelSplashScreen screen=new ControlPanelSplashScreen();  screen.display(args);}  }
class C{  synchronized String addListener(ServiceListener listener){  return addListener(null,listener);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true).setNonQualifierBranches("master,int");  unchecked(null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  NodeList elementList;  Element element;  Attr attr;  Node newNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(0);  attributes=element.getAttributes();  attr=(Attr)attributes.getNamedItemNS("http://www.usa.com","domestic");  element=(Element)elementList.item(1);  attributes=element.getAttributes();{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("namednodemapsetnameditemns08",success);  }}  }
class C{  private void addCalendarEvent(String summary,Date start,boolean allDay,Date end,String location,String description,String[] attendees){  Intent intent=new Intent(Intent.ACTION_INSERT);  intent.setType("vnd.android.cursor.item/event");  long startMilliseconds=start.getTime();  intent.putExtra("beginTime",startMilliseconds);  if (allDay) {    intent.putExtra("allDay",true);  }  long endMilliseconds;  if (end == null) {    if (allDay) {      endMilliseconds=startMilliseconds + 24 * 60 * 60* 1000;    } else {      endMilliseconds=startMilliseconds;    }  } else {    endMilliseconds=end.getTime();  }  intent.putExtra("endTime",endMilliseconds);  intent.putExtra("title",summary);  intent.putExtra("eventLocation",location);  intent.putExtra("description",description);  if (attendees != null) {    intent.putExtra(Intent.EXTRA_EMAIL,attendees);  }  try {    rawLaunchIntent(intent);  } catch (  ActivityNotFoundException anfe) {    Log.w(TAG,"No calendar app available that responds to " + Intent.ACTION_INSERT);    intent.setAction(Intent.ACTION_EDIT);    launchIntent(intent);  }}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  forwardToAuthServicesView(event);}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public void testReceive_NonBlockNoServerCloseNull() throws Exception {  this.channel1.configureBlocking(false);  receiveNoServerChannelCloseNull();}  }
class C{  public ReferToParser(String referTo){  super(referTo);}  }
class C{  public HttpRequestExecutor(){  super();}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.WEST;  gbc.weightx=0.0;  gbc.gridx=0;  gbc.gridy=0;  gbc.gridwidth=2;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.BOTH;  String text=INFO_CTRL_PANEL_REFRESH_OPTIONS_PANEL_TEXT.get().toString();  JEditorPane pane=Utilities.makeHtmlPane(text,ColorAndFontConstants.defaultFont);  Utilities.updatePreferredSize(pane,60,text,ColorAndFontConstants.defaultFont,false);  gbc.weighty=0.0;  add(pane,gbc);  gbc.gridy=1;  gbc.gridwidth=1;  gbc.weightx=0.0;  gbc.weighty=0.0;  lPeriod=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_REFRESH_OPTIONS_LABEL.get());  gbc.insets.top=10;  add(lPeriod,gbc);  period=Utilities.createShortTextField();  gbc.insets.left=10;  gbc.gridx=1;  gbc.weightx=1.0;  add(period,gbc);  gbc.gridwidth=2;  addBottomGlue(gbc);}  }
class C{  @Inject public SnsMessageResource(CTSPersistentStore coreTokenService,PushNotificationService pushNotificationService,JSONSerialisation jsonSerialisation,@Named("frPush") Debug debug,JwtReconstruction jwtReconstruction){  this.pushNotificationService=pushNotificationService;  this.jsonSerialisation=jsonSerialisation;  this.debug=debug;  this.coreTokenService=coreTokenService;  this.jwtReconstruction=jwtReconstruction;}  }
class C{  public int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(cfbV,0,cfbOutV,0);  System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize);  System.arraycopy(in,inOff,cfbV,cfbV.length - blockSize,blockSize);  for (int i=0; i < blockSize; i++) {    out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]);  }  return blockSize;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  assertSize("addresses",3,elementList);}  }
class C{  public void clearCache(){  this.application=null;}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public DirectoryEnvironmentConfig(boolean checkIfServerIsRunning){  this(System.getProperties(),checkIfServerIsRunning);}  }
class C{  private boolean isAntennaAvailable(){  return mAudioManager.isWiredHeadsetOn();}  }
class C{  public EmbeddedOpenSSO(String baseDir,Map configData){  this.baseDir=baseDir;  uri="/eopensso";  this.configData=configData;}  }
class C{  public FocusGridLayoutManager(Context context,int spanCount){  super(context,spanCount);}  }
class C{  @Override public int countByUuid(String uuid){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID;  Object[] finderArgs=new Object[]{uuid};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(2);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_UUID_2);    }    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public void run(){  boolean localShouldTerminate=false;  Runnable localTask=null;  WorkerThread t=this;  while (true) {    try {synchronized (this) {        while ((task == null) && (!shouldTerminate)) {          this.wait();        }        localShouldTerminate=shouldTerminate;        localTask=task;        task=null;      }      if (localShouldTerminate) {        break;      }      if (localTask != null) {        localTask.run();      }    } catch (    RuntimeException ex) {      debug.error("Running task " + task,ex);      pool.deductCurrentThreadCount();      localShouldTerminate=true;      needReturn=false;    }catch (    Exception ex) {      debug.error("Running task " + task,ex);    }catch (    Throwable e) {      debug.error("Running task " + task,e);      pool.deductCurrentThreadCount();      localShouldTerminate=true;      needReturn=false;      throw new Error(e);    } finally {      if (needReturn) {        pool.returnThread(t);      }    }    if (localShouldTerminate) {      break;    }  }}  }
class C{  public void test_addPathToNameLintLjava_lang_String(){  for (int type=0; type <= 8; type++) {    try {      new X509CertSelector().addPathToName(type,(String)null);      fail();    } catch (    IOException expected) {    }  }}  }
class C{  public static WhoAmIExtendedResult copyOfWhoAmIExtendedResult(final WhoAmIExtendedResult result){  return new WhoAmIExtendedResultImpl(result);}  }
class C{  @Descriptor("Displays information about a specific command.") public void help(CommandSession session,@Descriptor("target command") String name){  Map<String,List<Method>> commands=getCommands();  List<Method> methods=null;  int scopeIdx=name.indexOf(':');  if (scopeIdx < 0) {    for (    Map.Entry<String,List<Method>> entry : commands.entrySet()) {      String k=entry.getKey().substring(entry.getKey().indexOf(':') + 1);      if (name.equals(k)) {        methods=entry.getValue();        break;      }    }  } else {    methods=commands.get(name);  }  if ((methods != null) && (methods.size() > 0)) {    StringBuilder help=new StringBuilder();    for (int i=0; i < methods.size(); i++) {      Method m=methods.get(i);      if (i > 0) {        help.append("\n");      }      help.append("Info: ").append(getHeader(m)).append("\n");      help.append(getUsage(m)).append("\n");    }    session.getConsole().print(help.toString());  }}  }
class C{  public final AMAccessAuditEventBuilder forRequest(Request request,Context context){  String clientIpAddress=ClientUtils.getClientIPAddress(context,request);  String ipAddrHeader=SystemPropertiesManager.get(Constants.CLIENT_IP_ADDR_HEADER);  if (ipAddressHeaderPropertyIsSet(ipAddrHeader) && requestHasIpAddressHeader(request,ipAddrHeader)) {    client(clientIpAddress);  } else {    ClientContext clientContext=context.asContext(ClientContext.class);    client(clientIpAddress,clientContext.getRemotePort());  }  MutableUri uri=request.getUri();  String uriScheme=request.getUri().getScheme();  if (StringUtils.isNotEmpty(uriScheme)) {    uriScheme=uriScheme.toLowerCase();  }  boolean isSecure="https".equals(uriScheme);  httpRequest(isSecure,request.getMethod(),uri.getScheme() + "://" + uri.getHost()+ ":"+ uri.getPort()+ uri.getPath(),getQueryParametersAsMap(request.getForm()),getHeadersAsMap(request.getHeaders()));  return this;}  }
class C{  static Object instantiate(Class<?> sibling,String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  ClassLoader cl=sibling.getClassLoader();  Class<?> cls=ClassFinder.findClass(className,cl);  return cls.newInstance();}  }
class C{  private void emitReturn(Name onStack){  Class<?> rclass=invokerType.returnType();  BasicType rtype=lambdaForm.returnType();  assert (rtype == basicType(rclass));  if (rtype == V_TYPE) {    mv.visitInsn(Opcodes.RETURN);  } else {    LambdaForm.Name rn=lambdaForm.names[lambdaForm.result];    if (rn != onStack) {      emitLoadInsn(rtype,lambdaForm.result);    }    emitImplicitConversion(rtype,rclass,rn);    emitReturnInsn(rtype);  }}  }
class C{  private boolean historyValueMatches(ByteString password,ByteString historyValue){  try {    String histStr=historyValue.toString();    int hashPos1=histStr.indexOf('#');    if (hashPos1 <= 0) {      if (logger.isTraceEnabled()) {        logger.trace("Returning false because the password history value didn't include any hash characters.");      }      return false;    }    int hashPos2=histStr.indexOf('#',hashPos1 + 1);    if (hashPos2 < 0) {      if (logger.isTraceEnabled()) {        logger.trace("Returning false because the password history value only had one hash character.");      }      return false;    }    String syntaxOID=toLowerCase(histStr.substring(hashPos1 + 1,hashPos2));    if (SYNTAX_AUTH_PASSWORD_OID.equals(syntaxOID)) {      boolean passwordMatches=encodedAuthPasswordMatches(password,histStr.substring(hashPos2 + 1));      logResult("auth",passwordMatches);      return passwordMatches;    } else     if (SYNTAX_USER_PASSWORD_OID.equals(syntaxOID) || SYNTAX_OCTET_STRING_OID.equals(syntaxOID)) {      boolean passwordMatches=encodedUserPasswordMatches(password,histStr.substring(hashPos2 + 1));      logResult("user",passwordMatches);      return passwordMatches;    } else {      if (logger.isTraceEnabled()) {        logger.trace("Returning false because the syntax OID " + syntaxOID + " didn't match for either the auth or user password syntax.");      }      return false;    }  } catch (  Exception e) {    if (logger.isTraceEnabled()) {      logger.traceException(e);      logger.trace("Returning false because of an exception:  " + stackTraceToSingleLineString(e));    }    return false;  }}  }
class C{  public String toString(){  return omniAreaOpenTag + latitudeOpenTag + latitude+ latitudeCloseTag+ longitudeOpenTag+ longitude+ longitudeCloseTag+ userInputOpenTag+ userInput+ userInputCloseTag+ proximityDistanceOpenTag+ proximityDistance+ proximityDistanceCloseTag+ omniAreaCloseTag;}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  String s=toString();  if (s.length() <= 65535) {    out.writeUTF(s);  } else {    out.writeByte(0);    out.writeByte(0);    out.writeInt(s.length());    out.write(s.getBytes());  }}  }
class C{  protected void handlePossibleTurnover(Request request){  String sessionID=request.getRequestedSessionId();  if (sessionID != null) {    long t1=System.currentTimeMillis();    String jvmRoute=getLocalJvmRoute(request);    if (jvmRoute == null) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("jvmRoute.missingJvmRouteAttribute"));      }      return;    }    handleJvmRoute(request,sessionID,jvmRoute);    if (log.isDebugEnabled()) {      long t2=System.currentTimeMillis();      long time=t2 - t1;      log.debug(sm.getString("jvmRoute.turnoverInfo",Long.valueOf(time)));    }  }}  }
class C{  public static Entry decode(ByteSequenceReader entryBuffer,CompressedSchema compressedSchema) throws DirectoryException {  try {    Byte version=entryBuffer.readByte();    if (version != 0x03 && version != 0x02 && version != 0x01) {      LocalizableMessage message=ERR_ENTRY_DECODE_UNRECOGNIZED_VERSION.get(byteToHex(version));      throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);    }    EntryEncodeConfig config;    if (version != 0x01) {      int configLength=entryBuffer.readBERLength();      config=EntryEncodeConfig.decode(entryBuffer,configLength,compressedSchema);    } else {      config=EntryEncodeConfig.DEFAULT_CONFIG;    }    DN dn;    if (config.excludeDN()) {      dn=DN.rootDN();    } else {      int dnLength=entryBuffer.readBERLength();      ByteSequence dnBytes=entryBuffer.readByteSequence(dnLength);      dn=DN.valueOf(dnBytes.toByteString());    }    Map<ObjectClass,String> objectClasses=decodeObjectClasses(version,entryBuffer,config);    Map<AttributeType,List<Attribute>> userAttributes=decodeAttributes(version,entryBuffer,config);    Map<AttributeType,List<Attribute>> operationalAttributes=decodeAttributes(version,entryBuffer,config);    return new Entry(dn,objectClasses,userAttributes,operationalAttributes);  } catch (  DirectoryException de) {    throw de;  }catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_ENTRY_DECODE_EXCEPTION.get(getExceptionMessage(e));    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);  }}  }
class C{  private boolean loadSectionOrder(String fileName){  InputStream is=getClass().getClassLoader().getResourceAsStream(fileName);  if (is == null) {    if (debug.messageEnabled()) {      debug.message("loadSectionOrder: no section for service" + serviceName);    }    return false;  }  Map<String,List<String>> map=new HashMap<String,List<String>>();  BufferedReader reader=new BufferedReader(new InputStreamReader(is));  try {    String line=reader.readLine();    while (line != null) {      if (!line.startsWith("#") && (line.trim().length() > 0)) {        int idx=line.indexOf('=');        String key=line.substring(0,idx).trim();        String value=line.substring(idx + 1).trim();        List<String> list=map.get(key);        if (list == null) {          list=new ArrayList<String>();          map.put(key,list);        }        list.add(value);      }      line=reader.readLine();    }  } catch (  IOException ioe) {    if (debug.messageEnabled()) {      debug.message("PropertyXMLBuilder:loadSectionOrder",ioe);    }  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException ioe) {      }    }  }  sectionOrder=map;  if (debug.messageEnabled()) {    debug.message("loadSectionOrder: " + sectionOrder);  }  return true;}  }
class C{  public BufferedReader(Reader in){  this(in,defaultCharBufferSize);}  }
class C{  private int writeEncryptedData(final ByteBuffer src){  final int pos=src.position();  final int len=src.remaining();  if (src.isDirect()) {    final long addr=Buffer.address(src) + pos;    final int netWrote=SSL.writeToBIO(networkBIO,addr,len);    if (netWrote >= 0) {      src.position(pos + netWrote);      return netWrote;    }  } else {    ByteBuffer buf=ByteBuffer.allocateDirect(len);    try {      final long addr=memoryAddress(buf);      buf.put(src);      final int netWrote=SSL.writeToBIO(networkBIO,addr,len);      if (netWrote >= 0) {        src.position(pos + netWrote);        return netWrote;      } else {        src.position(pos);      }    }  finally {      buf.clear();      ByteBufferUtils.cleanDirectBuffer(buf);    }  }  return -1;}  }
class C{  public void removeWrapper(String hostName,String contextPath,String version,String path){  hostName=renameWildcardHost(hostName);  ContextVersion contextVersion=findContextVersion(hostName,contextPath,version,true);  if (contextVersion == null || contextVersion.isPaused()) {    return;  }  removeWrapper(contextVersion,path);}  }
class C{  private static long[] divRemNegativeLong(long n,long d){  assert n < 0 : "Non-negative numerator " + n;  assert d != 1 : "Unity denominator";  long q=(n >>> 1) / (d >>> 1);  long r=n - q * d;  while (r < 0) {    r+=d;    q--;  }  while (r >= d) {    r-=d;    q++;  }  return new long[]{r,q};}  }
class C{  public PdfLayer(String name,PdfDocument document){  this(document);  setName(name);  document.getCatalog().getOCProperties(true).registerLayer(this);}  }
class C{  private boolean isValidCommandMethod(Object service,String commandName){  try {    service.getClass().getMethod(commandName,InputStream.class,PrintStream.class,String[].class);    return true;  } catch (  NoSuchMethodException e) {    return false;  }}  }
class C{  private static <T>T requireNonNull(T obj,String message){  if (obj == null)   throw new NullPointerException(message);  return obj;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  DTMIterator nl=m_arg0.asIterator(xctxt,xctxt.getCurrentNode());  int i=nl.getLength();  nl.detach();  return new XNumber((double)i);}  }
class C{  public Dimension maximumLayoutSize(Container target){  Dimension rd, mbd;  Insets i=getInsets();  if (menuBar != null && menuBar.isVisible()) {    mbd=menuBar.getMaximumSize();  } else {    mbd=new Dimension(0,0);  }  if (contentPane != null) {    rd=contentPane.getMaximumSize();  } else {    rd=new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE - i.top - i.bottom- mbd.height- 1);  }  return new Dimension(Math.min(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton2Request(event);}  }
class C{  protected ASN1Primitive buildObject(int tag,int tagNo,int length) throws IOException {  boolean isConstructed=(tag & CONSTRUCTED) != 0;  DefiniteLengthInputStream defIn=new DefiniteLengthInputStream(this,length);  if ((tag & APPLICATION) != 0) {    return new DERApplicationSpecific(isConstructed,tagNo,defIn.toByteArray());  }  if ((tag & TAGGED) != 0) {    return new ASN1StreamParser(defIn).readTaggedObject(isConstructed,tagNo);  }  if (isConstructed) {switch (tagNo) {case OCTET_STRING:      ASN1EncodableVector v=buildDEREncodableVector(defIn);    ASN1OctetString[] strings=new ASN1OctetString[v.size()];  for (int i=0; i != strings.length; i++) {    strings[i]=(ASN1OctetString)v.get(i);  }return new BEROctetString(strings);case SEQUENCE:if (lazyEvaluate) {return new LazyEncodedSequence(defIn.toByteArray());} else {return DERFactory.createSequence(buildDEREncodableVector(defIn));}case SET:return DERFactory.createSet(buildDEREncodableVector(defIn));case EXTERNAL:return new DERExternal(buildDEREncodableVector(defIn));default :throw new IOException("unknown tag " + tagNo + " encountered");}}return createPrimitiveDERObject(tagNo,defIn,tmpBuffers);}  }
class C{  public synchronized int count(){  return set.size();}  }
class C{  @Override public int countByUUID_G(String uuid,long groupId){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_G;  Object[] finderArgs=new Object[]{uuid,groupId};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(3);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_G_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_G_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_G_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(groupId);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public boolean isAlreadyConnectedToDS(DataServerHandler dsHandler){  if (connectedDSs.containsKey(dsHandler.getServerId())) {    logger.error(ERR_DUPLICATE_SERVER_ID,localReplicationServer.getMonitorInstanceName(),connectedDSs.get(dsHandler.getServerId()),dsHandler,dsHandler.getServerId());    return true;  }  return false;}  }
class C{  @Override protected URLConnection openConnection(URL u) throws IOException {  return new FtpURLConnection(u);}  }
class C{  public void insert_double(double value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_double",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_double(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static void convertJAXBToOutputStream(Object jaxbObj,OutputStream os) throws JAXBException {  Marshaller marshaller=jaxbContext.createMarshaller();  marshaller.setProperty(PROP_JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  marshaller.setProperty(PROP_NAMESPACE_PREFIX_MAPPER,nsPrefixMapper);  marshaller.marshal(jaxbObj,os);}  }
class C{  public final void testGetPublicKey() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PublicKey pk=testPublicKey;  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,null,pk);  assertSame(pk,vr.getPublicKey());}  }
class C{  public static double[] copyOf(double[] original,int newLength){  double[] copy=new double[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public void config(String msg){  log(Level.CONFIG,msg);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.STRTransform10Element createSTRTransform10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.STRTransform10ElementImpl();}  }
class C{  static ObjectName createObjectName(String domain,User user) throws MalformedObjectNameException {  ObjectName name=new ObjectName(domain + ":type=User,username=" + ObjectName.quote(user.getUsername())+ ",database="+ user.getUserDatabase().getId());  return name;}  }
class C{  public static ActiveRequestorException newReceiverException(String key,String... args){  return new ActiveRequestorException(SOAPConstants.SOAP_RECEIVER_FAULT,key,args);}  }
class C{  public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {  if (debug.messageEnabled()) {    debug.message("FirstTimeLogin.onLoginSuccess called: Req:" + request.getRequestURL());  }  String strAttributeName=SystemProperties.get(FIRSTTIME_LOGIN_ATTR_NAME);  try {    if (strAttributeName != null && !strAttributeName.trim().equals("")) {      AMIdentity amIdentityUser=IdUtils.getIdentity(ssoToken);      Map attrMap=amIdentityUser.getAttributes();      String strAttributeValue=Misc.getMapAttr(attrMap,strAttributeName,null);      if (debug.messageEnabled()) {        debug.message("FirstTimeLogin.onLoginSuccess: " + strAttributeName + "="+ strAttributeValue);      }      if (strAttributeValue != null && strAttributeValue.equalsIgnoreCase("true")) {        if (request != null) {          request.setAttribute(AMPostAuthProcessInterface.POST_PROCESS_LOGIN_SUCCESS_URL,"http://localhost:8081/idm/user/main.jsp?goto=http://mail.yahoo.com");        }      }    }    if (debug.messageEnabled()) {      debug.message("FirstTimeLogin.onLoginSuccess: FirstTimeLogin " + "concluded successfully");    }  } catch (  IdRepoException ire) {    debug.error("FirstTimeLogin.onLoginSuccess: IOException while " + "fetching user attributes: " + ire);  }catch (  SSOException sse) {    debug.error("FirstTimeLogin.onLoginSuccess: SSOException " + sse);  }}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public void recomposeTemplates(boolean flushFirst) throws TransformerException {}  }
class C{  public FrameBodyTCON(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public static StoroBuilder configure(long maxSize){  return new StoroBuilder(maxSize);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  out.writeInt(length());  out.writeObject(getValue());}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(-right.num());}  }
class C{  protected void startNode(Node node) throws org.xml.sax.SAXException {  if (node instanceof Locator) {    Locator loc=(Locator)node;    m_locator.setColumnNumber(loc.getColumnNumber());    m_locator.setLineNumber(loc.getLineNumber());    m_locator.setPublicId(loc.getPublicId());    m_locator.setSystemId(loc.getSystemId());  } else {    m_locator.setColumnNumber(0);    m_locator.setLineNumber(0);  }switch (node.getNodeType()) {case Node.COMMENT_NODE:{      String data=((Comment)node).getData();      if (m_contentHandler instanceof LexicalHandler) {        LexicalHandler lh=((LexicalHandler)this.m_contentHandler);        lh.comment(data.toCharArray(),0,data.length());      }    }  break;case Node.DOCUMENT_FRAGMENT_NODE:break;case Node.DOCUMENT_NODE:break;case Node.ELEMENT_NODE:Element elem_node=(Element)node;{String uri=elem_node.getNamespaceURI();if (uri != null) {String prefix=elem_node.getPrefix();if (prefix == null) prefix="";this.m_contentHandler.startPrefixMapping(prefix,uri);}}NamedNodeMap atts=elem_node.getAttributes();int nAttrs=atts.getLength();for (int i=0; i < nAttrs; i++) {final Node attr=atts.item(i);final String attrName=attr.getNodeName();final int colon=attrName.indexOf(':');final String prefix;if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {if (colon < 0) prefix=""; else prefix=attrName.substring(colon + 1);this.m_contentHandler.startPrefixMapping(prefix,attr.getNodeValue());} else if (colon > 0) {prefix=attrName.substring(0,colon);String uri=attr.getNamespaceURI();if (uri != null) this.m_contentHandler.startPrefixMapping(prefix,uri);}}String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.startElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName(),new AttList(atts,m_dh));break;case Node.PROCESSING_INSTRUCTION_NODE:{ProcessingInstruction pi=(ProcessingInstruction)node;String name=pi.getNodeName();if (name.equals("xslt-next-is-raw")) {nextIsRaw=true;} else {this.m_contentHandler.processingInstruction(pi.getNodeName(),pi.getData());}}break;case Node.CDATA_SECTION_NODE:{boolean isLexH=(m_contentHandler instanceof LexicalHandler);LexicalHandler lh=isLexH ? ((LexicalHandler)this.m_contentHandler) : null;if (isLexH) {lh.startCDATA();}dispatachChars(node);{if (isLexH) {lh.endCDATA();}}}break;case Node.TEXT_NODE:{if (nextIsRaw) {nextIsRaw=false;m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");dispatachChars(node);m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");} else {dispatachChars(node);}}break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {((LexicalHandler)this.m_contentHandler).startEntity(eref.getNodeName());} else {}}break;default :}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementinuseattributeerr.class,args);}  }
class C{  private void installListeners(){  if (window != null) {    windowListener=createWindowListener();    window.addWindowListener(windowListener);    propertyChangeListener=createWindowPropertyChangeListener();    window.addPropertyChangeListener(propertyChangeListener);  }}  }
class C{  private ByteString escapeBytes(final ByteString value){  if (!needEscaping(value)) {    return value;  }  final ByteStringBuilder builder=new ByteStringBuilder();  for (int i=0; i < value.length(); i++) {    final byte b=value.byteAt(i);    if (isByteToEscape(b)) {      builder.appendByte(DN.NORMALIZED_ESC_BYTE);    }    builder.appendByte(b);  }  return builder.toByteString();}  }
class C{  protected ArrayList<ShapeTile> offset_shapes(Polyline p_polyline,int p_half_width,int p_from_no,int p_to_no){  return p_polyline.offset_shapes(p_half_width,p_from_no,p_to_no);}  }
class C{  public static void downloadAsync(ImageRequest request){  if (request == null) {    return;  }  RequestKey key=new RequestKey(request.getImageUri(),request.getCallerTag());synchronized (pendingRequests) {    DownloaderContext downloaderContext=pendingRequests.get(key);    if (downloaderContext != null) {      downloaderContext.request=request;      downloaderContext.isCancelled=false;      downloaderContext.workItem.moveToFront();    } else {      enqueueCacheRead(request,key,request.isCachedRedirectAllowed());    }  }}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){synchronized (mapRealmToFormat) {    mapRealmToFormat.remove(orgName);  }}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  if (XObject.CLASS_NUMBER == right.getType())   return right; else   return new XNumber(right.num());}  }
class C{  public static boolean isParentRealm(String parentPath,String path){  parentPath=normalizeRealm(parentPath).toLowerCase();  path=normalizeRealm(path).toLowerCase();  if (path.startsWith(parentPath)) {    path=path.substring(parentPath.length());    return path.startsWith("/");  }  return false;}  }
class C{  public final void testEqualsObject02(){  assertFalse(new ECFieldFp(BigInteger.valueOf(23L)).equals(null));}  }
class C{  private void processRequestControls() throws DirectoryException {  LocalBackendWorkflowElement.evaluateProxyAuthControls(this);  LocalBackendWorkflowElement.removeAllDisallowedControls(entryDN,this);  for (ListIterator<Control> iter=getRequestControls().listIterator(); iter.hasNext(); ) {    final Control c=iter.next();    final String oid=c.getOID();    if (OID_LDAP_ASSERTION.equals(oid)) {      LDAPAssertionRequestControl assertControl=getRequestControl(LDAPAssertionRequestControl.DECODER);      SearchFilter filter;      try {        filter=assertControl.getSearchFilter();      } catch (      DirectoryException de) {        logger.traceException(de);        throw newDirectoryException(currentEntry,de.getResultCode(),ERR_MODIFY_CANNOT_PROCESS_ASSERTION_FILTER.get(entryDN,de.getMessageObject()));      }      if (!getAccessControlHandler().isAllowed(this,currentEntry,filter)) {        throw new DirectoryException(ResultCode.INSUFFICIENT_ACCESS_RIGHTS,ERR_CONTROL_INSUFFICIENT_ACCESS_RIGHTS.get(oid));      }      try {        if (!filter.matchesEntry(currentEntry)) {          throw newDirectoryException(currentEntry,ResultCode.ASSERTION_FAILED,ERR_MODIFY_ASSERTION_FAILED.get(entryDN));        }      } catch (      DirectoryException de) {        if (de.getResultCode() == ResultCode.ASSERTION_FAILED) {          throw de;        }        logger.traceException(de);        throw newDirectoryException(currentEntry,de.getResultCode(),ERR_MODIFY_CANNOT_PROCESS_ASSERTION_FILTER.get(entryDN,de.getMessageObject()));      }    } else     if (OID_LDAP_NOOP_OPENLDAP_ASSIGNED.equals(oid)) {      noOp=true;    } else     if (OID_PERMISSIVE_MODIFY_CONTROL.equals(oid)) {      permissiveModify=true;    } else     if (OID_LDAP_READENTRY_PREREAD.equals(oid)) {      preReadRequest=getRequestControl(LDAPPreReadRequestControl.DECODER);    } else     if (OID_LDAP_READENTRY_POSTREAD.equals(oid)) {      if (c instanceof LDAPPostReadRequestControl) {        postReadRequest=(LDAPPostReadRequestControl)c;      } else {        postReadRequest=getRequestControl(LDAPPostReadRequestControl.DECODER);        iter.set(postReadRequest);      }    } else     if (LocalBackendWorkflowElement.isProxyAuthzControl(oid)) {      continue;    } else     if (OID_PASSWORD_POLICY_CONTROL.equals(oid)) {      pwPolicyControlRequested=true;    } else     if (c.isCritical() && !backend.supportsControl(oid)) {      throw newDirectoryException(currentEntry,ResultCode.UNAVAILABLE_CRITICAL_EXTENSION,ERR_MODIFY_UNSUPPORTED_CRITICAL_CONTROL.get(entryDN,oid));    }  }}  }
class C{  public void changeShape(Dimension min,Dimension pref,Dimension max){  setMinimumSize(min);  setPreferredSize(pref);  setMaximumSize(max);  revalidate();}  }
class C{  static <T>UnaryOperator<T> identity(){  return null;}  }
class C{  private void reduceDegree(){  for (int i=8; i >= 0; i--) {    c[i]+=c[10 + i] << 4;    c[i]+=c[10 + i] << 1;    c[i]+=c[10 + i];  }}  }
class C{  public boolean hasGlobalSubSchema(){  return subConfigMeta.hasGlobalSubSchema();}  }
class C{  private void showHideImage(View image,View parent,boolean show){  if (show) {    image.setVisibility(View.VISIBLE);    parent.setPadding(5,5,5,5);    parent.setLayoutParams(new LayoutParams(0,LayoutParams.WRAP_CONTENT,2f));  } else {    image.setVisibility(View.GONE);    parent.setPadding(5,5,5,5);    parent.setLayoutParams(new LayoutParams(0,LayoutParams.WRAP_CONTENT,3f));  }}  }
class C{  private static String which(String classname,ClassLoader loader){  String classnameAsResource=classname.replace('.','/') + ".class";  if (loader == null)   loader=ClassLoader.getSystemClassLoader();  URL it=ss.getResourceAsURL(loader,classnameAsResource);  if (it != null) {    return it.toString();  } else {    return null;  }}  }
class C{  @SuppressWarnings("unchecked") public static <S extends NativeObject>S toObject(Class<S> type,long handle){  try {    Method toObject=findMarshaler(type);    return (S)toObject.invoke(null,type,handle,MarshalerFlags.CALL_TYPE_PTR);  } catch (  InvocationTargetException e) {    throw new Error(e);  }catch (  IllegalAccessException e) {    throw new Error(e);  }}  }
class C{  public List<Class<?>> parameterList(){  return Collections.unmodifiableList(Arrays.asList(ptypes.clone()));}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.SASLResponseType.DataType createSASLResponseTypeDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.SASLResponseTypeImpl.DataTypeImpl();}  }
class C{  public void remove(int childIndex){  FHTreeStateNode node=(FHTreeStateNode)getChildAt(childIndex);  node.removeFromMapping();  super.remove(childIndex);}  }
class C{  public Set searchOrganizations(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATION),getSearchFilter(AMObject.ORGANIZATION),wildcard,avPairs,level);}  }
class C{  ICC_Profile(Profile p){  this.cmmProfile=p;}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  String calculateHttpEncoding(String httpContentType,String bomEnc,String xmlGuessEnc,String xmlEnc,boolean lenient) throws IOException {  if (lenient && xmlEnc != null) {    return xmlEnc;  }  String cTMime=getContentTypeMime(httpContentType);  String cTEnc=getContentTypeEncoding(httpContentType);  boolean appXml=isAppXml(cTMime);  boolean textXml=isTextXml(cTMime);  if (!appXml && !textXml) {    String msg=MessageFormat.format(HTTP_EX_3,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);  }  if (cTEnc == null) {    if (appXml) {      return calculateRawEncoding(bomEnc,xmlGuessEnc,xmlEnc);    } else {      return defaultEncoding == null ? US_ASCII : defaultEncoding;    }  }  if (cTEnc.equals(UTF_16BE) || cTEnc.equals(UTF_16LE)) {    if (bomEnc != null) {      String msg=MessageFormat.format(HTTP_EX_1,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);      throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    }    return cTEnc;  }  if (cTEnc.equals(UTF_16)) {    if (bomEnc != null && bomEnc.startsWith(UTF_16)) {      return bomEnc;    }    String msg=MessageFormat.format(HTTP_EX_2,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);  }  if (cTEnc.equals(UTF_32BE) || cTEnc.equals(UTF_32LE)) {    if (bomEnc != null) {      String msg=MessageFormat.format(HTTP_EX_1,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);      throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    }    return cTEnc;  }  if (cTEnc.equals(UTF_32)) {    if (bomEnc != null && bomEnc.startsWith(UTF_32)) {      return bomEnc;    }    String msg=MessageFormat.format(HTTP_EX_2,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);  }  return cTEnc;}  }
class C{  public void testConstructorSignBytesZero2(){  byte aBytes[]={-0,0,+0,0,0,00,000};  int aSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  static void appendModeInfo(Mode mode,BitArray bits){  bits.appendBits(mode.getBits(),4);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();{    boolean success=false;    try {      splitNode=textNode.splitText(300);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  @Override public void close() throws SQLException {  assertOpen();  isClosed=true;  try {    if (pstmtPool != null) {      try {        pstmtPool.close();      }  finally {        pstmtPool=null;      }    }  } catch (  final RuntimeException e) {    throw e;  }catch (  final Exception e) {    throw new SQLException("Cannot close connection (return to pool failed)",e);  } finally {    try {      connection.close();    }  finally {      connection=null;    }  }}  }
class C{  AbstractMap.SimpleImmutableEntry<K,V> createSnapshot(){  Object v=value;  if (v == null || v == this || v == BASE_HEADER)   return null;  @SuppressWarnings("unchecked") V vv=(V)v;  return new AbstractMap.SimpleImmutableEntry<K,V>(key,vv);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("ServiceConfigManagerImpl: ").append(serviceName).append(" Version: ").append(version);  return (sb.toString());}  }
class C{  public static boolean isTrustedSource(InetAddress source) throws SessionException {  if (trustedSources == null) {    trustedSources=getTrustedSourceList();  }  return trustedSources.contains(source);}  }
class C{  public Constraints(Spring x,Spring y){  setX(x);  setY(y);}  }
class C{  private void updateCommandCache(String group,String command,boolean needNotify){  String oldCommand=commandCache.get(group);  if (!command.equals(oldCommand)) {    commandCache.put(group,command);    if (needNotify) {      notifyExecutor.execute(new NotifyCommand(group,command));      LoggerUtil.info(String.format("command data change: group=%s, command=%s: ",group,command));    }  } else {    LoggerUtil.info(String.format("command data not change: group=%s, command=%s: ",group,command));  }}  }
class C{  public Set searchGroups(String wildcard,int level,String groupSearchTemplate,Map avPairs) throws AMException, SSOException {  String filter;  if (groupSearchTemplate != null && groupSearchTemplate.length() > 0) {    filter=getSearchFilter(AMObject.GROUP,groupSearchTemplate);  } else {    filter="(|" + getSearchFilter(AMObject.GROUP) + getSearchFilter(AMObject.DYNAMIC_GROUP)+ getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP)+ ")";  }  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),filter,wildcard,avPairs,level);}  }
class C{  public AlertFrame(String text,int messageType,String initialInputValue){  super("Alert");  finalInputValue=null;  if (messageType == JOptionPane.ERROR_MESSAGE)   showMessageDialog(this,text,"Error",messageType); else   if (messageType == JOptionPane.WARNING_MESSAGE)   showMessageDialog(this,text,"Warning",messageType); else   if (messageType == JOptionPane.INFORMATION_MESSAGE) {    finalInputValue=(String)showInputDialog(this,text,"Information",messageType,null,null,initialInputValue);  } else   showMessageDialog(this,"Unknown alert message");}  }
class C{  public void test_getInstanceLjava_lang_String02(){  try {    KeyManagerFactory.getInstance(null);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException was not thrown as expected for algorithm: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public static KeyStore loadCacertsKeyStore(String provider){  File file=new File(System.getProperty("java.home"),"lib");  file=new File(file,"security");  file=new File(file,"cacerts");  FileInputStream fin=null;  try {    fin=new FileInputStream(file);    KeyStore k;    if (provider == null)     k=KeyStore.getInstance("JKS"); else     k=KeyStore.getInstance("JKS",provider);    k.load(fin,null);    return k;  } catch (  Exception e) {    throw new PdfException(e);  } finally {    try {      if (fin != null) {        fin.close();      }    } catch (    Exception ex) {    }  }}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (documentHandler != null)   documentHandler.endElement(qName);}  }
class C{  public TimeUnit timeunit(){  return values.timeunit;}  }
class C{  public boolean addAll(Collection<? extends E> c){  Object[] cs=(c.getClass() == CopyOnWriteArrayList.class) ? ((CopyOnWriteArrayList<?>)c).getArray() : c.toArray();  if (cs.length == 0)   return false;  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    if (len == 0 && cs.getClass() == Object[].class)     setArray(cs); else {      Object[] newElements=Arrays.copyOf(elements,len + cs.length);      System.arraycopy(cs,0,newElements,len,cs.length);      setArray(newElements);    }    return true;  }  finally {    lock.unlock();  }}  }
class C{  public void testConstrBigIntegerMathContext(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="1231212478987482988429808779810457634781384757";  int resScale=-6;  BigDecimal result=new BigDecimal(bA,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());  BigDecimal bd;  BigInteger bi=new BigInteger("12345678901234567890123456789012345");  BigInteger nbi=new BigInteger("-12345678901234567890123456789012345");  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678902E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678902E+34",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678E+34",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.23456789012345678901234567890124E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.23456789012345678901234567890123E+34",bd.toString());  mc=new MathContext(34,RoundingMode.FLOOR);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+34",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_EVEN);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+34",bd.toString());  bd=new BigDecimal(new BigInteger("-12345678901234567890123456789012335"),mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+34",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_UP);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678901235E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+34",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_DOWN);  bd=new BigDecimal(bi,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+34",bd.toString());  bd=new BigDecimal(nbi,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+34",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(bi,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbi,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }}  }
class C{  @Override protected void parseURL(URL url,String spec,int start,int end){  if (end < start) {    return;  }  String parseString="";  if (start < end) {    parseString=spec.substring(start,end).replace('\\','/');  }  super.parseURL(url,parseString,0,parseString.length());}  }
class C{  public org.w3c.dom.Element signWithSAMLToken(org.w3c.dom.Document doc,java.security.cert.Certificate cert,String assertionID,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  return null;}  }
class C{  public void sendEmailToUser(String from,String to[],String subject,String msg,String charset){  AMSendMail sm=new AMSendMail();  try {    sm.postMail(to,subject,msg,from,charset);  } catch (  MessagingException ex) {    debug.error("Could not send email to user " + to,ex);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthenticationStatementElement createAuthenticationStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthenticationStatementElementImpl();}  }
class C{  public void handleToken(Segment seg,byte id,int offset,int length,TokenMarker.LineContext context){  Token token=createToken(id,offset,length,context);  if (token != null)   addToken(token,context);}  }
class C{  public LongMap(int initialCapacity){  this(initialCapacity,0.8f);}  }
class C{  public McastServiceImpl(MemberImpl member,long sendFrequency,long expireTime,int port,InetAddress bind,InetAddress mcastAddress,int ttl,int soTimeout,MembershipListener service,MessageListener msgservice,boolean localLoopbackDisabled) throws IOException {  this.member=member;  this.address=mcastAddress;  this.port=port;  this.mcastSoTimeout=soTimeout;  this.mcastTTL=ttl;  this.mcastBindAddress=bind;  this.timeToExpiration=expireTime;  this.service=service;  this.msgservice=msgservice;  this.sendFrequency=sendFrequency;  this.localLoopbackDisabled=localLoopbackDisabled;  init();}  }
class C{  public void removeNotify(){  super.removeNotify();  KeyboardManager.getCurrentManager().unregisterMenuBar(this);}  }
class C{  @Override public Foo findByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_First(uuid,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public boolean isValid(){  return mode != null && ecLevel != null && version != -1 && matrixWidth != -1 && maskPattern != -1 && numTotalBytes != -1 && numDataBytes != -1 && numECBytes != -1 && numRSBlocks != -1 && isValidMaskPattern(maskPattern) && numTotalBytes == numDataBytes + numECBytes && matrix != null && matrixWidth == matrix.getWidth() && matrix.getWidth() == matrix.getHeight();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element1;  Element element2;  Attr attribute;  Attr newAttribute;  NodeList elementList;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element1=(Element)elementList.item(1);  attribute=element1.getAttributeNodeNS(nullNS,"street");  element2=(Element)elementList.item(2);{    boolean success=false;    try {      newAttribute=element2.setAttributeNodeNS(attribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("elementsetattributenodens03",success);  }}  }
class C{  public final void testGetPublic01(){  KeyPair kp=new KeyPair(null,null);  assertNull(kp.getPublic());}  }
class C{  public SignatureVisitor visitExceptionType(){  return this;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    logger.info("shootme: got an ACK! " + requestEvent.getRequest());    logger.info("Dialog State = " + dialog.getState() + " sending BYE ");    assertTrue(dialog.getState() == DialogState.CONFIRMED);    Request bye=dialog.createRequest(Request.BYE);    logger.info("bye request = " + bye);    ClientTransaction ct=this.sipProvider.getNewClientTransaction(bye);    dialog.sendRequest(ct);  } catch (  Exception ex) {    logger.error("unexpected exception",ex);    fail("unexpected exception sending bye");  }}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public NamingResponse parseXML(){  if (document == null) {    return null;  }  Element elem=document.getDocumentElement();  namingResponse=new NamingResponse();  String temp=elem.getAttribute("vers");  if (temp != null) {    namingResponse.setResponseVersion(temp);  }  temp=elem.getAttribute("reqid");  if (temp != null) {    namingResponse.setRequestID(temp);  }  NodeList attribs=elem.getElementsByTagName("Attribute");  if (attribs != null && attribs.getLength() != 0) {    parseAttributeTag(attribs);  }  NodeList exception=elem.getElementsByTagName("Exception");  if (exception != null && exception.getLength() != 0) {    Node node=exception.item(0);    if (node != null) {      namingResponse.setException(node.getNodeValue());    }  }  return namingResponse;}  }
class C{  public int capacity(){  return buffer.length;}  }
class C{  public static final SSLContext createSSLContext(final String protocol,final String provider,final KeyManager[] keyManagers,final TrustManager[] trustManagers){  try {    SSLContext context=SSLContext.getInstance(protocol,provider);    context.init(keyManagers,trustManagers,new SecureRandom());    return context;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private final void dispatachChars(Node node) throws org.xml.sax.SAXException {  if (fSerializer != null) {    this.fSerializer.characters(node);  } else {    String data=((Text)node).getData();    this.fSerializer.characters(data.toCharArray(),0,data.length());  }}  }
class C{  private ConditionResult processOR(SearchFilter completeFilter,Entry entry,int depth) throws DirectoryException {  if (filterComponents == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_COMPOUND_COMPONENTS_NULL.get(entry.getName(),completeFilter,filterType);    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);  } else   if (filterComponents.isEmpty()) {    if (logger.isTraceEnabled()) {      logger.trace("Returning FALSE for LDAP FALSE " + "filter (|)");    }    return ConditionResult.FALSE;  } else {    if (depth >= MAX_NESTED_FILTER_DEPTH) {      LocalizableMessage message=ERR_SEARCH_FILTER_NESTED_TOO_DEEP.get(entry.getName(),completeFilter);      throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);    }    ConditionResult result=ConditionResult.FALSE;    for (    SearchFilter f : filterComponents) {switch (f.matchesEntryInternal(completeFilter,entry,depth + 1)) {case TRUE:        if (logger.isTraceEnabled()) {          logger.trace("Returning TRUE for OR component %s in filter " + "%s for entry %s",f,completeFilter,entry.getName());        }      return ConditionResult.TRUE;case FALSE:    break;case UNDEFINED:  if (logger.isTraceEnabled()) {    logger.trace("Undefined result for OR component %s in filter " + "%s for entry %s",f,completeFilter,entry.getName());  }result=ConditionResult.UNDEFINED;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_RESULT_TYPE.get(entry.getName(),completeFilter,result);throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);}}if (logger.isTraceEnabled()) {logger.trace("Returning %s for OR component %s in filter %s for " + "entry %s",result,this,completeFilter,entry.getName());}return result;}}  }
class C{  public static boolean isConnectedFast(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && Connectivity.isConnectionFast(info.getType(),info.getSubtype()));}  }
class C{  public ReplicationDomainMonitor(ReplicationServerDomain replicationDomain){  this.domain=replicationDomain;  this.monitorData=new ReplicationDomainMonitorData(getBaseDn());}  }
class C{  private org.opends.server.types.Entry createEmptySchemaEntry(){  Map<ObjectClass,String> objectClasses=new LinkedHashMap<>();  objectClasses.put(CoreSchema.getTopObjectClass(),OC_TOP);  objectClasses.put(serverContext.getSchema().getObjectClass(OC_LDAP_SUBENTRY_LC),OC_LDAP_SUBENTRY);  objectClasses.put(serverContext.getSchema().getObjectClass(OC_SUBSCHEMA),OC_SUBSCHEMA);  Map<AttributeType,List<Attribute>> userAttributes=new LinkedHashMap<>();  Map<AttributeType,List<Attribute>> operationalAttributes=new LinkedHashMap<>();  DN dn=DirectoryServer.getSchemaDN();  for (  AVA ava : dn.rdn()) {    AttributeType type=ava.getAttributeType();    Map<AttributeType,List<Attribute>> attrs=type.isOperational() ? operationalAttributes : userAttributes;    attrs.put(type,newLinkedList(Attributes.create(type,ava.getAttributeValue())));  }  return new org.opends.server.types.Entry(dn,objectClasses,userAttributes,operationalAttributes);}  }
class C{  public void iterateDeclaredPrefixes(PrefixCallback callback) throws SAXException {  for (Enumeration e=nss.getDeclaredPrefixes(); e.hasMoreElements(); ) {    String p=(String)e.nextElement();    String uri=nss.getURI(p);    callback.onPrefixMapping(p,uri);  }}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  public JKInvalidUserException(){  super();}  }
class C{  public DigestInputStream(InputStream stream,MessageDigest digest){  super(stream);  setMessageDigest(digest);}  }
class C{  public String encodeURL(HttpServletResponse res,String url,Session session){  return encodeURL(res,url,sessionCookies.getCookieName(),session);}  }
class C{  public static void deregisterIdentityMapper(DN configEntryDN){  directoryServer.identityMappers.remove(configEntryDN);}  }
class C{  public ZipExtractor(InputStream in,String zipFileName) throws FileNotFoundException, IllegalArgumentException {  this(in,0,0,1,zipFileName,null);}  }
class C{  public Set createAssignableDynamicGroups(Set assignableDynamicGroupNames) throws AMException, SSOException {  Iterator iter=assignableDynamicGroupNames.iterator();  Set assignableDynamicGroups=new HashSet();  while (iter.hasNext()) {    String assignableDynamicGroupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMAssignableDynamicGroupImpl assignableDynamicGroupImpl=new AMAssignableDynamicGroupImpl(super.token,assignableDynamicGroupDN);    assignableDynamicGroupImpl.create();    assignableDynamicGroups.add(assignableDynamicGroupImpl);  }  return assignableDynamicGroups;}  }
class C{  public org.omg.CORBA.TypeCode type(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("type",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    return $self.type();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testFieldONE(){  String oneS="1";  double oneD=1.0;  assertEquals("incorrect string value",oneS,BigDecimal.ONE.toString());  assertEquals("incorrect double value",oneD,BigDecimal.ONE.doubleValue(),0);}  }
class C{  void reset(JComponent component,Region region,SynthStyle style,int state){  this.component=component;  this.region=region;  this.style=style;  this.state=state;}  }
class C{  public static void fillEntriesInSet(Map attrMap,String key,String value){  if ((key != null) && (value != null) && (attrMap != null)) {    Set valueSet=new HashSet();    valueSet.add(value);    attrMap.put(key,valueSet);  }}  }
class C{  protected void paintVerticalLabel(Graphics g,int value,Component label){  int labelCenter=yPositionForValue(value);  int labelTop=labelCenter - (label.getPreferredSize().height / 2);  g.translate(0,labelTop);  label.paint(g);  g.translate(0,-labelTop);}  }
class C{  protected void fill_list(){  LibPackages packages=this.board_frame.board_panel.itera_board.get_routing_board().brd_library.packages;  LibPackage[] sorted_arr=new LibPackage[packages.pkg_count()];  for (int i=0; i < sorted_arr.length; ++i) {    sorted_arr[i]=packages.pkg_get(i + 1);  }  java.util.Arrays.sort(sorted_arr);  for (int i=0; i < sorted_arr.length; ++i) {    this.add_to_list(sorted_arr[i]);  }  this.gui_list.setVisibleRowCount(Math.min(packages.pkg_count(),DEFAULT_TABLE_SIZE));}  }
class C{  private static String addAdminGroupFilters(String originalFilter,String orgDN,int objectType){  try {    if (!ComplianceServicesImpl.isAdminGroupsEnabled(orgDN)) {      String modifiedFilter=originalFilter;switch (objectType) {case AMObject.STATIC_GROUP:case AMObject.DYNAMIC_GROUP:case AMObject.ASSIGNABLE_DYNAMIC_GROUP:case AMObject.GROUP:        StringBuilder sb=new StringBuilder();      sb.append("(&").append(originalFilter).append("(!(");    sb.append(NamingAttributeManager.getNamingAttribute(AMObject.ASSIGNABLE_DYNAMIC_GROUP));  sb.append("=serviceadministrators))").append("(!(");sb.append(NamingAttributeManager.getNamingAttribute(AMObject.ASSIGNABLE_DYNAMIC_GROUP));sb.append("=servicehelpdeskadministrators)))");modifiedFilter=sb.toString();}if (debug.messageEnabled()) {debug.message("SearchFilterManager." + "addAdminGroupFilters() - objectType = " + objectType + ", orgDN = "+ orgDN+ ", Original filter: "+ originalFilter+ ", Modified filter = "+ modifiedFilter);}return modifiedFilter;}} catch (AMException ae) {if (debug.warningEnabled()) {debug.warning("SearchFilterManager.addAdminGroupFilters() " + "Unable to determine if \"Admin Groups\" option is " + "enabled or disabled. Exception : ",ae);}}return originalFilter;}  }
class C{  private static Hashtable updateNamingTable(boolean forClient) throws SMSException {  Hashtable nametable=null;  try {    ServiceSchema sc=ssmNaming.getGlobalSchema();    Map namingAttrs=sc.getAttributeDefaults();    sc=ssmPlatform.getGlobalSchema();    Map platformAttrs=sc.getAttributeDefaults();    Set sites=getSites(platformAttrs);    Set servers=getServers(platformAttrs,sites);    Set siteNamesAndIDs=getSiteNamesAndIDs();    storeSiteNames(siteNamesAndIDs,namingAttrs);    if ((sites != null) && !sites.isEmpty()) {      if (!forClient) {        registFQDNMapping(sites);      }      sites.addAll(servers);    } else {      sites=servers;    }    if (forClient) {      storeServerListForClient(sites,namingAttrs);    } else {      storeServerList(sites,namingAttrs);    }    nametable=convertToHash(namingAttrs);    if (forClient && (namingTable != null)) {      String siteList=(String)namingTable.get(Constants.SITE_ID_LIST);      nametable.put(Constants.SITE_ID_LIST,siteList);    }    insertLBCookieValues(nametable);  } catch (  Exception ex) {    String errorMsg="Can't get naming table";    namingDebug.error(errorMsg,ex);    if (ex.getMessage() != null) {      errorMsg=ex.getMessage();    }    throw new SMSException(errorMsg);  }  return nametable;}  }
class C{  public ParallelWorkQueue(){}  }
class C{  @Inject public PushNotificationServiceConfigHelperFactory(@Named("PushNotificationService") ServiceConfigManager serviceConfigManager,@Named("frPush") Debug debug){  this.serviceConfigManager=serviceConfigManager;  this.debug=debug;}  }
class C{  private void removeAt(int i){  Object[] array=queue;  int n=size - 1;  if (n == i)   array[i]=null; else {    E moved=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(i,moved,array,n); else     siftDownUsingComparator(i,moved,array,n,cmp);    if (array[i] == moved) {      if (cmp == null)       siftUpComparable(i,moved,array); else       siftUpUsingComparator(i,moved,array,cmp);    }  }  size=n;}  }
class C{  private String removeMetaGotoOrg(HttpServletRequest httpRequest){  Enumeration paramEnum=httpRequest.getParameterNames();  String returnString=null;  while (paramEnum.hasMoreElements()) {    String paramKey=(String)paramEnum.nextElement();    if (paramKey.equalsIgnoreCase(IFSConstants.META_ALIAS) || paramKey.equalsIgnoreCase(IFSConstants.GOTOKEY) || paramKey.equalsIgnoreCase(IFSConstants.ORGKEY)) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSPreLogin::removeMetaGotoOrg " + "found metaAlias or gotoKey or org.");      }    } else {      String paramValue=httpRequest.getParameter(paramKey);      StringBuffer paramStringBuf=new StringBuffer().append(paramKey).append(IFSConstants.EQUAL_TO).append(paramValue);      if (returnString == null || returnString.length() < 1) {        returnString=paramStringBuf.toString();      } else {        returnString+=IFSConstants.AMPERSAND + paramStringBuf.toString();      }    }  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSPreLogin::removeMetaGotoOrg returning with " + returnString);  }  return returnString;}  }
class C{  private int convertLocationToRowInColumn(int y,int column){  int x=0;  if (layoutOrientation != JList.VERTICAL) {    if (isLeftToRight) {      x=column * cellWidth;    } else {      x=list.getWidth() - (column + 1) * cellWidth - list.getInsets().right;    }  }  return convertLocationToRow(x,y,true);}  }
class C{  public InvestingZonkyApi authenticated(final CommonFilter filter){  return this.obtain(InvestingZonkyApi.class,ApiProvider.ZONKY_URL,filter);}  }
class C{  private void addWrappers(ContextVersion contextVersion,Collection<WrapperMappingInfo> wrappers){  for (  WrapperMappingInfo wrapper : wrappers) {    addWrapper(contextVersion,wrapper.getMapping(),wrapper.getWrapper(),wrapper.isJspWildCard(),wrapper.isResourceOnly());  }}  }
class C{  public static Color fromRGB(int red,int green,int blue) throws IllegalArgumentException {  return new Color(red,green,blue);}  }
class C{  public void appendBits(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  ensureCapacity(size + numBits);  for (int numBitsLeft=numBits; numBitsLeft > 0; numBitsLeft--) {    appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);  }}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public void removeOfflineReplica(DN baseDN,int serverId){  CSN csn;  do {    csn=offlineReplicas.getCSN(baseDN,serverId);  } while (csn != null && !offlineReplicas.removeCSN(baseDN,csn));}  }
class C{  public static void processHttpRequest(HttpServletRequest request,HttpServletResponse response,Map paramsMap) throws SAML2Exception, SessionException, ServletException {  String method="processHttpRequest: ";  String metaAlias=null;  String remoteEntityID=null;  String queryString=null;  SAMLUtils.checkHTTPContentLength(request);  String requestURL=request.getRequestURI();  metaAlias=SAML2MetaUtils.getMetaAliasByUri(requestURL);  if (metaAlias == null) {    logError("MetaAliasNotFound",LogUtil.MISSING_META_ALIAS,metaAlias);    throw new SAML2Exception(SAML2Utils.bundle.getString("MetaAliasNotFound"));  }  String realm=SAML2MetaUtils.getRealmByMetaAlias(metaAlias);  String hostEntity=metaManager.getEntityByMetaAlias(metaAlias);  String hostRole=SAML2Utils.getHostEntityRole(paramsMap);  boolean isSupported=false;  if (SAML2Constants.IDP_ROLE.equals(hostRole)) {    isSupported=SAML2Utils.isIDPProfileBindingSupported(realm,hostEntity,SAML2Constants.MNI_SERVICE,SAML2Constants.HTTP_REDIRECT);  } else {    isSupported=SAML2Utils.isSPProfileBindingSupported(realm,hostEntity,SAML2Constants.MNI_SERVICE,SAML2Constants.HTTP_REDIRECT);  }  if (!isSupported) {    debug.error(method + "MNI binding: Redirect is not supported for " + hostEntity);    String[] data={hostEntity,SAML2Constants.HTTP_REDIRECT};    LogUtil.error(Level.INFO,LogUtil.BINDING_NOT_SUPPORTED,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  ManageNameIDRequest mniRequest=getMNIRequest(request);  remoteEntityID=mniRequest.getIssuer().getValue();  if (remoteEntityID == null) {    logError("nullRemoteEntityID",LogUtil.MISSING_ENTITY,remoteEntityID);    throw new SAML2Exception(SAML2Utils.bundle.getString("nullRemoteEntityID"));  }  boolean needToVerify=SAML2Utils.getWantMNIRequestSigned(realm,hostEntity,hostRole);  if (needToVerify) {    queryString=request.getQueryString();    boolean valid=SAML2Utils.verifyQueryString(queryString,realm,hostRole,remoteEntityID);    if (!valid) {      logError("invalidSignInRequest",LogUtil.MNI_REQUEST_INVALID_SIGNATURE,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignInRequest"));    }  }  String relayState=request.getParameter(SAML2Constants.RELAY_STATE);  if (debug.messageEnabled()) {    debug.message(method + "Meta Alias is : " + metaAlias);    debug.message(method + "Remote EntityID is : " + remoteEntityID);    debug.message(method + "Host Entity role is : " + hostRole);    debug.message(method + "Relay state is : " + relayState);  }  try {    ManageNameIDServiceElement mniService=getMNIServiceElement(realm,remoteEntityID,hostRole,SAML2Constants.HTTP_REDIRECT);    String mniURL=mniService.getResponseLocation();    if (mniURL == null) {      mniURL=mniService.getLocation();    }    ManageNameIDResponse mniResponse=processManageNameIDRequest(mniRequest,metaAlias,remoteEntityID,paramsMap,mniURL,SAML2Constants.HTTP_REDIRECT,request,response);    sendMNIResponse(response,mniResponse,mniURL,relayState,realm,hostEntity,hostRole,remoteEntityID);  } catch (  SAML2MetaException e) {    logError("metaDataError",LogUtil.METADATA_ERROR,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }}  }
class C{  public ConnectTimeoutException(final String message){  super(message);}  }
class C{  public static PdfAction createGoTo(PdfDestination destination){  return new PdfAction().put(PdfName.S,PdfName.GoTo).put(PdfName.D,destination.getPdfObject());}  }
class C{  public boolean enqueue(){  return this.queue.enqueue(this);}  }
class C{  @Override public MapboxGeocoding build() throws ServicesException {  validateAccessToken(accessToken);  return new MapboxGeocoding(this);}  }
class C{  public CachedBackupDirectory(File directory){  directoryPath=directory.getPath();  backupInfo=new File(directoryPath + File.separator + BACKUP_DIRECTORY_DESCRIPTOR_FILE);  lastModified=-1;  backupDirectory=null;}  }
class C{  MutableBigInteger divideKnuth(MutableBigInteger b,MutableBigInteger quotient,boolean needRemainder){  if (b.intLen == 0)   throw new ArithmeticException("BigInteger divide by zero");  if (intLen == 0) {    quotient.intLen=quotient.offset=0;    return needRemainder ? new MutableBigInteger() : null;  }  int cmp=compare(b);  if (cmp < 0) {    quotient.intLen=quotient.offset=0;    return needRemainder ? new MutableBigInteger(this) : null;  }  if (cmp == 0) {    quotient.value[0]=quotient.intLen=1;    quotient.offset=0;    return needRemainder ? new MutableBigInteger() : null;  }  quotient.clear();  if (b.intLen == 1) {    int r=divideOneWord(b.value[b.offset],quotient);    if (needRemainder) {      if (r == 0)       return new MutableBigInteger();      return new MutableBigInteger(r);    } else {      return null;    }  }  if (intLen >= KNUTH_POW2_THRESH_LEN) {    int trailingZeroBits=Math.min(getLowestSetBit(),b.getLowestSetBit());    if (trailingZeroBits >= KNUTH_POW2_THRESH_ZEROS * 32) {      MutableBigInteger a=new MutableBigInteger(this);      b=new MutableBigInteger(b);      a.rightShift(trailingZeroBits);      b.rightShift(trailingZeroBits);      MutableBigInteger r=a.divideKnuth(b,quotient);      r.leftShift(trailingZeroBits);      return r;    }  }  return divideMagnitude(b,quotient,needRemainder);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssX509V3Token10Element createWssX509V3Token10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssX509V3Token10ElementImpl();}  }
class C{  public String verifyAndGetOrgDN(SSOToken token,String entryDN,String childDN) throws AMException {  if (entryDN.isEmpty() || DN.valueOf(entryDN).size() <= 0) {    debug.error("DirectoryServicesImpl.verifyAndGetOrgDN() Invalid " + "DN: " + entryDN);    throw new AMException(token,"157");  }  String organizationDN=null;  boolean errorCondition=false;  try {    PersistentObject po=UMSObject.getObjectHandle(internalToken,new Guid(childDN));    String searchFilter=getOrgSearchFilter(entryDN);    SearchResults result=po.search(searchFilter,aName,scontrol);    if (result.hasMoreElements()) {      while (result.hasMoreElements()) {        result.next();      }      organizationDN=po.getGuid().toString().toLowerCase();    }  } catch (  InvalidSearchFilterException e) {    errorCondition=true;    debug.error("DirectoryServicesImpl.verifyAndGetOrgDN(): Invalid " + "search filter, unable to get Parent Organization: ",e);  }catch (  UMSException ue) {    errorCondition=true;    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.verifyAndGetOrgDN(): " + "Unable to Obtain Parent Organization",ue);    }    LdapException lex=(LdapException)ue.getRootCause();    ResultCode errorCode=lex.getResult().getResultCode();    if (retryErrorCodes.contains("" + errorCode)) {      throw new AMException(token,Integer.toString(errorCode.intValue()),ue);    }  }  if (errorCondition) {    String locale=CommonUtils.getUserLocale(token);    throw new AMException(AMSDKBundle.getString("124",locale),"124");  }  return organizationDN;}  }
class C{  public NamePath withoutHead(){  List<String> newPathPieces=new ArrayList<>();  newPathPieces.addAll(pathPieces);  if (!newPathPieces.isEmpty()) {    newPathPieces.remove(newPathPieces.size() - 1);  }  return new NamePath(newPathPieces);}  }
class C{  public byte[] readStreamBytes(PdfStream stream,boolean decode) throws IOException {  byte[] b=readStreamBytesRaw(stream);  if (decode && b != null) {    return decodeBytes(b,stream);  } else {    return b;  }}  }
class C{  public AMSearchResults searchUsers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  int level=searchControl.getSearchScope();  if ((level != AMConstants.SCOPE_ONE) && (level != AMConstants.SCOPE_SUB)) {    throw new AMException(AMSDKBundle.getString("123",super.locale),"123");  }  if ((wildcard == null) || (wildcard.length() == 0)) {    throw new AMException(AMSDKBundle.getString("122",super.locale),"122");  }  String userFilter="(&(" + AMNamingAttrManager.getNamingAttr(USER) + "="+ wildcard+ ")"+ getFilter()+ ")";  String filter=null;  if (avPairs == null) {    filter=userFilter;  } else {    if (avPairs.isEmpty()) {      filter=userFilter;    } else {      StringBuilder filterSB=new StringBuilder();      filterSB.append("(&").append(userFilter).append("(|");      Iterator iter=avPairs.keySet().iterator();      while (iter.hasNext()) {        String attributeName=(String)(iter.next());        Iterator iter2=((Set)(avPairs.get(attributeName))).iterator();        while (iter2.hasNext()) {          String attributeValue=(String)iter2.next();          filterSB.append("(").append(attributeName).append("=").append(attributeValue).append(")");        }      }      filterSB.append("))");      filter=filterSB.toString();    }  }  SearchControl sc=searchControl.getSearchControl();  String returnAttrs[]=searchControl.getReturnAttributes();  return dsServices.search(super.token,getOrganizationDN(),filter,sc,returnAttrs);}  }
class C{  public void test_probablePrime(){  for (int bitLength=50; bitLength <= 1050; bitLength+=100) {    BigInteger a=BigInteger.probablePrime(bitLength,rand);    assertTrue("isProbablePrime(probablePrime()) failed for: " + bi,a.isProbablePrime(80));  }}  }
class C{  protected synchronized void configureStart(){  if (log.isDebugEnabled()) {    log.debug(sm.getString("contextConfig.start"));  }  if (log.isDebugEnabled()) {    log.debug(sm.getString("contextConfig.xmlSettings",context.getName(),Boolean.valueOf(context.getXmlValidation()),Boolean.valueOf(context.getXmlNamespaceAware())));  }  webConfig();  if (!context.getIgnoreAnnotations()) {    applicationAnnotationsConfig();  }  if (ok) {    validateSecurityRoles();  }  if (ok) {    authenticatorConfig();  }  if (log.isDebugEnabled()) {    log.debug("Pipeline Configuration:");    Pipeline pipeline=context.getPipeline();    Valve valves[]=null;    if (pipeline != null) {      valves=pipeline.getValves();    }    if (valves != null) {      for (int i=0; i < valves.length; i++) {        log.debug("  " + valves[i].getClass().getName());      }    }    log.debug("======================");  }  if (ok) {    context.setConfigured(true);  } else {    log.error(sm.getString("contextConfig.unavailable"));    context.setConfigured(false);  }}  }
class C{  private boolean validateResourceNames(String resource,Set<String> patterns,ResourceName resourceHandler) throws EntitlementException {  if (resourceHandler instanceof RegExResourceName) {    return validateResourceNamesUsingRegex(resource,patterns,(RegExResourceName)resourceHandler);  }  for (  String pattern : patterns) {    String normalisedPattern=resourceHandler.canonicalize(pattern);    ResourceMatch match=resourceHandler.compare(normalisedPattern,resource,false);    if (match == ResourceMatch.EXACT_MATCH || match == ResourceMatch.SUB_RESOURCE_MATCH) {      return true;    }    match=resourceHandler.compare(resource,normalisedPattern,true);    if (match == ResourceMatch.WILDCARD_MATCH) {      return true;    }  }  return false;}  }
class C{  public WSFederationMetaException(Throwable t){  super(t);}  }
class C{  public void updateRoleMap(String relationId,Role newRole,List<ObjectName> oldValue) throws IllegalArgumentException, RelationServiceNotRegisteredException, RelationNotFoundException {  if (relationId == null || newRole == null || oldValue == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"updateRoleMap",new Object[]{relationId,newRole,oldValue});  isActive();  Object result=getRelation(relationId);  String roleName=newRole.getRoleName();  List<ObjectName> newRoleValue=newRole.getRoleValue();  List<ObjectName> oldRoleValue=new ArrayList<ObjectName>(oldValue);  List<ObjectName> newRefList=new ArrayList<ObjectName>();  for (  ObjectName currObjName : newRoleValue) {    int currObjNamePos=oldRoleValue.indexOf(currObjName);    if (currObjNamePos == -1) {      boolean isNewFlag=addNewMBeanReference(currObjName,relationId,roleName);      if (isNewFlag) {        newRefList.add(currObjName);      }    } else {      oldRoleValue.remove(currObjNamePos);    }  }  List<ObjectName> obsRefList=new ArrayList<ObjectName>();  for (  ObjectName currObjName : oldRoleValue) {    boolean noLongerRefFlag=removeMBeanReference(currObjName,relationId,roleName,false);    if (noLongerRefFlag) {      obsRefList.add(currObjName);    }  }  updateUnregistrationListener(newRefList,obsRefList);  RELATION_LOGGER.exiting(RelationService.class.getName(),"updateRoleMap");  return;}  }
class C{  @Override public boolean isSortAscending(){  return sortAscending;}  }
class C{  public boolean lockedDueToFailures(){  final int maxFailures=passwordPolicy.getLockoutFailureCount();  if (maxFailures <= 0) {    if (logger.isTraceEnabled()) {      logger.trace("Returning false for user %s because lockout due to failures is not enabled.",userDNString);    }    return false;  }  if (getFailureLockedTime() < 0L) {    if (getAuthFailureTimes().size() < maxFailures) {      if (logger.isTraceEnabled()) {        logger.trace("Returning false for user %s because there is no locked time.",userDNString);      }      return false;    }    setFailureLockedTime(currentTime);    if (logger.isTraceEnabled()) {      logger.trace("Locking user %s because there were enough existing failures even though there was" + " no account locked time.",userDNString);    }  }  if (passwordPolicy.getLockoutDuration() > 0) {    final long unlockTime=getFailureLockedTime() + 1000L * passwordPolicy.getLockoutDuration();    if (unlockTime > currentTime) {      secondsUntilUnlock=(int)((unlockTime - currentTime) / 1000);      if (logger.isTraceEnabled()) {        logger.trace("Returning true for user %s because there is a locked time and the lockout duration has" + " not been reached.",userDNString);      }      return true;    }    clearFailureLockout();    if (logger.isTraceEnabled()) {      logger.trace("Returning false for user %s because the existing lockout has expired.",userDNString);    }    assert -1L == getFailureLockedTime();    return false;  }  if (logger.isTraceEnabled()) {    logger.trace("Returning true for user %s because there is a locked time and no lockout duration.",userDNString);  }  assert -1L <= getFailureLockedTime();  return true;}  }
class C{  public static void marshal(Object jaxbObject,URI xml){  _marshal(jaxbObject,xml);}  }
class C{  public SQLClientInfoException(String reason,String sqlState,int vendorCode,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,sqlState,vendorCode,cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public boolean isCompletelyDirty(JComponent aComponent){  RepaintManager delegate=getDelegate(aComponent);  if (delegate != null) {    return delegate.isCompletelyDirty(aComponent);  }  Rectangle r;  r=getDirtyRegion(aComponent);  if (r.width == Integer.MAX_VALUE && r.height == Integer.MAX_VALUE)   return true; else   return false;}  }
class C{  public final boolean push(boolean val){  if (m_index == m_allocatedSize - 1)   grow();  return (m_values[++m_index]=val);}  }
class C{  public boolean isHeartbeatBackgroundEnabled(){  return heartbeatBackgroundEnabled;}  }
class C{  public static boolean isNodeAfter(Node node1,Node node2){  if (node1 instanceof DOMOrder && node2 instanceof DOMOrder) {    int index1=((DOMOrder)node1).getUid();    int index2=((DOMOrder)node2).getUid();    return index1 <= index2;  } else {    return DOMHelper.isNodeAfter(node1,node2);  }}  }
class C{  private static void addAci(DITCacheMap<List<Aci>> aciList,DN dn,List<Aci> acis){  if (aciList.containsKey(dn)) {    List<Aci> tmpAci=aciList.get(dn);    tmpAci.addAll(acis);  } else {    aciList.put(dn,acis);  }}  }
class C{  @Override public void onAttachFragment(final Fragment fragment){  delegate.onAttachFragment(fragment);}  }
class C{  private CompletionStage<Optional<UUID>> selectOffset(CassandraSession session){  return session.selectOne("SELECT offset FROM cargo_offset").thenApply(null);}  }
class C{  public void testCompareToNegZero(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  assertEquals(-1,aNumber.compareTo(bNumber));}  }
class C{  public PdfA1Checker(PdfAConformanceLevel conformanceLevel){  super(conformanceLevel);}  }
class C{  public void startRow(){  rows.add(new ArrayList<String>());  height++;  column=0;}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(this.privacy);}  }
class C{  boolean excluded(int elemIndex){  return (exclusions != null) && exclusions.get(elem.getIndex());}  }
class C{  public LocalBackendAddOperation(AddOperation add){  super(add);  LocalBackendWorkflowElement.attachLocalOperation(add,this);}  }
class C{  public void testSetScaleRoundHalfUp(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_HALF_UP);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  @Override public ThaiBuddhistDate date(Era era,int yearOfEra,int month,int dayOfMonth){  return date(prolepticYear(era,yearOfEra),month,dayOfMonth);}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  private TransformedIterable(final Iterable<M> iterable,final Function<? super M,? extends N,E> function){  this.iterable=iterable;  this.function=function;}  }
class C{  public void showFragment(int position,boolean reset,boolean allowingStateLoss){  this.mCurrentPosition=position;  FragmentTransaction transaction=mFragmentManager.beginTransaction();  int count=mAdapter.getCount();  for (int i=0; i < count; i++) {    if (position == i) {      if (reset) {        remove(position,transaction);        add(position,transaction);      } else {        show(i,transaction);      }    } else {      hide(i,transaction);    }  }  if (allowingStateLoss) {    transaction.commitAllowingStateLoss();  } else {    transaction.commit();  }}  }
class C{  public void testMinUnequal1(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.min(bNumber));}  }
class C{  public boolean checkDependencies(ModifyDNMsg msg){  final CSN csn=msg.getCSN();  final PendingChange change=getPendingChange(csn);  if (change == null) {    return false;  }  boolean hasDependencies=false;  final DN targetDN=change.getLDAPUpdateMsg().getDN();  for (  PendingChange pendingChange : activeAndDependentChanges) {    if (pendingChange.getCSN().isNewerThanOrEqualTo(csn)) {      break;    }    final LDAPUpdateMsg pendingMsg=pendingChange.getLDAPUpdateMsg();    if (pendingMsg instanceof DeleteMsg) {      if (msg.newDNIsEqual(pendingMsg.getDN())) {        hasDependencies=true;        addDependency(change);      }    } else     if (pendingMsg instanceof AddMsg) {      if (msg.newParentIsEqual(pendingMsg.getDN())) {        hasDependencies=true;        addDependency(change);      }      if (pendingMsg.getDN().equals(targetDN)) {        hasDependencies=true;        addDependency(change);      }    } else     if (pendingMsg instanceof ModifyDNMsg) {      if (msg.newDNIsEqual(pendingMsg.getDN())) {        hasDependencies=true;        addDependency(change);      }    }  }  return hasDependencies;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  Element newOne;  Node domesticNode;  NamedNodeMap domesticAttr;  Attr attrs;  String attrName;  Node appendedChild;  doc=(Document)load("staff",true);  docFragment=doc.createDocumentFragment();  newOne=doc.createElement("newElement");  newOne.setAttribute("newdomestic","Yes");  appendedChild=docFragment.appendChild(newOne);  domesticNode=docFragment.getFirstChild();  domesticAttr=domesticNode.getAttributes();  attrs=(Attr)domesticAttr.item(0);  attrName=attrs.getName();  assertEquals("attrCreateDocumentFragmentAssert","newdomestic",attrName);}  }
class C{  public boolean isCaptchaEnabled(){  return captchaEnabled;}  }
class C{  public void process(final Query query){  logger.trace("Processing query {}",query);  for (  Module module : modules) {    module.process(query);  }}  }
class C{  public Value checkAndCastAnnotationValues(Value value,LineCol lineCol) throws SyntaxException {  if (value instanceof IntValue || value instanceof ShortValue || value instanceof ByteValue|| value instanceof CharValue|| value instanceof BoolValue|| value instanceof LongValue|| value instanceof DoubleValue|| value instanceof FloatValue|| value instanceof SArrayValue|| value instanceof StringConstantValue|| value instanceof SAnno|| value instanceof Ins.GetClass|| value instanceof EnumValue) {    return value;  } else   if (value instanceof Ins.GetStatic) {    Ins.GetStatic gs=(Ins.GetStatic)value;    EnumValue enumValue=new EnumValue();    enumValue.setType(gs.field().declaringType());    enumValue.setEnumStr(gs.field().name());    return enumValue;  } else   if (value instanceof Ins.NewArray || value instanceof Ins.ANewArray) {    List<Value> theValues=value instanceof Ins.NewArray ? ((Ins.NewArray)value).initValues() : ((Ins.ANewArray)value).initValues();    SArrayValue arr=new SArrayValue();    arr.setDimension(1);    arr.setType((SArrayTypeDef)value.type());    List<Value> values=new ArrayList<>();    for (    Value v : theValues) {      values.add(checkAndCastAnnotationValues(v,lineCol));    }    arr.setValues(values.toArray(new Value[values.size()]));    return arr;  } else {    err.SyntaxException("invalid annotation field " + value,lineCol);    return null;  }}  }
class C{  public void testConnect_IllegalStateException() throws IOException {  assertFalse(this.channel1.isConnected());  this.channel1.connect(localAddr1);  assertTrue(this.channel1.isConnected());  try {    this.channel1.connect(localAddr1);    fail("Should throw IllegalStateException.");  } catch (  IllegalStateException e) {  }}  }
class C{  public void unregisterConnection(ConnectionWrapper conn) throws LdapException {  LDAPURL url=makeLDAPUrl(conn);  unRegisterAuth(url);  String key=makeKeyFromLDAPUrl(url);  connectionTable.remove(key);}  }
class C{  private static void addEnvironmentVariables(JsonSchema schema,Map<String,String> environmentVariables){  Map<String,JsonSchemaProperty> properties=schema.getProperties();  if (properties == null) {    properties=new HashMap<>();    schema.setProperties(properties);  }  Set<Map.Entry<String,String>> entries=environmentVariables.entrySet();  for (  Map.Entry<String,String> entry : entries) {    String name=entry.getKey();    String value=entry.getValue();    JsonSchemaProperty property=properties.get(name);    if (property == null) {      property=new JsonSchemaProperty();      properties.put(name,property);    }    property.setDefaultValue(value);  }}  }
class C{  public Object clone(){  IPv4Condition theClone=null;  try {    theClone=(IPv4Condition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  theClone.dnsList=(ArrayList)dnsList.clone();  theClone.ipList=(ArrayList)ipList.clone();  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public void testPBEKeySpec2(){  char[] password=new char[]{'1','2','3','4','5'};  byte[] salt=new byte[]{1,2,3,4,5};  int iterationCount=10;  int keyLength=10;  try {    PBEKeySpec pbeks=new PBEKeySpec(null,salt,iterationCount,keyLength);    assertTrue("An empty char[] should be used in case of null input " + "char array.",pbeks.getPassword().length == 0);  } catch (  IllegalArgumentException e) {    fail("Unexpected IllegalArgumentException was thrown.");  }catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }  try {    new PBEKeySpec(password,null,iterationCount,keyLength);    fail("A NullPointerException should be was thrown " + "in the case of null salt.");  } catch (  IllegalArgumentException e) {    fail("Unexpected IllegalArgumentException was thrown.");  }catch (  NullPointerException e) {  }  try {    new PBEKeySpec(password,new byte[0],iterationCount,keyLength);    fail("An IllegalArgumentException should be thrown " + "in the case of empty salt.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,-1,keyLength);    fail("An IllegalArgumentException should be thrown " + "in the case of negative iterationCount.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,iterationCount,-1);    fail("An IllegalArgumentException should be thrown " + "in the case of negative keyLength.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,0,keyLength);    fail("An IllegalArgumentException should be thrown " + "in the case of zero iterationCount.");  } catch (  IllegalArgumentException e) {  }  try {    new PBEKeySpec(password,salt,iterationCount,0);    fail("An IllegalArgumentException should be thrown " + "in the case of zero keyLength.");  } catch (  IllegalArgumentException e) {  }  PBEKeySpec pbeks=new PBEKeySpec(password,salt,iterationCount,keyLength);  password[0]++;  assertFalse("The change of password specified in the constructor " + "should not cause the change of internal array.",password[0] == pbeks.getPassword()[0]);  salt[0]++;  assertFalse("The change of salt specified in the constructor " + " should not cause the change of internal array.",salt[0] == pbeks.getSalt()[0]);}  }
class C{  public void addListener(final TimeoutEventListener listener){  final long timeout=listener.getTimeout();  if (timeout > 0) {    listeners.add(listener);synchronized (stateLock) {      pendingListenerMinDelay=Math.min(pendingListenerMinDelay,timeout);      stateLock.notifyAll();    }  }}  }
class C{  public <M extends Configuration>void registerAddListener(OptionalRelationDefinition<?,M> d,ServerManagedObjectAddListener<M> listener) throws ConfigException {  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d).parent();  ConfigAddListener adaptor=new ConfigAddListenerAdaptor<>(serverContext,path,d,listener);  registerAddListener(baseDN,adaptor);}  }
class C{  protected static Map mergeMaps(Map mapA,Map mapB){  if (mapA == null && mapB == null) {    return null;  }  if (mapA == null || mapA.isEmpty()) {    return mapB;  } else   if (mapB == null || mapB.isEmpty()) {    return mapA;  }  Map bigMap=((mapA.size() > mapB.size()) ? mapA : mapB);  Map smallMap=((mapA.size() <= mapB.size()) ? mapA : mapB);  Iterator itr=smallMap.keySet().iterator();  while (itr.hasNext()) {    String attrName=(String)itr.next();    Set values=(Set)bigMap.get(attrName);    if (values != null) {      values.addAll((Set)smallMap.get(attrName));    } else {      bigMap.put(attrName,(Set)smallMap.get(attrName));    }  }  return bigMap;}  }
class C{  public static int readInt16(DataInput di) throws IOException {  final byte[] buf={0x00,0x00};  di.readFully(buf,0,2);  final int i=ByteBuffer.wrap(buf).getShort();  return i;}  }
class C{  public static Entry decode(ByteSequenceReader entryBuffer) throws DirectoryException {  return decode(entryBuffer,DirectoryServer.getDefaultCompressedSchema());}  }
class C{  @Deprecated protected PdfFormXObject drawPushButtonAppearance(float width,float height,String text,PdfFont font,int fontSize){  return drawPushButtonAppearance(width,height,text,font,(float)fontSize);}  }
class C{  public boolean doAccessibleAction(int i){  if (i == 0 && isValid() == true) {    URL u=(URL)getAccessibleActionObject(i);    if (u != null) {      HyperlinkEvent linkEvent=new HyperlinkEvent(JEditorPane.this,HyperlinkEvent.EventType.ACTIVATED,u);      JEditorPane.this.fireHyperlinkUpdate(linkEvent);      return true;    }  }  return false;}  }
class C{  public void clearAccessibleSelection(){  int childCount=getAccessibleChildrenCount();  for (int i=0; i < childCount; i++) {    removeAccessibleSelection(i);  }}  }
class C{  public SMSReceivedEvent(Intent intent){  super(APPLICATION_NAME,EVENT_NAME,intent);}  }
class C{  @Inject public OpenAMResourceSetStore(@Assisted String realm,OAuth2UrisFactory oauth2UrisFactory,TokenIdGenerator idGenerator,@DataLayer(ConnectionType.RESOURCE_SETS) TokenDataStore delegate){  this.realm=realm;  this.oauth2UrisFactory=oauth2UrisFactory;  this.delegate=delegate;  this.idGenerator=idGenerator;}  }
class C{  public void testCertPathBuilder11() throws NoSuchAlgorithmException, NoSuchProviderException, CertPathBuilderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathBuilder[] certPB=createCPBs();  assertNotNull("CertPathBuilder objects were not created",certPB);  for (int i=0; i < certPB.length; i++) {    try {      certPB[i].build(null);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }  }}  }
class C{  public static <T extends Activity>BuilderImages<T> takeImages(T activity){  return new BuilderImages<T>(activity);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  NamedNodeMap addrAttr;  Node attrNode;  String attrName;  java.util.Collection attrList=new java.util.ArrayList();  java.util.Collection expected=new java.util.ArrayList();  expected.add("domestic");  expected.add("street");  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(2);  addrAttr=testAddr.getAttributes();  for (int indexN1005C=0; indexN1005C < addrAttr.getLength(); indexN1005C++) {    attrNode=(Node)addrAttr.item(indexN1005C);    attrName=attrNode.getNodeName();    attrList.add(attrName);  }  assertEquals("nodeElementNodeValueAssert1",expected,attrList);}  }
class C{  private static SuffixNode findSuffixNode(DN suffixDn,SuffixNode suffixNode) throws IllegalArgumentException {  if (suffixNode.getDN().equals(suffixDn)) {    return suffixNode;  }  int childCount=suffixNode.getChildCount();  if (childCount == 0) {    return null;  }  BasicNode child;  int i=0;  boolean found=false;  do {    child=(BasicNode)suffixNode.getChildAt(i);    if (child.getDN().equals(suffixDn)) {      found=true;    }    i++;  } while (i < childCount && !found);  if (!found) {    return null;  }  if (child instanceof SuffixNode) {    return (SuffixNode)child;  }  throw new IllegalArgumentException(suffixDn + " is not a suffix node");}  }
class C{  public static boolean isValidMethod(String method){  return StringUtils.equals(method,POST) || StringUtils.equals(method,HEAD) || StringUtils.equals(method,GET)|| StringUtils.equals(method,PUT)|| StringUtils.equals(method,DELETE)|| StringUtils.equals(method,TRACE)|| StringUtils.equals(method,OPTIONS)|| StringUtils.equals(method,CONNECT)|| StringUtils.equals(method,PATCH);}  }
class C{  public long sum(){  Cell[] as=cells;  Cell a;  long sum=base;  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       sum+=a.value;    }  }  return sum;}  }
class C{  public EnumEvalResult evaluate(InetAddress remoteAddr){  EnumEvalResult matched=EnumEvalResult.FALSE;  IPType ipType=IPType.IPv4;  byte[] addressBytes=remoteAddr.getAddress();  if (remoteAddr instanceof Inet6Address) {    ipType=IPType.IPv6;    Inet6Address addr6=(Inet6Address)remoteAddr;    addressBytes=addr6.getAddress();    if (addr6.isIPv4CompatibleAddress()) {      ipType=IPType.IPv4;    }  }  if (ipType != this.ipType) {    return EnumEvalResult.FALSE;  }  if (matchAddress(addressBytes)) {    matched=EnumEvalResult.TRUE;  }  return matched;}  }
class C{  private void updateOtherWindows(){  otherConfigs.clear();  java.util.List<TokenRange> otherRanges=getExternalArrowTargetRange();  if (otherRanges != null) {    for (    TokenRange range : otherRanges) {      boolean alreadyShowing=false;      for (      WindowConfiguration config : otherConfigs)       if (config.file == range.first.getFile())       alreadyShowing=true;      if (focusConfig != null && focusConfig.file == range.first.getFile())       alreadyShowing=true;      if (!alreadyShowing) {        WindowConfiguration other=new WindowConfiguration(range);        if (other.window != null)         otherConfigs.add(other);      }    }  }}  }
class C{  public boolean enabled(){  return this.enabled && !this.loading;}  }
class C{  public JKValidationException(String message,Throwable cause){  super(message,cause);}  }
class C{  private Socket createSocket() throws LDAPConnectionException {  ConnectException ce=null;  try {    for (    InetAddress inetAddress : InetAddress.getAllByName(hostName)) {      try {        return new Socket(inetAddress,portNumber);      } catch (      ConnectException ce2) {        if (ce == null) {          ce=ce2;        }      }    }  } catch (  UnknownHostException uhe) {    LocalizableMessage msg=INFO_RESULT_CLIENT_SIDE_CONNECT_ERROR.get();    throw new LDAPConnectionException(msg,CLIENT_SIDE_CONNECT_ERROR,null,uhe);  }catch (  Exception ex) {    logger.traceException(ex);    throw new LDAPConnectionException(LocalizableMessage.raw(ex.getMessage()),ex);  }  if (ce != null) {    LocalizableMessage msg=INFO_RESULT_CLIENT_SIDE_CONNECT_ERROR.get();    throw new LDAPConnectionException(msg,CLIENT_SIDE_CONNECT_ERROR,null,ce);  }  return null;}  }
class C{  public HyperlinkEvent(Object source,EventType type,URL u,String desc,Element sourceElement,InputEvent inputEvent){  super(source);  this.type=type;  this.u=u;  this.desc=desc;  this.sourceElement=sourceElement;  this.inputEvent=inputEvent;}  }
class C{  public static String format(String pattern,Long j,String l){  MessageFormat mf=new MessageFormat("");  mf.setLocale(getLocale(l));  mf.applyPattern(pattern);  String msg=format(mf,j);  return msg;}  }
class C{  public void updateSPAuthenticationContexts(String realm,String entityName,IDFFAuthContexts cxt) throws AMConsoleException {  List list=cxt.toSPAuthContextInfo();  String[] params={realm,entityName,"IDFF","SP-updateSPAuthenticationContexts"};  logEvent("ATTEMPT_MODIFY_ENTITY_DESCRIPTOR",params);  try {    IDFFMetaManager idffMetaMgr=getIDFFMetaManager();    EntityConfigElement entityConfig=idffMetaMgr.getEntityConfig(realm,entityName);    if (entityConfig == null) {      throw new AMConsoleException("invalid.entity.name");    }    SPDescriptorConfigElement spDecConfigElement=idffMetaMgr.getSPDescriptorConfig(realm,entityName);    if (spDecConfigElement == null) {      throw new AMConsoleException("invalid.config.element");    } else {      updateAttrInConfig(spDecConfigElement,ATTR_SP_AUTHN_CONTEXT_MAPPING,list);    }    idffMetaMgr.setEntityConfig(realm,entityConfig);    logEvent("SUCCEED_MODIFY_ENTITY_DESCRIPTOR",params);  } catch (  IDFFMetaException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"IDFF","SP-updateSPAuthenticationContexts",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }  return;}  }
class C{  public Evidence(Set assertionIDRef,Set assertion) throws SAMLException {  super(assertionIDRef,assertion);}  }
class C{  public Share removeShare(String shareId){  return shares.remove(shareId);}  }
class C{  public CompressionResponseStream(CompressionServletResponseWrapper responseWrapper,ServletOutputStream originalOutput){  super();  closed=false;  this.response=responseWrapper;  this.output=originalOutput;}  }
class C{  public static XMPMeta parse(InputStream in) throws XMPException {  return parse(in,null);}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  mScroller.fling(startX,startY,velocityX,velocityY,minX,maxX,minY,maxY);}  }
class C{  public MaterialBarcodeScannerBuilder withOnlyQRCodeScanning(){  mBarcodeFormats=Barcode.QR_CODE;  return this;}  }
class C{  private boolean _isRunning(JComponent c){  return (c == component && timer != null && timer.isRunning());}  }
class C{  private boolean containsBinary() throws Exception {  try (FileReader reader=new FileReader(ldif);BufferedReader buf=new BufferedReader(reader)){    String line=null;    boolean found=false;    while ((line=buf.readLine()) != null) {      if (line.startsWith("userCertificate;binary")) {        found=true;      }    }    return found;  } }  }
class C{  public IOError(Throwable cause){  super(cause);}  }
class C{  public static long toUnixTime(Calendar timestamp){  return timestamp.getTimeInMillis() / 1000L;}  }
class C{  public final static String readUTF(DataInput in) throws IOException {  int utflen=in.readUnsignedShort();  byte[] bytearr=null;  char[] chararr=null;  if (in instanceof DataInputStream) {    DataInputStream dis=(DataInputStream)in;    if (dis.bytearr.length < utflen) {      dis.bytearr=new byte[utflen * 2];      dis.chararr=new char[utflen * 2];    }    chararr=dis.chararr;    bytearr=dis.bytearr;  } else {    bytearr=new byte[utflen];    chararr=new char[utflen];  }  int c, char2, char3;  int count=0;  int chararr_count=0;  in.readFully(bytearr,0,utflen);  while (count < utflen) {    c=(int)bytearr[count] & 0xff;    if (c > 127)     break;    count++;    chararr[chararr_count++]=(char)c;  }  while (count < utflen) {    c=(int)bytearr[count] & 0xff;switch (c >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:      count++;    chararr[chararr_count++]=(char)c;  break;case 12:case 13:count+=2;if (count > utflen) throw new UTFDataFormatException("malformed input: partial character at end");char2=(int)bytearr[count - 1];if ((char2 & 0xC0) != 0x80) throw new UTFDataFormatException("malformed input around byte " + count);chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));break;case 14:count+=3;if (count > utflen) throw new UTFDataFormatException("malformed input: partial character at end");char2=(int)bytearr[count - 2];char3=(int)bytearr[count - 1];if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) throw new UTFDataFormatException("malformed input around byte " + (count - 1));chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));break;default :throw new UTFDataFormatException("malformed input around byte " + count);}}return new String(chararr,0,chararr_count);}  }
class C{  public boolean isCoalescing(){  return false;}  }
class C{  public void testSetPublicKey2() throws Exception {  Identity i2=new IdentityStub("testSetPublicKey2_2",IdentityScope.getSystemScope());  new PublicKeyStub("kkk","testSetPublicKey2",new byte[]{1,2,3,4,5});  try {    i2.setPublicKey(null);  } catch (  KeyManagementException ok) {  }}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  ServerSiteModel model=(ServerSiteModel)getModel();  String serverName=(String)getPageSessionAttribute(PG_ATTR_SERVER_NAME);  Object[] param={serverName};  ptModel.setPageTitleText(MessageFormat.format(model.getLocalizedString("page.title.server.clone"),param));  setDisplayFieldValue("helpName",MessageFormat.format(model.getLocalizedString("serverconfig.server.clone.help.name"),param));}  }
class C{  public static byte[] decryptKey(byte[] password,byte[] encryptedKey){  try {    Cipher c=Cipher.getInstance(ENCRYPT_KEY_ALGORITHM);    c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_KEY);    return c.doFinal(encryptedKey);  } catch (  Exception e) {    throw new IllegalStateException(ENCRYPT_KEY_ALGORITHM + " is not available",e);  }}  }
class C{  private String fetchTableName(String query){  for (  String tableName : mTableNames) {    if (query.contains(tableName)) {      return tableName;    }  }  return "";}  }
class C{  public JMXProviderException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public void insert_typecode(org.omg.CORBA.TypeCode value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_typecode",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_typecode(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Set<String> search(SSOToken token,String startDN,String filter,int numOfEntries,int timeLimit,boolean sortResults,boolean ascendingOrder) throws SMSException, SSOException {  try {    Object[] objs={token.getTokenID().toString(),startDN,filter,new Integer(numOfEntries),new Integer(timeLimit),Boolean.valueOf(sortResults),Boolean.valueOf(ascendingOrder)};    return ((Set<String>)client.send(client.encodeMessage("search2",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null));  } catch (  SSOException ssoe) {    throw ssoe;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObject:search -- Exception:",re);    throw (new SMSException(re,"sms-JAXRPC-error-in-searching"));  }}  }
class C{  public static void forceClearCache(ServletResponse resp){  HttpServletResponse response=(HttpServletResponse)resp;  response.setHeader("Cache-Control","no-cache, no-store, must-revalidate");  response.setHeader("Pragma","no-cache");  response.setDateHeader("Expires",0);}  }
class C{  public void auditAccessFailure(String message){  auditAccessFailure(null,message);}  }
class C{  @SuppressWarnings("unchecked") public void writeSQLXML(SQLXML x) throws SQLException {  attribs.add(x);}  }
class C{  public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){  if (orientation == JTabbedPane.LEFT) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBackground(context,g,y,x,h,w,transform);  } else   if (orientation == JTabbedPane.RIGHT) {    AffineTransform transform=new AffineTransform();    transform.rotate(Math.toRadians(90));    transform.translate(0,-(x + w));    paintBackground(context,g,y,0,h,w,transform);  } else   if (orientation == JTabbedPane.BOTTOM) {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(1,-1);    transform.translate(0,-h);    paintBackground(context,g,0,0,w,h,transform);  } else {    paintBackground(context,g,x,y,w,h,null);  }}  }
class C{  public boolean isDynamicProfileCreationEnabled(){  return dynamicProfileCreation;}  }
class C{  @Delete(operationDescription=@Operation(errors={@ApiError(code=500,description=CORE_TOKEN_RESOURCE + "error.unexpected.server.error." + DESCRIPTION)},description=CORE_TOKEN_RESOURCE + DELETE_DESCRIPTION)) public Promise<ResourceResponse,ResourceException> deleteInstance(Context serverContext,String tokenId,DeleteRequest deleteRequest){  String principal=PrincipalRestUtils.getPrincipalNameFromServerContext(serverContext);  try {    store.deleteAsync(tokenId);    Map<String,String> result=new HashMap<String,String>();    result.put(TOKEN_ID,tokenId);    ResourceResponse resource=newResourceResponse(tokenId,String.valueOf(currentTimeMillis()),new JsonValue(result));    debug("DELETE by {0}: Deleted token resource with ID: {1}",principal,tokenId);    return newResultPromise(resource);  } catch (  CoreTokenException e) {    error(e,"DELETE by {0}: Error deleting token resource with ID: {1}",principal,tokenId);    return generateException(e).asPromise();  }}  }
class C{  public void put(E e){  offer(e);}  }
class C{  static public void assertEquals(String expected,String actual){  assertEquals(null,expected,actual);}  }
class C{  public Object clone() throws CloneNotSupportedException {  FilterExprWalker clone=(FilterExprWalker)super.clone();  if (null != m_exprObj)   clone.m_exprObj=(XNodeSet)m_exprObj.clone();  return clone;}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);}  }
class C{  public static void warning(CommandManager mgr,String msg,Throwable t){  dumpToOutput(mgr,msg,t);  mgr.getDebugger().warning(msg,t);}  }
class C{  public static URL toURL(URI uri){  if (uri == null)   throw new NullPointerException("`uri' must not be null");  try {    return uri.toURL();  } catch (  MalformedURLException e) {    throw new IllegalArgumentException(uri + " is not a valid URL",e);  }}  }
class C{  public JTextArea(int rows,int columns){  this(null,null,rows,columns);}  }
class C{  public ProxySubject(org.w3c.dom.Element subjectElement) throws SAMLException {  int elementCount=0;  Element elt=(Element)subjectElement;  String eltName=elt.getLocalName();  if (eltName == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("ProxySubject: local name missing");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  if (!(eltName.equals("ProxySubject"))) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("ProxySubject: invalid root element");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("invalidElement"));  }  NodeList nl=subjectElement.getChildNodes();  int length=nl.getLength();  if (length == 0) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Subject: No sub elements found");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("emptyElement"));  }  for (int n=0; n < length; n++) {    Node child=(Node)nl.item(n);    if (child.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    String childName=child.getLocalName();    if (childName.equals("NameIdentifier")) {      setNameIdentifier(new NameIdentifier((Element)child));      elementCount++;    } else     if (childName.equals("SubjectConfirmation")) {      setSubjectConfirmation(new SubjectConfirmation((Element)child));      elementCount++;    } else {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("Subject: Invalid element " + "encountered.");      }      throw new SAMLRequesterException(SAMLUtils.bundle.getString("invalidElement"));    }  }  if (elementCount > 2) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Subject: more than allowed elements " + "passed");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("moreElement"));  }}  }
class C{  public static void logSearchRequest(SearchOperation searchOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logSearchRequest(searchOperation);  }}  }
class C{  EntryID(ByteString value){  this.value=value;  id=value.toLong();}  }
class C{  public AMAccessAuditEventBuilder component(Component value){  putComponent(jsonValue,value == null ? null : value.toString());  return this;}  }
class C{  public CellRendererPane(){  super();  setLayout(null);  setVisible(false);}  }
class C{  public short compareDocumentPosition(Node other) throws DOMException {  return 0;}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public static String workerAddress(String eventType,Job job){  return "vertx.kue.handler.workers." + eventType + "."+ job.getAddress_id();}  }
class C{  private static int checkMinorVersion(String minorVer) throws FSMsgException {  int minorVersion;  if (minorVer == null) {    throw new FSMsgException("nullMinorVersion",null);  }  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest.checkMinorVersion: " + "invalid MinorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION || minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    return minorVersion;  }  if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest.checkMinorVersion:" + " Minor Version of the AuthnRequest is too high.");    }    throw new FSMsgException("requestVersionTooHigh",null);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest.checkMinorVersion:" + " Minor Version of the AuthnRequest is too low.");    }    throw new FSMsgException("requestVersionTooLow",null);  }}  }
class C{  @Override public int compare(AbstractIndexDescriptor index1,AbstractIndexDescriptor index2){  int result;  IndexDescriptor i1=(IndexDescriptor)index1;  IndexDescriptor i2=(IndexDescriptor)index2;  int[] possibleResults={compareNames(i1,i2),compareEntryLimits(i1,i2),compareTypes(i1,i2),compareRebuildRequired(i1,i2)};  result=possibleResults[sortColumn];  if (result == 0) {    for (    int i : possibleResults) {      if (i != 0) {        result=i;        break;      }    }  }  if (!sortAscending) {    result=-result;  }  return result;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    try {      int offs=target.getCaretPosition();      int endOffs=Utilities.getRowEnd(target,offs);      if (select) {        target.moveCaretPosition(endOffs);      } else {        target.setCaretPosition(endOffs);      }    } catch (    BadLocationException bl) {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public void removeTTL(){  if (uriParms != null)   uriParms.delete(TTL);}  }
class C{  public void rowsRemoved(final TableModelEvent event){  fireTableChanged(event);}  }
class C{  public final void testToString01(){  CollectionCertStoreParameters cp=new CollectionCertStoreParameters();  String s=cp.toString();  assertNotNull(s);}  }
class C{  private void failOnlyForStrictEvaluation(Entry e){  try {    LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();    DirectoryServer.setSingleStructuralObjectClassPolicy(REJECT);    assertFalse(e.conformsToSchema(null,false,true,true,invalidReason),"Entry validation succeeded with REJECT policy");    DirectoryServer.setSingleStructuralObjectClassPolicy(WARN);    assertTrue(e.conformsToSchema(null,false,true,true,invalidReason),"Entry validation failed with WARN policy:  " + invalidReason);    DirectoryServer.setSingleStructuralObjectClassPolicy(ACCEPT);    assertTrue(e.conformsToSchema(null,false,true,true,invalidReason),"Entry validation failed with ACCEPT policy:  " + invalidReason);  }  finally {    DirectoryServer.setSingleStructuralObjectClassPolicy(REJECT);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorElement createAuthenticatorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorElementImpl();}  }
class C{  public boolean isForWindowsDesktopSSO(){  return (negoValue != null) ? negoValue.equalsIgnoreCase(HTTP_NEGOTIATE) : false;}  }
class C{  public XPathException(String message,ExpressionNode ex){  super(message);  this.setLocator(ex);  setStylesheetNode(getStylesheetNode(ex));}  }
class C{  public OrFileFilter(final List<IOFileFilter> fileFilters){  if (fileFilters == null) {    this.fileFilters=new ArrayList<IOFileFilter>();  } else {    this.fileFilters=new ArrayList<IOFileFilter>(fileFilters);  }}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  @Override public void flush(){}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  static void useGetEffectiveRightsRequestControl(Connection connection) throws LdapException {  if (isSupported(GetEffectiveRightsRequestControl.OID)) {    final String authDN="uid=kvaughan,ou=People,dc=example,dc=com";    final SearchRequest request=Requests.newSearchRequest("dc=example,dc=com",SearchScope.WHOLE_SUBTREE,"(uid=bjensen)","cn","aclRights","aclRightsInfo").addControl(GetEffectiveRightsRequestControl.newControl(true,authDN,"cn"));    final ConnectionEntryReader reader=connection.search(request);    try (final LDIFEntryWriter writer=new LDIFEntryWriter(System.out)){      while (reader.hasNext()) {        if (!reader.isReference()) {          final SearchResultEntry entry=reader.readEntry();          writer.writeEntry(entry);        }      }    } catch (    final LdapException e) {      System.err.println(e.getMessage());      System.exit(e.getResult().getResultCode().intValue());    }catch (    final SearchResultReferenceIOException e) {      System.err.println("Got search reference(s): " + e.getReference().getURIs());    }catch (    final IOException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    }  } else {    System.err.println("GetEffectiveRightsRequestControl not supported.");  }}  }
class C{  public Boolean isForceAuthn(){  return forceAuthn;}  }
class C{  public DragSource() throws HeadlessException {  if (GraphicsEnvironment.isHeadless()) {    throw new HeadlessException();  }}  }
class C{  public AMException(String msg,String errorCode,Object args[],UMSException ue){  try {    rootCause=(LdapException)ue.getRootCause();    ldapErrCode=Integer.toString(rootCause.getResult().getResultCode().intValue());    ldapErrorMsg=AMSDKBundle.getString(ldapErrCode);  } catch (  Exception e) {  }  if (ldapErrorMsg != null) {    localizedMsg=msg + "::" + ldapErrorMsg;  } else {    localizedMsg=msg;  }  this.errorCode=errorCode;  this.args=args;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  String namespaceURI="http://www.w3.org/DOM/Test/Level2";  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("/");  qualifiedNames.add("//");  qualifiedNames.add("\\");  qualifiedNames.add(";");  qualifiedNames.add("&");  qualifiedNames.add("*");  qualifiedNames.add("]]");  qualifiedNames.add(">");  qualifiedNames.add("<");  doc=(Document)load("staffNS",false);  for (int indexN1005A=0; indexN1005A < qualifiedNames.size(); indexN1005A++) {    qualifiedName=(String)qualifiedNames.get(indexN1005A);{      boolean success=false;      try {        attribute=doc.createAttributeNS(namespaceURI,qualifiedName);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("documentcreateattributeNS03",success);    }  }}  }
class C{  public static String hash(String p){  String str=null;  try {    byte[] bb=p.getBytes();    str=SaltedSHA512PasswordStorageScheme.encodeOffline(bb);  } catch (  Exception ex) {    Debug debug=Debug.getInstance(SetupConstants.DEBUG_NAME);    debug.error("EmbeddedOpenDS.hash failed : ex=" + ex);  }  return str;}  }
class C{  private void sendEvents(AMEvent dpEvent){synchronized (listeners) {    Iterator iterator=listeners.iterator();    while (iterator.hasNext()) {      AMEventListener listener=(AMEventListener)iterator.next();      try {switch (dpEvent.getEventType()) {case AMEvent.OBJECT_CHANGED:case AMEvent.OBJECT_EXPIRED:          listener.objectChanged(dpEvent);        break;case AMEvent.OBJECT_REMOVED:      listener.objectRemoved(dpEvent);    break;case AMEvent.OBJECT_RENAMED:  listener.objectRenamed(dpEvent);break;default :}} catch (Throwable t) {}}}}  }
class C{  private boolean acquireSharedLock(Backend<?> backend,String backendID,final ConfigChangeResult ccr){  try {    String lockFile=LockFileManager.getBackendLockFileName(backend);    StringBuilder failureReason=new StringBuilder();    if (!LockFileManager.acquireSharedLock(lockFile,failureReason)) {      cannotAcquireLock(backendID,ccr,failureReason);      return false;    }    return true;  } catch (  Exception e) {    logger.traceException(e);    cannotAcquireLock(backendID,ccr,stackTraceToSingleLineString(e));    return false;  }}  }
class C{  public synchronized void removeInvalidComponent(JComponent component){  RepaintManager delegate=getDelegate(component);  if (delegate != null) {    delegate.removeInvalidComponent(component);    return;  }  if (invalidComponents != null) {    int index=invalidComponents.indexOf(component);    if (index != -1) {      invalidComponents.remove(index);    }  }}  }
class C{  public SubstringReader(final String s){  Reject.ifNull(s);  source=s;  length=s.length();  pos=0;  mark=0;}  }
class C{  protected void halt(){}  }
class C{  public void check(final int api){}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  int expectedModCount=modCount;  s.defaultWriteObject();  s.writeInt(size);  for (int i=0; i < size; i++) {    s.writeObject(elementData[i]);  }  if (modCount != expectedModCount) {    throw new ConcurrentModificationException();  }}  }
class C{  @Override protected boolean isCompleted(){  final Set<String> actions=getActions();  if (actions.isEmpty()) {    return false;  }  final Entitlement mergedEntitlement=getRootE();  for (  String action : actions) {    final Boolean actionValue=mergedEntitlement.getActionValue(action);    if (actionValue == null || actionValue) {      return false;    }  }  return true;}  }
class C{  public StatusCodeImpl(Element element) throws SAML2Exception {  parseElement(element);}  }
class C{  public ZoneRulesException(String message){  super(message);}  }
class C{  @DataProvider(name="createDeleteData") public Object[][] createDeleteData(){  List<Attribute> entryAttrList=getEntryAttributes();  return new Object[][]{{"dc=com",entryAttrList,false},{"dc=delete,dc=an,dc=entry,dc=with,dc=a,dc=long dn",null,true}};}  }
class C{  public PdfCanvas(PdfPage page){  this(page,(page.getDocument().getReader() != null && page.getDocument().getWriter() != null && page.getContentStreamCount() > 0 && page.getLastContentStream().getLength() > 0) || (page.getRotation() != 0 && page.isIgnorePageRotationForContent()));}  }
class C{  private boolean isPointerNumChanged(MotionEvent event){  return event.getActionMasked() == MotionEvent.ACTION_DOWN || event.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN || event.getActionMasked() == MotionEvent.ACTION_UP || event.getActionMasked() == MotionEvent.ACTION_POINTER_UP || event.getActionMasked() == MotionEvent.ACTION_CANCEL;}  }
class C{  private ExpandRoomFreespaceComplete add_complete_room(ExpandRoomFreespaceIncomplete p_room){  ExpandRoomFreespaceComplete completed_room=(ExpandRoomFreespaceComplete)calculate_doors(p_room);  if (completed_room == null)   return null;  if (completed_room.get_shape().dimension() != PlaDimension.AREA)   return null;  complete_expansion_rooms.add(completed_room);  art_search_tree.insert(completed_room);  return completed_room;}  }
class C{  @Deprecated public Date(int year,int month,int date){  this(year,month,date,0,0,0);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public final TextImpl minimize(){  if (getLength() == 0) {    parent.removeChild(this);    return null;  }  Node previous=getPreviousSibling();  if (previous == null || previous.getNodeType() != Node.TEXT_NODE) {    return this;  }  TextImpl previousText=(TextImpl)previous;  previousText.buffer.append(buffer);  parent.removeChild(this);  return previousText;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public FactoryConfigurationError(java.lang.Exception e){  nested=e;}  }
class C{  private LogFileCursor(LogFile<K,V> logFile,Record<K,V> record,long filePosition) throws ChangelogException {  this.logFile=logFile;  this.reader=logFile.getReader();  this.currentRecord=record;  logFile.sharedLock.lock();  try {    reader.seekToPosition(filePosition);  }  finally {    logFile.sharedLock.unlock();  }}  }
class C{  public void test_initWithKey() throws Exception {  Cipher cipher=Cipher.getInstance(ALGORITHM_3DES + "/ECB/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES);  cipher=Cipher.getInstance("DES/CBC/NoPadding");  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES);    fail();  } catch (  InvalidKeyException expected) {  }}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  buffer.append(protocol);  if (parameters != null && !parameters.isEmpty()) {    buffer=buffer.append(SEMICOLON);    buffer=parameters.encode(buffer);  }  return buffer;}  }
class C{  public StatelessSection(int itemResourceId){  super();  this.itemResourceId=itemResourceId;}  }
class C{  public static Service create(java.net.URL wsdlDocumentLocation,QName serviceName,WebServiceFeature... features){  return new Service(wsdlDocumentLocation,serviceName,features);}  }
class C{  @Override public String toString(){  return "Expected{" + "value=" + this.value + '}';}  }
class C{  private int calculateSize(Object object){  if (object instanceof ICacheable) {    return ((ICacheable)object).getCachedSize();  } else   if (object instanceof Long) {    return CacheSizes.sizeOfLong();  } else   if (object instanceof Integer) {    return CacheSizes.sizeOfObject() + CacheSizes.sizeOfInt();  } else   if (object instanceof Boolean) {    return CacheSizes.sizeOfObject() + CacheSizes.sizeOfBoolean();  } else   if (object instanceof long[]) {    long[] array=(long[])object;    return CacheSizes.sizeOfObject() + array.length * CacheSizes.sizeOfLong();  } else {    int size=1;    try {      NullOutputStream out=new NullOutputStream();      @SuppressWarnings("resource") ObjectOutputStream outObj=new ObjectOutputStream(out);      outObj.writeObject(object);      size=out.size();    } catch (    IOException ioe) {    }    return size;  }}  }
class C{  private void validateTOTPParameters() throws AuthLoginException {  StringBuilder errorMessages=new StringBuilder();  if (StringUtils.isEmpty(loginTimeAttrName)) {    errorMessages.append("Login time attribute name is empty \n");  }  if (clockDriftCheckEnabled && StringUtils.isEmpty(observedClockDriftAttrName)) {    errorMessages.append("Observed time drift attribute name is empty \n");  }  if (totpTimeStep <= 0) {    errorMessages.append("Invalid TOTP time step interval: " + totpTimeStep + " \n");  }  if (totpStepsInWindow < 0) {    errorMessages.append("Invalid TOTP steps in window value: " + totpStepsInWindow);  }  if (errorMessages.length() > 0) {    debug.error("OATH.validateTOTPParameters(): Invalid settings : " + errorMessages.toString());    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }}  }
class C{  private void assertBlockedForLessThanTimeout(long startTime,int TIMEOUT){  long endTime=System.currentTimeMillis();  long callTime=endTime - startTime;  assertTrue(NO_TIMEOUT_RS_SLEEP_TIME <= callTime && callTime <= TIMEOUT);}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public void removeIndexSelectionListener(IndexSelectionListener listener){  backendIndexesPanel.removeIndexSelectionListener(listener);  backendVLVIndexesPanel.removeIndexSelectionListener(listener);}  }
class C{  public ID3v24Frame(ByteBuffer byteBuffer,String loggingFilename) throws InvalidFrameException, InvalidDataTypeException {  setLoggingFilename(loggingFilename);  read(byteBuffer);}  }
class C{  public static void deregisterSupportedExtension(String oid){  directoryServer.extendedOperationHandlers.remove(toLowerCase(oid));}  }
class C{  public void deregisterCallbackHandler(String id){  eventManager.removeObjectChangeListener(id);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.VATElement createVATElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.VATElementImpl();}  }
class C{  @Override public int read() throws IOException {  if (closed) {    return -1;  }  byte[] b=new byte[1];  if (read(b,0,1) == 0) {    throw new IOException();  }  return b[0];}  }
class C{  public synchronized void imageComplete(int status){  grabbing=false;switch (status) {default :case IMAGEERROR:    flags|=ImageObserver.ERROR | ImageObserver.ABORT;  break;case IMAGEABORTED:flags|=ImageObserver.ABORT;break;case STATICIMAGEDONE:flags|=ImageObserver.ALLBITS;break;case SINGLEFRAMEDONE:flags|=ImageObserver.FRAMEBITS;break;}producer.removeConsumer(this);notifyAll();}  }
class C{  public void printStackTrace(java.io.PrintStream ps){  if (rootCause != null) {    String superString=super.toString();synchronized (ps) {      ps.print(superString + (superString.endsWith(".") ? "" : ".") + "  Root exception is ");      rootCause.printStackTrace(ps);    }  } else {    super.printStackTrace(ps);  }}  }
class C{  protected void appendResult(Properties result,String path,byte[] digestedbyte){  result.setProperty(path,Utils.translateHashToString(digestedbyte));}  }
class C{  public SQLClientInfoException(String reason,String sqlState,Map<String,ClientInfoStatus> failedProperties){  super(reason,sqlState);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public static KeywordBindRule decode(String expr,EnumBindRuleType type) throws AciException {  String[] ipStrs=expr.split("\\,",-1);  List<PatternIP> patternIPList=new LinkedList<>();  for (  String ipStr : ipStrs) {    if (!ipRegEx.matcher(ipStr).matches()) {      throw new AciException(WARN_ACI_SYNTAX_INVALID_IP_EXPRESSION.get(expr));    }    patternIPList.add(PatternIP.decode(ipStr));  }  return new IP(patternIPList,type);}  }
