class C{  public static boolean isToshiba(){  return sBuildModel.startsWith("toshiba");}  }
class C{  protected void readEmbeddedFont(final PdfObject pdfFontDescriptor) throws Exception {  if (substituteFont != null) {    final byte[] bytes;    final BufferedInputStream from;    final FastByteArrayOutputStream to=new FastByteArrayOutputStream();    InputStream jarFile=null;    try {      if (substituteFont.startsWith("jar:") || substituteFont.startsWith("http:")) {        jarFile=loader.getResourceAsStream(substituteFont);      } else {        jarFile=loader.getResourceAsStream("file:///" + substituteFont);      }    } catch (    final Exception e) {      LogWriter.writeLog("3.Unable to open " + substituteFont + ' '+ e);    }catch (    final Error err) {      LogWriter.writeLog("3.Unable to open " + substituteFont + ' '+ err);    }    if (jarFile == null) {      final File file=new File(substituteFont);      final InputStream is=new FileInputStream(file);      final long length=file.length();      if (length > Integer.MAX_VALUE) {        System.out.println("Sorry! Your given file is too large.");        return;      }      bytes=new byte[(int)length];      int offset=0;      int numRead;      while (offset < bytes.length && (numRead=is.read(bytes,offset,bytes.length - offset)) >= 0) {        offset+=numRead;      }      if (offset < bytes.length) {        throw new IOException("Could not completely read file " + file.getName());      }      is.close();    } else {      from=new BufferedInputStream(jarFile);      final byte[] buffer=new byte[65535];      int bytes_read;      while ((bytes_read=from.read(buffer)) != -1) {        to.write(buffer,0,bytes_read);      }      from.close();      bytes=to.toByteArray();    }    try {      isFontSubstituted=true;      readType1FontFile(bytes);    } catch (    final Exception e) {      LogWriter.writeLog("[PDF]Substitute font=" + substituteFont + "Type 1 exception="+ e);    }  } else   if (pdfFontDescriptor != null) {    final PdfObject FontFile=pdfFontDescriptor.getDictionary(PdfDictionary.FontFile);    if (FontFile != null) {      try {        final byte[] stream=currentPdfFile.readStream(FontFile,true,true,false,false,false,FontFile.getCacheName(currentPdfFile.getObjectReader()));        if (stream != null) {          int length1=FontFile.getInt(PdfDictionary.Length1);          int length2=FontFile.getInt(PdfDictionary.Length2);          ByteArrayOutputStream bos=new ByteArrayOutputStream();          bos.write(stream,0,length1);          byte[] encData=new byte[length2];          System.arraycopy(stream,length1,encData,0,length2);          boolean isBinary=!(isHexDigit(stream[0]) && isHexDigit(stream[1]) && isHexDigit(stream[2])&& isHexDigit(stream[3]));          if (isBinary) {            encData=decryptBinary(encData,55665,4);          } else {            encData=decryptASCII(encData,55665);          }          bos.write(encData);          readType1FontFileNew(bos.toByteArray());        }      } catch (      final Exception e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }    } else {      final PdfObject FontFile3=pdfFontDescriptor.getDictionary(PdfDictionary.FontFile3);      if (FontFile3 != null) {        final byte[] stream=currentPdfFile.readStream(FontFile3,true,true,false,false,false,FontFile3.getCacheName(currentPdfFile.getObjectReader()));        if (stream != null) {          readType1CFontFile(stream,null);        }      }    }  }}  }
class C{  public void finish() throws IOException {  if (!wroteLastChunk) {    flushCache();    writeClosingChunk();    wroteLastChunk=true;  }}  }
class C{  public SymbolTableEntryInternal steFor_N4Method(){  return getSymbolTableEntryInternal("N4Method",true);}  }
class C{  public boolean isValidOffset(ZoneOffset offset){  return isGap() ? false : (getOffsetBefore().equals(offset) || getOffsetAfter().equals(offset));}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public boolean isUnitBox(){  return this.center.x == 0 && this.center.y == 0 && this.center.z == 0 && this.radius == Math.sqrt(3);}  }
class C{  public final boolean sendEmptyMessageAtTime(int what,long uptimeMillis){  return mExec.sendEmptyMessageAtTime(what,uptimeMillis);}  }
class C{  public void printStackTrace(java.io.PrintStream s){  printStackTrace(new java.io.PrintWriter(s));}  }
class C{  public static <V,E>Graph<V,E> unmodifiableGraph(Graph<V,E> graph){  return new UnmodifiableGraph<V,E>(graph);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new MotifProgressBarUI();}  }
class C{  protected void printAttributeSummary(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  String str="";  if (numericPredictor) {    str+=" numeric";  }  if (nominalPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" nominal";  }  if (stringPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" string";  }  if (datePredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" date";  }  if (relationalPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" relational";  }  str+=" predictors)";switch (classType) {case Attribute.NUMERIC:    str=" (numeric class," + str;  break;case Attribute.NOMINAL:str=" (nominal class," + str;break;case Attribute.STRING:str=" (string class," + str;break;case Attribute.DATE:str=" (date class," + str;break;case Attribute.RELATIONAL:str=" (relational class," + str;break;case NO_CLASS:str=" (no class," + str;break;}print(str);}  }
class C{  private static List<NetworkRoute> computeNetworkRoutesByTransitRouteStops(Network network,Map<Id<TransitRoute>,TransitRoute> transitRoutes,String[] listOfRoutes){  List<NetworkRoute> newNetworkRoutes=new ArrayList<NetworkRoute>();  PriorityQueue<Id<TransitRoute>> uncheckedTransitRoutes=new PriorityQueue<Id<TransitRoute>>();  for (int i=0; i < listOfRoutes.length; i++) {    uncheckedTransitRoutes.add(Id.create(listOfRoutes[i],TransitRoute.class));  }  List<TransitRouteStop> checkedTransitRouteStops=new ArrayList<TransitRouteStop>();  int maxStops=Integer.MIN_VALUE;  for (  TransitRoute transitRoute : transitRoutes.values()) {    int size=transitRoute.getStops().size();    if (size > maxStops)     maxStops=size;  }  int transitRoutesContaining=0;  TransitRoute currentTransitRoute=null;  while (checkedTransitRouteStops.size() < maxStops) {    List<Id<Link>> routeLinkIds=new ArrayList<Id<Link>>();    currentTransitRoute=transitRoutes.get(uncheckedTransitRoutes.remove());    transitRoutesContaining=1;    for (    TransitRouteStop stop : currentTransitRoute.getStops()) {      if (!checkedTransitRouteStops.contains(stop)) {        int containing=1;        for (        TransitRoute transitRoute : transitRoutes.values()) {          if (!transitRoute.getId().equals(currentTransitRoute.getId())) {            if (transitRoute.getStop(stop.getStopFacility()) != null) {              containing++;            }          }        }        if (transitRoutesContaining != containing) {          if (routeLinkIds.size() < 1) {            transitRoutesContaining=containing;          } else {            newNetworkRoutes.add(RouteUtils.createNetworkRoute(routeLinkIds,network));            transitRoutesContaining=containing;            for (int i=0; i < routeLinkIds.size() - 1; i++)             routeLinkIds.remove(i);          }        }        Id nextLinkId=stop.getStopFacility().getLinkId();        if (routeLinkIds.size() > 0) {          Id lastLinkId=routeLinkIds.get(routeLinkIds.size() - 1);          List<Id<Link>> linkIds=currentTransitRoute.getRoute().getLinkIds();          int lastLinkIndex=linkIds.contains(lastLinkId) ? linkIds.indexOf(lastLinkId) + 1 : 0;          int nextLinkIndex=linkIds.contains(nextLinkId) ? linkIds.indexOf(nextLinkId) : 0;          for (int i=lastLinkIndex; i < nextLinkIndex - 1; i++) {            if (!routeLinkIds.contains(linkIds.get(i)))             routeLinkIds.add(linkIds.get(i));          }        }        routeLinkIds.add(stop.getStopFacility().getLinkId());        checkedTransitRouteStops.add(stop);        if (currentTransitRoute.getStops().indexOf(stop) >= currentTransitRoute.getStops().size() - 1)         newNetworkRoutes.add(RouteUtils.createNetworkRoute(routeLinkIds,network));      }    }  }  return newNetworkRoutes;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"not");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not an not instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree operand=instruction.getOperands().get(0);  final TranslationResult result=Helpers.translateOperand(environment,offset,operand,true);  instructions.addAll(result.getInstructions());  offset=baseOffset + instructions.size();  final String operandRegister=result.getRegister();  final OperandSize size=result.getSize();  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(size));  final String xorResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset,size,operandRegister,size,truncateMask,size,xorResult));  Helpers.writeBack(environment,offset + 1,operand,xorResult,size,result.getAddress(),result.getType(),instructions);}  }
class C{  public String schemaName(){  return name();}  }
class C{  public static String encodeFromFile(String filename){  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0)     length+=numBytes;    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    System.err.println("Error encoding from file " + filename);  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public void parse(InputStream input,ElementHandler rootHandler,String rootNamespace,String rootElementName) throws IOException, ParseException {  InputSource is=new InputSource(input);  this.rootHandler=rootHandler;  this.rootNamespace=rootNamespace;  this.rootElementName=rootElementName;  parse(is);}  }
class C{  public ListQueuesResult listQueues(ListQueuesRequest listQueuesRequest) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.listQueues(listQueuesRequest);}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  @Override public int termKeyLength(){  return this.ram.termKeyLength();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return CHALLENGE;case 2:  return RESPONSE;default :return null;}}  }
class C{  private void mixWheel(int id){  WheelView wheel=getWheel(id);  wheel.scroll(-350 + (int)(Math.random() * 50),2000);}  }
class C{  public boolean isAuthenticated(){synchronized (mutex) {    ParseUser current=ParseUser.getCurrentUser();    return isLazy() || (getState().sessionToken() != null && current != null && getObjectId().equals(current.getObjectId()));  }}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public void resetLink(){  if (link != null) {    try {      link.cleanUp();      link.close();    } catch (    IOException ioe) {    }  }  link=null;}  }
class C{  public ListSelectionListener createListSelectionListener(JFileChooser fc){  return super.createListSelectionListener(fc);}  }
class C{  private DocTax[] loadTaxes(){  ArrayList<DocTax> list=new ArrayList<DocTax>();  String sql="SELECT it.C_Tax_ID, t.Name, t.Rate, it.TaxBaseAmt, it.TaxAmt, t.IsSalesTax " + "FROM C_Tax t, C_OrderTax it " + "WHERE t.C_Tax_ID=it.C_Tax_ID AND it.C_Order_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,getTrxName());    pstmt.setInt(1,get_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      int C_Tax_ID=rs.getInt(1);      String name=rs.getString(2);      BigDecimal rate=rs.getBigDecimal(3);      BigDecimal taxBaseAmt=rs.getBigDecimal(4);      BigDecimal amount=rs.getBigDecimal(5);      boolean salesTax="Y".equals(rs.getString(6));      DocTax taxLine=new DocTax(C_Tax_ID,name,rate,taxBaseAmt,amount,salesTax);      list.add(taxLine);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  DocTax[] tl=new DocTax[list.size()];  list.toArray(tl);  return tl;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends FeatureStructure>List<T> toList(FSArray array){  if (array == null) {    return new ArrayList<T>();  } else {    return (List<T>)Arrays.asList(array.toArray());  }}  }
class C{  protected void updateCrosshairValues(CrosshairState crosshairState,double x,double y,int domainAxisIndex,int rangeAxisIndex,double transX,double transY,PlotOrientation orientation){  ParamChecks.nullNotPermitted(orientation,"orientation");  if (crosshairState != null) {    if (this.plot.isDomainCrosshairLockedOnData()) {      if (this.plot.isRangeCrosshairLockedOnData()) {        crosshairState.updateCrosshairPoint(x,y,domainAxisIndex,rangeAxisIndex,transX,transY,orientation);      } else {        crosshairState.updateCrosshairX(x,domainAxisIndex);      }    } else {      if (this.plot.isRangeCrosshairLockedOnData()) {        crosshairState.updateCrosshairY(y,rangeAxisIndex);      }    }  }}  }
class C{  public static List<String> loadStringsFromFile(String pathToFile) throws IOException {  List<String> inputLines=Files.lines(Paths.get(pathToFile)).collect(Collectors.toList());  return inputLines;}  }
class C{  public static boolean truncatedEquals(final Date date1,final Date date2,final int field){  return truncatedCompareTo(date1,date2,field) == 0;}  }
class C{  public boolean isFiltering(){  return getVisibleSize() < getTotalSize();}  }
class C{  public GVTGlyphVector createGlyphVector(FontRenderContext frc,String str){  StringCharacterIterator sci=new StringCharacterIterator(str);  return new AWTGVTGlyphVector(awtFont.createGlyphVector(frc,str),this,scale,sci);}  }
class C{  public static Volume findAlreadyProvisionedTargetVolume(Volume volume,URI varrayToCheckURI,DbClient dbClient){  Volume alreadyProvisionedTarget=null;  if (volume.checkForRp() && volume.getRpTargets() != null && NullColumnValueGetter.isNotNullValue(volume.getPersonality()) && volume.getPersonality().equals(Volume.PersonalityTypes.SOURCE.name())) {    for (    String targetVolumeId : volume.getRpTargets()) {      Volume targetVolume=dbClient.queryObject(Volume.class,URI.create(targetVolumeId));      if (targetVolume.getVirtualArray().equals(varrayToCheckURI)) {        alreadyProvisionedTarget=targetVolume;        break;      }    }  }  return alreadyProvisionedTarget;}  }
class C{  public comment addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public void close(){  if (searcherHolder != null) {    searcherHolder.decref();    searcherHolder=null;  }}  }
class C{  public static VariableElement findFieldInType(TypeElement type,String name){  for (  VariableElement field : ElementFilter.fieldsIn(type.getEnclosedElements())) {    if (field.getSimpleName().toString().equals(name)) {      return field;    }  }  return null;}  }
class C{  protected NodeResult compareSimilarNodes(final XNode xControl,final XNode xTest,final OrderedMap nodeTracker){  Differences differences=new Differences();  boolean noSimilarNodes=true;  boolean unset=true;  Node control=xControl.getNode();  Node test=xTest.getNode();  XNode xSimilarNode=null;  String similarNodeXPath=null;  NodeResult bestfitNodeResult=new NodeResult(xControl,xTest,differences);  Node parent=control.getParentNode();  log("Parent XPath " + XMLUtil.generateXPath(xControl.getXPath()));  if (parent != null) {    List similarNodes=XMLUtil.getSimilarChildXNodes(parent,test,isIgnoringWhitespace());    Node similarNode=null;    NodeResult nr=null;    if (similarNodes.size() > 0) {      noSimilarNodes=false;    }    for (int i=0; i < similarNodes.size(); i++) {      xSimilarNode=(XNode)similarNodes.get(i);      similarNodeXPath=XMLUtil.generateXPath(xSimilarNode.getNode(),XMLUtil.generateXPath(xControl.getXPath()),_ignoringWhitespace,_includeNodeValueInXPath,false);      xSimilarNode.setXPath(similarNodeXPath);      if (test.getNodeType() == Node.ELEMENT_NODE) {        log("compareSimilarNodes: Test node is ELEMENT type");        nr=compareElements(xSimilarNode,xTest);      } else       if (test.getNodeType() == Node.ENTITY_REFERENCE_NODE) {        log("compareSimilarNodes: Test node is Entity Reference type");      } else       if (test.getNodeType() == Node.TEXT_NODE) {        log("compareSimilarNodes: Test node is TEXT type");        if ((StringUtil.isWhitespaceStr(test.getNodeValue())) && (isIgnoringWhitespace())) {          log("compareSimilarNodes: Ignoring WHITE space node");        } else {          nr=compareText(xSimilarNode,xTest);        }      } else       if (test.getNodeType() == Node.DOCUMENT_TYPE_NODE) {        log("compareSimilarNodes: Test node is DOCUMENT TYPE type");        nr=compareDocumentType(xSimilarNode,xTest);      } else       if (test.getNodeType() == Node.COMMENT_NODE) {        log("compareSimilarNodes: Test node is COMMENT type");        nr=compareComments(xSimilarNode,xTest);      } else       if (test.getNodeType() == Node.CDATA_SECTION_NODE) {        log("compareSimilarNodes: Test node is CDATA SECTION type");        nr=compareCDATA(xSimilarNode,xTest);      }      if (nr != null) {        if ((nr.isExactMatch()) || (nr.isUniqueAttrMatch())) {          bestfitNodeResult=nr;          Object ntObject=null;          boolean shouldBreak=false;          if ((ntObject=nodeTracker.getElement(similarNode)) == null) {            shouldBreak=true;          } else {            if (ntObject instanceof List) {              List l=(List)ntObject;              for (int j=0; j < l.size(); j++) {                if (((NodeResult)l.get(j)).isMatch()) {                  shouldBreak=true;                  break;                }              }            }            if ((ntObject instanceof NodeResult) && (!((NodeResult)ntObject).isMatch())) {              shouldBreak=true;            }          }          if (shouldBreak) {            break;          }        } else {          if (unset) {            bestfitNodeResult=nr;            unset=false;          } else {            if (nr.getDifferences().size() < bestfitNodeResult.getDifferences().size()) {              bestfitNodeResult=nr;            } else             if ((nr.getDifferences().size() == bestfitNodeResult.getDifferences().size()) && (nodeTracker.getElement(bestfitNodeResult.getControlNode().getNode()) != null)) {              bestfitNodeResult=nr;            }          }        }      }    }  }  if (noSimilarNodes) {    if ((isIgnoringWhitespace()) && (XMLUtil.isWhitespaceTextNode(test))) {    } else {      bestfitNodeResult.setControlNode(new XNode(null,null));      if (!_config.isCustomDifference()) {        differences.add("Added Node: Test Node " + xTest.getXPath());      } else {        Difference diff=new Difference(DifferenceConstants.NODE_NOT_FOUND,xControl,xTest);        differences.add(diff);      }    }  }  log("Start===================================================================");  log("compareSimilarNodes: BestFitNode is " + bestfitNodeResult.toString());  log("End===================================================================");  return bestfitNodeResult;}  }
class C{  private void scrollToComment(long commentId){  if (commentsAdapter == null) {    logger.warn("Could not scroll to comment, as commentsAdapter is null.");    return;  }  Optional<Integer> offset=adapter.getOffset(commentsAdapter);  if (offset.isPresent()) {    for (int idx=0; idx < commentsAdapter.getItemCount(); idx++) {      if (commentsAdapter.getItemId(idx) == commentId) {        content.scrollToPosition(offset.get() + idx);        break;      }    }  }  commentsAdapter.setSelectedCommentId(commentId);}  }
class C{  public static PrettyPrint indentWithSpaces(int number){  if (number < 0) {    throw new IllegalArgumentException("number is negative");  }  char[] chars=new char[number];  Arrays.fill(chars,' ');  return new PrettyPrint(chars);}  }
class C{  public void changeWebClip(List<String> users,boolean enable) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  entry.addProperty(Constants.ENABLE,String.valueOf(enable));  for (  String user : users) {    logger.log(Level.INFO,"Updating web clip settings ( enable: " + enable + " ) for user "+ user+ " ...");    updateSettings(user,entry,"webclip");    logger.log(Level.INFO,"Successfully updated web clip settings.");  }}  }
class C{  public static File dataDir(){  lock.readLock().lock();  try {    return data_dir;  }  finally {    lock.readLock().unlock();  }}  }
class C{  public ArffTableCellRenderer(Color missingColor,Color missingColorSelected,Color highlightColor,Color highlightColorSelected){  super();  this.missingColor=missingColor;  this.missingColorSelected=missingColorSelected;  this.highlightColor=highlightColor;  this.highlightColorSelected=highlightColorSelected;}  }
class C{  public boolean contains(Taxon taxon){  return taxa.contains(taxon);}  }
class C{  protected static SimplePostTool parseArgsAndInit(String[] args){  String urlStr=null;  try {    final String mode=System.getProperty("data",DEFAULT_DATA_MODE);    if (!DATA_MODES.contains(mode)) {      fatal("System Property 'data' is not valid for this tool: " + mode);    }    String params=System.getProperty("params","");    String host=System.getProperty("host",DEFAULT_POST_HOST);    String port=System.getProperty("port",DEFAULT_POST_PORT);    String core=System.getProperty("c");    urlStr=System.getProperty("url");    if (urlStr == null && core == null) {      fatal("Specifying either url or core/collection is mandatory.\n" + USAGE_STRING_SHORT);    }    if (urlStr == null) {      urlStr=String.format(Locale.ROOT,"http://%s:%s/solr/%s/update",host,port,core);    }    urlStr=SimplePostTool.appendParam(urlStr,params);    URL url=new URL(urlStr);    String user=null;    if (url.getUserInfo() != null && url.getUserInfo().trim().length() > 0) {      user=url.getUserInfo().split(":")[0];    } else     if (System.getProperty(BASIC_AUTH) != null) {      user=System.getProperty(BASIC_AUTH).trim().split(":")[0];    }    if (user != null)     info("Basic Authentication enabled, user=" + user);    boolean auto=isOn(System.getProperty("auto",DEFAULT_AUTO));    String type=System.getProperty("type");    String format=System.getProperty("format");    int recursive=0;    String r=System.getProperty("recursive",DEFAULT_RECURSIVE);    try {      recursive=Integer.parseInt(r);    } catch (    Exception e) {      if (isOn(r))       recursive=DATA_MODE_WEB.equals(mode) ? 1 : 999;    }    int delay=DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;    try {      delay=Integer.parseInt(System.getProperty("delay","" + delay));    } catch (    Exception e) {    }    OutputStream out=isOn(System.getProperty("out",DEFAULT_OUT)) ? System.out : null;    String fileTypes=System.getProperty("filetypes",DEFAULT_FILE_TYPES);    boolean commit=isOn(System.getProperty("commit",DEFAULT_COMMIT));    boolean optimize=isOn(System.getProperty("optimize",DEFAULT_OPTIMIZE));    return new SimplePostTool(mode,url,auto,type,format,recursive,delay,fileTypes,out,commit,optimize,args);  } catch (  MalformedURLException e) {    fatal("System Property 'url' is not a valid URL: " + urlStr);    return null;  }}  }
class C{  public void unsetModuleCode(){  this.moduleCode=null;}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_table != null)   m_table.editingStopped(new ChangeEvent(this));}  }
class C{  public void subdivide(double t,Linear l0,Linear l1){  if ((l0 == null) && (l1 == null))   return;  double x=p1.x + t * (p2.x - p1.x);  double y=p1.y + t * (p2.y - p1.y);  if (l0 != null) {    l0.p1.x=p1.x;    l0.p1.y=p1.y;    l0.p2.x=x;    l0.p2.y=y;  }  if (l1 != null) {    l1.p1.x=x;    l1.p1.y=y;    l1.p2.x=p2.x;    l1.p2.y=p2.y;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.224 -0500",hash_original_method="E2D1E713D6EFBD9B5EF73CE359255B39",hash_generated_method="1A53B31ADE594DF2C681C945212BEE94") public ProxyAuthenticateHeader createProxyAuthenticateHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("bad scheme arg");  ProxyAuthenticate p=new ProxyAuthenticate();  p.setScheme(scheme);  return p;}  }
class C{  protected boolean isUsableNetworkInterface(NetworkInterface iface) throws Exception {  if (!iface.isUp()) {    log.finer("Skipping network interface (down): " + iface.getDisplayName());    return false;  }  if (getInetAddresses(iface).size() == 0) {    log.finer("Skipping network interface without bound IP addresses: " + iface.getDisplayName());    return false;  }  if (iface.getName().toLowerCase(Locale.ENGLISH).startsWith("vmnet") || (iface.getDisplayName() != null && iface.getDisplayName().toLowerCase(Locale.ENGLISH).contains("vmnet"))) {    log.finer("Skipping network interface (VMWare): " + iface.getDisplayName());    return false;  }  if (iface.getName().toLowerCase(Locale.ENGLISH).startsWith("vnic")) {    log.finer("Skipping network interface (Parallels): " + iface.getDisplayName());    return false;  }  if (iface.getName().toLowerCase(Locale.ENGLISH).contains("virtual")) {    log.finer("Skipping network interface (named '*virtual*'): " + iface.getDisplayName());    return false;  }  if (iface.getName().toLowerCase(Locale.ENGLISH).startsWith("ppp")) {    log.finer("Skipping network interface (PPP): " + iface.getDisplayName());    return false;  }  if (iface.isLoopback()) {    log.finer("Skipping network interface (ignoring loopback): " + iface.getDisplayName());    return false;  }  if (useInterfaces.size() > 0 && !useInterfaces.contains(iface.getName())) {    log.finer("Skipping unwanted network interface (-D" + SYSTEM_PROPERTY_NET_IFACES + "): "+ iface.getName());    return false;  }  if (!iface.supportsMulticast())   log.warning("Network interface may not be multicast capable: " + iface.getDisplayName());  return true;}  }
class C{  public Tabs(){  this(-1);}  }
class C{  public void write(java.lang.String str,int off,int len) throws java.io.IOException {  return;}  }
class C{  public void afterCreate(EntryEvent oevt){  fail("Unexpected listener callback: afterCreate");}  }
class C{  public void cutTo(OsmElement e,int lat,int lon){  copyTo(e,lat,lon);  savedState=e.getState();  if (e instanceof Way) {    savedNdState=new HashMap<Node,Byte>();    for (    Node nd : ((Way)e).getNodes()) {      Log.d("CutTo","Saving state for " + nd.getOsmId());      savedNdState.put(nd,nd.getState());    }  }  mode=Mode.CUT;}  }
class C{  public void newArray(final Type type){  int typ;switch (type.getSort()) {case Type.BOOLEAN:    typ=Opcodes.T_BOOLEAN;  break;case Type.CHAR:typ=Opcodes.T_CHAR;break;case Type.BYTE:typ=Opcodes.T_BYTE;break;case Type.SHORT:typ=Opcodes.T_SHORT;break;case Type.INT:typ=Opcodes.T_INT;break;case Type.FLOAT:typ=Opcodes.T_FLOAT;break;case Type.LONG:typ=Opcodes.T_LONG;break;case Type.DOUBLE:typ=Opcodes.T_DOUBLE;break;default :typeInsn(Opcodes.ANEWARRAY,type);return;}mv.visitIntInsn(Opcodes.NEWARRAY,typ);}  }
class C{  private AppliedMigration createAppliedSchemaMigration(){  return new AppliedMigration(0,0,MigrationVersion.fromVersion(Integer.toString(0)),"<< Schema Creation >>",MigrationType.SCHEMA,"x",null,new Date(),"sa",0,true);}  }
class C{  public PatriciaSET(){  head=new Node("",0);  head.left=head;  head.right=head;  count=0;}  }
class C{  public ServiceLocatorImpl(final Map<String,InstantiationStrategy> protocolStrategyMap){  this.protocolStrategyMap=protocolStrategyMap;}  }
class C{  public String namespace(){  return theNamespace;}  }
class C{  public double cdf(double x){  return Probability.gamma(alpha,lambda,x);}  }
class C{  @HLEFunction(nid=0x78A1A796,version=150) public boolean scePowerIsSuspendRequired(){  boolean isSuspendRequired=Battery.getCurrentPowerPercent() <= Battery.getForceSuspendPercent();  if (log.isDebugEnabled()) {    log.debug(String.format("scePowerIsSuspendRequired returning %b",isSuspendRequired));  }  return isSuspendRequired;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){switch (requestCode) {case REQUEST_STORAGE_WRITE_ACCESS_PERMISSION:    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {      saveCroppedImage();    }  break;default :super.onRequestPermissionsResult(requestCode,permissions,grantResults);}}  }
class C{  public T caseTraceBeginRunCycle(TraceBeginRunCycle object){  return null;}  }
class C{  public static String formatMonthYear(Context context,Time time){  int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_NO_MONTH_DAY | DateUtils.FORMAT_SHOW_YEAR;  long millis=time.toMillis(true);  return formatDateRange(context,millis,millis,flags);}  }
class C{  public static PublicKeyStore convert(PGPPublicKeyRing pgpKeyRing) throws IOException {  try {    PGPPublicKey pgpKey=PGPKeyUtil.readPublicKey(pgpKeyRing);    if (pgpKey != null) {      String fingerprint=new String(Hex.encodeHex(pgpKey.getFingerprint(),false));      PublicKeyStore pk=new PublicKeyStoreEntity();      pk.setFingerprint(fingerprint);      pk.setKeyId(PGPKeyUtil.getKeyId(fingerprint));      pk.setShortKeyId(PGPKeyUtil.getShortKeyId(fingerprint));      pk.setKeyData(pgpKeyRing.getEncoded());      return pk;    } else {      return null;    }  } catch (  Exception ex) {    return null;  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:37.462 -0500",hash_original_method="E756AFD9567E2119FB96458DFE00C6A9",hash_generated_method="E756AFD9567E2119FB96458DFE00C6A9") void onStopTrackingTouch(){  mIsDragging=false;}  }
class C{  public Class heapClass(){  Class c;  if ((c=heapClass) != null)   return c;synchronized (this) {    if ((c=heapClass) != null)     return c;    heapClass=c=createHeapClass();    return c;  }}  }
class C{  protected EditorKit createDefaultEditorKit(){  return new PlainEditorKit();}  }
class C{  @Override public void onSurfaceCreated(EGLConfig config){  Log.i(TAG,"onSurfaceCreated");  screen=new VNCScreen(engine,this);  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean("pref_DisableDist",false)) {    getCardboardView().setDistortionCorrectionEnabled(false);  }  screen.setOnVideoSizeChangeListener(this);  screen.setCurveEnabled(mCurvedScreen);  screen.setMagnifyEnabled(mMagnify);  screen.setViewerMode(mExtraViewerMode);  screen.initGeometry(ratioToDegrees(16f / 9));  screen.setupPosition(mScreenSize,mScreenHeight,-mScreenDistance);  if (!screen.initVnc(mExtraHost,mExtraUsername,mExtraPassword,mExtraColorMode,this)) {    finish();  }  screen.setFixedModel();  screen.setupShaders();  cameraPreview.init();  cameraPreview.setupShaders();  float cameraSize=PreferenceManager.getDefaultSharedPreferences(this).getInt("pref_previewSize",100) / 100.0f;  Matrix.setIdentityM(cameraPreview.model,0);  Matrix.translateM(cameraPreview.model,0,0,0,-mScreenDistance * 2);  Matrix.scaleM(cameraPreview.model,0,cameraSize * cameraPreview.getRatio(),cameraSize,1);  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inScaled=false;  final Bitmap aimBitmap=BitmapFactory.decodeResource(getResources(),R.drawable.whitecircle,options);  aimPoint.init();  aimPoint.addTexture(aimBitmap);  aimPoint.setupShaders();  Matrix.setIdentityM(aimPoint.model,0);  float aimSize=mScreenSize * .05f;  aimPoint.scale(aimSize,aimSize,1);  aimPoint.translate(0,0,-1.5f);  aimPoint.setAlpha(0);  if (prefShowEnv) {    bgEnv.setupShaders();  }  final Bitmap homeBitmap=BitmapFactory.decodeResource(getResources(),R.drawable.home,options);  exitButton.init();  exitButton.addTexture(homeBitmap);  exitButton.setupShaders();  magnifyButton.init();  final Bitmap magnifyBitmap=BitmapFactory.decodeResource(getResources(),R.drawable.zoom_in,options);  magnifyButton.addTexture(magnifyBitmap);  magnifyButton.setupShaders();  screenModeButton.init();  final Bitmap curveOnBitmap=BitmapFactory.decodeResource(getResources(),R.drawable.curve_on,options);  final Bitmap curveOffBitmap=BitmapFactory.decodeResource(getResources(),R.drawable.curve_off,options);  screenModeButton.addTexture(curveOffBitmap);  screenModeButton.addTexture(curveOnBitmap);  screenModeButton.setupShaders();  if (mCurvedScreen) {    screenModeButton.setInitState(0);  } else {    screenModeButton.setInitState(1);  }  setupUI(1.5f);  GLES20.glDisable(GLES20.GL_DEPTH_TEST);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  GLES20.glEnable(GLES20.GL_BLEND);  screen.pitchLimit=(float)Math.atan2(mScreenSize,mScreenDistance);  screen.yawLimit=(float)Math.atan2(mScreenSize,mScreenDistance);  Engine.checkGLError("onSurfaceCreated");}  }
class C{  public static <X,Y>Collection<Y> transform(Collection<? extends X> c,IgniteClosure<? super X,Y> f){  A.notNull(c,"c",f,"f");  Collection<Y> d=new ArrayList<>(c.size());  for (  X x : c)   d.add(f.apply(x));  return d;}  }
class C{  private void computeSubClusterSplit(final int[][] subDesignation,int originalCluster,List<DataPoint> listOfDataPointsInCluster,DataSet fullDataSet,int[] fullDesignations,final int[][] originalPositions,final double[] splitEvaluation,PriorityQueue<Integer> clusterToSplit,ExecutorService threadpool){  subDesignation[originalCluster]=new int[listOfDataPointsInCluster.size()];  int pos=0;  for (int i=0; i < fullDataSet.getSampleSize(); i++) {    if (fullDesignations[i] != originalCluster)     continue;    originalPositions[originalCluster][pos++]=i;  }  SimpleDataSet dpSubC1DataSet=new SimpleDataSet(listOfDataPointsInCluster);  try {    if (threadpool == null)     baseClusterer.cluster(dpSubC1DataSet,2,subDesignation[originalCluster]); else     baseClusterer.cluster(dpSubC1DataSet,2,threadpool,subDesignation[originalCluster]);    splitEvaluation[originalCluster]=clusterEvaluation.evaluate(subDesignation[originalCluster],dpSubC1DataSet);    clusterToSplit.add(originalCluster);  } catch (  ClusterFailureException ex) {    splitEvaluation[originalCluster]=Double.POSITIVE_INFINITY;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void initialError(String s){  String er="STARTUP ERROR:\n" + s;  System.err.println(er);  exitWithError(null,er,false);}  }
class C{  protected void initialNativeCheck() throws UnsatisfiedLinkError {}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TCLASS__EXTERNAL:    setExternal((Boolean)newValue);  return;case TypesPackage.TCLASS__DECLARED_ABSTRACT:setDeclaredAbstract((Boolean)newValue);return;case TypesPackage.TCLASS__DECLARED_N4JS:setDeclaredN4JS((Boolean)newValue);return;case TypesPackage.TCLASS__DECLARED_FINAL:setDeclaredFinal((Boolean)newValue);return;case TypesPackage.TCLASS__DECLARED_POLYFILL:setDeclaredPolyfill((Boolean)newValue);return;case TypesPackage.TCLASS__DECLARED_STATIC_POLYFILL:setDeclaredStaticPolyfill((Boolean)newValue);return;case TypesPackage.TCLASS__OBSERVABLE:setObservable((Boolean)newValue);return;case TypesPackage.TCLASS__SUPER_CLASS_REF:setSuperClassRef((ParameterizedTypeRef)newValue);return;case TypesPackage.TCLASS__IMPLEMENTED_INTERFACE_REFS:getImplementedInterfaceRefs().clear();getImplementedInterfaceRefs().addAll((Collection<? extends ParameterizedTypeRef>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.783 -0500",hash_original_method="F65E96A775698E2C256BB1E903F5D8A6",hash_generated_method="2D4827908F7D1AE19B6B75D4111BE4B4") public String(){}  }
class C{  public void unloadImages(){  int n=mImages.size();  for (int i=0; i < n; i++)   mImages.get(i).unload();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.170 -0500",hash_original_method="F6C04E9988D3236CD1A288419E980857",hash_generated_method="7612AE10D13E81EDBA912B57B2D15B6D") public void translateCanvas(Canvas canvas){  if (applicationScale == 1.5f) {    final float tinyOffset=2.0f / (3 * 255);    canvas.translate(tinyOffset,tinyOffset);  }  canvas.scale(applicationScale,applicationScale);}  }
class C{  public static void clearAll(){  unscopedCache.clear();  scopedCache.clear();}  }
class C{  public void readExif(InputStream inStream) throws IOException {  if (inStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  ExifData d=null;  try {    d=new ExifReader(this).read(inStream);  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }  mData=d;}  }
class C{  @Override public int compareTo(WorldBlockIndex o){  if (o.dimension < dimension) {    return 1;  } else   if (o.dimension > dimension) {    return -1;  } else   if (o.x < x) {    return 1;  } else   if (o.x > x) {    return -1;  } else   if (o.z < z) {    return 1;  } else   if (o.z > z) {    return -1;  } else   if (o.y < y) {    return 1;  } else   if (o.y > y) {    return -1;  } else {    return 0;  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void sendServer(String cmd){  serverOutput.print(cmd);  if (debug) {    System.out.print("Sending: " + cmd);  }}  }
class C{  public byte loadByte(Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return (byte)0;}  }
class C{  public SpdyStream newStream(List<String> requestHeaders,boolean out,boolean in) throws IOException {  boolean outFinished=!out;  boolean inFinished=!in;  int associatedStreamId=0;  int priority=0;  int slot=0;  SpdyStream stream;  int streamId;synchronized (frameWriter) {synchronized (this) {      if (shutdown) {        throw new IOException("shutdown");      }      streamId=nextStreamId;      nextStreamId+=2;      stream=new SpdyStream(streamId,this,outFinished,inFinished,priority,requestHeaders,settings);      if (stream.isOpen()) {        streams.put(streamId,stream);        setIdle(false);      }    }    frameWriter.synStream(outFinished,inFinished,streamId,associatedStreamId,priority,slot,requestHeaders);  }  return stream;}  }
class C{  protected boolean isCorrelated(CorrelationIdentifier cid){  for (  CorrelationIdentifier id : correlationIds) {    if (id.equals(cid)) {      return true;    }  }  return false;}  }
class C{  private Base64(){}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  static int mergePolicyMapping(int policyMapping,X509CertImpl currCert) throws CertPathValidatorException {  if ((policyMapping > 0) && !X509CertImpl.isSelfIssued(currCert)) {    policyMapping--;  }  try {    PolicyConstraintsExtension polConstExt=currCert.getPolicyConstraintsExtension();    if (polConstExt == null)     return policyMapping;    int inhibit=polConstExt.get(PolicyConstraintsExtension.INHIBIT).intValue();    if (debug != null)     debug.println("PolicyChecker.mergePolicyMapping() " + "inhibit Index from cert = " + inhibit);    if (inhibit != -1) {      if ((policyMapping == -1) || (inhibit < policyMapping)) {        policyMapping=inhibit;      }    }  } catch (  IOException e) {    if (debug != null) {      debug.println("PolicyChecker.mergePolicyMapping " + "unexpected exception");      e.printStackTrace();    }    throw new CertPathValidatorException(e);  }  return policyMapping;}  }
class C{  default PBagX<T> toPBagX(){  return PBagX.fromCollection(toList());}  }
class C{  public static LinkedHashMap<Integer,String> mix(final ArrayList<Map.Entry<String,String>> text,final int maxlength){  Map<Integer,Map<Integer,String>> a=new TreeMap<>();  for (int i=0; i < text.size(); i++) {    for (int x=1; x <= Math.min(text.size() - i,maxlength); x++) {      StringBuilder o=new StringBuilder(10 * x);      StringBuilder l=new StringBuilder(10 * x);      for (int j=0; j < x; j++) {        Map.Entry<String,String> word=text.get(i + j);        if (j != 0) {          l.append(' ');          o.append(' ');        }        l.append(word.getKey());        o.append(word.getValue());      }      Map<Integer,String> m=a.get(-x);      if (m == null) {        m=new HashMap<>();        a.put(-x,m);      }      m.put(l.toString().hashCode(),o.toString());    }  }  LinkedHashMap<Integer,String> r=new LinkedHashMap<>();  for (  Map<Integer,String> m : a.values())   r.putAll(m);  return r;}  }
class C{  public boolean hasFailedPermanently(Jobs jobs){  return StepExecutionState.STEP_EXECUTION_FAILED == getState() && haveFinished(jobs);}  }
class C{  private static File toJarWithClasspath(Iterable<File> files){  return Errors.rethrow().get(null);}  }
class C{  public void causeSomeChaos() throws Exception {  if (chaosRandom.nextBoolean()) {    if (!deadPool.isEmpty()) {      int index=chaosRandom.nextInt(deadPool.size());      JettySolrRunner jetty=deadPool.get(index).jetty;      if (jetty.isStopped() && !ChaosMonkey.start(jetty)) {        return;      }      deadPool.remove(index);      starts.incrementAndGet();      return;    }  }  int rnd=chaosRandom.nextInt(10);  if (expireSessions && rnd < EXPIRE_PERCENT) {    expireRandomSession();  }  if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {    randomConnectionLoss();  }  CloudJettyRunner cjetty;  if (chaosRandom.nextBoolean()) {    cjetty=stopRandomShard();  } else {    cjetty=killRandomShard();  }  if (cjetty == null) {  } else {    deadPool.add(cjetty);  }}  }
class C{  public BigDecimal calculateTax(BigDecimal amount,boolean taxIncluded,int scale){  if (isZeroTax())   return Env.ZERO;  BigDecimal multiplier=getRate().divide(ONEHUNDRED,12,BigDecimal.ROUND_HALF_UP);  BigDecimal tax=null;  if (!taxIncluded) {    tax=amount.multiply(multiplier);  } else {    multiplier=multiplier.add(Env.ONE);    BigDecimal base=amount.divide(multiplier,12,BigDecimal.ROUND_HALF_UP);    tax=amount.subtract(base);  }  BigDecimal finalTax=tax.setScale(scale,BigDecimal.ROUND_HALF_UP);  log.fine("calculateTax " + amount + " (incl="+ taxIncluded+ ",mult="+ multiplier+ ",scale="+ scale+ ") = "+ finalTax+ " ["+ tax+ "]");  return finalTax;}  }
class C{  public boolean bool(XPathContext xctxt,int contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  xctxt.pushNamespaceContext(namespaceContext);  xctxt.pushCurrentNodeAndExpression(contextNode,contextNode);  try {    return m_mainExp.bool(xctxt);  } catch (  TransformerException te) {    te.setLocator(this.getLocator());    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.error(te);    } else     throw te;  }catch (  Exception e) {    while (e instanceof org.apache.xml.utils.WrappedRuntimeException) {      e=((org.apache.xml.utils.WrappedRuntimeException)e).getException();    }    String msg=e.getMessage();    if (msg == null || msg.length() == 0) {      msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);    }    TransformerException te=new TransformerException(msg,getLocator(),e);    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.fatalError(te);    } else     throw te;  } finally {    xctxt.popNamespaceContext();    xctxt.popCurrentNodeAndExpression();  }  return false;}  }
class C{  public static TaskExecution createAndStoreTaskExecutionNoParams(TaskRepository taskRepository){  TaskExecution expectedTaskExecution=TestVerifierUtils.createSampleTaskExecutionNoArg();  expectedTaskExecution=taskRepository.createTaskExecution(expectedTaskExecution.getTaskName(),expectedTaskExecution.getStartTime(),expectedTaskExecution.getArguments(),expectedTaskExecution.getExternalExecutionId());  return expectedTaskExecution;}  }
class C{  protected String toString(AbstractMatrix2D matrix){  return this.toString((DoubleMatrix2D)matrix);}  }
class C{  private Object readResolve(){  return ToStringStyle.SHORT_PREFIX_STYLE;}  }
class C{  public void unregisterKeyboardAction(KeyStroke aKeyStroke){  ActionMap am=getActionMap(false);  for (int counter=0; counter < 3; counter++) {    InputMap km=getInputMap(counter,false);    if (km != null) {      Object actionID=km.get(aKeyStroke);      if (am != null && actionID != null) {        am.remove(actionID);      }      km.remove(aKeyStroke);    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  private HashMap<String,List<StoragePort>> discoverVdmPorts(StorageSystem system,Set<StorageHADomain> movers) throws VNXFileCollectionException, VNXException, IOException {  HashMap<String,List<StoragePort>> storagePorts=new HashMap<String,List<StoragePort>>();  List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();  List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();  _logger.info("Start storage port discovery for storage system {}",system.getId());  HashMap<String,VNXDataMoverIntf> vdmIntMap=new HashMap();  List<VirtualNAS> modifiedServers=new ArrayList<VirtualNAS>();  List<VNXVdm> vdms=getVdmPortGroups(system);  List<VNXDataMoverIntf> vdmIntfs=getVdmPorts(system,vdms);  for (  VNXDataMoverIntf intf : vdmIntfs) {    _logger.info("getVdmPorts Adding {} : {}",intf.getName(),intf.getIpAddress());    vdmIntMap.put(intf.getName(),intf);  }  _logger.info("Number VDM mover interfaces found: {}",vdmIntfs.size());  for (  VNXVdm vdm : vdms) {    List<String> vNasStoragePorts=new ArrayList<String>();    for (    String vdmIF : vdm.getInterfaces()) {      VNXDataMoverIntf intf=vdmIntMap.get(vdmIF);      StoragePort port=null;      StorageHADomain matchingHADomain=getMatchingMoverByName(movers,vdm.getVdmName());      if (null == matchingHADomain) {        continue;      }      String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,intf.getIpAddress(),NativeGUIDGenerator.PORT);      port=findExistingPort(portNativeGuid);      if (port == null) {        port=new StoragePort();        port.setId(URIUtil.createId(StoragePort.class));        port.setLabel(portNativeGuid);        port.setTransportType("IP");        port.setNativeGuid(portNativeGuid);        port.setStorageDevice(system.getId());        port.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());        port.setPortName(intf.getName());        port.setPortNetworkId(intf.getIpAddress());        port.setPortGroup(vdm.getVdmId());        port.setStorageHADomain(matchingHADomain.getId());        _logger.info("Creating new storage port using NativeGuid : {} name : {}, IP : {}",new Object[]{portNativeGuid,intf.getName(),intf.getIpAddress(),intf.getDataMoverId(),vdm.getVdmId(),port.getPortName(),port.getPortGroup()});        newStoragePorts.add(port);      } else {        port.setStorageHADomain(matchingHADomain.getId());        port.setPortGroup(vdm.getVdmId());        existingStoragePorts.add(port);      }      port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      port.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());      vNasStoragePorts.add(port.getId().toString());    }    VirtualNAS vNas=findvNasByNativeId(system,vdm.getVdmId());    if (vNas != null) {      vNas.getStoragePorts().clear();      vNas.getStoragePorts().addAll(vNasStoragePorts);      modifiedServers.add(vNas);    }  }  if (modifiedServers != null && !modifiedServers.isEmpty()) {    _logger.info("Modified VirtualNAS servers size {}",modifiedServers.size());    _dbClient.persistObject(modifiedServers);  }  _logger.info("Storage port discovery for storage system {} complete",system.getId());  for (  StoragePort newPort : newStoragePorts) {    _logger.debug("New Storage Port : {} : {}",newPort.getNativeGuid(),newPort.getPortName() + ":" + newPort.getId());  }  for (  StoragePort port : existingStoragePorts) {    _logger.debug("Old Storage Port : {} : {}",port.getNativeGuid(),port.getPortName() + ":" + port.getId());  }  storagePorts.put(NEW,newStoragePorts);  storagePorts.put(EXISTING,existingStoragePorts);  return storagePorts;}  }
class C{  public DragSortController(DragSortListView dslv,int dragHandleId,int dragInitMode,int removeMode,int clickRemoveId,int flingHandleId){  super(dslv);  mDslv=dslv;  mDetector=new GestureDetector(dslv.getContext(),this);  mFlingRemoveDetector=new GestureDetector(dslv.getContext(),mFlingRemoveListener);  mFlingRemoveDetector.setIsLongpressEnabled(false);  mTouchSlop=ViewConfiguration.get(dslv.getContext()).getScaledTouchSlop();  mDragHandleId=dragHandleId;  mClickRemoveId=clickRemoveId;  mFlingHandleId=flingHandleId;  setRemoveMode(removeMode);  setDragInitMode(dragInitMode);}  }
class C{  public Composer accelerationY(float accelerationY){  mAccelerationY=accelerationY;  return this;}  }
class C{  static <T>T[] arraysCopyOf(T[] original,int newLength){  T[] copy=newArray(original,newLength);  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public boolean isFinal(){synchronized (statemachine) {    return statemachine.isFinal();  }}  }
class C{  public Type pop(){  if (top < 1)   throw new IndexOutOfBoundsException("Stack is empty");  return stack[--top];}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.BINARY_LOGICAL_EXPRESSION__LHS:    setLhs((Expression)null);  return;case N4JSPackage.BINARY_LOGICAL_EXPRESSION__OP:setOp(OP_EDEFAULT);return;case N4JSPackage.BINARY_LOGICAL_EXPRESSION__RHS:setRhs((Expression)null);return;}super.eUnset(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:04.903 -0500",hash_original_method="F54465AC5542CF519D3902E7BAEA3188",hash_generated_method="95F8C73C90D3F2BADD843A10BCF4F885") public boolean isBaselineAligned(){  return mBaselineAligned;}  }
class C{  public boolean mayRemoveInstanceAfterFirstBatchDone(){  return false;}  }
class C{  private static boolean isEdgeListItem(AccessibilityNodeInfoCompat node,int direction,NodeFilter filter,TraversalStrategy traversalStrategy){  return node != null && ((direction <= 0) && isMatchingEdgeListItem(node,NodeFocusFinder.SEARCH_BACKWARD,FILTER_SCROLL_BACKWARD.and(filter),traversalStrategy)) || ((direction >= 0) && isMatchingEdgeListItem(node,NodeFocusFinder.SEARCH_FORWARD,FILTER_SCROLL_FORWARD.and(filter),traversalStrategy));}  }
class C{  private void layoutControl(){  controlPanel.add(previousSource,BorderLayout.WEST);  controlPanel.add(nextSource,BorderLayout.EAST);  controlPanel.add(informationButton,BorderLayout.CENTER);}  }
class C{  public static int countNnz(String[] cols){  return countNnz(cols,0,cols.length);}  }
class C{  public DataLogicStockChanges(){  m_changesRow=new Row(new Field(m_FieldNames[0],m_FieldDataTypes[0],m_fieldformat[0]),new Field(m_FieldNames[1],m_FieldDataTypes[1],m_fieldformat[1]),new Field(m_FieldNames[2],m_FieldDataTypes[2],m_fieldformat[2]),new Field(m_FieldNames[3],m_FieldDataTypes[3],m_fieldformat[3]),new Field(m_FieldNames[4],m_FieldDataTypes[4],m_fieldformat[4]),new Field(m_FieldNames[5],m_FieldDataTypes[5],m_fieldformat[5]),new Field(m_FieldNames[6],m_FieldDataTypes[6],m_fieldformat[6]),new Field(m_FieldNames[7],m_FieldDataTypes[7],m_fieldformat[7]),new Field(m_FieldNames[8],m_FieldDataTypes[8],m_fieldformat[8]),new Field(m_FieldNames[9],m_FieldDataTypes[9],m_fieldformat[9]),new Field(m_FieldNames[10],m_FieldDataTypes[10],m_fieldformat[10]),new Field(m_FieldNames[11],m_FieldDataTypes[11],m_fieldformat[11]));}  }
class C{  int enqueueTelegram(char[] buffer){  int result=0;  if (txTelegramQueue.size() == 0 && currTxCharPos >= currTxTgm.length) {    currTxTgm=buffer;    currTxCharPos=0;  } else {    result=txTelegramQueue.add(buffer) ? 0 : -1;  }  return (result);}  }
class C{  public void initialize(String worldName){  if (worldName.equals("samplesolo")) {    addCreature(11,1,new SampleCreature());  } else   if (worldName.equals("sampleplip")) {    addCreature(11,1,new SampleCreature());    addCreature(12,12,new Plip());    addCreature(4,3,new Plip());  } else   if (worldName.equals("strugggz")) {    System.out.println("You need to uncomment the strugggz test!");  } else {    System.out.println("World name not recognized!");  }}  }
class C{  public static long toLong(short[] shorts){  return toLong(shorts[0],shorts[1],shorts[2],shorts[3]);}  }
class C{  public RestartEvent(AdaptiveTimeContinuation source,RestartType type){  super(source);  this.type=type;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public Builder withServerTransport(Transport transport){  this.serverTransport=Assert.notNull(transport,"transport");  return this;}  }
class C{  public void notifyLike() throws EchoNestException {  com.fastbootmobile.encore.model.Song currentTrack=PlaybackProxy.getCurrentTrack();  if (currentTrack != null) {    String songRef=currentTrack.getRef();    try {      mPlaylistSession.feedback(DynamicPlaylistSession.FeedbackType.favorite_song,songRef);    } catch (    Exception e) {      Log.e(TAG,"Cannot feedback like",e);    }  }}  }
class C{  public Builder withAuthCallBack(AuthCallback authCallback){  this.authCallback=authCallback;  return this;}  }
class C{  private int addEntryHtmlToTree(Entry entry,StringBuilder result,List<EntryInfo> entryInfoList,int levelsOfChildrenToInclude,boolean onlyChildren,String idOfEntryToSkip,boolean includeRootInEntryInfoList,boolean showCheckboxes) throws IOException {  if (!onlyChildren) {    result.append("<div class=\"subtree\">");    result.append("<div class=\"alone " + entry.getId() + "\" id=\"alone_"+ entry.getId()+ "\" ondragover=\"onDragOverAloneEl(event)\" ondrop=\"onDropAloneEl(event)\">");    result.append("<table class=\"nopadding alonetd\"><tr><td onmousedown=\"triangleOnMouseDown(event); return false;\" class=\"triTd justDrag\">" + "<div></div></td><td>" + "<table class=\"nopadding\"><tr><td class=\"nowords\"><img onmouseover=\"plusOnMouseOver(event);\" onmouseout=\"plusOnMouseOut(event);\" alt=\"plus\" title=\"" + servletText.plusTooltip() + "\" class=\"justDrag plusOrMinus\" onmousedown=\"plusOnMouseDown(event); return false;\" src=\"/images/plus.png\"></td></tr>"+ "<tr><td class=\"nowords\"><img onmouseover=\"minusOnMouseOver(event);\" onmouseout=\"minusOnMouseOut(event);\" alt=\"minus\" title=\""+ servletText.minusTooltip()+ "\" class=\"justDrag plusOrMinus\" onmousedown=\"minusOnMouseDown(event); return false;\" src=\"/images/minus.png\"></td></tr></table>"+ "</td>");    if (showCheckboxes) {      result.append("<td><input type=\"checkbox\" class=\"justDrag aloneCheckbox mousetrap\" onclick=\"checkboxOnClick(event); return true;\"></td>");    }    result.append("<td class=\"content\">");    if (entry.hasQuotation()) {      result.append("<div class=\"quotation\">");      result.append(getQuotationHtml(entry,true));      result.append("</div><br>");    }    String noteHtml=getNoteHtml(entry,false,entry.hasQuotation(),true);    if (!noteHtml.isEmpty()) {      result.append("<div class=\"note mousetrap\">");      result.append(noteHtml);      result.append("</div>");    }    result.append("<span class=\"entryDaytime\">" + servletText.fragmentLastModified() + " "+ "<span class=\"modTime\">"+ formatDateAndTime(entry.getModTime())+ "<span class=\"rawDateTime\">"+ entry.getModTime()+ "</span></span></span>");    final Entry source=dbLogic.getEntryById(entry.getSourceId());    if (source != null) {      addSourceHtml(source,result,SourceEmbedContext.InQuotation,null,-1,null);    }    if (false) {      result.append("<br>id: " + entry.getId());      result.append("<br>parent: " + entry.getParentId(""));      result.append("<br>first child: " + entry.getFirstChildId(""));      result.append("<br>last child: " + entry.getLastChildId(""));      result.append("<br>previous sibling: " + entry.getPreviousSiblingId(""));      result.append("<br>next sibling: " + entry.getNextSiblingId(""));    }    result.append("</td></tr></table></div>");    result.append("<div class=\"justchildren\">");  }  if (includeRootInEntryInfoList) {    addEntryToInfoList(entry,entryInfoList);  }  int indexOfEntryToSkip=-1;  if (levelsOfChildrenToInclude > 0) {    --levelsOfChildrenToInclude;    final Hashtable<String,Entry> children=new Hashtable<String,Entry>();    Entry first=null;    for (    final Object childObject : dbLogic.getEntriesByParentId(entry.getId())) {      final Entry child=(Entry)childObject;      children.put(child.getId(),child);      if (!child.hasPreviousSiblingId()) {        first=child;      }    }    if (first != null) {      Entry child=first;      for (int i=0; i < children.size(); ++i) {        if (child == null) {          break;        }        if (idOfEntryToSkip != null && idOfEntryToSkip.equals(child.getId())) {          indexOfEntryToSkip=i;        } else {          addEntryHtmlToTree(child,result,entryInfoList,levelsOfChildrenToInclude,false,null,true,showCheckboxes);        }        if (!child.hasNextSiblingId()) {          break;        }        final String nextId=child.getNextSiblingId();        child=children.get(nextId);      }    } else {      final Iterator<Map.Entry<String,Entry>> iterator=children.entrySet().iterator();      int i=0;      while (iterator.hasNext()) {        final Map.Entry<String,Entry> mapEntry=iterator.next();        final Entry child=mapEntry.getValue();        if (idOfEntryToSkip != null && idOfEntryToSkip.equals(child.getId())) {          indexOfEntryToSkip=i;        } else {          addEntryHtmlToTree(child,result,entryInfoList,levelsOfChildrenToInclude,false,null,true,showCheckboxes);        }        ++i;      }    }  }  if (!onlyChildren) {    result.append("</div>");    result.append("</div>");  }  return indexOfEntryToSkip;}  }
class C{  public PossibilityIterator(Map<Token,LinkedHashMap<String,Integer>> suggestions,int maximumRequiredSuggestions,int maxEvaluations,boolean overlap){  this.suggestionsMayOverlap=overlap;  for (  Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions.entrySet()) {    Token token=entry.getKey();    if (entry.getValue().size() == 0) {      continue;    }    List<SpellCheckCorrection> possibleCorrections=new ArrayList<>();    for (    Map.Entry<String,Integer> entry1 : entry.getValue().entrySet()) {      SpellCheckCorrection correction=new SpellCheckCorrection();      correction.setOriginal(token);      correction.setCorrection(entry1.getKey());      correction.setNumberOfOccurences(entry1.getValue());      possibleCorrections.add(correction);    }    possibilityList.add(possibleCorrections);  }  int wrapSize=possibilityList.size();  if (wrapSize == 0) {    done=true;  } else {    correctionIndex=new int[wrapSize];    for (int i=0; i < wrapSize; i++) {      int suggestSize=possibilityList.get(i).size();      if (suggestSize == 0) {        done=true;        break;      }      correctionIndex[i]=0;    }  }  PriorityQueue<RankedSpellPossibility> rankedPossibilities=new PriorityQueue<>(11,new RankComparator());  Set<RankedSpellPossibility> removeDuplicates=null;  if (suggestionsMayOverlap) {    removeDuplicates=new HashSet<>();  }  long numEvaluations=0;  while (numEvaluations < maxEvaluations && internalHasNext()) {    RankedSpellPossibility rsp=internalNext();    numEvaluations++;    if (rankedPossibilities.size() >= maximumRequiredSuggestions && rsp.rank >= rankedPossibilities.peek().rank) {      continue;    }    if (!isSuggestionForReal(rsp)) {      continue;    }    if (removeDuplicates == null) {      rankedPossibilities.offer(rsp);    } else {      Collections.sort(rsp.corrections,new StartOffsetComparator());      if (removeDuplicates.add(rsp)) {        rankedPossibilities.offer(rsp);      }    }    if (rankedPossibilities.size() > maximumRequiredSuggestions) {      RankedSpellPossibility removed=rankedPossibilities.poll();      if (removeDuplicates != null) {        removeDuplicates.remove(removed);      }    }  }  RankedSpellPossibility[] rpArr=new RankedSpellPossibility[rankedPossibilities.size()];  for (int i=rankedPossibilities.size() - 1; i >= 0; i--) {    rpArr[i]=rankedPossibilities.remove();  }  rankedPossibilityIterator=Arrays.asList(rpArr).iterator();}  }
class C{  public static final void eventOccured(int screen,int eventType){  AccelDeviceEventNotifier notifier=getInstance(false);  if (notifier != null) {    notifier.notifyListeners(eventType,screen);  }}  }
class C{  @Override public void clearParameters() throws SQLException {  try {    debugCodeCall("clearParameters");    checkClosed();    ArrayList<? extends ParameterInterface> parameters=command.getParameters();    for (int i=0, size=parameters.size(); i < size; i++) {      ParameterInterface param=parameters.get(i);      param.setValue(null,batchParameters == null);    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Application createApplication(String appName){  Requester.Response response=api.getRequester().post(Requester.DISCORD_API_PREFIX + "oauth2/applications",new JSONObject().put("name",appName));  if (response.isOk()) {    return new Application(response.getObject());  }  throw new RuntimeException("Error creating a new Application: " + response.toString());}  }
class C{  public BoxDataImpl(ExtensionPoint extensionPoint){  this.extPoint=extensionPoint;}  }
class C{  @ReactMethod public void rDeleteAll(Callback errorCallback,Callback successCallback){  try {    ArrayList<Integer> ids=mNotificationManager.getIDs();    for (    Integer id : ids) {      try {        mNotificationManager.delete(id);      } catch (      Exception e) {        Log.e("ReactSystemNotification","NotificationModule: rDeleteAll Error: " + Log.getStackTraceString(e));      }    }    successCallback.invoke();  } catch (  Exception e) {    errorCallback.invoke(e.getMessage());    Log.e("ReactSystemNotification","NotificationModule: rDeleteAll Error: " + Log.getStackTraceString(e));  }}  }
class C{  public boolean isShowFullDN(){  return showFullDN;}  }
class C{  public static double logpdf(double x,double k,double theta){  if (x < 0) {    return Double.NEGATIVE_INFINITY;  }  if (x == 0) {    return (k == 1.0) ? Math.log(theta) : Double.NEGATIVE_INFINITY;  }  if (k == 1.0) {    return Math.log(theta) - x * theta;  }  final double xt=x * theta;  return (xt == Double.POSITIVE_INFINITY) ? Double.NEGATIVE_INFINITY : Math.log(theta) + (k - 1.0) * Math.log(xt) - xt - logGamma(k);}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public static BigDecimal toBigDecimal(Number self){  if ((self instanceof Long) || (self instanceof Integer) || (self instanceof Short)|| (self instanceof Byte)) {    return BigDecimal.valueOf(self.longValue());  }  return new BigDecimal(self.toString());}  }
class C{  public Enumeration all(){  return _all.elements();}  }
class C{  public AsyncResult AddNodesAsync(RequestHeader RequestHeader,AddNodesItem... NodesToAdd){  AddNodesRequest req=new AddNodesRequest(RequestHeader,NodesToAdd);  return channel.serviceRequestAsync(req);}  }
class C{  public static boolean wasTimeAccessed(){  return wasTimeAccessed;}  }
class C{  public Days plus(int days){  if (days == 0) {    return this;  }  return Days.days(FieldUtils.safeAdd(getValue(),days));}  }
class C{  protected GenericPermuting(){}  }
class C{  public boolean containsKey(float key){  return contains(key);}  }
class C{  public void addActionListener(ActionListener aListener){  m_actionListener=aListener;  super.addActionListener(aListener);}  }
class C{  public static Position convertNad27toWGS84(Position pos){  if (pos == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double dx_nad27_to_wgs84=-8.0;  double dy_nad27_to_wgs84=160;  double dz_nad27_to_wgs84=176;  return DatumTransformation.threeParamMolodenski(pos,CLARKE1866_GLOBE,new Earth(),dx_nad27_to_wgs84,dy_nad27_to_wgs84,dz_nad27_to_wgs84);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagname.class,args);}  }
class C{  @Override public PLIImage mirrorHorizontally(){  return this.mirror(true,false);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public synchronized void commit(int taskId) throws InterruptedException {  ReplDBMSHeader processed=taskInfo[taskId].getLastProcessedEvent();  if (processed != null) {    ReplDBMSHeader committed=new ReplDBMSHeaderData(processed);    taskInfo[taskId].setLastCommittedEvent(committed);    committedSeqno.report(taskId,committed.getSeqno(),committed.getExtractedTstamp().getTime(),committed);    if (logger.isDebugEnabled()) {      logger.debug("[" + name + "] commit: taskId="+ taskId+ " seqno="+ committed.getSeqno());    }    commitWatches.process(committed,taskId);  } else {    logger.warn("Attempt to commit task before marking processed event: stage=" + this.name + " taskId="+ taskId);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void sort(byte[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  @Override public void reset(){}  }
class C{  protected void doParse() throws ParseException, IOException {  ((LengthListHandler)lengthHandler).startLengthList();  current=reader.read();  skipSpaces();  try {    for (; ; ) {      lengthHandler.startLength();      parseLength();      lengthHandler.endLength();      skipCommaSpaces();      lengthHandler.startLength();      parseLength();      lengthHandler.endLength();      skipSpaces();      if (current == -1) {        break;      }      if (current != ';') {        reportUnexpectedCharacterError(current);      }      current=reader.read();      skipSpaces();    }  } catch (  NumberFormatException e) {    reportUnexpectedCharacterError(current);  }  ((LengthListHandler)lengthHandler).endLengthList();}  }
class C{  public static <K extends Comparable<?>,V>Builder<K,V> builder(){  return new Builder<K,V>();}  }
class C{  public void selectEntity(int en){  if (en != cen) {    target(null);    clearAttacks();    refreshAll();  }  if ((ce() != null) && ce().isWeapOrderChanged()) {    clientgui.getClient().sendEntityWeaponOrderUpdate(ce());  }  if (clientgui.getClient().isMyTurn()) {    setStatusBarText(Messages.getString("FiringDisplay.its_your_turn"));  }  if (clientgui.getClient().getGame().getEntity(en) != null) {    cen=en;    clientgui.setSelectedEntityNum(en);    clientgui.mechD.displayEntity(ce());    if (ce().getPosition() == null) {      for (int nextId=clientgui.getClient().getNextEntityNum(en); nextId != en; nextId=clientgui.getClient().getNextEntityNum(nextId)) {        if (clientgui.getClient().getGame().getEntity(nextId).getPosition() != null) {          cen=nextId;          break;        }      }      if (ce().getPosition() == null) {        System.err.println("FiringDisplay: could " + "not find an on-board entity: " + en);        return;      }    }    int lastTarget=ce().getLastTarget();    if (ce() instanceof Mech) {      int grapple=((Mech)ce()).getGrappled();      if (grapple != Entity.NONE) {        lastTarget=grapple;      }    }    Entity t=clientgui.getClient().getGame().getEntity(lastTarget);    target(t);    if (!ce().isOffBoard()) {      clientgui.getBoardView().highlight(ce().getPosition());    }    clientgui.getBoardView().select(null);    clientgui.getBoardView().cursor(null);    refreshAll();    cacheVisibleTargets();    if (!ce().isOffBoard()) {      clientgui.bv.centerOnHex(ce().getPosition());    }    clientgui.getMenuBar().setEntity(ce());    setTwistEnabled(ce().canChangeSecondaryFacing() && ce().getCrew().isActive());    setFindClubEnabled(FindClubAction.canMechFindClub(clientgui.getClient().getGame(),en));    setFlipArmsEnabled(ce().canFlipArms());    updateSearchlight();    updateClearTurret();    updateClearWeaponJam();    updateStrafe();    if ((ce() != null) && ce().isHidden()) {      setFireEnabled(false);      setTwistEnabled(false);      setFindClubEnabled(false);      setFlipArmsEnabled(false);      setStrafeEnabled(false);      clientgui.mechD.wPan.toHitText.setText("Hidden units are only allowed to spot!");    }  } else {    System.err.println("FiringDisplay: tried to " + "select non-existant entity: " + en);  }  if (GUIPreferences.getInstance().getBoolean("FiringSolutions")) {    setFiringSolutions();  } else {    clientgui.getBoardView().clearFiringSolutionData();  }}  }
class C{  public void evalEffectivePom(MavenContext context) throws IOException, InterruptedException {  IPreferenceStore prefs=MavenActivator.getDefault().getPreferenceStore();  String mavenExe=prefs.getString(AnalysisPreferenceIds.MVN_ANALYSIS_EXECUTABLE);  String effPomCmd=prefs.getString(AnalysisPreferenceIds.MVN_ANALYSIS_EFFECTIVEPOM);  String javaHome=getJavaHome(prefs);  File effPomFile=File.createTempFile("depan-effpom",".xml");  ProcessBuilder builder=new ProcessBuilder(mavenExe,"-f",projectPom,effPomCmd,"-Doutput=" + effPomFile.getAbsolutePath());  builder.directory(projectDir);  Map<String,String> env=builder.environment();  env.put(JAVA_HOME,javaHome);  execProcess(builder);  effPomText=loadFile(effPomFile);}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public boolean showAppMenu(View anchorView,boolean startDragging){  if (!mDelegate.shouldShowAppMenu() || isAppMenuShowing())   return false;  boolean isByHardwareButton=false;  if (anchorView == null) {    int displayHeight=mActivity.getResources().getDisplayMetrics().heightPixels;    Rect rect=new Rect();    mActivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);    int statusBarHeight=rect.top;    mHardwareButtonMenuAnchor.setY((displayHeight - statusBarHeight));    anchorView=mHardwareButtonMenuAnchor;    isByHardwareButton=true;  }  assert !(isByHardwareButton && startDragging);  if (mMenu == null) {    PopupMenu tempMenu=new PopupMenu(mActivity,anchorView);    tempMenu.inflate(mMenuResourceId);    mMenu=tempMenu.getMenu();  }  mDelegate.prepareMenu(mMenu);  ContextThemeWrapper wrapper=new ContextThemeWrapper(mActivity,R.style.OverflowMenuTheme);  if (mAppMenu == null) {    TypedArray a=wrapper.obtainStyledAttributes(new int[]{android.R.attr.listPreferredItemHeightSmall,android.R.attr.listDivider});    int itemRowHeight=a.getDimensionPixelSize(0,0);    Drawable itemDivider=a.getDrawable(1);    int itemDividerHeight=itemDivider != null ? itemDivider.getIntrinsicHeight() : 0;    a.recycle();    mAppMenu=new AppMenu(mMenu,itemRowHeight,itemDividerHeight,this,mActivity.getResources());    mAppMenuDragHelper=new AppMenuDragHelper(mActivity,mAppMenu,itemRowHeight);  }  Rect appRect=new Rect();  mActivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(appRect);  if (appRect.left < 0 && appRect.top < 0) {    appRect.left=0;    appRect.top=0;    appRect.right=mActivity.getWindow().getDecorView().getWidth();    appRect.bottom=mActivity.getWindow().getDecorView().getHeight();  }  int rotation=mActivity.getWindowManager().getDefaultDisplay().getRotation();  Point pt=new Point();  mActivity.getWindowManager().getDefaultDisplay().getSize(pt);  mAppMenu.show(wrapper,anchorView,isByHardwareButton,rotation,appRect,pt.y,mDelegate.getFooterResourceId());  mAppMenuDragHelper.onShow(startDragging);  RecordUserAction.record("MobileMenuShow");  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return node == null ? null : node.getThumbnail(stack.getUIComponent());}  }
class C{  public UF12(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);  if ((numberOfVariables != 10) && (numberOfVariables != 30)) {    throw new IllegalArgumentException("number of variables must be 10 or 30");  }  problem=new DTLZ3(numberOfVariables,numberOfObjectives);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void stop(){}  }
class C{  public static Document createDomDocument(){  Document doc=null;  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    factory.setNamespaceAware(true);    DocumentBuilder builder=factory.newDocumentBuilder();    doc=builder.newDocument();  } catch (  ParserConfigurationException e) {    throw new IllegalStateException(String.format("%s.createDomDucment() could not instantiate DocumentBuilderFactory. This should never happen",DomUtilities.class.getName()),e);  } finally {  }  return doc;}  }
class C{  protected void copyInstances(int from,Instances dest,int num){  for (int i=0; i < num; i++) {    dest.add(instance(from + i));  }}  }
class C{  public String format(LogRecord r){  StringBuffer sb=new StringBuffer();  sb.append(r.getLevel().getName()).append("\t");  sb.append(MessageFormat.format("{0, date, yy-MM-dd} {0, time, kk:mm:ss.SSSS} ",new Object[]{new Date(r.getMillis())}) + "\t");  String cnm=r.getSourceClassName();  String cn="";  if (cnm != null) {    int cnl=cnm.length();    if (cnl > 20) {      cn=r.getSourceClassName().substring(cnl - 19);    } else {      char sp[]={' '};      StringBuffer sb1=new StringBuffer().append(cnm);      cn=sb1.append(sp,0,1).toString();    }  }  sb.append(cn).append("\t").append(" ");  sb.append(left(r.getSourceMethodName(),23,' ')).append("\t");  sb.append(r.getThreadID()).append("\t");  sb.append(formatMessage(r)).append(LS);  if (null != r.getThrown()) {    sb.append("Throwable occurred: ");    Throwable t=r.getThrown();    PrintWriter pw=null;    try {      StringWriter sw=new StringWriter();      pw=new PrintWriter(sw);      t.printStackTrace(pw);      sb.append(sw.toString());    }  finally {      if (pw != null) {        try {          pw.close();        } catch (        Exception e) {        }      }    }  }  return sb.toString();}  }
class C{  public static void createF2L(Scenario scenario,String path2File){  createF2L(scenario.getActivityFacilities(),scenario.getNetwork(),path2File);}  }
class C{  public ExtendedStringLiteral extendWith(StringLiteral lit){  int length=this.source.length;  System.arraycopy(this.source,0,this.source=new char[length + lit.source.length],0,length);  System.arraycopy(lit.source,0,this.source,length,lit.source.length);  this.sourceEnd=lit.sourceEnd;  return this;}  }
class C{  public void printAlTempInGrid(String id,AlignmentTemplateInstance alTemp,PrintStream out){  if (id != null)   out.println(id);  out.print(SYM_C);  for (int fi=0; fi < fSize; ++fi) {    if (fi > 0)     out.print(SYM_H);    out.print(SYM_H + SYM_H);  }  out.println(SYM_H + SYM_C);  for (int ei=0; ei < eSize; ++ei) {    out.print(SYM_V);    for (int fi=0; fi < fSize; ++fi) {      if (fi > 0)       out.print(" ");      assert (sent != null);      String alignSym=sent.f2e(fi).contains(ei) ? SYM_A : SYM_U;      String phraseSym=" ";      if (alTemp != null) {        RelativePos pos=relativePos(alTemp,fi,ei);        if (pos == RelativePos.NW && alGridCells[fi][ei].hasBottomRight())         phraseSym="1";        if (pos == RelativePos.SW && alGridCells[fi][ei].hasTopRight())         phraseSym="2";        if (pos == RelativePos.NE && alGridCells[fi][ei].hasBottomLeft())         phraseSym="3";        if (pos == RelativePos.SE && alGridCells[fi][ei].hasTopLeft())         phraseSym="4";        if (alTemp.fStartPos() <= fi && fi <= alTemp.fEndPos() && alTemp.eStartPos() <= ei && ei <= alTemp.eEndPos()) {          assert (" ".equals(phraseSym));          phraseSym=SYM_P;          if (alignSym.equals(SYM_U))           alignSym=SYM_P;        }      }      out.print(phraseSym + alignSym);    }    out.printf(" %s %2d %s\n",SYM_V,ei,sent.e().get(ei).toString());  }  out.print(SYM_C);  for (int fi=0; fi < fSize; ++fi) {    if (fi > 0)     out.print(SYM_H);    out.print(SYM_H + SYM_H);  }  out.print(SYM_H + SYM_C + "\n ");  for (int fi=0; fi < fSize; ++fi) {    if (fi > 0)     out.print(" ");    out.printf("%2d",fi);  }  out.println();  for (int fi=0; fi < fSize; ++fi) {    out.printf("%d=%s ",fi,sent.f().get(fi).toString());  }}  }
class C{  protected boolean beforeDownstream(){  return true;}  }
class C{  public void incrServerPlayerCount(@NonNull Jedis jedis,@NonNull String serverId,int incrAmount) throws ProcessingException {  try {    jedis.zincrby(RedisKeys.SERVER_REPO.toString(),incrAmount,serverId);  } catch (  Exception ex) {    throw new ProcessingException("There was an error incrementing the player count : \"" + serverId + "\"!",ex);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean send(XmppMsg msg,String to,Context ctx){  Intent intent=new Intent(MainService.ACTION_SEND);  intent.setClass(ctx,MainService.class);  if (to != null) {    intent.putExtra("to",to);  }  intent.putExtra("xmppMsg",msg);  return MainService.sendToServiceHandler(intent);}  }
class C{  private void wakeUp(){  flushLock.lock();  try {    canFlush.signalAll();  }  finally {    flushLock.unlock();  }}  }
class C{  public Root createRoot(){  RootImpl root=new RootImpl();  return root;}  }
class C{  protected TokenFilter(TokenStream input){  super(input);  this.input=input;}  }
class C{  private void animatePanelTo(float height,long duration){  animateProperty(Property.PANEL_HEIGHT,getHeight(),height,duration);}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  protected void removeUserToolBarBeans(Vector<?> metabeans){  int i;  int n;  MetaBean meta;  Vector<Object> subflow;  BeanInstance beaninst;  for (i=0; i < metabeans.size(); i++) {    meta=(MetaBean)metabeans.get(i);    subflow=meta.getSubFlow();    for (n=0; n < subflow.size(); n++) {      beaninst=(BeanInstance)subflow.get(n);      beaninst.removeBean(m_BeanLayout);    }  }}  }
class C{  @Override public void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  if (getChildCount() > 0) {    View childView=getChildAt(0);    if (childView != null) {      childView.measure(widthMeasureSpec,heightMeasureSpec);      int h=childView.getMeasuredHeight();      setMeasuredDimension(getMeasuredWidth(),h);      getLayoutParams().height=h;    }  }  mDayPicker=(NumberPicker)findViewById(R.id.dayPicker);  mTimePicker=(TimePicker)findViewById(R.id.timePicker);}  }
class C{  public void resetBlacklist(String vdcShortId){  WebResource rRoot=createRequest(VDCCONFIG_RESET_BLACKLIST).queryParam("vdc_short_id",vdcShortId);  rRoot.accept(MediaType.APPLICATION_XML);  try {    addSignature(rRoot).post(ClientResponse.class);  } catch (  UnauthorizedException e) {    throw GeoException.fatals.unableConnect(endPoint,e);  }catch (  GeoException e) {    throw e;  }catch (  Exception e) {    throw GeoException.fatals.unableConnect(endPoint,e);  }}  }
class C{  void messageReceived(NextFilter nextFilter,ByteBuffer buf) throws SSLException {  if (LOGGER.isDebugEnabled()) {    if (!isOutboundDone()) {      LOGGER.debug("{} Processing the received message",sslFilter.getSessionInfo(session));    } else {      LOGGER.debug("{} Processing the received message",sslFilter.getSessionInfo(session));    }  }  if (inNetBuffer == null) {    inNetBuffer=IoBuffer.allocate(buf.remaining()).setAutoExpand(true);  }  inNetBuffer.put(buf);  if (!handshakeComplete) {    handshake(nextFilter);  } else {    inNetBuffer.flip();    if (!inNetBuffer.hasRemaining()) {      return;    }    SSLEngineResult res=unwrap();    if (inNetBuffer.hasRemaining()) {      inNetBuffer.compact();    } else {      inNetBuffer.free();      inNetBuffer=null;    }    checkStatus(res);    renegotiateIfNeeded(nextFilter,res);  }  if (isInboundDone()) {    int inNetBufferPosition=inNetBuffer == null ? 0 : inNetBuffer.position();    buf.position(buf.position() - inNetBufferPosition);    if (inNetBuffer != null) {      inNetBuffer.free();      inNetBuffer=null;    }  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  private boolean matchingOpArgOperand(ExprOrOpArgNode arg,int i){  return ((arg instanceof OpArgNode) && params[i].getArity() == ((OpArgNode)arg).getArity());}  }
class C{  public boolean isDestroyed(){  return _lifecycle.isDestroyed();}  }
class C{  public void validateLoginRequest(String username,String uid,String signature,String timestamp) throws DataAccessException, UnauthorizedException {  if (!Utilities.isTimestampValid(timestamp)) {    throw new UnauthorizedException("Invalid timestamp: " + timestamp);  }  log.info(String.format("Timestamp [ %s ] is valid",timestamp));  log.info("Validate signature: " + signature);  UserInfo user=userAuthenticator.getUserInfo(username);  if (user == null) {    throw new UnauthorizedException("Couldn't find user: " + username);  }  if (!validateSignature(timestamp,user.getHashedPassword(),signature)) {    throw new UnauthorizedException("Invalid signature: " + signature);  }  log.info("Signature matched!!!");  DeviceInfo device=regenerateKey(uid,user.getUsername());  log.info("Device found/registered successfully!!!");  if (!deviceBelongsToUser(user.getUsername(),device.getUsername())) {    throw new UnauthorizedException(String.format("User [ %s ] doesn't match the device's owner [ %s ]",user.getUsername(),device.getUsername()));  }}  }
class C{  private synchronized void manageMenu(){  if ((game != null) || (hasBoard && (null == client))) {    fileGameNew.setEnabled(false);    fileGameOpen.setEnabled(false);    fileGameScenario.setEnabled(false);    fileGameConnectBot.setEnabled(false);    fileGameConnect.setEnabled(false);    replacePlayer.setEnabled(false);    if ((phase != IGame.Phase.PHASE_UNKNOWN) && (phase != IGame.Phase.PHASE_LOUNGE) && (phase != IGame.Phase.PHASE_SELECTION)&& (phase != IGame.Phase.PHASE_EXCHANGE)&& (phase != IGame.Phase.PHASE_VICTORY)&& (phase != IGame.Phase.PHASE_STARTING_SCENARIO)) {      fileGameSave.setEnabled(true);      fileGameSaveServer.setEnabled(true);      replacePlayer.setEnabled(true);    } else {      fileGameSave.setEnabled(false);      fileGameSaveServer.setEnabled(false);      replacePlayer.setEnabled(false);    }  } else {    fileGameNew.setEnabled(true);    fileGameOpen.setEnabled(true);    fileGameSave.setEnabled(false);    fileGameSaveServer.setEnabled(false);    fileGameScenario.setEnabled(true);    fileGameConnectBot.setEnabled(true);    fileGameConnect.setEnabled(true);    replacePlayer.setEnabled(true);  }  if (game != null) {    viewGameOptions.setEnabled(true);    viewPlayerSettings.setEnabled(true);  } else {    viewGameOptions.setEnabled(false);    viewPlayerSettings.setEnabled(false);  }  filePrint.setEnabled(false);  if (client != null) {    fileBoardNew.setEnabled(false);    fileBoardOpen.setEnabled(false);    fileBoardSave.setEnabled(false);    fileBoardSaveAs.setEnabled(false);    fileBoardSaveAsImage.setEnabled(false);  } else {    fileBoardNew.setEnabled(true);    fileBoardOpen.setEnabled(true);    fileBoardSave.setEnabled(false);    fileBoardSaveAs.setEnabled(false);    fileBoardSaveAsImage.setEnabled(false);  }  if (hasBoard) {    fileBoardSave.setEnabled(true);    fileBoardSaveAs.setEnabled(true);    fileBoardSaveAsImage.setEnabled(true);    viewMiniMap.setEnabled(true);    viewZoomIn.setEnabled(true);    viewZoomOut.setEnabled(true);  } else {    fileBoardSave.setEnabled(false);    fileBoardSaveAs.setEnabled(false);    fileBoardSaveAsImage.setEnabled(false);    viewMiniMap.setEnabled(false);    viewZoomIn.setEnabled(false);    viewZoomOut.setEnabled(false);  }  if (hasUnitList) {    fileUnitsOpen.setEnabled(phase == IGame.Phase.PHASE_LOUNGE);    fileUnitsClear.setEnabled(phase == IGame.Phase.PHASE_LOUNGE);  } else {    fileUnitsOpen.setEnabled(phase == IGame.Phase.PHASE_LOUNGE);    fileUnitsClear.setEnabled(false);  }  fileUnitsReinforce.setEnabled(phase != IGame.Phase.PHASE_LOUNGE);  fileUnitsReinforceRAT.setEnabled(phase != IGame.Phase.PHASE_LOUNGE);  if (entity != null) {    viewMekDisplay.setEnabled(true);  } else {    viewMekDisplay.setEnabled(false);  }  if ((client == null) && hasBoard) {    viewLOSSetting.setEnabled(false);    viewUnitOverview.setEnabled(false);    viewPlayerList.setEnabled(false);  } else   if ((phase == IGame.Phase.PHASE_SET_ARTYAUTOHITHEXES) || (phase == IGame.Phase.PHASE_DEPLOY_MINEFIELDS) || (phase == IGame.Phase.PHASE_MOVEMENT)|| (phase == IGame.Phase.PHASE_FIRING)|| (phase == IGame.Phase.PHASE_PHYSICAL)|| (phase == IGame.Phase.PHASE_OFFBOARD)|| (phase == IGame.Phase.PHASE_TARGETING)|| (phase == IGame.Phase.PHASE_DEPLOYMENT)) {    viewLOSSetting.setEnabled(true);    viewMiniMap.setEnabled(true);    viewZoomIn.setEnabled(true);    viewZoomOut.setEnabled(true);    viewUnitOverview.setEnabled(true);    viewPlayerList.setEnabled(true);  } else {    viewLOSSetting.setEnabled(false);    viewMiniMap.setEnabled(false);    viewZoomIn.setEnabled(false);    viewZoomOut.setEnabled(false);    viewUnitOverview.setEnabled(false);    viewPlayerList.setEnabled(false);  }  if ((phase == IGame.Phase.PHASE_INITIATIVE) || (phase == IGame.Phase.PHASE_MOVEMENT) || (phase == IGame.Phase.PHASE_FIRING)|| (phase == IGame.Phase.PHASE_PHYSICAL)|| (phase == IGame.Phase.PHASE_OFFBOARD)|| (phase == IGame.Phase.PHASE_TARGETING)|| (phase == IGame.Phase.PHASE_END)|| (phase == IGame.Phase.PHASE_DEPLOYMENT)) {    viewRoundReport.setEnabled(true);  } else {    viewRoundReport.setEnabled(false);  }  viewClientSettings.setEnabled(true);  if ((phase != IGame.Phase.PHASE_FIRING) || (entity == null)) {    fireCancel.setEnabled(false);  } else {    fireCancel.setEnabled(true);  }  updateSaveWeaponOrderMenuItem();}  }
class C{  @Override public void error(String msg){  if (logger.isLoggable(Level.SEVERE)) {    log(SELF,Level.SEVERE,msg,null);  }}  }
class C{  public static byte[] decode(String s){  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length);  if (bytes != null && bytes.length >= 4) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  private void increaseCapacity(){  if (_capacity < C1) {    _capacity<<=1;    char[] tmp=new char[_capacity];    System.arraycopy(_low,0,tmp,0,_length);    _low=tmp;    _high[0]=tmp;  } else {    int j=_capacity >> B1;    if (j >= _high.length) {      char[][] tmp=new char[_high.length * 2][];      System.arraycopy(_high,0,tmp,0,_high.length);      _high=tmp;    }    _high[j]=new char[C1];    _capacity+=C1;  }}  }
class C{  public AsciiTable(){  this.data=new Object[0];  this.buffer=null;  this.nFields=0;  this.nRows=0;  this.rowLen=0;  this.types=new Class[0];  this.lengths=new int[0];  this.offsets=new int[0];  this.nulls=new String[0];}  }
class C{  private synchronized void findSpace(File root,long targetBytes,int destination) throws StopRequestException {  if (targetBytes == 0) {    return;  }  if (destination == DownloadsDestination.DESTINATION_FILE_URI || destination == DownloadsDestination.DESTINATION_EXTERNAL) {    if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {      throw new StopRequestException(DownloadStatus.DEVICE_NOT_FOUND_ERROR,"external media not mounted");    }  }  long bytesAvailable=getAvailableBytesInFileSystemAtGivenRoot(root);  if (bytesAvailable < DOWNLOAD_DATA_DIR_LOW_SPACE_THRESHOLD_BYTES) {    discardPurgeableFiles(destination,DOWNLOAD_DATA_DIR_LOW_SPACE_THRESHOLD_BYTES);    removeSpuriousFiles();    bytesAvailable=getAvailableBytesInFileSystemAtGivenRoot(root);    if (bytesAvailable < DOWNLOAD_DATA_DIR_LOW_SPACE_THRESHOLD_BYTES) {      if (root.equals(systemCacheDir)) {        LLog.w("System cache dir ('/cache') is running low on space." + "space available (in bytes): " + bytesAvailable);      } else {        throw new StopRequestException(DownloadStatus.INSUFFICIENT_SPACE_ERROR,"space in the filesystem rooted at: " + root + " is below 10% availability. stopping this download.");      }    }  }  if (root.equals(downloadDataDir)) {    bytesAvailable=getAvailableBytesInDownloadsDataDir(downloadDataDir);    if (bytesAvailable < DOWNLOAD_DATA_DIR_LOW_SPACE_THRESHOLD_BYTES) {      LLog.w("Downloads data dir: " + root + " is running low on space. space available (in bytes): "+ bytesAvailable);    }    if (bytesAvailable < targetBytes) {      discardPurgeableFiles(destination,DOWNLOAD_DATA_DIR_LOW_SPACE_THRESHOLD_BYTES);      removeSpuriousFiles();      bytesAvailable=getAvailableBytesInDownloadsDataDir(downloadDataDir);    }  }  if (bytesAvailable < targetBytes) {    throw new StopRequestException(DownloadStatus.INSUFFICIENT_SPACE_ERROR,"not enough free space in the filesystem rooted at: " + root + " and unable to free any more");  }}  }
class C{  public void go(File file) throws IOException, TransformerException {  createXCalDocument().write(file,outputProperties);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.VARIABLE_STATEMENT__VAR_DECLS_OR_BINDINGS:    getVarDeclsOrBindings().clear();  return;case N4JSPackage.VARIABLE_STATEMENT__VAR_STMT_KEYWORD:setVarStmtKeyword(VAR_STMT_KEYWORD_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private static String fixStringLength(String inString,int length,boolean right){  if (inString.length() < length) {    while (inString.length() < length) {      inString=(right ? inString.concat(" ") : " ".concat(inString));    }  } else   if (inString.length() > length) {    inString=inString.substring(0,length);  }  return inString;}  }
class C{  public String group(){  return matcher.group();}  }
class C{  public static void finalizePluginLoading(){  LinkedList<Plugin> queue=new LinkedList<>(ALL_PLUGINS);  HashSet<Plugin> initialized=new HashSet<>();  boolean found=false;  while (found || !queue.isEmpty() && initialized.isEmpty()) {    found=false;    Iterator<Plugin> iterator=queue.iterator();    while (iterator.hasNext()) {      Plugin plugin=iterator.next();      boolean dependenciesMet=true;      long start=System.currentTimeMillis();      for (      Dependency dependency : plugin.pluginDependencies) {        Plugin dependencyPlugin=getPluginByExtensionId(dependency.getPluginExtensionId());        if (dependencyPlugin == null) {          ALL_PLUGINS.remove(plugin);          INCOMPATIBLE_PLUGINS.add(plugin);          iterator.remove();          LogService.getRoot().log(Level.SEVERE,"com.rapidminer.tools.plugin.Plugin.loading_extension_error",new Object[]{plugin.extensionId,dependency.getPluginExtensionId()});          found=true;          dependenciesMet=false;          break;        } else {          dependenciesMet&=initialized.contains(dependencyPlugin);        }      }      if (dependenciesMet) {        plugin.buildFinalClassLoader();        initialized.add(plugin);        iterator.remove();        found=true;        PLUGIN_INITIALIZATION_ORDER.add(plugin);      }      recordLoadingTime(plugin.getExtensionId(),start);    }  }}  }
class C{  public void clearBugCounts(){  for (int i=0; i < totalErrors.length; i++) {    totalErrors[i]=0;  }  for (  PackageStats stats : packageStatsMap.values()) {    stats.clearBugCounts();  }}  }
class C{  public static int referenceComputeChecksum(byte[] buffer,int offset,int length,int initValue,int mask) throws NoSuchAlgorithmException {  int rem=initValue;  for (int i=0; i < length; i++) {    rem=rem ^ (buffer[offset + i] << 8);    for (int j=0; j < 8; j++) {      if ((rem & 0x8000) != 0) {        rem=(rem << 1) ^ mask;      } else {        rem=rem << 1;      }      rem=rem & 0xFFFF;    }  }  return rem;}  }
class C{  public boolean isIn(int i){  return (i >= this.min) && (i <= this.max);}  }
class C{  public SColor(short r,short g,short b){  self=new EColor(this,r,g,b);}  }
class C{  public void put(String key,int value){  super.put(key,Integer.valueOf(value));}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/full-copies/{fcid}/restore") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList restoreConsistencyGroupFullCopy(@PathParam("id") URI cgURI,@PathParam("fcid") URI fullCopyURI){  List<Volume> cgVolumes=verifyCGForFullCopyRequest(cgURI);  if (isIdEmbeddedInURL(cgURI)) {    validateVolumeNotPartOfApplication(cgVolumes,FULL_COPY);  }  URI fcSourceURI=verifyFullCopyForCopyRequest(fullCopyURI,cgVolumes);  return getFullCopyManager().restoreFullCopy(fcSourceURI,fullCopyURI);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public OutSegment openWriterSeq(long sequence){  int segmentSize=_segmentSizeNew;  SegmentKelp segment=_segmentService.createSegment(segmentSize,getTableKey(),sequence);  addTableSegmentLength(segmentSize);  _activeSequenceSet.put(sequence,Boolean.TRUE);  return new OutSegment(_table,_table.getTableService(),this,segment);}  }
class C{  public Command addArguments(String... args){  for (  String arg : args) {    addArgument(arg);  }  return this;}  }
class C{  public int countTokens(String nontokenDelims,String tokenDelims){  setDelims(nontokenDelims,tokenDelims);  return countTokens();}  }
class C{  private void registerElement(Class type,Label label) throws Exception {  String name=label.getName();  if (!elements.containsKey(name)) {    elements.put(name,label);  }  if (!containsKey(type)) {    put(type,label);  }}  }
class C{  public int nextIntFromTo(int from,int to){  return (int)((long)from + (long)((1L + (long)to - (long)from) * randomGenerator.raw()));}  }
class C{  private void state4() throws IOException {  int[] archivedIds=readList(new File(filePrefix + "arc"));  updatePopulation(archivedIds);}  }
class C{  @Override public void takeKeyEvents(boolean get){  mDecor.setFocusable(get);}  }
class C{  public int size(){  return size;}  }
class C{  public Table toTable(Database db) throws IOException {  return new TableCreator(((DatabaseImpl)db)).createTable(this);}  }
class C{  public static boolean isInDefinedScope(@NotNull PsiElement referenceElement,@NotNull BashVarDef definition){  if (definition.isFunctionScopeLocal()) {    return PsiTreeUtil.isAncestor(definition.findFunctionScope(),referenceElement,false);  } else   if (referenceElement instanceof BashVarDef && ((BashVarDef)referenceElement).isFunctionScopeLocal()) {    return PsiTreeUtil.isAncestor(definition.findFunctionScope(),referenceElement,false);  } else {    if (referenceElement instanceof BashVar) {      BashVar var=(BashVar)referenceElement;      BashVarDef referencingDefinition=(BashVarDef)var.getReference().resolve();      if (referencingDefinition != null && referencingDefinition.isFunctionScopeLocal()) {        return isInDefinedScope(referencingDefinition,definition);      }    }    if (BashPsiUtils.hasContext(referenceElement,definition)) {      return false;    }    if (!BashPsiUtils.isValidReferenceScope(referenceElement,definition)) {      return false;    }  }  return true;}  }
class C{  public void testPrintExtensions() throws Exception {  String javaText=TextFormat.printToString(TestUtil.getAllExtensionsSet());  javaText=javaText.replace(".0\n","\n");  assertEquals(allExtensionsSetText,javaText);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CODE_LANG___CODE_LANG_1:    return CODE_LANG_1_EDEFAULT == null ? codeLang_1 != null : !CODE_LANG_1_EDEFAULT.equals(codeLang_1);}return super.eIsSet(featureID);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public static void addHideAction(JDialog jd){  addHideAction((JComponent)jd.getContentPane());}  }
class C{  public static boolean isAlbumAvailableOffline(Album a){  if (a == null) {    return false;  } else   if (!a.songs().hasNext()) {    return false;  } else {    Iterator<String> songIt=a.songs();    while (songIt.hasNext()) {      Song song=ProviderAggregator.getDefault().retrieveSong(songIt.next(),a.getProvider());      if (canPlaySong(song)) {        return true;      }    }  }  return false;}  }
class C{  @Override public void recordGaugeValue(String aspect,long value){  recordGaugeCommon(aspect,Long.toString(value),value < 0,false);}  }
class C{  public static ObjectAnimator ofObject(Object target,String propertyName,TypeEvaluator evaluator,Object... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  private void computeImplicitForwardDependencesDef(Register r,DepGraphNode destNode){  DepGraphNode sourceNode=getDepGraphNode(r);  if (sourceNode != null) {    sourceNode.insertOutEdge(destNode,REG_OUTPUT);  }  setDepGraphNodeForRegister(destNode,r);}  }
class C{  public Vector2f mul(float x,float y){  this.x*=x;  this.y*=y;  return this;}  }
class C{  public static ASTRewrite create(AST ast){  return new ASTRewrite(ast);}  }
class C{  public HessianSerializerInput(InputStream is){  super(is);}  }
class C{  @Override public boolean queueRequest(Operation op){  AuthorizationContext ctx=op.getAuthorizationContext();  if (ctx == null) {    op.fail(new IllegalArgumentException("no authorization context"));    return true;  }  Claims claims=ctx.getClaims();  if (claims == null) {    op.fail(new IllegalArgumentException("no claims"));    return true;  }  String subject=claims.getSubject();  if (subject == null) {    op.fail(new IllegalArgumentException("no subject"));    return true;  }  if (op.hasPragmaDirective(Operation.PRAGMA_DIRECTIVE_CLEAR_AUTH_CACHE)) {    return handleCacheClearRequest(op,subject);  }  if (subject.equals(SystemUserService.SELF_LINK)) {    op.complete();    return true;  }  if (ctx.getResourceQueryFilter(op.getAction()) != null) {    op.complete();    return true;  }  return false;}  }
class C{  @Override public void write(int b){}  }
class C{  public static Config translateConfig(Map<String,Object> stormConfig){  Config heronConfig=new Config(stormConfig);  doSerializationTranslation(heronConfig);  if (heronConfig.containsKey(backtype.storm.Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS)) {    heronConfig.put(backtype.storm.Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS,heronConfig.get(backtype.storm.Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS).toString());  }  if (heronConfig.containsKey(backtype.storm.Config.TOPOLOGY_WORKERS)) {    Integer nWorkers=(Integer)heronConfig.get(backtype.storm.Config.TOPOLOGY_WORKERS);    com.twitter.heron.api.Config.setNumStmgrs(heronConfig,nWorkers);  }  if (heronConfig.containsKey(backtype.storm.Config.TOPOLOGY_ACKER_EXECUTORS)) {    Integer nAckers=(Integer)heronConfig.get(backtype.storm.Config.TOPOLOGY_ACKER_EXECUTORS);    com.twitter.heron.api.Config.setEnableAcking(heronConfig,nAckers > 0);  }  if (heronConfig.containsKey(backtype.storm.Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)) {    Integer nSecs=(Integer)heronConfig.get(backtype.storm.Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS);    com.twitter.heron.api.Config.setMessageTimeoutSecs(heronConfig,nSecs);  }  if (heronConfig.containsKey(backtype.storm.Config.TOPOLOGY_MAX_SPOUT_PENDING)) {    Integer nPending=Integer.parseInt(heronConfig.get(backtype.storm.Config.TOPOLOGY_MAX_SPOUT_PENDING).toString());    com.twitter.heron.api.Config.setMaxSpoutPending(heronConfig,nPending);  }  if (heronConfig.containsKey(backtype.storm.Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS)) {    Integer tSecs=Integer.parseInt(heronConfig.get(backtype.storm.Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS).toString());    com.twitter.heron.api.Config.setTickTupleFrequency(heronConfig,tSecs);  }  if (heronConfig.containsKey(backtype.storm.Config.TOPOLOGY_DEBUG)) {    Boolean dBg=Boolean.parseBoolean(heronConfig.get(backtype.storm.Config.TOPOLOGY_DEBUG).toString());    com.twitter.heron.api.Config.setDebug(heronConfig,dBg);  }  doTaskHooksTranslation(heronConfig);  return heronConfig;}  }
class C{  public static HierarchyBoundsListener remove(HierarchyBoundsListener l,HierarchyBoundsListener oldl){  return (HierarchyBoundsListener)removeInternal(l,oldl);}  }
class C{  public XmlHandler overrideClass(Class<?> aClass,Global global,Attribute... attributes){  try {    xml.deleteClass(aClass);    xml.addClass(aClass,global,attributes);    xml.write();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public static PlayerContainerData of(@NonNull Player player){  MatchThread thread=Cardinal.getMatchThread(player);  if (thread.getCurrentMatch().hasPlayer(player)) {    PlayingPlayerContainer container=thread.getCurrentMatch().getPlayingContainer(player);    return new PlayerContainerData(thread,thread.getCurrentMatch(),container);  } else {    return new PlayerContainerData(thread,null,null);  }}  }
class C{  public int size(){  return 3;}  }
class C{  public MultiFieldQueryParser(String[] fields,Analyzer analyzer){  super(null,analyzer);  this.fields=fields;}  }
class C{  protected void sendResponse(final PrintWriter writer,final String header,final String message){  sendResponse(writer,header,message,null);}  }
class C{  public Candle findById(Integer idCandle){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Candle instance=entityManager.find(Candle.class,idCandle);    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public final Vec2D limit(float lim){  if (magSquared() > lim * lim) {    return normalize().scaleSelf(lim);  }  return this;}  }
class C{  public static String statusToString(int status){  return statusNames[status];}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.ARRAY__EXPRS:    return basicSetExprs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.439 -0400",hash_original_method="CFE447BE824F339B0EBBFC43909D5C94",hash_generated_method="B292AED96BA03B3A6969D8469F2CB45D") public String doubleMetaphone(String value){  return doubleMetaphone(value,false);}  }
class C{  public static <T,R>R[] map(Collection<T> coll,Function<? super T,? extends R> evalFunction,Class<R> klass){  R[] newArray=create(coll.size(),klass);  int i=0;  for (  T elem : coll) {    newArray[i]=evalFunction.apply(elem);    i++;  }  return newArray;}  }
class C{  public void runTest() throws Throwable {  Document doc;  CDATASection newCDATASectionNode;  String newCDATASectionValue;  String newCDATASectionName;  int newCDATASectionType;  doc=(Document)load("staff",true);  newCDATASectionNode=doc.createCDATASection("This is a new CDATASection node");  newCDATASectionValue=newCDATASectionNode.getNodeValue();  assertEquals("nodeValue","This is a new CDATASection node",newCDATASectionValue);  newCDATASectionName=newCDATASectionNode.getNodeName();  assertEquals("nodeName","#cdata-section",newCDATASectionName);  newCDATASectionType=(int)newCDATASectionNode.getNodeType();  assertEquals("nodeType",4,newCDATASectionType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.953 -0500",hash_original_method="E9A5741B84FE67E582817B8B79597420",hash_generated_method="C17AE6177C5668A0F0E5EE932AEF930C") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public byte[] decode(byte[] pArray){  return decodeBase64(pArray);}  }
class C{  void resizeFramebufferTexture(){  glDeleteTextures(raytraceTexture);  createRaytracingTexture();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public Population preBreedingExchangePopulation(final EvolutionState state){  if (frequency == 0)   return state.population;  if (state.generation % frequency != offset)   return state.population;  EvolutionAgent agent=(EvolutionAgent)state;  reinitializeContacts(state);  Address peer=peerSelectionMethod.select(state,peers);  if (peer == null) {    state.output.message("Couldn't find a suitable target for migration.");    return state.population;  }  if (peer.name.equals(agent.getName()))   return state.population;  if (!working_root && (peer.getHost().equals(agent.getRootAddress().getHost()) && peer.port == agent.getRootAddress().port))   return state.population;  for (int subpop=0; subpop < state.population.subpops.length; subpop++) {    Individual[] inds=new Individual[migrationsize];    immigrantsSelectionMethod.prepareToProduce(state,subpop,0);    immigrantsSelectionMethod.produce(migrationsize,migrationsize,0,subpop,inds,state,0);    ExchangerData exData=new ExchangerData(new Address(agent.getName()),subpop,inds);    state.output.message("Sending the emigrants to island " + peer.toString());    agent.fireMessage(peer,EvolutionAgent.M_MIGRATION,exData);  }  return state.population;}  }
class C{  public T caseModuleNamespaceVirtualType(ModuleNamespaceVirtualType object){  return null;}  }
class C{  public boolean nextXBand(int range[]){  if (numXbands <= 0) {    return false;  }  numXbands--;  range[0]=region.bands[curIndex++];  range[2]=region.bands[curIndex++];  return true;}  }
class C{  private DownloadOverwriteInfoBar(String fileName,String dirName,String dirFullPath){  super(null,R.drawable.infobar_downloading,null,null);  mFileName=fileName;  mDirName=dirName;  mDirFullPath=dirFullPath;}  }
class C{  public Word prepareWord(Offset offset){  return null;}  }
class C{  public static void putByte(long addr,byte val){  UNSAFE.putByte(addr,val);}  }
class C{  public FormatException(){  super();  rootCause=null;}  }
class C{  public boolean isAmbiguousState(int state){  return (state >= stateCount);}  }
class C{  public int generateInverted(){  int fromR=(Color.red(mFromColor));  int fromG=(Color.green(mFromColor));  int fromB=(Color.blue(mFromColor));  int toR=(Color.red(mToColor));  int toG=(Color.green(mToColor));  int toB=(Color.blue(mToColor));  int diffR=toR - fromR;  int diffG=toG - fromG;  int diffB=toB - fromB;  int R=toR - (int)((diffR * mShade));  int G=toG - (int)((diffG * mShade));  int B=toB - (int)((diffB * mShade));  return Color.rgb(R,G,B);}  }
class C{  public static JSONObject createEmitSendTypingMessage(User user,int type){  JSONObject obj=new JSONObject();  try {    obj.put("type",type);    obj.put("roomID",user.roomID);    obj.put("userID",user.userID);    return obj;  } catch (  JSONException e) {    e.printStackTrace();  }  return obj;}  }
class C{  static protected void assemblyException(AssemblyException exception) throws AssemblyException {  throw exception;}  }
class C{  private void saveDataObject(DefaultData dataObject){  InvocationSequenceData invocationSequenceData=threadLocalInvocationData.get();  if (dataObject.getClass().equals(SqlStatementData.class)) {    if (null == invocationSequenceData.getSqlStatementData()) {      invocationSequenceData.setSqlStatementData((SqlStatementData)dataObject);    }  }  if (dataObject.getClass().equals(HttpTimerData.class)) {    if ((null == invocationSequenceData.getTimerData()) || invocationSequenceData.getTimerData().getClass().equals(TimerData.class)) {      invocationSequenceData.setTimerData((HttpTimerData)dataObject);    }  }  if (dataObject.getClass().equals(TimerData.class)) {    if (null == invocationSequenceData.getTimerData()) {      invocationSequenceData.setTimerData((TimerData)dataObject);    }  }  if (dataObject.getClass().equals(ExceptionSensorData.class)) {    ExceptionSensorData exceptionSensorData=(ExceptionSensorData)dataObject;    invocationSequenceData.addExceptionSensorData(exceptionSensorData);  }  if (dataObject.getClass().equals(LoggingData.class)) {    LoggingData loggingData=(LoggingData)dataObject;    invocationSequenceData.setLoggingData(loggingData);  }}  }
class C{  default URI value(){  return Defaults.VALUE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:56.916 -0400",hash_original_method="1919B2D3D0D69CA72A3BA54158247826",hash_generated_method="AAA1D0EA75AA96B76E42F225537D5D7B") public FilterFunctionEnvironment(FrameManager frameManager){  super(frameManager);}  }
class C{  public ArrayList<Fact> createFacts(MAcctSchema as){  return null;}  }
class C{  public void accept(final AnnotationVisitor av){  if (av != null) {    if (values != null) {      for (int i=0; i < values.size(); i+=2) {        String name=(String)values.get(i);        Object value=values.get(i + 1);        accept(av,name,value);      }    }    av.visitEnd();  }}  }
class C{  protected void clearEntry(GridCacheEntryEx e){  try {    e.clear(obsoleteVer,readers);  } catch (  IgniteCheckedException ex) {    U.error(log,"Failed to clearLocally entry from cache (will continue to clearLocally other entries): " + e,ex);  }}  }
class C{  public static boolean isRoot(Constituent c){  return c.getIncomingRelations().size() == 0;}  }
class C{  public DGetAlias(JDialog parent,String title,Dialog.ModalityType modality,String alias){  super(parent,title,modality);  initComponents(alias);}  }
class C{  private static char[] subscriptForDigit(int digit){  return Character.toChars(0x2080 + digit);}  }
class C{  public void kill(){  this.kill=true;}  }
class C{  public X509CRLEntryImpl(DerValue derValue) throws CRLException {  try {    parse(derValue);  } catch (  IOException e) {    revokedCert=null;    throw new CRLException("Parsing error: " + e.toString());  }}  }
class C{  private void exportProjectMetaInf(Project aProject,File aCopyDir) throws IOException {  File metaInfDir=new File(aCopyDir + META_INF);  FileUtils.forceMkdir(metaInfDir);  File metaInf=repository.getMetaInfFolder(aProject);  if (metaInf.exists()) {    FileUtils.copyDirectory(metaInf,metaInfDir);  }}  }
class C{  protected Element narrow(ElementMetadata<?,?> metadata,ValidationContext vc){  ElementKey<?,?> narrowedKey=metadata.getKey();  Class<?> narrowedType=narrowedKey.getElementType();  if (!narrowedType.isInstance(this)) {    if (!getClass().isAssignableFrom(narrowedType)) {      LOGGER.severe("Element of type " + getClass() + " cannot be narrowed to type "+ narrowedType);    }    try {      return adapt(narrowedKey,this);    } catch (    ContentCreationException e) {      LOGGER.log(Level.SEVERE,"Unable to adapt " + getClass() + " to "+ narrowedType,e);    }  }  return this;}  }
class C{  public ConfigFileException(final String msg){  super(msg);}  }
class C{  protected void sequence_S_Do(ISerializationContext context,S_Do semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  public EventClient(InetAddress hostAddress,int hostPort,String deviceName,byte iconType,byte[] iconData) throws IOException {  hasIcon=true;  startClient(hostAddress,hostPort,deviceName,iconType,iconData);}  }
class C{  public Verbose(){  super(Options.set,"Verbose","GC verbosity level",0);}  }
class C{  @Override public boolean swipe(Selector obj,String dir,float percent,int steps) throws UiObjectNotFoundException {  if (obj.toUiObject2() == null) {    return swipe(device.findObject(obj.toUiSelector()),dir,steps);  }  return swipe(obj.toUiObject2(),dir,percent,steps);}  }
class C{  protected int next() throws IOException, ExifInvalidFormatException {  if (!mContainExifData) {    return EVENT_END;  }  int offset=mTiffStream.getReadByteCount();  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  if (offset < endOfTags) {    mTag=readTag();    if (mTag == null) {      return next();    }    if (mNeedToParseOffsetsInCurrentIfd) {      checkOffsetOrImageTag(mTag);    }    return EVENT_NEW_TAG;  } else   if (offset == endOfTags) {    if (mIfdType == IfdId.TYPE_IFD_0) {      long ifdOffset=readUnsignedLong();      if (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested()) {        if (ifdOffset != 0) {          registerIfd(IfdId.TYPE_IFD_1,ifdOffset);        }      }    } else {      int offsetSize=4;      if (mCorrespondingEvent.size() > 0) {        offsetSize=mCorrespondingEvent.firstEntry().getKey() - mTiffStream.getReadByteCount();      }      if (offsetSize < 4) {        Log.w(TAG,"Invalid size of link to next IFD: " + offsetSize);      } else {        long ifdOffset=readUnsignedLong();        if (ifdOffset != 0) {          Log.w(TAG,"Invalid link to next IFD: " + ifdOffset);        }      }    }  }  while (mCorrespondingEvent.size() != 0) {    Entry<Integer,Object> entry=mCorrespondingEvent.pollFirstEntry();    Object event=entry.getValue();    try {      skipTo(entry.getKey());    } catch (    IOException e) {      Log.w(TAG,"Failed to skip to data at: " + entry.getKey() + " for "+ event.getClass().getName()+ ", the file may be broken.");      continue;    }    if (event instanceof IfdEvent) {      mIfdType=((IfdEvent)event).ifd;      mNumOfTagInIfd=mTiffStream.readUnsignedShort();      mIfdStartOffset=entry.getKey();      if (mNumOfTagInIfd * TAG_SIZE + mIfdStartOffset + OFFSET_SIZE > mApp1End) {        Log.w(TAG,"Invalid size of IFD " + mIfdType);        return EVENT_END;      }      mNeedToParseOffsetsInCurrentIfd=needToParseOffsetsInCurrentIfd();      if (((IfdEvent)event).isRequested) {        return EVENT_START_OF_IFD;      } else {        skipRemainingTagsInCurrentIfd();      }    } else     if (event instanceof ImageEvent) {      mImageEvent=(ImageEvent)event;      return mImageEvent.type;    } else {      ExifTagEvent tagEvent=(ExifTagEvent)event;      mTag=tagEvent.tag;      if (mTag.getDataType() != ExifTag.TYPE_UNDEFINED) {        readFullTagValue(mTag);        checkOffsetOrImageTag(mTag);      }      if (tagEvent.isRequested) {        return EVENT_VALUE_OF_REGISTERED_TAG;      }    }  }  return EVENT_END;}  }
class C{  public static long convertAlldayUtcToLocal(Time recycle,long utcTime,String tz){  if (recycle == null) {    recycle=new Time();  }  recycle.timezone=Time.TIMEZONE_UTC;  recycle.set(utcTime);  recycle.timezone=tz;  return recycle.normalize(true);}  }
class C{  public void release(V value){  Preconditions.checkNotNull(value);  Preconditions.checkState(mInUseLength > 0);  mInUseLength--;  addToFreeList(value);}  }
class C{  public LruPool(int maxSize){  this(maxSize,new Configuration<TKey,TValue>());}  }
class C{  public void testPut() throws InterruptedException {  LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    Integer I=new Integer(i);    q.put(I);    assertTrue(q.contains(I));  }  assertEquals(0,q.remainingCapacity());}  }
class C{  public java.util.ArrayList<TreeNode<E>> path(E e){  java.util.ArrayList<TreeNode<E>> list=new java.util.ArrayList<>();  TreeNode<E> current=root;  while (current != null) {    list.add(current);    if (e.compareTo(current.element) < 0) {      current=current.left;    } else     if (e.compareTo(current.element) > 0) {      current=current.right;    } else     break;  }  return list;}  }
class C{  protected void cleanup(){}  }
class C{  public boolean isCloseOnCompletion(){  checkClosed();  return true;}  }
class C{  private boolean collect(List<Completion> res,int num,int bucket,BytesRef output,Arc<Object> arc) throws IOException {  if (output.length == output.bytes.length) {    output.bytes=ArrayUtil.grow(output.bytes);  }  assert output.offset == 0;  output.bytes[output.length++]=(byte)arc.label;  FST.BytesReader fstReader=automaton.getBytesReader();  automaton.readFirstTargetArc(arc,arc,fstReader);  while (true) {    if (arc.label == FST.END_LABEL) {      res.add(new Completion(output,bucket));      if (res.size() >= num)       return true;    } else {      int save=output.length;      if (collect(res,num,bucket,output,new Arc<>().copyFrom(arc))) {        return true;      }      output.length=save;    }    if (arc.isLast()) {      break;    }    automaton.readNextArc(arc,fstReader);  }  return false;}  }
class C{  public static boolean testAarCircle(float minX,float minY,float maxX,float maxY,float centerX,float centerY,float radiusSquared){  float radius2=radiusSquared;  if (centerX < minX) {    float d=(centerX - minX);    radius2-=d * d;  } else   if (centerX > maxX) {    float d=(centerX - maxX);    radius2-=d * d;  }  if (centerY < minY) {    float d=(centerY - minY);    radius2-=d * d;  } else   if (centerY > maxY) {    float d=(centerY - maxY);    radius2-=d * d;  }  return radius2 >= 0.0f;}  }
class C{  public List<Page> normalize(List<Page> pages){  double hubTotal=0;  double authTotal=0;  for (  Page p : pages) {    hubTotal+=Math.pow(p.hub,2);    authTotal+=Math.pow(p.authority,2);  }  for (  Page p : pages) {    if (hubTotal > 0) {      p.hub/=hubTotal;    } else {      p.hub=0;    }    if (authTotal > 0) {      p.authority/=authTotal;    } else {      p.authority=0;    }  }  return pages;}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  private void updateView(Cursor cursor){  mName=cursor.getString(cursor.getColumnIndex(DatabaseColumns.USER_NAME));  mMessage=cursor.getString(cursor.getColumnIndex(DatabaseColumns.MESSAGE));  mUserId=cursor.getString(cursor.getColumnIndex(DatabaseColumns.USER_ID));  mDateTime=cursor.getString(cursor.getColumnIndex(DatabaseColumns.DATE_TIME));  mTags=cursor.getString(cursor.getColumnIndex(DatabaseColumns.TAG_NAME));  mTagId=cursor.getString(cursor.getColumnIndex(DatabaseColumns.TAG_ID));  mConnection=cursor.getString(cursor.getColumnIndex(DatabaseColumns.TAG_USER_COUNT));  mImageUserUrl=cursor.getString(cursor.getColumnIndex(DatabaseColumns.USER_IMAGE));  mWallImageUrl=cursor.getString(cursor.getColumnIndex(DatabaseColumns.WALL_IMAGES));  mTagName=cursor.getString(cursor.getColumnIndex(DatabaseColumns.TAG_NAME));  mDateText.setText(Utils.getElapsedTimeFormat(Long.valueOf(cursor.getString(cursor.getColumnIndex(DatabaseColumns.TIMESTAMP_EPOCH))),cursor,getActivity()));  mNameText.setText(mName);  String groupName=cursor.getString(cursor.getColumnIndex(DatabaseColumns.GROUP_NAME));  groupName=groupName.substring(0,1).toUpperCase() + groupName.substring(1);  mGroupNameText.setText(groupName);  if (mTagName != null) {    mTagName=mTagName.substring(0,1).toUpperCase() + mTagName.substring(1);    mSubCategoryNameText.setText(" > " + mTagName);  } else {    mSubCategoryNameText.setText("");    mTagName="";  }  if (cursor.getString(cursor.getColumnIndex(DatabaseColumns.ADDRESS)) == null) {  } else {    mDateText.setText(mDateText.getText().toString() + " at " + cursor.getString(cursor.getColumnIndex(DatabaseColumns.ADDRESS)));  }  mMessageText.setText(mMessage);  mDateText.setVisibility(View.VISIBLE);  if (mImageUserUrl.contains("assets/fallback/")) {    mImageUserUrl="";  }  mImageUser.setOnClickListener(this);  if (mUserId.equals(AppConstants.UserInfo.INSTANCE.getId())) {    mChatButton.setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(R.drawable.ic_action_tick_white),null,null,null);    if (cursor.getString(cursor.getColumnIndex(DatabaseColumns.STATUS)).equals(AppConstants.WallStatus.OPEN)) {      mIsClosed=false;      mChatButton.setText(getResources().getString(R.string.close));    } else {      mIsClosed=true;      mChatButton.setText(getResources().getString(R.string.closed));    }  }  ColorGenerator generator=ColorGenerator.DEFAULT;  int color=generator.getColor((mName.charAt(0) + "").toUpperCase());  Resources r=getActivity().getResources();  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,24,r.getDisplayMetrics());  TextDrawable drawable=TextDrawable.builder().buildRoundRect((mName.charAt(0) + "").toUpperCase(),color,Math.round(px));  Utils.loadCircularImage(getActivity(),mImageUser,mImageUserUrl,AvatarBitmapTransformation.AvatarSize.NORMAL,drawable);  if (mTags != null) {    mTags=mTags.toUpperCase();  }  if (mWallImageUrl.equals("")) {    mWallImage.setVisibility(View.GONE);    mCommentList.setPadding(0,Math.round(Utils.convertDpToPixel(56,getActivity())),0,0);    mToolbar.setBackgroundColor(getResources().getColor(R.color.primaryColor));    mToolbar.setVisibility(View.VISIBLE);    mGradientView.setVisibility(View.GONE);    setToolbar(mToolbar);    mCommentList.smoothScrollToPosition(0);  } else {    mToolbarTransparent.setTitleTextColor(getResources().getColor(R.color.white));    mToolbarTransparent.setVisibility(View.VISIBLE);    mCommentList.setOnScrollListener(this);    mWallImage.setVisibility(View.VISIBLE);    setToolbar(mToolbarTransparent,"Post",true);    mGradientView.setVisibility(View.VISIBLE);    Glide.with(this).load(mWallImageUrl).asBitmap().centerCrop().override(500,300).animate(R.anim.fade_in).placeholder(R.color.snow_light).into(mWallImage);  }  getActivity().invalidateOptionsMenu();}  }
class C{  private void startPassiveFocus(){  if (mFocusController == null) {    return;  }  mFocusController.showPassiveFocusAtCenter();}  }
class C{  public Builder url(String url){  return url(HttpUrl.parse(url));}  }
class C{  public void auditConfig(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle alloc=allocation.getBounds();  view.setSize(alloc.width,alloc.height);  view.paint(g,allocation);}  }
class C{  private void writeKeyStoreEntry(PrintWriter out){  out.print("keystore \"");  out.print(keyStoreUrlString);  out.print('"');  if (keyStoreType != null && keyStoreType.length() > 0)   out.print(", \"" + keyStoreType + "\"");  if (keyStoreProvider != null && keyStoreProvider.length() > 0)   out.print(", \"" + keyStoreProvider + "\"");  out.println(";");  out.println();}  }
class C{  private String addDefaultProfile(){  String profile=System.getProperty("spring.profiles.active");  if (profile != null) {    log.info("Running with Spring profile(s) : {}",profile);    return profile;  }  log.warn("No Spring profile configured, running with default configuration");  return Constants.SPRING_PROFILE_DEVELOPMENT;}  }
class C{  public ScatterPlotComponent(final String name){  super(name);  model=new ScatterPlotModel();  model.defaultInit();  initializeAttributes();  addListener();}  }
class C{  protected void uninstallComponents(){  if (arrowButton != null) {    unconfigureArrowButton();  }  if (editor != null) {    unconfigureEditor();  }  comboBox.removeAll();  arrowButton=null;}  }
class C{  @Override public boolean isThreadSafe(){  return true;}  }
class C{  private void deleteTipoDocumentoVital(TipoDocumentoVitalVO tipo) throws TipoDocumentoVitalEnUsoException {  if (tipo != null) {    if (documentoVitalDBEntity.getCountDocumentosVitalesByTipo(tipo.getId()) == 0) {      iniciarTransaccion();      Locale locale=getServiceClient().getLocale();      AuditoriaDocumentosVitales.auditaEliminacionTipoDocumentoVital(locale,this,tipo);      tipoDocVitProcedimientoDBEntity.deleteByIdTipoDocVit(tipo.getId());      tipoDocumentoVitalDBEntity.deleteTipoDocumentoVital(tipo.getId());      commit();    } else     throw new TipoDocumentoVitalEnUsoException();  }}  }
class C{  public boolean init(){  log.config("");  MClient client=MClient.get(Env.getCtx());  String ASPFilter="";  if (client.isUseASP())   ASPFilter="   AND (   p.AD_Process_Para_ID IN ( " + "              SELECT pp.AD_Process_Para_ID " + "                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE p.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + client.getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND pp.ASP_Process_ID = p.ASP_Process_ID "+ "                 AND pp.IsActive = 'Y' "+ "                 AND p.IsActive = 'Y' "+ "                 AND l.IsActive = 'Y' "+ "                 AND cl.IsActive = 'Y' "+ "                 AND pp.ASP_Status = 'S') "+ "        OR p.AD_Process_Para_ID IN ( "+ "              SELECT AD_Process_Para_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "                 AND ce.IsActive = 'Y' "+ "                 AND ce.AD_Process_Para_ID IS NOT NULL "+ "                 AND ce.AD_Tab_ID IS NULL "+ "                 AND ce.AD_Field_ID IS NULL "+ "                 AND ce.ASP_Status = 'S') "+ "       ) "+ "   AND p.AD_Process_Para_ID NOT IN ( "+ "          SELECT AD_Process_Para_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "             AND ce.IsActive = 'Y' "+ "             AND ce.AD_Process_Para_ID IS NOT NULL "+ "             AND ce.AD_Tab_ID IS NULL "+ "             AND ce.AD_Field_ID IS NULL "+ "             AND ce.ASP_Status = 'H')";  String sql=null;  if (Env.isBaseLanguage(Env.getCtx(),"AD_Process_Para"))   sql="SELECT p.Name, p.Description, p.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, "+ "p.ReadOnlyLogic, p.DisplayLogic "+ "FROM AD_Process_Para p"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND p.IsActive='Y' " + ASPFilter + " ORDER BY SeqNo"; else   sql="SELECT t.Name, t.Description, t.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, "+ "p.ReadOnlyLogic, p.DisplayLogic "+ "FROM AD_Process_Para p"+ " INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND p.IsActive='Y' "+ ASPFilter+ " ORDER BY SeqNo";  boolean hasFields=false;  Rows rows=new Rows();  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_processInfo.getAD_Process_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      hasFields=true;      createField(rs,rows);      isPair=!isPair;    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_wEditors.size() || m_mFields2.size() != m_wEditors2.size())   log.log(Level.SEVERE,"View & Model vector size is different");  if (hasFields) {    centerPanel.appendChild(rows);    dynamicDisplay();  } else   dispose();  return hasFields;}  }
class C{  public boolean isConst(){  return false;}  }
class C{  public static boolean isBlank(final String value){  return (value == null || EMPTY_STRING.equals(value.trim()));}  }
class C{  public void add(String argName,String desc,int expectedNumberOfArguments){  add(argName,desc,expectedNumberOfArguments,false);}  }
class C{  protected void waitForUiThread(){  final Display display=getDisplay();  while (display.readAndDispatch()) {  }  display.update();}  }
class C{  public ClientMessage sendMessage(SimpleString targetAddress,byte[] body){  ClientMessage message=createMessage(body);  sendMessage(targetAddress,message);  return message;}  }
class C{  public void testFilterMenu(){  openPatientList();  click(viewWithText("All present patients"));  waitForProgressFragment();  expectVisible(viewWithText("Triage"));  expectVisible(viewWithText("Pregnant"));}  }
class C{  private UnManagedVolume createUnManagedVolume(UnManagedVolume unManagedVolume,String unManagedVolumeNativeGuid,XtremIOVolume volume,Map<String,List<UnManagedVolume>> igVolumesMap,StorageSystem system,StoragePool pool,DbClient dbClient){  boolean created=false;  StringSetMap unManagedVolumeInformation=null;  Map<String,String> unManagedVolumeCharacteristics=null;  if (null == unManagedVolume) {    unManagedVolume=new UnManagedVolume();    unManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));    unManagedVolume.setNativeGuid(unManagedVolumeNativeGuid);    unManagedVolume.setStorageSystemUri(system.getId());    if (pool != null) {      unManagedVolume.setStoragePoolUri(pool.getId());    }    created=true;    unManagedVolumeInformation=new StringSetMap();    unManagedVolumeCharacteristics=new HashMap<String,String>();  } else {    unManagedVolumeInformation=unManagedVolume.getVolumeInformation();    unManagedVolumeCharacteristics=unManagedVolume.getVolumeCharacterstics();  }  unManagedVolume.setLabel(volume.getVolInfo().get(1));  Boolean isVolumeExported=false;  if (!volume.getLunMaps().isEmpty()) {    unManagedVolume.getUnmanagedExportMasks().clear();    unManagedVolume.getInitiatorNetworkIds().clear();    unManagedVolume.getInitiatorUris().clear();    isVolumeExported=true;    for (    List<Object> lunMapEntries : volume.getLunMaps()) {      @SuppressWarnings("unchecked") List<Object> igDetails=(List<Object>)lunMapEntries.get(0);      if (null == igDetails.get(1) || null == lunMapEntries.get(2)) {        log.warn("IG Name is null in returned lun map response for volume {}",volume.toString());        continue;      }      String igNameToProcess=(String)igDetails.get(1);      List<UnManagedVolume> igVolumes=igVolumesMap.get(igNameToProcess);      if (igVolumes == null) {        igVolumes=new ArrayList<UnManagedVolume>();        igVolumesMap.put(igNameToProcess,igVolumes);      }      igVolumes.add(unManagedVolume);    }  }  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),isVolumeExported.toString());  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),FALSE);  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString(),FALSE);  StringSet deviceLabel=new StringSet();  deviceLabel.add(volume.getVolInfo().get(1));  unManagedVolumeInformation.put(SupportedVolumeInformation.DEVICE_LABEL.toString(),deviceLabel);  String volumeWWN=volume.getWwn().isEmpty() ? volume.getVolInfo().get(0) : volume.getWwn();  unManagedVolume.setWwn(volumeWWN);  StringSet systemTypes=new StringSet();  systemTypes.add(system.getSystemType());  StringSet accessState=new StringSet();  accessState.add(Volume.VolumeAccessState.READWRITE.getState());  unManagedVolumeInformation.put(SupportedVolumeInformation.ACCESS.toString(),accessState);  StringSet provCapacity=new StringSet();  provCapacity.add(String.valueOf(Long.parseLong(volume.getAllocatedCapacity()) * 1024));  unManagedVolumeInformation.put(SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);  StringSet allocatedCapacity=new StringSet();  allocatedCapacity.add(String.valueOf(Long.parseLong(volume.getAllocatedCapacity()) * 1024));  unManagedVolumeInformation.put(SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  unManagedVolumeInformation.put(SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);  StringSet nativeId=new StringSet();  nativeId.add(volume.getVolInfo().get(0));  unManagedVolumeInformation.put(SupportedVolumeInformation.NATIVE_ID.toString(),nativeId);  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),TRUE);  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),TRUE);  StringSet bwValues=new StringSet();  bwValues.add("0");  if (unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString()) == null) {    unManagedVolumeInformation.put(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString(),bwValues);  } else {    unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IO_BANDWIDTH.toString()).replace(bwValues);  }  StringSet iopsVal=new StringSet();  iopsVal.add("0");  if (unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString()) == null) {    unManagedVolumeInformation.put(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString(),iopsVal);  } else {    unManagedVolumeInformation.get(SupportedVolumeInformation.EMC_MAXIMUM_IOPS.toString()).replace(iopsVal);  }  if (null != pool) {    unManagedVolume.setStoragePoolUri(pool.getId());    StringSet pools=new StringSet();    pools.add(pool.getId().toString());    unManagedVolumeInformation.put(SupportedVolumeInformation.STORAGE_POOL.toString(),pools);    StringSet driveTypes=pool.getSupportedDriveTypes();    if (null != driveTypes) {      unManagedVolumeInformation.put(SupportedVolumeInformation.DISK_TECHNOLOGY.toString(),driveTypes);    }    StringSet matchedVPools=DiscoveryUtils.getMatchedVirtualPoolsForPool(dbClient,pool.getId(),unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString()));    log.debug("Matched Pools : {}",Joiner.on("\t").join(matchedVPools));    if (null == matchedVPools || matchedVPools.isEmpty()) {      unManagedVolume.getSupportedVpoolUris().clear();    } else {      unManagedVolume.getSupportedVpoolUris().replace(matchedVPools);      log.info("Replaced Pools : {}",Joiner.on("\t").join(unManagedVolume.getSupportedVpoolUris()));    }  }  unManagedVolume.setVolumeInformation(unManagedVolumeInformation);  if (unManagedVolume.getVolumeCharacterstics() == null) {    unManagedVolume.setVolumeCharacterstics(new StringMap());  }  unManagedVolume.getVolumeCharacterstics().replace(unManagedVolumeCharacteristics);  if (created) {    unManagedVolumesToCreate.add(unManagedVolume);  } else {    unManagedVolumesToUpdate.add(unManagedVolume);  }  return unManagedVolume;}  }
class C{  public static boolean isDominated(Individual i1,Individual i2){  PerformanceVector pv1=i1.getPerformance();  PerformanceVector pv2=i2.getPerformance();  double[][] performances=new double[pv1.getSize()][2];  for (int p=0; p < performances.length; p++) {    performances[p][0]=pv1.getCriterion(p).getFitness();    performances[p][1]=pv2.getCriterion(p).getFitness();  }  boolean dominated=true;  for (int p=0; p < performances.length; p++) {    dominated&=(performances[p][1] >= performances[p][0]);  }  boolean oneActuallyBetter=false;  for (int p=0; p < performances.length; p++) {    oneActuallyBetter|=(performances[p][1] > performances[p][0]);  }  dominated&=oneActuallyBetter;  return dominated;}  }
class C{  protected boolean[] instanceWeights(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("associator uses instance weights");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=2 * getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  boolean[] result=new boolean[2];  Instances train=null;  Associator[] associators=null;  AssociatorEvaluation evaluationB=null;  AssociatorEvaluation evaluationI=null;  boolean evalFail=false;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);    }    associators=AbstractAssociator.makeCopies(getAssociator(),2);    evaluationB=new AssociatorEvaluation();    evaluationI=new AssociatorEvaluation();    evaluationB.evaluate(associators[0],train);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    for (int i=0; i < train.numInstances(); i++) {      train.instance(i).setWeight(0);    }    Random random=new Random(1);    for (int i=0; i < train.numInstances() / 2; i++) {      int inst=Math.abs(random.nextInt()) % train.numInstances();      int weight=Math.abs(random.nextInt()) % 10 + 1;      train.instance(inst).setWeight(weight);    }    evaluationI.evaluate(associators[1],train);    if (evaluationB.equals(evaluationI)) {      evalFail=true;      throw new Exception("evalFail");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      if (evalFail) {        println("Results don't differ between non-weighted and " + "weighted instance models.");        println("Here are the results:\n");        println(evaluationB.toSummaryString("\nboth methods\n"));      } else {        print("Problem during building");        println(": " + ex.getMessage() + "\n");      }      println("Here is the dataset:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");      println("=== Train Weights ===\n");      for (int i=0; i < train.numInstances(); i++) {        println(" " + (i + 1) + "    "+ train.instance(i).weight());      }    }  }  return result;}  }
class C{  void write(ImageOutputStream ios) throws IOException {  length=2 + ((data != null) ? data.length : 0);  writeTag(ios);  if (data != null) {    ios.write(data);  }}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("UserAgentParser.parse");  UserAgent userAgent=new UserAgent();  try {    headerName(TokenTypes.USER_AGENT);    if (this.lexer.lookAhead(0) == '\n')     throw createParseException("empty header");    while (this.lexer.lookAhead(0) != '\n' && this.lexer.lookAhead(0) != '\0') {      if (this.lexer.lookAhead(0) == '(') {        String comment=this.lexer.comment();        userAgent.addProductToken('(' + comment + ')');      } else {        this.getLexer().SPorHT();        String product=this.lexer.byteStringNoSlash();        if (product == null)         throw createParseException("Expected product string");        StringBuffer productSb=new StringBuffer(product);        if (this.lexer.peekNextToken().getTokenType() == TokenTypes.SLASH) {          this.lexer.match(TokenTypes.SLASH);          this.getLexer().SPorHT();          String productVersion=this.lexer.byteStringNoSlash();          if (productVersion == null)           throw createParseException("Expected product version");          productSb.append("/");          productSb.append(productVersion);        }        userAgent.addProductToken(productSb.toString());      }      this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("UserAgentParser.parse");  }  return userAgent;}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  public SamSequence(SAMRecord record){  assert record != null;  mReadName=new String(record.getReadName().toCharArray());  mFlags=getFlags(record);  mReadBases=record.getReadBases();  mBaseQualities=record.getBaseQualities();  mProjectedSplitReadPosition=record.getAlignmentStart() * ((record.getFlags() & SamBamConstants.SAM_MATE_IS_REVERSE) != 0 ? 1 : -1);}  }
class C{  protected int _sliceRank(int rank){  return sliceZero + rank * sliceStride;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=in.readFields();  String language=(String)fields.get("language","");  String script=(String)fields.get("script","");  String country=(String)fields.get("country","");  String variant=(String)fields.get("variant","");  String extStr=(String)fields.get("extensions","");  baseLocale=BaseLocale.getInstance(convertOldISOCodes(language),script,country,variant);  if (extStr.length() > 0) {    try {      InternalLocaleBuilder bldr=new InternalLocaleBuilder();      bldr.setExtensions(extStr);      localeExtensions=bldr.getLocaleExtensions();    } catch (    LocaleSyntaxException e) {      throw new IllformedLocaleException(e.getMessage());    }  } else {    localeExtensions=null;  }}  }
class C{  public void dataSinkUpdate(DataSinkEvent evt){  if (evt instanceof EndOfStreamEvent) {synchronized (waitFileSync) {      fileDone=true;      waitFileSync.notifyAll();    }  } else   if (evt instanceof DataSinkErrorEvent) {synchronized (waitFileSync) {      fileDone=true;      fileSuccess=false;      waitFileSync.notifyAll();    }  }}  }
class C{  @SuppressWarnings("rawtypes") protected KafkaSpoutWrapper createKafkaSpout(Map conf,TopologyContext context,SpoutOutputCollector collector,final String topic,String schemeClsName,SpoutSpec spoutSpec,Map<String,StreamDefinition> sds) throws Exception {  String kafkaBrokerZkQuorum=config.getString("spout.kafkaBrokerZkQuorum");  BrokerHosts hosts=null;  if (config.hasPath("spout.kafkaBrokerZkBasePath")) {    hosts=new ZkHosts(kafkaBrokerZkQuorum,config.getString("spout.kafkaBrokerZkBasePath"));  } else {    hosts=new ZkHosts(kafkaBrokerZkQuorum);  }  String transactionZkRoot=DEFAULT_STORM_KAFKA_TRANSACTION_ZK_ROOT;  if (config.hasPath("spout.stormKafkaTransactionZkPath")) {    transactionZkRoot=config.getString("spout.stormKafkaTransactionZkPath");  }  String zkStateTransactionRelPath=DEFAULT_STORM_KAFKA_TRANSACTION_ZK_RELATIVE_PATH;  if (config.hasPath("spout.stormKafkaEagleConsumer")) {    zkStateTransactionRelPath=config.getString("spout.stormKafkaEagleConsumer");  }  SpoutConfig spoutConfig=new SpoutConfig(hosts,topic,transactionZkRoot,zkStateTransactionRelPath + "/" + topic+ "/"+ topologyId);  boolean stormKafkaUseSameZkQuorumWithKafkaBroker=config.getBoolean("spout.stormKafkaUseSameZkQuorumWithKafkaBroker");  if (stormKafkaUseSameZkQuorumWithKafkaBroker) {    ZkServerPortUtils utils=new ZkServerPortUtils(kafkaBrokerZkQuorum);    spoutConfig.zkServers=utils.getZkHosts();    spoutConfig.zkPort=utils.getZkPort();  } else {    ZkServerPortUtils utils=new ZkServerPortUtils(config.getString("spout.stormKafkaTransactionZkQuorum"));    spoutConfig.zkServers=utils.getZkHosts();    spoutConfig.zkPort=utils.getZkPort();  }  spoutConfig.stateUpdateIntervalMs=config.hasPath("spout.stormKafkaStateUpdateIntervalMs") ? config.getInt("spout.stormKafkaStateUpdateIntervalMs") : 2000;  spoutConfig.fetchSizeBytes=config.hasPath("spout.stormKafkaFetchSizeBytes") ? config.getInt("spout.stormKafkaFetchSizeBytes") : 1048586;  if (config.hasPath("spout.stormKafkaStartOffsetTime")) {    spoutConfig.startOffsetTime=config.getInt("spout.stormKafkaStartOffsetTime");  }  spoutConfig.scheme=createMultiScheme(conf,topic,schemeClsName);  KafkaSpoutWrapper wrapper=new KafkaSpoutWrapper(spoutConfig,kafkaSpoutMetric);  SpoutOutputCollectorWrapper collectorWrapper=new SpoutOutputCollectorWrapper(this,collector,topic,spoutSpec,numOfRouterBolts,sds,this.serializer);  wrapper.open(conf,context,collectorWrapper);  if (LOG.isInfoEnabled()) {    LOG.info("create and open kafka wrapper: topic {}, scheme class{} ",topic,schemeClsName);  }  return wrapper;}  }
class C{  public static void putCsrfIntoScope(final Object csrf,final MutableAttributeMap context){  context.put("csrf",csrf);}  }
class C{  public PutWarmerRequest name(String name){  this.name=name;  return this;}  }
class C{  private boolean checkAttributeChanged(String existing,String current){  if (existing == null && current == null) {    return false;  }  if ((existing == null) ^ (current == null)) {    return true;  }  return (!existing.equalsIgnoreCase(current));}  }
class C{  private static void invokePrint(String method,String tag,String message){  try {    Class<android.util.Log> logClass=android.util.Log.class;    Method logMethod=logClass.getMethod(method,String.class,String.class);    logMethod.setAccessible(true);    logMethod.invoke(null,tag,message);  } catch (  Exception e) {    System.out.println(tag + ": " + message);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_notationsremovenameditem1.class,args);}  }
class C{  private String constructISCSIQuery(String systemId,String hsdId,List<String> scsiNameList,String model){  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray array=new StorageArray(systemId);  Add addOp=new Add(HDSConstants.ISCSI_NAME_FOR_HSD_TARGET);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.ADD,addOp);  attributeMap.put(HDSConstants.MODEL,model);  HostStorageDomain hsd=new HostStorageDomain(hsdId);  attributeMap.put(HDSConstants.HOST_STORAGE_DOMAIN,hsd);  List<ISCSIName> iSCSIObjList=new ArrayList<ISCSIName>();  if (null != scsiNameList && !scsiNameList.isEmpty()) {    for (    String iScsiName : scsiNameList) {      ISCSIName iSCSIName=new ISCSIName(iScsiName,null);      iSCSIObjList.add(iSCSIName);    }  }  attributeMap.put(HDSConstants.ISCSINAME_LIST,iSCSIObjList);  String addISCSINamesToHSDQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.ADD_ISCSI_NAME_TO_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  return addISCSINamesToHSDQuery;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public PBEKeySpec(char[] password,byte[] salt,int iterationCount){  if (salt == null) {    throw new NullPointerException("salt == null");  }  if (salt.length == 0) {    throw new IllegalArgumentException("salt.length == 0");  }  if (iterationCount <= 0) {    throw new IllegalArgumentException("iterationCount <= 0");  }  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;  this.keyLength=0;}  }
class C{  public static boolean isDataUri(Uri uri){  return DATA_SCHEME.equals(getSchemeOrNull(uri));}  }
class C{  public void testNonPrefixedCommand() throws Exception {  ProcessHelper processHelper=new ProcessHelper();  processHelper.configure();  processHelper.exec("Running an un-prefixed echo command","echo 'hello!'");}  }
class C{  public static void write(float lt,float ln,int px1,int py1,int radius,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.POINT_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_POINT);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(px1);  dos.writeInt(py1);  dos.writeInt(radius);  properties.write(dos);}  }
class C{  public static long testTimeSet(double[] list,MySet<Double> set){  long startTime=System.currentTimeMillis();  for (int i=0; i < VALUES; i++) {    set.contains(list[i]);  }  return System.currentTimeMillis() - startTime;}  }
class C{  public void removeTargetInfo(final CoordinatorSerializable info,boolean checkClusterUpgradable) throws CoordinatorClientException {  if (info == null) {    return;  }  final CoordinatorClassInfo coordinatorInfo=info.getCoordinatorClassInfo();  String id=coordinatorInfo.id;  String kind=coordinatorInfo.kind;  if (getTargetInfoLock()) {    try {      if (checkClusterUpgradable && !isClusterUpgradable()) {        throw APIException.serviceUnavailable.clusterStateNotStable();      }      ConfigurationImpl cfg=new ConfigurationImpl();      cfg.setId(id);      cfg.setKind(kind);      cfg.setConfig(TARGET_INFO,info.encodeAsString());      _coordinator.removeServiceConfiguration(cfg);      _log.info("Target info removed: {}",info);    } catch (    Exception e) {      throw SyssvcException.syssvcExceptions.coordinatorClientError("Failed to remove target info. " + e.getMessage());    } finally {      releaseTargetVersionLock();    }  } else {    throw SyssvcException.syssvcExceptions.coordinatorClientError("Failed to remove target info. Unable to obtain target lock");  }}  }
class C{  public CategoryImageServiceImpl(final Map<String,CategoryImageRetrieveStrategy> strategies,final String defaultStrategy,final CacheManager cacheManager){  super(cacheManager);  this.strategies=strategies;  this.defaultStrategy=defaultStrategy;}  }
class C{  public Statement createStatement(){  StatementImpl statement=new StatementImpl();  return statement;}  }
class C{  public void removeIndexInterval(int index0,int index1){  int rmMinIndex=Math.min(index0,index1);  int rmMaxIndex=Math.max(index0,index1);  int gapLength=(rmMaxIndex - rmMinIndex) + 1;  for (int i=rmMinIndex; i <= maxIndex; i++) {    setState(i,value.get(i + gapLength));  }  int leadIndex=this.leadIndex;  if (leadIndex == 0 && rmMinIndex == 0) {  } else   if (leadIndex > rmMaxIndex) {    leadIndex=this.leadIndex - gapLength;  } else   if (leadIndex >= rmMinIndex) {    leadIndex=rmMinIndex - 1;  }  int anchorIndex=this.anchorIndex;  if (anchorIndex == 0 && rmMinIndex == 0) {  } else   if (anchorIndex > rmMaxIndex) {    anchorIndex=this.anchorIndex - gapLength;  } else   if (anchorIndex >= rmMinIndex) {    anchorIndex=rmMinIndex - 1;  }  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {    updateLeadAnchorIndices(anchorIndex,leadIndex);  }  fireValueChanged();}  }
class C{  public final static <T>Stream<T> completableFutureToStream(final CompletableFuture<T> future){  return Stream.of(future.join());}  }
class C{  @SuppressWarnings({"RedundantTypeArguments"}) private <T>T deserializeMessage(byte[] data) throws IgniteCheckedException {  return marsh.<T>unmarshal(data,getClass().getClassLoader());}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  public static boolean deleteFile(String path){  if (Handler_String.isBlank(path)) {    return true;  }  File file=new File(path);  if (!file.exists()) {    return true;  }  if (file.isFile()) {    return file.delete();  }  if (!file.isDirectory()) {    return false;  }  for (  File f : file.listFiles()) {    if (f.isFile()) {      f.delete();    } else     if (f.isDirectory()) {      deleteFile(f.getAbsolutePath());    }  }  return file.delete();}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public void skip(int n){  if (n < 0) {    throw new IllegalArgumentException();  }  for (int i=0; i < n; i++) {    nextInt();  }}  }
class C{  public void testValueOfNegScalePos(){  long a=-98374823947823578L;  int scale=12;  BigDecimal aNumber=BigDecimal.valueOf(a,scale);  String result="-98374.823947823578";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  public static void pdagToDag(Graph g){  Graph p=new EdgeListGraph(g);  List<Edge> undirectedEdges=new ArrayList<>();  for (  Edge edge : g.getEdges()) {    if (edge.getEndpoint1() == Endpoint.TAIL && edge.getEndpoint2() == Endpoint.TAIL && !undirectedEdges.contains(edge)) {      undirectedEdges.add(edge);    }  }  g.removeEdges(undirectedEdges);  List<Node> pNodes=p.getNodes();  do {    Node x=null;    for (    Node pNode : pNodes) {      x=pNode;      if (p.getChildren(x).size() > 0) {        continue;      }      Set<Node> neighbors=new HashSet<>();      for (      Edge edge : p.getEdges()) {        if (edge.getNode1() == x || edge.getNode2() == x) {          if (edge.getEndpoint1() == Endpoint.TAIL && edge.getEndpoint2() == Endpoint.TAIL) {            if (edge.getNode1() == x) {              neighbors.add(edge.getNode2());            } else {              neighbors.add(edge.getNode1());            }          }        }      }      if (neighbors.size() > 0) {        Collection<Node> parents=p.getParents(x);        Set<Node> all=new HashSet<>(neighbors);        all.addAll(parents);        if (!GraphUtils.isClique(all,p)) {          continue;        }      }      for (      Node neighbor : neighbors) {        Node node1=g.getNode(neighbor.getName());        Node node2=g.getNode(x.getName());        g.addDirectedEdge(node1,node2);      }      p.removeNode(x);      break;    }    pNodes.remove(x);  } while (pNodes.size() > 0);}  }
class C{  public void radiusODSearch(double d,double p,SearchObject rObject,int kindOfDistance){  int number=this.getNumberOfObjects();  long m=Math.round(number * (1 - p));  int counter=0;  for (int i=0; i < number; i++) {    if (rObject.getDistance(this.listOfObjects.elementAt(i),kindOfDistance) < d) {      counter=counter + 1;      if (counter > m) {        break;      }    }  }  if (counter > m) {    rObject.setOutlierStatus(false);  } else {    rObject.setOutlierStatus(true);  }}  }
class C{  public AssertionError(long detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  public Drawable loadIcon(PackageManager pm){  if (mIcon != 0 && mSourcePackage != null) {    Drawable icon=pm.getDrawable(mSourcePackage,mIcon,null);    if (icon != null) {      return icon;    }  }  return null;}  }
class C{  public boolean equals(Identifier id){  return this.id.equals(id);}  }
class C{  private Future<JsonValue> execute(Request request,boolean expectsResult,ICancellationToken token) throws TypeScriptException {  boolean eventRequest=(request instanceof GeterrRequest);  RequestItem requestInfo=null;  Future<JsonValue> result=null;  if (expectsResult) {    requestInfo=new RequestItem(request,request);    if (!request.isAsynch()) {      if (eventRequest) {        result=diagPool.submit(requestInfo.callbacks);      } else {        result=pool.submit(requestInfo.callbacks);      }    }  } else {    requestInfo=new RequestItem(request,null);  }synchronized (requestQueue) {    this.requestQueue.add(requestInfo);  }  this.sendNextRequests();  return result;}  }
class C{  public NuanceSpeech(DialogueSystem system){  this.system=system;  List<String> missingParams=new LinkedList<String>(Arrays.asList("id","key","lang"));  missingParams.removeAll(system.getSettings().params.keySet());  if (!missingParams.isEmpty()) {    throw new RuntimeException("Missing parameters: " + missingParams);  }  currentSynthesis=new ArrayList<SpeechData>();  buildClients();  system.enableSpeech(true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedataexceedslengthofarg.class,args);}  }
class C{  ConcurrentSkipListSet(ConcurrentNavigableMap<E,Object> m){  this.m=m;}  }
class C{  public static byte[] encodeArrayCopy(final byte[] a,int start,int length){  return encodeArray(a,new byte[length],start,length);}  }
class C{  public Boolean isThin(){  return thin;}  }
class C{  protected void sequence_ProjectReference(ISerializationContext context,ProjectReference semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4mfPackage.Literals.PROJECT_REFERENCE__PROJECT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4mfPackage.Literals.PROJECT_REFERENCE__PROJECT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getProjectReferenceAccess().getProjectSimpleProjectDescriptionParserRuleCall_0(),semanticObject.getProject());  feeder.finish();}  }
class C{  private void updateMaterialsWithLights(){  for (  Object3D child : mChildren) {    updateChildMaterialWithLights(child);  }}  }
class C{  public static String[] sha256md5Hashes(byte[] data,int length) throws NoSuchAlgorithmException {  return new String[]{sha256Hash(data,length),md5Hash(data,length)};}  }
class C{  static <T>T checkNotNull(T reference,String errorMessage,Object... args){  if (reference == null) {    throw new NullPointerException(String.format(errorMessage,args));  }  return reference;}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public E poll(){  if (size == 0)   return null;  return removeFirst();}  }
class C{  public GDSException(int type,int fbErrorCode,String strParam){  this.type=type;  this.intParam=fbErrorCode;  this.strParam=null;  setNext(new GDSException(ISCConstants.isc_arg_string,strParam));}  }
class C{  @Override public int hashCode(){  return PlainSocketFactory.class.hashCode();}  }
class C{  private PostgreSQLTagManagerFunctions(){}  }
class C{  public void testNextLongBounded2(){  for (long least=-86028121; least < MAX_LONG_BOUND; least+=982451653L) {    for (long bound=least + 2; bound < least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      long f=ThreadLocalRandom.current().nextLong(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      long j;      while (i < NCALLS && (j=ThreadLocalRandom.current().nextLong(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public JTextField(){  this(null,null,0);}  }
class C{  private static int subscript(int bitIndex){  return bitIndex >> LOG_BITS_PER_UNIT;}  }
class C{  @Override public long clearOldEntries(long cacheExpirationMs){  long oldestRemainingEntryAgeMs=0L;synchronized (mLock) {    try {      long now=mClock.now();      Collection<DiskStorage.Entry> allEntries=mStorage.getEntries();      final long cacheSizeBeforeClearance=mCacheStats.getSize();      int itemsRemovedCount=0;      long itemsRemovedSize=0L;      for (      DiskStorage.Entry entry : allEntries) {        long entryAgeMs=Math.max(1,Math.abs(now - entry.getTimestamp()));        if (entryAgeMs >= cacheExpirationMs) {          long entryRemovedSize=mStorage.remove(entry);          mResourceIndex.remove(entry.getId());          if (entryRemovedSize > 0) {            itemsRemovedCount++;            itemsRemovedSize+=entryRemovedSize;            SettableCacheEvent cacheEvent=SettableCacheEvent.obtain().setResourceId(entry.getId()).setEvictionReason(CacheEventListener.EvictionReason.CONTENT_STALE).setItemSize(entryRemovedSize).setCacheSize(cacheSizeBeforeClearance - itemsRemovedSize);            mCacheEventListener.onEviction(cacheEvent);            cacheEvent.recycle();          }        } else {          oldestRemainingEntryAgeMs=Math.max(oldestRemainingEntryAgeMs,entryAgeMs);        }      }      mStorage.purgeUnexpectedResources();      if (itemsRemovedCount > 0) {        maybeUpdateFileCacheSize();        mCacheStats.increment(-itemsRemovedSize,-itemsRemovedCount);      }    } catch (    IOException ioe) {      mCacheErrorLogger.logError(CacheErrorLogger.CacheErrorCategory.EVICTION,TAG,"clearOldEntries: " + ioe.getMessage(),ioe);    }  }  return oldestRemainingEntryAgeMs;}  }
class C{  public CopierImplementation(long offset,long length){  this.offset=offset;  this.length=length;  Preconditions.checkArgument(offset >= 0);  Preconditions.checkArgument(length >= 0);}  }
class C{  protected ModelContext parseContextData(ResourceLocation location,String metadata){  JsonParser parser=new JsonParser();  ImmutableMap<String,String> dataMap=parseJsonElementList(parser,metadata);  if (!dataMap.containsKey("source"))   this.throwLoaderException("Source model was not specified");  String sourceItem=parser.parse(dataMap.get("source")).getAsString();  String customData=null;  if (dataMap.containsKey("custom")) {    customData=dataMap.get("custom");  }  boolean inheritOverrides=true;  if (dataMap.containsKey("inherit_overrides")) {    try {      inheritOverrides=parser.parse(dataMap.get("inherit_overrides")).getAsBoolean();    } catch (    Exception ex) {      this.throwLoaderException("Malformed inherit_overrides value. Must be a boolean",ex);    }  }  boolean shouldCacheOverrides=true;  if (dataMap.containsKey("cache_overrides")) {    try {      shouldCacheOverrides=parser.parse(dataMap.get("cache_overrides")).getAsBoolean();    } catch (    Exception ex) {      this.throwLoaderException("Malformed cache_overrides value. Must be a boolean",ex);    }  }  ResourceLocation childModel=new ResourceLocation(sourceItem);  ModelResourceLocation sourceLocation=new ModelResourceLocation(new ResourceLocation(childModel.getResourceDomain(),childModel.getResourcePath()),"inventory");  return new ModelContext(sourceLocation,location,customData,inheritOverrides,shouldCacheOverrides);}  }
class C{  public void onPostCreated(final String category,final Attachment attachment,final int postLength){  if (ENABLED) {    track("Problem Posted",mPropsGenerator.makeProblemPostedProps(category,attachment,postLength));  }}  }
class C{  @Override public MutableTrigger build(){  SimpleTriggerImpl st=new SimpleTriggerImpl();  st.setRepeatInterval(interval);  st.setRepeatCount(repeatCount);  st.setMisfireInstruction(misfireInstruction);  return st;}  }
class C{  public void printGraphvizDotText(LogicCircuit lc,String outfile){  String gvText="#GRAPHVIZ_OUTPUT \n";  gvText+="digraph{ \n";  gvText+="rankdir=LR; \n";  gvText+="splines=ortho; \n";  for (int i=0; i < lc.get_output_gates().size(); ++i) {    String output_score="";    if (lc.get_output_gates().get(i).get_scores().get_score() != -1.0000)     output_score="\\n" + String.format("%8.2f",lc.get_output_gates().get(i).get_scores().get_score());    String output_logics="\\n" + BooleanLogic.logicString(lc.get_output_gates().get(i).get_logics());    gvText+=lc.get_output_gates().get(i).Name + "[shape=none,label=\"" + lc.get_output_gates().get(i).Name+ output_score+ output_logics+ "\"]; \n";  }  for (int i=lc.get_Gates().size() - 1; i >= 0; --i) {    Gate g=lc.get_Gates().get(i);    String g_logics="\\n" + BooleanLogic.logicString(g.get_logics());    String graycolor="100";    String labelscore="";    if (g.get_scores().get_score() != -1.0) {      labelscore="\\n" + String.format("%8.2f",g.get_scores().get_score());    }    if (g.Type == Gate.GateType.OUTPUT || g.Type == Gate.GateType.OUTPUT_OR) {      continue;    }    if (!g.Name.matches("[A-Za-z0-9_]+")) {      g.Name=g.Type + "" + Integer.toString(g.RIndex);    }    String shape=g.Type + " " + g.Name+ " "+ g.get_distance_to_input();    if (g.Type == Gate.GateType.INPUT) {      shape=g.Type + " " + g.Name+ " "+ g.get_distance_to_input();      gvText+=g.Name + "[shape=none,label=\"" + shape+ labelscore+ g_logics+ "\"]; \n";    } else {      String shape_type="box";      if (g.Type == Gate.GateType.OR)       shape_type="none";      if (g.Type == Gate.GateType.AND)       shape_type="oval";      gvText+=g.Name + "[shape=" + shape_type+ ",style=filled,fillcolor=gray"+ graycolor+ ",label=\""+ shape+ labelscore+ g_logics+ "\"]; \n";    }  }  for (int i=0; i < lc.get_Wires().size(); ++i) {    Wire w=lc.get_Wires().get(i);    String child=w.To.Name;    String parent=w.From.Name;    gvText+=child + "->" + parent+ "; \n";  }  gvText+="} \n";  Util.fileWriter(_output_directory + outfile,gvText,false);}  }
class C{  public final void skipTableSwitchOffsets(int num){  if (VM.VerifyAssertions)   VM._assert(opcode == JBC_tableswitch);  bcIndex+=(num << LOG_BYTES_IN_INT);}  }
class C{  public void testDataIsFetchedFromDialogTCP() throws Throwable {  ListView listView=alertDialog.getListView();  View child=listView.getChildAt(1);  clickAndValidate(child);}  }
class C{  public Mode(Mode baseMode){  this(ANONYMOUS_MODE_NAME_PREFIX + anonymousModeCounter++,baseMode);  anonymous=true;}  }
class C{  private void checkSystemTypeIsVMAX(final BlockVirtualPoolParam createParam){  if (null == createParam.getSystemType() || createParam.getSystemType().equalsIgnoreCase(NONE)) {    throw APIException.badRequests.parameterOnlySupportedForVmax("SRDF Remote Protection");  }  if (!VirtualPool.SystemType.vmax.toString().equalsIgnoreCase(createParam.getSystemType())) {    throw APIException.badRequests.parameterOnlySupportedForVmax("SRDF Remote Protection");  }}  }
class C{  private GroupPanelController(){  panel=new GroupPanel();}  }
class C{  public void releaseControlDelayed(){  clearReleaseControl();  final Message msg=obtainMessage(MSG_RELEASE_CONTROL);  sendMessageDelayed(msg,RELEASE_CONTROL_TIMEOUT);}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public Builder readTimeout(int timeoutMillis){  httpConfig.readTimeout=timeoutMillis;  return this;}  }
class C{  public double calculateLogLikelihood(){  double logL=0.0;  for (  Statistic statistic : dataList) {    for (int j=0; j < statistic.getDimension(); j++) {      logL-=Math.log(statistic.getStatisticValue(j));    }  }  return logL;}  }
class C{  public static boolean isBeforeDay(Calendar cal1,Calendar cal2){  if (cal1 == null || cal2 == null) {    throw new IllegalArgumentException("The dates must not be null");  }  if (cal1.get(Calendar.ERA) < cal2.get(Calendar.ERA))   return true;  if (cal1.get(Calendar.ERA) > cal2.get(Calendar.ERA))   return false;  if (cal1.get(Calendar.YEAR) < cal2.get(Calendar.YEAR))   return true;  if (cal1.get(Calendar.YEAR) > cal2.get(Calendar.YEAR))   return false;  return cal1.get(Calendar.DAY_OF_YEAR) < cal2.get(Calendar.DAY_OF_YEAR);}  }
class C{  private Utils(){  throw new AssertionError();}  }
class C{  ArrayList validateEdit(List existingFiles){  if (existingFiles.size() > 0) {    IFile[] files=(IFile[])existingFiles.toArray(new IFile[existingFiles.size()]);    IWorkspace workspace=ResourcesPlugin.getWorkspace();    IStatus status=workspace.validateEdit(files,null);    if (status.isMultiStatus()) {      return getRejectedFiles(status,files);    }    if (!status.isOK()) {      errorTable.add(status);      ArrayList filteredFiles=new ArrayList();      for (int i=0; i < files.length; i++) {        filteredFiles.add(files[i].getFullPath());      }      return filteredFiles;    }  }  return new ArrayList();}  }
class C{  protected void newContext(){  getContexts().addFirst(new HashMap<String,Object>());}  }
class C{  public String quotedNameOf(String s){  if (reservedNames.contains(s))   return "\'" + s + "\'"; else   return s;}  }
class C{  public static void replaceText(JComponent component){  final Iterator<Component> children=IJSwingUtilities.getChildren(component);  while (children.hasNext()) {    Component child=children.next();    if (child instanceof JLabel) {      final JLabel label=(JLabel)child;      String oldText=label.getText();      if (oldText != null) {        label.setText(doReplace(oldText));      }    } else     if (child instanceof AbstractButton) {      AbstractButton button=(AbstractButton)child;      String oldText=button.getText();      if (oldText != null) {        button.setText(doReplace(oldText));      }    }  }}  }
class C{  public void push(VCard vcard){  stack.add(new Item(vcard,new ArrayList<Label>()));}  }
class C{  public void paintChildren(Graphics g,Rectangle clip){  g=getMapBeanRepaintPolicy().modifyGraphicsForPainting(g);  drawProjectionBackground(g);  RotationHelper rotationHelper=getRotHelper();  if (rotationHelper != null) {    rotationHelper.paintChildren(g,clip);  } else {    super.paintChildren(g);  }}  }
class C{  public IndentPrinter(Writer out){  this(out,"  ");}  }
class C{  public List<? extends Entry> entries(){  return entries;}  }
class C{  WordEntry normalizeAdjective(final String word){  final String trimmedWord=trimWord(word);  final String normalized=Grammar.normalizeDerivedAdjective(trimmedWord);  if (normalized != null) {    final WordEntry entry=words.get(normalized);    return entry;  } else {    return null;  }}  }
class C{  public CrazyNesting(CrazyNesting other){  if (other.isSetString_field()) {    this.string_field=other.string_field;  }  if (other.isSetSet_field()) {    Set<Insanity> __this__set_field=new HashSet<Insanity>(other.set_field.size());    for (    Insanity other_element : other.set_field) {      __this__set_field.add(new Insanity(other_element));    }    this.set_field=__this__set_field;  }  if (other.isSetList_field()) {    List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> __this__list_field=new ArrayList<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>>(other.list_field.size());    for (    Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> other_element : other.list_field) {      Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> __this__list_field_copy=new HashMap<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>(other_element.size());      for (      Map.Entry<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> other_element_element : other_element.entrySet()) {        Set<Integer> other_element_element_key=other_element_element.getKey();        Map<Integer,Set<List<Map<Insanity,String>>>> other_element_element_value=other_element_element.getValue();        Set<Integer> __this__list_field_copy_copy_key=new HashSet<Integer>(other_element_element_key);        Map<Integer,Set<List<Map<Insanity,String>>>> __this__list_field_copy_copy_value=new HashMap<Integer,Set<List<Map<Insanity,String>>>>(other_element_element_value.size());        for (        Map.Entry<Integer,Set<List<Map<Insanity,String>>>> other_element_element_value_element : other_element_element_value.entrySet()) {          Integer other_element_element_value_element_key=other_element_element_value_element.getKey();          Set<List<Map<Insanity,String>>> other_element_element_value_element_value=other_element_element_value_element.getValue();          Integer __this__list_field_copy_copy_value_copy_key=other_element_element_value_element_key;          Set<List<Map<Insanity,String>>> __this__list_field_copy_copy_value_copy_value=new HashSet<List<Map<Insanity,String>>>(other_element_element_value_element_value.size());          for (          List<Map<Insanity,String>> other_element_element_value_element_value_element : other_element_element_value_element_value) {            List<Map<Insanity,String>> __this__list_field_copy_copy_value_copy_value_copy=new ArrayList<Map<Insanity,String>>(other_element_element_value_element_value_element.size());            for (            Map<Insanity,String> other_element_element_value_element_value_element_element : other_element_element_value_element_value_element) {              Map<Insanity,String> __this__list_field_copy_copy_value_copy_value_copy_copy=new HashMap<Insanity,String>(other_element_element_value_element_value_element_element.size());              for (              Map.Entry<Insanity,String> other_element_element_value_element_value_element_element_element : other_element_element_value_element_value_element_element.entrySet()) {                Insanity other_element_element_value_element_value_element_element_element_key=other_element_element_value_element_value_element_element_element.getKey();                String other_element_element_value_element_value_element_element_element_value=other_element_element_value_element_value_element_element_element.getValue();                Insanity __this__list_field_copy_copy_value_copy_value_copy_copy_copy_key=new Insanity(other_element_element_value_element_value_element_element_element_key);                String __this__list_field_copy_copy_value_copy_value_copy_copy_copy_value=other_element_element_value_element_value_element_element_element_value;                __this__list_field_copy_copy_value_copy_value_copy_copy.put(__this__list_field_copy_copy_value_copy_value_copy_copy_copy_key,__this__list_field_copy_copy_value_copy_value_copy_copy_copy_value);              }              __this__list_field_copy_copy_value_copy_value_copy.add(__this__list_field_copy_copy_value_copy_value_copy_copy);            }            __this__list_field_copy_copy_value_copy_value.add(__this__list_field_copy_copy_value_copy_value_copy);          }          __this__list_field_copy_copy_value.put(__this__list_field_copy_copy_value_copy_key,__this__list_field_copy_copy_value_copy_value);        }        __this__list_field_copy.put(__this__list_field_copy_copy_key,__this__list_field_copy_copy_value);      }      __this__list_field.add(__this__list_field_copy);    }    this.list_field=__this__list_field;  }  if (other.isSetBinary_field()) {    this.binary_field=org.apache.thrift.TBaseHelper.copyBinary(other.binary_field);  }}  }
class C{  public void animate(MarkerWithPosition marker,LatLng from,LatLng to){  lock.lock();  mAnimationTasks.add(new AnimationTask(marker,from,to));  lock.unlock();}  }
class C{  public Quaterniond normalize(){  double invNorm=1.0 / Math.sqrt(x * x + y * y + z * z + w * w);  x*=invNorm;  y*=invNorm;  z*=invNorm;  w*=invNorm;  return this;}  }
class C{  public boolean validate(InputNode node) throws Exception {  Instance value=factory.getInstance(node);  if (!value.isReference()) {    Object result=value.setInstance(null);    Class type=value.getType();    return validate(node,type);  }  return true;}  }
class C{  protected static String serializeNode(Node node){  return serializeDOMSource(new DOMSource(node));}  }
class C{  private void renderAnimations(){  Keyframe kf0, kf1, kf2, kf3;  float midwayPoint=0.2f;  int duration=500;  kf0=Keyframe.ofFloat(0f,1);  kf1=Keyframe.ofFloat(midwayPoint,mTransitionMidRadiusMultiplier);  kf2=Keyframe.ofFloat(1f,mTransitionEndRadiusMultiplier);  PropertyValuesHolder radiusDisappear=PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier",kf0,kf1,kf2);  kf0=Keyframe.ofFloat(0f,1f);  kf1=Keyframe.ofFloat(1f,0f);  PropertyValuesHolder fadeOut=PropertyValuesHolder.ofKeyframe("alpha",kf0,kf1);  mDisappearAnimator=ObjectAnimator.ofPropertyValuesHolder(this,radiusDisappear,fadeOut).setDuration(duration);  mDisappearAnimator.addUpdateListener(mInvalidateUpdateListener);  float delayMultiplier=0.25f;  float transitionDurationMultiplier=1f;  float totalDurationMultiplier=transitionDurationMultiplier + delayMultiplier;  int totalDuration=(int)(duration * totalDurationMultiplier);  float delayPoint=(delayMultiplier * duration) / totalDuration;  midwayPoint=1 - (midwayPoint * (1 - delayPoint));  kf0=Keyframe.ofFloat(0f,mTransitionEndRadiusMultiplier);  kf1=Keyframe.ofFloat(delayPoint,mTransitionEndRadiusMultiplier);  kf2=Keyframe.ofFloat(midwayPoint,mTransitionMidRadiusMultiplier);  kf3=Keyframe.ofFloat(1f,1);  PropertyValuesHolder radiusReappear=PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier",kf0,kf1,kf2,kf3);  kf0=Keyframe.ofFloat(0f,0f);  kf1=Keyframe.ofFloat(delayPoint,0f);  kf2=Keyframe.ofFloat(1f,1f);  PropertyValuesHolder fadeIn=PropertyValuesHolder.ofKeyframe("alpha",kf0,kf1,kf2);  mReappearAnimator=ObjectAnimator.ofPropertyValuesHolder(this,radiusReappear,fadeIn).setDuration(totalDuration);  mReappearAnimator.addUpdateListener(mInvalidateUpdateListener);}  }
class C{  public static UPSCoord fromUTM(String hemisphere,double easting,double northing){  return fromUPS(hemisphere,easting,northing,null);}  }
class C{  public void onAccessibilityStatusChanged(boolean enabled){  if (enabled && (mNodeProvider == null)) {    mAccessibilityView=new View(getContext());    addView(mAccessibilityView);    mNodeProvider=new CompositorAccessibilityProvider(mAccessibilityView);    ViewCompat.setAccessibilityDelegate(mAccessibilityView,mNodeProvider);  }}  }
class C{  public void testDuplicateCacheConfigurations() throws Exception {  startInvalidGrid(DUP_CACHES_GRID_NAME);  startInvalidGrid(DUP_DFLT_CACHES_GRID_NAME);}  }
class C{  public void initializeContacts(final EvolutionState state){  return;}  }
class C{  public UniformDensityFunction(double minimum,double maximum){  this.minimum=minimum;  this.maximum=maximum;}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  if (object.hasSlot("content")) {    content=object.getSlot("content");  } else {    content=null;  }  open=object.has("open");}  }
class C{  private static String join(final Object[] array,final String token){  return join(array,token,null);}  }
class C{  private NaviErrorDialog(final Window owner,final String shortMessage,final String description,final Throwable exception){  super(owner,shortMessage,description,exception);}  }
class C{  public boolean previous() throws SQLException {  return crsInternal.previous();}  }
class C{  public void testCase2(){  byte aBytes[]={1,2,3,4,5,6,7};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  try {    aNumber.divide(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  @CanIgnoreReturnValue public CharEscaperBuilder addEscape(char c,String r){  map.put(c,checkNotNull(r));  if (c > max) {    max=c;  }  return this;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  for (int i=0; i < controls.length; i++) {    if (i != 0) {      buf.append(", ");      if ((i + 1) == controls.length) {        buf.append("and ");      }    }    buf.append(controls[i].getType());  }  return new String(getType() + " Control containing " + buf+ " Controls.");}  }
class C{  @Override public void registerByteSizeObserver(RawUnionValue union,ElementByteSizeObserver observer,Context context) throws Exception {  int index=getIndexForEncoding(union);  observer.update(VarInt.getLength(index));  @SuppressWarnings("unchecked") Coder<Object> coder=(Coder<Object>)elementCoders.get(index);  coder.registerByteSizeObserver(union.getValue(),observer,context);}  }
class C{  public void run(){  Connection conn;synchronized (queue) {    while (queue.size() == 0) {      try {        queue.wait();      } catch (      InterruptedException e) {      }    }    startNewAcceptor();    conn=queue.remove(0);  }  transport.handleMessages(conn,true);}  }
class C{  DescendantIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);  int firstStepPos=OpMap.getFirstChildPos(opPos);  int stepType=compiler.getOp(firstStepPos);  boolean orSelf=(OpCodes.FROM_DESCENDANTS_OR_SELF == stepType);  boolean fromRoot=false;  if (OpCodes.FROM_SELF == stepType) {    orSelf=true;  } else   if (OpCodes.FROM_ROOT == stepType) {    fromRoot=true;    int nextStepPos=compiler.getNextStepPos(firstStepPos);    if (compiler.getOp(nextStepPos) == OpCodes.FROM_DESCENDANTS_OR_SELF)     orSelf=true;  }  int nextStepPos=firstStepPos;  while (true) {    nextStepPos=compiler.getNextStepPos(nextStepPos);    if (nextStepPos > 0) {      int stepOp=compiler.getOp(nextStepPos);      if (OpCodes.ENDOP != stepOp)       firstStepPos=nextStepPos; else       break;    } else     break;  }  if ((analysis & WalkerFactory.BIT_CHILD) != 0)   orSelf=false;  if (fromRoot) {    if (orSelf)     m_axis=Axis.DESCENDANTSORSELFFROMROOT; else     m_axis=Axis.DESCENDANTSFROMROOT;  } else   if (orSelf)   m_axis=Axis.DESCENDANTORSELF; else   m_axis=Axis.DESCENDANT;  int whatToShow=compiler.getWhatToShow(firstStepPos);  if ((0 == (whatToShow & (DTMFilter.SHOW_ATTRIBUTE | DTMFilter.SHOW_ELEMENT | DTMFilter.SHOW_PROCESSING_INSTRUCTION))) || (whatToShow == DTMFilter.SHOW_ALL))   initNodeTest(whatToShow); else {    initNodeTest(whatToShow,compiler.getStepNS(firstStepPos),compiler.getStepLocalName(firstStepPos));  }  initPredicateInfo(compiler,firstStepPos);}  }
class C{  private DocumentUtil(){  throw new UnsupportedOperationException();}  }
class C{  private List<Map<String,Object>> globFiles(final CWLJob job,final File workingDir,HashAlgorithm hashAlgorithm,final CWLOutputPort outputPort,Object outputBinding) throws CWLGlobException {  if (outputPort.getOutputBinding() != null) {    outputBinding=outputPort.getOutputBinding();  }  if (outputBinding == null) {    logger.debug("Output binding is empty. Skip output extraction.");    return null;  }  Object glob=CWLBindingHelper.getGlob(outputBinding);  if (glob == null) {    logger.debug("GLOB does not exist. Skip output extraction.");    return null;  }  Set<File> files=globService.glob(job,workingDir,glob);  if (files == null) {    logger.info("Glob service didn't find any files.");    return null;  }  logger.debug("Glob service returned result {}",files);  final List<Map<String,Object>> result=new ArrayList<>();  for (  File file : files) {    try {      result.add(formFileValue(file,job,outputBinding,outputPort,hashAlgorithm));    } catch (    Exception e) {      logger.error("Failed to extract outputs",e);      throw new CWLGlobException("Failed to extract outputs.",e);    }  }  return result;}  }
class C{  protected CRLNumberExtension(ObjectIdentifier extensionId,Boolean critical,Object value,String extensionName,String extensionLabel) throws IOException {  this.extensionId=extensionId;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  this.crlNumber=val.getBigInteger();  this.extensionName=extensionName;  this.extensionLabel=extensionLabel;}  }
class C{  public void forceRewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  if (!rewriteExif(filename,tags)) {    ExifData tempData=mData;    mData=new ExifData(DEFAULT_BYTE_ORDER);    FileInputStream is=null;    ByteArrayOutputStream bytes=null;    try {      is=new FileInputStream(filename);      bytes=new ByteArrayOutputStream();      doExifStreamIO(is,bytes);      byte[] imageBytes=bytes.toByteArray();      readExif(imageBytes);      setTags(tags);      writeExif(imageBytes,filename);    } catch (    IOException e) {      closeSilently(is);      throw e;    } finally {      is.close();      mData=tempData;    }  }}  }
class C{  private Annotation createValue(){  final RVMClass annotationInterface=type.resolve().asClass();  annotationInterface.resolve();  Class<?> interfaceClass=annotationInterface.getClassForType();  ClassLoader classLoader=interfaceClass.getClassLoader();  if (classLoader == null) {    classLoader=BootstrapClassLoader.getBootstrapClassLoader();  }  return (Annotation)Proxy.newProxyInstance(classLoader,new Class[]{interfaceClass},new AnnotationFactory());}  }
class C{  protected boolean mustJoinLegs(Box leg1,Box leg2){  return leg1.getLocations()[1].equals(leg2.getLocations()[0]) && Arrays.equals(leg1.getAltitudes(),leg2.getAltitudes()) && Arrays.equals(leg1.isTerrainConforming(),leg2.isTerrainConforming());}  }
class C{  public long length() throws SQLException {  return blobData != null ? blobData.length : -1;}  }
class C{  public void indent(int n){  indentation+=(n * Report.DEFAULT_INDENTATION);}  }
class C{  public static Geometry overlayOp(Geometry geom0,Geometry geom1,int opCode){  OverlayOp gov=new OverlayOp(geom0,geom1);  Geometry geomOv=gov.getResultGeometry(opCode);  return geomOv;}  }
class C{  public SimpleDateFormat(String pattern){  super();  this.pattern=pattern;}  }
class C{  public float avgShardsPerNode(String index){  return ((float)metaData.index(index).getTotalNumberOfShards()) / nodes.size();}  }
class C{  public String globalInfo(){  return "Evaluates the classifier on a percentage split. Order can be preserved.";}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.606 -0400",hash_original_method="2C08B488ADA93371BD5A437FB37025E7",hash_generated_method="001056193AB0073F4DF26C03227633D7") @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (names != null) {    for (int i=0; i < names.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(names[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static Color rgbafc(double red,double green,double blue,double alpha){  return rgbac(colorConvert(red),colorConvert(green),colorConvert(blue),colorConvert(alpha));}  }
class C{  public Polynomial minus(double c){  return plus(-c);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ARROW_FUNCTION;}  }
class C{  public final boolean isDaemon(){  return isDaemon;}  }
class C{  boolean resolveBoxing(Expression expression){  return false;}  }
class C{  public void reset(Address start,Address end,int firstIndex,int blockNum){  start_=start;  end_=end;  firstIndex_=firstIndex;  blockNum_=blockNum;}  }
class C{  @Override public boolean intersects(final Coordinate p){  return intersects(p.x,p.y,p.z);}  }
class C{  public void testBug71672PreparedStatement(int testStep,Connection testConn,String query,int expectedUpdateCount,int[] expectedKeys) throws SQLException {  PreparedStatement testPStmt=testConn.prepareStatement(query);  if (expectedUpdateCount < 0) {    assertFalse(testStep + ". PrepStmt.execute() result",testPStmt.execute(query,Statement.RETURN_GENERATED_KEYS));  } else {    assertEquals(testStep + ". PrepStmt.executeUpdate() result",expectedUpdateCount,testPStmt.executeUpdate(query,Statement.RETURN_GENERATED_KEYS));  }  ResultSet testRS=testPStmt.getGeneratedKeys();  for (  int k : expectedKeys) {    assertTrue(testStep + ". Row expected in generated keys ResultSet",testRS.next());    assertEquals(testStep + ". Wrong generated key",k,testRS.getInt(1));  }  assertFalse(testStep + ". No more rows expected in generated keys ResultSet",testRS.next());  testRS.close();  testPStmt.close();}  }
class C{  protected boolean needsVetoableChangeSupport(ClassNode declaringClass,SourceUnit sourceUnit){  boolean foundAdd=false, foundRemove=false, foundFire=false;  ClassNode consideredClass=declaringClass;  while (consideredClass != null) {    for (    MethodNode method : consideredClass.getMethods()) {      foundAdd=foundAdd || method.getName().equals("addVetoableChangeListener") && method.getParameters().length == 1;      foundRemove=foundRemove || method.getName().equals("removeVetoableChangeListener") && method.getParameters().length == 1;      foundFire=foundFire || method.getName().equals("fireVetoableChange") && method.getParameters().length == 3;      if (foundAdd && foundRemove && foundFire) {        return false;      }    }    consideredClass=consideredClass.getSuperClass();  }  consideredClass=declaringClass.getSuperClass();  while (consideredClass != null) {    if (hasVetoableAnnotation(consideredClass))     return false;    for (    FieldNode field : consideredClass.getFields()) {      if (hasVetoableAnnotation(field))       return false;    }    consideredClass=consideredClass.getSuperClass();  }  if (foundAdd || foundRemove || foundFire) {    sourceUnit.getErrorCollector().addErrorAndContinue(new SimpleMessage("@Vetoable cannot be processed on " + declaringClass.getName() + " because some but not all of addVetoableChangeListener, removeVetoableChange, and fireVetoableChange were declared in the current or super classes.",sourceUnit));    return false;  }  return true;}  }
class C{  public Long put(final byte[] key,final long value) throws IOException {  final Row.Entry entry=table.row().newEntry();  entry.setCol(0,key);  entry.setCol(1,value);  Row.Entry oldentry;  try {    oldentry=table.replace(entry);    if (oldentry == null)     return null;    return oldentry.getColLong(1);  } catch (  SpaceExceededException e) {    throw new IOException(e);  }}  }
class C{  private Stack grahamScan(Coordinate[] c){  Coordinate p;  Stack ps=new Stack();  p=(Coordinate)ps.push(c[0]);  p=(Coordinate)ps.push(c[1]);  p=(Coordinate)ps.push(c[2]);  for (int i=3; i < c.length; i++) {    p=(Coordinate)ps.pop();    while (!ps.empty() && CGAlgorithms.computeOrientation((Coordinate)ps.peek(),p,c[i]) > 0) {      p=(Coordinate)ps.pop();    }    p=(Coordinate)ps.push(p);    p=(Coordinate)ps.push(c[i]);  }  p=(Coordinate)ps.push(c[0]);  return ps;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:27.612 -0400",hash_original_method="B2A2FB2D59D49F2302A18DA7A32E8FAE",hash_generated_method="4C2C8B4ED69AD1AE231597F16F5C37CA") private ComponentName findGlobalSearchActivity(List<ResolveInfo> installed){  final String searchProviderSetting=getGlobalSearchProviderSetting();  if (!TextUtils.isEmpty(searchProviderSetting)) {    final ComponentName globalSearchComponent=ComponentName.unflattenFromString(searchProviderSetting);    if (globalSearchComponent != null && isInstalled(globalSearchComponent)) {      return globalSearchComponent;    }  }  return getDefaultGlobalSearchProvider(installed);}  }
class C{  private void cmd_start(){  File file=new File((String)fSelectFile.getSelectedItem());  if (!file.exists() || file.isDirectory()) {    infoPane.append("File does not exist or a directory: " + file + "\n");    return;  }  infoPane.append("Opening file: " + file + "\n");  StringBuffer sb=new StringBuffer(1000);  try {    FileReader fr=new FileReader(file);    BufferedReader in=new BufferedReader(fr);    String line=null;    int lines=0;    while ((line=in.readLine()) != null) {      lines++;      sb.append(line).append('\n');    }    in.close();    fr.close();    infoPane.append("- Read lines: " + lines + ", size: "+ sb.length()+ "\n");  } catch (  FileNotFoundException fnf) {    infoPane.append("Error: " + fnf + "\n");    return;  }catch (  IOException ioe) {    infoPane.append("Error: " + ioe + "\n");    return;  }  if (fExecute.isSelected()) {    CConnection cc=(CConnection)fConnect.getValue();    Convert convert=cc.getDatabase().getConvert();    convert.setVerbose(fVerbose.isSelected());    Connection conn=cc.getConnection(true,Connection.TRANSACTION_READ_COMMITTED);    convert.execute(sb.toString(),conn);    if (convert.hasError()) {      StringBuffer sbb=new StringBuffer("- Error: ");      if (convert.getConversionError() != null)       sbb.append(convert.getConversionError()).append(' ');      if (convert.getException() != null) {        sbb.append(convert.getException());        convert.getException().printStackTrace();      }      sbb.append("\n");      infoPane.append(sbb.toString());    } else     infoPane.append("- OK\n");  } else {    String target=(String)fTarget.getSelectedItem();    if (Database.DB_ORACLE.equals(target)) {      infoPane.append("No conversion needed.\n");      return;    }    Convert convert=null;    try {      convert=Database.getDatabase(target).getConvert();    } catch (    Exception e) {      infoPane.append("Error: " + e + "\n");      return;    }    String cc=convert.convertAll(sb.toString());    String fileName=file.getAbsolutePath();    int pos=fileName.lastIndexOf('.');    if (pos == -1)     fileName+=target; else     fileName=fileName.substring(0,pos) + target + fileName.substring(pos);    infoPane.append("Writing to: " + fileName + "\n");    try {      FileWriter fw=new FileWriter(fileName,false);      BufferedWriter out=new BufferedWriter(fw);      out.write("-- Adempiere dbPort - Convert Oracle to " + target);      out.newLine();      out.write("-- " + Adempiere.getSummary());      out.newLine();      out.write(cc);      out.close();      fw.close();    } catch (    IOException ioe) {      infoPane.append("Error: " + ioe + "\n");    }    infoPane.append("- Written: " + cc.length() + "\n");  }}  }
class C{  public static double normalizeAngle180(double degrees){  double angle=degrees % 360;  return angle > 180 ? angle - 360 : (angle < -180 ? 360 + angle : angle);}  }
class C{  public static RuntimeException throwUnchecked(Throwable t){  if (t == null) {    throw new NullPointerException();  }  if (t instanceof RuntimeException) {    throw (RuntimeException)t;  }  if (t instanceof Error) {    throw (Error)t;  }  throw new RuntimeException(t);}  }
class C{  protected RegionData createCacheEntry(DrawContext dc){  return new RegionData(dc,this.minExpiryTime,this.maxExpiryTime);}  }
class C{  private static long des_cipher(long in,int salt,int num_iter,long[] KS){  salt=to_six_bit(salt);  long L=in;  long R=L;  L&=0x5555555555555555L;  R=(R & 0xaaaaaaaa00000000L) | ((R >> 1) & 0x0000000055555555L);  L=((((L << 1) | (L << 32)) & 0xffffffff00000000L) | ((R | (R >> 32)) & 0x00000000ffffffffL));  L=perm3264((int)(L >> 32),IE3264);  R=perm3264((int)(L & 0xffffffff),IE3264);  while (--num_iter >= 0) {    for (int loop_count=0; loop_count < 8; loop_count++) {      long kp;      long B;      long k;      kp=KS[(loop_count << 1)];      k=((R >> 32) ^ R) & salt & 0xffffffffL;      k|=(k << 32);      B=(k ^ R ^ kp);      L^=(SPE[0][(int)((B >> 58) & 0x3f)] ^ SPE[1][(int)((B >> 50) & 0x3f)] ^ SPE[2][(int)((B >> 42) & 0x3f)]^ SPE[3][(int)((B >> 34) & 0x3f)]^ SPE[4][(int)((B >> 26) & 0x3f)]^ SPE[5][(int)((B >> 18) & 0x3f)]^ SPE[6][(int)((B >> 10) & 0x3f)]^ SPE[7][(int)((B >> 2) & 0x3f)]);      kp=KS[(loop_count << 1) + 1];      k=((L >> 32) ^ L) & salt & 0xffffffffL;      k|=(k << 32);      B=(k ^ L ^ kp);      R^=(SPE[0][(int)((B >> 58) & 0x3f)] ^ SPE[1][(int)((B >> 50) & 0x3f)] ^ SPE[2][(int)((B >> 42) & 0x3f)]^ SPE[3][(int)((B >> 34) & 0x3f)]^ SPE[4][(int)((B >> 26) & 0x3f)]^ SPE[5][(int)((B >> 18) & 0x3f)]^ SPE[6][(int)((B >> 10) & 0x3f)]^ SPE[7][(int)((B >> 2) & 0x3f)]);    }    L^=R;    R^=L;    L^=R;  }  L=((((L >> 35) & 0x0f0f0f0fL) | (((L & 0xffffffff) << 1) & 0xf0f0f0f0L)) << 32 | (((R >> 35) & 0x0f0f0f0fL) | (((R & 0xffffffff) << 1) & 0xf0f0f0f0L)));  L=perm6464(L,CF6464);  return L;}  }
class C{  public void removeUnavailable(){  for (int i=0; i < boardsSelected.size(); i++) {    if ((boardsSelected.get(i) == null) || (boardsAvailable.size() == 0)) {      boardsSelected.set(i,null);    } else {      String boardName=boardsSelected.get(i);      if (boardsSelected.get(i).startsWith(Board.BOARD_REQUEST_ROTATION)) {        boardName=boardName.substring(Board.BOARD_REQUEST_ROTATION.length());      }      if (boardsAvailable.indexOf(boardName) == -1) {        boardsSelected.set(i,null);      }    }  }}  }
class C{  public void testRunStarted(Description description) throws Exception {}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public final static String encodeToString(byte[] sArr,boolean lineSep){  return new String(encodeToChar(sArr,lineSep));}  }
class C{  public boolean isOuter(int outerStream,int innerStream){  checkArgs(outerStream,innerStream);  Set<Integer> outerStreams=getOuter(innerStream);  if (outerStreams == null) {    return false;  }  return outerStreams.contains(outerStream);}  }
class C{  public void initialize(AlgorithmParameterSpec params,SecureRandom random) throws InvalidAlgorithmParameterException {  if (!(params instanceof DSAParameterSpec)) {    throw new InvalidAlgorithmParameterException("Inappropriate parameter");  }  initialize0((DSAParameterSpec)params,random);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:27.820 -0500",hash_original_method="DFFDB9C5FDBA0FB3D8B8BAEB0765C9A3",hash_generated_method="3C2FFD5B9A70C837FD2579D761B6114C") public void trimToSize(){}  }
class C{  @Override public final int read(byte[] buf,int offset,int length) throws IOException {  int readOffset=_readOffset;  int readLength=_readLength;  if (readLength <= readOffset) {    if (ZERO_COPY_SIZE <= length) {      int len=_source.read(buf,offset,length);      if (len > 0) {        _position+=len;        if (_isEnableReadTime) {          _readTime=CurrentTime.currentTime();        }      }      return len;    }    if (!readBuffer()) {      return -1;    }    readOffset=_readOffset;    readLength=_readLength;  }  int sublen=Math.min(length,readLength - readOffset);  System.arraycopy(_readBuffer,readOffset,buf,offset,sublen);  _readOffset=readOffset + sublen;  return sublen;}  }
class C{  public Pair NW(){  char d2=(char)(diagonal - 1);  int r2=row - 1;  if (r2 < 0)   return null;  if (d2 < 'A')   return null;  return new Pair(d2,r2);}  }
class C{  public static double geocentricLatitude(double geographicLatitude){  return Math.atan((Math.tan(geographicLatitude) * FLATTENING_C));}  }
class C{  public Object clone(){  ByteArrayList clone=new ByteArrayList((byte[])elements.clone());  clone.setSizeRaw(size);  return clone;}  }
class C{  public static int measureIndentUnits(CharSequence line,int tabWidth,int indentWidth){  if (indentWidth < 0 || tabWidth < 0 || line == null) {    throw new IllegalArgumentException();  }  if (indentWidth == 0)   return 0;  int visualLength=measureIndentInSpaces(line,tabWidth);  return visualLength / indentWidth;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:46.964 -0500",hash_original_method="6C6DA74626C9CD8B150D67A2E9AEA5BB",hash_generated_method="6C6DA74626C9CD8B150D67A2E9AEA5BB") void log(Resources resources,int... rules){  final LinkedList<Node> roots=findRoots(rules);  for (  Node node : roots) {    printNode(resources,node);  }}  }
class C{  public AppletServer(String port) throws IOException, NotFoundException, CannotCompileException {  this(Integer.parseInt(port));}  }
class C{  public static int size(StringBuilder builder){  return builder.length();}  }
class C{  public CharMemberValue(int index,ConstPool cp){  super('C',cp);  this.valueIndex=index;}  }
class C{  public TextOnlyInterface(DialogueSystem system){  this.system=system;}  }
class C{  private void addAlias(String alias,String cname){  if (aliases == EMPTY_ALIASES) {    aliases=new String[6];  }  if (aliaslen == aliases.length) {    aliases=Arrays.copyOf(aliases,aliaslen << 1);  }  aliases[aliaslen++]=alias;  aliases[aliaslen++]=cname;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void writeToParcel(Parcel out,int flags){  out.writeFloat(x);  out.writeFloat(y);}  }
class C{  public Threat(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public void clearInterceptors(){  clearRequestInterceptors();  clearResponseInterceptors();}  }
class C{  public boolean isEmpty(){  return content.size() == 0;}  }
class C{  protected Iterator<K> createKeySetIterator(){  return new ReferenceKeySetIterator<K,V>(this);}  }
class C{  public BatchReader(byte[] batch,boolean useSignatures){  proposalBuffer=ByteBuffer.wrap(batch);  this.useSignatures=useSignatures;}  }
class C{  public boolean equals(lr_item_core other){  return core_equals(other);}  }
class C{  public void addElement(int value){  int indexRelativeToCache=m_firstFree - m_buildCacheStartIndex;  if (indexRelativeToCache >= 0 && indexRelativeToCache < m_blocksize) {    m_buildCache[indexRelativeToCache]=value;    ++m_firstFree;  } else {    int index=m_firstFree >>> m_SHIFT;    int offset=m_firstFree & m_MASK;    if (index >= m_map.length) {      int newsize=index + m_numblocks;      int[][] newMap=new int[newsize][];      System.arraycopy(m_map,0,newMap,0,m_map.length);      m_map=newMap;    }    int[] block=m_map[index];    if (null == block)     block=m_map[index]=new int[m_blocksize];    block[offset]=value;    m_buildCache=block;    m_buildCacheStartIndex=m_firstFree - offset;    ++m_firstFree;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override protected void doAction(){  try {    if (setKeyStorePassword()) {      JOptionPane.showMessageDialog(frame,res.getString("SetPasswordAction.SetKeyStorePasswordSuccessful.message"),res.getString("SetPasswordAction.SetKeyStorePassword.Title"),JOptionPane.INFORMATION_MESSAGE);    }  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(this.getModifiers());}  }
class C{  public void enableMobileData(){  try {    ConnectivityManager cm=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);    Method dataMtd=ConnectivityManager.class.getDeclaredMethod("setMobileDataEnabled",boolean.class);    dataMtd.setAccessible(true);    dataMtd.invoke(cm,true);  } catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  public void unblockRequest(){  trace("[{}] Unblock all requests",gondola.getHostId());  if (globalLock != null) {    globalLock.countDown();    globalLock=null;  }}  }
class C{  public CodeAttribute toCodeAttribute(){  return new CodeAttribute(constPool,maxStack,maxLocals,get(),tryblocks);}  }
class C{  public MatchScoreboardManager(Match match){  this.match=match;  defaultDisplay=new ScoreboardDisplay(match,null);  Team.getTeams(match).forEach(null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  public void logError(String tag,String message){  log(LogEntryType.Error,tag,message);}  }
class C{  public void addC3Link(Entity e){  if (e.getPosition() == null) {    return;  }  if (e.hasC3i()) {    for (    Entity fe : game.getEntitiesVector()) {      if (fe.getPosition() == null) {        return;      }      if (e.onSameC3NetworkAs(fe) && !fe.equals(e) && !ComputeECM.isAffectedByECM(e,e.getPosition(),fe.getPosition())) {        c3Sprites.add(new C3Sprite(this,e,fe));      }    }  } else   if (e.hasActiveNovaCEWS()) {    for (    Entity fe : game.getEntitiesVector()) {      if (fe.getPosition() == null) {        return;      }      ECMInfo ecmInfo=ComputeECM.getECMEffects(e,e.getPosition(),fe.getPosition(),true,null);      if (e.onSameC3NetworkAs(fe) && !fe.equals(e) && (ecmInfo != null)&& !ecmInfo.isNovaECM()) {        c3Sprites.add(new C3Sprite(this,e,fe));      }    }  } else   if (e.getC3Master() != null) {    Entity eMaster=e.getC3Master();    if (eMaster.getPosition() == null) {      return;    }    boolean blocked=false;    if (e.hasBoostedC3() && eMaster.hasBoostedC3()) {      blocked=ComputeECM.isAffectedByAngelECM(e,e.getPosition(),eMaster.getPosition()) || ComputeECM.isAffectedByAngelECM(eMaster,eMaster.getPosition(),eMaster.getPosition());    } else {      blocked=ComputeECM.isAffectedByECM(e,e.getPosition(),eMaster.getPosition()) || ComputeECM.isAffectedByECM(eMaster,eMaster.getPosition(),eMaster.getPosition());    }    if (!blocked) {      c3Sprites.add(new C3Sprite(this,e,e.getC3Master()));    }  }}  }
class C{  @CausesError({PureMethodAccessesNonImmutableFieldException.class}) @Override @ShouldBePure public int hashCode(){  return 0;}  }
class C{  public NumberFormatAction(){  super("Number Format");}  }
class C{  public void execute(String url){  impl.execute(url);}  }
class C{  public static void copyMemory(Object srcBase,long srcOff,Object dstBase,long dstOff,long len){  UNSAFE.copyMemory(srcBase,srcOff,dstBase,dstOff,len);}  }
class C{  public void convertToFileIfRequired(){  try {    if (small != null && small.length > getMaxLengthInplaceLob()) {      int len=getBufferSize(Long.MAX_VALUE);      int tabId=tableId;      if (type == Value.BLOB) {        createFromStream(DataUtils.newBytes(len),0,getInputStream(),Long.MAX_VALUE);      } else {        createFromReader(new char[len],0,getReader(),Long.MAX_VALUE);      }      Value v2=link(tabId);      if (SysProperties.CHECK && v2 != this) {        DbException.throwInternalError();      }    }  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  public double computeAverageLocal(int timeSeries[][]){  initialise();  addObservations(timeSeries);  return computeAverageLocalOfObservations();}  }
class C{  public ModuleLoadedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  @Override public void runSingleIteration(){  if (firstIteration) {    LOG.info("SALSA: running first left subgraph iteration");    salsaSubgraphInternalState.constructSubgraphAndTraverseOnce(nodeVisitor,random);    firstIteration=false;  } else {    LOG.info("SALSA: running left subgraph iteration");    salsaSubgraphInternalState.traverseSubgraphLeftToRight(nodeVisitor);  }}  }
class C{  private static boolean isWindowsAbsolutePath(String systemId){  if (!isAbsolutePath(systemId))   return false;  if (systemId.length() > 2 && systemId.charAt(1) == ':' && Character.isLetter(systemId.charAt(0)) && (systemId.charAt(2) == '\\' || systemId.charAt(2) == '/'))   return true; else   return false;}  }
class C{  public void rejectStream(final StreamInitiation si){  XMPPError error=new XMPPError(XMPPError.Condition.forbidden,"Offer Declined");  IQ iqPacket=createIQ(si.getPacketID(),si.getFrom(),si.getTo(),IQ.Type.ERROR);  iqPacket.setError(error);  connection.sendPacket(iqPacket);}  }
class C{  public static float signum(final float a){  return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);}  }
class C{  private double calcNormalizedDistance(double[] point){  double[] center=getCenter();  double res=0.0;  for (int i=0; i < center.length; i++) {    double diff=center[i] - point[i];    res+=(diff * diff);  }  return Math.sqrt(res);}  }
class C{  public final void removeItem(final int index){  adapter.remove(index);  adaptGridViewHeight();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static <T>void addPluginIfUnloaded(final IPluginRegistry<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> registry,final DefaultListModel<PluginItem<T>> model,final long guid,final List<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> added){  for (  final Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,DisabledPluginReason> pluginPair : registry.getDisabledPlugins()) {    final com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T> plugin=pluginPair.first();    if (guid == plugin.getGuid()) {      model.addElement(new PluginItem<T>(plugin));      added.add(plugin);    }  }}  }
class C{  public static String fromDoc2String(Document doc) throws IOException {  KXmlSerializer serializer=new KXmlSerializer();  ByteArrayOutputStream bos=new ByteArrayOutputStream();  serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);  serializer.setOutput(bos,XformConstants.DEFAULT_CHARACTER_ENCODING);  doc.write(serializer);  serializer.flush();  return new String(bos.toByteArray(),XformConstants.DEFAULT_CHARACTER_ENCODING);}  }
class C{  public int drainPermits(){  return sync.drainPermits();}  }
class C{  public static double distancePointLinesegment(final Coord lineFrom,final Coord lineTo,final Coord point){  if (!lineFrom.hasZ() && !lineTo.hasZ() && !point.hasZ()) {    double lineDX=lineTo.getX() - lineFrom.getX();    double lineDY=lineTo.getY() - lineFrom.getY();    if ((lineDX == 0.0) && (lineDY == 0.0)) {      return calcEuclideanDistance(lineFrom,point);    }    double u=((point.getX() - lineFrom.getX()) * lineDX + (point.getY() - lineFrom.getY()) * lineDY) / (lineDX * lineDX + lineDY * lineDY);    if (u <= 0) {      return calcEuclideanDistance(lineFrom,point);    }    if (u >= 1) {      return calcEuclideanDistance(lineTo,point);    }    return calcEuclideanDistance(new Coord(lineFrom.getX() + u * lineDX,lineFrom.getY() + u * lineDY),point);  } else   if (lineFrom.hasZ() && lineTo.hasZ() && point.hasZ()) {    double lineDX=lineTo.getX() - lineFrom.getX();    double lineDY=lineTo.getY() - lineFrom.getY();    double lineDZ=lineTo.getZ() - lineFrom.getZ();    if ((lineDX == 0.0) && (lineDY == 0.0) && (lineDZ == 0.0)) {      return calcEuclideanDistance(lineFrom,point);    }    Coord v=minus(lineTo,lineFrom);    Coord w=minus(point,lineFrom);    double c1=dotProduct(w,v);    if (c1 <= 0.0) {      Coord m=minus(point,lineFrom);      return Math.sqrt(dotProduct(m,m));    }    double c2=dotProduct(v,v);    if (c2 <= c1) {      Coord m=minus(point,lineTo);      return Math.sqrt(dotProduct(m,m));    }    double b=c1 / c2;    Coord p=plus(lineFrom,scalarMult(b,v));    Coord m=minus(point,p);    return Math.sqrt(dotProduct(m,m));  } else {    throw new RuntimeException("All given coordinates must either be 2D, or 3D. A mix is not allowed.");  }}  }
class C{  public boolean canPlaceAt(GlowBlock block,BlockFace against){  return true;}  }
class C{  public Bits(){  super(Harness.options,"Bits","Bits in word",Integer.valueOf(System.getProperty("mmtk.harness.bits","32")));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.754 -0500",hash_original_method="197D64850896CFE44F6E60A0B666E58B",hash_generated_method="F00E3657FFB8F9C7912B58DBEFE4BBFC") private void decrementWorkerCount(){  do {  } while (!compareAndDecrementWorkerCount(ctl.get()));}  }
class C{  public BigdataValue newElement(List<BOp> a,IBindingSet bindingSet){  throw new UnsupportedOperationException();}  }
class C{  public ServerProxyProcessingError(){  requestFileName="getstate.query";  requestContentType="multipart/mixed; boundary=foobar";  url="http://127.0.0.1:" + PortNumbers.PROXY_PORT;}  }
class C{  public void addNodeKeys(ArrayList<SpatialKey> list,Page p){  if (p != null && !p.isLeaf()) {    for (int i=0; i < p.getKeyCount(); i++) {      list.add((SpatialKey)p.getKey(i));      addNodeKeys(list,p.getChildPage(i));    }  }}  }
class C{  public boolean isNormalCue(){  return (line == UNSET_VALUE && position == UNSET_VALUE);}  }
class C{  SqlArguments(Uri url,String where,String[] args){  if (url.getPathSegments().size() == 1) {    this.table=url.getPathSegments().get(0);    if (!DatabaseHelper.isValidTable(this.table)) {      throw new IllegalArgumentException("Bad root path: " + this.table);    }    this.where=where;    this.args=args;  } else   if (url.getPathSegments().size() != 2) {    throw new IllegalArgumentException("Invalid URI: " + url);  } else   if (!TextUtils.isEmpty(where)) {    throw new UnsupportedOperationException("WHERE clause not supported: " + url);  } else {    this.table=url.getPathSegments().get(0);    if (!DatabaseHelper.isValidTable(this.table)) {      throw new IllegalArgumentException("Bad root path: " + this.table);    }    if (TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)) {      this.where=Settings.NameValueTable.NAME + "=?";      final String name=url.getPathSegments().get(1);      this.args=new String[]{name};      if (TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)) {        if (sSecureGlobalKeys.contains(name) || sSystemGlobalKeys.contains(name)) {          this.table=TABLE_GLOBAL;        }      }    } else {      this.where="_id=" + ContentUris.parseId(url);      this.args=null;    }  }}  }
class C{  public static ObjectAnimator ofInt(Object target,String propertyName,int... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setIntValues(values);  return anim;}  }
class C{  public AmbiguousNameException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  System.arraycopy(in,inOff,cbcNextV,0,blockSize);  int length=cipher.processBlock(in,inOff,out,outOff);  for (int i=0; i < blockSize; i++) {    out[outOff + i]^=cbcV[i];  }  byte[] tmp;  tmp=cbcV;  cbcV=cbcNextV;  cbcNextV=tmp;  return length;}  }
class C{  public static void xmlMappingClassDoesNotExist(String className){  throw new XmlMappingClassDoesNotExistException(MSG.INSTANCE.message(xmlMappingClassDoesNotExistException2,className));}  }
class C{  public SpeedTestTask(final ISpeedTestSocket socketInterface,final List<ISpeedTestListener> listenerList){  mSocketInterface=socketInterface;  mRepeatWrapper=mSocketInterface.getRepeatWrapper();  mListenerList=listenerList;  initThreadPool();}  }
class C{  private static void printError(int errorCode,String cause,Throwable throwable,boolean includeStackTrace){  printError(errorCode,cause);  if (includeStackTrace) {    if (TLCGlobals.debug) {      DebugPrinter.print("printing stacktrace in printError(int, Throwable, boolean)");      throwable.printStackTrace(ToolIO.out);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:17.098 -0500",hash_original_method="D0EA86A6CC28EFB8C6A60B32F1D784F7",hash_generated_method="6BDAA12EB64D2B1485C3C28942198D4D") public static String formatElapsedTime(long elapsedSeconds){  return formatElapsedTime(null,elapsedSeconds);}  }
class C{  @Override public void showConfirmationView(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   GUIUtils.showViewByRevealEffect(mConfirmationContainer,mFabButton,GUIUtils.getWindowWidth(this)); else   GUIUtils.startScaleAnimationFromPivot((int)mFabButton.getX(),(int)mFabButton.getY(),mConfirmationContainer,null);  animateConfirmationView();  startClosingConfirmationView();}  }
class C{  public static void test() throws Exception {  goOn=true;  thrown=null;  long sNextLogger=nextLogger.get();  long sReadCount=readCount.get();  long sCheckCount=checkCount.get();  List<Thread> threads=new ArrayList<>();  for (int i=0; i < READERS; i++) {    threads.add(new ReadConf());  }  for (int i=0; i < LOGGERS; i++) {    threads.add(new AddLogger());  }  threads.add(new DeadlockDetector());  threads.add(0,new Stopper(TIME));  for (  Thread t : threads) {    t.start();  }  for (  Thread t : threads) {    try {      t.join();    } catch (    Exception x) {      fail(x);    }  }  if (thrown != null) {    throw thrown;  }  System.out.println("Passed: " + (nextLogger.get() - sNextLogger) + " loggers created by "+ LOGGERS+ " Thread(s),");  System.out.println("\t LogManager.readConfiguration() called " + (readCount.get() - sReadCount) + " times by "+ READERS+ " Thread(s).");  System.out.println("\t ThreadMXBean.findDeadlockedThreads called " + (checkCount.get() - sCheckCount) + " times by 1 Thread.");}  }
class C{  public BinaryProperty(File file,T type) throws IOException {  this(new BufferedInputStream(new FileInputStream(file)),type);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public InfoRegister updateFolder(User user,Integer bookId,Integer folderId,List atts,List inter,Map documents,String entidad) throws ValidationException, SecurityException, BookException, SessionException, AttributesException {  InfoRegister result=null;  try {    result=RegisterServices.updateFolder(user,bookId,folderId,atts,inter,documents,entidad);  } catch (  TecDocException e) {    _logger.error("Impossible to update folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_UPDATE_FOLDER);  }catch (  ParseException e) {    _logger.error("Impossible to update folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_UPDATE_FOLDER);  }catch (  Exception e) {    _logger.error("Impossible to update folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_UPDATE_FOLDER);  }  return result;}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  public void writeU8(int val){  check(val,8);  need(1);  array[pos++]=(byte)(val & 0xFF);}  }
class C{  public DatabaseException(String msg){  super(msg);}  }
class C{  public DViewCsr(JFrame parent,String title,PKCS10CertificationRequest pkcs10Csr) throws CryptoException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.pkcs10Csr=pkcs10Csr;  initComponents();}  }
class C{  public void close(){  if (mBluetoothGatt != null) {    mBluetoothGatt.close();    mBluetoothGatt=null;  }}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Long addNewUserWithExternalType(String SID,String username,String userpass,String lastname,String firstname,String email,String additionalname,String street,String zip,String fax,long states_id,String town,long language_id,String jNameTimeZone,String externalUserId,String externalUserType) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkAdminLevel(user_level)) {      Users testUser=userManagement.getUserByExternalIdAndType(externalUserId,externalUserType);      if (testUser != null) {        throw new Exception("User does already exist!");      }      Long user_id=userManagement.registerUserNoEmail(username,userpass,lastname,firstname,email,new Date(),street,additionalname,fax,zip,states_id,town,language_id,"",true,jNameTimeZone);      if (user_id < 0) {        return user_id;      }      Users user=userManagement.getUserById(user_id);      user.setStatus(1);      user.setUpdatetime(new Date());      user.setExternalUserId(externalUserId);      user.setExternalUserType(externalUserType);      userManagement.updateUser(user);      return user_id;    } else {      return new Long(-26);    }  } catch (  Exception err) {    log.error("addNewUserWithExternalType",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  private static Options buildOptions(){  return new Options().addOption(builder("classpath").hasArg().argName("path").desc("Specify where to find the class files - must be first argument").build()).addOption(builder("cp").longOpt("classpath").hasArg().argName("path").desc("Aliases for '-classpath'").build()).addOption(builder("D").longOpt("define").desc("define a system property").hasArg().argName("name=value").build()).addOption(builder().longOpt("disableopt").desc("disables one or all optimization elements. " + "optlist can be a comma separated list with the elements: " + "all (disables all optimizations), "+ "int (disable any int based optimizations)").hasArg().argName("optlist").build()).addOption(builder("h").hasArg(false).desc("usage information").longOpt("help").build()).addOption(builder("d").hasArg(false).desc("debug mode will print out full stack traces").longOpt("debug").build()).addOption(builder("v").hasArg(false).desc("display the Groovy and JVM versions").longOpt("version").build()).addOption(builder("c").argName("charset").hasArg().desc("specify the encoding of the files").longOpt("encoding").build()).addOption(builder("e").argName("script").hasArg().desc("specify a command line script").build()).addOption(builder("i").argName("extension").optionalArg(true).desc("modify files in place; create backup if extension is given (e.g. \'.bak\')").build()).addOption(builder("n").hasArg(false).desc("process files line by line using implicit 'line' variable").build()).addOption(builder("p").hasArg(false).desc("process files line by line and print result (see also -n)").build()).addOption(builder("pa").hasArg(false).desc("Generate metadata for reflection on method parameter names (jdk8+ only)").longOpt("parameters").build()).addOption(builder("l").argName("port").optionalArg(true).desc("listen on a port and process inbound lines (default: 1960)").build()).addOption(builder("a").argName("splitPattern").optionalArg(true).desc("split lines using splitPattern (default '\\s') using implicit 'split' variable").longOpt("autosplit").build()).addOption(builder().longOpt("indy").desc("enables compilation using invokedynamic").build()).addOption(builder().longOpt("configscript").hasArg().desc("A script for tweaking the configuration options").build()).addOption(builder("b").longOpt("basescript").hasArg().argName("class").desc("Base class name for scripts (must derive from Script)").build());}  }
class C{  private void addCalendarEvent(String summary,Date start,boolean allDay,Date end,String location,String description,String[] attendees){  Intent intent=new Intent(Intent.ACTION_INSERT);  intent.setType("vnd.android.cursor.item/event");  long startMilliseconds=start.getTime();  intent.putExtra("beginTime",startMilliseconds);  if (allDay) {    intent.putExtra("allDay",true);  }  long endMilliseconds;  if (end == null) {    if (allDay) {      endMilliseconds=startMilliseconds + 24 * 60 * 60* 1000;    } else {      endMilliseconds=startMilliseconds;    }  } else {    endMilliseconds=end.getTime();  }  intent.putExtra("endTime",endMilliseconds);  intent.putExtra("title",summary);  intent.putExtra("eventLocation",location);  intent.putExtra("description",description);  if (attendees != null) {    intent.putExtra(Intent.EXTRA_EMAIL,attendees);  }  try {    rawLaunchIntent(intent);  } catch (  ActivityNotFoundException anfe) {    Log.w(TAG,"No calendar app available that responds to " + Intent.ACTION_INSERT);    intent.setAction(Intent.ACTION_EDIT);    launchIntent(intent);  }}  }
class C{  public static int[] shuffle(int[] intArray,int shuffleCount){  int length;  if (intArray == null || shuffleCount < 0 || (length=intArray.length) < shuffleCount) {    return null;  }  int[] out=new int[shuffleCount];  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    out[i - 1]=intArray[random];    int temp=intArray[length - i];    intArray[length - i]=intArray[random];    intArray[random]=temp;  }  return out;}  }
class C{  public FormatResult applyMask(String mask,String value,String oldValue,Integer cursorIndex){  if (mask == null || value == null) {    return null;  }  if (oldValue.length() > value.length()) {    return new FormatResult(value,null);  }  value=(String)getMaskOrGetCursorIndex(mask,value,cursorIndex,true);  cursorIndex=(Integer)getMaskOrGetCursorIndex(mask,value,cursorIndex,false);  return new FormatResult(value,cursorIndex);}  }
class C{  public ReferenceVectorGuidedPopulation(int numberOfObjectives,int divisionsOuter,int divisionsInner,double alpha,Iterable<? extends Solution> iterable){  super(iterable);  this.numberOfObjectives=numberOfObjectives;  this.divisionsOuter=divisionsOuter;  this.divisionsInner=divisionsInner;  this.alpha=alpha;  initialize();}  }
class C{  @Override public ProviderInfo resolveContentProvider(String name,int flags){  assertNotNull(name);  MoreAsserts.assertNotEqual(name,"");  assertEquals(flags,0);switch (mSearchablesMode) {case SEARCHABLES_PASSTHROUGH:    return mRealPackageManager.resolveContentProvider(name,flags);case SEARCHABLES_MOCK_ZERO:default :  throw new UnsupportedOperationException();}}  }
class C{  public static double incompleteGammaComplement(double a,double x){  double ans, ax, c, yc, r, t, y, z;  double pk, pkm1, pkm2, qk, qkm1, qkm2;  if (x <= 0 || a <= 0)   return 1.0;  if (x < 1.0 || x < a)   return 1.0 - incompleteGamma(a,x);  ax=a * Math.log(x) - x - lnGamma(a);  if (ax < -MAXLOG)   return 0.0;  ax=Math.exp(ax);  y=1.0 - a;  z=x + y + 1.0;  c=0.0;  pkm2=1.0;  qkm2=x;  pkm1=x + 1.0;  qkm1=z * x;  ans=pkm1 / qkm1;  do {    c+=1.0;    y+=1.0;    z+=2.0;    yc=y * c;    pk=pkm1 * z - pkm2 * yc;    qk=qkm1 * z - qkm2 * yc;    if (qk != 0) {      r=pk / qk;      t=Math.abs((ans - r) / r);      ans=r;    } else     t=1.0;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (Math.abs(pk) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }  } while (t > MACHEP);  return ans * ax;}  }
class C{  public Collection<MailAddress> match(Mail mail) throws MessagingException {  HashSet<MailAddress> result=new HashSet<MailAddress>();  for (  Matcher matcher : getMatchers()) {    Collection<MailAddress> matchResult=matcher.match(mail);    if (matchResult != null) {      result.addAll(matchResult);    }    if (result.size() == mail.getRecipients().size()) {      break;    }  }  return result;}  }
class C{  public final void cleanup(){  mbean.cleanups.incrementAndGet();  if (log.isTraceEnabled()) {    log.trace("cleanup() called on " + getName() + " of size: "+ cacheEntries.size());  }  int i=0;  Reference<? extends V> ref=referenceQueue.poll();  while (ref != null) {    i++;    assert ref.get() == null : "Referent should be null by the time the Reference is added to the queue";    removeReference(ref);    ref=referenceQueue.poll();  }  if (log.isTraceEnabled()) {    log.trace("cleanup() finished on " + getName() + ".  "+ i+ " keys were cleaned up. ");  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode12.class,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:39.923 -0500",hash_original_method="72FBB2C6656BE4AE3AB40DA6CB70F970",hash_generated_method="8BE1B8153A027B32D41BF07FD000777A") protected void releaseConnection(){  try {    managedConn.releaseConnection();  } catch (  IOException ignored) {    this.log.debug("IOException releasing connection",ignored);  }  managedConn=null;}  }
class C{  public static void assertTrue(String message,boolean condition){  if (!condition) {    fail(message);  }}  }
class C{  @Override public Object signature(final FormObject form){  final StringBuilder styleBuilder=new StringBuilder(200);  final Button sigBut=new Button();  final JavaFXControlListener controlListener=new JavaFXControlListener(sigBut);  final String backgroundColor;  if (!form.isAppearanceUsed()) {    backgroundColor="rgb(221, 228, 255,0.7)";  } else {    backgroundColor="transparent";  }  setupUniversalFeatures(sigBut,form,styleBuilder,controlListener);  setupButton(sigBut,form,controlListener);  styleBuilder.append("-fx-padding:0;-fx-border:none;-fx-background-color:").append(backgroundColor).append(';');  sigBut.setStyle(styleBuilder.toString());  return sigBut;}  }
class C{  private void fetchTransactionStatus(FullWallet fullWallet){  if (mProgressDialog.isShowing()) {    mProgressDialog.dismiss();  }  PaymentMethodToken token=fullWallet.getPaymentMethodToken();  if (token != null) {    Log.d(TAG,"PaymentMethodToken:" + token.getToken().replace('\n',' '));  }  Intent intent=new Intent(getActivity(),OrderCompleteActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);  intent.putExtra(Constants.EXTRA_FULL_WALLET,fullWallet);  startActivity(intent);}  }
class C{  private static <T>T instance(Class<? extends T> cls,String clsName) throws IgniteException {  try {    Class<?> implCls=Class.forName(clsName);    if (!cls.isAssignableFrom(implCls))     throw new IgniteException("Failed to create instance (target class does not extend or implement " + "required class or interface) [cls=" + cls.getName() + ", clsName="+ clsName+ ']');    Constructor<?> ctor=implCls.getConstructor();    return (T)ctor.newInstance();  } catch (  ClassNotFoundException e) {    throw new IgniteException("Failed to find target class: " + clsName,e);  }catch (  NoSuchMethodException e) {    throw new IgniteException("Failed to find constructor for provided arguments " + "[clsName=" + clsName + ']',e);  }catch (  InstantiationException e) {    throw new IgniteException("Failed to instantiate target class " + "[clsName=" + clsName + ']',e);  }catch (  IllegalAccessException e) {    throw new IgniteException("Failed to instantiate class (constructor is not available) " + "[clsName=" + clsName + ']',e);  }catch (  InvocationTargetException e) {    throw new IgniteException("Failed to instantiate class (constructor threw an exception) " + "[clsName=" + clsName + ']',e.getCause());  }}  }
class C{  private void handleCheckCastResults(){  for (  NormalSsaInsn insn : moveResultPseudoInsns) {    RegisterSpec moveRegSpec=insn.getResult();    int moveReg=moveRegSpec.getReg();    BitSet predBlocks=insn.getBlock().getPredecessors();    if (predBlocks.cardinality() != 1) {      continue;    }    SsaBasicBlock predBlock=ssaMeth.getBlocks().get(predBlocks.nextSetBit(0));    ArrayList<SsaInsn> insnList=predBlock.getInsns();    SsaInsn checkCastInsn=insnList.get(insnList.size() - 1);    if (checkCastInsn.getOpcode().getOpcode() != RegOps.CHECK_CAST) {      continue;    }    RegisterSpec checkRegSpec=checkCastInsn.getSources().get(0);    int checkReg=checkRegSpec.getReg();    int category=checkRegSpec.getCategory();    boolean moveMapped=ssaRegsMapped.get(moveReg);    boolean checkMapped=ssaRegsMapped.get(checkReg);    if (moveMapped & !checkMapped) {      int moveRopReg=mapper.oldToNew(moveReg);      checkMapped=tryMapReg(checkRegSpec,moveRopReg,category);    }    if (checkMapped & !moveMapped) {      int checkRopReg=mapper.oldToNew(checkReg);      moveMapped=tryMapReg(moveRegSpec,checkRopReg,category);    }    if (!moveMapped || !checkMapped) {      int ropReg=findNextUnreservedRopReg(paramRangeEnd,category);      ArrayList<RegisterSpec> ssaRegs=new ArrayList<RegisterSpec>(2);      ssaRegs.add(moveRegSpec);      ssaRegs.add(checkRegSpec);      while (!tryMapRegs(ssaRegs,ropReg,category,false)) {        ropReg=findNextUnreservedRopReg(ropReg + 1,category);      }    }    boolean hasExceptionHandlers=checkCastInsn.getOriginalRopInsn().getCatches().size() != 0;    int moveRopReg=mapper.oldToNew(moveReg);    int checkRopReg=mapper.oldToNew(checkReg);    if (moveRopReg != checkRopReg && !hasExceptionHandlers) {      ((NormalSsaInsn)checkCastInsn).changeOneSource(0,insertMoveBefore(checkCastInsn,checkRegSpec));      addMapping(checkCastInsn.getSources().get(0),moveRopReg);    }  }}  }
class C{  public Plane(Plane plane){  if (plane == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Plane","constructor","missingPlane"));  }  this.normal.set(plane.normal);  this.distance=plane.distance;}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  MDDOrderLine[] lines=getLines(true,"M_Product_ID");  for (int i=0; i < lines.length; i++) {    MDDOrderLine line=lines[i];    BigDecimal old=line.getQtyOrdered();    if (old.compareTo(line.getQtyDelivered()) != 0) {      line.setQtyOrdered(line.getQtyDelivered());      line.addDescription("Close (" + old + ")");      line.save(get_TrxName());    }  }  reserveStock(lines);  setProcessed(true);  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public boolean isTagCountDefined(int tagId){  int info=getTagInfo().get(tagId);  if (info == 0) {    return false;  }  return getComponentCountFromInfo(info) != ExifTag.SIZE_UNDEFINED;}  }
class C{  public void requestAllStatus(){  getTurnoutManager().getSystemNameList().forEach(null);  getSensorManager().getSystemNameList().forEach(null);  getLightManager().getSystemNameList().forEach(null);  getReporterManager().getSystemNameList().forEach(null);}  }
class C{  public List<Image> supersFor(IHex hex){  return hexTileset.getSupers(hex,boardview);}  }
class C{  public RemoteRepositories(final String url) throws JAXBException {  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(url);  _matrixParamSet=_uriBuilder.addPathSegment("system");  _matrixParamSet=_uriBuilder.addPathSegment("configuration");  _matrixParamSet=_uriBuilder.addPathSegment("remoteRepositories");  _templateAndMatrixParameterValues=new HashMap<String,Object>();}  }
class C{  public void ifNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNULL,label);}  }
class C{  @DSComment("no security concern") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.043 -0500",hash_original_method="8853C25F592811C3C813B7E0334D3C5F",hash_generated_method="150283417C2E86293C532259A36378CD") @Override public void close() throws IOException {}  }
class C{  public static ExecutorService newSingleThreadExecutor(){  return Executors.unconfigurableExecutorService(newFixedThreadPool(1));}  }
class C{  public final int indexOf(int elem){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  private int kanjiNumeralValue(char c){  return numerals[c];}  }
class C{  protected List<EvaluationStatistics> evaluateSequential(MultiLabelClassifier classifier,Instances dataset){  List<EvaluationStatistics> result;  List<EvaluationStatistics> stats;  int i;  result=new ArrayList<>();  for (i=m_LowerRuns; i <= m_UpperRuns; i++) {    log("Run: " + i);    if (m_Evaluator instanceof Randomizable)     ((Randomizable)m_Evaluator).setSeed(i);    m_Evaluator.initialize();    stats=m_Evaluator.evaluate(classifier,dataset);    if (stats != null) {      for (      EvaluationStatistics stat : stats) {        stat.put(KEY_RUN,i);        result.add(stat);      }    }    if (m_Stopped)     break;  }  return result;}  }
class C{  public void transformValues(TDoubleFunction function){  byte[] states=_states;  double[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  private double[][] convertGradTau(double[] basicGradTau){  double[][] m=MatrixUtils.invVech(basicGradTau);  double[][] m2=new double[numVars][numVars];  for (int i=0; i < m.length; i++) {    for (int j=0; j < m.length; j++) {      m2[getIndices()[i]][getIndices()[j]]=m[i][j];    }  }  return MatrixUtils.vech(m2);}  }
class C{  public static void testWritable(Writable before) throws Exception {  testWritable(before,null);}  }
class C{  public synchronized boolean resetIndex(IPath containerPath){  String containerPathString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();  try {    IndexLocation indexLocation=computeIndexLocation(containerPath);    Index index=getIndex(indexLocation);    if (JobManager.VERBOSE) {      Util.verbose("-> reseting index: " + indexLocation + " for path: "+ containerPathString);    }    if (index == null) {      return recreateIndex(containerPath) != null;    }    index.reset();    return true;  } catch (  IOException e) {    if (JobManager.VERBOSE) {      Util.verbose("-> failed to reset index for path: " + containerPathString);      e.printStackTrace();    }    return false;  }}  }
class C{  public void removeTemplateFromCache(String name,Locale locale) throws IOException {  removeTemplateFromCache(name,locale,getEncoding(locale),true);}  }
class C{  public final void testAddAllHelperTextColorsFromArray(){  int helperTextColor1=Color.BLACK;  int helperTextColor2=Color.GRAY;  int[] helperTextColors1=new int[2];  helperTextColors1[0]=helperTextColor1;  helperTextColors1[1]=helperTextColor2;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextColors(helperTextColors1);  passwordEditText.addAllHelperTextColors(helperTextColors1);  Collection<Integer> helperTextColors2=passwordEditText.getHelperTextColors();  assertEquals(helperTextColors1.length,helperTextColors2.size());  Iterator<Integer> iterator=helperTextColors2.iterator();  assertEquals(helperTextColor1,(int)iterator.next());  assertEquals(helperTextColor2,(int)iterator.next());}  }
class C{  public static void safeUnsubscribe(@Nullable Subscription subscription){  if (subscription != null && !subscription.isUnsubscribed()) {    subscription.unsubscribe();  }}  }
class C{  public void normalizeIncomingWeights(){  for (  Neuron n : getNeuronList()) {    double normFactor=n.getSummedIncomingWeights();    for (    Synapse s : n.getFanIn()) {      s.setStrength(s.getStrength() / normFactor);    }  }}  }
class C{  public OrganizationAlreadyBannedException(){}  }
class C{  public TIntObjectHashMap(TIntHashingStrategy strategy){  _hashingStrategy=strategy;}  }
class C{  public Choice(String text,T value,String detailText){  this.text=text;  this.value=value;  this.detailText=detailText;}  }
class C{  protected void load() throws IOException {  long sequenceNumber=readUInt();  if (sequenceNumber != expectedSequenceNumber) {    throw new IllegalStateException("Expected sequence number " + expectedSequenceNumber + " got "+ sequenceNumber);  }  expectedSequenceNumber++;  byte[] hash=new byte[HASH_SIZE];  readFully(hash);  long readLength=readUInt();  if (readLength < 0) {    throw new IllegalStateException("Got negative length for block");  }  if (readLength == 0) {    if (!Arrays.equals(hash,ZERO_HASH)) {      throw new IllegalStateException("Block hash was not zero on final block");    }    done=true;    return;  }  byte[] readBuffer=new byte[(int)readLength];  readFully(readBuffer);  md5.update(readBuffer);  if (!Arrays.equals(md5.digest(),hash)) {    throw new IllegalStateException("MD5 check failed while reading HashBlock");  }  blockInputStream=new ByteArrayInputStream(readBuffer);}  }
class C{  private void removeAddressSpaceListeners(final INaviAddressSpace addressSpace){  if (addressSpace.isLoaded()) {    for (    final INaviModule module : addressSpace.getContent().getModules()) {      module.removeListener(m_moduleListener);    }  }  addressSpace.removeListener(m_addressSpaceListener);  addressSpace.getConfiguration().removeListener(m_addressSpaceConfigurationListener);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int checkActions(Map<String,Object> entry){  boolean ip6=false;  boolean ip4=false;  String actions=null;  if (entry.containsKey(StaticFlowEntryPusher.COLUMN_ACTIONS) || entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS) || entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS)) {    if (entry.containsKey(StaticFlowEntryPusher.COLUMN_ACTIONS)) {      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_ACTIONS);    } else     if (entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS)) {      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS);    } else     if (entry.containsKey(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS)) {      actions=(String)entry.get(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS);    }    if (actions.contains(MatchUtils.STR_ICMPV6_CODE) || actions.contains(MatchUtils.STR_ICMPV6_TYPE) || actions.contains(MatchUtils.STR_IPV6_DST)|| actions.contains(MatchUtils.STR_IPV6_SRC)|| actions.contains(MatchUtils.STR_IPV6_FLOW_LABEL)|| actions.contains(MatchUtils.STR_IPV6_ND_SSL)|| actions.contains(MatchUtils.STR_IPV6_ND_TARGET)|| actions.contains(MatchUtils.STR_IPV6_ND_TTL)) {      ip6=true;    }    if (actions.contains(MatchUtils.STR_NW_SRC) || actions.contains(MatchUtils.STR_NW_DST) || actions.contains(MatchUtils.STR_ARP_OPCODE)|| actions.contains(MatchUtils.STR_ARP_SHA)|| actions.contains(MatchUtils.STR_ARP_DHA)|| actions.contains(MatchUtils.STR_ARP_SPA)|| actions.contains(MatchUtils.STR_ARP_DPA)|| actions.contains(MatchUtils.STR_ICMP_CODE)|| actions.contains(MatchUtils.STR_ICMP_TYPE)) {      ip4=true;    }  }  if (ip6 == false && ip4 == false) {    return 0;  } else   if (ip6 == false && ip4 == true) {    return 1;  } else   if (ip6 == true && ip4 == false) {    return 2;  } else {    return -1;  }}  }
class C{  public void clear(){  if (!isEmpty()) {    Set oldSelection=new HashSet(selection);    selection.clear();    fireSelectionChanged(oldSelection,selection);    oldSelection=null;  }}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public DemoModule(SwingSet2 swingset,String resourceName,String iconPath){  UIManager.put("swing.boldMetal",Boolean.FALSE);  panel=new JPanel();  panel.setBorder(BorderFactory.createEmptyBorder(0,5,5,5));  panel.setLayout(new BorderLayout());  this.resourceName=resourceName;  this.iconPath=iconPath;  this.swingset=swingset;  loadSourceCode();}  }
class C{  public static PrivateKey loadEncrypted(InputStream is,Password password) throws CryptoException, IOException {  byte[] streamContents=ReadUtil.readFully(is);  EncryptionType encType=getEncryptionType(new ByteArrayInputStream(streamContents));  if (encType == null) {    throw new CryptoException(res.getString("NotValidOpenSsl.exception.message"));  }  if (encType == UNENCRYPTED) {    throw new PrivateKeyUnencryptedException(res.getString("OpenSslIsUnencrypted.exception.message"));  }  PemInfo pemInfo=PemUtil.decode(new ByteArrayInputStream(streamContents));  byte[] encKey=pemInfo.getContent();  PemAttributes attributes=pemInfo.getAttributes();  String dekInfo=attributes.get(DEK_INFO_ATTR_NAME).getValue();  int separator=dekInfo.indexOf(',');  if (separator == -1) {    throw new CryptoException(MessageFormat.format("OpenSslDekInfoMalformed.exception.message",dekInfo));  }  String encAlg=dekInfo.substring(0,separator);  String salt=dekInfo.substring(separator + 1);  byte[] saltBytes=hexToBytes(salt);  OpenSslPbeType pbeType=OpenSslPbeType.resolveDekInfo(encAlg);  if (pbeType == null) {    throw new PrivateKeyPbeNotSupportedException(encAlg,MessageFormat.format(res.getString("PrivateKeyWrappingAlgUnsupported.exception.message"),encAlg));  }  try {    byte[] decryptKey=deriveKeyFromPassword(password,saltBytes,pbeType.keySize());    Cipher cipher=createCipher(pbeType.jceCipher(),decryptKey,saltBytes,DECRYPT_MODE);    byte[] key=cipher.doFinal(encKey);    return load(new ByteArrayInputStream(key));  } catch (  GeneralSecurityException ex) {    throw new CryptoException(MessageFormat.format("OpenSslDecryptionFailed.exception.message",pbeType.friendly()),ex);  }}  }
class C{  public void sortInstances(int columnIndex){  ((DataTableModel)getModel()).sortInstances(columnIndex);}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateCrtKeySpec spec){  this.modulus=spec.getModulus();  this.publicExponent=spec.getPublicExponent();  this.privateExponent=spec.getPrivateExponent();  this.primeP=spec.getPrimeP();  this.primeQ=spec.getPrimeQ();  this.primeExponentP=spec.getPrimeExponentP();  this.primeExponentQ=spec.getPrimeExponentQ();  this.crtCoefficient=spec.getCrtCoefficient();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public BinaryIn(String name){  try {    File file=new File(name);    if (file.exists()) {      FileInputStream fis=new FileInputStream(file);      in=new BufferedInputStream(fis);      fillBuffer();      return;    }    URL url=getClass().getResource(name);    if (url == null) {      url=new URL(name);    }    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    in=new BufferedInputStream(is);    fillBuffer();  } catch (  IOException ioe) {    System.err.println("Could not open " + name);  }}  }
class C{  public static Statement insertStatement(Statement s1,Statement s2){  if (s2 == null) {    s2=s1;  } else   if (s2 instanceof CompoundStatement) {    ((CompoundStatement)s2).insertStatement(s1);  } else {    Statement body[]={s1,s2};    s2=new CompoundStatement(s1.getWhere(),body);  }  return s2;}  }
class C{  public static Coordinate projectedSplitPoint(Segment seg,Coordinate encroachPt){  LineSegment lineSeg=seg.getLineSegment();  Coordinate projPt=lineSeg.project(encroachPt);  return projPt;}  }
class C{  public boolean isAutoIndexPresent(){  return autoIndexPresent;}  }
class C{  static BTree createTermsIndex(final IRawStore store,final String namespace){  final IndexMetadata metadata=getTermsIndexMetadata(namespace);  final BTree ndx=BTree.create(store,metadata);  return ndx;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.888 -0500",hash_original_method="3D3F8EE18B5CE9AC13BB6381C124884E",hash_generated_method="3D5BAD4397EDF17631B025110C08CA48") private boolean handleParentProc(int pid,FileDescriptor[] descriptors,FileDescriptor pipeFd,Arguments parsedArgs){  if (pid > 0) {    setChildPgid(pid);  }  if (descriptors != null) {    for (    FileDescriptor fd : descriptors) {      IoUtils.closeQuietly(fd);    }  }  boolean usingWrapper=false;  if (pipeFd != null && pid > 0) {    DataInputStream is=new DataInputStream(new FileInputStream(pipeFd));    int innerPid=-1;    try {      innerPid=is.readInt();    } catch (    IOException ex) {      Log.w(TAG,"Error reading pid from wrapped process, child may have died",ex);    } finally {      try {        is.close();      } catch (      IOException ex) {      }    }    if (innerPid > 0) {      int parentPid=innerPid;      while (parentPid > 0 && parentPid != pid) {        parentPid=Process.getParentPid(parentPid);      }      if (parentPid > 0) {        Log.i(TAG,"Wrapped process has pid " + innerPid);        pid=innerPid;        usingWrapper=true;      } else {        Log.w(TAG,"Wrapped process reported a pid that is not a child of " + "the process that we forked: childPid=" + pid + " innerPid="+ innerPid);      }    }  }  try {    mSocketOutStream.writeInt(pid);    mSocketOutStream.writeBoolean(usingWrapper);  } catch (  IOException ex) {    Log.e(TAG,"Error reading from command socket",ex);    return true;  }  if (parsedArgs.peerWait) {    try {      mSocket.close();    } catch (    IOException ex) {      Log.e(TAG,"Zygote: error closing sockets",ex);    }    return true;  }  return false;}  }
class C{  protected void addMessagesFromJsonObject(JsonElement jsonElement) throws CommonException {  if (!jsonElement.isJsonObject()) {    throw createUnknownLineSyntaxError(jsonElement.toString());  }  JsonObject messages=jsonElement.getAsJsonObject();  String messageText=helper.getString(messages,"message");  if (isMessageEnd(messageText)) {    return;  }  String severityLevel=helper.getOptionalString(messages,"level");  if (severityLevel == null) {    severityLevel=Severity.WARNING.getLabel();  }  String errorCode=getErrorCode(messages);  String notes=getNotes(messages.get("children"));  JsonElement spans=messages.get("spans");  if (spans == null || !spans.isJsonArray()) {    throw createUnknownLineSyntaxError(jsonElement.toString());  }  JsonArray spansArray=spans.getAsJsonArray();  if (spansArray.size() == 0) {    ToolMessageData without_span=toolMessageWithoutSpan(messageText,severityLevel,notes);    addBuildMessage(without_span);  } else {    for (    JsonElement span : spansArray) {      if (!span.isJsonObject()) {        throw createUnknownLineSyntaxError(jsonElement.toString());      }      JsonObject spanObject=span.getAsJsonObject();      addToolMessageFromSpanObject(spanObject,messageText,severityLevel,errorCode,notes,"",false,"");    }  }}  }
class C{  public Color divide(Color color){  return rgbac(red() / color.red(),green() / color.green(),blue() / color.blue(),alpha());}  }
class C{  public boolean isClosed(){  return map.isClosed();}  }
class C{  public double heapUsed(){  return memory.getHeapMemoryUsage().getUsed();}  }
class C{  public static void statusEvents(){  final Status statusObj=Status.self();  if (Cfg.DEBUG) {    Check.log("Status Events Begins");  }  for (int i=0; i < statusObj.getEventsNumber(); i++) {    try {      final ConfEvent e=statusObj.getEvent(i);      if (Cfg.DEBUG) {        Check.log(" Event (" + e.getId() + ") "+ e.getType()+ " ["+ e.desc+ "] "+ e);      }    } catch (    final GeneralException rcse) {      if (Cfg.EXCEPTION) {        Check.log(rcse);      }    }  }  if (Cfg.DEBUG) {    Check.log("Status Events Ends");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.601 -0400",hash_original_method="EB84086797A3D4C584C92992867C0467",hash_generated_method="A00872A77BF0CE570657E256AC0B443A") public NameFileFilter(String name){  this(name,null);}  }
class C{  public void clear(){  removeAll(false);}  }
class C{  private String computeDefaultUserAreaLocation(String pathAppendage){  URL installURL=getInstallLocation();  if (installURL == null)   return null;  File installDir=new File(installURL.getFile());  String installDirHash=getInstallDirHash();  if (protectBase && Constants.OS_MACOSX.equals(os)) {    initializeBridgeEarly();    String macConfiguration=computeConfigurationLocationForMacOS();    if (macConfiguration != null) {      return macConfiguration;    }    if (debug)     System.out.println("Computation of Mac specific configuration folder failed.");  }  String appName="." + ECLIPSE;  File eclipseProduct=new File(installDir,PRODUCT_SITE_MARKER);  if (eclipseProduct.exists()) {    Properties props=new Properties();    try {      props.load(new FileInputStream(eclipseProduct));      String appId=props.getProperty(PRODUCT_SITE_ID);      if (appId == null || appId.trim().length() == 0)       appId=ECLIPSE;      String appVersion=props.getProperty(PRODUCT_SITE_VERSION);      if (appVersion == null || appVersion.trim().length() == 0)       appVersion="";      appName+=File.separator + appId + "_"+ appVersion+ "_"+ installDirHash;    } catch (    IOException e) {      appName+=File.separator + installDirHash;    }  } else {    appName+=File.separator + installDirHash;  }  appName+='_' + OS_WS_ARCHToString();  String userHome=System.getProperty(PROP_USER_HOME);  return new File(userHome,appName + "/" + pathAppendage).getAbsolutePath();}  }
class C{  public int deserialize(final byte[] b,final int off) throws ParseException {  if (b == null) {    return 0;  }  int parsedBytes=0;  try {    if (version_ < 0) {      parsedBytes+=parseVersion(b,off + parsedBytes);    }    if (typeVal_ == 0) {      parsedBytes+=parseType(b,off + parsedBytes);    }    if (cryptoAlgoVal_ < 0) {      parsedBytes+=parseAlgoId(b,off + parsedBytes);    }    if (messageId_ == null) {      parsedBytes+=parseMessageId(b,off + parsedBytes);    }    if (encryptionContextLen_ < 0) {      parsedBytes+=parseEncryptionContextLen(b,off + parsedBytes);    }    if (encryptionContextLen_ > 0 && encryptionContext_.length == 0) {      parsedBytes+=parseEncryptionContext(b,off + parsedBytes);    }    if (cipherKeyCount_ < 0) {      parsedBytes+=parseEncryptedDataKeyCount(b,off + parsedBytes);      cipherKeyBlobs_=Arrays.asList(new KeyBlob[cipherKeyCount_]);    }    if (cipherKeyCount_ > 0) {      while (currKeyBlobIndex_ < cipherKeyCount_) {        if (cipherKeyBlobs_.get(currKeyBlobIndex_) == null) {          cipherKeyBlobs_.set(currKeyBlobIndex_,new KeyBlob());        }        if (cipherKeyBlobs_.get(currKeyBlobIndex_).isComplete() == false) {          parsedBytes+=parseEncryptedKeyBlob(b,off + parsedBytes);          if (cipherKeyBlobs_.get(currKeyBlobIndex_).isComplete() == false) {            throw new ParseException("Not enough bytes to parse key blob");          }        }        currKeyBlobIndex_++;      }    }    if (contentTypeVal_ < 0) {      parsedBytes+=parseContentType(b,off + parsedBytes);    }    if (reservedField_ < 0) {      parsedBytes+=parseReservedField(b,off + parsedBytes);    }    if (nonceLen_ < 0) {      parsedBytes+=parseNonceLen(b,off + parsedBytes);    }    if (frameLength_ < 0) {      parsedBytes+=parseFramePayloadLength(b,off + parsedBytes);    }    if (nonceLen_ > 0 && headerNonce_ == null) {      parsedBytes+=parseHeaderNonce(b,off + parsedBytes);    }    if (headerTag_ == null) {      parsedBytes+=parseHeaderTag(b,off + parsedBytes);    }    isComplete_=true;  } catch (  ParseException e) {  }  return parsedBytes;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static SchemasDefinition createExtendedSchemasDefinitionForPDFA_2_3(VeraPDFXMPNode schemas,boolean isClosedFieldsCheck){  return createExtendedSchemasDefinition(schemas,false,isClosedFieldsCheck);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public String runTrain(Warrant w){  String msg=null;  if (w.getRunMode() != Warrant.MODE_NONE) {    msg=w.getRunModeMessage();    setStatusText(msg,Color.red,false);    return msg;  }  msg=w.setRoute(0,null);  setStatusText(msg,WarrantTableModel.myGold,false);  if (msg != null) {    setStatusText(msg,Color.red,false);    return msg;  }  msg=w.setRunMode(Warrant.MODE_RUN,null,null,null,w.getRunBlind());  if (msg != null) {    setStatusText(msg,Color.red,false);    return msg;  }  msg=w.checkStartBlock(Warrant.MODE_RUN);  setStatusText(msg,WarrantTableModel.myGold,false);  msg=w.checkRoute();  if (msg != null) {    setStatusText(msg,WarrantTableModel.myGreen,false);  }  return null;}  }
class C{  static SQLWarning convertShowWarningsToSQLWarnings(Connection connection) throws SQLException {  return convertShowWarningsToSQLWarnings(connection,0,false);}  }
class C{  private void checkSupportedVersion(IndexMetaData indexMetaData){  if (indexMetaData.getState() == IndexMetaData.State.OPEN && isSupportedVersion(indexMetaData) == false) {    throw new IllegalStateException("The index [" + indexMetaData.getIndex() + "] was created before v0.90.0 and wasn't upgraded."+ " This index should be open using a version before "+ Version.CURRENT.minimumCompatibilityVersion()+ " and upgraded using the upgrade API.");  }}  }
class C{  public boolean isLastChild(){  if (parent == null)   return true;  List<IBlock> sibling=parent.getChildren();  if (sibling == null) {    return false;  }  return sibling.indexOf(this) == sibling.size() - 1;}  }
class C{  static void copy(InputStream in,OutputStream out) throws IOException {  byte[] tmp=new byte[8192];  int len=0;  while (true) {    len=in.read(tmp);    if (len <= 0) {      break;    }    out.write(tmp,0,len);  }}  }
class C{  private Object writeReplace() throws ObjectStreamException {  return new LinkedHashMap<K,V>(this);}  }
class C{  public MetricSpacesImageSearcher(int maximumHits,File referencePointFile) throws IllegalAccessException, InstantiationException, ClassNotFoundException {  this.maximumHits=maximumHits;  try {    p=MetricSpaces.loadReferencePoints(referencePointFile);    this.feature=(GlobalFeature)p.featureClass.newInstance();    this.featureFieldName=feature.getFieldName();    this.hashesFieldName=featureFieldName + DocumentBuilder.HASH_FIELD_SUFFIX;  } catch (  IOException e) {    System.err.println("Error reading hash functions from default location.");    e.printStackTrace();  }}  }
class C{  public int length(){  return larray.length();}  }
class C{  public boolean contains(final URI uri){  return this.uris.contains(uri);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public void takePhotoHandler(View view){  startCamera();}  }
class C{  protected void update(){  size=0;  Node shadowTree=getXblShadowTree(record.node);  Node last=null;  Node m=shadowTree == null ? record.node.getFirstChild() : shadowTree.getFirstChild();  while (m != null) {    last=collectXblChildNodes(m,last);    m=m.getNextSibling();  }  if (last != null) {    XBLRecord rec=getRecord(last);    rec.nextSibling=null;    rec.linksValid=true;  }}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.OPERATION;}  }
class C{  static void writeXMLObject(OutputStream os,Object o,ExceptionListener listener){  ClassLoader oldClassLoader=Thread.currentThread().getContextClassLoader();  Thread.currentThread().setContextClassLoader(LayoutUtil.class.getClassLoader());  XMLEncoder encoder=new XMLEncoder(os);  if (listener != null)   encoder.setExceptionListener(listener);  encoder.writeObject(o);  encoder.close();  Thread.currentThread().setContextClassLoader(oldClassLoader);}  }
class C{  public LinkedList<Patch> patch_deepCopy(LinkedList<Patch> patches){  LinkedList<Patch> patchesCopy=new LinkedList<Patch>();  for (  Patch aPatch : patches) {    Patch patchCopy=new Patch();    for (    Diff aDiff : aPatch.diffs) {      Diff diffCopy=new Diff(aDiff.operation,aDiff.text);      patchCopy.diffs.add(diffCopy);    }    patchCopy.start1=aPatch.start1;    patchCopy.start2=aPatch.start2;    patchCopy.length1=aPatch.length1;    patchCopy.length2=aPatch.length2;    patchesCopy.add(patchCopy);  }  return patchesCopy;}  }
class C{  public SpkacMissingPropertyException(String message){  super(message);}  }
class C{  public Builder trackProgress(ProgressListener listener,long progressInterval){  this.listener=listener;  this.progressInterval=progressInterval;  return this;}  }
class C{  public int length(){  return length;}  }
class C{  protected SVGOMComponentTransferFunctionElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  private void RangeCheck(int index){  if (index >= size) {    throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST:    setAnnotationList((PropertyAssignmentAnnotationList)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public String copyMail(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  String colName=mField.getColumnName();  log.info(colName + "=" + value);  if (value == null)   return "";  Integer R_MailText_ID=(Integer)value;  MMailText mailtext=new MMailText(ctx,R_MailText_ID.intValue(),null);  Integer userID=(Integer)mTab.getValue("AD_User_ID");  if (userID != null)   mailtext.setUser(userID.intValue());  Integer bpID=(Integer)mTab.getValue("C_BPartner_ID");  if (bpID != null)   mailtext.setBPartner(bpID.intValue());  String txt=mailtext.getMailText();  txt=Env.parseContext(ctx,WindowNo,txt,false,true);  mTab.setValue("Result",txt);  return "";}  }
class C{  public Script in(scala.collection.Seq<Object> inputs){  List<Object> list=JavaConversions.seqAsJavaList(inputs);  for (  Object obj : list) {    if (obj instanceof Tuple3) {      @SuppressWarnings("unchecked") Tuple3<String,Object,MatrixMetadata> t3=(Tuple3<String,Object,MatrixMetadata>)obj;      in(t3._1(),t3._2(),t3._3());    } else     if (obj instanceof Tuple2) {      @SuppressWarnings("unchecked") Tuple2<String,Object> t2=(Tuple2<String,Object>)obj;      in(t2._1(),t2._2());    } else {      throw new MLContextException("Only Tuples of 2 or 3 values are permitted");    }  }  return this;}  }
class C{  public static boolean isImmutableClass(Class<?> clazz){  do {    Field[] fields=clazz.getDeclaredFields();    for (    Field field : fields) {      if (Modifier.isStatic(field.getModifiers()))       continue;      if (Modifier.isTransient(field.getModifiers()))       continue;      if (!Modifier.isFinal(field.getModifiers()))       return false;      if (field.getType().isPrimitive())       continue;      if (immutableClasses.contains(field.getType()))       continue;      if (field.getType().isEnum()) {        if (isImmutable(field.getType()))         continue;      }      return false;    }    clazz=clazz.getSuperclass();  } while (!Object.class.equals(clazz));  return true;}  }
class C{  public ThickCloseableIterator(final E[] a,final int len){  if (a == null)   throw new IllegalArgumentException();  if (len > a.length)   throw new IllegalArgumentException();  this.a=a;  this.len=len;  lastIndex=-1;}  }
class C{  public void putColorRelative(int i,boolean b){  if (b)   masks[i]|=COLOR_RELATIVE_MASK; else   masks[i]&=~COLOR_RELATIVE_MASK;}  }
class C{  private void addPoint(Point p){  if (distance <= 0.0)   return;  Coordinate[] coord=p.getCoordinates();  Coordinate[] curve=curveBuilder.getLineCurve(coord,distance);  addCurve(curve,Location.EXTERIOR,Location.INTERIOR);}  }
class C{  private void generateChunksForSchema(String schemaName){  try {    if (logger.isDebugEnabled())     logger.debug("Getting list of tables from " + schemaName);    ArrayList<Table> tablesFromSchema=connection.getTables(schemaName,true,true);    if (logger.isDebugEnabled())     logger.debug("Tables : " + tablesFromSchema);    if (tablesFromSchema != null && tablesFromSchema.size() > 0) {      for (      Table table : tablesFromSchema) {        generateChunksForTable(table,-1,null);      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public int nextInt(){  return generateBinomial(n,p);}  }
class C{  public static void compress(){  String input=BinaryStdIn.readString();  TST<Integer> st=new TST<Integer>();  for (int i=0; i < R; i++)   st.put("" + (char)i,i);  int code=R + 1;  while (input.length() > 0) {    String s=st.longestPrefixOf(input);    BinaryStdOut.write(st.get(s),W);    int t=s.length();    if (t < input.length() && code < L)     st.put(input.substring(0,t + 1),code++);    input=input.substring(t);  }  BinaryStdOut.write(R,W);  BinaryStdOut.close();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.MORE_OP___MORE_OP_1:    return getMoreOp_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat,BloomFilterFactory bloomFilterFactory){  super(BLOOM_CODEC_NAME);  this.delegatePostingsFormat=delegatePostingsFormat;  this.bloomFilterFactory=bloomFilterFactory;}  }
class C{  public boolean isSwipeEnabled(){  return mTouchHelperCallback.isItemViewSwipeEnabled();}  }
class C{  void generateLeafNode(BlockPos pos){  for (int i=0; i < this.leafDistanceLimit; ++i) {    this.func_181631_a(pos.up(i),this.leafSize(i),this.leavesBlock.withProperty(BlockLeaves.CHECK_DECAY,Boolean.valueOf(false)));  }}  }
class C{  public void clear(){  clearCookies();  clearCredentials();  clearProxyCredentials();}  }
class C{  public void paintComponent(Graphics g,Component c,Container p,Rectangle r){  paintComponent(g,c,p,r.x,r.y,r.width,r.height);}  }
class C{  public JBBPOut Bits(final JBBPBitNumber numberOfBits,final byte[] value) throws IOException {  assertNotEnded();  JBBPUtils.assertNotNull(value,"Array must not be null");  if (this.processCommands) {    for (    final byte b : value) {      _writeBits(numberOfBits,b);    }  }  return this;}  }
class C{  public void instantiateNetworkAndTravelDisutility(){  String transitScheduleFile="test/scenarios/pt-tutorial/transitschedule.xml";  Config config=ConfigUtils.createConfig();  Scenario scenario=ScenarioUtils.loadScenario(config);  scenario.getConfig().transit().setUseTransit(true);  TransitScheduleReader reader=new TransitScheduleReader(scenario);  TransitRouterConfig transitRouterConfig=new TransitRouterConfig(scenario.getConfig());  reader.readFile(transitScheduleFile);  TransitSchedule transitSchedule=scenario.getTransitSchedule();  network=TransitRouterNetwork.createFromSchedule(transitSchedule,transitRouterConfig.getBeelineWalkConnectionDistance());  PreparedTransitSchedule preparedTransitSchedule=new PreparedTransitSchedule(transitSchedule);  travelDisutility=new TransitRouterNetworkTravelTimeAndDisutility(transitRouterConfig,preparedTransitSchedule);}  }
class C{  public noframes addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void write(DataOutputStream out) throws IOException, jasError {  out.writeInt(magic);  out.writeShort(version_lo);  out.writeShort(version_hi);  int curidx=1;  cpe_index=new Hashtable();  for (Enumeration e=cpe.elements(); e.hasMoreElements(); ) {    CP tmp=(CP)(e.nextElement());    cpe_index.put(tmp.getUniq(),new Integer(curidx));    curidx++;    if ((tmp instanceof LongCP) || (tmp instanceof DoubleCP))     curidx++;  }  out.writeShort((short)curidx);  for (Enumeration e=cpe.elements(); e.hasMoreElements(); ) {    CP now=(CP)(e.nextElement());    now.write(this,out);  }  out.writeShort(class_access);  out.writeShort(getCPIndex(this_class));  out.writeShort(getCPIndex(super_class));  out.writeShort(interfaces.size());  for (Enumeration e=interfaces.elements(); e.hasMoreElements(); ) {    CP c=(CP)(e.nextElement());    out.writeShort(getCPIndex(c));  }  out.writeShort(vars.size());  for (Enumeration e=vars.elements(); e.hasMoreElements(); ) {    Var v=(Var)(e.nextElement());    v.write(this,out);  }  out.writeShort(methods.size());  for (Enumeration e=methods.elements(); e.hasMoreElements(); ) {    Method m=(Method)(e.nextElement());    m.write(this,out);  }  short numExtra=0;  if (source != null) {    numExtra++;  }  if (debug != null) {    numExtra++;  }  if (enclosing != null) {    numExtra++;  }  if (signature != null) {    numExtra++;  }  if (innerclasses != null) {    numExtra++;  }  if (depr != null) {    numExtra++;  }  if (annVis != null) {    numExtra++;  }  if (annInvis != null) {    numExtra++;  }  numExtra+=generic.size();  out.writeShort(numExtra);  if (source != null) {    source.write(this,out);  }  if (debug != null) {    debug.write(this,out);  }  if (enclosing != null) {    enclosing.write(this,out);  }  if (signature != null) {    signature.write(this,out);  }  if (innerclasses != null) {    innerclasses.write(this,out);  }  if (depr != null) {    depr.write(this,out);  }  if (annVis != null) {    annVis.write(this,out);  }  if (annInvis != null) {    annInvis.write(this,out);  }  for (Enumeration gen=generic.elements(); gen.hasMoreElements(); ) {    GenericAttr gattr=(GenericAttr)gen.nextElement();    gattr.write(this,out);  }  out.flush();}  }
class C{  public boolean isZero(){  return signum() == 0;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public int length(){  if (unitsInUse == 0) {    return 0;  }  long highestUnit=bits[unitsInUse - 1];  int highPart=(int)(highestUnit >>> 32);  return 64 * (unitsInUse - 1) + (highPart == 0 ? bitLen((int)highestUnit) : 32 + bitLen((int)highPart));}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isPreferred(){  return preferred;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"STC");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  public char charAt(int pos){  return text[pos];}  }
class C{  @Override public void input(Object input,Network network) throws Exception {  if (!isEnabled()) {    return;  }  log("Input",Level.INFO,input);  URL url=(URL)input;  String domain=url.getPath();  if (domain.length() > 5 && domain.substring(0,5).equals("/view")) {    domain=domain.substring(5,domain.length());  }  processId(domain,this.depth,false,"",network,new HashMap<String,Vertex>());}  }
class C{  protected final boolean storeUnknownField(CodedInputByteBufferNano input,int tag) throws IOException {  int startPos=input.getPosition();  if (!input.skipField(tag)) {    return false;  }  int fieldNumber=WireFormatNano.getTagFieldNumber(tag);  int endPos=input.getPosition();  byte[] bytes=input.getData(startPos,endPos - startPos);  UnknownFieldData unknownField=new UnknownFieldData(tag,bytes);  FieldData field=null;  if (unknownFieldData == null) {    unknownFieldData=new FieldArray();  } else {    field=unknownFieldData.get(fieldNumber);  }  if (field == null) {    field=new FieldData();    unknownFieldData.put(fieldNumber,field);  }  field.addUnknownField(unknownField);  return true;}  }
class C{  public final void trackSuccess(){  backoff=params.initial;  retryTime=Utils.currentTimeMillis();}  }
class C{  public GetSnapshotsRequestBuilder(ElasticsearchClient client,GetSnapshotsAction action){  super(client,action,new GetSnapshotsRequest());}  }
class C{  void recordLongTimesHistogram100(String name,long duration){  RecordHistogram.recordCustomTimesHistogram(name,TimeUnit.MILLISECONDS.toMillis(duration),TimeUnit.MILLISECONDS.toMillis(1),TimeUnit.HOURS.toMillis(1),TimeUnit.MILLISECONDS,100);}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  private static boolean isValidScheme(final String scheme){  final int length=scheme.length();  if (length <= 0) {    return false;  }  char c=scheme.charAt(0);  if (!Character.isLetter(c)) {    return false;  }  for (int i=1; i < length; i++) {    c=scheme.charAt(i);    if (!Character.isLetterOrDigit(c) && c != '.' && c != '+' && c != '-') {      return false;    }  }  return true;}  }
class C{  public void test_invalidate(){  SSLSession s=clientSession;  assertTrue(s.isValid());  s.invalidate();  assertFalse(s.isValid());}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public JdpBroadcaster(InetAddress address,InetAddress srcAddress,int port,int ttl) throws IOException, JdpException {  this.addr=address;  this.port=port;  ProtocolFamily family=(address instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;  channel=DatagramChannel.open(family);  channel.setOption(StandardSocketOptions.SO_REUSEADDR,true);  channel.setOption(StandardSocketOptions.IP_MULTICAST_TTL,ttl);  if (srcAddress != null) {    NetworkInterface interf=NetworkInterface.getByInetAddress(srcAddress);    try {      channel.bind(new InetSocketAddress(srcAddress,0));    } catch (    UnsupportedAddressTypeException ex) {      throw new JdpException("Unable to bind to source address");    }    channel.setOption(StandardSocketOptions.IP_MULTICAST_IF,interf);  }}  }
class C{  public TDoubleDoubleHashMap absoluteDistributionLog2(double descretization){  TDoubleDoubleHashMap freq=new TDoubleDoubleHashMap();  int size=values.size();  for (int i=0; i < size; i++) {    double bin=Math.ceil(Math.log(values.get(i) / descretization) / Math.log(2.0));    bin=Math.max(bin,0.0);    double binWidth=Math.pow(2,bin) - Math.pow(2,bin - 1);    binWidth=Math.max(1.0,binWidth);    freq.adjustOrPutValue(Math.pow(2,bin) * descretization,weights.get(i) / binWidth,weights.get(i) / binWidth);  }  return freq;}  }
class C{  public HungarianAlgorithm(double[][] costMatrix){  this.dim=Math.max(costMatrix.length,costMatrix[0].length);  this.rows=costMatrix.length;  this.cols=costMatrix[0].length;  this.costMatrix=new double[this.dim][this.dim];  for (int w=0; w < this.dim; w++) {    if (w < costMatrix.length) {      if (costMatrix[w].length != this.cols) {        throw new IllegalArgumentException("Irregular cost matrix");      }      this.costMatrix[w]=Arrays.copyOf(costMatrix[w],this.dim);    } else {      this.costMatrix[w]=new double[this.dim];    }  }  labelByWorker=new double[this.dim];  labelByJob=new double[this.dim];  minSlackWorkerByJob=new int[this.dim];  minSlackValueByJob=new double[this.dim];  committedWorkers=new boolean[this.dim];  parentWorkerByCommittedJob=new int[this.dim];  matchJobByWorker=new int[this.dim];  Arrays.fill(matchJobByWorker,-1);  matchWorkerByJob=new int[this.dim];  Arrays.fill(matchWorkerByJob,-1);}  }
class C{  private static long[] findDeadlockedThreads(ThreadMXBean bean){  if (VersionUtils.isJava16OrAbove()) {    try {      Method m=ThreadMXBean.class.getMethod("findDeadlockedThreads");      Object o=m.invoke(bean);      if (o instanceof long[] || o == null)       return (long[])o;    } catch (    Throwable t) {      LOG.error("Error calling findDeadlockedthreads",t);    }  }  return bean.findMonitorDeadlockedThreads();}  }
class C{  public void copyAllRotationPoints(MowzieModelRenderer target){  rotationPointX=target.rotationPointX;  rotationPointY=target.rotationPointY;  rotationPointZ=target.rotationPointZ;}  }
class C{  public static OutputStream createOutputStream(File file,boolean zip) throws IOException {  return createOutputStream(file,zip,false);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static String listIntegerConcat(List<Integer> list,String delimiter){  StringBuilder builder=new StringBuilder();  boolean first=true;  for (  Integer item : list) {    if (!first)     builder.append(delimiter);    builder.append(item);    first=false;  }  return builder.toString();}  }
class C{  public Restartable(ValueMap in,ValueMap.Builder out){  this.out=out;  key=in.get("key");  restore=in.get("restore",false);  arg=in.get("arg");}  }
class C{  public map addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static List<LatLon> cutLocationsAlongDateLine(Iterable<? extends LatLon> locations,String pole,Globe globe){  if (locations == null) {    String msg=Logging.getMessage("nullValue.LocationsListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (pole == null) {    String msg=Logging.getMessage("nullValue.PoleIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  List<LatLon> newLocations=new ArrayList<LatLon>();  Angle poleLat=AVKey.NORTH.equals(pole) ? Angle.POS90 : Angle.NEG90;  LatLon pos=null;  for (  LatLon posNext : locations) {    if (pos != null) {      newLocations.add(pos);      if (LatLon.locationsCrossDateline(pos,posNext)) {        LatLon separation=LatLon.intersectionWithMeridian(pos,posNext,Angle.POS180,globe);        double sign=Math.signum(pos.getLongitude().degrees);        Angle lat=separation.getLatitude();        Angle thisSideLon=Angle.POS180.multiply(sign);        Angle otherSideLon=thisSideLon.multiply(-1);        newLocations.add(new LatLon(lat,thisSideLon));        newLocations.add(new LatLon(poleLat,thisSideLon));        newLocations.add(new LatLon(poleLat,otherSideLon));        newLocations.add(new LatLon(lat,otherSideLon));      }    }    pos=posNext;  }  newLocations.add(pos);  return newLocations;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THREAD_INFO'";  db.execSQL(sql);}  }
class C{  public void testGetRegisteredContainers(){  int existingSize=factory.getContainerIds().size();  factory.registerContainer("id1",ContainerType.INSTALLED,InstalledLocalContainerStub.class);  factory.registerContainer("id1",ContainerType.EMBEDDED,EmbeddedLocalContainerStub.class);  factory.registerContainer("id2",ContainerType.INSTALLED,InstalledLocalContainerStub.class);  factory.registerContainer("id3",ContainerType.REMOTE,RemoteContainerStub.class);  Map<String,Set<ContainerType>> ids=factory.getContainerIds();  assertEquals(3,ids.size() - existingSize);  assertEquals(2,ids.get("id1").size());  assertTrue(ids.get("id1").contains(ContainerType.INSTALLED));  assertTrue(ids.get("id1").contains(ContainerType.EMBEDDED));  assertFalse(ids.get("id1").contains(ContainerType.REMOTE));}  }
class C{  public void removeIDs(DBIDs ids2){  this.ids.removeDBIDs(ids2);}  }
class C{  public void testUnsupportedExpandToDirectory() throws Exception {  String filePath="/foo/bar.unsupportedArchive";  File file=new File(filePath);  File directory=creator.expandToDirectory(file);  assertNull(directory);}  }
class C{  protected void endNode(Node node) throws org.xml.sax.SAXException {switch (node.getNodeType()) {case Node.DOCUMENT_NODE:    break;case Node.ELEMENT_NODE:  String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.endElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName());NamedNodeMap atts=((Element)node).getAttributes();int nAttrs=atts.getLength();for (int i=0; i < nAttrs; i++) {Node attr=atts.item(i);String attrName=attr.getNodeName();if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {int index;String prefix=(index=attrName.indexOf(":")) < 0 ? "" : attrName.substring(index + 1);this.m_contentHandler.endPrefixMapping(prefix);}}break;case Node.CDATA_SECTION_NODE:break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {LexicalHandler lh=((LexicalHandler)this.m_contentHandler);lh.endEntity(eref.getNodeName());}}break;default :}}  }
class C{  public static boolean sourceAndTargetNeuronSelected(NetworkPanel networkPanel){  if ((networkPanel.getSourceModelNeurons().size() > 0) && (networkPanel.getSelectedModelNeurons().size() > 0)) {    return true;  }  return false;}  }
class C{  public SocketAddress start() throws SocketException {  running=true;  server=new DatagramSocket();  if (networkMonitor != null) {    server=new MonitorDatagramSocketWrapper(server,networkMonitor);  }  SocketAddress socketAddress=server.getLocalSocketAddress();  thread=new Thread(this);  thread.start();  return socketAddress;}  }
class C{  public BasicVisualizationServer(VisualizationModel<V,E> model){  this(model,new Dimension(600,600));}  }
class C{  protected void rotateOrthogonal(){  super.rotateOrthogonal();  displayState(headState());}  }
class C{  public GeoDistanceSortBuilder(String fieldName){  this.fieldName=fieldName;}  }
class C{  private boolean storageSystemSupportsValidation(Volume volume){  if (volume == null) {    return false;  }  StorageSystem system=getDbClient().queryObject(StorageSystem.class,volume.getStorageController());  SystemType type=SystemType.valueOf(system.getSystemType());  if (type == SystemType.vmax || type == SystemType.vnxblock || type == SystemType.vnxe || type == SystemType.xtremio || type == SystemType.unity) {    return true;  }  return false;}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public boolean hunt(String tag,@NonNull Uri uri,@NonNull Callback callback){  if (sInstance == null) {    Log.e(TAG,"SoBitmap has been shutdown. No more request can be handled");    return false;  }  return hunt(tag,uri,sInstance.defaultOps,callback);}  }
class C{  protected double findSplitNominalNumeric(int index) throws Exception {  double bestVal=Double.MAX_VALUE, currVal;  double[] sumsSquaresPerValue=new double[m_Instances.attribute(index).numValues()], sumsPerValue=new double[m_Instances.attribute(index).numValues()], weightsPerValue=new double[m_Instances.attribute(index).numValues()];  double totalSumSquaresW=0, totalSumW=0, totalSumOfWeightsW=0, totalSumOfWeights=0, totalSum=0;  double[] sumsSquares=new double[3], sumOfWeights=new double[3];  double[][] bestDist=new double[3][1];  for (int i=0; i < m_Instances.numInstances(); i++) {    Instance inst=m_Instances.instance(i);    if (inst.isMissing(index)) {      m_Distribution[2][0]+=inst.classValue() * inst.weight();      sumsSquares[2]+=inst.classValue() * inst.classValue() * inst.weight();      sumOfWeights[2]+=inst.weight();    } else {      weightsPerValue[(int)inst.value(index)]+=inst.weight();      sumsPerValue[(int)inst.value(index)]+=inst.classValue() * inst.weight();      sumsSquaresPerValue[(int)inst.value(index)]+=inst.classValue() * inst.classValue() * inst.weight();    }    totalSumOfWeights+=inst.weight();    totalSum+=inst.classValue() * inst.weight();  }  if (totalSumOfWeights <= 0) {    return bestVal;  }  for (int i=0; i < m_Instances.attribute(index).numValues(); i++) {    totalSumOfWeightsW+=weightsPerValue[i];    totalSumSquaresW+=sumsSquaresPerValue[i];    totalSumW+=sumsPerValue[i];  }  for (int i=0; i < m_Instances.attribute(index).numValues(); i++) {    m_Distribution[0][0]=sumsPerValue[i];    sumsSquares[0]=sumsSquaresPerValue[i];    sumOfWeights[0]=weightsPerValue[i];    m_Distribution[1][0]=totalSumW - sumsPerValue[i];    sumsSquares[1]=totalSumSquaresW - sumsSquaresPerValue[i];    sumOfWeights[1]=totalSumOfWeightsW - weightsPerValue[i];    currVal=variance(m_Distribution,sumsSquares,sumOfWeights);    if (currVal < bestVal) {      bestVal=currVal;      m_SplitPoint=(double)i;      for (int j=0; j < 3; j++) {        if (sumOfWeights[j] > 0) {          bestDist[j][0]=m_Distribution[j][0] / sumOfWeights[j];        } else {          bestDist[j][0]=totalSum / totalSumOfWeights;        }      }    }  }  m_Distribution=bestDist;  return bestVal;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.448 -0500",hash_original_method="C9B8341788FD531DBE072AC5097543AB",hash_generated_method="57D0F1FEAF9444332AF215D389B63E87") public ClientKeyExchange(byte[] encrypted_pre_master_secret,boolean isTLS){  this.exchange_keys=encrypted_pre_master_secret;  length=this.exchange_keys.length;  if (isTLS) {    length+=2;  }  this.isTLS=isTLS;  isRSA=true;}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  View v=mView.get();  if (v != null) {    v.removeCallbacks(mAnimationStarter);    v.post(mAnimationStarter);  }}  }
class C{  static ChainIterable<String> describeClass(PyClass cls,FP.Lambda1<Iterable<String>,Iterable<String>> name_wrapper,boolean allow_html,boolean link_own_name){  ChainIterable<String> cat=new ChainIterable<String>();  final String name=cls.getName();  cat.addItem("class ");  if (allow_html && link_own_name) {    cat.addWith(LinkMyClass,$(name));  } else {    cat.addWith(name_wrapper,$(name));  }  final PyExpression[] ancestors=cls.getSuperClassExpressions();  if (ancestors.length > 0) {    cat.addItem("(");    boolean is_not_first=false;    for (    PyExpression parent : ancestors) {      final String parentName=parent.getName();      if (parentName == null) {        continue;      }      if (is_not_first) {        cat.addItem(", ");      } else {        is_not_first=true;      }      if (allow_html) {        cat.addWith(new LinkWrapper(LINK_TYPE_PARENT + parentName),$(parentName));      } else {        cat.addItem(parentName);      }    }    cat.addItem(")");  }  return cat;}  }
class C{  public static void allocateBlas(int maxThreads,Blas seqBlas){  if (smpBlas instanceof SmpBlas) {    SmpBlas s=(SmpBlas)smpBlas;    if (s.maxThreads == maxThreads && s.seqBlas == seqBlas)     return;  }  if (maxThreads <= 1)   smpBlas=seqBlas; else {    smpBlas=new SmpBlas(maxThreads,seqBlas);  }}  }
class C{  @Override public void start(){  _state=_state.toStart();}  }
class C{  private void showAuthenticationError(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_authentication_error),getResources().getString(R.string.error_authentication_failed),getResources().getString(R.string.button_ok),null);}  }
class C{  public static void loadInfo(AppResult result,HadoopApplicationData data){  Properties properties=new Properties();  if (data instanceof MapReduceApplicationData) {    properties=retrieveMapreduceProperties((MapReduceApplicationData)data);  } else   if (data instanceof SparkApplicationData) {    properties=retrieveSparkProperties((SparkApplicationData)data);  }  Scheduler scheduler=getSchedulerInstance(data.getAppId(),properties);  if (scheduler != null) {    String appId=data.getAppId();    result.jobDefId=Utils.truncateField(scheduler.getJobDefId(),AppResult.URL_LEN_LIMIT,appId);    result.jobExecId=Utils.truncateField(scheduler.getJobExecId(),AppResult.URL_LEN_LIMIT,appId);    result.flowDefId=Utils.truncateField(scheduler.getFlowDefId(),AppResult.URL_LEN_LIMIT,appId);    result.flowExecId=Utils.truncateField(scheduler.getFlowExecId(),AppResult.FLOW_EXEC_ID_LIMIT,appId);    if (!Utils.isSet(result.jobDefId) || !Utils.isSet(result.jobExecId) || !Utils.isSet(result.flowDefId)|| !Utils.isSet(result.flowExecId)) {      logger.warn("This job doesn't have the correct " + scheduler.getSchedulerName() + " integration support. I"+ " will treat this as an adhoc job");      loadNoSchedulerInfo(result);    } else {      result.scheduler=Utils.truncateField(scheduler.getSchedulerName(),AppResult.SCHEDULER_LIMIT,appId);      result.workflowDepth=scheduler.getWorkflowDepth();      result.jobName=scheduler.getJobName() != null ? Utils.truncateField(scheduler.getJobName(),AppResult.JOB_NAME_LIMIT,appId) : "";      result.jobDefUrl=scheduler.getJobDefUrl() != null ? Utils.truncateField(scheduler.getJobDefUrl(),AppResult.URL_LEN_LIMIT,appId) : "";      result.jobExecUrl=scheduler.getJobExecUrl() != null ? Utils.truncateField(scheduler.getJobExecUrl(),AppResult.URL_LEN_LIMIT,appId) : "";      result.flowDefUrl=scheduler.getFlowDefUrl() != null ? Utils.truncateField(scheduler.getFlowDefUrl(),AppResult.URL_LEN_LIMIT,appId) : "";      result.flowExecUrl=scheduler.getFlowExecUrl() != null ? Utils.truncateField(scheduler.getFlowExecUrl(),AppResult.URL_LEN_LIMIT,appId) : "";    }  } else {    loadNoSchedulerInfo(result);  }}  }
class C{  public void testBug77681() throws Exception {  createTable("testBug77681","(id INT, txt VARCHAR(50), PRIMARY KEY (id))");  Properties props=new Properties();  props.setProperty("statementInterceptors",TestBug77681StatementInterceptor.class.getName());  for (int tst=0; tst < 4; tst++) {    props.setProperty("useServerPrepStmts",Boolean.toString((tst & 0x1) != 0));    props.setProperty("rewriteBatchedStatements",Boolean.toString((tst & 0x2) != 0));    Connection testConn=getConnectionWithProps(props);    PreparedStatement testPstmt=testConn.prepareStatement("INSERT INTO testBug77681 VALUES (?, ?)");    testPstmt.setInt(1,1);    testPstmt.setString(2,"one");    testPstmt.addBatch();    testPstmt.setInt(1,2);    testPstmt.setString(2,"two");    testPstmt.addBatch();    testPstmt.setInt(1,3);    testPstmt.setString(2,"three");    testPstmt.addBatch();    testPstmt.setInt(1,4);    testPstmt.setString(2,"four");    testPstmt.addBatch();    testPstmt.setInt(1,5);    testPstmt.setString(2,"five");    testPstmt.addBatch();    testPstmt.executeBatch();    testPstmt.close();    testPstmt=testConn.prepareStatement("REPLACE INTO testBug77681 VALUES (?, ?)");    testPstmt.setInt(1,2);    testPstmt.setString(2,"TWO");    testPstmt.addBatch();    testPstmt.setInt(1,4);    testPstmt.setString(2,"FOUR");    testPstmt.addBatch();    testPstmt.setInt(1,6);    testPstmt.setString(2,"SIX");    testPstmt.addBatch();    testPstmt.executeBatch();    testPstmt.close();    Statement testStmt=testConn.createStatement();    testStmt.clearBatch();    testStmt.addBatch("INSERT INTO testBug77681 VALUES (7, 'seven')");    testStmt.addBatch("INSERT INTO testBug77681 VALUES (8, 'eight')");    testStmt.addBatch("INSERT INTO testBug77681 VALUES (9, 'nine')");    testStmt.addBatch("INSERT INTO testBug77681 VALUES (10, 'ten')");    testStmt.addBatch("INSERT INTO testBug77681 VALUES (11, 'eleven')");    testStmt.executeBatch();    testStmt.clearBatch();    testStmt.addBatch("REPLACE INTO testBug77681 VALUES (8, 'EIGHT')");    testStmt.addBatch("REPLACE INTO testBug77681 VALUES (10, 'TEN')");    testStmt.addBatch("REPLACE INTO testBug77681 VALUES (12, 'TWELVE')");    testStmt.addBatch("REPLACE INTO testBug77681 VALUES (14, 'FOURTEEN')");    testStmt.addBatch("REPLACE INTO testBug77681 VALUES (16, 'SIXTEEN')");    testStmt.executeBatch();    this.stmt.executeUpdate("DELETE FROM testBug77681");  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.min(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.min(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.min(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void matchModifiedStoragePoolsWithVirtualPools(List<StoragePool> updatedPoolList,List<URI> vpoolURIs,DbClient dbClient,CoordinatorClient coordinator,String matcherGroupName,StringBuffer errorMessage){  Iterator<VirtualPool> vpoolListItr=dbClient.queryIterativeObjects(VirtualPool.class,vpoolURIs);  List<VirtualPool> vPoolsToUpdate=new ArrayList<VirtualPool>();  while (vpoolListItr.hasNext()) {    VirtualPool vpool=vpoolListItr.next();    matchvPoolWithStoragePools(vpool,updatedPoolList,dbClient,coordinator,matcherGroupName,errorMessage);    vPoolsToUpdate.add(vpool);  }  if (!vPoolsToUpdate.isEmpty()) {    persistUpdatedVpoolList(vPoolsToUpdate,dbClient);  }}  }
class C{  private void toHexString(){  String pubText=pubData.getText();  StringBuffer hexText=new StringBuffer();  byte[] pubBytes=pubText.getBytes();  for (int i=0; i < pubBytes.length; i++) {    int byteValue=pubBytes[i];    if (byteValue < 0) {      byteValue+=256;    }    if (byteValue < 16) {      hexText.append("0" + Integer.toHexString(byteValue));    } else {      hexText.append(Integer.toHexString(byteValue));    }  }  hexDisplay=true;  pubLabel.setText(PANEL_TITLE + " - hexadecimal display");  mqttMgr.setTitleText("");  hexButton.setText("Text");  pubData.setText(hexText.toString());}  }
class C{  public static PricedProductRole updatePricedProductRole(VOPricedRole pricedProductRole,PricedProductRole doPricedProductRole) throws ValidationException, ConcurrentModificationException {  validatePricedProductRole(pricedProductRole);  verifyVersionAndKey(doPricedProductRole,pricedProductRole);  copyAttributes(pricedProductRole,doPricedProductRole);  return doPricedProductRole;}  }
class C{  public void handle(ErrorMemo e){  String m=e.description;  if (e.systemName != null) {    m+=" System name \"" + e.systemName + "\"";  }  if (e.userName != null && !e.userName.equals("")) {    m+=" User name \"" + e.userName + "\"";  }  if (e.operation != null) {    m+=" while " + e.operation;  }  if (e.adapter != null) {    m+=" in adaptor of type " + e.adapter.getClass().getName();  }  if (e.exception != null) {    m+=" Exception: " + e.exception.toString();  }  if (e.exception != null) {    log.error(m,e.exception);  } else {    log.error(m);  }}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  }  if (other instanceof TabStop) {    TabStop o=(TabStop)other;    return ((alignment == o.alignment) && (leader == o.leader) && (position == o.position));  }  return false;}  }
class C{  public static boolean isHttp(String url){  return url != null && url.length() > 4 && url.startsWith("http") && url.charAt(4) != 's';}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public boolean isInputRendered(){  return (udaDefinition.getConfigurationType() == UdaConfigurationType.SUPPLIER);}  }
class C{  public SerialNode(int address,int type){  setNodeAddress(address);  _address=address;  SerialTrafficController.instance().registerNode(this);}  }
class C{  public void showStub(String message){  view.showStub(message);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public CommandEnvironment copy(){  return new CommandEnvironment(base,new HashMap<>(environmentChanges));}  }
class C{  public static HttpResponse createPost(String server,String username,String password,String token,boolean learningOptOut,String content,String voice,String codec) throws Exception {  String url=server;  HttpClient httpClient=new DefaultHttpClient();  List<BasicNameValuePair> params=new LinkedList<BasicNameValuePair>();  params.add(new BasicNameValuePair("text",content));  params.add(new BasicNameValuePair("voice",voice));  params.add(new BasicNameValuePair("accept",codec));  HttpGet httpGet=new HttpGet(url + "?" + URLEncodedUtils.format(params,"utf-8"));  if (token != null) {    Log.d(TAG,"using token based authentication");    httpGet.setHeader("X-Watson-Authorization-Token",token);  } else {    Log.d(TAG,"using basic authentication");    httpGet.setHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(username,password),"UTF-8",false));  }  if (learningOptOut) {    Log.d(TAG,"setting X-Watson-Learning-OptOut");    httpGet.setHeader("X-Watson-Learning-Opt-Out","true");  }  HttpResponse executed=httpClient.execute(httpGet);  return executed;}  }
class C{  public void updateBoolean(int columnIndex,boolean x) throws SQLException {  throw new NotUpdatable();}  }
class C{  private static boolean shouldBeAnnotated(final AnnotatedTypeMirror type,final boolean applyToTypeVar){  return !(type == null || type.getKind() == TypeKind.NONE || type.getKind() == TypeKind.WILDCARD || (type.getKind() == TypeKind.TYPEVAR && !applyToTypeVar) || type instanceof AnnotatedNoType);}  }
class C{  private void runLoop(){  if (Parse.LOG_LEVEL_INFO >= Parse.getLogLevel()) {    log.info("Parse command cache has started processing queued commands.");  }synchronized (runningLock) {    if (running) {      return;    } else {      running=true;      runningLock.notifyAll();    }  }  boolean shouldRun;synchronized (lock) {    shouldRun=!(shouldStop || Thread.interrupted());  }  while (shouldRun) {synchronized (lock) {      try {        maybeRunAllCommandsNow(timeoutMaxRetries);        if (!shouldStop) {          try {            if (!unprocessedCommandsExist) {              lock.wait();            }          } catch (          InterruptedException e) {            shouldStop=true;          }        }      } catch (      Exception e) {        if (Parse.LOG_LEVEL_ERROR >= Parse.getLogLevel()) {          log.log(Level.SEVERE,"saveEventually thread had an error.",e);        }      } finally {        shouldRun=!shouldStop;      }    }  }synchronized (runningLock) {    running=false;    runningLock.notifyAll();  }  if (Parse.LOG_LEVEL_INFO >= Parse.getLogLevel()) {    log.info("saveEventually thread has stopped processing commands.");  }}  }
class C{  public void printaround(final int x,final int y,final int size){  for (int j=y - size; j < y + size; j++) {    for (int i=x - size; i < x + size; i++) {      if ((j >= 0) && (j < height) && (i >= 0)&& (i < width)) {        if ((j == y) && (i == x)) {          System.out.print("O");        } else         if (map.get(i,j)) {          System.out.print("X");        } else {          System.out.print(".");        }      }    }    System.out.println();  }}  }
class C{  @Override public void readRep(Repository rep,ObjectId idStep,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleException {  try {    tabelName=rep.getStepAttributeString(idStep,"TableName");    mdkeySize=rep.getStepAttributeString(idStep,"MDKeySize");    measureCount=rep.getStepAttributeString(idStep,"Measurecount");    heirAndKeySize=rep.getStepAttributeString(idStep,"HeirAndKeySize");    schemaName=rep.getStepAttributeString(idStep,"schemaName");    cubeName=rep.getStepAttributeString(idStep,"cubeName");    groupByEnabled=rep.getStepAttributeString(idStep,"isGroupByEnabled");    aggregatorClassString=rep.getStepAttributeString(idStep,"aggregatorClassString");    aggregatorString=rep.getStepAttributeString(idStep,"aggregatorString");    factDimLensString=rep.getStepAttributeString(idStep,"factDimLensString");    levelAnddataTypeString=rep.getStepAttributeString(idStep,"levelAnddataTypeString");    currentRestructNumber=(int)rep.getStepAttributeInteger(idStep,"currentRestructNumber");    partitionID=rep.getStepAttributeString(idStep,"partitionID");    segmentId=rep.getStepAttributeString(idStep,"segmentId");    taskNo=rep.getStepAttributeString(idStep,"taskNo");  } catch (  Exception exception) {    throw new KettleException(BaseMessages.getString(PKG,"CarbonDataWriterStepMeta.Exception.UnexpectedErrorInReadingStepInfo"),exception);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.GENERATOR_CONFIGURATION__CONFIGURATIONS:    return ((InternalEList<?>)getConfigurations()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public boolean rowInserted() throws SQLException {  try {    debugCodeCall("rowInserted");    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public T caseFieldAccessor(FieldAccessor object){  return null;}  }
class C{  public static void updateAfterSelection(final DigestURL url,final long robotsCrawlDelay){  final String host=url.getHost();  if (host == null)   return;  String hosthash=url.hosthash();  Host h=map.get(hosthash);  if (h == null) {    h=new Host(host,Switchboard.getSwitchboard().getConfigInt("crawler.defaultAverageLatency",500),robotsCrawlDelay);    if (map.size() > mapMaxSize || MemoryControl.shortStatus())     map.clear();    map.put(hosthash,h);  }}  }
class C{  @Override public void preTearDown(){  log.info("####PRETEARDOWN " + getTestName());}  }
class C{  protected void PredicateExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_PREDICATE);  Expr();  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public ArrayList<MechSummary> generate(int numRolls,String ratName,Predicate<MechSummary> filter){  ArrayList<MechSummary> units=new ArrayList<>();  try {    Map<String,RatEntry> ratMap=getRatMap();    if (null != ratMap) {      RatEntry re=ratMap.get(ratName);      if (filter != null) {        RatEntry filtered=new RatEntry();        float totalWeight=0.0f;        MechSummaryCache msc=MechSummaryCache.getInstance();        for (int i=0; i < re.getUnits().size(); i++) {          if (!re.getUnits().get(i).startsWith("@")) {            MechSummary ms=msc.getMech(re.getUnits().get(i));            if (ms == null || !filter.test(ms)) {              continue;            }          }          filtered.getUnits().add(re.getUnits().get(i));          filtered.getWeights().add(re.getWeights().get(i));          totalWeight+=re.getWeights().get(i);        }        for (int i=0; i < re.getWeights().size(); i++) {          re.getWeights().set(i,re.getWeights().get(i) / totalWeight);        }        re=filtered;      }      if ((null != re) && (re.getUnits().size() > 0)) {        for (int roll=0; roll < numRolls; roll++) {          double rand=getRandom();          int i=0;          while (i < re.getWeights().size() && rand > re.getWeights().get(i)) {            rand-=re.getWeights().get(i);            i++;          }          String name=re.getUnits().get(i);          if (name.startsWith("@")) {            units.addAll(generate(1,name.replaceFirst("@",""),filter));            continue;          }          MechSummary unit=getMechByName(name);          if (null != unit) {            units.add(unit);          }        }      }    }  } catch (  Exception e) {    e.printStackTrace();  }  return units;}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("options.proxy.local.title"));  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(391,320);  }  securityProtocolsPanel=new SecurityProtocolsPanel();  this.add(getPanelProxy(),getPanelProxy().getName());  getChkReverseProxy().setVisible(Constant.isSP());  getPanelReverseProxy().setVisible(Constant.isSP());}  }
class C{  private boolean isBackgroundPaused(){  SystemConfigProvider systemConfig=((PhotonControllerXenonHost)getHost()).getSystemConfigProvider();  boolean backgroundPaused=true;  try {    backgroundPaused=systemConfig.isBackgroundPaused();  } catch (  Exception ex) {    ServiceUtils.logSevere(this,ex);  }  return backgroundPaused;}  }
class C{  public boolean isSetTransactionId(){  return EncodingUtils.testBit(__isset_bitfield,__TRANSACTIONID_ISSET_ID);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.SYMBOL_TABLE__ENTRIES:    getEntries().clear();  getEntries().addAll((Collection<? extends SymbolTableEntry>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void copyFile(File source,File destination) throws IOException {  FileInputStream in=null;  try {    in=new FileInputStream(source);    IOUtil.writeStream(in,destination);  }  finally {    if (in != null)     in.close();  }}  }
class C{  @Override public void paintBarShadow(Graphics2D g2,BarRenderer renderer,int row,int column,RectangularShape bar,RectangleEdge base,boolean pegShadow){  Paint itemPaint=renderer.getItemPaint(row,column);  if (itemPaint instanceof Color) {    Color c=(Color)itemPaint;    if (c.getAlpha() == 0) {      return;    }  }  RectangularShape shadow=createShadow(bar,renderer.getShadowXOffset(),renderer.getShadowYOffset(),base,pegShadow);  g2.setPaint(renderer.getShadowPaint());  g2.fill(shadow);}  }
class C{  public void appendSimple(Object... data){  if (data.length != meta.size()) {    throw new AbortException("Invalid number of attributes in 'append'.");  }  for (int i=0; i < data.length; i++) {    @SuppressWarnings("unchecked") final List<Object> col=(List<Object>)columns.get(i);    col.add(data[i]);  }}  }
class C{  public static final void createBackupFile(Path file){  createBackupFile(file,true);}  }
class C{  public void write(Environment env,DataOutputStream out,MemberDefinition field,ConstantPool tab) throws IOException {  if ((field != null) && field.getArguments() != null) {    int sum=0;    @SuppressWarnings("unchecked") Vector<MemberDefinition> v=(Vector<MemberDefinition>)field.getArguments();    for (Enumeration<MemberDefinition> e=v.elements(); e.hasMoreElements(); ) {      MemberDefinition f=e.nextElement();      sum+=f.getType().stackSize();    }    maxvar=sum;  }  try {    balance(first,0);  } catch (  CompilerError e) {    System.out.println("ERROR: " + e);    listing(System.out);    throw e;  }  int pc=0, nexceptions=0;  for (Instruction inst=first; inst != null; inst=inst.next) {    inst.pc=pc;    int sz=inst.size(tab);    if (pc < 65536 && (pc + sz) >= 65536) {      env.error(inst.where,"warn.method.too.long");    }    pc+=sz;    if (inst.opc == opc_try) {      nexceptions+=((TryData)inst.value).catches.size();    }  }  out.writeShort(maxdepth);  out.writeShort(maxvar);  out.writeInt(maxpc=pc);  for (Instruction inst=first.next; inst != null; inst=inst.next) {    inst.write(out,tab);  }  out.writeShort(nexceptions);  if (nexceptions > 0) {    writeExceptions(env,out,tab,first,last);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int format(String val,byte[] array,int off,int len){  if (val == null) {    for (int i=0; i < len; i++) {      array[off + i]=(byte)' ';    }    return off + len;  }  int slen=val.length();  if (slen > len || slen > array.length - off) {    val=val.substring(0,len);    slen=len;  }  System.arraycopy(AsciiFuncs.getBytes(val),0,array,off,slen);  return off + slen;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.ACTION_REF__REF:    setRef((ActionDefinition)null);  return;}super.eUnset(featureID);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  protected boolean beforeSave(boolean newRecord){  getRequestType();  if (newRecord || is_ValueChanged("R_RequestType_ID")) {    if (m_requestType != null) {      if (isInvoiced() != m_requestType.isInvoiced())       setIsInvoiced(m_requestType.isInvoiced());      if (getDateNextAction() == null && m_requestType.getAutoDueDateDays() > 0)       setDateNextAction(TimeUtil.addDays(new Timestamp(System.currentTimeMillis()),m_requestType.getAutoDueDateDays()));    }    if (getR_Status_ID() != 0) {      MStatus sta=MStatus.get(getCtx(),getR_Status_ID());      MRequestType rt=MRequestType.get(getCtx(),getR_RequestType_ID());      if (sta.getR_StatusCategory_ID() != rt.getR_StatusCategory_ID())       setR_Status_ID();    }  }  if (getR_Status_ID() == 0)   setR_Status_ID();  setDueType();  MStatus status=MStatus.get(getCtx(),getR_Status_ID());  if (status != null) {    if (status.isOpen()) {      if (getStartDate() == null)       setStartDate(new Timestamp(System.currentTimeMillis()));      if (getCloseDate() != null)       setCloseDate(null);    }    if (status.isClosed() && getCloseDate() == null)     setCloseDate(new Timestamp(System.currentTimeMillis()));    if (status.isFinalClose())     setProcessed(true);  }  if (getConfidentialType() == null) {    getRequestType();    if (m_requestType != null) {      String ct=m_requestType.getConfidentialType();      if (ct != null)       setConfidentialType(ct);    }    if (getConfidentialType() == null)     setConfidentialType(CONFIDENTIALTYPEENTRY_PublicInformation);  }  if (getConfidentialTypeEntry() == null)   setConfidentialTypeEntry(getConfidentialType()); else   setConfidentialTypeEntry(getConfidentialTypeEntry());  setPriority();  if (newRecord)   return true;  m_changed=false;  ArrayList<String> sendInfo=new ArrayList<String>();  MRequestAction ra=new MRequestAction(this,false);  if (checkChange(ra,"R_RequestType_ID"))   sendInfo.add("R_RequestType_ID");  if (checkChange(ra,"R_Group_ID"))   sendInfo.add("R_Group_ID");  if (checkChange(ra,"R_Category_ID"))   sendInfo.add("R_Category_ID");  if (checkChange(ra,"R_Status_ID"))   sendInfo.add("R_Status_ID");  if (checkChange(ra,"R_Resolution_ID"))   sendInfo.add("R_Resolution_ID");  if (checkChange(ra,"SalesRep_ID")) {    int AD_User_ID=Env.getContextAsInt(p_ctx,"#AD_User_ID");    if (AD_User_ID == 0)     AD_User_ID=getUpdatedBy();    Object oo=get_ValueOld("SalesRep_ID");    int oldSalesRep_ID=0;    if (oo instanceof Integer)     oldSalesRep_ID=((Integer)oo).intValue();    if (oldSalesRep_ID != 0) {      Object[] args=new Object[]{getDocumentNo(),MUser.getNameOfUser(AD_User_ID),MUser.getNameOfUser(oldSalesRep_ID),MUser.getNameOfUser(getSalesRep_ID())};      String msg=Msg.getMsg(getCtx(),"RequestActionTransfer",args);      addToResult(msg);      sendInfo.add("SalesRep_ID");    }  }  checkChange(ra,"AD_Role_ID");  checkChange(ra,"Priority");  if (checkChange(ra,"PriorityUser"))   sendInfo.add("PriorityUser");  if (checkChange(ra,"IsEscalated"))   sendInfo.add("IsEscalated");  checkChange(ra,"ConfidentialType");  checkChange(ra,"Summary");  checkChange(ra,"IsSelfService");  checkChange(ra,"C_BPartner_ID");  checkChange(ra,"AD_User_ID");  checkChange(ra,"C_Project_ID");  checkChange(ra,"A_Asset_ID");  checkChange(ra,"C_Order_ID");  checkChange(ra,"C_Invoice_ID");  checkChange(ra,"M_Product_ID");  checkChange(ra,"C_Payment_ID");  checkChange(ra,"M_InOut_ID");  checkChange(ra,"M_RMA_ID");  checkChange(ra,"IsInvoiced");  checkChange(ra,"C_Activity_ID");  checkChange(ra,"DateNextAction");  checkChange(ra,"M_ProductSpent_ID");  checkChange(ra,"QtySpent");  checkChange(ra,"QtyInvoiced");  checkChange(ra,"StartDate");  checkChange(ra,"CloseDate");  checkChange(ra,"TaskStatus");  checkChange(ra,"DateStartPlan");  checkChange(ra,"DateCompletePlan");  if (m_changed)   ra.saveEx();  MRequestUpdate update=new MRequestUpdate(this);  if (update.isNewInfo())   update.saveEx(); else   update=null;  m_emailTo=new StringBuffer();  if (update != null || sendInfo.size() > 0) {    sendNotices(sendInfo);    setDateLastAction(getUpdated());    setLastResult(getResult());    setDueType();    setConfidentialTypeEntry(getConfidentialType());    setEndTime(null);    setR_StandardResponse_ID(0);    setR_MailText_ID(0);    setResult(null);  }  return true;}  }
class C{  private boolean yy_refill() throws java.io.IOException {  if (yy_startRead > 0) {    System.arraycopy(yy_buffer,yy_startRead,yy_buffer,0,yy_endRead - yy_startRead);    yy_endRead-=yy_startRead;    yy_currentPos-=yy_startRead;    yy_markedPos-=yy_startRead;    yy_pushbackPos-=yy_startRead;    yy_startRead=0;  }  if (yy_currentPos >= yy_buffer.length) {    char newBuffer[]=new char[yy_currentPos * 2];    System.arraycopy(yy_buffer,0,newBuffer,0,yy_buffer.length);    yy_buffer=newBuffer;  }  int numRead=yy_reader.read(yy_buffer,yy_endRead,yy_buffer.length - yy_endRead);  if (numRead < 0) {    return true;  } else {    yy_endRead+=numRead;    return false;  }}  }
class C{  public int maxOutStreams(){  return maxOutStreams;}  }
class C{  public CreateMonitoredItemsResponse clone(){  CreateMonitoredItemsResponse result=new CreateMonitoredItemsResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Results != null) {    result.Results=new MonitoredItemCreateResult[Results.length];    for (int i=0; i < Results.length; i++)     result.Results[i]=Results[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public VoltageClusterer(Graph<V,E> g,int num_candidates){  if (num_candidates < 1)   throw new IllegalArgumentException("must generate >=1 candidates");  this.num_candidates=num_candidates;  this.kmc=new KMeansClusterer<V>();  rand=new Random();  this.g=g;}  }
class C{  public void appendEntryReply(Message message,int fromMemberId,int term,int mnIndex,boolean success) throws InterruptedException, GondolaException {  notImplemented(message,fromMemberId);}  }
class C{  @Override public void onLoggedIn(Player player){  Group group=getGroup(player.getName());  if (group != null) {    group.sendGroupChangeEvent(player);  }}  }
class C{  public Person(){}  }
class C{  public V unsafeGet(final Class key){  final Entry<V>[] tab;  Entry<V> e=(tab=table)[key.hashCode() & (tab.length - 1)];  while (e != null) {    if (key == e.key) {      return e.value;    }    e=e.next;  }  return null;}  }
class C{  public static FileChannel open(String fileName,String mode) throws IOException {  return FilePath.get(fileName).open(mode);}  }
class C{  private void importRisikoanalysen() throws CommandException, SQLException, IOException {  List<ZielobjektTypeResult> allZielobjekte=getGstoolDao().findZielobjektWithRA();  numberOfRAs=allZielobjekte.size();  monitor.beginTask("Importiere Risikoanalysen...",numberOfRAs);  int i=1;  for (  ZielobjektTypeResult zielobjekt : allZielobjekte) {    importRisikoanalyse(zielobjekt,i);    i++;  }}  }
class C{  public byte[] engineCanonicalizeSubTree(Node rootNode) throws CanonicalizationException {  return engineCanonicalizeSubTree(rootNode,"",null);}  }
class C{  public static double[][] fDctTransform(double[][] ablk){  double[][] blk=new double[8][8];  for (int i=0; i < 8; i++) {    for (int j=0; j < 8; j++) {      blk[i][j]=ablk[i][j];    }  }  for (int i=0; i <= 7; i++) {    double S07, S16, S25, S34, S0734, S1625;    double D07, D16, D25, D34, D0734, D1625;    S07=blk[i][0] + blk[i][7];    S16=blk[i][1] + blk[i][6];    S25=blk[i][2] + blk[i][5];    S34=blk[i][3] + blk[i][4];    S0734=S07 + S34;    S1625=S16 + S25;    D07=blk[i][0] - blk[i][7];    D16=blk[i][1] - blk[i][6];    D25=blk[i][2] - blk[i][5];    D34=blk[i][3] - blk[i][4];    D0734=S07 - S34;    D1625=S16 - S25;    blk[i][0]=0.5 * (C4 * (S0734 + S1625));    blk[i][1]=0.5 * (C1 * D07 + C3 * D16 + C5 * D25 + C7 * D34);    blk[i][2]=0.5 * (C2 * D0734 + C6 * D1625);    blk[i][3]=0.5 * (C3 * D07 - C7 * D16 - C1 * D25 - C5 * D34);    blk[i][4]=0.5 * (C4 * (S0734 - S1625));    blk[i][5]=0.5 * (C5 * D07 - C1 * D16 + C7 * D25 + C3 * D34);    blk[i][6]=0.5 * (C6 * D0734 - C2 * D1625);    blk[i][7]=0.5 * (C7 * D07 - C5 * D16 + C3 * D25 - C1 * D34);  }  for (int j=0; j <= 7; j++) {    double S07, S16, S25, S34, S0734, S1625;    double D07, D16, D25, D34, D0734, D1625;    S07=blk[0][j] + blk[7][j];    S16=blk[1][j] + blk[6][j];    S25=blk[2][j] + blk[5][j];    S34=blk[3][j] + blk[4][j];    S0734=S07 + S34;    S1625=S16 + S25;    D07=blk[0][j] - blk[7][j];    D16=blk[1][j] - blk[6][j];    D25=blk[2][j] - blk[5][j];    D34=blk[3][j] - blk[4][j];    D0734=S07 - S34;    D1625=S16 - S25;    blk[0][j]=0.5 * (C4 * (S0734 + S1625));    blk[1][j]=0.5 * (C1 * D07 + C3 * D16 + C5 * D25 + C7 * D34);    blk[2][j]=0.5 * (C2 * D0734 + C6 * D1625);    blk[3][j]=0.5 * (C3 * D07 - C7 * D16 - C1 * D25 - C5 * D34);    blk[4][j]=0.5 * (C4 * (S0734 - S1625));    blk[5][j]=0.5 * (C5 * D07 - C1 * D16 + C7 * D25 + C3 * D34);    blk[6][j]=0.5 * (C6 * D0734 - C2 * D1625);    blk[7][j]=0.5 * (C7 * D07 - C5 * D16 + C3 * D25 - C1 * D34);  }  return blk;}  }
class C{  public boolean togglePlacementPosition(){  placeAtPos1=!placeAtPos1;  return placeAtPos1;}  }
class C{  public static Logger log(){  if (nervous_system == null)   nervous_system=new Logger("Heartbeat",Logger.ATTR_TIME | Logger.ATTR_COLOR);  return nervous_system;}  }
class C{  public UF9(int numberOfVariables){  super(numberOfVariables,3);}  }
class C{  public IntArrayList bottom(int n){  IntArrayList bottom=new IntArrayList();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(values[i]);  }  return bottom;}  }
class C{  public long size(){  return length;}  }
class C{  private static void quickSort(double[] array,int[] index,int left,int right){  int diff=right - left;switch (diff) {case 0:    return;case 1:  conditionalSwap(array,index,left,right);return;case 2:conditionalSwap(array,index,left,left + 1);conditionalSwap(array,index,left,right);conditionalSwap(array,index,left + 1,right);return;default :int pivotLocation=sortLeftRightAndCenter(array,index,left,right);swap(index,pivotLocation,right - 1);int center=partition(array,index,left,right,array[index[right - 1]]);swap(index,center,right - 1);quickSort(array,index,left,center - 1);quickSort(array,index,center + 1,right);}}  }
class C{  public CFunctionViewsTable(final JTree projectTree,final IDatabase database,final INaviModule module,final IViewContainer container){  super(projectTree,new CFunctionViewsModel(database,module),container,new CFunctionViewsTableHelp());  setDefaultRenderer(Object.class,new CViewsTableRenderer(this,container));}  }
class C{  private static void finalizeGif(String outputName){  ProcessBuilder pb=new ProcessBuilder(IMAGEMAGICK,"-delay","10","-loop","1","*.png",outputName);  pb.redirectErrorStream(true);  try {    System.out.println("Writing GIF...");    Process process=pb.start();    BufferedReader inStreamReader=new BufferedReader(new InputStreamReader(process.getInputStream()));    String s;    while ((s=inStreamReader.readLine()) != null) {      System.out.println(s);    }    System.out.println("Wrote GIF in " + System.getProperty("user.dir"));  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public WebBasketLine add(WebBasketLine wbl){  wbl.setLine(m_lineNo++);  m_lines.add(wbl);  getTotal(true);  return wbl;}  }
class C{  private char nextChar(char oldChar,int delta){  char nextChar=(char)(oldChar + delta);  if (delta >= 0) {    if (nextChar < oldChar) {      nextChar=Character.MAX_VALUE;    }  } else {    if (nextChar > oldChar) {      nextChar=Character.MIN_VALUE;    }  }  return nextChar;}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  if (node != null) {    DataObjectFilter[] filts=node.getFilters();    if (filts != null)     return new Integer(filts.length);  }  return new Integer(0);}  }
class C{  @Inline @Entrypoint public static Object objectFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_OBJECT_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().objectReferenceRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD).toObject();  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  private InterpreterResult processCount(String[] urlItems,String data){  if (urlItems.length > 2) {    return new InterpreterResult(InterpreterResult.Code.ERROR,"Bad URL (it should be /index1,index2,.../type1,type2,...)");  }  final SearchResponse response=searchData(urlItems,data,0);  return new InterpreterResult(InterpreterResult.Code.SUCCESS,InterpreterResult.Type.TEXT,"" + response.getHits().getTotalHits());}  }
class C{  public SyntaxView(Element elem){  super(elem);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static int EOWNERDEAD(){  return 130;}  }
class C{  public void editButtonActionPerformed(){  curNode=(XBeeNode)nodeField.getSelectedItem();  if (curNode == null) {    statusText1.setText(Bundle.getMessage("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  jmri.util.JmriJFrame editFrame=new EditNodeFrame(xtc,(XBeeNode)curNode,this);  try {    editFrame.initComponents();  } catch (  Exception ex) {    log.error("Exception initializing Frame: {}",ex.toString());    return;  }  editFrame.setVisible(true);}  }
class C{  public static boolean isNetworkRoaming(Context context){  TelephonyManager tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  return tm.isNetworkRoaming();}  }
class C{  public MultiInfoCalculatorKernel(){  mvkeJoint=new KernelEstimatorMultiVariate();}  }
class C{  public NodeIterator cloneWithReset() throws CloneNotSupportedException {  NodeSet clone=(NodeSet)clone();  clone.reset();  return clone;}  }
class C{  private void testConcurrentWrite() throws InterruptedException {  final AtomicInteger detected=new AtomicInteger();  final AtomicInteger notDetected=new AtomicInteger();  for (int i=0; i < 10; i++) {    testConcurrentWrite(detected,notDetected);  }  assertTrue(notDetected.get() * 10 <= detected.get());}  }
class C{  @Override public boolean dataDefinitionIgnoredInTransactions(){  debugCodeCall("dataDefinitionIgnoredInTransactions");  return false;}  }
class C{  public CropTransformation(int width,int height,float aspectRatio,GravityHorizontal gravityHorizontal,GravityVertical gravityVertical){  mWidth=width;  mHeight=height;  mAspectRatio=aspectRatio;  mGravityHorizontal=gravityHorizontal;  mGravityVertical=gravityVertical;}  }
class C{  public void storeLocal(final int local,final Type type){  setLocalType(local,type);  storeInsn(type,local);}  }
class C{  public String intercept(ActionInvocation invocation) throws Exception {  HttpServletRequest request=ServletActionContext.getRequest();  if (this.authorizedRoles != null) {    for (    String authorizedRole : this.authorizedRoles) {      if (request.isUserInRole(authorizedRole)) {        return invocation.invoke();      }    }  }  HttpServletResponse response=ServletActionContext.getResponse();  handleNotAuthorized(request,response);  return null;}  }
class C{  @NonNull public Builder addClass(@NonNull Class<?> clazz){  if (ignoreMap == null) {    ignoreMap=new HashMap<>();  }  ValidationIgnore ignore=new ValidationIgnore(clazz);  ignore.setAsIgnoreClassAll();  ignoreMap.put(clazz,ignore);  return this;}  }
class C{  public void delete(String alias){  map.remove(alias);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public RenameRefactoringSession createRenameRefactoring(IJavaElement element,ICompilationUnit cu,int offset,boolean lightweight) throws CoreException, RefactoringException {  RenameRefactoringSession session=DtoFactory.newDto(RenameRefactoringSession.class);  String id=String.format("rename-%s",sessionId.getAndIncrement());  session.setSessionId(id);  session.setOldName(element.getElementName());  session.setWizardType(getWizardType(element));  if (lightweight && !(element instanceof IPackageFragment)) {    RenameLinkedModeRefactoringSession refactoringSession=new RenameLinkedModeRefactoringSession(element,cu,offset);    LinkedModeModel model=refactoringSession.getModel();    if (model != null) {      session.setLinkedModeModel(model);    }    sessions.put(id,refactoringSession);    return session;  } else {    RenameSupport renameSupport=createRenameSupport(element,null,RenameSupport.UPDATE_REFERENCES);    if (renameSupport != null && renameSupport.preCheck().isOK()) {      RenameRefactoring refactoring=renameSupport.getfRefactoring();      RenameSession renameSession=new RenameSession(refactoring);      sessions.put(id,renameSession);      return session;    }    throw new RefactoringException("Can't create refactoring session for element: " + element.getElementName());  }}  }
class C{  public int rtf(){  return m_dtmRoot;}  }
class C{  protected String loadDocumentDetails(){  setC_Currency_ID(NO_CURRENCY);  X_M_Production prod=(X_M_Production)getPO();  setDateDoc(prod.getMovementDate());  setDateAcct(prod.getMovementDate());  p_lines=loadLines(prod);  log.fine("Lines=" + p_lines.length);  return null;}  }
class C{  public void assertTagTypeDisplayNameDoesNotExist(String displayName) throws AlreadyExistsException {  TagTypeEntity tagTypeEntity=tagTypeDao.getTagTypeByDisplayName(displayName);  if (tagTypeEntity != null) {    throw new AlreadyExistsException(String.format("Display name \"%s\" already exists for tag type \"%s\".",displayName,tagTypeEntity.getCode()));  }}  }
class C{  public void testLinkSetConsistency3(){  doLoadData();  final ValueFactory vf=om.getValueFactory();  final IGPO worker1=om.getGPO(vf.createURI("gpo:#1000"));  final IGPO worker2=om.getGPO(vf.createURI("gpo:#1001"));  final IGPO worker3=om.getGPO(vf.createURI("gpo:#1002"));  final IGPO employer=om.getGPO(vf.createURI("gpo:#1003"));  final URI worksFor=vf.createURI("attr:/employee#worksFor");  final ILinkSet ls=employer.getLinksIn(worksFor);  checkLinkSet(ls,0);  worker1.setValue(worksFor,employer.getId());  checkLinkSet(ls,1);  worker1.setValue(worksFor,employer.getId());  assertTrue(worker1.getValue(worksFor).equals(employer.getId()));  checkLinkSet(ls,1);  worker2.setValue(worksFor,employer.getId());  checkLinkSet(ls,2);  worker3.setValue(worksFor,employer.getId());  checkLinkSet(ls,3);  worker2.removeValue(worksFor,employer.getId());  assertTrue(worker2.getValue(worksFor) == null);  checkLinkSet(ls,2);}  }
class C{  public String toString(){  return name;}  }
class C{  public DrawerBuilder withHeaderPadding(boolean headerPadding){  this.mHeaderPadding=headerPadding;  return this;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  private QCondition andConditions(QCondition aCondition,QCondition bCondition){  if (aCondition != null && bCondition != null) {    return aCondition.and(bCondition);  } else   if (aCondition != null) {    return aCondition;  } else {    return bCondition;  }}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  xstr().dispatchCharactersEvents(ch);}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {  if (internalDTDsubset) {    if (includeInternalDTDDeclarations) {      addDTDDeclaration(new InternalEntityDecl(name,value));    }  } else {    if (includeExternalDTDDeclarations) {      addExternalDTDDeclaration(new InternalEntityDecl(name,value));    }  }}  }
class C{  public void add(Vector3f summand){  this.points[0]+=summand.points[0];  this.points[1]+=summand.points[1];  this.points[2]+=summand.points[2];}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultDataVisualizer.gif",BeanVisual.ICON_PATH + "DefaultDataVisualizer_animated.gif");}  }
class C{  public void close() throws IOException {  inputStream.close();}  }
class C{  private void recordBourneVplexMirrorEvent(URI mirrorUri,String evtType,Operation.Status status,String description){  try {    VplexMirrorTaskCompleter.recordBourneVplexMirrorEvent(_dbClient,mirrorUri,evtType,status,description);  } catch (  Exception e) {    _log.error("Failed recording VPLEX mirror event {} for mirror {}",evtType,mirrorUri);  }}  }
class C{  public static MCashLine createBankTransferCashEntry(Properties ctx,MCash cashJournal,BigDecimal transferAmount,int bankAccountId,String trxName) throws OperationException {  return createBankTransferCashEntry(ctx,cashJournal,transferAmount,bankAccountId,null,trxName);}  }
class C{  public BOGD(KernelTrick k,int budget,double eta,double reg,double maxCoeff,LossC lossC){  setKernel(k);  setBudget(budget);  setEta(eta);  setRegularization(reg);  setMaxCoeff(maxCoeff);  this.lossC=lossC;  setUniformSampling(false);}  }
class C{  public void start(){  for (  Sensor sensor : sensorList) {    sensorManager.registerListener(this,sensor,SensorManager.SENSOR_DELAY_GAME);  }}  }
class C{  public void text(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(s);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)(xs - ws / 2.0),(float)(ys + hs));  draw();}  }
class C{  public void readXML(WebRowSet caller,java.io.InputStream iStream) throws SQLException {  try {    InputSource is=new InputSource(iStream);    DefaultHandler dh=new XmlErrorHandler();    XmlReaderContentHandler hndr=new XmlReaderContentHandler((RowSet)caller);    SAXParserFactory factory=SAXParserFactory.newInstance();    factory.setNamespaceAware(true);    factory.setValidating(true);    SAXParser parser=factory.newSAXParser();    parser.setProperty("http://java.sun.com/xml/jaxp/properties/schemaLanguage","http://www.w3.org/2001/XMLSchema");    XMLReader reader1=parser.getXMLReader();    reader1.setEntityResolver(new XmlResolver());    reader1.setContentHandler(hndr);    reader1.setErrorHandler(dh);    reader1.parse(is);  } catch (  SAXParseException err) {    System.out.println(MessageFormat.format(resBundle.handleGetObject("wrsxmlreader.parseerr").toString(),new Object[]{err.getLineNumber(),err.getSystemId()}));    System.out.println("   " + err.getMessage());    err.printStackTrace();    throw new SQLException(err.getMessage());  }catch (  SAXException e) {    Exception x=e;    if (e.getException() != null)     x=e.getException();    x.printStackTrace();    throw new SQLException(x.getMessage());  }catch (  ArrayIndexOutOfBoundsException aie) {    throw new SQLException(resBundle.handleGetObject("wrsxmlreader.invalidcp").toString());  }catch (  Throwable e) {    throw new SQLException(MessageFormat.format(resBundle.handleGetObject("wrsxmlreader.readxml").toString(),e.getMessage()));  }}  }
class C{  public static void main(String[] args){  runFileSaver(new JSONSaver(),args);}  }
class C{  public final boolean checkTag(int identifier){  return true;}  }
class C{  public void predictMovement(Direction direction,boolean facing){  if (stopped()) {    if (isConfused()) {      direction=direction.oppositeDirection();    }    if (!facing) {      double speed=speedPredictor.getSpeed();      setSpeed(direction.getdx() * speed,direction.getdy() * speed);      fireChange(PROP_SPEED);      speedPredictor.startPrediction();    }    setDirection(direction);  }}  }
class C{  @Override public void write(byte[] buf,int off,int nbytes){  digest.update(buf,off,nbytes);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.370 -0500",hash_original_method="631D63FD16AE3FEAB1552B743E29445B",hash_generated_method="CD23FBA6B06195A36BE63AC7E71FAAB9") protected PoolEntry(){  super(SingleClientConnManager.this.connOperator,null);}  }
class C{  public boolean isShowYLabels(){  return mShowYLabels;}  }
class C{  public CreateIndexRequestBuilder addAlias(Alias alias){  request.alias(alias);  return this;}  }
class C{  public static void notifyServerLeft(final ServerLocation location){  DistributedMember id=new InternalDistributedMember(location);  notifyListeners(id,false,EventType.LEFT);}  }
class C{  public <A,B,C>TheoryBuilder3<A,B,C> forAll(final Source<A> as,final Source<B> bs,final Source<C> cs){  return new TheoryBuilder3<>(state,as,bs,cs,null);}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  public SerialMessage(String m){  super(m);}  }
class C{  public static GLFont fromTTF(float px,ResourceLocation ttf){  if (ttf == null)   throw new IllegalArgumentException("ttf may not be null");  try {    IResource metricResource=Minecraft.getMinecraft().getResourceManager().getResource(ttf);    InputStream stream=metricResource.getInputStream();    if (stream == null)     throw new IOException("Could not open TTF file.");    Font sysfont=Font.createFont(Font.TRUETYPE_FONT,stream);    return fromFont(sysfont.deriveFont(px));  } catch (  FontFormatException e) {  }catch (  IOException e) {  }  return null;}  }
class C{  public boolean equals(Object other){  boolean retval;  if (!other.getClass().equals(this.getClass())) {    return false;  }  RequestLine that=(RequestLine)other;  try {    retval=this.method.equals(that.method) && this.uri.equals(that.uri) && this.sipVersion.equals(that.sipVersion);  } catch (  NullPointerException ex) {    retval=false;  }  return retval;}  }
class C{  public boolean hasFileDescriptors(){  return mExtras != null && mExtras.hasFileDescriptors();}  }
class C{  public static CacheEntryPredicate[] filterArray(@Nullable CacheEntryPredicate filter){  return filter != null ? new CacheEntryPredicate[]{filter} : CU.empty0();}  }
class C{  public static <T>T adaptTo(Object o,final Class<T> actualType,final Class<?> adapterType){  if (actualType.isInstance(o)) {    return actualType.cast(o);  } else   if (o instanceof IAdaptable) {    o=((IAdaptable)o).getAdapter(adapterType);    if (actualType.isInstance(o)) {      return actualType.cast(o);    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.305 -0500",hash_original_method="606F0DCA7612149020DC0A3888C38263",hash_generated_method="7824CF6264FC8702E43E9566F871EFE8") public void sendFile(String filename,int mode,InputStream input,InetAddress host) throws IOException {  sendFile(filename,mode,input,host,DEFAULT_PORT);}  }
class C{  public StringBuffer(){}  }
class C{  public static Transaction createFakeTx(NetworkParameters params,Coin value,Address to){  return createFakeTxWithChangeAddress(params,value,to,new ECKey().toAddress(params));}  }
class C{  protected void removeLastFieldSeparator(StringBuffer buffer){  int len=buffer.length();  int sepLen=fieldSeparator.length();  if (len > 0 && sepLen > 0 && len >= sepLen) {    boolean match=true;    for (int i=0; i < sepLen; i++) {      if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {        match=false;        break;      }    }    if (match) {      buffer.setLength(len - sepLen);    }  }}  }
class C{  private int unsignedByteToInt(byte b){  return b & 0xFF;}  }
class C{  public void testFloatsAndReals() throws Exception {  createTable("floatsAndReals","(floatCol FLOAT, realCol REAL, doubleCol DOUBLE)");  this.stmt.executeUpdate("INSERT INTO floatsAndReals VALUES (0, 0, 0)");  this.rs=this.stmt.executeQuery("SELECT floatCol, realCol, doubleCol FROM floatsAndReals");  ResultSetMetaData rsmd=this.rs.getMetaData();  this.rs.next();  assertTrue(rsmd.getColumnClassName(1).equals("java.lang.Float"));  assertTrue(this.rs.getObject(1).getClass().getName().equals("java.lang.Float"));  assertTrue(rsmd.getColumnClassName(2).equals("java.lang.Double"));  assertTrue(this.rs.getObject(2).getClass().getName().equals("java.lang.Double"));  assertTrue(rsmd.getColumnClassName(3).equals("java.lang.Double"));  assertTrue(this.rs.getObject(3).getClass().getName().equals("java.lang.Double"));}  }
class C{  public void abort() throws IOException {  throw new IOException("Called from a server");}  }
class C{  public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){  Random random=new Random();  Cache.Entry entry=new Cache.Entry();  if (data != null) {    entry.data=data;  } else {    entry.data=new byte[random.nextInt(1024)];  }  entry.etag=String.valueOf(random.nextLong());  entry.serverDate=random.nextLong();  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;  return entry;}  }
class C{  public ProxyConnector(){  super(new DefaultSocketSessionConfig(),null);}  }
class C{  public boolean isMemTrue(){  return (flags & MEM_TRUE) != 0;}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof TextSyntax && this.value.equals(((TextSyntax)object).value) && this.locale.equals(((TextSyntax)object).locale));}  }
class C{  public static Map<String,Object> deleteParty(DispatchContext ctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_delete_party_not_implemented",locale));}  }
class C{  @Override public void tupleMatched(Map<K,V> tuple){  if (compare.isConnected()) {    compare.emit(cloneTuple(tuple));  }}  }
class C{  public void insertPointAfter(PolygonPoint a,PolygonPoint newPoint){  int index=_points.indexOf(a);  if (index != -1) {    newPoint.setNext(a.getNext());    newPoint.setPrevious(a);    a.getNext().setPrevious(newPoint);    a.setNext(newPoint);    _points.add(index + 1,newPoint);  } else {    throw new RuntimeException("Tried to insert a point into a Polygon after a point not belonging to the Polygon");  }}  }
class C{  public int hashCode(){  if (this.data != null) {    return this.data.hashCode();  } else   if (this.id != null) {    return this.id.intValue();  }  return super.hashCode();}  }
class C{  public static NinePatch createNinePatch(BufferedImage image,boolean is9Patch,boolean convert){  return NinePatch.load(image,is9Patch,convert);}  }
class C{  public void addExtension(final String extension){  addExtension("*." + extension,extension);}  }
class C{  public static OptionScanNode addCompatToTree(final SwitchAccessNodeCompat compat,OptionScanNode tree){  List<AccessibilityNodeActionNode> actionNodes=getCompatActionNodes(compat);  if (actionNodes.size() == 1) {    tree=new OptionScanSelectionNode(actionNodes.get(0),tree);  } else   if (actionNodes.size() > 1) {    tree=new OptionScanSelectionNode(LinearScanTreeBuilder.buildContextMenuTree(actionNodes),tree);  }  return tree;}  }
class C{  public static MarkovDecisionProcess<Cell<Double>,CellWorldAction> createMDPForFigure17_3(final CellWorld<Double> cw){  return new MDP<Cell<Double>,CellWorldAction>(cw.getCells(),cw.getCellAt(1,1),createActionsFunctionForFigure17_1(cw),createTransitionProbabilityFunctionForFigure17_1(cw),createRewardFunctionForFigure17_1());}  }
class C{  protected void modifyOMGraphicForEditRender(){  OMRangeRings omrr=(OMRangeRings)getGraphic();  drawLabelsHolder=omrr.getDrawLabels();  omrr.setDrawLabels(false);}  }
class C{  public static String createLinkFailureMessageBasedOnHeuristics(MySQLConnection conn,long lastPacketSentTimeMs,long lastPacketReceivedTimeMs,Exception underlyingException){  long serverTimeoutSeconds=0;  boolean isInteractiveClient=false;  if (conn != null) {    isInteractiveClient=conn.getInteractiveClient();    String serverTimeoutSecondsStr=null;    if (isInteractiveClient) {      serverTimeoutSecondsStr=conn.getServerVariable("interactive_timeout");    } else {      serverTimeoutSecondsStr=conn.getServerVariable("wait_timeout");    }    if (serverTimeoutSecondsStr != null) {      try {        serverTimeoutSeconds=Long.parseLong(serverTimeoutSecondsStr);      } catch (      NumberFormatException nfe) {        serverTimeoutSeconds=0;      }    }  }  StringBuilder exceptionMessageBuf=new StringBuilder();  long nowMs=System.currentTimeMillis();  if (lastPacketSentTimeMs == 0) {    lastPacketSentTimeMs=nowMs;  }  long timeSinceLastPacketSentMs=(nowMs - lastPacketSentTimeMs);  long timeSinceLastPacketSeconds=timeSinceLastPacketSentMs / 1000;  long timeSinceLastPacketReceivedMs=(nowMs - lastPacketReceivedTimeMs);  int dueToTimeout=DUE_TO_TIMEOUT_FALSE;  StringBuilder timeoutMessageBuf=null;  if (serverTimeoutSeconds != 0) {    if (timeSinceLastPacketSeconds > serverTimeoutSeconds) {      dueToTimeout=DUE_TO_TIMEOUT_TRUE;      timeoutMessageBuf=new StringBuilder();      timeoutMessageBuf.append(Messages.getString("CommunicationsException.2"));      if (!isInteractiveClient) {        timeoutMessageBuf.append(Messages.getString("CommunicationsException.3"));      } else {        timeoutMessageBuf.append(Messages.getString("CommunicationsException.4"));      }    }  } else   if (timeSinceLastPacketSeconds > DEFAULT_WAIT_TIMEOUT_SECONDS) {    dueToTimeout=DUE_TO_TIMEOUT_MAYBE;    timeoutMessageBuf=new StringBuilder();    timeoutMessageBuf.append(Messages.getString("CommunicationsException.5"));    timeoutMessageBuf.append(Messages.getString("CommunicationsException.6"));    timeoutMessageBuf.append(Messages.getString("CommunicationsException.7"));    timeoutMessageBuf.append(Messages.getString("CommunicationsException.8"));  }  if (dueToTimeout == DUE_TO_TIMEOUT_TRUE || dueToTimeout == DUE_TO_TIMEOUT_MAYBE) {    if (lastPacketReceivedTimeMs != 0) {      Object[] timingInfo={Long.valueOf(timeSinceLastPacketReceivedMs),Long.valueOf(timeSinceLastPacketSentMs)};      exceptionMessageBuf.append(Messages.getString("CommunicationsException.ServerPacketTimingInfo",timingInfo));    } else {      exceptionMessageBuf.append(Messages.getString("CommunicationsException.ServerPacketTimingInfoNoRecv",new Object[]{Long.valueOf(timeSinceLastPacketSentMs)}));    }    if (timeoutMessageBuf != null) {      exceptionMessageBuf.append(timeoutMessageBuf);    }    exceptionMessageBuf.append(Messages.getString("CommunicationsException.11"));    exceptionMessageBuf.append(Messages.getString("CommunicationsException.12"));    exceptionMessageBuf.append(Messages.getString("CommunicationsException.13"));  } else {    if (underlyingException instanceof BindException) {      if (conn.getLocalSocketAddress() != null && !Util.interfaceExists(conn.getLocalSocketAddress())) {        exceptionMessageBuf.append(Messages.getString("CommunicationsException.LocalSocketAddressNotAvailable"));      } else {        exceptionMessageBuf.append(Messages.getString("CommunicationsException.TooManyClientConnections"));      }    }  }  if (exceptionMessageBuf.length() == 0) {    exceptionMessageBuf.append(Messages.getString("CommunicationsException.20"));    if (conn != null && conn.getMaintainTimeStats() && !conn.getParanoid()) {      exceptionMessageBuf.append("\n\n");      if (lastPacketReceivedTimeMs != 0) {        Object[] timingInfo={Long.valueOf(timeSinceLastPacketReceivedMs),Long.valueOf(timeSinceLastPacketSentMs)};        exceptionMessageBuf.append(Messages.getString("CommunicationsException.ServerPacketTimingInfo",timingInfo));      } else {        exceptionMessageBuf.append(Messages.getString("CommunicationsException.ServerPacketTimingInfoNoRecv",new Object[]{Long.valueOf(timeSinceLastPacketSentMs)}));      }    }  }  return exceptionMessageBuf.toString();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  protected String defaultFilterString(){  return "weka.filters.unsupervised.attribute.RandomProjection";}  }
class C{  public JSONObject extractWidgetsMetadata(String viewId,String device,Document viewSource,boolean xhmltInput){  try {    ViewParser viewParser=new ViewParser(viewId,device,true,mustIndent(),xhmltInput);    String metadata=viewParser.extractCruxMetaData(viewSource);    return new JSONObject(metadata);  } catch (  Exception e) {    log.error(e.getMessage(),e);    throw new RuntimeException(e);  }}  }
class C{  protected Iterator<V> createValuesIterator(){  if (size() == 0) {    return EmptyIterator.INSTANCE;  }  return new ValuesIterator<K,V>(this);}  }
class C{  public T caseAnonymous_enum_1_(Anonymous_enum_1_ object){  return null;}  }
class C{  public static Typeface robotoBoldItalic(Context context){  return FontSourceProcessor.process(R.raw.roboto_bolditalic,context);}  }
class C{  public final int[] signature(final boolean[] vector){  if (vector.length != dict_size) {    throw new IllegalArgumentException("Size of array should be dict_size");  }  return signature(convert2Set(vector));}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {  lh.comment((char[])m_obj,m_start,m_length);}  }
class C{  public void waitUntilFree(){  while (isBusy()) {    sendEmptyMessage(BLANK);    lock.lock();    try {      if (isBusy()) {        busyCondition.await();      }    } catch (    InterruptedException e) {      throw new RuntimeException(e);    } finally {      lock.unlock();    }  }}  }
class C{  public void destroy(){  if (executorService != null) {    executorService.shutdownNow();  }}  }
class C{  public BluetoothTestUtils(Context context,String tag,String outputFile){  mContext=context;  mTag=tag;  mOutputFile=outputFile;  if (mOutputFile == null) {    mOutputWriter=null;  } else {    try {      mOutputWriter=new BufferedWriter(new FileWriter(new File(Environment.getExternalStorageDirectory(),mOutputFile),true));    } catch (    IOException e) {      Log.w(mTag,"Test output file could not be opened",e);      mOutputWriter=null;    }  }}  }
class C{  public void resolveClassAnnotations(){  _classAnnotations=new AnnotationMap();  if (_annotationIntrospector == null) {    return;  }  if (_primaryMixIn != null) {    _addClassMixIns(_classAnnotations,_class,_primaryMixIn);  }  for (  Annotation a : _class.getDeclaredAnnotations()) {    if (_annotationIntrospector.isHandled(a)) {      _classAnnotations.addIfNotPresent(a);    }  }  for (  Class<?> cls : _superTypes) {    _addClassMixIns(_classAnnotations,cls);    for (    Annotation a : cls.getDeclaredAnnotations()) {      if (_annotationIntrospector.isHandled(a)) {        _classAnnotations.addIfNotPresent(a);      }    }  }  _addClassMixIns(_classAnnotations,Object.class);}  }
class C{  public void onDestroy(){  closeDialog();}  }
class C{  public boolean execute(INode state){  TinyPuzzle tp=(TinyPuzzle)state;  tp.s[pos]++;  return true;}  }
class C{  private boolean isDeleteBeforeRemove(){  return deleteBeforeRemove;}  }
class C{  public boolean isGossipRunning(){  return gossipRunning;}  }
class C{  public static synchronized AdaptorBootstrap initialize(String portStr,Properties props){  if (portStr.length() == 0)   portStr=DefaultValues.PORT;  final int port;  try {    port=Integer.parseInt(portStr);  } catch (  NumberFormatException x) {    throw new AgentConfigurationError(INVALID_SNMP_PORT,x,portStr);  }  if (port < 0) {    throw new AgentConfigurationError(INVALID_SNMP_PORT,portStr);  }  final String trapPortStr=props.getProperty(PropertyNames.TRAP_PORT,DefaultValues.TRAP_PORT);  final int trapPort;  try {    trapPort=Integer.parseInt(trapPortStr);  } catch (  NumberFormatException x) {    throw new AgentConfigurationError(INVALID_SNMP_TRAP_PORT,x,trapPortStr);  }  if (trapPort < 0) {    throw new AgentConfigurationError(INVALID_SNMP_TRAP_PORT,trapPortStr);  }  final String addrStr=props.getProperty(PropertyNames.BIND_ADDRESS,DefaultValues.BIND_ADDRESS);  final String defaultAclFileName=getDefaultFileName(DefaultValues.ACL_FILE_NAME);  final String aclFileName=props.getProperty(PropertyNames.ACL_FILE_NAME,defaultAclFileName);  final String useAclStr=props.getProperty(PropertyNames.USE_ACL,DefaultValues.USE_ACL);  final boolean useAcl=Boolean.valueOf(useAclStr).booleanValue();  if (useAcl)   checkAclFile(aclFileName);  AdaptorBootstrap adaptor=null;  try {    adaptor=getAdaptorBootstrap(port,trapPort,addrStr,useAcl,aclFileName);  } catch (  Exception e) {    throw new AgentConfigurationError(AGENT_EXCEPTION,e,e.getMessage());  }  return adaptor;}  }
class C{  protected void readAcknowledged(StreamInput in) throws IOException {  acknowledged=in.readBoolean();}  }
class C{  private void checkRestartLocked(){  if (restartNeeded) {    workerHandler.obtainMessage(MSG_CALL_MAYBE_START_FLOW,this).sendToTarget();  }}  }
class C{  private void method(Detail detail) throws Exception {  List<MethodDetail> list=detail.getMethods();  for (  MethodDetail entry : list) {    method(entry);  }}  }
class C{  private void toggleFavorite(){  for (  String game : list.getSelectedValuesList()) {    if (favorites.contains(game)) {      favorites.remove(game);    } else {      favorites.add(game);    }  }  saveFavorites();  update();}  }
class C{  public TSink<String> publish(TStream<String> stream,String topic){  return publish(stream,null,null,null,null);}  }
class C{  public String toValue(){  return value;}  }
class C{  protected void closeTransportLayer() throws IOException {  super.close();  if (input != null) {    input.close();    output.close();  }}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  ensureCapacity(len,false);  if (bufferedBlockCipher != null) {    int outLen=bufferedBlockCipher.processBytes(b,off,len,buf,0);    if (outLen != 0) {      out.write(buf,0,outLen);    }  } else   if (aeadBlockCipher != null) {    int outLen=aeadBlockCipher.processBytes(b,off,len,buf,0);    if (outLen != 0) {      out.write(buf,0,outLen);    }  } else {    streamCipher.processBytes(b,off,len,buf,0);    out.write(buf,0,len);  }}  }
class C{  public void onAnimationRepeat(Animator animation){}  }
class C{  public void addLog(int Log_ID,int P_ID,Timestamp P_Date,BigDecimal P_Number,String P_Msg){  addLog(new ProcessInfoLog(Log_ID,P_ID,P_Date,P_Number,P_Msg));}  }
class C{  public JdbcConnection createConnection(boolean columnList){  String url;  if (columnList) {    url=Constants.CONN_URL_COLUMNLIST;  } else {    url=Constants.CONN_URL_INTERNAL;  }  return new JdbcConnection(this,getUser().getName(),url);}  }
class C{  public static final AxisAlignedBounds show(Window owner,AxisAlignedBounds bounds){  SetBoundsDialog dialog=new SetBoundsDialog(owner,bounds);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    Convex convex=dialog.pnlRectangle.getShape();    Vector2 tx=dialog.pnlTransform.getTranslation();    Rectangle r=(Rectangle)convex;    AxisAlignedBounds b=new AxisAlignedBounds(r.getWidth(),r.getHeight());    b.translate(tx);    return b;  }  return null;}  }
class C{  public double evaluate(){  return this._operator.calculate(this._operands);}  }
class C{  public CatalogEntryRemovedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CategoryLineAnnotation)) {    return false;  }  CategoryLineAnnotation that=(CategoryLineAnnotation)obj;  if (!this.category1.equals(that.getCategory1())) {    return false;  }  if (this.value1 != that.getValue1()) {    return false;  }  if (!this.category2.equals(that.getCategory2())) {    return false;  }  if (this.value2 != that.getValue2()) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (!ObjectUtilities.equal(this.stroke,that.stroke)) {    return false;  }  return true;}  }
class C{  protected void expandCapacity(){  String[] newArray=new String[array.length << 1];  System.arraycopy(array,0,newArray,0,index);  array=newArray;}  }
class C{  protected AlertException(byte description,SSLException reason){  super(reason);  this.reason=reason;  this.description=description;}  }
class C{  public void registerOperatorOrganisation() throws Exception, NonUniqueBusinessKeyException {  platformOperatorOrg=Organizations.createPlatformOperator(dataService);  PlatformUser platformOperatorUser=Organizations.createUserForOrg(dataService,platformOperatorOrg,true,"AdminPlatformOperatorOrg");  platformOperatorUserKey=platformOperatorUser.getKey();  PlatformUsers.grantRoles(dataService,platformOperatorUser,UserRoleType.PLATFORM_OPERATOR);}  }
class C{  public CoverageArea(XmlPullParser parser) throws IOException, NumberFormatException, XmlPullParserException {  int eventType;  double bottom=0.0d;  double top=0.0d;  double left=0.0d;  double right=0.0d;  while ((eventType=parser.next()) != XmlPullParser.END_DOCUMENT) {    String tagName=parser.getName();    if (eventType == XmlPullParser.END_TAG) {      if ("CoverageArea".equals(tagName)) {        break;      }    }    if (eventType == XmlPullParser.START_TAG) {      if ("ZoomMin".equals(tagName) && parser.next() == XmlPullParser.TEXT) {        zoomMin=Integer.parseInt(parser.getText().trim());      }      if ("ZoomMax".equals(tagName) && parser.next() == XmlPullParser.TEXT) {        zoomMax=Integer.parseInt(parser.getText().trim());      }      if ("NorthLatitude".equals(tagName) && parser.next() == XmlPullParser.TEXT) {        top=Double.parseDouble(parser.getText().trim());      }      if ("SouthLatitude".equals(tagName) && parser.next() == XmlPullParser.TEXT) {        bottom=Double.parseDouble(parser.getText().trim());      }      if ("EastLongitude".equals(tagName) && parser.next() == XmlPullParser.TEXT) {        right=Double.parseDouble(parser.getText().trim());      }      if ("WestLongitude".equals(tagName) && parser.next() == XmlPullParser.TEXT) {        left=Double.parseDouble(parser.getText().trim());      }    }  }  bbox=new BoundingBox(left,bottom,right,top);}  }
class C{  public void sendOneToOneChat(){  Log.i(TAG,"testSendOneToOneChat");  try {    OneToOneChat chat=chatApi.getOneToOneChat(remote);    chat.sendMessage("Hello world!");  } catch (  RcsServiceNotAvailableException e) {    Log.e(TAG,"RCS service not available");  }catch (  RcsPersistentStorageException e) {    Log.e(TAG,"RCS service not available");  }catch (  RcsGenericException e) {    Log.e(TAG,"Unexpected error",e);  }}  }
class C{  public void visitAfter(Code obj){}  }
class C{  public boolean bool() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,new Object[]{getTypeString()});  return false;}  }
class C{  public PFont(Typeface font,int size,boolean smooth,char charset[]){  this.typeface=font;  this.smooth=smooth;  name="";  psname="";  this.size=size;  int initialCount=10;  glyphs=new Glyph[initialCount];  ascii=new int[128];  Arrays.fill(ascii,-1);  int mbox3=size * 3;  lazyBitmap=Bitmap.createBitmap(mbox3,mbox3,Config.ARGB_8888);  lazyCanvas=new Canvas(lazyBitmap);  lazyPaint=new Paint();  lazyPaint.setAntiAlias(smooth);  lazyPaint.setTypeface(font);  lazyPaint.setTextSize(size);  lazySamples=new int[mbox3 * mbox3];  if (charset == null) {    lazy=true;  } else {    Arrays.sort(charset);    glyphs=new Glyph[charset.length];    glyphCount=0;    for (    char c : charset) {      Glyph glyf=new Glyph(c);      if (glyf.value < 128) {        ascii[glyf.value]=glyphCount;      }      glyf.index=glyphCount;      glyphs[glyphCount++]=glyf;    }  }  if (ascent == 0) {    new Glyph('d');    if (ascent == 0) {      ascent=PApplet.round(lazyPaint.ascent());    }  }  if (descent == 0) {    new Glyph('p');    if (descent == 0) {      descent=PApplet.round(lazyPaint.descent());    }  }}  }
class C{  public boolean isShiftDown(){  return (modifiers & SHIFT_MASK) != 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementcreatenewattribute.class,args);}  }
class C{  protected Resource convertToResource(DataSource ds){  Properties parameters=new Properties();  PropertyUtils.setPropertyIfNotNull(parameters,"url",ds.getUrl());  PropertyUtils.setPropertyIfNotNull(parameters,"username",ds.getUsername());  PropertyUtils.setPropertyIfNotNull(parameters,"password",ds.getPassword());  parameters.putAll(ds.getConnectionProperties());  Resource resource=new Resource(ds.getJndiLocation(),ConfigurationEntryType.DATASOURCE);  PropertyUtils.setPropertyIfNotNull(parameters,"driverClassName",ds.getDriverClass());  resource.setParameters(PropertyUtils.toMap(parameters));  return resource;}  }
class C{  public void run(final File eventsFile,final Config config,final Network network){  this.eventsfile=eventsFile.getAbsolutePath();  this.config=config;  if (this.config.qsim().getSnapshotPeriod() <= 0.0) {    System.out.println("The snapshotPeriod must be larger than 0 seconds.");    return;  }  this.network=network;  prepare();  if (this.eventsfile == null) {    this.eventsfile=this.config.getParam("events","inputFile");  }  System.out.println("reading events from " + this.eventsfile);  File file=new File(this.eventsfile);  String outputDir=file.getParent() + "/";  loadSnapshotWriters(outputDir);  try {    new MatsimEventsReader(this.events).readFile(this.eventsfile);  } catch (  OutOfMemoryError e) {    System.err.println("OutOfMemoryError while reading all events:");    e.printStackTrace();    System.err.println("Trying to close visualizer file up to this state, it may not be complete though.");  }  this.visualizer.finish();  System.out.println("done.");}  }
class C{  public static void writeMetaData(Transfer transfer,ParameterInterface p) throws IOException {  transfer.writeInt(p.getType());  transfer.writeLong(p.getPrecision());  transfer.writeInt(p.getScale());  transfer.writeInt(p.getNullable());}  }
class C{  public TriggerPodTracker(JCheckBox box,int pod){  podNum=pod;  checkbox=box;}  }
class C{  public Grammar(int[] codon){  super();  fromArray(codon);}  }
class C{  public void testSetProperties(){  String[] values=null;  SpellCheckedMetadata meta=new SpellCheckedMetadata();  Properties props=new Properties();  meta.setAll(props);  assertEquals(0,meta.size());  props.setProperty("name-one","value1.1");  meta.setAll(props);  assertEquals(1,meta.size());  values=meta.getValues("name-one");  assertEquals(1,values.length);  assertEquals("value1.1",values[0]);  props.setProperty("name-two","value2.1");  meta.setAll(props);  assertEquals(2,meta.size());  values=meta.getValues("name-one");  assertEquals(1,values.length);  assertEquals("value1.1",values[0]);  values=meta.getValues("name-two");  assertEquals(1,values.length);  assertEquals("value2.1",values[0]);}  }
class C{  public static int copy(InputStream in,OutputStream out,int bufSize) throws IOException {  byte[] buf=new byte[bufSize];  int cnt=0;  for (int n; (n=in.read(buf)) > 0; ) {    out.write(buf,0,n);    cnt+=n;  }  return cnt;}  }
class C{  public Object readMap(Element node) throws Exception {  Map<Object,Object> map;  Object key;  Object value;  Vector<Element> children;  Vector<Element> cchildren;  Element child;  Element cchild;  int i;  int n;  String name;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  map=Utils.cast(Class.forName(node.getAttribute(ATT_CLASS)).newInstance());  children=XMLDocument.getChildTags(node);  for (i=0; i < children.size(); i++) {    child=children.get(i);    cchildren=XMLDocument.getChildTags(child);    key=null;    value=null;    for (n=0; n < cchildren.size(); n++) {      cchild=cchildren.get(n);      name=cchild.getAttribute(ATT_NAME);      if (name.equals(VAL_KEY)) {        key=invokeReadFromXML(cchild);      } else       if (name.equals(VAL_VALUE)) {        value=invokeReadFromXML(cchild);      } else {        System.out.println("WARNING: '" + name + "' is not a recognized name for maps!");      }    }    map.put(key,value);  }  return map;}  }
class C{  public static InsnList copy(InsnList orig){  Iterator<?> it=orig.iterator();  InsnList copy=new InsnList();  while (it.hasNext()) {    AbstractInsnNode node=(AbstractInsnNode)it.next();    if (node instanceof VarInsnNode) {      VarInsnNode vn=(VarInsnNode)node;      copy.add(new VarInsnNode(vn.getOpcode(),vn.var));    } else     if (node instanceof FieldInsnNode) {      FieldInsnNode fn=(FieldInsnNode)node;      copy.add(new FieldInsnNode(fn.getOpcode(),fn.owner,fn.name,fn.desc));    } else     if (node instanceof InsnNode) {      if (node.getOpcode() != Opcodes.POP)       copy.add(new InsnNode(node.getOpcode()));    } else     if (node instanceof LdcInsnNode) {      copy.add(new LdcInsnNode(((LdcInsnNode)node).cst));    } else {      throw new RuntimeException("Unexpected node type: " + node.getClass());    }  }  return copy;}  }
class C{  public final void draw(Object object,Graphics2D graphics,DrawInfo2D info){  double diamx=info.draw.width * 2;  double diamy=info.draw.height * 2;  graphics.setColor(getColor());  graphics.fillRect((int)(info.draw.x - diamx / 2),(int)(info.draw.y - diamy / 2),(int)(diamx),(int)(diamy));}  }
class C{  @SuppressWarnings("unchecked") public static Object eval(String expression,Map<String,Object> context) throws CompilationFailedException {  Object o;  if (expression == null || expression.equals("")) {    Debug.logError("Groovy Evaluation error. Empty expression",module);    return null;  }  if (Debug.verboseOn()) {    Debug.logVerbose("Evaluating -- " + expression,module);    Debug.logVerbose("Using Context -- " + context,module);  }  try {    GroovyShell shell=new GroovyShell(getBinding(context));    o=shell.evaluate(StringUtil.convertOperatorSubstitutions(expression));    if (Debug.verboseOn()) {      Debug.logVerbose("Evaluated to -- " + o,module);    }    Binding binding=shell.getContext();    context.putAll(binding.getVariables());  } catch (  CompilationFailedException e) {    Debug.logError(e,"Groovy Evaluation error.",module);    throw e;  }  return o;}  }
class C{  protected void addReferencesFromOfflineCRLSource(List<TimestampReference> references){  OfflineCRLSource crlSource=getCRLSource();  if (crlSource != null) {    List<X509CRL> containedX509CRLs=crlSource.getContainedX509CRLs();    if (CollectionUtils.isNotEmpty(containedX509CRLs)) {      usedCertificatesDigestAlgorithms.add(DigestAlgorithm.SHA1);      for (      X509CRL x509crl : containedX509CRLs) {        final byte[] digest=DSSUtils.digest(DigestAlgorithm.SHA1,DSSUtils.getEncoded(x509crl));        references.add(new TimestampReference(DigestAlgorithm.SHA1,Base64.encodeBase64String(digest),TimestampReferenceCategory.REVOCATION));      }    }  }}  }
class C{  public void putOrigin(int i,short val){  masks[i]&=~ORIGIN_MASK;  masks[i]|=(short)(val & ORIGIN_MASK);}  }
class C{  public static byte[] toByteArray(Bitmap bitmap,Bitmap.CompressFormat format,int quality){  ByteArrayOutputStream out=null;  try {    out=new ByteArrayOutputStream();    bitmap.compress(format,quality,out);    return out.toByteArray();  }  finally {    CloseableUtils.close(out);  }}  }
class C{  public RecyclerViewCacheUtil withCacheSize(int cacheSize){  CACHE_SIZE=cacheSize;  return this;}  }
class C{  public void removeListener(){  mHalfBandFilter.removeListener();}  }
class C{  private boolean doesFileMatchBytes(final File file,final byte[] bytes) throws IOException {  final String absolutePath=file.getAbsolutePath();  boolean keepTrying=true;  final boolean isDebugEnabled=logger.isDebugEnabled();  while (file.length() < bytes.length && keepTrying) {    if (isDebugEnabled) {      logger.debug("Loop waiting for another to write file: {}",absolutePath);    }    long startingFileLength=file.length();    try {      Thread.sleep(500);    } catch (    InterruptedException iex) {    }    if (startingFileLength == file.length()) {      if (isDebugEnabled) {        logger.debug("Done waiting for another to write file: {}",absolutePath);      }      keepTrying=false;    }  }  if (file.length() != bytes.length) {    if (isDebugEnabled) {      logger.debug("Unmatching file length when waiting for another to write file: {}",absolutePath);    }    return false;  }  BufferedInputStream inStream=new BufferedInputStream(new FileInputStream(file));  int index=0;  try {    for (; index < bytes.length; index++) {      if (((byte)inStream.read()) != bytes[index]) {        if (isDebugEnabled) {          logger.debug("Did not find a match when waiting for another to write file: {}",absolutePath);        }        return false;      }    }  }  finally {    inStream.close();  }  return true;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public StatusBarIcon(Parcel in){  readFromParcel(in);}  }
class C{  public StringTokenizer(final String str){  setString(str);}  }
class C{  public AboutDialog(JFrame parent,Logger l,boolean modal){  super(parent,modal);  initComponents();  try {    aboutEditorPane.setPage(AboutDialog.class.getResource("help/About.html"));    licenseEditorPane.setPage(AboutDialog.class.getResource("help/License.html"));    acknowldgementsEditorPane.setPage(AboutDialog.class.getResource("help/Acknowledgements.html"));  } catch (  IOException e) {    l.logMessage(Logger.ERROR,e.toString());  }  setTitle(MessageFormat.format(edu.umd.cs.findbugs.L10N.getLocalString("dlg.aboutfindbugs_ttl","About FindBugs {0}"),new Object[]{Version.RELEASE}));}  }
class C{  private String constructAddFCInitiatorHostQuery(HDSHost hdshost,List<String> portWWNList){  Map<String,Object> attributeMap=new HashMap<String,Object>();  List<WorldWideName> wwnList=new ArrayList<WorldWideName>();  Add addOp=new Add(HDSConstants.HOST);  attributeMap.put(HDSConstants.HOST,hdshost);  attributeMap.put(HDSConstants.ADD,addOp);  if (null != portWWNList && !portWWNList.isEmpty()) {    for (    String portWWN : portWWNList) {      WorldWideName wwn=new WorldWideName(portWWN);      wwnList.add(wwn);    }    hdshost.setWwnList(wwnList);  }  attributeMap.put(HDSConstants.WWN_LIST,wwnList);  String addHostWithWorldWideNamesQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.ADD_HOST_WITH_WWN_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  return addHostWithWorldWideNamesQuery;}  }
class C{  public PCAResult(double[] eigenvalues,double[][] eigenvectors,SortedEigenPairs eigenPairs){  super();  this.eigenPairs=eigenPairs;  this.eigenvalues=eigenvalues;  this.eigenvectors=eigenvectors;}  }
class C{  public boolean nextBoolean(float probability){  int y;  if (probability < 0.0f || probability > 1.0f)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0f)   return false; else   if (probability == 1.0f)   return true;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  return (y >>> 8) / ((float)(1 << 24)) < probability;}  }
class C{  @Override public void onAction(){  onAction(action);}  }
class C{  @SuppressWarnings("rawtypes") public void invokeMethod(StorageSystem storageDevice,CIMObjectPath objectPath,String methodName,CIMArgument[] inArg) throws Exception {  invokeMethod(storageDevice,objectPath,methodName,inArg,new CIMArgument[5]);}  }
class C{  public InferenceContext(N4JSTypeSystem ts,TypeSystemHelper tsh,CancelIndicator cancelIndicator,RuleEnvironment G,InferenceVariable... inferenceVariables){  Objects.requireNonNull(ts);  Objects.requireNonNull(tsh);  Objects.requireNonNull(cancelIndicator);  Objects.requireNonNull(G);  this.ts=ts;  this.tsh=tsh;  this.cancelIndicator=cancelIndicator;  this.G=G;  addInferenceVariables(false,inferenceVariables);  this.reducer=new Reducer(this,G,ts,tsh);  this.currentBounds=new BoundSet(this,G,ts);}  }
class C{  public static double oddsAbove(int n){  return oddsAbove(n,false);}  }
class C{  private void stopEaster(Player admin){  System.getProperties().remove("stendhal.easterbunny");  StendhalQuestSystem.get().unloadQuest(MeetBunny.QUEST_NAME);}  }
class C{  public void mergeBackendNote(Note remoteNote){  Note localNote=noteDao.queryByBackendId(remoteNote.getBackendId());  if (localNote != null) {    remoteNote.setId(localNote.getId());  }  saveNote(remoteNote);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapreturnnull.class,args);}  }
class C{  public static void write(String in,OutputStream out,boolean closeBoth) throws IOException {  ByteArrayInputStream is=new ByteArrayInputStream(in.getBytes("UTF-8"));  write(is,out,closeBoth);}  }
class C{  public static final Vector2[] cleanse(Vector2... points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.nullPointArray"));  List<Vector2> pointList=Arrays.asList(points);  List<Vector2> resultList=Geometry.cleanse(pointList);  Vector2[] result=new Vector2[resultList.size()];  resultList.toArray(result);  return result;}  }
class C{  public boolean isAll(){  return all;}  }
class C{  public static void checkArgument(boolean expression){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalArgumentException();  }}  }
class C{  public int writeCRT(ByteBuffer databuf,Position.LineMap lineMap,Log log){  int crtEntries=0;  new SourceComputer().csp(methodTree);  for (List<CRTEntry> l=entries.toList(); l.nonEmpty(); l=l.tail) {    CRTEntry entry=l.head;    if (entry.startPc == entry.endPc)     continue;    SourceRange pos=positions.get(entry.tree);    Assert.checkNonNull(pos,"CRT: tree source positions are undefined");    if ((pos.startPos == Position.NOPOS) || (pos.endPos == Position.NOPOS))     continue;    if (crtDebug) {      System.out.println("Tree: " + entry.tree + ", type:"+ getTypes(entry.flags));      System.out.print("Start: pos = " + pos.startPos + ", pc = "+ entry.startPc);    }    int startPos=encodePosition(pos.startPos,lineMap,log);    if (startPos == Position.NOPOS)     continue;    if (crtDebug) {      System.out.print("End:   pos = " + pos.endPos + ", pc = "+ (entry.endPc - 1));    }    int endPos=encodePosition(pos.endPos,lineMap,log);    if (endPos == Position.NOPOS)     continue;    databuf.appendChar(entry.startPc);    databuf.appendChar(entry.endPc - 1);    databuf.appendInt(startPos);    databuf.appendInt(endPos);    databuf.appendChar(entry.flags);    crtEntries++;  }  return crtEntries;}  }
class C{  public boolean endsWith(String str){  if (str == null) {    return false;  }  int len=str.length();  if (len == 0) {    return true;  }  if (len > size) {    return false;  }  int pos=size - len;  for (int i=0; i < len; i++, pos++) {    if (buffer[pos] != str.charAt(i)) {      return false;    }  }  return true;}  }
class C{  private void format(NumberFormat nf,StringBuilder buffer,double value,int maxIntegerDigits){  if (value >= 0) {    buffer.append(" + ");  } else {    buffer.append(" - ");  }  int digits=maxIntegerDigits - integerDigits(value);  for (int d=0; d < digits; d++) {    buffer.append(' ');  }  buffer.append(nf.format(Math.abs(value)));}  }
class C{  public Vector3f multLocal(float scalar){  x*=scalar;  y*=scalar;  z*=scalar;  return this;}  }
class C{  public void testAppendParentMissingPartially() throws Exception {  if (!appendSupported())   return;  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,paths(DIR),null);  createFile(igfsSecondary,FILE,chunk);  appendFile(igfs,FILE,chunk);  checkExist(igfs,igfsSecondary,SUBDIR);  checkFile(igfs,igfsSecondary,FILE,chunk,chunk);}  }
class C{  private void calculateFoodMadeUsedDataSets(){  calculateDataSets(Stat.FOOD_USED);  final List<Chart<LineChartDataSet>> clonedChartList=new ArrayList<>(chartList.size());  for (  final Chart<LineChartDataSet> chart : chartList) {    final Chart<LineChartDataSet> clonedChart=createChart();    for (    final DataModel<LineChartDataSet> model : chart.getDataModelList()) {      final DataModel<LineChartDataSet> clonedModel=new DataModel<>(model.getTitle(),model.getColor());      for (      final LineChartDataSet dataSet : model.getDataSetList()) {        final Color color=((User)model.getUserobObject()).getPlayerColor().brighterColor;        clonedModel.addDataSet(new LineChartDataSet(color,dataSet.getStroke(),dataSet.getLoops(),dataSet.getValues()));      }      clonedChart.addModel(clonedModel);    }    clonedChartList.add(clonedChart);  }  calculateDataSets(Stat.FOOD_MADE);  for (int chartIdx=0; chartIdx < chartList.size(); chartIdx++) {    final Chart<LineChartDataSet> chart=chartList.get(chartIdx);    final Chart<LineChartDataSet> clonedChart=clonedChartList.get(chartIdx);    for (int modelIdx=0; modelIdx < chart.getDataModelList().size(); modelIdx++) {      final DataModel<LineChartDataSet> model=chart.getDataModelList().get(modelIdx);      final DataModel<LineChartDataSet> clonedModel=clonedChart.getDataModelList().get(modelIdx);      model.getDataSetList().addAll(clonedModel.getDataSetList());    }  }}  }
class C{  @Override protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> c,RunnableScheduledFuture<V> task){  return new NamedScheduledTask<V>(c.getClass().getSimpleName(),task);}  }
class C{  public static ContainerUndoState fromContainer(IContainer container){  IPath fullPath=container.getFullPath();  ContainerUndoState firstCreatedParent=null;  ContainerUndoState currentContainerDescription=null;  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  IContainer currentContainer=(IContainer)root.findMember(fullPath);  if (currentContainer != null) {    return (ContainerUndoState)ResourceUndoState.fromResource(container);  }  currentContainer=root;  for (int i=0; i < fullPath.segmentCount(); i++) {    String currentSegment=fullPath.segment(i);    IResource resource=currentContainer.findMember(currentSegment);    if (resource != null) {      currentContainer=(IContainer)resource;    } else {      if (i == 0) {        firstCreatedParent=new ProjectUndoState(root.getProject(currentSegment));        currentContainerDescription=firstCreatedParent;      } else {        IFolder folderHandle=currentContainer.getFolder(new Path(currentSegment));        ContainerUndoState currentFolder=new FolderUndoState(folderHandle);        currentContainer=folderHandle;        if (currentContainerDescription != null) {          currentContainerDescription.addMember(currentFolder);        }        currentContainerDescription=currentFolder;        if (firstCreatedParent == null) {          firstCreatedParent=currentFolder;        }      }    }  }  return firstCreatedParent;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  Copier copier=new Copier(info,constPool,newCp,classnames);  try {    copier.parameters();    return new ParameterAnnotationsAttribute(newCp,getName(),copier.close());  } catch (  Exception e) {    throw new RuntimeException(e.toString());  }}  }
class C{  @Override protected String convertToString(final Object value) throws Throwable {  Date date=null;  if (value instanceof Date) {    date=(Date)value;  } else   if (value instanceof Calendar) {    date=((Calendar)value).getTime();  } else   if (value instanceof Long) {    date=new Date(((Long)value).longValue());  }  String result=null;  if (this.useLocaleFormat && date != null) {    DateFormat format=null;    if (this.patterns != null && this.patterns.length > 0) {      format=this.getFormat(this.patterns[0]);    } else {      format=this.getFormat(this.locale,this.timeZone);    }    result=format.format(date);  } else {    result=value.toString();  }  return result;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,z1 % z2);            } else {              outputFile.setValue(row,col,Double.POSITIVE_INFINITY);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,z1 % constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,constant1 % z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected Dimension computeMinTextLayout(DrawContext dc,AVList modifiers){  Font font=this.getActiveAttributes().getTextModifierFont();  if (font == null)   font=BasicTacticalSymbolAttributes.DEFAULT_TEXT_MODIFIER_FONT;  TextRenderer tr=OGLTextRenderer.getOrCreateTextRenderer(dc.getTextRendererCache(),font);  Rectangle2D bounds=tr.getBounds("E");  int maxLines=this.getMaxLabelLines(modifiers);  int maxDim=(int)(bounds.getHeight() * maxLines * 1.5);  return new Dimension(maxDim,maxDim);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ARRAY_LITERAL__ELEMENTS:    return ((InternalEList<?>)getElements()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void bind(Name name,Object obj) throws NamingException {  checkIsDestroyed();  rebind(name,obj);}  }
class C{  private String parse(String text,PO po){  if (po == null || text.indexOf('@') == -1)   return text;  String inStr=text;  String token;  StringBuffer outStr=new StringBuffer();  int i=inStr.indexOf('@');  while (i != -1) {    outStr.append(inStr.substring(0,i));    inStr=inStr.substring(i + 1,inStr.length());    int j=inStr.indexOf('@');    if (j < 0) {      inStr="@" + inStr;      break;    }    token=inStr.substring(0,j);    outStr.append(parseVariable(token,po));    inStr=inStr.substring(j + 1,inStr.length());    i=inStr.indexOf('@');  }  outStr.append(inStr);  return outStr.toString();}  }
class C{  public static boolean isLocalAssetUri(Uri uri){  final String scheme=getSchemeOrNull(uri);  return FrescoUri.LOCAL_ASSET_SCHEME.equals(scheme);}  }
class C{  Copy(Instruction phi,int index){  this.phi=phi;  destination=Phi.getResult(phi).asRegister();  source=Phi.getValue(phi,index);}  }
class C{  public void dismissView(){  if (mView != null) {    mView.dismiss();  }}  }
class C{  public WelcomeConfiguration build(){  return new WelcomeConfiguration(this);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  NodeList elementList;  Element element;  Attr attr;  Node newNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(0);  attributes=element.getAttributes();  attr=(Attr)attributes.getNamedItemNS("http://www.usa.com","domestic");  element=(Element)elementList.item(1);  attributes=element.getAttributes();{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("namednodemapsetnameditemns08",success);  }}  }
class C{  @Override public boolean hasChildren(Object element){  boolean hasChildren=false;  if (element == null) {    LOG.warn("Can not determine if elemant has children. Element is null.");  } else   if (!(element instanceof CnATreeElement)) {    LOG.warn("Can not determine if elemant has children. Element is no a CnATreeElement. Element class is: " + element.getClass());  } else {    hasChildren=getElementManager().hasChildren((CnATreeElement)element);  }  return hasChildren;}  }
class C{  public boolean isIn(double i){  return (i >= this.min) && (i <= this.max);}  }
class C{  public boolean matchesWhitespace(){  return !isEmpty() && Character.isWhitespace(queue.charAt(pos));}  }
class C{  public static float distancePointPlane(float pointX,float pointY,float pointZ,float a,float b,float c,float d){  float denom=(float)Math.sqrt(a * a + b * b + c * c);  return (a * pointX + b * pointY + c * pointZ + d) / denom;}  }
class C{  private void removeListeners(){  m_settings.getDisplaySettings().removeListener(m_settingsListener);  m_settings.getEdgeSettings().removeListener(m_edgeSettingsListener);  m_settings.getLayoutSettings().removeListener(m_layoutSettingsListener);}  }
class C{  public void executeSearch(){  try {    jListCustomers.setModel(new MyListData(lpr.loadData()));    if (jListCustomers.getModel().getSize() > 0) {      jListCustomers.setSelectedIndex(0);    }  } catch (  BasicException e) {  }}  }
class C{  public void addInterface(CtClass anInterface){  checkModify();}  }
class C{  public boolean dispatch(boolean complete) throws IOException, XNIException {  try {    boolean again;    do {      again=false;switch (fScannerState) {case SCANNER_STATE_PROLOG:{          fEntityScanner.skipSpaces();          if (fEntityScanner.skipChar('<')) {            setScannerState(SCANNER_STATE_START_OF_MARKUP);            again=true;          } else           if (fEntityScanner.skipChar('&')) {            setScannerState(SCANNER_STATE_REFERENCE);            again=true;          } else {            setScannerState(SCANNER_STATE_CONTENT);            again=true;          }          break;        }case SCANNER_STATE_START_OF_MARKUP:{        fMarkupDepth++;        if (fEntityScanner.skipChar('!')) {          if (fEntityScanner.skipChar('-')) {            if (!fEntityScanner.skipChar('-')) {              reportFatalError("InvalidCommentStart",null);            }            setScannerState(SCANNER_STATE_COMMENT);            again=true;          } else           if (fEntityScanner.skipString("DOCTYPE")) {            setScannerState(SCANNER_STATE_DOCTYPE);            again=true;          } else {            reportFatalError("MarkupNotRecognizedInProlog",null);          }        } else         if (isValidNameStartChar(fEntityScanner.peekChar())) {          setScannerState(SCANNER_STATE_ROOT_ELEMENT);          setDispatcher(fContentDispatcher);          return true;        } else         if (fEntityScanner.skipChar('?')) {          setScannerState(SCANNER_STATE_PI);          again=true;        } else         if (isValidNameStartHighSurrogate(fEntityScanner.peekChar())) {          setScannerState(SCANNER_STATE_ROOT_ELEMENT);          setDispatcher(fContentDispatcher);          return true;        } else {          reportFatalError("MarkupNotRecognizedInProlog",null);        }        break;      }case SCANNER_STATE_COMMENT:{      scanComment();      setScannerState(SCANNER_STATE_PROLOG);      break;    }case SCANNER_STATE_PI:{    scanPI();    setScannerState(SCANNER_STATE_PROLOG);    break;  }case SCANNER_STATE_DOCTYPE:{  if (fDisallowDoctype) {    reportFatalError("DoctypeNotAllowed",null);  }  if (fSeenDoctypeDecl) {    reportFatalError("AlreadySeenDoctype",null);  }  fSeenDoctypeDecl=true;  if (scanDoctypeDecl()) {    setScannerState(SCANNER_STATE_DTD_INTERNAL_DECLS);    setDispatcher(fDTDDispatcher);    return true;  }  if (fDoctypeSystemId != null) {    fIsEntityDeclaredVC=!fStandalone;    if (((fValidation || fLoadExternalDTD) && (fValidationManager == null || !fValidationManager.isCachedDTD()))) {      setScannerState(SCANNER_STATE_DTD_EXTERNAL);      setDispatcher(fDTDDispatcher);      return true;    }  } else   if (fExternalSubsetSource != null) {    fIsEntityDeclaredVC=!fStandalone;    if (((fValidation || fLoadExternalDTD) && (fValidationManager == null || !fValidationManager.isCachedDTD()))) {      fDTDScanner.setInputSource(fExternalSubsetSource);      fExternalSubsetSource=null;      setScannerState(SCANNER_STATE_DTD_EXTERNAL_DECLS);      setDispatcher(fDTDDispatcher);      return true;    }  }  fDTDScanner.setInputSource(null);  setScannerState(SCANNER_STATE_PROLOG);  break;}case SCANNER_STATE_CONTENT:{reportFatalError("ContentIllegalInProlog",null);fEntityScanner.scanChar();}case SCANNER_STATE_REFERENCE:{reportFatalError("ReferenceIllegalInProlog",null);}}} while (complete || again);if (complete) {if (fEntityScanner.scanChar() != '<') {reportFatalError("RootElementRequired",null);}setScannerState(SCANNER_STATE_ROOT_ELEMENT);setDispatcher(fContentDispatcher);}} catch (MalformedByteSequenceException e) {fErrorReporter.reportError(e.getDomain(),e.getKey(),e.getArguments(),XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (CharConversionException e) {fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"CharConversionFailure",null,XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (EOFException e) {reportFatalError("PrematureEOF",null);return false;}return true;}  }
class C{  public boolean resourceExist(Integer id){  if (id == null) {    return false;  }  return resourceExist(id.intValue());}  }
class C{  public DrawerBuilder withStickyFooter(@NonNull ViewGroup stickyFooter){  this.mStickyFooterView=stickyFooter;  return this;}  }
class C{  protected void reportMatching(FieldDeclaration field,FieldDeclaration[] otherFields,TypeDeclaration type,IJavaElement parent,int accuracy,boolean typeInHierarchy,MatchingNodeSet nodeSet) throws CoreException {  IJavaElement enclosingElement=null;  if (accuracy > -1) {    enclosingElement=createHandle(field,type,parent);    if (encloses(enclosingElement)) {      int offset=field.sourceStart;      SearchMatch match=newDeclarationMatch(enclosingElement,field.binding,accuracy,offset,field.sourceEnd - offset + 1);      if (field.initialization instanceof AllocationExpression) {        reportAccurateEnumConstructorReference(match,field,(AllocationExpression)field.initialization);      } else {        report(match);      }    }  }  if ((field.bits & ASTNode.HasLocalType) != 0) {    if (enclosingElement == null) {      enclosingElement=createHandle(field,type,parent);    }    int fieldEnd=field.endPart2Position == 0 ? field.declarationSourceEnd : field.endPart2Position;    ASTNode[] nodes=typeInHierarchy ? nodeSet.matchingNodes(field.sourceStart,fieldEnd) : null;    boolean report=(this.matchContainer & PatternLocator.FIELD_CONTAINER) != 0 && encloses(enclosingElement);    MemberDeclarationVisitor declarationVisitor=new MemberDeclarationVisitor(enclosingElement,report ? nodes : null,nodeSet,this,typeInHierarchy);    try {      field.traverse(declarationVisitor,(MethodScope)null);    } catch (    WrappedCoreException e) {      throw e.coreException;    }    if (nodes != null) {      int length=nodes.length;      for (int i=0; i < length; i++) {        ASTNode node=nodes[i];        Integer level=(Integer)nodeSet.matchingNodes.removeKey(node);        if (report && level != null) {          if (node instanceof TypeDeclaration) {            AllocationExpression allocation=((TypeDeclaration)node).allocation;            if (allocation != null && allocation.enumConstant != null) {              node=field;            }          }          this.patternLocator.matchReportReference(node,enclosingElement,declarationVisitor.getLocalElement(i),declarationVisitor.getOtherElements(i),field.binding,level.intValue(),this);        }      }    }  }  IJavaElement[] otherElements=null;  if (field.annotations != null) {    if (enclosingElement == null) {      enclosingElement=createHandle(field,type,parent);    }    if (otherFields != null) {      otherElements=createHandles(otherFields,type,parent);    }    reportMatching(field.annotations,enclosingElement,otherElements,field.binding,nodeSet,true,true);  }  if (typeInHierarchy) {    if (field.endPart1Position != 0) {      ASTNode[] nodes=nodeSet.matchingNodes(field.declarationSourceStart,field.endPart1Position);      if (nodes != null) {        if ((this.matchContainer & PatternLocator.FIELD_CONTAINER) == 0) {          for (int i=0, l=nodes.length; i < l; i++)           nodeSet.matchingNodes.removeKey(nodes[i]);        } else {          if (enclosingElement == null)           enclosingElement=createHandle(field,type,parent);          if (encloses(enclosingElement)) {            for (int i=0, l=nodes.length; i < l; i++) {              ASTNode node=nodes[i];              Integer level=(Integer)nodeSet.matchingNodes.removeKey(node);              if (otherFields != null && otherElements == null) {                otherElements=createHandles(otherFields,type,parent);              }              this.patternLocator.matchReportReference(node,enclosingElement,null,otherElements,field.binding,level.intValue(),this);            }          }        }      }    }    int fieldEnd=field.endPart2Position == 0 ? field.declarationSourceEnd : field.endPart2Position;    ASTNode[] nodes=nodeSet.matchingNodes(field.sourceStart,fieldEnd);    if (nodes != null) {      if ((this.matchContainer & PatternLocator.FIELD_CONTAINER) == 0) {        for (int i=0, l=nodes.length; i < l; i++) {          nodeSet.matchingNodes.removeKey(nodes[i]);        }      } else {        if (enclosingElement == null) {          enclosingElement=createHandle(field,type,parent);        }        if (encloses(enclosingElement)) {          MemberDeclarationVisitor declarationVisitor=new MemberDeclarationVisitor(enclosingElement,nodes,nodeSet,this,typeInHierarchy);          field.traverse(declarationVisitor,(MethodScope)null);          int length=nodes.length;          for (int i=0; i < length; i++) {            ASTNode node=nodes[i];            Integer level=(Integer)nodeSet.matchingNodes.removeKey(node);            if (level != null) {              if (node instanceof TypeDeclaration) {                AllocationExpression allocation=((TypeDeclaration)node).allocation;                if (allocation != null && allocation.enumConstant != null) {                  node=field;                }              }              this.patternLocator.matchReportReference(node,enclosingElement,declarationVisitor.getLocalElement(i),declarationVisitor.getOtherElements(i),field.binding,level.intValue(),this);            }          }          return;        }      }    }  }}  }
class C{  private boolean isParticipating(DeferredBuilderParticipant dbp){  for (  String ext : N4JSGlobals.ALL_N4_FILE_EXTENSIONS) {    if (dbp.isParticipating(ext)) {      return true;    }  }  return false;}  }
class C{  public static void testFulkersonDFS(){  FlowNetworkArray network=new FlowNetworkArray(6,0,5,edges.iterator());  FordFulkerson ffa=new FordFulkerson(network,new DFS_SearchArray(network));  ffa.compute();  validate(network);}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws SAXException {  ElemTemplateElement function=handler.getElemTemplateElement();  validate(function,handler);  super.endElement(handler,uri,localName,rawName);}  }
class C{  private void checkSearch(String inputGraph,String outputGraph){  Graph graph=GraphConverter.convert(inputGraph);  Fgs fgs=new Fgs(new GraphScore(graph));  Graph resultGraph=fgs.search();  Graph trueGraph=GraphConverter.convert(outputGraph);  resultGraph=GraphUtils.replaceNodes(resultGraph,trueGraph.getNodes());  assertTrue(resultGraph.equals(trueGraph));}  }
class C{  public boolean implicitlyCloseParentTagOnTagEnd(String parentNodeName,String nodeName){  if (parentNodeName == null) {    return false;  }  parentNodeName=parentNodeName.toLowerCase();  nodeName=nodeName.toLowerCase();  for (int i=0; i < IMPLIED_ON_END.length; i+=2) {    if (StringUtil.equalsOne(nodeName,IMPLIED_ON_END[i]) != -1) {      if (StringUtil.equalsOne(parentNodeName,IMPLIED_ON_END[i + 1]) != -1) {        return true;      }    }  }  return false;}  }
class C{  public static int length(String s){  return s.length();}  }
class C{  public SingleVariableDeclaration newSingleVariableDeclaration(){  SingleVariableDeclaration result=new SingleVariableDeclaration(this);  return result;}  }
class C{  public boolean hasWhen(){  return super.hasElement(When.KEY);}  }
class C{  public IntentShare listener(@NonNull IntentShareListener listener){  this.listener=listener;  return this;}  }
class C{  public ImmutableObjectMap(final ObjectMap<? extends Key,? extends Value> map){  super(map);  this.size=super.size;}  }
class C{  public static Bitmap scale(Bitmap src,double newWidth,double newHeight){  float width=src.getWidth();  float height=src.getHeight();  Matrix matrix=new Matrix();  float scaleWidth=((float)newWidth) / width;  float scaleHeight=((float)newHeight) / height;  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(src,0,0,(int)width,(int)height,matrix,true);}  }
class C{  private void connect() throws IOException {  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));  jmxc=JMXConnectorFactory.connect(jmxUrl,null);  MBeanServerConnection mbeanServerConn=jmxc.getMBeanServerConnection();  try {    ObjectName name=new ObjectName(DOMAINLIST_OBJECT_NAME);    domainListProxy=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,DomainListManagementMBean.class,true);    name=new ObjectName(VIRTUALUSERTABLE_OBJECT_NAME);    virtualUserTableProxy=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,RecipientRewriteTableManagementMBean.class,true);    name=new ObjectName(USERSREPOSITORY_OBJECT_NAME);    usersRepositoryProxy=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,UsersRepositoryManagementMBean.class,true);    name=new ObjectName(MAILBOXCOPIER_OBJECT_NAME);    mailboxCopierManagement=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,MailboxCopierManagementMBean.class,true);    name=new ObjectName(MAILBOXMANAGER_OBJECT_NAME);    mailboxManagerManagement=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,MailboxManagerManagementMBean.class,true);    name=new ObjectName(QUOTAMANAGER_OBJECT_NAME);    quotaManagement=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,QuotaManagementMBean.class,true);    name=new ObjectName(REINDEXER_OBJECT_NAME);    reIndexerManagement=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,ReIndexerManagementMBean.class,true);    name=new ObjectName(SIEVEMANAGER_OBJECT_NAME);    sieveRepositoryManagement=MBeanServerInvocationHandler.newProxyInstance(mbeanServerConn,name,SieveRepositoryManagementMBean.class,true);  } catch (  MalformedObjectNameException e) {    throw new RuntimeException("Invalid ObjectName? Please report this as a bug.",e);  }}  }
class C{  private void handleError(GCPStatsDataHolder statsData,Throwable e){  logSevere(e);  statsData.error=e;  statsData.stage=StatsCollectionStage.ERROR;  handleStatsRequest(statsData);}  }
class C{  public JLBHOptions accountForCoordinatedOmmission(boolean accountForCoordinatedOmmission){  this.accountForCoordinatedOmission=accountForCoordinatedOmmission;  return this;}  }
class C{  private Directory(){}  }
class C{  public boolean isNaturalAccount(){  Object oo=get_Value(COLUMNNAME_IsNaturalAccount);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION__OPERATOR:    setOperator(OPERATOR_EDEFAULT);  return;case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION__OPERAND:setOperand((Expression)null);return;}super.eUnset(featureID);}  }
class C{  protected boolean isBlockedLink(Link l){  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  return (isBlockedPort(n1) || isBlockedPort(n2));}  }
class C{  static public void main(String argv[]) throws NoSuchAlgorithmException {  if ((argv.length < 1) || (argv.length > 2)) {    System.err.println("Usage: MD5Crypt password salt");    System.exit(1);  }  if (argv.length == 2) {    System.err.println(MD5Crypt.crypt(argv[0],argv[1]));  } else {    System.err.println(MD5Crypt.crypt(argv[0]));  }  System.exit(0);}  }
class C{  private boolean checkIfBatchIsProcessedCompletely(BatchRawResult batch){  if (counter < batch.getSize()) {    return false;  } else {    return true;  }}  }
class C{  public void markMessageAsRead(String msgId) throws RcsServiceNotAvailableException, RcsPersistentStorageException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.markMessageAsRead(msgId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static String makeSuffixForMimeType(String mimeType){  if (mimeType == null) {    String message=Logging.getMessage("nullValue.ImageFomat");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (!mimeType.contains("/") || mimeType.endsWith("/")) {    String message=Logging.getMessage("generic.InvalidImageFormat");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  int paramIndex=mimeType.indexOf(";");  if (paramIndex != -1)   mimeType=mimeType.substring(0,paramIndex);  String suffix=mimeTypeToSuffixMap.get(mimeType);  if (suffix == null)   suffix=mimeType.substring(mimeType.lastIndexOf("/") + 1);  suffix=suffix.replaceFirst("bil32","bil");  suffix=suffix.replaceFirst("bil16","bil");  return "." + suffix;}  }
class C{  ResourceBundleEnumeration(Set set,Enumeration enumeration){  this.set=set;  this.iterator=set.iterator();  this.enumeration=enumeration;}  }
class C{  @Override public void endWindow(){  HashMap<K,V> tuples=new HashMap<K,V>();  Double val;  for (  Map.Entry<K,MutableDouble> e : denominators.entrySet()) {    MutableDouble nval=numerators.get(e.getKey());    if (nval == null) {      nval=new MutableDouble(0.0);    } else {      numerators.remove(e.getKey());    }    if (percent) {      val=(1 - nval.doubleValue() / e.getValue().doubleValue()) * 100;    } else {      val=1 - nval.doubleValue() / e.getValue().doubleValue();    }    tuples.put(e.getKey(),getValue(val.doubleValue()));  }  if (!tuples.isEmpty()) {    margin.emit(tuples);  }  numerators.clear();  denominators.clear();}  }
class C{  public Builder addGroup(final UnknownFieldSet value){  if (result.group == null) {    result.group=new ArrayList<UnknownFieldSet>();  }  result.group.add(value);  return this;}  }
class C{  @Override public synchronized boolean first() throws SQLException {  return super.first();}  }
class C{  public boolean hasTypeListeners(){  return !typeListenerBindings.isEmpty();}  }
class C{  @Override public void validate() throws SchedulerException {  super.validate();  if (repeatIntervalUnit == null || !(repeatIntervalUnit.equals(IntervalUnit.SECOND) || repeatIntervalUnit.equals(IntervalUnit.MINUTE) || repeatIntervalUnit.equals(IntervalUnit.HOUR)))   throw new SchedulerException("Invalid repeat IntervalUnit (must be SECOND, MINUTE or HOUR).");  if (repeatInterval < 1) {    throw new SchedulerException("Repeat Interval cannot be zero.");  }  long secondsInHour=24 * 60 * 60L;  if (repeatIntervalUnit == IntervalUnit.SECOND && repeatInterval > secondsInHour) {    throw new SchedulerException("repeatInterval can not exceed 24 hours (" + secondsInHour + " seconds). Given "+ repeatInterval);  }  if (repeatIntervalUnit == IntervalUnit.MINUTE && repeatInterval > secondsInHour / 60L) {    throw new SchedulerException("repeatInterval can not exceed 24 hours (" + secondsInHour / 60L + " minutes). Given " + repeatInterval);  }  if (repeatIntervalUnit == IntervalUnit.HOUR && repeatInterval > 24) {    throw new SchedulerException("repeatInterval can not exceed 24 hours. Given " + repeatInterval + " hours.");  }  if (getEndTimeOfDay() != null && !getStartTimeOfDay().before(getEndTimeOfDay())) {    throw new SchedulerException("StartTimeOfDay " + startTimeOfDay + " should not come after endTimeOfDay "+ endTimeOfDay);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void doWait(int address){  try {synchronized (this) {      int tdelay;      if (address >= eestartval) {        tdelay=delayval + 50 + 14;      } else {        tdelay=delayval + 4 + 14;      }      wait(tdelay);    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  public void addColumn(){  m_noColumns++;  ensureRowSize();  return;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:06.386 -0500",hash_original_method="1239840CE17889EA14CF87055D293638",hash_generated_method="B6ABF3CF04C7903483B84BB8675BEEB1") public boolean equals(Object other){  boolean retval;  if (!other.getClass().equals(this.getClass())) {    return false;  }  RequestLine that=(RequestLine)other;  try {    retval=this.method.equals(that.method) && this.uri.equals(that.uri) && this.sipVersion.equals(that.sipVersion);  } catch (  NullPointerException ex) {    retval=false;  }  return retval;}  }
class C{  public Builder clear(){  result=new Field();  return this;}  }
class C{  public In(File file){  try {    scanner=new Scanner(file,CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + file);  }}  }
class C{  private float[] createOriginVerts(){  float[] result=new float[6 * 51 * 2];  for (int i=0; i < 6; i++)   for (int j=0; j < 51; j++) {    result[i * 102 + 2 * j]=j * width / 50f;    result[i * 102 + 2 * j + 1]=i * height / 5f;  }  return result;}  }
class C{  public void toPrecedenceFreeEPL(StringWriter writer){  if ((isLowEndpointIncluded) && (isHighEndpointIncluded)) {    this.getChildren().get(0).toEPL(writer,getPrecedence());    writer.write(" between ");    this.getChildren().get(1).toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    writer.write(" and ");    this.getChildren().get(2).toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  } else {    this.getChildren().get(0).toEPL(writer,getPrecedence());    writer.write(" in ");    if (isLowEndpointIncluded) {      writer.write('[');    } else {      writer.write('(');    }    this.getChildren().get(1).toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    writer.write(':');    this.getChildren().get(2).toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    if (isHighEndpointIncluded) {      writer.write(']');    } else {      writer.write(')');    }  }}  }
class C{  public static boolean isSourceInVoumeGroup(BlockSnapshot snapshot,URI volumeGroupId,DbClient dbClient){  Volume volume=dbClient.queryObject(Volume.class,snapshot.getParent());  if (volume != null && !volume.getInactive()) {    if (volume.getVolumeGroupIds().contains(volumeGroupId.toString())) {      return true;    }    Volume vplexVolume=Volume.fetchVplexVolume(dbClient,volume);    if (vplexVolume != null && !vplexVolume.getInactive() && vplexVolume.getVolumeGroupIds().contains(volumeGroupId.toString())) {      return true;    }  }  return false;}  }
class C{  @Override @Inline public ObjectReference traceObject(TransitiveClosure trace,ObjectReference object){  VM.assertions.fail("CopySpace.traceLocal called without allocator");  return ObjectReference.nullReference();}  }
class C{  protected boolean isHorizontalPlot(Plot plot){  if (plot instanceof XYPlot) {    return ((XYPlot)plot).getOrientation() == PlotOrientation.HORIZONTAL;  }  if (plot instanceof FastScatterPlot) {    return ((FastScatterPlot)plot).getOrientation() == PlotOrientation.HORIZONTAL;  }  return false;}  }
class C{  public void incEventsRemovedByQrm(){  this._stats.incLong(_eventsRemovedByQrmId,1);}  }
class C{  public long value(){  return _map._values[_index];}  }
class C{  private void rehash(){  java.util.Set<Entry<K,V>> set=entrySet();  capacity<<=1;  size=0;  table.clear();  for (int i=0; i < capacity; i++)   table.add(null);  for (  Entry<K,V> entry : set) {    put(entry.getKey(),entry.getValue());  }}  }
class C{  private void closeDeletion(int d){  Object[] tab=table;  int len=tab.length;  Object item;  for (int i=nextKeyIndex(d,len); (item=tab[i]) != null; i=nextKeyIndex(i,len)) {    int r=hash(item,len);    if ((i < r && (r <= d || d <= i)) || (r <= d && d <= i)) {      tab[d]=item;      tab[d + 1]=tab[i + 1];      tab[i]=null;      tab[i + 1]=null;      d=i;    }  }}  }
class C{  public Name typaramName(int i){  return names.fromString("A" + i);}  }
class C{  public synchronized String executeCommand(byte[] command,int off,int len) throws IOException {  try {    outStream.write(command,off,len);    outStream.flush();    return Sage.readLineBytes(inStream);  } catch (  IOException e) {    reconnect();    outStream.write(command,off,len);    outStream.flush();    return Sage.readLineBytes(inStream);  }}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  private int normalize(final int coordinate,final int dialogSize,final int maximum){  if (coordinate + dialogSize > maximum) {    return maximum - dialogSize - 10;  } else {    return coordinate;  }}  }
class C{  private void updateEditorHeight(final WorkflowAnnotation anno){  if (anno.wasResized()) {    return;  }  Rectangle bounds=editPane.getBounds();  int prefHeight;  if (anno instanceof ProcessAnnotation) {    prefHeight=(int)Math.max(getContentHeightOfEditor((int)bounds.getWidth()),bounds.getHeight());  } else {    prefHeight=Math.max(getContentHeightOfEditor((int)bounds.getWidth()),OperatorAnnotation.MIN_HEIGHT);  }  Rectangle newBounds=new Rectangle((int)bounds.getX(),(int)bounds.getY(),(int)bounds.getWidth(),prefHeight);  if (!bounds.equals(newBounds)) {    editPane.setBounds(newBounds);    updateEditPanelPosition(newBounds,true);    view.getModel().fireAnnotationMiscChanged(anno);  }}  }
class C{  static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  private void println(int logLevel,String msg,Throwable tr){  if (logLevel < XLog.sLogLevel) {    return;  }  printlnInternal(logLevel,((msg == null || msg.length() == 0) ? "" : (msg + SystemCompat.lineSeparator)) + logConfiguration.throwableFormatter.format(tr));}  }
class C{  protected void after(){}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public int splitAtt(){  return m_splitAtt;}  }
class C{  public Vertex applyINPUT(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex index=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex speaker=arguments.get(1).getTarget().applyQuotient(variables,network);  Vertex part=null;  int partValue=1;  if (arguments.size() == 3) {    part=speaker;    try {      partValue=Integer.valueOf(String.valueOf(part.getData()));    } catch (    Exception exception) {    }    speaker=arguments.get(2).getTarget().applyQuotient(variables,network);  }  Vertex input=network.createVertex(Primitive.INPUT_VARIABLE);  Vertex conversation=variables.get(input.getRelationship(Primitive.CONVERSATION));  if (conversation == null) {    return network.createVertex(Primitive.NULL);  }  int count=0;  int value=1;  try {    value=Integer.valueOf(String.valueOf(index.getData()));  } catch (  Exception exception) {  }  List<Vertex> inputs=conversation.orderedRelations(Primitive.INPUT);  int element=inputs.size() - 1;  while (count < value && element >= 0) {    input=inputs.get(element);    if (input.hasRelationship(Primitive.SPEAKER,speaker)) {      count++;      if (count == value) {        Vertex sentence=input.getRelationship(Primitive.INPUT);        if (part == null) {          return sentence;        }        if (!sentence.instanceOf(Primitive.PARAGRAPH)) {          if (partValue == 1) {            return sentence;          }          return network.createVertex(Primitive.NULL);        }        List<Vertex> sentences=sentence.orderedRelations(Primitive.SENTENCE);        if (partValue > sentences.size()) {          return network.createVertex(Primitive.NULL);        }        return sentences.get(partValue - 1);      }    }    element--;  }  return network.createVertex(Primitive.NULL);}  }
class C{  public static void printRootCauseStackTrace(Throwable throwable,PrintWriter writer){  if (throwable == null) {    return;  }  if (writer == null) {    throw new IllegalArgumentException("The PrintWriter must not be null");  }  String trace[]=getRootCauseStackTrace(throwable);  for (int i=0; i < trace.length; i++) {    writer.println(trace[i]);  }  writer.flush();}  }
class C{  public void writeRVVGC(LocalRegion region){  if (this.getFlags().contains(DiskRegionFlag.IS_WITH_VERSIONING)) {    getDiskStore().writeRVVGC(this,region);  }}  }
class C{  public void addBehaviour(Class<?> behaviour) throws ObjectStoreConfigException {  if (behaviours.containsKey(behaviour))   throw new ObjectStoreConfigException(behaviour.getSimpleName() + " can only be added once");  try {    behaviour.getConstructor();  } catch (  NoSuchMethodException e) {    throw new ObjectStoreConfigException(behaviour.getSimpleName() + " must have a default constructor");  }  behaviours.put(behaviour,null);}  }
class C{  @Override public QueryResult<List<SysProgVO>> findGridResult(SearchValue searchValue,PageOf pageOf) throws ServiceException, Exception {  if (searchValue == null || pageOf == null) {    throw new ServiceException(SysMessageUtil.get(GreenStepSysMsgConstants.SEARCH_NO_DATA));  }  Map<String,Object> params=this.getQueryGridParameter(searchValue);  int limit=Integer.parseInt(pageOf.getShowRow());  int offset=(Integer.parseInt(pageOf.getSelect()) - 1) * limit;  QueryResult<List<SysProgVO>> result=this.sysProgDAO.findPageQueryResultByQueryName("findSysProgPageGrid",params,offset,limit);  pageOf.setCountSize(String.valueOf(result.getRowCount()));  pageOf.toCalculateSize();  return result;}  }
class C{  public <R>Maybe<R> unapply(final Decomposable t){  return cases.unapply(t);}  }
class C{  default String renderGenerics(Generator gen,M model){  return gen.onEach(model.getGenerics()).collect(joinIfNotEmpty(COMMA_SPACE,SS,SE)) + SPACE;}  }
class C{  public PushbackReader(Reader in,int size){  super(in);  if (size <= 0) {    throw new IllegalArgumentException("size <= 0");  }  this.buf=new char[size];  this.pos=size;}  }
class C{  private String generateIDLink(String texto,TrazaVO traza){  StringBuffer href=new StringBuffer();  href.append("<a href=\"../../action/auditoriaBuscar?method=detail&id=");  href.append(traza.getId());  href.append("\" styleClass=\"etiquetaAzul12Bold\" >");  href.append(texto);  href.append("</a>");  return href.toString();}  }
class C{  @Override public void put(final T item) throws IOException {  if (!queue.offer(item)) {    throw new IOException("Buffer has no free space to put an item");  }}  }
class C{  public static void sort(short[] array){  sort(0,array.length,array);}  }
class C{  void implReset(){  System.arraycopy(initialHashes,0,state,0,state.length);}  }
class C{  private boolean isYesChoice(SelectChoice choice){  return choice.getValue().startsWith("1065^") || choice.getLabelInnerText().trim().toLowerCase().startsWith("yes");}  }
class C{  public boolean isInternalFlowsOnly(){  return internalFlowsOnly;}  }
class C{  public final static String pgnPromotion(String str){  int idx=str.length() - 1;  while (idx > 0) {    char c=str.charAt(idx);    if ((c != '#') && (c != '+'))     break;    idx--;  }  if ((idx > 0) && (charToPiece(true,str.charAt(idx)) != -1))   idx--;  return str.substring(0,idx + 1) + '=' + str.substring(idx + 1,str.length());}  }
class C{  public static int findGsmSeptetLimitIndex(String s,int start,int limit,int langTable,int langShiftTable){  int accumulator=0;  int size=s.length();  SparseIntArray charToLangTable=sCharsToGsmTables[langTable];  SparseIntArray charToLangShiftTable=sCharsToShiftTables[langShiftTable];  for (int i=start; i < size; i++) {    int encodedSeptet=charToLangTable.get(s.charAt(i),-1);    if (encodedSeptet == -1) {      encodedSeptet=charToLangShiftTable.get(s.charAt(i),-1);      if (encodedSeptet == -1) {        accumulator++;      } else {        accumulator+=2;      }    } else {      accumulator++;    }    if (accumulator > limit) {      return i;    }  }  return size;}  }
class C{  public void appendDataTo(StringBuilder stringBuilder){  stringBuilder.append(buffer);}  }
class C{  public boolean queryRunTool(){  String goal="'npm " + npmGoalSelection.getText() + "'";  boolean answer=queryYesNoQuestion("Shall we really run the npm command \n\t'" + goal + "'\non every project?");  System.out.println("should run after user-quest: " + answer);  return answer;}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.663 -0500",hash_original_method="297F7CC520BE2F901AA36D11D965CF70",hash_generated_method="F2D860805EDA4A832B634194E89F311B") @DSVerified @DSSpec(DSCat.IO) public int read(char[] buffer,int offset,int length) throws IOException {  addTaint(offset);  addTaint(length);  buffer.addTaint(getTaint());  return buffer.getTaintInt();}  }
class C{  public static int computeIndentUnits(String line,int tabWidth,int indentWidth){  return IndentManipulation.measureIndentUnits(line,tabWidth,indentWidth);}  }
class C{  void write(boolean errorStream,int b) throws IOException {  setError(errorStream);switch (b) {case '\n':    super.write(BR);  convertSpace=true;break;case '\t':super.write(NBSP);super.write(NBSP);break;case ' ':if (convertSpace) {super.write(NBSP);} else {super.write(b);}break;case '<':super.write(LT);break;case '>':super.write(GT);break;case '&':super.write(AMP);break;default :if (b >= 128) {super.write(("&#" + b + ";").getBytes());} else {super.write(b);}convertSpace=false;}}  }
class C{  private static int lf_sigma0(int x){  return lf_S(x,2) ^ lf_S(x,13) ^ lf_S(x,22);}  }
