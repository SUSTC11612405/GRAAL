class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Override public int hashCode(){  return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDARTIFACT_CASTING(String value1,String value0,String value2){  return new SM_SYSTEM_MESSAGE(1400313,value1,value0,value2);}  }
class C{  public static BigDecimal availableToCapture(GenericValue billingAccount) throws GenericEntityException {  BigDecimal netBalance=getBillingAccountNetBalance(billingAccount.getDelegator(),billingAccount.getString("billingAccountId"));  BigDecimal accountLimit=billingAccount.getBigDecimal("accountLimit");  return accountLimit.subtract(netBalance).setScale(decimals,rounding);}  }
class C{  @Deprecated public T[] mapState(final FieldODEState<T> state){  return state.getCompleteState();}  }
class C{  public boolean isExplicit(){  return kind.isExplicit();}  }
class C{  public static Map<String,Object> updateAffiliate(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  String partyId=getPartyId(context);  if (UtilValidate.isEmpty(partyId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(ServiceUtil.resource,"serviceUtil.party_id_missing",locale));  }  GenericValue affiliate=null;  try {    affiliate=EntityQuery.use(delegator).from("Affiliate").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_affiliate_information_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  if (affiliate == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_affiliate_information_not_found",locale));  }  affiliate.setNonPKFields(context);  try {    affiliate.store();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_affiliate_information_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  public static boolean hasJellyBeanMr1(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1;}  }
class C{  public double dist(double x,double y){  double distX=this.x - x;  double distY=this.y - y;  return Math.sqrt(distX * distX + distY * distY);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_LEAVE_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1400572,value0);}  }
class C{  @Override public String toString(){  StringBuilder out=new StringBuilder();  for (int i=0; i < byteValuedDiscreteFeatures.length; i++) {    if (out.length() > 0)     out.append(" ");    out.append(byteValuedDiscreteFeatures[i]);  }  for (int i=0; i < shortValuedDiscreteFeatures.length; i++) {    if (out.length() > 0)     out.append(" ");    out.append(shortValuedDiscreteFeatures[i]);  }  for (int i=0; i < continuousFeatures.length; i++) {    if (out.length() > 0)     out.append(" ");    out.append(continuousFeatures[i]);  }  return out.toString();}  }
class C{  public boolean containsKey(short key){  return contains(key);}  }
class C{  public void fill(GL2 gl){  int fSize=this.fixtures.size();  for (int i=0; i < fSize; i++) {    BodyFixture bodyFixture=this.getFixture(i);    Convex convex=bodyFixture.getShape();    RenderUtilities.fillShape(gl,convex);  }}  }
class C{  public SQLQueryTemplatePacket(){  throw new IllegalStateException("This constructor is required for Externalizable and should not be called directly.");}  }
class C{  public BoardEditCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  private void checkForDuplicateImage(int type){  int diff=1;  Uri contentStore=whichContentStore();  Cursor cursor=queryImgDB(contentStore);  int currentNumOfImages=cursor.getCount();  if (type == FILE_URI && this.saveToPhotoAlbum) {    diff=2;  }  if ((currentNumOfImages - numPics) == diff) {    cursor.moveToLast();    int id=Integer.valueOf(cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media._ID)));    if (diff == 2) {      id--;    }    Uri uri=Uri.parse(contentStore + "/" + id);    this.cordova.getActivity().getContentResolver().delete(uri,null,null);    cursor.close();  }}  }
class C{  private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){  Element parameter=document.createElement("parameter");  parameter.appendChild(parentElement);  parameter.setAttribute("package",spec.getPackageName());  parameter.setAttribute("class",spec.getClassName());  parameter.setAttribute("field",spec.getFieldName());}  }
class C{  public Headers headers(){  return rawResponse.headers();}  }
class C{  public S2Polyline(List<S2Point> vertices){  this.numVertices=vertices.size();  this.vertices=vertices.toArray(new S2Point[numVertices]);}  }
class C{  private Point2D.Double create(){  final double abscissa=randomDataGenerator.nextUniform(lo,hi);  final double yModel=slope * abscissa + intercept;  final double ordinate=yModel + randomDataGenerator.nextNormal(0,sigma);  return new Point2D.Double(abscissa,ordinate);}  }
class C{  public void addSystemProperties(String sysProp){  if (sysProp == null)   return;  List<String> listSysProp=ExecutorUtils.tokenize(sysProp,null);  for (  String sp : listSysProp) {    String[] pv=sp.split("=");    _systemProp.put(pv[0],pv[1]);  }}  }
class C{  public boolean isApplicable(){  ViewerBase viewer=(ViewerBase)getViewer();  return viewer.getGraph().getNumberOfNodes() > 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CMD_LOCATION_DESC(int worldId,float x,float y,float z){  return new SM_SYSTEM_MESSAGE(230038,worldId,x,y,z);}  }
class C{  protected void addLanguageVariables(BundleContext context,Language language){  if (languageVariablesNotAdded) {    languageVariablesNotAdded=false;    try {      URL resourceURL=context.getBundle().getResource("conf/Language-ext.properties");      PropertyResourceBundle resourceBundle=new PropertyResourceBundle(resourceURL.openStream());      Map<String,String> languageVariables=new HashMap<String,String>();      for (      String key : resourceBundle.keySet()) {        languageVariables.put(key,resourceBundle.getString(key));      }      addLanguageVariables(languageVariables,language);    } catch (    IOException e) {      Logger.warn(this,"Exception while registering language variables",e);    }  }}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  @Override protected void sendRequest(final SuccessCallback success,final HttpErrorCallback error,final FailureCallback failure,final BoundRequestBuilder requestBuilder,final String timerName,final AtomicLong outstanding){  this.request=requestBuilder.build();}  }
class C{  public void zoom(String axis,String what,Point centerPoint){  final JScrollPane alignmentScrollPane=getAlignmentScrollPane();  final AlignmentPanel alignmentPanel=getAlignmentPanel();  final NamesPanel namesPanel=getNamesPanel();  final ReferencePanel referencePanel=getReferencePanel();  final ConsensusPanel consensusPanel=getConsensusPanel();  final AxisPanel axisPanel=getAxisPanel();  ScrollPaneAdjuster scrollPaneAdjuster=new ScrollPaneAdjuster(alignmentScrollPane,centerPoint);  if (axis.equals("horizontal") || axis.equals("both")) {    if (what.equals("in"))     hScale*=1.2; else     if (what.equals("out"))     hScale/=1.2; else     if (what.equals("reset"))     hScale=DEFAULT_SCALE; else     if (what.equals("selection"))     hScale*=alignmentPanel.getHZoomToSelectionFactor(); else     if (what.equals("fit"))     hScale*=alignmentPanel.getHZoomToFitFactor(); else     if (Basic.isDouble(what))     hScale=Math.max(0.0001,Basic.parseDouble(what));  }  if (axis.equals("vertical") || axis.equals("both")) {    if (what.equals("in"))     vScale*=1.2; else     if (what.equals("out"))     vScale/=1.2; else     if (what.equals("reset"))     vScale=DEFAULT_SCALE; else     if (what.equals("selection"))     vScale*=alignmentPanel.getVZoomToSelectionFactor(); else     if (what.equals("fit"))     vScale*=alignmentPanel.getVZoomToFitFactor(); else     if (Basic.isDouble(what))     vScale=Math.max(0.0001,Basic.parseDouble(what));  }  int maxFontSize=24;  if (hScale > maxFontSize)   hScale=maxFontSize;  if (vScale > maxFontSize)   vScale=maxFontSize;  alignmentPanel.setScale(hScale,vScale);  namesPanel.setScale(0,vScale);  axisPanel.setScale(hScale,0);  referencePanel.setScale(hScale,0);  consensusPanel.setScale(hScale,0);  if (isShowReference())   setShowReference(true);  alignmentScrollPane.revalidate();  if (!what.equals("selection"))   scrollPaneAdjuster.adjust(axis.equals("horizontal") || axis.equals("both"),axis.equals("vertical") || axis.equals("both")); else {    Point aPoint=new Point((int)Math.round(alignmentPanel.getX(selectedBlock.getFirstCol())),(int)Math.round(alignmentPanel.getY(selectedBlock.getFirstRow() - 1)));    alignmentScrollPane.getViewport().setViewPosition(aPoint);  }}  }
class C{  public RectangleArea(ZoneName zoneName,int worldId,Point p1,Point p2,Point p3,Point p4,int minZ,int maxZ){  super(zoneName,worldId,minZ,maxZ);  Rectangle r=new Rectangle();  r.add(p1);  r.add(p2);  r.add(p3);  r.add(p4);  minX=(int)r.getMinX();  maxX=(int)r.getMaxX();  minY=(int)r.getMinY();  maxY=(int)r.getMaxY();}  }
class C{  public static float normalize(float val,float min,float max){  if (Float.isInfinite(val) || Float.isNaN(val)) {    return 0f;  }  float range=max - min;  while (val > max) {    val-=range;  }  while (val < min) {    val+=range;  }  return val;}  }
class C{  public Builder zoomOutTitle(String zoomOutTitle){  this.zoomOutTitle=zoomOutTitle;  return this;}  }
class C{  public static <T>void removeAll(List<T> list,Integer... indexes){  List<Integer> inx=new ArrayList<>(Arrays.asList(indexes));  removeAll(list,inx);}  }
class C{  private static void handleError(Collection errors,File path) throws IOException {  if (errors == null)   throw new IOException("couldn't delete " + path);  errors.add(path);}  }
class C{  private Page testPostPage(Experiment exp,String pageName,boolean allowAssignment,boolean isDeletePage){  Page page=PageFactory.createPage().setName(pageName).setAllowNewAssignment(allowAssignment);  Response response=postPages(exp,page,HttpStatus.SC_CREATED);  Assert.assertEquals(response.getStatusCode(),201);  boolean found=findExperimentByPage(exp,page);  Assert.assertTrue(found);  assertPageTrue(page,exp);  if (isDeletePage) {    response=deletePages(exp,page);    Assert.assertEquals(response.getStatusCode(),HttpStatus.SC_NO_CONTENT);    found=findExperimentByPage(exp,page);    Assert.assertFalse(found);    assertPageFalse(page,exp);  }  return page;}  }
class C{  public static boolean isScreenW(int widthDp){  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();  float screenWidth=displayMetrics.widthPixels / displayMetrics.density;  return screenWidth >= widthDp;}  }
class C{  @Override public void endAttlist(Augmentations augs) throws XNIException {}  }
class C{  protected boolean leftOn(Vector2 a,Vector2 b,Vector2 p){  return Segment.getLocation(p,a,b) >= 0;}  }
class C{  public <R>Plan<R> then(Function9<T1,T2,T3,T4,T5,T6,T7,T8,T9,R> selector){  ObjectHelper.requireNonNull(selector,"selector is null");  return new Plan9<T1,T2,T3,T4,T5,T6,T7,T8,T9,R>(this,selector);}  }
class C{  public TagKeyValueMapConverter(boolean nullIfEmpty,String idKey){  Objects.requireNonNull(idKey);  this.nullIfEmpty=nullIfEmpty;  this.addId=true;  this.idKey=idKey;}  }
class C{  private boolean hasDualWieldingSkills(){  return owner.getSkillList().isSkillPresent(55) || owner.getSkillList().isSkillPresent(171) || owner.getSkillList().isSkillPresent(143)|| owner.getSkillList().isSkillPresent(144)|| owner.getSkillList().isSkillPresent(207);}  }
class C{  @Override public void onPatchPackageCheckFail(File patchFile,boolean isUpgradePatch,int errorCode){  TinkerLog.i(TAG,"patchReporter: package check failed. path:%s, isUpgrade:%b, code:%d",patchFile.getAbsolutePath(),isUpgradePatch,errorCode);  if (errorCode == ShareConstants.ERROR_PACKAGE_CHECK_DEX_META_CORRUPTED || errorCode == ShareConstants.ERROR_PACKAGE_CHECK_LIB_META_CORRUPTED || errorCode == ShareConstants.ERROR_PACKAGE_CHECK_RESOURCE_META_CORRUPTED) {    Tinker.with(context).cleanPatchByVersion(patchFile);  }}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  protected void computeNeedsPatching(){{    Set<UnitBox> boxes=boxToPhiNode.keySet();    if (boxes.isEmpty())     return;  }  MultiMap<Unit,UnitBox> trackedPhiToBoxes=new HashMultiMap<Unit,UnitBox>();  Set<UnitBox> trackedBranchTargets=new HashSet<UnitBox>();  for (  Unit u : this) {    List<UnitBox> boxesToTrack=u.getBoxesPointingToThis();    if (boxesToTrack != null) {      for (      UnitBox boxToTrack : boxesToTrack) {        if (!boxToTrack.isBranchTarget())         trackedPhiToBoxes.put(boxToPhiNode.get(boxToTrack),boxToTrack);      }    }    if (u.fallsThrough() && u.branches())     trackedBranchTargets.addAll(u.getUnitBoxes());    if (!u.fallsThrough() || trackedBranchTargets.contains(u)) {      Iterator<UnitBox> boxesIt=trackedPhiToBoxes.values().iterator();      while (boxesIt.hasNext()) {        SUnitBox box=getSBox(boxesIt.next());        boxToNeedsPatching.put(box,Boolean.FALSE);        box.setUnitChanged(false);      }      trackedPhiToBoxes=new HashMultiMap<Unit,UnitBox>();      continue;    }    Set<UnitBox> boxes=trackedPhiToBoxes.get(u);    if (boxes != null) {      for (      UnitBox ub : boxes) {        SUnitBox box=getSBox(ub);        boxToNeedsPatching.put(box,Boolean.TRUE);        box.setUnitChanged(false);      }      trackedPhiToBoxes.remove(u);    }  }  Iterator<UnitBox> boxesIt=trackedPhiToBoxes.values().iterator();  while (boxesIt.hasNext()) {    SUnitBox box=getSBox(boxesIt.next());    boxToNeedsPatching.put(box,Boolean.FALSE);    box.setUnitChanged(false);  }}  }
class C{  public List<OfferRecommendation> evaluate(List<Offer> offers){  List<OfferRecommendation> recommendations=new ArrayList<OfferRecommendation>();  int offerResourceCount=0;  for (  Offer offer : offers) {    offerResourceCount+=offer.getResourcesCount();    for (    Resource toDestroy : selectUnexpectedResources(expectedPersistentVolumeIds,getPersistentVolumesById(offer))) {      recommendations.add(new DestroyOfferRecommendation(offer,toDestroy));    }  }  int destroyRecommendationCount=recommendations.size();  for (  Offer offer : offers) {    for (    Resource toUnreserve : selectUnexpectedResources(expectedReservedResourceIds,getReservedResourcesById(offer))) {      recommendations.add(new UnreserveOfferRecommendation(offer,toUnreserve));    }  }  logger.info("{} offers with {} resources => {} destroy and {} unreserve operations",offers.size(),offerResourceCount,destroyRecommendationCount,recommendations.size() - destroyRecommendationCount);  return recommendations;}  }
class C{  public int[] keys(){  int[] keys=new int[size()];  int[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  static Object convert(Location location,Class<?> type,Object value){  ensureNotNull(location,value);  if (type == Object.class || type.isInstance(value)) {    return value;  }  String stringValue;  if (value instanceof Doc) {    stringValue=((Doc)value).prettyPrint(Integer.MAX_VALUE);  } else {    stringValue=value.toString();  }  if (type == String.class) {    return stringValue;  }  if (type == Doc.class) {    return Doc.text(stringValue);  }  if (type.isPrimitive()) {    type=Primitives.wrap(type);  }  if (type == Integer.class) {    try {      return Integer.parseInt(stringValue);    } catch (    NumberFormatException e) {      throw new EvalException(location,"Conversion to int32 failed for: %s",stringValue);    }  }  if (type == Long.class) {    try {      return Long.parseLong(stringValue);    } catch (    NumberFormatException e) {      throw new EvalException(location,"Conversion to int64 failed for: %s",stringValue);    }  }  if (type == Boolean.class) {    return Boolean.parseBoolean(stringValue);  }  if (type.isEnum()) {    @SuppressWarnings({"unchecked","rawtypes"}) Class enumType=type;    @SuppressWarnings("unchecked") Object result=Enum.valueOf(enumType,stringValue);    return result;  }  throw new EvalException(location,"Do not know how to make a '%s' from: %s",type.getSimpleName(),stringValue);}  }
class C{  public Quantum(TimeUnit unit,int interval){  this.unit=unit;  this.interval=interval;}  }
class C{  public void rejectDocument(NGramDocument dDoc){  DocumentNGramGraph gGraph=dDoc.getDocumentGraph().intersectGraph(getDocumentGraph());  DocumentNGramHistogram hHistogram=dDoc.getDocumentHistogram().intersectHistogram(getDocumentHistogram());  getDocumentGraph().degrade(gGraph);}  }
class C{  protected void init(AbstractTextEditor editor){  IJavaElement jElem=getJavaElement(editor);  setProj(jElem.getResource().getProject());  setRec(jElem.getResource());}  }
class C{  private NullValue(){}  }
class C{  private ExtractedItemsCollection selectItemByChance(Collection<ExtractedItemsCollection> itemsCollections){  float sumOfChances=calcSumOfChances(itemsCollections);  float currentSum=0f;  float rnd=(float)Rnd.get(0,(int)(sumOfChances - 1) * 1000) / 1000;  ExtractedItemsCollection selectedCollection=null;  for (  ExtractedItemsCollection collection : itemsCollections) {    currentSum+=collection.getChance();    if (rnd < currentSum) {      selectedCollection=collection;      break;    }  }  return selectedCollection;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_WATCH(String value0){  return new SM_SYSTEM_MESSAGE(1390114,value0);}  }
class C{  private int blockHeight(final int blockRow){  return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;}  }
class C{  public Boolean addColumn(Column columnToAdd){  return this.columns.add(columnToAdd);}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MAIL_CASHITEM_GIFT(int itemId){  return new SM_SYSTEM_MESSAGE(1300957,"[item:" + itemId + "]");}  }
class C{  public static void removePreferenceKey(Context context,String key){  getSharedPreferences(context).edit().remove(key).commit();}  }
class C{  public void uploadUpdate(Context context,Account account,OCFile existingFile,Integer behaviour,Boolean forceOverwrite){  uploadUpdate(context,account,new OCFile[]{existingFile},behaviour,forceOverwrite);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyLess(String propertyName,Comparable<?> value){  return property(propertyName,less(value));}  }
class C{  public StrokeTreeItem(){}  }
class C{  private Document parseXMLDocument(InputStream stream) throws IOException, PIRException {  Document doc;  try {    DocumentBuilder dBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    doc=dBuilder.parse(stream);  } catch (  ParserConfigurationException|SAXException e) {    throw new PIRException("Schema parsing error",e);  }  doc.getDocumentElement().normalize();  logger.info("Root element: " + doc.getDocumentElement().getNodeName());  return doc;}  }
class C{  protected static byte[] buildPayload(CommandAction commandAction,byte[] payload){  byte payloadLength=(byte)(payload == null ? 0 : payload.length);  ByteBuffer payloadBuffer=ByteBuffer.allocate(ENVELOPE_SIZE + payloadLength + CRC_SIZE);  payloadBuffer.order(ByteOrder.LITTLE_ENDIAN);  payloadBuffer.put(commandAction.value);  payloadBuffer.put((byte)(ENVELOPE_SIZE + payloadLength));  if (payloadLength != 0) {    payloadBuffer.put(payload != null ? payload : new byte[0]);  }  payloadBuffer.putShort((short)MessageUtils.CRC16CCITT(payloadBuffer.array(),0xffff,0x1021,ENVELOPE_SIZE + payloadLength));  return payloadBuffer.array();}  }
class C{  public void testQueryByActivityIdAndBusinessKeyWithChildren(){  ExecutionQuery query=runtimeService.createExecutionQuery().activityId("receivePayment").processInstanceBusinessKey("BUSINESS-KEY-1",true);  assertEquals(1,query.list().size());  assertEquals(1,query.count());  Execution execution=query.singleResult();  assertNotNull(execution);  assertEquals("receivePayment",execution.getActivityId());}  }
class C{  private void flushAndRelease(){  final int flushResult=SimpleLame.flush(mp3Buffer);  if (flushResult > 0) {    try {      os.write(mp3Buffer,0,flushResult);    } catch (    final IOException e) {      Log.e(TAG,"Lame flush error");    }  }}  }
class C{  public static String byteCountToDisplaySize(BigInteger size){  String displaySize;  if (size.divide(ONE_EB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_EB_BI)) + " EB";  } else   if (size.divide(ONE_PB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_PB_BI)) + " PB";  } else   if (size.divide(ONE_TB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_TB_BI)) + " TB";  } else   if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_GB_BI)) + " GB";  } else   if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_MB_BI)) + " MB";  } else   if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_KB_BI)) + " KB";  } else {    displaySize=String.valueOf(size) + " bytes";  }  return displaySize;}  }
class C{  public void add(String property,JsonElement value){  if (value == null) {    value=JsonNull.INSTANCE;  }  members.put(property,value);}  }
class C{  public static final Vector2 show(Window owner){  ShiftWorldDialog swd=new ShiftWorldDialog(owner);  swd.setLocationRelativeTo(owner);  swd.setVisible(true);  if (!swd.canceled) {    return swd.shiftPanel.getShift();  }  return null;}  }
class C{  public SM_TITLE_INFO(Player player,int titleId){  this.action=3;  this.playerObjId=player.getObjectId();  this.titleId=titleId;}  }
class C{  public GroupsSetCallbackServerSettingsQuery secretKey(String value){  return unsafeParam("secret_key",value);}  }
class C{  public void testSetValueAndroidAttributeValue(){  VirtualFile file=myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_3.xml","res/values-v21/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values-night/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values-port/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_2.xml","res/values-port-v21/styles.xml");  ItemResourceValue item=new ItemResourceValue("colorAccent",true,"?android:attr/colorAccent",false,null);  checkSetValue(file,item,"-night-v21","-v21","-port-v21");}  }
class C{  private void computeBlockSize(){  if (level == 0) {    blockSize=1;  } else {    long product=1;    for (int i=0; i < level; i++) {      product*=2;    }    blockSize=product;  }  if (blockSize > 1) {    nextToTake=randomGenerator.nextLong(blockSize);  }}  }
class C{  private DbFileType(){  super(DbLanguage.INSTANCE);}  }
class C{  protected int toLocal(int xOrY){  Dimension sz=getSize();  int min=getMinimum();  double scale;  if (orientation == VERTICAL) {    scale=(sz.height - (2 * ARROW_SZ)) / (double)(getMaximum() - min);  } else {    scale=(sz.width - (2 * ARROW_SZ)) / (double)(getMaximum() - min);  }  if (direction == LEFTRIGHT_TOPBOTTOM) {    return (int)(((xOrY - ARROW_SZ) / scale) + min + 0.5);  } else {    if (orientation == VERTICAL) {      return (int)((sz.height - xOrY - ARROW_SZ) / scale + min + 0.5);    } else {      return (int)((sz.width - xOrY - ARROW_SZ) / scale + min + 0.5);    }  }}  }
class C{  public boolean hasImageSet(){  return !StringUtils.contains(currentScope.getAttribute(HtmlTags.Attributes.CLASS),"cq-upload-hint");}  }
class C{  public static void drawEntityOnScreen(int posX,int posY,int scale,float mouseX,float mouseY,EntityLivingBase ent){  GlStateManager.enableColorMaterial();  GlStateManager.pushMatrix();  GlStateManager.translate((float)posX,(float)posY,50.0F);  GlStateManager.scale((float)(-scale),(float)scale,(float)scale);  GlStateManager.rotate(180.0F,0.0F,0.0F,1.0F);  float f=ent.renderYawOffset;  float f1=ent.rotationYaw;  float f2=ent.rotationPitch;  float f3=ent.prevRotationYawHead;  float f4=ent.rotationYawHead;  GlStateManager.rotate(135.0F,0.0F,1.0F,0.0F);  RenderHelper.enableStandardItemLighting();  GlStateManager.rotate(-135.0F,0.0F,1.0F,0.0F);  GlStateManager.rotate(-((float)Math.atan((double)(mouseY / 40.0F))) * 20.0F,1.0F,0.0F,0.0F);  ent.renderYawOffset=(float)Math.atan((double)(mouseX / 40.0F)) * 20.0F;  ent.rotationYaw=(float)Math.atan((double)(mouseX / 40.0F)) * 40.0F;  ent.rotationPitch=-((float)Math.atan((double)(mouseY / 40.0F))) * 20.0F;  ent.rotationYawHead=ent.rotationYaw;  ent.prevRotationYawHead=ent.rotationYaw;  GlStateManager.translate(0.0F,0.0F,0.0F);  RenderManager rendermanager=Minecraft.getMinecraft().getRenderManager();  rendermanager.setPlayerViewY(180.0F);  rendermanager.setRenderShadow(false);  rendermanager.doRenderEntity(ent,0.0D,0.0D,0.0D,0.0F,1.0F,false);  rendermanager.setRenderShadow(true);  ent.renderYawOffset=f;  ent.rotationYaw=f1;  ent.rotationPitch=f2;  ent.prevRotationYawHead=f3;  ent.rotationYawHead=f4;  GlStateManager.popMatrix();  RenderHelper.disableStandardItemLighting();  GlStateManager.disableRescaleNormal();  GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);  GlStateManager.disableTexture2D();  GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);}  }
class C{  protected void writePixels() throws IOException {  Encoder encoder=new Encoder(width,height,indexedPixels,colorDepth);  encoder.encode(out);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_MAGIC_PARTY_ENEMY(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1230221,skilltarget,skillcaster);}  }
class C{  public static JavaRDD<List<Writable>> zeromeanUnitVariance(Schema schema,JavaRDD<List<Writable>> data,List<String> skipColumns){  DataFrame frame=DataFrames.toDataFrame(schema,data);  return DataFrames.toRecords(zeromeanUnitVariance(frame,skipColumns)).getSecond();}  }
class C{  public Array2DRowRealMatrix(){}  }
class C{  public TransformProcess build(){  return new TransformProcess(this);}  }
class C{  private static TreeMap GetDataFromFile(String sDataFile,TreeMap tmTheme,int iThemeFieldIndex,int iSysIDFieldIndex,int iValFieldIndex,String sCategory,boolean hasHeader){  TreeMap hmSystem;  Double dVal;  try {    FileReader frIn=new FileReader(sDataFile);    BufferedReader bfIn=new BufferedReader(frIn);    String sLine;    if (hasHeader)     sLine=bfIn.readLine();    while ((sLine=bfIn.readLine()) != null) {      String[] saArrayData=sLine.split("\t");      if (saArrayData.length < Math.max(iThemeFieldIndex,Math.max(iSysIDFieldIndex,iValFieldIndex))) {        System.err.println("Line '" + sLine + "' is malformed. Ignoring...");        continue;      }      String sTheme=(iThemeFieldIndex >= 0) ? saArrayData[iThemeFieldIndex] : "";      String sSysID=saArrayData[iSysIDFieldIndex];      try {        dVal=Double.valueOf(saArrayData[iValFieldIndex]);      } catch (      Exception nfe) {        System.err.println("Could not translate " + sLine + "("+ iValFieldIndex+ ") to double:"+ nfe.getMessage());        nfe.printStackTrace(System.err);        continue;      }      if (!tmTheme.containsKey(sTheme)) {        hmSystem=new TreeMap();        tmTheme.put(sTheme,hmSystem);      } else {        hmSystem=(TreeMap)tmTheme.get(sTheme);      }      Distribution dDist;      if (!hmSystem.containsKey(sSysID)) {        dDist=new Distribution();        hmSystem.put(sSysID,dDist);      } else {        dDist=(Distribution)hmSystem.get(sSysID);      }      if (sCategory != null)       dDist.setValue(sCategory,dVal); else       dDist.setValue(dDist.asTreeMap().size(),dVal);    }  } catch (  IOException ioe) {    System.err.println("IO Problem:" + ioe.getMessage());    ioe.printStackTrace(System.err);    return null;  }  return tmTheme;}  }
class C{  public boolean isDirty(){  return dirty;}  }
class C{  public SiteAdminActionBar expandDropDown(SiteAdminButtons button){  actions.moveToElement(getButton(button)).perform();  actions.moveByOffset(30,0).perform();  actions.click().perform();  return this;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public void addString(String word,Tuple t){  TrieLeaf leaf=new TrieLeaf(word,t);  addLeaf(root,leaf,0);}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void put(String name,Object value){  name2data.get(name)[2]=value;}  }
class C{  public static boolean install(Entity e) throws Exception {  if (e == null) {    throw new Exception("invalid repo entity");  }  String url=e.getUrl();  String temp=Language.getLanguage().format(System.currentTimeMillis(),"yyyyMMdd");  String root=Model.HOME + "/modules/" + temp+ "/";  try {    ZipInputStream in=new ZipInputStream(e.getInputStream());    ZipEntry z=in.getNextEntry();    byte[] bb=new byte[4 * 1024];    while (z != null) {      File f=new File(root + z.getName());      if (z.isDirectory()) {        f.mkdirs();      } else {        if (!f.exists()) {          f.getParentFile().mkdirs();        }        FileOutputStream out=new FileOutputStream(f);        int len=in.read(bb);        while (len > 0) {          out.write(bb,0,len);          len=in.read(bb);        }        out.close();      }      z=in.getNextEntry();    }    Module m=Module.load(temp);    File f=new File(root);    File dest=new File(Model.HOME + File.separator + "modules"+ File.separator+ m.getName());    if (dest.exists()) {      delete(dest);    }    Module m1=Module.load(m.getName());    if (m1 != null) {      String repo=m1.getRepo();      if (!X.isEmpty(repo)) {        log.debug("old.repo=" + repo + ", new.repo="+ url);        Entity e1=Repo.load(repo);        if (e1 != null && !X.isSame(e1.getId(),e.getId())) {          e1.delete();        }      }    }    Jar.reset(m.getName());    m.merge();    f.renameTo(dest);    Module.init(m);    m.set(m.getName() + "_repo",url);    m.store();    return true;  }  finally {    delete(new File(root));  }}  }
class C{  public void rollback() throws GenericDataSourceException {  if (_connection == null) {    return;  }  if (Debug.verboseOn())   Debug.logVerbose("SQLProcessor:rollback() _manualTX=" + _manualTX,module);  try {    if (_manualTX) {      _connection.rollback();      if (Debug.verboseOn())       Debug.logVerbose("SQLProcessor:rollback() : _manualTX=" + _manualTX,module);    } else {      try {        TransactionUtil.setRollbackOnly("rollback called in Entity Engine SQLProcessor",new Exception("Current Location Stack"));        if (Debug.verboseOn())         Debug.logVerbose("SQLProcessor:rollback() : _manualTX=" + _manualTX,module);      } catch (      GenericTransactionException e) {        Debug.logError(e,"Error setting rollback only",module);        throw new GenericDataSourceException("Error setting rollback only",e);      }    }  } catch (  SQLException sqle2) {    Debug.logWarning("[SQLProcessor.rollback]: SQL Exception while rolling back insert. Error was:" + sqle2,module);    Debug.logWarning(sqle2,module);  }}  }
class C{  public FriendsEditQuery(VkApiClient client,UserActor actor,int userId){  super(client,"friends.edit",OkResponse.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  private void checkScopedSetBindings(Collection<NewDependencyInfo> dependencyInfos,NewScopeCalculator scopeCalculator){  Set<NewBindingKey> explicitScopedKeys=scopeCalculator.getExplicitScopedKeys();  for (  NewDependencyInfo info : dependencyInfos) {    if (info.isSet() && explicitScopedKeys.contains(info.getDependant())) {      allRecoverableErrors.add(String.format("Set binding should not be scoped. Binding: %s",info));    }  }}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  @Override public List<Class<? extends ConfigAspect>> mergeDependencies(){  return ImmutableList.of();}  }
class C{  public GroupsGetByIdQuery(VkApiClient client,Actor actor){  super(client,"groups.getById",Utils.buildParametrizedType(List.class,GroupFull.class));  accessToken(actor.getAccessToken());}  }
class C{  public Action(String type){  this(type,new Object[0]);}  }
class C{  public void mergeSamples(Collection<String> samples,String newName){  if (sampleNames.contains(newName))   return;  Set<Integer> pids=new HashSet<>();  BlastMode mode=null;  for (  String name : samples) {    int pid=Basic.getIndex(name,sampleNames);    if (pid == -1) {      System.err.println("No such sample: " + name);      return;    }    pids.add(pid);    if (mode == null) {      mode=(pid < blastModes.size() ? blastModes.get(pid) : BlastMode.Unknown);    } else     if (mode != BlastMode.Unknown && blastModes.get(pid) != mode)     mode=BlastMode.Unknown;  }  int reads=0;  for (  int pid : pids) {    reads+=sampleSizes.get(pid);  }  sampleSizes.add(reads);  sampleNames.add(newName);  sampleUIds.add(System.currentTimeMillis());  blastModes.add(mode);  int tarId=Basic.getIndex(newName,sampleNames);  for (  Map<Integer,Integer[]> class2counts : classification2class2counts.values()) {    for (    Integer classId : class2counts.keySet()) {      Integer[] counts=class2counts.get(classId);      if (counts != null) {        int newLength=Math.max(counts.length + 1,tarId + 1);        Integer[] newCounts=new Integer[newLength];        System.arraycopy(counts,0,newCounts,0,counts.length);        int sum=0;        for (        int pid : pids) {          if (pid < counts.length && counts[pid] != null)           sum+=counts[pid];        }        newCounts[tarId]=sum;        class2counts.put(classId,newCounts);      }    }  }  for (  Integer size : sampleSizes) {    if (size != null)     totalReads+=size;  }}  }
class C{  public boolean isValid(){  return this.symbolData.isValidSymbol();}  }
class C{  public boolean contains(String aString){  return values.indexOf(dictionaryMap().get(aString)) >= 0;}  }
class C{  public static String removeLineEnds(String text){  return text.replaceAll("[\r\n]+"," ").trim();}  }
class C{  public int provideDumpInterval(){  return provideBlockThreshold();}  }
class C{  public <V extends Object,C extends RTSpan<V>>void applyEffect(Effect<V,C> effect,V value){  if (mUseRTFormatting && !mIsSelectionChanging && !mIsSaving) {    Spannable oldSpannable=mIgnoreTextChanges ? null : cloneSpannable();    effect.applyToSelection(this,value);synchronized (this) {      if (mListener != null && !mIgnoreTextChanges) {        Spannable newSpannable=cloneSpannable();        mListener.onTextChanged(this,oldSpannable,newSpannable,getSelectionStart(),getSelectionEnd(),getSelectionStart(),getSelectionEnd());      }      mLayoutChanged=true;    }  }}  }
class C{  public void appendGroup(Group group) throws ObjectAlreadyHasException {  assertNotContains(group);  groups.add(group.getName());}  }
class C{  private double[] guessAOmega(WeightedObservedPoint[] observations){  final double[] aOmega=new double[2];  double sx2=0;  double sy2=0;  double sxy=0;  double sxz=0;  double syz=0;  double currentX=observations[0].getX();  double currentY=observations[0].getY();  double f2Integral=0;  double fPrime2Integral=0;  final double startX=currentX;  for (int i=1; i < observations.length; ++i) {    final double previousX=currentX;    final double previousY=currentY;    currentX=observations[i].getX();    currentY=observations[i].getY();    final double dx=currentX - previousX;    final double dy=currentY - previousY;    final double f2StepIntegral=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;    final double fPrime2StepIntegral=dy * dy / dx;    final double x=currentX - startX;    f2Integral+=f2StepIntegral;    fPrime2Integral+=fPrime2StepIntegral;    sx2+=x * x;    sy2+=f2Integral * f2Integral;    sxy+=x * f2Integral;    sxz+=x * fPrime2Integral;    syz+=f2Integral * fPrime2Integral;  }  double c1=sy2 * sxz - sxy * syz;  double c2=sxy * sxz - sx2 * syz;  double c3=sx2 * sy2 - sxy * sxy;  if ((c1 / c2 < 0) || (c2 / c3 < 0)) {    final int last=observations.length - 1;    final double xRange=observations[last].getX() - observations[0].getX();    if (xRange == 0) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.ZERO_NOT_ALLOWED);    }    aOmega[1]=2 * Math.PI / xRange;    double yMin=Double.POSITIVE_INFINITY;    double yMax=Double.NEGATIVE_INFINITY;    for (int i=1; i < observations.length; ++i) {      final double y=observations[i].getY();      if (y < yMin) {        yMin=y;      }      if (y > yMax) {        yMax=y;      }    }    aOmega[0]=0.5 * (yMax - yMin);  } else {    if (c2 == 0) {      throw new MathIllegalStateException(LocalizedCoreFormats.ZERO_DENOMINATOR);    }    aOmega[0]=FastMath.sqrt(c1 / c2);    aOmega[1]=FastMath.sqrt(c2 / c3);  }  return aOmega;}  }
class C{  private void deliverResultToReceiver(int resultCode,String message,Address address){  try {    Bundle bundle=new Bundle();    bundle.putString(AppUtils.LocationConstants.RESULT_DATA_KEY,message);    bundle.putString(AppUtils.LocationConstants.LOCATION_DATA_AREA,address.getSubLocality());    bundle.putString(AppUtils.LocationConstants.LOCATION_DATA_CITY,address.getLocality());    bundle.putString(AppUtils.LocationConstants.LOCATION_DATA_STREET,address.getAddressLine(0));    mReceiver.send(resultCode,bundle);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Series series(Task... tasks){  return new Series(this.executor_,tasks);}  }
class C{  public void unRegisterListener(){  mFCMListener=null;}  }
class C{  public BoardGetTopicsQueryWithExtended topicIds(Integer... value){  return unsafeParam("topic_ids",value);}  }
class C{  private void populateAttributeComboBox(){  if (attributeComboBox != null) {    setPopulatingComboBox(true);    Object selectedItem=model.getSelectedItem();    model.removeAllElements();    model.addElement("");    if (attributeNameList != null) {      for (      String attribute : attributeNameList) {        model.addElement(attribute);      }    }    attributeComboBox.setModel(model);    model.setSelectedItem(selectedItem);    setPopulatingComboBox(false);  }}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  put(d);  return this;}  }
class C{  public void sendFeedback(FeedbackRequest request) throws ClarifaiException {  new ClarifaiRequester<Void>(connectionFactory,credentialManager,POST,"/feedback",Void.class,maxAttempts).execute(request);}  }
class C{  public int generateNextWord(Vector vCurrentText){  int iTopic=Model.generateNextLeafTopic();  Distribution dWordsAtSelectedTopic;  if (hmDistroPerTopic.containsKey(iTopic)) {    dWordsAtSelectedTopic=hmDistroPerTopic.get(iTopic);  } else {    dWordsAtSelectedTopic=Model.getTopicTermDistro(Model.getNumOfLevels(),iTopic);    hmDistroPerTopic.put(iTopic,dWordsAtSelectedTopic);  }  Distribution dOutputDistro=new Distribution();  Iterator iWords=dWordsAtSelectedTopic.asTreeMap().keySet().iterator();  while (iWords.hasNext()) {    Object oWord=iWords.next();    vCurrentText.add(oWord);    double dGram=Evaluator.getGrammaticallity(vCurrentText);    vCurrentText.remove(vCurrentText.size() - 1);    if (dGram != 0)     dOutputDistro.setValue(oWord,dWordsAtSelectedTopic.getValue(oWord) * dGram);  }  if (dOutputDistro.asTreeMap().size() == 0)   return ((Integer)dWordsAtSelectedTopic.getNextResult()).intValue();  return ((Integer)dOutputDistro.getNextResult()).intValue();}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void fling(long time,float x,float y,float velocityX,float velocityY){  if (mDragLock != DragLock.SCROLL && mDiscardingTab != null) {    float velocity=mCurrentMode == Orientation.PORTRAIT ? velocityX : velocityY;    float maxDelta=getDiscardRange() * DISCARD_FLING_MAX_CONTRIBUTION;    float deltaAmount=MathUtils.clamp(velocity * DISCARD_FLING_DT,-maxDelta,maxDelta);    mDiscardingTab.addToDiscardAmount(deltaAmount);  } else   if (mOverviewAnimationType == OverviewAnimationType.NONE && mScroller.isFinished() && mOverScrollOffset == 0 && getTabIndexAtPositon(x,y) >= 0) {    float velocity=mCurrentMode == Orientation.PORTRAIT ? velocityY : (LocalizationUtils.isLayoutRtl() ? -velocityX : velocityX);    mScroller.fling(0,(int)mScrollTarget,0,(int)velocity,0,0,(int)getMinScroll(false),(int)getMaxScroll(false),0,(int)((velocity > 0 ? mMaxOverScroll : mMaxUnderScroll) * MAX_OVER_FLING_SCALE),time);    setScrollTarget(mScroller.getFinalY(),false);  }}  }
class C{  public void shutdown(){  final long begin=System.currentTimeMillis();  log.info("ThreadPoolManager: Shutting down.");  log.info("\t... executing " + getTaskCount(scheduledPool) + " scheduled tasks.");  log.info("\t... executing " + getTaskCount(instantPool) + " instant tasks.");  log.info("\t... executing " + getTaskCount(longRunningPool) + " long running tasks.");  log.info("\t... " + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + " forking tasks left.");  scheduledPool.shutdown();  instantPool.shutdown();  longRunningPool.shutdown();  workStealingPool.shutdown();  boolean success=false;  try {    success|=awaitTermination(5000);    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);    success|=awaitTermination(10000);  } catch (  InterruptedException e) {    e.printStackTrace();  }  log.info("\t... success: " + success + " in "+ (System.currentTimeMillis() - begin)+ " msec.");  log.info("\t... " + getTaskCount(scheduledPool) + " scheduled tasks left.");  log.info("\t... " + getTaskCount(instantPool) + " instant tasks left.");  log.info("\t... " + getTaskCount(longRunningPool) + " long running tasks left.");  log.info("\t... " + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + " forking tasks left.");  workStealingPool.shutdownNow();}  }
class C{  private synchronized void closeOutputStreamQuietly(){  if (!mClosed) {    try {      mOutputStream.close();      reportDecodedSizeIfApplicable();    } catch (    IOException e) {      CLog.writeToConsole(mNetworkPeerManager,Console.MessageLevel.ERROR,Console.MessageSource.NETWORK,"Could not close the output stream" + e);    } finally {      mClosed=true;    }  }}  }
class C{  public void remove(){  bobcatWait.withTimeout(Timeouts.BIG).until(null,2);}  }
class C{  NewProjectDescriptor withMinSdk(@NotNull String minSdk){  myMinSdk=minSdk;  return this;}  }
class C{  public ClearModifiers(ClearModifiers... modifiers){  super(modifiers);}  }
class C{  public int rank(){  return new SingularValueDecomposition(this).rank();}  }
class C{  public static boolean isFileOlder(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() < timeMillis;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"WEEK_FORE_CAST\" ("+ "\"AREAID\" TEXT,"+ "\"WEATHER_DATE\" INTEGER,"+ "\"WEATHER_CONDITION_START\" TEXT,"+ "\"WEATHER_CONDITION_END\" TEXT,"+ "\"TEMP_H\" INTEGER,"+ "\"TEMP_L\" INTEGER,"+ "\"FX\" TEXT,"+ "\"FJ\" TEXT,"+ "\"RAIN_PER_CENT\" INTEGER);");}  }
class C{  public boolean contains(Node n){  return oldSet.contains(n) || newSet.contains(n);}  }
class C{  private static boolean verifyXML(String fileName){  SchemaFactory sf=SchemaFactory.newInstance(W3C_XML_SCHEMA);  Source xsdFile=new StreamSource(new File(XSD_FILE_PATH));  Source xmlFile=new StreamSource(new File(fileName));  boolean validXML=false;  try {    Schema schema=sf.newSchema(xsdFile);    Validator validator=schema.newValidator();    try {      validator.validate(xmlFile);      validXML=true;    } catch (    IOException e) {      e.printStackTrace();    }    if (!validXML) {      new IOException("File isn't  valid against the xsd");    }  } catch (  SAXException e) {    e.printStackTrace();  }  return validXML;}  }
class C{  private static Entry[] attributesFor(){  final Entry info=new ServiceInfo("Transaction Manager","Sun Microsystems, Inc.","Sun Microsystems, Inc.",com.sun.jini.constants.VersionConstants.SERVER_VERSION,"","");  final Entry type=new com.sun.jini.lookup.entry.BasicServiceType("Transaction Manager");  return new Entry[]{info,type};}  }
class C{  public ZoomControl(int mouseButton){  button=mouseButton;}  }
class C{  public void rebuildLogFile(){  try {    deleteLogFiles();    File logFile=new File(logDirectory,DEFAULT_LOG_FILE);    IoChannel fileChannel=IoAllocator.newIoChannel(logFile);    openFiles.put(DEFAULT_LOG_FILE,fileChannel);    logFile=new File(logDirectory,"vanilladddb.log");    fileChannel=IoAllocator.newIoChannel(logFile);    openFiles.put("vanilladddb.log",fileChannel);  } catch (  IOException e) {    throw new RuntimeException("rebuild log file fail");  }}  }
class C{  public AudioSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static void d(String tag,String msg){  if (LOG_ENABLE && Log.isLoggable(tag,Log.DEBUG)) {    Log.d(tag,buildMsg(msg));  }}  }
class C{  public JavaRDD<LabeledContext> extract(JavaRDD<Row> dataset){  return dataset.flatMap(new RowToContextFunction());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMPOUNDED_ITEM_DECOMPOUND_SUCCESS(int i){  return new SM_SYSTEM_MESSAGE(1400335,new DescriptionId(i));}  }
class C{  public void detach(){  mEffect.removeParameter(mParameter);  mEffect=null;}  }
class C{  public Object onMessage(String id,Object data){  return null;}  }
class C{  public JimpleAST(InputStream aJIS) throws ParserException, LexerException, IOException {  Parser p=new Parser(new Lexer(new PushbackReader(new BufferedReader(new InputStreamReader(aJIS)),1024)));  mTree=p.parse();}  }
class C{  public Object nextContent() throws JSONException {  char c;  StringBuilder sb;  do {    c=next();  } while (Character.isWhitespace(c));  if (c == 0) {    return null;  }  if (c == '<') {    return XML.LT;  }  sb=new StringBuilder();  for (; ; ) {    if (c == '<' || c == 0) {      back();      return sb.toString().trim();    }    if (c == '&') {      sb.append(nextEntity(c));    } else {      sb.append(c);    }    c=next();  }}  }
class C{  static boolean isPossibleFP(String val){  final int length=val.length();  for (int i=0; i < length; ++i) {    char c=val.charAt(i);    if (!(c >= '0' && c <= '9' || c == '.' || c == '-' || c == '+' || c == 'E' || c == 'e')) {      return false;    }  }  return true;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public void validate(){  Preconditions.checkArgument(getBKClientReadTimeout() * 1000 > getReadLACLongPollTimeout(),"Invalid timeout configuration : bkcReadTimeoutSeconds (" + getBKClientReadTimeout() + ") should be longer than readLACLongPollTimeout ("+ getReadLACLongPollTimeout()+ ")");}  }
class C{  private static String parseRefSeqId(String aLine){  int pos=aLine.indexOf(IdParser.REFSEQ_TAG);  if (pos != -1) {    int start=pos + IdParser.REFSEQ_TAG.length();    int end=start;    while (end < aLine.length() && (Character.isLetterOrDigit(aLine.charAt(end)) || aLine.charAt(end) == '_'))     end++;    if (end > start)     return aLine.substring(start,end);  }  return null;}  }
class C{  public String makeLinkAutoFull(HttpServletRequest request,HttpServletResponse response,String url,Boolean absPath,Boolean interWebapp,String webSiteId,Boolean controller){  return makeLinkAuto(request,response,url,absPath,interWebapp,webSiteId,controller,true,null,null);}  }
class C{  @CheckReturnValue public AddCmd force(){  return new AddCmd(true,all,files);}  }
class C{  @ManagedOperation(description="Stop this JMS container") public void stopContainer(String processName){  LOGGER.info("Stopping JMS container for Process " + processName);  jmsContainers.get(processCache.getProcessId(processName)).stop();}  }
class C{  public boolean isPendingOMADownload(long downloadId){  return mPendingOMADownloads.get(downloadId) != null;}  }
class C{  @Override public void characters(XMLString text,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>characters(): " + text.toString());  }  if (!fDeferNodeExpansion) {    if (fFilterReject) {      return;    }    if (fInCDATASection && fCreateCDATANodes) {      if (fCurrentCDATASection == null) {        fCurrentCDATASection=fDocument.createCDATASection(text.toString());        fCurrentNode.appendChild(fCurrentCDATASection);        fCurrentNode=fCurrentCDATASection;      } else {        fCurrentCDATASection.appendData(text.toString());      }    } else     if (!fInDTD) {      if (text.length == 0) {        return;      }      Node child=fCurrentNode.getLastChild();      if (child != null && child.getNodeType() == Node.TEXT_NODE) {        if (fFirstChunk) {          if (fDocumentImpl != null) {            fStringBuffer.append(((TextImpl)child).removeData());          } else {            fStringBuffer.append(((Text)child).getData());            child.setNodeValue(null);          }          fFirstChunk=false;        }        if (text.length > 0) {          fStringBuffer.append(text.ch,text.offset,text.length);        }      } else {        fFirstChunk=true;        Text textNode=fDocument.createTextNode(text.toString());        fCurrentNode.appendChild(textNode);      }    }  } else {    if (fInCDATASection && fCreateCDATANodes) {      if (fCurrentCDATASectionIndex == -1) {        int cs=fDeferredDocumentImpl.createDeferredCDATASection(text.toString());        fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,cs);        fCurrentCDATASectionIndex=cs;        fCurrentNodeIndex=cs;      } else {        int txt=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),false);        fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);      }    } else     if (!fInDTD) {      if (text.length == 0) {        return;      }      String value=text.toString();      int txt=fDeferredDocumentImpl.createDeferredTextNode(value,false);      fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);    }  }}  }
class C{  public void removeCommandClass(CommandClass commandClass){  if (supportedCommandClasses.containsKey(commandClass)) {    supportedCommandClasses.remove(commandClass);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200931,skilltarget);}  }
class C{  public static final Vertex locateVertexInGraph(UniqueVertexGraph gGraph,Vertex vToFind){  return gGraph.locateVertex(vToFind);}  }
class C{  GSPingManager(){  super("GSPingManager:" + spaceProxy.getClass().getName() + ":"+ System.currentTimeMillis());  setDaemon(true);  start();}  }
class C{  public NotIsolatedAnalysis(DirectedGraph<Unit> dg,LatestComputation latest,Map<Unit,EquivalentValue> equivRhsMap,BoundedFlowSet<EquivalentValue> set){  super(dg);  this.set=set;  unitToGen=equivRhsMap;  unitToLatest=latest;  doAnalysis();}  }
class C{  private ArrayList<SootClass> createExceptions(polyglot.ast.ProcedureDecl procedure){  ArrayList<SootClass> exceptions=new ArrayList<SootClass>();  Iterator throwsIt=procedure.throwTypes().iterator();  while (throwsIt.hasNext()) {    polyglot.types.Type throwType=((polyglot.ast.TypeNode)throwsIt.next()).type();    exceptions.add(((soot.RefType)Util.getSootType(throwType)).getSootClass());  }  return exceptions;}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(PearsonDistance.PEARSON_DISTANCE);}  }
class C{  public AdsGetCampaignsQuery(VkApiClient client,UserActor actor,int accountId){  super(client,"ads.getCampaigns",Utils.buildParametrizedType(List.class,Campaign.class));  accessToken(actor.getAccessToken());  accountId(accountId);}  }
class C{  @SuppressWarnings("unchecked") public static <R>JoinObservable<R> when(Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,Plan<R> p5,Plan<R> p6,Plan<R> p7){  return from(JoinPatterns.when(p1,p2,p3,p4,p5,p6,p7));}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  public BaseSymbol(){  super();}  }
class C{  public static ExperimentDetailsFragment newInstance(String experimentId,boolean createTaskStack){  ExperimentDetailsFragment fragment=new ExperimentDetailsFragment();  Bundle args=new Bundle();  args.putString(ARG_EXPERIMENT_ID,experimentId);  args.putBoolean(ARG_CREATE_TASK,createTaskStack);  fragment.setArguments(args);  return fragment;}  }
class C{  @SuppressWarnings("unchecked") public CacheV2RequestHandler(DataRequestHandler next,@NotNull DataCache<?> dataCache,QuerySigningService<?> querySigningService,ObjectMapper mapper){  super(mapper);  this.next=next;  this.dataCache=(TupleDataCache<String,Long,String>)dataCache;  this.querySigningService=(QuerySigningService<Long>)querySigningService;}  }
class C{  public AemRichText typeNewLine(){  return type("\n");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_CAN_NOT_INVITE_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1300195,value0);}  }
class C{  public static void show(Window owner,Joint joint){  EditJointDialog dialog=new EditJointDialog(owner,joint);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    dialog.pnlJoint.setJoint(joint);  }}  }
class C{  public boolean hasSimilarityMatrix(String featureName){  return hasSimilarityMatrix(this.getFeatureIndex(featureName));}  }
class C{  public MaxCountExceededException(Localizable specific,Number max,Object... args){  super(specific,max,args);  this.max=max;}  }
class C{  public ThreadDesc(ThreadGroup group,boolean daemon,int priority){  if (priority < Thread.MIN_PRIORITY || priority > Thread.MAX_PRIORITY) {    throw new IllegalArgumentException("bad value for priority:" + priority);  }  this.group=group;  this.daemon=daemon;  this.priority=priority;}  }
class C{  public ControlLayersOptions build(){  ControlLayersOptions options=new ControlLayersOptions();  options.position=this.position;  options.collapsed=this.collapsed;  options.autoZIndex=this.autoZIndex;  return options;}  }
class C{  public void onDrawScrollBar(Canvas canvas,int range,int offset,int extent,int alpha){  float strokeRadius=mPaint.getStrokeWidth() / 2;  float extraAngle=0;  float offsetY=mOffset.y;  if (offsetY > 0) {    float targetHeight=mScreenRadius - offsetY - strokeRadius;    double targetRadians=-Math.asin(targetHeight / mScreenRadius);    float targetAngle=(float)(360 * targetRadians / Math.PI / 2);    extraAngle=MathUtils.constrain(targetAngle - START_ANGLE,0f,-START_ANGLE);  } else   if (offsetY < 0) {    float targetHeight=mScreenRadius + offsetY - strokeRadius;    double targetRadians=Math.asin(targetHeight / mScreenRadius);    float targetAngle=(float)(360 * targetRadians / Math.PI / 2);    extraAngle=MathUtils.constrain(START_ANGLE + SWEEP_ANGLE - targetAngle,0f,START_ANGLE + SWEEP_ANGLE);  }  float startAngle=MathUtils.constrain(START_ANGLE + extraAngle,START_ANGLE,0);  float sweepAngle=MathUtils.constrain(SWEEP_ANGLE - 2 * extraAngle,0,SWEEP_ANGLE);  float minSweep=MIN_SWEEP * sweepAngle / SWEEP_ANGLE;  float thumbSweep=(extent * sweepAngle) / range;  thumbSweep=MathUtils.constrain(thumbSweep,minSweep,sweepAngle);  float thumbRotation=(sweepAngle - thumbSweep) * (offset) / (range - extent);  float opacity=alpha / 255f;  if (DesignConfig.DEBUG_SCROLLBAR && offsetY != 0) {    Log.v(TAG,"offset " + offsetY + ", extra "+ extraAngle+ ", scrollbar ("+ startAngle+ ","+ sweepAngle+ "), with opacity "+ opacity);  }  canvas.save();  canvas.translate(-mOffset.x,-mOffset.y);  if (mIsRound) {    setColorWithOpacity(mPaint,mBgColor,opacity);    canvas.drawArc(mOval,startAngle,sweepAngle,false,mPaint);    setColorWithOpacity(mPaint,mSweepColor,opacity);    canvas.rotate(thumbRotation,mOval.centerX(),mOval.centerY());    canvas.drawArc(mOval,startAngle,thumbSweep,false,mPaint);  } else {    float x=mOval.right;    setColorWithOpacity(mPaint,mBgColor,opacity);    float startY=getY(startAngle,x);    float length=getY(startAngle + sweepAngle,x) - startY;    canvas.drawLine(x,startY,x,startY + length,mPaint);    setColorWithOpacity(mPaint,mSweepColor,opacity);    float start=startY + (thumbRotation / sweepAngle) * length;    float end=startY + ((thumbRotation + thumbSweep) / sweepAngle) * length;    canvas.drawLine(x,start,x,end,mPaint);  }  canvas.restore();}  }
class C{  protected void succeeded(Description description){}  }
class C{  private void initWidget(View v){  TextView content=(TextView)v.findViewById(R.id.dialog_rate_limit_content);  DisplayUtils.setTypeface(getActivity(),content);  v.findViewById(R.id.dialog_rate_limit_button).setOnClickListener(this);}  }
class C{  public ExecutorRemotingTask(){}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public JValueSlider(String title,int min,int max,int value){  this(title,new Integer(min),new Integer(max),new Integer(value));  m_smin=min;  m_srange=max - min;  m_slider.setMinimum(min);  m_slider.setMaximum(max);  setValue(new Integer(value));}  }
class C{  public void pokePocketCrafting(){}  }
class C{  private void shoot_Missile(int dir){  DecimalFormat df=new DecimalFormat("#.##");  if (rnd.nextInt(10) > 8) {    mnt.sendMessageInTheRoomPeople(Settings._ANSWER_PANGAPNG_ENEMY_ATTACK + "",df.format(this.position.x) + "",df.format(this.position.y) + "",dir + "",Settings.sPangPangEnemyName + Enemy_Missile_ID);    Enemy_Missile_ID++;  }}  }
class C{  public AccelListener(){  this.x=0;  this.y=0;  this.z=0;  this.timestamp=0;  this.setStatus(AccelListener.STOPPED);}  }
class C{  protected MarketGetCommentsQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  @RequestMapping(value="/pets",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Pet> updatePet(@RequestBody Pet pet) throws URISyntaxException {  log.debug("REST request to update Pet : {}",pet);  if (pet.getPetId() == null) {    return createPet(pet);  }  Pet result=petService.save(pet);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("pet",pet.getPetId().toString())).body(result);}  }
class C{  public int size(){  return v.length;}  }
class C{  public static float[] evaluate(String automaticFileName,String correctFileName){  List<String> s1=Arrays.asList(UTF8FileIO.readLines(automaticFileName));  List<String> s2=Arrays.asList(UTF8FileIO.readLines(correctFileName));  return evaluate(s1,s2);}  }
class C{  @OnClick(R.id.fab) public void onClick(){  appbar.setExpanded(true,false);  SharedPreferences.Editor editor=sharedPreferences.edit();switch (getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK) {case Configuration.UI_MODE_NIGHT_YES:    editor.putBoolean(SHARED_PREF_DAY,true);  break;case Configuration.UI_MODE_NIGHT_NO:editor.putBoolean(SHARED_PREF_DAY,false);break;}editor.apply();setDayNightMode(sharedPreferences.getBoolean(SHARED_PREF_DAY,true));getWindow().setWindowAnimations(R.style.WindowAnimationFadeInOut);recreate();}  }
class C{  ConstrainableAdminProxy(Registrar server,ServiceID registrarID,MethodConstraints constraints){  super((Registrar)((RemoteMethodControl)server).setConstraints(ConstrainableProxyUtil.translateConstraints(constraints,methodMappings)),registrarID);  this.constraints=constraints;}  }
class C{  public static File join(File dir,Iterable<String> paths){  return new File(dir,PATH_JOINER.join(paths));}  }
class C{  public void drawChart(Graphics2D gc){  int x0=2;  int x1=getWidth() - 2;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  if (x0 >= x1)   return;  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  Rectangle deviceBBox=new Rectangle(x0,y1,x1 - x0,y0 - y1);  int diameter=Math.min(deviceBBox.width,deviceBBox.height) - 70;  deviceBBox.x=deviceBBox.x + (deviceBBox.width - diameter) / 2;  deviceBBox.y=deviceBBox.y + (deviceBBox.height - diameter) / 2;  if (getChartData().getSeriesNames().size() == 0)   return;  String series=getChartData().getSeriesNames().iterator().next();  double factor=360.0 / getChartData().getTotalForSeriesIncludingDisabledAttributes(series);  double totalValue=0;  Arc2D arc=new Arc2D.Double();  arc.setArcType(Arc2D.PIE);  arc.setFrame(deviceBBox.x + 1,deviceBBox.y + 1,diameter,diameter);  Point center=new Point((int)arc.getFrame().getCenterX(),(int)arc.getFrame().getCenterY());  gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));  for (  String className : getChartData().getClassNames()) {    double value=getChartData().getValue(series,className).doubleValue();    if (value > 0) {      arc.setAngleStart(totalValue * factor);      arc.setAngleExtent(value * factor);      totalValue+=value;      gc.setColor(getChartColors().getClassColor(class2HigherClassMapper.get(className)));      if (sgc != null)       sgc.setCurrentItem(new String[]{series,className});      gc.fill(arc);      if (sgc != null)       sgc.clearCurrentItem();      gc.setColor(Color.black);      gc.draw(arc);    }    boolean isSelected=getChartData().getChartSelection().isSelected(null,className);    if (isShowValues() || isSelected) {      double textAngle=Geometry.deg2rad(360 - (arc.getAngleStart() + arc.getAngleExtent() / 2));      Point2D apt=Geometry.translateByAngle(center,textAngle,diameter / 2 + 5);      if (isSelected)       gc.setColor(ProgramProperties.SELECTION_COLOR_ADDITIONAL_TEXT); else       gc.setColor(getFontColor(ChartViewer.FontKeys.ValuesFont.toString(),Color.DARK_GRAY));      if (sgc != null)       sgc.setCurrentItem(new String[]{series,className});      drawString(gc,"" + (int)value,apt.getX(),apt.getY(),textAngle);      if (sgc != null)       sgc.clearCurrentItem();    }  }  if (getChartData().getChartSelection().getSelectedClasses().size() > 0) {    gc.setStroke(HEAVY_STROKE);    gc.setColor(ProgramProperties.SELECTION_COLOR);    totalValue=0;    for (    String className : getChartData().getClassNames()) {      double value=getChartData().getValue(series,className).doubleValue();      arc.setAngleStart(totalValue * factor);      arc.setAngleExtent(value * factor);      totalValue+=value;      if (getChartData().getChartSelection().isSelected(null,className)) {        gc.draw(arc);      }    }    gc.setStroke(NORMAL_STROKE);  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Constant constant(){  if (constant_computed) {    return constant_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  constant_value=constant_compute();  if (isFinal && num == state().boundariesCrossed)   constant_computed=true;  return constant_value;}  }
class C{  protected void loadApplicationContext() throws Exception {  if (applicationContext != null) {    return;  }  if (logger.isDebugEnabled()) {    logger.debug("Loading application context [" + location + "]");  }  applicationContext=new ResourceApplicationContext(new Resource[]{location},parentApplicationContext,config);  try {    applicationContext.refresh();  } catch (  Exception e) {    applicationContext=null;    throw e;  }}  }
class C{  private boolean useCache(){  return (api.currentTimeMillis() - lastMapUpdate) < api.getSettings().getMapSettings().getMinRefresh();}  }
class C{  private void doUpdateValues(final TagValueUpdate tagValueUpdate){  updateTagQuality(tagValueUpdate.getDataTagQuality());  alarms.clear();  alarms.addAll(tagValueUpdate.getAlarms());  description=tagValueUpdate.getDescription();  valueDescription=tagValueUpdate.getValueDescription();  serverTimestamp=tagValueUpdate.getServerTimestamp();  daqTimestamp=tagValueUpdate.getDaqTimestamp();  sourceTimestamp=tagValueUpdate.getSourceTimestamp();  tagValue=tagValueUpdate.getValue();  mode=tagValueUpdate.getMode();  simulated=tagValueUpdate.isSimulated();}  }
class C{  private TreeItemMap(){  createTreeItemMap();}  }
class C{  public boolean canProduce(DestinationName destination,String role){  return checkAuthorization(destination,role,AuthAction.produce);}  }
class C{  public SecurityAccessException(Throwable cause){  super(cause.getMessage(),cause);}  }
class C{  public void testFromStoredFieldsWithWeightExpression() throws Exception {  createAndStartIndex("storedsuggestexpr");  send("registerFields","{" + "fields: {text: {type: text, store: true, search: false}," + "negWeight: {type: float, sort: true},"+ "payload: {type: text, store: true, search: false}}}");  send("addDocument","{fields: {text: 'the cat meows', negWeight: -1, payload: 'payload1'}}");  long indexGen=getLong(send("addDocument","{fields: {text: 'the dog barks', negWeight: -2, payload: 'payload2'}}"),"indexGen");  JSONObject result=send("buildSuggest","{source: {searcher: {indexGen: " + indexGen + "}, suggestField: text, weightExpression: -negWeight, payloadField: payload}, class: 'AnalyzingSuggester', suggestName: 'suggest', analyzer: {tokenizer: Whitespace, tokenFilters: [LowerCase]}}");  for (int i=0; i < 2; i++) {    result=send("suggestLookup","{text: the, suggestName: suggest}");    assertEquals(2,getInt(result,"results[0].weight"));    assertEquals("the dog barks",get(result,"results[0].key"));    assertEquals("payload2",get(result,"results[0].payload"));    assertEquals(1,getInt(result,"results[1].weight"));    assertEquals("the cat meows",get(result,"results[1].key"));    assertEquals("payload1",get(result,"results[1].payload"));    bounceServer();    send("startIndex");  }}  }
class C{  private ResultSet executeQuery(String query) throws SQLException {  if (m_stmt == null)   m_stmt=m_conn.createStatement();  long timein=System.currentTimeMillis();  s_logger.info("Issuing query: " + query);  ResultSet rset=m_stmt.executeQuery(query);  long time=System.currentTimeMillis() - timein;  s_logger.info("External query processing completed: " + (time / 1000) + "."+ (time % 1000)+ " seconds.");  return rset;}  }
class C{  private void arcToBezier(double cx,double cy,double a,double b,double e1x,double e1y,double theta,double start,double sweep){  int numSegments=(int)Math.ceil(Math.abs(sweep * 4 / Math.PI));  double eta1=start;  double cosTheta=Math.cos(theta);  double sinTheta=Math.sin(theta);  double cosEta1=Math.cos(eta1);  double sinEta1=Math.sin(eta1);  double ep1x=(-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);  double ep1y=(-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);  double anglePerSegment=sweep / numSegments;  for (int i=0; i < numSegments; i++) {    double eta2=eta1 + anglePerSegment;    double sinEta2=Math.sin(eta2);    double cosEta2=Math.cos(eta2);    double e2x=cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);    double e2y=cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);    double ep2x=-a * cosTheta * sinEta2 - b * sinTheta * cosEta2;    double ep2y=-a * sinTheta * sinEta2 + b * cosTheta * cosEta2;    double tanDiff2=Math.tan((eta2 - eta1) / 2);    double alpha=Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;    double q1x=e1x + alpha * ep1x;    double q1y=e1y + alpha * ep1y;    double q2x=e2x - alpha * ep2x;    double q2y=e2y - alpha * ep2y;    notifyResult("mPath.cubicTo(" + (float)q1x + "f, "+ (float)q1y+ "f, "+ (float)q2x+ "f, "+ (float)q2y+ "f, "+ (float)e2x+ "f, "+ (float)e2y+ "f);");    eta1=eta2;    e1x=e2x;    e1y=e2y;    ep1x=ep2x;    ep1y=ep2y;  }}  }
class C{  public DynamicTemplateParameterContext appendParameter(DynamicContextParameters param,String paramValue){  return appendParameter(param,paramValue,ContextInfo.EMPTY);}  }
class C{  public int skipBytes(int count) throws IOException, EOFException {  return (int)in.skip(count);}  }
class C{  public void limitTransAndScale(Matrix matrix,RectF content){  matrix.getValues(matrixBuffer);  float curTransX=matrixBuffer[Matrix.MTRANS_X];  float curScaleX=matrixBuffer[Matrix.MSCALE_X];  float curTransY=matrixBuffer[Matrix.MTRANS_Y];  float curScaleY=matrixBuffer[Matrix.MSCALE_Y];  mScaleX=Math.min(Math.max(mMinScaleX,curScaleX),mMaxScaleX);  mScaleY=Math.min(Math.max(mMinScaleY,curScaleY),mMaxScaleY);  float width=0f;  float height=0f;  if (content != null) {    width=content.width();    height=content.height();  }  float maxTransX=-width * (mScaleX - 1f);  mTransX=Math.min(Math.max(curTransX,maxTransX - mTransOffsetX),mTransOffsetX);  float maxTransY=height * (mScaleY - 1f);  mTransY=Math.max(Math.min(curTransY,maxTransY + mTransOffsetY),-mTransOffsetY);  matrixBuffer[Matrix.MTRANS_X]=mTransX;  matrixBuffer[Matrix.MSCALE_X]=mScaleX;  matrixBuffer[Matrix.MTRANS_Y]=mTransY;  matrixBuffer[Matrix.MSCALE_Y]=mScaleY;  matrix.setValues(matrixBuffer);}  }
class C{  public void notifyDataSetChanged(){  calcMinMax(0,getEntryCount() - 1);}  }
class C{  @Override public int validate(QName[] children,int offset,int length){  if (fOrdered) {    int inIndex=0;    for (int outIndex=0; outIndex < length; outIndex++) {      final QName curChild=children[offset + outIndex];      if (curChild.localpart == null) {        continue;      }      int type=fChildrenType[inIndex];      if (type == XMLContentSpec.CONTENTSPECNODE_LEAF) {        if (fChildren[inIndex].rawname != children[offset + outIndex].rawname) {          return outIndex;        }      } else       if (type == XMLContentSpec.CONTENTSPECNODE_ANY) {        String uri=fChildren[inIndex].uri;        if (uri != null && uri != children[outIndex].uri) {          return outIndex;        }      } else       if (type == XMLContentSpec.CONTENTSPECNODE_ANY_LOCAL) {        if (children[outIndex].uri != null) {          return outIndex;        }      } else       if (type == XMLContentSpec.CONTENTSPECNODE_ANY_OTHER) {        if (fChildren[inIndex].uri == children[outIndex].uri) {          return outIndex;        }      }      inIndex++;    }  } else {    for (int outIndex=0; outIndex < length; outIndex++) {      final QName curChild=children[offset + outIndex];      if (curChild.localpart == null)       continue;      int inIndex=0;      for (; inIndex < fCount; inIndex++) {        int type=fChildrenType[inIndex];        if (type == XMLContentSpec.CONTENTSPECNODE_LEAF) {          if (curChild.rawname == fChildren[inIndex].rawname) {            break;          }        } else         if (type == XMLContentSpec.CONTENTSPECNODE_ANY) {          String uri=fChildren[inIndex].uri;          if (uri == null || uri == children[outIndex].uri) {            break;          }        } else         if (type == XMLContentSpec.CONTENTSPECNODE_ANY_LOCAL) {          if (children[outIndex].uri == null) {            break;          }        } else         if (type == XMLContentSpec.CONTENTSPECNODE_ANY_OTHER) {          if (fChildren[inIndex].uri != children[outIndex].uri) {            break;          }        }      }      if (inIndex == fCount)       return outIndex;    }  }  return -1;}  }
class C{  public void resetFocus(ScheduledCommand command){  command.execute();}  }
class C{  public void fireSootOutputEvent(SootOutputEvent event){  Iterator it=sootOutputEventListeners.iterator();  while (it.hasNext()) {    ((ISootOutputEventListener)it.next()).handleSootOutputEvent(event);  }}  }
class C{  public BoardCreateCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  @Override public void execute(IEnginesContext context,Map<String,String> executionOptions){  IRuntimeProject prj=context.getProject(0);  if (prj == null) {    return;  }  Signature sig=new Signature();  StructureInfo struInfo=new StructureInfo();  String methodSizeBar=executionOptions.get("methodSizeBar");  if (Strings.isBlank(methodSizeBar)) {    struInfo.methodSizeBar=6;  } else {    struInfo.methodSizeBar=Integer.parseInt(methodSizeBar);    if (struInfo.methodSizeBar < 0) {      struInfo.methodSizeBar=6;    }  }  String matchedInstusPercentageBar=executionOptions.get("matchedInstusPercentageBar");  if (Strings.isBlank(matchedInstusPercentageBar)) {    struInfo.matchedInstusPercentageBar=0.5;  } else {    struInfo.matchedInstusPercentageBar=Double.parseDouble(matchedInstusPercentageBar);    if (struInfo.matchedInstusPercentageBar < 0.0 || struInfo.matchedInstusPercentageBar > 1.0) {      struInfo.matchedInstusPercentageBar=0.5;    }  }  sig.loadAllHashCodes(SignatureHandler.getSignaturesFolder(context));  List<IDexUnit> dexlist=RuntimeProjectUtil.findUnitsByType(prj,IDexUnit.class,false);  for (  IDexUnit dex : dexlist) {    sig.loadAllSignatures(dex);    struInfo.loadAPKHashcodes(dex);    MetadataGroupHandler.createCodeGroupMethod(dex,struInfo);    MetadataGroupHandler.createCodeGroupClass(dex,struInfo);    struInfo.rebuildStructure(dex,sig);    if (Thread.currentThread().isInterrupted()) {      logger.info("Tread Interrupted!");      return;    }    dex.notifyListeners(new JebEvent(J.UnitChange));    ReportHandler.generateRecord(dex,struInfo,sig);    break;  }  logger.info("*************** Completed! ***************");}  }
class C{  public Map<String,BufferedImage> createLegend(StyledLayerDescriptor sld,String heading,String filename,boolean separateSymbolizers){  Map<String,BufferedImage> imageMap=new HashMap<String,BufferedImage>();  GetLegendGraphicRequest request=new GetLegendGraphicRequest();  Map<String,Object> legendOptions=new HashMap<String,Object>();  if (heading != null) {    legendOptions.put("heading",heading);  }  if (filename != null) {    legendOptions.put("filename",filename);  }  if (legendOptionData == null) {    legendOptionData=new LegendOptionData();  }  request.setWidth(legendOptionData.getImageWidth());  request.setHeight(legendOptionData.getImageHeight());  request.setTransparent(legendOptionData.isTransparent());  request.setStrict(false);  legendOptions.put("bgColor",ColourUtils.fromColour(legendOptionData.getBackgroundColour()));  legendOptions.put("fontColor",ColourUtils.fromColour(legendOptionData.getLabelFontColour()));  Font font=legendOptionData.getLabelFont();  legendOptions.put("fontName",font.getFontName());  String styleValue=null;  if ((font.getStyle() & java.awt.Font.BOLD) == java.awt.Font.BOLD) {    styleValue="bold";  }  if ((font.getStyle() & java.awt.Font.ITALIC) == java.awt.Font.ITALIC) {    styleValue="italic";  }  if (styleValue != null) {    legendOptions.put("fontStyle",styleValue);  }  legendOptions.put("fontSize",String.valueOf(font.getSize()));  legendOptions.put("dpi",Integer.valueOf(legendOptionData.getDpi()));  legendOptions.put("fontAntiAliasing",getBooleanValueOnOff(legendOptionData.isFontAntiAliasing()));  legendOptions.put("forceLabels",getBooleanValueOnOff(legendOptionData.isShowLabels()));  legendOptions.put("forceTitles",getBooleanValueOnOff(legendOptionData.isShowTitle()));  legendOptions.put("bandInfo",getBooleanValueTrueFalse(legendOptionData.isBandInformation()));  legendOptions.put("border",getBooleanValueTrueFalse(legendOptionData.isBorder()));  legendOptions.put("borderColor",ColourUtils.fromColour(legendOptionData.getBorderColour()));  legendOptions.put("imageSize",String.valueOf(legendOptionData.getImageSize()));  request.setLegendOptions(legendOptions);  if (sld != null) {    Map<String,Style> styleMap=new LinkedHashMap<String,Style>();    StyledLayer selectedStyledLayer=SelectedSymbol.getInstance().getStyledLayer();    Style selectedStyle=SelectedSymbol.getInstance().getStyle();    if (selectedStyle != null) {      createSingleStyleLegend(styleMap,selectedStyledLayer,selectedStyle);    } else {      createMultipleStyleLegend(sld,styleMap,selectedStyledLayer);    }    if (!separateSymbolizers) {      for (      String key : styleMap.keySet()) {        Style style=styleMap.get(key);        if (!style.featureTypeStyles().isEmpty()) {          FeatureTypeStyle featureTypeStyle=style.featureTypeStyles().get(0);          if (featureTypeStyle != null) {            if (!featureTypeStyle.rules().isEmpty()) {              LegendRequest legendEntryRequest=request.new LegendRequest();              request.getLegends().add(legendEntryRequest);              legendEntryRequest.setTitle(key);              legendEntryRequest.setStyle(style);            }          }        }      }      imageMap.put("",legendBuilder.buildLegendGraphic(request));    } else {      for (      String key : styleMap.keySet()) {        request.getLegends().clear();        LegendRequest legendEntryRequest=request.new LegendRequest();        legendEntryRequest.setStyle(styleMap.get(key));        legendEntryRequest.setStyleName(key);        request.getLegends().add(legendEntryRequest);        imageMap.put(key,legendBuilder.buildLegendGraphic(request));      }    }  }  return imageMap;}  }
class C{  @Override public final void run(){  registry_.updateCollection();  final long t0=System.nanoTime();  processors_.forEach(null);  final long t_processor=System.nanoTime();  registry_.updateProcessorDuration(Duration.millis(TimeUnit.NANOSECONDS.toMillis(t_processor - t0)));}  }
class C{  public boolean skipPast(String to) throws JSONException {  boolean b;  char c;  int i;  int j;  int offset=0;  int length=to.length();  char[] circle=new char[length];  for (i=0; i < length; i+=1) {    c=next();    if (c == 0) {      return false;    }    circle[i]=c;  }  for (; ; ) {    j=offset;    b=true;    for (i=0; i < length; i+=1) {      if (circle[j] != to.charAt(i)) {        b=false;        break;      }      j+=1;      if (j >= length) {        j-=length;      }    }    if (b) {      return true;    }    c=next();    if (c == 0) {      return false;    }    circle[offset]=c;    offset+=1;    if (offset >= length) {      offset-=length;    }  }}  }
class C{  @Override public boolean isOverriding(){  return (this.keyHook != null) ? this.keyHook.isOverridingPresses : false;}  }
class C{  public final TestSubscriber<T> requestedFusionMode(int requestMode){  this.requestedFusionMode=requestMode;  return this;}  }
class C{  private BTreeNode findFirstLeafNode(IndexKey key,BTreeNode node){  int childNodeIndex;  int low=0;  int high=node.nodeSize() - 1;  int mid=0;  int compareRes=-1;  IndexKey[] nodeKeys=node.getNodeKeys();  while (low <= high) {    mid=(low + high) >>> 1;    compareRes=compareIndexes(key,nodeKeys[mid]);    if (compareRes < 0) {      high=mid - 1;    } else     if (compareRes > 0) {      low=mid + 1;    } else {      int currentPos=mid;      while (currentPos - 1 >= 0 && compareIndexes(key,nodeKeys[currentPos - 1]) == 0) {        currentPos--;      }      mid=currentPos;      break;    }  }  if (compareRes < 0) {    if (mid > 0) {      mid--;    }    childNodeIndex=mid;  } else {    childNodeIndex=mid;  }  node=node.getChild(childNodeIndex);  return node;}  }
class C{  @Override public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  int entityIndex=getEntityDeclIndex(name);  if (entityIndex == -1) {    entityIndex=createEntityDecl();    boolean isPE=name.startsWith("%");    boolean inExternal=(fReadingExternalDTD || fPEDepth > 0);    XMLEntityDecl entityDecl=new XMLEntityDecl();    entityDecl.setValues(name,identifier.getPublicId(),identifier.getLiteralSystemId(),identifier.getBaseSystemId(),null,null,isPE,inExternal);    setEntityDecl(entityIndex,entityDecl);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysNoResist_A_TO_SELF(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200787,skilltarget,skillcaster,skillname);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIEND'";  db.execSQL(sql);}  }
class C{  private static void decodeC40Segment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < C40_BASIC_SET_CHARS.length) {          char c40char=C40_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(c40char + 128));            upperShift=false;          } else {            result.append(c40char);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (upperShift) {result.append((char)(cValue + 224));upperShift=false;} else {result.append((char)(cValue + 96));}shift=0;break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (BuildConfig.DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }}  }
class C{  protected FriendsGetAvailableForCallQueryWithFields fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){  Integer viewSize=(Integer)context.get("viewSize");  if (viewSize == null)   viewSize=Integer.valueOf(20);  context.put("viewSize",viewSize);  Integer viewIndex=(Integer)context.get("viewIndex");  if (viewIndex == null)   viewIndex=Integer.valueOf(0);  context.put("viewIndex",viewIndex);  Map<String,Object> result=performFind(dctx,context);  int start=viewIndex.intValue() * viewSize.intValue();  List<GenericValue> list=null;  Integer listSize=0;  try {    EntityListIterator it=(EntityListIterator)result.get("listIt");    list=it.getPartialList(start + 1,viewSize);    listSize=it.getResultsSizeAfterPartialList();    it.close();  } catch (  Exception e) {    Debug.logInfo("Problem getting partial list" + e,module);  }  result.put("listSize",listSize);  result.put("list",list);  result.remove("listIt");  return result;}  }
class C{  protected MessagesGetChatUsersQueryWithChatIdsFields fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public InvalidRepresentationException(Localizable pattern,Object... args){  super(pattern,args);}  }
class C{  public TransformWork withConsole(Console newConsole){  return new TransformWork(checkoutDir,metadata,changes,Preconditions.checkNotNull(newConsole));}  }
class C{  public Zsvd(Zmat XX) throws JampackException {  int i, il, iu, iter, j, k, kk, m, mc;  double as, at, au, axkk, axkk1, dmax, dmin, ds, ea, es, shift, ss, t, tre;  Z xkk, xkk1, xk1k1, ukj, vik1;  Rot P=new Rot();  Z scale=new Z();  Z zr=new Z();  Zmat X=new Zmat(XX);  Z1 h;  Z1 temp=new Z1(Math.max(X.nr,X.nc));  mc=Math.min(X.nr,X.nc);  double d[]=new double[mc];  double e[]=new double[mc];  S=new Zdiagmat(mc);  U=Eye.o(X.nr);  V=Eye.o(X.nc);  m=Math.min(X.rx,X.cx);  for (k=X.bx; k <= m; k++) {    h=House.genc(X,k,X.rx,k);    House.ua(h,X,k,X.rx,k + 1,X.cx,temp);    House.au(U,h,U.bx,U.rx,k,U.cx,temp);    if (k != X.cx) {      h=House.genr(X,k,k + 1,X.cx);      House.au(X,h,k + 1,X.rx,k + 1,X.cx,temp);      House.au(V,h,V.bx,V.rx,k + 1,V.cx,temp);    }  }  for (k=X.bx; k <= m; k++) {    kk=k - X.bx;    xkk=X.get(k,k);    axkk=Z.abs(xkk);    X.put(k,k,new Z(axkk));    d[kk]=axkk;    scale.Div(scale.Conj(xkk),axkk);    if (k < X.cx) {      xkk1=X.get(k,k + 1);      X.put(k,k + 1,xkk1.Times(scale,xkk1));    }    scale.Conj(scale);    for (i=U.bx; i <= U.rx; i++) {      U.put(i,k,zr.Times(U.get(i,k),scale));    }    if (k < X.cx) {      xkk1=X.get(k,k + 1);      axkk1=Z.abs(xkk1);      X.put(k,k + 1,new Z(axkk1));      e[kk]=axkk1;      scale.Div(scale.Conj(xkk1),axkk1);      if (k < X.rx) {        xk1k1=X.get(k + 1,k + 1);        X.put(k + 1,k + 1,xk1k1.Times(scale,xk1k1));      }      for (i=V.bx; i <= V.rx; i++) {        V.put(i,k + 1,zr.Times(V.get(i,k + 1),scale));      }    }  }  m=m - X.bx;  if (X.nr < X.nc) {    t=e[m];    for (k=m; k >= 0; k--) {      Rot.genr(d[k],t,P);      d[k]=P.zr;      if (k != 0) {        t=P.sr * e[k - 1];        e[k - 1]=P.c * e[k - 1];      }      Rot.ap(V,P,V.bx,V.rx,k + V.bx,X.rx + 1);      Rot.ap(X,P,X.bx,X.rx,k + X.bx,X.rx + 1);    }  }  iu=m;  iter=0;  while (true) {    while (iu > 0) {      if (Math.abs(e[iu - 1]) > 1.0e-16 * (Math.abs(d[iu]) + Math.abs(d[iu - 1])))       break;      e[iu - 1]=0.;      iter=0;      iu=iu - 1;    }    iter=iter + 1;    if (iter > MAXITER) {      throw new JampackException("Maximum number of iterations exceeded.");    }    if (iu == 0)     break;    il=iu - 1;    while (il > 0) {      if (Math.abs(e[il - 1]) <= 1.0e-16 * (Math.abs(d[il]) + Math.abs(d[il - 1])))       break;      il=il - 1;    }    if (il != 0) {      e[il - 1]=0.;    }    dmax=Math.max(Math.abs(d[iu]),Math.abs(d[iu - 1]));    dmin=Math.min(Math.abs(d[iu]),Math.abs(d[iu - 1]));    ea=Math.abs(e[iu - 1]);    if (dmin == 0.) {      shift=0.;    } else     if (ea < dmax) {      as=1. + dmin / dmax;      at=(dmax - dmin) / dmax;      au=ea / dmax;      au=au * au;      shift=dmin * (2. / (Math.sqrt(as * as + au) + Math.sqrt(at * at + au)));    } else {      au=dmax / ea;      if (au == 0.) {        shift=(dmin * dmax) / ea;      } else {        as=1. + dmin / dmax;        at=(dmax - dmin) / dmax;        t=1. / (Math.sqrt(1. + (as * au) * (as * au)) + Math.sqrt(1. + (at * au) * (at * au)));        shift=(t * dmin) * au;      }    }    t=Math.max(Math.max(Math.abs(d[il]),Math.abs(e[il])),shift);    ds=d[il] / t;    es=e[il] / t;    ss=shift / t;    Rot.genr((ds - ss) * (ds + ss),ds * es,P);    for (i=il; i < iu; i++) {      t=P.c * d[i] - P.sr * e[i];      e[i]=P.sr * d[i] + P.c * e[i];      d[i]=t;      t=-P.sr * d[i + 1];      d[i + 1]=P.c * d[i + 1];      Rot.ap(V,P,V.bx,V.rx,V.bx + i,V.bx + i + 1);      Rot.genc(d[i],t,P);      d[i]=P.zr;      t=P.c * e[i] + P.sr * d[i + 1];      d[i + 1]=P.c * d[i + 1] - P.sr * e[i];      e[i]=t;      Rot.aph(U,P,U.bx,U.rx,U.bx + i,U.bx + i + 1);      if (i != iu - 1) {        t=P.sr * e[i + 1];        e[i + 1]=P.c * e[i + 1];        Rot.genr(e[i],t,P);        e[i]=P.zr;      }    }  }  for (k=m; k >= 0; k--) {    if (d[k] < 0) {      d[k]=-d[k];      for (i=0; i < X.nc; i++) {        V.re[i][k]=-V.re[i][k];        V.im[i][k]=-V.im[i][k];      }    }    for (j=k; j < m; j++) {      if (d[j] < d[j + 1]) {        t=d[j];        d[j]=d[j + 1];        d[j + 1]=t;        for (i=0; i < X.nr; i++) {          t=U.re[i][j];          U.re[i][j]=U.re[i][j + 1];          U.re[i][j + 1]=t;          t=U.im[i][j];          U.im[i][j]=U.im[i][j + 1];          U.im[i][j + 1]=t;        }        for (i=0; i < X.nc; i++) {          t=V.re[i][j];          V.re[i][j]=V.re[i][j + 1];          V.re[i][j + 1]=t;          t=V.im[i][j];          V.im[i][j]=V.im[i][j + 1];          V.im[i][j + 1]=t;        }      }    }  }  S.re=d;  return;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  getViewer().selectComponent(getViewer().getNJTab());}  }
class C{  private static void generateArrayInitialization(@NotNull MethodVisitor mv,String className,String fieldName,@NotNull List<Integer> values){  if (values.isEmpty()) {    return;  }  mv.visitIntInsn(BIPUSH,values.size());  mv.visitIntInsn(NEWARRAY,T_INT);  int idx=0;  for (  Integer value : values) {    mv.visitInsn(DUP);switch (idx) {case 0:      mv.visitInsn(ICONST_0);    break;case 1:  mv.visitInsn(ICONST_1);break;case 2:mv.visitInsn(ICONST_2);break;case 3:mv.visitInsn(ICONST_3);break;case 4:mv.visitInsn(ICONST_4);break;case 5:mv.visitInsn(ICONST_5);break;default :mv.visitIntInsn(BIPUSH,idx);break;}mv.visitLdcInsn(value);mv.visitInsn(IASTORE);idx++;}mv.visitFieldInsn(PUTSTATIC,className,fieldName,"[I");}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Collection<? extends GrantedAuthority> authorities=securityContext.getAuthentication().getAuthorities();  if (authorities != null) {    for (    GrantedAuthority authority : authorities) {      if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {        return false;      }    }  }  return true;}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  public NewPolygonSLD(){  super(Localisation.getString(NewPolygonSLD.class,"NewPolygonSLD.title"));}  }
class C{  public void extendSelection(int toRow,int toCol){  if (toRow != -1) {    if (toRow > totalRows)     toRow=totalRows;    if (toRow < firstRow)     firstRow=toRow; else     if (toRow >= lastRow)     lastRow=toRow;  }  if (toCol != -1) {    if (toCol > totalCols)     toCol=totalCols;    if (toCol < firstCol)     firstCol=toCol; else     if (toCol >= lastCol)     lastCol=toCol;  }  fireSelectionChanged();}  }
class C{  public long optLong(String key,long defaultValue){  try {    return getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void fillLeafs(Node root,FeatureVector[] featureVectors){  if (leafType == LeafNode.LeafType.FeatureVectorLeafNode) {    rootNode=root;    Node currentNode=rootNode;    Node prevNode=null;    for (int i=0; i < featureVectors.length; i++) {      currentNode=rootNode;      prevNode=null;      FeatureVector featureVector=featureVectors[i];      while (!(currentNode instanceof LeafNode)) {        prevNode=currentNode;        currentNode=((DecisionNode)currentNode).getNextNode(featureVector);      }      ((LeafNode.FeatureVectorLeafNode)currentNode).addFeatureVector(featureVector);    }  } else   throw new IllegalArgumentException("The leaves of this tree are not FeatureVectorLeafNode.");}  }
class C{  public UsersGetNearbyQuery accuracy(Integer value){  return unsafeParam("accuracy",value);}  }
class C{  static void paintConstraint(NlGraphics graphics,GuidelineHandler state,Match match){  NlComponent node=match.edge.component;  if (node == null) {    return;  }  Insets padding=node.getPadding();  Rectangle targetBounds=node == state.layout ? new Rectangle(node.x + padding.left,node.y + padding.top,Math.max(0,node.w - padding.left - padding.right),Math.max(0,node.h - padding.top - padding.bottom)) : new Rectangle(node.x,node.y,node.w,node.h);  ConstraintType type=match.type;  assert type != null;  Rectangle sourceBounds=state.myBounds;  paintConstraint(graphics,type,node,sourceBounds,node,targetBounds,null,true,state.myTextDirection);}  }
class C{  private static Marshaller createMarshaller(JAXBContext jaxbContext,String schemaPath) throws SAXException, JAXBException {  Schema schema=XmlParser.getSchema(new String[]{schemaPath});  Marshaller jaxbMarshaller=jaxbContext.createMarshaller();  jaxbMarshaller.setSchema(schema);  jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,"UTF-8");  return jaxbMarshaller;}  }
class C{  public GroupsEditLinkQuery(VkApiClient client,UserActor actor,int groupId,int linkId){  super(client,"groups.editLink",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  linkId(linkId);}  }
class C{  public boolean isReadOnly() throws IOException {  return file == null || !file.canWrite();}  }
class C{  private PokemonPerformanceCache(){}  }
class C{  protected PollsGetVotersQuery pollId(int value){  return unsafeParam("poll_id",value);}  }
class C{  public static void copy(String input,Writer output) throws IOException {  output.write(input);}  }
class C{  protected boolean checkPrevTokens(Element currentRulePart,int position,NodeList tokens){  NamedNodeMap attNodes=currentRulePart.getAttributes();  for (int z=0; z < attNodes.getLength(); z++) {    Node el=attNodes.item(z);    String currentAtt=el.getNodeName();    String currentVal=el.getNodeValue();    if (currentAtt.equals("num")) {      int num=Integer.parseInt(currentVal.substring(0,1));      int requiredFirstTokenPosition=position - num;      if (currentVal.length() == 1) {        if (!(requiredFirstTokenPosition == 0))         return false;      } else       if (currentVal.substring(1,2).equals("+")) {        if (!(0 <= requiredFirstTokenPosition))         return false;      } else       if (currentVal.substring(1,2).equals("-")) {        if (!(0 >= requiredFirstTokenPosition))         return false;      }    }  }  return true;}  }
class C{  public DOMStringListImpl(){  fStrings=new ArrayList();}  }
class C{  @Override public String addSymbol(char[] buffer,int offset,int length){  clean();  int bucket=hash(buffer,offset,length) % fTableSize;  OUTER:   for (SREntry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    SREntryData data=(SREntryData)entry.get();    if (data == null) {      continue;    }    if (length == data.characters.length) {      for (int i=0; i < length; i++) {        if (buffer[offset + i] != data.characters[i]) {          continue OUTER;        }      }      return data.symbol;    }  }  if (fCount >= fThreshold) {    rehash();    bucket=hash(buffer,offset,length) % fTableSize;  }  String symbol=new String(buffer,offset,length).intern();  SREntry entry=new SREntry(symbol,buffer,offset,length,fBuckets[bucket],bucket,fReferenceQueue);  fBuckets[bucket]=entry;  ++fCount;  return symbol;}  }
class C{  private static BitMatrix convertByteMatrixToBitMatrix(ByteMatrix matrix){  int matrixWidgth=matrix.getWidth();  int matrixHeight=matrix.getHeight();  BitMatrix output=new BitMatrix(matrixWidgth,matrixHeight);  output.clear();  for (int i=0; i < matrixWidgth; i++) {    for (int j=0; j < matrixHeight; j++) {      if (matrix.get(i,j) == 1) {        output.set(i,j);      }    }  }  return output;}  }
class C{  @SuppressLint("InlinedApi") private void testADTS() throws IllegalStateException, IOException {  setAudioEncoder(MediaRecorder.AudioEncoder.AAC);  try {    Field name=MediaRecorder.OutputFormat.class.getField("AAC_ADTS");    setOutputFormat(name.getInt(null));  } catch (  Exception ignore) {    setOutputFormat(6);  }  String key=PREF_PREFIX + "aac-" + mQuality.samplingRate;  if (mSettings != null) {    if (mSettings.contains(key)) {      String[] s=mSettings.getString(key,"").split(",");      mQuality.samplingRate=Integer.valueOf(s[0]);      mConfig=Integer.valueOf(s[1]);      mChannel=Integer.valueOf(s[2]);      return;    }  }  final String TESTFILE=Environment.getExternalStorageDirectory().getPath() + "/spydroid-test.adts";  if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    throw new IllegalStateException("No external storage or external storage not ready !");  }  byte[] buffer=new byte[9];  mMediaRecorder=new MediaRecorder();  mMediaRecorder.setAudioSource(mAudioSource);  mMediaRecorder.setOutputFormat(mOutputFormat);  mMediaRecorder.setAudioEncoder(mAudioEncoder);  mMediaRecorder.setAudioChannels(1);  mMediaRecorder.setAudioSamplingRate(mQuality.samplingRate);  mMediaRecorder.setAudioEncodingBitRate(mQuality.bitRate);  mMediaRecorder.setOutputFile(TESTFILE);  mMediaRecorder.setMaxDuration(1000);  mMediaRecorder.prepare();  mMediaRecorder.start();  try {    Thread.sleep(2000);  } catch (  InterruptedException e) {  }  mMediaRecorder.stop();  mMediaRecorder.release();  mMediaRecorder=null;  File file=new File(TESTFILE);  RandomAccessFile raf=new RandomAccessFile(file,"r");  while (true) {    if ((raf.readByte() & 0xFF) == 0xFF) {      buffer[0]=raf.readByte();      if ((buffer[0] & 0xF0) == 0xF0)       break;    }  }  raf.read(buffer,1,5);  mSamplingRateIndex=(buffer[1] & 0x3C) >> 2;  mProfile=((buffer[1] & 0xC0) >> 6) + 1;  mChannel=(buffer[1] & 0x01) << 2 | (buffer[2] & 0xC0) >> 6;  mQuality.samplingRate=AUDIO_SAMPLING_RATES[mSamplingRateIndex];  mConfig=(mProfile & 0x1F) << 11 | (mSamplingRateIndex & 0x0F) << 7 | (mChannel & 0x0F) << 3;  Log.i(TAG,"MPEG VERSION: " + ((buffer[0] & 0x08) >> 3));  Log.i(TAG,"PROTECTION: " + (buffer[0] & 0x01));  Log.i(TAG,"PROFILE: " + AUDIO_OBJECT_TYPES[mProfile]);  Log.i(TAG,"SAMPLING FREQUENCY: " + mQuality.samplingRate);  Log.i(TAG,"CHANNEL: " + mChannel);  raf.close();  if (mSettings != null) {    Editor editor=mSettings.edit();    editor.putString(key,mQuality.samplingRate + "," + mConfig+ ","+ mChannel);    editor.commit();  }  if (!file.delete())   Log.e(TAG,"Temp file could not be erased");}  }
class C{  public Distribution addTo(Distribution dOther){  double dSimilarity=0.0;  TreeMap<Object,Double> tOverAll=new TreeMap<Object,Double>();  Iterator iThisIter=hDistro.entrySet().iterator();  Iterator iOtherIter=dOther.asTreeMap().entrySet().iterator();  while (iThisIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iThisIter.next();    tOverAll.put(e.getKey(),(Double)e.getValue());  }  while (iOtherIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iOtherIter.next();    double dVal;    if (tOverAll.containsKey(e.getKey())) {      dVal=(Double)tOverAll.get(e.getKey()).doubleValue();      dVal+=((Double)e.getValue()).doubleValue();    } else {      dVal=(Double)e.getValue();    }    tOverAll.put(e.getKey(),dVal);  }  return new Distribution(tOverAll);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setError(null);  mPasswordView.setError(null);  String email=mEmailView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);  }}  }
class C{  public static StringBuilder maybeQuoteIdentifier(String s){  final EscapeStringResult escapeString=escapeString(s,'\'');  final StringBuilder result=escapeString.buffer;  final boolean need_quotes=s.isEmpty() || escapeString.needQuotes || KEYWORDS.contains(s)|| !IDENTIFIER_MATCHER.test(s);  if (need_quotes) {    result.insert(0,'\'');    result.append('\'');  }  return result;}  }
class C{  public static java.util.Date toDate(Timestamp timestamp){  if (timestamp == null) {    return null;  }  long milliseconds=timestamp.getTime() + (timestamp.getNanos() / 1000000);  return new Date(milliseconds);}  }
class C{  private void parseJoin(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){  TokenStream tokens=new TokenStream(header);  String var=tokens.expect(IDENTIFIER);  tokens.expect(":");  Elem generator=parseExpr(tokens);  Elem cond=null;  if (tokens.has("if")) {    tokens.next();    cond=parseExpr(tokens);  }  Layout joinLayout=parseLayout(tokens);  tokens.checkAtEnd();  List<Elem> bodyElems=parseUntil(indent,layout,END_COMMAND);  if (var != null && generator != null && bodyElems != null && layout != null) {    elems.add(Block.create(!firstContent,Elem.Join.create(input.location(),var,generator,cond,joinLayout,bodyElems)));  }}  }
class C{  public static String merge(String s1,String s2){  if (X.isEmpty(s1) || X.isEmpty(s2)) {    return ".*";  }  int l1=s1.length();  int l2=s2.length();  if (l1 > l2) {    return merge(s2,s1);  }  int j=0;  StringBuilder sb=new StringBuilder();  boolean all=false;  for (int i=0; i < l1 && j < l2; ) {    if (s1.charAt(i) == s2.charAt(j)) {      sb.append(s1.charAt(i));      i++;      j++;      all=false;    } else {      if (!all) {        sb.append(".*");        all=true;      }      if (s1.charAt(i) == '.' && s1.charAt(i + 1) == '*') {        i+=2;      }      if (s2.charAt(j) == '.' && s2.charAt(j + 1) == '*') {        j+=2;      }      String c1=_getmaxstr(s1.substring(i),s2.substring(j));      if (c1 == null) {        i++;        continue;      }      if (i + 2 < l1) {        String c2=_getmaxstr(s1.substring(i + 1),s2.substring(j));        if (c2 == null || c1.length() >= c2.length()) {          sb.append(c1);          all=false;          j=c1.length() + s2.indexOf(c1,j);          continue;        } else         if (c2 != null) {          i++;        }      } else {        sb.append(c1);        all=false;        j=c1.length() + s2.indexOf(c1,j);        break;      }    }  }  if ((!all) && j < l2) {    sb.append(".*");  }  return sb.toString();}  }
class C{  public ImageFactory(){  this(-1,-1);}  }
class C{  public EquipmentConfiguration createEquipmentConfiguration(final String equipmentUnitXml) throws Exception {  return this.createEquipmentConfiguration(parser.parse(equipmentUnitXml).getDocumentElement());}  }
class C{  public static int log2(int i){  int r=0;  while ((i>>=1) != 0) {    ++r;  }  return r;}  }
class C{  @deprecated protected int writeValueAndType(boolean hasValue,int value,int node){  int offset=write(node);  if (hasValue) {    offset=writeValueAndFinal(value,false);  }  return offset;}  }
class C{  private DateTimeZone generateTimezone(String timeZoneId,DateTimeZone systemTimeZone) throws DeserializationException {  if (timeZoneId == null) {    return systemTimeZone;  }  try {    return DateTimeZone.forID(timeZoneId);  } catch (  IllegalArgumentException e) {    String msg=ErrorMessageFormat.UNKNOWN_TIMEZONE_ID.format(timeZoneId);    LOG.error(msg,e);    throw new DeserializationException(msg,e);  }}  }
class C{  public MediaWrapper(Media media){  if (media == null)   throw new NullPointerException("media was null");  mUri=media.getUri();  init(media);}  }
class C{  public static void clearEditorPosition(@NotNull AttributesTransaction attributes){  attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_EDITOR_ABSOLUTE_X,null);  attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_EDITOR_ABSOLUTE_Y,null);}  }
class C{  public boolean hasNext(){  return false;}  }
class C{  public static void deleteFile(String path){  File file=new File(path);  file.deleteOnExit();}  }
class C{  @Nullable private static LintModuleProject createModuleProject(@NonNull LintClient client,@NonNull Module module){  AndroidFacet facet=AndroidFacet.getInstance(module);  File dir;  if (facet != null) {    final VirtualFile mainContentRoot=AndroidRootUtil.getMainContentRoot(facet);    if (mainContentRoot == null) {      return null;    }    dir=new File(FileUtil.toSystemDependentName(mainContentRoot.getPath()));  } else {    String moduleDirPath=AndroidRootUtil.getModuleDirPath(module);    if (moduleDirPath == null) {      return null;    }    dir=new File(FileUtil.toSystemDependentName(moduleDirPath));  }  LintModuleProject project=null;  if (facet == null) {    project=new LintModuleProject(client,dir,dir,module);    AndroidFacet f=findAndroidFacetInProject(module.getProject());    if (f != null) {      project.mGradleProject=f.requiresAndroidModel();    }  } else   if (facet.requiresAndroidModel()) {    AndroidModel androidModel=facet.getAndroidModel();    if (androidModel instanceof AndroidGradleModel) {      project=new LintGradleProject(client,dir,dir,facet,(AndroidGradleModel)androidModel);    } else {      project=new LintAndroidModelProject(client,dir,dir,facet,androidModel);    }  } else {    project=new LintAndroidProject(client,dir,dir,facet);  }  if (project != null) {    client.registerProject(dir,project);  }  return project;}  }
class C{  private void computeRuleResult(){  DataTagQuality newRuleQuality=new DataTagQualityImpl();  newRuleQuality.validate();  this.simulated=false;  TagMode newRuleMode=TagMode.OPERATIONAL;  if (rule != null) {    ruleMapLock.readLock().lock();    try {      if (ruleInputValues.size() == rule.getInputTagIds().size()) {        for (        Tag inputValue : ruleInputValues.values()) {          this.simulated|=inputValue.isSimulated();switch (inputValue.getMode()) {case TEST:            if (!newRuleMode.equals(TagMode.MAINTENANCE)) {              newRuleMode=TagMode.TEST;            }          break;case MAINTENANCE:        newRuleMode=TagMode.MAINTENANCE;      break;default :  }}this.ruleQuality=newRuleQuality;this.ruleMode=newRuleMode;try {  this.ruleResult=rule.evaluate(new Hashtable<Long,Object>(ruleInputValues),resultType);} catch (RuleEvaluationException e) {  LOG.debug("computeRule() - \"" + rule.getExpression() + "\" is Invalid.",e);  ruleError=null;  this.ruleQuality=getInvalidTagQuality();  this.ruleResult=rule.forceEvaluate(new Hashtable<Long,Object>(ruleInputValues),resultType);}catch (Exception e) {  this.ruleQuality.setInvalidStatus(TagQualityStatus.UNKNOWN_REASON,RULE_ERROR_MESSAGE);  ruleError=e.getMessage();  LOG.debug("computeRule() - \"" + rule.getExpression() + "\" could not be evaluated.",e);  this.ruleResult=rule.forceEvaluate(new Hashtable<Long,Object>(ruleInputValues),resultType);}this.timestamp=new Timestamp(System.currentTimeMillis());}}  finally {ruleMapLock.readLock().unlock();}}}  }
class C{  @Override public int compare(SerialMessage arg0,SerialMessage arg1){  final boolean arg0NonceReport=ZWaveSecurityCommandClass.isSecurityNonceReportMessage(arg0);  final boolean arg1NonceReport=ZWaveSecurityCommandClass.isSecurityNonceReportMessage(arg1);  if (arg0NonceReport && !arg1NonceReport) {    return -1;  } else   if (arg1NonceReport && !arg0NonceReport) {    return 1;  }  boolean arg0Awake=false;  boolean arg0Listening=true;  boolean arg1Awake=false;  boolean arg1Listening=true;  if ((arg0.getMessageClass() == SerialMessageClass.RequestNodeInfo || arg0.getMessageClass() == SerialMessageClass.SendData)) {    ZWaveNode node=this.controller.getNode(arg0.getMessageNode());    if (node != null && !node.isListening() && !node.isFrequentlyListening()) {      arg0Listening=false;      ZWaveWakeUpCommandClass wakeUpCommandClass=(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP);      if (wakeUpCommandClass != null && wakeUpCommandClass.isAwake()) {        arg0Awake=true;      }    }  }  if ((arg1.getMessageClass() == SerialMessageClass.RequestNodeInfo || arg1.getMessageClass() == SerialMessageClass.SendData)) {    ZWaveNode node=this.controller.getNode(arg1.getMessageNode());    if (node != null && !node.isListening() && !node.isFrequentlyListening()) {      arg1Listening=false;      ZWaveWakeUpCommandClass wakeUpCommandClass=(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP);      if (wakeUpCommandClass != null && wakeUpCommandClass.isAwake()) {        arg1Awake=true;      }    }  }  if (arg0Awake && !arg1Awake) {    return -1;  } else   if (arg1Awake && !arg0Awake) {    return 1;  }  if (arg0Listening && !arg1Listening) {    return -1;  } else   if (arg1Listening && !arg0Listening) {    return 1;  }  int res=arg0.priority.compareTo(arg1.priority);  if (res == 0 && arg0 != arg1) {    res=(arg0.sequenceNumber < arg1.sequenceNumber ? -1 : 1);  }  return res;}  }
class C{  public static String nowDateString(){  return nowDateString("yyyyMMddHHmmss");}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public SerializationFactory(Configuration conf){  super(conf);  for (  String serializerName : conf.getStrings("io.serializations",new String[]{"org.apache.hadoop.io.serializer.WritableSerialization"})) {    add(conf,serializerName);  }}  }
class C{  private void updateDownloadProgress(DownloadInfo downloadInfo,DownloadStatus status){  assert downloadInfo.hasDownloadId();  int downloadId=downloadInfo.getDownloadId();  DownloadProgress progress=mDownloadProgressMap.get(downloadId);  if (progress == null) {    progress=new DownloadProgress(System.currentTimeMillis(),downloadInfo,status);    if (status == DownloadStatus.IN_PROGRESS) {      addDownloadIdToSharedPrefs(downloadId);    }    mDownloadProgressMap.putIfAbsent(downloadId,progress);  } else {    progress.mDownloadStatus=status;    progress.mDownloadInfo=downloadInfo;  }}  }
class C{  public static Color createRandomColour(){  float r=rand.nextFloat();  float g=rand.nextFloat();  float b=rand.nextFloat();  Color randomColor=new Color(r,g,b);  return randomColor;}  }
class C{  protected static WizardStepHeaderSettings buildConfigurationHeader(){  return WizardStepHeaderSettings.createProductHeader("New Project");}  }
class C{  public boolean containsValue(Object value){  return indexOfValue(value) >= 0;}  }
class C{  public static boolean openUrl(String url){  if (Desktop.isDesktopSupported()) {    Desktop desktop=Desktop.getDesktop();    try {      desktop.browse(new URI(url));      return true;    } catch (    IOException|URISyntaxException|UnsupportedOperationException e) {      e.printStackTrace();      return tryCrossPlatformOpenUrl(url);    }  } else {    return false;  }}  }
class C{  public DOMFactory(){  this("");}  }
class C{  @Override public void useAntiAliasUpdated(boolean value){}  }
class C{  public static <T extends RealFieldElement<T>>T max(final T e1,final T e2){  return e1.subtract(e2).getReal() >= 0 ? e1 : e2;}  }
class C{  public static void showInformation(Object parentIgnored,String message){  showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,10000);}  }
class C{  private void internalPopulate(Map<String,String> options,FieldIdEnum field,String key){  FieldConfigBase fieldConfig=fieldConfigManager.get(field);  if (fieldConfig instanceof FieldConfigBoolean) {    internal_populateBooleanField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigInteger) {    internal_populateIntegerField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigDouble) {    internal_populateDoubleField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigEnum) {    internal_populateEnumField(options,field,key);  } else {    ConsoleManager.getInstance().error(this,"Unsupported field type : " + field + " "+ fieldConfig.getClass().getName());  }}  }
class C{  public static final String millisToMinSecString(long lMillis){  return String.format("%d hours %d min %d sec",lMillis / (1000 * 60 * 60),(lMillis / (1000 * 60)) % 60,(lMillis / 1000) % 60);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTotem_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200885,skillcaster,value0,skillname);}  }
class C{  @Override public Item remove(Item item){  return itemStorage.removeItem(item.getObjectId());}  }
class C{  public boolean removeChild(int node){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public Builder dashArray(String dashArray){  this.dashArray=dashArray;  return this;}  }
class C{  public CorpusTest(String testName){  super(testName);}  }
class C{  public static Color averageColor(Pixmap pixmap){  Color temp=new Color();  float sumR=0.0f;  float sumG=0.0f;  float sumB=0.0f;  int count=0;  for (int y=0; y < pixmap.getHeight(); y++) {    for (int x=0; x < pixmap.getWidth(); x++) {      temp.set(pixmap.getPixel(x,y));      if (temp.a > 0) {        sumR+=temp.r;        sumG+=temp.g;        sumB+=temp.b;        count++;      }    }  }  if (count == 0) {    return new Color(Color.BLACK);  } else {    return new Color(sumR / count,sumG / count,sumB / count,1.0f);  }}  }
class C{  public boolean isSystemApplication(Context context){  PackageManager packageManager=context.getPackageManager();  String packageName=context.getPackageName();  if (packageManager == null || packageName == null || packageName.length() == 0) {    return false;  }  try {    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public String toString(){  CharArrayBuffer buffer=new CharArrayBuffer(16);  buffer.append(this.protocol);  buffer.append('/');  buffer.append(Integer.toString(this.major));  buffer.append('.');  buffer.append(Integer.toString(this.minor));  return buffer.toString();}  }
class C{  public String nextCDATA() throws JSONException {  char c;  int i;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=next();    if (end()) {      throw syntaxError("Unclosed CDATA");    }    sb.append(c);    i=sb.length() - 3;    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {      sb.setLength(i);      return sb.toString();    }  }}  }
class C{  public TDistribution(double degreesOfFreedom) throws MathIllegalArgumentException {  this(degreesOfFreedom,DEFAULT_SOLVER_ABSOLUTE_ACCURACY);}  }
class C{  public JComponent createComponent(){  return createCheckboxGroup();}  }
class C{  public Node addNode(){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  private String versionName(String name){  return versionName(name,version);}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  protected void flushPendingCacheWrites(){  if ((pendingCacheWrites.size() > 0) && (!ResourcesPlugin.getWorkspace().isTreeLocked())) {    int count=pendingCacheWrites.size();    for (int i=0; i < count; i++) {      Map.Entry cachedEntry=nextFromPendingCache();      if (cachedEntry != null) {        IResource resource=(IResource)cachedEntry.getKey();        byte[] value=(byte[])cachedEntry.getValue();        if (value == BYTES_REMOVED)         value=null;        try {          ResourcesPlugin.getWorkspace().getSynchronizer().setSyncInfo(StatusCacheManager.SVN_BC_SYNC_KEY,resource,value);        } catch (        CoreException e) {          SVNProviderPlugin.log(SVNException.wrapException(e));        }        removeFromPendingCacheIfEqual((IResource)cachedEntry.getKey(),(byte[])cachedEntry.getValue());      }    }  }}  }
class C{  public void reject(){  this.isComplete=true;  this.isAcknowledged=true;  this.connection.sendMsg(Topic.RPC,Actions.REJECTION,new String[]{this.name,this.correlationId});}  }
class C{  public static Map<String,Object> createPaymentFromPreference(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");  String paymentRefNum=(String)context.get("paymentRefNum");  String paymentFromId=(String)context.get("paymentFromId");  String comments=(String)context.get("comments");  Timestamp eventDate=(Timestamp)context.get("eventDate");  Locale locale=(Locale)context.get("locale");  if (UtilValidate.isEmpty(eventDate)) {    eventDate=UtilDateTime.nowTimestamp();  }  try {    GenericValue orderPaymentPreference=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderPaymentPreferenceId",orderPaymentPreferenceId).queryOne();    if (orderPaymentPreference == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreated",UtilMisc.toMap("orderPaymentPreferenceId","orderPaymentPreferenceId"),locale));    }    GenericValue orderHeader=orderPaymentPreference.getRelatedOne("OrderHeader",false);    if (orderHeader == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreatedWithRelatedOrderHeader",locale));    }    GenericValue productStore=orderHeader.getRelatedOne("ProductStore",false);    if (productStore == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreatedWithRelatedProductStore",locale));    }    if (paymentFromId == null) {      OrderReadHelper orh=new OrderReadHelper(orderHeader);      GenericValue billToParty=orh.getBillToParty();      if (billToParty != null) {        paymentFromId=billToParty.getString("partyId");      } else {        paymentFromId="_NA_";      }    }    String payToPartyId=productStore.getString("payToPartyId");    if (payToPartyId == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderPaymentCannotBeCreatedPayToPartyIdNotSet",locale));    }    Map<String,Object> paymentParams=new HashMap<String,Object>();    BigDecimal maxAmount=orderPaymentPreference.getBigDecimal("maxAmount");    paymentParams.put("paymentTypeId","CUSTOMER_PAYMENT");    paymentParams.put("paymentMethodTypeId",orderPaymentPreference.getString("paymentMethodTypeId"));    paymentParams.put("paymentPreferenceId",orderPaymentPreference.getString("orderPaymentPreferenceId"));    paymentParams.put("amount",maxAmount);    paymentParams.put("statusId","PMNT_RECEIVED");    paymentParams.put("effectiveDate",eventDate);    paymentParams.put("partyIdFrom",paymentFromId);    paymentParams.put("currencyUomId",productStore.getString("defaultCurrencyUomId"));    paymentParams.put("partyIdTo",payToPartyId);    if (paymentRefNum != null) {      paymentParams.put("paymentRefNum",paymentRefNum);    }    if (comments != null) {      paymentParams.put("comments",comments);    }    paymentParams.put("userLogin",userLogin);    return dispatcher.runSync("createPayment",paymentParams);  } catch (  GenericEntityException ex) {    Debug.logError(ex,"Unable to create payment using payment preference.",module);    return (ServiceUtil.returnError(ex.getMessage()));  }catch (  GenericServiceException ex) {    Debug.logError(ex,"Unable to create payment using payment preference.",module);    return (ServiceUtil.returnError(ex.getMessage()));  }}  }
class C{  public SpyVersions loadVersions() throws XMLException {  setLoading(true);  final String urlString=propertyLoader.getProperty(BasePropertyNames.VERSION_INFO_URL) + "?current=" + currentRelease;  try {    final URL url=new URL(urlString);    final String xml=IOUtils.toString(url.openStream());    versions=(SpyVersions)loadFromString(xml);  } catch (  IOException|NullPointerException e) {    throw new XMLException("Cannot read version info from " + urlString,e);  }  setLoading(false);  return versions;}  }
class C{  public static void drawButtonYoutube(IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){  if (!visible)   return;  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);  getTextureHandler().bindModTexture("textures/misc/youtube256.png");  getGlStateManager().color(1.0F,1.0F,1.0F);  drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14);}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  @Override public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augs) throws XNIException {  int entityIndex=getEntityDeclIndex(name);  if (entityIndex == -1) {    entityIndex=createEntityDecl();    boolean isPE=name.startsWith("%");    boolean inExternal=(fReadingExternalDTD || fPEDepth > 0);    XMLEntityDecl entityDecl=new XMLEntityDecl();    entityDecl.setValues(name,null,null,null,null,text.toString(),isPE,inExternal);    setEntityDecl(entityIndex,entityDecl);  }}  }
class C{  public final void diskFull(final boolean alarmUp,final String directoryName){  if (alarmUp == FallbackAlarmsInterface.ACTIVATED) {    ArrayList recipients=new ArrayList();    MailDetailsBean mailDetails=new MailDetailsBean();    mailDetails.setSender("mruizgar@cern.ch");    recipients.add("mruizgar@cern.ch");    mailDetails.setToRecipients(recipients);    mailDetails.setSubject("Disk Full");    mailDetails.setMessage("The disk " + directoryName + " is getting full");    mailDetails.setServer("cernmx.cern.ch");    SMTPMailSender mailSender=new SMTPMailSender();    try {      mailSender.sendMail(mailDetails);    } catch (    MailSenderException e) {      LOG.debug(e.getMessage());    }  }}  }
class C{  public static int dropAll(String db){  Connection c=null;  PreparedStatement stat=null;  ResultSet r=null;  try {    if (X.isEmpty(db)) {      c=getConnection();    } else {      c=getConnection(db);    }    DatabaseMetaData dm=c.getMetaData();    r=dm.getTables(null,null,"%",new String[]{"TABLE"});    List<String> tables=new ArrayList<String>();    while (r.next()) {      tables.add(r.getString(3));    }    r.close();    r=null;    for (    String t : tables) {      stat=c.prepareStatement("drop table " + t);      stat.executeUpdate();      stat.close();      stat=null;    }    return tables.size();  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return 0;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public Z Div(Z a,Z b) throws JampackException {  double avi, t, tre, tim;  avi=abs(b);  if (avi == 0) {    throw new JampackException("Divide by zero.");  }  avi=1. / avi;  tre=b.re * avi;  tim=-b.im * avi;  t=(a.re * tre - a.im * tim) * avi;  im=(a.im * tre + a.re * tim) * avi;  re=t;  return this;}  }
class C{  public Utterance(Voice voice){  this.voice=voice;  listeners=new Vector();  features=new FeatureSetImpl();  relations=new FeatureSetImpl();}  }
class C{  public int available(){  return length;}  }
class C{  public synchronized void reset(){  this.state=Input.State.RELEASED;  this.value=0;}  }
class C{  public static void main(String[] sArgs){  TAC2008DirectoryFileSet t=new TAC2008DirectoryFileSet("/home/ggianna/JInsect/TAC2008/UpdateSumm08_test_docs_files/");  t.createSets();  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTrainingSet(),"\n"));  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTestSet(),"\n"));  System.err.println("Per category:");  for (  String sCategory : (List<String>)t.getCategories()) {    System.err.println(utils.printIterable(t.getFilesFromCategory(sCategory),"\n"));  }  String sLastCat=(String)t.getCategories().get(t.getCategories().size() - 1);  String sFile=((CategorizedFileEntry)t.getFilesFromCategory(sLastCat).get(0)).getFileName();  System.out.println(t.loadFile(sFile));}  }
class C{  public boolean hasURLsForSelection(){  return false;}  }
class C{  public WallCreateCommentQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  XSParticleDecl traverseAny(Element elmNode,XSDocumentInfo schemaDoc,SchemaGrammar grammar){  Object[] attrValues=fAttrChecker.checkAttributes(elmNode,false,schemaDoc);  XSWildcardDecl wildcard=traverseWildcardDecl(elmNode,attrValues,schemaDoc,grammar);  XSParticleDecl particle=null;  if (wildcard != null) {    int min=((XInt)attrValues[XSAttributeChecker.ATTIDX_MINOCCURS]).intValue();    int max=((XInt)attrValues[XSAttributeChecker.ATTIDX_MAXOCCURS]).intValue();    if (max != 0) {      if (fSchemaHandler.fDeclPool != null) {        particle=fSchemaHandler.fDeclPool.getParticleDecl();      } else {        particle=new XSParticleDecl();      }      particle.fType=XSParticleDecl.PARTICLE_WILDCARD;      particle.fValue=wildcard;      particle.fMinOccurs=min;      particle.fMaxOccurs=max;      particle.fAnnotations=wildcard.fAnnotations;    }  }  fAttrChecker.returnAttrArray(attrValues,schemaDoc);  return particle;}  }
class C{  public void testBoundaryEventSubscriptionDeletedOnDeploymentDelete(){  String deploymentId=deployBoundaryMessageTestProcess();  runtimeService.startProcessInstanceByKeyAndTenantId("messageTest",TENANT_ID);  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  String deploymentId2=deployBoundaryMessageTestProcess();  runtimeService.startProcessInstanceByKeyAndTenantId("messageTest",TENANT_ID);  assertEquals(2,taskService.createTaskQuery().count());  assertEquals(2,getAllEventSubscriptions().size());  repositoryService.deleteDeployment(deploymentId,true);  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  assertEquals(1,getAllEventSubscriptions().size());  repositoryService.deleteDeployment(deploymentId2,true);  assertEquals(0,getAllEventSubscriptions().size());}  }
class C{  public LeadsGetUsersQuery reverse(Boolean value){  return unsafeParam("reverse",value);}  }
class C{  public boolean takeFragmentPhoto(){  this.thePhotoName="MagicalCamera";  this.anotherPhotoName="MagicalCamera";  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  Uri FileUri=getPhotoFileUri(this.thePhotoName,this.anotherPhotoName,this.activity);  if (FileUri != null) {    intent.putExtra(MediaStore.EXTRA_OUTPUT,getPhotoFileUri(this.thePhotoName,this.anotherPhotoName,this.activity));    if (intent.resolveActivity(this.activity.getPackageManager()) != null) {      this.intentFragment=intent;      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  public ConsoleWriter println(){  return println(1);}  }
class C{  public static void clearAll(){  if (sManagers == null)   return;  for (int i=0; i < sManagers.size(); ++i) {    MediaNotificationManager manager=sManagers.valueAt(i);    manager.clearNotification();  }  sManagers.clear();}  }
class C{  public String removeContactMech(String contactMechPurposeTypeId){  return contactMechIdsMap.remove(contactMechPurposeTypeId);}  }
class C{  public NotesDeleteCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {  int[] cValues=new int[3];  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];      if (cValue == 0) {        result.append('\r');      } else       if (cValue == 1) {        result.append('*');      } else       if (cValue == 2) {        result.append('>');      } else       if (cValue == 3) {        result.append(' ');      } else       if (cValue < 14) {        result.append((char)(cValue + 44));      } else       if (cValue < 40) {        result.append((char)(cValue + 51));      } else {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);}  }
class C{  public void search(String query){  if (query == null)   query="";  if (query.equals(m_query))   return;  Tuple[] rem=clearInternal();  m_query=query;  StringTokenizer st=new StringTokenizer(m_query,m_delim);  if (!st.hasMoreTokens())   m_query="";  while (st.hasMoreTokens())   prefixSearch(st.nextToken());  Tuple[] add=getTupleCount() > 0 ? toArray() : null;  fireTupleEvent(add,rem);}  }
class C{  public boolean isParam(){  return false;}  }
class C{  private void bringToHierarchy(SootClass sc){  if (sc.resolvingLevel() >= SootClass.HIERARCHY)   return;  if (Options.v().debug_resolver())   G.v().out.println("bringing to HIERARCHY: " + sc);  sc.setResolvingLevel(SootClass.HIERARCHY);  String className=sc.getName();  ClassSource is=SourceLocator.v().getClassSource(className);  boolean modelAsPhantomRef=is == null;  if (modelAsPhantomRef) {    if (!Scene.v().allowsPhantomRefs()) {      String suffix="";      if (className.equals("java.lang.Object")) {        suffix=" Try adding rt.jar to Soot's classpath, e.g.:\n" + "java -cp sootclasses.jar soot.Main -cp " + ".:/path/to/jdk/jre/lib/rt.jar <other options>";      } else       if (className.equals("javax.crypto.Cipher")) {        suffix=" Try adding jce.jar to Soot's classpath, e.g.:\n" + "java -cp sootclasses.jar soot.Main -cp " + ".:/path/to/jdk/jre/lib/rt.jar:/path/to/jdk/jre/lib/jce.jar <other options>";      }      throw new SootClassNotFoundException("couldn't find class: " + className + " (is your soot-class-path set properly?)"+ suffix);    } else {      G.v().out.println("Warning: " + className + " is a phantom class!");      sc.setPhantomClass();      classToTypesSignature.put(sc,Collections.<Type>emptyList());      classToTypesHierarchy.put(sc,Collections.<Type>emptyList());    }  } else {    Dependencies dependencies=is.resolve(sc);    if (!dependencies.typesToSignature.isEmpty())     classToTypesSignature.put(sc,dependencies.typesToSignature);    if (!dependencies.typesToHierarchy.isEmpty())     classToTypesHierarchy.put(sc,dependencies.typesToHierarchy);  }  reResolveHierarchy(sc);}  }
class C{  public boolean isMatchCase(){  return isOptionEnabled(UrlFilterRuleOption.MATCH_CASE);}  }
class C{  public static void writeStringToFile(File file,String data,String encoding,boolean append) throws IOException {  writeStringToFile(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public static void loadCacheFromHDFS(FileSystem fs,String hdfsFileName,Query query) throws IOException {  logger.info("Loading cache from hdfsFileName = " + hdfsFileName);  Path expPath=new Path(hdfsFileName);  try (BufferedReader br=new BufferedReader(new InputStreamReader(fs.open(expPath)))){    String line;    while ((line=br.readLine()) != null) {      String[] rowValTokens=line.split(",");      BigInteger base=query.getQueryElement(Integer.parseInt(rowValTokens[0]));      String[] expMod=rowValTokens[1].split("-");      BigInteger exponent=new BigInteger(expMod[0]);      BigInteger value=new BigInteger(expMod[1]);      Tuple3<BigInteger,BigInteger,BigInteger> key=new Tuple3<>(base,exponent,query.getNSquared());      expCache.put(key,value);    }  } }  }
class C{  public void stopPlayingAudio(String id){  AudioPlayer audio=this.players.get(id);  if (audio != null) {    audio.stopPlaying();  }}  }
class C{  public int add(E o){  objectToInts.put(o,counter);  intToObjects.add(o);  return counter++;}  }
class C{  public void insertASObject(ASObject asobject){  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}  }
class C{  public static void createFlight(AirMapFlight flight,final AirMapCallback<AirMapFlight> listener){  String url=flightBaseUrl + flight.getGeometryType().toString();  JSONObject params=flight.getAsParams();  AirMap.getClient().postWithJsonBody(url,params,new GenericOkHttpCallback(listener,AirMapFlight.class));}  }
class C{  public static Quaternion add(final Quaternion q1,final Quaternion q2){  return new Quaternion(q1.getQ0() + q2.getQ0(),q1.getQ1() + q2.getQ1(),q1.getQ2() + q2.getQ2(),q1.getQ3() + q2.getQ3());}  }
class C{  public Iterator<E> iterator(){  return map.keySet().iterator();}  }
class C{  private void createOrUpdateTargetSsl(CommandInput input){  if (input.getCredentials() == null) {    return;  }  if (!isSecure(input.getDockerUri())) {    return;  }  String clientKey=EncryptionUtils.decrypt(input.getCredentials().privateKey);  String clientCert=input.getCredentials().publicKey;  String alias=input.getDockerUri().toString().toLowerCase();  if (clientKey != null && !clientKey.isEmpty()) {    X509ExtendedKeyManager delegateKeyManager=(X509ExtendedKeyManager)CertificateUtil.getKeyManagers(alias,clientKey,clientCert)[0];    keyManager.putDelegate(alias,delegateKeyManager);  }  String sslTrust=(String)input.getProperties().get(SSL_TRUST_CERT_PROP_NAME);  if (sslTrust != null && trustManager != null) {    String trustAlias=(String)input.getProperties().get(SSL_TRUST_ALIAS_PROP_NAME);    trustManager.putDelegate(trustAlias,sslTrust);  }}  }
class C{  private void runScript() throws ScriptException, IOException {  lastReturnValue=null;  setLastThrownException(null);  if (script.getScriptFile() != null) {    lastReturnValue=script.getScriptEngine().eval(new InputStreamReader(FileUtils.loadFileByName(script.getScriptFile().getAbsolutePath())));    logger.debug("Script {} returned with value {}",script.getName(),lastReturnValue);  } else   if (script.getScriptContent() != null) {    lastReturnValue=script.getScriptEngine().eval(script.getScriptContent());    logger.debug("Inline script {} returned with value {}",script.getName(),lastReturnValue);  } else {    logger.warn("No script content defined for script {}",script.getName());  }  if (lastReturnValue == null) {    changeState(ScriptRunningState.FINISHED);  } else   if (lastReturnValue instanceof Boolean) {    if ((Boolean)lastReturnValue) {      changeState(ScriptRunningState.FINISHED);    } else {      changeState(ScriptRunningState.STOPPED);    }  } else {    changeState(ScriptRunningState.FINISHED);  }}  }
class C{  public synchronized void stop(){  if (mAnimatorSet == null || !mIsStarted) {    return;  }  mAnimatorSet.end();}  }
class C{  public void addLive(boolean live){  query.append(" +live:" + live);}  }
class C{  static double[] slowLog(double xi){  double x[]=new double[2];  double x2[]=new double[2];  double y[]=new double[2];  double a[]=new double[2];  split(xi,x);  x[0]+=1.0;  resplit(x);  splitReciprocal(x,a);  x[0]-=2.0;  resplit(x);  splitMult(x,a,y);  x[0]=y[0];  x[1]=y[1];  splitMult(x,x,x2);  y[0]=LN_SPLIT_COEF[LN_SPLIT_COEF.length - 1][0];  y[1]=LN_SPLIT_COEF[LN_SPLIT_COEF.length - 1][1];  for (int i=LN_SPLIT_COEF.length - 2; i >= 0; i--) {    splitMult(y,x2,a);    y[0]=a[0];    y[1]=a[1];    splitAdd(y,LN_SPLIT_COEF[i],a);    y[0]=a[0];    y[1]=a[1];  }  splitMult(y,x,a);  y[0]=a[0];  y[1]=a[1];  return y;}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  public NodeReactor findNodeReactor(IapMessageFields messageFields){  for (int i=0; i < nodeReactors.length; i++) {    if (messageFields.equalsReceiverNodeId(this.nodeReactors[i].nodeId)) {      return nodeReactors[i];    }  }  return null;}  }
class C{  public short[] keys(){  short[] keys=new short[size()];  short[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  protected String[] diff_halfMatch(String text1,String text2){  if (Diff_Timeout <= 0) {    return null;  }  String longtext=text1.length() > text2.length() ? text1 : text2;  String shorttext=text1.length() > text2.length() ? text2 : text1;  if (longtext.length() < 4 || shorttext.length() * 2 < longtext.length()) {    return null;  }  String[] hm1=diff_halfMatchI(longtext,shorttext,(longtext.length() + 3) / 4);  String[] hm2=diff_halfMatchI(longtext,shorttext,(longtext.length() + 1) / 2);  String[] hm;  if (hm1 == null && hm2 == null) {    return null;  } else   if (hm2 == null) {    hm=hm1;  } else   if (hm1 == null) {    hm=hm2;  } else {    hm=hm1[4].length() > hm2[4].length() ? hm1 : hm2;  }  if (text1.length() > text2.length()) {    return hm;  } else {    return new String[]{hm[2],hm[3],hm[0],hm[1],hm[4]};  }}  }
class C{  public static void logPromoOutcome(boolean wasTap){  int preferenceCode=getPreferenceValue();  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchFirstRunFlowOutcome",preferenceCode,PREFERENCE_HISTOGRAM_BOUNDARY);  int preferenceByGestureCode=getPromoByGestureStateCode(preferenceCode,wasTap);  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchPromoOutcomeByGesture",preferenceByGestureCode,PROMO_BY_GESTURE_BOUNDARY);}  }
class C{  public static void validate(SpaceURL spaceURL) throws Exception {  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("attributesSpaceUrl  =  " + spaceURL);  }  try {    validateURL(spaceURL);  } catch (  SpaceURLValidationException e) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("Exception while validating space URL: " + e.getMessage() + "\nSpace URL: "+ spaceURL);    }    throw e;  }}  }
class C{  protected AdsDeleteCampaignsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  private List<SymbolTypeConfig> readValueListConfig(Class<?> localisationClass,Class<?> panelId,XMLFieldConfigEnumValueList valueList){  List<SymbolTypeConfig> configList=new ArrayList<SymbolTypeConfig>();  for (  XMLFieldConfigEnumValue valueObj : valueList.getValue()) {    SymbolTypeConfig config=parseSymbolTypeConfig(localisationClass,panelId,valueObj);    configList.add(config);  }  return configList;}  }
class C{  private void updateExhaustionWithTime(EntityPlayer player){  ++this.exhaustionTimer;  if (this.exhaustionTimer >= EXHAUSTION_WITH_TIME_PERIOD) {    if (!player.capabilities.disableDamage) {      this.addExhaustion(EXHAUSTION_WITH_TIME_AMOUNT);    }    this.exhaustionTimer=0;  }}  }
class C{  public static String toStringPacked(byte[] packed){  StringBuilder buf=new StringBuilder();  for (  byte a : packed)   buf.append(" ").append(a & 0xFF);  return buf.toString();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public Cons(T car,Cons<T> cdr){  this.car=Objects.requireNonNull(car);  this.cdr=cdr;}  }
class C{  @Override protected String dateToString(DateTimeData date){  StringBuffer message=new StringBuffer(6);  message.append('-');  message.append('-');  message.append('-');  append(message,date.day,2);  append(message,(char)date.utc,0);  return message.toString();}  }
class C{  public Boolean isValidOptionValue(String value){  if (!hasOptionSet() || value == null) {    return false;  }  for (  Option option : getOptionSet().getOptions()) {    if (value.equals(option.getCode())) {      return true;    }  }  return false;}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public NonPositiveDefiniteOperatorException(){  super(org.hipparchus.migration.exception.util.LocalizedFormats.NON_POSITIVE_DEFINITE_OPERATOR);}  }
class C{  public static void parse(PokemonGo api,RequestType requestType,ByteString data){  try {switch (requestType) {case GET_INVENTORY:      api.getInventories().updateInventories(GetInventoryResponse.parseFrom(data));    break;case DOWNLOAD_SETTINGS:  api.getSettings().updateSettings(DownloadSettingsResponse.parseFrom(data));break;default :break;}} catch (InvalidProtocolBufferException e) {throw new AsyncRemoteServerException(e);}}  }
class C{  public void valueChanged(TreeSelectionEvent e){  if (!jtree.inSelection) {    jtree.inSelection=true;    Set<Integer> ids2Select=new HashSet<>();    Set<Integer> ids2Deselect=new HashSet<>();    for (    TreePath path : e.getPaths()) {      final ViewerJTree.MyJTreeNode node=(ViewerJTree.MyJTreeNode)path.getLastPathComponent();      if (e.isAddedPath(path))       ids2Select.add((Integer)node.getV().getInfo()); else       ids2Deselect.add((Integer)node.getV().getInfo());    }    if (ids2Select.size() > 0 || ids2Deselect.size() > 0) {      if (ids2Deselect.size() > 0)       ClassificationViewer.setSelectedIds(ids2Deselect,false);      if (ids2Select.size() > 0) {        ClassificationViewer.setSelectedIds(ids2Select,true);        Node v=ClassificationViewer.getANode(ids2Select.iterator().next());        if (v != null)         ClassificationViewer.scrollToNode(v);      }      ClassificationViewer.repaint();    }    jtree.inSelection=false;  }}  }
class C{  protected NewsfeedDeleteListQuery listId(int value){  return unsafeParam("list_id",value);}  }
class C{  public void startPlayingAudio(String id,String file){  AudioPlayer audio=getOrCreatePlayer(id,file);  audio.startPlaying(file);  getAudioFocus();}  }
class C{  public static PhasedBackoffWaitStrategy withLock(long spinTimeout,long yieldTimeout,TimeUnit units){  return new PhasedBackoffWaitStrategy(spinTimeout,yieldTimeout,units,new BlockingWaitStrategy());}  }
class C{  public boolean isUpdateOf(ComponentDescription other){  return !(other == null || !this.getClass().equals(other.getClass()) || !name.equals(other.getName()) || other.getStatus() != Status.INSTALLED || !(isVersionNewerThan(version,other.getVersion())));}  }
class C{  public synchronized void resume(){  if (isPaused()) {    setPaused(false);    if (!isCancelled() && line != null) {      line.start();      notify();    }  }}  }
class C{  private void performZoom(MotionEvent event){  if (event.getPointerCount() >= 2) {    OnChartGestureListener l=mChart.getOnChartGestureListener();    float totalDist=spacing(event);    if (totalDist > mMinScalePointerDistance) {      MPPointF t=getTrans(mTouchPointCenter.x,mTouchPointCenter.y);      ViewPortHandler h=mChart.getViewPortHandler();      if (mTouchMode == PINCH_ZOOM) {        mLastGesture=ChartGesture.PINCH_ZOOM;        float scale=totalDist / mSavedDist;        boolean isZoomingOut=(scale < 1);        boolean canZoomMoreX=isZoomingOut ? h.canZoomOutMoreX() : h.canZoomInMoreX();        boolean canZoomMoreY=isZoomingOut ? h.canZoomOutMoreY() : h.canZoomInMoreY();        float scaleX=(mChart.isScaleXEnabled()) ? scale : 1f;        float scaleY=(mChart.isScaleYEnabled()) ? scale : 1f;        if (canZoomMoreY || canZoomMoreX) {          mTouchMatrix.set(mSavedMatrix);          mTouchMatrix.postScale(scaleX,scaleY,t.x,t.y);          if (l != null)           l.onChartScale(event,scaleX,scaleY);        }      } else       if (mTouchMode == X_ZOOM && mChart.isScaleXEnabled()) {        mLastGesture=ChartGesture.X_ZOOM;        float xDist=getXDist(event);        float scaleX=xDist / mSavedXDist;        boolean isZoomingOut=(scaleX < 1);        boolean canZoomMoreX=isZoomingOut ? h.canZoomOutMoreX() : h.canZoomInMoreX();        if (canZoomMoreX) {          mTouchMatrix.set(mSavedMatrix);          mTouchMatrix.postScale(scaleX,1f,t.x,t.y);          if (l != null)           l.onChartScale(event,scaleX,1f);        }      } else       if (mTouchMode == Y_ZOOM && mChart.isScaleYEnabled()) {        mLastGesture=ChartGesture.Y_ZOOM;        float yDist=getYDist(event);        float scaleY=yDist / mSavedYDist;        boolean isZoomingOut=(scaleY < 1);        boolean canZoomMoreY=isZoomingOut ? h.canZoomOutMoreY() : h.canZoomInMoreY();        if (canZoomMoreY) {          mTouchMatrix.set(mSavedMatrix);          mTouchMatrix.postScale(1f,scaleY,t.x,t.y);          if (l != null)           l.onChartScale(event,1f,scaleY);        }      }      MPPointF.recycleInstance(t);    }  }}  }
class C{  private void drawText(Canvas canvas,int index,Paint paint,String text){  if (isIllegalIndex(index)) {    return;  }  int x=getXByIndex(index);  int y=getYByIndex(index);  float top=cellHeight + (y - 1) * cellHeight;  float bottom=top + cellHeight;  float baseline=RenderUtil.getBaseline(top,bottom,paint);  float startX=RenderUtil.getStartX(cellWidth * (x - 1) + cellWidth * 0.5f,paint,text);  canvas.drawText(text,startX,baseline,paint);}  }
class C{  public DruidDimensionsLoader(PhysicalTableDictionary physicalTableDictionary,DimensionDictionary dimensionDictionary,DruidWebService druidWebService){  super(DruidDimensionsLoader.class.getSimpleName(),SYSTEM_CONFIG.getLongProperty(DRUID_DIM_LOADER_TIMER_DELAY_KEY,0),SYSTEM_CONFIG.getLongProperty(DRUID_DIM_LOADER_TIMER_DURATION_KEY,TimeUnit.MILLISECONDS.toMillis(60000)));  this.druidWebService=druidWebService;  this.errorCallback=getErrorCallback();  this.failureCallback=getFailureCallback();  lastRunTimestamp=new AtomicReference<>();  List<String> dimensionStr=SYSTEM_CONFIG.getListProperty(DRUID_DIM_LOADER_DIMENSIONS);  dimensions=dimensionStr.stream().map(null).map(null).collect(Collectors.toList());  dataSources=physicalTableDictionary.values().stream().map(null).collect(Collectors.toList());}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public RequestHandle put(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPut(url),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public final boolean equals(T o1,T o2){  return o1 == null ? o2 == null : o1.equals(o2);}  }
class C{  public GroupsIsMemberQueryWithExtended isMemberExtended(String groupId){  return new GroupsIsMemberQueryWithExtended(getClient(),groupId);}  }
class C{  public static ArrayList<String> matches(String text,int results){  ArrayList<String> urls=new ArrayList<String>();  String[] splitString=(text.split(" "));  for (  String string : splitString) {    try {      URL item=new URL(string);      urls.add(item.toString());    } catch (    Exception e) {    }    if (results == FIRST && urls.size() > 0)     break;  }  return urls;}  }
class C{  public static JavaRDD<List<List<Writable>>> zeroMeanUnitVarianceSequence(Schema schema,JavaRDD<List<List<Writable>>> sequence){  return zeroMeanUnitVarianceSequence(schema,sequence,null);}  }
class C{  @Override public int next(){  try {    if (pairedReads)     reader.skipBytes(8);    readText=reader.readString();    final int numberOfMatches=reader.readInt();    reader.skipBytes(numberOfMatches * cNames.length * 4);    matchesText=reader.readString().getBytes();    matchesTextLength=matchesText.length;    return numberOfMatches;  } catch (  IOException ex) {    Basic.caught(ex);    return -1;  }}  }
class C{  public void clearAccumulatedForce(){  this.forces.clear();}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public void renderEndingBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  if (this.widgetCommentsEnabled) {    writer.append(this.buildBoundaryComment("End",widgetType,modelWidget.getBoundaryCommentName()));  }}  }
class C{  public void next(){  goToPage(getRowCount(),getCurrentPage() + 1);}  }
class C{  public PitchFrameProvider(DoubleDataSource signal,DoubleDataSource pitchmarks,InlineDataProcessor processor,int samplingRate){  this(signal,pitchmarks,processor,samplingRate,1,1);}  }
class C{  @Nullable private static Properties parseProperties(File propsFile){  if (!propsFile.exists()) {    return null;  }  try (InputStream fis=new FileInputStream(propsFile)){    Properties props=new Properties();    props.load(fis);    if (props.size() > 0) {      return props;    }  } catch (  IOException e) {  }  return null;}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((comboBox != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof String) {      String oldValue=(String)undoRedoObject.getNewValue();      ValueComboBoxData valueComboBoxData=comboDataMap.get(oldValue);      if (valueComboBoxData != null) {        comboBox.setSelectedItem(valueComboBoxData);      }    }  }}  }
class C{  public AggregateConfig(Configuration config,String[] configArgs,ClassLoader loader) throws ConfigurationException {  specific=ConfigurationProvider.getInstance(configArgs,loader);  common=config;}  }
class C{  private void updateSubEquipmentStatus(){  boolean down=false;  StringBuilder invalidationMessage=new StringBuilder();  for (  SupervisionEvent event : subEquipmentSupervisionStatus.values()) {    if (event != null) {      boolean isDown=false;      isDown|=event.getStatus().equals(SupervisionStatus.DOWN);      isDown|=event.getStatus().equals(SupervisionStatus.STOPPED);      if (isDown) {        down=true;        if (invalidationMessage.length() > 0) {          invalidationMessage.append("; ");        }        invalidationMessage.append(event.getMessage());      }    }  }  if (down) {    tagQuality.addInvalidStatus(TagQualityStatus.SUBEQUIPMENT_DOWN,invalidationMessage.toString());  } else {    tagQuality.removeInvalidStatus(TagQualityStatus.SUBEQUIPMENT_DOWN);  }}  }
class C{  private boolean release(String id){  AudioPlayer audio=players.remove(id);  if (audio == null) {    return false;  }  if (players.isEmpty()) {    onLastPlayerReleased();  }  audio.destroy();  return true;}  }
class C{  public String build(){  StringWriter writer=new StringWriter();  StreamResult result=new StreamResult(writer);  build(result);  return writer.toString();}  }
class C{  public void createIndex(String label,String propertyName){  Objects.requireNonNull(label,"label cannot be null");  Objects.requireNonNull(propertyName,"propertyName cannot be null");  Neo4JSession session=currentSession();  transaction.readWrite();  session.executeStatement(new Statement("CREATE INDEX ON :`" + label + "`("+ propertyName+ ")"));}  }
class C{  private boolean isRecent(ByteBuffer slabId){  UUID uuid=TimeUUIDSerializer.get().fromByteBuffer(slabId.duplicate());  long age=System.currentTimeMillis() - TimeUUIDs.getTimeMillis(uuid);  return age <= Constants.OPEN_SLAB_MARKER_TTL.getMillis();}  }
class C{  public final void close() throws IOException {}  }
class C{  public void increaseValue(TKeyType oXValue,double dYValue){  hDistro.put(oXValue,getValue(oXValue) + dYValue);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBINE_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300788,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_SUBZONE_FOUND(String value0){  return new SM_SYSTEM_MESSAGE(1300748,value0);}  }
class C{  public boolean isBlockInHand(){  if (!hasItem()) {    return false;  }  return item.getType().isBlock();}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  private void fixList(Node<E> t,Node<E> h){  Node<E> curNodeNext;  Node<E> curNode=t;  while (h == this.head && curNode != h) {    curNodeNext=curNode.getNext();    curNodeNext.setPrev(curNode);    curNode=curNode.getNext();  }}  }
class C{  public NewsfeedIgnoreItemQuery ignoreItem(UserActor actor,NewsfeedItemType type,int ownerId,int itemId){  return new NewsfeedIgnoreItemQuery(getClient(),actor,type,ownerId,itemId);}  }
class C{  @Override public void unindent(){  _nextIndent-=_format.getIndent();  if (_nextIndent < 0)   _nextIndent=0;  if ((_line.length() + _spaces + _text.length()) == 0)   _thisIndent=_nextIndent;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sprint_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200722,skillcaster,skillname);}  }
class C{  public static String makeCompositeParam(String prefix,String suffix){  return prefix + COMPOSITE_DELIMITER + suffix;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_INFO_2_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400072,value0);}  }
class C{  public boolean isResourceNotAJar(Resource resource){  try {    return !resource.getURI().getScheme().equals("jar");  } catch (  IOException e) {    return true;  }}  }
class C{  public void multiply(final double[] lhs,final int lhsOffset,final double[] rhs,final int rhsOffset,final double[] result,final int resultOffset){  for (int i=0; i < multIndirection.length; ++i) {    final int[][] mappingI=multIndirection[i];    double r=0;    for (int j=0; j < mappingI.length; ++j) {      r+=mappingI[j][0] * lhs[lhsOffset + mappingI[j][1]] * rhs[rhsOffset + mappingI[j][2]];    }    result[resultOffset + i]=r;  }}  }
class C{  public void removeFromContacts(){  skype.removeFromContacts(this);}  }
class C{  protected void addLanguageVariables(BundleContext context){  Language defaultLanguage=APILocator.getLanguageAPI().getLanguage("en","US");  addLanguageVariables(context,defaultLanguage);}  }
class C{  public void remove(String accountName){  Iterator<String> it=mMap.keySet().iterator();  while (it.hasNext()) {    String key=it.next();    Log_OC.d("IndexedForest","Number of pending downloads= " + mMap.size());    if (key.startsWith(accountName)) {      mMap.remove(key);    }  }}  }
class C{  public AsyncHttpClient(int httpPort,int httpsPort){  this(false,httpPort,httpsPort);}  }
class C{  @MediumTest public void testPreconditions(){  assertNotNull(mTextView);}  }
class C{  public int removeByPrimaryKey(GenericPK primaryKey) throws GenericEntityException {  if (primaryKey == null)   return 0;  if (Debug.verboseOn())   Debug.logVerbose("Removing GenericPK: " + primaryKey.toString(),module);  return genericDAO.delete(primaryKey);}  }
class C{  public SymbolicGraph(int iMinNGramSize,int iMaxNGramSize){  super(16);  MaxNGramSize=iMaxNGramSize;  MinNGramSize=iMinNGramSize;}  }
class C{  public static <T>ObservableList<T> filter(ObservableList<T> items,Function<T,ObservableBooleanValue> conditionExtractor){  return filterInternal(items,conditionExtractor,null);}  }
class C{  public PhiExpr newPhiExpr(List<Value> args,List<Unit> preds){  return new SPhiExpr(args,preds);}  }
class C{  private boolean[] mapNullableColumns(TableColumnInfo tableMetadata){  boolean[] nullableColumns=new boolean[this.columns.length];  for (int i=0; i < this.columns.length; i++) {    String column=columns[i];    nullableColumns[i]=tableMetadata.getColumn(column).isNullable();  }  return nullableColumns;}  }
class C{  public JsonObject toJson(){  JsonObject json=new JsonObject();  json.put("path",path);  if (method != null) {    json.put("method",method.name());  }  if (headers != null && !headers.isEmpty()) {    json.put("headers",toJsonArray(headers));  }  if (params != null && !params.isEmpty()) {    json.put("params",toJsonArray(params));  }  if (formAttributes != null && !formAttributes.isEmpty()) {    json.put("formAttributes",toJsonArray(formAttributes));  }  return json;}  }
class C{  public VideoReorderVideosQuery afterOwnerId(Integer value){  return unsafeParam("after_owner_id",value);}  }
class C{  public void cleanup(){  if (!initedNative)   return;  NativeInterface.arwStopRunning();  NativeInterface.arwShutdownAR();  if (debugBitmap != null)   debugBitmap.recycle();  debugBitmap=null;  initedNative=false;}  }
class C{  protected void testUrl(){  try {    if (this.urlField.getText().trim().length() == 0) {      ProxyTester.this.logArea.append("ERROR\tPlease enter an URL first.\n");      return;    }    this.logArea.setText("");    Strategy pss=(Strategy)this.modes.getSelectedItem();    ProxySearch ps=new ProxySearch();    ps.addStrategy(pss);    ProxySelector psel=ps.getProxySelector();    if (psel == null) {      ProxyTester.this.logArea.append("ERROR\tNo proxy settings available for this mode.\n");      return;    }    ProxySelector.setDefault(psel);    URL url=new URL(this.urlField.getText().trim());    List<Proxy> result=psel.select(url.toURI());    if (result == null || result.size() == 0) {      ProxyTester.this.logArea.append("INFO\tNo proxy found for this url.\n");      return;    }    ProxyTester.this.logArea.append("INFO\tProxy Settings found using " + pss + " strategy.\n");    ProxyTester.this.logArea.append("INFO\tProxy used for URL is: " + result.get(0) + "\n");  } catch (  Exception e) {    JOptionPane.showMessageDialog(this,"Error:" + e.getMessage(),"Error checking URL.",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public SecretKeys(SecretKey confidentialityKeyIn,SecretKey integrityKeyIn){  setConfidentialityKey(confidentialityKeyIn);  setIntegrityKey(integrityKeyIn);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private static MemoryPointer tryMemoryPointer(Dynamic dynamic){  Entity entity=dynamic.klass().entity();  Field[] fields=entity.getFields();  MemoryPointer mp=new MemoryPointer();  Field[] mpFields=mp.klass().entity().getFields();  if (mpFields.length != fields.length) {    return null;  }  for (int i=0; i < fields.length; ++i) {    if (!fields[i].equals(mpFields[i])) {      return null;    }  }  long address=((Long)dynamic.getFieldValue(0)).longValue();  int poolId=((Number)dynamic.getFieldValue(1)).intValue();  mp.setAddress(address);  mp.setPool(poolId);  return mp;}  }
class C{  public void subscribeTopic(String topicName){  if (PrefsHelper.hasFCMToken(mContext)) {    FirebaseMessaging.getInstance().subscribeToTopic(topicName);  }}  }
class C{  public static IngredientsFragment newInstance(Recipe recipe,int sectionNumber){  IngredientsFragment fragment=new IngredientsFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public PiNodeManager(ShimpleBody body,boolean trimmed){  this.body=body;  this.trimmed=trimmed;  sf=G.v().shimpleFactory;}  }
class C{  public static void addMacro(Player player,int macroPosition,String macroXML){  if (player.getMacroList().addMacro(macroPosition,macroXML)) {    DAOManager.getDAO(PlayerMacrossesDAO.class).addMacro(player.getObjectId(),macroPosition,macroXML);  } else {    DAOManager.getDAO(PlayerMacrossesDAO.class).updateMacro(player.getObjectId(),macroPosition,macroXML);  }}  }
class C{  private Properties readSettings() throws ProxyException {  try {    return this.settingsParser.parseSettings();  } catch (  IOException e) {    Logger.log(getClass(),LogLevel.ERROR,"Can't parse settings.",e);    throw new ProxyException(e);  }}  }
class C{  private void addLogConfiguration(CommandInput input,LogConfig logConfig){  Map<String,Object> hostConfig=getOrAddMap(input,DOCKER_CONTAINER_HOST_CONFIG_PROP_NAME);  Map<String,Object> logConfigMap=new HashMap<>();  logConfigMap.put(DOCKER_CONTAINER_LOG_CONFIG_PROP_TYPE_NAME,logConfig.type);  logConfigMap.put(DOCKER_CONTAINER_LOG_CONFIG_PROP_CONFIG_NAME,logConfig.config);  hostConfig.put(DOCKER_CONTAINER_LOG_CONFIG_PROP_NAME,logConfigMap);}  }
class C{  public void readFully(byte[] data,int offset,int length) throws IOException, EOFException {  int remaining=length;  while (remaining > 0) {    int location=offset + length - remaining;    int count=read(data,location,remaining);    if (-1 == count) {      throw new EOFException();    }    remaining-=count;  }}  }
class C{  public int size(){  return m_size;}  }
class C{  protected void showModels(Iterable<EpoxyModel<?>> models,boolean show){  for (  EpoxyModel<?> model : models) {    showModel(model,show);  }}  }
class C{  public WallPostQuery markAsAds(Boolean value){  return unsafeParam("mark_as_ads",value);}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testAttachmentEntityEvents() throws Exception {  if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.ACTIVITY)) {    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");    Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();    assertNotNull(task);    Attachment attachment=taskService.createAttachment("test",task.getId(),processInstance.getId(),"attachment name","description","http://activiti.org");    assertNull(attachment.getUserId());    assertEquals(2,listener.getEventsReceived().size());    ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());    assertEquals(processInstance.getId(),event.getProcessInstanceId());    assertEquals(processInstance.getId(),event.getExecutionId());    assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());    Attachment attachmentFromEvent=(Attachment)event.getEntity();    assertEquals(attachment.getId(),attachmentFromEvent.getId());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);    assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());    assertEquals(processInstance.getId(),event.getProcessInstanceId());    assertEquals(processInstance.getId(),event.getExecutionId());    assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());    attachmentFromEvent=(Attachment)event.getEntity();    assertEquals(attachment.getId(),attachmentFromEvent.getId());    listener.clearEventsReceived();    Authentication.setAuthenticatedUserId("testuser");    attachment=taskService.createAttachment("test",task.getId(),processInstance.getId(),"attachment name","description",new ByteArrayInputStream("test".getBytes()));    assertNotNull(attachment.getUserId());    assertEquals("testuser",attachment.getUserId());    assertEquals(2,listener.getEventsReceived().size());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());    assertEquals(processInstance.getId(),event.getProcessInstanceId());    assertEquals(processInstance.getId(),event.getExecutionId());    assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());    attachmentFromEvent=(Attachment)event.getEntity();    assertEquals(attachment.getId(),attachmentFromEvent.getId());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);    assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());    listener.clearEventsReceived();    attachment=taskService.getAttachment(attachment.getId());    attachment.setDescription("Description");    taskService.saveAttachment(attachment);    assertEquals(1,listener.getEventsReceived().size());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());    assertEquals(processInstance.getId(),event.getProcessInstanceId());    assertEquals(processInstance.getId(),event.getExecutionId());    assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());    attachmentFromEvent=(Attachment)event.getEntity();    assertEquals(attachment.getId(),attachmentFromEvent.getId());    assertEquals("Description",attachmentFromEvent.getDescription());    listener.clearEventsReceived();    taskService.deleteAttachment(attachment.getId());    assertEquals(1,listener.getEventsReceived().size());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());    assertEquals(processInstance.getId(),event.getProcessInstanceId());    assertEquals(processInstance.getId(),event.getExecutionId());    assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());    attachmentFromEvent=(Attachment)event.getEntity();    assertEquals(attachment.getId(),attachmentFromEvent.getId());  }}  }
class C{  public int addRow(){  int r=m_rows.addRow();  updateRowCount();  fireTableEvent(r,r,TableModelEvent.ALL_COLUMNS,TableModelEvent.INSERT);  return r;}  }
class C{  final public void notfound(){  if (log.isWarnEnabled())   log.warn(this.getClass().getName() + "[" + this.getURI()+ "]");  Model m=Module.home.getModel(method.method,"/notfound");  if (m != null && !m.getClass().equals(this.getClass())) {    try {      m.copy(this);      if (method.isGet()) {        m.onGet();      } else {        m.onPost();      }      return;    } catch (    Exception e) {      log.error(e.getMessage(),e);    }  }  if (isAjax()) {    JSON jo=new JSON();    jo.put(X.STATE,HttpServletResponse.SC_NOT_FOUND);    jo.put(X.MESSAGE,"not found");    this.response(jo);  } else {    this.set("me",this.getUser());    this.show("/notfound.html");    this.setStatus(HttpServletResponse.SC_NOT_FOUND);  }}  }
class C{  public void putLang(String locale,String name){  File f=new File(path + "/i18n/" + locale+ ".lang");  Map<String,String> tmp=new TreeMap<String,String>();  tmp.put(name,name);  if (f.exists()) {    BufferedReader reader=null;    try {      reader=new BufferedReader(new InputStreamReader(new FileInputStream(f),"UTF-8"));      String line=reader.readLine();      while (line != null) {        line=line.trim();        if (!line.startsWith("#")) {          int i=line.indexOf("=");          if (i > 0) {            String s1=line.substring(0,i);            String s2=line.substring(i + 1);            tmp.put(s1,s2);          }        }        line=reader.readLine();      }    } catch (    Exception e) {      log.error(f.getAbsolutePath(),e);    } finally {      if (reader != null) {        try {          reader.close();        } catch (        IOException e) {          log.error(e);        }      }    }  } else {    f.getParentFile().mkdirs();  }  PrintStream out=null;  try {    out=new PrintStream(f,"UTF-8");    for (    String key : tmp.keySet()) {      out.println(key + "=" + tmp.get(key));    }    out.flush();  } catch (  Exception e) {    log.error(e.getMessage(),e);  } finally {    try {      out.close();    } catch (    Exception e) {    }  }}  }
class C{  private void skipToEndOfLine(){  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n') {      pos++;      break;    }  }}  }
class C{  public static double tfidf(double td,double idf){  return td * idf;}  }
class C{  public Item appendItem(){  return appendItem(null);}  }
class C{  public NotificationAdapter(){}  }
class C{  public void insertComponent(String componentName){  openInsertDialog().insertComponent(componentName);}  }
class C{  public void removeFile(File file){  removeEntry(file.getPath());}  }
class C{  public Boolean deleteSalesOrderItem(EntityManager em,String id){  boolean status=true;  SalesOrderItem soItem=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    soItem=em.find(SalesOrderItem.class,new SalesOrderItemId(id,1));    em.remove(soItem);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during delete of Sales Order Item. Detailed info: " + e);  }  return status;}  }
class C{  private void drawBackground(Canvas canvas){  canvas.save();  float dragPercent=Math.min(1f,Math.abs(mPercent));  float backgroundScale;  float scalePercentDelta=dragPercent - SCALE_START_PERCENT;  if (scalePercentDelta > 0) {    float scalePercent=scalePercentDelta / (1.0f - SCALE_START_PERCENT);    backgroundScale=BACKGROUND_INITIAL_SCALE - (BACKGROUND_INITIAL_SCALE - 1.0f) * scalePercent;  } else {    backgroundScale=BACKGROUND_INITIAL_SCALE;  }  canvas.scale(backgroundScale,backgroundScale,canvas.getWidth() / 2f,mParent.getTotalDragDistance() / 2f);  mConfig.getBackgroundDrawable().setBounds(0,0,canvas.getWidth(),mParent.getTotalDragDistance());  mConfig.getBackgroundDrawable().draw(canvas);  canvas.restore();}  }
class C{  public JPanel createSymbolSelectionPanel(){  return null;}  }
class C{  public static File createTempResultFile() throws IOException {  File tempResultFile=File.createTempFile(tempFilePrefix,".res");  tempResultFile.deleteOnExit();  return tempResultFile;}  }
class C{  public void clearValues(){  if (mDataSets != null) {    mDataSets.clear();  }  notifyDataChanged();}  }
class C{  public static java.util.Date toDate(int month,int day,int year,int hour,int minute,int second){  Calendar calendar=Calendar.getInstance();  try {    calendar.set(year,month - 1,day,hour,minute,second);    calendar.set(Calendar.MILLISECOND,0);  } catch (  Exception e) {    return null;  }  return new java.util.Date(calendar.getTime().getTime());}  }
class C{  protected boolean validatePage(){  boolean valid=false;switch (getSaveType()) {case WORKSPACE:    valid=validateWorkspaceLocation();  break;case FILESYSTEM:File file=new File(getFilesystemFile());valid=isValidFile(file);break;case CLIPBOARD:valid=true;break;}if (valid) {setMessage(null);setErrorMessage(null);} else {setErrorMessage(Policy.bind("GenerateSVNDiff.EnterFilename"));}setPageComplete(valid && getSelectedResources().length > 0);return valid;}  }
class C{  public boolean dynamic_order(){  return soot.PhaseOptions.getBoolean(options,"dynamic-order");}  }
class C{  public SM_ACCOUNT_AUTH(int accountId,int loginOk,int playOk1,int playOk2){  super(0x01);  this.accountId=accountId;  this.loginOk=loginOk;  this.playOk1=playOk1;  this.playOk2=playOk2;}  }
class C{  public void editText(VisualItem item,String attribute){  if (m_editing) {    stopEditing();  }  Rectangle2D b=item.getBounds();  Rectangle r=m_transform.createTransformedShape(b).getBounds();  if (m_editor instanceof JTextArea) {    r.y-=2;    r.width+=22;    r.height+=2;  } else {    r.x+=3;    r.y+=1;    r.width-=5;    r.height-=2;  }  Font f=getFont();  int size=(int)Math.round(f.getSize() * m_transform.getScaleX());  Font nf=new Font(f.getFontName(),f.getStyle(),size);  m_editor.setFont(nf);  editText(item,attribute,r);}  }
class C{  public static String asJsonString(String text){  if (text == null) {    return "";  }  return StringEscapeUtils.ESCAPE_JSON.translate(text);}  }
class C{  @Override public boolean removeAll(Collection<?> collection){  boolean removed=false;  for (  Object value : collection) {    removed|=remove(value);  }  return removed;}  }
class C{  private void drawYAxisTicks(Graphics2D gc){  gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));  if (scalingType == ChartViewer.ScalingType.LOG) {    drawYAxisTicksLog(gc);    return;  } else   if (scalingType == ChartViewer.ScalingType.SQRT) {    drawYAxisTicksSqrt(gc);    return;  }  int x0=leftMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  double botY;  double topY;  if (scalingType == ChartViewer.ScalingType.PERCENT) {    botY=0;    topY=100;  } else {    botY=0;    topY=getChartData().getRangeY().get2().doubleValue();  }  double yFactor;  if (topY > botY)   yFactor=(y0 - y1) / (topY - botY); else   yFactor=1;  int tickStepY=0;  int minSpace=50;  for (int i=1; tickStepY == 0; i*=10) {    if (i * yFactor >= minSpace)     tickStepY=i; else     if (2.5 * i * yFactor >= minSpace)     tickStepY=(int)(2.5 * i); else     if (5 * i * yFactor >= minSpace)     tickStepY=5 * i;  }  int startY=0;  if (startY > botY) {    while (startY > botY)     startY-=tickStepY;  } else {    while (startY + tickStepY < botY) {      startY+=tickStepY;    }  }  double offsetY=botY - startY;  gc.setColor(Color.BLACK);  for (int value=startY; (value - 1) < topY; value+=tickStepY) {    if (value >= botY) {      if (maxDisplayedYValue != null && value > maxDisplayedYValue)       break;      String label="" + value;      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      double y=y0 - value * yFactor + offsetY;      if (y < y1)       break;      float yPos=(float)(y + labelSize.getHeight() / 2.0);      gc.drawString(label,leftMargin - (int)(labelSize.getWidth() + 3),yPos);      gc.drawLine(x0,(int)y,x0 + 2,(int)y);    }  }}  }
class C{  @Override public void saveObject(Serializable oObj,String sObjectName,String sObjectCategory){  super.saveObject(oObj,sObjectName,sObjectCategory);  if (existsObject(sObjectCategory,ListCategoryName)) {    ArrayList<String> nlist=(ArrayList<String>)loadObject(sObjectCategory,ListCategoryName);    nlist.add(sObjectName);    super.saveObject(nlist,sObjectCategory,ListCategoryName);  } else {    ArrayList<String> nlist=new ArrayList<String>();    nlist.add(sObjectName);    super.saveObject(nlist,sObjectCategory,ListCategoryName);  }}  }
class C{  public static Date parseDate(String dateValue,String[] dateFormats,Date startDate) throws DateParseException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_PATTERNS;  }  if (startDate == null) {    startDate=DEFAULT_TWO_DIGIT_YEAR_START;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  for (  String dateFormat : dateFormats) {    SimpleDateFormat dateParser=DateFormatHolder.formatFor(dateFormat);    dateParser.set2DigitYearStart(startDate);    try {      return dateParser.parse(dateValue);    } catch (    ParseException pe) {    }  }  throw new DateParseException("Unable to parse the date " + dateValue);}  }
class C{  public StorableObject(Object obj) throws RemoteException {  try {    bytes=new MarshalledObject(obj);    this.obj=obj;  } catch (  RemoteException e) {    throw e;  }catch (  IOException e) {    fatalError("can't encode object",e);  }}  }
class C{  @Before public void loadMemory() throws IOException {  this.chip8=Chip8Utils.createFromRom(E03ClockExecutionAndMemoryTest.class.getResource("/E03TestRom.ch8"));}  }
class C{  public VideoSearchQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static Map<String,Object> cancelRemainingPurchaseOrderItems(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String orderId=(String)context.get("orderId");  try {    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    if (UtilValidate.isEmpty(orderHeader)) {      String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorOrderIdNotFound",UtilMisc.toMap("orderId",orderId),locale);      Debug.logError(errorMessage,module);      return ServiceUtil.returnError(errorMessage);    }    if (!"PURCHASE_ORDER".equals(orderHeader.getString("orderTypeId"))) {      String errorMessage=UtilProperties.getMessage(resource_error,"OrderErrorOrderNotPurchaseOrder",UtilMisc.toMap("orderId",orderId),locale);      Debug.logError(errorMessage,module);      return ServiceUtil.returnError(errorMessage);    }    List<GenericValue> orderItems=orderHeader.getRelated("OrderItem",null,null,false);    for (    GenericValue orderItem : orderItems) {      if (!"PRODUCT_ORDER_ITEM".equals(orderItem.getString("orderItemTypeId")))       continue;      BigDecimal orderItemQuantity=BigDecimal.ZERO;      if (!UtilValidate.isEmpty(orderItem.get("quantity"))) {        orderItemQuantity=orderItem.getBigDecimal("quantity");      }      BigDecimal orderItemCancelQuantity=BigDecimal.ZERO;      if (!UtilValidate.isEmpty(orderItem.get("cancelQuantity"))) {        orderItemCancelQuantity=orderItem.getBigDecimal("cancelQuantity");      }      List<GenericValue> shipmentReceipts=orderItem.getRelated("ShipmentReceipt",null,null,false);      BigDecimal receivedQuantity=BigDecimal.ZERO;      for (      GenericValue shipmentReceipt : shipmentReceipts) {        if (!UtilValidate.isEmpty(shipmentReceipt.get("quantityAccepted"))) {          receivedQuantity=receivedQuantity.add(shipmentReceipt.getBigDecimal("quantityAccepted"));        }      }      BigDecimal quantityToCancel=orderItemQuantity.subtract(orderItemCancelQuantity).subtract(receivedQuantity);      if (quantityToCancel.compareTo(BigDecimal.ZERO) > 0) {        Map<String,Object> cancelOrderItemResult=dispatcher.runSync("cancelOrderItem",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId"),"cancelQuantity",quantityToCancel,"userLogin",userLogin));        if (ServiceUtil.isError(cancelOrderItemResult))         return cancelOrderItemResult;      }      orderItem.refresh();      if ("ITEM_APPROVED".equals(orderItem.getString("statusId"))) {        Map<String,Object> changeOrderItemStatusResult=dispatcher.runSync("changeOrderItemStatus",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId"),"statusId","ITEM_COMPLETED","userLogin",userLogin));        if (ServiceUtil.isError(changeOrderItemStatusResult))         return changeOrderItemStatusResult;      }    }  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericServiceException se) {    Debug.logError(se,module);    return ServiceUtil.returnError(se.getMessage());  }  return ServiceUtil.returnSuccess();}  }
class C{  private void calculatePokeSpam(int candyPlayerHas,int candyEvolutionCost,int bonus){  totalEvolvable=(int)Math.floor((candyPlayerHas - bonus) / (candyEvolutionCost - bonus));  evolveRows=(int)Math.floor(totalEvolvable / HOW_MANY_POKEMON_WE_HAVE_PER_ROW);  evolveExtra=(int)Math.floor(totalEvolvable % HOW_MANY_POKEMON_WE_HAVE_PER_ROW);  amountXP=500 * totalEvolvable;  amountXPWithLuckyEgg=amountXP * 2;}  }
class C{  @Override protected void synchronizeChildren(){  if (needsSyncData()) {    synchronizeData();    if (!needsSyncChildren()) {      return;    }  }  boolean orig=mutationEvents;  mutationEvents=false;  needsSyncChildren(false);  getNodeType(0);  ChildNode first=null;  ChildNode last=null;  for (int index=getLastChild(0); index != -1; index=getPrevSibling(index)) {    ChildNode node=(ChildNode)getNodeObject(index);    if (last == null) {      last=node;    } else {      first.previousSibling=node;    }    node.ownerNode=this;    node.isOwned(true);    node.nextSibling=first;    first=node;    int type=node.getNodeType();    if (type == Node.ELEMENT_NODE) {      docElement=(ElementImpl)node;    } else     if (type == Node.DOCUMENT_TYPE_NODE) {      docType=(DocumentTypeImpl)node;    }  }  if (first != null) {    firstChild=first;    first.isFirstChild(true);    lastChild(last);  }  mutationEvents=orig;}  }
class C{  public void preLoadSymbol(){  for (  String key : panelMap.keySet()) {    List<PopulateDetailsInterface> panelList=panelMap.get(key);    for (    PopulateDetailsInterface panel : panelList) {      panel.preLoadSymbol();    }  }}  }
class C{  public static double angle(S2Point a,S2Point b,S2Point c){  return S2Point.crossProd(a,b).angle(S2Point.crossProd(c,b));}  }
class C{  public ServiceTestBase(){  this(-1);}  }
class C{  public WKTPoint(DirectPosition pt){  if (pt != null) {    this.x=pt.getCoordinate()[0];    this.y=pt.getCoordinate()[1];  }}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  default CategoryColumn upperCase(){  CategoryColumn newColumn=CategoryColumn.create(this.name() + "[ucase]");  for (int r=0; r < size(); r++) {    String value=getString(r);    if (value == null) {      newColumn.set(r,null);    } else {      newColumn.set(r,value.toUpperCase());    }  }  return newColumn;}  }
class C{  private void validateRelation(RelationImpl relation){  if (!ValidateGlobalRules.validateRelationshipStructure(relation)) {    String roles="";    String rolePlayers="";    for (    Map.Entry<RoleType,Instance> entry : relation.rolePlayers().entrySet()) {      if (entry.getKey() != null)       roles=roles + entry.getKey().getId() + ",";      if (entry.getValue() != null)       rolePlayers=rolePlayers + entry.getValue().getId() + ",";    }    errorsFound.add(ErrorMessage.VALIDATION_RELATION.getMessage(relation.getId(),relation.type().getId(),roles.split(",").length,roles,rolePlayers.split(",").length,roles));  }}  }
class C{  public static boolean isTake(int mod){  return (mod & NOTIFY_TAKE) != 0;}  }
class C{  public void insertText(String inputtype,String outputtype,String locale,String voice,String inputtext,String outputtext) throws SQLException {  insertText(inputtype,outputtype,locale,voice,null,null,null,inputtext,outputtext);}  }
class C{  public MqttCallbackHandler(final BaseMqttConnection connection,final DaemonMqttConnectionDetails connectionSettings,final BaseScriptManager scriptManager){  this.connection=connection;  this.connectionSettings=connectionSettings;  this.scriptManager=scriptManager;  this.formattingManager=new FormattingManager(scriptManager);  this.messageLogger=new MqttMessageLogger("0",messageQueue,connectionSettings.getMessageLog(),false,10);  for (  final SubscriptionDetails subscriptionDetails : connectionSettings.getSubscription()) {    this.subscriptionsDetails.put(subscriptionDetails.getTopic(),subscriptionDetails);  }  new Thread(messageLogger).start();}  }
class C{  public CriteriaHibernateSpaceDataSourceConfigurer sessionFactory(SessionFactory sessionFactory){  this.sessionFactory=sessionFactory;  return this;}  }
class C{  public static boolean hasMethod(Class clazz,String methodName,Class[] paramTypes){  return (getMethodIfAvailable(clazz,methodName,paramTypes) != null);}  }
class C{  @Bean public Auth0Client auth0Client(){  return new Auth0Client(clientId,issuer);}  }
class C{  @Override public void mouseWheelMoved(MouseWheelEvent ev){  int clicks=ev.getWheelRotation();  int sign=(clicks < 0 ? -1 : 1);  Envelope env=mapPane.getDisplayArea();  double width=env.getWidth();  double delta=width * clickToZoom * sign;  env.expandBy(delta);  mapPane.setDisplayArea((org.opengis.geometry.Envelope)env);switch (geometryType) {case RASTER:{      ReferencedEnvelope refEnv=ReferencedEnvelope.create(env,gridCoverage.getCoordinateReferenceSystem());      wmsEnvVarValues.setMapBounds(refEnv);    }  break;case POINT:case LINE:case POLYGON:{  ReferencedEnvelope refEnv=ReferencedEnvelope.create(env,featureList.getSchema().getCoordinateReferenceSystem());  wmsEnvVarValues.setMapBounds(refEnv);}break;default :break;}EnvironmentVariableManager.getInstance().setWMSEnvVarValues(wmsEnvVarValues);mapPane.repaint();}  }
class C{  public static List<Distributable> distributeBlockLets(List<TableBlockInfo> blockInfoList,int defaultParallelism){  String blockletDistributionString=CarbonProperties.getInstance().getProperty(CarbonCommonConstants.ENABLE_BLOCKLET_DISTRIBUTION,CarbonCommonConstants.ENABLE_BLOCKLET_DISTRIBUTION_DEFAULTVALUE);  boolean isBlockletDistributionEnabled=Boolean.parseBoolean(blockletDistributionString);  LOGGER.info("No.Of Blocks before Blocklet distribution: " + blockInfoList.size());  List<Distributable> tableBlockInfos=new ArrayList<Distributable>();  if (blockInfoList.size() < defaultParallelism && isBlockletDistributionEnabled) {    for (    TableBlockInfo tableBlockInfo : blockInfoList) {      int noOfBlockLets=tableBlockInfo.getBlockletInfos().getNoOfBlockLets();      LOGGER.info("No.Of blocklet : " + noOfBlockLets + ".Minimum blocklets required for distribution : "+ minBlockLetsReqForDistribution);      if (noOfBlockLets < minBlockLetsReqForDistribution) {        tableBlockInfos.add(tableBlockInfo);        continue;      }      TableBlockInfo tableBlockInfo1=null;      int rem=noOfBlockLets % minBlockLetsReqForDistribution;      int count=noOfBlockLets / minBlockLetsReqForDistribution;      if (rem > 0) {        count=count + 1;      }      for (int i=0; i < count; i++) {        BlockletInfos blockletInfos=new BlockletInfos();        blockletInfos.setStartBlockletNumber(i * minBlockLetsReqForDistribution);        blockletInfos.setNumberOfBlockletToScan(minBlockLetsReqForDistribution);        blockletInfos.setNoOfBlockLets(blockletInfos.getNoOfBlockLets());        tableBlockInfo1=new TableBlockInfo(tableBlockInfo.getFilePath(),tableBlockInfo.getBlockOffset(),tableBlockInfo.getSegmentId(),tableBlockInfo.getLocations(),tableBlockInfo.getBlockLength(),blockletInfos);        tableBlockInfos.add(tableBlockInfo1);      }      if (rem > 0) {        tableBlockInfo1.getBlockletInfos().setNumberOfBlockletToScan(rem);      }    }  }  if (tableBlockInfos.size() == 0) {{      for (      TableBlockInfo tableBlockInfo : blockInfoList) {        tableBlockInfos.add(tableBlockInfo);      }      LOGGER.info("No.Of Blocks after Blocklet distribution: " + tableBlockInfos.size());      return tableBlockInfos;    }  }  LOGGER.info("No.Of Blocks after Blocklet distribution: " + tableBlockInfos.size());  return tableBlockInfos;}  }
class C{  public void initialize() throws Exception {  if (id.getInstance().isOutOfService())   return;  logger.info("Initializing Dynomite Manager now ...");  state.setSideCarProcessAlive(true);  state.setBootstrapStatus(Bootstrap.NOT_STARTED);  if (config.isMultiRegionedCluster()) {    scheduler.runTaskNow(UpdateSecuritySettings.class);    if (id.isReplace() || id.isTokenPregenerated()) {      long initTime=100 + (int)(Math.random() * ((200 - 100) + 1));      logger.info("Sleeping " + initTime + "seconds -> a node is replaced or token is pregenerated.");      sleeper.sleep(initTime * 1000);    } else     if (UpdateSecuritySettings.firstTimeUpdated) {      logger.info("Sleeping 60 seconds -> first time security settings are updated");      sleeper.sleep(60 * 1000);    }    scheduler.addTask(UpdateSecuritySettings.JOBNAME,UpdateSecuritySettings.class,UpdateSecuritySettings.getTimer(id));  }  logger.info("Running TuneTask and updating configuration.");  tuneTask.execute();  if (config.isRestoreEnabled()) {    logger.info("Restore is enabled.");    scheduler.runTaskNow(RestoreTask.class);    logger.info("Scheduled task " + RestoreTask.TaskName);  } else {    logger.info("Restore is disabled.");    if (config.isForceWarm() || (config.isWarmBootstrap() && id.isReplace())) {      if (config.isForceWarm()) {        logger.info("Enforcing warm up.");      }      logger.info("Warm bootstrapping node. Scheduling BootstrapTask now!");      dynProcess.stop();      scheduler.runTaskNow(WarmBootstrapTask.class);    } else {      logger.info("Cold bootstraping, launching storage process.");      storageProcess.start();      sleeper.sleepQuietly(1000);      logger.info("Launching dynomite process.");      dynProcess.start();      sleeper.sleepQuietly(1000);      scheduler.runTaskNow(ProxyAndStorageResetTask.class);    }  }  if (config.isBackupEnabled() && config.getBackupHour() >= 0) {    scheduler.addTask(SnapshotTask.TaskName,SnapshotTask.class,SnapshotTask.getTimer(config));  }  scheduler.addTask(ServoMetricsTask.TaskName,ServoMetricsTask.class,ServoMetricsTask.getTimer());  scheduler.addTask(RedisInfoMetricsTask.TaskName,RedisInfoMetricsTask.class,RedisInfoMetricsTask.getTimer());  scheduler.addTask(ProcessMonitorTask.JOBNAME,ProcessMonitorTask.class,ProcessMonitorTask.getTimer());  logger.info("Starting task scheduler");  scheduler.start();}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testUserMultipleTimesinvolvedWithProcessInstance(){  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  runtimeService.addUserIdentityLink(processInstance.getId(),"kermit","type1");  runtimeService.addUserIdentityLink(processInstance.getId(),"kermit","type2");  assertEquals(1L,runtimeService.createProcessInstanceQuery().involvedUser("kermit").count());}  }
class C{  public synchronized boolean directoryExists(){  return directory.exists();}  }
class C{  public void addSyntaxActions(Keymap map,String prefix){  Pattern splitter=CONFIG.getValueSeparator(prefix);  Configuration actionsConf=CONFIG.subConfig(prefix,"Action.");  for (  String actionName : actionsConf.stringPropertyNames()) {    String[] values=splitter.split(actionsConf.getProperty(actionName));    String actionClass=values[0];    SyntaxAction action=editorActions.get(actionClass);    if (action == null) {      action=createAction(actionClass);      action.config(CONFIG,prefix,actionName);    }    String keyStrokeString=values[1];    KeyStroke ks=KeyStroke.getKeyStroke(keyStrokeString);    if (ks == null) {      throw new IllegalArgumentException("Invalid KeyStroke: " + keyStrokeString);    }    TextAction ta=action.getAction(actionName);    if (ta == null) {      throw new IllegalArgumentException("Invalid ActionName: " + actionName);    }    map.addActionForKeyStroke(ks,ta);  }}  }
class C{  public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen){  return create(file,listener,delayMillis,end,reOpen,DEFAULT_BUFSIZE);}  }
class C{  public static void assertGTest(final RealDistribution expectedDistribution,final double[] values,double alpha){  final int numBins=values.length / 30;  final double[] breaks=new double[numBins];  for (int b=0; b < breaks.length; b++) {    breaks[b]=expectedDistribution.inverseCumulativeProbability((double)b / numBins);  }  final long[] observed=new long[numBins];  for (  final double value : values) {    int b=0;    do {      b++;    } while (b < numBins && value >= breaks[b]);    observed[b - 1]++;  }  final double[] expected=new double[numBins];  Arrays.fill(expected,(double)values.length / numBins);  assertGTest(expected,observed,alpha);}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public static boolean isWifi(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_WIFI) {    return true;  }  return false;}  }
class C{  public Bindings add(String property,JTextComponent c,String defaultValue){  registerPropertyChangeListener(c);  return add(new JTextComponentBinding(property,c,defaultValue));}  }
class C{  public DefaultNameInclusionStrategy(String... includes){  whitelist=new ArrayList<>(includes.length);  add(includes);}  }
class C{  public String loadDocumentTextToString(String sDocID){  return loadDocumentElement(sDocID,TEXT_TAG);}  }
class C{  public void reset(){  setCapacity(0);}  }
class C{  public void resetTracking(){  totalTime=0;  drawCycles=0;}  }
class C{  public static boolean persistentStorageDirectoryExists(){  return new File(getPersistentStorageDirectoryString()).isDirectory();}  }
class C{  public Record decode(byte[] input){  return null;}  }
class C{  static byte[] base64ToByteArray(String s){  return base64ToByteArray(s,false);}  }
class C{  public String process(Item seg) throws ProcessException {  return segCodaCtype(seg,"s");}  }
class C{  public void afterLast() throws SQLException {  throw new SQLException("Command not Supported!","GSP",-132);}  }
class C{  public int length(){  return Graph.getEdgesCount();}  }
class C{  public GroupsGetRequestsQueryWithFields count(Integer value){  return unsafeParam("count",value);}  }
class C{  public void storeLegionEmblem(Player activePlayer,int legionId,int emblemId,int color_r,int color_g,int color_b,LegionEmblemType emblemType){  if (legionRestrictions.canStoreLegionEmblem(activePlayer,legionId,emblemId)) {    Legion legion=activePlayer.getLegion();    if (legion.getLegionEmblem().isDefaultEmblem()) {      addHistory(legion,"",LegionHistoryType.EMBLEM_REGISTER);    } else {      addHistory(legion,"",LegionHistoryType.EMBLEM_MODIFIED);    }    activePlayer.getInventory().decreaseKinah(LegionConfig.LEGION_EMBLEM_REQUIRED_KINAH);    legion.getLegionEmblem().setEmblem(emblemId,color_r,color_g,color_b,emblemType,null);    updateMembersEmblem(legion,emblemType);    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_EMBLEM);  }}  }
class C{  public static OutputStream openWrite(Context context,String filename) throws IOException {  File out=context.getFileStreamPath(filename);  out.renameTo(context.getFileStreamPath(filename + ".bak"));  return context.openFileOutput(filename,Context.MODE_PRIVATE);}  }
class C{  public FullFrameRect(Texture2dProgram program){  this.program=program;}  }
class C{  public MessagesGetDialogsQuery startMessageId(Integer value){  return unsafeParam("start_message_id",value);}  }
class C{  @Override public void stop(){  if (running) {    running=false;    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Shutting down CacheListener threads.");    }    notifyUpdateThreadHandler.shutdown();    statusConfirmationHandler.shutdown();  }}  }
class C{  private void createActionList(){  View view;  String title;  Drawable icon;  OnClickListener listener;  for (int i=0; i < actionList.size(); i++) {    title=actionList.get(i).getTitle();    icon=actionList.get(i).getIcon();    listener=actionList.get(i).getOnClickListerner();    view=getActionItem(title,icon,listener);    view.setFocusable(true);    view.setClickable(true);    mTrack.addView(view);  }}  }
class C{  private DocumentFragment traverseContents(int how) throws DOMException {  if (fStartContainer == null || fEndContainer == null) {    return null;  }  if (fDetach) {    throw new DOMException(DOMException.INVALID_STATE_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_STATE_ERR",null));  }  if (fStartContainer == fEndContainer)   return traverseSameContainer(how);  int endContainerDepth=0;  for (Node c=fEndContainer, p=c.getParentNode(); p != null; c=p, p=p.getParentNode()) {    if (p == fStartContainer)     return traverseCommonStartContainer(c,how);    ++endContainerDepth;  }  int startContainerDepth=0;  for (Node c=fStartContainer, p=c.getParentNode(); p != null; c=p, p=p.getParentNode()) {    if (p == fEndContainer)     return traverseCommonEndContainer(c,how);    ++startContainerDepth;  }  int depthDiff=startContainerDepth - endContainerDepth;  Node startNode=fStartContainer;  while (depthDiff > 0) {    startNode=startNode.getParentNode();    depthDiff--;  }  Node endNode=fEndContainer;  while (depthDiff < 0) {    endNode=endNode.getParentNode();    depthDiff++;  }  for (Node sp=startNode.getParentNode(), ep=endNode.getParentNode(); sp != ep; sp=sp.getParentNode(), ep=ep.getParentNode()) {    startNode=sp;    endNode=ep;  }  return traverseCommonAncestors(startNode,endNode,how);}  }
class C{  public KeyAlreadySetException(Throwable cause){  super(cause);}  }
class C{  public DatabaseGetCountriesQuery needAll(Boolean value){  return unsafeParam("need_all",value);}  }
class C{  @NonNull public String createSummary(){  StringBuilder sb=new StringBuilder(2000);  sb.append(MSG_HEADER);  List<String> problems=Lists.newArrayList();  problems.addAll(myImporter.getErrors());  problems.addAll(myImporter.getWarnings());  if (!problems.isEmpty()) {    sb.append("\n");    for (    String warning : problems) {      sb.append(" * ");      if (myWrapErrorMessages) {        sb.append(SdkUtils.wrap(warning,80,"   "));      } else {        sb.append(warning);      }      sb.append("\n");    }  }  if (myHasRiskyPathChars) {    sb.append(MSG_RISKY_PROJECT_LOCATION);    String path=myDestDir.getPath();    sb.append(path).append("\n");    for (int i=0, n=path.length(); i < n; i++) {      char c=path.charAt(i);      sb.append(isRiskyPathChar(c) ? '-' : ' ');    }    sb.append("\n");  }  if (myManifestsMayDiffer) {    sb.append(MSG_MANIFEST);  }  if (!myNotMigrated.isEmpty()) {    sb.append(MSG_UNHANDLED);    List<String> modules=Lists.newArrayList(myNotMigrated.keySet());    Collections.sort(modules);    for (    String module : modules) {      if (modules.size() > 1) {        sb.append("From ").append(module).append(":\n");      }      List<String> sorted=new ArrayList<String>(myNotMigrated.get(module));      Collections.sort(sorted);      for (      String path : sorted) {        sb.append("* ").append(path).append("\n");      }    }  }  if (!myJarDependencies.isEmpty()) {    sb.append(MSG_REPLACED_JARS);    List<File> files=Lists.newArrayList(myJarDependencies.keySet());    Collections.sort(files);    for (    File file : files) {      String jar=file.getName();      GradleCoordinate dependency=myJarDependencies.get(file);      sb.append(jar).append(" => ").append(dependency).append("\n");    }  }  if (!myGuessedDependencyVersions.isEmpty()) {    sb.append(MSG_GUESSED_VERSIONS);    Collections.sort(myGuessedDependencyVersions);    for (    String replaced : myGuessedDependencyVersions) {      sb.append(replaced).append("\n");    }  }  if (!myLibDependencies.isEmpty()) {    sb.append(MSG_REPLACED_LIBS);    List<String> modules=Lists.newArrayList(myLibDependencies.keySet());    Collections.sort(modules);    for (    String module : modules) {      List<GradleCoordinate> dependencies=myLibDependencies.get(module);      if (dependencies.size() == 1) {        sb.append(module).append(" => ").append(dependencies).append("\n");      } else {        sb.append(module).append(" =>\n");        for (        GradleCoordinate dependency : dependencies) {          sb.append("    ").append(dependency).append("\n");        }      }    }  }  if (!myMoved.isEmpty()) {    sb.append(MSG_FOLDER_STRUCTURE);    List<ImportModule> modules=Lists.newArrayList(myMoved.keySet());    Collections.sort(modules);    for (    ImportModule module : modules) {      if (modules.size() > 1) {        sb.append("In ").append(module.getOriginalName()).append(":\n");      }      Map<File,File> map=myMoved.get(module);      List<File> sorted=new ArrayList<File>(map.keySet());      Collections.sort(sorted);      for (      File from : sorted) {        sb.append("* ");        File to=map.get(from);        assert to != null : from;        File fromRelative=null;        File toRelative=null;        try {          fromRelative=module.computeProjectRelativePath(from);          if (myDestDir != null) {            toRelative=GradleImport.computeRelativePath(myDestDir.getCanonicalFile(),to);          }        } catch (        IOException ioe) {        }        if (fromRelative == null) {          fromRelative=from;        }        if (toRelative == null) {          toRelative=to;        }        sb.append(fromRelative.getPath());        if (from.isDirectory()) {          sb.append(File.separator);        }        sb.append(" => ");        sb.append(toRelative.getPath());        if (to.isDirectory()) {          sb.append(File.separator);        }        sb.append("\n");      }    }  }  if (myImporter.needSupportRepository() && myImporter.isMissingSupportRepository()) {    sb.append(MSG_MISSING_REPO_1);    sb.append(myImporter.getSdkLocation()).append("\n");    sb.append(MSG_MISSING_REPO_2);  }  if (myImporter.needGoogleRepository() && myImporter.isMissingGoogleRepository()) {    sb.append(MSG_MISSING_GOOGLE_REPOSITORY_1);    sb.append(myImporter.getSdkLocation()).append("\n");    sb.append(MSG_MISSING_GOOGLE_REPOSITORY_2);  }  if (Revision.parseRevision(myImporter.getBuildToolsVersion()).getMajor() < 19) {    sb.append(MSG_BUILD_TOOLS_VERSION);  }  if (!myIgnoredUserHomeProGuardFiles.isEmpty()) {    sb.append(MSG_USER_HOME_PROGUARD);    Collections.sort(myIgnoredUserHomeProGuardFiles);    for (    String path : myIgnoredUserHomeProGuardFiles) {      sb.append(path).append("\n");    }  }  sb.append(MSG_FOOTER);  return sb.toString().replace("\n",GradleImport.NL);}  }
class C{  private long wc(String text){  long wc=0;  String[] lines=text.split("\n");  for (  String line : lines) {    wc+=line.split("\\s+").length;  }  return wc;}  }
class C{  public JSONArray put(int index,Map<String,Object> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  public static <V,V1 extends V,V2 extends V,V3 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3){  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3);}  }
class C{  public boolean lessThan(PlatformLogicalVersion otherVersion){  Boolean specialLessThan=specialLessThan(otherVersion);  if (specialLessThan != null)   return specialLessThan;  return (_buildNumber < otherVersion._buildNumber) || (_buildNumber == otherVersion._buildNumber && _subBuildNumber < otherVersion._subBuildNumber);}  }
class C{  public StateResource(StateStore stateStore){  this(stateStore,null);}  }
class C{  public static boolean contentEquals(File file1,File file2) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.length() != file2.length()) {    return false;  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  InputStream input1=null;  InputStream input2=null;  try {    input1=new FileInputStream(file1);    input2=new FileInputStream(file2);    return IOUtils.contentEquals(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public static boolean exists(String collection,Bson query) throws SQLException {  TimeStamp t1=TimeStamp.create();  boolean b=false;  try {    b=MongoHelper.load(collection,query) != null;  }  finally {    if (log.isDebugEnabled())     log.debug("exists cost=" + t1.past() + "ms,  collection="+ collection+ ", query="+ query+ ", result="+ b);  }  return b;}  }
class C{  public void verifyIsHidden(){  conditions.verify(invisibilityOfElementLocated(LOADER_LOCATOR),Timeouts.MEDIUM);}  }
class C{  public static <T>ArrayList<T> arrayList(){  return new ArrayList<T>(4);}  }
class C{  @DELETE @Path("/applications/{applicationName}/users/{userID}/roles") @Produces(APPLICATION_JSON) @ApiOperation(value="Delete a user's role within an application") @Timed public Response deleteUserRoles(@PathParam("applicationName") @ApiParam(value="Application Name") final Application.Name applicationName,@PathParam("userID") @ApiParam(value="User ID") final Username userID,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  UserInfo admin=authorization.getUserInfo(userName);  authorization.checkUserPermissions(userName,applicationName,ADMIN);  authorization.deleteUserRole(userID,applicationName,admin);  return httpHeader.headers(NO_CONTENT).build();}  }
class C{  public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY,long time){  mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX,time);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY,time);  return spingbackX || spingbackY;}  }
class C{  public void addOverlappingView(View view){  mFrameLayoutOverlappingViewContainer.addView(view,COMMON_LAYOUT_PARAMS);  mOverlappingViewsMap.put(view.getId(),view);}  }
class C{  public SerialMessage clearAssociationMessage(int group){  logger.debug("NODE {}: Creating new message for application command ASSOCIATIONCMD_REMOVE group={}, node=all",getNode().getNodeId(),group);  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Config);  ByteArrayOutputStream outputData=new ByteArrayOutputStream();  outputData.write(getNode().getNodeId());  outputData.write(3);  outputData.write(getCommandClass().getKey());  outputData.write(ASSOCIATIONCMD_REMOVE);  outputData.write(group);  result.setMessagePayload(outputData.toByteArray());  return result;}  }
class C{  @Override public String createToken(int my_slot,int rac_count,int rac_size,String region){  int regionCount=rac_count * rac_size;  return initialToken(regionCount,my_slot,regionOffset(region)).toString();}  }
class C{  public void onFailure(int statusCode,Header[] headers,byte[] responseBody,Throwable error){  try {    String response=responseBody == null ? null : new String(responseBody,getCharset());    onFailure(statusCode,headers,error,response);  } catch (  UnsupportedEncodingException e) {    onFailure(statusCode,headers,e,null);  }}  }
class C{  @Override public boolean isEmpty(){  return false;}  }
class C{  public void reset(){  this.baseAddressMap.clear();  this.cursor=0;}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  private void resetPreviousView(){  if (mPreviousContentView == null)   return;  View view=mPreviousContentView;  FrameLayout contentView=mCurrentContentView;  view.setX(0);  contentView.removeView(view);  mPreviousContentView=null;  if (mPreviousActivity == null || mPreviousActivity.isFinishing())   return;  Activity preActivity=mPreviousActivity;  final ViewGroup previewContentView=getContentView(preActivity.getWindow());  previewContentView.addView(view,0);  mPreviousActivity=null;}  }
class C{  public static void save(NBTTagCompound nbt){  NBTTagList registryList=new NBTTagList();  Registries.getRegistryMap().forEach(null);  nbt.setTag("Registry",registryList);}  }
class C{  public GeoServerConnection duplicate(){  GeoServerConnection newItem=new GeoServerConnection();  newItem.connectionName=DUPLICATE_PREFIX + this.connectionName;  newItem.url=this.url;  newItem.userName=this.userName;  newItem.password=this.password;  return newItem;}  }
class C{  public JSONObject optJSONObject(int index){  Object o=opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof IViewerWithFindToolBar && ((IViewerWithFindToolBar)getViewer()).isShowFindToolBar();}  }
class C{  public String addSymbol(char[] buffer,int offset,int length){  int bucket=hash(buffer,offset,length) % fTableSize;  OUTER:   for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    if (length == entry.characters.length) {      for (int i=0; i < length; i++) {        if (buffer[offset + i] != entry.characters[i]) {          continue OUTER;        }      }      return entry.symbol;    }  }  if (fCount >= fThreshold) {    rehash();    bucket=hash(buffer,offset,length) % fTableSize;  }  Entry entry=new Entry(buffer,offset,length,fBuckets[bucket]);  fBuckets[bucket]=entry;  ++fCount;  return entry.symbol;}  }
class C{  @POST @Consumes("text/plain") @Verify public void post(@HeaderParam(DKIMSignature.DKIM_SIGNATURE) DKIMSignature signature,String input){  Assert.assertNotNull(signature);  Assert.assertEquals(input,"hello world");}  }
class C{  public void unregisterData(){  userData=null;}  }
class C{  private ThreadMonitor(Thread thread,long timeout){  this.thread=thread;  this.timeout=timeout;}  }
class C{  public ControlOptions build(){  ControlOptions options=new ControlOptions();  options.position=position;  return options;}  }
class C{  public void clearCheckStates(){  for (int i=0; i < expandableList.groups.size(); i++) {    CheckedExpandableGroup group=(CheckedExpandableGroup)expandableList.groups.get(i);    group.clearSelections();  }}  }
class C{  private void removeCriticalEdges(Body b){  Chain<Unit> unitChain=b.getUnits();  int size=unitChain.size();  Map<Unit,List<Unit>> predecessors=new HashMap<Unit,List<Unit>>(2 * size + 1,0.7f);{    Iterator<Unit> unitIt=unitChain.snapshotIterator();    while (unitIt.hasNext()) {      Unit currentUnit=(Unit)unitIt.next();      Iterator<UnitBox> succsIt=currentUnit.getUnitBoxes().iterator();      while (succsIt.hasNext()) {        Unit target=succsIt.next().getUnit();        List<Unit> predList=predecessors.get(target);        if (predList == null) {          predList=new ArrayList<Unit>();          predList.add(currentUnit);          predecessors.put(target,predList);        } else         predList.add(currentUnit);      }    }  }{    Iterator<Unit> unitIt=unitChain.snapshotIterator();    Unit currentUnit=null;    Unit directPredecessor;    while (unitIt.hasNext()) {      directPredecessor=currentUnit;      currentUnit=unitIt.next();      List<Unit> predList=predecessors.get(currentUnit);      int nbPreds=(predList == null) ? 0 : predList.size();      if (directPredecessor != null && directPredecessor.fallsThrough())       nbPreds++;      if (nbPreds >= 2) {        if (directPredecessor != null && directPredecessor.fallsThrough()) {          directPredecessor=insertGotoAfter(unitChain,directPredecessor,currentUnit);        }        Iterator<Unit> predIt=predList.iterator();        while (predIt.hasNext()) {          Unit predecessor=predIt.next();          int nbSuccs=predecessor.getUnitBoxes().size();          nbSuccs+=predecessor.fallsThrough() ? 1 : 0;          if (nbSuccs >= 2) {            if (directPredecessor == null)             directPredecessor=insertGotoBefore(unitChain,currentUnit,currentUnit); else             directPredecessor=insertGotoAfter(unitChain,directPredecessor,currentUnit);            redirectBranch(predecessor,currentUnit,directPredecessor);          }        }      }    }  }}  }
class C{  private ResultPoint[] centerEdges(ResultPoint y,ResultPoint z,ResultPoint x,ResultPoint t){  float yi=y.getX();  float yj=y.getY();  float zi=z.getX();  float zj=z.getY();  float xi=x.getX();  float xj=x.getY();  float ti=t.getX();  float tj=t.getY();  if (yi < width / 2.0f) {    return new ResultPoint[]{new ResultPoint(ti - CORR,tj + CORR),new ResultPoint(zi + CORR,zj + CORR),new ResultPoint(xi - CORR,xj - CORR),new ResultPoint(yi + CORR,yj - CORR)};  } else {    return new ResultPoint[]{new ResultPoint(ti + CORR,tj + CORR),new ResultPoint(zi + CORR,zj - CORR),new ResultPoint(xi - CORR,xj + CORR),new ResultPoint(yi - CORR,yj - CORR)};  }}  }
class C{  public Value nullIfExpression(Value val1,Value val2){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public Drawable2d(Prefab shape){switch (shape) {case TRIANGLE:    vertexArray=TRIANGLE_BUF;  texCoordArray=TRIANGLE_TEX_BUF;coordsPerVertex=2;vertexStride=coordsPerVertex * SIZEOF_FLOAT;vertexCount=TRIANGLE_COORDS.length / coordsPerVertex;break;case RECTANGLE:vertexArray=RECTANGLE_BUF;texCoordArray=RECTANGLE_TEX_BUF;coordsPerVertex=2;vertexStride=coordsPerVertex * SIZEOF_FLOAT;vertexCount=RECTANGLE_COORDS.length / coordsPerVertex;break;case FULL_RECTANGLE:vertexArray=FULL_RECTANGLE_BUF;texCoordArray=FULL_RECTANGLE_TEX_BUF;coordsPerVertex=2;vertexStride=coordsPerVertex * SIZEOF_FLOAT;vertexCount=FULL_RECTANGLE_COORDS.length / coordsPerVertex;break;default :throw new RuntimeException("Unknown shape " + shape);}texCoordStride=2 * SIZEOF_FLOAT;prefab=shape;}  }
class C{  private void dumpCacheSize(){  int empty=0;  int full=0;  System.out.println("Entries: " + diphoneMap.size());  for (Iterator i=diphoneMap.values().iterator(); i.hasNext(); ) {    Reference ref=(Reference)i.next();    if (ref.get() == null) {      empty++;    } else {      full++;    }  }  System.out.println("   empty: " + empty);  System.out.println("    full: " + full);}  }
class C{  public void addGlobalComplexTypeDecl(XSComplexTypeDecl decl){  fGlobalTypeDecls.put(decl.getName(),decl);  decl.setNamespaceItem(this);}  }
class C{  public void normalizeToSum(){  double dMax=0;  Iterator iValIter=hDistro.values().iterator();  while (iValIter.hasNext()) {    dMax+=(Double)iValIter.next();  }  Iterator<TKeyType> iKeyIter=hDistro.keySet().iterator();  while (iKeyIter.hasNext()) {    TKeyType oKey=iKeyIter.next();    Double dVal=(Double)hDistro.get(oKey);    dVal/=dMax;    hDistro.put(oKey,dVal);  }}  }
class C{  public List<DataSourceAttributeData> retrieveData(){  List<DataSourceAttributeData> attributeList=new ArrayList<DataSourceAttributeData>();  for (int row=0; row < this.getRowCount(); row++) {    Name name=(Name)this.getValueAt(row,FIELD_COLUMN_ID);    Object objValue=this.getValueAt(row,VALUE_COLUMN_ID);    DataSourceAttributeData existingData=valueMap.get(name.getLocalPart());    if (existingData != null) {      DataSourceAttributeData data=new DataSourceAttributeData(name,existingData.getType(),objValue);      attributeList.add(data);    }  }  return attributeList;}  }
class C{  private static boolean isVerticallyConstrained(ConstraintWidget widget){  if (widget.getAnchor(ConstraintAnchor.Type.BOTTOM).isConnected()) {    return true;  }  if (widget.getAnchor(ConstraintAnchor.Type.TOP).isConnected()) {    return true;  }  if (widget.getAnchor(ConstraintAnchor.Type.BASELINE).isConnected()) {    return true;  }  return false;}  }
class C{  public MessagesSetActivityQuery type(MessagesSetActivityType value){  return unsafeParam("type",value);}  }
class C{  public void writeAnnotations(Writer out,byte[] data) throws IOException {  int rightWidth=getAnnotationWidth();  int leftWidth=outputWidth - rightWidth - 1;  String padding=Strings.repeat(" ",1000);  TwoColumnOutput twoc=new TwoColumnOutput(out,leftWidth,rightWidth,"|");  Integer[] keys=new Integer[annotatations.size()];  keys=annotatations.keySet().toArray(keys);  AnnotationEndpoint[] values=new AnnotationEndpoint[annotatations.size()];  values=annotatations.values().toArray(values);  for (int i=0; i < keys.length - 1; i++) {    int rangeStart=keys[i];    int rangeEnd=keys[i + 1];    AnnotationEndpoint annotations=values[i];    for (    AnnotationItem pointAnnotation : annotations.pointAnnotations) {      String paddingSub=padding.substring(0,pointAnnotation.indentLevel * 2);      twoc.write("",paddingSub + pointAnnotation.annotation);    }    String right;    AnnotationItem rangeAnnotation=annotations.rangeAnnotation;    if (rangeAnnotation != null) {      right=padding.substring(0,rangeAnnotation.indentLevel * 2);      right+=rangeAnnotation.annotation;    } else {      right="";    }    String left=Hex.dump(data,rangeStart,rangeEnd - rangeStart,rangeStart,hexCols,6);    twoc.write(left,right);  }  int lastKey=keys[keys.length - 1];  if (lastKey < data.length) {    String left=Hex.dump(data,lastKey,data.length - lastKey,lastKey,hexCols,6);    twoc.write(left,"");  }}  }
class C{  public boolean reverseColours(){  return reverseColours;}  }
class C{  public ItemToSkillTreeCursor queryItemToSkillTreeItem(long id){  return mHelper.queryItemToSkillTreeItem(id);}  }
class C{  private void readPropertyFile(){  List<GeoServerConnection> connectionList=GeoServerConnectionManager.getInstance().getConnectionList();  for (  GeoServerConnection connection : connectionList) {    connectionMap.put(connection,createGeoServerClient(connection));  }}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public PhotosGetCommentsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public Response<?> response(){  return response;}  }
class C{  public void rectValueToPixelHorizontal(RectF r,float phaseY){  r.left*=phaseY;  r.right*=phaseY;  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public ColorConversionTransform(){  this(new Random(1234),COLOR_BGR2Luv);}  }
class C{  public GSTextMessageImpl(GSSessionImpl session,String text) throws JMSException {  super(session,TEXT);  Body=text;}  }
class C{  public void requestEnableBt(){  if (mBluetoothAdapter == null) {    throw new NullPointerException(DEVICE_HAS_NOT_BLUETOOTH_MODULE);  }  if (!mBluetoothAdapter.isEnabled())   mBluetoothAdapter.enable();}  }
class C{  public static byte[] sha3(byte[] input,int offset,int length){  Keccak.DigestKeccak kecc=new Keccak.Digest256();  kecc.update(input,offset,length);  return kecc.digest();}  }
class C{  public UtilsCheckLinkQuery checkLink(UserActor actor,String url){  return new UtilsCheckLinkQuery(getClient(),actor,url);}  }
class C{  public FaveGetVideosQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private void initRowMap(){  m_rowmap=new int[m_table.getRowCount()];  IntIterator rows=m_table.rows();  for (int i=0; rows.hasNext(); ++i) {    m_rowmap[i]=rows.nextInt();  }}  }
class C{  public HermiteInterpolator(){  this.abscissae=new ArrayList<Double>();  this.topDiagonal=new ArrayList<double[]>();  this.bottomDiagonal=new ArrayList<double[]>();}  }
class C{  public GroupsEditQuery subject(GroupsEditSubject value){  return unsafeParam("subject",value);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set drawer=" + ViewerBase.DiagramType.RectangularCladogram + ";");}  }
class C{  protected static RegExp createAllRule(Map<String,String> defsMap){  StringBuilder ruleRegExpr=new StringBuilder();  List<String> defsList=new ArrayList<>(defsMap.values());  for (int i=0, iMax=defsList.size(); i < iMax; i++) {    String regExpr=defsList.get(i);    ruleRegExpr.append(String.format("(%s)",regExpr));    if (i < iMax - 1) {      ruleRegExpr.append("|");    }  }  return FACTORY.createRegExp(ruleRegExpr.toString());}  }
class C{  Type toInt(Type type){  type.apply(this);  return result;}  }
class C{  public int indexOf(int value){  return indexOf(0,value);}  }
class C{  public static void transform(double[] realAndImag,boolean inverse){  if (realAndImag == null)   throw new NullPointerException("Received null argument");  int N=realAndImag.length >> 1;  assert MathUtils.isPowerOfTwo(N);  int halfN=N >> 1;  int iReverse=0;  for (int i=0; i < N; i++) {    if (i > iReverse) {      int twoi=i << 1;      int twoi1=twoi + 1;      int twoirev=iReverse << 1;      int twoirev1=twoirev + 1;      double tmpReal=realAndImag[twoi];      double tmpImag=realAndImag[twoi1];      realAndImag[twoi]=realAndImag[twoirev];      realAndImag[twoi1]=realAndImag[twoirev1];      realAndImag[twoirev]=tmpReal;      realAndImag[twoirev1]=tmpImag;    }    int b=halfN;    while (b >= 1 && iReverse >= b) {      iReverse-=b;      b>>=1;    }    iReverse+=b;  }  for (int blockLength=2, powerOfTwo=1; blockLength <= N; blockLength<<=1, powerOfTwo++) {    double wStepReal=cosDelta[powerOfTwo];    double wStepImag=sinDelta[powerOfTwo];    if (inverse)     wStepImag=-wStepImag;    double wReal=1;    double wImag=0;    int halfBlockLength=blockLength >> 1;    for (int n=0; n < halfBlockLength; n++) {      for (int i=n; i < N; i+=blockLength) {        int j=i + halfBlockLength;        int twoi=i << 1;        int twoi1=twoi + 1;        int twoj=j << 1;        int twoj1=twoj + 1;        double tmpReal=wReal * realAndImag[twoj] - wImag * realAndImag[twoj1];        double tmpImag=wReal * realAndImag[twoj1] + wImag * realAndImag[twoj];        realAndImag[twoj]=realAndImag[twoi] - tmpReal;        realAndImag[twoj1]=realAndImag[twoi1] - tmpImag;        realAndImag[twoi]+=tmpReal;        realAndImag[twoi1]+=tmpImag;      }      double oldWReal=wReal;      wReal=oldWReal * wStepReal - wImag * wStepImag;      wImag=oldWReal * wStepImag + wImag * wStepReal;    }  }  if (inverse) {    for (int i=0; i < realAndImag.length; i++) {      realAndImag[i]/=N;    }  }}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public static Properties xmlToProperties(InputStream in,Locale locale,Properties properties) throws IOException, InvalidPropertiesFormatException {  if (in == null) {    throw new IllegalArgumentException("InputStream cannot be null");  }  Document doc=null;  try {    doc=UtilXml.readXmlDocument(in,false,"XML Properties file");    in.close();  } catch (  Exception e) {    Debug.logWarning(e,"XML Locale file for locale " + locale + " could not be loaded.",module);    in.close();    return null;  }  Element resourceElement=doc.getDocumentElement();  List<? extends Element> propertyList=UtilXml.childElementList(resourceElement,"property");  if (UtilValidate.isNotEmpty(propertyList)) {    if (locale == null) {      throw new IllegalArgumentException("locale cannot be null");    }    String localeString=locale.toString();    String correctedLocaleString=localeString.replace('_','-');    for (    Element property : propertyList) {      Element value=UtilXml.firstChildElement(property,"value","xml:lang",correctedLocaleString);      if (value == null) {        value=UtilXml.firstChildElement(property,"value","xml:lang",localeString);      }      if (value != null) {        if (properties == null) {          properties=new Properties();        }        String valueString=UtilXml.elementValue(value);        if (valueString != null) {          properties.put(property.getAttribute("key"),valueString);        }      }    }    return properties;  }  propertyList=UtilXml.childElementList(resourceElement,"entry");  if (UtilValidate.isEmpty(propertyList)) {    throw new InvalidPropertiesFormatException("XML properties file invalid or empty");  }  for (  Element property : propertyList) {    String value=UtilXml.elementValue(property);    if (value != null) {      if (properties == null) {        properties=new Properties();      }      properties.put(property.getAttribute("key"),value);    }  }  return properties;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GET_EXP_VITAL_BONUS(String value0,long num1,long num2){  return new SM_SYSTEM_MESSAGE(1400342,value0,num1,num2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_WARNING_NOTSEALED(String value0){  return new SM_SYSTEM_MESSAGE(1400831,value0);}  }
class C{  private void transformToUpperBiDiagonal(){  final int m=householderVectors.length;  final int n=householderVectors[0].length;  for (int k=0; k < n; k++) {    double xNormSqr=0;    for (int i=k; i < m; ++i) {      final double c=householderVectors[i][k];      xNormSqr+=c * c;    }    final double[] hK=householderVectors[k];    final double a=(hK[k] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);    main[k]=a;    if (a != 0.0) {      hK[k]-=a;      for (int j=k + 1; j < n; ++j) {        double alpha=0;        for (int i=k; i < m; ++i) {          final double[] hI=householderVectors[i];          alpha-=hI[j] * hI[k];        }        alpha/=a * householderVectors[k][k];        for (int i=k; i < m; ++i) {          final double[] hI=householderVectors[i];          hI[j]-=alpha * hI[k];        }      }    }    if (k < n - 1) {      xNormSqr=0;      for (int j=k + 1; j < n; ++j) {        final double c=hK[j];        xNormSqr+=c * c;      }      final double b=(hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);      secondary[k]=b;      if (b != 0.0) {        hK[k + 1]-=b;        for (int i=k + 1; i < m; ++i) {          final double[] hI=householderVectors[i];          double beta=0;          for (int j=k + 1; j < n; ++j) {            beta-=hI[j] * hK[j];          }          beta/=b * hK[k + 1];          for (int j=k + 1; j < n; ++j) {            hI[j]-=beta * hK[j];          }        }      }    }  }}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public AppsSendRequestQuery sendRequest(UserActor actor,int userId){  return new AppsSendRequestQuery(getClient(),actor,userId);}  }
class C{  public AudioAddQuery add(UserActor actor,int audioId,int ownerId){  return new AudioAddQuery(getClient(),actor,audioId,ownerId);}  }
class C{  public static long abs(final long x){  final long l=x >>> 63;  return (x ^ (~l + 1)) + l;}  }
class C{  public void removeDataSources(Set<? extends DataSource> removed){  super.unregisterDataSources(removed);}  }
class C{  public RedundancyBasedSelector(String sPreexistingText,int iMinNGram,int iMaxNGram,int iDist){  Comparator=new NGramCachedNonSymmGraphComparator();  SentenceRepresentationFilter=new IdentityObjectFilter<DocumentNGramGraph>();  PreexistingText=sPreexistingText;  RedundancyThreshold=0.4;  MinNGram=iMinNGram;  MaxNGram=iMaxNGram;  Dist=iDist;}  }
class C{  protected static String resolveName(DataSource dataSource,String name){  String persistedName=dataSource.getStorage().getCustomProperty(PROPERTY_NAME);  if (persistedName != null)   return persistedName; else   return name;}  }
class C{  public AxisLayout(String group,String field,int axis,Predicate filter){  this(group,field,axis);  setFilter(filter);}  }
class C{  @Override public void close() throws IOException {  try {    in.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  CommandTagLog other=(CommandTagLog)obj;  if (dataType == null) {    if (other.dataType != null)     return false;  } else   if (!dataType.equals(other.dataType))   return false;  if (executionTime == null) {    if (other.executionTime != null)     return false;  } else   if (!executionTime.equals(other.executionTime))   return false;  if (host == null) {    if (other.host != null)     return false;  } else   if (!host.equals(other.host))   return false;  if (mode == null) {    if (other.mode != null)     return false;  } else   if (!mode.equals(other.mode))   return false;  if (name == null) {    if (other.name != null)     return false;  } else   if (!name.equals(other.name))   return false;  if (reportDescription == null) {    if (other.reportDescription != null)     return false;  } else   if (!reportDescription.equals(other.reportDescription))   return false;  if (reportStatus == null) {    if (other.reportStatus != null)     return false;  } else   if (!reportStatus.equals(other.reportStatus))   return false;  if (reportTime == null) {    if (other.reportTime != null)     return false;  } else   if (!reportTime.equals(other.reportTime))   return false;  if (tagId == null) {    if (other.tagId != null)     return false;  } else   if (!tagId.equals(other.tagId))   return false;  if (user == null) {    if (other.user != null)     return false;  } else   if (!user.equals(other.user))   return false;  if (value == null) {    if (other.value != null)     return false;  } else   if (!value.equals(other.value))   return false;  return true;}  }
class C{  protected void registerFilters(){  register(BardLoggingFilter.class,1);  register(ResponseCorsFilter.class,2);  register(RateLimitFilter.class,3);  register(QueryParameterNormalizationFilter.class,4);  register(HealthCheckFilter.class,5);}  }
class C{  public Iterator<T> iterator(){  return iterator;}  }
class C{  public static boolean isIntegerInRange(String s,int a,int b){  if (isEmpty(s))   return defaultEmptyOK;  if (!isSignedInteger(s))   return false;  int num=Integer.parseInt(s);  return ((num >= a) && (num <= b));}  }
class C{  public Locale findByBcp47Tag(String bcp47Tag){  return getLocalesBcp47TagMap().get(bcp47Tag.toLowerCase());}  }
class C{  protected static boolean shouldCreateRouteForService(Service service,String id,TaskListener listener){  if ("kubernetes".equals(id) || "kubernetes-ro".equals(id)) {    return false;  }  Set<Integer> ports=KubernetesHelper.getPorts(service);  if (ports.size() == 1) {    return true;  } else {    listener.getLogger().println("Not generating route for service " + id + " as only single port services are supported. Has ports: "+ ports);    return false;  }}  }
class C{  @Deprecated public SpaceTypeDescriptorBuilder addCompoundIndex(String[] paths,SpaceIndexType indexType,boolean unique){  if (indexType != SpaceIndexType.BASIC)   throw new UnsupportedOperationException("only BASIC index type is supported for compoundindex");  return addIndex(SpaceIndexFactory.createCompoundIndex(paths,indexType,null,unique));}  }
class C{  protected IPreferenceStore doGetPreferenceStore(){  return SVNUIPlugin.getPlugin().getPreferenceStore();}  }
class C{  static Principal[] reduce(Collection c){  try {    return reduce0((Principal[])c.toArray(new Principal[c.size()]));  } catch (  ArrayStoreException e) {    throw new IllegalArgumentException("element of collection is not a Principal");  }}  }
class C{  private Item createUnitItem(Relation unitRelation,String diphoneName,int targetEnd,int unitPart){  Diphone diphone=diphoneDatabase.getUnit(diphoneName);  if (diphone == null) {    System.err.println("FreeTTS: unit database failed to find entry for: " + diphoneName);  }  Item unit=unitRelation.appendItem();  FeatureSet unitFeatureSet=unit.getFeatures();  unitFeatureSet.setString("name",diphoneName);  unitFeatureSet.setInt("target_end",targetEnd);  unitFeatureSet.setObject("unit",new DiphoneUnit(diphone,unitPart));  return unit;}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public static String[] splitMultiplePacket(String packet){  String _partitioningPacket[]=packet.split(Settings.sReceiverSplitMultipleToken);  return _partitioningPacket;}  }
class C{  public DistributionWordDocument(int iNeighbourhoodWindow,int iSourceNGramSize){  super(iNeighbourhoodWindow,iSourceNGramSize);}  }
class C{  @Override public boolean isDefaultWorkspace(String workspaceName){  if (workspaceName != null) {    return (workspaceName.compareTo(DEFAULT_WORKSPACE_NAME) == 0);  }  return true;}  }
class C{  public RasterTool(SLDEditorInterface sldEditorInterface){  super();  this.sldEditorInterface=sldEditorInterface;  createUI();}  }
class C{  private static void checkBinomial(final int n,final int k) throws IllegalArgumentException {  if (n < k) {    throw MathRuntimeException.createIllegalArgumentException("must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}",n,k);  }  if (n < 0) {    throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for binomial coefficient (n,k), got n = {0}",n);  }}  }
class C{  public LuaException(Exception e){  super((e.getCause() != null) ? e.getCause() : e);}  }
class C{  public XPointerParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,grammarPool,parentSettings);  fXIncludeHandler=new XIncludeHandler();  addCommonComponent(fXIncludeHandler);  fXPointerHandler=new XPointerHandler();  addCommonComponent(fXPointerHandler);  final String[] recognizedFeatures={ALLOW_UE_AND_NOTATION_EVENTS,XINCLUDE_FIXUP_BASE_URIS,XINCLUDE_FIXUP_LANGUAGE};  addRecognizedFeatures(recognizedFeatures);  final String[] recognizedProperties={XINCLUDE_HANDLER,XPOINTER_HANDLER,NAMESPACE_CONTEXT};  addRecognizedProperties(recognizedProperties);  setFeature(ALLOW_UE_AND_NOTATION_EVENTS,true);  setFeature(XINCLUDE_FIXUP_BASE_URIS,true);  setFeature(XINCLUDE_FIXUP_LANGUAGE,true);  setProperty(XINCLUDE_HANDLER,fXIncludeHandler);  setProperty(XPOINTER_HANDLER,fXPointerHandler);  setProperty(NAMESPACE_CONTEXT,new XIncludeNamespaceSupport());}  }
class C{  @Override public int read(byte[] buffer,int offset,int length) throws IOException {  if (this.remaining == 0) {    return -1;  } else {    if (this.remaining < length) {      length=(int)this.remaining;    }    length=this.in.read(buffer,offset,length);    if (length >= 0) {      this.remaining-=length;      if (this.remaining == 0 && !endOfLineFound) {        endOfLineFound=true;        this.remaining+=NUMBER_OF_EXTRA_CHARACTER_TO_READ;      } else       if (endOfLineFound) {        int end=offset + length;        for (int i=offset; i < end; i++) {          if (buffer[i] == END_OF_LINE_BYTE_VALUE) {            this.remaining=0;            return (i - offset) + 1;          }        }        this.remaining+=NUMBER_OF_EXTRA_CHARACTER_TO_READ;      }    }    return length;  }}  }
class C{  protected PhotosSaveMarketPhotoQuery photo(String value){  return unsafeParam("photo",value);}  }
class C{  public static boolean isTomorrow(Calendar _calendar){  Calendar now=Calendar.getInstance();  if ((now.get(Calendar.DAY_OF_MONTH) + 1) == _calendar.get(Calendar.DAY_OF_MONTH)) {    if (now.get(Calendar.MONTH) == _calendar.get(Calendar.MONTH)) {      if (now.get(Calendar.YEAR) == _calendar.get(Calendar.YEAR)) {        return true;      }    }  }  return false;}  }
class C{  public int charAt(int position){  if (position > this.length)   return -1;  if (position < 0)   return -1;  ByteBuffer bb=(ByteBuffer)ByteBuffer.wrap(bytes).position(position);  return bytesToCodePoint(bb.slice());}  }
class C{  @POST @Consumes("application/json") public Response post(String query){  jsonQuery=query;  if (query.contains("\"ignored\"")) {    return Response.status(Status.OK).entity(weightResponse).build();  }  new JsonSlurper().parseText(query);  if (statusCode == Status.INTERNAL_SERVER_ERROR) {    throw new RuntimeException();  }  return Response.status(statusCode).entity(jsonResponse).build();}  }
class C{  public static Heal handle(EntityLivingBase entity,float damage){  Heal event=new Heal(entity,damage);  OpenModLoader.getEventBus().post(event);  return event;}  }
class C{  public static void enableLogging(boolean enable){  AirMapLog.ENABLED=enable;}  }
class C{  private Integer findLastResIDAssignment(Stmt stmt,Local local,BiDiInterproceduralCFG<Unit,SootMethod> cfg,Set<Stmt> doneSet){  if (!doneSet.add(stmt))   return null;  if (stmt instanceof AssignStmt) {    AssignStmt assign=(AssignStmt)stmt;    if (assign.getLeftOp() == local) {      if (assign.getRightOp() instanceof IntConstant)       return ((IntConstant)assign.getRightOp()).value; else       if (assign.getRightOp() instanceof FieldRef) {        SootField field=((FieldRef)assign.getRightOp()).getField();        for (        Tag tag : field.getTags())         if (tag instanceof IntegerConstantValueTag)         return ((IntegerConstantValueTag)tag).getIntValue(); else         System.err.println("Constant " + field + " was of unexpected type");      } else       if (assign.getRightOp() instanceof InvokeExpr) {        InvokeExpr inv=(InvokeExpr)assign.getRightOp();        if (inv.getMethod().getName().equals("getIdentifier") && inv.getMethod().getDeclaringClass().getName().equals("android.content.res.Resources") && this.resourcePackages != null) {          if (inv.getArgCount() != 3) {            System.err.println("Invalid parameter count for call to getIdentifier");            return null;          }          String resName="";          String resID="";          String packageName="";          if (inv.getArg(0) instanceof StringConstant)           resName=((StringConstant)inv.getArg(0)).value;          if (inv.getArg(1) instanceof StringConstant)           resID=((StringConstant)inv.getArg(1)).value;          if (inv.getArg(2) instanceof StringConstant)           packageName=((StringConstant)inv.getArg(2)).value; else           if (inv.getArg(2) instanceof Local)           packageName=findLastStringAssignment(stmt,(Local)inv.getArg(2),cfg); else {            System.err.println("Unknown parameter type in call to getIdentifier");            return null;          }          ARSCFileParser.AbstractResource res=findResource(resName,resID,packageName);          if (res != null)           return res.getResourceID();        }      }    }  }  for (  Unit pred : cfg.getPredsOf(stmt)) {    if (!(pred instanceof Stmt))     continue;    Integer lastAssignment=findLastResIDAssignment((Stmt)pred,local,cfg,doneSet);    if (lastAssignment != null)     return lastAssignment;  }  return null;}  }
class C{  @Override public boolean execute(Object target){  if (_tokens == null || _containsIndexes == null || _propertyInfo == null)   initialize();  Object value=((ServerEntry)target).getPropertyValue(_tokens[0]);  return (value == null) ? false : performMatching(value,1,0);}  }
class C{  public static AztecCode encode(byte[] data,int minECCPercent,int userSpecifiedLayers){  BitArray bits=new HighLevelEncoder(data).encode();  int eccBits=bits.getSize() * minECCPercent / 100 + 11;  int totalSizeBits=bits.getSize() + eccBits;  boolean compact;  int layers;  int totalBitsInLayer;  int wordSize;  BitArray stuffedBits;  if (userSpecifiedLayers != DEFAULT_AZTEC_LAYERS) {    compact=userSpecifiedLayers < 0;    layers=Math.abs(userSpecifiedLayers);    if (layers > (compact ? MAX_NB_BITS_COMPACT : MAX_NB_BITS)) {      throw new IllegalArgumentException(String.format("Illegal value %s for layers",userSpecifiedLayers));    }    totalBitsInLayer=totalBitsInLayer(layers,compact);    wordSize=WORD_SIZE[layers];    int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);    stuffedBits=stuffBits(bits,wordSize);    if (stuffedBits.getSize() + eccBits > usableBitsInLayers) {      throw new IllegalArgumentException("Data to large for user specified layer");    }    if (compact && stuffedBits.getSize() > wordSize * 64) {      throw new IllegalArgumentException("Data to large for user specified layer");    }  } else {    wordSize=0;    stuffedBits=null;    for (int i=0; ; i++) {      if (i > MAX_NB_BITS) {        throw new IllegalArgumentException("Data too large for an Aztec code");      }      compact=i <= 3;      layers=compact ? i + 1 : i;      totalBitsInLayer=totalBitsInLayer(layers,compact);      if (totalSizeBits > totalBitsInLayer) {        continue;      }      if (wordSize != WORD_SIZE[layers]) {        wordSize=WORD_SIZE[layers];        stuffedBits=stuffBits(bits,wordSize);      }      int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);      if (compact && stuffedBits.getSize() > wordSize * 64) {        continue;      }      if (stuffedBits.getSize() + eccBits <= usableBitsInLayers) {        break;      }    }  }  BitArray messageBits=generateCheckWords(stuffedBits,totalBitsInLayer,wordSize);  int messageSizeInWords=stuffedBits.getSize() / wordSize;  BitArray modeMessage=generateModeMessage(compact,layers,messageSizeInWords);  int baseMatrixSize=(compact ? 11 : 14) + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  int matrixSize;  if (compact) {    matrixSize=baseMatrixSize;    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  BitMatrix matrix=new BitMatrix(matrixSize);  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=(layers - i) * 4 + (compact ? 9 : 12);    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        if (messageBits.get(rowOffset + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + k],alignmentMap[i * 2 + j]);        }        if (messageBits.get(rowOffset + rowSize * 2 + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + j],alignmentMap[baseMatrixSize - 1 - i * 2 - k]);        }        if (messageBits.get(rowOffset + rowSize * 4 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - k],alignmentMap[baseMatrixSize - 1 - i * 2 - j]);        }        if (messageBits.get(rowOffset + rowSize * 6 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - j],alignmentMap[i * 2 + k]);        }      }    }    rowOffset+=rowSize * 8;  }  drawModeMessage(matrix,compact,matrixSize,modeMessage);  if (compact) {    drawBullsEye(matrix,matrixSize / 2,5);  } else {    drawBullsEye(matrix,matrixSize / 2,7);    for (int i=0, j=0; i < baseMatrixSize / 2 - 1; i+=15, j+=16) {      for (int k=(matrixSize / 2) & 1; k < matrixSize; k+=2) {        matrix.set(matrixSize / 2 - j,k);        matrix.set(matrixSize / 2 + j,k);        matrix.set(k,matrixSize / 2 - j);        matrix.set(k,matrixSize / 2 + j);      }    }  }  AztecCode aztec=new AztecCode();  aztec.setCompact(compact);  aztec.setSize(matrixSize);  aztec.setLayers(layers);  aztec.setCodeWords(messageSizeInWords);  aztec.setMatrix(matrix);  return aztec;}  }
class C{  public IsGreaterThanExtended(){  super(null,null);}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.CHISSQUARE);}  }
class C{  protected void handleMatcherFinishedWithDatabaseSide(){}  }
class C{  private void renameColumn(){  tableColumn.setHeaderValue(columnTextField.getText());  renamePopup.setVisible(false);  columnHeader.repaint();}  }
class C{  public Map<String,Object> makeValidContext(String serviceName,String mode,Map<String,? extends Object> context) throws GenericServiceException {  ModelService model=getModelService(serviceName);  return makeValidContext(model,mode,context);}  }
class C{  private void initializeValues(){  passwordChanged=false;  if (showCredentials) {    loginText.setText(location.getUsername());    passwordText.setText(FAKE_PASSWORD);  }  String label=location.getLabel();  useUrlLabelButton.setSelection(label == null);  useCustomLabelButton.setSelection(!useUrlLabelButton.getSelection());  if (label == null) {    label=location.getLocation();  }  customLabelText.setText(label);  SVNUrl url=location.getUrl();  if (url != null) {    repositoryUrlText.setText(url.toString());  } else {    repositoryUrlText.setText("");  }  SVNUrl repositoryRoot=location.getRepositoryRoot();  if (repositoryRoot != null) {    repositoryRootText.setText(repositoryRoot.toString());  } else {    repositoryRootText.setText("");  }}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public void stopRecording(){  if (this.recorder != null) {    try {      if (this.state == STATE.MEDIA_RUNNING) {        this.recorder.stop();        this.setState(STATE.MEDIA_STOPPED);      }      this.recorder.reset();      this.moveFile(this.audioFile);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public static Zmat bai(Zmat B,Zutmat U) throws JampackException {  int i, j, k;  Z x=new Z();  U.getProperties();  B.getProperties();  if (U.nr != U.nc)   throw new JampackException("Rectangular matrix.");  if (U.nr != B.nc)   throw new JampackException("Inconsistent dimensions.");  return H.o(Solve.ahib(U,H.o(B)));}  }
class C{  @Override public boolean isIdDeclared(String name){  return (fIdIdrefChecking) ? super.isIdDeclared(name) : false;}  }
class C{  public AndFileFilter(final List<IOFileFilter> fileFilters){  if (fileFilters == null) {    this.fileFilters=new ArrayList<IOFileFilter>();  } else {    this.fileFilters=new ArrayList<IOFileFilter>(fileFilters);  }}  }
class C{  private Relation addNewRolePlayer(Map<RoleType,Instance> roleMap,RoleType roleType,Instance instance){  if (instance != null)   mindmapsGraph.putCasting((RoleTypeImpl)roleType,(InstanceImpl)instance,this);  if (mindmapsGraph.isBatchLoadingEnabled()) {    setHash(null);  } else {    setHash(roleMap);  }  return this;}  }
class C{  @Override public void clear(){  super.clear();  boot=null;}  }
class C{  public void selectAll(){  selectAll(-1);}  }
class C{  public Properties parseSettings(FirefoxProfileSource source) throws IOException {  File profileFolder=null;  File profilesIniFile=source.getProfilesIni();  if (profilesIniFile.exists()) {    Ini profilesIni=new Ini(profilesIniFile);    for (    Entry<String,Section> entry : profilesIni.entrySet()) {      if ("default".equals(entry.getValue().get("Name"))) {        if ("1".equals(entry.getValue().get("IsRelative"))) {          profileFolder=new File(profilesIniFile.getParentFile().getAbsolutePath(),entry.getValue().get("Path"));        }      }    }  }  if (profileFolder != null) {    Logger.log(getClass(),LogLevel.DEBUG,"Firefox settings folder is {0}",profileFolder);  } else {    Logger.log(getClass(),LogLevel.DEBUG,"Firefox settings folder not found!");  }  File settingsFile=new File(profileFolder,"prefs.js");  BufferedReader fin=new BufferedReader(new InputStreamReader(new FileInputStream(settingsFile)));  Properties result=new Properties();  try {    String line=fin.readLine();    while (line != null) {      line=line.trim();      if (line.startsWith("user_pref(\"network.proxy")) {        line=line.substring(10,line.length() - 2);        int index=line.indexOf(",");        String key=line.substring(0,index).trim();        if (key.startsWith("\"")) {          key=key.substring(1);        }        if (key.endsWith("\"")) {          key=key.substring(0,key.length() - 1);        }        String value=line.substring(index + 1).trim();        if (value.startsWith("\"")) {          value=value.substring(1);        }        if (value.endsWith("\"")) {          value=value.substring(0,value.length() - 1);        }        result.put(key,value);      }      line=fin.readLine();    }  }  finally {    fin.close();  }  return result;}  }
class C{  public static StringBuffer readFromStream(InputStream inputStream){  StringBuffer output=new StringBuffer();  if (inputStream == null) {    return output;  }  InputStreamReader char_input=new InputStreamReader(inputStream,Charset.forName("UTF-8").newDecoder());  BufferedReader br=new BufferedReader(char_input);  try {    while (true) {      String in=br.readLine();      if (in == null) {        break;      }      output.append(in).append("\n");    }    return output;  } catch (  IOException e) {    Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,e);  } finally {    try {      char_input.close();    } catch (    IOException e) {      Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,e);    }    try {      br.close();    } catch (    IOException e) {      Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,e);    }  }  return output;}  }
class C{  public static int levelIdToIndex(UUID levelId){  return (int)levelId.getLeastSignificantBits();}  }
class C{  private void charDataInContent(){  if (DEBUG_ELEMENT_CHILDREN) {    System.out.println("charDataInContent()");  }  if (fElementChildren.length <= fElementChildrenLength) {    QName[] newarray=new QName[fElementChildren.length * 2];    System.arraycopy(fElementChildren,0,newarray,0,fElementChildren.length);    fElementChildren=newarray;  }  QName qname=fElementChildren[fElementChildrenLength];  if (qname == null) {    for (int i=fElementChildrenLength; i < fElementChildren.length; i++) {      fElementChildren[i]=new QName();    }    qname=fElementChildren[fElementChildrenLength];  }  qname.clear();  fElementChildrenLength++;}  }
class C{  public static MerkleRoot computeMerkleRoot(List<? extends MerkleTreeNode> nodes){  List<MerkleTreeNode> merkleTreeNodeList=new ArrayList<>(nodes.size());  for (  MerkleTreeNode n : nodes) {    merkleTreeNodeList.add(new PrunedNode(n.getID(),0));  }  MerkleTreeNode rootNode=compress(merkleTreeNodeList).get(0);  return new MerkleRoot(rootNode.getID());}  }
class C{  @Before public void beforeTest(){  pokemon=mock(PokemonModel.class);  operation=spy(EvolveOperation.class);  operation.pokemon=pokemon;}  }
class C{  private void growTable(){  final int oldLength=states.length;  final int[] oldKeys=keys;  final double[] oldValues=values;  final byte[] oldStates=states;  final int newLength=RESIZE_MULTIPLIER * oldLength;  final int[] newKeys=new int[newLength];  final double[] newValues=new double[newLength];  final byte[] newStates=new byte[newLength];  final int newMask=newLength - 1;  for (int i=0; i < oldLength; ++i) {    if (oldStates[i] == FULL) {      final int key=oldKeys[i];      final int index=findInsertionIndex(newKeys,newStates,key,newMask);      newKeys[index]=key;      newValues[index]=oldValues[i];      newStates[index]=FULL;    }  }  mask=newMask;  keys=newKeys;  values=newValues;  states=newStates;}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  public static final void initZK(ZooKeeper zkc,String selfBrokerUrl){  try {    LocalZooKeeperConnectionService.checkAndCreatePersistNode(zkc,OWNER_INFO_ROOT);    cleanupNamespaceNodes(zkc,OWNER_INFO_ROOT,selfBrokerUrl);  } catch (  Exception e) {    LOG.error(e.getMessage(),e);    throw new RuntimeException(e);  }}  }
class C{  @Override public void updateSymbol(){  boolean enableField=false;  String selectedString=(String)attributeChooserComboBox.getSelectedItem();  if (selectedString.compareTo(ValueSubPanel.getPanelName()) == 0) {    enableField=true;    for (    ExpressionUpdateInterface listener : listenerList) {      listener.valueUpdated();    }  } else   if (selectedString.compareTo(DataSourceAttributePanel.getPanelName()) == 0) {    String attribute=dataSourceAttributePanel.getSelectedItem();    for (    ExpressionUpdateInterface listener : listenerList) {      listener.attributeUpdated(attribute);    }  } else   if (selectedString.compareTo(ExpressionSubPanel.getPanelName()) == 0) {    Expression expression=expressionPanel.getExpression();    for (    ExpressionUpdateInterface listener : listenerList) {      listener.expressionUpdated(expression);    }  }  if (this.field != null) {    this.field.setVisible(enableField);  }}  }
class C{  public static boolean exists(String table,String where,Object[] args) throws SQLException {  TimeStamp t=TimeStamp.create();  StringBuilder sql=new StringBuilder();  sql.append("select 1 from ").append(table);  if (where != null) {    sql.append(" where ").append(where);  }  sql.append(" limit 1");  Connection c=null;  PreparedStatement p=null;  ResultSet r=null;  try {    c=getConnection();    if (c == null)     return false;    p=c.prepareStatement(sql.toString());    int order=1;    if (args != null) {      for (int i=0; i < args.length; i++) {        Object o=args[i];        try {          setParameter(p,order++,o);        } catch (        Exception e) {          log.error("i=" + i + ", o="+ o,e);        }      }    }    r=p.executeQuery();    return r.next();  } catch (  SQLException e) {    if (log.isErrorEnabled())     log.error(sql.toString() + toString(args),e);    throw e;  } finally {    close(r,p,c);    if (t.past() > 2 && sqllog.isDebugEnabled()) {      sqllog.debug("cost:" + t.past() + "ms, sql=["+ sql+ "], args="+ Helper.toString(args));    }  }}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  protected GroupsIsMemberQueryWithUserIds userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  public static void replaceBinaryHttpEntityBody(FullHttpMessage message,byte[] newBinaryContents){  message.content().resetWriterIndex();  message.content().ensureWritable(newBinaryContents.length,true);  message.content().writeBytes(newBinaryContents);  message.headers().set(HttpHeaders.Names.CONTENT_LENGTH,newBinaryContents.length);}  }
class C{  public static boolean isLastChildInLane(BaseLayoutManager lm,int itemPosition,int itemCount){  final int laneCount=lm.getLanes().getCount();  Log.d("ItemSpacingOffsets","isLastChildInLane...itemPosition=" + itemPosition + " , itemCount="+ itemCount+ " , laneCount="+ laneCount);  if (itemPosition < itemCount - laneCount) {    return false;  }  if (lm instanceof SpannableGridLayoutManager || lm instanceof StaggeredGridLayoutManager) {    return false;  }  return true;}  }
class C{  public boolean isTooLong(){  return fullNickname.length() > MAX_NICKNAME_LENGTH;}  }
class C{  public Single<AuthResult> signInWithEmailAndPassword(final String _email,final String _password){  return observeSingleValue(firebaseAuth.signInWithEmailAndPassword(_email,_password));}  }
class C{  protected CanWriteFileFilter(){}  }
class C{  public boolean dump_html(){  return soot.PhaseOptions.getBoolean(options,"dump-html");}  }
class C{  public GSQueueConnectionFactoryImpl() throws JMSException {  this(null,null);}  }
class C{  @Override public Filter createFilter(){  return new AndExtended();}  }
class C{  public FriendsAddQuery add(UserActor actor,int userId){  return new FriendsAddQuery(getClient(),actor,userId);}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  public static void writeLocal(@Nonnull IndentingWriter writer,@Nullable String name,@Nullable String type,@Nullable String signature) throws IOException {  if (name != null) {    ReferenceFormatter.writeStringReference(writer,name);  } else {    writer.write("null");  }  writer.write(':');  if (type != null) {    writer.write(type);  } else {    writer.write("V");  }  if (signature != null) {    writer.write(", ");    ReferenceFormatter.writeStringReference(writer,signature);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostDropRate_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200301,skillname);}  }
class C{  public Iterator<RecordID> lookupKey(DataType key){  BPlusNode root=BPlusNode.getBPlusNode(this,rootPageNum);  LeafNode leaf=root.locateLeaf(key,true);  return new BPlusIterator(leaf,key,false);}  }
class C{  static double[] loadExpIntA(){  return EXP_INT_A.clone();}  }
class C{  public void populateDirectoryParameters(){  File projectRoot=new File(getString(NewModuleWizardState.ATTR_PROJECT_LOCATION));  File moduleRoot=new File(projectRoot,getString(FormFactorUtils.ATTR_MODULE_NAME));  File mainFlavorSourceRoot=new File(moduleRoot,TemplateWizard.MAIN_FLAVOR_SOURCE_PATH);  File testSourceRoot=new File(moduleRoot,TemplateWizard.TEST_SOURCE_PATH);  if (!myParameters.containsKey(ATTR_RES_OUT) || myParameters.get(ATTR_RES_OUT) == null) {    File resourceSourceRoot=new File(mainFlavorSourceRoot,TemplateWizard.RESOURCE_SOURCE_PATH);    put(ATTR_RES_OUT,FileUtil.toSystemIndependentName(resourceSourceRoot.getPath()));  }  if (!myParameters.containsKey(ATTR_AIDL_OUT) || get(ATTR_AIDL_OUT) == null) {    File aidlRoot=new File(mainFlavorSourceRoot,TemplateWizard.AIDL_SOURCE_PATH);    put(ATTR_AIDL_OUT,FileUtil.toSystemIndependentName(aidlRoot.getPath()));  }  String javaPackageDir=getString(ATTR_PACKAGE_NAME).replace('.',File.separatorChar);  if (!myParameters.containsKey(ATTR_SRC_OUT) || myParameters.get(ATTR_SRC_OUT) == null) {    File javaSourceRoot=new File(mainFlavorSourceRoot,TemplateWizard.JAVA_SOURCE_PATH);    File javaSourcePackageRoot;    if (myParameters.containsKey(ATTR_PACKAGE_ROOT)) {      javaSourcePackageRoot=new File(getString(ATTR_PACKAGE_ROOT));      String relativePath=FileUtil.getRelativePath(javaSourceRoot,javaSourcePackageRoot);      String javaPackage=relativePath != null ? FileUtil.toSystemIndependentName(relativePath).replace('/','.') : null;      put(ATTR_PACKAGE_NAME,javaPackage);    } else {      javaSourcePackageRoot=new File(javaSourceRoot,javaPackageDir);    }    put(ATTR_SRC_OUT,FileUtil.toSystemIndependentName(javaSourcePackageRoot.getPath()));  }  if (!myParameters.containsKey(ATTR_MANIFEST_OUT) || myParameters.get(ATTR_MANIFEST_OUT) == null) {    put(ATTR_MANIFEST_OUT,FileUtil.toSystemIndependentName(mainFlavorSourceRoot.getPath()));  }  if (!myParameters.containsKey(ATTR_TEST_OUT) || myParameters.get(ATTR_TEST_OUT) == null) {    String relativeTestOut=FileUtil.join(TemplateWizard.JAVA_SOURCE_PATH,javaPackageDir);    File testOut=new File(testSourceRoot,relativeTestOut);    put(ATTR_TEST_OUT,FileUtil.toSystemIndependentName(testOut.getPath()));  }  put(ATTR_TOP_OUT,FileUtil.toSystemIndependentName(projectRoot.getPath()));  put(ATTR_PROJECT_OUT,FileUtil.toSystemIndependentName(moduleRoot.getPath()));  String mavenUrl=System.getProperty(TemplateWizard.MAVEN_URL_PROPERTY);  if (mavenUrl != null) {    put(ATTR_MAVEN_URL,mavenUrl);  }  populateRelativePackage(null);}  }
class C{  @Override public boolean include(String identifier){  return whitelist.contains(identifier);}  }
class C{  public static void assertRelativelyEquals(String msg,double expected,double actual,double relativeError){  if (Double.isNaN(expected)) {    Assert.assertTrue(msg,Double.isNaN(actual));  } else   if (Double.isNaN(actual)) {    Assert.assertTrue(msg,Double.isNaN(expected));  } else   if (Double.isInfinite(actual) || Double.isInfinite(expected)) {    Assert.assertEquals(expected,actual,relativeError);  } else   if (expected == 0.0) {    Assert.assertEquals(msg,actual,expected,relativeError);  } else {    double absError=FastMath.abs(expected) * relativeError;    Assert.assertEquals(msg,expected,actual,absError);  }}  }
class C{  public void updateVisiblityValue(int referenceIndex){  mCachedVisibleArea=mLayoutTab.computeVisibleArea();  mCachedIndexDistance=Math.abs(mIndex - referenceIndex);  mOrderSortingValue=computeOrderSortingValue(mCachedIndexDistance,mCacheStackVisibility);  mVisiblitySortingValue=computeVisibilitySortingValue(mCachedVisibleArea,mOrderSortingValue,mCacheStackVisibility);}  }
class C{  public static void isNotInstanceOf(String argumentName,Object argumentObject,Class<?>... targetClasses){  notNull(argumentName,argumentObject);  for (int i=0; i < targetClasses.length; ) {    Class<?> targetClass=targetClasses[i++];    if (targetClass.isInstance(argumentObject)) {      throw new IllegalArgumentException(argumentName + " cannot be an instance of " + targetClass.getName());    }  }}  }
class C{  public int append_file1(String appender_file_id,long file_size,UploadCallback callback) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(appender_file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.append_file(parts[0],parts[1],file_size,callback);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200964,skilltarget,num0,skillcaster,skillname);}  }
class C{  public void invalidate() throws LogException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TransientLogFile.class.getName(),"invalidate");  }  if (persistenceLogger.isLoggable(Level.FINEST)) {    persistenceLogger.log(Level.FINEST,"Calling logMgr to release cookie: {0}",new Long(cookie));  }  logMgr.release(cookie);  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TransientLogFile.class.getName(),"invalidate");  }}  }
class C{  public NotesGetCommentsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public void clearSubFilters(){  subFilters.clear();}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=opt(key);  if (value == null) {    put(key,1);  } else {    if (value instanceof Integer) {      put(key,((Integer)value).intValue() + 1);    } else     if (value instanceof Long) {      put(key,((Long)value).longValue() + 1);    } else     if (value instanceof Double) {      put(key,((Double)value).doubleValue() + 1);    } else     if (value instanceof Float) {      put(key,((Float)value).floatValue() + 1);    } else {      throw new JSONException("Unable to increment [" + key + "].");    }  }  return this;}  }
class C{  public DeleteData(String tblName,Predicate pred){  this.tblName=tblName;  this.pred=pred;}  }
class C{  public boolean upgradeToWriteLock(){  if (globalSync.trySingleReaderUpgrade())   return false;  slowUpgrade();  return true;}  }
class C{  public static Map<String,String> readStringsMap(String name){  Properties props=readProperties(name);  HashMap<String,String> map=new HashMap<String,String>();  if (props != null) {    for (    Map.Entry e : props.entrySet()) {      map.put(e.getKey().toString(),e.getValue().toString());    }  }  return map;}  }
class C{  public static byte[] hexStringToBytes(String hexString){  if (hexString == null || hexString.equals("")) {    return null;  }  hexString=hexString.toUpperCase();  int length=hexString.length() / 2;  char[] hexChars=hexString.toCharArray();  byte[] d=new byte[length];  for (int i=0; i < length; i++) {    int pos=i * 2;    d[i]=(byte)(charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));  }  return d;}  }
class C{  public void stopAnimate(){  isPlaying=false;  mLoopAnimateY=0;  invalidate();}  }
class C{  private static BSPTree<Euclidean1D> buildTree(final double lower,final double upper,final double tolerance){  if (Double.isInfinite(lower) && (lower < 0)) {    if (Double.isInfinite(upper) && (upper > 0)) {      return new BSPTree<Euclidean1D>(Boolean.TRUE);    }    final SubHyperplane<Euclidean1D> upperCut=new OrientedPoint(new Vector1D(upper),true,tolerance).wholeHyperplane();    return new BSPTree<Euclidean1D>(upperCut,new BSPTree<Euclidean1D>(Boolean.FALSE),new BSPTree<Euclidean1D>(Boolean.TRUE),null);  }  final SubHyperplane<Euclidean1D> lowerCut=new OrientedPoint(new Vector1D(lower),false,tolerance).wholeHyperplane();  if (Double.isInfinite(upper) && (upper > 0)) {    return new BSPTree<Euclidean1D>(lowerCut,new BSPTree<Euclidean1D>(Boolean.FALSE),new BSPTree<Euclidean1D>(Boolean.TRUE),null);  }  final SubHyperplane<Euclidean1D> upperCut=new OrientedPoint(new Vector1D(upper),true,tolerance).wholeHyperplane();  return new BSPTree<Euclidean1D>(lowerCut,new BSPTree<Euclidean1D>(Boolean.FALSE),new BSPTree<Euclidean1D>(upperCut,new BSPTree<Euclidean1D>(Boolean.FALSE),new BSPTree<Euclidean1D>(Boolean.TRUE),null),null);}  }
class C{  public CMUDiphoneVoice(){  this(null,null,null,null,null,null,null,null,null);}  }
class C{  private boolean isTypedTimeLegalSoFar(){  Node node=mLegalTimesTree;  for (  int keyCode : mTypedTimes) {    node=node.canReach(keyCode);    if (node == null) {      return false;    }  }  return true;}  }
class C{  public static void showToastWhenPossible(Context context,String message){  Activity activity=Restarter.getForegroundActivity(context);  if (activity != null) {    Restarter.showToast(activity,message);  } else {    showToastWhenPossible(context,message,10);  }}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  public static AztecCode encode(byte[] data){  return encode(data,DEFAULT_EC_PERCENT,DEFAULT_AZTEC_LAYERS);}  }
class C{  private static final String toXml(Joint joint){  StringBuilder sb=new StringBuilder();  sb.append("<Joint Id=\"").append(joint.getId()).append("\" Name=\"").append(joint.getUserData()).append("\" xsi:type=\"").append(joint.getClass().getSimpleName()).append("\">");  sb.append("<BodyId1>").append(joint.getBody1().getId()).append("</BodyId1>");  sb.append("<BodyId2>").append(joint.getBody2().getId()).append("</BodyId2>");  sb.append("<CollisionAllowed>").append(joint.isCollisionAllowed()).append("</CollisionAllowed>");  if (joint instanceof AngleJoint) {    AngleJoint aj=(AngleJoint)joint;    sb.append("<LowerLimit>").append(Math.toDegrees(aj.getLowerLimit())).append("</LowerLimit>");    sb.append("<UpperLimit>").append(Math.toDegrees(aj.getUpperLimit())).append("</UpperLimit>");    sb.append("<LimitEnabled>").append(aj.isLimitEnabled()).append("</LimitEnabled>");    sb.append("<Ratio>").append(aj.getRatio()).append("</Ratio>");    sb.append("<ReferenceAngle>").append(Math.toDegrees(aj.getReferenceAngle())).append("</ReferenceAngle>");  } else   if (joint instanceof DistanceJoint) {    DistanceJoint dj=(DistanceJoint)joint;    sb.append(XmlGenerator.toXml(dj.getAnchor1(),"Anchor1"));    sb.append(XmlGenerator.toXml(dj.getAnchor2(),"Anchor2"));    sb.append("<Frequency>").append(dj.getFrequency()).append("</Frequency>");    sb.append("<DampingRatio>").append(dj.getDampingRatio()).append("</DampingRatio>");    sb.append("<Distance>").append(dj.getDistance()).append("</Distance>");  } else   if (joint instanceof FrictionJoint) {    FrictionJoint fj=(FrictionJoint)joint;    sb.append(XmlGenerator.toXml(fj.getAnchor1(),"Anchor"));    sb.append("<MaximumForce>").append(fj.getMaximumForce()).append("</MaximumForce>");    sb.append("<MaximumTorque>").append(fj.getMaximumTorque()).append("</MaximumTorque>");  } else   if (joint instanceof PinJoint) {    PinJoint mj=(PinJoint)joint;    sb.append(XmlGenerator.toXml(mj.getAnchor2(),"Anchor"));    sb.append(XmlGenerator.toXml(mj.getAnchor1(),"Target"));    sb.append("<Frequency>").append(mj.getFrequency()).append("</Frequency>");    sb.append("<DampingRatio>").append(mj.getDampingRatio()).append("</DampingRatio>");    sb.append("<MaximumForce>").append(mj.getMaximumForce()).append("</MaximumForce>");  } else   if (joint instanceof PrismaticJoint) {    PrismaticJoint pj=(PrismaticJoint)joint;    sb.append(XmlGenerator.toXml(pj.getAnchor1(),"Anchor"));    sb.append(XmlGenerator.toXml(pj.getAxis(),"Axis"));    sb.append("<LowerLimit>").append(pj.getLowerLimit()).append("</LowerLimit>");    sb.append("<UpperLimit>").append(pj.getUpperLimit()).append("</UpperLimit>");    sb.append("<LimitEnabled>").append(pj.isLimitEnabled()).append("</LimitEnabled>");    sb.append("<MotorSpeed>").append(pj.getMotorSpeed()).append("</MotorSpeed>");    sb.append("<MaximumMotorForce>").append(pj.getMaximumMotorForce()).append("</MaximumMotorForce>");    sb.append("<MotorEnabled>").append(pj.isMotorEnabled()).append("</MotorEnabled>");    sb.append("<ReferenceAngle>").append(Math.toDegrees(pj.getReferenceAngle())).append("</ReferenceAngle>");  } else   if (joint instanceof PulleyJoint) {    PulleyJoint pj=(PulleyJoint)joint;    sb.append(XmlGenerator.toXml(pj.getPulleyAnchor1(),"PulleyAnchor1"));    sb.append(XmlGenerator.toXml(pj.getPulleyAnchor2(),"PulleyAnchor2"));    sb.append(XmlGenerator.toXml(pj.getAnchor1(),"BodyAnchor1"));    sb.append(XmlGenerator.toXml(pj.getAnchor2(),"BodyAnchor2"));    sb.append("<Ratio>").append(pj.getRatio()).append("</Ratio>");  } else   if (joint instanceof RevoluteJoint) {    RevoluteJoint rj=(RevoluteJoint)joint;    sb.append(XmlGenerator.toXml(rj.getAnchor1(),"Anchor"));    sb.append("<LowerLimit>").append(Math.toDegrees(rj.getLowerLimit())).append("</LowerLimit>");    sb.append("<UpperLimit>").append(Math.toDegrees(rj.getUpperLimit())).append("</UpperLimit>");    sb.append("<LimitEnabled>").append(rj.isLimitEnabled()).append("</LimitEnabled>");    sb.append("<MotorSpeed>").append(Math.toDegrees(rj.getMotorSpeed())).append("</MotorSpeed>");    sb.append("<MaximumMotorTorque>").append(rj.getMaximumMotorTorque()).append("</MaximumMotorTorque>");    sb.append("<MotorEnabled>").append(rj.isMotorEnabled()).append("</MotorEnabled>");    sb.append("<ReferenceAngle>").append(Math.toDegrees(rj.getReferenceAngle())).append("</ReferenceAngle>");  } else   if (joint instanceof RopeJoint) {    RopeJoint rj=(RopeJoint)joint;    sb.append(XmlGenerator.toXml(rj.getAnchor1(),"Anchor1"));    sb.append(XmlGenerator.toXml(rj.getAnchor2(),"Anchor2"));    sb.append("<LowerLimit>").append(rj.getLowerLimit()).append("</LowerLimit>");    sb.append("<UpperLimit>").append(rj.getUpperLimit()).append("</UpperLimit>");    sb.append("<LowerLimitEnabled>").append(rj.isLowerLimitEnabled()).append("</LowerLimitEnabled>");    sb.append("<UpperLimitEnabled>").append(rj.isUpperLimitEnabled()).append("</UpperLimitEnabled>");  } else   if (joint instanceof WeldJoint) {    WeldJoint wj=(WeldJoint)joint;    sb.append(XmlGenerator.toXml(wj.getAnchor1(),"Anchor"));    sb.append("<ReferenceAngle>").append(Math.toDegrees(wj.getReferenceAngle())).append("</ReferenceAngle>");    sb.append("<Frequency>").append(wj.getFrequency()).append("</Frequency>");    sb.append("<DampingRatio>").append(wj.getDampingRatio()).append("</DampingRatio>");  } else   if (joint instanceof WheelJoint) {    WheelJoint wj=(WheelJoint)joint;    sb.append(XmlGenerator.toXml(wj.getAnchor1(),"Anchor"));    sb.append(XmlGenerator.toXml(wj.getAxis(),"Axis"));    sb.append("<MotorSpeed>").append(Math.toDegrees(wj.getMotorSpeed())).append("</MotorSpeed>");    sb.append("<MaximumMotorTorque>").append(wj.getMaximumMotorTorque()).append("</MaximumMotorTorque>");    sb.append("<MotorEnabled>").append(wj.isMotorEnabled()).append("</MotorEnabled>");    sb.append("<Frequency>").append(wj.getFrequency()).append("</Frequency>");    sb.append("<DampingRatio>").append(wj.getDampingRatio()).append("</DampingRatio>");  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),joint.getClass().getName()));  }  sb.append("</Joint>");  return sb.toString();}  }
class C{  private LinkedHashSet<DimensionField> bindDimensionFields(Dimension dimension,List<String> showFields) throws BadApiRequestException {  Map<String,DimensionField> dimensionNameToFieldMap=dimension.getDimensionFields().stream().collect(StreamUtils.toLinkedDictionary(null));  LinkedHashSet<DimensionField> dimensionFields=new LinkedHashSet<>();  Set<String> invalidDimensionFields=new LinkedHashSet<>();  for (  String field : showFields) {    if (dimensionNameToFieldMap.containsKey(field)) {      dimensionFields.add(dimensionNameToFieldMap.get(field));    } else {      invalidDimensionFields.add(field);    }  }  if (!invalidDimensionFields.isEmpty()) {    LOG.debug(DIMENSION_FIELDS_UNDEFINED.logFormat(invalidDimensionFields,dimension.getApiName()));    throw new BadApiRequestException(DIMENSION_FIELDS_UNDEFINED.format(invalidDimensionFields,dimension.getApiName()));  }  return dimensionFields;}  }
class C{  public boolean isDescendant(Integer idAbove,Integer idBelow){  return id2Address.get(idBelow).startsWith(id2Address.get(idAbove));}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      rotatedData[x * height + height - y - 1]=data[x + y * width];    }  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(rotatedData,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  private @NotNull Aggregation createSummingAggregator(MetricField innerMetric){  String outerSummingFieldName;  if (!innerMetric.isSketch() && innerMetric instanceof Aggregation) {    outerSummingFieldName=innerMetric.getName();  } else {    outerSummingFieldName=innerMetric.getName() + "_sum";  }  if (innerMetric.isFloatingPoint()) {    return new DoubleSumAggregation(outerSummingFieldName,innerMetric.getName());  }  return new LongSumAggregation(outerSummingFieldName,innerMetric.getName());}  }
class C{  public boolean optimizeScanForSingleObject(){  return _supportFifoPerSegment && getNumSegments() == 1 && size() <= 1;}  }
class C{  private byte[][] ECDSAgeneratePublicAndPrivateKey(){  int length=0;  byte[][] keys;  do {    ECKeyPairGenerator gen=new ECKeyPairGenerator();    SecureRandom secureRandom=new SecureRandom();    X9ECParameters secnamecurves=SECNamedCurves.getByName("secp256k1");    ECDomainParameters ecParams=new ECDomainParameters(secnamecurves.getCurve(),secnamecurves.getG(),secnamecurves.getN(),secnamecurves.getH());    ECKeyGenerationParameters keyGenParam=new ECKeyGenerationParameters(ecParams,secureRandom);    gen.init(keyGenParam);    AsymmetricCipherKeyPair kp=gen.generateKeyPair();    ECPrivateKeyParameters privatekey=(ECPrivateKeyParameters)kp.getPrivate();    ECPoint dd=secnamecurves.getG().multiply(privatekey.getD());    byte[] publickey=new byte[65];    System.arraycopy(dd.getY().toBigInteger().toByteArray(),0,publickey,64 - dd.getY().toBigInteger().toByteArray().length + 1,dd.getY().toBigInteger().toByteArray().length);    System.arraycopy(dd.getX().toBigInteger().toByteArray(),0,publickey,32 - dd.getX().toBigInteger().toByteArray().length + 1,dd.getX().toBigInteger().toByteArray().length);    publickey[0]=4;    length=privatekey.getD().toByteArray().length;    keys=new byte[][]{privatekey.getD().toByteArray(),publickey};  } while (length != 32);  return keys;}  }
class C{  private void takeScreenshot(){  Bitmap bmp=screen.grabScreen();  if (bmp == null) {    return;  }  scanPokemon(bmp,Optional.<String>absent());  bmp.recycle();}  }
class C{  void sendEmailRightNow(Launch launch,Project project,ServerEmailConfig emailConfig){  ProjectEmailConfig projectConfig=project.getConfiguration().getEmailConfig();  for (  EmailSenderCase one : projectConfig.getEmailCases()) {    Optional<SendCase> option=SendCase.findByName(one.getSendCase());    boolean successRate=isSuccessRateEnough(launch,option.get());    boolean matchedNames=isLaunchNameMatched(launch,one);    boolean matchedTags=isTagsMatched(launch,one);    List<String> recipients=one.getRecipients();    if (successRate && matchedNames && matchedTags) {      String[] recipientsArray=findRecipients(launch.getUserRef(),recipients);      try {        String basicURL=UriComponentsBuilder.fromHttpRequest(new ServletServerHttpRequest(currentRequest.get())).replacePath(String.format("/#%s/launches/all/",project.getName())).build().toUriString();        String resourcesURL=UriComponentsBuilder.fromHttpRequest(new ServletServerHttpRequest(currentRequest.get())).replacePath("/img").build().toUriString();        emailService.reconfig(emailConfig);        emailService.setAddressFrom(project.getConfiguration().getEmailConfig().getFrom());        emailService.sendLaunchFinishNotification(recipientsArray,basicURL + launch.getId(),launch,resourcesURL,project.getConfiguration());      } catch (      Exception e) {        LOGGER.error("Unable to send email. Error: \n{}",e);      }    }  }}  }
class C{  private static void markChecked(File templateFile,boolean createWithProject){  markChecked(templateFile.getParentFile().getName(),templateFile.getName(),createWithProject);}  }
class C{  @Override public Plan createPlan(QueryData data,Transaction tx){  for (  String tbl : data.tables()) {    String viewdef=VanillaDb.catalogMgr().getViewDef(tbl,tx);    if (viewdef != null)     views.add(VanillaDb.newPlanner().createQueryPlan(viewdef,tx)); else {      TablePlanner tp=new TablePlanner(tbl,data.pred(),tx);      tablePlanners.add(tp);    }  }  Plan trunk=getLowestSelectPlan();  while (!tablePlanners.isEmpty() || !views.isEmpty()) {    Plan p=getLowestJoinPlan(trunk);    if (p != null)     trunk=p; else     trunk=getLowestProductPlan(trunk);  }  if (data.groupFields() != null)   trunk=new GroupByPlan(trunk,data.groupFields(),data.aggregationFn(),tx);  trunk=new ProjectPlan(trunk,data.projectFields());  if (data.sortFields() != null)   trunk=new SortPlan(trunk,data.sortFields(),data.sortDirections(),tx);  if (data.isExplain())   trunk=new ExplainPlan(trunk);  return trunk;}  }
class C{  public static int counterClockwise(Vector2f p0,Vector2f p1,Vector2f p2){  float dx1, dx2, dy1, dy2;  dx1=p1.x - p0.x;  dy1=p1.y - p0.y;  dx2=p2.x - p0.x;  dy2=p2.y - p0.y;  if (dx1 * dy2 > dy1 * dx2) {    return 1;  }  if (dx1 * dy2 < dy1 * dx2) {    return -1;  }  if ((dx1 * dx2 < 0) || (dy1 * dy2 < 0)) {    return -1;  }  if ((dx1 * dx1 + dy1 * dy1) < (dx2 * dx2 + dy2 * dy2)) {    return 1;  }  return 0;}  }
class C{  public PhotosPutTagQuery x2(Float value){  return unsafeParam("x2",value);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public FixedWidthTextTableWriter(String location) throws DataIOException {  this(FixedWidthTextTableSchema.load(location));}  }
class C{  public boolean gotoPrevious(){  currentIterator=null;  currentId=null;  return isCurrentSet();}  }
class C{  public static boolean isNotPoBox(String s){  if (isEmpty(s))   return defaultEmptyOK;  String sl=s.toLowerCase();  if (sl.indexOf("p.o. b") != -1)   return false;  if (sl.indexOf("p.o.b") != -1)   return false;  if (sl.indexOf("p.o b") != -1)   return false;  if (sl.indexOf("p o b") != -1)   return false;  if (sl.indexOf("po b") != -1)   return false;  if (sl.indexOf("pobox") != -1)   return false;  if (sl.indexOf("po#") != -1)   return false;  if (sl.indexOf("po #") != -1)   return false;  if (sl.indexOf("p.0. b") != -1)   return false;  if (sl.indexOf("p.0.b") != -1)   return false;  if (sl.indexOf("p.0 b") != -1)   return false;  if (sl.indexOf("p 0 b") != -1)   return false;  if (sl.indexOf("p0 b") != -1)   return false;  if (sl.indexOf("p0box") != -1)   return false;  if (sl.indexOf("p0#") != -1)   return false;  if (sl.indexOf("p0 #") != -1)   return false;  return true;}  }
class C{  public final boolean isOverridingUiMode(){  return (myOverride & CFG_UI_MODE) != 0;}  }
class C{  public void enterFullScreen(){  View decorView=mContext.getWindow().getDecorView();  hideSystemUI(decorView);  for (  View view : views) {    view.setVisibility(View.GONE);    view.invalidate();  }}  }
class C{  public static String toString(Object object) throws JSONException {  return toString(object,null);}  }
class C{  private String identifyPunctClass(Match punct,RegExp regExp,String image,LanguageResource langRes){  String oneClass=this.identifyClass(punct.getImage(),regExp,langRes.getPunctDescr());  if (langRes.isAncestor(PunctDescription.OPEN_CLOSE_PUNCT,oneClass)) {    int nextIndex=punct.getEndIndex();    if ((nextIndex >= image.length()) || !Character.isLetter(image.charAt(nextIndex))) {      oneClass=PunctDescription.CLOSE_PUNCT;    } else {      int prevIndex=punct.getStartIndex() - 1;      if ((prevIndex < 0) || !Character.isLetter(image.charAt(prevIndex))) {        oneClass=PunctDescription.OPEN_PUNCT;      }    }  }  return oneClass;}  }
class C{  public Builder primaryDarkColor(int colorPrimaryDark){  this.buttonPressedBackgroundColor=colorPrimaryDark;  return this;}  }
class C{  private void mapAbsoluteToRelative(float[] destPoints,float[] srcPoints,int numPoints){  for (int i=0; i < numPoints; i++) {    destPoints[i * 2 + 0]=(srcPoints[i * 2 + 0] - mImageBounds.left) / mImageBounds.width();    destPoints[i * 2 + 1]=(srcPoints[i * 2 + 1] - mImageBounds.top) / mImageBounds.height();  }}  }
class C{  public void emit(View emiter,int particlesPerSecond){  emitWithGravity(emiter,Gravity.CENTER,particlesPerSecond);}  }
class C{  private HttpURLConnection openHttpURLConnection(URL url,HttpClientRequest httpClientRequest,String method) throws IOException {  logger.info("Open connection for api " + url.getPath());  HttpURLConnection.setFollowRedirects(true);  HttpURLConnection conn;  conn=(HttpURLConnection)url.openConnection();  conn.setRequestMethod(method);  String downloadFile=httpClientRequest.getDownloadFile();  if (downloadFile != null) {    File file=new File(downloadFile);    if (file.exists()) {      conn.setRequestProperty("RANGE","bytes=" + file.length() + "-");    }  }  Map<String,String> headers=httpClientRequest.getHeaders();  if (headers != null && !headers.isEmpty()) {    for (    Map.Entry<String,String> entry : headers.entrySet()) {      conn.setRequestProperty(entry.getKey(),entry.getValue());    }  }  logger.info("Hold cookie: %s.",cookieManager.getCookieStore().getCookies());  conn.setRequestProperty("Content-Type",httpClientRequest.getContentType());  conn.setRequestProperty("User-Agent",httpClientRequest.getUserAgent());  return conn;}  }
class C{  public JimpleLocal(String name,Type type){  setName(name);  setType(type);  Scene.v().getLocalNumberer().add(this);}  }
class C{  public long snapshotSize(){  return snapshotBytes;}  }
class C{  public Builder zoomOutText(String zoomOutText){  this.zoomOutText=zoomOutText;  return this;}  }
class C{  public static <T extends TextView>InputValidator validate(T input){  return new DefaultInputValidator<>(input);}  }
class C{  private void updateLayoutParams(View currentHeader){  MarginLayoutParams params=(MarginLayoutParams)currentHeader.getLayoutParams();  matchMarginsToPadding(params);}  }
class C{  public static boolean isByteCodeClassName(String className){  return ((className.startsWith("L") || className.startsWith("[")) && className.endsWith(";") && ((className.indexOf('/') != -1 || className.indexOf('.') == -1)));}  }
class C{  private int purgeDescending(final int lowIndex,final int highIndex,final RollingFileManager manager){  int suffixLength=0;  final List<FileRenameAction> renames=new ArrayList<FileRenameAction>();  final StringBuilder buf=new StringBuilder();  manager.getPatternProcessor().formatFileName(subst,buf,lowIndex);  String lowFilename=subst.replace(buf);  if (lowFilename.endsWith(EXT_GZIP)) {    suffixLength=EXT_GZIP.length();  } else   if (lowFilename.endsWith(EXT_ZIP)) {    suffixLength=EXT_ZIP.length();  }  for (int i=lowIndex; i <= highIndex; i++) {    File toRename=new File(lowFilename);    boolean isBase=false;    if (suffixLength > 0) {      final File toRenameBase=new File(lowFilename.substring(0,lowFilename.length() - suffixLength));      if (toRename.exists()) {        if (toRenameBase.exists()) {          LOGGER.debug("DefaultRolloverStrategy.purgeDescending deleting {} base of {}.",toRenameBase,toRename);          toRenameBase.delete();        }      } else {        toRename=toRenameBase;        isBase=true;      }    }    if (toRename.exists()) {      if (i == highIndex) {        LOGGER.debug("DefaultRolloverStrategy.purgeDescending deleting {} at high index {}: all slots full.",toRename,i);        if (!toRename.delete()) {          return -1;        }        break;      }      buf.setLength(0);      manager.getPatternProcessor().formatFileName(subst,buf,i + 1);      final String highFilename=subst.replace(buf);      String renameTo=highFilename;      if (isBase) {        renameTo=highFilename.substring(0,highFilename.length() - suffixLength);      }      renames.add(new FileRenameAction(toRename,new File(renameTo),true));      lowFilename=highFilename;    } else {      break;    }  }  for (int i=renames.size() - 1; i >= 0; i--) {    final Action action=renames.get(i);    try {      LOGGER.debug("DefaultRolloverStrategy.purgeDescending executing {} of {}: {}",i,renames.size(),action);      if (!action.execute()) {        return -1;      }    } catch (    final Exception ex) {      LOGGER.warn("Exception during purge in RollingFileAppender",ex);      return -1;    }  }  return lowIndex;}  }
class C{  private static DynamoDbHiveShims loadHiveShims(){  String hiveVersion=HiveVersionInfo.getShortVersion();  if (DynamoDbHive1Shims.supportsVersion(hiveVersion)) {    try {      return DynamoDbHive1Shims.class.newInstance();    } catch (    InstantiationException|IllegalAccessException e) {      throw new RuntimeException("unable to get instance of hive 1 shim class");    }  } else   if (DynamoDbHive2Shims.supportsVersion(hiveVersion)) {    try {      return DynamoDbHive2Shims.class.newInstance();    } catch (    InstantiationException|IllegalAccessException e) {      throw new RuntimeException("unable to get instance of hive 2 shim class");    }  } else {    throw new RuntimeException("Shim class for Hive version " + hiveVersion + " does not exist");  }}  }
class C{  public void addCoreDataTagChanger(final Long equipmentId,final ICoreDataTagChanger dataTagChanger){  List<ICoreDataTagChanger> changers=coreDataTagChangers.get(equipmentId);  if (changers == null) {    changers=new ArrayList<>();    coreDataTagChangers.put(equipmentId,changers);  }  changers.add(dataTagChanger);}  }
class C{  public DistinctResult(){}  }
class C{  public static void drawCenteredString(Graphics2D g,Rectangle rect,String str,boolean horzCentered,boolean vertCentered){  UIUtil.drawCenteredString(g,rect,str,horzCentered,vertCentered);}  }
class C{  private void drawItems(Canvas canvas){  canvas.save();  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;  canvas.translate(PADDING,-top + scrollingOffset);  itemsLayout.draw(canvas);  canvas.restore();}  }
class C{  public void sendRequest(String url,final ISimpleRequestCallback uiUpdater){  Request request=new Request.Builder().url(url).build();  sendRequest(request,uiUpdater);}  }
class C{  public XSWildcardDecl performIntersectionWith(XSWildcardDecl wildcard,short processContents){  if (wildcard == null)   return null;  XSWildcardDecl intersectWildcard=new XSWildcardDecl();  intersectWildcard.fProcessContents=processContents;  if (areSame(wildcard)) {    intersectWildcard.fType=fType;    intersectWildcard.fNamespaceList=fNamespaceList;  } else   if ((fType == NSCONSTRAINT_ANY) || (wildcard.fType == NSCONSTRAINT_ANY)) {    XSWildcardDecl other=this;    if (fType == NSCONSTRAINT_ANY)     other=wildcard;    intersectWildcard.fType=other.fType;    intersectWildcard.fNamespaceList=other.fNamespaceList;  } else   if (((fType == NSCONSTRAINT_NOT) && (wildcard.fType == NSCONSTRAINT_LIST)) || ((fType == NSCONSTRAINT_LIST) && (wildcard.fType == NSCONSTRAINT_NOT))) {    String[] list=null;    String[] other=null;    if (fType == NSCONSTRAINT_NOT) {      other=fNamespaceList;      list=wildcard.fNamespaceList;    } else {      other=wildcard.fNamespaceList;      list=fNamespaceList;    }    int listSize=list.length;    String[] intersect=new String[listSize];    int newSize=0;    for (int i=0; i < listSize; i++) {      if (list[i] != other[0] && list[i] != ABSENT)       intersect[newSize++]=list[i];    }    intersectWildcard.fType=NSCONSTRAINT_LIST;    intersectWildcard.fNamespaceList=new String[newSize];    System.arraycopy(intersect,0,intersectWildcard.fNamespaceList,0,newSize);  } else   if ((fType == NSCONSTRAINT_LIST) && (wildcard.fType == NSCONSTRAINT_LIST)) {    intersectWildcard.fType=NSCONSTRAINT_LIST;    intersectWildcard.fNamespaceList=intersect2sets(fNamespaceList,wildcard.fNamespaceList);  } else   if (fType == NSCONSTRAINT_NOT && wildcard.fType == NSCONSTRAINT_NOT) {    if (fNamespaceList[0] != ABSENT && wildcard.fNamespaceList[0] != ABSENT)     return null;    XSWildcardDecl other=this;    if (fNamespaceList[0] == ABSENT)     other=wildcard;    intersectWildcard.fType=other.fType;    intersectWildcard.fNamespaceList=other.fNamespaceList;  }  return intersectWildcard;}  }
class C{  public static void dumpTreeToBuilder(final @NotNull StringBuilder builder,final @NotNull TreeElement element,final int indentation){  for (int i=0; i < indentation; i++) {    builder.append("  ");  }  builder.append(element.getPresentation().getPresentableText()).append('\n');  for (  TreeElement treeElement : element.getChildren()) {    dumpTreeToBuilder(builder,treeElement,indentation + 1);  }}  }
class C{  public static <E extends Comparable<? super E>>Stream<Map.Entry<E,E>> crossProductNaturallyOrdered(Stream<E> stream){  Objects.requireNonNull(stream);  CrossProductOrderedSpliterator<E> spliterator=CrossProductOrderedSpliterator.ordered(stream.spliterator(),Comparator.naturalOrder());  return StreamSupport.stream(spliterator,stream.isParallel()).onClose(null);}  }
class C{  static double[][] loadLnMant(){  return LN_MANT.clone();}  }
class C{  public boolean isComplete(){  return !(Double.isNaN(getXmin()) || Double.isNaN(getXmax()));}  }
class C{  public static void addRequest(AbstractAI ai2,Player player,int requestId,AI2Request request,Object... requestParams){  addRequest(ai2,player,requestId,ai2.getObjectId(),request,requestParams);}  }
class C{  public LessEqualsSpacePredicate(Comparable<?> expectedValue,Comparator<?> comparator){  super(expectedValue,comparator);}  }
class C{  @Override public boolean overridesManifestPackage(){  if (myOverridesManifestPackage == null) {    myOverridesManifestPackage=getAndroidProject().getDefaultConfig().getProductFlavor().getApplicationId() != null;    Variant variant=getSelectedVariant();    List<String> flavors=variant.getProductFlavors();    for (    String flavor : flavors) {      ProductFlavorContainer productFlavor=findProductFlavor(flavor);      assert productFlavor != null;      if (productFlavor.getProductFlavor().getApplicationId() != null) {        myOverridesManifestPackage=true;        break;      }    }  }  return myOverridesManifestPackage.booleanValue();}  }
class C{  public TransactionException(String desc){  super(desc);}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  public MarketRestoreQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){  super(client,"market.restore",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);}  }
class C{  public static boolean isDirtyRead(int mod){  return Modifiers.contains(mod,DIRTY_READ);}  }
class C{  public void message(int level,String message,String spec1,String spec2){  if (debug >= level) {    System.out.println(message + ": " + spec1);    System.out.println("\t" + spec2);  }}  }
class C{  private void applyFragment(Fragment fragment,GraphTraversal<Vertex,Vertex> traversal,String currentName,Set<String> names){  String start=fragment.getStart();  if (currentName != null) {    if (!currentName.equals(start)) {      traversal.select(start);    }  } else {    names.add(start);    traversal.as(start);  }  fragment.applyTraversal(traversal);  fragment.getEnd().ifPresent(null);}  }
class C{  public IdQuery(String typeName,Object id,Object routing,QueryResultType queryResultType,int version){  if (typeName == null || typeName.length() == 0)   throw new IllegalArgumentException("Argument cannot be null or empty - 'typeName'.");  if (id == null)   throw new IllegalArgumentException("Argument cannot be null - 'id'.");  if (queryResultType == null)   throw new IllegalArgumentException("Argument cannot be null - 'queryResultType'.");  if (version < 0)   throw new IllegalArgumentException("Argument cannot be less than zero - 'version'");  this._typeName=typeName;  this._id=id;  this._routing=routing;  this._queryResultType=queryResultType;  this._version=version;}  }
class C{  protected String consumeBOM(InputStream stream,String encoding) throws IOException {  byte[] b=new byte[3];  int count=0;  stream.mark(3);  if (encoding.equals("UTF-8")) {    count=stream.read(b,0,3);    if (count == 3) {      final int b0=b[0] & 0xFF;      final int b1=b[1] & 0xFF;      final int b2=b[2] & 0xFF;      if (b0 != 0xEF || b1 != 0xBB || b2 != 0xBF) {        stream.reset();      }    } else {      stream.reset();    }  } else   if (encoding.startsWith("UTF-16")) {    count=stream.read(b,0,2);    if (count == 2) {      final int b0=b[0] & 0xFF;      final int b1=b[1] & 0xFF;      if (b0 == 0xFE && b1 == 0xFF) {        return "UTF-16BE";      } else       if (b0 == 0xFF && b1 == 0xFE) {        return "UTF-16LE";      }    }    stream.reset();  }  return encoding;}  }
class C{  protected NotesEditQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public boolean declaresFieldByName(String name){  checkLevel(SIGNATURES);  for (  SootField field : fields) {    if (field.getName().equals(name))     return true;  }  return false;}  }
class C{  public static String makeDAClassName(String packagePath,String actionName){  return packagePath + "." + actionName+ "Activity";}  }
class C{  public List<FrameDescriptor> diff(FramePath to){  List<FrameDescriptor> toFrames=to.getFrames();  List<FrameDescriptor> diff=new ArrayList<>();  if (isSubpath(to)) {    for (int i=frames.size(); i < toFrames.size(); i++) {      diff.add(toFrames.get(i));    }  } else {    diff.add(DefaultFrame.INSTANCE);    diff.addAll(toFrames);  }  return diff;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  void flush(){  internalLock.writeLock().lock();  flushLock.lock();  try {    if (isNew || modifiedBy.size() > 0) {      VanillaDb.logMgr().flush(lastLsn);      contents.write(blk);      modifiedBy.clear();      isNew=false;    }  }  finally {    flushLock.unlock();    internalLock.writeLock().unlock();  }}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  out.writeFloat(x);  out.writeFloat(y);}  }
class C{  protected Collection<DataSupport> checkAssociatedModelCollection(Collection<DataSupport> associatedModelCollection,Field associatedField){  Collection<DataSupport> collection=null;  if (isList(associatedField.getType())) {    collection=new ArrayList<DataSupport>();  } else   if (isSet(associatedField.getType())) {    collection=new HashSet<DataSupport>();  } else {    throw new DataSupportException(DataSupportException.WRONG_FIELD_TYPE_FOR_ASSOCIATIONS);  }  if (associatedModelCollection != null) {    collection.addAll(associatedModelCollection);  }  return collection;}  }
class C{  public Pet save(Pet pet){  log.debug("Request to save Pet : {}",pet);  Pet result=petRepository.save(pet);  return result;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonHoming_ME_TO_B(String value0,String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1200577,value0,skillname,skilltarget);}  }
class C{  @Override public void run(){  Context context=ApplicationStatus.getApplicationContext();  if (ChromeVersionInfo.isOfficialBuild()) {    Intent omahaIntent=OmahaClient.createInitializeIntent(context);    context.startService(omahaIntent);  }  DelayedInvalidationsController.getInstance().notifyPendingInvalidations(context);}  }
class C{  @Override public StringBuffer format(final long value,final StringBuffer buffer,final FieldPosition position){  return format(Long.valueOf(value),buffer,position);}  }
class C{  public T value() throws ConcurrentModificationException, NoSuchElementException {  if (referenceCount != count) {    throw new ConcurrentModificationException();  }  if (current < 0) {    throw new NoSuchElementException();  }  return values[current];}  }
class C{  private void initializedDefaultsFromXml(){  mDefaultOverlappingBackgroundColor=Color.TRANSPARENT;}  }
class C{  public void add(final T object){synchronized (mLock) {    mList.add(object);  }  notifyDataSetChanged();}  }
class C{  protected void merge(Object in1,Object in2,Object out){  FlowSet inSet1=(FlowSet)in1, inSet2=(FlowSet)in2, outSet=(FlowSet)out;  inSet1.intersection(inSet2,outSet);}  }
class C{  void removeFromDisplaySlots(Objective objective){  for (Iterator<Entry<DisplaySlot,Objective>> it=objectivesByDisplaySlot.entrySet().iterator(); it.hasNext(); ) {    Entry<DisplaySlot,Objective> entry=it.next();    if (entry.getValue() == objective) {      it.remove();    }  }}  }
class C{  public UnknownDependencyException(){}  }
class C{  public static VersionNumber parseVersion(@Nonnull final String version){  Check.notNull(version,"version");  VersionNumber result=new VersionNumber(new ArrayList<String>(0),version);  final Matcher matcher=VERSIONSTRING.matcher(version);  if (matcher.find()) {    final List<String> groups=Arrays.asList(matcher.group(MAJOR_INDEX).split("\\."));    final String extension=matcher.group(EXTENSION_INDEX) == null ? VersionNumber.EMPTY_EXTENSION : trimRight(matcher.group(EXTENSION_INDEX));    result=new VersionNumber(groups,extension);  }  return result;}  }
class C{  protected final Object writeReplace(){  return this;}  }
class C{  protected void actionPerformed(GuiButton par1GuiButton){  VRSettings vr=mc.vrSettings;  if (par1GuiButton.enabled) {    if (par1GuiButton.id == ID_GENERIC_DONE) {      Minecraft.getMinecraft().gameSettings.saveOptions();      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(this.parentGuiScreen);    } else     if (par1GuiButton.id == ID_GENERIC_DEFAULTS) {      vr.inertiaFactor=VRSettings.INERTIA_NORMAL;      vr.movementSpeedMultiplier=1f;      vr.simulateFalling=false;      vr.weaponCollision=true;      vr.vrAllowCrawling=false;      vr.vrAllowLocoModeSwotch=true;      vr.vrFreeMove=false;      vr.vrLimitedSurvivalTeleport=true;      vr.vrShowBlueCircleBuddy=true;      vr.walkMultiplier=1;      vr.vrFreeMoveMode=vr.FREEMOVE_CONTROLLER;      vr.realisticClimbEnabled=true;      vr.realisticJumpEnabled=true;      vr.realisticSneakEnabled=true;      vr.realisticSwimEnabled=true;      vr.realisticRowEnabled=true;      vr.vehicleRotation=false;      Minecraft.getMinecraft().gameSettings.viewBobbing=true;      Minecraft.getMinecraft().gameSettings.saveOptions();      Minecraft.getMinecraft().vrSettings.saveOptions();      this.reinit=true;    } else     if (par1GuiButton instanceof GuiSmallButtonEx) {      VRSettings.VrOptions num=VRSettings.VrOptions.getEnumOptions(par1GuiButton.id);      this.guivrSettings.setOptionValue(((GuiSmallButtonEx)par1GuiButton).returnVrEnumOptions(),1);      par1GuiButton.displayString=this.guivrSettings.getKeyBinding(VRSettings.VrOptions.getEnumOptions(par1GuiButton.id));      if (num == VRSettings.VrOptions.MOVE_MODE) {        this.reinit=true;      }    }  }}  }
class C{  public static boolean checkComplexDerivationOk(XSComplexTypeDecl derived,XSTypeDefinition base,short block){  if (derived == SchemaGrammar.fAnyType)   return derived == base;  return checkComplexDerivation(derived,base,block);}  }
class C{  public ResponderCLI(String[] args){  cliOptions=createOptions();  try {    CommandLineParser parser=new GnuParser();    commandLine=parser.parse(cliOptions,args,true);    if (hasOption("h")) {      printHelp();      System.exit(1);    }    if (!parseOptions()) {      logger.info("The provided options are not valid");      printHelp();      System.exit(1);    }  } catch (  Exception e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  public static Schema subsetSchema(Schema schema,List<String> fieldNames,Map<String,String> renames){  FieldAssembler<Schema> assembler=SchemaBuilder.record("s").fields();  for (  Field field : schema.getFields()) {    if (fieldNames.contains(field.name())) {      String originalFieldName=field.name();      String newFieldName=originalFieldName;      if (renames != null && renames.containsKey(originalFieldName)) {        newFieldName=renames.get(originalFieldName);      }      Type fieldType=field.schema().getType();      if (fieldType.equals(Type.UNION)) {        fieldType=field.schema().getTypes().get(1).getType();      }switch (fieldType) {case DOUBLE:        assembler=assembler.optionalDouble(newFieldName);      break;case FLOAT:    assembler=assembler.optionalFloat(newFieldName);  break;case INT:assembler=assembler.optionalInt(newFieldName);break;case LONG:assembler=assembler.optionalLong(newFieldName);break;case STRING:assembler=assembler.optionalString(newFieldName);break;case BOOLEAN:assembler=assembler.optionalBoolean(newFieldName);break;default :throw new RuntimeException("Unsupported Avro field type: " + fieldType);}}}return assembler.endRecord();}  }
class C{  public PassresetExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static void ensureDir(String path) throws IllegalArgumentException {  File dir=new File(path);  if (dir.isDirectory())   return; else   if (dir.exists())   throw new IllegalArgumentException(path + " exists, but not a dir");  if (!dir.mkdirs())   throw new IllegalArgumentException(path + ": cannot create");}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new XMLTokener(string));}  }
class C{  public EqException(final int error,final String descr){  this.errorCode=error;  this.errorDescription=descr;}  }
class C{  public ComputePlacementSelectionTaskService(){  super(ComputePlacementSelectionTaskState.class,DefaultSubStage.class,DISPLAY_NAME);  super.toggleOption(ServiceOption.PERSISTENCE,true);  super.toggleOption(ServiceOption.REPLICATION,true);  super.toggleOption(ServiceOption.OWNER_SELECTION,true);  super.toggleOption(ServiceOption.INSTRUMENTATION,true);}  }
class C{  public int writeMethodId(MethodId methodId){  int off=data.position();  writeUnsignedShort(methodId.declaringClassIndex);  writeUnsignedShort(methodId.protoIndex);  writeInt(methodId.nameIndex);  return off;}  }
class C{  private void alertFailedLogin(final String message){  final Alert alert=new Alert(Alert.AlertType.ERROR);  alert.setTitle("Error Login");  alert.setHeaderText("Unfortunately, your login has failed");  alert.setContentText(message != null ? message : "" + "\nPress OK to try again.");  alert.showAndWait();}  }
class C{  public MarketSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @deprecated public boolean isFrozen(){  return this.frozen;}  }
class C{  private static boolean permissionExists(String permission){  Integer minVersion=MIN_SDK_PERMISSIONS.get(permission);  return minVersion == null || Build.VERSION.SDK_INT >= minVersion;}  }
class C{  @Override public synchronized void addEdge(Edge edge) throws Exception {  Vertex vH, vT;  Vertex vHead=edge.getVertexA();  Vertex vTail=edge.getVertexB();  boolean bVertexMissed=false;  if ((vH=locateVertex(vHead)) == null) {    add(vH=vHead);    bVertexMissed=true;  }  if ((vT=locateVertex(vTail)) == null) {    add(vT=vTail);    bVertexMissed=true;  }  Edge e=null;  if (eclLocator == null) {    if (!bVertexMissed)     e=utils.locateDirectedEdgeInGraph(this,vH,vT);    if (e == null) {      super.addEdge(edge);      return;    } else     return;  } else {    if (!bVertexMissed)     e=eclLocator.locateDirectedEdgeInGraph(this,vH,vT);    if (e == null) {      super.addEdge(edge);      eclLocator.addedEdge(edge);      return;    } else     return;  }}  }
class C{  public static String replaceString(String mainString,String oldString,String newString){  return StringUtil.replaceString(mainString,oldString,newString);}  }
class C{  public static String mkSdCardCmdName(){  String os=System.getProperty("os.name");  String cmd="mksdcard";  if (os.startsWith("Windows")) {    cmd+=".exe";  }  return cmd;}  }
class C{  public Builder zkPort(int zkPort){  this._zkPort=zkPort;  return this;}  }
class C{  public byte[] compress(int[] unCompInput){  try {    return Snappy.compress(unCompInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  private static int[][] compileDerivativesIndirection(final int parameters,final int order,final DSCompiler valueCompiler,final DSCompiler derivativeCompiler){  if (parameters == 0 || order == 0) {    return new int[1][parameters];  }  final int vSize=valueCompiler.derivativesIndirection.length;  final int dSize=derivativeCompiler.derivativesIndirection.length;  final int[][] derivativesIndirection=new int[vSize + dSize][parameters];  for (int i=0; i < vSize; ++i) {    System.arraycopy(valueCompiler.derivativesIndirection[i],0,derivativesIndirection[i],0,parameters - 1);  }  for (int i=0; i < dSize; ++i) {    System.arraycopy(derivativeCompiler.derivativesIndirection[i],0,derivativesIndirection[vSize + i],0,parameters);    derivativesIndirection[vSize + i][parameters - 1]++;  }  return derivativesIndirection;}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> concurrentHashMap(){  return new ConcurrentHashMap<K,V>();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ITEM_DICE_CUSTOM_ME(int num0,int num1){  return new SM_SYSTEM_MESSAGE(1400125,num0,num1);}  }
class C{  public Map<String,List<ChartObject>> maxByDate(List<ChartObject> input,Period period,String maxSeries){  final Function<ChartObject,String> chartObjectToDate=null;  final BinaryOperator<ChartObject> chartObjectReducer=null;  final Map<String,Optional<ChartObject>> groupByDate=input.stream().sorted(null).collect(Collectors.groupingBy(chartObjectToDate,null,Collectors.reducing(chartObjectReducer)));  final Map<String,ChartObject> range=buildRange(input,period);  final LinkedHashMap<String,List<ChartObject>> result=new LinkedHashMap<>();  range.forEach(null);  return result;}  }
class C{  @Override public Future<DLSN> write(final LogRecord record){  final Stopwatch stopwatch=Stopwatch.createStarted();  return asyncWrite(record,true).addEventListener(new OpStatsListener<DLSN>(writeOpStatsLogger,stopwatch));}  }
class C{  private static void notifyDrawable(final Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  public void lockUserInput(){  locked=true;  commandManager.setEnableCritical(false);}  }
class C{  public Value toLowerCase(Value str){  throw new RuntimeException("Unsupported operation.");}  }
class C{  private boolean isSyncNeeded(long referenceTimeInMillis){  myProject.putUserData(PROJECT_EXTERNAL_BUILD_FILES_CHANGED,null);  assert referenceTimeInMillis > 0;  if (isSyncInProgress()) {    return false;  }  FileDocumentManager fileDocumentManager=FileDocumentManager.getInstance();  File settingsFilePath=new File(getBaseDirPath(myProject),FN_SETTINGS_GRADLE);  if (settingsFilePath.exists()) {    VirtualFile settingsFile=findFileByIoFile(settingsFilePath,true);    if (settingsFile != null && fileDocumentManager.isFileModified(settingsFile)) {      return true;    }    if (settingsFilePath.lastModified() > referenceTimeInMillis) {      return true;    }  }  ModuleManager moduleManager=ModuleManager.getInstance(myProject);  for (  Module module : moduleManager.getModules()) {    VirtualFile buildFile=getGradleBuildFile(module);    if (buildFile != null) {      if (fileDocumentManager.isFileModified(buildFile)) {        return true;      }      File buildFilePath=virtualToIoFile(buildFile);      if (buildFilePath.lastModified() > referenceTimeInMillis) {        return true;      }    }    NativeAndroidGradleModel nativeAndroidModel=NativeAndroidGradleModel.get(module);    if (nativeAndroidModel != null) {      for (      File externalBuildFile : nativeAndroidModel.getNativeAndroidProject().getBuildFiles()) {        VirtualFile virtualFile=findFileByIoFile(externalBuildFile,true);        if ((virtualFile != null && fileDocumentManager.isFileModified(virtualFile)) || externalBuildFile.lastModified() > referenceTimeInMillis) {          myProject.putUserData(PROJECT_EXTERNAL_BUILD_FILES_CHANGED,true);          return true;        }      }    }  }  return false;}  }
class C{  private <E>E castConcept(Class<E> type){  try {    return type.cast(this);  } catch (  ClassCastException e) {    throw new InvalidConceptTypeException(ErrorMessage.INVALID_OBJECT_TYPE.getMessage(this,type));  }}  }
class C{  protected void checkVectorDimensions(FieldVector<T> v) throws MathIllegalArgumentException {  checkVectorDimensions(v.getDimension());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201210,skilltarget,num0,skillname);}  }
class C{  protected void initializeSchedulerProperties(Properties properties){  if (this.schedulerProperties != null) {    throw new IllegalStateException("Can't overwrite scheduler properties when they are already set. Set the properties before adding Jobs, and do not change them afterwards.");  }  this.schedulerProperties=properties;}  }
class C{  public OrdersGetQuery testMode(Boolean value){  return unsafeParam("test_mode",value);}  }
class C{  public static String formatRateString(float rate){  return String.format(Locale.US,"%.2fx",rate);}  }
class C{  private void showContactAsBarcode(Uri contactUri){  Log.i(TAG,"Showing contact URI as barcode: " + contactUri);  if (contactUri == null) {    return;  }  ContentResolver resolver=getContentResolver();  Cursor cursor;  try {    cursor=resolver.query(contactUri,null,null,null,null);  } catch (  IllegalArgumentException ignored) {    return;  }  if (cursor == null) {    return;  }  String id;  String name;  boolean hasPhone;  try {    if (!cursor.moveToFirst()) {      return;    }    id=cursor.getString(cursor.getColumnIndex(BaseColumns._ID));    name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));    hasPhone=cursor.getInt(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0;  }  finally {    cursor.close();  }  Bundle bundle=new Bundle();  if (name != null && !name.isEmpty()) {    bundle.putString(ContactsContract.Intents.Insert.NAME,massageContactData(name));  }  if (hasPhone) {    Cursor phonesCursor=resolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + '=' + id,null,null);    if (phonesCursor != null) {      try {        int foundPhone=0;        int phonesNumberColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);        int phoneTypeColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE);        while (phonesCursor.moveToNext() && foundPhone < Contents.PHONE_KEYS.length) {          String number=phonesCursor.getString(phonesNumberColumn);          if (number != null && !number.isEmpty()) {            bundle.putString(Contents.PHONE_KEYS[foundPhone],massageContactData(number));          }          int type=phonesCursor.getInt(phoneTypeColumn);          bundle.putInt(Contents.PHONE_TYPE_KEYS[foundPhone],type);          foundPhone++;        }      }  finally {        phonesCursor.close();      }    }  }  Cursor methodsCursor=resolver.query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI,null,ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + '=' + id,null,null);  if (methodsCursor != null) {    try {      if (methodsCursor.moveToNext()) {        String data=methodsCursor.getString(methodsCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS));        if (data != null && !data.isEmpty()) {          bundle.putString(ContactsContract.Intents.Insert.POSTAL,massageContactData(data));        }      }    }  finally {      methodsCursor.close();    }  }  Cursor emailCursor=resolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.CONTACT_ID + '=' + id,null,null);  if (emailCursor != null) {    try {      int foundEmail=0;      int emailColumn=emailCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA);      while (emailCursor.moveToNext() && foundEmail < Contents.EMAIL_KEYS.length) {        String email=emailCursor.getString(emailColumn);        if (email != null && !email.isEmpty()) {          bundle.putString(Contents.EMAIL_KEYS[foundEmail],massageContactData(email));        }        foundEmail++;      }    }  finally {      emailCursor.close();    }  }  Intent intent=new Intent(Intents.Encode.ACTION);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  intent.putExtra(Intents.Encode.TYPE,Contents.Type.CONTACT);  intent.putExtra(Intents.Encode.DATA,bundle);  intent.putExtra(Intents.Encode.FORMAT,BarcodeFormat.QR_CODE.toString());  Log.i(TAG,"Sending bundle for encoding: " + bundle);  startActivity(intent);}  }
class C{  public void addEntry(Label start,Label end,Label handler,CP cat){  addEntry(new CatchEntry(start,end,handler,cat));}  }
class C{  public VideoSaveQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  private DivIconOptions(){}  }
class C{  @deprecated public boolean isParseAllStyles(){  return this._parseAllStyles;}  }
class C{  public StreamSource(Reader reader){  setReader(reader);}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=NetworkUtil.getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  @NotNull private static DefaultMutableTreeNode updateTreeStructure(@NotNull DefaultMutableTreeNode treeNode,@NotNull ZipFile compressedApk){  long compressedSize=0;  ApkEntry entry=ApkEntry.fromNode(treeNode);  assert entry != null;  if (treeNode.getChildCount() > 0) {    for (int i=0; i < treeNode.getChildCount(); i++) {      DefaultMutableTreeNode childNode=updateTreeStructure((DefaultMutableTreeNode)treeNode.getChildAt(i),compressedApk);      compressedSize+=((ApkEntry)childNode.getUserObject()).getCompressedSize();    }  } else {    ZipEntry ze=compressedApk.getEntry(ApkFileSystem.getInstance().getRelativePath(entry.getFile()));    if (ze == null) {      compressedSize=-1;    } else {      compressedSize=ze.getCompressedSize();    }  }  entry.setCompressedSize(compressedSize);  return treeNode;}  }
class C{  public static ToastCompat makeText(Context context,@StringRes int resId,@Duration int duration) throws Resources.NotFoundException {  return makeText(context,context.getString(resId),duration);}  }
class C{  private Map deepCopy(HashMap groupsMap){  HashMap newMap=(HashMap)(groupsMap.clone());  Set eSet=newMap.entrySet();  for (Iterator itr=eSet.iterator(); itr.hasNext(); ) {    Map.Entry pair=(Map.Entry)itr.next();    pair.setValue(((String[])pair.getValue()).clone());  }  return newMap;}  }
class C{  private int unFilledSpacesInHeaderGroup(int header){  if (mNumColumns == 0) {    return 0;  }  int remainder=mDelegate.getCountForHeader(header) % mNumColumns;  return remainder == 0 ? 0 : mNumColumns - remainder;}  }
class C{  public boolean isEncrypted(){  return _isEncrypted;}  }
class C{  public void destroy(){  destroyReaderModeControl();  mParentView=null;}  }
class C{  public TreeNodeIterator(Node root){  this(root,true);}  }
class C{  public FriendsGetRequestsQueryWithNeedMutual(VkApiClient client,UserActor actor,Boolean needMutual){  super(client,"friends.getRequests",GetRequestsNeedMutualResponse.class);  accessToken(actor.getAccessToken());  needMutual(needMutual);}  }
class C{  public ConditionedRuleExpression(final String pExpression) throws RuleFormatException {  super(pExpression,RuleType.ConditionedRule);  String[] subConditions=pExpression.split(",");  this.conditions=new ArrayList<IRuleCondition>();  for (int i=0; i != subConditions.length; i++) {    final String subCondition=subConditions[i].trim();    if (MultipleReturnValueRuleExpression.isMultipleReturnValueExpression(subCondition)) {      this.conditions.add(new MultipleReturnValueRuleExpression(subCondition));    } else {      this.conditions.add(new DefaultRuleCondition(subCondition));    }  }}  }
class C{  private boolean peekRead(String expectedCharacters) throws CompileException, IOException {  if (this.peek() == -1)   return false;  if (expectedCharacters.indexOf((char)this.nextChar) == -1)   return false;  this.sb.append((char)this.nextChar);  this.nextChar=this.nextButOneChar;  this.nextButOneChar=-1;  return true;}  }
class C{  private static void deleteRecursiveSilent(CarbonFile f){  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      CarbonFile c : f.listFiles()) {        deleteRecursiveSilent(c);      }    }  }  if (f.exists() && !f.delete()) {    return;  }}  }
class C{  public VideoAddToAlbumQuery albumIds(List<Integer> value){  return unsafeParam("album_ids",value);}  }
class C{  protected int createInstances(DelegateExecution multiInstanceExecution){  int nrOfInstances=resolveNrOfInstances(multiInstanceExecution);  if (nrOfInstances == 0) {    return nrOfInstances;  } else   if (nrOfInstances < 0) {    throw new ActivitiIllegalArgumentException("Invalid number of instances: must be a non-negative integer value" + ", but was " + nrOfInstances);  }  ExecutionEntity execution=Context.getCommandContext().getExecutionEntityManager().createChildExecution((ExecutionEntity)multiInstanceExecution);  execution.setCurrentFlowElement(multiInstanceExecution.getCurrentFlowElement());  multiInstanceExecution.setMultiInstanceRoot(true);  multiInstanceExecution.setActive(false);  setLoopVariable(multiInstanceExecution,NUMBER_OF_INSTANCES,nrOfInstances);  setLoopVariable(multiInstanceExecution,NUMBER_OF_COMPLETED_INSTANCES,0);  setLoopVariable(multiInstanceExecution,NUMBER_OF_ACTIVE_INSTANCES,1);  setLoopVariable(multiInstanceExecution,getCollectionElementIndexVariable(),0);  setLoopVariable(execution,NUMBER_OF_INSTANCES,nrOfInstances);  setLoopVariable(execution,NUMBER_OF_COMPLETED_INSTANCES,0);  setLoopVariable(execution,NUMBER_OF_ACTIVE_INSTANCES,1);  setLoopVariable(execution,getCollectionElementIndexVariable(),0);  logLoopDetails(multiInstanceExecution,"initialized",0,0,1,nrOfInstances);  if (nrOfInstances > 0) {    executeOriginalBehavior(execution,0);  }  return nrOfInstances;}  }
class C{  static void advanceLooper(Looper looper){  shadowOf(looper).getScheduler().advanceBy(100);}  }
class C{  protected void onOptionSelected(final EnumSet<DialogOption> selectedOptions){  showProgressDialog();  clearBrowsingData(selectedOptions);}  }
class C{  public AdsDeleteTargetGroupQuery deleteTargetGroup(UserActor actor,int accountId,int targetGroupId){  return new AdsDeleteTargetGroupQuery(getClient(),actor,accountId,targetGroupId);}  }
class C{  public void addEntry(CatalogEntry entry){  int type=entry.getEntryType();  if (type == BASE) {    String value=entry.getEntryArg(0);    URL newbase=null;    if (base == null) {      catalogManager.debug.message(5,"BASE CUR","null");    } else {      catalogManager.debug.message(5,"BASE CUR",base.toString());    }    catalogManager.debug.message(4,"BASE STR",value);    try {      value=fixSlashes(value);      newbase=new URL(base,value);    } catch (    MalformedURLException e) {      try {        newbase=new URL("file:" + value);      } catch (      MalformedURLException e2) {        catalogManager.debug.message(1,"Malformed URL on base",value);        newbase=null;      }    }    if (newbase != null) {      base=newbase;    }    catalogManager.debug.message(5,"BASE NEW",base.toString());  } else   if (type == CATALOG) {    String fsi=makeAbsolute(entry.getEntryArg(0));    catalogManager.debug.message(4,"CATALOG",fsi);    localCatalogFiles.addElement(fsi);  } else   if (type == PUBLIC) {    String publicid=PublicId.normalize(entry.getEntryArg(0));    String systemid=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(0,publicid);    entry.setEntryArg(1,systemid);    catalogManager.debug.message(4,"PUBLIC",publicid,systemid);    catalogEntries.addElement(entry);  } else   if (type == SYSTEM) {    String systemid=normalizeURI(entry.getEntryArg(0));    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"SYSTEM",systemid,fsi);    catalogEntries.addElement(entry);  } else   if (type == URI) {    String uri=normalizeURI(entry.getEntryArg(0));    String altURI=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(1,altURI);    catalogManager.debug.message(4,"URI",uri,altURI);    catalogEntries.addElement(entry);  } else   if (type == DOCUMENT) {    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(0)));    entry.setEntryArg(0,fsi);    catalogManager.debug.message(4,"DOCUMENT",fsi);    catalogEntries.addElement(entry);  } else   if (type == OVERRIDE) {    catalogManager.debug.message(4,"OVERRIDE",entry.getEntryArg(0));    catalogEntries.addElement(entry);  } else   if (type == SGMLDECL) {    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(0)));    entry.setEntryArg(0,fsi);    catalogManager.debug.message(4,"SGMLDECL",fsi);    catalogEntries.addElement(entry);  } else   if (type == DELEGATE_PUBLIC) {    String ppi=PublicId.normalize(entry.getEntryArg(0));    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(0,ppi);    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"DELEGATE_PUBLIC",ppi,fsi);    addDelegate(entry);  } else   if (type == DELEGATE_SYSTEM) {    String psi=normalizeURI(entry.getEntryArg(0));    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(0,psi);    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"DELEGATE_SYSTEM",psi,fsi);    addDelegate(entry);  } else   if (type == DELEGATE_URI) {    String pui=normalizeURI(entry.getEntryArg(0));    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(0,pui);    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"DELEGATE_URI",pui,fsi);    addDelegate(entry);  } else   if (type == REWRITE_SYSTEM) {    String psi=normalizeURI(entry.getEntryArg(0));    String rpx=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(0,psi);    entry.setEntryArg(1,rpx);    catalogManager.debug.message(4,"REWRITE_SYSTEM",psi,rpx);    catalogEntries.addElement(entry);  } else   if (type == REWRITE_URI) {    String pui=normalizeURI(entry.getEntryArg(0));    String upx=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(0,pui);    entry.setEntryArg(1,upx);    catalogManager.debug.message(4,"REWRITE_URI",pui,upx);    catalogEntries.addElement(entry);  } else   if (type == SYSTEM_SUFFIX) {    String pui=normalizeURI(entry.getEntryArg(0));    String upx=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(0,pui);    entry.setEntryArg(1,upx);    catalogManager.debug.message(4,"SYSTEM_SUFFIX",pui,upx);    catalogEntries.addElement(entry);  } else   if (type == URI_SUFFIX) {    String pui=normalizeURI(entry.getEntryArg(0));    String upx=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(0,pui);    entry.setEntryArg(1,upx);    catalogManager.debug.message(4,"URI_SUFFIX",pui,upx);    catalogEntries.addElement(entry);  } else   if (type == DOCTYPE) {    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"DOCTYPE",entry.getEntryArg(0),fsi);    catalogEntries.addElement(entry);  } else   if (type == DTDDECL) {    String fpi=PublicId.normalize(entry.getEntryArg(0));    entry.setEntryArg(0,fpi);    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"DTDDECL",fpi,fsi);    catalogEntries.addElement(entry);  } else   if (type == ENTITY) {    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"ENTITY",entry.getEntryArg(0),fsi);    catalogEntries.addElement(entry);  } else   if (type == LINKTYPE) {    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"LINKTYPE",entry.getEntryArg(0),fsi);    catalogEntries.addElement(entry);  } else   if (type == NOTATION) {    String fsi=makeAbsolute(normalizeURI(entry.getEntryArg(1)));    entry.setEntryArg(1,fsi);    catalogManager.debug.message(4,"NOTATION",entry.getEntryArg(0),fsi);    catalogEntries.addElement(entry);  } else {    catalogEntries.addElement(entry);  }}  }
class C{  public AdsGetSuggestionsQueryWithRegions q(String value){  return unsafeParam("q",value);}  }
class C{  public CatchOptions maxRazzberries(int maxRazzBerries){  this.maxRazzBerries=maxRazzBerries;  return this;}  }
class C{  @SneakyThrows public static void createEphemeral(final CuratorFramework client,final String path,final String content){  try {    if (content == null) {      client.create().withMode(CreateMode.EPHEMERAL).forPath(path);    } else {      client.create().withMode(CreateMode.EPHEMERAL).forPath(path,content.getBytes());    }  } catch (  NodeExistsException ex) {    log.warn("node exists, can not create it again!");  }catch (  Exception ex) {    log.error("failed create EPHEMERAL znode: {}, error: {}",path,ex);  }}  }
class C{  public boolean canSetBoolean(){  return canSet(boolean.class) || canSet(Boolean.class);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffPhysical_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200970,skillcaster,skilltarget,skillname);}  }
class C{  public static void show(byte[] b){  int count=0;  for (int i=0; i < b.length; i++) {    if (count == 8) {      System.out.print("  ");    } else     if (count == 16) {      System.out.println("");      count=0;      continue;    }    System.out.print(Integer.toHexString(b[i] & 0xFF).toUpperCase() + " ");    count++;  }  System.out.println();}  }
class C{  private void addNode(int nodeId){  ZWaveEvent zEvent=new ZWaveInitializationStateEvent(nodeId,ZWaveNodeInitStage.EMPTYNODE);  notifyEventListeners(zEvent);  ioHandler.deviceDiscovered(nodeId);  new ZWaveInitNodeThread(this,nodeId).start();}  }
class C{  public void addDatatransferProgressListener(OnDatatransferProgressListener listener,Account account,OCFile file){  if (account == null || file == null || listener == null)   return;  mBoundListeners.put(file.getFileId(),listener);}  }
class C{  public Event(long eventTime){  super();  this.eventTime=eventTime;  validate();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_CASH_REWARD(String value0,String value1,String value2,String value3){  return new SM_SYSTEM_MESSAGE(1400619,value0,value1,value2,value3);}  }
class C{  public GroupsGetCallbackSettingsQuery(VkApiClient client,Actor actor,int groupId){  super(client,"groups.getCallbackSettings",GetCallbackSettingsResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public boolean isSource(){  return isSource;}  }
class C{  private static List<Pair<Integer,Double>> createDistribution(int[] singletons,double[] probabilities){  MathUtils.checkDimension(singletons.length,probabilities.length);  final List<Pair<Integer,Double>> samples=new ArrayList<>(singletons.length);  final double[] normalizedProbabilities=EnumeratedDistribution.checkAndNormalize(probabilities);  for (int i=0; i < singletons.length; i++) {    samples.add(new Pair<>(singletons[i],normalizedProbabilities[i]));  }  return samples;}  }
class C{  public void detach(AppCompatActivity activity){  attrViewMaps.remove(activity.hashCode());}  }
class C{  protected MarketReportQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  public T distanceInf(final Vector3D v){  final T dx=x.subtract(v.getX()).abs();  final T dy=y.subtract(v.getY()).abs();  final T dz=z.subtract(v.getZ()).abs();  if (dx.getReal() <= dy.getReal()) {    if (dy.getReal() <= dz.getReal()) {      return dz;    } else {      return dy;    }  } else {    if (dx.getReal() <= dz.getReal()) {      return dz;    } else {      return dx;    }  }}  }
class C{  public static void registerFuel(Item item,int duration){  registerFuel(new ItemStack(item,1,ItemStackDictionary.WILDCARD_METADATA),duration);}  }
class C{  public void decode(int[] received,int twoS) throws ReedSolomonException {  GenericGFPoly poly=new GenericGFPoly(field,received);  int[] syndromeCoefficients=new int[twoS];  boolean noError=true;  for (int i=0; i < twoS; i++) {    int eval=poly.evaluateAt(field.exp(i + field.getGeneratorBase()));    syndromeCoefficients[syndromeCoefficients.length - 1 - i]=eval;    if (eval != 0) {      noError=false;    }  }  if (noError) {    return;  }  GenericGFPoly syndrome=new GenericGFPoly(field,syndromeCoefficients);  GenericGFPoly[] sigmaOmega=runEuclideanAlgorithm(field.buildMonomial(twoS,1),syndrome,twoS);  GenericGFPoly sigma=sigmaOmega[0];  GenericGFPoly omega=sigmaOmega[1];  int[] errorLocations=findErrorLocations(sigma);  int[] errorMagnitudes=findErrorMagnitudes(omega,errorLocations);  for (int i=0; i < errorLocations.length; i++) {    int position=received.length - 1 - field.log(errorLocations[i]);    if (position < 0) {      throw new ReedSolomonException("Bad error location");    }    received[position]=GenericGF.addOrSubtract(received[position],errorMagnitudes[i]);  }}  }
class C{  SootClassBuilder(SootClass klass){  super(Opcodes.ASM5);  this.klass=klass;  this.deps=new HashSet();}  }
class C{  public static long clamp(long value,long a,long b){  long min=(a > b) ? b : a;  long max=(a > b) ? a : b;  if (value < min) {    value=min;  } else   if (value > max) {    value=max;  }  return value;}  }
class C{  public static void createRipple(View v,int primaryColor){  BaseRippleDrawable rippleDrawable=new BaseRippleDrawable();  rippleDrawable.setDrawable(v.getBackground());  rippleDrawable.setColor(primaryColor);  rippleDrawable.setBounds(v.getPaddingLeft(),v.getPaddingTop(),v.getPaddingRight(),v.getPaddingBottom());  v.setOnTouchListener(rippleDrawable);  if (Build.VERSION.SDK_INT >= 16) {    v.setBackground(rippleDrawable);  } else {    v.setBackgroundDrawable(rippleDrawable);  }}  }
class C{  public Skype(String username,String password){  this.username=username;  this.password=password;}  }
class C{  public void leave(DelegateExecution execution){  bpmnActivityBehavior.performDefaultOutgoingBehavior((ExecutionEntity)execution);}  }
class C{  public ClassPath(ClassPath classPath){  _classpathList.addAll(classPath._classpathList);}  }
class C{  @RequestMapping(value="/api/assets",method=RequestMethod.POST) public SourceAsset importSourceAsset(@RequestBody SourceAsset sourceAsset) throws ExecutionException, InterruptedException {  logger.debug("Importing source asset");  String normalizedContent=NormalizationUtils.normalize(sourceAsset.getContent());  PollableFuture<Asset> assetFuture=assetService.addOrUpdateAssetAndProcessIfNeeded(sourceAsset.getRepositoryId(),normalizedContent,sourceAsset.getPath());  sourceAsset.setAddedAssetId(assetFuture.get().getId());  sourceAsset.setPollableTask(assetFuture.getPollableTask());  return sourceAsset;}  }
class C{  public CM_LEGION(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  @Override public int[] makeDensityTestPoints(){  return new int[]{-4,-3,-2,-1,0,1,2,3,4,5,6};}  }
class C{  public static boolean isValidUrl(String url){  return Patterns.WEB_URL.matcher(url).matches();}  }
class C{  public static CompiledScript compileScriptString(String language,String script) throws ScriptException {  Assert.notNull("language",language,"script",script);  String cacheKey=language.concat("://").concat(script);  CompiledScript compiledScript=parsedScripts.get(cacheKey);  if (compiledScript == null) {    ScriptEngineManager manager=new ScriptEngineManager();    ScriptEngine engine=manager.getEngineByName(language);    if (engine == null) {      throw new IllegalArgumentException("The script type is not supported for language: " + language);    }    try {      Compilable compilableEngine=(Compilable)engine;      compiledScript=compilableEngine.compile(script);      if (Debug.verboseOn()) {        Debug.logVerbose("Compiled script [" + script + "] using engine "+ engine.getClass().getName(),module);      }    } catch (    ClassCastException e) {      if (Debug.verboseOn()) {        Debug.logVerbose("Script engine " + engine.getClass().getName() + " does not implement Compilable",module);      }    }    if (compiledScript != null) {      parsedScripts.putIfAbsent(cacheKey,compiledScript);    }  }  return compiledScript;}  }
class C{  public Value any(Value target){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public FilterSubPanel(ExpressionFilterInterface parent){  this.parent=parent;  createUI();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ITEM_COLOR_CHANGE_SUCCEED(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300511,value0,value1);}  }
class C{  protected boolean isEdgeTypeCompatible(SegmentType edge,SegmentType dragged,int delta){  if (Math.abs(delta) > MAX_MATCH_DISTANCE) {    if (dragged == SegmentType.LEFT || dragged == SegmentType.TOP) {      if (delta > 0) {        return false;      }    } else {      if (delta < 0) {        return false;      }    }  }switch (edge) {case BOTTOM:case TOP:    return dragged == SegmentType.TOP || dragged == SegmentType.BOTTOM;case LEFT:case RIGHT:  return dragged == SegmentType.LEFT || dragged == SegmentType.RIGHT || dragged == SegmentType.START || dragged == SegmentType.END;case BASELINE:case CENTER_HORIZONTAL:case CENTER_VERTICAL:return dragged == edge && Math.abs(delta) < MAX_MATCH_DISTANCE;default :assert false : edge;}return false;}  }
class C{  protected AbstractSpaceQuery(String entryTypeName,ISpacePredicate predicate){  this._entryTypeName=entryTypeName;  this._predicate=predicate;}  }
class C{  public SimpleFacebookConfiguration build(){  return new SimpleFacebookConfiguration(this);}  }
class C{  private LintGradleProject(@NonNull LintClient client,@NonNull File dir,@NonNull File referenceDir,@NonNull AndroidFacet facet,@NonNull AndroidGradleModel androidGradleModel){  super(client,dir,referenceDir,facet,androidGradleModel);  mGradleProject=true;  mMergeManifests=true;  myAndroidGradleModel=androidGradleModel;}  }
class C{  public static void makeText(Context context,String msg,int length,int type){  makeText(context,msg,length,type,0,0);}  }
class C{  private boolean taskInProgress(){  return tCur != null;}  }
class C{  public void expand(TreePath[] paths){  for (  TreePath path : paths) {    expandJTreeNode(dataTree,dataTree.getModel(),path.getLastPathComponent(),dataTree.getRowForPath(path),0);  }}  }
class C{  public ZipfDistribution(final int numberOfElements,final double exponent) throws MathIllegalArgumentException {  if (numberOfElements <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSION,numberOfElements);  }  if (exponent <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EXPONENT,exponent);  }  this.numberOfElements=numberOfElements;  this.exponent=exponent;  this.nthHarmonic=generalizedHarmonic(numberOfElements,exponent);}  }
class C{  public void inc(KeyType[] container,long delta){  for (  KeyType key : container) {    inc(key,delta);  }}  }
class C{  public static boolean isSuperClass(Class child,String sup){  return child != null && (child.getCanonicalName().equals(sup) || isSuperClass(child.getSuperclass(),sup));}  }
class C{  private void recoverInternal(String streamIdentifier) throws IOException {  checkClosedOrInError("recoverInternal");  BKLogWriteHandler ledgerHandler=createWriteHandler(true);  try {    FutureUtils.result(ledgerHandler.recoverIncompleteLogSegments());  }  finally {    Utils.closeQuietly(ledgerHandler);  }}  }
class C{  @VisibleForTesting public void testFling(float velocity){  fling(SystemClock.uptimeMillis(),0,0,velocity,0);}  }
class C{  public LookupDiscovery(String[] groups,Configuration config) throws IOException, ConfigurationException {  beginDiscovery(groups,config);}  }
class C{  public String toString(){  return super.toString() + "[charsetName=" + charsetName+ "]";}  }
class C{  public boolean isTransactionComplete(){  return transactionComplete;}  }
class C{  public static void guessSchema(ClusterInfo clusterInfo){  if (clusterInfo.getSchema() != null) {    return;  }  if (clusterInfo.getNumberOfInstances() != null && clusterInfo.getNumberOfInstances() > 1) {    clusterInfo.setSchema("partitioned");  } else   if (clusterInfo.getNumberOfInstances() != null && clusterInfo.getNumberOfInstances() == 1 && clusterInfo.getNumberOfBackups() != null && clusterInfo.getNumberOfBackups() > 0) {    clusterInfo.setSchema("partitioned");  }}  }
class C{  public Vec2d(){  set(0d,0d);}  }
class C{  @deprecated public static final boolean equals(int codepoint,CharSequence other){  if (other == null) {    return false;  }switch (other.length()) {case 1:    return codepoint == other.charAt(0);case 2:  return (codepoint > 65535) && (codepoint == Character.codePointAt(other,0));}return false;}  }
class C{  public String localName(String name){  int colon=name.indexOf(':');  if (colon == -1) {    return name;  } else {    return name.substring(colon + 1).intern();  }}  }
class C{  public static void updateConnectionTooltip(final MqttAsyncConnection connection,final Tooltip tooltip){  final StringBuffer sb=new StringBuffer();  sb.append("Status: " + connection.getConnectionStatus().toString().toLowerCase());  if (ConnectionStatus.CONNECTED.equals(connection.getConnectionStatus())) {    sb.append(" (" + connection.getLastSuccessfulyConnectionAttempt() + ")");    sb.append(System.getProperty("line.separator"));    final String sslStatus=connection.getProperties().getSSL() != null ? "on" : "off";    final String userAuthStatus=connection.getProperties().getUserCredentials() != null ? "on" : "off";    sb.append("Security: TLS/SSL is " + sslStatus + "; user authentication is "+ userAuthStatus);  }  if (connection.getConnectionAttempts() > 1) {    sb.append(System.getProperty("line.separator"));    sb.append("Connection attempts: " + connection.getConnectionAttempts());  }  if (connection.getDisconnectionReason() != null && !connection.getDisconnectionReason().isEmpty()) {    sb.append(System.getProperty("line.separator"));    sb.append("Last error: " + connection.getDisconnectionReason().toLowerCase());  }  tooltip.setText(sb.toString());}  }
class C{  @GET @Path("_multiget") @Timed(name="bv.emodb.sor.DataStoreResource1.multiGet",absolute=true) @ApiOperation(value="Retrieves a list of content items for the specified comma-delimited coordinates.",notes="Retrieves a list of content items for the specified comma-delimited coordinates.",response=Iterator.class) public Iterator<Map<String,Object>> multiGet(@QueryParam("id") List<String> coordinates,@QueryParam("consistency") @DefaultValue("STRONG") ReadConsistencyParam consistency,@QueryParam("debug") BooleanParam debug,final @Authenticated Subject subject){  List<Coordinate> coordinateList=parseCoordinates(coordinates);  for (  Coordinate coordinate : coordinateList) {    if (!subject.hasPermission(Permissions.readSorTable(new NamedResource(coordinate.getTable())))) {      throw new UnauthorizedException("not authorized to read table " + coordinate.getTable());    }  }  return streamingIterator(_dataStore.multiGet(coordinateList,consistency.get()),debug);}  }
class C{  protected MarketReportQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  protected XMLDTDValidator createDTDValidator(){  return new XMLDTDValidator();}  }
class C{  public SyntheticAttr(){}  }
class C{  private void cancelDuelRequest(Player owner,Player target){  log.debug("[Duel] Player " + owner.getName() + " cancelled his duel request with "+ target.getName());  PacketSendUtility.sendPacket(target,new SM_DUEL_REQUEST_CANCEL(1300134,owner.getName()));  PacketSendUtility.sendPacket(owner,SM_SYSTEM_MESSAGE.STR_DUEL_WITHDRAW_REQUEST(target.getName()));}  }
class C{  private void notifyDataSourceAboutToUnloaded(DataStore dataStore){  List<DataSourceUpdatedInterface> copyListenerList=new ArrayList<DataSourceUpdatedInterface>(listenerList);  for (  DataSourceUpdatedInterface listener : copyListenerList) {    listener.dataSourceAboutToUnloaded(dataStore);  }}  }
class C{  private void saveTouchStart(MotionEvent event){  mSavedMatrix.set(mMatrix);  mTouchStartPoint.set(event.getX(),event.getY());  mClosestDataSetToTouch=mChart.getDataSetByTouchPoint(event.getX(),event.getY());}  }
class C{  public String toString(){  return "jini://" + getHost0(host) + ":"+ port+ "/";}  }
class C{  @Override public void endElement(QName element,Augmentations augs) throws XNIException {}  }
class C{  private boolean urlsMatchLoaderAnnotation(URL[] urls,ClassLoader loader){  try {    return Arrays.equals(urls,getLoaderAnnotationURLs(loader));  } catch (  MalformedURLException e) {    return false;  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200450,skilltarget);}  }
class C{  public static void saveBookmarkOffline(long bookmarkId,EnhancedBookmarksModel bookmarkModel,Tab tab,final SnackbarManager snackbarManager,Activity activity){  assert bookmarkId != ChromeBrowserProviderClient.INVALID_BOOKMARK_ID;  bookmarkModel.saveOfflinePage(new BookmarkId(bookmarkId,BookmarkType.NORMAL),tab.getWebContents(),createAddBookmarkCallback(bookmarkModel,snackbarManager,activity));}  }
class C{  public void unSubscribe(Subscription subscription){  if (subscription != null && subscription.isUnsubscribed())   subscription.unsubscribe();}  }
class C{  public String toString(){  return "FileAudioPlayer";}  }
class C{  public static String makeLinkAuto(ServletContext servletContext,HttpServletRequest request,HttpServletResponse response,String uri,Boolean absPath,Boolean interWebapp,String webSiteId,Boolean controller,Boolean fullPath,Boolean secure,Boolean encode){  RequestHandler rh=RequestHandler.getRequestHandler(servletContext);  return rh.makeLinkAuto(request,response,uri,absPath,interWebapp,webSiteId,controller,fullPath,secure,encode);}  }
class C{  protected PagesSaveAccessQuery pageId(int value){  return unsafeParam("page_id",value);}  }
class C{  public static int[] shuffle(int[] intArray){  if (intArray == null) {    return null;  }  return shuffle(intArray,getRandom(intArray.length));}  }
class C{  final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  public double nextDouble(double least,double bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextDouble() * (bound - least) + least;}  }
class C{  public PhotosGetAllQueryWithExtended needHidden(Boolean value){  return unsafeParam("need_hidden",value);}  }
class C{  public int createTexture(){  return GlUtil.createTexture(mFilter.getTextureTarget());}  }
class C{  public BifocalDistortion(double range,double mag){  this(range,mag,range,mag);}  }
class C{  public void remove(T item){  if (items.remove(item)) {    notifyDataSetChanged();  }}  }
class C{  public StatelessHibernateSpaceSynchronizationEndpointConfigurer managedEntries(String... entries){  this.managedEntries=new HashSet<String>();  this.managedEntries.addAll(Arrays.asList(entries));  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_REGISTER_ITEM_MSG_UPGRADE_CANNOT(DescriptionId nameId){  return new SM_SYSTEM_MESSAGE(1402397,new Object[]{nameId});}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public StartVisiblePredicate(){  super(VisualItem.STARTVISIBLE);}  }
class C{  public void put(int key,E value){  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~ContainerHelpers.binarySearch(mKeys,mSize,key);    }    if (mSize >= mKeys.length) {      int n=ContainerHelpers.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public Distribution(){  hDistro=new TreeMap();}  }
class C{  private static Object parse(XMLTokener x,boolean arrayForm,JSONArray ja) throws JSONException {  String attribute;  char c;  String closeTag=null;  int i;  JSONArray newja=null;  JSONObject newjo=null;  Object token;  String tagName=null;  while (true) {    if (!x.more()) {      throw x.syntaxError("Bad XML");    }    token=x.nextContent();    if (token == XML.LT) {      token=x.nextToken();      if (token instanceof Character) {        if (token == XML.SLASH) {          token=x.nextToken();          if (!(token instanceof String)) {            throw new JSONException("Expected a closing name instead of '" + token + "'.");          }          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped close tag");          }          return token;        } else         if (token == XML.BANG) {          c=x.next();          if (c == '-') {            if (x.next() == '-') {              x.skipPast("-->");            } else {              x.back();            }          } else           if (c == '[') {            token=x.nextToken();            if (token.equals("CDATA") && x.next() == '[') {              if (ja != null) {                ja.put(x.nextCDATA());              }            } else {              throw x.syntaxError("Expected 'CDATA['");            }          } else {            i=1;            do {              token=x.nextMeta();              if (token == null) {                throw x.syntaxError("Missing '>' after '<!'.");              } else               if (token == XML.LT) {                i+=1;              } else               if (token == XML.GT) {                i-=1;              }            } while (i > 0);          }        } else         if (token == XML.QUEST) {          x.skipPast("?>");        } else {          throw x.syntaxError("Misshaped tag");        }      } else {        if (!(token instanceof String)) {          throw x.syntaxError("Bad tagName '" + token + "'.");        }        tagName=(String)token;        newja=new JSONArray();        newjo=new JSONObject();        if (arrayForm) {          newja.put(tagName);          if (ja != null) {            ja.put(newja);          }        } else {          newjo.put("tagName",tagName);          if (ja != null) {            ja.put(newjo);          }        }        token=null;        for (; ; ) {          if (token == null) {            token=x.nextToken();          }          if (token == null) {            throw x.syntaxError("Misshaped tag");          }          if (!(token instanceof String)) {            break;          }          attribute=(String)token;          if (!arrayForm && ("tagName".equals(attribute) || "childNode".equals(attribute))) {            throw x.syntaxError("Reserved attribute.");          }          token=x.nextToken();          if (token == XML.EQ) {            token=x.nextToken();            if (!(token instanceof String)) {              throw x.syntaxError("Missing value");            }            newjo.accumulate(attribute,XML.stringToValue((String)token));            token=null;          } else {            newjo.accumulate(attribute,"");          }        }        if (arrayForm && newjo.length() > 0) {          newja.put(newjo);        }        if (token == XML.SLASH) {          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          if (ja == null) {            if (arrayForm) {              return newja;            } else {              return newjo;            }          }        } else {          if (token != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          closeTag=(String)parse(x,arrayForm,newja);          if (closeTag != null) {            if (!closeTag.equals(tagName)) {              throw x.syntaxError("Mismatched '" + tagName + "' and '"+ closeTag+ "'");            }            tagName=null;            if (!arrayForm && newja.length() > 0) {              newjo.put("childNodes",newja);            }            if (ja == null) {              if (arrayForm) {                return newja;              } else {                return newjo;              }            }          }        }      }    } else {      if (ja != null) {        ja.put(token instanceof String ? XML.stringToValue((String)token) : token);      }    }  }}  }
class C{  public DataTagRemove(final Long changeId,final long dataTagId,final long equipmentId){  setChangeId(changeId);  this.dataTagId=dataTagId;  this.equipmentId=equipmentId;}  }
class C{  public boolean allowedAsRequestResponseInCodeGen(){  return allowedAsRequestResponseInCodeGen;}  }
class C{  private static float snapPercent(float percent){  int value=(int)(percent * 100);  int slope=2;  if (Math.abs(value - 25) <= slope) {    value=25;  }  if (Math.abs(value - 33) <= slope) {    value=33;  }  if (Math.abs(value - 50) <= slope) {    value=50;  }  if (Math.abs(value - 66) <= slope) {    value=66;  }  if (Math.abs(value - 75) <= slope) {    value=75;  }  return (value / 100f);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200430,skilltarget,skillname);}  }
class C{  public static final String unescapeHtml4(final String input){  return UNESCAPE_HTML4.translate(input);}  }
class C{  public WidgetsGetCommentsQuery url(String value){  return unsafeParam("url",value);}  }
class C{  private static String generatePassword(){  String password="sldEditor";  StringBuilder sb=new StringBuilder();  sb.append(getUniqueIdentifier());  sb.append(System.getProperty("user.name"));  password=sb.toString();  return password;}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected AdsUpdateClientsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  public VolatileTimeComparator(DataApiRequest apiRequest,DruidAggregationQuery<?> query,PartialDataHandler partialDataHandler,VolatileIntervalsService volatileIntervalsService){  this.apiRequest=apiRequest;  this.query=query;  this.partialDataHandler=partialDataHandler;  this.volatileIntervalsService=volatileIntervalsService;}  }
class C{  private BoundingBox merge(Vector3f boxCenter,float boxX,float boxY,float boxZ,BoundingBox rVal){  Vector3f vect1=Vector3f.newInstance();  Vector3f vect2=Vector3f.newInstance();  vect1.x=center.x - xExtent;  if (vect1.x > boxCenter.x - boxX) {    vect1.x=boxCenter.x - boxX;  }  vect1.y=center.y - yExtent;  if (vect1.y > boxCenter.y - boxY) {    vect1.y=boxCenter.y - boxY;  }  vect1.z=center.z - zExtent;  if (vect1.z > boxCenter.z - boxZ) {    vect1.z=boxCenter.z - boxZ;  }  vect2.x=center.x + xExtent;  if (vect2.x < boxCenter.x + boxX) {    vect2.x=boxCenter.x + boxX;  }  vect2.y=center.y + yExtent;  if (vect2.y < boxCenter.y + boxY) {    vect2.y=boxCenter.y + boxY;  }  vect2.z=center.z + zExtent;  if (vect2.z < boxCenter.z + boxZ) {    vect2.z=boxCenter.z + boxZ;  }  center.set(vect2).addLocal(vect1).multLocal(0.5f);  xExtent=vect2.x - center.x;  yExtent=vect2.y - center.y;  zExtent=vect2.z - center.z;  Vector3f.recycle(vect1);  Vector3f.recycle(vect2);  return rVal;}  }
class C{  public Builder withParams(@NotNull Map<String,Object> params){  myParams=params;  return this;}  }
class C{  public EnvVar(String name,Class<?> type,boolean predefined){  super();  this.name=name;  this.type=type;  this.predefined=predefined;}  }
class C{  public static void resolveQueryModel(QueryModel queryModel){  CarbonMetadata.getInstance().addCarbonTable(queryModel.getTable());  CarbonTable carbonTable=queryModel.getTable();  String tableName=queryModel.getAbsoluteTableIdentifier().getCarbonTableIdentifier().getTableName();  for (  QueryDimension queryDimension : queryModel.getQueryDimension()) {    queryDimension.setDimension(carbonTable.getDimensionByName(tableName,queryDimension.getColumnName()));  }  for (  QueryDimension sortDimension : queryModel.getSortDimension()) {    sortDimension.setDimension(carbonTable.getDimensionByName(tableName,sortDimension.getColumnName()));  }  for (  QueryMeasure queryMeasure : queryModel.getQueryMeasures()) {    if (queryMeasure.getColumnName().equals("count(*)")) {      if (carbonTable.getMeasureByTableName(tableName).size() > 0 && !carbonTable.getMeasureByTableName(tableName).get(0).getColName().equals(CarbonCommonConstants.DEFAULT_INVISIBLE_DUMMY_MEASURE)) {        queryMeasure.setMeasure(carbonTable.getMeasureByTableName(tableName).get(0));      } else {        CarbonMeasure dummyMeasure=new CarbonMeasure(carbonTable.getDimensionByTableName(tableName).get(0).getColumnSchema(),0);        queryMeasure.setMeasure(dummyMeasure);      }    } else {      queryMeasure.setMeasure(carbonTable.getMeasureByName(tableName,queryMeasure.getColumnName()));    }  }}  }
class C{  public static boolean isRematchedUpdate(int mod){  return (mod & NOTIFY_REMATCHED_UPDATE) != 0;}  }
class C{  private static boolean usable(Method m,Class c,Class base){  int mods=m.getModifiers();  return (m.getReturnType() == ProxyTrustIterator.class && m.getExceptionTypes().length == 0 && (mods & Modifier.STATIC) == 0 && ((mods & (Modifier.PUBLIC | Modifier.PROTECTED)) != 0 || ((mods & Modifier.PRIVATE) != 0 ? c == base : samePackage(c,base))));}  }
class C{  public AggregationSet maxValue(String path){  return add(new MaxValueAggregator().setPath(path));}  }
class C{  public void onTick(){  ACLMessage msg;synchronized (myAgent) {    if ((msg=myAgent.receive()) == null) {      return;    }    if (msg.getPerformative() == ACLMessage.CANCEL) {      myAgent.doDelete();      return;    }    if (msg.getPerformative() != ACLMessage.INFORM) {synchronized (System.err) {        System.err.println("Ignoring message with unknown performative...");      }      return;    }    try {      Object[] oTexts=(Object[])msg.getContentObject();      String[] sTexts=new String[3];      sTexts[0]=(String)oTexts[0];      try {        ByteArrayInputStream bIn=new ByteArrayInputStream((byte[])oTexts[1]);        GZIPInputStream gzIn=new GZIPInputStream(bIn);        int iChar;        StringBuffer sbBuf=new StringBuffer();        while ((iChar=gzIn.read()) > -1)         sbBuf.append((char)iChar);        sTexts[1]=sbBuf.toString();      } catch (      IOException ioe) {synchronized (System.err) {          ioe.printStackTrace(System.err);        }        sTexts[1]=new String((byte[])oTexts[1]);      }      try {        ByteArrayInputStream bIn=new ByteArrayInputStream((byte[])oTexts[2]);        GZIPInputStream gzIn=new GZIPInputStream(bIn);        int iChar;        StringBuffer sbBuf=new StringBuffer();        while ((iChar=gzIn.read()) > -1)         sbBuf.append((char)iChar);        sTexts[2]=sbBuf.toString();      } catch (      IOException ioe) {synchronized (System.err) {          ioe.printStackTrace(System.err);        }        sTexts[2]=new String((byte[])oTexts[2]);      }      NGramDocumentComparatorAgent a=(NGramDocumentComparatorAgent)myAgent;      a.addBehaviour(new CalcBehaviour(sTexts[1],sTexts[2],a.WordMin,a.WordMax,a.WordDist,a.CharMin,a.CharMax,a.CharDist,a.Do.equals("char") || a.Do.equals("all"),a.Do.equals("word") || a.Do.equals("all"),a.Silent,sTexts[0]));      if (!a.Silent)       System.err.println("Successfully received texts:" + sTexts[0]);    } catch (    UnreadableException ex) {synchronized (System.err) {        System.err.println("Cannot read input texts...");        System.err.flush();        ex.printStackTrace();      }    }  }}  }
class C{  protected MessagesCreateChatQuery userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  public static long calculateDifferentHour(Date startDate,Date endDate){  return calculateDifference(startDate,endDate,DifferenceMode.Hour);}  }
class C{  public BindingConfig(@LayoutRes int layoutResource){  this(layoutResource,BR.viewModel);}  }
class C{  @Override public void addChild(WXComponent child){  addChild(child,-1);}  }
class C{  public void clear(){  super.clear();  int[] set=_set;  byte[] states=_states;  for (int i=set.length; i-- > 0; ) {    set[i]=(int)0;    states[i]=FREE;  }}  }
class C{  public void initialiseSelectedStyleIndex(){  this.selectedStyleIndex=0;}  }
class C{  public UsersGetFollowersQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  @Override public float nextFloat(){  return randomGenerator.nextFloat();}  }
class C{  public boolean ignore_types(){  return soot.PhaseOptions.getBoolean(options,"ignore-types");}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback,boolean useBSClsLoader,boolean useServicesMechanism) throws ConfigurationError {  try {    Class providerClass=getProviderClass(className,cl,doFallback,useBSClsLoader);    Object instance=null;    if (!useServicesMechanism) {      instance=newInstanceNoServiceLoader(providerClass);    }    if (instance == null) {      instance=providerClass.newInstance();    }    if (debug) {      dPrint("created new instance of " + providerClass + " using ClassLoader: "+ cl);    }    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  @Override public void populateExpression(Object objValue){}  }
class C{  public Builder encrypt(String key){  this.encryptKey=key;  return this;}  }
class C{  public Viterbi(List<Target> targets,UnitDatabase database,float wTargetCosts,int beamSize){  this.database=database;  this.targetCostFunction=database.getTargetCostFunction();  this.joinCostFunction=database.getJoinCostFunction();  this.sCostFunction=database.getSCostFunction();  this.wTargetCosts=wTargetCosts;  wJoinCosts=1 - wTargetCosts;  wSCosts=0;  this.beamSize=beamSize;  this.cumulJoinCosts=0;  this.nJoinCosts=0;  this.cumulTargetCosts=0;  this.nTargetCosts=0;  ViterbiPoint last=null;  for (  Target target : targets) {    ViterbiPoint nextPoint=new ViterbiPoint(target);    if (last != null) {      last.setNext(nextPoint);    } else {      firstPoint=nextPoint;      firstPoint.getPaths().add(new ViterbiPath(null,null,0));    }    last=nextPoint;  }  lastPoint=new ViterbiPoint(null);  last.setNext(lastPoint);  if (beamSize == 0) {    throw new IllegalStateException("General beam search not implemented");  }}  }
class C{  private org.apache.carbondata.format.Encoding fromWrapperToExternalEncoding(Encoding encoder){  if (null == encoder) {    return null;  }switch (encoder) {case DICTIONARY:    return org.apache.carbondata.format.Encoding.DICTIONARY;case DELTA:  return org.apache.carbondata.format.Encoding.DELTA;case RLE:return org.apache.carbondata.format.Encoding.RLE;case INVERTED_INDEX:return org.apache.carbondata.format.Encoding.INVERTED_INDEX;case BIT_PACKED:return org.apache.carbondata.format.Encoding.BIT_PACKED;case DIRECT_DICTIONARY:return org.apache.carbondata.format.Encoding.DIRECT_DICTIONARY;default :return org.apache.carbondata.format.Encoding.DICTIONARY;}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_Instant_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200517,skilltarget,num0,skillname);}  }
class C{  public Node load(String fileName,FeatureDefinition featDefinition,String[] dummy) throws IOException, MaryConfigurationException {  cleadReader();  DataInput raf=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));  MaryHeader maryHeader=new MaryHeader(raf);  if (!maryHeader.hasCurrentVersion()) {    throw new IOException("Wrong version of database file");  }  if (maryHeader.getType() != MaryHeader.CARTS) {    throw new IOException("No CARTs file");  }  int numNodes=raf.readInt();  raf.readUTF();  featDef=featDefinition;  openBrackets=0;  try {    while (true) {      int length=raf.readInt();      char[] cartChars=new char[length];      for (int i=0; i < length; i++) {        cartChars[i]=raf.readChar();      }      String cart=new String(cartChars);      parseAndAdd(cart);    }  } catch (  EOFException eof) {  }  if (openBrackets != 0) {    throw new IOException("Error loading CART: bracket mismatch: " + openBrackets);  }  if (rootNode instanceof DecisionNode)   ((DecisionNode)rootNode).countData();  return rootNode;}  }
class C{  public static Map<String,String> encodeFilename(String filename){  Map<String,String> propertyMap=new LinkedHashMap<String,String>();  propertyMap.put(DataSourceConnectorInterface.FILE_MAP_KEY,filename);  return propertyMap;}  }
class C{  public List<Entry> filter(List<Entry> points){  return filter(points,mTolerance);}  }
class C{  public DataType(Class<T> clazz,BiConsumer<PacketBuffer,T> writer,Function<PacketBuffer,T> reader){  this.clazz=clazz;  this.writer=writer;  this.reader=reader;}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public boolean isApplicable(){  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  return inspectorWindow != null && inspectorWindow.getDataTree() != null && inspectorWindow.getDataTree().getModel().getRoot() != null && inspectorWindow.getDataTree().getModel().getChildCount(inspectorWindow.getDataTree().getModel().getRoot()) > 0;}  }
class C{  @Override public int hashCode(){  return getName().hashCode();}  }
class C{  private void put(final Item i){  if (index > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  @Provides @Singleton @ScannerZooKeeper CuratorFramework provideScannerZooKeeperConnection(@Global CuratorFramework curator){  return withComponentNamespace(curator,"scanner");}  }
class C{  public static synchronized boolean isVerticalSyncEnabled(){  return verticalSyncEnabled;}  }
class C{  public void testRegisterToAllTags() throws SecurityException, NoSuchMethodException, CloneNotSupportedException {  assertTrue(dataTag.clone().equals(dataTag));  C2monCacheListener<Tag> mockCacheListener=createMock(C2monCacheListener.class,C2monCacheListener.class.getMethod("notifyElementUpdated",new Class<?>[]{Object.class}));  Lifecycle listenerContainer=cacheRegistrationService.registerToAllTags(mockCacheListener,1);  listenerContainer.start();  assertNotNull(listenerContainer);  mockCacheListener.notifyElementUpdated(dataTag);  replay(mockCacheListener);  dataTagFacade.updateAndValidate(dataTag.getId(),Boolean.FALSE,"listener test value",new Timestamp(System.currentTimeMillis()));  dataTagCache.notifyListenersOfUpdate(dataTag);  listenerContainer.stop();  verify(mockCacheListener);}  }
class C{  private int scanNCName(String data,int endOffset,int currentOffset){  int ch=data.charAt(currentOffset);  if (ch >= 0x80) {    if (!XMLChar.isNameStart(ch)) {      return currentOffset;    }  } else {    byte chartype=fASCIICharMap[ch];    if (chartype != CHARTYPE_LETTER && chartype != CHARTYPE_UNDERSCORE) {      return currentOffset;    }  }  while (++currentOffset < endOffset) {    ch=data.charAt(currentOffset);    if (ch >= 0x80) {      if (!XMLChar.isName(ch)) {        break;      }    } else {      byte chartype=fASCIICharMap[ch];      if (chartype != CHARTYPE_LETTER && chartype != CHARTYPE_DIGIT && chartype != CHARTYPE_PERIOD && chartype != CHARTYPE_MINUS && chartype != CHARTYPE_UNDERSCORE) {        break;      }    }  }  return currentOffset;}  }
class C{  public MarketGetCommentsQuery sort(String value){  return unsafeParam("sort",value);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override public void removeVolume(CommandInput input,CompletionHandler completionHandler){  createOrUpdateTargetSsl(input);  String path=String.format("/volumes/%s",input.getProperties().get(DOCKER_VOLUME_NAME_PROP_NAME));  URI uri=UriUtils.extendUri(input.getDockerUri(),path);  sendDelete(uri,completionHandler);}  }
class C{  private void invalidateLiveCache(final TagQualityStatus status,final String invalidationMessage){  LOG.debug("invalidateLiveCache() - Invalidating " + liveCache.size() + " tag entries with "+ status+ ".");  for (  ClientDataTagImpl cdt : liveCache.values()) {    cdt.invalidate(status,invalidationMessage);  }}  }
class C{  @Override public IntervalsSet wholeSpace(){  return new IntervalsSet(tolerance);}  }
class C{  public static Snackbar make(CharSequence text,SnackbarController controller){  Snackbar s=new Snackbar();  s.mText=text;  s.mController=controller;  return s;}  }
class C{  public void addImplements(Access node){  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();  list.addChild(node);}  }
class C{  public AssertionFailedException(String detail){  super(detail);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Dispel_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200506,skilltarget,skillname);}  }
class C{  public HashChain(Chain<E> src){  this();  addAll(src);}  }
class C{  protected void savePassCodeAndExit(){  Intent resultIntent=new Intent();  resultIntent.putExtra(KEY_PASSCODE,mPassCodeDigits[0] + mPassCodeDigits[1] + mPassCodeDigits[2]+ mPassCodeDigits[3]);  setResult(RESULT_OK,resultIntent);  finish();}  }
class C{  protected void addLanguageVariables(BundleContext context){  Language defaultLanguage=APILocator.getLanguageAPI().getLanguage("en","US");  addLanguageVariables(context,defaultLanguage);}  }
class C{  public MenuComboBox(ValueComboBoxDataSelectedInterface listener){  this.listener=listener;}  }
class C{  public synchronized void end(){  this.active=false;  this.beginPosition=null;}  }
class C{  public static Map<String,Object> toFieldMap(String userLoginId,String userPrefTypeId,String userPrefGroupTypeId,Object userPrefValue) throws GeneralException {  Map<String,Object> fieldMap=UtilMisc.toMap("userLoginId",userLoginId,"userPrefTypeId",userPrefTypeId,"userPrefValue",ObjectType.simpleTypeConvert(userPrefValue,"String",null,null,false));  if (UtilValidate.isNotEmpty(userPrefGroupTypeId)) {    fieldMap.put("userPrefGroupTypeId",userPrefGroupTypeId);  }  String valueDataType=userPrefValue.getClass().getName();  if (!"java.lang.String".equals(valueDataType)) {    fieldMap.put("userPrefDataType",valueDataType);  }  return fieldMap;}  }
class C{  private static void expandBelow10DigitNumber(String numberString,WordRelation wordRelation,Item tokenItem){  expandLargeNumber(numberString,"million",6,wordRelation,tokenItem);}  }
class C{  @Override public void processingInstruction(String target,String data) throws SAXException {  writeText4Links();  write("<?");  write(target);  write(' ');  write(data);  write("?>");  if (elementLevel < 1) {    write('\n');  }  super.processingInstruction(target,data);}  }
class C{  private void updateMembersEmblem(Legion legion,LegionEmblemType emblemType){  LegionEmblem legionEmblem=legion.getLegionEmblem();  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {    PacketSendUtility.broadcastPacket(onlineLegionMember,new SM_LEGION_UPDATE_EMBLEM(legion.getLegionId(),legionEmblem.getEmblemId(),legionEmblem.getColor_r(),legionEmblem.getColor_g(),legionEmblem.getColor_b(),emblemType),true);    if (legionEmblem.getEmblemType() == LegionEmblemType.CUSTOM) {      sendEmblemData(onlineLegionMember,legionEmblem,legion.getLegionId(),legion.getLegionName());    }  }}  }
class C{  public void draw(Canvas canvas){  canvas.drawCircle(x,y,radius,paint);}  }
class C{  @Override public void endCDATA(Augmentations augs) throws XNIException {  fInCDATASection=false;  if (fDocumentHandler != null) {    fDocumentHandler.endCDATA(augs);  }}  }
class C{  @Override public int[] makeInverseCumulativeTestValues(){  return new int[]{0,0,1,1,2,2,3,3,4,5,10,20};}  }
class C{  public synchronized VisualItem findItem(Point p){  Point2D p2=(m_itransform == null ? p : m_itransform.transform(p,m_tmpPoint));  if (!m_queue.psorted)   m_queue.sortPickingQueue();  for (int i=m_queue.psize; --i >= 0; ) {    VisualItem vi=m_queue.pitems[i];    if (!vi.isValid())     continue;    Renderer r=vi.getRenderer();    if (r != null && vi.isInteractive() && r.locatePoint(p2,vi)) {      return vi;    }  }  return null;}  }
class C{  @Override public boolean isUploadLimited(){  return isCellularExperimentEnabled() && !isWiFiOrEthernetNetwork();}  }
class C{  @TargetApi(8) @Override public void onReceivedSslError(WebView view,SslErrorHandler handler,SslError error){  final String packageName=parentEngine.cordova.getActivity().getPackageName();  final PackageManager pm=parentEngine.cordova.getActivity().getPackageManager();  ApplicationInfo appInfo;  try {    appInfo=pm.getApplicationInfo(packageName,PackageManager.GET_META_DATA);    if ((appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {      handler.proceed();      return;    } else {      super.onReceivedSslError(view,handler,error);    }  } catch (  NameNotFoundException e) {    super.onReceivedSslError(view,handler,error);  }}  }
class C{  public static AccountOperationResponseCode updateProfile(String email,String displayName,String photoUrl){  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord user=findUserByEmail(pm,email);    if (user != null) {      user.setDisplayName(displayName);      user.setPhotoUrl(photoUrl);      pm.makePersistent(user);      return AccountOperationResponseCode.OK;    } else {      return AccountOperationResponseCode.USER_NOT_FOUND;    }  }  finally {    pm.close();  }}  }
class C{  public static Map<String,Object> sendOrderChangeNotification(DispatchContext ctx,Map<String,? extends Object> context){  return sendOrderNotificationScreen(ctx,context,"PRDS_ODR_CHANGE");}  }
class C{  public LookupDiscoveryManager(String[] groups,LookupLocator[] locators,DiscoveryListener listener,Configuration config) throws IOException, ConfigurationException {  this(groups,locators,listener,config,false);}  }
class C{  public long next(long startTime,long fromTime,long currentCount){  if (startTime == 0)   startTime=RecurrenceUtil.now();  if (fromTime == 0)   fromTime=startTime;  if (getEndTime() != 0 && getEndTime() <= RecurrenceUtil.now())   return 0;  Debug.logVerbose("Rule NOT expired by end time.",module);  if (getCount() != -1 && currentCount >= getCount())   return 0;  Debug.logVerbose("Rule NOT expired by max count.",module);  boolean isSeeking=true;  long nextRuntime=0;  long seekTime=fromTime;  int loopProtection=0;  int maxLoop=(10 * 10 * 10* 10* 10);  while (isSeeking && loopProtection < maxLoop) {    Date nextRun=getNextFreq(startTime,seekTime);    seekTime=nextRun.getTime();    if (validByRule(nextRun)) {      isSeeking=false;      nextRuntime=nextRun.getTime();    }    loopProtection++;  }  return nextRuntime;}  }
class C{  public static void ap(Zmat A,Rot P,int ii1,int ii2,int jj1,int jj2){  double t1r, t1i, t2r, t2i;  A.dirty=true;  int i1=ii1 - A.basex;  int i2=ii2 - A.basex;  int j1=jj1 - A.basex;  int j2=jj2 - A.basex;  for (int i=i1; i <= i2; i++) {    t1r=P.c * A.re[i][j1] - P.sr * A.re[i][j2] - P.si * A.im[i][j2];    t1i=P.c * A.im[i][j1] - P.sr * A.im[i][j2] + P.si * A.re[i][j2];    t2r=P.c * A.re[i][j2] + P.sr * A.re[i][j1] - P.si * A.im[i][j1];    t2i=P.c * A.im[i][j2] + P.sr * A.im[i][j1] + P.si * A.re[i][j1];    A.re[i][j1]=t1r;    A.im[i][j1]=t1i;    A.re[i][j2]=t2r;    A.im[i][j2]=t2i;  }}  }
class C{  public void collapse(DefaultMutableTreeNode v){  if (v == null)   v=this.root;  for (Enumeration descendants=v.depthFirstEnumeration(); descendants.hasMoreElements(); ) {    v=(DefaultMutableTreeNode)descendants.nextElement();    this.tree.collapsePath(new TreePath(v.getPath()));  }}  }
class C{  public Instruction reconstructInstructions(){  if (cfg != null)   return cfg.head; else   return null;}  }
class C{  public MarketSearchQueryWithExtended tags(List<Integer> value){  return unsafeParam("tags",value);}  }
class C{  public short remove(K key){  short prev=(short)0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  @Override public synchronized CompletableFuture<Void> disconnect(){  CompletableFuture<Void> disconnectFuture=new CompletableFuture<>();  isFenced.set(true);  (dispatcher != null ? dispatcher.disconnect() : CompletableFuture.completedFuture(null)).thenCompose(null).thenRun(null).exceptionally(null);  return disconnectFuture;}  }
class C{  public static void redirectPointers(Unit oldLocation,Unit newLocation){  List<UnitBox> boxesPointing=oldLocation.getBoxesPointingToThis();  UnitBox[] boxes=boxesPointing.toArray(new UnitBox[boxesPointing.size()]);  for (  UnitBox box : boxes) {    if (box.getUnit() != oldLocation)     throw new RuntimeException("Something weird's happening");    if (!box.isBranchTarget())     box.setUnit(newLocation);  }}  }
class C{  public static void showCreateAircraft(){  Context context=AirMap.getInstance().getContext();  Intent intent=new Intent(context,CreateEditAircraftActivity.class);  context.startActivity(intent);}  }
class C{  public void updateView(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200565,skilltarget,skillname);}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="/api/drops/export") public ExportDropConfig exportDrop(@RequestBody ExportDropConfig exportDropConfig) throws DropExporterException {  PollableFuture<Drop> exportDropFuture=dropService.startDropExportProcess(exportDropConfig,PollableTask.INJECT_CURRENT_TASK);  exportDropConfig.setPollableTask(exportDropFuture.getPollableTask());  try {    exportDropConfig.setDropId(exportDropFuture.get().getId());  } catch (  ExecutionException|InterruptedException e) {    logger.debug("Cannot get dropId from the pollable due to exception",e);  }  return exportDropConfig;}  }
class C{  public short[] toNativeArray(int offset,int len){  short[] rv=new short[len];  toNativeArray(rv,offset,len);  return rv;}  }
class C{  public static Calendar stringToCalendar(String s){  Date date=null;  try {    date=TIME_FORMAT.parse(s);  } catch (  ParseException e) {    try {      date=DATE_FORMAT.parse(s);    } catch (    ParseException e1) {      return null;    }  }  if (date == null) {    return null;  }  Calendar output=Calendar.getInstance();  output.setTime(date);  return output;}  }
class C{  private static void internal_updateOnlineResources(URL resourceLocator,StyledLayerDescriptor sld,List<String> externalImageList){  if (sld == null) {    return;  }  for (  StyledLayer styledLayer : sld.layers()) {    List<Style> styles=null;    if (styledLayer instanceof NamedLayer) {      NamedLayerImpl namedLayer=(NamedLayerImpl)styledLayer;      styles=namedLayer.styles();    } else     if (styledLayer instanceof UserLayer) {      UserLayerImpl userLayer=(UserLayerImpl)styledLayer;      styles=userLayer.userStyles();    }    if (styles != null) {      for (      Style style : styles) {        for (        FeatureTypeStyle fts : style.featureTypeStyles()) {          for (          Rule rule : fts.rules()) {            for (            Symbolizer symbolizer : rule.symbolizers()) {              if (symbolizer instanceof PointSymbolizer) {                PointSymbolizer point=(PointSymbolizer)symbolizer;                if (point.getGraphic() != null) {                  updateGraphicalSymbol(resourceLocator,point.getGraphic().graphicalSymbols(),externalImageList);                }              } else               if (symbolizer instanceof LineSymbolizer) {                LineSymbolizer line=(LineSymbolizer)symbolizer;                updateStroke(resourceLocator,line.getStroke(),externalImageList);              } else               if (symbolizer instanceof PolygonSymbolizer) {                PolygonSymbolizer polygon=(PolygonSymbolizer)symbolizer;                updateStroke(resourceLocator,polygon.getStroke(),externalImageList);                updateFill(resourceLocator,polygon.getFill(),externalImageList);              }            }          }        }      }    }  }}  }
class C{  @NonNull public static String joinAddresses(String firstPart,String secondPart){  return escape(firstPart) + "&" + escape(secondPart);}  }
class C{  public static DiscCacheAware createReserveDiscCache(File cacheDir){  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return new TotalSizeLimitedDiscCache(cacheDir,2 * 1024 * 1024);}  }
class C{  protected MessagesRemoveChatUserQuery chatId(int value){  return unsafeParam("chat_id",value);}  }
class C{  public static boolean isDarkThemeEnable(){  return isDarkThemeEnable;}  }
class C{  public MeManageImplementor(MeManageView view){  this.view=view;}  }
class C{  public void buildContainsTemplate(ContainsNode containsNode) throws SQLException {  if (containsNode.getRightChild() != null && containsNode.getRightChild().isContainsItemsRootNode()) {    ContainsItemsRootNode rn=(ContainsItemsRootNode)containsNode.getRightChild();    if (rn.getTemplate() == null)     throw new RuntimeException("invalid traverse tree state null template in containsItemsRoot");    containsNode.setTemplate(rn.getTemplate());    return;  }  QueryColumnData queryColumnData=((ColumnNode)containsNode.getLeftChild()).getColumnData();  FunctionCallDescription functionCallDescription=((ColumnNode)containsNode.getLeftChild()).getFunctionCallDescription();  if (containsNode.isJoined()) {    if (query.isJoined())     return;    throwIllegalJoinExpressionException(containsNode);  }  QueryTableData tableData=queryColumnData.getColumnTableData();  ExpNode right=containsNode.getRightChild();  Object value=null;  if (right instanceof LiteralNode) {    value=((LiteralNode)right).getValue();  } else {    value=((AbstractInNode)right).getConvertedValues(tableData.getTypeDesc(),containsNode.getPath());  }  QueryTemplatePacket template=new QueryTemplatePacket(tableData,query.getQueryResultType(),queryColumnData.getColumnPath(),new ContainsValueRange(containsNode.getPath(),functionCallDescription,value,containsNode.getTemplateMatchCode()));  containsNode.setTemplate(template);}  }
class C{  @Override public boolean equals(Object other){  return this == other || other instanceof JsonNull;}  }
class C{  private void interpolate(float[] spectrum){  for (int i=0; i < spectrum.length; i++) {    if (spectrum[i] < previousSpectrum[i]) {      double interpolationCoefficient=0.97;      spectrum[i]=(float)(previousSpectrum[i] * interpolationCoefficient);    }    previousSpectrum[i]=spectrum[i];  }}  }
class C{  public static Histogram negate(Histogram x){  return x.modifyEventCounters(null);}  }
class C{  public TTFDetails(TTFUpdateInterface parentObj,FunctionNameInterface functionManager){  super(TTFDetails.class,functionManager);  this.parentObj=parentObj;  createUI();}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public static boolean isSupplemental(int c){  return (c >= 0x10000 && c <= 0x10FFFF);}  }
class C{  public static List reverseList(List l){  LinkedList lRes=new LinkedList();  int iListSize=l.size();  for (int iCnt=0; iCnt < iListSize; iCnt++) {    lRes.add(l.get(iListSize - iCnt - 1));  }  return lRes;}  }
class C{  public synchronized void press(){  this.press(1);}  }
class C{  public void onTargetClick(TapTargetView view){  view.dismiss(true);}  }
class C{  @Inject public TestAsynchronousWorkflowsBuilder(ApiJobStore apiJobStore,PreResponseStore preResponseStore,Clock timestampGenerator){  super(apiJobStore,preResponseStore,timestampGenerator);}  }
class C{  public CategoryPhotosView(Context context){  super(context);  this.initialize();}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public void moveWidget(ConstraintWidget widget,Direction direction,boolean snapToGrid){  if (widget == null) {    return;  }  int x=widget.getDrawX();  int y=widget.getDrawY();  int xOffset=0;  int yOffset=0;switch (direction) {case LEFT:    xOffset=-1;  break;case UP:yOffset=-1;break;case RIGHT:xOffset=1;break;case DOWN:yOffset=1;break;}if (snapToGrid) {xOffset*=GRID_SPACING;yOffset*=GRID_SPACING;}widget.setDrawOrigin(x + xOffset,y + yOffset);}  }
class C{  public Object clone(){  JimpleLocal local=new JimpleLocal(null,type);  local.name=name;  return local;}  }
class C{  public static ClassHierarchy classHierarchy(Scene scene){  if (scene == null) {    throw new InternalTypingException();  }  ClassHierarchy classHierarchy=G.v().ClassHierarchy_classHierarchyMap.get(scene);  if (classHierarchy == null) {    classHierarchy=new ClassHierarchy(scene);  }  return classHierarchy;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @Override public synchronized void reset() throws IOException {  fbIndex=markFbIndex;  if (markedAtStart) {    firstBytes=null;  }  in.reset();}  }
class C{  public AdsGetSuggestionsQuery country(Integer value){  return unsafeParam("country",value);}  }
class C{  public void updateCRS(ValueComboBoxData selectedValue){  if (selectedValue != null) {    String crsCode=selectedValue.getKey();    CoordinateReferenceSystem newCRS=CoordManager.getInstance().getCRS(crsCode);    SimpleFeatureType newFeatureType=SimpleFeatureTypeBuilder.retype(featureCollection.getSchema(),newCRS);    String typeName=userLayer.getInlineFeatureType().getTypeName();    try {      SimpleFeatureSource featureSource=userLayer.getInlineFeatureDatastore().getFeatureSource(typeName);      SimpleFeatureBuilder sfb=new SimpleFeatureBuilder(newFeatureType);      ArrayList<SimpleFeature> featureList=new ArrayList<SimpleFeature>();      SimpleFeatureIterator it=featureSource.getFeatures().features();      try {        while (it.hasNext()) {          SimpleFeature sf=it.next();          List<Object> attributeValueList=sf.getAttributes();          sfb.addAll(attributeValueList);          featureList.add(sfb.buildFeature(null));        }      }  finally {        it.close();      }      SimpleFeatureCollection collection=new ListFeatureCollection(newFeatureType,featureList);      DataStore dataStore=DataUtilities.dataStore(collection);      featureCollection=collection;      cachedFeature=null;      lastRow=-1;      userLayer.setInlineFeatureDatastore(dataStore);      userLayer.setInlineFeatureType(newFeatureType);    } catch (    IOException e) {      ConsoleManager.getInstance().exception(this,e);    }    this.fireTableStructureChanged();    this.fireTableDataChanged();    if (parentObj != null) {      parentObj.inlineFeatureUpdated();    }  }}  }
class C{  public ResourceLazyLoadingScript cache(boolean shouldCache){  this.shouldCache=shouldCache;  return this;}  }
class C{  public Repository createTestRepoUsingRepoService() throws Exception {  return createTestRepoUsingRepoService("repo");}  }
class C{  public void addCatchClause(CatchClause node){  List<CatchClause> list=(parent == null || state == null) ? getCatchClauseListNoTransform() : getCatchClauseList();  list.addChild(node);}  }
class C{  public DocsGetByIdQuery(VkApiClient client,UserActor actor,String... docs){  super(client,"docs.getById",Utils.buildParametrizedType(List.class,Doc.class));  accessToken(actor.getAccessToken());  docs(docs);}  }
class C{  private static boolean isEmpty(@Nonnull final File file,@Nonnull final Charset charset){  try {    return FileUtil.isEmpty(file,charset);  } catch (  final IOException e) {    throw new IllegalStateOfArgumentException("The given file could not be read.",e);  }}  }
class C{  private void pickMarginConnections(ScoutWidget[] list,int maxMarginPercent){  final int baseline=Direction.BASE.getDirection();  final int north=Direction.NORTH.getDirection();  final int south=Direction.SOUTH.getDirection();  final int east=Direction.EAST.getDirection();  int width=list[0].mConstraintWidget.getWidth();  int height=list[0].mConstraintWidget.getWidth();  int maxWidthMargin=(width * maxMarginPercent) / 100;  int maxHeightMargin=(height * maxMarginPercent) / 100;  int[] maxMargin={maxHeightMargin,maxWidthMargin};  final int west=Direction.WEST.getDirection();  int dirTypes[][]={{north,south},{west,east}};  for (int i=len - 1; i > 0; i--) {    float[][] widgetProbability=mProbability[i];    for (int horizontal=0; horizontal < 2; horizontal++) {      int[] dirs=dirTypes[horizontal];      boolean found=false;      while (!found) {        found=true;        int setlen=dirs.length;        if (DEBUG) {          System.out.println(" check " + list[i] + " "+ horizontal);        }        int dir=dirs[0];        if (widgetProbability == null || widgetProbability[dir] == null) {          continue;        }        int maxIndex=0;        int maxDirection=0;        float maxValue=0.0f;        int rowType=0;        for (int j=0; j < setlen; j++) {          int rowMaxIndex=Utils.max(widgetProbability[dirs[j]]);          if (maxValue < widgetProbability[dirs[j]][rowMaxIndex]) {            maxDirection=dirs[j];            maxIndex=rowMaxIndex;            maxValue=widgetProbability[dirs[j]][rowMaxIndex];          }        }        if (widgetProbability[maxDirection] == null) {          System.out.println(list[i] + " " + maxDirection);          continue;        }        int m, cDir;        if (maxDirection == baseline) {          m=maxIndex;          cDir=baseline;        } else {          m=maxIndex / 2;          cDir=maxDirection;          if (maxIndex % 2 == 1) {            cDir=cDir ^ 1;          }        }        if (mMargin[i][maxDirection][maxIndex] > maxMargin[horizontal]) {          continue;        }        String s=list[i] + "(" + Direction.toString(maxDirection)+ ") -> "+ list[m]+ " "+ Direction.toString(cDir);        if (DEBUG) {          System.out.println("try " + s);        }        if (!list[i].setConstraint(maxDirection,list[m],cDir,mMargin[i][maxDirection][maxIndex])) {          if (widgetProbability[maxDirection][maxIndex] >= 0) {            widgetProbability[maxDirection][maxIndex]=CONSTRAINT_FAILED_FLAG;            found=false;          }        } else {          mBinaryProbability[i][horizontal]=null;          if (DEBUG) {            System.out.println("connect " + s);          }        }      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuffCounterATK_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200508,num0,skilltarget,skillname);}  }
class C{  public void changeCharset(String charsetName) throws IOException {synchronized (this) {    writer=new OutputStreamWriter(stream,charsetName);  }}  }
class C{  @NonNull public <T>T peek(int index){  return (T)history.get(history.size() - index - 1);}  }
class C{  public static void logDuration(boolean wereResultsSeen,boolean isChained,long durationMs){  if (wereResultsSeen) {    RecordHistogram.recordTimesHistogram("Search.ContextualSearchDurationSeen",durationMs,TimeUnit.MILLISECONDS);  } else   if (isChained) {    RecordHistogram.recordTimesHistogram("Search.ContextualSearchDurationUnseenChained",durationMs,TimeUnit.MILLISECONDS);  } else {    RecordHistogram.recordTimesHistogram("Search.ContextualSearchDurationUnseen",durationMs,TimeUnit.MILLISECONDS);  }}  }
class C{  @Override public void testEnd(TestInfo testInfo){  throw new UnsupportedOperationException();}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (get(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  public static Bitmap scaleImage(Bitmap src,float scaleWidth,float scaleHeight){  if (src == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true);}  }
class C{  protected AdsGetStatisticsQuery period(AdsGetStatisticsPeriod value){  return unsafeParam("period",value);}  }
