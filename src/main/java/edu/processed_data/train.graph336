class C{  public FastNondominatedSorting(DominanceComparator comparator){  super(comparator);}  }
class C{  public void testForHit(Asteroids asteroids){  Bag a=asteroids.field.getAllObjects();  for (int i=0; i < a.numObjs; i++) {    Object obj=(a.objs[i]);    if (obj instanceof Asteroid) {      Asteroid asteroid=(Asteroid)(a.objs[i]);      if (asteroid.collisionWithElement(asteroids,this)) {        end(asteroids);        asteroid.breakApart(asteroids);        asteroids.score++;        break;      }    }  }}  }
class C{  public static String formatIntegerIfPossible(double value,int numberOfDigits){  return formatIntegerIfPossible(value,numberOfDigits,false);}  }
class C{  public void putIntArray(String key,int[] value){  map.put(key,value);}  }
class C{  public void hideToolbar(){  if (mFindToolbar == null)   return;  mFindToolbar.deactivate();}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  drawCenteredString(fontRendererObj,"Clean Up",width / 2,20,16777215);  drawCenteredString(fontRendererObj,"Please select the servers you want to remove:",width / 2,36,10526880);  super.drawScreen(par1,par2,par3);  for (int i=0; i < buttonList.size(); i++) {    GuiButton button=(GuiButton)buttonList.get(i);    if (button.isMouseOver() && !toolTips[button.id].isEmpty()) {      drawHoveringText(Arrays.asList(toolTips[button.id].split("\n")),par1,par2);      break;    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster destination=null;  WhiteboxRasterInfo imageInfo=null;  int nCols=0;  int nRows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double x, y, z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  String resampleMethod="nearest neighbour";  double north, south, east, west;  double gridResX, gridResY;  int currentFile=-1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  destHeader=args[1];  resampleMethod=args[2].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.equals("cubic convolution")) {    showFeedback("Resample method not recognized");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    boolean eastGreaterThanWest=true;    boolean northGreaterThanSouth=true;    double[][] imageData=new double[numImages][11];    north=Double.NEGATIVE_INFINITY;    south=Double.POSITIVE_INFINITY;    east=Double.NEGATIVE_INFINITY;    west=Double.POSITIVE_INFINITY;    double cellSizeX=Double.POSITIVE_INFINITY;    double cellSizeY=Double.POSITIVE_INFINITY;    for (a=0; a < numImages; a++) {      imageInfo=new WhiteboxRasterInfo(imageFiles[a]);      imageData[a][0]=imageInfo.getNorth();      imageData[a][1]=imageInfo.getSouth();      imageData[a][2]=imageInfo.getEast();      imageData[a][3]=imageInfo.getWest();      imageData[a][4]=imageInfo.getNumberRows();      imageData[a][5]=imageInfo.getNumberColumns();      imageData[a][6]=imageInfo.getCellSizeX();      imageData[a][7]=imageInfo.getCellSizeY();      imageData[a][8]=imageInfo.getNoDataValue();      imageData[a][9]=imageInfo.getEast() - imageInfo.getWest();      imageData[a][10]=imageInfo.getNorth() - imageInfo.getSouth();      if (a == 0) {        if (imageData[a][0] < imageData[a][1]) {          northGreaterThanSouth=false;          north=Double.POSITIVE_INFINITY;          south=Double.NEGATIVE_INFINITY;        }        if (imageData[a][2] < imageData[a][3]) {          eastGreaterThanWest=false;          east=Double.POSITIVE_INFINITY;          west=Double.NEGATIVE_INFINITY;        }      }      if (northGreaterThanSouth) {        if (imageData[a][0] > north) {          north=imageData[a][0];        }        if (imageData[a][1] < south) {          south=imageData[a][1];        }      } else {        if (imageData[a][0] < north) {          north=imageData[a][0];        }        if (imageData[a][1] > south) {          south=imageData[a][1];        }      }      if (eastGreaterThanWest) {        if (imageData[a][2] > east) {          east=imageData[a][2];        }        if (imageData[a][3] < west) {          west=imageData[a][3];        }      } else {        if (imageData[a][2] < east) {          east=imageData[a][2];        }        if (imageData[a][3] > west) {          west=imageData[a][3];        }      }      if (imageData[a][6] < cellSizeX) {        cellSizeX=imageData[a][6];      }      if (imageData[a][7] < cellSizeY) {        cellSizeY=imageData[a][7];      }    }    nRows=(int)Math.round(Math.abs(north - south) / cellSizeY);    nCols=(int)Math.round(Math.abs(east - west) / cellSizeX);    destination=new WhiteboxRaster(destHeader,north,south,east,west,nRows,nCols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,outputNoData,outputNoData);    int nColsLessOne=nCols - 1;    int nRowsLessOne=nRows - 1;    gridResX=destination.getCellSizeX();    gridResY=destination.getCellSizeY();    double northernEdge=north - gridResY;    double westernEdge=west + gridResX;    if (north < south) {      northernEdge=north + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    double yRange=north - south - gridResY;    double xRange=east - west - gridResX;    int sourceCol, sourceRow;    if (resampleMethod.equals("nearest neighbour")) {      for (a=0; a < numImages; a++) {        image=new WhiteboxRaster(imageFiles[a],"r");        int startRow=destination.getRowFromYCoordinate(image.getNorth()) - 1;        int endRow=destination.getRowFromYCoordinate(image.getSouth()) + 1;        int startCol=destination.getColumnFromXCoordinate(image.getWest()) - 1;        int endCol=destination.getColumnFromXCoordinate(image.getEast()) + 1;        if (startRow < 0) {          startRow=0;        }        if (startCol < 0) {          startCol=0;        }        if (endRow > nRows - 1) {          endRow=nRows - 1;        }        if (endCol > nCols - 1) {          endCol=nCols - 1;        }        for (row=startRow; row <= endRow; row++) {          y=northernEdge - (yRange * row) / nRowsLessOne;          for (col=startCol; col <= endCol; col++) {            x=westernEdge + (xRange * col) / nColsLessOne;            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              sourceRow=(int)Math.round((imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5));              sourceCol=(int)Math.round((x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5));              z=image.getValue(sourceRow,sourceCol);              if (z != imageData[a][8]) {                destination.setValue(row,col,z);              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        image.close();        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * (a + 1) / numImages);        updateProgress(progress);      }    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.equals("cubic convolution")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[16][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[4][2];      }      for (a=0; a < numImages; a++) {        image=new WhiteboxRaster(imageFiles[a],"r");        int startRow=destination.getRowFromYCoordinate(image.getNorth()) - 1;        int endRow=destination.getRowFromYCoordinate(image.getSouth()) + 1;        int startCol=destination.getColumnFromXCoordinate(image.getWest()) - 1;        int endCol=destination.getColumnFromXCoordinate(image.getEast()) + 1;        if (startRow < 0) {          startRow=0;        }        if (startCol < 0) {          startCol=0;        }        if (endRow > nRows - 1) {          endRow=nRows - 1;        }        if (endCol > nCols - 1) {          endCol=nCols - 1;        }        for (row=startRow; row <= endRow; row++) {          y=northernEdge - (yRange * row) / nRowsLessOne;          for (col=startCol; col <= endCol; col++) {            x=westernEdge + (xRange * col) / nColsLessOne;            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              imageNoData=imageData[a][8];              srcRow=(imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5);              srcCol=(x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5);              originRow=Math.floor(srcRow);              originCol=Math.floor(srcCol);              sumOfDist=0;              for (i=0; i < numNeighbours; i++) {                rowN=originRow + shiftY[i];                colN=originCol + shiftX[i];                neighbour[i][0]=image.getValue((int)rowN,(int)colN);                dY=rowN - srcRow;                dX=colN - srcCol;                if ((dX + dY) != 0 && neighbour[i][0] != imageNoData) {                  neighbour[i][1]=1 / (dX * dX + dY * dY);                  sumOfDist+=neighbour[i][1];                } else                 if (neighbour[i][0] == imageNoData) {                  neighbour[i][1]=0;                } else {                  destination.setValue(row,col,neighbour[0][3]);                  break;                }              }              if (sumOfDist > 0) {                z=0;                for (i=0; i < numNeighbours; i++) {                  z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;                }                destination.setValue(row,col,z);              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        image.close();        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * (a + 1) / numImages);        updateProgress(progress);      }    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    returnData(destHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Matrix solveTranspose(Matrix B){  return transpose().solve(B.transpose());}  }
class C{  public int size(){  return used;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private void saveChanges(){  if (!isDirty()) {    return;  }  for (  CmrRepositoryDefinition cmrRepositoryDefinition : inputList.keySet()) {    if (!cmrRepositoryManager.getCmrRepositoryDefinitions().contains(cmrRepositoryDefinition)) {      cmrRepositoryManager.addCmrRepositoryDefinition(cmrRepositoryDefinition);    }  }  List<CmrRepositoryDefinition> removeList=new ArrayList<>();  for (  CmrRepositoryDefinition cmrRepositoryDefinition : cmrRepositoryManager.getCmrRepositoryDefinitions()) {    if (!inputList.keySet().contains(cmrRepositoryDefinition)) {      removeList.add(cmrRepositoryDefinition);    }  }  if (!removeList.isEmpty()) {    for (    CmrRepositoryDefinition cmrRepositoryDefinition : removeList) {      cmrRepositoryManager.removeCmrRepositoryDefinition(cmrRepositoryDefinition);    }  }  savePreferences();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYSeriesCollection clone=(XYSeriesCollection)super.clone();  clone.data=(List)ObjectUtilities.deepClone(this.data);  clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();  return clone;}  }
class C{  public double eval(double params[]){  return (params[0] * params[1] * params[2]);}  }
class C{  private static BlockBox reorderTableContent(LayoutContext c,TableBox table){  List topCaptions=new LinkedList();  Box header=null;  List bodies=new LinkedList();  Box footer=null;  List bottomCaptions=new LinkedList();  for (Iterator i=table.getChildIterator(); i.hasNext(); ) {    Box b=(Box)i.next();    IdentValue display=b.getStyle().getIdent(CSSName.DISPLAY);    if (display == IdentValue.TABLE_CAPTION) {      IdentValue side=b.getStyle().getIdent(CSSName.CAPTION_SIDE);      if (side == IdentValue.BOTTOM) {        bottomCaptions.add(b);      } else {        topCaptions.add(b);      }    } else     if (display == IdentValue.TABLE_HEADER_GROUP && header == null) {      header=b;    } else     if (display == IdentValue.TABLE_FOOTER_GROUP && footer == null) {      footer=b;    } else {      bodies.add(b);    }  }  table.removeAllChildren();  if (header != null) {    ((TableSectionBox)header).setHeader(true);    table.addChild(header);  }  table.addAllChildren(bodies);  if (footer != null) {    ((TableSectionBox)footer).setFooter(true);    table.addChild(footer);  }  if (topCaptions.size() == 0 && bottomCaptions.size() == 0) {    return table;  } else {    CalculatedStyle anonStyle;    if (table.getStyle().isFloated()) {      CascadedStyle cascadedStyle=CascadedStyle.createLayoutStyle(new PropertyDeclaration[]{CascadedStyle.createLayoutPropertyDeclaration(CSSName.DISPLAY,IdentValue.BLOCK),CascadedStyle.createLayoutPropertyDeclaration(CSSName.FLOAT,table.getStyle().getIdent(CSSName.FLOAT))});      anonStyle=table.getStyle().deriveStyle(cascadedStyle);    } else {      anonStyle=table.getStyle().createAnonymousStyle(IdentValue.BLOCK);    }    BlockBox anonBox=new BlockBox();    anonBox.setStyle(anonStyle);    anonBox.setAnonymous(true);    anonBox.setFromCaptionedTable(true);    anonBox.setElement(table.getElement());    anonBox.setChildrenContentType(BlockBox.CONTENT_BLOCK);    anonBox.addAllChildren(topCaptions);    anonBox.addChild(table);    anonBox.addAllChildren(bottomCaptions);    if (table.getStyle().isFloated()) {      anonBox.setFloatedBoxData(new FloatedBoxData());      table.setFloatedBoxData(null);      CascadedStyle original=c.getSharedContext().getCss().getCascadedStyle(table.getElement(),false);      CascadedStyle modified=CascadedStyle.createLayoutStyle(original,new PropertyDeclaration[]{CascadedStyle.createLayoutPropertyDeclaration(CSSName.FLOAT,IdentValue.NONE)});      table.setStyle(table.getStyle().getParent().deriveStyle(modified));    }    return anonBox;  }}  }
class C{  void mirror(){  for (int x=0; x < bitMatrix.getWidth(); x++) {    for (int y=x + 1; y < bitMatrix.getHeight(); y++) {      if (bitMatrix.get(x,y) != bitMatrix.get(y,x)) {        bitMatrix.flip(y,x);        bitMatrix.flip(x,y);      }    }  }}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof TypeDescriptor)) {    return false;  } else {    @SuppressWarnings("unchecked") TypeDescriptor<?> descriptor=(TypeDescriptor<?>)other;    return token.equals(descriptor.token);  }}  }
class C{  public static int discrete(int[] frequencies){  if (frequencies == null)   throw new NullPointerException("argument array is null");  long sum=0;  for (int i=0; i < frequencies.length; i++) {    if (frequencies[i] < 0)     throw new IllegalArgumentException("array entry " + i + " must be nonnegative: "+ frequencies[i]);    sum+=frequencies[i];  }  if (sum == 0)   throw new IllegalArgumentException("at least one array entry must be positive");  if (sum >= Integer.MAX_VALUE)   throw new IllegalArgumentException("sum of frequencies overflows an int");  double r=uniform((int)sum);  sum=0;  for (int i=0; i < frequencies.length; i++) {    sum+=frequencies[i];    if (sum > r)     return i;  }  assert false;  return -1;}  }
class C{  public DataNotFoundException(Serializable id){  super("Entity class not found in persistence layer, id: " + id);}  }
class C{  public static <T extends Comparable<T>>Range<T> between(final T fromInclusive,final T toInclusive){  return between(fromInclusive,toInclusive,null);}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  public ClientSocket openSticky(){  State state=_state;  if (!state.isSessionEnabled()) {    return null;  }  ClientSocket stream=openRecycle();  if (stream != null)   return stream;  long now=CurrentTime.currentTime();  if (isFailed(now)) {    return null;  }  if (isBusy(now)) {    return null;  }  return connect();}  }
class C{  public RangeHolder(){}  }
class C{  public static boolean exists(HttpServletRequest request,String parameter){  if (request == null || parameter == null)   return false;  try {    String enc=request.getCharacterEncoding();    if (enc == null)     request.setCharacterEncoding(WebEnv.ENCODING);  } catch (  Exception e) {    log.log(Level.SEVERE,"Set CharacterEncoding=" + WebEnv.ENCODING,e);  }  return exists(request.getParameter(parameter));}  }
class C{  public boolean add(final int[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public Object clone(){  GMatrix m1=null;  try {    m1=(GMatrix)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  m1.values=new double[nRow][nCol];  for (int i=0; i < nRow; i++) {    for (int j=0; j < nCol; j++) {      m1.values[i][j]=values[i][j];    }  }  return m1;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (lessOp_1: ");  result.append(lessOp_1);  result.append(')');  return result.toString();}  }
class C{  @ObjectiveCName("resetAuth") @Deprecated public void resetAuth(){  modules.getAuthModule().resetAuth();}  }
class C{  public void push(final boolean value){  push(value ? 1 : 0);}  }
class C{  public Instant toInstant(){  return new Instant(getMillis());}  }
class C{  public RequestFilesPathCommand(final int packetId,final String path){  super(DebugCommandType.CMD_LIST_FILES_PATH,packetId);  Preconditions.checkNotNull(path,"IE01010: Path argument can not be null");  addArgument(new DebugMessageRawArgument(path.getBytes()));}  }
class C{  public T face(String value){  return attr("face",value);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader;  String inputViewingStation;  String outputHeader;  int row, col, rows, cols;  int progress=0;  double z, noData, outputNoData;  double stationHeight;  double[] data;  double vertCount=1;  double horizCount;  double t1, t2, tva;  int stationRow;  int stationCol;  double x, y, dist, dZ, viewAngleValue;  double va;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputViewingStation=args[1];  outputHeader=args[2];  stationHeight=Double.parseDouble(args[3]);  if (demHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=DEM.getNoDataValue();    double stationX;    double stationY;    double stationZ;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    WhiteboxRaster viewAngle=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    viewAngle.isTemporaryFile=true;    WhiteboxRaster maxViewAngle=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    maxViewAngle.isTemporaryFile=true;    ArrayList<Double> stationXs=new ArrayList<>();    ArrayList<Double> stationYs=new ArrayList<>();    if (inputViewingStation.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputViewingStation);      if (input.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The input viewing station vector should be \n" + "of a Point or MultiPoint ShapeType.");        return;      }      for (      ShapeFileRecord record : input.records) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      stationXs.add(vertices[0][0]);    stationYs.add(vertices[0][1]);  break;case POINTZ:PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();stationXs.add(vertices[0][0]);stationYs.add(vertices[0][1]);break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();stationXs.add(vertices[0][0]);stationYs.add(vertices[0][1]);break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;}}} else if (inputViewingStation.toLowerCase().endsWith(".dep")) {WhiteboxRaster viewStation=new WhiteboxRaster(inputViewingStation,"r");int vsRows=viewStation.getNumberRows();int vsCols=viewStation.getNumberColumns();double vsNoData=viewStation.getNoDataValue();for (row=0; row < vsRows; row++) {data=viewStation.getRowValues(row);for (col=0; col < vsCols; col++) {z=data[col];if (z != vsNoData & z != 0) {stationXs.add(viewStation.getXCoordinateFromColumn(col));stationYs.add(viewStation.getXCoordinateFromColumn(row));}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (vsRows - 1));updateProgress(progress);}} else {showFeedback("Unrecognized input viewing station file type.");return;}int numStations=stationXs.size();for (int a=0; a < numStations; a++) {stationX=stationXs.get(a);stationY=stationYs.get(a);stationRow=DEM.getRowFromYCoordinate(stationY);stationCol=DEM.getColumnFromXCoordinate(stationX);stationZ=DEM.getValue(stationRow,stationCol) + stationHeight;for (row=0; row < rows; row++) {data=DEM.getRowValues(row);for (col=0; col < cols; col++) {z=data[col];if (z != noData) {x=DEM.getXCoordinateFromColumn(col);y=DEM.getYCoordinateFromRow(row);dZ=z - stationZ;dist=Math.sqrt((x - stationX) * (x - stationX) + (y - stationY) * (y - stationY));if (dist != 0.0) {viewAngleValue=dZ / dist * 1000;viewAngle.setValue(row,col,viewAngleValue);}} else {viewAngle.setValue(row,col,outputNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}for (row=stationRow - 1; row <= stationRow + 1; row++) {for (col=stationCol - 1; col <= stationCol + 1; col++) {maxViewAngle.setValue(row,col,viewAngle.getValue(row,col));}}double maxVA=viewAngle.getValue(stationRow - 1,stationCol);for (row=stationRow - 2; row >= 0; row--) {z=viewAngle.getValue(row,stationCol);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(row,stationCol,maxVA);}maxVA=viewAngle.getValue(stationRow + 1,stationCol);for (row=stationRow + 2; row < rows; row++) {z=viewAngle.getValue(row,stationCol);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(row,stationCol,maxVA);}maxVA=viewAngle.getValue(stationRow,stationCol + 1);for (col=stationCol + 2; col < cols - 1; col++) {z=viewAngle.getValue(stationRow,col);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(stationRow,col,maxVA);}maxVA=viewAngle.getValue(stationRow,stationCol - 1);for (col=stationCol - 2; col >= 0; col--) {z=viewAngle.getValue(stationRow,col);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(stationRow,col,maxVA);}for (row=stationRow - 2; row >= 0; row--) {vertCount++;horizCount=0;for (col=stationCol + 1; col <= stationCol + vertCount; col++) {if (col <= cols) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col - 1);t2=maxViewAngle.getValue(row + 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow - 2; row >= 0; row--) {vertCount++;horizCount=0;for (col=stationCol - 1; col >= stationCol - vertCount; col--) {if (col >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col + 1);t2=maxViewAngle.getValue(row + 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow + 2; row < rows; row++) {vertCount++;horizCount=0;for (col=stationCol - 1; col >= stationCol - vertCount; col--) {if (col >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col + 1);t2=maxViewAngle.getValue(row - 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow + 2; row < rows; row++) {vertCount++;horizCount=0;for (col=stationCol + 1; col <= stationCol + vertCount; col++) {if (col < cols) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col - 1);t2=maxViewAngle.getValue(row - 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol + 2; col < cols; col++) {vertCount++;horizCount=0;for (row=stationRow - 1; row >= stationRow - vertCount; row--) {if (row >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col - 1);t2=maxViewAngle.getValue(row,col - 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol + 2; col < cols; col++) {vertCount++;horizCount=0;for (row=stationRow + 1; row <= stationRow + vertCount; row++) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col - 1);t2=maxViewAngle.getValue(row,col - 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol - 2; col >= 0; col--) {vertCount++;horizCount=0;for (row=stationRow + 1; row <= stationRow + vertCount; row++) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col + 1);t2=maxViewAngle.getValue(row,col + 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol - 2; col >= 0; col--) {vertCount++;horizCount=0;for (row=stationRow - 1; row >= stationRow - vertCount; row--) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col + 1);t2=maxViewAngle.getValue(row,col + 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}viewAngle.flush();maxViewAngle.flush();double[] dataVA;for (row=0; row < rows; row++) {dataVA=viewAngle.getRowValues(row);data=maxViewAngle.getRowValues(row);for (col=0; col < cols; col++) {if (data[col] <= dataVA[col] && dataVA[col] != outputNoData) {output.setValue(row,col,output.getValue(row,col) + 1);} else if (dataVA[col] == outputNoData) {output.setValue(row,col,outputNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}}viewAngle.close();maxViewAngle.close();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public double deltaX(){  return sym.orig.x - orig.x;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.LOGICAL_NOT_EXPRESSION__OPERAND:    return operand != null;}return super.eIsSet(featureID);}  }
class C{  public static boolean isTemplateCall(RDFNode node){  TemplateCall templateCall=asTemplateCall(node);  return templateCall != null && templateCall.getTemplate() != null;}  }
class C{  private String extractIdentifier(DrbNode productNode,DrbCortexItemClass productClass){  java.util.Collection<String> properties=null;  properties=productClass.listPropertyStrings(METADATA_NAMESPACE + PROPERTY_IDENTIFIER,false);  if (properties == null) {    LOGGER.warn("Item \"" + productClass.getLabel() + "\" has no identifier defined.");    return null;  }  String property=properties.iterator().next();  property=property.replaceAll("&lt;","<");  property=property.replaceAll("&gt;",">");  Query query=new Query(property);  DrbSequence sequence=query.evaluate(productNode);  if ((sequence == null) || (sequence.getLength() < 1)) {    return null;  }  String identifier=sequence.getItem(0).toString();  return identifier;}  }
class C{  public FillArrayDataPayloadDecodedInstruction(InstructionCodec format,int opcode,int[] data){  this(format,opcode,data,data.length,4);}  }
class C{  private int populate(Tree tree,NodeRef node,int[] current,double mutationRate){  int nodeNumber=node.getNumber();  if (tree.isExternal(node)) {    iTau[nodeNumber]=(tree.getNodeHeight(tree.getParent(node)) - tree.getNodeHeight(node)) * mutationRate;    return nodeNumber;  }  int[] childNumbers=new int[tree.getChildCount(node)];  for (int i=0; i < tree.getChildCount(node); i++) {    childNumbers[i]=populate(tree,tree.getChild(node,i),current,mutationRate);  }  nodeNumber=current[0];  if (!tree.isRoot(node)) {    iTau[nodeNumber]=(tree.getNodeHeight(tree.getParent(node)) - tree.getNodeHeight(node)) * mutationRate;  }  current[0]+=1;  for (int i=0; i < tree.getChildCount(node); i++) {    iParent[childNumbers[i]]=nodeNumber;  }  return nodeNumber;}  }
class C{  public void showParamPanel(AbstractParamPanel panel,String name){  this.getJSplitPane().showParamPanel(panel,name);}  }
class C{  public static float convertDpToPixel(float dp){  if (mMetrics == null) {    Log.e("MPChartLib-Utils","Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before calling Utils.convertDpToPixel(...). Otherwise conversion does not take place.");    return dp;  }  DisplayMetrics metrics=mMetrics;  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new GridBagLayout());  final JLabel label1=new JLabel();  this.$$$loadLabelText$$$(label1,ResourceBundle.getBundle("org/apache/zest/envisage/detail/ServiceConfigurationPane").getString("CTL_Name.Text"));  GridBagConstraints gbc;  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=1;  gbc.anchor=GridBagConstraints.EAST;  contentPane.add(label1,gbc);  final JPanel spacer1=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=1;  gbc.gridy=1;  gbc.fill=GridBagConstraints.HORIZONTAL;  contentPane.add(spacer1,gbc);  final JPanel spacer2=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=2;  gbc.fill=GridBagConstraints.VERTICAL;  contentPane.add(spacer2,gbc);  nameLabel=new JLabel();  nameLabel.setText("Label");  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=1;  gbc.anchor=GridBagConstraints.WEST;  contentPane.add(nameLabel,gbc);  final JPanel spacer3=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=8;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.VERTICAL;  contentPane.add(spacer3,gbc);  final JLabel label2=new JLabel();  this.$$$loadLabelText$$$(label2,ResourceBundle.getBundle("org/apache/zest/envisage/detail/ServiceConfigurationPane").getString("CTL_Class.Text"));  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=3;  gbc.anchor=GridBagConstraints.EAST;  contentPane.add(label2,gbc);  classLabel=new JLabel();  classLabel.setText("Label");  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=3;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.WEST;  contentPane.add(classLabel,gbc);  final JPanel spacer4=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=4;  gbc.fill=GridBagConstraints.VERTICAL;  contentPane.add(spacer4,gbc);  linkButton=new JButton();  this.$$$loadButtonText$$$(linkButton,ResourceBundle.getBundle("org/apache/zest/envisage/detail/ServiceConfigurationPane").getString("CTL_Link.Text"));  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=7;  gbc.anchor=GridBagConstraints.WEST;  contentPane.add(linkButton,gbc);  final JPanel spacer5=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.fill=GridBagConstraints.VERTICAL;  contentPane.add(spacer5,gbc);  final JLabel label3=new JLabel();  this.$$$loadLabelText$$$(label3,ResourceBundle.getBundle("org/apache/zest/envisage/detail/ServiceConfigurationPane").getString("CTL_Type.Text"));  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=5;  gbc.anchor=GridBagConstraints.EAST;  contentPane.add(label3,gbc);  typeLabel=new JLabel();  typeLabel.setText("Label");  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=5;  gbc.anchor=GridBagConstraints.WEST;  contentPane.add(typeLabel,gbc);  final JPanel spacer6=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=6;  gbc.fill=GridBagConstraints.VERTICAL;  contentPane.add(spacer6,gbc);}  }
class C{  private boolean saveStoredImage(final String format,final String ending1,final String ending2,String current_image,BufferedImage image,final boolean file_name_is_path){  boolean was_error=false;  current_image=removeIllegalFileNameCharacters(current_image);  String file_name=current_image;  if (!file_name_is_path) {    file_name=temp_dir + key + current_image;  }  final String s=file_name.toLowerCase();  if (!s.endsWith(ending1) && !s.endsWith(ending2)) {    file_name+=ending1;  }  try {    DefaultImageHelper.write(image,format,file_name);    tempFileNames.put(file_name,"#");  } catch (  final Exception e) {    LogWriter.writeLog(" Exception " + e + " writing image "+ image+ " with type "+ image.getType());    was_error=true;  }catch (  final Error ee) {    LogWriter.writeLog("Error " + ee + " writing image "+ image+ " with type "+ image.getType());    was_error=true;  }  return was_error;}  }
class C{  Part(String contents,String property) throws Exception {  this.contents=" " + contents;  this.property=property;  simplify();}  }
class C{  public CIMInstanceRecordableDeviceEvent(DbClient dbClient){  super(dbClient);}  }
class C{  @LargeTest public void testDownloadToExternal() throws Exception {  String localDownloadDirectory=Environment.getExternalStorageDirectory().getPath();  File downloadedFile=new File(localDownloadDirectory,DEFAULT_FILENAME);  downloadedFile.delete();  try {    byte[] blobData=generateData(DEFAULT_FILE_SIZE,DataType.TEXT);    enqueueResponse(buildResponse(HTTP_OK,blobData));    Uri uri=getServerUri(DEFAULT_FILENAME);    Request request=new Request(uri);    Uri localUri=Uri.fromFile(downloadedFile);    request.setDestinationUri(localUri);    long dlRequest=mDownloadManager.enqueue(request);    waitForDownloadOrTimeout(dlRequest);    verifyAndCleanupSingleFileDownload(dlRequest,blobData);    assertEquals(1,mReceiver.numDownloadsCompleted());  }  finally {    downloadedFile.delete();  }}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  public static boolean isPrivate(int mod){  return (mod & PRIVATE) != 0;}  }
class C{  private ShortCutUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public Builder cacheOnDisk(boolean cacheOnDisk){  this.cacheOnDisk=cacheOnDisk;  return this;}  }
class C{  protected void paintDeterminate(Graphics g,JComponent c){  if (!(g instanceof Graphics2D)) {    return;  }  Insets b=progressBar.getInsets();  int barRectWidth=progressBar.getWidth() - (b.right + b.left);  int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);  if (barRectWidth <= 0 || barRectHeight <= 0) {    return;  }  int cellLength=getCellLength();  int cellSpacing=getCellSpacing();  int amountFull=getAmountFull(b,barRectWidth,barRectHeight);  Graphics2D g2=(Graphics2D)g;  g2.setColor(progressBar.getForeground());  if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {    if (cellSpacing == 0 && amountFull > 0) {      g2.setStroke(new BasicStroke((float)barRectHeight,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL));    } else {      g2.setStroke(new BasicStroke((float)barRectHeight,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0.f,new float[]{cellLength,cellSpacing},0.f));    }    if (BasicGraphicsUtils.isLeftToRight(c)) {      g2.drawLine(b.left,(barRectHeight / 2) + b.top,amountFull + b.left,(barRectHeight / 2) + b.top);    } else {      g2.drawLine((barRectWidth + b.left),(barRectHeight / 2) + b.top,barRectWidth + b.left - amountFull,(barRectHeight / 2) + b.top);    }  } else {    if (cellSpacing == 0 && amountFull > 0) {      g2.setStroke(new BasicStroke((float)barRectWidth,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL));    } else {      g2.setStroke(new BasicStroke((float)barRectWidth,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0f,new float[]{cellLength,cellSpacing},0f));    }    g2.drawLine(barRectWidth / 2 + b.left,b.top + barRectHeight,barRectWidth / 2 + b.left,b.top + barRectHeight - amountFull);  }  if (progressBar.isStringPainted()) {    paintString(g,b.left,b.top,barRectWidth,barRectHeight,amountFull,b);  }}  }
class C{  public OutputStream createStreamsAndStartThreads() throws IOException {  if (mIndexerFactory == null) {    throw new UnsupportedOperationException("This method is not for use with BAM writing");  }  return createStreamsAndStartThreads(-1,true,false);}  }
class C{  @Nullable private Color toColor(String value) throws IOException {  String str=value;  if (str == null) {    return null;  }  if (str.startsWith("#") && str.length() == 7) {    return new Color(Integer.decode(str));  } else {    return null;  }}  }
class C{  private TimeoutEvictionTimer(){}  }
class C{  protected void selfLocate() throws ConfigException {  resolveFqdn();  clearLog();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("AD_Client_ID"))     m_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_Org_ID"))     m_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeleteOldImported"))     m_deleteOldImported="Y".equals(para[i].getParameter()); else     if (name.equals("DocAction"))     m_docAction=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (m_DateValue == null)   m_DateValue=new Timestamp(System.currentTimeMillis());}  }
class C{  public static ByteBuffer decode(PDFObject dict,ByteBuffer buf,PDFObject params) throws IOException {  Inflater inf=new Inflater(false);  int bufSize=buf.remaining();  byte[] data=null;  if (buf.hasArray()) {    data=buf.array();    inf.setInput(data,buf.arrayOffset() + buf.position(),bufSize);    buf.position(buf.position() + bufSize);  } else {    data=new byte[bufSize];    buf.get(data);    inf.setInput(data);  }  ByteArrayOutputStream baos=new ByteArrayOutputStream();  byte[] decomp=new byte[bufSize];  int read=0;  try {    while (!inf.finished()) {      read=inf.inflate(decomp);      if (read <= 0) {        if (inf.needsDictionary()) {          throw new PDFParseException("Don't know how to ask for a dictionary in FlateDecode");        } else {          return ByteBuffer.allocate(0);        }      }      baos.write(decomp,0,read);    }  } catch (  DataFormatException dfe) {    throw new PDFParseException("Data format exception:" + dfe.getMessage());  }  ByteBuffer outBytes=ByteBuffer.wrap(baos.toByteArray());  if (params != null && params.getDictionary().containsKey("Predictor")) {    Predictor predictor=Predictor.getPredictor(params);    if (predictor != null) {      outBytes=predictor.unpredict(outBytes);    }  }  return outBytes;}  }
class C{  protected double computeDetailThreshold(){  double detailThreshold=20;  double rangeDetailThreshold=40;  detailThreshold+=this.getDetailHint() * rangeDetailThreshold;  return detailThreshold;}  }
class C{  private static double roundUp(final double val){  int exponent=(int)Math.floor(Math.log10(val));  double rval=val * Math.pow(10,-exponent);  if (rval > 5.0) {    rval=10.0;  } else   if (rval > 2.0) {    rval=5.0;  } else   if (rval > 1.0) {    rval=2.0;  }  rval*=Math.pow(10,exponent);  return rval;}  }
class C{  protected void refreshTheme(String id,boolean merge){  UIManager manager=getUIManager();  if (merge) {    Style unSelected=getUnselectedStyle();    setUnselectedStyle(mergeStyle(unSelected,manager.getComponentStyle(id)));    if (selectedStyle != null) {      setSelectedStyle(mergeStyle(selectedStyle,manager.getComponentSelectedStyle(id)));    }    if (disabledStyle != null) {      setDisabledStyle(mergeStyle(disabledStyle,manager.getComponentCustomStyle(id,"dis")));    }    if (pressedStyle != null) {      setPressedStyle(mergeStyle(pressedStyle,manager.getComponentCustomStyle(id,"press")));    }  } else {    unSelectedStyle=null;    unSelectedStyle=getUnselectedStyle();    selectedStyle=null;    disabledStyle=null;    pressedStyle=null;    allStyles=null;  }  checkAnimation();  manager.getLookAndFeel().bind(this);}  }
class C{  public static byte[] newBytes(int len){  if (len == 0) {    return EMPTY_BYTES;  }  try {    return new byte[len];  } catch (  OutOfMemoryError e) {    Error e2=new OutOfMemoryError("Requested memory: " + len);    e2.initCause(e);    throw e2;  }}  }
class C{  public void startTracking(){  init();  intAnalytics();  MapHandler.getMapHandler().startTrack();  isOnTracking=true;}  }
class C{  public XYLineAndShapeRenderer(){  this(true,true);}  }
class C{  boolean canSendSurroundings(@Nullable URL baseContentViewUrl){  if (isUserUndecided())   return false;  if (isPromoAvailable()) {    return isBasePageHTTP(baseContentViewUrl);  }  return true;}  }
class C{  public boolean isGroup(){  return group;}  }
class C{  public static boolean is18OrHigher(IJavaProject project){  return is18OrHigher(getSourceCompliance(project));}  }
class C{  public Quaternionf rotateAxis(float angle,float axisX,float axisY,float axisZ){  return rotateAxis(angle,axisX,axisY,axisZ,this);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void markPotentiallyUnknownBit(LocalVariableBinding local){  if (this != DEAD_END) {    this.tagBits|=NULL_FLAG_MASK;    int position;    long mask;    if ((position=local.id + this.maxFieldCount) < BitCacheSize) {      mask=1L << position;      isTrue((this.nullBit1 & mask) == 0,"Adding 'unknown' mark in unexpected state");      this.nullBit4|=mask;      if (COVERAGE_TEST_FLAG) {        if (CoverageTestId == 46) {          this.nullBit4=~0;        }      }    } else {      int vectorIndex=(position / BitCacheSize) - 1;      if (this.extra == null) {        int length=vectorIndex + 1;        this.extra=new long[extraLength][];        for (int j=0; j < extraLength; j++) {          this.extra[j]=new long[length];        }      } else {        int oldLength;        if (vectorIndex >= (oldLength=this.extra[0].length)) {          for (int j=0; j < extraLength; j++) {            System.arraycopy(this.extra[j],0,(this.extra[j]=new long[vectorIndex + 1]),0,oldLength);          }        }      }      mask=1L << (position % BitCacheSize);      isTrue((this.extra[2][vectorIndex] & mask) == 0,"Adding 'unknown' mark in unexpected state");      this.extra[5][vectorIndex]|=mask;      if (COVERAGE_TEST_FLAG) {        if (CoverageTestId == 47) {          this.extra[5][vectorIndex]=~0;        }      }    }  }}  }
class C{  public static String deepCopy(final String s){  return new String(s);}  }
class C{  public boolean handleMessage(Message m,Object o){  if (!super.handleMessage(m,o)) {    if (m.getType().equals(MasterAgent.M_EVALUATE)) {      output.message("EvaluatorData received from " + m.getSender().name);      ((EvaluatorData)o).sender=m.getSender();      mailbox.add(o);    } else     if (m.getType().equals(MasterAgent.M_END_EXPERIMENT)) {      output.message("End experiment message received from " + m.getSender().name);      shouldLive=false;    } else     return false;  }  return true;}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static void appendDate(StringBuilder buff,long dateValue){  int y=DateTimeUtils.yearFromDateValue(dateValue);  int m=DateTimeUtils.monthFromDateValue(dateValue);  int d=DateTimeUtils.dayFromDateValue(dateValue);  if (y > 0 && y < 10000) {    StringUtils.appendZeroPadded(buff,4,y);  } else {    buff.append(y);  }  buff.append('-');  StringUtils.appendZeroPadded(buff,2,m);  buff.append('-');  StringUtils.appendZeroPadded(buff,2,d);}  }
class C{  public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {  VLookup source=(VLookup)evt.getSource();  Object value=evt.getNewValue();  log.info("Value=" + value);  if (source.equals(fUser)) {    if (value == null)     fTo.setText("");    if (value instanceof Integer) {      int AD_User_ID=((Integer)value).intValue();      m_user=MUser.get(Env.getCtx(),AD_User_ID);      fTo.setValue(m_user.getEMail());    }  } else {    if (value == null)     fCc.setText("");    if (value instanceof Integer) {      int AD_User_ID=((Integer)value).intValue();      m_ccuser=MUser.get(Env.getCtx(),AD_User_ID);      fCc.setValue(m_ccuser.getEMail());    }  }}  }
class C{  @Override public VeriniceSearchResult query(VeriniceQuery query,String elementTypeId){  long startTime=System.currentTimeMillis();  ServerInitializer.inheritVeriniceContextState();  VeriniceSearchResult results=new VeriniceSearchResult();  if (StringUtils.isNotEmpty(elementTypeId)) {    results.addVeriniceSearchTable(processSearchResponse(elementTypeId,searchDao.find(elementTypeId,query),query.getLimit()));    if (LOG.isDebugEnabled()) {      LOG.debug("Time for executing query( " + query.getQuery() + ", "+ elementTypeId+ "):\t"+ String.valueOf((System.currentTimeMillis() - startTime) / 1000)+ " seconds");    }  } else {    for (    EntityType type : HUITypeFactory.getInstance().getAllEntityTypes()) {      results.addVeriniceSearchTable(processSearchResponse(type.getId(),searchDao.find(type.getId(),query),query.getLimit()));    }    if (LOG.isDebugEnabled()) {      LOG.debug("Time for executing query( " + query.getQuery() + ", <allTypeIds>):\t"+ String.valueOf((System.currentTimeMillis() - startTime) / 1000)+ " seconds");    }  }  return results;}  }
class C{  private K highestKey(){  ConcurrentSkipListMap.Node<K,V> n=hiNode();  if (n != null) {    K last=n.key;    if (inBounds(last))     return last;  }  throw new NoSuchElementException();}  }
class C{  @Override void writeStreamBlob(OutputStream os,byte[] buffer,int rowOffset,byte[] blobBuffer,PageServiceImpl tableService) throws IOException {  int offset=rowOffset + offset();  int blobLen=BitsUtil.readInt16(buffer,offset + 2);  int blobOffset=BitsUtil.readInt16(buffer,offset);  if (blobLen == 0) {    BitsUtil.writeInt(os,0);    return;  }  if (isLargeBlob(blobLen)) {    int blobId=BitsUtil.readInt(blobBuffer,blobOffset);    ArrayList<PageBlob> blobList=new ArrayList<>();    while (blobId > 0) {      PageBlob page=tableService.getBlobPage(blobId);      blobList.add(page);      blobId=page.getNextId();    }    for (int i=0; i < blobList.size(); i++) {      PageBlob page=blobList.get(i);      int length=page.getLength();      if ((length & 0xc000_0000) != 0) {        throw new IllegalStateException(L.l("Unexpected blob length {0} for {1}",length,page));      }      if (i + 1 < blobList.size()) {        length|=BLOB_CONT_MASK;      }      BitsUtil.writeInt(os,length);      page.writeToStream(os);    }  } else {    BitsUtil.writeInt(os,blobLen);    os.write(blobBuffer,blobOffset,blobLen);  }}  }
class C{  public float[] array(){  if (array == null) {    array=new float[3];  }  array[0]=x;  array[1]=y;  array[2]=z;  return array;}  }
class C{  public void java_io_ObjectOutputStream_getObjectFieldValue(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  private void jbInit() throws Exception {  centerPanel.setBorder(BorderFactory.createRaisedBevelBorder());  getContentPane().add(mainPanel);  mainPanel.setLayout(mainLayout);  mainPanel.add(centerPanel,BorderLayout.CENTER);  northPanel.setLayout(northLayout);  paymentLabel.setText(Msg.translate(Env.getCtx(),"PaymentRule"));  mainPanel.add(northPanel,BorderLayout.NORTH);  northPanel.add(paymentLabel,null);  northPanel.add(paymentCombo,null);  centerPanel.setLayout(centerLayout);  kPanel.setLayout(kLayout);  kNumberField.setPreferredSize(new Dimension(160,21));  kNameField.setPreferredSize(new Dimension(160,21));  kExpField.setPreferredSize(new Dimension(40,21));  kApprovalField.setPreferredSize(new Dimension(120,21));  kTypeLabel.setText(Msg.translate(Env.getCtx(),"CreditCardType"));  kNumberLabel.setText(Msg.translate(Env.getCtx(),"CreditCardNumber"));  kNameLabel.setText(Msg.translate(Env.getCtx(),"Name"));  kExpLabel.setText(Msg.getMsg(Env.getCtx(),"Expires"));  kApprovalLabel.setText(Msg.translate(Env.getCtx(),"VoiceAuthCode"));  kAmountLabel.setText(Msg.getMsg(Env.getCtx(),"Amount"));  kOnline.setText(Msg.getMsg(Env.getCtx(),"Online"));  kOnline.addActionListener(this);  kStatus.setText(" ");  centerPanel.add(kPanel,"kPanel");  centerLayout.addLayoutComponent(kPanel,"kPanel");  kPanel.add(kTypeLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,0),0,0));  kPanel.add(kTypeCombo,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  kPanel.add(kNumberLabel,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,0),0,0));  kPanel.add(kNumberField,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.VERTICAL,new Insets(2,5,2,5),0,0));  kPanel.add(kNameLabel,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,0),0,0));  kPanel.add(kNameField,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.VERTICAL,new Insets(2,5,2,5),0,0));  kPanel.add(kExpLabel,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,0),0,0));  kPanel.add(kExpField,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  kPanel.add(kAmountLabel,new GridBagConstraints(0,4,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,5,0),0,0));  kPanel.add(kAmountField,new GridBagConstraints(1,4,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,5,5,5),0,0));  kPanel.add(kApprovalLabel,new GridBagConstraints(0,5,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,0),0,0));  kPanel.add(kApprovalField,new GridBagConstraints(1,5,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  kPanel.add(kStatus,new GridBagConstraints(0,6,2,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  kPanel.add(kOnline,new GridBagConstraints(2,5,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  tPanel.setLayout(tPanelLayout);  tAccountLabel.setText(Msg.translate(Env.getCtx(),"C_BP_BankAccount_ID"));  tRoutingField.setColumns(8);  tNumberField.setColumns(10);  tRoutingText.setText(Msg.translate(Env.getCtx(),"RoutingNo"));  tNumberText.setText(Msg.translate(Env.getCtx(),"AccountNo"));  tOnline.setText(Msg.getMsg(Env.getCtx(),"Online"));  tStatus.setText(" ");  centerPanel.add(tPanel,"tPanel");  centerLayout.addLayoutComponent(tPanel,"tPanel");  tPanel.add(tAccountLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,0),0,0));  tPanel.add(tAccountCombo,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  tPanel.add(tRoutingField,new GridBagConstraints(1,1,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  tPanel.add(tNumberField,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  tPanel.add(tStatus,new GridBagConstraints(0,3,2,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  tPanel.add(tRoutingText,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,0),0,0));  tPanel.add(tNumberText,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,0),0,0));  tPanel.add(tOnline,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.NORTHEAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  sPanel.setLayout(sPanelLayout);  sBankAccountLabel.setText(Msg.translate(Env.getCtx(),"C_BankAccount_ID"));  sAmountLabel.setText(Msg.getMsg(Env.getCtx(),"Amount"));  sRoutingLabel.setText(Msg.translate(Env.getCtx(),"RoutingNo"));  sNumberLabel.setText(Msg.translate(Env.getCtx(),"AccountNo"));  sCheckLabel.setText(Msg.translate(Env.getCtx(),"CheckNo"));  sCheckField.setColumns(8);  sCurrencyLabel.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  sNumberField.setPreferredSize(new Dimension(100,21));  sRoutingField.setPreferredSize(new Dimension(70,21));  sStatus.setText(" ");  sOnline.setText(Msg.getMsg(Env.getCtx(),"Online"));  centerPanel.add(sPanel,"sPanel");  centerLayout.addLayoutComponent(sPanel,"sPanel");  sPanel.add(sBankAccountLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,2,0),0,0));  sPanel.add(sBankAccountCombo,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  sPanel.add(sCurrencyLabel,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,0),0,0));  sPanel.add(sCurrencyCombo,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  sPanel.add(sAmountLabel,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,5,0),0,0));  sPanel.add(sAmountField,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,5,5,5),0,0));  sPanel.add(sRoutingLabel,new GridBagConstraints(0,3,1,2,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,0,2,0),0,0));  sPanel.add(sRoutingField,new GridBagConstraints(1,3,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,2,0),0,0));  sPanel.add(sNumberLabel,new GridBagConstraints(0,5,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,0),0,0));  sPanel.add(sNumberField,new GridBagConstraints(1,5,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,2,0),0,0));  sPanel.add(sCheckLabel,new GridBagConstraints(0,6,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,0),0,0));  sPanel.add(sCheckField,new GridBagConstraints(1,6,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,5,2,0),0,0));  sPanel.add(sOnline,new GridBagConstraints(3,6,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  sPanel.add(sStatus,new GridBagConstraints(0,7,3,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  pPanel.setLayout(pPanelLayout);  pTermLabel.setText(Msg.translate(Env.getCtx(),"C_PaymentTerm_ID"));  centerPanel.add(pPanel,"pPanel");  centerLayout.addLayoutComponent(pPanel,"pPanel");  pPanel.add(pTermLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,5,2,0),0,0));  pPanel.add(pTermCombo,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  bCurrencyLabel.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  bPanel.setLayout(bPanelLayout);  bAmountLabel.setText(Msg.getMsg(Env.getCtx(),"Amount"));  bDateLabel.setText(Msg.translate(Env.getCtx(),"DateAcct"));  centerLayout.addLayoutComponent(bPanel,"bPanel");  centerPanel.add(bPanel,"bPanel");  if (m_Cash_As_Payment) {    sBankAccountLabel.setText(Msg.translate(Env.getCtx(),"C_BankAccount_ID"));    bPanel.add(sBankAccountLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,0),0,0));    bPanel.add(sBankAccountCombo,new GridBagConstraints(1,0,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  } else {    bCashBookLabel.setText(Msg.translate(Env.getCtx(),"C_CashBook_ID"));    bPanel.add(bCashBookLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,0),0,0));    bPanel.add(bCashBookCombo,new GridBagConstraints(1,0,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  }  bPanel.add(bCurrencyLabel,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,0,2,0),0,0));  bPanel.add(bCurrencyCombo,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,5,2,5),0,0));  bPanel.add(bDateLabel,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,2,0),0,0));  bPanel.add(bDateField,new GridBagConstraints(1,2,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  bPanel.add(bAmountLabel,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,2,0),0,0));  bPanel.add(bAmountField,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,2,5),0,0));  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);}  }
class C{  @Nonnull public static String joinToStr(List<String> joinList){  if (CollectionUtils.isEmpty(joinList)) {    return "";  }  return Joiner.on("\n").join(joinList);}  }
class C{  public boolean isRoot(){  return chunk == null;}  }
class C{  @SuppressWarnings("unchecked") public S removeChild(S child){  children.remove(child);  child.setParent(Optional.empty());  return (S)this;}  }
class C{  private static boolean scanArgs(String[] args,String value){  if (args != null) {    for (    String arg : args) {      if (value.equals(arg)) {        return true;      }    }  }  return false;}  }
class C{  public T caseDirective_(Directive_ object){  return null;}  }
class C{  public void tickFlying(){  if (getIsCritical()) {    for (int i=0; i < 4; ++i) {      worldObj.spawnParticle(EnumParticleTypes.CRIT,posX + motionX * (double)i / 4.0D,posY + motionY * (double)i / 4.0D,posZ + motionZ * (double)i / 4.0D,-motionX,-motionY + 0.2D,-motionZ);    }  }}  }
class C{  public final void testHasStableIds(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter proxySpinnerAdapter=createAdapter(entries);  assertEquals(proxySpinnerAdapter.getAdapter().hasStableIds(),proxySpinnerAdapter.hasStableIds());}  }
class C{  public Block obtainBlock(String prototypeName,@Nullable String uuid){  Block block;  if (uuid != null) {    WeakReference<Block> ref=mBlockRefs.get(uuid);    if (ref != null) {      block=ref.get();      if (block != null) {        throw new IllegalArgumentException("Block with given UUID \"" + uuid + "\" already exists. Duplicate UUIDs not allowed.");      }    }  }  if (!mBlockTemplates.containsKey(prototypeName)) {    Log.w(TAG,"Block " + prototypeName + " not found.");    return null;  }  Block.Builder builder=new Block.Builder(mBlockTemplates.get(prototypeName));  if (uuid != null) {    builder.setUuid(uuid);  }  block=builder.build();  mBlockRefs.put(block.getId(),new WeakReference<Block>(block));  return block;}  }
class C{  public void updateHashForGroup(final String hash,final String groupName){  notNull(groupName);  this.currentHash=hash;  if (isChangedHash()) {    LOG.debug("Group {} has changed",groupName);    groups.clear();  }}  }
class C{  public void updateComboBox(JComboBox<Schedule> box){  box.removeAllItems();  box.addItem(null);  for (  Schedule schedule : getSchedulesByNameList()) {    box.addItem(schedule);  }}  }
class C{  public InstrumentationException(){}  }
class C{  public void installStubs(){  if (mainModule instanceof AbstractCOFFModule) {    stubLibrary=new Win32StubLibrary(arch);  } else   if (mainModule instanceof ELFModule) {    stubLibrary=new LinuxStubLibrary(arch);  }  Iterator<UnresolvedSymbol> sIter=unresolvedSymbols.iterator();  while (sIter.hasNext()) {    UnresolvedSymbol unresolvedSymbol=sIter.next();    AbsoluteAddress address=stubLibrary.resolveSymbol(unresolvedSymbol.getFromLibrary(),unresolvedSymbol.getName());    if (address != null) {      unresolvedSymbol.resolve(address);      sIter.remove();    }  }  if (!unresolvedSymbols.isEmpty())   logger.warn("Unresolved symbols remaining: " + unresolvedSymbols);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  Properties ctx=JSPEnv.getCtx(request);  org.compiere.util.WebLogin thisLogin=new org.compiere.util.WebLogin(request,response,ctx);  thisLogin.init();  if (WebUtil.getParameter(request,"Mode") == null)   if (WebUtil.getParameter(request,"mode") != null)   thisLogin.setP_Action("mode");  thisLogin.action();  if ("logout".equals(thisLogin.getMode()))   return;  String url=thisLogin.getLogin_RelURL();  if (!url.startsWith("/"))   url="/" + url;  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);  return;}  }
class C{  public void removeParticipantStatusListener(ParticipantStatusListener listener){synchronized (participantStatusListeners) {    participantStatusListeners.remove(listener);  }}  }
class C{  private T[] ensureCapacity(int minCapacity){  if (tmpLen < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings("unchecked") T[] newArray=(T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),newSize);    tmp=newArray;    tmpLen=newSize;    tmpBase=0;  }  return tmp;}  }
class C{  private void mainLoop(){  while (true) {    try {      TimerTask task;      boolean taskFired;synchronized (queue) {        while (queue.isEmpty() && newTasksMayBeScheduled)         queue.wait();        if (queue.isEmpty())         break;        long currentTime, executionTime;        task=queue.getMin();synchronized (task.lock) {          if (task.state == TimerTask.CANCELLED) {            queue.removeMin();            continue;          }          currentTime=System.currentTimeMillis();          executionTime=task.nextExecutionTime;          if (taskFired=(executionTime <= currentTime)) {            if (task.period == 0) {              queue.removeMin();              task.state=TimerTask.EXECUTED;            } else {              queue.rescheduleMin(task.period < 0 ? currentTime - task.period : executionTime + task.period);            }          }        }        if (!taskFired)         queue.wait(executionTime - currentTime);      }      if (taskFired)       task.run();    } catch (    InterruptedException e) {    }  }}  }
class C{  public final double lnFunc(double num){  if (num < 1e-6)   return 0; else   return ContingencyTables.lnFunc(num);}  }
class C{  public static NumericDolphinBinder<Float> bindFloat(Property<Float> property){  requireNonNull(property,"property");  return new FloatDolphinBinder(property);}  }
class C{  public static <T>T newInstance(Class<T> clazz,boolean constructorCalled){  if (constructorCalled) {    try {      return clazz.newInstance();    } catch (    Exception e) {      JUnsafe.throwException(e);    }  } else {    return objenesis.newInstance(clazz);  }  return null;}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public ZAddParams ch(){  addParam(CH);  return this;}  }
class C{  public static SipRequest createRefer(SipDialogPath dialog,Uri toContact,String subject,String contributionId) throws PayloadException {  try {    Request refer=dialog.getStackDialog().createRequest(Request.REFER);    String[] tags={FeatureTags.FEATURE_OMA_IM};    SipUtils.setFeatureTags(refer,tags);    refer.addHeader(SipUtils.HEADER_FACTORY.createHeader(ReferToHeader.NAME,toContact.toString()));    refer.addHeader(SipUtils.HEADER_FACTORY.createHeader(SipUtils.HEADER_REFER_SUB,"false"));    setPPreferedIdentityHeader(refer);    if (subject != null) {      Header sub=SipUtils.HEADER_FACTORY.createHeader(Subject.NAME,subject);      refer.addHeader(sub);    }    refer.addHeader(SipUtils.HEADER_FACTORY.createHeader(ChatUtils.HEADER_CONTRIBUTION_ID,contributionId));    refer.addHeader(SipUtils.buildUserAgentHeader());    ViaHeader viaHeader=(ViaHeader)refer.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    String remoteInstanceId=dialog.getRemoteSipInstance();    if (remoteInstanceId != null) {      SipUtils.setRemoteInstanceID(refer,remoteInstanceId);    }    return new SipRequest(refer);  } catch (  ParseException|SipException e) {    throw new PayloadException("Can't create SIP REFER for contact '" + toContact + "' with contributionId : "+ contributionId,e);  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Feed.registerMetadata(registry);  ElementCreator builder=registry.build(KEY);  builder.addUndeclaredElementMarker();  builder.addElement(MessageEntry.KEY);  registry.adapt(Feed.KEY,KIND,KEY);}  }
class C{  public String globalInfo(){  return "Adds the labels from the given list to an attribute if they are " + "missing. The labels can also be sorted in an ascending manner. " + "If no labels are provided then only the (optional) sorting applies.";}  }
class C{  @Override protected void doPreRender(KMLTraversalContext tc,DrawContext dc){  this.beginRendering(tc,dc);  try {    this.preRenderFeatures(tc,dc);  }  finally {    this.endRendering(tc,dc);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.173 -0400",hash_original_method="E1B6DB66C36B4EE9F064117D3D6BA6B4",hash_generated_method="AC5C44ABDAD7281CAC600A23E1C28402") public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception ignored) {  }  try {    return file.delete();  } catch (  Exception ignored) {    return false;  }}  }
class C{  public short readSI16() throws IOException {  synchBits();  int lowerByte=in.read();  if (lowerByte < 0) {    throw new IOException("Unexpected end of input");  }  byte[] aByte=new byte[1];  int count=in.read(aByte);  if (count < 1) {    throw new IOException("Unexpected end of input");  }  bytesRead+=2;  return (short)((aByte[0] * 256) + lowerByte);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SnapshotId snapshotId(){  return this.snapshotId;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 150) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  protected boolean preClose(String actionId){  return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TFUNCTION__AST_ELEMENT:    if (resolve)     return getAstElement();  return basicGetAstElement();case TypesPackage.TFUNCTION__EXTERNAL:return isExternal();case TypesPackage.TFUNCTION__FPARS:return getFpars();case TypesPackage.TFUNCTION__RETURN_TYPE_REF:return getReturnTypeRef();case TypesPackage.TFUNCTION__TYPE_VARS:return getTypeVars();case TypesPackage.TFUNCTION__DECLARED_THIS_TYPE:return getDeclaredThisType();case TypesPackage.TFUNCTION__DECLARED_ASYNC:return isDeclaredAsync();case TypesPackage.TFUNCTION__CONSTRUCTOR:return isConstructor();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public CF9(int numberOfVariables){  super(numberOfVariables,3,1);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segments[k];    seg.lock();    try {      HashEntry<K,V>[] tab=seg.table;      for (int i=0; i < tab.length; ++i) {        for (HashEntry<K,V> e=tab[i]; e != null; e=e.next) {          s.writeObject(e.key);          s.writeObject(e.value);        }      }    }  finally {      seg.unlock();    }  }  s.writeObject(null);  s.writeObject(null);}  }
class C{  @Override public String toString(){  return "dim3[" + "x=" + x + ","+ "y="+ y+ ","+ "z="+ z+ "]";}  }
class C{  public boolean isBlockLead(){  return blockLead;}  }
class C{  public ROMMA(boolean aggressive){  setAggressive(aggressive);}  }
class C{  public MineralGenerator(final ICubicWorld world,final IBlockState state,final double minY,final double maxY,final int size,final double probability){  super(world);  this.vanillaGen=new WorldGenMinable(state,size);  this.minY=minY;  this.maxY=maxY;  this.probability=probability;}  }
class C{  private static void updateRecordButton(Context context,RemoteViews remoteViews,boolean isRecording,boolean recordingTrackPaused){  remoteViews.setImageViewResource(R.id.track_widget_record_button,isRecording && !recordingTrackPaused ? R.drawable.button_pause : R.drawable.button_record);  int recordActionId;  if (isRecording) {    recordActionId=recordingTrackPaused ? R.string.track_action_resume : R.string.track_action_pause;  } else {    recordActionId=R.string.track_action_start;  }  Intent intent=new Intent(context,ControlRecordingService.class).setAction(context.getString(recordActionId));  PendingIntent pendingIntent=PendingIntent.getService(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);  remoteViews.setOnClickPendingIntent(R.id.track_widget_record_button,pendingIntent);}  }
class C{  public void init(final I18N i18n,final boolean isUnassignSoftModAllowed,final SpPermissionChecker permissionChecker,final DistributionSetManagement distributionSetManagement,final SessionEventBus eventBus,final ManageDistUIState manageDistUIState){  this.i18n=i18n;  this.isUnassignSoftModAllowed=isUnassignSoftModAllowed;  this.permissionChecker=permissionChecker;  this.distributionSetManagement=distributionSetManagement;  this.manageDistUIState=manageDistUIState;  this.eventBus=eventBus;  this.uiNotification=SpringContextHelper.getBean(UINotification.class);  createSwModuleTable();}  }
class C{  public Quaterniond fromAxisAngleRad(Vector3dc axis,double angle){  return fromAxisAngleRad(axis.x(),axis.y(),axis.z(),angle);}  }
class C{  public String errorOnProbabilitiesTipText(){  return "Use error on the probabilties as error measure when determining the best number of LogitBoost iterations. " + "If set, the number of LogitBoost iterations is chosen that minimizes the root mean squared error " + "(either on the training set or in the cross-validation, depending on useCrossValidation).";}  }
class C{  private void recalculate(){  if (pos1 == null || pos2 == null) {    return;  }  pos1=pos1.clampY(0,world == null ? 255 : world.getMaxY());  pos2=pos2.clampY(0,world == null ? 255 : world.getMaxY());  Vector min=getMinimumPoint();  Vector max=getMaximumPoint();  minX=min.getBlockX();  minY=min.getBlockY();  minZ=min.getBlockZ();  maxX=max.getBlockX();  maxY=max.getBlockY();  maxZ=max.getBlockZ();}  }
class C{  public static void arcPrint(final RasterPlotter matrix,final int cx,final int cy,final int radius,final double angle,final String message,final int intensity){  final int x=cx + (int)((radius + 1) * Math.cos(RasterPlotter.PI180 * angle));  final int y=cy - (int)((radius + 1) * Math.sin(RasterPlotter.PI180 * angle));  int yp=y + 3;  if ((angle > arcDist) && (angle < 180 - arcDist))   yp=y;  if ((angle > 180 + arcDist) && (angle < 360 - arcDist))   yp=y + 6;  if ((angle > (90 - arcDist)) && (angle < (90 + arcDist)))   yp-=6;  if ((angle > (270 - arcDist)) && (angle < (270 + arcDist)))   yp+=6;  int xp=x - 3 * message.length();  if ((angle > (90 + arcDist)) && (angle < (270 - arcDist)))   xp=x - 6 * message.length();  if ((angle < (90 - arcDist)) || (angle > (270 + arcDist)))   xp=x;  print(matrix,xp,yp,0,message,-1,false,intensity);}  }
class C{  private void computeDepths(DirectedEdge startEdge){  Set nodesVisited=new HashSet();  LinkedList nodeQueue=new LinkedList();  Node startNode=startEdge.getNode();  nodeQueue.addLast(startNode);  nodesVisited.add(startNode);  startEdge.setVisited(true);  while (!nodeQueue.isEmpty()) {    Node n=(Node)nodeQueue.removeFirst();    nodesVisited.add(n);    computeNodeDepth(n);    for (Iterator i=((DirectedEdgeStar)n.getEdges()).iterator(); i.hasNext(); ) {      DirectedEdge de=(DirectedEdge)i.next();      DirectedEdge sym=de.getSym();      if (sym.isVisited())       continue;      Node adjNode=sym.getNode();      if (!(nodesVisited.contains(adjNode))) {        nodeQueue.addLast(adjNode);        nodesVisited.add(adjNode);      }    }  }}  }
class C{  public void writeAttrString(final java.io.Writer writer,String string,String encoding) throws IOException {  final int end=string.length();  if (end > m_attrBuff.length) {    m_attrBuff=new char[end * 2 + 1];  }  string.getChars(0,end,m_attrBuff,0);  final char[] chars=m_attrBuff;  int cleanStart=0;  int cleanLength=0;  char ch=0;  for (int i=0; i < end; i++) {    ch=chars[i];    if (escapingNotNeeded(ch) && (!m_charInfo.shouldMapAttrChar(ch))) {      cleanLength++;    } else     if ('<' == ch || '>' == ch) {      cleanLength++;    } else     if (('&' == ch) && ((i + 1) < end) && ('{' == chars[i + 1])) {      cleanLength++;    } else {      if (cleanLength > 0) {        writer.write(chars,cleanStart,cleanLength);        cleanLength=0;      }      int pos=accumDefaultEntity(writer,ch,i,chars,end,false,true);      if (i != pos) {        i=pos - 1;      } else {        if (Encodings.isHighUTF16Surrogate(ch)) {          writeUTF16Surrogate(ch,chars,i,end);          i++;        }        String outputStringForChar=m_charInfo.getOutputStringForChar(ch);        if (null != outputStringForChar) {          writer.write(outputStringForChar);        } else         if (escapingNotNeeded(ch)) {          writer.write(ch);        } else {          writer.write("&#");          writer.write(Integer.toString(ch));          writer.write(';');        }      }      cleanStart=i + 1;    }  }  if (cleanLength > 1) {    if (cleanStart == 0)     writer.write(string); else     writer.write(chars,cleanStart,cleanLength);  } else   if (cleanLength == 1) {    writer.write(ch);  }}  }
class C{  public final void testDisjunctiveWithCharSequenceParameter(){  assertNotNull(Validators.disjunctive("foo",Validators.notEmpty("foo"),Validators.minLength("foo",1)));}  }
class C{  private void addNodesForStut(TLCState state,long fp,BTGraphNode node,boolean[] checkState,boolean[] checkAction,OrderOfSolution os,BEGraph bgraph){  int slen=os.getCheckState().length;  int alen=os.getCheckAction().length;  TBGraphNode tnode=node.getTNode(os.getTableau());  for (int i=0; i < tnode.nextSize(); i++) {    TBGraphNode tnode1=tnode.nextAt(i);    BTGraphNode destNode=bgraph.allNodes.getBTNode(fp,tnode1.getIndex());    if (destNode == null) {      if (tnode1.isConsistent(state,myTool)) {        destNode=new BTGraphNode(fp,tnode1.getIndex());        destNode.setCheckState(checkState);        node.addTransition(destNode,slen,alen,checkAction);        bgraph.allNodes.putBTNode(destNode);        addNodesForStut(state,fp,destNode,checkState,checkAction,os,bgraph);      }    } else {      node.addTransition(destNode,slen,alen,checkAction);    }  }}  }
class C{  public void testJointCovariance() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4ColsPairedOneStepNoisyDependence-1.txt");  double[][] data=afr.getDouble2DMatrix();  double[][] source=MatrixUtils.selectRowsAndColumns(data,MatrixUtils.range(0,data.length - 2),new int[]{0});  double[][] dest=MatrixUtils.selectRowsAndColumns(data,MatrixUtils.range(1,data.length - 1),new int[]{0});  double[][] others=MatrixUtils.selectRowsAndColumns(data,MatrixUtils.range(0,data.length - 2),new int[]{1,2,3});  ConditionalMutualInfoCalculatorMultiVariateGaussian condMiCalc=new ConditionalMutualInfoCalculatorMultiVariateGaussian();  condMiCalc.initialise(1,1,3);  condMiCalc.setObservations(source,dest,others);  double[][] expectedCov=new double[][]{{0.9647348336238838,3.206553219847798E-5,-0.0013932612411635703,0.04178350449818639,-0.01494202491454874},{3.206553219847798E-5,0.9647348336238838,-0.055547119949140286,-0.0020067804899770256,0.02693742557840663},{-0.0013932612411635703,-0.055547119949140286,1.0800072991165575,-0.009974731537464664,-2.1485745647111378E-4},{0.04178350449818639,-0.0020067804899770256,-0.009974731537464664,0.48319024794457854,-0.011333013565018278},{-0.01494202491454874,0.02693742557840663,-2.1485745647111378E-4,-0.011333013565018278,0.5018806693655076}};  double[][] expectedCholesky=MatrixUtils.CholeskyDecomposition(expectedCov);  for (int r=0; r < expectedCholesky.length; r++) {    for (int c=0; c < expectedCholesky[r].length; c++) {      assertEquals(expectedCholesky[r][c],condMiCalc.L[r][c],0.001);    }  }  source=MatrixUtils.selectRowsAndColumns(data,MatrixUtils.range(0,data.length - 2),new int[]{1});  dest=MatrixUtils.selectRowsAndColumns(data,MatrixUtils.range(1,data.length - 1),new int[]{0});  others=MatrixUtils.selectRowsAndColumns(data,MatrixUtils.range(0,data.length - 2),new int[]{0,2,3});  condMiCalc=new ConditionalMutualInfoCalculatorMultiVariateGaussian();  condMiCalc.initialise(1,1,3);  condMiCalc.setObservations(source,dest,others);  expectedCov=new double[][]{{1.0800072991165575,-0.055547119949140286,-0.0013932612411635703,-0.009974731537464664,-2.1485745647111378E-4},{-0.055547119949140286,0.9647348336238838,3.206553219847798E-5,-0.0020067804899770256,0.02693742557840663},{-0.0013932612411635703,3.206553219847798E-5,0.9647348336238838,0.04178350449818639,-0.01494202491454874},{-0.009974731537464664,-0.0020067804899770256,0.04178350449818639,0.48319024794457854,-0.011333013565018278},{-2.1485745647111378E-4,0.02693742557840663,-0.01494202491454874,-0.011333013565018278,0.5018806693655076}};  expectedCholesky=MatrixUtils.CholeskyDecomposition(expectedCov);  for (int r=0; r < expectedCholesky.length; r++) {    for (int c=0; c < expectedCholesky[r].length; c++) {      assertEquals(expectedCholesky[r][c],condMiCalc.L[r][c],0.001);    }  }}  }
class C{  public XYLocation west(){  return new XYLocation(xCoOrdinate - 1,yCoOrdinate);}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < in.length - 1) {    if (random == null) {      in[inOff]=0;    } else {      in[inOff]=(byte)random.nextInt();    }    inOff++;  }  in[inOff]=code;  return code;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  MutableBigInteger(BigInteger b){  intLen=b.mag.length;  value=Arrays.copyOf(b.mag,intLen);}  }
class C{  public void totalTest() throws InterruptedException {  List<NodeWrapper> nodeList=setupNodes();  setupSeedNode(nodeList);  seedNodes(nodeList);  Thread.sleep(2500);  seedNodes(nodeList);  Thread.sleep(2500);  for (  NodeWrapper nodeWrapper1 : nodeList) {    for (    NodeWrapper nodeWrapper2 : nodeList) {      if (!nodeWrapper1.dbHandler.getIPObjects().stream().anyMatch(null)) {        if (nodeWrapper1.serverObject.portServer != nodeWrapper2.serverObject.portServer) {          throw new RuntimeException("Missing IP object in list from " + nodeWrapper1.serverObject.portServer + ": "+ nodeWrapper2.serverObject.portServer);        }      }    }  }  buildPaymentChannels(nodeList);}  }
class C{  public static int decodeZigZag32(final int n){  return (n >>> 1) ^ -(n & 1);}  }
class C{  @Override public void handleClick(int x,int y,PlotRenderingInfo info){}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private ArrayList<LinkedDimGroup>[] divideIntoLinkedGroups(boolean isRows){  boolean fromEnd=!(isRows ? lc.isTopToBottom() : LayoutUtil.isLeftToRight(lc,container));  TreeSet<Integer> primIndexes=isRows ? rowIndexes : colIndexes;  TreeSet<Integer> secIndexes=isRows ? colIndexes : rowIndexes;  DimConstraint[] primDCs=(isRows ? rowConstr : colConstr).getConstaints();  @SuppressWarnings("unchecked") ArrayList<LinkedDimGroup>[] groupLists=new ArrayList[primIndexes.size()];  int gIx=0;  for (  int i : primIndexes) {    DimConstraint dc;    if (i >= -MAX_GRID && i <= MAX_GRID) {      dc=primDCs[i >= primDCs.length ? primDCs.length - 1 : i];    } else {      dc=DOCK_DIM_CONSTRAINT;    }    ArrayList<LinkedDimGroup> groupList=new ArrayList<LinkedDimGroup>(4);    groupLists[gIx++]=groupList;    for (    Integer ix : secIndexes) {      Cell cell=isRows ? getCell(i,ix) : getCell(ix,i);      if (cell == null || cell.compWraps.size() == 0)       continue;      int span=(isRows ? cell.spany : cell.spanx);      if (span > 1)       span=convertSpanToSparseGrid(i,span,primIndexes);      boolean isPar=(cell.flowx == isRows);      if ((isPar == false && cell.compWraps.size() > 1) || span > 1) {        int linkType=isPar ? LinkedDimGroup.TYPE_PARALLEL : LinkedDimGroup.TYPE_SERIAL;        LinkedDimGroup lg=new LinkedDimGroup("p," + ix,span,linkType,!isRows,fromEnd);        lg.setCompWraps(cell.compWraps);        groupList.add(lg);      } else {        for (int cwIx=0; cwIx < cell.compWraps.size(); cwIx++) {          CompWrap cw=cell.compWraps.get(cwIx);          boolean rowBaselineAlign=(isRows && lc.isTopToBottom() && dc.getAlignOrDefault(!isRows) == UnitValue.BASELINE_IDENTITY);          boolean isBaseline=isRows && cw.isBaselineAlign(rowBaselineAlign);          String linkCtx=isBaseline ? "baseline" : null;          boolean foundList=false;          for (int glIx=0, lastGl=groupList.size() - 1; glIx <= lastGl; glIx++) {            LinkedDimGroup group=groupList.get(glIx);            if (group.linkCtx == linkCtx || linkCtx != null && linkCtx.equals(group.linkCtx)) {              group.addCompWrap(cw);              foundList=true;              break;            }          }          if (foundList == false) {            int linkType=isBaseline ? LinkedDimGroup.TYPE_BASELINE : LinkedDimGroup.TYPE_PARALLEL;            LinkedDimGroup lg=new LinkedDimGroup(linkCtx,1,linkType,!isRows,fromEnd);            lg.addCompWrap(cw);            groupList.add(lg);          }        }      }    }  }  return groupLists;}  }
class C{  public Iterator<Map.Entry<K,WeakReference<V>>> entryIterator(){  return map.entrySet().iterator();}  }
class C{  @Override public boolean execute(String sql,int[] columnIndexes) throws SQLException {  try {    debugCode("execute(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public VectorLayerPlot(Plot p,double[][] v){  super("Vector of " + p.name,p);  if (v != null) {    Array.checkRowDimension(v,p.getData().length);    Array.checkColumnDimension(v,p.getData()[0].length);  }  V=v;}  }
class C{  public void run(final String[] args){  if (args.length == 0) {    System.out.println("Too few arguments.");    printUsage();    System.exit(1);  }  Iterator<String> argIter=new ArgumentParser(args).iterator();  String arg=argIter.next();  if (arg.equals("-h") || arg.equals("--help")) {    printUsage();    System.exit(0);  } else {    String inputFile=arg;    if (!argIter.hasNext()) {      System.out.println("Too few arguments.");      printUsage();      System.exit(1);    }    String outputFile=argIter.next();    if (argIter.hasNext()) {      System.out.println("Too many arguments.");      printUsage();      System.exit(1);    }    run(inputFile,outputFile);  }}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  db.execSQL("CREATE TABLE IF NOT EXISTS " + TABLE + " ("+ COL_ROWID+ " INTEGER PRIMARY KEY AUTOINCREMENT,"+ COL_DISPLAY_NAME+ " TEXT NOT NULL,"+ COL_ADDED_VIA+ " INT NOT NULL,"+ COL_PUBLIC_KEY+ " TEXT NOT NULL,"+ COL_NUMBER+ " TEXT,"+ COL_CHECKED+ " BOOLEAN DEFAULT "+ FALSE+ " NOT NULL CHECK("+ COL_CHECKED+ " IN("+ TRUE+ ","+ FALSE+ "))"+ ");");}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.182 -0400",hash_original_method="36C1E95AD8A6DF443D7A292EAE48D897",hash_generated_method="F4146742345D588F8015AA41AB33CF4A") @Override public int read(char[] buf,int offset,int len) throws IOException {  return reader.read(buf,offset,len);}  }
class C{  public String toString(int radix){  String s="";  long[] a=getElement();  int b=mBit;  if (radix == 2) {    for (int j=b - 1; j >= 0; j--) {      if ((a[a.length - 1] & ((long)1 << j)) == 0) {        s+="0";      } else {        s+="1";      }    }    for (int i=a.length - 2; i >= 0; i--) {      for (int j=MAXLONG - 1; j >= 0; j--) {        if ((a[i] & mBitmask[j]) == 0) {          s+="0";        } else {          s+="1";        }      }    }  } else   if (radix == 16) {    final char[] HEX_CHARS={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};    for (int i=a.length - 1; i >= 0; i--) {      s+=HEX_CHARS[(int)(a[i] >>> 60) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 56) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 52) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 48) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 44) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 40) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 36) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 32) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 28) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 24) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 20) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 16) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 12) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 8) & 0x0f];      s+=HEX_CHARS[(int)(a[i] >>> 4) & 0x0f];      s+=HEX_CHARS[(int)(a[i]) & 0x0f];      s+=" ";    }  }  return s;}  }
class C{  public int constrains(GeneralNameInterface inputName){  int constraintType;  if (inputName == null) {    constraintType=NAME_DIFF_TYPE;  } else   if (inputName.getType() != NAME_ANY) {    constraintType=NAME_DIFF_TYPE;  } else {    throw new UnsupportedOperationException("Narrowing, widening, " + "and matching are not supported for OtherName.");  }  return constraintType;}  }
class C{  public void addAdditionalAnswer(DNSIncoming in,DNSRecord rec) throws IOException {  MessageOutputStream record=new MessageOutputStream(512,this);  record.writeRecord(rec,0);  byte[] byteArray=record.toByteArray();  record.close();  if (byteArray.length < this.availableSpace()) {    _additionals.add(rec);    _additionalsAnswersBytes.write(byteArray,0,byteArray.length);  } else {    throw new IOException("message full");  }}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,Node[][] arrays,int nbatches) throws Exception {  int ncycles=arrays.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(arrays[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  public Collection<Segment> reverseSegments(){  return segments.descendingMap().values();}  }
class C{  public void testFirstPosition() throws Exception {  BreakIterator expected=BreakIterator.getSentenceInstance(Locale.ROOT);  BreakIterator actual=new CustomSeparatorBreakIterator(randomSeparator());  assertSameBreaks("000ab000",3,2,4,expected,actual);}  }
class C{  public void onListItemDrop(int fromTotalIndex,int fromParentIndex,int fromChildIndexOfParent,int toParentIndex){}  }
class C{  public boolean accept(ZipFile zipFile,String name){  String ucName=name.toUpperCase(Locale.ROOT);  return (ucName.endsWith(JPG) || ucName.endsWith(JPEG) || ucName.endsWith(GIF)|| ucName.endsWith(PNG));}  }
class C{  public BooleanColumn(int nrows,int capacity,boolean defaultValue){  super(boolean.class,new Boolean(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_bits=new BitSet(capacity);  m_bits.set(0,capacity,defaultValue);  m_size=nrows;}  }
class C{  public void createSubUsageScenario09() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(17.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO09_PERUNIT_DAY",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO09_PERUNIT_DAY",serviceDetails,basicSetup.getCustomerUser1(),role);  long userDeassignedTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(15.1);  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(basicSetup.getCustomerUser1(),subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  VORoleDefinition changedRole=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(basicSetup.getCustomerUser2(),changedRole,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(15.7);  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(basicSetup.getCustomerUser2(),subDetails.getSubscriptionId());  subDetails=subscrSetup.addUser(basicSetup.getCustomerUser1(),role,subDetails.getSubscriptionId());  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO09_PERUNIT_DAY",subDetails);}  }
class C{  private ImageElement(String imageURLstring){  URL imageURL=getURL(imageURLstring);  if (imageURL != null) {    try {      Toolkit tk=Toolkit.getDefaultToolkit();      m_image=tk.getDefaultToolkit().getImage(imageURL);      MediaTracker mediaTracker=new MediaTracker(new Container());      mediaTracker.addImage(m_image,0);      mediaTracker.waitForID(0);    } catch (    Exception e) {      log.log(Level.WARNING,"(byteArray)",e);    }    if (m_image != null)     log.fine("URL=" + imageURL); else     log.log(Level.WARNING,"Not loaded - URL=" + imageURL);  } else   log.log(Level.WARNING,"Invalid URL=" + imageURLstring);}  }
class C{  public void closeOptionsMenu(){  mWindow.closePanel(Window.FEATURE_OPTIONS_PANEL);}  }
class C{  private Type condType(DiagnosticPosition pos,Type thentype,Type elsetype){  if (types.isSameType(thentype,elsetype))   return thentype.baseType();  Type thenUnboxed=(!allowBoxing || thentype.isPrimitive()) ? thentype : types.unboxedType(thentype);  Type elseUnboxed=(!allowBoxing || elsetype.isPrimitive()) ? elsetype : types.unboxedType(elsetype);  if (thenUnboxed.isPrimitive() && elseUnboxed.isPrimitive()) {    if (thenUnboxed.getTag().isStrictSubRangeOf(INT) && elseUnboxed.hasTag(INT) && types.isAssignable(elseUnboxed,thenUnboxed)) {      return thenUnboxed.baseType();    }    if (elseUnboxed.getTag().isStrictSubRangeOf(INT) && thenUnboxed.hasTag(INT) && types.isAssignable(thenUnboxed,elseUnboxed)) {      return elseUnboxed.baseType();    }    for (    TypeTag tag : primitiveTags) {      Type candidate=syms.typeOfTag[tag.ordinal()];      if (types.isSubtype(thenUnboxed,candidate) && types.isSubtype(elseUnboxed,candidate)) {        return candidate;      }    }  }  if (allowBoxing) {    if (thentype.isPrimitive())     thentype=types.boxedClass(thentype).type;    if (elsetype.isPrimitive())     elsetype=types.boxedClass(elsetype).type;  }  if (types.isSubtype(thentype,elsetype))   return elsetype.baseType();  if (types.isSubtype(elsetype,thentype))   return thentype.baseType();  if (!allowBoxing || thentype.hasTag(VOID) || elsetype.hasTag(VOID)) {    log.error(pos,"neither.conditional.subtype",thentype,elsetype);    return thentype.baseType();  }  return types.lub(thentype.baseType(),elsetype.baseType());}  }
class C{  private static synchronized void signalAllControllers(){synchronized (controllers) {    for (final Iterator<ControlThread> iter=controllers.iterator(); iter.hasNext(); ) {      final ControlThread ct=iter.next();      Log.logger.log(Level.FINE,"Calling Thread.notifyAll() on {0}",ct.getName());synchronized (ct) {        ct.notifyAll();      }    }  }}  }
class C{  public void transitionState(RobotState state,RobotState oldState){}  }
class C{  private int makeAckInd(){  if (mMessage == null) {    mMessage=new ByteArrayOutputStream();    mPosition=0;  }  appendOctet(PduHeaders.MESSAGE_TYPE);  appendOctet(PduHeaders.MESSAGE_TYPE_ACKNOWLEDGE_IND);  if (appendHeader(PduHeaders.TRANSACTION_ID) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  if (appendHeader(PduHeaders.MMS_VERSION) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  appendHeader(PduHeaders.REPORT_ALLOWED);  return PDU_COMPOSE_SUCCESS;}  }
class C{  public static boolean isLocalNotInitializerScope(Scope scope){  return ModelUtil.isLocalNotInitializerScope(scope);}  }
class C{  public void testSubjectAltNameAndCn(){  assertFalse(verifier.verify("imap.g.com",new StubX509Certificate("").addSubjectAlternativeName(ALT_DNS_NAME,"a.y.com")));  assertFalse(verifier.verify("imap.g.com",new StubX509Certificate("cn=imap.g.com").addSubjectAlternativeName(ALT_DNS_NAME,"a.y.com")));  assertTrue(verifier.verify("imap.g.com",new StubX509Certificate("").addSubjectAlternativeName(ALT_DNS_NAME,"imap.g.com")));}  }
class C{  public String createVolumeFromSnapshot(String volumeName,long capacity,String volumeTypeId,String sourceSnap) throws Exception {  return createVolume(volumeName,capacity,volumeTypeId,null,sourceSnap);}  }
class C{  public boolean intersects(S2CellUnion union){  for (  S2CellId id : union) {    if (intersects(id)) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public void addAll(final Configuration configuration){  new ConfigurationMap(this).putAll(new ConfigurationMap(configuration));}  }
class C{  public static InventoryMessage with(Transaction... txns){  checkArgument(txns.length > 0);  InventoryMessage result=new InventoryMessage(txns[0].getParams());  for (  Transaction tx : txns)   result.addTransaction(tx);  return result;}  }
class C{  private float[] calculateAverageLocation(float newX,float newY){  if (previousLocationOnScreenX <= 0 || previousLocationOnScreenY <= 0) {    return new float[]{newX,newY};  }  final float averagedX=OLD_LOCATION_AVERAGE_FACTOR * previousLocationOnScreenX + NEW_LOCATION_AVERAGE_FACTOR * newX;  final float averagedY=OLD_LOCATION_AVERAGE_FACTOR * previousLocationOnScreenY + NEW_LOCATION_AVERAGE_FACTOR * newY;  return new float[]{averagedX,averagedY};}  }
class C{  public void test_getIterator$Ljava_text_AttributedCharacterIterator$Attribute(){  String test="Test string";  try {    Map<AttributedCharacterIterator.Attribute,String> hm=new HashMap<AttributedCharacterIterator.Attribute,String>();    AttributedCharacterIterator.Attribute[] aci=new AttributedCharacterIterator.Attribute[3];    aci[0]=new TestAttributedCharacterIteratorAttribute("att1");    aci[1]=new TestAttributedCharacterIteratorAttribute("att2");    aci[2]=new TestAttributedCharacterIteratorAttribute("att3");    hm.put(aci[0],"value1");    hm.put(aci[1],"value2");    AttributedString attrString=new AttributedString(test,hm);    AttributedCharacterIterator it=attrString.getIterator(aci);    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[0]).equals("value1"));    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[1]).equals("value2"));    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[2]) == null);  } catch (  Exception e) {    fail("Unexpected exceptiption " + e.toString());  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  void activateLink(){  if (!this.active) {    netElementActivationRegistry.registerLinkAsActive(this);    this.active=true;  }}  }
class C{  public MonitoredHostProvider(HostIdentifier hostId){  this.hostId=hostId;}  }
class C{  private List<Pair<byte[],byte[]>> translateFuzzyKeys(List<GTRecord> fuzzyKeys){  if (fuzzyKeys == null || fuzzyKeys.isEmpty()) {    return Collections.emptyList();  }  List<Pair<byte[],byte[]>> ret=Lists.newArrayList();  for (  GTRecord gtRecordFuzzyKey : fuzzyKeys) {    byte[] hbaseFuzzyKey=fuzzyKeyEncoder.createBuf();    byte[] hbaseFuzzyMask=fuzzyMaskEncoder.createBuf();    fuzzyKeyEncoder.encode(gtRecordFuzzyKey,gtRecordFuzzyKey.getInfo().getPrimaryKey(),hbaseFuzzyKey);    fuzzyMaskEncoder.encode(gtRecordFuzzyKey,gtRecordFuzzyKey.getInfo().getPrimaryKey(),hbaseFuzzyMask);    ret.add(Pair.newPair(hbaseFuzzyKey,hbaseFuzzyMask));  }  return ret;}  }
class C{  public static boolean isNavBarOnBottom(@NonNull Context context){  final Resources res=context.getResources();  final Configuration cfg=context.getResources().getConfiguration();  final DisplayMetrics dm=res.getDisplayMetrics();  boolean canMove=(dm.widthPixels != dm.heightPixels && cfg.smallestScreenWidthDp < 600);  return (!canMove || dm.widthPixels < dm.heightPixels);}  }
class C{  public Credentials(String url,String applicationId){  this.url=url;  this.applicationId=applicationId;}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.SPECIFICATION_ELEMENT;}  }
class C{  public double calcAngle(Entry p1,Entry p2){  float dx=p2.getXIndex() - p1.getXIndex();  float dy=p2.getVal() - p1.getVal();  double angle=Math.atan2(dy,dx) * 180.0 / Math.PI;  return angle;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startTo("LambdaStepTestTarg","instanceTest","()V");  ThreadReference thread=bpe.thread();  StepEvent se=stepOverLine(thread);  System.out.println(se.thread().frame(0));  se=stepIntoLine(thread);  System.out.println(se.thread().frame(0));  se=stepOverLine(thread);  System.out.println(se.thread().frame(0));  StackFrame frame=se.thread().frame(0);  LocalVariable lv=frame.visibleVariableByName("from");  System.out.println(lv);  StringReference sr=(StringReference)frame.getValue(lv);  if (!sr.value().equals("test")) {    throw new Exception("Unexpected variable value in instanceTest: " + sr.value());  }  bpe=resumeTo("LambdaStepTestTarg","lambdaTest","()V");  thread=bpe.thread();  se=stepOverLine(thread);  System.out.println(se.thread().frame(0));  se=stepIntoLine(thread);  System.out.println(se.thread().frame(0));  se=stepOverLine(thread);  System.out.println(se.thread().frame(0));  frame=se.thread().frame(0);  lv=frame.visibleVariableByName("from");  System.out.println(lv);  sr=(StringReference)frame.getValue(lv);  if (!sr.value().equals("lambda")) {    throw new Exception("Unexpected variable value in lambdaTest: " + sr.value());  }  bpe=resumeTo("LambdaStepTestTarg","defaultTest","()V");  thread=bpe.thread();  se=stepOverLine(thread);  System.out.println(se.thread().frame(0));  se=stepIntoLine(thread);  System.out.println(se.thread().frame(0));  se=stepOverLine(thread);  System.out.println(se.thread().frame(0));  frame=se.thread().frame(0);  lv=frame.visibleVariableByName("from");  System.out.println(lv);  sr=(StringReference)frame.getValue(lv);  if (!sr.value().equals("default")) {    throw new Exception("Unexpected variable value in lambdaTest: " + sr.value());  }  listenUntilVMDisconnect();}  }
class C{  public boolean supportsMultipleTransactions() throws SQLException {  return true;}  }
class C{  public void recordHit(){  mIsHit=true;}  }
class C{  public <T>T fromXML(final Reader xml) throws IOException, ClassNotFoundException {  return fromXML(new XppDriver(),xml);}  }
class C{  public static <T extends Map.Entry<String,String>>String formEncode(Collection<T> parameters) throws IOException {  ByteArrayOutputStream b=new ByteArrayOutputStream();  formEncode(parameters,b);  return new String(b.toByteArray());}  }
class C{  protected FilterChain createJBossFilterChain(JBossInstalledLocalContainer container) throws MalformedURLException {  FilterChain filterChain=createFilterChain();  String[] version=jbossContainer.getName().split(" ");  if (version.length < 2) {    throw new IllegalArgumentException("Cannot read JBoss version number from name " + jbossContainer.getName());  }  if (version[1].length() < 1) {    throw new IllegalArgumentException("Cannot get the major version for version " + version[1]);  }  String majorVersion=version[1].substring(0,1);  if (version[1].length() < 3) {    throw new IllegalArgumentException("Cannot get the minor version for version " + version[1]);  }  String minorVersion=version[1].substring(2,3);  if (version[1].length() < 5) {    throw new IllegalArgumentException("Cannot get the revision for version " + version[1]);  }  String revisionVersion=version[1].substring(4,5);  if (!(Integer.valueOf(majorVersion).intValue() <= 3 && Integer.valueOf(minorVersion).intValue() <= 2 && Integer.valueOf(revisionVersion).intValue() <= 7)) {    getAntUtils().addTokenToFilterChain(filterChain,"cargo.jboss.server.mode.attr","<attribute name=\"ServerMode\">true</attribute>");  }  String bindingXmlFile=getFileHandler().append(getHome(),"conf/cargo-binding.xml");  getAntUtils().addTokenToFilterChain(filterChain,"cargo.jboss.binding.url",getFileHandler().getURL(bindingXmlFile));  getAntUtils().addTokenToFilterChain(filterChain,GeneralPropertySet.RMI_PORT,getPropertyValue(GeneralPropertySet.RMI_PORT));  getAntUtils().addTokenToFilterChain(filterChain,JBossPropertySet.JBOSS_NAMING_PORT,getPropertyValue(JBossPropertySet.JBOSS_NAMING_PORT));  getAntUtils().addTokenToFilterChain(filterChain,JBossPropertySet.JBOSS_CLASSLOADING_WEBSERVICE_PORT,getPropertyValue(JBossPropertySet.JBOSS_CLASSLOADING_WEBSERVICE_PORT));  getAntUtils().addTokenToFilterChain(filterChain,JBossPropertySet.JBOSS_JRMP_PORT,getPropertyValue(JBossPropertySet.JBOSS_JRMP_PORT));  getAntUtils().addTokenToFilterChain(filterChain,JBossPropertySet.JBOSS_JRMP_INVOKER_PORT,getPropertyValue(JBossPropertySet.JBOSS_JRMP_INVOKER_PORT));  getAntUtils().addTokenToFilterChain(filterChain,JBossPropertySet.JBOSS_INVOKER_POOL_PORT,getPropertyValue(JBossPropertySet.JBOSS_INVOKER_POOL_PORT));  getAntUtils().addTokenToFilterChain(filterChain,JBossPropertySet.JBOSS_REMOTING_TRANSPORT_PORT,getPropertyValue(JBossPropertySet.JBOSS_REMOTING_TRANSPORT_PORT));  getAntUtils().addTokenToFilterChain(filterChain,JBossPropertySet.JBOSS_EJB3_REMOTING_PORT,getPropertyValue(JBossPropertySet.JBOSS_EJB3_REMOTING_PORT));  getAntUtils().addTokenToFilterChain(filterChain,JBossPropertySet.JBOSS_TRANSACTION_RECOVERY_MANAGER_PORT,getPropertyValue(JBossPropertySet.JBOSS_TRANSACTION_RECOVERY_MANAGER_PORT));  getAntUtils().addTokenToFilterChain(filterChain,JBossPropertySet.JBOSS_TRANSACTION_STATUS_MANAGER_PORT,getPropertyValue(JBossPropertySet.JBOSS_TRANSACTION_STATUS_MANAGER_PORT));  getAntUtils().addTokenToFilterChain(filterChain,ServletPropertySet.PORT,getPropertyValue(ServletPropertySet.PORT));  getAntUtils().addTokenToFilterChain(filterChain,GeneralPropertySet.LOGGING,getJBossLogLevel(getPropertyValue(GeneralPropertySet.LOGGING)));  File libDir=new File(container.getLibDir(getPropertyValue(JBossPropertySet.CONFIGURATION)));  getAntUtils().addTokenToFilterChain(filterChain,"cargo.server.lib.url",libDir.toURI().toURL().toString());  StringBuilder buffer=new StringBuilder();  File deployDir=new File(container.getDeployDir(getPropertyValue(JBossPropertySet.CONFIGURATION)));  buffer.append("deploy/, ").append(deployDir.toURI().toURL().toString());  getAntUtils().addTokenToFilterChain(filterChain,"cargo.server.deploy.url","deploy/");  getAntUtils().addTokenToFilterChain(filterChain,"jboss.shared.classpath",getSharedClasspathXml(container));  return filterChain;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public boolean requestsHaveSameAttributeSet(HttpServletRequest request1,HttpServletRequest request2){  Enumeration attrNames=request1.getAttributeNames();  String curAttr;  Object valA, valB;  while (attrNames.hasMoreElements()) {    curAttr=(String)attrNames.nextElement();    valA=request1.getAttribute(curAttr);    valB=request2.getAttribute(curAttr);    if (null != valA && null != valB) {      if (!valA.equals(valB)) {        return false;      }    } else     if (null != valA || null != valB) {      return false;    }  }  attrNames=request2.getAttributeNames();  while (attrNames.hasMoreElements()) {    curAttr=(String)attrNames.nextElement();    valA=request2.getAttribute(curAttr);    valB=request1.getAttribute(curAttr);    if (null != valA && null != valB) {      if (!valA.equals(valB)) {        return false;      }    } else     if (null != valA || null != valB) {      return false;    }  }  return true;}  }
class C{  public T caseObjectLiteral(ObjectLiteral object){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:58.243 -0400",hash_original_method="BDAC1FC80311C743AEDE050523F81688",hash_generated_method="16F9B2D0290045C10AAF2A013C9C1C70") public ZipError(String s){  super(s);}  }
class C{  public static XtremIOConsistencyGroup isSnapsetAvailableInArray(XtremIOClient client,String label,String clusterName){  XtremIOConsistencyGroup cg=null;  try {    cg=client.getSnapshotSetDetails(label,clusterName);  } catch (  Exception e) {    _log.info("Snapshot Set {} not available in Array.",label);  }  return cg;}  }
class C{  public List makeListTipoNivelesNinguno(){  List listaTiposNivelesNinguno=new ArrayList();  PropertyBean propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoNiveles.TODOS_VALUE));  propertyBean.setLabel(TipoNiveles.TODOS_LABEL);  listaTiposNivelesNinguno.add(propertyBean);  return listaTiposNivelesNinguno;}  }
class C{  private PremiumList persistHumongousPremiumList(String name,int size){  String[] entries=new String[size];  for (int i=0; i < size; i++) {    entries[i]=String.format("%d,USD 100 # blahz",i);  }  return persistPremiumList(name,entries);}  }
class C{  public Anonymous_activity_1_ createAnonymous_activity_1_(){  Anonymous_activity_1_Impl anonymous_activity_1_=new Anonymous_activity_1_Impl();  return anonymous_activity_1_;}  }
class C{  public static Set<TestCase> readTestCases(String failingTest){  JUnitTestReader parser=new JUnitTestReader();  Set<TestCase> tests=new HashSet<TestCase>();  tests.addAll(parser.readTests(failingTest).values());  return tests;}  }
class C{  @Nullable static List<String> collectTestDataByExistingFiles(@NotNull PsiMethod psiMethod){  TestDataDescriptor descriptor=buildDescriptorFromExistingTestData(psiMethod);  if (descriptor == null || !descriptor.isComplete()) {    return null;  }  return descriptor.generate();}  }
class C{  private List<double[]> initializeWeights2D(){  List<double[]> weights=new ArrayList<double[]>();  weights.add(new double[]{0.0,1.0});  weights.add(new double[]{1.0,0.0});  for (int i=1; i < numberOfPoints - 1; i++) {    double a=i / (double)(numberOfPoints - 1);    weights.add(new double[]{a,1 - a});  }  return weights;}  }
class C{  protected int _columnOffset(int absRank){  return columnOffsets[absRank];}  }
class C{  public void useAttributeFor(final String fieldName,final Class<?> type){  if (attributeMapper == null) {    throw new InitializationException("No " + AttributeMapper.class.getName() + " available");  }  attributeMapper.addAttributeFor(fieldName,type);}  }
class C{  public EWMA(double alpha,long interval,TimeUnit intervalUnit){  this.interval=intervalUnit.toNanos(interval);  this.alpha=alpha;}  }
class C{  private static String encryptInteger(Integer integer,ServletContext context) throws ServletException {  String password=context.getInitParameter("SampleSetIDEncryptionPassword");  SecureRandom rand=new SecureRandom();  byte salt[]=new byte[8];  rand.nextBytes(salt);  byte[] iv;  byte[] ciphertext;  try {    SecretKeyFactory factory=SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");    KeySpec spec=new PBEKeySpec(password.toCharArray(),salt,65536,256);    SecretKey tmp=factory.generateSecret(spec);    SecretKey secret=new SecretKeySpec(tmp.getEncoded(),"AES");    Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding");    cipher.init(Cipher.ENCRYPT_MODE,secret);    AlgorithmParameters params=cipher.getParameters();    iv=params.getParameterSpec(IvParameterSpec.class).getIV();    ciphertext=cipher.doFinal(ByteBuffer.allocate(4).putInt(integer).array());  } catch (  Exception ex) {    throw new ServletException(ex);  }  Encoder encoder=Base64.getEncoder();  String encryptedStr=encoder.encodeToString(ciphertext) + "|" + encoder.encodeToString(iv)+ "|"+ encoder.encodeToString(salt);  return encryptedStr;}  }
class C{  public static CCAnimation animation(String name,float delay){  return new CCAnimation(name,delay);}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  public Task createProject(String tenantId,ProjectCreateSpec projectCreateSpec) throws IOException {  String path=String.format("%s/%s/projects",getBasePath(),tenantId);  HttpResponse response=this.restClient.perform(RestClient.Method.POST,path,serializeObjectAsJson(projectCreateSpec));  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  public void reply(List<String> responseHeaders,boolean out) throws IOException {  assert (!Thread.holdsLock(SpdyStream.this));  int flags=0;synchronized (this) {    if (responseHeaders == null) {      throw new NullPointerException("responseHeaders == null");    }    if (isLocallyInitiated()) {      throw new IllegalStateException("cannot reply to a locally initiated stream");    }    if (this.responseHeaders != null) {      throw new IllegalStateException("reply already sent");    }    this.responseHeaders=responseHeaders;    if (!out) {      this.out.finished=true;      flags|=SpdyConnection.FLAG_FIN;    }  }  connection.writeSynReply(id,flags,responseHeaders);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.456 -0400",hash_original_method="DC4520A08FC5096E13EEA9B9A8CCEB9C",hash_generated_method="702DFC49808577C558CDF604A2CBCE20") private int handleJ(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (contains(value,index,4,"JOSE") || contains(value,0,4,"SAN ")) {    if ((index == 0 && (charAt(value,index + 4) == ' ') || value.length() == 4) || contains(value,0,4,"SAN ")) {      result.append('H');    } else {      result.append('J','H');    }    index++;  } else {    if (index == 0 && !contains(value,index,4,"JOSE")) {      result.append('J','A');    } else     if (isVowel(charAt(value,index - 1)) && !slavoGermanic && (charAt(value,index + 1) == 'A' || charAt(value,index + 1) == 'O')) {      result.append('J','H');    } else     if (index == value.length() - 1) {      result.append('J',' ');    } else     if (!contains(value,index + 1,1,L_T_K_S_N_M_B_Z) && !contains(value,index - 1,1,"S","K","L")) {      result.append('J');    }    if (charAt(value,index + 1) == 'J') {      index+=2;    } else {      index++;    }  }  return index;}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  public static boolean isLoadable(File f){  boolean jdk=isJDKJar(f);  boolean known=isKnown(f);  return !jdk && !known;}  }
class C{  public static void evolve(RealVariable variable){  variable.setValue(PRNG.nextDouble(variable.getLowerBound(),variable.getUpperBound()));}  }
class C{  @Override public void aggregate(final Term2IdWriteProc.Result result,final Split split){  for (int i=split.fromIndex, j=0; i < split.toIndex; i++, j++) {    final IV termId=result.ivs[j];    if (termId == null) {      if (!readOnly)       throw new AssertionError();      nunknown.incrementAndGet();    } else {      a[i].obj.setIV(termId);      if (a[i] instanceof KVOList) {        final KVOList<BigdataValue> tmp=(KVOList<BigdataValue>)a[i];        if (!tmp.isDuplicateListEmpty()) {          tmp.map(new AssignTermId(termId));        }      }      if (log.isDebugEnabled()) {        log.debug("termId=" + termId + ", term="+ a[i].obj);      }    }  }}  }
class C{  public static ResultDeliveryStrategy create(EPStatement statement,Object subscriber,String methodName,Class[] selectClauseTypes,String[] selectClauseColumns) throws EPSubscriberException {  if (selectClauseTypes == null) {    selectClauseTypes=new Class[0];    selectClauseColumns=new String[0];  }  if (methodName == null) {    methodName="update";  }  List<Method> sorted=Arrays.asList(subscriber.getClass().getMethods());  Collections.sort(sorted,METHOD_PREFERECE_COMPARATOR);  Method subscriptionMethod=null;  Map<Method,Class[]> updateMethods=new LinkedHashMap<Method,Class[]>();  for (  Method method : sorted) {    if ((method.getName().equals(methodName)) && (Modifier.isPublic(method.getModifiers()))) {      Class[] normalizedParameters=getMethodParameterTypesWithoutEPStatement(method);      updateMethods.put(method,normalizedParameters);    }  }  if (updateMethods.size() == 0) {    String message="Subscriber object does not provide a public method by name 'update'";    throw new EPSubscriberException(message);  }  boolean isMapArrayDelivery=false;  boolean isObjectArrayDelivery=false;  boolean isSingleRowMap=false;  boolean isSingleRowObjectArr=false;  boolean isTypeArrayDelivery=false;  for (  Map.Entry<Method,Class[]> methodNormParameterEntry : updateMethods.entrySet()) {    Class[] normalized=methodNormParameterEntry.getValue();    if (normalized.length == selectClauseTypes.length) {      boolean fits=true;      for (int i=0; i < normalized.length; i++) {        if ((selectClauseTypes[i] != null) && (selectClauseTypes[i] != normalized[i])) {          fits=false;          break;        }      }      if (fits) {        subscriptionMethod=methodNormParameterEntry.getKey();        break;      }    }  }  if (subscriptionMethod == null) {    for (    Map.Entry<Method,Class[]> methodNormParameterEntry : updateMethods.entrySet()) {      Class[] normalized=methodNormParameterEntry.getValue();      if (normalized.length == selectClauseTypes.length) {        boolean fits=true;        for (int i=0; i < normalized.length; i++) {          Class boxedExpressionType=JavaClassHelper.getBoxedType(selectClauseTypes[i]);          Class boxedParameterType=JavaClassHelper.getBoxedType(normalized[i]);          if ((boxedExpressionType != null) && (boxedExpressionType != boxedParameterType)) {            fits=false;            break;          }        }        if (fits) {          subscriptionMethod=methodNormParameterEntry.getKey();          break;        }      }    }  }  boolean checkWidening=false;  if (subscriptionMethod == null) {    for (    Map.Entry<Method,Class[]> methodNormParameterEntry : updateMethods.entrySet()) {      Class[] normalized=methodNormParameterEntry.getValue();      if (normalized.length == selectClauseTypes.length) {        boolean fits=true;        for (int i=0; i < normalized.length; i++) {          Class boxedExpressionType=JavaClassHelper.getBoxedType(selectClauseTypes[i]);          Class boxedParameterType=JavaClassHelper.getBoxedType(normalized[i]);          if ((boxedExpressionType != null) && (!JavaClassHelper.isAssignmentCompatible(boxedExpressionType,boxedParameterType))) {            fits=false;            break;          }        }        if (fits) {          subscriptionMethod=methodNormParameterEntry.getKey();          checkWidening=true;          break;        }      }    }  }  if (subscriptionMethod == null) {    for (    Map.Entry<Method,Class[]> methodNormParameterEntry : updateMethods.entrySet()) {      Class[] normalized=methodNormParameterEntry.getValue();      if ((normalized.length == 1) && (normalized[0] == Map.class)) {        isSingleRowMap=true;        subscriptionMethod=methodNormParameterEntry.getKey();        break;      }      if ((normalized.length == 1) && (normalized[0] == Object[].class)) {        isSingleRowObjectArr=true;        subscriptionMethod=methodNormParameterEntry.getKey();        break;      }      if ((normalized.length == 2) && (normalized[0] == Map[].class) && (normalized[1] == Map[].class)) {        subscriptionMethod=methodNormParameterEntry.getKey();        isMapArrayDelivery=true;        break;      }      if ((normalized.length == 2) && (normalized[0] == Object[][].class) && (normalized[1] == Object[][].class)) {        subscriptionMethod=methodNormParameterEntry.getKey();        isObjectArrayDelivery=true;        break;      }      if ((normalized.length == 2) && (normalized[0].equals(normalized[1])) && (normalized[0].isArray())&& (selectClauseTypes.length == 1)) {        Class componentType=normalized[0].getComponentType();        if (JavaClassHelper.isAssignmentCompatible(selectClauseTypes[0],componentType)) {          subscriptionMethod=methodNormParameterEntry.getKey();          isTypeArrayDelivery=true;          break;        }      }      if ((normalized.length == 0) && (selectClauseTypes.length == 1) && (selectClauseTypes[0] == null)) {        subscriptionMethod=methodNormParameterEntry.getKey();      }    }  }  if (subscriptionMethod == null) {    if (updateMethods.size() > 1) {      String parametersDesc=JavaClassHelper.getParameterAsString(selectClauseTypes);      String message="No suitable subscriber method named 'update' found, expecting a method that takes " + selectClauseTypes.length + " parameter of type "+ parametersDesc;      throw new EPSubscriberException(message);    } else {      Map.Entry<Method,Class[]> firstUpdateMethod=updateMethods.entrySet().iterator().next();      Class[] parametersNormalized=firstUpdateMethod.getValue();      String parametersDescNormalized=JavaClassHelper.getParameterAsString(selectClauseTypes);      if (parametersNormalized.length != selectClauseTypes.length) {        if (selectClauseTypes.length > 0) {          String message="No suitable subscriber method named 'update' found, expecting a method that takes " + selectClauseTypes.length + " parameter of type "+ parametersDescNormalized;          throw new EPSubscriberException(message);        } else {          String message="No suitable subscriber method named 'update' found, expecting a method that takes no parameters";          throw new EPSubscriberException(message);        }      }      for (int i=0; i < parametersNormalized.length; i++) {        Class boxedExpressionType=JavaClassHelper.getBoxedType(selectClauseTypes[i]);        Class boxedParameterType=JavaClassHelper.getBoxedType(parametersNormalized[i]);        if ((boxedExpressionType != null) && (!JavaClassHelper.isAssignmentCompatible(boxedExpressionType,boxedParameterType))) {          String message="Subscriber method named 'update' for parameter number " + (i + 1) + " is not assignable, "+ "expecting type '"+ JavaClassHelper.getParameterAsString(selectClauseTypes[i])+ "' but found type '"+ JavaClassHelper.getParameterAsString(parametersNormalized[i])+ "'";          throw new EPSubscriberException(message);        }      }    }  }  boolean firstParameterIsEPStatement=isFirstParameterEPStatement(subscriptionMethod);  if (isMapArrayDelivery) {    return firstParameterIsEPStatement ? new ResultDeliveryStrategyMapWStmt(statement,subscriber,subscriptionMethod,selectClauseColumns) : new ResultDeliveryStrategyMap(statement,subscriber,subscriptionMethod,selectClauseColumns);  } else   if (isObjectArrayDelivery) {    return firstParameterIsEPStatement ? new ResultDeliveryStrategyObjectArrWStmt(statement,subscriber,subscriptionMethod) : new ResultDeliveryStrategyObjectArr(statement,subscriber,subscriptionMethod);  } else   if (isTypeArrayDelivery) {    return firstParameterIsEPStatement ? new ResultDeliveryStrategyTypeArrWStmt(statement,subscriber,subscriptionMethod,subscriptionMethod.getParameterTypes()[1].getComponentType()) : new ResultDeliveryStrategyTypeArr(statement,subscriber,subscriptionMethod,subscriptionMethod.getParameterTypes()[0].getComponentType());  }  Method startMethod=null;  Method endMethod=null;  Method rStreamMethod=null;  try {    startMethod=subscriber.getClass().getMethod("updateStart",EPStatement.class,int.class,int.class);  } catch (  NoSuchMethodException e) {    try {      startMethod=subscriber.getClass().getMethod("updateStart",int.class,int.class);    } catch (    NoSuchMethodException ex) {    }  }  try {    endMethod=subscriber.getClass().getMethod("updateEnd",EPStatement.class);  } catch (  NoSuchMethodException e) {    try {      endMethod=subscriber.getClass().getMethod("updateEnd");    } catch (    NoSuchMethodException ex) {    }  }  try {    rStreamMethod=subscriber.getClass().getMethod("updateRStream",subscriptionMethod.getParameterTypes());  } catch (  NoSuchMethodException e) {    if (isFirstParameterEPStatement(subscriptionMethod)) {      Class[] classes=updateMethods.get(subscriptionMethod);      validateNonMatchUpdateRStream(subscriber,classes);    } else {      Class[] classes=new Class[subscriptionMethod.getParameterTypes().length + 1];      classes[0]=EPStatement.class;      System.arraycopy(subscriptionMethod.getParameterTypes(),0,classes,1,subscriptionMethod.getParameterTypes().length);      validateNonMatchUpdateRStream(subscriber,classes);    }  }  DeliveryConvertor convertor;  if (isSingleRowMap) {    convertor=firstParameterIsEPStatement ? new DeliveryConvertorMapWStatement(selectClauseColumns,statement) : new DeliveryConvertorMap(selectClauseColumns);  } else   if (isSingleRowObjectArr) {    convertor=firstParameterIsEPStatement ? new DeliveryConvertorObjectArrWStatement(statement) : DeliveryConvertorObjectArr.INSTANCE;  } else {    if (checkWidening) {      Class[] normalizedParameters=updateMethods.get(subscriptionMethod);      convertor=determineWideningDeliveryConvertor(firstParameterIsEPStatement,statement,selectClauseTypes,normalizedParameters,subscriptionMethod);    } else {      convertor=firstParameterIsEPStatement ? new DeliveryConvertorNullWStatement(statement) : DeliveryConvertorNull.INSTANCE;    }  }  return new ResultDeliveryStrategyImpl(statement,subscriber,convertor,subscriptionMethod,startMethod,endMethod,rStreamMethod);}  }
class C{  private boolean isProjectMethod(final InvokeInstruction instruction){  final MethodIdentifier identifier=instruction.getIdentifier();  return identifier.getContainingClass().startsWith(projectPackagePrefix);}  }
class C{  public void attachToMovingGrabPoint(OffsetGrabPoint gp){  gp.addGrabPoint(gpo);}  }
class C{  ActionKeyInfo(Context activityContext,AttributeSet attr){  TypedArray a=activityContext.obtainStyledAttributes(attr,com.android.internal.R.styleable.SearchableActionKey);  mKeyCode=a.getInt(com.android.internal.R.styleable.SearchableActionKey_keycode,0);  mQueryActionMsg=a.getString(com.android.internal.R.styleable.SearchableActionKey_queryActionMsg);  mSuggestActionMsg=a.getString(com.android.internal.R.styleable.SearchableActionKey_suggestActionMsg);  mSuggestActionMsgColumn=a.getString(com.android.internal.R.styleable.SearchableActionKey_suggestActionMsgColumn);  a.recycle();  if (mKeyCode == 0) {    throw new IllegalArgumentException("No keycode.");  } else   if ((mQueryActionMsg == null) && (mSuggestActionMsg == null) && (mSuggestActionMsgColumn == null)) {    throw new IllegalArgumentException("No message information.");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private String translateFunctionBody(String sourceVendorName,String sourceSchemaName,String targetVendorName,String functionLanguage,String functionReturnType,String functionBodyText){  if (functionLanguage != null)   functionLanguage=functionLanguage.trim();  if (functionReturnType != null)   functionReturnType=functionReturnType.trim();  if (functionBodyText != null)   functionBodyText=functionBodyText.trim();  if (isAttemptTranslation() || getDBVendorID(sourceVendorName) == getDBVendorID(targetVendorName))   return m_interfaces.get(getDBVendorID(targetVendorName)).translateFunctionBodyFull(s_dbEngine,sourceVendorName.toUpperCase(),sourceSchemaName,functionLanguage,functionReturnType,functionBodyText); else   return m_interfaces.get(getDBVendorID(targetVendorName)).translateFunctionBodyStub(s_dbEngine,sourceVendorName.toUpperCase(),functionLanguage,functionReturnType,functionBodyText);}  }
class C{  public static void clearFullCopiesFlags(IngestionRequestContext requestContext,Volume volume,Set<DataObject> updatedObjects,DbClient dbClient){  if (volume.getFullCopies() != null) {    for (    String volumeId : volume.getFullCopies()) {      BlockObject bo=requestContext.findDataObjectByType(Volume.class,URI.create(volumeId),true);      if (null != bo && bo instanceof Volume) {        _logger.info("Clearing internal volume flag of full copy {} of RP volume {}",bo.getLabel(),volume.getLabel());        bo.clearInternalFlags(BlockIngestOrchestrator.INTERNAL_VOLUME_FLAGS);        updatedObjects.add(bo);      }    }  }}  }
class C{  public static void reset(){  nextUniqueId=0;}  }
class C{  private CProjectTreeNode<?> findProjectContainerNode(final CProjectTreeNode<?> databaseNode){  final List<CProjectTreeNode<?>> nodes=Lists.newArrayList();  nodes.add(databaseNode);  while (!nodes.isEmpty()) {    final CProjectTreeNode<?> current=nodes.get(0);    nodes.remove(0);    if (current instanceof CProjectContainerNode) {      return current;    }    for (final Enumeration<?> e=current.children(); e.hasMoreElements(); ) {      nodes.add((CProjectTreeNode<?>)e.nextElement());    }  }  throw new IllegalStateException("IE01203: Project container node not found");}  }
class C{  public List<VerletParticle3D> createParticles(VerletPhysics3D physics,int subDiv,float step,float mass){  particles.clear();  for (  Vec3D v : toLineStrip3D(subDiv).getDecimatedVertices(step,true)) {    VerletParticle3D p=createSingleParticle(v,mass);    particles.add(p);    physics.addParticle(p);  }  return particles;}  }
class C{  private void write(Stream<InteractionWord> words){  interactionWriters.forEach(null);  words.flatMap(null).distinct().forEach(null);  interactionWriters.forEach(null);}  }
class C{  public String generateGroupName(Set<String> existingGroupNames,String storageGroupName){  String storageGroupNameTemp=storageGroupName.replaceAll(Constants.SMIS_PLUS_REGEX,Constants.HYPHEN);  _log.info("Converted storage group name from {} to {} .",storageGroupName,storageGroupNameTemp);  String result=storageGroupNameTemp;  if (existingGroupNames.contains(storageGroupNameTemp.toLowerCase())) {    int size=existingGroupNames.size();    for (int index=1; index <= size; index++) {      result=String.format("%s_%d",storageGroupNameTemp,index);      if (!existingGroupNames.contains(result.toLowerCase())) {        break;      }    }  }  _log.info(String.format("generateGroupName(existingGroupNames.size = %d, %s), returning %s",existingGroupNames.size(),storageGroupNameTemp,result));  return result;}  }
class C{  public SQLFeatureNotSupportedException(Throwable cause){  super(cause);}  }
class C{  public static String substringBetween(String str,String open,String close){  if (str != null && open != null && close != null) {    int start=str.indexOf(open);    if (start != -1) {      int end=str.indexOf(close,start + open.length());      if (end != -1) {        return str.substring(start + open.length(),end);      }    }    return null;  } else {    return null;  }}  }
class C{  private static void blockyTandemMergeSortRecursion(final double[] keySrc,final long[] valSrc,final double[] keyDst,final long[] valDst,final int grpStart,final int grpLen,final int blkSize,final int arrLim){  assert (grpLen > 0);  if (grpLen == 1)   return;  final int grpLen1=grpLen / 2;  final int grpLen2=grpLen - grpLen1;  assert (grpLen1 >= 1);  assert (grpLen2 >= grpLen1);  final int grpStart1=grpStart;  final int grpStart2=grpStart + grpLen1;  blockyTandemMergeSortRecursion(keyDst,valDst,keySrc,valSrc,grpStart1,grpLen1,blkSize,arrLim);  blockyTandemMergeSortRecursion(keyDst,valDst,keySrc,valSrc,grpStart2,grpLen2,blkSize,arrLim);  final int arrStart1=grpStart1 * blkSize;  final int arrStart2=grpStart2 * blkSize;  final int arrLen1=grpLen1 * blkSize;  int arrLen2=grpLen2 * blkSize;  if (arrStart2 + arrLen2 > arrLim)   arrLen2=arrLim - arrStart2;  tandemMerge(keySrc,valSrc,arrStart1,arrLen1,arrStart2,arrLen2,keyDst,valDst,arrStart1);}  }
class C{  private static BufferedImage makeIndexedRGBImage(final BufferedImage baseImage){  BufferedImage image=new BufferedImage(baseImage.getWidth(),baseImage.getHeight(),BufferedImage.TYPE_INT_ARGB);  Graphics2D g=image.createGraphics();  g.drawRenderedImage(baseImage,new AffineTransform());  g.dispose();  return image;}  }
class C{  private void resetEditorPanePosition(){  editorPane.setCaretPosition(0);  editorPane.setMargin(margin);}  }
class C{  public Object loadNativeFont(String lookup){  try {    lookup=lookup.split(";")[0];    int typeface=Typeface.NORMAL;    String familyName=lookup.substring(0,lookup.indexOf("-"));    String style=lookup.substring(lookup.indexOf("-") + 1,lookup.lastIndexOf("-"));    String size=lookup.substring(lookup.lastIndexOf("-") + 1,lookup.length());    if (style.equals("bolditalic")) {      typeface=Typeface.BOLD_ITALIC;    } else     if (style.equals("italic")) {      typeface=Typeface.ITALIC;    } else     if (style.equals("bold")) {      typeface=Typeface.BOLD;    }    Paint font=new CodenameOneTextPaint(Typeface.create(familyName,typeface));    font.setAntiAlias(true);    font.setTextSize(Integer.parseInt(size));    return new NativeFont(0,0,0,font);  } catch (  Exception err) {    return null;  }}  }
class C{  private void rLineTo(float dx,float dy){  if (isEmpty()) {    mPath.moveTo(mLastX=0,mLastY=0);  }  dx+=mLastX;  dy+=mLastY;  mPath.lineTo(mLastX=dx,mLastY=dy);}  }
class C{  public static java.net.URL findExistingDataConfigFile(FileStore fileStore,String fileName){  if (fileStore == null) {    String message=Logging.getMessage("nullValue.FileStoreIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (fileName == null) {    String message=Logging.getMessage("nullValue.FilePathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  java.net.URL url=fileStore.findFile(fileName,false);  if (url != null) {    return url;  }  String path=WWIO.getParentFilePath(fileName);  if (path == null || path.length() == 0) {    return null;  }  String[] names=fileStore.listFileNames(path,new DataConfigurationFilter());  if (names == null || names.length == 0) {    return null;  }  return fileStore.findFile(names[0],false);}  }
class C{  public static Exception checkForNewPackages(PrintStream... progress){  if (m_offline) {    return null;  }  Exception problem=null;  Map<String,String> localPackageNameList=getPackageList(true);  if (localPackageNameList == null) {    System.err.println("Local package list is missing, trying a " + "cache refresh to restore...");    refreshCache(progress);    localPackageNameList=getPackageList(true);    if (localPackageNameList == null) {      return null;    }  }  Map<String,String> repositoryPackageNameList=getPackageList(false);  if (repositoryPackageNameList == null) {    return null;  }  if (repositoryPackageNameList.keySet().size() != localPackageNameList.keySet().size()) {    if (repositoryPackageNameList.keySet().size() < localPackageNameList.keySet().size()) {      for (      PrintStream p : progress) {        p.println("Some packages no longer exist at the repository. " + "Refreshing cache...");      }    } else {      for (      PrintStream p : progress) {        p.println("There are new packages at the repository. " + "Refreshing cache...");      }    }    problem=refreshCache(progress);  } else {    boolean refresh=false;    for (    String localPackage : localPackageNameList.keySet()) {      String localVersion=localPackageNameList.get(localPackage);      String repoVersion=repositoryPackageNameList.get(localPackage);      if (repoVersion == null) {        continue;      }      if (!localVersion.equals(repoVersion)) {        refresh=true;        break;      }    }    if (refresh) {      for (      PrintStream p : progress) {        p.println("There are newer versions of existing packages " + "at the repository. Refreshing cache...");      }      problem=refreshCache(progress);    }  }  return problem;}  }
class C{  public boolean hasTwitchBadge(String id){  return twitchBadges != null && twitchBadges.containsKey(id);}  }
class C{  public GridLayoutAnimationController(Animation animation){  this(animation,0.5f,0.5f);}  }
class C{  protected void tearDown(){}  }
class C{  private static FileSystemLocation parseProjectLocation(){  return new File(PathManager.getHomePath(),"community/.idea").isDirectory() ? FileSystemLocation.ULTIMATE : FileSystemLocation.COMMUNITY;}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(bitmap);}  }
class C{  public static long hash64(final byte[] data,int length){  return hash64(data,length,0xe17a1465);}  }
class C{  protected void printStatusMessages(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,int coveredMethods,double fitness){  if (coveredMethods > maxCoveredMethods) {    logger.info("(Methods) Best individual covers " + coveredMethods + "/"+ totalMethods+ " methods");    maxCoveredMethods=coveredMethods;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }  if (fitness < bestFitness) {    logger.info("(Fitness) Best individual covers " + coveredMethods + "/"+ totalMethods+ " methods");    bestFitness=fitness;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }}  }
class C{  public void testDoublesCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.doubles(size).parallel().forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  @Override public boolean isModifiedImpl(){  if (_isDigestModified || _depend.isModified()) {    _changeSequence.incrementAndGet();    return true;  } else   return false;}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  public static Document parseDocument(InputStream documentXml,boolean namespaceAware) throws Exception {  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();  documentBuilderFactory.setNamespaceAware(namespaceAware);  return documentBuilderFactory.newDocumentBuilder().parse(documentXml);}  }
class C{  private static char CallCharMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallCharMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Char,false);    return Reflection.unwrapChar(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  public AbstractCpeConfigApiServlet(String type,AbstractCpeManager<T> manager,Class<? extends AbstractApiServlet> clazz){  super(LOGGER,clazz);  this.type=type;  this.manager=manager;}  }
class C{  public ProfileVisit displayName(String displayName){  this.displayName=displayName;  return this;}  }
class C{  public Boolean isEnable3DSupport(){  return enable3DSupport;}  }
class C{  private void readPageElement(IXMLElement elem) throws IOException {  for (  IXMLElement child : elem.getChildren()) {    ODGFigure figure=readElement(child);    if (figure != null) {      figures.add(figure);    }  }}  }
class C{  protected void verify(String subId,Date periods[][],BigDecimal expectedPrice,int paramTestMonth) throws Exception {  verify(subId,periods,expectedPrice,BigDecimal.ZERO,paramTestMonth,null,null);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  protected void arcImpl(float x,float y,float w,float h,float start,float stop,int mode){  showMissingWarning("arc");}  }
class C{  public static Object min(Collection coll){  Iterator i=coll.iterator();  Comparable candidate=(Comparable)(i.next());  while (i.hasNext()) {    Comparable next=(Comparable)(i.next());    if (next.compareTo(candidate) < 0)     candidate=next;  }  return candidate;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.160 -0500",hash_original_method="2B935C89EDDE71F28E7C978B3C9DCAB0",hash_generated_method="C578ECCB44A8A96163A33635B24D9E97") @DSSafe(DSCat.ANDROID_CALLBACK) @DSVerified public boolean dispatchTrackballEvent(MotionEvent ev){  if (mWindow.superDispatchTrackballEvent(ev)) {    return true;  }  return onTrackballEvent(ev);}  }
class C{  protected static boolean isPost(HttpServletRequest request){  return request.getMethod().equals("POST");}  }
class C{  public void start(){  final Map<IProject,ProjectRepositoryData> projectsToConnect=new HashMap<IProject,ProjectRepositoryData>();  log.info("Starting TFS repository manager");synchronized (projectDataLock) {    Check.isTrue(started == false,"started == false");    ResourcesPlugin.getWorkspace().addResourceChangeListener(projectCloseListener,IResourceChangeEvent.PRE_CLOSE);    final IProject[] projects=ResourcesPlugin.getWorkspace().getRoot().getProjects();    for (int i=0; i < projects.length; i++) {      final Boolean shouldConnect=shouldConnect(projects[i]);      if (shouldConnect == null) {        log.debug(MessageFormat.format("Project {0} is not managed by TFS, ignoring",projects[i].getName()));        continue;      }      final ProjectRepositoryData projectData=new ProjectRepositoryData();      projectDataMap.put(projects[i],projectData);      if (shouldConnect == Boolean.TRUE) {        projectData.setStatus(ProjectRepositoryStatus.CONNECTING);        projectsToConnect.put(projects[i],projectData);        log.info(MessageFormat.format("Connecting project {0} to TFS server",projects[i].getName()));      } else {        projectData.setStatus(ProjectRepositoryStatus.OFFLINE);        log.info(MessageFormat.format("Project {0} is offline from TFS server, will not be connected",projects[i].getName()));      }    }    started=true;  }  for (final Iterator<Entry<IProject,ProjectRepositoryData>> i=projectsToConnect.entrySet().iterator(); i.hasNext(); ) {    final Entry<IProject,ProjectRepositoryData> projectEntry=i.next();    final IProject project=projectEntry.getKey();    final ProjectRepositoryData projectData=projectEntry.getValue();    connectInternal(project,true,projectData);  }}  }
class C{  public void dispatchSVGScrollEvent() throws InterruptedException {  scriptingEnvironment.dispatchSVGScrollEvent();}  }
class C{  public static TagLib[] loadFromDirectory(Resource dir,Identification id) throws TagLibException {  if (!dir.isDirectory())   return new TagLib[0];  ArrayList<TagLib> arr=new ArrayList<TagLib>();  Resource[] files=dir.listResources(new ExtensionResourceFilter(new String[]{"tld","tldx"}));  for (int i=0; i < files.length; i++) {    if (files[i].isFile())     arr.add(TagLibFactory.loadFromFile(files[i],id));  }  return arr.toArray(new TagLib[arr.size()]);}  }
class C{  private void sendDetails(Player player,String progressType,String item){  StendhalQuestSystem questSystem=SingletonRepository.getStendhalQuestSystem();  if (progressType.equals("Open Quests") || progressType.equals("Completed Quests")) {    player.addEvent(new ProgressStatusEvent(progressType,item,questSystem.getQuestDescription(player,item),questSystem.getQuestLevelWarning(player,item),questSystem.getQuestProgressDetails(player,item)));  } else   if (progressType.equals("Production")) {    player.addEvent(new ProgressStatusEvent(progressType,item,SingletonRepository.getProducerRegister().getProductionDescription(player,item),SingletonRepository.getProducerRegister().getProductionDetails(player,item)));  }  player.notifyWorldAboutChanges();}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="WA_NOT_IN_LOOP") boolean attemptToJoin(){  SearchState state=searchState;  InternalDistributedMember coord=state.possibleCoordinator;  if (state.alreadyTried.contains(coord)) {    logger.info("Probable coordinator is still {} - waiting for a join-response",coord);  } else {    logger.info("Attempting to join the distributed system through coordinator " + coord + " using address "+ this.localAddress);    int port=services.getHealthMonitor().getFailureDetectionPort();    JoinRequestMessage req=new JoinRequestMessage(coord,this.localAddress,services.getAuthenticator().getCredentials(coord),port,services.getMessenger().getRequestId());    services.getMessenger().send(req);  }  JoinResponseMessage response;  try {    response=waitForJoinResponse();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    return false;  }  if (response == null) {    if (!isJoined) {      logger.debug("received no join response");    }    return isJoined;  }  logger.debug("received join response {}",response);  joinResponse[0]=null;  String failReason=response.getRejectionMessage();  if (failReason != null) {    if (failReason.contains("Rejecting the attempt of a member using an older version") || failReason.contains("15806")) {      throw new SystemConnectException(failReason);    } else     if (failReason.contains("Failed to find credentials")) {      throw new AuthenticationRequiredException(failReason);    }    throw new GemFireSecurityException(failReason);  }  throw new RuntimeException("Join Request Failed with response " + joinResponse[0]);}  }
class C{  public IconicsDrawableOld sizeRes(int dimenRes){  return sizePx(context.getResources().getDimensionPixelSize(dimenRes));}  }
class C{  @Override public Result compile(String[] args,String[] classNames,Context context,List<JavaFileObject> fileObjects,Iterable<? extends Processor> processors){  if (options == null) {    options=Options.instance(context);  }  filenames=new LinkedHashSet<File>();  classnames=new ListBuffer<String>();  exitState=ExitState.cmderror();  JavaCompiler comp=null;  try {    if (args.length == 0 && fileObjects.isEmpty()) {      this.exitState=ExitState.cmderror();      return CMDERR;    }    Collection<File> filenames=processArgs(CommandLine.parse(args),classNames);    if (filenames == null) {      this.exitState=ExitState.cmderror();      return CMDERR;    } else     if (filenames.isEmpty() && fileObjects.isEmpty() && classnames.isEmpty()) {      if (options.get("-help") != null || options.get("-jhelp") != null || options.get("-X") != null || options.get("-version") != null || options.get("-fullversion") != null)       return OK;      error("err.no.source.files");      this.exitState=ExitState.cmderror();      return CMDERR;    }    timer=Timer.instance(context);    timer.init();    boolean forceStdOut=options.get("stdout") != null;    if (forceStdOut) {      out.flush();      out=new PrintWriter(System.out,true);    }    context.put(Log.outKey,out);    fileManager=context.get(JavaFileManager.class);    try {      comp=LanguageCompiler.instance(context);    } catch (    Overrides.OverrideException e) {      CeylonLog.instance(context).error("ceylon.overrides",e.getMessage());      this.exitState=ExitState.cmderror();      return CMDERR;    }    if (comp == null) {      this.exitState=ExitState.systemError(null,null);      return SYSERR;    }    if (!classnames.isEmpty()) {      this.filenames.addAll(addModuleFiles(filenames));      classnames.clear();    }    if (!this.filenames.isEmpty()) {      List<JavaFileObject> otherFiles=List.nil();      JavacFileManager dfm=(JavacFileManager)fileManager;      for (      JavaFileObject fo : dfm.getJavaFileObjectsFromFiles(this.filenames)) {        otherFiles=otherFiles.append(fo);      }      fileObjects=fileObjects.prependList(otherFiles);    }    if (fileObjects.isEmpty()) {      error("err.no.source.files");      this.exitState=ExitState.cmderror();      return CMDERR;    }    comp.compile(fileObjects,classnames.toList(),processors);    int errorCount=comp.errorCount();    if (errorCount != 0) {      this.exitState=ExitState.error(comp);      return ERROR;    }  } catch (  IOException ex) {    ioMessage(ex);    this.exitState=ExitState.systemError(null,ex);    return SYSERR;  }catch (  OutOfMemoryError ex) {    resourceMessage(ex);    this.exitState=ExitState.systemError(null,ex);    return SYSERR;  }catch (  StackOverflowError ex) {    resourceMessage(ex);    this.exitState=ExitState.systemError(null,ex);    return SYSERR;  }catch (  FatalError ex) {    this.exitState=ExitState.systemError(comp,ex);    if (this.exitState.javacExitCode == SYSERR) {      feMessage(ex);    }    return this.exitState.javacExitCode;  }catch (  AnnotationProcessingError ex) {    apMessage(ex);    this.exitState=ExitState.systemError(null,ex);    return SYSERR;  }catch (  ClientCodeException ex) {    throw new RuntimeException(ex.getCause());  }catch (  PropagatedException ex) {    throw ex.getCause();  }catch (  RepositoryException ex) {    this.exitState=ExitState.abnormal(comp,ex,options);    return ABNORMAL;  }catch (  Throwable ex) {    if (comp == null || comp.errorCount() == 0 || options == null || options.get("dev") != null) {      bugMessage(ex);    }    this.exitState=ExitState.abnormal(comp,ex,options);    return ABNORMAL;  } finally {    if (comp != null)     comp.close();    filenames=null;    options=null;    if (timer != null) {      timer.end();    }    timer=null;  }  this.exitState=ExitState.ok();  return OK;}  }
class C{  public void ifPresentOrElse(IntConsumer action,Runnable emptyAction){  if (isPresent) {    action.accept(value);  } else {    emptyAction.run();  }}  }
class C{  public final double incorrect(){  return m_Incorrect;}  }
class C{  private static String produceResultsFile(TestResults actual){  File resultsFile=null;  PrintStream ps=null;  try {    String benchmarkVersion=actual.getBenchmarkVersion();    String resultsFileName=scoreCardDirName + File.separator + "Benchmark_v"+ benchmarkVersion+ "_Scorecard_for_"+ actual.getToolNameAndVersion().replace(' ','_')+ ".csv";    resultsFile=new File(resultsFileName);    FileOutputStream fos=new FileOutputStream(resultsFile,false);    ps=new PrintStream(fos);    Set<Integer> testCaseKeys=actual.keySet();    boolean fulldetails=(actual.get(testCaseKeys.iterator().next()).get(0).getSource() != null);    ps.print("# test name, category, CWE, ");    if (fulldetails)     ps.print("source, data flow, data flow filename, sink, ");    ps.print("real vulnerability, identified by tool, pass/fail, Benchmark version: " + benchmarkVersion);    Calendar c=Calendar.getInstance();    String s=String.format("%1$tY-%1$tm-%1$te",c);    ps.println(", Actual results generated: " + s);    for (    Integer expectedResultsKey : testCaseKeys) {      TestCaseResult actualResult=actual.get(expectedResultsKey.intValue()).get(0);      ps.print(actualResult.getName());      ps.print(", " + actualResult.getCategory());      ps.print(", " + actualResult.getCWE());      if (fulldetails) {        ps.print("," + actualResult.getSource());        ps.print("," + actualResult.getDataFlow());        ps.print(", " + actualResult.getDataFlowFile());        ps.print("," + actualResult.getSink());      }      boolean isreal=actualResult.isReal();      ps.print(", " + isreal);      boolean passed=actualResult.isPassed();      boolean toolresult=!(isreal ^ passed);      ps.print(", " + toolresult);      ps.println(", " + (passed ? "pass" : "fail"));    }    System.out.println("Actual results file generated: " + resultsFile.getAbsolutePath());    return resultsFile.getName();  } catch (  FileNotFoundException e) {    System.out.println("ERROR: Can't create actual results file: " + resultsFile.getAbsolutePath());  } finally {    if (ps != null)     ps.close();  }  return null;}  }
class C{  public void unbind(){  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);}  }
class C{  private static JFreeChart createChart(){  XYSeries series1=new XYSeries("Series 1");  series1.add(1.0,1.0);  series1.add(2.0,2.0);  series1.add(3.0,3.0);  XYDataset dataset=new XYSeriesCollection(series1);  return ChartFactory.createXYStepChart("Step Chart","Domain","Range",dataset,PlotOrientation.VERTICAL,true,true,true);}  }
class C{  public void testRandomlyAgainstJavaMap(){  PMap<Integer,Integer> pmap=IntTreePMap.empty();  Map<Integer,Integer> map=new HashMap<Integer,Integer>();  Random r=new Random();  for (int i=0; i < 10000; i++) {    if (pmap.size() == 0 || r.nextBoolean()) {      int k=r.nextInt(), v=r.nextInt();      assertEquals(map.containsKey(k),pmap.containsKey(k));      assertEquals(map.get(k),pmap.get(k));      map.put(k,v);      pmap=pmap.plus(k,v);    } else {      int j=r.nextInt(pmap.size());      for (      Entry<Integer,Integer> e : pmap.entrySet()) {        int k=e.getKey();        assertTrue(map.containsKey(k));        assertTrue(pmap.containsKey(k));        assertEquals(map.get(k),pmap.get(k));        assertTrue(map.entrySet().contains(e));        assertTrue(pmap.entrySet().contains(e));        UtilityTest.assertEqualsAndHash(pmap,pmap.plus(k,e.getValue()));        if (j-- == 0) {          map.remove(k);          pmap=pmap.minus(k);          assertFalse(pmap.entrySet().contains(e));        }      }    }    int k=r.nextInt();    assertEquals(map.containsKey(k),pmap.containsKey(k));    assertEquals(map.get(k),pmap.get(k));    map.remove(k);    pmap=pmap.minus(k);    String s=Integer.toString(k);    assertFalse(pmap.containsKey(s));    assertEquals(null,pmap.get(s));    assertFalse(pmap.entrySet().contains(s));    pmap=pmap.minus(s);    assertEquals(map.size(),pmap.size());    UtilityTest.assertEqualsAndHash(map,pmap);    UtilityTest.assertEqualsAndHash(map.entrySet(),pmap.entrySet());    UtilityTest.assertEqualsAndHash(pmap,IntTreePMap.from(pmap));    UtilityTest.assertEqualsAndHash(IntTreePMap.empty(),pmap.minusAll(pmap.keySet()));    UtilityTest.assertEqualsAndHash(pmap,pmap.plusAll(pmap));  }}  }
class C{  public DataSource read(InputStream input,Class<? extends Comparable<?>>... types) throws IOException {  Scanner scanner=new Scanner(input).useDelimiter("\\Z");  String content=scanner.next();  Character separator=getSetting(SEPARATOR_CHAR);  CSVTokenizer tokenizer=new CSVTokenizer(separator);  List<Token> tokens=tokenizer.tokenize(content);  Token lastToken=tokens.get(tokens.size() - 1);  if (lastToken.getType() != CSVTokenType.ROW_SEPARATOR) {    Token eof=new Token(lastToken.getEnd(),lastToken.getEnd(),CSVTokenType.ROW_SEPARATOR,"");    tokens.add(eof);  }  Map<Class<? extends Comparable<?>>,Method> parseMethods=new HashMap<Class<? extends Comparable<?>>,Method>();  for (  Class<? extends Comparable<?>> type : types) {    if (parseMethods.containsKey(type)) {      continue;    }    Method parseMethod=getParseMethod(type);    if (parseMethod != null) {      parseMethods.put(type,parseMethod);    }  }  DataTable data=new DataTable(types);  List<Comparable<?>> row=new LinkedList<Comparable<?>>();  int rowIndex=0;  int colIndex=0;  String cellContent="";  for (  Token token : tokens) {    if (token.getType() == CSVTokenType.TEXT || token.getType() == CSVTokenType.EMPTY_SPACE) {      cellContent+=token.getContent();    } else     if (token.getType() == CSVTokenType.COLUMN_SEPARATOR || token.getType() == CSVTokenType.ROW_SEPARATOR) {      if (colIndex >= types.length) {        throw new IllegalArgumentException(MessageFormat.format("Too many columns in line {0,number,integer}: got {1,number,integer}, but expected {2,number,integer}.",rowIndex + 1,colIndex + 1,types.length));      }      Class<? extends Comparable<?>> colType=types[colIndex];      Method parseMethod=parseMethods.get(colType);      Comparable<?> cell=null;      try {        cell=(Comparable<?>)parseMethod.invoke(null,cellContent.trim());      } catch (      IllegalArgumentException e) {        throw new RuntimeException(MessageFormat.format("Could not invoke method for parsing data type {0} in column {1,number,integer}.",types[colIndex].getSimpleName(),colIndex));      }catch (      IllegalAccessException e) {        throw new RuntimeException(MessageFormat.format("Could not access method for parsing data type {0} in column {1,number,integer}.",types[colIndex].getSimpleName(),colIndex));      }catch (      InvocationTargetException e) {        if (!cellContent.isEmpty()) {          throw new IOException(MessageFormat.format("Type mismatch in line {0,number,integer}, column {1,number,integer}: got \"{2}\", but expected {3} value.",rowIndex + 1,colIndex + 1,cellContent,colType.getSimpleName()));        }      }      row.add(cell);      colIndex++;      if (token.getType() == CSVTokenType.ROW_SEPARATOR) {        if (row.size() < types.length) {          throw new IllegalArgumentException(MessageFormat.format("Not enough columns in line {0,number,integer}: got {1,number,integer}, but expected {2,number,integer}.",rowIndex + 1,row.size(),types.length));        }        data.add(row);        rowIndex++;        row.clear();        colIndex=0;      }      cellContent="";    }  }  return data;}  }
class C{  protected static String[] copyAndSort(String[] input){  String[] result=new String[input.length];  System.arraycopy(input,0,result,0,input.length);  Arrays.sort(result);  return result;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public PKCS9Attributes(PKCS9Attribute[] attribs) throws IllegalArgumentException, IOException {  ObjectIdentifier oid;  for (int i=0; i < attribs.length; i++) {    oid=attribs[i].getOID();    if (attributes.containsKey(oid))     throw new IllegalArgumentException("PKCSAttribute " + attribs[i].getOID() + " duplicated while constructing "+ "PKCS9Attributes.");    attributes.put(oid,attribs[i]);  }  derEncoding=generateDerEncoding();  permittedAttributes=null;}  }
class C{  public static void showLocalImage(String path,SimpleDraweeView view){  view.setImageURI(Uri.parse("file://" + path));}  }
class C{  public void removeMetric(Class<?> klass,String name,String scope){  removeMetric(createName(klass,name,scope));}  }
class C{  protected boolean isRelinkNeeded(int[] loadedChecksums){  if (this.checksums[2] != loadedChecksums[2]) {    if (Trace.swcChecksum) {      Trace.trace("isRecompilationNeeded: calculated checksum differs from last checksum, relink");    }    return true;  }  boolean result=!areArchiveFileChecksumsEqual();  if (Trace.swcChecksum) {    Trace.trace("isRelinkNeeded: " + result);  }  return result;}  }
class C{  public PartitionedRegionException(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static double insertInOrder(TreeMap<String,Integer> ts,int N){  Stopwatch sw=new Stopwatch();  String s="cat";  for (int i=0; i < N; i++) {    s=StringUtils.nextString(s);    ts.put(s,new Integer(i));  }  return sw.elapsedTime();}  }
class C{  public static long convertAmount(final double exchangeRate,final int sourceFractionDigits,final long sourceAmount,final int targetFractionDigits){  int digitDelta=targetFractionDigits - sourceFractionDigits;  double value=((double)sourceAmount * exchangeRate);  if (digitDelta != 0) {    if (digitDelta < 0) {      for (int i=0; i < -digitDelta; i++) {        value*=0.1;      }    } else {      for (int i=0; i < digitDelta; i++) {        value*=10.0;      }    }  }  return (long)value;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void handleNotification(Notification notification,Object handback){  String notifyType=notification.getType();  if (notifyType.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) {    CompositeData cd=(CompositeData)notification.getUserData();    GarbageCollectionNotificationInfo gcNotifyInfo=GarbageCollectionNotificationInfo.from(cd);    monitor(gcNotifyInfo);    if (!gcNames.contains(gcNotifyInfo.getGcName())) {      registerDependentGcMbeans(gcNotifyInfo.getGcName());    }  }}  }
class C{  protected void createContents(){  shell=new Shell(SWT.NO_TRIM | SWT.ON_TOP);  shell.setSize(width,height);  shell.setBackground(display.getSystemColor(SWT.COLOR_DARK_MAGENTA));  shell.setLayoutData(new GridData(GridData.FILL_BOTH));  shell.setLayout(new GridLayout(1,true));  picture=new Label(shell,SWT.NULL);  picture.setLayoutData(new GridData(GridData.FILL_BOTH));  setImage();}  }
class C{  public RectangleConstraint(double w,Range h){  this(w,null,LengthConstraintType.FIXED,0.0,h,LengthConstraintType.RANGE);}  }
class C{  @Override public void run(){  Controller.controllerThread=this;  AOSExternalOptions opts=Controller.options;  AOSLogging.logger.boot();  if (opts.ENABLE_ADVICE_GENERATION) {    AOSGenerator.boot();  }  createProfilers();  if (!opts.ENABLE_RECOMPILATION) {    if (opts.ENABLE_BULK_COMPILE || opts.ENABLE_PRECOMPILE) {      Controller.options.DERIVED_MAX_OPT_LEVEL=2;      Controller.recompilationStrategy.init();    }    controllerInitDone();    AOSLogging.logger.reportThatAOSIsInNonAdaptiveMode();    return;  }  if (opts.ENABLE_PRECOMPILE) {    if (Controller.options.sampling()) {      Controller.recompilationStrategy.init();    } else     if (Controller.options.counters()) {      InvocationCounts.init();    }    Controller.osrOrganizer=new OSROrganizerThread();    Controller.osrOrganizer.start();    createCompilationThread();    controllerInitDone();    createOrganizerThreads();    AOSLogging.logger.reportThatAOSIsInReplayMode();    while (true) {      if (opts.EARLY_EXIT && opts.EARLY_EXIT_TIME < Controller.controllerClock) {        Controller.stop();      }      Object event=Controller.controllerInputQueue.deleteMin();      ((OnStackReplacementEvent)event).process();    }  }  CompilerDNA.init();  createOrganizerThreads();  createCompilationThread();  if (Controller.options.sampling()) {    Controller.recompilationStrategy.init();  } else   if (Controller.options.counters()) {    InvocationCounts.init();  }  controllerInitDone();  while (true) {    if (opts.EARLY_EXIT && opts.EARLY_EXIT_TIME < Controller.controllerClock) {      Controller.stop();    }    Object event=Controller.controllerInputQueue.deleteMin();    ((ControllerInputEvent)event).process();  }}  }
class C{  public Vertex evaluateNEW(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  Vertex newVertex=null;  newVertex=network.createVertex();  for (  Relationship argument : arguments) {    Vertex type=evaluateExpression(argument.getTarget(),variables,network,startTime,maxTime,stack);    newVertex.addRelationship(Primitive.INSTANTIATION,type);    if (!type.hasRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION)) {      Collection<Relationship> specializations=type.getRelationships(Primitive.INSTANTIATION);      if (specializations != null) {        for (        Relationship specialization : specializations) {          type.addRelationship(Primitive.SPECIALIZATION,specialization.getTarget());        }        type.addRelationship(Primitive.INSTANTIATION,Primitive.CLASSIFICATION);      }    }  }  return newVertex;}  }
class C{  protected SVGOMFEComponentTransferElement(){}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  String data=transformer.transformToString(this);  transformer.getMsgMgr().message(this,data,m_terminate);  if (m_terminate)   transformer.getErrorListener().fatalError(new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_STYLESHEET_DIRECTED_TERMINATION,null)));}  }
class C{  public final int size(){  return current_item + 1;}  }
class C{  public boolean verifyPoints(final GPInitializer initializer,final GPNode inner1,final GPNode inner2){  if (!inner1.swapCompatibleWith(initializer,inner2))   return false;  if (inner1.depth() + inner2.atDepth() > maxDepth)   return false;  if (maxSize != NO_SIZE_LIMIT) {    int inner1size=inner1.numNodes(GPNode.NODESEARCH_ALL);    int inner2size=inner2.numNodes(GPNode.NODESEARCH_ALL);    if (inner1size > inner2size) {      GPNode root2=((GPTree)(inner2.rootParent())).child;      int root2size=root2.numNodes(GPNode.NODESEARCH_ALL);      if (root2size - inner2size + inner1size > maxSize)       return false;    }  }  return true;}  }
class C{  private boolean userIgnored(User user,boolean whisper){  String setting=whisper ? "ignoredUsersWhisper" : "ignoredUsers";  return client.settings.listContains(setting,user.nick);}  }
class C{  public List<ConnectionRecord> retrieveHistory(ModeledAuthenticatedUser user,Collection<ConnectionRecordSearchTerm> requiredContents,List<ConnectionRecordSortPredicate> sortPredicates,int limit) throws GuacamoleException {  List<ConnectionRecordModel> searchResults;  if (user.getUser().isAdministrator())   searchResults=connectionRecordMapper.search(requiredContents,sortPredicates,limit); else   searchResults=connectionRecordMapper.searchReadable(user.getUser().getModel(),requiredContents,sortPredicates,limit);  return getObjectInstances(searchResults);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrspecifiedvalueremove.class,args);}  }
class C{  @SuppressWarnings("unchecked") public CAddressSpaceFilterCreator(){  super(Lists.newArrayList(new CModuleGenerator(),new CNameDescriptionGenerator<CAddressSpaceWrapper>()));}  }
class C{  public static final void writeIntArrayXml(int[] val,String name,XmlSerializer out) throws XmlPullParserException, IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"int-array");  if (name != null) {    out.attribute(null,"name",name);  }  final int N=val.length;  out.attribute(null,"num",Integer.toString(N));  for (int i=0; i < N; i++) {    out.startTag(null,"item");    out.attribute(null,"value",Integer.toString(val[i]));    out.endTag(null,"item");  }  out.endTag(null,"int-array");}  }
class C{  @Override public RegularTimePeriod previous(){  Hour result;  if (this.hour != FIRST_HOUR_IN_DAY) {    result=new Hour(this.hour - 1,this.day);  } else {    Day prevDay=(Day)this.day.previous();    if (prevDay != null) {      result=new Hour(LAST_HOUR_IN_DAY,prevDay);    } else {      result=null;    }  }  return result;}  }
class C{  private void gotoOtherLocation(){  googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(activeLatLng,15));  googleMap.addMarker(new MarkerOptions().position(activeLatLng));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public GregorianCalendar(TimeZone zone,Locale aLocale){  super(zone,aLocale);  gdate=(BaseCalendar.Date)gcal.newCalendarDate(zone);  setTimeInMillis(System.currentTimeMillis());}  }
class C{  static int precedence(ExpressionTree expression){  return TreeInfo.opPrec(((JCTree)expression).getTag());}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X509Name subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  String algorithmName=Strings.toUpperCase(signatureAlgorithm);  DERObjectIdentifier sigOID=(DERObjectIdentifier)algorithms.get(algorithmName);  if (sigOID == null) {    try {      sigOID=new DERObjectIdentifier(algorithmName);    } catch (    Exception e) {      throw new IllegalArgumentException("Unknown signature type requested");    }  }  if (subject == null) {    throw new IllegalArgumentException("subject must not be null");  }  if (key == null) {    throw new IllegalArgumentException("public key must not be null");  }  if (noParams.contains(sigOID)) {    this.sigAlgId=new AlgorithmIdentifier(sigOID);  } else   if (params.containsKey(algorithmName)) {    this.sigAlgId=new AlgorithmIdentifier(sigOID,(ASN1Encodable)params.get(algorithmName));  } else {    this.sigAlgId=new AlgorithmIdentifier(sigOID,DERNull.INSTANCE);  }  try {    ASN1Sequence seq=(ASN1Sequence)ASN1Primitive.fromByteArray(key.getEncoded());    this.reqInfo=new CertificationRequestInfo(subject,new SubjectPublicKeyInfo(seq),attributes);  } catch (  IOException e) {    throw new IllegalArgumentException("can't encode public key");  }  Signature sig;  if (provider == null) {    sig=Signature.getInstance(signatureAlgorithm);  } else {    sig=Signature.getInstance(signatureAlgorithm,provider);  }  sig.initSign(signingKey);  try {    sig.update(reqInfo.getEncoded(ASN1Encoding.DER));  } catch (  Exception e) {    throw new IllegalArgumentException("exception encoding TBS cert request - " + e);  }  this.sigBits=new DERBitString(sig.sign());}  }
class C{  private static void localCanExecFirst(Local local,Value op) throws MergeResult {switch (op.et) {case E0:    if (local.vt == Value.VT.LOCAL) {      if (op == local) {        throw SUCCESS;      }    }  break;case E1:localCanExecFirst(local,op.getOp());break;case E2:localCanExecFirst(local,op.getOp1());localCanExecFirst(local,op.getOp2());break;case En:for (Value v : op.getOps()) {localCanExecFirst(local,v);}}boolean shouldExclude=false;if (op.vt == Value.VT.INVOKE_STATIC) {InvokeExpr ie=(InvokeExpr)op;if (ie.name.equals("valueOf") && ie.owner.startsWith("Ljava/lang/") && ie.args.length == 1 && ie.args[0].length() == 1) {shouldExclude=true;}}if (!isLocationInsensitive(op.vt) && !shouldExclude) {throw FAIL;}}  }
class C{  public void removeListener(DNSListener listener){  _listeners.remove(listener);}  }
class C{  public Quaternionf div(Quaternionfc b){  return div(b,this);}  }
class C{  public static String tranDate2DateTimeStr(Date date,TimeZone timeZone){  try {    SimpleDateFormat formatter2=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",Locale.getDefault());    formatter2.setTimeZone(timeZone);    return formatter2.format(date);  } catch (  Throwable e) {    Log.e(TAG,e.toString());    return "2015-10-10";  }}  }
class C{  public static String timeStampToString(Timestamp stamp,String dateTimeFormat,TimeZone tz,Locale locale){  DateFormat dateFormat=toDateTimeFormat(dateTimeFormat,tz,locale);  return dateFormat.format(stamp);}  }
class C{  @Override public void processEvent(Monitor mon){  MonKey monKey=mon.getMonKey();  if (monKey instanceof Log4jMonKey && !isLog4jMonKey)   isLog4jMonKey=true;  if (isLog4jMonKey) {    Log4jMonKey key=(Log4jMonKey)monKey;    getBufferList().addRow(toArray(key.getLoggingEvent(),mon));  } else   super.processEvent(mon);}  }
class C{  public void testLaggedSubmit(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  s1.request=false;  TestSubscriber s2=new TestSubscriber();  s2.request=false;  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  assertEquals(1,p.submit(1));  assertTrue(p.estimateMaximumLag() >= 1);  assertTrue(p.submit(2) >= 2);  assertTrue(p.estimateMaximumLag() >= 2);  s1.sn.request(4);  assertTrue(p.submit(3) >= 3);  assertTrue(p.estimateMaximumLag() >= 3);  s2.sn.request(4);  p.submit(4);  p.close();  s2.awaitComplete();  assertEquals(4,s2.nexts);  s1.awaitComplete();  assertEquals(4,s2.nexts);}  }
class C{  public static <K,V>Map<K,V> readMap(BinaryRawReaderEx reader,@Nullable PlatformReaderBiClosure<K,V> readClo){  int cnt=reader.readInt();  Map<K,V> map=U.newHashMap(cnt);  if (readClo == null) {    for (int i=0; i < cnt; i++)     map.put((K)reader.readObjectDetached(),(V)reader.readObjectDetached());  } else {    for (int i=0; i < cnt; i++) {      IgniteBiTuple<K,V> entry=readClo.read(reader);      map.put(entry.getKey(),entry.getValue());    }  }  return map;}  }
class C{  public void quit(){  quitting=true;}  }
class C{  public static GenerationContext createSynthetic(GenerationContext parent,ExceptionHandlerBasicBlockBag ebag){  GenerationContext child=new GenerationContext();  child.cfg=new ControlFlowGraph(-100000);  child.prologue=new BasicBlock(PROLOGUE_BCI,parent.inlineSequence,parent.cfg);  child.prologue.setExceptionHandlers(ebag);  child.epilogue=new BasicBlock(EPILOGUE_BCI,parent.inlineSequence,parent.cfg);  child.epilogue.setExceptionHandlers(ebag);  child.cfg.addLastInCodeOrder(child.prologue);  child.cfg.addLastInCodeOrder(child.epilogue);  return child;}  }
class C{  public NominalToNumeric(){}  }
class C{  public void skipElement(InputNode from) throws Exception {  while (readElement(from) != null)   ;}  }
class C{  public void ReInit(SimpleCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("TableFormat \n\t ver[");  buffer.append(ver);  buffer.append("] \n\t dlgDef [");  buffer.append(dlgDef);  buffer.append("\n\t ");  buffer.append("] \n\t tbdef [ \n\t\t");  if (tbdef != null) {    buffer.append(tbdef);  }  buffer.append("\n\t relFrmFmtId [");  buffer.append(relFrmFmtId);  buffer.append("] \n\t eventsDef [ \n\t\t");  if (eventsDef != null) {    buffer.append(eventsDef.toString());  }  buffer.append("\n\t\t]");  return buffer.toString();}  }
class C{  public SourceRange cspCatchers(List<JCCatch> trees){  if ((trees == null) || !(trees.nonEmpty()))   return null;  SourceRange list_sr=new SourceRange();  for (List<JCCatch> l=trees; l.nonEmpty(); l=l.tail) {    list_sr.mergeWith(csp(l.head));  }  positions.put(trees,list_sr);  return list_sr;}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  public LabeledBorder(Border border,JComponent label){  super(border);  this.label=label;  if (label instanceof JLabel && label.getForeground() instanceof ColorUIResource) {    label.setForeground(getTitleColor());  }}  }
class C{  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){  if (entity != null) {    requestBase.setEntity(entity);  }  return requestBase;}  }
class C{  public CampoTablaVO updateCampoTabla(CampoTablaVO campoTablaVO){  DbConnection conn=getConnection();  try {    String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,campoTablaVO.getId())).toString();    DbUpdateFns.update(conn,TABLE_NAME,COLUM_NAMES_LIST,new SigiaDbInputRecord(COL_DEFS,campoTablaVO),qual.toString());    String idArea=campoTablaVO.getIdArea();    String tipoNorma=String.valueOf(campoTablaVO.getTipoNorma());    String idTblPadre=campoTablaVO.getId();    DbUpdateFns.update(conn,"update adcampodato set idarea='" + idArea + "',tiponorma="+ tipoNorma+ " where idtblpadre='"+ idTblPadre+ "'");    return campoTablaVO;  } catch (  Exception e) {    logger.error(e.getMessage());    throw new DBException(e.getMessage());  }}  }
class C{  private <T extends BlockParser>T addChild(T blockParser){  while (!getActiveBlockParser().canContain(blockParser.getBlock())) {    finalize(getActiveBlockParser());  }  getActiveBlockParser().getBlock().appendChild(blockParser.getBlock());  activateBlockParser(blockParser);  return blockParser;}  }
class C{  @Override public void mouseMoved(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());  }}  }
class C{  public UserCompanyExample(UserCompanyObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getUserId() != null) {    criteria.andUserIdEqualTo(sample.getUserId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getDepartmentId() != null) {    criteria.andGroupIdEqualTo(sample.getDepartmentId());  }}  }
class C{  public void removeListener(AgentRosterListener listener){synchronized (listeners) {    listeners.remove(listener);  }}  }
class C{  public boolean isFiFo(){  return MMPOLICY_FiFo.equals(getMMPolicy());}  }
class C{  static Thread createThread(final Runnable runnable,final String threadName,final boolean isDaemon,final int priority,final boolean doStart){  Thread thread=new Thread(runnable);  if (threadName != null) {    thread.setName(threadName);  }  thread.setDaemon(isDaemon);  if (priority >= 0) {    thread.setPriority(priority);  }  if (doStart) {    thread.start();  }  return thread;}  }
class C{  public static final byte composeEsmeDeliveryAcknowledgement(byte esmClass){  return composeMessageType(esmClass,SMPPConstant.ESMCLS_ESME_DELIVERY_ACK);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newElement;  String newElementName;  int newElementType;  String newElementValue;  doc=(Document)load("staff",true);  newElement=doc.createElement("address");  newElementName=newElement.getNodeName();  assertEquals("name","address",newElementName);  newElementType=(int)newElement.getNodeType();  assertEquals("type",1,newElementType);  newElementValue=newElement.getNodeValue();  assertNull("valueInitiallyNull",newElementValue);}  }
class C{  private synchronized void sendPastNotifications(Date currentDate,boolean currentFlag){  TimerNotification notif;  Integer notifID;  Date date;  ArrayList<Object[]> values=new ArrayList<Object[]>(timerTable.values());  for (  Object[] obj : values) {    notif=(TimerNotification)obj[TIMER_NOTIF_INDEX];    notifID=notif.getNotificationID();    date=(Date)obj[TIMER_DATE_INDEX];    while ((currentDate.after(date)) && (timerTable.containsKey(notifID))) {      if (currentFlag == true) {        if (TIMER_LOGGER.isLoggable(Level.FINER)) {          StringBuilder strb=new StringBuilder().append("sending past timer notification:").append("\n\tNotification source = ").append(notif.getSource()).append("\n\tNotification type = ").append(notif.getType()).append("\n\tNotification ID = ").append(notif.getNotificationID()).append("\n\tNotification date = ").append(date).append("\n\tNotification period = ").append(obj[TIMER_PERIOD_INDEX]).append("\n\tNotification nb of occurrences = ").append(obj[TIMER_NB_OCCUR_INDEX]).append("\n\tNotification executes at fixed rate = ").append(obj[FIXED_RATE_INDEX]);          TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"sendPastNotifications",strb.toString());        }        sendNotification(date,notif);        TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"sendPastNotifications","past timer notification sent");      }      updateTimerTable(notif.getNotificationID());    }  }}  }
class C{  @SuppressWarnings("unchecked") public void activate() throws BasicException {  List a=m_sentcat.list();  a.add(0,null);  m_CategoryModel=new ComboBoxValModel(a);  m_jCategory.setModel(m_CategoryModel);}  }
class C{  static void reset(){  needsFullReset=true;}  }
class C{  private static void clearRegionAndNotify(VM otherVM){  assertTrue("Cache is found as null ",cache != null);  Region rgn=cache.getRegion(regionName);  rgn.clear();  otherVM.invoke(null);}  }
class C{  public static Text valueOf(char c){  Text text=Text.newPrimitive(1);  text._data[0]=c;  return text;}  }
class C{  public static FetchHostResponse create(DistributionManager dm,InternalDistributedMember recipient){  FetchHostResponse m=new FetchHostResponse();  m.setRecipient(recipient);  try {    InetAddress host=null;    String bindAddress=dm.getConfig().getBindAddress();    try {      if (bindAddress != null && !bindAddress.equals(DistributionConfig.DEFAULT_BIND_ADDRESS)) {        host=InetAddress.getByName(bindAddress);      }    } catch (    UnknownHostException uhe) {    } finally {      if (host == null) {        host=SocketCreator.getLocalHost();      }    }    m.host=host;    m.isDedicatedCacheServer=CacheServerLauncher.isDedicatedCacheServer;    DistributionConfig config=dm.getSystem().getConfig();    m.name=config.getName();    m.workingDir=new File(System.getProperty("user.dir")).getAbsoluteFile();    URL url=GemFireVersion.getJarURL();    if (url == null) {      throw new IllegalStateException(LocalizedStrings.FetchHostResponse_COULD_NOT_FIND_GEMFIREJAR.toLocalizedString());    }    String path=url.getPath();    if (path.startsWith("file:")) {      path=path.substring("file:".length());    }    File gemfireJar=new File(path);    File lib=gemfireJar.getParentFile();    File product=lib.getParentFile();    m.gemfireDir=product.getCanonicalFile();  } catch (  Exception ex) {    if (dm != null && !dm.getCancelCriterion().isCancelInProgress()) {      logger.debug(ex.getMessage(),ex);    }    m.name=m.name != null ? m.name : DistributionConfig.DEFAULT_NAME;    m.host=m.host != null ? m.host : null;    m.gemfireDir=m.gemfireDir != null ? m.gemfireDir : new File("");    m.workingDir=m.workingDir != null ? m.workingDir : new File(System.getProperty("user.dir")).getAbsoluteFile();  }  return m;}  }
class C{  public Matrix inverse(){  QL.require(this.rows == this.cols,"matrix is not square");  return (new LUDecomposition(this)).solve(new Identity(rows()));}  }
class C{  public boolean isOther(){  return other;}  }
class C{  DefineCommand(Session session){  super(session);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private void commitAndResetOutput(){  throwIfCommitted();  committed=true;  output=new StringWriter();}  }
class C{  @Override protected void doAction(){  File detectTypeFile=null;  try {    JFileChooser chooser=new JFileChooser();    chooser.setCurrentDirectory(CurrentDirectory.get());    chooser.setDialogTitle(res.getString("DetectFileTypeAction.DetectFileType.Title"));    chooser.setMultiSelectionEnabled(false);    int rtnValue=chooser.showDialog(frame,res.getString("DetectFileTypeAction.DetectFileType.button"));    if (rtnValue == JFileChooser.APPROVE_OPTION) {      detectTypeFile=chooser.getSelectedFile();      CurrentDirectory.updateForFile(detectTypeFile);    }    if (detectTypeFile == null) {      return;    }    CryptoFileType fileType=CryptoFileUtil.detectFileType(new FileInputStream(detectTypeFile));    String message=null;    if (fileType != null) {      message=MessageFormat.format(res.getString("DetectFileTypeAction.DetectedFileType.message"),detectTypeFile.getName(),fileType.friendly());    } else {      StringBuffer sbRecognisedTypes=new StringBuffer();      for (      CryptoFileType type : CryptoFileType.values()) {        sbRecognisedTypes.append(MessageFormat.format("<li>{0}</li>",type.friendly()));      }      message=MessageFormat.format(res.getString("DetectFileTypeAction.NoDetectFileType.message"),detectTypeFile.getName(),sbRecognisedTypes.toString());    }    JOptionPane.showMessageDialog(frame,message,res.getString("DetectFileTypeAction.CryptographicFileType.Title"),JOptionPane.PLAIN_MESSAGE,new ImageIcon(getClass().getResource(res.getString("DetectFileTypeAction.DetectFileType.icon"))));  } catch (  FileNotFoundException ex) {    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("DetectFileTypeAction.NoReadFile.message"),detectTypeFile),res.getString("DetectFileTypeAction.DetectFileType.Title"),JOptionPane.WARNING_MESSAGE);  }catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public WFG9(int k,int l,int M){  super(k,l,M);}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder();  s.append("[");  int count=0;  int size=this.size();  for (  Object step : this) {    s.append(step);    if (count < size - 1) {      s.append(", ");    }    count++;  }  s.append("]");  return s.toString();}  }
class C{  private static int generateEventOffset(TXState txState){  long seqId=EventID.reserveSequenceId();  int offset=(int)(seqId - txState.getBaseSequenceId());  return offset;}  }
class C{  private void readTopLevelBlock(BeautiOptions options,PartitionSubstitutionModel model,List<CharSet> charSets) throws ImportException, IOException {  boolean done=false;  while (!done) {    String command=readToken(";");    if (command.equalsIgnoreCase("ENDBLOCK") || command.equalsIgnoreCase("END")) {      done=true;    } else     if (match("HSEARCH",command,2)) {      done=true;    } else     if (match("MCMC",command,4)) {      if (getLastDelimiter() != ';') {        readMCMCCommand(options);      }      done=true;    } else     if (match("MCMCP",command,5)) {      if (getLastDelimiter() != ';') {        readMCMCCommand(options);      }    } else     if (match("LSET",command,2)) {      if (getLastDelimiter() != ';') {        readLSETCommand(model);      }    } else     if (match("CHARSET",command,5)) {      if (getLastDelimiter() != ';') {        charSets.add(readCharSetCommand());      }    } else {      System.err.println("The command, '" + command + "', is not used by BEAST and has been ignored");    }  }}  }
class C{  public static String addCrsToGeoJSON(String geoJson) throws BaleenException {  if (Strings.isNullOrEmpty(geoJson)) {    return geoJson;  }  try {    Map<String,Object> geoJsonObj=MAPPER.readValue(geoJson,MAP_LIKE_TYPE);    if (geoJsonObj == null) {      throw new InvalidParameterException("Mapper returned null");    }    if (geoJsonObj.get("crs") == null) {      Map<String,Object> crs=new HashMap<>();      crs.put("type","name");      Map<String,Object> srid=new HashMap<>();      srid.put("name","EPSG:4326");      crs.put("properties",srid);      geoJsonObj.put("crs",crs);      return MAPPER.writeValueAsString(geoJsonObj);    } else {      return geoJson;    }  } catch (  Exception e) {    throw new BaleenException("Unable to parse GeoJSON",e);  }}  }
class C{  public void enableLimit(boolean flag){  joint.enableLimit(flag);}  }
class C{  public void lerp(Transform end,double alpha){  double a1=1.0 - alpha;  double x=a1 * this.x + alpha * end.x;  double y=a1 * this.y + alpha * end.y;  double rs=this.getRotation();  double re=end.getRotation();  double diff=re - rs;  if (diff < -Math.PI)   diff+=Geometry.TWO_PI;  if (diff > Math.PI)   diff-=Geometry.TWO_PI;  double a=diff * alpha + rs;  this.identity();  this.rotate(a);  this.translate(x,y);}  }
class C{  public void startAnimation(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && valueAnimator.isPaused()) {    valueAnimator.resume();    return;  }  if (valueAnimator.isRunning())   return;  valueAnimator.start();}  }
class C{  public static void loadTexture(int target,int level,int border,int fallbackFormat,int fallbackType,ETC1Texture texture){  if (fallbackFormat != GLES10.GL_RGB) {    throw new IllegalArgumentException("fallbackFormat must be GL_RGB");  }  if (!(fallbackType == GLES10.GL_UNSIGNED_SHORT_5_6_5 || fallbackType == GLES10.GL_UNSIGNED_BYTE)) {    throw new IllegalArgumentException("Unsupported fallbackType");  }  int width=texture.getWidth();  int height=texture.getHeight();  Buffer data=texture.getData();  if (isETC1Supported()) {    int imageSize=data.remaining();    GLES10.glCompressedTexImage2D(target,level,ETC1.ETC1_RGB8_OES,width,height,border,imageSize,data);  } else {    boolean useShorts=fallbackType != GLES10.GL_UNSIGNED_BYTE;    int pixelSize=useShorts ? 2 : 3;    int stride=pixelSize * width;    ByteBuffer decodedData=ByteBuffer.allocateDirect(stride * height).order(ByteOrder.nativeOrder());    ETC1.decodeImage(data,decodedData,width,height,pixelSize,stride);    GLES10.glTexImage2D(target,level,fallbackFormat,width,height,border,fallbackFormat,fallbackType,decodedData);  }}  }
class C{  static double ensureNonNegative(double value){  checkArgument(!isNaN(value));  if (value > 0.0) {    return value;  } else {    return 0.0;  }}  }
class C{  public void pickVideo(){  try {    super.pick();  } catch (  PickerException e) {    e.printStackTrace();    if (callback != null) {      callback.onError(e.getMessage());    }  }}  }
class C{  public void add(final TxState txState){  if (txState == null)   throw new IllegalArgumentException();  if (txState.tx == 0L)   throw new IllegalArgumentException();  if (txState.getReadsOnCommitTime() < 0L)   throw new IllegalArgumentException();  final TupleSerializer tupleSer=(TupleSerializer)getIndexMetadata().getTupleSerializer();  final byte[] key=tupleSer.serializeKey(txState);  if (super.contains(key)) {    throw new IllegalArgumentException("entry exists: key=" + key + ", newValue="+ txState);  }  final byte[] val=tupleSer.serializeVal(txState);  super.insert(key,val);}  }
class C{  public boolean execute(String action,CordovaArgs args,CallbackContext callbackContext) throws JSONException {  return false;}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  protected void computeIM(IntersectionMatrix im){}  }
class C{  public static byte[] saveJpeg(Bitmap src,int quality) throws ImageSaveException {  return save(src,Bitmap.CompressFormat.JPEG,quality);}  }
class C{  public static double selectIncludingZeros(final double[] arr,final int pivot){  int arrSize=arr.length;  int adj=pivot - 1;  return select(arr,0,arrSize - 1,adj);}  }
class C{  private PDFObject readDictionary(int objNum,int objGen,PDFDecrypter decrypter) throws IOException {  HashMap<String,PDFObject> hm=new HashMap<String,PDFObject>();  PDFObject name;  while ((name=readObject(objNum,objGen,decrypter)) != null) {    if (name.getType() != PDFObject.NAME) {      throw new PDFParseException("First item in dictionary must be a /Name.  (Was " + name + ")");    }    PDFObject value=readObject(objNum,objGen,decrypter);    if (value != null) {      hm.put(name.getStringValue(),value);    }  }  if (!nextItemIs(">>")) {    throw new PDFParseException("End of dictionary wasn't '>>'");  }  return new PDFObject(this,PDFObject.DICTIONARY,hm);}  }
class C{  protected int engineUpdate(byte[] in,int inOffset,int inLen,byte[] out,int outOffset) throws ShortBufferException {  throw new IllegalStateException("Cipher has not been initialized");}  }
class C{  @Override public boolean containsKey(Object key){  if (key instanceof Number) {    return containsKey(((Number)key).intValue());  }  return false;}  }
class C{  private void buildTree(Tradingdays tradingdays) throws ValueTypeException {  m_nodeMap.put(m_root,m_root.getRoot());  Collections.sort(tradingdays.getTradingdays(),Tradingday.DATE_ORDER_DESC);  for (  Tradingday tradingday : tradingdays.getTradingdays()) {    Collections.sort(tradingday.getTradestrategies(),Tradestrategy.DATE_ORDER_ASC);    addTradingday(tradingday);  }}  }
class C{  boolean alias(String src,String target){  if (src == null)   return false;  PluginHolder<T> a=registry.get(src);  if (a == null)   return false;  PluginHolder<T> b=registry.get(target);  if (b != null)   return false;  registry.put(target,a);  return true;}  }
class C{  public void testValueOfNegZeroScale(){  long a=-98374823947823578L;  BigDecimal aNumber=BigDecimal.valueOf(a);  String result="-98374823947823578";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  void scrapActiveViews(){  final View[] activeViews=this.activeViews;  final int[] activeViewTypes=this.activeViewTypes;  final boolean multipleScraps=viewTypeCount > 1;  SparseArray<View> scrapViews=currentScrapViews;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      int whichScrap=activeViewTypes[i];      activeViews[i]=null;      activeViewTypes[i]=-1;      if (!shouldRecycleViewType(whichScrap)) {        continue;      }      if (multipleScraps) {        scrapViews=this.scrapViews[whichScrap];      }      scrapViews.put(i,victim);      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {        victim.setAccessibilityDelegate(null);      }    }  }  pruneScrapViews();}  }
class C{  public TreeExpansionEvent(Object source,TreePath path){  super(source);  this.path=path;}  }
class C{  protected int findByte(byte value,int pos){  for (int i=pos; i < tail; i++) {    if (buffer[i] == value) {      return i;    }  }  return -1;}  }
class C{  public static void noSpace(String string) throws JSONException {  int i, length=string.length();  if (length == 0) {    throw new JSONException("Empty string.");  }  for (i=0; i < length; i+=1) {    if (Character.isWhitespace(string.charAt(i))) {      throw new JSONException("'" + string + "' contains a space character.");    }  }}  }
class C{  public void add(RegularTimePeriod period,BigDecimal averageTrueRange){  if (!this.isEmpty()) {    AverageTrueRangeItem item0=(AverageTrueRangeItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new AverageTrueRangeItem(period,averageTrueRange),true);}  }
class C{  public void disconnectNode(short nodeId){synchronized (connections) {    Short n=Short.valueOf(nodeId);    MessageWindow mw=messageWindows.get(n);    if (mw != null) {      mw.lock.lock();      mw.disconnected=true;      try {        mw.full.signalAll();        messageWindows.remove(n);      }  finally {        mw.lock.unlock();      }    }    NodeConnection nc=connections.get(nodeId);    if (nc != null) {      nc.nuke();    }    connections.remove(nodeId);  }}  }
class C{  void processCandidate(float[] c,int o,Vector<SiftFeature> features){  final int ORIENTATION_BINS=36;  final float ORIENTATION_BIN_SIZE=2.0f * (float)Math.PI / (float)ORIENTATION_BINS;  float[] histogram_bins=new float[ORIENTATION_BINS];  int scale=(int)Math.pow(2,o);  FloatArray2DScaleOctave octave=octaves[o];  float octave_sigma=octave.SIGMA[0] * (float)Math.pow(2.0f,c[2] / (float)octave.STEPS);  FloatArray2D gaussianMask=Filter.create_gaussian_kernel_2D_offset(octave_sigma * 1.5f,c[0] - (float)Math.floor(c[0]),c[1] - (float)Math.floor(c[1]),false);  FloatArray2D[] src=octave.getL1(Math.round(c[2]));  FloatArray2D[] gradientROI=new FloatArray2D[2];  gradientROI[0]=new FloatArray2D(gaussianMask.width,gaussianMask.width);  gradientROI[1]=new FloatArray2D(gaussianMask.width,gaussianMask.width);  int half_size=gaussianMask.width / 2;  int p=gaussianMask.width * gaussianMask.width - 1;  for (int yi=gaussianMask.width - 1; yi >= 0; --yi) {    int ra_y=src[0].width * Math.max(0,Math.min(src[0].height - 1,(int)c[1] + yi - half_size));    int ra_x=ra_y + Math.min((int)c[0],src[0].width - 1);    for (int xi=gaussianMask.width - 1; xi >= 0; --xi) {      int pt=Math.max(ra_y,Math.min(ra_y + src[0].width - 2,ra_x + xi - half_size));      gradientROI[0].data[p]=src[0].data[pt];      gradientROI[1].data[p]=src[1].data[pt];      --p;    }  }  for (int i=0; i < gradientROI[0].data.length; ++i) {    gradientROI[0].data[i]*=gaussianMask.data[i];  }  for (int i=0; i < gradientROI[0].data.length; ++i) {    int bin=Math.max(0,(int)((gradientROI[1].data[i] + Math.PI) / ORIENTATION_BIN_SIZE));    histogram_bins[bin]+=gradientROI[0].data[i];  }  int max_i=0;  for (int i=0; i < ORIENTATION_BINS; ++i) {    if (histogram_bins[i] > histogram_bins[max_i])     max_i=i;  }  float e0=histogram_bins[(max_i + ORIENTATION_BINS - 1) % ORIENTATION_BINS];  float e1=histogram_bins[max_i];  float e2=histogram_bins[(max_i + 1) % ORIENTATION_BINS];  float offset=(e0 - e2) / 2.0f / (e0 - 2.0f * e1 + e2);  float orientation=((float)max_i + offset) * ORIENTATION_BIN_SIZE - (float)Math.PI;  features.addElement(new SiftFeature(octave_sigma * scale,orientation,new float[]{c[0] * scale,c[1] * scale},createDescriptor(c,o,octave_sigma,orientation)));  for (int i=0; i < ORIENTATION_BINS; ++i) {    if (i != max_i && (max_i + 1) % ORIENTATION_BINS != i && (max_i - 1 + ORIENTATION_BINS) % ORIENTATION_BINS != i && histogram_bins[i] > 0.8 * histogram_bins[max_i]) {      e0=histogram_bins[(i + ORIENTATION_BINS - 1) % ORIENTATION_BINS];      e1=histogram_bins[i];      e2=histogram_bins[(i + 1) % ORIENTATION_BINS];      if (e0 < e1 && e2 < e1) {        offset=(e0 - e2) / 2.0f / (e0 - 2.0f * e1 + e2);        orientation=((float)i + 0.5f + offset) * ORIENTATION_BIN_SIZE - (float)Math.PI;        features.addElement(new SiftFeature(octave_sigma * scale,orientation,new float[]{c[0] * scale,c[1] * scale},createDescriptor(c,o,octave_sigma,orientation)));      }    }  }  return;}  }
class C{  public static String coolFormat(double n,int iteration){  double d=((long)n / 100) / 10.0;  boolean isRound=(d * 10) % 10 == 0;  return (d < 1000 ? ((d > 99.9 || isRound || (!isRound && d > 9.99) ? (int)d * 10 / 10 : d + "") + "" + c[iteration]) : coolFormat(d,iteration + 1));}  }
class C{  public Object extractHardRef(Object o){  return impl.extractHardRef(o);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:17.456 -0500",hash_original_method="474B729266EEB37673AA204F699AE5C3",hash_generated_method="8FF7E0C05148FA772D148D0C2C6164D0") public boolean isDefault(){  return (type == radio);}  }
class C{  public boolean isComplete(){  return this.complete;}  }
class C{  public boolean exportSelected(){  return exportSelected;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public R scan(DocTree node,P p){  return (node == null) ? null : node.accept(this,p);}  }
class C{  public void addDropListener(ActionListener l){  if (dropListener == null) {    dropListener=new EventDispatcher();  }  dropListener.addListener(l);}  }
class C{  private static String removeGeneratorVersion(@NotNull final String textToClean){  final List<String> strings=StringUtil.split(textToClean,"\n");  final Iterator<String> iterator=strings.iterator();  while (iterator.hasNext()) {    if (iterator.next().startsWith("# by generator")) {      iterator.remove();    }  }  return StringUtil.join(strings,"\n");}  }
class C{  public final boolean isFillY(){  return fillY;}  }
class C{  public static boolean cs_updown(Scs L,int sigma,Scs C,int[] parent){  int n, p, f, j, Lp[], Li[], Cp[], Ci[];  float Lx[], Cx[], alpha, beta=1, delta, gamma, w1, w2, w[], beta2=1;  if (!Scs_util.CS_CSC(L) || !Scs_util.CS_CSC(C) || parent == null)   return (false);  Lp=L.p;  Li=L.i;  Lx=L.x;  n=L.n;  Cp=C.p;  Ci=C.i;  Cx=C.x;  if ((p=Cp[0]) >= Cp[1])   return (true);  w=new float[n];  f=Ci[p];  for (; p < Cp[1]; p++)   f=Math.min(f,Ci[p]);  for (j=f; j != -1; j=parent[j])   w[j]=0;  for (p=Cp[0]; p < Cp[1]; p++)   w[Ci[p]]=Cx[p];  for (j=f; j != -1; j=parent[j]) {    p=Lp[j];    alpha=w[j] / Lx[p];    beta2=beta * beta + sigma * alpha * alpha;    if (beta2 <= 0)     break;    beta2=(float)Math.sqrt(beta2);    delta=(sigma > 0) ? (beta / beta2) : (beta2 / beta);    gamma=sigma * alpha / (beta2 * beta);    Lx[p]=delta * Lx[p] + ((sigma > 0) ? (gamma * w[j]) : 0);    beta=beta2;    for (p++; p < Lp[j + 1]; p++) {      w1=w[Li[p]];      w[Li[p]]=w2=w1 - alpha * Lx[p];      Lx[p]=delta * Lx[p] + gamma * ((sigma > 0) ? w1 : w2);    }  }  return (beta2 > 0);}  }
class C{  public final void addTypeClass(TypeClass typeclass){  this.typeClasses.put(typeclass.getName(),typeclass);}  }
class C{  public Lookup(String name) throws TextParseException {  this(Name.fromString(name),Type.A,DClass.IN);}  }
class C{  public long putStreamOptimizedDisk(String filePath,InputStream inputStream) throws IOException, VmdkFormatException {  StreamVmdkReader disk=getStreamVmdkReader(inputStream);  DiskWriter writer=null;  try {    writer=putDisk(filePath,disk.getAdapterType(),disk.getCapacityInSectors());    writer.writeDdb(disk.getDdb());    byte[] grain=new byte[disk.getGrainSize() * SparseUtil.DISKLIB_SECTOR_SIZE];    int grainSize=disk.getNextGrain(grain);    int grainCount=0;    while (grainSize >= 0) {      grainCount++;      if (0 == (grainCount % 1000)) {        logger.debug("NfcClient putStreamOptimizedDisk for file {} preparing to write grain count/size {}/{}",filePath,grainCount,grainSize);      }      if (grainSize > 0) {        long lba=disk.getCurrentLba();        for (int offset=0; offset < grainSize; offset+=SparseUtil.DISKLIB_SECTOR_SIZE) {          writer.writeGrain(lba++,grain,offset);        }      }      grainSize=disk.getNextGrain(grain);    }    logger.debug("NfcClient putStreamOptimizedDisk for file {} write complete on grain count/size {}/{}",filePath,grainCount,grainSize);    writer.finalizeWrite();    close();    return disk.getCapacityInSectors() * SparseUtil.DISKLIB_SECTOR_SIZE;  } catch (  SocketException e) {    logger.error("Remote host closed connection while uploading to datastore (could be of out of space): {}",e);    throw e;  } finally {    if (writer != null) {      writer.close();    }    abort();  }}  }
class C{  public void sync(MemChunkHolder<NonVolatileMemAllocator> mchunk){  m_nvmasvc.sync(m_nid,getChunkAddress(mchunk),0L,true);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void animateHierarchy(final int duration){  animateHierarchy(duration,false,255,true);}  }
class C{  private void notifyDbSvcWithObsoleteCassandraPeers(String svcName,List<String> peerList){  String result=StringUtils.join(peerList.iterator(),",");  updateDbSvcConfig(svcName,Constants.OBSOLETE_CASSANDRA_PEERS,result);}  }
class C{  public DisplacementAttackAction(int entityId,int targetId,Coords targetPos){  super(entityId,targetId);  this.targetPos=targetPos;}  }
class C{  public boolean add(OMGraphic shape){  boolean ret=false;  try {    if (typeMatches(shape)) {      ret=graphics.add(shape);      addExtents(((EsriGraphic)shape).getExtents());    } else     if (shape instanceof OMPoly) {      EsriPolyline eg=convert((OMPoly)shape);      if (typeMatches(eg)) {        ret=graphics.add(eg);        addExtents(eg.getExtents());      }    } else     if (shape instanceof OMLine) {      OMPoly omp=EsriPolylineList.convert((OMLine)shape);      if (omp != null) {        EsriPolyline eg=convert(omp);        if (typeMatches(eg)) {          ret=graphics.add(eg);          addExtents(eg.getExtents());        }      }    } else     if (shape instanceof OMGraphicList && !((OMGraphicList)shape).isVague()) {      for (Iterator<OMGraphic> it=((OMGraphicList)shape).iterator(); it.hasNext(); ) {        add((OMGraphic)it.next());      }      ret=true;    } else {      Debug.message("esri","EsriPolygonList.add()- graphic isn't a EsriPoly or OMPoly, can't add.");    }  } catch (  ClassCastException cce) {  }  return ret;}  }
class C{  public void addPvChangeListener(PvChangeListener l){  addPvChangeListener(l,PvChangeEvent.PV_ALLEVENTS);}  }
class C{  protected void unregisterListener(LocationListener listener){  mLocationManager.removeUpdates(listener);}  }
class C{  private boolean keyChainContainsPrivateKey(Collection<byte[]> unencryptedPrivateKeys,ECKey keyToAdd,CharSequence walletPassword) throws KeyCrypterException {  if (unencryptedPrivateKeys == null || keyToAdd == null) {    return false;  } else {    byte[] unencryptedKeyToAdd=new byte[0];    if (keyToAdd.isEncrypted()) {      unencryptedKeyToAdd=keyToAdd.getKeyCrypter().decrypt(keyToAdd.getEncryptedPrivateKey(),keyToAdd.getKeyCrypter().deriveKey(walletPassword));    }    for (    byte[] loopEncryptedPrivateKey : unencryptedPrivateKeys) {      if (Arrays.equals(unencryptedKeyToAdd,loopEncryptedPrivateKey)) {        return true;      }    }    return false;  }}  }
class C{  public boolean hasString(){  return (null != m_strCache);}  }
class C{  public boolean exists(String key,boolean ignoreCase){  if (ignoreCase)   key=key.toLowerCase();  for (  String existKey : this.getKeys(true)) {    if (ignoreCase)     existKey=existKey.toLowerCase();    if (existKey.equals(key))     return true;  }  return false;}  }
class C{  public void distributeImage(ImageProxy image){  final long timestamp=image.getTimestamp();  try {    while (true) {      if (mGlobalTimestampBufferQueue.getNext() > timestamp) {        break;      }    }  } catch (  InterruptedException e) {    image.close();    return;  }catch (  BufferQueue.BufferQueueClosedException e) {  }  List<BufferQueueController<ImageProxy>> streamsToReceiveImage=new ArrayList<>();  Set<DispatchRecord> deadRecords=new HashSet<>();  Set<DispatchRecord> recordsToProcess;synchronized (mDispatchTable) {    recordsToProcess=new HashSet<>(mDispatchTable);  }  for (  DispatchRecord dispatchRecord : recordsToProcess) {    if (dispatchRecord.timestampBufferQueue.isClosed() || dispatchRecord.imageStream.isClosed()) {      deadRecords.add(dispatchRecord);    }    Long requestedImageTimestamp=dispatchRecord.timestampBufferQueue.peekNext();    while (requestedImageTimestamp != null && requestedImageTimestamp < timestamp) {      mLogger.e(String.format("Image (%d) expected, but never received!  Instead, " + "received (%d)!  This is likely a camera driver error.",requestedImageTimestamp,timestamp),new RuntimeException());      dispatchRecord.timestampBufferQueue.discardNext();      requestedImageTimestamp=dispatchRecord.timestampBufferQueue.peekNext();    }    if (requestedImageTimestamp == null) {      continue;    }    if (requestedImageTimestamp == timestamp) {      dispatchRecord.timestampBufferQueue.discardNext();      streamsToReceiveImage.add(dispatchRecord.imageStream);    }  }synchronized (mDispatchTable) {    mDispatchTable.removeAll(deadRecords);  }  int streamsToReceiveImageSize=streamsToReceiveImage.size();  if (streamsToReceiveImageSize == 0) {    image.close();    return;  }  RefCountedImageProxy sharedImage=new RefCountedImageProxy(image,streamsToReceiveImageSize);  for (  BufferQueueController<ImageProxy> outputStream : streamsToReceiveImage) {    ImageProxy singleCloseImage=new SingleCloseImageProxy(sharedImage);    outputStream.update(singleCloseImage);  }}  }
class C{  public static void main(String... args){  int verbosity;  int k;  verbosity=Messages;  k=0;  if (args[0].startsWith("--level=")) {    if (args[0].endsWith("=Silent"))     verbosity=Silent; else     if (args[0].endsWith("=Summary"))     verbosity=Summary; else     if (args[0].endsWith("=TestNames"))     verbosity=TestNames; else     if (args[0].endsWith("=Messages"))     verbosity=Messages; else {      System.err.printf("Unknown verbosity level: %s%n",args[0]);      System.exit(1);    }    k=1;  } else   if (args[0].startsWith("--")) {    System.err.printf("Unknown option: %s%n",args[0]);    System.exit(1);  }  List<Class<?>> classes=new ArrayList<Class<?>>();  while (k < args.length) {    try {      classes.add(Class.forName(args[k]));      k+=1;    } catch (    ClassNotFoundException e) {      System.err.printf("Unknown class: %s%n",args[k]);      System.exit(1);    }  }  System.exit(runClasses(verbosity,classes));}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRESH_NEWS_CACHE'";  db.execSQL(sql);}  }
class C{  public BinarySerializer(){  this(null);}  }
class C{  private String matchDbConnection(Connection conn,Element dbMatchersElement) throws SQLException {  String dbProductName=conn.getMetaData().getDatabaseProductName();  NodeList dbMatchers=dbMatchersElement.getElementsByTagName("dbMatcher");  for (int i=0; i < dbMatchers.getLength(); i++) {    Element dbMatcher=(Element)dbMatchers.item(i);    String dbMatchName=dbMatcher.getAttribute("db");    Pattern dbProductPattern=Pattern.compile(dbMatcher.getAttribute("databaseProductName"),Pattern.CASE_INSENSITIVE);    if (dbProductPattern.matcher(dbProductName).find()) {      return dbMatchName;    }  }  return null;}  }
class C{  public Timer(){  startTime=System.currentTimeMillis();  running=true;}  }
class C{  public MemLiteral(Object creator,String label,String lang){  super(label,lang);  this.creator=creator;}  }
class C{  public CircleBuilder radius(double radius,DistanceUnit unit){  this.unit=unit;  this.radius=radius;  return this;}  }
class C{  public static Pattern checkCorsSettingForRegex(String corsSetting){  if (corsSetting == null) {    return null;  }  int len=corsSetting.length();  boolean isRegex=len > 2 && corsSetting.startsWith("/") && corsSetting.endsWith("/");  if (isRegex) {    return Pattern.compile(corsSetting.substring(1,corsSetting.length() - 1));  }  return null;}  }
class C{  private void verifyVcenterCascadeTenancy(Vcenter vcenter){  if (vcenter.getCascadeTenancy()) {    Set<URI> uris=_permissionsHelper.getUsageURIsFromAcls(vcenter.getAcls());    if (uris.size() > 1) {      throw APIException.badRequests.cannotShareVcenterWithMultipleTenants(vcenter.getLabel());    }  }}  }
class C{  public static KnowledgeModelNode serializableInstance(){  return new KnowledgeModelNode("X");}  }
class C{  @Override public boolean isEnabled(){  return getApplication().isEnabled() && (getActiveView() == null || getActiveView().isEnabled()) && this.enabled;}  }
class C{  public String globalInfo(){  return "Outputs the predictions in plain text.";}  }
class C{  public VcfEvalParamsBuilder baseLineFile(final File baseline){  mBaselineFile=baseline;  return self();}  }
class C{  private Type(final int sort){  this.sort=sort;  this.len=1;}  }
class C{  public URIResolver createURIResolver(SVGDocument doc,DocumentLoader dl){  return new SVG12URIResolver(doc,dl);}  }
class C{  private boolean isParent(Relation<V> relation,Cluster<SubspaceModel> parent,Iter<Cluster<SubspaceModel>> iter,int db_dim){  Subspace s_p=parent.getModel().getSubspace();  NumberVector parent_centroid=ProjectedCentroid.make(s_p.getDimensions(),relation,parent.getIDs());  int subspaceDim_parent=db_dim - s_p.dimensionality();  for (; iter.valid(); iter.advance()) {    Cluster<SubspaceModel> child=iter.get();    Subspace s_c=child.getModel().getSubspace();    NumberVector child_centroid=ProjectedCentroid.make(s_c.getDimensions(),relation,child.getIDs());    long[] commonPreferenceVector=BitsUtil.andCMin(s_p.getDimensions(),s_c.getDimensions());    int subspaceDim=subspaceDimensionality(parent_centroid,child_centroid,s_p.getDimensions(),s_c.getDimensions(),commonPreferenceVector);    if (subspaceDim == subspaceDim_parent) {      return true;    }  }  return false;}  }
class C{  public boolean isStale(){  assertOpen();  try {    this.inbuffer.isDataAvailable(1);    return false;  } catch (  IOException ex) {    return true;  }}  }
class C{  @Override protected int select() throws Exception {  return selector.select();}  }
class C{  public void openSRX(){  if (TalonSRX_GUI.INSTANCE == null)   TalonSRX_GUI.create();}  }
class C{  @Override public boolean equals(Object obj){  return obj instanceof BuddhistCalendar && super.equals(obj);}  }
class C{  public void addTableModelListener(TableModelListener l){  if (getModel() != null)   ((ArffTableModel)getModel()).addTableModelListener(l);}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  public void testNoCallback() throws Exception {  socketRpcServer.registerService(new FakeServiceImpl(REQUEST));  FakeSocket socket=new FakeSocket(false).withRequest(RPC_REQUEST);  runHandler(socket);  assertFalse(socket.getResponse().getCallback());}  }
class C{  public static String scheduleService(HttpServletRequest request,HttpServletResponse response){  Security security=(Security)request.getAttribute("security");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Locale locale=UtilHttp.getLocale(request);  TimeZone timeZone=UtilHttp.getTimeZone(request);  Map<String,Object> params=UtilHttp.getParameterMap(request);  String jobName=(String)params.remove("JOB_NAME");  String serviceName=(String)params.remove("SERVICE_NAME");  String poolName=(String)params.remove("POOL_NAME");  String serviceTime=(String)params.remove("SERVICE_TIME");  String serviceEndTime=(String)params.remove("SERVICE_END_TIME");  String serviceFreq=(String)params.remove("SERVICE_FREQUENCY");  String serviceIntr=(String)params.remove("SERVICE_INTERVAL");  String serviceCnt=(String)params.remove("SERVICE_COUNT");  String retryCnt=(String)params.remove("SERVICE_MAXRETRY");  Map<String,Integer> freqMap=new HashMap<String,Integer>();  freqMap.put("SECONDLY",Integer.valueOf(1));  freqMap.put("MINUTELY",Integer.valueOf(2));  freqMap.put("HOURLY",Integer.valueOf(3));  freqMap.put("DAILY",Integer.valueOf(4));  freqMap.put("WEEKLY",Integer.valueOf(5));  freqMap.put("MONTHLY",Integer.valueOf(6));  freqMap.put("YEARLY",Integer.valueOf(7));  long startTime=(new Date()).getTime();  long endTime=0;  int maxRetry=-1;  int count=1;  int interval=1;  int frequency=RecurrenceRule.DAILY;  StringBuilder errorBuf=new StringBuilder();  if (serviceName == null) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.must_specify_service",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  ModelService modelService=null;  try {    modelService=dispatcher.getDispatchContext().getModelService(serviceName);  } catch (  GenericServiceException e) {    Debug.logError(e,"Error looking up ModelService for serviceName [" + serviceName + "]",module);    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.error_modelservice_for_srv_name",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + " [" + serviceName+ "]: "+ e.toString());    return "error";  }  if (modelService == null) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_name_not_find",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + " [" + serviceName+ "]");    return "error";  }  Map<String,Object> serviceContext=new HashMap<String,Object>();  Iterator<String> ci=modelService.getInParamNames().iterator();  while (ci.hasNext()) {    String name=ci.next();    if ("userLogin".equals(name))     continue;    if ("locale".equals(name))     continue;    Object value=request.getParameter(name);    if (value == null) {      value=request.getAttribute(name);    }    if (value == null) {      value=request.getSession().getAttribute(name);    }    if (value == null) {      continue;    }    if (value instanceof String && ((String)value).length() == 0) {      value=null;    }    serviceContext.put(name,value);  }  serviceContext=modelService.makeValid(serviceContext,ModelService.IN_PARAM,true,null,timeZone,locale);  if (userLogin != null) {    serviceContext.put("userLogin",userLogin);  }  if (locale != null) {    serviceContext.put("locale",locale);  }  if (!modelService.export && !security.hasPermission("SERVICE_INVOKE_ANY",request.getSession())) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.not_authorized_to_call",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  if (UtilValidate.isNotEmpty(serviceTime)) {    try {      Timestamp ts1=Timestamp.valueOf(serviceTime);      startTime=ts1.getTime();    } catch (    IllegalArgumentException e) {      try {        startTime=Long.parseLong(serviceTime);      } catch (      NumberFormatException nfe) {        String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.invalid_format_time",locale);        errorBuf.append(errMsg);      }    }    if (startTime < (new Date()).getTime()) {      String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_time_already_passed",locale);      errorBuf.append(errMsg);    }  }  if (UtilValidate.isNotEmpty(serviceEndTime)) {    try {      Timestamp ts1=Timestamp.valueOf(serviceEndTime);      endTime=ts1.getTime();    } catch (    IllegalArgumentException e) {      try {        endTime=Long.parseLong(serviceTime);      } catch (      NumberFormatException nfe) {        String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.invalid_format_time",locale);        errorBuf.append(errMsg);      }    }    if (endTime < (new Date()).getTime()) {      String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_time_already_passed",locale);      errorBuf.append(errMsg);    }  }  if (UtilValidate.isNotEmpty(serviceIntr)) {    try {      interval=Integer.parseInt(serviceIntr);    } catch (    NumberFormatException nfe) {      String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.invalid_format_interval",locale);      errorBuf.append(errMsg);    }  }  if (UtilValidate.isNotEmpty(serviceCnt)) {    try {      count=Integer.parseInt(serviceCnt);    } catch (    NumberFormatException nfe) {      String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.invalid_format_count",locale);      errorBuf.append(errMsg);    }  }  if (UtilValidate.isNotEmpty(serviceFreq)) {    int parsedValue=0;    try {      parsedValue=Integer.parseInt(serviceFreq);      if (parsedValue > 0 && parsedValue < 8)       frequency=parsedValue;    } catch (    NumberFormatException nfe) {      parsedValue=0;    }    if (parsedValue == 0) {      if (!freqMap.containsKey(serviceFreq.toUpperCase())) {        String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.invalid_format_frequency",locale);        errorBuf.append(errMsg);      } else {        frequency=freqMap.get(serviceFreq.toUpperCase()).intValue();      }    }  }  if (UtilValidate.isNotEmpty(retryCnt)) {    int parsedValue=-2;    try {      parsedValue=Integer.parseInt(retryCnt);    } catch (    NumberFormatException e) {      parsedValue=-2;    }    if (parsedValue > -2) {      maxRetry=parsedValue;    } else {      maxRetry=modelService.maxRetry;    }  } else {    maxRetry=modelService.maxRetry;  }  if (errorBuf.length() > 0) {    request.setAttribute("_ERROR_MESSAGE_",errorBuf.toString());    return "error";  }  Map<String,Object> syncServiceResult=null;  try {    if (null != request.getParameter("_RUN_SYNC_") && request.getParameter("_RUN_SYNC_").equals("Y")) {      syncServiceResult=dispatcher.runSync(serviceName,serviceContext);    } else {      dispatcher.schedule(jobName,poolName,serviceName,serviceContext,startTime,frequency,interval,count,endTime,maxRetry);    }  } catch (  GenericServiceException e) {    String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_dispatcher_exception",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg + e.getMessage());    return "error";  }  String errMsg=UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.service_scheduled",locale);  request.setAttribute("_EVENT_MESSAGE_",errMsg);  if (null != syncServiceResult) {    request.getSession().setAttribute("_RUN_SYNC_RESULT_",syncServiceResult);    return "sync_success";  }  return "success";}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.745 -0500",hash_original_method="D40C73AF8AE1E0F0F229FF274F9DE7E5",hash_generated_method="14CB1ECB646B90D7A8DFB5948E78C4F9") private static void checkXYSign(int x,int y){  if (x < 0) {    throw new IllegalArgumentException("x must be >= 0");  }  if (y < 0) {    throw new IllegalArgumentException("y must be >= 0");  }}  }
class C{  public SymbolBitmapFactory(String symbolCode,SparseArray<String> modifiers,SparseArray<String> attributes,PlacemarkAttributes placemarkAttributes){  this.symbolCode=symbolCode;  this.modifiers=modifiers != null ? modifiers.clone() : null;  this.attributes=attributes != null ? attributes.clone() : null;  this.placemarkAttributes=placemarkAttributes;}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public void treeNodesChanged(TreeModelEvent e){}  }
class C{  public List<SootMethod> clinitsOf(SootClass cl){  List<SootMethod> ret=new ArrayList<SootMethod>();  while (true) {    addMethod(ret,cl,sigClinit);    if (!cl.hasSuperclass())     break;    cl=cl.getSuperclass();  }  return ret;}  }
class C{  synchronized void save(){  try {    getDelegator().writeToFile(Application.mainActivity);    Application.getTaskStorage().writeToFile(Application.mainActivity);  } catch (  IOException e) {    Log.e(DEBUG_TAG,"Problem saving",e);  }}  }
class C{  public DbSchemaChanger beginChange() throws Exception {  backupFile=File.createTempFile("dataobj",".class");  log.info("copy from {} to {}",classFile.getAbsolutePath(),backupFile.getAbsolutePath());  copyFile(classFile,backupFile);  cc.defrost();  return this;}  }
class C{  public synchronized void removeSeries(int index){  mSeries.remove(index);}  }
class C{  private void buildClusterer() throws Exception {  if (m_trainingSet.classIndex() < 0) {    m_Clusterer.buildClusterer(m_trainingSet);  } else {    Remove removeClass=new Remove();    removeClass.setAttributeIndices("" + (m_trainingSet.classIndex() + 1));    removeClass.setInvertSelection(false);    removeClass.setInputFormat(m_trainingSet);    Instances clusterTrain=Filter.useFilter(m_trainingSet,removeClass);    m_Clusterer.buildClusterer(clusterTrain);  }}  }
class C{  public JobDetail selectJobForTrigger(Connection conn,ClassLoadHelper loadHelper,TriggerKey triggerKey) throws ClassNotFoundException, SQLException {  return selectJobForTrigger(conn,loadHelper,triggerKey,true);}  }
class C{  public void deregister(){  if (sysNameList.isEmpty()) {    return;  }  Enumeration<NamedBeanHandle<Sensor>> en=indication.keys();  while (en.hasMoreElements()) {    NamedBeanHandle<Sensor> namedSensor=en.nextElement();    namedSensor.getBean().removePropertyChangeListener(this);    if (log.isDebugEnabled()) {      log.debug("Removing listener from Sensor: " + namedSensor.getName() + " for Route: "+ (indication.get(namedSensor)).getSystemName());    }  }  indication=new Hashtable<NamedBeanHandle<Sensor>,Route>();}  }
class C{  public boolean intersects(float left,float top,float right,float bottom){  return this.left < right && left < this.right && this.top < bottom && top < this.bottom;}  }
class C{  private void assertNotRecursingTopic(Object topicObject){  Assert.assertTrue(false,Thread.currentThread() + " attempting to lock topic " + topicObject+ " while locking topic "+ this.currentTopic);}  }
class C{  @Override protected void _begin(long ptr){}  }
class C{  @Override public boolean isSameRM(XAResource xares){  debugCode("isSameRM(xares);");  return xares == this;}  }
class C{  public boolean visit(EnumDeclaration node){  return true;}  }
class C{  private void showCharacterCodes(String str) throws IOException {  FontUtilities.showString(getFont(),str,Lookup.getInstance().getTable("PDFLatin"),this);}  }
class C{  private DomainHierarchy invalidate(DomainHierarchy hierarchy,boolean force) throws ScopeException {  if (hierarchy != null) {    ReentrantLock lock=hierarchies.lock(hierarchy.getRoot().getDomain().getId());    try {      if (!force) {        DomainHierarchy check=hierarchies.get(hierarchy.getRoot().getDomain().getId());        if (check != hierarchy || check.isValid()) {          return check;        }      }      DomainHierarchy check=hierarchies.remove(hierarchy.getRoot().getDomain().getId());      if (check != null) {        logger.info("Invalidation hierarchy for domain " + hierarchy.getRoot().getDomain().getName());        check.cancel();        return null;      } else {        return check;      }    }  finally {      lock.unlock();    }  } else {    return null;  }}  }
class C{  public static int toIntValue(String str,int defaultValue){  return (int)toDoubleValue(str,false,defaultValue);}  }
class C{  public static final void enhance(FloatArray2D src,float scale){  float min=Float.MAX_VALUE;  float max=Float.MIN_VALUE;  for (int i=0; i < src.data.length; ++i) {    if (src.data[i] < min)     min=src.data[i]; else     if (src.data[i] > max)     max=src.data[i];  }  scale/=(max - min);  for (int i=0; i < src.data.length; ++i)   src.data[i]=scale * (src.data[i] - min);}  }
class C{  public float bezierTangent(float a,float b,float c,float d,float t){  return g.bezierTangent(a,b,c,d,t);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.add_command:    String command=commandInput.getText().toString().trim();  if (!command.startsWith("/")) {    command="/" + command;  }commands.add(command);commandsAdapter.notifyDataSetChanged();commandInput.setText("/");break;case R.id.channels:Intent channelIntent=new Intent(this,AddChannelActivity.class);channelIntent.putExtra(Extra.CHANNELS,channels);startActivityForResult(channelIntent,REQUEST_CODE_CHANNELS);break;case R.id.commands:Intent commandsIntent=new Intent(this,AddCommandsActivity.class);commandsIntent.putExtra(Extra.COMMANDS,commands);startActivityForResult(commandsIntent,REQUEST_CODE_COMMANDS);break;case R.id.add:save();break;case R.id.cancel:setResult(RESULT_CANCELED);finish();break;}}  }
class C{  public void performUpgrade(Connection conn,String pathToScriptFiles,DatabaseVersionInfo toVersion,String dbType,PrintStream out) throws Exception {  DatabaseVersionInfo currentSchemaVersion=getCurrentSchemaVersion(conn);  out.println("Current database schema version is: " + currentSchemaVersion.toString());  List<File> scriptFilesFromDirectory=getScriptFilesFromDirectory(pathToScriptFiles,dbType);  List<File> fileExecutionOrder=getFileExecutionOrder(scriptFilesFromDirectory,currentSchemaVersion,toVersion);  executeScriptFiles(conn,fileExecutionOrder,out);}  }
class C{  public StringLiteral createStringLiteral(){  StringLiteralImpl stringLiteral=new StringLiteralImpl();  return stringLiteral;}  }
class C{  public Word toWord(){  return new Word(value);}  }
class C{  XSLTAttributeDef(String namespace,String name,boolean required,boolean supportsAVT,boolean prefixedQNameValAllowed,int errorType,String k1,int v1,String k2,int v2,String k3,int v3){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=prefixedQNameValAllowed ? this.T_ENUM_OR_PQNAME : this.T_ENUM;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  m_enums=new StringToIntTable(3);  m_enums.put(k1,v1);  m_enums.put(k2,v2);  m_enums.put(k3,v3);}  }
class C{  public NewCookie(String name,String value,String path,String domain,int version,String comment,int maxAge,boolean secure,boolean httpOnly){  super(name,value,path,domain,version);  this.comment=comment;  this.maxAge=maxAge;  this.secure=secure;  this.httpOnly=httpOnly;}  }
class C{  public static byte[] encodeBase64(byte[] binaryData,boolean isChunked){  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  int encodedDataLength=0;  int nbrChunks=0;  if (fewerThan24bits != 0) {    encodedDataLength=(numberTriplets + 1) * 4;  } else {    encodedDataLength=numberTriplets * 4;  }  if (isChunked) {    nbrChunks=(CHUNK_SEPARATOR.length == 0 ? 0 : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));    encodedDataLength+=nbrChunks * CHUNK_SEPARATOR.length;  }  encodedData=new byte[encodedDataLength];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  int nextSeparatorIndex=CHUNK_SIZE;  int chunksSoFar=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];    encodedIndex+=4;    if (isChunked) {      if (encodedIndex == nextSeparatorIndex) {        System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedIndex,CHUNK_SEPARATOR.length);        chunksSoFar++;        nextSeparatorIndex=(CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);        encodedIndex+=CHUNK_SEPARATOR.length;      }    }  }  dataIndex=i * 3;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  if (isChunked) {    if (chunksSoFar < nbrChunks) {      System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedDataLength - CHUNK_SEPARATOR.length,CHUNK_SEPARATOR.length);    }  }  return encodedData;}  }
class C{  public Fraction pow(final int power){  if (power == 1) {    return this;  } else   if (power == 0) {    return ONE;  } else   if (power < 0) {    if (power == Integer.MIN_VALUE) {      return this.invert().pow(2).pow(-(power / 2));    }    return this.invert().pow(-power);  } else {    final Fraction f=this.multiplyBy(this);    if (power % 2 == 0) {      return f.pow(power / 2);    }    return f.pow(power / 2).multiplyBy(this);  }}  }
class C{  protected void sequence_Group(ISerializationContext context,Group semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void paint(Graphics2D g2d){  if (isVisible) {    super.paint(g2d);  }}  }
class C{  public BytesReference templateSource(){  return templateSource;}  }
class C{  public static TableType fromTableName(String tableName){  for (  TableType type : TableType.values()) {    if (type.getTableName().equals(tableName)) {      return type;    }  }  throw new SystemException(new IllegalArgumentException("Unknown table name: " + tableName));}  }
class C{  public static IClassFile createClassFileFrom(File file,IJavaProject project){  if (file == null) {    return null;  }  IPackageFragment pkg=(IPackageFragment)determineIfOnClasspath(file,(JavaProject)project);  if (pkg == null) {    PackageFragmentRoot root=(PackageFragmentRoot)project.getPackageFragmentRoot(file.getParent());    pkg=root.getPackageFragment(CharOperation.NO_STRINGS);  }  return pkg.getClassFile(file.getName());}  }
class C{  protected void link(Node y,Node x){  y.left.right=y.right;  y.right.left=y.left;  y.parent=x;  if (x.child == null) {    x.child=y;    y.right=y;    y.left=y;  } else {    y.left=x.child;    y.right=x.child.right;    x.child.right=y;    y.right.left=y;  }  x.degree++;  y.mark=false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override EventRequest resolveEventRequest(ReferenceType refType) throws NoSuchFieldException {  Field field=refType.fieldByName(fieldId);  EventRequestManager em=refType.virtualMachine().eventRequestManager();  EventRequest wp=em.createModificationWatchpointRequest(field);  wp.setSuspendPolicy(suspendPolicy);  wp.enable();  return wp;}  }
class C{  public void addTable(DbTableOrView table){  lastTable=table;  if (tables == null) {    tables=New.hashSet();  }  tables.add(table);}  }
class C{  public static UIPropertyCodes newInstance(String code){  UIPropertyCodes returnInstance=null;  returnInstance=new UIPropertyCodes();  returnInstance.setValue(code);  return returnInstance;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean isPermissionHandlingNeeded(String username){  return !(!getAuthService().isPermissionHandlingNeeded() || (getAuthService().getAdminUsername().equals(username)) || (isAdmin && !isScopeOnly));}  }
class C{  public static void write(Context context){  Intent intent=new Intent(context,MultiProcessService.class);  intent.putExtra(INTENT_MODE,INTENT_MODE_WRITE);  context.startService(intent);}  }
class C{  private void showErrorMessage(@StringRes int errorMsg,@NonNull Icon errorIcon){  webview.setVisibility(View.GONE);  Context context=getContext();  errorTextView.setVisibility(View.VISIBLE);  errorTextView.setText(errorMsg);  errorTextView.setCompoundDrawablesWithIntrinsicBounds(null,new IconDrawable(context,errorIcon).sizeRes(context,R.dimen.content_unavailable_error_icon_size).colorRes(context,R.color.edx_brand_gray_back),null,null);}  }
class C{  public void accept(RoutingContext ctx){  logger.info("test-auth: Auth accept OK");  responseText(ctx,202);  echo(ctx);}  }
class C{  public void print(final PrintWriter pw,final String key){  pw.printf("%s\t",key);  if (type != null) {    pw.print(type);  }  if (!normalized.equals(key)) {    pw.printf("\t=%s",normalized);  }  if (value != null) {    pw.printf("\t%d",value);  }  if (plurSing != null) {    pw.printf("\t%s",plurSing);  }}  }
class C{  private URL parseURL(String url) throws ParseException {  URL u=null;  String prefix="file:";  try {    if (url.indexOf(':') <= 1) {      u=ParseUtil.fileToEncodedURL(new File(url));    } else     if (url.startsWith(prefix) && url.length() != prefix.length() && !(new File(url.substring(prefix.length())).isAbsolute())) {      String path=ParseUtil.fileToEncodedURL(new File(System.getProperty("user.dir"))).getPath() + url.substring(prefix.length());      u=new URL("file","",path);    } else {      u=new URL(url);    }  } catch (  MalformedURLException e) {    throw new ParseException(lookup("main.err.badurl",url,e.getMessage()));  }  return u;}  }
class C{  @SafeVarargs protected <T extends AbstractOptionValue<?,?>>AbstractOptions(Function<T,T> valueFilter,AbstractOptions baseOptions,T... values){  requireNonNull(baseOptions,"baseOptions");  requireNonNull(valueFilter,"valueFilter");  requireNonNull(values,"values");  valueMap=new IdentityHashMap<>(baseOptions.valueMap);  putAll(valueFilter,Stream.of(values));}  }
class C{  private void finishSearch(){  mHandler.removeCallbacks(mHint);  mNodeSearch.stopSearch();  mSpeechController.speak(mContext.getString(R.string.search_mode_finish),SpeechController.QUEUE_MODE_UNINTERRUPTIBLE,FeedbackItem.FLAG_NO_HISTORY,null);}  }
class C{  Logger(Builder builder){  LogConfiguration.Builder logConfigBuilder=new LogConfiguration.Builder(XLog.sLogConfiguration);  if (builder.tag != null) {    logConfigBuilder.tag(builder.tag);  }  if (builder.threadSet) {    if (builder.withThread) {      logConfigBuilder.t();    } else {      logConfigBuilder.nt();    }  }  if (builder.stackTraceSet) {    if (builder.withStackTrace) {      logConfigBuilder.st(builder.stackTraceDepth);    } else {      logConfigBuilder.nst();    }  }  if (builder.borderSet) {    if (builder.withBorder) {      logConfigBuilder.b();    } else {      logConfigBuilder.nb();    }  }  if (builder.jsonFormatter != null) {    logConfigBuilder.jsonFormatter(builder.jsonFormatter);  }  if (builder.xmlFormatter != null) {    logConfigBuilder.xmlFormatter(builder.xmlFormatter);  }  if (builder.throwableFormatter != null) {    logConfigBuilder.throwableFormatter(builder.throwableFormatter);  }  if (builder.threadFormatter != null) {    logConfigBuilder.threadFormatter(builder.threadFormatter);  }  if (builder.stackTraceFormatter != null) {    logConfigBuilder.stackTraceFormatter(builder.stackTraceFormatter);  }  if (builder.borderFormatter != null) {    logConfigBuilder.borderFormatter(builder.borderFormatter);  }  logConfiguration=logConfigBuilder.build();  if (builder.printer != null) {    printer=builder.printer;  } else {    printer=XLog.sPrinter;  }}  }
class C{  public static int computeMST(Graph graph,int numvert){  int cost=0;  Vertex inserted=graph.firstNode();  Vertex tmp=inserted.next();  MyVertexList=tmp;  numvert--;  while (numvert != 0) {    BlueReturn br=doAllBlueRule(inserted);    inserted=br.vert();    int dist=br.dist();    numvert--;    cost+=dist;  }  return cost;}  }
class C{  public synchronized void removeSection(String section){  String sectionDot=section + ".";  if (isSectionDefined(section)) {    LinkedHashSet<String> keys=new LinkedHashSet<String>(options.keySet());    for (    String key : keys) {      if (key.startsWith(sectionDot)) {        removeOption(key);      }    }  }}  }
class C{  public void addEveningActivityNode(EveningActivityMovement eveningMovement){  eveningActivityNodes.put(new Integer(eveningMovement.getID()),eveningMovement);}  }
class C{  public void invalidate(){  setShouldCalcPreferredSize(true);}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  @Override public int compareTo(Object obj){  int result;  long difference;  if (obj instanceof Millisecond) {    Millisecond ms=(Millisecond)obj;    difference=getFirstMillisecond() - ms.getFirstMillisecond();    if (difference > 0) {      result=1;    } else {      if (difference < 0) {        result=-1;      } else {        result=0;      }    }  } else   if (obj instanceof RegularTimePeriod) {    RegularTimePeriod rtp=(RegularTimePeriod)obj;    final long thisVal=this.getFirstMillisecond();    final long anotherVal=rtp.getFirstMillisecond();    result=(thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));  } else {    result=1;  }  return result;}  }
class C{  public static double[] normaliseIntoNewArray(double[] array){  double[] newArray=new double[array.length];  double mean=MatrixUtils.mean(array);  double stdDev=MatrixUtils.stdDev(array,mean);  if (Double.isInfinite(1.0 / stdDev)) {    for (int t=0; t < array.length; t++) {      newArray[t]=(array[t] - mean);    }  } else {    for (int t=0; t < array.length; t++) {      newArray[t]=(array[t] - mean) / stdDev;    }  }  return newArray;}  }
class C{  public static void createDirectory(String directoryName){  FilePath.get(directoryName).createDirectory();}  }
class C{  @SuppressWarnings("rawtypes") public static void saveAsPDF(File file,List images){  Document document=new Document(PageSize.A4);  try {    PdfWriter writer=PdfWriter.getInstance(document,new FileOutputStream(file.getAbsolutePath()));    writer.setPDFXConformance(PdfWriter.PDFA1B);    document.open();    document.setPageSize(PageSize.A4);    PdfDictionary outi=new PdfDictionary(PdfName.OUTPUTINTENT);    outi.put(PdfName.OUTPUTCONDITIONIDENTIFIER,new PdfString("sRGB IEC61966-2.1"));    outi.put(PdfName.INFO,new PdfString("sRGB IEC61966-2.1"));    outi.put(PdfName.S,PdfName.GTS_PDFA1);    InputStream inst=FileUtils.class.getClassLoader().getResourceAsStream("resources/sRGB.profile");    ICC_Profile icc=ICC_Profile.getInstance(inst);    PdfICCBased ib=new PdfICCBased(icc);    ib.remove(PdfName.ALTERNATE);    outi.put(PdfName.DESTOUTPUTPROFILE,writer.addToBody(ib).getIndirectReference());    writer.getExtraCatalog().put(PdfName.OUTPUTINTENTS,new PdfArray(outi));    Iterator it=images.iterator();    while (it.hasNext()) {      ImageVO im=(ImageVO)it.next();      HashMap map=Capabilities.getColorCombo(0,1);      File fileTemp=null;      if (im.getColor().equals(map.get("0"))) {        fileTemp=saveAsTIFFTemp(im);      } else {        fileTemp=saveAsJPGTemp(im);      }      if (!FileUtils.existsfile(fileTemp)) {        return;      }      Image image2=Image.getInstance(fileTemp.getAbsolutePath());      image2.setAbsolutePosition(0,0);      if ((image2.getWidth() > PageSize.A4.getWidth()) || (image2.getHeight() > PageSize.A4.getHeight())) {        image2.scaleToFit(PageSize.A4.getWidth(),PageSize.A4.getHeight());      }      document.add(image2);      document.newPage();    }    writer.createXmpMetadata();    document.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  DocumentException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }catch (  Throwable e) {    e.printStackTrace();  }}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void requestServiceForSelectedTab(){switch (tabMain.getSelectedIndex()) {case 0:    prt.setService(ElmProt.OBD_SVC_VEH_INFO);  break;case 1:prt.setService(ElmProt.OBD_SVC_NONE);break;case 2:prt.setService(ElmProt.OBD_SVC_FREEZEFRAME);break;case 3:prt.setService(ElmProt.OBD_SVC_DATA);break;case 4:prt.setService(ElmProt.OBD_SVC_CAN_MONITOR);break;default :prt.setService(ElmProt.OBD_SVC_NONE);}}  }
class C{  public int size(){  return data.size();}  }
class C{  public boolean isTitleCentered(){  return ((BorderLayout)getLayout()).getCenterBehavior() == BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE;}  }
class C{  public static void customizeCache(Context context,int memoryCacheSizeInKB,String defaultDiskCachePath,int defaultDiskCacheSizeInKB){  customizeCache(context,memoryCacheSizeInKB,defaultDiskCachePath,defaultDiskCacheSizeInKB,null,0);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.COMPLEX_ATTRIBUTE___UNIQUE_1:    return isUnique_1();case UmplePackage.COMPLEX_ATTRIBUTE___LAZY_1:  return isLazy_1();case UmplePackage.COMPLEX_ATTRIBUTE___MODIFIER_1:return getModifier_1();case UmplePackage.COMPLEX_ATTRIBUTE___ANONYMOUS_COMPLEX_ATTRIBUTE_11:return getAnonymous_complexAttribute_1_1();case UmplePackage.COMPLEX_ATTRIBUTE___ANONYMOUS_COMPLEX_ATTRIBUTE_21:return getAnonymous_complexAttribute_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private char lookupKatakanaDakuten(char c){  return lookup(c,k2d,'\u30ab');}  }
class C{  public DatatypeConfigurationException(Throwable cause){  super(cause == null ? null : cause.toString());  initCauseByReflection(cause);}  }
class C{  public DoubleArrayListParameter(OptionID optionID,List<double[]> defaultValue){  super(optionID,defaultValue);}  }
class C{  private ArrayList<ContentProviderOperation> prepareInsertShares(ArrayList<OCShare> shares,ArrayList<ContentProviderOperation> operations){  if (shares != null) {    for (    OCShare share : shares) {      ContentValues cv=new ContentValues();      cv.put(ProviderTableMeta.OCSHARES_FILE_SOURCE,share.getFileSource());      cv.put(ProviderTableMeta.OCSHARES_ITEM_SOURCE,share.getItemSource());      cv.put(ProviderTableMeta.OCSHARES_SHARE_TYPE,share.getShareType().getValue());      cv.put(ProviderTableMeta.OCSHARES_SHARE_WITH,share.getShareWith());      cv.put(ProviderTableMeta.OCSHARES_PATH,share.getPath());      cv.put(ProviderTableMeta.OCSHARES_PERMISSIONS,share.getPermissions());      cv.put(ProviderTableMeta.OCSHARES_SHARED_DATE,share.getSharedDate());      cv.put(ProviderTableMeta.OCSHARES_EXPIRATION_DATE,share.getExpirationDate());      cv.put(ProviderTableMeta.OCSHARES_TOKEN,share.getToken());      cv.put(ProviderTableMeta.OCSHARES_SHARE_WITH_DISPLAY_NAME,share.getSharedWithDisplayName());      cv.put(ProviderTableMeta.OCSHARES_IS_DIRECTORY,share.isFolder() ? 1 : 0);      cv.put(ProviderTableMeta.OCSHARES_USER_ID,share.getUserId());      cv.put(ProviderTableMeta.OCSHARES_ID_REMOTE_SHARED,share.getRemoteId());      cv.put(ProviderTableMeta.OCSHARES_ACCOUNT_OWNER,mAccount.name);      operations.add(ContentProviderOperation.newInsert(ProviderTableMeta.CONTENT_URI_SHARE).withValues(cv).build());    }  }  return operations;}  }
class C{  public TrayNotification(String title,String body,Notification notification){  initTrayNotification(title,body,notification);}  }
class C{  public void addFront(Object o){synchronized (_queue) {    _queue.insertElementAt(o,0);    _queue.notify();  }}  }
class C{  public WrappingStringBuilder(final String initial){  append(initial);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void showProperties(){  ArffPanel panel;  ListSelectorDialog dialog;  Vector<String> props;  Instances inst;  panel=getCurrentPanel();  if (panel == null) {    return;  }  inst=panel.getInstances();  if (inst == null) {    return;  }  if (inst.classIndex() < 0) {    inst.setClassIndex(inst.numAttributes() - 1);  }  props=new Vector<String>();  props.add("Filename: " + panel.getFilename());  props.add("Relation name: " + inst.relationName());  props.add("# of instances: " + inst.numInstances());  props.add("# of attributes: " + inst.numAttributes());  props.add("Class attribute: " + inst.classAttribute().name());  props.add("# of class labels: " + inst.numClasses());  dialog=new ListSelectorDialog(getParentFrame(),new JList(props));  dialog.showDialog();}  }
class C{  void removeCallback(JSObject source,String method,boolean async){  String key=source.toJSPointer() + "." + method;  callbacks.remove(key);  String js="delete " + source.toJSPointer() + "."+ method;  exec(js,async);}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public static void main(String[] args) throws Exception {  Project.initialize();  GenericPropertiesCreator creator=new GenericPropertiesCreator();  creator.execute(false);  Properties props=creator.getOutputProperties();  Enumeration<String> keys=(Enumeration<String>)props.propertyNames();  while (keys.hasMoreElements()) {    String key=keys.nextElement();    System.out.println("\n--> " + key);    System.out.println(props.getProperty(key));  }}  }
class C{  public TransitionData(S source,S target,E event,Collection<Action<S,E>> actions,Guard<S,E> guard,TransitionKind kind){  this(source,target,null,event,null,null,actions,guard,kind,null);}  }
class C{  private boolean match(Class<?>[] declaredTypes,Class<?>[] actualTypes){  if (declaredTypes.length == actualTypes.length) {    for (int i=0; i < actualTypes.length; i++) {      if (actualTypes[i] == NULL.class)       continue;      if (wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i])))       continue;      return false;    }    return true;  } else {    return false;  }}  }
class C{  public void testMultipleLauncherActivities() throws Exception {  mEnabled.add(LauncherActivityDetector.ISSUE_MORE_THAN_ONE_LAUNCHER);  mEnabled.add(LauncherActivityDetector.ISSUE_MISSING_LAUNCHER);  mEnabled.add(LauncherActivityDetector.ISSUE_LAUNCHER_ACTIVITY_IN_LIBRARY);  String expected="AndroidManifest.xml:12: Warning: Expecting AndroidManifest.xml to have only one " + "activity with a launcher intent. [MoreThanOneLauncher]\n" + "        <activity android:name=\"com.example.android.custom-lint-rules.MainActivity\">\n"+ "        ^\n"+ "0 errors, 1 warnings\n";  String result=lintProject(xml(FN_ANDROID_MANIFEST_XML,"" + "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest package=\"com.example.android.custom-lint-rules\"\n"+ "          xmlns:android=\"http://schemas.android.com/apk/res/android\">\n"+ "    <application>\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".OtherActivity\">\n"+ "            <intent-filter>\n"+ "                <action android:name=\"android.intent.action.MAIN\"/>\n"+ "                <category android:name=\"android.intent.category.LAUNCHER\"/>\n"+ "            </intent-filter>\n"+ "        </activity>\n"+ "\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".MainActivity\">\n"+ "            <intent-filter>\n"+ "                <action android:name=\"android.intent.action.MAIN\"/>\n"+ "                <category android:name=\"android.intent.category.LAUNCHER\"/>\n"+ "            </intent-filter>\n"+ "        </activity>\n"+ "    </application>\n"+ "</manifest>"));  assertEquals(expected,result);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public double measureNumIterations(){  return m_Classifiers.size();}  }
class C{  public void testMoveToStringMate() throws ChessParseError {  Position pos=TextIO.readFEN("3k4/1PR5/3N4/8/4K3/8/8/8 w - - 0 1");  boolean longForm=true;  Move move=new Move(Position.getSquare(1,6),Position.getSquare(1,7),Piece.WROOK);  String result=moveToString(pos,move,longForm);  assertEquals("b7-b8R+",result);  move=new Move(Position.getSquare(1,6),Position.getSquare(1,7),Piece.WQUEEN);  result=moveToString(pos,move,longForm);  assertEquals("b7-b8Q#",result);  move=new Move(Position.getSquare(1,6),Position.getSquare(1,7),Piece.WKNIGHT);  result=moveToString(pos,move,longForm);  assertEquals("b7-b8N",result);  move=new Move(Position.getSquare(1,6),Position.getSquare(1,7),Piece.WBISHOP);  result=moveToString(pos,move,longForm);  assertEquals("b7-b8B",result);}  }
class C{  private void validateExceptions(RegionVersionHolder<?> holder){  if (holder.getExceptionForTest() != null) {    for (    RVVException ex : holder.getExceptionForTest()) {      if (ex.nextVersion > holder.version + 1) {        Assert.assertTrue(false,"next version too large next=" + ex.nextVersion + " holder version "+ holder.version);      }      if (ex.nextVersion <= ex.previousVersion) {        Assert.assertTrue(false,"bad next and previous next=" + ex.nextVersion + ", previous="+ ex.previousVersion);      }      for (ReceivedVersionsIterator it=ex.receivedVersionsIterator(); it.hasNext(); ) {        Long received=it.next();        if (received >= ex.nextVersion) {          Assert.assertTrue(false,"received greater than next next=" + ex.nextVersion + ", received="+ received+ " exception="+ ex);        }        if (received <= ex.previousVersion) {          Assert.assertTrue(false,"received less than previous prev=" + ex.previousVersion + ", received="+ received);        }      }      if (ex.nextVersion - ex.previousVersion > 1000000) {        Assert.assertTrue(false,"to large a gap in exceptions prev=" + ex.previousVersion + ", next="+ ex.nextVersion);      }    }  }}  }
class C{  public void cmp(int size,Register x,Register y){  super.subs(size,zr,x,y,ShiftType.LSL,0);}  }
class C{  public void put(double w,double h,T data){  if (LOG.isDebuggingFinest()) {    LOG.finest("Add: " + w + "x"+ h);  }  final int cols=widths.size();  final int rows=heights.size();  int bestsx=-1;  int bestsy=-1;  int bestex=cols - 1;  int bestey=-1;  double bestwi;  double besthi;  double bestinc;{    double i1=computeIncreaseArea(w,Math.max(0,h - theight));    double i2=computeIncreaseArea(Math.max(0,w - twidth),h);    if (i1 < i2) {      bestwi=w;      besthi=Math.max(0,h - theight);      bestinc=i1;    } else {      bestwi=Math.max(0,w - twidth);      besthi=h;      bestinc=i2;    }  }  for (int sy=0; sy < rows; sy++) {    for (int sx=0; sx < cols; sx++) {      if (usage.get(sy).get(sx) != null) {        continue;      }      double avw=widths.get(sx);      double avh=heights.get(sy);      int ex=sx;      int ey=sy;      while (avw < w || avh < h) {        if (avw / avh < w / h) {          if (avw < w && ex + 1 < cols) {            boolean ok=true;            for (int y=sy; y <= ey; y++) {              if (usage.get(y).get(ex + 1) != null) {                ok=false;              }            }            if (ok) {              ex+=1;              avw+=widths.get(ex);              continue;            }          }          if (avh < h && ey + 1 < rows) {            boolean ok=true;            for (int x=sx; x <= ex; x++) {              if (usage.get(ey + 1).get(x) != null) {                ok=false;              }            }            if (ok) {              ey+=1;              avh+=heights.get(ey);              continue;            }          }        } else {          if (avh < h && ey + 1 < rows) {            boolean ok=true;            for (int x=sx; x <= ex; x++) {              if (usage.get(ey + 1).get(x) != null) {                ok=false;              }            }            if (ok) {              ey+=1;              avh+=heights.get(ey);              continue;            }          }          if (avw < w && ex + 1 < cols) {            boolean ok=true;            for (int y=sy; y <= ey; y++) {              if (usage.get(y).get(ex + 1) != null) {                ok=false;              }            }            if (ok) {              ex+=1;              avw+=widths.get(ex);              continue;            }          }        }        break;      }      if (avw < w && ex < cols - 1) {        continue;      }      if (avh < h && ey < rows - 1) {        continue;      }      double winc=Math.max(0.0,w - avw);      double hinc=Math.max(0.0,h - avh);      double inc=computeIncreaseArea(winc,hinc);      if (LOG.isDebuggingFinest()) {        LOG.debugFinest("Candidate: " + sx + ","+ sy+ " - "+ ex+ ","+ ey+ ": "+ avw+ "x"+ avh+ " "+ inc);      }      if (inc < bestinc) {        bestinc=inc;        bestsx=sx;        bestsy=sy;        bestex=ex;        bestey=ey;        bestwi=w - avw;        besthi=h - avh;      }      if (inc == 0) {        break;      }    }    assert assertConsistent();  }  if (LOG.isDebuggingFinest()) {    LOG.debugFinest("Best: " + bestsx + ","+ bestsy+ " - "+ bestex+ ","+ bestey+ " inc: "+ bestwi+ "x"+ besthi+ " "+ bestinc);  }  if (bestinc > 0) {    assert (bestex == cols - 1 || bestey == rows - 1);    double inc=Math.max(bestwi,besthi * ratio);    resize(inc);    put(w,h,data);    return;  }  if (bestwi < 0.0) {    splitCol(bestex,-bestwi);    bestwi=0.0;  }  if (besthi < 0.0) {    splitRow(bestey,-besthi);    besthi=0.0;  }  for (int x=bestsx; x <= bestex; x++) {    for (int y=bestsy; y <= bestey; y++) {      usage.get(y).set(x,data);    }  }  double xpos=0.0;  double ypos=0.0;{    for (int x=0; x < bestsx; x++) {      xpos+=widths.get(x);    }    for (int y=0; y < bestsy; y++) {      ypos+=heights.get(y);    }  }  map.put(data,new double[]{xpos,ypos,w,h});  if (LOG.isDebuggingFinest()) {    logSizes();  }}  }
class C{  public Runnable incrementAsRunnable(){  return mIncrementRunnable;}  }
class C{  public void save(DataOutput out) throws IOException {  out.writeLong(myTimestamp);}  }
class C{  @Override public NativePooledByteBuffer newByteBuffer(InputStream inputStream) throws IOException {  NativePooledByteBufferOutputStream outputStream=new NativePooledByteBufferOutputStream(mPool);  try {    return newByteBuf(inputStream,outputStream);  }  finally {    outputStream.close();  }}  }
class C{  public void clear(){  execute("update",RdfRepository.UPDATE_COUNT_RESPONSE,"CLEAR ALL");}  }
class C{  protected void onDismiss(){}  }
class C{  public void readSetOf(ASN1SetOf setOf) throws IOException {  if (tag != ASN1Constants.TAG_C_SETOF) {    throw expected("setOf");  }  decodeValueCollection(setOf);}  }
class C{  public static Script createOutputScript(Address to){  if (to.isP2SHAddress()) {    return new ScriptBuilder().op(OP_HASH160).data(to.getHash160()).op(OP_EQUAL).build();  } else {    return new ScriptBuilder().op(OP_DUP).op(OP_HASH160).data(to.getHash160()).op(OP_EQUALVERIFY).op(OP_CHECKSIG).build();  }}  }
class C{  public synchronized void recordEvent(final String noteFormat,Object... args){  final String note=String.format(noteFormat,args);  final Event event=new Event(note);  if (firstEvent == null) {    firstEvent=event;  }  if (history.size() == limit) {    history.removeFirst();  }  history.add(event);}  }
class C{  public static String keyId(iaik.pkcs.pkcs11.objects.Key k){  if (k.getId() == null || k.getId().getByteArrayValue() == null) {    return null;  }  return DatatypeConverter.printHexBinary(k.getId().getByteArrayValue());}  }
class C{  private void createRasterProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raster.vs",GL_VERTEX_SHADER);  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raster.fs",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertexPosition");  glBindAttribLocation(program,1,"vertexNormal");  glBindFragDataLocation(program,0,"worldPosition_out");  glBindFragDataLocation(program,1,"worldNormal_out");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.rasterProgram=program;}  }
class C{  public float angleAtLength(int index,float proportion){  if (!initialised) {    initialise();  }  if (index < 0 || index >= segmentIndexes.length) {    return 0f;  }  PathSegment seg=(PathSegment)segments.get(segmentIndexes[index]);  float start=seg.getLength();  float end;  if (index == segmentIndexes.length - 1) {    end=pathLength;  } else {    seg=(PathSegment)segments.get(segmentIndexes[index + 1]);    end=seg.getLength();  }  return angleAtLength(start + (end - start) * proportion);}  }
class C{  public void updateStats(Integer cqEvent){  if (cqEvent == null) {    return;  }  this.incNumEvents();switch (cqEvent.intValue()) {case MessageType.LOCAL_CREATE:    this.incNumInserts();  return;case MessageType.LOCAL_UPDATE:this.incNumUpdates();return;case MessageType.LOCAL_DESTROY:this.incNumDeletes();return;default :return;}}  }
class C{  public ThreadDeath(){}  }
class C{  public boolean canReceiveType(Gas gas){  if (stored != null && (gas != null && gas != stored.getGas())) {    return false;  }  return true;}  }
class C{  public static Bitmap drawableTobitmap(Context mContext,int drawable){  Drawable myDrawable=mContext.getResources().getDrawable(drawable);  return (myDrawable != null) ? ((BitmapDrawable)myDrawable).getBitmap() : null;}  }
class C{  public static boolean nameEqual(Node node,String name,boolean caseSensitive){  if (name == null)   return false;  if (caseSensitive) {    return name.equals(node.getNodeName()) || name.equals(node.getLocalName());  }  return name.equalsIgnoreCase(node.getNodeName()) || name.equalsIgnoreCase(node.getLocalName());}  }
class C{  protected List<T> createNewRow(final T value,final int cols){  ArrayList<T> row=new ArrayList<T>();  for (int i=0; i < cols; i++) {    row.add(value);  }  return row;}  }
class C{  public static boolean shallrun(){  return shallrun;}  }
class C{  public String etag(){  return etag;}  }
class C{  public Clustering<MedoidModel> run(Database database,Relation<V> relation){  if (relation.size() <= 0) {    return new Clustering<>("PAM Clustering","pam-clustering");  }  DistanceQuery<V> distQ=database.getDistanceQuery(relation,getDistanceFunction(),DatabaseQuery.HINT_OPTIMIZED_ONLY);  DBIDs ids=relation.getDBIDs();  if (distQ == null && ids instanceof DBIDRange) {    LOG.verbose("Adding a distance matrix index to accelerate PAM.");    PrecomputedDistanceMatrix<V> idx=new PrecomputedDistanceMatrix<V>(relation,getDistanceFunction());    idx.initialize();    distQ=idx.getDistanceQuery(getDistanceFunction());  }  if (distQ == null) {    distQ=database.getDistanceQuery(relation,getDistanceFunction());    LOG.warning("PAM may be slow, because we do not have a precomputed distance matrix available.");  }  if (LOG.isStatistics()) {    LOG.statistics(new StringStatistic(KEY + ".initialization",initializer.toString()));  }  ArrayModifiableDBIDs medoids=DBIDUtil.newArray(initializer.chooseInitialMedoids(k,ids,distQ));  if (medoids.size() != k) {    throw new AbortException("Initializer " + initializer.toString() + " did not return "+ k+ " means, but "+ medoids.size());  }  WritableIntegerDataStore assignment=DataStoreUtil.makeIntegerStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP,-1);  runPAMOptimization(distQ,ids,medoids,assignment);  ArrayModifiableDBIDs[] clusters=ClusteringAlgorithmUtil.partitionsFromIntegerLabels(ids,assignment,k);  Clustering<MedoidModel> result=new Clustering<>("PAM Clustering","pam-clustering");  for (DBIDArrayIter it=medoids.iter(); it.valid(); it.advance()) {    MedoidModel model=new MedoidModel(DBIDUtil.deref(it));    result.addToplevelCluster(new Cluster<>(clusters[it.getOffset()],model));  }  return result;}  }
class C{  synchronized public void addListener(GCTraceSetListener listener){  ArgumentChecking.notNull(listener,"listener");  listeners.add(listener);}  }
class C{  private void editEffector(Effector effector){  StandardDialog dialog=new StandardDialog();  dialog.setTitle("Edit Effector");  AbstractEffectorPanel effectorPanel=null;  if (effector instanceof Turning) {    effectorPanel=new TurningEffectorPanel(entity,(Turning)effector);  } else   if (effector instanceof StraightMovement) {    effectorPanel=new StraightEffectorPanel(entity,(StraightMovement)effector);  } else   if (effector instanceof Speech) {    effectorPanel=new SpeechEffectorPanel(entity,(Speech)effector);  }  dialog.setContentPane(effectorPanel);  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);  if (!dialog.hasUserCancelled()) {    effectorPanel.commitChanges();  }}  }
class C{  public double evaluationForSingleInstance(double[] dist,Instance instance,boolean storePredictions) throws Exception {  return m_delegate.evaluationForSingleInstance(dist,instance,storePredictions);}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  newVector.addElement("Show results");  newVector.addElement("?Clear results");  return newVector.elements();}  }
class C{  @Deprecated public void updateClusterState() throws KeeperException, InterruptedException {synchronized (getUpdateLock()) {    if (clusterState == null) {      createClusterStateWatchersAndUpdate();      return;    }    refreshCollectionList(null);    refreshLiveNodes(null);    refreshLegacyClusterState(null);    Collection<String> safeCopy=new ArrayList<>(watchedCollectionStates.keySet());    Set<String> updatedCollections=new HashSet<>();    for (    String coll : safeCopy) {      DocCollection newState=fetchCollectionState(coll,null);      if (updateWatchedCollection(coll,newState)) {        updatedCollections.add(coll);      }    }    constructState(updatedCollections);  }}  }
class C{  private CViewFilter(){}  }
class C{  private boolean ring(float volume){  boolean res=false;  if (volume > 0) {    clearMediaPlayer();    initMediaPlayer();    final AudioManager audioManager=(AudioManager)sContext.getSystemService(Context.AUDIO_SERVICE);    if (mCanRing && audioManager.getStreamVolume(AudioManager.STREAM_ALARM) != 0) {      try {        mMediaPlayer.prepare();      } catch (      Exception e) {        mCanRing=false;      }      mMediaPlayer.setVolume(volume / 100,volume / 100);      if (!mMediaPlayer.isPlaying()) {        mMediaPlayer.start();      }      res=true;    }  } else {    mVibrator.vibrate(VIB_PATTERN,0);    res=true;  }  if (res) {    sMainService.displayRingingNotification();  }  return res;}  }
class C{  public void paintCheckBoxBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public ConcurrentModificationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMSwitchElement(prefix,(AbstractDocument)doc);}  }
class C{  private boolean conditionL0(String value,int index){  if (index == value.length() - 3 && contains(value,index - 1,4,"ILLO","ILLA","ALLE")) {    return true;  } else   if ((contains(value,index - 1,2,"AS","OS") || contains(value,value.length() - 1,1,"A","O")) && contains(value,index - 1,4,"ALLE")) {    return true;  } else {    return false;  }}  }
class C{  public TwoReturnValues<Move,String> searchPosition(Position pos,int maxTimeMillis){  long[] posHashList=new long[200];  tt.nextGeneration();  History ht=new History();  Search sc=new Search(pos,posHashList,0,tt,ht);  MoveGen.MoveList moves=new MoveGen().pseudoLegalMoves(pos);  MoveGen.removeIllegal(pos,moves);  sc.scoreMoveList(moves,0);  sc.timeLimit(maxTimeMillis,maxTimeMillis);  Move bestM=sc.iterativeDeepening(moves,-1,-1,false);  String PV=TextIO.moveToString(pos,bestM,false) + " ";  UndoInfo ui=new UndoInfo();  pos.makeMove(bestM,ui);  PV+=tt.extractPV(pos);  pos.unMakeMove(bestM,ui);  return new TwoReturnValues<Move,String>(bestM,PV);}  }
class C{  public static TimeZone buildTimezone(int hours,int minutes){  int hourMillis=1000 * 60 * 60* hours;  int minuteMillis=1000 * 60 * minutes;  if (hours < 0) {    minuteMillis*=-1;  }  return new SimpleTimeZone(hourMillis + minuteMillis,"");}  }
class C{  public boolean isFirst(){  return first;}  }
class C{  public TrustedCertificateDetailsAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("TrustedCertificateDetailsAction.statusbar"));  putValue(NAME,res.getString("TrustedCertificateDetailsAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("TrustedCertificateDetailsAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("TrustedCertificateDetailsAction.image")))));}  }
class C{  public void componentMoved(ComponentEvent e){}  }
class C{  protected UnitImpl(){  super();}  }
class C{  private boolean densityPruning(Context c,double minDensity){  if (densityPruning == false)   return false;  int sampleSize=globalSample.size();  int sampleHit=c.getSample().size();  double estimatedDensity=(double)sampleHit / sampleSize;  double sampleSD=Math.sqrt(minDensity * (1 - minDensity) / sampleSize);  double zScore=(estimatedDensity - minDensity) / sampleSD;  NormalDistribution unitNormal=new NormalDistribution(0d,1d);  double pValue=unitNormal.cumulativeProbability(zScore);  if (pValue <= alpha) {    return true;  } else {    return false;  }}  }
class C{  public void output(Document doc,Writer out) throws IOException {  printDeclaration(out,doc,CharsetToolkit.UTF8);  List content=doc.getContent();  int size=content.size();  for (int i=0; i < size; i++) {    Object obj=content.get(i);    if (obj instanceof Element) {      printElement(out,doc.getRootElement(),0,createNamespaceStack());    } else     if (obj instanceof Comment) {      printComment(out,(Comment)obj);    } else     if (obj instanceof ProcessingInstruction) {      printProcessingInstruction(out,(ProcessingInstruction)obj);    } else     if (obj instanceof DocType) {      printDocType(out,doc.getDocType());      out.write(lineSeparator);    } else {    }    newline(out);    indent(out,0);  }  out.flush();}  }
class C{  private void fetchBlockEntry(){  if (this.flowLevel == 0) {    if (!this.allowSimpleKey) {      throw new ScannerException(null,null,"sequence entries are not allowed here",reader.getMark());    }    if (addIndent(this.reader.getColumn())) {      Mark mark=reader.getMark();      this.tokens.add(new BlockSequenceStartToken(mark,mark));    }  } else {  }  this.allowSimpleKey=true;  removePossibleSimpleKey();  Mark startMark=reader.getMark();  reader.forward();  Mark endMark=reader.getMark();  Token token=new BlockEntryToken(startMark,endMark);  this.tokens.add(token);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static void copyDirectory(File srcDir,File destDir,FileFilter filter) throws IOException {  copyDirectory(srcDir,destDir,filter,true);}  }
class C{  public long create_pasp_atom(MP4DataStream bitstream) throws IOException {  log.trace("Pixel aspect ratio");  int hSpacing=(int)bitstream.readBytes(4);  int vSpacing=(int)bitstream.readBytes(4);  log.trace("hSpacing: {} vSpacing: {}",hSpacing,vSpacing);  readed+=8;  MP4Atom child=MP4Atom.createAtom(bitstream);  this.children.add(child);  readed+=child.getSize();  return readed;}  }
class C{  public static void consumeProcessOutput(Process self,OutputStream output,OutputStream error){  consumeProcessOutputStream(self,output);  consumeProcessErrorStream(self,error);}  }
class C{  double tileCost(Location loc,HaitiFood hf){  Bag people=hf.population.getObjectsAtLocation(loc.x,loc.y);  if (people != null && people.size() > hf.riotDensity) {    return ENERGY_TO_RIOT;  }  int roadType=((IntGrid2D)hf.roads.getGrid()).get(loc.x,loc.y);  if (roadType < hf.noRoadValue) {    return ENERGY_TO_WALK_UNPAVED;  } else {    return ENERGY_TO_WALK_PAVED;  }}  }
class C{  private int decodeBandNumwavs(int chNum,boolean bandHasTones[]){  WavesData dst[]=ctx.channels[chNum].tonesInfo;  WavesData ref[]=ctx.channels[0].tonesInfo;  int mode=br.read(chNum + 1);switch (mode) {case 0:    for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {      if (bandHasTones[sb]) {        dst[sb].numWavs=br.read(4);      }    }  break;case 1:for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {  if (bandHasTones[sb]) {    dst[sb].numWavs=tone_vlc_tabs[1].getVLC2(br);  }}break;case 2:for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {if (bandHasTones[sb]) {int delta=tone_vlc_tabs[2].getVLC2(br);delta=signExtend(delta,3);dst[sb].numWavs=(ref[sb].numWavs + delta) & 0xF;}}break;case 3:for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {if (bandHasTones[sb]) {dst[sb].numWavs=ref[sb].numWavs;}}break;}for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {if (bandHasTones[sb]) {if (ctx.wavesInfo.tonesIndex + dst[sb].numWavs > 48) {log.error(String.format("Too many tones: %d (max. 48)",ctx.wavesInfo.tonesIndex + dst[sb].numWavs));return AT3P_ERROR;}dst[sb].startIndex=ctx.wavesInfo.tonesIndex;ctx.wavesInfo.tonesIndex+=dst[sb].numWavs;}}return 0;}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public Shape createBullet(int x,int y,int diameter){  return createEllipseInternal(x,y,diameter,diameter);}  }
class C{  public ProviderLookupException(String message){  super(message);}  }
class C{  private boolean findLoopToOptimise(AnnotatedLSTNode loop){  Operand carriedLoopIterator=loop.getCarriedLoopIterator();  if ((carriedLoopIterator instanceof RegisterOperand) && (isOptimizedLoop(carriedLoopIterator.asRegister().getRegister()))) {    return false;  }  Enumeration<GraphNode> innerLoops=loop.outNodes();  while (innerLoops.hasMoreElements()) {    AnnotatedLSTNode nestedLoop=(AnnotatedLSTNode)innerLoops.nextElement();    if (findLoopToOptimise(nestedLoop)) {      return true;    }  }  if (loop.isNonRegularLoop()) {    return false;  }  if (DEBUG) {    report("LoopFissionOfArrayGuards: found loop in " + ir.getMethod());    VM.sysWriteln("dominator tree:");    VM.sysWriteln(ir.HIRInfo.dominatorTree.toString());  }  ArrayList<Instruction> checksToEliminate=new ArrayList<Instruction>();  getListOfChecksToEliminate(loop,checksToEliminate);  if (checksToEliminate.isEmpty()) {    return false;  } else {    if (DEBUG) {      VM.sysWriteln("Loop being optimised:");      VM.sysWriteln(loop.toString());      VM.sysWriteln("Checks to eliminate:");      for (      Instruction instruction : checksToEliminate) {        VM.sysWriteln(instruction.toString());      }    }    ArrayList<Register> registersDefinedInOriginalLoop=new ArrayList<Register>();    ArrayList<TypeReference> typesOfRegistersDefinedInOriginalLoop=new ArrayList<TypeReference>();    ArrayList<Instruction> definingInstructionsInOriginalLoop=new ArrayList<Instruction>();    getRegistersDefinedInLoop(loop,registersDefinedInOriginalLoop,typesOfRegistersDefinedInOriginalLoop,definingInstructionsInOriginalLoop);    if (DEBUG) {      VM.sysWrite("Registers in original loop:\n{");      for (int i=0; i < registersDefinedInOriginalLoop.size(); i++) {        VM.sysWrite(registersDefinedInOriginalLoop.get(i).toString());        if (definingInstructionsInOriginalLoop.get(i) != null) {          VM.sysWrite("(escapes),");        } else {          VM.sysWrite(",");        }      }      VM.sysWriteln("}");    }    ArrayList<Instruction> phiInstructions=new ArrayList<Instruction>();    HashMap<Register,Register> subOptimalRegMap=new HashMap<Register,Register>();    HashMap<Register,Register> optimalRegMap=new HashMap<Register,Register>();    generatePhiNodes(loop,registersDefinedInOriginalLoop,typesOfRegistersDefinedInOriginalLoop,phiInstructions,subOptimalRegMap,optimalRegMap);    if (DEBUG) {      VM.sysWriteln("subOptimalRegMap");      VM.sysWriteln(subOptimalRegMap.toString());      VM.sysWriteln("optimalRegMap");      VM.sysWriteln(optimalRegMap.toString());    }    HashMap<Register,BasicBlock> regToUnoptimizedBlockMap=new HashMap<Register,BasicBlock>();    HashMap<BasicBlock,BasicBlock> unoptimizedLoopMap=createCloneLoop(loop,subOptimalRegMap,regToUnoptimizedBlockMap);    if (DEBUG) {      VM.sysWriteln("subOptimalLoopMap");      VM.sysWriteln(unoptimizedLoopMap.toString());    }    HashMap<Register,BasicBlock> regToOptimizedBlockMap=new HashMap<Register,BasicBlock>();    HashMap<BasicBlock,BasicBlock> optimizedLoopMap=createOptimizedLoop(loop,optimalRegMap,checksToEliminate,regToOptimizedBlockMap);    if (DEBUG) {      VM.sysWriteln("optimalLoopMap");      VM.sysWriteln(optimizedLoopMap.toString());    }    BasicBlock firstBranchBlock=loop.header.createSubBlock(SYNTH_LOOP_VERSIONING_BCI,ir);    BasicBlock temp=(BasicBlock)loop.header.prev;    ir.cfg.breakCodeOrder(temp,loop.header);    ir.cfg.linkInCodeOrder(temp,firstBranchBlock);    ir.cfg.linkInCodeOrder(firstBranchBlock,loop.header);    temp.redirectOuts(loop.header,firstBranchBlock,ir);    boolean isUnoptimizedLoopReachable=createBranchBlocks(loop,firstBranchBlock,checksToEliminate,unoptimizedLoopMap.get(loop.predecessor),optimizedLoopMap.get(loop.predecessor),optimalRegMap);    fixUpPhiPredecessors(phiInstructions,isUnoptimizedLoopReachable ? unoptimizedLoopMap.get(loop.exit) : null,optimizedLoopMap.get(loop.exit));    if (!isUnoptimizedLoopReachable) {      removeUnoptimizedLoop(loop,unoptimizedLoopMap);    }    modifyOriginalLoop(loop,phiInstructions,definingInstructionsInOriginalLoop,subOptimalRegMap,optimalRegMap);    ir.cfg.compactNodeNumbering();    return true;  }}  }
class C{  public void makeDirty(){  betaChanged=true;  newMode=true;  precisionChanged=true;  regressionInterface.makeDirty(instance);}  }
class C{  public void update(final long datum){  if (gadget_ == null) {    final int maxK=ReservoirSize.decodeValue(encodedMaxK_);    gadget_=ReservoirLongsSketch.getInstance(maxK);  }  gadget_.update(datum);}  }
class C{  public DefaultClassCondition(String namespaceURI,String value){  super("class",namespaceURI,true,value);}  }
class C{  public static String prettyPrint(Object o){  return print(o,true);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public final void error(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {    log(SimpleLog.LOG_LEVEL_ERROR,message,null);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void updateTimestamp(String columnName,java.sql.Timestamp x) throws SQLException {  updateTimestamp(findColumn(columnName),x);}  }
class C{  public String senSegment(String text){  String ret=text;  if (vnSenSegmenter != null) {    ret=vnSenSegmenter.senSegment(text);  }  return ret.trim();}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  public CmovccTranslator(final IConditionGenerator conditionGenerator){  this.conditionGenerator=Preconditions.checkNotNull(conditionGenerator,"Error: Argument conditionGenerator can't be null");}  }
class C{  @Override public synchronized void stop(){  if (algorithm != null) {    try {      algorithm.stop();    } catch (    IllegalThreadStateException e) {    }    kicker=null;  }}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("building TreeVisualizer...");  weka.gui.treevisualizer.TreeBuild builder=new weka.gui.treevisualizer.TreeBuild();  weka.gui.treevisualizer.NodePlace arrange=new weka.gui.treevisualizer.PlaceNode2();  weka.gui.treevisualizer.Node top=builder.create(new java.io.StringReader("digraph atree { top [label=\"the top\"] a [label=\"the first node\"] b [label=\"the second nodes\"] c [label=\"comes off of first\"] top->a top->b b->c }"));  weka.gui.treevisualizer.TreeVisualizer tv=new weka.gui.treevisualizer.TreeVisualizer(null,top,arrange);  tv.setSize(800,600);  String filename=System.getProperty("java.io.tmpdir") + File.separator + "test.jpg";  System.out.println("outputting to '" + filename + "'...");  toOutput(new JPEGWriter(),tv,new File(filename));  System.out.println("done!");}  }
class C{  public LikelihoodWeighting(Query query,int nbSamples,long maxSamplingTime){  this.query=query;  this.evidence=query.getEvidence();  this.queryVars=query.getQueryVars();  this.nbSamples=nbSamples;  sortedNodes=query.getFilteredSortedNodes();  Collections.reverse(sortedNodes);  service.schedule(null,maxSamplingTime,TimeUnit.MILLISECONDS);  Stream.generate(null).parallel().map(null).limit(nbSamples).filter(null).filter(null).forEach(null);}  }
class C{  @Override public String toString(){  String dsc=null;switch (this.type) {case TYPE_UNDERFLOW:    dsc="UNDERFLOW error";  break;case TYPE_OVERFLOW:dsc="OVERFLOW error";break;case TYPE_UNMAPPABLE_CHAR:dsc="Unmappable-character error with erroneous input length " + this.length;break;case TYPE_MALFORMED_INPUT:dsc="Malformed-input error with erroneous input length " + this.length;break;default :dsc="";break;}return getClass().getName() + "[" + dsc+ "]";}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TMODULE__ANNOTATIONS:    return annotations != null && !annotations.isEmpty();case TypesPackage.TMODULE__QUALIFIED_NAME:  return QUALIFIED_NAME_EDEFAULT == null ? qualifiedName != null : !QUALIFIED_NAME_EDEFAULT.equals(qualifiedName);case TypesPackage.TMODULE__PROJECT_ID:return PROJECT_ID_EDEFAULT == null ? projectId != null : !PROJECT_ID_EDEFAULT.equals(projectId);case TypesPackage.TMODULE__VENDOR_ID:return VENDOR_ID_EDEFAULT == null ? vendorID != null : !VENDOR_ID_EDEFAULT.equals(vendorID);case TypesPackage.TMODULE__MODULE_LOADER:return MODULE_LOADER_EDEFAULT == null ? moduleLoader != null : !MODULE_LOADER_EDEFAULT.equals(moduleLoader);case TypesPackage.TMODULE__N4JSD_MODULE:return n4jsdModule != N4JSD_MODULE_EDEFAULT;case TypesPackage.TMODULE__STATIC_POLYFILL_MODULE:return staticPolyfillModule != STATIC_POLYFILL_MODULE_EDEFAULT;case TypesPackage.TMODULE__STATIC_POLYFILL_AWARE:return staticPolyfillAware != STATIC_POLYFILL_AWARE_EDEFAULT;case TypesPackage.TMODULE__MAIN_MODULE:return mainModule != MAIN_MODULE_EDEFAULT;case TypesPackage.TMODULE__PRE_LINKING_PHASE:return preLinkingPhase != PRE_LINKING_PHASE_EDEFAULT;case TypesPackage.TMODULE__TOP_LEVEL_TYPES:return topLevelTypes != null && !topLevelTypes.isEmpty();case TypesPackage.TMODULE__VARIABLES:return variables != null && !variables.isEmpty();case TypesPackage.TMODULE__INTERNAL_TYPES:return internalTypes != null && !internalTypes.isEmpty();case TypesPackage.TMODULE__EXPOSED_INTERNAL_TYPES:return exposedInternalTypes != null && !exposedInternalTypes.isEmpty();case TypesPackage.TMODULE__MODULE_SPECIFIER:return MODULE_SPECIFIER_EDEFAULT == null ? getModuleSpecifier() != null : !MODULE_SPECIFIER_EDEFAULT.equals(getModuleSpecifier());}return super.eIsSet(featureID);}  }
class C{  public static String toString(Iterator<?> iter,String separator){  StringBuilder sb=new StringBuilder();  toString(iter,separator,sb);  return sb.toString();}  }
class C{  void preAddChildEvent(ASTNode node,ASTNode child,StructuralPropertyDescriptor property){}  }
class C{  public void adminLogin(){  ghostmode();  teleportToAdminLocation();}  }
class C{  public void removeListener(final EventType eventType,final Listener<? extends BaseEvent> listener){  if (listeners == null) {    return;  }  String key=getKey(eventType);  List<Listener<BaseEvent>> list=listeners.get(key);  if (list != null) {    list.remove(listener);    if (list.isEmpty()) {      listeners.remove(key);    }  }}  }
class C{  public ModbusUDPTransport(AbstractUDPTerminal terminal){  this.terminal=terminal;}  }
class C{  @ObjectiveCName("forceNotify") public void forceNotify(){  notify(value);}  }
class C{  public Builder label(char label){  this.label=Character.toUpperCase(label);  return this;}  }
class C{  public void parse(Map<String,ArrayList<String>> map) throws SyntaxException, IOException {  if (inputfile == null) {    return;  }  BufferedReader r=new BufferedReader(new InputStreamReader(inputfile.openStream()));  st=new StreamTokenizer(r);  st.slashSlashComments(true);  st.slashStarComments(true);  st.wordChars('_','_');  nextToken();  while (currentToken.ttype != StreamTokenizer.TT_EOF) {    if ((currentToken.ttype != StreamTokenizer.TT_WORD) || (currentToken.sval.compareTo(ALIAS) != 0)) {      nextToken();      continue;    }    match(ALIAS);    String name=currentToken.sval;    match(StreamTokenizer.TT_WORD);    ArrayList<String> aliases=new ArrayList<String>();    do {      aliases.add(currentToken.sval);      match(StreamTokenizer.TT_WORD);    } while ((currentToken.ttype != StreamTokenizer.TT_EOF) && (currentToken.sval.compareTo(ALIAS) != 0));    logln("adding map entry for " + name + " values = "+ aliases);    map.put(name,aliases);  }}  }
class C{  public void write(int c) throws java.io.IOException {  write(new String(new char[]{(char)c}));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.582 -0500",hash_original_method="0880441C47E987D03FC49C5FE19093F0",hash_generated_method="069562DD73DDF8FDE0A01B2B114B24A5") public static boolean isPotentialEmergencyNumber(String number,String defaultCountryIso){  return isEmergencyNumberInternal(number,defaultCountryIso,false);}  }
class C{  protected void estimateMemorySize(IgniteEx ignite,GridCacheAdapter ca,int sample) throws IgniteCheckedException {  int size=ca.size();  Iterable<GridCacheEntryEx> set=ca.context().isNear() ? ((GridNearCacheAdapter)ca).dht().entries() : ca.entries();  long memSz=0;  Iterator<GridCacheEntryEx> it=set.iterator();  int sz=sample > 0 ? sample : DFLT_CACHE_SIZE_SAMPLING;  int cnt=0;  while (it.hasNext() && cnt < sz) {    memSz+=it.next().memorySize();    cnt++;  }  if (cnt > 0)   memSz=(long)((double)memSz / cnt * size);  memorySize=memSz;}  }
class C{  @Override public String toString(){  return "FixedPartitionAttributesData [name=" + name + ", numBucket="+ numBucket+ ", primary="+ primary+ "]";}  }
class C{  public static LossAction fromOrdinal(byte ordinal){  return PRIVATE_VALUES[ordinal];}  }
class C{  private boolean checkMetadataId(final int val){  if (val <= ANY || (LAST_SYSTEM < val && val < FIRST_CUSTOM)) {    Log.e(TAG,"Invalid metadata ID " + val);    return false;  }  return true;}  }
class C{  public void initialise(){  for (int i=0; i < signalMastLogic.size(); i++) {    signalMastLogic.get(i).initialise();  }}  }
class C{  private void verifyAndReset(){  AndroidMock.verify(myTracksProviderUtils,dataSource,trackDataListener1,trackDataListener2);  AndroidMock.reset(myTracksProviderUtils,dataSource,trackDataListener1,trackDataListener2);}  }
class C{  public static GLFontMetrics fromResource(ResourceLocation fontMetricName,int fontImageWidth,int fontImageHeight){  if (fontMetricName == null)   throw new IllegalArgumentException("fontMetricName may not be null");  try {    IResource metricResource=Minecraft.getMinecraft().getResourceManager().getResource(fontMetricName);    InputStream stream=metricResource.getInputStream();    if (stream == null)     throw new IOException("Could not open font metric file.");    GLFontMetrics metric=new GLFontMetrics(fontImageWidth,fontImageHeight);    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder builder=factory.newDocumentBuilder();    Document doc=builder.parse(stream);    Element metrics=doc.getDocumentElement();    NodeList list_character=metrics.getElementsByTagName("character");    for (int i=0; i < list_character.getLength(); i++) {      Element character=(Element)list_character.item(i);      int charcode=Integer.parseInt(character.getAttributes().getNamedItem("key").getNodeValue());      if (0 > charcode || charcode > 255)       continue;      int w=-1, h=-1, u=-1, v=-1;      NodeList character_properties=character.getChildNodes();      for (int k=0; k < character_properties.getLength(); k++) {        Node property=character_properties.item(k);        if (!(property instanceof Element))         continue;        Element elem=(Element)property;        String name=elem.getNodeName().toLowerCase();        int val=Integer.parseInt(elem.getFirstChild().getNodeValue());        if (name.equals("width"))         w=val; else         if (name.equals("height"))         h=val; else         if (name.equals("x"))         u=val; else         if (name.equals("y"))         v=val;      }      metric.glyphs.put(charcode,new GLGlyphMetric(w,h,h,u,v));    }    return metric;  } catch (  IOException e) {  }catch (  ParserConfigurationException e) {  }catch (  SAXException e) {  }  return null;}  }
class C{  private boolean trackWriteID3(MusicTrack musicTrack,String src,String dest){  try {    Mp3File mp3File=new Mp3File(src);    mp3File.removeId3v1Tag();    mp3File.removeId3v2Tag();    mp3File.removeCustomTag();    if (mID3EnableFallback) {      ID3v1Tag tagID3v1=new ID3v1Tag();      tagID3v1.setTrack(musicTrack.getTitle());      tagID3v1.setArtist(musicTrack.getArtist());      tagID3v1.setAlbum(musicTrack.getAlbum());      tagID3v1.setYear(musicTrack.getYear());      for (int n=0; n < ID3v1Genres.GENRES.length; n++) {        if (ID3v1Genres.GENRES[n].equals(musicTrack.getGenre())) {          tagID3v1.setGenre(n);          break;        }      }      mp3File.setId3v1Tag(tagID3v1);    }    final ID3v2 tagID3v2;switch (mID3v2Version) {case ID3v22:      tagID3v2=new ID3v22Tag();    break;case ID3v23:  tagID3v2=new ID3v23Tag();break;case ID3v24:tagID3v2=new ID3v24Tag();break;default :tagID3v2=null;break;}tagID3v2.setTitle(musicTrack.getTitle());tagID3v2.setArtist(musicTrack.getArtist());tagID3v2.setAlbum(musicTrack.getAlbum());tagID3v2.setAlbumArtist(musicTrack.getAlbumArtist());tagID3v2.setTrack("" + musicTrack.getTrackNumber());tagID3v2.setPartOfSet("" + musicTrack.getDiscNumber());tagID3v2.setYear(musicTrack.getYear());if (!TextUtils.isEmpty(musicTrack.getGenre())) {try {tagID3v2.setGenreDescription(musicTrack.getGenre());} catch (IllegalArgumentException e) {Logger.getInstance().logWarning("TrackWriteID3",e.getMessage());}}if (mID3EnableArtwork) {Bitmap bitmap=ArtworkLoader.loadArtwork(musicTrack,mID3ArtworkMaximumSize);if (bitmap != null) {String mimeType="image/jpeg";ByteArrayOutputStream artworkDataStream=new ByteArrayOutputStream();bitmap.compress(Bitmap.CompressFormat.JPEG,90,artworkDataStream);tagID3v2.setAlbumImage(artworkDataStream.toByteArray(),mimeType);}}mp3File.setId3v2Tag(tagID3v2);mp3File.save(dest);return true;} catch (Exception e) {Logger.getInstance().logError("TrackWriteId3",e.toString());}return false;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public AliasAction[] actions(){  return actions;}  }
class C{  public BTree(){  root=new Node(0);}  }
class C{  public void refresh(Callback<TimelineResult<T>> developerCb){  timelineStateHolder.resetCursors();  loadNext(timelineStateHolder.positionForNext(),new RefreshCallback(developerCb,timelineStateHolder));}  }
class C{  @Override public boolean contains(Value subvalue){  return false;}  }
class C{  public State(PlotRenderingInfo info){  super(info);  this.line=new Line2D.Double();}  }
class C{  private int typeDepth(Class<?> match,Class<?> actual){  if (actual == null) {    return Integer.MAX_VALUE / 2;  }  if (match.equals(Object.class)) {    return Integer.MAX_VALUE / 4;  }  if (match.equals(actual)) {    return 0;  }  int cost=1 + typeDepth(match,actual.getSuperclass());  for (  Class<?> iface : actual.getInterfaces()) {    cost=Math.min(cost,1 + typeDepth(match,iface));  }  return cost;}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void update(ViewerCell cell){  Object element=cell.getElement();  String text=getText(element);  StyledString styledString=new StyledString(text);  cell.setText(styledString.toString());  if (searchString != null) {    int pos=StringUtils.indexOfIgnoreCase(text,searchString);    if (pos >= 0) {      Styler styler=(element == searchResultElement) ? RED_BACKGROUND : YELLOW_BACKGROUND;      styledString.setStyle(pos,searchString.length(),styler);    }  }  cell.setStyleRanges(styledString.getStyleRanges());  cell.setImage(getImage(element));  super.update(cell);}  }
class C{  @Override public void closeNonDurableClientCqs(ClientProxyMembershipID clientProxyId) throws CqException {  final boolean isDebugEnabled=logger.isDebugEnabled();  if (isDebugEnabled) {    logger.debug("Closing Client CQs for the client: {}",clientProxyId);  }  List<ServerCQ> cqs=getAllClientCqs(clientProxyId);  for (  ServerCQ cq : cqs) {    ServerCQImpl cQuery=(ServerCQImpl)cq;    try {      if (!cQuery.isDurable()) {        cQuery.close(false);      }    } catch (    QueryException qe) {      if (isDebugEnabled) {        logger.debug("Failed to close the CQ, CqName : {} Error : {}",cQuery.getName(),qe.getMessage());      }    }catch (    CqClosedException cce) {      if (isDebugEnabled) {        logger.debug("Failed to close the CQ, CqName : {} Error : {}",cQuery.getName(),cce.getMessage());      }    }  }}  }
class C{  @Override protected InputStream createCommandInputStream(StepInstance stepInstance,String temporaryFileDirectory) throws IOException {  final String fastaFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,fastaFileNameTemplate);  return new FileInputStream(new File(fastaFilePath));}  }
class C{  public void updateNCharacterStream(int columnIndex,java.io.Reader x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  private void createExampleServices(){  URI exampleFactoryUri=UriUtils.buildFactoryUri(this.host,ExampleService.class);  List<Operation> ops=new ArrayList<>();  for (int i=0; i < this.serviceCount; i++) {    ExampleServiceState example=new ExampleServiceState();    example.name=String.format("example-%s",i);    ops.add(Operation.createPost(exampleFactoryUri).setBody(example));  }  this.sender.sendAndWait(ops);}  }
class C{  protected void checkAlpha(){  if (pixels == null)   return;  for (int i=0; i < pixels.length; i++) {    if ((pixels[i] & 0xff000000) != 0xff000000) {      format=ARGB;      break;    }  }}  }
class C{  private void merge(Track track,File driveFile) throws IOException {  long modifiedTime=track.getModifiedTime();  long driveModifiedTime=driveFile.getModifiedDate().getValue();  if (modifiedTime > driveModifiedTime) {    Log.d(TAG,"Updating track change for track " + track.getName() + " and drive file "+ driveFile.getTitle());    if (!SyncUtils.updateDriveFile(drive,driveFile,context,myTracksProviderUtils,track,true)) {      Log.e(TAG,"Unable to update drive file");      track.setModifiedTime(driveModifiedTime);      myTracksProviderUtils.updateTrack(track);    }  } else   if (modifiedTime < driveModifiedTime) {    Log.d(TAG,"Updating drive change for track " + track.getName() + " and drive file "+ driveFile.getTitle());    if (!updateTrack(track.getId(),driveFile)) {      Log.e(TAG,"Unable to update drive change");      track=myTracksProviderUtils.getTrack(track.getId());      if (track != null) {        track.setModifiedTime(driveModifiedTime);        myTracksProviderUtils.updateTrack(track);      }    }  }}  }
class C{  public RDN(String name,Map<String,String> keywordMap) throws IOException {  int quoteCount=0;  int searchOffset=0;  int avaOffset=0;  List<AVA> avaVec=new ArrayList<AVA>(3);  int nextPlus=name.indexOf('+');  while (nextPlus >= 0) {    quoteCount+=X500Name.countQuotes(name,searchOffset,nextPlus);    if (nextPlus > 0 && name.charAt(nextPlus - 1) != '\\' && quoteCount != 1) {      String avaString=name.substring(avaOffset,nextPlus);      if (avaString.length() == 0) {        throw new IOException("empty AVA in RDN \"" + name + "\"");      }      AVA ava=new AVA(new StringReader(avaString),keywordMap);      avaVec.add(ava);      avaOffset=nextPlus + 1;      quoteCount=0;    }    searchOffset=nextPlus + 1;    nextPlus=name.indexOf('+',searchOffset);  }  String avaString=name.substring(avaOffset);  if (avaString.length() == 0) {    throw new IOException("empty AVA in RDN \"" + name + "\"");  }  AVA ava=new AVA(new StringReader(avaString),keywordMap);  avaVec.add(ava);  assertion=avaVec.toArray(new AVA[avaVec.size()]);}  }
class C{  public static void demo2(){  double[] values={5,0.0,-0.0,-Double.NaN,Double.NaN,0.0 / 0.0,Double.MIN_VALUE,Double.MAX_VALUE,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY};  String[] formats={"%G","%1.19G"};  int size=formats.length;  DoubleMatrix1D matrix=new DenseDoubleMatrix1D(values);  String[] strings=new String[size];  for (int i=0; i < size; i++) {    String format=formats[i];    strings[i]=new Formatter(format).toString(matrix);    for (int j=0; j < matrix.size(); j++) {      System.out.println(String.valueOf(matrix.get(j)));    }  }  System.out.println("original:\n" + new Formatter().toString(matrix));  for (int i=0; i < size; i++) {    System.out.println("\nstring(" + formats[i] + "):\n"+ strings[i]);  }}  }
class C{  @Override protected void initData(){}  }
class C{  @ReactMethod public void removeSubviewsFromContainerWithID(int containerTag){  ReactShadowNode containerNode=mShadowNodeRegistry.getNode(containerTag);  if (containerNode == null) {    throw new IllegalViewOperationException("Trying to remove subviews of an unknown view tag: " + containerTag);  }  WritableArray indicesToRemove=Arguments.createArray();  for (int childIndex=0; childIndex < containerNode.getChildCount(); childIndex++) {    indicesToRemove.pushInt(childIndex);  }  manageChildren(containerTag,null,null,null,null,indicesToRemove);}  }
class C{  protected void postReset(){}  }
class C{  public CrowdingComparator(){  super();}  }
class C{  @Override public boolean pressKeyCode(int keyCode){  return device.pressKeyCode(keyCode);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static boolean importData(DBHelper db,InputStreamReader input,DataFormat format){  DatabaseImporter importer=null;switch (format) {case CSV:    importer=new CsvDatabaseImporter();  break;}if (importer != null) {try {  importer.importData(db,input);  return true;} catch (IOException e) {  Log.e(TAG,"Failed to input data",e);}catch (FormatException e) {  Log.e(TAG,"Failed to input data",e);}catch (InterruptedException e) {  Log.e(TAG,"Failed to input data",e);}return false;} else {Log.e(TAG,"Unsupported data format imported: " + format.name());return false;}}  }
class C{  public SQLTransientException(String reason){  super(reason,null,0);}  }
class C{  public Source<BigInteger> ofBytes(int maxLengthByteArray){  ArgumentAssertions.checkArguments(maxLengthByteArray > 0,"The length of this array cannot be less than one; %s is not an accepted argument",maxLengthByteArray);  return BigIntegers.random(maxLengthByteArray);}  }
class C{  public char[] toArray(){  int pos=0;  char[] array=new char[size];  if (currentBufferIndex == -1) {    return array;  }  for (int i=0; i < currentBufferIndex; i++) {    int len=buffers[i].length;    System.arraycopy(buffers[i],0,array,pos,len);    pos+=len;  }  System.arraycopy(buffers[currentBufferIndex],0,array,pos,offset);  return array;}  }
class C{  public T caseFieldAccessor(FieldAccessor object){  return null;}  }
class C{  private String dataToString(){  String name="minecraft:";  if (potion.isExtended()) {    name+="long_";  } else   if (potion.isUpgraded()) {    name+="strong_";  }  return name + PotionTypeTable.toName(potion.getType());}  }
class C{  public static void write(File file,CharSequence data,Charset encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public void clearCurrentTopology(){  this.clear();  linksUpdated=true;  dtLinksUpdated=true;  tunnelPortsUpdated=true;  createNewInstance("startup");  lastUpdateTime=new Date();}  }
class C{  public ResetCommand(Server server){  super(server,"reset","Resets the server back to the lobby.  Usage: /reset <password>");}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  public Future<Pipeline> shutdownAfterTimestamp(Timestamp timestamp) throws InterruptedException, ReplicatorException {  ArrayList<Future<ReplDBMSHeader>> taskShutdownFutures=new ArrayList<Future<ReplDBMSHeader>>();  for (int i=0; i < stages.size(); i++) {    taskShutdownFutures.add(stages.get(i).watchForProcessedTimestamp(timestamp,true));  }  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");  return scheduleWait("Offline at time: " + sdf.format(timestamp),taskShutdownFutures);}  }
class C{  public String localize(){  setLocalizeVisible(true);  menuBean.setCurrentPageLink(initUrl);  if (priceModel != null) {    String locale=getUserFromSession().getLocale();    LocaleUtils.set(getLocalization().getDescriptions(),locale,priceModel.getDescription());  }  return null;}  }
class C{  public void resetForLayers(Layer[] connectToLayers,Layer[] removeFromLayers){  int i=0;  if (removeFromLayers != null && removeFromLayers.length != 0) {    int removeLength=removeFromLayers.length;    for (i=0; i < removeLength; i++) {      removeFromLayers[i].removeInfoDisplayListener(this);    }  }  if (connectToLayers != null && connectToLayers.length != 0) {    int removeLength=connectToLayers.length;    for (i=0; i < removeLength; i++) {      connectToLayers[i].addInfoDisplayListener(this);    }  }}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static final float clipNormalized(float a){  if (a < 0) {    return 0;  } else   if (a > 1) {    return 1;  }  return a;}  }
class C{  public CacheEvent(String cacheName,ClusterNode node,@Nullable ClusterNode evtNode,String msg,int type,int part,boolean near,Object key,IgniteUuid xid,Object lockId,Object newVal,boolean hasNewVal,Object oldVal,boolean hasOldVal,UUID subjId,String cloClsName,String taskName){  super(node,msg,type);  this.cacheName=cacheName;  this.evtNode=evtNode;  this.part=part;  this.near=near;  this.key=key;  this.xid=xid;  this.lockId=lockId;  this.newVal=newVal;  this.hasNewVal=hasNewVal;  this.oldVal=oldVal;  this.hasOldVal=hasOldVal;  this.subjId=subjId;  this.cloClsName=cloClsName;  this.taskName=taskName;}  }
class C{  public FastDoubleBuffer(){  this.minChunkLen=1024;}  }
class C{  public Profiler clearResults(){  lapped.clear();  return this;}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  float[] radii=convertRadius(filterElement,ctx);  if (radii[0] == 0 || radii[1] == 0) {    return null;  }  boolean isDilate=convertOperator(filterElement,ctx);  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Rectangle2D defaultRegion=in.getBounds2D();  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  PadRable pad=new PadRable8Bit(in,primitiveRegion,PadMode.ZERO_PAD);  Filter morphology=new MorphologyRable8Bit(pad,radii[0],radii[1],isDilate);  handleColorInterpolationFilters(morphology,filterElement);  PadRable filter=new PadRable8Bit(morphology,primitiveRegion,PadMode.ZERO_PAD);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  @Override public void perfEventInit(String events){  if (events.equals(""))   return;  throw new UnsupportedOperationException("Statistics#perfEventInit(" + events + "): Not Implemented");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static IVariableBinding findFieldInType(ITypeBinding type,String fieldName){  if (type.isPrimitive())   return null;  IVariableBinding[] fields=type.getDeclaredFields();  for (int i=0; i < fields.length; i++) {    IVariableBinding field=fields[i];    if (field.getName().equals(fieldName))     return field;  }  return null;}  }
class C{  public CGraphNodeTaggedAndVisibleFilter(final Set<CTag> tags){  m_tags=Preconditions.checkNotNull(tags,"IE02111: Tags argument can not be null");}  }
class C{  public final char currentChar(CharSequence csq){  return csq.charAt(index);}  }
class C{  public StreamResult(String systemId){  this.systemId=systemId;}  }
class C{  public static Member im(String protocol,String handle){  return new Member(protocol + ":" + handle);}  }
class C{  public void testDoConfigureSetsDefaultLogging() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("Info","//weblogic:log-file-severity",config);}  }
class C{  public int size(){  return end - start;}  }
class C{  public LoadStats loadData(final InputStream is,final String baseURL,final RDFFormat rdfFormat) throws IOException {  final MyLoadStats totals=newLoadStats();  loadData4_ParserErrors_Trapped(totals,is,baseURL,baseURL,rdfFormat,null,true);  doCommit(totals);  return totals;}  }
class C{  public void insertFront(Blorp x){  Node oldFrontNode=sentinel.next;  Node newNode=new Node(x,oldFrontNode);  sentinel.next=newNode;  size+=1;}  }
class C{  public IllegalMonitorStateException(@Nullable String s){  super(s);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return new Integer(node == null ? 0 : node.getNumChildren());}  }
class C{  public void applyLocalizedPattern(String pattern){  String p=translatePattern(pattern,formatData.getLocalPatternChars(),DateFormatSymbols.patternChars);  compiledPattern=compile(p);  this.pattern=p;}  }
class C{  public String toString(){  return v + "->" + w+ " "+ flow+ "/"+ capacity;}  }
class C{  public Boolean isFilterEnable(){  return filterEnable;}  }
class C{  private LambdaForm putInCache(Transform key,LambdaForm form){  key=key.withResult(form);  for (int pass=0; ; pass++) {    Object c=lambdaForm.transformCache;    if (c instanceof ConcurrentHashMap) {      @SuppressWarnings("unchecked") ConcurrentHashMap<Transform,Transform> m=(ConcurrentHashMap<Transform,Transform>)c;      Transform k=m.putIfAbsent(key,key);      if (k == null)       return form;      LambdaForm result=k.get();      if (result != null) {        return result;      } else {        if (m.replace(key,k,key)) {          return form;        } else {          continue;        }      }    }    assert (pass == 0);synchronized (lambdaForm) {      c=lambdaForm.transformCache;      if (c instanceof ConcurrentHashMap)       continue;      if (c == null) {        lambdaForm.transformCache=key;        return form;      }      Transform[] ta;      if (c instanceof Transform) {        Transform k=(Transform)c;        if (k.equals(key)) {          LambdaForm result=k.get();          if (result == null) {            lambdaForm.transformCache=key;            return form;          } else {            return result;          }        } else         if (k.get() == null) {          lambdaForm.transformCache=key;          return form;        }        ta=new Transform[MIN_CACHE_ARRAY_SIZE];        ta[0]=k;        lambdaForm.transformCache=ta;      } else {        ta=(Transform[])c;      }      int len=ta.length;      int stale=-1;      int i;      for (i=0; i < len; i++) {        Transform k=ta[i];        if (k == null) {          break;        }        if (k.equals(key)) {          LambdaForm result=k.get();          if (result == null) {            ta[i]=key;            return form;          } else {            return result;          }        } else         if (stale < 0 && k.get() == null) {          stale=i;        }      }      if (i < len || stale >= 0) {      } else       if (len < MAX_CACHE_ARRAY_SIZE) {        len=Math.min(len * 2,MAX_CACHE_ARRAY_SIZE);        ta=Arrays.copyOf(ta,len);        lambdaForm.transformCache=ta;      } else {        ConcurrentHashMap<Transform,Transform> m=new ConcurrentHashMap<>(MAX_CACHE_ARRAY_SIZE * 2);        for (        Transform k : ta) {          m.put(k,k);        }        lambdaForm.transformCache=m;        continue;      }      int idx=(stale >= 0) ? stale : i;      ta[idx]=key;      return form;    }  }}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof GroupDefinitionNode) {    if (groupDefinition != null)     throw new FXGException(child.getStartLine(),child.getStartColumn(),"MissingGroupChildNode");    groupDefinition=(GroupDefinitionNode)child;  } else {    super.addChild(child);  }}  }
class C{  PaddedCell create(File file,List<String> steps){  return new PaddedCell(file,this,steps);}  }
class C{  @Override public void run(){  Logger.println("Running.");  while (doWork) {    leaderLock.lock();    Logger.println("Next leader for CID=" + (getLastExec() + 1) + ": "+ execManager.getCurrentLeader());    if (execManager.getCurrentLeader() != this.controller.getStaticConf().getProcessId()) {      iAmLeader.awaitUninterruptibly();    }    leaderLock.unlock();    if (!doWork)     break;    proposeLock.lock();    if (getInExec() != -1) {      Logger.println("(TOMLayer.run) Waiting for consensus " + getInExec() + " termination.");      canPropose.awaitUninterruptibly();    }    proposeLock.unlock();    if (!doWork)     break;    Logger.println("(TOMLayer.run) I'm the leader.");    messagesLock.lock();    if (!clientsManager.havePendingRequests()) {      haveMessages.awaitUninterruptibly();    }    messagesLock.unlock();    if (!doWork)     break;    Logger.println("(TOMLayer.run) There are messages to be ordered.");    Logger.println("(TOMLayer.run) I can try to propose.");    if ((execManager.getCurrentLeader() == this.controller.getStaticConf().getProcessId()) && (clientsManager.havePendingRequests()) && (getInExec() == -1)) {      int execId=getLastExec() + 1;      setInExec(execId);      Decision dec=execManager.getConsensus(execId).getDecision();      if (controller.getCurrentViewN() == 1) {        Logger.println("(TOMLayer.run) Only one replica, bypassing consensus.");        byte[] value=createPropose(dec);        Consensus consensus=execManager.getConsensus(dec.getConsensusId());        Epoch epoch=consensus.getEpoch(0,controller);        epoch.propValue=value;        epoch.propValueHash=computeHash(value);        epoch.getConsensus().addWritten(value);        epoch.deserializedPropValue=checkProposedValue(value,true);        epoch.getConsensus().getDecision().firstMessageProposed=epoch.deserializedPropValue[0];        dec.setDecisionEpoch(epoch);        dt.delivery(dec);        continue;      }      execManager.getProposer().startConsensus(execId,createPropose(dec));    }  }  java.util.logging.Logger.getLogger(TOMLayer.class.getName()).log(Level.INFO,"TOMLayer stopped.");}  }
class C{  public PropertyField(String initialValue){  this(null,initialValue,true);}  }
class C{  private boolean passesSanityCheck(AccessibilityEvent event){  final CharSequence afterText=getEventText(event);  final CharSequence beforeText=event.getBeforeText();  if ((event.getAddedCount() == 0) && (event.getRemovedCount() == beforeText.length())) {    return true;  }  if (afterText == null || beforeText == null) {    return false;  }  final int diff=(event.getAddedCount() - event.getRemovedCount());  return ((beforeText.length() + diff) == afterText.length());}  }
class C{  public Network(){  nodesByDescription=new HashMap<String,Node>();  nodeSetsDepartingFromLink=new HashMap<MotifLink,Set<Node>>();}  }
class C{  public int checkSignals(LayoutEditor panel){  if (panel == null) {    log.error("checkSignals called with a null LayoutEditor panel");    return -1;  }  int numErrors=0;  for (int i=0; i < mTransitSectionList.size(); i++) {    int n=mTransitSectionList.get(i).getSection().placeDirectionSensors(panel);    numErrors=numErrors + n;  }  return numErrors;}  }
class C{  public void testRoundMathContextPrecision0(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  int precision=0;  RoundingMode rm=RoundingMode.HALF_UP;  MathContext mc=new MathContext(precision,rm);  String res="3736186567876.876578956958765675671119238118911893939591735";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.round(mc);  assertEquals("incorrect quotient value",res,result.toString());  assertEquals("incorrect quotient scale",aScale,result.scale());}  }
class C{  public void mouseDragged(MouseEvent e){  if (!events.isEmpty()) {    int dop=mapDragOperationFromModifiers(e);    if (dop == DnDConstants.ACTION_NONE) {      return;    }    MouseEvent trigger=(MouseEvent)events.get(0);    Point origin=trigger.getPoint();    Point current=e.getPoint();    int dx=Math.abs(origin.x - current.x);    int dy=Math.abs(origin.y - current.y);    if (dx > motionThreshold || dy > motionThreshold) {      fireDragGestureRecognized(dop,((MouseEvent)getTriggerEvent()).getPoint());    } else     appendEvent(e);  }}  }
class C{  public void numberValue(float v) throws ParseException {}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  protected void endOfFileHook(EOFException e) throws IOException, XNIException {  reportFatalError("PrematureEOF",null);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public void swap(){  mv.visitInsn(Opcodes.SWAP);}  }
class C{  private Calendar targetDateCal(){  Calendar cal=Calendar.getInstance();  cal.setTime(targetDate);  return cal;}  }
class C{  public SimpleUserContext(AuthenticationProvider authProvider,String username,Map<String,GuacamoleConfiguration> configs){  Collection<String> connectionIdentifiers=new ArrayList<String>(configs.size());  Collection<String> connectionGroupIdentifiers=Collections.singleton(ROOT_IDENTIFIER);  Collection<Connection> connections=new ArrayList<Connection>(configs.size());  for (  Map.Entry<String,GuacamoleConfiguration> configEntry : configs.entrySet()) {    String identifier=configEntry.getKey();    GuacamoleConfiguration config=configEntry.getValue();    Connection connection=new SimpleConnection(identifier,identifier,config);    connection.setParentIdentifier(ROOT_IDENTIFIER);    connections.add(connection);    connectionIdentifiers.add(identifier);  }  this.rootGroup=new SimpleConnectionGroup(ROOT_IDENTIFIER,ROOT_IDENTIFIER,connectionIdentifiers,Collections.<String>emptyList());  this.self=new SimpleUser(username,connectionIdentifiers,connectionGroupIdentifiers);  this.userDirectory=new SimpleUserDirectory(self);  this.connectionDirectory=new SimpleConnectionDirectory(connections);  this.connectionGroupDirectory=new SimpleConnectionGroupDirectory(Collections.singleton(this.rootGroup));  this.authProvider=authProvider;}  }
class C{  public static void closeSilently(InputStream in){  if (in != null) {    try {      trace("closeSilently",null,in);      in.close();    } catch (    Exception e) {    }  }}  }
class C{  public void testFloatMissingFunction() throws Exception {  checkSortMissingFunction("floatdv","-1.3","4.2");}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      if (j == i)       continue;      if (capacity[i][j] > 0) {        sb.append(i + " -> " + j+ "["+ capacity[i][j]+ "]").append('\n');      }    }  }  return sb.toString();}  }
class C{  private void doAcquireSharedInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public TableColumn addColumn(int modelColumn,int width,TableCellRenderer renderer,TableCellEditor editor){  TableColumn newColumn=new TableColumn(modelColumn,width,renderer,editor);  addColumn(newColumn);  return newColumn;}  }
class C{  private void updateCode(String java){  mJavaCodeTextView.setText(java);}  }
class C{  public Department depertmentForEmployee(final Employee emp){  Department dept=null;  final Date currDate=new Date();  try {    final Assignment empAssignment=eisCommonService.getLatestAssignmentForEmployeeByToDate(emp.getId(),currDate);    dept=empAssignment.getDepartment();    return dept;  } catch (  final NullPointerException ne) {    throw new ApplicationRuntimeException(ne.getMessage());  }catch (  final Exception e) {    throw new ApplicationRuntimeException("Error while getting Department fort the employee" + emp.getName());  }}  }
class C{  private static Vector<String> extractIncludedFiles(Document xmlDocument){  Vector<String> includedFiles=new Vector<String>();  NodeList top=xmlDocument.getChildNodes();  for (int i=0; i < top.getLength(); i++) {    Node topNode=top.item(i);    NodeList firstElements=topNode.getChildNodes();    for (int j=0; j < firstElements.getLength(); j++) {      Node midNode=firstElements.item(j);      for (int k=0; k < midNode.getChildNodes().getLength(); k++) {        Node node=midNode.getChildNodes().item(k);        if (node.hasAttributes() && node.getAttributes().getNamedItem("href") != null) {          String fileName=node.getAttributes().getNamedItem("href").getNodeValue();          includedFiles.add(fileName);        }      }    }  }  return includedFiles;}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == this) {    return true;  } else   if (obj == null || obj.getClass() != getClass()) {    return false;  } else {    @SuppressWarnings("unchecked") final Range<T> range=(Range<T>)obj;    return minimum.equals(range.minimum) && maximum.equals(range.maximum);  }}  }
class C{  public void clearProgressListeners(){  progressSupport.clear();}  }
class C{  boolean isRelationIndex(String fieldName){  DbIndex index=getIndex(fieldName);  return (index != null && index instanceof RelationDbIndex);}  }
class C{  private void init(Composite parent,ISelectionChangedListener selectionChangedListener){  Table table=new Table(parent,SWT.MULTI | SWT.FULL_SELECTION | SWT.V_SCROLL| SWT.H_SCROLL);  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));  table.setHeaderVisible(true);  table.setLinesVisible(true);  tableViewer=new TableViewer(table);  tableViewer.setUseHashlookup(false);  tableViewer.setComparer(ReferenceElementComparer.INSTANCE);  createColumns(tableViewer);  tableViewer.setContentProvider(getContentProvider());  tableViewer.setLabelProvider(getLabelProvider());  ColumnAwareToolTipSupport.enableFor(tableViewer);  if (null != selectionChangedListener) {    tableViewer.addSelectionChangedListener(selectionChangedListener);  }}  }
class C{  public Predicate convert(JCas view,TopTreebankNode topNode,Sentence sentence){  Predicate p=new Predicate(view);  p.setPropTxt(this.propTxt);  p.setAnnotation(this.terminal.convert(view,topNode));  p.setBegin(p.getAnnotation().getBegin());  p.setEnd(p.getAnnotation().getEnd());  p.setSentence(sentence);  p.setFrameSet(this.frameSet);  p.setBaseForm(this.baseForm);  List<Argument> aList=new ArrayList<Argument>();  for (  Proplabel proplabel : this.proplabels) {    aList.add(proplabel.convert(view,topNode));  }  p.setArguments(new FSArray(view,aList.size()));  FSCollectionFactory.fillArrayFS(p.getArguments(),aList);  p.addToIndexes();  return p;}  }
class C{  public CInstructionHighlighterPanel(){  super(new BorderLayout());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.168 -0500",hash_original_method="D8517093E47E932F74FDEA97974509FB",hash_generated_method="0DB041046358EB5221A511D14A7CAA59") public synchronized void removeListener(TestListener listener){  fListeners.removeElement(listener);}  }
class C{  private void unificarDescriptorDivisionFS(DescriptorVO descriptor,String[] idsDescriptores){  List listaDivisiones=divisionFSDbEntity.getUdocsByInfoDescriptor(idsDescriptores);  if (!ListUtils.isEmpty(listaDivisiones)) {    Iterator it=listaDivisiones.listIterator();    while (it.hasNext()) {      DivisionFraccionSerieVO divisionFSVO=(DivisionFraccionSerieVO)it.next();      boolean conCambios=false;      if (divisionFSVO != null && divisionFSVO.getProductor() != null && divisionFSVO.getProductor().getId() != null) {        String id=divisionFSVO.getProductor().getId();        if (ArrayUtils.contains(idsDescriptores,id)) {          conCambios=true;          divisionFSVO.getProductor().setId(descriptor.getId());          divisionFSVO.getProductor().setNombre(descriptor.getNombre());        }      }      if (conCambios) {        divisionFSDbEntity.updateDivisionFS(divisionFSVO);      }    }  }}  }
class C{  private boolean isValidQuery(String query){  if (query == null) {    return true;  }  return QUERY_PATTERN.matcher(query).matches();}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  private boolean isTraits(DVariable variable){  Value value=variable.getValue();  if (value.getType() == VariableType.UNKNOWN && Value.TRAITS_TYPE_NAME.equals(value.getTypeName())) {    return true;  }  return false;}  }
class C{  public RepeatedFieldBuilder<MType,BType,IType> addMessage(int index,MType message){  if (message == null) {    throw new NullPointerException();  }  ensureMutableMessageList();  messages.add(index,message);  if (builders != null) {    builders.add(index,null);  }  onChanged();  incrementModCounts();  return this;}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  flushStartDoc();  m_resultContentHandler.characters(ch,start,length);}  }
class C{  public static Rectangle absRect(Rectangle src){  Rectangle dest=new Rectangle(0,0,0,0);  if (src.width < 0) {    dest.x=src.x + src.width + 1;    dest.width=-src.width;  } else {    dest.x=src.x;    dest.width=src.width;  }  if (src.height < 0) {    dest.y=src.y + src.height + 1;    dest.height=-src.height;  } else {    dest.y=src.y;    dest.height=src.height;  }  return dest;}  }
class C{  public static String decompressXML(byte[] xml){  StringBuilder resultXml=new StringBuilder();  int numbStrings=LEW(xml,4 * 4);  int sitOff=0x24;  int stOff=sitOff + numbStrings * 4;  int xmlTagOff=LEW(xml,3 * 4);  for (int ii=xmlTagOff; ii < xml.length - 4; ii+=4) {    if (LEW(xml,ii) == startTag) {      xmlTagOff=ii;      break;    }  }  int off=xmlTagOff;  int indent=0;  while (off < xml.length) {    int tag0=LEW(xml,off);    int lineNo=LEW(xml,off + 2 * 4);    int nameNsSi=LEW(xml,off + 4 * 4);    int nameSi=LEW(xml,off + 5 * 4);    if (tag0 == startTag) {      int tag6=LEW(xml,off + 6 * 4);      int numbAttrs=LEW(xml,off + 7 * 4);      off+=9 * 4;      String name=compXmlString(xml,sitOff,stOff,nameSi);      StringBuffer sb=new StringBuffer();      for (int ii=0; ii < numbAttrs; ii++) {        int attrNameNsSi=LEW(xml,off);        int attrNameSi=LEW(xml,off + 1 * 4);        int attrValueSi=LEW(xml,off + 2 * 4);        int attrFlags=LEW(xml,off + 3 * 4);        int attrResId=LEW(xml,off + 4 * 4);        off+=5 * 4;        String attrName=compXmlString(xml,sitOff,stOff,attrNameSi);        String attrValue=attrValueSi != -1 ? compXmlString(xml,sitOff,stOff,attrValueSi) : M.e("resourceID 0x") + Integer.toHexString(attrResId);        sb.append(" " + attrName + "=\""+ attrValue+ "\"");      }      resultXml.append(prtIndent(indent,"<" + name + sb+ ">"));      indent++;    } else     if (tag0 == endTag) {      indent--;      off+=6 * 4;      String name=compXmlString(xml,sitOff,stOff,nameSi);      resultXml.append(prtIndent(indent,"</" + name + ">\n"));    } else     if (tag0 == endDocTag) {      break;    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " (decompressXML): Unrecognized tag code '" + Integer.toHexString(tag0)+ "' at offset "+ off);      }      break;    }  }  if (Cfg.DEBUG) {    Check.log(TAG + " (decompressXML):   end at offset " + off);  }  return resultXml.toString();}  }
class C{  public static boolean putInt(ContentResolver cr,String name,int value){  return putIntForUser(cr,name,value,UserHandle.myUserId());}  }
class C{  private static void registerConfig(){  Log.registerConfig();  logFormatter.setSquashExceptions(!Config.parms.getBoolean("st"));  registerSelf(Config.class);  parmsInternal.setStrictDefaults(parms.getBoolean("hs"));  int count=0;  if (parmsInternal.cmdLineProps.containsKey("h"))   count++;  if (parmsInternal.cmdLineProps.containsKey("hm"))   count++;  if (parmsInternal.cmdLineProps.containsKey("hf"))   count++;  if (parmsInternal.cmdLineProps.containsKey("v"))   count++;  if (count > 1)   Config.logger.warning("Cannot specify more than one of -h, -hm, -hf or -v");  asXML=parms.getBoolean("hx");}  }
class C{  public void buildNotification(String regionName){  Intent cancelButtonIntent=new Intent(getApplicationContext(),CancelButtonReceiver.class);  cancelButtonIntent.putExtra(CancelButtonReceiver.MAP_TAG_PARAM,regionName);  cancelButtonIntent.setAction(CANCEL_DOWNLOAD + regionName.hashCode());  PendingIntent pendingIntent=PendingIntent.getBroadcast(getApplicationContext(),0,cancelButtonIntent,PendingIntent.FLAG_UPDATE_CURRENT);  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_file_download_white).setContentTitle(this.getString(R.string.notification_download_title) + " " + regionName).addAction(new NotificationCompat.Action(R.drawable.ic_clear_white,getString(R.string.cancel),pendingIntent)).setDeleteIntent(pendingIntent);  notifications.put(regionName,builder);}  }
class C{  public void enableLookAt(){  mLookAtEnabled=true;  resetToLookAt();}  }
class C{  @Override protected void handleLine(String line) throws NickAlreadyInUseException, IOException {  if (debugTraffic) {    Log.v(TAG,server.getTitle() + " :: " + line);  }  super.handleLine(line);}  }
class C{  private TaskWindow(){  initComponents();  setLocationRelativeTo(null);  if (lstDownload.getColumnModel().getColumnCount() > 1) {    int i=35;    lstDownload.getColumnModel().getColumn(1).setMinWidth(i);    lstDownload.getColumnModel().getColumn(1).setMaxWidth(i);    lstDownload.getColumnModel().getColumn(1).setPreferredWidth(i);  }  setModal(true);}  }
class C{  public void Set(final Object obj){  OptionInstance=true;  PlugInObject=obj;  ObjectName=PlugInObject.getClass().getSimpleName();  ObjectName=Convert(ObjectName);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ViewModelBindingConfig(@LayoutRes int layoutResource,Class<T> viewModelClass){  this(layoutResource,viewModelClass,BR.viewModel);}  }
class C{  public UserPreference(String owner,String key){  super();  Assert.hasText(owner,"Not allowed to create an UserPreference with an empty owner");  Assert.hasText(key,"Not allowed to create an UserPreference with an empty key");  this.owner=owner;  this.key=key;}  }
class C{  public Property minuteOfHour(){  return new Property(this,MINUTE_OF_HOUR);}  }
class C{  public UTMCoordPanel(){  super();}  }
class C{  public final boolean matches(String input){  return this.pattern.matcher(input).matches();}  }
class C{  public ProfilerSection section(String name){  if (!sections.containsKey(name)) {    sections.put(name,new ProfilerSection(name,profiler).setChild(this));  }  return sections.get(name);}  }
class C{  public void testFileFile() throws Exception {  Properties properties=loadProperties("test-file-file");  assertEquals("@cargo.servlet.port@",properties.getProperty("cargo.servlet.port"));}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) public boolean disableExclusiveNfc(){  NfcAdapter adapter=NfcAdapter.getDefaultAdapter(activity);  if (adapter != null) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      disableReaderMode(adapter);    } else {      disableForegroundDispatch(adapter);    }    return true;  }  return false;}  }
class C{  public PowerContainerVmAllocationPolicyMigrationStaticThresholdMC(List<? extends ContainerHost> hostList,PowerContainerVmSelectionPolicy vmSelectionPolicy,PowerContainerSelectionPolicy containerSelectionPolicy,HostSelectionPolicy hostSelectionPolicy,double utilizationThreshold,int numberOfVmTypes,int[] vmPes,float[] vmRam,long vmBw,long vmSize,double[] vmMips){  super(hostList,vmSelectionPolicy,containerSelectionPolicy,hostSelectionPolicy,numberOfVmTypes,vmPes,vmRam,vmBw,vmSize,vmMips);  setUtilizationThreshold(utilizationThreshold);}  }
class C{  void addIcon(){  PositionableLabel l=new PositionableLabel(iconEditor.getIcon(0),this);  setNextLocation(l);  l.setDisplayLevel(ICONS);  setDirty(true);  putItem(l);  l.updateSize();}  }
class C{  public JobBuilder withIdentity(JobKey jobKey){  this.key=jobKey;  return this;}  }
class C{  private void nextToken(int start){  fToken=fScanner.previousToken(start - 1,JavaHeuristicScanner.UNBOUND);  fPreviousPos=start;  fPosition=fScanner.getPosition() + 1;  try {    fLine=fDocument.getLineOfOffset(fPosition);  } catch (  BadLocationException e) {    fLine=-1;  }}  }
class C{  public static ExtensionObject xmlEncode(Structure encodeable) throws EncodingException {  throw new EncodingException(StatusCodes.Bad_DataEncodingUnsupported);}  }
class C{  @SuppressWarnings("signedness") public static String toUnsignedString(@Unsigned short s){  return Long.toString(toUnsignedLong(s));}  }
class C{  public static Criteria WHERE(){  return new Example().createCriteria();}  }
class C{  public ComparableEntitySpan(Entity entity,int begin,int end){  this.entity=entity;  this.clazz=entity.getClass();  this.begin=begin;  this.end=end;}  }
class C{  public ListNode removeElementsRecursive(ListNode head,int val){  if (head == null)   return null;  head.next=removeElementsRecursive(head.next,val);  return head.val == val ? head.next : head;}  }
class C{  public MaxwellTriangle(){  ByteBuffer vbb=ByteBuffer.allocateDirect(triangleCoords.length * 4);  vbb.order(ByteOrder.nativeOrder());  vertexBuffer=vbb.asFloatBuffer();  vertexBuffer.put(triangleCoords);  vertexBuffer.position(0);  ByteBuffer cbb=ByteBuffer.allocateDirect(colors.length * 4);  cbb.order(ByteOrder.nativeOrder());  colorBuffer=cbb.asFloatBuffer();  colorBuffer.put(colors);  colorBuffer.position(0);  indexBuffer=ByteBuffer.allocateDirect(indices.length);  indexBuffer.order(ByteOrder.nativeOrder());  indexBuffer.put(indices);  indexBuffer.position(0);}  }
class C{  public static Result restAppResult(String id){  if (id == null || id.isEmpty()) {    return badRequest("No job id provided.");  }  if (id.contains("job")) {    id=id.replaceAll("job","application");  }  AppResult result=AppResult.find.select("*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,"*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS,"*").where().idEq(id).findUnique();  if (result != null) {    return ok(Json.toJson(result));  } else {    return notFound("Unable to find record on id: " + id);  }}  }
class C{  boolean isSecure(){  return _isSecure || _sslFactory != null;}  }
class C{  void warnMissingNames(File file){  String result=checkMissingNames(file);  if (result.equals("")) {    JOptionPane.showMessageDialog(_who,"OK, all variables in file are known");  } else {    JOptionPane.showMessageDialog(_who,result);  }}  }
class C{  public void extend(ChangeAttribute a,Change change){  a.createdOn=change.getCreatedOn().getTime() / 1000L;  a.lastUpdated=change.getLastUpdatedOn().getTime() / 1000L;  a.open=change.getStatus().isOpen();}  }
class C{  public boolean covers(int zoom,BoundingBox area){  for (  CoverageArea a : coverageAreas) {    if (a.covers(zoom,area)) {      return true;    }  }  return false;}  }
class C{  public boolean shouldStripWhiteSpace(XPathContext support,int targetElement) throws TransformerException {  if (null != m_whiteSpaceInfoList) {    while (DTM.NULL != targetElement) {      DTM dtm=support.getDTM(targetElement);      WhiteSpaceInfo info=(WhiteSpaceInfo)m_whiteSpaceInfoList.getTemplate(support,targetElement,null,false,dtm);      if (null != info)       return info.getShouldStripSpace();      int parent=dtm.getParent(targetElement);      if (DTM.NULL != parent && DTM.ELEMENT_NODE == dtm.getNodeType(parent))       targetElement=parent; else       targetElement=DTM.NULL;    }  }  return false;}  }
class C{  public void removeOperator(String name){  OperatorMeta om=logicalPlan.getOperatorMeta(name);  if (om == null) {    return;  }  if (!om.getInputStreams().isEmpty()) {    for (    Map.Entry<InputPortMeta,StreamMeta> input : om.getInputStreams().entrySet()) {      if (input.getValue().getSinks().size() == 1) {        String msg=String.format("Operator %s connected to input streams %s",om.getName(),om.getInputStreams());        throw new ValidationException(msg);      }    }  }  if (!om.getOutputStreams().isEmpty()) {    String msg=String.format("Operator %s connected to output streams %s",om.getName(),om.getOutputStreams());    throw new ValidationException(msg);  }  logicalPlan.removeOperator(om.getOperator());  if (physicalPlan != null) {    physicalPlan.removeLogicalOperator(om);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  Spring(BaseSpringSystem springSystem){  if (springSystem == null) {    throw new IllegalArgumentException("Spring cannot be created outside of a BaseSpringSystem");  }  mSpringSystem=springSystem;  mId="spring:" + ID++;  setSpringConfig(SpringConfig.defaultConfig);}  }
class C{  public CharSequenceReader(CharSequence seq){  this.seq=checkNotNull(seq);}  }
class C{  public boolean makeReflective(String classname,String metaobject,String metaclass) throws CannotCompileException, NotFoundException {  return makeReflective(classPool.get(classname),classPool.get(metaobject),classPool.get(metaclass));}  }
class C{  public LicenseException(Throwable thr){  super(thr.getMessage(),thr);}  }
class C{  @Transactional public void flush(){  entityManager.flush();}  }
class C{  private void throwUnsupportedSyntax(){  throw new UnsupportedOperationException("syntax not supported by pretty printer");}  }
class C{  @ConstructorProperties({"target","axis"}) public BoxLayout(Container target,int axis){  if (axis != X_AXIS && axis != Y_AXIS && axis != LINE_AXIS && axis != PAGE_AXIS) {    throw new AWTError("Invalid axis");  }  this.axis=axis;  this.target=target;}  }
class C{  public NovaException(String message,int responseCode){  this(message);  this.responseCode=responseCode;}  }
class C{  @Override public int supportedSpeedModes(){  return (jmri.DccThrottle.SpeedStepMode128 | jmri.DccThrottle.SpeedStepMode28 | jmri.DccThrottle.SpeedStepMode27| jmri.DccThrottle.SpeedStepMode14);}  }
class C{  public static boolean gitGlobalConfig(final AtomicReference<String> path){  final String GlobalConfigFileName=".gitconfig";  path.set(null);  String globalPath=Path.combine(Environment.getFolderPath(Environment.SpecialFolder.UserProfile),GlobalConfigFileName);  if (Path.fileExists(globalPath)) {    path.set(globalPath);  }  return path.get() != null;}  }
class C{  public boolean isOpen(){  return open;}  }
class C{  public void updateSongEQValues(String songId,int fiftyHertz,int oneThirtyHertz,int threeTwentyHertz,int eightHundredHertz,int twoKilohertz,int fiveKilohertz,int twelvePointFiveKilohertz,int virtualizer,int bassBoost,int reverb){  ContentValues values=new ContentValues();  values.put(EQ_50_HZ,fiftyHertz);  values.put(EQ_130_HZ,threeTwentyHertz);  values.put(EQ_320_HZ,threeTwentyHertz);  values.put(EQ_800_HZ,eightHundredHertz);  values.put(EQ_2000_HZ,twoKilohertz);  values.put(EQ_5000_HZ,fiveKilohertz);  values.put(EQ_12500_HZ,twelvePointFiveKilohertz);  values.put(VIRTUALIZER,virtualizer);  values.put(BASS_BOOST,bassBoost);  values.put(REVERB,reverb);  String condition=SONG_ID + " = " + "'"+ songId+ "'";  getDatabase().update(EQUALIZER_TABLE,values,condition,null);}  }
class C{  private static BitMatrix bitMatrixFromEncoder(PDF417 encoder,String contents,int width,int height) throws WriterException {  int errorCorrectionLevel=2;  encoder.generateBarcodeLogic(contents,errorCorrectionLevel);  int lineThickness=2;  int aspectRatio=4;  byte[][] originalScale=encoder.getBarcodeMatrix().getScaledMatrix(lineThickness,aspectRatio * lineThickness);  boolean rotated=false;  if ((height > width) ^ (originalScale[0].length < originalScale.length)) {    originalScale=rotateArray(originalScale);    rotated=true;  }  int scaleX=width / originalScale[0].length;  int scaleY=height / originalScale.length;  int scale;  if (scaleX < scaleY) {    scale=scaleX;  } else {    scale=scaleY;  }  if (scale > 1) {    byte[][] scaledMatrix=encoder.getBarcodeMatrix().getScaledMatrix(scale * lineThickness,scale * aspectRatio * lineThickness);    if (rotated) {      scaledMatrix=rotateArray(scaledMatrix);    }    return bitMatrixFrombitArray(scaledMatrix);  }  return bitMatrixFrombitArray(originalScale);}  }
class C{  public Builder includeReplies(Boolean includeReplies){  this.includeReplies=includeReplies;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:08:59.941 -0500",hash_original_method="612D3C1E6035002373F03BD8EC0E9C65",hash_generated_method="9C480270CA2F5682204AA0F324D67102") public Base64InputStream(InputStream in){  this(in,false);}  }
class C{  public static long parseGmtTime(String gmtTime){  try {    return GMT_FORMAT.parse(gmtTime).getTime();  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  public Person(int id,String firstName,String lastName,double salary){  this(id,0,firstName,lastName,salary);}  }
class C{  protected void validateAccountDetails(){  BigDecimal totalDrAmt=BigDecimal.ZERO;  BigDecimal totalCrAmt=BigDecimal.ZERO;  int index=0;  for (  final ReceiptDetailInfo rDetails : billDetailslist) {    index=index + 1;    totalDrAmt=totalDrAmt.add(rDetails.getDebitAmountDetail());    totalCrAmt=totalCrAmt.add(rDetails.getCreditAmountDetail());    if (rDetails.getDebitAmountDetail().compareTo(BigDecimal.ZERO) == 0 && rDetails.getCreditAmountDetail().compareTo(BigDecimal.ZERO) == 0 && rDetails.getGlcodeDetail().trim().length() == 0)     errors.add(new ValidationError("challan.accdetail.emptyaccrow","No data entered in Account Details grid row : {0}",new String[]{"" + index})); else     if (rDetails.getDebitAmountDetail().compareTo(BigDecimal.ZERO) == 0 && rDetails.getCreditAmountDetail().compareTo(BigDecimal.ZERO) == 0 && rDetails.getGlcodeDetail().trim().length() != 0)     errors.add(new ValidationError("challan.accdetail.amountZero","Enter debit/credit amount for the account code : {0}",new String[]{rDetails.getGlcodeDetail()})); else     if (rDetails.getDebitAmountDetail().compareTo(BigDecimal.ZERO) > 0 && rDetails.getCreditAmountDetail().compareTo(BigDecimal.ZERO) > 0)     errors.add(new ValidationError("challan.accdetail.amount","Please enter either debit/credit amount for the account code : {0}",new String[]{rDetails.getGlcodeDetail()})); else     if ((rDetails.getDebitAmountDetail().compareTo(BigDecimal.ZERO) > 0 || rDetails.getCreditAmountDetail().compareTo(BigDecimal.ZERO) > 0) && rDetails.getGlcodeDetail().trim().length() == 0)     errors.add(new ValidationError("challan.accdetail.accmissing","Account code is missing for credit/debit supplied field in account grid row :{0}",new String[]{"" + index}));  }  validateSubledgerDetails();  if (!errors.isEmpty())   throw new ValidationException(errors);}  }
class C{  @Transactional public void save(final List<WorkFlowMatrix> actualWorkFlowMatrixDetails,final String[] departments){  for (  final String dept : departments) {    for (    final WorkFlowMatrix workFlowMatrix : actualWorkFlowMatrixDetails) {      final WorkFlowMatrix wfObj=workFlowMatrix.clone();      if (dept.equals(DEFAULT)) {        wfObj.setDepartment("ANY");      } else {        wfObj.setDepartment(dept);      }      workflowMatrixRepository.save(wfObj);    }  }}  }
class C{  public static synchronized Type tType(String sig){  Type t=(Type)typeHash.get(sig);  if (t != null) {    return t;  }switch (sig.charAt(0)) {case SIGC_ARRAY:    return Type.tArray(tType(sig.substring(1)));case SIGC_CLASS:  return Type.tClass(Identifier.lookup(sig.substring(1,sig.length() - 1).replace(SIGC_PACKAGE,'.')));case SIGC_METHOD:{  Type argv[]=new Type[8];  int argc=0;  int i, j;  for (i=1; sig.charAt(i) != SIGC_ENDMETHOD; i=j) {    for (j=i; sig.charAt(j) == SIGC_ARRAY; j++)     ;    if (sig.charAt(j++) == SIGC_CLASS) {      while (sig.charAt(j++) != SIGC_ENDCLASS)       ;    }    if (argc == argv.length) {      Type newargv[]=new Type[argc * 2];      System.arraycopy(argv,0,newargv,0,argc);      argv=newargv;    }    argv[argc++]=tType(sig.substring(i,j));  }  Type argtypes[]=new Type[argc];  System.arraycopy(argv,0,argtypes,0,argc);  return Type.tMethod(tType(sig.substring(i + 1)),argtypes);}}throw new CompilerError("invalid TypeSignature:" + sig);}  }
class C{  public boolean mergeStack(Frame frame){  boolean changed=false;  if (top != frame.top)   throw new RuntimeException("Operand stacks could not be merged, they are different sizes!");  for (int i=0; i < top; i++) {    if (stack[i] != null) {      Type prev=stack[i];      Type merged=prev.merge(frame.stack[i]);      if (merged == Type.BOGUS)       throw new RuntimeException("Operand stacks could not be merged due to differing primitive types: pos = " + i);      stack[i]=merged;      if ((!merged.equals(prev)) || merged.popChanged()) {        changed=true;      }    }  }  return changed;}  }
class C{  public boolean isSingleRow(){  Object oo=get_Value(COLUMNNAME_IsSingleRow);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static <T>Set<T> frozenset(T... objects){  return Collections.unmodifiableSet(set(objects));}  }
class C{  public T caseExitState(ExitState object){  return null;}  }
class C{  public static boolean validateNullDriveTypeForHDSSystems(String policy,StringSet sysTypeSet,String driveType){  return (null != policy && sysTypeSet.contains(VirtualPool.SystemType.hds.toString()) && (driveType == null));}  }
class C{  protected Drawing createDrawing(){  DefaultDrawing drawing=new DefaultDrawing();  DOMStorableInputOutputFormat ioFormat=new DOMStorableInputOutputFormat(new NetFactory());  drawing.addInputFormat(ioFormat);  drawing.addInputFormat(new TextInputFormat(new NodeFigure()));  drawing.addOutputFormat(ioFormat);  drawing.addOutputFormat(new ImageOutputFormat());  return drawing;}  }
class C{  public Field(String name,Reader reader,IndexableFieldType type){  if (name == null) {    throw new IllegalArgumentException("name must not be null");  }  if (type == null) {    throw new IllegalArgumentException("type must not be null");  }  if (reader == null) {    throw new NullPointerException("reader must not be null");  }  if (type.stored()) {    throw new IllegalArgumentException("fields with a Reader value cannot be stored");  }  if (type.indexOptions() != IndexOptions.NONE && !type.tokenized()) {    throw new IllegalArgumentException("non-tokenized fields must use String values");  }  this.name=name;  this.fieldsData=reader;  this.type=type;}  }
class C{  private void injectForService(SootField serviceField,SootField intentField){  SootMethod onStartCommand=Scene.v().getMethod("<android.app.Service: int onStartCommand(android.content.Intent,int,int)>");  SootMethod onStart=Scene.v().getMethod("<android.app.Service: void onStart(android.content.Intent,int)>");  logger.info("Adding onStartCommand/onStart call in Harness for Field {}",serviceField);  Local compLocal=Jimple.v().newLocal("_$injectinterapp_comp_local_" + localID++,serviceField.getType());  Harness.v().addLocalToMain(compLocal);  Local intentLocal=Jimple.v().newLocal("_$injectinterapp_intent_local_" + localID++,intentField.getType());  Harness.v().addLocalToMain(intentLocal);  Stmt compLocalAssign=Jimple.v().newAssignStmt(compLocal,Jimple.v().newStaticFieldRef(serviceField.makeRef()));  Harness.v().addStmtToEndOfMainLoop(compLocalAssign);  Stmt intentAssign=Jimple.v().newAssignStmt(intentLocal,Jimple.v().newStaticFieldRef(intentField.makeRef()));  Harness.v().addStmtToEndOfMainLoop(intentAssign);  List<Value> args=new LinkedList<Value>();  args.add(intentLocal);  args.add(IntConstant.v(0));  args.add(IntConstant.v(0));  Stmt onStartCall=Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(compLocal,onStartCommand.makeRef(),args));  Harness.v().addStmtToEndOfMainLoop(onStartCall);  RCFG.v().ignoreInvokeForOutputEvents(onStartCall);  args=new LinkedList<Value>();  args.add(intentLocal);  args.add(IntConstant.v(0));  Stmt onStartDepCall=Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(compLocal,onStart.makeRef(),args));  Harness.v().addStmtToEndOfMainLoop(onStartDepCall);  RCFG.v().ignoreInvokeForOutputEvents(onStartDepCall);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tName of file containing network structure in BIF format\n","B",1,"-B <BIF File>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public ImportOperation(IPath containerPath,Object source,IImportStructureProvider provider,IOverwriteQuery overwriteImplementor,List filesToImport){  this(containerPath,source,provider,overwriteImplementor);  setFilesToImport(filesToImport);}  }
class C{  public ClusterEditor(Clusters clusters,List<String> varNames){  if (clusters == null) {    throw new NullPointerException();  }  if (varNames == null) {    throw new NullPointerException();  }  this.clusters=clusters;  this.varNames=varNames;  setLayout(new BorderLayout());  add(clusterDisplay(),BorderLayout.CENTER);  if (clusters.getNumClusters() == 0) {    setNumDisplayClusters(3);    clusters.setNumClusters(3);  }}  }
class C{  public IllegalUnbindException(){}  }
class C{  protected AnnotationConfigApplicationContext buildContext(){  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  EntityReference entRef;  Node aNode;  String name;  Node child;  String childValue;  doc=(Document)load("staff",true);  aNewDoc=(Document)load("staff",true);  entRef=aNewDoc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entRef);  aNode=doc.importNode(entRef,true);  name=aNode.getNodeName();  assertEquals("entityName","ent3",name);  child=aNode.getFirstChild();  assertNotNull("child",child);  childValue=child.getNodeValue();  assertEquals("childValue","Texas",childValue);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playbackControl(VideoFrame.DVD_CONTROL_CHAPTER_SET,getInt(stack),0);  return null;}  }
class C{  @Override public ChatEvent parse(String text){  if (text.startsWith(STARTING_TEXT) || text.startsWith(STARTING_TEXT,1)) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(text," ,)",true);    tok.nextToken();    String source=tok.nextToken();    try {      Integer.parseInt(source);    } catch (    NumberFormatException nfe) {      return new ChatEvent(source.trim(),ChatType.TOLD,text.trim());    }    return null;  }  return null;}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"sin","cos"};  List<double[]> x=new ArrayList<double[]>();  List<double[]> values=new ArrayList<double[]>();  int step=4;  int count=360 / step + 1;  x.add(new double[count]);  x.add(new double[count]);  double[] sinValues=new double[count];  double[] cosValues=new double[count];  values.add(sinValues);  values.add(cosValues);  for (int i=0; i < count; i++) {    int angle=i * step;    x.get(0)[i]=angle;    x.get(1)[i]=angle;    double rAngle=Math.toRadians(angle);    sinValues[i]=Math.sin(rAngle);    cosValues[i]=Math.cos(rAngle);  }  int[] colors=new int[]{Color.BLUE,Color.CYAN};  PointStyle[] styles=new PointStyle[]{PointStyle.POINT,PointStyle.POINT};  XYMultipleSeriesRenderer renderer=buildRenderer(colors,styles);  setChartSettings(renderer,"Trigonometric functions","X (in degrees)","Y",0,360,-1,1,Color.GRAY,Color.LTGRAY);  renderer.setXLabels(20);  renderer.setYLabels(10);  return ChartFactory.getLineChartIntent(context,buildDataset(titles,x,values),renderer);}  }
class C{  public Profile(File path) throws IOException {  this(path,true);}  }
class C{  protected final void onError(final T_State state,final Error error){  final Object[] args={state};  final String message=error.getDescription(args);  getObserver().onError(this,error,message);}  }
class C{  static String toC(String identifier){  return identifier.replace('.','_');}  }
class C{  private static int GetStaticShortField(JNIEnvironment env,int classJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticShortField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getShortValueUnchecked(null);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private void handleOneRequest(GenericClusterRequest clusterRequest){  if (dryRunFailureRate >= 0) {    try {      Thread.sleep(random.nextInt(5000) + 1000);    } catch (    InterruptedException e) {      e.printStackTrace();    }    if (random.nextInt(100) >= dryRunFailureRate) {      deleteRequest(clusterRequest);    } else {      LOG.info("Intentionally failing to complete task {}",clusterRequest.taskId);    }    return;  }  try {    long startTime=System.currentTimeMillis();    LOG.info("Handling message {}",clusterRequest.toString());    TaskStatistics ts=new TaskStatistics();    ts.graphId=clusterRequest.graphId;    ts.awsInstanceType=instanceType;    ts.jobId=clusterRequest.jobId;    ts.workerId=machineId;    long graphStartTime=System.currentTimeMillis();    TransportNetwork transportNetwork=transportNetworkCache.getNetwork(clusterRequest.graphId);    networkId=clusterRequest.graphId;    ts.graphBuild=(int)(System.currentTimeMillis() - graphStartTime);    ts.graphStopCount=transportNetwork.transitLayer.getStopCount();    if (clusterRequest instanceof AnalystClusterRequest)     this.handleAnalystRequest((AnalystClusterRequest)clusterRequest,ts); else     if (clusterRequest instanceof StaticSiteRequest.PointRequest) {      transportNetwork=transportNetworkCache.getNetworkForScenario(networkId,((StaticSiteRequest.PointRequest)clusterRequest).request.request);      this.handleStaticSiteRequest((StaticSiteRequest.PointRequest)clusterRequest,transportNetwork,ts);    } else     if (clusterRequest instanceof StaticMetadata.MetadataRequest) {      transportNetwork=transportNetworkCache.getNetworkForScenario(networkId,((StaticMetadata.MetadataRequest)clusterRequest).request.request);      this.handleStaticMetadataRequest((StaticMetadata.MetadataRequest)clusterRequest,transportNetwork,ts);    } else     if (clusterRequest instanceof StaticMetadata.StopTreeRequest) {      transportNetwork=transportNetworkCache.getNetworkForScenario(networkId,((StaticMetadata.StopTreeRequest)clusterRequest).request.request);      this.handleStaticStopTrees((StaticMetadata.StopTreeRequest)clusterRequest,transportNetwork,ts);    } else     LOG.error("Unrecognized request type {}",clusterRequest.getClass());    ts.total=(int)(System.currentTimeMillis() - startTime);    taskStatisticsStore.store(ts);  } catch (  Exception ex) {    LOG.error("An error occurred while routing",ex);  }}  }
class C{  public SplitStorageEngine(HalfStorageEngine<? super K> keyStorageEngine,HalfStorageEngine<? super V> valueStorageEngine){  this.keyStorageEngine=keyStorageEngine;  this.valueStorageEngine=valueStorageEngine;}  }
class C{  public static final Intent newShareUrlIntent(Context context,long trackId,String trackUrl,String packageName,String className){  Track track=MyTracksProviderUtils.Factory.get(context).getTrack(trackId);  String trackDescription=track == null ? "" : new DescriptionGeneratorImpl(context).generateTrackDescription(track,null,null,false);  boolean urlOnly=TWITTER_PACKAGE_NAME.equals(packageName) || BLUETOOTH_PACKAGE_NAME.equals(packageName);  return new Intent(Intent.ACTION_SEND).addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP).putExtra(Intent.EXTRA_SUBJECT,context.getString(R.string.share_track_subject)).putExtra(Intent.EXTRA_TEXT,urlOnly ? trackUrl : context.getString(R.string.share_track_share_url_body,trackUrl,trackDescription)).setComponent(new ComponentName(packageName,className)).setType(TEXT_PLAIN_TYPE);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  getParent();  m_parent.validate();  m_parent.saveEx();  return success;}  }
class C{  public static void closeReaders(MapFile.Reader[] readers) throws IOException {  if (readers != null) {    for (int i=0; i < readers.length; i++) {      MapFile.Reader reader=readers[i];      if (reader != null) {        reader.close();      }    }  }}  }
class C{  protected Node newNode(){  return new SVGOMFEDistantLightElement();}  }
class C{  public boolean contains(final T element){  if (element == null) {    return false;  }  return comparator.compare(element,minimum) > -1 && comparator.compare(element,maximum) < 1;}  }
class C{  public static boolean isSupportedPathParamsChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {    return false;  }  String[] included=new String[]{NUM_PATHS,PATHS_PER_INITIATOR};  if (analyzeChanges(currentVpool,newVpool,included,null,null).isEmpty()) {    notSuppReasonBuff.append("Did not change MAX_PATHS or PATHS_PER_INITIATOR. ");    return false;  }  List<String> excluded=new ArrayList<String>();  String[] exclude=new String[]{NUM_PATHS,PATHS_PER_INITIATOR,MIN_PATHS,THIN_VOLUME_PRE_ALLOCATION_PERCENTAGE};  excluded.addAll(Arrays.asList(exclude));  excluded.addAll(Arrays.asList(GENERALLY_EXCLUDED));  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,null,excluded.toArray(exclude),null);  if (!changes.isEmpty()) {    notSuppReasonBuff.append("These target virtual pool differences are invalid: ");    fillInNotSupportedReasons(changes,notSuppReasonBuff);    s_logger.info("Virtual Pool change not supported, " + "these target pool differences are invalid: {}",notSuppReasonBuff.toString());    return false;  }  return true;}  }
class C{  public void addString(String s,String encoding){  if (encoding == null || encoding.equals("ISO-8859-1")) {    addString(s);    return;  }  byte[] bytes=null;  try {    bytes=s.getBytes(encoding);  } catch (  UnsupportedEncodingException e) {    addString(s);    return;  }  int len=bytes.length;  if (len + _length > _capacity)   ensureCapacity(_length + len);  for (int i=0; i < len; i++)   _buffer[_length++]=bytes[i];}  }
class C{  public float ascent(){  return ((float)ascent / (float)size);}  }
class C{  public static String[] commaDelimitedListToStringArray(String str){  return delimitedListToStringArray(str,",");}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, zN1, zN2, noData, outputNoData;  int[] dX=new int[]{0,0,-1,1};  int[] dY=new int[]{-1,1,0,0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          zN1=DEM.getValue(row + dY[0],col + dX[0]);          zN2=DEM.getValue(row + dY[1],col + dX[1]);          if ((zN1 != noData) && (zN2 != noData) && (zN1 < z)&& (zN2 < z)) {            output.setValue(row,col,1);          } else {            zN1=DEM.getValue(row + dY[2],col + dX[2]);            zN2=DEM.getValue(row + dY[3],col + dX[3]);            if ((zN1 != noData) && (zN2 != noData) && (zN1 < z)&& (zN2 < z)) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int i, a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public <T extends Enum<T>>void put(String key,T value,AttributeHelper.EnumToAttributeValue<T> enumToAttributeValue){  put(key,value == null ? null : enumToAttributeValue.getAttributeValue(value));}  }
class C{  public void testRenameFileSourceMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE));  create(igfs,paths(DIR),null);  igfs.rename(FILE,FILE2);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,FILE2);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public void assign(float x,float y,float z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public final static boolean darkSquare(int x,int y){  return (x & 1) == (y & 1);}  }
class C{  public Classifier classifyPoint(ReadonlyVec3D p,float tolerance){  float d=this.sub(p).normalize().dot(normal);  if (d < -tolerance) {    return Classifier.FRONT;  } else   if (d > tolerance) {    return Classifier.BACK;  }  return Classifier.ON_PLANE;}  }
class C{  public MultiReader(IndexReader... subReaders) throws IOException {  this(subReaders,true);}  }
class C{  public static int computeMinImageSampleSize(ImageSize srcSize){  final int srcWidth=srcSize.getWidth();  final int srcHeight=srcSize.getHeight();  final int targetWidth=maxBitmapSize.getWidth();  final int targetHeight=maxBitmapSize.getHeight();  final int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);  final int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);  return Math.max(widthScale,heightScale);}  }
class C{  public NewExpr newNewExpr(RefType type){  return new JNewExpr(type);}  }
class C{  private boolean isValidAllowedOperations(String opStr){  boolean valid=false;  AllowedOperations[] validAllowedOperations=AllowedOperations.values();  for (  AllowedOperations op : validAllowedOperations) {    if (op.name().toUpperCase().equals(opStr.toUpperCase())) {      valid=true;      break;    }  }  return valid;}  }
class C{  public void tabCreated(long time,int id){  if (!createTabHelper(id))   return;  mIsDying=false;  finishAnimation(time);  startAnimation(time,OverviewAnimationType.NEW_TAB_OPENED,TabModelUtils.getTabIndexById(mTabModel,id),TabModel.INVALID_TAB_INDEX,false);}  }
class C{  public final Flux<T> repeat(){  return repeat(Flux.ALWAYS_BOOLEAN_SUPPLIER);}  }
class C{  @Override public void handleAddressBookHasChanged() throws ContactManagerException {  if (sLogger.isActivated()) {    sLogger.debug("handle address book changes");  }  synchronizeContacts();}  }
class C{  public void updateScale(){  scaleX=targetPpiX / Gdx.graphics.getPpiX();  scaleY=targetPpiY / Gdx.graphics.getPpiY();}  }
class C{  public String update(){  append("update()");  ;  clear();  created();  return (null);}  }
class C{  public static boolean validateDeleteMirrorCopies(FileShare fs,VirtualPool currentVpool,StringBuffer notSuppReasonBuff){  _log.info(String.format("Checking validateDeleteMirrorCopies for Fs [%s] ",fs.getLabel()));  if (!doBasicMirrorValidation(fs,currentVpool,notSuppReasonBuff)) {    return false;  }  if (fs.getPersonality() != null && fs.getPersonality().equalsIgnoreCase(PersonalityTypes.SOURCE.name()) && (MirrorStatus.FAILED_OVER.name().equalsIgnoreCase(fs.getMirrorStatus()) || MirrorStatus.SUSPENDED.name().equalsIgnoreCase(fs.getMirrorStatus()))) {    notSuppReasonBuff.append(String.format("File system given in request is in active or failover state %s.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  if (fs.getMirrorfsTargets() == null || fs.getMirrorfsTargets().isEmpty()) {    notSuppReasonBuff.append(String.format("File system given in request has no active target file system %s.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  return true;}  }
class C{  private UpnpDevice parseMSearchReplay(byte[] reply){  UpnpDevice device=new UpnpDevice();  String replyString=new String(reply);  StringTokenizer st=new StringTokenizer(replyString,"\n");  while (st.hasMoreTokens()) {    String line=st.nextToken().trim();    if (line.isEmpty())     continue;    if (line.startsWith("HTTP/1."))     continue;    String key=line.substring(0,line.indexOf(':'));    String value=line.length() > key.length() + 1 ? line.substring(key.length() + 1) : null;    key=key.trim();    if (value != null) {      value=value.trim();    }    if (key.compareToIgnoreCase("location") == 0) {      device.setLocation(value);    } else     if (key.compareToIgnoreCase("st") == 0) {      device.setSt(value);    }  }  return device;}  }
class C{  static String readLink(WindowsPath path) throws IOException {  long handle=0L;  try {    handle=path.openForReadAttributeAccess(false);  } catch (  WindowsException x) {    x.rethrowAsIOException(path);  }  try {    return readLinkImpl(handle);  }  finally {    CloseHandle(handle);  }}  }
class C{  public DotSpan(int color){  this.radius=DEFAULT_RADIUS;  this.color=color;}  }
class C{  public static List<SecurityGroup> toApiRepresentation(List<SecurityGroupEntity> entities){  return entities.stream().map(null).collect(Collectors.toList());}  }
class C{  protected int add(U u){  return uMap.add(u);}  }
class C{  public int YToTileY(int y){  return YToTileY(y,getTileGridYOffset(),getTileHeight());}  }
class C{  @Override protected BitmapCroppingWorkerTask.Result doInBackground(Void... params){  try {    if (!isCancelled()) {      Bitmap bitmap=null;      int sampleSize=1;      if (mUri != null) {        BitmapUtils.BitmapSampled bitmapSampled=BitmapUtils.cropBitmap(mContext,mUri,mCropPoints,mDegreesRotated,mOrgWidth,mOrgHeight,mFixAspectRatio,mAspectRatioX,mAspectRatioY,mReqWidth,mReqHeight);        bitmap=bitmapSampled.bitmap;        sampleSize=bitmapSampled.sampleSize;      } else       if (mBitmap != null) {        bitmap=BitmapUtils.cropBitmap(mBitmap,mCropPoints,mDegreesRotated,mFixAspectRatio,mAspectRatioX,mAspectRatioY);      }      bitmap=BitmapUtils.resizeBitmap(bitmap,mReqWidth,mReqHeight,mReqSizeOptions);      if (mSaveUri == null) {        return new Result(bitmap,sampleSize);      } else {        BitmapUtils.writeBitmapToUri(mContext,bitmap,mSaveUri,mSaveCompressFormat,mSaveCompressQuality);        if (bitmap != null) {          bitmap.recycle();        }        return new Result(mSaveUri,sampleSize);      }    }    return null;  } catch (  Exception e) {    return new Result(e,mSaveUri != null);  }}  }
class C{  boolean addContext(boolean isRoot,Vector names,Mode mode){  if (modeMap == null)   modeMap=new ContextMap();  return modeMap.put(isRoot,names,mode);}  }
class C{  private BezierPath[] toPath(IXMLElement elem,String str) throws IOException {  LinkedList<BezierPath> paths=new LinkedList<BezierPath>();  BezierPath path=null;  Point2D.Double p=new Point2D.Double();  Point2D.Double c1=new Point2D.Double();  Point2D.Double c2=new Point2D.Double();  StreamPosTokenizer tt;  if (toPathTokenizer == null) {    tt=new StreamPosTokenizer(new StringReader(str));    tt.resetSyntax();    tt.parseNumbers();    tt.parseExponents();    tt.parsePlusAsNumber();    tt.whitespaceChars(0,' ');    tt.whitespaceChars(',',',');    toPathTokenizer=tt;  } else {    tt=toPathTokenizer;    tt.setReader(new StringReader(str));  }  char nextCommand='M';  char command='M';  Commands:   while (tt.nextToken() != StreamPosTokenizer.TT_EOF) {    if (tt.ttype > 0) {      command=(char)tt.ttype;    } else {      command=nextCommand;      tt.pushBack();    }    BezierPath.Node node;switch (command) {case 'M':      if (path != null) {        paths.add(path);      }    path=new BezierPath();  if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {    throw new IOException("x coordinate missing for 'M' at position " + tt.getStartPosition() + " in "+ str);  }p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'M' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.moveTo(p.x,p.y);nextCommand='L';break;case 'm':if (path != null) {paths.add(path);}path=new BezierPath();if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 'm' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 'm' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.moveTo(p.x,p.y);nextCommand='l';break;case 'Z':case 'z':p.x=path.get(0).x[0];p.y=path.get(0).y[0];if (path.size() > 1) {BezierPath.Node first=path.get(0);BezierPath.Node last=path.get(path.size() - 1);if (first.x[0] == last.x[0] && first.y[0] == last.y[0]) {if ((last.mask & BezierPath.C1_MASK) != 0) {first.mask|=BezierPath.C1_MASK;first.x[1]=last.x[1];first.y[1]=last.y[1];}path.remove(path.size() - 1);}}path.setClosed(true);break;case 'L':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'L' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'L' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.lineTo(p.x,p.y);nextCommand='L';break;case 'l':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 'l' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 'l' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.lineTo(p.x,p.y);nextCommand='l';break;case 'H':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'H' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;path.lineTo(p.x,p.y);nextCommand='H';break;case 'h':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 'h' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;path.lineTo(p.x,p.y);nextCommand='h';break;case 'V':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'V' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.lineTo(p.x,p.y);nextCommand='V';break;case 'v':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 'v' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.lineTo(p.x,p.y);nextCommand='v';break;case 'C':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x1 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}c1.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y1 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}c1.y=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x2 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}c2.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y2 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}c2.y=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.curveTo(c1.x,c1.y,c2.x,c2.y,p.x,p.y);nextCommand='C';break;case 'c':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx1 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}c1.x=p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy1 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}c1.y=p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx2 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}c2.x=p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy2 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}c2.y=p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.curveTo(c1.x,c1.y,c2.x,c2.y,p.x,p.y);nextCommand='c';break;case 'S':node=path.get(path.size() - 1);c1.x=node.x[0] * 2d - node.x[1];c1.y=node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x2 coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);}c2.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y2 coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);}c2.y=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.curveTo(c1.x,c1.y,c2.x,c2.y,p.x,p.y);nextCommand='S';break;case 's':node=path.get(path.size() - 1);c1.x=node.x[0] * 2d - node.x[1];c1.y=node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx2 coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);}c2.x=p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy2 coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);}c2.y=p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.curveTo(c1.x,c1.y,c2.x,c2.y,p.x,p.y);nextCommand='s';break;case 'Q':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x1 coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);}c1.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y1 coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);}c1.y=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.quadTo(c1.x,c1.y,p.x,p.y);nextCommand='Q';break;case 'q':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx1 coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);}c1.x=p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy1 coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);}c1.y=p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.quadTo(c1.x,c1.y,p.x,p.y);nextCommand='q';break;case 'T':node=path.get(path.size() - 1);c1.x=node.x[0] * 2d - node.x[1];c1.y=node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'T' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'T' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.quadTo(c1.x,c1.y,p.x,p.y);nextCommand='T';break;case 't':node=path.get(path.size() - 1);c1.x=node.x[0] * 2d - node.x[1];c1.y=node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 't' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 't' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.quadTo(c1.x,c1.y,p.x,p.y);nextCommand='s';break;case 'A':{if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("rx coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double rx=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("ry coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double ry=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x-axis-rotation missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double xAxisRotation=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("large-arc-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}boolean largeArcFlag=tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("sweep-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}boolean sweepFlag=tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.arcTo(rx,ry,xAxisRotation,largeArcFlag,sweepFlag,p.x,p.y);nextCommand='A';break;}case 'a':{if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("rx coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double rx=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("ry coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double ry=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x-axis-rotation missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double xAxisRotation=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("large-arc-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}boolean largeArcFlag=tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("sweep-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}boolean sweepFlag=tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.arcTo(rx,ry,xAxisRotation,largeArcFlag,sweepFlag,p.x,p.y);nextCommand='a';break;}default :if (DEBUG) {System.out.println("SVGInputFormat.toPath aborting after illegal path command: " + command + " found in path "+ str);}break Commands;}}if (path != null) {paths.add(path);}return paths.toArray(new BezierPath[paths.size()]);}  }
class C{  @Override public Set<java.util.Map.Entry<String,String>> entrySet(){  final THashSet<Map.Entry<String,String>> keys=new THashSet<>();  for (int i=0; i < contents.length; i+=2) {    final Map.Entry<String,String> entry=new GamaPair<>(contents[i],contents[i + 1],Types.STRING,Types.STRING);    keys.add(entry);  }  return keys;}  }
class C{  public AccelTypedVolatileImage(GraphicsConfiguration graphicsConfig,int width,int height,int transparency,int accType){  super(null,graphicsConfig,width,height,null,transparency,null,accType);}  }
class C{  public String toString(){  return this.composeSymCode();}  }
class C{  public static ComponentUI createUI(JComponent x){  return new MotifSplitPaneUI();}  }
class C{  private LevelEqualsRule(final Level level){  super();  this.level=level;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesIm == null) {    throw new NullPointerException();  }  if (testData == null) {    throw new NullPointerException();  }  if (getBayesImVars() == null) {    throw new NullPointerException();  }  if (binaryCutoff < 0.0 || binaryCutoff > 1.0) {    throw new IllegalStateException();  }}  }
class C{  public static int[] toArray(List<Integer> list){  if (list == null) {    return null;  }  int length=list.size();  int[] intArray=new int[length];  for (int i=0; i < length; i++) {    intArray[i]=list.get(i);  }  return intArray;}  }
class C{  public BasicInventoryPacketState(int stateId){  this(stateId,PacketPhase.MASK_ALL);}  }
class C{  final Node<K,V> untreeify(HashMap<K,V> map){  Node<K,V> hd=null, tl=null;  for (Node<K,V> q=this; q != null; q=q.next) {    Node<K,V> p=map.replacementNode(q,null);    if (tl == null)     hd=p; else     tl.next=p;    tl=p;  }  return hd;}  }
class C{  public JComboBoxSmartTableCell(Object[] options){  this(options,null);}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public EventStoreBuilder maxOperationRetries(int count){  settingsBuilder.maxOperationRetries(count);  return this;}  }
class C{  final boolean close(){  return !closed.getAndSet(true);}  }
class C{  private Vector3d computeAvoidance(IMovingAgent currentTarget){  double sphereRadius=getSphereRadius();  double observationRadius=sphereRadius * 5;  double avoidRadius=sphereRadius * 5;  boolean useMyRadius=true;  boolean useTheirRadius=true;  IMovingAgent[] agents=this.getObjectsWithinMyDistance(observationRadius,useMyRadius,useTheirRadius,getSimulation().getMaxSphereRadius(),false,null);  Vector3d avoidVector=new Vector3d();  int i=0;  for (i=0; i < agents.length; i++) {    IMovingAgent agent=agents[i];    if (checkToAvoid(agent,currentTarget)) {      double angle=this.angle(agent);      angle=Math.toDegrees(angle);      angle-=this.getOrientation();      if (!((angle < -90.0) | (angle > 90))) {        double distance=distance(agent);        if (useTheirRadius)         distance-=agent.getSphereRadius();        if (useMyRadius)         distance-=sphereRadius;        if (distance <= avoidRadius) {          Vector3d v=vectorTo(agent);          double len=v.length();          if (len != 0.0) {            double s=1 / len / (distance * distance);            v.scale(s);          }          double turnAngle=90 - 10 * r.nextGaussian();          if (angle > 0.0)           turnAngle=-turnAngle;          Geometric.rotateBy(v,Math.toRadians(turnAngle));          avoidVector.add(v);        }      }    }  }  Geometric.normalize(avoidVector);  return avoidVector;}  }
class C{  private void requestPermissionIfNeeded(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    int hasEnabledCameraPerm=checkSelfPermission(Manifest.permission.CAMERA);    if (hasEnabledCameraPerm == PackageManager.PERMISSION_DENIED) {      requestPermissions(new String[]{Manifest.permission.CAMERA},ALLOW_CAMERA_PERMISSION);    } else {      takePicture();    }  }}  }
class C{  public static int[] toPrimitive(final Integer[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_INT_ARRAY;  }  final int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].intValue();  }  return result;}  }
class C{  private void append(String message){  FacesContext context=FacesContext.getCurrentInstance();  context.addMessage(null,new FacesMessage(FacesMessage.SEVERITY_INFO,message,null));}  }
class C{  private long fileChannelRead(IntBuffer slabBuffer) throws IOException {  long filePos=fileChannel.position();  long count=fileChannel.transferTo(filePos,slabBuffer.remaining() << 2,INT_BUFFER_WRAPPER.init(slabBuffer));  fileChannel.position(filePos+=count);  return count;}  }
class C{  public boolean acceptExecutor(CommitExecutor executor){  return executor == null || !(executor instanceof LocalCommitExecutor);}  }
class C{  protected void sequence_Arguments_LeftHandSideExpression_ParameterizedCallExpression_TypeArguments(ISerializationContext context,ParameterizedCallExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isBound(){  return mIsBound;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void test_sessionProtection(){  final Properties p=getProperties();  p.setProperty(AbstractTransactionService.Options.MIN_RELEASE_AGE,"0");  final Journal store=getJournal(p);  try {    final IRWStrategy bs=(IRWStrategy)store.getBufferStrategy();    final byte[] buf=new byte[300];    r.nextBytes(buf);    final ByteBuffer bb=ByteBuffer.wrap(buf);    final long faddr=store.write(bb);    final IRawTx tx=bs.newTx();    ByteBuffer rdBuf=store.read(faddr);    bb.position(0);    assertEquals(bb,rdBuf);    store.delete(faddr);    bb.position(0);    rdBuf=store.read(faddr);    assertEquals(bb,rdBuf);    tx.close();    store.commit();  }  finally {    store.destroy();  }}  }
class C{  public boolean containsKey(int key){  final Object[] arr=array;  return key > -1 && key < arr.length && arr[key] != null;}  }
class C{  public BigDecimal calcEarlyPayRebate(final BigDecimal instTaxAmount,final BigDecimal rebateApplTaxAmt,final BigDecimal collection){  BigDecimal rebate=BigDecimal.ZERO;  final Date today=new Date();  final Calendar firstRebateDate=Calendar.getInstance();  final BigDecimal halfYearTax=instTaxAmount.divide(new BigDecimal(2));  LOGGER.debug("calcEarlyPayRebate instTaxAmount " + instTaxAmount + " halfYearTax "+ halfYearTax+ " rebateApplTaxAmt "+ rebateApplTaxAmt+ " collection "+ collection);  final int currMonth=firstRebateDate.get(Calendar.MONTH);  if (currMonth <= 2)   firstRebateDate.set(Calendar.YEAR,firstRebateDate.get(Calendar.YEAR) - 1);  firstRebateDate.set(Calendar.DAY_OF_MONTH,31);  firstRebateDate.set(Calendar.MONTH,Calendar.MAY);  firstRebateDate.set(Calendar.HOUR_OF_DAY,23);  firstRebateDate.set(Calendar.MINUTE,59);  firstRebateDate.set(Calendar.SECOND,59);  final Calendar secondRebateDate=Calendar.getInstance();  if (currMonth <= 2)   secondRebateDate.set(Calendar.YEAR,secondRebateDate.get(Calendar.YEAR) - 1);  secondRebateDate.set(Calendar.DAY_OF_MONTH,30);  secondRebateDate.set(Calendar.MONTH,Calendar.NOVEMBER);  secondRebateDate.set(Calendar.HOUR_OF_DAY,23);  secondRebateDate.set(Calendar.MINUTE,59);  secondRebateDate.set(Calendar.SECOND,59);  if (today.before(firstRebateDate.getTime()) || today.equals(firstRebateDate.getTime())) {    if (collection.compareTo(BigDecimal.ZERO) == 1) {      if (collection.compareTo(halfYearTax) <= 0)       rebate=MoneyUtils.roundOff(rebateApplTaxAmt.multiply(SECOND_REBATETAX_PERC).divide(BigDecimal.valueOf(100))); else       rebate=BigDecimal.ZERO;    } else     rebate=MoneyUtils.roundOff(rebateApplTaxAmt.multiply(FIRST_REBATETAX_PERC).divide(BigDecimal.valueOf(100)));  } else   if (today.before(secondRebateDate.getTime()) || today.equals(secondRebateDate.getTime()))   if (collection.compareTo(halfYearTax) <= 0)   rebate=MoneyUtils.roundOff(rebateApplTaxAmt.multiply(SECOND_REBATETAX_PERC).divide(BigDecimal.valueOf(100))); else   rebate=BigDecimal.ZERO;  LOGGER.debug("calcEarlyPayRebate rebate " + rebate);  return rebate;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  public void logWarning(String message,Throwable cause){  getLog().log(new Status(IStatus.WARNING,PLUGIN_ID,message,cause));}  }
class C{  public Builder stroke(int width){  this.stroke=width;  return this;}  }
class C{  protected void flushDefinitions(Movie movie,SWFTagTypes timelineWriter,SWFTagTypes definitionWriter) throws IOException {  if ((!isAlteration) && !isRemove) {    Symbol symbol=instance.getSymbol();    symbol.define(movie,timelineWriter,definitionWriter);  }}  }
class C{  public SimpleTerminalResizeListener(TerminalSize initialSize){  this.wasResized=false;  this.lastKnownSize=initialSize;}  }
class C{  private CNameShortener(){}  }
class C{  private String createFormatStrings(){  final String[] formatStrs=overriddenParameters.getFormat().split(",");  final StringBuilder sb=new StringBuilder();  for (int i=0; i < formatStrs.length; i++) {    final String formatStr=formatStrs[i].trim();    if ("pretty".equalsIgnoreCase(formatStr)) {      sb.append("\"pretty\"");    } else {      sb.append(String.format("\"%s:%s/%s.%s\"",formatStr,config.getCucumberOutputDir().replace('\\','/'),fileCounter,formatStr));    }    if (i < formatStrs.length - 1) {      sb.append(", ");    }  }  return sb.toString();}  }
class C{  @Override public boolean nullsAreSortedAtStart(){  debugCodeCall("nullsAreSortedAtStart");  return false;}  }
class C{  public static boolean isKnownMissingSignal(Double value){  if (null != value) {    for (    double signal : knownMissingSignals) {      if (value == signal)       return true;    }  }  return false;}  }
class C{  private boolean handleConnectLost(ChannelHandlerContext ctx){  boolean redirect=false;  if (!this.storage.lock(this.clientId,ConnectionState.DISCONNECTING)) {    logger.warn("Lock failed: Failed to lock on client {}",this.clientId);  } else {    logger.trace("Successful lock on client {}",this.clientId);    logger.trace("Test if client {} already reconnected to some broker",this.clientId);    if (this.registry.removeSession(this.clientId,ctx)) {      if (this.storage.removeConnectedNode(this.clientId,this.brokerId)) {        redirect=true;        logger.trace("Mark client {} disconnected from broker {}",this.clientId,this.brokerId);        if (this.cleanSession) {          logger.trace("Clear session state for client {} because current connection is clean session",this.clientId);          this.storage.removeAllSessionState(this.clientId);        }      }    }    logger.trace("Try to release lock on client {}",this.clientId);    this.storage.release(this.clientId,ConnectionState.DISCONNECTED);  }  return redirect;}  }
class C{  public void decrement(){  value--;}  }
class C{  public void printLiveIntervalList(BasicBlock block){  System.out.println("Live Interval List for " + block);  for (LiveIntervalElement elem=getFirstLiveIntervalElement(block); elem != null; elem=elem.getNext()) {    System.out.println("  " + elem);  }}  }
class C{  public void onSignInGooglePressed(View view){  Intent signInIntent=Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);  startActivityForResult(signInIntent,RC_SIGN_IN);  mAuthProgressDialog.setMessage(getString(R.string.progress_dialog_authenticating_with,"Google"));  mAuthProgressDialog.show();}  }
class C{  public void testEnableExtFunc(){  Policy p=new SimplePolicy(new AllPermission());  Policy.setPolicy(p);  System.setSecurityManager(new SecurityManager());  try {    evaluate(true);    System.out.println("testEnableExt: OK");  } catch (  XPathFactoryConfigurationException e) {    fail(e.getMessage());  }catch (  XPathExpressionException e) {    fail(e.getMessage());  } finally {    System.setSecurityManager(null);  }}  }
class C{  protected void checkMoveTo(){  if (numSeg == 0)   return;switch (types[numSeg - 1]) {case PathIterator.SEG_MOVETO:    path.moveTo(values[numVals - 2],values[numVals - 1]);  break;case PathIterator.SEG_CLOSE:if (numSeg == 1) return;if (types[numSeg - 2] == PathIterator.SEG_MOVETO) path.moveTo(values[numVals - 2],values[numVals - 1]);break;default :break;}}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void notifyClientJoined(final DistributedMember clientId){  notifyListeners(clientId,true,EventType.JOINED);}  }
class C{  @Override protected int tryAcquireShared(int acquires){  Thread queuedThread=getFirstQueuedThread();  if (queuedThread != null && queuedThread != Thread.currentThread())   return -1;  if (acquires == 0)   return isClosed() ? 1 : -1;  setState(1);  return 1;}  }
class C{  private BlockObject findSnapshotByInternalVolume(BlockObject volume){  BlockObject snap=null;  String nativeGuid=volume.getNativeGuid();  if (NullColumnValueGetter.isNotNullValue(nativeGuid) && URIUtil.isType(volume.getId(),Volume.class)) {    List<BlockSnapshot> snapshots=CustomQueryUtility.getActiveBlockSnapshotByNativeGuid(_dbClient,nativeGuid);    if (snapshots != null && !snapshots.isEmpty()) {      snap=(BlockObject)snapshots.get(0);    }  }  return snap;}  }
class C{  @Override public boolean jdbcCompliant(){  return true;}  }
class C{  private String readManifestFile(String file) throws IOException {  BufferedReader br=new BufferedReader(new FileReader(file));  try {    StringBuilder builder=new StringBuilder();    String line=null;    String newLine=System.getProperty("line.separator");    while ((line=br.readLine()) != null) {      builder.append(line);      builder.append(newLine);    }    return builder.toString();  }  finally {    try {      if (br != null)       br.close();    } catch (    IOException ex) {      logger.warn("Unable to close file " + file + ": "+ ex.toString());    }  }}  }
class C{  public void display(){  hand.display();}  }
class C{  MAC newMac(ProtocolVersion protocolVersion,SecretKey secret) throws NoSuchAlgorithmException, InvalidKeyException {  return new MAC(this,protocolVersion,secret);}  }
class C{  protected void addStatePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_EnterState_state_feature"),getString("_UI_PropertyDescriptor_description","_UI_EnterState_state_feature","_UI_EnterState_type"),SexecPackage.Literals.ENTER_STATE__STATE,true,false,true,null,null,null));}  }
class C{  public Collection<String> schemas(Connection conn) throws SQLException {  return dialect(conn).schemas(conn);}  }
class C{  public void addGeometry(final MasonGeometry g){  Envelope e=g.getGeometry().getEnvelopeInternal();  MBR.expandToInclude(e);  spatialIndex.insert(e,g);  geometries.add(g);}  }
class C{  @Override public void increment(double coord,double val){  int bin=getBinNr(coord);  if (bin < 0) {    if (size - bin > data.length) {      double[] tmpdata=new double[growSize(data.length,size - bin)];      System.arraycopy(data,0,tmpdata,-bin,size);      data=tmpdata;    } else {      System.arraycopy(data,0,data,-bin,size);      Arrays.fill(data,0,-bin,(double)0);    }    data[0]=val;    assert (data.length >= size - bin);    offset-=bin;    size-=bin;  } else   if (bin >= data.length) {    double[] tmpdata=new double[growSize(data.length,bin + 1)];    System.arraycopy(data,0,tmpdata,0,size);    tmpdata[bin]=val;    data=tmpdata;    size=bin + 1;    max=Double.MAX_VALUE;  } else {    if (bin >= size) {      size=bin + 1;    }    data[bin]+=val;  }}  }
class C{  public CDATASection createCDATASection(String data) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public void process(CompilationUnitDeclaration unit,int i){  this.lookupEnvironment.unitBeingCompleted=unit;  long parseStart=System.currentTimeMillis();  this.parser.getMethodBodies(unit);  long resolveStart=System.currentTimeMillis();  this.stats.parseTime+=resolveStart - parseStart;  if (unit.scope != null) {    unit.scope.faultInTypes();  }  if (unit.scope != null) {    unit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());  }  unit.resolve();  long analyzeStart=System.currentTimeMillis();  this.stats.resolveTime+=analyzeStart - resolveStart;  if (!this.options.ignoreMethodBodies) {    unit.analyseCode();  }  long generateStart=System.currentTimeMillis();  this.stats.analyzeTime+=generateStart - analyzeStart;  if (this.options.produceReferenceInfo && unit.scope != null) {    unit.scope.storeDependencyInfo();  }  unit.finalizeProblems();  this.stats.generateTime+=System.currentTimeMillis() - generateStart;  unit.compilationResult.totalUnitsKnown=this.totalUnits;  this.lookupEnvironment.unitBeingCompleted=null;}  }
class C{  public String sessionId(){  return sessionId;}  }
class C{  default Instant minuteAt(int month,int day,int hour,int minute){  return OffsetDateTime.of(2015,month,day,hour,minute,0,0,ZoneOffset.UTC).toInstant();}  }
class C{  public boolean isPointAboveElevation(Vec4 point,double elevation){  if (point == null)   return false;  return point.z() > elevation;}  }
class C{  public boolean onIntentChosen(Intent intent,ResolveInfo resolveInfo){  return false;}  }
class C{  protected ConditionalExpressionImpl(){  super();}  }
class C{  @Override public void disconnect(){  request.abort();}  }
class C{  public String foundType(){  return this.foundType;}  }
class C{  public void assertSplit(long suggestedStart,long suggestedLen,long expStart,long expLen,byte[] data,int len) throws Exception {  write(data);  IgfsFixedLengthRecordResolver rslvr=resolver(len);  IgfsFileRange split;  try (IgfsInputStream is=read()){    split=rslvr.resolveRecords(igfs,is,split(suggestedStart,suggestedLen));  }   assert split != null : "Split is null.";  assert split.start() == expStart : "Incorrect start [expected=" + expStart + ", actual="+ split.start()+ ']';  assert split.length() == expLen : "Incorrect length [expected=" + expLen + ", actual="+ split.length()+ ']';}  }
class C{  public void update(final T item){  if (itemsSeen_ == MAX_ITEMS_SEEN) {    throw new SketchesStateException("Sketch has exceeded capacity for total items seen: " + MAX_ITEMS_SEEN);  }  if (item == null) {    return;  }  if (itemsSeen_ < reservoirSize_) {    if (itemsSeen_ >= currItemsAlloc_) {      growReservoir();    }    assert itemsSeen_ < currItemsAlloc_;    data_[(int)itemsSeen_]=item;    ++itemsSeen_;  } else {    ++itemsSeen_;    if (SamplingUtil.rand.nextDouble() * itemsSeen_ < reservoirSize_) {      final int newSlot=SamplingUtil.rand.nextInt(reservoirSize_);      data_[newSlot]=item;    }  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiToolTipUI();  return MultiLookAndFeel.createUIs(mui,((MultiToolTipUI)mui).uis,a);}  }
class C{  public BrowseNextResponse BrowseNext(BrowseNextRequest req) throws ServiceFaultException, ServiceResultException {  return (BrowseNextResponse)channel.serviceRequest(req);}  }
class C{  public boolean isValidCertificate(final String dssCertificateId){  CertificateWrapper certificate=getUsedCertificateByIdNullSafe(dssCertificateId);  return certificate.isValidCertificate();}  }
class C{  private boolean openHelpInBrowser(){  String ceylonHome=System.getProperty(Constants.PROP_CEYLON_HOME_DIR);  if (ceylonHome == null || ceylonHome.isEmpty())   return false;  String toolDoc="ceylon";  if (tool.getName() != null && !tool.getName().isEmpty())   toolDoc+="-" + tool.getName();  toolDoc+=".html";  File docHome=new File(ceylonHome,"doc/en/toolset/");  File toolDocFile=new File(docHome,toolDoc);  if (toolDocFile.exists() && toolDocFile.isFile()) {    try {      Desktop.getDesktop().browse(toolDocFile.toURI());    } catch (    Exception e) {      throw new ToolUsageError("Could not open browser for uri '" + toolDocFile.toURI() + "'. Please invoke with the --no-pager command-line option.");    }    return true;  } else   return false;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MultipleXYSeriesLabelGenerator)) {    return false;  }  MultipleXYSeriesLabelGenerator that=(MultipleXYSeriesLabelGenerator)obj;  if (!this.formatPattern.equals(that.formatPattern)) {    return false;  }  if (!this.additionalFormatPattern.equals(that.additionalFormatPattern)) {    return false;  }  if (!this.seriesLabelLists.equals(that.seriesLabelLists)) {    return false;  }  return true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_ACTIVITY_1__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_ACTIVITY_1__CODE_LANGS_1:  return ((InternalEList<?>)getCodeLangs_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void maybeAddNewWizardActionsToWindow(IWorkbenchWindow activeWorkbenchWindow){  if (activeWorkbenchWindow == null) {    return;  }  activeWorkbenchWindow.addPerspectiveListener(perspectiveListener);  WorkbenchPage activePage=(WorkbenchPage)activeWorkbenchWindow.getActivePage();  if (activePage == null) {    return;  }  IPerspectiveDescriptor perspectiveDesc=activePage.getPerspective();  maybeAddNewWizardActionsToPerspective(activePage,perspectiveDesc);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static Bitmap scaleCenterCrop(Bitmap source,int newHeight,int newWidth){  if (source == null) {    return null;  }  int sourceWidth=source.getWidth();  int sourceHeight=source.getHeight();  float xScale=(float)newWidth / sourceWidth;  float yScale=(float)newHeight / sourceHeight;  float scale=Math.max(xScale,yScale);  float scaledWidth=scale * sourceWidth;  float scaledHeight=scale * sourceHeight;  float left=(newWidth - scaledWidth) / 2;  float top=(newHeight - scaledHeight) / 2;  RectF targetRect=new RectF(left,top,left + scaledWidth,top + scaledHeight);  Bitmap destination=Bitmap.createBitmap(newWidth,newHeight,source.getConfig());  Canvas canvas=new Canvas(destination);  canvas.drawBitmap(source,null,targetRect,null);  return destination;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.193 -0500",hash_original_method="94AFC9FBE774A81FB25FA734A5EF1C27",hash_generated_method="2112E36F322B11DC76D68CA6B8FE8379") public void runProtected(final Test test,Protectable p){  try {    p.protect();  } catch (  AssertionFailedError e) {    addFailure(test,e);  }catch (  ThreadDeath e) {    throw e;  }catch (  Throwable e) {    addError(test,e);  }}  }
class C{  public boolean isToExist(int to){  return tokenPairListTable.get(Integer.valueOf(to)) != null;}  }
class C{  public void addLayers(String[] ls,String[] st){  for (int j=0; j < ls.length; j++) {    layers+="," + ls[j];    if (st == null || j >= st.length || st[j] == null) {      styles+=",";    } else {      styles+="," + st[j];    }  }}  }
class C{  void split(){  final BucketPage copy=(BucketPage)copyOnWrite();  if (copy != this) {    copy.split();    return;  }  getParentDirectory()._splitBucketPage(this);}  }
class C{  public synchronized int size(){  return m_Ordered.size();}  }
class C{  public static MultisigTransaction createMultisigTransfer(){  return createMultisigTransfer(Utils.generateRandomAccount(),Utils.generateRandomAccount());}  }
class C{  @Override public String toString(){  if (size() == 0) {    return "{}";  }  final StringBuilder buf=new StringBuilder(32 * size());  buf.append('{');  final MapIterator<K,V> it=mapIterator();  boolean hasNext=it.hasNext();  while (hasNext) {    final K key=it.next();    final V value=it.getValue();    buf.append(key == this ? "(this Map)" : key).append('=').append(value == this ? "(this Map)" : value);    hasNext=it.hasNext();    if (hasNext) {      buf.append(',').append(' ');    }  }  buf.append('}');  return buf.toString();}  }
class C{  @GET @Produces(MediaType.APPLICATION_JSON) @Path("/help") public Map<String,List<? extends Object>> help(){  Map<String,List<?>> result=new LinkedHashMap<>();  List<EndpointHelpDto> endpoints=describeEndpoints(getEndpoints());  if (endpoints != null && !endpoints.isEmpty()) {    result.put("endpoints",endpoints);  }  List<MethodHelpDto> methods=describeMethods();  if (methods != null && !methods.isEmpty()) {    result.put("methods",methods);  }  return result;}  }
class C{  public ArithmeticExpression(int operation,Expression left,Expression right){  super(operation,ADD,MOD,left,right);  m_type=null;}  }
class C{  public String convertEntryKindToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  @Override public double countExample(double label,double predictedLabel){  double dif=label - predictedLabel;  return dif * dif;}  }
class C{  public static float[] fromRGB(ColorSpace colorSpace,int r,int g,int b){  return colorSpace.fromRGB(new float[]{r / 255f,g / 255f,b / 255f});}  }
class C{  @Override public void start(){  super.start();  try {    System.out.print("Reading boundary data ... ");    URL wardsFile=SchellingSpace.class.getResource("data/DCreprojected.shp");    ShapeFileImporter.read(wardsFile,world,SchellingGeometry.class);  } catch (  Exception ex) {    System.out.println("Error opening shapefile!" + ex);    System.exit(-1);  }  agents.setMBR(world.getMBR());  System.out.println("done");  System.out.print("Computing convex hull ... ");  world.computeConvexHull();  System.out.print("done.\nComputing union ... ");  world.computeUnion();  System.out.println("done");  setup();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.393 -0500",hash_original_method="B0BA66A83CE642C4DD80DDEEFA7F6EBC",hash_generated_method="A96091188E14B3C0996F8E224B35FC6E") static Method findMethod(Class<?> cl,String methodName){  Class<?> search=cl;  Method method=null;  while (search != null) {    try {      method=search.getDeclaredMethod(methodName,(Class[])null);      if (search == cl || (method.getModifiers() & Modifier.PRIVATE) == 0) {        method.setAccessible(true);        return method;      }    } catch (    NoSuchMethodException nsm) {    }    search=search.getSuperclass();  }  return null;}  }
class C{  @Timeout public void handleTimer(Timer timer){  logger.logInfo(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.INFO_TIMER_TIMEOUT_RETRIEVED,String.valueOf(timer.getInfo()));  boolean outcome=false;  TimerType timerType=(TimerType)timer.getInfo();  long currentTime=System.currentTimeMillis();  TimerProcessing processingData=createTimerProcessing(timerType,currentTime);  if (processingData != null) {    try {switch (timerType) {case ORGANIZATION_UNCONFIRMED:        outcome=accMgmt.removeOverdueOrganizations(currentTime);      break;case RESTRICTED_SUBSCRIPTION_USAGE_PERIOD:    outcome=subMgmt.expireOverdueSubscriptions(currentTime);  break;case TENANT_PROVISIONING_TIMEOUT:outcome=subMgmt.notifyAboutTimedoutSubscriptions(currentTime);break;case BILLING_INVOCATION:outcome=bm.startBillingRun(currentTime);outcome=ps.chargeForOutstandingBills() && outcome;break;case DISCOUNT_END_CHECK:outcome=accMgmt.sendDiscountEndNotificationMail(currentTime);break;case INACTIVE_ON_BEHALF_USERS_REMOVAL:outcome=idServiceLocal.removeInactiveOnBehalfUsers();break;case USER_NUM_CHECK:outcome=accMgmt.checkUserNum();break;default :logger.logError(LogMessageIdentifier.ERROR_TIMER_TIMEOUT_FOR_UNKNOWN_TYPE);}} catch (Exception e) {logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_HANDLE_TIMER_FAILED);}updateTimerProcessing(processingData,outcome);} else {logger.logInfo(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.INFO_TIMER_NO_HANDLING);}}  }
class C{  public Extractors extract(ExtractRule rule){  extract(rule.getField(),rule.getExtractor());  return this;}  }
class C{  Main enclosingMain(){  return Main.this;}  }
class C{  public static float handleAttack(DamageSource damageSource,EntityLivingBase attackedEntity,float damage){  if (attackedEntity.hurtTime == 0 && attackedEntity.deathTime == 0 && damageSource instanceof EntityDamageSource && (attackedEntity instanceof EntityPlayer == false || !((EntityPlayer)attackedEntity).capabilities.disableDamage)) {    Entity attacker=null;    Entity source=null;    if (damageSource instanceof EntityDamageSourceIndirect) {      attacker=((EntityDamageSourceIndirect)damageSource).getSourceOfDamage();      source=((EntityDamageSource)damageSource).getEntity();    } else {      attacker=((EntityDamageSource)damageSource).getEntity();      source=attacker;    }    if (attacker != null && source != null) {      List<CircleGem> attackerGems=CircleGemHelper.getGems(attacker);      List<CircleGem> sourceGems=new ArrayList<CircleGem>();      if (source != attacker) {        sourceGems.addAll(CircleGemHelper.getGems(source));      }      CircleGemType attackerItemGem=CircleGemType.NONE;      if (attacker instanceof EntityLivingBase) {        ItemStack heldItem=((EntityLivingBase)attacker).getActiveItemStack();        if (heldItem != null)         attackerItemGem=CircleGemHelper.getGem(heldItem);      }      List<CircleGem> attackedGems=CircleGemHelper.getGems(attackedEntity);      CircleGemType attackedBlockingItemGem=CircleGemType.NONE;      if (attacker instanceof EntityPlayer) {        EntityPlayer player=(EntityPlayer)attacker;        ItemStack heldItem=player.getActiveItemStack();        if (heldItem != null && player.isActiveItemStackBlocking()) {          attackedBlockingItemGem=CircleGemHelper.getGem(heldItem);        }      }      int gemRelation=0;      for (      CircleGem gem : attackerGems) {        if (gem.matchCombatType(CircleGem.CombatType.OFFENSIVE)) {          for (          CircleGem gemAttacked : attackedGems) {            if (gemAttacked.matchCombatType(CircleGem.CombatType.DEFENSIVE)) {              gemRelation+=gem.getGemType().getRelation(gemAttacked.getGemType());            }          }          gemRelation+=gem.getGemType().getRelation(attackedBlockingItemGem);        }      }      for (      CircleGem gemAttacked : attackedGems) {        if (gemAttacked.matchCombatType(CircleGem.CombatType.DEFENSIVE)) {          gemRelation+=attackerItemGem.getRelation(gemAttacked.getGemType());        }      }      gemRelation+=attackerItemGem.getRelation(attackedBlockingItemGem);      for (      CircleGem gem : sourceGems) {        if (gem.matchCombatType(CircleGem.CombatType.OFFENSIVE)) {          for (          CircleGem gemAttacked : attackedGems) {            if (gemAttacked.matchCombatType(CircleGem.CombatType.DEFENSIVE)) {              gemRelation+=gem.getGemType().getRelation(gemAttacked.getGemType());            }          }          gemRelation+=gem.getGemType().getRelation(attackedBlockingItemGem);        }      }      if (attackedEntity instanceof EntityLivingBase) {        Iterable<ItemStack> equipment=((EntityLivingBase)attackedEntity).getEquipmentAndArmor();        for (        ItemStack equipmentStack : equipment) {          if (equipmentStack != null && !equipmentStack.equals(((EntityLivingBase)attackedEntity).getActiveHand()) && equipmentStack.getItem() instanceof ItemArmor) {            CircleGemType armorGem=CircleGemHelper.getGem(equipmentStack);            for (            CircleGem gem : attackerGems) {              if (gem.matchCombatType(CircleGem.CombatType.OFFENSIVE)) {                gemRelation+=gem.getGemType().getRelation(armorGem);              }            }            gemRelation+=attackerItemGem.getRelation(armorGem);            for (            CircleGem gem : sourceGems) {              if (gem.matchCombatType(CircleGem.CombatType.OFFENSIVE)) {                gemRelation+=gem.getGemType().getRelation(armorGem);              }            }          }        }      }      float gemDamageVariation=Math.min(((gemRelation != 0 ? Math.signum(gemRelation) * 1 : 0) + gemRelation) / 6.0F * MAX_GEM_DAMAGE_VARIATION,MAX_GEM_DAMAGE_VARIATION);      if (gemDamageVariation != 0.0F) {        damage=Math.max(damage + gemDamageVariation,1.0F);      }      boolean attackerProc=attacker.worldObj.rand.nextFloat() <= (source == attacker && !attacker.onGround && attacker.motionY < 0 ? GEM_PROC_CHANCE * 1.33F : GEM_PROC_CHANCE);      boolean defenderProc=attacker.worldObj.rand.nextFloat() <= GEM_PROC_CHANCE;      boolean attackerProcd=false;      boolean defenderProcd=false;      TObjectIntHashMap<CircleGemType> attackerGemCounts=new TObjectIntHashMap<CircleGemType>();      for (      CircleGem gem : attackerGems) {        if (gem.matchCombatType(CircleGem.CombatType.OFFENSIVE)) {          attackerGemCounts.adjustOrPutValue(gem.getGemType(),1,1);        }      }      attackerGemCounts.adjustOrPutValue(attackerItemGem,1,1);      for (      CircleGemType gem : attackerGemCounts.keySet()) {        attackerProcd|=applyProc(gem,attacker,source,attacker,attackedEntity,attackerProc,defenderProc,getMultipleProcStrength(attackerGemCounts.get(gem),damage));      }      TObjectIntHashMap<CircleGemType> defenderGemCounts=new TObjectIntHashMap<CircleGemType>();      if (attackedEntity instanceof EntityLivingBase) {        Iterable<ItemStack> equipment=((EntityLivingBase)attackedEntity).getEquipmentAndArmor();        for (        ItemStack equipmentStack : equipment) {          if (equipmentStack != null && !equipmentStack.equals(((EntityLivingBase)attackedEntity).getActiveHand()) && equipmentStack.getItem() instanceof ItemArmor) {            CircleGemType armorGem=CircleGemHelper.getGem(equipmentStack);            if (armorGem != CircleGemType.NONE) {              defenderGemCounts.adjustOrPutValue(armorGem,1,1);            }          }        }      }      for (      CircleGem gem : attackedGems) {        if (gem.matchCombatType(CircleGem.CombatType.DEFENSIVE)) {          defenderGemCounts.adjustOrPutValue(gem.getGemType(),1,1);        }      }      defenderGemCounts.adjustOrPutValue(attackedBlockingItemGem,1,1);      for (      CircleGemType gem : defenderGemCounts.keySet()) {        defenderProcd|=applyProc(gem,attackedEntity,source,attacker,attackedEntity,attackerProc,defenderProc,getMultipleProcStrength(defenderGemCounts.get(gem),damage));      }      if (attackerProcd || defenderProcd) {      }    }  }  return damage;}  }
class C{  public int isSSL(){  return tlsConnection ? 1 : 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected Geometry transformLinearRing(LinearRing geom,Geometry parent){  boolean removeDegenerateRings=parent instanceof Polygon;  Geometry simpResult=super.transformLinearRing(geom,parent);  if (removeDegenerateRings && !(simpResult instanceof LinearRing))   return null;  ;  return simpResult;}  }
class C{  public RpcClient peerWith(InetSocketAddress remoteAddress,Bootstrap bootstrap) throws IOException {  return peerWith(remoteAddress,bootstrap,null);}  }
class C{  private void updateEntries(Cache<Integer,Integer> cache,int newVal,boolean invoke,Set<Integer> keys){  if (invoke)   cache.invokeAll(keys,new IntegerSetValue(newVal)); else {    final Map<Integer,Integer> entries=new HashMap<>(ENTRY_COUNT);    for (    final Integer key : keys)     entries.put(key,newVal);    cache.putAll(entries);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  updateMaskIfNecessary();}  }
class C{  private File computeDestinationFolder(final ResourceType resourceType) throws MojoExecutionException {  File folder=destinationFolder;  if (resourceType == ResourceType.JS) {    if (jsDestinationFolder != null) {      folder=jsDestinationFolder;    }  }  if (resourceType == ResourceType.CSS) {    if (cssDestinationFolder != null) {      folder=cssDestinationFolder;    }  }  getLog().info("folder: " + folder);  if (folder == null) {    throw new MojoExecutionException("Couldn't compute destination folder for resourceType: " + resourceType + ". That means that you didn't define one of the following parameters: "+ "destinationFolder, cssDestinationFolder, jsDestinationFolder");  }  if (!folder.exists()) {    folder.mkdirs();  }  return folder;}  }
class C{  public InvalidDeltaException(String msg,Throwable e){  super(msg,e);}  }
class C{  public static void copyFile(File sourceFile,File destFile) throws IOException {  if (!destFile.exists()) {    destFile.createNewFile();  }  FileChannel source=null;  FileChannel destination=null;  try {    source=new FileInputStream(sourceFile).getChannel();    destination=new FileOutputStream(destFile).getChannel();    destination.transferFrom(source,0,source.size());  }  finally {    if (source != null) {      source.close();    }    if (destination != null) {      destination.close();    }  }}  }
class C{  public static boolean walkComponents(com.haulmont.cuba.gui.components.Component.Container container,ComponentFinder finder){  return __walkComponents(container,finder);}  }
class C{  public void readFromObject(Object data){  getTable().cancelEditing();  Property[] properties=model.getProperties();  for (int i=0, c=properties.length; i < c; i++) {    properties[i].readFromObject(data);  }  repaint();}  }
class C{  public static <K,V>LinkedHashMap<K,V> linkedHashMap(int initialCapacity){  return new LinkedHashMap<K,V>(initialCapacity);}  }
class C{  private void mustdo(Runnable runnable){  if (runnable == null) {    return;  }  long start=System.currentTimeMillis();  runnable.run();  long consume=System.currentTimeMillis() - start;  if (consume > 1000) {    log.error(Thread.currentThread().toString() + "##mustdo() take more than 1000 ms");  }}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public void query(boolean isReport,int AD_Table_ID,int Record_ID){  log.config("Report=" + isReport + ", AD_Table_ID="+ AD_Table_ID+ ",Record_ID="+ Record_ID);  reportField.setSelected(isReport);  m_AD_Table_ID=AD_Table_ID;  m_Record_ID=Record_ID;  cmd_query();}  }
class C{  public FixedSizeThumbnailMaker size(int width,int height){  if (ready.isSet(PARAM_SIZE)) {    throw new IllegalStateException("The size has already been set.");  }  if (width <= 0) {    throw new IllegalArgumentException("Width must be greater than zero.");  }  if (height <= 0) {    throw new IllegalArgumentException("Height must be greater than zero.");  }  this.width=width;  this.height=height;  ready.set(PARAM_SIZE);  return this;}  }
class C{  public void close() throws IOException {  archive.close();}  }
class C{  public static CompiledMethod optCompile(ExecutionState state){  NormalMethod method=state.getMethod();  if (VM.TraceOnStackReplacement) {    VM.sysWriteln("OPT : starts compiling " + method);  }  ControllerPlan latestPlan=ControllerMemory.findLatestPlan(method);  OptOptions _options=null;  if (latestPlan != null) {    _options=latestPlan.getCompPlan().options.dup();  } else {    _options=new OptOptions();    _options.setOptLevel(0);  }  _options.OSR_GUARDED_INLINING=false;  CompilationPlan compPlan=new CompilationPlan(method,(OptimizationPlanElement[])RuntimeCompiler.optimizationPlan,null,_options);  byte[] prologue=state.generatePrologue();  int prosize=prologue.length;  method.setForOsrSpecialization(prologue,state.getMaxStackHeight());  int[] oldStartPCs=null;  int[] oldEndPCs=null;  int[] oldHandlerPCs=null;{    ExceptionHandlerMap exceptionHandlerMap=method.getExceptionHandlerMap();    if (exceptionHandlerMap != null) {      oldStartPCs=exceptionHandlerMap.getStartPC();      oldEndPCs=exceptionHandlerMap.getEndPC();      oldHandlerPCs=exceptionHandlerMap.getHandlerPC();      int n=oldStartPCs.length;      int[] newStartPCs=new int[n];      System.arraycopy(oldStartPCs,0,newStartPCs,0,n);      exceptionHandlerMap.setStartPC(newStartPCs);      int[] newEndPCs=new int[n];      System.arraycopy(oldEndPCs,0,newEndPCs,0,n);      exceptionHandlerMap.setEndPC(newEndPCs);      int[] newHandlerPCs=new int[n];      System.arraycopy(oldHandlerPCs,0,newHandlerPCs,0,n);      exceptionHandlerMap.setHandlerPC(newHandlerPCs);      for (int i=0; i < n; i++) {        newStartPCs[i]+=prosize;        newEndPCs[i]+=prosize;        newHandlerPCs[i]+=prosize;      }    }  }  CompiledMethod newCompiledMethod=RuntimeCompiler.recompileWithOptOnStackSpecialization(compPlan);  method.finalizeOsrSpecialization();{    ExceptionHandlerMap exceptionHandlerMap=method.getExceptionHandlerMap();    if (exceptionHandlerMap != null) {      exceptionHandlerMap.setStartPC(oldStartPCs);      exceptionHandlerMap.setEndPC(oldEndPCs);      exceptionHandlerMap.setHandlerPC(oldHandlerPCs);    }  }  if (newCompiledMethod == null) {    if (VM.TraceOnStackReplacement) {      VM.sysWriteln("OPT : fialed, because compilation in progress, " + "fall back to baseline");    }    return baselineCompile(state);  }  newCompiledMethod.setSpecialForOSR();  if (VM.TraceOnStackReplacement)   VM.sysWriteln("OPT : done\n");  return newCompiledMethod;}  }
class C{  public static Chset xor(Chset left,Chset right){  return union(difference(left,right),difference(right,left));}  }
class C{  private void jbInit() throws Exception {  bDelete.setImage("/images/Delete16.png");  bDelete.setTooltiptext(Msg.getMsg(Env.getCtx(),"Delete"));  bNew.setImage("/images/New16.png");  bNew.setTooltiptext(Msg.getMsg(Env.getCtx(),"New"));  bUp.setImage("/images/Previous16.png");  bUp.setTooltiptext(Msg.getMsg(Env.getCtx(),"Previous"));  bDown.setImage("/images/Next16.png");  bDown.setTooltiptext(Msg.getMsg(Env.getCtx(),"Next"));  cbActive.setText(Msg.translate(Env.getCtx(),"IsActive"));  cbExclude.setText(Msg.translate(Env.getCtx(),"IsExclude"));  cbReadOnly.setText(Msg.translate(Env.getCtx(),"IsReadOnly"));  cbDependent.setText(Msg.translate(Env.getCtx(),"IsDependentEntities"));  Grid grid=GridFactory.newGridLayout();  this.appendChild(grid);  Rows rows=new Rows();  grid.appendChild(rows);  Row row=new Row();  rows.appendChild(row);  row.appendChild(bUp);  row.appendChild(new Label());  row.appendChild(new Label());  row.appendChild(new Label());  row.appendChild(new Label());  row.appendChild(new Label());  row.appendChild(bNew);  row=new Row();  rows.appendChild(row);  row.appendChild(roleLabel);  row.appendChild(roleField);  row.appendChild(cbActive);  row.appendChild(cbExclude);  row.appendChild(cbReadOnly);  row.appendChild(cbDependent);  row.appendChild(bDelete);  row=new Row();  rows.appendChild(row);  row.appendChild(bDown);  row.appendChild(new Label());  row.appendChild(new Label());  row.appendChild(new Label());  row.appendChild(new Label());  row.appendChild(new Label());  row.appendChild(rowNoLabel);  row=new Row();  rows.appendChild(row);  row.setSpans("7");  Div div=new Div();  div.setAlign("right");  div.appendChild(confirmPanel);  row.appendChild(div);  bUp.addEventListener(Events.ON_CLICK,this);  bDown.addEventListener(Events.ON_CLICK,this);  bDelete.addEventListener(Events.ON_CLICK,this);  bNew.addEventListener(Events.ON_CLICK,this);  confirmPanel.addActionListener(this);}  }
class C{  public Hash(String hex){  if (hex.length() != 64) {    throw new IllegalArgumentException("Digest length must be 64 hex characters for Hash");  }  this.bytes=ByteUtils.reverse(ByteUtils.fromHex(hex));}  }
class C{  public Anonymous_traceOptions_1_ createAnonymous_traceOptions_1_(){  Anonymous_traceOptions_1_Impl anonymous_traceOptions_1_=new Anonymous_traceOptions_1_Impl();  return anonymous_traceOptions_1_;}  }
class C{  public void processJavaDelta(IJavaElementDelta delta){  try {    traverseDelta(delta,null,null);    Iterator iterator=this.projectsToUpdate.iterator();    while (iterator.hasNext()) {      JavaProject project=(JavaProject)iterator.next();      project.resetCaches();    }  }  finally {    this.projectsToUpdate=new HashSet();  }}  }
class C{  public void fillArc(int x,int y,int width,int height,int startAngle,int arcAngle){  Rectangle2D.Float rect=new Rectangle2D.Float(x,y,width,height);  addDrawingRect(rect);  mPrintMetrics.fill(this);}  }
class C{  public void ensureCapacity(int minimumCapacity){  if (minimumCapacity <= _capacity)   return;  if (minimumCapacity > 0x1000) {    _capacity=(minimumCapacity + 0xfff) & ~0xfff;  } else {    while (_capacity < minimumCapacity) {      _capacity+=_capacity;    }  }  byte[] bytes=new byte[_capacity];  System.arraycopy(_buffer,0,bytes,0,_length);  _buffer=bytes;}  }
class C{  private void generate(Index index) throws SAXException {  if (index == null) {    return;  }  AttributesImpl atts=new AttributesImpl();  if (index instanceof IndexCreationData) {    IndexCreationData indexData=(IndexCreationData)index;    atts.addAttribute("","",NAME,"",indexData.getIndexName());    String indexType=indexData.getIndexType();    if (indexType.equals("KEY")) {      atts.addAttribute("","",KEY_INDEX,"","true");    } else {      if (indexType.equals("HASH")) {        indexType=HASH_INDEX_TYPE;      } else {        indexType=RANGE_INDEX_TYPE;      }      atts.addAttribute("","",KEY_INDEX,"","false");      atts.addAttribute("","",INDEX_TYPE,"","" + indexType);    }    atts.addAttribute("","",FROM_CLAUSE,"",indexData.getIndexFromClause());    atts.addAttribute("","",EXPRESSION,"",indexData.getIndexExpression());  } else {    atts.addAttribute("","",NAME,"",index.getName());    if (index instanceof PrimaryKeyIndex) {      atts.addAttribute("","",KEY_INDEX,"","true");    } else {      atts.addAttribute("","",KEY_INDEX,"","false");      String indexType="range";      if (index instanceof HashIndex) {        indexType="hash";      }      atts.addAttribute("","",INDEX_TYPE,"","" + indexType);    }    atts.addAttribute("","",FROM_CLAUSE,"",index.getFromClause());    atts.addAttribute("","",EXPRESSION,"",index.getIndexedExpression());  }  handler.startElement("",INDEX,INDEX,atts);  handler.endElement("",INDEX,INDEX);}  }
class C{  @RequestMapping(value="/tagTypes/{tagTypeCode}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_TAG_TYPES_PUT) public TagType updateTagType(@PathVariable("tagTypeCode") String tagTypeCode,@RequestBody TagTypeUpdateRequest request){  return tagTypeService.updateTagType(new TagTypeKey(tagTypeCode),request);}  }
class C{  @Override public String readLine() throws IOException {  if (this.hasNext()) {    String line=this.buffer;    this.buffer=null;    return line;  } else {    if (null != this.error) {      IOException e=this.error;      this.error=null;      throw e;    }    return null;  }}  }
class C{  public Label mark(){  Label label=new Label();  mv.visitLabel(label);  return label;}  }
class C{  public Builder jsonMetadata(String metadata){  return jsonMetadata(toBytes(metadata));}  }
class C{  public void rearrangeChildren(int itemCount){  ArrayList<View> views=getItemsInReadingOrder();  mContent.arrangeChildren(views,Math.max(itemCount,views.size()));  mItemsInvalidated=true;}  }
class C{  @Deprecated public static synchronized NceTrafficController instance(){  if (self == null) {    if (log.isDebugEnabled()) {      log.debug("creating a new NceTrafficController object");    }    self=new NceTrafficController();    jmri.InstanceManager.setCommandStation(self);  }  return self;}  }
class C{  @Override public boolean isVisible(){  return (getSceneHints().getCullHint() != CullHint.Always);}  }
class C{  public void testFollowerVotesForOneCandidatePerTerm() throws Throwable {  runOnServer(null);}  }
class C{  public static float[] closeLLa(float[] lla){  int l=lla.length;  int s=(l / 2) - 1;  if (lla[0] == lla[s * 2] && lla[1] == lla[s * 2 + 1]) {    return lla;  } else {    float[] llx=new float[l + 2];    System.arraycopy(lla,0,llx,0,l);    llx[l]=lla[0];    llx[l + 1]=lla[1];    return llx;  }}  }
class C{  public PersonalityInsightsTest() throws FileNotFoundException {  profile=loadFixture(RESOURCE + "profile.json",Profile.class);  text="foo-bar-text";  contentItem=new ContentItem();  contentItem.setContent(text);}  }
class C{  public double[] evaluateModel(Classifier classifier,Instances data,Object... forPredictionsPrinting) throws Exception {  return m_delegate.evaluateModel(classifier,data,forPredictionsPrinting);}  }
class C{  public int lastIndexOf(Object o){  if (o == null) {    for (int i=size - 1; i >= 0; i--)     if (elementData[i] == null)     return i;  } else {    for (int i=size - 1; i >= 0; i--)     if (o.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  void format(StringBuilder sb,Temporal localDate){  int len=_timestamp.length;  for (int j=0; j < len; j++) {    _timestamp[j].format(sb,localDate);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private static void registerEntityWriter(EntityWriter entityWriter){  writers.put(entityWriter.getType(),entityWriter);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(6);  newVector.addElement(new Option("\tSets search method for subset evaluators.\n" + "\teg. -S \"weka.attributeSelection.BestFirst -S 8\"","S",1,"-S <\"Name of search class [search options]\">"));  newVector.addElement(new Option("\tSets attribute/subset evaluator.\n" + "\teg. -E \"weka.attributeSelection.CfsSubsetEval -L\"","E",1,"-E <\"Name of attribute/subset evaluation class [evaluator options]\">"));  if ((m_ASEvaluator != null) && (m_ASEvaluator instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to " + "evaluator " + m_ASEvaluator.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_ASEvaluator).listOptions()));  }  if ((m_ASSearch != null) && (m_ASSearch instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to " + "search " + m_ASSearch.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_ASSearch).listOptions()));  }  return newVector.elements();}  }
class C{  @Override protected boolean isBalanced(){  return totalLength >= minLengthByDepth[treeDepth];}  }
class C{  public void forwardReference(TraceLocal trace){  if (cleared)   return;  Clock.stop();  Trace.trace(Item.REFERENCES,"Forwarding reference %x: %s reference %s",System.identityHashCode(this),semantics,ObjectModel.getString(ref));  Clock.start();  processReference(trace);}  }
class C{  public void testNextInt(){  SplittableRandom sr=new SplittableRandom();  int f=sr.nextInt();  int i=0;  while (i < NCALLS && sr.nextInt() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public RandomSeedGenerator(){  this(0,0);}  }
class C{  private HttpURLConnection prepareConnection(URL url) throws IOException {  HttpURLConnection connection;  connection=(HttpURLConnection)url.openConnection(_proxy);  connection.setConnectTimeout(_timeout);  connection.setReadTimeout(_timeout);  if (url.getProtocol().equalsIgnoreCase(EMC_SSO_AUTH_SERVICE_PROTOCOL)) {    ((HttpsURLConnection)connection).setSSLSocketFactory(_sslSocketFactory);  }  return connection;}  }
class C{  public DecimalEscapeSequence createDecimalEscapeSequence(){  DecimalEscapeSequenceImpl decimalEscapeSequence=new DecimalEscapeSequenceImpl();  return decimalEscapeSequence;}  }
class C{  public int borrowSpareRegister(int category){  int result=spareRegisterBase + borrowedSpareRegisters;  borrowedSpareRegisters+=category;  registerCount=Math.max(registerCount,result + category);  return result;}  }
class C{  public int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler ch,int start,int length) throws org.xml.sax.SAXException {  int stateForNextChunk=SUPPRESS_LEADING_WS;  int stop=start + length;  int startChunk=start >>> m_chunkBits;  int startColumn=start & m_chunkMask;  int stopChunk=stop >>> m_chunkBits;  int stopColumn=stop & m_chunkMask;  for (int i=startChunk; i < stopChunk; ++i) {    if (i == 0 && m_innerFSB != null)     stateForNextChunk=m_innerFSB.sendNormalizedSAXcharacters(ch,startColumn,m_chunkSize - startColumn); else     stateForNextChunk=sendNormalizedSAXcharacters(m_array[i],startColumn,m_chunkSize - startColumn,ch,stateForNextChunk);    startColumn=0;  }  if (stopChunk == 0 && m_innerFSB != null)   stateForNextChunk=m_innerFSB.sendNormalizedSAXcharacters(ch,startColumn,stopColumn - startColumn); else   if (stopColumn > startColumn) {    stateForNextChunk=sendNormalizedSAXcharacters(m_array[stopChunk],startColumn,stopColumn - startColumn,ch,stateForNextChunk | SUPPRESS_TRAILING_WS);  }  return stateForNextChunk;}  }
class C{  public void addVariable(String variableName,long variableValue){  variables.put(variableName,Long.toString(variableValue));}  }
class C{  void invokeAndWait(final Runnable r){  final CountDownLatch latch=new CountDownLatch(1);  queue.postRunnable(null);  try {    latch.await();  } catch (  InterruptedException e) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.345 -0400",hash_original_method="B019DAECB2569BDAA496465AA5D658BF",hash_generated_method="1AC2F6DCC09FB7F84D0EBB90CAFCEC43") private SubMap<K,V> newSubMap(K fromKey,boolean fromInclusive,K toKey,boolean toInclusive){  if (isDescending) {    K tk=fromKey;    fromKey=toKey;    toKey=tk;    boolean ti=fromInclusive;    fromInclusive=toInclusive;    toInclusive=ti;  }  if (lo != null) {    if (fromKey == null) {      fromKey=lo;      fromInclusive=loInclusive;    } else {      int c=m.compare(fromKey,lo);      if (c < 0 || (c == 0 && !loInclusive && fromInclusive))       throw new IllegalArgumentException("key out of range");    }  }  if (hi != null) {    if (toKey == null) {      toKey=hi;      toInclusive=hiInclusive;    } else {      int c=m.compare(toKey,hi);      if (c > 0 || (c == 0 && !hiInclusive && toInclusive))       throw new IllegalArgumentException("key out of range");    }  }  return new SubMap<K,V>(m,fromKey,fromInclusive,toKey,toInclusive,isDescending);}  }
class C{  public Binomial(int trials,double p){  setTrials(trials);  setP(p);}  }
class C{  public PaymentProcessorFactoryImpl(final PaymentModulesManager paymentModulesManager,final String paymentProcessorBeanId){  this.paymentModulesManager=paymentModulesManager;  this.paymentProcessorBeanId=paymentProcessorBeanId;}  }
class C{  protected void clearOutEvents(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String readFile(String fileName) throws IOException {  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();  StringBuilder content=new StringBuilder();  try (InputStream fileStream=classLoader.getResourceAsStream(fileName);InputStreamReader fileReader=new InputStreamReader(fileStream);BufferedReader in=new BufferedReader(fileReader)){    String line;    while ((line=in.readLine()) != null) {      content.append(line);    }  }   return content.toString();}  }
class C{  public List<MType> build(){  isClean=true;  if (!isMessagesListMutable && builders == null) {    return messages;  }  boolean allMessagesInSync=true;  if (!isMessagesListMutable) {    for (int i=0; i < messages.size(); i++) {      Message message=messages.get(i);      SingleFieldBuilder<MType,BType,IType> builder=builders.get(i);      if (builder != null) {        if (builder.build() != message) {          allMessagesInSync=false;          break;        }      }    }    if (allMessagesInSync) {      return messages;    }  }  ensureMutableMessageList();  for (int i=0; i < messages.size(); i++) {    messages.set(i,getMessage(i,true));  }  messages=Collections.unmodifiableList(messages);  isMessagesListMutable=false;  return messages;}  }
class C{  @Deprecated public void findNotes(NoteFilter filter,int offset,int maxNotes,OnClientCallback<NoteList> callback){  AsyncReflector.execute(mClient,callback,"findNotes",mAuthenticationToken,filter,offset,maxNotes);}  }
class C{  public static TriggerDefinition updateTriggerDefinition(TriggerDefinition domObj,VOTriggerDefinition vo) throws ValidationException, ConcurrentModificationException {  verifyVersionAndKey(domObj,vo);  copyAttributes(domObj,vo);  return domObj;}  }
class C{  private void initEncryption(Cipher cipher,SecretKey key) throws InvalidKeyException {  cipher.init(Cipher.ENCRYPT_MODE,key);}  }
class C{  public void scrollToSelectedRow(int selectedRow){  if (impl.getModel().getRowCount() > 0) {    scrollTo(selectedRow,0);  }}  }
class C{  public LDAPConnection bindAs(String userDN,String password) throws GuacamoleException {  LDAPConnection ldapConnection=createLDAPConnection();  try {    ldapConnection.connect(confService.getServerHostname(),confService.getServerPort());    if (confService.getEncryptionMethod() == EncryptionMethod.STARTTLS)     ldapConnection.startTLS();  } catch (  LDAPException e) {    logger.error("Unable to connect to LDAP server: {}",e.getMessage());    logger.debug("Failed to connect to LDAP server.",e);    return null;  }  try {    byte[] passwordBytes;    try {      if (password != null)       passwordBytes=password.getBytes("UTF-8"); else       passwordBytes=null;    } catch (    UnsupportedEncodingException e) {      logger.error("Unexpected lack of support for UTF-8: {}",e.getMessage());      logger.debug("Support for UTF-8 (as required by Java spec) not found.",e);      disconnect(ldapConnection);      return null;    }    ldapConnection.bind(LDAPConnection.LDAP_V3,userDN,passwordBytes);  } catch (  LDAPException e) {    logger.debug("LDAP bind failed.",e);    disconnect(ldapConnection);    return null;  }  return ldapConnection;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (isAnyAcct() && getAccount_ID() != 0)   setAccount_ID(0);  if (isAnyActivity() && getC_Activity_ID() != 0)   setC_Activity_ID(0);  if (isAnyBPartner() && getC_BPartner_ID() != 0)   setC_BPartner_ID(0);  if (isAnyCampaign() && getC_Campaign_ID() != 0)   setC_Campaign_ID(0);  if (isAnyLocFrom() && getC_LocFrom_ID() != 0)   setC_LocFrom_ID(0);  if (isAnyLocTo() && getC_LocTo_ID() != 0)   setC_LocTo_ID(0);  if (isAnyOrg() && getOrg_ID() != 0)   setOrg_ID(0);  if (isAnyOrgTrx() && getAD_OrgTrx_ID() != 0)   setAD_OrgTrx_ID(0);  if (isAnyProduct() && getM_Product_ID() != 0)   setM_Product_ID(0);  if (isAnyProject() && getC_Project_ID() != 0)   setC_Project_ID(0);  if (isAnySalesRegion() && getC_SalesRegion_ID() != 0)   setC_SalesRegion_ID(0);  if (isAnyUser1() && getUser1_ID() != 0)   setUser1_ID(0);  if (isAnyUser2() && getUser2_ID() != 0)   setUser2_ID(0);  return true;}  }
class C{  public static String indexToString(int index){  return "" + (index + 1);}  }
class C{  private void addSigningKey(final ConfProxyProperties conf,final String keyId) throws Exception {  ClientId clientId=null;  GenerateSelfSignedCertResponse response=SignerClient.execute(new GenerateSelfSignedCert(keyId,"N/A",new Date(0),new Date(Integer.MAX_VALUE),KeyUsageInfo.SIGNING,clientId));  byte[] certBytes=response.getCertificateBytes();  conf.saveCert(keyId,certBytes);  System.out.println("Saved self-signed certificate to cert_" + keyId + ".pem");  if (conf.getActiveSigningKey() == null) {    System.out.println("No active key configured," + " setting new key as active in " + CONF_INI);    conf.setActiveSigningKey(keyId);  }  conf.addKeyId(keyId);  System.out.println("Added key to " + CONF_INI);}  }
class C{  public StepAllowance addAllowance(long processStepId,long roleId,boolean readOnly) throws PortalException, SystemException {  long stepAllowanceId=counterLocalService.increment(StepAllowance.class.getName());  StepAllowance stepAllowance=stepAllowancePersistence.create(stepAllowanceId);  if (Validator.isNotNull(stepAllowance)) {    stepAllowance.setProcessStepId(processStepId);    stepAllowance.setRoleId(roleId);    stepAllowance.setReadOnly(readOnly);    stepAllowancePersistence.update(stepAllowance);  }  return stepAllowance;}  }
class C{  public static CANJaguar canJaguar(int canID){  return canRegistrar.fetch(canID,CANJaguar.class,null);}  }
class C{  public void sync(){  try {    file.force(true);  } catch (  IOException e) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_WRITING_FAILED,"Could not sync file {0}",fileName,e);  }}  }
class C{  public void toWire(DNSOutput out,Compression c){  if (!isAbsolute())   throw new IllegalArgumentException("toWire() called on " + "non-absolute name");  int labels=labels();  for (int i=0; i < labels - 1; i++) {    Name tname;    if (i == 0)     tname=this; else     tname=new Name(this,i);    int pos=-1;    if (c != null)     pos=c.get(tname);    if (pos >= 0) {      pos|=(LABEL_MASK << 8);      out.writeU16(pos);      return;    } else {      if (c != null)       c.add(out.current(),tname);      int off=offset(i);      out.writeByteArray(name,off,name[off] + 1);    }  }  out.writeU8(0);}  }
class C{  public boolean equals(Object o){  if (o instanceof Action)   return isEquiv((Action)o); else   return false;}  }
class C{  @Override public void sync(){}  }
class C{  public int writeLongMinimalBinary(final long x,final long b) throws IOException {  if (b < 1)   throw new IllegalArgumentException("The bound " + b + " is not positive");  return writeLongMinimalBinary(x,b,Fast.mostSignificantBit(b));}  }
class C{  public boolean replace(int key,E oldValue,E newValue){  if (oldValue == null || newValue == null) {    return false;  }synchronized (this) {    Object[] arr=array;    if (arr.length <= key) {      return false;    }    Object prev=arr[key];    if (prev.equals(oldValue)) {      arr[key]=newValue;      array=arr;      size++;      return true;    }  }  return false;}  }
class C{  public void testIntValueNegative1(){  byte aBytes[]={12,56,100,-2,-76,-128,45,91,3};  int sign=-1;  int resInt=2144511229;  int aNumber=new BigInteger(sign,aBytes).intValue();  assertTrue(aNumber == resInt);}  }
class C{  private long remainingNanos(long now){  return timeoutAt - now;}  }
class C{  protected String invoke(String path,InputStream data,String digestData) throws TomcatManagerException, IOException {  getLogger().debug("Invoking Tomcat manager using path [" + path + "]",getClass().getName());  URL invokeURL=new URL(this.url + path);  HttpURLConnection connection=(HttpURLConnection)invokeURL.openConnection();  connection.setAllowUserInteraction(false);  connection.setDoInput(true);  connection.setUseCaches(false);  if (data == null) {    connection.setDoOutput(false);    connection.setRequestMethod("GET");  } else {    connection.setDoOutput(true);    connection.setRequestMethod("PUT");    connection.setRequestProperty("Content-Type","application/octet-stream");    connection.setRequestProperty("Expect","100-continue");    connection.setChunkedStreamingMode(0);  }  if (this.userAgent != null) {    connection.setRequestProperty("User-Agent",this.userAgent);  }  if (digestData != null) {    connection.setRequestProperty("Authorization",digestData);  } else   if (this.username != null) {    String authorization=toAuthorization(this.username,this.password);    connection.setRequestProperty("Authorization",authorization);  }  connection.connect();  String response;  try {    if (data != null) {      pipe(data,connection.getOutputStream());    }    response=toString(connection.getInputStream(),MANAGER_CHARSET);  } catch (  IOException e) {    if (connection.getResponseCode() == 401) {      String wwwAuthenticate=connection.getHeaderField("WWW-Authenticate");      if (digestData == null && wwwAuthenticate != null && wwwAuthenticate.startsWith("Digest ")) {        getLogger().debug("Response code is 401 and server requests Digest authentication",getClass().getName());        String realm=extractHeaderComponent(wwwAuthenticate,"realm");        String qop=extractHeaderComponent(wwwAuthenticate,"qop");        String nonce=extractHeaderComponent(wwwAuthenticate,"nonce");        String opaque=extractHeaderComponent(wwwAuthenticate,"opaque");        String algorithm=extractHeaderComponent(wwwAuthenticate,"algorithm");        if (realm == null || nonce == null) {          throw new TomcatManagerException("The username and password you provided are not correct (error 401), " + "the server requested a Digest authentication but " + "realm or nonce are not provided",e);        }        if (qop != null && !"auth".equals(qop)) {          throw new TomcatManagerException("The username and password you provided are not correct (error 401), " + "the server requested a Digest authentication but qop is set to " + qop,e);        }        if (algorithm != null && !"MD5".equals(algorithm)) {          throw new TomcatManagerException("The username and password you provided are not correct (error 401), " + "the server requested a Digest authentication but " + "algorithm is set to "+ algorithm,e);        }        String ha1=this.username + ":" + realm+ ":"+ this.password;        byte[] hash=md5.digest(ha1.getBytes("UTF-8"));        StringBuilder sb=new StringBuilder();        for (        byte hashByte : hash) {          sb.append(String.format("%02x",hashByte));        }        ha1=sb.toString();        String uri;        String uriPath=invokeURL.getPath();        String uriQuery=invokeURL.getQuery();        if (uriQuery != null) {          uri=uriPath + "?" + uriQuery;        } else {          uri=uriPath;        }        String ha2;        if (data == null) {          ha2="GET";        } else {          ha2="PUT";        }        ha2+=":" + uri;        hash=md5.digest(ha2.getBytes("UTF-8"));        sb=new StringBuilder();        for (        byte hashByte : hash) {          sb.append(String.format("%02x",hashByte));        }        ha2=sb.toString();        String nc=NONCE_COUNTER.count(nonce);        String cnonce=String.format("%08x",(long)(Math.random() * 4294967295.0));        cnonce=cnonce.substring(cnonce.length() - 8);        String ha3;        if (qop != null) {          ha3=ha1 + ":" + nonce+ ":"+ nc+ ":"+ cnonce+ ":"+ qop+ ":"+ ha2;        } else {          ha3=ha1 + ":" + nonce+ ":"+ ha2;        }        hash=md5.digest(ha3.getBytes("UTF-8"));        sb=new StringBuilder();        for (        byte hashByte : hash) {          sb.append(String.format("%02x",hashByte));        }        ha3=sb.toString();        wwwAuthenticate="Digest username=\"" + this.username + "\", "+ "realm=\""+ realm+ "\", "+ "nonce=\""+ nonce+ "\", "+ "uri=\""+ uri+ "\", "+ "algorithm=MD5, "+ "nc="+ nc+ ", "+ "cnonce=\""+ cnonce+ "\", "+ "response=\""+ ha3+ "\"";        if (qop != null) {          wwwAuthenticate+=", qop=\"" + qop + "\"";        }        if (opaque != null) {          wwwAuthenticate+=", opaque=\"" + opaque + "\"";        }        getLogger().debug("Digest authentication with ha=" + ha1 + ", ha2="+ ha2+ " and full header "+ wwwAuthenticate,getClass().getName());        return invoke(path,data,wwwAuthenticate);      } else {        throw new TomcatManagerException("The username and password you provided are not correct (error 401)",e);      }    } else     if (connection.getResponseCode() == 403) {      throw new TomcatManagerException("The username you provided is not allowed to " + "use the text-based Tomcat Manager (error 403)",e);    } else {      throw e;    }  }  if (!response.startsWith("OK -")) {    throw new TomcatManagerException("The Tomcat Manager responded \"" + response + "\" instead of the expected \"OK\" message");  }  return response;}  }
class C{  private void checkForNativeType(XSType type,String msg) throws ConversionException {  if (XsdUtils.xsdToNativeType(type.getName()) == null) {    if (!strict()) {      log(Level.WARNING,msg + " Name: " + type.getName());    } else {      throw new ConversionException(ERROR_SIMPLE_TYPE + msg + " Name: "+ type.getName());    }  }}  }
class C{  public static void isEmail(String member,String value,boolean flag) throws ValidationException {  if (!flag) {    if (value == null || value.trim().length() == 0) {      return;    }  }  if (!ADMValidator.isEmail(value)) {    ValidationException vf=new ValidationException(ReasonEnum.EMAIL,member,new Object[]{value});    logValidationFailure(vf);    throw vf;  }  isName(member,value,flag);}  }
class C{  public static <T>Object[] merge(Object[] a,Object[] b,Class<T> klass){  if (a == null)   return b;  if (b == null)   return a;  Object[] arrrrray=(Object[])Array.newInstance(klass,(a.length + b.length));  System.arraycopy(a,0,arrrrray,0,a.length);  System.arraycopy(b,0,arrrrray,a.length,b.length);  return arrrrray;}  }
class C{  private String addRemoveProtectionOnVolumeStep(Workflow workflow,String waitFor,List<VolumeDescriptor> volumeDescriptors,String taskId,BlockDeviceController blockDeviceController){  List<URI> volumeURIs=new ArrayList<URI>();  URI newVpoolURI=null;  List<VolumeDescriptor> rpSourceDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_SOURCE,VolumeDescriptor.Type.RP_VPLEX_VIRT_SOURCE},new VolumeDescriptor.Type[]{});  for (  VolumeDescriptor descriptor : rpSourceDescriptors) {    if (descriptor.getParameters().get(VolumeDescriptor.PARAM_DO_NOT_DELETE_VOLUME) != null) {      newVpoolURI=(URI)descriptor.getParameters().get(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID);      _log.info(String.format("Adding step to remove protection from Volume (%s) and move it to vpool (%s)",descriptor.getVolumeURI(),newVpoolURI));      volumeURIs.add(descriptor.getVolumeURI());    }  }  if (volumeURIs.isEmpty()) {    return waitFor;  }  List<VolumeDescriptor> blockDataDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.BLOCK_DATA},new VolumeDescriptor.Type[]{});  List<VolumeDescriptor> doNotDeleteDescriptors=VolumeDescriptor.getDoNotDeleteDescriptors(blockDataDescriptors);  List<VolumeDescriptor> rpDescriptors=new ArrayList<VolumeDescriptor>();  List<VolumeDescriptor> rpVPlexDescriptors=new ArrayList<VolumeDescriptor>();  for (  VolumeDescriptor descr : doNotDeleteDescriptors) {    Volume volume=_dbClient.queryObject(Volume.class,descr.getVolumeURI());    if (RPHelper.isAssociatedToRpVplexType(volume,_dbClient,PersonalityTypes.SOURCE)) {      rpVPlexDescriptors.add(descr);    } else {      rpDescriptors.add(descr);    }  }  if (doNotDeleteDescriptors != null && !doNotDeleteDescriptors.isEmpty()) {    waitFor=blockDeviceController.addStepsForUntagVolumes(workflow,waitFor,rpDescriptors,taskId);    waitFor=blockDeviceController.addStepsForUpdateConsistencyGroup(workflow,waitFor,null,rpVPlexDescriptors);  }  Volume volume=_dbClient.queryObject(Volume.class,volumeURIs.get(0));  ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());  String stepId=workflow.createStepId();  Workflow.Method removeProtectionExecuteMethod=new Workflow.Method(METHOD_REMOVE_PROTECTION_STEP,volumeURIs,newVpoolURI);  workflow.createStep(STEP_REMOVE_PROTECTION,"Remove RP protection on volume(s)",waitFor,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),removeProtectionExecuteMethod,null,stepId);  return STEP_REMOVE_PROTECTION;}  }
class C{  protected boolean filterHeader(int index){  return (this.headerName == null) || this.headerName.equalsIgnoreCase(this.allHeaders[index].getName());}  }
class C{  private void reinitialize(Class<PresenterType> opsType,RequiredViewOps view) throws InstantiationException, IllegalAccessException {  mPresenterInstance=mStateMaintainer.get(opsType.getSimpleName());  if (mPresenterInstance == null) {    Log.w(TAG,"reinitialize: recreating presenter");    initialize(opsType,view);  } else {    mPresenterInstance.onConfigurationChanged(view);  }}  }
class C{  public static int addItemToInventory(IInventory inventory,ItemStack item,int startSlot,int slotCount){  int itemsAdded=0;  itemsAdded=addToExistingSlot(inventory,item,startSlot,slotCount);  if (itemsAdded < item.stackSize) {    item.stackSize-=itemsAdded;    itemsAdded+=addToEmptySlot(inventory,item,startSlot,slotCount);  }  return itemsAdded;}  }
class C{  public UserIdNotFoundExceptionBean(ApplicationExceptionBean sup,ReasonEnum reason){  super(sup);  setReason(reason);}  }
class C{  public void equals() throws IOException {  writeCode(EQUALS);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public static NotificationDto transformToDto(Notification notification){  if (notification == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  NotificationDto result=createDtoObject(NotificationDto.class,notification);  result.setAlertId(notification.getAlert().getId());  for (  Trigger trigger : notification.getTriggers()) {    result.addTriggersIds(trigger);  }  return result;}  }
class C{  @DSComment("OpenGL Utils") @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:09.460 -0500",hash_original_method="54245E5C92D815A48A8550C075E1277A",hash_generated_method="05D189ABED035A5E95EAE8A96DBA368D") public static void texImage2D(int target,int level,Bitmap bitmap,int border){  if (bitmap == null) {    throw new NullPointerException("texImage2D can't be used with a null Bitmap");  }  if (bitmap.isRecycled()) {    throw new IllegalArgumentException("bitmap is recycled");  }  if (native_texImage2D(target,level,-1,bitmap,-1,border) != 0) {    throw new IllegalArgumentException("invalid Bitmap format");  }}  }
class C{  public JRadioButton(Action a){  this();  setAction(a);}  }
class C{  public void testSeekNotArrivedEvent() throws Exception {  File logDir=prepareLogDir("testSeekNotArrivedEvent");  DiskLog log=openLog(logDir,false);  log.setTimeoutMillis(1000);  writeEventsToLog(log,0,10);  LogConnection conn=log.connect(true);  assertTrue("Seeking future event that will exist",conn.seek(19));  try {    THLEvent e=conn.next();    throw new Exception("Able to seek and read non-existent position in empty log: " + e);  } catch (  LogTimeoutException e) {    logger.info("Returned expected timeout exception");  }  writeEventsToLog(log,10,10);  THLEvent e=conn.next();  assertNotNull("Found an event",e);  assertEquals("Has expected seqno",19,e.getSeqno());  conn.release();  log.release();}  }
class C{  public IgniteDeploymentGarAntTask(){  archiveType="gar";  emptyBehavior="create";}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {}  }
class C{  public Clustering<Model> run(Relation<O> relation){  final int size=relation.size();  if (size < minpts) {    Clustering<Model> result=new Clustering<>("DBSCAN Clustering","dbscan-clustering");    result.addToplevelCluster(new Cluster<Model>(relation.getDBIDs(),true,ClusterModel.CLUSTER));    return result;  }  RangeQuery<O> rangeQuery=QueryUtil.getRangeQuery(relation,getDistanceFunction());  resultList=new ArrayList<>();  noise=DBIDUtil.newHashSet();  runDBSCAN(relation,rangeQuery);  double averagen=ncounter / (double)relation.size();  LOG.statistics(new DoubleStatistic(DBSCAN.class.getName() + ".average-neighbors",averagen));  if (averagen < 1 + 0.1 * (minpts - 1)) {    LOG.warning("There are very few neighbors found. Epsilon may be too small.");  }  if (averagen > 100 * minpts) {    LOG.warning("There are very many neighbors found. Epsilon may be too large.");  }  Clustering<Model> result=new Clustering<>("DBSCAN Clustering","dbscan-clustering");  for (  ModifiableDBIDs res : resultList) {    result.addToplevelCluster(new Cluster<Model>(res,ClusterModel.CLUSTER));  }  result.addToplevelCluster(new Cluster<Model>(noise,true,ClusterModel.CLUSTER));  return result;}  }
class C{  @NoInline private static void throwNewIllegalAccessException(RVMMember member,RVMClass accessingClass) throws IllegalAccessException {  throw new IllegalAccessException("Access to " + member + " is denied to "+ accessingClass);}  }
class C{  @Override public void onServiceDisconnected(ComponentName name){  this.binder=null;}  }
class C{  public boolean save(File file,boolean async){  this.file=file;  return save(async);}  }
class C{  public static synchronized boolean isEventObserved(Class<? extends MvcEvent> eventType){  return observedEvents == null ? false : observedEvents.contains(eventType);}  }
class C{  public void clear(){synchronized (this.lock) {    for (    CacheEntry entry : this.entries.values()) {      this.removeEntry(entry);    }  }}  }
class C{  private void auditCompletedDrOperation(){  if (!drUtil.isActiveSite()) {    return;  }  InterProcessLock lock=coordinator.getCoordinatorClient().getSiteLocalLock(AUDIT_DR_OPERATION_LOCK);  boolean hasLock=false;  try {    hasLock=lock.acquire(AUDIT_LOCK_WAIT_TIME_SEC,TimeUnit.SECONDS);    if (!hasLock) {      return;    }    log.info("Local site is active, local node acquired lock, starting audit complete DR operations ...");    List<Configuration> configs=coordinator.getCoordinatorClient().queryAllConfiguration(DrOperationStatus.CONFIG_KIND);    if (configs == null || configs.isEmpty()) {      return;    }    for (    Configuration config : configs) {      DrOperationStatus operation=new DrOperationStatus(config);      String siteId=operation.getSiteUuid();      InterState interState=operation.getInterState();      Site site=null;      try {        site=drUtil.getSiteFromLocalVdc(siteId);      } catch (      RetryableCoordinatorException e) {        if (interState.equals(InterState.REMOVING_STANDBY) && e.getServiceCode() == ServiceCode.COORDINATOR_SITE_NOT_FOUND) {          this.auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,getOperationType(interState),System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_END,siteId);          coordinator.getCoordinatorClient().removeServiceConfiguration(config);          log.info("DR operation status has been cleared: {}",operation);          continue;        }        throw e;      }      SiteState currentState=site.getState();      if (currentState.equals(SiteState.STANDBY_ERROR)) {        this.auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,getOperationType(interState),System.currentTimeMillis(),AuditLogManager.AUDITLOG_FAILURE,AuditLogManager.AUDITOP_END,site.toBriefString());      } else       if (!currentState.isDROperationOngoing()) {        this.auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,getOperationType(interState),System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_END,site.toBriefString());      } else {        continue;      }      log.info(String.format("Site %s state has transformed from %s to %s",siteId,interState,currentState));      coordinator.getCoordinatorClient().removeServiceConfiguration(config);      log.info("DR operation status has been cleared: {}",operation);    }  } catch (  Exception e) {    log.error("Auditing DR operation failed with exception",e);  } finally {    try {      if (hasLock) {        lock.release();      }    } catch (    Exception e) {      log.error("Failed to release DR operation audit lock",e);    }  }}  }
class C{  private boolean isUnderInternalThreshold(File apkFile,boolean isForwardLocked,long threshold) throws IOException {  long size=apkFile.length();  if (size == 0 && !apkFile.exists()) {    throw new FileNotFoundException();  }  if (isForwardLocked) {    size+=PackageHelper.extractPublicFiles(apkFile.getAbsolutePath(),null);  }  final StatFs internalStats=new StatFs(Environment.getDataDirectory().getPath());  final long availInternalSize=(long)internalStats.getAvailableBlocks() * (long)internalStats.getBlockSize();  return (availInternalSize - size) > threshold;}  }
class C{  public void paintSliderThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public void readByteArray(byte[] b,int off,int len) throws WireParseException {  require(len);  System.arraycopy(array,pos,b,off,len);  pos+=len;}  }
class C{  public WelcomePage doLogin(String userName,String password){  onView(withId(R.id.username)).perform(typeText(userName));  onView(withId(R.id.password)).perform(typeText(password),closeSoftKeyboard());  onView(withId(R.id.login_button)).perform(click());  return new WelcomePage();}  }
class C{  @Override public int skipBytes(int n) throws IOException {  return (int)Math.min(Integer.MAX_VALUE,sageFileSource.skip(n));}  }
class C{  private Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.put1(FLOAT).put4(Float.floatToIntBits(value));    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public final WeightedRandomFishable withRandomEnchantments(){  hasRandomEnchantments=true;  return this;}  }
class C{  protected static void normalize(double wheelSpeeds[]){  double maxMagnitude=Math.abs(wheelSpeeds[0]);  for (int i=1; i < NUMBER_OF_MOTORS; i++) {    double temp=Math.abs(wheelSpeeds[i]);    if (maxMagnitude < temp)     maxMagnitude=temp;  }  if (maxMagnitude > 1.0) {    for (int i=0; i < NUMBER_OF_MOTORS; i++) {      wheelSpeeds[i]=wheelSpeeds[i] / maxMagnitude;    }  }}  }
