class C{  public void onTestingStarted(@NotNull SMTestProxy.SMRootTestProxy testsRoot){  myAnimator.setCurrentTestCase(myTestsRootNode);  myTreeBuilder.updateFromRoot();  myStatusLine.setStatusColor(ColorProgressBar.GREEN);  selectAndNotify(myTestsRootNode);  myStartTime=System.currentTimeMillis();  boolean printTestingStartedTime=true;  if (myConsoleProperties instanceof SMTRunnerConsoleProperties) {    printTestingStartedTime=((SMTRunnerConsoleProperties)myConsoleProperties).isPrintTestingStartedTime();  }  if (printTestingStartedTime) {    myTestsRootNode.addSystemOutput("Testing started at " + DateFormatUtil.formatTime(myStartTime) + " ...\n");  }  updateStatusLabel(false);  fireOnTestingStarted();}  }
class C{  private void linkClicked(String link){  String[] parts=link.split(":",2);  if (parts.length == 2 && listener != null) {    listener.linkClicked(parts[0],parts[1]);  }}  }
class C{  public static char[] encode(byte[] in,int iOff,int iLen){  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++] & 0xff;    int i1=ip < iEnd ? in[ip++] & 0xff : 0;    int i2=ip < iEnd ? in[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  public static List<LatLon> computeShiftedLocations(Position oldLocation,Position newLocation,Iterable<? extends LatLon> locations){  if (oldLocation == null || newLocation == null) {    throw new IllegalArgumentException("Position Is Null");  }  if (locations == null) {    throw new IllegalArgumentException("Positions List Is Null");  }  ArrayList<LatLon> newPositions=new ArrayList<LatLon>();  for (  LatLon location : locations) {    Angle distance=LatLon.greatCircleDistance(oldLocation,location);    Angle azimuth=LatLon.greatCircleAzimuth(oldLocation,location);    newPositions.add(Position.greatCircleEndPosition(newLocation,azimuth,distance));  }  return newPositions;}  }
class C{  private GridConcurrentSkipListSet(ConcurrentNavigableMap<E,Object> m){  this.m=m;}  }
class C{  public boolean isOn(){  return this.on;}  }
class C{  protected void onSelectionChanged(int selStart,int selEnd){  if (mInputView == null)   return;  if (mInputView instanceof InternalEditText)   ((InternalEditText)mInputView).superOnSelectionChanged(selStart,selEnd); else   if (mInputView instanceof InternalAutoCompleteTextView)   ((InternalAutoCompleteTextView)mInputView).superOnSelectionChanged(selStart,selEnd); else   ((InternalMultiAutoCompleteTextView)mInputView).superOnSelectionChanged(selStart,selEnd);  if (mOnSelectionChangedListener != null)   mOnSelectionChangedListener.onSelectionChanged(this,selStart,selEnd);}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2){  return contains(value,start,length,new String[]{criteria1,criteria2});}  }
class C{  private void addCMTDataSourceTag(){  startDataSourceTag();  addCMTDataSourceAndLinkToXa();  addIdAndJndiLocationAttributes();  endDataSourceTag();  closeDataSourceTag();}  }
class C{  protected void registerBeans(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isGranted(final T tx){  if (tx == null) {    throw new IllegalArgumentException();  }  return queue.peek() == tx;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public void testEmptyIndex() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher is=newSearcher(ir);  for (  Similarity sim : sims) {    is.setSimilarity(sim);    assertEquals(0,is.search(new TermQuery(new Term("foo","bar")),10).totalHits);  }  ir.close();  dir.close();}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    Assert.assertExp(false,"DMSLatLonPoint: internal error!");    return null;  }}  }
class C{  private void clearBlock(byte[] block){  for (int i=0; i != block.length; i++) {    block[i]=0;  }}  }
class C{  public static int make_tables(double start_depth,double image_size,double start_of_data,double delta_r,int N_samples,double theta_start,double delta_theta,int N_lines,double scaling,int Nz,int Nx,double weight_coef[],int index_samp_line[],int image_index[]){  int N_values;  int i, j;  double z, z2, x;  double dz, dx;  double radius;  double theta;  double samp;  double line;  int index_samp;  int index_line;  double samp_val;  double line_val;  boolean make_pixel;  int ij_index;  int ij_index_coef;  dz=image_size / Nz;  dx=image_size / Nx;  z=start_depth;  ij_index=0;  ij_index_coef=0;  for (i=0; i < Nz; i++) {    x=-image_size / 2;    z2=z * z;    for (j=0; j < Nx; j++) {      radius=Math.sqrt(z2 + x * x);      theta=Math.atan2(x,z);      samp=(radius - start_of_data) / delta_r;      line=(theta - theta_start) / delta_theta;      index_samp=(int)Math.floor(samp);      index_line=(int)Math.floor(line);      make_pixel=(index_samp >= 0) && (index_samp + 1 < N_samples) && (index_line >= 0)&& (index_line + 1 < N_lines);      if (make_pixel) {        samp_val=samp - index_samp;        line_val=line - index_line;        weight_coef[ij_index_coef]=(1 - samp_val) * (1 - line_val) * scaling;        weight_coef[ij_index_coef + 1]=samp_val * (1 - line_val) * scaling;        weight_coef[ij_index_coef + 2]=(1 - samp_val) * line_val * scaling;        weight_coef[ij_index_coef + 3]=samp_val * line_val * scaling;        index_samp_line[ij_index]=index_samp + index_line * N_samples;        image_index[ij_index]=(Nx - j - 1) * Nz + i;        ij_index++;        ij_index_coef=ij_index_coef + 4;      }      x=x + dx;    }    z=z + dz;  }  N_values=ij_index;  ScanConversion.numPixels=N_values;  ScanConversion.indexData=index_samp_line;  ScanConversion.indexImg=image_index;  ScanConversion.weight=weight_coef;  return N_values;}  }
class C{  public void clear(){  listeners.clear();  parseResults.clear();}  }
class C{  public static Link createArtificialStopFacilityLink(TransitStopFacility stopFacility,Network network,String prefix,double freespeed,Set<String> transportModes){  NetworkFactory networkFactory=network.getFactory();  Coord coord=stopFacility.getCoord();  Node dummyNode=networkFactory.createNode(Id.createNodeId(prefix + stopFacility.getId() + "_node"),coord);  Link dummyLink=networkFactory.createLink(Id.createLinkId(prefix + stopFacility.getId() + "_link"),dummyNode,dummyNode);  dummyLink.setAllowedModes(transportModes);  dummyLink.setLength(5);  dummyLink.setFreespeed(freespeed);  dummyLink.setCapacity(9999);  if (!network.getNodes().containsKey(dummyNode.getId())) {    network.addNode(dummyNode);    network.addLink(dummyLink);  }  return dummyLink;}  }
class C{  protected boolean isArrayContentDetail(){  return arrayContentDetail;}  }
class C{  public static ErrorDetails validatePropertyTransferRequest(PropertyTransferDetails propertyTransferDetails){  ErrorDetails errorDetails=null;  String assessmentNumber=propertyTransferDetails.getAssessmentNo();  if (StringUtils.isBlank(assessmentNumber)) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(ASSESSMENT_NO_REQ_CODE);    errorDetails.setErrorMessage(ASSESSMENT_NO_REQ_MSG);    return errorDetails;  }  String mutationReasonCode=propertyTransferDetails.getMutationReasonCode();  if (StringUtils.isBlank(mutationReasonCode)) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(MUTATION_REASON_CODE_REQ_CODE);    errorDetails.setErrorMessage(MUTATION_REASON_CODE_REQ_MSG);    return errorDetails;  }  if (StringUtils.isNotBlank(mutationReasonCode) && !mutationReasonCode.equalsIgnoreCase(PropertyTaxConstants.MUTATION_REASON_CODE_GIFT) && !mutationReasonCode.equalsIgnoreCase(PropertyTaxConstants.MUTATION_REASON_CODE_WILL)&& !mutationReasonCode.equalsIgnoreCase(PropertyTaxConstants.MUTATION_REASON_CODE_SALE)&& !mutationReasonCode.equalsIgnoreCase(PropertyTaxConstants.MUTATION_REASON_CODE_RELINQUISH)&& !mutationReasonCode.equalsIgnoreCase(PropertyTaxConstants.MUTATION_REASON_CODE_PARTITION)) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(MUTATION_REASON_INVALID_CODE_REQ_CODE);    errorDetails.setErrorMessage(MUTATION_REASON_INVALID_CODE_REQ_MSG);    return errorDetails;  }  if (mutationReasonCode.equalsIgnoreCase(PropertyTaxConstants.MUTATION_REASON_CODE_SALE)) {    if (StringUtils.isBlank(propertyTransferDetails.getSaleDetails())) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(SALE_DETAILS_REQ_CODE);      errorDetails.setErrorMessage(SALE_DETAILS_REQ_MSG);      return errorDetails;    }  }  if (!mutationReasonCode.equalsIgnoreCase(PropertyTaxConstants.MUTATION_REASON_CODE_SALE)) {    if (StringUtils.isNotBlank(propertyTransferDetails.getSaleDetails())) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(OTHER_MUTATION_CODES_SALE_DETAILS_VALIDATION_CODE);      errorDetails.setErrorMessage(OTHER_MUTATION_CODES_SALE_DETAILS_VALIDATION_MSG);      return errorDetails;    }  }  String deedNo=propertyTransferDetails.getDeedNo();  if (StringUtils.isBlank(deedNo)) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(DEED_NO_REQ_CODE);    errorDetails.setErrorMessage(DEED_NO_REQ_MSG);    return errorDetails;  }  String deedDate=propertyTransferDetails.getDeedDate();  if (StringUtils.isBlank(deedDate)) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(DEED_DATE_REQ_CODE);    errorDetails.setErrorMessage(DEED_DATE_REQ_MSG);    return errorDetails;  }  List<OwnerInformation> ownerDetailsList=propertyTransferDetails.getOwnerDetails();  if (ownerDetailsList.isEmpty()) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(OWNER_DETAILS_REQ_CODE);    errorDetails.setErrorMessage(OWNER_DETAILS_REQ_MSG);    return errorDetails;  } else   for (  final OwnerInformation ownerInfo : ownerDetailsList) {    if (ownerInfo.getMobileNumber() == null) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(MOBILE_NO_REQ_CODE);      errorDetails.setErrorMessage(MOBILE_NO_REQ_MSG);      return errorDetails;    }    if (ownerInfo.getName() == null) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(OWNER_NAME_REQ_CODE);      errorDetails.setErrorMessage(OWNER_NAME_REQ_MSG);      return errorDetails;    }    if (ownerInfo.getGender() == null) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(GENDER_REQ_CODE);      errorDetails.setErrorMessage(GENDER_REQ_MSG);      return errorDetails;    }    if (ownerInfo.getGuardianRelation() == null) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(GUARDIAN_RELATION_REQ_CODE);      errorDetails.setErrorMessage(GUARDIAN_RELATION_REQ_MSG);      return errorDetails;    }    if (ownerInfo.getGuardian() == null) {      errorDetails=new ErrorDetails();      errorDetails.setErrorCode(GUARDIAN_REQ_CODE);      errorDetails.setErrorMessage(GUARDIAN_REQ_MSG);      return errorDetails;    }  }  return errorDetails;}  }
class C{  public static String doubleToString(double value,int afterDecimalPoint){  StringBuffer stringBuffer;  double temp;  int i, dotPosition;  long precisionValue;  temp=value * Math.pow(10.0,afterDecimalPoint);  if (Math.abs(temp) < Long.MAX_VALUE) {    precisionValue=(temp > 0) ? (long)(temp + 0.5) : -(long)(Math.abs(temp) + 0.5);    if (precisionValue == 0) {      stringBuffer=new StringBuffer(String.valueOf(0));    } else {      stringBuffer=new StringBuffer(String.valueOf(precisionValue));    }    if (afterDecimalPoint == 0) {      return stringBuffer.toString();    }    dotPosition=stringBuffer.length() - afterDecimalPoint;    while (((precisionValue < 0) && (dotPosition < 1)) || (dotPosition < 0)) {      if (precisionValue < 0) {        stringBuffer.insert(1,0);      } else {        stringBuffer.insert(0,0);      }      dotPosition++;    }    stringBuffer.insert(dotPosition,'.');    if ((precisionValue < 0) && (stringBuffer.charAt(1) == '.')) {      stringBuffer.insert(1,0);    } else     if (stringBuffer.charAt(0) == '.') {      stringBuffer.insert(0,0);    }    int currentPos=stringBuffer.length() - 1;    while ((currentPos > dotPosition) && (stringBuffer.charAt(currentPos) == '0')) {      stringBuffer.setCharAt(currentPos--,' ');    }    if (stringBuffer.charAt(currentPos) == '.') {      stringBuffer.setCharAt(currentPos,' ');    }    return stringBuffer.toString().trim();  }  return new String("" + value);}  }
class C{  public synchronized void reinit(){  shutdown();  init();}  }
class C{  public StateVector createStateVector(){  StateVectorImpl stateVector=new StateVectorImpl();  return stateVector;}  }
class C{  public void inset(int dx,int dy){  left+=dx;  top+=dy;  right-=dx;  bottom-=dy;}  }
class C{  private static boolean canUseReflectiveSerializer(Class cls){  return BinaryUtils.isBinarylizable(cls) || !BinaryUtils.isCustomJavaSerialization(cls);}  }
class C{  public GroupChangeEvent(String leader,List<String> members,String lootmode){  super(Events.GROUP_CHANGE);  put("leader",leader);  put("members",members);  put("lootmode",lootmode);}  }
class C{  @Override public int hashCode(){  return this.date.hashCode();}  }
class C{  public void testBug25514() throws Exception {  for (int i=0; i < 10; i++) {    getConnectionWithProps((Properties)null).close();  }  ThreadGroup root=Thread.currentThread().getThreadGroup().getParent();  while (root.getParent() != null) {    root=root.getParent();  }  int numThreadsNamedTimer=findNamedThreadCount(root,"Timer");  if (numThreadsNamedTimer == 0) {    numThreadsNamedTimer=findNamedThreadCount(root,"MySQL Statement Cancellation Timer");  }  assertTrue("More than one timer for cancel was created",numThreadsNamedTimer <= 1);}  }
class C{  public GroovyPrintStream(OutputStream out,boolean autoFlush){  super(out,autoFlush);}  }
class C{  public final AC sizeGroup(String s){  return sizeGroup(s,curIx);}  }
class C{  public Node cloneNode(boolean deep){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.POSTCONDITION___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.POSTCONDITION___CONSTRAINT_1:  return constraint_1 != null && !constraint_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public InputContactMessageContent.InputContactMessageContentBuilder firstName(String firstName){  this.first_name=firstName;  return this;}  }
class C{  private static boolean areDatesEquivalent(Date expected,Date actual){  if (expected == null || actual == null) {    return true;  }  return !expected.before(actual);}  }
class C{  protected void sequence_ParameterizedTypeRefStructural_TStructMemberList(ISerializationContext context,ParameterizedTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public EncodedImage parseAndScale(serverObjects post,boolean auth,DigestURL url,String ext,ImageInputStream imageInStream) throws IOException {  EncodedImage encodedImage;  Iterator<ImageReader> readers=ImageIO.getImageReaders(imageInStream);  if (!readers.hasNext()) {    try {      imageInStream.close();    } catch (    IOException ignoredException) {    }    String urlString=url.toNormalform(false);    String errorMessage="Image format (" + MultiProtocolURL.getFileExtension(urlString) + ") is not supported.";    ConcurrentLog.fine("ImageViewer",errorMessage + "Image URL : " + urlString);    throw new IOException(errorMessage);  }  ImageReader reader=readers.next();  reader.setInput(imageInStream,true,true);  int maxwidth=post.getInt("maxwidth",0);  int maxheight=post.getInt("maxheight",0);  final boolean quadratic=post.containsKey("quadratic");  boolean isStatic=post.getBoolean("isStatic");  BufferedImage image=null;  boolean returnRaw=true;  if (!auth || maxwidth != 0 || maxheight != 0) {    final int originWidth=reader.getWidth(0);    final int originHeigth=reader.getHeight(0);    Dimension maxDimensions=calculateMaxDimensions(auth,originWidth,originHeigth,maxwidth,maxheight);    int w=originWidth;    int h=originHeigth;    if (quadratic && originWidth != originHeigth) {      Rectangle square=getMaxSquare(originHeigth,originWidth);      h=square.height;      w=square.width;    }    Dimension finalDimensions=calculateDimensions(w,h,maxDimensions);    if (originWidth != finalDimensions.width || originHeigth != finalDimensions.height) {      returnRaw=false;      image=readImage(reader);      if (quadratic && originWidth != originHeigth) {        image=makeSquare(image);      }      image=scale(finalDimensions.width,finalDimensions.height,image);    }  }  if (returnRaw) {    if (!reader.getFormatName().equalsIgnoreCase(ext) || imageInStream.getFlushedPosition() != 0) {      returnRaw=false;      image=readImage(reader);    }  }  if (returnRaw) {    byte[] imageData=readRawImage(imageInStream);    encodedImage=new EncodedImage(imageData,ext,isStatic);  } else {    encodedImage=new EncodedImage(image,ext,isStatic);    if (encodedImage.getImage().length() == 0) {      String errorMessage="Image could not be encoded to format : " + ext;      ConcurrentLog.fine("ImageViewer",errorMessage + ". Image URL : " + url.toNormalform(false));      throw new IOException(errorMessage);    }  }  return encodedImage;}  }
class C{  public void init(MCMCOptions options,Likelihood likelihood,Prior prior,OperatorSchedule schedule,Logger[] loggers,MarkovChainDelegate[] delegates){  MCMCCriterion criterion=new MCMCCriterion();  criterion.setTemperature(options.getTemperature());  mc=new MarkovChain(prior,likelihood,schedule,criterion,options.getFullEvaluationCount(),options.minOperatorCountForFullEvaluation(),options.getEvaluationTestThreshold(),options.useCoercion());  this.options=options;  this.loggers=loggers;  this.schedule=schedule;  currentState=0;  for (  MarkovChainDelegate delegate : delegates) {    delegate.setup(options,schedule,mc);  }  this.delegates=delegates;  dumpStateFile=System.getProperty(LOAD_DUMP_FILE);  if (System.getProperty(DUMP_STATE) != null) {    long debugWriteState=Long.parseLong(System.getProperty(DUMP_STATE));    mc.addMarkovChainListener(new DebugChainListener(this,debugWriteState,false));  }  if (System.getProperty(DUMP_EVERY) != null) {    long debugWriteEvery=Long.parseLong(System.getProperty(DUMP_EVERY));    mc.addMarkovChainListener(new DebugChainListener(this,debugWriteEvery,true));  }}  }
class C{  protected void simulateError() throws IOException {  throw new RuntimeException("An error simulated by " + getClass().getSimpleName());}  }
class C{  public static String appendParam(String url,String param){  String[] pa=param.split("&");  for (  String p : pa) {    if (p.trim().length() == 0)     continue;    String[] kv=p.split("=");    if (kv.length == 2) {      url=url + (url.indexOf('?') > 0 ? "&" : "?") + kv[0]+ "="+ kv[1];    } else {      warn("Skipping param " + p + " which is not on form key=value");    }  }  return url;}  }
class C{  static ResponseBody buffer(ResponseBody body) throws IOException {  Buffer buffer=new Buffer();  body.source().readAll(buffer);  return ResponseBody.create(body.contentType(),body.contentLength(),buffer);}  }
class C{  public String replace(final Object source){  if (source == null) {    return null;  }  final StrBuilder buf=new StrBuilder().append(source);  substitute(buf,0,buf.length());  return buf.toString();}  }
class C{  public Observable<String> handleError(Observable<String> data){  return data.onErrorResumeNext(Observable.just("default-value"));}  }
class C{  private boolean hasMatchingSetter(Method getter){  String propertyName=getPropertyName(getter);  for (  Method possibleSetter : toEdit.getClass().getMethods()) {    if (possibleSetter.getName().equalsIgnoreCase("set" + propertyName)) {      if (possibleSetter.getParameterTypes()[0].getName() == getter.getReturnType().getName() && (possibleSetter.getParameterTypes().length == 1)) {        editableMethods.add(possibleSetter);        return true;      }    }  }  return false;}  }
class C{  protected void addEntry(HashEntry<K,V> entry,int hashIndex){  data[hashIndex]=entry;}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:00.583 -0500",hash_original_method="C6A3384D5129DFA3EA95328C5EF0C849",hash_generated_method="705A8F768F24C9110C345F97C704AEA9") private void loadEriFileFromXml(){  XmlPullParser parser=null;  FileInputStream stream=null;  Resources r=mContext.getResources();  try {    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: check for alternate file");    stream=new FileInputStream(r.getString(com.android.internal.R.string.alternate_eri_file));    parser=Xml.newPullParser();    parser.setInput(stream,null);    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: opened alternate file");  } catch (  FileNotFoundException e) {    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: no alternate file");    parser=null;  }catch (  XmlPullParserException e) {    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: no parser for alternate file");    parser=null;  }  if (parser == null) {    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: open normal file");    parser=r.getXml(com.android.internal.R.xml.eri);  }  try {    XmlUtils.beginDocument(parser,"EriFile");    mEriFile.mVersionNumber=Integer.parseInt(parser.getAttributeValue(null,"VersionNumber"));    mEriFile.mNumberOfEriEntries=Integer.parseInt(parser.getAttributeValue(null,"NumberOfEriEntries"));    mEriFile.mEriFileType=Integer.parseInt(parser.getAttributeValue(null,"EriFileType"));    int parsedEriEntries=0;    while (true) {      XmlUtils.nextElement(parser);      String name=parser.getName();      if (name == null) {        if (parsedEriEntries != mEriFile.mNumberOfEriEntries)         Log.e(LOG_TAG,"Error Parsing ERI file: " + mEriFile.mNumberOfEriEntries + " defined, "+ parsedEriEntries+ " parsed!");        break;      } else       if (name.equals("CallPromptId")) {        int id=Integer.parseInt(parser.getAttributeValue(null,"Id"));        String text=parser.getAttributeValue(null,"CallPromptText");        if (id >= 0 && id <= 2) {          mEriFile.mCallPromptId[id]=text;        } else {          Log.e(LOG_TAG,"Error Parsing ERI file: found" + id + " CallPromptId");        }      } else       if (name.equals("EriInfo")) {        int roamingIndicator=Integer.parseInt(parser.getAttributeValue(null,"RoamingIndicator"));        int iconIndex=Integer.parseInt(parser.getAttributeValue(null,"IconIndex"));        int iconMode=Integer.parseInt(parser.getAttributeValue(null,"IconMode"));        String eriText=parser.getAttributeValue(null,"EriText");        int callPromptId=Integer.parseInt(parser.getAttributeValue(null,"CallPromptId"));        int alertId=Integer.parseInt(parser.getAttributeValue(null,"AlertId"));        parsedEriEntries++;        mEriFile.mRoamIndTable.put(roamingIndicator,new EriInfo(roamingIndicator,iconIndex,iconMode,eriText,callPromptId,alertId));      }    }    if (DBG)     Log.d(LOG_TAG,"loadEriFileFromXml: eri parsing successful, file loaded");    isEriFileLoaded=true;  } catch (  Exception e) {    Log.e(LOG_TAG,"Got exception while loading ERI file.",e);  } finally {    if (parser instanceof XmlResourceParser) {      ((XmlResourceParser)parser).close();    }    try {      if (stream != null) {        stream.close();      }    } catch (    IOException e) {    }  }}  }
class C{  TypeSimplifier(Types typeUtils,String packageName,Set<TypeMirror> types,TypeMirror base){  this.typeUtils=typeUtils;  Set<TypeMirror> typesPlusBase=new TypeMirrorSet(types);  if (base != null) {    typesPlusBase.add(base);  }  Set<TypeMirror> referenced=referencedClassTypes(typeUtils,typesPlusBase);  Set<TypeMirror> defined=nonPrivateDeclaredTypes(typeUtils,base);  this.imports=findImports(typeUtils,packageName,referenced,defined);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.err.println("usage: generator <basedir>");    System.exit(-1);  }  File baseDir=new File(args[0]);  System.out.println("Using baseDir: " + baseDir.getAbsolutePath());  new ProjectGenerator(baseDir).generate();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TMEMBER__ANNOTATIONS:    return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  protected void closeDatabase(final DefaultIndexImpl indexImpl) throws NoSuchFieldException, IllegalAccessException, DatabaseException {  final Field firstDatabaseField=indexImpl.getClass().getDeclaredField(DATABASE_FIELD_NAME);  firstDatabaseField.setAccessible(true);  final Database firstDatabase=(Database)firstDatabaseField.get(indexImpl);  if (firstDatabase != null) {    firstDatabase.close();  }}  }
class C{  public boolean isPolygon(){  return false;}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case LOOK_CLOSELY:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  public static Document createXMLDistRegWithRemarkDistribution(List list,Integer bookID,int fdrid,Locale locale,String nameBook,String numReg){  shortFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_SHORTFORMAT));  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_SICRESLIST_TEXT);  addContext(list.size(),locale,root);  addHead(locale,root,nameBook,numReg);  addHeadMinutaWithRemarkDistribution(locale,root);  addBodyMinuta(locale,root);  DtrFdrResults result=null;  int i=0;  for (Iterator it=list.iterator(); it.hasNext(); ) {    result=(DtrFdrResults)it.next();    addMinutaWithRemarkDistribution(i++,bookID,fdrid,result,locale,root);  }  return document;}  }
class C{  private WorkspaceTools(){}  }
class C{  @LayoutlibDelegate static float sin(float angle){  return (float)Math.sin(angle);}  }
class C{  private double createCoefficient(IndexSearcher searcher,int doc,Set<String> matchedTokens,String prefixToken) throws IOException {  Terms tv=searcher.getIndexReader().getTermVector(doc,TEXT_FIELD_NAME);  TermsEnum it=tv.iterator();  Integer position=Integer.MAX_VALUE;  BytesRef term;  while ((term=it.next()) != null) {    String docTerm=term.utf8ToString();    if (matchedTokens.contains(docTerm) || (prefixToken != null && docTerm.startsWith(prefixToken))) {      PostingsEnum docPosEnum=it.postings(null,PostingsEnum.OFFSETS);      docPosEnum.nextDoc();      int p=docPosEnum.nextPosition();      if (p < position) {        position=p;      }    }  }  return calculateCoefficient(position);}  }
class C{  public double nextDouble(double mean,double gamma,double cut){  if (gamma == 0.0)   return mean;  if (cut == Double.NEGATIVE_INFINITY) {    double val=Math.atan(-mean / gamma);    double rval=this.uniform.nextDoubleFromTo(val,Math.PI / 2.0);    double displ=gamma * Math.tan(rval);    return Math.sqrt(mean * mean + mean * displ);  } else {    double tmp=Math.max(0.0,mean - cut);    double lower=Math.atan((tmp * tmp - mean * mean) / (mean * gamma));    double upper=Math.atan(((mean + cut) * (mean + cut) - mean * mean) / (mean * gamma));    double rval=this.uniform.nextDoubleFromTo(lower,upper);    double displ=gamma * Math.tan(rval);    return Math.sqrt(Math.max(0.0,mean * mean + mean * displ));  }}  }
class C{  public static void main(String[] args){  runCLIApplication(GreedyEnsembleExperiment.class,args);}  }
class C{  public WhereBuilder or(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "OR",columnName,op,value);  return this;}  }
class C{  @Override public void onStop(){  super.onStop();  if (sStatusBar != null) {    sStatusBar.disable(StatusBarManager.DISABLE_NONE);  }  getContext().unregisterReceiver(mBroadcastReceiver);  mHandler.postDelayed(mCleanup,100);}  }
class C{  public void logEvent(String eventName){  logEvent(eventName,null);}  }
class C{  public static FunctionCall asFunctionCall(Resource resource){  if (resource.isAnon()) {    Statement s=resource.getProperty(RDF.type);    if (s != null && s.getObject().isURIResource() && !SP.Variable.equals(s.getObject())) {      return resource.as(FunctionCall.class);    }  }  return null;}  }
class C{  List<VPlexMigrationInfo> migrateVirtualVolume(String migrationName,String virtualVolumeName,List<VolumeInfo> nativeVolumeInfoList,boolean isRemote,boolean useDeviceMigration,boolean discoveryRequired,boolean startNow,String transferSize) throws VPlexApiException {  s_logger.info("Migrating virtual volume {}",virtualVolumeName);  VPlexApiVirtualVolumeManager virtualVolumeMgr=_vplexApiClient.getVirtualVolumeManager();  List<VPlexClusterInfo> clusterInfoList=new ArrayList<VPlexClusterInfo>();  Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap=virtualVolumeMgr.findStorageVolumes(nativeVolumeInfoList,discoveryRequired,clusterInfoList);  s_logger.info("Found storage volumes");  VPlexVirtualVolumeInfo virtualVolumeInfo=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterInfo.getName(),virtualVolumeName,false);    if (virtualVolumeInfo != null) {      discoveryMgr.updateVirtualVolumeInfo(clusterInfo.getName(),virtualVolumeInfo);      break;    }  }  if (virtualVolumeInfo == null) {    throw VPlexApiException.exceptions.cantFindRequestedVolume(virtualVolumeName);  }  s_logger.info("Found virtual volume");  if (VPlexVirtualVolumeInfo.Locality.distributed.name().equals(virtualVolumeInfo.getLocality())) {    s_logger.info("Virtual volume is on distributed device {}",virtualVolumeInfo.getSupportingDevice());    return migrateDistributedVirtualVolume(migrationName,virtualVolumeInfo,storageVolumeInfoMap,startNow,transferSize);  } else {    s_logger.info("Virtual volume is on local device {}",virtualVolumeInfo.getSupportingDevice());    return Arrays.asList(migrateLocalVirtualVolume(migrationName,virtualVolumeInfo,storageVolumeInfoMap,startNow,isRemote,useDeviceMigration,transferSize));  }}  }
class C{  void recordRemoval(HashMap<K,V> m){}  }
class C{  public static Border createLineBorder(int thickness,String title){  Border b=new Border();  b.type=TYPE_LINE;  b.themeColors=true;  b.thickness=thickness;  b.borderTitle=title;  return b;}  }
class C{  private static boolean isAssignableFrom(Type from,GenericArrayType to){  Type toGenericComponentType=to.getGenericComponentType();  if (toGenericComponentType instanceof ParameterizedType) {    Type t=from;    if (from instanceof GenericArrayType) {      t=((GenericArrayType)from).getGenericComponentType();    } else     if (from instanceof Class<?>) {      Class<?> classType=(Class<?>)from;      while (classType.isArray()) {        classType=classType.getComponentType();      }      t=classType;    }    return isAssignableFrom(t,(ParameterizedType)toGenericComponentType,new HashMap<String,Type>());  }  return true;}  }
class C{  public static void main(String[] args){  Bootique.app(args).autoLoadModules().run();}  }
class C{  @Override public void onTurnReached(int currentTurn){  workWithCounters(id);}  }
class C{  @Suspendable public static <T>HandlerReceiverAdaptor<T> streamAdaptor(){  return new HandlerReceiverAdaptorImpl<>(getContextScheduler());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistindexnotzero.class,args);}  }
class C{  @Override public void activateRoute(){  activatedRoute=true;  if (!getTurnoutsAlignedSensor().equals("")) {    for (int k=0; k < _outputTurnoutList.size(); k++) {      _outputTurnoutList.get(k).addListener();    }  }  for (int k=0; k < _controlSensorList.size(); k++) {    _controlSensorList.get(k).addListener();  }  Turnout ctl=getCtlTurnout();  if (ctl != null) {    mTurnoutListener=null;    ctl.addPropertyChangeListener(mTurnoutListener,getControlTurnout(),"Route " + getDisplayName());  }  Turnout lockCtl=getLockCtlTurnout();  if (lockCtl != null) {    mLockTurnoutListener=null;    lockCtl.addPropertyChangeListener(mLockTurnoutListener,getLockControlTurnout(),"Route " + getDisplayName());  }  checkTurnoutAlignment();}  }
class C{  public void requestCursor(java.awt.Cursor cursor){  fireRequestCursor(cursor);}  }
class C{  public void handle(final HttpServerRequest request){  if (methods.contains(request.method())) {    Matcher matcher=pattern.matcher(request.uri());    if (matcher.matches()) {      final Handler<HttpClientResponse> handler=installDoneHandler(request);      final JsonObject firstRequest=requests.get(FIRST);      createRequest(request.uri(),firstRequest,handler);      return;    }  }  request.response().end();}  }
class C{  public static FilterValueSetParam findParameter(ArrayDeque<FilterValueSetParam> parameters,FilterParamIndexBase index){  if (index instanceof FilterParamIndexLookupableBase) {    FilterParamIndexLookupableBase propBasedIndex=(FilterParamIndexLookupableBase)index;    FilterSpecLookupable indexLookupable=propBasedIndex.getLookupable();    FilterOperator indexOperator=propBasedIndex.getFilterOperator();    for (    FilterValueSetParam parameter : parameters) {      FilterSpecLookupable lookupable=parameter.getLookupable();      FilterOperator paramOperator=parameter.getFilterOperator();      if ((lookupable.equals(indexLookupable)) && (paramOperator.equals(indexOperator))) {        return parameter;      }    }  } else {    for (    FilterValueSetParam parameter : parameters) {      FilterOperator paramOperator=parameter.getFilterOperator();      if (paramOperator.equals(index.getFilterOperator())) {        return parameter;      }    }  }  return null;}  }
class C{  public float nextFloat(){  return org.evosuite.runtime.Random.nextFloat();}  }
class C{  private boolean isIncluded(final Node node,final Context context){  if (node.connection == Connection.AND) {    for (    final Object child : node.childList) {      if (child instanceof IRepFilterBean && !isIncluded_L1((IRepFilterBean)child,context))       return false; else       if (child instanceof Node && !isIncluded((Node)child,context))       return false;    }    return true;  } else {    for (    final Object child : node.childList) {      if (child instanceof IRepFilterBean && isIncluded_L1((IRepFilterBean)child,context))       return true; else       if (child instanceof Node && isIncluded((Node)child,context))       return true;    }    return false;  }}  }
class C{  public WFG3(int k,int l,int M){  super(k,l,M);}  }
class C{  private static String randomElement(ArrayList<String> list){  int index=random.nextInt(list.size());  return list.get(index);}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public void visitBaseType(char descriptor){}  }
class C{  public synchronized String toLines(){  StringBuilder buff=new StringBuilder();  for (  Entry<Object,Object> e : new TreeMap<Object,Object>(this).entrySet()) {    buff.append(e.getKey()).append('=').append(e.getValue()).append('\n');  }  return buff.toString();}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  op="list";  key="";  value="";  description="";  allSessions=false;  sessions=null;  showAll=false;}  }
class C{  public void resetPolicy(){  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));  setRetryUntil(DEFAULT_RETRY_UNTIL);  setMaxRetries(DEFAULT_MAX_RETRIES);  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);  mPreferences.commit();}  }
class C{  public int hashCode(){  return (line << 16) | offset;}  }
class C{  public static long nextAllOnesLong(long x){  x|=x >>> 1;  x|=x >>> 2;  x|=x >>> 4;  x|=x >>> 16;  x|=x >>> 32;  return x;}  }
class C{  public synchronized boolean contains(BoundedObject o){  Node n=chooseLeaf(o.getBounds(),root);  return n.data.contains(o);}  }
class C{  public void testAddIssuerName$B(){  X509CRLSelector selector=new X509CRLSelector();  byte[] iss1=new byte[]{48,21,49,19,48,17,6,3,85,4,10,19,10,70,105,114,115,116,32,79,114,103,46};  byte[] iss2=new byte[]{48,22,49,20,48,18,6,3,85,4,10,19,11,83,101,99,111,110,100,32,79,114,103,46};  TestCRL crl1=new TestCRL(new X500Principal(iss1));  TestCRL crl2=new TestCRL(new X500Principal(iss2));  try {    selector.addIssuerName(iss1);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("The CRL should match the selection criteria.",selector.match(crl1));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl2));  try {    selector.addIssuerName(iss2);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("The CRL should match the selection criteria.",selector.match(crl2));}  }
class C{  private void doDeleteWithQuery(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final String baseURI=req.getRequestURL().toString();  final String namespace=getNamespace(req);  final String queryStr=req.getParameter("query");  final boolean suppressTruthMaintenance=getBooleanValue(req,QueryServlet.ATTR_TRUTH_MAINTENANCE,false);  final Map<String,Value> bindings=parseBindings(req,resp);  if (bindings == null) {    return;  }  if (queryStr == null)   throw new UnsupportedOperationException();  if (log.isInfoEnabled())   log.info("delete with query: " + queryStr);  try {    if (getIndexManager().isGroupCommit()) {      submitApiTask(new DeleteWithQueryMaterializedTask(req,resp,namespace,ITx.UNISOLATED,queryStr,baseURI,suppressTruthMaintenance,bindings)).get();    } else {      submitApiTask(new DeleteWithQuerySteamingTask(req,resp,namespace,ITx.UNISOLATED,queryStr,baseURI,suppressTruthMaintenance,bindings)).get();    }  } catch (  Throwable t) {    launderThrowable(t,resp,"UPDATE-WITH-QUERY" + ": queryStr=" + queryStr + ", baseURI="+ baseURI);  }}  }
class C{  public CatalanAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  private void loadReportsMenu(Properties ctx,AbstractFactory factory) throws OperationException {  MWebMenu pmenu_reports=MenuManager.createParentMenu(ctx,"pmenu.new.reports",MODULE_NAME,8000);  pmenu_reports.setPosition(MENU_POSITION_TOP);  pmenu_reports.setImageLink("images/pos/buttons/button_order.gif");  factory.add(ctx,PMENU_NEW_REPORTS_ID,pmenu_reports);  pmenu_reports=(MWebMenu)factory.get(ctx,PMENU_NEW_REPORTS_ID);  ArrayList<Integer> processIds=POSReportManager.loadReports(ctx);  int sequence=8010;  for (  Integer id : processIds) {    MProcess process=MProcess.get(ctx,id);    String menuName=process.getName();    factory.add(ctx,menuName,MenuManager.createSubMenu(ctx,menuName,"GenerateReportAction.do?action=generateReportInput&processId=" + id,MODULE_NAME,pmenu_reports.get_ID(),sequence));    sequence+=10;  }}  }
class C{  public AsyncResult BrowseNextAsync(RequestHeader RequestHeader,Boolean ReleaseContinuationPoints,byte[]... ContinuationPoints){  BrowseNextRequest req=new BrowseNextRequest(RequestHeader,ReleaseContinuationPoints,ContinuationPoints);  return channel.serviceRequestAsync(req);}  }
class C{  public static void appendSecondaryIndexTypes(Dataset dataset,ARecordType recordType,ARecordType metaRecordType,Index index,boolean primaryKeysOnly,List<Object> dest) throws AlgebricksException {  if (!primaryKeysOnly) {switch (index.getIndexType()) {case BTREE:case SINGLE_PARTITION_WORD_INVIX:case SINGLE_PARTITION_NGRAM_INVIX:{        dest.addAll(KeyFieldTypeUtils.getBTreeIndexKeyTypes(index,recordType,metaRecordType));        break;      }case RTREE:{      dest.addAll(KeyFieldTypeUtils.getRTreeIndexKeyTypes(index,recordType,metaRecordType));      break;    }case LENGTH_PARTITIONED_NGRAM_INVIX:case LENGTH_PARTITIONED_WORD_INVIX:default :  break;}}if (dataset.getDatasetType() == DatasetType.EXTERNAL) {try {appendExternalRecPrimaryKeys(dataset,dest);} catch (AsterixException e) {throw new AlgebricksException(e);}} else {dest.addAll(KeyFieldTypeUtils.getPartitoningKeyTypes(dataset,recordType,metaRecordType));}}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static void main(String args[]){  try {    HTTP_TRANSPORT=GoogleNetHttpTransport.newTrustedTransport();    DATA_STORE_FACTORY=new FileDataStoreFactory(DATA_STORE_DIR);    Analytics analytics=initializeAnalytics();    printManagementEntities(analytics);  } catch (  GoogleJsonResponseException e) {    System.err.println("There was a service error: " + e.getDetails().getCode() + " : "+ e.getDetails().getMessage());  }catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  public static boolean isSecond(String s){  if (isEmpty(s))   return defaultEmptyOK;  return isIntegerInRange(s,0,59);}  }
class C{  private HashMap<String,Boolean> parseFeature(String optString){  if (optString.equals(NULL)) {    return null;  } else {    HashMap<String,Boolean> map=new HashMap<String,Boolean>();    StringTokenizer features=new StringTokenizer(optString,",");    StringTokenizer option;    while (features.hasMoreElements()) {      option=new StringTokenizer(features.nextToken(),"=");      if (option.hasMoreElements()) {        String key=option.nextToken();        Boolean value=option.nextToken().equals("no") ? Boolean.FALSE : Boolean.TRUE;        map.put(key,value);      }    }    return map;  }}  }
class C{  protected ReceiptSplit(java.awt.Dialog parent){  super(parent,true);}  }
class C{  public SVGPath lineTo(double x,double y){  if (x > Double.NEGATIVE_INFINITY && x < Double.POSITIVE_INFINITY && y > Double.NEGATIVE_INFINITY && y < Double.POSITIVE_INFINITY) {    append(SVGConstants.PATH_LINE_TO,x,y);  }  return this;}  }
class C{  protected GenericObject first(){  myListIterator=this.listIterator(0);  try {    return (GenericObject)myListIterator.next();  } catch (  NoSuchElementException ex) {    return null;  }}  }
class C{  private static void swapRows(int[][] matrix,int first,int second){  int[] tmp=matrix[first];  matrix[first]=matrix[second];  matrix[second]=tmp;}  }
class C{  protected Rectangle2D.Double constrainRectangle(Rectangle2D.Double r,TranslationDirection dir){  Point2D.Double p0=new Point2D.Double(r.x,r.y);switch (dir) {case NORTH:case NORTH_WEST:case WEST:    constrainPoint(p0,dir);  break;case EAST:case NORTH_EAST:p0.x+=r.width;constrainPoint(p0,dir);p0.x-=r.width;break;case SOUTH:case SOUTH_WEST:p0.y+=r.height;constrainPoint(p0,dir);p0.y-=r.height;break;case SOUTH_EAST:p0.y+=r.height;p0.x+=r.width;constrainPoint(p0,dir);p0.y-=r.height;p0.x-=r.width;break;}r.x=p0.x;r.y=p0.y;return r;}  }
class C{  public BuyClientBuilder interceptors(final Interceptor... interceptors){  this.interceptors=interceptors;  return this;}  }
class C{  public static boolean protectAgainstWrappingAttack(Node startNode,Element knownElement,String value){  Node startParent=startNode.getParentNode();  Node processedNode=null;  String id=value.trim();  if (!id.isEmpty() && id.charAt(0) == '#') {    id=id.substring(1);  }  while (startNode != null) {    if (startNode.getNodeType() == Node.ELEMENT_NODE) {      Element se=(Element)startNode;      NamedNodeMap attributes=se.getAttributes();      if (attributes != null) {        for (int i=0; i < attributes.getLength(); i++) {          Attr attr=(Attr)attributes.item(i);          if (attr.isId() && id.equals(attr.getValue()) && se != knownElement) {            log.log(java.util.logging.Level.FINE,"Multiple elements with the same 'Id' attribute value!");            return false;          }        }      }    }    processedNode=startNode;    startNode=startNode.getFirstChild();    if (startNode == null) {      startNode=processedNode.getNextSibling();    }    while (startNode == null) {      processedNode=processedNode.getParentNode();      if (processedNode == startParent) {        return true;      }      startNode=processedNode.getNextSibling();    }  }  return true;}  }
class C{  public static <T,U,R>BiFunction<T,U,R> wrap(BiFunction<T,U,R> w){  TaskContext c=current();  if (c != null) {    return null;  }  return w;}  }
class C{  public void highLight(GraphNode n){  Graphics2D g=(Graphics2D)this.getGraphics();  RenderingHints rh=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  rh.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_SPEED);  g.setRenderingHints(rh);  g.setPaintMode();  g.scale(scale,scale);  int x=0, y=0;  Dimension d=this.getPreferredSize();  if (d.width < this.getWidth()) {    x=(int)((x + this.getWidth() / 2 - d.width / 2) / scale);  }  if (d.height < this.getHeight()) {    y=(int)((y + this.getHeight() / 2 - d.height / 2) / scale);  }  if (n.nodeType == NORMAL) {    g.setXORMode(Color.green);    g.fillOval(x + n.x + paddedNodeWidth - nodeWidth - (paddedNodeWidth - nodeWidth) / 2,y + n.y,nodeWidth,nodeHeight);    g.setXORMode(Color.red);    if (fm.stringWidth(n.lbl) <= nodeWidth) {      g.drawString(n.lbl,x + n.x + paddedNodeWidth / 2 - fm.stringWidth(n.lbl) / 2,y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);    } else     if (fm.stringWidth(n.ID) <= nodeWidth) {      g.drawString(n.ID,x + n.x + paddedNodeWidth / 2 - fm.stringWidth(n.ID) / 2,y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);    } else     if (fm.stringWidth(Integer.toString(m_nodes.indexOf(n))) <= nodeWidth) {      g.drawString(Integer.toString(m_nodes.indexOf(n)),x + n.x + paddedNodeWidth / 2 - fm.stringWidth(Integer.toString(m_nodes.indexOf(n))) / 2,y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);    }    g.setXORMode(Color.green);    GraphNode n2;    int x1, y1, x2, y2;    if (n.edges != null) {      for (      int[] edge2 : n.edges) {        if (edge2[1] == DIRECTED || edge2[1] == DOUBLE) {          n2=m_nodes.get(edge2[0]);          x1=n.x + paddedNodeWidth / 2;          y1=n.y + nodeHeight;          x2=n2.x + paddedNodeWidth / 2;          y2=n2.y;          g.drawLine(x + x1,y + y1,x + x2,y + y2);          if (edge2[1] == DIRECTED) {            if (n2.nodeType == GraphConstants.NORMAL) {              drawArrow(g,x + x1,y + y1,x + x2,y + y2);            }          } else           if (edge2[1] == DOUBLE) {            if (n.nodeType == NORMAL) {              drawArrow(g,x + x2,y + y2,x + x1,y + y1);            }            if (n2.nodeType == NORMAL) {              drawArrow(g,x + x1,y + y1,x + x2,y + y2);            }          }          if (n2.nodeType == NORMAL) {            g.fillOval(x + n2.x + paddedNodeWidth - nodeWidth - (paddedNodeWidth - nodeWidth) / 2,y + n2.y,nodeWidth,nodeHeight);          }          java.util.Vector<GraphNode> t=new java.util.Vector<GraphNode>();          while (n2.nodeType != NORMAL || t.size() > 0) {            if (t.size() > 0) {              n2=t.get(0);              t.removeElementAt(0);            }            if (n2.nodeType != NORMAL) {              g.drawLine(x + n2.x + paddedNodeWidth / 2,y + n2.y,x + n2.x + paddedNodeWidth / 2,y + n2.y + nodeHeight);              x1=n2.x + paddedNodeWidth / 2;              y1=n2.y + nodeHeight;              for (              int[] edge : n2.edges) {                if (edge[1] > 0) {                  GraphNode n3=m_nodes.get(edge[0]);                  g.drawLine(x + x1,y + y1,x + n3.x + paddedNodeWidth / 2,y + n3.y);                  if (n3.nodeType == NORMAL) {                    g.fillOval(x + n3.x + paddedNodeWidth - nodeWidth - (paddedNodeWidth - nodeWidth) / 2,y + n3.y,nodeWidth,nodeHeight);                    drawArrow(g,x + x1,y + y1,x + n3.x + paddedNodeWidth / 2,y + n3.y);                  }                  t.addElement(n3);                }              }            }          }        } else         if (edge2[1] == -REVERSED || edge2[1] == -DOUBLE) {          n2=m_nodes.get(edge2[0]);          x1=n.x + paddedNodeWidth / 2;          y1=n.y;          x2=n2.x + paddedNodeWidth / 2;          y2=n2.y + nodeHeight;          g.drawLine(x + x1,y + y1,x + x2,y + y2);          if (edge2[1] == -DOUBLE) {            drawArrow(g,x + x2,y + y2,x + x1,y + y1);            if (n2.nodeType != SINGULAR_DUMMY) {              drawArrow(g,x + x1,y + y1,x + x2,y + y2);            }          }          while (n2.nodeType != NORMAL) {            g.drawLine(x + n2.x + paddedNodeWidth / 2,y + n2.y + nodeHeight,x + n2.x + paddedNodeWidth / 2,y + n2.y);            x1=n2.x + paddedNodeWidth / 2;            y1=n2.y;            for (            int[] edge : n2.edges) {              if (edge[1] < 0) {                n2=m_nodes.get(edge[0]);                g.drawLine(x + x1,y + y1,x + n2.x + paddedNodeWidth / 2,y + n2.y + nodeHeight);                if (n2.nodeType != SINGULAR_DUMMY) {                  drawArrow(g,x + x1,y + y1,x + n2.x + paddedNodeWidth / 2,y + n2.y + nodeHeight);                }                break;              }            }          }        }      }    }  }}  }
class C{  public void checkCast(final Type type){  if (!type.equals(OBJECT_TYPE)) {    typeInsn(Opcodes.CHECKCAST,type);  }}  }
class C{  public final Tree analyzeARG(String target){  int n=getTreeCount();  FlexibleTree meanTree=null;  for (int i=0; i < n; i++) {    Tree tree=getARG(i);    if (Tree.Utils.uniqueNewick(tree,tree.getRoot()).equals(target)) {      meanTree=new FlexibleTree(tree);      break;    }  }  if (meanTree == null)   throw new RuntimeException("No target tree in trace");  int m=meanTree.getInternalNodeCount();  for (int j=0; j < m; j++) {    double[] heights=new double[n];    NodeRef node1=meanTree.getInternalNode(j);    Set<String> leafSet=Tree.Utils.getDescendantLeaves(meanTree,node1);    for (int i=0; i < n; i++) {      Tree tree=getARG(i);      NodeRef node2=Tree.Utils.getCommonAncestorNode(tree,leafSet);      heights[i]=tree.getNodeHeight(node2);    }    meanTree.setNodeHeight(node1,dr.stats.DiscreteStatistics.mean(heights));    meanTree.setNodeAttribute(node1,"upper",new Double(dr.stats.DiscreteStatistics.quantile(0.975,heights)));    meanTree.setNodeAttribute(node1,"lower",new Double(dr.stats.DiscreteStatistics.quantile(0.025,heights)));  }  return meanTree;}  }
class C{  public HostMonitorConfig remove(final String host,final int port){  Host toRemove=new Host(host,port);  if (!getHostsMap().keySet().contains(toRemove))   return this;  mHostsMap.remove(toRemove);  return this;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthLabelUI();}  }
class C{  public void shutdown(){  clear();}  }
class C{  public Result(Query query){  super(query.getId());  setQuery(query);}  }
class C{  public static TungstenProperties loadFromJSON(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  TungstenProperties tungstenProp=mapper.readValue(json,TungstenProperties.class);  return tungstenProp;}  }
class C{  @Deprecated public static NodeId decode(String nodeIdRef) throws IllegalArgumentException {  return parseNodeId(nodeIdRef);}  }
class C{  public double readDouble(){  return scanner.nextDouble();}  }
class C{  public Permutation(int[] permutation){  super();  this.permutation=permutation;  fromArray(permutation);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:56.174 -0500",hash_original_method="169E8725E31AA026BEEB43CC41C0DB25",hash_generated_method="2A11FEF793F95F530D012A8DAC187222") protected Cipher(CipherSpi cipherSpi,Provider provider,String transformation){  if (cipherSpi == null) {    throw new NullPointerException();  }  if (!(cipherSpi instanceof NullCipherSpi) && provider == null) {    throw new NullPointerException();  }  this.provider=provider;  this.transformation=transformation;  this.spiImpl=cipherSpi;}  }
class C{  public void startAutoScroll(int duration,int position){  this.mScrollPeriod=duration;  if (this.getAdapter() instanceof AutoScrollPagerAdapter<?>) {    this.mBeginIndex=position + 10000 * ((AutoScrollPagerAdapter<?>)this.getAdapter()).getCountReal();  } else {    this.mBeginIndex=position + 10000 * this.getAdapter().getCount();  }  this.mAutoScrollable=true;  this.setCurrentItem(mBeginIndex);  mHandler.removeCallbacks(mScrollRunnable);  mHandler.postDelayed(mScrollRunnable,mScrollPeriod);}  }
class C{  public void loadMarkdown(String txt,String cssFileUrl){  loadMarkdownToView(txt,cssFileUrl);}  }
class C{  public static List<Element> findElementByWsuId(Document doc,String id){  String xpath=String.format("//attribute::*[local-name()='Id' and namespace-uri()='%s' and string()='%s']/parent::node()",URI_NS_WSU,id);  List<Element> result=new ArrayList<Element>();  try {    result=(List<Element>)evaluateXPath(doc,xpath);    LOG.trace(String.format("### WSU IDs found ### \n%s",nodelistToFastXPathList(result)));  } catch (  XPathExpressionException e) {    LOG.warn(String.format("BAD XPath: %s",xpath));  } finally {  }  return result;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  int count;  int modeCount;  double mode;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          z=data.get(0);          mode=z;          modeCount=1;          count=1;          for (a=1; a < dataSize; a++) {            if (data.get(a) == z) {              count++;            } else {              if (count > modeCount) {                mode=z;                modeCount=count;              }              count=1;              z=data.get(a);            }          }          if (count > modeCount) {            mode=z;          }          outputFile.setValue(row,col,mode);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public VectorCharReader(Vector vector,int firstLine){  this.line=firstLine;  this.vec=vector;}  }
class C{  public CancelAction(String key){  super(key);}  }
class C{  public IllegalFormatFlagsException(String f){  if (f == null)   throw new NullPointerException();  this.flags=f;}  }
class C{  @Override public synchronized void updateObject(String columnName,Object x) throws SQLException {  updateObject(findColumn(columnName),x);}  }
class C{  private boolean fireEvent(@NotNull GwtEvent<?> event){  if (eventBus != null) {    eventBus.fireEvent(event);  }  if (event instanceof CancellableEvent) {    return !((CancellableEvent)event).isCancelled();  }  return true;}  }
class C{  protected void addErrorMessages(Mail mail) throws MessagingException {  if (isMaxMessageSizeExceeded()) {    StringBuilder msgBuffer=new StringBuilder("550 - Rejected - This message has been rejected as the message size of ");    msgBuffer.append(getMessageIn().getSize() * 1000 / 1024 / 1000f);    msgBuffer.append("KB exceeds the maximum permitted size of ");    msgBuffer.append(getMaxMessageSizeLimit() / 1024);    msgBuffer.append("KB.");    mail.setErrorMessage(msgBuffer.toString());  }}  }
class C{  public SpectralDisplayPanel(ChannelModel channelModel,ChannelProcessingManager channelProcessingManager,SettingsManager settingsManager){  mChannelModel=channelModel;  mChannelProcessingManager=channelProcessingManager;  mSettingsManager=settingsManager;  mSpectrumPanel=new SpectrumPanel(mSettingsManager);  mOverlayPanel=new OverlayPanel(mSettingsManager,mChannelModel);  mWaterfallPanel=new WaterfallPanel(mSettingsManager);  init();  loadSettings();}  }
class C{  public static void transformScheduleFile(String scheduleFile,String fromCoordinateSystem,String toCoordinateSystem){  log.info("... Transformig schedule from " + fromCoordinateSystem + " to "+ toCoordinateSystem);  final CoordinateTransformation coordinateTransformation=TransformationFactory.getCoordinateTransformation(fromCoordinateSystem,toCoordinateSystem);  final Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new TransitScheduleReader(coordinateTransformation,scenario).readFile(scheduleFile);  TransitSchedule schedule=scenario.getTransitSchedule();  new TransitScheduleWriter(schedule).writeFile(scheduleFile);}  }
class C{  public String amount(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive())   return "";  BigDecimal stmt=(BigDecimal)mTab.getValue("StmtAmt");  if (stmt == null)   stmt=Env.ZERO;  BigDecimal trx=(BigDecimal)mTab.getValue("TrxAmt");  if (trx == null)   trx=Env.ZERO;  BigDecimal bd=stmt.subtract(trx);  if (mField.getColumnName().equals("ChargeAmt")) {    BigDecimal charge=(BigDecimal)value;    if (charge == null)     charge=Env.ZERO;    bd=bd.subtract(charge);    mTab.setValue("InterestAmt",bd);  } else {    BigDecimal interest=(BigDecimal)mTab.getValue("InterestAmt");    if (interest == null)     interest=Env.ZERO;    bd=bd.subtract(interest);    mTab.setValue("ChargeAmt",bd);  }  return "";}  }
class C{  @Deprecated public static int dragViewBy(ActivityInstrumentationTestCase test,View v,int gravity,int deltaX,int deltaY){  return dragViewBy((InstrumentationTestCase)test,v,gravity,deltaX,deltaY);}  }
class C{  @SuppressWarnings("unchecked") private ButtonsPanel createButtonsPanel(final MetaProperty metaProperty,final CollectionDatasource propertyDs,Table table){  MetaClass propertyMetaClass=metaProperty.getRange().asClass();  ButtonsPanel propertyButtonsPanel=componentsFactory.createComponent(ButtonsPanel.class);  Button createButton=componentsFactory.createComponent(Button.class);  CreateAction createAction=new CreateAction(metaProperty,propertyDs,propertyMetaClass);  createButton.setAction(createAction);  table.addAction(createAction);  createButton.setCaption(messages.getMessage(EntityInspectorEditor.class,"create"));  createButton.setIcon("icons/create.png");  Button addButton=componentsFactory.createComponent(Button.class);  AddAction addAction=createAddAction(metaProperty,propertyDs,table,propertyMetaClass);  table.addAction(addAction);  addButton.setAction(addAction);  addButton.setCaption(messages.getMessage(EntityInspectorEditor.class,"add"));  addButton.setIcon("icons/add.png");  Button editButton=componentsFactory.createComponent(Button.class);  EditAction editAction=new EditAction(metaProperty,table,propertyDs);  editButton.setAction(editAction);  editButton.setCaption(messages.getMessage(EntityInspectorEditor.class,"edit"));  editButton.setIcon("icons/edit.png");  table.addAction(editAction);  table.setItemClickAction(editAction);  table.setEnterPressAction(editAction);  RemoveAction removeAction=createRemoveAction(metaProperty,table);  Button removeButton=componentsFactory.createComponent(Button.class);  removeButton.setAction(removeAction);  table.addAction(removeAction);  removeButton.setCaption(messages.getMessage(EntityInspectorEditor.class,"remove"));  removeButton.setIcon("icons/remove.png");  propertyButtonsPanel.add(createButton);  propertyButtonsPanel.add(addButton);  propertyButtonsPanel.add(editButton);  propertyButtonsPanel.add(removeButton);  return propertyButtonsPanel;}  }
class C{  public void mouseDragged(MouseEvent e){  fireMouseLocation(e);  super.mouseDragged(e);}  }
class C{  private boolean isMergeInProgress(){  LOG.info("isMergeInProgress: checking if there is an unfinished merge process...");  final Collection<VirtualFile> mergingRoots=myMerger.getMergingRoots();  if (mergingRoots.isEmpty()) {    return false;  }  LOG.info("isMergeInProgress: roots with unfinished merge: " + mergingRoots);  GitConflictResolver.Params params=new GitConflictResolver.Params();  params.setErrorNotificationTitle("Can't update");  params.setMergeDescription("You have unfinished merge. These conflicts must be resolved before update.");  return !new GitMergeCommittingConflictResolver(myProject,myGit,myMerger,mergingRoots,params,false).merge();}  }
class C{  public boolean is(TokenType compareType){  return (type == compareType);}  }
class C{  public GridGenerator(){  dimensions=2;}  }
class C{  public NPrism(int sides,double radiusTop,double radiusBase,double eccentricity,double height,boolean createVBOs){  if (sides < 3)   throw new IllegalArgumentException("Prisms must have at least 3 sides!");  if ((eccentricity < 0) || (eccentricity >= 1))   throw new IllegalArgumentException("Eccentricity must be in the range [0,1)");  mSideCount=sides;  mEccentricity=eccentricity;  mRadiusTop=radiusTop;  mMinorTop=calculateMinorAxis(mRadiusTop);  mRadiusBase=radiusBase;  mMinorBase=calculateMinorAxis(mRadiusBase);  mHeight=height;  init(createVBOs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.096 -0500",hash_original_method="BA862217BE157CF5D802B772A24ECC4A",hash_generated_method="26EB793AC366F285F6899E4DE193E39A") public static long checksumCrc32(File file) throws FileNotFoundException, IOException {  CRC32 checkSummer=new CRC32();  CheckedInputStream cis=null;  try {    cis=new CheckedInputStream(new FileInputStream(file),checkSummer);    byte[] buf=new byte[128];    while (cis.read(buf) >= 0) {    }    return checkSummer.getValue();  }  finally {    if (cis != null) {      try {        cis.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);  mActionBar.setTitle(mTitle);}  }
class C{  public List modifiers(){  if (this.modifiers == null) {    unsupportedIn2();  }  return this.modifiers;}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public static final String moveToUCIString(Move m){  String ret=squareToString(m.from);  ret+=squareToString(m.to);switch (m.promoteTo) {case Piece.WQUEEN:case Piece.BQUEEN:    ret+="q";  break;case Piece.WROOK:case Piece.BROOK:ret+="r";break;case Piece.WBISHOP:case Piece.BBISHOP:ret+="b";break;case Piece.WKNIGHT:case Piece.BKNIGHT:ret+="n";break;default :break;}return ret;}  }
class C{  @Override public BaseToken verifyToken(String tokenIn){  if (tokenIn == null) {    _log.error("token is null");    return null;  }  TokenOnWire tw=_tokenEncoder.decode(tokenIn);  return this.fetchTokenLocal(tw);}  }
class C{  @Override public Color match(ArtifactElement element){  return getColor(ColorPreferencesIds.COLOR_ARTIFACT);}  }
class C{  public static Thread startDaemon(Thread self,String name,Closure closure){  return createThread(name,true,closure);}  }
class C{  public Boolean isChangedOnly(){  return changedOnly;}  }
class C{  public static String randString(int length){  StringBuilder sb=new StringBuilder(length);  for (int i=0; i < length; i++) {    sb.append(RANDOM_CHARS[rnd_.nextInt(RANDOM_CHARS.length)]);  }  return sb.toString();}  }
class C{  void reset(){  System.arraycopy(iv,0,counter,0,blockSize);  used=blockSize;}  }
class C{  public void addDStore(int local){  xop(ByteCode.DSTORE_0,ByteCode.DSTORE,local);}  }
class C{  public void testGetDynamicParameters() throws Exception {  pm.loadProperties();  TungstenProperties dynamic=pm.getDynamicProperties();  TungstenProperties all=pm.getProperties();  assertTrue("Must have at least one dynamic parameter",dynamic.size() > 0);  for (  String name : dynamic.keyNames()) {    assertEquals("Checking dynamic vs. static: " + name,all.getString(name),dynamic.getString(name));  }}  }
class C{  public void stop(){  if (streaming) {    streamingStop=true;  } else {    this.clip.stop();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.EXTENDED_STATE_MACHINE___ANONYMOUS_EXTENDED_STATE_MACHINE_11:    return getAnonymous_extendedStateMachine_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {  log.debug("Pre-authenticated entry point called. Rejecting access");  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Access Denied");}  }
class C{  public AbstractTransition(State<S,E> source,State<S,E> target,Collection<Action<S,E>> actions,E event,TransitionKind kind,Guard<S,E> guard,Trigger<S,E> trigger){  this(source,target,actions,event,kind,guard,trigger,null);}  }
class C{  public void receiveErrorgetNumberOfEntities(java.lang.Exception e){}  }
class C{  protected void parseScales(String prefix,Properties props){  StringTokenizer tok=null;  Vector<Layer> layers=getLayers();  int size=layers.size();  if (size > 0) {    --size;  }  transitionScales=new float[size];  String scales=props.getProperty(prefix + transitionScalesProperty);  if (scales == null) {    logger.info("Failed to locate property \"" + transitionScalesProperty + "\"");    if (transitionScales.length > 0) {      transitionScales[0]=defaultTransitionScale;    }    for (int i=1; i < transitionScales.length; i++) {      transitionScales[i]=transitionScales[i - 1] / 3;    }    return;  }  try {    tok=new StringTokenizer(scales);    transitionScales[0]=(tok.hasMoreTokens()) ? new Float(tok.nextToken()).floatValue() : defaultTransitionScale;  } catch (  NumberFormatException e) {    logger.info("ScaleFilterLayer.parseScales()1: " + e);    transitionScales[0]=defaultTransitionScale;  }  if (tok != null) {    for (int i=1; i < transitionScales.length; i++) {      try {        transitionScales[i]=(tok.hasMoreTokens()) ? new Float(tok.nextToken()).floatValue() : transitionScales[i - 1] / 3;      } catch (      NumberFormatException e) {        logger.info("ScaleFilterLayer.parseScales()2: " + e);        transitionScales[i]=transitionScales[i - 1] / 3;      }    }  }}  }
class C{  public void accept(final MethodVisitor mv){  int i, j, n;  n=parameters == null ? 0 : parameters.size();  for (i=0; i < n; i++) {    ParameterNode parameter=parameters.get(i);    mv.visitParameter(parameter.name,parameter.access);  }  if (annotationDefault != null) {    AnnotationVisitor av=mv.visitAnnotationDefault();    AnnotationNode.accept(av,null,annotationDefault);    if (av != null) {      av.visitEnd();    }  }  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=visibleParameterAnnotations == null ? 0 : visibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=visibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,true));    }  }  n=invisibleParameterAnnotations == null ? 0 : invisibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=invisibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,false));    }  }  if (visited) {    instructions.resetLabels();  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    mv.visitAttribute(attrs.get(i));  }  if (instructions.size() > 0) {    mv.visitCode();    n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (i=0; i < n; ++i) {      tryCatchBlocks.get(i).updateIndex(i);      tryCatchBlocks.get(i).accept(mv);    }    instructions.accept(mv);    n=localVariables == null ? 0 : localVariables.size();    for (i=0; i < n; ++i) {      localVariables.get(i).accept(mv);    }    n=visibleLocalVariableAnnotations == null ? 0 : visibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      visibleLocalVariableAnnotations.get(i).accept(mv,true);    }    n=invisibleLocalVariableAnnotations == null ? 0 : invisibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      invisibleLocalVariableAnnotations.get(i).accept(mv,false);    }    mv.visitMaxs(maxStack,maxLocals);    visited=true;  }  mv.visitEnd();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:30.038 -0500",hash_original_method="4BE093C11D479D0397F563135FCE31CE",hash_generated_method="2C80080EF4C7396B9E92D8DE282373A4") public static String scrubSubscriberId(String subscriberId){  if ("eng".equals(Build.TYPE)) {    return subscriberId;  } else {    return subscriberId != null ? "valid" : "null";  }}  }
class C{  public void upload(byte[] data){  try {    this.send(data);  } catch (  NotYetConnectedException ex) {    Log.e(TAG,ex.getLocalizedMessage());  }}  }
class C{  public XMLWriter(PrintWriter out,int tabLength){  m_out=out;  m_tab=2;}  }
class C{  public static boolean isEmergencyNumber(String number){  return isEmergencyNumberInternal(number,true);}  }
class C{  public synchronized List<Layer> checkLayerConfiguration(List<Layer> layerList){  if (size() == 0)   return null;  List<Layer> newList=null;  for (  LayerConfigurationListener listener : this) {    newList=listener.checkLayerConfiguration(layerList);    if (newList != null) {      layerList=newList;    }  }  return newList;}  }
class C{  @Override public void addPages(){  page=new NewMergedGraphPage(getSelection());  addPage(page);}  }
class C{  public Builder toBuilder(){  Builder builder=new Builder();  if (maxCount != null) {    builder.maxCount(maxCount);  }  if (maxAge != null) {    builder.maxAge(maxAge);  }  if (truncateBefore != null) {    builder.truncateBefore(truncateBefore);  }  if (cacheControl != null) {    builder.cacheControl(cacheControl);  }  if (acl != null) {    builder.aclBuilder=acl.toBuilder();  }  if (customProperties != null) {    builder.customProperties(new ArrayList<>(customProperties));  }  return builder;}  }
class C{  public void testGetPSource(){  String mdName="SHA-1";  String mgfName="MGF1";  AlgorithmParameterSpec mgfSpec=MGF1ParameterSpec.SHA1;  PSource pSrc=PSource.PSpecified.DEFAULT;  OAEPParameterSpec ps=new OAEPParameterSpec(mdName,mgfName,mgfSpec,pSrc);  assertTrue("The returned value does not equal to the " + "value specified in the constructor.",ps.getPSource() == pSrc);}  }
class C{  private void calcTextAndIconYPositions(LayoutResult lr){  if (verticalAlignment == SwingUtilities.TOP) {    lr.textRect.y=(int)(viewRect.y + (float)lr.labelRect.height / 2 - (float)lr.textRect.height / 2);    lr.iconRect.y=(int)(viewRect.y + (float)lr.labelRect.height / 2 - (float)lr.iconRect.height / 2);  } else   if (verticalAlignment == SwingUtilities.CENTER) {    lr.textRect.y=(int)(viewRect.y + (float)viewRect.height / 2 - (float)lr.textRect.height / 2);    lr.iconRect.y=(int)(viewRect.y + (float)viewRect.height / 2 - (float)lr.iconRect.height / 2);  } else   if (verticalAlignment == SwingUtilities.BOTTOM) {    lr.textRect.y=(int)(viewRect.y + viewRect.height - (float)lr.labelRect.height / 2 - (float)lr.textRect.height / 2);    lr.iconRect.y=(int)(viewRect.y + viewRect.height - (float)lr.labelRect.height / 2 - (float)lr.iconRect.height / 2);  }}  }
class C{  public void XtestFilteringPerformance() throws Exception {  int indexSize=19999;  float fractionCovered=.1f;  String l=t(0);  String u=t((int)(indexSize * 10 * fractionCovered));  SolrQueryRequest req=lrf.makeRequest();  QParser parser=QParser.getParser("foomany_s:[" + l + " TO "+ u+ "]",null,req);  Query rangeQ=parser.getQuery();  List<Query> filters=new ArrayList<>();  filters.add(rangeQ);  req.close();  parser=QParser.getParser("{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}" + t(0) + ' '+ t(1)+ ' '+ t(2),null,req);  Query q=parser.getQuery();  createIndex2(indexSize,"foomany_s","t10_100_ws");  doListGen(500,q,filters,false,true);  req.close();}  }
class C{  public boolean isTerminal(){  return followingNodes == null || followingNodes.isEmpty();}  }
class C{  private static void parseSchema(Element rootNode,Element bodyNode,Element modelNode,Element xformSchemaNode,Hashtable bindings,Hashtable<String,String> problemList,Hashtable<String,String> problemListItems){  Hashtable<String,Element> repeatControls=new Hashtable<String,Element>();  Hashtable<String,List<String>> duplicateFields=new Hashtable<String,List<String>>();  int numOfEntries=rootNode.getChildCount();  for (int i=0; i < numOfEntries; i++) {    if (rootNode.isText(i))     continue;    Element child=rootNode.getElement(i);    String name=child.getName();    if (name.equalsIgnoreCase(NODE_COMPLEXTYPE) && isUserDefinedSchemaElement(child)) {      parseComplexType(child,child.getAttributeValue(null,ATTRIBUTE_NAME),bodyNode,xformSchemaNode,bindings,problemList,problemListItems,repeatControls,modelNode);      parseDuplicateFieldsComplexType(duplicateFields,repeatControls,child,bodyNode,modelNode,xformSchemaNode,bindings,problemList,problemListItems);      parseSharedRepeatKidsComplexType(child.getAttributeValue(null,ATTRIBUTE_NAME),duplicateFields,repeatControls,child,bodyNode,modelNode,xformSchemaNode,bindings,problemList,problemListItems);    } else {      String nameAttribute=child.getAttributeValue(null,ATTRIBUTE_NAME);      if (name.equalsIgnoreCase(NODE_SIMPLETYPE) || (name.equalsIgnoreCase(NODE_COMPLEXTYPE) && nameAttribute != null && nameAttribute.startsWith("_") && !nameAttribute.contains("_section")))       xformSchemaNode.addChild(0,Element.ELEMENT,child);      if ("obs_section".equalsIgnoreCase(nameAttribute))       parseObsSectionRepeats(child,bindings,problemList,duplicateFields);    }    if (name.equalsIgnoreCase(NODE_SIMPLETYPE)) {      parseSimpleType(child,child.getAttributeValue(null,ATTRIBUTE_NAME),bindings);      parseDuplicateFieldsSimpleType(duplicateFields,child,bindings);    }  }}  }
class C{  protected void processItemEvent(ItemEvent e){  ItemListener listener=itemListener;  if (listener != null) {    listener.itemStateChanged(e);  }}  }
class C{  public void executeContinuousQuery(String queryName) throws Exception {  CqService cqService=cache.getCqService();  if (cqService != null) {    Collection<? extends InternalCqQuery> allCqs=cqService.getAllCqs();    for (    InternalCqQuery query : allCqs) {      if (query.getName().equals(queryName)) {        try {          cqService.resumeCQ(CqStateImpl.RUNNING,(ServerCQ)query);          return;        } catch (        CqClosedException e) {          throw new Exception(e.getMessage());        }      }    }  }}  }
class C{  public int num_productions(){  return _productions.size();}  }
class C{  private boolean readData(ReadStream is,int length,int flags,int streamId) throws IOException {  ChannelHttp2 channel=_conn.getChannel(streamId);  if (channel == null) {    throw new IllegalStateException(L.l("Stream {0} is closed",streamId));  }  ChannelInHttp2 inChannel=channel.getInChannel();  ChannelFlowHttp2 channelZero=_conn.channelZero();  channelZero.onData(length,_conn,0);  boolean isEndStream=(flags & Http2Constants.END_STREAM) != 0;  if (!isEndStream) {    inChannel.onData(length,_conn,streamId);  }  while (length > 0) {    TempBuffer tBuf;    if (length < TempBuffer.SMALL_SIZE) {      tBuf=TempBuffer.createSmall();    } else {      tBuf=TempBuffer.create();    }    byte[] buffer=tBuf.buffer();    int sublen=Math.min(length,buffer.length);    sublen=is.readAll(buffer,0,sublen);    if (sublen < 0) {      tBuf.free();      return false;    }    tBuf.length(sublen);    inChannel.onData(tBuf);    length-=sublen;  }  if (isEndStream) {    inChannel.close();    if (onCloseStream() <= 0) {      _inHandler.onGoAway();    }  }  return true;}  }
class C{  @OnClick(R.id.notifications_toast_button) public void onToastButtonClick(){  Toast.makeText(getActivity(),getString(R.string.Toast_button_message),Toast.LENGTH_SHORT).show();}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public void addSerialNumber(String snKey,String sn){  _snMap.put(snKey,sn);}  }
class C{  public Model(){}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (breakpoints == null) {    throw new NullPointerException();  }  if (categories == null) {    throw new NullPointerException();  }  if (method != EVENLY_DISTRIBUTED_VALUES && method != EVENLY_DISTRIBUTED_INTERVALS) {    this.method=EVENLY_DISTRIBUTED_INTERVALS;  }}  }
class C{  public DefaultXBLManager(Document doc,BridgeContext ctx){  document=doc;  this.ctx=ctx;  ImportRecord ir=new ImportRecord(null,null);  imports.put(null,ir);}  }
class C{  @SuppressWarnings("unused") private static FileTypes identifyFileType(File file) throws IOException {  byte[] buffer=new byte[8];  InputStream in=null;  try {    in=new FileInputStream(file);    in.read(buffer);    if ((buffer[0] == -119) && (buffer[1] == 0x50) && (buffer[2] == 0x4E)&& (buffer[3] == 0x47)) {      return FileTypes.PNG;    } else     if ((buffer[0] == 0xFF) && (buffer[1] == 0xD8)) {      return FileTypes.JPG;    } else     if ((buffer[0] == 0x25) && (buffer[1] == 0x50) && (buffer[2] == 0x44)&& (buffer[3] == 0x46)) {      return FileTypes.PDF;    } else     if ((buffer[0] == 0x49) && (buffer[1] == 0x49) && (buffer[2] == 0x2A)&& (buffer[3] == 0x00)) {      return FileTypes.TIF;    } else     if ((buffer[0] == 0x4D) && (buffer[1] == 0x4D) && (buffer[2] == 0x00)&& (buffer[3] == 0x2A)) {      return FileTypes.TIF;    } else     if ((buffer[0] == 0x47) && (buffer[1] == 0x49) && (buffer[2] == 0x46)&& (buffer[3] == 0x38)) {      return FileTypes.GIF;    } else {      return FileTypes.UNKNOWN;    }  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public void deleteLast(){  if (this.count > 0) {    this.count--;  }}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.198 -0400",hash_original_method="8EEF9B68072320A00A8FBEC49448AF5F",hash_generated_method="69DD207580D28EA480DE203AAD63BA85") private static void cleanDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDeleteOnExit(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public static void startLocalJMXServer(final int port,final AllowConnections allowConnections) throws IOException, MalformedURLException, RemoteException {  final RMISocketFactory serverSocketFactory=allowConnections == AllowConnections.ALL ? RMISocketFactory.getDefaultSocketFactory() : new LocalhostRMIServerSocketFactory();  LocateRegistry.createRegistry(port,RMISocketFactory.getDefaultSocketFactory(),serverSocketFactory);  final MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  final JMXServiceURL url=new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:" + port + "/jmxrmi");  final JMXConnectorServer rmiServer=JMXConnectorServerFactory.newJMXConnectorServer(url,null,mbs);  rmiServer.start();}  }
class C{  static SearchBuffer obtainSearchBuffer(){  SearchBuffer sb;  try {    if (!searchBuffers.empty()) {      sb=searchBuffers.pop();    } else {      sb=new SearchBuffer();    }  } catch (  EmptyStackException ese) {    sb=new SearchBuffer();  }  return sb;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ChartEntity: ");  sb.append("tooltip = ");  sb.append(this.toolTipText);  return sb.toString();}  }
class C{  public RequestHandler parse(){  try {    String line=reader.readLine();    while (line != null) {      String[] args=line.split("%%");switch (args[0]) {case "rr":        requestResponseMarbles.put(new Tuple<>(args[1],args[2]),args[3]);      break;case "rs":    requestStreamMarbles.put(new Tuple<>(args[1],args[2]),args[3]);  break;case "sub":requestSubscriptionMarbles.put(new Tuple<>(args[1],args[2]),args[3]);break;case "channel":handleChannel(args,reader);case "echochannel":requestEchoChannel.add(new Tuple<>(args[1],args[2]));break;default :break;}line=reader.readLine();}} catch (Exception e) {e.printStackTrace();}return new RequestHandler.Builder().withFireAndForget(null).withRequestResponse(null).withRequestStream(null).withRequestSubscription(null).withRequestChannel(null).build();}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  pcSupport.removePropertyChangeListener(propertyName,in_pcl);}  }
class C{  private static void updateAverageSpeed(Context context,RemoteViews remoteViews,int[] ids,TripStatistics tripStatistics,boolean metricUnits,boolean reportSpeed){  String averageSpeedLabel=context.getString(reportSpeed ? R.string.stats_average_speed : R.string.stats_average_pace);  remoteViews.setTextViewText(ids[0],averageSpeedLabel);  Double speed=tripStatistics == null ? Double.NaN : tripStatistics.getAverageSpeed();  String[] speedParts=StringUtils.getSpeedParts(context,speed,metricUnits,reportSpeed);  if (speedParts[0] == null) {    speedParts[0]=context.getString(R.string.value_unknown);  }  remoteViews.setTextViewText(ids[1],speedParts[0]);  remoteViews.setTextViewText(ids[2],speedParts[1]);}  }
class C{  public boolean isUseable(){  return rpObject.has("use");}  }
class C{  public boolean hasRaster(){synchronized (this) {    return (raster != null);  }}  }
class C{  public static WorkflowAnnotations lookupOperatorAnnotations(Operator operator){  return (WorkflowAnnotations)operator.getUserData(KEY_OPERATOR_ANNOTATION);}  }
class C{  public void addInvokeinterface(int clazz,String name,String desc,int count){  add(INVOKEINTERFACE);  addIndex(constPool.addInterfaceMethodrefInfo(clazz,name,desc));  add(count);  add(0);  growStack(Descriptor.dataSize(desc) - 1);}  }
class C{  public AntidoteEater(final RPEntity entity){  entityReference=new WeakReference<RPEntity>(entity);}  }
class C{  private PositionInformation internalSetModifiers(int modifiers,int consideredFlags,TextEditGroup editGroup){  int newModifiers=modifiers & consideredFlags;  ITrackedNodePosition trackedFallback=null;  List<ITrackedNodePosition> trackedNodes=new ArrayList<ITrackedNodePosition>();  List<IExtendedModifier> originalList=fModifierRewrite.getOriginalList();  for (int i=0; i < originalList.size(); i++) {    ASTNode curr=(ASTNode)originalList.get(i);    if (curr instanceof Modifier) {      int flag=((Modifier)curr).getKeyword().toFlagValue();      if ((consideredFlags & flag) != 0) {        if ((newModifiers & flag) == 0) {          fModifierRewrite.remove(curr,editGroup);          if (trackedFallback == null)           trackedFallback=fModifierRewrite.getASTRewrite().track(curr);        }        newModifiers&=~flag;      }    }  }  IExtendedModifier lastAnnotation=null;  List<IExtendedModifier> extendedList=fModifierRewrite.getRewrittenList();  for (int i=0; i < extendedList.size(); i++) {    IExtendedModifier curr=extendedList.get(i);    if (curr.isAnnotation())     lastAnnotation=curr;  }  List<Modifier> newNodes=ASTNodeFactory.newModifiers(fAst,newModifiers);  for (int i=0; i < newNodes.size(); i++) {    Modifier curr=newNodes.get(i);    if ((curr.getKeyword().toFlagValue() & VISIBILITY_MODIFIERS) != 0) {      if (lastAnnotation != null)       fModifierRewrite.insertAfter(curr,(ASTNode)lastAnnotation,editGroup); else       fModifierRewrite.insertFirst(curr,editGroup);    } else {      fModifierRewrite.insertLast(curr,editGroup);    }    trackedNodes.add(fModifierRewrite.getASTRewrite().track(curr));  }  if (trackedNodes.isEmpty()) {    if (trackedFallback == null) {      trackedFallback=fModifierRewrite.getASTRewrite().track(fModifierRewrite.getParent());    }    return new LinkedProposalPositionGroup.StartPositionInformation(trackedFallback);  } else {    return new LinkedProposalPositionGroup.TrackedNodesPosition(trackedNodes);  }}  }
class C{  public static SSLEngine createSslEngine(SSLContext context,NettyTransportSslOptions options) throws Exception {  return createSslEngine(null,context,options);}  }
class C{  public boolean hasSignerAtOldLocation(){  boolean hasSigner=false;  String baseDn=getRootLdusDn();  ILdapMessage message=null;  try {    message=getTenantCredentials(baseDn);    if (message != null) {      ILdapEntry[] entries=message.getEntries();      if (entries != null && entries.length != 0) {        hasSigner=true;      }    }  }  finally {    closeMessage(message);  }  return hasSigner;}  }
class C{  protected void handleOverflow(E e){}  }
class C{  public static boolean isFileTypeSupported(int fileType){  List providers=getMidiFileWriters();  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType)) {      return true;    }  }  return false;}  }
class C{  public void addAttribute(String name,String value){  if (attributes == null)   attributes=new HashMap<String,String>();  attributes.put(name,value);}  }
class C{  public void onItemButtonClicked(int position){  String text=getString(R.string.snack_bar_text_button_clicked,position);  Snackbar snackbar=Snackbar.make(findViewById(R.id.container),text,Snackbar.LENGTH_SHORT);  snackbar.show();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__ANNOTATION_LIST:    return annotationList != null;case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__DECLARED_MODIFIERS:  return declaredModifiers != null && !declaredModifiers.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void inclRange(int start,int limit){  Assert.check(currentState != BitsState.UNKNOWN);  sizeTo((limit >>> wordshift) + 1);  for (int x=start; x < limit; x++) {    bits[x >>> wordshift]=bits[x >>> wordshift] | (1 << (x & wordmask));  }  currentState=BitsState.NORMAL;}  }
class C{  public String first(ICalDataType dataType){  String dataTypeStr=toLocalName(dataType);  return first(dataTypeStr);}  }
class C{  public ChoiceBoxItem(String label,Property<T> value,ObservableList<T> alternatives,String tooltip,UnaryOperator<Node> decorator){  super(label,tooltip,decorator);  this.currentValue=value;  this.alternatives=FXCollections.unmodifiableObservableList(alternatives);}  }
class C{  void readObject(){  for (int i=0; i < sers.length; ++i) {    try {      data[i]=sers[i].fromByteBuffer(buffer);    } catch (    UnsupportedOperationException e) {      throw new AbortException("Deserialization failed.",e);    }catch (    IOException e) {      throw new AbortException("IO error",e);    }  }}  }
class C{  public final Mono<T> otherwise(Function<? super Throwable,? extends Mono<? extends T>> fallback){  return onAssembly(new MonoOtherwise<>(this,fallback));}  }
class C{  private void verifyResult(SupplierRevenueSqlResult.RowData result,String expectedStart,String expectedEnd,String expectedId,String expectedName,String expectedAmount,String expectedCurrency,String mp){  assertEquals(expectedStart,result.fromDate);  assertEquals(expectedEnd,result.toDate);  assertEquals(expectedId,result.supplierId);  assertEquals(expectedName,result.supplierName);  assertEquals(expectedAmount,result.amount);  assertEquals(expectedCurrency,result.currency);  assertEquals(mp,result.marketplace);}  }
class C{  public long readLong() throws IOException {  expectStartTag("long");  long value=parseLong();  expectEndTag("long");  return value;}  }
class C{  private void parse() throws UncheckedIOException {  TagFilter parserWayFilter=new TagFilter();  parserWayFilter.add(OsmTag.HIGHWAY);  parserWayFilter.add(OsmTag.RAILWAY);  parserWayFilter.addException(OsmTag.SERVICE);  TagFilter parserRelationFilter=new TagFilter();  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.BUS);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.TROLLEYBUS);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.RAIL);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.TRAM);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.LIGHT_RAIL);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.FUNICULAR);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.MONORAIL);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.SUBWAY);  OsmParser parser=new OsmParser(transformation);  OsmParserHandler handler=new OsmParserHandler();  handler.addFilter(null,parserWayFilter,parserRelationFilter);  parser.addHandler(handler);  parser.readFile(this.config.getOsmFile());  this.ways=handler.getWays();  this.nodes=handler.getNodes();  this.relations=handler.getRelations();}  }
class C{  public static boolean isSorted(long[] array){  if (array == null || array.length < 2) {    return true;  }  long previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final long current=array[i];    if (new Long(previous).compareTo(current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  public void test1() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00",new BigDecimal(2.0D));  VOMarketplace marketplace=supplierData.getMarketplace(0);  setDateFactory("2013-07-10 20:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customer=registerCustomer(supplierData);  VOServiceDetails service=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv1");  updateMarketplaceRevenueShare(10.0D,marketplace.getMarketplaceId());  subscribe(customer.getAdminUser(),"srv1_subscr1",service,"2013-08-01 12:00:00","ADMIN");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("test1",new TestData(supplierData));}  }
class C{  public List<NamedRelatedResourceRep> listByFileSystem(URI fileSystemId){  SnapshotList response=client.get(SnapshotList.class,getByFileSystemUrl(),fileSystemId);  return defaultList(response.getSnapList());}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_StateA:    return stateVector[0] == State.main_region_StateA;case main_region_StateB:  return stateVector[0] == State.main_region_StateB;default :return false;}}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","henu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public final AssertSubscriber<T> assertNotComplete(){  int c=completionCount;  if (c == 1) {    throw new AssertionError("Completed",null);  }  if (c > 1) {    throw new AssertionError("Multiple completions: " + c,null);  }  return this;}  }
class C{  public LinkedList<Diff> diff_main(String text1,String text2){  return diff_main(text1,text2,true);}  }
class C{  public static String drop(GString self,int num){  return drop(self.toString(),num).toString();}  }
class C{  void decRef(Collection<String> files) throws IOException {  assert locked();  Set<String> toDelete=new HashSet<>();  Throwable firstThrowable=null;  for (  final String file : files) {    try {      if (decRef(file)) {        toDelete.add(file);      }    } catch (    Throwable t) {      if (firstThrowable == null) {        firstThrowable=t;      }    }  }  try {    deleteFiles(toDelete);  } catch (  Throwable t) {    if (firstThrowable == null) {      firstThrowable=t;    }  }  IOUtils.reThrow(firstThrowable);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public LatchCompletionSignal(){  this(1);}  }
class C{  public void fireDOMAttrModifiedEvent(String name,Attr node,String oldv,String newv,short change){switch (change) {case MutationEvent.ADDITION:    if (((AbstractAttr)node).isId())     ownerDocument.addIdEntry(this,newv);  attrAdded(node,newv);break;case MutationEvent.MODIFICATION:if (((AbstractAttr)node).isId()) ownerDocument.updateIdEntry(this,oldv,newv);attrModified(node,oldv,newv);break;default :if (((AbstractAttr)node).isId()) ownerDocument.removeIdEntry(this,oldv);attrRemoved(node,oldv);}AbstractDocument doc=getCurrentDocument();if (doc.getEventsEnabled() && !oldv.equals(newv)) {DOMMutationEvent ev=(DOMMutationEvent)doc.createEvent("MutationEvents");ev.initMutationEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",true,false,node,oldv,newv,name,change);dispatchEvent(ev);}}  }
class C{  protected PlanNode fillSideBranches(PlanNode input,TableGroupJoinNode leafTable,TableGroupJoinNode rootTable){  TableGroupJoinNode branchTable=leafTable;  while (branchTable != rootTable) {    TableGroupJoinNode parent=branchTable.getParent();    if (isBranchpoint(parent)) {      List<PlanNode> subplans=new ArrayList<>(2);      subplans.add(input);      for (TableGroupJoinNode sibling=parent.getFirstChild(); sibling != null; sibling=sibling.getNextSibling()) {        if ((sibling == branchTable) || (leafLeftMostPending(sibling) == null))         continue;        List<TableSource> tables=new ArrayList<>();        PlanNode subplan=new BranchLookup(null,parent.getTable().getTable(),sibling.getTable().getTable(),tables);        subplan=fillBranch(subplan,tables,sibling,parent,sibling);        if (subplans == null)         subplans=new ArrayList<>();        subplans.add(subplan);      }      if (subplans.size() > 1)       input=new Product(parent.getTable().getTable(),subplans);    }    branchTable=parent;  }  return input;}  }
class C{  public void finish(){  ThreadSpanState state=mContainerState;synchronized (state) {    if (mName == null) {      return;    }    if (mPrev != null) {      mPrev.mNext=mNext;    }    if (mNext != null) {      mNext.mPrev=mPrev;    }    if (state.mActiveHead == this) {      state.mActiveHead=mNext;    }    state.mActiveSize--;    this.mCreateMillis=-1;    this.mName=null;    this.mPrev=null;    this.mNext=null;    if (state.mFreeListSize < 5) {      this.mNext=state.mFreeListHead;      state.mFreeListHead=this;      state.mFreeListSize++;    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(eigenvalue);  sb.append(" (");  sb.append(eigenvector.toString());  sb.append(')');  return sb.toString();}  }
class C{  private static final int calculateCapacity(int x){  if (x >= 1 << 30) {    return 1 << 30;  }  if (x == 0) {    return 16;  }  x=x - 1;  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  x|=x >> 16;  return x + 1;}  }
class C{  public static ISearchPattern createSearchPattern(IJavaElement element,int limitTo){  return new SearchPatternAdapter(SearchPattern.createPattern(element,limitTo));}  }
class C{  public static RefactoringStatus createWarningStatus(String msg,RefactoringStatusContext context){  return createStatus(WARNING,msg,context,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  public AnalysisSmartCacheSignature(AnalysisSmartCacheSignature original,Axis generalize){  super();  this.analysis=original.analysis;  this.measures=original.measures;  this.SQL=original.SQL;  this.generalize=generalize;}  }
class C{  private Object logFormat(final Credentials credentials){  if (UsernamePasswordCredentials.class.isAssignableFrom(credentials.getClass())) {    return ((UsernamePasswordCredentials)credentials).getUserName();  } else {    return credentials.getClass();  }}  }
class C{  @Override public boolean equals(Object obj){  if ((obj instanceof KeepAliveKey) == false)   return false;  KeepAliveKey kae=(KeepAliveKey)obj;  return host.equals(kae.host) && (port == kae.port) && protocol.equals(kae.protocol)&& this.obj == kae.obj;}  }
class C{  @Override public void onMatrixChanged(Matrix imageMatrix){  setImageMatrix(imageMatrix);}  }
class C{  @Override public Network newMemory(){  DatabaseNetwork memory=new DatabaseNetwork(getFactory().createEntityManager(),true);  memory.setBot(this.bot);  return memory;}  }
class C{  public void randomizeBias(double lower,double upper){  if (this.getUpdateRule() instanceof BiasedUpdateRule) {    ((BiasedUpdateRule)this.getUpdateRule()).setBias((upper - lower) * Math.random() + lower);  }}  }
class C{  public ChartPanelSingle(String title,String unitName,Dataset dataset,GCTraceCheckpoint checkpoint){  super(title,unitName);  this.dataset=dataset;  this.refresher=new Refresher(WorkerThread.instance(),new RCWithGCTraceCheckpoint(checkpoint,locker,this));  this.checkpoint=checkpoint;  addChart();}  }
class C{  synchronized static void updateLastSeenUID(IMAPMessage msg) throws MessagingException {  long uid=folder.getUID(msg);  try {    long lastSeenUID=Property.getLong(Property.Name.MAILBOX_LAST_SEEN_UID);    if (uid <= lastSeenUID) {      return;    }  } catch (  Exception ignored) {  }  Property.set(Property.Name.MAILBOX_LAST_SEEN_UID,uid);}  }
class C{  public static boolean isFileNewer(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() > timeMillis;}  }
class C{  private void readObject(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.713 -0400",hash_original_method="691724DA7D74AB135EC7980DA6457A7C",hash_generated_method="6F986E63DDE82F22972C21B483527243") public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof String)) {    throw new EncoderException("Parameter supplied to Soundex encode is not of type java.lang.String");  }  return soundex((String)pObject);}  }
class C{  public PLBlankPanorama(){  super();  super.setLocked(true);}  }
class C{  public boolean hasChild(String name,E kind){  return null != getChild(name) && kind == getChild(name).getKind();}  }
class C{  public static RegisterVASACertificateResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  RegisterVASACertificateResponse object=new RegisterVASACertificateResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"registerVASACertificateResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (RegisterVASACertificateResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.set_return(null);        reader.next();        reader.next();      } else {        object.set_return(VasaProviderInfo.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @SuppressWarnings("unchecked") public ExternalBinaryHeap(int n,Comparator<E> comp){  _n=0;  _elements=(E[])new Object[n + 1];  this.comparator=comp;}  }
class C{  int readInt(){  int b1, b2, b3, b4;  b1=pkt.data[inCursor++] & 0xff;  b2=pkt.data[inCursor++] & 0xff;  b3=pkt.data[inCursor++] & 0xff;  b4=pkt.data[inCursor++] & 0xff;  return ((b1 << 24) + (b2 << 16) + (b3 << 8)+ b4);}  }
class C{  protected int string1() throws IOException {  start=position;  loop:   for (; ; ) {switch (nextChar()) {case -1:      throw new ParseException("eof",reader.getLine(),reader.getColumn());case '\'':    break loop;}}nextChar();return STRING;}  }
class C{  public void testGetF13Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF13Momentary();  assertEquals(expResult,result);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.295 -0500",hash_original_method="B32071C09A97DFFF75EFFCE89615F3EB",hash_generated_method="61FD94E30A48F185E47B147315A3A09A") private static boolean tryCancel(Node node,Slot slot){  if (!node.compareAndSet(null,CANCEL))   return false;  if (slot.get() == node)   slot.compareAndSet(node,null);  return true;}  }
class C{  protected final StringBuilder write(StringBuilder sb,final Object... objects){  for (  Object string : objects)   sb.append(string);  return sb;}  }
class C{  public void reset(EvolutionState state,int thread){  for (int x=0; x < genome.length; x++)   genome[x]=state.random[thread].nextBoolean();}  }
class C{  protected InnerBuilder addHeaderWithUrl(String url,String key,String value){  addOrReplaceWithUrl(url,key,value,false);  return this;}  }
class C{  String determineInstallSource(Context context){  boolean isInSystemImage=(getApplicationFlags() & ApplicationInfo.FLAG_SYSTEM) != 0;  return isInSystemImage ? INSTALL_SOURCE_SYSTEM : INSTALL_SOURCE_ORGANIC;}  }
class C{  public void addEventListener(GroupFileTransferListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (listener == null) {    throw new RcsIllegalArgumentException("listener must not be null!");  }  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IGroupFileTransferListener rcsListener=new GroupFileTransferListenerImpl(listener);    mGroupFileTransferListeners.put(listener,new WeakReference<>(rcsListener));    mApi.addEventListener3(rcsListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public List<GroupCloudDeviceDB> _queryGroupDB_CloudDevices(long groupId){synchronized (this) {    if (groupDB_CloudDevicesQuery == null) {      QueryBuilder<GroupCloudDeviceDB> queryBuilder=queryBuilder();      queryBuilder.where(Properties.GroupId.eq(null));      groupDB_CloudDevicesQuery=queryBuilder.build();    }  }  Query<GroupCloudDeviceDB> query=groupDB_CloudDevicesQuery.forCurrentThread();  query.setParameter(0,groupId);  return query.list();}  }
class C{  public void fillRect(int x,int y,int width,int height){  Rectangle rect=new Rectangle(x,y,width,height);  fill(rect);}  }
class C{  public ByteRunAutomaton(Automaton a){  this(a,false,Operations.DEFAULT_MAX_DETERMINIZED_STATES);}  }
class C{  public CouldntSaveDataException(final String msg){  super(msg);  m_stacktrace=super.getStackTrace();}  }
class C{  public static String formatExternal(Date d){  return fmtThreadLocal.get().format(d) + 'Z';}  }
class C{  private void displayCategory(Object nodeInfo){  Category cat=((Category)nodeInfo);  Dimension size=null;  ((JScrollPane)topSplitPane.getLeftComponent()).setPreferredSize(topSplitPane.getLeftComponent().getSize());  boolean needDividerPos=false;  if (topSplitPane.getRightComponent() != null) {    size=topSplitPane.getRightComponent().getSize();  } else {    needDividerPos=true;  }  setThreadDisplay(true);  if (cat.getLastView() == null) {    JComponent catComp=cat.getCatComponent(this);    if (cat.getName().startsWith("Monitors") || cat.getName().startsWith("Threads blocked by Monitors")) {      catComp.addMouseListener(getMonitorsPopupMenu());    } else {      catComp.addMouseListener(getCatPopupMenu());    }    dumpView=new ViewScrollPane(catComp,runningAsVisualVMPlugin);    if (size != null) {      dumpView.setPreferredSize(size);    }    topSplitPane.setRightComponent(dumpView);    cat.setLastView(dumpView);  } else {    if (size != null) {      cat.getLastView().setPreferredSize(size);    }    topSplitPane.setRightComponent(cat.getLastView());  }  if (cat.getCurrentlySelectedUserObject() != null) {    displayThreadInfo(cat.getCurrentlySelectedUserObject());  } else {    displayContent(null);  }  if (needDividerPos) {    topSplitPane.setDividerLocation(PrefManager.get().getTopDividerPos());  }  if (cat.howManyFiltered() > 0) {    statusBar.setInfoText("Filtered " + cat.howManyFiltered() + " elements in this category. Showing remaining "+ cat.showing()+ " elements.");  } else {    statusBar.setInfoText(AppInfo.getStatusBarInfo());  }  displayContent(cat.getInfo());}  }
class C{  private float[] applyCurveXEffect(float offset){  for (int i=0; i < 6; i++)   for (int j=0; j < 51; j++) {    if (mDirection == TouchDisableView.DIRECTION_RIGHT) {      meshVerts[i * 102 + 2 * j]=originVerts[i * 102 + 2 * j];      meshVerts[i * 102 + 2 * j + 1]=originVerts[i * 102 + 2 * j + 1] + (float)(SIN_A * (1 - offset) * Math.sin(originVerts[i * 102 + 2 * j] * originVerts[i * 102 + 2 * j] / SIN_lENGTH_FACTOR));    } else {      meshVerts[i * 102 + 2 * j]=originVerts[i * 102 + 2 * j];      meshVerts[i * 102 + 2 * j + 1]=originVerts[i * 102 + 2 * j + 1] + (float)(SIN_A * (1 - offset) * Math.sin(originVerts[i * 102 + 2 * j] * originVerts[i * 102 + 2 * j] / SIN_lENGTH_FACTOR));    }  }  return meshVerts;}  }
class C{  static boolean uploadIfNecessary(Configuration conf) throws IOException {  String local=conf.get(LOCAL_INPUT);  if (local == null) {    return false;  }  FileSystem fs=FileSystem.get(conf);  String current=new File("").getAbsolutePath();  Path sourcePath=new Path(current,local);  Path destPath=getOutputPath(conf,"input");  fs.copyFromLocalFile(false,true,sourcePath,destPath);  conf.set(MRUtils.INPUT_PATH,destPath.toString());  return true;}  }
class C{  protected static MethodType replaceWithMoreSpecificType(Object[] args,MethodType callSiteType){  for (int i=0; i < args.length; i++) {    if (args[i] == null)     continue;    if (callSiteType.parameterType(i).isPrimitive())     continue;    Class argClass=args[i].getClass();    callSiteType=callSiteType.changeParameterType(i,argClass);  }  return callSiteType;}  }
class C{  private Transform create(Class type) throws Exception {  Class factory=types.fetch(type);  if (factory != null) {    return create(type,factory);  }  return null;}  }
class C{  public LinkedBag(){  first=null;  n=0;}  }
class C{  public void testDoConfigureSetsLowLogging() throws Exception {  configuration.setProperty(GeneralPropertySet.LOGGING,LoggingLevel.LOW.getLevel());  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("Warning","//weblogic:log-file-severity",config);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.ENTRY_POINT_SPEC__ENTRYPOINT:    setEntrypoint(ENTRYPOINT_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static void checkResult(String message,long x,long y,long result,BigInteger expected){  BigInteger resultBig=BigInteger.valueOf(result);  if (!inLongRange(expected)) {    fail("FAIL: " + message + "("+ x+ ", "+ y+ ") = "+ result+ "; expected an arithmetic exception: ");  } else   if (!resultBig.equals(expected)) {    fail("FAIL: " + message + "("+ x+ ", "+ y+ ") = "+ result+ "; expected "+ expected);  }}  }
class C{  public RegisterPool(RVMMethod meth){  super(meth);}  }
class C{  public Object eval(Reader reader,ScriptEngine engine,Bindings bindings) throws ScriptException {  return engine.eval(reader,bindings);}  }
class C{  @Override public Class<?> loadClassImpl(String name,boolean resolve) throws ClassNotFoundException {  Class<?> cl=findLoadedClass(name);  if (cl != null) {    if (resolve) {      resolveClass(cl);    }    return cl;  }  String className=name;  if (_hasBootClassPath) {    className=name.replace('.','/') + ".class";    if (findPath(className) == null) {      return null;    }  }  try {    return super.loadClassImpl(name,resolve);  } catch (  Error e) {    className=name.replace('.','/') + ".class";    if (findPath(className) != null) {      String msg=(e + "\n  while loading " + name+ " in "+ this+ "\n  which exists in "+ findPath(className)+ "\n  check for missing dependencies");      log().warning(msg);    }    throw e;  }catch (  ClassNotFoundException e) {    className=name.replace('.','/') + ".class";    if (findPath(className) != null) {      String msg=(e + "\n  " + name+ " in "+ this+ "\n  exists in "+ findPath(className)+ "\n  check for missing dependencies");      log().fine(msg);      throw new ClassNotFoundException(e.getMessage() + "\n" + msg,e);    }    throw e;  }}  }
class C{  public boolean isUseSoftkeys(){  return useSoftkeys;}  }
class C{  public final float paint(Graphics2D g,float x,float y,RSyntaxTextArea host,TabExpander e,float clipStart){  int origX=(int)x;  int end=textOffset + textCount;  float nextX=x;  int flushLen=0;  int flushIndex=textOffset;  Color fg=host.getForegroundForToken(this);  Color bg=host.getBackgroundForTokenType(type);  g.setFont(host.getFontForTokenType(type));  FontMetrics fm=host.getFontMetricsForTokenType(type);  int ascent=fm.getAscent();  int height=fm.getHeight();  for (int i=textOffset; i < end; i++) {switch (text[i]) {case '\t':      nextX=x + fm.charsWidth(text,flushIndex,flushLen);    float nextNextX=e.nextTabStop(nextX,0);  if (bg != null) {    paintBackground(x,y,nextNextX - x,height,g,ascent,host,bg);  }g.setColor(fg);if (flushLen > 0) {g.drawChars(text,flushIndex,flushLen,(int)x,(int)y);flushLen=0;}flushIndex=i + 1;int halfHeight=height / 2;int quarterHeight=halfHeight / 2;int ymid=(int)y - ascent + halfHeight;g.drawLine((int)nextX,ymid,(int)nextNextX,ymid);g.drawLine((int)nextNextX,ymid,(int)nextNextX - 4,ymid - quarterHeight);g.drawLine((int)nextNextX,ymid,(int)nextNextX - 4,ymid + quarterHeight);x=nextNextX;break;case ' ':nextX=x + fm.charsWidth(text,flushIndex,flushLen + 1);int width=fm.charWidth(' ');if (bg != null) {paintBackground(x,y,nextX - x,height,g,ascent,host,bg);}g.setColor(fg);if (flushLen > 0) {g.drawChars(text,flushIndex,flushLen,(int)x,(int)y);flushLen=0;}dotRect.x=nextX - width / 2.0f;dotRect.y=y - ascent + height / 2.0f;g.fill(dotRect);flushIndex=i + 1;x=nextX;break;case '\f':default :flushLen+=1;break;}}nextX=x + fm.charsWidth(text,flushIndex,flushLen);if (flushLen > 0 && nextX >= clipStart) {if (bg != null) {paintBackground(x,y,nextX - x,height,g,ascent,host,bg);}g.setColor(fg);g.drawChars(text,flushIndex,flushLen,(int)x,(int)y);}if (host.getUnderlineForToken(this)) {g.setColor(fg);int y2=(int)(y + 1);g.drawLine(origX,y2,(int)nextX,y2);}return nextX;}  }
class C{  public static boolean invertMatrix3x3(float[] result,float[] m){  float A=m[5] * m[10] - m[6] * m[9];  float B=m[6] * m[8] - m[4] * m[10];  float C=m[4] * m[9] - m[5] * m[8];  float det=m[0] * A + m[1] * B + m[2] * C;  if (det == 0.f) {    return false;  }  float invertedDet=1.f / det;  result[0]=A * invertedDet;  result[1]=(m[2] * m[9] - m[1] * m[10]) * invertedDet;  result[2]=(m[1] * m[6] - m[2] * m[5]) * invertedDet;  result[4]=B * invertedDet;  result[5]=(m[0] * m[10] - m[2] * m[8]) * invertedDet;  result[6]=(m[2] * m[4] - m[0] * m[6]) * invertedDet;  result[8]=C * invertedDet;  result[9]=(m[8] * m[1] - m[0] * m[9]) * invertedDet;  result[10]=(m[0] * m[5] - m[1] * m[4]) * invertedDet;  return true;}  }
class C{  public void cancelUnnamedTasks(){  if (unnamedTaskExecutor != null) {    unnamedTaskExecutor.shutdownNow();  }}  }
class C{  public static boolean isNumericString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if (('0' <= ch && ch <= '9') || ch == ' ') {      continue;    }    return false;  }  return true;}  }
class C{  public void clearDoubleHeaderCache(){  clearSubHeaderCache();  clearHeaderCache();}  }
class C{  void releaseSample(){  if (sampleRef.getAndSet(null) != null) {    if (log.isTraceEnabled())     log.trace("Released sample: " + this);  }}  }
class C{  public void endDocument() throws SAXException {  write('\n');  super.endDocument();  try {    flush();  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public boolean supportsResultSetConcurrency(int type,int concurrency) throws SQLException {switch (type) {case ResultSet.TYPE_FORWARD_ONLY:case ResultSet.TYPE_SCROLL_INSENSITIVE:case ResultSet.TYPE_SCROLL_SENSITIVE:    return concurrency == ResultSet.CONCUR_READ_ONLY || concurrency == ResultSet.CONCUR_UPDATABLE;default :  return false;}}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  for (Iterator it=bcme.iterator(); it.hasNext(); ) {    findAndUndo(it.next());  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:55.870 -0500",hash_original_method="1B2C655DAB3EC9AC1A1945226B92611F",hash_generated_method="7A82EE1E230AFFAA2F73B70B12376610") public void bindAppWidgetId(int appWidgetId,ComponentName provider){  try {    sService.bindAppWidgetId(appWidgetId,provider);  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  public double weightedPrecision(){  return m_delegate.weightedPrecision();}  }
class C{  private void removeLocoFromConsist(int address,boolean isLong){  if (isLong) {    address+=0xC000;  }  sendNceBinaryCommand(address,NceBinaryCommand.LOCO_CMD_DELETE_LOCO_CONSIST,(byte)0);}  }
class C{  public DataPoint isUnique(final DataPoint point,final double tolerance){  return isUnique(root,point,tolerance);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_mainExp.fixupVariables(vars,globalsSize);}  }
class C{  protected void init(){  setKNN(1);  m_WindowSize=0;  m_DistanceWeighting=WEIGHT_NONE;  m_CrossValidate=false;  m_MeanSquared=false;}  }
class C{  private void cmd_translate(){  ArrayList<ValueNamePair> list=new ArrayList<ValueNamePair>();  ValueNamePair pp=null;  String sql="SELECT Name, AD_Language FROM AD_Language WHERE IsSystemLanguage='Y' ORDER BY 1";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next())     list.add(new ValueNamePair(rs.getString(2),rs.getString(1)));    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (list.size() == 0) {    ADialog.warn(m_WindowNo,this,"NoTranslation");    return;  }  String title=Msg.getMsg(Env.getCtx(),"PrintFormatTrl",true);  String message=Msg.getMsg(Env.getCtx(),"PrintFormatTrl",false);  int choice=JOptionPane.showOptionDialog(this,message,title,JOptionPane.OK_OPTION,JOptionPane.QUESTION_MESSAGE,null,list.toArray(),null);  if (choice == JOptionPane.CLOSED_OPTION)   return;  pp=(ValueNamePair)list.get(choice);  String AD_Language=pp.getValue();  int AD_PrintFormat_ID=m_reportEngine.getPrintFormat().get_ID();  log.config(AD_Language + " - AD_PrintFormat_ID=" + AD_PrintFormat_ID);  StringBuffer sb=new StringBuffer();  if (Language.isBaseLanguage(AD_Language)) {    sb.append("UPDATE AD_PrintFormatItem pfi " + "SET Name = (SELECT e.Name FROM AD_Element e, AD_Column c" + " WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=pfi.AD_Column_ID),"+ "PrintName = (SELECT e.PrintName FROM AD_Element e, AD_Column c"+ " WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=pfi.AD_Column_ID) "+ "WHERE AD_PrintFormat_ID=").append(AD_PrintFormat_ID).append(" AND EXISTS (SELECT * FROM AD_Element e, AD_Column c" + " WHERE e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=pfi.AD_Column_ID)");  } else {    AD_Language="'" + AD_Language + "'";    sb.append("UPDATE AD_PrintFormatItem pfi " + "SET Name = (SELECT e.Name FROM AD_Element_Trl e, AD_Column c" + " WHERE e.AD_Language=").append(AD_Language).append(" AND e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=pfi.AD_Column_ID), " + "PrintName = (SELECT e.PrintName FROM AD_Element_Trl e, AD_Column c" + "	WHERE e.AD_Language=").append(AD_Language).append(" AND e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=pfi.AD_Column_ID) " + "WHERE AD_PrintFormat_ID=").append(AD_PrintFormat_ID).append(" AND EXISTS (SELECT * FROM AD_Element_Trl e, AD_Column c" + " WHERE e.AD_Language=").append(AD_Language).append(" AND e.AD_Element_ID=c.AD_Element_ID AND c.AD_Column_ID=pfi.AD_Column_ID)");  }  int count=DB.executeUpdate(sb.toString(),null);  log.config("Count=" + count);  m_reportEngine.setPrintFormat(MPrintFormat.get(Env.getCtx(),AD_PrintFormat_ID,true));  revalidate();}  }
class C{  @Override public T selectPlan(final HasPlansAndId<T,I> person){  T currentPlan=person.getSelectedPlan();  T otherPlan=new RandomPlanSelector<T,I>().selectPlan(person);  if (currentPlan == null) {    return null;  }  if ((currentPlan.getScore() == null) || (otherPlan.getScore() == null)) {    if (currentPlan.getScore() != null && otherPlan.getScore() == null) {      if (scoreWrnFlag) {        log.error("yyyyyy not switching to other plan although it needs to be explored.  " + "Possibly a serious bug; ask kai if you encounter this.  kai, sep'10");        scoreWrnFlag=false;      }    }    return currentPlan;  }  if (currentPlan.getScore().isNaN()) {    return otherPlan;  }  if (otherPlan.getScore().isNaN()) {    return currentPlan;  }  double currentScore=currentPlan.getScore().doubleValue();  double otherScore=otherPlan.getScore().doubleValue();  if (betaWrnFlag) {    log.warn("Would make sense to revise this once more.  See comments in code.  kai, nov08");    betaWrnFlag=false;  }  double weight=Math.exp(0.5 * this.beta * (otherScore - currentScore));  if (MatsimRandom.getRandom().nextDouble() < 0.01 * weight) {    return otherPlan;  }  return currentPlan;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeInt(setup);  dest.writeString(BSSID);  dest.writeString(pin);}  }
class C{  public static double logpmf(double x,int n,double p){  if (x < 0 || x > n) {    return Double.NEGATIVE_INFINITY;  }  if (p <= 0.) {    return x == 0 ? 0. : Double.NEGATIVE_INFINITY;  }  if (p >= 1.) {    return x == n ? 0. : Double.NEGATIVE_INFINITY;  }  final double q=1 - p;  if (x == 0) {    if (p < .1) {      return -devianceTerm(n,n * q) - n * p;    } else {      return n * Math.log(q);    }  }  if (x == n) {    if (p > .9) {      return -devianceTerm(n,n * p) - n * q;    } else {      return n * Math.log(p);    }  }  final double lc=stirlingError(n) - stirlingError(x) - stirlingError(n - x)- devianceTerm(x,n * p)- devianceTerm(n - x,n * q);  final double f=(MathUtil.TWOPI * x * (n - x)) / n;  return lc - .5 * Math.log(f);}  }
class C{  public void removeLifecycleListener(LifecycleListener listener){synchronized (listenersLock) {    int n=-1;    for (int i=0; i < listeners.length; i++) {      if (listeners[i] == listener) {        n=i;        break;      }    }    if (n < 0)     return;    LifecycleListener results[]=new LifecycleListener[listeners.length - 1];    int j=0;    for (int i=0; i < listeners.length; i++) {      if (i != n)       results[j++]=listeners[i];    }    listeners=results;  }}  }
class C{  public static Node invokeFunction1(Resource function,RDFNode argument,Dataset dataset){  final String expression="<" + function + ">(?arg1)";  QuerySolutionMap initialBinding=new QuerySolutionMap();  initialBinding.add("arg1",argument);  return invokeExpression(expression,initialBinding,dataset);}  }
class C{  public EvaluationResult.MeasurementGroup newGroup(String string){  EvaluationResult.MeasurementGroup g=new MeasurementGroup(string);  groups.add(g);  return g;}  }
class C{  public static String decodeText(String text) throws UnsupportedEncodingException {  if (!text.contains(ENCODED_TOKEN_MARKER)) {    return text;  }  int offset=0;  int endOffset=text.length();  int startWhiteSpace=-1;  int endWhiteSpace=-1;  StringBuilder decodedText=new StringBuilder(text.length());  boolean previousTokenEncoded=false;  while (offset < endOffset) {    char ch=text.charAt(offset);    if (LINEAR_WHITESPACE.indexOf(ch) != -1) {      startWhiteSpace=offset;      while (offset < endOffset) {        ch=text.charAt(offset);        if (LINEAR_WHITESPACE.indexOf(ch) != -1) {          offset++;        } else {          endWhiteSpace=offset;          break;        }      }    } else {      int wordStart=offset;      while (offset < endOffset) {        ch=text.charAt(offset);        if (LINEAR_WHITESPACE.indexOf(ch) == -1) {          offset++;        } else {          break;        }      }      String word=text.substring(wordStart,offset);      if (word.startsWith(ENCODED_TOKEN_MARKER)) {        try {          String decodedWord=decodeWord(word);          if (!previousTokenEncoded && startWhiteSpace != -1) {            decodedText.append(text.substring(startWhiteSpace,endWhiteSpace));            startWhiteSpace=-1;          }          previousTokenEncoded=true;          decodedText.append(decodedWord);          continue;        } catch (        ParseException e) {        }      }      if (startWhiteSpace != -1) {        decodedText.append(text.substring(startWhiteSpace,endWhiteSpace));        startWhiteSpace=-1;      }      previousTokenEncoded=false;      decodedText.append(word);    }  }  return decodedText.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Endpoint resolve(){  if (isGroup()) {    return EndpointGroupRegistry.selectNode(groupName);  } else {    return this;  }}  }
class C{  public byte ID(){  return 7;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean supportsDifferentTableCorrelationNames(){  debugCodeCall("supportsDifferentTableCorrelationNames");  return false;}  }
class C{  public StunTimeoutEvent(StunStack stunStack,Message message,TransportAddress localAddress,TransactionID transactionID){  super(stunStack,localAddress,message);  setTransactionID(transactionID);}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearContentType(){  contentType=null;  fieldSetFlags()[10]=false;  return this;}  }
class C{  private boolean isClusterInExport(Cluster cluster){  List<ExportGroup> exportGroups=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,ExportGroup.class,AlternateIdConstraint.Factory.getConstraint(ExportGroup.class,"clusters",cluster.getId().toString()));  return !exportGroups.isEmpty();}  }
class C{  @SuppressWarnings("unchecked") public <T extends Event>void register(Class<T> event,Consumer<? super T> handler,EventPriority priority){  Bukkit.getServer().getPluginManager().registerEvent(event,identifier,priority,null,Consoles.getInstance());}  }
class C{  public static <V>CaseInsensitiveMap<V> createCaseInsensitiveMap(int initial,float loadFactor){  return new CaseInsensitiveMapImpl<>(initial,loadFactor);}  }
class C{  public IContentProposalProvider createProviderForProject(IProject contextProject){  if (null == contextProject) {    return null;  }  IN4JSProject n4Project=StreamSupport.stream(n4jsCore.findAllProjects().spliterator(),false).filter(null).findAny().orElse(null);  if (n4Project == null) {    return null;  }  SimpleContentProposalProvider provider=new SimpleContentProposalProvider(n4Project.getSourceContainers().stream().map(null).toArray(null));  provider.setFiltering(true);  return provider;}  }
class C{  public boolean isSetSrcCluster(){  return this.srcCluster != null;}  }
class C{  public ShardRouting activePrimary(ShardRouting shard){  for (  ShardRouting shardRouting : assignedShards(shard.shardId())) {    if (shardRouting.primary() && shardRouting.active()) {      return shardRouting;    }  }  return null;}  }
class C{  private void writeElement(OutputNode node,Object value,Converter convert) throws Exception {  convert.write(node,value);}  }
class C{  public static void main(String[] args){  Template tester=new Template();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer){  sourceBuilder().addRescorer(new RescoreBuilder().rescorer(rescorer));  return this;}  }
class C{  @Override public Object singleLineText(final FormObject form){  final boolean[] flags=form.getFieldFlags();  final boolean[] characteristics=form.getCharacteristics();  final TextField newComp=new TextField();  final JavaFXControlListener controlListener=new JavaFXControlListener(newComp);  final StringBuilder styleBuilder=new StringBuilder(200);  String aptext=readAPimagesForText(form);  if (aptext != null && aptext.contains("&#")) {    aptext=Strip.stripXML(aptext,true).toString();  }  if (aptext != null && !aptext.equals(form.getTextStreamValue(PdfDictionary.V))) {    form.setTextStreamValue(PdfDictionary.V,aptext);  }  newComp.setText(form.getTextString());  if (((flags != null) && (flags[FormObject.READONLY_ID])) || (characteristics != null && characteristics[9])) {    newComp.setEditable(false);  }  setupUniversalFeatures(newComp,form,styleBuilder,controlListener);  setupTextFeatures(newComp,form);  setToolTip(form,newComp);  setBorder(form,styleBuilder);  addFont(form,false,false,styleBuilder);  newComp.getStyleClass().add("formsSingleline");  newComp.setStyle(styleBuilder.toString());  return newComp;}  }
class C{  public void paintChildren(Graphics g,Rectangle clip){  BufferedImage localDrawingBuffer=drawingBuffer;  if (panningTransform == null && bufferDirty) {    bufferDirty=false;    localDrawingBuffer=resetDrawingBuffer(localDrawingBuffer,getProjection());    drawingBuffer=localDrawingBuffer;    Graphics gr=getMapBeanRepaintPolicy().modifyGraphicsForPainting(localDrawingBuffer.getGraphics());    if (logger.isLoggable(Level.FINE)) {      logger.fine("BufferedMapBean rendering layers to buffer.");    }    super.paintChildren(gr,null);    gr.dispose();  } else   if (logger.isLoggable(Level.FINE)) {    logger.fine("BufferedMapBean rendering buffer.");  }  if (panningTransform != null) {    panningTransform.render((Graphics2D)g);    return;  } else   if (localDrawingBuffer != null) {    RotationHelper rotHelper=getRotHelper();    if (rotHelper != null) {      rotHelper.paintChildren(g,clip);      rotHelper.paintPainters(g);    } else {      drawProjectionBackground(g);      g.drawImage(localDrawingBuffer,0,0,null);      if (painters != null) {        painters.paint(g);      }    }  }}  }
class C{  static public void sort(Vector<Object> v,Comparer c){  quickSort(v,c,0,v.size() - 1);}  }
class C{  void hang(){  try {    Thread.currentThread().sleep(10 * 60 * 1000);  } catch (  InterruptedException exc) {  }}  }
class C{  void _m03(float m03){  this.m03=m03;}  }
class C{  private byte[] fixedLength(byte[] x,int n){  byte[] b=new byte[n];  for (int i=0; i < x.length; i++) {    b[i]=x[i];  }  return b;}  }
class C{  public Holder(GeneralNames entityName){  this(entityName,V2_CERTIFICATE_HOLDER);}  }
class C{  static <E>E checkType(E obj,Class<? extends E> type){  if (obj != null && !type.isInstance(obj)) {    throw new ClassCastException("Attempt to insert element of type " + obj.getClass() + " into collection of type "+ type);  }  return obj;}  }
class C{  protected String displayTags(final Object node){  if ((node instanceof Node) && ((Node)node).getSourceSection() != null) {    return ((Node)node).getSourceSection().toString();  }  return "";}  }
class C{  public static double lowerBound(long upVoted,long downVoted){  if (upVoted == 0 && downVoted == 0) {    return 0d;  }  long sum=upVoted + downVoted;  if (sum >= Integer.MAX_VALUE) {    return 1d;  }  return new WilsonScoreInterval().createInterval((int)sum,(int)upVoted,CONFIDENCE_LEVEL).getLowerBound();}  }
class C{  public NeuronGroupNode(NetworkPanel networkPanel,NeuronGroup group){  this.networkPanel=networkPanel;  this.neuronGroup=group;  outlinedObjects=new OutlinedObjects();  outlinedObjects.setFillBackground(false);  interactionBox=new NeuronGroupInteractionBox(networkPanel);  interactionBox.setText(neuronGroup.getLabel());  addChild(outlinedObjects);  addChild(interactionBox);  interactionBox.updateText();  if (group.getParentGroup() instanceof Subnetwork) {    if (!((Subnetwork)group.getParentGroup()).displayNeuronGroups()) {      interactionBox.setVisible(false);      outlinedObjects.setOutlinePadding(0);      outlinedObjects.setDrawOutline(false);    }  }  addPropertyChangeListener(PROPERTY_FULL_BOUNDS,this);}  }
class C{  public void start(){  apply();  baseMessage.getBotInstance().getInlineMenuRegistry().register(this);}  }
class C{  public void addText(int x,int y,String stuff,String font,int justify,LinkProperties properties) throws IOException {  LinkText.write(x,y,stuff,font,justify,properties,link.dos);}  }
class C{  public Iterator<PlotItem> itemIterator(){  return new ItmItr();}  }
class C{  public static String guessMimeType(String path){  if (path != null) {    path=path.toLowerCase();    if (path.endsWith(".png"))     return MIME_PNG;    if (path.endsWith(".gif"))     return MIME_GIF;    if (path.endsWith(".jpg"))     return MIME_JPG;    if (path.endsWith(".jpeg"))     return MIME_JPEG;  }  return null;}  }
class C{  @Override protected PfScanRawMatch buildMatchObject(String sequenceIdentifier,String model,String signatureLibraryRelease,int seqStart,int seqEnd,String cigarAlign,Double score,ProfileScanRawMatch.Level profileLevel,PatternScanMatch.PatternScanLocation.Level patternLevel){  return new HamapRawMatch(sequenceIdentifier,model,signatureLibraryRelease,seqStart,seqEnd,cigarAlign,score,profileLevel);}  }
class C{  public NetPermission(String name,String actions){  super(name,actions);}  }
class C{  private void updateUiAfterResponse(String feature,String state,String featureMetadata,String ruleMetadata,boolean cached){  featureButton.setText(feature + " is " + (state == Toggle.ENABLED ? "enabled" : "disabled"));  featureButton.setEnabled(state == Toggle.ENABLED);  featureMetadataTextView.setText("Feature Metadata: " + ruleMetadata);  ruleMetadataTextView.setText("Rule Metadata: " + ruleMetadata);  cachedTextView.setText("Cached: " + cached);}  }
class C{  public void replaceFromToWith(int from,int to,boolean value){  if (nbits == 0 || to == from - 1)   return;  checkRangeFromTo(from,to,nbits);  final long[] theBits=this.bits;  int fromUnit=QuickBitVector.unit(from);  int fromOffset=QuickBitVector.offset(from);  int toUnit=QuickBitVector.unit(to);  int toOffset=QuickBitVector.offset(to);  int bitsPerUnit=QuickBitVector.BITS_PER_UNIT;  long filler;  if (value)   filler=~0L; else   filler=0L;  int bitIndex=from;  if (fromUnit == toUnit) {    QuickBitVector.putLongFromTo(theBits,filler,bitIndex,bitIndex + to - from);    return;  }  if (fromOffset > 0) {    QuickBitVector.putLongFromTo(theBits,filler,bitIndex,bitIndex + bitsPerUnit - fromOffset);    bitIndex+=bitsPerUnit - fromOffset + 1;    fromUnit++;  }  if (toOffset < bitsPerUnit - 1)   toUnit--;  for (int i=fromUnit; i <= toUnit; )   theBits[i++]=filler;  if (fromUnit <= toUnit)   bitIndex+=(toUnit - fromUnit + 1) * bitsPerUnit;  if (toOffset < bitsPerUnit - 1) {    QuickBitVector.putLongFromTo(theBits,filler,bitIndex,to);  }}  }
class C{  public UIServices(String actorSystemName,String configName){  this.configName=configName;  LOG.debug("Creating ActorSystem...");  Config config=config(new String[][]{{"akka.remote.quarantine-systems-for","off"},{"akka.remote.gate-invalid-addresses-for","2s"}});  LOG.debug("Akka using configuration: {}",config);  actorSystem=ActorSystem.create(actorSystemName,config);}  }
class C{  public StaticRequest(int s,Throwable t,Map m){  startTime=System.currentTimeMillis();  thr=t;  status=s;  info=m;}  }
class C{  public String sql_delete(String vendorName,String catalogName,String schemaName,String tableName,String condition,Integer daysOld){  ArrayList<String> conditions=new ArrayList<String>();  if (condition != null && condition.length() > 0)   conditions.add(condition);  return sql_delete(vendorName,catalogName,schemaName,tableName,null,conditions,daysOld);}  }
class C{  protected OMNode createDTD() throws OMException {  throw new OMException("SOAP message MUST NOT contain a Document Type Declaration(DTD)");}  }
class C{  public static String stripUrl(String url){  if (url == null)   return null;  Matcher m=STRIP_URL_PATTERN.matcher(url);  if (m.matches()) {    return m.group(1);  } else {    return url;  }}  }
class C{  private static String stripPrefix(String path){  if (path.startsWith("\\\\?\\")) {    if (path.startsWith("\\\\?\\UNC\\")) {      path="\\" + path.substring(7);    } else {      path=path.substring(4);    }    return path;  }  if (path.startsWith("\\??\\")) {    if (path.startsWith("\\??\\UNC\\")) {      path="\\" + path.substring(7);    } else {      path=path.substring(4);    }    return path;  }  return path;}  }
class C{  public SocketChannel channel(){  return (SocketChannel)key.channel();}  }
class C{  public static void previous(final IdocScanInterface ui){  FileVO ele=(FileVO)ui.getFileVO();  if (ele.getImageSelectIndex() - 1 < 0) {    ele.setImageSelectIndex(ele.getListImage().size() - 1);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() - 1);  }}  }
class C{  public W3CPoint(Point copyFrom){  this(copyFrom == null ? null : copyFrom.getLatitude(),copyFrom == null ? null : copyFrom.getLongitude());}  }
class C{  public static long createFakeThreadIDForParallelGSSecondaryBucket(int bucketId,long originatingThreadId,int gatewayIndex){  return WanType.SECONDARY.generateWanId(originatingThreadId,bucketId,gatewayIndex);}  }
class C{  public EmbeddedJMSResource(String filename){  this(filename,filename);}  }
class C{  final DialogOption showYesNoCancelMessage(String message){  int option;  try {    option=JOptionPane.showConfirmDialog(getParentComponent(),getLabel(message),I18n.tr("Message"),JOptionPane.YES_NO_CANCEL_OPTION);  } catch (  InternalError ie) {    option=JOptionPane.NO_OPTION;  }  if (option == JOptionPane.YES_OPTION)   return DialogOption.YES; else   if (option == JOptionPane.NO_OPTION)   return DialogOption.NO;  return DialogOption.CANCEL;}  }
class C{  public Object exec(List arguments) throws TemplateModelException {  String aExecute;  StringBuilder aOutputBuffer=new StringBuilder();  if (arguments.size() < 1) {    throw new TemplateModelException("Need an argument to execute");  }  aExecute=(String)(arguments.get(0));  try {    Process exec=Runtime.getRuntime().exec(aExecute);    InputStream execOut=exec.getInputStream();    try {      Reader execReader=new InputStreamReader(execOut);      char[] buffer=new char[OUTPUT_BUFFER_SIZE];      int bytes_read=execReader.read(buffer);      while (bytes_read > 0) {        aOutputBuffer.append(buffer,0,bytes_read);        bytes_read=execReader.read(buffer);      }    }  finally {      execOut.close();    }  } catch (  IOException ioe) {    throw new TemplateModelException(ioe.getMessage());  }  return aOutputBuffer.toString();}  }
class C{  public boolean wasOpen(Window window){  StateItem item=windows.get(window);  return item != null && item.wasOpen;}  }
class C{  private void loadBookmarks(SQLiteDatabase db){  ContentValues values=new ContentValues();  PackageManager packageManager=mContext.getPackageManager();  try {    XmlResourceParser parser=mContext.getResources().getXml(R.xml.bookmarks);    XmlUtils.beginDocument(parser,"bookmarks");    final int depth=parser.getDepth();    int type;    while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {      if (type != XmlPullParser.START_TAG) {        continue;      }      String name=parser.getName();      if (!"bookmark".equals(name)) {        break;      }      String pkg=parser.getAttributeValue(null,"package");      String cls=parser.getAttributeValue(null,"class");      String shortcutStr=parser.getAttributeValue(null,"shortcut");      String category=parser.getAttributeValue(null,"category");      int shortcutValue=shortcutStr.charAt(0);      if (TextUtils.isEmpty(shortcutStr)) {        Log.w(TAG,"Unable to get shortcut for: " + pkg + "/"+ cls);        continue;      }      final Intent intent;      final String title;      if (pkg != null && cls != null) {        ActivityInfo info=null;        ComponentName cn=new ComponentName(pkg,cls);        try {          info=packageManager.getActivityInfo(cn,0);        } catch (        PackageManager.NameNotFoundException e) {          String[] packages=packageManager.canonicalToCurrentPackageNames(new String[]{pkg});          cn=new ComponentName(packages[0],cls);          try {            info=packageManager.getActivityInfo(cn,0);          } catch (          PackageManager.NameNotFoundException e1) {            Log.w(TAG,"Unable to add bookmark: " + pkg + "/"+ cls,e);            continue;          }        }        intent=new Intent(Intent.ACTION_MAIN,null);        intent.addCategory(Intent.CATEGORY_LAUNCHER);        intent.setComponent(cn);        title=info.loadLabel(packageManager).toString();      } else       if (category != null) {        intent=Intent.makeMainSelectorActivity(Intent.ACTION_MAIN,category);        title="";      } else {        Log.w(TAG,"Unable to add bookmark for shortcut " + shortcutStr + ": missing package/class or category attributes");        continue;      }      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      values.put(Settings.Bookmarks.INTENT,intent.toUri(0));      values.put(Settings.Bookmarks.TITLE,title);      values.put(Settings.Bookmarks.SHORTCUT,shortcutValue);      db.delete("bookmarks","shortcut = ?",new String[]{Integer.toString(shortcutValue)});      db.insert("bookmarks",null,values);    }  } catch (  XmlPullParserException e) {    Log.w(TAG,"Got execption parsing bookmarks.",e);  }catch (  IOException e) {    Log.w(TAG,"Got execption parsing bookmarks.",e);  }}  }
class C{  public void clear(){  Properties sysprops=System.getProperties();  sysprops.remove("http.proxyHost");  sysprops.remove("http.proxyPort");  sysprops.remove("http.proxyUser");  sysprops.remove("http.proxyPassword");  sysprops.remove("https.proxyHost");  sysprops.remove("https.proxyPort");  sysprops.remove("ftp.proxyHost");  sysprops.remove("ftp.proxyPort");  Authenticator.setDefault(new ProxyAuthenticator("",""));}  }
class C{  @Override public void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  outState.putBoolean(KEY_ANSWER_CHECKED,mAnswerChecked);}  }
class C{  public void recordBounds(final PlanetModel planetModel,final XYZBounds boundsInfo,final Membership... bounds){  final double A=this.x;  final double B=this.y;  final double C=this.z;  if (!boundsInfo.isSmallestMinZ(planetModel) || !boundsInfo.isLargestMaxZ(planetModel)) {    if ((Math.abs(A) >= MINIMUM_RESOLUTION || Math.abs(B) >= MINIMUM_RESOLUTION)) {      final Plane normalizedZPlane=constructNormalizedZPlane(A,B);      final GeoPoint[] points=findIntersections(planetModel,normalizedZPlane,bounds,NO_BOUNDS);      for (      final GeoPoint point : points) {        assert planetModel.pointOnSurface(point);        addPoint(boundsInfo,bounds,point);      }    } else {      final GeoPoint[] points=findIntersections(planetModel,normalYPlane,NO_BOUNDS,NO_BOUNDS);      boundsInfo.addZValue(points[0]);    }  }  final double k=1.0 / ((x * x + y * y) * planetModel.ab * planetModel.ab + z * z * planetModel.c* planetModel.c);  final double abSquared=planetModel.ab * planetModel.ab;  final double cSquared=planetModel.c * planetModel.c;  final double ASquared=A * A;  final double BSquared=B * B;  final double CSquared=C * C;  final double r=2.0 * D * k;  final double rSquared=r * r;  if (!boundsInfo.isSmallestMinX(planetModel) || !boundsInfo.isLargestMaxX(planetModel)) {    final double q=A * abSquared * k;    final double qSquared=q * q;    final double a=ASquared * abSquared * rSquared + BSquared * abSquared * rSquared + CSquared * cSquared * rSquared - 4.0;    final double b=-2.0 * A * abSquared* r + 2.0 * ASquared * abSquared* r* q + 2.0 * BSquared * abSquared* r* q + 2.0 * CSquared * cSquared* r* q;    final double c=abSquared - 2.0 * A * abSquared* q + ASquared * abSquared * qSquared + BSquared * abSquared * qSquared + CSquared * cSquared * qSquared;    if (Math.abs(a) >= MINIMUM_RESOLUTION_SQUARED) {      final double sqrtTerm=b * b - 4.0 * a * c;      if (Math.abs(sqrtTerm) < MINIMUM_RESOLUTION_SQUARED) {        final double m=-b / (2.0 * a);        if (Math.abs(m) >= MINIMUM_RESOLUTION) {          final double l=r * m + q;          final double denom0=0.5 / m;          final GeoPoint thePoint=new GeoPoint((1.0 - l * A) * abSquared * denom0,-l * B * abSquared* denom0,-l * C * cSquared* denom0);          addPoint(boundsInfo,bounds,thePoint);        } else {          boundsInfo.addXValue(-D / A);        }      } else       if (sqrtTerm > 0.0) {        final double sqrtResult=Math.sqrt(sqrtTerm);        final double commonDenom=0.5 / a;        final double m1=(-b + sqrtResult) * commonDenom;        assert Math.abs(a * m1 * m1 + b * m1 + c) < MINIMUM_RESOLUTION;        final double m2=(-b - sqrtResult) * commonDenom;        assert Math.abs(a * m2 * m2 + b * m2 + c) < MINIMUM_RESOLUTION;        if (Math.abs(m1) >= MINIMUM_RESOLUTION || Math.abs(m2) >= MINIMUM_RESOLUTION) {          final double l1=r * m1 + q;          final double l2=r * m2 + q;          final double denom1=0.5 / m1;          final double denom2=0.5 / m2;          final GeoPoint thePoint1=new GeoPoint((1.0 - l1 * A) * abSquared * denom1,-l1 * B * abSquared* denom1,-l1 * C * cSquared* denom1);          final GeoPoint thePoint2=new GeoPoint((1.0 - l2 * A) * abSquared * denom2,-l2 * B * abSquared* denom2,-l2 * C * cSquared* denom2);          addPoint(boundsInfo,bounds,thePoint1);          addPoint(boundsInfo,bounds,thePoint2);        } else {          boundsInfo.addXValue(-D / A);        }      } else {      }    } else     if (Math.abs(b) > MINIMUM_RESOLUTION_SQUARED) {      final double m=-c / b;      final double l=r * m + q;      final double denom0=0.5 / m;      final GeoPoint thePoint=new GeoPoint((1.0 - l * A) * abSquared * denom0,-l * B * abSquared* denom0,-l * C * cSquared* denom0);      addPoint(boundsInfo,bounds,thePoint);    } else {    }  }  if (!boundsInfo.isSmallestMinY(planetModel) || !boundsInfo.isLargestMaxY(planetModel)) {    final double q=B * abSquared * k;    final double qSquared=q * q;    final double a=ASquared * abSquared * rSquared + BSquared * abSquared * rSquared + CSquared * cSquared * rSquared - 4.0;    final double b=2.0 * ASquared * abSquared* r* q - 2.0 * B * abSquared* r + 2.0 * BSquared * abSquared* r* q + 2.0 * CSquared * cSquared* r* q;    final double c=ASquared * abSquared * qSquared + abSquared - 2.0 * B * abSquared* q + BSquared * abSquared * qSquared + CSquared * cSquared * qSquared;    if (Math.abs(a) >= MINIMUM_RESOLUTION_SQUARED) {      final double sqrtTerm=b * b - 4.0 * a * c;      if (Math.abs(sqrtTerm) < MINIMUM_RESOLUTION_SQUARED) {        final double m=-b / (2.0 * a);        if (Math.abs(m) >= MINIMUM_RESOLUTION) {          final double l=r * m + q;          final double denom0=0.5 / m;          final GeoPoint thePoint=new GeoPoint(-l * A * abSquared* denom0,(1.0 - l * B) * abSquared * denom0,-l * C * cSquared* denom0);          addPoint(boundsInfo,bounds,thePoint);        } else {          boundsInfo.addYValue(-D / B);        }      } else       if (sqrtTerm > 0.0) {        final double sqrtResult=Math.sqrt(sqrtTerm);        final double commonDenom=0.5 / a;        final double m1=(-b + sqrtResult) * commonDenom;        assert Math.abs(a * m1 * m1 + b * m1 + c) < MINIMUM_RESOLUTION;        final double m2=(-b - sqrtResult) * commonDenom;        assert Math.abs(a * m2 * m2 + b * m2 + c) < MINIMUM_RESOLUTION;        if (Math.abs(m1) >= MINIMUM_RESOLUTION || Math.abs(m2) >= MINIMUM_RESOLUTION) {          final double l1=r * m1 + q;          final double l2=r * m2 + q;          final double denom1=0.5 / m1;          final double denom2=0.5 / m2;          final GeoPoint thePoint1=new GeoPoint(-l1 * A * abSquared* denom1,(1.0 - l1 * B) * abSquared * denom1,-l1 * C * cSquared* denom1);          final GeoPoint thePoint2=new GeoPoint(-l2 * A * abSquared* denom2,(1.0 - l2 * B) * abSquared * denom2,-l2 * C * cSquared* denom2);          addPoint(boundsInfo,bounds,thePoint1);          addPoint(boundsInfo,bounds,thePoint2);        } else {          boundsInfo.addYValue(-D / B);        }      } else {      }    } else     if (Math.abs(b) > MINIMUM_RESOLUTION_SQUARED) {      final double m=-c / b;      final double l=r * m + q;      final double denom0=0.5 / m;      final GeoPoint thePoint=new GeoPoint(-l * A * abSquared* denom0,(1.0 - l * B) * abSquared * denom0,-l * C * cSquared* denom0);      addPoint(boundsInfo,bounds,thePoint);    } else {    }  }}  }
class C{  @Override public boolean isLeaf(String id){  return false;}  }
class C{  private void runDebuggerTo(final int targetPointer){  if (targetPointer == debugPointer) {    return;  }  int targetInstr=targetPointer;  int diff=-1;  if (targetInstr >= 0) {    int add=0;    if (targetInstr >= programToDebug.length) {      add=targetInstr - (programToDebug.length - 1);      targetInstr=programToDebug.length - 1;    }    while (programToDebugIsData[targetInstr]) {      targetInstr--;    }    diff=targetInstr - debugPointer + add;  }  final int target=instructionsExecuted + diff;  boolean skipFunctions=true;  if (target < instructionsExecuted) {    restartDebugger();    skipFunctions=false;  }  final int startLineCount=functionsLineCount;  debuggerRunningInBackground=true;  while (instructionsExecuted < target + (skipFunctions ? (functionsLineCount - startLineCount) : 0)) {    stepInto=true;    debugPointer=process(programToDebug[debugPointer],debugPointer,programToDebug,dGS);    debugPointer++;    if (debugPointer == programToDebug.length && !codeStack.empty()) {      setCurrentCodeForDebug(codeStack.pop(),numberStack.pop() + 1,false);    }  }  debuggerRunningInBackground=false;  setCurrentCodeForDebug(programToDebug,debugPointer,true);  stepInto=false;  instructionsExecuted=target;}  }
class C{  public void add(String argName,String desc,int expectedNumberOfArguments,boolean expectDashedArguments){  Arg newArg=new Arg(argName,desc,expectedNumberOfArguments,expectDashedArguments);  args.add(newArg);  if (Debug.debugging("parse")) {    Debug.output("ArgParser: adding " + argName);  }}  }
class C{  public int index(int position){  return position;}  }
class C{  public static void reset(){  map.clear();}  }
class C{  public boolean checkStationaryFunctionValue(final double fxOld,final double fxNew,final int statStateIterations,final Type ecType){  if (Math.abs(fxNew - fxOld) >= functionEpsilon_) {    this.statStateIterations=0;    return false;  }  this.statStateIterations++;  if (statStateIterations <= maxStationaryStateIterations_)   return false;  this.ecType=Type.StationaryFunctionValue;  return true;}  }
class C{  public BasicBlockList withRegisterOffset(int delta){  int sz=size();  BasicBlockList result=new BasicBlockList(sz);  for (int i=0; i < sz; i++) {    BasicBlock one=(BasicBlock)get0(i);    if (one != null) {      result.set(i,one.withRegisterOffset(delta));    }  }  if (isImmutable()) {    result.setImmutable();  }  return result;}  }
class C{  protected void validateState(State current){  checkIsPositiveNumber(current.triggersSuccess,"triggersSuccess");  checkIsPositiveNumber(current.triggersError,"triggersError");}  }
class C{  public void pushFrame(Env env,CompiledMethod callee){  StackFrame frame=new StackFrame(env,callee,top);  push(frame);}  }
class C{  public boolean member(T value){  if (value == null) {    throw new IllegalArgumentException("BinaryTree cannot store 'null' values.");  }  if (root == null) {    return false;  }  BinaryNode<T> node=root;  while (node != null) {    int c=value.compareTo(node.value);    if (c == 0) {      return true;    }    if (c < 0) {      node=node.getLeftSon();    } else {      node=node.getRightSon();    }  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ReflectUtils call(String methodName) throws ReflectException {  return call(methodName,new Object[0]);}  }
class C{  public SearchSourceBuilder postFilter(byte[] postFilterBinary,int postFilterBinaryOffset,int postFilterBinaryLength){  return postFilter(new BytesArray(postFilterBinary,postFilterBinaryOffset,postFilterBinaryLength));}  }
class C{  public Range registerString(BytecodeContext bc,String str) throws IOException {  boolean append=true;  if (staticTextLocation == null) {    if (bc.getPageSource() == null)     return null;    PageSource ps=bc.getPageSource();    Mapping m=ps.getMapping();    staticTextLocation=m.getClassRootDirectory();    staticTextLocation.mkdirs();    staticTextLocation=staticTextLocation.getRealResource(ps.getClassName().replace('.','/') + ".txt");    if (staticTextLocation.exists())     append=false; else     staticTextLocation.createFile(true);    off=0;  }  IOUtil.write(staticTextLocation,str,CharsetUtil.UTF8,append);  Range r=new Range(off,str.length());  off+=str.length();  return r;}  }
class C{  private StartupMode checkStartupModeOnDisk(Configuration config) throws IOException {  String modeType=readStartupModeFromDisk();  if (modeType != null) {    if (Constants.STARTUPMODE_HIBERNATE.equalsIgnoreCase(modeType)) {      HibernateMode mode=new HibernateMode(config);      mode.setCoordinator(_coordinator);      mode.setSchemaUtil(_schemaUtil);      mode.setDbDir(dbDir);      return mode;    } else     if (Constants.STARTUPMODE_RESTORE_REINIT.equalsIgnoreCase(modeType)) {      _log.info("GeodbRestore startup mode found. Current vdc list {}",_schemaUtil.getVdcList().size());      if (isGeoDbsvc() && _schemaUtil.getVdcList().size() > 1) {        GeodbRestoreMode mode=new GeodbRestoreMode(config);        mode.setCoordinator(_coordinator);        mode.setSchemaUtil(_schemaUtil);        mode.setDbDir(dbDir);        return mode;      }    } else {      throw new IllegalStateException("Unexpected startup mode " + modeType);    }  }  return null;}  }
class C{  public Vector3d div(double scalar){  x/=scalar;  y/=scalar;  z/=scalar;  return this;}  }
class C{  public void topology(@Nullable Collection<TcpDiscoveryNode> top){  this.top=top;}  }
class C{  public RemovePrimaryKeyChange(Table table,Column[] primaryKeyColumns){  super(table);  _primaryKeyColumns=primaryKeyColumns;}  }
class C{  public static RawHeaders fromMultimap(Map<String,List<String>> map,boolean response) throws IOException {  if (!response)   throw new UnsupportedOperationException();  RawHeaders result=new RawHeaders();  for (  Entry<String,List<String>> entry : map.entrySet()) {    String fieldName=entry.getKey();    List<String> values=entry.getValue();    if (fieldName != null) {      for (      String value : values) {        result.addLenient(fieldName,value);      }    } else     if (!values.isEmpty()) {      result.setStatusLine(values.get(values.size() - 1));    }  }  return result;}  }
class C{  public static Entity insertEntity(final Datastore datastore,final String kind,final Key parent,final List<Property> properties) throws DatastoreException {  Key key;  if (parent != null) {    key=makeKey(parent,kind).build();  } else {    key=makeKey(kind).build();  }  Entity.Builder entityBuilder=Entity.newBuilder().setKey(key).addAllProperty(properties);  CommitRequest commitRequest=CommitRequest.newBuilder().setMode(CommitRequest.Mode.NON_TRANSACTIONAL).setMutation(Mutation.newBuilder().addInsertAutoId(entityBuilder)).build();  CommitResponse response=datastore.commit(commitRequest);  return entityBuilder.setKey(response.getMutationResult().getInsertAutoIdKey(0)).build();}  }
class C{  private static void defineKeyword(int val){  Identifier.lookup(opNames[val]).setType(val);}  }
class C{  public static int compare(String left,Object right) throws PageException {  if (right instanceof String)   return compare(left,(String)right); else   if (right instanceof Number)   return compare(left,((Number)right).doubleValue()); else   if (right instanceof Boolean)   return compare(left,((Boolean)right).booleanValue() ? 1 : 0); else   if (right instanceof Date)   return compare(left,(Date)right); else   if (right instanceof Castable) {    if (isComparableComponent((Castable)right))     return -compareComponent((Castable)right,left);    return -((Castable)right).compareTo(left);  } else   if (right instanceof Locale)   return compare(left,(Locale)right); else   if (right == null)   return left.compareToIgnoreCase(""); else   if (right instanceof Character)   return compare(left,((Character)right).toString()); else   if (right instanceof Calendar)   return compare(left,((Calendar)right).getTime()); else   if (right instanceof TimeZone)   return compare(left,(TimeZone)right); else   return error(false,true);}  }
class C{  public static Tuple2id tuple(int v1,double v2){  return new Tuple2id(v1,v2);}  }
class C{  public Connection(Address to,String group,byte type,int sotimeout) throws IOException, SocketException {  this(to,group,type,null,sotimeout);}  }
class C{  public SocketRpcProtos.Response doBlockingRpc(SocketRpcProtos.Request rpcRequest) throws RpcException {  BlockingService blockingService=blockingServiceMap.get(rpcRequest.getServiceName());  if (blockingService != null) {    return forwardToBlockingService(rpcRequest,blockingService);  }  Service service=serviceMap.get(rpcRequest.getServiceName());  if (service == null) {    throw new RpcException(ErrorReason.SERVICE_NOT_FOUND,"Could not find service: " + rpcRequest.getServiceName(),null);  }  Callback<Message> callback=new Callback<Message>();  SocketRpcController socketController=new SocketRpcController();  forwardToService(rpcRequest,callback,service,socketController);  return createRpcResponse(callback.response,callback.invoked,socketController);}  }
class C{  public static Map<String,Object> testProcessorWithCapture(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=FastMap.newInstance();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  if (processAmount != null && processAmount.compareTo(new BigDecimal("100.00")) >= 0)   result.put("authResult",Boolean.TRUE);  result.put("captureResult",Boolean.TRUE);  if (processAmount != null && processAmount.compareTo(new BigDecimal("100.00")) < 0)   result.put("authResult",Boolean.FALSE);  result.put("captureResult",Boolean.FALSE);  result.put("customerRespMsgs",UtilMisc.toList(UtilProperties.getMessage(resource,"AccountingPaymentTestProcessorMinimumPurchase",locale)));  if (processAmount == null)   result.put("authResult",null);  String refNum=UtilDateTime.nowAsString();  result.put("processAmount",context.get("processAmount"));  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("captureRefNum",refNum);  result.put("captureAltRefNum",refNum);  result.put("authCode","100");  result.put("captureCode","200");  result.put("authFlag","X");  result.put("authMessage",UtilMisc.toList(UtilProperties.getMessage(resource,"AccountingPaymentTestCapture",locale)));  result.put("internalRespMsgs",UtilMisc.toList(UtilProperties.getMessage(resource,"AccountingPaymentTestCapture",locale)));  return result;}  }
class C{  public static LaunchPhase create(String phase,String subphase){  LaunchPhase instance=new LaunchPhase();  instance.phase=phase;  instance.subphase=subphase;  return instance;}  }
class C{  @Override public void onCreateContextMenu(ContextMenu menu,View v,ContextMenuInfo menuInfo){  super.onCreateContextMenu(menu,v,menuInfo);  menu.add(Menu.NONE,CONTEXT_VIEWCONTACT_ID,Menu.NONE,getString(R.string.view_contact));  menu.add(Menu.NONE,CONTEXT_CLOSE_ID,Menu.NONE,getString(R.string.button_close));  menu.add(Menu.NONE,CONTEXT_DELETE_ID,Menu.NONE,getString(R.string.button_delete));  menu.add(Menu.NONE,CONTEXT_REPLY_ID,Menu.NONE,getString(R.string.button_reply));  menu.add(Menu.NONE,CONTEXT_QUICKREPLY_ID,Menu.NONE,getString(R.string.button_quickreply));  menu.add(Menu.NONE,CONTEXT_TTS_ID,Menu.NONE,getString(R.string.button_tts));  menu.add(Menu.NONE,CONTEXT_INBOX_ID,Menu.NONE,getString(R.string.button_inbox));}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean isQrmReqrd(){  return qrmReqrd;}  }
class C{  protected int unwrapKey(Object key){  return ((Integer)key).intValue();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PARAMETERIZED_CALL_EXPRESSION;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public OrCondition(final ChatCondition... condition){  this.conditions=Arrays.asList(condition);}  }
class C{  public Way splitAtNode(final Way way,final Node node){  Log.d("StorageDelegator","splitAtNode way " + way.getOsmId() + " node "+ node.getOsmId());  dirty=true;  undo.save(way);  List<Node> nodes=way.getNodes();  int occurances=Collections.frequency(way.getNodes(),node);  if (nodes.size() < 3 || (way.isEndNode(node) && (way.isClosed() ? occurances == 2 : occurances == 1))) {    Log.d("StorageDelegator","splitAtNode can't split " + nodes.size() + " node long way at this node");    return null;  }  List<Node> nodesForNewWay=new LinkedList<Node>();  boolean found=false;  boolean first=true;  for (Iterator<Node> it=way.getRemovableNodes(); it.hasNext(); ) {    Node wayNode=it.next();    if (!found && wayNode.getOsmId() == node.getOsmId() && !first) {      found=true;      nodesForNewWay.add(wayNode);    } else     if (found) {      nodesForNewWay.add(wayNode);      it.remove();    }    first=false;  }  if (nodesForNewWay.size() <= 1) {    Log.d("StorageDelegator","splitAtNode can't split, new way would have " + nodesForNewWay.size() + " node(s)");    return null;  }  try {    way.updateState(OsmElement.STATE_MODIFIED);    apiStorage.insertElementSafe(way);    Way newWay=factory.createWayWithNewId();    newWay.addTags(way.getTags());    newWay.addNodes(nodesForNewWay,false);    insertElementUnsafe(newWay);    if (way.getParentRelations() != null) {      ArrayList<Relation> relations=new ArrayList<Relation>(way.getParentRelations());      dirty=true;      for (      Relation r : relations) {        Log.d("StorageDelegator","splitAtNode processing relation (#" + r.getOsmId() + "/"+ relations.size()+ ") "+ r.getDescription());        RelationMember rm=r.getMember(way);        if (rm == null) {          Log.d("StorageDelegator","Unconsistent state detected way " + way.getOsmId() + " should be relation member");          ACRA.getErrorReporter().putCustomData("STATUS","NOCRASH");          ACRA.getErrorReporter().handleException(null);          continue;        }        undo.save(r);        String type=r.getTagWithKey(Tags.KEY_TYPE);        if (type != null) {          if (type.equals(Tags.VALUE_RESTRICTION) && !rm.getRole().equals(Tags.VALUE_VIA)) {            ArrayList<RelationMember> rl=r.getMembersWithRole(Tags.VALUE_VIA);            boolean foundVia=false;            for (int j=0; j < rl.size(); j++) {              RelationMember viaRm=rl.get(j);              OsmElement viaE=viaRm.getElement();              Log.d("StorageDelegator","splitAtNode " + viaE.getOsmId());              if (viaE instanceof Node) {                if (((Way)rm.getElement()).hasNode((Node)viaE)) {                  foundVia=true;                }              } else               if (viaE instanceof Way) {                if (((Way)rm.getElement()).hasCommonNode((Way)viaE)) {                  foundVia=true;                }              }            }            Log.d("StorageDelegator","splitAtNode foundVia " + foundVia);            if (!foundVia) {              RelationMember newMember=new RelationMember(rm.getRole(),newWay);              r.replaceMember(rm,newMember);              way.removeParentRelation(r);              newWay.addParentRelation(r);            }          } else {            RelationMember newMember=new RelationMember(rm.getRole(),newWay);            r.addMemberAfter(rm,newMember);            newWay.addParentRelation(r);          }        } else {          RelationMember newMember=new RelationMember(rm.getRole(),newWay);          r.addMemberAfter(rm,newMember);          newWay.addParentRelation(r);        }        r.updateState(OsmElement.STATE_MODIFIED);        apiStorage.insertElementSafe(r);      }    }    recordImagery();    return newWay;  } catch (  StorageException e) {    e.printStackTrace();    return null;  }}  }
class C{  boolean userOK(String entry){  String[] titles={"Delete","Cancel"};  return (JOptionPane.YES_OPTION == JOptionPane.showOptionDialog(_who,"Are you sure you want to delete roster group \"" + entry + "\"?","Delete Roster Group \"" + entry + "\"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,titles,null));}  }
class C{  public OneMustBeSetGlobalConstraint(List<Parameter<?>> params){  parameters=params;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private State(CircuitState circuitState,Duration timeoutDuration,EventCounter counter){  this.circuitState=circuitState;  this.counter=counter;  if (timeoutDuration.isZero() || timeoutDuration.isNegative()) {    timedOutTimeNanos=0L;  } else {    timedOutTimeNanos=ticker.read() + timeoutDuration.toNanos();  }}  }
class C{  public static int tryParseInt(String intString,int defaultValue){  try {    return Integer.parseInt(intString);  } catch (  NumberFormatException e) {    return defaultValue;  }}  }
class C{  public int indexOf(Object elem,int index){  return delegate.indexOf(elem,index);}  }
class C{  @Override public void onTokenMoved(final Player player,Token token){  moveCount++;  if (moveCount < MAX_MOVES) {    npc.say("This was your " + Grammar.ordered(moveCount) + " move.");  } else   if (moveCount == MAX_MOVES) {    npc.say("This was your " + Grammar.ordered(moveCount) + " and final move. Let me check your work.");    SingletonRepository.getTurnNotifier().notifyInTurns(6,new ReverseArrowCheck());    if (timer != null) {      SingletonRepository.getTurnNotifier().dontNotify(timer);    }  } else {    npc.say("Sorry, you may only do " + MAX_MOVES + " moves");  }}  }
class C{  String formatRomanNumerals(int level,int num){  if (num < 10) {    return formatRomanDigit(level,num);  } else {    return formatRomanNumerals(level + 1,num / 10) + formatRomanDigit(level,num % 10);  }}  }
class C{  public SplitterTest(String name){  super(name);}  }
class C{  public MCB(MCBConfig config){  this.state=new Closed(config);}  }
class C{  @Override public long insert(String key,String value){  checkKey(key);  checkValue(value);  if (keyExists(key))   return -1;  return doInsert(key,value);}  }
class C{  public UserAgent(String agentName,String emailAddress,String webAddress){  this(agentName,emailAddress,webAddress,DEFAULT_BROWSER_VERSION);}  }
class C{  private int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(FR,0,FRE,0);  for (int n=0; n < blockSize; n++) {    out[outOff + n]=encryptByte(in[inOff + n],n);  }  for (int n=0; n < blockSize; n++) {    FR[n]=in[inOff + n];  }  return blockSize;}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  public Pattern(String regex) throws PatternSyntaxException {  this(regex,DEFAULT);}  }
class C{  public static boolean isLoggable(int logLevel){  return (logLevel >= LOGLEVEL);}  }
class C{  public ConnectorState startState(int... partitions){  return overrideSequenceNumber(currentState(partitions),0);}  }
class C{  void cleanup(){}  }
class C{  public Builder textSize(int textSize){  this.textSize=textSize;  return this;}  }
class C{  public boolean matchUserAttributesToUserGroup(StorageOSUserDAO user,UserGroup roleAssignmentUserGroup){  boolean isUserGroupMatchesUserAttributes=false;  if (roleAssignmentUserGroup == null || user == null) {    _log.error("Invalid user {} or user group {}",user,roleAssignmentUserGroup);    return isUserGroupMatchesUserAttributes;  }  Set<String> userGroupDoNotMatch=new HashSet<String>();  for (  String roleAssignmentUserAttributeString : roleAssignmentUserGroup.getAttributes()) {    if (StringUtils.isBlank(roleAssignmentUserAttributeString)) {      _log.debug("Invalid user attributes param string");      continue;    }    boolean isUserGroupMatchesUserAttribute=false;    UserAttributeParam roleAssignmentUserAttribute=UserAttributeParam.fromString(roleAssignmentUserAttributeString);    if (roleAssignmentUserAttribute == null) {      _log.warn("Failed to convert user attributes param string {} to object.",roleAssignmentUserAttributeString);      continue;    }    for (    String userAttributeString : user.getAttributes()) {      UserAttributeParam userAttribute=UserAttributeParam.fromString(userAttributeString);      if (userAttribute == null) {        _log.info("Failed to convert user attributes param string {} to object.",userAttributeString);        continue;      }      _log.debug("Comparing user attributes {} with user group attribute {}",userAttributeString,roleAssignmentUserAttributeString);      if (userAttribute.containsAllAttributeValues(roleAssignmentUserAttribute)) {        _log.debug("Found user attributes {} matching with user group attributes {}",userAttributeString,roleAssignmentUserAttributeString);        isUserGroupMatchesUserAttribute=true;        break;      }    }    if (isUserGroupMatchesUserAttribute == false) {      _log.debug("Adding user group {} to the do not match list",roleAssignmentUserAttributeString);      userGroupDoNotMatch.add(roleAssignmentUserAttributeString);    }  }  if (CollectionUtils.isEmpty(userGroupDoNotMatch)) {    isUserGroupMatchesUserAttributes=true;  }  return isUserGroupMatchesUserAttributes;}  }
class C{  @Transactional public void addAtNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_AT);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=at] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public static Set<Emoticon> makeEmoticons(String sourceId){  Set<Emoticon> result=new HashSet<>();  if (sourceId.equals(EmojiSet.E1.id)) {    e1(EmojiSet.E1,result);  } else   if (sourceId.equals(EmojiSet.TWEMOJI.id)) {    twemoji(EmojiSet.TWEMOJI,result);  }  LOGGER.info("Created " + result.size() + " emoji from source "+ sourceId);  return result;}  }
class C{  private GmailSettingsClient(){}  }
class C{  public Object load(NBTTagCompound tag,String key){  if (tag != null && key != null) {    NBTBase saveTag=tag.getTag(key);    if (saveTag instanceof NBTTagFloat) {      return tag.getFloat(key);    } else     if (saveTag instanceof NBTTagDouble) {      return tag.getDouble(key);    } else     if (saveTag instanceof NBTTagInt) {      return tag.getInteger(key);    } else     if (saveTag instanceof NBTTagString) {      return tag.getString(key);    } else     if (saveTag instanceof NBTTagShort) {      return tag.getShort(key);    } else     if (saveTag instanceof NBTTagByte) {      if (tag.getBoolean("isBoolean")) {        return tag.getBoolean(key);      } else {        return tag.getByte(key);      }    } else     if (saveTag instanceof NBTTagLong) {      return tag.getLong(key);    } else     if (saveTag instanceof NBTTagByteArray) {      return tag.getByteArray(key);    } else     if (saveTag instanceof NBTTagIntArray) {      return tag.getIntArray(key);    } else     if (saveTag instanceof NBTTagCompound) {      NBTTagCompound innerTag=tag.getCompoundTag(key);      return toNova(innerTag);    }  }  return null;}  }
class C{  public String indexRouting(){  return indexRouting;}  }
class C{  protected LinearRegressionResult filterByPValue(LinearRegression regression,boolean useBias,double ridge,ExampleSet exampleSet,boolean[] isUsedAttribute,double[] means,double labelMean,double[] standardDeviations,double labelStandardDeviation,double[] coefficientsOnFullData,double alpha) throws UndefinedParameterError, ProcessStoppedException {  FDistribution fdistribution;  int secondDegreeOfFreedom=exampleSet.size() - coefficientsOnFullData.length;  if (secondDegreeOfFreedom > 0) {    fdistribution=new FDistribution(1,secondDegreeOfFreedom);  } else {    fdistribution=null;  }  double generalCorrelation=regression.getCorrelation(exampleSet,isUsedAttribute,coefficientsOnFullData,useBias);  generalCorrelation*=generalCorrelation;  int index=0;  for (int i=0; i < isUsedAttribute.length; i++) {    if (isUsedAttribute[i]) {      double coefficient=coefficientsOnFullData[index];      if (fdistribution != null) {        double probability=getPValue(coefficient,i,regression,useBias,ridge,exampleSet,isUsedAttribute,standardDeviations,labelStandardDeviation,fdistribution,generalCorrelation);        if (1.0d - probability > alpha) {          isUsedAttribute[i]=false;        }        index++;      } else {        isUsedAttribute[i]=false;      }    }  }  LinearRegressionResult result=new LinearRegressionResult();  result.isUsedAttribute=isUsedAttribute;  result.coefficients=regression.performRegression(exampleSet,isUsedAttribute,means,labelMean,ridge);  result.error=regression.getSquaredError(exampleSet,isUsedAttribute,result.coefficients,useBias);  return result;}  }
class C{  private boolean is30DayMonth(int month){  return month == 4 || month == 6 || month == 9 || month == 11;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public static int lastIndexOfSubList(List source,List target){  int sourceSize=source.size();  int targetSize=target.size();  int maxCandidate=sourceSize - targetSize;  if (sourceSize < INDEXOFSUBLIST_THRESHOLD || source instanceof RandomAccess) {    nextCand:     for (int candidate=maxCandidate; candidate >= 0; candidate--) {      for (int i=0, j=candidate; i < targetSize; i++, j++)       if (!eq(target.get(i),source.get(j)))       continue nextCand;      return candidate;    }  } else {    if (maxCandidate < 0)     return -1;    ListIterator si=source.listIterator(maxCandidate);    nextCand:     for (int candidate=maxCandidate; candidate >= 0; candidate--) {      ListIterator ti=target.listIterator();      for (int i=0; i < targetSize; i++) {        if (!eq(ti.next(),si.next())) {          if (candidate != 0) {            for (int j=0; j <= i + 1; j++)             si.previous();          }          continue nextCand;        }      }      return candidate;    }  }  return -1;}  }
class C{  private void createSchedule(){  Map<Id<TransitLine>,TransitLine> transitLinesDump=new HashMap<>();  this.nodes=handler.getNodes();  this.relations=handler.getRelations();  this.ways=handler.getWays();  createStopFacilities();  Set<Long> routesWithMaster=new HashSet<>();  for (  OsmParser.OsmRelation relation : relations.values()) {    if (route_master.matches(relation.tags)) {      Id<TransitLine> lineId=createLineId(relation);      TransitLine newTransitLine=factory.createTransitLine(lineId);      newTransitLine.setName(relation.tags.get(OsmTag.NAME));      for (      OsmParser.OsmRelationMember member : relation.members) {        OsmParser.OsmRelation route=relations.get(member.refId);        if (route != null) {          TransitRoute newTransitRoute=createTransitRoute(route);          if (newTransitRoute != null) {            newTransitLine.addRoute(newTransitRoute);            routesWithMaster.add(member.refId);          }        }      }      transitLinesDump.put(lineId,newTransitLine);    }  }  for (  OsmParser.OsmRelation relation : relations.values()) {    if (ptRoute.matches(relation.tags) && !routesWithMaster.contains(relation.id)) {      Id<TransitLine> lineId=createLineId(relation);      if (!transitLinesDump.containsKey(lineId)) {        transitLinesDump.put(lineId,factory.createTransitLine(lineId));      }      TransitLine transitLine=transitLinesDump.get(lineId);      TransitRoute newTransitRoute=createTransitRoute(relation);      if (newTransitRoute != null) {        transitLine.addRoute(newTransitRoute);      }    }  }  for (  TransitLine transitLine : transitLinesDump.values()) {    this.transitSchedule.addTransitLine(transitLine);  }  log.info("MATSim Transit Schedule created.");}  }
class C{  public void finish() throws SemanticError {  for (int t=0; t < threadStacks.size(); t++) {    finish(t);  }  for (  Lifeline line : getLifelines()) {    if (line != null && !(line.isAlwaysActive()) && line.isActive()) {      line.finish();    }  }}  }
class C{  @Override public MemChunkHolder<BigDataMemAllocator> resizeChunk(MemChunkHolder<BigDataMemAllocator> mholder,long size){  MemChunkHolder<BigDataMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    Long addr=m_vmasvc.reallocate(m_nid,mholder.get(),size,true);    if (0 == addr && m_activegc) {      forceGC();      addr=m_vmasvc.reallocate(m_nid,mholder.get(),size,true);    }    if (0 != addr) {      mholder.clear();      mholder.destroy();      ret=new MemChunkHolder<BigDataMemAllocator>(this,addr,size);      if (ac) {        m_chunkcollector.register(ret);      }    }  }  return ret;}  }
class C{  @After public void tearDown() throws Exception {  TradestrategyTest.clearDBData();}  }
class C{  public static int lowerCaseHashCode(String s){  int h=0;  int len=s.length();  for (int i=0; i < len; i++) {    h=31 * h + toLower(s.charAt(i));  }  return h;}  }
class C{  public static boolean disjoint(Collection<?> c1,Collection<?> c2){  if ((c1 instanceof Set) && !(c2 instanceof Set) || (c2.size()) > c1.size()) {    Collection<?> tmp=c1;    c1=c2;    c2=tmp;  }  Iterator<?> it=c1.iterator();  while (it.hasNext()) {    if (c2.contains(it.next())) {      return false;    }  }  return true;}  }
class C{  public PageRecord(){  images=Collections.synchronizedMap(new HashMap<ImageInfo,SoftReference<Record>>());}  }
class C{  public LogSegmentMetadata remove(String name){synchronized (logSegments) {    LogSegmentMetadata metadata=logSegments.remove(name);    if (null != metadata) {      lid2LogSegments.remove(metadata.getLedgerId(),metadata);      LOG.debug("Removed log segment ({} : {}) from cache.",name,metadata);    }    return metadata;  }}  }
class C{  public int nextInt(int N,int s,int n){  return nextInt(N,s,n,this.randomGenerator);}  }
class C{  private Scanner(Readable source,Pattern pattern){  assert source != null : "source should not be null";  assert pattern != null : "pattern should not be null";  this.source=source;  delimPattern=pattern;  buf=CharBuffer.allocate(BUFFER_SIZE);  buf.limit(0);  matcher=delimPattern.matcher(buf);  matcher.useTransparentBounds(true);  matcher.useAnchoringBounds(false);  useLocale(Locale.getDefault(Locale.Category.FORMAT));}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  public boolean invert(){  float determinant=determinant();  if (determinant == 0) {    return false;  }  float t00=determinant3x3(m11,m12,m13,m21,m22,m23,m31,m32,m33);  float t01=-determinant3x3(m10,m12,m13,m20,m22,m23,m30,m32,m33);  float t02=determinant3x3(m10,m11,m13,m20,m21,m23,m30,m31,m33);  float t03=-determinant3x3(m10,m11,m12,m20,m21,m22,m30,m31,m32);  float t10=-determinant3x3(m01,m02,m03,m21,m22,m23,m31,m32,m33);  float t11=determinant3x3(m00,m02,m03,m20,m22,m23,m30,m32,m33);  float t12=-determinant3x3(m00,m01,m03,m20,m21,m23,m30,m31,m33);  float t13=determinant3x3(m00,m01,m02,m20,m21,m22,m30,m31,m32);  float t20=determinant3x3(m01,m02,m03,m11,m12,m13,m31,m32,m33);  float t21=-determinant3x3(m00,m02,m03,m10,m12,m13,m30,m32,m33);  float t22=determinant3x3(m00,m01,m03,m10,m11,m13,m30,m31,m33);  float t23=-determinant3x3(m00,m01,m02,m10,m11,m12,m30,m31,m32);  float t30=-determinant3x3(m01,m02,m03,m11,m12,m13,m21,m22,m23);  float t31=determinant3x3(m00,m02,m03,m10,m12,m13,m20,m22,m23);  float t32=-determinant3x3(m00,m01,m03,m10,m11,m13,m20,m21,m23);  float t33=determinant3x3(m00,m01,m02,m10,m11,m12,m20,m21,m22);  m00=t00 / determinant;  m01=t10 / determinant;  m02=t20 / determinant;  m03=t30 / determinant;  m10=t01 / determinant;  m11=t11 / determinant;  m12=t21 / determinant;  m13=t31 / determinant;  m20=t02 / determinant;  m21=t12 / determinant;  m22=t22 / determinant;  m23=t32 / determinant;  m30=t03 / determinant;  m31=t13 / determinant;  m32=t23 / determinant;  m33=t33 / determinant;  return true;}  }
class C{  protected Map<String,String> readMySqlCharsetSystemVariables(AtomicReference<String> sql){  Map<String,String> variables=new HashMap<>();  try (JdbcConnection mysql=jdbc.connect()){    logger.debug("Reading MySQL charset-related system variables before parsing DDL history.");    String statement="SHOW VARIABLES WHERE Variable_name IN ('character_set_server','collation_server')";    if (sql != null)     sql.set(statement);    mysql.query(statement,null);  } catch (  SQLException e) {    throw new ConnectException("Error reading MySQL variables: " + e.getMessage(),e);  }  return variables;}  }
class C{  private void deleteUnprintedLines(){  for (int line=0; line < m_lines.length; line++) {    if (!m_lines[line].isPrinted()) {      String sql="DELETE FROM T_Report WHERE AD_PInstance_ID=" + getAD_PInstance_ID() + " AND PA_ReportLine_ID="+ m_lines[line].getPA_ReportLine_ID();      int no=DB.executeUpdate(sql,get_TrxName());      if (no > 0)       log.fine(m_lines[line].getName() + " - #" + no);    }  }}  }
class C{  public boolean createFullCopyOrchestrationRollbackSteps(URI parentWorkflow,String orchestrationStepId,String token) throws WorkflowException {  _workflowService.rollbackChildWorkflow(parentWorkflow,orchestrationStepId,token);  return true;}  }
class C{  private void restoreArmour(final ItemStack stack,final EntityLivingBase entity){  final NBTTagCompound stackTagCompound=ItemStackUtils.getOrCreateTagCompound(stack);  final NBTTagList replacedArmour=stackTagCompound.getTagList(KEY_REPLACED_ARMOUR,NBT.TAG_COMPOUND);  for (int i=0; i < replacedArmour.tagCount(); i++) {    final NBTTagCompound replacedTagCompound=replacedArmour.getCompoundTagAt(i);    final ItemStack original=ItemStack.loadItemStackFromNBT(replacedTagCompound.getCompoundTag(KEY_STACK));    final EntityEquipmentSlot equipmentSlot=InventoryUtils.getEquipmentSlotFromIndex(replacedTagCompound.getByte(KEY_SLOT));    final ItemStack current=entity.getItemStackFromSlot(equipmentSlot);    final boolean isReplacement=replacementItems.stream().anyMatch(null);    if (original == null) {      if (isReplacement) {        Logger.info("Original item for %s is null, clearing replacement",equipmentSlot);        entity.setItemStackToSlot(equipmentSlot,null);      } else {        Logger.info("Original item for %s is null, leaving current item",equipmentSlot);      }    } else {      Logger.info("Restoring original %s to %s, replacing %s",original,equipmentSlot,current);      if (!isReplacement && entity instanceof EntityPlayer) {        ItemHandlerHelper.giveItemToPlayer((EntityPlayer)entity,current);      }      entity.setItemStackToSlot(equipmentSlot,original);    }  }  stackTagCompound.removeTag(KEY_REPLACED_ARMOUR);  if (stackTagCompound.hasNoTags()) {    stack.setTagCompound(null);  }}  }
class C{  private boolean hasDependencyTo(URI fromUri,URI toUri){  final IN4JSProject fromProject=n4jsCore.findProject(fromUri).orNull();  final IN4JSProject toProject=n4jsCore.findProject(toUri).orNull();  if (null != fromProject && null != toProject) {    if (Objects.equals(fromProject,toProject)) {      return true;    }    for (    IN4JSProject fromProjectDependency : fromProject.getDependenciesAndImplementedApis()) {      if (Objects.equals(fromProjectDependency,toProject) && fromProjectDependency.isExternal() == fromProject.isExternal()) {        return true;      }    }  }  return false;}  }
class C{  @SmallTest public void testNewWakeLock() throws Exception {  PowerManager.WakeLock wl=mPm.newWakeLock(PowerManager.FULL_WAKE_LOCK,"FULL_WAKE_LOCK");  doTestWakeLock(wl);  wl=mPm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK,"SCREEN_BRIGHT_WAKE_LOCK");  doTestWakeLock(wl);  wl=mPm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK,"SCREEN_DIM_WAKE_LOCK");  doTestWakeLock(wl);  wl=mPm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"PARTIAL_WAKE_LOCK");  doTestWakeLock(wl);  doTestSetBacklightBrightness();}  }
class C{  public UniformPair(final T first,final T second){  this.first=first;  this.second=second;}  }
class C{  public int compareTo(ModuleVersion version){  if (version == this)   return 0;  int result=major - version.major;  if (result != 0)   return result;  result=minor - version.minor;  if (result != 0)   return result;  result=micro - version.micro;  if (result != 0)   return result;  return qualifier.compareTo(version.qualifier);}  }
class C{  private static void usage(){  for (  String s : USAGE_MESSAGE) {    System.out.println(s);  }  for (  String s : WELCOME_MESSAGE) {    System.out.println(s);  }}  }
class C{  private void broadcastFinished(String mapName){  try {    Variable.getVariable().setDownloadStatus(Constant.COMPLETE);    for (    MapDownloadListener listener : mapDownloadListeners) {      listener.downloadFinished(mapName);    }    Variable.getVariable().addRecentDownloadedMap(new MyMap(mapName));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public DefaultLocalTransition(State<S,E> source,State<S,E> target,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger){  super(source,target,actions,event,guard,trigger);}  }
class C{  public void lockUI(ProcessInfo pi){  if (m_isLock)   return;  m_isLock=true;  Clients.showBusy(null,true);}  }
class C{  private boolean checkAttribute(String servAlg,String attribute,String val){  String attributeValue=getPropertyIgnoreCase(servAlg + ' ' + attribute);  if (attributeValue != null) {    if (attribute.equalsIgnoreCase("KeySize")) {      if (Integer.parseInt(attributeValue) >= Integer.parseInt(val)) {        return true;      }    } else {      if (attributeValue.equalsIgnoreCase(val)) {        return true;      }    }  }  return false;}  }
class C{  public static String stripTrailing(String s,String substr){  return s.replaceAll("(" + Pattern.quote(substr) + ")+$","");}  }
class C{  public void shutdown(){  log.info("Shutting down CoreContainer instance=" + System.identityHashCode(this));  isShutDown=true;  if (isZooKeeperAware()) {    cancelCoreRecoveries();    zkSys.publishCoresAsDown(solrCores.getCores());  }  try {    coreAdminHandler.shutdown();  } catch (  Exception e) {    log.warn("Error shutting down CoreAdminHandler. Continuing to shutdown CoreContainer.");    e.printStackTrace();  }  try {synchronized (solrCores.getModifyLock()) {      solrCores.getModifyLock().notifyAll();    }    if (backgroundCloser != null) {      try {        backgroundCloser.join();      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        if (log.isDebugEnabled()) {          log.debug("backgroundCloser thread was interrupted before finishing");        }      }    }    solrCores.close();synchronized (solrCores.getModifyLock()) {      solrCores.getModifyLock().notifyAll();    }  }  finally {    try {      if (shardHandlerFactory != null) {        shardHandlerFactory.close();      }    }  finally {      try {        if (updateShardHandler != null) {          updateShardHandler.close();        }      }  finally {        zkSys.close();      }    }  }  org.apache.lucene.util.IOUtils.closeWhileHandlingException(loader);}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  public Transform(){}  }
class C{  @SuppressWarnings(value="unchecked") private void init(){  Annotation[] annotations=_type.getAnnotations();  for (int i=0; i < annotations.length; i++) {    Annotation a=annotations[i];    if (a instanceof Cf) {      _cfName=((Cf)a).value();    } else     if (a instanceof Shards) {      _shardCount=((Shards)a).value();    } else     if (a instanceof CompactionOptimized) {      _compactionOptimized=true;    } else     if (a instanceof BucketGranularity) {      _bucketGranularity=((BucketGranularity)a).value();switch (_bucketGranularity) {case SECOND:        _prefixFormatter=DateTimeFormat.forPattern("yyyyMMddHHmmss-");      break;case MINUTE:    _prefixFormatter=DateTimeFormat.forPattern("yyyyMMddHHmm-");  break;case HOUR:_prefixFormatter=DateTimeFormat.forPattern("yyyyMMddHH-");break;case DAY:_prefixFormatter=DateTimeFormat.forPattern("yyyyMMdd-");break;case MONTH:_prefixFormatter=DateTimeFormat.forPattern("yyyyMM-");break;case YEAR:_prefixFormatter=DateTimeFormat.forPattern("yyyy-");break;}_supportedGranularity=new ArrayList<TimeBucket>();TimeBucket[] buckets=TimeBucket.values();for (int j=0; j < buckets.length; j++) {TimeBucket bucket=buckets[j];if (bucket.ordinal() > _bucketGranularity.ordinal()) {break;}_supportedGranularity.add(bucket);}_supportedGranularity=Collections.unmodifiableList(_supportedGranularity);} else if (a instanceof Ttl) {_ttl=((Ttl)a).value();} else {throw new IllegalArgumentException("Unexpected annotation");}}_cf=new ColumnFamily<String,UUID>(_cfName,StringSerializer.get(),TimeUUIDSerializer.get());try {_timeSeries=_type.newInstance();} catch (Exception e) {throw new IllegalArgumentException(e);}}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    throw new IllegalArgumentException("Expecting exactly one " + "argument, the filename " + "of the file to translate.");  }  try {    File inFile=new File(args[0]);    File outFile=new File(inFile.getName() + ".out");    BufferedReader in=new BufferedReader(new FileReader(inFile));    PrintStream out=new PrintStream(new FileOutputStream(outFile));    new HandleyConvert().convert(in,out);    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean isInstalled(){  ResourcesFragment srf=serverManager.getAsXml();  boolean stagingAppServerExists=srf.resourceExists(hubConfig.stagingHttpName);  boolean finalAppServerExists=srf.resourceExists(hubConfig.finalHttpName);  boolean traceAppServerExists=srf.resourceExists(hubConfig.traceHttpName);  boolean jobAppServerExists=srf.resourceExists(hubConfig.jobHttpName);  boolean appserversOk=(stagingAppServerExists && finalAppServerExists && traceAppServerExists&& jobAppServerExists);  ResourcesFragment drf=databaseManager.getAsXml();  boolean stagingDbExists=drf.resourceExists(hubConfig.stagingDbName);  boolean finalDbExists=drf.resourceExists(hubConfig.finalDbName);  boolean traceDbExists=drf.resourceExists(hubConfig.traceDbName);  boolean jobDbExists=drf.resourceExists(hubConfig.jobDbName);  boolean stagingForestsExist=false;  boolean finalForestsExist=false;  boolean traceForestsExist=false;  boolean jobForestsExist=false;  boolean stagingIndexesOn=false;  boolean finalIndexesOn=false;  boolean traceIndexesOn=false;  boolean jobIndexesOn=false;  if (stagingDbExists) {    Fragment f=databaseManager.getPropertiesAsXml(hubConfig.stagingDbName);    stagingIndexesOn=Boolean.parseBoolean(f.getElementValue("//m:triple-index"));    stagingIndexesOn=stagingIndexesOn && Boolean.parseBoolean(f.getElementValue("//m:collection-lexicon"));    stagingForestsExist=(f.getElements("//m:forest").size() == hubConfig.stagingForestsPerHost);  }  if (finalDbExists) {    Fragment f=databaseManager.getPropertiesAsXml(hubConfig.finalDbName);    finalIndexesOn=Boolean.parseBoolean(f.getElementValue("//m:triple-index"));    finalIndexesOn=finalIndexesOn && Boolean.parseBoolean(f.getElementValue("//m:collection-lexicon"));    finalForestsExist=(f.getElements("//m:forest").size() == hubConfig.finalForestsPerHost);  }  if (traceDbExists) {    traceIndexesOn=true;    Fragment f=databaseManager.getPropertiesAsXml(hubConfig.traceDbName);    traceForestsExist=(f.getElements("//m:forest").size() == hubConfig.traceForestsPerHost);  }  if (jobDbExists) {    jobIndexesOn=true;    Fragment f=databaseManager.getPropertiesAsXml(hubConfig.jobDbName);    jobForestsExist=(f.getElements("//m:forest").size() == hubConfig.jobForestsPerHost);  }  boolean dbsOk=(stagingDbExists && stagingIndexesOn && finalDbExists&& finalIndexesOn&& traceDbExists&& traceIndexesOn&& jobDbExists&& jobIndexesOn);  boolean forestsOk=(stagingForestsExist && finalForestsExist && traceForestsExist&& jobForestsExist);  return (appserversOk && dbsOk && forestsOk);}  }
class C{  public static void buildUnpaidOrderTable(Connection conn){  try {    Statement stmt=conn.createStatement();    stmt.execute("CREATE TABLE UnpaidOrder " + "( CustomerNumber CHAR(10) NOT NULL REFERENCES Customer(CustomerNumber), " + "  ProdNum CHAR(10) NOT NULL REFERENCES Coffee(ProdNum),"+ "  OrderDate CHAR(10),"+ "  Quantity DOUBLE,"+ "  Cost DOUBLE )");  } catch (  SQLException ex) {    System.out.println("ERROR: " + ex.getMessage());  }}  }
class C{  public SymbolTableEntryInternal steFor_$methods(){  return getSymbolTableEntryInternal("$methods",true);}  }
class C{  public FrenchAnalyzer(CharArraySet stopwords,CharArraySet stemExclutionSet){  super(stopwords);  this.excltable=CharArraySet.unmodifiableSet(CharArraySet.copy(stemExclutionSet));}  }
class C{  public synchronized int exportObject(String name,Object obj) throws CannotCompileException {  Class clazz=obj.getClass();  ExportedObject eo=new ExportedObject();  eo.object=obj;  eo.methods=clazz.getMethods();  exportedObjects.addElement(eo);  eo.identifier=exportedObjects.size() - 1;  if (name != null)   exportedNames.put(name,eo);  try {    stubGen.makeProxyClass(clazz);  } catch (  NotFoundException e) {    throw new CannotCompileException(e);  }  return eo.identifier;}  }
class C{  @Override public void connectionOpened(IOFConnectionBackend connection,OFFeaturesReply featuresReply){  DatapathId dpid=connection.getDatapathId();  OFAuxId auxId=connection.getAuxId();  log.debug("{} opened",connection);  if (auxId.equals(OFAuxId.MAIN)) {    OFSwitchHandshakeHandler handler=new OFSwitchHandshakeHandler(connection,featuresReply,this,floodlightProvider.getRoleManager(),floodlightProvider.getTimer());    OFSwitchHandshakeHandler oldHandler=switchHandlers.put(dpid,handler);    if (oldHandler != null) {      log.debug("{} is a new main connection, killing old handler connections",connection);      oldHandler.cleanup();    }    handler.beginHandshake();  } else {    OFSwitchHandshakeHandler handler=switchHandlers.get(dpid);    if (handler != null) {      handler.auxConnectionOpened(connection);    } else {      log.warn("{} arrived before main connection, closing connection",connection);      connection.disconnect();    }  }}  }
class C{  void zSetAllLabelIndicatorColorsToDefaultState(){  labelIndicatorSetColorsToDefaultState(labelMonth);  labelIndicatorSetColorsToDefaultState(labelYear);  labelIndicatorSetColorsToDefaultState(labelSetDateToToday);  labelIndicatorSetColorsToDefaultState(labelClearDate);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  super.startElement(handler,uri,localName,rawName,attributes);  try {    int stylesheetType=handler.getStylesheetType();    Stylesheet stylesheet;    if (stylesheetType == StylesheetHandler.STYPE_ROOT) {      try {        stylesheet=getStylesheetRoot(handler);      } catch (      TransformerConfigurationException tfe) {        throw new TransformerException(tfe);      }    } else {      Stylesheet parent=handler.getStylesheet();      if (stylesheetType == StylesheetHandler.STYPE_IMPORT) {        StylesheetComposed sc=new StylesheetComposed(parent);        parent.setImport(sc);        stylesheet=sc;      } else {        stylesheet=new Stylesheet(parent);        parent.setInclude(stylesheet);      }    }    stylesheet.setDOMBackPointer(handler.getOriginatingNode());    stylesheet.setLocaterInfo(handler.getLocator());    stylesheet.setPrefixes(handler.getNamespaceSupport());    handler.pushStylesheet(stylesheet);    setPropertiesFromAttributes(handler,rawName,attributes,handler.getStylesheet());    handler.pushElemTemplateElement(handler.getStylesheet());  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public void configure(JobConf conf){  this.conf=conf;  this.last=conf.getBoolean("last",false);}  }
class C{  public static boolean hasProblemStatus(Spec spec){  if (spec != null) {    return isProblemStatus(spec.getStatus());  } else {    return false;  }}  }
class C{  public static byte[] toByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  copy(in,out);  return out.toByteArray();}  }
class C{  public int hashCode(){  return map.hashCode();}  }
class C{  public void writeTo(StreamOutput out) throws IOException {  out.writeOptionalString(nodeId);  out.writeByte(state.value);  out.writeOptionalString(reason);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_now_playing);}  }
class C{  Worker(Runnable firstTask){  setState(-1);  this.firstTask=firstTask;  this.thread=getThreadFactory().newThread(this);}  }
class C{  private String join(List<String> list){  StringBuilder sb=new StringBuilder();  for (  String item : list) {    sb.append(item).append("_");  }  return sb.substring(0,sb.length() - 1);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.LOGICAL_OR_EXPRESSION__LEFT_OPERAND:    return getLeftOperand();case ExpressionsPackage.LOGICAL_OR_EXPRESSION__RIGHT_OPERAND:  return getRightOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public SocketRpcController newRpcController(){  return new SocketRpcController();}  }
class C{  private static LocalDate resolvePreviousValid(int year,int month,int day){switch (month) {case 2:    day=Math.min(day,IsoChronology.INSTANCE.isLeapYear(year) ? 29 : 28);  break;case 4:case 6:case 9:case 11:day=Math.min(day,30);break;}return new LocalDate(year,month,day);}  }
class C{  public boolean isMarkRemoteRecipientSeen(){  return fieldMarkRemoteRecipientSeen;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public static final JIPString create(final JIPList string,boolean chars){  return new JIPString(new PString((List)string.getRealTerm(),chars));}  }
class C{  public long put(float key,long value){  long previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  @Override public String toParsableString(Type declaringType,TypeTuple inputTypes,Type outputType){  return declaringType.getName() + ".<get>(" + field.getName()+ ")";}  }
class C{  public ViewSource(Context context,int resId){  super(null);}  }
class C{  public boolean removeEdge(DigraphNode node){  if (!outNodes.contains(node)) {    return false;  }  outNodes.remove(node);  node.inNodes.remove(this);  node.decrementInDegree();  return true;}  }
class C{  @Override public int[] rerankPermutation(Recommendation<U,I> recommendation,int maxLength){  int n=min(maxLength,recommendation.getItems().size());  int[] perm=getBasePerm(n);  Random rnd=new Random();  for (int i=n - 1; i >= 0; i--) {    int index=rnd.nextInt(i + 1);    int a=perm[index];    perm[index]=perm[i];    perm[i]=a;  }  return perm;}  }
class C{  public void noBody() throws IOException {  if (super.size() == 0) {    noBody=true;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public RotateBitmap(Bitmap bitmap){  mBitmap=bitmap;  mRotation=0;}  }
class C{  public void step(){  if (LOG_INSTRUCTIONS) {    if (log.isTraceEnabled()) {      CpuState cpu=Emulator.getProcessor().cpu;      if (!isIdleThread(currentThread) && cpu.pc != 0) {        int address=cpu.pc - 4;        int opcode=Memory.getInstance().read32(address);        log.trace(String.format("Executing %08X %s",address,Decoder.instruction(opcode).disasm(address,opcode)));      }    }  }  if (currentThread != null) {    currentThread.runClocks++;  } else   if (!exitCalled) {    log.error("No ready threads!");  }}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=29 * result + (this.text != null ? this.text.hashCode() : 0);  result=29 * result + (this.font != null ? this.font.hashCode() : 0);  result=29 * result + (this.paint != null ? this.paint.hashCode() : 0);  result=29 * result + (this.backgroundPaint != null ? this.backgroundPaint.hashCode() : 0);  return result;}  }
class C{  public static final boolean isJulianLeapYear(int normalizedJulianYear){  return (normalizedJulianYear % 4) == 0;}  }
class C{  public Instance nearestNeighbour(Instance target) throws Exception {  return (kNearestNeighbours(target,1)).instance(0);}  }
class C{  public Enumeration identities(){  return null;}  }
class C{  public Set<String> findAliases(HGHandle typeHandle){  Set<String> result=new HashSet<String>();  HGSearchResult<String> rs=getAliases().findByValue(graph.getPersistentHandle(typeHandle));  try {    while (rs.hasNext())     result.add(rs.next());    return result;  }  finally {    HGUtils.closeNoException(rs);  }}  }
class C{  @SuppressWarnings("unchecked") private void notifyTextListeners(TextEvent ge){  Vector<TextListener> l;synchronized (this) {    l=(Vector<TextListener>)m_textListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptText(ge);    }  }}  }
class C{  public void deleteContact(Contact contact){  database.delete("Contact","phone = ?",new String[]{contact.getPhone()});  database.close();}  }
class C{  public SMTPResponse(String rawLine){  this(extractCode(rawLine),extractResponse(rawLine));}  }
class C{  public int hashCode(){  return 0;}  }
class C{  @SuppressWarnings("Unchecked") public static Object checkImmutable(String className,String fieldName,Object field){  if (field == null || field instanceof Enum || inImmutableList(field.getClass().getName()))   return field;  if (field instanceof Collection)   return DefaultGroovyMethods.asImmutable((Collection)field);  if (field.getClass().getAnnotation(MY_CLASS) != null)   return field;  final String typeName=field.getClass().getName();  throw new RuntimeException(createErrorMessage(className,fieldName,typeName,"constructing"));}  }
class C{  public ComposedTypeRef basicGetOriginalComposedTypeRef(){  return originalComposedTypeRef;}  }
class C{  public void testConvertFromGraphML(){  setupNetwork();  GraphMLConverter.convertToGraphML(getOutputDirectory() + "network.xml",getOutputDirectory() + "blueprints.graphml");  Graph graph=null;  try {    graph=GraphMLConverter.convertFromGraphML(getOutputDirectory() + "blueprints.graphml");  } catch (  Exception e) {    fail();  }  int nodes=0;  Iterator<Vertex> vertices=graph.getVertices().iterator();  while (vertices.hasNext()) {    vertices.next();    nodes++;  }  assertEquals("Wrong number of nodes.",4,nodes);  int links=0;  Iterator<Edge> edges=graph.getEdges().iterator();  while (edges.hasNext()) {    edges.next();    links++;  }  assertEquals("Wrong number of links.",6,links);}  }
class C{  public final boolean pop(){  return m_values[m_index--];}  }
class C{  private static void intToNetworkByteOrder(int num,byte[] buf,int start,int count){  if (count > 4) {    throw new IllegalArgumentException("Cannot handle more than 4 bytes");  }  for (int i=count - 1; i >= 0; i--) {    buf[start + i]=(byte)(num & 0xff);    num>>>=8;  }}  }
class C{  private boolean checkMirrorProtectionValidPool(StoragePool pool,Map<String,Object> attributeMap){  Integer mirrorValue=(Integer)attributeMap.get(Attributes.max_native_continuous_copies.name());  if (mirrorValue != null && mirrorValue != VirtualPool.MAX_DISABLED) {    String highAvailabilityType=(String)attributeMap.get(Attributes.high_availability_type.name());    if (highAvailabilityType != null && (VirtualPool.HighAvailabilityType.vplex_local.name().equals(highAvailabilityType) || VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(highAvailabilityType))) {      _logger.info("Pool {} is OK, matched with mirror-enabled VPLEX vpool",pool.getLabel());      return true;    }    StringSet copyTypes=pool.getSupportedCopyTypes();    if (copyTypes != null && copyTypes.contains(StoragePool.CopyTypes.SYNC.name())) {      _logger.info("Pool {} is OK, matched with mirror-enabled vpool",pool.getLabel());      return true;    }    _logger.info("Pool {} was not matched with mirror-enabled vpool",pool.getLabel());    return false;  }  return true;}  }
class C{  public static Vec4[] computeExtrema(Vec4 points[]){  if (points == null) {    throw new IllegalArgumentException("Points Array Is Null");  }  if (points.length == 0)   return null;  double xmin=points[0].x;  double ymin=points[0].y;  double zmin=points[0].z;  double xmax=xmin;  double ymax=ymin;  double zmax=zmin;  for (int i=1; i < points.length; i++) {    double x=points[i].x;    if (x > xmax) {      xmax=x;    } else     if (x < xmin) {      xmin=x;    }    double y=points[i].y;    if (y > ymax) {      ymax=y;    } else     if (y < ymin) {      ymin=y;    }    double z=points[i].z;    if (z > zmax) {      zmax=z;    } else     if (z < zmin) {      zmin=z;    }  }  return new Vec4[]{new Vec4(xmin,ymin,zmin),new Vec4(xmax,ymax,zmax)};}  }
class C{  public static String toString(Date date){  String string;synchronized (format) {    string=format.format(date);  }  return string;}  }
class C{  public String toString(){  return this.mode == 'd' ? this.writer.toString() : null;}  }
class C{  public static String replaceAll(String s,String before,String after){  int next=s.indexOf(before);  if (next < 0) {    return s;  }  StringBuilder buff=new StringBuilder(s.length() - before.length() + after.length());  int index=0;  while (true) {    buff.append(s.substring(index,next)).append(after);    index=next + before.length();    next=s.indexOf(before,index);    if (next < 0) {      buff.append(s.substring(index));      break;    }  }  return buff.toString();}  }
class C{  public void testDivideRoundHalfUpNeg2(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=15;  String c="-1E+5";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public WindowWaiter(final INaviView view){  m_view=view;}  }
class C{  static protected long countResults(final RepositoryResult<Statement> result) throws Exception {  try {    long i;    for (i=0; result.hasNext(); i++) {      result.next();    }    return i;  }  finally {    result.close();  }}  }
class C{  public static String htmlQuotes(String str){  str=htmlDoubleQuotes(str);  str=htmlSingleQuotes(str);  return str;}  }
class C{  public static Method findMethod(Class<?> cl,String name,Class<?>[] params){  Method m=null;  boolean notFound=true;  Class<?> currentCl=cl;  while (notFound) {    try {      m=currentCl.getDeclaredMethod(name,params);      notFound=false;    } catch (    Exception e) {      currentCl=currentCl.getSuperclass();      if (currentCl == null) {        notFound=false;        break;      }    }  }  if (null == m) {    Parametric p=new Parametric(cl);    m=p.findMethod(name,params);  }  return (m);}  }
class C{  public void notifyReport(int status,Hashtable<String,String> headers){synchronized (this) {    receivedByteRangeHeader=false;    isNotified=true;    statusCode=status;    String byteRange=headers.get(MsrpConstants.HEADER_BYTE_RANGE);    if (byteRange != null) {      reportedSize=MsrpUtils.getChunkSize(byteRange);      receivedByteRangeHeader=true;    }    super.notify();  }}  }
class C{  public static IndentResult shiftLines(IDocument document,ILineRange lines,IJavaProject project,IndentResult result) throws BadLocationException {  int numberOfLines=lines.getNumberOfLines();  if (numberOfLines < 1)   return new IndentResult(null);  result=reuseOrCreateToken(result,numberOfLines);  result.hasChanged=false;  JavaHeuristicScanner scanner=new JavaHeuristicScanner(document);  JavaIndenter indenter=new JavaIndenter(document,scanner,project);  String current=getCurrentIndent(document,lines.getStartLine());  StringBuffer correct=indenter.computeIndentation(document.getLineOffset(lines.getStartLine()));  if (correct == null)   return result;  int tabSize=CodeFormatterUtil.getTabWidth(project);  StringBuffer addition=new StringBuffer();  int difference=subtractIndent(correct,current,addition,tabSize);  if (difference == 0)   return result;  if (result.leftmostLine == -1)   result.leftmostLine=getLeftMostLine(document,lines,tabSize);  int maxReduction=computeVisualLength(getCurrentIndent(document,result.leftmostLine + lines.getStartLine()),tabSize);  if (difference > 0) {    for (int line=lines.getStartLine(), last=line + numberOfLines, i=0; line < last; line++)     addIndent(document,line,addition,result.commentLinesAtColumnZero,i++);  } else {    int reduction=Math.min(-difference,maxReduction);    for (int line=lines.getStartLine(), last=line + numberOfLines, i=0; line < last; line++)     cutIndent(document,line,reduction,tabSize,result.commentLinesAtColumnZero,i++);  }  result.hasChanged=true;  return result;}  }
class C{  private boolean intersects(Command command0,Command command1){  if (command0.fOffset + command0.fLength <= command1.fOffset || command1.fOffset + command1.fLength <= command0.fOffset)   return (2 * command0.fOffset + command0.fLength) - (2 * command1.fOffset + command1.fLength) == 0;  return true;}  }
class C{  private void checkEqualsIsConsistent(UnknownFieldSet set){  assertEquals(set,set);  UnknownFieldSet copy=UnknownFieldSet.newBuilder(set).build();  assertEquals(set,copy);  assertEquals(copy,set);  assertEquals(set.hashCode(),copy.hashCode());}  }
class C{  public boolean forEachEntry(TObjectIntProcedure<K> procedure){  K[] keys=(K[])_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  protected Object increment(Object value){  return InvokerHelper.invokeMethod(value,"next",null);}  }
class C{  public HashInterner(int expectedElements){  interningMap=new ConcurrentHashMap<>(expectedElements);}  }
class C{  public int available() throws IOException {  int avail=in.available();  return (length < avail) ? length : avail;}  }
class C{  public Instant minus(long duration){  return withDurationAdded(duration,-1);}  }
class C{  public PlaylistV2 load(Path playlistPath){  mLog.info("loading version 2 playlist file [" + playlistPath.toString() + "]");  PlaylistV2 playlist=null;  if (Files.exists(playlistPath)) {    JAXBContext context=null;    InputStream in=null;    try {      in=new FileInputStream(playlistPath.toString());      try {        context=JAXBContext.newInstance(PlaylistV2.class);        Unmarshaller m=context.createUnmarshaller();        playlist=(PlaylistV2)m.unmarshal(in);      } catch (      JAXBException e) {        mLog.error("jaxb exception while loading playlist: ",e);      }    } catch (    Exception e) {      mLog.error("coulcn't open inputstream to load playlist [" + playlistPath.toString() + "]",e);    } finally {      if (in != null) {        try {          in.close();        } catch (        IOException e) {          mLog.error("exception while closing " + "the playlist file inputstream reader",e);        }      }    }  } else {    mLog.info("PlaylistManager - playlist not found at [" + playlistPath.toString() + "]");  }  return playlist;}  }
class C{  public X509Certificate generate(PrivateKey key,String provider,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=tbsGen.generateTBSCertificate();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,provider,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  return generateJcaObject(tbsCert,signature);}  }
class C{  public void show(){  setListSelection(comboBox.getSelectedIndex());  Point location=getPopupLocation();  show(comboBox,location.x,location.y);  list.repaint();}  }
class C{  public void close(){  if (view != null)   view.close();  Window window=getViewWindow();  setView(null);  setViewWindow(null,false,0,0);  if (window == null) {    return;  }  window.setVisible(false);  window.dispose();}  }
class C{  private void applyDefinitionsDocumentExtension(Context context){  for (  DefinitionsDocumentExtension extension : extensionRegistry.getDefinitionsDocumentExtensions()) {    extension.apply(context);  }}  }
class C{  @Override public boolean add(CandidateHarvester harvester){synchronized (elements) {    for (    CandidateHarvesterSetElement element : elements)     if (element.harvesterEquals(harvester))     return false;    elements.add(new CandidateHarvesterSetElement(harvester));    return true;  }}  }
class C{  public CEventTable(final CEventTableModel model){  super(model,new CEventTableHelp());  m_model=model;}  }
class C{  public Node(Coordinate pt,DirectedEdgeStar deStar){  this.pt=pt;  this.deStar=deStar;}  }
class C{  public void checkLearnerCapabilities(Operator learningOperator,ExampleSet exampleSet) throws OperatorException {  try {    if (Tools.containsValueType(exampleSet,Ontology.NOMINAL)) {      if (Tools.containsValueType(exampleSet,Ontology.BINOMINAL)) {        if (!capabilityProvider.supportsCapability(OperatorCapability.BINOMINAL_ATTRIBUTES)) {          throw new UserError(learningOperator,501,learningOperator.getName(),OperatorCapability.BINOMINAL_ATTRIBUTES.getDescription());        }      } else {        if (!capabilityProvider.supportsCapability(OperatorCapability.POLYNOMINAL_ATTRIBUTES)) {          throw new UserError(learningOperator,501,learningOperator.getName(),OperatorCapability.POLYNOMINAL_ATTRIBUTES.getDescription());        }      }    }    if ((Tools.containsValueType(exampleSet,Ontology.NUMERICAL)) && !capabilityProvider.supportsCapability(OperatorCapability.NUMERICAL_ATTRIBUTES)) {      throw new UserError(learningOperator,501,learningOperator.getName(),OperatorCapability.NUMERICAL_ATTRIBUTES.getDescription());    }    Attribute labelAttribute=exampleSet.getAttributes().getLabel();    if (labelAttribute != null) {      if (labelAttribute.isNominal()) {        if (labelAttribute.getMapping().size() == 1) {          if (!(capabilityProvider.supportsCapability(OperatorCapability.ONE_CLASS_LABEL))) {            throw new UserError(learningOperator,502,learningOperator.getName());          }        } else {          if (labelAttribute.getMapping().size() == 2) {            if (!capabilityProvider.supportsCapability(OperatorCapability.BINOMINAL_LABEL)) {              throw new UserError(learningOperator,501,learningOperator.getName(),OperatorCapability.BINOMINAL_LABEL.getDescription());            }          } else {            if (!capabilityProvider.supportsCapability(OperatorCapability.POLYNOMINAL_LABEL)) {              throw new UserError(learningOperator,501,learningOperator.getName(),OperatorCapability.POLYNOMINAL_LABEL.getDescription());            }          }        }      } else {        if (labelAttribute.isNumerical() && !capabilityProvider.supportsCapability(OperatorCapability.NUMERICAL_LABEL)) {          throw new UserError(learningOperator,501,learningOperator.getName(),OperatorCapability.NUMERICAL_LABEL.getDescription());        }      }    } else {      if (!(capabilityProvider.supportsCapability(OperatorCapability.NO_LABEL))) {        throw new UserError(learningOperator,501,learningOperator.getName(),OperatorCapability.NO_LABEL.getDescription());      }    }  } catch (  UserError e) {    if (onlyWarn) {      learningOperator.logWarning(e.getMessage());    } else {      throw e;    }  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(who.getName());  sb.append(':');  for (  AclEntryPermission perm : perms) {    sb.append(perm.name());    sb.append('/');  }  sb.setLength(sb.length() - 1);  sb.append(':');  if (!flags.isEmpty()) {    for (    AclEntryFlag flag : flags) {      sb.append(flag.name());      sb.append('/');    }    sb.setLength(sb.length() - 1);    sb.append(':');  }  sb.append(type.name());  return sb.toString();}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  @Override public void load(Element element,Object o){  log.error("Unexpected call of load(Element, Object)");}  }
class C{  private void validateSourceURL(){  if (sourceURL.startsWith(mergeTarget.getURL())) {    view.setError("Cannot merge directory itself");    view.enableMergeButton(false);    return;  }  if (mergeTarget.getURL().startsWith(sourceURL)) {    view.setError("Cannot merge with parent directory");    view.enableMergeButton(false);    return;  }  view.setError(null);  view.enableMergeButton(true);}  }
class C{  CryptoPermissionCollection(){  permissions=new Vector<Permission>(3);}  }
class C{  public static void addMultCol(Matrix A,int j,int start,int to,double t,double[] c){  for (int i=start; i < to; i++)   A.increment(i,j,c[i] * t);}  }
class C{  public static DoubleMatrix1D abs(DoubleMatrix1D A){  return A.assign(F.abs);}  }
class C{  private void write(IRTMPEvent event,int streamId){  final Header header=new Header();  final Packet packet=new Packet(header,event);  header.setChannelId(id);  header.setTimer(event.getTimestamp());  header.setStreamId(streamId);  header.setDataType(event.getDataType());  connection.write(packet);}  }
class C{  public FloatArrayDataRow(float[] data){  this.data=data;}  }
class C{  private final void initMatrix(){  log.info("  init matrix...");  Set<Id> zids=new HashSet<Id>();  for (  Id zid : l2zMapping.values()) {    zids.add(zid);  }  matrix.clear();  for (  Id fzone : zids) {    for (    Id tzone : zids) {      String key=fzone.toString() + "," + tzone.toString();      matrix.put(key,"");    }  }  log.info("  done.");}  }
class C{  public void testGetContentDataService(){  System.out.println("getContentDataService");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  ContentDataService result=instance.getContentDataService();  assertEquals(mockContentDataService,result);  setVerifyMode();}  }
class C{  private void doRemoveMapping(String user,String domain,String mapping) throws RecipientRewriteTableException {  Connection conn=null;  PreparedStatement mappingStmt=null;  try {    conn=dataSource.getConnection();    mappingStmt=conn.prepareStatement(sqlQueries.getSqlString("deleteMapping",true));    ResultSet mappingRS=null;    try {      mappingStmt.setString(1,user);      mappingStmt.setString(2,domain);      mappingStmt.setString(3,mapping);      if (mappingStmt.executeUpdate() < 1) {        throw new RecipientRewriteTableException("Mapping not found");      }    }  finally {      theJDBCUtil.closeJDBCResultSet(mappingRS);    }  } catch (  SQLException sqle) {    getLogger().error("Error accessing database",sqle);  } finally {    theJDBCUtil.closeJDBCStatement(mappingStmt);    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  private void zipDir(ZipOutputStream zos,String pathInZip,File dir) throws IOException {  String[] elementArray=dir.list();  for (int i=0; i < elementArray.length; i++) {    File file=new File(dir,elementArray[i]);    if (file.isDirectory()) {      zipDir(zos,pathInZip + File.separator + elementArray[i],file);    } else {      zipFile(zos,pathInZip + File.separator + elementArray[i],file);    }  }}  }
class C{  private Scenario createScenario(){  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  this.id1=Id.create("1",Node.class);  this.id2=Id.create("2",Node.class);  this.linkId1=Id.create("1",Link.class);  this.personId1=Id.create("1",Vehicle.class);  Network net=sc.getNetwork();  NetworkFactory nf=sc.getNetwork().getFactory();  Node n1=nf.createNode(id1,new Coord((double)0,(double)0));  net.addNode(n1);  Node n2=nf.createNode(id2,new Coord((double)500,(double)0));  net.addNode(n2);  Link l=nf.createLink(this.linkId1,n1,n2);  net.addLink(l);  l.setLength(600.0);  l.setCapacity(3600);  l.setFreespeed(6.0);  return sc;}  }
class C{  public boolean isTranspositions(){  return transpositions;}  }
class C{  private boolean remoteUpdatePoi(final Poi poi,String changeSetId){  Backend.UpdateResult updateResult=backend.updatePoi(poi,changeSetId);  poiManager.deleteOldPoiAssociated(poi);switch (updateResult.getStatus()) {case SUCCESS:    poi.setVersion(updateResult.getVersion());  poi.setUpdated(false);poiManager.savePoi(poi);return true;case FAILURE_CONFLICT:bus.post(new SyncConflictingNodeErrorEvent(poi.getName(),poi.getId()));Timber.e("Couldn't update poi %s: conflict, redownloading last version of poi",poi);deleteAndRetrieveUnmodifiedPoi(poi);return false;case FAILURE_NOT_EXISTING:Timber.e("Couldn't update poi %s, it didn't exist. Deleting the incriminated poi",poi);poiManager.deletePoi(poi);bus.post(new SyncConflictingNodeErrorEvent(poi.getName(),poi.getId()));return false;case FAILURE_UNKNOWN:default :Timber.e("Couldn't update poi %s. Deleting the incriminated poi",poi);poiManager.deletePoi(poi);bus.post(new SyncUploadRetrofitErrorEvent(poi.getId()));return false;}}  }
class C{  long lowMask(){  return _lowMask;}  }
class C{  static public IActivityManager asInterface(IBinder obj){  if (obj == null) {    return null;  }  IActivityManager in=(IActivityManager)obj.queryLocalInterface(descriptor);  if (in != null) {    return in;  }  return new ActivityManagerProxy(obj);}  }
class C{  public void close(){  isClosing.countDown();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double slopeX;  double slopeY;  double val;  String filterSize="3 x 3";  int numPixelsInFilter;  boolean reflectAtBorders=false;  int[] dX;  int[] dY;  double[] maskX;  double[] maskY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSize=args[i];    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (filterSize.endsWith("3 x 3")) {      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      maskX=new double[]{1,2,1,0,-1,-2,-1,0};      maskY=new double[]{1,0,-1,-2,-1,0,1,2};    } else {      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};      maskX=new double[]{2,1,0,-1,-2,3,2,0,-2,-3,4,3,0,-3,-4,3,2,0,-2,-3,2,1,0,-1,-2};      maskY=new double[]{2,3,4,3,2,1,2,3,2,1,0,0,0,0,0,-1,-2,-3,-2,-1,-2,-3,-4,-3,-2};    }    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          slopeX=0;          slopeY=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val == noData) {              val=z;            }            slopeX+=val * maskX[a];            slopeY+=val * maskY[a];          }          val=Math.sqrt(slopeX * slopeX + slopeY * slopeY);          outputFile.setValue(row,col,val);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MWMStrategyDetail[").append(get_ID()).append("]");  return sb.toString();}  }
class C{  public boolean open_nesting(){  return soot.PhaseOptions.getBoolean(options,"open-nesting");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.STEP__COMMENT:    setComment((String)newValue);  return;case SexecPackage.STEP__CALLER:getCaller().clear();getCaller().addAll((Collection<? extends Call>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public double length(){  double result=0d;  if (nodes != null) {    for (int i=0; i < (nodes.size() - 1); i++) {      result=result + GeoMath.haversineDistance(nodes.get(i).getLon() / 1E7D,nodes.get(i).getLat() / 1E7D,nodes.get(i + 1).getLon() / 1E7D,nodes.get(i + 1).getLat() / 1E7D);    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.573 -0500",hash_original_method="DECBD44E3008758FDC051E0FB454F22B",hash_generated_method="9D096511C0BF9614F763EFCCD40CBA9A") @DSVerified @DSSafe(DSCat.CALLBACK_INVOKE) public void addProtocolCommandListener(ProtocolCommandListener listener){  __listeners.addListener(listener);  if (listener != null) {    fireCommandSent("<proto-command>","<proto-message>");    fireReplyReceived(DSUtils.FAKE_INT,"<reply-received-msg>");  }}  }
class C{  private void addCMTDataSourceAndLinkToXa(){  buffer.append("    class='com.evermind.sql.OrionCMTDataSource' \n ");  buffer.append("    xa-source-location='").append(ds.getJndiLocation()).append("Provided").append("' \n");}  }
class C{  @CanIgnoreReturnValue public static long copy(ReadableByteChannel from,WritableByteChannel to) throws IOException {  checkNotNull(from);  checkNotNull(to);  if (from instanceof FileChannel) {    FileChannel sourceChannel=(FileChannel)from;    long oldPosition=sourceChannel.position();    long position=oldPosition;    long copied;    do {      copied=sourceChannel.transferTo(position,ZERO_COPY_CHUNK_SIZE,to);      position+=copied;      sourceChannel.position(position);    } while (copied > 0 || position < sourceChannel.size());    return position - oldPosition;  }  ByteBuffer buf=ByteBuffer.wrap(createBuffer());  long total=0;  while (from.read(buf) != -1) {    buf.flip();    while (buf.hasRemaining()) {      total+=to.write(buf);    }    buf.clear();  }  return total;}  }
class C{  public static VrpPathWithTravelData calcAndCreatePath(Link fromLink,Link toLink,double departureTime,LeastCostPathCalculator router,TravelTime travelTime){  Path path=null;  if (fromLink != toLink) {    path=router.calcLeastCostPath(fromLink.getToNode(),toLink.getFromNode(),departureTime + 1,null,null);  }  return VrpPaths.createPath(fromLink,toLink,departureTime,path,travelTime);}  }
class C{  public AppConfigBase(){}  }
class C{  protected void doStateDancing(){  dancingTime--;  if (dancingTime <= 0) {    setState(State.inHiveWithInfo);  }  goInHive();}  }
class C{  public final int beginLine(){  return this.bLine;}  }
class C{  @Override protected void drawIcon(DrawContext dc){  boolean matrixPushed=false;  GL2 gl=dc.getGL().getGL2();  try {    if (this.rotation != null) {      gl.glPushMatrix();      gl.glRotated(this.rotation.degrees,0,0,1);      matrixPushed=true;    }    gl.glDisable(GL.GL_DEPTH_TEST);    super.drawIcon(dc);  }  finally {    gl.glEnable(GL.GL_DEPTH_TEST);    if (matrixPushed)     gl.glPopMatrix();  }}  }
class C{  private static boolean matchNaN(byte[] str,byte firstchar,int start,int end){  final int len=end - start;  if (len < 2 || len > 3) {    return false;  }  if (firstchar != 'N' && firstchar != 'n') {    return false;  }  final byte c1=str[start + 1];  if (c1 != 'a' && c1 != 'A') {    return false;  }  if (len == 2) {    return true;  }  final byte c2=str[start + 2];  if (c2 != 'N' && c2 != 'n') {    return false;  }  return true;}  }
class C{  public final synchronized void goNode(Node node){  if (node == null)   return;  if (!game.goNode(node))   return;  if (!humansTurn()) {    if (game.getLastMove() != null) {      game.undoMove();      if (!humansTurn())       game.redoMove();    }  }  abortSearch();  updateComputeThreads();  setSelection();  updateGUI();}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("dqsetup") @Valid DQSetupInfo dqSetupInfo,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    LOGGER.debug("Listing DQ properties on page  " + dqSetupInfo.getPage());    List<Properties> propertiesList=dataQualityDAO.updateDQSetup(dqSetupInfo);    LOGGER.debug("properties contain" + propertiesList.size() + "objects");    DQSetupInfo dqSetup=new DQSetupInfo();    List<DQSetupInfo> dqSetups=new ArrayList<DQSetupInfo>();    int count=0;    int i=0;    for (    Properties properties : propertiesList) {      if (count % 5 == 0) {        dqSetups.add(i,new DQSetupInfo());      }      if (properties.getKey().equals(dqSetup.getRulesUserName())) {        dqSetups.get(i).setRulesUserNameValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getRulesPassword())) {        dqSetups.get(i).setRulesPasswordValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getRulesPackage())) {        dqSetups.get(i).setRulesPackageValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getFileDelimiterRegex())) {        dqSetups.get(i).setFileDelimiterRegexValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getMinPassThresholdPercent())) {        dqSetups.get(i).setMinPassThresholdPercentValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getProcessName())) {        dqSetups.get(i).setProcessName(properties.getValue());      }      if (count % 5 == 0) {        LOGGER.debug("The value of if statement is : " + count);        dqSetups.get(i).setDescription(properties.getDescription());        dqSetups.get(i).setParentProcessId(properties.getParentProcessId());        dqSetups.get(i).setSubProcessId(properties.getSubProcessId());        dqSetups.get(i).setCounter(properties.getCounter());        i++;      }    }    restWrapper=new RestWrapper(dqSetups,RestWrapper.OK);    LOGGER.info(RECORDWITHID + dqSetupInfo.getParentProcessId() + " updated in DQSetup by User:"+ principal.getName()+ dqSetupInfo);  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private static void trace(String msg){  if (debug) {    System.err.println("###RowSets: " + msg);  }}  }
class C{  private void createCache(Properties props) throws Exception {  DistributedSystem ds=getSystem(props);  cache=CacheFactory.create(ds);  assertNotNull(cache);}  }
class C{  public static void addNewNode(final Document doc,final XmlEntity xmlEntity) throws IOException, XPathExpressionException, SAXException, ParserConfigurationException {  final LinkedHashMap<String,CacheElement> elementOrderMap=CacheElement.buildElementMap(doc);  final Node newNode=createNode(doc,xmlEntity.getXmlDefinition());  final Node root=doc.getDocumentElement();  final int incomingElementOrder=getElementOrder(elementOrderMap,xmlEntity.getNamespace(),xmlEntity.getType());  boolean nodeAdded=false;  NodeList nodes=root.getChildNodes();  final int length=nodes.getLength();  for (int i=0; i < length; i++) {    final Node node=nodes.item(i);    if (node instanceof Element) {      final Element childElement=(Element)node;      final String type=childElement.getLocalName();      final String namespace=childElement.getNamespaceURI();      if (namespace.equals(xmlEntity.getNamespace()) && type.equals(xmlEntity.getType())) {        String nameOrId=getAttribute(childElement,"name");        if (nameOrId == null) {          nameOrId=getAttribute(childElement,"id");        }        if (nameOrId != null) {          if (nameOrId.equals(xmlEntity.getNameOrId())) {            root.replaceChild(newNode,node);            nodeAdded=true;            break;          }        } else {          if (!isMultiple(elementOrderMap,namespace,type)) {            root.replaceChild(newNode,node);            nodeAdded=true;            break;          }        }      } else {        if (incomingElementOrder < getElementOrder(elementOrderMap,namespace,type)) {          root.insertBefore(newNode,node);          nodeAdded=true;          break;        }      }    }  }  if (!nodeAdded) {    root.appendChild(newNode);  }}  }
class C{  public StateData(S state,boolean initial){  this(null,null,state,null,null,null,initial);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.012 -0500",hash_original_method="72BC4C8EEC8B936DCFF970785A880F0C",hash_generated_method="1C27BAF01D2DC6F38A59C65D34552DA5") public static SimpleBigDecimal approximateDivisionByN(BigInteger k,BigInteger s,BigInteger vm,byte a,int m,int c){  int _k=(m + 5) / 2 + c;  BigInteger ns=k.shiftRight(m - _k - 2 + a);  BigInteger gs=s.multiply(ns);  BigInteger hs=gs.shiftRight(m);  BigInteger js=vm.multiply(hs);  BigInteger gsPlusJs=gs.add(js);  BigInteger ls=gsPlusJs.shiftRight(_k - c);  if (gsPlusJs.testBit(_k - c - 1)) {    ls=ls.add(ECConstants.ONE);  }  return new SimpleBigDecimal(ls,c);}  }
class C{  public void resume(String id){  try {    suspendedStateLock.lock();    TraceState ts=suspendedState.get(id);    if (ts != null) {      clearExpire(ts);      if (log.isLoggable(Level.FINEST)) {        log.finest("Resume trace state = " + ts + " id = "+ id);      }      if (traceState.get() != null && log.isLoggable(Level.FINEST)) {        log.finest("WARNING: Overwriting previous trace state = " + traceState.get());      }      traceState.set(ts);      suspendedState.remove(id);    }  }  finally {    suspendedStateLock.unlock();  }}  }
class C{  private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {  int start=position;  StringBuilder result=null;  if (returnText && text != null) {    result=new StringBuilder();    result.append(text);  }  search:   while (true) {    if (position + delimiter.length > limit) {      if (start < position && returnText) {        if (result == null) {          result=new StringBuilder();        }        result.append(buffer,start,position - start);      }      if (!fillBuffer(delimiter.length)) {        checkRelaxed(UNEXPECTED_EOF);        type=COMMENT;        return null;      }      start=position;    }    for (int i=0; i < delimiter.length; i++) {      if (buffer[position + i] != delimiter[i]) {        position++;        continue search;      }    }    break;  }  int end=position;  position+=delimiter.length;  if (!returnText) {    return null;  } else   if (result == null) {    return stringPool.get(buffer,start,end - start);  } else {    result.append(buffer,start,end - start);    return result.toString();  }}  }
class C{  public static boolean isCallingClassReflectionAvailable(){  return true;}  }
class C{  @Override public void close(){  try {    super.close();    if (this.socket != null) {      this.socket.close();      this.socket=null;    }  } catch (  Exception e) {    getErrorManager().error("Exception occurred when closing the socket handler",e,ErrorManager.CLOSE_FAILURE);  }}  }
class C{  public static boolean isIdentifyingAssociation(@NotNull DBRProgressMonitor monitor,@NotNull DBSEntityAssociation association) throws DBException {  if (!(association instanceof DBSEntityReferrer)) {    return false;  }  final DBSEntityReferrer referrer=(DBSEntityReferrer)association;  final DBSEntity refEntity=association.getAssociatedEntity();  final DBSEntity ownerEntity=association.getParentObject();  assert ownerEntity != null;  if (refEntity == ownerEntity) {    return false;  }  List<DBSEntityAttribute> ownAttrs=getEntityAttributes(monitor,referrer);  Collection<? extends DBSEntityConstraint> constraints=ownerEntity.getConstraints(monitor);  if (constraints != null) {    boolean hasPrimaryKey=false;    for (    DBSEntityConstraint constraint : constraints) {      if (constraint.getConstraintType() == DBSEntityConstraintType.PRIMARY_KEY) {        hasPrimaryKey=true;        break;      }    }    for (    DBSEntityConstraint constraint : constraints) {      if (constraint instanceof DBSEntityReferrer && ((hasPrimaryKey && constraint.getConstraintType() == DBSEntityConstraintType.PRIMARY_KEY) || (!hasPrimaryKey && constraint.getConstraintType().isUnique()))) {        List<DBSEntityAttribute> constAttrs=getEntityAttributes(monitor,(DBSEntityReferrer)constraint);        boolean included=true;        for (        DBSEntityAttribute attr : ownAttrs) {          if (!constAttrs.contains(attr)) {            included=false;            break;          }        }        if (included) {          return true;        }      }    }  }  return false;}  }
class C{  public static String encryptName(final String logMask){  final byte[] key=Keys.self().getChallengeKey();  return Encryption.encryptName(logMask,key[0]);}  }
class C{  private static int CallIntMethodA(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallIntMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Int,false);  return Reflection.unwrapInt(returnObj);}  }
class C{  public static final void addCredentials(String username,String password,String host){  clearHostCredentials(host);  if (username != null && username.trim().length() != 0) {    Log.i(t,"adding credential for host: " + host + " username:"+ username);    Credentials c=new UsernamePasswordCredentials(username,password);    addCredentials(c,host);  }}  }
class C{  public static void permute(int[] array){synchronized (random) {    random.permute(array);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void fill(Object[] a,int fromIndex,int toIndex,Object val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public void deviceAliasName(String alias,String pwwn,boolean remove) throws NetworkDeviceControllerException {  if (lastPrompt != SSHPrompt.MDS_CONFIG_DEVICE_ALIAS) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG_DEVICE_ALIAS.toString());  }  String invalidCommand=MDSDialogProperties.getString("MDSDialog.invalidCommand");  String illegalName=MDSDialogProperties.getString("MDSDialog.deviceAlias.illegal.name");  String notPresent=MDSDialogProperties.getString("MDSDialog.not.present");  String alreadyPresent=MDSDialogProperties.getString("MDSDialog.already.present");  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG_DEVICE_ALIAS};  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.config.deviceAliasName.cmd"),alias,pwwn);  if (remove) {    payload=MDSDialogProperties.getString("MDSDialog.zoneNameVsan.no.cmd") + " " + payload;  }  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  for (  String line : lines) {    if (line.indexOf(invalidCommand) >= 0 || ((!remove && line.indexOf(illegalName) >= 0) || line.indexOf(notPresent) >= 0 || line.indexOf(alreadyPresent) >= 0)) {      throw new NetworkDeviceControllerException(line + ": " + alias);    }  }}  }
class C{  public static Boolean toBoolean(String str) throws PageException {  return toBooleanValue(str) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static boolean isConstantAttribute(String attributeValue){  if (attributeValue.length() > 0) {    return !FlexibleStringExpander.containsExpression(FlexibleStringExpander.getInstance(attributeValue));  }  return true;}  }
class C{  public static <T>List<T> toList(T obj1,T obj2,T obj3,T obj4,T obj5,T obj6){  List<T> list=new LinkedList<T>();  list.add(obj1);  list.add(obj2);  list.add(obj3);  list.add(obj4);  list.add(obj5);  list.add(obj6);  return list;}  }
class C{  public static Document parse(Reader reader) throws SAXException, IOException, ParserConfigurationException {  return parse(reader,false,true);}  }
class C{  public final boolean isLoaded(){  checkIsMapped();  long address=block.toLong();  long size=block.getSize();  if (size == 0) {    return true;  }  try {    int pageSize=(int)Libcore.os.sysconf(_SC_PAGE_SIZE);    int pageOffset=(int)(address % pageSize);    address-=pageOffset;    size+=pageOffset;    int pageCount=(int)((size + pageSize - 1) / pageSize);    byte[] vector=new byte[pageCount];    Libcore.os.mincore(address,size,vector);    for (int i=0; i < vector.length; ++i) {      if ((vector[i] & 1) != 1) {        return false;      }    }    return true;  } catch (  ErrnoException errnoException) {    return false;  }}  }
class C{  boolean remove(BinarySearchTreeNode<E> node){  if (node == null)   return false;  if (this.root == null)   return false;  if (this.contains(node)) {    this.removeNode(node);    return true;  }  return false;}  }
class C{  LoggingThreadGroup(final String name,final InternalLogWriter logWriter){  super(name);  this.logWriter=logWriter;}  }
class C{  static int difference(StringEncoder encoder,String s1,String s2) throws EncoderException {  return differenceEncoded(encoder.encode(s1),encoder.encode(s2));}  }
class C{  public static UdaDefinitionRowModel convertVoUdaDefinitionToRowModel(VOUdaDefinition voUdaDefinition){  ArgumentValidator.notNull("VOUdaDefinition",voUdaDefinition);  UdaDefinitionRowModel udaModel=new UdaDefinitionRowModel();  udaModel.setDefaultValue(voUdaDefinition.getDefaultValue());  udaModel.setUdaId(voUdaDefinition.getUdaId());  udaModel.setKey(voUdaDefinition.getKey());  udaModel.setVersion(voUdaDefinition.getVersion());  if (voUdaDefinition.getConfigurationType().equals(UdaConfigurationType.USER_OPTION_MANDATORY)) {    udaModel.setMandatory(true);    udaModel.setUserOption(true);  } else   if (voUdaDefinition.getConfigurationType().equals(UdaConfigurationType.USER_OPTION_OPTIONAL)) {    udaModel.setMandatory(false);    udaModel.setUserOption(true);  } else   if (voUdaDefinition.getConfigurationType().equals(UdaConfigurationType.SUPPLIER)) {    udaModel.setMandatory(false);    udaModel.setUserOption(false);  }  return udaModel;}  }
class C{  public GridTupleV(Object... vals){  this.vals=vals;}  }
class C{  public boolean makeReflective(String clazz,String metaobject,String metaclass) throws CannotCompileException, NotFoundException {  return reflection.makeReflective(clazz,metaobject,metaclass);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static final boolean isSegmentNearRadialRegion(GeoSegment segment,Geo rCenter,double rRadius,double near){  Geo[] s=segment.getSeg();  if (s != null && s.length == 2) {    return isSegmentNearRadialRegion(s[0],s[1],rCenter,rRadius,near);  }  return false;}  }
class C{  public ComplexBuffer filter(RealBuffer buffer){  return new ComplexBuffer(filter(buffer.getSamples()));}  }
class C{  public CharCharMap clone(){  char[] k=new char[key.length], v=new char[value.length];  System.arraycopy(key,0,k,0,key.length);  System.arraycopy(value,0,v,0,value.length);  return new CharCharMap(k,v,f);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 36) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public int transform(CtClass clazz,int pos,CodeIterator iterator,ConstPool cp) throws CannotCompileException {  int index;  int c=iterator.byteAt(pos);  if (c == NEW) {    index=iterator.u16bitAt(pos + 1);    if (cp.getClassInfo(index).equals(classname)) {      if (iterator.byteAt(pos + 3) != DUP)       throw new CannotCompileException("NEW followed by no DUP was found");      if (newClassIndex == 0)       newClassIndex=cp.addClassInfo(newClassName);      iterator.write16bit(newClassIndex,pos + 1);      ++nested;    }  } else   if (c == INVOKESPECIAL) {    index=iterator.u16bitAt(pos + 1);    int typedesc=cp.isConstructor(classname,index);    if (typedesc != 0 && nested > 0) {      int nt=cp.getMethodrefNameAndType(index);      if (newMethodNTIndex != nt) {        newMethodNTIndex=nt;        newMethodIndex=cp.addMethodrefInfo(newClassIndex,nt);      }      iterator.write16bit(newMethodIndex,pos + 1);      --nested;    }  }  return pos;}  }
class C{  public boolean isValid(INode n){  FreeCellNode state=(FreeCellNode)n;  Column col=state.cols[nth];  if (col.num == 0)   return false;  card=col.cards[col.num - 1];  suit=(short)(((card - 1) % 4));  rank=(short)(1 + ((card - 1) >> 2));  if (rank == 1) {    return true;  } else {    return (state.foundationEncoding[suit] + 1 == rank);  }}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public static HTTPResponse head(URL url,String username,String password,long timeout,boolean redirect,String charset,String useragent,ProxyData proxy,lucee.commons.net.http.Header[] headers) throws IOException {  HttpHead head=new HttpHead(url.toExternalForm());  return _invoke(url,head,username,password,timeout,redirect,charset,useragent,proxy,headers,null);}  }
class C{  public WorldMapLayer(){  this.setOpacity(0.6);  this.setIconFilePath(Configuration.getStringValue(AVKey.WORLD_MAP_IMAGE_PATH));}  }
class C{  public void addBlock(IBlobHandler handler,int x,int y,int z){  addBlock(handler,new BlockPosition(x,y,z));}  }
class C{  public static NodeIterator selectNodeIterator(Node contextNode,String str) throws TransformerException {  return selectNodeIterator(contextNode,str,contextNode);}  }
class C{  protected void initInfo(int record_id,String value){  for (int i=0; i < s_Layout.length; i++) {    if (s_Layout[i].getIDcolSQL().indexOf("AD_User_ID") != -1)     m_AD_User_ID_index=i;    if (s_Layout[i].getIDcolSQL().indexOf("C_BPartner_Location_ID") != -1)     m_C_BPartner_Location_ID_index=i;  }  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {      if (!value.matches(".*\\D+.*"))       fieldValue.setText(value); else       fieldName.setText(value);    } else {      String bp=Env.getContext(Env.getCtx(),p_WindowNo,"C_BPartner_ID");      if (bp != null && bp.length() != 0) {        fieldID=new Integer(bp).intValue();      }    }  }}  }
class C{  public static String readBcdNumber(InputStream is,int length) throws IOException {  byte[] arr=new byte[length];  is.read(arr,0,length);  return readBcdNumber(arr,0,length);}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  while ((mByteToSkip > 0 || mByteToCopy > 0 || mState != STATE_JPEG_DATA) && length > 0) {    if (mByteToSkip > 0) {      int byteToProcess=length > mByteToSkip ? mByteToSkip : length;      length-=byteToProcess;      mByteToSkip-=byteToProcess;      offset+=byteToProcess;    }    if (mByteToCopy > 0) {      int byteToProcess=length > mByteToCopy ? mByteToCopy : length;      out.write(buffer,offset,byteToProcess);      length-=byteToProcess;      mByteToCopy-=byteToProcess;      offset+=byteToProcess;    }    if (length == 0) {      return;    }switch (mState) {case STATE_SOI:      int byteRead=requestByteToBuffer(2,buffer,offset,length);    offset+=byteRead;  length-=byteRead;if (mBuffer.position() < 2) {  return;}mBuffer.rewind();if (mBuffer.getShort() != JpegHeader.SOI) {throw new IOException("Not a valid jpeg image, cannot write exif");}out.write(mBuffer.array(),0,2);mState=STATE_FRAME_HEADER;mBuffer.rewind();writeExifData();break;case STATE_FRAME_HEADER:byteRead=requestByteToBuffer(4,buffer,offset,length);offset+=byteRead;length-=byteRead;if (mBuffer.position() == 2) {short tag=mBuffer.getShort();if (tag == JpegHeader.EOI) {out.write(mBuffer.array(),0,2);mBuffer.rewind();}}if (mBuffer.position() < 4) {return;}mBuffer.rewind();short marker=mBuffer.getShort();if (marker == JpegHeader.APP1) {mByteToSkip=(mBuffer.getShort() & 0x0000ffff) - 2;mState=STATE_JPEG_DATA;} else if (!JpegHeader.isSofMarker(marker)) {out.write(mBuffer.array(),0,4);mByteToCopy=(mBuffer.getShort() & 0x0000ffff) - 2;} else {out.write(mBuffer.array(),0,4);mState=STATE_JPEG_DATA;}mBuffer.rewind();}}if (length > 0) {out.write(buffer,offset,length);}}  }
class C{  private LineString computeLine(LinearLocation start,LinearLocation end){  Coordinate[] coordinates=line.getCoordinates();  CoordinateList newCoordinates=new CoordinateList();  int startSegmentIndex=start.getSegmentIndex();  if (start.getSegmentFraction() > 0.0)   startSegmentIndex+=1;  int lastSegmentIndex=end.getSegmentIndex();  if (end.getSegmentFraction() == 1.0)   lastSegmentIndex+=1;  if (lastSegmentIndex >= coordinates.length)   lastSegmentIndex=coordinates.length - 1;  if (!start.isVertex())   newCoordinates.add(start.getCoordinate(line));  for (int i=startSegmentIndex; i <= lastSegmentIndex; i++) {    newCoordinates.add(coordinates[i]);  }  if (!end.isVertex())   newCoordinates.add(end.getCoordinate(line));  if (newCoordinates.size() <= 0)   newCoordinates.add(start.getCoordinate(line));  Coordinate[] newCoordinateArray=newCoordinates.toCoordinateArray();  if (newCoordinateArray.length <= 1) {    newCoordinateArray=new Coordinate[]{newCoordinateArray[0],newCoordinateArray[0]};  }  return line.getFactory().createLineString(newCoordinateArray);}  }
class C{  public void addArtworkScraper(MediaScraper artworkScraper){  this.artworkScrapers.add(artworkScraper);}  }
class C{  public float min(){  if (isEmpty()) {    return Float.POSITIVE_INFINITY;  }  float v=Float.POSITIVE_INFINITY;  for (int i=0; i < length; i++) {    if (!Float.isNaN(get(i)) && get(i) < v) {      v=get(i);    }  }  return v;}  }
class C{  private int readFromResponse(State state,InnerState innerState,byte[] data,InputStream entityStream) throws StopRequest {  try {    return entityStream.read(data);  } catch (  IOException ex) {    logNetworkState();    mInfo.mCurrentBytes=innerState.mBytesSoFar;    mDB.updateDownload(mInfo);    if (cannotResume(innerState)) {      String message="while reading response: " + ex.toString() + ", can't resume interrupted download with no ETag";      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,message,ex);    } else {      throw new StopRequest(getFinalStatusForHttpError(state),"while reading response: " + ex.toString(),ex);    }  }}  }
class C{  public TFloatHashSet(int initialCapacity){  super(initialCapacity);}  }
class C{  @SuppressWarnings("unchecked") public SophisticatedLexicon splitAllStates(int[] counts,boolean moreSubstatesThanCounts,int mode){  short[] newNumSubStates=new short[numSubStates.length];  newNumSubStates[0]=1;  for (short i=1; i < numSubStates.length; i++) {    newNumSubStates[i]=(short)(numSubStates[i] * 2);  }  SophisticatedLexicon lexicon=new SophisticatedLexicon(newNumSubStates,this.smoothingCutoff,smooth,smoother,this.threshold);  lexicon.wordToTagCounters=new HashMap[numSubStates.length];  lexicon.unseenWordToTagCounters=new HashMap[numSubStates.length];  for (int tag=0; tag < wordToTagCounters.length; tag++) {    if (wordToTagCounters[tag] != null) {      lexicon.wordToTagCounters[tag]=new HashMap<String,double[]>();      for (      String word : wordToTagCounters[tag].keySet()) {        lexicon.wordToTagCounters[tag].put(word,new double[newNumSubStates[tag]]);        for (int substate=0; substate < wordToTagCounters[tag].get(word).length; substate++) {          int splitFactor=2;          if (newNumSubStates[tag] == numSubStates[tag]) {            splitFactor=1;          }          for (int i=0; i < splitFactor; i++) {            lexicon.wordToTagCounters[tag].get(word)[substate * splitFactor + i]=(1.f / splitFactor) * wordToTagCounters[tag].get(word)[substate];          }        }      }    }  }  for (int tag=0; tag < unseenWordToTagCounters.length; tag++) {    if (unseenWordToTagCounters[tag] != null) {      lexicon.unseenWordToTagCounters[tag]=new HashMap<String,double[]>();      for (      String word : unseenWordToTagCounters[tag].keySet()) {        lexicon.unseenWordToTagCounters[tag].put(word,new double[newNumSubStates[tag]]);        for (int substate=0; substate < unseenWordToTagCounters[tag].get(word).length; substate++) {          int splitFactor=2;          if (newNumSubStates[tag] == numSubStates[tag]) {            splitFactor=1;          }          for (int i=0; i < splitFactor; i++) {            lexicon.unseenWordToTagCounters[tag].get(word)[substate * splitFactor + i]=(1.f / splitFactor) * unseenWordToTagCounters[tag].get(word)[substate];          }        }      }    }  }  lexicon.totalWordTypes=totalWordTypes;  lexicon.totalTokens=totalTokens;  lexicon.totalUnseenTokens=totalUnseenTokens;  lexicon.totalWords=totalWords;  lexicon.smoother=smoother;  lexicon.typeTagCounter=new double[typeTagCounter.length][];  lexicon.tagCounter=new double[tagCounter.length][];  lexicon.unseenTagCounter=new double[unseenTagCounter.length][];  lexicon.simpleTagCounter=new double[tagCounter.length];  for (int tag=0; tag < typeTagCounter.length; tag++) {    lexicon.typeTagCounter[tag]=new double[newNumSubStates[tag]];    lexicon.tagCounter[tag]=new double[newNumSubStates[tag]];    lexicon.unseenTagCounter[tag]=new double[newNumSubStates[tag]];    lexicon.simpleTagCounter[tag]=simpleTagCounter[tag];    for (int substate=0; substate < typeTagCounter[tag].length; substate++) {      int splitFactor=2;      if (newNumSubStates[tag] == numSubStates[tag]) {        splitFactor=1;      }      for (int i=0; i < splitFactor; i++) {        lexicon.typeTagCounter[tag][substate * splitFactor + i]=(1.f / splitFactor) * typeTagCounter[tag][substate];        lexicon.tagCounter[tag][substate * splitFactor + i]=(1.f / splitFactor) * tagCounter[tag][substate];        lexicon.unseenTagCounter[tag][substate * splitFactor + i]=(1.f / splitFactor) * unseenTagCounter[tag][substate];      }    }  }  lexicon.allTags=new HashSet<Short>(allTags);  lexicon.wordCounter=new Counter<String>();  for (  String word : wordCounter.keySet()) {    lexicon.wordCounter.setCount(word,wordCounter.getCount(word));  }  lexicon.smoothingCutoff=smoothingCutoff;  lexicon.addXSmoothing=addXSmoothing;  lexicon.smoothInUnknownsThreshold=smoothInUnknownsThreshold;  lexicon.wordNumberer=wordNumberer;  return lexicon;}  }
class C{  public _BuildServiceHostUpdate(final String[] flagStrings){  super(flagStrings);}  }
class C{  private static String generateTimestamp(){  SimpleDateFormat sdf=new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss_SSS",Locale.US);  return sdf.format(new Date());}  }
class C{  public PrintWriter createWriter(String filename){  return createWriter(saveFile(filename));}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    IOUtils.writeLines(lines,lineEnding,out,encoding);  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public static boolean isAbstract(int flags){  return (flags & AccAbstract) != 0;}  }
class C{  public static void writeChartAsPNG(OutputStream out,JFreeChart chart,int width,int height,boolean encodeAlpha,int compression) throws IOException {  ChartUtilities.writeChartAsPNG(out,chart,width,height,null,encodeAlpha,compression);}  }
class C{  public CFGGenerator retrieveCFGGenerator(){  if (cfgGenerator == null)   throw new IllegalStateException("you have to call analyze() first before retrieving the CFGGenerator");  return cfgGenerator;}  }
class C{  public void normalize(){  final double totalCount=totalCount();  for (  final E key : keySet()) {    setCount(key,getCount(key) / totalCount);  }  dirty=true;}  }
class C{  Query<EppResourceIndex> query(){  Query<EppResourceIndex> query=ofy().load().type(EppResourceIndex.class).ancestor(bucketKey);  return filterKinds.isEmpty() ? query : query.filter("kind in",filterKinds);}  }
class C{  public void test_initializeILjava_security_SecureRandom() throws Exception {  KeyPairGenerator keyPair=KeyPairGenerator.getInstance("DSA");  keyPair.initialize(1024,new SecureRandom());}  }
class C{  public void test_RSAMultiPrimePrivateCrtKey(){  RSAMulti rsam=new RSAMulti(publicExponent,primeExponentP,primeExponentQ,primeP,primeQ,crtCoefficient,opi);  try {    assertEquals(rsam.getCrtCoefficient(),crtCoefficient);    assertEquals(rsam.getPrimeExponentP(),primeExponentP);    assertEquals(rsam.getPrimeExponentQ(),primeExponentQ);    assertEquals(rsam.getPrimeP(),primeP);    assertEquals(rsam.getPrimeQ(),primeQ);    assertEquals(rsam.getPublicExponent(),publicExponent);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  public void randomize(){  strength=(getUpperBound() - getLowerBound()) * Math.random() + getLowerBound();  getNetwork().fireSynapseChanged(this);}  }
class C{  protected TreeModelListener createTreeModelListener(){  return getHandler();}  }
class C{  public void updateProperty(String key,String value){  String query=new MessageFormat(updateQuery).format(new Object[]{tableName,valueColumn,keyColumn});  int res=jdbcTemplate.update(query,new Object[]{value,key});  if (logger.isDebugEnabled()) {    if (res != 1) {      logger.warn("Al intentar actualizar el par (" + key + ","+ value+ ") en al tabla "+ tableName+ " se han modificado "+ res+ " filas.");    }  }}  }
class C{  public List<String[]> classify(final List<List<Feature>> features) throws CleartkProcessingException {  String data="";{    StringWriter out=new StringWriter();    PrintWriter printWriter=new PrintWriter(out);    for (    List<Feature> f : features) {      List<NameNumber> nameNumbers=this.featuresEncoder.encodeAll(f);      GrmmDataWriter.writeEncoded(nameNumbers,this.outcomeExample.split(" "),printWriter);    }    data=out.toString();  }  Pipe pipe=acrf.getInputPipe();  Instance unprocessedInstance=new Instance(data,null,"",null);  Instance instance=pipe.newIteratorFrom(Arrays.asList(unprocessedInstance).iterator()).next();  LabelsSequence bestLabels=acrf.getBestLabels(instance);  List<String[]> returnValues=new ArrayList<String[]>(features.size());  for (int i=0; i < bestLabels.size(); i++) {    Labels labels=bestLabels.getLabels(i);    String[] outcomes=new String[labels.size()];    for (int j=0; j < labels.size(); j++) {      outcomes[j]=labels.get(j).getBestLabel().toString();    }    returnValues.add(outcomes);  }  return returnValues;}  }
class C{  public void pushElement(final String name){  if (pointer + 1 >= capacity) {    resizeStacks(capacity * 2);  }  pathStack[pointer]=name;  Map<String,Integer> indexMap=indexMapStack[pointer];  if (indexMap == null) {    indexMap=new HashMap<>();    indexMapStack[pointer]=indexMap;  }  if (indexMap.containsKey(name)) {    indexMap.put(name,new Integer(indexMap.get(name).intValue() + 1));  } else {    indexMap.put(name,new Integer(1));  }  pointer++;  currentPath=null;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E firstElement(){  if (elementCount > 0) {    return (E)elementData[0];  }  throw new NoSuchElementException();}  }
class C{  final public boolean isInlineDateTimes(){  return inlineDateTimes;}  }
class C{  private KeySelectorResult keyStoreSelect(CertSelector cs) throws KeyStoreException {  Enumeration<String> aliases=ks.aliases();  while (aliases.hasMoreElements()) {    String alias=aliases.nextElement();    Certificate cert=ks.getCertificate(alias);    if (cert != null && cs.match(cert)) {      return new SimpleKeySelectorResult(cert.getPublicKey());    }  }  return null;}  }
class C{  public final boolean testOverlap(Shape shapeA,int indexA,Shape shapeB,int indexB,Transform xfA,Transform xfB){  input.proxyA.set(shapeA,indexA);  input.proxyB.set(shapeB,indexB);  input.transformA.set(xfA);  input.transformB.set(xfB);  input.useRadii=true;  cache.count=0;  pool.getDistance().distance(output,cache,input);  return output.distance < 10.0f * Settings.EPSILON;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrinsertdataoffsetgreater.class,args);}  }
class C{  public MalformedBody1(){  requestFileName="malformed-body1.query";}  }
class C{  public static float min(float a,float b,float c){  return Math.min(Math.min(a,b),c);}  }
class C{  public static <A,B>Pair<A,B> create(A a,B b){  return new Pair<>(a,b);}  }
class C{  TimeOfDay(TimeOfDay partial,int[] values){  super(partial,values);}  }
class C{  private void shouldNotBeInRootPackage(JavaContext context,Node node,String fileName){  String packageName=context.getMainProject().getPackage();  String filePackageString=PackageManager.getPackage(context,node);  if (filePackageString.equals(packageName + "." + fileName+ ".java") && !PackageManager.isGenerated(context,node)) {    context.report(ISSUE_CLASS_IN_ROOT_PACKAGE,PackageManager.getNodeLocation(context,node)," Expecting " + fileName + " not to be in root package "+ packageName);  }}  }
class C{  private static void sort1(double[] x,int off,int len){  if (len < 7) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);    return;  }  int m=off + (len >> 1);  if (len > 7) {    int l=off;    int n=off + len - 1;    if (len > 40) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s);      m=med3(x,m - s,m,m + s);      n=med3(x,n - 2 * s,n - s,n);    }    m=med3(x,l,m,n);  }  double v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    while (b <= c && x[b] <= v) {      if (x[b] == v)       swap(x,a++,b);      b++;    }    while (c >= b && x[c] >= v) {      if (x[c] == v)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   sort1(x,off,s);  if ((s=d - c) > 1)   sort1(x,n - s,s);}  }
class C{  public void tellTemporalPhysicsSentences(int t){  if (t == 0) {    tell(newSymbol(LOCATION,0,1,1));    tell(newSymbol(FACING_EAST,0));    tell(newSymbol(HAVE_ARROW,0));    tell(newSymbol(WUMPUS_ALIVE,0));  }  for (int x=1; x <= caveXDimension; x++) {    for (int y=1; y <= caveYDimension; y++) {      tell(new ComplexSentence(newSymbol(LOCATION,t,x,y),Connective.IMPLICATION,new ComplexSentence(newSymbol(PERCEPT_BREEZE,t),Connective.BICONDITIONAL,newSymbol(BREEZE,x,y))));      tell(new ComplexSentence(newSymbol(LOCATION,t,x,y),Connective.IMPLICATION,new ComplexSentence(newSymbol(PERCEPT_STENCH,t),Connective.BICONDITIONAL,newSymbol(STENCH,x,y))));    }  }  for (int x=1; x <= caveXDimension; x++) {    for (int y=1; y <= caveYDimension; y++) {      List<Sentence> locDisjuncts=new ArrayList<Sentence>();      locDisjuncts.add(new ComplexSentence(newSymbol(LOCATION,t,x,y),Connective.AND,new ComplexSentence(new ComplexSentence(Connective.NOT,newSymbol(ACTION_FORWARD,t)),Connective.OR,newSymbol(PERCEPT_BUMP,t + 1))));      if (x > 1) {        locDisjuncts.add(new ComplexSentence(newSymbol(LOCATION,t,x - 1,y),Connective.AND,new ComplexSentence(newSymbol(FACING_EAST,t),Connective.AND,newSymbol(ACTION_FORWARD,t))));      }      if (y < caveYDimension) {        locDisjuncts.add(new ComplexSentence(newSymbol(LOCATION,t,x,y + 1),Connective.AND,new ComplexSentence(newSymbol(FACING_SOUTH,t),Connective.AND,newSymbol(ACTION_FORWARD,t))));      }      if (x < caveXDimension) {        locDisjuncts.add(new ComplexSentence(newSymbol(LOCATION,t,x + 1,y),Connective.AND,new ComplexSentence(newSymbol(FACING_WEST,t),Connective.AND,newSymbol(ACTION_FORWARD,t))));      }      if (y > 1) {        locDisjuncts.add(new ComplexSentence(newSymbol(LOCATION,t,x,y - 1),Connective.AND,new ComplexSentence(newSymbol(FACING_NORTH,t),Connective.AND,newSymbol(ACTION_FORWARD,t))));      }      tell(new ComplexSentence(newSymbol(LOCATION,t + 1,x,y),Connective.BICONDITIONAL,Sentence.newDisjunction(locDisjuncts)));      tell(new ComplexSentence(newSymbol(OK_TO_MOVE_INTO,t,x,y),Connective.BICONDITIONAL,new ComplexSentence(new ComplexSentence(Connective.NOT,newSymbol(PIT,x,y)),Connective.AND,new ComplexSentence(Connective.NOT,new ComplexSentence(newSymbol(WUMPUS,x,y),Connective.AND,newSymbol(WUMPUS_ALIVE,t))))));    }  }  tell(new ComplexSentence(newSymbol(FACING_NORTH,t + 1),Connective.BICONDITIONAL,Sentence.newDisjunction(new ComplexSentence(newSymbol(FACING_WEST,t),Connective.AND,newSymbol(ACTION_TURN_RIGHT,t)),new ComplexSentence(newSymbol(FACING_EAST,t),Connective.AND,newSymbol(ACTION_TURN_LEFT,t)),new ComplexSentence(newSymbol(FACING_NORTH,t),Connective.AND,new ComplexSentence(new ComplexSentence(Connective.NOT,newSymbol(ACTION_TURN_LEFT,t)),Connective.AND,new ComplexSentence(Connective.NOT,newSymbol(ACTION_TURN_RIGHT,t)))))));  tell(new ComplexSentence(newSymbol(FACING_SOUTH,t + 1),Connective.BICONDITIONAL,Sentence.newDisjunction(new ComplexSentence(newSymbol(FACING_WEST,t),Connective.AND,newSymbol(ACTION_TURN_LEFT,t)),new ComplexSentence(newSymbol(FACING_EAST,t),Connective.AND,newSymbol(ACTION_TURN_RIGHT,t)),new ComplexSentence(newSymbol(FACING_SOUTH,t),Connective.AND,new ComplexSentence(new ComplexSentence(Connective.NOT,newSymbol(ACTION_TURN_LEFT,t)),Connective.AND,new ComplexSentence(Connective.NOT,newSymbol(ACTION_TURN_RIGHT,t)))))));  tell(new ComplexSentence(newSymbol(FACING_EAST,t + 1),Connective.BICONDITIONAL,Sentence.newDisjunction(new ComplexSentence(newSymbol(FACING_NORTH,t),Connective.AND,newSymbol(ACTION_TURN_RIGHT,t)),new ComplexSentence(newSymbol(FACING_SOUTH,t),Connective.AND,newSymbol(ACTION_TURN_LEFT,t)),new ComplexSentence(newSymbol(FACING_EAST,t),Connective.AND,new ComplexSentence(new ComplexSentence(Connective.NOT,newSymbol(ACTION_TURN_LEFT,t)),Connective.AND,new ComplexSentence(Connective.NOT,newSymbol(ACTION_TURN_RIGHT,t)))))));  tell(new ComplexSentence(newSymbol(FACING_WEST,t + 1),Connective.BICONDITIONAL,Sentence.newDisjunction(new ComplexSentence(newSymbol(FACING_NORTH,t),Connective.AND,newSymbol(ACTION_TURN_LEFT,t)),new ComplexSentence(newSymbol(FACING_SOUTH,t),Connective.AND,newSymbol(ACTION_TURN_RIGHT,t)),new ComplexSentence(newSymbol(FACING_WEST,t),Connective.AND,new ComplexSentence(new ComplexSentence(Connective.NOT,newSymbol(ACTION_TURN_LEFT,t)),Connective.AND,new ComplexSentence(Connective.NOT,newSymbol(ACTION_TURN_RIGHT,t)))))));  tell(new ComplexSentence(newSymbol(HAVE_ARROW,t + 1),Connective.BICONDITIONAL,new ComplexSentence(newSymbol(HAVE_ARROW,t),Connective.AND,new ComplexSentence(Connective.NOT,newSymbol(ACTION_SHOOT,t)))));  tell(new ComplexSentence(newSymbol(WUMPUS_ALIVE,t + 1),Connective.BICONDITIONAL,new ComplexSentence(newSymbol(WUMPUS_ALIVE,t),Connective.AND,new ComplexSentence(Connective.NOT,newSymbol(PERCEPT_SCREAM,t + 1)))));}  }
class C{  @Override public long longValue(){  return (long)numerator / denominator;}  }
class C{  @PreDestroy protected void shutDownExecutorService(){  ExecutorServiceUtils.shutdownExecutor(scheduledExecutorService,5L,TimeUnit.SECONDS);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String typeName(String cls){  if (Boolean.class.getName().equals(cls) || boolean.class.getName().equals(cls))   return "BOOLEAN"; else   if (Byte.class.getName().equals(cls) || byte.class.getName().equals(cls))   return "TINYINT"; else   if (Short.class.getName().equals(cls) || short.class.getName().equals(cls))   return "SMALLINT"; else   if (Integer.class.getName().equals(cls) || int.class.getName().equals(cls))   return "INTEGER"; else   if (Long.class.getName().equals(cls) || long.class.getName().equals(cls))   return "BIGINT"; else   if (Float.class.getName().equals(cls) || float.class.getName().equals(cls))   return "FLOAT"; else   if (Double.class.getName().equals(cls) || double.class.getName().equals(cls))   return "DOUBLE"; else   if (String.class.getName().equals(cls))   return "VARCHAR"; else   if (byte[].class.getName().equals(cls))   return "BINARY"; else   if (Time.class.getName().equals(cls))   return "TIME"; else   if (Timestamp.class.getName().equals(cls))   return "TIMESTAMP"; else   if (Date.class.getName().equals(cls) || java.sql.Date.class.getName().equals(cls))   return "DATE"; else   return "OTHER";}  }
class C{  private boolean startWorkflow(int AD_Workflow_ID){  log.fine(AD_Workflow_ID + " - " + m_pi);  boolean started=false;  if (DB.isRemoteProcess()) {    log.info("trying to running on the server");    Server server=CConnection.get().getServer();    try {      if (server != null) {        log.info("running on the server");        m_pi=server.workflow(m_wscctx,m_pi,AD_Workflow_ID);        log.finest("server => " + m_pi);        started=true;      }    } catch (    Exception ex) {      log.log(Level.SEVERE,"AppsServer error",ex);      started=false;    }  }  if (!started && !m_IsServerProcess) {    log.info("running locally");    MWorkflow wf=MWorkflow.get(m_wscctx,AD_Workflow_ID);    MWFProcess wfProcess=null;    if (m_pi.isBatch())     wfProcess=wf.start(m_pi); else     wfProcess=wf.startWait(m_pi);    started=wfProcess != null;  }  return started;}  }
class C{  public static boolean isIrreducible(int p){  if (p == 0) {    return false;  }  int d=degree(p) >>> 1;  int u=2;  for (int i=0; i < d; i++) {    u=modMultiply(u,u,p);    if (gcd(u ^ 2,p) != 1) {      return false;    }  }  return true;}  }
class C{  private static Class<?>[] types(Object... values){  if (values == null) {    return new Class[0];  }  Class<?>[] result=new Class[values.length];  for (int i=0; i < values.length; i++) {    Object value=values[i];    result[i]=value == null ? NULL.class : value.getClass();  }  return result;}  }
class C{  public void shuffle(Random rand){  for (int i=_pos; i-- > 1; ) {    swap(i,rand.nextInt(i));  }}  }
class C{  private void parseSkinAttr(Context context,AttributeSet attrs,View view){  List<SkinAttr> viewAttrs=new ArrayList<SkinAttr>();  for (int i=0; i < attrs.getAttributeCount(); i++) {    String attrName=attrs.getAttributeName(i);    String attrValue=attrs.getAttributeValue(i);    if (!AttrFactory.isSupportedAttr(attrName)) {      continue;    }    if (attrValue.startsWith("@")) {      try {        int id=Integer.parseInt(attrValue.substring(1));        String entryName=context.getResources().getResourceEntryName(id);        String typeName=context.getResources().getResourceTypeName(id);        SkinAttr mSkinAttr=AttrFactory.get(attrName,id,entryName,typeName);        if (mSkinAttr != null) {          viewAttrs.add(mSkinAttr);        }      } catch (      NumberFormatException e) {        e.printStackTrace();      }catch (      NotFoundException e) {        e.printStackTrace();      }    }  }  if (!ListUtils.isEmpty(viewAttrs)) {    SkinItem skinItem=new SkinItem();    skinItem.view=view;    skinItem.attrs=viewAttrs;    mSkinItems.add(skinItem);    if (SkinManager.getInstance().isExternalSkin()) {      skinItem.apply();    }  }}  }
class C{  private void putHead(String key,TemplateSubPatternAssociation assoc){  if (key.equals(PsuedoNames.PSEUDONAME_TEXT))   m_textPatterns=assoc; else   if (key.equals(PsuedoNames.PSEUDONAME_ROOT))   m_docPatterns=assoc; else   if (key.equals(PsuedoNames.PSEUDONAME_COMMENT))   m_commentPatterns=assoc;  m_patternTable.put(key,assoc);}  }
class C{  @Override public Optional<State> read(AppContext ctx,StatePK id){  return ds.read(ctx,type,id);}  }
class C{  public RDFXMLWriter(OutputStream out){  this(new OutputStreamWriter(out,Charset.forName("UTF-8")));}  }
class C{  private JsonObject broadlinkExecuteCommand(int api_id,String command,String mac){  JsonObject initJsonObjectParams=broadlinkStandardParams(api_id,command);  initJsonObjectParams.addProperty("mac",mac);  return broadlinkExecuteCommand(initJsonObjectParams);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s != null && s.isMovie()) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public Builder deleteEntitlement(Entitlement entitlement){  Entitlement deleteEntitlement=new Entitlement.Builder().setValue(entitlement.getValue()).setType(entitlement.getType()).setOperation(DELETE).build();  entitlements.add(deleteEntitlement);  return this;}  }
class C{  public static TreeNode parseOne(NamedInputStream nis,int nkind) throws ParseException {  return null;}  }
class C{  @Override public void insertSpillBefore(Instruction s,Register r,byte type,int location){  Register FP=ir.regpool.getPhysicalRegisterSet().getFP();  if (type == FLOAT_VALUE) {    s.insertBefore(MIR_Store.create(PPC_STFS,F(r),A(FP),IC(location + BYTES_IN_ADDRESS - BYTES_IN_FLOAT)));  } else   if (type == DOUBLE_VALUE) {    s.insertBefore(MIR_Store.create(PPC_STFD,D(r),A(FP),IC(location)));  } else   if (type == INT_VALUE) {    s.insertBefore(MIR_Store.create(PPC_STAddr,A(r),A(FP),IC(location)));  } else {    throw new OptimizingCompilerException("insertSpillBefore","unsupported type " + type);  }}  }
class C{  public Long llen(final byte[] key){  checkIsInMulti();  client.llen(key);  return client.getIntegerReply();}  }
class C{  public BugProperty lookupProperty(String name){  BugProperty prop=propertyListHead;  while (prop != null) {    if (prop.getName().equals(name)) {      break;    }    prop=prop.getNext();  }  return prop;}  }
class C{  public void testReserveJoinLate() throws Throwable {  testServerJoinLate(Member.Type.RESERVE,CopycatServer.State.RESERVE);}  }
class C{  public String maximumAttributesTipText(){  return "The maximum number of PC attributes to retain.";}  }
class C{  public byte[] nt(int alleleId){  final Allele a=allele(alleleId);  return a == null ? null : a.nt();}  }
class C{  public static Option length(long value){  return new LengthOption(value);}  }
class C{  protected boolean isStringFlavor(DataFlavor flavor){  DataFlavor[] flavors=stringFlavors;  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor))     return true;  }  return false;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public BlockConsistencyGroupRestRep createConsistencyGroup(final BlockConsistencyGroupCreate param){  checkForDuplicateName(param.getName(),BlockConsistencyGroup.class);  ArgValidator.checkFieldNotEmpty(param.getName(),"name");  ArgValidator.checkFieldLengthMaximum(param.getName(),CG_MAX_LIMIT,"name");  ArgValidator.checkFieldUriType(param.getProject(),Project.class,"project");  final Project project=_dbClient.queryObject(Project.class,param.getProject());  ArgValidator.checkEntity(project,param.getProject(),isIdEmbeddedInURL(param.getProject()));  verifyUserIsAuthorizedForRequest(project);  final BlockConsistencyGroup consistencyGroup=new BlockConsistencyGroup();  consistencyGroup.setId(URIUtil.createId(BlockConsistencyGroup.class));  consistencyGroup.setLabel(param.getName());  consistencyGroup.setProject(new NamedURI(project.getId(),project.getLabel()));  consistencyGroup.setTenant(project.getTenantOrg());  consistencyGroup.setArrayConsistency(param.getArrayConsistency());  _dbClient.createObject(consistencyGroup);  return map(consistencyGroup,null,_dbClient);}  }
class C{  public void updateFileDescriptor(Uri uri,FileDescriptor fileDescriptor){  if (fileDescriptor.filePath == null) {    try {      Cursor query=context.getContentResolver().query(uri,null,null,null,null);      int pathColumn=query.getColumnIndex("_data");      query.moveToFirst();      fileDescriptor.filePath=query.getString(pathColumn);      fileDescriptor.fileType=(byte)MediaType.getMediaTypeForExtension(FilenameUtils.getExtension(fileDescriptor.filePath)).getId();      query.close();    } catch (    Throwable t) {    }  }}  }
class C{  protected void handlePersistAction(SolrQueryRequest req,SolrQueryResponse rsp) throws SolrException {  rsp.add("message","The PERSIST action has been deprecated");}  }
class C{  static final int actLgResizeFactor(long capBytes,int lgArrLongs,int preLongs,int lgRF){  int maxHTLongs=Util.floorPowerOf2(((int)(capBytes >> 3) - preLongs));  int lgFactor=Math.max(Integer.numberOfTrailingZeros(maxHTLongs) - lgArrLongs,0);  return (lgFactor >= lgRF) ? lgRF : lgFactor;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.370 -0500",hash_original_method="3BFD510AFFBAA2A375FE57A270664097",hash_generated_method="346E8A503E38C5937D6603AE9CF91D6D") public final static HeaderElement[] parseElements(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseElements(buffer,cursor);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getVideoFrame().getDVDAvailableLanguages();}  }
class C{  protected void createCandidates(Response response){  createServerReflexiveCandidate(response);}  }
class C{  public static PsiDirectory addIfMissingDirectory(PsiDirectory parent,String dirName){  final PsiDirectory existingDir=parent.findSubdirectory(dirName);  if (existingDir != null) {    return existingDir;  }  return parent.createSubdirectory(dirName);}  }
class C{  public static final void addCredentials(String username,String password,String host){  clearHostCredentials(host);  if (username != null && username.trim().length() != 0) {    Log.i(t,"adding credential for host: " + host + " username:"+ username);    Credentials c=new UsernamePasswordCredentials(username,password);    addCredentials(c,host);  }}  }
class C{  protected Rectangle2D intersects(Rectangle2D rectangle){  if (rectangle == null)   return null;  for (  Rectangle2D rect : this.rectList) {    if (rectangle.intersects(rect))     return rect;  }  return null;}  }
class C{  public boolean isVmSearch(){  return vmSearch;}  }
class C{  public boolean isIdentityOverrideAllowed(){  return identityOverrideAllowed;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  protected synchronized void notifyListenersReadURI(HttpMessage msg){  for (  SpiderListener l : listeners) {    l.readURI(msg);  }}  }
class C{  public static void fixRelationName(Instances data,int numClassAtts){  if (data.relationName().indexOf(":") == -1)   data.setRelationName(data.relationName() + ": -C " + numClassAtts);}  }
class C{  public void showLoadingDialog(){  Fragment frag=getActivity().getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);  LoadingDialog loading=null;  if (frag == null) {    loading=new LoadingDialog(getResources().getString(R.string.wait_a_moment));    FragmentManager fm=getActivity().getSupportFragmentManager();    FragmentTransaction ft=fm.beginTransaction();    loading.show(ft,DIALOG_WAIT_TAG);  } else {    loading=(LoadingDialog)frag;    loading.setShowsDialog(true);  }}  }
class C{  @Override public void putAll(Map<? extends Long,? extends Long> map){  Iterator<? extends Entry<? extends Long,? extends Long>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Long,? extends Long> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public void sendz21Message(Z21Message m,Z21Listener reply){  sendMessage(m,reply);}  }
class C{  public BST(){}  }
class C{  public boolean load(File configFile){  FileInputStream fileInput;  try {    fileInput=new FileInputStream(configFile);  } catch (  FileNotFoundException e) {    System.err.println("crushpaper: Sorry, the configuration file `" + configFile.getAbsolutePath() + "` could not be imported because it does not exist.");    return false;  }  properties=new Properties();  try {    properties.load(fileInput);  } catch (  IOException e) {    System.err.println("crushpaper: Sorry, the configuration file `" + configFile.getAbsolutePath() + "` could not be imported because `"+ e.getMessage()+ "`.");    return false;  }  return true;}  }
class C{  public void dp(int debugType,String text){  if (outputTypeSet(debugType)) {    System.out.print(text);  }}  }
class C{  public void testDoConfigureSetsAddress() throws Exception {  configuration.setProperty(GeneralPropertySet.HOSTNAME,"localhost");  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("localhost","//Server/@ListenAddress",config);}  }
class C{  public void fling(int velocityX){  int maxWidth=effectiveWidth * (zoomLevel - 1);  scroller.fling(getScrollX(),0,velocityX,0,0,maxWidth,0,0);  invalidate();}  }
class C{  @Override public synchronized void init() throws SQLException {  if (state.type == StateType.ZERO) {    state=normalState();  }}  }
class C{  public void detachImageViewFromImageTask(ImageTask imageTask,CubeImageView imageView){  imageTask.removeImageView(imageView);  if (imageTask.isLoading()) {    if (!imageTask.isPreLoad() && !imageTask.stillHasRelatedImageView()) {      LoadImageTask task=mLoadWorkList.get(imageTask.getIdentityKey());      if (task != null) {        task.cancel(true);      }      if (DEBUG) {        Log.d(Log_TAG,String.format("%s previous work is cancelled.",imageTask));      }    }  }  if (!imageTask.stillHasRelatedImageView()) {    imageTask.tryToRecycle();  }}  }
class C{  public static boolean validateObjectKey(String key){  if (key == null) {    return false;  }  byte[] bytes=null;  try {    bytes=key.getBytes(DEFAULT_CHARSET_NAME);  } catch (  UnsupportedEncodingException e) {    return false;  }  char keyChars[]=key.toCharArray();  char firstChar=keyChars[0];  if (firstChar == '/' || firstChar == '\\') {    return false;  }  return (bytes.length > 0 && bytes.length < OBJECT_NAME_MAX_LENGTH);}  }
class C{  public static void serializePMMLModel(PMMLModel model,File file) throws Exception {  serializePMMLModel(model,new BufferedOutputStream(new FileOutputStream(file)));}  }
class C{  static private byte[] classToBytes(Class c){  return classNameToBytes(c.getName());}  }
class C{  public MatrixStack translate(Vector3D translateVector){  translate(translateVector.getX(),translateVector.getY(),translateVector.getZ());  return this;}  }
class C{  public Builder scheduler(ScheduledExecutorService executorService){  this._executorService=executorService;  return this;}  }
class C{  public void removeInterpreterFactory(String language){  factories.remove(language);}  }
class C{  public static void trace(byte level,String s,Throwable t){  if (s == null)   return;  if (level == SEVERE) {    if (!logged.contains(s)) {      JSDTTypeScriptUIPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,JSDTTypeScriptUIPlugin.PLUGIN_ID,s,t));      logged.add(s);    }  }  if (!JSDTTypeScriptUIPlugin.getDefault().isDebugging())   return;  StringBuilder sb=new StringBuilder(JSDTTypeScriptUIPlugin.PLUGIN_ID);  sb.append(" ");  sb.append(levelNames[level]);  sb.append(" ");  sb.append(sdf.format(new Date()));  sb.append(" ");  sb.append(s);  System.out.println(sb.toString());  if (t != null)   t.printStackTrace();}  }
class C{  public String toString(){  return uri.toString();}  }
class C{  public void initializeDefinition(String triggerBody){  m_body=triggerBody;  s_logger.log(Level.FINEST,toString());}  }
class C{  public static void drawTo(Bitmap src,Bitmap dest){  drawTo(src,dest,CLEAR_COLOR);}  }
class C{  public CalendarConverter(){  super();}  }
class C{  public PageStoreInDoubtTransaction(PageStore store,int sessionId,int pos,String transaction){  this.store=store;  this.sessionId=sessionId;  this.pos=pos;  this.transactionName=transaction;  this.state=IN_DOUBT;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseFeatureID) {case BasePackage.NAMED_ELEMENT__NAME:      return SexecPackage.EXECUTION_SCOPE__NAME;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public Utf8Writer(OutputStream out){  super(out,Charset.forName("UTF-8"));}  }
class C{  @SuppressWarnings("unchecked") final void signalEvent(WatchEvent.Kind<?> kind,Object context){synchronized (this) {    int size=events.size();    if (size > 1) {      if (size >= MAX_EVENT_LIST_SIZE) {        kind=OVERFLOW;        context=null;      }      WatchEvent<?> prev=events.get(size - 1);      if (kind == prev.kind()) {        boolean isRepeat;        if (context == null) {          isRepeat=(prev.context() == null);        } else {          isRepeat=context.equals(prev.context());        }        if (isRepeat) {          ((Event<?>)prev).increment();          return;        }      }    }    events.add(new Event<Object>((WatchEvent.Kind<Object>)kind,context));    signal();  }}  }
class C{  public static String reverseUrl(String urlString) throws MalformedURLException {  return reverseUrl(new URL(urlString));}  }
class C{  public static Builder disque(String host){  return disque(host,DEFAULT_DISQUE_PORT);}  }
class C{  private void copyFormat(int AD_PrintFormat_ID,int To_Client_ID){  MPrintFormat pf=MPrintFormat.copyToClient(Env.getCtx(),AD_PrintFormat_ID,To_Client_ID);  launchReport(pf);}  }
class C{  public meta addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public RawStreamMetadataResult(String stream,boolean isStreamDeleted,int metastreamVersion,byte[] streamMetadata){  checkArgument(!isNullOrEmpty(stream),"stream");  this.stream=stream;  this.isStreamDeleted=isStreamDeleted;  this.metastreamVersion=metastreamVersion;  this.streamMetadata=streamMetadata;}  }
class C{  private boolean boundsSafe(int x,int y){  if ((y < 0) || (y >= height) || (x < 0)|| (x >= width)) {    return false;  }  return true;}  }
class C{  private BookmarkablePageLink createRemoveOneSkuLink(final String skuCode){  final PageParameters paramsMap=new PageParameters();  paramsMap.set(ShoppingCartCommand.CMD_REMOVEONESKU,skuCode);  return new BookmarkablePageLink<Page>(REMOVE_ONE_LINK,getPage().getPageClass(),paramsMap);}  }
class C{  public byte[] toByteArray(){  return this.stream.toByteArray();}  }
class C{  public boolean contains(double x,double y){  return x >= minXd() && x <= maxXd() && y >= minYd() && y <= maxYd();}  }
class C{  public DefaultWriteFuture(IoSession session){  super(session);}  }
class C{  private long[] determinePreferenceVector(Relation<V> relation,ModifiableDBIDs[] neighborIDs,StringBuilder msg){  if (strategy.equals(Strategy.APRIORI)) {    return determinePreferenceVectorByApriori(relation,neighborIDs,msg);  } else   if (strategy.equals(Strategy.MAX_INTERSECTION)) {    return determinePreferenceVectorByMaxIntersection(neighborIDs,msg);  } else {    throw new IllegalStateException("Should never happen!");  }}  }
class C{  public static void w(String msg){  if (DEBUG)   Log.w(TAG,buildMessage(msg));}  }
class C{  public void put(String key,InputStream stream,String name,String contentType){  put(key,stream,name,contentType,autoCloseInputStreams);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.672 -0500",hash_original_method="42698948AA1B3CB52B9A6434DAA41A35",hash_generated_method="23050AD49C3D1619F91265D3530DC78F") void onConnectedInOrOut(){  connectTime=System.currentTimeMillis();  connectTimeReal=SystemClock.elapsedRealtime();  duration=0;  if (Phone.DEBUG_PHONE) {    log("onConnectedInOrOut: connectTime=" + connectTime);  }  if (!isIncoming) {    processNextPostDialChar();  } else {    releaseWakeLock();  }}  }
class C{  private static void splitRange(final Object builder,final int valSize,final int precisionStep,long minBound,long maxBound){  if (precisionStep < 1)   throw new IllegalArgumentException("precisionStep must be >=1");  if (minBound > maxBound)   return;  for (int shift=0; ; shift+=precisionStep) {    final long diff=1L << (shift + precisionStep), mask=((1L << precisionStep) - 1L) << shift;    final boolean hasLower=(minBound & mask) != 0L, hasUpper=(maxBound & mask) != mask;    final long nextMinBound=(hasLower ? (minBound + diff) : minBound) & ~mask, nextMaxBound=(hasUpper ? (maxBound - diff) : maxBound) & ~mask;    final boolean lowerWrapped=nextMinBound < minBound, upperWrapped=nextMaxBound > maxBound;    if (shift + precisionStep >= valSize || nextMinBound > nextMaxBound || lowerWrapped || upperWrapped) {      addRange(builder,valSize,minBound,maxBound,shift);      break;    }    if (hasLower)     addRange(builder,valSize,minBound,minBound | mask,shift);    if (hasUpper)     addRange(builder,valSize,maxBound & ~mask,maxBound,shift);    minBound=nextMinBound;    maxBound=nextMaxBound;  }}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>Map<K,V> toMap(Object object){  if (object != null && !(object instanceof Map))   return null;  return (Map<K,V>)object;}  }
class C{  public int checkVersionSize(final SoftwareVersion version){  URL imageUrl=getImageURL(version);  HttpURLConnection urlConnection=invokeRequest(imageUrl);  return urlConnection.getContentLength();}  }
class C{  @Override public void insertFront(Blorp x){  Node oldFrontNode=sentinel.next;  Node newNode=new Node(x,oldFrontNode);  sentinel.next=newNode;  size+=1;}  }
class C{  public int read() throws IOException {  byte b[]=new byte[1];  int ret=mSocket.read(b,0,1);  if (ret == 1) {    return (int)b[0] & 0xff;  } else {    return -1;  }}  }
class C{  public static List<Restaurant> from(Cursor c){  List<Restaurant> restaurants=null;  while (c.moveToNext()) {    Restaurant restaurant=new Restaurant();    Syncing.from(c,restaurant);    int col=c.getColumnIndex(PLACE_ID);    if (col >= 0) {      restaurant.placeId=c.getString(col);    }    if (TextUtils.isEmpty(restaurant.placeId)) {      col=c.getColumnIndex(NAME);      if (col >= 0) {        restaurant.name=c.getString(col);      }      col=c.getColumnIndex(ADDRESS);      if (col >= 0) {        restaurant.address=c.getString(col);      }      col=c.getColumnIndex(INTL_PHONE);      if (col >= 0) {        restaurant.phone=c.getString(col);      }      col=c.getColumnIndex(URL);      if (col >= 0) {        restaurant.url=c.getString(col);      }    }    col=c.getColumnIndex(NOTES);    if (col >= 0) {      restaurant.notes=c.getString(col);    }    col=c.getColumnIndex(GEOFENCE_NOTIFICATIONS);    if (col >= 0) {      restaurant.showGeofenceNotifications=c.getInt(col) == 1;    }    if (restaurants == null) {      restaurants=new ArrayList<>(c.getCount());    }    restaurants.add(restaurant);  }  c.close();  return restaurants;}  }
class C{  public String toName(cp_info constant_pool[]){  CONSTANT_Utf8_info ci;  ci=(CONSTANT_Utf8_info)(constant_pool[name_index]);  return ci.convert();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","sdmu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void initFacet(){}  }
class C{  ReasonsMask intersect(ReasonsMask mask){  ReasonsMask _mask=new ReasonsMask();  _mask.addReasons(new ReasonsMask(_reasons & mask.getReasons()));  return _mask;}  }
class C{  @Override public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos,IndexWriter writer) throws IOException {  final List<SegmentCommitInfo> segments=segmentInfos.asList();  final int numSegments=segments.size();  if (verbose(writer)) {    message("findForcedDeleteMerges: " + numSegments + " segments",writer);  }  MergeSpecification spec=new MergeSpecification();  int firstSegmentWithDeletions=-1;  assert writer != null;  for (int i=0; i < numSegments; i++) {    final SegmentCommitInfo info=segmentInfos.info(i);    int delCount=writer.numDeletedDocs(info);    if (delCount > 0) {      if (verbose(writer)) {        message("  segment " + info.info.name + " has deletions",writer);      }      if (firstSegmentWithDeletions == -1)       firstSegmentWithDeletions=i; else       if (i - firstSegmentWithDeletions == mergeFactor) {        if (verbose(writer)) {          message("  add merge " + firstSegmentWithDeletions + " to "+ (i - 1)+ " inclusive",writer);        }        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions,i)));        firstSegmentWithDeletions=i;      }    } else     if (firstSegmentWithDeletions != -1) {      if (verbose(writer)) {        message("  add merge " + firstSegmentWithDeletions + " to "+ (i - 1)+ " inclusive",writer);      }      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions,i)));      firstSegmentWithDeletions=-1;    }  }  if (firstSegmentWithDeletions != -1) {    if (verbose(writer)) {      message("  add merge " + firstSegmentWithDeletions + " to "+ (numSegments - 1)+ " inclusive",writer);    }    spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions,numSegments)));  }  return spec;}  }
class C{  private void add(VirtualFile file,boolean addToFiles){  if (file == null) {    return;  }  final boolean isDirectory=file.isDirectory();  FilePath path=VcsUtil.getFilePath(file.getPath(),isDirectory);  final Collection<VcsDirtyScopeManager> managers=getManagers(file);  for (  VcsDirtyScopeManager manager : managers) {    Couple<HashSet<FilePath>> filesAndDirs=map.get(manager);    if (filesAndDirs == null) {      filesAndDirs=Couple.of(new HashSet<FilePath>(),new HashSet<FilePath>());      map.put(manager,filesAndDirs);    }    if (addToFiles || !isDirectory) {      filesAndDirs.first.add(path);    } else {      filesAndDirs.second.add(path);    }  }}  }
class C{  public static void write(int x,int r){  if (r == 32) {    write(x);    return;  }  if (r < 1 || r > 32)   throw new IllegalArgumentException("Illegal value for r = " + r);  if (x < 0 || x >= (1 << r))   throw new IllegalArgumentException("Illegal " + r + "-bit char = "+ x);  for (int i=0; i < r; i++) {    boolean bit=((x >>> (r - i - 1)) & 1) == 1;    writeBit(bit);  }}  }
class C{  private void initializeTranslationGrammars() throws IOException {  if (joshuaConfiguration.tms.size() > 0) {    final List<PackedGrammar> packed_grammars=new ArrayList<>();    for (    String tmLine : joshuaConfiguration.tms) {      String type=tmLine.substring(0,tmLine.indexOf(' '));      String[] args=tmLine.substring(tmLine.indexOf(' ')).trim().split("\\s+");      HashMap<String,String> parsedArgs=FeatureFunction.parseArgs(args);      String owner=parsedArgs.get("owner");      int span_limit=Integer.parseInt(parsedArgs.get("maxspan"));      String path=parsedArgs.get("path");      Grammar grammar;      if (!type.equals("moses") && !type.equals("phrase")) {        if (new File(path).isDirectory()) {          try {            PackedGrammar packed_grammar=new PackedGrammar(path,span_limit,owner,type,joshuaConfiguration);            packed_grammars.add(packed_grammar);            grammar=packed_grammar;          } catch (          FileNotFoundException e) {            String msg=String.format("Couldn't load packed grammar from '%s'",path) + "Perhaps it doesn't exist, or it may be an old packed file format.";            throw new RuntimeException(msg);          }        } else {          grammar=new MemoryBasedBatchGrammar(type,path,owner,joshuaConfiguration.default_non_terminal,span_limit,joshuaConfiguration);        }      } else {        joshuaConfiguration.search_algorithm="stack";        grammar=new PhraseTable(path,owner,type,joshuaConfiguration);      }      this.grammars.add(grammar);    }    checkSharedVocabularyChecksumsForPackedGrammars(packed_grammars);  } else {    LOG.warn("no grammars supplied!  Supplying dummy glue grammar.");    MemoryBasedBatchGrammar glueGrammar=new MemoryBasedBatchGrammar("glue",joshuaConfiguration,-1);    glueGrammar.addGlueRules(featureFunctions);    this.grammars.add(glueGrammar);  }  if (joshuaConfiguration.search_algorithm.equals("stack"))   this.customPhraseTable=new PhraseTable(null,"custom","phrase",joshuaConfiguration); else   this.customPhraseTable=new MemoryBasedBatchGrammar("custom",joshuaConfiguration,20);  this.grammars.add(this.customPhraseTable);  if (joshuaConfiguration.lattice_decoding) {    LOG.info("Creating an epsilon-deleting grammar");    MemoryBasedBatchGrammar latticeGrammar=new MemoryBasedBatchGrammar("lattice",joshuaConfiguration,-1);    HieroFormatReader reader=new HieroFormatReader();    String goalNT=FormatUtils.cleanNonTerminal(joshuaConfiguration.goal_symbol);    String defaultNT=FormatUtils.cleanNonTerminal(joshuaConfiguration.default_non_terminal);    String ruleString=String.format("[%s] ||| [%s,1] <eps> ||| [%s,1] ||| ",goalNT,goalNT,defaultNT,goalNT,defaultNT);    Rule rule=reader.parseLine(ruleString);    latticeGrammar.addRule(rule);    rule.estimateRuleCost(featureFunctions);    this.grammars.add(latticeGrammar);  }  final Set<OwnerId> ownersSeen=new HashSet<>();  for (  Grammar grammar : this.grammars) {    OwnerId owner=grammar.getOwner();    if (!ownersSeen.contains(owner)) {      this.featureFunctions.add(new PhraseModel(weights,new String[]{"tm","-owner",getOwner(owner)},joshuaConfiguration,grammar));      ownersSeen.add(owner);    }  }  LOG.info("Memory used {} MB",((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1000000.0));}  }
class C{  public static double time(){  return Time.time();}  }
class C{  public static boolean isParent(ASTNode node,ASTNode parent){  Assert.isNotNull(parent);  do {    node=node.getParent();    if (node == parent)     return true;  } while (node != null);  return false;}  }
class C{  private void internalSendMessageAsync(AbstractWebsocketMessage msg){  try {    if (msg instanceof StringWebsocketMessage) {      StringWebsocketMessage sMsg=(StringWebsocketMessage)msg;      async.sendText(sMsg.getString(),sendHandler);    } else     if (msg instanceof BinaryWebsocketMessage) {      BinaryWebsocketMessage bMsg=(BinaryWebsocketMessage)msg;      async.sendBinary(bMsg.getBytes(),sendHandler);    } else     if (msg instanceof CloseWebsocketMessage) {      session.close();    }  } catch (  IllegalStateException ex) {  }catch (  IOException ex) {  }}  }
class C{  public boolean reallyRestoreJsonForUser(String userId,InputStreamReader streamReader,boolean reuseIds,boolean isAdmin,Errors errors){  if (userId == null) {    Errors.add(errors,errorMessages.errorsUserIdIsNull());    return false;  }  if (streamReader == null) {    Errors.add(errors,errorMessages.errorsTheInputStreamReaderIsNull());    return false;  }  try {    ObjectMapper mapper=new ObjectMapper();    JsonNodeHelper json=new JsonNodeHelper(mapper.readTree(streamReader));    final HashMap<String,String> restoredEntryIdToRealEntryId=new HashMap<String,String>();    final HashMap<String,String> realEntryIdToRestoredEntryId=new HashMap<String,String>();    final HashMap<String,String> entryIdToParentRestoredEntryId=new HashMap<String,String>();    final HashMap<String,String> entryIdToSourceRestoredEntryId=new HashMap<String,String>();    final HashMap<String,String> entryIdToRootRestoredEntryId=new HashMap<String,String>();    final HashMap<String,ChildrenInfo> restoredEntryIdToChildren=new HashMap<String,ChildrenInfo>();    final HashSet<String> rootRestoredEntryIds=new HashSet<String>();    JsonNodeHelper[] entries=json.getJsonArray("entries");    if (entries != null) {      for (      JsonNodeHelper jsonEntry : entries) {        final User user=getUserById(userId);        if (user == null) {          return false;        }        final String sourceId=jsonEntry.getString("sourceId");        final String type=jsonEntry.getString(DbLogic.Constants.type);        final String id=jsonEntry.getString(DbLogic.Constants.id);        final String quotation=jsonEntry.getString(DbLogic.Constants.quotation);        final String note=jsonEntry.getString(DbLogic.Constants.note);        Long createTime=jsonEntry.getLong(DbLogic.Constants.createTime);        if (createTime == null) {          createTime=new Long(System.currentTimeMillis());        }        Long modTime=jsonEntry.getLong(DbLogic.Constants.modTime);        if (modTime == null) {          modTime=createTime;        }        final String nextSiblingId=jsonEntry.getString(DbLogic.Constants.nextSiblingId);        final String parentId=jsonEntry.getString(DbLogic.Constants.parentId);        final boolean isPublic=jsonEntry.getBoolean(DbLogic.Constants.isPublic);        final String url=jsonEntry.getString(DbLogic.Constants.url);        final String rootId=jsonEntry.getString(DbLogic.Constants.rootId);        if (type == null) {          Errors.add(errors,errorMessages.errorTheTypeOfTheEntryIsNotAllowed(id));          return false;        }        if (type.equals(Constants.note) && !EntryAttributeValidator.isNoteValid(note)) {          Errors.add(errors,errorMessages.errorNoteIsInvalid(id));          return false;        }        if (type.equals(Constants.notebook) && !EntryAttributeValidator.isNotebookTitleValid(note)) {          Errors.add(errors,errorMessages.errorNoteIsInvalid(id));          return false;        }        if (!EntryAttributeValidator.isQuotationValid(quotation)) {          Errors.add(errors,errorMessages.errorQuotationIsInvalid(id));          return false;        }        if (!EntryAttributeValidator.isUrlValid(url)) {          Errors.add(errors,errorMessages.errorUrlIsInvalid(id));          return false;        }        if (type.equals(Constants.source) && !EntryAttributeValidator.isSourceTitleValid(note)) {          Errors.add(errors,errorMessages.errorTitleIsInvalid(id));          return false;        }        if (!type.equals(Constants.quotation) && sourceId != null) {          Errors.add(errors,errorMessages.errorOnlyQuotationsMayHaveASource(id));          return false;        }        if (!type.equals(Constants.quotation) && quotation != null) {          Errors.add(errors,errorMessages.errorOnlyQuotationsMayHaveAQuotation(id));          return false;        }        if (!type.equals(Constants.source) && url != null) {          Errors.add(errors,errorMessages.errorOnlySourcesMayHaveAUrl(id));          return false;        }        if (!type.equals(Constants.notebook) && rootId != null) {          Errors.add(errors,errorMessages.errorOnlyNotebooksMayHaveARoot(id));          return false;        }        if (type.equals(Constants.notebook) && rootId == null) {          Errors.add(errors,errorMessages.errorNotebooksMustHaveARootId(id));          return false;        }        if (type.equals(Constants.tableofcontents)) {          Errors.add(errors,errorMessages.errorTableOfContentsMayNotBeRestored(id));          return false;        }        if ((type.equals(Constants.root) || type.equals(Constants.tableofcontents)) && parentId != null) {          Errors.add(errors,errorMessages.errorRootsAndTableOfContentsCanNotBeCreatedWithARelationship(id));          return false;        }        if (!(type.equals(Constants.root) || type.equals(Constants.notebook) || type.equals(Constants.source)|| type.equals(Constants.quotation)) && parentId == null) {          Errors.add(errors,errorMessages.errorOnlyRootsNotebooksSourcesAndQuotationsCanBeCreatedWithOutAParent(id));          return false;        }        String newRealId=null;        if (reuseIds && getEntryById(id) == null) {          newRealId=id;        }        Entry entry=null;        if (type.equals(Constants.source)) {          entry=updateOrCreateSource(user,newRealId,url,note,modTime,createTime,isAdmin,errors);          if (entry == null) {            return false;          }        } else {          entry=createRawEntry(user,null,type,newRealId,quotation,note,modTime,createTime,isPublic,isAdmin,errors);          if (entry == null) {            return false;          }          if (sourceId != null) {            entryIdToSourceRestoredEntryId.put(entry.getId(),sourceId);          }        }        if (type.equals(Constants.root)) {          rootRestoredEntryIds.add(id);        }        if (id != null) {          if (restoredEntryIdToRealEntryId.containsKey(id)) {            Errors.add(errors,errorMessages.errorDuplicateId(id));            return false;          }          restoredEntryIdToRealEntryId.put(id,entry.getId());          realEntryIdToRestoredEntryId.put(entry.getId(),id);        }        if (parentId != null) {          entryIdToParentRestoredEntryId.put(entry.getId(),parentId);          ChildrenInfo parentsChildren=restoredEntryIdToChildren.get(parentId);          if (parentsChildren == null) {            parentsChildren=new ChildrenInfo();            restoredEntryIdToChildren.put(parentId,parentsChildren);          }          parentsChildren.restoredNextToRealPreviousIds.put(nextSiblingId,entry.getId());          ++parentsChildren.count;          if (nextSiblingId == null)           parentsChildren.lastRealId=entry.getId();        }        if (rootId != null) {          entryIdToRootRestoredEntryId.put(entry.getId(),rootId);        }      }    }    for (    final Map.Entry<String,String> entry : entryIdToParentRestoredEntryId.entrySet()) {      final User user=getUserById(userId);      if (user == null) {        return false;      }      final String childId=entry.getKey();      final String restoredParentId=entry.getValue();      final String parentId=restoredEntryIdToRealEntryId.get(restoredParentId);      if (parentId == null) {        Errors.add(errors,errorMessages.errorParentIdWasNotFound(restoredParentId));        return false;      }      final Entry child=getEntryById(childId);      final Entry parent=getEntryById(parentId);      if (!verifyTypesForParentChildRelationship(child.getType(),parent.getType(),realEntryIdToRestoredEntryId.get(childId),errors)) {        return false;      }      if (!createParentChildRelationship(user,parent,child,null,isAdmin,errors)) {        return false;      }    }    for (    final Map.Entry<String,String> mapEntry : entryIdToSourceRestoredEntryId.entrySet()) {      final User user=getUserById(userId);      if (user == null) {        return false;      }      final String entryId=mapEntry.getKey();      final String restoredSourceId=mapEntry.getValue();      final String sourceId=restoredEntryIdToRealEntryId.get(restoredSourceId);      if (sourceId == null) {        Errors.add(errors,errorMessages.errorSourceIdWasNotFound(restoredSourceId));        return false;      }      final Entry source=getEntryById(sourceId);      if (!source.isSource()) {        Errors.add(errors,errorMessages.errorSourceIdWasNotASource(restoredSourceId));        return false;      }      final Entry entry=getEntryById(entryId);      entry.setSourceId(sourceId);    }    for (    final Map.Entry<String,ChildrenInfo> mapEntry : restoredEntryIdToChildren.entrySet()) {      final ChildrenInfo childrenInfo=mapEntry.getValue();      if (childrenInfo.count == childrenInfo.restoredNextToRealPreviousIds.size()) {        LinkedList<String> sortedRealChildIds=getRealChildIdsInOrderForUserRestore(childrenInfo,realEntryIdToRestoredEntryId,errors);        if (sortedRealChildIds == null) {          return false;        }        for (        String realChildId : sortedRealChildIds) {          final User user=getUserById(userId);          if (user == null) {            return false;          }          final Entry entry=getEntryById(realChildId);          if (!makeEntryLastChild(user,entry,errors)) {            return false;          }        }      }    }    for (    final Map.Entry<String,String> mapEntry : entryIdToRootRestoredEntryId.entrySet()) {      final User user=getUserById(userId);      if (user == null) {        return false;      }      final String notebookId=mapEntry.getKey();      final String restoredRootId=mapEntry.getValue();      final String rootId=restoredEntryIdToRealEntryId.get(restoredRootId);      if (rootId == null) {        Errors.add(errors,errorMessages.errorRootIdWasNotFound(restoredRootId));        return false;      }      final Entry notebook=getEntryById(notebookId);      final Entry root=getEntryById(rootId);      if (!root.getType().equals(Constants.root)) {        Errors.add(errors,errorMessages.errorRootIdWasNotARoot(restoredRootId));        return false;      }      rootRestoredEntryIds.remove(restoredRootId);      notebook.setRootId(rootId);      root.setNotebookId(notebookId);    }    if (!rootRestoredEntryIds.isEmpty()) {      Errors.add(errors,errorMessages.errorNotAllRootsHadNotebooks());      return false;    }  } catch (  final IOException e) {    Errors.add(errors,errorMessages.errorJson());    return false;  }  return true;}  }
class C{  public void invalidateLayout(Container target){}  }
class C{  public static void print(int[] deck){  String[] ranks={"Ace","2","3","4","5","6","7","8","9","10","Jack","Queen","King"};  System.out.print("The number of picks that yields the sum of 24: ");  for (int i=0; i < deck.length; i++) {    if (deck[i] > 0)     System.out.print(ranks[i % 13] + " ");  }  System.out.println();}  }
class C{  protected ParseObject decodePointer(String className,String objectId){  return ParseObject.createWithoutData(className,objectId);}  }
class C{  protected static QualifiedName prepend(String segment,QualifiedName suffix){  if (segment == null) {    return suffix;  }  QualifiedName qn=QualifiedName.create(segment);  if (suffix != null) {    qn=qn.append(suffix);  }  return qn;}  }
class C{  public static <Z extends HasDefaults>SettingInputComponent<Z> buildTextComponent(final String label,final String description,final JTextComponent component,final Function<Z,String> settingsModelReader,final BiConsumer<Z,String> settingsModelWriter,final InputValidator... validators){  JPanel panel=new JPanel();  panel.add(component);  return build(panel,new LabelDescription(label,description),new SwingComponentReaderWriter(null,null),new SettingsModelReaderWriter<>(settingsModelReader,settingsModelWriter),validators);}  }
class C{  public CounterSetBTreeTupleSerializer(final IKeyBuilderFactory keyBuilderFactory){  super(keyBuilderFactory);}  }
class C{  private void doLoad(DistributionPrefsForm frm,String distPrefId){  DistributionPrefDAO dpDao=new DistributionPrefDAO();  DistributionPref dp=dpDao.get(new Long(distPrefId));  frm.setDistType(dp.getDistributionType().getUniqueId().toString());  frm.setStructure(dp.getStructure());  frm.setOwner(dp.getOwner().getUniqueId().toString());  frm.setPrefLevel(dp.getPrefLevel().getPrefId().toString());  frm.setDistPrefId(distPrefId);  org.hibernate.Session hibSession=dpDao.getSession();  StringBuffer query=new StringBuffer("");  query.append("select sa.uniqueId, co.uniqueId, su.uniqueId, -1,  do.sequenceNumber ");  query.append("  from ");  query.append("       DistributionObject do, ");  query.append("       SchedulingSubpart su, ");  query.append("       InstrOfferingConfig ioc, ");  query.append("       InstructionalOffering io, ");  query.append("       CourseOffering co, ");  query.append("       SubjectArea sa ");  query.append(" where co.isControl=true ");  query.append("   and do.distributionPref.uniqueId=:distPrefId ");  query.append("   and do.prefGroup.uniqueId=su.uniqueId ");  query.append("   and su.instrOfferingConfig.uniqueId=ioc.uniqueId ");  query.append("   and ioc.instructionalOffering.uniqueId=io.uniqueId ");  query.append("   and co.instructionalOffering.uniqueId=io.uniqueId ");  query.append("   and co.subjectArea.uniqueId=sa.uniqueId ");  Query q=hibSession.createQuery(query.toString());  q.setLong("distPrefId",Long.parseLong(distPrefId));  List distPrefs1=q.list();  StringBuffer query2=new StringBuffer("");  query2.append("select sa.uniqueId, co.uniqueId, su.uniqueId, c.uniqueId, do.sequenceNumber ");  query2.append("  from ");  query2.append("       DistributionObject do, ");  query2.append("       Class_ c, ");  query2.append("       SchedulingSubpart su, ");  query2.append("       InstrOfferingConfig ioc, ");  query2.append("       InstructionalOffering io, ");  query2.append("       CourseOffering co, ");  query2.append("       SubjectArea sa ");  query2.append(" where co.isControl=true ");  query2.append("   and do.distributionPref.uniqueId=:distPrefId ");  query2.append("   and do.prefGroup.uniqueId=c.uniqueId ");  query2.append("   and c.schedulingSubpart.uniqueId=su.uniqueId ");  query2.append("   and su.instrOfferingConfig.uniqueId=ioc.uniqueId ");  query2.append("   and ioc.instructionalOffering.uniqueId=io.uniqueId ");  query2.append("   and co.instructionalOffering.uniqueId=io.uniqueId ");  query2.append("   and co.subjectArea.uniqueId=sa.uniqueId ");  q=hibSession.createQuery(query2.toString());  q.setLong("distPrefId",Long.parseLong(distPrefId));  List distPrefs2=q.list();  ArrayList distPrefs=new ArrayList();  if (distPrefs1 != null && distPrefs1.size() > 0)   distPrefs.addAll(distPrefs1);  if (distPrefs2 != null && distPrefs2.size() > 0)   distPrefs.addAll(distPrefs2);  if (distPrefs != null && distPrefs.size() > 0) {    Iterator iter=distPrefs.iterator();    int i=0;    while (iter.hasNext()) {      Object[] rec=(Object[])iter.next();      int indx;      if (rec[4] == null) {        indx=i;      } else {        indx=((Integer)rec[4]).intValue() - 1;      }      frm.setSubjectArea(indx,rec[0].toString());      frm.setCourseNbr(indx,rec[1].toString());      frm.setItype(indx,rec[2].toString());      frm.setClassNumber(indx,rec[3].toString());      i++;    }  }}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  public static int hashSearchOrInsert(final long[] hashTable,final int lgArrLongs,final long hash){  final int arrayMask=(1 << lgArrLongs) - 1;  final int stride=getStride(hash,lgArrLongs);  int curProbe=(int)(hash & arrayMask);  while (hashTable[curProbe] != 0) {    if (hashTable[curProbe] == hash)     return curProbe;    curProbe=(curProbe + stride) & arrayMask;  }  hashTable[curProbe]=hash;  return ~curProbe;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  @Override public int read(byte[] buf,int offset,int length) throws IOException {  try {    if (_channel == null) {      return -1;    }    int remaining=_readBuffer.remaining();    if (remaining > 0) {      _readBuffer.get(buf,offset,remaining);      return remaining;    }    _readBuffer.clear();    int channelRead=_channel.read(_readBuffer);    _readBuffer.flip();    if (channelRead < 0)     return -1;    _readBuffer.get(buf,offset,channelRead);    return channelRead;  } catch (  InterruptedIOException e) {    if (_throwReadInterrupts)     throw e;    log.log(Level.FINEST,e.toString(),e);  }catch (  IOException e) {    if (_throwReadInterrupts)     throw e;    log.log(Level.FINER,e.toString(),e);  }  return -1;}  }
class C{  public void configureManagers(){}  }
class C{  public static void main(String[] args) throws Exception {  Project.initialize();  GenericObjectEditor.registerAllEditors();  EvaluationStatisticsFileChooser fchooser=new EvaluationStatisticsFileChooser();  int retVal=fchooser.showOpenDialog(null);  System.out.println("OK? " + (retVal == EvaluationStatisticsFileChooser.APPROVE_OPTION));  System.out.println("file: " + fchooser.getSelectedFile());  System.out.println("reader: " + OptionUtils.toCommandLine(fchooser.getReader()));  System.out.println("writer: " + OptionUtils.toCommandLine(fchooser.getWriter()));}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public IvParameterSpec(byte[] iv){  this(iv,0,iv.length);}  }
class C{  public int numVerticalFrames(){  return (int)Math.round((upper_zone_extents[zone - 1] - lower_zone_extents[zone - 1]) * (y_pix_constant / 90.0) / (1536.0));}  }
class C{  public cudaExtent(int width,int height,int depth){  this.width=width;  this.height=height;  this.depth=depth;}  }
class C{  public void bootstrapNetty(){  try {    final ServerBootstrap bootstrap=createServerBootStrap();    bootstrap.setOption("reuseAddr",true);    bootstrap.setOption("child.keepAlive",true);    bootstrap.setOption("child.tcpNoDelay",true);    bootstrap.setOption("child.sendBufferSize",Controller.SEND_BUFFER_SIZE);    ChannelPipelineFactory pfact=useSsl ? new OpenflowPipelineFactory(this,floodlightProvider.getTimer(),this,debugCounterService,keyStore,keyStorePassword) : new OpenflowPipelineFactory(this,floodlightProvider.getTimer(),this,debugCounterService);    bootstrap.setPipelineFactory(pfact);    InetSocketAddress sa=new InetSocketAddress(floodlightProvider.getOFPort());    final ChannelGroup cg=new DefaultChannelGroup();    cg.add(bootstrap.bind(sa));    log.info("Listening for switch connections on {}",sa);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isEmpty(){  return lo() - hi() == 2 * S2.M_PI;}  }
class C{  @RequestMapping(method=RequestMethod.DELETE,value="/{region}/{keys}",produces={MediaType.APPLICATION_JSON_VALUE}) @ApiOperation(value="delete data for key(s)",notes="Delete data for single key or specific keys in region",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK"),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="Region or key(s) does not exist"),@ApiResponse(code=500,message="GemFire throws an error or exception")}) @PreAuthorize("@securityService.authorize('WRITE', #region, #keys)") public ResponseEntity<?> delete(@PathVariable("region") String region,@PathVariable("keys") final String[] keys){  logger.debug("Delete data for key {} on region {}",ArrayUtils.toString((Object[])keys),region);  region=decode(region);  deleteValues(region,(Object[])keys);  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  public double[] subseriesByCopy(double[] series,int start,int end) throws IndexOutOfBoundsException {  if ((start > end) || (start < 0) || (end > series.length)) {    throw new IndexOutOfBoundsException("Unable to extract subseries, series length: " + series.length + ", start: "+ start+ ", end: "+ String.valueOf(end - start));  }  return Arrays.copyOfRange(series,start,end);}  }
class C{  public static String removeExtraSpaces(String text){  text=text.replace(ChineseLanguageConstants.SPACE[0],ChineseLanguageConstants.SPACE[1]);  text=text.replaceAll("[ \t\u000B\u000C\u00A0\uE5F1]+"," ");  text=text.replaceAll("(^ +)|( +$)","");  return text;}  }
class C{  public void assureReadOnly(boolean useAlias) throws SQLException {  Connection connection=null;  try {    connection=getNewConnection(useAlias ? "&readOnlyPropagatesToServer=true" : "&assureReadOnly=true",false);    Statement stmt=connection.createStatement();    stmt.execute("drop table  if exists replicationDelete" + jobId);    stmt.execute("create table replicationDelete" + jobId + " (id int not null primary key auto_increment, test VARCHAR(10))");    connection.setReadOnly(true);    assertTrue(connection.isReadOnly());    try {      if (!isMariaDbServer(connection) || !requireMinimumVersion(connection,5,7)) {        Assume.assumeTrue(false);      }      connection.createStatement().execute("drop table  if exists replicationDelete" + jobId);      fail();    } catch (    SQLException e) {    }  }  finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public boolean equalArguments(Type t){  return false;}  }
class C{  public void removeAll(){  while (getSize() > 0) {    removeItem(0);  }}  }
class C{  public static void addHeaders(BoundRequestBuilder builder,Map<String,String> headerMap){  for (  Entry<String,String> entry : headerMap.entrySet()) {    String name=entry.getKey();    String value=entry.getValue();    builder.addHeader(name,value);  }}  }
class C{  public void testWithMimeMagic(){  for (  String[] testPage : textBasedFormats) {    String mimeType=getMimeType(urlPrefix,testPage[3].getBytes(defaultCharset),testPage[2],true);    assertEquals("",testPage[0],mimeType);  }}  }
class C{  public boolean hasExpired(){  return System.currentTimeMillis() >= expiration;}  }
class C{  public CSVReaderBuilder withVerifyReader(boolean verifyReader){  this.verifyReader=verifyReader;  return this;}  }
class C{  static public String toString(ArrayList value){  String str="";  for (int i=0; i < value.size(); i++) {    if (i > 0)     str+=" ";    str+=(String)value.get(i);  }  return str;}  }
class C{  public java.lang.StringBuffer append(java.lang.String str){  return null;}  }
class C{  public synchronized boolean isLoggable(Level msgLevel){  if (msgLevel.equals(Level.ALL)) {    return (true);  } else {    return (msgLevel.intValue() >= this.level.intValue());  }}  }
class C{  public void endVisit(PostfixExpression node){}  }
class C{  public AngularObject remove(String name,String noteId,String paragraphId,boolean emit){synchronized (registry) {    Map<String,AngularObject> r=getRegistryForKey(noteId,paragraphId);    AngularObject o=r.remove(name);    if (listener != null && emit) {      listener.onRemove(interpreterId,name,noteId,paragraphId);      ;    }    return o;  }}  }
class C{  private void checkEngineStates(){  try {    for (    String engine : dataManager.getChildren(BASE_PATH)) {      Long lastHeartBeat=getHeartBeat(engine);      if (lastHeartBeat != null) {        long age=System.currentTimeMillis() - lastHeartBeat;        if (age >= MAX_AGE) {          removeEngineState(engine);        }      }    }  } catch (  Exception e) {    log.error("Error checking Engine States",e);  }}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (true);}  }
class C{  @PreDestroy public void close(){  if (node != null) {    node.close();  }  if (client != null) {    client.close();    client=null;  }}  }
class C{  public ButtonColumn(JTable table,Action action,int column){  this.table=table;  this.action=action;  renderButton=new JButton();  editButton=new JButton();  editButton.setFocusPainted(false);  editButton.addActionListener(this);  originalBorder=editButton.getBorder();  setFocusBorder(new LineBorder(Color.BLUE));  TableColumnModel columnModel=table.getColumnModel();  columnModel.getColumn(column).setCellRenderer(this);  columnModel.getColumn(column).setCellEditor(this);  table.addMouseListener(this);}  }
class C{  SignedMutableBigInteger(MutableBigInteger val){  super(val);}  }
class C{  public void vetoableChange(PropertyChangeEvent pce) throws PropertyVetoException {  String propertyName=pce.getPropertyName();  Object source=pce.getSource();synchronized (children) {    if ("beanContext".equals(propertyName) && containsKey(source) && !getBeanContextPeer().equals(pce.getNewValue())) {      if (!validatePendingRemove(source)) {        throw new PropertyVetoException("current BeanContext vetoes setBeanContext()",pce);      } else       ((BCSChild)children.get(source)).setRemovePending(true);    }  }}  }
class C{  public Object assignIdValue(Object data,Number val,ObjectCache objectCache) throws SQLException {  Object idVal=dataPersister.convertIdNumber(val);  if (idVal == null) {    throw new SQLException("Invalid class " + dataPersister + " for sequence-id "+ this);  } else {    assignField(data,idVal,false,objectCache);    return idVal;  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicPasswordFieldUI();}  }
class C{  public void shutdown(){  CountDownLatch wait_l;synchronized (this) {    wait_l=waitShutdown;  }  Shutdown_ind=true;  try {    if (wait_l != null) {      if (wait_l.await(3000,TimeUnit.MILLISECONDS))       LOG.info("echo service shutdown complete"); else       LOG.warn("timeout waiting for echo service shutdown");    } else {      LOG.info("echo service shutdown: service does not appear to be active");    }  } catch (  InterruptedException int_exc) {    LOG.warn("interrupted while waiting for echo service shutdown");  }}  }
class C{  public static boolean registerMask(CustomMask mask){  try {    Field field=AbstractFactory.class.getDeclaredField("parsers");    field.setAccessible(true);    List<InputParser> parsers=(List<InputParser>)field.get(WorldEdit.getInstance().getMaskFactory());    for (    InputParser parser : parsers) {      if (parser instanceof DefaultMaskParser) {        ((DefaultMaskParser)parser).addMask(mask);        return true;      }    }  } catch (  Throwable e) {    throw new RuntimeException(e);  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.BINDING_PATTERN__PROPERTIES:    getProperties().clear();  return;case N4JSPackage.BINDING_PATTERN__ELEMENTS:getElements().clear();return;}super.eUnset(featureID);}  }
class C{  public boolean ignoreColors(){  return true;}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  EcorePackage theEcorePackage=(EcorePackage)EPackage.Registry.INSTANCE.getEPackage(EcorePackage.eNS_URI);  preValidationEClass.getESuperTypes().add(this.getValidationMarker());  postValidationEClass.getESuperTypes().add(this.getValidationMarker());  initEClass(validationMarkerEClass,ValidationMarker.class,"ValidationMarker",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getValidationMarker_DelegateResource(),theEcorePackage.getEResource(),"delegateResource",null,0,1,ValidationMarker.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getValidationMarker__EResource(),theEcorePackage.getEResource(),"eResource",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(preValidationEClass,PreValidation.class,"PreValidation",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(postValidationEClass,PostValidation.class,"PostValidation",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  createResource(eNS_URI);}  }
class C{  private void install(){  editor.getViewer().prependVerifyKeyListener(this);  editor.getViewer().getTextWidget().addFocusListener(this);  editor.setStatusMessage("Example command.");}  }
class C{  public UnicodeTranslatorEur(){}  }
class C{  public void testMemberGetters(){  Instant instant=Instant.now();  ServerMember member=new ServerMember(Member.Type.ACTIVE,new Address("localhost",5000),new Address("localhost",6000),instant);  assertEquals(member.type(),Member.Type.ACTIVE);  assertEquals(member.status(),ServerMember.Status.AVAILABLE);  assertEquals(member.serverAddress(),new Address("localhost",5000));  assertEquals(member.clientAddress(),new Address("localhost",6000));  assertEquals(member.updated(),instant);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.example.com/";  String qualifiedName;  Document doc;  boolean done;  Element newElement;  String charact;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      newElement=doc.createElementNS(namespaceURI,"");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public void renderBlock(RenderContext rc,boolean terminate){  render(rc);  boolean terminal=(terminate) && isTerminal();  if (terminate && !terminal) {    rc.getOut().mark(FilePosition.endOfOrNull(getFilePosition()));    rc.getOut().consume(";");  }}  }
class C{  public int read(byte[] b,int off,int n) throws IOException {  if (this.len < 0)   return -1;  int offInit=off;  while (n > 0 && this.len > 0) {    int toCopy=Math.min(n,this.len - this.curr);    System.arraycopy(this.buff,this.curr,b,off,toCopy);    this.curr+=toCopy;    off+=toCopy;    n-=toCopy;    if (this.curr == this.len) {      this.len=this.in.read(this.buff);      Assert.check(this.len != 0,EC.SYSTEM_STREAM_EMPTY);      this.curr=0;    }  }  return off - offInit;}  }
class C{  @Override public Void removeTableTags(QualifiedName name,Boolean deleteAll,Set<String> tags,boolean updateUserMetadata){  if (deleteAll != null && deleteAll) {    delete(name,updateUserMetadata);  } else {    remove(name,tags,updateUserMetadata);  }  return null;}  }
class C{  public static BasicOCSPResp loadOCSPBase64Encoded(final String base64Encoded) throws IOException, OCSPException {  final byte[] derEncoded=Base64.decodeBase64(base64Encoded);  final OCSPResp ocspResp=new OCSPResp(derEncoded);  final BasicOCSPResp basicOCSPResp=(BasicOCSPResp)ocspResp.getResponseObject();  return basicOCSPResp;}  }
class C{  private void extendColourMap(){  if (m_plotInstances.attribute(m_cIndex).isNominal()) {    for (int i=m_colorList.size(); i < m_plotInstances.attribute(m_cIndex).numValues(); i++) {      Color pc=m_DefaultColors[i % 10];      int ija=i / 10;      ija*=2;      for (int j=0; j < ija; j++) {        pc=pc.brighter();      }      if (m_backgroundColor != null) {        pc=Plot2D.checkAgainstBackground(pc,m_backgroundColor);      }      m_colorList.add(pc);    }  }}  }
class C{  static void write() throws SQLException {  SimpleResultSet rs=new SimpleResultSet();  rs.addColumn("NAME",Types.VARCHAR,255,0);  rs.addColumn("EMAIL",Types.VARCHAR,255,0);  rs.addColumn("PHONE",Types.VARCHAR,255,0);  rs.addRow("Bob Meier","bob.meier@abcde.abc","+41123456789");  rs.addRow("John Jones","john.jones@abcde.abc","+41976543210");  new Csv().write("data/test.csv",rs,null);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.CASE_CLAUSE__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private static boolean requiresRepartitioning(CacheType type,MatrixCharacteristics mcRdd,MatrixCharacteristics mcBc,int numPartitions){  boolean isLeft=(type == CacheType.LEFT);  boolean isOuter=isLeft ? (mcRdd.getRows() <= mcRdd.getRowsPerBlock()) : (mcRdd.getCols() <= mcRdd.getColsPerBlock());  boolean isLargeOutput=(OptimizerUtils.estimatePartitionedSizeExactSparsity(isLeft ? mcBc.getRows() : mcRdd.getRows(),isLeft ? mcRdd.getCols() : mcBc.getCols(),isLeft ? mcBc.getRowsPerBlock() : mcRdd.getRowsPerBlock(),isLeft ? mcRdd.getColsPerBlock() : mcBc.getColsPerBlock(),1.0) / numPartitions) > 1024 * 1024 * 1024;  return isOuter && isLargeOutput && mcRdd.dimsKnown()&& mcBc.dimsKnown();}  }
class C{  public void makeClass(String str,boolean caseless){  for (int i=0; i < str.length(); ) {    int ch=str.codePointAt(i);    makeClass(ch,caseless);    i+=Character.charCount(ch);  }}  }
class C{  protected void updateShapeAnnotation(){  LatLon center=this.getShapeCenter();  if (center != null) {    ControlPointMarker dummyMarker=this.makeControlPoint(new Position(center,0),new BasicMarkerAttributes(),0,ANNOTATION);    this.updateAnnotation(dummyMarker);  } else {    this.updateAnnotation(null);  }}  }
class C{  public DeletionConstraintException(){  super();}  }
class C{  public LongAdder(){}  }
class C{  public static String revertNewLines(String string){  int index;  StringBuffer newStringBuffer=new StringBuffer();  while ((index=string.indexOf("\\n")) != -1) {    if (index > 0) {      newStringBuffer.append(string.substring(0,index));    }    newStringBuffer.append('\n');    if ((index + 2) < string.length()) {      string=string.substring(index + 2);    } else {      string="";    }  }  newStringBuffer.append(string);  string=newStringBuffer.toString();  newStringBuffer=new StringBuffer();  while ((index=string.indexOf("\\r")) != -1) {    if (index > 0) {      newStringBuffer.append(string.substring(0,index));    }    newStringBuffer.append('\r');    if ((index + 2) < string.length()) {      string=string.substring(index + 2);    } else {      string="";    }  }  newStringBuffer.append(string);  return newStringBuffer.toString();}  }
class C{  public static Document createXMLValidationList(ValidationResults results,int initRow,int enabled,int idCrl,int typeId,int typeBusc,int frmData,int fldId,Locale locale,String name,String ref,Map parentNames,List fieldsInfo,String caseSensitive){  Document doc=createDocument(initRow,results,RBUtil.getInstance(locale).getProperty(I18N_VALIDATIONUSECASE_TYPEADM),name,ref,fieldsInfo,locale,caseSensitive,frmData,fldId);  Element node=doc.getRootElement().element(XML_CONTEXT_TEXT);  if (node != null) {    node.addElement(XML_IDCRL_TEXT).addText(Integer.toString(idCrl));    node.addElement(XML_TYPEID_TEXT).addText(Integer.toString(typeId));    node.addElement(XML_TYPEBUSC_TEXT).addText(Integer.toString(typeBusc));  }  Element root=doc.getRootElement();  Element nodeList=root.addElement(XML_NODELIST_TEXT);  if (results.getResults().isEmpty()) {    addNode(Integer.MIN_VALUE,"","","",null,"",-1,"",nodeList,ref);  } else {    Object object=null;    for (Iterator it=results.getResults().iterator(); it.hasNext(); ) {      object=it.next();      if (object instanceof ScrTypeadm || object instanceof ScrTypeadmeu || object instanceof ScrTypeadmgl|| object instanceof ScrTypeadmct) {        addNodeAdm(object,nodeList);      } else       if (object instanceof ScrOrg || object instanceof ScrOrgeu || object instanceof ScrOrggl|| object instanceof ScrOrgct) {        addNodeOrg(object,parentNames,nodeList);      }    }  }  return doc;}  }
class C{  public PasswordInputCanceledException(){  super(I18N.getErrorMessage("repository.password_input_canceled"));}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  public InlineView(Element elem){  super(elem);  StyleSheet sheet=getStyleSheet();  attr=sheet.getViewAttributes(this);}  }
class C{  public void addUniqueAttribute(String rawName,String value,int flags) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.addUniqueAttribute(rawName,value,flags);}  }
class C{  public void fixHttpsURLConnection(){  HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());}  }
class C{  @Override protected void registerSelf(){}  }
class C{  @Override public String toString(){  final StringBuilder connectionStringBuilder=new StringBuilder();  if (this.endpoint != null) {    connectionStringBuilder.append(String.format(Locale.US,"%s%s%s%s",EndpointConfigName,KeyValueSeparator,this.endpoint.toString(),KeyValuePairDelimiter));  }  if (!StringUtil.isNullOrWhiteSpace(this.entityPath)) {    connectionStringBuilder.append(String.format(Locale.US,"%s%s%s%s",EntityPathConfigName,KeyValueSeparator,this.entityPath,KeyValuePairDelimiter));  }  if (!StringUtil.isNullOrWhiteSpace(this.sharedAccessKeyName)) {    connectionStringBuilder.append(String.format(Locale.US,"%s%s%s%s",SharedAccessKeyNameConfigName,KeyValueSeparator,this.sharedAccessKeyName,KeyValuePairDelimiter));  }  if (!StringUtil.isNullOrWhiteSpace(this.sharedAccessKey)) {    connectionStringBuilder.append(String.format(Locale.US,"%s%s%s",SharedAccessKeyConfigName,KeyValueSeparator,this.sharedAccessKey));  }  if (this.operationTimeout != null) {    connectionStringBuilder.append(String.format(Locale.US,"%s%s%s%s",KeyValuePairDelimiter,OperationTimeoutConfigName,KeyValueSeparator,this.operationTimeout.toString()));  }  if (this.retryPolicy != null) {    connectionStringBuilder.append(String.format(Locale.US,"%s%s%s%s",KeyValuePairDelimiter,RetryPolicyConfigName,KeyValueSeparator,this.retryPolicy.toString()));  }  return connectionStringBuilder.toString();}  }
class C{  public static double rankInterpolated(DoubleArrayList sortedList,double element){  int index=sortedList.binarySearch(element);  if (index >= 0) {    int to=index + 1;    int s=sortedList.size();    while (to < s && sortedList.get(to) == element)     to++;    return to;  }  int insertionPoint=-index - 1;  if (insertionPoint == 0 || insertionPoint == sortedList.size())   return insertionPoint;  double from=sortedList.get(insertionPoint - 1);  double to=sortedList.get(insertionPoint);  double delta=(element - from) / (to - from);  return insertionPoint + delta;}  }
class C{  public boolean isPathEditable(TreePath path){  return isEditable();}  }
class C{  public void addListener(final ITraceContainerListener listener){  m_listeners.addListener(listener);}  }
class C{  public void startContactsUpload(){  startContactsUpload(R.style.Digits_default);}  }
class C{  public NotificationChain basicSet_lok(LocalArgumentsVariable new_lok,NotificationChain msgs){  LocalArgumentsVariable old_lok=_lok;  _lok=new_lok;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_METHOD_DECLARATION__LOK,old_lok,new_lok);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private NetworkBuilder(boolean directed){  this.directed=directed;}  }
class C{  @Override public void deleteAll(DBIDs ids){  throw new NotImplementedException();}  }
class C{  private final void handleDecreaseIndent(Element elem,Document doc,int tabSize) throws BadLocationException {  int start=elem.getStartOffset();  int end=elem.getEndOffset() - 1;  doc.getText(start,end - start,s);  int i=s.offset;  end=i + s.count;  if (end > i) {    if (s.array[i] == '\t') {      doc.remove(start,1);    } else     if (s.array[i] == ' ') {      i++;      int toRemove=1;      while (i < end && s.array[i] == ' ' && toRemove < tabSize) {        i++;        toRemove++;      }      doc.remove(start,toRemove);    }  }}  }
class C{  public File createManifestFile(String name,String ext){  return createFile(getDefaultManifestFilename(name,ext),false);}  }
class C{  public <Type extends DataSet>OnLineStatistics[] evaluateFeatureImportance(DataSet<Type> data,TreeFeatureImportanceInference imp){  OnLineStatistics[] importances=new OnLineStatistics[data.getNumFeatures()];  for (int i=0; i < importances.length; i++)   importances[i]=new OnLineStatistics();  for (  ExtraTree tree : forrest) {    double[] feats=imp.getImportanceStats(tree,data);    for (int i=0; i < importances.length; i++)     importances[i].add(feats[i]);  }  return importances;}  }
class C{  @Override public void process(final DM dm,ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"DistTXRollbackReplyMessage process invoking reply processor with processorId:{}",this.processorId);  }  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"DistTXRollbackReplyMessage processor not found");    }    return;  }  processor.process(this);}  }
class C{  private static void injectCastFunction(IFunctionInfo funcInfo,IAType reqType,IAType inputType,Mutable<ILogicalExpression> exprRef,ILogicalExpression argExpr) throws AlgebricksException {  ScalarFunctionCallExpression cast=new ScalarFunctionCallExpression(funcInfo);  cast.getArguments().add(new MutableObject<ILogicalExpression>(argExpr));  exprRef.setValue(cast);  TypeCastUtils.setRequiredAndInputTypes(cast,reqType,inputType);}  }
class C{  public XmlSyntaxModel buildSyntax(){  return buildSyntax(theEntityContext);}  }
class C{  public boolean requestRouteToHostAddress(int networkType,InetAddress hostAddress){  byte[] address=hostAddress.getAddress();  try {    return mService.requestRouteToHostAddress(networkType,address);  } catch (  RemoteException e) {    return false;  }}  }
class C{  public SearchRequest extraSource(BytesReference source){  this.extraSource=source;  return this;}  }
class C{  @Override @SuppressWarnings("unchecked") public void subscribe(Subscriber<? super O> s){  source.subscribe((Subscriber<? super I>)s);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.INT_LITERAL__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public HttpConnection(final String proxyHost,final int proxyPort,final String host,final int port,final Protocol protocol){  if (host == null) {    throw new IllegalArgumentException("host parameter is null");  }  if (protocol == null) {    throw new IllegalArgumentException("protocol is null");  }synchronized (syncLastID) {    ID=++lastID;  }  proxyHostName=proxyHost;  proxyPortNumber=proxyPort;  hostName=host;  portNumber=protocol.resolvePort(port);  protocolInUse=protocol;}  }
class C{  public static boolean isFloatingPoint(FTypeRef typeRef){  return isFloat(typeRef) || isDouble(typeRef);}  }
class C{  protected void handleReplaceSelection(String content){  super.replaceSelection(content);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.SYMBOL_TABLE_ENTRY__NAME:    return getName();case ImPackage.SYMBOL_TABLE_ENTRY__ELEMENTS_OF_THIS_NAME:  return getElementsOfThisName();case ImPackage.SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS:return getReferencingElements();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void serverHeartbeat(UpdateServerHeartbeat serverUpdate){  updateServerStart(serverUpdate);  updateHeartbeats();}  }
class C{  protected String handleLong(ResultSet rs,int columnIndex) throws SQLException {  long lv=rs.getLong(columnIndex);  return rs.wasNull() ? "" : Long.toString(lv);}  }
class C{  public final void printLatin1(char[] buffer,int offset,int length) throws IOException {  StreamImpl source=_source;  if (source == null) {    return;  }  byte[] writeBuffer=_writeBuffer;  int writeLength=_writeLength;  while (true) {    int sublen=Math.min(length,writeBuffer.length - writeLength);    for (int i=sublen - 1; i >= 0; i--) {      char ch=buffer[offset + i];      writeBuffer[writeLength + i]=LATIN1[ch];    }    if (length == sublen) {      _writeLength=writeLength + sublen;      return;    }    writeLength+=sublen;    offset+=sublen;    length-=sublen;    source.write(writeBuffer,0,writeLength,false);    _position+=writeLength;    _isFlushRequired=true;    writeLength=0;  }}  }
class C{  private void scan(CallGraphNode node) throws CFGBuilderException {  Method method=node.getMethod();  CFG cfg=classContext.getCFG(method);  if (method.isSynchronized()) {    hasSynchronization=true;  }  Iterator<BasicBlock> i=cfg.blockIterator();  while (i.hasNext()) {    BasicBlock block=i.next();    Iterator<InstructionHandle> j=block.instructionIterator();    while (j.hasNext()) {      InstructionHandle handle=j.next();      Instruction ins=handle.getInstruction();      if (ins instanceof InvokeInstruction) {        InvokeInstruction inv=(InvokeInstruction)ins;        Method called=isSelfCall(inv);        if (called != null) {          CallSite callSite=new CallSite(method,block,handle);          callGraph.createEdge(node,callGraph.getNodeForMethod(called),callSite);          calledMethodSet.add(called);        }      } else       if (ins instanceof MONITORENTER || ins instanceof MONITOREXIT) {        hasSynchronization=true;      }    }  }}  }
class C{  public KeyedVersions(KeyedVersions other){  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersions()) {    List<VectorClock> __this__versions=new ArrayList<VectorClock>();    for (    VectorClock other_element : other.versions) {      __this__versions.add(new VectorClock(other_element));    }    this.versions=__this__versions;  }}  }
class C{  protected boolean isInSubtree(String elementName,String subtreeName){  if (elementName.equals(subtreeName)) {    return true;  }  String[] children=getChildNames(elementName);  for (int i=0; i < children.length; i++) {    if (isInSubtree(elementName,children[i])) {      return true;    }  }  return false;}  }
class C{  public void clearAlarms(){  alarms.clear();}  }
class C{  public CreatureProtectionArea(){  this(1,1);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.METHOD_DECLARATION__TYPE_VARS:    getTypeVars().clear();  return;case N4JSPackage.METHOD_DECLARATION__DECLARED_TYPE_REF:setDeclaredTypeRef((TypeRef)null);return;case N4JSPackage.METHOD_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)null);return;case N4JSPackage.METHOD_DECLARATION__DECLARED_NAME:setDeclaredName((LiteralOrComputedPropertyName)null);return;}super.eUnset(featureID);}  }
class C{  public static Automaton makeAnyChar(){  return makeCharRange(Character.MIN_CODE_POINT,Character.MAX_CODE_POINT);}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  public boolean offer(E e){  buffer.offer(e);  if (consumer != null) {    consumer.wakeUp();  }  return true;}  }
class C{  public void testMaxUnequal1(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=24;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.max(bNumber));}  }
class C{  public SMOset(int size){  m_indicators=new boolean[size];  m_next=new int[size];  m_previous=new int[size];  m_number=0;  m_first=-1;}  }
class C{  public static <S extends HasDragResizeStopHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DragResizeStopEvent event=new DragResizeStopEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public boolean isOptOut(){synchronized (optOutLock) {    try {      configuration.load(getConfigFile());    } catch (    IOException ex) {      if (debug) {        Bukkit.getLogger().log(Level.INFO,"[Metrics] " + ex.getMessage());      }      return true;    }catch (    InvalidConfigurationException ex) {      if (debug) {        Bukkit.getLogger().log(Level.INFO,"[Metrics] " + ex.getMessage());      }      return true;    }    return configuration.getBoolean("opt-out",false);  }}  }
class C{  public final boolean sendMessageDelayed(Message msg,long delayMillis){  return mExec.sendMessageDelayed(msg,delayMillis);}  }
class C{  public static TimestampRecord timestamp(MessageRecord record){  log.trace("timestamp()");  try {    return (TimestampRecord)ask(new TimestampMessage(record.getId()));  } catch (  Exception e) {    throw translateWithPrefix(X_TIMESTAMPING_FAILED_X,e);  }}  }
class C{  public static void stopJarVerification(Object obj){  endThreadProviderList((ProviderList)obj);}  }
class C{  public thead addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public boolean isNetPrice(){  Object oo=get_Value(COLUMNNAME_IsNetPrice);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void shutdown(final File homePath){  System.out.println(copyright);  System.out.println(hline);  submitURL(homePath,"Steering.html?shutdown=","Terminate YaCy");}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("base calendar: [");  if (getBaseCalendar() != null) {    buffer.append(getBaseCalendar().toString());  } else {    buffer.append("null");  }  buffer.append("], excluded cron expression: '");  buffer.append(cronExpression);  buffer.append("'");  return buffer.toString();}  }
class C{  @Override public void close() throws IOException {  while (in != null) {    nextStream();  }  e=null;}  }
class C{  public static LineChart criar(String titulo,String eixo,Map<String,List<Relatorio>> map){  config(titulo);  eixoX=new CategoryAxis();  eixoY=new NumberAxis();  grafico=new LineChart<>(eixoX,eixoY);  for (  String chave : map.keySet()) {    XYChart.Series<String,Number> serie=new XYChart.Series<>();    serie.setName(chave);    List<Relatorio> relatorios=map.get(chave);    for (    Relatorio relatorio : relatorios) {      XYChart.Data dado=new XYChart.Data(relatorio.getData(),relatorio.getTotal());      dado.setNode(info(relatorio.getTotal()));      serie.getData().add(dado);    }    grafico.getData().add(serie);  }  return grafico;}  }
class C{  public boolean isServiceClass(Class service){  return serviceClass.equals(service);}  }
class C{  public ContourPlot(ContourDataset dataset,ValueAxis domainAxis,ValueAxis rangeAxis,ColorBar colorBar){  super();  this.dataset=dataset;  if (dataset != null) {    dataset.addChangeListener(this);  }  this.domainAxis=domainAxis;  if (domainAxis != null) {    domainAxis.setPlot(this);    domainAxis.addChangeListener(this);  }  this.rangeAxis=rangeAxis;  if (rangeAxis != null) {    rangeAxis.setPlot(this);    rangeAxis.addChangeListener(this);  }  this.colorBar=colorBar;  if (colorBar != null) {    colorBar.getAxis().setPlot(this);    colorBar.getAxis().addChangeListener(this);    colorBar.configure(this);  }  this.colorBarLocation=RectangleEdge.LEFT;  this.toolTipGenerator=new StandardContourToolTipGenerator();}  }
class C{  StringBuilder fwdQuote(char q){  StringBuilder sb=new StringBuilder();  while (hasNext()) {    next();    sb.append(buffer[pos]);    if (isCurr(q)) {      if (isNext(q)) {        next();      } else {        break;      }    }  }  if (sb.length() > 0)   sb.setLength(sb.length() - 1);  return sb;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private void moveStagedEventsToDispatchQueue(){synchronized (mEventsStagingLock) {synchronized (mEventsToDispatchLock) {      for (int i=0; i < mEventStaging.size(); i++) {        Event event=mEventStaging.get(i);        if (!event.canCoalesce()) {          addEventToEventsToDispatch(event);          continue;        }        long eventCookie=getEventCookie(event.getViewTag(),event.getEventName(),event.getCoalescingKey());        Event eventToAdd=null;        Event eventToDispose=null;        Integer lastEventIdx=mEventCookieToLastEventIdx.get(eventCookie);        if (lastEventIdx == null) {          eventToAdd=event;          mEventCookieToLastEventIdx.put(eventCookie,mEventsToDispatchSize);        } else {          Event lastEvent=mEventsToDispatch[lastEventIdx];          Event coalescedEvent=event.coalesce(lastEvent);          if (coalescedEvent != lastEvent) {            eventToAdd=coalescedEvent;            mEventCookieToLastEventIdx.put(eventCookie,mEventsToDispatchSize);            eventToDispose=lastEvent;            mEventsToDispatch[lastEventIdx]=null;          } else {            eventToDispose=event;          }        }        if (eventToAdd != null) {          addEventToEventsToDispatch(eventToAdd);        }        if (eventToDispose != null) {          eventToDispose.dispose();        }      }    }    mEventStaging.clear();  }}  }
class C{  protected TMember findNext(){  do {    while (currentIter.hasNext()) {      TMember m=currentIter.next();      if (!returnConsumed || source != IMPLEMENTED || !consumed.contains(m)) {        return m;      }    }    currentIter=nextIter();  } while (source >= 0);  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private boolean isFuel(Object obj){  Iterator<fuelEntry> currFuel=fuels.iterator();  while (currFuel.hasNext()) {    if (currFuel.next().fuel == obj)     return true;  }  return false;}  }
class C{  public static String fileAsString(String fileName){  File f=null;  BufferedReader reader=null;  try {    f=new File(fileName);    reader=new BufferedReader(new FileReader(f));    StringBuilder result=new StringBuilder(10000);    String line=null;    while ((line=reader.readLine()) != null) {      result.append(line + "\n");    }    return result.toString();  } catch (  IOException e) {    throw new RuntimeException("Error reading file: " + f.getAbsolutePath(),e);  } finally {    try {      reader.close();    } catch (    Throwable t) {    }  }}  }
class C{  public final boolean supports(String feature,String version){  return implementation.hasFeature(feature,version);}  }
class C{  private Expression compileOperation(Operation operation,int opPos) throws TransformerException {  int leftPos=getFirstChildPos(opPos);  int rightPos=getNextOpPos(leftPos);  operation.setLeftRight(compile(leftPos),compile(rightPos));  return operation;}  }
class C{  private boolean tryAndClaimPlanet(EntityPlayer player){  UUID playerUUID=EntityPlayer.getUUID(player.getGameProfile());  if (!homePlanets.containsKey(playerUUID)) {    Planet claimedPlanet=claimPlanet(player);    if (claimedPlanet != null) {      homePlanets.put(playerUUID,claimedPlanet);      return true;    } else {      MOLog.warn("%s could not claim planet.",player.getDisplayName().getFormattedText());    }  }  return false;}  }
class C{  private Hop processParameterizedBuiltinFunctionExpression(ParameterizedBuiltinFunctionExpression source,DataIdentifier target,HashMap<String,Hop> hops) throws ParseException, HopsException {  HashMap<String,Hop> paramHops=new HashMap<String,Hop>();  Hop pHop=null;  for (  String paramName : source.getVarParams().keySet()) {    pHop=processExpression(source.getVarParam(paramName),null,hops);    paramHops.put(paramName,pHop);  }  Hop currBuiltinOp=null;  if (target == null) {    target=createTarget(source);  }switch (source.getOpCode()) {case CDF:case INVCDF:case QNORM:case QT:case QF:case QCHISQ:case QEXP:case PNORM:case PT:case PF:case PCHISQ:case PEXP:    currBuiltinOp=constructDfHop(target.getName(),target.getDataType(),target.getValueType(),source.getOpCode(),paramHops);  break;case GROUPEDAGG:currBuiltinOp=new ParameterizedBuiltinOp(target.getName(),target.getDataType(),target.getValueType(),ParamBuiltinOp.GROUPEDAGG,paramHops);break;case RMEMPTY:currBuiltinOp=new ParameterizedBuiltinOp(target.getName(),target.getDataType(),target.getValueType(),ParamBuiltinOp.RMEMPTY,paramHops);break;case REPLACE:currBuiltinOp=new ParameterizedBuiltinOp(target.getName(),target.getDataType(),target.getValueType(),ParamBuiltinOp.REPLACE,paramHops);break;case ORDER:ArrayList<Hop> inputs=new ArrayList<Hop>();inputs.add(paramHops.get("target"));inputs.add(paramHops.get("by"));inputs.add(paramHops.get("decreasing"));inputs.add(paramHops.get("index.return"));currBuiltinOp=new ReorgOp(target.getName(),target.getDataType(),target.getValueType(),ReOrgOp.SORT,inputs);break;case TRANSFORM:currBuiltinOp=new ParameterizedBuiltinOp(target.getName(),target.getDataType(),target.getValueType(),ParamBuiltinOp.TRANSFORM,paramHops);break;case TRANSFORMAPPLY:currBuiltinOp=new ParameterizedBuiltinOp(target.getName(),target.getDataType(),target.getValueType(),ParamBuiltinOp.TRANSFORMAPPLY,paramHops);break;case TRANSFORMDECODE:currBuiltinOp=new ParameterizedBuiltinOp(target.getName(),target.getDataType(),target.getValueType(),ParamBuiltinOp.TRANSFORMDECODE,paramHops);break;case TRANSFORMMETA:currBuiltinOp=new ParameterizedBuiltinOp(target.getName(),target.getDataType(),target.getValueType(),ParamBuiltinOp.TRANSFORMMETA,paramHops);break;case TOSTRING:currBuiltinOp=new ParameterizedBuiltinOp(target.getName(),target.getDataType(),target.getValueType(),ParamBuiltinOp.TOSTRING,paramHops);break;default :LOG.error(source.printErrorLocation() + "processParameterizedBuiltinFunctionExpression() -- Unknown operation:  " + source.getOpCode());throw new ParseException(source.printErrorLocation() + "processParameterizedBuiltinFunctionExpression() -- Unknown operation:  " + source.getOpCode());}setIdentifierParams(currBuiltinOp,source.getOutput());currBuiltinOp.setAllPositions(source.getBeginLine(),source.getBeginColumn(),source.getEndLine(),source.getEndColumn());return currBuiltinOp;}  }
class C{  public int read(final InputStream is,final int contentLength){  if (is != null) {    try {      final int capacity=(contentLength > 0) ? (contentLength + 4096) : 4096;      final ByteArrayOutputStream buffer=new ByteArrayOutputStream(capacity);      int nRead;      final byte[] data=new byte[16384];      while ((nRead=is.read(data,0,data.length)) != -1) {        buffer.write(data,0,nRead);      }      buffer.flush();      read(buffer.toByteArray());    } catch (    final IOException e) {      Log.w(TAG,"Error reading data from stream",e);    }  } else {    status=STATUS_OPEN_ERROR;  }  try {    is.close();  } catch (  final Exception e) {    Log.w(TAG,"Error closing stream",e);  }  return status;}  }
class C{  public int readSynchSafeInt(){  int b1=readUnsignedByte();  int b2=readUnsignedByte();  int b3=readUnsignedByte();  int b4=readUnsignedByte();  return (b1 << 21) | (b2 << 14) | (b3 << 7)| b4;}  }
class C{  protected void registerForInput(){  RemoteKeyListener remoteKeyListener=new RemoteKeyListener();  setOnKeyListener(remoteKeyListener);  playPauseButton.setOnKeyListener(remoteKeyListener);  previousButton.setOnKeyListener(remoteKeyListener);  nextButton.setOnKeyListener(remoteKeyListener);  rewindButton.setOnKeyListener(remoteKeyListener);  fastForwardButton.setOnKeyListener(remoteKeyListener);}  }
class C{  public static long hash64(final byte[] data,int length){  return hash64(data,length,0xe17a1465);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.236 -0500",hash_original_method="4A4EC0979E3C48040C37CBDD240E0778",hash_generated_method="72AE707283996347832E3A05278E2AFD") private boolean checkForLeavingTouchModeAndConsume(KeyEvent event){  if (!mAttachInfo.mInTouchMode) {    return false;  }  final int action=event.getAction();  if (action != KeyEvent.ACTION_DOWN && action != KeyEvent.ACTION_MULTIPLE) {    return false;  }  if ((event.getFlags() & KeyEvent.FLAG_KEEP_TOUCH_MODE) != 0) {    return false;  }  if (isNavigationKey(event)) {    return ensureTouchMode(false);  }  if (isTypingKey(event)) {    ensureTouchMode(false);    return false;  }  return false;}  }
class C{  private void beginMyTurn(){  p=clientgui.getClient().getLocalPlayer();  IGame game=clientgui.getClient().getGame();  IBoard board=game.getBoard();  int preDesignateArea=game.getOptions().intOption("map_area_predesignate");  int hexesPer=game.getOptions().intOption("num_hexes_predesignate");  double mapArea=board.getWidth() * board.getHeight();  startingHexes=(int)Math.ceil((mapArea) / preDesignateArea) * hexesPer;  artyAutoHitHexes.clear();  setArtyEnabled(startingHexes);  butDone.setEnabled(true);}  }
class C{  InMemoryEntryStore(){  entries=Maps.newHashMap();  topLevelEntries=Sets.newHashSet();  children=HashMultimap.create();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void updateSynapseNodes(Collection<Synapse> synapses){  for (  Synapse synapse : synapses) {    SynapseNode node=((SynapseNode)objectNodeMap.get(synapse));    if (node != null) {      node.updateColor();      node.updateDiameter();    }  }  timeLabel.update();  updateComplete.decrementAndGet();}  }
class C{  public void testBug20727196() throws Exception {  createFunction("testBug20727196_f1","(p ENUM ('Yes', 'No')) RETURNS VARCHAR(10) DETERMINISTIC BEGIN RETURN IF(p='Yes', 'Yay!', if(p='No', 'Ney!', 'What?')); END");  createFunction("testBug20727196_f2","(p CHAR(1)) RETURNS ENUM ('Yes', 'No') DETERMINISTIC BEGIN RETURN IF(p='y', 'Yes', if(p='n', 'No', '?')); END");  createFunction("testBug20727196_f3","(p ENUM ('Yes', 'No')) RETURNS ENUM ('Yes', 'No') DETERMINISTIC BEGIN RETURN IF(p='Yes', 'Yes', if(p='No', 'No', '?')); END");  createProcedure("testBug20727196_p1","(p ENUM ('Yes', 'No')) BEGIN SELECT IF(p='Yes', 'Yay!', if(p='No', 'Ney!', 'What?')); END");  for (  String connProps : new String[]{"useInformationSchema=false","useInformationSchema=true"}) {    Connection testConn=null;    try {      testConn=getConnectionWithProps(connProps);      DatabaseMetaData dbmd=testConn.getMetaData();      this.rs=dbmd.getProcedureColumns(null,null,"testBug20727196_%","%");      assertTrue(this.rs.next());      assertEquals("testBug20727196_f1",this.rs.getString(3));      assertEquals("",this.rs.getString(4));      assertEquals("VARCHAR",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_f1",this.rs.getString(3));      assertEquals("p",this.rs.getString(4));      assertEquals("ENUM",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_f2",this.rs.getString(3));      assertEquals("",this.rs.getString(4));      assertEquals("ENUM",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_f2",this.rs.getString(3));      assertEquals("p",this.rs.getString(4));      assertEquals("CHAR",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_f3",this.rs.getString(3));      assertEquals("",this.rs.getString(4));      assertEquals("ENUM",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_f3",this.rs.getString(3));      assertEquals("p",this.rs.getString(4));      assertEquals("ENUM",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_p1",this.rs.getString(3));      assertEquals("p",this.rs.getString(4));      assertEquals("ENUM",this.rs.getString(7));      assertFalse(this.rs.next());    }  finally {      if (testConn != null) {        testConn.close();      }    }  }}  }
class C{  public AlgorithmChecker(TrustAnchor anchor,AlgorithmConstraints constraints){  if (anchor == null) {    throw new IllegalArgumentException("The trust anchor cannot be null");  }  if (anchor.getTrustedCert() != null) {    this.trustedPubKey=anchor.getTrustedCert().getPublicKey();  } else {    this.trustedPubKey=anchor.getCAPublicKey();  }  this.prevPubKey=trustedPubKey;  this.constraints=constraints;}  }
class C{  int depKind(){  return getInfo();}  }
class C{  public boolean hasContent(){  return hasTextValue();}  }
class C{  private void showNotificationLabel(String i18nKey,Object... arguments){  GridBagConstraints constraint=new GridBagConstraints();  constraint.fill=GridBagConstraints.BOTH;  constraint.weightx=1.0;  constraint.weighty=1.0;  centerPanel.removeAll();  centerPanel.add(new JPanel(),constraint);  constraint.weightx=0.0;  constraint.weighty=0.0;  constraint.fill=GridBagConstraints.NONE;  constraint.anchor=GridBagConstraints.CENTER;  centerPanel.add(new ResourceLabel(i18nKey,arguments),constraint);  constraint.weightx=1.0;  constraint.weighty=1.0;  constraint.fill=GridBagConstraints.BOTH;  centerPanel.add(new JPanel(),constraint);  centerPanel.revalidate();  centerPanel.repaint();  enableHeaderActions(false);}  }
class C{  public static void add(String v){synchronized (Startup.class) {    _state+=v;  }}  }
class C{  public static Texture createTexture(String imagePath,boolean flip){  Image image=loadImage(getURLFromFilePath(imagePath),flip);  return (createTexture(image));}  }
class C{  public int size(){  final Segment<K,V>[] segments=this.segments;  final int segmentCount=segments.length;  long previousSum=0L;  for (int retries=-1; retries < RETRIES_BEFORE_LOCK; retries++) {    long sum=0L;    long size=0L;    for (int i=0; i < segmentCount; i++) {      Segment<K,V> segment=segmentAt(segments,i);      if (segment != null) {        sum+=segment.modCount;        size+=segment.count;      }    }    if (sum == previousSum)     return ((size >>> 31) == 0) ? (int)size : Integer.MAX_VALUE;    previousSum=sum;  }  long size=0L;  for (int i=0; i < segmentCount; i++) {    Segment<K,V> segment=ensureSegment(i);    segment.lock();    size+=segment.count;  }  for (int i=0; i < segmentCount; i++)   segments[i].unlock();  return ((size >>> 31) == 0) ? (int)size : Integer.MAX_VALUE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.333 -0400",hash_original_method="C4C497FE1F717FAF9D81F857B4C33DF8",hash_generated_method="B6658BAC938DB8A45641F694ECFCEAA0") private ConcurrentSkipListMap.Node<K,V> loNode(){  if (lo == null)   return m.findFirst(); else   if (loInclusive)   return m.findNear(lo,GT | EQ); else   return m.findNear(lo,GT);}  }
class C{  public static void reverse(final byte[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  byte tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public List<Feature> extract(JCas view,T focusAnnotation) throws CleartkExtractorException {  List<Feature> result=new ArrayList<Feature>();  for (  FeatureExtractor1<T> extractor : this.extractors) {    result.addAll(extractor.extract(view,focusAnnotation));  }  return result;}  }
class C{  public BitmapAjaxCallback anchor(float anchor){  this.anchor=anchor;  return this;}  }
class C{  public BaseFactoryImpl(){  super();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? null : a.getChannel();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.761 -0500",hash_original_method="A3423B1919CBB5E5DDAE8E35A522AED2",hash_generated_method="C622C575F82B87F3E28E2B38FD9B52B9") public int keyAt(int index){  return mKeys[index];}  }
class C{  public void paint(Graphics g){  paintList(g,markedOccurrences);  super.paint(g);  paintList(g,parserHighlights);}  }
class C{  public static void loadAxSf(Session session,AxPK axPK,AxSf axsfAux,Map map,Idocarchdet idoc,String language,String entidad) throws Exception {  AxXfPK pk=null;  try {    if (axsfAux instanceof AxSfIn) {      pk=new AxXfPK(axPK.getType(),axPK.getId(),AxXf.DEFAULT_AXXF_IN_COMMENT_FIELD);    } else {      pk=new AxXfPK(axPK.getType(),axPK.getId(),AxXf.DEFAULT_AXXF_OUT_COMMENT_FIELD);    }    AxXfEntity axXfEntity=new AxXfEntity();    axXfEntity.findByPrimaryKey(pk,entidad);    axXfEntity.load(entidad);    axsfAux.setAxxf(axXfEntity.getAxXf());  } catch (  Exception fE) {  }  List extendedFields=null;  if (axsfAux instanceof AxSfIn) {    extendedFields=getExtendedFields(idoc,Keys.EREG_FDR_MATTER);  } else {    extendedFields=getExtendedFields(idoc,Keys.SREG_FDR_MATTER);  }  for (Iterator it=extendedFields.iterator(); it.hasNext(); ) {    Integer id=(Integer)it.next();    axsfAux.addProposedExtendedFiels(id);    try {      if (axsfAux instanceof AxSfIn) {        pk=new AxXfPK(axPK.getType(),axPK.getId(),id.intValue());      } else {        pk=new AxXfPK(axPK.getType(),axPK.getId(),id.intValue());      }      AxXfEntity axXfEntity=new AxXfEntity();      axXfEntity.findByPrimaryKey(pk,entidad);      axXfEntity.load(entidad);      axsfAux.addExtendedField(id,axXfEntity.getAxXf());    } catch (    Exception fE) {    }  }  axsfAux=loadAxSfAttributes(session,axsfAux,map,language,entidad);}  }
class C{  private RPObject cloneItem(final RPObject item) throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {  final Class<?> clazz=item.getClass();  final Constructor<?> ctor=clazz.getConstructor(clazz);  final Item clone=(Item)ctor.newInstance(item);  return clone;}  }
class C{  private void drawSquare(Canvas canvas,Paint paint,float x,float y){  canvas.drawRect(x - size,y - size,x + size,y + size,paint);}  }
class C{  public void build(){  int numGood=0, numBytecodes=0;  if (DEBUG) {    System.out.println("Method: " + methodGen.getName() + " - "+ methodGen.getSignature()+ "in class "+ methodGen.getClassName());  }  LineNumberTable table=methodGen.getLineNumberTable(methodGen.getConstantPool());  if (table != null && table.getTableLength() > 0) {    checkTable(table);    InstructionHandle handle=methodGen.getInstructionList().getStart();    while (handle != null) {      int bytecodeOffset=handle.getPosition();      if (bytecodeOffset < 0) {        throw new IllegalStateException("Bad bytecode offset: " + bytecodeOffset);      }      if (DEBUG) {        System.out.println("Looking for source line for bytecode offset " + bytecodeOffset);      }      int sourceLine;      try {        sourceLine=table.getSourceLine(bytecodeOffset);      } catch (      ArrayIndexOutOfBoundsException e) {        if (LINE_NUMBER_BUG) {          throw e;        } else {          sourceLine=-1;        }      }      if (sourceLine >= 0) {        ++numGood;      }      lineNumberMap.put(handle,new LineNumber(bytecodeOffset,sourceLine));      handle=handle.getNext();      ++numBytecodes;    }    hasLineNumbers=true;    if (DEBUG) {      System.out.println("\t" + numGood + "/"+ numBytecodes+ " had valid line numbers");    }  }}  }
class C{  boolean isGenOp(SyntaxTreeNode tn){  int kind=tn.getKind();  if (kind == N_GenPrefixOp || kind == N_GenNonExpPrefixOp || kind == N_GenInfixOp || kind == N_GenPostfixOp || kind == N_FcnAppl)   return true; else   return false;}  }
class C{  protected int findSeparator(){  int first;  int match=0;  int maxpos=tail - boundaryLength;  for (first=head; first <= maxpos && match != boundaryLength; first++) {    first=findByte(boundary[0],first);    if (first == -1 || first > maxpos) {      return -1;    }    for (match=1; match < boundaryLength; match++) {      if (buffer[first + match] != boundary[match]) {        break;      }    }  }  if (match == boundaryLength) {    return first - 1;  }  return -1;}  }
class C{  public static ArrayList<String> convertStringArrayToArrayList(String[] stringArray){  if (stringArray != null && stringArray.length > 0) {    return new ArrayList<>(Arrays.asList(stringArray));  } else {    return null;  }}  }
class C{  public static void main(String[] args){  System.out.println(VERSION);}  }
class C{  public TechActivationDelegate(){}  }
class C{  public static Step fromCursor(Cursor cursor){  Step step=new Step();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeInstructionsTable.PHOTO_COLUMN)) {      step.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeInstructionsTable.DESCRIPTION_COLUMN)) {      step.setDescription(cursor.getString(c));    }  }  return step;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:48.490 -0400",hash_original_method="B4B1B4676A26C0E0D07AD81974E2090B",hash_generated_method="50D7A428D0408225B9A85847B875AC8B") public void dismiss(){  mPopup.dismiss();  removePromptView();  mPopup.setContentView(null);  mDropDownList=null;  mHandler.removeCallbacks(mResizePopupRunnable);}  }
class C{  public static ComponentUI createUI(JComponent x){  return new BESplitPaneUI();}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1));    System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1));    mSize--;  }}  }
class C{  public void tagDefineBitsLossless2(int id,int format,int width,int height,Color[] colors,byte[] imageData) throws IOException {  writeBitsLossless(id,format,width,height,colors,imageData,true);}  }
class C{  public double groupDelay(double omega){  return N.groupDelay(omega) - D.groupDelay(omega);}  }
class C{  public static int computeRawVarint64Size(final long value){  if ((value & (0xffffffffffffffffL << 7)) == 0)   return 1;  if ((value & (0xffffffffffffffffL << 14)) == 0)   return 2;  if ((value & (0xffffffffffffffffL << 21)) == 0)   return 3;  if ((value & (0xffffffffffffffffL << 28)) == 0)   return 4;  if ((value & (0xffffffffffffffffL << 35)) == 0)   return 5;  if ((value & (0xffffffffffffffffL << 42)) == 0)   return 6;  if ((value & (0xffffffffffffffffL << 49)) == 0)   return 7;  if ((value & (0xffffffffffffffffL << 56)) == 0)   return 8;  if ((value & (0xffffffffffffffffL << 63)) == 0)   return 9;  return 10;}  }
class C{  public static int ENONET(){  return 64;}  }
class C{  PreparedSentencePars(PreparedStatement ps){  m_ps=ps;}  }
class C{  public TextEditor(boolean tabsAsSpaces,boolean multiLineTab,boolean unwrapped){  this.tabsAsSpaces=tabsAsSpaces;  this.multiLineTab=multiLineTab;  this.unwrapped=unwrapped;  ActionMap aMap=getActionMap();  Action action=null;  do {    action=action == null ? aMap.get(DefaultEditorKit.deletePrevCharAction) : null;    aMap.remove(DefaultEditorKit.deletePrevCharAction);    aMap=aMap.getParent();  } while (aMap != null);  aMap=getActionMap();  InputMap iMap=getInputMap();  KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0,false);  iMap.put(keyStroke,"delete");  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,KeyEvent.SHIFT_MASK,false);  iMap.put(keyStroke,"delete");  aMap.put("delete",action);  action=new FindAction();  aMap.put(FIND,action);  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_F,KeyEvent.CTRL_MASK,false);  iMap.put(keyStroke,FIND);  aMap.put(FIND_NEXT,FindReplaceUtility.FIND_ACTION);  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_F3,0,false);  iMap.put(keyStroke,FIND_NEXT);  aMap.put(FIND_PREVIOUS,FindReplaceUtility.FIND_ACTION);  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_F3,KeyEvent.SHIFT_MASK,false);  iMap.put(keyStroke,FIND_PREVIOUS);  action=new TabAction();  aMap.put("TextEditor-tabAction",action);  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0,false);  iMap.put(keyStroke,"TextEditor-tabAction");  action=new ShiftTabAction();  aMap.put("TextEditor-shiftTabAction",action);  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_TAB,KeyEvent.SHIFT_MASK,false);  iMap.put(keyStroke,"TextEditor-shiftTabAction");  action=new ReplaceAction();  getActionMap().put(REPLACE,action);  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_H,KeyEvent.CTRL_MASK,false);  do {    iMap.remove(keyStroke);    iMap=iMap.getParent();  } while (iMap != null);  getInputMap().put(keyStroke,REPLACE);  action=new AutoIndentAction();  getActionMap().put(AUTO_INDENT,action);  keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,false);  getInputMap().put(keyStroke,AUTO_INDENT);  setAutoscrolls(true);  defaultCaret=getCaret();  overtypeCaret=new OvertypeCaret();  overtypeCaret.setBlinkRate(defaultCaret.getBlinkRate());}  }
class C{  public static List<HostAddress> resolveXMPPDomain(String domain){  return resolveDomain(domain,'c');}  }
class C{  public IGameMove bestMove(IGameState s,IPlayer player,IPlayer opponent){  this.original=player;  this.state=s.copy();  numStates++;  MoveEvaluation move=minimax(ply,IComparator.MAX,player,opponent);  return move.move;}  }
class C{  public MilStd2525UnitsFormat(String lengthUnits,String areaUnits,boolean showDMS){  super(lengthUnits,areaUnits,showDMS);  this.setAltitudeUnits(FEET);}  }
class C{  public ManageBackupsDialog(){  backup=new AutoBackup();  initComponents();}  }
class C{  protected NumericLiteral(long n){  this(n,XMLSchema.LONG);}  }
class C{  private NotificationCompat.Builder createNotificationBuilder(){  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(getContext());  notificationBuilder.setSmallIcon(R.drawable.notification_icon).setAutoCancel(true);  notificationBuilder.setColor(getContext().getResources().getColor(R.color.primary));  return notificationBuilder;}  }
class C{  public int findHeader(int i1,int i2,int i3,int i4){  int index=12;  while (index < buffer.length) {    if (buffer[index] == i1 && buffer[index + 1] == i2 && buffer[index + 2] == i3 && buffer[index + 3] == i4) {      return index;    } else {      index=index + 8 + fourByte(index + 4);    }  }  log.error("Didn't find chunk");  return 0;}  }
class C{  public boolean isGlobalProgrammerAvailable(){  return true;}  }
class C{  public DOMNodeRemovedEventListener(){}  }
class C{  public void createVVset(String displayName) throws Exception {  _log.info("createVVset enter");  ClientResponse clientResp=null;  String payload="{\"name\": \"" + displayName + "\" }";  _log.info(" 3PARDriver: createVVset uri = {} payload {} ",URI_CREATE_CG.toString(),payload);  try {    clientResp=post(URI_CREATE_CG,payload);    if (clientResp == null) {      _log.error("3PARDriver: createVVset There is no response from 3PAR");      throw new HP3PARException("There is no response from 3PAR");    } else     if (clientResp.getStatus() != 201) {      String errResp=getResponseDetails(clientResp);      _log.error("3PARDriver: createVVset There is error response from 3PAR = {}",errResp);      throw new HP3PARException(errResp);    } else {      _log.info("3PARDriver: createVVset success");    }  } catch (  Exception e) {    throw e;  } finally {    if (clientResp != null) {      clientResp.close();    }    _log.info("3PARDriver: createVVset leave");  }}  }
class C{  public void testEquals(){  Move m1=new Move(Position.getSquare(0,6),Position.getSquare(1,7),Piece.WROOK);  Move m2=new Move(Position.getSquare(0,6),Position.getSquare(0,7),Piece.WROOK);  Move m3=new Move(Position.getSquare(1,6),Position.getSquare(1,7),Piece.WROOK);  Move m4=new Move(Position.getSquare(0,6),Position.getSquare(1,7),Piece.WKNIGHT);  Move m5=new Move(Position.getSquare(0,6),Position.getSquare(1,7),Piece.WROOK);  assertTrue(!m1.equals(m2));  assertTrue(!m1.equals(m3));  assertTrue(!m1.equals(m4));  assertTrue(m1.equals(m5));}  }
class C{  private double[][] generateOrthonormalBasis(List<double[]> vectors){  double[] first=normalizeEquals(vectors.get(0));  double[][] ret=new double[first.length][vectors.size()];  setCol(ret,0,first);  for (int i=1; i < vectors.size(); i++) {    double[] v_i=vectors.get(i);    double[] u_i=v_i.clone();    for (int j=0; j < i; j++) {      double[] v_j=getCol(ret,j);      double f=transposeTimes(v_i,v_j);      if (Double.isNaN(f)) {        if (LOG.isDebuggingFine()) {          LOG.debugFine("Zero vector encountered? " + v_j);        }        return null;      }      minusTimesEquals(u_i,v_j,f);    }    final double len_u_i=euclideanLength(u_i);    if (len_u_i < Double.MIN_NORMAL) {      if (LOG.isDebuggingFine()) {        LOG.debugFine("Points not independent - no orthonormalization.");      }      return null;    }    timesEquals(u_i,1 / len_u_i);    setCol(ret,i,u_i);  }  return ret;}  }
class C{  public void updateIdentity(int identityId,String nickname,String ident,String realname,List<String> aliases){  ContentValues values=new ContentValues();  values.put(IdentityConstants.NICKNAME,nickname);  values.put(IdentityConstants.IDENT,ident);  values.put(IdentityConstants.REALNAME,realname);  this.getWritableDatabase().update(IdentityConstants.TABLE_NAME,values,IdentityConstants._ID + " = " + identityId,null);  setAliases(identityId,aliases);}  }
class C{  private static String readLine(InputStream inputStream) throws IOException {  final StringBuilder line=new StringBuilder();  int ch;  while ((ch=inputStream.read()) != -1) {    if (ch == '\r') {      continue;    }    if (ch == '\n') {      break;    }    line.append((char)ch);  }  return line.toString();}  }
class C{  public static void checkFilesNumber(Drive drive) throws IOException {  EndToEndTestUtils.instrumentation.waitForIdleSync();  long startTime=System.currentTimeMillis();  int trackNumber=EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount();  List<File> files=getDriveFiles(EndToEndTestUtils.trackListActivity.getApplicationContext(),drive);  while (System.currentTimeMillis() - startTime < MAX_TIME_TO_WAIT_SYNC) {    try {      if (files.size() == trackNumber) {        return;      }      trackNumber=EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount();      files=getDriveFiles(EndToEndTestUtils.trackListActivity.getApplicationContext(),drive);      EndToEndTestUtils.sleep(EndToEndTestUtils.SHORT_WAIT_TIME);      EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);    } catch (    GoogleJsonResponseException e) {      Log.e(TAG,e.getMessage(),e);    }  }  Assert.assertEquals(files.size(),trackNumber);}  }
class C{  public int[] keys(){  int[] keys=new int[size()];  int[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public void generateParallelLines(Iterator<? extends Position> iterator,List<Position> leftPositions,List<Position> rightPositions,double halfWidth,Globe globe){  Position posB=iterator.next();  Position posA=iterator.next();  Vec4 ptA=globe.computePointFromLocation(posA);  Vec4 ptB=globe.computePointFromLocation(posB);  Vec4 ptC;  this.generateParallelPoints(ptB,null,ptA,leftPositions,rightPositions,halfWidth,globe);  while (iterator.hasNext()) {    posA=iterator.next();    ptC=ptB;    ptB=ptA;    ptA=globe.computePointFromLocation(posA);    generateParallelPoints(ptB,ptC,ptA,leftPositions,rightPositions,halfWidth,globe);  }  generateParallelPoints(ptA,ptB,null,leftPositions,rightPositions,halfWidth,globe);}  }
class C{  public static Face drawDir(Direction dir,MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){switch (dir) {case DOWN:    return drawDown(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);case UP:  return drawUp(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);case NORTH:return drawNorth(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);case SOUTH:return drawSouth(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);case EAST:return drawEast(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);case WEST:return drawWest(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);}throw new RenderException("Invalid draw direction!");}  }
class C{  public AxisState(double cursor){  this.cursor=cursor;  this.ticks=new java.util.ArrayList();}  }
class C{  public synchronized boolean check(boolean forceCheck){  int slen=solutions.length;  if (slen == 0) {    return true;  }  for (int soln=0; soln < slen; soln++) {    OrderOfSolution oos=solutions[soln];    initSccParams(oos);    BEGraph bgraph=bgraphs[soln];    int numOfInits=bgraph.initSize();    for (int i=0; i < numOfInits; i++) {      initNode=bgraph.getInitNode(i);      if (initNode.getNumber() == 0) {        checkSccs(initNode);      }    }  }  return true;}  }
class C{  public static double logpdf(double x,double k,double theta,double shift){  x=(x - shift);  if (x <= 0.) {    return Double.NEGATIVE_INFINITY;  }  final double log1px=Math.log1p(x);  return k * Math.log(theta) - GammaDistribution.logGamma(k) - (theta + 1.) * log1px + (k - 1) * Math.log(log1px);}  }
class C{  public void connect(int timeout,InetAddress host,int tcpPort) throws IOException {  connect(timeout,host,tcpPort,-1);}  }
class C{  protected void finishDraggingTo(int location){  dragDividerTo(location);  setLastDragLocation(-1);  if (!isContinuousLayout()) {    Component leftC=splitPane.getLeftComponent();    Rectangle leftBounds=leftC.getBounds();    if (draggingHW) {      if (orientation == JSplitPane.HORIZONTAL_SPLIT) {        nonContinuousLayoutDivider.setLocation(-dividerSize,0);      } else {        nonContinuousLayoutDivider.setLocation(0,-dividerSize);      }      splitPane.remove(nonContinuousLayoutDivider);    }    splitPane.setDividerLocation(location);  }}  }
class C{  public static final String toFEN(Position pos){  StringBuilder ret=new StringBuilder();  for (int r=7; r >= 0; r--) {    int numEmpty=0;    for (int c=0; c < 8; c++) {      int p=pos.getPiece(Position.getSquare(c,r));      if (p == Piece.EMPTY) {        numEmpty++;      } else {        if (numEmpty > 0) {          ret.append(numEmpty);          numEmpty=0;        }switch (p) {case Piece.WKING:          ret.append('K');        break;case Piece.WQUEEN:      ret.append('Q');    break;case Piece.WROOK:  ret.append('R');break;case Piece.WBISHOP:ret.append('B');break;case Piece.WKNIGHT:ret.append('N');break;case Piece.WPAWN:ret.append('P');break;case Piece.BKING:ret.append('k');break;case Piece.BQUEEN:ret.append('q');break;case Piece.BROOK:ret.append('r');break;case Piece.BBISHOP:ret.append('b');break;case Piece.BKNIGHT:ret.append('n');break;case Piece.BPAWN:ret.append('p');break;default :throw new RuntimeException();}}}if (numEmpty > 0) {ret.append(numEmpty);}if (r > 0) {ret.append('/');}}ret.append(pos.whiteMove ? " w " : " b ");boolean anyCastle=false;if (pos.h1Castle()) {ret.append('K');anyCastle=true;}if (pos.a1Castle()) {ret.append('Q');anyCastle=true;}if (pos.h8Castle()) {ret.append('k');anyCastle=true;}if (pos.a8Castle()) {ret.append('q');anyCastle=true;}if (!anyCastle) {ret.append('-');}{ret.append(' ');if (pos.getEpSquare() >= 0) {int x=Position.getX(pos.getEpSquare());int y=Position.getY(pos.getEpSquare());ret.append((char)(x + 'a'));ret.append((char)(y + '1'));} else {ret.append('-');}}ret.append(' ');ret.append(pos.halfMoveClock);ret.append(' ');ret.append(pos.fullMoveCounter);return ret.toString();}  }
class C{  public CommandsWindow(java.awt.Frame parent,boolean modal){  super(parent,modal);  initComponents();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.968 -0500",hash_original_method="796F2451CF9DC3EF411446EADA3F03C7",hash_generated_method="84A93E38E91160823E4F8547DE56768C") public int size(){synchronized (lock) {    return count;  }}  }
class C{  public void ensureNext(String expected,TextStream stream){  stream.skipWhitespace();  String next=stream.nextWord().toLowerCase();  if (!expected.equals(next)) {    throw SelfParseException.invalidWord(next,expected,stream);  }}  }
class C{  public NbtTagFloat(){}  }
class C{  private void mergeWindow(List<WindowedValue<KV<K,InputT>>> elements){  int currentStart=0;  IntervalWindow currentWindow=(IntervalWindow)Iterables.getOnlyElement(elements.get(0).getWindows());  for (int i=1; i < elements.size(); i++) {    WindowedValue<KV<K,InputT>> nextValue=elements.get(i);    IntervalWindow nextWindow=(IntervalWindow)Iterables.getOnlyElement(nextValue.getWindows());    if (currentWindow.intersects(nextWindow)) {      currentWindow=currentWindow.span(nextWindow);    } else {      for (int j=i - 1; j >= currentStart; j--) {        WindowedValue<KV<K,InputT>> value=elements.get(j);        elements.set(j,WindowedValue.of(value.getValue(),value.getTimestamp(),currentWindow,value.getPane()));      }      currentStart=i;      currentWindow=nextWindow;    }  }  if (currentStart < elements.size() - 1) {    for (int j=elements.size() - 1; j >= currentStart; j--) {      WindowedValue<KV<K,InputT>> value=elements.get(j);      elements.set(j,WindowedValue.of(value.getValue(),value.getTimestamp(),currentWindow,value.getPane()));    }  }}  }
class C{  public void testOverlappingPointsRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(2);  grid.setNumberRows(2);  Point[] pt=new Point[4];  STRUCT[] st=new STRUCT[8];  PointGenerator pg=new PointGenerator();  pg.setGeometryFactory(geometryFactory);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 8) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(Point)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  for (int j=0; j < 4; j++) {    if (pt[j] != null)     st[i++]=ow.write(pt[j],getConnection());  }  OraReader or=new OraReader();  i=0;  while (i < 8 && pt[i % 4] != null) {    Point pt2=(Point)or.read(st[i]);    assertTrue("The input Point is not the same as the output Point",pt[i % 4].equals(pt2));    i++;  }}  }
class C{  private List<VcsException> parseException(final String stderr){  final List<VcsException> exceptions=new ArrayList<VcsException>();  final String[] exceptionLines=getLines(stderr);  for (int i=exceptionLines.length / 2; i < exceptionLines.length; i++) {    if (StringUtils.isNotEmpty(exceptionLines[i]) && !StringUtils.contains(exceptionLines[i],CONFLICT_MESSAGE)) {      final VcsException exception=new VcsException((exceptionLines[i]));      exception.setIsWarning(StringUtils.startsWith(exceptionLines[i],WARNING_PREFIX));      exceptions.add(exception);    }  }  return exceptions;}  }
class C{  private void writeOutTypeCondition(BytecodeContext bc) throws TransformerException {  WhileVisitor whileVisitor=new WhileVisitor();  loopVisitor=whileVisitor;  whileVisitor.visitBeforeExpression(bc);  bc.getFactory().toExprBoolean(getAttribute("condition").getValue()).writeOut(bc,Expression.MODE_VALUE);  whileVisitor.visitAfterExpressionBeforeBody(bc);  getBody().writeOut(bc);  whileVisitor.visitAfterBody(bc,getEnd());}  }
class C{  public final void readFully(byte b[],int off,int len) throws IOException {  int n=0;  while (n < len) {    int count=this.read(b,off + n,len - n);    if (count < 0) {      throw new EOFException();    }    n+=count;  }}  }
class C{  private Object unwrapValue(Value v){  if (v.getType() == Value.TYPE_array) {    return methodResponseArrayToList((Array)v.getValue());  } else   if (v.getType() == Value.TYPE_struct) {    Map<String,Object> s=new HashMap<String,Object>();    for (    Member m : ((Struct)v.getValue()).getMember()) {      s.put(m.getName(),unwrapValue(m.getValue()));    }    return s;  }  return v.getValue();}  }
class C{  public void detachRequestHandle(){  if (false) {    Log.v(LOGTAG,"TestEventHandler.detachRequestHandle(): " + "requestHandle: " + mRequestHandle);  }  mRequestHandle=null;}  }
class C{  private void showSizeBufferStrategyValidationMessage(){  bufferValueDecoration.setDescriptionText("Size buffer strategy must define a buffer size greater than zero.");}  }
class C{  public long node(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return node;}  }
class C{  public StrBuilder insert(int index,Object obj){  if (obj == null) {    return insert(index,nullText);  }  return insert(index,obj.toString());}  }
class C{  private void configureRenderer(XYMultipleSeriesRenderer XYRenderer){  XYRenderer.setAxesColor(Color.LTGRAY);  XYRenderer.setLabelsColor(Color.LTGRAY);  XYRenderer.setZoomEnabled(false,false);  XYRenderer.setAxisTitleTextSize(16);  XYRenderer.setChartTitleTextSize(20);  XYRenderer.setLabelsTextSize(15);  XYRenderer.setLegendTextSize(15);  XYRenderer.setPointSize(5f);  int margin=mContext.getResources().getDimensionPixelSize(R.dimen.chart_title_margin);  XYRenderer.setMargins(new int[]{margin,margin,margin,margin});  XYRenderer.setShowGrid(true);  XYRenderer.setXLabelsAlign(Align.RIGHT);  XYRenderer.setYLabels(20);  XYRenderer.setInScroll(true);}  }
class C{  public boolean isUserChoice(){  return ACTION_UserChoice.equals(getAction());}  }
class C{  public static Button createRadioButton(Composite parent,String label,int hspan){  Button button=new Button(parent,SWT.RADIO);  button.setFont(parent.getFont());  if (label != null) {    button.setText(label);  }  GridData gd=new GridData(GridData.BEGINNING);  gd.horizontalSpan=hspan;  button.setLayoutData(gd);  setButtonDimensionHint(button);  return button;}  }
class C{  private void printString(Writer out,String str) throws IOException {  str=Text.normalizeString(str);  str=str.trim();  out.write(escapeElementEntities(str));}  }
class C{  public static String pad(int n){  StringBuilder b=new StringBuilder(40);  String p="0";  if (n < 0) {    p="-";    n=Integer.MAX_VALUE + n + 1;  }  b.append(p);  String s=Integer.toString(n);  for (int i=s.length(); i <= intLength; i++) {    b.append("0");  }  b.append(s);  return b.toString();}  }
class C{  public void clearOnlineStatus(){  DBTransaction transaction=TransactionPool.get().beginWork();  try {    clearOnlineStatus(transaction);    TransactionPool.get().commit(transaction);  } catch (  SQLException e) {    TransactionPool.get().rollback(transaction);  }}  }
class C{  private void establishFinalConfirmationState(){  if (mFinalView == null) {    mFinalView=mInflater.inflate(R.layout.media_format_final,null);    mFinalButton=(Button)mFinalView.findViewById(R.id.execute_media_format);    mFinalButton.setOnClickListener(mFinalClickListener);  }  setContentView(mFinalView);}  }
class C{  public File nextBinlog(String binlogName){  if (this.binlogFiles == null)   throw new IllegalStateException("Attempt to find next binlog before reading index");  int index=-1;  File binlog=new File(this.binlogDirectory,binlogName);  for (index=0; index < binlogFiles.size(); index++) {    if (binlog.getName().equals(binlogFiles.get(index).getName())) {      break;    }  }  if (index == -1) {    logger.warn("Index lookup on non-existent binlog file: " + binlogName);    return null;  }  int nextIndex=index + 1;  if ((nextIndex) < binlogFiles.size()) {    return (binlogFiles.get(nextIndex));  } else {    return null;  }}  }
class C{  public int countkNN(TObjectIntHashMap<Object> counters,Object l){  if (l instanceof LabelList) {    LabelList ll=(LabelList)l;    int m=0;    for (int i=0, e=ll.size(); i < e; i++) {      m=Math.max(m,counters.adjustOrPutValue(ll.get(i),1,1));    }    return m;  }  return counters.adjustOrPutValue(l,1,1);}  }
class C{  public void validatePasswordParameter(String username,PasswordUpdateParam passwordUpdate){  validatePasswordParameter(username,passwordUpdate.getOldPassword(),passwordUpdate.getPassword(),passwordUpdate.getEncPassword(),ValidatorType.UPDATE);}  }
class C{  private int generatePermutationId(int[] data,int base){  int permutationId=0;  for (int c=0; c < data.length; c++) {    permutationId*=base;    permutationId+=data[c];  }  return permutationId;}  }
class C{  public static Object[] findMethodWithExactParameters(Object service,String methodName,List<?> args){  Object[] arguments=new Object[args.size()];  for (int i=0; i < args.size(); i++) {    arguments[i]=args.get(i);  }  return findMethodWithExactParameters(service,methodName,arguments);}  }
class C{  public BasicDependencyContainer add(Dependency dependency){  if (dependency == this)   throw new IllegalArgumentException("Can't add self as a dependency.");  if (!_dependencyList.contains(dependency))   _dependencyList.add(dependency);  return this;}  }
class C{  public static String createLinkForSpreadsheet(String aHtml){  return URLUtil.createLinkForSpreadsheet(URLUtil.getHref(aHtml),URLUtil.getName(aHtml));}  }
class C{  public int addDigits(int num){  if (num == 0)   return 0;  return num % 9 == 0 ? 9 : num % 9;}  }
class C{  public void reactiveCancel(){  request.cancel();  setCanceled(true);}  }
class C{  public ZDT4(int numberOfVariables){  super(numberOfVariables);}  }
class C{  protected String createRequestURL(){  if (!post && requestArguments != null) {    StringBuilder b=new StringBuilder(url);    Enumeration e=requestArguments.keys();    if (e.hasMoreElements()) {      b.append("?");    }    while (e.hasMoreElements()) {      String key=(String)e.nextElement();      Object requestVal=requestArguments.get(key);      if (requestVal instanceof String) {        String value=(String)requestVal;        b.append(key);        b.append("=");        b.append(value);        if (e.hasMoreElements()) {          b.append("&");        }        continue;      }      String[] val=(String[])requestVal;      int vlen=val.length;      for (int iter=0; iter < vlen - 1; iter++) {        b.append(key);        b.append("=");        b.append(val[iter]);        b.append("&");      }      b.append(key);      b.append("=");      b.append(val[vlen - 1]);      if (e.hasMoreElements()) {        b.append("&");      }    }    return b.toString();  }  return url;}  }
class C{  public IndexRequest opType(OpType opType){  this.opType=opType;  return this;}  }
class C{  public JSONArray doTask(String operationCode,String operationData){switch (operationCode) {case Constants.OPERATION_DEVICE_INFO:    getDeviceInfo(operationCode);  break;case Constants.OPERATION_DEVICE_LOCATION:getLocationInfo(operationCode);break;case Constants.OPERATION_GET_APPLICATION_LIST:getApplicationList(operationCode);break;case Constants.OPERATION_LOCK_DEVICE:lockDevice(operationCode);break;case Constants.OPERATION_WIPE_DATA:wipeDevice(operationCode,operationData);break;case Constants.OPERATION_CLEAR_PASSWORD:clearPassword(operationCode);break;case Constants.OPERATION_NOTIFICATION:displayNotification(operationCode);break;case Constants.OPERATION_WIFI:configureWifi(operationCode,operationData);break;case Constants.OPERATION_DISABLE_CAMERA:disableCamera(operationCode,operationData);break;case Constants.OPERATION_INSTALL_APPLICATION:installAppBundle(operationCode,operationData);break;case Constants.OPERATION_INSTALL_APPLICATION_BUNDLE:installAppBundle(operationCode,operationData);break;case Constants.OPERATION_UNINSTALL_APPLICATION:uninstallApplication(operationCode,operationData);break;case Constants.OPERATION_ENCRYPT_STORAGE:encryptStorage(operationCode,operationData);break;case Constants.OPERATION_RING:ringDevice(operationCode);break;case Constants.OPERATION_MUTE:muteDevice(operationCode);break;case Constants.OPERATION_WEBCLIP:createWebClip(operationCode,operationData);break;case Constants.OPERATION_PASSWORD_POLICY:setPasswordPolicy(operationCode,operationData);break;case Constants.OPERATION_INSTALL_GOOGLE_APP:installGooglePlayApp(operationCode,operationData);break;case Constants.OPERATION_CHANGE_LOCK_CODE:changeLockCode(operationCode,operationData);break;case Constants.OPERATION_POLICY_BUNDLE:setPolicyBundle(operationCode);break;case Constants.OPERATION_ENTERPRISE_WIPE_DATA:enterpriseWipe(operationCode);break;case Constants.OPERATION_BLACKLIST_APPS:blacklistApps(operationCode,operationData);break;default :Log.e(TAG,"Invalid operation code receieved");break;}return resultBuilder.getResultPayload();}  }
class C{  public void forceStopTask(){  mSpeedTestMode=SpeedTestMode.NONE;  mForceCloseSocket=true;  if (mFtpInputstream != null) {    try {      mFtpInputstream.close();    } catch (    IOException e) {    }  }  if (mFtpOutputstream != null) {    try {      mFtpOutputstream.close();    } catch (    IOException e) {    }  }}  }
class C{  public LightPortrayal3D(Color color,Double3D position,float constantAttenuation,float linearAttenuation,float quadraticAttenuation){  PointLight p=new PointLight();  p.setAttenuation(constantAttenuation,linearAttenuation,quadraticAttenuation);  p.setPosition((float)position.x,(float)position.y,(float)position.z);  light=p;  light.setColor(new Color3f(color));  light.setInfluencingBounds(new BoundingSphere(new Point3d(0,0,0),Double.POSITIVE_INFINITY));}  }
class C{  public static void main(String... args) throws Exception {  HttpService.boot(null,"test","run","foo","-Dhttp.server.port=8080");}  }
class C{  private static boolean hasThrownInitializerError(ExecutionResult execResult){  for (  Throwable t : execResult.getAllThrownExceptions()) {    if (t instanceof ExceptionInInitializerError) {      return true;    }  }  return false;}  }
class C{  public Event newSubEvent(final Object minorEventType){  return new Event(fed,this.resource,this.majorEventType,minorEventType,this.details);}  }
class C{  @Override public boolean supportsOrderByUnrelated(){  debugCodeCall("supportsOrderByUnrelated");  return true;}  }
class C{  @Override public void teardown(){}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public static final byte composeSmeDeliveryAcknowledment(byte esmClass){  return composeMessageType(esmClass,SMPPConstant.ESMCLS_SME_DELIV_ACK);}  }
class C{  public TypeLiteral newTypeLiteral(){  TypeLiteral result=new TypeLiteral(this);  return result;}  }
class C{  private void tryHookListeners(){  if (listenersHooked) {    return;  }  if (TFSCommonUIClientPlugin.getDefault() == null || TFSEclipseClientPlugin.getDefault() == null || !TFSEclipseClientPlugin.getDefault().getProjectManager().isStarted()) {    log.debug("TFSEclipseClientPlugin not available yet, deferring repository hooks");    return;  }  TFSCommonUIClientPlugin.getDefault().getPreferenceStore().addPropertyChangeListener(propertyChangeListener);  final ProjectRepositoryManager projectManager=TFSEclipseClientPlugin.getDefault().getProjectManager();  projectManager.addListener(projectManagerListener);  final IProject[] projects=projectManager.getProjectsOfStatus(ProjectRepositoryStatus.ONLINE);  for (int i=0; i < projects.length; i++) {    final TFSRepository repository=projectManager.getRepository(projects[i]);    if (repository != null) {      addRepositoryListener(repository);    }  }  TFSEclipseClientPlugin.getDefault().getRepositoryManager().addListener(repositoryManagerListener);  TFSEclipseClientPlugin.getDefault().getResourceDataManager().addListener(resourceDataListener);  listenersHooked=true;}  }
class C{  @Override public StreamTimeClock createStreamTimeClock(String streamId){synchronized (streamIdTimeClockMap) {    if (!streamIdTimeClockMap.containsKey(streamId)) {      StreamTimeClock instance=new StreamTimeClockInLocalMemory(streamId);      LOG.info("Created {}",instance);      streamIdTimeClockMap.put(streamId,instance);    } else {      LOG.warn("TimeClock for stream already existss: " + streamIdTimeClockMap.get(streamId));    }    return streamIdTimeClockMap.get(streamId);  }}  }
class C{  @Override protected EClass eStaticClass(){  return BasePackage.Literals.DOMAIN_ELEMENT;}  }
class C{  private RepositoryEquivalence tryHeadEquivalence(Revision from,Revision to,Db db,boolean inverse){  Ui.Task checkHeadsTask=ui.pushTask("checking head equivalency","Checking head equivalence between '%s' and '%s'",from,to);  RepositoryEquivalence equivalence=inverse ? determineEquivalence(to,from) : determineEquivalence(from,to);  if (equivalence != null) {    ui.message("SUCCESS: Found Equivalence between %s and %s",from,to);    db.noteEquivalence(equivalence);  } else {    ui.message("No equivalence found between %s and %s",from,to);  }  ui.popTask(checkHeadsTask,equivalence != null ? "Found!!" : "Not Found.");  return equivalence;}  }
class C{  private void notifyRefreshables(){  refreshables.forEach(null);}  }
class C{  public boolean isValid(final int timeout) throws SQLException {  if (timeout < 0) {    throw new SQLException("the value supplied for timeout is negative");  }  if (isClosed()) {    return false;  }  try {    return protocol.ping();  } catch (  QueryException e) {    return false;  }}  }
class C{  void startTask(String path) throws IOException {  stopTask(path);  if (path.endsWith(".zip.task")) {    trace("expand: " + path);    Process p=Runtime.getRuntime().exec("jar -xf " + path,null,new File(root));    new StreamRedirect(path,p.getInputStream(),null).start();    return;  }  Properties prop=SortedProperties.loadProperties(path);  String command=prop.getProperty("command");  String outFile=path.substring(0,path.length() - TASK_SUFFIX.length());  String errorFile=root + "/" + prop.getProperty("error",outFile + ".err.txt");  String outputFile=root + "/" + prop.getProperty("output",outFile + ".out.txt");  trace("start process: " + path + " / "+ command);  Process p=Runtime.getRuntime().exec(command,null,new File(root));  new StreamRedirect(path,p.getErrorStream(),errorFile).start();  new StreamRedirect(path,p.getInputStream(),outputFile).start();  tasks.put(path,p);}  }
class C{  @Override protected Token<HtmlTokenType> produce(){  Token<HtmlTokenType> token=parseToken();  if (null == token) {    return null;  }  if (inEscapeExemptBlock) {    if (token.type != HtmlTokenType.SERVERCODE) {      token=reclassify(token,(this.textEscapingMode == HtmlTextEscapingMode.RCDATA ? HtmlTokenType.TEXT : HtmlTokenType.UNESCAPED));    }  } else   if (!asXml) {switch (token.type) {case TAGBEGIN:{        String canonTagName=name(token.text.substring(1));        if (HtmlTextEscapingMode.isTagFollowedByLiteralContent(canonTagName)) {          this.escapeExemptTagName=canonTagName;          this.textEscapingMode=HtmlTextEscapingMode.getModeForTag(canonTagName);        }        break;      }case TAGEND:    this.inEscapeExemptBlock=null != this.escapeExemptTagName;  break;default :break;}}return token;}  }
class C{  public static String convertClassName(Class<?> clazz){  String convertedName=clazz.getSimpleName();  boolean clean=true;  do {    Matcher cleaner=CLASS_SUFFIXES_TO_CLEAN.matcher(convertedName);    if (cleaner.matches()) {      if (cleaner.group(1) != null && cleaner.group(1).length() > 0) {        convertedName=cleaner.group(1);      }    } else {      clean=false;    }  } while (clean);  return StringUtils.uncapitalize(convertedName);}  }
class C{  @Override public String substr(final String key,final int start,final int end){  checkIsInMultiOrPipeline();  client.substr(key,start,end);  return client.getBulkReply();}  }
class C{  protected boolean needsSaving(){  if ((fSaveMode & FORCE_SAVE) != 0) {    return true;  }  if ((fSaveMode & KEEP_SAVE_STATE) != 0) {    return fValidationState == null || !fValidationState.wasDirty();  }  return false;}  }
class C{  protected double updateCloudetProcessingWithoutSchedulingFutureEvents(){  if (CloudSim.clock() > getLastProcessTime()) {    return updateCloudetProcessingWithoutSchedulingFutureEventsForce();  }  return 0;}  }
class C{  private int parseInt(String intAsString) throws ReplicatorException {  try {    return Integer.parseInt(intAsString);  } catch (  NumberFormatException e) {    throw new ReplicatorException("Malformed event ID; unable to parse number value: eventId=" + eventId + " number="+ intAsString);  }}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  Files.delete(directory.toPath());}  }
class C{  public void check(List<String> words) throws MnemonicException {  toEntropy(words);}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  void prepareAndSendView(NetView newView,List<InternalDistributedMember> joinReqs,Set<InternalDistributedMember> leaveReqs,Set<InternalDistributedMember> removalReqs) throws InterruptedException {  boolean prepared;  do {    if (this.shutdown || Thread.currentThread().isInterrupted()) {      return;    }    if (quorumRequired && isNetworkPartition(newView,true)) {      sendNetworkPartitionMessage(newView);      Thread.sleep(BROADCAST_MESSAGE_SLEEP_TIME);      Set<InternalDistributedMember> crashes=newView.getActualCrashedMembers(currentView);      forceDisconnect(LocalizedStrings.Network_partition_detected.toLocalizedString(crashes.size(),crashes));      shutdown=true;      return;    }    prepared=prepareView(newView,joinReqs);    logger.debug("view preparation phase completed.  prepared={}",prepared);    NetView conflictingView=prepareProcessor.getConflictingView();    if (prepared) {      break;    }    Set<InternalDistributedMember> unresponsive=prepareProcessor.getUnresponsiveMembers();    unresponsive.removeAll(removalReqs);    unresponsive.removeAll(leaveReqs);    if (!unresponsive.isEmpty()) {      removeHealthyMembers(unresponsive);synchronized (viewRequests) {        unresponsive=new HashSet<>(unresponsive);      }    }    logger.debug("unresponsive members that could not be reached: {}",unresponsive);    List<InternalDistributedMember> failures=new ArrayList<>(currentView.getCrashedMembers().size() + unresponsive.size());    if (conflictingView != null && !conflictingView.getCreator().equals(localAddress) && conflictingView.getViewId() > newView.getViewId() && (lastConflictingView == null || conflictingView.getViewId() > lastConflictingView.getViewId())) {      lastConflictingView=conflictingView;      logger.info("adding these crashed members from a conflicting view to the crash-set for the next view: {}\nconflicting view: {}",unresponsive,conflictingView);      failures.addAll(conflictingView.getCrashedMembers());      if (failures.contains(localAddress)) {        forceDisconnect("I am no longer a member of the distributed system");        shutdown=true;        return;      }      List<InternalDistributedMember> newMembers=conflictingView.getNewMembers();      if (!newMembers.isEmpty()) {        logger.info("adding these new members from a conflicting view to the new view: {}",newMembers);        for (        InternalDistributedMember mbr : newMembers) {          int port=conflictingView.getFailureDetectionPort(mbr);          newView.add(mbr);          newView.setFailureDetectionPort(mbr,port);          joinReqs.add(mbr);        }      }      if (conflictingView.getViewId() >= newView.getViewId()) {        newView=new NetView(newView,conflictingView.getViewId() + 1);      }    }    if (!unresponsive.isEmpty()) {      logger.info("adding these unresponsive members to the crash-set for the next view: {}",unresponsive);      failures.addAll(unresponsive);    }    failures.removeAll(removalReqs);    failures.removeAll(leaveReqs);    prepared=failures.isEmpty();    if (!prepared) {      removalReqs.addAll(failures);      List<InternalDistributedMember> newMembers=new ArrayList<>(newView.getMembers());      newMembers.removeAll(removalReqs);      NetView tempView=new NetView(localAddress,newView.getViewId() + 1,newMembers,leaveReqs,removalReqs);      for (      InternalDistributedMember mbr : newView.getMembers()) {        if (tempView.contains(mbr)) {          tempView.setFailureDetectionPort(mbr,newView.getFailureDetectionPort(mbr));        }      }      newView=tempView;      int size=failures.size();      List<String> reasons=new ArrayList<>(size);      for (int i=0; i < size; i++) {        reasons.add("Failed to acknowledge a new membership view and then failed tcp/ip connection attempt");      }      sendRemoveMessages(failures,reasons,new HashSet<InternalDistributedMember>());    }    if (conflictingView == null) {      prepared=true;    }  } while (!prepared);  lastConflictingView=null;  sendView(newView,joinReqs);  if (markViewCreatorForShutdown && getViewCreator() != null) {    shutdown=true;  }  if (isStopping()) {    shutdown=true;  }}  }
class C{  public SoftReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);  this.timestamp=clock;}  }
class C{  protected void recipeAdd(GoogleBaseService service,Recipe recipe) throws IOException, ServiceException {  URL feedUrl=urlFactory.getItemsFeedURL();  GoogleBaseEntry entry=recipe.toGoogleBaseEntry(null);  service.insert(feedUrl,entry);}  }
class C{  private void onBackPressed(){  getContext().onBackPressed();}  }
class C{  @Override protected void determineLabelPositions(DrawContext dc){  if (WWUtil.isEmpty(this.labels))   return;  LatLon ll=LatLon.interpolate(0.5,this.position1,this.position2);  this.labels.get(0).setPosition(new Position(ll,0));  this.labels.get(0).setOrientationPosition(this.position2);}  }
class C{  public DeclutterMatrix(int width,int height){  this(width,height,1,1);}  }
class C{  public boolean hasOnlyInternalEvents(){  if (events == null || events.isEmpty()) {    return false;  }  Iterator<CacheEvent<?,?>> it=this.events.iterator();  while (it.hasNext()) {    CacheEvent<?,?> event=it.next();    if (isEventUserVisible(event)) {      LocalRegion region=(LocalRegion)event.getRegion();      if (region != null && !region.isPdxTypesRegion() && !region.isInternalRegion()) {        return false;      }    }  }  return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.IDENTIFIABLE_ELEMENT__NAME:    return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static MPayment createAPPayment(Properties ctx,MInvoice invoice,String trxName) throws OperationException {  String tenderType=getTenderType(invoice.getPaymentRule());  return createPayment(ctx,invoice,MDocType.DOCBASETYPE_APPayment,tenderType,invoice.getOpenAmt(),trxName);}  }
class C{  public InlineQueryResultVenue.InlineQueryResultVenueBuilder foursquareId(String foursquareId){  this.foursquare_id=foursquareId;  return this;}  }
class C{  private void initTimer(){  Collection<?> timers=timerService.getTimers();  if (timers.isEmpty()) {    timerService.createTimer(0,TIMER_DELAY_VALUE,null);  }}  }
