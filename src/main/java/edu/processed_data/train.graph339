class C{  static Record createRecord(String name,String address,String itf,JsonObject metadata){  Objects.requireNonNull(name);  Objects.requireNonNull(itf);  Objects.requireNonNull(address);  JsonObject meta;  if (metadata == null) {    meta=new JsonObject();  } else {    meta=metadata.copy();  }  return new Record().setType(TYPE).setName(name).setMetadata(meta.put("service.interface",itf)).setLocation(new JsonObject().put(Record.ENDPOINT,address));}  }
class C{  public Company discipline(Discipline discipline){  this.discipline=discipline;  return this;}  }
class C{  @Override public int numCacheHits(){  return -1;}  }
class C{  public AppendableWriter(Appendable output){  _output=output;}  }
class C{  public DummyVariation(int arity){  super();  this.arity=arity;}  }
class C{  public void run(){  setup(this,null);  startFresh();  int result=R_NOTDONE;  while (result == R_NOTDONE && !(ideal_found && quitOnRunComplete)) {    result=evolve();  }  finish(result);  output.message("All tasks finished.");  suicide();}  }
class C{  public CPluginManagementAction(final JFrame parent){  super("Plugin Manager");  this.parent=parent;  putValue(SHORT_DESCRIPTION,"Can be used to configure the available plugins");}  }
class C{  @Override protected Bitmap decodeByteArrayAsPurgeable(CloseableReference<PooledByteBuffer> bytesRef,BitmapFactory.Options options){  final PooledByteBuffer pooledByteBuffer=bytesRef.get();  final int length=pooledByteBuffer.size();  final CloseableReference<byte[]> encodedBytesArrayRef=mFlexByteArrayPool.get(length);  try {    final byte[] encodedBytesArray=encodedBytesArrayRef.get();    pooledByteBuffer.read(0,encodedBytesArray,0,length);    Bitmap bitmap=BitmapFactory.decodeByteArray(encodedBytesArray,0,length,options);    return Preconditions.checkNotNull(bitmap,"BitmapFactory returned null");  }  finally {    CloseableReference.closeSafely(encodedBytesArrayRef);  }}  }
class C{  public Server(String apiUrl){  this(apiUrl,DEFAULT_NAME);}  }
class C{  private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){  String inputDesc=String.format("earlyEvents=%s, lateEvents=%s, " + "anytimeEvents=%s, actualEvents=%s",earlyEvents.toString(),lateEvents.toString(),anytimeEvents.toString(),actualEvents.toString());  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);  for (  PortChangeEvent ev : early) {    assertFalse("Test setup error. Early and late overlap",late.contains(ev));    assertFalse("Test setup error. Early and anytime overlap",any.contains(ev));  }  for (  PortChangeEvent ev : late) {    assertFalse("Test setup error. Late and early overlap",early.contains(ev));    assertFalse("Test setup error. Late and any overlap",any.contains(ev));  }  for (  PortChangeEvent ev : any) {    assertFalse("Test setup error. Anytime and early overlap",early.contains(ev));    assertFalse("Test setup error. Anytime and late overlap",late.contains(ev));  }  for (  PortChangeEvent a : actualEvents) {    if (early.remove(a)) {      continue;    }    if (any.remove(a)) {      continue;    }    if (late.remove(a)) {      if (!early.isEmpty()) {        fail(a + " is in late list, but haven't seen all required " + "early events. "+ inputDesc);      } else {        continue;      }    }    fail(a + " was not expected. " + inputDesc);  }  if (!early.isEmpty())   fail("Elements left in early: " + early + ". "+ inputDesc);  if (!late.isEmpty())   fail("Elements left in late: " + late + ". "+ inputDesc);  if (!any.isEmpty())   fail("Elements left in any: " + any + ". "+ inputDesc);}  }
class C{  @Override public void noCurrentRequestcontent(){  if (working) {    return;  }  working=true;  log().trace("No Current Message");  getSignatureManager().setDocument(null);  clearOptions();  working=false;}  }
class C{  public AsIsAnalyzer(boolean toLowerCase){  this.toLowerCase=toLowerCase;}  }
class C{  private static void checkKey(String key) throws MalformedObjectNameException {  if (key == null)   throw new NullPointerException("Invalid key (null)");  final int len=key.length();  if (len == 0)   throw new MalformedObjectNameException("Invalid key (empty)");  final char[] k=key.toCharArray();  final int endKey=parseKey(k,0);  if (endKey < len)   throw new MalformedObjectNameException("Invalid character in value: `" + k[endKey] + "'");}  }
class C{  @PatchMethod(override=true) public static String prompt(String msg,String initialValue){  return RETURNED_MESSAGE;}  }
class C{  private Collection<String> convertUriCollection(Collection<URI> uriList){  List<String> idList=new ArrayList<String>();  Iterator<URI> it=uriList.iterator();  while (it.hasNext()) {    idList.add(it.next().toString());    if (idList.size() > DEFAULT_PAGE_SIZE) {      _log.warn("Unbounded database query, request size is over allowed limit({}), " + "please use corresponding iterative API.",DEFAULT_PAGE_SIZE);    }  }  return idList;}  }
class C{  public static CCMenuItemImage item(String value,String value2){  return item(value,value2,null,null,null);}  }
class C{  public JToggleButton(String text,boolean selected){  this(text,null,selected);}  }
class C{  public void warning(SAXParseException e) throws SAXException {}  }
class C{  public ArrayList<ChartSet> prepareEnterAnimation(ChartView chartView){  mEasing.setState(BaseEasingMethod.ENTER);  return prepareAnimation(chartView);}  }
class C{  protected void rememberAttribute(String name,String value){  if (textAttributes == null)   textAttributes=new HashMap<String,String>(4);  textAttributes.put(name,value);}  }
class C{  public void initTopology(String topologyName){  this.initTopology(topologyName,0);}  }
class C{  public static void addArchive(String sourcePath,ArcDef newArchive,boolean saveBackup) throws IOException {  String destPath=Util.getTmpFilename();  addArchive(sourcePath,destPath,newArchive);  copyFile(destPath,sourcePath,saveBackup);}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  protected void removeAnnotations(final List<? extends Annotation> annotations,final boolean fireModelChanged){  if (!annotations.isEmpty()) {    final Iterator<? extends Annotation> e=annotations.iterator();    while (e.hasNext()) {      removeAnnotation(e.next(),false);    }    if (fireModelChanged) {      fireModelChanged();    }  }}  }
class C{  public HashedBlockOutputStream(OutputStream outputStream,boolean littleEndian){  this.outputStream=outputStream;  this.littleEndian=littleEndian;}  }
class C{  public Object call(String key){  return call(key,new Object[]{});}  }
class C{  public final void removeMessages(int what,Object object){  mExec.removeMessages(what,object);}  }
class C{  final public void decrement(){  cat.decrement();}  }
class C{  public void init(){  if (!_initialized) {    super.init();    _supressDragging=true;    add(makeChangeDefaultIconsPanel());  }}  }
class C{  public void tearDownTables() throws Exception {  parentAccumuloInstanceDriver.tearDownTables();  childAccumuloInstanceDriver.tearDownTables();}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributerestoredefaultvalue.class,args);}  }
class C{  private boolean createToken(String methodFullSignature){  if (!isMethodRunning(methodFullSignature)) {    String token=generateRandomToken();    registerExpectedToken(methodFullSignature,token);    return true;  }  return false;}  }
class C{  public StaticMap key(String apiKey){  this.apiKey=apiKey;  return this;}  }
class C{  public static void silentCloseOutputStream(OutputStream os){  try {    if (os != null) {      os.close();    }  } catch (  IOException e) {    log.w(LOG_TAG,"Cannot close output stream",e);  }}  }
class C{  private AlignmentPattern handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,2 * stateCount[1],stateCountTotal);  if (!Float.isNaN(centerI)) {    float estimatedModuleSize=(float)(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f;    for (    AlignmentPattern center : possibleCenters) {      if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {        return center.combineEstimate(centerI,centerJ,estimatedModuleSize);      }    }    AlignmentPattern point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);    possibleCenters.add(point);    if (resultPointCallback != null) {      resultPointCallback.foundPossibleResultPoint(point);    }  }  return null;}  }
class C{  void removeEmptyRows(final List list){  for (final Iterator<ReceiptDetailInfo> detail=list.iterator(); detail.hasNext(); )   if (detail.next() == null)   detail.remove();}  }
class C{  public static SynchronizerStatus makeRunningStatus(){  return new SynchronizerStatus(Status.RUNNING,new Date(),null);}  }
class C{  public static Record createRecord(String name,String address,String type,JsonObject metadata){  Record ret=io.vertx.servicediscovery.types.MessageSource.createRecord(name,address,type,metadata);  return ret;}  }
class C{  public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  void finishClass(JCClassDecl tree,Env<AttrContext> env){  if ((tree.mods.flags & Flags.ENUM) != 0 && (types.supertype(tree.sym.type).tsym.flags() & Flags.ENUM) == 0) {    addEnumMembers(tree,env);  }  memberEnter(tree.defs,env);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  panel=new CoordinateTransformDialog(myHost);  if (myHost instanceof JFrame) {    JDialog dialog=new JDialog((JFrame)myHost,"Coordinate System Transformation",false);    Container contentPane=dialog.getContentPane();    contentPane.add(panel,BorderLayout.CENTER);    dialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    dialog.pack();    dialog.setLocationRelativeTo(null);    dialog.setVisible(true);  } else {    JFrame frame=new JFrame("Coordinate System Transformation");    Container contentPane=frame.getContentPane();    contentPane.add(panel,BorderLayout.CENTER);    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    frame.pack();    frame.setLocationRelativeTo(null);    frame.setVisible(true);  }}  }
class C{  protected CCFadeTo(float t,int a){  super(t);  toOpacity=a;}  }
class C{  public Object remove(Object key){  int hash=key == null ? 0 : key.hashCode() & 0x7FFFFFFF;  int index=hash % table.length;  Entry p=null;  for (Entry e=table[index]; e != null; e=e.next) {    if (e.hash == hash && (e.key == null && key == null || e.key != null && e.key.equals(key))) {      Object result=e.value;      if (p == null) {        table[index]=e.next;      } else {        p.next=e.next;      }      count--;      return result;    }    p=e;  }  return null;}  }
class C{  public void delete() throws IOException {  cache.delete();}  }
class C{  public void testExceptionsOnSetValue(){  TreeMap<String,String> map=new TreeMap<String,String>();  map.put("A","a");  map.put("B","b");  map.put("C","c");  assertAllEntryMethodsReturnImmutableEntries(map);}  }
class C{  public AccountHeaderBuilder withSelectionFirstLine(String selectionFirstLine){  this.mSelectionFirstLine=selectionFirstLine;  return this;}  }
class C{  public void resolveService(NsdService nsdService){  NsdServiceInfo serviceInfo=new NsdServiceInfo();  serviceInfo.setServiceName(nsdService.getName());  serviceInfo.setServiceType(nsdService.getType());  mResolveQueue.enqueue(serviceInfo);}  }
class C{  public void writeExif(String jpegFileName,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegFileName == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=new FileInputStream(jpegFileName);    writeExif(is,exifOutFileName);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  protected boolean isRenderNullValues(){  return true;}  }
class C{  public EnumPropertySource createEnumPropertySource(){  EnumPropertySourceImpl enumPropertySource=new EnumPropertySourceImpl();  return enumPropertySource;}  }
class C{  private StringUtils(){}  }
class C{  public void printStackTrace(PrintWriter printwriter){  super.printStackTrace(printwriter);}  }
class C{  static <T>void accept(Sink<T> this_,int value){  throw new IllegalStateException("called wrong accept method");}  }
class C{  public static CCSprite sprite(CCSpriteSheet spritesheet,CGRect rect){  return new CCSprite(spritesheet,rect);}  }
class C{  public static void alterProperty(final String value,final boolean set,final GUIFactory currentGUI){  boolean skipOthers=alterSectionProperties(value,set,currentGUI,currentGUI.isSingle());  if (!skipOthers) {    skipOthers=alterNavButtonProperties(value,set,currentGUI);  }  if (!skipOthers) {    skipOthers=alterDisplayButtonProperties(value,set,currentGUI);  }  if (!skipOthers) {    skipOthers=alterOptionPaneProperties(value,set,currentGUI);  }  if (!skipOthers) {    skipOthers=alterButtonBarProperties(value,set,currentGUI);  }  if (!skipOthers) {    skipOthers=alterSideBarProperties(value,set,currentGUI);  }  if (!skipOthers) {    alterMenuBarProperties(value,set,currentGUI,currentGUI.isSingle());  }}  }
class C{  static protected Element rootFromName(String name){  try {    return new jmri.jmrit.XmlFile(){    }.rootFromName(name);  } catch (  JDOMException|IOException e) {    log.error("Could not parse file \"" + name + "\" due to: "+ e);    return null;  }}  }
class C{  public void log(LogEvent event){  if (bLogToStdOut && psOldOut != null)   psOldOut.println(event.text);  if (event.entryType == LogEvent.LT_ERROR) {    if (AEDiagnostics.isStartupComplete()) {      try {        Debug.outDiagLoggerOnly("[" + event.logID + "] "+ event.text);      } catch (      Throwable e) {      }    }    if (logToStdErrAllowed && psOldErr != null && event.logID != LogIDs.STDERR) {      psOldErr.println("[" + event.logID + "] "+ event.text);    }  }  if (bEventLoggingEnabled)   for (int i=0; i < logListeners.size(); i++) {    try {      Object listener=logListeners.get(i);      if (listener instanceof ILogEventListener)       ((ILogEventListener)listener).log(event);    } catch (    Throwable e) {      if (logToStdErrAllowed && psOldErr != null) {        psOldErr.println("Error while logging: " + e.getMessage());        e.printStackTrace(psOldErr);      }    }  }  if (event.err != null && event.entryType == LogEvent.LT_ERROR) {    Debug.printStackTrace(event.err);  }}  }
class C{  private static <E>ImmutableList<E> construct(Object... elements){  return asImmutableList(checkElementsNotNull(elements));}  }
class C{  public static String sin(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function sin : " + params.length);  return "sin(" + params[0] + ")";}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  int i;  int numSamplePoints=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  numSamplePoints=Integer.parseInt(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    if (rows * cols < numSamplePoints) {      showFeedback("The number of samples cannot exceed the number of cells.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    image.close();    NonDuplicatingPriorityQueue queue=new NonDuplicatingPriorityQueue(numSamplePoints);    Random generator=new Random();    GridCell gc;    i=0;    do {      row=generator.nextInt(rows);      col=generator.nextInt(cols);      gc=new GridCell(row,col);      if (queue.add(gc)) {        i++;        progress=(int)(100f * i / numSamplePoints);        updateProgress("Loop 1 of 2:",progress);      }    } while (i < numSamplePoints);    Iterator<GridCell> it=queue.iterator();    i=1;    do {      gc=queue.poll();      output.setValue(gc.row,gc.col,i);      i++;      progress=(int)(100f * i / numSamplePoints);      updateProgress("Loop 2 of 2:",progress);    } while (i < numSamplePoints);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addRangeRestriction(String ColumnName,Object Code,Object Code_to){  Restriction r=new Restriction(ColumnName,Code,Code_to,null,null,null,true,0);  m_list.add(r);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean hasTransaction(){  return mTransactionStack != null;}  }
class C{  private int[] guessValueTypes(int[] definedTypes,DataResultSetTranslationConfiguration configuration,DataResultSet dataResultSet,int maxProbeRows,ProgressListener listener) throws OperatorException {  cancelGuessingRequested=false;  if (listener != null) {    listener.setTotal(1 + maxProbeRows);  }  DateFormat dateFormat=configuration.getDateFormat();  NumberFormat numberFormat=configuration.getNumberFormat();  if (listener != null) {    listener.setCompleted(1);  }  int[] columnValueTypes=new int[dataResultSet.getNumberOfColumns()];  Arrays.fill(columnValueTypes,Ontology.INTEGER);  dataResultSet.reset(listener);  int currentRow=0;  int exampleIndex=0;  NominalValueSet nominalValues[]=new NominalValueSet[dataResultSet.getNumberOfColumns()];  for (int i=0; i < nominalValues.length; i++) {    nominalValues[i]=new NominalValueSet();  }  int maxAnnotatedRow=configuration.getLastAnnotatedRowIndex();  while (dataResultSet.hasNext() && (currentRow < maxProbeRows || maxProbeRows <= 0)) {    if (cancelGuessingRequested) {      break;    }    dataResultSet.next(listener);    if (listener != null) {      listener.setCompleted(1 + currentRow);    }    if (currentRow > maxAnnotatedRow || configuration.getAnnotation(currentRow) == null) {      int numCols=dataResultSet.getNumberOfColumns();      if (numCols > definedTypes.length) {        String excessString;        try {          excessString=dataResultSet.getString(definedTypes.length);        } catch (        com.rapidminer.operator.nio.model.ParseException e) {          excessString=null;        }        addError(new ParsingError(dataResultSet.getCurrentRow() + 1,0,ErrorCode.ROW_TOO_LONG,excessString,null),exampleIndex);      }      for (int column=0; column < definedTypes.length; column++) {        if (definedTypes[column] == Ontology.POLYNOMINAL || dataResultSet.isMissing(column)) {          continue;        }        ValueType nativeType;        String stringRepresentation;        try {          nativeType=dataResultSet.getNativeValueType(column);          stringRepresentation=dataResultSet.getString(column);        } catch (        com.rapidminer.operator.nio.model.ParseException e) {          final ParsingError error=e.getError();          addError(error,exampleIndex);          continue;        }        nominalValues[column].register(stringRepresentation);        if (nativeType != ValueType.STRING) {          int isType=nativeType.getRapidMinerAttributeType();          if (nativeType == ValueType.NUMBER) {            Number value=getNumber(dataResultSet,exampleIndex,column,true);            if (!Double.isNaN(value.doubleValue())) {              if (value.intValue() == value.doubleValue()) {                isType=Ontology.INTEGER;              } else {                isType=Ontology.REAL;              }            }          }          if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(isType,definedTypes[column])) {            if (definedTypes[column] == Ontology.ATTRIBUTE_VALUE) {              definedTypes[column]=isType;            }            continue;          } else {            while (!Ontology.ATTRIBUTE_VALUE_TYPE.isA(isType,definedTypes[column])) {              definedTypes[column]=Ontology.ATTRIBUTE_VALUE_TYPE.getParent(definedTypes[column]);            }            if (definedTypes[column] == Ontology.ATTRIBUTE_VALUE) {              if (operator != null && operator.getCompatibilityLevel().isAtMost(VERSION_6_0_3)) {                definedTypes[column]=nominalValues[column].moreThanTwo ? Ontology.POLYNOMINAL : Ontology.BINOMINAL;              } else {                definedTypes[column]=Ontology.POLYNOMINAL;              }            }          }        } else {          definedTypes[column]=guessValueType(definedTypes[column],stringRepresentation,!nominalValues[column].moreThanTwo,dateFormat,numberFormat);        }      }      exampleIndex++;    }    currentRow++;  }  if (listener != null) {    listener.complete();  }  return definedTypes;}  }
class C{  private RectF addDirtyRegion(RectF region,RectF glob){  if (region == null) {    return glob;  } else   if (glob == null) {    return region;  } else {    glob.union(region);    return glob;  }}  }
class C{  public static void notifyClientCrashed(final DistributedMember clientId){  notifyListeners(clientId,true,EventType.CRASHED);}  }
class C{  @Override public boolean isPoolable() throws SQLException {  return false;}  }
class C{  public void createPictScenario04_1() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));  String supplierAdminId="Pict04_1Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict04_1SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="Pict04_1DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict04_1DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-03-04 00:00:00"),DateTimeHandling.calculateMillis("2013-03-16 23:59:59"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("19.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),Arrays.asList(VOVatRateFactory.newVOOrganizationVatRate(new BigDecimal("17.00"),customer)));  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalService);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_04_1",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PICT04_PERUNIT_DAY,technicalService,supplierMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"GUEST");  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(customerAdmin.getKey(),"PICT_TEST_04_1",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-05 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-06 00:00:00"),"PERIOD",DateTimeHandling.daysToMillis(100) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 06:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModel(subDetails.getPriceModel(),PriceModelType.PER_UNIT,PricingPeriod.DAY,"EUR",new BigDecimal("0.00"),new BigDecimal("7.00"),new BigDecimal("8.00"),4);  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),subDetails,newSubPriceModel,customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 12:00:00"));  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-08 18:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  subscrSetup.recordEventForSubscription(basicSetup.getSupplierAdminKey(),subDetails,DateTimeHandling.calculateMillis("2013-03-09 12:00:00"),"FILE_DOWNLOAD",15);  subscrSetup.recordEventForSubscription(basicSetup.getSupplierAdminKey(),subDetails,DateTimeHandling.calculateMillis("2013-03-09 18:00:00"),"FILE_UPLOAD",3);  VOServiceDetails freeService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT04_1_FREE_SERVICE",TestService.EXAMPLE,TestPriceModel.FREE,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,freeService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-11 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(customerAdmin.getKey(),subDetails,freeService);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-12 00:00:00"),"PERIOD",DateTimeHandling.daysToMillis(110) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-14 00:00:00"));  upgradedSubDetails.setSubscriptionId("PICT_TEST_04_1" + "_SubID2");  upgradedSubDetails=subscrSetup.modifySubscription(upgradedSubDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-15 12:00:00"));  upgradedSubDetails=subscrSetup.revokeUser(customerAdmin,upgradedSubDetails.getSubscriptionId());  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT04_1_PRORATA_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeService,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-17 00:00:00"));  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(customerAdmin.getKey(),upgradedSubDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-18 12:00:00"));  upgradedSubDetails2=subscrSetup.addUser(customerAdmin,VOServiceFactory.getRole(serviceDetails,"USER"),upgradedSubDetails2.getSubscriptionId());  upgradedSubDetails2=subscrSetup.modifyParameterForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-03-24 00:00:00"),"PERIOD",DateTimeHandling.daysToMillis(90) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-28 12:00:00"));  upgradedSubDetails2=subscrSetup.modifyUserRole(upgradedSubDetails2.getUsageLicenses().get(0),VOServiceFactory.getRole(proRataService,"ADMIN"),upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04_1",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04_1",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04_1",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_04_1",customer);}  }
class C{  public OMDrawingTool(){  super();  setBorder(BorderFactory.createEmptyBorder());  DEBUG=Debug.debugging("drawingtool");  selectionSupport=new SelectionSupport(this);  setAttributes(new GraphicAttributes());  setMouseMode(createMouseMode());  undoStack=new UndoStack();  undoTrigger=new UndoMenuItemStackTrigger();  undoStack.addUndoStackTrigger(undoTrigger);  setUseAsTool(false);}  }
class C{  public synchronized void finishWriting(){  doneWriting=true;  notifyAll();}  }
class C{  @Override public void fromBytes(ByteBuf buf){  numPigs=buf.readInt();  hand=EnumHand.values()[buf.readByte()];}  }
class C{  public void testRange() throws Exception {  int value=convertRange(5,0,20,0,10);  int value2=convert(5,0,35,0,255);  assertTrue(value == 10);  assertTrue(value2 == 10);}  }
class C{  public double distance(){  if (geom[0] == null || geom[1] == null)   throw new IllegalArgumentException("null geometries are not supported");  if (geom[0].isEmpty() || geom[1].isEmpty())   return 0.0;  computeMinDistance();  return minDistance;}  }
class C{  public int successfulShards(){  return successfulShards;}  }
class C{  public void exprSetParent(ExpressionNode n){  super.exprSetParent(n);  int nArgs=m_argVec.size();  for (int i=0; i < nArgs; i++) {    Expression arg=(Expression)m_argVec.elementAt(i);    arg.exprSetParent(n);  }}  }
class C{  public boolean hasAllNodesOfType(Class<?> expectedType){  return allMatch(Predicates.instanceOf(expectedType));}  }
class C{  public void testUpdateStringStringString() throws Exception {  writableTarget.next();  writableTarget.updateString("family","bird");  try {    target.next();    target.updateString("family","bird");    fail("SQLException was not thrown");  } catch (  SQLException e) {  }  target.updateString(1,"test");  target.close();  try {    target.updateString("family","test");    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  public static RRSIGRecord sign(RRset rrset,DNSKEYRecord key,PrivateKey privkey,Date inception,Date expiration,String provider) throws DNSSECException {  int alg=key.getAlgorithm();  checkAlgorithm(privkey,alg);  RRSIGRecord rrsig=new RRSIGRecord(rrset.getName(),rrset.getDClass(),rrset.getTTL(),rrset.getType(),alg,rrset.getTTL(),expiration,inception,key.getFootprint(),key.getName(),null);  rrsig.setSignature(sign(privkey,key.getPublicKey(),alg,digestRRset(rrsig,rrset),provider));  return rrsig;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public void storeStepData(String stepOrWorkflowId,Object data){  storeStepData(stepOrWorkflowId,null,data);}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.addPropertyChangeListener(propertyName,in_pcl);}  }
class C{  private ExprKraken parseSelectExpr(){  Token token=scanToken();  if (token == Token.STAR) {    throw new UnsupportedOperationException(getClass().getName());  } else {    _token=token;    return parseExpr();  }}  }
class C{  public LongMap(int initialCapacity){  this(initialCapacity,0.8f);}  }
class C{  public MessageBuilder appendCode(String language,String message){  strBuilder.append(MessageDecoration.CODE_LONG.getPrefix()).append(language).append("\n").append(message).append(MessageDecoration.CODE_LONG.getSuffix());  return this;}  }
class C{  public double eval(double params[]){  return ((params[0] + params[1] + params[2]) / 3.0);}  }
class C{  private void resetAnimations(){  for (int i=0; i < getItemCount(); i++) {    resetTextAnimation(mTextWrapper.getChildAt(i));    if (i == 0) {      resetSideAnimation(mMenuWrapper.getChildAt(i));    } else {      resetVerticalAnimation(mMenuWrapper.getChildAt(i),false);    }  }}  }
class C{  boolean p2isClean() throws IOException {  return FileMisc.hasToken(getIdeDir(),STALE_TOKEN,p2state());}  }
class C{  public SteerageQuartersCargoBay(double space,int doors){  totalSpace=((int)space) / 5;  weight=space;  currentSpace=((int)space) / 5;  this.doors=doors;}  }
class C{  @GET @Path("/job/{jobId}") @Description("Returns the job history for the given job Id") @Produces(MediaType.APPLICATION_JSON) public List<HistoryDTO> findByEntityId(@Context HttpServletRequest req,@PathParam("jobId") BigInteger jobId,@QueryParam("limit") BigInteger limit,@QueryParam("status") JobStatus status){  if (jobId == null || jobId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Job ID cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (limit != null && limit.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Limit must be a positive non-zero number.",Status.BAD_REQUEST);  }  PrincipalUser jobOwner=_getJobOwner(jobId);  if (jobOwner == null) {    throw new WebApplicationException(MessageFormat.format("The job with id {0} does not exist.",jobId),Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,jobOwner,getRemoteUser(req));  List<History> historyList=status != null ? _historyService.findByJobAndStatus(jobId,limit,status) : _historyService.findByJob(jobId,limit);  if (historyList != null && historyList.size() > 0) {    return HistoryDTO.transformToDto(historyList);  } else {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL__ORIGINAL_TARGET:    return originalTarget != null;case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL__IMPORT_SPECIFIER:  return importSpecifier != null;}return super.eIsSet(featureID);}  }
class C{  public RemoteFetchVersionMessage(){}  }
class C{  public void testClassIs2(){  m_Filter=getFilter("(CLASS is 'r') or (CLASS is 'g') or (CLASS is 'b')");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());}  }
class C{  public static ContentVerifierProvider createDefaultContentVerifier(PublicKey key) throws OperatorCreationException {  if ("RSA" == key.getAlgorithm()) {    return SUN_VERIFICATION_BUILDER.build(key);  } else {    return BC_VERIFICATION_BUILDER.build(key);  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="FE_FLOATING_POINT_EQUALITY",justification="equality is specifically 'Unchanged' here") public void changeLocoSpeed(DccThrottle t,float distance,float speed){  if (log.isDebugEnabled()) {    log.debug("Call to change speed over specific distance float " + speed + " distance "+ distance);  }  if (speed == t.getSpeedSetting()) {    if (log.isDebugEnabled()) {      log.debug("Throttle and request speed setting are the same " + speed + " "+ t.getSpeedSetting()+ " so will quit");    }    finishChange();    return;  }  if (desiredSpeedStep == speed) {    if (log.isDebugEnabled()) {      log.debug("Already setting to desired speed step");    }    return;  }  if (log.isDebugEnabled()) {    log.debug("public change speed step by float " + speed);  }  if (log.isDebugEnabled()) {    log.debug("Desired Speed Step " + desiredSpeedStep + " asked for "+ speed);  }  if (stopTimer != null) {    if (log.isDebugEnabled()) {      log.debug("stop timer valid so will cancel");    }    cancelSpeedChange();  }  _throttle=t;  if (log.isDebugEnabled()) {    log.debug("Desired Speed Step " + desiredSpeedStep + " asked for "+ speed);  }  desiredSpeedStep=speed;  if (log.isDebugEnabled()) {    log.debug("calculated current step " + _throttle.getSpeedSetting() + " required "+ speed+ " current "+ _throttle.getSpeedSetting());  }  if (_throttle.getSpeedSetting() < speed) {    increaseSpeed=true;    if (log.isDebugEnabled()) {      log.debug("Going for acceleration");    }  } else {    increaseSpeed=false;    if (log.isDebugEnabled()) {      log.debug("Going for deceleration");    }  }  calculateStepDetails(speed,distance);}  }
class C{  protected String translateMethodDescriptor(final String descriptor){  Type[] argTypes=Type.getArgumentTypes(descriptor);  for (int i=0; i < argTypes.length; ++i) {    argTypes[i]=getMirrorType(argTypes[i]);  }  final Type returnType=getMirrorType(Type.getReturnType(descriptor));  return Type.getMethodDescriptor(returnType,argTypes);}  }
class C{  void copyInto(Converter[] converters){  System.arraycopy(iConverters,0,converters,0,iConverters.length);}  }
class C{  public OverpassQuery timeout(int timeout){  builder.clause("timeout","" + timeout);  return this;}  }
class C{  public HistogramModel(List<double[]> data,List<String> dataNames,int bins,String title,String xAxisName,String yAxisName){  this(data,dataNames,bins,title,xAxisName,yAxisName,null);}  }
class C{  public Cemetery(){  super();}  }
class C{  public double calcPointToLineDistance(Entry startEntry,Entry endEntry,Entry entryPoint){  float xDiffEndStart=(float)endEntry.getXIndex() - (float)startEntry.getXIndex();  float xDiffEntryStart=(float)entryPoint.getXIndex() - (float)startEntry.getXIndex();  double normalLength=Math.sqrt((xDiffEndStart) * (xDiffEndStart) + (endEntry.getVal() - startEntry.getVal()) * (endEntry.getVal() - startEntry.getVal()));  return Math.abs((xDiffEntryStart) * (endEntry.getVal() - startEntry.getVal()) - (entryPoint.getVal() - startEntry.getVal()) * (xDiffEndStart)) / normalLength;}  }
class C{  public static org.oscm.internal.vo.VOSteppedPrice convertToUp(org.oscm.vo.VOSteppedPrice oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOSteppedPrice newVO=new org.oscm.internal.vo.VOSteppedPrice();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setLimit(oldVO.getLimit());  newVO.setPrice(oldVO.getPrice());  return newVO;}  }
class C{  @ScheduleRate(initialDelay=1,period=1,unit=TimeUnit.HOURS) void cacheClenup(){  sessions.cleanUp();}  }
class C{  public String send(String command,boolean retry) throws Exception {  ChannelResult result=null;  while (true) {    try {      if (socket == null || wr == null) {        connect();      }      wr.write(command + "\n");      wr.flush();      String response=rd.readLine();      if (response == null) {        throw new EOFException(command);      }      result=new ChannelResult(response);      break;    } catch (    EOFException e) {      throw e;    }catch (    Exception e) {      close();      if (!retry) {        return null;      }      try {        Thread.sleep(1000);      } catch (      Exception e2) {        logger.error(e2.getMessage(),e2);      }    }  }  if (!result.success) {    throw new Exception(String.format("[%s:%d] %s -> %s",host,port,command,result.message));  }  return result.message;}  }
class C{  public void fatal(Object message,Throwable t){}  }
class C{  public void updatePosition(Particle particle,long elapsedTime){  Vector3f speed=particle.getSpeed();  float delta=elapsedTime / 1000.0f;  float dx=speed.x * delta;  float dy=speed.y * delta;  float dz=speed.z * delta;  Vector3f pos=particle.getPosition();  particle.setPosition(pos.x + dx,pos.y + dy,pos.z + dz);}  }
class C{  public boolean isFieldAlignBlock(){  return getFieldAlignmentType().equals(FIELDALIGNMENTTYPE_Block);}  }
class C{  @Override public void emitList(ArrayList<HashMap<K,Integer>> tlist){  list.emit(tlist);}  }
class C{  public void startAnimation(){  resetAnimation();}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static long[] toLongArray(Float[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].longValue();  }  return result;}  }
class C{  public boolean hasMipMap(){  return mBitmapState.mBitmap != null && mBitmapState.mBitmap.hasMipMap();}  }
class C{  public String toString(){  if (m_Classifiers == null) {    return "MultiClassClassifier: No model built yet.";  }  StringBuffer text=new StringBuffer();  text.append("MultiClassClassifier\n\n");  for (int i=0; i < m_Classifiers.length; i++) {    text.append("Classifier ").append(i + 1);    if (m_Classifiers[i] != null) {      if ((m_ClassFilters != null) && (m_ClassFilters[i] != null)) {        if (m_ClassFilters[i] instanceof RemoveWithValues) {          Range range=new Range(((RemoveWithValues)m_ClassFilters[i]).getNominalIndices());          range.setUpper(m_ClassAttribute.numValues());          int[] pair=range.getSelection();          text.append(", " + (pair[0] + 1) + " vs "+ (pair[1] + 1));        } else         if (m_ClassFilters[i] instanceof MakeIndicator) {          text.append(", using indicator values: ");          text.append(((MakeIndicator)m_ClassFilters[i]).getValueRange());        }      }      text.append('\n');      text.append(m_Classifiers[i].toString() + "\n\n");    } else {      text.append(" Skipped (no training examples)\n");    }  }  return text.toString();}  }
class C{  public Symbol resolveIdent(String name){  if (name.equals(""))   return syms.errSymbol;  JavaFileObject prev=log.useSource(null);  try {    JCExpression tree=null;    for (    String s : name.split("\\.",-1)) {      if (!SourceVersion.isIdentifier(s))       return syms.errSymbol;      tree=(tree == null) ? make.Ident(names.fromString(s)) : make.Select(tree,names.fromString(s));    }    JCCompilationUnit toplevel=make.TopLevel(List.<JCTree.JCAnnotation>nil(),null,List.<JCTree>nil());    toplevel.packge=syms.unnamedPackage;    return attr.attribIdent(tree,toplevel);  }  finally {    log.useSource(prev);  }}  }
class C{  public static boolean isLevelFinest(){  return Level.FINEST.intValue() >= s_currentLevel.intValue();}  }
class C{  void insertAfter(Element<T> e,T t){  Element<T> newElement=new Element<T>(t);  if (e == null) {    newElement.next=head;    newElement.prev=null;    head=newElement;  } else {    newElement.next=e.next;    newElement.prev=e;    if (e.next != null) {      e.next.prev=newElement;    }    e.next=newElement;  }  if (tail == null || tail == e) {    tail=newElement;  }  count++;}  }
class C{  public static ReilInstruction createMul(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize secondSize,final String secondValue,final OperandSize thirdSize,final String thirdValue){  return createTrinaryInstruction(ReilHelpers.OPCODE_MUL,new CAddress(offset),firstSize,firstValue,secondSize,secondValue,thirdSize,thirdValue);}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.INFO_MODEL_ATTRIBUTE_SOURCE;}  }
class C{  @Override public int hashCode(){  int hash1=((Double)xmin).hashCode();  int hash2=((Double)ymin).hashCode();  int hash3=((Double)xmax).hashCode();  int hash4=((Double)ymax).hashCode();  return 31 * (31 * (31 * hash1 + hash2) + hash3) + hash4;}  }
class C{  public void validateVarEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  node.validateVarId(var,data);}  }
class C{  public UTF16Decoder(InputStream is,boolean be){  super(is);  bigEndian=be;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.742 -0400",hash_original_method="5DC76D27E31809647AFF6A6935906F66",hash_generated_method="63D6F39248A22F97220BB9163EFEE7DE") @Override public synchronized void close() throws IOException {  buffer=null;  isClosed=true;  notifyAll();}  }
class C{  public static <V,E>double diameter(Hypergraph<V,E> g){  return diameter(g,new UnweightedShortestPath<V,E>(g));}  }
class C{  public static boolean is64BitJavaOnMac(){  return isMac() && System.getProperty("os.arch").equals("x86_64");}  }
class C{  public boolean addFieldValues(Object[] fieldValues){  return this.contents.add(fieldValues);}  }
class C{  public void testHandshake() throws Exception {  startUp(false,false);  tcp=true;  checkValid(IGFS_NAME + ":" + GRID_NAME+ "@");  checkValid(IGFS_NAME + ":" + GRID_NAME+ "@127.0.0.1");  checkValid(IGFS_NAME + ":" + GRID_NAME+ "@127.0.0.1:"+ DFLT_IPC_PORT);  checkValid(IGFS_NAME + "@");  checkValid(IGFS_NAME + "@127.0.0.1");  checkValid(IGFS_NAME + "@127.0.0.1:" + DFLT_IPC_PORT);  checkValid(":" + GRID_NAME + "@");  checkValid(":" + GRID_NAME + "@127.0.0.1");  checkValid(":" + GRID_NAME + "@127.0.0.1:"+ DFLT_IPC_PORT);  checkValid("");  checkValid("127.0.0.1");  checkValid("127.0.0.1:" + DFLT_IPC_PORT);  tcp=false;  checkValid(IGFS_NAME + ":" + GRID_NAME+ "@");  checkValid(IGFS_NAME + ":" + GRID_NAME+ "@"+ HOST_PORT_UNUSED);  checkValid(IGFS_NAME + "@");  checkInvalid(IGFS_NAME + "@" + HOST_PORT_UNUSED);  checkValid(":" + GRID_NAME + "@");  checkInvalid(":" + GRID_NAME + "@"+ HOST_PORT_UNUSED);  checkValid("@");  checkInvalid("@" + HOST_PORT_UNUSED);}  }
class C{  public void onSent(EventManager.EventServiceResponseHandler handler){}  }
class C{  public PolygonRDD(JavaSparkContext spark,String InputLocation,Integer Offset,String Splitter){  this.setRawPolygonRDD(spark.textFile(InputLocation).map(new PolygonFormatMapper(Offset,Splitter)));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object dataObj=stack.pop();  String view=getString(stack);  java.util.Collection coll=null;  if (dataObj instanceof java.util.Collection)   coll=(java.util.Collection)dataObj; else   if (dataObj instanceof Object[])   coll=new java.util.Vector(java.util.Arrays.asList((Object[])dataObj)); else   if (dataObj != null) {    coll=new java.util.Vector();    coll.add(dataObj);  }  return sage.vfs.VFSFactory.getInstance().createCollectionView(view,coll);}  }
class C{  public Enumeration<Permission> elements(){  return permissions.elements();}  }
class C{  public void removeRange(int fromIndex,int toIndex){  if (SysProperties.CHECK) {    if (fromIndex > toIndex || toIndex > size) {      throw new ArrayIndexOutOfBoundsException("from=" + fromIndex + " to="+ toIndex+ " size="+ size);    }  }  System.arraycopy(data,toIndex,data,fromIndex,size - toIndex);  size-=toIndex - fromIndex;}  }
class C{  public boolean supportsSchemasInPrivilegeDefinitions() throws SQLException {  return false;}  }
class C{  public PathImpl lookup(String userPath,Map<String,Object> newAttributes){  return new SpyPath(super.lookup(userPath,newAttributes));}  }
class C{  public Long positionForPrevious(){  return previousCursor == null ? null : previousCursor.minPosition;}  }
class C{  public synchronized float recoveredFilesPercent(){  int total=0;  int recovered=0;  for (  File file : fileDetails.values()) {    if (file.reused() == false) {      total++;      if (file.fullyRecovered()) {        recovered++;      }    }  }  if (total == 0 && fileDetails.size() == 0) {    return 0.0f;  }  if (total == recovered) {    return 100.0f;  } else {    float result=100.0f * (recovered / (float)total);    return result;  }}  }
class C{  private void fill(int index){  this.choiceLocal[index]++;  for (int i=index + 1; i < getB(); i++) {    this.choiceLocal[i]=this.choiceLocal[i - 1] + 1;  }}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  RemoteOperationResult result=null;  AuthenticationMethod authMethod=AuthenticationMethod.UNKNOWN;  RemoteOperation operation=new ExistenceCheckRemoteOperation("",mContext,false);  client.clearCredentials();  client.setFollowRedirects(false);  result=operation.execute(client);  String redirectedLocation=result.getRedirectedLocation();  while (redirectedLocation != null && redirectedLocation.length() > 0 && !result.isIdPRedirection()) {    client.setBaseUri(Uri.parse(result.getRedirectedLocation()));    result=operation.execute(client);    redirectedLocation=result.getRedirectedLocation();  }  if (result.getCode() == ResultCode.UNAUTHORIZED) {    String authRequest=((result.getAuthenticateHeader()).trim()).toLowerCase();    if (authRequest.startsWith("basic")) {      authMethod=AuthenticationMethod.BASIC_HTTP_AUTH;    } else     if (authRequest.startsWith("bearer")) {      authMethod=AuthenticationMethod.BEARER_TOKEN;    }  } else   if (result.isSuccess()) {    authMethod=AuthenticationMethod.NONE;  } else   if (result.isIdPRedirection()) {    authMethod=AuthenticationMethod.SAML_WEB_SSO;  }  Log_OC.d(TAG,"Authentication method found: " + authenticationMethodToString(authMethod));  if (!authMethod.equals(AuthenticationMethod.UNKNOWN)) {    result=new RemoteOperationResult(true,result.getHttpCode(),null);  }  ArrayList<Object> data=new ArrayList<>();  data.add(authMethod);  result.setData(data);  return result;}  }
class C{  private void resetRelay(TungstenProperties serviceProps,Map<String,String> progress){  String relayLogDirName=serviceProps.getString("replicator.extractor.dbms.relayLogDir");  if (relayLogDirName != null) {    File relayLogDir=new File(relayLogDirName);    if (!removeDirectory(relayLogDir,progress)) {      logger.error(String.format("Could not remove the relay log directory %s",relayLogDirName));    }  }}  }
class C{  @Override public void initialize(URL location,ResourceBundle resources){  addListeners();  this.payloadTabsId.setTabClosingPolicy(TabPane.TabClosingPolicy.SELECTED_TAB);  createNewPayloadTab();  ArrayList<Node> buttonWithLabelsList=createButtonsWithLabels();  VBox vbButtons=new VBox();  vbButtons.setSpacing(10);  vbButtons.setPadding(new Insets(0,20,10,20));  vbButtons.getChildren().addAll(buttonWithLabelsList);  filterAdderPane.add(vbButtons,1,3);}  }
class C{  @DSModeled(DSC.SAFE) public final boolean isEmpty(){  return false;}  }
class C{  public Boolean isMLDPWallet(){  return mldpWallet;}  }
class C{  private void buildShell(){  this.shell.setText(ResourceManager.getLabel(ResourceManager.PREFERENCES));  final GridLayout gridLayout=new GridLayout(2,false);  gridLayout.marginWidth=gridLayout.marginHeight=0;  gridLayout.horizontalSpacing=gridLayout.verticalSpacing=0;  this.shell.setLayout(gridLayout);  this.container=new PWTabContainer(this.shell,SWT.NONE,this.tabs);  this.container.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,2,1));  this.container.build();  final Label sep=new Label(this.shell,SWT.SEPARATOR | SWT.HORIZONTAL);  sep.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,2,1));  buildButtons();}  }
class C{  private static String jsonValue(char value){  return String.valueOf(value);}  }
class C{  protected void sync() throws IOException {  fd.sync();}  }
class C{  public static byte[] concatByteArrays(byte[] a,byte[] b){  byte[] c=new byte[a.length + b.length];  System.arraycopy(a,0,c,0,a.length);  System.arraycopy(b,0,c,a.length,b.length);  return c;}  }
class C{  public static void importFunctions(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE00435: connection argument can not be null");  Preconditions.checkArgument(rawModuleId >= 0,"Error: raw module id can only be a positive number.");  Preconditions.checkArgument(moduleId >= 0,"Error: module if can only be a positive number");  final String query="INSERT INTO " + CTableNames.FUNCTIONS_TABLE + " (module_id, address, name, original_name, type, description, "+ "parent_module_name, parent_module_id, parent_module_function, comment_id) "+ " SELECT "+ moduleId+ ", address, demangled_name, name, (ENUM_RANGE(NULL::function_type))[type + 1], "+ "'', module_name, null, null, null "+ " FROM ex_"+ rawModuleId+ "_functions";  connection.executeUpdate(query,true);}  }
class C{  public void testSchemasIgnored() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setIgnore("foo,foobar?,bar*");  filterHelper.setFilter(rf);  verifyStmtIgnore(filterHelper,0,"bar","create database foo");  verifyStmtIgnore(filterHelper,1,"foo","drop database bar");  verifyStmtIgnore(filterHelper,2,"foo","delete from bar2.test where id=2");  verifyStmtIgnore(filterHelper,3,"foo","insert into foobar1.x1 values(1,2,3)");  verifyStmtIgnore(filterHelper,4,"foo","update test_tab set age=32 where id=1");  verifyStmtAccept(filterHelper,5,"foo","insert into test.tab values(52,1)");  filterHelper.done();}  }
class C{  @Override public void write(int oneByte) throws IOException {  mSingleByteArray[0]=(byte)(0xff & oneByte);  write(mSingleByteArray);}  }
class C{  private ScanState switchState(ScanState desired,EnumSet<ScanState> allowed){  final ScanState old;  final long timestamp;  final long sequence;synchronized (this) {    old=state;    if (!allowed.contains(state))     throw new IllegalStateException(state.toString());    state=desired;    timestamp=System.currentTimeMillis();    sequence=getNextSeqNumber();  }  LOG.fine("switched state: " + old + " -> "+ desired);  if (old != desired)   queueStateChangedNotification(sequence,timestamp,old,desired);  return old;}  }
class C{  public void buildClassifier(Instances D) throws Exception {  int L=D.classIndex();  int featlength=(D.numAttributes() - L) * 2;  int numSamples=D.numInstances();  int classlength=L * 2;  if (this.order == null) {    order=new ArrayList<Integer>();    for (int j=0; j < D.numInstances(); j++) {      order.add(j);    }  }  if (numFeatures == -1) {    initARAM(featlength,classlength,roa,threshold);  } else {    if (featlength != numFeatures) {      return;    }    if (classlength != numClasses) {      return;    }  }  for (int i=0; i < D.numInstances(); i++) {    Instance instance=D.get(order.get(i));    updateClassifier(instance);  }  System.out.println("Training done, used " + numCategories + " neurons with rho ="+ roa+ ".");}  }
class C{  public synchronized void addSeries(int index,XYSeries series){  mSeries.add(index,series);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.127 -0500",hash_original_method="7269E5EC16B8883F661BF745CCC5E6A6",hash_generated_method="7C73EA5F97430D41993A3887856C70A2") private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  protected void launch(IResource resource,String mode){  assert (new LaunchTargetTester().test(resource,null,new Object[0],null));  resource=ResourceUtils.resolveTargetResource(resource);  try {    String startupUrl=WebAppLaunchUtil.determineStartupURL(resource,false);    if (startupUrl != null) {      ILaunchConfiguration config=findOrCreateLaunchConfiguration(resource,startupUrl,false,true);      assert (config != null);      DebugUITools.launch(config,mode);    }  } catch (  CoreException e) {    CorePluginLog.logError(e);  }catch (  OperationCanceledException e) {  }}  }
class C{  public Object fromBytes(byte[] bytes,Schema readerSchema){  return deserialize(bytes,readerSchema);}  }
class C{  protected void addPrivilegedService(Class<? extends Service> serviceType){  this.privilegedServiceTypes.put(serviceType.getName(),serviceType);}  }
class C{  public void addEventToPool(SchedulableEvent event){  if (mEventPool == null) {    mEventPool=new FastEventQueue(event);  } else   if (mEventPool.size() < MAX_POOL_SIZE) {    mEventPool.add(event);  }}  }
class C{  public static void shuffle(List<?> list){  int size=list.size();  for (int i=size; i > 1; i--) {    Collections.swap(list,i - 1,Random.nextInt(i));  }}  }
class C{  private void transpose(int mainLoopIteration,mxGraphHierarchyModel model){  boolean improved=true;  int count=0;  int maxCount=10;  while (improved && count++ < maxCount) {    boolean nudge=mainLoopIteration % 2 == 1 && count % 2 == 1;    improved=false;    for (int i=0; i < model.ranks.size(); i++) {      mxGraphHierarchyRank rank=model.ranks.get(new Integer(i));      mxGraphAbstractHierarchyCell[] orderedCells=new mxGraphAbstractHierarchyCell[rank.size()];      Iterator<mxGraphAbstractHierarchyCell> iter=rank.iterator();      for (int j=0; j < orderedCells.length; j++) {        mxGraphAbstractHierarchyCell cell=(mxGraphAbstractHierarchyCell)iter.next();        orderedCells[cell.getGeneralPurposeVariable(i)]=cell;      }      List<mxGraphAbstractHierarchyCell> leftCellAboveConnections=null;      List<mxGraphAbstractHierarchyCell> leftCellBelowConnections=null;      List<mxGraphAbstractHierarchyCell> rightCellAboveConnections=null;      List<mxGraphAbstractHierarchyCell> rightCellBelowConnections=null;      int[] leftAbovePositions=null;      int[] leftBelowPositions=null;      int[] rightAbovePositions=null;      int[] rightBelowPositions=null;      mxGraphAbstractHierarchyCell leftCell=null;      mxGraphAbstractHierarchyCell rightCell=null;      for (int j=0; j < (rank.size() - 1); j++) {        if (j == 0) {          leftCell=orderedCells[j];          leftCellAboveConnections=leftCell.getNextLayerConnectedCells(i);          leftCellBelowConnections=leftCell.getPreviousLayerConnectedCells(i);          leftAbovePositions=new int[leftCellAboveConnections.size()];          leftBelowPositions=new int[leftCellBelowConnections.size()];          for (int k=0; k < leftAbovePositions.length; k++) {            leftAbovePositions[k]=((mxGraphAbstractHierarchyCell)leftCellAboveConnections.get(k)).getGeneralPurposeVariable(i + 1);          }          for (int k=0; k < leftBelowPositions.length; k++) {            leftBelowPositions[k]=((mxGraphAbstractHierarchyCell)leftCellBelowConnections.get(k)).getGeneralPurposeVariable(i - 1);          }        } else {          leftCellAboveConnections=rightCellAboveConnections;          leftCellBelowConnections=rightCellBelowConnections;          leftAbovePositions=rightAbovePositions;          leftBelowPositions=rightBelowPositions;          leftCell=rightCell;        }        rightCell=orderedCells[j + 1];        rightCellAboveConnections=rightCell.getNextLayerConnectedCells(i);        rightCellBelowConnections=rightCell.getPreviousLayerConnectedCells(i);        rightAbovePositions=new int[rightCellAboveConnections.size()];        rightBelowPositions=new int[rightCellBelowConnections.size()];        for (int k=0; k < rightAbovePositions.length; k++) {          rightAbovePositions[k]=((mxGraphAbstractHierarchyCell)rightCellAboveConnections.get(k)).getGeneralPurposeVariable(i + 1);        }        for (int k=0; k < rightBelowPositions.length; k++) {          rightBelowPositions[k]=((mxGraphAbstractHierarchyCell)rightCellBelowConnections.get(k)).getGeneralPurposeVariable(i - 1);        }        int totalCurrentCrossings=0;        int totalSwitchedCrossings=0;        for (int k=0; k < leftAbovePositions.length; k++) {          for (int ik=0; ik < rightAbovePositions.length; ik++) {            if (leftAbovePositions[k] > rightAbovePositions[ik]) {              totalCurrentCrossings++;            }            if (leftAbovePositions[k] < rightAbovePositions[ik]) {              totalSwitchedCrossings++;            }          }        }        for (int k=0; k < leftBelowPositions.length; k++) {          for (int ik=0; ik < rightBelowPositions.length; ik++) {            if (leftBelowPositions[k] > rightBelowPositions[ik]) {              totalCurrentCrossings++;            }            if (leftBelowPositions[k] < rightBelowPositions[ik]) {              totalSwitchedCrossings++;            }          }        }        if ((totalSwitchedCrossings < totalCurrentCrossings) || (totalSwitchedCrossings == totalCurrentCrossings && nudge)) {          int temp=leftCell.getGeneralPurposeVariable(i);          leftCell.setGeneralPurposeVariable(i,rightCell.getGeneralPurposeVariable(i));          rightCell.setGeneralPurposeVariable(i,temp);          rightCellAboveConnections=leftCellAboveConnections;          rightCellBelowConnections=leftCellBelowConnections;          rightAbovePositions=leftAbovePositions;          rightBelowPositions=leftBelowPositions;          rightCell=leftCell;          if (!nudge) {            improved=true;          }        }      }    }  }}  }
class C{  public static String typeToString(Type type){  StringBuilder sb=new StringBuilder();  typeToString(sb,type,new HashSet<Type>());  return sb.toString();}  }
class C{  private void syncChildren(List<OCFile> files){  int i;  OCFile newFile;  for (i=0; i < files.size() && !mCancellation; i++) {    newFile=files.get(i);    if (newFile.isFolder()) {      synchronizeFolder(newFile);    }  }  if (mCancellation && i < files.size())   Log_OC.d(TAG,"Leaving synchronization before synchronizing " + files.get(i).getRemotePath() + " due to cancelation request");}  }
class C{  public static Bitmap compressImage(Bitmap sourceBitmap,int compressionFactor){  BitmapFactory.Options opts=new BitmapFactory.Options();  opts.inPreferredConfig=Config.ARGB_8888;  opts.inSampleSize=compressionFactor;  if (Build.VERSION.SDK_INT >= 10) {    opts.inPreferQualityOverSpeed=true;  }  ByteArrayOutputStream stream=new ByteArrayOutputStream();  sourceBitmap.compress(Bitmap.CompressFormat.PNG,100,stream);  byte[] byteArray=stream.toByteArray();  Bitmap image=BitmapFactory.decodeByteArray(byteArray,0,byteArray.length,opts);  return image;}  }
class C{  public final TestSubscriber<T> assertFusionEnabled(){  if (establishedFusionMode != Fuseable.SYNC && establishedFusionMode != Fuseable.ASYNC) {    assertionError("Fusion was not enabled");  }  return this;}  }
class C{  public void testOneTrackTwoSegments() throws Exception {  Capture<Track> track=new Capture<Track>();  Location location0=createLocation(0,DATE_FORMAT_0.parse(TRACK_TIME_0).getTime());  expect(myTracksProviderUtils.insertTrack((Track)AndroidMock.anyObject())).andReturn(TRACK_ID_0_URI);  expectFirstTrackPoint(location0,TRACK_ID_0,TRACK_POINT_ID_0);  expect(myTracksProviderUtils.bulkInsertTrackPoint((Location[])AndroidMock.anyObject(),eq(5),eq(TRACK_ID_0))).andStubReturn(5);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID_0)).andReturn(TRACK_POINT_ID_3);  expect(myTracksProviderUtils.getTrack(PreferencesUtils.getLong(getContext(),R.string.recording_track_id_key))).andStubReturn(null);  expectUpdateTrack(track,true,TRACK_ID_0);  AndroidMock.replay(myTracksProviderUtils);  InputStream inputStream=new ByteArrayInputStream(VALID_ONE_TRACK_TWO_SEGMENTS_GPX.getBytes());  GpxFileTrackImporter gpxFileTrackImporter=new GpxFileTrackImporter(getContext(),myTracksProviderUtils);  long trackId=gpxFileTrackImporter.importFile(inputStream);  assertEquals(TRACK_ID_0,trackId);  long time0=DATE_FORMAT_0.parse(TRACK_TIME_0).getTime();  long time1=DATE_FORMAT_1.parse(TRACK_TIME_1).getTime();  long time2=DATE_FORMAT_1.parse(TRACK_TIME_2).getTime();  long time3=DATE_FORMAT_1.parse(TRACK_TIME_3).getTime();  assertEquals(time1 - time0 + time3 - time2,track.getValue().getTripStatistics().getTotalTime());  AndroidMock.verify(myTracksProviderUtils);  verifyTrack(track.getValue(),TRACK_NAME_0,TRACK_DESCRIPTION_0,DATE_FORMAT_0.parse(TRACK_TIME_0).getTime());}  }
class C{  public TlsServerConnector(SSLContext sslContext,InetSocketAddress socketAddress,int numberOfThreads,int idleTimeout){  super(socketAddress,numberOfThreads,idleTimeout);  this.sslContext=sslContext;}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  public void endVisit(SuperMethodInvocation node){}  }
class C{  public void deleteDomainErrors(final Set<String> hosthashes){  deleteDomainWithConstraint(this.getDefaultConnector(),CollectionSchema.host_id_s.getSolrFieldName(),hosthashes,CollectionSchema.failreason_s.getSolrFieldName() + AbstractSolrConnector.CATCHALL_DTERM);}  }
class C{  public byte[] decryptMacKey(String encMacKeyBase64,String serverPublicKeyBase64) throws AssociationException {  byte[] hzz=getDigestedZZ(serverPublicKeyBase64);  byte[] encMacKey=Base64.decodeBase64(encMacKeyBase64.getBytes());  if (hzz.length != encMacKey.length)   throw new AssociationException("Encrypted MAC key legth different from shared secret digest length!");  byte[] macKey=new byte[hzz.length];  for (int i=0; i < hzz.length; i++) {    byte b1=hzz[i];    byte b2=encMacKey[i];    macKey[i]=(byte)(b1 ^ b2);  }  if (DEBUG)   _log.debug("Decrypted MAC key Base64: " + new String(Base64.encodeBase64(macKey)));  return macKey;}  }
class C{  protected void notifyProgListenerLack(int status){  restartEndOfProgrammingTimer();  sendProgrammingReply(_usingProgrammer,-1,status);  _usingProgrammer=null;}  }
class C{  public ZyEditMode(final AbstractZyGraph<NodeType,EdgeType> graph){  m_graph=Preconditions.checkNotNull(graph,"Graph argument cannot be null");  m_labelKeyHandler=createNodeKeyHandler(graph);  m_actionFactory=createStateActionFactory();  m_stateFactory=new CStateFactory<NodeType,EdgeType>(graph,m_listeners,m_actionFactory);  m_state=m_stateFactory.createDefaultState();  setDefaultBehaviour();}  }
class C{  public static OutputStream newOutputStream(String fileName,boolean append) throws IOException {  return FilePath.get(fileName).newOutputStream(append);}  }
class C{  private static boolean validateDistributedDevice(String drillDownResponse,int localDeviceComponentCount,int storageVolumeCount,int extentCount){  int distributedDeviceComponentCount=StringUtils.countMatches(drillDownResponse,DISTRIBUTED_DEVICE_COMPONENT);  if (distributedDeviceComponentCount == 2) {switch (localDeviceComponentCount) {case 0:      if (storageVolumeCount == 2 && extentCount == 2) {        StringBuffer distributedDevice=new StringBuffer(START);        distributedDevice.append(DISTRIBUTED_DEVICE).append(DISTRIBUTED_DEVICE_COMPONENT_PATTERN).append(DISTRIBUTED_DEVICE_COMPONENT_PATTERN).append(END);        if (drillDownResponse.matches(distributedDevice.toString())) {          _log.info("this is a simple distributed device");          return true;        }      }    break;case 2:  if (storageVolumeCount == 3 && extentCount == 3) {    StringBuffer distributedDeviceMirrorOnLeg1=new StringBuffer(START);    distributedDeviceMirrorOnLeg1.append(DISTRIBUTED_DEVICE).append(DISTRIBUTED_LEG_MIRROR_PATTERN).append(DISTRIBUTED_DEVICE_COMPONENT_PATTERN).append(END);    StringBuffer distributedDeviceMirrorOnLeg2=new StringBuffer(START);    distributedDeviceMirrorOnLeg2.append(DISTRIBUTED_DEVICE).append(DISTRIBUTED_DEVICE_COMPONENT_PATTERN).append(DISTRIBUTED_LEG_MIRROR_PATTERN).append(END);    if (drillDownResponse.matches(distributedDeviceMirrorOnLeg1.toString()) || drillDownResponse.matches(distributedDeviceMirrorOnLeg2.toString())) {      _log.info("this is a distributed volume with a mirror on one leg or the other");      return true;    }  }break;case 4:if (storageVolumeCount == 4 && extentCount == 4) {StringBuffer distributedDeviceMirrorOnBothLegs=new StringBuffer(START);distributedDeviceMirrorOnBothLegs.append(DISTRIBUTED_DEVICE).append(DISTRIBUTED_LEG_MIRROR_PATTERN).append(DISTRIBUTED_LEG_MIRROR_PATTERN).append(END);if (drillDownResponse.matches(distributedDeviceMirrorOnBothLegs.toString())) {  _log.info("this is a distributed volume with mirrors on both legs");  return true;}}break;default :}}return false;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.AFTER_CODE___OPERATION_NAME_1:    setOperationName_1((String)newValue);  return;case UmplePackage.AFTER_CODE___ANONYMOUS_AFTER_CODE_11:getAnonymous_afterCode_1_1().clear();getAnonymous_afterCode_1_1().addAll((Collection<? extends Anonymous_afterCode_1_>)newValue);return;case UmplePackage.AFTER_CODE___CODE_1:setCode_1((String)newValue);return;case UmplePackage.AFTER_CODE___ANONYMOUS_AFTER_CODE_21:getAnonymous_afterCode_2_1().clear();getAnonymous_afterCode_2_1().addAll((Collection<? extends Anonymous_afterCode_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public String toString(){  return name;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  public static final String padInt(Number num,Padding padding){  return padding.getFormat().format(num);}  }
class C{  public AgentLoadException(){  super();}  }
class C{  public static Object invokeMethod(Class<?> clazz,Object obj,String name,Class<?>[] parameterTypes,Object[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  if (clazz == null || obj == null || name == null) {    throw new IllegalArgumentException("arguments cannot be null.");  }  if (parameterTypes != null && args != null && parameterTypes.length > 0 && args.length > 0) {    if (parameterTypes.length == args.length) {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method.invoke(obj,args);    }  } else {    Method method=clazz.getDeclaredMethod(name);    if (!method.isAccessible()) {      method.setAccessible(true);    }    return method.invoke(obj);  }  return null;}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(this.eType));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  if (kvno != null) {    temp.putInteger(BigInteger.valueOf(this.kvno.longValue()));    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);    temp=new DerOutputStream();  }  temp.putOctetString(this.cipher);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),temp);  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  @Override public void beforeTest() throws Exception {  super.beforeTest();  System.getProperties().remove(TcpDiscoveryZookeeperIpFinder.PROP_ZK_CONNECTION_STRING);  System.setProperty("zookeeper.jmx.log4j.disable","true");  zkCluster=new TestingCluster(ZK_CLUSTER_SIZE);  zkCluster.start();  zkCurator=CuratorFrameworkFactory.newClient(zkCluster.getConnectString(),new RetryNTimes(10,1000));  zkCurator.start();}  }
class C{  private static void loadCache(IgniteCache<Long,Person> cache){  long start=System.currentTimeMillis();  cache.loadCache(null,ENTRY_COUNT);  long end=System.currentTimeMillis();  System.out.println(">>> Loaded " + cache.size() + " keys with backups in "+ (end - start)+ "ms.");}  }
class C{  public TranslationVisitor(OutputCollector output){  this.output=output;}  }
class C{  boolean isOwningLedger(){  return this == owningLedger;}  }
class C{  public String sqlMetadata_availableDatabases(String vendorName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_availableDatabases();}  }
class C{  @Override public void process(Map<K,V> tuple){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    K key=e.getKey();    if (!doprocessKey(key)) {      continue;    }    if (sum.isConnected()) {      MutableDouble val=sums.get(key);      if (val == null) {        val=new MutableDouble(e.getValue().doubleValue());      } else {        val.add(e.getValue().doubleValue());      }      sums.put(cloneKey(key),val);    }    if (SumCountMap.this.count.isConnected()) {      MutableInt count=counts.get(key);      if (count == null) {        count=new MutableInt(0);        counts.put(cloneKey(key),count);      }      count.increment();    }  }}  }
class C{  public static <K,V>Map<K,V> singletonMap(K key,V value){  return new SingletonMap<K,V>(key,value);}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  @Override public void reset(final int iteration){  for (  Id<Link> id : this.linkCountMap.keySet()) {    this.linkCountMap.put(id,ZERO);  }}  }
class C{  public void exprAddChild(ExpressionNode n,int i){  appendChild((ElemTemplateElement)n);}  }
class C{  private HttpMessage fetchResource() throws IOException, DatabaseException {  HttpMessage msg;  try {    msg=reference.getHttpMessage();  }  finally {    deleteHistoryReference();  }  msg.getRequestHeader().setHeader(HttpHeader.IF_MODIFIED_SINCE,null);  msg.getRequestHeader().setHeader(HttpHeader.IF_NONE_MATCH,null);  if (parent.getSpiderParam().getUserAgent() != null) {    msg.getRequestHeader().setHeader(HttpHeader.USER_AGENT,parent.getSpiderParam().getUserAgent());  }  if (parent.getScanUser() != null) {    msg.setRequestingUser(parent.getScanUser());  }  if (parent.getHttpSender() != null) {    try {      parent.getHttpSender().sendAndReceive(msg);    } catch (    ConnectException e) {      log.debug("Failed to connect to: " + msg.getRequestHeader().getURI(),e);      throw e;    }catch (    SocketTimeoutException e) {      log.debug("Socket timeout: " + msg.getRequestHeader().getURI(),e);      throw e;    }catch (    SocketException e) {      log.debug("Socket exception: " + msg.getRequestHeader().getURI(),e);      throw e;    }catch (    UnknownHostException e) {      log.debug("Unknown host: " + msg.getRequestHeader().getURI(),e);      throw e;    }catch (    Exception e) {      log.error("An error occurred while fetching the resource [" + msg.getRequestHeader().getURI() + "]: "+ e.getMessage(),e);      throw e;    }  }  return msg;}  }
class C{  private void swim(int i){  if (i > 0 && greater((i - 1) / d,i)) {    exch(i,(i - 1) / d);    swim((i - 1) / d);  }}  }
class C{  public static void d(String tag,String msg){  d(tag,msg,null);}  }
class C{  public FolderNewIcon(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  private boolean processUnauthorized(Response response,Request request,TransactionID transactionID) throws StunException {  boolean challenge=true;  if (request.getAttributeCount() > 0) {    char[] excludedRequestAttributeTypes=new char[]{Attribute.USERNAME,Attribute.MESSAGE_INTEGRITY,Attribute.REALM,Attribute.NONCE};    for (    char excludedRequestAttributeType : excludedRequestAttributeTypes) {      if (request.containsAttribute(excludedRequestAttributeType)) {        challenge=false;        break;      }    }  }  return (challenge && processChallenge(response,request,transactionID));}  }
class C{  final void initTables() throws AdeException {  final String driver=Ade.getAde().getConfigProperties().database().getDatabaseDriver();  String query="insert into " + SQL.ADE_VERSIONS + " (ADE_VERSION, PATCHED_TIME) values ('"+ Ade.getAde().getDbVersion()+ "', current timestamp)";  if ((DriverType.parseDriverType(driver) == DriverType.MY_SQL) || (DriverType.parseDriverType(driver) == DriverType.MARIADB)) {    query=query.replace("current timestamp","current_timestamp");  }  ConnectionWrapper.executeDmlDefaultCon(query);}  }
class C{  protected void removeNode(int id) throws Exception {  int idx;  FolderTokenDocTreeNode node=null;  idx=findIndexById(id);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  node=(FolderTokenDocTreeNode)m_nodes.get(idx);  if (node.isNew())   m_nodes.remove(idx); else   node.setEditFlag(FolderEditFlag.REMOVE);}  }
class C{  protected static String[] commaDelimitedListToStringArray(String commaDelimitedStrings){  return (commaDelimitedStrings == null || commaDelimitedStrings.length() == 0) ? new String[0] : commaSeparatedValuesPattern.split(commaDelimitedStrings);}  }
class C{  public void testQuoteUnQuoteIdentifierWithDoubleQuote() throws Exception {  String[] identifiers=new String[]{"abcxyz","abc\"xyz","abc\"\"xyz","abc\"\"\"xyz","\"abcxyz\"","\"abc\"xyz\"","\"abc\"\"xyz\"","\"abc\"\"\"xyz\"","\"\"abcxyz\"\"","\"\"abc\"xyz\"\"","\"\"abc\"\"xyz\"\"","\"\"abc\"\"\"xyz\"\"","\"\"\"abcxyz\"\"\"","\"\"\"abc\"xyz\"\"\"","\"\"\"abc\"\"xyz\"\"\"","\"\"\"abc\"\"\"xyz\"\"\"","\"abcxyz","\"\"abcxyz","\"\"\"abcxyz","abcxyz\"","abcxyz\"\"","abcxyz\"\"\"","\"\"abcxyz\"","\"\"abc\"xyz\"","\"\"abc\"\"xyz\"","\"\"abc\"\"\"xyz\"","\"\"\"abcxyz\"","\"\"\"abc\"xyz\"","\"\"\"abc\"\"xyz\"","\"\"\"abc\"\"\"xyz\"","\"abcxyz\"\"","\"abc\"xyz\"\"","\"abc\"\"xyz\"\"","\"abc\"\"\"xyz\"\"","\"abcxyz\"\"\"","\"abc\"xyz\"\"\"","\"abc\"\"xyz\"\"\"","\"abc\"\"\"xyz\"\"\""};  String[] identifiersUnQuoted=new String[]{"abcxyz","abc\"xyz","abc\"\"xyz","abc\"\"\"xyz","abcxyz","\"abc\"xyz\"","abc\"xyz","\"abc\"\"\"xyz\"","\"\"abcxyz\"\"","\"\"abc\"xyz\"\"","\"\"abc\"\"xyz\"\"","\"\"abc\"\"\"xyz\"\"","\"abcxyz\"","\"\"\"abc\"xyz\"\"\"","\"abc\"xyz\"","\"\"\"abc\"\"\"xyz\"\"\"","\"abcxyz","\"\"abcxyz","\"\"\"abcxyz","abcxyz\"","abcxyz\"\"","abcxyz\"\"\"","\"\"abcxyz\"","\"\"abc\"xyz\"","\"\"abc\"\"xyz\"","\"\"abc\"\"\"xyz\"","\"abcxyz","\"\"\"abc\"xyz\"","\"abc\"xyz","\"\"\"abc\"\"\"xyz\"","\"abcxyz\"\"","\"abc\"xyz\"\"","\"abc\"\"xyz\"\"","\"abc\"\"\"xyz\"\"","abcxyz\"","\"abc\"xyz\"\"\"","abc\"xyz\"","\"abc\"\"\"xyz\"\"\""};  String[] identifiersQuotedNonPedantic=new String[]{"\"abcxyz\"","\"abc\"\"xyz\"","\"abc\"\"\"\"xyz\"","\"abc\"\"\"\"\"\"xyz\"","\"abcxyz\"","\"\"\"abc\"\"xyz\"\"\"","\"abc\"\"xyz\"","\"\"\"abc\"\"\"\"\"\"xyz\"\"\"","\"\"\"\"\"abcxyz\"\"\"\"\"","\"\"\"\"\"abc\"\"xyz\"\"\"\"\"","\"\"\"\"\"abc\"\"\"\"xyz\"\"\"\"\"","\"\"\"\"\"abc\"\"\"\"\"\"xyz\"\"\"\"\"","\"\"\"abcxyz\"\"\"","\"\"\"\"\"\"\"abc\"\"xyz\"\"\"\"\"\"\"","\"\"\"abc\"\"xyz\"\"\"","\"\"\"\"\"\"\"abc\"\"\"\"\"\"xyz\"\"\"\"\"\"\"","\"\"\"abcxyz\"","\"\"\"\"\"abcxyz\"","\"\"\"\"\"\"\"abcxyz\"","\"abcxyz\"\"\"","\"abcxyz\"\"\"\"\"","\"abcxyz\"\"\"\"\"\"\"","\"\"\"\"\"abcxyz\"\"\"","\"\"\"\"\"abc\"\"xyz\"\"\"","\"\"\"\"\"abc\"\"\"\"xyz\"\"\"","\"\"\"\"\"abc\"\"\"\"\"\"xyz\"\"\"","\"\"\"abcxyz\"","\"\"\"\"\"\"\"abc\"\"xyz\"\"\"","\"\"\"abc\"\"xyz\"","\"\"\"\"\"\"\"abc\"\"\"\"\"\"xyz\"\"\"","\"\"\"abcxyz\"\"\"\"\"","\"\"\"abc\"\"xyz\"\"\"\"\"","\"\"\"abc\"\"\"\"xyz\"\"\"\"\"","\"\"\"abc\"\"\"\"\"\"xyz\"\"\"\"\"","\"abcxyz\"\"\"","\"\"\"abc\"\"xyz\"\"\"\"\"\"\"","\"abc\"\"xyz\"\"\"","\"\"\"abc\"\"\"\"\"\"xyz\"\"\"\"\"\"\""};  String[] identifiersQuotedPedantic=new String[]{"\"abcxyz\"","\"abc\"\"xyz\"","\"abc\"\"\"\"xyz\"","\"abc\"\"\"\"\"\"xyz\"","\"\"\"abcxyz\"\"\"","\"\"\"abc\"\"xyz\"\"\"","\"\"\"abc\"\"\"\"xyz\"\"\"","\"\"\"abc\"\"\"\"\"\"xyz\"\"\"","\"\"\"\"\"abcxyz\"\"\"\"\"","\"\"\"\"\"abc\"\"xyz\"\"\"\"\"","\"\"\"\"\"abc\"\"\"\"xyz\"\"\"\"\"","\"\"\"\"\"abc\"\"\"\"\"\"xyz\"\"\"\"\"","\"\"\"\"\"\"\"abcxyz\"\"\"\"\"\"\"","\"\"\"\"\"\"\"abc\"\"xyz\"\"\"\"\"\"\"","\"\"\"\"\"\"\"abc\"\"\"\"xyz\"\"\"\"\"\"\"","\"\"\"\"\"\"\"abc\"\"\"\"\"\"xyz\"\"\"\"\"\"\"","\"\"\"abcxyz\"","\"\"\"\"\"abcxyz\"","\"\"\"\"\"\"\"abcxyz\"","\"abcxyz\"\"\"","\"abcxyz\"\"\"\"\"","\"abcxyz\"\"\"\"\"\"\"","\"\"\"\"\"abcxyz\"\"\"","\"\"\"\"\"abc\"\"xyz\"\"\"","\"\"\"\"\"abc\"\"\"\"xyz\"\"\"","\"\"\"\"\"abc\"\"\"\"\"\"xyz\"\"\"","\"\"\"\"\"\"\"abcxyz\"\"\"","\"\"\"\"\"\"\"abc\"\"xyz\"\"\"","\"\"\"\"\"\"\"abc\"\"\"\"xyz\"\"\"","\"\"\"\"\"\"\"abc\"\"\"\"\"\"xyz\"\"\"","\"\"\"abcxyz\"\"\"\"\"","\"\"\"abc\"\"xyz\"\"\"\"\"","\"\"\"abc\"\"\"\"xyz\"\"\"\"\"","\"\"\"abc\"\"\"\"\"\"xyz\"\"\"\"\"","\"\"\"abcxyz\"\"\"\"\"\"\"","\"\"\"abc\"\"xyz\"\"\"\"\"\"\"","\"\"\"abc\"\"\"\"xyz\"\"\"\"\"\"\"","\"\"\"abc\"\"\"\"\"\"xyz\"\"\"\"\"\"\""};  for (int i=0; i < identifiers.length; i++) {    assertEquals(i + 1 + ". "+ identifiers[i]+ ". non-pedantic quoting",identifiersQuotedNonPedantic[i],StringUtils.quoteIdentifier(identifiers[i],"\"",false));  }  for (int i=0; i < identifiers.length; i++) {    assertEquals(i + 1 + ". "+ identifiers[i]+ ". pedantic quoting",identifiersQuotedPedantic[i],StringUtils.quoteIdentifier(identifiers[i],"\"",true));    assertEquals(i + 1 + ". "+ identifiersUnQuoted[i]+ ". pedantic quoting",identifiersQuotedNonPedantic[i],StringUtils.quoteIdentifier(identifiersUnQuoted[i],"\"",true));  }  for (int i=0; i < identifiers.length; i++) {    assertEquals(i + 1 + ". "+ identifiers[i]+ ". unquoting",identifiersUnQuoted[i],StringUtils.unQuoteIdentifier(identifiers[i],"\""));    assertEquals(i + 1 + ". "+ identifiersQuotedNonPedantic[i]+ ". non-pedantic unquoting",identifiersUnQuoted[i],StringUtils.unQuoteIdentifier(identifiersQuotedNonPedantic[i],"\""));    assertEquals(i + 1 + ". "+ identifiersQuotedPedantic[i]+ ". pedantic unquoting",identifiers[i],StringUtils.unQuoteIdentifier(identifiersQuotedPedantic[i],"\""));  }}  }
class C{  public Object monitor(Object object,Class[] interfaces){  if (!isEnabled() || object == null)   return object; else   return monitorNoCheck(object,interfaces);}  }
class C{  private SourceObject(final Player player,final Entity parent,final String slotName,final Item entity){  super(player);  this.parent=parent;  this.slot=slotName;  this.item=entity;}  }
class C{  public void printToTerminal(final String toPrint){  interpreter.println(toPrint);}  }
class C{  public static void ISTORE_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ISTORE_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  @Deprecated public void addInstance(Instance newInstance) throws Exception {  updateClusterer(newInstance);}  }
class C{  public boolean isIOS(){  return operatingSystem == OperatingSystem.IOS;}  }
class C{  private int hashcode(String key){  return 0;}  }
class C{  public synchronized SynchronizingStorageEngine register(String storeName,Scope scope,boolean persistent) throws PersistException {  SynchronizingStorageEngine store=localStores.get(storeName);  if (store != null) {    return store;  }  IStorageEngine<ByteArray,byte[]> dstore;  if (persistent) {    if (persistentDataSource == null)     persistentDataSource=JavaDBStorageEngine.getDataSource(dbPath,false);    dstore=new JavaDBStorageEngine(storeName,persistentDataSource);  } else {    dstore=new InMemoryStorageEngine<ByteArray,byte[]>(storeName);  }  store=new SynchronizingStorageEngine(dstore,syncManager,syncManager.debugCounter,scope);  localStores.put(storeName,store);  return store;}  }
class C{  public void execute(){  if (isSupported()) {    Intent intent=new Intent(Intent.ACTION_VIEW,uri);    context.startActivity(intent);  } else {    Log.i(UberSdk.UBER_SDK_LOG_TAG,"Uber app not installed, redirecting to mobile sign up.");    final String clientId=uri.getQueryParameter(Builder.CLIENT_ID);    final String userAgent=uri.getQueryParameter(Builder.USER_AGENT);    new SignupDeeplink(context,clientId,userAgent).execute();  }}  }
class C{  public Point offsetToCell(int offset){  return table.offsetToCell(offset);}  }
class C{  public final void removeMessages(int what,Object object){  mExec.removeMessages(what,object);}  }
class C{  public option removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getStringLit_();}  }
class C{  public h1(Element element){  addElement(element);}  }
class C{  public double linearAzimuth(Location location){  if (location == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","linearAzimuth","missingLocation"));  }  double lat1=Math.toRadians(this.latitude);  double lon1=Math.toRadians(this.longitude);  double lat2=Math.toRadians(location.latitude);  double lon2=Math.toRadians(location.longitude);  if (lat1 == lat2 && lon1 == lon2) {    return 0;  }  double dLon=lon2 - lon1;  double dPhi=lat2 - lat1;  if (Math.abs(dLon) > Math.PI) {    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  }  double azimuthRadians=Math.atan2(dLon,dPhi);  return Double.isNaN(azimuthRadians) ? 0 : Math.toDegrees(azimuthRadians);}  }
class C{  public Vector2 abs(){  return new Vector2(Math.abs(x),Math.abs(z));}  }
class C{  public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException {  log.info("random-read(0x" + Long.toHexString(fileOffset) + ","+ length+ ")");  return _file.read(fileOffset,buffer,offset,length);}  }
class C{  XSLTSchema(){  build();}  }
class C{  protected void bindViewHelper(BaseViewHolder viewHolder){  Context ctx=viewHolder.itemView.getContext();  viewHolder.itemView.setId(getIdentifier());  viewHolder.itemView.setSelected(isSelected());  viewHolder.itemView.setTag(this);  int selectedColor=getSelectedColor(ctx);  int color=getColor(ctx);  int selectedTextColor=getSelectedTextColor(ctx);  int iconColor=getIconColor(ctx);  int selectedIconColor=getSelectedIconColor(ctx);  UIUtils.setBackground(viewHolder.view,DrawerUIUtils.getSelectableBackground(ctx,selectedColor));  StringHolder.applyTo(this.getName(),viewHolder.name);  StringHolder.applyToOrHide(this.getDescription(),viewHolder.description);  viewHolder.name.setTextColor(getTextColorStateList(color,selectedTextColor));  ColorHolder.applyToOr(getDescriptionTextColor(),viewHolder.description,getTextColorStateList(color,selectedTextColor));  if (getTypeface() != null) {    viewHolder.name.setTypeface(getTypeface());    viewHolder.description.setTypeface(getTypeface());  }  ImageHolder.applyTo(icon,viewHolder.icon,"customUrlItem");  DrawerUIUtils.setDrawerVerticalPadding(viewHolder.view);}  }
class C{  public static String trimLeadingWhitespace(String str){  if (!hasLength(str)) {    return str;  }  StringBuilder sb=new StringBuilder(str);  while (sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {    sb.deleteCharAt(0);  }  return sb.toString();}  }
class C{  public static boolean isInheritedMapped(Class<?> classToCheck){  for (  Class<?> clazz : getAllsuperClasses(classToCheck))   if (!isNull(clazz.getAnnotation(JGlobalMap.class)))   return true;  for (  Field field : getListOfFields(classToCheck))   if (!isNull(field.getAnnotation(JMap.class)))   return true;  return false;}  }
class C{  static double[] loadExpIntB(){  return EXP_INT_B.clone();}  }
class C{  public void changeTextColor(int textColor){  for (  Piece mPiece : mPieces) {    mPiece.setTextColor(textColor);  }  display();}  }
class C{  public static final BasicOCSPResp fromRespToBasic(OCSPResp ocspResp){  try {    return (BasicOCSPResp)ocspResp.getResponseObject();  } catch (  OCSPException e) {    throw new RuntimeException(e);  }}  }
class C{  public Reader create(InputStream is,String javaEncoding) throws UnsupportedEncodingException {  if (Charset.isSupported(javaEncoding)) {    Charset charset=Charset.forName(javaEncoding);    return new InputStreamReader(is,charset);  } else {    return new InputStreamReader(is,javaEncoding);  }}  }
class C{  public void pause(boolean toPause){  paused=toPause;  for (  Module module : modules) {    module.pause(toPause);  }  if (!toPause && !curState.getNewVariables().isEmpty()) {synchronized (curState) {      update();    }  }}  }
class C{  public List<DiskImage> listDiskImages() throws IaasException {  HashMap<String,String> request=getBasicParameters();  request.put(LParameter.ACTION,LOperation.LIST_DISKIMAGE);  XMLConfiguration result=execute(request);  List<DiskImage> resultList=new LinkedList<DiskImage>();  if (result != null) {    List<HierarchicalConfiguration> images=result.configurationsAt("diskimages.diskimage");    for (    HierarchicalConfiguration image : images) {      resultList.add(new RORDiskImage(image));    }  }  return resultList;}  }
class C{  public void testRbrInsert() throws Exception {  OneRowChange oneRowChange=generateRowChange("foo","bar",RowChangeData.ActionType.INSERT);  oneRowChange.setColumnSpec(generateSpec(oneRowChange));  oneRowChange.setColumnValues(generateValues(oneRowChange,1,"two"));  RbrTableChangeSet changeSet=new RbrTableChangeSet(oneRowChange);  assertEquals("check schema","foo",changeSet.getSchemaName());  assertEquals("check table","bar",changeSet.getTableName());  assertEquals("check rows",1,changeSet.size());  RbrRowChange rowChange=changeSet.getRowChange(0);  assertEquals("check schema","foo",rowChange.getSchemaName());  assertEquals("check table","bar",rowChange.getTableName());  assertTrue(rowChange.isInsert());  assertFalse(rowChange.isUpdate());  assertFalse(rowChange.isDelete());  RbrRowImage before=rowChange.getBeforeImage();  assertNull(before);  RbrRowImage after=rowChange.getAfterImage();  assertNotNull(after);  assertEquals("c1 is c1","c1",after.getSpec("c1").getName());  assertEquals("c2 is char",Types.CHAR,after.getSpec(2).getType());  assertEquals("key is 1",1,after.getValue("c1").getValue());  assertEquals("col is two","two",after.getValue(2).getValue());}  }
class C{  private void removeEmptyContainers(Map<Integer,List<InstanceId>> allocation){  Iterator<Integer> containerIds=allocation.keySet().iterator();  while (containerIds.hasNext()) {    Integer containerId=containerIds.next();    if (allocation.get(containerId).isEmpty()) {      containerIds.remove();    }  }}  }
class C{  public void clearExactSet(){  exactTypeSet.clear();}  }
class C{  public static LongRange resolveRange(final File dir,LongRange range) throws IOException {  return resolveRange(new IndexFile(dir),range);}  }
class C{  private static void handle(ExecutionException ex){  Throwable cause=ex.getCause();  if (cause instanceof OperationCancelledException) {    return;  }  if (cause instanceof DistributedSystemDisconnectedException) {    throw new DistributedSystemDisconnectedException("While waiting for Future",ex);  }  throw new RuntimeAdminException(LocalizedStrings.RemoteGfManagerAgent_AN_EXCEPUTIONEXCEPTION_WAS_THROWN_WHILE_WAITING_FOR_FUTURE.toLocalizedString(),ex);}  }
class C{  public CapitalizationFilter(TokenStream in,boolean onlyFirstWord,CharArraySet keep,boolean forceFirstLetter,Collection<char[]> okPrefix,int minWordLength,int maxWordCount,int maxTokenLength){  super(in);  this.onlyFirstWord=onlyFirstWord;  this.keep=keep;  this.forceFirstLetter=forceFirstLetter;  this.okPrefix=okPrefix;  if (minWordLength < 0) {    throw new IllegalArgumentException("minWordLength must be greater than or equal to zero");  }  if (maxWordCount < 1) {    throw new IllegalArgumentException("maxWordCount must be greater than zero");  }  if (maxTokenLength < 1) {    throw new IllegalArgumentException("maxTokenLength must be greater than zero");  }  this.minWordLength=minWordLength;  this.maxWordCount=maxWordCount;  this.maxTokenLength=maxTokenLength;}  }
class C{  public SyncFailedException(String desc){  super(desc);}  }
class C{  private String maybeProjectCase(String hypothesis){  String output=hypothesis;  JoshuaConfiguration config=sourceSentence.config;  if (config.project_case) {    String[] tokens=hypothesis.split("\\s+");    List<List<Integer>> points=getTranslationWordAlignments();    for (int i=0; i < points.size(); i++) {      List<Integer> target=points.get(i);      for (      int source : target) {        Token token=sourceSentence.getTokens().get(source + 1);        String annotation="";        if (token != null && token.getAnnotation("lettercase") != null)         annotation=token.getAnnotation("lettercase");        if (source != 0 && annotation.equals("upper"))         tokens[i]=FormatUtils.capitalize(tokens[i]); else         if (annotation.equals("all-upper"))         tokens[i]=tokens[i].toUpperCase();      }    }    output=String.join(" ",tokens);  }  return output;}  }
class C{  public PrincipalId addExternalSolutionUser(String tenantName,String userName,SolutionDetail detail) throws Exception {  return getService().addSolutionUser(tenantName,userName,detail,this.getServiceContext());}  }
class C{  public ExtendedKeyUsage(byte[] encoding){  super(encoding);}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private void captureRest(List<TreeNode> tree,int pos,UIComponent c){  int sz=c.getChildCount();  if (sz > 0) {    List<UIComponent> child=c.getChildren();    for (int i=0; i < sz; i++) {      captureChild(tree,pos,child.get(i));    }  }  sz=c.getFacetCount();  if (sz > 0) {    for (    Map.Entry<String,UIComponent> entry : c.getFacets().entrySet()) {      captureFacet(tree,pos,entry.getKey(),entry.getValue());    }  }}  }
class C{  public DelimitedTextTableWriter(){  this("\t");}  }
class C{  public boolean isTextTruncated(){  return !getSubStringText().equals(getText());}  }
class C{  public void invokeClear(Trigger.TriggerContext c) throws Exception {  trigger.clear(c.forTrigger(this));}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.legendLine,stream);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:08.030 -0400",hash_original_method="2051B5906EFEBE63267D8445598B8C2A",hash_generated_method="2051B5906EFEBE63267D8445598B8C2A") void internalSetOutputStream(OutputStream newOs){  this.os=newOs;}  }
class C{  public Iterator<SearchTree<VertexType>> searchTreeIterator(){  return searchTreeList.iterator();}  }
class C{  protected void drawGeometry(DrawContext dc,int mode,int count,int type,Buffer elementBuffer,ShapeData shapeData,int face){  if (elementBuffer == null) {    String message="nullValue.ElementBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Geometry mesh=shapeData.getMesh(face);  if (mesh.getBuffer(Geometry.VERTEX) == null) {    String message="nullValue.VertexBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GL2 gl=dc.getGL().getGL2();  int size, glType, stride;  Buffer vertexBuffer, normalBuffer;  size=mesh.getSize(Geometry.VERTEX);  glType=mesh.getGLType(Geometry.VERTEX);  stride=mesh.getStride(Geometry.VERTEX);  vertexBuffer=mesh.getBuffer(Geometry.VERTEX);  normalBuffer=null;  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      normalBuffer=mesh.getBuffer(Geometry.NORMAL);      if (normalBuffer == null) {        gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);      } else {        glType=mesh.getGLType(Geometry.NORMAL);        stride=mesh.getStride(Geometry.NORMAL);        gl.glNormalPointer(glType,stride,normalBuffer);      }    }  }  boolean vboState=dc.getGLRuntimeCapabilities().isVertexBufferObjectEnabled();  if (this.shouldUseVBOs(dc) && (this.getVboIds(getSubdivisions(),dc)) != null) {    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,getVboIds(getSubdivisions(),dc)[2 * face]);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,this.getVboIds(getSubdivisions(),dc)[2 * face + 1]);    gl.glVertexPointer(size,glType,stride,0);    gl.glDrawElements(mode,count,type,0);    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,0);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,0);  } else {    gl.glVertexPointer(size,glType,stride,vertexBuffer.rewind());    gl.glDrawElements(mode,count,type,elementBuffer);  }  gl.glDisable(GL2.GL_RESCALE_NORMAL);  dc.getGLRuntimeCapabilities().setVertexBufferObjectEnabled(vboState);  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      if (normalBuffer == null)       gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);    }  }}  }
class C{  private void sendStageProgressPatch(TaskState state){  ServiceUtils.logInfo(this,"Sending self-patch to stage %s:%s",state.stage,state.subStage);  TaskUtils.sendSelfPatch(this,buildPatch(state.stage,state.subStage,null));}  }
class C{  public static String toQualifiedName(char[][] typeName){  int len=typeName.length - 1;  for (  char[] c : typeName)   len+=c.length;  StringBuilder sb=new StringBuilder(len);  boolean first=true;  for (  char[] c : typeName) {    sb.append(first ? "" : ".").append(c);    first=false;  }  return sb.toString();}  }
class C{  public WaterfallBarRenderer(){  this(new GradientPaint(0.0f,0.0f,new Color(0x22,0x22,0xFF),0.0f,0.0f,new Color(0x66,0x66,0xFF)),new GradientPaint(0.0f,0.0f,new Color(0x22,0xFF,0x22),0.0f,0.0f,new Color(0x66,0xFF,0x66)),new GradientPaint(0.0f,0.0f,new Color(0xFF,0x22,0x22),0.0f,0.0f,new Color(0xFF,0x66,0x66)),new GradientPaint(0.0f,0.0f,new Color(0xFF,0xFF,0x22),0.0f,0.0f,new Color(0xFF,0xFF,0x66)));}  }
class C{  public boolean mouseMoved(MouseEvent e){  OMGraphic newSelectedGraphic;  if (show_plot_ && graph != null) {    newSelectedGraphic=graph.selectPoint(e.getX(),e.getY(),4.0f);    if (newSelectedGraphic != null) {      String infostring=(String)(newSelectedGraphic.getAttribute(OMGraphic.APP_OBJECT));      if (infostring != null) {        fireRequestInfoLine(infostring);      }    } else {      fireRequestInfoLine("");    }    return true;  } else {    OMGraphicList list=getList();    if (list != null) {      newSelectedGraphic=list.selectClosest(e.getX(),e.getY(),4.0f);      if (newSelectedGraphic != null && (selectedGraphic == null || newSelectedGraphic != selectedGraphic)) {        Debug.message("basic","Making selection...");        selectedGraphic=newSelectedGraphic;        selectedGraphic.regenerate(getProjection());        GLOBESite site=(GLOBESite)(newSelectedGraphic.getAttribute(OMGraphic.APP_OBJECT));        if (site != null) {          fireRequestInfoLine(site.getInfo());        }        repaint();      } else       if (selectedGraphic != null && newSelectedGraphic == null) {        Debug.message("basic","Clearing selection...");        selectedGraphic.regenerate(getProjection());        fireRequestInfoLine("");        selectedGraphic=null;        repaint();      }      return true;    }  }  return false;}  }
class C{  public EditableLabeledOMSpline(){  super();}  }
class C{  public AppLauncher env(Map<String,String> env){  if (env == null) {    throw new NullPointerException("env");  }  this.env.putAll(env);  return this;}  }
class C{  public static void writeContentToResponse(byte[] content,String filename,String contentType,FacesContext fc) throws IOException {  HttpServletResponse response=(HttpServletResponse)fc.getExternalContext().getResponse();  response.setContentType(contentType);  response.setCharacterEncoding(Constants.CHARACTER_ENCODING_UTF8);  response.setHeader("Content-disposition","attachment; filename=\"" + filename + "\"");  response.setContentLength(content.length);  OutputStream out;  out=response.getOutputStream();  out.write(content);  out.flush();  out.close();}  }
class C{  public long restartTime(long now){  if (mNumFailed == 0) {    return now;  }  if (mRetryAfter > 0) {    return mLastMod + mRetryAfter;  }  return mLastMod + Constants.RETRY_FIRST_DELAY * (1000 + mFuzz) * (1 << (mNumFailed - 1));}  }
class C{  public void updateArc(float latPoint,float lonPoint,float radius,int units,int nverts,float s,float e,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkArc.write(latPoint,lonPoint,radius,units,nverts,s,e,properties,link.dos);}  }
class C{  public void testXformSubmitSucceeded_EventuallyHidesSubmissionDialog(){  mController.init();  mFakeGlobalEventBus.post(new SubmitXformSucceededEvent());  mFakeHandler.runUntilEmpty();  verify(mMockUi).showFormSubmissionDialog(false);}  }
class C{  @SuppressWarnings("deprecation") public CLDevice[] listDevices(CLDevice.Type type,boolean onlyAvailable){  Pointer<Integer> pCount=allocateInt();  error(CL.clGetDeviceIDs(getEntity(),type.value(),0,0,getPeer(pCount)));  int nDevs=pCount.getInt();  if (nDevs <= 0) {    return new CLDevice[0];  }  Pointer<SizeT> ids=allocateSizeTs(nDevs);  error(CL.clGetDeviceIDs(getEntity(),type.value(),nDevs,getPeer(ids),0));  return getDevices(ids,onlyAvailable);}  }
class C{  public byte[] receiveSpecLenBytes(int len){  Log.d(TAG,"receiveSpecLenBytes() entrance: len = " + len);  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    byte[] recDatas=Arrays.copyOf(mReceivePacket.getData(),mReceivePacket.getLength());    Log.d(TAG,"received len : " + recDatas.length);    for (int i=0; i < recDatas.length; i++) {      Log.e(TAG,"recDatas[" + i + "]:"+ recDatas[i]);    }    Log.e(TAG,"receiveSpecLenBytes: " + new String(recDatas));    if (recDatas.length != len) {      Log.w(TAG,"received len is different from specific len, return null");      return null;    }    return recDatas;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public void scrollMapTo(int x,int y){  if (!isAnimationEnabled) {    jumpTo(x,y);    return;  }  int viewWidth=getWidth();  int viewHeight=getHeight();  if (isLayoutRequested())   return;  int mapHeight=getMapHeight();  int mapWidth=getMapWidth();  float mapScale=getScale();  int scrollX=getScrollX();  int scrollY=getScrollY();  int newX=(int)(x * mapScale) - viewWidth / 2;  int newY=(int)(y * mapScale) - viewHeight / 2;  if (viewHeight < mapHeight && newY + viewHeight > mapHeight) {    newY-=(newY + viewHeight - mapHeight);  }  if (mapWidth > viewWidth && newX + viewWidth > mapWidth) {    newX-=(newX + viewWidth - mapWidth);  }  if (newX < 0) {    newX=0;  }  if (newY < 0) {    newY=0;  }  if (viewHeight > mapHeight)   newY=scrollY;  if (viewWidth > mapWidth) {    newX=scrollX;  }  scroller.abortAnimation();  scroller.startScroll(scrollX,scrollY,newX - scrollX,newY - scrollY,500);  invalidate();}  }
class C{  @Nullable private static Collection<DataFlavor> checkContentsQuick(){  final Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();  final Class<? extends Clipboard> aClass=clipboard.getClass();  if (!"sun.awt.X11.XClipboard".equals(aClass.getName()))   return null;  Method getClipboardFormats=ReflectionUtil.getDeclaredMethod(aClass,"getClipboardFormats");  final String timeout=System.getProperty(DATA_TRANSFER_TIMEOUT_PROPERTY);  System.setProperty(DATA_TRANSFER_TIMEOUT_PROPERTY,SHORT_TIMEOUT);  try {    final long[] formats=(long[])getClipboardFormats.invoke(clipboard);    if (formats == null || formats.length == 0) {      return Collections.emptySet();    }    @SuppressWarnings({"unchecked"}) final Set<DataFlavor> set=DataTransferer.getInstance().getFlavorsForFormats(formats,FLAVOR_MAP).keySet();    return set;  } catch (  IllegalAccessException ignore) {  }catch (  IllegalArgumentException ignore) {  }catch (  InvocationTargetException e) {    final Throwable cause=e.getCause();    if (cause instanceof IllegalStateException) {      throw (IllegalStateException)cause;    }  } finally {    System.setProperty(DATA_TRANSFER_TIMEOUT_PROPERTY,timeout);  }  return null;}  }
class C{  public ResourceExistException(){  super();}  }
class C{  public static String successor(final String s){  if (s == null)   return "\0";  return s + "\0";}  }
class C{  public void scale(float s){  checkMatrix(2);  matrix.scale(s);}  }
class C{  public void animate(){  if (circledView.getAnimation() != this) {    circledView.clearAnimation();    startRadius=circledView.getCircleRadius();    circledView.startAnimation(this);  }}  }
class C{  public static void saveAsImage(int x,int y,int width,int height,String path,CompressFormat compressFormat,int quality) throws FileNotFoundException {  Bitmap bmp=getPixelsFromBuffer(x,y,width,height);  try {    File file=new File(path);    try {      file.createNewFile();    } catch (    IOException e1) {      e1.printStackTrace();    }    FileOutputStream fos=new FileOutputStream(file);    bmp.compress(compressFormat,quality,fos);    try {      fos.flush();    } catch (    IOException e) {      e.printStackTrace();    }    try {      fos.close();    } catch (    IOException e) {      e.printStackTrace();    }  } catch (  FileNotFoundException e) {    throw (e);  }}  }
class C{  protected void deleteGateway(String guid){  IPv4Address gwIp=guidToGateway.remove(guid);  if (gwIp == null)   return;  Set<String> gSet=gatewayToGuid.get(gwIp);  gSet.remove(guid);  if (vNetsByGuid.get(guid) != null)   vNetsByGuid.get(guid).setGateway(null);}  }
class C{  public void attribute(String elemName,String attrName,String type,String value){  ElementType e=getElementType(elemName);  if (e == null) {    throw new Error("Attribute " + attrName + " specified for unknown element type "+ elemName);  }  e.setAttribute(attrName,type,value);}  }
class C{  public static boolean isBriefMode(){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(App.sContext);  return prefs.getBoolean(App.sContext.getString(R.string.switch_preference_key_list_item_brief_mode),true);}  }
class C{  public final void lazySet(double newValue){  set(newValue);}  }
class C{  public void addHandler(Handler handler) throws SecurityException {  throw new RuntimeException();}  }
class C{  public T caseEnumLiteralPropertyAttribute(EnumLiteralPropertyAttribute object){  return null;}  }
class C{  public static Lop constructMRAppendLop(Hop left,Hop right,DataType dt,ValueType vt,boolean cbind,Hop current) throws HopsException, LopsException {  Lop ret=null;  long m1_dim1=left.getDim1();  long m1_dim2=left.getDim2();  long m2_dim1=right.getDim1();  long m2_dim2=right.getDim2();  long m3_dim1=cbind ? m1_dim1 : ((m1_dim1 > 0 && m2_dim1 > 0) ? (m1_dim1 + m2_dim1) : -1);  long m3_dim2=cbind ? ((m1_dim2 > 0 && m2_dim2 > 0) ? (m1_dim2 + m2_dim2) : -1) : m1_dim2;  long m3_nnz=(left.getNnz() > 0 && right.getNnz() > 0) ? (left.getNnz() + right.getNnz()) : -1;  long brlen=left.getRowsInBlock();  long bclen=left.getColsInBlock();  Lop offset=createOffsetLop(left,cbind);  AppendMethod am=optFindAppendMethod(m1_dim1,m1_dim2,m2_dim1,m2_dim2,brlen,bclen,cbind);switch (am) {case MR_MAPPEND:{      boolean needPart=requiresPartitioning(right);      Lop dcInput=right.constructLops();      if (needPart) {        ExecType etPart=(OptimizerUtils.estimateSizeExactSparsity(right.getDim1(),right.getDim2(),OptimizerUtils.getSparsity(right.getDim1(),right.getDim2(),right.getNnz())) < OptimizerUtils.getLocalMemBudget()) ? ExecType.CP : ExecType.MR;        dcInput=new DataPartition(dcInput,DataType.MATRIX,ValueType.DOUBLE,etPart,PDataPartitionFormat.ROW_BLOCK_WISE_N);        dcInput.getOutputParameters().setDimensions(right.getDim1(),right.getDim2(),right.getRowsInBlock(),right.getColsInBlock(),right.getNnz());        dcInput.setAllPositions(right.getBeginLine(),right.getBeginColumn(),right.getEndLine(),right.getEndColumn());      }      AppendM appM=new AppendM(left.constructLops(),dcInput,offset,dt,vt,cbind,needPart,ExecType.MR);      appM.setAllPositions(current.getBeginLine(),current.getBeginColumn(),current.getEndLine(),current.getEndColumn());      appM.getOutputParameters().setDimensions(m3_dim1,m3_dim2,brlen,bclen,m3_nnz);      ret=appM;      break;    }case MR_RAPPEND:{    Group group1=new Group(left.constructLops(),Group.OperationTypes.Sort,DataType.MATRIX,vt);    group1.getOutputParameters().setDimensions(m1_dim1,m1_dim2,brlen,bclen,left.getNnz());    group1.setAllPositions(left.getBeginLine(),left.getBeginColumn(),left.getEndLine(),left.getEndColumn());    Group group2=new Group(right.constructLops(),Group.OperationTypes.Sort,DataType.MATRIX,vt);    group1.getOutputParameters().setDimensions(m2_dim1,m2_dim2,brlen,bclen,right.getNnz());    group1.setAllPositions(right.getBeginLine(),right.getBeginColumn(),right.getEndLine(),right.getEndColumn());    AppendR appR=new AppendR(group1,group2,dt,vt,cbind,ExecType.MR);    appR.getOutputParameters().setDimensions(m3_dim1,m3_dim2,brlen,bclen,m3_nnz);    appR.setAllPositions(current.getBeginLine(),current.getBeginColumn(),current.getEndLine(),current.getEndColumn());    ret=appR;    break;  }case MR_GAPPEND:{  Lop offset2=createOffsetLop(right,cbind);  AppendG appG=new AppendG(left.constructLops(),right.constructLops(),offset,offset2,dt,vt,cbind,ExecType.MR);  appG.getOutputParameters().setDimensions(m3_dim1,m3_dim2,brlen,bclen,m3_nnz);  appG.setAllPositions(current.getBeginLine(),current.getBeginColumn(),current.getEndLine(),current.getEndColumn());  Group group1=new Group(appG,Group.OperationTypes.Sort,DataType.MATRIX,vt);  group1.getOutputParameters().setDimensions(m3_dim1,m3_dim2,brlen,bclen,m3_nnz);  group1.setAllPositions(current.getBeginLine(),current.getBeginColumn(),current.getEndLine(),current.getEndColumn());  Aggregate agg1=new Aggregate(group1,Aggregate.OperationTypes.Sum,DataType.MATRIX,vt,ExecType.MR);  agg1.getOutputParameters().setDimensions(m3_dim1,m3_dim2,brlen,bclen,m3_nnz);  agg1.setAllPositions(current.getBeginLine(),current.getBeginColumn(),current.getEndLine(),current.getEndColumn());  ret=agg1;  break;}default :throw new HopsException("Invalid MR append method: " + am);}return ret;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ShapePickSupport(VisualizationServer<V,E> vv,float pickSize){  this.vv=vv;  this.pickSize=pickSize;}  }
class C{  private boolean checkVMAX2toVMAX3(StorageSystem storageSystem1,StorageSystem storageSystem2){  if (storageSystem1 != null && storageSystem2 != null) {    if (DiscoveredDataObject.Type.vmax.name().equals(storageSystem1.getSystemType()) && DiscoveredDataObject.Type.vmax.name().equals(storageSystem2.getSystemType()) && ((!storageSystem1.checkIfVmax3() && storageSystem2.checkIfVmax3()) || (storageSystem1.checkIfVmax3() && !storageSystem2.checkIfVmax3()))) {      return true;    }  }  return false;}  }
class C{  public static String dump(byte[] arr,int offset,int length,int outOffset,int bpl,int addressLength){  int end=offset + length;  if (((offset | length | end) < 0) || (end > arr.length)) {    throw new IndexOutOfBoundsException("arr.length " + arr.length + "; "+ offset+ "..!"+ end);  }  if (outOffset < 0) {    throw new IllegalArgumentException("outOffset < 0");  }  if (length == 0) {    return "";  }  StringBuffer sb=new StringBuffer(length * 4 + 6);  boolean bol=true;  int col=0;  while (length > 0) {    if (col == 0) {      String astr;switch (addressLength) {case 2:        astr=Hex.u1(outOffset);      break;case 4:    astr=Hex.u2(outOffset);  break;case 6:astr=Hex.u3(outOffset);break;default :astr=Hex.u4(outOffset);break;}sb.append(astr);sb.append(": ");} else if ((col & 1) == 0) {sb.append(' ');}sb.append(Hex.u1(arr[offset]));outOffset++;offset++;col++;if (col == bpl) {sb.append('\n');col=0;}length--;}if (col != 0) {sb.append('\n');}return sb.toString();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:40.927 -0500",hash_original_method="7B8469B0AAC5ED28F7A0B3958D69BFB4",hash_generated_method="73B92C22D9B5CF4BE324DB60001EE529") private static String H(String data){  try {    MessageDigest digest=MessageDigest.getInstance("MD5");    return toHexString(digest.digest(data.getBytes()));  } catch (  NoSuchAlgorithmException ex) {    throw new RuntimeException("Failed to instantiate an MD5 algorithm",ex);  }}  }
class C{  public byte[] readByteArray(int bits) throws AccessException {  int bytes=(bits >>> 3) + ((bits & 0x07) > 0 ? 1 : 0);  byte[] arr=new byte[bytes];  for (int i=0; i < bytes; i++) {    int increment=Math.min(8,bits - (i << 3));    arr[i]=(byte)(read(increment) << (8 - increment));  }  return arr;}  }
class C{  @Override public void updateScore(String url,WebPage row,List<ScoreDatum> inlinkedScoreData){  float adjust=0.0f;  for (  ScoreDatum scoreDatum : inlinkedScoreData) {    adjust+=scoreDatum.getScore();  }  float oldScore=row.getScore();  row.setScore(oldScore + adjust);  ByteBuffer cashRaw=row.getMetadata().get(CASH_KEY);  float cash=0.0f;  if (cashRaw != null) {    cash=Bytes.toFloat(cashRaw.array(),cashRaw.arrayOffset() + cashRaw.position());  }  row.getMetadata().put(CASH_KEY,ByteBuffer.wrap(Bytes.toBytes(cash + adjust)));}  }
class C{  public static Object parseWithException(Reader in) throws IOException, ParseException {  JSONParser parser=new JSONParser();  return parser.parse(in);}  }
class C{  public NumericLiteralClassifier(final String literal){  this.literal=literal;}  }
class C{  public void deleteAttribute(){  ArffSortedTableModel model;  if (m_CurrentCol == -1) {    return;  }  model=(ArffSortedTableModel)m_TableArff.getModel();  if (model.getAttributeAt(m_CurrentCol) == null) {    return;  }  if (ComponentHelper.showMessageBox(getParent(),"Confirm...","Do you really want to delete the attribute '" + model.getAttributeAt(m_CurrentCol).name() + "'?",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION) {    return;  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  model.deleteAttributeAt(m_CurrentCol);  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  JMenu createInsertMenu(){  JMenu insertMenu=new JMenu("Insert");  insertMenu.add(actionManager.getNewNeuronAction());  insertMenu.add(actionManager.getNewActivityGeneratorAction());  insertMenu.addSeparator();  insertMenu.add(new AddNeuronsAction(this));  insertMenu.addSeparator();  insertMenu.add(actionManager.getNewGroupMenu());  insertMenu.add(actionManager.getNewNetworkMenu());  insertMenu.addSeparator();  insertMenu.add(actionManager.getTestInputAction());  insertMenu.add(actionManager.getShowWeightMatrixAction());  return insertMenu;}  }
class C{  public boolean isSysTableLocked(){  return meta == null || meta.isLockedExclusively();}  }
class C{  public void insert(NodeDescriptor parent,int index,List<Node> children){  int initialCount=parent.getChildren().size();  parent.addChildren(index,wrap(children));  if (initialCount != parent.getChildren().size()) {    List<Node> addedChildren=new ArrayList<>();    List<NodeDescriptor> currentChildren=parent.getChildren();    if (isSorted()) {      int currentChildrenSize=currentChildren.size();      for (int i=0; i < currentChildrenSize; i++) {        int childrenSize=children.size();        for (int j=0; j < childrenSize; j++) {          Node currentData=currentChildren.get(i).getNode();          Node child=children.get(j);          if (child == currentData) {            addedChildren.add(child);            break;          }        }      }    } else {      for (      NodeDescriptor currentChild : currentChildren) {        if (children.contains(currentChild.getNode())) {          addedChildren.add(currentChild.getNode());        }      }    }    if (addedChildren.size() != 0) {      fireEvent(new StoreAddEvent(index,addedChildren));    }  }}  }
class C{  public Configuration apiUrl(String apiUrl){  this.apiUrl=apiUrl;  return this;}  }
class C{  public static Date ceiling(final Date date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar gval=Calendar.getInstance();  gval.setTime(date);  modify(gval,field,ModifyType.CEILING);  return gval.getTime();}  }
class C{  boolean isPrivateBrowsingEnabled(){  return mCurrentState.mIncognito;}  }
class C{  public static void main(String[] argv){  ArgParser ap=new ArgParser("DTEDLocator");  if (argv.length == 0) {    ap.bail("",true);  }  DTEDLocator locator=new DTEDLocator();  for (int i=0; i < argv.length; i++) {    locator.handleEntry(new File(argv[i]));  }}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (!eventName.equals("dataSet")) {    return false;  }  if (m_listenee == null) {    return false;  }  if (m_listenee instanceof EventConstraints) {    if (!((EventConstraints)m_listenee).eventGeneratable("instance")) {      return false;    }  }  return true;}  }
class C{  public XMLString substring(int beginIndex,int endIndex){  return new XMLStringDefault(m_str.substring(beginIndex,endIndex));}  }
class C{  public static final byte composeDefaultMode(byte esmClass){  return composeMessagingMode(esmClass,SMPPConstant.ESMCLS_DEFAULT_MODE);}  }
class C{  private static Object evalNode(int threadNum,boolean expression,Object[] inputs,StringBuffer expr,Object genome,int nodeNum,VectorSpeciesCGP s){  Object val=nodeMap.get(threadNum).get(nodeNum);  if (val != null) {    if (expression)     add(expression,expr,expressionMap.get(threadNum).get(nodeNum));    return val;  }  StringBuffer sb=null;  if (expression)   sb=new StringBuffer();  if (nodeNum < s.numInputs) {    nodeMap.get(threadNum).put(nodeNum,inputs[nodeNum]);    if (expression) {      add(expression,sb,"" + functions.inputName(nodeNum,inputs[nodeNum]));      expressionMap.get(threadNum).put(nodeNum,sb.toString());      expr.append(sb);    }    return inputs[nodeNum];  }  boolean isFloat=genome instanceof float[];  int pos=s.positionFromNodeNumber(nodeNum);  int fn=(isFloat ? s.interpretFloat(pos,(float[])genome) : ((int[])genome)[pos]);  add(expression,sb,functions.functionName(fn));  Object[] args=new Object[s.maxArity];  for (int i=0; i < functions.arityOf(fn); i++) {    int argInt=0;    float argFloat=0;    if (isFloat) {      argFloat=((float[])genome)[pos + i + 1];    } else {      argInt=((int[])genome)[pos + i + 1];    }    int num=isFloat ? s.interpretFloat(pos + i + 1,(float[])genome) : argInt;    if (num < s.numInputs) {      args[i]=inputs[num];      add(expression,sb," " + functions.inputName(num,inputs[num]));    } else {      add(expression,sb," (");      args[i]=evalNode(threadNum,expression,inputs,sb,genome,num,s);      add(expression,sb,")");    }  }  Object result=functions.callFunction(args,fn,s.numFunctions);  nodeMap.get(threadNum).put(nodeNum,result);  if (expression) {    expressionMap.get(threadNum).put(nodeNum,sb.toString());    expr.append(sb);  }  return result;}  }
class C{  public FileUtils(){  super();}  }
class C{  private static void uaSumEqNe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumEqNe(0.0,bv,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int cnt=(ai == 0) ? agg0 : sumEqNe(ai,bv,bOp);    cnt+=(int)out.quickGetValue(0,0);    out.quickSetValue(0,0,cnt);  }}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static String escapeForLike(String value,String escapeCharacter){  return value.replace(escapeCharacter,escapeCharacter + escapeCharacter).replace("%",escapeCharacter + "%").replace("_",escapeCharacter + "_");}  }
class C{  public ExecutorModule(final CassandraExecutorConfiguration configuration){  this.configuration=configuration;}  }
class C{  private void addPinClickListener(final ClickEvent event){  eventBus.publish(this,DragEvent.HIDE_DROP_HINT);  checkifAlreadyPinned(event.getButton());  if (isTargetPinned) {    pinTarget(event.getButton());  } else {    unPinTarget(event.getButton());  }}  }
class C{  private void validateArrayAccess(int index,int length){  if ((index < 0) || (index > length())) {    throw new IndexOutOfBoundsException("Invalid array index: " + index);  }  if (length < 0) {    throw new IndexOutOfBoundsException("Invalid array range length: " + length);  }  if (index + length > length()) {    throw new IndexOutOfBoundsException("Invalid array range: " + index + " to "+ (index + length - 1));  }}  }
class C{  private void recalculateWordsInUse(){  int i;  for (i=wordsInUse - 1; i >= 0; i--)   if (words[i] != 0)   break;  wordsInUse=i + 1;}  }
class C{  public final String identifier(){  return identifier;}  }
class C{  public URLRasterLocation(double latitude,double longitude,int xOffset,int yOffset,String name,String iconURL){  super(latitude,longitude,xOffset,yOffset,name,getIconRaster(latitude,longitude,xOffset,yOffset,iconURL));  if (location instanceof OMRaster) {    setHorizontalLabelBuffer((((OMRaster)location).getWidth() / 2) + SPACING);  }}  }
class C{  public final T blockLast(){  BlockingLastSubscriber<T> subscriber=new BlockingLastSubscriber<>();  subscribe(subscriber);  return subscriber.blockingGet();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public byte[] unwrap(byte[] incoming,int start,int len) throws SaslException {  if (len == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] mac=new byte[10];  byte[] msg=new byte[len - 16];  byte[] msgType=new byte[2];  byte[] seqNum=new byte[4];  System.arraycopy(incoming,start,msg,0,msg.length);  System.arraycopy(incoming,start + msg.length,mac,0,10);  System.arraycopy(incoming,start + msg.length + 10,msgType,0,2);  System.arraycopy(incoming,start + msg.length + 12,seqNum,0,4);  byte[] expectedMac=getHMAC(peerKi,seqNum,msg,0,msg.length);  if (logger.isLoggable(Level.FINEST)) {    traceOutput(DI_CLASS_NAME,"unwrap","DIGEST18:incoming: ",msg);    traceOutput(DI_CLASS_NAME,"unwrap","DIGEST19:MAC: ",mac);    traceOutput(DI_CLASS_NAME,"unwrap","DIGEST20:messageType: ",msgType);    traceOutput(DI_CLASS_NAME,"unwrap","DIGEST21:sequenceNum: ",seqNum);    traceOutput(DI_CLASS_NAME,"unwrap","DIGEST22:expectedMAC: ",expectedMac);  }  if (!Arrays.equals(mac,expectedMac)) {    logger.log(Level.INFO,"DIGEST23:Unmatched MACs");    return EMPTY_BYTE_ARRAY;  }  if (peerSeqNum != networkByteOrderToInt(seqNum,0,4)) {    throw new SaslException("DIGEST-MD5: Out of order " + "sequencing of messages from server. Got: " + networkByteOrderToInt(seqNum,0,4) + " Expected: "+ peerSeqNum);  }  if (!Arrays.equals(messageType,msgType)) {    throw new SaslException("DIGEST-MD5: invalid message type: " + networkByteOrderToInt(msgType,0,2));  }  peerSeqNum++;  return msg;}  }
class C{  public boolean usesField(String className,String fieldName){  int classIndex=findClass(className);  if (classIndex == NOT_FOUND)   return false;  int fieldNameIndex=findUtf8(fieldName);  if (fieldNameIndex == NOT_FOUND)   return false;  for (int i=1; i < maxPoolSize; i++) {    if (types[i] == FIELD && readValue(offsets[i]) == classIndex) {      int nameAndTypeIndex=readValue(offsets[i] + 2);      if (readValue(offsets[nameAndTypeIndex]) == fieldNameIndex)       return true;    }  }  return false;}  }
class C{  public static String bufferToString(Buffer buffer){  return buffer.readString(Charset.defaultCharset());}  }
class C{  private boolean nextWhatIf(boolean left){  Animation animation;  if (left) {    WhatIfIndex--;    leftSwipe=true;    animation=AnimationUtils.loadAnimation(this,R.anim.slide_out_right);    web.startAnimation(animation);    web.setVisibility(View.INVISIBLE);  } else {    WhatIfIndex++;    rightSwipe=true;    animation=AnimationUtils.loadAnimation(this,R.anim.slide_out_left);    web.startAnimation(animation);    web.setVisibility(View.INVISIBLE);  }  prefHelper.setLastWhatIf(WhatIfIndex);  new LoadWhatIf().execute();  invalidateOptionsMenu();  try {    WhatIfFragment.getInstance().getRv().scrollToPosition(WhatIfFragment.mTitles.size() - WhatIfIndex);  } catch (  NullPointerException e) {    e.printStackTrace();  }  prefHelper.setWhatifRead(String.valueOf(WhatIfIndex));  invalidateOptionsMenu();  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String accumHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  int i;  double channelizationThreshold=0;  double backValue=0;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      accumHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      channelizationThreshold=Double.parseDouble(args[i]);    } else     if (i == 3) {      if (args[i].toLowerCase().equals("nodata")) {        flag=true;      } else {        backValue=Double.parseDouble(args[i]);      }    }  }  if ((accumHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(accumHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (flag) {      backValue=noData;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",accumHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    double[] data=null;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > channelizationThreshold && data[col] != noData) {          output.setValue(row,col,1);        } else {          output.setValue(row,col,backValue);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void destroy(){  m_filterConfig=null;}  }
class C{  public String toString(){  return name;}  }
class C{  private static HttpURLConnection prepareConnection(URL url) throws IOException {  HttpURLConnection connection;  connection=(HttpURLConnection)url.openConnection(_proxy);  connection.setConnectTimeout(_timeout);  connection.setReadTimeout(_timeout);  if (url.getProtocol().equalsIgnoreCase("https")) {    ((HttpsURLConnection)connection).setSSLSocketFactory(_sslSocketFactory);  }  return connection;}  }
class C{  public void insert(MutableTreeNode newChild,int childIndex){  if (!allowsChildren) {    throw new IllegalStateException("node does not allow children");  } else   if (newChild == null) {    throw new IllegalArgumentException("new child is null");  } else   if (isNodeAncestor(newChild)) {    throw new IllegalArgumentException("new child is an ancestor");  }  MutableTreeNode oldParent=(MutableTreeNode)newChild.getParent();  if (oldParent != null) {    oldParent.remove(newChild);  }  newChild.setParent(this);  if (children == null) {    children=new Vector();  }  children.insertElementAt(newChild,childIndex);}  }
class C{  public void testNonTrivialDeleteByQuery() throws Exception {  clearIndex();  assertU(add(doc("id","101","text","red apple")));  assertU(add(doc("id","102","text","purple grape")));  assertU(add(doc("id","103","text","green grape")));  assertU(add(doc("id","104","text","green pear")));  assertU(add(doc("id","105","text","yellow banana")));  assertU(add(doc("id","106","text","red cherry")));  assertU(commit());  assertQ(req("id:[100 TO 110]"),"//*[@numFound='6']");  assertQ(req("*:*"),"//*[@numFound='6']");  assertQ(req("text:red"),"//*[@numFound='2']");  assertQ(req("-text:red"),"//*[@numFound='4']");  assertQ(req("text:grape"),"//*[@numFound='2']");  assertQ(req("-text:grape"),"//*[@numFound='4']");  assertQ(req("-text:red -text:grape"),"//*[@numFound='2']");  assertQ(req("{!lucene q.op=AND df=text}grape green"),"//*[@numFound='1']","//int[@name='id'][.='103']");  assertQ(req("-_val_:\"{!lucene q.op=AND df=text}grape green\""),"//*[@numFound='5']","//int[@name='id'][.='101']","//int[@name='id'][.='102']","//int[@name='id'][.='104']","//int[@name='id'][.='105']","//int[@name='id'][.='106']");  assertU(delQ("-*:*"));  assertU(commit());  assertQ(req("*:*"),"//*[@numFound='6']");  assertU(delQ("-text:grape -text:red"));  assertU(commit());  assertQ(req("*:*"),"//*[@numFound='4']","//int[@name='id'][.='101']","//int[@name='id'][.='102']","//int[@name='id'][.='103']","//int[@name='id'][.='106']");  assertU(delQ("{!term f=id}106"));  assertU(commit());  assertQ(req("*:*"),"//*[@numFound='3']","//int[@name='id'][.='101']","//int[@name='id'][.='102']","//int[@name='id'][.='103']");  assertU(delQ("-_val_:\"{!lucene q.op=AND df=text}grape green\""));  assertU(commit());  assertQ(req("*:*"),"//*[@numFound='1']","//int[@name='id'][.='103']");  assertU(delQ("-text:doesnotexist"));  assertU(commit());  assertQ(req("*:*"),"//*[@numFound='0']");}  }
class C{  public boolean isFailed(){  return failed;}  }
class C{  default B addStoredEnchant(final EnchantmentType ench,final int level){  this.meta().addStoredEnchant(ench,level,true);  return this.getBuilder();}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  public static Image createImageFromFile(final String fileName){  if (new File(fileName).exists()) {    return new Image(Display.getCurrent(),fileName);  } else {    return new Image(Display.getCurrent(),SWTGraphicUtil.class.getClassLoader().getResourceAsStream(fileName));  }}  }
class C{  public void addGreeting(){  addGreeting("Greetings! How may I help you?",null);}  }
class C{  public T caseType(Type object){  return null;}  }
class C{  public boolean isActualMember(){  return lastRetrievedSource == OWNED || lastRetrievedSource == CONSUMED || (lastRetrievedSource == INHERITED && isActuallyInherited(lastRetrievedElement));}  }
class C{  public static boolean equals(byte[] array1,byte[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static StreamMetadata empty(){  return EMPTY;}  }
class C{  int freeSpace(short order,long qAddr){  if (lru == null)   return 0;  int hash=lru.hash(order,qAddr);  return segmentFor(hash).freeSpace(hash,order,qAddr);}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length){  software=new byte[length];  System.arraycopy(attributeValue,offset,software,0,length);}  }
class C{  public void testCertificateFactory07(){  if (!X509Support) {    fail(NotSupportMsg);    return;  }  try {    CertificateFactory.getInstance(null,defaultProvider);    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i],defaultProvider);      fail("CertificateException was not thrown as expected (type:".concat(invalidValues[i]).concat(" provider: ").concat(defaultProvider.getName()).concat(")"));    } catch (    CertificateException e) {    }  }}  }
class C{  public StringBand append(String s){  if (s == null) {    s=StringPool.NULL;  }  if (index >= array.length) {    expandCapacity();  }  array[index++]=s;  length+=s.length();  return this;}  }
class C{  public FunctionblockAdapterFactory(){  if (modelPackage == null) {    modelPackage=FunctionblockPackage.eINSTANCE;  }}  }
class C{  public ObjectFactory(){}  }
class C{  public ScriptBuilder op(int opcode){  return op(chunks.size(),opcode);}  }
class C{  @Override public void tickState(RobotState state){switch (state) {case DISABLED:    disabledPeriodic();  break;case AUTONOMOUS:autonomousPeriodic();break;case TELEOP:teleopPeriodic();break;case TEST:testPeriodic();break;}}  }
class C{  public void freeMemory(){  if (requiresFree()) {    unsafe.freeMemory(nativeRawStartAddress_);    nativeRawStartAddress_=0L;  }  capacityBytes_=0L;  memReq_=null;}  }
class C{  @Override public boolean isGroupCommit(){  return true;}  }
class C{  protected void reportAccurateTypeReference(SearchMatch match,ASTNode typeRef,char[] name) throws CoreException {  if (match.getRule() == 0)   return;  if (!encloses((IJavaElement)match.getElement()))   return;  int sourceStart=typeRef.sourceStart;  int sourceEnd=typeRef.sourceEnd;  if (name != null) {    Scanner scanner=this.parser.scanner;    scanner.setSource(this.currentPossibleMatch.getContents());    scanner.resetTo(sourceStart,sourceEnd);    int token=-1;    int currentPosition;    do {      currentPosition=scanner.currentPosition;      try {        token=scanner.getNextToken();      } catch (      InvalidInputException e) {      }      if (token == TerminalTokens.TokenNameIdentifier && this.pattern.matchesName(name,scanner.getCurrentTokenSource())) {        int length=scanner.currentPosition - currentPosition;        match.setOffset(currentPosition);        match.setLength(length);        report(match);        return;      }    } while (token != TerminalTokens.TokenNameEOF);  }  match.setOffset(sourceStart);  match.setLength(sourceEnd - sourceStart + 1);  report(match);}  }
class C{  static boolean isMatchingProperty(String propertyName,ConfigurationMetadataProperty property,List<ConfigurationMetadataProperty> whiteListedProps){  if (property.getId().equals(propertyName)) {    return true;  } else {    for (    ConfigurationMetadataProperty white : whiteListedProps) {      if (property.getId().equals(white.getId())) {        return property.getName().equals(propertyName);      }    }    return false;  }}  }
class C{  public boolean isSetConfig(){  return this.config != null;}  }
class C{  public void addUsers(org.oscm.xsd.User param){  if (localUsers == null) {    localUsers=new org.oscm.xsd.User[]{};  }  localUsersTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localUsers);  list.add(param);  this.localUsers=(org.oscm.xsd.User[])list.toArray(new org.oscm.xsd.User[list.size()]);}  }
class C{  protected DFSenumerateByFinish(Graph net){  this(net,net.enumerateNodes());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_TYPE_DECLARATION__ANNOTATION_LIST:    setAnnotationList((AnnotationList)null);  return;case N4JSPackage.N4_TYPE_DECLARATION__DECLARED_MODIFIERS:getDeclaredModifiers().clear();return;case N4JSPackage.N4_TYPE_DECLARATION__NAME:setName(NAME_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static long toLong(String s){  long tot=0, max=0;  char ch[]=s.toUpperCase().toCharArray();  int i, p;  for (p=ch.length - 1; p >= 0; p--) {    for (i=0; i < syms.length; i++) {      if (syms[i].symbol == ch[p]) {        if (syms[i].value >= max)         tot+=(max=syms[i].value); else         tot-=syms[i].value;      }    }  }  return tot;}  }
class C{  public static Model createModel(){  final XMLTree tree=XMLTree.create("project");  tree.getRoot().setAttribute("xmlns","http://maven.apache.org/POM/4.0.0").setAttribute("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance").setAttribute("xsi:schemaLocation","http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd");  return new Model(tree);}  }
class C{  public int countAllLike(String filter){  return findAllLike(filter).size();}  }
class C{  public static <T>int searchLowest(final T[] array,final ToDoubleFunction<T> function,final double maxValue,final int minRange,final int maxRange){  int min=minRange;  int max=maxRange;  if (function.applyAsDouble(array[min]) > maxValue)   return min;  while (min < max - 1) {    final int mid=(max + min) / 2;    if (function.applyAsDouble(array[mid]) <= maxValue)     min=mid; else     max=mid;  }  return max;}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  public void testDrawRuleEquals() throws ChessParseError {  Position pos=TextIO.readFEN(TextIO.startPosFEN);  Position origPos=new Position(pos);  UndoInfo ui=new UndoInfo();  pos.makeMove(TextIO.stringToMove(pos,"Nf3"),ui);  assertEquals(false,pos.drawRuleEquals(origPos));  pos.makeMove(TextIO.stringToMove(pos,"Nf6"),ui);  assertEquals(false,pos.drawRuleEquals(origPos));  pos.makeMove(TextIO.stringToMove(pos,"Ng1"),ui);  assertEquals(false,pos.drawRuleEquals(origPos));  pos.makeMove(TextIO.stringToMove(pos,"Ng8"),ui);  assertEquals(true,pos.drawRuleEquals(origPos));  assertEquals(false,pos.equals(origPos));  String fen="r1bqkb1r/pppp1ppp/2n2n2/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 0 1";  pos=TextIO.readFEN(fen);  origPos=new Position(pos);  pos.makeMove(TextIO.stringToMove(pos,"Ke2"),ui);  assertEquals(false,pos.drawRuleEquals(origPos));  pos.makeMove(TextIO.stringToMove(pos,"Be7"),ui);  assertEquals(false,pos.drawRuleEquals(origPos));  pos.makeMove(TextIO.stringToMove(pos,"Ke1"),ui);  assertEquals(false,pos.drawRuleEquals(origPos));  pos.makeMove(TextIO.stringToMove(pos,"Bf8"),ui);  assertEquals(false,pos.drawRuleEquals(origPos));  pos=TextIO.readFEN(TextIO.startPosFEN);  pos.makeMove(TextIO.stringToMove(pos,"c4"),ui);  pos.makeMove(TextIO.stringToMove(pos,"a6"),ui);  pos.makeMove(TextIO.stringToMove(pos,"c5"),ui);  pos.makeMove(TextIO.stringToMove(pos,"b5"),ui);  assertEquals(Position.getSquare(1,5),pos.getEpSquare());  origPos=new Position(pos);  pos.makeMove(TextIO.stringToMove(pos,"Nc3"),ui);  pos.makeMove(TextIO.stringToMove(pos,"Nc6"),ui);  pos.makeMove(TextIO.stringToMove(pos,"Nb1"),ui);  pos.makeMove(TextIO.stringToMove(pos,"Nb8"),ui);  assertEquals(false,pos.drawRuleEquals(origPos));}  }
class C{  protected String doIt() throws Exception {  log.info("doIt - AD_User_ID=" + p_AD_User_ID);  String sql="DELETE FROM AD_Note WHERE AD_Client_ID=" + getAD_Client_ID();  if (p_AD_User_ID > 0)   sql+=" AND AD_User_ID=" + p_AD_User_ID;  if (p_KeepLogDays > 0)   sql+=" AND (Created+" + p_KeepLogDays + ") < SysDate";  int no=DB.executeUpdate(sql,get_TrxName());  return "@Deleted@ = " + no;}  }
class C{  private void ensureSortedByIndex(){  if (currentSortOrder != SORT_ORDER_BY_INDEX) {    Collections.sort(samples,INDEX_COMPARATOR);    currentSortOrder=SORT_ORDER_BY_INDEX;  }}  }
class C{  public boolean isSurfaceNormalVisible(){  return (surfaceNormalArrow.getSceneHints().getCullHint() != CullHint.Always);}  }
class C{  public boolean isSupported(String applicationId){  if (supportedApplicationIds.isEmpty()) {    log.warn("Application ID verification has been disabled, " + "allowing request for application ID {}",applicationId);    return true;  } else   if (applicationId == null) {    return false;  } else {    return supportedApplicationIds.contains(applicationId);  }}  }
class C{  public final void addKeyId(final String keyId) throws ConfigurationException {  int nextKeyNumber=getNextKeyNumber();  config.addProperty(SIGNING_KEY_ID_PREFIX + nextKeyNumber,keyId);  config.save();}  }
class C{  @ApiOperation(value="Acknowledge a set of batches for the single engine") @RequestMapping(value="/engine/acknowledgebatch",method=RequestMethod.PUT) @ResponseStatus(HttpStatus.OK) @ResponseBody public final BatchAckResults putAcknowledgeBatch(@ApiParam(value="This the password for the nodeId being passed in.  The password is stored in the node_security table.") @RequestParam(value=WebConstants.SECURITY_TOKEN) String securityToken,@RequestBody BatchResults batchResults){  BatchAckResults results=putAcknowledgeBatch(getSymmetricEngine().getEngineName(),securityToken,batchResults);  return results;}  }
class C{  public ShutdownDomainScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public void dec(){  dec(1);}  }
class C{  private void removePendingChange(final PendingChange changeToRemove){  final PendingChange removedChange=changes.remove(changeToRemove);  if (removedChange == null) {    return;  }synchronized (operationDepthAndModificationLock) {    changesModifiedInOperation=true;  }  final PendingChangeCacheEvent event=new PendingChangeCacheEvent(this,removedChange);  getListener().onPendingChangeRemoved(event);}  }
class C{  public HeadSpin(){  setBackground(Color.black);  icon[0]=createImageIcon("tabbedpane/ewan.gif",getString("TabbedPaneDemo.ewan"));  icon[1]=createImageIcon("tabbedpane/stephen.gif",getString("TabbedPaneDemo.stephen"));  icon[2]=createImageIcon("tabbedpane/david.gif",getString("TabbedPaneDemo.david"));  icon[3]=createImageIcon("tabbedpane/matthew.gif",getString("TabbedPaneDemo.matthew"));  icon[4]=createImageIcon("tabbedpane/blake.gif",getString("TabbedPaneDemo.blake"));  icon[5]=createImageIcon("tabbedpane/brooke.gif",getString("TabbedPaneDemo.brooke"));}  }
class C{  public void cancelRequestsByTAG(Object TAG,boolean mayInterruptIfRunning){  if (TAG == null) {    return;  }  for (  List<RequestHandle> requestList : requestMap.values()) {    if (requestList != null) {      for (      RequestHandle requestHandle : requestList) {        if (TAG.equals(requestHandle.getTag()))         requestHandle.cancel(mayInterruptIfRunning);      }    }  }}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.864 -0500",hash_original_method="352555B7350AF9FC6F75FE9A04D77107",hash_generated_method="5A3D4669971A485C77903A73C5150728") @Override public int read() throws IOException {  if (finished) {    return ((outputBuffer == null) || (index == outputBuffer.length)) ? -1 : outputBuffer[index++] & 0xFF;  }  if ((outputBuffer != null) && (index < outputBuffer.length)) {    return outputBuffer[index++] & 0xFF;  }  index=0;  outputBuffer=null;  int byteCount;  while (outputBuffer == null) {    if ((byteCount=in.read(inputBuffer)) == -1) {      try {        outputBuffer=cipher.doFinal();      } catch (      Exception e) {        throw new IOException(e.getMessage());      }      finished=true;      break;    }    outputBuffer=cipher.update(inputBuffer,0,byteCount);  }  return read();}  }
class C{  @Override public void init(RandomGenerator random){  this.currentPhi=ANGLE_OFFSET;  this.deltaPhi=(NUMBER_OF_TURNS * ANGLE_FACTOR - ANGLE_OFFSET) / (this.numberOfExamples / 2.0d);  this.currentNumber=0;  this.currentRadiusOffset=0.0d;  this.currentLabel=getLabel().getMapping().mapString("spiral1");}  }
class C{  public static void trimDownAll(String[] strings){  for (int i=0; i < strings.length; i++) {    String string=strings[i];    if (string != null) {      strings[i]=trimDown(string);    }  }}  }
class C{  public legend addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public int addNodeInDocOrder(Node node,boolean test,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  int insertIndex=-1;  if (test) {    int size=size(), i;    for (i=size - 1; i >= 0; i--) {      Node child=(Node)elementAt(i);      if (child == node) {        i=-2;        break;      }      if (!DOM2Helper.isNodeAfter(node,child)) {        break;      }    }    if (i != -2) {      insertIndex=i + 1;      insertElementAt(node,insertIndex);    }  } else {    insertIndex=this.size();    boolean foundit=false;    for (int i=0; i < insertIndex; i++) {      if (this.item(i).equals(node)) {        foundit=true;        break;      }    }    if (!foundit)     addElement(node);  }  return insertIndex;}  }
class C{  public static final CButton createCustomizeButton(String text){  AppsAction aa=new AppsAction(A_CUSTOMIZE,null,text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  public void destroy(){  UiThreadUtil.assertOnUiThread();  if (mCatalystInstance != null) {    mCatalystInstance.destroy();  }}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  if (log.isInfoEnabled()) {    log.info("|-Buffer properties initialized with following values:");    log.info("||-Eviction occupancy percentage: " + NumberFormat.getInstance().format(evictionOccupancyPercentage * 100) + "%");    log.info("||-Eviction fragment size percentage: " + NumberFormat.getInstance().format(evictionFragmentSizePercentage * 100) + "%");    log.info("||-Indexing tree cleaning threads: " + NumberFormat.getInstance().format(indexingTreeCleaningThreads));    log.info("||-Indexing waiting time: " + NumberFormat.getInstance().format(indexingWaitTime) + " ms");    log.info("||-Min old generation occupancy percentage active till: " + NumberFormat.getInstance().format(minOldSpaceOccupancyActiveTillOldGenSize) + " bytes");    log.info("||-Max old generation occupancy percentage active from: " + NumberFormat.getInstance().format(maxOldSpaceOccupancyActiveFromOldGenSize) + " bytes");    log.info("||-Min old generation occupancy percentage: " + NumberFormat.getInstance().format(minOldSpaceOccupancy * 100) + "%");    log.info("||-Max old generation occupancy percentage: " + NumberFormat.getInstance().format(maxOldSpaceOccupancy * 100) + "%");    log.info("||-Max object size expansion: " + NumberFormat.getInstance().format(maxObjectExpansionRate * 100) + "%");    log.info("||-Min object size expansion: " + NumberFormat.getInstance().format(minObjectExpansionRate * 100) + "%");    log.info("||-Max object size expansion active from buffer occupancy: " + NumberFormat.getInstance().format(maxObjectExpansionRateActiveFromOccupancy * 100) + "%");    log.info("||-Min object size expansion active till buffer occupancy: " + NumberFormat.getInstance().format(minObjectExpansionRateActiveTillOccupancy * 100) + " %");    log.info("||-Max object size expansion active till buffer size: " + NumberFormat.getInstance().format(maxObjectExpansionRateActiveTillBufferSize) + " bytes");    log.info("||-Min object size expansion active from buffer size: " + NumberFormat.getInstance().format(minObjectExpansionRateActiveFromBufferSize) + " bytes");  }  if ((this.evictionOccupancyPercentage < 0) || (this.evictionOccupancyPercentage > 1)) {    throw new BeanInitializationException("Buffer properties initialization error: Eviction occupancy must be a percentage value between 0 and 1. Initialization value is: " + evictionOccupancyPercentage);  }  if ((this.evictionFragmentSizePercentage < 0.01) || (this.evictionFragmentSizePercentage > 0.5)) {    throw new BeanInitializationException("Buffer properties initialization error: Eviction fragment size must be a percentage value between 0.01 and 0.5. Initialization value is: " + evictionFragmentSizePercentage);  }  if (this.minObjectExpansionRateActiveFromBufferSize < this.maxObjectExpansionRateActiveTillBufferSize) {    throw new BeanInitializationException("Buffer properties initialization error: Buffer size from which minimum object expansion rate is active can not be lower than buffer size till which maximum object expansion rate is active. Initialization values are: " + minObjectExpansionRateActiveFromBufferSize + " (buffer size for min object expansion rate) and "+ maxObjectExpansionRateActiveTillBufferSize+ " (buffer size for max object expansion rate)");  }  if (this.minObjectExpansionRateActiveTillOccupancy > this.maxObjectExpansionRateActiveFromOccupancy) {    throw new BeanInitializationException("Buffer properties initialization error: Buffer occupancy till which minimum object expansion rate is active can not be higher than buffer occupancy from which maximum object expansion rate is active. Initialization values are: " + minObjectExpansionRateActiveTillOccupancy + " (buffer occupancy for min object expansion rate) and "+ maxObjectExpansionRateActiveFromOccupancy+ " (buffer occupnacy for max object expansion rate)");  }  if ((this.minObjectExpansionRateActiveTillOccupancy <= 0) || (this.minObjectExpansionRateActiveTillOccupancy > 1)) {    throw new BeanInitializationException("Buffer properties initialization error: The min object expansion rate till buffer old space gen occupancy can not be less or equal than zero, nor greater that one. Initialization value is: " + this.minObjectExpansionRateActiveTillOccupancy);  }  if ((this.maxObjectExpansionRateActiveFromOccupancy <= 0) || (this.maxObjectExpansionRateActiveFromOccupancy > 1)) {    throw new BeanInitializationException("Buffer properties initialization error: The max object expansion rate from buffer old space gen occupancy can not be less or equal than zero, nor greater that one. Initialization value is: " + this.maxObjectExpansionRateActiveFromOccupancy);  }  if ((this.getBytesMaintenancePercentage() <= 0) && (this.getBytesMaintenancePercentage() > this.getEvictionOccupancyPercentage())) {    throw new BeanInitializationException("Buffer properties initialization error: The buffer bytes maintenance percentage that activate the clean and update of the indexing tree can not be less or equal than zero nor bigger that eviction occupancy percentage. Initialization value is: " + this.getBytesMaintenancePercentage());  }  if (this.getIndexingTreeCleaningThreads() <= 0) {    throw new BeanInitializationException("Buffer properties initialization error: The number of indexing tree cleaning threads can not be less or equal than zero. Initialization value is: " + this.getIndexingTreeCleaningThreads());  }  if (this.indexingWaitTime <= 0) {    throw new BeanInitializationException("Buffer properties initialization error: The indexing wait time can not be less or equal than zero. Initialization value is: " + this.indexingWaitTime);  }  if (this.minOldSpaceOccupancyActiveTillOldGenSize <= 0) {    throw new BeanInitializationException("Buffer properties initialization error: The min buffer occupancy percentage of the old generation heap space active till old generation size value can not be less or equal than zero. Initialization value is: " + this.minOldSpaceOccupancyActiveTillOldGenSize);  }  if (this.maxOldSpaceOccupancyActiveFromOldGenSize <= 0) {    throw new BeanInitializationException("Buffer properties initialization error: The max buffer occupancy percentage of the old generation heap space active till old generation size value can not be less or equal than zero. Initialization value is: " + this.maxOldSpaceOccupancyActiveFromOldGenSize);  }  if (this.minOldSpaceOccupancy > this.maxOldSpaceOccupancy) {    throw new BeanInitializationException("Buffer properties initialization error: The min buffer occupancy percentage of the old generation heap space can not be higer than max buffer occupancy percentage of the old generation. Initialization values are: " + this.minOldSpaceOccupancy + "(min), "+ this.maxOldSpaceOccupancy+ "(max)");  }  if ((this.minOldSpaceOccupancy <= 0) || (this.minOldSpaceOccupancy > 1)) {    throw new BeanInitializationException("Buffer properties initialization error: The min buffer occupancy percentage of the old generation heap space can not be less or equal than zero, nor greater that one. Initialization value is: " + this.minOldSpaceOccupancy);  }  if ((this.maxOldSpaceOccupancy <= 0) || (this.maxOldSpaceOccupancy > 1)) {    throw new BeanInitializationException("Buffer properties initialization error: The max buffer occupancy percentage of the old generation heap space can not be less or equal than zero, nor greater that one. Initialization value is: " + this.maxOldSpaceOccupancy);  }}  }
class C{  public void dump(){  System.out.println(toString());}  }
class C{  public void notifyOnline(final String who){  boolean found=false;  if (containsKey("buddies",who)) {    put("buddies",who,true);    found=true;  }  if (found) {    if (has("online")) {      put("online",get("online") + "," + who);    } else {      put("online",who);    }  }}  }
class C{  @Override protected boolean showComparatorParameter(){  return false;}  }
class C{  public RolePermissionExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void removeEntry(String name,String value) throws Exception {  service.getAdminSession().delete(new DN(name + '=' + value+ ','+ baseDn));}  }
class C{  public ImmutableLocation add(DoubleVector v){  return new ImmutableLocation(x + v.x,y + v.y,z + v.z,w);}  }
class C{  public static String queryLatestPlaylistVideo(PlaylistId pPlaylistId) throws IOException, ClientProtocolException, FactoryConfigurationError {  String lVideoId=null;  HttpClient lClient=new DefaultHttpClient();  HttpGet lGetMethod=new HttpGet(OpenYouTubePlayerActivity.YOUTUBE_PLAYLIST_ATOM_FEED_URL + pPlaylistId.getId() + "?v=2&max-results=50&alt=json");  HttpResponse lResp=null;  lResp=lClient.execute(lGetMethod);  ByteArrayOutputStream lBOS=new ByteArrayOutputStream();  String lInfoStr=null;  JSONObject lYouTubeResponse=null;  try {    lResp.getEntity().writeTo(lBOS);    lInfoStr=lBOS.toString("UTF-8");    lYouTubeResponse=new JSONObject(lInfoStr);    JSONArray lEntryArr=lYouTubeResponse.getJSONObject("feed").getJSONArray("entry");    JSONArray lLinkArr=lEntryArr.getJSONObject(lEntryArr.length() - 1).getJSONArray("link");    for (int i=0; i < lLinkArr.length(); i++) {      JSONObject lLinkObj=lLinkArr.getJSONObject(i);      ;      String lRelVal=lLinkObj.optString("rel",null);      if (lRelVal != null && lRelVal.equals("alternate")) {        String lUriStr=lLinkObj.optString("href",null);        Uri lVideoUri=Uri.parse(lUriStr);        lVideoId=lVideoUri.getQueryParameter("v");        break;      }    }  } catch (  IllegalStateException e) {    Log.i(YouTubeUtility.class.getSimpleName(),"Error retrieving content from YouTube",e);  }catch (  IOException e) {    Log.i(YouTubeUtility.class.getSimpleName(),"Error retrieving content from YouTube",e);  }catch (  JSONException e) {    Log.i(YouTubeUtility.class.getSimpleName(),"Error retrieving content from YouTube",e);  }  return lVideoId;}  }
class C{  private EqualsRule(final String field,final String value){  super();  if (!RESOLVER.isField(field)) {    throw new IllegalArgumentException("Invalid EQUALS rule - " + field + " is not a supported field");  }  this.field=field;  this.value=value;}  }
class C{  public synchronized VisualTree addTree(String group,Tree tree,Predicate filter,Schema nodeSchema,Schema edgeSchema){  checkGroupExists(group);  String ngroup=PrefuseLib.getGroupName(group,Graph.NODES);  String egroup=PrefuseLib.getGroupName(group,Graph.EDGES);  VisualTable nt, et;  nt=addTable(ngroup,tree.getNodeTable(),filter,nodeSchema);  et=addTable(egroup,tree.getEdgeTable(),filter,edgeSchema);  VisualTree vt=new VisualTree(nt,et,tree.getNodeKeyField(),tree.getEdgeSourceField(),tree.getEdgeTargetField());  vt.setVisualization(this);  vt.setGroup(group);  addDataGroup(group,vt,tree);  TupleManager ntm=new TupleManager(nt,vt,TableNodeItem.class);  TupleManager etm=new TupleManager(et,vt,TableEdgeItem.class);  nt.setTupleManager(ntm);  et.setTupleManager(etm);  vt.setTupleManagers(ntm,etm);  return vt;}  }
class C{  public ScriptMethodResponse(ScriptMethodRequest request,Object value,Throwable throwable,boolean successful){  this.request=request;  this.value=value;  this.throwable=throwable;  this.successful=successful;}  }
class C{  protected Path renderSimpleGlyph(GlyfSimple g){  int curContour=0;  RenderState rs=new RenderState();  rs.gp=new Path();  for (int i=0; i < g.getNumPoints(); i++) {    PointRec rec=new PointRec(g,i);    if (rec.onCurve) {      addOnCurvePoint(rec,rs);    } else {      addOffCurvePoint(rec,rs);    }    if (i == g.getContourEndPoint(curContour)) {      curContour++;      if (rs.firstOff != null) {        addOffCurvePoint(rs.firstOff,rs);      }      if (rs.firstOn != null) {        addOnCurvePoint(rs.firstOn,rs);      }      rs.firstOn=null;      rs.firstOff=null;      rs.prevOff=null;    }  }  return rs.gp;}  }
class C{  @LogMessageDoc(level="ERROR",message="Unexpected action '{action}', '{subaction}'",explanation="A static flow entry contained an invalid action",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public static void parseActionString(OFFlowMod flowMod,String actionstr,Logger log){  List<OFAction> actions=new LinkedList<OFAction>();  int actionsLength=0;  if (actionstr != null) {    actionstr=actionstr.toLowerCase();    for (    String subaction : actionstr.split(",")) {      String action=subaction.split("[=:]")[0];      SubActionStruct subaction_struct=null;      if (action.equals("output")) {        subaction_struct=StaticFlowEntries.decode_output(subaction,log);      } else       if (action.equals("enqueue")) {        subaction_struct=decode_enqueue(subaction,log);      } else       if (action.equals("strip-vlan")) {        subaction_struct=decode_strip_vlan(subaction,log);      } else       if (action.equals("set-vlan-id")) {        subaction_struct=decode_set_vlan_id(subaction,log);      } else       if (action.equals("set-vlan-priority")) {        subaction_struct=decode_set_vlan_priority(subaction,log);      } else       if (action.equals("set-src-mac")) {        subaction_struct=decode_set_src_mac(subaction,log);      } else       if (action.equals("set-dst-mac")) {        subaction_struct=decode_set_dst_mac(subaction,log);      } else       if (action.equals("set-tos-bits")) {        subaction_struct=decode_set_tos_bits(subaction,log);      } else       if (action.equals("set-src-ip")) {        subaction_struct=decode_set_src_ip(subaction,log);      } else       if (action.equals("set-dst-ip")) {        subaction_struct=decode_set_dst_ip(subaction,log);      } else       if (action.equals("set-src-port")) {        subaction_struct=decode_set_src_port(subaction,log);      } else       if (action.equals("set-dst-port")) {        subaction_struct=decode_set_dst_port(subaction,log);      } else {        log.error("Unexpected action '{}', '{}'",action,subaction);      }      if (subaction_struct != null) {        actions.add(subaction_struct.action);        actionsLength+=subaction_struct.len;      }    }  }  log.debug("action {}",actions);  flowMod.setActions(actions);  flowMod.setLengthU(OFFlowMod.MINIMUM_LENGTH + actionsLength);}  }
class C{  public SnapshotDescriptor build(){  return new SnapshotDescriptor(buffer);}  }
class C{  protected Expression and(int opPos) throws TransformerException {  return compileOperation(new And(),opPos);}  }
class C{  public void testActivityTestCaseSetUpProperly(){  assertNotNull("activity should be launched successfully",getActivity());}  }
class C{  public void terminate(){  if (sLogger.isActivated()) {    sLogger.info("Terminate the SIP manager");  }  if (mSipInterface != null) {    closeStack();  }  if (sLogger.isActivated()) {    sLogger.info("SIP manager has been terminated");  }}  }
class C{  public static <T>List<T> toList(T obj1,T obj2,T obj3,T obj4,T obj5){  List<T> list=new LinkedList<T>();  list.add(obj1);  list.add(obj2);  list.add(obj3);  list.add(obj4);  list.add(obj5);  return list;}  }
class C{  private void updateWaypoint(boolean refresh){  if (refresh || waypoint == null) {    waypoint=myTracksProviderUtils.getWaypoint(getArguments().getLong(KEY_MARKER_ID));    if (waypoint == null) {      Log.d(TAG,"waypoint is null");      getFragmentManager().popBackStack();    }  }}  }
class C{  public boolean matches(String domain){  if (pattern != null) {    return pattern.matcher(domain).matches();  }  return this.domain.equals(domain);}  }
class C{  private String buildUrl(String url){  if (!URLUtil.hasScheme(url)) {    return StringUtils.defaultIfEmpty(scheme,DEFAULT_SCHEME) + "://" + url;  } else   if (StringUtils.isNotEmpty(scheme)) {    return scheme + "://" + URLUtil.removeScheme(url);  }  return url;}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  static String dumpString(String input){  if (input.isEmpty()) {    return "\"\"";  }  boolean quoted=false;  final StringBuilder builder=new StringBuilder();  for (int i=0; i < input.length(); i++) {    final char c=input.charAt(i);    if (Character.isDigit(c) || ('a' <= c && c <= 'z') || ('A' < c && c <= 'Z')|| c == '-' || c == ':' || c == '/' || c == '.') {      builder.append(c);      continue;    }    quoted=true;switch (c) {case '\b':      builder.append("\\b");    break;case '\t':  builder.append("\\t");break;case '\n':builder.append("\\n");break;case '\f':builder.append("\\f");break;case '\r':builder.append("\\r");break;case '"':builder.append("\\\"");break;case '\\':builder.append("\\\\");break;case '\'':builder.append("\\'");break;default :builder.append(c);break;}}if (quoted) {return "\"" + builder.toString() + "\"";}return builder.toString();}  }
class C{  public void update(){  if (mProfile == null)   return;  Account[] accounts=AccountManagerHelper.get(mContext).getGoogleAccounts();  for (int i=0; i < accounts.length; i++) {    if (mCacheEntries.get(accounts[i].name) == null) {      ProfileDownloader.startFetchingAccountInfoFor(mProfile,accounts[i].name,mImageSizePx,true);    }  }}  }
class C{  public ActivateSessionResponse ActivateSession(RequestHeader RequestHeader,SignatureData ClientSignature,SignedSoftwareCertificate[] ClientSoftwareCertificates,String[] LocaleIds,ExtensionObject UserIdentityToken,SignatureData UserTokenSignature) throws ServiceFaultException, ServiceResultException {  ActivateSessionRequest req=new ActivateSessionRequest(RequestHeader,ClientSignature,ClientSoftwareCertificates,LocaleIds,UserIdentityToken,UserTokenSignature);  return (ActivateSessionResponse)channel.serviceRequest(req);}  }
class C{  public void removeAllArchiveFiles(){  files.clear();}  }
class C{  protected void sequence_TStructGetter(ISerializationContext context,TStructGetter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private byte[] ipWithSubnetMask(byte[] ip,byte[] subnetMask){  int ipLength=ip.length;  byte[] temp=new byte[ipLength * 2];  System.arraycopy(ip,0,temp,0,ipLength);  System.arraycopy(subnetMask,0,temp,ipLength,ipLength);  return temp;}  }
class C{  public ConvexHullScan(int numThreads){  this.numThreads=numThreads;}  }
class C{  public Object resolveVariable(String pName) throws javax.servlet.jsp.el.ELException {  ELContext elContext=pageContext.getELContext();  ELResolver elResolver=elContext.getELResolver();  try {    return elResolver.getValue(elContext,null,pName);  } catch (  javax.el.ELException ex) {    throw new javax.servlet.jsp.el.ELException();  }}  }
class C{  public Object clone(){  try {    return new Role(name,objectNameList);  } catch (  IllegalArgumentException exc) {    return null;  }}  }
class C{  protected void sequence_PrimitiveType(ISerializationContext context,PrimitiveType semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  String writeConfigFileV2(MatsimConfigType matsimConfigType) throws UncheckedIOException {  try {    String destination=this.dummyPath + "/test_config.xml";    BufferedWriter bw=IOUtils.getBufferedWriter(destination);    String xsdPath=TempDirectoryUtil.createCustomTempDirectory("xsd");    LoadFile loadFile=new LoadFile(InternalConstants.V2_MATSIM_4_URBANSIM_XSD_MATSIMORG,xsdPath,InternalConstants.V2_XSD_FILE_NAME);    File file2XSD=loadFile.loadMATSim4UrbanSimXSD();    if (file2XSD == null || !file2XSD.exists()) {      log.error("Did not find xml schema!");      System.exit(1);    }    log.info("Using following xsd schema: " + file2XSD.getCanonicalPath());    SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);    Schema schema=schemaFactory.newSchema(file2XSD);    JAXBContext jaxbContext=JAXBContext.newInstance(ObjectFactory.class);    Marshaller m=jaxbContext.createMarshaller();    m.setSchema(schema);    m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);    JAXBElement elem=new JAXBElement(new QName("","matsim_config"),MatsimConfigType.class,matsimConfigType);    m.marshal(elem,bw);    return destination;  } catch (  JAXBException e) {    e.printStackTrace();    Assert.assertFalse(true);  }catch (  SAXException e) {    e.printStackTrace();    Assert.assertFalse(true);  }catch (  IOException e) {    e.printStackTrace();    Assert.assertFalse(true);  }  return null;}  }
class C{  public LocalTime parseLocalTime(String text){  return parseLocalDateTime(text).toLocalTime();}  }
class C{  private void initializeListeners(){  m_bookmarkManager.addListener(m_listener);  for (  final CCodeBookmark bookmark : m_bookmarkManager) {    bookmark.addListener(m_listener);  }}  }
class C{  public void lockUI(ProcessInfo pi){  this.setEnabled(false);  m_isLocked=true;}  }
class C{  public void open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  private static String readVersion(){  try {    byte[] bytes=IoUtils.readFileAsByteArray(ZONE_DIRECTORY_NAME + "+VERSION");    return new String(bytes,0,bytes.length,StandardCharsets.ISO_8859_1).trim();  } catch (  IOException ex) {    return "unknown";  }}  }
class C{  private void processScanResponse(List<StorageArray> arrayList,AccessProfile accessProfile){  _logger.info("{} systems found",arrayList.size());  Map<String,StorageSystemViewObject> storageSystemsCache=accessProfile.getCache();  for (  StorageArray array : arrayList) {    String systemType=StorageSystem.Type.hds.name();    String model=array.getDisplayArrayType();    String objectID=array.getObjectID();    String serialNumber=objectID.split(COMMA_SEPERATOR)[2];    String arrayFamily=array.getArrayFamily();    StorageSystemViewObject systemVO=null;    String nativeGuid=NativeGUIDGenerator.generateNativeGuid(systemType,objectID);    if (storageSystemsCache.containsKey(nativeGuid)) {      systemVO=storageSystemsCache.get(nativeGuid);    } else {      systemVO=new StorageSystemViewObject();    }    systemVO.setDeviceType(systemType);    systemVO.addprovider(accessProfile.getSystemId().toString());    systemVO.setProperty(StorageSystemViewObject.MODEL,model);    systemVO.setProperty(StorageSystemViewObject.SERIAL_NUMBER,serialNumber);    systemVO.setProperty(StorageSystemViewObject.STORAGE_NAME,nativeGuid);    storageSystemsCache.put(nativeGuid,systemVO);  }  _logger.info("Found {} systems during scanning for ip {}",storageSystemsCache.size(),accessProfile.getIpAddress());}  }
class C{  public static boolean isPrime(int number){  for (int divisor=2; divisor <= number / 2; divisor++) {    if (number % divisor == 0) {      return false;    }  }  return true;}  }
class C{  public static byte[] fromBitSet(Schema schema,BitSet value){  return value.toByteArray();}  }
class C{  public boolean isPageBreak(){  return m_pageBreak;}  }
class C{  public static ObjectInputStream newObjectInputStream(Path self,final ClassLoader classLoader) throws IOException {  return IOGroovyMethods.newObjectInputStream(Files.newInputStream(self),classLoader);}  }
class C{  public boolean parseArgs(String argv[],Main main){  String explicitVersion=null;  for (int i=0; i < argv.length; i++) {    if (argv[i] != null) {      String arg=argv[i].toLowerCase();      if (versionOptions.containsKey(arg)) {        if (explicitVersion != null && !explicitVersion.equals(arg)) {          main.error("rmic.cannot.use.both",explicitVersion,arg);          return false;        }        explicitVersion=arg;        version=versionOptions.get(arg);        argv[i]=null;      }    }  }  return true;}  }
class C{  public double weight(){  return m_Weight;}  }
class C{  @SuppressWarnings("unchecked") private CompletableFuture<PublishResponse> handlePublish(PublishRequest request){  state.getLogger().debug("{} - Received {}",state.getSessionId(),request);  if (request.session() != state.getSessionId()) {    state.getLogger().debug("{} - Inconsistent session ID: {}",state.getSessionId(),request.session());    return Futures.exceptionalFuture(new UnknownSessionException("incorrect session ID"));  }  if (request.eventIndex() <= state.getEventIndex()) {    return CompletableFuture.completedFuture(PublishResponse.builder().withStatus(Response.Status.OK).withIndex(state.getEventIndex()).build());  }  if (request.previousIndex() != state.getEventIndex()) {    state.getLogger().debug("{} - Inconsistent event index: {}",state.getSessionId(),request.previousIndex());    return CompletableFuture.completedFuture(PublishResponse.builder().withStatus(Response.Status.ERROR).withIndex(state.getEventIndex()).build());  }  state.setEventIndex(request.eventIndex());  sequencer.sequenceEvent(request,null);  return CompletableFuture.completedFuture(PublishResponse.builder().withStatus(Response.Status.OK).withIndex(request.eventIndex()).build());}  }
class C{  public static void main(String[] args){  if (args.length < 2) {    printUsageAndExit();  }  try (BufferedReader br=new BufferedReader(Files.newBufferedReader(Paths.get(args[args.length - 1])))){    List<String> header=Arrays.stream(br.readLine().split(",")).map(null).collect(toList());    int column=getColumnNumber(header,args[1]);switch (args[0]) {case "sort":      verifyArgumentNumber(args,4);    boolean isAsc;switch (args[2].toUpperCase()) {case "ASC":    isAsc=true;  break;case "DESC":isAsc=false;break;default :printUsageAndExit("Illegal argument" + args[2]);return;}Comparator<String> cmp=Comparator.comparing(null,String.CASE_INSENSITIVE_ORDER);br.lines().sorted(isAsc ? cmp : cmp.reversed()).forEach(null);break;case "search":verifyArgumentNumber(args,4);Predicate<String> pattern=Pattern.compile(args[2]).asPredicate();br.lines().filter(null).forEach(null);break;case "groupby":verifyArgumentNumber(args,3);br.lines().collect(Collectors.groupingBy(null,toCollection(null))).forEach(null);break;case "stat":verifyArgumentNumber(args,3);br.mark(READ_AHEAD_LIMIT);System.out.println(br.lines().collect(new Statistics(column)));br.reset();statInSeveralPasses(br,column);break;default :printUsageAndExit("Illegal argument" + args[0]);}} catch (IOException e) {printUsageAndExit(e.toString());}}  }
class C{  public boolean isEmpty() throws SQLException {  notSupported();  return false;}  }
class C{  public boolean isInCircle(Vertex a,Vertex b,Vertex c){  return TrianglePredicate.isInCircleRobust(a.p,b.p,c.p,this.p);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (conversation.getType() != Conversation.TYPE_CHANNEL) {    throw new CommandException(service.getString(R.string.only_usable_from_channel));  }  if (params.length == 2) {    service.getConnection(server.getId()).deOp(conversation.getName(),params[1]);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  public static String fromUTF(byte[] bytearr){  int utflen=bytearr.length;  int c, char2, char3;  int count=0;  int chararr_count=0;  char[] chararr=new char[utflen];  while (count < utflen) {    c=(int)bytearr[count] & 0xff;    if (c > 127)     break;    count++;    chararr[chararr_count++]=(char)c;  }  while (count < utflen) {    c=(int)bytearr[count] & 0xff;switch (c >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:      count++;    chararr[chararr_count++]=(char)c;  break;case 12:case 13:count+=2;if (count > utflen) {throw new RuntimeException(LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(),new UTFDataFormatException("malformed input: partial character at end"));}char2=(int)bytearr[count - 1];if ((char2 & 0xC0) != 0x80) throw new RuntimeException("malformed input around byte " + count);chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));break;case 14:count+=3;if (count > utflen) {throw new RuntimeException(LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(),new UTFDataFormatException("malformed input: partial character at end"));}char2=(int)bytearr[count - 2];char3=(int)bytearr[count - 1];if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {throw new RuntimeException(LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(),new UTFDataFormatException("malformed input around byte " + (count - 1)));}chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));break;default :throw new RuntimeException(LocalizedStrings.CacheServerHelper_UTF8_EXCEPTION.toLocalizedString(),new UTFDataFormatException("malformed input around byte " + count));}}return new String(chararr,0,chararr_count);}  }
class C{  public boolean matches(String sa){  if (_length != sa.length())   return false;  char[] buffer=_buffer;  int offset=_offset;  for (int i=_length - 1; i >= 0; i--)   if (_buffer[_offset + i] != sa.charAt(i))   return false;  return true;}  }
class C{  public static int findNonNestedChar(final String haystack,final String needles){  int openBrackets=0;  for (int i=0; i < haystack.length(); i++) {    if (haystack.charAt(i) == '(' || haystack.charAt(i) == '[' || haystack.charAt(i) == '{') {      openBrackets++;    } else     if (haystack.charAt(i) == ')' || haystack.charAt(i) == ']' || haystack.charAt(i) == '}') {      openBrackets--;    } else     if (openBrackets == 0) {      for (int j=0; j < needles.length(); j++) {        if (haystack.charAt(i) == needles.charAt(j)) {          return i;        }      }    }  }  return -1;}  }
class C{  public static BlockSnapshotDeleteCompleter createCompleter(DbClient dbClient,BlockSnapshot snapshot,String task){  BlockSnapshotDeleteCompleter completer=new BlockSnapshotDeleteCompleter(snapshot,task);  if (snapshot.getConsistencyGroup() != null) {    List<URI> snapIds=new ArrayList<URI>();    List<BlockSnapshot> snaps=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshot,dbClient);    for (    BlockSnapshot snap : snaps) {      snapIds.add(snap.getId());    }    completer.addIds(snapIds);  }  return completer;}  }
class C{  LogSegmentMetadata completeAndCloseLogSegment(String inprogressZnodeName,long logSegmentSeqNo,long ledgerId,long firstTxId,long lastTxId,int recordCount,long lastEntryId,long lastSlotId) throws IOException {  Stopwatch stopwatch=Stopwatch.createStarted();  boolean success=false;  try {    LogSegmentMetadata completedLogSegment=doCompleteAndCloseLogSegment(inprogressZnodeName,logSegmentSeqNo,ledgerId,firstTxId,lastTxId,recordCount,lastEntryId,lastSlotId);    success=true;    return completedLogSegment;  }  finally {    if (success) {      closeOpStats.registerSuccessfulEvent(stopwatch.stop().elapsed(TimeUnit.MICROSECONDS));    } else {      closeOpStats.registerFailedEvent(stopwatch.stop().elapsed(TimeUnit.MICROSECONDS));    }  }}  }
class C{  public static List<String> extractOriginalTokens(File featureVectorsFile) throws IOException {  List<String> result=new ArrayList<>();  Iterator<List<String>> comments=extractComments(featureVectorsFile);  try {    while (comments.hasNext()) {      List<String> comment=comments.next();      result.add(comment.get(2));    }  } catch (  IndexOutOfBoundsException e) {    throw new IllegalArgumentException("SvmHmm requires the feature [" + OriginalTextHolderFeatureExtractor.class.getSimpleName() + "] to be in the feature space otherwise this exception might be thrown.",e);  }  return result;}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public boolean validate(InputNode node) throws Exception {  Instance value=factory.getInstance(node);  if (!value.isReference()) {    Object result=value.setInstance(null);    Class expect=value.getType();    return validate(node,expect);  }  return true;}  }
class C{  public void disconnect() throws DebuggerException {  resume();  vm.dispose();  LOG.debug("Close connection to {}:{}",host,port);}  }
class C{  public boolean drawPath(Shape s) throws IOException {  PDFPathConstructor path=new PDFPathConstructor(this);  return path.addPath(s);}  }
class C{  private static boolean isLeftComment(Token[][] spec,Position p){  return (p.item == 0) && (spec[p.line][p.item].type == Token.COMMENT) && (spec[p.line].length > 1);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.NULL_LITERAL___GET_VALUE_AS_STRING:    return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean collides(final Rectangle2D shape){  final double x=shape.getX();  final double y=shape.getY();  final double w=shape.getWidth();  final double h=shape.getHeight();  return collides(x,y,w,h);}  }
class C{  private String appendCommaText(String result,String append,boolean addComma){  if (result != null && !result.isEmpty()) {    if (append != null && !append.isEmpty()) {      if (addComma)       result+=getString(R.string.format_comma_prefix,append); else       result+=getString(R.string.format_space_prefix,append);    }    return result;  } else {    return append;  }}  }
class C{  protected void registerTransport(NettyListener listener){  transportManager.registerTransport(listener);}  }
class C{  public boolean matchesFull(final Sentence other){  return matches(other,false);}  }
class C{  public void store(@NotNull TextChange change){  if (myChanges.isEmpty()) {    myChanges.add(new ChangeEntry(new TextChangeImpl(change.getText(),change.getStart(),change.getEnd()),change.getStart()));    return;  }  ChangeEntry last=myChanges.get(myChanges.size() - 1);  if (last.clientStartOffset + last.change.getText().length() < change.getStart()) {    int clientShift=last.clientStartOffset - last.change.getStart() + last.change.getDiff();    myChanges.add(new ChangeEntry(new TextChangeImpl(change.getText(),change.getStart() - clientShift,change.getEnd() - clientShift),change.getStart()));    return;  }  int insertionIndex=doStore(change);  if (insertionIndex < 0) {    return;  }  mergeIfNecessary(insertionIndex);}  }
class C{  public synchronized boolean addReceiver(SpanReceiver receiver){  SpanReceiver[] receivers=curReceivers;  for (int i=0; i < receivers.length; i++) {    if (receivers[i] == receiver) {      LOG.trace(toString() + ": can't add receiver " + receiver.toString()+ " since it is already in this pool.");      return false;    }  }  SpanReceiver[] newReceivers=Arrays.copyOf(receivers,receivers.length + 1);  newReceivers[receivers.length]=receiver;  registerShutdownHookIfNeeded();  curReceivers=newReceivers;  LOG.trace(toString() + ": added receiver " + receiver.toString());  return true;}  }
class C{  public MotionBlurOp(){}  }
class C{  public void cacheClass(ClassInterface clazz){  Map<String,ClassInterface> unitClasses=allClasses.get(clazz.getFileName());  if (unitClasses == null) {    unitClasses=new HashMap<>();    allClasses.put(clazz.getFileName(),unitClasses);  }  unitClasses.put(clazz.getName(),clazz);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @SuppressWarnings("unchecked") protected void notifyMessage(QsiMessage m,QsiListener notMe){  Vector<QsiListener> v;synchronized (this) {    v=(Vector<QsiListener>)cmdListeners.clone();  }  int cnt=v.size();  for (int i=0; i < cnt; i++) {    QsiListener client=v.elementAt(i);    if (notMe != client) {      log.debug("notify client: {}",client);      try {        client.message(m);      } catch (      Exception e) {        log.warn("notify: During dispatch to " + client + "\nException "+ e);      }    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public TimeOfDay withChronologyRetainFields(Chronology newChronology){  newChronology=DateTimeUtils.getChronology(newChronology);  newChronology=newChronology.withUTC();  if (newChronology == getChronology()) {    return this;  } else {    TimeOfDay newTimeOfDay=new TimeOfDay(this,newChronology);    newChronology.validate(newTimeOfDay,getValues());    return newTimeOfDay;  }}  }
class C{  protected void fireTimeoutTimer(){  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("SIPServerTransaction.fireTimeoutTimer this = " + this + " current state = "+ this.getRealState()+ " method = "+ this.getOriginalRequest().getMethod());  if (this.getMethod().equals(Request.INVITE) && sipStack.removeTransactionPendingAck(this)) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("Found tx pending ACK - returning");    }    return;  }  SIPDialog dialog=(SIPDialog)this.dialog;  if (((SIPTransactionStack)getSIPStack()).isDialogCreated(this.getOriginalRequest().getMethod()) && (TransactionState.CALLING == this.getRealState() || TransactionState.TRYING == this.getRealState())) {    dialog.setState(SIPDialog.TERMINATED_STATE);  } else   if (getOriginalRequest().getMethod().equals(Request.BYE)) {    if (dialog != null && dialog.isTerminatedOnBye())     dialog.setState(SIPDialog.TERMINATED_STATE);  }  if (TransactionState.COMPLETED == this.getRealState() && isInviteTransaction()) {    raiseErrorEvent(SIPTransactionErrorEvent.TIMEOUT_ERROR);    this.setState(TransactionState.TERMINATED);    sipStack.removeTransaction(this);  } else   if (TransactionState.COMPLETED == this.getRealState() && !isInviteTransaction()) {    this.setState(TransactionState.TERMINATED);    sipStack.removeTransaction(this);  } else   if (TransactionState.CONFIRMED == this.getRealState() && isInviteTransaction()) {    this.setState(TransactionState.TERMINATED);    sipStack.removeTransaction(this);  } else   if (!isInviteTransaction() && (TransactionState.COMPLETED == this.getRealState() || TransactionState.CONFIRMED == this.getRealState())) {    this.setState(TransactionState.TERMINATED);  } else   if (isInviteTransaction() && TransactionState.TERMINATED == this.getRealState()) {    raiseErrorEvent(SIPTransactionErrorEvent.TIMEOUT_ERROR);    if (dialog != null)     dialog.setState(SIPDialog.TERMINATED_STATE);  }}  }
class C{  public void testDoConfigureCreatesRequiredElements() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.DOMAIN_VERSION),"//weblogic:domain-version",config);}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  pseudostateEClass=createEClass(PSEUDOSTATE);  vertexEClass=createEClass(VERTEX);  createEReference(vertexEClass,VERTEX__PARENT_REGION);  createEReference(vertexEClass,VERTEX__INCOMING_TRANSITIONS);  createEReference(vertexEClass,VERTEX__OUTGOING_TRANSITIONS);  regionEClass=createEClass(REGION);  createEReference(regionEClass,REGION__VERTICES);  createEReference(regionEClass,REGION__COMPOSITE);  transitionEClass=createEClass(TRANSITION);  createEReference(transitionEClass,TRANSITION__TARGET);  createEReference(transitionEClass,TRANSITION__SOURCE);  finalStateEClass=createEClass(FINAL_STATE);  choiceEClass=createEClass(CHOICE);  createEAttribute(choiceEClass,CHOICE__KIND);  statechartEClass=createEClass(STATECHART);  entryEClass=createEClass(ENTRY);  createEAttribute(entryEClass,ENTRY__KIND);  exitEClass=createEClass(EXIT);  reactiveElementEClass=createEClass(REACTIVE_ELEMENT);  createEReference(reactiveElementEClass,REACTIVE_ELEMENT__LOCAL_REACTIONS);  reactionEClass=createEClass(REACTION);  createEReference(reactionEClass,REACTION__TRIGGER);  createEReference(reactionEClass,REACTION__EFFECT);  createEReference(reactionEClass,REACTION__PROPERTIES);  triggerEClass=createEClass(TRIGGER);  effectEClass=createEClass(EFFECT);  reactionPropertyEClass=createEClass(REACTION_PROPERTY);  specificationElementEClass=createEClass(SPECIFICATION_ELEMENT);  createEAttribute(specificationElementEClass,SPECIFICATION_ELEMENT__SPECIFICATION);  scopeEClass=createEClass(SCOPE);  createEReference(scopeEClass,SCOPE__DECLARATIONS);  createEReference(scopeEClass,SCOPE__EVENTS);  createEReference(scopeEClass,SCOPE__VARIABLES);  createEReference(scopeEClass,SCOPE__REACTIONS);  scopedElementEClass=createEClass(SCOPED_ELEMENT);  createEReference(scopedElementEClass,SCOPED_ELEMENT__SCOPES);  createEAttribute(scopedElementEClass,SCOPED_ELEMENT__NAMESPACE);  synchronizationEClass=createEClass(SYNCHRONIZATION);  stateEClass=createEClass(STATE);  createEAttribute(stateEClass,STATE__ORTHOGONAL);  createEAttribute(stateEClass,STATE__SIMPLE);  createEAttribute(stateEClass,STATE__COMPOSITE);  createEAttribute(stateEClass,STATE__LEAF);  regularStateEClass=createEClass(REGULAR_STATE);  compositeElementEClass=createEClass(COMPOSITE_ELEMENT);  createEReference(compositeElementEClass,COMPOSITE_ELEMENT__REGIONS);  importDeclarationEClass=createEClass(IMPORT_DECLARATION);  createEReference(importDeclarationEClass,IMPORT_DECLARATION__DECLARATION);  entryKindEEnum=createEEnum(ENTRY_KIND);  choiceKindEEnum=createEEnum(CHOICE_KIND);}  }
class C{  public Object[] toArray(){  throw new UnsupportedOperationException("toArray not yet supported");}  }
class C{  static void stop(){  server.stop();  server=null;}  }
class C{  public CacheSizeInfo reportSize(ObjectSizeCalculatorInterface objectSizeCalculator){  int elemsBefore=objects.size();  long sizeInByte=objectSizeCalculator.calculateObjectSizeDeep(objects);  int elemsAfter=objects.size();  CacheSizeInfo cacheSizeInfo=new CacheSizeInfo(id,elemsBefore,sizeInByte,elemsAfter);  logger.info(cacheSizeInfo.toString());  return cacheSizeInfo;}  }
class C{  public void clear(){  attrMap.clear();}  }
class C{  @Pure public static Atom findOrCreateUtf8Atom(byte[] utf8){  return findOrCreate(utf8,true,null);}  }
class C{  public JsonToken peek() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }switch (p) {case PEEKED_BEGIN_OBJECT:    return JsonToken.BEGIN_OBJECT;case PEEKED_END_OBJECT:  return JsonToken.END_OBJECT;case PEEKED_BEGIN_ARRAY:return JsonToken.BEGIN_ARRAY;case PEEKED_END_ARRAY:return JsonToken.END_ARRAY;case PEEKED_SINGLE_QUOTED_NAME:case PEEKED_DOUBLE_QUOTED_NAME:case PEEKED_UNQUOTED_NAME:return JsonToken.NAME;case PEEKED_TRUE:case PEEKED_FALSE:return JsonToken.BOOLEAN;case PEEKED_NULL:return JsonToken.NULL;case PEEKED_SINGLE_QUOTED:case PEEKED_DOUBLE_QUOTED:case PEEKED_UNQUOTED:case PEEKED_BUFFERED:return JsonToken.STRING;case PEEKED_LONG:case PEEKED_NUMBER:return JsonToken.NUMBER;case PEEKED_EOF:return JsonToken.END_DOCUMENT;default :throw new AssertionError();}}  }
class C{  public static final int makeIntFromByte2(byte[] b){  return makeIntFromByte2(b,0);}  }
class C{  public void testScalarsWithTyping() throws Exception {  ObjectMapper m=new ObjectMapper();  String json;  DynamicWrapper result;  json=m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3)));  result=m.readValue(json,DynamicWrapper.class);  assertEquals(Integer.valueOf(3),result.value);  json=m.writeValueAsString(new DynamicWrapper("abc"));  result=m.readValue(json,DynamicWrapper.class);  assertEquals("abc",result.value);  json=m.writeValueAsString(new DynamicWrapper("abc"));  result=m.readValue(json,DynamicWrapper.class);  assertEquals("abc",result.value);  json=m.writeValueAsString(new DynamicWrapper(Boolean.TRUE));  result=m.readValue(json,DynamicWrapper.class);  assertEquals(Boolean.TRUE,result.value);  json=m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L)));  result=m.readValue(json,DynamicWrapper.class);  assertEquals(Long.valueOf(7),result.value);  json=m.writeValueAsString(new DynamicWrapper(TestEnum.B));  result=m.readValue(json,DynamicWrapper.class);  assertEquals(TestEnum.B,result.value);}  }
class C{  public Boolean isActiveByDefault(){  return activeByDefault;}  }
class C{  public static void reconcile(ICompilationUnit unit) throws JavaModelException {  unit.reconcile(ICompilationUnit.NO_AST,false,null,null);}  }
class C{  private void clearSupplicantServiceRequest(){  if (mServiceDiscReqId == null)   return;  mWifiNative.p2pServDiscCancelReq(mServiceDiscReqId);  mServiceDiscReqId=null;}  }
class C{  public DrawerBuilder withAccountHeader(@NonNull AccountHeader accountHeader,boolean accountHeaderSticky){  this.mAccountHeader=accountHeader;  this.mAccountHeaderSticky=accountHeaderSticky;  return this;}  }
class C{  public ArrangeToolBar(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString(getID() + ".toolbar"));}  }
class C{  void _usePrivates(){  System.out.print(yycolumn);  System.out.print(yyline);  System.out.print(Boolean.toString(zzAtBOL));}  }
class C{  public AdminPort(int portNumber){  this.portNumber=portNumber;  createAdminConnector();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAssociationPosition_();}  }
class C{  void verifyUniqueXids(List<OFMessage> msgs){  if (seenXids == null)   seenXids=new HashSet<Long>();  for (  OFMessage m : msgs) {    long xid=m.getXid();    assertTrue("Xid in messags is 0",xid != 0);    assertFalse("Xid " + xid + " has already been used",seenXids.contains(xid));    seenXids.add(xid);  }}  }
class C{  public HttpJsonResponseStrategy(final DeserializationContext context){  this.context=context;}  }
class C{  public void end(String namespace,String name) throws Exception {  Object top=digester.pop();  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[ApplicationRule]{" + digester.getMatch() + "} Pop "+ top.getClass());  }  if (!CLASS_NAME.equals(top.getClass().getName())) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public boolean containsSlots(){  return false;}  }
class C{  private boolean isDistanceFrequency(){  return taskFrequency < 0;}  }
class C{  public void meetWith(LockSet other){  for (int i=0; i < array.length; i+=2) {    int valueNumber=array[i];    if (valueNumber < 0) {      break;    }    int mine=array[i + 1];    int his=other.getLockCount(valueNumber);    array[i + 1]=mergeValues(mine,his);  }  for (int i=0; i < other.array.length; i+=2) {    int valueNumber=other.array[i];    if (valueNumber < 0) {      break;    }    int mine=getLockCount(valueNumber);    int his=other.array[i + 1];    setLockCount(valueNumber,mergeValues(mine,his));  }  setDefaultLockCount(0);}  }
class C{  public BasicDirImpl(){  _id=Defs.NULL_ID;  _name="";}  }
class C{  public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public PointDetails providePoint(NamedBean source,LayoutEditor panel){  PointDetails sourcePoint=getPointDetails(source,panel);  if (sourcePoint == null) {    LayoutBlock facing=InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class).getFacingBlockByNamedBean(source,panel);    List<LayoutBlock> protecting=InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class).getProtectingBlocksByNamedBean(source,panel);    if ((facing == null) && (protecting == null)) {      log.error("Unable to find facing and protecting block");      return null;    }    sourcePoint=providePoint(facing,protecting,panel);    sourcePoint.setRefObject(source);  }  return sourcePoint;}  }
class C{  public static void assertEquals(String message,float expected,float actual,float delta){  Assert.assertEquals(message,expected,actual,delta);}  }
class C{  public static boolean hasStepOfAssignableClass(final Class superClass,final Traversal.Admin<?,?> traversal){  for (  final Step<?,?> step : traversal.getSteps()) {    if (superClass.isAssignableFrom(step.getClass())) {      return true;    }  }  return false;}  }
class C{  public Random(){  setSeed(System.currentTimeMillis() + System.identityHashCode(this));}  }
class C{  int throwInvalid(String name,int offset) throws ParseException {  throw new ParseException("Invalid " + name + " value",offset);}  }
class C{  public OrganizationAlreadyExistsException(final String message){  super(message);}  }
class C{  public ReferenceVectorGuidedPopulation(int numberOfObjectives,int divisionsOuter,int divisionsInner,double alpha){  super();  this.numberOfObjectives=numberOfObjectives;  this.divisionsOuter=divisionsOuter;  this.divisionsInner=divisionsInner;  this.alpha=alpha;  initialize();}  }
class C{  private void updateTimer(float pSecondsElapsed){  _timerBar.setScaleX(_timePassed / _levelDuration);  _timeText.setText(String.format("%.01f",_timePassed));  if (_timerBar.getScaleX() > 1.0f) {    _timePassed=_levelDuration;    Log.d(TAG,"updateTimer: TIME OUT!");    if (_gameLevelStateListener != null) {      _gameLevelStateListener.onTimeOut();    }  }}  }
class C{  public void slice() throws ParseException {  meet=false;}  }
class C{  private ClassSignature parseClassSignature(){  assert (index == 0);  return ClassSignature.make(parseZeroOrMoreFormalTypeParameters(),parseClassTypeSignature(),parseSuperInterfaces());}  }
class C{  public boolean checkSpam(String user,String text){  String lastSpam=this.spamText.get(user);  if (text.equals(lastSpam)) {    Integer count=this.spamCount.get(user);    if (count == null) {      count=0;    }    this.spamCount.put(user,count + 1);    if (count.intValue() > this.maxSpam) {      return true;    }  } else {    this.spamText.put(user,text);    this.spamCount.put(user,1);  }  if (this.spamText.size() > 50) {    this.spamText.clear();    this.spamCount.clear();  }  return false;}  }
class C{  int compare(NodeCompareElem n1,NodeCompareElem n2,int kIndex,XPathContext support) throws TransformerException {  int result=0;  NodeSortKey k=(NodeSortKey)m_keys.elementAt(kIndex);  if (k.m_treatAsNumbers) {    double n1Num, n2Num;    if (kIndex == 0) {      n1Num=((Double)n1.m_key1Value).doubleValue();      n2Num=((Double)n2.m_key1Value).doubleValue();    } else     if (kIndex == 1) {      n1Num=((Double)n1.m_key2Value).doubleValue();      n2Num=((Double)n2.m_key2Value).doubleValue();    } else {      XObject r1=k.m_selectPat.execute(m_execContext,n1.m_node,k.m_namespaceContext);      XObject r2=k.m_selectPat.execute(m_execContext,n2.m_node,k.m_namespaceContext);      n1Num=r1.num();      n2Num=r2.num();    }    if ((n1Num == n2Num) && ((kIndex + 1) < m_keys.size())) {      result=compare(n1,n2,kIndex + 1,support);    } else {      double diff;      if (Double.isNaN(n1Num)) {        if (Double.isNaN(n2Num))         diff=0.0; else         diff=-1;      } else       if (Double.isNaN(n2Num))       diff=1; else       diff=n1Num - n2Num;      result=(int)((diff < 0.0) ? (k.m_descending ? 1 : -1) : (diff > 0.0) ? (k.m_descending ? -1 : 1) : 0);    }  } else {    CollationKey n1String, n2String;    if (kIndex == 0) {      n1String=(CollationKey)n1.m_key1Value;      n2String=(CollationKey)n2.m_key1Value;    } else     if (kIndex == 1) {      n1String=(CollationKey)n1.m_key2Value;      n2String=(CollationKey)n2.m_key2Value;    } else {      XObject r1=k.m_selectPat.execute(m_execContext,n1.m_node,k.m_namespaceContext);      XObject r2=k.m_selectPat.execute(m_execContext,n2.m_node,k.m_namespaceContext);      n1String=k.m_col.getCollationKey(r1.str());      n2String=k.m_col.getCollationKey(r2.str());    }    result=n1String.compareTo(n2String);    if (k.m_caseOrderUpper) {      String tempN1=n1String.getSourceString().toLowerCase();      String tempN2=n2String.getSourceString().toLowerCase();      if (tempN1.equals(tempN2)) {        result=result == 0 ? 0 : -result;      }    }    if (k.m_descending) {      result=-result;    }  }  if (0 == result) {    if ((kIndex + 1) < m_keys.size()) {      result=compare(n1,n2,kIndex + 1,support);    }  }  if (0 == result) {    DTM dtm=support.getDTM(n1.m_node);    result=dtm.isNodeAfter(n1.m_node,n2.m_node) ? -1 : 1;  }  return result;}  }
class C{  private static PendingIntent createMapBroadcastIntent(Context context,URLSpan[] urlSpans,long eventId){  for (int span_i=0; span_i < urlSpans.length; span_i++) {    URLSpan urlSpan=urlSpans[span_i];    String urlString=urlSpan.getURL();    if (urlString.startsWith(GEO_PREFIX)) {      Intent broadcastIntent=new Intent(MAP_ACTION);      broadcastIntent.setClass(context,AlertReceiver.class);      broadcastIntent.putExtra(EXTRA_EVENT_ID,eventId);      return PendingIntent.getBroadcast(context,Long.valueOf(eventId).hashCode(),broadcastIntent,PendingIntent.FLAG_CANCEL_CURRENT);    }  }  return null;}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  public TimeStampHeader createTimeStampHeader(float timeStamp) throws InvalidArgumentException {  if (timeStamp < 0)   throw new IllegalArgumentException("illegal timeStamp");  TimeStamp t=new TimeStamp();  t.setTimeStamp(timeStamp);  return t;}  }
class C{  public boolean oneIteration() throws Exception {  if (multipleSelectors) {    outMessage=messages[numberSequencer.nextNumber()];  }  messageProducer.send(outMessage,deliveryMode,priority,expiry);  if (transacted && (getIterations() + 1) % commitCount == 0)   session.commit();  incIterations();  return true;}  }
class C{  private void receivePacket(){  float progress=mParser.parse();  ReceiveDelivery delivery=mReceiveDelivery;  if (delivery != null && isNotifyProgress(progress)) {    if (progress == PacketFilter.STATUS_START) {      delivery.postReceiveStart(mConnector,mParser.getPacket());    } else     if (progress == PacketFilter.STATUS_END) {      delivery.postReceiveCompleted(mConnector,mParser.getPacket());    } else {      delivery.postReceiveProgress(mConnector,mParser.getPacket(),progress);    }  }}  }
class C{  public TweenManager add(BaseTween<?> object){  if (!objects.contains(object))   objects.add(object);  if (object.isAutoStartEnabled)   object.start();  return this;}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public static String generateNativeGuid(DbClient dbClient,Volume volume) throws IOException {  StorageSystem device=dbClient.queryObject(StorageSystem.class,volume.getStorageController());  return String.format("%s+%s+" + VOLUME + "+%s",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),volume.getNativeId());}  }
class C{  public static <T>ArrayList<T> arrayList(){  return new ArrayList<T>(4);}  }
class C{  public RedirectException(){  super();}  }
class C{  public void testSolrConnection(){  SolrClient client=getSolrConnection();  try {    client.ping();  } catch (  Exception e) {    throw new IllegalArgumentException(String.format("Server refused connection at '%s'. Please make sure that either the Solr/Zookeeper services " + "are properly running or the collection '%s' exists in the Solr Server.",solrHost,collectionName),e);  }}  }
class C{  public static <T>T[] resize(T[] buffer,int newSize){  Class<T> componentType=(Class<T>)buffer.getClass().getComponentType();  T[] temp=(T[])Array.newInstance(componentType,newSize);  System.arraycopy(buffer,0,temp,0,buffer.length >= newSize ? newSize : buffer.length);  return temp;}  }
class C{  public ClientHttpRequest(URL url) throws IOException {  this(url.openConnection());}  }
class C{  static String listToCommaDelimitedString(List<String> list){  StringBuilder result=new StringBuilder();  for (  String str : list) {    if (result.length() > 0) {      result.append(",");    }    result.append(str);  }  return result.toString();}  }
class C{  public static void saveProvisioningValidity(Context context,long validity){  if (validity <= 0L) {    return;  }  long next=System.currentTimeMillis() + validity;  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);  SharedPreferences.Editor editor=preferences.edit();  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);  editor.commit();}  }
class C{  public ArrayBuilder createArrayBuilder(){  return (new ArrayBuilder());}  }
class C{  @Override public void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int height=0;  for (int i=0; i < getChildCount(); i++) {    View child=getChildAt(i);    child.measure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));    int h=child.getMeasuredHeight();    if (h > height)     height=h;  }  heightMeasureSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  mDatePicker=(DatePicker)findViewById(R.id.datePicker);  mTimePicker=(TimePicker)findViewById(R.id.timePicker);}  }
class C{  public boolean equals(Object another){  if (!(another instanceof HttpPrincipal)) {    return false;  }  HttpPrincipal theother=(HttpPrincipal)another;  return (username.equals(theother.username) && realm.equals(theother.realm));}  }
class C{  public char peek(){  return isEmpty() ? 0 : queue.charAt(pos);}  }
class C{  public void submit(StepExecutionDAO stepExecutionDAO){  if (state != StepExecutionState.NEW_STEP_EXECUTION) {    throw new IllegalStateException("Attempting to submit a StepExecution to a queue, which is not in state 'NEW_STEP_EXECUTION'.");  }  state=StepExecutionState.STEP_EXECUTION_SUBMITTED;  submittedTime=new Date();  stepExecutionDAO.update(this);}  }
class C{  public boolean contains(final AbstractInsnNode insn){  AbstractInsnNode i=first;  while (i != null && i != insn) {    i=i.next;  }  return i != null;}  }
class C{  public boolean isProductionSettingAllowed(){  return !cfg.debug();}  }
class C{  @Transactional public T updateByPO(T po,User currentUser) throws Exception {  logHelper.logUsersOperations(OperationType.UPDATE,getClassT().getSimpleName(),currentUser);  Field lastModifiedByField=po.getClass().getDeclaredField(CommonsConstant.LAST_MODIFIED_BY);  lastModifiedByField.setAccessible(true);  lastModifiedByField.set(po,currentUser.getId());  Field lastModifiedDateField=po.getClass().getDeclaredField(CommonsConstant.LAST_MODIFIED_DATE);  lastModifiedDateField.setAccessible(true);  lastModifiedDateField.set(po,new Date());  return repository.save(po);}  }
class C{  public boolean isSaturday(){  return saturday;}  }
class C{  public Period plusHours(int hours){  if (hours == 0) {    return this;  }  int[] values=getValues();  getPeriodType().addIndexedField(this,PeriodType.HOUR_INDEX,values,hours);  return new Period(values,getPeriodType());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void add(Protocol protocol){  if (protocolList != null) {    protocolList.add(protocol);    protocol.init(userConnection);  } else {    throw new NullPointerException("Tried to add protocol to early");  }}  }
class C{  public Particle(){  rx=StdRandom.uniform(0.0,1.0);  ry=StdRandom.uniform(0.0,1.0);  vx=StdRandom.uniform(-0.005,0.005);  vy=StdRandom.uniform(-0.005,0.005);  radius=0.01;  mass=0.5;  color=Color.BLACK;}  }
class C{  public String toString(){  StringBuffer strBuf=new StringBuffer();  strBuf.append("Identifier: " + getIdentifier());  strBuf.append("\n");  strBuf.append("BasePricePeriod: " + getBasePricePeriod());  strBuf.append("\n");  strBuf.append("BasePriceUser: " + getBasePriceUser());  strBuf.append("\n");  strBuf.append("FactorForPeriod: " + getFactorForPeriod());  strBuf.append("\n");  strBuf.append("FactorForUsers: " + getFactorForUsers());  strBuf.append("\n");  strBuf.append("Value: " + getValue());  strBuf.append("\n");  strBuf.append("Type: " + getType());  strBuf.append("\n");  strBuf.append("Period: " + getPeriod());  strBuf.append("\n");  strBuf.append("OptionId: " + getOptionId());  strBuf.append("\n");  strBuf.append("roleId: " + getRoleId());  return strBuf.toString();}  }
class C{  public MethodDescriptor(Method method,ParameterDescriptor parameterDescriptors[]){  setName(method.getName());  setMethod(method);  this.parameterDescriptors=(parameterDescriptors != null) ? parameterDescriptors.clone() : null;}  }
class C{  private void testStreamedLoading(int[] outcomes,int[] dhInteraction){  for (int numImmediate=0; numImmediate <= 1; numImmediate++) {    reset(mDataSourceSupplier,mDraweeHierarchy);    System.out.println("numImmediate: " + numImmediate);    testStreamedLoading(numImmediate,outcomes,dhInteraction);  }}  }
class C{  public static boolean isPlainLiteral(Value v){  if (v instanceof Literal) {    Literal l=(Literal)v;    return (l.getDatatype().equals(XMLSchema.STRING));  }  return false;}  }
class C{  public final static String createHexFingerprint(String keytype,byte[] publickey){  byte[] raw=rawFingerPrint("md5",keytype,publickey);  return rawToHexFingerprint(raw);}  }
class C{  public void reset(){  displayCache.clear();  cachedID.clear();}  }
class C{  public Collection values(){  return this;}  }
class C{  @Override public void updateScreen(){  proxyBox.updateCursorCounter();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public AnimatablePathDataValue(AnimationTarget target,short[] commands,float[] parameters){  super(target);  this.commands=commands;  this.parameters=parameters;}  }
class C{  static void simplify(ArrayList<PathParser.PathDataNode> from,ArrayList<PathParser.PathDataNode> to){  if (from.size() != to.size()) {    System.err.println("Cannot simplify lists of nodes of different sizes");    return;  }  System.out.println("Simplify lists with size " + from.size());  boolean removeIndexes[]=new boolean[from.size()];  int last=from.size() - 1;  for (int i=0; i < last; i++) {    if (from.get(i).isEqual(from.get(i + 1)) && to.get(i).isEqual(to.get(i + 1))) {      removeIndexes[i]=true;    }  }  Iterator iterators[]=new Iterator[]{from.iterator(),to.iterator()};  for (  Iterator it : iterators) {    int i=0;    while (it.hasNext()) {      it.next();      if (removeIndexes[i++])       it.remove();    }  }  System.out.println("Final size after simplify is " + from.size());}  }
class C{  public static void p(Object object){  init();  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  utilAsString.setPrintWriter(pw);  utilAsString.print(object);  pw.flush();  if (XRLog.isLoggingEnabled()) {    XRLog.general(sw.getBuffer().toString());  }}  }
class C{  public FigureToolBar(){  labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString(getID() + ".toolbar"));  setDisclosureStateCount(3);}  }
class C{  public void reset(){  disconnect();  Properties rp=new Properties();  rp.setProperty(COMMAND_FIELD,CLEAR);  distributeEvent(rp);  if (serverPanel != null) {    viewChoice.removeAll();    connectedStatus.setText(STATUS_IDLE);  }}  }
class C{  protected SkullMetaBuilder(final SkullMeta meta){  this.meta=meta.clone();}  }
class C{  private void readColumnSortInfo() throws IOException {  init();  try {    columnSortInfo=(ColumnSortInfo)dictionarySortIndexThriftReader.read();  } catch (  IOException ie) {    LOGGER.error(ie,"problem while reading the column sort info.");    throw new IOException("problem while reading the column sort info.",ie);  } finally {    if (null != dictionarySortIndexThriftReader) {      dictionarySortIndexThriftReader.close();    }  }}  }
class C{  public String toTitleString(ObjectMatrix2D matrix,String[] rowNames,String[] columnNames,String rowAxisName,String columnAxisName,String title){  if (matrix.size() == 0)   return "Empty matrix";  String oldFormat=this.format;  this.format=LEFT;  int rows=matrix.rows();  int columns=matrix.columns();  int r=0;  int c=0;  r+=(columnNames == null ? 0 : 1);  c+=(rowNames == null ? 0 : 1);  c+=(rowAxisName == null ? 0 : 1);  c+=(rowNames != null || rowAxisName != null ? 1 : 0);  int height=r + Math.max(rows,rowAxisName == null ? 0 : rowAxisName.length());  int width=c + columns;  cern.colt.matrix.ObjectMatrix2D titleMatrix=matrix.like(height,width);  titleMatrix.viewPart(r,c,rows,columns).assign(matrix);  if (r > 0)   titleMatrix.viewRow(0).viewPart(c,columns).assign(columnNames);  if (rowAxisName != null) {    String[] rowAxisStrings=new String[rowAxisName.length()];    for (int i=rowAxisName.length(); --i >= 0; )     rowAxisStrings[i]=rowAxisName.substring(i,i + 1);    titleMatrix.viewColumn(0).viewPart(r,rowAxisName.length()).assign(rowAxisStrings);  }  if (rowNames != null)   titleMatrix.viewColumn(c - 2).viewPart(r,rows).assign(rowNames);  if (c > 0)   titleMatrix.viewColumn(c - 2 + 1).viewPart(0,rows + r).assign("|");  boolean oldPrintShape=this.printShape;  this.printShape=false;  String str=toString(titleMatrix);  this.printShape=oldPrintShape;  StringBuffer total=new StringBuffer(str);  if (columnNames != null) {    int i=str.indexOf(rowSeparator);    total.insert(i + 1,repeat('-',i) + rowSeparator);  } else   if (columnAxisName != null) {    int i=str.indexOf(rowSeparator);    total.insert(0,repeat('-',i) + rowSeparator);  }  if (columnAxisName != null) {    int j=0;    if (c > 0)     j=str.indexOf('|');    String s=blanks(j);    if (c > 0)     s=s + "| ";    s=s + columnAxisName + "\n";    total.insert(0,s);  }  if (title != null)   total.insert(0,title + "\n");  this.format=oldFormat;  return total.toString();}  }
class C{  public static void main(String[] args){  LambdaFormTestCase.runTests(null,EnumSet.allOf(TestMethods.class));}  }
class C{  public static Instances divide(Instances instances,boolean invert) throws Exception {  Instances newInstances=new Instances(instances);  if (instances.classIndex() < 0) {    throw new Exception("For class association rule mining a class attribute has to be specified.");  }  if (invert) {    for (int i=0; i < newInstances.numAttributes(); i++) {      if (i != newInstances.classIndex()) {        newInstances.deleteAttributeAt(i);        i--;      }    }    return newInstances;  } else {    newInstances.setClassIndex(-1);    newInstances.deleteAttributeAt(instances.classIndex());    return newInstances;  }}  }
class C{  public void testDecodeAttributeBodyV6() throws StunException {  byte[] attributeValue=msgFixture.requestedAddressFamilyV6;  char offset=Attribute.HEADER_LENGTH;  char length=(char)(attributeValue.length - offset);  requestedAddressFamilyAttribute.decodeAttributeBody(attributeValue,offset,length);  assertEquals("RequestedAddressFamilyAttribute.decode() did not properly decode.",MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V6,requestedAddressFamilyAttribute.getFamily());}  }
class C{  public static <V1,V2,V3>GridTuple3<V1,V2,V3> t(@Nullable V1 v1,@Nullable V2 v2,@Nullable V3 v3){  return new GridTuple3<>(v1,v2,v3);}  }
class C{  private ELKIServiceScanner(){}  }
class C{  public Builder(){  this(TweetUi.getInstance());}  }
class C{  public IOContainer append(IOObject[] output){  List<IOObject> newObjects=new LinkedList<>();  for (int i=0; i < output.length; i++) {    newObjects.add(output[i]);  }  newObjects.addAll(ioObjects);  return new IOContainer(newObjects);}  }
class C{  public BrazilianAnalyzer(CharArraySet stopwords){  super(stopwords);}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  protected SuperInterfacesIterable(TClassifier root){  this.root=root;  ignoreSuperClassInterfaces=false;}  }
class C{  @Override public String toString(){  StringBuffer buf=new StringBuffer();  String indent="        ";  buf.append(super.toString());  buf.append(indent + "SegmentCount : " + getSegmentCount()+ "\n");  buf.append(indent + "SearchRange  : " + getSearchRange()+ "\n");  buf.append(indent + "EntrySelector: " + getEntrySelector()+ "\n");  buf.append(indent + "RangeShift   : " + getRangeShift()+ "\n");  for (Iterator i=segments.keySet().iterator(); i.hasNext(); ) {    Segment s=(Segment)i.next();    buf.append(indent);    buf.append("Segment: " + Integer.toHexString(s.startCode));    buf.append("-" + Integer.toHexString(s.endCode) + " ");    buf.append("hasMap: " + s.hasMap + " ");    if (!s.hasMap) {      buf.append("delta: " + segments.get(s));    }    buf.append("\n");  }  return buf.toString();}  }
class C{  @SuppressLint("NewApi") private void hideDayFieldIfNotInFormat(FormEntryPrompt prompt){  String appearance=prompt.getQuestion().getAppearanceAttr();  if (appearance == null) {    if (Build.VERSION.SDK_INT >= 11) {      showCalendar=true;      this.mDatePicker.setCalendarViewShown(true);      if (Build.VERSION.SDK_INT >= 12) {        CalendarView cv=this.mDatePicker.getCalendarView();        cv.setShowWeekNumber(false);      }      this.mDatePicker.setSpinnersShown(true);      hideDay=true;      hideMonth=false;    } else {      return;    }  } else   if ("month-year".equals(appearance)) {    hideDay=true;    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else   if ("year".equals(appearance)) {    hideMonth=true;    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else   if ("no-calendar".equals(appearance)) {    if (Build.VERSION.SDK_INT >= 11) {      this.mDatePicker.setCalendarViewShown(false);      this.mDatePicker.setSpinnersShown(true);    }  } else {    if (Build.VERSION.SDK_INT >= 11) {      showCalendar=true;      this.mDatePicker.setCalendarViewShown(true);      if (Build.VERSION.SDK_INT >= 12) {        CalendarView cv=this.mDatePicker.getCalendarView();        cv.setShowWeekNumber(false);      }      this.mDatePicker.setSpinnersShown(true);      hideDay=true;      hideMonth=false;    }  }  if (hideMonth || hideDay) {    if (Build.VERSION.SDK_INT > 10) {      mDatePicker.findViewById(Resources.getSystem().getIdentifier("day","id","android")).setVisibility(View.GONE);      if (hideMonth) {        mDatePicker.findViewById(Resources.getSystem().getIdentifier("month","id","android")).setVisibility(View.GONE);      }    } else {      for (      Field datePickerDialogField : this.mDatePicker.getClass().getDeclaredFields()) {        if ("mDayPicker".equals(datePickerDialogField.getName()) || "mDaySpinner".equals(datePickerDialogField.getName())) {          datePickerDialogField.setAccessible(true);          Object dayPicker=new Object();          try {            dayPicker=datePickerDialogField.get(this.mDatePicker);          } catch (          Exception e) {            e.printStackTrace();          }          ((View)dayPicker).setVisibility(View.GONE);        }        if (hideMonth) {          if ("mMonthPicker".equals(datePickerDialogField.getName()) || "mMonthSpinner".equals(datePickerDialogField.getName())) {            datePickerDialogField.setAccessible(true);            Object monthPicker=new Object();            try {              monthPicker=datePickerDialogField.get(this.mDatePicker);            } catch (            Exception e) {              e.printStackTrace();            }            ((View)monthPicker).setVisibility(View.GONE);          }        }      }    }  }}  }
class C{  public static void addSignatureAlgorithmsExtension(Hashtable extensions,Vector supportedSignatureAlgorithms) throws IOException {  extensions.put(EXT_signature_algorithms,createSignatureAlgorithmsExtension(supportedSignatureAlgorithms));}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + HashUtilities.hashCodeForPaint(this.fillPaint);  result=37 * result + HashUtilities.hashCodeForPaint(this.outlinePaint);  result=37 * result + this.outlineStroke.hashCode();  return result;}  }
class C{  public boolean isEdgeOnly(){  return edgeOnly;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_IM__REWIRED_TARGET:    return rewiredTarget != null;}return super.eIsSet(featureID);}  }
class C{  @Override public void queryError(WebSocket session,HeadersAmp headers,String to,long qid,Throwable exn) throws IOException {}  }
class C{  public static boolean cs_lsolve(Dcs L,double[] x){  int p, j, n, Lp[], Li[];  double Lx[];  if (!Dcs_util.CS_CSC(L) || x == null)   return (false);  n=L.n;  Lp=L.p;  Li=L.i;  Lx=L.x;  for (j=0; j < n; j++) {    x[j]/=Lx[Lp[j]];    for (p=Lp[j] + 1; p < Lp[j + 1]; p++) {      x[Li[p]]-=Lx[p] * x[j];    }  }  return true;}  }
class C{  @Override public TextAnnotation annotateTextAnnotation(TextAnnotation ta,boolean replaceExistingViews) throws AnnotatorException {  for (  String key : getAvailableViews())   addView(ta,key);  return ta;}  }
class C{  @SuppressWarnings("unchecked") private static void addPrivateFieldsAccessors(ClassNode node){  Set<ASTNode> accessedFields=(Set<ASTNode>)node.getNodeMetaData(StaticTypesMarker.PV_FIELDS_ACCESS);  Set<ASTNode> mutatedFields=(Set<ASTNode>)node.getNodeMetaData(StaticTypesMarker.PV_FIELDS_MUTATION);  if (accessedFields == null && mutatedFields == null)   return;  Map<String,MethodNode> privateFieldAccessors=(Map<String,MethodNode>)node.getNodeMetaData(PRIVATE_FIELDS_ACCESSORS);  Map<String,MethodNode> privateFieldMutators=(Map<String,MethodNode>)node.getNodeMetaData(PRIVATE_FIELDS_MUTATORS);  if (privateFieldAccessors != null || privateFieldMutators != null) {    return;  }  int acc=-1;  privateFieldAccessors=accessedFields != null ? new HashMap<String,MethodNode>() : null;  privateFieldMutators=mutatedFields != null ? new HashMap<String,MethodNode>() : null;  final int access=Opcodes.ACC_STATIC | Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC;  for (  FieldNode fieldNode : node.getFields()) {    boolean generateAccessor=accessedFields != null && accessedFields.contains(fieldNode);    boolean generateMutator=mutatedFields != null && mutatedFields.contains(fieldNode);    if (generateAccessor) {      acc++;      Parameter param=new Parameter(node.getPlainNodeReference(),"$that");      Expression receiver=fieldNode.isStatic() ? new ClassExpression(node) : new VariableExpression(param);      Statement stmt=new ExpressionStatement(new PropertyExpression(receiver,fieldNode.getName()));      MethodNode accessor=node.addMethod("pfaccess$" + acc,access,fieldNode.getOriginType(),new Parameter[]{param},ClassNode.EMPTY_ARRAY,stmt);      privateFieldAccessors.put(fieldNode.getName(),accessor);    }    if (generateMutator) {      if (!generateAccessor)       acc++;      Parameter param=new Parameter(node.getPlainNodeReference(),"$that");      Expression receiver=fieldNode.isStatic() ? new ClassExpression(node) : new VariableExpression(param);      Parameter value=new Parameter(fieldNode.getOriginType(),"$value");      Statement stmt=GeneralUtils.assignS(new PropertyExpression(receiver,fieldNode.getName()),new VariableExpression(value));      MethodNode mutator=node.addMethod("pfaccess$0" + acc,access,fieldNode.getOriginType(),new Parameter[]{param,value},ClassNode.EMPTY_ARRAY,stmt);      privateFieldMutators.put(fieldNode.getName(),mutator);    }  }  if (privateFieldAccessors != null)   node.setNodeMetaData(PRIVATE_FIELDS_ACCESSORS,privateFieldAccessors);  if (privateFieldMutators != null)   node.setNodeMetaData(PRIVATE_FIELDS_MUTATORS,privateFieldMutators);}  }
class C{  public PathImpl createRoot(){  return getWrappedPath().createRoot();}  }
class C{  public URLLabel(final URL url,final String display){  this(url.toExternalForm(),display);}  }
class C{  public final void testSetRegex(){  RegexValidator regexValidator=new RegexValidator("foo",Pattern.compile("."));  regexValidator.setRegex(REGEX);  assertEquals(REGEX,regexValidator.getRegex());}  }
class C{  public DatastoreV1.Entity mockPhotoEntity(){  return mockPhotoEntity("user_id");}  }
class C{  private void logUpdateServiceParameters(DataService dataService,Product product,Parameter parameter){  String parameterValue="";  if (parameter.getParameterDefinition().getValueType().equals(ParameterValueType.BOOLEAN)) {    if (parameter.getBooleanValue()) {      parameterValue=BOOLEANVALUEYES;    } else {      parameterValue=BOOLEANVALUENO;    }  } else   if (parameter.getParameterDefinition().getValueType().equals(ParameterValueType.ENUMERATION) && parameter.getValue() != null && !parameter.getValue().isEmpty()) {    parameterValue=localizer.getLocalizedTextFromDatabase(dm.getCurrentUser().getLocale(),parameter.getParameterOption(parameter.getValue()).getKey(),LocalizedObjectTypes.OPTION_PARAMETER_DEF_DESC);  } else {    parameterValue=parameter.getValue();  }  serviceAudit.updateServiceParameters(dataService,product,parameter.getParameterDefinition().getParameterId(),parameterValue,parameter.isConfigurable());}  }
class C{  public Anonymous_extendedStateMachine_1_ createAnonymous_extendedStateMachine_1_(){  Anonymous_extendedStateMachine_1_Impl anonymous_extendedStateMachine_1_=new Anonymous_extendedStateMachine_1_Impl();  return anonymous_extendedStateMachine_1_;}  }
class C{  @Deprecated static public TrafficController instance(){  if (self == null) {    if (log.isDebugEnabled()) {      log.debug("creating a new TrafficController object");    }    self=new TrafficController();  }  return self;}  }
class C{  void incrementTakeSidePutPermitsWithoutNotify(){}  }
class C{  public Boolean isFileOwner(){  return fileOwner;}  }
class C{  void addMemory(){  if ((textMemory.getText()).trim().length() <= 0) {    JOptionPane.showMessageDialog(this,rb.getString("Error11"),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    return;  }  MemoryIcon l=new MemoryIcon("   ",this);  l.setMemory(textMemory.getText().trim());  Memory xMemory=l.getMemory();  if (xMemory != null) {    String uname=xMemory.getUserName();    if ((uname == null) || (!(uname.equals(textMemory.getText().trim())))) {      textMemory.setText(xMemory.getSystemName());    }  }  setNextLocation(l);  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);  l.setDisplayLevel(LABELS);  l.setForeground(defaultTextColor);  setDirty(true);  putItem(l);}  }
class C{  public GenericObject first(){  return (SIPObject)super.first();}  }
class C{  public int last(){  return _data[_size - 1];}  }
class C{  @Override public void execute(String... parameters) throws IOException {  if (parameters.length < 4) {    cio.writeln(PrintHelp.FEDERATE);  } else {    LinkedList<String> plist=new LinkedList<String>(Arrays.asList(parameters));    plist.remove();    boolean distinct=getOptionalParamValue(plist,"distinct",false);    boolean readonly=getOptionalParamValue(plist,"readonly",true);    if (distinctValues(plist)) {      String fedID=plist.pop();      federate(distinct,readonly,fedID,plist);    } else {      cio.writeError("Duplicate repository id's specified.");    }  }}  }
class C{  private boolean isInternalFrameSystemMenu(){  String actionCommand=menuItem.getActionCommand();  if ((actionCommand == "Close") || (actionCommand == "Minimize") || (actionCommand == "Restore")|| (actionCommand == "Maximize")) {    return true;  } else {    return false;  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  ApacheLogParseMapOutputOperator oper=new ApacheLogParseMapOutputOperator();  CollectorTestSink sink=new CollectorTestSink();  oper.output.setSink(sink);  oper.setRegexGroups(new String[]{null,"ipAddr",null,"userId","date","url","httpCode","bytes",null,"agent"});  String token="127.0.0.1 - - [04/Apr/2013:17:17:21 -0700] \"GET /favicon.ico HTTP/1.1\" 404 498 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31\"";  oper.setup(null);  oper.beginWindow(0);  oper.data.process(token);  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,sink.collectedTuples.size());  Map<String,Object> map=(Map<String,Object>)sink.collectedTuples.get(0);  log.debug("map {}",map);  Assert.assertEquals("Size of map is 7",7,map.size());  Assert.assertEquals("checking ip","127.0.0.1",map.get("ipAddr"));  Assert.assertEquals("checking userid","-",map.get("userId"));  Assert.assertEquals("checking date","04/Apr/2013:17:17:21 -0700",map.get("date"));  Assert.assertEquals("checking url","/favicon.ico",map.get("url"));  Assert.assertEquals("checking http code","404",map.get("httpCode"));  Assert.assertEquals("checking bytes","498",map.get("bytes"));  Assert.assertEquals("checking agent","Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31",map.get("agent"));}  }
class C{  public void testBug7952() throws Exception {  Properties props=new Driver().parseURL(BaseTestCase.dbUrl,null);  props.setProperty("autoReconnect","true");  String host=props.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY);  if (!NonRegisteringDriver.isHostPropertiesList(host)) {    String port=props.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY,"3306");    host=host + ":" + port;  }  host=host + "," + host;  props.remove("PORT");  props.remove("HOST");  props.setProperty("queriesBeforeRetryMaster","10");  props.setProperty("maxReconnects","1");  Connection failoverConnection=null;  Connection killerConnection=getConnectionWithProps((String)null);  try {    failoverConnection=getConnectionWithProps("jdbc:mysql://" + host + "/",props);    failoverConnection.setAutoCommit(false);    String failoverConnectionId=getSingleIndexedValueWithQuery(failoverConnection,1,"SELECT CONNECTION_ID()").toString();    System.out.println("Connection id: " + failoverConnectionId);    killConnection(killerConnection,failoverConnectionId);    Thread.sleep(3000);    try {      failoverConnection.createStatement().executeQuery("SELECT 1");    } catch (    SQLException sqlEx) {      assertTrue("08S01".equals(sqlEx.getSQLState()));    }    ((com.mysql.jdbc.Connection)failoverConnection).setFailedOver(true);    failoverConnection.setAutoCommit(true);    String failedConnectionId=getSingleIndexedValueWithQuery(failoverConnection,1,"SELECT CONNECTION_ID()").toString();    System.out.println("Failed over connection id: " + failedConnectionId);    ((com.mysql.jdbc.Connection)failoverConnection).setFailedOver(true);    for (int i=0; i < 30; i++) {      failoverConnection.setAutoCommit(true);      System.out.println(getSingleIndexedValueWithQuery(failoverConnection,1,"SELECT CONNECTION_ID()"));      failoverConnection.setAutoCommit(true);    }    String fallbackConnectionId=getSingleIndexedValueWithQuery(failoverConnection,1,"SELECT CONNECTION_ID()").toString();    System.out.println("fallback connection id: " + fallbackConnectionId);  }  finally {    if (failoverConnection != null) {      failoverConnection.close();    }  }}  }
class C{  public HistogramModel(List<double[]> data,List<String> dataNames,int bins){  this(data,dataNames,bins,"","","");}  }
class C{  public FloatValue(short unitType,float floatValue){  this.unitType=unitType;  this.floatValue=floatValue;}  }
class C{  public GrassLand(){  super();}  }
class C{  public void validate(){  validateStructure(m_root);  validateMetrics(m_root);  int freeCount=0;  DynamicTreeNode freeNode=m_freeList != NULL_NODE ? m_nodes[m_freeList] : null;  while (freeNode != null) {    assert (0 <= freeNode.id && freeNode.id < m_nodeCapacity);    assert (freeNode == m_nodes[freeNode.id]);    freeNode=freeNode.parent;    ++freeCount;  }  assert (getHeight() == computeHeight());  assert (m_nodeCount + freeCount == m_nodeCapacity);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.568 -0500",hash_original_method="451981095A31CF98AA2EA47B21E89F45",hash_generated_method="C2609DB0CA95220C32D6204568743EA7") public static final HashMap readMapXml(InputStream in) throws XmlPullParserException, java.io.IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (HashMap)readValueXml(parser,new String[1]);}  }
class C{  public void testUnderscore_BEANUTILS_302(){  String value="first_value,second_value";  ArrayConverter converter=new ArrayConverter(String[].class,new StringConverter());  String[] result=(String[])converter.convert(String[].class,value);  assertNotNull("result.null",result);  assertEquals("result.length",4,result.length);  assertEquals("result[0]","first",result[0]);  assertEquals("result[1]","value",result[1]);  assertEquals("result[2]","second",result[2]);  assertEquals("result[3]","value",result[3]);  converter.setAllowedChars(new char[]{'.','-','_'});  result=(String[])converter.convert(String[].class,value);  assertNotNull("result.null",result);  assertEquals("result.length",2,result.length);  assertEquals("result[0]","first_value",result[0]);  assertEquals("result[1]","second_value",result[1]);}  }
class C{  @Bean public Queue deadLetterQueue(){  return QueueBuilder.nonDurable(amqpProperties.getDeadLetterQueue()).withArguments(getTTLMaxArgs()).build();}  }
class C{  public MutableDateTime toMutableDateTime(){  return new MutableDateTime(getMillis(),getZone());}  }
class C{  @Override public void clearOutputSensors(){  _outputSensorList=new ArrayList<>();}  }
class C{  public int popInt(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Integer value=(Integer)wrapper.getValue();  return value.intValue();}  }
class C{  public Builder doNotBlockTouches(){  showcaseView.setBlocksTouches(false);  return this;}  }
class C{  public static void checkSharedFSFailoverReplaced(CoreContainer cc,CoreDescriptor desc){  ZkController zkController=cc.getZkController();  String thisCnn=zkController.getCoreNodeName(desc);  String thisBaseUrl=zkController.getBaseUrl();  log.debug("checkSharedFSFailoverReplaced running for coreNodeName={} baseUrl={}",thisCnn,thisBaseUrl);  Map<String,Slice> slicesMap=zkController.getClusterState().getSlicesMap(desc.getCloudDescriptor().getCollectionName());  if (slicesMap != null) {    for (    Slice slice : slicesMap.values()) {      for (      Replica replica : slice.getReplicas()) {        String cnn=replica.getName();        String baseUrl=replica.getStr(ZkStateReader.BASE_URL_PROP);        log.debug("compare against coreNodeName={} baseUrl={}",cnn,baseUrl);        if (thisCnn != null && thisCnn.equals(cnn) && !thisBaseUrl.equals(baseUrl)) {          if (cc.getCoreNames().contains(desc.getName())) {            cc.unload(desc.getName());          }          File instanceDir=new File(desc.getInstanceDir());          try {            FileUtils.deleteDirectory(instanceDir);          } catch (          IOException e) {            SolrException.log(log,"Failed to delete instance dir for core:" + desc.getName() + " dir:"+ instanceDir.getAbsolutePath());          }          log.error("",new SolrException(ErrorCode.SERVER_ERROR,"Will not load SolrCore " + desc.getName() + " because it has been replaced due to failover."));          throw new SolrException(ErrorCode.SERVER_ERROR,"Will not load SolrCore " + desc.getName() + " because it has been replaced due to failover.");        }      }    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MeterPlot)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  MeterPlot that=(MeterPlot)obj;  if (!ObjectUtilities.equal(this.units,that.units)) {    return false;  }  if (!ObjectUtilities.equal(this.range,that.range)) {    return false;  }  if (!ObjectUtilities.equal(this.intervals,that.intervals)) {    return false;  }  if (!PaintUtilities.equal(this.dialOutlinePaint,that.dialOutlinePaint)) {    return false;  }  if (this.shape != that.shape) {    return false;  }  if (!PaintUtilities.equal(this.dialBackgroundPaint,that.dialBackgroundPaint)) {    return false;  }  if (!PaintUtilities.equal(this.needlePaint,that.needlePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.valueFont,that.valueFont)) {    return false;  }  if (!PaintUtilities.equal(this.valuePaint,that.valuePaint)) {    return false;  }  if (!PaintUtilities.equal(this.tickPaint,that.tickPaint)) {    return false;  }  if (this.tickSize != that.tickSize) {    return false;  }  if (this.tickLabelsVisible != that.tickLabelsVisible) {    return false;  }  if (!ObjectUtilities.equal(this.tickLabelFont,that.tickLabelFont)) {    return false;  }  if (!PaintUtilities.equal(this.tickLabelPaint,that.tickLabelPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.tickLabelFormat,that.tickLabelFormat)) {    return false;  }  if (this.drawBorder != that.drawBorder) {    return false;  }  if (this.meterAngle != that.meterAngle) {    return false;  }  return true;}  }
class C{  public final int readInt() throws IOException {  int ch1=in.read();  int ch2=in.read();  int ch3=in.read();  int ch4=in.read();  if ((ch1 | ch2 | ch3| ch4) < 0)   throw new EOFException();  return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4 << 0));}  }
class C{  public float toFloat(){  return TypeFormat.parseFloat(this);}  }
class C{  public T caseFunctionTypeExprOrRef(FunctionTypeExprOrRef object){  return null;}  }
class C{  public static byte[] concatenate(byte[]... arrays){  if ((arrays == null) || (arrays.length == 0) || ((arrays.length == 1) && (arrays[0] == null))) {    return null;  }  if (arrays.length == 1) {    return arrays[0].clone();  }  int joinedLength=0;  for (  final byte[] array : arrays) {    if (array != null) {      joinedLength+=array.length;    }  }  byte[] joinedArray=new byte[joinedLength];  int destinationIndex=0;  for (  final byte[] array : arrays) {    if (array != null) {      System.arraycopy(array,0,joinedArray,destinationIndex,array.length);      destinationIndex+=array.length;    }  }  return joinedArray;}  }
class C{  public Chapter(String identifier,String title){  this.identifier=identifier;  this.title=title;}  }
class C{  private void prepareFramebuffer(int width,int height){  GlUtil.checkGlError("start");  int[] values=new int[1];  GLES20.glGenTextures(1,values,0);  GlUtil.checkGlError("glGenTextures");  mOffscreenTexture=values[0];  Log.i(TAG,"prepareFramebuffer mOffscreenTexture:" + mOffscreenTexture);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mOffscreenTexture);  GlUtil.checkGlError("glBindTexture");  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_RGBA,width,height,0,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,null);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  GlUtil.checkGlError("glTexParameter");  GLES20.glGenFramebuffers(1,values,0);  GlUtil.checkGlError("glGenFramebuffers");  mFramebuffer=values[0];  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,mFramebuffer);  GlUtil.checkGlError("glBindFramebuffer " + mFramebuffer);  GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,GLES20.GL_COLOR_ATTACHMENT0,GLES20.GL_TEXTURE_2D,mOffscreenTexture,0);  int status=GLES20.glCheckFramebufferStatus(GLES20.GL_FRAMEBUFFER);  if (status != GLES20.GL_FRAMEBUFFER_COMPLETE) {    throw new RuntimeException("Framebuffer not complete, status=" + status);  }  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,0);  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);  GlUtil.checkGlError("glBindFramebuffer");}  }
class C{  @Override public Session createSession(final boolean transacted,final int acknowledgeMode) throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createSession(" + transacted + ", "+ acknowledgeMode+ ")");  }  checkClosed();  return allocateConnection(transacted,acknowledgeMode,type);}  }
class C{  @Override protected void initializeWorkList(){  for (Enumeration<DF_Equation> e=getEquations(); e.hasMoreElements(); ) {    DF_Equation eq=e.nextElement();    for (    DF_LatticeCell operand : eq.getOperands()) {      if (operand instanceof ObjectCell) {        if (!((ObjectCell)operand).isTOP()) {          addToWorkList(eq);          break;        }      } else {        if (!((ArrayCell)operand).isTOP()) {          addToWorkList(eq);          break;        }      }    }  }}  }
class C{  public static <T extends Identifyable>T[] checkIds(@NonNull T... items){  for (  T item : items) {    checkId(item);  }  return items;}  }
class C{  public Object createFromCapabilities(String capsFileName,AVList params){  if (WWUtil.isEmpty(capsFileName)) {    String message=Logging.getMessage("nullValue.FilePathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  WMSCapabilities caps=new WMSCapabilities(capsFileName);  try {    caps.parse();  } catch (  XMLStreamException e) {    String message=Logging.getMessage("generic.CannotParseCapabilities",capsFileName);    Logging.logger().log(Level.SEVERE,message,e);    throw new WWRuntimeException(message,e);  }  return this.doCreateFromCapabilities(caps,params);}  }
class C{  @Override protected void visitAll(@SuppressWarnings("rawtypes") List acus,RuleContext ctx){  init();  if (acus.iterator().hasNext()) {    visit((DelphiPMDNode)acus.iterator().next(),ctx);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.CONSTRAINT_TOKEN___CONSTRAINT_1:    return ((InternalEList<?>)getConstraint_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void checkInvariants(){  assert (wordsInUse == 0 || words[wordsInUse - 1] != 0);  assert (wordsInUse >= 0 && wordsInUse <= words.length);  assert (wordsInUse == words.length || words[wordsInUse] == 0);}  }
class C{  public Builder addPart(RequestBody body){  return addPart(Part.create(body));}  }
class C{  private void register(EntryImpl prevEntry,String name,IoFilter filter){  EntryImpl newEntry=new EntryImpl(prevEntry,prevEntry.nextEntry,name,filter);  try {    filter.onPreAdd(this,name,newEntry.getNextFilter());  } catch (  Exception e) {    throw new IoFilterLifeCycleException("onPreAdd(): " + name + ':'+ filter+ " in "+ getSession(),e);  }  prevEntry.nextEntry.prevEntry=newEntry;  prevEntry.nextEntry=newEntry;  name2entry.put(name,newEntry);  try {    filter.onPostAdd(this,name,newEntry.getNextFilter());  } catch (  Exception e) {    deregister0(newEntry);    throw new IoFilterLifeCycleException("onPostAdd(): " + name + ':'+ filter+ " in "+ getSession(),e);  }}  }
class C{  public void incNumOverflowBytesOnDisk(long delta){  this.stats.incLong(numOverflowBytesOnDiskId,delta);}  }
class C{  public void testXmlReplacements() throws Exception {  String lookFor="test-xmlreplacement-attribute=\"test-xmlreplacement-value\"";  File serverXml=new File("target/jetty-base/etc/jetty.xml");  assertTrue(serverXml + " is not a file",serverXml.isFile());  BufferedReader serverXmlReader=new BufferedReader(new FileReader(serverXml));  for (String read=""; read != null; read=serverXmlReader.readLine()) {    if (read.contains(lookFor)) {      return;    }  }  fail("File " + serverXml + " does not contain: "+ lookFor);}  }
class C{  public void removeTagDefinition(int tagId){  getTagInfo().delete(tagId);}  }
class C{  public void onGreenButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(GREEN_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_green));      storeRequestId(requestId,GREEN_BUTTON);    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.greenbutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  public CAddDatabaseAction(final JTree projectTree){  super("Add database");  m_projectTree=Preconditions.checkNotNull(projectTree,"IE01851: Tree argument can't be null");  putValue(MNEMONIC_KEY,(int)"HK_MENU_ADD_DATABASE".charAt(0));}  }
class C{  public boolean isAIDLCallback(SootMethod method){  SootClass iInterface=Scene.v().getSootClass("android.os.IInterface");  SootClass declaringClass=method.getDeclaringClass();  Set<SootClass> parents=SootUtils.getParents(declaringClass);  if (parents.contains(iInterface)) {    for (    SootClass parent : parents) {      if (!parent.isInterface() || !Scene.v().getActiveHierarchy().isInterfaceDirectSubinterfaceOf(parent,iInterface))       continue;      if (parent.declaresMethodByName(method.getName()))       return true;    }  }  return false;}  }
class C{  public synchronized void removeDatabaseObject(Session session,DbObject obj){  checkWritingAllowed();  String objName=obj.getName();  int type=obj.getType();  HashMap<String,DbObject> map=getMap(type);  if (SysProperties.CHECK && !map.containsKey(objName)) {    DbException.throwInternalError("not found: " + objName);  }  Comment comment=findComment(obj);  lockMeta(session);  if (comment != null) {    removeDatabaseObject(session,comment);  }  int id=obj.getId();  obj.removeChildrenAndResources(session);  map.remove(objName);  removeMeta(session,id);}  }
class C{  protected final boolean isShowing(){synchronized (getPeerTreeLock()) {    if (isVisible()) {      final LWContainerPeer<?,?> container=getContainerPeer();      return (container == null) || container.isShowing();    }  }  return false;}  }
class C{  public Long call() throws Exception {  final long _begin=System.currentTimeMillis();  textIndexer.index(capacity,itr);  final long elapsed=System.currentTimeMillis() - _begin;  return elapsed;}  }
class C{  public void testXMLCreate() throws JDOMException, IOException {  Assert.assertEquals("test file name","OperationsJUnitTestTrainRoster.xml",TrainManagerXml.instance().getOperationsFileName());  RouteManager rmanager=RouteManager.instance();  Route A=rmanager.newRoute("A");  Route B=rmanager.newRoute("B");  Route C=rmanager.newRoute("C");  Assert.assertEquals("no locations in route A",0,A.getLocationsBySequenceList().size());  Assert.assertEquals("no locations in route B",0,B.getLocationsBySequenceList().size());  Assert.assertEquals("no locations in route C",0,C.getLocationsBySequenceList().size());  LocationManager lmanager=LocationManager.instance();  Location Arlington=lmanager.newLocation("Arlington");  Location Westford=lmanager.newLocation("Westford");  Location Bedford=lmanager.newLocation("Bedford");  RouteLocation startA=A.addLocation(Westford);  startA.setTrainIconX(125);  startA.setTrainIconY(175);  RouteLocation startB=B.addLocation(Arlington);  startB.setTrainIconX(175);  startB.setTrainIconY(175);  RouteLocation startC=C.addLocation(Bedford);  startC.setTrainIconX(25);  startC.setTrainIconY(200);  RouteLocation midC=C.addLocation(Arlington);  RouteLocation endC=C.addLocation(Westford);  TrainManager manager=TrainManager.instance();  List<Train> temptrainList=manager.getTrainsByIdList();  Assert.assertEquals("Starting Number of Trains",0,temptrainList.size());  Train t1=manager.newTrain("Test Number 1");  Train t2=manager.newTrain("Test Number 2");  Train t3=manager.newTrain("Test Number 3");  temptrainList=manager.getTrainsByIdList();  Assert.assertEquals("New Number of Trains",3,temptrainList.size());  EngineManager eManager=EngineManager.instance();  Engine e1=eManager.newEngine("UP","1");  Engine e2=eManager.newEngine("UP","2");  Engine e3=eManager.newEngine("UP","3");  t3.setBuildEnabled(true);  t3.setBuildFailed(false);  t3.setBuildTrainNormalEnabled(false);  t3.setBuilt(true);  t3.setBuiltEndYear("1950");  t3.setBuiltStartYear("1925");  t3.setCabooseRoad("t3 X caboose road");  t3.setComment("t3 X comment");  t3.setDescription("t3 X description");  t3.setEngineModel("t3 X engine model");  t3.setEngineRoad("t3 X engine road");  t3.setLeadEngine(e1);  t3.setLoadOption("t3 X load option");  t3.setManifestLogoURL("t3 X pathName");  t3.setNumberEngines("7");  t3.setOwnerOption("t3 X owner option");  t3.setRailroadName("t3 X railroad name");  t3.setRequirements(Train.CABOOSE);  t3.setRoadOption("t3 X raod option");  t3.setRoute(B);  t3.setStatusCode(Train.CODE_UNKNOWN);  TrainManagerXml.instance().writeOperationsFile();  Train t4=manager.newTrain("Test Number 4");  Train t5=manager.newTrain("Test Number 5");  Train t6=manager.newTrain("Test Number 6");  Assert.assertNotNull("train 1",t1);  Assert.assertNotNull("train 2",t2);  Assert.assertNotNull("train 3",t3);  Assert.assertNotNull("train 4",t4);  Assert.assertNotNull("train 5",t5);  Assert.assertNotNull("train 6",t6);  t1.setBuildEnabled(true);  t1.setBuildFailed(true);  t1.setBuildTrainNormalEnabled(true);  t1.setBuilt(false);  t1.setBuiltEndYear("1956");  t1.setBuiltStartYear("1932");  t1.setCabooseRoad("t1 caboose road");  t1.setComment("t1 comment");  t1.setCurrentLocation(startC);  t1.setDepartureTime("1","35");  t1.setDescription("t1 description");  t1.setEngineModel("t1 engine model");  t1.setEngineRoad("t1 engine road");  t1.setLeadEngine(e1);  t1.setLoadOption("t1 load option");  t1.setManifestLogoURL("t1 pathName");  t1.setNumberEngines("1");  t1.setOwnerOption("t1 owner option");  t1.setRailroadName("t1 railroad name");  t1.setRequirements(Train.NO_CABOOSE_OR_FRED);  t1.setRoadOption("t1 raod option");  t1.setRoute(C);  t1.setSecondLegCabooseRoad("t1 second leg caboose road");  t1.setSecondLegEndLocation(midC);  t1.setSecondLegEngineModel("t1 second leg engine model");  t1.setSecondLegEngineRoad("t1 second leg engine road");  t1.setSecondLegNumberEngines("5");  t1.setSecondLegOptions(Train.ADD_CABOOSE);  t1.setSecondLegStartLocation(endC);  t1.setSendCarsToTerminalEnabled(true);  t1.setStatusCode(Train.CODE_UNKNOWN);  t1.setSwitchListStatus(Train.PRINTED);  t1.setThirdLegCabooseRoad("t1 third leg caboose road");  t1.setThirdLegEndLocation(startC);  t1.setThirdLegEngineModel("t1 third leg engine model");  t1.setThirdLegEngineRoad("t1 third leg engine road");  t1.setThirdLegNumberEngines("3");  t1.setThirdLegOptions(Train.HELPER_ENGINES);  t1.setThirdLegStartLocation(midC);  t1.addTrainSkipsLocation(midC.getId());  t3.setBuildEnabled(false);  t3.setBuildFailed(true);  t3.setBuildTrainNormalEnabled(false);  t3.setBuilt(false);  t3.setBuiltEndYear("1955");  t3.setBuiltStartYear("1931");  t3.setCabooseRoad("t3 caboose road");  t3.setComment("t3 comment");  t3.setCurrentLocation(startA);  t3.setDepartureTime("4","55");  t3.setDescription("t3 description");  t3.setEngineModel("t3 engine model");  t3.setEngineRoad("t3 engine road");  t3.setLeadEngine(e2);  t3.setLoadOption("t3 load option");  t3.setManifestLogoURL("t3 pathName");  t3.setNumberEngines("1");  t3.setOwnerOption("t3 owner option");  t3.setRailroadName("t3 railroad name");  t3.setRequirements(Train.NO_CABOOSE_OR_FRED);  t3.setRoadOption("t3 raod option");  t3.setRoute(A);  t3.setStatusCode(Train.CODE_UNKNOWN);  t5.setBuildEnabled(true);  t5.setBuildFailed(false);  t5.setBuildTrainNormalEnabled(false);  t5.setBuilt(true);  t5.setBuiltEndYear("1954");  t5.setBuiltStartYear("1930");  t5.setCabooseRoad("t5 caboose road");  t5.setComment("t5 comment");  t5.setCurrentLocation(startB);  t5.setDepartureTime("23","15");  t5.setDescription("t5 description");  t5.setEngineModel("t5 engine model");  t5.setEngineRoad("t5 engine road");  t5.setLeadEngine(e3);  t5.setLoadOption("t5 load option");  t5.setManifestLogoURL("t5 pathName");  t5.setNumberEngines("1");  t5.setOwnerOption("t5 owner option");  t5.setRailroadName("t5 railroad name");  t5.setRequirements(Train.NO_CABOOSE_OR_FRED);  t5.setRoadOption("t5 raod option");  t5.setRoute(B);  t5.setStatusCode(Train.CODE_UNKNOWN);  TrainManagerXml.instance().writeOperationsFile();  Assert.assertEquals("t1 build",true,t1.isBuildEnabled());  Assert.assertEquals("t1 build failed",true,t1.getBuildFailed());  Assert.assertEquals("t1 build normal",true,t1.isBuildTrainNormalEnabled());  Assert.assertEquals("t1 built",false,t1.isBuilt());  Assert.assertEquals("t1 built end year","1956",t1.getBuiltEndYear());  Assert.assertEquals("t1 built start year","1932",t1.getBuiltStartYear());  Assert.assertEquals("t1 caboose roadr","t1 caboose road",t1.getCabooseRoad());  Assert.assertEquals("t1 comment","t1 comment",t1.getComment());  Assert.assertEquals("t1 current location name","Bedford",t1.getCurrentLocationName());  Assert.assertEquals("t1 departure hour","01",t1.getDepartureTimeHour());  Assert.assertEquals("t1 departure minute","35",t1.getDepartureTimeMinute());  Assert.assertEquals("t1 engine model","t1 engine model",t1.getEngineModel());  Assert.assertEquals("t1 engine road","t1 engine road",t1.getEngineRoad());  Assert.assertNotNull("t1 has a lead engine",t1.getLeadEngine());  Assert.assertEquals("t1 lead engine number","1",t1.getLeadEngine().getNumber());  Assert.assertEquals("t1 load option","t1 load option",t1.getLoadOption());  Assert.assertEquals("t1 path name","t1 pathName",t1.getManifestLogoURL());  Assert.assertEquals("t1 number of engines","1",t1.getNumberEngines());  Assert.assertEquals("t1 Owner option","t1 owner option",t1.getOwnerOption());  Assert.assertEquals("t1 railroad name","t1 railroad name",t1.getRailroadName());  Assert.assertEquals("t1 requirements",Train.NO_CABOOSE_OR_FRED,t1.getRequirements());  Assert.assertEquals("t1 road option","t1 raod option",t1.getRoadOption());  Assert.assertEquals("t1 route",C,t1.getRoute());  Assert.assertEquals("t1 second leg caboose road","t1 second leg caboose road",t1.getSecondLegCabooseRoad());  Assert.assertEquals("t1 second leg end location",midC,t1.getSecondLegEndLocation());  Assert.assertEquals("t1 second leg engine model","t1 second leg engine model",t1.getSecondLegEngineModel());  Assert.assertEquals("t1 second leg engine road","t1 second leg engine road",t1.getSecondLegEngineRoad());  Assert.assertEquals("t1 second leg number of engines","5",t1.getSecondLegNumberEngines());  Assert.assertEquals("t1 second leg options",Train.ADD_CABOOSE,t1.getSecondLegOptions());  Assert.assertEquals("t1 second leg start location",endC,t1.getSecondLegStartLocation());  Assert.assertEquals("t1 send cars to terminal",true,t1.isSendCarsToTerminalEnabled());  Assert.assertEquals("t1 status",Train.UNKNOWN,t1.getStatus());  Assert.assertEquals("t1 switch list status",Train.PRINTED,t1.getSwitchListStatus());  Assert.assertEquals("t1 third leg caboose road","t1 third leg caboose road",t1.getThirdLegCabooseRoad());  Assert.assertEquals("t1 third leg end location",startC,t1.getThirdLegEndLocation());  Assert.assertEquals("t1 third leg engine model","t1 third leg engine model",t1.getThirdLegEngineModel());  Assert.assertEquals("t1 third leg engine road","t1 third leg engine road",t1.getThirdLegEngineRoad());  Assert.assertEquals("t1 third leg number of engines","3",t1.getThirdLegNumberEngines());  Assert.assertEquals("t1 third leg options",Train.HELPER_ENGINES,t1.getThirdLegOptions());  Assert.assertEquals("t1 third leg start location",midC,t1.getThirdLegStartLocation());  Assert.assertEquals("t1 skips location",false,t1.skipsLocation(startC.getId()));  Assert.assertEquals("t1 skips location",true,t1.skipsLocation(midC.getId()));  Assert.assertEquals("t1 skips location",false,t1.skipsLocation(endC.getId()));  Assert.assertEquals("t3 build",false,t3.isBuildEnabled());  Assert.assertEquals("t3 build failed",true,t3.getBuildFailed());  Assert.assertEquals("t3 build normal",false,t3.isBuildTrainNormalEnabled());  Assert.assertEquals("t3 built",false,t3.isBuilt());  Assert.assertEquals("t3 built end year","1955",t3.getBuiltEndYear());  Assert.assertEquals("t3 built start year","1931",t3.getBuiltStartYear());  Assert.assertEquals("t3 caboose roadr","t3 caboose road",t3.getCabooseRoad());  Assert.assertEquals("t3 comment","t3 comment",t3.getComment());  Assert.assertEquals("t3 current location name","Westford",t3.getCurrentLocationName());  Assert.assertEquals("t3 departure hour","04",t3.getDepartureTimeHour());  Assert.assertEquals("t3 departure minute","55",t3.getDepartureTimeMinute());  Assert.assertEquals("t3 engine model","t3 engine model",t3.getEngineModel());  Assert.assertEquals("t3 engine road","t3 engine road",t3.getEngineRoad());  Assert.assertEquals("t3 lead engine number","2",t3.getLeadEngine().getNumber());  Assert.assertEquals("t3 load option","t3 load option",t3.getLoadOption());  Assert.assertEquals("t3 path name","t3 pathName",t3.getManifestLogoURL());  Assert.assertEquals("t3 number of engines","1",t3.getNumberEngines());  Assert.assertEquals("t3 Owner option","t3 owner option",t3.getOwnerOption());  Assert.assertEquals("t3 railroad name","t3 railroad name",t3.getRailroadName());  Assert.assertEquals("t3 requirements",Train.NO_CABOOSE_OR_FRED,t3.getRequirements());  Assert.assertEquals("t3 road option","t3 raod option",t3.getRoadOption());  Assert.assertEquals("t3 route",A,t3.getRoute());  Assert.assertEquals("t3 second leg caboose road","",t3.getSecondLegCabooseRoad());  Assert.assertEquals("t3 second leg end location",null,t3.getSecondLegEndLocation());  Assert.assertEquals("t3 second leg engine model","",t3.getSecondLegEngineModel());  Assert.assertEquals("t3 second leg engine road","",t3.getSecondLegEngineRoad());  Assert.assertEquals("t3 second leg number of engines","0",t3.getSecondLegNumberEngines());  Assert.assertEquals("t3 second leg options",Train.NO_CABOOSE_OR_FRED,t3.getSecondLegOptions());  Assert.assertEquals("t3 second leg start location",null,t3.getSecondLegStartLocation());  Assert.assertEquals("t3 send cars to terminal",false,t3.isSendCarsToTerminalEnabled());  Assert.assertEquals("t3 status",Train.UNKNOWN,t3.getStatus());  Assert.assertEquals("t3 switch list status",Train.UNKNOWN,t3.getSwitchListStatus());  Assert.assertEquals("t3 third leg caboose road","",t3.getThirdLegCabooseRoad());  Assert.assertEquals("t3 third leg end location",null,t3.getThirdLegEndLocation());  Assert.assertEquals("t3 third leg engine model","",t3.getThirdLegEngineModel());  Assert.assertEquals("t3 third leg engine road","",t3.getThirdLegEngineRoad());  Assert.assertEquals("t3 third leg number of engines","0",t3.getThirdLegNumberEngines());  Assert.assertEquals("t3 third leg options",Train.NO_CABOOSE_OR_FRED,t3.getThirdLegOptions());  Assert.assertEquals("t3 third leg start location",null,t3.getThirdLegStartLocation());  Assert.assertEquals("t5 build",true,t5.isBuildEnabled());  Assert.assertEquals("t5 build failed",false,t5.getBuildFailed());  Assert.assertEquals("t5 built",true,t5.isBuilt());  Assert.assertEquals("t5 built end year","1954",t5.getBuiltEndYear());  Assert.assertEquals("t5 built start year","1930",t5.getBuiltStartYear());  Assert.assertEquals("t5 caboose roadr","t5 caboose road",t5.getCabooseRoad());  Assert.assertEquals("t5 comment","t5 comment",t5.getComment());  Assert.assertEquals("t5 current location name","Arlington",t5.getCurrentLocationName());  Assert.assertEquals("t5 departure hour","23",t5.getDepartureTimeHour());  Assert.assertEquals("t5 departure minute","15",t5.getDepartureTimeMinute());  Assert.assertEquals("t5 engine model","t5 engine model",t5.getEngineModel());  Assert.assertEquals("t5 engine road","t5 engine road",t5.getEngineRoad());  Assert.assertEquals("t5 lead engine number","3",t5.getLeadEngine().getNumber());  Assert.assertEquals("t5 load option","t5 load option",t5.getLoadOption());  Assert.assertEquals("t5 path name","t5 pathName",t5.getManifestLogoURL());  Assert.assertEquals("t5 number of engines","1",t5.getNumberEngines());  Assert.assertEquals("t5 Owner option","t5 owner option",t5.getOwnerOption());  Assert.assertEquals("t5 railroad name","t5 railroad name",t5.getRailroadName());  Assert.assertEquals("t5 requirements",Train.NO_CABOOSE_OR_FRED,t5.getRequirements());  Assert.assertEquals("t5 road option","t5 raod option",t5.getRoadOption());  Assert.assertEquals("t5 route",B,t5.getRoute());  Assert.assertEquals("t5 status",Train.UNKNOWN,t5.getStatus());  manager.dispose();  Setup.setPanelName("");  manager=TrainManager.instance();  temptrainList=manager.getTrainsByIdList();  Assert.assertEquals("Starting Number of Trains",0,temptrainList.size());  t1=manager.getTrainByName("Test Number 1");  t2=manager.getTrainByName("Test Number 2");  t3=manager.getTrainByName("Test Number 3");  t4=manager.getTrainByName("Test Number 4");  t5=manager.getTrainByName("Test Number 5");  t6=manager.getTrainByName("Test Number 6");  Assert.assertNull("train 1",t1);  Assert.assertNull("train 2",t2);  Assert.assertNull("train 3",t3);  Assert.assertNull("train 4",t4);  Assert.assertNull("train 5",t5);  Assert.assertNull("train 6",t6);  TrainManagerXml.instance().readFile(TrainManagerXml.instance().getDefaultOperationsFilename());  temptrainList=manager.getTrainsByIdList();  Assert.assertEquals("Number of Trains",6,temptrainList.size());  t1=manager.getTrainByName("Test Number 1");  t2=manager.getTrainByName("Test Number 2");  t3=manager.getTrainByName("Test Number 3");  t4=manager.getTrainByName("Test Number 4");  t5=manager.getTrainByName("Test Number 5");  t6=manager.getTrainByName("Test Number 6");  Assert.assertNotNull("train 1",t1);  Assert.assertNotNull("train 2",t2);  Assert.assertNotNull("train 3",t3);  Assert.assertNotNull("train 4",t4);  Assert.assertNotNull("train 5",t5);  Assert.assertNotNull("train 6",t6);  Assert.assertEquals("t1 build",true,t1.isBuildEnabled());  Assert.assertEquals("t1 build failed",true,t1.getBuildFailed());  Assert.assertEquals("t1 build normal",true,t1.isBuildTrainNormalEnabled());  Assert.assertEquals("t1 built",false,t1.isBuilt());  Assert.assertEquals("t1 built end year","1956",t1.getBuiltEndYear());  Assert.assertEquals("t1 built start year","1932",t1.getBuiltStartYear());  Assert.assertEquals("t1 caboose roadr","t1 caboose road",t1.getCabooseRoad());  Assert.assertEquals("t1 comment","t1 comment",t1.getComment());  Assert.assertEquals("t1 current location name","Bedford",t1.getCurrentLocationName());  Assert.assertEquals("t1 departure hour","01",t1.getDepartureTimeHour());  Assert.assertEquals("t1 departure minute","35",t1.getDepartureTimeMinute());  Assert.assertEquals("t1 engine model","t1 engine model",t1.getEngineModel());  Assert.assertEquals("t1 engine road","t1 engine road",t1.getEngineRoad());  Assert.assertNotNull("t1 has a lead engine",t1.getLeadEngine());  Assert.assertEquals("t1 lead engine number","1",t1.getLeadEngine().getNumber());  Assert.assertEquals("t1 load option","t1 load option",t1.getLoadOption());  Assert.assertEquals("t1 path name","t1 pathName",t1.getManifestLogoURL());  Assert.assertEquals("t1 number of engines","1",t1.getNumberEngines());  Assert.assertEquals("t1 Owner option","t1 owner option",t1.getOwnerOption());  Assert.assertEquals("t1 railroad name","t1 railroad name",t1.getRailroadName());  Assert.assertEquals("t1 requirements",Train.NO_CABOOSE_OR_FRED,t1.getRequirements());  Assert.assertEquals("t1 road option","t1 raod option",t1.getRoadOption());  Assert.assertEquals("t1 route",C,t1.getRoute());  Assert.assertEquals("t1 second leg caboose road","t1 second leg caboose road",t1.getSecondLegCabooseRoad());  Assert.assertEquals("t1 second leg end location",midC,t1.getSecondLegEndLocation());  Assert.assertEquals("t1 second leg engine model","t1 second leg engine model",t1.getSecondLegEngineModel());  Assert.assertEquals("t1 second leg engine road","t1 second leg engine road",t1.getSecondLegEngineRoad());  Assert.assertEquals("t1 second leg number of engines","5",t1.getSecondLegNumberEngines());  Assert.assertEquals("t1 second leg options",Train.ADD_CABOOSE,t1.getSecondLegOptions());  Assert.assertEquals("t1 second leg start location",endC,t1.getSecondLegStartLocation());  Assert.assertEquals("t1 send cars to terminal",true,t1.isSendCarsToTerminalEnabled());  Assert.assertEquals("t1 status",Train.UNKNOWN,t1.getStatus());  Assert.assertEquals("t1 switch list status",Train.PRINTED,t1.getSwitchListStatus());  Assert.assertEquals("t1 third leg caboose road","t1 third leg caboose road",t1.getThirdLegCabooseRoad());  Assert.assertEquals("t1 third leg end location",startC,t1.getThirdLegEndLocation());  Assert.assertEquals("t1 third leg engine model","t1 third leg engine model",t1.getThirdLegEngineModel());  Assert.assertEquals("t1 third leg engine road","t1 third leg engine road",t1.getThirdLegEngineRoad());  Assert.assertEquals("t1 third leg number of engines","3",t1.getThirdLegNumberEngines());  Assert.assertEquals("t1 third leg options",Train.HELPER_ENGINES,t1.getThirdLegOptions());  Assert.assertEquals("t1 third leg start location",midC,t1.getThirdLegStartLocation());  Assert.assertEquals("t1 skips location",false,t1.skipsLocation(startC.getId()));  Assert.assertEquals("t1 skips location",true,t1.skipsLocation(midC.getId()));  Assert.assertEquals("t1 skips location",false,t1.skipsLocation(endC.getId()));  Assert.assertEquals("t3 build",false,t3.isBuildEnabled());  Assert.assertEquals("t3 build failed",true,t3.getBuildFailed());  Assert.assertEquals("t3 build normal",false,t3.isBuildTrainNormalEnabled());  Assert.assertEquals("t3 built",false,t3.isBuilt());  Assert.assertEquals("t3 built end year","1955",t3.getBuiltEndYear());  Assert.assertEquals("t3 built start year","1931",t3.getBuiltStartYear());  Assert.assertEquals("t3 caboose roadr","t3 caboose road",t3.getCabooseRoad());  Assert.assertEquals("t3 comment","t3 comment",t3.getComment());  Assert.assertEquals("t3 current location name","Westford",t3.getCurrentLocationName());  Assert.assertEquals("t3 departure hour","04",t3.getDepartureTimeHour());  Assert.assertEquals("t3 departure minute","55",t3.getDepartureTimeMinute());  Assert.assertEquals("t3 engine model","t3 engine model",t3.getEngineModel());  Assert.assertEquals("t3 engine road","t3 engine road",t3.getEngineRoad());  Assert.assertEquals("t3 lead engine number","2",t3.getLeadEngine().getNumber());  Assert.assertEquals("t3 load option","t3 load option",t3.getLoadOption());  Assert.assertEquals("t3 path name","t3 pathName",t3.getManifestLogoURL());  Assert.assertEquals("t3 number of engines","1",t3.getNumberEngines());  Assert.assertEquals("t3 Owner option","t3 owner option",t3.getOwnerOption());  Assert.assertEquals("t3 railroad name","t3 railroad name",t3.getRailroadName());  Assert.assertEquals("t3 requirements",Train.NO_CABOOSE_OR_FRED,t3.getRequirements());  Assert.assertEquals("t3 road option","t3 raod option",t3.getRoadOption());  Assert.assertEquals("t3 route",A,t3.getRoute());  Assert.assertEquals("t3 second leg caboose road","",t3.getSecondLegCabooseRoad());  Assert.assertEquals("t3 second leg end location",null,t3.getSecondLegEndLocation());  Assert.assertEquals("t3 second leg engine model","",t3.getSecondLegEngineModel());  Assert.assertEquals("t3 second leg engine road","",t3.getSecondLegEngineRoad());  Assert.assertEquals("t3 second leg number of engines","0",t3.getSecondLegNumberEngines());  Assert.assertEquals("t3 second leg options",Train.NO_CABOOSE_OR_FRED,t3.getSecondLegOptions());  Assert.assertEquals("t3 second leg start location",null,t3.getSecondLegStartLocation());  Assert.assertEquals("t3 send cars to terminal",false,t3.isSendCarsToTerminalEnabled());  Assert.assertEquals("t3 status",Train.UNKNOWN,t3.getStatus());  Assert.assertEquals("t3 switch list status",Train.UNKNOWN,t3.getSwitchListStatus());  Assert.assertEquals("t3 third leg caboose road","",t3.getThirdLegCabooseRoad());  Assert.assertEquals("t3 third leg end location",null,t3.getThirdLegEndLocation());  Assert.assertEquals("t3 third leg engine model","",t3.getThirdLegEngineModel());  Assert.assertEquals("t3 third leg engine road","",t3.getThirdLegEngineRoad());  Assert.assertEquals("t3 third leg number of engines","0",t3.getThirdLegNumberEngines());  Assert.assertEquals("t3 third leg options",Train.NO_CABOOSE_OR_FRED,t3.getThirdLegOptions());  Assert.assertEquals("t3 third leg start location",null,t3.getThirdLegStartLocation());  Assert.assertEquals("t5 build",true,t5.isBuildEnabled());  Assert.assertEquals("t5 build failed",false,t5.getBuildFailed());  Assert.assertEquals("t5 built",true,t5.isBuilt());  Assert.assertEquals("t5 built end year","1954",t5.getBuiltEndYear());  Assert.assertEquals("t5 built start year","1930",t5.getBuiltStartYear());  Assert.assertEquals("t5 caboose roadr","t5 caboose road",t5.getCabooseRoad());  Assert.assertEquals("t5 comment","t5 comment",t5.getComment());  Assert.assertEquals("t5 current location name","Arlington",t5.getCurrentLocationName());  Assert.assertEquals("t5 departure hour","23",t5.getDepartureTimeHour());  Assert.assertEquals("t5 departure minute","15",t5.getDepartureTimeMinute());  Assert.assertEquals("t5 engine model","t5 engine model",t5.getEngineModel());  Assert.assertEquals("t5 engine road","t5 engine road",t5.getEngineRoad());  Assert.assertEquals("t5 lead engine number","3",t5.getLeadEngine().getNumber());  Assert.assertEquals("t5 load option","t5 load option",t5.getLoadOption());  Assert.assertEquals("t5 path name","t5 pathName",t5.getManifestLogoURL());  Assert.assertEquals("t5 number of engines","1",t5.getNumberEngines());  Assert.assertEquals("t5 Owner option","t5 owner option",t5.getOwnerOption());  Assert.assertEquals("t5 railroad name","t5 railroad name",t5.getRailroadName());  Assert.assertEquals("t5 requirements",Train.NO_CABOOSE_OR_FRED,t5.getRequirements());  Assert.assertEquals("t5 road option","t5 raod option",t5.getRoadOption());  Assert.assertEquals("t5 route",B,t5.getRoute());  Assert.assertEquals("t5 status",Train.UNKNOWN,t5.getStatus());  manager.dispose();  manager=TrainManager.instance();  temptrainList=manager.getTrainsByIdList();  Assert.assertEquals("Starting Number of Trains",0,temptrainList.size());  TrainManagerXml.instance().setOperationsFileName("OperationsJUnitTestTrainRoster.xml.bak");  TrainManagerXml.instance().readFile(TrainManagerXml.instance().getDefaultOperationsFilename());  TrainManagerXml.instance().setOperationsFileName("OperationsJUnitTestTrainRoster.xml");  temptrainList=manager.getTrainsByIdList();  Assert.assertEquals("Number of Trains",3,temptrainList.size());  t1=manager.getTrainByName("Test Number 1");  t2=manager.getTrainByName("Test Number 2");  t3=manager.getTrainByName("Test Number 3");  t4=manager.getTrainByName("Test Number 4");  t5=manager.getTrainByName("Test Number 5");  t6=manager.getTrainByName("Test Number 6");  Assert.assertNotNull("train 1",t1);  Assert.assertNotNull("train 2",t2);  Assert.assertNotNull("train 3",t3);  Assert.assertNull("train 4",t4);  Assert.assertNull("train 5",t5);  Assert.assertNull("train 6",t6);  Assert.assertEquals("t3 build",true,t3.isBuildEnabled());  Assert.assertEquals("t3 build failed",false,t3.getBuildFailed());  Assert.assertEquals("t3 built",true,t3.isBuilt());  Assert.assertEquals("t3 built end year","1950",t3.getBuiltEndYear());  Assert.assertEquals("t3 built start year","1925",t3.getBuiltStartYear());  Assert.assertEquals("t3 caboose roadr","t3 X caboose road",t3.getCabooseRoad());  Assert.assertEquals("t3 comment","t3 X comment",t3.getComment());  Assert.assertEquals("t3 engine model","t3 X engine model",t3.getEngineModel());  Assert.assertEquals("t3 engine road","t3 X engine road",t3.getEngineRoad());  Assert.assertEquals("t3 load option","t3 X load option",t3.getLoadOption());  Assert.assertEquals("t3 path name","t3 X pathName",t3.getManifestLogoURL());  Assert.assertEquals("t3 number of engines","7",t3.getNumberEngines());  Assert.assertEquals("t3 Owner option","t3 X owner option",t3.getOwnerOption());  Assert.assertEquals("t3 railroad name","t3 X railroad name",t3.getRailroadName());  Assert.assertEquals("t3 requirements",Train.CABOOSE,t3.getRequirements());  Assert.assertEquals("t3 raod option","t3 X raod option",t3.getRoadOption());  Assert.assertEquals("t3 status",Train.UNKNOWN,t3.getStatus());}  }
class C{  public IgniteThreadPoolExecutor(int corePoolSize,int maxPoolSize,long keepAliveTime,BlockingQueue<Runnable> workQ,RejectedExecutionHandler hnd){  this(corePoolSize,maxPoolSize,keepAliveTime,workQ,new IgniteThreadFactory(null),hnd);}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final Address address,final AddressEncoding encoding){switch (encoding) {case PUBLIC_KEY:    final PublicKey publicKey=address.getPublicKey();  serializer.writeBytes(label,null == publicKey ? null : publicKey.getRaw());break;case COMPRESSED:default :serializer.writeString(label,address.getEncoded());break;}}  }
class C{  Tag(final ITreeNode<CTag> tag){  m_tag=Preconditions.checkNotNull(tag,"Error: Tag argument can not be null");  m_tag.getObject().addListener(m_listener);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAttachment[");  sb.append(getAD_Attachment_ID()).append(",Title=").append(getTitle()).append(",Entries=").append(getEntryCount());  for (int i=0; i < getEntryCount(); i++) {    if (i == 0)     sb.append(":"); else     sb.append(",");    sb.append(getEntryName(i));  }  sb.append("]");  return sb.toString();}  }
class C{  private void showNotification(boolean isGpsStarted){  if (isRecording()) {    if (isPaused()) {      stopForegroundService();    } else {      Intent intent=IntentUtils.newIntent(this,TrackDetailActivity.class).putExtra(TrackDetailActivity.EXTRA_TRACK_ID,recordingTrackId);      PendingIntent pendingIntent=TaskStackBuilder.create(this).addParentStack(TrackDetailActivity.class).addNextIntent(intent).getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);      startForegroundService(pendingIntent,R.string.track_record_notification);    }    return;  } else {    if (isGpsStarted) {      Intent intent=IntentUtils.newIntent(this,TrackListActivity.class);      PendingIntent pendingIntent=TaskStackBuilder.create(this).addNextIntent(intent).getPendingIntent(0,0);      startForegroundService(pendingIntent,R.string.gps_starting);    } else {      stopForegroundService();    }  }}  }
class C{  public void test_PBKDF2_rfc3211_64() throws Exception {  char[] password="password".toCharArray();  byte[] salt=new byte[]{(byte)0x12,(byte)0x34,(byte)0x56,(byte)0x78,(byte)0x78,(byte)0x56,(byte)0x34,(byte)0x12};  int iterations=5;  int keyLength=64;  byte[] expected=new byte[]{(byte)0xD1,(byte)0xDA,(byte)0xA7,(byte)0x86,(byte)0x15,(byte)0xF2,(byte)0x87,(byte)0xE6};  test_PBKDF2_UTF8(password,salt,iterations,keyLength,expected);  test_PBKDF2_8BIT(password,salt,iterations,keyLength,expected);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getVideoFrame().getVideoOffsetX(VideoFrame.getAspectRatioCode(getString(stack))));}  }
class C{  public void testClearBitNegativeOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=165;  byte rBytes[]={-33,-1,-1,-1,-1,-1,-1,-1,-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public Address __add__(final Object rhs){  return new Address(m_value.add(getBigInteger(rhs)));}  }
class C{  public boolean checkPrefs(List lst){  HashMap map=new HashMap();  for (int i=0; i < lst.size(); i++) {    String value=((String)lst.get(i));    if (value == null || value.trim().equals(Preference.BLANK_PREF_VALUE)) {      continue;    }    if (map.get(value.trim()) != null) {      lst.set(i,Preference.BLANK_PREF_VALUE);      return false;    }    map.put(value,value);  }  return true;}  }
class C{  public synchronized void removeVetoableChangeListener(VetoableChangeListener l){  m_vetoableChangeSupport.removeVetoableChangeListener(l);}  }
class C{  protected Source processSource(StylesheetHandler handler,Source source){  return source;}  }
class C{  public Observable<Reply> call(final String procedure,Object... args){  return call(procedure,ArgArrayBuilder.buildArgumentsArray(clientConfig.objectMapper(),args),null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.643 -0400",hash_original_method="37E512958F900B7FF1FC89E8F78EB9E1",hash_generated_method="A2C5966E3B91C706083CA92FFA4B198C") public void connectPan(BluetoothAdapter adapter,BluetoothDevice device){  connectPanOrIncomingPanConnection(adapter,device,true);}  }
class C{  @PostConstruct public void initApplication(){  if (env.getActiveProfiles().length == 0) {    log.warn("No Spring profile configured, running with default configuration");  } else {    log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));    Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'prod' profiles at the same time.");    }    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'cloud' profiles at the same time.");    }  }}  }
class C{  public Edge addChildEdge(Node parent,Node child){  nodeCheck(parent,true);  nodeCheck(child,true);  return getEdge(addChildEdge(parent.getRow(),child.getRow()));}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.EXECUTION_SCOPE__NAME:    setName(NAME_EDEFAULT);  return;case SexecPackage.EXECUTION_SCOPE__STATE_VECTOR:setStateVector((StateVector)null);return;case SexecPackage.EXECUTION_SCOPE__SUB_SCOPES:getSubScopes().clear();return;case SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE:setSuperScope((ExecutionScope)null);return;case SexecPackage.EXECUTION_SCOPE__ENTER_SEQUENCES:getEnterSequences().clear();return;case SexecPackage.EXECUTION_SCOPE__EXIT_SEQUENCE:setExitSequence((Sequence)null);return;case SexecPackage.EXECUTION_SCOPE__INIT_SEQUENCE:setInitSequence((Sequence)null);return;}super.eUnset(featureID);}  }
class C{  private SampleReader(MatrixReader reader,ParameterFile parameterFile){  super();  this.reader=reader;  this.parameterFile=parameterFile;}  }
class C{  public static ObjectIdentifier newInternal(int[] values){  try {    return new ObjectIdentifier(values);  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static int deleteExpired(EntityManager em){  requireArgument(em != null,"Entity manager cannot be null.");  Query query=em.createNamedQuery("Audit.cullExpired");  query.setParameter("expirationDate",new Date(System.currentTimeMillis() - (2 * MILLIS_PER_WEEK)));  return query.executeUpdate();}  }
class C{  private void bitPlusFollowTrue(){  for (mOut.writeBitTrue(); mBitsToFollow > 0; --mBitsToFollow) {    mOut.writeBitFalse();  }}  }
class C{  @Override public void increaseAmount(){  model.changeAmount(recharge.getCurrentAmount() + recharge.getAmountStep());  model.changeCost(recharge.getCurrentCost() + recharge.getCostStep());}  }
class C{  @SuppressWarnings("unchecked") public static <T>boolean singleScheduleOn(Publisher<? extends T> source,Subscriber<? super T> s,Scheduler scheduler){  if (source instanceof Callable) {    if (!scalarScheduleOn(source,s,scheduler)) {      PublisherCallableSubscribeOn.subscribe((Callable<T>)source,s,scheduler);    }    return true;  }  return false;}  }
class C{  public Vector processSortKeys(ElemForEach foreach,int sourceNodeContext) throws TransformerException {  Vector keys=null;  XPathContext xctxt=m_xcontext;  int nElems=foreach.getSortElemCount();  if (nElems > 0)   keys=new Vector();  for (int i=0; i < nElems; i++) {    ElemSort sort=foreach.getSortElem(i);    String langString=(null != sort.getLang()) ? sort.getLang().evaluate(xctxt,sourceNodeContext,foreach) : null;    String dataTypeString=sort.getDataType().evaluate(xctxt,sourceNodeContext,foreach);    if (dataTypeString.indexOf(":") >= 0)     System.out.println("TODO: Need to write the hooks for QNAME sort data type"); else     if (!(dataTypeString.equalsIgnoreCase(Constants.ATTRVAL_DATATYPE_TEXT)) && !(dataTypeString.equalsIgnoreCase(Constants.ATTRVAL_DATATYPE_NUMBER)))     foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_DATATYPE,dataTypeString});    boolean treatAsNumbers=((null != dataTypeString) && dataTypeString.equals(Constants.ATTRVAL_DATATYPE_NUMBER)) ? true : false;    String orderString=sort.getOrder().evaluate(xctxt,sourceNodeContext,foreach);    if (!(orderString.equalsIgnoreCase(Constants.ATTRVAL_ORDER_ASCENDING)) && !(orderString.equalsIgnoreCase(Constants.ATTRVAL_ORDER_DESCENDING)))     foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_ORDER,orderString});    boolean descending=((null != orderString) && orderString.equals(Constants.ATTRVAL_ORDER_DESCENDING)) ? true : false;    AVT caseOrder=sort.getCaseOrder();    boolean caseOrderUpper;    if (null != caseOrder) {      String caseOrderString=caseOrder.evaluate(xctxt,sourceNodeContext,foreach);      if (!(caseOrderString.equalsIgnoreCase(Constants.ATTRVAL_CASEORDER_UPPER)) && !(caseOrderString.equalsIgnoreCase(Constants.ATTRVAL_CASEORDER_LOWER)))       foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_CASEORDER,caseOrderString});      caseOrderUpper=((null != caseOrderString) && caseOrderString.equals(Constants.ATTRVAL_CASEORDER_UPPER)) ? true : false;    } else {      caseOrderUpper=false;    }    keys.addElement(new NodeSortKey(this,sort.getSelect(),treatAsNumbers,descending,langString,caseOrderUpper,foreach));  }  return keys;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.id_rl_innerchange01:    SkinManager.getInstance().changeSkin("red");  break;case R.id.id_rl_innerchange02:SkinManager.getInstance().changeSkin("green");break;}}  }
class C{  public void decreaseRefcount(){  refcount--;}  }
class C{  public static void purgeCachedData(){  FNTConfigRemoveCache();}  }
class C{  public static IPackageFragmentRoot addVariableRTJar(IJavaProject jproject,String libVarName,String srcVarName,String srcrootVarName) throws CoreException {  return addVariableRTJar(jproject,RT_STUBS_15,libVarName,srcVarName,srcrootVarName);}  }
class C{  private void usingOrElseThrow() throws Exception {  Optional<Student> studentOptional=null;  studentOptional.orElseThrow(null);}  }
class C{  private RdapSearchResults searchByName(final RdapSearchPattern partialStringQuery,final DateTime now){  if (!partialStringQuery.getHasWildcard()) {    HostResource hostResource=loadByForeignKey(HostResource.class,partialStringQuery.getInitialString(),now);    if (hostResource == null) {      throw new NotFoundException("No nameservers found");    }    return RdapSearchResults.create(ImmutableList.of(RdapJsonFormatter.makeRdapJsonForHost(hostResource,false,rdapLinkBase,rdapWhoisServer,now,OutputDataType.FULL)));  } else   if (partialStringQuery.getSuffix() == null) {    return makeSearchResults(queryUndeleted(HostResource.class,"fullyQualifiedHostName",partialStringQuery,rdapResultSetMaxSize + 1).list(),now);  } else {    DomainResource domainResource=loadByForeignKey(DomainResource.class,partialStringQuery.getSuffix(),now);    if (domainResource == null) {      throw new NotFoundException("No domain found for specified nameserver suffix");    }    ImmutableList.Builder<HostResource> hostListBuilder=new ImmutableList.Builder<>();    for (    String fqhn : ImmutableSortedSet.copyOf(domainResource.getSubordinateHosts())) {      if (partialStringQuery.matches(fqhn)) {        HostResource hostResource=loadByForeignKey(HostResource.class,fqhn,now);        if (hostResource != null) {          hostListBuilder.add(hostResource);        }      }    }    return makeSearchResults(hostListBuilder.build(),now);  }}  }
class C{  protected void logParameter(PreparedStatementProxy statement){}  }
class C{  @Override public void reply(WebSocket session,HeadersAmp headers,String to,long qid,Object value) throws IOException {}  }
class C{  private Element createElement(QName qname){  return createElement(qname.getLocalPart(),qname.getNamespaceURI());}  }
class C{  @Override public String toString(){  String className=getClass().getName();  return className.substring(className.lastIndexOf('.') + 1) + " pid: " + playerId;}  }
class C{  public boolean remove(byte[] uuid){  node_trie node=root;  byte offset=0;  byte position;  while (true) {    if (offset % 2 == 0) {      position=(byte)(uuid[offset >> 1] >> 4);      if (position < 0)       position=(byte)(-position + 7);    } else     position=(byte)(uuid[offset >> 1] & 0x0F);    if (node.children[position] == null)     return false; else     if (offset == 31) {      node.children[position]=null;      node.count--;      return true;    } else {      node=(node_trie)node.children[position];      offset++;    }  }}  }
class C{  public void createMonthScenarioBug10249_perUnit_steppedEvents() throws Exception {  long scenarioStartTime=DateTimeHandling.calculateMillis("2012-11-28 00:00:00") - DateTimeHandling.daysToMillis(3.5);  long usageStartTime=DateTimeHandling.calculateMillis("2012-11-29 00:00:00") - DateTimeHandling.daysToMillis(3.5);  BillingIntegrationTestBase.setDateFactoryInstance(scenarioStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10249_PER_UNIT_MONTH_EVENTS",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_MONTH_STEPPED_EVENTS,technicalServiceAsync,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("BUG10249_PER_UNIT_MONTH_EVENTS",serviceDetails,basicSetup.getCustomerUser1(),role);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),subDetails);  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,usageStartTime + DateTimeHandling.daysToMillis(8),"FILE_DOWNLOAD",75);  subscrSetup.recordEventForSubscription(subDetails,usageStartTime + DateTimeHandling.daysToMillis(10),"FILE_UPLOAD",13);  subscrSetup.recordEventForSubscription(subDetails,usageStartTime + DateTimeHandling.daysToMillis(10),"FOLDER_NEW",1);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(10);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10249_PER_UNIT_MONTH_EVENTS",subDetails);}  }
class C{  public static boolean isInRange(double min,double max,double a){  return (min <= a) && (a <= max);}  }
class C{  public void computeJobDestroy(long ptr){  enter();  try {    PlatformCallbackUtils.computeJobDestroy(envPtr,ptr);  }  finally {    leave();  }}  }
class C{  @Override public void writeObject(final OutputStream outputStream,final Object object) throws IOException {  throw Io.Exceptions.writerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public RolloutGroupConditionBuilder errorCondition(final RolloutGroupErrorCondition condition,final String expression){  conditions.setErrorCondition(condition);  conditions.setErrorConditionExp(expression);  return this;}  }
class C{  @Override public boolean deleteInfo(String source,String key){  Preconditions.checkArgument(!Strings.isNullOrEmpty(source),"Source is null or empty");  Preconditions.checkArgument(!Strings.isNullOrEmpty(key),"Key is null or empty");  hubAdapter.deletePluginData(source,key);  try {    lock.lock();    dataService.remove(source,key);    return true;  } catch (  SQLException e) {    LOG.error(e.getMessage(),e);  } finally {    lock.unlock();  }  return false;}  }
class C{  public void removeTask(String taskId,QAttributes qAttributes,String hostname){  removeTasksQueue.offer(new RemoveTaskRequest(taskId,qAttributes,hostname));}  }
class C{  protected Float wrapKey(float k){  return new Float(k);}  }
class C{  public void createStatsFile(){  File file=new File(statsFile);  if (file.exists()) {    file.delete();  }  mean=0;  mode=0;  long n=0;  double[] data;  double imageTotalDeviation=0;  double min=Double.MAX_VALUE;  double max=-Double.MAX_VALUE;  double z;  double[] rowMedians=new double[numberRows];  binWidth=0;  int binNum=0;  int numberOfBins=0;  if (dataScale != DataScale.RGB) {    for (int stack=0; stack < numberStacks; stack++) {      for (int row=0; row < numberRows; row++) {        data=getRowValues(row,stack);        for (int col=0; col < numberColumns; col++) {          z=data[col];          if (z != noDataValue) {            mean+=z;            n++;            if (z < min) {              min=z;            }            if (z > max) {              max=z;            }          }        }      }    }    maximumValue=max;    minimumValue=min;    mean=mean / n;    numValidCells=n;    if (dataType == DataType.INTEGER) {      numberOfBins=(int)(max - min + 1);      binWidth=1;    } else     if (dataType == DataType.FLOAT || dataType == DataType.DOUBLE) {      if ((max - min) < 512) {        numberOfBins=512;      } else       if ((max - min) < 1024) {        numberOfBins=1024;      } else       if ((max - min) < 2048) {        numberOfBins=2048;      } else       if ((max - min) < 4096) {        numberOfBins=4096;      } else {        numberOfBins=8196;      }      binWidth=(max - min) / (numberOfBins - 1);    }    histo=new long[numberOfBins];    for (int stack=0; stack < numberStacks; stack++) {      for (int row=0; row < numberRows; row++) {        data=getRowValues(row,stack);        for (int col=0; col < numberColumns; col++) {          z=data[col];          if (z != noDataValue) {            imageTotalDeviation+=(z - mean) * (z - mean);            binNum=(int)(Math.floor((z - min) / binWidth));            histo[binNum]++;          }        }      }    }    stdDeviation=Math.sqrt(imageTotalDeviation / (n - 1));    long highestVal=0;    int highestBin=0;    for (int i=0; i < histo.length; i++) {      if (histo[i] > highestVal) {        highestVal=histo[i];        highestBin=i;      }    }    mode=highestBin * binWidth;    median=getPercentileValue(50.0d);    String str=null;    FileWriter fw=null;    BufferedWriter bw=null;    PrintWriter out=null;    try {      fw=new FileWriter(file,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str="START_STATS:";      out.println(str);      str="MIN: \t" + Double.toString(this.minimumValue);      out.println(str);      str="MAX: \t" + Double.toString(this.maximumValue);      out.println(str);      str="MEAN: \t" + Double.toString(mean);      out.println(str);      str="MEDIAN: \t" + Double.toString(median);      out.println(str);      str="MODE: \t" + Double.toString(mode);      out.println(str);      str="STD_DEV: \t" + Double.toString(stdDeviation);      out.println(str);      str="NUM_VALID_CELLS: \t" + Long.toString(n);      out.println(str);      str="END_STATS";      out.println(str);      str="START_HISTO";      out.println(str);      str="BIN_WIDTH: \t" + binWidth;      out.println(str);      str="NUM_BINS: \t" + numberOfBins;      out.println(str);      for (int i=0; i < histo.length; i++) {        str=String.valueOf(histo[i]);        out.println(str);      }      str="END_HISTO";      out.println(str);    } catch (    java.io.IOException e) {      System.err.println("Error: " + e.getMessage());    }catch (    Exception e) {      System.err.println("Error: " + e.getMessage());    } finally {      if (out != null || bw != null) {        out.flush();        out.close();      }    }  } else {    numberOfBins=256;  }}  }
class C{  private void launchNtp(boolean incognito){  if (incognito && !PrefServiceBridge.getInstance().isIncognitoModeEnabled())   return;  getTabCreator(incognito).launchNTP();}  }
class C{  @Override public FactoryClient factory(){  return null;}  }
class C{  public static String slurp(String fileName,String charsetName) throws FileNotFoundException {  Scanner scanner=new Scanner(new File(fileName),charsetName);  StringBuilder sb=new StringBuilder();  while (scanner.hasNextLine()) {    String line=scanner.nextLine();    sb.append(line).append("\n");  }  scanner.close();  return sb.toString();}  }
class C{  public String toXML(boolean headline){  XmlTextBuilder bdr;  String tagName="Registry_Document";  String value;  bdr=new XmlTextBuilder();  if (headline)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("RegistryNumber",registryNumber);  if (firstRegistryDate == null)   value=""; else   value=firstRegistryDate;  bdr.addSimpleElement("FirstRegistryDate",value);  if (lastRegistryDate == null)   value=""; else   value=lastRegistryDate;  bdr.addSimpleElement("LastRegistryDate",value);  bdr.addSimpleElement("SenderId",senderId);  bdr.addSimpleElement("Topid",topic);  bdr.addSimpleElement("Addressee",addressee);  bdr.addSimpleElement("FolderId",folderId);  bdr.addSimpleElement("Subject",subject);  bdr.addSimpleElement("Type",type);  bdr.addSimpleElement("Subtype",subtype);  bdr.addSimpleElement("Status",Integer.toString(status));  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  @Entrypoint public static ITable findITable(TIB tib,int id) throws IncompatibleClassChangeError {  ITableArray iTables=tib.getITableArray();  RVMType I=RVMClass.getInterface(id);  if (iTables != null) {    ITable iTable=iTables.get(0);    if (iTable.isFor(I)) {      return iTable;    }    for (int i=1; i < iTables.length(); i++) {      iTable=iTables.get(i);      if (iTable.isFor(I)) {        iTables.set(0,iTable);        return iTable;      }    }  }  RVMClass C=(RVMClass)tib.getType();  if (!RuntimeEntrypoints.isAssignableWith(I,C))   throw new IncompatibleClassChangeError();synchronized (C) {    installITable(C,(RVMClass)I);  }  ITable iTable=findITable(tib,id);  if (VM.VerifyAssertions)   VM._assert(iTable != null);  return iTable;}  }
class C{  public MonetaryFormat decimalMark(char decimalMark){  checkArgument(!Character.isDigit(decimalMark));  checkArgument(decimalMark > 0);  if (decimalMark == this.decimalMark)   return this; else   return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,codePrefixed);}  }
class C{  default String nameSuffix(){  return "";}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static short toShortFromNibbles(byte[] nibbles){  return toShort(nibbles[0],nibbles[1],nibbles[2],nibbles[3]);}  }
class C{  protected void loadLatest(){  int size=store.size();  if (size > 0) {    final Pair<String,ArrayList<String>> pair=store.getElementAt(size - 1);    savedSettingsModel.setSelectedItem(pair.first);    doSetParameters(pair.second);  }}  }
class C{  @Override boolean isCallPermitted(){  return true;}  }
class C{  @Override public void showReviews(List<Review> reviewList){  final int reviewMarginTop=getResources().getDimensionPixelOffset(R.dimen.activity_vertical_margin_half);  final LayoutParams layoutParams=new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  layoutParams.setMargins(0,reviewMarginTop,0,0);  movieHeaders.get(REVIEWS_HEADER).setVisibility(View.VISIBLE);  for (  Review result : reviewList) {    TextView reviewTextView=new TextView(this);    reviewTextView.setTextAppearance(this,R.style.MaterialMoviesReviewTextView);    if (mReviewsColor != -1)     reviewTextView.setTextColor(mReviewsColor);    String reviewCredit="Review written by " + result.getAuthor();    String reviewText=String.format("%s - %s",reviewCredit,result.getContent());    Spannable spanColorString=new SpannableString(reviewText);    spanColorString.setSpan(new ForegroundColorSpan(mReviewsAuthorColor),0,reviewCredit.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    reviewTextView.setText(spanColorString);    mMovieDescriptionContainer.addView(reviewTextView,layoutParams);  }}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>HashEntry<K,V> entryForHash(Segment<K,V> seg,int h){  HashEntry<K,V>[] tab;  return (seg == null || (tab=seg.table) == null) ? null : (HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);}  }
class C{  private void loadAirportDatabase(){  publishProgress("Loading world airports database...");  BufferedReader reader=null;  try {    InputStream in=getResources().openRawResource(R.raw.world_apts);    reader=new BufferedReader(new InputStreamReader(in));    String line=reader.readLine();    List<String> headers=Arrays.asList(line.split(","));    final int LAT=headers.indexOf("LAT");    final int LON=headers.indexOf("LON");    final int NAM=headers.indexOf("NAM");    final int NA3=headers.indexOf("NA3");    final int USE=headers.indexOf("USE");    while ((line=reader.readLine()) != null) {      String[] fields=line.split(",");      Airport airport=new Airport(Position.fromDegrees(Double.parseDouble(fields[LAT]),Double.parseDouble(fields[LON]),0),fields[NAM],fields[USE],fields[NA3].substring(0,2));      this.airports.add(airport);    }  } catch (  IOException e) {    Logger.log(Logger.ERROR,"Exception attempting to read Airports database");  } finally {    WWUtil.closeSilently(reader);  }}  }
class C{  public static String serializeDocument(Document document) throws CoreException {  try {    return serializeDocumentInt(document);  } catch (  TransformerException e) {    abort("Unable to serialize XML document.",e);  }catch (  IOException e) {    abort("Unable to serialize XML document.",e);  }  return null;}  }
class C{  protected MetricReducerTransform(ValueReducer valueReducer){  this.valueReducer=valueReducer;  this.defaultScope=valueReducer.name();  this.defaultMetricName=TransformFactory.DEFAULT_METRIC_NAME;}  }
class C{  public boolean equals(XObject obj2){  int t=obj2.getType();  try {    if (XObject.CLASS_NODESET == t)     return obj2.equals(this); else     if (XObject.CLASS_BOOLEAN == t)     return obj2.bool() == bool(); else     if (XObject.CLASS_NUMBER == t)     return obj2.num() == num();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }  return xstr().equals(obj2.xstr());}  }
class C{  @SuppressWarnings("UnusedReturnValue") public final double pull(){  if (current_item > 0) {    current_item--;  }  return (items[current_item]);}  }
class C{  public void addMutation(byte[] rowKey,ColumnList cols,Durability durability,Long timeToLiveMillis){  if (cols.hasColumns()) {    Put put=createPut(rowKey,cols,durability,timeToLiveMillis);    mutations.add(put);  }  if (cols.hasCounters()) {    Increment inc=createIncrement(rowKey,cols,durability,timeToLiveMillis);    mutations.add(inc);  }  if (mutations.isEmpty()) {    Put put=new Put(rowKey);    put.setTTL(timeToLiveMillis);    mutations.add(put);  }}  }
class C{  public void checkJvmThreadPeakCountReset(Long x) throws SnmpStatusException {}  }
class C{  private Object readResolve(){  return iChronology.weekOfWeekyear();}  }
class C{  public NumericColumn range(Integer low,Integer high){  this.low=(double)low;  this.high=(double)high;  return this;}  }
class C{  protected void clone(BST<E> clone,TreeNode<E> root){  if (root == null)   return;  clone.insert(root.element);  clone(clone,root.left);  clone(clone,root.right);}  }
class C{  protected JsonDeserializer<Object> findDeserializer(DeserializationConfig config,DeserializerProvider provider,JavaType type,BeanProperty property) throws JsonMappingException {  JsonDeserializer<Object> deser=provider.findValueDeserializer(config,type,property);  return deser;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setContentRequired(false);}  }
class C{  public AccountHeaderBuilder withSavedInstance(Bundle savedInstance){  this.mSavedInstance=savedInstance;  return this;}  }
class C{  public void init(int processId){  this.viewController=new ClientViewController(processId);  startsCS(processId);}  }
class C{  public static double checkRange(double value,double min,double max){  double newValue=value;  if (value < min) {    newValue=min;  } else   if (value > max) {    newValue=max;  }  return newValue;}  }
class C{  private void goToBackup(){  mStage=Stage.PASSWORD;  updateStage();  mPassword.requestFocus();  mPassword.postDelayed(mShowKeyboardRunnable,500);  mFingerprintUiHelper.stopListening();}  }
class C{  public ConfigObject clone(){  try {    ConfigObject clone=(ConfigObject)super.clone();    clone.configFile=configFile;    clone.delegateMap=(LinkedHashMap)delegateMap.clone();    return clone;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  public static void removeExternalLibrariesPreferenceStoreLocations(ExternalLibraryPreferenceStore externalLibraryPreferenceStore,Path dir){  externalLibraryPreferenceStore.add((new File(USER_HOME)).toPath().toUri());  externalLibraryPreferenceStore.remove(dir.toUri());  externalLibraryPreferenceStore.save(new NullProgressMonitor());}  }
class C{  public void reset(){  tbsGen=new V1TBSCertificateGenerator();}  }
class C{  public <T extends Fragment>T into(T fragment){  fragment.setArguments(get());  return fragment;}  }
class C{  private static boolean needIncrement(long ldivisor,int roundingMode,int qsign,MutableBigInteger mq,long r){  assert r != 0L;  int cmpFracHalf;  if (r <= HALF_LONG_MIN_VALUE || r > HALF_LONG_MAX_VALUE) {    cmpFracHalf=1;  } else {    cmpFracHalf=longCompareMagnitude(2 * r,ldivisor);  }  return commonNeedIncrement(roundingMode,qsign,cmpFracHalf,mq.isOdd());}  }
class C{  public void testSetSpeedStepMode(){  int Mode=0;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setSpeedStepMode(Mode);}  }
class C{  protected void sequence_TStructSetter(ISerializationContext context,TStructSetter semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.TSETTER__FPAR) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.TSETTER__FPAR));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTStructSetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0(),semanticObject.getName());  feeder.accept(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_2_0(),semanticObject.getFpar());  feeder.finish();}  }
class C{  public void onEvent(Event event){  log.info(event.getName());  if (event.getTarget().getId().equals(ConfirmPanel.A_OK) || m_C_Element_ID == 0) {    close();  } else   if (event.getTarget().equals(m_btnNew)) {    createNew();  } else   if (event.getTarget().equals(m_btnAccount)) {    createAccount();  }  return;}  }
class C{  public static void addNoise(final double[] vector,final double noiselevel){  double randUniform;  double sigma=noiselevel * SimbrainMath.getMaximum(vector);  double sqrt2=Math.sqrt(2);  for (int i=0; i < vector.length; i++) {    randUniform=Math.random();    vector[i]+=(sigma * sqrt2 * SimbrainMath.inverf(randUniform));  }}  }
class C{  public StringSet(Collection<String> source){  super(source);}  }
class C{  @GET @Path("string/forbidden") @View("hello.jsp") public String stringForbiddenException(){  throw new ForbiddenException();}  }
class C{  public boolean hasANumberOnlyValue(){  if (hasType()) {    return !hasValidType();  } else {    for (int i=0; i < values.length; i++) {      if (values[i].matches("[0-9]*")) {        return true;      }    }    return false;  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_NEWS\"";  db.execSQL(sql);}  }
class C{  public void paintTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  ConnectionOutputStream(Connection conn,boolean resultStream) throws IOException {  super(conn.getOutputStream());  this.conn=conn;  this.resultStream=resultStream;  ackID=resultStream ? new UID() : null;}  }
class C{  public static void banner(Logger logger,Class<?> clazz,String methodName){  banner(logger,clazz,methodName,null);}  }
class C{  public void handleUpdateView(ReactShadowNode node,String className,ReactStylesDiffMap props){  if (!ENABLED) {    mUIViewOperationQueue.enqueueUpdateProperties(node.getReactTag(),className,props);    return;  }  boolean needsToLeaveLayoutOnly=node.isLayoutOnly() && !isLayoutOnlyAndCollapsable(props);  if (needsToLeaveLayoutOnly) {    transitionLayoutOnlyViewToNativeView(node,props);  } else   if (!node.isLayoutOnly()) {    mUIViewOperationQueue.enqueueUpdateProperties(node.getReactTag(),className,props);  }}  }
class C{  private static boolean includeAuthorityInRequestLine(Request request,Proxy.Type proxyType){  return !request.isHttps() && proxyType == Proxy.Type.HTTP;}  }
class C{  void store(int n,storeVals isw,int j,double[] s){switch (isw) {case STORQ:    if (null == LanStore[j + MAXLL]) {      LanStore[j + MAXLL]=svd_doubleArray(n,false,"LanStore[j]");    }  svd_dcopy(n,s,1,LanStore[j + MAXLL],1);break;case RETRQ:if (null == LanStore[j + MAXLL]) throw new Error(String.format("svdLAS2: store (RETRQ) called on index %d (not allocated)",j + MAXLL));svd_dcopy(n,LanStore[j + MAXLL],1,s,1);break;case STORP:if (j >= MAXLL) {throw new Error("svdLAS2: store (STORP) called with j >= MAXLL");}if (null == LanStore[j]) {LanStore[j]=svd_doubleArray(n,false,"LanStore[j]");}svd_dcopy(n,s,1,LanStore[j],1);break;case RETRP:if (j >= MAXLL) {svd_error("svdLAS2: store (RETRP) called with j >= MAXLL");break;}if (null == LanStore[j]) throw new Error(String.format("svdLAS2: store (RETRP) called on index %d (not allocated)",j));svd_dcopy(n,LanStore[j],1,s,1);break;}return;}  }
class C{  public void addDefaultMethod(JCCompilationUnit compilationUnit,JCClassDecl type,JCMethodDecl defaultMethod){  Set<Entry<JCClassDecl,JCMethodDecl>> methods=defaultMethods.get(type.sym);  if (methods == null) {    methods=new HashSet<>();    defaultMethods.put(type.sym,methods);  }  methods.add(new AbstractMap.SimpleEntry<>(type,defaultMethod));  defaultMethodsCompilationUnits.put(defaultMethod,compilationUnit);}  }
class C{  public static final void drawRectangleFromTopLeft(GL2 gl,double sx,double sy,double w,double h,boolean points){  gl.glBegin(GL.GL_LINE_LOOP);  gl.glVertex2d(sx,sy);  gl.glVertex2d(sx + w,sy);  gl.glVertex2d(sx + w,sy - h);  gl.glVertex2d(sx,sy - h);  gl.glEnd();  if (points) {    gl.glBegin(GL.GL_POINTS);    gl.glVertex2d(sx,sy);    gl.glVertex2d(sx + w,sy);    gl.glVertex2d(sx + w,sy - h);    gl.glVertex2d(sx,sy - h);    gl.glEnd();  }}  }
class C{  public void processBoardViewEvent(BoardViewEvent event){  if (boardListeners == null) {    return;  }  for (  BoardViewListener l : boardListeners) {switch (event.getType()) {case BoardViewEvent.BOARD_HEX_CLICKED:case BoardViewEvent.BOARD_HEX_DOUBLECLICKED:case BoardViewEvent.BOARD_HEX_DRAGGED:case BoardViewEvent.BOARD_HEX_POPUP:      l.hexMoused(event);    break;case BoardViewEvent.BOARD_HEX_CURSOR:  l.hexCursor(event);break;case BoardViewEvent.BOARD_HEX_HIGHLIGHTED:l.boardHexHighlighted(event);break;case BoardViewEvent.BOARD_HEX_SELECTED:l.hexSelected(event);break;case BoardViewEvent.BOARD_FIRST_LOS_HEX:l.firstLOSHex(event);break;case BoardViewEvent.BOARD_SECOND_LOS_HEX:l.secondLOSHex(event,getFirstLOS());break;case BoardViewEvent.FINISHED_MOVING_UNITS:l.finishedMovingUnits(event);break;case BoardViewEvent.SELECT_UNIT:l.unitSelected(event);break;}}}  }
class C{  public MySqlSpoutConfig(MySqlConfig mysqlConfig,ZkBinLogStateConfig zkBinLogStateConfig,FailureConfig failureConfig){  this(mysqlConfig,zkBinLogStateConfig,failureConfig,SpoutConstants.DEFAULT_TIMEBUCKETSIZEINSECS,SpoutConstants.DEFAULT_BUFFER_CAPACITY);}  }
class C{  public HttpBaratine(HttpBaratineBuilder builder){  super(builder);  _webAppHandle=builder.buildWebAppHandle(this);  Objects.requireNonNull(_webAppHandle);}  }
class C{  public void repaint(Rectangle r){}  }
class C{  public void finish() throws IOException {  int dirOffset=written;  int startOfCentralDirectory=written;  Iterator<ExtZipEntry> it=entries.iterator();  while (it.hasNext()) {    ExtZipEntry entry=it.next();    writeDirEntry(entry);  }  int centralDirectorySize=written - startOfCentralDirectory;  writeInt(ENDSIG);  writeShort(0x00);  writeShort(0x00);  writeShort(entries.size());  writeShort(entries.size());  writeInt(centralDirectorySize);  writeInt(dirOffset);  byte[] commentBytes=this.comment != null ? this.comment.getBytes() : new byte[0];  writeShort(commentBytes.length);  if (commentBytes.length > 0) {    writeBytes(commentBytes);  }  out.close();}  }
class C{  private void hideOldWidget(){  oldWidget.setVisible(false);  oldWidget=null;}  }
class C{  public static ValueExp value(long val){  return new NumericValueExp(val);}  }
class C{  VPlexDistributedDeviceInfo findDistributedDevice(String deviceName) throws VPlexApiException {  return findDistributedDevice(deviceName,false);}  }
class C{  @Override public AsciiArray withColumns(String[]... columns){  for (  String[] column : columns) {    addColumn(Arrays.asList(column));  }  return this;}  }
class C{  public StringSetMap assignPrezonedStoragePorts(StorageSystem storage,ExportGroup exportGroup,List<Initiator> initiators,StringSetMap existingZoningMap,ExportPathParams pathParams,Collection<URI> volumeURIs,NetworkDeviceController networkDeviceController,URI virtualArrayUri,String token){  StringSetMap newZoningMap=new StringSetMap();  if (existingZoningMap != null) {    newZoningMap.putAll(existingZoningMap);  }  boolean backend=ExportMaskUtils.areBackendInitiators(initiators);  ExportPathParams prezoningPathParams=getPrezoningPathParam(virtualArrayUri,pathParams,storage,backend);  try {    if (networkDeviceController == null) {      return newZoningMap;    }    if (!NetworkUtil.areNetworkSystemDiscovered(_dbClient)) {      _log.info("Cannot discover existing zones. There are no network systems discovered.");      return newZoningMap;    }    if (!_networkScheduler.portAllocationUseExistingZones(storage.getSystemType(),backend)) {      _log.info("The system configuration requests port selection to be based on metrics only " + "i.e. ignore existing zones when selecting ports.");      return newZoningMap;    }    _log.info("Checking for existing zoned ports for export {} before invoking port allocation.",exportGroup.getGeneratedName());    List<Initiator> newInitiators=new ArrayList<Initiator>();    for (    Initiator initiator : initiators) {      if (!newZoningMap.containsKey(initiator.getId().toString())) {        newInitiators.add(initiator);      }    }    Map<Initiator,List<StoragePort>> assignments=new HashMap<Initiator,List<StoragePort>>();    Map<Initiator,List<StoragePort>> existingAssignments=generateInitiatorsToStoragePortsMap(existingZoningMap,virtualArrayUri);    if (!newInitiators.isEmpty()) {      Collection<StoragePort> ports=ExportUtils.getStorageSystemAssignablePorts(_dbClient,storage.getId(),virtualArrayUri,pathParams);      Map<NetworkLite,List<Initiator>> initiatorsByNetwork=NetworkUtil.getInitiatorsByNetwork(newInitiators,_dbClient);      Map<Initiator,NetworkLite> initiatorToNetworkLiteMap=getInitiatorToNetworkLiteMap(initiatorsByNetwork);      Map<NetworkLite,List<StoragePort>> portByNetwork=ExportUtils.mapStoragePortsToNetworks(ports,initiatorsByNetwork.keySet(),_dbClient);      Map<NetworkLite,StringSetMap> zonesByNetwork=new HashMap<NetworkLite,StringSetMap>();      Map<NetworkLite,List<StoragePort>> preZonedPortsByNetwork=getPrezonedPortsForInitiators(networkDeviceController,portByNetwork,initiatorsByNetwork,zonesByNetwork,token);      if (!preZonedPortsByNetwork.isEmpty()) {        StringMapUtil.retainAll(initiatorsByNetwork,preZonedPortsByNetwork);        Map<NetworkLite,List<StoragePort>> allocatedPortsByNetwork=allocatePorts(storage,virtualArrayUri,initiatorsByNetwork,preZonedPortsByNetwork,volumeURIs,prezoningPathParams,existingZoningMap);        Map<URI,List<StoragePort>> allocatedPortsMap=getAllocatedPortsMap(allocatedPortsByNetwork);        Map<URI,Map<URI,List<Initiator>>> hostsToNetToInitiators=getHostInitiatorsMapFromNetworkLite(initiatorsByNetwork);        StoragePortsAssigner assigner=StoragePortsAssignerFactory.getAssignerForZones(storage.getSystemType(),zonesByNetwork);        for (        Map.Entry<URI,Map<URI,List<Initiator>>> entry : hostsToNetToInitiators.entrySet()) {          URI hostURI=entry.getKey();          assigner.assignPortsToHost(assignments,entry.getValue(),allocatedPortsMap,prezoningPathParams,existingAssignments,hostURI,initiatorToNetworkLiteMap);        }        addAssignmentsToZoningMap(assignments,newZoningMap);      }      if (allocateFromPrezonedPortsOnly(virtualArrayUri,storage.getSystemType(),backend)) {        try {          validateMinPaths(storage,prezoningPathParams,existingAssignments,assignments,newInitiators);        } catch (        PlacementException pex) {          _log.error("There are fewer pre-zoned paths than required by the virtual pool." + " Please either add the needed paths or enable automatic SAN zoning in the virtual array" + " so that the additional paths can be added by the application.",pex);          throw pex;        }      }    }    _log.info("Zoning map after the assignment of pre-zoned ports: {}",newZoningMap);  } catch (  Exception ex) {    _log.error("Failed to assign from pre-zoned storage ports because: ",ex);    if (allocateFromPrezonedPortsOnly(virtualArrayUri,storage.getSystemType(),backend)) {      _log.error("The virtual array is configured for manual zoning and the application " + "cannot assign from other storage ports. Failing the workflow.");      throw ex;    } else {      _log.info("The virtual array is configured for auto zoning and the application " + "will attempt to assign from other storage ports. Resuming the workflow.");    }  }  return newZoningMap;}  }
class C{  public Exception testDatabase(boolean retest){  if (!retest && m_ds != null && m_okDB)   return null;  getDatabase().close();  m_ds=null;  setDataSource();  Connection conn=getConnection(true,Connection.TRANSACTION_READ_COMMITTED);  if (conn != null) {    try {      readInfo(conn);      conn.close();    } catch (    Exception e) {      log.severe(e.toString());      return e;    }  }  return m_dbException;}  }
class C{  public static String trimAll(String s){  if (s == null) {    return s;  }  return removeDuplicateWhitespace(s).trim();}  }
class C{  public List<Service> searchWithCriteria(){  ListCriteria criteria=servicePagingBean.getListCriteria();  if (categorySelectionBean.isCategorySelected()) {    criteria.setCategoryId(categorySelectionBean.getSelectedCategoryId());  }  if (services == null) {    try {      VOServiceListResult result=getSearchServiceInternal().getServicesByCriteria(getMarketplaceId(),JSFUtils.getViewLocale().getLanguage(),criteria,PerformanceHint.ONLY_FIELDS_FOR_LISTINGS);      getServicePagingBean().setResultSize(result.getResultSize());      updateServiceListContainsChargeableResellerService(result.getServices());      services=DEFAULT_VOSERVICE_MAPPER.map(result.getServices());    } catch (    ObjectNotFoundException e) {      if (e.getDomainObjectClassEnum() == ClassEnum.CATEGORY) {        refreshCategories();      } else       if (e.getDomainObjectClassEnum() == ClassEnum.TAG) {        refreshTags();      } else {        ExceptionHandler.execute(e);      }    }  }  return services;}  }
class C{  public RoundedTransformationBuilder cornerRadiusBottomLeft(float radiusPx){  mCornerRadius[2]=radiusPx;  return this;}  }
class C{  public cudaPitchedPtr(){}  }
class C{  public static final double[] timesMinusTimesEquals(final double[] v1,final double s1,final double[] v2,final double s2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  for (int i=0; i < v1.length; i++) {    v1[i]=v1[i] * s1 - v2[i] * s2;  }  return v1;}  }
class C{  private static ParseResult parse(int[] vals,int size){  int mask=maskForPowerOfTwo(size);  int totalSize=size * 2;  int[] data=new int[totalSize];  int collisions=0;  for (int order=0; order < vals.length; order++) {    int id=vals[order];    assert id != 0;    int idIdx=(id & mask) << 1;    if (data[idIdx] == 0) {      data[idIdx]=id;      data[idIdx + 1]=order;    } else {      collisions++;      boolean placeFound=false;      for (int i=2; i < totalSize; i+=2) {        int newIdIdx=(idIdx + i) % totalSize;        if (data[newIdIdx] == 0) {          data[newIdIdx]=id;          data[newIdIdx + 1]=order;          placeFound=true;          break;        }      }      assert placeFound : "Should always have a place for entry!";    }  }  return new ParseResult(data,collisions);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static void main(String... args) throws IOException {  new FileContentHash().runTool(args);}  }
class C{  Element readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {  XmlFile xf=new XmlFile(){  };  return xf.rootFromFile(file);}  }
class C{  private boolean isAndroid(){  if (!System.getProperty("os.name","generic").equals("Linux") || !System.getProperty("java.runtime.name").equals("Android Runtime"))   return false;  try {    Class.forName("com.intel.moe.frameworks.inapppurchase.android.PlatformIAPHelper");    return true;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public void updateLocked(List<DisplayDevice> devices){  if (mPrimaryDisplayDevice == null) {    return;  }  if (!devices.contains(mPrimaryDisplayDevice)) {    mPrimaryDisplayDevice=null;    return;  }  DisplayDeviceInfo deviceInfo=mPrimaryDisplayDevice.getDisplayDeviceInfoLocked();  if (!Objects.equal(mPrimaryDisplayDeviceInfo,deviceInfo)) {    mBaseDisplayInfo.layerStack=mLayerStack;    mBaseDisplayInfo.flags=0;    if ((deviceInfo.flags & DisplayDeviceInfo.FLAG_SUPPORTS_PROTECTED_BUFFERS) != 0) {      mBaseDisplayInfo.flags|=Display.FLAG_SUPPORTS_PROTECTED_BUFFERS;    }    if ((deviceInfo.flags & DisplayDeviceInfo.FLAG_SECURE) != 0) {      mBaseDisplayInfo.flags|=Display.FLAG_SECURE;    }    mBaseDisplayInfo.type=deviceInfo.type;    mBaseDisplayInfo.address=deviceInfo.address;    mBaseDisplayInfo.name=deviceInfo.name;    mBaseDisplayInfo.appWidth=deviceInfo.width;    mBaseDisplayInfo.appHeight=deviceInfo.height;    mBaseDisplayInfo.logicalWidth=deviceInfo.width;    mBaseDisplayInfo.logicalHeight=deviceInfo.height;    mBaseDisplayInfo.rotation=Surface.ROTATION_0;    mBaseDisplayInfo.refreshRate=deviceInfo.refreshRate;    mBaseDisplayInfo.logicalDensityDpi=deviceInfo.densityDpi;    mBaseDisplayInfo.physicalXDpi=deviceInfo.xDpi;    mBaseDisplayInfo.physicalYDpi=deviceInfo.yDpi;    mBaseDisplayInfo.smallestNominalAppWidth=deviceInfo.width;    mBaseDisplayInfo.smallestNominalAppHeight=deviceInfo.height;    mBaseDisplayInfo.largestNominalAppWidth=deviceInfo.width;    mBaseDisplayInfo.largestNominalAppHeight=deviceInfo.height;    mPrimaryDisplayDeviceInfo=deviceInfo;    mInfo=null;  }}  }
class C{  protected void doStateForaging(){  doStepOutgoing(getTargetLocation());  sourceDirection.radius--;  if (sourceDirection.radius <= 0) {    int maxSearchSteps=getSimulation().maxSearchSteps;    searchSteps=maxSearchSteps - (r.nextInt(maxSearchSteps) / 10);    setState(State.searching);  }  if (nectarLoad <= nectarForReturn) {    forgetSource(Color.white,State.returnWithoutInfo);  }}  }
class C{  public boolean isValueTypeBoolean(){  return valueType == ParameterValueType.BOOLEAN;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:55.279 -0500",hash_original_method="D3533BC730DCD2115B028F12761A2C9B",hash_generated_method="7F50C522F4B68CA7E0C0A921198A7547") public AppWidgetHostView(Context context){  this(context,android.R.anim.fade_in,android.R.anim.fade_out);}  }
class C{  public static long toPeriod(String value,long defaultUnits) throws ConfigException {  if (value == null)   return 0;  long sign=1;  long period=0;  int i=0;  int length=value.length();  if (length > 0 && value.charAt(i) == '-') {    sign=-1;    i++;  }  while (i < length) {    long delta=0;    char ch;    for (; i < length && (ch=value.charAt(i)) >= '0' && ch <= '9'; i++)     delta=10 * delta + ch - '0';    if (length <= i)     period+=defaultUnits * delta; else {      ch=value.charAt(i++);switch (ch) {case 's':        period+=1000 * delta;      break;case 'm':    if (i < value.length() && value.charAt(i) == 's') {      i++;      period+=delta;    } else     period+=60 * 1000 * delta;  break;case 'h':period+=60L * 60 * 1000* delta;break;case 'D':period+=DAY * delta;break;case 'W':period+=7L * DAY * delta;break;case 'M':period+=30L * DAY * delta;break;case 'Y':period+=365L * DAY * delta;break;default :throw new ConfigException(L.l("Unknown unit `{0}' in period `{1}'. Valid units are:\n  '10ms' milliseconds\n  '10s' seconds\n  '10m' minutes\n  '10h' hours\n  '10D' days\n  '10W' weeks\n  '10M' months\n  '10Y' years",String.valueOf(ch),value));}}}period=sign * period;return period;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count=s.readInt();  value=(char[])s.readObject();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.434 -0500",hash_original_method="2DDF37E22088D1FE8BC73EB3CA83F3A0",hash_generated_method="D2F899ECF0C8F0AF7307958FBF03F0A2") void processServerHelloDone(){  PrivateKey clientKey=null;  if (serverCert != null) {    if (session.cipherSuite.isAnonymous()) {      unexpectedMessage();      return;    }    verifyServerCert();  } else {    if (!session.cipherSuite.isAnonymous()) {      unexpectedMessage();      return;    }  }  if (certificateRequest != null) {    X509Certificate[] certs=null;    String alias=null;    String[] certTypes=certificateRequest.getTypesAsString();    X500Principal[] issuers=certificateRequest.certificate_authorities;    X509KeyManager km=parameters.getKeyManager();    if (km instanceof X509ExtendedKeyManager) {      X509ExtendedKeyManager ekm=(X509ExtendedKeyManager)km;      if (this.socketOwner != null) {        alias=ekm.chooseClientAlias(certTypes,issuers,this.socketOwner);      } else {        alias=ekm.chooseEngineClientAlias(certTypes,issuers,this.engineOwner);      }      if (alias != null) {        certs=ekm.getCertificateChain(alias);      }    } else {      alias=km.chooseClientAlias(certTypes,issuers,this.socketOwner);      if (alias != null) {        certs=km.getCertificateChain(alias);      }    }    session.localCertificates=certs;    clientCert=new CertificateMessage(certs);    clientKey=km.getPrivateKey(alias);    send(clientCert);  }  if (session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {    Cipher c;    try {      c=Cipher.getInstance("RSA/ECB/PKCS1Padding");      if (serverKeyExchange != null) {        c.init(Cipher.ENCRYPT_MODE,serverKeyExchange.getRSAPublicKey());      } else {        c.init(Cipher.ENCRYPT_MODE,serverCert.certs[0]);      }    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }    preMasterSecret=new byte[48];    parameters.getSecureRandom().nextBytes(preMasterSecret);    System.arraycopy(clientHello.client_version,0,preMasterSecret,0,2);    try {      clientKeyExchange=new ClientKeyExchange(c.doFinal(preMasterSecret),serverHello.server_version[1] == 1);    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }  } else {    try {      KeyFactory kf=KeyFactory.getInstance("DH");      KeyAgreement agreement=KeyAgreement.getInstance("DH");      KeyPairGenerator kpg=KeyPairGenerator.getInstance("DH");      PublicKey serverPublic;      DHParameterSpec spec;      if (serverKeyExchange != null) {        serverPublic=kf.generatePublic(new DHPublicKeySpec(serverKeyExchange.par3,serverKeyExchange.par1,serverKeyExchange.par2));        spec=new DHParameterSpec(serverKeyExchange.par1,serverKeyExchange.par2);      } else {        serverPublic=serverCert.certs[0].getPublicKey();        spec=((DHPublicKey)serverPublic).getParams();      }      kpg.initialize(spec);      KeyPair kp=kpg.generateKeyPair();      Key key=kp.getPublic();      if (clientCert != null && serverCert != null && (session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS)) {        PublicKey client_pk=clientCert.certs[0].getPublicKey();        PublicKey server_pk=serverCert.certs[0].getPublicKey();        if (client_pk instanceof DHKey && server_pk instanceof DHKey) {          if (((DHKey)client_pk).getParams().getG().equals(((DHKey)server_pk).getParams().getG()) && ((DHKey)client_pk).getParams().getP().equals(((DHKey)server_pk).getParams().getG())) {            clientKeyExchange=new ClientKeyExchange();          }        }      } else {        clientKeyExchange=new ClientKeyExchange(((DHPublicKey)key).getY());      }      key=kp.getPrivate();      agreement.init(key);      agreement.doPhase(serverPublic,true);      preMasterSecret=agreement.generateSecret();    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }  }  if (clientKeyExchange != null) {    send(clientKeyExchange);  }  computerMasterSecret();  if (clientCert != null && !clientKeyExchange.isEmpty()) {    String authType=clientKey.getAlgorithm();    DigitalSignature ds=new DigitalSignature(authType);    ds.init(clientKey);    if ("RSA".equals(authType)) {      ds.setMD5(io_stream.getDigestMD5());      ds.setSHA(io_stream.getDigestSHA());    } else     if ("DSA".equals(authType)) {      ds.setSHA(io_stream.getDigestSHA());    }    certificateVerify=new CertificateVerify(ds.sign());    send(certificateVerify);  }  sendChangeCipherSpec();}  }
class C{  private JSONObject convertMapRulesProperties(Map<String,List<String>> mapRules,JSONObject properties){  JSONObject root=new JSONObject(true);  for (  String key : properties.keySet()) {    if (mapRules.containsKey(key)) {      for (      String newField : mapRules.get(key)) {        if (newField.contains(".")) {          String[] deepFields=newField.split(Pattern.quote("."));          JSONObject currentLevel=root;          for (int lvl=0; lvl < deepFields.length; lvl++) {            if (lvl == deepFields.length - 1) {              currentLevel.put(deepFields[lvl],properties.get(key));            } else {              if (currentLevel.get(deepFields[lvl]) == null) {                JSONObject tmp=new JSONObject();                currentLevel.put(deepFields[lvl],tmp);              }              currentLevel=(JSONObject)currentLevel.get(deepFields[lvl]);            }          }        } else {          root.put(newField,properties.get(key));        }      }    }  }  return root;}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public static <C extends Comparable<?>>Range<C> upTo(C endpoint,BoundType boundType){switch (boundType) {case OPEN:    return lessThan(endpoint);case CLOSED:  return atMost(endpoint);default :throw new AssertionError();}}  }
class C{  public GlassFish2xStandaloneLocalConfiguration(String home){  super(home);}  }
class C{  SubMap<K,V> newSubMap(K fromKey,boolean fromInclusive,K toKey,boolean toInclusive){  Comparator<? super K> cmp=m.comparator;  if (isDescending) {    K tk=fromKey;    fromKey=toKey;    toKey=tk;    boolean ti=fromInclusive;    fromInclusive=toInclusive;    toInclusive=ti;  }  if (lo != null) {    if (fromKey == null) {      fromKey=lo;      fromInclusive=loInclusive;    } else {      int c=cpr(cmp,fromKey,lo);      if (c < 0 || (c == 0 && !loInclusive && fromInclusive))       throw new IllegalArgumentException("key out of range");    }  }  if (hi != null) {    if (toKey == null) {      toKey=hi;      toInclusive=hiInclusive;    } else {      int c=cpr(cmp,toKey,hi);      if (c > 0 || (c == 0 && !hiInclusive && toInclusive))       throw new IllegalArgumentException("key out of range");    }  }  return new SubMap<K,V>(m,fromKey,fromInclusive,toKey,toInclusive,isDescending);}  }
class C{  private void ServerThreadMain() throws IOException {  log.debug("Running main thread");  while (!Thread.currentThread().isInterrupted()) {    selector.select();    Iterator<SelectionKey> it=selector.selectedKeys().iterator();    while (it.hasNext()) {      SelectionKey k=it.next();      it.remove();      if (k == serverKey && k.isAcceptable()) {        SocketChannel accepted=serverSocketChannel.accept();        if (accepted != null) {          log.info("Accepted incoming connection {}",accepted);          try {            connected.add(new ConnectedClient(accepted));          } catch (          ClosedChannelException e) {          }        }        log.debug("Acceptable channel {} could not accept",k);        continue;      }      ConnectedClient client=null;      try {        client=(ConnectedClient)k.attachment();      } catch (      ClassCastException e) {        log.debug("No connected client for key {}: {}",k,e);        log.debug("Cancelling key {}",k);        k.cancel();        continue;      }      if (client == null) {        log.debug("No connected client for key {}",k);        log.debug("Cancelling key {}",k);        k.cancel();        continue;      }      if (!k.isValid()) {        log.debug("Closing client with invalid key {}: {}",k,client);        client.close();        continue;      }      try {        if (k.isReadable()) {          log.debug("{} readable",client.channel);          if (!client.reader.read()) {            log.info("{} reached end of stream",client.channel);            client.close();            continue;          }        }        if (k.isWritable()) {          log.debug("{} writeable",client.channel);          client.writer.write();        }        client.UpdateSelector();      } catch (      IOException e) {        log.info("IOException for client {}: {}",client,e);        client.close();        continue;      }    }  }}  }
class C{  public CompositeByteArrayRelativeReader(CompositeByteArray cba,boolean autoFree){  super(cba);  this.autoFree=autoFree;}  }
class C{  protected <T extends E>T insert(MediaSource media,Class<T> mediaEntryClass) throws ServiceException, IOException {  if (feedState.service == null) {    throw new ServiceException(CoreErrorDomain.ERR.entryNotAssociated);  }  Link postLink=getEntryPostLink();  if (postLink == null) {    throw new UnsupportedOperationException("Media cannot be inserted");  }  URL postUrl=new URL(postLink.getHref());  return ((MediaService)feedState.service).insert(postUrl,mediaEntryClass,media);}  }
class C{  public boolean isSupertypeOf(GoogleBaseAttributeType subtype){  if (this.equals(subtype)) {    return true;  }  GoogleBaseAttributeType otherSupertype=subtype.getSupertype();  if (otherSupertype == null) {    return false;  }  return isSupertypeOf(otherSupertype);}  }
class C{  public static void FSTORE_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.FSTORE_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  @Override public PLIImage rotate(int angle){  if ((angle % 90) != 0)   return this;  Matrix matrix=new Matrix();  matrix.preRotate(angle);  Bitmap image=Bitmap.createBitmap(mBitmap,0,0,mWidth,mHeight,matrix,true);  this.deleteImage();  this.createWithBitmap(image,false);  return this;}  }
class C{  private static <T>Collection<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> loadPluginJar(final File pluginFile) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {  NaviLogger.info("Loading plugins from " + pluginFile.getAbsolutePath());  final JarClassLoader jarLoader=new JarClassLoader(pluginFile.getAbsolutePath());  final String mainClassName=getMainClassName(pluginFile);  NaviLogger.info("Determined main class as " + mainClassName);  if (mainClassName == null) {    return new ArrayList<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>>();  }  final Class<?> cls=jarLoader.loadClass(mainClassName,true);  if (IPluginServer.class.isAssignableFrom(cls)) {    ClassPathHacker.addFile(pluginFile);    @SuppressWarnings("unchecked") final IPluginServer<T> server=(IPluginServer<T>)cls.newInstance();    return server.getPlugins();  }  return new ArrayList<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>>();}  }
class C{  protected JComponent createDefaultColumnControl(){  return new CColumnControlButton(this,new ColumnControlIcon());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void decrement(View view){  if (quantity == 0) {    return;  }  quantity=quantity - 1;  displayQuantity(quantity);}  }
class C{  @Override public void uninitialize(){  KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(_handler);  super.uninitialize();}  }
class C{  public static boolean keepalive(Context context){  return context.startService(new Intent(context,RocketChatWSService.class)) == null;}  }
class C{  private static String[] extractHostports(SrvRecord[] srvRecords){  String[] hostports=null;  int head=0;  int tail=0;  int sublistLength=0;  int k=0;  for (int i=0; i < srvRecords.length; i++) {    if (hostports == null) {      hostports=new String[srvRecords.length];    }    head=i;    while (i < srvRecords.length - 1 && srvRecords[i].priority == srvRecords[i + 1].priority) {      i++;    }    tail=i;    sublistLength=(tail - head) + 1;    for (int j=0; j < sublistLength; j++) {      hostports[k++]=selectHostport(srvRecords,head,tail);    }  }  return hostports;}  }
class C{  protected void connectionWarn(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.710 -0500",hash_original_method="6EE6952ECA2DC5E5A6C1DD03C0E7FD35",hash_generated_method="195A681901EA8D4D0CE146BE36AC1277") public static void runFinalization(){}  }
class C{  public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public LongChunks(final int numberChunks,final long length,final int chunkBits){  super(length);  assert chunkBits > 0 && chunkBits <= 30 : chunkBits;  mChunkBits=chunkBits;  mChunkSize=1 << mChunkBits;  mChunkMask=mChunkSize - 1;  mArray=new long[numberChunks][];  long soFar=0;  for (int i=0; i < numberChunks && soFar < length; i++) {    mArray[i]=new long[mChunkSize];    soFar+=mChunkSize;  }  mTotalLength=soFar;  if (length > mTotalLength) {    throw new RuntimeException("too few chunks for length=" + length + " chunks="+ numberChunks+ " chunkBits="+ chunkBits);  }  mLength=length;  assert integrity();}  }
class C{  private void parseMovement(Element movementTag,Entity entity){  String value=movementTag.getAttribute(MDAMAGE);  try {    int motiveDamage=Integer.parseInt(value);    ((Tank)entity).setMotiveDamage(motiveDamage);    if (motiveDamage >= ((Tank)entity).getOriginalWalkMP()) {      ((Tank)entity).immobilize();      ((Tank)entity).applyDamage();    }  } catch (  Exception e) {    warning.append("Invalid motive damage value in movement tag.\n");  }  value=movementTag.getAttribute(MPENALTY);  try {    int motivePenalty=Integer.parseInt(value);    ((Tank)entity).setMotivePenalty(motivePenalty);  } catch (  Exception e) {    warning.append("Invalid motive penalty value in movement tag.\n");  }}  }
class C{  protected SequenceImpl(){  super();}  }
class C{  SelectResults auxIterateEvaluate(CompiledValue operand,ExecutionContext context,SelectResults intermediateResults) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  if (intermediateResults == null)   throw new RuntimeException(LocalizedStrings.CompiledJunction_INTERMEDIATERESULTS_CAN_NOT_BE_NULL.toLocalizedString());  if (intermediateResults.isEmpty())   return intermediateResults;  List currentIters=context.getCurrentIterators();  RuntimeIterator rIters[]=new RuntimeIterator[currentIters.size()];  currentIters.toArray(rIters);  ObjectType elementType=intermediateResults.getCollectionType().getElementType();  SelectResults resultSet;  if (elementType.isStructType()) {    resultSet=QueryUtils.createStructCollection(context,(StructTypeImpl)elementType);  } else {    resultSet=QueryUtils.createResultCollection(context,elementType);  }  QueryObserver observer=QueryObserverHolder.getInstance();  try {    observer.startIteration(intermediateResults,operand);    Iterator iResultsIter=intermediateResults.iterator();    while (iResultsIter.hasNext()) {      Object tuple=iResultsIter.next();      if (tuple instanceof Struct) {        Object values[]=((Struct)tuple).getFieldValues();        for (int i=0; i < values.length; i++) {          rIters[i].setCurrent(values[i]);        }      } else {        rIters[0].setCurrent(tuple);      }      Object result=null;      try {        result=operand.evaluate(context);      }  finally {        observer.afterIterationEvaluation(result);      }      if (result instanceof Boolean) {        if (((Boolean)result).booleanValue())         resultSet.add(tuple);      } else       if (result != null && result != QueryService.UNDEFINED)       throw new TypeMismatchException(LocalizedStrings.CompiledJunction_ANDOR_OPERANDS_MUST_BE_OF_TYPE_BOOLEAN_NOT_TYPE_0.toLocalizedString(result.getClass().getName()));    }  }  finally {    observer.endIteration(resultSet);  }  return resultSet;}  }
class C{  public String detachMirrorFromDistributedVolume(String virtualVolumeName,String clusterId) throws VPlexApiException {  s_logger.info("Request to detach mirror on cluster {} from a distributed volume {}",clusterId,virtualVolumeName);  ClientResponse response=null;  try {    VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();    VPlexVirtualVolumeInfo virtualVolumeInfo=findVirtualVolumeAndUpdateInfo(virtualVolumeName,discoveryMgr);    String ddName=virtualVolumeInfo.getSupportingDevice();    VPlexDistributedDeviceInfo ddInfo=discoveryMgr.findDistributedDevice(ddName);    if (ddInfo == null) {      throw VPlexApiException.exceptions.cantFindDistributedDeviceForVolume(virtualVolumeName);    }    String mirrorDevicePath=null;    String detachedDeviceName=null;    List<VPlexDistributedDeviceComponentInfo> ddComponents=discoveryMgr.getDistributedDeviceComponents(ddInfo);    for (    VPlexDistributedDeviceComponentInfo ddComponent : ddComponents) {      discoveryMgr.updateDistributedDeviceComponent(ddComponent);      if (ddComponent.getCluster().equals(clusterId)) {        mirrorDevicePath=ddComponent.getPath();        detachedDeviceName=ddComponent.getName();        s_logger.info("Detached device is {}",detachedDeviceName);        break;      }    }    if (mirrorDevicePath == null) {      throw VPlexApiException.exceptions.cantFindMirrorForDetach(clusterId,virtualVolumeName);    }    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DEVICE_DETACH_MIRROR);    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_D,ddInfo.getPath());    argsMap.put(VPlexApiConstants.ARG_DASH_M,mirrorDevicePath);    argsMap.put(VPlexApiConstants.ARG_DISCARD,"");    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Detach mirror for virtual volume POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Detach mirror for virtual volume response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Detach mirror for virtual volume is completing asynchrounously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.detachMirrorFailureStatus(clusterId,virtualVolumeName,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Detached device is {}",detachedDeviceName);    return detachedDeviceName;  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedDetachingVPlexVolumeMirror(clusterId,virtualVolumeName,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public static void onUserAcknowledgedVersionUpdate(int versionCode){  if (ensureInitialized()) {    FreshAirLog.v("User acknowledged version update: " + versionCode);    preferences.setLastUpdatePromptVersion(versionCode);  }}  }
class C{  public boolean isAutoContrastEnabled(){  try {    return checkService() && sService.isAutoContrastEnabled();  } catch (  RemoteException e) {    return false;  }}  }
class C{  public OkHttpClient client(){  return mClient;}  }
class C{  public static <T>Topic<T> create(String uniqueName){  return new Topic<>(uniqueName);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public ZoomMenuAction(int tableID,String tableName){  super(COMMAND);  setActionCommand(COMMAND);  this.tableID=tableID;  this.tableName=tableName;}  }
class C{  public void addConfig(Provider provider,String key,String secret,String permissions){  OAuthConfig authConfig=new OAuthConfig(key,secret);  authConfig.setId(provider.toString());  authConfig.setCustomPermissions(permissions);  authMap.put(provider.toString(),authConfig);}  }
class C{  @Override public final double[] distributionForInstance(Instance instance) throws Exception {  return m_root.distributionForInstance(instance,m_useLaplace);}  }
class C{  int distinctBitsRequired(){  final int currentResolution=getPrefixLength();  int testPrefix=currentResolution + 1;  final IRaba keys=data.getKeys();  final int nkeys=keys.size();  int maxPrefix=0;  for (int t=1; t < nkeys; t++) {    final byte[] k=keys.get(t);    final int klen=k == null ? 0 : k.length;    maxPrefix=maxPrefix > klen ? maxPrefix : klen;  }  maxPrefix*=8;  assert nkeys > 1;  while (testPrefix < maxPrefix) {    final boolean bitset=BytesUtil.getBit(keys.get(0),testPrefix);    for (int t=1; t < nkeys; t++) {      final byte[] k=keys.get(t);      if (bitset != (k == null ? false : BytesUtil.getBit(keys.get(t),testPrefix))) {        return testPrefix - currentResolution;      }    }    testPrefix++;  }  return -1;}  }
class C{  public boolean isPublished(){  Object oo=get_Value(COLUMNNAME_IsPublished);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){}  }
class C{  public boolean isAvailable(){  return available;}  }
class C{  public static byte[] unsafeArray(ByteBuffer b){  return ((ByteArrayBuffer)b).backingArray;}  }
class C{  public ReadCommEventCounterRequest(){  super();  setFunctionCode(Modbus.READ_COMM_EVENT_COUNTER);  setDataLength(0);}  }
class C{  public void initialize(){  for (  VMwareHost hostSystem : hostsSystems.values()) {    hostSystem.setAllocatedMemoryMB(0);    hostSystem.setAllocatedCPUs(0);    hostSystem.setAllocatedVMs(0);  }  for (  VMwareVirtualMachine vm : vms) {    VMwareHost hostSystem=hostsSystems.get(vm.getHostName());    if (hostSystem != null) {      long vmMemMBytes=vm.getMemorySizeMB();      hostSystem.setAllocatedMemoryMB(hostSystem.getAllocatedMemoryMB() + vmMemMBytes);      hostSystem.setAllocatedCPUs(hostSystem.getAllocatedCPUs() + vm.getNumCpu());      hostSystem.setAllocatedVMs(hostSystem.getAllocatedVMs() + 1);    }  }}  }
class C{  public Attribute(String name,String[] events){  this.name=name;  this.events=events;}  }
class C{  @Override public void save(final OutputStream output,final String format){  throw new UnsupportedOperationException();}  }
class C{  protected void updateMaxMessageSizeExceeded() throws MessagingException {  setMaxMessageSizeExceeded(computeMaxMessageSizeExceeded());}  }
class C{  public static long parseDateAsEpoch(String dateStr){  return 0;}  }
class C{  private void focusLast(){  if (this.listElement.hasChildNodes()) {    this.listElement.getLastElementChild().focus();  }}  }
class C{  public ConcurrentIndexMap(Map<Integer,E> map){  this.array=new Object[map.size()];  putAll(map);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:51.403 -0500",hash_original_method="20230C77538103726EF6427B9F75CADF",hash_generated_method="19F803FF527995898E302F71A7078D34") public ObjectIdentifier(int[] oid){  validate(oid);  this.oid=oid;}  }
class C{  @Override public boolean hasLdapLoggedOut(HttpServletRequest request,HttpServletResponse response,Element rootElement){  String casTGC=UtilXml.childElementValue(rootElement,"CasTGTCookieName","CASTGC");  String casUrl=UtilXml.childElementValue(rootElement,"CasUrl","https://localhost:8443/cas");  Cookie[] cookies=request.getCookies();  if (cookies == null)   return true;  for (int i=0; i < cookies.length; i++) {    Cookie cookie=cookies[i];    if (cookie.getName().equals(casTGC) && casUrl.indexOf(cookie.getDomain()) > -1) {      return false;    }  }  return true;}  }
class C{  private void finish(){  this.writer.writeMainKml(this.mainKml);  this.writer.close();  log.info("DONE with writing kml file.");}  }
class C{  @Override public int graphType(){  return Drawable.TREE;}  }
class C{  private void startPlayback(Episode episode,boolean playImmediately){  int result=mAudioManager.requestAudioFocus(this,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);  if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {    mCurrentEpisode=episode;    registerReceivers();    acquireWifiLock();    mMediaPlayer.loadEpisode(new Episode(mCurrentEpisode));    mMediaPlayer.startPlayback(playImmediately);    mMediaPlayer.setPlaybackSpeed(AppPrefHelper.getInstance(this).getPlaybackSpeed(mCurrentEpisode.getChannelGeneratedId()));  } else {    Timber.d("Audiofocus not granted, result code: %d",result);  }}  }
class C{  public ColladaParserContext(String defaultNamespace){  this(null,defaultNamespace);}  }
class C{  public boolean isFixed(){  return m_isFixed;}  }
class C{  public QueryExecutionTimeoutException(){}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'JOKE_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  public void free(){  this.factory=null;  this.f=null;  this.in=null;  this.hnd=null;}  }
class C{  public final void requestDelegPolicy(boolean value){  if (state == STATE_NEW && isInitiator())   delegPolicyState=value;}  }
class C{  @Override public String toString(){  String result="ppc ";  if ((value & 0x1C0) == 0) {    result=result + "--ctr!=0 && ";  }  if ((value & 0x1C0) == 0x40) {    result=result + "--ctr==0 && ";  }  String temp=null;  if ((value & 0x300) == 0x100) {switch (value & 0x3) {case 0:      temp="<";    break;case 1:  temp=">";break;case 2:temp="==";break;case 3:temp="overflow";break;}}if ((value & 0x300) == 0x000) {switch (value & 0x3) {case 0:temp=">=";break;case 1:temp="<=";break;case 2:temp="!=";break;case 3:temp="not_overflow";break;}}return result + temp;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public PostfixMathCommand(){  numberOfParameters=0;  curNumberOfParameters=0;}  }
class C{  public void checkNewsFeed(){  if (isPage() || !getProcessNewsFeed()) {    return;  }  log("Checking news feed posts",Level.FINE);  try {    Network memory=getBot().memory().newMemory();    Vertex facebook=memory.createVertex(getPrimitive());    Vertex vertex=facebook.getRelationship(Primitive.LASTNEWSFEED);    long last=0;    if (vertex != null) {      last=((Number)vertex.getData()).longValue();    }    long max=0;    ResponseList<Post> timeline=null;    boolean more=true;    int page=1;    int count=0;    int like=0;    this.errors=0;    while (more && (count <= this.maxPost) && page <= this.maxPage) {      if (last == 0) {        timeline=getConnection().getHome(new Reading().fields("id","message","caption","description","created_time","from"));        more=false;      } else {        Reading paging=new Reading();        paging.fields("id","message","caption","description","created_time","from");        max=last;        paging.since(new Date(last));        timeline=getConnection().getHome(paging);        if ((timeline == null) || (timeline.size() < 20)) {          more=false;        }        page++;      }      if ((timeline == null) || timeline.isEmpty()) {        log("Empty news feed",Level.FINE);        break;      }      log("Processing posts",Level.INFO,timeline.size());      for (int index=timeline.size() - 1; index >= 0; index--) {        if (count >= this.maxPost) {          log("Max posts",Level.FINE,count);          break;        }        if (this.errors > this.maxErrors) {          log("Max errors",Level.WARNING,this.errors);          break;        }        Post post=timeline.get(index);        String userId=post.getFrom() == null ? "anonymous" : post.getFrom().getId();        String userName=post.getFrom() == null ? "anonymous" : post.getFrom().getName();        log("Processing post",Level.FINE,post.getId(),userName,post.getCaption());        long postTime=post.getCreatedTime().getTime();        String postId=post.getId();        if (postTime > max) {          max=postTime;        }        if (!userId.equals(this.userName)) {          if ((System.currentTimeMillis() - postTime) > DAY) {            log("Day old post",Level.INFO,postId,postTime);            more=false;            continue;          }          if (postTime > last) {            boolean match=false;            String message=post.getMessage();            if (message == null || message.isEmpty()) {              message=post.getCaption();            }            if (getLikeAllPosts()) {              if (like >= this.maxLike) {                log("Max like",Level.FINE,like);              } else {                like++;                like(post);                Utils.sleep(500);              }            }            if (message != null && !message.isEmpty()) {              List<String> postWords=new TextStream(message.toLowerCase()).allWords();              if (getLikeAllPosts()) {                for (                String keywords : getLikeKeywords()) {                  List<String> keyWords=new TextStream(keywords.toLowerCase()).allWords();                  if (!keyWords.isEmpty()) {                    if (postWords.containsAll(keyWords)) {                      if (like >= this.maxLike) {                        log("Max like",Level.FINE,like);                      } else {                        like++;                        like(post);                        Utils.sleep(500);                      }                      break;                    }                  }                }              }              for (              String text : getNewsFeedKeywords()) {                List<String> keywords=new TextStream(text.toLowerCase()).allWords();                if (!keywords.isEmpty() && postWords.containsAll(keywords)) {                  match=true;                  break;                }              }              if (match || getProcessAllNewsFeed()) {                count++;                log("Processing post",Level.FINE,post.getCaption(),post.getDescription(),post.getMessage(),userId,userName);                input(post);                Utils.sleep(500);              } else {                log("Skipping post, missing keywords.",Level.FINE,post.getCaption(),post.getDescription(),post.getMessage());              }            } else {              log("Empty message",Level.FINE,post);            }          } else {            log("Old post",Level.INFO,postId,postTime);          }        }      }    }    if (max != 0) {      facebook.setRelationship(Primitive.LASTNEWSFEED,memory.createVertex(max));      memory.save();    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public AttCertIssuer(GeneralNames names){  obj=names;  choiceObj=obj.toASN1Primitive();}  }
class C{  BufferedImage processImage(GenericColorSpace decodeColorData,final ImageData imageData,final boolean imageMask,final PdfObject XObject) throws PdfException {  cache.put(PdfObjectCache.ColorspacesUsed,decodeColorData.getID(),"x");  imageData.getFilter(XObject);  BufferedImage image=null;  if (customImageHandler instanceof ImageDataHandler) {    image=customImageHandler.processImageData(gs,XObject);  } else   if (imageData.isJPX()) {    removeJPXEncodingFromImageData(imageData,XObject);  } else   if (imageData.isDCT()) {    int adobeColorTransform=1;    PdfObject decodeParms=XObject.getDictionary(PdfDictionary.DecodeParms);    if (decodeParms != null) {      adobeColorTransform=decodeParms.getInt(PdfDictionary.ColorTransform);    }    byte[] objectData;    try {      objectData=JPEGDecoder.getUnconvertedBytesFromJPEG(imageData.getObjectData(),adobeColorTransform);      if (objectData == null) {        objectData=JPEGDecoder.getBytesFromJPEGWithImageIO(imageData.getObjectData(),decodeColorData,XObject);        decodeColorData=new DeviceRGBColorSpace();        imageData.setCompCount(3);        imageData.setDecodeArray(null);      }    } catch (    Exception e) {      LogWriter.writeLog("[PDF] Exception " + e + " Processing JPEG data in ImageDecoder");      objectData=JPEGDecoder.getBytesFromJPEGWithImageIO(imageData.getObjectData(),decodeColorData,XObject);      decodeColorData=new DeviceRGBColorSpace();      imageData.setCompCount(3);      imageData.setDecodeArray(null);    }    XObject.setMixedArray(PdfDictionary.Filter,null);    XObject.setDecodedStream(objectData);    imageData.setObjectData(objectData);    imageData.setDCT(false);    imageData.setDepth(8);    imageData.wasDCT(true);  }  if (image != null) {    return image;  } else {    return convertDataToImage(imageMask,imageData,XObject,decodeColorData);  }}  }
class C{  public synchronized boolean isCapabilitiesFinished(){  return isProcessFinished;}  }
class C{  public EditableOMLine(OMLine oml){  setGraphic(oml);}  }
class C{  public int bufferId(){  return impl;}  }
class C{  public boolean requiresProxy(){  return remoteProxyHost != null;}  }
class C{  @Override public void accept(final MethodVisitor mv){  mv.visitInsn(opcode);  acceptAnnotations(mv);}  }
class C{  public Key min(){  if (isEmpty())   throw new NoSuchElementException("called min() with empty symbol table");  return min(root).key;}  }
class C{  public RootElement(String uri,String localName){  super(null,uri,localName,0);}  }
class C{  public static double findBestShift(double[] laserT,double[] touchT,double[] touchY){  int steps=1500;  double shiftStep=0.1;  double[] T=new double[laserT.length];  double[] devs=new double[steps];  for (int i=0; i < steps; i++) {    for (int j=0; j < T.length; j++) {      T[j]=laserT[j] + shiftStep * i;    }    double[] laserY=Utils.interp(T,touchT,touchY);    devs[i]=Utils.stdev(laserY);  }  double bestShift=argmin(devs) * shiftStep;  return bestShift;}  }
class C{  private void addBodyAction(){  SandboxBody body=AddBodyDialog.show(ControlUtilities.getParentWindow(this));  if (body != null) {synchronized (Simulation.LOCK) {      this.simulation.getWorld().addBody(body);    }    DefaultMutableTreeNode bodyNode=new DefaultMutableTreeNode(body);    this.model.insertNodeInto(bodyNode,this.bodyFolder,this.bodyFolder.getChildCount());    this.tree.expandPath(new TreePath(bodyNode.getPath()).getParentPath());  }}  }
class C{  private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Caching HTTP Headers Filter");  FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter(jHipsterProperties));  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/content/*");  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/app/*");  cachingHttpHeadersFilter.setAsyncSupported(true);}  }
class C{  public PatchSet.Id asPatchSetId(){  return psId;}  }
class C{  public NonRepeatableRequestException(String message){  super(message);}  }
class C{  private String buildParameterString(final Object[] parameters){  StringBuffer parameter=new StringBuffer();  if (parameters != null) {    for (int i=0; i < parameters.length; i++) {      if (parameters[i] == null) {        parameter.append("null, ");      } else       if (parameters[i] instanceof java.lang.String) {        parameter.append("\"").append(parameters[i]).append("\", ");      } else {        parameter.append(parameters[i]).append(", ");      }    }  }  if (parameter.length() > 0) {    parameter.delete(parameter.length() - 2,parameter.length() - 1);  }  return parameter.toString();}  }
class C{  public CTagTransferable(final List<INaviModule> modules){  Preconditions.checkNotNull(modules,"IE01929: Modules argument can't be null");  m_modules=new ArrayList<INaviModule>(modules);}  }
class C{  protected void decodeLineStyle(Object lineStyleFlag){  if (lineStyleFlag == null || lineStyleFlag.equals(LEG_LINE_STYLE_STRING)) {    lineStyle=LEG_LINE_STYLE;  } else {    if (lineStyleFlag.equals(NO_STYLE_STRING)) {      lineStyle=NO_LINE_STYLE;    } else     if (lineStyleFlag.equals(HORIZ_STYLE_STRING)) {      lineStyle=HORIZ_LINE_STYLE;    }  }}  }
class C{  public void addTWord(TWord tword){  sentence.add(tword);}  }
class C{  private void logODataPerf(String query,long delta_time){  LOGGER.debug("Synchronizer#" + getId() + " query("+ query+ ") done in "+ delta_time+ "ms");}  }
class C{  @Override @Deprecated public List<Runnable> shutdownNow(){  throw new UnsupportedOperationException();}  }
class C{  public static Scsd cs_dmperm(Scs A,int seed){  int m, n, i, j, k, cnz, nc, jmatch[], imatch[], wi[], wj[], pinv[], Cp[], Ci[], ps[], rs[], nb1, nb2, p[], q[], cc[], rr[], r[], s[];  boolean ok;  Scs C;  Scsd S, scc;  if (!Scs_util.CS_CSC(A))   return (null);  m=A.m;  n=A.n;  S=Scs_util.cs_dalloc(m,n);  if (S == null)   return (null);  p=S.p;  q=S.q;  r=S.r;  s=S.s;  cc=S.cc;  rr=S.rr;  jmatch=Scs_maxtrans.cs_maxtrans(A,seed);  imatch=jmatch;  int imatch_offset=m;  if (jmatch == null)   return (null);  wi=r;  wj=s;  for (j=0; j < n; j++)   wj[j]=-1;  for (i=0; i < m; i++)   wi[i]=-1;  cs_bfs(A,n,wi,wj,q,imatch,imatch_offset,jmatch,0,1);  ok=cs_bfs(A,m,wj,wi,p,jmatch,0,imatch,imatch_offset,3);  if (!ok)   return (null);  cs_unmatched(n,wj,q,cc,0);  cs_matched(n,wj,imatch,imatch_offset,p,q,cc,rr,1,1);  cs_matched(n,wj,imatch,imatch_offset,p,q,cc,rr,2,-1);  cs_matched(n,wj,imatch,imatch_offset,p,q,cc,rr,3,3);  cs_unmatched(m,wi,p,rr,3);  jmatch=null;  pinv=Scs_pinv.cs_pinv(p,m);  if (pinv == null)   return (null);  C=Scs_permute.cs_permute(A,pinv,q,false);  pinv=null;  if (C == null)   return (null);  Cp=C.p;  nc=cc[3] - cc[2];  if (cc[2] > 0)   for (j=cc[2]; j <= cc[3]; j++)   Cp[j - cc[2]]=Cp[j];  C.n=nc;  if (rr[2] - rr[1] < m) {    Scs_fkeep.cs_fkeep(C,new Cs_rprune(),rr);    cnz=Cp[nc];    Ci=C.i;    if (rr[1] > 0)     for (k=0; k < cnz; k++)     Ci[k]-=rr[1];  }  C.m=nc;  scc=Scs_scc.cs_scc(C);  if (scc == null)   return (null);  ps=scc.p;  rs=scc.r;  nb1=scc.nb;  for (k=0; k < nc; k++)   wj[k]=q[ps[k] + cc[2]];  for (k=0; k < nc; k++)   q[k + cc[2]]=wj[k];  for (k=0; k < nc; k++)   wi[k]=p[ps[k] + rr[1]];  for (k=0; k < nc; k++)   p[k + rr[1]]=wi[k];  nb2=0;  r[0]=s[0]=0;  if (cc[2] > 0)   nb2++;  for (k=0; k < nb1; k++) {    r[nb2]=rs[k] + rr[1];    s[nb2]=rs[k] + cc[2];    nb2++;  }  if (rr[2] < m) {    r[nb2]=rr[2];    s[nb2]=cc[3];    nb2++;  }  r[nb2]=m;  s[nb2]=n;  S.nb=nb2;  return S;}  }
class C{  public BufferedLayerMapBean(){  super();  DEBUG=logger.isLoggable(Level.FINE);}  }
class C{  public void addTextProperty(String propertyName,TextNode node){  addChild(node);}  }
class C{  boolean versionMeetsMinimum(int major,int minor,int subminor){  if (getServerMajorVersion() >= major) {    if (getServerMajorVersion() == major) {      if (getServerMinorVersion() >= minor) {        if (getServerMinorVersion() == minor) {          return (getServerSubMinorVersion() >= subminor);        }        return true;      }      return false;    }    return true;  }  return false;}  }
class C{  public static long toLongFromNibbles(byte[] nibbles){  return toLong(nibbles[0],nibbles[1],nibbles[2],nibbles[3],nibbles[4],nibbles[5],nibbles[6],nibbles[7],nibbles[8],nibbles[9],nibbles[10],nibbles[11],nibbles[12],nibbles[13],nibbles[14],nibbles[15]);}  }
class C{  private void verifyChainIsCalled(final FilterChain chain) throws IOException, ServletException {  verify(chain,Mockito.atLeastOnce()).doFilter(Mockito.any(HttpServletRequest.class),Mockito.any(HttpServletResponse.class));}  }
class C{  protected Class findClass(String name) throws ClassNotFoundException {  Class c=null;  if (name.startsWith("java.") || name.startsWith("javax.") || name.equals("javassist.tools.web.Viewer"))   c=findSystemClass(name);  if (c == null)   try {    byte[] b=fetchClass(name);    if (b != null)     c=defineClass(name,b,0,b.length);  } catch (  Exception e) {  }  return c;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public Node buildTreeFull(Node node,int depth){  if (depth == 0) {    return node.copyNode();  } else {    Node copy=node.copyNode();    for (int i=0; i < node.getNumberOfArguments(); i++) {      if (node.getArgument(i) == null) {        copy.setArgument(i,buildTreeFull(node.getArgumentType(i),depth - 1));      } else {        copy.setArgument(i,buildTreeFull(node.getArgument(i),depth - 1));      }    }    return copy;  }}  }
class C{  public Notifications text(String text){  this.text=text;  return this;}  }
class C{  protected String codenvyDockerFileLocation(){  return "https://raw.githubusercontent.com/" + this.username + "/"+ this.repository+ "/"+ this.branch()+ "/.codenvy.dockerfile";}  }
class C{  public boolean hasCurrentLimit(){  return this.hasExtraFeatures();}  }
class C{  protected void validateAccessBeforeUpdate(final Object object,final Class objectType) throws AccessDeniedException {  if (!federationFacade.isManageable(object,objectType)) {    throw new AccessDeniedException("access denied");  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.DISPLAY_COLOR___ANONYMOUS_DISPLAY_COLOR_11:    getAnonymous_displayColor_1_1().clear();  getAnonymous_displayColor_1_1().addAll((Collection<? extends String>)newValue);return;case UmplePackage.DISPLAY_COLOR___COLOR_VALUE_1:setColorValue_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Matrix4f rotateYXZ(Vector3f angles){  return rotateYXZ(angles.y,angles.x,angles.z);}  }
class C{  WorkerThread(SimpleThreadPool tp,ThreadGroup threadGroup,String name,int prio,boolean isDaemon){  this(tp,threadGroup,name,prio,isDaemon,null);}  }
class C{  public int degree(){  int degree=0;  HalfEdge e=this;  do {    degree++;    e=e.oNext();  } while (e != this);  return degree;}  }
class C{  public static MultiErrorException of(String fieldName,String messageKey,Object... args){  MultiErrorException exception=new MultiErrorException();  exception.errors.add(new FieldError(fieldName,messageKey,LemonUtil.getMessage(messageKey,args)));  return exception;}  }
class C{  @SuppressWarnings("unchecked") @Override public Object clone(){  HashMap<K,V> result;  try {    result=(HashMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }  result.makeTable(table.length);  result.entryForNullKey=null;  result.size=0;  result.keySet=null;  result.entrySet=null;  result.values=null;  result.init();  result.constructorPutAll(this);  return result;}  }
class C{  public void deleteAllRecords(){  if (mManager != null)   mManager.deleteAllRecords();}  }
class C{  public static boolean testLineSegmentSphere(double p0X,double p0Y,double p0Z,double p1X,double p1Y,double p1Z,double centerX,double centerY,double centerZ,double radiusSquared){  double dX=p1X - p0X;  double dY=p1Y - p0Y;  double dZ=p1Z - p0Z;  double nom=(centerX - p0X) * dX + (centerY - p0Y) * dY + (centerZ - p0Z) * dZ;  double den=dX * dX + dY * dY + dZ * dZ;  double u=nom / den;  if (u < 0.0) {    dX=p0X - centerX;    dY=p0Y - centerY;    dZ=p0Z - centerZ;  } else   if (u > 1.0) {    dX=p1X - centerX;    dY=p1Y - centerY;    dZ=p1Z - centerZ;  } else {    double pX=p0X + u * dX;    double pY=p0Y + u * dY;    double pZ=p0Z + u * dZ;    dX=pX - centerX;    dY=pY - centerY;    dZ=pZ - centerZ;  }  double dist=dX * dX + dY * dY + dZ * dZ;  return dist <= radiusSquared;}  }
class C{  private View createFakeView(Context context){  View view=new View(context);  view.setLayoutParams(new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,fakeElementHeight));  view.setBackgroundColor(Color.argb(0,0,0,0));  return view;}  }
class C{  public Point location(int x,int y){  Point loc=new Point(0,0);  int i, d;  if (layoutInfo == null)   return loc;  d=layoutInfo.startx;  if (!rightToLeft) {    for (i=0; i < layoutInfo.width; i++) {      d+=layoutInfo.minWidth[i];      if (d > x)       break;    }  } else {    for (i=layoutInfo.width - 1; i >= 0; i--) {      if (d > x)       break;      d+=layoutInfo.minWidth[i];    }    i++;  }  loc.x=i;  d=layoutInfo.starty;  for (i=0; i < layoutInfo.height; i++) {    d+=layoutInfo.minHeight[i];    if (d > y)     break;  }  loc.y=i;  return loc;}  }
class C{  LongSet(int sz){  vals=new long[sz];  mask=sz - 1;  threshold=(int)(sz * LOAD_FACTOR);}  }
class C{  public ToggleInlineMenuButtonBuilder<T> toggleButton(String text){  return new ToggleInlineMenuButtonBuilder<>(this,buttons().size(),text);}  }
class C{  public M next(){  if (hasNext()) {    return get(--cursor);  }  return null;}  }
class C{  public static Bitmap parseToRGB(byte[] data,int length,boolean transparency){  int valueIndex=0;  int width=data[valueIndex++] & 0xFF;  int height=data[valueIndex++] & 0xFF;  int bits=data[valueIndex++] & 0xFF;  int colorNumber=data[valueIndex++] & 0xFF;  int clutOffset=((data[valueIndex++] & 0xFF) << 8) | (data[valueIndex++] & 0xFF);  int[] colorIndexArray=getCLUT(data,clutOffset,colorNumber);  if (true == transparency) {    colorIndexArray[colorNumber - 1]=Color.TRANSPARENT;  }  int[] resultArray=null;  if (0 == (8 % bits)) {    resultArray=mapTo2OrderBitColor(data,valueIndex,(width * height),colorIndexArray,bits);  } else {    resultArray=mapToNon2OrderBitColor(data,valueIndex,(width * height),colorIndexArray,bits);  }  return Bitmap.createBitmap(resultArray,width,height,Bitmap.Config.RGB_565);}  }
class C{  public final double doOperation(){  int[] allocations=new int[allocationParameter.getDimension()];  int[] occupancy=new int[N];  int[] occupiedIndices=new int[N];  for (int i=0; i < occupiedIndices.length; i++) {    occupiedIndices[i]=-1;  }  int K=0;  for (int i=0; i < allocations.length; i++) {    allocations[i]=(int)allocationParameter.getParameterValue(i);    occupancy[allocations[i]]+=1;    if (occupancy[allocations[i]] == 1) {      occupiedIndices[K]=allocations[i];      K++;    }  }  int paramDim=clusterLocations.getParameter(0).getDimension();  double[] splitDraw=new double[paramDim];  double scale=1.0;  double newClusterProb=0.5;  boolean doSplit=K == 1 || (K != N && MathUtils.nextBoolean());  if (doSplit) {    int cluster1;    do {      cluster1=occupiedIndices[MathUtils.nextInt(K)];    } while (occupancy[cluster1] == 0);    int cluster2=0;    while (occupancy[cluster2] > 0) {      cluster2++;    }    int oldCount=occupancy[cluster1];    do {      occupancy[cluster1]=0;      occupancy[cluster2]=0;      for (int i=0; i < allocations.length; i++) {        if (allocations[i] == cluster1 || allocations[i] == cluster2) {          boolean putInNewCluster=MathUtils.nextDouble() < newClusterProb;          if (putInNewCluster) {            allocations[i]=cluster2;            occupancy[cluster2]++;          } else {            allocations[i]=cluster1;            occupancy[cluster1]++;          }        }      }    } while (occupancy[cluster1] != 0 && occupancy[cluster2] != 0);    K++;    Parameter param1=clusterLocations.getParameter(cluster1);    Parameter param2=clusterLocations.getParameter(cluster2);    double[] loc=param1.getParameterValues();    for (int dim=0; dim < param1.getDimension(); dim++) {      splitDraw[dim]=MathUtils.nextGaussian();      param1.setParameterValue(dim,loc[dim] + (splitDraw[dim] * scale));      param2.setParameterValue(dim,loc[dim] - (splitDraw[dim] * scale));    }    if (DEBUG) {      System.err.println("Split: " + (oldCount - occupancy[cluster1]) + " items from cluster "+ cluster1+ " to create cluster "+ cluster2);    }  } else {    int cluster1=occupiedIndices[MathUtils.nextInt(K)];    int cluster2;    do {      cluster2=occupiedIndices[MathUtils.nextInt(K)];    } while (cluster1 == cluster2);    for (int i=0; i < allocations.length; i++) {      if (allocations[i] == cluster2) {        allocations[i]=cluster1;        occupancy[cluster1]++;        occupancy[cluster2]--;      }    }    K--;    Parameter loc1=clusterLocations.getParameter(cluster1);    Parameter loc2=clusterLocations.getParameter(cluster2);    for (int dim=0; dim < loc1.getDimension(); dim++) {      double average=(loc1.getParameterValue(dim) + loc2.getParameterValue(dim)) / 2.0;      splitDraw[dim]=(loc1.getParameterValue(dim) - average) / scale;      loc1.setParameterValue(dim,average);    }    if (DEBUG) {      System.err.println("Merge: " + occupancy[cluster1] + "items into cluster "+ cluster1+ " from "+ cluster2);    }  }  for (int i=0; i < allocations.length; i++) {    int k=(int)allocationParameter.getParameterValue(i);    if (allocations[i] != k) {      allocationParameter.setParameterValue(i,allocations[i]);    }  }  return 0.0;}  }
class C{  public IMarker createMarker() throws CoreException {  IMarker marker=resource.createMarker(type);  marker.setAttributes(attributes);  return marker;}  }
class C{  public T take(){  try {    T object=queue.poll(1,TimeUnit.MINUTES);    LOGGER.debug("Getting element from queue: {}",object);    return object;  } catch (  InterruptedException e) {    LOGGER.warn("InterruptedException occurred. Returning null value to callee.",e);    throw new IllegalStateException("Try to poll time series records for more than 1 Minute. Stopping.",e);  }}  }
class C{  public boolean isHoleTransparent(){  return ((PieChartRenderer)mRenderer).getPaintHole().getXfermode() != null;}  }
class C{  @GET @Path("{guid}/inputs/graph") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public Response inputsGraph(@PathParam("guid") String guid){  LOG.info("Fetching lineage inputs graph for guid={}",guid);  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"LineageResource.inputsGraph(" + guid + ")");    }    final String jsonResult=lineageService.getInputsGraphForEntity(guid);    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    response.put(AtlasClient.RESULTS,new JSONObject(jsonResult));    return Response.ok(response).build();  } catch (  EntityNotFoundException e) {    LOG.error("entity not found for guid={}",guid);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  DiscoveryException|IllegalArgumentException e) {    LOG.error("Unable to get lineage inputs graph for entity  guid={}",guid,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to get lineage inputs graph for entity guid={}",guid,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public Certificate[] engineGetCertificateChain(String alias){  Certificate[] chain=null;  Object entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if ((entry instanceof PrivateKeyEntry) && (((PrivateKeyEntry)entry).chain != null)) {    chain=((PrivateKeyEntry)entry).chain.clone();  }  return chain;}  }
class C{  @NonNull static HasResponseBodyManager create(){  if (ReflectionUtils.hasClass("okhttp3.internal.http.HttpHeaders")) {    return new HasResponseBodyManager(true,null);  } else {    Method method=ReflectionUtils.getMethod("okhttp3.internal.http.HttpEngine","hasBody",Response.class);    if (method == null) {      throw new IllegalStateException("Response hasBody method is not available");    }    return new HasResponseBodyManager(false,method);  }}  }
class C{  private long computeInterfaceHash(){  long hash=0;  ByteArrayOutputStream sink=new ByteArrayOutputStream(512);  try {    MessageDigest md=MessageDigest.getInstance("SHA");    DataOutputStream out=new DataOutputStream(new DigestOutputStream(sink,md));    out.writeInt(INTERFACE_HASH_STUB_VERSION);    for (int i=0; i < remoteMethods.length; i++) {      MemberDefinition m=remoteMethods[i].getMemberDefinition();      Identifier name=m.getName();      Type type=m.getType();      out.writeUTF(name.toString());      out.writeUTF(type.getTypeSignature());      ClassDeclaration exceptions[]=m.getExceptions(env);      sortClassDeclarations(exceptions);      for (int j=0; j < exceptions.length; j++) {        out.writeUTF(Names.mangleClass(exceptions[j].getName()).toString());      }    }    out.flush();    byte hashArray[]=md.digest();    for (int i=0; i < Math.min(8,hashArray.length); i++) {      hash+=((long)(hashArray[i] & 0xFF)) << (i * 8);    }  } catch (  IOException e) {    throw new Error("unexpected exception computing intetrface hash: " + e);  }catch (  NoSuchAlgorithmException e) {    throw new Error("unexpected exception computing intetrface hash: " + e);  }  return hash;}  }
class C{  public static final Object[] filter(Object[] objects,Class<?> theClass){  Object o;  int i, k;  for (i=0, k=0; i < objects.length; i++) {    o=objects[i];    if (o.getClass() == theClass) {      objects[k]=o;      k++;    }  }  Object[] filteredObjects=objects;  if (i != k) {    filteredObjects=new IMovingAgent[k];    System.arraycopy(objects,0,filteredObjects,0,k);  }  return filteredObjects;}  }
class C{  public void testDynFloatMissingFunction() throws Exception {  checkSortMissingFunction("dyn_floatdv","-1.3","4.2");}  }
class C{  public TupleSerializer(final IKeyBuilderFactory keyBuilderFactory){  super(keyBuilderFactory);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static String addParam(String path,String name,String value){  StringBuffer uri=new StringBuffer(path);  boolean isQuery=(path.indexOf("?") >= 0);  if (isQuery)   uri.append("&"); else   uri.append("?");  uri.append(name);  uri.append("=");  uri.append(value);  return uri.toString();}  }
class C{  public void testTopTermsRewrite() throws Exception {  initializeIndex(new String[]{"A","B","C","D","E","F","G","H","I","J","K"});  IndexReader reader=DirectoryReader.open(dir);  IndexSearcher searcher=newSearcher(reader);  TermRangeQuery query=TermRangeQuery.newStringRange("content","B","J",true,true);  checkBooleanTerms(searcher,query,"B","C","D","E","F","G","H","I","J");  final int savedClauseCount=BooleanQuery.getMaxClauseCount();  try {    BooleanQuery.setMaxClauseCount(3);    checkBooleanTerms(searcher,query,"B","C","D");  }  finally {    BooleanQuery.setMaxClauseCount(savedClauseCount);  }  reader.close();}  }
class C{  public static void debug(String msg){  System.out.println(msg);}  }
class C{  public void onConfigurationChanged(Configuration newConfig){  Logger.d(TAG,"onConfigurationChanged");  if (shouldRelaunch(newConfig)) {    Logger.v(TAG,"Relaunch");    launch();  }  this.configuration=new Configuration(newConfig);}  }
class C{  public void formatOperandsAndComment(StatementContext context,boolean updateRegisters,Set<OutputOption> outputOptions) throws DisassemblyException {  decodedImm=imm;  decodedImmBitWidth=immBitWidth;  setOperandString(format(context,outputOptions,instruction.getOperandFormat()));  setCommentString(format(context,outputOptions,instruction.getCommentFormat()));  executeAction(context,updateRegisters);  setDelaySlotType(context.getStoredDelaySlotType());  context.setStoredDelaySlotType(instruction.getDelaySlotType());  boolean newIsBreak=BREAK_FLOW_TYPES.contains(instruction.getFlowType());  if (instruction.getDelaySlotType() == Instruction.DelaySlotType.NONE) {    setMustInsertLineBreak(context.isLineBreakRequested() || newIsBreak);    context.setLineBreakRequest(false);  } else {    setMustInsertLineBreak(false);    context.setLineBreakRequest(newIsBreak);  }}  }
class C{  protected List<OrderByPiece> prepareOrderBy(SelectUniversal subselect,List<ISelectPiece> levels,List<OrderByMapping> OrderByMapping) throws RenderingException, ScopeException, ComputingException, InterruptedException {  List<OrderByPiece> orderBy=new ArrayList<OrderByPiece>();  Iterator<ISelectPiece> iter_levels=levels.iterator();  if (hasGrandTotal()) {    ISelectPiece level_top=iter_levels.next();    orderBy.add(new OrderByPiece(new SelectPieceReference(null,level_top),ORDERING.DESCENT));  }  Iterator<GroupByAxis> iter_rollup=getRollup().iterator();  GroupByAxis next_rollup=null;  ISelectPiece next_level=null;  if (iter_levels.hasNext()) {    next_rollup=iter_rollup.next();    next_level=iter_levels.next();  }  Iterator<OrderByMapping> iter_mapping=OrderByMapping.iterator();  OrderByMapping next_orderBy=null;  if (iter_mapping.hasNext()) {    next_orderBy=iter_mapping.next();  }  while (next_rollup != null && next_orderBy != null) {    ExpressionAST expr=next_orderBy.getOrderBy().getExpression();    Axis axis=getUniverse().asAxis(expr);    if (axis == null || !axis.isParentDimension(next_rollup.getAxis())) {      orderBy.add(new OrderByPiece(new SelectPieceReference(null,next_level),ordering(next_rollup.getRollupPosition())));      if (iter_levels.hasNext()) {        next_rollup=iter_rollup.next();        next_level=iter_levels.next();      } else {        next_rollup=null;        next_level=null;      }    } else {      SelectPieceReference alias=new SelectPieceReference(null,next_orderBy.getPiece());      orderBy.add(new OrderByPiece(alias,next_orderBy.getOrderBy().getOrdering()));      if (iter_mapping.hasNext()) {        next_orderBy=iter_mapping.next();      } else {        next_orderBy=null;      }    }  }  while (next_rollup != null) {    orderBy.add(new OrderByPiece(new SelectPieceReference(null,next_level),ordering(next_rollup.getRollupPosition())));    if (iter_levels.hasNext()) {      next_rollup=iter_rollup.next();      next_level=iter_levels.next();    } else {      next_rollup=null;      next_level=null;    }  }  while (next_orderBy != null) {    SelectPieceReference alias=new SelectPieceReference(null,next_orderBy.getPiece());    orderBy.add(new OrderByPiece(alias,next_orderBy.getOrderBy().getOrdering()));    if (iter_mapping.hasNext()) {      next_orderBy=iter_mapping.next();    } else {      next_orderBy=null;    }  }  return orderBy;}  }
class C{  void printTabuList(){  for (int i=0; i < m_nTabuList; i++) {    Operation o=m_oTabuList[i];    if (o != null) {      if (o.m_nOperation == 0) {        System.out.print(" +(");      } else {        System.out.print(" -(");      }      System.out.print(o.m_nTail + "->" + o.m_nHead+ ")");    }  }  System.out.println();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  if (fullName != null) {    sb.append("DistributionPointName:\n     " + fullName + "\n");  } else {    sb.append("DistributionPointName:\n     " + relativeName + "\n");  }  return sb.toString();}  }
class C{  public void updateSelection(){  checkWidget();  if (isDisposed()) {    return;  }  if (this.popup == null || this.popup.isDisposed() || this.checkboxes == null) {    return;  }  for (int i=0; i < this.checkboxes.size(); i++) {    final Button currentButton=this.checkboxes.get(i);    if (!currentButton.isDisposed()) {      final Object content=currentButton.getData();      currentButton.setSelection(this.selection.contains(content));    }  }  setLabel();}  }
class C{  @SuppressWarnings("unchecked") @Override public Integer doInBackground(Iterator<String>... contactsIter){  return insertAllContacts(contactsIter[0]);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Object initializeScalarHeader(Address ptr,TIB tib,int size){  Object ref=Magic.addressAsObject(ptr.plus(OBJECT_REF_OFFSET));  return ref;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void reduce() throws ReplicatorException, InterruptedException {  logger.info("Reducing tasks: service=" + serviceName);}  }
class C{  public List<AllocationCommand> commands(){  return this.commands;}  }
class C{  public static void assertSame(Object expected,Object actual){  if (expected == actual) {    return;  }  failNotSame(null,expected,actual);}  }
class C{  public boolean isMissing(){  return isMissing;}  }
class C{  @VisibleForTesting protected boolean isMiniDumpCleanNeeded(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  boolean cleanNeeded=!sharedPreferences.contains(MinidumpUploadCallable.PREF_LAST_UPLOAD_DAY) && PrivacyPreferencesManager.getInstance(getApplicationContext()).isUploadLimited();  if (cleanNeeded) {    sharedPreferences.edit().putInt(MinidumpUploadCallable.PREF_LAST_UPLOAD_DAY,0).apply();  }  return cleanNeeded;}  }
class C{  public SgmExcepcion(String message){  this(message,null);}  }
class C{  public void initialize(UimaContext aContext){  this.language=Language.getLanguageFromString((String)aContext.getConfigParameterValue(PARAM_LANGUAGE));  annotate_tokens=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_TOKENS);  annotate_sentences=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_SENTENCES);  annotate_partofspeech=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_PARTOFSPEECH);  String cnTokPath=(String)aContext.getConfigParameterValue(PARAM_CHINESE_TOKENIZER_PATH);  ttprops.languageName=language.getTreeTaggerLangName();  if (ttprops.rootPath == null)   ttprops.rootPath=System.getenv("TREETAGGER_HOME");  ttprops.tokScriptName="utf8-tokenize.perl";  if (!(new File(ttprops.rootPath + ttprops.fileSeparator + "lib",ttprops.languageName + "-utf8.par").exists()))   ttprops.parFileName=ttprops.languageName + ".par"; else   ttprops.parFileName=ttprops.languageName + "-utf8.par";  if (new File(ttprops.rootPath + ttprops.fileSeparator + "lib",ttprops.languageName + "-abbreviations-utf8").exists()) {    ttprops.abbFileName=ttprops.languageName + "-abbreviations-utf8";  } else {    ttprops.abbFileName=ttprops.languageName + "-abbreviations";  }  ttprops.languageSwitch=language.getTreeTaggerSwitch();  if (cnTokPath != null && !cnTokPath.equals(""))   ttprops.chineseTokenizerPath=new File(cnTokPath); else   ttprops.chineseTokenizerPath=new File(ttprops.rootPath,"cmd");  if (ttprops.rootPath == null) {    Logger.printError("TreeTagger environment variable is not present, aborting.");    System.exit(-1);  }  Boolean abbFileFlag=true;  Boolean parFileFlag=true;  Boolean tokScriptFlag=true;  File abbFile=new File(ttprops.rootPath + ttprops.fileSeparator + "lib",ttprops.abbFileName);  File parFile=new File(ttprops.rootPath + ttprops.fileSeparator + "lib",ttprops.parFileName);  File tokFile=new File(ttprops.rootPath + ttprops.fileSeparator + "cmd",ttprops.tokScriptName);  if (!(abbFileFlag=abbFile.exists())) {    if (language.equals(Language.CHINESE) || language.equals(Language.RUSSIAN)) {      abbFileFlag=true;      ttprops.abbFileName=null;    } else {      Logger.printError(component,"File missing to use TreeTagger tokenizer: " + ttprops.abbFileName);    }  }  if (!(parFileFlag=parFile.exists())) {    Logger.printError(component,"File missing to use TreeTagger tokenizer: " + ttprops.parFileName);  }  if (!(tokScriptFlag=tokFile.exists())) {    if (language.equals(Language.CHINESE))     tokScriptFlag=true; else     Logger.printError(component,"File missing to use TreeTagger tokenizer: " + ttprops.tokScriptName);  }  if (!abbFileFlag || !parFileFlag || !tokScriptFlag) {    Logger.printError(component,"Cannot find tree tagger (" + ttprops.rootPath + ttprops.fileSeparator+ "cmd"+ ttprops.fileSeparator+ ttprops.tokScriptName+ ")."+ " Make sure that path to tree tagger is set correctly in config.props!");    Logger.printError(component,"If path is set correctly:");    Logger.printError(component,"Maybe you need to download the TreeTagger tagger-scripts.tar.gz");    Logger.printError(component,"from http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/data/tagger-scripts.tar.gz");    Logger.printError(component,"Extract this file and copy the missing file into the corresponding TreeTagger directories.");    Logger.printError(component,"If missing, copy " + ttprops.abbFileName + " into "+ ttprops.rootPath+ ttprops.fileSeparator+ "lib");    Logger.printError(component,"If missing, copy " + ttprops.parFileName + " into "+ ttprops.rootPath+ ttprops.fileSeparator+ "lib");    Logger.printError(component,"If missing, copy " + ttprops.tokScriptName + " into "+ ttprops.rootPath+ ttprops.fileSeparator+ "cmd");    System.exit(-1);  }}  }
class C{  private <T extends DataObject>void dumpBeanProperties(PropertyDescriptor[] pds,T object) throws Exception {  Element record=doc.createElement("record");  record.setAttribute("id",object.getId().toString());  schemaNode.appendChild(record);  Element readOnlyElement=doc.createElement("readOnlyField");  record.appendChild(readOnlyElement);  System.out.println("id: " + object.getId().toString());  Object objValue;  Class type;  for (  PropertyDescriptor pd : pds) {    objValue=pd.getReadMethod().invoke(object);    if (objValue == null) {      continue;    }    if (pd.getName().toLowerCase().matches("[a-zA-Z\\d]*password[a-zA-Z\\d]*")) {      continue;    }    if (pd.getName().equals("class") || pd.getName().equals("id")) {      Element readOnlyfieldNode=doc.createElement("field");      readOnlyfieldNode.setAttribute("type",pd.getPropertyType().toString().substring(6));      readOnlyfieldNode.setAttribute("name",pd.getName().toString());      readOnlyfieldNode.setAttribute("value",objValue.toString());      readOnlyElement.appendChild(readOnlyfieldNode);      continue;    }    Name name=pd.getReadMethod().getAnnotation(Name.class);    if (name == null) {      log.info("Ignore data object fields without @Name annotation, fieldName={}.",pd.getName());      continue;    }    String objKey=name.value();    type=pd.getPropertyType();    if (DEBUG) {      System.out.print("\t" + pd.getPropertyType() + "\t"+ objKey+ " = ");    }    Element fieldNode=doc.createElement("field");    fieldNode.setAttribute("type",type.toString().substring(6));    fieldNode.setAttribute("name",objKey);    if (type == StringSetMap.class) {      StringSetMap stringSetMap=(StringSetMap)objValue;      FieldType.marshall(stringSetMap,fieldNode,StringSetMapWrapper.class);    } else     if (type == StringSet.class) {      StringSet stringSet=(StringSet)objValue;      FieldType.marshall(stringSet,fieldNode,StringSetWrapper.class);    } else     if (type == ScopedLabelSet.class) {      ScopedLabelSet scopedLabelSet=(ScopedLabelSet)objValue;      FieldType.marshall(scopedLabelSet,fieldNode,ScopedLabelSetWrapper.class);    } else     if (type == OpStatusMap.class) {      OpStatusMap opStatusMap=(OpStatusMap)objValue;      FieldType.marshall(opStatusMap,fieldNode,OpStatusMapWrapper.class);    } else     if (type == StringMap.class) {      StringMap stringMap=(StringMap)objValue;      FieldType.marshall(stringMap,fieldNode,StringMapWrapper.class);    } else     if (type == FSExportMap.class) {      FSExportMap fSExportMap=(FSExportMap)objValue;      FieldType.marshall(fSExportMap,fieldNode,FSExportMapWrapper.class);    } else     if (type == SMBShareMap.class) {      SMBShareMap sMBShareMap=(SMBShareMap)objValue;      FieldType.marshall(sMBShareMap,fieldNode,SMBShareMapWrapper.class);    } else {      fieldNode.setAttribute("value",objValue.toString());    }    record.appendChild(fieldNode);  }}  }
class C{  public String globalInfo(){  return "Converts all numeric attributes into binary attributes (apart from " + "the class attribute, if set): if the value of the numeric attribute is " + "exactly zero, the value of the new attribute will be zero. If the "+ "value of the numeric attribute is missing, the value of the new "+ "attribute will be missing. Otherwise, the value of the new "+ "attribute will be one. The new attributes will be nominal.";}  }
class C{  public void parse(String systemId) throws IOException, SAXException {  parse(new InputSource(systemId));}  }
class C{  public synchronized void removeIndexFamily(IPath path){  ArrayList toRemove=null;  Object[] containerPaths=this.indexLocations.keyTable;  for (int i=0, length=containerPaths.length; i < length; i++) {    IPath containerPath=(IPath)containerPaths[i];    if (containerPath == null)     continue;    if (path.isPrefixOf(containerPath)) {      if (toRemove == null)       toRemove=new ArrayList();      toRemove.add(containerPath);    }  }  if (toRemove != null)   for (int i=0, length=toRemove.size(); i < length; i++)   removeIndex((IPath)toRemove.get(i));}  }
class C{  private boolean trackThisEntitiesVisibilityInfo(Entity e){  IPlayer localPlayer=bv.getLocalPlayer();  if (localPlayer == null) {    return false;  }  if (bv.game.getOptions().booleanOption("double_blind") && ((e.getOwner().getId() == localPlayer.getId()) || (bv.game.getOptions().booleanOption("team_vision") && (e.getOwner().getTeam() == localPlayer.getTeam())))) {    return true;  }  return false;}  }
class C{  public Executor(Logger logger,String cmd){  this.logger=logger;  this.cmd=cmd;}  }
class C{  public DoubleActionBrushTool(String permission){  checkNotNull(permission);  this.permission=permission;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public static Properties loadConfigurationProperties(String resourceName,Properties defaults) throws IOException {  Properties result=null;  String defaultResourceName=getDefaultResourceName(resourceName);  Properties defaultResult=null;  InputStream in=ResourceUtil.getInputStream(defaultResourceName);  if (in != null) {    defaultResult=IOUtil.readProperties(in,defaults);  } else {    defaultResult=new Properties(defaults);  }  in=ResourceUtil.getInputStream(getResourceName(resourceName));  if (in != null) {    result=IOUtil.readProperties(in,defaultResult);  } else {    result=new Properties(defaultResult);  }  return result;}  }
class C{  public static UndertowFraction createDefaultFraction(){  UndertowFraction fraction=new UndertowFraction();  return fraction.applyDefaults();}  }
class C{  public TDoubleArrayList inverseGrep(TDoubleProcedure condition){  TDoubleArrayList list=new TDoubleArrayList();  for (int i=0; i < _pos; i++) {    if (!condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  public static void statistics(){  StringBuilder line=new StringBuilder(errors + " error");  if (errors != 1)   line.append("s");  line.append(", ").append(warnings).append(" warning");  if (warnings != 1)   line.append("s");  line.append(".");  err(line.toString());}  }
class C{  @LmlAction("switch") public void switchTemplate(final Button actor){  buttonManager.switchCheckedButton(actor);  final String templateName=LmlUtilities.getActorId(actor);  templateInput.setProgrammaticChangeEvents(true);  templateInput.setText(Gdx.files.internal(toExamplePath(templateName)).readString());  templateInput.invalidateHierarchy();  parseTemplate();}  }
class C{  public T height(int dip){  size(false,dip,true);  return self();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"STR");  translateAll(environment,instruction,"STR",instructions);}  }
class C{  public WinListener(JPopupMenu p){  this.popupMenu=p;}  }
class C{  public static String formatHeaderByte(int b){  return "Dim: " + ((b >> 3) & 0x1F) + ((b & 0x02) != 0 ? " function" : " address ")+ ((b & 0x01) != 0 ? " extended" : " ");}  }
class C{  public static synchronized CompiledMethod optCompileWithFallBack(NormalMethod method){  if (VM.BuildForOptCompiler) {    if (compilationInProgress) {      return fallback(method);    } else {      try {        compilationInProgress=true;        CompilationPlan plan=new CompilationPlan(method,(OptimizationPlanElement[])optimizationPlan,null,(OptOptions)options);        return optCompileWithFallBackInternal(method,plan);      }  finally {        compilationInProgress=false;      }    }  } else {    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);    return null;  }}  }
class C{  public Response cacheResponse(){  return cacheResponse;}  }
class C{  public static byte[] encodeInteger(final BigInteger bigInt){  if (bigInt == null) {    throw new NullPointerException("encodeInteger called with null parameter");  }  return encodeBase64(toIntegerBytes(bigInt),false);}  }
class C{  static void onActivityReady(Activity activity){  instance.onActivityReady(activity);}  }
class C{  private void sendStartPatch(final State current,String docSelfLink){  try {    ServiceDocument startedPatch=TaskSchedulerServiceStateBuilder.getStartPatch(Class.forName(current.schedulerServiceClassName));    Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),docSelfLink)).setBody(startedPatch).setReferer(UriUtils.buildUri(getHost(),getSelfLink()));    sendRequest(patch);    ServiceUtils.logInfo(this,"Host[%s]: TaskSchedulerService moving service %s from CREATED to STARTED",getHost().getId(),docSelfLink);  } catch (  Exception e) {    logFailure(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.840 -0500",hash_original_method="8AE0F2FE6E5901DBE1EC6FD71BA67D3B",hash_generated_method="DE0ACFAA30DC2A8294B564425F69097F") private void interruptIdleWorkers(){  interruptIdleWorkers(false);}  }
class C{  public LongPoint(String name,long... point){  super(name,pack(point),getType(point.length));}  }
class C{  public static void writeFloatList(IonWriter writer,double[] values) throws IOException {  if (writer instanceof PrivateListWriter) {    ((PrivateListWriter)writer).writeFloatList(values);    return;  }  writer.stepIn(IonType.LIST);  for (int ii=0; ii < values.length; ii++) {    writer.writeFloat(values[ii]);  }  writer.stepOut();}  }
class C{  @VisibleForTesting protected void updateIsLatest(List<Vocabulary> vocabularies,List<Vocabulary> registered){  if (!vocabularies.isEmpty() && !registered.isEmpty()) {    for (    Vocabulary vocabulary : vocabularies) {      for (      Vocabulary rVocabulary : registered) {        if (vocabulary.getUriString() != null && rVocabulary.getUriString() != null) {          String idOne=vocabulary.getUriString();          String idTwo=rVocabulary.getUriString();          if (idOne.equalsIgnoreCase(idTwo)) {            Date issuedOne=vocabulary.getIssued();            Date issuedTwo=rVocabulary.getIssued();            if ((issuedOne == null && issuedTwo == null) || (issuedOne != null && issuedTwo != null && issuedOne.compareTo(issuedTwo) == 0)) {              vocabulary.setLatest(rVocabulary.isLatest());            }          }        }      }      log.debug("Installed vocabulary with identifier " + vocabulary.getUriString() + " latest="+ vocabulary.isLatest());    }  }}  }
class C{  public Boolean isGuestKernelCrashed(){  return guestKernelCrashed;}  }
class C{  public OneSheeldDevice(String address){  checkBluetoothAddress(address);  this.name=address;  this.address=address;  this.isPaired=false;  this.isTypePlus=false;  initialize();}  }
class C{  public static DoubleFunction minus(final double b){  return plus(-b);}  }
class C{  public boolean startUpdates(boolean getPreviousUpdates){  if (updateManager == null)   updateManager=new RequestUpdatesManager(this,getPreviousUpdates);  if (!updateManager.isRunning()) {    updateManager.startUpdates();    return true;  }  return false;}  }
class C{  public void addListener(U type,T listener){  List<T> newlisteners=new ArrayList<T>();  if (listeners != null)   newlisteners.addAll(listeners);  newlisteners.add(listener);  List<T> terminals=new ArrayList<T>();  for (  T i : newlisteners) {    boolean isterm=true;    for (    T j : newlisteners) {      if (ispre(type,i,j)) {        isterm=false;        break;      }    }    if (isterm) {      terminals.add(i);    }  }  if (terminals.size() == 0) {    logger.error("No listener dependency solution: " + "No listeners without incoming dependencies");    listeners=newlisteners;    return;  }  HashSet<T> visited=new HashSet<T>();  List<T> ordering=new ArrayList<T>();  for (  T term : terminals) {    visit(newlisteners,type,visited,ordering,term);  }  listeners=ordering;}  }
class C{  public boolean contains(Key key){  if (key == null)   throw new NullPointerException("argument to contains() is null");  return get(key) != null;}  }
class C{  public DummyPanel(){  initComponents();}  }
class C{  protected void paint(SynthContext context,Graphics g){  JLabel label=(JLabel)context.getComponent();  Icon icon=(label.isEnabled()) ? label.getIcon() : label.getDisabledIcon();  g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));  g.setFont(style.getFont(context));  context.getStyle().getGraphicsUtils(context).paintText(context,g,label.getText(),icon,label.getHorizontalAlignment(),label.getVerticalAlignment(),label.getHorizontalTextPosition(),label.getVerticalTextPosition(),label.getIconTextGap(),label.getDisplayedMnemonicIndex(),0);}  }
class C{  protected void drawPolygon(Polygon polygon,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){  if (fillColor != null || fillPaint != null) {    if (shadow) {      g.setColor(mxConstants.SHADOW_COLOR);      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);      g.fillPolygon(polygon);      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);    }    if (fillPaint != null) {      g.setPaint(fillPaint);    } else {      g.setColor(fillColor);    }    g.fillPolygon(polygon);  }  if (penColor != null) {    g.setColor(penColor);    g.drawPolygon(polygon);  }}  }
class C{  void appletTag(){  ByteArrayOutputStream out=new ByteArrayOutputStream();  updateAtts();  printTag(new PrintStream(out),panel.atts);  showStatus(amh.getMessage("applettag"));  Point p=location();  new TextFrame(p.x + XDELTA,p.y + YDELTA,amh.getMessage("applettag.textframe"),out.toString());}  }
class C{  NukkitEntity(cn.nukkit.entity.Entity entity){  checkNotNull(entity);  this.entityRef=new WeakReference<Entity>(entity);}  }
class C{  public NotificationChain basicSetAnnotationList(N4MemberAnnotationList newAnnotationList,NotificationChain msgs){  N4MemberAnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_SETTER_DECLARATION__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  BasicTimingMonitor mon=null;  Object[] row=null;  SQLDeArgMon sqlMon=null;  String stackTrace="";  boolean isSQLSummaryEnabled=params.isSQLSummaryEnabled && params.isEnabled;  boolean isSQLDetailEnabled=params.isSQLDetailEnabled && params.isEnabled;  boolean executingQuery=isExecuteQueryMethod(method.getName());  try {    if (executingQuery && (isSQLSummaryEnabled || isSQLDetailEnabled)) {      String actualSQL=null;      mon=new BasicTimingMonitor();      mon.start();      int statementReuseCounter=0;      if (isStatementObject(args)) {        actualSQL=getSQL(args[ARGS_SQL_STATEMENT]);        sqlMon=new SQLDeArgMon("Statement",actualSQL,params.matchStrings);      } else {        sqlMon=(SQLDeArgMon)statementsMap.get(getMonitoredObject());        statementReuseCounter=sqlMon.incrementCounter();        if (isSQLSummaryEnabled)         MonitorFactory.add("MonProxy-SQL-PreparedStatement Reuse","count",2 * statementReuseCounter);        actualSQL=getSQL(sqlMon.getSQL());      }      if (isSQLSummaryEnabled)       sqlMon.start();      if (isSQLDetailEnabled) {        row=new Object[]{new Long(++params.sqlID),new Date(),DEFAULT_SQL_TIME,new Integer(statementReuseCounter),actualSQL,"",method.toString()};        params.sqlBuffer.addRow(row);      }    }    Object returnValue=super.invoke(proxy,method,args);    if (!(params.isEnabled) || returnValue instanceof MonProxy)     return returnValue; else     if ((isSQLSummaryEnabled || isSQLDetailEnabled) && returnsPreparedStatement(method.getName()) && isPreparedStatement(returnValue)) {      String actualSQL=getSQL(args[ARGS_SQL_STATEMENT]);      statementsMap.put(returnValue,new SQLDeArgMon("PreparedStatement",actualSQL,params.matchStrings));      return monitorJDBC(returnValue);    } else     if ((isSQLSummaryEnabled || isSQLDetailEnabled) && (shouldMonitorResultSet(returnValue) || shouldMonitorOtherJDBC(returnValue)))     return monitorJDBC(returnValue); else     return returnValue;  } catch (  Throwable e) {    if (executingQuery && isSQLDetailEnabled && row != null) {      stackTrace=Misc.getExceptionTrace(e);      row[SQL_EXCEPTION_IND]=stackTrace;    }    throw e;  } finally {    if (mon != null && executingQuery) {      long executionTime=mon.stop();      if (isSQLDetailEnabled && row != null)       row[SQL_EXECUTION_TIME_IND]=new Long(executionTime);      if (isSQLSummaryEnabled)       sqlMon.add(executionTime).appendDetails(stackTrace).stop();    }  }}  }
class C{  public static boolean start(RootDoc rootDoc){  long batchID=-1;  for (  String[] option : rootDoc.options()) {    if (option[0].equals("-batchID")) {      try {        batchID=Long.parseLong(option[1]);      } catch (      NumberFormatException e) {        throw new AssertionError(e);      }    }  }  Batch batch=batchTable.get(batchID);  assert batch != null;  BatchEnvironment env;  try {    Constructor<? extends BatchEnvironment> cons=batch.envClass.getConstructor(new Class<?>[]{RootDoc.class});    env=cons.newInstance(rootDoc);  } catch (  NoSuchMethodException e) {    throw new AssertionError(e);  }catch (  IllegalAccessException e) {    throw new AssertionError(e);  }catch (  InstantiationException e) {    throw new AssertionError(e);  }catch (  InvocationTargetException e) {    throw new AssertionError(e);  }  env.setVerbose(batch.verbose);  File destDir=batch.destDir;  if (destDir == null) {    destDir=new File(System.getProperty("user.dir"));  }  for (  String inputClassName : batch.classes) {    ClassDoc inputClass=rootDoc.classNamed(inputClassName);    try {      for (      Generator gen : batch.generators) {        gen.generate(env,inputClass,destDir);      }    } catch (    NullPointerException e) {    }  }  boolean status=true;  List<File> generatedFiles=env.generatedFiles();  if (!batch.noCompile && !batch.noWrite && !generatedFiles.isEmpty()) {    status=batch.enclosingMain().invokeJavac(batch,generatedFiles);  }  if (!batch.keepGenerated) {    for (    File file : generatedFiles) {      file.delete();    }  }  return status;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GENERIC_DATA_DIRECTORY_DB'";  db.execSQL(sql);}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.activity_menu_item,menu);  return true;}  }
class C{  public static RE mkString(String lit){  if (lit.isEmpty()) {    return epsilon;  }  RE res=new RE(ReOp.STRING);  res.lit=lit;  return res;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof AlphaComposite)) {    return false;  }  AlphaComposite ac=(AlphaComposite)obj;  if (rule != ac.rule) {    return false;  }  if (extraAlpha != ac.extraAlpha) {    return false;  }  return true;}  }
class C{  @Override public double[] logDensityPerClusterForInstance(Instance inst) throws Exception {  int i, j;  double logprob;  double[] wghts=new double[m_wrappedClusterer.numberOfClusters()];  m_replaceMissing.input(inst);  inst=m_replaceMissing.output();  for (i=0; i < m_wrappedClusterer.numberOfClusters(); i++) {    logprob=0;    for (j=0; j < inst.numAttributes(); j++) {      if (!inst.isMissing(j)) {        if (inst.attribute(j).isNominal()) {          logprob+=Math.log(m_model[i][j].getProbability(inst.value(j)));        } else {          logprob+=logNormalDens(inst.value(j),m_modelNormal[i][j][0],m_modelNormal[i][j][1]);        }      }    }    wghts[i]=logprob;  }  return wghts;}  }
class C{  public SortingParams by(final String pattern){  return by(SafeEncoder.encode(pattern));}  }
class C{  public void onDraw(Paint paint){  mPaint.setShadowLayer(mShadowRadius,0.0f,mShadowOffset,shadowColor);  mPaint.setColor(paintColor);}  }
class C{  private void updateShareAcl(NetAppClusterApi ncApi,String shareName,List<ShareACL> inputAcls,AclOperation action){  if (inputAcls.isEmpty()) {    return;  }  List<CifsAcl> acls=new ArrayList<CifsAcl>();  for (  ShareACL newAcl : inputAcls) {    CifsAcl cif_new=new CifsAcl();    String domain=newAcl.getDomain();    String userOrGroup=newAcl.getGroup() == null ? newAcl.getUser() : newAcl.getGroup();    if (domain != null && !domain.isEmpty()) {      userOrGroup=domain + "\\" + userOrGroup;    }    cif_new.setUserName(userOrGroup);    cif_new.setAccess(getAccessEnum(newAcl.getPermission()));    acls.add(cif_new);  }switch (action) {case ADD:    ncApi.addCIFSShareAcl(shareName,acls);  break;case MODIFY:ncApi.modifyCIFSShareAcl(shareName,acls);break;case DELETE:ncApi.deleteCIFSShareAcl(shareName,acls);break;case FORCE_ADD:for (CifsAcl cifsAcl : acls) {try {List<CifsAcl> singleACL=new ArrayList<CifsAcl>();singleACL.add(cifsAcl);ncApi.addCIFSShareAcl(shareName,singleACL);} catch (Exception e) {_log.error("NetAppClusterModeDevice:: Force add of ACL for user [" + cifsAcl.getUserName() + "] failed with an Exception",e);}}break;case FORCE_DELETE:for (CifsAcl cifsAcl : acls) {try {List<CifsAcl> singleACL=new ArrayList<CifsAcl>();singleACL.add(cifsAcl);ncApi.deleteCIFSShareAcl(shareName,singleACL);} catch (Exception e) {_log.error("NetAppClusterModeDevice:: Force delete of ACL for user [" + cifsAcl.getUserName() + "] failed with an Exception",e);}}break;default :throw new IllegalArgumentException(action + " is not a valid action for acl");}}  }
class C{  @Override public void buildCircuits(){  logger=Logger.getLogger(getThreadDependentLoggername());  logger.info("Building circuits by permute");  set_logic_circuits(new ArrayList<LogicCircuit>());  LogicCircuit lc=get_unassigned_lc();  Integer n_gates_circuit=lc.get_logic_gates().size();  Integer n_gates_library=get_gate_library().get_GATES_BY_NAME().keySet().size();  permuteNORGateIndices(lc,get_gate_library());  logger.info("enumerate assignments");  enumerateAssignments();  logger.info("evaluate assignments");  evaluateAssignments();}  }
class C{  public boolean updateDownload(DownloadInfo di){  ContentValues cv=new ContentValues();  cv.put(DownloadColumns.INDEX,di.mIndex);  cv.put(DownloadColumns.FILENAME,di.mFileName);  cv.put(DownloadColumns.URI,di.mUri);  cv.put(DownloadColumns.ETAG,di.mETag);  cv.put(DownloadColumns.TOTALBYTES,di.mTotalBytes);  cv.put(DownloadColumns.CURRENTBYTES,di.mCurrentBytes);  cv.put(DownloadColumns.LASTMOD,di.mLastMod);  cv.put(DownloadColumns.STATUS,di.mStatus);  cv.put(DownloadColumns.CONTROL,di.mControl);  cv.put(DownloadColumns.NUM_FAILED,di.mNumFailed);  cv.put(DownloadColumns.RETRY_AFTER,di.mRetryAfter);  cv.put(DownloadColumns.REDIRECT_COUNT,di.mRedirectCount);  return updateDownload(di,cv);}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  MessageInstanceImpl(String sourceId,Date date,String messageId,String messageText,Severity severity){  this(sourceId,date,messageId,messageText,null,severity);}  }
class C{  public static ModuleVersion valueOf(String string){  return parseVersion(string);}  }
class C{  public String toString(){  return String.format("0x%02X",value);}  }
class C{  private static boolean eq(Object o1,Object o2){  return o1 == o2 || o1 != null && o1.equals(o2);}  }
class C{  public void removeApkFromDevices(String deviceID,String app_package) throws Exception {  cmd.runCommand("adb -s " + deviceID + " uninstall "+ app_package);}  }
class C{  public static Image createSVG(String baseURL,boolean animated,byte[] data) throws IOException {  Image i=new Image(Display.impl.createSVGImage(baseURL,data));  i.animated=animated;  i.svgBaseURL=baseURL;  i.svgData=data;  return i;}  }
class C{  protected OMGraphicList constructTenDegreeLines(double ctrLon){  OMGraphicList lines=new OMGraphicList(3);  OMPoly currentLine;  for (int i=1; i <= 8; i++) {    for (int j=-1; j < 2; j+=2) {      float lat=(float)(10 * i * j);      double[] llp={lat,ctrLon - 180f,lat,ctrLon - 90f,lat,ctrLon,lat,ctrLon + 90f,lat,ctrLon + 180f};      currentLine=new OMPoly(llp,OMGraphic.DECIMAL_DEGREES,boxy ? OMGraphic.LINETYPE_STRAIGHT : OMGraphic.LINETYPE_RHUMB);      currentLine.setLinePaint(tenDegreeColor);      lines.add(currentLine);    }  }  for (int i=1; i < 18; i++) {    for (int j=-1; j < 2; j+=2) {      float lon=(float)(10 * i * j);      double[] llp={80f,lon,0f,lon,-80f,lon};      if (MoreMath.approximately_equal(Math.abs(lon),90f,0.001f)) {        llp[0]=89.999f;        llp[4]=-89.999f;      }      currentLine=new OMPoly(llp,OMGraphic.DECIMAL_DEGREES,boxy ? OMGraphic.LINETYPE_STRAIGHT : OMGraphic.LINETYPE_GREATCIRCLE);      currentLine.setLinePaint(tenDegreeColor);      lines.add(currentLine);    }  }  if (Debug.debugging("graticule")) {    Debug.output("GraticuleLayer.constructTenDegreeLines(): " + "constructed " + lines.size() + " graticule lines");  }  lines.generate(getProjection());  return lines;}  }
class C{  public void applyState(){  if (mLockedView != null) {    if (mState == STATE_DISABLED || mState == STATE_LOCKED || mState == STATE_FINISHED) {      mLockedView.setVisibility(View.VISIBLE);    } else {      mLockedView.setVisibility(View.GONE);    }  }}  }
class C{  public Jerry remove(){  for (  Node node : nodes) {    node.detachFromParent();  }  return this;}  }
class C{  public final void testValidateFails(){  BeginsWithUppercaseLetterValidator beginsWithUppercaseLetterValidator=new BeginsWithUppercaseLetterValidator("foo");  assertFalse(beginsWithUppercaseLetterValidator.validate("abc123"));  assertFalse(beginsWithUppercaseLetterValidator.validate("1Abc"));  assertFalse(beginsWithUppercaseLetterValidator.validate("%Abc"));}  }
class C{  public int size(){  return size;}  }
class C{  public static boolean isTrait(final ClassNode cNode){  return cNode != null && ((cNode.isInterface() && !cNode.getAnnotations(TRAIT_CLASSNODE).isEmpty()) || isAnnotatedWithTrait(cNode));}  }
class C{  private void ensure(int idx) throws IOException {  if (closed) {    return;  }  if (idx < buff.length()) {    return;  }  read(idx + 1 - buff.length());}  }
class C{  public int size(){  return labels.length;}  }
class C{  public void hasBody(boolean hasBody){  this.hasBody=hasBody;}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  private void addTopLeftLabel(){  topLeftLabel=new JLabel();  topLeftLabel.setOpaque(true);  topLeftLabel.setVisible(false);  centerPanel.add(topLeftLabel,CC.xywh(constantTopLeftLabelCell.x,constantTopLeftLabelCell.y,1,3));}  }
class C{  private void populateComboBox(Bundle[] bundles){  for (  Bundle bundle : bundles) {    combo.add(String.format(Messages.version1,Integer.toString(bundle.getVersion().getMajor()),Integer.toString(bundle.getVersion().getMinor()),Integer.toString(bundle.getVersion().getMicro())));  }  combo.select(0);}  }
class C{  public double[] generate(int nSamples){  int m=nSamples / 2;  double r;  double pi=Math.PI;  double[] w=new double[nSamples];switch (windowType) {case BARTLETT:    for (int n=0; n < nSamples; n++)     w[n]=1.0f - Math.abs(n - m) / m;  break;case HANNING:r=pi / (m + 1);for (int n=-m; n < m; n++) w[m + n]=0.5f + 0.5f * Math.cos(n * r);break;case HAMMING:r=pi / m;for (int n=-m; n < m; n++) w[m + n]=0.54f + 0.46f * Math.cos(n * r);break;case BLACKMAN:r=pi / m;for (int n=-m; n < m; n++) w[m + n]=0.42f + 0.5f * Math.cos(n * r) + 0.08f * Math.cos(2 * n * r);break;default :for (int n=0; n < nSamples; n++) w[n]=1.0f;}return w;}  }
class C{  @Override public void handleNavigation(FacesContext context,String from,String outcome){  NavigationCase navCase=getNavigationCase(context,from,outcome);  if (notNull(context,navCase,from,outcome) && isRedirectNeeded(context,outcome) && isSamePageRedirect(navCase,context)) {    outcome=navCase.getToViewId(context) + FACES_REDIRECT;  }  parent.handleNavigation(context,from,outcome);}  }
class C{  private void ensureCapacity(int numMappings){  int newCapacity=Collections.roundUpToPowerOfTwo(capacityForInitSize(numMappings));  HashtableEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (newCapacity <= oldCapacity) {    return;  }  rehash();  if (newCapacity == oldCapacity * 2) {    doubleCapacity();    return;  }  HashtableEntry<K,V>[] newTable=makeTable(newCapacity);  if (size != 0) {    int newMask=newCapacity - 1;    for (int i=0; i < oldCapacity; i++) {      for (HashtableEntry<K,V> e=oldTable[i]; e != null; ) {        HashtableEntry<K,V> oldNext=e.next;        int newIndex=e.hash & newMask;        HashtableEntry<K,V> newNext=newTable[newIndex];        newTable[newIndex]=e;        e.next=newNext;        e=oldNext;      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public PutMappingRequest indices(String[] indices){  this.indices=indices;  return this;}  }
class C{  @Override public int compare(final yacyVersion v0,final yacyVersion v1){  int r=(Double.valueOf(v0.getReleaseGitNr())).compareTo(Double.valueOf(v1.getReleaseGitNr()));  if (r != 0)   return r;  r=v0.getDateStamp().compareTo(v1.getDateStamp());  if (r != 0)   return r;  return (Integer.valueOf(v0.getSvn())).compareTo(Integer.valueOf(v1.getSvn()));}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  private void midPoint(PointF point,WrapMotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2,y / 2);}  }
class C{  public IImageLine readRow(){  return readRow(rowNum + 1);}  }
class C{  public <T extends PageObject>void waitUntilAfter(T entity,Predicate<T> waitUntil,int waitTimeInSeconds){  Preconditions.checkNotNull(entity);  Preconditions.checkNotNull(waitUntil);  waitUntilAfter(entity,waitUntil,String.format("Waited %s seconds and condition did not meet",waitTimeInSeconds),waitTimeInSeconds);}  }
class C{  public EmailIntentBuilder body(@NonNull String body){  checkNotNull(body);  this.body=fixLineBreaks(body);  return this;}  }
class C{  public static void paintConnections(Graphics gx,Integer... tab){  int tabIndex=0;  if (tab.length > 0) {    tabIndex=tab[0].intValue();  }  Vector<BeanConnection> connections=TABBED_CONNECTIONS.get(tabIndex);  for (int i=0; i < connections.size(); i++) {    BeanConnection bc=connections.elementAt(i);    if (!bc.isHidden()) {      BeanInstance source=bc.getSource();      BeanInstance target=bc.getTarget();      EventSetDescriptor srcEsd=bc.getSourceEventSetDescriptor();      BeanVisual sourceVisual=(source.getBean() instanceof Visible) ? ((Visible)source.getBean()).getVisual() : null;      BeanVisual targetVisual=(target.getBean() instanceof Visible) ? ((Visible)target.getBean()).getVisual() : null;      if (sourceVisual != null && targetVisual != null) {        Point bestSourcePt=sourceVisual.getClosestConnectorPoint(new Point((target.getX() + (target.getWidth() / 2)),(target.getY() + (target.getHeight() / 2))));        Point bestTargetPt=targetVisual.getClosestConnectorPoint(new Point((source.getX() + (source.getWidth() / 2)),(source.getY() + (source.getHeight() / 2))));        gx.setColor(Color.red);        boolean active=true;        if (source.getBean() instanceof EventConstraints) {          if (!((EventConstraints)source.getBean()).eventGeneratable(srcEsd.getName())) {            gx.setColor(Color.gray);            active=false;          }        }        gx.drawLine((int)bestSourcePt.getX(),(int)bestSourcePt.getY(),(int)bestTargetPt.getX(),(int)bestTargetPt.getY());        double angle;        try {          double a=(bestSourcePt.getY() - bestTargetPt.getY()) / (bestSourcePt.getX() - bestTargetPt.getX());          angle=Math.atan(a);        } catch (        Exception ex) {          angle=Math.PI / 2;        }        Point arrowstart=new Point(bestTargetPt.x,bestTargetPt.y);        Point arrowoffset=new Point((int)(7 * Math.cos(angle)),(int)(7 * Math.sin(angle)));        Point arrowend;        if (bestSourcePt.getX() >= bestTargetPt.getX()) {          arrowend=new Point(arrowstart.x + arrowoffset.x,arrowstart.y + arrowoffset.y);        } else {          arrowend=new Point(arrowstart.x - arrowoffset.x,arrowstart.y - arrowoffset.y);        }        int xs[]={arrowstart.x,arrowend.x + (int)(7 * Math.cos(angle + (Math.PI / 2))),arrowend.x + (int)(7 * Math.cos(angle - (Math.PI / 2)))};        int ys[]={arrowstart.y,arrowend.y + (int)(7 * Math.sin(angle + (Math.PI / 2))),arrowend.y + (int)(7 * Math.sin(angle - (Math.PI / 2)))};        gx.fillPolygon(xs,ys,3);        int midx=(int)bestSourcePt.getX();        midx+=(int)((bestTargetPt.getX() - bestSourcePt.getX()) / 2);        int midy=(int)bestSourcePt.getY();        midy+=(int)((bestTargetPt.getY() - bestSourcePt.getY()) / 2) - 2;        gx.setColor((active) ? Color.blue : Color.gray);        if (previousLink(source,target,i,tab)) {          midy-=15;        }        gx.drawString(srcEsd.getName(),midx,midy);      }    }  }}  }
class C{  private InnerTypeLocation extendedTypePath(InnerTypeLocation loc,int tag,int arg){  List<TypePathEntry> path=new ArrayList<TypePathEntry>(loc.location.size() + 1);  path.addAll(loc.location);  path.add(TypePathEntry.fromBinary(tag,arg));  return new InnerTypeLocation(path);}  }
class C{  public Boolean isInstallBootRequired(){  return installBootRequired;}  }
class C{  public void testFindUserGroupsSunDirectoryManager() throws Exception {  LdapManager mgr=getLdapSunDirectoryServer();  List ret=null;  AndFilter filter=new AndFilter();  filter.and(new EqualsFilter(mgr.getGroupsReturningAttribute(LdapGroupAttributeConstants.LDAP_GROUP_ATTRIBUTE_MEMBER),"uid=nacho,ou=Users,dc=iecisa,dc=corp"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setAddGroupClasses(true);    ret=mgr.findUserGroups(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(1,ret.size());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster allocation=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    allocation.setPreferredPalette(image.getPreferredPalette());    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.isTemporaryFile=true;    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);          allocation.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}for (row=0; row < rows; row++) {data=image.getRowValues(row);for (col=0; col < cols; col++) {if (data[col] == noData) {allocation.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}allocation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");allocation.addMetadataEntry("Created on " + new Date());image.close();allocation.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static double acosInRange(double value){  if (value <= -1) {    return Math.PI;  } else   if (value >= 1) {    return 0.0;  } else {    return FastMath.acos(value);  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T cloneGsonObject(T t){  return (T)CLONER.fromJson(CLONER.toJsonTree(t),t.getClass());}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public Long sadd(final byte[] key,final byte[]... members){  checkIsInMulti();  client.sadd(key,members);  return client.getIntegerReply();}  }
class C{  public void open(){  showDropdown();}  }
class C{  public MailBuilder text(String text){  return param("text",text);}  }
class C{  public boolean doNotCheckCapabilities(){  if ((getOwner() != null) && (getOwner() instanceof CapabilitiesIgnorer)) {    return ((CapabilitiesIgnorer)getOwner()).getDoNotCheckCapabilities();  } else {    return false;  }}  }
class C{  private void includeFile(MatrixCursor result,String docId,File file) throws FileNotFoundException {  if (docId == null) {    docId=getDocIdForFile(file);  } else {    file=getFileForDocId(docId);  }  int flags=0;  if (file.isDirectory()) {    if (file.isDirectory() && file.canWrite())     flags|=Document.FLAG_DIR_SUPPORTS_CREATE;  } else   if (file.canWrite()) {    flags|=Document.FLAG_SUPPORTS_WRITE | Document.FLAG_SUPPORTS_DELETE;  }  final String displayName=file.getName();  final String mimeType=getMimeType(file);  if (mimeType.startsWith("image/"))   flags|=Document.FLAG_SUPPORTS_THUMBNAIL;  final MatrixCursor.RowBuilder row=result.newRow();  row.add(Document.COLUMN_DOCUMENT_ID,docId);  row.add(Document.COLUMN_DISPLAY_NAME,displayName);  row.add(Document.COLUMN_SIZE,file.length());  row.add(Document.COLUMN_MIME_TYPE,mimeType);  row.add(Document.COLUMN_LAST_MODIFIED,file.lastModified());  row.add(Document.COLUMN_FLAGS,flags);  row.add(Document.COLUMN_ICON,R.drawable.ic_launcher);}  }
class C{  public static SQLStream create(String databaseName,String sqlWithSubsParams){  return new SQLStream(databaseName,sqlWithSubsParams,null,null);}  }
class C{  private void computeDefaultLabelDisplayMap(JsonObject jsonObj){  defaultLabelDisplayMap=new TreeMap<String,Boolean>();  JsonElement display=jsonObj.get("display");  if (display != null && display.isJsonObject()) {    for (    Map.Entry<String,JsonElement> entry : display.getAsJsonObject().entrySet()) {      String key=entry.getKey();      Boolean value=Boolean.valueOf(entry.getValue().getAsBoolean());      defaultLabelDisplayMap.put(key,value);    }  }}  }
class C{  private static final void encodeRun(StringBuffer buffer,short value,int length){  if (length < 4) {    for (int j=0; j < length; ++j) {      if (value == (int)ESCAPE)       buffer.append(ESCAPE);      buffer.append((char)value);    }  } else {    if (length == (int)ESCAPE) {      if (value == (int)ESCAPE)       buffer.append(ESCAPE);      buffer.append((char)value);      --length;    }    buffer.append(ESCAPE);    buffer.append((char)length);    buffer.append((char)value);  }}  }
class C{  protected final boolean handlePossibleCenter(int[] stateCount,int i,int j,boolean pureBarcode){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,stateCount[2],stateCountTotal);  if (!Float.isNaN(centerI)) {    centerJ=crossCheckHorizontal((int)centerJ,(int)centerI,stateCount[2],stateCountTotal);    if (!Float.isNaN(centerJ) && (!pureBarcode || crossCheckDiagonal((int)centerI,(int)centerJ,stateCount[2],stateCountTotal))) {      float estimatedModuleSize=(float)stateCountTotal / 7.0f;      boolean found=false;      for (int index=0; index < possibleCenters.size(); index++) {        FinderPattern center=possibleCenters.get(index);        if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {          possibleCenters.set(index,center.combineEstimate(centerI,centerJ,estimatedModuleSize));          found=true;          break;        }      }      if (!found) {        FinderPattern point=new FinderPattern(centerJ,centerI,estimatedModuleSize);        possibleCenters.add(point);        if (resultPointCallback != null) {          resultPointCallback.foundPossibleResultPoint(point);        }      }      return true;    }  }  return false;}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  public Future<?> submit(Runnable task){  return executor.submit(task);}  }
class C{  public String inputName(int inp,Object val){  if (inp < 8)   return "x" + inp;  return "" + val;}  }
class C{  public static EWMA fifteenMinuteEWMA(){  return new EWMA(M15_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  static public Object stringToValue(String s){  if (s.equals("")) {    return s;  }  if (s.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (s.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (s.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=s.charAt(0);  if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {    if (b == '0' && s.length() > 2 && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {      try {        return new Integer(Integer.parseInt(s.substring(2),16));      } catch (      Exception ignore) {      }    }    try {      if (s.indexOf('.') > -1 || s.indexOf('e') > -1 || s.indexOf('E') > -1) {        return Double.valueOf(s);      } else {        Long myLong=new Long(s);        if (myLong.longValue() == myLong.intValue()) {          return new Integer(myLong.intValue());        } else {          return myLong;        }      }    } catch (    Exception ignore) {    }  }  return s;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public boolean match(ReplDBMSHeader event){  if (event == null)   return false; else   if (event instanceof ReplDBMSEvent) {    String heartbeatName=((ReplDBMSEvent)event).getDBMSEvent().getMetadataOptionValue(ReplOptionParams.HEARTBEAT);    if (heartbeatName != null) {      if (matchAny)       return true; else       return name.equals(heartbeatName);    } else     return false;  } else   return false;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @SuppressWarnings("unchecked") @Override public void execute(Iterator<String> contactsIter){  final GenericAsyncTask<Iterator<String>,Void,Integer,InsertContactsCommand> asyncTask=new GenericAsyncTask<>(this);  asyncTask.execute(contactsIter);}  }
class C{  public GBDeviceEventDisplayMessage(String message,int duration,int severity){  this.message=message;  this.duration=duration;  this.severity=severity;}  }
class C{  private long sendNiciraRoleRequest(OFControllerRole role,long xid){  if (factory.getVersion().compareTo(OFVersion.OF_12) < 0) {    OFNiciraControllerRoleRequest.Builder builder=factory.buildNiciraControllerRoleRequest();    xid=xid <= 0 ? factory.nextXid() : xid;    builder.setXid(xid);    OFNiciraControllerRole niciraRole=NiciraRoleUtils.ofRoleToNiciraRole(role);    builder.setRole(niciraRole);    OFNiciraControllerRoleRequest roleRequest=builder.build();    mainConnection.write(roleRequest);  } else {    OFRoleRequest roleRequest=factory.buildRoleRequest().setGenerationId(U64.of(0)).setXid(xid <= 0 ? factory.nextXid() : xid).setRole(role).build();    xid=roleRequest.getXid();    mainConnection.write(roleRequest);  }  return xid;}  }
class C{  protected double reducedErrorPrune() throws Exception {  if (m_Attribute == -1) {    return m_HoldOutError;  }  double errorTree=0;  for (  Tree m_Successor : m_Successors) {    errorTree+=m_Successor.reducedErrorPrune();  }  if (errorTree >= m_HoldOutError) {    m_Attribute=-1;    m_Successors=null;    return m_HoldOutError;  } else {    return errorTree;  }}  }
class C{  public Boolean dryRun(){  return dryRun;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void resetCounters(){  swapCnt.set(0);  unswapCnt.set(0);}  }
class C{  private void processStartedStage(final State currentState) throws Throwable {switch (currentState.taskState.subStage) {case CREATE_CONTAINER_TEMPLATES:    createContainerTemplates(currentState);  break;case ALLOCATE_DOCKER_VMS:performDockerVmAllocation(currentState);break;case SCHEDULE_CONTAINER_ALLOCATION:scheduleContainerAllocation(currentState);break;}}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public void interrupt(){  setReadingState(STATE_STOPPED);  if (mWakeLock.isHeld()) {    mWakeLock.release();  }}  }
class C{  public static boolean testLineSegmentTriangle(float p0X,float p0Y,float p0Z,float p1X,float p1Y,float p1Z,float v0X,float v0Y,float v0Z,float v1X,float v1Y,float v1Z,float v2X,float v2Y,float v2Z,float epsilon){  float dirX=p1X - p0X;  float dirY=p1Y - p0Y;  float dirZ=p1Z - p0Z;  float t=intersectRayTriangle(p0X,p0Y,p0Z,dirX,dirY,dirZ,v0X,v0Y,v0Z,v1X,v1Y,v1Z,v2X,v2Y,v2Z,epsilon);  return t >= 0.0f && t <= 1.0f;}  }
class C{  public double theta(){  return Math.atan2(y,x);}  }
class C{  @SuppressWarnings("EmptyTryBlock") public void create(IgfsSecondaryFileSystemTestAdapter uni,@Nullable IgfsPath[] dirs,@Nullable IgfsPath[] files) throws Exception {  if (dirs != null) {    for (    IgfsPath dir : dirs)     uni.mkdirs(dir.toString());  }  if (files != null) {    for (    IgfsPath file : files)     try (OutputStream ignore=uni.openOutputStream(file.toString(),false)){    }   }}  }
class C{  @Override public ProjectPrivilegeObject copy(){  return new ProjectPrivilegeObject(this);}  }
class C{  public void startUsingVelocity(float initialVelocity){  if (initialVelocity == 0)   return;  startCommon();  mLastFlingAngle=0.0f;  mRotator.fling(initialVelocity);  post(this);}  }
class C{  public static Value noInvokeRhs(Unit unit){  return noInvoke(rhs(unit));}  }
class C{  public static void startService(ServiceHost host,Class service) throws InstantiationException, IllegalAccessException {  startService(host,service,null);}  }
class C{  protected void configurePopup(){  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  setBorderPainted(true);  setBorder(LIST_BORDER);  setOpaque(false);  add(scroller);  setDoubleBuffered(true);  setFocusable(false);}  }
class C{  public void refreshNonLocalGateways() throws XMPPException {  loadNonLocalGateways();}  }
class C{  private void buildCursorConditionally(MatrixCursor cursor,CharacterRecord cr,String selection,String[] selectionArgs){  if (selectionArgs == null)   cursor.addRow(new Object[]{cr.getId(),cr.getName(),cr.getRace()}); else   for (  String item : selectionArgs)   if ((selection.equals(CharacterContract.CharacterEntry.COLUMN_NAME) && item.equals(cr.getName())) || (selection.equals(CharacterContract.CharacterEntry.COLUMN_RACE) && item.equals(cr.getRace()))) {    cursor.addRow(new Object[]{cr.getId(),cr.getName(),cr.getRace()});  }}  }
class C{  private View makeAndAddVerticalView(int position,int offset,int y,boolean fromTop){  View child;  if (!mDataChanged) {    child=mRecycler.get(position);    if (child != null) {      int childTop=child.getTop();      mBottomMost=Math.max(mBottomMost,childTop + child.getMeasuredHeight());      mTopMost=Math.min(mTopMost,childTop);      setUpVerticalChild(child,offset,y,fromTop);      return child;    }  }  child=mAdapter.getView(position,null,this);  setUpVerticalChild(child,offset,y,fromTop);  return child;}  }
class C{  public boolean subsumes(Object general,Object specific){  HGRelType grel=(HGRelType)general;  HGRelType srel=(HGRelType)specific;  if (general == null || specific == null)   return general == specific;  if (!grel.getName().equals(srel.getName()) || grel.getArity() != srel.getArity())   return false;  for (int i=0; i < grel.getArity(); i++) {    HGHandle g=grel.getTargetAt(i);    HGHandle s=srel.getTargetAt(i);    if (g.equals(s))     continue; else {      HGAtomType gt=graph.getTypeSystem().getAtomType(g);      HGAtomType st=graph.getTypeSystem().getAtomType(s);      if (!gt.equals(st) || !gt.subsumes(graph.get(g),graph.get(s)))       return false;    }  }  return true;}  }
class C{  boolean persistValue(int id){  int bit=1 << id;  return (persistValue & bit) != 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static OFGroup createMPLSInterfaceLabel(U32 index){  return OFGroup.of(0 | (index.getRaw() & 0x00ffFFff) | (MPLSSubType.MPLS_INTERFACE << 24)| (OFDPAGroupType.MPLS_LABEL << 28));}  }
class C{  public void removePortListener(GridPortListener lsnr){  assert lsnr != null;synchronized (lsnrs) {    lsnrs.remove(lsnr);  }}  }
class C{  public static void insertJetStreamConfiguration(BasicDBObject dbObject,MongoConnection mongoConnection){  JetStreamBeanConfigurationDo beanConfig=null;  DBCollection dbCol=mongoConnection.getDBCollection();  if (dbCol == null) {    throw new MongoConfigRuntimeException("jetstreamconfig collection is unknown");  }  WriteResult result=dbCol.insert(dbObject);  if (result.getError() != null) {    throw new MongoConfigRuntimeException(result.getError());  }}  }
class C{  protected void commit() throws MailboxException {  try {    getEntityManager().getTransaction().commit();  } catch (  PersistenceException e) {    throw new MailboxException("Commit of transaction failed",e);  }}  }
class C{  public BM25Similarity(float k1,float b){  if (Float.isFinite(k1) == false || k1 < 0) {    throw new IllegalArgumentException("illegal k1 value: " + k1 + ", must be a non-negative finite value");  }  if (Float.isNaN(b) || b < 0 || b > 1) {    throw new IllegalArgumentException("illegal b value: " + b + ", must be between 0 and 1");  }  this.k1=k1;  this.b=b;}  }
