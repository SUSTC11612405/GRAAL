class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  DMLScriptTest2 t=new DMLScriptTest2();  t.setUpBase();  t.setUp();  t.testWithString();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec\n",elapsedMsec / 1000.0);}  }
class C{  public GradientPaint(float x1,float y1,Color color1,float x2,float y2,Color color2,boolean cyclic){  this(x1,y1,color1,x2,y2,color2);  this.cyclic=cyclic;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playbackControl(VideoFrame.DVD_CONTROL_RETURN);  return null;}  }
class C{  public ServerMessageDeliverer(final Resource root){  this.root=root;}  }
class C{  public static String generateNewSeed(int length){  String salt="";  long ticks=Calendar.getInstance(TimeZone.getTimeZone("GMT")).getTimeInMillis();  salt=salt + ticks;  byte[] byteToHash=salt.getBytes();  MessageDigest md;  try {    if (length == 128) {      md=MessageDigest.getInstance("MD5");    } else {      md=MessageDigest.getInstance("SHA1");    }    md.reset();    md.update(byteToHash);    byte[] digest=md.digest();    return byteArrayToHexString(digest);  } catch (  NoSuchAlgorithmException ex) {    return null;  }}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public CCwantImageSize scaleDown(int sampleSize){  return new CCwantImageSize(width / sampleSize,height / sampleSize);}  }
class C{  public String priors(){  return mPriors;}  }
class C{  public static int compute6(int seed){  seed^=seed << 1;  seed^=seed >>> 3;  seed^=(seed << 10);  return seed;}  }
class C{  private static File createTempFile(Context context,@Nullable String mimeType) throws IOException {  File externalCacheDir=context.getExternalCacheDir();  File internalCacheDir=context.getCacheDir();  File cacheDir;  if (externalCacheDir == null && internalCacheDir == null) {    throw new IOException("No cache directory available");  }  if (externalCacheDir == null) {    cacheDir=internalCacheDir;  } else   if (internalCacheDir == null) {    cacheDir=externalCacheDir;  } else {    cacheDir=externalCacheDir.getFreeSpace() > internalCacheDir.getFreeSpace() ? externalCacheDir : internalCacheDir;  }  return File.createTempFile(TEMP_FILE_PREFIX,getFileExtensionForType(mimeType),cacheDir);}  }
class C{  synchronized public int write(final long offset,final ByteBuffer data,final IReopenChannel<FileChannel> opener) throws IOException {  m_storeCounters.bufferDataWrites++;  final int data_len=data.remaining();  final int slot_len=m_store.getSlotSize(data_len);  int nwrites=0;  final ByteBuffer m_data=this.m_data.get().buffer();  if (slot_len > m_data.remaining()) {    nwrites+=flush(opener);  }  if (m_startAddr == -1) {    m_startAddr=m_endAddr=offset;  } else   if (m_endAddr != offset) {    nwrites+=flush(opener);    m_startAddr=m_endAddr=offset;  }  m_data.put(data);  int padding=slot_len - data_len;  while (padding > 0) {    if (padding > s_zeros.length) {      m_data.put(s_zeros);      padding-=s_zeros.length;    } else {      m_data.put(s_zeros,0,padding);      break;    }  }  m_endAddr+=slot_len;  final long pos=m_endAddr - m_startAddr;  m_data.position((int)pos);  return nwrites;}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  protected JSRInlinerAdapter(final int api,final MethodVisitor mv,final int access,final String name,final String desc,final String signature,final String[] exceptions){  super(api,access,name,desc,signature,exceptions);  this.mv=mv;}  }
class C{  private void initializeDatabaseIfNull(){  if (mDatabase == null) {    mDatabase=new LabelsDatabaseOpenHelper(getContext()).getWritableDatabase();  }}  }
class C{  public static boolean isXMLRootElement(Object o){  if (o instanceof Node) {    Node n=(Node)o;    if (n instanceof XMLStruct)     n=((XMLStruct)n).toNode();    return n.getOwnerDocument() != null && n.getOwnerDocument().getDocumentElement() == n;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:29.043 -0500",hash_original_method="8BA63F6111F6111C9CE6504A86A67BA3",hash_generated_method="3E6435A5A93E05E491F006FC4E37176A") public boolean checkFromTag(SIPResponse sipResponse){  String originalFromTag=((SIPRequest)this.getRequest()).getFromTag();  if (this.defaultDialog != null) {    if (originalFromTag == null ^ sipResponse.getFrom().getTag() == null) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("From tag mismatch -- dropping response");      return false;    }    if (originalFromTag != null && !originalFromTag.equalsIgnoreCase(sipResponse.getFrom().getTag())) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("From tag mismatch -- dropping response");      return false;    }  }  return true;}  }
class C{  public void makeClass(String str,boolean caseless){  for (int i=0; i < str.length(); i++)   makeClass(str.charAt(i),caseless);}  }
class C{  public static double sumOfLogarithms(DoubleArrayList data,int from,int to){  double[] elements=data.elements();  double logsum=0;  for (int i=from - 1; ++i <= to; )   logsum+=Math.log(elements[i]);  return logsum;}  }
class C{  public void createLogicalSwitch(LogicalSwitchCreateSpec spec,FutureCallback<LogicalSwitch> responseCallback) throws IOException {  postAsync(LOGICAL_SWITCHS_BASE_PATH,serializeObjectAsJson(spec),HttpStatus.SC_CREATED,new TypeReference<LogicalSwitch>(){  },responseCallback);}  }
class C{  public VcenterDataCenterRestRep create(URI vcenterId,VcenterDataCenterCreate input){  return client.post(VcenterDataCenterRestRep.class,input,PathConstants.DATACENTER_BY_VCENTER,vcenterId);}  }
class C{  public InvalidCipherTextException(String message){  super(message);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof IntervalXYToolTipGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  private boolean checkZkConditionAfterBackup(){  validateQuorumStatus();  if (!isEligibleForBackup()) {    log.error("This node is not leader any more");    return false;  }  if (!checkEpochEqual()) {    log.error("The accepted and current epoch are not equal");    return false;  }  return true;}  }
class C{  public static boolean isSlowMotion(){  return slowMotion;}  }
class C{  public void resendMessage(String msgId) throws RcsPersistentStorageException, RcsGenericException {  try {    mOneToOneChatInf.resendMessage(msgId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static Array listToArrayTrim(String list,char delimiter,int[] info){  if (list.length() == 0)   return new ArrayImpl();  while (list.indexOf(delimiter) == 0) {    info[0]++;    list=list.substring(1);  }  int len=list.length();  if (len == 0)   return new ArrayImpl();  while (list.lastIndexOf(delimiter) == len - 1) {    info[1]++;    list=list.substring(0,len - 1 < 0 ? 0 : len - 1);    len=list.length();  }  return listToArray(list,delimiter);}  }
class C{  public CompiledScript compile(Script script,ScriptContext scriptContext,HasContextAndHeaders headersContext){  if (script == null) {    throw new IllegalArgumentException("The parameter script (Script) must not be null.");  }  if (scriptContext == null) {    throw new IllegalArgumentException("The parameter scriptContext (ScriptContext) must not be null.");  }  String lang=script.getLang();  if (lang == null) {    lang=defaultLang;  }  ScriptEngineService scriptEngineService=getScriptEngineServiceForLang(lang);  if (canExecuteScript(lang,scriptEngineService,script.getType(),scriptContext) == false) {    throw new ScriptException("scripts of type [" + script.getType() + "], operation ["+ scriptContext.getKey()+ "] and lang ["+ lang+ "] are disabled");  }  boolean expression=scriptEngineService instanceof ExpressionScriptEngineService;  boolean notSupported=scriptContext.getKey().equals(ScriptContext.Standard.UPDATE.getKey()) || scriptContext.getKey().equals(ScriptContext.Standard.MAPPING.getKey());  if (expression && notSupported) {    throw new ScriptException("scripts of type [" + script.getType() + "],"+ " operation ["+ scriptContext.getKey()+ "] and lang ["+ lang+ "] are not supported");  }  return compileInternal(script,headersContext);}  }
class C{  private void addIcon(){  if (!iconAdded && tray != null) {    try {      tray.add(trayIcon);      iconAdded=true;    } catch (    AWTException ex) {      LOGGER.warning("Error adding tray icon: " + ex.getLocalizedMessage());    }  }}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  if (getM_InOutLine_ID() > 0) {    MInOutLine sLine=new MInOutLine(getCtx(),getM_InOutLine_ID(),get_TrxName());    sLine.setIsInvoiced(false);    sLine.saveEx();  }  return updateHeaderTax();}  }
class C{  public double calculateError(Matrix X){  Matrix Z_up=prob_Z(X);  Matrix X_down=prob_X(Z_up);  return MatrixUtils.meanSquaredError(X.getArray(),X_down.getArray());}  }
class C{  public static EndpointConfiguration defaults(){  EndpointConfiguration configuration=new EndpointConfiguration();  configuration.OperationTimeout=120000;  configuration.UseBinaryEncoding=true;  configuration.MaxArrayLength=UnsignedShort.MAX_VALUE.intValue();  configuration.MaxByteStringLength=UnsignedShort.MAX_VALUE.intValue() * 16;  configuration.MaxMessageSize=UnsignedShort.MAX_VALUE.intValue() * 64;  configuration.MaxStringLength=UnsignedShort.MAX_VALUE.intValue();  configuration.MaxBufferSize=UnsignedShort.MAX_VALUE.intValue();  configuration.ChannelLifetime=120000;  configuration.SecurityTokenLifetime=3600000;  return configuration;}  }
class C{  public String build(String input){  inputString=input;  inputIndex=0;  inputLength=input.length();  outputString=new StringBuffer();  char nextChar;  while ((nextChar=get()) != 0 && outputString.length() < maxOutputLength) {    if (nextChar == '/') {      if (inputStartsWith("*!")) {        String nextChars=peek(7);        boolean haveBangComment=false;        if (nextChars != null && nextChars.length() == 7) {          haveBangComment=true;          for (int i=2; i < nextChars.length(); i++) {            if (!Character.isDigit(nextChars.charAt(i))) {              haveBangComment=false;              break;            }          }        }        if (haveBangComment) {          skip(7);          String contents=getToDelimiter("*/");          if (contents != null) {            put(contents);            skip(2);          }        } else {          put(nextChar);        }      } else       if (inputStartsWith("*")) {        if (getToDelimiter("*/") != null)         skip(2);      } else {        put(nextChar);      }    } else     if (nextChar == '-') {      if (inputStartsWith("-")) {        String tail=peek(2);        if (tail == null) {          break;        } else {          if (Character.isWhitespace(tail.charAt(1))) {            String buf=getToEndOfLine();            skip(buf.length());            put(' ');          } else           put(nextChar);        }      } else {        put(nextChar);      }    } else     if (nextChar == '\n') {      put(" ");    } else {      put(nextChar);    }  }  return outputString.toString();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.EVENT_SOURCE__EVENT:    setEvent((Event)newValue);  return;case MappingPackage.EVENT_SOURCE__EVENT_PROPERTY:setEventProperty((Property)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.ClassLoader latestUserDefinedLoader()")) {    java_io_ObjectInputStream_latestUserDefinedLoader(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object allocateNewObject(java.lang.Class,java.lang.Class)")) {    java_io_ObjectInputStream_allocateNewObject(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object allocateNewArray(java.lang.Class,int)")) {    java_io_ObjectInputStream_allocateNewArray(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 7:{        addToken(start,zzEndRead,Token.LITERAL_STRING_DOUBLE_QUOTE);        return firstToken;      }case 9:    break;case 2:{    start=zzMarkedPos;    addToken(Token.OPERATOR);    yybegin(VALUE);  }case 10:break;case 8:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 11:break;case 3:{addToken(Token.WHITESPACE);}case 12:break;case 6:{addToken(start,zzMarkedPos - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);start=zzMarkedPos;}case 13:break;case 1:{addToken(Token.RESERVED_WORD);}case 14:break;case 5:{}case 15:break;case 4:{addToken(Token.COMMENT_EOL);}case 16:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 14:break;case VALUE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addNullToken();return firstToken;}case 15:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.931 -0500",hash_original_method="5165AD4866DE272C811B07E7C1D571CC",hash_generated_method="A3A32B017315656FB7F5300165C158CF") public void roundOut(Rect dst){  dst.set((int)FloatMath.floor(left),(int)FloatMath.floor(top),(int)FloatMath.ceil(right),(int)FloatMath.ceil(bottom));}  }
class C{  public PreClearFlashEvent(Map<String,Object> source){  super(source);}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  private static void writeItems(final Collection<Item> itemCollection,final DataOutput dos,final boolean dotted) throws IOException {  int size=itemCollection.size();  Item[] items=itemCollection.toArray(new Item[size]);  Arrays.sort(items);  for (int i=0; i < size; i++) {    dos.writeUTF(items[i].name);    dos.writeInt(items[i].access);    dos.writeUTF(dotted ? items[i].desc.replace('/','.') : items[i].desc);  }}  }
class C{  public Collection<Yield> explode(){  if (isContinuous())   return Arrays.asList(this);  Collection<Yield> ret=new TreeSet<Yield>();  String curArgLabel=argLabel;  Yield subYield=new Yield(pred,sen,curArgLabel);  for (int i=this.first().idx; i <= this.last().idx; ++i) {    Word curWord=sen.get(i);    if (this.contains(curWord)) {      subYield.add(curWord);    } else     if (!subYield.isEmpty()) {      ret.add(subYield);      curArgLabel="C-" + curArgLabel;      subYield=new Yield(pred,sen,curArgLabel);    }  }  if (!subYield.isEmpty())   ret.add(subYield);  return ret;}  }
class C{  Map<String,ClassReader> parseZip(List<String> jarPathList) throws IOException {  TreeMap<String,ClassReader> classes=new TreeMap<String,ClassReader>();  for (  String jarPath : jarPathList) {    ZipFile zip=new ZipFile(jarPath);    Enumeration<? extends ZipEntry> entries=zip.entries();    ZipEntry entry;    while (entries.hasMoreElements()) {      entry=entries.nextElement();      if (entry.getName().endsWith(".class")) {        ClassReader cr=new ClassReader(zip.getInputStream(entry));        String className=classReaderToClassName(cr);        classes.put(className,cr);      }    }  }  return classes;}  }
class C{  public void invokeDynamic(String name,String desc,Handle bsm,Object... bsmArgs){  mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);}  }
class C{  public void deactive(){  super.set(Boolean.FALSE);}  }
class C{  public boolean isUseClassName(){  return super.isUseClassName();}  }
class C{  public int eval(INode state){  EightPuzzleNode node=(EightPuzzleNode)state;  int misplaced=0;  for (int r=0; r <= EightPuzzleNode.MaxR; r++) {    for (int c=0; c <= EightPuzzleNode.MaxC; c++) {      if (node.isEmpty(r,c)) {        continue;      }      if (node.cell(r,c) != goal.cell(r,c)) {        misplaced++;      }    }  }  DepthTransition t=(DepthTransition)state.storedData();  if (t == null)   return misplaced;  return t.depth + misplaced;}  }
class C{  @Override public void receiveDecoderStateEvent(DecoderStateEvent event){switch (event.getEvent()) {case RESET:    resetState();  break;case SOURCE_FREQUENCY:mFrequency=event.getFrequency();break;default :break;}}  }
class C{  public void publishArtifacts(){  addArg("publishArtifacts");}  }
class C{  private byte[] sha1(String input) throws NoSuchAlgorithmException {  MessageDigest mDigest=MessageDigest.getInstance(SHA1_PROTOCOL);  byte[] result=mDigest.digest(input.getBytes());  return result;}  }
class C{  public synchronized boolean tryToExtendLifeTime(ServerLocation sl){  boolean result=true;  if (!this.allConnections.isEmpty()) {    final long now=System.nanoTime();    for (Iterator it=this.allConnections.iterator(); it.hasNext(); ) {      PooledConnection pc=(PooledConnection)it.next();      if (pc.remainingLife(now,lifetimeTimeoutNanos) > 0) {        break;      } else       if (pc.shouldDestroy()) {      } else       if (sl.equals(pc.getEndpoint().getLocation())) {        it.remove();        pc.setBirthDate(now);        getPoolStats().incLoadConditioningExtensions();        this.allConnections.addLast(pc);        return true;      } else {        result=false;      }    }  }  return result;}  }
class C{  public final void addElement(final short value){  checkSize(current_item);  items[current_item]=value;  current_item++;}  }
class C{  public PennTreebankReader(String treebankHome,String[] sections) throws Exception {  this(treebankHome,sections,ViewNames.PARSE_GOLD);}  }
class C{  public Boolean checkAnyTaxPendingForSelectedFinancialYear(final Advertisement advertisement,Installment installment){  Boolean pendingTaxCollection=false;  if (advertisement != null && advertisement.getDemandId() != null)   for (  final EgDemandDetails demandDtl : advertisement.getDemandId().getEgDemandDetails())   if (demandDtl.getEgDemandReason().getEgInstallmentMaster().getId().equals(installment.getId()) && demandDtl.getAmount().subtract(demandDtl.getAmtCollected()).compareTo(BigDecimal.ZERO) > 0) {    pendingTaxCollection=true;    break;  }  return pendingTaxCollection;}  }
class C{  public Address currentChangeAddress(){  return currentAddress(KeyChain.KeyPurpose.CHANGE);}  }
class C{  private static List<Challenge> parseChallenges(RawHeaders responseHeaders,String challengeHeader){  List<Challenge> result=new ArrayList<Challenge>();  for (int h=0; h < responseHeaders.length(); h++) {    if (!challengeHeader.equalsIgnoreCase(responseHeaders.getFieldName(h))) {      continue;    }    String value=responseHeaders.getValue(h);    int pos=0;    while (pos < value.length()) {      int tokenStart=pos;      pos=HeaderParser.skipUntil(value,pos," ");      String scheme=value.substring(tokenStart,pos).trim();      pos=HeaderParser.skipWhitespace(value,pos);      if (!value.regionMatches(true,pos,"realm=\"",0,"realm=\"".length())) {        break;      }      pos+="realm=\"".length();      int realmStart=pos;      pos=HeaderParser.skipUntil(value,pos,"\"");      String realm=value.substring(realmStart,pos);      pos++;      pos=HeaderParser.skipUntil(value,pos,",");      pos++;      pos=HeaderParser.skipWhitespace(value,pos);      result.add(new Challenge(scheme,realm));    }  }  return result;}  }
class C{  private static Map<String,Boolean> readProperties(Properties props,String keyPrefix){  Map<String,Boolean> filters=new TreeMap<String,Boolean>();  int counter=0;  boolean keyFound=true;  while (keyFound) {    String property=props.getProperty(keyPrefix + counter);    if (property != null) {      int pipePos=property.indexOf(BOOL_SEPARATOR);      if (pipePos >= 0) {        String name=property.substring(0,pipePos);        String enabled=property.substring(pipePos + 1);        filters.put(name,Boolean.valueOf(enabled));      } else {        filters.put(property,Boolean.TRUE);      }      counter++;    } else {      keyFound=false;    }  }  return filters;}  }
class C{  public EventProcessorHost(final String hostName,final String eventHubPath,final String consumerGroupName,final String eventHubConnectionString,final String storageConnectionString,final String storageContainerName,final ExecutorService executorService){  this(hostName,eventHubPath,consumerGroupName,eventHubConnectionString,storageConnectionString,storageContainerName,(String)null,executorService);}  }
class C{  public Cuboid(Map<String,Object> map){  this.worldName=(String)map.get("worldName");  this.x1=(Integer)map.get("x1");  this.x2=(Integer)map.get("x2");  this.y1=(Integer)map.get("y1");  this.y2=(Integer)map.get("y2");  this.z1=(Integer)map.get("z1");  this.z2=(Integer)map.get("z2");}  }
class C{  public void write(byte[] buf,int off,int len) throws TTransportException {  if (outputStream_ == null) {    throw new TTransportException(TTransportException.NOT_OPEN,"Cannot write to null outputStream");  }  try {    outputStream_.write(buf,off,len);  } catch (  IOException iox) {    throw new TTransportException(TTransportException.UNKNOWN,iox);  }}  }
class C{  public BuildImageParams withTag(String tag){  this.tag=tag;  return this;}  }
class C{  public CCodeBookmarkPanel(){  super(new BorderLayout());  m_bookmarkManager=new CCodeBookmarkManager();  m_bookmarkTable=new CCodeBookmarkTable(m_bookmarkManager);  add(new JScrollPane(m_bookmarkTable),BorderLayout.CENTER);}  }
class C{  private NavigationItem listProjects(AppContext userContext,NavigationQuery query,String parent,String[] filters,HierarchyMode hierarchyMode,List<NavigationItem> content) throws ScopeException {  if (parent == null || parent.equals("") || parent.equals("/") || parent.equals(PROJECTS_FOLDER.getSelfRef())) {    List<Project> projects=ProjectServiceBaseImpl.getInstance().readAll(userContext);    for (    Project project : projects) {      if (filters == null || filter(project,filters)) {        NavigationItem folder=new NavigationItem(query,project,parent);        if (query.getStyle() == Style.HUMAN || query.getStyle() == Style.HTML) {          folder.setLink(createLinkToFolder(userContext,query,folder));          folder.setObjectLink(createObjectLink(userContext,query,project));        }        HashMap<String,String> attrs=new HashMap<>();        attrs.put("jdbc",project.getDbUrl());        folder.setAttributes(attrs);        content.add(folder);      }    }    return createLinkableFolder(userContext,query,PROJECTS_FOLDER);  } else   if (parent.startsWith(PROJECTS_FOLDER.getSelfRef())) {    String projectRef=parent.substring(PROJECTS_FOLDER.getSelfRef().length() + 1);    Project project=findProject(userContext,projectRef);    List<Domain> domains=ProjectManager.INSTANCE.getDomains(userContext,project.getId());    Visibility visibility=query.getVisibility();    for (    Domain domain : domains) {      if (visibility == Visibility.ALL || isVisible(userContext,domain,visibility)) {        String name=domain.getName();        if (filters == null || filter(name,filters)) {          NavigationItem item=new NavigationItem(query,project,domain,parent);          if (query.getStyle() == Style.HUMAN || query.getStyle() == Style.HTML) {            item.setLink(createLinkToAnalysis(userContext,query,item));            item.setObjectLink(createObjectLink(userContext,query,domain));            item.setViewLink(createLinkToView(userContext,query,item));          }          HashMap<String,String> attrs=new HashMap<>();          attrs.put("project",project.getName());          item.setAttributes(attrs);          content.add(item);        }      }    }    return new NavigationItem(query,project,PROJECTS_FOLDER.getSelfRef());  } else {    return null;  }}  }
class C{  public void jumpLabel(String label) throws IOException {  if (pushValues.size() > 0) {    flushPushValues();  }  int offset=(int)out.getBytesWritten();  if (labels == null) {    labels=new HashMap();  }  labels.put(label,new int[]{offset,count + 1});}  }
class C{  public int findKthLargest(int[] A,int k){  if (k <= 0 || k > A.length)   return -1;  Queue<Integer> q=new PriorityQueue<Integer>(A.length,Collections.reverseOrder());  for (  int n : A)   q.add(n);  int res=0;  for (int i=0; i < k; i++)   res=q.poll();  return res;}  }
class C{  public void end(){  if (this.sectionName != null) {    Log.d(TAG,"" + this.sectionName + " loaded in "+ (ActorTime.currentTime() - sectionStart)+ " ms");    this.sectionName=null;  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public void testSuccessWithFailureRatio(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(2,3);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  state.recordFailure();  state.recordSuccess();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordSuccess();  assertTrue(breaker.isClosed());}  }
class C{  public void testBug70436() throws Exception {  assertEquals("Asia/Yerevan",TimeUtil.getCanonicalTimezone("Caucasus Standard Time",null));  assertEquals("Asia/Tbilisi",TimeUtil.getCanonicalTimezone("Georgian Standard Time",null));}  }
class C{  public DataSource fromProperties(Properties properties){  DataSource data=new DataSource();  data.setJndiLocation(properties.getProperty(DatasourcePropertySet.JNDI_LOCATION));  String connectionType=properties.getProperty(DatasourcePropertySet.CONNECTION_TYPE);  if (ConfigurationEntryType.XA_DATASOURCE.equals(connectionType)) {    data.setConnectionType(connectionType);  } else   if (ConfigurationEntryType.DATASOURCE.equals(connectionType)) {    data.setConnectionType(connectionType);  } else {    data.setConnectionType(ConfigurationEntryType.JDBC_DRIVER);  }  String transactionSupportProperty=properties.getProperty(DatasourcePropertySet.TRANSACTION_SUPPORT);  if (TransactionSupport.XA_TRANSACTION.toString().equals(transactionSupportProperty) || ConfigurationEntryType.XA_DATASOURCE.equals(connectionType)) {    data.setTransactionSupport(TransactionSupport.XA_TRANSACTION);  } else   if (TransactionSupport.LOCAL_TRANSACTION.toString().equals(transactionSupportProperty)) {    data.setTransactionSupport(TransactionSupport.LOCAL_TRANSACTION);  } else {    data.setTransactionSupport(TransactionSupport.NO_TRANSACTION);  }  data.setDriverClass(properties.getProperty(DatasourcePropertySet.DRIVER_CLASS));  data.setUrl(properties.getProperty(DatasourcePropertySet.URL));  data.setUsername(properties.getProperty(DatasourcePropertySet.USERNAME));  data.setPassword(properties.getProperty(DatasourcePropertySet.PASSWORD));  data.setId(properties.getProperty(DatasourcePropertySet.ID));  String driverPropertiesAsASemicolonDelimitedString=properties.getProperty(DatasourcePropertySet.CONNECTION_PROPERTIES);  data.setConnectionProperties(getDriverPropertiesFromString(driverPropertiesAsASemicolonDelimitedString));  if (data.getId() == null) {    data.setId(createIdFromJndiLocationIfNotNull(data.getJndiLocation()));  }  setCredentialsIfInsideDriverProperties(data);  return data;}  }
class C{  public static void main(String[] args){  port(8080);  String kind="DemoUser";  if (args != null) {    for (    String arg : args) {      if (arg.startsWith("kind=")) {        kind=arg.substring("kind=".length());      }    }  }  UserController userController=new UserController(new UserService(DatastoreOptions.defaultInstance().service(),kind));}  }
class C{  @Override public final boolean shouldPerform(OptOptions options){  return options.SSA_GCP || options.SSA_GCSE;}  }
class C{  public void dispose(){}  }
class C{  public CStackViewMenu(final JStackView stackView,final CStackMemoryProvider model,final Point point){  Preconditions.checkNotNull(stackView,"IE01504: Stack view argument can not be null");  Preconditions.checkNotNull(model,"IE01505: Model argument can not be null");  add(CActionProxy.proxy(new CGotoStackAction(stackView,model)));  addSeparator();  final String value=stackView.getValueAt(point);  if (value != null) {    add(CActionProxy.proxy(new CCopyStackValueAction(value)));    addSeparator();  }  final JMenu layoutMenu=new JMenu("Hex");  layoutMenu.add(CActionProxy.proxy(new CLayoutBytesAction(model)));  layoutMenu.add(CActionProxy.proxy(new CLayoutDwordAction(model)));  add(layoutMenu);}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  public static void run(){  Set<String> toModel=new TreeSet<String>();  for (  SootMethod method : PTABridge.v().getReachableMethods()) {    if (API.v().isSystemClass(method.getDeclaringClass()) && !ignoreNotModeled(method) && !API.v().isAPIModeledMethod(method)&& !SootMethod.staticInitializerName.equals(method.getName())) {      if (method.isPhantom()) {        System.out.println("Reachable phantom method: " + method);        AnalysisReport.v().addEntry("Reachable method in ADI model does not have a model implementation",method,AnalysisReport.Level.HIGH);      }      logger.debug("Method {}: hasbody-{}, abstract-{}, concrete-{}",method,method.hasActiveBody(),method.isAbstract(),method.isConcrete());      try {        toModel.add(method.getSignature());      } catch (      Exception e) {        logger.info("Cannot find method in model: {}",method);        AnalysisReport.v().addEntry("Cannot find reachable method in ADI model",method,AnalysisReport.Level.HIGH);      }    }  }  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + "api-modeling-summary.txt");    fw.write("Unmodeled Methods:\n\n");    for (    String m : toModel) {      fw.write(m + "\n");    }    checkHandlers(fw);    fw.write("\nErrors in PTA for reachable methods:\n\n");    checkAllocations(fw);    fw.close();  } catch (  Exception e) {    logger.error("Cannot write required modeling file",e);    droidsafe.main.Main.exit(1);  }  reportMissingAPIFieldsAndMethods();  printGetAddTaintCalls();}  }
class C{  public synchronized void freeInstance(Object obj){  freeStack.add(obj);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  public void accept(final ClassVisitor cv){  cv.visitInnerClass(name,outerName,innerName,access);}  }
class C{  public TupleExpr buildTupleExpr(){  TupleExpr result;  if (requiredTEs.isEmpty()) {    result=new SingletonSet();  } else {    result=requiredTEs.get(0);    for (int i=1; i < requiredTEs.size(); i++) {      result=new Join(result,requiredTEs.get(i));    }  }  for (  OptionalTupleExpr optTE : optionalTEs) {    if (optTE.hasConstraint()) {      result=new LeftJoin(result,optTE.getTupleExpr(),optTE.getConstraint());    } else {      result=new LeftJoin(result,optTE.getTupleExpr());    }  }  for (  ValueExpr constraint : constraints) {    result=new Filter(result,constraint);  }  return result;}  }
class C{  protected PickedObject doResolvePick(DrawContext dc,Point pickPoint,Layer layer){  PickedObject pickedObject=this.getTopObject(dc,pickPoint);  if (pickedObject != null) {    if (layer != null)     pickedObject.setParentLayer(layer);    dc.addPickedObject(pickedObject);  }  return pickedObject;}  }
class C{  protected synchronized void requestResultStreams(String url,String result,int responseCode){  Set<StreamInfo> expected=pendingRequests.remove(url);  if (expected == null) {    LOGGER.warning("No pending request for: " + url);  } else   if (responseCode != 200 || result == null) {    if (responseCode == 404) {      streamsRequestErrors+=2;    } else {      streamsRequestErrors++;    }    LOGGER.warning("Unexpected response code " + responseCode + " or result null (errors: "+ streamsRequestErrors+ ")");    streamsRequestError(expected);  } else {    if (parseStreams(result,expected) == -1) {      streamsRequestErrors++;    } else {      streamsRequestErrors=0;    }  }}  }
class C{  public boolean isEmpty(){  return staticFields.isEmpty() && instanceFields.isEmpty() && directMethods.isEmpty()&& virtualMethods.isEmpty();}  }
class C{  public static Node[] toNodeArray(Document doc,Object o) throws PageException {  if (o instanceof Node)   return new Node[]{(Node)o};  if (o instanceof Node[]) {    return (Node[])o;  } else   if (o instanceof Collection) {    Collection coll=(Collection)o;    Iterator<Object> it=coll.valueIterator();    List<Node> nodes=new ArrayList<Node>();    while (it.hasNext()) {      nodes.add(toNode(doc,it.next(),false));    }    return nodes.toArray(new Node[nodes.size()]);  }  Node[] nodes=_toNodeArray(doc,o);  if (nodes != null)   return nodes;  try {    return new Node[]{toNode(doc,o,false)};  } catch (  ExpressionException e) {    throw new XMLException("can't cast Object of type " + Caster.toClassName(o) + " to a XML Node Array");  }}  }
class C{  public void pushCurrentFuncResult(Object val){  m_currentFuncResult.push(val);}  }
class C{  private void showProcessing(boolean inProgress){  view.setLoaderVisibility(inProgress);  view.setInputsEnableState(!inProgress);}  }
class C{  public void alterDatabase(Database currentModel,Database desiredModel,StringBuilder ddl,IAlterDatabaseInterceptor... alterDatabaseInterceptors){  currentModel=currentModel.copy();  mergeOrRemovePlatformTypes(currentModel,desiredModel);  ModelComparator comparator=new ModelComparator(databaseName,databaseInfo,caseSensitive);  List<IModelChange> detectedChanges=comparator.compare(currentModel,desiredModel);  if (alterDatabaseInterceptors != null) {    for (    IAlterDatabaseInterceptor interceptor : alterDatabaseInterceptors) {      detectedChanges=interceptor.intercept(detectedChanges,currentModel,desiredModel);    }  }  processChanges(currentModel,desiredModel,detectedChanges,ddl);}  }
class C{  @Override public void process(KeyValPair<K,Integer> tuple){  if (counts.containsKey(tuple.getKey())) {    Integer val=(Integer)counts.remove(tuple.getKey());    counts.put(tuple.getKey(),val + tuple.getValue());  } else {    counts.put(tuple.getKey(),tuple.getValue());  }}  }
class C{  public long numBits(){  if (n == 0)   return 0;  return (marker != null ? rank.numBits() + marker.length() : 0) + (data != null ? data.size64() : 0) * width + offsetAndSeed.length * (long)Long.SIZE;}  }
class C{  public void removeListener(final IGroupNodeListener listener){  m_listeners.removeListener(listener);}  }
class C{  public Map<Integer,Vsan> showVsan(boolean includeZonesets) throws NetworkDeviceControllerException {  Map<Integer,Vsan> vsans=new HashMap<Integer,Vsan>();  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  sendWaitFor(MDSDialogProperties.getString("MDSDialog.showVsan.cmd"),defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  Vsan vsan=null;  Integer vsanId=null;  String[] regex={MDSDialogProperties.getString("MDSDialog.showVsan.vsan.match"),MDSDialogProperties.getString("MDSDialog.showVsan.namestate.match")};  String[] groups=new String[10];  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      vsanId=new Integer(groups[0]);    break;case 1:  String vsanName=groups[0];vsan=new Vsan(vsanId.toString(),vsanName);vsans.put(vsanId,vsan);if (includeZonesets) {List<Zoneset> zonesets=showZoneset(vsanId,false,null,false,false);for (Zoneset zs : zonesets) {if (zs.getActive()) {  vsan.setActiveZoneset(zs);} else {  vsan.getInactiveZonesets().add(zs);}}}vsanId=null;break;}}return vsans;}  }
class C{  public void cancelTaskNoException(Task task){  try {    cancelTask(task);  } catch (  Exception e) {    _log.error("Error when cancelling VMware task");  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 150) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  static public void assertSame(String message,Object expected,Object actual){  if (expected == actual)   return;  failNotSame(message,expected,actual);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.842 -0500",hash_original_method="9E0049FC39F955363C8AC470546DF985",hash_generated_method="5E48864011F01A2EFAAC41F42D632A46") @DSVerified @DSSpec(DSCat.IO) public static final long copyReader(Reader source,Writer dest) throws CopyStreamException {  return copyReader(source,dest,DEFAULT_COPY_BUFFER_SIZE);}  }
class C{  public void addImage(RenderedImage image,int delayMillis,int transparencyColorIndex) throws IOException {  if (this.counter == 0) {    iiom=writer.getDefaultImageMetadata(ImageTypeSpecifier.createFromRenderedImage(image),iwp);    writer.prepareWriteSequence(writer.getDefaultStreamMetadata(iwp));  }  if (this.counter == 0 && loops >= 0) {    IIOMetadata imageMetadata2=writer.getDefaultImageMetadata(ImageTypeSpecifier.createFromRenderedImage(image),iwp);    try {      setMetadata(imageMetadata2,delayMillis,transparencyColorIndex);      setLoops(imageMetadata2,this.loops);      writer.writeToSequence(new IIOImage(image,null,imageMetadata2),iwp);    } catch (    final IIOInvalidTreeException e) {      throw new IOException(e.getMessage());    }  } else   try {    setMetadata(iiom,delayMillis,transparencyColorIndex);    writer.writeToSequence(new IIOImage(image,null,iiom),iwp);  } catch (  final IIOInvalidTreeException e) {    throw new IOException(e.getMessage());  }  this.counter++;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void anonymize(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    if (theAtts.getType(i).equals("ID") || theAtts.getQName(i).equals("name")) {      theAtts.removeAttribute(i);    }  }}  }
class C{  static int store(SQL table,IModelMetaData metaData,boolean setAsDefault) throws AdeException {  final int modelInternalId=storeToModelsTable(table,metaData);  metaData.setModelInternalId(modelInternalId);  if (setAsDefault) {    setAsDefault(table,modelInternalId);  }  return modelInternalId;}  }
class C{  public Cursor query(String tag){  return query(tag,Integer.MAX_VALUE);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private void storeInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE),index);}  }
class C{  public ServiceParameterException(){  super();}  }
class C{  @Override public void init(FilterConfig filterConfig){  config=filterConfig;  if (filterConfig != null) {    String value=filterConfig.getInitParameter("debug");    if (value != null) {      debug=Integer.parseInt(value);    }    String str=filterConfig.getInitParameter("compressionThreshold");    if (str != null) {      compressionThreshold=Integer.parseInt(str);      if (compressionThreshold != 0 && compressionThreshold < minThreshold) {        if (debug > 0) {          System.out.println("compressionThreshold should be either 0 - no compression or >= " + minThreshold);          System.out.println("compressionThreshold set to " + minThreshold);        }        compressionThreshold=minThreshold;      }    }    str=filterConfig.getInitParameter("compressionBuffer");    if (str != null) {      compressionBuffer=Integer.parseInt(str);      if (compressionBuffer < minBuffer) {        if (debug > 0) {          System.out.println("compressionBuffer should be >= " + minBuffer);          System.out.println("compressionBuffer set to " + minBuffer);        }        compressionBuffer=minBuffer;      }    }    str=filterConfig.getInitParameter("compressionMimeTypes");    if (str != null) {      List<String> values=new ArrayList<String>();      StringTokenizer st=new StringTokenizer(str,",");      while (st.hasMoreTokens()) {        String token=st.nextToken().trim();        if (token.length() > 0) {          values.add(token);        }      }      if (values.size() > 0) {        compressionMimeTypes=values.toArray(new String[values.size()]);      } else {        compressionMimeTypes=null;      }      if (debug > 0) {        System.out.println("compressionMimeTypes set to " + compressionMimeTypes);      }    }  }}  }
class C{  private Java2DRenderer(float dotsPerPoint,int dotsPerPixel){  this();  init(dotsPerPoint,dotsPerPixel);}  }
class C{  public BarycenterScorer(Hypergraph<V,E> graph,Function<E,? extends Number> edge_weights){  super(graph,edge_weights,false);}  }
class C{  public boolean hasDefaultFileExtension(String extension){  String ext=getDefaultFileExtension();  return ext != null && ext.equalsIgnoreCase(extension);}  }
class C{  public boolean isInt(String input){  return GenericValidator.isInt(input);}  }
class C{  public void testIrishLowerCaseFilter() throws Exception {  TokenStream stream=whitespaceMockTokenizer("nAthair tUISCE hARD");  IrishLowerCaseFilter filter=new IrishLowerCaseFilter(stream);  assertTokenStreamContents(filter,new String[]{"n-athair","t-uisce","hard"});}  }
class C{  @ExceptionHandler(value=Exception.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @ResponseBody public DataModelResult<String> exception(Exception exception,WebRequest request){  log.error("RestfulApiAdvice -> [ params={} exception={} message={}] ",request.getParameterMap(),exception.getClass(),exception.getMessage());  String message=StringUtils.EMPTY;  HttpServletRequest httpServletRequest=((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();  WebApplicationContext ac=RequestContextUtils.findWebApplicationContext(httpServletRequest);  int stateCode=StateCode.ERROR;  if (exception instanceof SQLException) {    stateCode=StateCode.ERROR_DB;  } else   if (exception instanceof DataIntegrityViolationException) {    stateCode=StateCode.ERRORDB_UNIQUE;    message=ac.getMessage("common.error.unique",null,request.getLocale());  } else   if (exception instanceof AuthenticationException) {    stateCode=StateCode.ERROR_ACCOUNT;    message=ac.getMessage("account.error.auth",null,request.getLocale());  } else {    message=StringUtils.isBlank(exception.getMessage()) ? exception.getClass().getName() : exception.getMessage();  }  return new DataModelResult(stateCode,null,message);}  }
class C{  @DSSpec(DSCat.EXEC) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.189 -0500",hash_original_method="D1ECD2ED5B40CEEFE097F1521E46D9CD",hash_generated_method="BC7567E4F469DC71F10170E64C7B8281") public void schedule(TimerTask task,Date when,long period){  if (period <= 0 || when.getTime() < 0) {    throw new IllegalArgumentException();  }  long delay=when.getTime() - System.currentTimeMillis();  scheduleImpl(task,delay < 0 ? 0 : delay,period,false);}  }
class C{  void deleteFromLandingPage(Product product){  dm.createNamedQuery("LandingpageProduct.deleteLandingpageProductForProduct").setParameter("productKey",Long.valueOf(product.getKey())).executeUpdate();}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static void logError(Throwable exception){  logError(exception,"Unexpected Exception");}  }
class C{  @Override public void enableStreaming(){  streaming=true;}  }
class C{  public static Collection<QueryLanguage> values(){  return Collections.unmodifiableList(QUERY_LANGUAGES);}  }
class C{  ControlSetup(final ByteBuffer buffer){  if (buffer == null) {    throw new IllegalArgumentException("buffer cannot be null");  }  this.controlSetup=BufferUtils.slice(buffer,0,LibUsb.CONTROL_SETUP_SIZE);  this.controlSetup.order(ByteOrder.LITTLE_ENDIAN);}  }
class C{  public void testPassiveReserveAvailabilityChange() throws Throwable {  createServers(3);  CopycatServer passive=createServer(nextMember(Member.Type.PASSIVE));  passive.join(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  await(10000);  Member reserveMember=nextMember(Member.Type.RESERVE);  passive.cluster().onJoin(null);  CopycatServer reserve=createServer(reserveMember);  reserve.join(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  await(10000);  reserve.shutdown().thenRun(null);  await(10000,2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.826 -0500",hash_original_method="4CCBB4621387969DDD8BDCB7ADDE8473",hash_generated_method="8F69CBE71464DCC55756BC94777E36CD") public final void reset(byte[] encoded) throws IOException {  buffer=encoded;  next();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.670 -0500",hash_original_method="6D608DB52AC8952A89B8472446A9496C",hash_generated_method="6DBDE6CD2DFF18E2305CB5B3F5A9E508") public static void notifyDirectoryChange(ContentResolver resolver){  ContentValues contentValues=new ContentValues();  resolver.update(Directory.CONTENT_URI,contentValues,null,null);}  }
class C{  public HCardPage(Template template){  this.template=template;}  }
class C{  public InsufficientResourcesException(String explanation){  super(explanation);}  }
class C{  @LargeTest public void testPerformanceOverlayVideoItem() throws Exception {  final String videoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";  final int videoItemStartTime1=0;  final int videoItemEndTime1=10000;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String overlayFilename=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  final int overlayStartTime=1000;  final int overlayDuration=5000;  final String[] loggingInfo=new String[2];  MediaVideoItem mediaVideoItem=null;  try {    mediaVideoItem=new MediaVideoItem(mVideoEditor,"m0",videoItemFileName1,renderingMode);    mediaVideoItem.setExtractBoundaries(videoItemStartTime1,videoItemEndTime1);  } catch (  Exception e1) {    assertTrue("Can not create Video Item with file name = " + e1.toString(),false);  }  final OverlayFrame overlayFrame[]=new OverlayFrame[NUM_OF_ITERATIONS];  final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFilename,640,480);  int timeTaken=0;  long beginTime=SystemClock.uptimeMillis();  for (int i=0; i < NUM_OF_ITERATIONS; i++) {    overlayFrame[i]=new OverlayFrame(mediaVideoItem,"overlay" + i,mBitmap,overlayStartTime,overlayDuration);    mediaVideoItem.addOverlay(overlayFrame[i]);  }  timeTaken=calculateTimeTaken(beginTime,NUM_OF_ITERATIONS);  loggingInfo[0]="Time taken to add & create Overlay :" + timeTaken;  beginTime=SystemClock.uptimeMillis();  for (int i=0; i < NUM_OF_ITERATIONS; i++) {    assertEquals("Removing Overlays",overlayFrame[i],mediaVideoItem.removeOverlay((overlayFrame[i].getId())));  }  timeTaken=calculateTimeTaken(beginTime,NUM_OF_ITERATIONS);  loggingInfo[1]="\n\tTime taken to remove  Overlay :" + timeTaken;  writeTimingInfo("testPerformanceOverlayVideoItem (in mSec)",loggingInfo);}  }
class C{  public static String canonicalizeDomainName(String label){  return Idn.toASCII(Ascii.toLowerCase(label));}  }
class C{  public String toString(){  if (operator == NOT_OPERATOR) {    return "(!" + operands.get(0) + ")";  }  final StringBuffer buffer=new StringBuffer(operator == AND_OPERATOR ? "(&" : "(|");  final Filter[] operandArray=operands.toArray(new Filter[operands.size()]);  for (int i=0; i < operandArray.length; i++) {    buffer.append(operandArray[i]);  }  buffer.append(")");  return buffer.toString();}  }
class C{  public ReadMultipleRegistersRequest(){  super();  setFunctionCode(Modbus.READ_MULTIPLE_REGISTERS);  setDataLength(4);}  }
class C{  TypeSimplifier(Types typeUtils,String packageName,Set<TypeMirror> types,TypeMirror base){  this.typeUtils=typeUtils;  Set<TypeMirror> typesPlusBase=new TypeMirrorSet(types);  if (base != null) {    typesPlusBase.add(base);  }  Set<TypeMirror> referenced=referencedClassTypes(typeUtils,typesPlusBase);  Set<TypeMirror> defined=nonPrivateDeclaredTypes(typeUtils,base);  this.imports=findImports(typeUtils,packageName,referenced,defined);}  }
class C{  @Override public boolean isDefaultFullDetail(){  return super.isDefaultFullDetail();}  }
class C{  public int add(String name,Symbol value){  values.add(value);  orderedNames.add(name);  blockOfDeckaration.add(currentBlock);  return orderedNames.size() - 1;}  }
class C{  public static <T extends Enum<T>>boolean isValidEnum(String value,Class<T> enumClass){  for (  T e : enumClass.getEnumConstants()) {    if (e.name().equalsIgnoreCase(value)) {      return true;    }  }  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.813 -0500",hash_original_method="FFF3CF52B9B0B5141C3665D271E08CFC",hash_generated_method="8B1A2D0030F1493711F7EA1AC0C82AC8") public V remove(Object key1,Object key2){  Entry<E,K,V> e=removeEntry(key1,key2);  return (e != null) ? e.value : null;}  }
class C{  public void removeRelationship(Relationship relationship){  throwReadOnly();}  }
class C{  public OPTICS(DistanceMetric dm,int minPts,double xi){  setDistanceMetric(dm);  setMinPts(minPts);  setXi(xi);}  }
class C{  public boolean checkForRootNative(){  String binaryName="su";  String[] paths=new String[Const.suPaths.length];  for (int i=0; i < paths.length; i++) {    paths[i]=Const.suPaths[i] + binaryName;  }  RootBeerNative rootBeerNative=new RootBeerNative();  rootBeerNative.setLogDebugMessages(true);  return rootBeerNative.checkForRoot(paths) > 0;}  }
class C{  @Override public void repaint(){}  }
class C{  @Override public void selectionChanged(SelectionChangedEvent e){  if (e.getSelectionProvider() == fTreeViewer) {    ISelection selection=e.getSelection();    revealSelectionInEditor(selection,false);    if (selection instanceof IStructuredSelection && ((IStructuredSelection)selection).size() == 1) {      Object selectedNode=((IStructuredSelection)selection).getFirstElement();      if (selectedNode instanceof TreeElement<?,?>) {        TreeElement<?,?> treeElement=(TreeElement<?,?>)selectedNode;        Object data=treeElement.getData();        if (data instanceof JsonObject) {          MethodModel method=getMethodModel((JsonObject)data);          InfoFlowDetailsViewPart.openView(method);          ValueViewPart.openView(method);          PointsToViewPart.openView(method);        }      }    }    fTreeViewer.getControl().setFocus();  }}  }
class C{  public iframe addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public DTMConfigurationException(Throwable e){  super(e);}  }
class C{  public final synchronized void moveVariation(int delta){  if (((delta > 0) && canMoveVariationDown()) || ((delta < 0) && canMoveVariationUp())) {    game.moveVariation(delta);    updateGUI();  }}  }
class C{  public static List<String> filterIndices(List<String> availableIndices,String[] selectedIndices,IndicesOptions indicesOptions){  if (selectedIndices == null || selectedIndices.length == 0) {    return availableIndices;  }  Set<String> result=null;  for (int i=0; i < selectedIndices.length; i++) {    String indexOrPattern=selectedIndices[i];    boolean add=true;    if (!indexOrPattern.isEmpty()) {      if (availableIndices.contains(indexOrPattern)) {        if (result != null) {          result.add(indexOrPattern);        }        continue;      }      if (indexOrPattern.charAt(0) == '+') {        add=true;        indexOrPattern=indexOrPattern.substring(1);        if (i == 0) {          result=new HashSet<>();        }      } else       if (indexOrPattern.charAt(0) == '-') {        if (i == 0) {          result=new HashSet<>(availableIndices);        }        add=false;        indexOrPattern=indexOrPattern.substring(1);      }    }    if (indexOrPattern.isEmpty() || !Regex.isSimpleMatchPattern(indexOrPattern)) {      if (!availableIndices.contains(indexOrPattern)) {        if (!indicesOptions.ignoreUnavailable()) {          throw new IndexNotFoundException(indexOrPattern);        } else {          if (result == null) {            result=new HashSet<>();            result.addAll(availableIndices.subList(0,i));          }        }      } else {        if (result != null) {          if (add) {            result.add(indexOrPattern);          } else {            result.remove(indexOrPattern);          }        }      }      continue;    }    if (result == null) {      result=new HashSet<>();      result.addAll(availableIndices.subList(0,i));    }    boolean found=false;    for (    String index : availableIndices) {      if (Regex.simpleMatch(indexOrPattern,index)) {        found=true;        if (add) {          result.add(index);        } else {          result.remove(index);        }      }    }    if (!found && !indicesOptions.allowNoIndices()) {      throw new IndexNotFoundException(indexOrPattern);    }  }  if (result == null) {    return Collections.unmodifiableList(new ArrayList<>(Arrays.asList(selectedIndices)));  }  return Collections.unmodifiableList(new ArrayList<>(result));}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  void showMessageBox(String message){  showMessageBox(message,null);}  }
class C{  private void createBaseLayoutTab(LayoutTab layoutTab){  if (mTabModelSelector == null)   return;  int baseTabId=mTabModelSelector.getCurrentTabId();  if (baseTabId == Tab.INVALID_TAB_ID)   return;  mBaseTab=createLayoutTab(baseTabId,mTabModelSelector.isIncognitoSelected(),NO_CLOSE_BUTTON,NO_TITLE);  assert mBaseTab != null;  mBaseTab.setScale(1.f);  mBaseTab.setBorderScale(1.f);  mBaseTab.setBorderAlpha(0.f);  mLayoutTabs=new LayoutTab[]{mBaseTab};}  }
class C{  public tr addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public TableSwitchStmt newTableSwitchStmt(Value key,int lowIndex,int highIndex,List targets,Unit defaultTarget){  return new JTableSwitchStmt(key,lowIndex,highIndex,targets,defaultTarget);}  }
class C{  final void performAppGcsIfAppropriateLocked(){  if (canGcNowLocked()) {    performAppGcsLocked();    return;  }  scheduleAppGcsLocked();}  }
class C{  @Override public void createTables(final Map<TableReference,byte[]> tableNamesToTableMetadata){  Map<TableReference,byte[]> tablesToActuallyCreate=filterOutExistingTables(tableNamesToTableMetadata);  Map<TableReference,byte[]> tablesToUpdateMetadataFor=filterOutNoOpMetadataChanges(tableNamesToTableMetadata);  boolean onlyMetadataChangesAreForNewTables=tablesToUpdateMetadataFor.keySet().equals(tablesToActuallyCreate.keySet());  boolean putMetadataWillNeedASchemaChange=!onlyMetadataChangesAreForNewTables;  if (!tablesToActuallyCreate.isEmpty()) {    schemaMutationLock.runWithLock(null);  }  internalPutMetadataForTables(tablesToUpdateMetadataFor,putMetadataWillNeedASchemaChange);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void handleDecode(Result rawResult,Bitmap barcode){  inactivityTimer.onActivity();  lastResult=rawResult;  ResultHandler resultHandler=ResultHandlerFactory.makeResultHandler(this,rawResult);  boolean fromLiveScan=barcode != null;  if (fromLiveScan) {    historyManager.addHistoryItem(rawResult,resultHandler);    beepManager.playBeepSoundAndVibrate();    drawResultPoints(barcode,rawResult);  }switch (source) {case NATIVE_APP_INTENT:case PRODUCT_SEARCH_LINK:    handleDecodeExternally(rawResult,resultHandler,barcode);  break;case ZXING_LINK:if (returnUrlTemplate == null) {  handleDecodeInternally(rawResult,resultHandler,barcode);} else {  handleDecodeExternally(rawResult,resultHandler,barcode);}break;case NONE:SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)) {String message=getResources().getString(fakeR.getId("string","msg_bulk_mode_scanned")) + " (" + rawResult.getText()+ ')';Toast.makeText(this,message,Toast.LENGTH_SHORT).show();restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);} else {handleDecodeInternally(rawResult,resultHandler,barcode);}break;}}  }
class C{  public int height(){  return height(root);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String profile=null;  if (curNumberOfParameters == 2) {    profile=getString(stack);  } else {    UIManager uiMgr=stack.getUIMgr();    profile=uiMgr.getActiveSecurityProfile();  }  String perm=getString(stack);  if (profile == null)   return Boolean.FALSE;  return Permissions.hasPermission(perm,profile) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  @Override public void clear(){  super.clear();  Object[] keys=_set;  double[] values=_values;  for (int i=keys.length; i-- > 0; ) {    keys[i]=null;    values[i]=0;  }}  }
class C{  public void testPixelError(){  setDefaultParameters();  this.simulator.setDishDishVariability(0.0001);  this.simulator.setNumSamplesPerDish(1000);  this.simulator.setSampleSampleVariability(0.0001);  this.simulator.setChipChipVariability(0.0001);  this.simulator.setPixelDigitalization(0.3);  this.simulator.setStepsGenerated(2);  this.simulator.setNumCellsPerDish(100);  this.simulator.simulate(this.history);  double[][][] measuredData=this.simulator.getMeasuredData();  DoubleArrayList doubleArrayList=new DoubleArrayList(measuredData[1][0]);  double sum=Descriptive.sum(doubleArrayList);  double sumOfSquares=Descriptive.sumOfSquares(doubleArrayList);  double gene2time1sd=Descriptive.standardDeviation(Descriptive.variance(measuredData[1][0].length,sum,sumOfSquares));  DoubleArrayList doubleArrayList1=new DoubleArrayList(measuredData[2][0]);  double sum1=Descriptive.sum(doubleArrayList1);  double sumOfSquares1=Descriptive.sumOfSquares(doubleArrayList1);  double gene3time1sd=Descriptive.standardDeviation(Descriptive.variance(measuredData[2][0].length,sum1,sumOfSquares1));  DoubleArrayList doubleArrayList2=new DoubleArrayList(measuredData[1][1]);  double sum2=Descriptive.sum(doubleArrayList2);  double sumOfSquares2=Descriptive.sumOfSquares(doubleArrayList2);  double gene1time2sd=Descriptive.standardDeviation(Descriptive.variance(measuredData[1][1].length,sum2,sumOfSquares2));  assertEquals(0.3,gene2time1sd,0.1);  assertEquals(0.3,gene3time1sd,0.1);  assertEquals(0.3,gene1time2sd,0.1);}  }
class C{  protected void passedFilter(OMGraphic omg){}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public void affinityFunctionDestroy(long ptr){  if (!lock.enterBusy())   return;  try {    PlatformCallbackUtils.affinityFunctionDestroy(envPtr,ptr);  }  finally {    leave();  }}  }
class C{  private boolean isValid(String s){  int count=0;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '(') {      count++;    } else     if (c == ')' && count-- == 0) {      return false;    }  }  return count == 0;}  }
class C{  private void load(){  log.config("");  infoArea.setText(CLogMgt.getInfo(null).toString());  infoArea.setCaretPosition(0);  autoCommit.setSelected(Env.isAutoCommit(Env.getCtx()));  autoNew.setSelected(Env.isAutoNew(Env.getCtx()));  adempiereSys.setSelected(Ini.isPropertyBool(Ini.P_ADEMPIERESYS));  logMigrationScript.setSelected(Ini.isPropertyBool(Ini.P_LOGMIGRATIONSCRIPT));  if (Env.getAD_Client_ID(Env.getCtx()) > 20) {    adempiereSys.setSelected(false);    adempiereSys.setEnabled(false);    if (Env.getAD_User_ID(Env.getCtx()) > 100) {      logMigrationScript.setSelected(false);      logMigrationScript.setEnabled(false);    }  }  if (MSystem.isSwingRememberPasswordAllowed()) {    autoLogin.setSelected(Ini.isPropertyBool(Ini.P_A_LOGIN));    storePassword.setSelected(Ini.isPropertyBool(Ini.P_STORE_PWD));  } else {    autoLogin.setSelected(false);    storePassword.setSelected(false);  }  if (MRole.getDefault().isShowAcct())   showAcct.setSelected(Ini.isPropertyBool(Ini.P_SHOW_ACCT)); else {    showAcct.setSelected(false);    showAcct.setReadWrite(false);  }  showTrl.setSelected(Ini.isPropertyBool(Ini.P_SHOW_TRL));  showAdvanced.setSelected(Ini.isPropertyBool(Ini.P_SHOW_ADVANCED));  MUser user=MUser.get(Env.getCtx());  String cp=user.getConnectionProfile();  if (cp == null)   cp=MRole.getDefault().getConnectionProfile();  if (cp != null) {    CConnection.get().setConnectionProfile(cp);    connectionProfile.setReadWrite(false);  }  connectionProfile.setSelectedItem(CConnection.get().getConnectionProfilePair());  cacheWindow.setSelected(Ini.isCacheWindow());  printPreview.setSelected(Ini.isPropertyBool(Ini.P_PRINTPREVIEW));  validateConnectionOnStartup.setSelected(Ini.isPropertyBool(Ini.P_VALIDATE_CONNECTION_ON_STARTUP));  singleInstancePerWindow.setSelected(Ini.isPropertyBool(Ini.P_SINGLE_INSTANCE_PER_WINDOW));  openWindowMaximized.setSelected(Ini.isPropertyBool(Ini.P_OPEN_WINDOW_MAXIMIZED));  traceLevel.setSelectedItem(CLogMgt.getLevel());  traceFile.setSelected(Ini.isPropertyBool(Ini.P_TRACEFILE));  fPrinter.setValue(Env.getContext(Env.getCtx(),"#Printer"));  fDate.setValue(Env.getContextAsDate(Env.getCtx(),"#Date"));  fCharset.setSelectedItem(Ini.getCharset());  String[] context=Env.getEntireContext(Env.getCtx());  Arrays.sort(context);  infoList.setListData(context);  bErrorsOnly.setSelected(true);  errorTable.setCellSelectionEnabled(true);  cmd_displayErrors();  bErrorsOnly.addActionListener(this);  bErrorReset.addActionListener(this);  bErrorSave.addActionListener(this);  bErrorEMail.addActionListener(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.224 -0500",hash_original_method="968D057F7853F8246DB89EBE38C4B30E",hash_generated_method="8E380029F1DF53CB7C2229165B6B06C1") public void createContentList(String body) throws ParseException {  try {    HeaderFactoryExt headerFactory=new HeaderFactoryImpl();    String delimiter=this.getContentTypeHeader().getParameter(BOUNDARY);    if (delimiter == null) {      this.contentList=new LinkedList<Content>();      ContentImpl content=new ContentImpl(body,delimiter);      content.setContentTypeHeader(this.getContentTypeHeader());      this.contentList.add(content);      return;    }    String[] fragments=body.split("--" + delimiter + "\r\n");    for (    String nextPart : fragments) {      if (nextPart == null) {        return;      }      StringBuffer strbuf=new StringBuffer(nextPart);      while (strbuf.length() > 0 && (strbuf.charAt(0) == '\r' || strbuf.charAt(0) == '\n'))       strbuf.deleteCharAt(0);      if (strbuf.length() == 0)       continue;      nextPart=strbuf.toString();      int position=nextPart.indexOf("\r\n\r\n");      int off=4;      if (position == -1) {        position=nextPart.indexOf("\n");        off=2;      }      if (position == -1)       throw new ParseException("no content type header found in " + nextPart,0);      String rest=nextPart.substring(position + off);      if (rest == null)       throw new ParseException("No content [" + nextPart + "]",0);      String headers=nextPart.substring(0,position);      ContentImpl content=new ContentImpl(rest,boundary);      String[] headerArray=headers.split("\r\n");      for (      String hdr : headerArray) {        Header header=headerFactory.createHeader(hdr);        if (header instanceof ContentTypeHeader) {          content.setContentTypeHeader((ContentTypeHeader)header);        } else         if (header instanceof ContentDispositionHeader) {          content.setContentDispositionHeader((ContentDispositionHeader)header);        } else {          throw new ParseException("Unexpected header type " + header.getName(),0);        }        contentList.add(content);      }    }  } catch (  StringIndexOutOfBoundsException ex) {    throw new ParseException("Invalid Multipart mime format",0);  }}  }
class C{  final boolean isOwnedBy(AbstractQueuedSynchronizer sync){  return sync == AbstractQueuedSynchronizer.this;}  }
class C{  public synchronized void clean(){  for (Iterator<File> i=value.iterator(); i.hasNext(); ) {    File next=i.next();    if (!next.exists())     i.remove();  }  setValue(value);}  }
class C{  @SuppressWarnings("regex") public static String regexError(String s){  return regexError(s,0);}  }
class C{  @Nonnull public BugInstance addClass(ClassDescriptor classDescriptor){  add(ClassAnnotation.fromClassDescriptor(classDescriptor));  return this;}  }
class C{  public static String createCsvFilePathAndHandleScopes(Shell shell,String text,VeriniceLinkTable veriniceLinkTable){  csvDialog=new CsvExportDialog(Display.getCurrent().getActiveShell(),text,veriniceLinkTable);  if (csvDialog.open() == Dialog.OK) {    return csvDialog.getFilePath();  }  return null;}  }
class C{  public AnimationDialogFragment build(){  if (speedCoefficient < 0) {    throw new IllegalArgumentException("Speed coefficient must be positive.");  }  if (speedCoefficient == 0) {    speedCoefficient=Constants.DEFAULT_SPEED_COEFFICIENT;  }  return new AnimationDialogFragment(this);}  }
class C{  public static void main(String[] argv){  showDocument(argv[0]);}  }
class C{  void declarePrefix(String prefix,String uri){  if (!declsOK) {    throw new IllegalStateException("can't declare any more prefixes in this context");  }  if (!declSeen) {    copyTables();  }  if (declarations == null) {    declarations=new ArrayList<String>();  }  prefix=prefix.intern();  uri=uri.intern();  if ("".equals(prefix)) {    if ("".equals(uri)) {      defaultNS=null;    } else {      defaultNS=uri;    }  } else {    prefixTable.put(prefix,uri);    uriTable.put(uri,prefix);  }  declarations.add(prefix);}  }
class C{  public BCSAPIMessage.BLK toBCSAPIMessage(){  BCSAPIMessage.BLK.Builder builder=BCSAPIMessage.BLK.newBuilder();  builder.setVersion(getVersion());  builder.setDifficulty(getDifficultyTarget());  builder.setNonce(getNonce());  builder.setTimestamp(getCreateTime());  builder.setMerkleRoot(ByteString.copyFrom(getMerkleRoot().unsafeGetArray()));  builder.setPreviousBlock(ByteString.copyFrom(getPreviousID().unsafeGetArray()));  for (  MerkleTreeNode n : getMerkleTreeNodes()) {    if (n instanceof Transaction) {      builder.addTransactions(BCSAPIMessage.MerkleNode.newBuilder().setTransaction(((Transaction)n).toBCSAPIMessage()));    } else {      builder.addTransactions(BCSAPIMessage.MerkleNode.newBuilder().setHash(ByteString.copyFrom(n.getID().unsafeGetArray())));    }  }  return builder.build();}  }
class C{  public Message authResponse(AuthRequest auhtReq,String userSelId,String userSelClaimed,boolean authenticatedAndApproved,String opEndpoint){  return authResponse(auhtReq,userSelId,userSelClaimed,authenticatedAndApproved,opEndpoint,true);}  }
class C{  private static DateTimeFormatter createFormatterForStyle(String style){  if (style == null || style.length() != 2) {    throw new IllegalArgumentException("Invalid style specification: " + style);  }  int dateStyle=selectStyle(style.charAt(0));  int timeStyle=selectStyle(style.charAt(1));  if (dateStyle == NONE && timeStyle == NONE) {    throw new IllegalArgumentException("Style '--' is invalid");  }  return createFormatterForStyleIndex(dateStyle,timeStyle);}  }
class C{  public SalesDetailInfo(int lineNo,String productName,double price){  this.lineNO=lineNo;  this.productName=productName;  this.price=price;}  }
class C{  public TPSTupleSerializer(){}  }
class C{  public TFloatHashSet(int initialCapacity,float loadFactor,TFloatHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  @Override public int hashCode(){  int result;  result=this.x.hashCode();  result=29 * result + (this.obj != null ? this.obj.hashCode() : 0);  return result;}  }
class C{  public V value(){  return _map._values[_index];}  }
class C{  public static String forwardToLocal(int roboRioExternalPort,int localhostPort){  String out="socat TCP4-LISTEN:" + roboRioExternalPort + ",fork TCP4:127.0.0.1:"+ localhostPort;  RIOdroid.executeCommandThread(out);  return out;}  }
class C{  public static ErThrowable fromThrowableProxy(ThrowableProxy tp){  if (tp == null) {    return null;  }  ErThrowable ert=new ErThrowable();  ert.setDetailMessage(tp.getMessage());  ExtendedStackTraceElement[] est=tp.getExtendedStackTrace();  ErStackTraceElement[] erStackTraceElements=new ErStackTraceElement[est.length];  for (int i=0; i < est.length; i++) {    erStackTraceElements[i]=ErStackTraceElement.fromExtendedStackTraceElement(est[i]);  }  ert.setStackTraceElements(erStackTraceElements);  return ert;}  }
class C{  private void encodeReplace(final DiffPart part) throws UnsupportedEncodingException, EncodingException {  data.writeBit(1);  data.writeBit(0);  data.writeBit(0);  data.writeValue(codecData.getBlocksizeS(),part.getStart());  data.writeValue(codecData.getBlocksizeE(),part.getLength());  String text=part.getText();  byte[] bText=text.getBytes(WIKIPEDIA_ENCODING);  data.writeValue(codecData.getBlocksizeL(),bText.length);  data.write(bText);}  }
class C{  public static char[] encode(byte[] in,int iLen){  return encode(in,0,iLen);}  }
class C{  public final long readLELong(byte[] byteArray){  return (long)(byteArray[7]) << 56 | (long)(byteArray[6] & 0xff) << 48 | (long)(byteArray[5] & 0xff) << 40 | (long)(byteArray[4] & 0xff) << 32 | (long)(byteArray[3] & 0xff) << 24 | (long)(byteArray[2] & 0xff) << 16 | (long)(byteArray[1] & 0xff) << 8 | (byteArray[0] & 0xff);}  }
class C{  public static boolean isDateBeforeToday(String date){  if (isEmpty(date))   return defaultEmptyOK;  int dateSlash1=date.indexOf("/");  int dateSlash2=date.lastIndexOf("/");  if (dateSlash1 <= 0)   return defaultEmptyOK;  java.util.Date passed=null;  if (dateSlash1 == dateSlash2) {    String month=date.substring(0,dateSlash1);    String day="28";    String year=date.substring(dateSlash1 + 1);    if (!isDate(year,month,day))     return false;    try {      int monthInt=Integer.parseInt(month);      int yearInt=Integer.parseInt(year);      Calendar calendar=Calendar.getInstance();      calendar.set(yearInt,monthInt - 1,0,0,0,0);      calendar.add(Calendar.MONTH,1);      passed=new java.util.Date(calendar.getTime().getTime());    } catch (    Exception e) {      passed=null;    }  } else {    String month=date.substring(0,dateSlash1);    String day=date.substring(dateSlash1 + 1,dateSlash2);    String year=date.substring(dateSlash2 + 1);    if (!isDate(year,month,day))     return false;    passed=UtilDateTime.toDate(month,day,year,"0","0","0");  }  java.util.Date now=UtilDateTime.nowDate();  if (passed != null) {    return passed.before(now);  } else {    return false;  }}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  private View findFocusableViewInBounds(boolean topFocus,int top,int bottom){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewTop=mHorizontal ? view.getLeft() : view.getTop();    int viewBottom=mHorizontal ? view.getRight() : view.getBottom();    if (top < viewBottom && viewTop < bottom) {      final boolean viewIsFullyContained=(top < viewTop) && (viewBottom < bottom);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final int ctop=mHorizontal ? focusCandidate.getLeft() : focusCandidate.getTop();        final int cbot=mHorizontal ? focusCandidate.getRight() : focusCandidate.getBottom();        final boolean viewIsCloserToBoundary=(topFocus && viewTop < ctop) || (!topFocus && viewBottom > cbot);        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  public static void e(String tag,String msg,Throwable tr){  println(ERROR,tag,msg,tr);}  }
class C{  private boolean canOwnInitializer(Symbol sym){  return (sym.kind & (VAR | TYP)) != 0 || (sym.kind == MTH && (sym.flags() & BLOCK) != 0);}  }
class C{  public void resetCvsCommand(){  super.resetCvsCommand();  setRecursive(true);  setCheckThatUnmodified(false);  setDeleteTag(false);  setAllowMoveDeleteBranchTag(false);  setMakeBranchTag(false);  setOverrideExistingTag(false);}  }
class C{  public static boolean isAppsMode(){  return appsMode;}  }
class C{  public void removeEvento(DefEvento evento){  eventos.remove(evento);}  }
class C{  @Override public final ImmutableList<E> asList(){  return this;}  }
class C{  public TransactionalTests(@NotNull Provider<Database> db,@NotNull RollbackPolicy rollbackPolicy){  this.db=requireNonNull(db);  this.rollbackPolicy=requireNonNull(rollbackPolicy);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {  if (_byteBuffer == null)   throw new IOException("Reader closed");  final int off_plus_len=off + len;  int remaining=_byteBuffer.remaining();  if (remaining <= 0)   return -1;  for (int i=off; i < off_plus_len; ) {    if (remaining-- > 0) {      byte b=_byteBuffer.get();      if (b >= 0) {        cbuf[i++]=(char)b;      } else {        if (i < off_plus_len - 1) {          int code=read2(b);          remaining=_byteBuffer.remaining();          if (code < 0x10000) {            cbuf[i++]=(char)code;          } else           if (code <= 0x10ffff) {            cbuf[i++]=(char)(((code - 0x10000) >> 10) + 0xd800);            cbuf[i++]=(char)(((code - 0x10000) & 0x3ff) + 0xdc00);          } else {            throw new CharConversionException("Cannot convert U+" + Integer.toHexString(code) + " to char (code greater than U+10FFFF)");          }        } else {          _byteBuffer.position(_byteBuffer.position() - 1);          remaining++;          return i - off;        }      }    } else {      return i - off;    }  }  return len;}  }
class C{  @AfterClass public static void afterClass(){  MockStendlRPWorld.reset();}  }
class C{  private void sendDataToWearable(List<Attraction> attractions){  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  int count=attractions.size() > Constants.MAX_ATTRACTIONS ? Constants.MAX_ATTRACTIONS : attractions.size();  ArrayList<DataMap> attractionsData=new ArrayList<>(count);  for (int i=0; i < count; i++) {    Attraction attraction=attractions.get(i);    Bitmap image=null;    Bitmap secondaryImage=null;    try {      image=Glide.with(this).load(attraction.imageUrl).asBitmap().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(Constants.WEAR_IMAGE_SIZE_PARALLAX_WIDTH,Constants.WEAR_IMAGE_SIZE).get();      secondaryImage=Glide.with(this).load(attraction.secondaryImageUrl).asBitmap().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(Constants.WEAR_IMAGE_SIZE_PARALLAX_WIDTH,Constants.WEAR_IMAGE_SIZE).get();    } catch (    InterruptedException|ExecutionException e) {      Log.e(TAG,"Exception loading bitmap from network");    }    if (image != null && secondaryImage != null) {      DataMap attractionData=new DataMap();      String distance=Utils.formatDistanceBetween(Utils.getLocation(this),attraction.location);      attractionData.putString(Constants.EXTRA_TITLE,attraction.name);      attractionData.putString(Constants.EXTRA_DESCRIPTION,attraction.description);      attractionData.putDouble(Constants.EXTRA_LOCATION_LAT,attraction.location.latitude);      attractionData.putDouble(Constants.EXTRA_LOCATION_LNG,attraction.location.longitude);      attractionData.putString(Constants.EXTRA_DISTANCE,distance);      attractionData.putString(Constants.EXTRA_CITY,attraction.city);      attractionData.putAsset(Constants.EXTRA_IMAGE,Utils.createAssetFromBitmap(image));      attractionData.putAsset(Constants.EXTRA_IMAGE_SECONDARY,Utils.createAssetFromBitmap(secondaryImage));      attractionsData.add(attractionData);    }  }  if (connectionResult.isSuccess() && googleApiClient.isConnected() && attractionsData.size() > 0) {    PutDataMapRequest dataMap=PutDataMapRequest.create(Constants.ATTRACTION_PATH);    dataMap.getDataMap().putDataMapArrayList(Constants.EXTRA_ATTRACTIONS,attractionsData);    dataMap.getDataMap().putLong(Constants.EXTRA_TIMESTAMP,new Date().getTime());    PutDataRequest request=dataMap.asPutDataRequest();    request.setUrgent();    DataApi.DataItemResult result=Wearable.DataApi.putDataItem(googleApiClient,request).await();    if (!result.getStatus().isSuccess()) {      Log.e(TAG,String.format("Error sending data using DataApi (error code = %d)",result.getStatus().getStatusCode()));    }  } else {    Log.e(TAG,String.format(Constants.GOOGLE_API_CLIENT_ERROR_MSG,connectionResult.getErrorCode()));  }  googleApiClient.disconnect();}  }
class C{  static void cleanLegacyChecksums(Directory directory,long newVersion) throws IOException {synchronized (directory) {    for (    String name : directory.listAll()) {      if (isChecksum(name)) {        long current=Long.parseLong(name.substring(CHECKSUMS_PREFIX.length()));        if (current < newVersion) {          try {            directory.deleteFile(name);          } catch (          IOException ex) {            logger.debug("can't delete old checksum file [{}]",ex,name);          }        }      }    }  }}  }
class C{  public void next(){  next(true);}  }
class C{  public synchronized int allocateObjectId(){  int i=objectIds.nextClearBit(0);  objectIds.set(i);  return i;}  }
class C{  public void giveBirth(){  alive=true;  head.setVisible(true);  view.setVisible(true);}  }
class C{  public HitroUIView(ScrolledComposite scrolledComposite,Composite formComposite,Composite huiComposite){  this.huiComposite=huiComposite;  this.formComp=formComposite;  this.scrolledComp=scrolledComposite;  this.editable=false;}  }
class C{  public void actionPerformed(ActionEvent evt){  Runtime runtime=Runtime.getRuntime();  this.free=runtime.freeMemory();  this.total=runtime.totalMemory();  this.max=runtime.maxMemory();  repaint();}  }
class C{  private void assertWriteResult(int size) throws IOException {  ByteBuffer buf=ByteBuffer.allocate(size + 1);  int count=0;  int total=0;  long beginTime=System.currentTimeMillis();  while ((count=clientChannel.read(buf)) != -1) {    total=total + count;    if (System.currentTimeMillis() - beginTime > 10000) {      break;    }  }  assertEquals(total,size);  buf.flip();  for (int i=0; i < count; i++) {    assertEquals((byte)i,buf.get(i));  }}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  return new ImmutableCollections.MapN<K,V>(k1,v1,k2,v2,k3,v3,k4,v4);}  }
class C{  @Override public void mapBoundsChanged(final MapBoundsEvent event){  redrawBaseImage=true;  final int type=event.getType();  if ((type & MapBoundsEvent.COORDINATE_SYSTEM_MASK) != 0) {    setFullExtent();    reset();  }}  }
class C{  public void push(Bitmap bitmap) throws InterruptedException {  checkNotMainThread();  pending.put(bitmap);  ensureScheduled();}  }
class C{  public static long absoluteDayFromDateValue(long dateValue){  long y=yearFromDateValue(dateValue);  int m=monthFromDateValue(dateValue);  int d=dayFromDateValue(dateValue);  if (m <= 2) {    y--;    m+=12;  }  long a=((y * 2922L) >> 3) + DAYS_OFFSET[m - 3] + d - 719484;  if (y <= 1582 && ((y < 1582) || (m * 100 + d < 1005))) {    a+=13;  } else   if (y < 1901 || y > 2099) {    a+=(y / 400) - (y / 100) + 15;  }  return a;}  }
class C{  public static INaviView prune(final IViewContainer container,final INaviView view,final List<INaviInstruction> keptInstructions){  final INaviView prunedView=container.createView("Pruned View","");  final Map<INaviViewNode,INaviViewNode> nodeMap=convertNodes(view,prunedView,keptInstructions);  convertEdges(view,prunedView,nodeMap);  return prunedView;}  }
class C{  public GuacamoleConnectionClosedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public SampleDataRecord(String source,String path,String refUrn,String sampleData){  this.source=source;  this.path=path;  this.refUrn=refUrn;  this.sampleData=sampleData;}  }
class C{  private int countScanBands(){  List ids=new ArrayList();  Iterator iter=markerSequence.iterator();  while (iter.hasNext()) {    MarkerSegment seg=(MarkerSegment)iter.next();    if (seg instanceof SOSMarkerSegment) {      SOSMarkerSegment sos=(SOSMarkerSegment)seg;      SOSMarkerSegment.ScanComponentSpec[] specs=sos.componentSpecs;      for (int i=0; i < specs.length; i++) {        Integer id=new Integer(specs[i].componentSelector);        if (!ids.contains(id)) {          ids.add(id);        }      }    }  }  return ids.size();}  }
class C{  public final void add(Action action,ActionManager actionManager){  add(action,new Constraints(Anchor.LAST,null),actionManager);}  }
class C{  public static String toBase64(Object o,String charset) throws PageException {  String str=toBase64(o,charset,null);  if (str == null)   throw new CasterException(o,"base 64");  return str;}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public void addPhrase(String[] phraseParts){  PhraseTreeElement current=root;  for (  String phrasePart : phraseParts) {    PhraseTreeElement child=current.addChild(phrasePart);    current=child;  }  current.setEndElement(true);}  }
class C{  public static String formatDecimal(double number,int digits){  StringBuffer a=new StringBuffer();  for (int i=0; i < digits; i++) {    if (i == 0)     a.append(".");    a.append("0");  }  DecimalFormat nf=new DecimalFormat("###,###,###,##0" + a.toString());  String formatted=nf.format(number);  return formatted;}  }
class C{  public static boolean isSameLength(final byte[] array1,final byte[] array2){  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {    return false;  }  return true;}  }
class C{  public static String listing1(String body){  if (body != null) {    body=body.trim();  }  if (body.length() < 1) {    body=null;  }  return body;}  }
class C{  void close(long index){  setState(State.CLOSED);  cleanState(index);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("http://www.nomatch.com","address");  assertSize("matchSize",0,elementList);}  }
class C{  public FlyweightCDATA(String text){  this.text=text;}  }
class C{  public static boolean isCompositeWildcardSubtype(String subtype){  return subtype.startsWith("*+");}  }
class C{  private double[] computeInSlope(double[] prev,int prevSegType,double[] curr,int currSegType){  Point2D currEndPoint=getSegmentTerminatingPoint(curr,currSegType);  double dx=0;  double dy=0;switch (currSegType) {case PathIterator.SEG_LINETO:{      Point2D prevEndPoint=getSegmentTerminatingPoint(prev,prevSegType);      dx=currEndPoint.getX() - prevEndPoint.getX();      dy=currEndPoint.getY() - prevEndPoint.getY();    }  break;case PathIterator.SEG_QUADTO:dx=currEndPoint.getX() - curr[0];dy=currEndPoint.getY() - curr[1];break;case PathIterator.SEG_CUBICTO:dx=currEndPoint.getX() - curr[2];dy=currEndPoint.getY() - curr[3];break;case ExtendedPathIterator.SEG_ARCTO:{Point2D prevEndPoint=getSegmentTerminatingPoint(prev,prevSegType);boolean large=(curr[3] != 0.);boolean goLeft=(curr[4] != 0.);Arc2D arc=ExtendedGeneralPath.computeArc(prevEndPoint.getX(),prevEndPoint.getY(),curr[0],curr[1],curr[2],large,goLeft,curr[5],curr[6]);double theta=arc.getAngleStart() + arc.getAngleExtent();theta=Math.toRadians(theta);dx=-arc.getWidth() / 2.0 * Math.sin(theta);dy=arc.getHeight() / 2.0 * Math.cos(theta);if (curr[2] != 0) {double ang=Math.toRadians(-curr[2]);double sinA=Math.sin(ang);double cosA=Math.cos(ang);double tdx=dx * cosA - dy * sinA;double tdy=dx * sinA + dy * cosA;dx=tdx;dy=tdy;}if (goLeft) {dx=-dx;} else {dy=-dy;}}break;case PathIterator.SEG_CLOSE:throw new Error("should not have SEG_CLOSE here");case PathIterator.SEG_MOVETO:default :return null;}if (dx == 0 && dy == 0) {return null;}return normalize(new double[]{dx,dy});}  }
class C{  private static Response pick(final Request req,final Iterable<Fork> forks) throws IOException {  for (  final Fork fork : forks) {    final Opt<Response> rsps=fork.route(req);    if (rsps.has()) {      return rsps.get();    }  }  throw new HttpException(HttpURLConnection.HTTP_NOT_FOUND);}  }
class C{  public void clear(){  preferences.edit().clear().apply();}  }
class C{  protected static double hypot(double a,double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  public boolean isStopped(){  return this.future.isDone();}  }
class C{  public static boolean addCraftingRecipe(ItemStack aResult,long aBitMask,Object[] aRecipe){  return addCraftingRecipe(aResult,new Enchantment[0],new int[0],(aBitMask & RecipeBits.MIRRORED) != 0,(aBitMask & RecipeBits.BUFFERED) != 0,(aBitMask & RecipeBits.KEEPNBT) != 0,(aBitMask & RecipeBits.DISMANTLEABLE) != 0,(aBitMask & RecipeBits.NOT_REMOVABLE) == 0,(aBitMask & RecipeBits.REVERSIBLE) != 0,(aBitMask & RecipeBits.DELETE_ALL_OTHER_RECIPES) != 0,(aBitMask & RecipeBits.DELETE_ALL_OTHER_RECIPES_IF_SAME_NBT) != 0,(aBitMask & RecipeBits.DELETE_ALL_OTHER_SHAPED_RECIPES) != 0,(aBitMask & RecipeBits.DELETE_ALL_OTHER_NATIVE_RECIPES) != 0,(aBitMask & RecipeBits.DO_NOT_CHECK_FOR_COLLISIONS) == 0,(aBitMask & RecipeBits.ONLY_ADD_IF_THERE_IS_ANOTHER_RECIPE_FOR_IT) != 0,(aBitMask & RecipeBits.ONLY_ADD_IF_RESULT_IS_NOT_NULL) != 0,aRecipe);}  }
class C{  public void testActivityTestCaseSetUpProperly(){  assertNotNull("activity should be launched successfully",getActivity());}  }
class C{  @Deprecated static public SpeedoTrafficController instance(){  return null;}  }
class C{  public void copy(Hashtable props){  super.copy(props);  init(props);}  }
class C{  public TickUnit(double size,int minorTickCount){  this.size=size;  this.minorTickCount=minorTickCount;}  }
class C{  public void or(int size,Register dst,Register src,long bimm){  super.orr(size,dst,src,bimm);}  }
class C{  public void reset(){  if (ownResources) {    buffer1=owned1;    buffer2=owned2;    width=ownedW;    height=ownedH;    bufResult=ownedResult;    bufSrc=ownedSource;  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public boolean isEqualNow(){  return isEqual(DateTimeUtils.currentTimeMillis());}  }
class C{  private ShapeFactory(){}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.134 -0500",hash_original_method="DD7F5BEFB1D050713E2D554BF9DDD08D",hash_generated_method="DD7F5BEFB1D050713E2D554BF9DDD08D") HttpAuthHandlerImpl(Network network){  mNetwork=network;  mLoaderQueue=new LinkedList<LoadListener>();}  }
class C{  public static void init(){  ProfilerSection s=Profiler.INSTANCE.section("JavaScript").section("Init");  s.start("Manager");  manager=new ScriptEngineManager();  s.stop("Manager");  s.start("Engine");  engine=manager.getEngineByName("nashorn");  if (engine == null) {    engine=manager.getEngineByName("rhino");    engine_type="Rhino";  } else   engine_type="Nashorn";  s.stop("Engine");}  }
class C{  boolean isEmpty(){  return size == 0;}  }
class C{  public boolean isAscending(int i){  return m_ascend[i];}  }
class C{  public static boolean isNullOrEmpty(@Nullable Iterable<?> potentiallyNull){  return potentiallyNull == null || isEmpty(potentiallyNull);}  }
class C{  public SWFActions tagPlaceObject2(boolean isMove,int clipDepth,int depth,int charId,Matrix matrix,AlphaTransform cxform,int ratio,String name,int clipActionFlags) throws IOException {  if (tags != null) {    return tags.tagPlaceObject2(isMove,clipDepth,depth,charId,matrix,cxform,ratio,name,clipActionFlags);  }  return null;}  }
class C{  @Override public void update(Graphics g){  paint(g);}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  private int calcRhsSize(Production production){  int result=production.getRHSSizeWithoutEpsilon();  if (production.getLHS() instanceof AuxiliaryLHS4SemanticShiftAction) {    final AuxiliaryLHS4SemanticShiftAction auxAction=(AuxiliaryLHS4SemanticShiftAction)production.getLHS();    result+=auxAction.numPrecedingSymbolsNotEpsilon;  }  return result;}  }
class C{  public void wrap(List<View> children,LinearLayout container){  container.setOrientation(LinearLayout.VERTICAL);  if (children == null) {    Log.e("WrappingLayout","wrap: childern null");    return;  }  LayoutParams innerLayoutParams=new LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);  final int availableSpace=container.getWidth() - container.getPaddingLeft() - container.getPaddingRight();  int usedSpace=0;  if (children.size() > 0 && !widthAdjustmentDone) {    int childWidth=getViewWidth(children.get(0));    float times=(availableSpace - hspace) / (float)(childWidth + hspace);    newWidth=(availableSpace - (((int)times + 1) * hspace)) / ((int)times);    widthAdjustmentDone=true;  }  LinearLayout inner=new LinearLayout(context);  inner.setGravity(rowGravity);  inner.setOrientation(LinearLayout.HORIZONTAL);  innerLayoutParams.topMargin=vspace;  container.addView(inner,new LayoutParams((android.view.ViewGroup.MarginLayoutParams)innerLayoutParams));  if (availableSpace == 0) {    Log.e(LOGTAG,"No width information - read documentation!");  }  for (  View child : children) {    int childWidth=getViewWidth(child);    if (newWidth > childWidth) {      ((TextView)child).setWidth(newWidth);      ((TextView)child).setHeight(newWidth);    }    childWidth=getViewWidth(child);    if ((usedSpace + hspace + childWidth) > availableSpace) {      inner=new LinearLayout(context);      inner.setOrientation(LinearLayout.HORIZONTAL);      inner.setGravity(rowGravity);      container.addView(inner,new LayoutParams((android.view.ViewGroup.MarginLayoutParams)innerLayoutParams));      usedSpace=0;    }    if (hspace > 0) {      if (rightToLeft) {        inner.addView(new SpacerView(context,hspace,0),0);      } else {        inner.addView(new SpacerView(context,hspace,0));      }      usedSpace+=hspace;    }    if (rightToLeft) {      inner.addView(child,0);    } else {      inner.addView(child);    }    usedSpace+=childWidth;  }}  }
class C{  private static boolean equal(Throwable t1,Throwable t2){  return t1 == t2 || (Arrays.equals(t1.getStackTrace(),t2.getStackTrace()) && equal(t1.getCause(),t2.getCause()) && Objects.equals(t1.getSuppressed(),t2.getSuppressed()));}  }
class C{  public Builder animate(boolean animate){  mAnimate=animate;  return this;}  }
class C{  @Override public GridNioFuture<?> onResumeReads(GridNioSession ses) throws IgniteCheckedException {  return tail.onResumeReads(ses);}  }
class C{  public BoxPlotSeriesAttributes(ChartGenerator generator,String name,int index,double[] values,SeriesChangeListener stoppable){  super(generator,name,index,stoppable);  setValues(new double[][]{values});  super.setSeriesName(name);}  }
class C{  public void processCandies(TranspilationHandler transpilationHandler) throws IOException {  CandiesStore candiesStore=getCandiesStore();  LinkedHashMap<File,CandyDescriptor> newCandiesDescriptors=getCandiesDescriptorsFromClassPath(transpilationHandler);  CandiesStore newStore=new CandiesStore(new ArrayList<>(newCandiesDescriptors.values()));  if (newStore.equals(candiesStore)) {    logger.info("candies are up to date");    return;  }  this.candiesStore=newStore;  logger.info("candies changed, processing candies: " + this.candiesStore);  try {    extractCandies(newCandiesDescriptors);    mergeCandies(newCandiesDescriptors);    writeCandiesStore();  } catch (  Throwable t) {    logger.error("cannot generate candies bundle",t);  }}  }
class C{  public void addArg(FunctionLibFunctionArg arg){  arg.setFunction(this);  argument.add(arg);  if (arg.getDefaultValue() != null)   hasDefaultValues=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.860 -0500",hash_original_method="6F84F8B81316E57A6E66508A61EE308C",hash_generated_method="E59741060C67B78D88919DC982A8F9BC") public static String normalize(String oid){  return oid.startsWith("OID.") ? oid.substring(4) : oid;}  }
class C{  public void test_addAttributeLjava_text_AttributedCharacterIterator$AttributeLjava_lang_Object(){  AttributedString as=new AttributedString("123",new WeakHashMap());  as.addAttribute(AttributedCharacterIterator.Attribute.LANGUAGE,"english");  as.addAttribute(AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT,"input method");  as.addAttribute(AttributedCharacterIterator.Attribute.READING,"reading");  try {    as.addAttribute(null,new TreeSet());    fail("should throw NullPointerException");  } catch (  NullPointerException e) {  }  try {    as.addAttribute(null,null);    fail("should throw NullPointerException");  } catch (  NullPointerException e) {  }}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public boolean isRelativeURI(){  return (_scheme == null);}  }
class C{  public void ensureNext(char expected,char other,TextStream stream){  stream.skipWhitespace();  if (stream.atEnd()) {    throw SelfParseException.unexpectedEndOfFile(expected,stream);  }  char next=stream.next();  if ((next != expected) && (next != other)) {    throw SelfParseException.invalidCharacter(next,expected,stream);  }}  }
class C{  public static LineCoordinateGenerator fromDegrees(double[] degrees){  double[] radians=new double[degrees.length];  System.arraycopy(degrees,0,radians,0,degrees.length);  ProjMath.arrayDegToRad(radians);  return new LineCoordinateGenerator(radians).fromDegrees();}  }
class C{  public Builder id(Long id){  this.listId=id;  return this;}  }
class C{  public void writePreparationStatements(Writer writer) throws IOException {  for (  String preparationStatement : preparationStatements) {    writer.write(preparationStatement);  }}  }
class C{  @Transactional public Set<String> assignRoleToUsers(String roleName,Set<String> userIds,String operatorUserId){  Role role=findRoleByRoleName(roleName);  Preconditions.checkState(role != null,"Role %s doesn't exist!",roleName);  List<UserRole> existedUserRoles=userRoleRepository.findByUserIdInAndRoleId(userIds,role.getId());  Set<String> existedUserIds=FluentIterable.from(existedUserRoles).transform(null).toSet();  Set<String> toAssignUserIds=Sets.difference(userIds,existedUserIds);  Iterable<UserRole> toCreate=FluentIterable.from(toAssignUserIds).transform(null);  userRoleRepository.save(toCreate);  return toAssignUserIds;}  }
class C{  void loadMoviesFromDatabase(MVMap<UUID,String> movieMap,ObjectMapper objectMapper){  movieList=new ObservableElementList<>(GlazedLists.threadSafeList(new BasicEventList<Movie>()),GlazedLists.beanConnector(Movie.class));  ObjectReader movieObjectReader=objectMapper.readerFor(Movie.class);  for (  UUID uuid : movieMap.keyList()) {    String json="";    try {      json=movieMap.get(uuid);      Movie movie=movieObjectReader.readValue(json);      movie.setDbId(uuid);      movieList.add(movie);    } catch (    Exception e) {      LOGGER.warn("problem decoding movie json string: ",e);    }  }  LOGGER.info("found " + movieList.size() + " movies in database");}  }
class C{  private void updateStateFromTypedArray(TypedArray a){  final LayerState state=mLayerState;  state.mChangingConfigurations|=TypedArrayCompat.getChangingConfigurations(a);  state.mThemeAttrs=TypedArrayCompat.extractThemeAttrs(a);  final int N=a.getIndexCount();  for (int i=0; i < N; i++) {    int attr=a.getIndex(i);    if (attr == R.styleable.LayerDrawable_android_opacity) {      state.mOpacityOverride=a.getInt(attr,state.mOpacityOverride);    } else     if (attr == R.styleable.LayerDrawable_android_paddingTop) {      state.mPaddingTop=a.getDimensionPixelOffset(attr,state.mPaddingTop);    } else     if (attr == R.styleable.LayerDrawable_android_paddingBottom) {      state.mPaddingBottom=a.getDimensionPixelOffset(attr,state.mPaddingBottom);    } else     if (attr == R.styleable.LayerDrawable_android_paddingLeft) {      state.mPaddingLeft=a.getDimensionPixelOffset(attr,state.mPaddingLeft);    } else     if (attr == R.styleable.LayerDrawable_android_paddingRight) {      state.mPaddingRight=a.getDimensionPixelOffset(attr,state.mPaddingRight);    } else     if (attr == R.styleable.LayerDrawable_android_paddingStart) {      state.mPaddingStart=a.getDimensionPixelOffset(attr,state.mPaddingStart);    } else     if (attr == R.styleable.LayerDrawable_android_paddingEnd) {      state.mPaddingEnd=a.getDimensionPixelOffset(attr,state.mPaddingEnd);    } else     if (attr == R.styleable.LayerDrawable_android_autoMirrored) {      state.mAutoMirrored=a.getBoolean(attr,state.mAutoMirrored);    } else     if (attr == R.styleable.LayerDrawable_android_paddingMode) {      state.mPaddingMode=a.getInteger(attr,state.mPaddingMode);    }  }}  }
class C{  public static void main(String[] args) throws Exception {  Path path=new Path("hello.world[2].nothing");  System.out.println("Path: " + path);  System.out.println(" -size: " + path.size());  System.out.println(" -elements:");  for (int i=0; i < path.size(); i++)   System.out.println("  " + i + ". "+ path.get(i).getName()+ " -> "+ path.get(i).getIndex());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public CompletionProposalLabelProvider(){}  }
class C{  private Response updateEntityAttributeByGuid(String guid,String property,HttpServletRequest request){  String value=null;  try {    Preconditions.checkNotNull(property,"Entity property cannot be null");    value=Servlets.getRequestPayload(request);    Preconditions.checkNotNull(value,"Entity value cannot be null");    LOG.info("Updating entity {} for property {} = {}",guid,property,value);    AtlasClient.EntityResult entityResult=metadataService.updateEntityAttributeByGuid(guid,property,value);    LOG.info("Updated entities: {}",entityResult);    JSONObject response=getResponse(entityResult);    return Response.ok(response).build();  } catch (  EntityNotFoundException e) {    LOG.error("An entity with GUID={} does not exist {} ",guid,value,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  AtlasException|IllegalArgumentException e) {    LOG.error("Unable to add property {} to entity id {} {} ",property,guid,value,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to add property {} to entity id {} {} ",property,guid,value,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  }}  }
class C{  public void addSourceFolder(File sourceFolder){  classLibraryBuilder.appendSourceFolder(sourceFolder);}  }
class C{  public void generateFilter(){  if (debug) {    debugnl(String.format("Generating source code '%s'",FilterClassTemplate.DEFAULT_CLASS_NAME));  }  this.template.generateFilterClass(null);}  }
class C{  public MDMLoginPage logout() throws IOException, InterruptedException {  CommonUtil.waitAndClick(driver,By.xpath(uiElementMapper.getElement("emm.home.navbar.logged.in.user.span")));  CommonUtil.waitAndClick(driver,By.xpath(uiElementMapper.getElement("emm.home.sign.out.button.xpath")));  return new MDMLoginPage(driver);}  }
class C{  private Node<K,V> findNode(Comparable<? super K> key){  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c == 0)       return n;      if (c < 0)       return null;      b=n;      n=f;    }  }}  }
class C{  public byte[] serialize(Object value) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  oos.writeObject(value);  return baos.toByteArray();}  }
class C{  private void processStart(final State current){  if (current.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    return;  }  try {    if (!isFinalStage(current) && current.nextPageLink == null) {      Operation queryDhcpSubnetsPagination=Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_LOCAL_QUERY_TASKS)).setBody(buildDhcpSubnetQuery(current));      queryDhcpSubnetsPagination.setCompletion((null)).sendWith(this);    } else {      sendStageProgressPatch(current);    }  } catch (  Throwable e) {    failTask(e);  }}  }
class C{  public void onCreate(Bundle savedInstanceState){  if (savedInstanceState != null) {    if (savedInstanceState.containsKey(DATA_REQUEST_CODE)) {      mResultCode=savedInstanceState.getInt(DATA_REQUEST_CODE,RESULT_CANCELED);    }    if (savedInstanceState.containsKey(DATA_RESULT_BUNDLE)) {      mResultData=savedInstanceState.getBundle(DATA_RESULT_BUNDLE);    }  }}  }
class C{  protected void readTag(int tag) throws IOException {  int length=(is.read() << 8) + is.read();  is.skip(length);}  }
class C{  public boolean isEAXSupported(){  return isEAX;}  }
class C{  public static void callEndpoint(Output output,FileDescriptorSet fileDescriptorSet,Optional<String> endpoint,Optional<String> fullMethod,Optional<Path> protoDiscoveryRoot,Optional<Path> configSetPath,ImmutableList<Path> additionalProtocIncludes,CallConfiguration callConfig){  Preconditions.checkState(endpoint.isPresent(),"--endpoint argument required");  Preconditions.checkState(fullMethod.isPresent(),"--full_method argument required");  validatePath(protoDiscoveryRoot);  validatePath(configSetPath);  validatePaths(additionalProtocIncludes);  HostAndPort hostAndPort=HostAndPort.fromString(endpoint.get());  ProtoMethodName grpcMethodName=ProtoMethodName.parseFullGrpcMethodName(fullMethod.get());  ServiceResolver serviceResolver=ServiceResolver.fromFileDescriptorSet(fileDescriptorSet);  MethodDescriptor methodDescriptor=serviceResolver.resolveServiceMethod(grpcMethodName);  logger.info("Creating dynamic grpc client");  DynamicGrpcClient dynamicClient;  if (callConfig.hasOauthConfig()) {    Credentials credentials=new OauthCredentialsFactory(callConfig.getOauthConfig()).getCredentials();    dynamicClient=DynamicGrpcClient.createWithCredentials(methodDescriptor,hostAndPort,callConfig,credentials);  } else {    dynamicClient=DynamicGrpcClient.create(methodDescriptor,hostAndPort,callConfig);  }  ImmutableList<DynamicMessage> requestMessages=MessageReader.forStdin(methodDescriptor.getInputType()).read();  StreamObserver<DynamicMessage> streamObserver=CompositeStreamObserver.of(new LoggingStatsWriter(),MessageWriter.create(output));  logger.info(String.format("Making rpc with %d request(s) to endpoint [%s]",requestMessages.size(),hostAndPort));  try {    dynamicClient.call(requestMessages,streamObserver,callOptions(callConfig)).get();  } catch (  InterruptedException|ExecutionException e) {    throw new RuntimeException("Caught exeception while waiting for rpc",e);  }}  }
class C{  void updateBillingResult(Long tkey,BigDecimal netAmount) throws Exception {  if (updateBillingResultByTkey(tkey,netAmount) < 1) {    String message="The update of billingResult.netAmount with tkey '%s' failed.";    throw new Exception(String.format(message,tkey));  }}  }
class C{  public Object clone(){  TreeMap clone;  try {    clone=(TreeMap)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  clone.root=null;  clone.size=0;  clone.modCount=0;  clone.entrySet=null;  try {    clone.buildFromSorted(size,entrySet().iterator(),null,null);  } catch (  java.io.IOException cannotHappen) {  }catch (  ClassNotFoundException cannotHappen) {  }  return clone;}  }
class C{  private void sort(VisualItem[] items,int[] scores,int size){  if (sort == null)   return;  if (items_buf == null || items_buf.length < size) {    items_buf=new VisualItem[items.length];    scores_buf=new int[scores.length];  }  ArrayLib.sort(scores,items,scores_buf,items_buf,0,size);}  }
class C{  private void startDeviceActivityInternal(String path,String extraInfo){  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    CapabilityApi.GetCapabilityResult result=Wearable.CapabilityApi.getCapability(googleApiClient,getApplicationContext().getString(R.string.show_detail_capability_name),CapabilityApi.FILTER_REACHABLE).await(GET_CAPABILITY_TIMEOUT_S,TimeUnit.SECONDS);    if (result.getStatus().isSuccess()) {      Set<Node> nodes=result.getCapability().getNodes();      for (      Node node : nodes) {        Wearable.MessageApi.sendMessage(googleApiClient,node.getId(),path,extraInfo.getBytes());      }    } else {      Log.e(TAG,"startDeviceActivityInternal() Failed to get capabilities, status: " + result.getStatus().getStatusMessage());    }    googleApiClient.disconnect();  }}  }
class C{  protected void fireActionPerformed(ActionEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  public void testPutOnHeapWithOffHeap() throws Exception {  final int PLC_MAX_SIZE=50;  CacheConfiguration<Integer,Object> ccfg=cacheConfiguration(grid(0).name());  ccfg.setName("testPutOnHeapWithOffHeap");  ccfg.setStatisticsEnabled(true);  ccfg.setOffHeapMaxMemory(MAX_MEMORY_SIZE);  FifoEvictionPolicy plc=new FifoEvictionPolicy();  plc.setMaxMemorySize(MAX_MEMORY_SIZE);  plc.setMaxSize(PLC_MAX_SIZE);  ccfg.setSwapEnabled(false);  ccfg.setMemoryMode(CacheMemoryMode.ONHEAP_TIERED);  ccfg.setEvictionPolicy(plc);  final IgniteCache<Integer,Object> cache=grid(0).getOrCreateCache(ccfg);  fillCache(cache,getTestTimeout());  assertEquals(cache.size(CachePeekMode.ONHEAP) + cache.size(CachePeekMode.OFFHEAP),cache.size(CachePeekMode.ALL));  assertEquals(0,cache.size(CachePeekMode.NEAR));  assertEquals(0,cache.size(CachePeekMode.SWAP));  assertTrue(PLC_MAX_SIZE >= cache.size(CachePeekMode.ONHEAP));  assertTrue(PLC_MAX_SIZE - 5 <= cache.size(CachePeekMode.ONHEAP));  assertTrue(MAX_VALS_AMOUNT >= cache.size(CachePeekMode.OFFHEAP));  assertTrue(MAX_VALS_AMOUNT - 5 <= cache.size(CachePeekMode.OFFHEAP));  assertEquals(cache.size(CachePeekMode.ALL) - cache.size(CachePeekMode.ONHEAP) - cache.size(CachePeekMode.OFFHEAP),cache.size(CachePeekMode.SWAP));  assertTrue((MAX_VALS_AMOUNT + 5) * VAL_SIZE > cache.localMetrics().getOffHeapAllocatedSize());  assertTrue((MAX_VALS_AMOUNT - 5) * VAL_SIZE < cache.localMetrics().getOffHeapAllocatedSize());  assertTrue(cache.localMetrics().getOffHeapAllocatedSize() >= cache.size(CachePeekMode.OFFHEAP) * VAL_SIZE);}  }
class C{  public static void shuffle(long[] a){  int N=a.length;  for (int i=0; i < N; i++) {    int r=i + uniform(N - i);    long temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public Boolean isStorageIORMSupported(){  return storageIORMSupported;}  }
class C{  public void background(int id,Background<S> background){  phlux.background(key,id,background);}  }
class C{  public static void listIncompleteUploads_test2() throws Exception {  println("Test: listIncompleteUploads(String bucketName, String prefix)");  String fileName=createFile(6 * MB);  InputStream is=Files.newInputStream(Paths.get(fileName));  try {    client.putObject(bucketName,fileName,is,9 * 1024 * 1024,null);  } catch (  InsufficientDataException e) {    println("Exception occurred as excepted");  }  is.close();  int i=0;  for (  Result<Upload> r : client.listIncompleteUploads(bucketName,"minio")) {    println(i++,r.get());    if (i == 10) {      break;    }  }  Files.delete(Paths.get(fileName));  client.removeIncompleteUpload(bucketName,fileName);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @RequestMapping(value="/be/taxreceipts/reprove",method=RequestMethod.POST) public String reprove(Map<String,Object> map,HttpServletResponse response,@RequestParam(value="id",required=false) String id){  TaxReceipt taxreceipt=null;  if (id != null) {    try {      TaxReceipt entity=new TaxReceipt();      entity.setId(id);      taxreceipt=taxReceiptDAO.findById(entity);      TaxReceiptArchive archiveEntity=new TaxReceiptArchive();      archiveEntity.setId(taxreceipt.getId());      archiveEntity.setCnpj(taxreceipt.getCnpj());      archiveEntity.setDate(taxreceipt.getDate());      archiveEntity.setCoo(taxreceipt.getCoo());      archiveEntity.setTotal(taxreceipt.getTotal());      archiveEntity.setS3Object(taxreceipt.getS3Object());      archiveEntity.setDateInsertion(new Date());      archiveEntity.setApproved(false);      taxReceiptDAO.remove(taxreceipt);      taxReceiptArchiveDAO.save(archiveEntity);    } catch (    Exception ex) {      ex.printStackTrace();    }  }  return "redirect:/be/taxreceipts/all.action";}  }
class C{  private void addCandidate(Candidate candidate){  if (candidate == null) {    return;  }  if (candidate.isTerminal) {    result.add(candidate.cell.id());    return;  }  int numLevels=(candidate.cell.level() < minLevel) ? 1 : levelMod;  int numTerminals=expandChildren(candidate,candidate.cell,numLevels);  if (candidate.numChildren == 0) {  } else   if (!interiorCovering && numTerminals == 1 << maxChildrenShift() && candidate.cell.level() >= minLevel) {    candidate.isTerminal=true;    addCandidate(candidate);  } else {    int priority=-((((candidate.cell.level() << maxChildrenShift()) + candidate.numChildren) << maxChildrenShift()) + numTerminals);    candidateQueue.add(new QueueEntry(priority,candidate));  }}  }
class C{  public static int gcCount(){  return gcCount;}  }
class C{  private static int spinsFor(Node pred,boolean haveData){  if (MP && pred != null) {    if (pred.isData != haveData)     return FRONT_SPINS + CHAINED_SPINS;    if (pred.isMatched())     return FRONT_SPINS;    if (pred.waiter == null)     return CHAINED_SPINS;  }  return 0;}  }
class C{  public String globalInfo(){  return " Implements Gaussian processes for " + "regression without hyperparameter-tuning. To make choosing an " + "appropriate noise level easier, this implementation applies "+ "normalization/standardization to the target attribute as well "+ "as the other attributes (if "+ " normalization/standardizaton is turned on). Missing values "+ "are replaced by the global mean/mode. Nominal attributes are "+ "converted to binary ones. Note that kernel caching is turned off "+ "if the kernel used implements CachedKernel.";}  }
class C{  public void saveLearning(LearningConfig config){  config.addCredentials(this);  POST(this.url + "/save-learning",config.toXML());}  }
class C{  private static <T extends AbstractBlockBase<T>>void enqueueSuccessors(T block,PriorityQueue<T> worklist,BitSet visitedBlocks){  for (  T successor : block.getSuccessors()) {    if (!visitedBlocks.get(successor.getId())) {      visitedBlocks.set(successor.getId());      worklist.add(successor);    }  }}  }
class C{  void writeNormalizedChars(final char ch[],final int start,final int length,final boolean useLineSep) throws IOException, org.xml.sax.SAXException {  final String encoding=getEncoding();  final java.io.Writer writer=m_writer;  final int end=start + length;  final char S_LINEFEED=CharInfo.S_LINEFEED;  for (int i=start; i < end; i++) {    final char c=ch[i];    if (S_LINEFEED == c && useLineSep) {      writer.write(m_lineSep,0,m_lineSepLen);    } else     if (m_encodingInfo.isInEncoding(c)) {      writer.write(c);    } else     if (Encodings.isHighUTF16Surrogate(c)) {      final int codePoint=writeUTF16Surrogate(c,ch,i,end);      if (codePoint != 0) {        final String integralValue=Integer.toString(codePoint);        final String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_CHARACTER,new Object[]{integralValue,encoding});        System.err.println(msg);      }      i++;    } else {      if (encoding != null) {        writer.write('&');        writer.write('#');        writer.write(Integer.toString(c));        writer.write(';');        final String integralValue=Integer.toString(c);        final String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_CHARACTER,new Object[]{integralValue,encoding});        System.err.println(msg);      } else {        writer.write(c);      }    }  }}  }
class C{  private void resync_ncGuards(){  HashSet<Register> regPool=new HashSet<Register>();  for (Register r=temps.getFirstSymbolicRegister(); r != null; r=r.getNext()) {    regPool.add(r);  }  Iterator<Map.Entry<Register,RegisterOperand>> i=_ncGuards.entrySet().iterator();  while (i.hasNext()) {    Map.Entry<Register,RegisterOperand> entry=i.next();    if (!(regPool.contains(entry.getKey())))     i.remove();  }}  }
class C{  public void trace(Marker marker,String msg){}  }
class C{  protected Float wrapKey(float k){  return new Float(k);}  }
class C{  private CompositeFigure createGroupFigure() throws IOException {  ODGGroupFigure figure=new ODGGroupFigure();  return figure;}  }
class C{  public MutualInfoCalculatorMultiVariateKernel(){  mvkeSource=new KernelEstimatorMultiVariate();  mvkeDest=new KernelEstimatorMultiVariate();  mvkeJoint=new KernelEstimatorMultiVariate();  mvkeSource.setNormalise(normalise);  mvkeDest.setNormalise(normalise);  mvkeJoint.setNormalise(normalise);}  }
class C{  private void clearMediaPlayer(){  if (mMediaPlayer != null) {    if (mCanRing) {      mMediaPlayer.stop();    }    mMediaPlayer.release();  }  mMediaPlayer=null;}  }
class C{  public boolean isEmpty(){  return observers.isEmpty();}  }
class C{  public void removeCredentials(HomeserverConnectionConfig config){  if (null != config && config.getCredentials() != null) {    Log.d(LOG_TAG,"Removing account: " + config.getCredentials().userId);    SharedPreferences prefs=mContext.getSharedPreferences(PREFS_LOGIN,Context.MODE_PRIVATE);    SharedPreferences.Editor editor=prefs.edit();    ArrayList<HomeserverConnectionConfig> configs=getCredentialsList();    ArrayList<JSONObject> serialized=new ArrayList<JSONObject>(configs.size());    boolean found=false;    try {      for (      HomeserverConnectionConfig c : configs) {        if (c.getCredentials().userId.equals(config.getCredentials().userId)) {          found=true;        } else {          serialized.add(c.toJson());        }      }    } catch (    JSONException e) {      throw new RuntimeException("Failed to serialize connection config");    }    if (!found)     return;    String ser=new JSONArray(serialized).toString();    Log.d(LOG_TAG,"Storing " + serialized.size() + " credentials");    editor.putString(PREFS_KEY_CONNECTION_CONFIGS,ser);    editor.commit();  }}  }
class C{  public void squareThisBitwise(){  polynomial.squareThisBitwise();  reduceThis();}  }
class C{  private JMenu createEditMenu(){  JMenu edit=new JMenu("Edit");  JMenuItem copy=new JMenuItem(new CopySubgraphAction(this));  JMenuItem paste=new JMenuItem(new PasteSubgraphAction(this));  copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK));  paste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,ActionEvent.CTRL_MASK));  edit.add(copy);  edit.add(paste);  return edit;}  }
class C{  public PvDetailPanel(ProcessVar data){  this();  setProcessVar(data);}  }
class C{  public boolean isDiseased(final int genome){  return mIsDiseased[genome];}  }
class C{  private static void checkArguments(final BackEndDebuggerProvider debuggerProvider,final INaviView view){  checkArguments(debuggerProvider);  checkArguments(view);}  }
class C{  public SplitNode(Map<String,WeightMass> classDistrib,Split split){  super(classDistrib);  m_split=split;}  }
class C{  private void purge(){synchronized (queue) {    WeakKey key;    while ((key=(WeakKey)queue.poll()) != null) {      super.remove(key.getReferenced());    }  }}  }
class C{  public SnapshotRecord(){}  }
class C{  public boolean hasSpeed(){  return mHasSpeed;}  }
class C{  private boolean defaultResolve(){switch (typeString.charAt(0)) {case 'I':    type=int.class;  return true;case 'B':type=byte.class;return true;case 'C':type=char.class;return true;case 'S':type=short.class;return true;case 'Z':type=boolean.class;return true;case 'J':type=long.class;return true;case 'F':type=float.class;return true;case 'D':type=double.class;return true;default :type=Object.class;return false;}}  }
class C{  XSLTElementProcessor(){}  }
class C{  public static Set<XMethod> resolveMethodCallTargets(ReferenceType receiverType,InvokeInstruction invokeInstruction,ConstantPoolGen cpg) throws ClassNotFoundException {  return resolveMethodCallTargets(receiverType,invokeInstruction,cpg,false);}  }
class C{  public boolean isDraft(){  return is(DRAFT);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.587 -0500",hash_original_method="45FF804DBFA2BB4F4071CDF27CE28633",hash_generated_method="DE85DD5FA87051E0F364973767E0E8A1") @DSSafe(DSCat.SAFE_LIST) public boolean add(HDR objectToAdd){  hlist.add((HDR)objectToAdd);  return true;}  }
class C{  public boolean isStripWhitespaceText(){  return stripWhitespaceText;}  }
class C{  protected void test(Variation variation,int numberOfVariables){  for (int i=0; i < TestThresholds.SAMPLES; i++) {    Solution[] parents=createParents(numberOfVariables);    Solution[] offspring=variation.evolve(parents);    testPointCrossover(parents,offspring);  }}  }
class C{  public VcfRecord padFormatAndSample(String key){  if (mFormatAndSample.containsKey(key)) {    final ArrayList<String> list=mFormatAndSample.get(key);    while (list.size() < mNumSamples) {      list.add(MISSING);    }  }  return this;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.274 -0500",hash_original_method="BFCC6911ABBE3458CCFB4AC68FA2CC36",hash_generated_method="BFCC6911ABBE3458CCFB4AC68FA2CC36") void finish() throws SAXException {  try {    appendString(this.pointer,"",true);  } catch (  ExpatException e) {    throw new ParseException(e.getMessage(),this.locator);  }}  }
class C{  public void add(final CCachedExpressionTree tree){  for (  final CCachedExpressionTree cachedTree : m_trees) {    if (cachedTree.getFormulaString().equals(tree.getFormulaString())) {      return;    }  }  m_trees.add(tree);  while (m_trees.size() > MAXIMUM_CACHE_SIZE) {    m_trees.remove(0);  }  for (  final ICriteriumCacheListener listener : m_listeners) {    try {      listener.changedCriteria(this);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  private void serializeTables(FontOutputStream fos,List<Header> tableHeaders) throws IOException {  for (  Header record : tableHeaders) {    Table table=this.getTable(record.tag());    if (table == null) {      throw new IOException("Table out of sync with font header.");    }    int tableSize=table.serialize(fos);    int fillerSize=((tableSize + 3) & ~3) - tableSize;    for (int i=0; i < fillerSize; i++) {      fos.write(0);    }  }}  }
class C{  protected void addFromChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_fromChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_fromChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__FROM_CHANNELS,true,false,true,null,null,null));}  }
class C{  public ISC_STATUS(){  this(0);}  }
class C{  public Node(Node other){  __isset_bitfield=other.__isset_bitfield;  this.nodeId=other.nodeId;  this.domainId=other.domainId;  if (other.isSetHostname()) {    this.hostname=other.hostname;  }  this.port=other.port;}  }
class C{  public static boolean smOrEq(double a,double b){  return (a - b < SMALL) || (a <= b);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.935 -0500",hash_original_method="DD17EBB3E7F8098B41E8CF3D3DB045E0",hash_generated_method="9933F4305E908D89F92091D2D46F8CDB") public boolean isClosed(){  return journalWriter == null;}  }
class C{  private static byte[] decode_base64(String s,int maxolen) throws IllegalArgumentException {  StringBuilder rs=new StringBuilder();  int off=0, slen=s.length(), olen=0;  byte ret[];  byte c1, c2, c3, c4, o;  if (maxolen <= 0)   throw new IllegalArgumentException("Invalid maxolen");  while (off < slen - 1 && olen < maxolen) {    c1=char64(s.charAt(off++));    c2=char64(s.charAt(off++));    if (c1 == -1 || c2 == -1)     break;    o=(byte)(c1 << 2);    o|=(c2 & 0x30) >> 4;    rs.append((char)o);    if (++olen >= maxolen || off >= slen)     break;    c3=char64(s.charAt(off++));    if (c3 == -1)     break;    o=(byte)((c2 & 0x0f) << 4);    o|=(c3 & 0x3c) >> 2;    rs.append((char)o);    if (++olen >= maxolen || off >= slen)     break;    c4=char64(s.charAt(off++));    o=(byte)((c3 & 0x03) << 6);    o|=c4;    rs.append((char)o);    ++olen;  }  ret=new byte[olen];  for (off=0; off < olen; off++)   ret[off]=(byte)rs.charAt(off);  return ret;}  }
class C{  @Override public boolean isNumerical(){  return false;}  }
class C{  public static GlowItemFactory instance(){  return instance;}  }
class C{  public boolean hasThumbnail(){  return mData.hasCompressedThumbnail();}  }
class C{  @Override public boolean createFolder(String path){  try {    mDBApi.createFolder(path);    return true;  } catch (  DropboxException e) {    e.printStackTrace();    return false;  }}  }
class C{  public AnimationBuilder backgroundColor(int... colors){  for (  View view : views) {    ObjectAnimator objectAnimator=ObjectAnimator.ofInt(view,"backgroundColor",colors);    objectAnimator.setEvaluator(new ArgbEvaluator());    this.animatorList.add(objectAnimator);  }  return this;}  }
class C{  public void printLong(long v) throws IOException {  print(String.valueOf(v));}  }
class C{  @Deprecated public HasParentQueryBuilder scoreType(String scoreMode){  this.scoreMode=scoreMode;  return this;}  }
class C{  public void unload(String name,boolean deleteIndexDir,boolean deleteDataDir,boolean deleteInstanceDir){  name=checkDefault(name);  CoreLoadFailure loadFailure=coreInitFailures.remove(name);  if (loadFailure != null) {    SolrCore.deleteUnloadedCore(loadFailure.cd,deleteDataDir,deleteInstanceDir);    return;  }  CoreDescriptor cd=solrCores.getCoreDescriptor(name);  if (cd == null)   throw new SolrException(ErrorCode.BAD_REQUEST,"Cannot unload non-existent core [" + name + "]");  boolean close=solrCores.isLoadedNotPendingClose(name);  SolrCore core=solrCores.remove(name);  coresLocator.delete(this,cd);  if (core == null) {    SolrCore.deleteUnloadedCore(cd,deleteDataDir,deleteInstanceDir);    return;  }  if (zkSys.getZkController() != null) {    core.getSolrCoreState().cancelRecovery();  }  core.unloadOnClose(deleteIndexDir,deleteDataDir,deleteInstanceDir);  if (close)   core.close();  if (zkSys.getZkController() != null) {    try {      zkSys.getZkController().unregister(name,cd);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      throw new SolrException(ErrorCode.SERVER_ERROR,"Interrupted while unregistering core [" + name + "] from cloud state");    }catch (    KeeperException e) {      throw new SolrException(ErrorCode.SERVER_ERROR,"Error unregistering core [" + name + "] from cloud state",e);    }  }}  }
class C{  public LogConfigurationException(){  super();}  }
class C{  public AllMethodsTestChromosomeFactory(){  allMethods.addAll(TestCluster.getInstance().getTestCalls());  Randomness.shuffle(allMethods);  reset();}  }
class C{  boolean canConnect(Properties props) throws ValidationException {  LdapConnector connector=createLdapConnector(props);  connector.ensureAllMandatoryLdapPropertiesPresent();  boolean result=connector.canConnect();  return result;}  }
class C{  public ValueGrid2DPortrayal3D(String valueName){  this(valueName,1.0f);}  }
class C{  public static AsymmetricKeyParameter createKey(PrivateKeyInfo keyInfo) throws IOException {  AlgorithmIdentifier algId=keyInfo.getPrivateKeyAlgorithm();  if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption)) {    RSAPrivateKey keyStructure=RSAPrivateKey.getInstance(keyInfo.parsePrivateKey());    return new RSAPrivateCrtKeyParameters(keyStructure.getModulus(),keyStructure.getPublicExponent(),keyStructure.getPrivateExponent(),keyStructure.getPrime1(),keyStructure.getPrime2(),keyStructure.getExponent1(),keyStructure.getExponent2(),keyStructure.getCoefficient());  } else   if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {    DHParameter params=DHParameter.getInstance(algId.getParameters());    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();    BigInteger lVal=params.getL();    int l=lVal == null ? 0 : lVal.intValue();    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);    return new DHPrivateKeyParameters(derX.getValue(),dhParams);  } else   if (algId.getAlgorithm().equals(OIWObjectIdentifiers.elGamalAlgorithm)) {    ElGamalParameter params=ElGamalParameter.getInstance(algId.getParameters());    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();    return new ElGamalPrivateKeyParameters(derX.getValue(),new ElGamalParameters(params.getP(),params.getG()));  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_dsa)) {    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();    ASN1Encodable de=algId.getParameters();    DSAParameters parameters=null;    if (de != null) {      DSAParameter params=DSAParameter.getInstance(de.toASN1Primitive());      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());    }    return new DSAPrivateKeyParameters(derX.getValue(),parameters);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_ecPublicKey)) {    X962Parameters params=new X962Parameters((ASN1Primitive)algId.getParameters());    X9ECParameters x9;    ECDomainParameters dParams;    if (params.isNamedCurve()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)params.getParameters();      x9=CustomNamedCurves.getByOID(oid);      if (x9 == null) {        x9=ECNamedCurveTable.getByOID(oid);      }      dParams=new ECNamedDomainParameters(oid,x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());    } else {      x9=X9ECParameters.getInstance(params.getParameters());      dParams=new ECDomainParameters(x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());    }    ECPrivateKey ec=ECPrivateKey.getInstance(keyInfo.parsePrivateKey());    BigInteger d=ec.getKey();    return new ECPrivateKeyParameters(d,dParams);  } else {    throw new RuntimeException("algorithm identifier in key not recognised");  }}  }
class C{  public static JSONObject falseResult(){  return new JSONObject().put(Keys.STATUS_CODE,false);}  }
class C{  public boolean commit() throws LoginException {  if (succeeded == false) {    if (debug) {      System.out.println("\t\t[SolarisLoginModule]: " + "did not add any Principals to Subject " + "because own authentication failed.");    }    return false;  }  if (subject.isReadOnly()) {    throw new LoginException("Subject is Readonly");  }  if (!subject.getPrincipals().contains(userPrincipal))   subject.getPrincipals().add(userPrincipal);  if (!subject.getPrincipals().contains(UIDPrincipal))   subject.getPrincipals().add(UIDPrincipal);  if (!subject.getPrincipals().contains(GIDPrincipal))   subject.getPrincipals().add(GIDPrincipal);  for (int i=0; i < supplementaryGroups.size(); i++) {    if (!subject.getPrincipals().contains(supplementaryGroups.get(i)))     subject.getPrincipals().add(supplementaryGroups.get(i));  }  if (debug) {    System.out.println("\t\t[SolarisLoginModule]: " + "added SolarisPrincipal,");    System.out.println("\t\t\t\tSolarisNumericUserPrincipal,");    System.out.println("\t\t\t\tSolarisNumericGroupPrincipal(s),");    System.out.println("\t\t\t to Subject");  }  commitSucceeded=true;  return true;}  }
class C{  public String xmlToCsv(UpdateInventoryInput input){  return input.getSupplierId() + "," + input.getPartId()+ ","+ input.getName()+ ","+ input.getAmount();}  }
class C{  public Percentile(double percentile){  this.percentile=percentile;}  }
class C{  public static ColorRGB fromHex(String hex){  return fromColor(java.awt.Color.decode(hex));}  }
class C{  public DateMidnight withMonthOfYear(int monthOfYear){  return withMillis(getChronology().monthOfYear().set(getMillis(),monthOfYear));}  }
class C{  public final void rotX(double angle){  double sinAngle, cosAngle;  sinAngle=Math.sin(angle);  cosAngle=Math.cos(angle);  this.m00=1.0;  this.m01=0.0;  this.m02=0.0;  this.m10=0.0;  this.m11=cosAngle;  this.m12=-sinAngle;  this.m20=0.0;  this.m21=sinAngle;  this.m22=cosAngle;}  }
class C{  public boolean execute(INode n){  if (!isValid(n)) {    return false;  }  FreeCellNode state=(FreeCellNode)n;  Column col=state.cols[nth];  col.remove();  if (col.num == 0) {    state.sortMap();  }  state.insertFree(card);  return true;}  }
class C{  public void toCartesian(){switch (opMode) {case HERMITIAN:    return;case CARTESIAN:  return;case POLAR_SPARSE:sparsePolarToCartesian();return;case POLAR_DENSE:densePolarToCartesian();}}  }
class C{  public void shouldHandleLateSetFailureRatio(){  CircuitBreaker breaker=new CircuitBreaker();  breaker.halfOpen();  HalfOpenState state=Testing.stateFor(breaker);  breaker.withFailureThreshold(2);  state.recordFailure();  assertTrue(breaker.isHalfOpen());  state.recordFailure();  assertTrue(breaker.isOpen());  breaker=new CircuitBreaker().withFailureThreshold(3);  breaker.halfOpen();  state=Testing.stateFor(breaker);  state.recordFailure();  state.recordFailure();  breaker.withFailureThreshold(3,5);  state.recordSuccess();  state.recordSuccess();  assertTrue(breaker.isHalfOpen());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  public void resumeTriggers(GroupMatcher<TriggerKey> matcher) throws SchedulerException {  try {    getRemoteScheduler().resumeTriggers(matcher);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  private void upload(HttpServletRequest request,File dir,List<FileItem> fileItemList){  if (fileItemList == null) {    return;  }  Iterator<FileItem> it=fileItemList.iterator();  while (it.hasNext()) {    FileItem item=it.next();    if (!item.isFormField()) {      String name=item.getName();      int i=name.lastIndexOf("/");      if (i < 0) {        i=name.lastIndexOf("\\");      }      if (i >= 0) {        name=name.substring(i + 1);      }      File file=new File(dir,name);      if (isAccessible(request,file)) {        try {          item.write(file);          BssClient bssClient=new BssClient(request.getRemoteHost());          bssClient.recordEvent(getSaasId(request),ProvisioningServiceSkeleton.EVENT_ID_FILE_UPLOAD,getUserId(request),MULTIPLIER);        } catch (        Exception e) {          e.printStackTrace();        }      }    }  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private static Integer toInt(String str){  Integer num=null;  try {    num=Integer.parseInt(str);  } catch (  NumberFormatException ex) {    log.severe(String.format("failed to convert str: %s to integer",str));  }  return num;}  }
class C{  public boolean extractNounPlural(){  boolean changed=false;  for (  String prefix : PrefixManager.s_instance.getPluralPrefixes()) {    changed|=removePrefix(prefix);  }  return changed;}  }
class C{  public boolean contains(Key key){  if (key == null)   throw new NullPointerException("called contains() with null key");  return st.containsKey(key);}  }
class C{  private static Rop pickBinaryOp(TypeList types,Rop int1,Rop long1,Rop float1,Rop double1,Rop int2,Rop long2,Rop float2,Rop double2){  int bt1=types.getType(0).getBasicFrameType();  Rop result=null;switch (types.size()) {case 1:{switch (bt1) {case Type.BT_INT:        return int1;case Type.BT_LONG:      return long1;case Type.BT_FLOAT:    result=float1;  break;case Type.BT_DOUBLE:result=double1;break;}break;}case 2:{switch (bt1) {case Type.BT_INT:return int2;case Type.BT_LONG:return long2;case Type.BT_FLOAT:result=float2;break;case Type.BT_DOUBLE:result=double2;break;}break;}}if (result == null) {return throwBadTypes(types);}return result;}  }
class C{  public void testCountWhereClause(){  cleanTable();  populateTable();  From from=new Select().from(MockModel.class).where("intField = ?",1);  final List<MockModel> list=from.execute();  final int count=from.count();  assertEquals(2,count);  assertEquals(list.size(),count);}  }
class C{  public void highlight(final int begin,final int end){  Highlighter.HighlightPainter myHighlightPainter=new MyHighlightPainter(world.getHighlightColor());  removeHighlights(textArea);  try {    Highlighter hilite=textArea.getHighlighter();    hilite.addHighlight(begin,end,myHighlightPainter);  } catch (  BadLocationException e) {    System.err.checkError();  }}  }
class C{  private void revalidate(){  setTitle(Msg.translate(Env.getCtx(),"PA_Report_ID"));  StringBuffer sb=new StringBuffer();  sb.append(Msg.getMsg(m_ctx,"DataCols")).append("=").append(", ").append(Msg.getMsg(m_ctx,"DataRows")).append("=");  statusBar.setStatusLine(sb.toString());}  }
class C{  protected void doAverageResult(Object[] template) throws Exception {  String[] newKey=new String[template.length - 1];  System.arraycopy(template,0,newKey,0,m_KeyIndex);  System.arraycopy(template,m_KeyIndex + 1,newKey,m_KeyIndex,template.length - m_KeyIndex - 1);  if (m_ResultListener.isResultRequired(this,newKey)) {    Object[] resultTypes=m_ResultProducer.getResultTypes();    Stats[] stats=new Stats[resultTypes.length];    for (int i=0; i < stats.length; i++) {      stats[i]=new Stats();    }    Object[] result=getResultTypes();    int numMatches=0;    for (int i=0; i < m_Keys.size(); i++) {      Object[] currentKey=m_Keys.get(i);      if (!matchesTemplate(template,currentKey)) {        continue;      }      Object[] currentResult=m_Results.get(i);      numMatches++;      for (int j=0; j < resultTypes.length; j++) {        if (resultTypes[j] instanceof Double) {          if (currentResult[j] == null) {            if (stats[j] != null) {              stats[j]=null;            }          }          if (stats[j] != null) {            double currentVal=((Double)currentResult[j]).doubleValue();            stats[j].add(currentVal);          }        }      }    }    if (numMatches != m_ExpectedResultsPerAverage) {      throw new Exception("Expected " + m_ExpectedResultsPerAverage + " results matching key \""+ DatabaseUtils.arrayToString(template)+ "\" but got "+ numMatches);    }    result[0]=new Double(numMatches);    Object[] currentResult=m_Results.get(0);    int k=1;    for (int j=0; j < resultTypes.length; j++) {      if (resultTypes[j] instanceof Double) {        if (stats[j] != null) {          stats[j].calculateDerived();          result[k++]=new Double(stats[j].mean);        } else {          result[k++]=null;        }        if (getCalculateStdDevs()) {          if (stats[j] != null) {            result[k++]=new Double(stats[j].stdDev);          } else {            result[k++]=null;          }        }      } else {        result[k++]=currentResult[j];      }    }    m_ResultListener.acceptResult(this,newKey,result);  }}  }
class C{  public LinkException(){  super();  linkResolvedName=null;  linkResolvedObj=null;  linkRemainingName=null;  linkExplanation=null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.310 -0500",hash_original_method="8AE6DA2951569D3F1B1B45FDE2C61B3C",hash_generated_method="10CE462B07C3B7D01E1AC1F092312A2E") public void parse(String systemId) throws IOException, SAXException {  parse(new InputSource(systemId));}  }
class C{  public static boolean sortedSetIsAssignableFrom(Class<?> aClass){  return SortedSet.class.isAssignableFrom(aClass);}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected void cleanup(){  super.cleanup();  this.cachedSeries.clear();}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (derivedFeatureID) {case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE__CHARACTER:    return RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private static EntityStore<?> find(Class<? extends GlowEntity> clazz,String type){  EntityStore<?> store=classTable.get(clazz);  if (store == null) {    throw new IllegalArgumentException("Unknown entity type to " + type + ": "+ clazz);  }  return store;}  }
class C{  public Resource matchIncludedToRelation(Resource object,List<Resource> included){  if (included == null) {    return object;  }  for (  Resource resource : included) {    if (object.getId().equals(resource.getId()) && object.getClass().equals(resource.getClass())) {      return resource;    }  }  return object;}  }
class C{  public synchronized boolean isCellEditable(int row,int col){  return true;}  }
class C{  private boolean processChallenge(byte[] realm,byte[] nonce,Request request,TransactionID requestTransactionID) throws StunException {  UsernameAttribute usernameAttribute=(UsernameAttribute)request.getAttribute(Attribute.USERNAME);  if (usernameAttribute == null) {    if (longTermCredentialSession == null) {      LongTermCredential longTermCredential=harvester.createLongTermCredential(this,realm);      if (longTermCredential == null) {        return false;      } else {        longTermCredentialSession=new LongTermCredentialSession(longTermCredential,realm);        harvester.getStunStack().getCredentialsManager().registerAuthority(longTermCredentialSession);      }    } else {      if (!longTermCredentialSession.realmEquals(realm))       return false;    }  } else {    if (longTermCredentialSession == null)     return false; else {      if (!longTermCredentialSession.usernameEquals(usernameAttribute.getUsername()))       return false; else {        if (!longTermCredentialSession.realmEquals(realm))         return false;      }    }  }  longTermCredentialSession.setNonce(nonce);  Request retryRequest=createRequestToRetry(request);  TransactionID retryRequestTransactionID=null;  if (retryRequest != null) {    if (requestTransactionID != null) {      Object applicationData=requestTransactionID.getApplicationData();      if (applicationData != null) {        byte[] retryRequestTransactionIDAsBytes=retryRequest.getTransactionID();        retryRequestTransactionID=(retryRequestTransactionIDAsBytes == null) ? TransactionID.createNewTransactionID() : TransactionID.createTransactionID(harvester.getStunStack(),retryRequestTransactionIDAsBytes);        retryRequestTransactionID.setApplicationData(applicationData);      }    }    retryRequestTransactionID=sendRequest(retryRequest,false,retryRequestTransactionID);  }  return (retryRequestTransactionID != null);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void kick(Player player,String targetPlayer){  if (player.getName().equals(targetPlayer)) {    part(player);    return;  }  Group group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (group == null) {    player.sendPrivateText(NotificationType.ERROR,"You are not a member of a group.");    return;  }  if (!group.hasLeader(player.getName())) {    player.sendPrivateText(NotificationType.ERROR,"Only the group leader may kick members.");    return;  }  if (!group.hasMember(targetPlayer)) {    player.sendPrivateText(NotificationType.ERROR,targetPlayer + " is not a member of your group.");    return;  }  group.sendGroupMessage("Group",targetPlayer + " was kicked by " + player.getName());  group.removeMember(targetPlayer);}  }
class C{  public static void assertJPost(String request,String content,double delta,String... tests) throws Exception {  int queryStartPos=request.indexOf('?');  String query;  String path;  if (-1 == queryStartPos) {    query="";    path=request;  } else {    query=request.substring(queryStartPos + 1);    path=request.substring(0,queryStartPos);  }  query=setParam(query,"wt","json");  request=path + '?' + setParam(query,"indent","on");  String response;  boolean failed=true;  try {    response=restTestHarness.post(request,content);    failed=false;  }  finally {    if (failed) {      log.error("REQUEST FAILED: " + request);    }  }  for (  String test : tests) {    if (null == test || 0 == test.length())     continue;    String testJSON=json(test);    try {      failed=true;      String err=JSONTestUtil.match(response,testJSON,delta);      failed=false;      if (err != null) {        log.error("query failed JSON validation. error=" + err + "\n expected ="+ testJSON+ "\n response = "+ response+ "\n request = "+ request+ "\n");        throw new RuntimeException(err);      }    }  finally {      if (failed) {        log.error("JSON query validation threw an exception." + "\n expected =" + testJSON + "\n response = "+ response+ "\n request = "+ request+ "\n");      }    }  }}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public void addComponent(int index,Object constraints,Component cmp){  insertComponentAt(index,constraints,cmp);}  }
class C{  public void checkIndicesList(MyIdxList list,int startidx,int endidx) throws Exception {  boolean found;  ListNode node;  for (int i=0; i < list.size(); i++) {    node=list.get(i);    found=false;    for (int j=startidx; j <= endidx; j++) {      if (node.idx == m_InstList[j]) {        found=true;        break;      }    }    if (!found) {      throw new Exception("Error: Element " + node.idx + " of the list not in "+ "the array."+ "\nArray: "+ printInsts(startidx,endidx)+ "\nList: "+ printList(list));    }  }}  }
class C{  public boolean isLabelProperty(Object element,String property){  return false;}  }
class C{  public ObjectFactory(){}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  while (length > 0) {    if (_bufferEnd <= _offset) {      flushBlock(false);    }    int sublen=Math.min(_bufferEnd - _offset,length);    System.arraycopy(buffer,offset,_buffer,_offset,sublen);    offset+=sublen;    _offset+=sublen;    length-=sublen;  }}  }
class C{  public static LinuxDesktop detectDesktopSession(){  ArrayList<String> command=new ArrayList<String>();  command.add("sh");  command.add("-c");  command.add("echo \"$DESKTOP_SESSION\"");  Map<String,Object> desktops=new HashMap<String,Object>();  desktops.put("kde",LinuxDesktop.desktopKde);  desktops.put("gnome",LinuxDesktop.desktopGnome);  desktops.put("cinnamon",LinuxDesktop.desktopCinnamon);  desktops.put("xfce",LinuxDesktop.desktopXfce);  Object desktop=Utils.isExpectedCommandOutput(command,desktops);  if (desktop != null) {    return (LinuxDesktop)desktop;  }  return LinuxDesktop.desktopUnknown;}  }
class C{  public static void deleteMatching(File baseFile,String regex){  if (baseFile.exists() && baseFile.isDirectory()) {    for (    File child : listFiles(baseFile)) {      if (child.getName().matches(regex)) {        try {          delete(child);        } catch (        IOException ignore) {        }      }    }  }}  }
class C{  public static boolean isViewUndocked(final String viewID){  final IViewPart view=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(viewID);  return view != null;}  }
class C{  protected ConnectionStateSSLv3(SSLSessionImpl session){  try {    CipherSuite cipherSuite=session.cipherSuite;    boolean is_exportabe=cipherSuite.isExportable();    hash_size=cipherSuite.getMACLength();    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;    int iv_size=cipherSuite.ivSize;    block_size=cipherSuite.getBlockSize();    String algName=cipherSuite.getBulkEncryptionAlgorithm();    String hashName=cipherSuite.getHashName();    if (logger != null) {      logger.println("ConnectionStateSSLv3.create:");      logger.println("  cipher suite name: " + session.getCipherSuite());      logger.println("  encryption alg name: " + algName);      logger.println("  hash alg name: " + hashName);      logger.println("  hash size: " + hash_size);      logger.println("  block size: " + block_size);      logger.println("  IV size:" + iv_size);      logger.println("  key size: " + key_size);    }    byte[] clientRandom=session.clientRandom;    byte[] serverRandom=session.serverRandom;    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];    byte[] seed=new byte[clientRandom.length + serverRandom.length];    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);    PRF.computePRF_SSLv3(key_block,session.master_secret,seed);    byte[] client_mac_secret=new byte[hash_size];    byte[] server_mac_secret=new byte[hash_size];    byte[] client_key=new byte[key_size];    byte[] server_key=new byte[key_size];    boolean is_client=!session.isServer;    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);    IvParameterSpec clientIV=null;    IvParameterSpec serverIV=null;    if (is_exportabe) {      if (logger != null) {        logger.println("ConnectionStateSSLv3: is_exportable");      }      MessageDigest md5=MessageDigest.getInstance("MD5");      md5.update(client_key);      md5.update(clientRandom);      md5.update(serverRandom);      client_key=md5.digest();      md5.update(server_key);      md5.update(serverRandom);      md5.update(clientRandom);      server_key=md5.digest();      key_size=cipherSuite.expandedKeyMaterial;      if (block_size != 0) {        md5.update(clientRandom);        md5.update(serverRandom);        clientIV=new IvParameterSpec(md5.digest(),0,iv_size);        md5.update(serverRandom);        md5.update(clientRandom);        serverIV=new IvParameterSpec(md5.digest(),0,iv_size);      }    } else     if (block_size != 0) {      clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size);      serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size);    }    if (logger != null) {      logger.println("is exportable: " + is_exportabe);      logger.println("master_secret");      logger.print(session.master_secret);      logger.println("client_random");      logger.print(clientRandom);      logger.println("server_random");      logger.print(serverRandom);      logger.println("client_mac_secret");      logger.print(client_mac_secret);      logger.println("server_mac_secret");      logger.print(server_mac_secret);      logger.println("client_key");      logger.print(client_key,0,key_size);      logger.println("server_key");      logger.print(server_key,0,key_size);      if (clientIV != null) {        logger.println("client_iv");        logger.print(clientIV.getIV());        logger.println("server_iv");        logger.print(serverIV.getIV());      } else {        logger.println("no IV.");      }    }    if (algName == null) {      encCipher=new NullCipher();      decCipher=new NullCipher();    } else {      encCipher=Cipher.getInstance(algName);      decCipher=Cipher.getInstance(algName);      if (is_client) {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);      } else {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);      }    }    messageDigest=MessageDigest.getInstance(hashName);    if (is_client) {      mac_write_secret=client_mac_secret;      mac_read_secret=server_mac_secret;    } else {      mac_write_secret=server_mac_secret;      mac_read_secret=client_mac_secret;    }    if (hashName.equals("MD5")) {      pad_1=SSLv3Constants.MD5pad1;      pad_2=SSLv3Constants.MD5pad2;    } else {      pad_1=SSLv3Constants.SHApad1;      pad_2=SSLv3Constants.SHApad2;    }  } catch (  Exception e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));  }}  }
class C{  public static double distance(double lat1,double lat2,double lon1,double lon2,double el1,double el2){  final int R=6371;  Double latDistance=deg2rad(lat2 - lat1);  Double lonDistance=deg2rad(lon2 - lon1);  Double a=Math.sin(latDistance / 2) * Math.sin(latDistance / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(lonDistance / 2)* Math.sin(lonDistance / 2);  Double c=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));  double distance=R * c * 1000;  double height=el1 - el2;  distance=Math.pow(distance,2) + Math.pow(height,2);  return Math.sqrt(distance);}  }
class C{  public ParserAdapter(Parser parser){  setup(parser);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:08.523 -0500",hash_original_method="FBA963D7A9FB0658F4932AD387478243",hash_generated_method="BD7CF7AD8C750BA12A60D8708AABA86F") @Override public Object clone(){  RuleBasedCollator clone=(RuleBasedCollator)super.clone();  return clone;}  }
class C{  private void horizontallyFromSrcToWorkGray(BufferedImage srcImg,byte[][] workPixels,int start,int delta){  final int[] tempPixels=new int[srcWidth];  final byte[] srcPixels=new byte[srcWidth];  for (int k=start; k < srcHeight; k=k + delta) {    ImageUtils.getPixelsBGR(srcImg,k,srcWidth,srcPixels,tempPixels);    for (int i=dstWidth - 1; i >= 0; i--) {      int sampleLocation=i;      final int max=horizontalSubsamplingData.arrN[i];      float sample0=0.0f;      int index=i * horizontalSubsamplingData.numContributors;      for (int j=max - 1; j >= 0; j--) {        float arrWeight=horizontalSubsamplingData.arrWeight[index];        int pixelIndex=horizontalSubsamplingData.arrPixel[index];        sample0+=(srcPixels[pixelIndex] & 0xff) * arrWeight;        index++;      }      workPixels[k][sampleLocation]=toByte(sample0);    }    processedItems++;    if (start == 0) {      setProgress();    }  }}  }
class C{  @Override public String toString(){  return String.format("REIL Edge [%s -> %s]",super.getSource().getAddress().toHexString(),super.getTarget().getAddress().toHexString());}  }
class C{  @Override protected void readEmptyNdefMessage(){  toast(getString(R.string.readEmptyMessage));  clearList();}  }
class C{  public void updateKernelComboBox(JComboBox<String> box){  box.removeAllItems();  box.addItem(NONE);  for (  String kernelName : getKernelNameList()) {    box.addItem(kernelName);  }}  }
class C{  public synchronized void refreshIndexes(){  if (this.indexCache == null)   this.indexCache=new TreeMap<String,Index>();  Node[] nodes=client.getNodes();  for (  Node node : nodes) {    if (node.isActive()) {      try {        String indexString=Info.request(getInfoPolicy(),node,"sindex");        if (!indexString.isEmpty()) {          String[] indexList=indexString.split(";");          for (          String oneIndexString : indexList) {            Index index=new Index(oneIndexString);            String indexBin=index.getBin();            this.indexCache.put(indexBin,index);          }        }        break;      } catch (      AerospikeException e) {        log.error("Error geting Index informaton",e);      }    }  }}  }
class C{  public static ComponentUI createUI(JComponent b){  AppContext appContext=AppContext.getAppContext();  BEToggleButtonUI windowsToggleButtonUI=(BEToggleButtonUI)appContext.get(WINDOWS_TOGGLE_BUTTON_UI_KEY);  if (windowsToggleButtonUI == null) {    windowsToggleButtonUI=new BEToggleButtonUI();    appContext.put(WINDOWS_TOGGLE_BUTTON_UI_KEY,windowsToggleButtonUI);  }  return windowsToggleButtonUI;}  }
class C{  @Override public final String toString(){  StringBuilder cab=new StringBuilder(50 + getHopCount() * 30);  cab.append("HttpRoute[");  if (this.localAddress != null) {    cab.append(this.localAddress);    cab.append("->");  }  cab.append('{');  if (this.tunnelled == TunnelType.TUNNELLED)   cab.append('t');  if (this.layered == LayerType.LAYERED)   cab.append('l');  if (this.secure)   cab.append('s');  cab.append("}->");  if (this.proxyChain != null) {    for (    HttpHost aProxyChain : this.proxyChain) {      cab.append(aProxyChain);      cab.append("->");    }  }  cab.append(this.targetHost);  cab.append(']');  return cab.toString();}  }
class C{  public int compareTo(Object s){  Location loc1=this.stn.getLocation();  Location loc2=((SemanticNode)s).stn.getLocation();  if (loc1.beginLine() < loc2.beginLine()) {    return -1;  }  if (loc1.beginLine() > loc2.beginLine()) {    return 1;  }  if (loc1.beginColumn() == loc2.beginColumn()) {    return 0;  }  return (loc1.beginColumn() < loc2.beginColumn()) ? -1 : 1;}  }
class C{  public void addProcessingItem(IProcessingItem procItem,int parallelismHint){  this.processingItems.add(procItem);}  }
class C{  public boolean isDone(){  return false;}  }
class C{  private boolean cutoffQuery(int nrounds,int nstmts){  final int describeIterationLimit=this.describeIterationLimit == 0 ? Integer.MAX_VALUE : this.describeIterationLimit;  final int describeStatementLimit=this.describeStatementLimit == 0 ? Integer.MAX_VALUE : this.describeStatementLimit;  final boolean cutoffRounds=nrounds >= describeIterationLimit;  final boolean cutoffStatements=nstmts >= describeStatementLimit;  return cutoffRounds && cutoffStatements;}  }
class C{  private long internalSizeOf(Object root){  long size=0;  thisQueue.add(root);  while (!thisQueue.isEmpty()) {    Iterator<Object> it=thisQueue.iterator();    while (it.hasNext()) {      Object obj=it.next();      if (isInitialized() && obj != null && (classLoader == null || classLoader == obj.getClass().getClassLoader()) && (!IGNORE_NIO || !obj.getClass().getName().startsWith("java.nio."))) {        ObjectWrapper ow=new ObjectWrapper(obj);        if (!processedObjects.contains(ow)) {          if (obj.getClass().isArray()) {            size+=sizeOfArray(obj);          } else           if (obj.getClass().isPrimitive()) {            size+=sizeOfPrimitive(obj.getClass());          } else {            processedObjects.add(ow);            size+=sizeOfObject(obj);          }        }      }      it.remove();    }    if (!nextQueue.isEmpty()) {      thisQueue.addAll(nextQueue);      nextQueue.clear();    }  }  return size;}  }
class C{  protected final boolean handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,stateCount[2],stateCountTotal);  if (!Float.isNaN(centerI)) {    centerJ=crossCheckHorizontal((int)centerJ,(int)centerI,stateCount[2],stateCountTotal);    if (!Float.isNaN(centerJ)) {      float estimatedModuleSize=(float)stateCountTotal / 7.0f;      boolean found=false;      for (int index=0; index < possibleCenters.size(); index++) {        FinderPattern center=possibleCenters.get(index);        if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {          possibleCenters.set(index,center.combineEstimate(centerI,centerJ,estimatedModuleSize));          found=true;          break;        }      }      if (!found) {        FinderPattern point=new FinderPattern(centerJ,centerI,estimatedModuleSize);        possibleCenters.add(point);        if (resultPointCallback != null) {          resultPointCallback.foundPossibleResultPoint(point);        }      }      return true;    }  }  return false;}  }
class C{  public static ArrayList<String> exportResultVariables(long workerID,LocalVariableMap vars,ArrayList<String> resultVars) throws DMLRuntimeException, IOException {  ArrayList<String> ret=new ArrayList<String>();  for (  String rvar : resultVars) {    Data dat=vars.get(rvar);    if (dat != null && dat.getDataType() == DataType.MATRIX) {      MatrixObject mo=(MatrixObject)dat;      if (mo.isDirty()) {        mo.exportData();        ret.add(ProgramConverter.serializeDataObject(rvar,mo));      }    }  }  return ret;}  }
class C{  public static MobileDoc createWindow(String title){  MobileDoc doc=create(true,title,false);  doc.getHead().addElement(new link("iui/iui.css",link.REL_STYLESHEET,link.TYPE_CSS));  doc.getHead().addElement(new script((Element)null,MobileEnv.getBaseDirectory("iui/iui.js")));  doc.getHead().addElement(new script((Element)null,"js/window.js"));  doc.getHead().addElement(new script((Element)null,"js/calendar.js"));  doc.getHead().addElement(new script((Element)null,"lang/calendar-en.js"));  doc.getHead().addElement(new link("css/calendar-blue.css",link.REL_STYLESHEET,link.TYPE_CSS));  doc.getHead().addElement(new link("images/AdempiereButton.png","apple-touch-icon-precomposed","image/png"));  doc.getHead().addElement(new link("images/AdempiereButton.png","shortcut icon","image/png"));  doc.getHead().addElement(new meta().setName("viewport").setContent("width=device-width; initial-scale=1.0; minimum-scale=1.0; maximum-scale=1.0; user-scalable=0;"));  return doc;}  }
class C{  protected TerminationCondition createTerminationCondition(){  int maxEvaluations=(int)properties.getDouble("maxEvaluations",-1);  long maxTime=(long)properties.getDouble("maxTime",-1);  List<TerminationCondition> conditions=new ArrayList<TerminationCondition>();  if (maxEvaluations >= 0) {    conditions.add(new MaxFunctionEvaluations(maxEvaluations));  }  if (maxTime >= 0) {    conditions.add(new MaxElapsedTime(maxTime));  }  conditions.addAll(terminationConditions);  if (conditions.size() == 0) {    System.err.println("no termination conditions set, setting to " + "25,000 max evaluations");    return new MaxFunctionEvaluations(25000);  } else   if (conditions.size() == 1) {    return conditions.get(0);  } else {    return new CompoundTerminationCondition(conditions.toArray(new TerminationCondition[conditions.size()]));  }}  }
class C{  public boolean isScreenshotSupported(){  return screenshotSupported;}  }
class C{  protected Component createButtonsPanel(){  JPanel panel=new JPanel(new FlowLayout(FlowLayout.RIGHT));  ButtonFactory bf=new ButtonFactory(bundle,this);  panel.add(bf.createJButton("OKButton"));  panel.add(bf.createJButton("CancelButton"));  return panel;}  }
class C{  public LintReport<T> addReport(final ResourceLintReport<T> resourceLintReport){  Validate.notNull(resourceLintReport);  reports.add(resourceLintReport);  return this;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.advanceLinePaint=SerialUtilities.readPaint(stream);  this.advanceLineStroke=SerialUtilities.readStroke(stream);}  }
class C{  public final void finishPreloading(){  if (mPreloading) {    mPreloading=false;    flushLayoutCache();  }}  }
class C{  public <OD>Where<T,ID> idEq(Dao<OD,?> dataDao,OD data) throws SQLException {  if (idColumnName == null) {    throw new SQLException("Object has no id column specified");  }  addClause(new SimpleComparison(idColumnName,idFieldType,dataDao.extractId(data),SimpleComparison.EQUAL_TO_OPERATION));  return this;}  }
class C{  public static void loaderInit(){  try {    ScriptLoader.getScriptDirByType("js").mkdirs();    loadedScripts=ScriptLoader.loadAll("js",ToastConfiguration.config.getArray("javascript.autoload",new String[]{"main.js"}));  } catch (  Exception e) {    Toast.log().error("Could not Load JavaScript script files: " + e);    Toast.log().exception(e);  }}  }
class C{  private void verifySignature(X509Certificate cert) throws CertPathValidatorException {  String msg="signature";  if (debug != null)   debug.println("---checking " + msg + "...");  try {    cert.verify(prevPubKey,sigProvider);  } catch (  SignatureException e) {    throw new CertPathValidatorException(msg + " check failed",e,null,-1,BasicReason.INVALID_SIGNATURE);  }catch (  GeneralSecurityException e) {    throw new CertPathValidatorException(msg + " check failed",e);  }  if (debug != null)   debug.println(msg + " verified.");}  }
class C{  public SerialHandlerGeneric(String device){  try {    setDeviceName(device);  } catch (  IOException ex) {    log.error("SerialHandlerGeneric",ex);  }}  }
class C{  public CacheFactory initialCapacity(int initialCapacity){  if (initialCapacity < 0) {    throw new IllegalArgumentException();  }  this.initialCapacity=initialCapacity;  return this;}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public static long sqlCount(DbmsOperationHandler dbmsOperationHandler,DatabaseNamingConvention naming,Dbms dbms,Table table){  return dbmsOperationHandler.executeQuery(dbms,"SELECT COUNT(*) FROM " + sqlTableReference(naming,table),Collections.emptyList(),null).findAny().get();}  }
class C{  private synchronized boolean enableExclusiveProcessing(String controllerId,String instanceId,PropertyHandler paramHandler) throws APPlatformException {  logger.debug("enableExclusiveProcessing('{}')",instanceId);  return platformService.lockServiceInstance(controllerId,instanceId,paramHandler.getTPAuthentication());}  }
class C{  protected boolean addToPendingNodes(final Link l,final Node n,final PseudoRemovePriorityQueue<Node> pendingNodes,final double currTime,final double currCost){  double travelTime=this.timeFunction.getLinkTravelTime(l,currTime,person,null);  double travelCost=this.costFunction.getLinkTravelDisutility(l,currTime,this.person,null,null);  DijkstraNodeData data=getData(n);  double nCost=data.getCost();  if (!data.isVisited(getIterationId())) {    visitNode(n,data,pendingNodes,currTime + travelTime,currCost + travelCost,l);    return true;  }  double totalCost=currCost + travelCost;  if (totalCost < nCost) {    revisitNode(n,data,pendingNodes,currTime + travelTime,totalCost,l);    return true;  }  return false;}  }
class C{  public static CounterSetFormat forMIMEType(String mimeType,CounterSetFormat fallback){  return matchMIMEType(mimeType,formats,fallback);}  }
class C{  public Date expires(){  if (this.date_cache_Expires != null)   return this.date_cache_Expires;  this.date_cache_Expires=headerDate(HeaderFramework.EXPIRES);  return this.date_cache_Expires;}  }
class C{  public CActionSearchRegEx(final ZyGraph graph){  super("Regular Expression Search");  m_graph=graph;}  }
class C{  public void connectLayers(Sparse inToRes,Sparse resRecurrent,Sparse outToRes){  addSynapseGroup(connectNeuronGroups(inputLayer,reservoirLayer,inToRes));  addSynapseGroup(connectNeuronGroups(reservoirLayer,reservoirLayer,resRecurrent));  if (backWeights) {    addSynapseGroup(connectNeuronGroups(outputLayer,reservoirLayer,outToRes));  }  AllToAll allToAll=new AllToAll();  connectNeuronGroups(reservoirLayer,outputLayer,allToAll);  if (recurrentOutWeights) {    connectNeuronGroups(outputLayer,outputLayer);  }  if (directInOutWeights) {    connectNeuronGroups(inputLayer,outputLayer);  }  SimnetUtils.scaleEigenvalue(reservoirLayer.getNeuronList(),reservoirLayer.getNeuronList(),spectralRadius);}  }
class C{  private NioDatagramAcceptor(IoSessionConfig sessionConfig,Executor executor){  super(sessionConfig,executor);  try {    init();    selectable=true;  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeIoException("Failed to initialize.",e);  } finally {    if (!selectable) {      try {        destroy();      } catch (      Exception e) {        ExceptionMonitor.getInstance().exceptionCaught(e);      }    }  }}  }
class C{  public TestConfiguration validateThenBuild(boolean requireProcessors){  List<String> errors=validate(requireProcessors);  if (errors.isEmpty()) {    return build();  }  throw new RuntimeException("Attempted to build invalid test configuration:\n" + "Errors:\n" + PluginUtil.join("\n",errors) + "\n"+ this.toString()+ "\n");}  }
class C{  CSSElement(String name){  setTagId(TAG_CSS_SELECTOR);  int index=name.indexOf('[');  String tagName=name;  if (index != -1) {    tagName=name.substring(0,index);    if (HTMLComponent.PROCESS_HTML_MP1_ONLY) {      setTagId(TAG_CSS_ILLEGAL_SELECTOR);    } else {      while (index != -1) {        int endIndex=name.indexOf(']');        if ((endIndex != -1) && (endIndex > index + 1)) {          String str=name.substring(index + 1,endIndex);          addAttributeSelection(str);        } else {          setTagId(TAG_CSS_ILLEGAL_SELECTOR);          break;        }        name=name.substring(endIndex + 1);        index=name.indexOf('[');      }    }  }  setTagName(tagName);  for (int i=0; i <= LAST_CSS_PROPERTY_INDEX; i++) {    attrVals[i]=-1;  }}  }
class C{  public boolean saveChunks(boolean bln,net.minecraft.util.IProgressUpdate ipu){  return true;}  }
class C{  public DisruptorBlockingQueue(final int capacity,Collection<? extends E> c){  this(capacity);  for (  final E e : c) {    offer(e);  }}  }
class C{  public int readUnsignedShort(){  return (data[position++] & 0xFF) << 8 | (data[position++] & 0xFF);}  }
class C{  private TestUtils(){}  }
class C{  public void tagDefineBitsLossless2(int id,int format,int width,int height,Color[] colors,byte[] imageData) throws IOException {  if (tags != null) {    tags.tagDefineBitsLossless2(id,format,width,height,colors,imageData);  }}  }
class C{  public ActivatableServerRef(ActivationID id,int port,RMIClientSocketFactory csf,RMIServerSocketFactory ssf){  super(new LiveRef(port,csf,ssf));  this.id=id;}  }
class C{  public void printClass(Class<?> cl) throws IOException {  if (!cl.isArray())   print(cl.getName().replace('$','.')); else {    printClass(cl.getComponentType());    print("[]");  }}  }
class C{  public String initialdocumentvectors(){  return initialdocumentvectors;}  }
class C{  public Variable(ValueKind<?> kind,int index){  super(kind);  assert index >= 0;  this.index=index;}  }
class C{  public LineMergeEdge(LineString line){  this.line=line;}  }
class C{  public KeyInfo toDTO(){  return new KeyInfo(available,usage,friendlyName,id,publicKey,Collections.unmodifiableList(getCertsAsDTOs()),Collections.unmodifiableList(getCertRequestsAsDTOs()));}  }
class C{  @Override public CallableStatement prepareCall(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.CALLABLE_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("CallableStatement",TraceObject.CALLABLE_STATEMENT,id,"prepareCall(" + quote(sql) + ")");    }    checkClosed();    sql=translateSQL(sql);    return new JdbcCallableStatement(this,sql,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public AnimationBuilder pivotY(float pivotY){  for (  View view : views) {    ViewCompat.setPivotY(view,pivotY);  }  return this;}  }
class C{  public Signature validate(Node securityHeader,SecurityHeaderType wsseSecurityElement) throws WSFaultException {  Validate.notNull(securityHeader);  Validate.notNull(wsseSecurityElement);  Signature signature=extractSignature(wsseSecurityElement);  logger.info("Got signing certificate");  validateSignature(getSignatureNode(securityHeader),signature,getTimestampNode(securityHeader));  return signature;}  }
class C{  public void popupMenuWillBecomeInvisible(PopupMenuEvent e){}  }
class C{  @Deprecated public String unescapeXmlName(final String name){  return decodeNode(name);}  }
class C{  public void update(byte[] input,int inOff,int length){  digest.update(input,inOff,length);}  }
class C{  private Constant simulateMath(SsaInsn insn,int resultType){  Insn ropInsn=insn.getOriginalRopInsn();  int opcode=insn.getOpcode().getOpcode();  RegisterSpecList sources=insn.getSources();  int regA=sources.get(0).getReg();  Constant cA;  Constant cB;  if (latticeValues[regA] != CONSTANT) {    cA=null;  } else {    cA=latticeConstants[regA];  }  if (sources.size() == 1) {    CstInsn cstInsn=(CstInsn)ropInsn;    cB=cstInsn.getConstant();  } else {    int regB=sources.get(1).getReg();    if (latticeValues[regB] != CONSTANT) {      cB=null;    } else {      cB=latticeConstants[regB];    }  }  if (cA == null || cB == null) {    return null;  }switch (resultType) {case Type.BT_INT:    int vR;  boolean skip=false;int vA=((CstInteger)cA).getValue();int vB=((CstInteger)cB).getValue();switch (opcode) {case RegOps.ADD:vR=vA + vB;break;case RegOps.SUB:if (sources.size() == 1) {vR=vB - vA;} else {vR=vA - vB;}break;case RegOps.MUL:vR=vA * vB;break;case RegOps.DIV:if (vB == 0) {skip=true;vR=0;} else {vR=vA / vB;}break;case RegOps.AND:vR=vA & vB;break;case RegOps.OR:vR=vA | vB;break;case RegOps.XOR:vR=vA ^ vB;break;case RegOps.SHL:vR=vA << vB;break;case RegOps.SHR:vR=vA >> vB;break;case RegOps.USHR:vR=vA >>> vB;break;case RegOps.REM:if (vB == 0) {skip=true;vR=0;} else {vR=vA % vB;}break;default :throw new RuntimeException("Unexpected op");}return skip ? null : CstInteger.make(vR);default :return null;}}  }
class C{  protected Object attemptReadResponse(Connection cnx) throws Exception {  Message msg=createResponseMessage();  if (msg != null) {    msg.setComms(cnx.getSocket(),cnx.getInputStream(),cnx.getOutputStream(),((ConnectionImpl)cnx).getCommBufferForAsyncRead(),cnx.getStats());    if (msg instanceof ChunkedMessage) {      try {        return processResponse(msg,cnx);      }  finally {        msg.unsetComms();        processSecureBytes(cnx,msg);      }    }    try {      msg.recv();    }  finally {      msg.unsetComms();      processSecureBytes(cnx,msg);    }    return processResponse(msg,cnx);  }  return null;}  }
class C{  public static ActiveLagGraph serializableInstance(){  return new ActiveLagGraph();}  }
class C{  @Inject public StatusPanelGroupPresenter(StatusPanelGroupView view){  this.view=view;  this.view.setDelegate(this);}  }
class C{  public DefaultEntityViewInfo createWayInfo(float minScale,float minNameScale,int printOrder,UColor wayColor,float wayWidth,UColor wayFillColor,boolean fillAreasOnly){  DefaultEntityViewInfo result=createDefaultInfo();  result.minVisibleScale=minScale;  result.minNameScale=minNameScale;  result.printOrder=printOrder;  result.wayColor=wayColor;  result.wayWidth=wayWidth;  result.wayFillColor=wayFillColor;  result.fillAreasOnly=fillAreasOnly;  return result;}  }
class C{  public int readRawVarint32() throws IOException {  byte tmp=readRawByte();  if (tmp >= 0) {    return tmp;  }  int result=tmp & 0x7f;  if ((tmp=readRawByte()) >= 0) {    result|=tmp << 7;  } else {    result|=(tmp & 0x7f) << 7;    if ((tmp=readRawByte()) >= 0) {      result|=tmp << 14;    } else {      result|=(tmp & 0x7f) << 14;      if ((tmp=readRawByte()) >= 0) {        result|=tmp << 21;      } else {        result|=(tmp & 0x7f) << 21;        result|=(tmp=readRawByte()) << 28;        if (tmp < 0) {          for (int i=0; i < 5; i++) {            if (readRawByte() >= 0) {              return result;            }          }          throw InvalidProtocolBufferNanoException.malformedVarint();        }      }    }  }  return result;}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  public CScriptingDialog(final Frame owner,final String defaultLanguage,final PluginInterface pluginInterface,final Map<String,Object> bindings){  super(owner,"Scripting",false);  this.defaultLanguage=defaultLanguage;  scriptsDirectory=PluginInterface.instance().getProgramPath() + File.separator + "scripts";  addBinding("navi",pluginInterface);  addBinding("dbs",pluginInterface.getDatabaseManager());  for (  final Entry<String,Object> binding : bindings.entrySet()) {    addBinding(binding.getKey(),binding.getValue());  }  setLayout(new BorderLayout());  menuBar=new MenuBar();  setJMenuBar(menuBar);  scriptTab.addChangeListener(new InternalChangeListener());  final ConsolePane initialPanel=new ConsolePane();  initPanel(initialPanel);  scriptTab.addTab("Console",initialPanel);  add(scriptTab,BorderLayout.CENTER);  setResizable(true);  pack();}  }
class C{  public GradientPaint(float x1,float y1,Color color1,float x2,float y2,Color color2){  if ((color1 == null) || (color2 == null)) {    throw new NullPointerException("Colors cannot be null");  }  p1=new Point2D.Float(x1,y1);  p2=new Point2D.Float(x2,y2);  this.color1=color1;  this.color2=color2;}  }
class C{  public boolean isConsistent(GraphChange other){  for (  Triple colide : this.colliders)   if (other.nonColliders.contains(colide))   return false;  for (  Triple nonColide : this.nonColliders)   if (other.colliders.contains(nonColide))   return false;  Collection colidePairsOther=makePairs(other.colliders);  Collection nonColidePairsOther=makePairs(other.nonColliders);  for (  Edge e : this.removes) {    NodePair rem=new NodePair(e.getNode1(),e.getNode2());    if (colidePairsOther.contains(rem) || nonColidePairsOther.contains(rem) || other.orients.contains(rem))     return false;  }  Collection colidePairsThis=makePairs(this.colliders);  Collection nonColidePairsThis=makePairs(this.nonColliders);  for (  Edge e : other.removes) {    NodePair rem=new NodePair(e.getNode1(),e.getNode2());    if (colidePairsThis.contains(rem) || nonColidePairsThis.contains(rem) || this.orients.contains(rem))     return false;  }  return true;}  }
class C{  static void runQueryRpcAndPrint(Bigquery bigquery,String projectId,String query,PrintStream out) throws IOException, InterruptedException {  QueryRequest queryRequest=new QueryRequest().setQuery(query);  QueryResponse queryResponse=bigquery.jobs().query(projectId,queryRequest).execute();  if (queryResponse.getJobComplete()) {    printRows(queryResponse.getRows(),out);    if (null == queryResponse.getPageToken()) {      return;    }  }  String pageToken=null;  while (true) {    GetQueryResultsResponse queryResults=bigquery.jobs().getQueryResults(projectId,queryResponse.getJobReference().getJobId()).setPageToken(pageToken).execute();    if (queryResults.getJobComplete()) {      printRows(queryResults.getRows(),out);      pageToken=queryResults.getPageToken();      if (null == pageToken) {        return;      }    }    Thread.sleep(500);  }}  }
class C{  public void deleteVVset(String nativeId) throws Exception {  _log.info("3PARDriver: deleteVVset enter");  ClientResponse clientResp=null;  final String path=MessageFormat.format(URI_DELETE_CG,nativeId);  _log.info("3PARDriver:deleteVVset running delete VV Set " + path);  try {    clientResp=delete(path);    if (clientResp == null) {      _log.error("3PARDriver:deleteVVset There is no response from 3PAR");      throw new HP3PARException("There is no response from 3PAR");    } else     if (clientResp.getStatus() != 200) {      String errResp=getResponseDetails(clientResp);      throw new HP3PARException(errResp);    } else {      _log.info("3PARDriver: deleteVVset success");    }  } catch (  Exception e) {    throw e;  } finally {    if (clientResp != null) {      clientResp.close();    }    _log.info("3PARDriver:deleteVVset leave");  }}  }
class C{  public RETokenizer tokenizer(char[] data,int off,int len){  return new RETokenizer(this,data,off,len);}  }
class C{  public RadiusGraphElementAccessor(){  this(Math.sqrt(Double.MAX_VALUE - 1000));}  }
class C{  public Note queryForId(Long id){  Note note=noteDao.queryForId(id);  if (note == null) {    return null;  }  note.setComments(loadLazyForeignCollection(note.getComments()));  return note;}  }
class C{  private long createRcsRawContact(final ContactInfo info,final long rawContactId) throws ContactManagerException {  ContactId contact=info.getContact();  try {    String contactNumber=contact.toString();    if (sLogger.isActivated()) {      sLogger.debug("Create RCS rawcontact for '" + contactNumber + "' associated to rawContactId "+ rawContactId);    }    ArrayList<ContentProviderOperation> ops=new ArrayList<>();    int rawContactRefIms=ops.size();    ops.add(ContentProviderOperation.newInsert(RawContacts.CONTENT_URI).withValue(RawContacts.AGGREGATION_MODE,RawContacts.AGGREGATION_MODE_SUSPENDED).withValue(RawContacts.ACCOUNT_TYPE,RcsAccountManager.ACCOUNT_MANAGER_TYPE).withValue(RawContacts.ACCOUNT_NAME,mContext.getString(R.string.rcs_core_account_username)).build());    ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI).withValueBackReference(Data.RAW_CONTACT_ID,rawContactRefIms).withValue(Data.MIMETYPE,MIMETYPE_NUMBER).withValue(Data.DATA1,contactNumber).build());    Capabilities capabilities=info.getCapabilities();    if (capabilities.isFileTransferMsrpSupported()) {      ops.add(createMimeTypeForContact(rawContactRefIms,contact,MIMETYPE_CAPABILITY_FILE_TRANSFER));    }    if (capabilities.isImageSharingSupported()) {      ops.add(createMimeTypeForContact(rawContactRefIms,contact,MIMETYPE_CAPABILITY_IMAGE_SHARE));    }    if (capabilities.isImSessionSupported()) {      ops.add(createMimeTypeForContact(rawContactRefIms,contact,MIMETYPE_CAPABILITY_IM_SESSION));    }    if (capabilities.isVideoSharingSupported()) {      ops.add(createMimeTypeForContact(rawContactRefIms,contact,MIMETYPE_CAPABILITY_VIDEO_SHARE));    }    if (capabilities.isIPVoiceCallSupported()) {      ops.add(createMimeTypeForContact(rawContactRefIms,contact,MIMETYPE_CAPABILITY_IP_VOICE_CALL));    }    if (capabilities.isIPVideoCallSupported()) {      ops.add(createMimeTypeForContact(rawContactRefIms,contact,MIMETYPE_CAPABILITY_IP_VIDEO_CALL));    }    if (capabilities.isGeolocationPushSupported()) {      ops.add(createMimeTypeForContact(rawContactRefIms,contact,MIMETYPE_CAPABILITY_GEOLOCATION_PUSH));    }    Set<String> exts=info.getCapabilities().getSupportedExtensions();    if (exts.size() > 0) {      ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI).withValueBackReference(Data.RAW_CONTACT_ID,rawContactRefIms).withValue(Data.MIMETYPE,MIMETYPE_CAPABILITY_EXTENSIONS).withValue(Data.DATA1,contactNumber).withValue(Data.DATA2,ServiceExtensionManager.getExtensions(exts)).withValue(Data.DATA3,getMimeTypeDescriptionDetails(MIMETYPE_CAPABILITY_EXTENSIONS)).build());    }    ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI).withValueBackReference(Data.RAW_CONTACT_ID,rawContactRefIms).withValue(Data.MIMETYPE,MIMETYPE_REGISTRATION_STATE).withValue(Data.DATA1,contactNumber).withValue(Data.DATA2,info.getRegistrationState().toInt()).build());    ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI).withValueBackReference(Data.RAW_CONTACT_ID,rawContactRefIms).withValue(Data.MIMETYPE,MIMETYPE_BLOCKING_STATE).withValue(Data.DATA1,contactNumber).withValue(Data.DATA2,info.getBlockingState().toInt()).build());    ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI).withValueBackReference(Data.RAW_CONTACT_ID,rawContactRefIms).withValue(Data.MIMETYPE,MIMETYPE_BLOCKING_TIMESTAMP).withValue(Data.DATA1,contactNumber).withValue(Data.DATA2,info.getBlockingTimestamp()).build());    long rcsGroupId=getRcsGroupIdFromContactsContractGroups();    if (INVALID_ID != rcsGroupId) {      ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI).withValueBackReference(Data.RAW_CONTACT_ID,rawContactRefIms).withValue(Data.MIMETYPE,GroupMembership.CONTENT_ITEM_TYPE).withValue(GroupMembership.GROUP_ROW_ID,rcsGroupId).build());    }    ContentProviderResult[] results=mContentResolver.applyBatch(ContactsContract.AUTHORITY,ops);    long rcsRawContactId=ContentUris.parseId(results[rawContactRefIms].uri);    ops.clear();    ops.add(ContentProviderOperation.newUpdate(ContactsContract.AggregationExceptions.CONTENT_URI).withValue(AggregationExceptions.TYPE,AggregationExceptions.TYPE_KEEP_TOGETHER).withValue(AggregationExceptions.RAW_CONTACT_ID1,rcsRawContactId).withValue(AggregationExceptions.RAW_CONTACT_ID2,rawContactId).build());    mContentResolver.applyBatch(ContactsContract.AUTHORITY,ops);    ContentValues values=new ContentValues();    values.put(AggregationData.KEY_RAW_CONTACT_ID,rawContactId);    values.put(AggregationData.KEY_RCS_RAW_CONTACT_ID,rcsRawContactId);    values.put(AggregationData.KEY_RCS_NUMBER,contactNumber);    mLocalContentResolver.insert(AggregationData.CONTENT_URI,values);    return rcsRawContactId;  } catch (  RemoteException|OperationApplicationException e) {    throw new ContactManagerException("Unable to apply batch updates for contact :" + contact,e);  }}  }
class C{  public boolean canPermitPaymentType(String type){  for (  OrganizationRefToPaymentType ref : getPaymentTypes(false,OrganizationRoleType.SUPPLIER,OrganizationRoleType.PLATFORM_OPERATOR.name())) {    if (ref.getPaymentType().getPaymentTypeId().equals(type)) {      return true;    }  }  return false;}  }
class C{  void decodeMetaData() throws IOException {  final int upto=(int)ord % INTERVAL;  final int oldBlockOrd=metaBlockOrd;  metaBlockOrd=(int)ord / INTERVAL;  if (metaBlockOrd != oldBlockOrd) {    refillMetadata();  }  metaBytesReader.setPosition(bytesStart[upto]);  postingsReader.decodeTerm(longs[upto],metaBytesReader,fieldInfo,state,true);}  }
class C{  public void waitForOutput(String... string) throws InterruptedException {  int count=0;  while (true) {    List<String> missing=Lists.newArrayList();    String out=output();    boolean flag=true;    for (    String s : string) {      if (!out.contains(s)) {        flag=false;        missing.add(s);      }    }    if (flag) {      break;    }    if (count > 10) {      Assert.fail("Strings: <--\n" + StringUtil.join(missing,"\n---\n") + "-->"+ "are not present in output.\n"+ output());    }    Thread.sleep(2000);    count++;  }}  }
class C{  public void addAnnotation(Class<?> ann,String type) throws ObjectStoreConfigException {  if (ann.getDeclaredMethods().length != 1)   throw new ObjectStoreConfigException("Annotation class must have exactly one method: " + ann);  addAnnotation(ann.getDeclaredMethods()[0],type);}  }
class C{  public SPKIData itemSPKIData(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_SPKIDATA,i);  if (e != null) {    return new SPKIData(e,this.baseURI);  }  return null;}  }
class C{  public String addDeprecatedAccession(String ac) throws IllegalArgumentException {  if (ac == null) {    throw new IllegalArgumentException("'accession' must not be null");  }  deprecatedAccessions.add(ac);  return ac;}  }
class C{  private void parseMenu(XmlPullParser parser,AttributeSet attrs,Menu menu) throws XmlPullParserException, IOException {  MenuState menuState=new MenuState(menu);  int eventType=parser.getEventType();  String tagName;  boolean lookingForEndOfUnknownTag=false;  String unknownTagName=null;  do {    if (eventType == XmlPullParser.START_TAG) {      tagName=parser.getName();      if (tagName.equals(XML_MENU)) {        eventType=parser.next();        break;      }      throw new RuntimeException("Expecting menu, got " + tagName);    }    eventType=parser.next();  } while (eventType != XmlPullParser.END_DOCUMENT);  boolean reachedEndOfMenu=false;  while (!reachedEndOfMenu) {switch (eventType) {case XmlPullParser.START_TAG:      if (lookingForEndOfUnknownTag) {        break;      }    tagName=parser.getName();  if (tagName.equals(XML_GROUP)) {    menuState.readGroup(attrs);  } else   if (tagName.equals(XML_ITEM)) {    menuState.readItem(attrs);  } else   if (tagName.equals(XML_MENU)) {    SubMenu subMenu=menuState.addSubMenuItem();    parseMenu(parser,attrs,subMenu);  } else {    lookingForEndOfUnknownTag=true;    unknownTagName=tagName;  }break;case XmlPullParser.END_TAG:tagName=parser.getName();if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {lookingForEndOfUnknownTag=false;unknownTagName=null;} else if (tagName.equals(XML_GROUP)) {menuState.resetGroup();} else if (tagName.equals(XML_ITEM)) {if (!menuState.hasAddedItem()) {if (menuState.itemActionProvider != null && menuState.itemActionProvider.hasSubMenu()) {  menuState.addSubMenuItem();} else {  menuState.addItem();}}} else if (tagName.equals(XML_MENU)) {reachedEndOfMenu=true;}break;case XmlPullParser.END_DOCUMENT:throw new RuntimeException("Unexpected end of document");}eventType=parser.next();}}  }
class C{  @SuppressWarnings("unchecked") public void addResultSet(Object value){  if (value instanceof List) {    resultSets.add((List<Object[]>)value);  } else {    final List<Object[]> list=new ArrayList<Object[]>();    if (value instanceof Object[]) {      list.add((Object[])value);    } else {      list.add(new Object[]{value});    }    resultSets.add(list);  }}  }
class C{  public boolean isImageYCCK(){  return hasYCCKimages;}  }
class C{  public void insertNumberOfSongsInGenre(String genre,int songCount){  ContentValues values=new ContentValues();  values.put(DBAccessHelper.GENRE_SONG_COUNT,songCount);  String where=DBAccessHelper.SONG_GENRE + "=" + "'"+ genre+ "'";  getDatabase().update(MUSIC_LIBRARY_TABLE,values,where,null);}  }
class C{  public boolean isString(){  if (m_dataType.equals(X_AD_ImpFormat_Row.DATATYPE_Constant))   return m_constantIsString;  return m_dataType.equals(X_AD_ImpFormat_Row.DATATYPE_String);}  }
class C{  public void add(int value){  if (size >= data.length) {    ensureCapacity(size + size);  }  data[size++]=value;}  }
class C{  protected String defaultClustererString(){  return SimpleKMeans.class.getName();}  }
class C{  public UnaryExpression(int pos,int len){  super(pos,len);}  }
class C{  static FileChannel newFileChannel(UnixPath path,Set<? extends OpenOption> options,int mode) throws UnixException {  return newFileChannel(-1,path,null,options,mode);}  }
class C{  public void releaseSurface(EGLSurface eglSurface){  EGL14.eglDestroySurface(mEGLDisplay,eglSurface);}  }
class C{  public TextEditor replaceAll(Pattern pattern,Replacement replacement){  Matcher m=pattern.matcher(text);  int lastIndex=0;  StringBuffer sb=new StringBuffer();  while (m.find()) {    sb.append(text.subSequence(lastIndex,m.start()));    sb.append(replacement.replacement(m));    lastIndex=m.end();  }  sb.append(text.subSequence(lastIndex,text.length()));  text=sb;  return this;}  }
class C{  public void installUI(JComponent c){  if (!(c instanceof RTextArea)) {    throw new Error("RTextAreaUI needs an instance of RTextArea!");  }  super.installUI(c);}  }
class C{  public OptionSet addLocationQuery(String argument){  if (argument == null)   throw new NullPointerException("Location-Query option must not be null");  if (argument.getBytes(CoAP.UTF8_CHARSET).length > 255)   throw new IllegalArgumentException("Location-Query option must be smaller or euqal to 255 bytes (UTF-8 encoded): " + argument);  getLocationQuery().add(argument);  return this;}  }
class C{  public static void trace(byte level,String s){  trace(level,s,null);}  }
class C{  public byte[] toBytes(){  return cipherSuiteCode;}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  public void printStackTrace(PrintWriter s){  if (!isJDK14OrAbove && causeOnJDK13OrBelow != null) {    printStackTrace0(s);  } else {    super.printStackTrace(s);  }}  }
class C{  public static ItemAspectContainer fromItem(ItemStack stack,@Nullable AspectManager manager){  ItemAspectContainer container=new ItemAspectContainer(manager,stack);  List<Aspect> staticAspects=manager != null ? manager.getStaticAspects(AspectManager.getAspectItem(stack)) : null;  container.load(stack.getTagCompound(),staticAspects);  return container;}  }
class C{  public boolean isDocOrdered(){  return m_exprObj.isDocOrdered();}  }
class C{  private void needNewBuffer(int newSize){  int delta=newSize - size;  int newBufferSize=Math.max(minChunkLen,delta);  currentBufferIndex++;  currentBuffer=new boolean[newBufferSize];  offset=0;  if (currentBufferIndex >= buffers.length) {    int newLen=buffers.length << 1;    boolean[][] newBuffers=new boolean[newLen][];    System.arraycopy(buffers,0,newBuffers,0,buffers.length);    buffers=newBuffers;  }  buffers[currentBufferIndex]=currentBuffer;  buffersCount++;}  }
class C{  public int hashCode(){  List<A> l=this;  int h=0;  while (l.tail != null) {    h=h * 41 + (head != null ? head.hashCode() : 0);    l=l.tail;  }  return h;}  }
class C{  public Geronimo1xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.LOGGING,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(ServletPropertySet.USERS,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(GeronimoPropertySet.GERONIMO_CONSOLE_LOGLEVEL,Boolean.TRUE);  this.propertySupportMap.put(GeronimoPropertySet.GERONIMO_FILE_LOGLEVEL,Boolean.TRUE);  this.propertySupportMap.put(GeronimoPropertySet.GERONIMO_SERVLET_CONTAINER_ID,Boolean.TRUE);  this.propertySupportMap.put(GeronimoPropertySet.GERONIMO_USERS,Boolean.TRUE);}  }
class C{  public QName(String localName,boolean validate){  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));  if (validate) {    if (!XML11Char.isXML11ValidNCName(localName)) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  _namespaceURI=null;  _localName=localName;  m_hashCode=toString().hashCode();}  }
class C{  public MiniSolrCloudCluster(int numServers,String hostContext,Path baseDir,String solrXml,SortedMap<ServletHolder,String> extraServlets,SortedMap<Class<? extends Filter>,String> extraRequestFilters) throws Exception {  this(numServers,hostContext,baseDir,solrXml,extraServlets,extraRequestFilters,null);}  }
class C{  public VNXeCommandJob modifyShareForSnapshot(String shareId,NfsShareModifyForShareParam param){  StringBuilder urlBuilder=new StringBuilder(URL_NFS);  urlBuilder.append(shareId);  urlBuilder.append(URL_MODIFY);  _url=urlBuilder.toString();  return postRequestAsync(param);}  }
class C{  public BasicAttributes(String attrID,Object val){  this();  this.put(new BasicAttribute(attrID,val));}  }
class C{  protected void sequence_BreakStatement(ISerializationContext context,BreakStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static MosaicId createMosaicId(final int id){  return createMosaicId(new NamespaceId(String.format("id%d",id)),id);}  }
class C{  public List<NamedRelatedResourceRep> listByAutoTieringPolicy(URI autoTierPolicyId){  StorageTierList response=client.get(StorageTierList.class,PathConstants.STORAGE_TIER_BY_AUTO_TIERING_POLICY_URL,autoTierPolicyId);  return defaultList(response.getStorageTiers());}  }
class C{  public int transform(CtClass clazz,int pos,CodeIterator iterator,ConstPool cp){  int c=iterator.byteAt(pos);  if (c == GETFIELD || c == GETSTATIC || c == PUTFIELD || c == PUTSTATIC) {    int index=iterator.u16bitAt(pos + 1);    String typedesc=TransformReadField.isField(clazz.getClassPool(),cp,fieldClass,fieldname,isPrivate,index);    if (typedesc != null) {      if (newIndex == 0) {        int nt=cp.addNameAndTypeInfo(newFieldname,typedesc);        newIndex=cp.addFieldrefInfo(cp.addClassInfo(newClassname),nt);        constPool=cp;      }      iterator.write16bit(newIndex,pos + 1);    }  }  return pos;}  }
class C{  public static CounterNode newTree(){  return new CounterNode(ImmutableList.<String>of(),null);}  }
class C{  static boolean _loadUnzipSo(String libName,int version,IWXUserTrackAdapter utAdapter){  boolean initSuc=false;  try {    if (isExist(libName,version)) {      System.load(_targetSoFile(libName,version));      commit(utAdapter,"2000","Load file extract from apk successfully.");    }    initSuc=true;  } catch (  Throwable e) {    commit(utAdapter,WXErrorCode.WX_ERR_COPY_FROM_APK.getErrorCode(),WXErrorCode.WX_ERR_COPY_FROM_APK.getErrorMsg() + ":" + e.getMessage());    initSuc=false;    WXLogUtils.e("",e);  }  return initSuc;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() instanceof JButton) {    String cmd=e.getActionCommand();    if (cmd != null && cmd.length() > 0)     handleInput(cmd.charAt(0));  } else   if (e.getSource() == curTo) {    KeyNamePair p=(KeyNamePair)curFrom.getSelectedItem();    int curFromID=p.getKey();    p=(KeyNamePair)curTo.getSelectedItem();    int curToID=p.getKey();    int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());    int AD_Org_ID=Env.getAD_Org_ID(Env.getCtx());    m_number=MConversionRate.convert(Env.getCtx(),evaluate(),curFromID,curToID,AD_Client_ID,AD_Org_ID);    m_display=m_format.format(m_number);    display.setText(m_display);    curFrom.setSelectedItem(p);  }}  }
class C{  public DoubleMatrix2D adjMatFromMGM(){  DoubleMatrix2D outMat=DoubleFactory2D.dense.make(p + q,p + q);  outMat.viewPart(0,0,p,p).assign(params.beta.copy().assign(alg.transpose(params.beta),Functions.plus));  for (int i=0; i < p; i++) {    for (int j=0; j < q; j++) {      double val=norm2(params.theta.viewColumn(i).viewPart(lcumsum[j],l[j]));      outMat.set(i,p + j,val);      outMat.set(p + j,i,val);    }  }  for (int i=0; i < q; i++) {    for (int j=i + 1; j < q; j++) {      double val=alg.normF(params.phi.viewPart(lcumsum[i],lcumsum[j],l[i],l[j]));      outMat.set(p + i,p + j,val);      outMat.set(p + j,p + i,val);    }  }  if (initVariables != null) {    int[] varMap=new int[p + q];    for (int i=0; i < p + q; i++) {      varMap[i]=variables.indexOf(initVariables.get(i));    }    outMat=outMat.viewSelection(varMap,varMap);  }  return outMat;}  }
class C{  public static void disableLogging(){  DISABLED=true;}  }
class C{  public void ring(){  Log.d(TAG,"==> ring() called...");  AudioManager audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);  vibrator.cancel();  int ringerMode=audioManager.getRingerMode();  if (ringerMode == AudioManager.RINGER_MODE_SILENT) {    Log.d(TAG,"skipping ring and vibrate because profile is Silent");  } else   if (ringerMode == AudioManager.RINGER_MODE_VIBRATE || ringerMode == AudioManager.RINGER_MODE_NORMAL) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      vibrator.vibrate(VIBRATE_PATTERN,0,VIBRATE_ATTRIBUTES);    } else {      vibrator.vibrate(VIBRATE_PATTERN,0);    }    audioManager.setMode(AudioManager.MODE_RINGTONE);  }}  }
class C{  public boolean isScanning(){  return networkScanner != null && !networkScanner.isCancelled();}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    if (!ExamplesUtils.checkMinTopologySize(ignite.cluster(),2))     return;    System.out.println();    System.out.println("Compute example started.");    IgniteCluster cluster=ignite.cluster();    sayHello(ignite,cluster);    sayHello(ignite,cluster.forRemotes());    ClusterGroup randomNode=cluster.forRemotes().forRandom();    sayHello(ignite,randomNode);    sayHello(ignite,cluster.forHost(randomNode.node()));    sayHello(ignite,cluster.forPredicate(null));  } }  }
class C{  protected AnimatableNumberOrPercentageValue(AnimationTarget target){  super(target);}  }
class C{  public void log(int action){  try {    if (conf != null && data != null) {      if (data.actions.size() < conf.getMaxEntries()) {        data.actions.add(new UXAction(action,System.currentTimeMillis()));      }      if (isReadyToSend()) {        sendData();      }    }  } catch (  Throwable e) {  }}  }
class C{  public TreeNode parseXMLDocument(String uri,InputStream is,boolean validate) throws JasperException {  return parseXMLDocument(uri,new InputSource(is),validate);}  }
class C{  public int read() throws IOException {  int ch1=is.read();  int ch2=is.read();  if (ch2 < 0)   return -1;  return (ch1 << 8) + ch2;}  }
class C{  public void writeHouseholds(String outputfolder){  if (sc.getHouseholds() == null || sc.getHouseholds().getHouseholdAttributes() == null) {    LOG.error("Either no households or household attributes to write.");  } else {    LOG.info("Writing households to file.");    HouseholdsWriterV10 hw=new HouseholdsWriterV10(sc.getHouseholds());    hw.setPrettyPrint(true);    hw.writeFile(outputfolder + "Households.xml");    LOG.info("Writing household attributes to file.");    ObjectAttributesXmlWriter oaw=new ObjectAttributesXmlWriter(sc.getHouseholds().getHouseholdAttributes());    oaw.setPrettyPrint(true);    oaw.writeFile(outputfolder + "HouseholdAttributes.xml");  }}  }
class C{  public Blade addConfig(Class<? extends BaseConfig> config){  configLoader.addConfig(config);  return this;}  }
class C{  void writeChunks0(IgfsEx igfs0,IgfsOutputStream ios,int fileIdx) throws IOException {  try {    byte[] data=createChunk(fileSize,fileIdx);    writeFileChunks(ios,data);  }  finally {    ios.flush();    U.closeQuiet(ios);    awaitFileClose(igfs0,filePath(fileIdx));  }}  }
class C{  public static int toInt(ByteBuffer buf,int offset){  if (littleEndian) {    return Integer.reverseBytes(getAsInt(buf,offset));  }  return getAsInt(buf,offset);}  }
class C{  public ByteDataBox(int rows,int cols){  this.data=new byte[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      data[i][j]=-99;    }  }}  }
class C{  @Override public void onErrorResponse(VolleyError error){  showToast(error.getMessage());  Log.d("GsonRequest",error.getMessage());}  }
class C{  private static void fillAdvancingFront(DTSweepContext tcx,AdvancingFrontNode n){  AdvancingFrontNode node;  double angle;  node=n.next;  while (node.hasNext()) {    if (isLargeHole(node)) {      break;    }    fill(tcx,node);    node=node.next;  }  node=n.prev;  while (node.hasPrevious()) {    if (isLargeHole(node)) {      break;    }    fill(tcx,node);    node=node.prev;  }  if (n.hasNext() && n.next.hasNext()) {    angle=basinAngle(n);    if (angle < PI_3div4) {      fillBasin(tcx,n);    }  }}  }
class C{  public JobExecution runFlow(Flow flow,int batchSize,int threadCount,JobStatusListener statusListener){  JobExecution result=null;  try {    ConfigurableApplicationContext ctx=buildApplicationContext(flow,statusListener);    JobParameters params=buildJobParameters(flow,batchSize,threadCount);    JobLauncher launcher=ctx.getBean(JobLauncher.class);    Job job=ctx.getBean(Job.class);    result=launcher.run(job,params);  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.EXPRESSION__LEFT:    return basicSetLeft(null,msgs);case GamlPackage.EXPRESSION__RIGHT:  return basicSetRight(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void parseReferences(ArrayList<String> name){  String foreignTable=parseIdentifier();  Token token=scanToken();  ArrayList<String> foreignColumns=new ArrayList<String>();  if (token == Token.LPAREN) {    _token=token;    foreignColumns=parseColumnNames();  } else {    _token=token;  }}  }
class C{  public void usedSwitch(RPEntity user,NineSwitchesGameSwitch gameSwitch){  if (playerName == null) {    user.sendPrivateText(npc.getName() + ": " + user.getName()+ ", please talk to me to start a game.");    return;  }  if (!user.getName().equals(playerName)) {    user.sendPrivateText(npc.getName() + ": Hey " + user.getName()+ ", "+ playerName+ " is currently playing. Please wait a little.");    return;  }  switchGameSwitch(gameSwitch);  boolean completed=checkBoard();  if (completed) {    npc.say("Congratulations, " + user.getName() + " you won! Here take this balloon.");    Outfit balloonOutfit;    balloonOutfit=new Outfit(1,null,null,null,null);    user.setOutfit(balloonOutfit);    user.put("outfit_colors","detail",Rand.rand(balloonColors));    playerName=null;    TurnNotifier.get().dontNotify(this);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW:    return ((InternalEList<?>)getOwnedMembersRaw()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected void buildResponse(final int status,final String mimeType,final String content,final NV... headers) throws IOException {  if (status < 200 || status >= 300)   throw new AssertionError("This method must not be used for non-success outcomes");  if (log.isInfoEnabled())   log.info("task=" + this + ", status="+ status+ ", mimeType="+ mimeType+ ", content=["+ content+ "]");  resp.setStatus(status);  resp.setContentType(mimeType);  for (  NV nv : headers) {    resp.setHeader(nv.getName(),nv.getValue());  }  final Writer w=resp.getWriter();  if (content != null)   w.write(content);}  }
class C{  public void testCase23(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=1;  int bSign=1;  byte rBytes[]={12,-21,73,56,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.mod(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void add(final double[] datum){  add(datum,1.0);}  }
class C{  public void readRawBinary(BinaryRawReader reader) throws BinaryObjectException {  path=reader.readString();}  }
class C{  public boolean hasViewability(){  return hasExtension(Viewability.class);}  }
class C{  public NodeTest(int whatToShow,String namespace,String name){  initNodeTest(whatToShow,namespace,name);}  }
class C{  public boolean add(int val){  int index=insertionIndex(val);  if (index < 0) {    return false;  }  byte previousState=_states[index];  _set[index]=val;  _states[index]=FULL;  postInsertHook(previousState == FREE);  return true;}  }
class C{  public final void removeHelperTextId(@StringRes final int resourceId){  removeHelperText(getResources().getText(resourceId));}  }
class C{  public VerletParticle2D lock(){  isLocked=true;  return this;}  }
class C{  protected void sequence_IntersectionTypeExpressionOLD_TypeRefWithModifiers(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean isGPSProviderEnabled(LocationManager mLocationManager){  if (mLocationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {    return true;  }  return false;}  }
class C{  public static Collection<AddressType> all(){  return enums.all();}  }
class C{  protected void engineInit(Key key,SecureRandom random) throws InvalidKeyException {  try {    engineInit(key,null,random);  } catch (  InvalidAlgorithmParameterException e) {  }}  }
class C{  public static int size(JComboBox self){  return self.getItemCount();}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (getInt(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void write(IXMLElement xml,boolean prettyPrint,int indent) throws IOException {  this.write(xml,prettyPrint,indent,true);}  }
class C{  public JSONBuffer closeArray(){  if (stack.empty() || stack.peek() != Operand.ARRAY) {    throw new JSONException("Not in array context when closing.");  }  removeSeparator();  buffer.append("]");  stack.pop();  addSeparator();  return this;}  }
class C{  private static void saveNonNativeGraph(final JFrame parent,final ZyGraph graph){  final CSaveProgress progress=CGraphSaver.save(parent,graph);  while (!progress.isDone()) {    try {      Thread.sleep(100);    } catch (    final InterruptedException e) {      Thread.currentThread().interrupt();    }  }}  }
class C{  protected SolrInputDocument processAdd(final String chain,final SolrParams requestParams,final SolrInputDocument docIn) throws IOException {  SolrCore core=h.getCore();  UpdateRequestProcessorChain pc=core.getUpdateProcessingChain(chain);  assertNotNull("No Chain named: " + chain,pc);  SolrQueryResponse rsp=new SolrQueryResponse();  SolrQueryRequest req=new LocalSolrQueryRequest(core,requestParams);  try {    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));    AddUpdateCommand cmd=new AddUpdateCommand(req);    cmd.solrDoc=docIn;    UpdateRequestProcessor processor=pc.createProcessor(req,rsp);    if (null != processor) {      processor.processAdd(cmd);    }    return cmd.solrDoc;  }  finally {    SolrRequestInfo.clearRequestInfo();    req.close();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Object eval(String script,Bindings bindings) throws ScriptException {  ScriptContext ctxt=getScriptContext(bindings);  return eval(script,ctxt);}  }
class C{  public void handleUnparsablePacket(UnparsablePacket stanzaData) throws Exception {}  }
class C{  public static Sdk findAndroidSDK(){  Sdk[] allJDKs=ProjectJdkTable.getInstance().getAllJdks();  for (  Sdk sdk : allJDKs) {    if (sdk.getSdkType().getName().toLowerCase().contains("android")) {      return sdk;    }  }  return null;}  }
class C{  public DistributedRegionFunctionResultSender(DM dm,ResultCollector rc,Function function,final ServerToClientFunctionResultSender sender){  this.dm=dm;  this.isLocal=true;  this.rc=rc;  this.functionObject=function;  this.sender=sender;}  }
class C{  public Address allocateCode(RVMArray array,int numElements){  numObjects++;  BootImageWriter.logAllocation(array,array.getInstanceSize(numElements));  return ObjectModel.allocateCode(this,array,numElements);}  }
class C{  public static void relaxHostChecking(HttpURLConnection conn) throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {  if (conn instanceof HttpsURLConnection) {    HttpsURLConnection httpsConnection=(HttpsURLConnection)conn;    SSLSocketFactory factory=prepFactory(httpsConnection);    httpsConnection.setSSLSocketFactory(factory);    httpsConnection.setHostnameVerifier(TRUSTING_HOSTNAME_VERIFIER);  }}  }
class C{  @Override public boolean imageHasBeenScaled(){  return true;}  }
class C{  protected final void firePropertyChange(String propertyName,long oldValue,long newValue){  firePropertyChange(propertyName,Long.valueOf(oldValue),Long.valueOf(newValue));}  }
class C{  public static void delete(Path resourceToDelete) throws IOException {  delete(resourceToDelete,false);}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  this.selectionListeners.add(listener);}  }
class C{  public Path moveFileToTrash(Path file,Path trashDir) throws IOException {  return TestUtils.moveFileToTrash(file,trashDir);}  }
class C{  public static void openInIDE(File f,int lineNumber){  File nbProject=new File(loadedFile.getParentFile().getParentFile(),"nbproject");  File idea=new File(loadedFile.getParentFile().getParentFile(),".idea");  boolean isIdea=idea.exists();  if (!nbProject.exists() || isIdea) {    FileOutputStream fs=null;    try {      String userDir=System.getProperty("user.home");      File resEditorLoc=new File(userDir,".codenameone");      fs=new FileOutputStream(new File(resEditorLoc,"open.txt"));      fs.write((f.getAbsolutePath() + ":" + lineNumber).getBytes());      fs.close();    } catch (    IOException ex) {      ex.printStackTrace();    } finally {      try {        fs.close();      } catch (      IOException ex) {      }    }    if (isIdea) {      f.setLastModified(System.currentTimeMillis());    }    return;  }  String node=Preferences.userNodeForPackage(ResourceEditorView.class).get("netbeansInstall",null);  if (manualIDESettings != null) {    node=manualIDESettings;  } else {    if (node == null) {      if (!configureNetbeans()) {        return;      }      node=Preferences.userNodeForPackage(ResourceEditorView.class).get("netbeansInstall",null);    }  }  try {    String arg=f.getAbsolutePath();    if (lineNumber > -1) {      arg+=":" + lineNumber;    }    Runtime.getRuntime().exec(new String[]{node,"--open",arg});  } catch (  Exception err) {    err.printStackTrace();    JOptionPane.showMessageDialog(JFrame.getFrames()[0],"Error opening Netbeans: " + err,"Error",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  void onAdded(final RPObject object,final PerceptionToObject perceptionTobject){  if ("player".equals(object.getRPClass().getName())) {    if (StendhalClient.client.isUser(object)) {      perceptionTobject.register(object,new UserController());    }  }  perceptionTobject.register(object,LISTENER);}  }
class C{  public MNKProblem(int N,int K){  this(1,N,K);}  }
class C{  public static float acos(float fValue){  if (-1.0f < fValue) {    if (fValue < 1.0f) {      return (float)Math.acos(fValue);    }    return 0.0f;  }  return PI;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static _GetOption fromString(final String value) throws SOAPSerializationException {  return (_GetOption)Enumeration.fromString(value,_GetOption.VALUES_TO_INSTANCES);}  }
class C{  public XYItemKey(S seriesKey,int itemIndex){  ParamChecks.nullNotPermitted(seriesKey,"seriesKey");  this.seriesKey=seriesKey;  this.itemIndex=itemIndex;}  }
class C{  private int openingCharsToStrip(){  int newlineIndex=firstNewLineIndex();  if (newlineIndex == -1 && beginColumn != 1) {    return 0;  }  ++newlineIndex;  if (text.length > newlineIndex) {    if (newlineIndex > 0 && text[newlineIndex - 1] == '\r' && text[newlineIndex] == '\n') {      ++newlineIndex;    }  }  if (!StringUtil.isTrimmableToEmpty(text,0,newlineIndex)) {    return 0;  }  for (TemplateElement elem=this.prevTerminalNode(); elem != null && elem.endLine == this.beginLine; elem=elem.prevTerminalNode()) {    if (elem.heedsOpeningWhitespace()) {      return 0;    }  }  return newlineIndex;}  }
class C{  public void addTimeBoundsListener(TimeBoundsListener tbl){  if (!timeBoundsListeners.contains(tbl)) {    timeBoundsListeners.add(tbl);  }}  }
class C{  public void sendSipAck(SipDialogPath dialog) throws PayloadException, NetworkException {  mSipInterface.sendSipAck(dialog);}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View v=inflater.inflate(R.layout.fragment_pager_list,container,false);  return v;}  }
class C{  private boolean isFirstLaunch(){  return mLastUserAccount == null;}  }
class C{  public void defineReplicas(int[] otherReplicas,int globalCkpPeriod,int me){  int N=otherReplicas.length + 1;  ckpPeriod=globalCkpPeriod / N;  logLowerSize=ckpPeriod;  logUpperSize=(cid + 1) % ckpPeriod;  int oldestReplicaPosition=getOldest(otherReplicas,cid,globalCkpPeriod,me);  logLower=otherReplicas[oldestReplicaPosition];  checkpointReplica=otherReplicas[(oldestReplicaPosition + 1) % otherReplicas.length];  logUpper=otherReplicas[(oldestReplicaPosition + 2) % otherReplicas.length];}  }
class C{  public void replaceTemplate(ElemTemplate v,int i) throws TransformerException {  if (null == m_templates)   throw new ArrayIndexOutOfBoundsException();  replaceChild(v,(ElemTemplateElement)m_templates.elementAt(i));  m_templates.setElementAt(v,i);  v.setStylesheet(this);}  }
class C{  private synchronized void reloadTrackDataHub(){  if (trackDataHub != null) {    trackDataHub.reloadDataForListener(this);  }}  }
class C{  public synchronized DescriptorCache putIfAbsentAndGet(String accountName){  if (!cacheOfDescriptorCaches.containsKey(accountName)) {    DescriptorCache descriptorCache=new DescriptorCache(numberOfDescriptors);    cacheOfDescriptorCaches.put(accountName,descriptorCache);    return descriptorCache;  } else {    return cacheOfDescriptorCaches.get(accountName);  }}  }
class C{  public ObserveRequest(ContentFormat format,String path,Map<String,String> context){  this(format,new LwM2mPath(path),context);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.093 -0400",hash_original_method="A1CE19983A508BDA4D34C581257E8803",hash_generated_method="11CBF1B4B96363CD87494A7B7C60263A") public synchronized boolean disable(boolean saveSetting){  mContext.enforceCallingOrSelfPermission(BLUETOOTH_ADMIN_PERM,"Need BLUETOOTH_ADMIN permission");  int adapterState=getBluetoothStateInternal();switch (adapterState) {case BluetoothAdapter.STATE_OFF:    return true;case BluetoothAdapter.STATE_ON:  break;default :return false;}mBluetoothState.sendMessage(BluetoothAdapterStateMachine.USER_TURN_OFF,saveSetting);return true;}  }
class C{  public boolean isHtmlTag(){  return this.htmlTagIndex != -1;}  }
class C{  protected void fireArrow(ItemStack bow,World world,EntityLivingBase shooter,int charge){  if (!(shooter instanceof EntityPlayer))   return;  final EntityPlayer player=(EntityPlayer)shooter;  final boolean ammoRequired=isAmmoRequired(bow,player);  IItemHandler ammoSlot=findAmmoSlot(player,null);  charge=ForgeEventFactory.onArrowLoose(bow,world,player,charge,ammoSlot != null || !ammoRequired);  if (charge < 0)   return;  if (ammoSlot != null || !ammoRequired) {    if (ammoSlot == null) {      ammoSlot=new ItemStackHandler(new ItemStack[]{new ItemStack(Items.ARROW)});    }    final ItemStack ammo=ammoSlot.getStackInSlot(0);    final float arrowVelocity=getArrowVelocity(charge);    if (arrowVelocity >= 0.1) {      final boolean isInfinite=player.capabilities.isCreativeMode || ammo.getItem() instanceof ItemArrow && ((ItemArrow)ammo.getItem()).isInfinite(ammo,bow,player);      if (!world.isRemote) {        final ItemArrow itemArrow=(ItemArrow)(ammo.getItem() instanceof ItemArrow ? ammo.getItem() : Items.ARROW);        final EntityArrow entityArrow=itemArrow.createArrow(world,ammo,player);        entityArrow.setAim(player,player.rotationPitch,player.rotationYaw,0.0F,arrowVelocity * 3.0F,1.0F);        if (arrowVelocity == 1.0f) {          entityArrow.setIsCritical(true);        }        final int powerLevel=EnchantmentHelper.getEnchantmentLevel(Enchantments.POWER,bow);        if (powerLevel > 0) {          entityArrow.setDamage(entityArrow.getDamage() + (double)powerLevel * 0.5D + 0.5D);        }        final int punchLevel=EnchantmentHelper.getEnchantmentLevel(Enchantments.PUNCH,bow);        if (punchLevel > 0) {          entityArrow.setKnockbackStrength(punchLevel);        }        if (EnchantmentHelper.getEnchantmentLevel(Enchantments.FLAME,bow) > 0) {          entityArrow.setFire(100);        }        bow.damageItem(1,player);        if (isInfinite) {          entityArrow.pickupStatus=EntityArrow.PickupStatus.CREATIVE_ONLY;        }        world.spawnEntityInWorld(entityArrow);      }      world.playSound(null,player.posX,player.posY,player.posZ,SoundEvents.ENTITY_ARROW_SHOOT,SoundCategory.NEUTRAL,1.0F,1.0F / (itemRand.nextFloat() * 0.4F + 1.2F) + arrowVelocity * 0.5F);      if (!isInfinite && ammoSlot.extractItem(0,1,true) != null) {        ammoSlot.extractItem(0,1,false);      }      player.addStat(StatList.getObjectUseStats(this));    }  }}  }
class C{  private void persistContactsAndHosts(){  for (int i=1; i <= 14; ++i) {    persistActiveHost(String.format("ns%d.example.net",i));  }  persistActiveContact("jd1234");  persistActiveContact("sh8013");  clock.advanceOneMilli();}  }
class C{  public static final int equal(final ArrowBuf left,int lStart,int lEnd,final ArrowBuf right,int rStart,int rEnd){  if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {    left.checkBytes(lStart,lEnd);    right.checkBytes(rStart,rEnd);  }  return memEqual(left.memoryAddress(),lStart,lEnd,right.memoryAddress(),rStart,rEnd);}  }
class C{  public static Ethernet DhcpDiscoveryRequestEthernet(MACAddress hostMac){  List<DHCPOption> optionList=new ArrayList<DHCPOption>();  byte[] requestValue=new byte[4];  requestValue[0]=requestValue[1]=requestValue[2]=requestValue[3]=0;  DHCPOption requestOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_RequestedIP.getValue()).setLength((byte)4).setData(requestValue);  byte[] msgTypeValue=new byte[1];  msgTypeValue[0]=1;  DHCPOption msgTypeOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_MessageType.getValue()).setLength((byte)1).setData(msgTypeValue);  byte[] reqParamValue=new byte[4];  reqParamValue[0]=1;  reqParamValue[1]=3;  reqParamValue[2]=6;  reqParamValue[3]=42;  DHCPOption reqParamOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_RequestedParameters.getValue()).setLength((byte)4).setData(reqParamValue);  byte[] clientIdValue=new byte[7];  clientIdValue[0]=1;  System.arraycopy(hostMac.toBytes(),0,clientIdValue,1,6);  DHCPOption clientIdOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_ClientID.getValue()).setLength((byte)7).setData(clientIdValue);  DHCPOption endOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_END.getValue()).setLength((byte)0).setData(null);  optionList.add(requestOption);  optionList.add(msgTypeOption);  optionList.add(reqParamOption);  optionList.add(clientIdOption);  optionList.add(endOption);  Ethernet requestPacket=new Ethernet();  requestPacket.setSourceMACAddress(hostMac.toBytes()).setDestinationMACAddress(broadcastMac).setEtherType(Ethernet.TYPE_IPv4).setPayload(new IPv4().setVersion((byte)4).setDiffServ((byte)0).setIdentification((short)100).setFlags((byte)0).setFragmentOffset((short)0).setTtl((byte)250).setProtocol(IPv4.PROTOCOL_UDP).setChecksum((short)0).setSourceAddress(0).setDestinationAddress(broadcastIp).setPayload(new UDP().setSourcePort(UDP.DHCP_CLIENT_PORT).setDestinationPort(UDP.DHCP_SERVER_PORT).setChecksum((short)0).setPayload(new DHCP().setOpCode(DHCP.OPCODE_REQUEST).setHardwareType(DHCP.HWTYPE_ETHERNET).setHardwareAddressLength((byte)6).setHops((byte)0).setTransactionId(0x00003d1d).setSeconds((short)0).setFlags((short)0).setClientIPAddress(0).setYourIPAddress(0).setServerIPAddress(0).setGatewayIPAddress(0).setClientHardwareAddress(hostMac.toBytes()).setOptions(optionList))));  return requestPacket;}  }
class C{  public <T>Bound<T> ofRecordClass(Class<T> classToBind){  return new Bound<>(classToBind,rootElementName,baseOutputFilename);}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,null,null,null,null,null,features,attributes,prodCatalogId,null,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,skipInventoryChecks,skipProductChecks));}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success) {    insert_Accounting("C_Project_Acct","C_AcctSchema_Default",null);    insert_Tree(MTree_Base.TREETYPE_Project);  }  if (success && !newRecord && (is_ValueChanged("Value") || is_ValueChanged("Name")))   MAccount.updateValueDescription(getCtx(),"C_Project_ID=" + getC_Project_ID(),get_TrxName());  return success;}  }
class C{  public void annotationValue() throws IOException {  output.write('@');}  }
class C{  public Object removeFromVisualization(IVisualAgent agent){  return environment.remove(agent.getVisualizationObject());}  }
class C{  public boolean isCleanSession(){  return options.isCleanSession();}  }
class C{  private void handleAnalystRequest(AnalystClusterRequest clusterRequest,TaskStatistics ts){  long startTime=System.currentTimeMillis();  boolean isochrone=(clusterRequest.destinationPointsetId == null);  boolean singlePoint=(clusterRequest.outputLocation == null);  if (singlePoint) {    lastHighPriorityRequestProcessed=startTime;    if (!sideChannelOpen) {      openSideChannel();    }  }  ts.lon=clusterRequest.profileRequest.fromLon;  ts.lat=clusterRequest.profileRequest.fromLat;  ts.pointsetId=clusterRequest.destinationPointsetId;  ts.single=singlePoint;  StreetMode mode;  if (clusterRequest.profileRequest.accessModes.contains(LegMode.CAR))   mode=StreetMode.CAR; else   if (clusterRequest.profileRequest.accessModes.contains(LegMode.BICYCLE))   mode=StreetMode.BICYCLE; else   mode=StreetMode.WALK;  TransportNetwork transportNetwork=transportNetworkCache.getNetworkForScenario(clusterRequest.graphId,clusterRequest.profileRequest);  LOG.info("Maximum number of rides: {}",clusterRequest.profileRequest.maxRides);  LOG.info("Maximum trip duration: {}",clusterRequest.profileRequest.maxTripDurationMinutes);  final PointSet targets;  if (isochrone) {    targets=transportNetwork.getGridPointSet();  } else {    targets=pointSetDatastore.get(clusterRequest.destinationPointsetId);  }  final LinkedPointSet linkedTargets=targets.link(transportNetwork.streetLayer,mode);  ResultEnvelope envelope=new ResultEnvelope();  if (clusterRequest.profileRequest.maxFare < 0) {    RepeatedRaptorProfileRouter router=new RepeatedRaptorProfileRouter(transportNetwork,clusterRequest,linkedTargets,ts);    try {      envelope=router.route();      ts.success=true;    } catch (    Exception ex) {      LOG.error("Error occurred in profile request",ex);      ts.success=false;    }  } else {    McRaptorSuboptimalPathProfileRouter router=new McRaptorSuboptimalPathProfileRouter(transportNetwork,clusterRequest,linkedTargets);    try {      envelope=router.routeEnvelope();      ts.success=true;    } catch (    Exception ex) {      LOG.error("Error occurred in profile request",ex);      ts.success=false;    }  }  envelope.id=clusterRequest.id;  envelope.jobId=clusterRequest.jobId;  envelope.destinationPointsetId=clusterRequest.destinationPointsetId;  if (clusterRequest.outputLocation == null) {    try {      PipedInputStream is=new PipedInputStream();      PipedOutputStream pos=new PipedOutputStream(is);      finishPriorityTask(clusterRequest,is);      final ResultEnvelope finalEnvelope=envelope;      JsonUtilities.objectMapper.writeValue(pos,finalEnvelope);      pos.close();    } catch (    IOException e) {      LOG.info("Error writing single-point result to broker",e);    }  } else {    saveBatchTaskResults(clusterRequest,envelope);  }}  }
class C{  public WikipediaInfo(Wikipedia pWiki) throws WikiApiException {  this.wiki=pWiki;  new WikipediaInfo(this.wiki.getPages());}  }
class C{  public static void writeFile(String path,String text,boolean append,boolean asRoot){  if (asRoot) {    new RootFile(path).write(text,append);    return;  }  FileWriter writer=null;  try {    writer=new FileWriter(path,append);    writer.write(text);    writer.flush();  } catch (  IOException e) {    Log.e(TAG,"Failed to write " + path);  } finally {    try {      if (writer != null)       writer.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.ANNOTATION__PROPERTIES:    return properties != null && !properties.isEmpty();case TypesPackage.ANNOTATION__TARGETS:  return targets != null && !targets.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private char readEscapeCharacter() throws JSONException {  char escaped=in.charAt(pos++);switch (escaped) {case 'u':    if (pos + 4 > in.length()) {      throw syntaxError("Unterminated escape sequence");    }  String hex=in.substring(pos,pos + 4);pos+=4;return (char)Integer.parseInt(hex,16);case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  private void initWidget(){  this.handler=new SafeHandler<>(this);  this.container=(CoordinatorLayout)findViewById(R.id.container_main_container);  this.statusBar=(StatusBarView)findViewById(R.id.container_main_statusBar);  this.initStatusBarColor(null);  Toolbar toolbar=(Toolbar)findViewById(R.id.container_main_toolbar);  toolbar.setTitle("");  setSupportActionBar(toolbar);  DrawerLayout drawer=(DrawerLayout)findViewById(R.id.activity_drawerLayout);  ActionBarDrawerToggle toggle=new ActionBarDrawerToggle(this,drawer,toolbar,R.string.action_open_drawer,R.string.action_close_drawer);  assert drawer != null;  drawer.addDrawerListener(toggle);  toggle.syncState();  NavigationView navigationView=(NavigationView)findViewById(R.id.activity_nav);  assert navigationView != null;  navigationView.setNavigationItemSelectedListener(this);  View navHeader=navigationView.getHeaderView(0);  ImageView headerIcon=(ImageView)navHeader.findViewById(R.id.container_nav_header_icon);  Glide.with(this).load(R.drawable.ic_launcher).diskCacheStrategy(DiskCacheStrategy.NONE).into(headerIcon);  this.navBackground=(ImageView)navHeader.findViewById(R.id.container_nav_header_background);  this.initNavHeaderBackground();}  }
class C{  public void testConstructor3(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque((Collection)null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ChartEntity)) {    return false;  }  ChartEntity that=(ChartEntity)obj;  if (!this.area.equals(that.area)) {    return false;  }  if (!ObjectUtilities.equal(this.toolTipText,that.toolTipText)) {    return false;  }  if (!ObjectUtilities.equal(this.urlText,that.urlText)) {    return false;  }  return true;}  }
class C{  public static String deploymentActionInProgressFeedback(final String id) throws JSONException {  return deploymentActionFeedback(id,"proceeding");}  }
class C{  protected double prepareWeights(ExampleSet exampleSet){  Attribute weightAttr=exampleSet.getAttributes().getWeight();  double totalWeight=0;  if (weightAttr == null) {    this.oldWeights=null;    weightAttr=Tools.createWeightAttribute(exampleSet);    Iterator<Example> exRead=exampleSet.iterator();    while (exRead.hasNext()) {      exRead.next().setValue(weightAttr,1);      totalWeight++;    }  } else {    this.oldWeights=new double[exampleSet.size()];    Iterator<Example> reader=exampleSet.iterator();    for (int i=0; (reader.hasNext() && i < oldWeights.length); i++) {      this.oldWeights[i]=reader.next().getWeight();      totalWeight+=this.oldWeights[i];    }  }  return totalWeight;}  }
class C{  public void play(int resourceId,float volume){  Integer soundId=mResourceToSoundId.get(resourceId);  if (soundId == null) {    throw new IllegalStateException("Sound not loaded. Must call #loadSound first.");  }  mSoundPool.play(soundId,volume,volume,0,0,1);}  }
class C{  public void testActuallyShuffles() throws IOException {  Path dir=createTempDir();  for (int i=0; i < 100; i++) {    Files.createFile(dir.resolve("file" + i));  }  List<String> expected=new ArrayList<>();  try (DirectoryStream<Path> stream=Files.newDirectoryStream(dir)){    for (    Path path : stream) {      expected.add(path.getFileName().toString());    }  }   for (int i=0; i < 10000; i++) {    Path wrapped=wrap(dir,random().nextLong());    List<String> seen=new ArrayList<>();    try (DirectoryStream<Path> stream=Files.newDirectoryStream(wrapped)){      for (      Path path : stream) {        seen.add(path.getFileName().toString());      }    }     assertEquals(new HashSet<>(expected),new HashSet<>(seen));    if (!expected.equals(seen)) {      return;    }  }  fail("ordering never changed");}  }
class C{  public boolean withReplication(){  return this == REPLICATE || this == PERSISTENT_REPLICATE;}  }
class C{  public void Subtract(HeliocentricCoordinates other){  this.x-=other.x;  this.y-=other.y;  this.z-=other.z;}  }
class C{  public static Vector<String> find(Class<?> cls,String pkgname){  Vector<String> result;  int i;  Class<?> clsNew;  result=getCache(cls,pkgname);  if (result == null) {    if (VERBOSE) {      System.out.println("Searching for '" + cls.getName() + "' in '"+ pkgname+ "':");    }    result=new Vector<String>();    if (m_ClassCache.getClassnames(pkgname) != null) {      result.addAll(m_ClassCache.getClassnames(pkgname));    }    i=0;    while (i < result.size()) {      try {        clsNew=Class.forName(result.get(i));        if (Modifier.isAbstract(clsNew.getModifiers())) {          m_ClassCache.remove(result.get(i));          result.remove(i);        } else         if ((cls.isInterface()) && (!hasInterface(cls,clsNew))) {          result.remove(i);        } else         if ((!cls.isInterface()) && (!isSubclass(cls,clsNew))) {          result.remove(i);        } else {          i++;        }      } catch (      Exception e) {        System.out.println("Accessing class '" + result.get(i) + "' resulted in error:");        e.printStackTrace();      }    }    Collections.sort(result,new StringCompare());    addCache(cls,pkgname,result);  }  return result;}  }
class C{  public void success(JSONObject message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  public boolean isNull(int row,int col){  if (this.isNull != null) {    return this.isNull[row * this.nFields + col];  } else {    return false;  }}  }
class C{  public static float[] toPrimitiveFloatArray(List<? extends Number> array){  return toPrimitiveFloatArray(array,NUMBERLISTADAPTER);}  }
class C{  public boolean hasTransaction(){  return transactionID != null;}  }
class C{  public void clear(){  super.clear();  _charBuffer.setLength(0);}  }
class C{  public void testSameClassLoaderIsolatedMode() throws Exception {  processTestSameRemoteClassLoader(DeploymentMode.ISOLATED);}  }
class C{  private static boolean less(Comparable v,Comparable w){  return v.compareTo(w) < 0;}  }
class C{  public void removeActiveUser(){synchronized (this) {    if (activeUser != null) {      activeUser.setActive(false);      activeUser=null;      GoogleLoginPrefs.removeActiveUser();      notifyLoginStatusChange();    }  }}  }
class C{  public void draw3DRect(int x,int y,int width,int height,boolean raised){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing 3D rect: " + new Rectangle(x,y,width,height)+ " Raised bezel: "+ raised);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.draw3DRect(x,y,width,height,raised);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.draw3DRect(x,y,width,height,raised);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.draw3DRect(x,y,width,height,raised);}  }
class C{  @Override public void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenees.add(source);  }}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  String name=node.getName();  String element=path.getElement(name);  Label label=elements.get(element);  Converter converter=label.getConverter(context);  return converter.read(node,value);}  }
class C{  public boolean increment(double key){  return adjustValue(key,1);}  }
class C{  public SeaGlassBorder(SeaglassUI ui){  this(ui,null);}  }
class C{  public BufferedFile(String filename) throws IOException {  this(filename,"r",BufferedFile.DEFAULT_BUFFER_SIZE);}  }
class C{  public boolean isContinued(){  return continued;}  }
class C{  public JSONBuffer appendKeyValue(Object key,Object val){  if (stack.empty() || stack.peek() != Operand.HASH) {    throw new JSONException("Appending key-value outside of hash context.");  }  addQuotedString(key);  buffer.append(":");  if (val instanceof Double) {    buffer.append(val.toString());  } else   if (val instanceof Integer) {    buffer.append(val.toString());  } else {    addQuotedString(val);  }  buffer.append(",");  return this;}  }
class C{  public void addListener(final IGroupNodeListener listener){  m_listeners.addListener(listener);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:11.612 -0500",hash_original_method="94CEF17B9A7A2098B0DD6F205E7F606C",hash_generated_method="E9928B27F2DF539B2F0201B1CD0966F1") @Override public boolean equals(Object theObject){  if (theObject instanceof Timestamp) {    return equals((Timestamp)theObject);  }  return false;}  }
class C{  public void addEpsilon(int source,int dest){  for (int upto=0; upto < nextTransition; upto+=4) {    if (transitions[upto] == dest) {      addTransition(source,transitions[upto + 1],transitions[upto + 2],transitions[upto + 3]);    }  }  if (isAccept(dest)) {    setAccept(source,true);  }}  }
class C{  public Store(Store other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetScope()) {    this.scope=other.scope;  }  this.persist=other.persist;}  }
class C{  public DBUserName(DBIdentity identity){  assert (identity.getId() != 0);  this.identity=identity;  this.email=identity.getName();}  }
class C{  public UnsignedInteger add(long increment){  return valueOf(getValue() + increment);}  }
class C{  public void encodeImage(BufferedImage buf,File imageFile) throws SVGGraphics2DIOException {  try {    OutputStream os=new FileOutputStream(imageFile);    try {      ImageWriter writer=ImageWriterRegistry.getInstance().getWriterFor("image/png");      writer.writeImage(buf,os);    }  finally {      os.close();    }  } catch (  IOException e) {    throw new SVGGraphics2DIOException(ERR_WRITE + imageFile.getName());  }}  }
class C{  public Boolean isRstrctnInd(){  return rstrctnInd;}  }
class C{  public static String format(Object obj){  if (obj instanceof Number) {    return format((Number)obj);  } else {    return obj.toString();  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"pushf");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a pushf instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final String result=Helpers.shiftFlagsIntoValue(environment,offset,OperandSize.DWORD,instructions);  offset=baseOffset + instructions.size();  Helpers.generatePush(environment,offset,result,OperandSize.DWORD,instructions);}  }
class C{  public boolean decrement(){  if (value > 0) {    value--;    recalculate=true;    return true;  }  return false;}  }
class C{  private void assertReadLittleEndian32(byte[] data,int value) throws Exception {  CodedInputStream input=CodedInputStream.newInstance(data);  assertEquals(value,input.readRawLittleEndian32());  assertTrue(input.isAtEnd());  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));    assertEquals(value,input.readRawLittleEndian32());    assertTrue(input.isAtEnd());  }}  }
class C{  protected Object readResolve() throws ObjectStreamException {  try {    IgniteKernal g=IgnitionEx.localIgnite();    return ids != null ? new ClusterGroupAdapter(g.context(),subjId,ids) : new ClusterGroupAdapter(g.context(),subjId,p);  } catch (  IllegalStateException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  }}  }
class C{  @Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();  int rowsUpdated;switch (sUriMatcher.match(uri)) {case ACRONYMS:    rowsUpdated=0;  break;default :throw new UnsupportedOperationException("Unknown uri: " + uri);}if (rowsUpdated != 0) getContext().getContentResolver().notifyChange(uri,null);return rowsUpdated;}  }
class C{  private void processQueryString(List<Header> queryString){  for (  Header header : queryString) {    if (header.getAction().equalsIgnoreCase("remove")) {      baseRequest.removeURLVariable(header.getKey());    } else     if (header.getAction().equalsIgnoreCase("add") || header.getAction().equalsIgnoreCase("set")) {      String value=header.getValue();      if (ValidationUtil.isFunction(value)) {        value=FunctionHandler.executeFunction(value,variables);      } else       if (ValidationUtil.isVariable(value)) {        value=variables.getVariable(value);      }      value=variables.evaluate(value);      baseRequest.addURLVariable(header.getKey(),value);    }  }}  }
class C{  public ClientOptions(final Component parent,final String defaultName,final int defaultPort,final String defaultAddress){  super(JOptionPane.getFrameForComponent(parent),"Client options",true);  initComponents();  layoutComponents();  m_nameField.setText(defaultName);  m_portField.setValue(defaultPort);  m_addressField.setText(defaultAddress);  pack();}  }
class C{  public GameSplashScreen(){  getContentPane().setBackground(Color.CYAN);  setBounds(100,100,658,549);  getContentPane().setLayout(null);  JLabel lblNewLabel=new JLabel("");  lblNewLabel.setIcon(icon);  lblNewLabel.setBounds(31,32,601,311);  getContentPane().add(lblNewLabel);  progressBar.setForeground(Color.MAGENTA);  progressBar.setStringPainted(true);  progressBar.setBounds(21,433,580,50);  getContentPane().add(progressBar);  lblGame.setHorizontalAlignment(SwingConstants.CENTER);  lblGame.setFont(new Font("Tahoma",Font.BOLD,18));  lblGame.setBounds(170,354,254,68);  getContentPane().add(lblGame);  doProgress();}  }
class C{  @Override public HijrahDate date(Era era,int yearOfEra,int month,int dayOfMonth){  return date(prolepticYear(era,yearOfEra),month,dayOfMonth);}  }
class C{  protected static void lubksb(double[][] A,int[] index,double[] b){  int ii=-1;  for (int i=0; i < 4; i+=1) {    int ip=index[i];    double sum=b[ip];    b[ip]=b[i];    if (ii != -1) {      for (int j=ii; j <= i - 1; j+=1) {        sum-=A[i][j] * b[j];      }    } else     if (sum != 0.0) {      ii=i;    }    b[i]=sum;  }  for (int i=3; i >= 0; i-=1) {    double sum=b[i];    for (int j=i + 1; j < 4; j+=1) {      sum-=A[i][j] * b[j];    }    b[i]=sum / A[i][i];  }}  }
class C{  public Matrix4x3d reflection(double a,double b,double c,double d){  double da=a + a, db=b + b, dc=c + c, dd=d + d;  m00=1.0 - da * a;  m01=-da * b;  m02=-da * c;  m10=-db * a;  m11=1.0 - db * b;  m12=-db * c;  m20=-dc * a;  m21=-dc * b;  m22=1.0 - dc * c;  m30=-dd * a;  m31=-dd * b;  m32=-dd * c;  properties=0;  return this;}  }
class C{  public void showDifference(){  try {    con1=getConnection(DB1_NAME,DB1_USER,DB1_PASSWD,DB1_URL);    con1.setAutoCommit(false);    con2=getConnection(DB2_NAME,DB2_USER,DB2_PASSWD,DB2_URL);    con2.setAutoCommit(false);    stmtdb1=con1.createStatement();    stmtdb2=con2.createStatement();    System.out.println("compare tables ...");    compareTables();    System.out.println("compare constraints ...");    compareConstraints();    System.out.println("compare views ...");    compareViews();    System.out.println("compare functions/procedures ...");    compareFunctionsAndProcedures();    System.out.println("drop triggers ...");    dropTriggers();    System.out.println("compare ad_elements ...");    compareADElements();    System.out.println("compare indexes ...");    compareIndexes();    sortAndPrintSQL();    stmtdb1.close();    stmtdb2.close();    con1.close();    con2.close();    System.out.println("done.");  } catch (  ClassNotFoundException e) {    e.printStackTrace();  }catch (  SQLException e) {    e.printStackTrace();  }}  }
class C{  public ArrayList<Prediction> predictions(){  if (m_DiscardPredictions) {    return null;  } else {    return m_Predictions;  }}  }
class C{  public synchronized int removeCategory(String categoryName){  int count=0;  for (  Map.Entry<String,AddressbookEntry> entry : entries.entrySet()) {    if (entry.getValue().hasCategory(categoryName)) {      AddressbookEntry changedEntry=renameCategory(entry.getValue(),categoryName,null);      entry.setValue(changedEntry);      count++;    }  }  if (count > 0) {    saveOnChange();  }  return count;}  }
class C{  public MiniDrawer withOnMiniDrawerItemClickListener(BaseDrawerAdapter.OnClickListener onMiniDrawerItemClickListener){  this.mOnMiniDrawerItemClickListener=onMiniDrawerItemClickListener;  return this;}  }
class C{  public void update(){  try {    AttributeSet as=TextNode.createAttributeSet(textObject.getFontName(),textObject.getFontSize(),textObject.isItalic(),textObject.isBold());    pStyledText.getDocument().remove(0,pStyledText.getDocument().getLength());    pStyledText.getDocument().insertString(0,textObject.getText(),as);    pStyledText.syncWithDocument();    pullViewPositionFromModel();  } catch (  BadLocationException e) {    e.printStackTrace();  }}  }
class C{  protected void checkMethodInvocability(AnnotatedExecutableType method,MethodInvocationTree node){  if (method.getReceiverType() == null) {    return;  }  if (method.getElement().getKind() == ElementKind.CONSTRUCTOR) {    return;  }  AnnotatedTypeMirror methodReceiver=method.getReceiverType().getErased();  AnnotatedTypeMirror treeReceiver=methodReceiver.shallowCopy(false);  AnnotatedTypeMirror rcv=atypeFactory.getReceiverType(node);  treeReceiver.addAnnotations(rcv.getEffectiveAnnotations());  if (!skipReceiverSubtypeCheck(node,methodReceiver,rcv) && !atypeFactory.getTypeHierarchy().isSubtype(treeReceiver,methodReceiver)) {    checker.report(Result.failure("method.invocation.invalid",TreeUtils.elementFromUse(node),treeReceiver.toString(),methodReceiver.toString()),node);  }}  }
class C{  private static URI create(String path,String fragment){  List<String> segments=Strings.split(path,'/');  URI result=URI.createHierarchicalURI(SCHEME,null,null,segments.toArray(new String[segments.size()]),null,fragment);  return result;}  }
class C{  public void removeTable(MVTable table){  tableMap.remove(table.getMapName());}  }
class C{  public void putSerializable(String key,Serializable value){  unparcel();  mMap.put(key,value);}  }
class C{  public void paintText(SynthContext ss,Graphics g,String text,int x,int y,int mnemonicIndex){  if (text != null) {    Graphics2D g2d=(Graphics2D)g.create();    g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);    JComponent c=ss.getComponent();    FontMetrics fm=SwingUtilities2.getFontMetrics(c,g2d);    y+=fm.getAscent();    SwingUtilities2.drawString(c,g2d,text,x,y);    if (mnemonicIndex >= 0 && mnemonicIndex < text.length()) {      int underlineX=x + SwingUtilities2.stringWidth(c,fm,text.substring(0,mnemonicIndex));      int underlineY=y;      int underlineWidth=fm.charWidth(text.charAt(mnemonicIndex));      int underlineHeight=1;      g2d.fillRect(underlineX,underlineY + fm.getDescent() - 1,underlineWidth,underlineHeight);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:21.652 -0400",hash_original_method="F8E26A61666054C690AF98C48F2153BE",hash_generated_method="0B86135FC913BD6C8E0A70360170EDDF") public InvalidCredentialsException(String message){  super(message);}  }
class C{  protected boolean makeRoomForMessage(int size){  if (size > this.getBufferSize()) {    return false;  }  long freeBuffer=this.getFreeBufferSize();  while (freeBuffer < size) {    Message m=getNextMessageToRemove(true);    if (m == null) {      return false;    }    deleteMessage(m.getId(),true);    freeBuffer+=m.getSize();  }  return true;}  }
class C{  public boolean isMember(){  if (this.innerInfo == null)   return false;  if (this.innerInfo.getEnclosingTypeName() == null)   return false;  char[] innerSourceName=this.innerInfo.getSourceName();  return (innerSourceName != null && innerSourceName.length > 0);}  }
class C{  protected void removeEntry(final HashEntry<K,V> entry,final int hashIndex,final HashEntry<K,V> previous){  if (previous == null) {    data[hashIndex]=entry.next;  } else {    previous.next=entry.next;  }}  }
class C{  public static SipRequest createOptions(SipDialogPath dialog,String[] featureTags) throws PayloadException {  try {    URI requestURI=SipUtils.ADDR_FACTORY.createURI(dialog.getTarget());    CallIdHeader callIdHeader=SipUtils.HEADER_FACTORY.createCallIdHeader(dialog.getCallId());    CSeqHeader cseqHeader=SipUtils.HEADER_FACTORY.createCSeqHeader(dialog.getCseq(),Request.OPTIONS);    Address fromAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getLocalParty());    FromHeader fromHeader=SipUtils.HEADER_FACTORY.createFromHeader(fromAddress,dialog.getLocalTag());    Address toAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getRemoteParty());    ToHeader toHeader=SipUtils.HEADER_FACTORY.createToHeader(toAddress,null);    Request options=SipUtils.MSG_FACTORY.createRequest(requestURI,Request.OPTIONS,callIdHeader,cseqHeader,fromHeader,toHeader,dialog.getSipStack().getViaHeaders(),SipUtils.buildMaxForwardsHeader());    options.addHeader(dialog.getSipStack().getContact());    Header acceptHeader=SipUtils.HEADER_FACTORY.createHeader(AcceptHeader.NAME,"application/sdp");    options.addHeader(acceptHeader);    SipUtils.setFeatureTags(options,featureTags);    SipUtils.buildAllowHeader(options);    Vector<String> route=dialog.getRoute();    for (int i=0; i < route.size(); i++) {      Header routeHeader=SipUtils.HEADER_FACTORY.createHeader(RouteHeader.NAME,route.elementAt(i));      options.addHeader(routeHeader);    }    setPPreferedIdentityHeader(options);    options.addHeader(SipUtils.buildUserAgentHeader());    ViaHeader viaHeader=(ViaHeader)options.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    return new SipRequest(options);  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create SIP message!",e);  }}  }
class C{  static String workAroundClientIssue(String fromClient){  if (fromClient.indexOf('-') == -1) {    fromClient=new StringBuilder(fromClient).insert(4,'-').insert(7,'-').insert(13,':').insert(16,':').toString();  }  return fromClient;}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  tabBase=alloc.x;  Graphics2D g2d=(Graphics2D)g;  host=(RSyntaxTextArea)getContainer();  int ascent=host.getMaxAscent();  int fontHeight=host.getLineHeight();  int n=getViewCount();  int x=alloc.x + getLeftInset();  int y=alloc.y + getTopInset();  Rectangle clip=g.getClipBounds();  for (int i=0; i < n; i++) {    tempRect.x=x + getOffset(X_AXIS,i);    tempRect.y=y + getOffset(Y_AXIS,i);    tempRect.width=getSpan(X_AXIS,i);    tempRect.height=getSpan(Y_AXIS,i);    if (tempRect.intersects(clip)) {      View view=getView(i);      drawView(g2d,alloc,view,fontHeight,tempRect.y + ascent);    }  }}  }
class C{  private void check(String exp,String qry){  String actualRes=OdbcEscapeUtils.parse(qry);  assertEquals(exp,actualRes);}  }
class C{  protected void drawWeekNums(Canvas canvas){  int y=((mHeight + MINI_DAY_NUMBER_TEXT_SIZE) / 2) - DAY_SEPARATOR_WIDTH;  int nDays=mNumCells;  int i=0;  int divisor=2 * nDays;  boolean isFocusMonth=mFocusDay[i];  mMonthNumPaint.setColor(isFocusMonth ? mFocusMonthColor : mOtherMonthColor);  mMonthNumPaint.setFakeBoldText(false);  for (; i < nDays; i++) {    if (mFocusDay[i] != isFocusMonth) {      isFocusMonth=mFocusDay[i];      mMonthNumPaint.setColor(isFocusMonth ? mFocusMonthColor : mOtherMonthColor);    }    if (mHasToday && mToday == i) {      mMonthNumPaint.setTextSize(MINI_TODAY_NUMBER_TEXT_SIZE);      mMonthNumPaint.setFakeBoldText(true);    }    int x=(2 * i + 1) * (mWidth - mPadding * 2) / (divisor) + mPadding;    canvas.drawText(mDayNumbers[i],x,y,mMonthNumPaint);    if (mHasToday && mToday == i) {      mMonthNumPaint.setTextSize(MINI_DAY_NUMBER_TEXT_SIZE);      mMonthNumPaint.setFakeBoldText(false);    }  }}  }
class C{  public DoubleAccumulator(DoubleBinaryOperator accumulatorFunction,double identity){  this.function=accumulatorFunction;  base=this.identity=Double.doubleToRawLongBits(identity);}  }
class C{  public void severe(String msg){  log(Level.SEVERE,msg);}  }
class C{  public static String formatQuantity(float quantity){  return formatQuantity((double)quantity);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testFiveNodeSequentialEvent() throws Throwable {  testSequentialEvent(5);}  }
class C{  public void registerForPreDhcpNotification(){  mRegisteredForPreDhcpNotification=true;}  }
class C{  public CBCBlockCipher(BlockCipher blockCipher){  this.blockCipher=blockCipher;  this.blockSize=blockCipher.getBlockSize();}  }
class C{  public String toString(){  if (m_Train == null) {    return "IBk: No model built yet.";  }  if (m_Train.numInstances() == 0) {    return "Warning: no training instances - ZeroR model used.";  }  if (!m_kNNValid && m_CrossValidate) {    crossValidate();  }  String result="IB1 instance-based classifier\n" + "using " + m_kNN;switch (m_DistanceWeighting) {case WEIGHT_INVERSE:    result+=" inverse-distance-weighted";  break;case WEIGHT_SIMILARITY:result+=" similarity-weighted";break;}result+=" nearest neighbour(s) for classification\n";if (m_WindowSize != 0) {result+="using a maximum of " + m_WindowSize + " (windowed) training instances\n";}return result;}  }
class C{  public static boolean matchesElement(ExecutableElement method,String methodName,Class<?>... parameters){  if (!method.getSimpleName().toString().equals(methodName)) {    return false;  }  if (method.getParameters().size() != parameters.length) {    return false;  } else {    for (int i=0; i < method.getParameters().size(); i++) {      if (!method.getParameters().get(i).asType().toString().equals(parameters[i].getName())) {        return false;      }    }  }  return true;}  }
class C{  public static void writeVarInt(ByteBuffer buff,int x){  while ((x & ~0x7f) != 0) {    buff.put((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  buff.put((byte)x);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public boolean equals(LiveExprNode exp){  if (exp instanceof LNEven) {    return getBody().equals(((LNEven)exp).getBody());  }  return false;}  }
class C{  public PanEvent(Object source,float Az){  this(source,Az,Float.NaN);}  }
class C{  public static void copyStreams(InputStream in,OutputStream out) throws IOException {  if (in == null || out == null) {    throw new IllegalArgumentException();  }  final byte[] buffer=new byte[4096];  int len;  while (-1 != (len=in.read(buffer,0,buffer.length))) {    out.write(buffer,0,len);  }}  }
class C{  public Locale chooseLanguage(String localeAsStr){  Locale locale=new Locale(localeAsStr);  if (mTts.isLanguageAvailable(locale) >= 0) {    Log.i("Chose TTS: " + localeAsStr + " -> "+ locale);    return locale;  }  List<Locale> similarLocales=TtsLocaleMapper.getSimilarLocales(locale);  if (similarLocales != null) {    for (    Locale l : similarLocales) {      if (mTts.isLanguageAvailable(l) >= 0) {        Log.i("Chose TTS: " + localeAsStr + " -> "+ l+ " from "+ similarLocales);        return l;      }    }  }  Log.i("Chose TTS: " + localeAsStr + " -> NULL from "+ similarLocales);  return null;}  }
class C{  public ScriptException(Exception e){  super(e);  fileName=null;  lineNumber=-1;  columnNumber=-1;}  }
class C{  public void valueTextIndex(boolean valTextIdx){  this.valTextIdx=valTextIdx;}  }
class C{  public void approvePullRequest(String project,String repository,String pullRequestId,String user,StashClient stashClient){  try {    stashClient.approvePullRequest(project,repository,pullRequestId);    LOGGER.info("Pull-request {} ({}/{}) APPROVED by user \"{}\"",pullRequestId,project,repository,user);  } catch (  StashClientException e) {    LOGGER.error("Unable to approve pull-request",e);  }}  }
class C{  public MappedExampleSet(ExampleSet parent,int[] mapping){  this(parent,mapping,true);}  }
class C{  public void updateUI(){  setUI((FontChooserUI)LookAndFeelAddons.getUI(this,FontChooserUI.class));}  }
class C{  public DialogFile(){  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  this.setMaximumSize(new Dimension(2500,50));  this.setPreferredSize(new Dimension(350,50));  resourcesDirectory=hostDialog.getResourcesDirectory();  pathSep=File.separator;  graphicsDirectory=resourcesDirectory + "Images" + pathSep;  workingDirectory=hostDialog.getWorkingDirectory();}  }
class C{  @PostConstruct public void postConstruct() throws IOException {  if (log.isInfoEnabled()) {    log.info("|-Shutdown Service active...");  }}  }
class C{  public synchronized void add(double x,double y){  add(x,y,0d);}  }
class C{  public ClosenessCentrality(Hypergraph<V,E> graph,Function<E,? extends Number> edge_weights){  super(graph,edge_weights,true);}  }
class C{  public Location(String location){  super(location);}  }
class C{  private List<CLIQUESubspace<V>> pruneDenseSubspaces(List<CLIQUESubspace<V>> denseSubspaces){  int[][] means=computeMeans(denseSubspaces);  double[][] diffs=computeDiffs(denseSubspaces,means[0],means[1]);  double[] codeLength=new double[denseSubspaces.size()];  double minCL=Double.MAX_VALUE;  int min_i=-1;  for (int i=0; i < denseSubspaces.size(); i++) {    int mi=means[0][i];    int mp=means[1][i];    double log_mi=mi == 0 ? 0 : StrictMath.log(mi) / StrictMath.log(2);    double log_mp=mp == 0 ? 0 : StrictMath.log(mp) / StrictMath.log(2);    double diff_mi=diffs[0][i];    double diff_mp=diffs[1][i];    codeLength[i]=log_mi + diff_mi + log_mp+ diff_mp;    if (codeLength[i] <= minCL) {      minCL=codeLength[i];      min_i=i;    }  }  return denseSubspaces.subList(0,min_i + 1);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANSWER\"";  db.execSQL(sql);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SignatureVisitor visitArrayType(){  return this;}  }
class C{  @DoNotStrip boolean hasNext(){  if (mIterator.hasNext()) {    mElement=mIterator.next();    return true;  } else {    mElement=null;    return false;  }}  }
class C{  private void removeMapping(FHTreeStateNode node){  treePathMapping.remove(node.getTreePath());}  }
class C{  public void test_ConstructorLjava_security_SecureRandomSpi_java_security_Provider(){  try {    new MySecureRandom(null,null);  } catch (  Exception e) {    fail("Constructor threw exception : " + e);  }  try {    MyProvider p=new MyProvider();    MySecureRandom sr=new MySecureRandom(new MySecureRandomSpi(),p);    assertEquals("unknown",sr.getAlgorithm());    assertEquals(p,sr.getProvider());    sr=new MySecureRandom(new MySecureRandomSpi(),null);    sr=new MySecureRandom(null,p);  } catch (  Exception e) {    fail("Constructor threw exception : " + e);  }}  }
class C{  @LargeTest public void testDownloadToCacheWithAlmostFullCache() throws Exception {  int DOWNLOAD_FILE_SIZE=1024 * 1024;  StatFs fs=new StatFs(CACHE_DIR);  int blockSize=fs.getBlockSize();  int availableBlocks=fs.getAvailableBlocks();  int availableBytes=blockSize * availableBlocks;  Log.i(TAG,"INITIAL stage, available space in /cache: " + availableBytes);  File outFile=File.createTempFile("DM_TEST",null,new File(CACHE_DIR));  byte[] buffer=new byte[blockSize];  try {    if (DOWNLOAD_FILE_SIZE <= availableBytes) {      int writeSizeBytes=availableBytes - (DOWNLOAD_FILE_SIZE / 2);      int writeSizeBlocks=writeSizeBytes / blockSize;      int remainderSizeBlocks=availableBlocks - writeSizeBlocks;      FileOutputStream fo=null;      try {        fo=new FileOutputStream(outFile);        while (fs.getAvailableBlocks() >= remainderSizeBlocks) {          fo.write(buffer);          fs.restat(CACHE_DIR);        }      } catch (      IOException e) {        Log.e(LOG_TAG,"error filling file: ",e);        throw e;      } finally {        if (fo != null) {          fo.close();        }      }    }    long spaceAvailable=fs.getAvailableBlocks() * blockSize;    Log.i(TAG,"BEFORE download, available space in /cache: " + spaceAvailable);    assertTrue(DOWNLOAD_FILE_SIZE > spaceAvailable);    byte[] blobData=generateData(DOWNLOAD_FILE_SIZE,DataType.TEXT);    long dlRequest=doBasicDownload(blobData,DOWNLOAD_TO_SYSTEM_CACHE);    verifyAndCleanupSingleFileDownload(dlRequest,blobData);  }  finally {    if (outFile != null) {      outFile.delete();    }  }}  }
class C{  public boolean checkMessage(String message,boolean check){  SQLiteDatabase db=getWritableDatabase();  if (db != null && message != null) {    db.execSQL("UPDATE " + TABLE + " SET "+ COL_CHECKED+ "="+ (check ? TRUE : FALSE)+ " WHERE "+ COL_DELETED+ " ="+ FALSE+ " AND "+ COL_MESSAGE+ " ='"+ Utils.makeTextSafeForSQL(message)+ "';");    return true;  }  return false;}  }
class C{  public static void testSignPos() throws AssertFailException {  byte[] data=BaseEncoding.base16().lowerCase().decode("CF80CD8AED482D5D1527D7DC72FCEFF84E6326592848447D2DC0B0E87DFC9A90".toLowerCase());  byte[] sec=BaseEncoding.base16().lowerCase().decode("67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530".toLowerCase());  byte[] resultArr=NativeSecp256k1.sign(data,sec);  String sigString=javax.xml.bind.DatatypeConverter.printHexBinary(resultArr);  assertEquals(sigString,"30440220182A108E1448DC8F1FB467D06A0F3BB8EA0533584CB954EF8DA112F1D60E39A202201C66F36DA211C087F3AF88B50EDF4F9BDAA6CF5FD6817E74DCA34DB12390C6E9","testSignPos");}  }
class C{  public MultiplePairModel(final PropertyModel propertyModel,final List<Pair<String,String>> options){  this.propertyModel=propertyModel;  final String selectedKeysAsString=(String)propertyModel.getObject();  if (StringUtils.isNotBlank(selectedKeysAsString)) {    final List<String> selectedKeys=new ArrayList<String>(Arrays.asList(selectedKeysAsString.split(",")));    for (    Pair<String,String> option : options) {      if (selectedKeys.contains(option.getFirst())) {        pairList.add(option);      }    }  }}  }
class C{  public static void checkNewDataUnderlying(SupportUpdateListener updateListener,EventBean[] expectedValues){  EventBean[] newData=updateListener.getLastNewData();  Object[] expectedUnderlying=getUnderlying(expectedValues);  Object[] newUnderlying=getUnderlying(newData);  EPAssertionUtil.assertEqualsExactOrder(expectedUnderlying,newUnderlying);  updateListener.setLastNewData(null);}  }
class C{  static void loadDefaultServerHints() throws IOException {  try (InputStream stream=Main.class.getResourceAsStream("server_hints.json")){    String content=CharStreams.toString(new InputStreamReader(stream,Charsets.UTF_8));    ServerRejectsServlet.setServerHintsJson(content);  } }  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  @SuppressWarnings("unchecked") public <T>T loadAs(Reader io,Class<T> type){  return (T)loadFromReader(new StreamReader(io),type);}  }
class C{  public SVGOMSwitchElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public double eval(double params[]){  return (1.0 / Math.cos(params[0]));}  }
class C{  @Override public String basePath(){  return "/wm/firewall";}  }
class C{  static URI toUri(WindowsPath path){  path=path.toAbsolutePath();  String s=path.toString();  boolean addSlash=false;  if (!s.endsWith("\\")) {    try {      addSlash=WindowsFileAttributes.get(path,true).isDirectory();    } catch (    WindowsException x) {    }  }  return toUri(s,path.isUnc(),addSlash);}  }
class C{  private void startAnimation(){  mView.setHasTransientState(true);  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  if (mPendingSetupAction != null) {    mAnimatorSetupMap.put(animator,mPendingSetupAction);    mPendingSetupAction=null;  }  if (mPendingCleanupAction != null) {    mAnimatorCleanupMap.put(animator,mPendingCleanupAction);    mPendingCleanupAction=null;  }  if (mPendingOnStartAction != null) {    mAnimatorOnStartMap.put(animator,mPendingOnStartAction);    mPendingOnStartAction=null;  }  if (mPendingOnEndAction != null) {    mAnimatorOnEndMap.put(animator,mPendingOnEndAction);    mPendingOnEndAction=null;  }  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  private boolean analyzeTraces(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,List<ExecutionResult> results,Map<Integer,Integer> predicateCount,Map<String,Integer> callCount,Map<Integer,Double> trueDistance,Map<Integer,Double> falseDistance){  boolean hasTimeoutOrTestException=false;  for (  ExecutionResult result : results) {    if (result.hasTimeout() || result.hasTestException()) {      hasTimeoutOrTestException=true;      continue;    }    handleBranchlessMethods(suite,result,callCount);    handlePredicateCount(suite,result,predicateCount);    handleTrueDistances(suite,result,trueDistance);    handleFalseDistances(suite,result,falseDistance);  }  return hasTimeoutOrTestException;}  }
class C{  protected static void warmUp(Map<Integer,Integer> map,int start,long end){  for (Integer i=start; i < end; i++) {    assertThat(map.put(i,-i),is(nullValue()));  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("Init=").append(format(getInit())).append(", Used=").append(format(getUsed())).append(", Free=").append(format(getFree())).append(" ").append(getFreePercent()).append("%, Committed=").append(format(getCommitted())).append(" ").append(getCommittedPercent()).append("%, Max=").append(format(getMax()));  return sb.toString();}  }
class C{  private Network handleRemovedTransportZone(Network tzone,URI networkUri,HashMap<String,Network> newTransportZones,Collection<Network> oldTransportZones,Results results) throws IOException {  Network newTransportZone=null;  String uri=networkUri.toString();  if (tzone.getNetworkSystems().contains(uri)) {    newTransportZone=findByFabricId(tzone,newTransportZones);    if (newTransportZone == null) {      _log.info("Existing network {} did not match any in the " + " new networks by name or by WWN. It must have been removed.",tzone.getLabel());      results.getRemoved().add(tzone);    } else {      _log.info("Existing network {} matches {} in the " + " new networks by name. Reconciling the two.",tzone.getLabel(),newTransportZone.getLabel());      Network oldTransportZone=findMatchByFabricIdAndWwn(newTransportZone,oldTransportZones);      if (oldTransportZone != null) {        _log.info("The fabric must have fragmented and is now merging." + "User changes will be merged also any endpoints found will be added.");        oldTransportZone.addEndpoints(getUserCreatedEndPoints(tzone),false);        tzone.removeEndpoints(getUserCreatedEndPoints(tzone));        if (tzone.getAssignedVirtualArrays() != null) {          oldTransportZone.addAssignedVirtualArrays(tzone.getAssignedVirtualArrays());          tzone.removeAssignedVirtualArrays(tzone.getAssignedVirtualArrays());        }        results.getRemoved().add(tzone);        newTransportZone=null;      } else {        _log.info("Either the fabric is fragmenting or the principal " + "switch has changed. Adding new endpoints and keeping old ones.");        mergeNetworks(tzone,newTransportZone);        results.getModified().add(tzone);      }    }  }  return newTransportZone;}  }
class C{  public static String transformMethodSignature(String signature){  StringBuilder buf=new StringBuilder();  buf.append('(');  SignatureParser parser=new SignatureParser(signature);  for (Iterator<String> i=parser.parameterSignatureIterator(); i.hasNext(); ) {    String param=i.next();    param=transformSignature(param);    buf.append(param);  }  buf.append(')');  return buf.toString();}  }
class C{  private void invokeAndWait(Runnable run){  if (!SwingUtilities.isEventDispatchThread()) {    try {      SwingUtilities.invokeAndWait(run);    } catch (    Exception e) {      e.printStackTrace();    }  } else {    run.run();  }}  }
class C{  @SuppressWarnings("unchecked") @Override public synchronized Enumeration<Object> keys(){  Set<?> set=keySet();  return (Enumeration<Object>)sortKeys((Set<String>)set);}  }
class C{  public int write(byte[] buffer,int count){  return write(buffer,0,count);}  }
class C{  private double waitFor(double permits,long t){  long begin=t;  writeRate.lock();  try {    while (permits > 0) {      long nanosPerPermit=this.nanosPerPermit;      long done=t + (long)(permits * nanosPerPermit);      long now=System.nanoTime();      if (done > now) {        rateChanged.awaitNanos(done - now);        now=System.nanoTime();      }      double permitsElapsed=(now - t) / (double)nanosPerPermit;      permits-=permitsElapsed;      t=now;    }  } catch (  InterruptedException e) {  } finally {    writeRate.unlock();  }  return t - begin;}  }
class C{  public static String validateXPath(String xml,String... tests) throws XPathExpressionException, SAXException {  if (tests == null || tests.length == 0) {    return null;  }  Document document=null;  try {    DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    document=builder.parse(new ByteArrayInputStream(xml.getBytes(Constants.CHARSET)));  } catch (  ParserConfigurationException e) {    throw new RuntimeException("error during initialisation of the DocumentBuilder ");  }catch (  UnsupportedEncodingException e1) {    throw new RuntimeException("Totally weird UTF-8 exception",e1);  }catch (  IOException e2) {    throw new RuntimeException("Totally weird io exception",e2);  }  XPath xpath=XPathFactory.newInstance().newXPath();  for (  String xp : tests) {    xp=xp.trim();    Boolean bool=(Boolean)xpath.evaluate(xp,document,XPathConstants.BOOLEAN);    if (!bool) {      return xp;    }  }  return null;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  void nextPage(PageBtreeCursor cursor,int pageId){  int i;  for (i=0; i < entryCount + 1; i++) {    if (childPageIds[i] == pageId) {      i++;      break;    }  }  if (i > entryCount) {    if (parentPageId == PageBtree.ROOT) {      cursor.setCurrent(null,0);      return;    }    PageBtreeNode next=(PageBtreeNode)index.getPage(parentPageId);    next.nextPage(cursor,getPos());    return;  }  PageBtree page=index.getPage(childPageIds[i]);  PageBtreeLeaf leaf=page.getFirstLeaf();  cursor.setCurrent(leaf,0);}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node child;  String childName;  int length;  Node insertedNode;  java.util.List actual=new java.util.ArrayList();  java.util.List expectedWithWhitespace=new java.util.ArrayList();  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("employeeId");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("name");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("position");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("newChild");  expectedWithWhitespace.add("salary");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("gender");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("address");  expectedWithWhitespace.add("#text");  java.util.List expectedWithoutWhitespace=new java.util.ArrayList();  expectedWithoutWhitespace.add("employeeId");  expectedWithoutWhitespace.add("name");  expectedWithoutWhitespace.add("position");  expectedWithoutWhitespace.add("newChild");  expectedWithoutWhitespace.add("salary");  expectedWithoutWhitespace.add("gender");  expectedWithoutWhitespace.add("address");  java.util.List expected=new java.util.ArrayList();  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  if (equals(6,length)) {    refChild=childList.item(3);    expected=expectedWithoutWhitespace;  } else {    refChild=childList.item(7);    expected=expectedWithWhitespace;  }  newChild=doc.createElement("newChild");  insertedNode=employeeNode.insertBefore(newChild,refChild);  for (int indexN100DC=0; indexN100DC < childList.getLength(); indexN100DC++) {    child=(Node)childList.item(indexN100DC);    childName=child.getNodeName();    actual.add(childName);  }  assertEquals("nodeNames",expected,actual);}  }
class C{  protected boolean isDownKey(int keyCode){  int game=Display.getInstance().getGameAction(keyCode);  return game == Display.GAME_DOWN;}  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);  long bits, val;  do {    bits=(nextLong() >>> 1);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  public static final LocoNetMessage createSetUr92GroupChannelPacket(Integer iChannelNumber) throws jmri.jmrix.loconet.LocoNetException {  int i;  if (validateGroupChannel(iChannelNumber) == false) {    throw new jmri.jmrix.loconet.LocoNetException("Invalid Duplex Group Channel - must be between 11 and 26, inclusive");  }  LocoNetMessage m=new LocoNetMessage(LnConstants.RE_DPLX_OP_LEN);  i=0;  m.setElement(i++,LnConstants.OPC_PEER_XFER);  m.setElement(i++,LnConstants.RE_DPLX_OP_LEN);  m.setElement(i++,LnConstants.RE_DPLX_GP_CHAN_TYPE);  m.setElement(i++,LnConstants.RE_DPLX_OP_TYPE_WRITE);  m.setElement(i++,0);  m.setElement(i++,iChannelNumber);  for (; i < (LnConstants.RE_DPLX_OP_LEN - 1); i++) {    m.setElement(i,0);  }  return m;}  }
class C{  private void writeJVMOptions(LocalContainer container,LibertyInstall install){  if (container instanceof InstalledLocalContainer) {    InstalledLocalContainer installedContainer=(InstalledLocalContainer)container;    Map<String,String> sysProps=installedContainer.getSystemProperties();    if (sysProps != null && !sysProps.isEmpty()) {      File serverDir=install.getServerDir(null);      File jvmOptions=new File(serverDir,"jvm.options");      try {        PrintStream out=new PrintStream(jvmOptions);        for (        Map.Entry<String,String> entry : installedContainer.getSystemProperties().entrySet()) {          out.print("-D");          out.print(entry.getKey());          out.print('=');          out.println(entry.getValue());        }        out.close();      } catch (      IOException e) {      }    }  }}  }
class C{  protected void loadChildren(){  DynamicTreeNode newNode;  Font font;  int randomIndex;  SampleData data;  for (int counter=0; counter < DynamicTreeNode.DEFAULT_CHILDREN_COUNT; counter++) {    randomIndex=(int)(nameGen.nextFloat() * nameCount);    String displayString=NAMES[randomIndex];    if (fonts == null || fonts[randomIndex].canDisplayUpTo(displayString) != -1) {      font=null;    } else {      font=fonts[randomIndex];    }    if (counter % 2 == 0) {      data=new SampleData(font,Color.red,displayString);    } else {      data=new SampleData(font,Color.blue,displayString);    }    newNode=new DynamicTreeNode(data);    insert(newNode,counter);  }  hasLoaded=true;}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addInternalEntity(String name,String value){  if (!this.entities.containsKey(name)) {    this.entities.put(name,value);  }}  }
class C{  public static void main(String[] args){  Integer[] intArray={new Integer(2),new Integer(4),new Integer(3)};  ArrayList<Integer> intList=new ArrayList<>(Arrays.asList(intArray));  Double[] doubleArray={new Double(3.4),new Double(1.3),new Double(-22.1)};  ArrayList<Double> doubleList=new ArrayList<>(Arrays.asList(doubleArray));  Character[] charArray={new Character('a'),new Character('J'),new Character('r')};  ArrayList<Character> charList=new ArrayList<>(Arrays.asList(charArray));  String[] stringArray={"Tom","Susan","Kim"};  ArrayList<String> stringList=new ArrayList<>(Arrays.asList(stringArray));  System.out.println("Maximum Integer object: " + Exercise_19_10.max(intList));  System.out.println("Maximum Double object: " + Exercise_19_10.max(doubleList));  System.out.println("Maximum Character object: " + Exercise_19_10.max(charList));  System.out.println("Maximum String object: " + Exercise_19_10.max(stringList));}  }
class C{  public boolean isFifo(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_Fifo);}  }
class C{  public ServerAuthenticatorNone(){  this.in=null;  this.out=null;}  }
class C{  public static <T>HashSet<T> hashSet(int initialCapacity,float loadFactor){  return new HashSet<T>(initialCapacity,loadFactor);}  }
class C{  private synchronized EventType addXMLDOMType(String eventTypeName,ConfigurationEventTypeXMLDOM configurationEventTypeXMLDOM,SchemaModel optionalSchemaModel,boolean isPreconfiguredStatic,boolean allowOverrideExisting){  if (configurationEventTypeXMLDOM.getRootElementName() == null) {    throw new EventAdapterException("Required root element name has not been supplied");  }  if (!allowOverrideExisting) {    EventType existingType=nameToTypeMap.get(eventTypeName);    if (existingType != null) {      String message="Event type named '" + eventTypeName + "' has already been declared with differing column name or type information";      if (!(existingType instanceof BaseXMLEventType)) {        throw new EventAdapterException(message);      }      ConfigurationEventTypeXMLDOM config=((BaseXMLEventType)existingType).getConfigurationEventTypeXMLDOM();      if (!config.equals(configurationEventTypeXMLDOM)) {        throw new EventAdapterException(message);      }      return existingType;    }  }  EventTypeMetadata metadata=EventTypeMetadata.createXMLType(eventTypeName,isPreconfiguredStatic,configurationEventTypeXMLDOM.getSchemaResource() == null && configurationEventTypeXMLDOM.getSchemaText() == null);  EventType type;  if ((configurationEventTypeXMLDOM.getSchemaResource() == null) && (configurationEventTypeXMLDOM.getSchemaText() == null)) {    type=new SimpleXMLEventType(metadata,eventTypeIdGenerator.getTypeId(eventTypeName),configurationEventTypeXMLDOM,this);  } else {    if (optionalSchemaModel == null) {      throw new EPException("Schema model has not been provided");    }    type=new SchemaXMLEventType(metadata,eventTypeIdGenerator.getTypeId(eventTypeName),configurationEventTypeXMLDOM,optionalSchemaModel,this);  }  nameToTypeMap.put(eventTypeName,type);  xmldomRootElementNames.put(configurationEventTypeXMLDOM.getRootElementName(),type);  return type;}  }
class C{  public static String utf8Encode(String str,String defultReturn){  if (!isEmpty(str) && str.getBytes().length != str.length()) {    try {      return URLEncoder.encode(str,"UTF-8");    } catch (    UnsupportedEncodingException e) {      return defultReturn;    }  }  return str;}  }
class C{  public long genomeLength(){  return genome.length;}  }
class C{  public boolean hasChildLdap(String nodeDn,String entidad){  String searchDn=getLdapSearchText(nodeDn);  boolean hasChild=false;  LdapConnCfg connCfg;  LdapConnection ldapConn=null;  try {    connCfg=UasConfigUtilLdap.createLdapConnConfig(entidad);    ldapConn=new LdapConnection();    ldapConn.open(connCfg);    LdapSearch search=new LdapSearch();    search.initialize(ldapConn,searchDn,LdapScope.ONELEVEL,getFilter(),null,maxChildrenLdap);    search.execute();    if (search.next())     hasChild=true;    search.release();  } catch (  Exception e) {    e.printStackTrace();  } finally {    try {      ldapConn.close();    } catch (    Exception e) {      e.printStackTrace();    }  }  return hasChild;}  }
class C{  public static void CF6(double[] x,double[] f,double[] c,int nx){  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    if (j % 2 == 1) {      yj=x[j - 1] - 0.8 * x[0] * Math.cos(6.0 * PI * x[0] + j * PI / nx);      sum1+=yj * yj;    } else {      yj=x[j - 1] - 0.8 * x[0] * Math.sin(6.0 * PI * x[0] + j * PI / nx);      sum2+=yj * yj;    }  }  f[0]=x[0] + sum1;  f[1]=(1.0 - x[0]) * (1.0 - x[0]) + sum2;  c[0]=x[1] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - MYSIGN((x[0] - 0.5) * (1.0 - x[0])) * Math.sqrt(Math.abs((x[0] - 0.5) * (1.0 - x[0])));  c[1]=x[3] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 4.0 * PI / nx) - MYSIGN(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])) * Math.sqrt(Math.abs(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])));}  }
class C{  protected byte readDataType(byte dataType){  byte coreType;switch (currentDataType) {case AMF.TYPE_NULL:case AMF.TYPE_UNDEFINED:    coreType=DataTypes.CORE_NULL;  break;case AMF.TYPE_NUMBER:coreType=DataTypes.CORE_NUMBER;break;case AMF.TYPE_BOOLEAN:coreType=DataTypes.CORE_BOOLEAN;break;case AMF.TYPE_STRING:case AMF.TYPE_LONG_STRING:coreType=DataTypes.CORE_STRING;break;case AMF.TYPE_CLASS_OBJECT:case AMF.TYPE_OBJECT:coreType=DataTypes.CORE_OBJECT;break;case AMF.TYPE_MIXED_ARRAY:coreType=DataTypes.CORE_MAP;break;case AMF.TYPE_ARRAY:coreType=DataTypes.CORE_ARRAY;break;case AMF.TYPE_DATE:coreType=DataTypes.CORE_DATE;break;case AMF.TYPE_XML:coreType=DataTypes.CORE_XML;break;case AMF.TYPE_REFERENCE:coreType=DataTypes.OPT_REFERENCE;break;case AMF.TYPE_UNSUPPORTED:case AMF.TYPE_MOVIECLIP:case AMF.TYPE_RECORDSET:coreType=(byte)(currentDataType + DataTypes.CUSTOM_AMF_MASK);break;case AMF.TYPE_END_OF_OBJECT:default :coreType=DataTypes.CORE_SKIP;break;}return coreType;}  }
class C{  private static boolean isPrintableString(String str){  for (int i=0; i < str.length(); ++i) {    char ch=str.charAt(i);    if (!(ch == 0x20 || ch >= 0x27 && ch <= 0x29 || ch >= 0x2B && ch <= 0x3A || ch == '=' || ch == '?' || ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z')) {      return false;    }  }  return true;}  }
class C{  public void reset(){  m_t=1;  m_weights=null;}  }
class C{  public byte[] buffer(){  return _readBuffer;}  }
class C{  public Boolean isUniqueVersion(){  return uniqueVersion;}  }
class C{  protected void parseShape(InStream in,SWFVectors vectors,boolean hasStyle,boolean hasAlpha) throws IOException {  SWFShape shape=(vectors instanceof SWFShape) ? (SWFShape)vectors : null;  in.synchBits();  if (hasStyle) {    parseStyles(in,shape,hasAlpha);  }  in.synchBits();  int[] numFillBits=new int[]{(int)in.readUBits(4)};  int[] numLineBits=new int[]{(int)in.readUBits(4)};  while (true) {    int type=(int)in.readUBits(1);    if (type == 1) {      boolean isCurved=in.readUBits(1) == 0L;      if (isCurved) {        int numBits=((int)in.readUBits(4)) + 2;        int cx=in.readSBits(numBits);        int cy=in.readSBits(numBits);        int dx=in.readSBits(numBits);        int dy=in.readSBits(numBits);        vectors.curve(cx,cy,dx,dy);      } else {        int numBits=((int)in.readUBits(4)) + 2;        boolean generalLine=in.readUBits(1) == 1;        int dx=0;        int dy=0;        if (generalLine) {          dx=in.readSBits(numBits);          dy=in.readSBits(numBits);        } else {          boolean vertLine=in.readUBits(1) == 1;          if (vertLine) {            dy=in.readSBits(numBits);          } else {            dx=in.readSBits(numBits);          }        }        vectors.line(dx,dy);      }    } else {      int flags=(int)in.readUBits(5);      if (flags == 0) {        break;      }      parseChangeRecord(in,flags,vectors,shape,hasAlpha,numFillBits,numLineBits);    }  }  vectors.done();}  }
class C{  public void blockUser(Integer targetUserId) throws IOException {  String tailUrl=GitlabUser.USERS_URL + "/" + targetUserId+ GitlabUser.BLOCK_URL;  retrieve().method("PUT").to(tailUrl,Void.class);}  }
class C{  public boolean isMultiplicity(){  return multiplicity;}  }
class C{  public K cloneKey(K k){  return k;}  }
class C{  public static boolean showGuidelines(){  if ((Math.abs(Edge.LEFT.getCoordinate() - Edge.RIGHT.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT) || (Math.abs(Edge.TOP.getCoordinate() - Edge.BOTTOM.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT))   return false; else   return true;}  }
class C{  public static GridLayout autoFit(){  GridLayout g=new GridLayout(1);  g.setAutoFit(true);  return g;}  }
class C{  private List<String> arrayToList(String[] array){  return Arrays.asList(array);}  }
class C{  public static String toString(Object object) throws JSONException {  return toString(object,null);}  }
class C{  public void flush() throws IOException {  if (_byteBuffer == null) {    throw new IOException("Writer closed");  }}  }
class C{  EvalThread(ContextInfo contextInfo){  super(null);  this.contextInfo=contextInfo;  setDaemon(true);}  }
class C{  public static String timeToClock(long timeMillis){  long timeLeft=timeMillis;  if (timeLeft < 0) {    timeLeft=0;  }  int hour=(int)(timeLeft / (60000L * 60));  timeLeft-=hour * 60 * 1000* 60;  int minute=(int)(timeLeft / 60000L);  timeLeft-=minute * 60 * 1000;  int seconds=(int)(timeLeft / 1000L);  timeLeft-=seconds * 1000;  int millis=(int)timeLeft;  return RaptorStringUtils.defaultTimeString(hour,2) + ":" + RaptorStringUtils.defaultTimeString(minute,2)+ ":"+ RaptorStringUtils.defaultTimeString(seconds,2)+ "."+ RaptorStringUtils.defaultTimeString(millis,1);}  }
class C{  public static int hashCode(final Object array){  return new HashCodeBuilder().append(array).toHashCode();}  }
class C{  protected void engineInit(SecureRandom random){  this.random=random;}  }
class C{  protected void tearDown(){}  }
class C{  public Object writeReplace(){  return this.delegate;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private BinderCache createCache(Class<?> classObject){  BinderCache cache=new BinderCache(classObject);  for (  TypeBinder<?> typeBinder : typeBinders) {    cache.register(typeBinder);  }  for (  FieldBinder<?> fieldBinder : fieldBinders) {    cache.register(fieldBinder);  }  for (  MethodBinder<?> methodBinder : methodBinders) {    cache.register(methodBinder);  }  return cache;}  }
class C{  public JSONObject put(String name,float value){  put(name,JSON.value(value));  return this;}  }
class C{  public void addRelation(ObjectName relationObjectName) throws IllegalArgumentException, RelationServiceNotRegisteredException, NoSuchMethodException, InvalidRelationIdException, InstanceNotFoundException, InvalidRelationServiceException, RelationTypeNotFoundException, RoleNotFoundException, InvalidRoleValueException {  if (relationObjectName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"addRelation",relationObjectName);  isActive();  if ((!(myMBeanServer.isInstanceOf(relationObjectName,"javax.management.relation.Relation")))) {    String excMsg="This MBean does not implement the Relation interface.";    throw new NoSuchMethodException(excMsg);  }  String relId;  try {    relId=(String)(myMBeanServer.getAttribute(relationObjectName,"RelationId"));  } catch (  MBeanException exc1) {    throw new RuntimeException((exc1.getTargetException()).getMessage());  }catch (  ReflectionException exc2) {    throw new RuntimeException(exc2.getMessage());  }catch (  AttributeNotFoundException exc3) {    throw new RuntimeException(exc3.getMessage());  }  if (relId == null) {    String excMsg="This MBean does not provide a relation id.";    throw new InvalidRelationIdException(excMsg);  }  ObjectName relServObjName;  try {    relServObjName=(ObjectName)(myMBeanServer.getAttribute(relationObjectName,"RelationServiceName"));  } catch (  MBeanException exc1) {    throw new RuntimeException((exc1.getTargetException()).getMessage());  }catch (  ReflectionException exc2) {    throw new RuntimeException(exc2.getMessage());  }catch (  AttributeNotFoundException exc3) {    throw new RuntimeException(exc3.getMessage());  }  boolean badRelServFlag=false;  if (relServObjName == null) {    badRelServFlag=true;  } else   if (!(relServObjName.equals(myObjName))) {    badRelServFlag=true;  }  if (badRelServFlag) {    String excMsg="The Relation Service referenced in the MBean is not the current one.";    throw new InvalidRelationServiceException(excMsg);  }  String relTypeName;  try {    relTypeName=(String)(myMBeanServer.getAttribute(relationObjectName,"RelationTypeName"));  } catch (  MBeanException exc1) {    throw new RuntimeException((exc1.getTargetException()).getMessage());  }catch (  ReflectionException exc2) {    throw new RuntimeException(exc2.getMessage());  }catch (  AttributeNotFoundException exc3) {    throw new RuntimeException(exc3.getMessage());  }  if (relTypeName == null) {    String excMsg="No relation type provided.";    throw new RelationTypeNotFoundException(excMsg);  }  RoleList roleList;  try {    roleList=(RoleList)(myMBeanServer.invoke(relationObjectName,"retrieveAllRoles",null,null));  } catch (  MBeanException exc1) {    throw new RuntimeException((exc1.getTargetException()).getMessage());  }catch (  ReflectionException exc2) {    throw new RuntimeException(exc2.getMessage());  }  addRelationInt(false,null,relationObjectName,relId,relTypeName,roleList);synchronized (myRelMBeanObjName2RelIdMap) {    myRelMBeanObjName2RelIdMap.put(relationObjectName,relId);  }  try {    myMBeanServer.setAttribute(relationObjectName,new Attribute("RelationServiceManagementFlag",Boolean.TRUE));  } catch (  Exception exc) {  }  List<ObjectName> newRefList=new ArrayList<ObjectName>();  newRefList.add(relationObjectName);  updateUnregistrationListener(newRefList,null);  RELATION_LOGGER.exiting(RelationService.class.getName(),"addRelation");  return;}  }
class C{  public boolean isCompatibleWithClothes(){  return !(body > 80 && body < 99);}  }
class C{  public void performUpdate(){  myTreeBuilder.performUpdate();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_1__CONSTRAINT_EXPR_1:    getConstraintExpr_1().clear();  getConstraintExpr_1().addAll((Collection<? extends ConstraintExpr_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public DataSet simulateData(int sampleSize,long seed,boolean latentDataSaved){  RandomUtil random=RandomUtil.getInstance();  long _seed=random.getSeed();  random.setSeed(seed);  DataSet dataSet=simulateData(sampleSize,latentDataSaved);  random.revertSeed(_seed);  return dataSet;}  }
class C{  public static void fill(byte[] a,byte val){  fill(a,0,a.length,val);}  }
class C{  public void visitTypeVariable(String name){}  }
class C{  public static String convertPathCharsFromLink(String path){  String uriPath;  try {    uriPath=(new URI(path)).getPath();  } catch (  URISyntaxException ex) {    return null;  }  return UriUtils.trimPathSlashes(uriPath).replace('/','-');}  }
class C{  public void connect(Object device,int portNum){  new ConnectThread(this,String.valueOf(device),portNum).start();}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  private void loadSettings(final ProLogSettings settings){  v_enableAILogging.setSelected(settings.EnableAILogging);  if (settings.AILoggingDepth.equals(Level.FINE)) {    v_logDepth.setSelectedIndex(0);  } else   if (settings.AILoggingDepth.equals(Level.FINER)) {    v_logDepth.setSelectedIndex(1);  } else   if (settings.AILoggingDepth.equals(Level.FINEST)) {    v_logDepth.setSelectedIndex(2);  }  v_limitLogHistoryCB.setSelected(settings.LimitLogHistory);  v_limitLogHistoryToSpinner.setValue(settings.LimitLogHistoryTo);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Burner.getGlobalBurner().isComplete()) {    if (Burner.getGlobalBurner().wasSuccessful())     return Boolean.TRUE; else     return "Error";  } else   return Burner.getGlobalBurner().getStatusMessage();}  }
class C{  MethodType asCollectorType(Class<?> arrayType,int arrayLength){  assert (parameterCount() >= 1);  assert (lastParameterType().isAssignableFrom(arrayType));  MethodType res;  if (arrayType == Object[].class) {    res=genericMethodType(arrayLength);    if (rtype != Object.class) {      res=res.changeReturnType(rtype);    }  } else {    Class<?> elemType=arrayType.getComponentType();    assert (elemType != null);    res=methodType(rtype,Collections.nCopies(arrayLength,elemType));  }  if (ptypes.length == 1) {    return res;  } else {    return res.insertParameterTypes(0,parameterList().subList(0,ptypes.length - 1));  }}  }
class C{  @Ignore @Test public void testLimitQueryForStructBagWithRangeIndex(){  try {    Query query;    SelectResults result;    String queryString="SELECT * FROM /portfolios pf, pf.positions.values pos WHERE pf.ID > 1  AND pos.secId = 'GOOG' limit 1";    query=qs.newQuery(queryString);    MyQueryObserverAdapter observer=new MyQueryObserverAdapter();    QueryObserver old=QueryObserverHolder.setInstance(observer);    Index index=qs.createIndex("idIndex","pf.ID","/portfolios pf");    Index posindex=qs.createIndex("posIndex","pos.secId","/portfolios pf, pf.positions.values pos");    assertNotNull(index);    assertNotNull(posindex);    result=(SelectResults)query.execute();    assertEquals(1,result.size());    assertFalse(observer.limitAppliedAtIndex);  } catch (  Exception e) {    CacheUtils.getLogger().error(e);    fail(e.toString());  } finally {    QueryObserverHolder.setInstance(new QueryObserverAdapter());  }}  }
class C{  public SortParameterUnsupportedDirectionException(){  super(SpServerError.SP_REST_SORT_PARAM_INVALID_DIRECTION);}  }
class C{  public static CtMethod make(MethodInfo minfo,CtClass declaring) throws CannotCompileException {  if (declaring.getClassFile2().getConstPool() != minfo.getConstPool())   throw new CannotCompileException("bad declaring class");  return new CtMethod(minfo,declaring);}  }
class C{  public int compare(Object obj1,Object obj2){  GlobalTransaction gtx1=(GlobalTransaction)obj1;  GlobalTransaction gtx2=(GlobalTransaction)obj2;  return gtx1.compare(gtx2);}  }
class C{  private void wakeUp(){  lock.lock();  try {    cond.signalAll();  }  finally {    lock.unlock();  }}  }
class C{  @Override public Thread scheduleCollectorContext(CollectorContext context){  Trace.trace(Item.SCHEDULER,"Scheduling new collector");  CollectorThread t=new CollectorThread(this,context,false);  collectorThreads.add(t);  context.initCollector(collectorThreads.size());  return t;}  }
class C{  public static int maxIndex(float[] vals){  int maxIndex=0;  for (int i=1; i < vals.length; i++) {    float newnumber=vals[i];    if ((newnumber > vals[maxIndex])) {      maxIndex=i;    }  }  return maxIndex;}  }
class C{  @Override public String isExportFormatSupported(String mimeType){  return Exportable.FORMAT_NOT_SUPPORTED;}  }
class C{  static public String executeFunction(String function,Variables variables,String addtlString){  try {    if (!FunctionHandler.validFunction(function))     return null;    String[] values=getValues(function);    substituteVariables(values,variables);    if (values[1].equalsIgnoreCase("date"))     return DateFunctions.executeFunction(values); else     if (values[1].equalsIgnoreCase("monetary"))     return MonetaryFunctions.executeFunction(values); else     if (values[1].equalsIgnoreCase("numeric"))     return NumericFunctions.executeFunction(values,variables); else     if (values[1].equalsIgnoreCase("string"))     return StringFunctions.executeFunction(values,variables,addtlString); else     if (values[1].equalsIgnoreCase("generic"))     return GenericFunctions.executeFunction(values,variables); else     if (values[1].equalsIgnoreCase("datatype"))     return DataTypeFunctions.executeFunction(values); else     if (values[1].equalsIgnoreCase("tax"))     return TaxFunctions.executeFunction(values,variables);    return null;  } catch (  Exception ex) {    logger.error(LogUtil.getLogMessage(ex.toString()),ex);    return null;  }}  }
class C{  public static FluxSource ofUnbounded(){  return new FluxSource();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.FUNCTION_EXPRESSION__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);case N4JSPackage.FUNCTION_EXPRESSION__TYPE_VARS:  return ((InternalEList<?>)getTypeVars()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  void acknowledgeCancel(){  boolean shouldStartFlow=false;synchronized (this) {    if (runState == CANCEL_REQUESTED) {      runState=IDLE;      intermediateValue=initialValue;      shouldStartFlow=restartNeeded;    }  }  if (shouldStartFlow) {    maybeStartFlow();  }}  }
class C{  public TipoDocumentoVitalVO insertTipoDocumentoVital(TipoDocumentoVitalVO tipo){  checkPermission(DocumentosVitalesSecurityManager.EDICION_DOCUMENTOS_VITALES_ACTION);  LoggingEvent event=AuditoriaDocumentosVitales.getLogginEvent(this,ArchivoActions.DOCUMENTOS_VITALES_MODULE_ALTA_TIPO);  iniciarTransaccion();  tipo=tipoDocumentoVitalDBEntity.insertTipoDocumentoVital(tipo);  Locale locale=getServiceClient().getLocale();  AuditoriaDocumentosVitales.auditaAltaTipoDocumentoVital(locale,event,tipo);  commit();  return tipo;}  }
class C{  public LWL(Regressor regressor,int k,DistanceMetric dm,KernelFunction kf,VectorCollectionFactory<VecPaired<Vec,Double>> vcf){  setRegressor(regressor);  setNeighbors(k);  setDistanceMetric(dm);  setKernelFunction(kf);  this.vcf=vcf;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.208 -0500",hash_original_method="67E8EBD2906BCEC3B5F02757CFDC6836",hash_generated_method="0F21D589345DAE214FD9040C8112095B") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("UserAgentParser.parse");  UserAgent userAgent=new UserAgent();  try {    headerName(TokenTypes.USER_AGENT);    if (this.lexer.lookAhead(0) == '\n')     throw createParseException("empty header");    while (this.lexer.lookAhead(0) != '\n' && this.lexer.lookAhead(0) != '\0') {      if (this.lexer.lookAhead(0) == '(') {        String comment=this.lexer.comment();        userAgent.addProductToken('(' + comment + ')');      } else {        this.getLexer().SPorHT();        String product=this.lexer.byteStringNoSlash();        if (product == null)         throw createParseException("Expected product string");        StringBuffer productSb=new StringBuffer(product);        if (this.lexer.peekNextToken().getTokenType() == TokenTypes.SLASH) {          this.lexer.match(TokenTypes.SLASH);          this.getLexer().SPorHT();          String productVersion=this.lexer.byteStringNoSlash();          if (productVersion == null)           throw createParseException("Expected product version");          productSb.append("/");          productSb.append(productVersion);        }        userAgent.addProductToken(productSb.toString());      }      this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("UserAgentParser.parse");  }  return userAgent;}  }
class C{  public void remove(int childRow){  int parentRow=m_childToParent.getInt(childRow);  m_childToParent.setInt(-1,childRow);  m_parentToChild.remove(parentRow);}  }
class C{  public void add(Record[] records){  for (int i=0; i < records.length; i++)   add(records[i]);}  }
class C{  public static String toString(byte value){  return Integer.toString(value);}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,char[][] arrays,int nbatches) throws Exception {  int ncycles=arrays.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(arrays[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  private static ValueNumber[] allocateValueNumberArray(int size){  if (size == 0) {    return EMPTY_INPUT_VALUE_LIST;  }  return new ValueNumber[size];}  }
class C{  public boolean isDeclareNamespaceAttributes(){  return declareNamespaceAttributes;}  }
class C{  private void writeSensorData(ArrayList<Integer> list,String name){  printWriter.println("<gx:SimpleArrayData name=\"" + name + "\">");  for (int i=0; i < list.size(); i++) {    printWriter.println("<gx:value>" + list.get(i) + "</gx:value>");  }  printWriter.println("</gx:SimpleArrayData>");}  }
class C{  public static byte[] combine(String rootname,List<String> fragments,String schemaHeader){  final StringBuilder buffer=new StringBuilder();  buffer.append(HEADER);  buffer.append(String.format("<%s %s>%n",rootname,schemaHeader));  for (  final String f : fragments) {    buffer.append(String.format("%s%n",f));  }  buffer.append(String.format("</%s>%n",rootname));  return toUTF8(buffer.toString());}  }
class C{  BluetoothSap(Context context,ServiceListener l){  mContext=context;  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  try {    mAdapter.getBluetoothManager().registerStateChangeCallback(mStateChangeCallback);  } catch (  RemoteException re) {    Log.w(TAG,"Unable to register BluetoothStateChangeCallback",re);  }  Log.d(TAG,"BluetoothSap() call bindService");  if (!context.bindService(new Intent(IBluetoothSap.class.getName()),mConnection,0)) {    Log.e(TAG,"Could not bind to Bluetooth SAP Service");  }  Log.d(TAG,"BluetoothSap(), bindService called");}  }
class C{  static void add(JarOutputStream jar,Class<?> c) throws IOException {  String name=c.getName();  String classAsPath=name.replace('.','/') + ".class";  jar.putNextEntry(new JarEntry(classAsPath));  InputStream stream=c.getClassLoader().getResourceAsStream(classAsPath);  int nRead;  byte[] buf=new byte[1024];  while ((nRead=stream.read(buf,0,buf.length)) != -1) {    jar.write(buf,0,nRead);  }  jar.closeEntry();}  }
class C{  public AnnotationMemberValue(Annotation a,ConstPool cp){  super('@',cp);  value=a;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.ATTRIBUTE__NAME:    setName(NAME_EDEFAULT);  return;case MappingPackage.ATTRIBUTE__VALUE:setValue(VALUE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static IMethod findMethod(IMethod method,IType type) throws JavaModelException {  return findMethod(method.getElementName(),method.getParameterTypes().length,method.isConstructor(),type.getMethods());}  }
class C{  public void discoverSignallingDest(SignalMast source,LayoutEditor layout) throws JmriException {  firePropertyChange("autoSignalMastGenerateStart",null,source.getDisplayName());  Hashtable<NamedBean,List<NamedBean>> validPaths=new Hashtable<NamedBean,List<NamedBean>>();  jmri.jmrit.display.layoutEditor.LayoutBlockManager lbm=InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class);  if (!lbm.isAdvancedRoutingEnabled()) {    throw new JmriException("advanced routing not enabled");  }  if (!lbm.routingStablised()) {    throw new JmriException("routing not stablised");  }  try {    validPaths.put(source,lbm.getLayoutBlockConnectivityTools().discoverPairDest(source,layout,SignalMast.class,LayoutBlockConnectivityTools.MASTTOMAST));  } catch (  JmriException e) {    throw e;  }  Enumeration<NamedBean> en=validPaths.keys();  while (en.hasMoreElements()) {    SignalMast key=(SignalMast)en.nextElement();    SignalMastLogic sml=getSignalMastLogic(key);    if (sml == null) {      sml=newSignalMastLogic(key);    }    List<NamedBean> validDestMast=validPaths.get(key);    for (int i=0; i < validDestMast.size(); i++) {      if (!sml.isDestinationValid((SignalMast)validDestMast.get(i))) {        try {          sml.setDestinationMast((SignalMast)validDestMast.get(i));          sml.useLayoutEditorDetails(true,true,(SignalMast)validDestMast.get(i));          sml.useLayoutEditor(true,(SignalMast)validDestMast.get(i));        } catch (        JmriException e) {          log.error("Exception found when adding pair " + source.getDisplayName() + " to destination "+ validDestMast.get(i).getDisplayName()+ "\n"+ e.toString());        }      }    }    if (sml.getDestinationList().size() == 1 && sml.getAutoTurnouts(sml.getDestinationList().get(0)).size() == 0) {      key.setProperty("intermediateSignal",true);    } else {      key.removeProperty("intermediateSignal");    }  }  initialise();  firePropertyChange("autoSignalMastGenerateComplete",null,source.getDisplayName());}  }
class C{  public String objectToXml(Object obj,boolean formatted) throws JAXBException {  JAXBContext requestContext=JAXBContext.newInstance(obj.getClass());  Marshaller requestMarshaller=requestContext.createMarshaller();  if (formatted) {    requestMarshaller.setProperty(Marshaller.JAXB_ENCODING,StandardCharsets.UTF_8.name());    requestMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);  }  requestMarshaller.setProperty(MarshallerProperties.CHARACTER_ESCAPE_HANDLER,herdCharacterEscapeHandler);  StringWriter sw=new StringWriter();  requestMarshaller.marshal(obj,sw);  return sw.toString();}  }
class C{  public void add_return(java.lang.String param){  if (local_return == null) {    local_return=new java.lang.String[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  private void queueStateChangedNotification(long sequence,long time,ScanState old,ScanState current){  final AttributeChangeNotification n=new AttributeChangeNotification(SCAN_MANAGER_NAME,sequence,time,"ScanManager State changed to " + current,"State",ScanState.class.getName(),old.toString(),current.toString());  try {    if (!pendingNotifs.offer(n,2,TimeUnit.SECONDS)) {      LOG.fine("Can't queue Notification: " + n);    }  } catch (  InterruptedException x) {    LOG.fine("Can't queue Notification: " + x);  }}  }
class C{  public static final int floorDivide(long n,int d,int[] r){  if (n >= 0) {    r[0]=(int)(n % d);    return (int)(n / d);  }  int q=(int)(((n + 1) / d) - 1);  r[0]=(int)(n - (q * d));  return q;}  }
class C{  public static Process exec(List<String> args) throws IOException {  if (VersionHelper.getVersionSdkIntCompat() >= VersionHelper.VERSION_JELLYBEAN && RootUtil.isRooted()) {    Process process=Runtime.getRuntime().exec("su");    PrintStream outputStream=null;    try {      outputStream=new PrintStream(new BufferedOutputStream(process.getOutputStream(),8192));      outputStream.println(TextUtils.join(" ",args));      outputStream.flush();    }  finally {      if (outputStream != null) {        outputStream.close();      }    }    return process;  }  return Runtime.getRuntime().exec(ArrayUtil.toArray(args,String.class));}  }
class C{  public void performStopOperationAsync(final String vmId,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/stop",getBasePath(),vmId);  createObjectAsync(path,null,responseCallback);}  }
class C{  protected void sequence_HexEscapeSequence_Term(ISerializationContext context,HexEscapeSequence semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String decrypt(String str){  if (StringUtil.isEmpty(str) || !StringUtil.startsWithIgnoreCase(str,"encrypted:"))   return str;  str=str.substring(10);  return new BlowfishEasy("sdfsdfs").decryptString(str);}  }
class C{  public NodeSet(){  m_blocksize=32;  m_mapSize=0;}  }
class C{  public WorksheetEntry(){  getCategories().add(CATEGORY);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void activateTriggers(final UserActionAttachment uaa){  UserActionAttachment.fireTriggers(uaa,getTestedConditions(),m_bridge);}  }
class C{  ParseHttpClient awsClient(){synchronized (lock) {    if (awsClient == null) {      awsClient=ParsePlugins.get().newHttpClient();    }    return awsClient;  }}  }
class C{  public ServiceCall<TranslationResult> translate(final String text,final Language source,final Language target){  return translate(Collections.singletonList(text),source,target);}  }
class C{  public final boolean hasArray(){  return false;}  }
class C{  @SuppressWarnings("unchecked") @SneakyThrows public T invoke(Object instance,Object arg1){  try {    return (T)invoker.invoke(instance,arg1);  } catch (  ClassCastException|WrongMethodTypeException e) {    validateArgs(instance,arg1);    throw new AssertionError("Unknown error",e);  }}  }
class C{  @Override public void show(){  show(0,0);}  }
class C{  public void handleEvent(Event evt){  MutationEvent mevt=(MutationEvent)evt;  Node parent=mevt.getRelatedNode();  if (!(parent instanceof XBLOMDefinitionElement)) {    return;  }  EventTarget target=evt.getTarget();  if (!(target instanceof XBLOMTemplateElement)) {    return;  }  XBLOMTemplateElement template=(XBLOMTemplateElement)target;  DefinitionRecord defRec=(DefinitionRecord)definitions.get(parent,importElement);  if (defRec == null || defRec.template != template) {    return;  }  ImportRecord ir=(ImportRecord)imports.get(importElement);  removeTemplateElementListeners(template,ir);  defRec.template=null;  for (Node n=template.getNextSibling(); n != null; n=n.getNextSibling()) {    if (n instanceof XBLOMTemplateElement) {      defRec.template=(XBLOMTemplateElement)n;      break;    }  }  addTemplateElementListeners(defRec.template,ir);  rebind(defRec.namespaceURI,defRec.localName,document.getDocumentElement());}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  static public void handshake(final Context c,final Context s) throws Exception {  byte[] t=new byte[0];  while (true) {    if (t != null || !c.x.isEstablished())     t=c.take(t);    if (t != null || !s.x.isEstablished())     t=s.take(t);    if (c.x.isEstablished() && s.x.isEstablished())     break;  }}  }
class C{  public static boolean processDefinedGlobalScalarNames(Project project,Processor<String> processor){  return PerlStubIndex.getInstance().processAllKeys(PerlVariablesStubIndex.KEY_SCALAR,project,processor);}  }
class C{  @Override public boolean writesIntoExistingData(){  return false;}  }
class C{  @Override public void clearRouteSensors(){  _controlSensorList=new ArrayList<>();}  }
class C{  public Recharge(Amount amount,int costStep,MetaData metaData){  this.amount=amount;  this.costStep=costStep;  this.metaData=metaData;  currentAmount=amount.initial;  currentCost=costStep;}  }
class C{  public static Class<?> loadClass(String className) throws ClassNotFoundException {  return loadClass(className,null);}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  int n=a.length;  sort(a);  for (int i=0; i < n; i++)   StdOut.println(a[i]);}  }
class C{  protected Object _bind(JsonParser jp) throws IOException, JsonParseException, JsonMappingException {  Object result;  JsonToken t=_initForReading(jp);  if (t == JsonToken.VALUE_NULL) {    if (_valueToUpdate == null) {      result=_findRootDeserializer(_config,_valueType).getNullValue();    } else {      result=_valueToUpdate;    }  } else   if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {    result=_valueToUpdate;  } else {    DeserializationContext ctxt=_createDeserializationContext(jp,_config);    JsonDeserializer<Object> deser=_findRootDeserializer(_config,_valueType);    if (_unwrapRoot) {      result=_unwrapAndDeserialize(jp,ctxt,_valueType,deser);    } else {      if (_valueToUpdate == null) {        result=deser.deserialize(jp,ctxt);      } else {        deser.deserialize(jp,ctxt,_valueToUpdate);        result=_valueToUpdate;      }    }  }  jp.clearCurrentToken();  return result;}  }
class C{  protected void clearEdges(){  getEdgeTable().clear();}  }
class C{  @Override public void onCompletion(int token,Uri uri){  if (token == INSERT_RAW_CONTACT) {    final ContentValues values=makeRawContactData(getArgs().getIterator().next(),uri);    getArgs().getAdapter().startInsert(this,INSERT_RAW_CONTACT_DATA,Data.CONTENT_URI,values);  } else   if (token == INSERT_RAW_CONTACT_DATA) {    getArgs().getCounter().increment();    executeImpl();  }}  }
class C{  protected void showPopupDialog(Dialog dialog){  dialog.setPopupDirectionBiasPortrait(Boolean.TRUE);  dialog.showPopupDialog(this);}  }
class C{  public static boolean isView(Table table){  return TableType.VIRTUAL_VIEW.name().equals(table.getTableType());}  }
class C{  public Builder withLogIndex(long index){  request.logIndex=Assert.argNot(index,index < 0,"log index must not be negative");  return this;}  }
class C{  protected void engineInit(Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  generateSecret=false;  init_p=null;  init_g=null;  if ((params != null) && !(params instanceof DHParameterSpec)) {    throw new InvalidAlgorithmParameterException("Diffie-Hellman parameters expected");  }  if (!(key instanceof javax.crypto.interfaces.DHPrivateKey)) {    throw new InvalidKeyException("Diffie-Hellman private key " + "expected");  }  javax.crypto.interfaces.DHPrivateKey dhPrivKey;  dhPrivKey=(javax.crypto.interfaces.DHPrivateKey)key;  if (params != null) {    init_p=((DHParameterSpec)params).getP();    init_g=((DHParameterSpec)params).getG();  }  BigInteger priv_p=dhPrivKey.getParams().getP();  BigInteger priv_g=dhPrivKey.getParams().getG();  if (init_p != null && priv_p != null && !(init_p.equals(priv_p))) {    throw new InvalidKeyException("Incompatible parameters");  }  if (init_g != null && priv_g != null && !(init_g.equals(priv_g))) {    throw new InvalidKeyException("Incompatible parameters");  }  if ((init_p == null && priv_p == null) || (init_g == null && priv_g == null)) {    throw new InvalidKeyException("Missing parameters");  }  init_p=priv_p;  init_g=priv_g;  this.x=dhPrivKey.getX();}  }
class C{  public static void ICONST_5(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ICONST_5();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  String validateRouteReference(String name){  Route r=null;  if (name != null) {    if (name.length() > 0) {      r=InstanceManager.getDefault(jmri.RouteManager.class).getByUserName(name);      if (r != null) {        return name;      }    }    r=InstanceManager.getDefault(jmri.RouteManager.class).getBySystemName(name);  }  if (r == null) {    messageInvalidActionItemName(name,"Route");    return null;  }  return name;}  }
class C{  Account(int newId,double newBalance){  id=newId;  balance=newBalance;  dateCreated=new Date();}  }
class C{  static <T>GeneralRange<T> all(Comparator<? super T> comparator){  return new GeneralRange<T>(comparator,false,null,OPEN,false,null,OPEN);}  }
class C{  public void stop(){  running=false;}  }
class C{  public boolean okToSend(){  return true;}  }
class C{  public void unregisterDownloadStatusListener(OnFileDownloadStatusListener onFileDownloadStatusListener){  getDownloadTaskManager().unregisterDownloadStatusListener(onFileDownloadStatusListener);}  }
class C{  WorkgroupQueue(String name){  this.name=name;}  }
class C{  @Override public boolean isLoggedIn(){  HttpServletRequest request=getRequest();  HttpSession session=request.getSession(false);  if (session != null) {    request.setAttribute(Constants.REQ_PARAM_MARKETPLACE_ID,session.getAttribute(Constants.REQ_PARAM_MARKETPLACE_ID));  }  return session != null && SessionListener.cleanup(session);}  }
class C{  public static int deleteN(char s[],int pos,int len,int nChars){  assert pos + nChars <= len;  if (pos + nChars < len) {    System.arraycopy(s,pos + nChars,s,pos,len - pos - nChars);  }  return len - nChars;}  }
class C{  public OFRoleVendorData(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.543 -0500",hash_original_method="E60762F1048604C69EBEEFFB1108CCA7",hash_generated_method="D7F57C172E88386FD52BD254A2E2CA69") public boolean remove(final URI uri){  return this.uris.remove(uri);}  }
class C{  @Override public void updateBytes(int columnIndex,byte[] x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBytes(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueBytes.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void refreshNewDocument(int id,int newDocId,int newParentDocId,FolderDocUpdIds docUpdIds) throws Exception {  m_documents.refreshNewDocument(id,newDocId,newParentDocId,docUpdIds);}  }
class C{  public DagToPag2(Graph dag){  this.dag=dag;}  }
class C{  private boolean isFlags(int f){  return ((flags & f) == f);}  }
class C{  public void listenerPaint(Object source,Graphics g){  MapBean mapBean=source instanceof MapBean ? (MapBean)source : null;  if (azPanner != null) {    azPanner.render(g);  } else   if (mapBean != null) {    mapBean.removePaintListener(this);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ModelPackage.MODEL_REFERENCE__VERSION:    return getVersion();case ModelPackage.MODEL_REFERENCE__IMPORTED_NAMESPACE:  return getImportedNamespace();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String toSourceCode(ObjectMatrix2D matrix){  Formatter copy=(Formatter)this.clone();  String b3=blanks(3);  copy.setPrintShape(false);  copy.setColumnSeparator(", ");  copy.setRowSeparator("},\n" + b3 + "{");  String lead="{\n" + b3 + "{";  String trail="}\n};";  return lead + copy.toString(matrix) + trail;}  }
class C{  private static String[] splitInTwo(String value,char separator) throws ParserException {  Pattern splitter=Pattern.compile(Pattern.quote(String.valueOf(separator)));  String split[]=splitter.split(value,3);  if (split.length != 2 || split[0].isEmpty() || split[1].isEmpty()) {    throw new ParserException(String.format("Invalid principal value: `%s' (incorrect number of fields)",value));  }  return split;}  }
class C{  private void handleHostApEvents(String dataString){  String[] tokens=dataString.split(" ");  if (tokens[0].equals(AP_STA_CONNECTED_STR)) {    mStateMachine.sendMessage(AP_STA_CONNECTED_EVENT,new WifiP2pDevice(dataString));  } else   if (tokens[0].equals(AP_STA_DISCONNECTED_STR)) {    mStateMachine.sendMessage(AP_STA_DISCONNECTED_EVENT,new WifiP2pDevice(dataString));  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  TransformerImpl transformer=(TransformerImpl)xctxt.getOwnerObject();  XNodeSet nodes=null;  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int docContext=dtm.getDocumentRoot(context);  if (DTM.NULL == docContext) {  }  String xkeyname=getArg0().execute(xctxt).str();  QName keyname=new QName(xkeyname,xctxt.getNamespaceContext());  XObject arg=getArg1().execute(xctxt);  boolean argIsNodeSetDTM=(XObject.CLASS_NODESET == arg.getType());  KeyManager kmgr=transformer.getKeyManager();  if (argIsNodeSetDTM) {    XNodeSet ns=(XNodeSet)arg;    ns.setShouldCacheNodes(true);    int len=ns.getLength();    if (len <= 1)     argIsNodeSetDTM=false;  }  if (argIsNodeSetDTM) {    Hashtable usedrefs=null;    DTMIterator ni=arg.iter();    int pos;    UnionPathIterator upi=new UnionPathIterator();    upi.exprSetParent(this);    while (DTM.NULL != (pos=ni.nextNode())) {      dtm=xctxt.getDTM(pos);      XMLString ref=dtm.getStringValue(pos);      if (null == ref)       continue;      if (null == usedrefs)       usedrefs=new Hashtable();      if (usedrefs.get(ref) != null) {        continue;      } else {        usedrefs.put(ref,ISTRUE);      }      XNodeSet nl=kmgr.getNodeSetDTMByKey(xctxt,docContext,keyname,ref,xctxt.getNamespaceContext());      nl.setRoot(xctxt.getCurrentNode(),xctxt);      upi.addIterator(nl);    }    int current=xctxt.getCurrentNode();    upi.setRoot(current,xctxt);    nodes=new XNodeSet(upi);  } else {    XMLString ref=arg.xstr();    nodes=kmgr.getNodeSetDTMByKey(xctxt,docContext,keyname,ref,xctxt.getNamespaceContext());    nodes.setRoot(xctxt.getCurrentNode(),xctxt);  }  return nodes;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.011 -0400",hash_original_method="5780A6D38C00EE785E1226D34A2F2A1C",hash_generated_method="C62CD7D9232FB3B13FFF56C16B43448B") public final void info(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {    log(SimpleLog.LOG_LEVEL_INFO,message,t);  }}  }
class C{  public static long[] orI(long[] v,long[] o,int off){  if (off == 0) {    return orI(v,o);  }  if (off < 0) {    throw new UnsupportedOperationException("Negative shifts are not supported.");  }  final int shiftWords=off >>> LONG_LOG2_SIZE;  final int shiftBits=off & LONG_LOG2_MASK;  if (shiftWords >= v.length) {    return v;  }  if (shiftBits == 0) {    final int end=Math.min(v.length,o.length + shiftWords);    for (int i=shiftWords; i < end; i++) {      v[i]|=o[i - shiftWords];    }    return v;  }  final int unshiftBits=Long.SIZE - shiftBits;  final int end=Math.min(v.length,o.length + shiftWords) - 1;  for (int i=end; i > shiftWords; i--) {    final int src=i - shiftWords;    v[i]|=(o[src] << shiftBits) | (o[src - 1] >>> unshiftBits);  }  v[shiftWords]|=o[0] << shiftBits;  return v;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE___TRACE_DIRECTIVE_1:    return traceDirective_1 != null && !traceDirective_1.isEmpty();case UmplePackage.TRACE___TRACE_CASE_1:  return traceCase_1 != null && !traceCase_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private static String replace(String text,Map<String,String> vars,String prefix){  for (  Entry<String,String> var : vars.entrySet())   text=text.replaceAll(Pattern.quote(prefix + var.getKey()),Matcher.quoteReplacement(var.getValue()));  return text;}  }
class C{  @Inline private void fastPath(Address slot,ObjectReference tgt){  if (Gen.GATHER_WRITE_BARRIER_STATS)   Gen.wbFast.inc();  if (Gen.inNursery(tgt)) {    if (Gen.GATHER_WRITE_BARRIER_STATS)     Gen.wbSlow.inc();    remset.insert(slot);  }}  }
class C{  public void cache(Object key,T value){  put(key,value);}  }
class C{  public long length(byte[] id){  ByteBuffer idBuffer=ByteBuffer.wrap(id);  long length=0;  while (idBuffer.hasRemaining()) {switch (idBuffer.get()) {case 0:      int len=DataUtils.readVarInt(idBuffer);    idBuffer.position(idBuffer.position() + len);  length+=len;break;case 1:length+=DataUtils.readVarInt(idBuffer);DataUtils.readVarLong(idBuffer);break;case 2:length+=DataUtils.readVarLong(idBuffer);DataUtils.readVarLong(idBuffer);break;default :throw DataUtils.newIllegalArgumentException("Unsupported id {0}",Arrays.toString(id));}}return length;}  }
class C{  public static void swap(int[] arr,int index1,int index2){  if (index1 == index2) {  } else {    int tmp=arr[index1];    arr[index1]=arr[index2];    arr[index2]=tmp;  }}  }
class C{  public MultiMatchQueryBuilder analyzer(String analyzer){  this.analyzer=analyzer;  return this;}  }
class C{  public static EnumVerticalRotation fromIndex(int index){  return VALUES[MathHelper.abs_int(index % VALUES.length)];}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  public OutlierResult run(Database database,Relation<N> spatial,Relation<O> attributes){  final int dim=RelationUtil.dimensionality(attributes);  if (LOG.isDebugging()) {    LOG.debug("Dimensionality: " + dim);  }  final NeighborSetPredicate npred=getNeighborSetPredicateFactory().instantiate(database,spatial);  CovarianceMatrix covmaker=new CovarianceMatrix(dim);  WritableDataStore<double[]> deltas=DataStoreUtil.makeStorage(attributes.getDBIDs(),DataStoreFactory.HINT_TEMP,double[].class);  for (DBIDIter iditer=attributes.iterDBIDs(); iditer.valid(); iditer.advance()) {    final O obj=attributes.get(iditer);    final DBIDs neighbors=npred.getNeighborDBIDs(iditer);    final double[] median=new double[dim];{      double[][] data=new double[dim][neighbors.size()];      int i=0;      for (DBIDIter iter=neighbors.iter(); iter.valid(); iter.advance()) {        O nobj=attributes.get(iter);        for (int d=0; d < dim; d++) {          data[d][i]=nobj.doubleValue(d);        }        i++;      }      for (int d=0; d < dim; d++) {        median[d]=QuickSelect.median(data[d]);      }    }    double[] delta=minusEquals(obj.toArray(),median);    deltas.put(iditer,delta);    covmaker.put(delta);  }  double[] mean=covmaker.getMeanVector();  double[][] cmati=inverse(covmaker.destroyToSampleMatrix());  DoubleMinMax minmax=new DoubleMinMax();  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(attributes.getDBIDs(),DataStoreFactory.HINT_STATIC);  for (DBIDIter iditer=attributes.iterDBIDs(); iditer.valid(); iditer.advance()) {    final double score=mahalanobisDistance(cmati,deltas.get(iditer),mean);    minmax.put(score);    scores.putDouble(iditer,score);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("Median multiple attributes outlier","median-outlier",scores,attributes.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.0,Double.POSITIVE_INFINITY,0);  OutlierResult or=new OutlierResult(scoreMeta,scoreResult);  or.addChildResult(npred);  return or;}  }
class C{  public static String encode(String string){  return new String(encode(string.getBytes()));}  }
class C{  public TreeDepthItemSorter(){  this(false);}  }
class C{  public boolean isSipAutomata(){  return mSipAutomata;}  }
class C{  public static Object invokeInitializer(Class<?> cls,int methodID,Address argAddress,boolean isJvalue,boolean isDotDotStyle) throws Exception {  MemberReference mr=MemberReference.getMemberRef(methodID);  TypeReference tr=java.lang.JikesRVMSupport.getTypeForClass(cls).getTypeRef();  MethodReference methodRef=MemberReference.findOrCreate(tr,mr.getName(),mr.getDescriptor()).asMethodReference();  RVMMethod mth=methodRef.resolve();  Constructor<?> constMethod=java.lang.reflect.JikesRVMSupport.createConstructor(mth);  if (!mth.isPublic()) {    constMethod.setAccessible(true);  }  Address varargAddress;  if (isDotDotStyle) {    varargAddress=getVarArgAddress(false);  } else {    varargAddress=argAddress;  }  Object[] argObjs;  if (isJvalue) {    argObjs=packageParametersFromJValuePtr(methodRef,argAddress);  } else {    argObjs=packageParameterFromVarArg(methodRef,varargAddress);  }  return constMethod.newInstance(argObjs);}  }
class C{  private void loadAlreadyRegisteredActivity(){  Intent intent=new Intent(RegistrationActivity.this,AlreadyRegisteredActivity.class);  intent.putExtra(getResources().getString(R.string.intent_extra_fresh_reg_flag),true);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);}  }
class C{  private void reflectParametersInView(){  removeAllViews();  final int maxDimension=Math.max(inactiveDiameterPx,activeDiameterPx);  setLayoutParams(new LayoutParams(maxDimension,maxDimension));  setGravity(Gravity.CENTER);  final int diameter=(state == State.ACTIVE) ? activeDiameterPx : inactiveDiameterPx;  final int color=(state == State.ACTIVE) ? activeColor : inactiveColor;  shape=new ShapeDrawable(new OvalShape());  shape.setIntrinsicWidth(diameter);  shape.setIntrinsicHeight(diameter);  shape.getPaint().setColor(color);  drawableHolder=new ImageView(getContext());  drawableHolder.setImageDrawable(null);  drawableHolder.setImageDrawable(shape);  addView(drawableHolder);}  }
class C{  public ExpiringMap(){  this(DEFAULT_TIME_TO_LIVE,DEFAULT_EXPIRATION_INTERVAL);}  }
class C{  public static BlockChainConfiguration createBlockChainConfiguration(final int maxTransactionsPerSyncAttempt,final int maxTransactionsPerBlock,final int blockGenerationTargetTime,final int blockChainRewriteLimit){  return new BlockChainConfigurationBuilder().setMaxTransactionsPerSyncAttempt(maxTransactionsPerSyncAttempt).setMaxTransactionsPerBlock(maxTransactionsPerBlock).setBlockGenerationTargetTime(blockGenerationTargetTime).setBlockChainRewriteLimit(blockChainRewriteLimit).build();}  }
class C{  @CanIgnoreReturnValue public Builder<K,V> putAll(RangeMap<K,? extends V> rangeMap){  for (  Entry<Range<K>,? extends V> entry : rangeMap.asMapOfRanges().entrySet()) {    put(entry.getKey(),entry.getValue());  }  return this;}  }
class C{  public AndORNode(AndORNode parent){  this.parent=parent;}  }
class C{  public static <ST,A>XorTValue<ST,A> of(final AnyMValue<Xor<ST,A>> monads){  return new XorTValue<>(monads);}  }
class C{  protected static Pair<String,String> rrxRegister(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue){  final String shifterOperand=environment.getNextVariableString();  final String shifterCarryOut=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,byteSize,"C",wordSize,thirtyOneSet,dWordSize,tmpVar1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,byteSize,"-" + oneSet,dWordSize,tmpVar2));  instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,tmpVar1,dWordSize,tmpVar2,dWordSize,tmpVar3));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar3,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,registerNodeValue,byteSize,String.valueOf(1),byteSize,shifterCarryOut));  return new Pair<String,String>(shifterOperand,shifterCarryOut);}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public boolean removeParticle(VerletParticle3D p){  return particles.remove(p);}  }
class C{  public static String execToString(String command) throws Exception {  CommandLine commandline=CommandLine.parse(command);  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  PumpStreamHandler streamHandler=new PumpStreamHandler(outputStream);  DefaultExecutor exec=new DefaultExecutor();  exec.setExitValues(null);  exec.setStreamHandler(streamHandler);  exec.setWatchdog(new ExecuteWatchdog(5000));  try {    exec.execute(commandline);    return (outputStream.toString());  } catch (  Exception e) {    throw new Exception(String.format("%s - %s",outputStream.toString(),e.getMessage()));  }}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  super.onChangedRemoved(object,changes);  if (changes.has("amount")) {    amount=0;    fireChange(PROP_AMOUNT);  }}  }
class C{  public void addIssue(int reason,EObject obj,int featureId,String detail){  issues.add(new TransformationIssue(reason,obj,featureId,detail));}  }
class C{  public EncodingWriter create(String javaEncoding){  try {    return new OutputStreamEncodingWriter(javaEncoding);  } catch (  UnsupportedEncodingException e) {    log.log(Level.WARNING,e.toString(),e);    return null;  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public GuacamoleInvalidCredentialsException(String message,Throwable cause,CredentialsInfo credentialsInfo){  super(message,cause,credentialsInfo);}  }
class C{  public boolean isCached(){  return true;}  }
class C{  private void drawCircleUp(@NonNull Canvas canvas,float step,float radius){  canvas.drawCircle(xCoordinate + step,getMeasuredHeight() / 2,dotRadius + radius,startPaint);}  }
class C{  private IndexShardState changeState(IndexShardState newState,String reason){  logger.debug("state: [{}]->[{}], reason [{}]",state,newState,reason);  IndexShardState previousState=state;  state=newState;  this.indicesLifecycle.indexShardStateChanged(this,previousState,reason);  return previousState;}  }
class C{  public boolean isFirstLaunch(){  return SharedPreferenceHelper.getBoolean(R.string.pref_first_launch,true);}  }
class C{  public IgniteInternalFuture<?> createFromTemplate(String cacheName){  try {    CacheConfiguration cfg=createConfigFromTemplate(cacheName);    return dynamicStartCache(cfg,cacheName,null,true,true,true);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  private static int calculateInSampleSize(BitmapFactory.Options options,Context context){  final int height=options.outHeight;  final int width=options.outWidth;  int inSampleSize=1;  int h=DisplayUtils.getScreenHeight(context);  int w=DisplayUtils.getScreenWidth(context);  if (height > h || width > w) {    final int heightRatio=Math.round((float)height / (float)h);    final int widthRatio=Math.round((float)width / (float)w);    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;  }  return inSampleSize;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case BYTE_THING:    return isSetByte_thing();case STRUCT_THING:  return isSetStruct_thing();case I32_THING:return isSetI32_thing();}throw new IllegalStateException();}  }
class C{  private void loadFluxRuntimeContainer(){  logger.debug("loading flux runtime container");  final ConfigModule configModule=new ConfigModule();  fluxRuntimeContainer.modules(configModule,new HibernateModule(),new ContainerModule(),new DeploymentUnitModule(),new AkkaModule(),new TaskModule(),new FluxClientInterceptorModule());  fluxRuntimeContainer.registerConfigurationProvider(configModule.getConfigProvider());  fluxRuntimeContainer.prepare();}  }
class C{  public final void testIsSatisfiedFails(){  ContainsNumberConstraint containsNumberConstraint=new ContainsNumberConstraint();  assertFalse(containsNumberConstraint.isSatisfied("abcabc"));}  }
class C{  public boolean generate(Projection proj){  if (!updateImageForProjection(proj)) {    if (getNeedToReposition()) {      position(proj);      setShape();    } else {      setShape();      setNeedToRegenerate(false);      return true;    }  }  setShape(null);  if (!position(proj)) {    if (DEBUG) {      logger.fine("OMRaster.generate(): positioning failed!");    }    return false;  }  if (colorModel != COLORMODEL_IMAGEICON) {    if (bitmap == null || getNeedToRegenerate()) {      if (DEBUG) {        logger.fine("OMScalingRaster: generating image");      }      super.generate(proj);      setImage(bitmap);      pixels=null;      bits=null;    }  }  scaleTo(proj);  if (bitmap != null) {    if (corners == null) {      GeneralPath projectedShape=createBoxShape(point1.x,point1.y,point2.x - point1.x,point2.y - point1.y);      int w=bitmap.getWidth(this);      int h=bitmap.getHeight(this);      double anchorX=point1.x + w / 2;      double anchorY=point1.y + h / 2;      setShape(adjustShapeForRotation(projectedShape,anchorX,anchorY));    } else {      int numRects=corners.size();      GeneralPath projectedShape=null;      for (int i=0; i < numRects; i+=2) {        GeneralPath gp=createShape(corners.get(i),corners.get(i + 1),true);        projectedShape=appendShapeEdge(projectedShape,gp,false);      }      if (projectedShape != null) {        Rectangle rect=projectedShape.getBounds();        double anchorX=rect.getX() + rect.getWidth() / 2;        double anchorY=rect.getY() + rect.getHeight() / 2;        projectedShape=adjustShapeForRotation(projectedShape,anchorX,anchorY);      }      setShape(projectedShape);    }    setLabelLocation(getShape(),proj);    setNeedToRegenerate(false);  } else {    hasLabel=false;  }  return true;}  }
class C{  public static void testBiCubic(){  System.out.println("");  logger.info("-----Test of bicubic spline interpolation-----");  try {    out.write("\nbicubic spline interpolation \t\t  - \t\t");  } catch (  IOException e) {    e.printStackTrace();  }  interpolationTest(Interpolation.BICUBIC,3,3,Double.NaN);  interpolationTest(Interpolation.BICUBIC,10,10,Double.NaN);}  }
class C{  @Override public int compare(Solution solution1,Solution solution2){  setSameBox(false);  boolean dominate1=false;  boolean dominate2=false;  for (int i=0; i < solution1.getNumberOfObjectives(); i++) {    double epsilon=getEpsilon(i);    double index1=Math.floor(solution1.getObjective(i) / epsilon);    double index2=Math.floor(solution2.getObjective(i) / epsilon);    if (index1 < index2) {      dominate1=true;      if (dominate2) {        return 0;      }    } else     if (index1 > index2) {      dominate2=true;      if (dominate1) {        return 0;      }    }  }  if (!dominate1 && !dominate2) {    setSameBox(true);    double dist1=0.0;    double dist2=0.0;    for (int i=0; i < solution1.getNumberOfObjectives(); i++) {      double epsilon=getEpsilon(i);      double index1=Math.floor(solution1.getObjective(i) / epsilon);      double index2=Math.floor(solution2.getObjective(i) / epsilon);      dist1+=Math.pow(solution1.getObjective(i) - index1 * epsilon,2.0);      dist2+=Math.pow(solution2.getObjective(i) - index2 * epsilon,2.0);    }    if (dist1 < dist2) {      return -1;    } else {      return 1;    }  } else   if (dominate1) {    return -1;  } else {    return 1;  }}  }
class C{  public int compareTo(Sector that){  if (that == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.getMinLatitude().compareTo(that.getMinLatitude()) < 0)   return -1;  if (this.getMinLatitude().compareTo(that.getMinLatitude()) > 0)   return 1;  if (this.getMinLongitude().compareTo(that.getMinLongitude()) < 0)   return -1;  if (this.getMinLongitude().compareTo(that.getMinLongitude()) > 0)   return 1;  if (this.getMaxLatitude().compareTo(that.getMaxLatitude()) < 0)   return -1;  if (this.getMaxLatitude().compareTo(that.getMaxLatitude()) > 0)   return 1;  if (this.getMaxLongitude().compareTo(that.getMaxLongitude()) < 0)   return -1;  if (this.getMaxLongitude().compareTo(that.getMaxLongitude()) > 0)   return 1;  return 0;}  }
class C{  public void removeConsumer(NamedWindowConsumerView namedWindowConsumerView){  EPStatementAgentInstanceHandle handleRemoved=null;  for (  Map.Entry<EPStatementAgentInstanceHandle,List<NamedWindowConsumerView>> entry : consumersInContext.entrySet()) {    boolean foundAndRemoved=entry.getValue().remove(namedWindowConsumerView);    if ((foundAndRemoved) && (entry.getValue().size() == 0)) {      handleRemoved=entry.getKey();      break;    }  }  if (handleRemoved != null) {    Map<EPStatementAgentInstanceHandle,List<NamedWindowConsumerView>> newConsumers=NamedWindowUtil.createConsumerMap(tailView.isPrioritized());    newConsumers.putAll(consumersInContext);    newConsumers.remove(handleRemoved);    consumersInContext=newConsumers;  }  VirtualDWView virtualDWView=rootViewInstance.getVirtualDataWindow();  if (virtualDWView != null && handleRemoved != null) {    virtualDWView.getVirtualDataWindow().handleEvent(new VirtualDataWindowEventConsumerRemove(tailView.getEventType().getName(),namedWindowConsumerView,handleRemoved.getStatementHandle().getStatementName(),handleRemoved.getAgentInstanceId()));  }}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.REACTION__NAME:    return getName();case SexecPackage.REACTION__CHECK:  return getCheck();case SexecPackage.REACTION__EFFECT:return getEffect();case SexecPackage.REACTION__TRANSITION:return isTransition();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String distributionTipText(){  return "The distribution to use for calculating the random matrix.\n" + "Sparse1 is:\n" + " sqrt(3) * { -1 with prob(1/6), \n"+ "               0 with prob(2/3),  \n"+ "              +1 with prob(1/6) } \n"+ "Sparse2 is:\n"+ " { -1 with prob(1/2), \n"+ "   +1 with prob(1/2) } ";}  }
class C{  public static void dumpUpdateParams(String prefix,UniformPair<EventBean[]> result){  EventBean[] newEventArr=result != null ? result.getFirst() : null;  EventBean[] oldEventArr=result != null ? result.getSecond() : null;  dumpUpdateParams(prefix,newEventArr,oldEventArr);}  }
class C{  public void testSetPhoneSensorValues_phoneFlatAtLat45Long0(){  LatLong location=new LatLong(45,0);  Vector3 acceleration=new Vector3(0,0,-10);  Vector3 magneticField=new Vector3(0,-10,0);  Vector3 expectedZenith=new Vector3(1 / SQRT2,0,1 / SQRT2);  Vector3 expectedNadir=new Vector3(-1 / SQRT2,0,-1 / SQRT2);  Vector3 expectedNorth=new Vector3(-1 / SQRT2,0,1 / SQRT2);  Vector3 expectedEast=new Vector3(0,1,0);  Vector3 expectedSouth=new Vector3(1 / SQRT2,0,-1 / SQRT2);  Vector3 expectedWest=new Vector3(0,-1,0);  Vector3 expectedPointing=expectedNadir;  Vector3 expectedUpAlongPhone=expectedNorth;  checkModelOrientation(location,acceleration,magneticField,expectedZenith,expectedNadir,expectedNorth,expectedEast,expectedSouth,expectedWest,expectedPointing,expectedUpAlongPhone);}  }
class C{  public DrawingAttributes(Properties props){  this();  setProperties(null,props);}  }
class C{  @Override public void process(final Task<Diff> task) throws ConfigurationException, IOException, SQLConsumerException {  long startTime=System.currentTimeMillis();  TaskTypes type=task.getTaskType();  if (type == TaskTypes.TASK_FULL || type == TaskTypes.TASK_PARTIAL_FIRST) {    this.sqlEncoder.init();    this.processingTimeSQL=0;  }  super.process(task);  this.processingTimeSQL+=System.currentTimeMillis() - startTime;  if (type == TaskTypes.TASK_FULL || type == TaskTypes.TASK_PARTIAL_LAST) {    ArticleInformation info=task.getHeader();    info.setEncodedSize(this.sqlEncoder.getEncodedSize());    info.setEncodedSQLSize(this.sqlEncoder.getEncodedSQLSize());    info.setExitingTime(System.currentTimeMillis());    info.setProcessingTimeSQL(processingTimeSQL);    String succesReport=info.toString();    this.outputLogger.logMessage(Level.INFO,"\r\n" + succesReport);  }}  }
class C{  protected void propertyChange(PropertyChangeEvent evt){  if (SeaGlassLookAndFeel.shouldUpdateStyle(evt)) {    updateStyle((JTextComponent)evt.getSource());  }  super.propertyChange(evt);}  }
class C{  @Override public void exitIndexedExpression(IndexedExpressionContext ctx){  boolean isRowLower=(ctx.rowLower != null && !ctx.rowLower.isEmpty() && (ctx.rowLower.info.expr != null));  boolean isRowUpper=(ctx.rowUpper != null && !ctx.rowUpper.isEmpty() && (ctx.rowUpper.info.expr != null));  boolean isColLower=(ctx.colLower != null && !ctx.colLower.isEmpty() && (ctx.colLower.info.expr != null));  boolean isColUpper=(ctx.colUpper != null && !ctx.colUpper.isEmpty() && (ctx.colUpper.info.expr != null));  ExpressionInfo rowLower=isRowLower ? ctx.rowLower.info : null;  ExpressionInfo rowUpper=isRowUpper ? ctx.rowUpper.info : null;  ExpressionInfo colLower=isColLower ? ctx.colLower.info : null;  ExpressionInfo colUpper=isColUpper ? ctx.colUpper.info : null;  ctx.dataInfo.expr=new IndexedIdentifier(ctx.name.getText(),false,false);  setFileLineColumn(ctx.dataInfo.expr,ctx);  try {    ArrayList<ArrayList<Expression>> exprList=new ArrayList<ArrayList<Expression>>();    ArrayList<Expression> rowIndices=new ArrayList<Expression>();    ArrayList<Expression> colIndices=new ArrayList<Expression>();    if (!isRowLower && !isRowUpper) {      rowIndices.add(null);      rowIndices.add(null);    } else     if (isRowLower && isRowUpper) {      rowIndices.add(rowLower.expr);      rowIndices.add(rowUpper.expr);    } else     if (isRowLower && !isRowUpper) {      rowIndices.add(rowLower.expr);    } else {      notifyErrorListeners("incorrect index expression for row",ctx.start);      return;    }    if (!isColLower && !isColUpper) {      colIndices.add(null);      colIndices.add(null);    } else     if (isColLower && isColUpper) {      colIndices.add(colLower.expr);      colIndices.add(colUpper.expr);    } else     if (isColLower && !isColUpper) {      colIndices.add(colLower.expr);    } else {      notifyErrorListeners("incorrect index expression for column",ctx.start);      return;    }    exprList.add(rowIndices);    exprList.add(colIndices);    ((IndexedIdentifier)ctx.dataInfo.expr).setIndices(exprList);  } catch (  Exception e) {    notifyErrorListeners("cannot set the indices",ctx.start);    return;  }}  }
class C{  public static ApiException wrapKnownException(ResultStat stat,Throwable cause){  return new ApiException(stat,cause.getMessage());}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void isScrollCompleted(){  if (mCurrentVisibleItemCount > 0 && mCurrentScrollState == SCROLL_STATE_IDLE) {    if (mCellIsMobile && mIsMobileScrolling) {      handleMobileCellScroll();    } else     if (mIsWaitingForScrollFinish) {      touchEventsEnded();    }  }}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  protected int readCodePoint() throws IOException {  int next=reader.read();  if (Character.isHighSurrogate((char)next)) {    next=Character.toCodePoint((char)next,(char)reader.read());  }  return next;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeDouble(get());}  }
class C{  public MarkSweepMarkBits(){  super(Options.set,"Mark Sweep Mark Bits","Number of bits to use for the header cycle of mark sweep spaces",MarkSweepSpace.DEFAULT_MARKCOUNT_BITS);}  }
class C{  private void defineShape(Shape shape,boolean draw,boolean fill){  Point2D oldPen=null;  boolean isGradient=false;  if (fill && isGradientFill(graphicContext.getPaint()))   isGradient=true;  if (isGradient) {    shape=graphicContext.getTransform().createTransformedShape(shape);    oldPen=graphicContext.setPen(getShapeStart(shape));  }  DefineShapeBuilder builder=new DefineShapeBuilder(shape,graphicContext,draw,fill);  DefineShape ds3=(DefineShape)builder.build();  defineTags.defineShape3(ds3);  Matrix matrix;  if (isGradient) {    double originX=graphicContext.getPen().getX();    double originY=graphicContext.getPen().getY();    matrix=MatrixBuilder.getTranslateInstance(originX,originY);  } else {    matrix=MatrixBuilder.build(graphicContext.getTransform());  }  applyBounds(ds3.bounds.xMin + matrix.translateX,ds3.bounds.yMin + matrix.translateY,ds3.bounds.xMax + matrix.translateX,ds3.bounds.yMax + matrix.translateY);  PlaceObject po2=new PlaceObject(Tag.stagPlaceObject2);  po2.setMatrix(matrix);  po2.setRef(ds3);  po2.depth=depth++;  if (isGradient)   graphicContext.setPen(oldPen);  defineTags.placeObject2(po2);}  }
class C{  public void initialize(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Matrix4f pick(float x,float y,float width,float height,int[] viewport){  return pick(x,y,width,height,viewport,this);}  }
class C{  public void removeIgnoredPath(final Path path){synchronized (ignoredPathMap) {    final IgnoredPathInfo info=ignoredPathMap.get(path);    if (info == null)     return;    if (--info.count == 0)     ignoredPathMap.remove(path);  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WWindow.init");}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @CalledByNative static void sendEmail(Context context,String email,String subject,String body,String chooserTitle,String fileToAttach){  if (TextUtils.isEmpty(email)) {    Account[] accounts=AccountManagerHelper.get(context).getGoogleAccounts();    if (accounts != null && accounts.length == 1 && Patterns.EMAIL_ADDRESS.matcher(accounts[0].name).matches()) {      email=accounts[0].name;    }  }  Intent send=new Intent(Intent.ACTION_SEND);  send.setType("message/rfc822");  if (!TextUtils.isEmpty(email))   send.putExtra(Intent.EXTRA_EMAIL,new String[]{email});  send.putExtra(Intent.EXTRA_SUBJECT,subject);  send.putExtra(Intent.EXTRA_TEXT,Html.fromHtml(body));  if (!TextUtils.isEmpty(fileToAttach)) {    File fileIn=new File(fileToAttach);    Uri fileUri;    try {      fileUri=ContentUriUtils.getContentUriFromFile(context,fileIn);    } catch (    IllegalArgumentException ex) {      fileUri=Uri.fromFile(fileIn);    }    send.putExtra(Intent.EXTRA_STREAM,fileUri);  }  try {    Intent chooser=Intent.createChooser(send,chooserTitle);    chooser.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    context.startActivity(chooser);  } catch (  android.content.ActivityNotFoundException ex) {  }}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 3 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  static public int applyExistingStatements(final AbstractTripleStore focusStore,final AbstractTripleStore database,final IElementFilter<ISPO> filter,final IChangeLog changeLog){  if (INFO)   log.info("Filtering statements already known to the database");  final long begin=System.currentTimeMillis();  final IChunkedOrderedIterator<ISPO> itr=focusStore.getAccessPath(SPOKeyOrder.SPO,ExplicitSPOFilter.INSTANCE).iterator();  int nremoved=0;  int nupgraded=0;  try {    final long focusStoreSize=focusStore.getStatementCount();    final int capacity=(int)Math.min(focusStoreSize,1000000);    final SPOAssertionBuffer assertionBuffer=new SPOAssertionBuffer(database,database,filter,capacity,false,changeLog);    final SPORetractionBuffer retractionBuffer=new SPORetractionBuffer(focusStore,capacity,false);    while (itr.hasNext()) {      final ISPO[] chunk=itr.nextChunk();      for (int i=0; i < chunk.length; i++) {        final SPO spo=(SPO)chunk[i];        final ISPO tmp=database.getStatement(spo.s,spo.p,spo.o);        if (tmp != null) {          if (tmp.getStatementType() == StatementEnum.Explicit) {            retractionBuffer.add(spo);            nremoved++;          } else {            assertionBuffer.add(spo);          }        }      }    }    assertionBuffer.flush();    retractionBuffer.flush();  }  finally {    itr.close();  }  final long elapsed=System.currentTimeMillis() - begin;  if (INFO)   log.info("Removed " + nremoved + " statements from the focusStore"+ " and upgraded "+ nupgraded+ " statements in the database in "+ elapsed+ " ms.");  return nremoved;}  }
class C{  public static double calcProjectedEuclideanDistance(Coord coord,Coord other){  double xDiff=other.getX() - coord.getX();  double yDiff=other.getY() - coord.getY();  return Math.sqrt((xDiff * xDiff) + (yDiff * yDiff));}  }
class C{  protected int doOneIteration(WeightVector w,SLProblem problem,int epoch,int count,SLParameters params) throws Exception {  int numExamples=problem.size();  epochUpdateCount=0;  problem.shuffle(random);  for (int exampleId=0; exampleId < numExamples; exampleId++) {    IInstance example=problem.instanceList.get(exampleId);    IStructure gold=problem.goldStructureList.get(exampleId);    IStructure prediction=null;    double loss=0;    prediction=this.inference.getLossAugmentedBestStructure(w,example,gold);    loss=this.inference.getLoss(example,gold,prediction);    assert prediction != null;    IFeatureVector goldFeatures=featureGenerator.getFeatureVector(example,gold);    IFeatureVector predictedFeatures=featureGenerator.getFeatureVector(example,prediction);    IFeatureVector update=goldFeatures.difference(predictedFeatures);    double learningRate=getLearningRate(epoch,count,params);    w.scale(1.0f - learningRate);    w.addSparseFeatureVector(update,2 * learningRate * params.C_FOR_STRUCTURE);    epochUpdateCount++;    count++;  }  return count;}  }
class C{  public TaskErrorHandlingException(){  super();}  }
class C{  public PcLocal(IndependenceTest independenceTest){  this(independenceTest,null);}  }
class C{  public boolean isSearchable(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].searchable;}  }
class C{  private TableViewer createStepsTable(final Composite composite,final WorkItem workItem){  final TableViewer viewer=new TableViewer(composite,SWT.BORDER | SWT.FULL_SELECTION);  GridDataBuilder.newInstance().align(SWT.FILL,SWT.FILL).grab(true,true).span(1,1).minHeight(75).applyTo(viewer.getTable());  final Table table=viewer.getTable();  table.setHeaderVisible(true);  table.setLinesVisible(true);  final TableLayout tableLayout=new TableLayout();  table.setLayout(tableLayout);  tableLayout.addColumnData(new ColumnPixelData(60,true));  final TableColumn column1=new TableColumn(table,SWT.NONE);  column1.setImage(TestStepUtil.imageHelper.getImage("images/common/attachment.gif"));  column1.setResizable(true);  tableLayout.addColumnData(new ColumnWeightData(10,true));  final TableColumn column2=new TableColumn(table,SWT.NONE);  column2.setText(Messages.getString("TestStepsControl.ColumnNameAction"));  column2.setResizable(true);  tableLayout.addColumnData(new ColumnWeightData(8,true));  final TableColumn column3=new TableColumn(table,SWT.NONE);  column3.setText(Messages.getString("TestStepsControl.ColumnNameExpectedResult"));  column3.setResizable(true);  viewer.setContentProvider(new TestStepContentProvider());  viewer.setLabelProvider(new TestStepLabelProvider());  viewer.setInput(workItem);  return viewer;}  }
class C{  public final static int murmurHash3(int x){  x^=x >>> 16;  x*=0x85ebca6b;  x^=x >>> 13;  x*=0xc2b2ae35;  x^=x >>> 16;  return x;}  }
class C{  public void endRequest(){}  }
class C{  public void clear(){synchronized (messageIdProvider) {synchronized (exchangesByToken) {      exchangesByMID.clear();      exchangesByToken.clear();      ongoingExchanges.clear();    }  }}  }
class C{  public void drawMovementData(Entity entity,MovePath md){  MoveStep previousStep=null;  clearMovementData();  if (md == null) {    movementTarget=null;    return;  }  Color col=Color.blue;  if (md.getLastStep() != null) {switch (md.getLastStep().getMovementType(true)) {case MOVE_RUN:case MOVE_VTOL_RUN:case MOVE_OVER_THRUST:      col=GUIPreferences.getInstance().getColor("AdvancedMoveRunColor");    break;case MOVE_SPRINT:  col=GUIPreferences.getInstance().getColor("AdvancedMoveSprintColor");break;case MOVE_JUMP:col=GUIPreferences.getInstance().getColor("AdvancedMoveJumpColor");break;case MOVE_ILLEGAL:col=GUIPreferences.getInstance().getColor("AdvancedMoveIllegalColor");break;default :col=GUIPreferences.getInstance().getColor("AdvancedMoveDefaultColor");break;}movementTarget=md.getLastStep().getPosition();} else {movementTarget=null;}refreshMoveVectors(entity,md,col);for (Enumeration<MoveStep> i=md.getSteps(); i.hasMoreElements(); ) {final MoveStep step=i.nextElement();if ((null != previousStep) && ((step.getType() == MoveStepType.UP) || (step.getType() == MoveStepType.DOWN) || (step.getType() == MoveStepType.ACC)|| (step.getType() == MoveStepType.DEC)|| (step.getType() == MoveStepType.ACCN)|| (step.getType() == MoveStepType.DECN))) {pathSprites.get(pathSprites.size() - 1).setHidden(true);}if ((previousStep != null) && game.useVectorMove()) {pathSprites.get(pathSprites.size() - 1).setHidden(true);}pathSprites.add(new StepSprite(this,step,md.isEndStep(step)));previousStep=step;}repaint(100);}  }
class C{  private static String linkForClassName(String name){  return name.replace('.','/') + ".html";}  }
class C{  public String toString(){  String result="- Timestamp: " + timestamp + "\n"+ "- Status: "+ status+ "\n"+ "- Freetext: "+ freetext+ "\n";  if (favoriteLink != null) {    result+="- Favorite link: " + favoriteLink.toString() + "\n";  }  if (photo != null) {    result+="- Photo-icon: " + photo.toString() + "\n";  }  if (geoloc != null) {    result+="- Geoloc: " + geoloc.toString() + "\n";  }  return result;}  }
class C{  public DeploySharedLibraryScriptCommand(Configuration configuration,String resourcePath,String sharedLibraryPath){  super(configuration,resourcePath);  this.sharedLibraryPath=sharedLibraryPath;}  }
class C{  TimelineCursor(List<? extends Identifiable> items){  this.minPosition=items.size() > 0 ? items.get(items.size() - 1).getId() : null;  this.maxPosition=items.size() > 0 ? items.get(0).getId() : null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private String _serializeComponent(Component component,Map<Object,String> done) throws ConverterException {  StringBuilder sb=new StringBuilder();  Component ca;  component=new ComponentSpecificAccess(Component.ACCESS_PRIVATE,ca=component);  boolean isPeristent=ca.isPersistent();  deep++;  Object member;  Iterator<Key> it=component.keyIterator();  Collection.Key key;  while (it.hasNext()) {    key=it.next();    member=component.get(key,null);    if (member instanceof UDF)     continue;    sb.append(goIn() + "<var scope=\"this\" name=" + del+ key.toString()+ del+ ">");    sb.append(_serialize(member,done));    sb.append(goIn() + "</var>");  }  Property p;  Boolean remotingFetch;  Struct props=ignoreRemotingFetch ? null : ComponentUtil.getPropertiesAsStruct(ca,false);  ComponentScope scope=ca.getComponentScope();  it=scope.keyIterator();  while (it.hasNext()) {    key=Caster.toKey(it.next(),null);    if (!ignoreRemotingFetch) {      p=(Property)props.get(key,null);      if (p != null) {        remotingFetch=Caster.toBoolean(p.getDynamicAttributes().get(REMOTING_FETCH,null),null);        if (remotingFetch == null) {          if (isPeristent && ORMUtil.isRelated(p))           continue;        } else         if (!remotingFetch.booleanValue())         continue;      }    }    member=scope.get(key,null);    if (member instanceof UDF || key.equals(KeyConstants._this))     continue;    sb.append(goIn() + "<var scope=\"variables\" name=" + del+ key.toString()+ del+ ">");    sb.append(_serialize(member,done));    sb.append(goIn() + "</var>");  }  deep--;  try {    return goIn() + "<component md5=\"" + ComponentUtil.md5(component)+ "\" name=\""+ component.getAbsName()+ "\">"+ sb+ "</component>";  } catch (  Exception e) {    throw toConverterException(e);  }}  }
class C{  public boolean isSetI32_thing(){  return EncodingUtils.testBit(__isset_bitfield,__I32_THING_ISSET_ID);}  }
class C{  private void deleteMetadataColumns(final Transaction tx,final String nodeId,final List<Column> columns){  requireNonNull(tx);  requireNonNull(columns);  requireNonNull(nodeId);  final Bytes row=Bytes.of(nodeId);  for (  final Column column : columns) {    tx.delete(row,column);  }}  }
class C{  private SimpleSink.SimpleWriteOperation buildWriteOperationForFinalize(boolean retainTemporaryFiles) throws Exception {  TemporaryFileRetention retentionPolicy=retainTemporaryFiles ? TemporaryFileRetention.KEEP : TemporaryFileRetention.REMOVE;  return buildWriteOperation(retentionPolicy);}  }
class C{  public Row createRow(Value[] data,int memory){  return rowFactory.createRow(data,memory);}  }
class C{  public void onPreProcessRequest(AsyncHttpRequest request){}  }
class C{  public boolean cancel(boolean mayInterruptIfRunning){  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=null;  String outputFile=null;  int v;  int a;  int i;  double sigmaX;  double sigmaY;  double N;  double sigmaXY;  double sigmaXsqr;  double sigmaYsqr;  double mean;  double meanY;  double radians2Deg=180 / Math.PI;  double slope;  double slopeInDegrees;  double slopeM1;  double slopeM2;  double slopeRMA;  double slopeDegM1;  double slopeDegM2;  double slopeDegRMA;  int progress;  int oldProgress=-1;  double midX=0;  double midY=0;  double maxLineLength=100;  double lineLength;  double Sxx, Syy, Sxy;  double centroidX;  double centroidY;  double deltaX, deltaY;  int[] parts={0};  int[] partStart={0};  boolean[] partHoleData={false};  double x, y;  int pointSt, pointEnd;  boolean useElongationRatio=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  maxLineLength=Double.parseDouble(args[2]);  useElongationRatio=Boolean.parseBoolean(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    double numberOfRecords=input.getNumberOfRecords();    if (input.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("This function can only be applied to polygon type shapefiles.");      return;    }    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    if (!useElongationRatio) {      fields[1]=new DBFField();      fields[1].setName("LINEARITY");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("ORIENT");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(10);      fields[2].setDecimalCount(3);    } else {      fields[1]=new DBFField();      fields[1].setName("ELONGATION");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("ELONG_DIR");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(10);      fields[2].setDecimalCount(3);    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYLINE,fields);    ShapeType inputType=input.getShapeType();    double[][] vertices=null;    double[] regressionData;    double rSquare;    if (!useElongationRatio) {      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {switch (inputType) {case POLYGON:            whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());          vertices=recPolygon.getPoints();        partStart=recPolygon.getParts();      partHoleData=recPolygon.getPartHoleData();    midX=recPolygon.getXMin() + (recPolygon.getXMax() - recPolygon.getXMin()) / 2;  midY=recPolygon.getYMin() + (recPolygon.getYMax() - recPolygon.getYMin()) / 2;break;case POLYGONZ:PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();partStart=recPolygonZ.getParts();partHoleData=recPolygonZ.getPartHoleData();midX=recPolygonZ.getXMin() + (recPolygonZ.getXMax() - recPolygonZ.getXMin()) / 2;midY=recPolygonZ.getYMin() + (recPolygonZ.getYMax() - recPolygonZ.getYMin()) / 2;break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();partStart=recPolygonM.getParts();partHoleData=recPolygonM.getPartHoleData();midX=recPolygonM.getXMin() + (recPolygonM.getXMax() - recPolygonM.getXMin()) / 2;midY=recPolygonM.getYMin() + (recPolygonM.getYMax() - recPolygonM.getYMin()) / 2;break;}int numParts=partStart.length;for (int p=0; p < numParts; p++) {if (!partHoleData[p]) {regressionData=new double[5];rSquare=0;slope=0;slopeInDegrees=0;slopeDegM1=0;slopeDegM2=0;slopeDegRMA=0;slopeM1=0;slopeM2=0;slopeRMA=0;pointSt=partStart[p];if (p < numParts - 1) {pointEnd=partStart[p + 1];} else {pointEnd=vertices.length;}N=pointEnd - pointSt;for (v=pointSt; v < pointEnd; v++) {x=vertices[v][0] - midX;y=vertices[v][1] - midY;regressionData[0]+=x;regressionData[1]+=y;regressionData[2]+=x * y;regressionData[3]+=x * x;regressionData[4]+=y * y;}sigmaX=regressionData[0];mean=sigmaX / N;sigmaY=regressionData[1];meanY=sigmaY / N;sigmaXY=regressionData[2];sigmaXsqr=regressionData[3];sigmaYsqr=regressionData[4];if ((sigmaXsqr - mean * sigmaX) > 0) {slopeM1=(sigmaXY - mean * sigmaY) / (sigmaXsqr - mean * sigmaX);slopeDegM1=(Math.atan(slopeM1) * radians2Deg);if (slopeDegM1 < 0) {slopeDegM1=90 + -1 * slopeDegM1;} else {slopeDegM1=90 - slopeDegM1;}}Sxx=(sigmaXsqr / N - mean * mean);Syy=(sigmaYsqr / N - (sigmaY / N) * (sigmaY / N));Sxy=(sigmaXY / N - (sigmaX * sigmaY) / (N * N));if (Math.sqrt(Sxx * Syy) != 0) {rSquare=((Sxy / Math.sqrt(Sxx * Syy)) * (Sxy / Math.sqrt(Sxx * Syy)));}slopeRMA=Math.sqrt(Syy / Sxx);if ((sigmaXY - mean * sigmaY) / (sigmaXsqr - mean * sigmaX) < 0) {slopeRMA=-slopeRMA;}slopeDegRMA=(Math.atan(slopeRMA) * radians2Deg);if (slopeDegRMA < 0) {slopeDegRMA=90 + -1 * slopeDegRMA;} else {slopeDegRMA=90 - slopeDegRMA;}if ((sigmaYsqr - meanY * sigmaY) > 0) {slopeM2=(sigmaXY - meanY * sigmaX) / (sigmaYsqr - meanY * sigmaY);slopeM2=1 / slopeM2;slopeDegM2=(Math.atan(slopeM2) * radians2Deg);if (slopeDegM2 < 0) {slopeDegM2=90 + -1 * slopeDegM2;} else {slopeDegM2=90 - slopeDegM2;}}if (slopeDegM2 < 6 || slopeDegM2 > 174) {slope=slopeM2;slopeInDegrees=slopeDegM2;} else if (slopeDegM1 > 84 && slopeDegM1 < 96) {slope=slopeM1;slopeInDegrees=slopeDegM1;} else {slope=slopeRMA;slopeInDegrees=slopeDegRMA;}centroidX=mean + midX;centroidY=meanY + midY;lineLength=maxLineLength * rSquare;double[][] points=new double[2][2];if (slopeInDegrees > 0) {deltaX=Math.cos(slope) * lineLength;deltaY=Math.sin(slope) * lineLength;points[0][0]=centroidX - deltaX / 2.0;points[0][1]=centroidY - deltaY / 2.0;points[1][0]=centroidX + deltaX / 2.0;points[1][1]=centroidY + deltaY / 2.0;} else {points[0][0]=centroidX - lineLength / 2.0;points[0][1]=centroidY;points[1][0]=centroidX + lineLength / 2.0;points[1][1]=centroidY;}PolyLine poly=new PolyLine(parts,points);Object[] rowData=new Object[3];rowData[0]=new Double(record.getRecordNumber());rowData[1]=new Double(rSquare);rowData[2]=new Double(slopeInDegrees);output.addRecord(poly,rowData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(record.getRecordNumber() / numberOfRecords * 100);if (progress > oldProgress) {updateProgress(progress);}oldProgress=progress;}}} else {double[][] verticesRotated=null;double[] newBoundingBox=new double[4];double psi=0;double DegreeToRad=Math.PI / 180;double[] axes=new double[2];double newXAxis=0;double newYAxis=0;double longAxis;double shortAxis;double elongation=0;double bearing=0;final double rightAngle=Math.toRadians(90);double boxCentreX=0;double boxCentreY=0;slope=0;for (ShapeFileRecord record : input.records) {switch (inputType) {case POLYGON:whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());vertices=recPolygon.getPoints();midX=recPolygon.getXMin() + (recPolygon.getXMax() - recPolygon.getXMin()) / 2;midY=recPolygon.getYMin() + (recPolygon.getYMax() - recPolygon.getYMin()) / 2;break;case POLYGONZ:PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();midX=recPolygonZ.getXMin() + (recPolygonZ.getXMax() - recPolygonZ.getXMin()) / 2;midY=recPolygonZ.getYMin() + (recPolygonZ.getYMax() - recPolygonZ.getYMin()) / 2;break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();midX=recPolygonM.getXMin() + (recPolygonM.getXMax() - recPolygonM.getXMin()) / 2;midY=recPolygonM.getYMin() + (recPolygonM.getYMax() - recPolygonM.getYMin()) / 2;break;}int numVertices=vertices.length;verticesRotated=new double[numVertices][2];axes[0]=9999999;axes[1]=9999999;double sumX=0;double sumY=0;N=0;boolean calculatedCentroid=false;for (int m=0; m <= 180; m++) {psi=-m * 0.5 * DegreeToRad;for (int n=0; n < numVertices; n++) {x=vertices[n][0] - midX;y=vertices[n][1] - midY;if (!calculatedCentroid) {sumX+=x;sumY+=y;N++;}verticesRotated[n][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));verticesRotated[n][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));}newBoundingBox[0]=Double.MAX_VALUE;newBoundingBox[1]=Double.MIN_VALUE;newBoundingBox[2]=Double.MAX_VALUE;newBoundingBox[3]=Double.MIN_VALUE;for (int n=0; n < numVertices; n++) {x=verticesRotated[n][0];y=verticesRotated[n][1];if (x < newBoundingBox[0]) {newBoundingBox[0]=x;}if (x > newBoundingBox[1]) {newBoundingBox[1]=x;}if (y < newBoundingBox[2]) {newBoundingBox[2]=y;}if (y > newBoundingBox[3]) {newBoundingBox[3]=y;}}newXAxis=newBoundingBox[1] - newBoundingBox[0] + 1;newYAxis=newBoundingBox[3] - newBoundingBox[2] + 1;if ((axes[0] * axes[1]) > (newXAxis * newYAxis)) {axes[0]=newXAxis;axes[1]=newYAxis;if (axes[0] > axes[1]) {slope=-psi;} else {slope=-(rightAngle + psi);}x=newBoundingBox[0] + newXAxis / 2;y=newBoundingBox[2] + newYAxis / 2;boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));}}longAxis=Math.max(axes[0],axes[1]);shortAxis=Math.min(axes[0],axes[1]);elongation=1 - shortAxis / longAxis;centroidX=(sumX / N) + midX;centroidY=(sumY / N) + midY;lineLength=maxLineLength * elongation;double[][] points=new double[2][2];deltaX=Math.cos(slope) * lineLength;deltaY=Math.sin(slope) * lineLength;points[0][0]=boxCentreX - deltaX / 2.0;points[0][1]=boxCentreY - deltaY / 2.0;points[1][0]=boxCentreX + deltaX / 2.0;points[1][1]=boxCentreY + deltaY / 2.0;PolyLine poly=new PolyLine(parts,points);Object[] rowData=new Object[3];rowData[0]=new Double(record.getRecordNumber());rowData[1]=new Double(elongation);bearing=90 - Math.toDegrees(slope);rowData[2]=new Double(bearing);output.addRecord(poly,rowData);if (cancelOp) {cancelOperation();return;}progress=(int)(record.getRecordNumber() / numberOfRecords * 100);if (progress > oldProgress) {updateProgress(progress);}oldProgress=progress;}}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static short toShort(byte[] bytes){  return toShort(bytes,0);}  }
class C{  public static void deleteNode(Document doc,XmlEntity xmlEntity) throws Exception {  NodeList nodes=getNodes(doc,xmlEntity);  if (nodes != null) {    int length=nodes.getLength();    for (int i=0; i < length; i++) {      Node node=nodes.item(i);      node.getParentNode().removeChild(node);    }  }}  }
class C{  private Image createPackedImage8() throws IOException {  int size=input.readByte() & 0xff;  if (size == 0) {    size=256;  }  int[] palette=new int[size];  int plen=palette.length;  for (int iter=0; iter < plen; iter++) {    palette[iter]=input.readInt();  }  int width=input.readShort();  int height=input.readShort();  byte[] data=new byte[width * height];  input.readFully(data,0,data.length);  return Image.createIndexed(width,height,palette,data);}  }
class C{  public void testRecoveryAfterAnError0_Error() throws Exception {  doTestRecoveryAfterAnError(0,HadoopErrorSimulator.Kind.Error);}  }
class C{  public Date engineGetCreationDate(String alias){  Entry entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (entry != null) {    return new Date(entry.date.getTime());  } else {    return null;  }}  }
class C{  public void testBug5874() throws Exception {  TimeZone defaultTimezone=TimeZone.getDefault();  try {    String clientTimezoneName="America/Los_Angeles";    String serverTimezoneName="America/Chicago";    TimeZone.setDefault(TimeZone.getTimeZone(clientTimezoneName));    long clientTimezoneOffsetMillis=TimeZone.getDefault().getRawOffset();    long serverTimezoneOffsetMillis=TimeZone.getTimeZone(serverTimezoneName).getRawOffset();    long offsetDifference=clientTimezoneOffsetMillis - serverTimezoneOffsetMillis;    SimpleDateFormat timestampFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    SimpleDateFormat timeFormat=new SimpleDateFormat("HH:mm:ss");    long pointInTime=timestampFormat.parse("2004-10-04 09:19:00").getTime();    Properties props=new Properties();    props.put("useTimezone","true");    props.put("serverTimezone",serverTimezoneName);    props.put("cacheDefaultTimezone","false");    Connection tzConn=getConnectionWithProps(props);    Statement tzStmt=tzConn.createStatement();    createTable("testBug5874","(tstamp DATETIME, t TIME)");    PreparedStatement tsPstmt=tzConn.prepareStatement("INSERT INTO testBug5874 VALUES (?, ?)");    tsPstmt.setTimestamp(1,new Timestamp(pointInTime));    tsPstmt.setTime(2,new Time(pointInTime));    tsPstmt.executeUpdate();    this.rs=tzStmt.executeQuery("SELECT * from testBug5874");    while (this.rs.next()) {      String retrTimestampString=new String(this.rs.getBytes(1));      Timestamp retrTimestamp=this.rs.getTimestamp(1);      java.util.Date timestampOnServer=timestampFormat.parse(retrTimestampString);      long retrievedOffsetForTimestamp=retrTimestamp.getTime() - timestampOnServer.getTime();      assertEquals("Original timestamp and timestamp retrieved using client timezone are not the same",offsetDifference,retrievedOffsetForTimestamp);      String retrTimeString=new String(this.rs.getBytes(2));      Time retrTime=this.rs.getTime(2);      java.util.Date timeOnServerAsDate=timeFormat.parse(retrTimeString);      Time timeOnServer=new Time(timeOnServerAsDate.getTime());      long retrievedOffsetForTime=retrTime.getTime() - timeOnServer.getTime();      assertEquals("Original time and time retrieved using client timezone are not the same",offsetDifference,retrievedOffsetForTime);    }    tzConn.close();  }  finally {    TimeZone.setDefault(defaultTimezone);  }}  }
class C{  public boolean hasNext(){  if (_at_eof)   return false;  if (_next != null)   return true;  return (prefetch() != null);}  }
class C{  private boolean canHandleStopButton(DevicesInfo mDeviceInfo){  return (mDeviceInfo.getSubType().contains("RAEX")) || (mDeviceInfo.getSubType().contains("A-OK")) || (mDeviceInfo.getSubType().contains("RollerTrol"))|| (mDeviceInfo.getSubType().contains("Harrison"))|| (mDeviceInfo.getSubType().contains("RFY"))|| (mDeviceInfo.getSubType().contains("ASA"))|| (mDeviceInfo.getSubType().contains("T6 DC"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.724 -0500",hash_original_method="F187911F3801DAE69287AC09EDB743FA",hash_generated_method="C99150D9B74C6E2E6A13C966A9BD4ACD") public LinkCapabilities rspLinkCapabilities(Message response){  LinkCapabilities retVal=(LinkCapabilities)response.obj;  if (DBG)   log("rspLinkCapabilities=" + retVal);  return retVal;}  }
class C{  private void deleteRandomRecord(ISqlTransaction tran,Table table){  DmlStatement deleteStatement=createDeleteDmlStatement(table);  Row row=selectRandomRow(tran,table);  try {    tran.prepareAndExecute(deleteStatement.getSql(),row.toArray(table.getPrimaryKeyColumnNames()));  } catch (  SqlException ex) {    log.info("Failed to delete from {}: {}",table.getName(),ex.getMessage());    if (continueOnError) {      if (debug) {        logRow(row);        log.info("",ex);      }    } else {      throw ex;    }  }}  }
class C{  public Operation(int nTail,int nHead,int nOperation){  m_nHead=nHead;  m_nTail=nTail;  m_nOperation=nOperation;}  }
class C{  public boolean remove(OMGeometry geometry){  setNeedToRegenerate(true);  return super.remove(geometry);}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  CipherParameters keyParam=params;  if (params instanceof ParametersWithIV) {    iv=((ParametersWithIV)params).getIV();    keyParam=((ParametersWithIV)params).getParameters();  } else {    iv=new byte[0];  }  if (keyParam instanceof KeyParameter) {    key=((KeyParameter)keyParam).getKey();    init();  } else {    throw new IllegalArgumentException("Invalid parameter passed to HC128 init - " + params.getClass().getName());  }  initialised=true;}  }
class C{  public String host(){  return address.getHostString();}  }
class C{  public static List<Modifier> newModifiers(AST ast,int modifiers){  return ast.newModifiers(modifiers);}  }
class C{  public static SignatureData sign(String keyId,String signatureAlgorithmId,SigningRequest request) throws Exception {  if (instance == null) {    throw new IllegalStateException("BatchSigner is not initialized");  }  return SignerClient.result(Await.result(Patterns.ask(instance,new SigningRequestWrapper(keyId,signatureAlgorithmId,request),DEFAULT_TIMEOUT.duration().length()),DEFAULT_TIMEOUT.duration()));}  }
class C{  public static Set<String> filterByRegEx(Set<String> c,List<String> excludeRes){  return ImmutableSet.copyOf(Sets.filter(c,nonMatchingPredicateFromRes(excludeRes)));}  }
class C{  public Evidence(Proposition proposition){  if (proposition == null) {    throw new NullPointerException();  }  this.proposition=new Proposition(proposition);}  }
class C{  public boolean isConflict(KnowledgeGroup group){  if (this.type != group.type) {    return intersect(this.fromGroup,group.fromGroup) && intersect(this.toGroup,group.toGroup);  }  return false;}  }
class C{  protected void showState(){  NQueensBoard board=((NQueensEnvironment)env).getBoard();  if (currSize != board.getSize()) {    currSize=board.getSize();    removeAll();    setLayout(new GridLayout(currSize,currSize));    squareButtons=new JButton[currSize * currSize];    for (int i=0; i < currSize * currSize; i++) {      JButton square=new JButton("");      square.setMargin(new Insets(0,0,0,0));      square.setBackground((i % currSize) % 2 == (i / currSize) % 2 ? Color.WHITE : Color.LIGHT_GRAY);      square.addActionListener(this);      squareButtons[i]=square;      add(square);    }  }  for (int i=0; i < currSize * currSize; i++)   squareButtons[i].setText("");  Font f=new java.awt.Font(Font.SANS_SERIF,Font.PLAIN,Math.min(getWidth(),getHeight()) * 3 / 4 / currSize);  for (  XYLocation loc : board.getQueenPositions()) {    JButton square=squareButtons[loc.getXCoOrdinate() + loc.getYCoOrdinate() * currSize];    square.setForeground(board.isSquareUnderAttack(loc) ? Color.RED : Color.BLACK);    square.setFont(f);    square.setText("Q");  }  validate();}  }
class C{  protected EmrCluster terminateClusterImpl(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto,boolean overrideTerminationProtection,String emrClusterId) throws Exception {  AwsParamsDto awsParamsDto=emrHelper.getAwsParamsDto();  validateEmrClusterKey(emrClusterAlternateKeyDto);  NamespaceEntity namespaceEntity=namespaceDaoHelper.getNamespaceEntity(emrClusterAlternateKeyDto.getNamespace());  EmrClusterDefinitionEntity emrClusterDefinitionEntity=emrClusterDefinitionDaoHelper.getEmrClusterDefinitionEntity(emrClusterAlternateKeyDto.getNamespace(),emrClusterAlternateKeyDto.getEmrClusterDefinitionName());  String clusterId=null;  String clusterName=emrHelper.buildEmrClusterName(namespaceEntity.getCode(),emrClusterDefinitionEntity.getName(),emrClusterAlternateKeyDto.getEmrClusterName());  try {    clusterId=emrHelper.getActiveEmrClusterId(emrClusterId,clusterName);    emrDao.terminateEmrCluster(clusterId,overrideTerminationProtection,awsParamsDto);  } catch (  AmazonServiceException ex) {    handleAmazonException(ex,"An Amazon exception occurred while terminating EMR cluster with name \"" + clusterName + "\".");  }  return createEmrClusterFromRequest(clusterId,namespaceEntity.getCode(),emrClusterDefinitionEntity.getName(),emrClusterAlternateKeyDto.getEmrClusterName(),emrDao.getEmrClusterStatusById(clusterId,awsParamsDto),null,null,null);}  }
class C{  public String computeArtifactNameSuffix(){  int matchIndex=artifactName.indexOf(version);  if (matchIndex == -1 || matchIndex + version.length() >= artifactName.length()) {    return ".jar";  }  return artifactName.substring(matchIndex + version.length());}  }
class C{  public synchronized void config(String sourceClass,String sourceMethod,String msg){  LogRecord record=new LogRecord(Level.CONFIG,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  log(record);}  }
class C{  public NotSerializableException(String classname){  super(classname);}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  public TextCreationTool(TextHolderFigure prototype){  super(prototype);}  }
class C{  private Set<String> returnRemotePoolsAssociatedWithRemoteCopySettings(Map<String,List<String>> remoteCopySettings,Set<String> poolUris){  Set<String> remotePoolUris=new HashSet<String>();  for (  Entry<String,List<String>> entry : remoteCopySettings.entrySet()) {    VirtualPool vPool=_objectCache.queryObject(VirtualPool.class,URI.create(entry.getKey()));    if (null == vPool) {      remotePoolUris.addAll(poolUris);    } else     if (null != vPool.getUseMatchedPools() && vPool.getUseMatchedPools()) {      if (null != vPool.getMatchedStoragePools()) {        remotePoolUris.addAll(vPool.getMatchedStoragePools());      }    } else     if (null != vPool.getAssignedStoragePools()) {      remotePoolUris.addAll(vPool.getAssignedStoragePools());    }  }  return remotePoolUris;}  }
class C{  private static void checkParameters(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  if (dataset == null || renderer == null || dataset.getSeriesCount() != renderer.getSeriesRendererCount()) {    throw new IllegalArgumentException("Dataset and renderer should be not null and should have the same number of series");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Set<String> postProcessingFields(){  Set<String> fields=new LinkedHashSet<>();  query.forEach(null);  sort.forEach(null);  return fields;}  }
class C{  @Override public void run(Plan plan){  this.plans.add(plan);}  }
class C{  void executeNSDecls(TransformerImpl transformer,String ignorePrefix) throws TransformerException {  try {    if (null != m_prefixTable) {      SerializationHandler rhandler=transformer.getResultTreeHandler();      int n=m_prefixTable.size();      for (int i=n - 1; i >= 0; i--) {        XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);        if (!decl.getIsExcluded() && !(null != ignorePrefix && decl.getPrefix().equals(ignorePrefix))) {          rhandler.startPrefixMapping(decl.getPrefix(),decl.getURI(),true);        }      }    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public ValueNode popLock(){  try {    return lockedObjects[lockedObjects.length - 1];  }  finally {    lockedObjects=lockedObjects.length == 1 ? EMPTY_ARRAY : Arrays.copyOf(lockedObjects,lockedObjects.length - 1);    monitorIds=monitorIds.length == 1 ? EMPTY_MONITOR_ARRAY : Arrays.copyOf(monitorIds,monitorIds.length - 1);    assert lockedObjects.length == monitorIds.length;  }}  }
class C{  public Phone(String countryCode,String areaCode,String number){  this.countryCode=countryCode;  this.areaCode=areaCode;  this.number=number;}  }
class C{  public void loadData(){  loadData(false);}  }
class C{  protected Item parseSnapshot(DataSnapshot snapshot){  return snapshot.getValue(mModelClass);}  }
class C{  protected static void configDbClient() throws URISyntaxException, IOException {  if (_dbClient == null) {    _dbClient=getDbClient();    log.info("DB client started OK");  }}  }
class C{  public static ComponentUI createUI(JComponent x){  return new CompiereScrollPaneUI();}  }
class C{  public int countItems(Quadrant... quads){  int count=0;  for (  Quadrant quad : quads) {    count+=getRaptorTabFolder(quad).getItemCount();  }  return count;}  }
class C{  @Nullable public FileTemplateBase findTemplateByName(@NotNull String templateName){  final FileTemplateBase template=getTemplates().get(templateName);  if (template != null) {    final boolean isEnabled=!(template instanceof BundledFileTemplate) || ((BundledFileTemplate)template).isEnabled();    if (isEnabled) {      return template;    }  }  for (  FileTemplateBase t : getAllTemplates(false)) {    final String qName=t.getQualifiedName();    if (qName.startsWith(templateName) && qName.length() > templateName.length()) {      String remainder=qName.substring(templateName.length());      if (remainder.startsWith(ENCODED_NAME_EXT_DELIMITER) || remainder.charAt(0) == '.') {        return t;      }    }  }  return null;}  }
class C{  public static boolean isNamedProcess(Context context,String processName){  if (context == null) {    return false;  }  int pid=android.os.Process.myPid();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningAppProcessInfo> processInfoList=manager.getRunningAppProcesses();  if (ListUtils.isEmpty(processInfoList)) {    return false;  }  for (  RunningAppProcessInfo processInfo : processInfoList) {    if (processInfo != null && processInfo.pid == pid && ObjectUtils.isEquals(processName,processInfo.processName)) {      return true;    }  }  return false;}  }
class C{  protected static String shortName(String className){  int index=className.lastIndexOf('.');  if (index >= 0) {    return (className.substring(index + 1));  } else {    return (className);  }}  }
class C{  public void dragExit(DropTargetEvent evt){}  }
class C{  public void reset(){  fProposals.clear();  for (  Entry<IDocument,Position> entry : fPositions.entrySet()) {    IDocument doc=entry.getKey();    Position position=entry.getValue();    doc.removePosition(position);  }  fPositions.clear();}  }
class C{  private static <T>int gallopRight(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (c.compare(key,a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public LineEnd createLineEnd(){  LineEndImpl lineEnd=new LineEndImpl();  return lineEnd;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:53.140 -0500",hash_original_method="28474D5684D129A1738A9E8F91D9820E",hash_generated_method="6CB882EFE8E50C92497DD07A19624409") private boolean waitForResultTimedLocked(int interactionId){  long waitTimeMillis=TIMEOUT_INTERACTION_MILLIS;  final long startTimeMillis=SystemClock.uptimeMillis();  while (true) {    try {      Message sameProcessMessage=getSameProcessMessageAndClear();      if (sameProcessMessage != null) {        sameProcessMessage.getTarget().handleMessage(sameProcessMessage);      }      if (mInteractionId == interactionId) {        return true;      }      if (mInteractionId > interactionId) {        return false;      }      final long elapsedTimeMillis=SystemClock.uptimeMillis() - startTimeMillis;      waitTimeMillis=TIMEOUT_INTERACTION_MILLIS - elapsedTimeMillis;      if (waitTimeMillis <= 0) {        return false;      }      mInstanceLock.wait(waitTimeMillis);    } catch (    InterruptedException ie) {    }  }}  }
class C{  public InnerClass(short access,String name,String inner,String outer){  this.access=access;  this.name=null;  if (name != null)   this.name=new AsciiCP(name);  this.inner=null;  if (inner != null)   this.inner=new ClassCP(inner);  this.outer=null;  if (outer != null)   this.outer=new ClassCP(outer);}  }
class C{  private static void updateOrganizationRoles(PlatformUser platformUser,VOUser voUser){  for (  OrganizationToRole orgToRole : platformUser.getOrganization().getGrantedRoles()) {    voUser.getOrganizationRoles().add(orgToRole.getOrganizationRole().getRoleName());  }}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public RegionExistsException(Region rgn,Throwable cause){  super(rgn.getFullPath(),cause);  this.region=rgn;}  }
class C{  private boolean splitIfAtPhi(SimplifierTool tool){  if (!(predecessor() instanceof MergeNode)) {    return false;  }  MergeNode merge=(MergeNode)predecessor();  if (merge.forwardEndCount() == 1) {    return false;  }  if (merge.usages().count() != 1 || merge.phis().count() != 1) {    return false;  }  if (merge.stateAfter() != null) {    return false;  }  PhiNode phi=merge.phis().first();  if (phi.usages().count() != 1 || condition().usages().count() != 1) {    return false;  }  if (!conditionUses(condition(),phi)) {    return false;  }  MergeNode trueMerge=null;  MergeNode falseMerge=null;  assert merge.stateAfter() == null;  for (  EndNode end : merge.forwardEnds().snapshot()) {    Node value=phi.valueAt(end);    LogicNode result=computeCondition(tool,condition,phi,value);    if (result instanceof LogicConstantNode) {      merge.removeEnd(end);      if (((LogicConstantNode)result).getValue()) {        if (trueMerge == null) {          trueMerge=insertMerge(trueSuccessor());        }        trueMerge.addForwardEnd(end);      } else {        if (falseMerge == null) {          falseMerge=insertMerge(falseSuccessor());        }        falseMerge.addForwardEnd(end);      }    } else     if (result != condition) {      BeginNode trueBegin=graph().add(new BeginNode());      BeginNode falseBegin=graph().add(new BeginNode());      if (result.graph() == null) {        result=graph().addOrUniqueWithInputs(result);      }      IfNode newIfNode=graph().add(new IfNode(result,trueBegin,falseBegin,trueSuccessorProbability));      merge.removeEnd(end);      ((FixedWithNextNode)end.predecessor()).setNext(newIfNode);      if (trueMerge == null) {        trueMerge=insertMerge(trueSuccessor());      }      trueBegin.setNext(graph().add(new EndNode()));      trueMerge.addForwardEnd((EndNode)trueBegin.next());      if (falseMerge == null) {        falseMerge=insertMerge(falseSuccessor());      }      falseBegin.setNext(graph().add(new EndNode()));      falseMerge.addForwardEnd((EndNode)falseBegin.next());      end.safeDelete();    }  }  transferProxies(trueSuccessor(),trueMerge);  transferProxies(falseSuccessor(),falseMerge);  cleanupMerge(tool,merge);  cleanupMerge(tool,trueMerge);  cleanupMerge(tool,falseMerge);  return true;}  }
class C{  private void adaptContentView(){  if (contentContainer != null) {    inflateContentView();  }}  }
class C{  public void sortArray(T[] d,Comparator<T> c){  this.data=d;  this.comp=c;  int len=Math.max((int)(100 * Math.log(d.length)),TEMP_SIZE);  len=Math.min(d.length,len);  @SuppressWarnings("unchecked") T[] t=(T[])new Object[len];  this.temp=t;  quicksort(0,d.length - 1);}  }
class C{  public boolean onPrepareOptionsMenu(Menu menu){  if (mParent != null) {    return mParent.onPrepareOptionsMenu(menu);  }  return true;}  }
class C{  protected void checkClose() throws SQLException {  if (closed) {    throw new SQLException("Cannot do an operation on a closed statement");  }}  }
