class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.786 -0500",hash_original_method="3E735D41E2F85E8ACC700EB7ACA7DBFD",hash_generated_method="B3F6A2BE158A305318889C961631C794") final int dec(int i){  return ((i == 0) ? items.length : i) - 1;}  }
class C{  public AnimationBuilder(ViewAnimator viewAnimator,View... views){  this.viewAnimator=viewAnimator;  this.views=views;}  }
class C{  public ASCIIReader(InputStream inputStream,int size){  fInputStream=inputStream;  fBuffer=new byte[size];}  }
class C{  public List<MediaSearchResult> searchTvShow(String searchTerm,MediaScraper mediaScraper){  return searchTvShow(searchTerm,mediaScraper,TvShowModuleManager.SETTINGS.getScraperLanguage());}  }
class C{  public void registerWithSelector() throws IOException {  getSelectableChannel().configureBlocking(false);  getAcceptor().registerSC(this);}  }
class C{  public static int intersectLineSegmentAab(Vector3d p0,Vector3d p1,Vector3d min,Vector3d max,Vector2d result){  return intersectLineSegmentAab(p0.x,p0.y,p0.z,p1.x,p1.y,p1.z,min.x,min.y,min.z,max.x,max.y,max.z,result);}  }
class C{  private void openSoftKeyboard(View view){  ((InputMethodManager)getSystemService(INPUT_METHOD_SERVICE)).showSoftInput(view,InputMethodManager.SHOW_IMPLICIT);  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static Certification parseCertificationStringForMovieSetupCountry(String name){  Certification cert=Certification.NOT_RATED;  name=name.trim();  if (name.contains("/")) {    String[] countries=name.split("/");    for (    String c : countries) {      c=c.trim();      if (c.contains(":")) {        String[] cs=c.split(":");        cert=Certification.getCertification(MovieModuleManager.MOVIE_SETTINGS.getCertificationCountry(),cs[1]);        if (cert != Certification.NOT_RATED) {          return cert;        }      } else {        cert=Certification.getCertification(MovieModuleManager.MOVIE_SETTINGS.getCertificationCountry(),c);        if (cert != Certification.NOT_RATED) {          return cert;        }      }    }    for (    String c : countries) {      c=c.trim();      if (c.contains(":")) {        String[] cs=c.split(":");        cert=Certification.findCertification(cs[1]);        if (cert != Certification.NOT_RATED) {          return cert;        }      } else {        cert=Certification.findCertification(c);        if (cert != Certification.NOT_RATED) {          return cert;        }      }    }  } else {    if (name.contains(":")) {      String[] cs=name.split(":");      cert=Certification.getCertification(MovieModuleManager.MOVIE_SETTINGS.getCertificationCountry(),cs[1].trim());    } else {      cert=Certification.getCertification(MovieModuleManager.MOVIE_SETTINGS.getCertificationCountry(),name.trim());    }  }  if (cert == Certification.NOT_RATED) {    cert=Certification.findCertification(name);  }  return cert;}  }
class C{  final public boolean startsWithIgnoreCase(final CharSequence prefix){  final int l=prefix.length();  if (l > length())   return false;  int i=l;  final char[] a=array;  char c, d;  while (i-- != 0) {    c=Character.toLowerCase(Character.toUpperCase(a[i]));    d=Character.toLowerCase(Character.toUpperCase(prefix.charAt(i)));    if (c != d)     return false;  }  return true;}  }
class C{  public final boolean isEquivalent(){  return isErasure() && (this.rule & SearchPattern.R_EQUIVALENT_MATCH) != 0;}  }
class C{  public ElementCache(int size){  super(size);}  }
class C{  LambdaForm customize(MethodHandle mh){  LambdaForm customForm=new LambdaForm(debugName,arity,names,result,forceInline,mh);  if (COMPILE_THRESHOLD > 0 && isCompiled) {    customForm.compileToBytecode();  }  customForm.transformCache=this;  return customForm;}  }
class C{  public void playTogether(Animator... items){  if (items != null) {    mNeedsSort=true;    Builder builder=play(items[0]);    for (int i=1; i < items.length; ++i) {      builder.with(items[i]);    }  }}  }
class C{  public boolean saveParameters(){  log.config("");  if (!validateParameters())   return false;  for (int i=0; i < m_mFields.size(); i++) {    WEditor editor=(WEditor)m_wEditors.get(i);    WEditor editor2=(WEditor)m_wEditors2.get(i);    Object result=editor.getValue();    Object result2=null;    if (editor2 != null)     result2=editor2.getValue();    MPInstancePara para=new MPInstancePara(Env.getCtx(),m_processInfo.getAD_PInstance_ID(),i);    GridField mField=(GridField)m_mFields.get(i);    para.setParameterName(mField.getColumnName());    if (result instanceof Timestamp || result2 instanceof Timestamp) {      para.setP_Date((Timestamp)result);      if (editor2 != null && result2 != null)       para.setP_Date_To((Timestamp)result2);    } else     if (result instanceof Integer || result2 instanceof Integer) {      if (result != null) {        Integer ii=(Integer)result;        para.setP_Number(ii.intValue());      }      if (editor2 != null && result2 != null) {        Integer ii=(Integer)result2;        para.setP_Number_To(ii.intValue());      }    } else     if (result instanceof BigDecimal || result2 instanceof BigDecimal) {      para.setP_Number((BigDecimal)result);      if (editor2 != null && result2 != null)       para.setP_Number_To((BigDecimal)result2);    } else     if (result instanceof Boolean) {      Boolean bb=(Boolean)result;      String value=bb.booleanValue() ? "Y" : "N";      para.setP_String(value);    } else {      if (result != null)       para.setP_String(result.toString());      if (editor2 != null && result2 != null)       para.setP_String_To(result2.toString());    }    para.setInfo(editor.getDisplay());    if (editor2 != null)     para.setInfo_To(editor2.getDisplay());    para.saveEx();    log.fine(para.toString());  }  return true;}  }
class C{  public boolean next(){  if (!hasNext) {    return false;  }  for (int i=0; i < m; i++) {    out[i]=in[index[i]];  }  moveIndex();  return true;}  }
class C{  public boolean isInitializationFinished(){  return mInitializationFinished;}  }
class C{  private int detectPid() throws NodeJsDebuggerException {  NodeJsDebugCommand<String> command=createCommand("process.pid",new NodeJsOutputRegExpParser(PROCESS_PID_COMMAND_OUTPUT_PATTERN));  return Integer.parseInt(doExecute(command));}  }
class C{  public boolean isMultiThreadScanning(){  return !interruptMultiThread && mThreadStarted;}  }
class C{  public void saveLogFile(){  if (fc == null) {    fc=new FileDialog(getFrame());    fc.setMultipleMode(false);    try {      fc.setDirectory(PrefManager.get().getSelectedPath().getCanonicalPath());    } catch (    IOException ioe) {    }  }  if (firstFile && (PrefManager.get().getPreferredSizeFileChooser().height > 0)) {    fc.setPreferredSize(PrefManager.get().getPreferredSizeFileChooser());  }  fc.setMode(FileDialog.SAVE);  fc.setPreferredSize(fc.getSize());  fc.setVisible(true);  PrefManager.get().setPreferredSizeFileChooser(fc.getSize());  String selectedFile=fc.getFile();  if (selectedFile != null) {    File file=new File(selectedFile);    int selectValue=0;    if (file.exists()) {      Object[] options={"Overwrite","Cancel"};      selectValue=JOptionPane.showOptionDialog(null,"<html><body>File exists<br><b>" + file + "</b></body></html>","Confirm overwrite",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);    }    if (selectValue == 0) {      FileOutputStream fos=null;      try {        fos=new FileOutputStream(file);        fos.write(((LogFileContent)logFile.getUserObject()).getContent().getBytes());        fos.flush();      } catch (      IOException ex) {        ex.printStackTrace();      } finally {        try {          fos.close();        } catch (        IOException ex) {          ex.printStackTrace();        }      }    }  }}  }
class C{  public Plugin(RajawaliRenderer renderer){  this(renderer,true);}  }
class C{  private void close(){  System.exit(0);}  }
class C{  public Object clone() throws CloneNotSupportedException {  CandleSeries clone=(CandleSeries)super.clone();  clone.contract=(Contract)this.getContract().clone();  clone.symbol=this.getSymbol();  clone.currency=this.getCurrency();  clone.exchange=this.getExchange();  clone.secType=this.getSecType();  clone.startTime=this.getStartTime();  clone.endTime=this.getEndTime();  clone.barSize=this.getBarSize();  clone.rollingCandle=new RollingCandle();  return clone;}  }
class C{  public void prepareBuilderState(){  descriptor().state().properties().forEach(null);  descriptor().state().associations().forEach(null);  descriptor().state().manyAssociations().forEach(null);  descriptor().state().namedAssociations().forEach(null);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  public ActionList decode(int length,boolean throwExceptions) throws IOException {  int startOffset=reader.getOffset();  int end=startOffset + length;  boolean ending=false;  ActionFactory factory=new ActionFactory(length,startOffset,actionCount);  try {    for (int offset=startOffset; offset < end; offset=reader.getOffset()) {      int opcode=reader.readUI8();      if (opcode > 0) {        if (ending)         throw new SwfFormatException("unexpected bytes after sactionEnd: " + opcode);        factory.setActionOffset(actionCount,offset);        decodeAction(opcode,offset,factory);        actionCount++;      } else       if (opcode == 0) {        ending=true;      } else {        break;      }    }    factory.setActionOffset(actionCount,reader.getOffset());  } catch (  ArrayIndexOutOfBoundsException aio) {    if (throwExceptions)     throw aio;  }catch (  SwfFormatException swf) {    if (throwExceptions)     throw swf;  }  return factory.createActionList(keepOffsets);}  }
class C{  protected void addServiceRefPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ServiceInvocation_serviceRef_feature"),getString("_UI_PropertyDescriptor_description","_UI_ServiceInvocation_serviceRef_feature","_UI_ServiceInvocation_type"),EipPackage.Literals.SERVICE_INVOCATION__SERVICE_REF,true,false,true,null,null,null));}  }
class C{  public boolean isSetClose(){  return EncodingUtils.testBit(__isset_bitfield,__CLOSE_ISSET_ID);}  }
class C{  static void test4() throws Exception {  String osName=System.getProperty("os.name");  if (!osName.startsWith("SunOS"))   return;  String dataModel=System.getProperty("sun.arch.data.model");  if (!dataModel.startsWith("64"))   return;  File testFile=File.createTempFile("test4",null);  testFile.deleteOnExit();  FileChannel[] fcs=new FileChannel[TEST4_NUM_BUFFERS];  ByteBuffer[] dsts=new ByteBuffer[TEST4_NUM_BUFFERS];  for (int i=0; i < TEST4_NUM_BUFFERS; i++) {    File f=File.createTempFile("test4." + i,null);    f.deleteOnExit();    prepTest4File(f);    FileInputStream fis=new FileInputStream(f);    FileChannel fc=fis.getChannel();    MappedByteBuffer mbb=fc.map(FileChannel.MapMode.READ_ONLY,0,TEST4_BUF_CAP);    dsts[i]=mbb;  }  FileOutputStream fos=new FileOutputStream(testFile);  FileChannel fc=fos.getChannel();  try {    long bytesWritten=fc.write(dsts);    if (bytesWritten < Integer.MAX_VALUE) {      throw new RuntimeException("Test 4 failed but wrote " + bytesWritten);    }  }  finally {    fc.close();    fos.close();  }}  }
class C{  public From(To to){  super(NAME);  address=to.address;  parameters=to.parameters;}  }
class C{  private void declareExtensions(){  extProfile.setAutoExtending(true);  new AlbumEntry().declareExtensions(extProfile);  new AlbumFeed().declareExtensions(extProfile);  new CommentEntry().declareExtensions(extProfile);  new PhotoEntry().declareExtensions(extProfile);  new PhotoFeed().declareExtensions(extProfile);  new TagEntry().declareExtensions(extProfile);  new UserEntry().declareExtensions(extProfile);  new UserFeed().declareExtensions(extProfile);}  }
class C{  public Contribution(NondominatedPopulation referenceSet,double epsilon){  this(referenceSet,new EpsilonBoxDominanceComparator(epsilon));}  }
class C{  public boolean hasBufferStrategyChanged(){  Container root=getRoot();  if (root != null) {    BufferStrategy ourBS=null;    BufferStrategy componentBS=null;    ourBS=getBufferStrategy(false);    if (root instanceof Window) {      componentBS=((Window)root).getBufferStrategy();    } else {      try {        componentBS=(BufferStrategy)getGetBufferStrategyMethod().invoke(root);      } catch (      InvocationTargetException ite) {        assert false;      }catch (      IllegalArgumentException iae) {        assert false;      }catch (      IllegalAccessException iae2) {        assert false;      }    }    if (componentBS != ourBS) {      if (ourBS != null) {        ourBS.dispose();      }      weakBS=null;      return true;    }  }  return false;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  @Override protected void mergeBlocks(OutputFileMetadata outputFileMetadata) throws IOException {  try {    LOG.debug("fastMergeActive: {}",fastMergeActive);    if (fastMergeActive && fastMergerDecisionMaker.isFastMergePossible(outputFileMetadata) && outputFileMetadata.getNumberOfBlocks() > 0) {      LOG.debug("Using fast merge on HDFS.");      concatBlocks(outputFileMetadata);      return;    }    LOG.debug("Falling back to slow merge on HDFS.");    super.mergeBlocks(outputFileMetadata);  } catch (  BlockNotFoundException e) {    if (recover(outputFileMetadata)) {      LOG.debug("Recovery attempt successful.");      successfulFiles.add(outputFileMetadata);    } else {      failedFiles.add(outputFileMetadata);    }  }}  }
class C{  public static double maximalElement(double[] values){  double maximal=Double.NEGATIVE_INFINITY;  for (int i=0; i < values.length; i++) {    maximal=(values[i] > maximal) ? values[i] : maximal;  }  return maximal;}  }
class C{  synchronized int numBlockedFlushes(){  return blockedFlushes.size();}  }
class C{  private static void updateNetResponseCookies(List<String> cookiesHeader){  final CookieStore cookieStore=getCookieManager().getCookieStore();  if (cookieStore != null && cookiesHeader != null) {    HttpCookie cookieStr=null;    for (    String cookieHeader : cookiesHeader) {      if (cookieHeader != null) {        List<HttpCookie> cookies=HttpCookie.parse(cookieHeader);        if (cookies != null && cookies.size() > 0) {          cookieStr=cookies.get(0);          LogUtil.d(TAG,"write-net",cookieStr);          cookieStore.add(null,cookieStr);        }      }    }  }}  }
class C{  public boolean isProgramBreak(){  return programBreak;}  }
class C{  public Query limit(int limit){  return limit(limit < 0 ? NO_LIMIT : Field.<Integer>field(Integer.toString(limit)));}  }
class C{  public void paintButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public boolean hasSameContent(final byte[] compareToBytes){  if (messageDigest == null || this.md5hash == null) {    return false;  }  byte[] compareToMd5=messageDigest.digest(compareToBytes);  if (logger.isDebugEnabled()) {    logger.debug("For JAR file: {}, Comparing MD5 hash {} to {}",this.file.getAbsolutePath(),new String(this.md5hash),new String(compareToMd5));  }  return Arrays.equals(this.md5hash,compareToMd5);}  }
class C{  public static List<String> test(){  return Test.run();}  }
class C{  public void open(int port) throws IOException {  connection=new DatagramSocket(port);  connection.setSoTimeout(timeout);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_noderemovechildoldchildnonexistent.class,args);}  }
class C{  public Images createImageDescriptor(CompletionProposal proposal){  final int flags=proposal.getFlags();  Images descriptor;switch (proposal.getKind()) {case CompletionProposal.METHOD_DECLARATION:case CompletionProposal.METHOD_NAME_REFERENCE:case CompletionProposal.METHOD_REF:case CompletionProposal.CONSTRUCTOR_INVOCATION:case CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER:case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:case CompletionProposal.POTENTIAL_METHOD_DECLARATION:case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:    descriptor=createMethodImageDescriptor(proposal);  break;case CompletionProposal.TYPE_REF:switch (Signature.getTypeSignatureKind(proposal.getSignature())) {case Signature.CLASS_TYPE_SIGNATURE:  descriptor=createTypeImageDescriptor(proposal);break;case Signature.TYPE_VARIABLE_SIGNATURE:descriptor=Images.classItem;break;default :descriptor=null;}break;case CompletionProposal.FIELD_REF:case CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER:descriptor=createFieldImageDescriptor(proposal.getFlags());break;case CompletionProposal.LOCAL_VARIABLE_REF:case CompletionProposal.VARIABLE_DECLARATION:descriptor=Images.VARIABLE;break;case CompletionProposal.PACKAGE_REF:descriptor=Images.VARIABLE;break;case CompletionProposal.KEYWORD:case CompletionProposal.LABEL_REF:descriptor=null;break;case CompletionProposal.JAVADOC_METHOD_REF:case CompletionProposal.JAVADOC_TYPE_REF:case CompletionProposal.JAVADOC_FIELD_REF:case CompletionProposal.JAVADOC_VALUE_REF:case CompletionProposal.JAVADOC_BLOCK_TAG:case CompletionProposal.JAVADOC_INLINE_TAG:case CompletionProposal.JAVADOC_PARAM_REF:descriptor=Images.JSP_TAG_ITEM;break;default :descriptor=null;Assert.isTrue(false);}if (descriptor == null) return null;return descriptor;}  }
class C{  public static ByteBuffer decode(ByteBuffer buf,PDFObject params) throws PDFParseException {  ASCIIHexDecode me=new ASCIIHexDecode(buf);  return me.decode();}  }
class C{  public GeneralName(int tag,ASN1Encodable name){  this.obj=name;  this.tag=tag;}  }
class C{  @Override public void onPageStarted(WebView view,String url,Bitmap favicon){  super.onPageStarted(view,url,favicon);  String newloc="";  if (url.startsWith("http:") || url.startsWith("https:") || url.startsWith("file:")) {    newloc=url;  } else   if (url.startsWith(WebView.SCHEME_TEL)) {    try {      Intent intent=new Intent(Intent.ACTION_DIAL);      intent.setData(Uri.parse(url));      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error dialing " + url + ": "+ e.toString());    }  } else   if (url.startsWith("geo:") || url.startsWith(WebView.SCHEME_MAILTO) || url.startsWith("market:")) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      intent.setData(Uri.parse(url));      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error with " + url + ": "+ e.toString());    }  } else   if (url.startsWith("sms:")) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      String address=null;      int parmIndex=url.indexOf('?');      if (parmIndex == -1) {        address=url.substring(4);      } else {        address=url.substring(4,parmIndex);        Uri uri=Uri.parse(url);        String query=uri.getQuery();        if (query != null) {          if (query.startsWith("body=")) {            intent.putExtra("sms_body",query.substring(5));          }        }      }      intent.setData(Uri.parse("sms:" + address));      intent.putExtra("address",address);      intent.setType("vnd.android-dir/mms-sms");      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error sending sms " + url + ":"+ e.toString());    }  } else {    newloc="http://" + url;  }  if (!newloc.equals(edittext.getText().toString())) {    edittext.setText(newloc);  }  try {    JSONObject obj=new JSONObject();    obj.put("type",LOAD_START_EVENT);    obj.put("url",newloc);    sendUpdate(obj,true);  } catch (  JSONException ex) {    Log.d(LOG_TAG,"Should never happen");  }}  }
class C{  public synchronized int readInSUTfromRemote(){  if (localBuffer.isEmpty()) {    return -1;  }  return localBuffer.poll() & 0xFF;}  }
class C{  public RoundedBitmapBuilder cornerRadius(float radius){  mCornerRadii[Corner.TOP_LEFT]=radius;  mCornerRadii[Corner.TOP_RIGHT]=radius;  mCornerRadii[Corner.BOTTOM_RIGHT]=radius;  mCornerRadii[Corner.BOTTOM_LEFT]=radius;  return this;}  }
class C{  TimeZone convertTimeZone(String timeZone){  String[] timeZoneTokens=timeZone.split(":");  int hours=0;  int minutes=0;  if (!timeZone.startsWith("Z") && !timeZone.startsWith("z")) {    if (timeZoneTokens.length > 0) {      hours=Integer.parseInt(timeZoneTokens[0]);    }    if (timeZoneTokens.length > 1) {      minutes=Integer.parseInt(timeZoneTokens[1]);      if (timeZone.startsWith("-")) {        minutes=minutes * -1;      }    }  }  int timeZoneOffsetMilliSeconds=((hours * 60) + minutes) * 1000;  return new SimpleTimeZone(timeZoneOffsetMilliSeconds,"");}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  private void updateText(){  if (valid) {    String addressText;    String nameText;    if (node.hasUserDefinedName()) {      addressText=String.format("Address: %s",node.getAddress());      nameText=String.format("Name: %s",node.getName());    } else {      addressText="";      nameText=String.format("Address: %s",node.getAddress());    }    this.labelAddress.setText(addressText);    this.labelName.setText(nameText);    this.labelNodeType.setText(node.isHost() ? "Host" : "Network");    this.labelCategory.setText(node.getDetails().getCategory().getPrettyPrint());  }}  }
class C{  private void updateNextPublishedDate(Resource resource) throws PublicationException {  if (resource.usesAutoPublishing()) {    try {      log.debug("Updating next published date of resource: " + resource.getShortname());      Date now=new Date();      int days=resource.getUpdateFrequency().getPeriodInDays();      Calendar cal=Calendar.getInstance();      cal.setTime(now);      cal.add(Calendar.DATE,days);      Date nextPublished=cal.getTime();      if (resource.getNextPublished() == null) {        log.debug("Auto-publishing turned on");      }      resource.setNextPublished(nextPublished);      log.debug("The next publication date is: " + nextPublished.toString());    } catch (    Exception e) {      String msg="Auto-publishing failed: " + e.getMessage();      log.error(msg,e);      throw new PublicationException(PublicationException.TYPE.SCHEDULING,msg,e);    }  } else {    log.debug("Resource: " + resource.getShortname() + " has not been configured to use auto-publishing");  }}  }
class C{  public BasicHttpResponse(final ProtocolVersion ver,final int code,final String reason){  this(new BasicStatusLine(ver,code,reason),null,null);}  }
class C{  public JobExecutionResult executePipeline() throws Exception {  final String jobName=options.getJobName();  if (flinkBatchEnv != null) {    return flinkBatchEnv.execute(jobName);  } else   if (flinkStreamEnv != null) {    return flinkStreamEnv.execute(jobName);  } else {    throw new IllegalStateException("The Pipeline has not yet been translated.");  }}  }
class C{  private void removeAt(int i){  Object[] array=queue;  int n=size - 1;  if (n == i)   array[i]=null; else {    E moved=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(i,moved,array,n); else     siftDownUsingComparator(i,moved,array,n,cmp);    if (array[i] == moved) {      if (cmp == null)       siftUpComparable(i,moved,array); else       siftUpUsingComparator(i,moved,array,cmp);    }  }  size=n;}  }
class C{  private void checkIfIamLeader(final int seq,final ElectionContext context,boolean replacement) throws KeeperException, InterruptedException, IOException {  context.checkIfIamLeaderFired();  final String holdElectionPath=context.electionPath + ELECTION_NODE;  List<String> seqs=zkClient.getChildren(holdElectionPath,null,true);  sortSeqs(seqs);  List<Integer> intSeqs=getSeqs(seqs);  if (intSeqs.size() == 0) {    log.warn("Our node is no longer in line to be leader");    return;  }  if (seq <= intSeqs.get(0)) {    if (seq == intSeqs.get(0) && !context.leaderSeqPath.equals(holdElectionPath + "/" + seqs.get(0))) {      log.info("was going be leader {} , seq(0) {}",context.leaderSeqPath,holdElectionPath + "/" + seqs.get(0));      retryElection(context,false);      return;    }    try {      zkClient.delete(context.leaderPath,-1,true);    } catch (    KeeperException.NoNodeException nne) {    }catch (    InterruptedException e) {      throw e;    }catch (    Exception e) {      log.error("leader elect delete error",e);      retryElection(context,false);      return;    }    try {      runIamLeaderProcess(context,replacement);    } catch (    KeeperException.NodeExistsException e) {      log.error("node exists",e);      retryElection(context,false);      return;    }  } else {    int i=1;    for (; i < intSeqs.size(); i++) {      int s=intSeqs.get(i);      if (seq < s) {        break;      }    }    int index=i - 2;    if (index < 0) {      log.warn("Our node is no longer in line to be leader");      return;    }    try {      String watchedNode=holdElectionPath + "/" + seqs.get(index);      zkClient.getData(watchedNode,watcher=new ElectionWatcher(context.leaderSeqPath,watchedNode,seq,context),null,true);    } catch (    KeeperException.SessionExpiredException e) {      throw e;    }catch (    KeeperException e) {      log.warn("Failed setting watch",e);      checkIfIamLeader(seq,context,true);    }  }}  }
class C{  public static void play(Context context,String clientId,SoundCloudTrack track){  Intent intent=new Intent(context,PlaybackService.class);  intent.setAction(ACTION_PLAY);  intent.putExtra(BUNDLE_KEY_SOUND_CLOUD_CLIENT_ID,clientId);  intent.putExtra(BUNDLE_KEY_SOUND_CLOUD_TRACK,track);  context.startService(intent);}  }
class C{  public void clearUndoStack(){  m_undoStack=new ArrayList<UndoAction>();  m_nCurrentEditAction=-1;  m_nSavedPointer=-1;}  }
class C{  private void migrateBlockConsistencyGroups(){  log.info("Migrating BlockConsistencyGroup objects.");  List<URI> cgURIs=dbClient.queryByType(BlockConsistencyGroup.class,true);  for (  URI cgURI : cgURIs) {    BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,cgURI);    if (cg.getTypes() == null || cg.getTypes().isEmpty()) {      log.info("Migrating BlockConsistencyGroup {}.",cg.getLabel());      if (cg.getType() != null) {        cg.addConsistencyGroupTypes(cg.getType());      }      if (isVPlexCG(cg)) {        log.info("Migrating fields for VPlex BlockConsistencyGroup {}.",cg.getLabel());        cg.addConsistencyGroupTypes(Types.VPLEX.name());        final List<Volume> activeCGVolumes=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Volume.class,getVolumesByConsistencyGroup(cg.getId().toString()));        log.info("Found " + activeCGVolumes.size() + " volumes that belong to BlockConsistencyGroup "+ cg.getLabel());        for (        Volume cgVolume : activeCGVolumes) {          String clusterId=getVPlexClusterFromVolume(cgVolume);          log.info("Adding storage system to cluster/cg mapping for VPlex BlockConsistencyGroup " + cg.getLabel());          cg.addSystemConsistencyGroup(cgVolume.getStorageController().toString(),BlockConsistencyGroupUtils.buildClusterCgName(clusterId,cg.getLabel()));        }      } else       if (!NullColumnValueGetter.isNullURI(cg.getStorageController())) {        cg.addSystemConsistencyGroup(cg.getStorageController().toString(),cg.getDeviceName());      }      cg.setType(NullColumnValueGetter.getNullStr());      cg.setDeviceName(NullColumnValueGetter.getNullStr());      dbClient.updateObject(cg);      log.info("Migration of BlockConsistencyGroup {} complete.",cg.getLabel());    }  }}  }
class C{  private static final Raster decodeJPEG(byte[] data,JPEGDecodeParam decodeParam,boolean colorConvert,int minX,int minY){  ByteArrayInputStream jpegStream=new ByteArrayInputStream(data);  JPEGImageDecoder decoder=decodeParam == null ? JPEGCodec.createJPEGDecoder(jpegStream) : JPEGCodec.createJPEGDecoder(jpegStream,decodeParam);  Raster jpegRaster;  try {    jpegRaster=colorConvert ? decoder.decodeAsBufferedImage().getWritableTile(0,0) : decoder.decodeAsRaster();  } catch (  IOException ioe) {    throw new RuntimeException("TIFFImage13");  }  return jpegRaster.createTranslatedChild(minX,minY);}  }
class C{  public void run(){  runok();  runko();}  }
class C{  static public Double kb2b(final String kb){  final double d=Double.parseDouble(kb);  final double x=d * Bytes.kilobyte32;  return x;}  }
class C{  public LiveSet firstPEIKillSet(){  return firstPEIKillSet;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public boolean equals(java.lang.Object obj){  return obj instanceof Date && ((Date)obj).date == date;}  }
class C{  private static void determineFirstDigit(StringBuilder resultString,int lgPatternFound) throws NotFoundException {  for (int d=0; d < 10; d++) {    if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {      resultString.insert(0,(char)('0' + d));      return;    }  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  char c=x.nextClean();  char q;  if (c == '[') {    q=']';  } else   if (c == '(') {    q=')';  } else {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() == ']') {    return;  }  x.back();  for (; ; ) {    if (x.nextClean() == ',') {      x.back();      add(null);    } else {      x.back();      add(x.nextValue());    }    c=x.nextClean();switch (c) {case ';':case ',':      if (x.nextClean() == ']') {        return;      }    x.back();  break;case ']':case ')':if (q != c) {  throw x.syntaxError("Expected a '" + new Character(q) + "'");}return;default :throw x.syntaxError("Expected a ',' or ']'");}}}  }
class C{  public AppMap(Map m){  putAll(m);}  }
class C{  public static boolean isAcquired(long memPtr){  return isAcquired(flags(memPtr));}  }
class C{  private void callDropPLSQL(String collectionName) throws OracleException {  OracleCallableStatement stmt=null;  String sqltext="begin\n" + " DBMS_SODA_ADMIN.DROP_COLLECTION(P_URI_NAME => ?);\n" + "end;";  try {    metrics.startTiming();    stmt=(OracleCallableStatement)conn.prepareCall(sqltext);    stmt.setNString(1,collectionName);    stmt.execute();    if (OracleLog.isLoggingEnabled())     log.info("Dropped collection " + collectionName);    stmt.close();    stmt=null;    metrics.recordDDL();  } catch (  SQLException e) {    if (OracleLog.isLoggingEnabled())     log.severe(e.toString());    boolean commitNeeded=false;    try {      if (sqlSyntaxLevel == SODAUtils.SQLSyntaxLevel.SQL_SYNTAX_UNKNOWN)       sqlSyntaxLevel=SODAUtils.getDatabaseVersion(conn);    } catch (    SQLException se) {      if (OracleLog.isLoggingEnabled())       log.severe(se.getMessage());      throw new OracleException(se);    }    if (!SODAUtils.sqlSyntaxBelow_12_2(sqlSyntaxLevel)) {      if (e.getErrorCode() == 40626) {        commitNeeded=true;      }    } else     if (e.getErrorCode() == 54) {      commitNeeded=true;    }    if (commitNeeded)     throw SODAUtils.makeExceptionWithSQLText(SODAMessage.EX_COMMIT_MIGHT_BE_NEEDED,e,sqltext);    throw SODAUtils.makeExceptionWithSQLText(e,sqltext);  } finally {    for (    String message : SODAUtils.closeCursor(stmt,null)) {      if (OracleLog.isLoggingEnabled())       log.severe(message);    }  }}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.EVENT_RAISING_EXPRESSION__EVENT:    return getEvent();case StextPackage.EVENT_RAISING_EXPRESSION__VALUE:  return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static MethodNoExceptionCoverageTestFitness createMethodTestFitness(BytecodeInstruction instruction){  if (instruction == null)   throw new IllegalArgumentException("null given");  return createMethodTestFitness(instruction.getClassName(),instruction.getMethodName());}  }
class C{  public ReadWriteLockedOffHeapHashMapFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory){  this(tableSource,false,storageEngineFactory,DEFAULT_TABLE_SIZE);}  }
class C{  private boolean checkOtherPrimeInfo(RSAOtherPrimeInfo[] toBeChecked){  if (toBeChecked == null || toBeChecked.length != opi.length) {    return false;  }  for (int i=0; i < opi.length; i++) {    if (opi[i].getPrime().equals(toBeChecked[i].getPrime()) && opi[i].getExponent().equals(toBeChecked[i].getExponent()) && opi[i].getCrtCoefficient().equals(toBeChecked[i].getCrtCoefficient())) {      continue;    }    return false;  }  return true;}  }
class C{  public static int numDocs(SolrIndexSearcher s,Query q,Query f) throws IOException {  return (null == f) ? s.getDocSet(q).size() : s.numDocs(q,f);}  }
class C{  public Map<String,Class<?>> memberTypes(){  return memberTypes;}  }
class C{  public Code39Reader(boolean usingCheckDigit){  this(usingCheckDigit,false);}  }
class C{  public int hashCode(){  return id.hashCode();}  }
class C{  @SuppressWarnings("unchecked") public static BucketWebsiteResult parseBucketWebsite(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    BucketWebsiteResult result=new BucketWebsiteResult();    if (root.getChild("IndexDocument") != null) {      result.setIndexDocument(root.getChild("IndexDocument").getChildText("Suffix"));    }    if (root.getChild("ErrorDocument") != null) {      result.setErrorDocument(root.getChild("ErrorDocument").getChildText("Key"));    }    if (root.getChild("RoutingRules") != null) {      List<Element> ruleElements=root.getChild("RoutingRules").getChildren("RoutingRule");      for (      Element ruleElem : ruleElements) {        RoutingRule rule=new RoutingRule();        rule.setNumber(Integer.parseInt(ruleElem.getChildText("RuleNumber")));        Element condElem=ruleElem.getChild("Condition");        if (condElem != null) {          rule.getCondition().setKeyPrefixEquals(condElem.getChildText("KeyPrefixEquals"));          if (condElem.getChild("HttpErrorCodeReturnedEquals") != null) {            rule.getCondition().setHttpErrorCodeReturnedEquals(Integer.parseInt(condElem.getChildText("HttpErrorCodeReturnedEquals")));          }        }        Element redirectElem=ruleElem.getChild("Redirect");        if (redirectElem.getChild("RedirectType") != null) {          rule.getRedirect().setRedirectType(RoutingRule.RedirectType.parse(redirectElem.getChildText("RedirectType")));        }        rule.getRedirect().setHostName(redirectElem.getChildText("HostName"));        if (redirectElem.getChild("Protocol") != null) {          rule.getRedirect().setProtocol(RoutingRule.Protocol.parse(redirectElem.getChildText("Protocol")));        }        rule.getRedirect().setReplaceKeyPrefixWith(redirectElem.getChildText("ReplaceKeyPrefixWith"));        rule.getRedirect().setReplaceKeyWith(redirectElem.getChildText("ReplaceKeyWith"));        if (redirectElem.getChild("HttpRedirectCode") != null) {          rule.getRedirect().setHttpRedirectCode(Integer.parseInt(redirectElem.getChildText("HttpRedirectCode")));        }        rule.getRedirect().setMirrorURL(redirectElem.getChildText("MirrorURL"));        result.AddRoutingRule(rule);      }    }    return result;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(5,5,"South");  childData=child.getData();  assertEquals("characterdataReplaceDataMiddleAssert","1230 South Ave. Dallas, Texas 98551",childData);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() % right.num());}  }
class C{  @Override public synchronized int hashCode(){  int hashCode=getID().hashCode() + rawOffset;  if (useDaylight) {    hashCode+=startYear + startMonth + startDay+ startDayOfWeek+ startTime+ startMode+ endMonth+ endDay+ endDayOfWeek+ endTime+ endMode+ dstSavings;  }  return hashCode;}  }
class C{  public NotequalsOp_ createNotequalsOp_(){  NotequalsOp_Impl notequalsOp_=new NotequalsOp_Impl();  return notequalsOp_;}  }
class C{  public List<String> badComplaintEmails(){  return Optional.ofNullable(complaint).filter(null).map(null).map(null).orElse(Collections.emptyList());}  }
class C{  public boolean isQuiet(){  return quiet;}  }
class C{  public StringBuffer format(long number,StringBuffer toAppendTo,FieldPosition status){  return format((double)number,toAppendTo,status);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Statement between(Object former,Object later){  statement.append(" BETWEEN ");  append(former);  statement.append(" AND ");  append(later);  return this;}  }
class C{  public void close() throws IOException {  rafile.close();}  }
class C{  private Baustein importUserDefinedBaustein(MbBaust mbBaust,List<BausteineMassnahmenResult> list) throws CommandException {  Baustein baustein=createBasicBaustein(mbBaust);  baustein=createMassnForBst(list,baustein);  baustein=createGefForBst(mbBaust,baustein);  return baustein;}  }
class C{  public static byte[][] convertArray(short[][] in){  byte[][] out=new byte[in.length][in[0].length];  for (int i=0; i < in.length; i++) {    for (int j=0; j < in[0].length; j++) {      out[i][j]=(byte)in[i][j];    }  }  return out;}  }
class C{  public WorkspacePoint[] newArray(int size){  return new WorkspacePoint[size];}  }
class C{  public void testUnknownAttributesAttribute(){  unknownAttributesAttribute=new UnknownAttributesAttribute();  assertEquals("UnknownAttributesAttribute() did not properly set the " + "Attribute's type field!",(int)Attribute.UNKNOWN_ATTRIBUTES,(int)unknownAttributesAttribute.getAttributeType());}  }
class C{  public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY,boolean flywheel){  this(context,interpolator,flywheel);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.195 -0500",hash_original_method="1DD335886100A2D5B4563E7A7FCB1E25",hash_generated_method="38B64ED35408E53105D19C6AADAB23EF") public void clear(){  numAuthExceptions=0;  numIoExceptions=0;  numParseExceptions=0;  numConflictDetectedExceptions=0;  numInserts=0;  numUpdates=0;  numDeletes=0;  numEntries=0;  numSkippedEntries=0;}  }
class C{  public KMLScreenOverlay(String namespaceURI){  super(namespaceURI);}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public void createSubUsageScenario01() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(17.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO01_PERUNIT_DAY",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO01_PERUNIT_DAY",serviceDetails,basicSetup.getCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO01_PERUNIT_DAY",subDetails);}  }
class C{  public CharArray(int capacity){  _array=new char[capacity];}  }
class C{  public ILineSegment[] generate(int size){  ILineSegment[] lines=new ILineSegment[size];  for (int i=0; i < size; i++) {    double x=Math.random();    x*=max;    double y=Math.random();    y*=max;    double dx=length * Math.cos(Math.random());    double dy=length * Math.sin(Math.random());    int sgn1, sgn2;    if (Math.random() <= .5) {      sgn1=+1;    } else {      sgn1=-1;    }    if (Math.random() <= .5) {      sgn2=+1;    } else {      sgn2=-1;    }    TwoDLineSegment line=new TwoDLineSegment(new TwoDPoint((int)x,(int)y),new TwoDPoint((int)(x + sgn1 * dx),(int)(y + sgn2 * dy)));    if (line.end.equals(line.start)) {      line=new TwoDLineSegment(new TwoDPoint((int)x - 1,(int)y - 1),new TwoDPoint((int)(x + sgn1 * dx) + 1,(int)(y + sgn2 * dy) + 1));    }    lines[i]=line;  }  return lines;}  }
class C{  void endProcess(){  if (this.r != null) {    try {      if (this.needsLRUEnd) {        this.needsLRUEnd=false;        this.r.txLRUEnd();      }    }  finally {      if (this.needsUnlock) {        this.needsUnlock=false;        this.r.unlockGII();      }    }  }}  }
class C{  public void invoke(VolumeAttachResponse attachResponse){  logger.info("Cinder Storage Port Invoke Operation Started for" + " the storage system : {}",storageSystem.getId());synchronized (this) {    try {      String protocolType=attachResponse.connection_info.driver_volume_type;      Map<String,List<String>> initiatorTargetMap=null;      if (CinderConstants.ATTACH_RESPONSE_FC_TYPE.equalsIgnoreCase(protocolType)) {        initiatorTargetMap=attachResponse.connection_info.data.initiator_target_map;        if (null != initiatorTargetMap && !initiatorTargetMap.isEmpty()) {          logger.debug("FC Initiator and Target mappings : {} ",initiatorTargetMap.toString());          performFCOperation(initiatorTargetMap);        }      }      String iqn=null;      if (CinderConstants.ATTACH_RESPONSE_ISCSI_TYPE.equalsIgnoreCase(protocolType)) {        iqn=attachResponse.connection_info.data.target_iqn;        logger.debug("iSCSI target IQN is :{}",iqn);        performISCSIOperation(iqn);      }      if (!modifiedStoragePortsList.isEmpty()) {        StoragePortAssociationHelper.updatePortAssociations(modifiedStoragePortsList,dbClient);      }      if (!newStoragePortsList.isEmpty()) {        StoragePortAssociationHelper.updatePortAssociations(newStoragePortsList,dbClient);      }    } catch (    Exception e) {      logger.error("There is an error while creating/modifying ports after export/attach," + " Reason:" + e.getMessage(),e);    } finally {      modifiedStoragePortsList.clear();      newStoragePortsList.clear();    }  }  logger.info("Cinder Storage Port Invoke Operation completed for" + " the storage system :{} ",storageSystem.getId());}  }
class C{  public String sendMessage(String gatewayId,Struct data) throws PageException, IOException {  Gateway g=getGateway(gatewayId);  if (g.getState() != Gateway.RUNNING)   throw new GatewayException("Gateway [" + gatewayId + "] is not running");  return g.sendMessage(data);}  }
class C{  private void createLogWindow(String title,ArrayList<String> logMessages,Color color){  if (logMessages == null || logMessages.size() == 0)   return;  ArrayList<String> displayLogMessages=new ArrayList<String>(logMessages);  JFrame frame=new JFrame(s_logger.localizeMessage(title));  frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  Container pane=frame.getContentPane();  Locale locale=Locale.getDefault();  pane.setComponentOrientation(ComponentOrientation.getOrientation(locale));  JTextArea textArea=new JTextArea(25,80);  textArea.setForeground(color);  textArea.setEditable(false);  JPanel panel=new JPanel();  panel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));  panel.add(textArea);  JScrollPane scrollPane=new JScrollPane(panel);  pane.add(scrollPane);  frame.pack();  frame.setLocationRelativeTo(null);  for (  String line : displayLogMessages) {    textArea.append(line);  }  frame.setVisible(true);}  }
class C{  public boolean resumeAll(long cyclePeriod){  if (timerTasks.containsKey(cyclePeriod)) {    timerTasks.get(cyclePeriod).resume();    return true;  }  return false;}  }
class C{  public static byte[] long2buff(long n){  byte[] bs;  bs=new byte[8];  bs[0]=(byte)((n >> 56) & 0xFF);  bs[1]=(byte)((n >> 48) & 0xFF);  bs[2]=(byte)((n >> 40) & 0xFF);  bs[3]=(byte)((n >> 32) & 0xFF);  bs[4]=(byte)((n >> 24) & 0xFF);  bs[5]=(byte)((n >> 16) & 0xFF);  bs[6]=(byte)((n >> 8) & 0xFF);  bs[7]=(byte)(n & 0xFF);  return bs;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public LoadField(Token t,Symbol symbol,Type fieldType,Expression index){  super(t);  this.symbol=symbol;  this.slot=symbol.getLocation();  this.index=index;  this.fieldType=fieldType;}  }
class C{  public boolean isInstanceAttribute(){  Object oo=get_Value(COLUMNNAME_IsInstanceAttribute);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean hasSkip(){  return canRead();}  }
class C{  public void nullPasswords(){  KeyStoreState state=initialState;  while (true) {    state.nullPasswords();    state=state.nextState();    if (state == null) {      break;    }  }}  }
class C{  public boolean isCurrentVersion(){  return StrgUtils.compareVersion(version,ReleaseInfo.getVersion()) == 0;}  }
class C{  public static void closeAttribute(){  Log.write("\"");}  }
class C{  @SideEffectFree public PropertyDescriptor(String propertyName,Class<?> beanClass) throws IntrospectionException {  this(propertyName,beanClass,Introspector.IS_PREFIX + NameGenerator.capitalize(propertyName),Introspector.SET_PREFIX + NameGenerator.capitalize(propertyName));}  }
class C{  @Override public void close(){}  }
class C{  public static boolean compileClass(Class<?> classToCompile){  return false;}  }
class C{  void put(final Object item){  lbd.add(item);}  }
class C{  public ElementType rootElementType(){  return theRoot;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected final void readChildren(final Element element,final PropertiesProvider provider) throws Exception {  final Element childrenElement=LwXmlReader.getRequiredChild(element,"children");  for (Iterator i=childrenElement.getChildren().iterator(); i.hasNext(); ) {    final Element child=(Element)i.next();    final LwComponent component=createComponentFromTag(child);    addComponent(component);    component.read(child,provider);  }}  }
class C{  public void release(){  try {    if (this.ss != null) {      this.ss.close();    }  } catch (  IOException ignore) {  }}  }
class C{  private MailImpl rawBounce(Mail mail,String bounceText) throws MessagingException {  MimeMessage original=mail.getMessage();  MimeMessage reply=(MimeMessage)original.reply(false);  reply.setSubject("Re: " + original.getSubject());  reply.setSentDate(new Date());  Collection<MailAddress> recipients=new HashSet<MailAddress>();  recipients.add(mail.getSender());  InternetAddress addr[]={new InternetAddress(mail.getSender().toString())};  reply.setRecipients(Message.RecipientType.TO,addr);  reply.setFrom(new InternetAddress(mail.getRecipients().iterator().next().toString()));  reply.setText(bounceText);  reply.setHeader(RFC2822Headers.MESSAGE_ID,"replyTo-" + mail.getName());  return new MailImpl("replyTo-" + mail.getName(),new MailAddress(mail.getRecipients().iterator().next().toString()),recipients,reply);}  }
class C{  public boolean intersects(final PlanetModel planetModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){  if (isNumericallyIdentical(q)) {    for (    GeoPoint p : notablePoints) {      if (meetsAllBounds(p,bounds,moreBounds)) {        return true;      }    }    for (    GeoPoint p : moreNotablePoints) {      if (meetsAllBounds(p,bounds,moreBounds)) {        return true;      }    }    return false;  }  final double lineVectorX=y * q.z - z * q.y;  final double lineVectorY=z * q.x - x * q.z;  final double lineVectorZ=x * q.y - y * q.x;  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {    return false;  }  double x0;  double y0;  double z0;  final double denomYZ=this.y * q.z - this.z * q.y;  final double denomXZ=this.x * q.z - this.z * q.x;  final double denomXY=this.x * q.y - this.y * q.x;  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {      return false;    }    final double denom=1.0 / denomYZ;    x0=0.0;    y0=(-this.D * q.z - this.z * -q.D) * denom;    z0=(this.y * -q.D + this.D * q.y) * denom;  } else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {      return false;    }    final double denom=1.0 / denomXZ;    x0=(-this.D * q.z - this.z * -q.D) * denom;    y0=0.0;    z0=(this.x * -q.D + this.D * q.x) * denom;  } else {    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {      return false;    }    final double denom=1.0 / denomXY;    x0=(-this.D * q.y - this.y * -q.D) * denom;    y0=(this.x * -q.D + this.D * q.x) * denom;    z0=0.0;  }  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;  final double BsquaredMinus=B * B - 4.0 * A * C;  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {    final double inverse2A=1.0 / (2.0 * A);    final double t=-B * inverse2A;    final double pointX=lineVectorX * t + x0;    final double pointY=lineVectorY * t + y0;    final double pointZ=lineVectorZ * t + z0;    for (    final Membership bound : bounds) {      if (!bound.isWithin(pointX,pointY,pointZ)) {        return false;      }    }    for (    final Membership bound : moreBounds) {      if (!bound.isWithin(pointX,pointY,pointZ)) {        return false;      }    }    return true;  } else   if (BsquaredMinus > 0.0) {    final double inverse2A=1.0 / (2.0 * A);    final double sqrtTerm=Math.sqrt(BsquaredMinus);    final double t1=(-B + sqrtTerm) * inverse2A;    final double t2=(-B - sqrtTerm) * inverse2A;    final double point1X=lineVectorX * t1 + x0;    final double point1Y=lineVectorY * t1 + y0;    final double point1Z=lineVectorZ * t1 + z0;    boolean point1Valid=true;    for (    final Membership bound : bounds) {      if (!bound.isWithin(point1X,point1Y,point1Z)) {        point1Valid=false;        break;      }    }    if (point1Valid) {      for (      final Membership bound : moreBounds) {        if (!bound.isWithin(point1X,point1Y,point1Z)) {          point1Valid=false;          break;        }      }    }    if (point1Valid) {      return true;    }    final double point2X=lineVectorX * t2 + x0;    final double point2Y=lineVectorY * t2 + y0;    final double point2Z=lineVectorZ * t2 + z0;    for (    final Membership bound : bounds) {      if (!bound.isWithin(point2X,point2Y,point2Z)) {        return false;      }    }    for (    final Membership bound : moreBounds) {      if (!bound.isWithin(point2X,point2Y,point2Z)) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  private SimpleSink.SimpleWriter buildWriter(){  SimpleSink.SimpleWriteOperation writeOp=buildWriteOperation(TemporaryFileRetention.REMOVE);  return new SimpleSink.SimpleWriter(writeOp);}  }
class C{  protected boolean doTest(String theMacAlgo,String thePBKDF2Algo) throws NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {  int OFFSET=5;  byte[] plain=new byte[25];  new SecureRandom().nextBytes(plain);  byte[] tail=new byte[plain.length - OFFSET];  System.arraycopy(plain,OFFSET,tail,0,tail.length);  SecretKey key=getSecretKey(thePBKDF2Algo);  Mac theMac=Mac.getInstance(theMacAlgo);  theMac.init(key);  byte[] result1=theMac.doFinal(plain);  if (!isMacLengthExpected(theMacAlgo,result1.length)) {    return false;  }  theMac.reset();  theMac.update(plain[0]);  theMac.update(plain,1,OFFSET - 1);  byte[] result2=theMac.doFinal(tail);  if (!java.util.Arrays.equals(result1,result2)) {    System.out.println("result1 and result2 are not the same:");    System.out.println("result1: " + dumpByteArray(result1));    System.out.println("result2: " + dumpByteArray(result2));    return false;  } else {    System.out.println("Resulted MAC with update and doFinal is same");  }  return true;}  }
class C{  private static Object fieldObject(final Object obj,final Field field){  try {    return field.get(obj);  } catch (  final IllegalArgumentException e) {    return null;  }catch (  final IllegalAccessException e) {    return null;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.PROPERTY__CONST:    return const_ != CONST_EDEFAULT;case TypesPackage.PROPERTY__READONLY:  return readonly != READONLY_EDEFAULT;case TypesPackage.PROPERTY__EXTERNAL:return external != EXTERNAL_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  private static final void usage(){  System.err.println("usage: java Health -l <levels> -t <time> -s <seed> [-p] [-m] [-h]");  System.err.println("    -l the size of the health care system");  System.err.println("    -t the amount of simulation time");  System.err.println("    -s a random no. generator seed");  System.err.println("    -p (print results)");  System.err.println("    -m (print information messages");  System.err.println("    -h (this message)");  System.exit(0);}  }
class C{  private void updateFS(FileShare fsObj,DbClient dbClient,VNXeCommandJob job,StringBuilder logMsgBuilder,VNXeApiClient vnxeApiClient){  try {    fsObj.setCreationTime(Calendar.getInstance());    VNXeFileSystem vnxeFS=null;    vnxeFS=vnxeApiClient.getFileSystemByFSName(fsObj.getName());    if (vnxeFS != null) {      fsObj.setNativeId(vnxeFS.getId());      fsObj.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(dbClient,fsObj));      fsObj.setInactive(false);      String mountPath="/" + fsObj.getName();      fsObj.setMountPath(mountPath);      fsObj.setPath(mountPath);      dbClient.persistObject(fsObj);      if (logMsgBuilder.length() != 0) {        logMsgBuilder.append("\n");      }      logMsgBuilder.append(String.format("Created file system successfully .. NativeId: %s, URI: %s",fsObj.getNativeId(),getTaskCompleter().getId()));    } else {      logMsgBuilder.append("Could not find corresponding file system in the VNXe, using the fs name: ");      logMsgBuilder.append(fsObj.getName());    }  } catch (  IOException e) {    _logger.error("Caught an exception while trying to update file system attributes",e);  }}  }
class C{  public boolean drawImage(Image img,AffineTransform xform,ImageObserver observer){  if (img == null) {    return true;  }  if (xform == null || xform.isIdentity()) {    return drawImage(img,0,0,null,observer);  }  if (isHiDPIImage(img)) {    final int w=img.getWidth(null);    final int h=img.getHeight(null);    final AffineTransform tx=new AffineTransform(transform);    transform(xform);    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);    transform.setTransform(tx);    invalidateTransform();    return result;  }  try {    return imagepipe.transformImage(this,img,xform,observer);  } catch (  InvalidPipeException e) {    try {      revalidateAll();      return imagepipe.transformImage(this,img,xform,observer);    } catch (    InvalidPipeException e2) {      return false;    }  } finally {    surfaceData.markDirty();  }}  }
class C{  public RunBatchScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public static Object deserializeStream(final String witness) throws Exception {  FileInputStream fileIs=new FileInputStream(witness);  ObjectInputStream objIs=new ObjectInputStream(fileIs);  return objIs.readObject();}  }
class C{  private void organizeComments(final List<JSONObject> comments) throws RepositoryException {  for (  final JSONObject comment : comments) {    organizeComment(comment);  }}  }
class C{  public static <T>Flux<T> sorted(Flux<T> flux,Comparator<? super T> c){  return Flux.fromIterable(null);}  }
class C{  private void addTracks(){  EndToEndTestUtils.deleteAllTracks();  EndToEndTestUtils.createTrackIfEmpty(3,true);  instrumentation.waitForIdleSync();  EndToEndTestUtils.createSimpleTrack(0,true);  instrumentation.waitForIdleSync();  assertEquals(2,EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount());}  }
class C{  public static OutputStream constructOutputStream(DataOutput out){  if (out instanceof OutputStream) {    return (OutputStream)out;  } else {    return new DataOutputOutputStream(out);  }}  }
class C{  protected void startActivityForResult(Intent intent,int code){  activity.startActivityForResult(intent,code);}  }
class C{  private boolean isTemporalCoverageEmpty(TemporalCoverage cov){  if (cov != null) {    String formationPeriod=cov.getFormationPeriod();    Date end=cov.getEndDate();    String period=cov.getLivingTimePeriod();    Date start=cov.getStartDate();    return (Strings.isNullOrEmpty(formationPeriod) && end == null && Strings.isNullOrEmpty(period) && start == null);  }  return true;}  }
class C{  public Envelope(double x1,double x2,double y1,double y2){  init(x1,x2,y1,y2);}  }
class C{  public boolean GT(Word w2){  return w2.LT(this);}  }
class C{  protected JPopupMenu createPopupMenu(){  JPopupMenu menu=new JPopupMenu();  JMenuItem menuItem;  menuItem=new JMenuItem(undoAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menuItem=new JMenuItem(redoAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menu.addSeparator();  menuItem=new JMenuItem(cutAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menuItem=new JMenuItem(copyAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menuItem=new JMenuItem(pasteAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menuItem=new JMenuItem(deleteAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  menu.addSeparator();  menuItem=new JMenuItem(selectAllAction);  menuItem.setAccelerator(null);  menuItem.setToolTipText(null);  menu.add(menuItem);  return menu;}  }
class C{  public static final float[] hsvToRGB(float h,float s,float v){  return hsvToRGB(h,s,v,new float[3]);}  }
class C{  private ZLIBCodec(){}  }
class C{  public void lockUI(ProcessInfo pi){  this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  this.setEnabled(false);}  }
class C{  public void updateNull(String columnName) throws SQLException {  updateNull(findColumn(columnName));}  }
class C{  public void reset(){  noIndex=false;  noFollow=false;  noCache=false;  refresh=false;  refreshTime=0;  baseHref=null;  refreshHref=null;  generalTags.clear();  httpEquivTags.clear();}  }
class C{  public HighlightBuilder useExplicitFieldOrder(boolean useExplicitFieldOrder){  this.useExplicitFieldOrder=useExplicitFieldOrder;  return this;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  private void listReady(List<MyMap> myMaps){  if (myMaps.isEmpty()) {    Toast.makeText(this,"There is a problem with the server, please report this to app developer!",Toast.LENGTH_SHORT).show();  } else {    myDownloadAdapter.clearList();    myDownloadAdapter.addAll(myMaps);  }}  }
class C{  public boolean isDescription(){  Object oo=get_Value(COLUMNNAME_IsDescription);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public QueryIndex(Collection<String> fields,QueryIndexType type){  this.fields=new LinkedHashMap<>();  for (  String field : fields)   this.fields.put(field,true);  this.type=type;}  }
class C{  public ValueChangeListenerITCase(String name){  super(name);}  }
class C{  public boolean hasAmbience(){  return this.ambience != null;}  }
class C{  public List<Company> companies(){  return companies;}  }
class C{  public void configure() throws ReplicatorException {  roleName=properties.getString(ReplicatorConf.ROLE);  if (isProvisioning()) {    if (!ReplicatorConf.ROLE_MASTER.equals(roleName))     throw new ReplicatorException("Provisioning can happen only on master");    roleName=ReplicatorConf.ROLE_MASTER + "-provision";  } else   if (ReplicatorConf.ROLE_MASTER.equals(roleName))   role=ReplicatorRole.MASTER; else   if (ReplicatorConf.ROLE_SLAVE.equals(roleName))   role=ReplicatorRole.SLAVE; else {    if (roleName == null) {      throw new ReplicatorException("Property replicator.role is not set; must be name of a pipeline");    } else {      role=ReplicatorRole.OTHER;    }  }  logger.info("Replicator role: " + roleName);  String nativeSlaveTakeoverSetting=assertPropertyDefault(ReplicatorConf.NATIVE_SLAVE_TAKEOVER,ReplicatorConf.NATIVE_SLAVE_TAKEOVER_DEFAULT);  nativeSlaveTakeover=new Boolean(nativeSlaveTakeoverSetting);  String autoEnableSetting=assertPropertyDefault(ReplicatorConf.AUTO_ENABLE,ReplicatorConf.AUTO_ENABLE_DEFAULT);  autoEnable=new Boolean(autoEnableSetting);  String autoMasterRepositioningSetting=assertPropertyDefault(ReplicatorConf.AUTO_MASTER_REPOSITIONING,ReplicatorConf.AUTO_MASTER_REPOSITIONING_DEFAULT);  if (!"false".equals(autoMasterRepositioningSetting) && !"true".equals(autoMasterRepositioningSetting)) {    throw new ReplicatorException(String.format("%s property must be set to true or false: %s",ReplicatorConf.AUTO_MASTER_REPOSITIONING,autoMasterRepositioningSetting));  }  sourceId=assertPropertyDefault(ReplicatorConf.SOURCE_ID,ReplicatorConf.SOURCE_ID_DEFAULT);  clusterName=assertPropertyDefault(ReplicatorConf.CLUSTER_NAME,ReplicatorConf.CLUSTER_NAME_DEFAULT);  serviceName=assertPropertySet(ReplicatorConf.SERVICE_NAME);  for (  char c : serviceName.toCharArray()) {    if (Character.isLetterOrDigit(c))     continue; else     if (c == '_')     continue; else {      throw new ReplicatorException(String.format("Service name may only contain letters, digits, and underscore (_):  %s",serviceName));    }  }  MDC.put("serviceName",serviceName);  String serviceType=assertPropertyDefault(ReplicatorConf.SERVICE_TYPE,ReplicatorConf.SERVICE_TYPE_DEFAULT);  if ("local".compareToIgnoreCase(serviceType) == 0)   remoteService=false; else   if ("remote".compareToIgnoreCase(serviceType) == 0)   remoteService=true; else {    throw new ReplicatorException("Valid settings for " + ReplicatorConf.SERVICE_TYPE + " are local or remote");  }  String consistencyPolicy=assertPropertyDefault(ReplicatorConf.APPLIER_CONSISTENCY_POLICY,ReplicatorConf.APPLIER_CONSISTENCY_POLICY_DEFAULT);  if (consistencyPolicy.compareToIgnoreCase("warn") == 0) {    logger.info("Setting consistencyFailureStop to false");    consistencyFailureStop=false;  } else   if (consistencyPolicy.compareToIgnoreCase("stop") == 0) {    logger.info("Setting consistencyFailureStop to true");    consistencyFailureStop=true;  } else {    throw new ReplicatorException("Valid values for " + ReplicatorConf.APPLIER_CONSISTENCY_POLICY + " are either 'stop' or 'warn'. Found: "+ consistencyPolicy);  }  String consistencyColumnNames=assertPropertyDefault(ReplicatorConf.APPLIER_CONSISTENCY_COL_NAMES,ReplicatorConf.APPLIER_CONSISTENCY_COL_NAMES_DEFAULT);  if (consistencyColumnNames.compareToIgnoreCase("true") == 0) {    logger.info("Setting consistencyCheckColumnNames to true");    consistencyCheckColumnNames=true;  } else   if (consistencyColumnNames.compareToIgnoreCase("false") == 0) {    logger.info("Setting consistencyCheckColumnNames to false");    consistencyCheckColumnNames=false;  } else {    throw new ReplicatorException("Valid values for " + ReplicatorConf.APPLIER_CONSISTENCY_COL_NAMES + " are either 'true' or 'false'. Found: "+ consistencyColumnNames);  }  String consistencyColumnTypes=assertPropertyDefault(ReplicatorConf.APPLIER_CONSISTENCY_COL_TYPES,ReplicatorConf.APPLIER_CONSISTENCY_COL_TYPES_DEFAULT);  if (consistencyColumnTypes.compareToIgnoreCase("true") == 0) {    logger.info("Setting consistencyCheckColumnTypes to true");    consistencyCheckColumnTypes=true;  } else   if (consistencyColumnTypes.compareToIgnoreCase("false") == 0) {    logger.info("Setting consistencyCheckColumnTypes to false");    consistencyCheckColumnTypes=false;  } else {    throw new ReplicatorException("Valid values for " + ReplicatorConf.APPLIER_CONSISTENCY_COL_TYPES + " are either 'true' or 'false'. Found: "+ consistencyColumnTypes);  }  this.replicatorSchemaName=assertPropertyDefault(ReplicatorConf.METADATA_SCHEMA,"tungsten_" + serviceName);  this.replicatorTableType=assertPropertyDefault(ReplicatorConf.METADATA_TABLE_TYPE,ReplicatorConf.METADATA_TABLE_TYPE_DEFAULT);  assertPropertyDefault(ReplicatorConf.LOG_SLAVE_UPDATES,ReplicatorConf.LOG_SLAVE_UPDATES_DEFAULT);  this.logSlaveUpdates=properties.getBoolean(ReplicatorConf.LOG_SLAVE_UPDATES);  assertPropertyDefault(ReplicatorConf.THL_URI,ReplicatorConf.THL_URI_DEFAULT);  assertPropertyDefault(ReplicatorConf.MASTER_CONNECT_URI,ReplicatorConf.THL_REMOTE_URI_DEFAULT);  assertPropertyDefault(ReplicatorConf.THL_APPLIER_BLOCK_COMMIT_SIZE,ReplicatorConf.THL_APPLIER_BLOCK_COMMIT_SIZE_DEFAULT);  assertPropertyDefault(ReplicatorConf.THL_SERVER_ACCEPT_TIMEOUT,ReplicatorConf.THL_SERVER_ACCEPT_TIMEOUT_DEFAULT);  assertPropertyDefault(ReplicatorConf.THL_PROTOCOL_BUFFER_SIZE,ReplicatorConf.THL_PROTOCOL_BUFFER_SIZE_DEFAULT);  assertPropertyDefault(ReplicatorConf.RESOURCE_JDBC_URL,ReplicatorConf.RESOURCE_JDBC_URL_DEFAULT);  String extractorFailureSetting=assertPropertyDefault(ReplicatorConf.EXTRACTOR_FAILURE_POLICY,ReplicatorConf.EXTRACTOR_FAILURE_POLICY_DEFAULT);  if (extractorFailureSetting.equals("stop")) {    logger.info("Setting applierFailurePolicy to stop");    extractorFailurePolicy=FailurePolicy.STOP;  } else   if (extractorFailureSetting.equals("warn")) {    logger.info("Setting applierFailurePolicy to warn");    extractorFailurePolicy=FailurePolicy.WARN;  } else {    throw new ReplicatorException("Valid values for " + ReplicatorConf.EXTRACTOR_FAILURE_POLICY + " are either 'stop' or 'skip'. Found: "+ extractorFailureSetting);  }  String applierFailureSetting=assertPropertyDefault(ReplicatorConf.APPLIER_FAILURE_POLICY,ReplicatorConf.APPLIER_FAILURE_POLICY_DEFAULT);  if (applierFailureSetting.equals("stop")) {    logger.info("Setting applierFailurePolicy to stop");    applierFailurePolicy=FailurePolicy.STOP;  } else   if (applierFailureSetting.equals("warn")) {    logger.info("Setting applierFailurePolicy to warn");    applierFailurePolicy=FailurePolicy.WARN;  } else {    throw new ReplicatorException("Valid values for " + ReplicatorConf.APPLIER_FAILURE_POLICY + " are either 'stop' or 'warn'. Found: "+ properties.getString(ReplicatorConf.APPLIER_FAILURE_POLICY));  }  String applierFailureSettingOn0RowUpdates=assertPropertyDefault(ReplicatorConf.APPLIER_FAIL_ON_0_ROW_UPDATE,ReplicatorConf.APPLIER_FAIL_ON_0_ROW_UPDATE_DEFAULT);  if (applierFailureSettingOn0RowUpdates.equalsIgnoreCase("stop")) {    logger.info("Setting " + ReplicatorConf.APPLIER_FAIL_ON_0_ROW_UPDATE + " to stop");    applierFailOn0RowUpdates=FailurePolicy.STOP;  } else   if (applierFailureSettingOn0RowUpdates.equalsIgnoreCase("warn")) {    logger.info("Setting " + ReplicatorConf.APPLIER_FAIL_ON_0_ROW_UPDATE + " to warn");    applierFailOn0RowUpdates=FailurePolicy.WARN;  } else   if (applierFailureSettingOn0RowUpdates.equalsIgnoreCase("ignore")) {    logger.info("Setting " + ReplicatorConf.APPLIER_FAIL_ON_0_ROW_UPDATE + " to ignore");    applierFailOn0RowUpdates=FailurePolicy.IGNORE;  } else {    throw new ReplicatorException("Valid values for " + ReplicatorConf.APPLIER_FAIL_ON_0_ROW_UPDATE + " are either 'stop', 'warn' or 'ignore'. Found: "+ properties.getString(ReplicatorConf.APPLIER_FAIL_ON_0_ROW_UPDATE));  }  File roleFileLocation=ReplicatorRuntimeConf.locateReplicatorRoleFile(serviceName);  if (roleFileLocation != null) {    onlineRoleFile=new TungstenPropertiesIO(roleFileLocation);    if (onlineRoleFile.exists()) {      try {        TungstenProperties onlineRoleProps=onlineRoleFile.read();        lastOnlineRoleName=onlineRoleProps.get(ONLINE_ROLE_KEY);      } catch (      FileIOException e) {        throw new ReplicatorException("Unable to read online role file; try removing to get past this error: file=" + roleFileLocation.getAbsolutePath() + " message="+ e.getMessage(),e);      }    }  }  instantiateExtensions();  instantiateAndConfigurePipeline(roleName);}  }
class C{  void submit(final long ts,final byte[] fromKey,final byte[] toKey,final IKeyRangeIndexProcedure proc,final IResultHandler resultHandler){  final boolean parallel=proc instanceof IParallelizableIndexProcedure;  if (log.isInfoEnabled())   log.info("Procedure " + proc.getClass().getName() + " will be mapped across index partitions in "+ (parallel ? "parallel" : "sequence"));  final int poolSize=((ThreadPoolExecutor)getThreadPool()).getCorePoolSize();  final int maxTasksPerRequest=fed.getClient().getMaxParallelTasksPerRequest();  final int maxTasks=poolSize == 0 ? maxTasksPerRequest : Math.min(poolSize,maxTasksPerRequest);  assert maxTasks > 0 : "maxTasks=" + maxTasks + ", poolSize="+ poolSize+ ", maxTasksPerRequest="+ maxTasksPerRequest;  final Iterator<PartitionLocator> itr=locatorScan(ts,fromKey,toKey,false);  long nparts=0;  while (itr.hasNext()) {    final ArrayList<AbstractDataServiceProcedureTask> tasks=new ArrayList<AbstractDataServiceProcedureTask>(maxTasks);    for (int i=0; i < maxTasks && itr.hasNext(); i++) {      final PartitionLocator locator=itr.next();      final Split split=new Split(locator,0,0);      tasks.add(new KeyRangeDataServiceProcedureTask(this,fromKey,toKey,ts,split,proc,resultHandler));      nparts++;    }    runTasks(parallel,tasks);  }  if (log.isInfoEnabled())   log.info("Procedure " + proc.getClass().getName() + " mapped across "+ nparts+ " index partitions in "+ (parallel ? "parallel" : "sequence"));}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  public boolean isAdjacentHolidayAsLeave(){  Object oo=get_Value(COLUMNNAME_IsAdjacentHolidayAsLeave);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(String[] args){  int i=0;  int classifierToUse=WORDSHAPECHRIS1;  if (args.length == 0) {    System.out.println("edu.stanford.nlp.process.WordShapeClassifier [-wordShape name] string+");  } else   if (args[0].charAt(0) == '-') {    if (args[0].equals("-wordShape") && args.length >= 2) {      classifierToUse=lookupShaper(args[1]);      i+=2;    } else {      System.err.println("Unknown flag: " + args[0]);      i++;    }  }  for (; i < args.length; i++) {    System.out.print(args[i] + ": ");    System.out.println(wordShape(args[i],classifierToUse));  }}  }
class C{  protected DocletElementImpl(){  super();}  }
class C{  protected static boolean contains(String value,int start,int length,String[] criteria){  boolean result=false;  if (start >= 0 && start + length <= value.length()) {    String target=value.substring(start,start + length);    for (    String element : criteria) {      if (target.equals(element)) {        result=true;        break;      }    }  }  return result;}  }
class C{  public void pancakeSort(int[] A){  if (A == null || A.length <= 1)   return;  for (int i=A.length; i > 1; i--) {    int mi=findMax(A,i);    if (mi != i) {      flip(A,mi);      flip(A,i - 1);    }  }}  }
class C{  protected void paintCircle(Geo originGeo,double distance,Graphics graphics,MapBean theMap){  OMCircle circle=new OMCircle(originGeo.getLatitude(),originGeo.getLongitude(),Length.DECIMAL_DEGREE.fromRadians(distance));  prepareCircle(circle);  circle.generate(theMap.getRotatedProjection());  circle.render(graphics);}  }
class C{  public void update(long value,long timestamp){  rescaleIfNeeded();  lockForRegularUsage();  try {    final double priority=weight(timestamp - startTime) / random.nextDouble();    final long newCount=count.incrementAndGet();    if (newCount <= reservoirSize) {      values.put(priority,value);    } else {      Double first=values.firstKey();      if (first < priority) {        if (values.putIfAbsent(priority,value) == null) {          while (values.remove(first) == null) {            first=values.firstKey();          }        }      }    }  }  finally {    unlockForRegularUsage();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.865 -0500",hash_original_method="366F843C8FBE8BB09896187A9CDF1388",hash_generated_method="4859A824ABAA5B362F6D19FCD2E6553C") private String[] readArgumentList() throws IOException {  int argc;  try {    String s=mSocketReader.readLine();    if (s == null) {      return null;    }    argc=Integer.parseInt(s);  } catch (  NumberFormatException ex) {    Log.e(TAG,"invalid Zygote wire format: non-int at argc");    throw new IOException("invalid wire format");  }  if (argc > MAX_ZYGOTE_ARGC) {    throw new IOException("max arg count exceeded");  }  String[] result=new String[argc];  for (int i=0; i < argc; i++) {    result[i]=mSocketReader.readLine();    if (result[i] == null) {      throw new IOException("truncated request");    }  }  return result;}  }
class C{  public static File savePage(File directory,Page page) throws Exception {  File pageFile=getPageFile(directory);  Marshaller marshaller=pagesJaxbContext.createMarshaller();  marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  marshaller.marshal(page,pageFile);  pageCache.invalidate(pageFile);  return pageFile;}  }
class C{  public RatTermVec copy(){  RatTermVec tv=new RatTermVec();  tv.underlying_terms=(Vector)this.underlying_terms.clone();  tv.terms=(RatTerm[])tv.underlying_terms.toArray(new RatTerm[]{});  return tv;}  }
class C{  public void writeFieldBegin(TField field) throws TException {  if (field.type == TType.BOOL) {    booleanField_=field;  } else {    writeFieldBeginInternal(field,(byte)-1);  }}  }
class C{  public Group findGroup(String tenantName,String group) throws NoSuchTenantException, NoSuchIdpException, InvalidPrincipalException, IDMException, Exception {  return getService().findGroup(tenantName,group,this.getServiceContext());}  }
class C{  @Override public void insertAll(DBIDs ids){  if (ids.isEmpty() || (ids.size() == 1)) {    return;  }  if (canBulkLoad()) {    List<SpatialEntry> leafs=new ArrayList<>(ids.size());    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      leafs.add(createNewLeafEntry(iter));    }    bulkLoad(leafs);  } else {    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      insert(DBIDUtil.deref(iter));    }  }  doExtraIntegrityChecks();}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public void resolve(CompilationUnitScope upperScope){  resolve();  updateMaxFieldCount();}  }
class C{  @Override protected void doConfigure(LocalContainer container) throws Exception {  LibertyInstall install=new LibertyInstall((InstalledLocalContainer)container);  File serverDir=install.getServerDir(null);  if (!serverDir.exists()) {    Process p=install.runCommand("create");    int retVal=p.waitFor();    if (retVal != 0) {      throw new Exception("The server could not be created");    }    File configDefaults=new File(serverDir,"configDropins/defaults");    if (!configDefaults.mkdirs()) {      throw new Exception("There is no config dropins defaults dir to " + "write to " + configDefaults);    }    writeKeystore(configDefaults);    File configOverrides=new File(serverDir,"configDropins/overrides");    if (!configOverrides.mkdirs()) {      throw new Exception("There is no config dropins overrides dir to " + "write to " + configOverrides);    }    writeHttpEndpoint(container,configOverrides);    writeJVMOptions(container,install);    processUsers(container,configOverrides);    writeDatasources(configOverrides);    writeLibrary(container,configOverrides);    List<Deployable> apps=getDeployables();    LibertyInstalledLocalDeployer deployer=new LibertyInstalledLocalDeployer(container);    for (    Deployable dep : apps) {      deployer.deploy(dep);    }  }  getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",new File(serverDir,"dropins/cargocpc.war"));}  }
class C{  public static void writeReverseInt(IoBuffer out,int value){  out.put((byte)(0xFF & value));  out.put((byte)(0xFF & (value >> 8)));  out.put((byte)(0xFF & (value >> 16)));  out.put((byte)(0xFF & (value >> 24)));}  }
class C{  public Operable openUrl(String url,Activity activity){  return openUrl(Uri.parse(url),activity);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("DateInvoiced")) {      m_dateInvoiced_From=((Timestamp)para[i].getParameter());      m_dateInvoiced_To=((Timestamp)para[i].getParameter_To());    } else     if (name.equals("EMailPDF"))     p_EMailPDF="Y".equals(para[i].getParameter()); else     if (name.equals("R_MailText_ID"))     p_R_MailText_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     m_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("C_Invoice_ID"))     m_C_Invoice_ID=para[i].getParameterAsInt(); else     if (name.equals("DocumentNo")) {      m_DocumentNo_From=(String)para[i].getParameter();      m_DocumentNo_To=(String)para[i].getParameter_To();    } else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  if (m_DocumentNo_From != null && m_DocumentNo_From.length() == 0)   m_DocumentNo_From=null;  if (m_DocumentNo_To != null && m_DocumentNo_To.length() == 0)   m_DocumentNo_To=null;}  }
class C{  public javax2.sip.header.ExtensionHeader createExtensionHeader(String name,String value) throws ParseException {  if (name == null)   throw new NullPointerException("bad name");  gov2.nist.javax2.sip.header.ExtensionHeaderImpl ext=new gov2.nist.javax2.sip.header.ExtensionHeaderImpl();  ext.setName(name);  ext.setValue(value);  return ext;}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  updateText();}  }
class C{  public Map<String,Object> toMap(){  return schema.toMap(values);}  }
class C{  private IoSessionIterator(Set<SelectionKey> keys){  iterator=keys.iterator();}  }
class C{  protected boolean fitsBounds(float val,float min,float max){  if (val < min || val > max)   return false; else   return true;}  }
class C{  public void testDecoder2(){  boolean res;  int originalAppIdValue=mAppIdValue;  Random rd=new Random();  mAppIdValue=rd.nextInt(0xFFFF);  byte[] pdu=createPDU(2);  WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);  res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);  assertFalse(res);  mAppIdValue=originalAppIdValue;}  }
class C{  public void ensureCapacity(int capacity){  if (capacity > _data.length) {    int newCap=Math.max(_data.length << 1,capacity);    int[] tmp=new int[newCap];    System.arraycopy(_data,0,tmp,0,_data.length);    _data=tmp;  }}  }
class C{  public DocumentEvent(Document doc,int offset,int length,String text){  Assert.isNotNull(doc);  Assert.isTrue(offset >= 0);  Assert.isTrue(length >= 0);  fDocument=doc;  fOffset=offset;  fLength=length;  fText=text;  fModificationStamp=fDocument.getModificationStamp();}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  static void openTag(String name,boolean endTag){  openMinorTag(name);  if (endTag)   closeTag(false);}  }
class C{  void processInverseOperation(){  if (this.displayMode != DISPLAY_MODE.ERROR) {    try {      if (getDisplayedNumber() == 0) {        displayErrorMessage(ResourceManager.CALCULATOR_DIVIDE_BY_ZERO);        return;      }      final double result=1 / getDisplayedNumber();      displayResult(result);    } catch (    final Exception ex) {      displayErrorMessage(ResourceManager.CALCULATOR_DIVIDE_BY_ZERO);      this.displayMode=DISPLAY_MODE.ERROR;    }  }}  }
class C{  static private void updateStaticPortUsage(List<StoragePort> candidatePorts){  _log.debug(String.format("updateStaticPortUsage: %s",candidatePorts.toString()));  StorageSystem system=null;  Map<StoragePort,Long> portCache=new HashMap<StoragePort,Long>();  if (!candidatePorts.isEmpty()) {    system=_dbClient.queryObject(StorageSystem.class,candidatePorts.get(0).getStorageDevice());  }  for (  StoragePort sp : candidatePorts) {    Long initiatorCount=0L;    Long volumeCount=0L;    URIQueryResultList queryResult=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportMasksByPort(sp.getId().toString()),queryResult);    Iterator<URI> maskIt=queryResult.iterator();    while (maskIt.hasNext()) {      URI maskURI=maskIt.next();      ExportMask mask=_dbClient.queryObject(ExportMask.class,maskURI);      if (mask == null || mask.getInactive()) {        continue;      }      initiatorCount+=computeInitiatorCountInMask(mask,sp.getId().toString());      if (false == system.getSystemType().equals(DiscoveredDataObject.Type.vmax.name()) || system.checkIfVmax3() == true) {        if (mask.getUserAddedVolumes() != null) {          volumeCount+=mask.getUserAddedVolumes().size();        }        if (mask.getExistingVolumes() != null) {          volumeCount+=mask.getExistingVolumes().size();        }      }    }    initiatorCount+=MetricsKeys.getLong(MetricsKeys.unmanagedInitiatorCount,sp.getMetrics());    if (system.getSystemType().equals(DiscoveredDataObject.Type.vmax.name()) && !system.checkIfVmax3()) {      volumeCount+=getVmax2VolumeCount(sp,system,portCache);    } else {      volumeCount+=MetricsKeys.getLong(MetricsKeys.unmanagedVolumeCount,sp.getMetrics());    }    MetricsKeys.putLong(MetricsKeys.initiatorCount,initiatorCount,sp.getMetrics());    MetricsKeys.putLong(MetricsKeys.volumeCount,volumeCount,sp.getMetrics());    _dbClient.persistObject(sp);    _log.debug(String.format("Port %s %s updated initiatorCount %d volumeCount %d",sp.getNativeGuid(),portName(sp),initiatorCount,volumeCount));  }}  }
class C{  public String htmlRuleString(XMLDocumentationHandler handler){  String html="<div class=\"requiredcompoundrule\">All of:";  for (  XMLSyntaxRule rule : rules) {    html+=rule.htmlRuleString(handler);  }  html+="</div>";  return html;}  }
class C{  @CanIgnoreReturnValue K checkKey(@Nullable K key){  return key;}  }
class C{  public static boolean testLineSegmentSphere(float p0X,float p0Y,float p0Z,float p1X,float p1Y,float p1Z,float centerX,float centerY,float centerZ,float radiusSquared){  float dX=p1X - p0X;  float dY=p1Y - p0Y;  float dZ=p1Z - p0Z;  float nom=(centerX - p0X) * dX + (centerY - p0Y) * dY + (centerZ - p0Z) * dZ;  float den=dX * dX + dY * dY + dZ * dZ;  float u=nom / den;  if (u < 0.0f) {    dX=p0X - centerX;    dY=p0Y - centerY;    dZ=p0Z - centerZ;  } else   if (u > 1.0f) {    dX=p1X - centerX;    dY=p1Y - centerY;    dZ=p1Z - centerZ;  } else {    float pX=p0X + u * dX;    float pY=p0Y + u * dY;    float pZ=p0Z + u * dZ;    dX=pX - centerX;    dY=pY - centerY;    dZ=pZ - centerZ;  }  float dist=dX * dX + dY * dY + dZ * dZ;  return dist <= radiusSquared;}  }
class C{  public PLCommandInterpreter(){  super();}  }
class C{  protected void update(MyHeap upper_bound,double new_bound) throws Exception {  upper_bound.putBySubstitute(new_bound);}  }
class C{  public void write(ClassFile classFile,File f) throws IOException {  FileOutputStream f_out=new FileOutputStream(f);  try {    write(classFile,f_out);  }  finally {    f_out.close();  }}  }
class C{  @Override public void fromBytes(ByteBuf buf){  pos=BlockPos.fromLong(buf.readLong());  hasFacing=buf.readBoolean();  if (hasFacing) {    facing=EnumFacing.getFront(buf.readUnsignedByte());  }}  }
class C{  public Object delete(String re){  Object o=null;  RegexpNode p=prefixMachine;  RegexpNode best=p;  int len=re.length() - 1;  int i;  boolean prefix=true;  if (!re.startsWith("*") || !re.endsWith("*"))   len++;  if (len <= 0)   return null;  for (i=0; p != null; i++) {    if (p.result != null && p.depth < BIG && (!p.exact || i == len)) {      best=p;    }    if (i >= len)     break;    p=p.find(re.charAt(i));  }  p=suffixMachine;  for (i=len; --i >= 0 && p != null; ) {    if (p.result != null && p.depth < BIG) {      prefix=false;      best=p;    }    p=p.find(re.charAt(i));  }  if (prefix) {    if (re.equals(best.re)) {      o=best.result;      best.result=null;    }  } else {    if (re.equals(best.re)) {      o=best.result;      best.result=null;    }  }  return o;}  }
class C{  @Override public boolean supportsSchemasInDataManipulation(){  debugCodeCall("supportsSchemasInDataManipulation");  return true;}  }
class C{  public MLet(URL[] urls){  this(urls,true);}  }
class C{  public void testSemver(){  ascending("0.1.2","0.1.11","0.1.11-2","1.0.0-alpha","1.0.0-alpha.1","1.0.0-beta","1.0.0-beta.2","1.0.0-beta.11","1.0.0-rc.1","1.0.0");}  }
class C{  public Resources interpret(final Set<ClassResult> classResults){  resources=new Resources();  resources.setBasePath(PathNormalizer.getApplicationPath(classResults));  javaTypeAnalyzer=new JavaTypeAnalyzer(resources.getTypeRepresentations());  dynamicTypeAnalyzer=new DynamicTypeAnalyzer(resources.getTypeRepresentations());  stringParameterResolver=new StringParameterResolver(resources.getTypeRepresentations(),javaTypeAnalyzer);  classResults.stream().filter(null).forEach(null);  return resources;}  }
class C{  public GetMovieDetails(int movieId,String... properties){  super();  addParameterToRequest("movieid",movieId);  addParameterToRequest("properties",properties);}  }
class C{  public long insert(ContentValues values){  return insertInternal(values,false);}  }
class C{  public Map<Installment,Map<String,BigDecimal>> prepareRsnWiseDemandForOldProp(final Property property){  LOGGER.debug("Entered into prepareRsnWiseDemandForOldProp, property: " + property);  Installment inst=null;  final Map<Installment,Map<String,BigDecimal>> instWiseDmd=new HashMap<Installment,Map<String,BigDecimal>>();  for (  final Ptdemand ptdemand : property.getPtDemandSet())   if (ptdemand.getIsHistory().equals("N")) {    inst=ptdemand.getEgInstallmentMaster();    final Map<String,BigDecimal> rsnWiseDmd=new HashMap<String,BigDecimal>();    for (    final EgDemandDetails dmdDet : ptdemand.getEgDemandDetails())     if (inst.equals(dmdDet.getEgDemandReason().getEgInstallmentMaster()))     if (!dmdDet.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(DEMANDRSN_CODE_PENALTY_FINES) && !dmdDet.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY))     rsnWiseDmd.put(dmdDet.getEgDemandReason().getEgDemandReasonMaster().getCode(),dmdDet.getAmount());    instWiseDmd.put(inst,rsnWiseDmd);  }  LOGGER.debug("Exiting from prepareRsnWiseDemandForOldProp");  return instWiseDmd;}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line){  this(reader,separator,quotechar,escape,line,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  @Override public void playShowAnimation(){  showAnimation.play();}  }
class C{  public ClusterOrder run(){  for (DBIDIter iditer=ids.iter(); iditer.valid(); iditer.advance()) {    if (!processedIDs.contains(iditer)) {      assert (heap.isEmpty());      expandClusterOrder(iditer);    }  }  LOG.ensureCompleted(progress);  return clusterOrder;}  }
class C{  public boolean isLenient(){  return lenient;}  }
class C{  protected void addHistory(String s){  if (s.equals("")) {    return;  }  if (m_History.contains(s)) {    m_History.removeElement(s);  }  m_History.add(0,s);  notifyHistoryChangedListeners();}  }
class C{  public static Grid newGridLayout(){  Grid grid=new Grid();  grid.makeNoStrip();  return grid;}  }
class C{  @Override protected void onDeleteComplete(int token,Object cookie,int result){  if (token == mDeleteToken) {synchronized (sDeletingThreadsLock) {      sDeletingThreads=false;      if (DELETEDEBUG) {        Log.v(TAG,"Conversation onDeleteComplete sDeletingThreads: " + sDeletingThreads);      }      sDeletingThreadsLock.notifyAll();    }    UnreadBadgeService.update(mContext);    NotificationManager.create(mContext);  }}  }
class C{  private static void assertRegisterPresent(final HLL hll,final int registerIndex,final int registerValue){  final IntByteHashMap sparseProbabilisticStorage=hll.sparseProbabilisticStorage;  assertEquals(sparseProbabilisticStorage.get(registerIndex),registerValue);}  }
class C{  public static Map<String,Integer> createIdxFromKey(String line,String fieldSeparator){  String[] keys=line.split(fieldSeparator);  Map<String,Integer> idxFromKey=new HashMap<String,Integer>();  for (int ii=0; ii < keys.length; ii++) {    idxFromKey.put(keys[ii],ii);  }  return idxFromKey;}  }
class C{  private OpenSSLMessageDigestJDK(String algorithm,long evp_md,int size) throws NoSuchAlgorithmException {  super(algorithm);  this.evp_md=evp_md;  this.size=size;}  }
class C{  public <T extends DataObject>T findById(URI id){  if (id == null) {    throw new DataAccessException("ID provided was null");  }  Class<T> modelClass=getModelClass(id);  if (modelClass != null) {    return of(modelClass).findById(id);  } else {    return null;  }}  }
class C{  public MUserMail(MMailText parent,int AD_User_ID,EMail mail){  this(parent.getCtx(),0,parent.get_TrxName());  setClientOrg(parent);  setAD_User_ID(AD_User_ID);  setR_MailText_ID(parent.getR_MailText_ID());  if (mail.isSentOK())   setMessageID(mail.getMessageID()); else {    setMessageID(mail.getSentMsg());    setIsDelivered(ISDELIVERED_No);  }}  }
class C{  public void dispose(){  if (frameProvider != null) {    ((CRFPClient)frameProvider).dispose();  }}  }
class C{  public Handle(int tag,String owner,String name,String desc){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;}  }
class C{  @Deprecated public static TypesafeConfigModule fromConfig(Config config){  return fromConfigWithPackage(config,"");}  }
class C{  public boolean adjustValue(int key,float amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public T caseDictionaryPropertyType(DictionaryPropertyType object){  return null;}  }
class C{  private void concatBlocks(OutputFileMetadata outputFileMetadata) throws IOException {  Path outputFilePath=new Path(filePath,outputFileMetadata.getRelativePath());  int numBlocks=outputFileMetadata.getNumberOfBlocks();  long[] blocksArray=outputFileMetadata.getBlockIds();  Path firstBlock=new Path(blocksDirectoryPath,Long.toString(blocksArray[0]));  if (numBlocks > 1) {    Path[] blockFiles=new Path[numBlocks - 1];    for (int index=1; index < numBlocks; index++) {      blockFiles[index - 1]=new Path(blocksDirectoryPath,Long.toString(blocksArray[index]));    }    outputFS.concat(firstBlock,blockFiles);  }  moveToFinalFile(firstBlock,outputFilePath);}  }
class C{  public final void shuffle(int[] array){  int l=array.length;  for (int i=0; i < l; i++) {    int index=nextInt(l - i) + i;    int temp=array[index];    array[index]=array[i];    array[i]=temp;  }}  }
class C{  public void testLRUMap(){  LRUMap<String,String> map=new LRUMap<String,String>(5);  map.put("one","one");  map.put("two","two");  map.put("three","three");  String[] control={"three","two","one"};  int count=3;  display(control.clone(),map);  for (  String s : map.keySet()) {    assertEquals(control[--count],s);  }  map.put("four","four");  map.put("five","five");  map.put("three","three");  map.put("six","six");  control=new String[]{"six","three","five","four","two"};  count=5;  display(control.clone(),map);  for (  String s : map.keySet()) {    assertEquals(control[--count],s);  }}  }
class C{  public void testComputeLocationWhenEjbPackaging() throws Exception {  Deployable deployableElement=new Deployable();  deployableElement.setGroupId("projectGroupId");  deployableElement.setArtifactId("projectArtifactId");  deployableElement.setType("ejb");  String location=deployableElement.computeLocation(createDefaultProject("ejb",null));  assertTrue(location.endsWith("projectFinalName.jar"));}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {case JavaParserConstants.RUNSIGNEDSHIFT:case JavaParserConstants.RSIGNEDSHIFT:case JavaParserConstants.GT:    return new GTToken();default :  return new Token();}}  }
class C{  public WorkerThread(Object kmlSource,AppFrame appFrame){  this.kmlSource=kmlSource;  this.appFrame=appFrame;}  }
class C{  public static void touch(IPath path) throws IOException {  Preconditions.checkArgument(path.isAbsolute());  makeDir(path.removeLastSegments(1));  Path file=FileSystems.getDefault().getPath(path.toOSString());  Files.createFile(file);}  }
class C{  @Override public boolean validateDrop(Object target,int operation,TransferData transferType){  if (!(target instanceof GefaehrdungsUmsetzung)) {    return false;  }  return true;}  }
class C{  private static String tableElementToHtml(TableElement td){  StringBuilder result=new StringBuilder();  result.append("Row: " + td.getRow() + " Col: "+ td.getCol()+ "\n");  if (td.nrOfSections() == 1 && td.getSection(0).getTitleElement() == null) {    result.append(sectionCCLToHtml(td.getSection(0)));  } else {    for (int i=0; i < td.nrOfSections(); i++) {      result.append(sectionToHtml(td.getSection(i)));    }  }  return result.toString();}  }
class C{  private boolean inPolyline(ArrayList<Double> ob,double x,double y){  int countx=0;  double vecx, vecy;  double change;  double x1, y1, x2, y2;  for (int noa=1; noa < ob.size() - 4; noa+=2) {    y1=ob.get(noa + 1).doubleValue();    y2=ob.get(noa + 3).doubleValue();    x1=ob.get(noa).doubleValue();    x2=ob.get(noa + 2).doubleValue();    vecy=y2 - y1;    vecx=x2 - x1;    if (noa == 1 && noa == ob.size() - 6) {      if (vecy != 0) {        change=(y - y1) / vecy;        if (vecx * change + x1 >= x) {          countx++;        }      }    } else     if (noa == 1) {      if ((y < y2 && vecy > 0) || (y > y2 && vecy < 0)) {        change=(y - y1) / vecy;        if (vecx * change + x1 >= x) {          countx++;        }      }    } else     if (noa == ob.size() - 6) {      if ((y <= y1 && vecy < 0) || (y >= y1 && vecy > 0)) {        change=(y - y1) / vecy;        if (vecx * change + x1 >= x) {          countx++;        }      }    } else     if ((y1 <= y && y < y2) || (y2 < y && y <= y1)) {      if (vecy == 0) {      } else {        change=(y - y1) / vecy;        if (vecx * change + x1 >= x) {          countx++;        }      }    }  }  y1=ob.get(ob.size() - 2).doubleValue();  y2=ob.get(ob.size() - 1).doubleValue();  if (y1 > y2) {    if (y1 >= y && y > y2) {      countx++;    }  } else {    if (y1 >= y || y > y2) {      countx++;    }  }  if ((countx % 2) == 1) {    return true;  } else {    return false;  }}  }
class C{  public UserProjectExample(UserProjectObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getUserId() != null) {    criteria.andUserIdEqualTo(sample.getUserId());  }  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getCustomOrder() != null) {    criteria.andCustomOrderEqualTo(sample.getCustomOrder());  }}  }
class C{  public static int geometric(double p){  if (!(p >= 0.0 && p <= 1.0))   throw new IllegalArgumentException("Probability must be between 0.0 and 1.0");  return (int)Math.ceil(Math.log(uniform()) / Math.log(1.0 - p));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.createNewDataFile();    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setDisplayMaximum(1);    output.setDisplayMinimum(0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void addTextIndicator(final String text,final NotificationType type){  textIndicators.add(new TextIndicator(text,type));  fireChange(PROP_TEXT_INDICATORS);}  }
class C{  public boolean waitForAcquireQuietly(){  boolean success=false;  try {    success=Await.result(acquireFuture);  } catch (  InterruptedException ie) {    Thread.currentThread().interrupt();  }catch (  LockTimeoutException lte) {    logger.debug("Timeout on lock acquiring",lte);  }catch (  Exception e) {    logger.error("Caught exception waiting for lock acquired",e);  }  return success;}  }
class C{  public SAML2AuthnRequestException(String message,ReasonEnum reason){  super(message);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public static void errorLogOnly(final ErrorType type,final String... params){  if (type != null && type.getNumberOfParameters() == params.length) {    final ErrorEvent event=new ErrorEvent(type,params);    userLog(event.getMessage());  }}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();}  }
class C{  @Override public boolean ownDeletesAreVisible(int type){  debugCodeCall("ownDeletesAreVisible",type);  return false;}  }
class C{  public void testTxLocalPessimisticReadCommitted() throws Exception {  checkTx(LOCAL,PESSIMISTIC,READ_COMMITTED);}  }
class C{  public void addChild(AccessibilityNodeInfo child){  if (mChildren == null) {    mChildren=new LinkedList<>();  }  mChildren.add(child);  ((ShadowAccessibilityNodeInfo)ShadowExtractor.extract(child)).mParent=mRealAccessibilityNodeInfo;}  }
class C{  private void processAnsiCommand_H(){}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ParameterizedAccess.class) {switch (baseFeatureID) {case N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS:      return N4JSPackage.PARAMETERIZED_CALL_EXPRESSION__TYPE_ARGS;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public void addSrcClass(SootClass clz){  srcClasses.add(clz.getName());}  }
class C{  public void testUnsizedIntsCountSeq(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.ints().limit(size).forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  protected static String quoteTimestamp(java.sql.Timestamp x){  if (x == null) {    return "null";  }  return "Timestamp.valueOf(\"" + x.toString() + "\")";}  }
class C{  public void append(String str){  if (str == null)   return;  int restLength=buffer.length - pos;  if (str.length() < restLength) {    str.getChars(0,str.length(),buffer,pos);    pos+=str.length();  } else {    str.getChars(0,restLength,buffer,pos);    curr.next=new Entity(buffer);    curr=curr.next;    length+=buffer.length;    buffer=new char[(buffer.length > str.length() - restLength) ? buffer.length : str.length() - restLength];    str.getChars(restLength,str.length(),buffer,0);    pos=str.length() - restLength;  }}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int d, x2, y2;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentValue=0;    double currentOrder=0;    double maxStreamOrder=noData;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentOrder=1;            output.setValue(y,x,currentOrder);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > currentOrder) {                    flag=false;                    break;                  }                  if (currentValue == currentOrder) {                    numNeighbouringStreamCells=0;                    for (d=0; d < 8; d++) {                      x2=x + dX[d];                      y2=y + dY[d];                      if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d] && output.getValue(y2,x2) == currentOrder) {                        numNeighbouringStreamCells++;                      }                    }                    if (numNeighbouringStreamCells >= 2) {                      currentOrder++;                      if (currentOrder > maxStreamOrder) {                        maxStreamOrder=currentOrder;                      }                    } else {                      flag=false;                      break;                    }                  }                  if (currentValue < currentOrder) {                    output.setValue(y,x,currentOrder);                  }                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,output.getValue(y,x) + 1);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    double streamsID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  synchronized private void startWorker(final Writer out){  if (f != null && !f.isDone())   return;  Runnable r=new AsyncWriterRunnable(out);  f=e.submit(r,out);}  }
class C{  public static void main(String[] args){  DNACompiler dnaCompiler=new DNACompiler();  dnaCompiler.run(args);}  }
class C{  public void testDeployFile(){  this.fileHandler.createFile("ram:///test.extension");  File file=(File)factory.createDeployable("jonas5x","ram:///test.extension",DeployableType.FILE);  deployer.deploy(file);  assertTrue(fileHandler.exists(deployer.getDeployableDir(file) + "/test.extension"));}  }
class C{  public static void sort(byte[] array){  sort(0,array.length,array);}  }
class C{  public UGraphic[] fillRectangle(com.bbn.openmap.corba.CSpecialist.CProjection p,com.bbn.openmap.corba.CSpecialist.LLPoint ll1,com.bbn.openmap.corba.CSpecialist.LLPoint ll2,java.lang.String staticArgs,org.omg.CORBA.StringHolder dynamicArgs,com.bbn.openmap.corba.CSpecialist.GraphicChange notifyOnChange,String uniqueID){  try {    Vector list=computeGraphics(ll1,ll2);    int len=list.size();    UGraphic[] ugraphics=new UGraphic[len];    for (int i=0; i < len; i++) {      SGraphic sg=(SGraphic)list.elementAt(i);      ugraphics[i]=sg.ufill();    }    return ugraphics;  } catch (  Throwable t) {    System.err.println("ShapeSpecialist.fillRectangle(): " + t);    t.printStackTrace();    return new UGraphic[0];  }}  }
class C{  public static <T>LazyPStackX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  public boolean containsId(T t){  return t2imap.containsKey(t);}  }
class C{  public static Bitmap makeRoundUserPicture(Bitmap bitmap){  if (bitmap == null)   return null;  Bitmap output=Bitmap.createBitmap(bitmap.getWidth(),bitmap.getHeight(),Config.ARGB_8888);  Canvas canvas=new Canvas(output);  final Paint paint=new Paint();  final Rect rect=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());  canvas.drawARGB(0,0,0,0);  paint.setAntiAlias(true);  paint.setColor(0xFFFFFFFF);  canvas.drawCircle(bitmap.getWidth() * 0.5f,bitmap.getHeight() * 0.5f,bitmap.getWidth() * 0.5f,paint);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));  canvas.drawBitmap(bitmap,rect,rect,paint);  return output;}  }
class C{  public byte[] evaluateChallenge(byte[] challengeData) throws SaslException {  if (completed) {    throw new IllegalStateException("GSSAPI authentication already complete");  }  if (finalHandshake) {    return doFinalHandshake(challengeData);  } else {    try {      byte[] gssOutToken=secCtx.initSecContext(challengeData,0,challengeData.length);      if (logger.isLoggable(Level.FINER)) {        traceOutput(MY_CLASS_NAME,"evaluteChallenge","KRB5CLNT02:Challenge: [raw]",challengeData);        traceOutput(MY_CLASS_NAME,"evaluateChallenge","KRB5CLNT03:Response: [after initSecCtx]",gssOutToken);      }      if (secCtx.isEstablished()) {        finalHandshake=true;        if (gssOutToken == null) {          return EMPTY;        }      }      return gssOutToken;    } catch (    GSSException e) {      throw new SaslException("GSS initiate failed",e);    }  }}  }
class C{  private boolean shouldStartMapActivity(){  return bus.getStickyEvent(DbInitializedEvent.class) != null && bus.getStickyEvent(SplashScreenTimerFinishedEvent.class) != null && bus.getStickyEvent(ArpiBitmapsPrecomputedEvent.class) != null && bus.getStickyEvent(LoginInitializedEvent.class) != null;}  }
class C{  public void receiveImageData(byte[] imageBytes){  writeDataFile(outputFileName,imageBytes);  complete=true;  iMaster.doNext();}  }
class C{  public void runActions(Context context,boolean onlyIfScreenIsOn){  assert mServiceRunnable != null;  assert mPowerManagerHelper != null;  if (!onlyIfScreenIsOn || mPowerManagerHelper.isScreenOn(context)) {    if (mNeedToRunActions.getAndSet(false)) {      unregisterReceiver(context);      mHandler.postDelayed(mServiceRunnable,mServiceRunnable.delayToRun());    }  }}  }
class C{  public int count(){  return count;}  }
class C{  protected void createSideGeometry(ShapeData shapeData){  int vertexCoordCount=this.totalFaceCount * 4 * 3;  if (shapeData.sideVertexBuffer != null && shapeData.sideVertexBuffer.capacity() >= vertexCoordCount)   shapeData.sideVertexBuffer.clear(); else   shapeData.sideVertexBuffer=Buffers.newDirectFloatBuffer(vertexCoordCount);  for (  ExtrudedBoundaryInfo boundary : shapeData) {    boundary.sideVertexBuffer=this.fillSideVertexBuffer(boundary.capVertices,boundary.baseVertices,shapeData.sideVertexBuffer.slice());    shapeData.sideVertexBuffer.position(shapeData.sideVertexBuffer.position() + boundary.sideVertexBuffer.limit());  }}  }
class C{  public AutoImports(DependencyManager mgr){  this.mgr=requireNonNull(mgr);}  }
class C{  public RosterExchange(){  super();}  }
class C{  @Override public boolean hasPermission(Authentication authentication,Serializable targetId,String targetType,Object permission){  throw new UnsupportedOperationException("hasPermission() by ID is not supported");}  }
class C{  protected final String stopInfo(){  return "SPI stopped ok.";}  }
class C{  public void zoom(){  if (getSelectedRowKey() != null && getSelectedRowKey() > 0) {    MQuery zoomQuery=new MQuery();    String column=getKeyColumn();    if (column.indexOf(".") > 0)     column=column.substring(column.indexOf(".") + 1);    zoomQuery.addRestriction(column,MQuery.EQUAL,getSelectedRowKey());    zoomQuery.setRecordCount(1);    zoomQuery.setTableName(column.substring(0,column.length() - 3));    AEnv.zoom(236,zoomQuery);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);}  }
class C{  public SVGPath relativeMoveTo(double x,double y){  if (x > Double.NEGATIVE_INFINITY && x < Double.POSITIVE_INFINITY && y > Double.NEGATIVE_INFINITY && y < Double.POSITIVE_INFINITY) {    append(PATH_MOVE_RELATIVE,x,y);  }  return this;}  }
class C{  @Override protected TypeSet specialCasesIntersectedWith(TypeSet s2){  if (s2 instanceof EnumeratedTypeSet) {    EnumeratedTypeSet result=new EnumeratedTypeSet(getTypeSetEnvironment());    result.addAll(this);    result.retainAll(s2);    if (result.size() > 0)     return result; else     return getTypeSetEnvironment().getEmptyTypeSet();  }  return null;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.600 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public final boolean canGetBoolean(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetBoolean());}  }
class C{  private static int findNalStartCode(byte[] data,int index){  int endIndex=data.length - NAL_START_CODE.length;  for (int i=index; i <= endIndex; i++) {    if (isNalStartCode(data,i)) {      return i;    }  }  return -1;}  }
class C{  private void notExists(String configuration,DataSourceFixture dataSourceFixture) throws Exception {  XMLAssert.assertXpathNotExists("//resource-ref[res-ref-name='" + dataSourceFixture.jndiLocation + "']",configuration);}  }
class C{  public Long deleteUserIDSelf(String SID){  Long users_id=sessionManagement.checkSession(SID);  long user_level=userManagement.getUserLevelByID(users_id);  if (user_level >= 1) {    userManagement.logout(SID,users_id);    return usersDao.deleteUserID(users_id);  } else {    return new Long(-10);  }}  }
class C{  void deliver(Message message){  message.setThread(threadID);  for (  MessageListener listener : listeners) {    listener.processMessage(this,message);  }}  }
class C{  public final synchronized String readLine(int timeoutMillis){  if (closed)   return null;  try {    if (lines.isEmpty()) {      if (timeoutMillis > 0)       wait(timeoutMillis); else       wait();    }    if (lines.isEmpty())     return closed ? null : "";    String ret=lines.get(0);    lines.remove(0);    return ret;  } catch (  InterruptedException e) {    return null;  }}  }
class C{  @Override public int applyIntersections(){  intersections=detector.intersections(items);  return intersections.size();}  }
class C{  public static boolean isPossiblePhoneNumberCanDoFileAccess(String query){  String currentCountry=QKSMSApp.getApplication().getCurrentCountryIso().toUpperCase();  if (mPhoneNumberUtil == null) {    mPhoneNumberUtil=PhoneNumberUtil.getInstance();  }  return mPhoneNumberUtil.isPossibleNumber(query,currentCountry);}  }
class C{  public static void main(String argv[]){  Debug.init();  Debug.put("Lambert");  LambertConformal proj=null;  proj=new LambertConformal(new LatLonPoint.Double(50.679572292f,5.807370150f),100000.0f,620,480,4.3569395237f,-49.833333109f,-51.166666321f,90.0f,150000.01f,5400088.44f,Ellipsoid.WGS_84);  Debug.message("Lambert","(1)" + proj.inverse(310,240));  LatLonPoint llp=new LatLonPoint.Double(0.0f,0.0f);  Debug.message("Lambert","(2)" + proj.worldToLL(251763.20f,153034.13f,llp));  LatLonPoint pt=new LatLonPoint.Double(50.679572292f,5.807370150f);  Point2D lp=proj.LLToWorld(pt.getY(),pt.getX(),new Point2D.Double());  Debug.message("Lambert","(3)" + lp);}  }
class C{  public ListRowPresenter(int focusZoomFactor){  this(focusZoomFactor,false);}  }
class C{  @Override public boolean isOutboundDone(){  return isOutboundDone;}  }
class C{  public static String exists(EventType type,String fieldName){  Class clazz=getClass(type,fieldName);  if (clazz == null) {    return "Parent view does not contain a field named '" + fieldName + '\'';  }  return null;}  }
class C{  void addChangesRecursively(Server server,List<MaterialRevision> outChanges) throws MalformedURLException, IOException {  if (!changed) {    return;  }  if (!isPipeline()) {    if (!outChanges.contains(this))     outChanges.add(this);  } else {    for (    Modification m : modifications) {      Matcher matcher=PIPELINE_REVISION_PATTERN.matcher(m.revision);      if (matcher.matches()) {        String pipelineName=matcher.group(1);        int pipelineCounter=Integer.parseInt(matcher.group(2));        Pipeline pipeline=server.getPipelineInstance(pipelineName,pipelineCounter);        pipeline.addChangesRecursively(server,outChanges);      } else {        LOG.error("Error matching pipeline revision: " + m.revision);      }    }  }}  }
class C{  public DebugGraphics(Graphics graphics){  this();  this.graphics=graphics;}  }
class C{  public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearDocid(){  fieldSetFlags()[0]=false;  return this;}  }
class C{  @Override public int compare(Map.Entry<String,HierarchicalAggregateEntity> e1,Map.Entry<String,HierarchicalAggregateEntity> e2){  int r=0;  String key1=e1.getKey();  List<Double> valueList1=e1.getValue().getValues();  String key2=e2.getKey();  List<Double> valueList2=e2.getValue().getValues();  for (  SortOption so : sortOptions) {    int index=so.getIndex();    if (index == -1) {      continue;    }    if (!so.isInGroupby()) {      Double value1=valueList1.get(index);      Double value2=valueList2.get(index);      r=value1.compareTo(value2);    }    if (r == 0)     continue;    if (!so.isAscendant()) {      r=-r;    }    return r;  }  if (r == 0) {    return key1.compareTo(key2);  }  return r;}  }
class C{  public static void logConsumerRunning(final Logger logger){  logger.logMessage(Level.INFO,"Consumer is up and running");}  }
class C{  @Override public float floatValue(){  return (float)value;}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  public static ExecutorServiceCloser of(ExecutorService executorService){  return new ExecutorServiceCloser(executorService,Optional.empty());}  }
class C{  private void restoreSmsInformation(){  if (sSmsID == null) {    sSmsID=mKeyValueHelper.getIntegerValue(KeyValueHelper.KEY_SMS_ID);    if (sSmsID == null) {      mKeyValueHelper.addKey(KeyValueHelper.KEY_SMS_ID,"0");      mKeyValueHelper.addKey(KeyValueHelper.KEY_SINTENT,"0");      mKeyValueHelper.addKey(KeyValueHelper.KEY_DINTENT,"0");      sSmsID=0;    }    mSmsMap=Collections.synchronizedMap(new HashMap<Integer,Sms>());    mSmsHelper.deleteOldSMS();    Sms[] toAdd=mSmsHelper.getFullDatabase();    for (    Sms s : toAdd) {      mSmsMap.put(s.getID(),s);    }  }}  }
class C{  public static byte[] analogControl(int address,boolean longAddr,int function,int value){  if (!addressCheck(address,longAddr)) {    return null;  }  byte[] retVal;  int arg1=0x3D;  if (longAddr) {    retVal=new byte[6];    retVal[0]=(byte)(192 + ((address / 256) & 0x3F));    retVal[1]=(byte)(address & 0xFF);    retVal[2]=(byte)arg1;    retVal[3]=(byte)(function & 0xFF);    retVal[4]=(byte)(value & 0xFF);    retVal[5]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]^ retVal[4]);  } else {    retVal=new byte[5];    retVal[0]=(byte)(address & 0xFF);    retVal[1]=(byte)arg1;    retVal[2]=(byte)(function & 0xFF);    retVal[3]=(byte)(value & 0xFF);    retVal[4]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]);  }  return retVal;}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  int compile(String sourceFilename,String outputFilename,ClassProperties properties) throws IOException, InterruptedException {  LinkedList<String> command=new LinkedList<String>();  includeJavaPaths(properties,header);  String platform=Loader.getPlatform();  String compilerPath=properties.getProperty("platform.compiler");  command.add(compilerPath);{    String p=properties.getProperty("platform.sysroot.prefix","");    for (    String s : properties.get("platform.sysroot")) {      if (new File(s).isDirectory()) {        if (p.endsWith(" ")) {          command.add(p.trim());          command.add(s);        } else {          command.add(p + s);        }      }    }  }{    String p=properties.getProperty("platform.includepath.prefix","");    for (    String s : properties.get("platform.includepath")) {      if (new File(s).isDirectory()) {        if (p.endsWith(" ")) {          command.add(p.trim());          command.add(s);        } else {          command.add(p + s);        }      }    }  }  command.add(sourceFilename);  Collection<String> allOptions=properties.get("platform.compiler.*");  if (allOptions.isEmpty()) {    allOptions.add("default");  }  for (  String s : allOptions) {    if (s == null || s.length() == 0) {      continue;    }    String p="platform.compiler." + s;    String options=properties.getProperty(p);    if (options != null && options.length() > 0) {      command.addAll(Arrays.asList(options.split(" ")));    } else     if (!"default".equals(s)) {      logger.warn("Could not get the property named \"" + p + "\"");    }  }  command.addAll(compilerOptions);  String output=properties.getProperty("platform.compiler.output");  if (output != null && output.length() > 0) {    command.addAll(Arrays.asList(output.split(" ")));  }  if (output == null || output.length() == 0 || output.endsWith(" ")) {    command.add(outputFilename);  } else {    command.add(command.removeLast() + outputFilename);  }{    String p=properties.getProperty("platform.linkpath.prefix","");    String p2=properties.getProperty("platform.linkpath.prefix2");    for (    String s : properties.get("platform.linkpath")) {      if (new File(s).isDirectory()) {        if (p.endsWith(" ")) {          command.add(p.trim());          command.add(s);        } else {          command.add(p + s);        }        if (p2 != null) {          if (p2.endsWith(" ")) {            command.add(p2.trim());            command.add(s);          } else {            command.add(p2 + s);          }        }      }    }  }{    String p=properties.getProperty("platform.link.prefix","");    String x=properties.getProperty("platform.link.suffix","");    int i=command.size();    for (    String s : properties.get("platform.link")) {      String[] libnameversion=s.split("@");      if (libnameversion.length == 3 && libnameversion[1].length() == 0) {        s=libnameversion[0] + libnameversion[2];      } else {        s=libnameversion[0];      }      if (p.endsWith(" ") && x.startsWith(" ")) {        command.add(i,p.trim());        command.add(i + 1,s);        command.add(i + 2,x.trim());      } else       if (p.endsWith(" ")) {        command.add(i,p.trim());        command.add(i + 1,s + x);      } else       if (x.startsWith(" ")) {        command.add(i,p + s);        command.add(i + 1,x.trim());      } else {        command.add(i,p + s + x);      }    }  }{    String p=properties.getProperty("platform.framework.prefix","");    String x=properties.getProperty("platform.framework.suffix","");    for (    String s : properties.get("platform.framework")) {      if (p.endsWith(" ") && x.startsWith(" ")) {        command.add(p.trim());        command.add(s);        command.add(x.trim());      } else       if (p.endsWith(" ")) {        command.add(p.trim());        command.add(s + x);      } else       if (x.startsWith(" ")) {        command.add(p + s);        command.add(x.trim());      } else {        command.add(p + s + x);      }    }  }  String text="";  boolean windows=platform.startsWith("windows");  for (  String s : command) {    boolean hasSpaces=s.indexOf(" ") > 0;    if (hasSpaces) {      text+=windows ? "\"" : "'";    }    text+=s;    if (hasSpaces) {      text+=windows ? "\"" : "'";    }    text+=" ";  }  logger.info(text);  ProcessBuilder pb=new ProcessBuilder(command);  if (environmentVariables != null) {    pb.environment().putAll(environmentVariables);  }  Process p=pb.start();  new Piper(logger,p.getErrorStream(),System.err).start();  new Piper(logger,p.getInputStream(),System.out).start();  return p.waitFor();}  }
class C{  public boolean hasNext(){  return index < co.size();}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  B64OutputStream bos=null;  try {    bos=new B64OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public Vector3f add(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  return new Vector3f(x + vec.x,y + vec.y,z + vec.z);}  }
class C{  @Override public BlockSnapshotBulkRep queryBulkResourceReps(List<URI> ids){  Iterator<BlockSnapshot> _dbIterator=_dbClient.queryIterativeObjects(getResourceClass(),ids);  return new BlockSnapshotBulkRep(BulkList.wrapping(_dbIterator,MapBlockSnapshot.getInstance(_dbClient)));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public PackInHandler(){  setupHandlers();}  }
class C{  public final FastSet<E> union(Set<? extends E> other){  FastSet<E> tmp=new FastSet<E>(this);  tmp.addAll(other);  return tmp;}  }
class C{  private static PduPart findPart(final Context context,PduBody pb,String src,ArrayList<String> srcs){  PduPart result=null;  if (src != null) {    src=unescapeXML(src);    if (contentIdSrc(src)) {      result=pb.getPartByContentId("<" + src.substring("cid:".length()) + ">");      if (result == null) {        boolean allContentIDs=true;        for (        String _src : srcs) {          if (!contentIdSrc(_src)) {            allContentIDs=false;            break;          }        }        if (allContentIDs) {          ArrayList<Long> cids=new ArrayList<>();          for (          String _src : srcs) {            cids.add(getContentId(_src));          }          Collections.sort(cids);          int removed=0;          long previous=-1;          for (int i=0; i < cids.size() - removed; i++) {            long cid=cids.get(i);            if (cid == previous) {              cids.remove(i);              removed++;            } else {              previous=cid;            }          }          long cid=getContentId(src);          int i=cids.indexOf(cid);          if (1 + i < pb.getPartsNum()) {            result=pb.getPart(i + 1);          }        }      }    } else     if (textSrc(src)) {      for (int i=0; i < pb.getPartsNum(); i++) {        PduPart part=pb.getPart(i);        String contentType=byteArrayToString(part.getContentType());        if ("text/plain".equals(contentType)) {          result=part;          break;        }      }    }    if (result == null) {      result=pb.getPartByName(src);    }    if (result == null) {      result=pb.getPartByFileName(src);    }    if (result == null) {      result=pb.getPartByContentLocation(src);    }    if (result == null) {      result=pb.getPartByContentId("<" + src + ">");    }  }  if (result != null) {    return result;  }  if (pb.getPartsNum() > 0) {    final JSONArray array=new JSONArray();    for (int i=0; i < pb.getPartsNum(); i++) {      JSONObject object=new JSONObject();      try {        object.put("part_number",i);      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("location",i);      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("charset",pb.getPart(i).getCharset());      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("content_disposition",byteArrayToString(pb.getPart(i).getContentDisposition()));      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("content_id",byteArrayToString(pb.getPart(i).getContentId()));      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("content_location",byteArrayToString(pb.getPart(i).getContentLocation()));      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("content_transfer_encoding",byteArrayToString(pb.getPart(i).getContentTransferEncoding()));      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("content_type",byteArrayToString(pb.getPart(i).getContentType()));      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("data",byteArrayToString(pb.getPart(i).getData()));      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("data_uri",pb.getPart(i).getDataUri());      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("file_name",byteArrayToString(pb.getPart(i).getFilename()));      } catch (      Exception e) {        e.printStackTrace();      }      try {        object.put("name",byteArrayToString(pb.getPart(i).getName()));      } catch (      Exception e) {        e.printStackTrace();      }      if (pb.getPart(i).generateLocation() != null) {        Log.d(TAG,"Location: " + pb.getPart(i).generateLocation());        if (pb.getPart(i).generateLocation().contains(src)) {          return pb.getPart(i);        }      }      array.put(object);    }  }  throw new IllegalArgumentException("No part found for the model.");}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public Iterator<E> descendingIterator(){  return m.descendingKeySet().iterator();}  }
class C{  public void readItem(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.SherlockMenuItem);  itemId=a.getResourceId(R.styleable.SherlockMenuItem_android_id,defaultItemId);  final int category=a.getInt(R.styleable.SherlockMenuItem_android_menuCategory,groupCategory);  final int order=a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory,groupOrder);  itemCategoryOrder=(category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);  itemTitle=a.getText(R.styleable.SherlockMenuItem_android_title);  itemTitleCondensed=a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);  itemIconResId=a.getResourceId(R.styleable.SherlockMenuItem_android_icon,0);  itemAlphabeticShortcut=getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));  itemNumericShortcut=getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));  if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {    itemCheckable=a.getBoolean(R.styleable.SherlockMenuItem_android_checkable,false) ? 1 : 0;  } else {    itemCheckable=groupCheckable;  }  itemChecked=a.getBoolean(R.styleable.SherlockMenuItem_android_checked,defaultItemChecked);  itemVisible=a.getBoolean(R.styleable.SherlockMenuItem_android_visible,groupVisible);  itemEnabled=a.getBoolean(R.styleable.SherlockMenuItem_android_enabled,groupEnabled);  TypedValue value=new TypedValue();  a.getValue(R.styleable.SherlockMenuItem_android_showAsAction,value);  itemShowAsAction=value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;  itemListenerMethodName=a.getString(R.styleable.SherlockMenuItem_android_onClick);  itemActionViewLayout=a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout,0);  value=new TypedValue();  a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass,value);  itemActionViewClassName=value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;  value=new TypedValue();  a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass,value);  itemActionProviderClassName=value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;  final boolean hasActionProvider=itemActionProviderClassName != null;  if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {    itemActionProvider=newInstance(itemActionProviderClassName,ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,mActionProviderConstructorArguments);  } else {    if (hasActionProvider) {      Log.w(LOG_TAG,"Ignoring attribute 'actionProviderClass'." + " Action view already specified.");    }    itemActionProvider=null;  }  a.recycle();  itemAdded=false;}  }
class C{  public static boolean canRename(DownloadFileInfo downloadFileInfo){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return false;  }  if (isDownloadingStatus(downloadFileInfo)) {    return false;  }  return true;}  }
class C{  public CConnectionEditor(){  super();  setName("ConnectionEditor");  CConnectionEditor_MouseListener ml=new CConnectionEditor_MouseListener();  m_text.setEditable(false);  m_text.setBorder(null);  m_text.addMouseListener(ml);  m_server.setIcon(new ImageIcon(getClass().getResource("Server16.gif")));  m_server.setFocusable(false);  m_server.setBorder(null);  m_server.setOpaque(true);  m_server.addMouseListener(ml);  m_db.setIcon(new ImageIcon(getClass().getResource("Database16.gif")));  m_db.setFocusable(false);  m_db.setBorder(null);  m_db.setOpaque(true);  m_db.addMouseListener(ml);  LookAndFeel.installBorder(this,"TextField.border");  setLayout(new BorderLayout(0,0));  add(m_server,BorderLayout.WEST);  add(m_text,BorderLayout.CENTER);  add(m_db,BorderLayout.EAST);}  }
class C{  private void writeColumnSortInfo() throws IOException {  boolean isNotNull=null != columnSortInfo.getSort_index() && null != columnSortInfo.sort_index_inverted;  if (isNotNull) {    initPath();    String folderContainingFile=CarbonTablePath.getFolderContainingFile(this.sortIndexFilePath);    boolean created=CarbonUtil.checkAndCreateFolder(folderContainingFile);    if (!created) {      LOGGER.error("Database metadata folder creation status :: " + created);      throw new IOException("Failed to created database metadata folder");    }    try {      this.sortIndexThriftWriter=new ThriftWriter(this.sortIndexFilePath,false);      this.sortIndexThriftWriter.open();      sortIndexThriftWriter.write(columnSortInfo);    } catch (    IOException ie) {      LOGGER.error(ie,"problem while writing the dictionary sort index file.");      throw new IOException("problem while writing the dictionary sort index file.",ie);    } finally {      if (null != sortIndexThriftWriter) {        this.sortIndexThriftWriter.close();      }      this.sortIndexFilePath=null;    }  }}  }
class C{  public boolean isShiftAllocation(){  Object oo=get_Value(COLUMNNAME_IsShiftAllocation);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public FacebookException(){  super();}  }
class C{  public void addSeries(final String title,final Double[] values){  int cnt=1;  for (  double value : values) {    String category=(cnt > this.categories.length ? Integer.toString(cnt) : this.categories[cnt - 1]);    this.dataset.addValue(value,title,category);    cnt++;  }}  }
class C{  public MType build(){  isClean=true;  return getMessage();}  }
class C{  public static void pack(final File sourceDir,final File targetZip,final int compressionLevel) throws IOException {  Preconditions.checkArgument(sourceDir != null && sourceDir.exists() && sourceDir.isDirectory(),"Source directory is not exist: %s",sourceDir.getAbsolutePath());  long startTime=System.currentTimeMillis();  ZipOutputStream zipOut=null;  try {    zipOut=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(targetZip)));    zipOut.setLevel(compressionLevel);    pack(sourceDir,sourceDir.getParent() + File.separator,zipOut);  }  finally {    IOUtils.closeQuietly(zipOut);    long interval=(System.currentTimeMillis() - startTime) / 1000;    if (interval >= DELAY_THRESHOLD_IN_SECOND) {      long folderSize=FileUtils.sizeOfDirectory(sourceDir);      log.info(String.format("Zip folder: %s from %d to %d bytes, took %s seconds",sourceDir.getAbsolutePath(),folderSize,targetZip.length(),interval));    }  }}  }
class C{  private void testAlterTableAlterColumnWithConstraint() throws SQLException {  stat.execute("create table test(id int check(id in (1,2)) )");  stat.execute("alter table test alter id rename to id2");  conn.close();  conn=getConnection();  stat=conn.createStatement();  stat.execute("insert into test values(1)");  assertThrows(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1,stat).execute("insert into test values(3)");  stat.execute("drop table test");}  }
class C{  public static void main(String[] args){  JCudaDriverTextureTest.PRINT_LOG_MESSAGES=true;  JCudaDriverTextureTest t=new JCudaDriverTextureTest();  t.testTextures();}  }
class C{  public boolean needsRegistration(){  return !registered;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static VectorClock incrementT(long timestamp,VectorClock clock,int... nodes){  for (  int n : nodes)   clock=clock.incremented((short)n,timestamp);  return clock;}  }
class C{  @Override public long clearOldEntries(long cacheExpirationMs){  long oldestRemainingEntryAgeMs=0L;synchronized (mLock) {    try {      long now=mClock.now();      DiskStorage storage=mStorageSupplier.get();      Collection<DiskStorage.Entry> allEntries=storage.getEntries();      int itemsRemovedCount=0;      long itemsRemovedSize=0L;      for (      DiskStorage.Entry entry : allEntries) {        long entryAgeMs=Math.max(1,Math.abs(now - entry.getTimestamp()));        if (entryAgeMs >= cacheExpirationMs) {          long entryRemovedSize=storage.remove(entry);          if (entryRemovedSize > 0) {            itemsRemovedCount++;            itemsRemovedSize+=entryRemovedSize;          }        } else {          oldestRemainingEntryAgeMs=Math.max(oldestRemainingEntryAgeMs,entryAgeMs);        }      }      storage.purgeUnexpectedResources();      if (itemsRemovedCount > 0) {        maybeUpdateFileCacheSize();        mCacheStats.increment(-itemsRemovedSize,-itemsRemovedCount);        reportEviction(CacheEventListener.EvictionReason.CONTENT_STALE,itemsRemovedCount,itemsRemovedSize);      }    } catch (    IOException ioe) {      mCacheErrorLogger.logError(CacheErrorLogger.CacheErrorCategory.EVICTION,TAG,"clearOldEntries: " + ioe.getMessage(),ioe);    }  }  return oldestRemainingEntryAgeMs;}  }
class C{  public static ExceptionBuilder unavailable(){  return new ExceptionBuilder(Status.SERVICE_UNAVAILABLE);}  }
class C{  public static void sort(Comparable[] pq){  int n=pq.length;  for (int k=n / 2; k >= 1; k--)   sink(pq,k,n);  while (n > 1) {    exch(pq,1,n--);    sink(pq,1,n);  }}  }
class C{  public SensorMatrixEditorException(final Throwable cause){  super(cause);}  }
class C{  public void pop(StepSingle stepSingle){  checkDumpStep();  parentLevel=stepSingle.parent;  process(stepSingle);}  }
class C{  public void clear(){  super.clear();  header.before=header.after=header;}  }
class C{  private ConsumerLogMessages(){}  }
class C{  public Vector2d negate(){  x=-x;  y=-y;  return this;}  }
class C{  public Object transform(Object vo){  DocumentoVitalPO po=new DocumentoVitalPO();  POUtils.copyVOProperties(po,vo);  return po;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.597 -0400",hash_original_method="B59F3780435E1D82A9BC71252DB81041",hash_generated_method="A33E77749A78F60ECA6DC727ABB6C535") @Override public void reset() throws IOException {synchronized (lock) {    super.reset();    lineNumber=markedLineNumber;    lastWasCR=markedLastWasCR;  }}  }
class C{  public static int addToConstantPool(String s){  int i=constantPool.indexOf(s);  if (i < 0) {    constantPool.add(s);    return constantPool.size() - 1;  }  return i;}  }
class C{  public void clearRangeMarkers(){  if (this.rangeMarkers != null) {    this.rangeMarkers.clear();    fireChangeEvent();  }}  }
class C{  public void generate(CompilationUnit unit,TypeTable typeTable){  CompilerContext flexCx=unit.getContext();  Context cx=flexCx.getAscContext();  ProgramNode node=(ProgramNode)unit.getSyntaxTree();  if (unit.topLevelDefinitions.first() == null) {    return;  }  String className=NameFormatter.toDot(unit.topLevelDefinitions.first());  boolean exclude=false;  if (includeOnly != null && !includeOnly.contains(className)) {    exclude=true;  } else   if (excludeClasses.contains(className)) {    excludeClasses.remove(className);    exclude=true;  } else   if (unit.metadata != null) {    for (Iterator iterator=unit.metadata.iterator(); iterator.hasNext(); ) {      MetaDataNode metaDataNode=(MetaDataNode)iterator.next();      if (EXCLUDE_CLASS.equals(metaDataNode.getId())) {        exclude=true;        break;      }    }  }  Set<QName> inheritance=new TreeSet<QName>(new ComparatorImpl());  for (  Name name : unit.inheritance) {    if (name instanceof QName) {      inheritance.add((QName)name);    }  }  boolean flag=false;  if (!exclude && !unit.getSource().isInternal()) {    if (Trace.asdoc)     System.out.println("Generating XML for " + unit.getSource().getName());    flag=false;  } else {    if (Trace.asdoc)     System.out.println("Skipping generating XML for " + unit.getSource().getName());    flag=true;  }  if (packages.size() != 0) {    String n=unit.topLevelDefinitions.first().getNamespace();    if (n != null) {      packages.remove(n);    }  }  cx.pushScope(node.frame);  MetaDataEvaluator printer=new MetaDataEvaluator();  node.evaluate(cx,printer);  ObjectList comments=printer.doccomments;  AbcClass abcClass=typeTable.getClass(unit.topLevelDefinitions.first().toString());  tab.addComments(unit.topLevelDefinitions.first(),comments,inheritance,flag,cx,abcClass);  cx.popScope();}  }
class C{  public static <T>T parseJsonToObject(Context context,String jsonName,Class<T> clazz){  String json=getTextFromAssets(context,jsonName);  return JsonUtils.jsonToObject(json,clazz);}  }
class C{  public boolean delete(int token,boolean deleteTaskFile){  Task task=tasksDataSource.getTaskInfo(token);  if (task.url != null) {    List<Chunk> taskChunks=chunksDataSource.chunksRelatedTask(task.id);    for (    Chunk chunk : taskChunks) {      FileUtils.delete(task.save_address,String.valueOf(chunk.id));      chunksDataSource.delete(chunk.id);    }    if (deleteTaskFile) {      long size=FileUtils.size(task.save_address,task.name + "." + task.extension);      if (size > 0) {        FileUtils.delete(task.save_address,task.name + "." + task.extension);      }    }    return tasksDataSource.delete(task.id);  }  return false;}  }
class C{  public MorrisLecarRulePanel(){  super();  this.add(tabbedPane);  JTextField tfCMembrane=createTextField(null,null);  JTextField tfV_M1=createTextField(null,null);  JTextField tfV_M2=createTextField(null,null);  JTextField tfThreshold=createTextField(null,null);  JTextField tfI_Bg=createTextField(null,null);  LabelledItemPanel cellPanel=new LabelledItemPanel();  cellPanel.addItem("Capacitance (\u03BCF/cm\u00B2)",tfCMembrane);  cellPanel.addItem("Voltage const. 1",tfV_M1);  cellPanel.addItem("Voltage const. 2",tfV_M2);  cellPanel.addItem("Threshold (mV)",tfThreshold);  cellPanel.addItem("Background current (nA)",tfI_Bg);  cellPanel.addItem("Add noise: ",getAddNoise());  JTextField tfG_Ca=createTextField(null,null);  JTextField tfG_K=createTextField(null,null);  JTextField tfG_L=createTextField(null,null);  JTextField tfVRest_Ca=createTextField(null,null);  JTextField tfvRest_k=createTextField(null,null);  JTextField tfVRest_L=createTextField(null,null);  LabelledItemPanel ionPanel=new LabelledItemPanel();  ionPanel.addItem("Ca\u00B2\u207A conductance (\u03BCS/cm\u00B2)",tfG_Ca);  ionPanel.addItem("K\u207A conductance (\u03BCS/cm\u00B2)",tfG_K);  ionPanel.addItem("Leak conductance (\u03BCS/cm\u00B2)",tfG_L);  ionPanel.addItem("Ca\u00B2\u207A equilibrium (mV)",tfVRest_Ca);  ionPanel.addItem("K\u207A equilibrium (mV)",tfvRest_k);  ionPanel.addItem("Leak equilibrium (mV)",tfVRest_L);  JTextField tfV_W1=createTextField(null,null);  JTextField tfV_W2=createTextField(null,null);  JTextField tfPhi=createTextField(null,null);  LabelledItemPanel potas=new LabelledItemPanel();  potas.addItem("K\u207A const. 1",tfV_W1);  potas.addItem("K\u207A const. 2",tfV_W2);  potas.addItem("K\u207A \u03C6",tfPhi);  tabbedPane.add(cellPanel,"Membrane Properties");  tabbedPane.add(ionPanel,"Ion Properties");  tabbedPane.add(potas,"K\u207A consts.");  tabbedPane.add(getNoisePanel(),"Noise");}  }
class C{  protected void doAdd(Object key,BufferedImage image){  Entry entry=this.entryMap.remove(key);  if (entry != null) {    this.doRemove(entry);  }  Rect rect=new Rect(0,0,image.getWidth() + 2,image.getHeight() + 2,null);  entry=new Entry(key,rect,1,1,image.getWidth(),image.getHeight());  this.markUsed(entry);  this.entryMap.put(key,entry);  this.rectPacker.add(rect);  int imageX=rect.x() + entry.imageOffsetX;  int imageY=rect.y() + entry.imageOffsetY;  this.drawImage((BufferedImage)this.rectPacker.getBackingStore(),image,imageX,imageY,true);  this.markDirty(rect.x(),rect.y(),rect.w(),rect.h());}  }
class C{  public void endTag(String elName) throws IOException {  _indentLevel--;  _writeIndent();  _writeLn("</" + elName + ">");}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NODE:  return isSetNode();}throw new IllegalStateException();}  }
class C{  public T caseAnonymous_concreteMethodDeclaration_1_(Anonymous_concreteMethodDeclaration_1_ object){  return null;}  }
class C{  private Coord calculatePlacemarkPosition(final Link l){  Coord coordFrom=l.getFromNode().getCoord();  Coord coordTo=l.getToNode().getCoord();  double xDiff=coordTo.getX() - coordFrom.getX();  double yDiff=coordTo.getY() - coordFrom.getY();  double length=Math.sqrt((xDiff * xDiff) + (yDiff * yDiff));  double scale=0.4;  scale=l.getLength() * scale;  Coord vec=new Coord(coordFrom.getX() + (xDiff * scale / length),coordFrom.getY() + (yDiff * scale / length));  return vec;}  }
class C{  @PUT @Path("/internal/initstandby") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response initStandby(SiteConfigParam configParam){  try {    SiteParam activeSiteParam=configParam.getActiveSite();    ipsecConfig.setPreSharedKey(activeSiteParam.getIpsecKey());    log.info("Clean up all obsolete site configurations");    String activeSiteId=activeSiteParam.getUuid();    Set<String> standbySiteIds=new HashSet<>();    for (    SiteParam standby : configParam.getStandbySites()) {      standbySiteIds.add(standby.getUuid());    }    for (    Site siteToRemove : drUtil.listSites()) {      String siteId=siteToRemove.getUuid();      if (activeSiteId.equals(siteId) || standbySiteIds.contains(siteId)) {        continue;      }      drUtil.removeSite(siteToRemove);    }    coordinator.addSite(activeSiteParam.getUuid());    Site activeSite=new Site();    siteMapper.map(activeSiteParam,activeSite);    activeSite.setVdcShortId(drUtil.getLocalVdcShortId());    coordinator.persistServiceConfiguration(activeSite.toConfiguration());    Long dataRevision=null;    for (    SiteParam standby : configParam.getStandbySites()) {      Site site=new Site();      siteMapper.map(standby,site);      site.setVdcShortId(drUtil.getLocalVdcShortId());      coordinator.persistServiceConfiguration(site.toConfiguration());      coordinator.addSite(standby.getUuid());      if (standby.getUuid().equals(coordinator.getSiteId())) {        dataRevision=standby.getDataRevision();        log.info("Set data revision to {}",dataRevision);      }      log.info("Persist standby site {} to ZK",standby.getVip());    }    if (dataRevision == null) {      throw new IllegalStateException("Illegal request on standby site. No data revision in request");    }    String ntpServers=configParam.getNtpServers();    PropertyInfoExt targetPropInfo=coordinator.getTargetInfo(PropertyInfoExt.class);    if (ntpServers != null && !ntpServers.equals(targetPropInfo.getProperty(NTPSERVERS))) {      targetPropInfo.addProperty(NTPSERVERS,ntpServers);      coordinator.setTargetInfo(targetPropInfo);      log.info("Set ntp servers to {}",ntpServers);    }    drUtil.updateVdcTargetVersion(coordinator.getSiteId(),SiteInfo.DR_OP_CHANGE_DATA_REVISION,configParam.getVdcConfigVersion(),dataRevision);    return Response.status(Response.Status.ACCEPTED).build();  } catch (  Exception e) {    log.error("Internal error for updating coordinator on standby",e);    throw APIException.internalServerErrors.configStandbyFailed(e.getMessage());  }}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  public void testDisjoint(){  Instances result=null;  m_Instances.setClassIndex(2);  try {    result=applyFilter(new Filter[]{new AllFilter(),new AllFilter()},new Range[]{new Range("1-2"),new Range("4-5")},false);  } catch (  Exception e) {    fail("Problem applying the filter: " + e);  }  assertEquals(m_Instances.numInstances(),result.numInstances());  assertEquals(m_Instances.numAttributes(),result.numAttributes());}  }
class C{  public void removeInterface(NetworkInterface ni){  GridCell c=ginterfaces.get(ni);  if (c != null) {    c.removeInterface(ni);  }  ginterfaces.remove(ni);}  }
class C{  public RenameJavaElementDescriptor(String id,String project,String description,String comment,Map arguments,int flags){  super(id,project,description,comment,arguments,flags);  Assert.isLegal(checkId(id),"Refactoring id is not a rename refactoring id");  fName=JavaRefactoringDescriptorUtil.getString(fArguments,ATTRIBUTE_NAME);  if (getID().equals(IJavaRefactorings.RENAME_TYPE_PARAMETER)) {    fJavaElement=JavaRefactoringDescriptorUtil.getJavaElement(fArguments,ATTRIBUTE_INPUT,getProject());    String parameterName=JavaRefactoringDescriptorUtil.getString(fArguments,ATTRIBUTE_PARAMETER);    if (fJavaElement instanceof IType) {      fJavaElement=((IType)fJavaElement).getTypeParameter(parameterName);    }    if (fJavaElement instanceof IMethod) {      fJavaElement=((IMethod)fJavaElement).getTypeParameter(parameterName);    }  } else   fJavaElement=JavaRefactoringDescriptorUtil.getJavaElement(fArguments,ATTRIBUTE_INPUT,getProject());  final int type=fJavaElement.getElementType();  if (type != IJavaElement.PACKAGE_FRAGMENT_ROOT)   fReferences=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_REFERENCES,fReferences);  if (type == IJavaElement.FIELD) {    fRenameGetter=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_RENAME_GETTER,fRenameGetter);    fRenameSetter=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_RENAME_SETTER,fRenameSetter);  }switch (type) {case IJavaElement.PACKAGE_FRAGMENT:case IJavaElement.TYPE:case IJavaElement.FIELD:    fTextual=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_TEXTUAL_MATCHES,fTextual);  break;default :break;}switch (type) {case IJavaElement.METHOD:case IJavaElement.FIELD:fDeprecate=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_DEPRECATE,fDeprecate);fDelegate=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_DELEGATE,fDelegate);break;default :break;}switch (type) {case IJavaElement.PACKAGE_FRAGMENT:case IJavaElement.TYPE:fQualified=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_QUALIFIED,fQualified);fPatterns=JavaRefactoringDescriptorUtil.getString(fArguments,ATTRIBUTE_PATTERNS,true);break;default :break;}switch (type) {case IJavaElement.TYPE:fSimilarDeclarations=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_SIMILAR_DECLARATIONS,fSimilarDeclarations);fMatchStrategy=JavaRefactoringDescriptorUtil.getInt(fArguments,ATTRIBUTE_MATCH_STRATEGY,fMatchStrategy);break;default :break;}switch (type) {case IJavaElement.PACKAGE_FRAGMENT:fHierarchical=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_HIERARCHICAL,fHierarchical);break;default :break;}}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'lookMyPrivate'";  db.execSQL(sql);}  }
class C{  public void datosTIFF(byte[] buffer) throws Exception {  try {    FileCacheSeekableStream in=new FileCacheSeekableStream(new ByteArrayInputStream(buffer));    TIFFDirectory td=new TIFFDirectory(in,0);    resX=td.getFieldAsFloat(TIFFImageDecoder.TIFF_X_RESOLUTION);    resY=td.getFieldAsFloat(TIFFImageDecoder.TIFF_Y_RESOLUTION);    code=(int)td.getFieldAsLong(TIFFImageDecoder.TIFF_COMPRESSION);  } catch (  IOException e) {    log.error(e.getMessage(),e);    throw e;  }}  }
class C{  protected DeclaredVersionImpl(){  super();}  }
class C{  public void printStat(JCTree tree) throws IOException {  if (isEmptyStat(tree)) {  } else {    printExpr(tree,TreeInfo.notExpression);  }}  }
class C{  public Item(CharSequence text,Intent intent,Uri uri){  mText=text;  mHtmlText=null;  mIntent=intent;  mUri=uri;}  }
class C{  protected boolean FunctionCall() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if (lookahead(':',1)) {    appendOp(4,OpCodes.OP_EXTFUNCTION);    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,m_queueMark - 1);    nextToken();    consumeExpected(':');    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 2,m_queueMark - 1);    nextToken();  } else {    int funcTok=getFunctionToken(m_token);    if (-1 == funcTok) {      error(XPATHErrorResources.ER_COULDNOT_FIND_FUNCTION,new Object[]{m_token});    }switch (funcTok) {case OpCodes.NODETYPE_PI:case OpCodes.NODETYPE_COMMENT:case OpCodes.NODETYPE_TEXT:case OpCodes.NODETYPE_NODE:      return false;default :    appendOp(3,OpCodes.OP_FUNCTION);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,funcTok);}nextToken();}consumeExpected('(');while (!tokenIs(')') && m_token != null) {if (tokenIs(',')) {error(XPATHErrorResources.ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG,null);}Argument();if (!tokenIs(')')) {consumeExpected(',');if (tokenIs(')')) {  error(XPATHErrorResources.ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG,null);}}}consumeExpected(')');m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);return true;}  }
class C{  public void loadProfiles(String path){  try {    VSDFile vsdfile=new VSDFile(path);    if (vsdfile.isInitialized()) {      this.loadProfiles(vsdfile);    }  } catch (  java.util.zip.ZipException e) {    log.error("ZipException loading VSDecoder from " + path);  }catch (  java.io.IOException ioe) {    log.error("IOException loading VSDecoder from " + path);  }}  }
class C{  public boolean hasPublishers(){  return hasRepeatingExtension(Publisher.class);}  }
class C{  public static String relativePath(IPath fullPath,int skipSegmentCount){  boolean hasTrailingSeparator=fullPath.hasTrailingSeparator();  String[] segments=fullPath.segments();  int length=0;  int max=segments.length;  if (max > skipSegmentCount) {    for (int i1=skipSegmentCount; i1 < max; i1++) {      length+=segments[i1].length();    }    length+=max - skipSegmentCount - 1;  }  if (hasTrailingSeparator)   length++;  char[] result=new char[length];  int offset=0;  int len=segments.length - 1;  if (len >= skipSegmentCount) {    for (int i=skipSegmentCount; i < len; i++) {      int size=segments[i].length();      segments[i].getChars(0,size,result,offset);      offset+=size;      result[offset++]='/';    }    int size=segments[len].length();    segments[len].getChars(0,size,result,offset);    offset+=size;  }  if (hasTrailingSeparator)   result[offset++]='/';  return new String(result);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.nim_advanced_team_info_activity);  ToolBarOptions options=new ToolBarOptions();  setToolBar(R.id.toolbar,options);  parseIntentData();  findViews();  initActionbar();  initAdapter();  loadTeamInfo();  requestMembers();  registerObservers(true);}  }
class C{  public static SizedInputStream openStream(String res,String err){  while (Mirror.getCurrent() != null) {    HttpURLConnection conn;    try {      conn=Mirror.getCurrent().getResource(res);    } catch (    MalformedURLException e) {      Log.error("%s Is the mirror list broken?",err);      e.printStackTrace();      return null;    }catch (    IOException e) {      Log.error("%s Is your antivirus or firewall blocking the connection?",err);      e.printStackTrace();      return null;    }    try {      long len=-1;      boolean failed=true;      try {        Method m=HttpURLConnection.class.getMethod("getContentLengthLong");        len=(Long)m.invoke(conn);        failed=false;      } catch (      NoSuchMethodException me) {      }catch (      IllegalAccessException ae) {      }catch (      InvocationTargetException te) {        if (te.getTargetException() instanceof IOException)         throw (IOException)te.getTargetException();      }      if (failed)       len=(long)conn.getContentLength();      return new SizedInputStream(conn.getInputStream(),len);    } catch (    IOException e) {      int rc;      try {        rc=conn.getResponseCode();      } catch (      IOException ie) {        Log.error("%s Couldn't even get the HTTP response code!",err);        return null;      }      Log.error("%s HTTP response is %d; trying with another mirror.",err,rc);    }    Mirror.markAsBroken();  }  Log.error("%s All mirrors seems broken.",err);  return null;}  }
class C{  public SerializableList(final Deserializer deserializer,final ObjectDeserializer<T> elementDeserializer,final String label){  super(deserializer,elementDeserializer,label);}  }
class C{  public void updateDis(double distance){  if (distance < 1000) {    distanceTV.setText(String.valueOf(Math.round(distance)));    distanceUnitTV.setText(R.string.meter);  } else {    distanceTV.setText(String.format("%.2f",distance / 1000));    distanceUnitTV.setText(R.string.km);  }}  }
class C{  public boolean timeoutExtended(){  return mExtendedTimeout;}  }
class C{  public void addInvokeinterface(CtClass clazz,String name,String desc,int count){  addInvokeinterface(constPool.addClassInfo(clazz),name,desc,count);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__LEFT_OPERAND:    return getLeftOperand();case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__OPERATOR:  return getOperator();case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__RIGHT_OPERAND:return getRightOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Boolean isNestedHVEnabled(){  return nestedHVEnabled;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.611 -0500",hash_original_method="B076A318D7F3CB7E259ECDC99FDB3D0D",hash_generated_method="0A44E08571681D07EC93C75BDC2D40E8") boolean updateCurrentCarrierInProvider(String operatorNumeric){  if (!TextUtils.isEmpty(operatorNumeric)) {    try {      Uri uri=Uri.withAppendedPath(Telephony.Carriers.CONTENT_URI,"current");      ContentValues map=new ContentValues();      map.put(Telephony.Carriers.NUMERIC,operatorNumeric);      log("updateCurrentCarrierInProvider from system: numeric=" + operatorNumeric);      getContext().getContentResolver().insert(uri,map);      MccTable.updateMccMncConfiguration(this,operatorNumeric);      return true;    } catch (    SQLException e) {      Log.e(LOG_TAG,"Can't store current operator",e);    }  }  return false;}  }
class C{  public static void updateValueDescription(Properties ctx,final String where,String trxName){  List<MAccount> accounts=new Query(ctx,MAccount.Table_Name,where,trxName).setOrderBy(MAccount.COLUMNNAME_C_ValidCombination_ID).list();  for (  MAccount account : accounts) {    account.setValueDescription();    account.saveEx();  }}  }
class C{  public static List<ServiceUsage> findServiceUsage(ServiceDetailDescriptor descriptor){  return new ServiceUsageFinder().findServiceUsage(descriptor);}  }
class C{  public static String unformatString(String s){  StringBuffer result=new StringBuffer();  int i=0;  while (i < s.length()) {    char c=s.charAt(i++);    if ((c == '\\') && (i < s.length())) {      c=s.charAt(i++);      if ((c == 'u') && (i + 3 < s.length())) {        int value=0;        for (int j=0; j < 4; j++) {          c=s.charAt(i++);          int digit=Character.digit(c,16);          if (digit != -1) {            value=(value << 4) + digit;          } else {            throw new IllegalArgumentException("Malformed \\uxxxx encoding.");          }        }        result.append((char)value);      } else       if (c == 'u') {        result.append(c);      } else {        result.append('\\');        result.append(c);      }    } else {      result.append(c);    }  }  return result.toString();}  }
class C{  public static Date convertDate(Value value,Calendar calendar){  if (value == ValueNull.INSTANCE) {    return null;  }  ValueDate d=(ValueDate)value.convertTo(Value.DATE);  Calendar cal=(Calendar)calendar.clone();  cal.clear();  cal.setLenient(true);  long dateValue=d.getDateValue();  setCalendarFields(cal,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),0,0,0,0);  long ms=cal.getTimeInMillis();  return new Date(ms);}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  public PnSignalingParams(List<PeerConnection.IceServer> iceServers){  this.iceServers=iceServers;  this.pcConstraints=defaultPcConstraints();  this.videoConstraints=defaultVideoConstraints();  this.audioConstraints=defaultAudioConstraints();}  }
class C{  protected final CharSequence charSequence(int from,int to){  int len=to - from;  if (len == 0) {    return emitStrings ? StringPool.EMPTY : EMPTY_CHAR_BUFFER;  }  return emitStrings ? new String(input,from,len) : CharBuffer.wrap(input,from,len);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.PARAMETERIZED_TYPE__PARAMETER:    return parameter != null && !parameter.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public ObjectFactory(){}  }
class C{  protected void adaptToInsert(){  int myStart=fPosition.offset;  int myEnd=fPosition.offset + fPosition.length - 1;  myEnd=Math.max(myStart,myEnd);  int yoursStart=fOffset;  int yoursEnd=fOffset + fReplaceLength - 1;  yoursEnd=Math.max(yoursStart,yoursEnd);  if (myEnd < yoursStart)   return;  if (myStart < yoursStart)   fPosition.length+=fReplaceLength; else   fPosition.offset+=fReplaceLength;}  }
class C{  public SignatureVisitor visitParameterType(){  return this;}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String makeFieldPrompt(final String fieldName,final boolean defaultValue){  return String.format("%s [default: %s]: ",fieldName,defaultValue);}  }
class C{  public boolean isText(){  return true;}  }
class C{  private long waitFor(double permitsToAwait,long t){  long begin=t;  try {    while (permitsToAwait > 0) {      double currentRate=this.rate;      double nanosPerPermit=1000000000.0 / currentRate;      long done=t + ((long)(permitsToAwait * nanosPerPermit));      long now=System.nanoTime();      if (done > now) {        rateChanged.awaitNanos(done - now);        now=System.nanoTime();      }      double permitsElapsed=((now - t) / 1000000000.0) * currentRate;      permitsToAwait-=permitsElapsed;      t=now;    }  } catch (  InterruptedException e) {  }  return t - begin;}  }
class C{  public Tween targetRelative(float targetValue1,float targetValue2,float targetValue3){  isRelative=true;  targetValues[0]=isInitialized() ? targetValue1 + startValues[0] : targetValue1;  targetValues[1]=isInitialized() ? targetValue2 + startValues[1] : targetValue2;  targetValues[2]=isInitialized() ? targetValue3 + startValues[2] : targetValue3;  return this;}  }
class C{  public void removeSheetListener(SheetListener l){  listenerList.remove(SheetListener.class,l);}  }
class C{  public synchronized void message(DCCppReply l){  if (log.isDebugEnabled()) {    log.debug("recieved message: " + l);  }  if (l.isSensorDefReply()) {    if (l.getSensorDefNumInt() == address) {      if (log.isDebugEnabled()) {        log.debug("Def Message for sensor " + systemName + " (Pin "+ address+ ")");      }      pin=l.getSensorDefPinInt();      pullup=l.getSensorDefPullupBool();      setOwnState(Sensor.UNKNOWN);      setProperty("Pin",pin);      setProperty("Pullup",pullup);    }  } else   if (l.isSensorReply() && (l.getSensorNumInt() == address)) {    if (log.isDebugEnabled()) {      log.debug("Message for sensor " + systemName + " (Pin "+ address+ ")");    }    if (l.getSensorIsActive()) {      setOwnState(Sensor.ACTIVE);    } else     if (l.getSensorIsInactive()) {      setOwnState(Sensor.INACTIVE);    } else {      setOwnState(Sensor.UNKNOWN);    }  }  return;}  }
class C{  public static BufferedInputStream newInputStream(File file) throws FileNotFoundException {  return new BufferedInputStream(new FileInputStream(file));}  }
class C{  public boolean isPresent(){  return preferred != null;}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  public ConcurrentHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  protected void sequence_S_Action(ISerializationContext context,S_Action semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public String encode(final byte[] data){  return new String(encodeHex(data));}  }
class C{  public boolean isTeleclickEnabled(){  return has(TELECLICKMODE);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.STANDALONE_BLOCK__BLOCK:    setBlock((Block)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public int size(){  return nodes.size();}  }
class C{  public Select<Model> where(DataFilterClause filterClause,DataFilterClause.DataFilterConjunction conjunction){  this.filterCriteria.addClause(filterClause,conjunction);  return this;}  }
class C{  @Override public Iterator<E> iterator(){  return new PriorityIterator();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.519 -0400",hash_original_method="EACF8E2DE294FEF43D3A3F18958358BB",hash_generated_method="E8700504289C56C16DB5F0E6411ECFFD") public AndFileFilter(final List<IOFileFilter> fileFilters){  if (fileFilters == null) {    this.fileFilters=new ArrayList<IOFileFilter>();  } else {    this.fileFilters=new ArrayList<IOFileFilter>(fileFilters);  }}  }
class C{  private static List<String> buildSuperClassList(PsiClass psiClass,List<String> packages){  if (psiClass == null || psiClass.getQualifiedName().equals("java.lang.Object")) {    return packages;  } else {    packages.add(psiClass.getQualifiedName());    return buildSuperClassList(psiClass.getSuperClass(),packages);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  Status readStatus(Element el){  NodeList list=el.getElementsByTagName("status");  if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_STATUS;  return Status.valueOf(list.item(0).getFirstChild().getNodeValue());}  }
class C{  public int size(){  acquireReadLock();  try {    return this.idsAvailable.size();  }  finally {    releaseReadLock();  }}  }
class C{  public String numRulesTipText(){  return "Number of rules to find.";}  }
class C{  public void testPolygonWithSpike() throws Exception {  String geomStr="POLYGON ((3312459.605 6646878.353, 3312460.524 6646875.969, 3312459.427 6646878.421, 3312460.014 6646886.391, 3312465.889 6646887.398, 3312470.827 6646884.839, 3312475.4 6646878.027, 3312477.289 6646871.694, 3312472.748 6646869.547, 3312468.253 6646874.01, 3312463.52 6646875.779, 3312459.605 6646878.353))";  new GeometryOperationValidator(TPSimplifierResult.getResult(geomStr,2.0)).test();}  }
class C{  @Override public void panRangeAxes(double percent,PlotRenderingInfo info,Point2D source){  if (!isRangePannable() || this.rangeAxis == null) {    return;  }  double length=this.rangeAxis.getRange().getLength();  double adj=percent * length;  if (this.rangeAxis.isInverted()) {    adj=-adj;  }  this.rangeAxis.setRange(this.rangeAxis.getLowerBound() + adj,this.rangeAxis.getUpperBound() + adj);}  }
class C{  @Override public void transform(AffineTransform tx){  Point2D.Double anchor=getStartPoint();  Point2D.Double lead=getEndPoint();  setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));}  }
class C{  private Figure readPolygonElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a);  readShapeAttributes(elem,a);  Point2D.Double[] points=toPoints(elem,readAttribute(elem,"points",""));  Figure figure=factory.createPolygon(points,a);  elementObjects.put(elem,figure);  return figure;}  }
class C{  public String toSummaryString(String title){  StringBuffer result;  result=new StringBuffer(title);  if (title.length() != 0) {    result.append("\n");  }  result.append(m_Result);  return result.toString();}  }
class C{  public static Time convertTime(Value value,Calendar calendar){  if (value == ValueNull.INSTANCE) {    return null;  }  ValueTime t=(ValueTime)value.convertTo(Value.TIME);  Calendar cal=(Calendar)calendar.clone();  cal.clear();  cal.setLenient(true);  long nanos=t.getNanos();  long millis=nanos / 1000000;  nanos-=millis * 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  setCalendarFields(cal,1970,1,1,(int)h,(int)m,(int)s,(int)millis);  long ms=cal.getTimeInMillis();  return new Time(ms);}  }
class C{  public GF2nONBElement(GF2nONBField gf2n,Random rand){  mField=gf2n;  mDegree=mField.getDegree();  mLength=gf2n.getONBLength();  mBit=gf2n.getONBBit();  mPol=new long[mLength];  if (mLength > 1) {    for (int j=0; j < mLength - 1; j++) {      mPol[j]=rand.nextLong();    }    long last=rand.nextLong();    mPol[mLength - 1]=last >>> (MAXLONG - mBit);  } else {    mPol[0]=rand.nextLong();    mPol[0]=mPol[0] >>> (MAXLONG - mBit);  }}  }
class C{  public boolean isDeleted(){  return isDeleted;}  }
class C{  public static void logTokenAudience(String idTokenString){  try {    GoogleIdToken idToken=GoogleIdToken.parse(jsonFactory,idTokenString);    Log.d(TAG,"IDToken Audience:" + idToken.getPayload().getAudience());  } catch (  IOException e) {    Log.e(TAG,"IDToken Audience: Could not parse ID Token",e);  }}  }
class C{  public final void testEqualsObject05(){  ECFieldF2m f1=new ECFieldF2m(2000);  ECFieldF2m f2=new ECFieldF2m(2000,BigInteger.valueOf(0L).setBit(0).setBit(1).setBit(2).setBit(981).setBit(2000));  assertFalse(f1.equals(f2) || f2.equals(f1));}  }
class C{  private void startSlowConsumer(){  if (logger.isTraceEnabled()) {    logger.trace(this + "::Sending 1 credit to start delivering of one message to slow consumer");  }  sendCredits(1);  try {    pendingFlowControl.await(10,TimeUnit.SECONDS);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  public synchronized static void clearWeakReferencesNow(){  LAYOUTS.clear();}  }
class C{  public SslSelectFastestProxy(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  public MPaySelectionCheck(MPaySelectionLine line,String PaymentRule){  this(line.getCtx(),0,line.get_TrxName());  setClientOrg(line);  setC_PaySelection_ID(line.getC_PaySelection_ID());  int C_BPartner_ID=line.getInvoice().getC_BPartner_ID();  setC_BPartner_ID(C_BPartner_ID);  if (X_C_Order.PAYMENTRULE_DirectDebit.equals(PaymentRule)) {    MBPBankAccount[] bas=MBPBankAccount.getOfBPartner(line.getCtx(),C_BPartner_ID);    for (int i=0; i < bas.length; i++) {      MBPBankAccount account=bas[i];      if (account.isDirectDebit()) {        setC_BP_BankAccount_ID(account.getC_BP_BankAccount_ID());        break;      }    }  } else   if (X_C_Order.PAYMENTRULE_DirectDeposit.equals(PaymentRule)) {    MBPBankAccount[] bas=MBPBankAccount.getOfBPartner(line.getCtx(),C_BPartner_ID);    for (int i=0; i < bas.length; i++) {      MBPBankAccount account=bas[i];      if (account.isDirectDeposit()) {        setC_BP_BankAccount_ID(account.getC_BP_BankAccount_ID());        break;      }    }  }  setPaymentRule(PaymentRule);  setIsReceipt(line.isSOTrx());  setPayAmt(line.getPayAmt());  setDiscountAmt(line.getDiscountAmt());  setQty(1);}  }
class C{  private boolean moveItemsFromListToSlotOrGround(Player source,String sourcePlayer,String targetPlayer,List<Item> items,RPSlot targetSlot){  final StendhalRPZone zone=player.getZone();  boolean onGround=false;  for (  Item item : items) {    if (!targetSlot.isFull()) {      targetSlot.add(item);      new ItemLogger().equipAction(source,item,new String[]{"slot",sourcePlayer,"trade"},new String[]{"slot",targetPlayer,targetSlot.getName()});    } else {      item.setPosition(player.getX(),player.getY());      zone.add(item,player);      onGround=true;      new ItemLogger().equipAction(source,item,new String[]{"slot",sourcePlayer,"trade"},new String[]{"ground",zone.getName(),player.getX() + " " + player.getY()});    }  }  items.clear();  return !onGround;}  }
class C{  @SuppressWarnings("unchecked") @Override public void paintIcon(SynthContext context,Graphics g,int x,int y,int w,int h){  SeaGlassPainter painter=null;  if (context != null) {    painter=(SeaGlassPainter)context.getStyle().get(context,key);  }  if (painter == null) {    painter=(SeaGlassPainter)UIManager.get(prefix + "[Enabled]." + key);  }  if (painter == null) {    painter=(SeaGlassPainter)UIManager.get(prefix + "." + key);  }  if (painter != null && context != null) {    JComponent c=context.getComponent();    boolean rotate=false;    boolean flip=false;    int translatex=0;    int translatey=0;    if (c instanceof JToolBar) {      JToolBar toolbar=(JToolBar)c;      rotate=toolbar.getOrientation() == JToolBar.VERTICAL;      flip=!toolbar.getComponentOrientation().isLeftToRight();      Object o=SeaGlassLookAndFeel.resolveToolbarConstraint(toolbar);      if (toolbar.getBorder() instanceof UIResource) {        if (o == BorderLayout.SOUTH) {          translatey=1;        } else         if (o == BorderLayout.EAST) {          translatex=1;        }      }    }    if (g instanceof Graphics2D) {      Graphics2D gfx=(Graphics2D)g;      gfx.translate(x,y);      gfx.translate(translatex,translatey);      if (rotate) {        gfx.rotate(Math.toRadians(90));        gfx.translate(0,-w);        painter.paint(gfx,context.getComponent(),h,w);        gfx.translate(0,w);        gfx.rotate(Math.toRadians(-90));      } else       if (flip) {        gfx.scale(-1,1);        gfx.translate(-w,0);        painter.paint(gfx,context.getComponent(),w,h);        gfx.translate(w,0);        gfx.scale(-1,1);      } else {        painter.paint(gfx,context.getComponent(),w,h);      }      gfx.translate(-translatex,-translatey);      gfx.translate(-x,-y);    } else {      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);      Graphics2D gfx=img.createGraphics();      if (rotate) {        gfx.rotate(Math.toRadians(90));        gfx.translate(0,-w);        painter.paint(gfx,context.getComponent(),h,w);      } else       if (flip) {        gfx.scale(-1,1);        gfx.translate(-w,0);        painter.paint(gfx,context.getComponent(),w,h);      } else {        painter.paint(gfx,context.getComponent(),w,h);      }      gfx.dispose();      g.drawImage(img,x,y,null);      img=null;    }  }}  }
class C{  protected void statementLogError(String message,Throwable error){  Logger.sqlErrorLog(message,error);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String stripFilenameExtension(String path){  if (path == null) {    return null;  }  int extIndex=path.lastIndexOf(EXTENSION_SEPARATOR);  if (extIndex == -1) {    return path;  }  int folderIndex=path.lastIndexOf(FOLDER_SEPARATOR);  if (folderIndex > extIndex) {    return path;  }  return path.substring(0,extIndex);}  }
class C{  private ProfileSplitterBolt createBolt(String profilerConfig) throws IOException {  ProfileSplitterBolt bolt=new ProfileSplitterBolt("zookeeperURL");  bolt.setCuratorFramework(client);  bolt.setTreeCache(cache);  bolt.getConfigurations().updateProfilerConfig(profilerConfig.getBytes("UTF-8"));  bolt.setExecutor(new DefaultStellarExecutor());  bolt.prepare(new HashMap<>(),topologyContext,outputCollector);  return bolt;}  }
class C{  public boolean isAllowed(Class<?> c,String displayName){  boolean result;  HashSet<String> list;  result=true;  list=m_Allowed.get(c);  if (list != null) {    result=list.contains(displayName);  }  return result;}  }
class C{  public ServiceEndpoint(String name){  ValidateUtil.validateNotEmpty(name,"name");  this.name=name;}  }
class C{  protected void engineInit(Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {  char[] passwdChars;  byte[] salt=null;  int iCount=0;  if (key instanceof javax.crypto.interfaces.PBEKey) {    javax.crypto.interfaces.PBEKey pbeKey=(javax.crypto.interfaces.PBEKey)key;    passwdChars=pbeKey.getPassword();    salt=pbeKey.getSalt();    iCount=pbeKey.getIterationCount();  } else   if (key instanceof SecretKey) {    byte[] passwdBytes=key.getEncoded();    if ((passwdBytes == null) || !(key.getAlgorithm().regionMatches(true,0,"PBE",0,3))) {      throw new InvalidKeyException("Missing password");    }    passwdChars=new char[passwdBytes.length];    for (int i=0; i < passwdChars.length; i++) {      passwdChars[i]=(char)(passwdBytes[i] & 0x7f);    }  } else {    throw new InvalidKeyException("SecretKey of PBE type required");  }  if (params == null) {    if ((salt == null) || (iCount == 0)) {      throw new InvalidAlgorithmParameterException("PBEParameterSpec required for salt and iteration count");    }  } else   if (!(params instanceof PBEParameterSpec)) {    throw new InvalidAlgorithmParameterException("PBEParameterSpec type required");  } else {    PBEParameterSpec pbeParams=(PBEParameterSpec)params;    if (salt != null) {      if (!Arrays.equals(salt,pbeParams.getSalt())) {        throw new InvalidAlgorithmParameterException("Inconsistent value of salt between key and params");      }    } else {      salt=pbeParams.getSalt();    }    if (iCount != 0) {      if (iCount != pbeParams.getIterationCount()) {        throw new InvalidAlgorithmParameterException("Different iteration count between key and params");      }    } else {      iCount=pbeParams.getIterationCount();    }  }  if (salt.length < 8) {    throw new InvalidAlgorithmParameterException("Salt must be at least 8 bytes long");  }  if (iCount <= 0) {    throw new InvalidAlgorithmParameterException("IterationCount must be a positive number");  }  byte[] derivedKey=PKCS12PBECipherCore.derive(passwdChars,salt,iCount,engineGetMacLength(),PKCS12PBECipherCore.MAC_KEY);  SecretKey cipherKey=new SecretKeySpec(derivedKey,"HmacSHA1");  super.engineInit(cipherKey,null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.Vector rv=new java.util.Vector();  rv.add(Sage.rez("Default"));  if (Sage.WINDOWS_OS)   rv.addAll(java.util.Arrays.asList(DShowCaptureDevice.getDevicesInCategory0(DShowCaptureManager.AUDIO_RENDERER_CATEGORY_GUID)));  return rv;}  }
class C{  protected void printOnewayArrow(float x,float y,double angle){  imageBdr.setColor(UColor.GRAY);  imageBdr.setLineStyle(false,displayFactorSym);  imageBdr.setAreaFilled(false);  drawArrowLine(x,y,displayFactorSym * 10f,angle);  drawArrowLine(x,y,displayFactorSym * 7f,angle - Math.PI / 4);  drawArrowLine(x,y,displayFactorSym * 7f,angle + Math.PI / 4);}  }
class C{  public LTMatrix(String fname) throws FileNotFoundException, IOException {  super(fname);}  }
class C{  public Control createControl(final Composite parent){  GridData gridData=null;  gridData=new GridData(SWT.FILL,SWT.FILL,true,true);  folder=new TabFolder(parent,SWT.NONE);  folder.setLayoutData(gridData);  final TabItem standard=new TabItem(folder,SWT.NONE);  standard.setText("Standard CRS");  final Control stdCRS=createStandardCRSControl(folder);  standard.setControl(stdCRS);  final TabItem custom=new TabItem(folder,SWT.NONE);  custom.setText("Custom CRS");  final Control cstCRS=createCustomCRSControl(folder);  custom.setControl(cstCRS);  return folder;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  UserDBDao.createTable(db,ifNotExists);  DeviceDBDao.createTable(db,ifNotExists);  GroupDBDao.createTable(db,ifNotExists);  GroupLocalDeviceDBDao.createTable(db,ifNotExists);  GroupCloudDeviceDBDao.createTable(db,ifNotExists);  GroupRemoveDeviceDBDao.createTable(db,ifNotExists);  ApDBDao.createTable(db,ifNotExists);  DownloadIdValueDBDao.createTable(db,ifNotExists);  GenericDataDirectoryDBDao.createTable(db,ifNotExists);  GenericDataDBDao.createTable(db,ifNotExists);}  }
class C{  public double weightedRecall(){  return weightedTruePositiveRate();}  }
class C{  private void writeToTableAndCsv(TabularResultData metricsTable,String type,String metricName,String metricValue,StringBuilder csvBuilder){  metricsTable.accumulate(CliStrings.SHOW_METRICS__TYPE__HEADER,type);  metricsTable.accumulate(CliStrings.SHOW_METRICS__METRIC__HEADER,metricName);  metricsTable.accumulate(CliStrings.SHOW_METRICS__VALUE__HEADER,metricValue);  if (csvBuilder != null) {    csvBuilder.append(type);    csvBuilder.append(',');    csvBuilder.append(metricName);    csvBuilder.append(',');    csvBuilder.append(metricValue);    csvBuilder.append('\n');  }}  }
class C{  public void addListener(final IDataEnteredListener listener){  enterlisteners.addListener(listener);}  }
class C{  public Matrix4x3d rotateXYZ(double angleX,double angleY,double angleZ){  return rotateXYZ(angleX,angleY,angleZ,this);}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  public void elementDecl(String name,String contentModel,Augmentations augs) throws XNIException {  try {    if (fDeclHandler != null) {      fDeclHandler.elementDecl(name,contentModel);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public JAMonArrayComparator(int sortCol,boolean naturalOrder){  addCompareCol(sortCol,naturalOrder);}  }
class C{  protected String cleanUpName(String name){  return name.replace('\\','/').trim();}  }
class C{  public String[] readLine(BufferedReader in,int expectedNumberOfColumns) throws IOException {  String line=null;  while (line == null) {    line=in.readLine();    if (line == null) {      break;    }    if (trimLines) {      line=line.trim();    }    if (commentChars != null) {      for (int c=0; c < commentChars.length; c++) {        if (line.indexOf(commentChars[c]) >= 0) {          line=line.substring(0,line.indexOf(commentChars[c]));        }      }    }    if (line.trim().length() == 0) {      line=null;    }  }  if (line == null) {    return null;  }  String[] columns=null;  if (useQuotes) {    columns=Tools.quotedSplit(line,separatorPattern,quoteChar,escapeChar);  } else {    columns=separatorPattern.split(line,-1);  }  if (expectedNumberOfColumns != -1) {    if (columns.length < expectedNumberOfColumns) {      if (skipErrorLines) {        LogService.getRoot().log(Level.WARNING,"com.rapidminer.example.table.RapidMinerLineReader.possible_data_format_error",new Object[]{lineNumber,columns.length,expectedNumberOfColumns});        return readLine(in,expectedNumberOfColumns);      } else {        throw new IOException("Data format error in line " + lineNumber + ": the line does not provide the expected number of columns (was: "+ columns.length+ ", expected: "+ expectedNumberOfColumns+ ")! Stop reading...");      }    } else     if (columns.length > expectedNumberOfColumns) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.example.table.RapidMinerLineReader.possible_data_format_error",new Object[]{lineNumber,columns.length,expectedNumberOfColumns});    }  }  lineNumber++;  return columns;}  }
class C{  public Vector2 scale(float scale){  return Vector2.scale(this,scale);}  }
class C{  @Unpreemptible public static int findCatchBlockForInstruction(int[] eTable,Offset instructionOffset,RVMType exceptionType){  for (int i=0, n=eTable.length; i < n; i+=4) {    if (instructionOffset.sGT(Offset.fromIntSignExtend(eTable[i + TRY_START])) && instructionOffset.sLE(Offset.fromIntSignExtend(eTable[i + TRY_END]))) {      RVMType lhs=RVMType.getType(eTable[i + EX_TYPE]);      if (lhs == exceptionType) {        return eTable[i + CATCH_START];      } else       if (lhs.isInitialized()) {        TIB rhsTIB=exceptionType.getTypeInformationBlock();        if (DynamicTypeCheck.instanceOfClass(lhs.asClass(),rhsTIB)) {          return eTable[i + CATCH_START];        }      }    }  }  return -1;}  }
class C{  public void doTest(String folderName,Class<? extends LocalInspectionTool> clazz,boolean onTheFly){  LocalInspectionEP[] extensions=Extensions.getExtensions(LocalInspectionEP.LOCAL_INSPECTION);  for (  LocalInspectionEP extension : extensions) {    if (extension.implementationClass.equals(clazz.getCanonicalName())) {      extension.enabledByDefault=true;      InspectionProfileEntry instance=extension.instantiateTool();      super.doTest(folderName,onTheFly ? withOnTheFly((LocalInspectionTool)instance) : (LocalInspectionTool)instance);      return;    }  }  Assert.fail("Inspection not found for type " + clazz.getName());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInOut[").append(get_ID()).append("-").append(getDocumentNo()).append(",DocStatus=").append(getDocStatus()).append("]");  return sb.toString();}  }
class C{  public TLAToken Clone(){  TLAToken result=new TLAToken(this.string,this.column,this.type);  result.source=this.source;  result.beginSubst=(Vector)this.beginSubst.clone();  result.endSubst=(Vector)this.endSubst.clone();  result.isAppended=this.isAppended;  return result;}  }
class C{  @Override public void discover(AccessProfile accessProfile) throws BaseCollectionException {  URI storageSystemId=null;  StorageSystem storageSystem=null;  String detailedStatusMessage="Unknown Status";  long startTime=System.currentTimeMillis();  _logger.info("ECSCommunicationInterface:discover Access Profile Details :" + accessProfile.toString());  try {    storageSystemId=accessProfile.getSystemId();    storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemId);    ECSApi ecsApi=getECSDevice(storageSystem);    String authToken=ecsApi.getAuthToken();    if (authToken.isEmpty()) {      throw ECSException.exceptions.discoverFailed("Could not obtain authToken");    }    if (!ecsApi.isSystemAdmin()) {      _logger.error("User:" + accessProfile.getUserName() + "dont have privileges to access Elastic Cloud Storage: "+ accessProfile.getIpAddress());      _logger.error("Discovery failed");      throw ECSException.exceptions.discoverFailed("User is not ECS System Admin");    }    String ecsVersion=ecsApi.getECSVersion();    String ecsSerialNumber=ecsApi.getECSSerialNum();    String nativeGuid=NativeGUIDGenerator.generateNativeGuid(DiscoveredDataObject.Type.ecs.toString(),ecsSerialNumber);    storageSystem.setNativeGuid(nativeGuid);    storageSystem.setSerialNumber(ecsSerialNumber);    storageSystem.setFirmwareVersion(ecsVersion);    storageSystem.setUsername(accessProfile.getUserName());    storageSystem.setPassword(accessProfile.getPassword());    storageSystem.setPortNumber(accessProfile.getPortNumber());    storageSystem.setIpAddress(accessProfile.getIpAddress());    storageSystem.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    storageSystem.setReachableStatus(true);    storageSystem.setInactive(false);    _dbClient.persistObject(storageSystem);    Map<String,List<StoragePool>> allPools=new HashMap<String,List<StoragePool>>();    List<StoragePool> newPools=new ArrayList<StoragePool>();    List<StoragePool> existingPools=new ArrayList<StoragePool>();    StoragePool storagePool;    List<ECSStoragePool> ecsStoragePools=ecsApi.getStoragePools();    for (    ECSStoragePool ecsPool : ecsStoragePools) {      storagePool=null;      String storagePoolNativeGuid=NativeGUIDGenerator.generateNativeGuid(storageSystem,ecsPool.getId(),NativeGUIDGenerator.POOL);      @SuppressWarnings("deprecation") List<URI> poolURIs=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePoolByNativeGuidConstraint(storagePoolNativeGuid));      for (      URI poolUri : poolURIs) {        StoragePool pool=_dbClient.queryObject(StoragePool.class,poolUri);        if (!pool.getInactive() && pool.getStorageDevice().equals(storageSystemId)) {          storagePool=pool;          break;        }      }      if (storagePool == null) {        storagePool=new StoragePool();        storagePool.setId(URIUtil.createId(StoragePool.class));        storagePool.setNativeId(ecsPool.getId());        storagePool.setNativeGuid(storagePoolNativeGuid);        storagePool.setLabel(storagePoolNativeGuid);        storagePool.setPoolClassName("ECS Pool");        storagePool.setStorageDevice(storageSystem.getId());        StringSet protocols=new StringSet();        protocols.add("S3");        protocols.add("Swift");        protocols.add("Atmos");        storagePool.setProtocols(protocols);        storagePool.setPoolName(ecsPool.getName());        storagePool.setOperationalStatus(StoragePool.PoolOperationalStatus.READY.toString());        storagePool.setPoolServiceType(PoolServiceType.object.toString());        storagePool.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());        storagePool.setSupportedResourceTypes(StoragePool.SupportedResourceTypes.THICK_ONLY.toString());        storagePool.setFreeCapacity(ecsPool.getFreeCapacity() * BYTESCONVERTER * BYTESCONVERTER);        storagePool.setTotalCapacity(ecsPool.getTotalCapacity() * BYTESCONVERTER * BYTESCONVERTER);        storagePool.setInactive(false);        storagePool.setDataCenters(ecsPool.getTotalDataCenters());        _logger.info("Creating new ECS storage pool using NativeId : {}",storagePoolNativeGuid);        storagePool.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());        storagePool.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());        newPools.add(storagePool);      } else {        existingPools.add(storagePool);      }    }    allPools.put(NEW,newPools);    allPools.put(EXISTING,existingPools);    _logger.info("No of newly discovered pools {}",allPools.get(NEW).size());    _logger.info("No of existing discovered pools {}",allPools.get(EXISTING).size());    if (!allPools.get(NEW).isEmpty()) {      _dbClient.createObject(allPools.get(NEW));    }    if (!allPools.get(EXISTING).isEmpty()) {      _dbClient.persistObject(allPools.get(EXISTING));    }    HashMap<String,List<StoragePort>> storagePorts=new HashMap<String,List<StoragePort>>();    List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();    List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();    List<ECSStoragePort> ecsStoragePorts=ecsApi.getStoragePort(storageSystem.getIpAddress());    for (    ECSStoragePort ecsPort : ecsStoragePorts) {      StoragePort storagePort=null;      String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(storageSystem,ecsPort.getIpAddress(),NativeGUIDGenerator.PORT);      @SuppressWarnings("deprecation") List<URI> portURIs=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid));      for (      URI portUri : portURIs) {        StoragePort port=_dbClient.queryObject(StoragePort.class,portUri);        if (port.getStorageDevice().equals(storageSystemId) && !port.getInactive()) {          storagePort=port;          break;        }      }      if (storagePort == null) {        storagePort=new StoragePort();        storagePort.setId(URIUtil.createId(StoragePort.class));        storagePort.setTransportType("IP");        storagePort.setNativeGuid(portNativeGuid);        storagePort.setLabel(portNativeGuid);        storagePort.setStorageDevice(storageSystemId);        storagePort.setPortNetworkId(ecsPort.getIpAddress().toLowerCase());        storagePort.setPortName(ecsPort.getName());        storagePort.setLabel(ecsPort.getName());        storagePort.setPortGroup(ecsPort.getName());        storagePort.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());        storagePort.setOperationalStatus(StoragePort.OperationalStatus.OK.toString());        _logger.info("Creating new storage port using NativeGuid : {}",portNativeGuid);        newStoragePorts.add(storagePort);      } else {        existingStoragePorts.add(storagePort);      }      storagePort.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      storagePort.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    }    storagePorts.put(NEW,newStoragePorts);    storagePorts.put(EXISTING,existingStoragePorts);    _logger.info("No of newly discovered ports {}",storagePorts.get(NEW).size());    _logger.info("No of existing discovered ports {}",storagePorts.get(EXISTING).size());    if (!storagePorts.get(NEW).isEmpty()) {      _dbClient.createObject(storagePorts.get(NEW));    }    if (!storagePorts.get(EXISTING).isEmpty()) {      _dbClient.persistObject(storagePorts.get(EXISTING));    }    List<ObjectNamespace> allNamespaces=new ArrayList<ObjectNamespace>();    Map<String,List<ObjectNamespace>> bothNamespaces=discoverNamespaces(storageSystem);    _logger.info("No of newly discovered namespaces {}",bothNamespaces.get(NEW).size());    _logger.info("No of existing discovered namespaces {}",bothNamespaces.get(EXISTING).size());    if (bothNamespaces != null && !bothNamespaces.get(NEW).isEmpty()) {      allNamespaces.addAll(bothNamespaces.get(NEW));      _dbClient.createObject(bothNamespaces.get(NEW));    }    if (bothNamespaces != null && !bothNamespaces.get(EXISTING).isEmpty()) {      allNamespaces.addAll(bothNamespaces.get(EXISTING));      _dbClient.updateObject(bothNamespaces.get(EXISTING));    }    DiscoveryUtils.checkNamespacesNotVisible(allNamespaces,_dbClient,storageSystemId);    _completer.statusPending(_dbClient,"Completed namespace discovery");    detailedStatusMessage=String.format("Discovery completed successfully for ECS: %s",storageSystemId.toString());  } catch (  Exception e) {    if (storageSystem != null) {      cleanupDiscovery(storageSystem);    }    detailedStatusMessage=String.format("Discovery failed for Storage System ECS %s: because %s",storageSystemId.toString(),e.getLocalizedMessage());    _logger.error(detailedStatusMessage,e);    throw new ECSCollectionException(false,ServiceCode.DISCOVERY_ERROR,null,detailedStatusMessage,null,null);  } finally {    if (storageSystem != null) {      try {        storageSystem.setLastDiscoveryStatusMessage(detailedStatusMessage);        _dbClient.persistObject(storageSystem);      } catch (      DatabaseException ex) {        _logger.error("Error while persisting object to DB",ex);      }    }    long totalTime=System.currentTimeMillis() - startTime;    _logger.info(String.format("Discovery of ECS Storage System %s took %f seconds",accessProfile.getIpAddress(),(double)totalTime / (double)1000));  }}  }
class C{  public int hashCode(){  return (getName().hashCode() ^ mask);}  }
class C{  public TemplateModelIterator iterator() throws TemplateModelException {synchronized (this) {    if (accessed) {      throw new TemplateModelException("This collection is stateful and can not be iterated over the" + " second time.");    }    accessed=true;  }  return this;}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SPINStatistics(String label,String queryText,long duration,long startTime,Node context){  this.context=context;  this.duration=duration;  this.label=label;  this.queryText=queryText;  this.startTime=startTime;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:45.940 -0500",hash_original_method="DEDF781BC2901F5DB53B414F0A999CAB",hash_generated_method="BD3934C133084C4C709DEBF2A7930A64") public ContentObserver(Handler handler){  mHandler=handler;}  }
class C{  public ChunkRuleWithContext(String left_context_tag_pattern,String chunk_tag_pattern,String right_context_tag_pattern,String descr){  super(x.Regex("(?<left>" + ChunkerStatic.tag_pattern2re_pattern(left_context_tag_pattern) + ")(?<chunk>"+ ChunkerStatic.tag_pattern2re_pattern(chunk_tag_pattern)+ ")(?<right>"+ ChunkerStatic.tag_pattern2re_pattern(right_context_tag_pattern)+ ")"+ ChunkString.IN_CHINK_PATTERN),"${left}{${chunk}}${right}",descr);  x.Regex(ChunkerStatic.tag_pattern2re_pattern(left_context_tag_pattern));  x.Regex(ChunkerStatic.tag_pattern2re_pattern(chunk_tag_pattern));  x.Regex(ChunkerStatic.tag_pattern2re_pattern(right_context_tag_pattern));  this._left_context_tag_pattern=left_context_tag_pattern;  this._chunk_tag_pattern=chunk_tag_pattern;  this._right_context_tag_pattern=right_context_tag_pattern;}  }
class C{  public void testDuplicatesInIndex() throws IOException {  indexFiles("src\\test\\resources\\images","index-large-new",0,true);  indexFiles("src\\test\\resources\\images","index-large-new",0,false);  indexFiles("src\\test\\resources\\images","index-large-new",0,false);  ImageSearcher s=searchers[0];  IndexReader reader=DirectoryReader.open(FSDirectory.open(new File("index-large-new")));  Document query=reader.document(0);  ImageSearchHits hits=s.search(query,reader);  FileUtils.saveImageResultsToPng("duplicate_",hits,query.getValues(DocumentBuilder.FIELD_NAME_IDENTIFIER)[0]);}  }
class C{  public void onEvent(Event e){  log.info("Cmd=" + e.getTarget().getId());  if (e.getTarget().getId().equals(ConfirmPanel.A_CANCEL)) {    dispose();    return;  } else   if (e.getTarget() instanceof Tab) {    int index=tabbedPane.getSelectedIndex();    genForm.setSelectionActive(index == 0);    return;  }  genForm.validate();}  }
class C{  void handle8BitRestrictions(Instruction s){  for (Enumeration<Operand> me=s.getMemoryOperands(); me.hasMoreElements(); ) {    MemoryOperand mop=(MemoryOperand)me.nextElement();    if (mop.size == 1) {      for (Enumeration<Operand> e2=s.getRootOperands(); e2.hasMoreElements(); ) {        Operand rootOp=e2.nextElement();        if (rootOp.isRegister()) {          restrictTo8Bits(rootOp.asRegister().getRegister());        }      }    }  }}  }
class C{  public LambdaCounter(Logger logger,int logFrequency,String message){  this(logger,0,logFrequency,message);}  }
class C{  protected void writeElement(Element element) throws IOException {  if (newLineAfterNTags == -1) {    lazyInitNewLinesAfterNTags();  }  if (newLineAfterNTags > 0) {    if ((tagsOuput > 0) && ((tagsOuput % newLineAfterNTags) == 0)) {      super.writer.write(lineSeparator);    }  }  tagsOuput++;  String qualifiedName=element.getQualifiedName();  String saveLastText=lastText;  int size=element.nodeCount();  if (isPreformattedTag(qualifiedName)) {    OutputFormat currentFormat=getOutputFormat();    boolean saveNewlines=currentFormat.isNewlines();    boolean saveTrimText=currentFormat.isTrimText();    String currentIndent=currentFormat.getIndent();    formatStack.push(new FormatState(saveNewlines,saveTrimText,currentIndent));    try {      super.writePrintln();      if ((saveLastText.trim().length() == 0) && (currentIndent != null) && (currentIndent.length() > 0)) {        super.writer.write(justSpaces(saveLastText));      }      currentFormat.setNewlines(false);      currentFormat.setTrimText(false);      currentFormat.setIndent("");      super.writeElement(element);    }  finally {      FormatState state=(FormatState)formatStack.pop();      currentFormat.setNewlines(state.isNewlines());      currentFormat.setTrimText(state.isTrimText());      currentFormat.setIndent(state.getIndent());    }  } else {    super.writeElement(element);  }}  }
class C{  @Inline public boolean fastIsLive(ObjectReference object){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!defrag.inDefrag());  return ObjectHeader.testMarkState(object,markState);}  }
class C{  public boolean doWindowDeActivated(){  return true;}  }
class C{  public void testTomasFa_2() throws ParseException {  checkIntersectionNone("LINESTRING (-5.9 163.1, 76.1 250.7)","LINESTRING (14.6 185.0, 96.6 272.6)");}  }
class C{  public boolean isUploading(Account account,OCFile file){  if (account == null || file == null)   return false;  String targetKey=buildRemoteName(account,file);synchronized (mPendingUploads) {    if (file.isFolder()) {      Iterator<String> it=mPendingUploads.keySet().iterator();      boolean found=false;      while (it.hasNext() && !found) {        found=it.next().startsWith(targetKey);      }      return found;    } else {      return (mPendingUploads.containsKey(targetKey));    }  }}  }
class C{  public final boolean equals(final Object aLog){  LogFile oneCell=(LogFile)aLog;  return ((getManufacturer().equals(oneCell.getManufacturer())) && (getModel().equals(oneCell.getModel())) && (getRevision().equals(oneCell.getRevision()))&& (getSwid().equals(oneCell.getSwid()))&& (getSwVersion().equals(oneCell.getSwVersion())));}  }
class C{  @Override public String toString(){  return ("poly(" + degree + ")");}  }
class C{  public static Properties xmlToProperties(InputStream in,Locale locale,Properties properties) throws IOException, InvalidPropertiesFormatException {  if (in == null) {    throw new IllegalArgumentException("InputStream cannot be null");  }  Document doc=null;  try {    doc=UtilXml.readXmlDocument(in,false,"XML Properties file");    in.close();  } catch (  Exception e) {    Debug.logWarning(e,"XML Locale file for locale " + locale + " could not be loaded.",module);    in.close();    return null;  }  Element resourceElement=doc.getDocumentElement();  List<? extends Element> propertyList=UtilXml.childElementList(resourceElement,"property");  if (UtilValidate.isNotEmpty(propertyList)) {    if (locale == null) {      throw new IllegalArgumentException("locale cannot be null");    }    String localeString=locale.toString();    String correctedLocaleString=localeString.replace('_','-');    for (    Element property : propertyList) {      Element value=UtilXml.firstChildElement(property,"value","xml:lang",correctedLocaleString);      if (value == null) {        value=UtilXml.firstChildElement(property,"value","xml:lang",localeString);      }      if (value != null) {        if (properties == null) {          properties=new Properties();        }        String valueString=UtilXml.elementValue(value);        if (valueString != null) {          properties.put(property.getAttribute("key"),valueString);        }      }    }    return properties;  }  propertyList=UtilXml.childElementList(resourceElement,"entry");  if (UtilValidate.isEmpty(propertyList)) {    throw new InvalidPropertiesFormatException("XML properties file invalid or empty");  }  for (  Element property : propertyList) {    String value=UtilXml.elementValue(property);    if (value != null) {      if (properties == null) {        properties=new Properties();      }      properties.put(property.getAttribute("key"),value);    }  }  return properties;}  }
class C{  public ConnectionGroupTree(UserContext userContext,ConnectionGroup root,List<ObjectPermission.Type> permissions) throws GuacamoleException {  this.rootAPIGroup=new APIConnectionGroup(root);  retrievedGroups.put(root.getIdentifier(),this.rootAPIGroup);  User self=userContext.self();  this.connectionPermissions=self.getConnectionPermissions();  this.sharingProfilePermissions=self.getSharingProfilePermissions();  this.connectionDirectory=userContext.getConnectionDirectory();  this.connectionGroupDirectory=userContext.getConnectionGroupDirectory();  this.sharingProfileDirectory=userContext.getSharingProfileDirectory();  addConnectionGroupDescendants(Collections.singleton(root),permissions);}  }
class C{  public boolean lockAddress(final long addr){  m_store.lockAddress(decodeAddr(addr));  return true;}  }
class C{  private PubsubFuture<Subscription> createSubscription(final String canonicalSubscriptionName,final Subscription subscription){  validateCanonicalSubscription(canonicalSubscriptionName);  return put("create subscription",canonicalSubscriptionName,subscription,Subscription.class);}  }
class C{  private void processElements(SBJob parentJob,SBJob job) throws SBException {  SBJobApp app=job.getApp();  if (app.isWorkflow()) {    SBWorkflow workflow=(SBWorkflow)app;    if (CollectionUtils.isEmpty(workflow.getDataLinks())) {      createDataLinks(workflow);    }  }  processPorts(parentJob,job,app.getInputs());  processPorts(parentJob,job,app.getOutputs());}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("jo1x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jo1xStandaloneLocalConfigurationCapability.class);}  }
class C{  private boolean filesystemHasActiveReplication(FileShare fs,StringBuffer notSuppReasonBuff,String deleteType,boolean forceDelete){  if (fs.getPersonality() != null && fs.getPersonality().equalsIgnoreCase(PersonalityTypes.TARGET.name())) {    notSuppReasonBuff.append(String.format("File system - %s given in request is an active Target file system.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return true;  }  if (forceDelete == false || FileControllerConstants.DeleteTypeEnum.VIPR_ONLY.toString().equalsIgnoreCase(deleteType)) {    if (fs.getMirrorfsTargets() != null && !fs.getMirrorfsTargets().isEmpty()) {      notSuppReasonBuff.append(String.format("File system %s given in request has active target file systems.",fs.getLabel()));      _log.info(notSuppReasonBuff.toString());      return true;    }  }  return false;}  }
class C{  public Y isNotNull(){  return add(" IS NOT NULL");}  }
class C{  @JsfTest(JsfVersion.JSF_2_2_1) @Test public void testValidateEmptyFields() throws Exception {  HtmlPage page=webClient.getPage(webUrl + "faces/index.xhtml");  if (page.getWebResponse().getResponseHeaderValue("Server") == null || !page.getWebResponse().getResponseHeaderValue("Server").startsWith("Apache-Coyote")) {    page=webClient.getPage(webUrl + "faces/validateEmptyFields.xhtml");    HtmlSubmitInput button=(HtmlSubmitInput)page.getElementById("form:submitButton");    page=button.click();    assertTrue(page.asXml().contains("We got called!"));  }}  }
class C{  public void startApplication() throws YarnException, IOException {  Class<?>[] defaultClasses;  if (applicationType.equals(YARN_APPLICATION_TYPE)) {    if (UserGroupInformation.isSecurityEnabled()) {      defaultClasses=APEX_SECURITY_CLASSES;    } else {      defaultClasses=APEX_CLASSES;    }  } else {    throw new IllegalStateException(applicationType + " is not a valid application type.");  }  LinkedHashSet<String> localJarFiles=findJars(dag,defaultClasses);  if (resources != null) {    localJarFiles.addAll(resources);  }  YarnClusterMetrics clusterMetrics=yarnClient.getYarnClusterMetrics();  LOG.info("Got Cluster metric info from ASM, numNodeManagers={}",clusterMetrics.getNumNodeManagers());  List<QueueUserACLInfo> listAclInfo=yarnClient.getQueueAclsInfo();  for (  QueueUserACLInfo aclInfo : listAclInfo) {    for (    QueueACL userAcl : aclInfo.getUserAcls()) {      LOG.info("User ACL Info for Queue queueName={}, userAcl={}",aclInfo.getQueueName(),userAcl.name());    }  }  YarnClientApplication newApp=yarnClient.createApplication();  appId=newApp.getNewApplicationResponse().getApplicationId();  int maxMem=newApp.getNewApplicationResponse().getMaximumResourceCapability().getMemory();  LOG.info("Max mem capability of resources in this cluster " + maxMem);  int amMemory=dag.getMasterMemoryMB();  if (amMemory > maxMem) {    LOG.info("AM memory specified above max threshold of cluster. Using max value, specified={}, max={}",amMemory,maxMem);    amMemory=maxMem;  }  if (dag.getAttributes().get(LogicalPlan.APPLICATION_ID) == null) {    dag.setAttribute(LogicalPlan.APPLICATION_ID,appId.toString());  }  LOG.info("Setting up application submission context for ASM");  ApplicationSubmissionContext appContext=Records.newRecord(ApplicationSubmissionContext.class);  appContext.setApplicationId(appId);  appContext.setApplicationName(dag.getValue(LogicalPlan.APPLICATION_NAME));  appContext.setApplicationType(this.applicationType);  if (YARN_APPLICATION_TYPE.equals(this.applicationType)) {  }  ContainerLaunchContext amContainer=Records.newRecord(ContainerLaunchContext.class);  if (UserGroupInformation.isSecurityEnabled()) {    Credentials credentials=new Credentials();    String tokenRenewer=conf.get(YarnConfiguration.RM_PRINCIPAL);    if (tokenRenewer == null || tokenRenewer.length() == 0) {      throw new IOException("Can't get Master Kerberos principal for the RM to use as renewer");    }    try (FileSystem fs=StramClientUtils.newFileSystemInstance(conf)){      final Token<?>[] tokens=fs.addDelegationTokens(tokenRenewer,credentials);      if (tokens != null) {        for (        Token<?> token : tokens) {          LOG.info("Got dt for " + fs.getUri() + "; "+ token);        }      }    }     new ClientRMHelper(yarnClient,conf).addRMDelegationToken(tokenRenewer,credentials);    DataOutputBuffer dob=new DataOutputBuffer();    credentials.writeTokenStorageToStream(dob);    ByteBuffer fsTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());    amContainer.setTokens(fsTokens);  }  Map<String,LocalResource> localResources=new HashMap<>();  try (FileSystem fs=StramClientUtils.newFileSystemInstance(conf)){    Path appsBasePath=new Path(StramClientUtils.getDTDFSRootDir(fs,conf),StramClientUtils.SUBDIR_APPS);    Path appPath;    String configuredAppPath=dag.getValue(LogicalPlan.APPLICATION_PATH);    if (configuredAppPath == null) {      appPath=new Path(appsBasePath,appId.toString());    } else {      appPath=new Path(configuredAppPath);    }    String libJarsCsv=copyFromLocal(fs,appPath,localJarFiles.toArray(new String[]{}));    LOG.info("libjars: {}",libJarsCsv);    dag.getAttributes().put(Context.DAGContext.LIBRARY_JARS,libJarsCsv);    LaunchContainerRunnable.addFilesToLocalResources(LocalResourceType.FILE,libJarsCsv,localResources,fs);    if (archives != null) {      String[] localFiles=archives.split(",");      String archivesCsv=copyFromLocal(fs,appPath,localFiles);      LOG.info("archives: {}",archivesCsv);      dag.getAttributes().put(LogicalPlan.ARCHIVES,archivesCsv);      LaunchContainerRunnable.addFilesToLocalResources(LocalResourceType.ARCHIVE,archivesCsv,localResources,fs);    }    if (files != null) {      String[] localFiles=files.split(",");      String filesCsv=copyFromLocal(fs,appPath,localFiles);      LOG.info("files: {}",filesCsv);      dag.getAttributes().put(LogicalPlan.FILES,filesCsv);      LaunchContainerRunnable.addFilesToLocalResources(LocalResourceType.FILE,filesCsv,localResources,fs);    }    dag.getAttributes().put(LogicalPlan.APPLICATION_PATH,appPath.toString());    StorageAgent agent=dag.getAttributes().get(OperatorContext.STORAGE_AGENT);    if (agent != null && agent instanceof StorageAgent.ApplicationAwareStorageAgent) {      ((StorageAgent.ApplicationAwareStorageAgent)agent).setApplicationAttributes(dag.getAttributes());    }    if (dag.getAttributes().get(OperatorContext.STORAGE_AGENT) == null) {      Path checkpointPath=new Path(appPath,LogicalPlan.SUBDIR_CHECKPOINTS);      dag.setAttribute(OperatorContext.STORAGE_AGENT,new AsyncFSStorageAgent(checkpointPath.toString(),conf));    }    if (dag.getAttributes().get(LogicalPlan.CONTAINER_OPTS_CONFIGURATOR) == null) {      dag.setAttribute(LogicalPlan.CONTAINER_OPTS_CONFIGURATOR,new BasicContainerOptConfigurator());    }    if (!log4jPropFile.isEmpty()) {      Path log4jSrc=new Path(log4jPropFile);      Path log4jDst=new Path(appPath,"log4j.props");      fs.copyFromLocalFile(false,true,log4jSrc,log4jDst);      FileStatus log4jFileStatus=fs.getFileStatus(log4jDst);      LocalResource log4jRsrc=Records.newRecord(LocalResource.class);      log4jRsrc.setType(LocalResourceType.FILE);      log4jRsrc.setVisibility(LocalResourceVisibility.APPLICATION);      log4jRsrc.setResource(ConverterUtils.getYarnUrlFromURI(log4jDst.toUri()));      log4jRsrc.setTimestamp(log4jFileStatus.getModificationTime());      log4jRsrc.setSize(log4jFileStatus.getLen());      localResources.put("log4j.properties",log4jRsrc);    }    if (originalAppId != null) {      Path origAppPath=new Path(appsBasePath,this.originalAppId);      LOG.info("Restart from {}",origAppPath);      copyInitialState(origAppPath);    }    Path cfgDst=new Path(appPath,LogicalPlan.SER_FILE_NAME);    FSDataOutputStream outStream=fs.create(cfgDst,true);    LogicalPlan.write(this.dag,outStream);    outStream.close();    Path launchConfigDst=new Path(appPath,LogicalPlan.LAUNCH_CONFIG_FILE_NAME);    outStream=fs.create(launchConfigDst,true);    conf.writeXml(outStream);    outStream.close();    LaunchContainerRunnable.addFileToLocalResources(LogicalPlan.SER_FILE_NAME,fs.getFileStatus(cfgDst),LocalResourceType.FILE,localResources);    amContainer.setLocalResources(localResources);    LOG.info("Set the environment for the application master");    Map<String,String> env=new HashMap<>();    StringBuilder classPathEnv=new StringBuilder("./*");    String classpath=conf.get(YarnConfiguration.YARN_APPLICATION_CLASSPATH);    for (    String c : StringUtils.isBlank(classpath) ? YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH : classpath.split(",")) {      if (c.equals("$HADOOP_CLIENT_CONF_DIR")) {        continue;      }      classPathEnv.append(':');      classPathEnv.append(c.trim());    }    env.put("CLASSPATH",classPathEnv.toString());    env.put("HADOOP_USER_NAME",UserGroupInformation.getLoginUser().getUserName());    amContainer.setEnvironment(env);    ArrayList<CharSequence> vargs=new ArrayList<>(30);    LOG.info("Setting up app master command");    vargs.add(javaCmd);    if (dag.isDebug()) {      vargs.add("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n");    }    if (dag.getMasterJVMOptions() != null) {      vargs.add(dag.getMasterJVMOptions());    }    Path tmpDir=new Path(ApplicationConstants.Environment.PWD.$(),YarnConfiguration.DEFAULT_CONTAINER_TEMP_DIR);    vargs.add("-Djava.io.tmpdir=" + tmpDir);    vargs.add("-Xmx" + (amMemory * 3 / 4) + "m");    vargs.add("-XX:+HeapDumpOnOutOfMemoryError");    vargs.add("-XX:HeapDumpPath=" + System.getProperty("java.io.tmpdir") + "/dt-heap-"+ appId.getId()+ ".bin");    vargs.add("-Dhadoop.root.logger=" + (dag.isDebug() ? "DEBUG" : "INFO") + ",RFA");    vargs.add("-Dhadoop.log.dir=" + ApplicationConstants.LOG_DIR_EXPANSION_VAR);    vargs.add(String.format("-D%s=%s",StreamingContainer.PROP_APP_PATH,dag.assertAppPath()));    if (dag.isDebug()) {      vargs.add("-Dlog4j.debug=true");    }    String loggersLevel=conf.get(StramUtils.DT_LOGGERS_LEVEL);    if (loggersLevel != null) {      vargs.add(String.format("-D%s=%s",StramUtils.DT_LOGGERS_LEVEL,loggersLevel));    }    vargs.add(StreamingAppMaster.class.getName());    vargs.add("1>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + "/AppMaster.stdout");    vargs.add("2>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + "/AppMaster.stderr");    StringBuilder command=new StringBuilder(9 * vargs.size());    for (    CharSequence str : vargs) {      command.append(str).append(" ");    }    LOG.info("Completed setting up app master command " + command.toString());    List<String> commands=new ArrayList<>();    commands.add(command.toString());    amContainer.setCommands(commands);    Resource capability=Records.newRecord(Resource.class);    capability.setMemory(amMemory);    appContext.setResource(capability);    appContext.setAMContainerSpec(amContainer);    Priority pri=Records.newRecord(Priority.class);    pri.setPriority(amPriority);    appContext.setPriority(pri);    appContext.setQueue(queueName);    appContext.setApplicationTags(tags);    String specStr=Objects.toStringHelper("Submitting application: ").add("name",appContext.getApplicationName()).add("queue",appContext.getQueue()).add("user",UserGroupInformation.getLoginUser()).add("resource",appContext.getResource()).toString();    LOG.info(specStr);    if (dag.isDebug()) {    }    yarnClient.submitApplication(appContext);  } }  }
class C{  private void init(){  if (getAxis() == View.Y_AXIS) {    children=parseRowColSpec(HTML.Attribute.ROWS);  } else {    children=parseRowColSpec(HTML.Attribute.COLS);  }  percentChildren=new int[children.length];  relativeChildren=new int[children.length];  absoluteChildren=new int[children.length];  for (int i=0; i < children.length; i++) {    percentChildren[i]=-1;    relativeChildren[i]=-1;    absoluteChildren[i]=-1;    if (children[i].endsWith("*")) {      if (children[i].length() > 1) {        relativeChildren[i]=Integer.parseInt(children[i].substring(0,children[i].length() - 1));        relativeTotals+=relativeChildren[i];      } else {        relativeChildren[i]=1;        relativeTotals+=1;      }    } else     if (children[i].indexOf('%') != -1) {      percentChildren[i]=parseDigits(children[i]);      percentTotals+=percentChildren[i];    } else {      absoluteChildren[i]=Integer.parseInt(children[i]);    }  }  if (percentTotals > 100) {    for (int i=0; i < percentChildren.length; i++) {      if (percentChildren[i] > 0) {        percentChildren[i]=(percentChildren[i] * 100) / percentTotals;      }    }    percentTotals=100;  }}  }
class C{  public Object parseText(String text){  if (text == null || text.length() == 0) {    throw new IllegalArgumentException("The JSON input text should neither be null nor empty.");  }  return parse(new LineColumnReader(new StringReader(text)));}  }
class C{  public SimpleNode removeChild(SimpleNode n){  int numChildren=getChildCount();  SimpleNode[] newChild=new SimpleNode[numChildren - 1];  int j=0;  boolean found=false;  for (int i=0; i < numChildren; i++) {    if (child[i] != n) {      newChild[j]=child[i];      j++;    } else     found=true;  }  if (!found)   throw new IllegalArgumentException("Nonexistent child");  n.setParent(null);  child=newChild;  return n;}  }
class C{  public JMenuItem createMultiscreenMenuItem(JMenu menu,int screen){  JMenuItem mi=null;  if (screen == MultiScreenAction.ALL_SCREENS) {    mi=(JMenuItem)menu.add(new JMenuItem(getString("MultiMenu.all_label")));    mi.setMnemonic(getMnemonic("MultiMenu.all_mnemonic"));    mi.getAccessibleContext().setAccessibleDescription(getString("MultiMenu.all_accessible_description"));  } else {    mi=(JMenuItem)menu.add(new JMenuItem(getString("MultiMenu.single_label") + " " + screen));    mi.setMnemonic(KeyEvent.VK_0 + screen);    mi.getAccessibleContext().setAccessibleDescription(getString("MultiMenu.single_accessible_description") + " " + screen);  }  mi.addActionListener(new MultiScreenAction(this,screen));  return mi;}  }
class C{  public void removeProduct(final Long cid,final Long pid,User user){  Collection collection=read(cid);  if (collection == null) {    logger.warn("Unknown collection #" + cid);    return;  }  Product product=productDao.read(pid);  if (product == null) {    logger.warn("Unknown product #" + pid);    return;  }  Hibernate.initialize(collection.getProducts());  collection.getProducts().remove(product);  update(collection);  fireProductRemoved(new DaoEvent<Collection>(collection),product);  List<Collection> subCol=getSubCollections(cid,user);  for (  Collection c : subCol) {    removeProduct(c.getId(),pid,user);  }}  }
class C{  public UnzipJob(File zip,File targetDir) throws IllegalArgumentException {  this(zip,targetDir,null);}  }
class C{  public void invokeLater(Runnable r){  queue.add(r);synchronized (this) {    if (synchronizer == null) {      runQueue();    } else {      synchronizer.activate();    }  }}  }
class C{  public MaterialEditText maxLength(int length){  mMaxLength=length;  mEditText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(mMaxLength)});  return this;}  }
class C{  public TodoObject(int id){  this.id=id;}  }
class C{  public boolean isAssignableTo(Class cl){  return getRawClass().isAssignableTo(cl);}  }
class C{  protected void translateField(DatabaseField sourceField,DatabaseField mappingField,ClassDescriptor clonedDescriptor){  if (sourceField != null) {    mappingField.setName(sourceField.getName());    mappingField.setUseDelimiters(sourceField.shouldUseDelimiters());    mappingField.useUpperCaseForComparisons(sourceField.getUseUpperCaseForComparisons());    mappingField.setNameForComparisons(sourceField.getNameForComparisons());    mappingField.setNullable(sourceField.isNullable());    mappingField.setUpdatable(sourceField.isUpdatable());    mappingField.setInsertable(sourceField.isInsertable());    mappingField.setUnique(sourceField.isUnique());    mappingField.setScale(sourceField.getScale());    mappingField.setLength(sourceField.getLength());    mappingField.setPrecision(sourceField.getPrecision());    mappingField.setColumnDefinition(sourceField.getColumnDefinition());    if (sourceField.hasTableName()) {      mappingField.setTable(clonedDescriptor.getTable(sourceField.getTable().getName()));    }    mappingField.setIsTranslated(true);  }}  }
class C{  public void actionPerformed(ActionEvent e){  JFileChooser fc=new JFileChooser("");  fc.setMultiSelectionEnabled(false);  fc.setFileSelectionMode(JFileChooser.FILES_ONLY);  boolean save=false;  int option=0;  if (e.getSource() == m_OpenButton) {    log.fine("Open Button");    option=fc.showOpenDialog(this);    save=false;  }  if (e.getSource() == m_SaveButton) {    log.fine("Save Button");    option=fc.showSaveDialog(this);    save=true;  }  if (option != JFileChooser.APPROVE_OPTION)   return;  File file=fc.getSelectedFile();  if (file == null)   return;  log.info(file.toString());  try {    if (save) {      FileOutputStream os=new FileOutputStream(file);      byte[] buffer=(byte[])m_data;      os.write(buffer);      os.flush();      os.close();      log.config("Save to " + file + " #"+ buffer.length);    } else {      FileInputStream is=new FileInputStream(file);      ByteArrayOutputStream os=new ByteArrayOutputStream();      byte[] buffer=new byte[1024 * 8];      int length=-1;      while ((length=is.read(buffer)) != -1)       os.write(buffer,0,length);      is.close();      byte[] data=os.toByteArray();      m_data=data;      log.config("Load from " + file + " #"+ data.length);      os.close();    }  } catch (  Exception ex) {    log.log(Level.WARNING,"Save=" + save,ex);  }  try {    fireVetoableChange(m_columnName,null,m_data);  } catch (  PropertyVetoException pve) {  }}  }
class C{  public boolean write(byte[] buffer,int offset,int lengthToWrite){  if (lengthToWrite + offset > buffer.length) {    throw new IllegalArgumentException("length + offset > buffer.length");  } else   if (lengthToWrite <= 0) {    throw new IllegalArgumentException("length <= 0");  }  final int bufferLength=mBuffer.length;synchronized (this) {    while (lengthToWrite > 0) {      while (bufferLength == mStoredBytes && mOpen) {        try {          wait();        } catch (        InterruptedException e) {        }      }      if (!mOpen)       return false;      final boolean wasEmpty=mStoredBytes == 0;      int bytesToWriteBeforeWaiting=Math.min(lengthToWrite,bufferLength - mStoredBytes);      lengthToWrite-=bytesToWriteBeforeWaiting;      while (bytesToWriteBeforeWaiting > 0) {        int tail=mHead + mStoredBytes;        int oneRun;        if (tail >= bufferLength) {          tail=tail - bufferLength;          oneRun=mHead - tail;        } else {          oneRun=bufferLength - tail;        }        int bytesToCopy=Math.min(oneRun,bytesToWriteBeforeWaiting);        System.arraycopy(buffer,offset,mBuffer,tail,bytesToCopy);        offset+=bytesToCopy;        bytesToWriteBeforeWaiting-=bytesToCopy;        mStoredBytes+=bytesToCopy;      }      if (wasEmpty)       notify();    }  }  return true;}  }
class C{  public static String guessExtensionFromMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return null;  }  return mimeTypeToExtensionMap.get(mimeType);}  }
class C{  public static PlatformUser updatePlatformUser(VOUserDetails userDetails,PlatformUser userToBeUpdated) throws ValidationException, ConcurrentModificationException {  validate(userDetails);  verifyVersionAndKey(userToBeUpdated,userDetails);  copyAttributes(userDetails,userToBeUpdated);  return userToBeUpdated;}  }
class C{  @SuppressWarnings("unchecked") public ClassMap(int initialCapacity){  int initlen;  if (initialCapacity > MAXIMUM_CAPACITY) {    initlen=MAXIMUM_CAPACITY;  } else {    initlen=16;    while (initlen < initialCapacity) {      initlen<<=1;    }  }  this.table=new Entry[initlen];  this.threshold=(int)(initlen * 0.75f);}  }
class C{  public void clearState(W window) throws Exception {  executableTrigger.invokeClear(contextFactory.base(window,new TestTimers(windowNamespace(window)),executableTrigger,getFinishedSet(window)));}  }
class C{  protected DTDBuilder(String name){  super(name);}  }
class C{  public static SimpleNode parse(Reader reader,String templateName) throws ParseException {  return ri.parse(reader,templateName);}  }
class C{  public IMouseState createNodeHoverState(final Node n,final MouseEvent event){  final CNodeHoverState<NodeType,EdgeType> state=new CNodeHoverState<NodeType,EdgeType>(this,m_graph,n);  m_factory.createNodeHoverAction().execute(state,event);  return state;}  }
class C{  public Pair<Pair<String,String[]>,List<String>> rewrite(List<String> results){  String commandId=null;  String[] args=null;  List<String> rewrittenResults=new ArrayList<>();  for (  String result : results) {    Triple triple=rewrite(result);    rewrittenResults.add(triple.mStr);    commandId=triple.mId;    args=triple.mArgs;  }  return new Pair<>(new Pair<>(commandId,args),rewrittenResults);}  }
class C{  public boolean contains(Object o1,Object o2){  return table.get(o1,o2) != null;}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (!getItemVisible(row,column)) {    return;  }  int visibleRow=state.getVisibleSeriesIndex(row);  if (visibleRow < 0) {    return;  }  int visibleRowCount=state.getVisibleSeriesCount();  PlotOrientation orientation=plot.getOrientation();  ValueSourceToMultiValueCategoryDatasetAdapter dataSet=(ValueSourceToMultiValueCategoryDatasetAdapter)dataset;  List values=dataSet.getValues(row,column);  if (values == null) {    return;  }  int valueCount=values.size();  for (int i=0; i < valueCount; i++) {    double x1;    if (getUseSeriesOffset()) {      x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,getItemMargin(),dataArea,plot.getDomainAxisEdge());    } else {      x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());    }    Number n=(Number)values.get(i);    int idx=dataSet.getValueIndex(row,column,i);    double value=n.doubleValue();    double y1=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());    Shape shape=getItemShape(row,idx);    if (orientation == PlotOrientation.HORIZONTAL) {      shape=ShapeUtilities.createTranslatedShape(shape,y1,x1);    } else     if (orientation == PlotOrientation.VERTICAL) {      shape=ShapeUtilities.createTranslatedShape(shape,x1,y1);    }    if (getItemShapeFilled(row,column)) {      if (getUseFillPaint()) {        g2.setPaint(getItemFillPaint(row,column));      } else {        g2.setPaint(getItemPaint(row,idx));      }      g2.fill(shape);    }    if (getDrawOutlines()) {      if (getUseOutlinePaint()) {        g2.setPaint(getItemOutlinePaint(row,column));      } else {        g2.setPaint(getItemPaint(row,idx));      }      g2.setStroke(getItemOutlineStroke(row,column));      g2.draw(shape);    }  }}  }
class C{  private Object readResolve() throws java.io.ObjectStreamException {switch (type) {case ANCHOR_START:    return START;case ANCHOR_MIDDLE:  return MIDDLE;case ANCHOR_END:return END;default :throw new Error("Unknown Anchor type");}}  }
class C{  @Override public void remove(EatStatus status,StatusList statusList){  statusList.removeInternal(status);}  }
class C{  public static final CButton createNewButton(String text){  AppsAction aa=new AppsAction(A_NEW,KeyStroke.getKeyStroke(KeyEvent.VK_F2,0),text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  protected Node newNode(){  return new SVGOMFEGaussianBlurElement();}  }
class C{  private void writeIonValue(IonValue value) throws IonException {  final int valueOffset=myBuffer.length - myOffset;switch (value.getType()) {case BLOB:    writeIonBlobContent((IonBlob)value);  break;case BOOL:writeIonBoolContent((IonBool)value);break;case CLOB:writeIonClobContent((IonClob)value);break;case DECIMAL:writeIonDecimalContent((IonDecimal)value);break;case FLOAT:writeIonFloatContent((IonFloat)value);break;case INT:writeIonIntContent((IonInt)value);break;case NULL:writeIonNullContent();break;case STRING:writeIonStringContent((IonString)value);break;case SYMBOL:writeIonSymbolContent((IonSymbol)value);break;case TIMESTAMP:writeIonTimestampContent((IonTimestamp)value);break;case LIST:writeIonListContent((IonList)value);break;case SEXP:writeIonSexpContent((IonSexp)value);break;case STRUCT:writeIonStructContent((IonStruct)value);break;case DATAGRAM:writeIonDatagramContent((IonDatagram)value);break;default :throw new IonException("IonType is unknown: " + value.getType());}writeAnnotations(value,valueOffset);}  }
class C{  public Builder shouldStartZK(boolean startZK){  this._shouldStartZK=startZK;  return this;}  }
class C{  public static String genRandomString(){  return genRandomString(6);}  }
class C{  public void updateScrollBars(){  if (vertical != null && visibleLines != 0) {    vertical.setValues(firstLine,visibleLines,0,getLineCount());    vertical.setUnitIncrement(2);    vertical.setBlockIncrement(visibleLines);  }  int width=painter.getWidth();  if (horizontal != null && width != 0) {    horizontal.setValues(-horizontalOffset,width,0,width * 5);    horizontal.setUnitIncrement(painter.getFontMetrics().charWidth('w'));    horizontal.setBlockIncrement(width / 2);  }}  }
class C{  private void loadDomoticzServers(){  String serverSettings=prefs.getString(SERVER_PREFS,"");  if (!UsefulBits.isEmpty(serverSettings)) {    mServerList=new ArrayList<>();    String JSON_VALUE_PAIRS="nameValuePairs";    String JSON_CONFIG_INFO="configInfo";    String JSON_OBJECT="jsonObject";    String serverUpdateInfoJSON_SERVER_UPDATE_INFO="serverUpdateInfo";    try {      JSONArray jsonSettingsArray=new JSONArray(serverSettings);      for (int i=0; i < jsonSettingsArray.length(); i++) {        JSONObject jsonServer=jsonSettingsArray.getJSONObject(i);        ServerInfo oPrefServer=new ServerInfo();        oPrefServer.setServerName(jsonServer.getString("SERVER_NAME"));        if (jsonServer.has("SERVER_UNIQUE_ID"))         oPrefServer.setServerUniqueId(jsonServer.getString("SERVER_UNIQUE_ID"));        oPrefServer.setRemoteServerUsername(jsonServer.getString("REMOTE_SERVER_USERNAME"));        oPrefServer.setRemoteServerPassword(jsonServer.getString("REMOTE_SERVER_PASSWORD"));        oPrefServer.setRemoteServerUrl(jsonServer.getString("REMOTE_SERVER_URL"));        oPrefServer.setRemoteServerDirectory(jsonServer.getString("REMOTE_SERVER_DIRECTORY"));        oPrefServer.setRemoteServerPort(jsonServer.getString("REMOTE_SERVER_PORT"));        oPrefServer.setRemoteServerSecure(jsonServer.getBoolean("REMOTE_SERVER_SECURE"));        oPrefServer.setRemoteServerAuthentication(jsonServer.getBoolean("REMOTE_SERVER_AUTHENTICATION_METHOD"));        oPrefServer.setIsLocalServerAddressDifferent(jsonServer.getBoolean("IS_LOCAL_SERVER_ADDRESS_DIFFERENT"));        oPrefServer.setUseOnlyLocal(jsonServer.getBoolean("USE_ONLY_LOCAL"));        oPrefServer.setLocalServerUsername(jsonServer.getString("LOCAL_SERVER_USERNAME"));        oPrefServer.setLocalServerPassword(jsonServer.getString("LOCAL_SERVER_PASSWORD"));        oPrefServer.setLocalServerUrl(jsonServer.getString("LOCAL_SERVER_URL"));        oPrefServer.setLocalServerPort(jsonServer.getString("LOCAL_SERVER_PORT"));        oPrefServer.setLocalServerDirectory(jsonServer.getString("LOCAL_SERVER_DIRECTORY"));        oPrefServer.setLocalServerSecure(jsonServer.getBoolean("LOCAL_SERVER_SECURE"));        oPrefServer.setLocalServerAuthentication(jsonServer.getBoolean("LOCAL_SERVER_AUTHENTICATION_METHOD"));        if (jsonServer.has("LOCAL_SERVER_SSID")) {          JSONArray jsonSSIDList=jsonServer.getJSONArray("LOCAL_SERVER_SSID");          List<String> ssidList=new ArrayList<>();          for (int j=0; j < jsonSSIDList.length(); j++)           ssidList.add(jsonSSIDList.getString(j));          oPrefServer.setLocalServerSsid(ssidList);        }        oPrefServer.setEnabled(jsonServer.getBoolean("ENABLED"));        if (jsonServer.has(serverUpdateInfoJSON_SERVER_UPDATE_INFO)) {          JSONObject serverUpdateInfoJson=jsonServer.getJSONObject(serverUpdateInfoJSON_SERVER_UPDATE_INFO);          JSONObject jsonUpdate=serverUpdateInfoJson.getJSONObject(JSON_OBJECT).getJSONObject(JSON_VALUE_PAIRS);          oPrefServer.setServerUpdateInfo(mContext,new ServerUpdateInfo(jsonUpdate));        }        if (jsonServer.has(JSON_CONFIG_INFO)) {          JSONObject configInfoJson=jsonServer.getJSONObject(JSON_CONFIG_INFO);          long dateOfConfig=configInfoJson.getLong("dateOfConfig");          JSONObject jsonUpdate=configInfoJson.getJSONObject(JSON_OBJECT).getJSONObject(JSON_VALUE_PAIRS);          ConfigInfo loadedConfigInfo=new ConfigInfo(jsonUpdate);          loadedConfigInfo.setDateOfConfig(dateOfConfig);          oPrefServer.setConfigInfo(mContext,loadedConfigInfo);        }        boolean alreadyContains=false;        for (        ServerInfo s : mServerList) {          if (s.getServerName().equals(oPrefServer.getServerName()))           alreadyContains=true;        }        if (!alreadyContains)         mServerList.add(oPrefServer);      }    } catch (    JSONException e) {      e.printStackTrace();    }    if (mServerList.size() > 0) {      mActiveServer=mServerList.get(0);      String activeServerSettings=prefs.getString(SERVER_PREFS_ACTIVE,"");      if (!UsefulBits.isEmpty(activeServerSettings)) {        JSONObject jsonServer;        try {          jsonServer=new JSONObject(activeServerSettings);          ServerInfo oPrefServer=new ServerInfo();          oPrefServer.setServerName(jsonServer.getString("SERVER_NAME"));          if (jsonServer.has("SERVER_UNIQUE_ID"))           oPrefServer.setServerUniqueId(jsonServer.getString("SERVER_UNIQUE_ID"));          oPrefServer.setRemoteServerUsername(jsonServer.getString("REMOTE_SERVER_USERNAME"));          oPrefServer.setRemoteServerPassword(jsonServer.getString("REMOTE_SERVER_PASSWORD"));          oPrefServer.setRemoteServerUrl(jsonServer.getString("REMOTE_SERVER_URL"));          oPrefServer.setRemoteServerDirectory(jsonServer.getString("REMOTE_SERVER_DIRECTORY"));          oPrefServer.setRemoteServerPort(jsonServer.getString("REMOTE_SERVER_PORT"));          oPrefServer.setRemoteServerSecure(jsonServer.getBoolean("REMOTE_SERVER_SECURE"));          oPrefServer.setRemoteServerAuthentication(jsonServer.getBoolean("REMOTE_SERVER_AUTHENTICATION_METHOD"));          oPrefServer.setIsLocalServerAddressDifferent(jsonServer.getBoolean("IS_LOCAL_SERVER_ADDRESS_DIFFERENT"));          oPrefServer.setUseOnlyLocal(jsonServer.getBoolean("USE_ONLY_LOCAL"));          oPrefServer.setLocalServerUsername(jsonServer.getString("LOCAL_SERVER_USERNAME"));          oPrefServer.setLocalServerPassword(jsonServer.getString("LOCAL_SERVER_PASSWORD"));          oPrefServer.setLocalServerUrl(jsonServer.getString("LOCAL_SERVER_URL"));          oPrefServer.setLocalServerPort(jsonServer.getString("LOCAL_SERVER_PORT"));          oPrefServer.setLocalServerDirectory(jsonServer.getString("LOCAL_SERVER_DIRECTORY"));          oPrefServer.setLocalServerSecure(jsonServer.getBoolean("LOCAL_SERVER_SECURE"));          oPrefServer.setEnabled(jsonServer.getBoolean("ENABLED"));          if (jsonServer.has("LOCAL_SERVER_SSID")) {            JSONArray jsonSSIDList=jsonServer.getJSONArray("LOCAL_SERVER_SSID");            List<String> ssidList=new ArrayList<>();            for (int j=0; j < jsonSSIDList.length(); j++)             ssidList.add(jsonSSIDList.getString(j));            oPrefServer.setLocalServerSsid(ssidList);          }          if (jsonServer.has(serverUpdateInfoJSON_SERVER_UPDATE_INFO)) {            JSONObject serverUpdateInfoJson=jsonServer.getJSONObject(serverUpdateInfoJSON_SERVER_UPDATE_INFO);            JSONObject jsonUpdate=serverUpdateInfoJson.getJSONObject(JSON_OBJECT).getJSONObject(JSON_VALUE_PAIRS);            oPrefServer.setServerUpdateInfo(mContext,new ServerUpdateInfo(jsonUpdate));          }          if (jsonServer.has(JSON_CONFIG_INFO)) {            JSONObject configInfoJson=jsonServer.getJSONObject(JSON_CONFIG_INFO);            long dateOfConfig=configInfoJson.getLong("dateOfConfig");            JSONObject jsonUpdate=configInfoJson.getJSONObject(JSON_OBJECT).getJSONObject(JSON_VALUE_PAIRS);            ConfigInfo loadedConfigInfo=new ConfigInfo(jsonUpdate);            loadedConfigInfo.setDateOfConfig(dateOfConfig);            oPrefServer.setConfigInfo(mContext,loadedConfigInfo);          }          oPrefServer.setLocalServerAuthentication(jsonServer.getBoolean("LOCAL_SERVER_AUTHENTICATION_METHOD"));          mActiveServer=oPrefServer;        } catch (        JSONException e) {          e.printStackTrace();        }      }    }  }}  }
class C{  protected void command(short val) throws ParseException {  if (cindex == c.length) {    cs.add(c);    c=new short[c.length * 2 + 1];    cindex=0;  }  c[cindex++]=val;  ccount++;}  }
class C{  @Override void doConstrainedOutsideScores(Grammar grammar,boolean viterbi,boolean logScores){  short[] numSubStatesArray=grammar.numSubStates;  double initVal=(logScores) ? Double.NEGATIVE_INFINITY : 0.0;  for (int diff=length; diff >= 1; diff--) {    for (int start=0; start + diff <= length; start++) {      int end=start + diff;      double[][] scoresAfterUnaries=new double[numStates][];      boolean somethingChanged=false;      for (int cState=0; cState < numStates; cState++) {        if (diff > 1 && !grammar.isGrammarTag[cState])         continue;        if (!allowedStates[start][end][cState]) {          continue;        }        UnaryRule[] rules=null;        if (viterbi)         rules=grammar.getClosedViterbiUnaryRulesByChild(cState); else         rules=grammar.getClosedSumUnaryRulesByChild(cState);        final int nChildStates=numSubStatesArray[cState];        final int numRules=rules.length;        for (int r=0; r < numRules; r++) {          UnaryRule ur=rules[r];          int pState=ur.parentState;          if ((pState == cState))           continue;          if (!allowedStates[start][end][pState]) {            continue;          }          double[][] scores=ur.getScores2();          final int nParentStates=numSubStatesArray[pState];          for (int cp=0; cp < nChildStates; cp++) {            if (scores[cp] == null)             continue;            if (!allowedSubStates[start][end][cState][cp])             continue;            for (int np=0; np < nParentStates; np++) {              double pS=scores[cp][np];              if (pS == initVal)               continue;              double oS=oScore[start][end][pState][np];              if (oS == initVal)               continue;              double thisRound=(logScores) ? oS + pS : oS * pS;              if (scoresAfterUnaries[cState] == null) {                scoresAfterUnaries[cState]=new double[numSubStatesArray[cState]];                if (viterbi)                 Arrays.fill(scoresAfterUnaries[cState],initVal);              }              if (viterbi)               scoresAfterUnaries[cState][cp]=Math.max(thisRound,scoresAfterUnaries[cState][cp]); else               scoresAfterUnaries[cState][cp]+=thisRound;              somethingChanged=true;            }          }        }      }      if (somethingChanged) {        for (int cState=0; cState < numStates; cState++) {          double[] thisCell=scoresAfterUnaries[cState];          if (thisCell == null)           continue;          for (int cp=0; cp < numSubStatesArray[cState]; cp++) {            if (thisCell[cp] > initVal) {              if (viterbi)               oScore[start][end][cState][cp]=Math.max(oScore[start][end][cState][cp],thisCell[cp]); else               oScore[start][end][cState][cp]+=thisCell[cp];            }          }        }      }      for (int pState=0; pState < numSubStatesArray.length; pState++) {        if (!allowedStates[start][end][pState]) {          continue;        }        final int nParentChildStates=numSubStatesArray[pState];        BinaryRule[] rules=grammar.splitRulesWithP(pState);        final int numRules=rules.length;        for (int r=0; r < numRules; r++) {          BinaryRule br=rules[r];          int lState=br.leftChildState;          int min1=narrowRExtent[start][lState];          if (end < min1) {            continue;          }          int rState=br.rightChildState;          int max1=narrowLExtent[end][rState];          if (max1 < min1) {            continue;          }          int min=min1;          int max=max1;          if (max - min > 2) {            int min2=wideLExtent[end][rState];            min=(min1 > min2 ? min1 : min2);            if (max1 < min) {              continue;            }            int max2=wideRExtent[start][lState];            max=(max1 < max2 ? max1 : max2);            if (max < min) {              continue;            }          }          double[][][] scores=br.getScores2();          final int nLeftChildStates=numSubStatesArray[lState];          final int nRightChildStates=numSubStatesArray[rState];          for (int split=min; split <= max; split++) {            if (!allowedStates[start][split][lState])             continue;            if (!allowedStates[split][end][rState])             continue;            double[] rightScores=new double[nRightChildStates];            if (viterbi)             Arrays.fill(rightScores,initVal);            Arrays.fill(scoresToAdd,initVal);            somethingChanged=false;            for (int lp=0; lp < nLeftChildStates; lp++) {              double lS=iScore[start][split][lState][lp];              if (lS == initVal) {                continue;              }              for (int rp=0; rp < nRightChildStates; rp++) {                if (scores[lp][rp] == null)                 continue;                double rS=iScore[split][end][rState][rp];                if (rS == initVal) {                  continue;                }                for (int np=0; np < nParentChildStates; np++) {                  double pS=scores[lp][rp][np];                  if (pS == initVal)                   continue;                  double oS=oScore[start][end][pState][np];                  if (oS == initVal)                   continue;                  double thisRoundL=(logScores) ? pS + rS + oS : pS * rS * oS;                  double thisRoundR=(logScores) ? pS + lS + oS : pS * lS * oS;                  if (viterbi) {                    scoresToAdd[lp]=Math.max(thisRoundL,scoresToAdd[lp]);                    rightScores[rp]=Math.max(thisRoundR,rightScores[rp]);                  } else {                    scoresToAdd[lp]+=thisRoundL;                    rightScores[rp]+=thisRoundR;                  }                  somethingChanged=true;                }              }            }            if (!somethingChanged)             continue;            for (int cp=0; cp < nLeftChildStates; cp++) {              if (scoresToAdd[cp] > initVal) {                if (viterbi)                 oScore[start][split][lState][cp]=Math.max(oScore[start][split][lState][cp],scoresToAdd[cp]); else                 oScore[start][split][lState][cp]+=scoresToAdd[cp];              }            }            for (int cp=0; cp < nRightChildStates; cp++) {              if (rightScores[cp] > initVal) {                if (viterbi)                 oScore[split][end][rState][cp]=Math.max(oScore[split][end][rState][cp],rightScores[cp]); else                 oScore[split][end][rState][cp]+=rightScores[cp];              }            }          }        }      }    }  }}  }
class C{  public boolean isNextCharOnNewLine(){  return nextCharOnNewLine;}  }
class C{  public static boolean uninstallNormal(Context context,String packageName){  if (packageName == null || packageName.length() == 0) {    return false;  }  Intent i=new Intent(Intent.ACTION_DELETE,Uri.parse(new StringBuilder(32).append("package:").append(packageName).toString()));  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  public void addImage(Image image){  addProperty(image);}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,status.name()));    StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,getStorageSystemURI());    CinderApi cinderApi=jobContext.getCinderApiFactory().getApi(storageSystem.getActiveProviderURI(),getEndPointInfo());    StoragePool storagePool=null;    if (status == JobStatus.SUCCESS || status == JobStatus.FAILED) {      storagePool=dbClient.queryObject(StoragePool.class,storagePoolUri);      StringMap reservationMap=storagePool.getReservedCapacityMap();      for (      URI volumeId : getTaskCompleter().getIds()) {        reservationMap.remove(volumeId.toString());      }      dbClient.persistObject(storagePool);    }    if (status == JobStatus.SUCCESS) {      List<URI> volumes=new ArrayList<URI>();      Calendar now=Calendar.getInstance();      URI volumeId=getTaskCompleter().getId();      volumes.add(volumeId);      for (      Map.Entry<String,URI> entry : volumeIds.entrySet()) {        VolumeShowResponse volumeDetails=cinderApi.showVolume(entry.getKey());        processVolume(entry.getValue(),volumeDetails,dbClient,now,logMsgBuilder);        CinderUtils.updateStoragePoolCapacity(dbClient,cinderApi,storagePool,volumeDetails.volume.size,false);      }    } else     if (status == JobStatus.FAILED) {      for (      URI id : getTaskCompleter().getIds()) {        logMsgBuilder.append("\n");        logMsgBuilder.append(String.format("Task %s failed to create volume: %s",opId,id.toString()));        Volume volume=dbClient.queryObject(Volume.class,id);        volume.setInactive(true);        dbClient.persistObject(volume);      }    }    logger.info(logMsgBuilder.toString());  } catch (  Exception e) {    logger.error("Caught an exception while trying to updateStatus for CinderCreateVolumeJob",e);    setErrorStatus("Encountered an internal error during volume create job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  protected void createClasificadoresPorDefecto(NodeIterator clasificadoresNodeIt,String idClfPadre){  if (clasificadoresNodeIt != null) {    for (Node clasificadorNode=clasificadoresNodeIt.nextNode(); clasificadorNode != null; clasificadorNode=clasificadoresNodeIt.nextNode()) {      DocClasificadorVO clasificador=createDocClasificadorVO(clasificadorNode,idClfPadre);      if (logger.isDebugEnabled())       logger.debug("Creando clasificador:\n" + clasificador);      clasificador=documentosBI.insertClasificadorXDefecto(clasificador);      createClasificadoresPorDefecto(XmlFacade.getNodeIterator(clasificadorNode,"Clasificadores_Hijos/Clasificador"),clasificador.getId());    }  }}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  Reading makeReading(String s) throws IOException {  if (first) {    log.info("RPS starts, using protocol version " + version);    first=false;  }  if (version == 1) {    java.io.StringReader b=new java.io.StringReader(s);    com.csvreader.CsvReader c=new com.csvreader.CsvReader(b);    c.readRecord();    int count=c.getColumnCount() - SKIPCOLS;    double[] vals=new double[count + 1];    for (int i=1; i < count + 1; i++) {      vals[i]=Double.valueOf(c.get(i + SKIPCOLS - 1)).doubleValue();    }    Reading r=new Reading(Engine.instance().getPolledID(),vals,s);    return r;  } else   if (version == 2) {    java.io.StringReader b=new java.io.StringReader(s);    com.csvreader.CsvReader c=new com.csvreader.CsvReader(b);    c.readRecord();    int count=(c.getColumnCount() - 2) / 2;    double[] vals=new double[Engine.instance().getMaxReceiverNumber() + 1];    for (int i=0; i < vals.length; i++) {      vals[i]=0.0;    }    try {      for (int i=0; i < count; i++) {        int index=Integer.parseInt(c.get(2 + i * 2));        if (index < 0) {          continue;        }        if (index >= vals.length) {          log.warn("Data from unexpected receiver " + index + ", creating receiver");          Engine.instance().setMaxReceiverNumber(index + 1);        }        if (index < vals.length) {          vals[index]=Double.valueOf(c.get(2 + i * 2 + 1)).doubleValue();        }      }    } catch (    Exception e) {      log.warn("Exception handling input: " + e);      System.out.flush();      System.err.flush();      e.printStackTrace();      System.out.flush();      System.err.flush();      return null;    }    Reading r=new Reading(Engine.instance().getPolledID(),vals,s);    return r;  } else {    log.error("can't handle version " + version);    return null;  }}  }
class C{  public JsEditorConfiguration(Set<AutoEditStrategyFactory> autoEditStrategyFactories,DefaultCodeAssistProcessor defaultProcessor){  this.autoEditStrategyFactories=autoEditStrategyFactories;  this.defaultProcessor=defaultProcessor;}  }
class C{  public static String[] toStringArray(Enumeration<String> enumeration){  if (enumeration == null) {    return null;  }  List<String> list=Collections.list(enumeration);  return list.toArray(new String[list.size()]);}  }
class C{  @Override public void clear(){  long max=Math.max(1,maxMemory / segmentCount);  for (int i=0; i < segmentCount; i++) {    segments[i]=new Segment<K,V>(this,max,stackMoveDistance,8);  }}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  super.insertUpdate(changes,adjustAllocation(a),f);  updateVisibilityModel();}  }
class C{  public BarRenderer3D(double xOffset,double yOffset){  super();  this.xOffset=xOffset;  this.yOffset=yOffset;  this.wallPaint=DEFAULT_WALL_PAINT;  ItemLabelPosition p1=new ItemLabelPosition(ItemLabelAnchor.INSIDE12,TextAnchor.TOP_CENTER);  setBasePositiveItemLabelPosition(p1);  ItemLabelPosition p2=new ItemLabelPosition(ItemLabelAnchor.INSIDE12,TextAnchor.TOP_CENTER);  setBaseNegativeItemLabelPosition(p2);}  }
class C{  protected boolean shouldInterceptContextMenuDownload(String url){  return mDownloadDelegate.shouldInterceptContextMenuDownload(url);}  }
class C{  @Override public boolean isCurrency(int columnIndex){  return false;}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void stop(){  if (stopHelper()) {    Thread.currentThread().stop();  }}  }
class C{  protected static BufferedImage createBufferedImage(int width,int height,ImageContent contentType,int type){  BufferedImage image;  image=new BufferedImage(width,height,type);  boolean hasAlpha=image.getColorModel().hasAlpha();switch (contentType) {case RANDOM:    for (int y=0; y < height; y++) {      for (int x=0; x < width; x++) {        int rgb=(int)(Math.random() * 0xffffff);        if (hasAlpha) {          rgb|=0x7f000000;        }        image.setRGB(x,y,rgb);      }    }  break;case VECTOR:{  Graphics2D g=image.createGraphics();  if (hasAlpha) {    g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC,0.5f));  }  g.setColor(Color.blue);  g.fillRect(0,0,width,height);  g.setComposite(AlphaComposite.Src);  g.setColor(Color.yellow);  g.fillOval(2,2,width - 4,height - 4);  g.setColor(Color.red);  g.fillOval(4,4,width - 8,height - 8);  g.setColor(Color.green);  g.fillRect(8,8,width - 16,height - 16);  g.setColor(Color.white);  g.drawLine(0,0,width,height);  g.drawLine(0,height,width,0);  g.dispose();  break;}case PHOTO:{Image photo=null;try {  photo=ImageIO.read(IIOTests.class.getResourceAsStream("images/photo.jpg"));} catch (Exception e) {  System.err.println("error loading photo");  e.printStackTrace();}Graphics2D g=image.createGraphics();if (hasAlpha) {  g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC,0.5f));}g.drawImage(photo,0,0,width,height,null);g.dispose();break;}default :break;}return image;}  }
class C{  public double[][][] computeLocalFromPreviousObservations(int states[][][],int offsetOfDestFromSources[][]){  return computeLocalFromPreviousObservations(states,offsetOfDestFromSources,false);}  }
class C{  public static CodedInputByteBufferNano newInstance(final byte[] buf,final int off,final int len){  return new CodedInputByteBufferNano(buf,off,len);}  }
class C{  void claimStorageVolumes(Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap,boolean preserveData) throws VPlexApiException {  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_CLAIM_VOLUME);  s_logger.info("Claim storage volumes URI is {}",requestURI.toString());  Iterator<Entry<VolumeInfo,VPlexStorageVolumeInfo>> volumeIter=storageVolumeInfoMap.entrySet().iterator();  List<String> storageVolumeContextPaths=new ArrayList<String>();  while (volumeIter.hasNext()) {    ClientResponse response=null;    Entry<VolumeInfo,VPlexStorageVolumeInfo> entry=volumeIter.next();    VolumeInfo volumeInfo=entry.getKey();    String volumeName=volumeInfo.getVolumeName();    s_logger.info("Claiming volume {}",volumeInfo.getVolumeWWN());    try {      VPlexStorageVolumeInfo storageVolumeInfo=entry.getValue();      Map<String,String> argsMap=new HashMap<String,String>();      argsMap.put(VPlexApiConstants.ARG_DASH_D,storageVolumeInfo.getPath());      argsMap.put(VPlexApiConstants.ARG_DASH_N,volumeName);      if (preserveData) {        argsMap.put(VPlexApiConstants.ARG_APPC,"");      }      if (volumeInfo.getIsThinProvisioned()) {        argsMap.put(VPlexApiConstants.ARG_THIN_REBUILD,"");      }      JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);      s_logger.info("Claim storage volumes POST data is {}",postDataObject.toString());      response=_vplexApiClient.post(requestURI,postDataObject.toString());      String responseStr=response.getEntity(String.class);      s_logger.info("Claim storage volume response is {}",responseStr);      if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {        if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {          s_logger.info("Claiming storage volume is completing asynchronously");          _vplexApiClient.waitForCompletion(response);        } else {          String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);          throw VPlexApiException.exceptions.claimVolumeFailureStatus(volumeInfo.getVolumeWWN(),String.valueOf(response.getStatus()),cause);        }      }      storageVolumeInfo.setName(volumeName);      String currentPath=storageVolumeInfo.getPath();      int endIndex=currentPath.lastIndexOf("/");      String newPath=currentPath.substring(0,endIndex + 1) + volumeName;      storageVolumeInfo.setPath(newPath);      s_logger.info("Successfully claimed storage volume {}",volumeInfo.getVolumeWWN());      String contextPath=currentPath.substring(0,endIndex);      if (!storageVolumeContextPaths.contains(contextPath)) {        storageVolumeContextPaths.add(contextPath);      }    } catch (    VPlexApiException vae) {      throw vae;    }catch (    Exception e) {      throw VPlexApiException.exceptions.failedClaimVolume(volumeInfo.getVolumeWWN(),e);    } finally {      if (response != null) {        response.close();      }    }  }  _vplexApiClient.getDiscoveryManager().refreshContexts(storageVolumeContextPaths);}  }
class C{  public static String truncate(final String string,final int maxLen){  if (string.length() <= maxLen)   return string; else   return string.substring(0,maxLen);}  }
class C{  public void mousePressed(MouseEvent e){  getHandler().mousePressed(e);}  }
class C{  public void mouseMove(MouseEvent e){}  }
class C{  public PrevisionVO abrirPrevision(String idPrevision){  PrevisionVO prevision=_previsionDbEntity.getInfoPrevision(idPrevision);  getPrevisionAuthorizationHelper().configurePrevision(prevision);  return prevision;}  }
class C{  public static ConstantNode forIntegerStamp(Stamp stamp,long value){  if (stamp instanceof IntegerStamp) {    IntegerStamp intStamp=(IntegerStamp)stamp;    return forIntegerBits(intStamp.getBits(),value);  } else {    return forIntegerKind(stamp.getStackKind(),value);  }}  }
class C{  public void initRouteSelector(){  routeCombo=new CheckComboBox<>();  routeCombo.layoutBoundsProperty().addListener(null);}  }
class C{  void registerSubtype(HGHandle superType,HGHandle subType){  List<HGIndexer<?,?>> forSuperType=indexers.get(superType);  if (forSuperType == null)   return; else   if (forSuperType.isEmpty())   indexers.remove(forSuperType);  List<HGIndexer<?,?>> forSubType=indexers.get(subType);  if (forSubType == null) {    forSubType=new ArrayList<HGIndexer<?,?>>();    indexers.put(subType,forSubType);  }  for (  HGIndexer<?,?> idx : forSuperType)   if (!forSubType.contains(idx))   forSubType.add(idx);}  }
class C{  public NodeSecurity findNodeSecurity(String id){  return findNodeSecurity(id,false);}  }
class C{  public LazyPQueueX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  public static XContentType xContentType(CharSequence content){  int length=content.length() < GUESS_HEADER_LENGTH ? content.length() : GUESS_HEADER_LENGTH;  if (length == 0) {    return null;  }  char first=content.charAt(0);  if (first == '{') {    return XContentType.JSON;  }  if (length > 2 && first == SmileConstants.HEADER_BYTE_1 && content.charAt(1) == SmileConstants.HEADER_BYTE_2 && content.charAt(2) == SmileConstants.HEADER_BYTE_3) {    return XContentType.SMILE;  }  if (length > 2 && first == '-' && content.charAt(1) == '-' && content.charAt(2) == '-') {    return XContentType.YAML;  }  for (int i=0; i < length; i++) {    char c=content.charAt(i);    if (c == '{') {      return XContentType.JSON;    }    if (Character.isWhitespace(c) == false) {      break;    }  }  return null;}  }
class C{  public void doSaveAs() throws IOException {  JFileChooser fileChooser=new JFileChooser();  fileChooser.setCurrentDirectory(this.defaultDirectoryForSaveAs);  FileNameExtensionFilter filter=new FileNameExtensionFilter(localizationResources.getString("PNG_Image_Files"),"png");  fileChooser.addChoosableFileFilter(filter);  fileChooser.setFileFilter(filter);  int option=fileChooser.showSaveDialog(this);  if (option == JFileChooser.APPROVE_OPTION) {    String filename=fileChooser.getSelectedFile().getPath();    if (isEnforceFileExtensions()) {      if (!filename.endsWith(".png")) {        filename=filename + ".png";      }    }    ChartUtilities.saveChartAsPNG(new File(filename),this.chart,getWidth(),getHeight());  }}  }
class C{  public void execute(StepInstance stepInstance,String temporaryFileDirectory){  InputStream inputStream=null;  final String fileName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,superFamilyBinaryOutputFileName);  Set<RawProtein<SuperFamilyHmmer3RawMatch>> rawProteins;  int count=0;  RawMatch represantiveRawMatch=null;  try {    inputStream=new FileInputStream(fileName);    rawProteins=parser.parse(inputStream);    for (    RawProtein<SuperFamilyHmmer3RawMatch> rawProtein : rawProteins) {      count+=rawProtein.getMatches().size();      if (represantiveRawMatch == null) {        if (rawProtein.getMatches().size() > 0) {          represantiveRawMatch=rawProtein.getMatches().iterator().next();        }      }    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Parsed out " + rawProteins.size() + " proteins with matches from file "+ fileName);      LOGGER.debug("A total of " + count + " raw matches from file "+ fileName);    }  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to parse " + fileName,e);  } finally {    try {      if (inputStream != null) {        inputStream.close();      }    } catch (    IOException e) {      LOGGER.warn("Error closing input stream",e);    }  }  if (rawProteins != null && rawProteins.size() > 0) {    filteredMatchDAO.persist(rawProteins);    Long now=System.currentTimeMillis();    if (count > 0) {      int matchesFound=0;      int waitTimeFactor=Utilities.getWaitTimeFactor(count).intValue();      if (represantiveRawMatch != null) {        Utilities.verboseLog("represantiveRawMatch :" + represantiveRawMatch.toString());        String signatureLibraryRelease=represantiveRawMatch.getSignatureLibraryRelease();        Utilities.sleep(waitTimeFactor * 1000);      } else {        LOGGER.warn("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);        Utilities.verboseLog("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);      }      Long timeTaken=System.currentTimeMillis() - now;      Utilities.verboseLog("ParseStep: count: " + count + " represantiveRawMatch : "+ represantiveRawMatch.toString()+ " time taken: "+ timeTaken);    }  } else {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("No SuperFamily matches were persisted as none were found in the SuperFamily binary output file: " + fileName);    }  }}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(ALGORITHM)) {    algId=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:CertificateAlgorithmId.");  }}  }
class C{  private void traverse(GroovySourceAST t,List l,Iterator itr){  while (t != null) {    if (l != null) {      l.add(new LineColumn(t.getLine(),t.getColumn()));    }    if (itr != null && itr.hasNext()) {      LineColumn lc=(LineColumn)itr.next();      if (t.getLineLast() == 0) {        int nextLine=lc.getLine();        int nextColumn=lc.getColumn();        if (nextLine < t.getLine() || (nextLine == t.getLine() && nextColumn < t.getColumn())) {          nextLine=t.getLine();          nextColumn=t.getColumn();        }        t.setLineLast(nextLine);        t.setColumnLast(nextColumn);      }    }    GroovySourceAST child=(GroovySourceAST)t.getFirstChild();    if (child != null) {      traverse(child,l,itr);    }    t=(GroovySourceAST)t.getNextSibling();  }}  }
class C{  public BatchContains(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.957 -0400",hash_original_method="F239F6C289BCD2F4BC55F0B83883F380",hash_generated_method="0B62545A3C3BEE8E8076FDE47AEDF4BD") public Phaser(){  this(null,0);}  }
class C{  private static String toCurl(HttpUriRequest request,boolean logAuthToken) throws IOException {  StringBuilder builder=new StringBuilder();  builder.append("curl ");  for (  Header header : request.getAllHeaders()) {    if (!logAuthToken && (header.getName().equals("Authorization") || header.getName().equals("Cookie"))) {      continue;    }    builder.append("--header \"");    builder.append(header.toString().trim());    builder.append("\" ");  }  URI uri=request.getURI();  if (request instanceof RequestWrapper) {    HttpRequest original=((RequestWrapper)request).getOriginal();    if (original instanceof HttpUriRequest) {      uri=((HttpUriRequest)original).getURI();    }  }  builder.append("\"");  builder.append(uri);  builder.append("\"");  if (request instanceof HttpEntityEnclosingRequest) {    HttpEntityEnclosingRequest entityRequest=(HttpEntityEnclosingRequest)request;    HttpEntity entity=entityRequest.getEntity();    if (entity != null && entity.isRepeatable()) {      if (entity.getContentLength() < 1024) {        ByteArrayOutputStream stream=new ByteArrayOutputStream();        entity.writeTo(stream);        String entityString=stream.toString();        builder.append(" --data-ascii \"").append(entityString).append("\"");      } else {        builder.append(" [TOO MUCH DATA TO INCLUDE]");      }    }  }  return builder.toString();}  }
class C{  public void addRangeWithWidth(int lonm1,int width){  int lonm2;  if (width < 0) {    lonm2=lonm1;    lonm1=lonm2 + width;  } else {    lonm2=lonm1 + width;  }  addRange(lonm1,lonm2);}  }
class C{  public void publish(String message,Level level){  try {    publish(new LogRecord(level,message));  } catch (  Exception e) {    throw new RuntimeException("Error writing a log-like message.",e);  }}  }
class C{  private static int encode(int n){  return n < 0 ? ((-n << 1) + 1) : (n << 1);}  }
class C{  public DialogueState(BNetwork network){  super();  super.reset(network);  evidence=new Assignment();  parameterVars=new HashSet<String>();  incrementalVars=new HashSet<String>();}  }
class C{  public AbTitleBar(Context context){  super(context);  ininTitleBar(context);}  }
class C{  public static void main(String[] args){  runClassifier(new NaiveBayesMultinomialUpdateable(),args);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return sage.plugin.CorePluginManager.getInstance().getPluginProgress();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.635 -0500",hash_original_method="C444A575AEA295F9C8E995BA1405A425",hash_generated_method="F4FA90B78B2EB701CCA6C72BBED426F8") public void onSelectionStringChange(String selectionString){  if (DEBUG) {    Log.d(LOG_TAG,"Selection string: " + selectionString);  }  mIsLastSelectionStringNull=(selectionString == null);  if (mScheduledEventStack.isEmpty()) {    return;  }  AccessibilityEvent event=mScheduledEventStack.pop();  if (event != null) {    event.getText().add(selectionString);    sendAccessibilityEvent(event);  }}  }
class C{  public static double gaussian(double mean,double stddev){  return mean + stddev * gaussian();}  }
class C{  @LargeTest public void testErrorUnhandledHttpCode() throws Exception {  Uri uri=getServerUri(DEFAULT_FILENAME);  enqueueResponse(buildResponse(HTTP_PARTIAL_CONTENT));  doErrorTest(uri,DownloadManager.ERROR_UNHANDLED_HTTP_CODE);}  }
class C{  protected BaseDuration(long startInstant,long endInstant){  super();  iMillis=FieldUtils.safeAdd(endInstant,-startInstant);}  }
class C{  public void run(){  try {    ServerSocket serverSocket=new ServerSocket(serverPort);    Socket socket;    System.out.println("LinkServerStarter: running on port " + serverPort);    while (true) {      socket=serverSocket.accept();      System.out.println("LinkServer: fielding connection");      ((Thread)startNewServer(socket)).start();    }  } catch (  java.io.IOException ioe) {    System.err.println("LinkServer: IOException while running:");    System.err.println(ioe);  }}  }
class C{  private static boolean less(Comparable v,Comparable w){  return v.compareTo(w) < 0;}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId,AuthScheme authScheme,String keyStorePath,String keyStorePassword) throws SyncException {  init(nodes,thisNodeId,authScheme,keyStorePath,keyStorePassword);}  }
class C{  public boolean isBypass(){  return bypass;}  }
class C{  public double entropyNMISqrt(){  if (entropyFirst() * entropySecond() <= 0) {    return entropyMutualInformation();  }  return (entropyMutualInformation() / Math.sqrt(entropyFirst() * entropySecond()));}  }
class C{  protected void uninstallDefaults(){  LookAndFeel.installColorsAndFont(comboBox,"ComboBox.background","ComboBox.foreground","ComboBox.font");  LookAndFeel.uninstallBorder(comboBox);}  }
class C{  public static void main(String[] argv){  runFilter(new RemoveType(),argv);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.NUMERIC_LITERAL;}  }
class C{  public DiscoveryNode localNode(){  return nodes.get(localNodeId);}  }
class C{  public IIRFilter init(final float freq,float q){  float theta=sampleRateRadians * freq;  float si=sinTable.sin(theta);  float co=sinTable.cos(theta);  alpha=si / q;  a0=1f / (1 + alpha);  a1=-2 * co;  a2=1 - alpha;switch (type) {case LOWPASS:    b0=b2=(1f - co) * 0.5f;  b1=1f - co;break;case HIGHPASS:b0=b2=(1f + co) * 0.5f;b1=-(1f + co);break;case BANDPASS:b0=si * 0.5f;b1=0;b2=-si * 0.5f;break;}return this;}  }
class C{  private void parseArguments(final String[] args){  if (args.length == 0) {    System.out.println("Too few arguments.");    System.exit(1);  }  Iterator<String> argIter=new ArgumentParser(args).iterator();  String arg=argIter.next();  if (arg.equals("-h") || arg.equals("--help")) {    System.exit(0);  } else {    this.configfile=arg;    if (argIter.hasNext()) {      System.out.println("Too many arguments.");      System.exit(1);    }  }}  }
class C{  public static void serializeTo(Object obj,HeapDataOutputStream hdos) throws IOException {  final int startBytes=hdos.size();  final long start=startSerialization();  DataSerializer.writeObject(obj,hdos);  endSerialization(start,hdos.size() - startBytes);}  }
class C{  void ensureExistenceRepoRootInWorkingDirectory() throws GitException {  if (isInsideWorkTree()) {    final EmptyGitCommand emptyGitCommand=nativeGit.createEmptyGitCommand();    emptyGitCommand.setNextParameter("rev-parse").setNextParameter("--git-dir").execute();    final String gitDir=emptyGitCommand.getText();    if (!gitDir.startsWith(mountRoot.getAbsolutePath()) && !gitDir.equals(".git")) {      throw new GitException("Project is not a git repository.");    }  } else {    throw new GitException("Project is not a git repository.");  }}  }
class C{  public void connect(Navigator navigator){  if (navigator != null && navigator != this) {    addNavigationListener(navigator);    navigator.addNavigationListener(this);  }}  }
class C{  private void showMessage(String number,String order){  Intent intent=new Intent(MainActivity.this,OrderActivity.class);  intent.putExtra("ORDER_NUMBER",number);  intent.putExtra("ORDER_MESSAGE",order);  startActivity(intent);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private static IAbstractNode convertOr(final CommonTree ast) throws RecognitionException {  final List<IAbstractNode> children=new ArrayList<IAbstractNode>();  for (  final Object childObject : ast.getChildren()) {    children.add(convert((CommonTree)childObject));  }  return new CAbstractOrExpression(children);}  }
class C{  public static String toString(Object object,String tagName) throws JSONException {  StringBuilder sb=new StringBuilder();  int i;  JSONArray ja;  JSONObject jo;  String key;  Iterator<String> keys;  int length;  String string;  Object value;  if (object instanceof JSONObject) {    if (tagName != null) {      sb.append('<');      sb.append(tagName);      sb.append('>');    }    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next();      value=jo.opt(key);      if (value == null) {        value="";      }      string=value instanceof String ? (String)value : null;      if ("content".equals(key)) {        if (value instanceof JSONArray) {          ja=(JSONArray)value;          length=ja.length();          for (i=0; i < length; i+=1) {            if (i > 0) {              sb.append('\n');            }            sb.append(escape(ja.get(i).toString()));          }        } else {          sb.append(escape(value.toString()));        }      } else       if (value instanceof JSONArray) {        ja=(JSONArray)value;        length=ja.length();        for (i=0; i < length; i+=1) {          value=ja.get(i);          if (value instanceof JSONArray) {            sb.append('<');            sb.append(key);            sb.append('>');            sb.append(toString(value));            sb.append("</");            sb.append(key);            sb.append('>');          } else {            sb.append(toString(value,key));          }        }      } else       if ("".equals(value)) {        sb.append('<');        sb.append(key);        sb.append("/>");      } else {        sb.append(toString(value,key));      }    }    if (tagName != null) {      sb.append("</");      sb.append(tagName);      sb.append('>');    }    return sb.toString();  } else {    if (object.getClass().isArray()) {      object=new JSONArray(object);    }    if (object instanceof JSONArray) {      ja=(JSONArray)object;      length=ja.length();      for (i=0; i < length; i+=1) {        sb.append(toString(ja.opt(i),tagName == null ? "array" : tagName));      }      return sb.toString();    } else {      string=(object == null) ? "null" : escape(object.toString());      return (tagName == null) ? "\"" + string + "\"" : (string.length() == 0) ? "<" + tagName + "/>" : "<" + tagName + ">"+ string+ "</"+ tagName+ ">";    }  }}  }
class C{  public PathMatcherTerm(PathMatcher pathMatcher,boolean recursive,boolean cumulative){  this.term=pathMatcher;  this.recursive=recursive;  this.cumulative=cumulative;}  }
class C{  private void updateAmtHeader(){  MCommissionAmt amt=new MCommissionAmt(getCtx(),getC_CommissionAmt_ID(),get_TrxName());  amt.calculateCommission();  amt.saveEx();}  }
class C{  public void filledCircle(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("circle radius can't be negative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  private int contentMoveDown(int dy,RecyclerView.Recycler recycler){  int actualDy=dy;  int maxHeightItemIndex=getMaxHeightLayoutPositionInLine(0);  View maxHeightItem=getChildAt(maxHeightItemIndex);  int offScreenTop=topVisibleEdge() - getDecoratedTop(maxHeightItem);  if (offScreenTop > Math.abs(actualDy)) {    offsetChildrenVertical(-dy);    return dy;  }  while (getChildAdapterPosition(0) > 0) {    addNewLineAtTop(recycler);    maxHeightItemIndex=getMaxHeightLayoutPositionInLine(0);    maxHeightItem=getChildAt(maxHeightItemIndex);    offScreenTop+=getDecoratedMeasuredHeight(maxHeightItem);    if (offScreenTop >= Math.abs(dy)) {      break;    }  }  if (offScreenTop < Math.abs(dy)) {    actualDy=-offScreenTop;  }  offsetChildrenVertical(-actualDy);  while (!lineVisible(getChildCount() - 1)) {    recycleLine(getChildCount() - 1,recycler);  }  firstChildAdapterPosition=getChildAdapterPosition(0);  return actualDy;}  }
class C{  public static void initDefaultFlowMod(OFFlowMod fm,String entryName){  fm.setIdleTimeout((short)0);  fm.setHardTimeout((short)0);  fm.setBufferId(OFPacketOut.BUFFER_ID_NONE);  fm.setCommand((short)0);  fm.setFlags((short)0);  fm.setOutPort(OFPort.OFPP_NONE.getValue());  fm.setCookie(computeEntryCookie(fm,0,entryName));  fm.setPriority(Short.MAX_VALUE);}  }
class C{  public BitemporalCondition vtFrom(Object vtFrom){  this.vtFrom=vtFrom;  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.SIF__ELSE:    return basicSetElse(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @SideEffectFree @Override public ImmutableSet<Map.Entry<K,V>> entries(){  ImmutableSet<Map.Entry<K,V>> result=entries;  return (result == null) ? (entries=ImmutableSet.copyOf(super.entries())) : result;}  }
class C{  public Builder(Context context){  this.context=context;}  }
class C{  public boolean isDone(){  return false;}  }
class C{  @Override public void show(float translationX,float translationY){}  }
class C{  public ContainerInfo inspectContainer(String container) throws IOException {  return doInspectContainer(container,dockerDaemonUri);}  }
class C{  public OptionGroup(String name,String key){  this.name=name;  this.key=key;}  }
class C{  AudioCapabilities(int[] supportedEncodings,int maxChannelCount){  if (supportedEncodings != null) {    this.supportedEncodings=Arrays.copyOf(supportedEncodings,supportedEncodings.length);    Arrays.sort(this.supportedEncodings);  } else {    this.supportedEncodings=new int[0];  }  this.maxChannelCount=maxChannelCount;}  }
class C{  public StackedViewAction(final VisionWorld visionWorld){  super("Stacked view");  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  putValue(SMALL_ICON,ResourceManager.getImageIcon("gridOffset.png"));  this.visionWorld=visionWorld;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.508 -0500",hash_original_method="A6495E0C14482D9554C3F987B616D040",hash_generated_method="F7D2B2F3DFF01541550944824DDBFEE7") public void onRinging(SipSession session,SipProfile caller,String sessionDescription){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static List<String> readLines(URL self,String charset) throws IOException {  return IOGroovyMethods.readLines(newReader(self,charset));}  }
class C{  protected SecretKey engineGenerateKey(){  SecretKeySpec aesKey=null;  if (this.random == null) {    this.random=SunJCE.getRandom();  }  byte[] keyBytes=new byte[keySize];  this.random.nextBytes(keyBytes);  aesKey=new SecretKeySpec(keyBytes,"AES");  return aesKey;}  }
class C{  default Builder withDatabase(String databaseName){  return with(DATABASE,databaseName);}  }
class C{  private final void _writeStringSegments(String text) throws IOException, JsonGenerationException {  int left=text.length();  int offset=0;  final char[] cbuf=_charBuffer;  while (left > 0) {    int len=Math.min(_outputMaxContiguous,left);    text.getChars(offset,offset + len,cbuf,0);    if ((_outputTail + len) > _outputEnd) {      _flushBuffer();    }    _writeStringSegment(cbuf,0,len);    offset+=len;    left-=len;  }}  }
class C{  private void updateLessThanGwt25(List<String> programArgs,int indexDisabled,int indexEnabled){  if (indexDisabled > -1) {    programArgs.remove(indexDisabled);  }  if (indexEnabled > -1) {    programArgs.remove(indexEnabled);  }}  }
class C{  public void deleteLayoutBlock(LayoutBlock block){  deregister(block);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void downloadFile(File file,String rootPassword,String sshPort,String dockerManagerAddress,String completeFilePath) throws CheckException {  Channel channel=null;  try {    String dockerManagerIP=dockerManagerAddress.substring(0,dockerManagerAddress.length() - 5);    channel=this.getSession("root",rootPassword,dockerManagerIP,sshPort).openChannel("sftp");    channel.connect();    ChannelSftp sftpChannel=(ChannelSftp)channel;    sftpChannel.get(completeFilePath,file.getAbsolutePath());    logger.debug("File received correctly");  } catch (  SftpException|JSchException e) {    e.printStackTrace();    throw new CheckException("Error during file downloading",e);  } finally {    try {      if (channel != null) {        channel.disconnect();      }    } catch (    Exception ignore) {    }  }}  }
class C{  static String indentXPathText(String xp){  if ((xp.length() > 2) && (!Character.isWhitespace(xp.charAt(0)))) {    return "\n" + xp + "\n";  }  return xp;}  }
class C{  public static boolean isWater(Block block){  if (block == null)   return false;  return block.getMaterial() == Material.water;}  }
class C{  protected void analyze(){  Arrays.asList(this.dto.getMethods()).stream().filter(null).forEach(null);  fieldAttributes.entrySet().stream().forEach(null);}  }
class C{  public void mark(int readAheadLimit) throws IOException {synchronized (lock) {    ensureOpen();    markedPos=pos;  }}  }
class C{  @Override public void extentWrite(ObjectReference src,Address slot,Extent value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.extentWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  public JSONObject fetchDiff() throws IOException, ConduitAPIException {  JSONObject params=new JSONObject().element("ids",new String[]{diffID});  JSONObject query=this.callConduit("differential.querydiffs",params);  JSONObject response;  try {    response=query.getJSONObject("result");  } catch (  JSONException e) {    throw new ConduitAPIException(String.format("No 'result' object found in conduit call: (%s) %s",e.getMessage(),query.toString(2)));  }  try {    return response.getJSONObject(diffID);  } catch (  JSONException e) {    throw new ConduitAPIException(String.format("Unable to find '%s' key in 'result': (%s) %s",diffID,e.getMessage(),response.toString(2)));  }}  }
class C{  public Boolean hasBeenStopped(){  return runner.hasBeenStopped();}  }
class C{  @Override public void close(){  if (null != m_chunkcollector) {    m_chunkcollector.close();    m_chunkcollector=null;  }  if (null != m_bufcollector) {    m_bufcollector.close();    m_bufcollector=null;  }}  }
class C{  public boolean elementAvailable(String ns,String elemName) throws javax.xml.transform.TransformerException {  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String assignmentFieldName;  int assignmentFieldNum=-1;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double rowYCoord, colXCoord, value, z;  int progress=0;  double cellSize=-1.0;  int rows, topRow, bottomRow, leftCol, rightCol;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  Object[][] allRecords=null;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  boolean useRecID=false;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  assignmentFieldName=args[2];  if (args[3].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[4]);  }  baseFileHeader=args[5];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    int numRecs=input.getNumberOfRecords();    if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {      showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(assignmentFieldName)) {        assignmentFieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          dataType=WhiteboxRasterBase.DataType.FLOAT;        } else {          showFeedback("The type of data contained in the field " + "can not be mapped into grid cells. Choose a " + "numerical field. The record ID will be used "+ "instead.");          useRecID=true;        }      }    }    if (assignmentFieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      if (backgroundValue == noData) {        output.setNoDataValue(noData);      }    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : input.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    if (!useRecID) {      allRecords=new Object[numRecs][numberOfFields];      int a=0;      while ((data=reader.nextRecord()) != null) {        System.arraycopy(data,0,allRecords[a],0,numberOfFields);        a++;      }    }    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    RowPriorityGridCell cell;    int numRecords=input.getNumberOfRecords();    int count=0;    int progressCount=(int)(numRecords / 100.0);    if (progressCount <= 0) {      progressCount=1;    }    ShapeFileRecord record;    for (    RecordInfo ri : myList) {      record=input.getRecord(ri.recNumber - 1);      if (!useRecID) {        data=reader.nextRecord();        value=Double.valueOf(data[assignmentFieldNum].toString());      } else {        value=record.getRecordNumber();      }      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        box=new BoundingBox();        startingPointInPart=partData[part];        if (part < numParts - 1) {          endingPointInPart=partData[part + 1];        } else {          endingPointInPart=numPoints;        }        for (i=startingPointInPart; i < endingPointInPart; i++) {          if (geometry[i][0] < box.getMinX()) {            box.setMinX(geometry[i][0]);          }          if (geometry[i][0] > box.getMaxX()) {            box.setMaxX(geometry[i][0]);          }          if (geometry[i][1] < box.getMinY()) {            box.setMinY(geometry[i][1]);          }          if (geometry[i][1] > box.getMaxY()) {            box.setMaxY(geometry[i][1]);          }        }        topRow=output.getRowFromYCoordinate(box.getMaxY());        bottomRow=output.getRowFromYCoordinate(box.getMinY());        leftCol=output.getColumnFromXCoordinate(box.getMinX());        rightCol=output.getColumnFromXCoordinate(box.getMaxX());        for (row=topRow; row <= bottomRow; row++) {          rowYCoord=output.getYCoordinateFromRow(row);          for (i=startingPointInPart; i < endingPointInPart - 1; i++) {            if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {              y1=geometry[i][1];              y2=geometry[i + 1][1];              if (y2 != y1) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                col=output.getColumnFromXCoordinate(xPrime);                pq.add(new RowPriorityGridCell(row,col,value));              }            }          }        }        for (col=leftCol; col <= rightCol; col++) {          colXCoord=output.getXCoordinateFromColumn(col);          for (i=startingPointInPart; i < endingPointInPart - 1; i++) {            if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {              x1=geometry[i][0];              x2=geometry[i + 1][0];              if (x1 != x2) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                row=output.getRowFromYCoordinate(yPrime);                pq.add(new RowPriorityGridCell(row,col,value));              }            }          }        }      }      if (pq.size() >= flushSize) {        j=0;        numCellsToWrite=pq.size();        do {          cell=pq.poll();          output.setValue(cell.row,cell.col,cell.z);          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      if (cancelOp) {        cancelOperation();        return;      }      count++;      if (count % progressCount == 0) {        progress++;        updateProgress(progress);      }    }    j=0;    numCellsToWrite=pq.size();    do {      cell=pq.poll();      output.setValue(cell.row,cell.col,cell.z);      j++;      if (j % 1000 == 0) {        if (cancelOp) {          cancelOperation();          return;        }        updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));      }    } while (pq.size() > 0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public TemporaryQueue createTemporaryQueue() throws JMSException {  if (cri.getType() == ActiveMQRAConnectionFactory.TOPIC_CONNECTION || cri.getType() == ActiveMQRAConnectionFactory.XA_TOPIC_CONNECTION) {    throw new IllegalStateException("Cannot create temporary queue for javax.jms.TopicSession");  }  lock();  try {    Session session=getSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createTemporaryQueue " + session);    }    TemporaryQueue temp=session.createTemporaryQueue();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdTemporaryQueue " + session + " temp="+ temp);    }    sf.addTemporaryQueue(temp);    return temp;  }  finally {    unlock();  }}  }
class C{  public UniqueIdentity(DerValue derVal) throws IOException {  id=derVal.getUnalignedBitString(true);}  }
class C{  public static void removeQueryListener(IQueryListener l){  InternalSearchUI.getInstance().removeQueryListener(l);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Map<String,RawProtein<PirsfHmmer3RawMatch>> rawMatches=rawMatchDAO.getRawMatchesForProteinIdsInRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  try {    Map<String,RawProtein<PirsfHmmer3RawMatch>> filteredMatches=postProcessor.process(rawMatches);    filteredMatchDAO.persist(filteredMatches.values());  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to post process filtered PIRSF matches.",e);  }}  }
class C{  public void stop(int delay){  httpSrv.stop(delay);}  }
class C{  private static void checkAxisBounds(Axis axis){  if ((axis.getMin().doubleValue() < 0.0) || (axis.getMax().doubleValue() < 0.0)) {    throw new IllegalStateException("Axis bounds must be greater than or equal to zero for logarithmic axes.");  }}  }
class C{  public Object visit(ASTElseStatement node,Object data){  return showNode(node,data);}  }
class C{  public FractionAtom(Atom num,Atom den,boolean noDef,int unit,float t) throws InvalidUnitException {  SpaceAtom.checkUnit(unit);  numerator=num;  denominator=den;  noDefault=noDef;  thickness=t;  this.unit=unit;  type=TeXConstants.TYPE_INNER;}  }
class C{  public void error(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg) throws TransformerException {  error(srcLctr,styleNode,sourceNode,msg,null);}  }
class C{  public KeyBuilder alt(){  modifiers|=ModifierKeys.ALT;  return this;}  }
class C{  public MAssetGroupAcct copy(MAssetGroup grp){  MAssetGroupAcct newAcct=new MAssetGroupAcct(grp.getCtx(),0,grp.get_TrxName());  copyValues(this,newAcct,grp.getAD_Client_ID(),grp.getAD_Org_ID());  newAcct.setA_Asset_Group_ID(grp.getA_Asset_Group_ID());  return newAcct;}  }
class C{  public Number toNumber(){  if (value instanceof Boolean)   return booleanValue() ? 1 : 0;  if (isNumber())   return (Number)value;  throw new ClassCastException("Variant is not a Number; CompositeClass=" + compositeClass);}  }
class C{  private static String resolvePrincipal(Session session){  String principalName=session.getAttribute(PRINCIPAL_NAME_INDEX_NAME);  if (principalName != null) {    return principalName;  }  SecurityContext securityContext=session.getAttribute("SPRING_SECURITY_CONTEXT");  if (securityContext != null && securityContext.getAuthentication() != null) {    return securityContext.getAuthentication().getName();  }  return "";}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public boolean domainMatch(String domain){  if (domain == null || groupDistinguishedName == null) {    return false;  }  if (StringUtils.isBlank(this.groupDomain)) {    this.groupDomain=getDomainFromDN();  }  if (domain.equalsIgnoreCase(this.groupDomain)) {    return true;  }  return false;}  }
class C{  private RepositoryHolder createRepositoryHolder(RepositoryMetaData repositoryMetaData){  logger.debug("creating repository [{}][{}]",repositoryMetaData.type(),repositoryMetaData.name());  Injector repositoryInjector=null;  try {    ModulesBuilder modules=new ModulesBuilder();    RepositoryName name=new RepositoryName(repositoryMetaData.type(),repositoryMetaData.name());    modules.add(new RepositoryNameModule(name));    modules.add(new RepositoryModule(name,repositoryMetaData.settings(),this.settings,typesRegistry));    repositoryInjector=modules.createChildInjector(injector);    Repository repository=repositoryInjector.getInstance(Repository.class);    IndexShardRepository indexShardRepository=repositoryInjector.getInstance(IndexShardRepository.class);    repository.start();    return new RepositoryHolder(repositoryMetaData.type(),repositoryMetaData.settings(),repositoryInjector,repository,indexShardRepository);  } catch (  Throwable t) {    logger.warn("failed to create repository [{}][{}]",t,repositoryMetaData.type(),repositoryMetaData.name());    throw new RepositoryException(repositoryMetaData.name(),"failed to create repository",t);  }}  }
class C{  private static String determineMacLibrary(final String library){  String resourceName;  String platform="darwin";  String fileExtension="dylib";  resourceName="/" + platform + "/"+ library+ "."+ fileExtension;  return resourceName;}  }
class C{  public static void fill(char[] array,char value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public String validateQuery(SolrQueryRequest req,String... tests) throws Exception {  String res=query(req);  return validateXPath(res,tests);}  }
class C{  public static int toModifier(int accflags){  return accflags;}  }
class C{  public void sync() throws IOException {  if (forceSync) {    nioFile.force(false);  }}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> optVector=new Vector<Option>(3);  optVector.addElement(new Option("\tManual blend setting (default 20%)\n","B",1,"-B <num>"));  optVector.addElement(new Option("\tEnable entropic auto-blend setting (symbolic class only)\n","E",0,"-E"));  optVector.addElement(new Option("\tSpecify the missing value treatment mode (default a)\n" + "\tValid options are: a(verage), d(elete), m(axdiff), n(ormal)\n","M",1,"-M <char>"));  optVector.addAll(Collections.list(super.listOptions()));  return optVector.elements();}  }
class C{  public boolean isHasAlias(){  Object oo=get_Value(COLUMNNAME_HasAlias);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String[] indices(){  return indices;}  }
class C{  public static String toString(boolean[] array){  StringBuffer buf=new StringBuffer();  buf.append("[");  int maxIndex=array.length - 1;  for (int i=0; i <= maxIndex; i++) {    buf.append(array[i]);    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  public DataModelTestCaseBase(String name){  super(name);}  }
class C{  public boolean isIncludeNullsOrgTrx(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsOrgTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String nextToken(boolean trim){  for (int i=0; i < regexps.length; i++) {    if (!matchers[i].region(position,input.length()).lookingAt())     continue;    position=matchers[i].end();    matchingIndex=i;    return (trim ? matchers[i].group().trim() : matchers[i].group());  }  matchingIndex=-1;  return null;}  }
class C{  @Override public String toString(){  return "CUevent[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  public URLImageCache(){}  }
class C{  public long tryOptimisticRead(){  long s;  return (((s=state) & WBIT) == 0L) ? (s & SBITS) : 0L;}  }
class C{  public void addFragment(@NonNull final Fragment from,@NonNull final Fragment to){  if (System.currentTimeMillis() - currentTime > CLICK_SPACE) {    currentTime=System.currentTimeMillis();    FragmentTransaction transaction=context.getSupportFragmentManager().beginTransaction();    if (nextIn != 0 && nextOut != 0 && quitIn != 0 && quitOut != 0) {      transaction.setCustomAnimations(nextIn,nextOut).add(R.id.framLayoutId,to,to.getClass().getName()).setCustomAnimations(nextIn,nextOut).hide(from).commit();    } else {      transaction.add(R.id.framLayoutId,to,to.getClass().getName()).hide(from).commit();    }  }}  }
class C{  public T caseDeclaredTypeWithAccessModifier(DeclaredTypeWithAccessModifier object){  return null;}  }
class C{  public boolean isRunnable(){  return getState().isRunnable();}  }
class C{  private BasicBlock convertBasicBlock(SsaBasicBlock block){  IntList successorList=block.getRopLabelSuccessorList();  int primarySuccessorLabel=block.getPrimarySuccessorRopLabel();  SsaBasicBlock exitBlock=ssaMeth.getExitBlock();  int exitRopLabel=(exitBlock == null) ? -1 : exitBlock.getRopLabel();  if (successorList.contains(exitRopLabel)) {    if (successorList.size() > 1) {      throw new RuntimeException("Exit predecessor must have no other successors" + Hex.u2(block.getRopLabel()));    } else {      successorList=IntList.EMPTY;      primarySuccessorLabel=-1;      verifyValidExitPredecessor(block);    }  }  successorList.setImmutable();  BasicBlock result=new BasicBlock(block.getRopLabel(),convertInsns(block.getInsns()),successorList,primarySuccessorLabel);  return result;}  }
class C{  public ContainsSymbolConstraint(){  super(REGEX);}  }
class C{  private String normalizeUrl(String url){  if (!normalize) {    return url;  }  String normalized=null;  if (urlNormalizers != null) {    try {      normalized=urlNormalizers.normalize(url,URLNormalizers.SCOPE_INDEXER);      normalized=normalized.trim();    } catch (    Exception e) {      LOG.warn("Skipping " + url + ":"+ e);      normalized=null;    }  }  return normalized;}  }
class C{  public void zoomReset(){  if (mFitZoom != null) {    mFitZoom.apply();    mZoomIn.notifyZoomResetListeners();    repaint();  }}  }
class C{  private void updateEmptyStatus(){  boolean empty=getAdapter() == null || getAdapter().isEmpty();  if (isInFilterMode()) {    empty=false;  }  View emptyView=getEmptyView();  if (empty) {    if (emptyView != null) {      emptyView.setVisibility(View.VISIBLE);      setVisibility(View.GONE);    } else {      setVisibility(View.VISIBLE);    }    if (mDataChanged) {      this.onLayout(false,getLeft(),getTop(),getRight(),getBottom());    }  } else {    if (emptyView != null) {      emptyView.setVisibility(View.GONE);    }    setVisibility(View.VISIBLE);  }}  }
class C{  ObjectStreamField(String signature,String name){  if (name == null) {    throw new NullPointerException("name == null");  }  this.name=name;  this.typeString=signature.replace('.','/').intern();  defaultResolve();  this.isDeserialized=true;}  }
class C{  @NonNull public static Date toLastSecond(@NonNull Date date){  Date followingDay=getFollowingDay(date);  Calendar calendar=DateUtils.toCalendar(followingDay);  calendar.add(Calendar.SECOND,-1);  return calendar.getTime();}  }
class C{  public static UsernameAttribute createUsernameAttribute(byte username[]){  UsernameAttribute attribute=new UsernameAttribute();  attribute.setUsername(username);  return attribute;}  }
class C{  public static void updateMail(){  String envName=Ini.getAdempiereHome();  if (envName == null)   return;  envName+=File.separator + "AdempiereEnv.properties";  File envFile=new File(envName);  if (!envFile.exists())   return;  Properties env=new Properties();  try {    FileInputStream in=new FileInputStream(envFile);    env.load(in);    in.close();  } catch (  Exception e) {    return;  }  String updated=env.getProperty("ADEMPIERE_MAIL_UPDATED");  if (updated != null && updated.equals("Y"))   return;  String server=env.getProperty("ADEMPIERE_MAIL_SERVER");  if (server == null || server.length() == 0)   return;  String adminEMail=env.getProperty("ADEMPIERE_ADMIN_EMAIL");  if (adminEMail == null || adminEMail.length() == 0)   return;  String mailUser=env.getProperty("ADEMPIERE_MAIL_USER");  if (mailUser == null || mailUser.length() == 0)   return;  String mailPassword=env.getProperty("ADEMPIERE_MAIL_PASSWORD");  StringBuffer sql=new StringBuffer("UPDATE AD_Client SET").append(" SMTPHost=").append(DB.TO_STRING(server)).append(", RequestEMail=").append(DB.TO_STRING(adminEMail)).append(", RequestUser=").append(DB.TO_STRING(mailUser)).append(", RequestUserPW=").append(DB.TO_STRING(mailPassword)).append(", IsSMTPAuthorization='Y' WHERE AD_Client_ID=0");  int no=DB.executeUpdate(sql.toString(),null);  log.fine("Client #" + no);  sql=new StringBuffer("UPDATE AD_User SET ").append(" EMail=").append(DB.TO_STRING(adminEMail)).append(", EMailUser=").append(DB.TO_STRING(mailUser)).append(", EMailUserPW=").append(DB.TO_STRING(mailPassword)).append(" WHERE AD_User_ID IN (0,100)");  no=DB.executeUpdate(sql.toString(),null);  log.fine("User #" + no);  try {    env.setProperty("ADEMPIERE_MAIL_UPDATED","Y");    FileOutputStream out=new FileOutputStream(envFile);    env.store(out,"");    out.flush();    out.close();  } catch (  Exception e) {  }}  }
class C{  private Set<String> pickReplicasTobeDeleted(Slice slice,String shard,String collectionName,int count){  validateReplicaAvailability(slice,shard,collectionName,count);  Collection<Replica> allReplicas=slice.getReplicas();  Set<String> replicasToBeRemoved=new HashSet<String>();  Replica leader=slice.getLeader();  for (  Replica replica : allReplicas) {    if (count == 0) {      break;    }    if (leader.getCoreName().equals(replica.getCoreName())) {      continue;    }    replicasToBeRemoved.add(replica.getName());    count--;  }  return replicasToBeRemoved;}  }
class C{  public static RefactoringStatus checkTypeParameterName(String name,IJavaElement context){  return checkName(name,JavaConventionsUtil.validateTypeVariableName(name,context));}  }
class C{  public BigInteger[] generateSignature(byte[] message){  DSAParameters params=key.getParameters();  BigInteger q=params.getQ();  BigInteger m=calculateE(q,message);  BigInteger x=((DSAPrivateKeyParameters)key).getX();  if (kCalculator.isDeterministic()) {    kCalculator.init(q,x,message);  } else {    kCalculator.init(q,random);  }  BigInteger k=kCalculator.nextK();  BigInteger r=params.getG().modPow(k,params.getP()).mod(q);  k=k.modInverse(q).multiply(m.add(x.multiply(r)));  BigInteger s=k.mod(q);  return new BigInteger[]{r,s};}  }
class C{  public NameGetter(Locale _locale){  this.locale=_locale;}  }
class C{  protected Query newPhraseQuery(String text,int slop){  BooleanQuery.Builder bq=new BooleanQuery.Builder();  for (  Map.Entry<String,Float> entry : weights.entrySet()) {    Query q=createPhraseQuery(entry.getKey(),text,slop);    if (q != null) {      float boost=entry.getValue();      if (boost != 1f) {        q=new BoostQuery(q,boost);      }      bq.add(q,BooleanClause.Occur.SHOULD);    }  }  return simplify(bq.build());}  }
class C{  public byte[] createImageFromLayers(Projection proj,int scaledWidth,int scaledHeight,List<Layer> showLayers){  return createImageFromLayers(proj,scaledWidth,scaledHeight,showLayers,getBackground());}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  public NBTTagCompound writeToNBT(NBTTagCompound nbt){  nbt.setTag("item",this.original.writeToNBT(new NBTTagCompound()));  return nbt;}  }
class C{  @Override public Candidates foldEdges(Candidates candidates,Long v1,Long v2,NullValue edgeVal) throws Exception {  return candidates.merge(edgeToCandidate(v1,v2));}  }
class C{  public void testFindSingleIssue() throws Exception {  Task[] found=myRepository.getIssues("UT-6",0,1,true);  assertEquals(1,found.length);  assertEquals("Summary contains 'bar'",found[0].getSummary());}  }
class C{  public static <E>FastList<E> newWithNValues(int size,Function0<E> factory){  FastList<E> newFastList=FastList.newList(size);  for (int i=0; i < size; i++) {    newFastList.add(factory.value());  }  return newFastList;}  }
class C{  public boolean forEachEntry(TLongDoubleProcedure procedure){  byte[] states=_states;  long[] keys=_set;  double[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public static boolean isHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDBFF);}  }
class C{  @SuppressWarnings("unchecked") public void removeAllEdges(Object from,Object to){  if (!containsAnyEdge(from,to))   return;  List labels=this.getLabelsForEdges(from,to);  List lablesClone=new ArrayList();  lablesClone.addAll(labels);  for (  Object label : lablesClone) {    this.removeEdge(from,to,label);  }}  }
class C{  public Pair<InputDocument,List<InputDocument>> selectSample(List<InputDocument> documents,int n){  int i=random.nextInt(documents.size());  InputDocument testDoc=documents.get(i);  List<InputDocument> others=filter(documents,null);  List<InputDocument> corpusSubset=getRandomDocuments(others,n);  return new Pair<>(testDoc,corpusSubset);}  }
class C{  public static Set<Emoticon> parseRoomEmotes(String json){  try {    JSONParser parser=new JSONParser();    JSONObject o=(JSONObject)parser.parse(json);    JSONObject room=(JSONObject)o.get("room");    String roomId=(String)room.get("id");    int set=((Number)room.get("set")).intValue();    JSONObject sets=(JSONObject)o.get("sets");    JSONObject setData=(JSONObject)sets.get(String.valueOf(set));    return parseEmoteSet(setData,roomId,null);  } catch (  ParseException|ClassCastException|NullPointerException ex) {    LOGGER.warning("Error parsing FFZ emotes: " + ex);  }  return new HashSet<>();}  }
class C{  private void checkDuplicateImageServer(URI id,String imageServerAddress,String imageServerName){  if (StringUtils.isNotBlank(imageServerName)) {    checkDuplicateLabel(ComputeImageServer.class,imageServerName);  }  List<URI> existingImageServers=_dbClient.queryByType(ComputeImageServer.class,false);  for (  URI uri : existingImageServers) {    ComputeImageServer existing=_dbClient.queryObject(ComputeImageServer.class,uri);    if (existing == null || existing.getInactive() || existing.getId().equals(id)) {      continue;    }    if (existing.getImageServerIp() != null && imageServerAddress != null && existing.getImageServerIp().equalsIgnoreCase(imageServerAddress)) {      throw APIException.badRequests.resourceExistsWithSameName(imageServerAddress);    }  }}  }
class C{  public static void assertEntryEquals(SynonymMap synonynMap,String word,boolean includeOrig,String[] synonyms) throws Exception {  word=word.replace(' ',SynonymMap.WORD_SEPARATOR);  BytesRef value=Util.get(synonynMap.fst,Util.toUTF32(new CharsRef(word),new IntsRefBuilder()));  assertNotNull("No synonyms found for: " + word,value);  ByteArrayDataInput bytesReader=new ByteArrayDataInput(value.bytes,value.offset,value.length);  final int code=bytesReader.readVInt();  final boolean keepOrig=(code & 0x1) == 0;  assertEquals("Include original different than expected. Expected " + includeOrig + " was "+ keepOrig,includeOrig,keepOrig);  final int count=code >>> 1;  assertEquals("Invalid synonym count. Expected " + synonyms.length + " was "+ count,synonyms.length,count);  Set<String> synonymSet=new HashSet<>(Arrays.asList(synonyms));  BytesRef scratchBytes=new BytesRef();  for (int i=0; i < count; i++) {    synonynMap.words.get(bytesReader.readVInt(),scratchBytes);    String synonym=scratchBytes.utf8ToString().replace(SynonymMap.WORD_SEPARATOR,' ');    assertTrue("Unexpected synonym found: " + synonym,synonymSet.contains(synonym));  }}  }
class C{  public static boolean isCategory(int M_Product_Category_ID,int M_Product_ID){  if (M_Product_ID == 0 || M_Product_Category_ID == 0)   return false;  Integer product=new Integer(M_Product_ID);  Integer category=(Integer)s_products.get(product);  if (category != null)   return category.intValue() == M_Product_Category_ID;  String sql="SELECT M_Product_Category_ID FROM M_Product WHERE M_Product_ID=?";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,M_Product_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     category=new Integer(rs.getInt(1));    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  if (category != null) {    s_products.put(product,category);    s_log.fine("M_Product_ID=" + M_Product_ID + "("+ category+ ") in M_Product_Category_ID="+ M_Product_Category_ID+ " - "+ (category.intValue() == M_Product_Category_ID));    return category.intValue() == M_Product_Category_ID;  }  s_log.log(Level.SEVERE,"Not found M_Product_ID=" + M_Product_ID);  return false;}  }
class C{  public WETriangleMesh(String name){  this(name,DEFAULT_NUM_VERTICES,DEFAULT_NUM_FACES);}  }
class C{  public IndicesAliasesRequest removeAlias(String[] indices,String... aliases){  addAliasAction(new AliasActions(AliasAction.Type.REMOVE,indices,aliases));  return this;}  }
class C{  @Override public void sessionCreated(HttpSessionEvent event){  log("sessionCreated('" + event.getSession().getId() + "')");}  }
class C{  public static void begin(){  logger=new Logger("Verification",Logger.ATTR_TIME);  worker=new VerificationWorker();  worker.start();}  }
class C{  public void trapFieldWrite(String name,Object value){  Class jc=getJavaClass();  try {    jc.getField(name).set(null,value);  } catch (  NoSuchFieldException e) {    throw new RuntimeException(e.toString());  }catch (  IllegalAccessException e) {    throw new RuntimeException(e.toString());  }}  }
class C{  public void calcMinTick(){  minTick=1;  if (minData > 1) {    while ((minTick * 10) < minData)     minTick*=10;  } else   if (minData < 1) {    while (minTick > minData)     minTick/=10;  }}  }
class C{  public BeanFactoryException(String msg){  super(msg);}  }
class C{  public static _QueryMembership fromString(final String value) throws SOAPSerializationException {  return (_QueryMembership)Enumeration.fromString(value,_QueryMembership.VALUES_TO_INSTANCES);}  }
class C{  public static void removeCSSClass(Element e,String cssclass){  String oldval=e.getAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE);  if (oldval == null) {    return;  }  String[] classes=oldval.split(" ");  if (classes.length == 1) {    if (cssclass.equals(classes[0])) {      e.removeAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE);    }  } else   if (classes.length == 2) {    if (cssclass.equals(classes[0])) {      if (cssclass.equals(classes[1])) {        e.removeAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE);      } else {        e.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE,classes[1]);      }    } else     if (cssclass.equals(classes[1])) {      e.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE,classes[0]);    }  } else {    StringBuilder joined=new StringBuilder();    for (    String c : classes) {      if (!c.equals(cssclass)) {        if (joined.length() > 0) {          joined.append(' ');        }        joined.append(c);      }    }    e.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE,joined.toString());  }}  }
class C{  protected static void requestParamToSession(HttpServletRequest httpRequest,String parameterName){  String parameterValue=httpRequest.getParameter(parameterName);  if (!ADMStringUtils.isBlank(parameterValue)) {    httpRequest.getSession().setAttribute(parameterName,parameterValue);  }}  }
class C{  public XMPPException(String message,Throwable wrappedThrowable){  super(message);  this.wrappedThrowable=wrappedThrowable;}  }
class C{  public Avg2(){  super("avg2",2);}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference badEntityRef;  doc=(Document)load("hc_staff",true);  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        badEntityRef=doc.createEntityReference("foo");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {{      boolean success=false;      try {        badEntityRef=doc.createEntityReference("");      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  private void incrementCurrentInterval(){  if (currentIntervalMillis >= maxIntervalMillis / multiplier) {    currentIntervalMillis=maxIntervalMillis;  } else {    currentIntervalMillis*=multiplier;  }}  }
class C{  public CursorBuilder beforeFirst(){  _beforeFirst=true;  return this;}  }
class C{  private Token viewToToken(Point p){  return modelToToken(viewToModel(p));}  }
class C{  private void checkLowerValue(){  if (lowerValue < minimum) {    lowerValue=minimum;  }  if (lowerValue > maximum) {    lowerValue=maximum;  }  if (lowerValue > upperValue) {    lowerValue=upperValue;  }}  }
class C{  public static Date minus(Date self,int days){  return plus(self,-days);}  }
class C{  public void close(){  Logger.getRootLogger().removeAppender(splashOutputWriter);  dispose();}  }
class C{  public static int round(Float number){  return Math.round(number.floatValue());}  }
class C{  protected InputStream _optimizedStreamFromURL(URL url) throws IOException {  if ("file".equals(url.getProtocol())) {    String host=url.getHost();    if (host == null || host.length() == 0) {      return new FileInputStream(url.getPath());    }  }  return url.openStream();}  }
class C{  private double[] calcCenter(double[][] points,int worstIdx){  double[] center=new double[points[0].length];  for (int i=0; i < points.length; i++) {    if (i == worstIdx)     continue;    for (int j=0; j < center.length; j++) {      center[j]+=points[i][j];    }  }  for (int j=0; j < center.length; j++) {    center[j]/=points.length;  }  return center;}  }
class C{  @Override protected void firePropertyChange(int action){  super.firePropertyChange(action);}  }
class C{  @Override public void refresh(){  if (filterMode) {    powerModeLabel.setText("-");    registerSetCombo.setEnabled(false);    pcTextField.setText((cpuStateValidityFlags.pc == 0) ? "" : Format.asHex(cpuState.pc,8));    pcIsaMode16bCheckBox.setSelected(cpuStateValidityFlags.pc == 0 && ((TxCPUState)cpuState).is16bitIsaMode);    hiTextField.setText((cpuStateValidityFlags.getReg(TxCPUState.HI) == 0) ? "" : Format.asHex(cpuState.getReg(TxCPUState.HI),8));    loTextField.setText((cpuStateValidityFlags.getReg(TxCPUState.LO) == 0) ? "" : Format.asHex(cpuState.getReg(TxCPUState.LO),8));    statusTextField.setText((cpuStateValidityFlags.getReg(TxCPUState.Status) == 0) ? "" : maskValue(cpuState.getReg(TxCPUState.Status),cpuStateValidityFlags.getReg(TxCPUState.Status),32));    causeTextField.setText((cpuStateValidityFlags.getReg(TxCPUState.Cause) == 0) ? "" : maskValue(cpuState.getReg(TxCPUState.Cause),cpuStateValidityFlags.getReg(TxCPUState.Cause),32));    epcTextField.setText((cpuStateValidityFlags.getReg(TxCPUState.EPC) == 0) ? "" : Format.asHex(cpuState.getReg(TxCPUState.EPC),8));    errorEpcTextField.setText((cpuStateValidityFlags.getReg(TxCPUState.ErrorEPC) == 0) ? "" : Format.asHex(cpuState.getReg(TxCPUState.ErrorEPC),8));    badVAddrTextField.setText((cpuStateValidityFlags.getReg(TxCPUState.BadVAddr) == 0) ? "" : Format.asHex(cpuState.getReg(TxCPUState.BadVAddr),8));    sscrTextField.setText((cpuStateValidityFlags.getReg(TxCPUState.SSCR) == 0) ? "" : Format.asHex(cpuState.getReg(TxCPUState.SSCR),8));    for (int i=0; i < regTextFields.length; i++) {      regTextFields[i].setText((cpuStateValidityFlags.getReg(i) == 0) ? "" : Format.asHex(cpuState.getReg(i),8));    }  } else {    displayedRegisterSet=((TxCPUState)cpuState).getSscrCSS();    updateAndColorLabel(powerModeLabel,((TxCPUState)cpuState).getPowerMode().name());    updateAndColorCombo(registerSetCombo,displayedRegisterSet);    updateAndColorTextField(pcTextField,Format.asHex(cpuState.pc,8));    updateAndColorCheckBox(pcIsaMode16bCheckBox,((TxCPUState)cpuState).is16bitIsaMode);    updateAndColorTextField(hiTextField,Format.asHex(cpuState.getReg(TxCPUState.HI),8));    updateAndColorTextField(loTextField,Format.asHex(cpuState.getReg(TxCPUState.LO),8));    updateAndColorTextField(statusTextField,Format.asBinary(cpuState.getReg(TxCPUState.Status),32));    updateAndColorTextField(causeTextField,Format.asBinary(cpuState.getReg(TxCPUState.Cause),32));    updateAndColorTextField(epcTextField,Format.asHex(cpuState.getReg(TxCPUState.EPC),8));    updateAndColorTextField(errorEpcTextField,Format.asHex(cpuState.getReg(TxCPUState.ErrorEPC),8));    updateAndColorTextField(badVAddrTextField,Format.asHex(cpuState.getReg(TxCPUState.BadVAddr),8));    updateAndColorTextField(sscrTextField,Format.asHex(cpuState.getReg(TxCPUState.SSCR),8));    for (int i=0; i < regTextFields.length; i++) {      updateAndColorTextField(regTextFields[i],Format.asHex(((TxCPUState)cpuState).getShadowReg(displayedRegisterSet,i),8));    }  }}  }
class C{  public IconGenerator(Context context){  mContext=context;  mContainer=(ViewGroup)LayoutInflater.from(mContext).inflate(R.layout.text_bubble,null);  mRotationLayout=(RotationLayout)mContainer.getChildAt(0);  mContentView=mTextView=(TextView)mRotationLayout.findViewById(R.id.text);  setStyle(STYLE_DEFAULT);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:10.322 -0500",hash_original_method="CC5F7FB4DC48CBC8ED3335B5D2CB27F3",hash_generated_method="55452880AD3979DCEBCC15C80780241B") public NewGroupsOrNewsQuery(Calendar date,boolean gmt){  int num;  String str;  StringBuffer buffer;  __distributions=null;  __newsgroups=null;  __isGMT=gmt;  buffer=new StringBuffer();  num=date.get(Calendar.YEAR);  str=Integer.toString(num);  num=str.length();  if (num >= 2)   buffer.append(str.substring(num - 2)); else   buffer.append("00");  num=date.get(Calendar.MONTH) + 1;  str=Integer.toString(num);  num=str.length();  if (num == 1) {    buffer.append('0');    buffer.append(str);  } else   if (num == 2)   buffer.append(str); else   buffer.append("01");  num=date.get(Calendar.DAY_OF_MONTH);  str=Integer.toString(num);  num=str.length();  if (num == 1) {    buffer.append('0');    buffer.append(str);  } else   if (num == 2)   buffer.append(str); else   buffer.append("01");  __date=buffer.toString();  buffer.setLength(0);  num=date.get(Calendar.HOUR_OF_DAY);  str=Integer.toString(num);  num=str.length();  if (num == 1) {    buffer.append('0');    buffer.append(str);  } else   if (num == 2)   buffer.append(str); else   buffer.append("00");  num=date.get(Calendar.MINUTE);  str=Integer.toString(num);  num=str.length();  if (num == 1) {    buffer.append('0');    buffer.append(str);  } else   if (num == 2)   buffer.append(str); else   buffer.append("00");  num=date.get(Calendar.SECOND);  str=Integer.toString(num);  num=str.length();  if (num == 1) {    buffer.append('0');    buffer.append(str);  } else   if (num == 2)   buffer.append(str); else   buffer.append("00");  __time=buffer.toString();}  }
class C{  public void close(boolean ok){  checkDumpStep();  if (ok && pos > 0) {    StepSingle[] newSteps=new StepSingle[pos];    System.arraycopy(steps,0,newSteps,0,pos);    DataProxy.sendProfile(newSteps,context);  }}  }
class C{  @Override public Instances generateExamples() throws Exception {  Instances result;  int i;  result=new Instances(m_DatasetFormat,0);  m_Random=new Random(getSeed());  for (i=0; i < getNumExamplesAct(); i++) {    result.add(generateExample());  }  return result;}  }
class C{  void print(PrintStream ps){  ps.print(getAlgorithm());  ps.println(':');  for (  IndicatorResult indicatorResult : indicatorResults) {    indicatorResult.print(ps);  }}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public SamFilterParamsBuilder excludeVariantInvalid(final boolean val){  mExcludeVariantInvalid=val;  return this;}  }
class C{  static public void put(PrintWriter log,String msg,Throwable exception){  java.io.StringWriter sw=new java.io.StringWriter();  String header;  PrintWriter pw=new PrintWriter(sw);  pw.println();  header='[' + getTimeStamp() + ' '+ Thread.currentThread().getName()+ "] ";  pw.print(header);  if (msg != null) {    try {      formatText(pw,msg,LOGWIDTH,header.length());    } catch (    RuntimeException e) {      pw.println(msg);      pw.println("Ignoring exception:");      e.printStackTrace(pw);    }  } else {    pw.println();  }  if (exception != null) {    exception.printStackTrace(pw);  }  pw.close();  try {    sw.close();  } catch (  java.io.IOException ignore) {  }  if (log == null) {    log=logWriter;  }  log.print(sw.toString());  log.flush();}  }
class C{  public void nextFrame() throws IOException {  writeCode(NEXT_FRAME);}  }
class C{  synchronized String[][] internalZoneStrings(){  if (zoneStrings == null) {    zoneStrings=TimeZoneNames.getZoneStrings(locale);  }  return zoneStrings;}  }
class C{  public Cache(int pref_size){  this(pref_size,9);}  }
class C{  public static boolean permisionShowDocuments(String sessionID,AxSf axsf) throws SessionException, BookException {  boolean result=true;  try {    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    ISicresGenPerms genPerms=(ISicresGenPerms)cacheBag.get(GENPERMS_USER);    ScrOfic scrofic=(ScrOfic)cacheBag.get(HIBERNATE_ScrOfic);    if (axsf.getAttributeValueAsString(AxSf.FLD5_FIELD) != null && scrofic != null) {      Integer idOficReg=new Integer(axsf.getAttributeValueAsString(AxSf.FLD5_FIELD));      Integer idOficUser=scrofic.getId();      if (!genPerms.isCanShowDocuments()) {        if (idOficReg.intValue() != idOficUser.intValue()) {          result=false;        }      }    }  } catch (  SessionException sE) {    throw sE;  }catch (  Exception e) {  }  return result;}  }
class C{  public void initOptions(){  CHECK_BOX.setSelected(StatusBarSettings.CONNECTION_QUALITY_DISPLAY_ENABLED.getValue());}  }
class C{  public List<VmfsDatastoreOption> queryVmfsDatastoreExtendOptions(HostScsiDisk disk,Datastore datastore){  HostDatastoreSystem datastoreSystem=getDatastoreSystem();  try {    return createList(datastoreSystem.queryVmfsDatastoreExtendOptions(datastore,disk.getDevicePath(),true));  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  NotFound e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  private void runExample(){  try {    String[] command=new String[]{"java","-classpath",System.getProperty("java.class.path"),example.getMainClass().getName()};    output.append("> java -classpath \"");    output.append(System.getProperty("java.class.path"));    output.append("\" ");    output.append(example.getMainClass().getName());    output.append(Settings.NEW_LINE);    status.setText("Status: Running...");    Process process=Runtime.getRuntime().exec(command);    InputStream outputStream=process.getInputStream();    InputStream errorStream=process.getErrorStream();    new ErrorRedirectThread(errorStream).start();    new OutputRedirectThread(outputStream).start();  } catch (  Exception e) {    output.append("Error: " + e.getMessage());    status.setText("Status: Error");  }}  }
class C{  public SmartThresholds parse(final Resource thresholdFileResource) throws IOException {  final SmartThresholds holder=new SmartThresholds();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(thresholdFileResource.getInputStream()));    String line;    while ((line=reader.readLine()) != null) {      if (line.startsWith("SM")) {        String[] lineInput=line.split("\\s+");        holder.addThreshold(new SmartThreshold(lineInput));      }    }  }  finally {    if (reader != null) {      reader.close();    }  }  return holder;}  }
class C{  public static List<PojoClass> enumerateClassesByExtendingType(final String packageName,final Class<?> type,final PojoClassFilter pojoClassFilter){  return ServiceRegistrar.getInstance().getPojoClassLookupService().enumerateClassesByExtendingType(packageName,type,pojoClassFilter);}  }
class C{  public boolean isAtributoId(){  return TransferenciasElectronicasConstants.TIPO_ATRIBUTO_SE_ID.equalsIgnoreCase(tipoAtributo);}  }
class C{  final void scheduleAppGcsLocked(){  mHandler.removeMessages(GC_BACKGROUND_PROCESSES_MSG);  if (mProcessesToGc.size() > 0) {    ProcessRecord proc=mProcessesToGc.get(0);    Message msg=mHandler.obtainMessage(GC_BACKGROUND_PROCESSES_MSG);    long when=proc.lastRequestedGc + GC_MIN_INTERVAL;    long now=SystemClock.uptimeMillis();    if (when < (now + GC_TIMEOUT)) {      when=now + GC_TIMEOUT;    }    mHandler.sendMessageAtTime(msg,when);  }}  }
class C{  public static LyricPlayerFragment newInstance(String path,String encoding){  LogUtils.i(TAG,String.format("newInstance(%s, %s)",path,encoding));  LyricPlayerFragment fragment=new LyricPlayerFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM_PATH,path);  args.putString(ARG_PARAM_ENCODING,encoding);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public void cancel(){  this.subscription.closeAll();}  }
class C{  public static OsmMBTileSource createFromFile(File file){  SQLiteDatabase db;  int flags=SQLiteDatabase.NO_LOCALIZED_COLLATORS | SQLiteDatabase.OPEN_READONLY;  int value;  int minZoomLevel;  int maxZoomLevel;  int tileSize=tileSizePixels;  InputStream is=null;  db=SQLiteDatabase.openDatabase(file.getAbsolutePath(),null,flags);  value=getInt(db,"SELECT MIN(zoom_level) FROM tiles;");  minZoomLevel=value > -1 ? value : minZoom;  value=getInt(db,"SELECT MAX(zoom_level) FROM tiles;");  maxZoomLevel=value > -1 ? value : maxZoom;  Cursor cursor=db.rawQuery("SELECT tile_data FROM images LIMIT 0,1",new String[]{});  if (cursor.getCount() != 0) {    cursor.moveToFirst();    is=new ByteArrayInputStream(cursor.getBlob(0));    Bitmap bitmap=BitmapFactory.decodeStream(is);    tileSize=bitmap.getHeight();    Log.w(t,String.format("Found a tile size of %d",tileSize));  }  cursor.close();  return new OsmMBTileSource(minZoomLevel,maxZoomLevel,tileSize,file,db);}  }
class C{  @Override public Collection<ViewNotificationContainer> parse(final Collection<PGNotification> notifications,final SQLProvider provider){  Preconditions.checkNotNull(notifications,"IE02745: notifications argument can not be null");  Preconditions.checkNotNull(provider,"IE02746: provider argument can not be null");  final Collection<ViewNotificationContainer> containers=Lists.newArrayList();  for (  final PGNotification notification : notifications) {    if (notification.getParameter().startsWith(CTableNames.VIEWS_TABLE)) {      containers.add(parseViewNotification(notification,provider));    } else     if (notification.getParameter().startsWith(CTableNames.MODULE_VIEWS_TABLE)) {      containers.add(parseModuleViewNotification(notification,provider));    } else     if (notification.getParameter().startsWith(CTableNames.PROJECT_VIEWS_TABLE)) {      containers.add(parseProjectViewNotification(notification,provider));    } else {      throw new IllegalStateException("IE02747: Table name supplied in notification: " + notification.getParameter() + " does not match tables where view notifications are accepted on.");    }  }  return containers;}  }
class C{  public void testTruncateLast(){  OffsetIndex index=new DelegatingOffsetIndex(HeapBuffer.allocate(1024 * 8));  index.index(0,0);  index.index(1,10);  index.index(2,20);  index.index(3,30);  index.index(4,40);  assertEquals(index.truncate(3),40);}  }
class C{  private void cleanNetwork(){  Set<String> roadModes=CollectionUtils.stringToSet("car,bus");  Network roadNetwork=NetworkTools.filterNetworkByLinkMode(network,roadModes);  Network restNetwork=NetworkTools.filterNetworkExceptLinkMode(network,roadModes);  new NetworkCleaner().run(roadNetwork);  NetworkTools.integrateNetwork(roadNetwork,restNetwork);  this.network=roadNetwork;}  }
class C{  public void persistBeanData(Object bean,boolean printOnly){  persistBeanTryCatch(bean);  callPersistEmittedKeyValue(printOnly);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private boolean isAlphaUsedForScale(){  return android.os.Build.VERSION.SDK_INT < 11;}  }
class C{  public synchronized void addGraphListener(GraphListener cl){  m_graphListeners.addElement(cl);}  }
class C{  public void removeThread(WaitingThread wt){  if (wt == null)   return;  this.waitingThreads.remove(wt);}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  public void flush() throws IOException {}  }
class C{  @Override public String version(){  return AppInfoParser.getVersion();}  }
class C{  public boolean parseBoolean(String text) throws DataParseException {  if (TRUE.equalsIgnoreCase(text)) {    return true;  } else   if (FALSE.equalsIgnoreCase(text)) {    return false;  } else {    throw new DataParseException("Input does not represent a boolean value: " + text);  }}  }
class C{  private CProjectTreeNode<?> findNode(){  return findProjectNode(CProjectTreeNodeHelpers.findDatabaseNode(getProjectTree(),m_database),m_projects[0]);}  }
class C{  @Override @SuppressForbidden(reason="System#out") public void activateOptions(){  if (follow) {    if (target.equals(SYSTEM_ERR)) {      setWriter(createWriter(new SystemErrStream()));    } else {      setWriter(createWriter(new SystemOutStream()));    }  } else {    if (target.equals(SYSTEM_ERR)) {      setWriter(createWriter(System.err));    } else {      setWriter(createWriter(System.out));    }  }  super.activateOptions();}  }
class C{  public double[] computeLocal(int states[][][],int destAgentRow,int destAgentColumn,int[][] sourcesAbsolute){  initialise();  int[][] cleanedSources=cleanAbsoluteSources(sourcesAbsolute,destAgentRow,destAgentColumn);  addObservations(states,destAgentRow,destAgentColumn,cleanedSources,true);  return computeLocalFromPreviousObservations(states,destAgentRow,destAgentColumn,cleanedSources,true);}  }
class C{  public void mount(java.io.File ioFile) throws ServerException {  if (!mountRef.maybeSet(new FSMountPoint(getWorkspaceId(),ioFile,eventService,searcherProvider,systemFilter))) {    throw new ServerException(String.format("Local filesystem '%s' already mounted. ",ioFile));  }}  }
class C{  public static boolean isDataUri(final String url){  return url.startsWith(DATA_URI_PREFIX);}  }
class C{  public void disconnectFromTEMP(){}  }
class C{  public GameProperties(final GameData data){  super(data);}  }
class C{  public void close() throws IOException {  if (connection != null) {    connection.close();    connection=null;  }}  }
class C{  public String classifierTipText(){  return "Classifier to use for estimating the accuracy of subsets";}  }
class C{  public void httpRequest(HttpRequestEvent e) throws java.io.IOException {  String request=e.getRequest();  if (Debug.debugging("shis")) {    Debug.output("SHIS: Handling request - \"" + request + "\"");  }  if (request.charAt(0) == '/') {    request=request.substring(0,request.length());  }  int index=0;  index=request.indexOf('?');  if (index != -1) {    request=request.substring(index + 1,request.length());    Debug.message("shis","SHIS: GET Request received");  } else {    Debug.message("shis","SHIS: Probably a POST Request received");  }  try {    iServer.handleRequest(request,e.getOutputStream());  } catch (  IOException ioe) {    Debug.error("SHIS: caught IOException - \n" + ioe.getMessage());  }catch (  MapRequestFormatException exception) {    String message="OpenMap SimpleHttpImageServer encountered an problem with your request:\n\n" + exception.getMessage() + "\n\n"+ ErrorMessage;    HttpConnection.writeHttpResponse(e.getOutputStream(),HttpConnection.CONTENT_PLAIN,message);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DateTick)) {    return false;  }  DateTick that=(DateTick)obj;  if (!ObjectUtilities.equal(this.date,that.date)) {    return false;  }  return super.equals(obj);}  }
class C{  @SuppressWarnings("unchecked") public void printTable(HardcopyWriter w){  int columnTotal=0;  int[] columnWidth=new int[this.getColumnCount()];  for (int i=0; i < this.getColumnCount(); i++) {    if (this.getColumnWidth(i) == 0) {      columnWidth[i]=w.getCharactersPerLine() - columnTotal;    } else {      columnWidth[i]=this.getColumnWidth(i);      columnTotal=columnTotal + columnWidth[i] + 1;    }  }  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),w.getCharactersPerLine());  String[] columnStrings=new String[this.getColumnCount()];  for (int i=0; i < this.getColumnCount(); i++) {    columnStrings[i]=this.getColumnName(i);  }  w.setFontStyle(Font.BOLD);  printColumns(w,columnStrings,columnWidth);  w.setFontStyle(0);  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),w.getCharactersPerLine());  String spaces;  StringBuffer buf=new StringBuffer();  for (int i=0; i < this.getRowCount(); i++) {    for (int j=0; j < columnWidth[i]; j++) {      buf.append(" ");    }    spaces=buf.toString();    for (int j=0; j < this.getColumnCount(); j++) {      if (this.getValueAt(i,j) == null) {        columnStrings[j]=spaces;      } else       if (this.getValueAt(i,j) instanceof JComboBox) {        columnStrings[j]=(String)((JComboBox<String>)this.getValueAt(i,j)).getSelectedItem();      } else       if (this.getValueAt(i,j) instanceof Boolean) {        columnStrings[j]=(this.getValueAt(i,j)).toString();      } else       if (this.getValueAt(i,j) instanceof Integer) {        columnStrings[j]=(this.getValueAt(i,j)).toString();      } else {        columnStrings[j]=(String)this.getValueAt(i,j);      }    }    printColumns(w,columnStrings,columnWidth);    w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),w.getCharactersPerLine());  }  w.close();}  }
class C{  @Override public ColumnList columns(Tuple tuple){  ProfileMeasurement measurement=(ProfileMeasurement)tuple.getValueByField("measurement");  return columnBuilder.columns(measurement);}  }
class C{  public BeanSelectCreatePanel(Manager manager,NamedBean defaultSelect){  _manager=manager;  _defaultSelect=defaultSelect;  p=jmri.InstanceManager.getDefault(jmri.UserPreferencesManager.class);  existingItem=new JRadioButton(Bundle.getMessage("UseExisting"),true);  newItem=new JRadioButton(Bundle.getMessage("CreateNew"));  existingItem.addActionListener(null);  newItem.addActionListener(null);  selectcreate.add(existingItem);  selectcreate.add(newItem);  existingCombo=new JmriBeanComboBox(_manager,defaultSelect,JmriBeanComboBox.USERNAMESYSTEMNAME);  if (existingCombo.getItemCount() == 0) {    newItem.setSelected(true);  }  existingCombo.setFirstItemBlank(true);  JPanel radio=new JPanel();  radio.setLayout(new FlowLayout(FlowLayout.CENTER,5,0));  JPanel bean=new JPanel();  bean.setLayout(new FlowLayout(FlowLayout.CENTER,5,0));  radio.add(existingItem);  radio.add(newItem);  if (_manager instanceof jmri.managers.AbstractProxyManager) {    List<Manager> managerList=new ArrayList<>();    if (_manager instanceof jmri.TurnoutManager) {      jmri.managers.ProxyTurnoutManager proxy=(jmri.managers.ProxyTurnoutManager)InstanceManager.turnoutManagerInstance();      managerList=proxy.getManagerList();    } else     if (_manager instanceof jmri.SensorManager) {      jmri.managers.ProxySensorManager proxy=(jmri.managers.ProxySensorManager)InstanceManager.sensorManagerInstance();      managerList=proxy.getManagerList();    } else     if (_manager instanceof jmri.LightManager) {      jmri.managers.ProxyLightManager proxy=(jmri.managers.ProxyLightManager)InstanceManager.lightManagerInstance();      managerList=proxy.getManagerList();    } else     if (_manager instanceof jmri.ReporterManager) {      jmri.managers.ProxyReporterManager proxy=(jmri.managers.ProxyReporterManager)InstanceManager.getDefault(jmri.ReporterManager.class);      managerList=proxy.getManagerList();    }    for (int x=0; x < managerList.size(); x++) {      String manuName=ConnectionNameFromSystemName.getConnectionName(managerList.get(x).getSystemPrefix());      Boolean addToPrefix=true;      for (int i=0; i < prefixBox.getItemCount(); i++) {        if ((prefixBox.getItemAt(i)).equals(manuName)) {          addToPrefix=false;        }      }      if (addToPrefix) {        prefixBox.addItem(manuName);      }    }    if (p.getComboBoxLastSelection(systemSelectionCombo) != null) {      prefixBox.setSelectedItem(p.getComboBoxLastSelection(systemSelectionCombo));    }  } else {    prefixBox.addItem(ConnectionNameFromSystemName.getConnectionName(_manager.getSystemPrefix()));  }  bean.add(existingCombo);  bean.add(prefixBox);  bean.add(hardwareAddress);  hardwareAddress.setToolTipText("Enter in the Hardware address");  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  add(radio);  add(bean);  update();}  }
class C{  private Integer key(){  int key=0;  while (true) {    Collection<ClusterNode> affNodes=affinity(cache1).mapKeyToPrimaryAndBackups(key);    assert !F.isEmpty(affNodes);    ClusterNode primaryNode=F.first(affNodes);    if (F.eq(primaryNode,cache1.unwrap(Ignite.class).cluster().localNode()) && affNodes.contains(cache3.unwrap(Ignite.class).cluster().localNode()))     break;    key++;  }  return key;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addRows(int nrows){  for (int i=0; i < nrows; ++i) {    addRow();  }}  }
class C{  private void showFilterDialog(Filter filter){  int sortOrder=mAdapter.getCount() - 1;  if (filter == null) {    EditFilterActivity.createNewFilter(getActivity(),sortOrder);  } else {    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);  }}  }
class C{  public NSRecord(Name name,int dclass,long ttl,Name target){  super(name,Type.NS,dclass,ttl,target,"target");}  }
class C{  public CsvWriter write() throws CsvException, IOException {  if (rowCount == 0 && writeHeaders) {    if (writeHeaders) {      writeRow(getNames());      rowCount++;    }  }  if (row != null) {    if (rowId != null) {      put(rowId,new Integer(rowCount + 1).toString());    }    if (!nullAutofill && colCount < names.size()) {      throw new CsvException("Attempt to write partial row: row=" + (rowCount + 1) + " columns required="+ names.size()+ " columns written="+ colCount);    }    writeRow(row);    row=null;    colCount=0;    rowCount++;  }  return this;}  }
class C{  public synchronized void resetDatas(){  datas=null;}  }
class C{  private boolean checkJTSFootprint(String footprint){  try {    JtsSpatialContextFactory factory=new JtsSpatialContextFactory();    JtsSpatialContext ctx=factory.newSpatialContext();    JtsWKTReaderShapeParser parser=new JtsWKTReaderShapeParser(ctx,factory);    parser.parse(footprint);    return true;  } catch (  Exception e) {    LOGGER.error("JTS Footprint error : " + e.getMessage());    return false;  }}  }
class C{  public synchronized void notifyZoomResetListeners(){  for (  ZoomListener listener : mZoomListeners) {    listener.zoomReset();  }}  }
class C{  public InvalidPhraseException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public SyncMusicVideos(final int hostId,Bundle syncExtras){  this.hostId=hostId;  this.syncExtras=syncExtras;}  }
class C{  protected void refreshAnchorType(TypeScope scope){  if (resType.isPresent()) {    setFreshRequiredType(resType.get(),scope);  } else {    setFreshRequiredType(new TypeScope().getVar("res"),scope);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  String systemId;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation1");  systemId=notationNode.getSystemId();  assertNull("systemId",systemId);}  }
class C{  static synchronized void printData(byte[] buffer,int len){  if (DEBUG) {    System.out.print(" ");    for (int i=0; i < len; i++) {      int c=buffer[i] & 255;      if (c >= ' ' && c <= 127 && c != '[' & c != ']') {        System.out.print((char)c);      } else {        System.out.print("[" + Integer.toHexString(c) + "]");      }    }    System.out.println();  }}  }
class C{  public GuacamoleUnsupportedException(Throwable cause){  super(cause);}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  private void updateViewFastScrollFocusState(BaseRecyclerViewFastScrollBar.FastScrollFocusableView v,int pos,boolean animated){  FastBitmapDrawable.State newState=FastBitmapDrawable.State.NORMAL;  if (mCurrentFastScrollSection != null && pos > -1) {    AlphabeticalAppsList.AdapterItem item=mApps.getAdapterItems().get(pos);    boolean highlight=item.sectionName.equals(mCurrentFastScrollSection) && item.position == mTargetFastScrollPosition;    newState=highlight ? FastBitmapDrawable.State.FAST_SCROLL_HIGHLIGHTED : FastBitmapDrawable.State.FAST_SCROLL_UNHIGHLIGHTED;  }  v.setFastScrollFocusState(newState,animated);}  }
class C{  public void testSerializer(){  Serializer serializer=new Serializer();  GenericJacksonSerializer jacksonSerializer=new GenericJacksonSerializer();  Foo foo=new Foo(1234);  HeapBuffer buffer=HeapBuffer.allocate();  jacksonSerializer.write(foo,buffer,serializer);  Foo result=(Foo)jacksonSerializer.read(Foo.class,buffer.flip(),serializer);  assertEquals(result.bar,1234);}  }
class C{  public void refreshCluster(){  refreshNamespaces();  refreshIndexes();  refreshModules();}  }
class C{  @Override public void perform(IR ir){  ir.cfg.compactNodeNumbering();  LTDominators.approximate(ir,true);  DominatorTree.perform(ir,true);  LSTGraph.perform(ir);}  }
class C{  public boolean addAll(long[] array){  boolean changed=false;  for (int i=array.length; i-- > 0; ) {    if (add(array[i])) {      changed=true;    }  }  return changed;}  }
class C{  protected void renderHeaders(final MBasicTable table,final Table datatable) throws BadElementException {  final int columnCount=table.getColumnCount();  final TableColumnModel columnModel=table.getColumnModel();  float totalWidth=0;  for (int i=0; i < columnCount; i++) {    totalWidth+=columnModel.getColumn(i).getWidth();  }  final float[] headerwidths=new float[columnCount];  for (int i=0; i < columnCount; i++) {    headerwidths[i]=100f * columnModel.getColumn(i).getWidth() / totalWidth;  }  datatable.setWidths(headerwidths);  datatable.setWidth(100f);  final com.lowagie.text.Font font=FontFactory.getFont(FontFactory.HELVETICA,12,Font.BOLD);  datatable.getDefaultCell().setBorderWidth(2);  datatable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);  String text;  Object value;  for (int i=0; i < columnCount; i++) {    value=columnModel.getColumn(i).getHeaderValue();    text=value != null ? value.toString() : "";    datatable.addCell(new Phrase(text,font));  }  datatable.endHeaders();}  }
class C{  public IllegalAccessException(){  super();}  }
class C{  @GET @Path("/ostenants") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public OSTenantListRestRep listCoprhdOsTenants(){  _log.debug("Keystone Service - listCoprhdOsTenants");  List<OSTenant> tenants=getOsTenantsFromCoprhdDb();  return map(tenants);}  }
class C{  public static void unregister(ActivationID id) throws UnknownObjectException, ActivationException, RemoteException {  ActivationGroup.getSystem().unregisterObject(id);}  }
class C{  public boolean thisDeviceSpeaksTo(BluetoothDevice other) throws NoSuchAlgorithmException, UnsupportedEncodingException {  if (other == null) {    return false;  }  String otherAddr=other.getAddress();  if (otherAddr == null) {    return false;  }  String myAddr=mBluetoothSpeaker.getAddress();  if (myAddr.equals(whichInitiates(myAddr,otherAddr))) {    return true;  } else {    return false;  }}  }
class C{  public static JPanel left(JComponent c){  JPanel p=new JPanel(new FlowLayout(FlowLayout.LEFT,0,0));  p.add(c);  return p;}  }
class C{  boolean add(DownloadRequest request){  if (query(request.downloadId()) != DownloadState.INVALID || query(request.uri()) != DownloadState.INVALID) {    Log.w(TAG,"the download requst is in downloading");    return false;  }  request.setDownloadRequestQueue(this);synchronized (currentRequests) {    currentRequests.add(request);  }  downloadQueue.add(request);  return true;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override EventRequest resolveEventRequest(ReferenceType refType) throws AmbiguousMethodException, AbsentInformationException, InvalidTypeException, NoSuchMethodException, LineNotFoundException {  Location location=location(refType);  if (location == null) {    throw new InvalidTypeException();  }  EventRequestManager em=refType.virtualMachine().eventRequestManager();  EventRequest bp=em.createBreakpointRequest(location);  bp.setSuspendPolicy(suspendPolicy);  bp.enable();  return bp;}  }
class C{  private Map<URI,FileShare> queryFileShares(final List<FileDescriptor> fileShareDescriptors){  List<URI> fileShareURIs=FileDescriptor.getFileSystemURIs(fileShareDescriptors);  List<FileShare> fileShares=dbClient.queryObject(FileShare.class,fileShareURIs);  Map<URI,FileShare> fileShareMap=new HashMap<URI,FileShare>();  for (  FileShare fileShare : fileShares) {    if (fileShare != null) {      fileShareMap.put(fileShare.getId(),fileShare);    }  }  return fileShareMap;}  }
class C{  public Pool(int pp,Object[] pool,Types types){  this.pp=pp;  this.pool=pool;  this.types=types;  this.indices=new HashMap<Object,Integer>(pool.length);  for (int i=1; i < pp; i++) {    if (pool[i] != null)     indices.put(pool[i],i);  }}  }
class C{  private static MovePath addSteps(MovePath md,Client client){  Entity en=md.getEntity();  IGame game=en.getGame();  MoveStep lastStep=md.getLastStep();  if ((lastStep != null) && ((lastStep.getType() == MoveStepType.LAUNCH) || (lastStep.getType() == MoveStepType.RECOVER) || (lastStep.getType() == MoveStepType.UNDOCK))) {    md.removeLastStep();  }  Coords start=en.getPosition();  Coords end=Compute.getFinalPosition(start,md.getFinalVectors());  boolean leftMap=false;  ArrayList<Coords> in=Coords.intervening(start,end);  boolean split=false;  double degree=start.degree(end);  if ((degree % 60) == 30) {    split=true;    in=Coords.intervening(start,end,true);  }  Coords current=start;  int facing=md.getFinalFacing();  for (int i=1; i < in.size(); i++) {    Coords c=in.get(i);    if (((i % 3) == 1) && split) {      Coords left=in.get(i);      Coords right=in.get(i + 1);      double leftTonnage=0;      for (      Entity ent : game.getEntitiesVector(left)) {        leftTonnage+=ent.getWeight();      }      double rightTonnage=0;      for (      Entity ent : game.getEntitiesVector(right)) {        rightTonnage+=ent.getWeight();      }      en.addPassedThrough(right);      en.addPassedThrough(left);      client.sendUpdateEntity(en);      if ((leftTonnage < rightTonnage) || !game.getBoard().contains(right)) {        i++;      } else {        continue;      }    }    if (!game.getBoard().contains(c)) {      if (game.getOptions().booleanOption("return_flyover")) {        md.addStep(MoveStepType.RETURN);      } else {        md.addStep(MoveStepType.OFF);      }      leftMap=true;      break;    }    int dir=current.direction(c);    int diff=dir - facing;    if (diff == 0) {      md.addStep(MoveStepType.FORWARDS);    } else     if ((diff == 1) || (diff == -5)) {      md.addStep(MoveStepType.LATERAL_RIGHT);    } else     if ((diff == -2) || (diff == 4)) {      md.addStep(MoveStepType.LATERAL_RIGHT_BACKWARDS);    } else     if ((diff == -1) || (diff == 5)) {      md.addStep(MoveStepType.LATERAL_LEFT);    } else     if ((diff == 2) || (diff == -4)) {      md.addStep(MoveStepType.LATERAL_LEFT_BACKWARDS);    } else     if ((diff == 3) || (diff == -3)) {      md.addStep(MoveStepType.BACKWARDS);    }    current=c;  }  if (!leftMap && (lastStep != null) && (lastStep.getType() == MoveStepType.LAUNCH)) {    md.addStep(MoveStepType.LAUNCH,lastStep.getLaunched());  }  if (!leftMap && (lastStep != null) && (lastStep.getType() == MoveStepType.UNDOCK)) {    md.addStep(MoveStepType.UNDOCK,lastStep.getLaunched());  }  if (!leftMap && (lastStep != null) && (lastStep.getType() == MoveStepType.RECOVER)) {    md.addStep(MoveStepType.RECOVER,lastStep.getRecoveryUnit(),-1);  }  return md;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.METADATABLE__OWNED_METADATAS:    return ((InternalEList<?>)getOwnedMetadatas()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.411 -0500",hash_original_method="6746D685A6EEFE6F86FE53A5B90B58CB",hash_generated_method="987E98FB86E6924AD630BE8C80953A6B") private boolean isClientDialog(){  SIPTransaction transaction=(SIPTransaction)this.getFirstTransaction();  return transaction instanceof SIPClientTransaction;}  }
class C{  public static void showProgress(boolean isShow){  if (isShow) {    div.setStyleName("valign-wrapper  progress-wrapper");    progress.getElement().getStyle().setProperty("margin","auto");    div.add(progress);    RootPanel.get().add(div);  } else {    div.removeFromParent();    progress.removeFromParent();  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public XblScopedChildNodes(XBLRecord rec){  super(rec);}  }
class C{  protected List<Position> computeArrowheadPositions(DrawContext dc,Position base,Position tip){  Globe globe=dc.getGlobe();  Vec4 p1=globe.computePointFromPosition(base);  Vec4 pB=globe.computePointFromPosition(tip);  Vec4 vB1=p1.subtract3(pB);  double arrowLengthFraction=this.getArrowLength();  Vec4 arrowBase=pB.add3(vB1.multiply3(arrowLengthFraction));  Vec4 normal=globe.computeSurfaceNormalAtPoint(arrowBase);  double arrowLength=vB1.getLength3() * arrowLengthFraction;  double arrowHalfWidth=arrowLength * this.getArrowAngle().tanHalfAngle();  Vec4 perpendicular=vB1.cross3(normal);  perpendicular=perpendicular.normalize3().multiply3(arrowHalfWidth);  Vec4 pA=arrowBase.add3(perpendicular);  Vec4 pC=arrowBase.subtract3(perpendicular);  return TacticalGraphicUtil.asPositionList(globe,pA,pB,pC);}  }
class C{  public static void vibrate(Context context,long milliseconds){  Vibrator vibrator=getInstance(context);  vibrator.vibrate(milliseconds);}  }
class C{  public final void transpose(GMatrix m1){  int i, j;  if (nRow != m1.nCol || nCol != m1.nRow) {    throw new MatrixSizeException();  }  if (m1 != this) {    for (i=0; i < nRow; i++) {      for (j=0; j < nCol; j++) {        values[i][j]=m1.values[j][i];      }    }  } else {    transpose();  }}  }
class C{  private static ViewContainer findContainer(final IDatabase database,final IViewContainer container,final List<Database> databases){  final Database apiDatabase=ObjectFinders.getObject(database,databases);  if (container.getAddressSpaces() == null) {    return ObjectFinders.getObject(container.getNative(),apiDatabase.getModules());  } else {    return ObjectFinders.getObject(container.getNative(),apiDatabase.getProjects());  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public Class<?> loadClass(String classname){  try {    return HGUtils.loadClass(this.getHyperGraph(),classname);  } catch (  Exception t) {    throw new HGException("Could not load class " + classname,t);  }}  }
class C{  @Override protected void beginRender(GL10 gl,PLIRenderer renderer){  this.rotate(gl);  this.translate(gl);}  }
class C{  public static N4JSFactory init(){  try {    N4JSFactory theN4JSFactory=(N4JSFactory)EPackage.Registry.INSTANCE.getEFactory(N4JSPackage.eNS_URI);    if (theN4JSFactory != null) {      return theN4JSFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new N4JSFactoryImpl();}  }
class C{  public void append(long key,long value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    growKeyAndValueArrays(pos + 1);  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  @Override protected void fixInstanceClass(EClassifier eClassifier){  if (eClassifier.getInstanceClassName() == null) {    eClassifier.setInstanceClassName("org.yakindu.sct.model.sgen." + eClassifier.getName());    setGeneratedClassName(eClassifier);  }}  }
class C{  public static JSONObject createOpenGraphObjectForPost(String type,String title,String imageUrl,String url,String description,JSONObject objectProperties,String id){  JSONObject openGraphObject=new JSONObject();  try {    if (type != null) {      openGraphObject.put("type",type);    }    openGraphObject.put("title",title);    if (imageUrl != null) {      JSONObject imageUrlObject=new JSONObject();      imageUrlObject.put("url",imageUrl);      JSONArray imageUrls=new JSONArray();      imageUrls.put(imageUrlObject);      openGraphObject.put("image",imageUrls);    }    openGraphObject.put("url",url);    openGraphObject.put("description",description);    openGraphObject.put(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY,true);    if (objectProperties != null) {      openGraphObject.put("data",objectProperties);    }    if (id != null) {      openGraphObject.put("id",id);    }  } catch (  JSONException e) {    throw new FacebookException("An error occurred while setting up the graph object",e);  }  return openGraphObject;}  }
class C{  public void accept(IResourceVisitor visitor) throws CoreException {  for (int i=0, imax=resources.length; i < imax; i++)   try {    if (resources[i].exists())     resources[i].accept(visitor,depth,flags);  } catch (  CoreException e) {    if (e.getStatus().getCode() != IResourceStatus.RESOURCE_NOT_FOUND)     throw e;  }}  }
class C{  private void test(String problem) throws Exception {  jmetal.core.Problem problemA;  Problem problemB;  if (problem.equals("ZDT1")) {    problemA=new jmetal.problems.ZDT.ZDT1("Real");    problemB=new org.moeaframework.problem.ZDT.ZDT1();  } else   if (problem.equals("ZDT2")) {    problemA=new jmetal.problems.ZDT.ZDT2("Real");    problemB=new org.moeaframework.problem.ZDT.ZDT2();  } else   if (problem.equals("ZDT3")) {    problemA=new jmetal.problems.ZDT.ZDT3("Real");    problemB=new org.moeaframework.problem.ZDT.ZDT3();  } else   if (problem.equals("ZDT4")) {    problemA=new jmetal.problems.ZDT.ZDT4("Real");    problemB=new org.moeaframework.problem.ZDT.ZDT4();  } else   if (problem.equals("ZDT5")) {    problemA=new jmetal.problems.ZDT.ZDT5("Real");    problemB=new org.moeaframework.problem.ZDT.ZDT5();  } else   if (problem.equals("ZDT6")) {    problemA=new jmetal.problems.ZDT.ZDT6("Real");    problemB=new org.moeaframework.problem.ZDT.ZDT6();  } else {    throw new IllegalArgumentException();  }  test(problemA,problemB);}  }
class C{  public Enumeration<K> keys(){  return new KeyIterator();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== MaterialPackage ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(String.format("package_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.package_uid[0],this.package_uid[1],this.package_uid[2],this.package_uid[3],this.package_uid[4],this.package_uid[5],this.package_uid[6],this.package_uid[7],this.package_uid[8],this.package_uid[9],this.package_uid[10],this.package_uid[11],this.package_uid[12],this.package_uid[13],this.package_uid[14],this.package_uid[15],this.package_uid[16],this.package_uid[17],this.package_uid[18],this.package_uid[19],this.package_uid[20],this.package_uid[21],this.package_uid[22],this.package_uid[23],this.package_uid[24],this.package_uid[25],this.package_uid[26],this.package_uid[27],this.package_uid[28],this.package_uid[29],this.package_uid[30],this.package_uid[31]));  sb.append("================== PackageCreationDate ======================\n");  sb.append(this.package_creation_date.toString());  sb.append("================== PackageModifiedDate ======================\n");  sb.append(this.package_modified_date.toString());  sb.append(this.tracks.toString());  return sb.toString();}  }
class C{  public boolean sameAs(CacheServer other){  return getPort() == other.getPort() && eq(getBindAddress(),other.getBindAddress()) && getSocketBufferSize() == other.getSocketBufferSize() && getMaximumTimeBetweenPings() == other.getMaximumTimeBetweenPings() && getNotifyBySubscription() == other.getNotifyBySubscription() && getMaxConnections() == other.getMaxConnections() && getMaxThreads() == other.getMaxThreads() && getMaximumMessageCount() == other.getMaximumMessageCount() && getMessageTimeToLive() == other.getMessageTimeToLive() && Arrays.equals(getGroups(),other.getGroups()) && getLoadProbe().equals(other.getLoadProbe()) && getLoadPollInterval() == other.getLoadPollInterval() && getTcpNoDelay() == other.getTcpNoDelay();}  }
class C{  static NdefRecord[] parse(ByteBuffer buffer,boolean ignoreMbMe) throws FormatException {  List<NdefRecord> records=new ArrayList<NdefRecord>();  try {    byte[] type=null;    byte[] id=null;    byte[] payload=null;    ArrayList<byte[]> chunks=new ArrayList<byte[]>();    boolean inChunk=false;    short chunkTnf=-1;    boolean me=false;    while (!me) {      byte flag=buffer.get();      boolean mb=(flag & NdefRecord.FLAG_MB) != 0;      me=(flag & NdefRecord.FLAG_ME) != 0;      boolean cf=(flag & NdefRecord.FLAG_CF) != 0;      boolean sr=(flag & NdefRecord.FLAG_SR) != 0;      boolean il=(flag & NdefRecord.FLAG_IL) != 0;      short tnf=(short)(flag & 0x07);      if (!mb && records.size() == 0 && !inChunk && !ignoreMbMe) {        throw new FormatException("expected MB flag");      } else       if (mb && records.size() != 0 && !ignoreMbMe) {        throw new FormatException("unexpected MB flag");      } else       if (inChunk && il) {        throw new FormatException("unexpected IL flag in non-leading chunk");      } else       if (cf && me) {        throw new FormatException("unexpected ME flag in non-trailing chunk");      } else       if (inChunk && tnf != NdefRecord.TNF_UNCHANGED) {        throw new FormatException("expected TNF_UNCHANGED in non-leading chunk");      } else       if (!inChunk && tnf == NdefRecord.TNF_UNCHANGED) {        throw new FormatException("" + "unexpected TNF_UNCHANGED in first chunk or unchunked record");      }      int typeLength=buffer.get() & 0xFF;      long payloadLength=sr ? (buffer.get() & 0xFF) : (buffer.getInt() & 0xFFFFFFFFL);      int idLength=il ? (buffer.get() & 0xFF) : 0;      if (inChunk && typeLength != 0) {        throw new FormatException("expected zero-length type in non-leading chunk");      }      if (!inChunk) {        type=(typeLength > 0 ? new byte[typeLength] : EMPTY_BYTE_ARRAY);        id=(idLength > 0 ? new byte[idLength] : EMPTY_BYTE_ARRAY);        buffer.get(type);        buffer.get(id);      }      ensureSanePayloadSize(payloadLength);      payload=(payloadLength > 0 ? new byte[(int)payloadLength] : EMPTY_BYTE_ARRAY);      buffer.get(payload);      if (cf && !inChunk) {        chunks.clear();        chunkTnf=tnf;      }      if (cf || inChunk) {        chunks.add(payload);      }      if (!cf && inChunk) {        payloadLength=0;        for (        byte[] p : chunks) {          payloadLength+=p.length;        }        ensureSanePayloadSize(payloadLength);        payload=new byte[(int)payloadLength];        int i=0;        for (        byte[] p : chunks) {          System.arraycopy(p,0,payload,i,p.length);          i+=p.length;        }        tnf=chunkTnf;      }      if (cf) {        inChunk=true;        continue;      } else {        inChunk=false;      }      String error=validateTnf(tnf,type,id,payload);      if (error != null) {        throw new FormatException(error);      }      records.add(new NdefRecord(tnf,type,id,payload));      if (ignoreMbMe) {        break;      }    }  } catch (  BufferUnderflowException e) {    throw new FormatException("expected more data",e);  }  return records.toArray(new NdefRecord[records.size()]);}  }
class C{  public static RealVector fftConvolution(RealVector first,RealVector second){  IncompatibleVectorsException.checkVectorsCompatible(first,second);  DenseFloatMatrix1D coltVec1=new DenseFloatMatrix1D(first.getCoordinates());  DenseFloatMatrix1D coltVec2=new DenseFloatMatrix1D(second.getCoordinates());  int dimension=first.getDimension();  DenseFComplexMatrix1D fft1=coltVec1.getFft();  DenseFComplexMatrix1D fft2=coltVec2.getFft();  for (int i=0; i < dimension; i++) {    fft1.setQuick(i,FComplex.mult(fft1.getQuick(i),fft2.getQuick(i)));  }  fft1.ifft(true);  DenseFloatMatrix1D coltResult=((DenseFloatMatrix1D)(fft1.getRealPart()));  float[] coordinates=coltResult.elements();  RealVector result=new RealVector(coordinates);  return result;}  }
class C{  public CHelpSavePane(final String text,final IHelpInformation information){  super(text);  m_information=information;}  }
class C{  public void testCookies() throws Exception {  startServer(47500);  fetchPage("/cookies.jsp",200);  fetchPage("/cookies.jsp?cookie=yes",200);}  }
class C{  public void startPreserving() throws org.xml.sax.SAXException {  m_preserves.push(true);  m_ispreserve=true;}  }
class C{  public void execute(){  if (this.parent == null) {    LOG.error("Can not execute command, parent is null");    throw new RuntimeException("Can not execute command, parent is null");  }  if (this.parent.getDbId() == null) {    LOG.error("Can not execute command, dbid of parent is null");    throw new RuntimeException("Can not execute command, dbif of parent is null");  }  IBaseDao<? extends CnATreeElement,Serializable> dao=getDaoFactory().getDAO(this.parent.getTypeId());  RetrieveInfo ri=new RetrieveInfo();  ri.setLinksDown(true).setLinksDownProperties(true);  CnATreeElement parentWithLinksDown=dao.retrieve(parent.getDbId(),ri);  linksDown=parentWithLinksDown.getLinksDown();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.745 -0500",hash_original_method="967A1FFF1D78A377DCB1552FAD26240E",hash_generated_method="B387EDD658B0C0EA1C4E8CB091822B2C") public RadialGradient(float x,float y,float radius,int color0,int color1,TileMode tile){  if (radius <= 0) {    throw new IllegalArgumentException("radius must be > 0");  }  native_instance=nativeCreate2(x,y,radius,color0,color1,tile.nativeInt);  native_shader=nativePostCreate2(native_instance,x,y,radius,color0,color1,tile.nativeInt);}  }
class C{  public OMRect(double lt1,double ln1,double lt2,double ln2,int lType,int nsegs){  super(RENDERTYPE_LATLON,lType,DECLUTTERTYPE_NONE);  lat1=lt1;  lon1=ln1;  lat2=lt2;  lon2=ln2;  this.nsegs=nsegs;}  }
class C{  @SuppressWarnings("unused") public void reload(){  serviceLoader.reload();  storageServiceProviders.clear();  load();}  }
class C{  public static float[] convertSampleRate(float[] samples,int numFrames,int numChannels,int sampleRate,int targetSampleRate){  assert samples.length >= numFrames * numChannels;  assert numChannels > 0;  assert sampleRate > 0;  assert targetSampleRate > 0;  float[] buffer;  if (sampleRate == targetSampleRate) {    buffer=samples;  } else {    double conversion=(double)sampleRate / targetSampleRate;    int newFrames=(int)(numFrames / conversion);    int newNumSamples=newFrames * numChannels;    buffer=new float[newNumSamples];    int idx=0;    for (int f=0; f < newFrames; ++f) {      int sourceFrame=(int)(f * conversion);      for (int c=0; c < numChannels; ++c) {        buffer[idx++]=samples[sourceFrame * numChannels + c];      }    }    assert idx == newNumSamples;  }  return buffer;}  }
class C{  public void copyBackupSet(File sourceDir,File destDir) throws IOException {  log.debug("copying backup set from: {} to: {}",sourceDir,destDir);  log.info("Saving copy of operations files to: {}",destDir);  if (!sourceDir.exists()) {    throw new IOException("Backup Set source directory: " + sourceDir.getAbsolutePath() + " does not exist");  }  int sourceCount=getSourceFileCount(sourceDir);  if (sourceCount == 0) {    log.debug("No source files found in {} so skipping copy.",sourceDir.getAbsolutePath());    return;  }  if (sourceCount != _backupSetFileNames.length) {    log.warn("Only {} file(s) found in directory {}",sourceCount,sourceDir.getAbsolutePath());  }  if (!destDir.exists()) {    boolean result=destDir.mkdirs();    if (!result) {      throw new IOException(destDir.getAbsolutePath() + " (Could not create all or part of the Backup Set path)");    }  }  for (  String name : _backupSetFileNames) {    log.debug("copying file: {}",name);    File src=new File(sourceDir,name);    if (src.exists()) {      File dst=new File(destDir,name);      FileHelper.copy(src.getAbsolutePath(),dst.getAbsolutePath(),true);    } else {      log.debug("Source file: {} does not exist, and is not copied.",src.getAbsolutePath());    }  }  if (testException != null) {    testException.fillInStackTrace();    throw testException;  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.INVOCABLE_ENDPOINT__NAME:    setName((String)newValue);  return;case EipPackage.INVOCABLE_ENDPOINT__TO_CHANNELS:getToChannels().clear();getToChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.INVOCABLE_ENDPOINT__FROM_CHANNELS:getFromChannels().clear();getFromChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.INVOCABLE_ENDPOINT__OWNED_SERVICE_INVOCATIONS:getOwnedServiceInvocations().clear();getOwnedServiceInvocations().addAll((Collection<? extends ServiceInvocation>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public final void rotY(double angle){  double sinAngle, cosAngle;  sinAngle=Math.sin(angle);  cosAngle=Math.cos(angle);  this.m00=cosAngle;  this.m01=0.0;  this.m02=sinAngle;  this.m10=0.0;  this.m11=1.0;  this.m12=0.0;  this.m20=-sinAngle;  this.m21=0.0;  this.m22=cosAngle;}  }
class C{  public void removeMAddr(){  if (uriParms != null)   uriParms.delete(MADDR);}  }
class C{  @Deprecated public TermsQueryBuilder disableCoord(boolean disableCoord){  this.disableCoord=disableCoord;  return this;}  }
class C{  private static double polySine(final double x){  double x2=x * x;  double p=2.7553817452272217E-6;  p=p * x2 + -1.9841269659586505E-4;  p=p * x2 + 0.008333333333329196;  p=p * x2 + -0.16666666666666666;  p=p * x2 * x;  return p;}  }
class C{  public void compileProjects(List<File> projects) throws N4JSCompileException {  compileProjects(Arrays.asList(new File(".")),projects,Collections.emptyList(),new DismissingIssueAcceptor());}  }
class C{  public void add(SchemaObject obj){  if (SysProperties.CHECK && obj.getSchema() != this) {    DbException.throwInternalError("wrong schema");  }  String name=obj.getName();  HashMap<String,SchemaObject> map=getMap(obj.getType());  if (SysProperties.CHECK && map.get(name) != null) {    DbException.throwInternalError("object already exists: " + name);  }  map.put(name,obj);  freeUniqueName(name);}  }
class C{  public Type basicGetType(){  return type;}  }
class C{  public void printStackTrace(PrintWriter output){synchronized (output) {    super.printStackTrace(output);    Throwable throwable=getException();    if (throwable != null) {      if (this.fileName != null) {        output.print("Caused in ");        output.print(this.fileName);        output.print(" by: ");      } else {        output.print("Caused by: ");      }      throwable.printStackTrace(output);    }  }}  }
class C{  private int expungeStaleEntry(int staleSlot){  Entry[] tab=table;  int len=tab.length;  tab[staleSlot].value=null;  tab[staleSlot]=null;  size--;  Entry e;  int i;  for (i=nextIndex(staleSlot,len); (e=tab[i]) != null; i=nextIndex(i,len)) {    ThreadLocal<?> k=e.get();    if (k == null) {      e.value=null;      tab[i]=null;      size--;    } else {      int h=k.threadLocalHashCode & (len - 1);      if (h != i) {        tab[i]=null;        while (tab[h] != null)         h=nextIndex(h,len);        tab[h]=e;      }    }  }  return i;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecdatasectionnodename.class,args);}  }
class C{  @Override public void addOFSwitchListener(IOFSwitchListener listener){  this.switchListeners.add(listener);}  }
class C{  public void testFirstRead() throws Exception {  File logDir=prepareLogDir("testFirstRead");  DiskLog log=openLog(logDir,false);  log.setTimeoutMillis(500);  LogConnection conn=log.connect(true);  assertTrue("Found beginning",conn.seek(LogConnection.FIRST));  assertNull("Non-blocking read returns null",conn.next(false));  try {    THLEvent e=conn.next(true);    throw new Exception("Blocking read returned event from empty log: " + e.toString());  } catch (  LogTimeoutException e) {  }  log.release();}  }
class C{  @Override public UpdateResponse optimize(boolean waitFlush,boolean waitSearcher,int maxSegments) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.optimize(waitFlush,waitSearcher,maxSegments);  if (this.solr1 != null)   ur=this.solr1.optimize(waitFlush,waitSearcher,maxSegments);  return ur;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        addToken(Token.IDENTIFIER);      }case 72:    break;case 24:{    yybegin(INTAG_SCRIPT);    addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);  }case 73:break;case 69:{addToken(Token.LITERAL_BOOLEAN);}case 74:break;case 53:{addToken(Token.ERROR_CHAR);}case 75:break;case 50:{addToken(Token.ERROR_NUMBER_FORMAT);}case 76:break;case 44:{int count=yylength();addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 1);yybegin(INTAG_CHECK_TAG_NAME);}case 77:break;case 22:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE_SCRIPT);}case 78:break;case 13:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 79:break;case 8:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 80:break;case 54:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 81:break;case 32:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 82:break;case 34:{start=zzMarkedPos - 1;yybegin(PHP_CHAR);}case 83:break;case 60:{addToken(Token.FUNCTION);}case 84:break;case 35:{start=zzMarkedPos - 1;yybegin(PHP_STRING);}case 85:break;case 48:{addToken(Token.COMMENT_EOL);addEndToken(INTERNAL_IN_JS);return firstToken;}case 86:break;case 45:{start=zzMarkedPos - 2;yybegin(DTD);}case 87:break;case 27:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 88:break;case 71:{yybegin(YYINITIAL);addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 7,zzMarkedPos - 2,Token.MARKUP_TAG_NAME);addToken(zzMarkedPos - 1,zzMarkedPos - 1,Token.MARKUP_TAG_DELIMITER);}case 89:break;case 58:{addToken(Token.VARIABLE);}case 90:break;case 29:{addToken(Token.ERROR_CHAR);addEndToken(INTERNAL_IN_JS);return firstToken;}case 91:break;case 17:{yypushback(1);yybegin(INTAG);}case 92:break;case 26:{addToken(Token.ERROR_IDENTIFIER);}case 93:break;case 49:{start=zzMarkedPos - 2;yybegin(JS_MLC);}case 94:break;case 57:{start=zzMarkedPos - 2;yybegin(PHP_MLC);}case 95:break;case 20:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 96:break;case 4:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(INTAG);}case 97:break;case 9:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.VARIABLE);}case 98:break;case 40:{yybegin(PHP);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 99:break;case 56:{yybegin(JAVASCRIPT);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 100:break;case 65:{addToken(Token.LITERAL_CHAR);}case 101:break;case 46:{addToken(Token.SEPARATOR);yybegin(PHP);}case 102:break;case 15:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE);}case 103:break;case 39:{}case 104:break;case 52:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 105:break;case 16:{yypushback(yylength());yybegin(INTAG);}case 106:break;case 23:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE_SCRIPT);}case 107:break;case 5:{addToken(Token.WHITESPACE);}case 108:break;case 59:{addToken(Token.SEPARATOR);yybegin(YYINITIAL);}case 109:break;case 6:{addToken(Token.DATA_TYPE);}case 110:break;case 18:{addToken(Token.MARKUP_TAG_NAME);}case 111:break;case 33:{addEndToken(INTERNAL_IN_PHP);return firstToken;}case 112:break;case 28:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 113:break;case 14:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE);}case 114:break;case 10:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 115:break;case 38:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_PHP_STRING);return firstToken;}case 116:break;case 19:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 117:break;case 62:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 118:break;case 25:{yybegin(INTAG_SCRIPT);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 119:break;case 36:{addToken(Token.COMMENT_EOL);addEndToken(INTERNAL_IN_PHP);return firstToken;}case 120:break;case 42:{}case 121:break;case 66:{start=zzMarkedPos - 4;yybegin(COMMENT);}case 122:break;case 37:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_PHP_MLC);return firstToken;}case 123:break;case 55:{addToken(Token.RESERVED_WORD);}case 124:break;case 41:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);addEndToken(INTERNAL_PHP_CHAR);return firstToken;}case 125:break;case 70:{addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 6,zzMarkedPos - 1,Token.MARKUP_TAG_NAME);start=zzMarkedPos;yybegin(INTAG_SCRIPT);}case 126:break;case 64:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.COMMENT_MULTILINE);}case 127:break;case 63:{int count=yylength();addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 2);yybegin(INTAG_CHECK_TAG_NAME);}case 128:break;case 61:{yybegin(PHP);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 129:break;case 31:{addToken(Token.SEPARATOR);}case 130:break;case 30:{addToken(Token.ERROR_STRING_DOUBLE);addEndToken(INTERNAL_IN_JS);return firstToken;}case 131:break;case 3:{addNullToken();return firstToken;}case 132:break;case 21:{yybegin(JAVASCRIPT);addToken(Token.MARKUP_TAG_DELIMITER);}case 133:break;case 47:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(YYINITIAL);}case 134:break;case 7:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 135:break;case 11:{addToken(Token.OPERATOR);}case 136:break;case 51:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 137:break;case 43:{yybegin(PHP);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 138:break;case 12:{addToken(Token.MARKUP_TAG_DELIMITER);}case 139:break;case 67:{addToken(Token.COMMENT_MULTILINE);}case 140:break;case 68:{addToken(Token.ERROR_STRING_DOUBLE);}case 141:break;case 1:{}case 142:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case INTAG_CHECK_TAG_NAME:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 7573:break;case JS_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 7574:break;case INTAG_SCRIPT:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG_SCRIPT);return firstToken;}case 7575:break;case PHP_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_PHP_MLC);return firstToken;}case 7576:break;case INATTR_DOUBLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT);return firstToken;}case 7577:break;case INATTR_SINGLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT);return firstToken;}case 7578:break;case PHP_STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_PHP_STRING);return firstToken;}case 7579:break;case DTD:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 7580:break;case INATTR_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 7581:break;case INATTR_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 7582:break;case YYINITIAL:{addNullToken();return firstToken;}case 7583:break;case PHP_CHAR:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);addEndToken(INTERNAL_PHP_CHAR);return firstToken;}case 7584:break;case PHP:{addEndToken(INTERNAL_IN_PHP);return firstToken;}case 7585:break;case INTAG:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 7586:break;case COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 7587:break;case JAVASCRIPT:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 7588:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public SQLDataException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public boolean isReserved(){  String prefix=getPrefix();  String name=getName();  if (prefix != null) {    return prefix.startsWith(RESERVED);  }  return name.startsWith(RESERVED);}  }
class C{  public void writeGTRModel(int num,XMLWriter writer,PartitionSubstitutionModel model){  String prefix=model.getPrefix(num);  writer.writeComment("The general time reversible (GTR) substitution model");  writer.writeOpenTag(GTRParser.GTR_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + "gtr")});  writer.writeOpenTag(GTRParser.FREQUENCIES);  writeFrequencyModelDNA(writer,model,num);  writer.writeCloseTag(GTRParser.FREQUENCIES);  writeParameter(num,GTRParser.A_TO_C,PartitionSubstitutionModel.GTR_RATE_NAMES[0],model,writer);  writeParameter(num,GTRParser.A_TO_G,PartitionSubstitutionModel.GTR_RATE_NAMES[1],model,writer);  writeParameter(num,GTRParser.A_TO_T,PartitionSubstitutionModel.GTR_RATE_NAMES[2],model,writer);  writeParameter(num,GTRParser.C_TO_G,PartitionSubstitutionModel.GTR_RATE_NAMES[3],model,writer);  writeParameter(num,GTRParser.G_TO_T,PartitionSubstitutionModel.GTR_RATE_NAMES[4],model,writer);  writer.writeCloseTag(GTRParser.GTR_MODEL);}  }
class C{  public double circumRadiusRatio(Vertex b,Vertex c){  Vertex x=this.circleCenter(b,c);  double radius=distance(x,b);  double edgeLength=distance(this,b);  double el=distance(b,c);  if (el < edgeLength) {    edgeLength=el;  }  el=distance(c,this);  if (el < edgeLength) {    edgeLength=el;  }  return radius / edgeLength;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public PasswordEncoder passwordEncoder(){  return new BCryptPasswordEncoder();}  }
class C{  public static MapBinder<String,Level> contributeLogLevels(Binder binder){  return MapBinder.newMapBinder(binder,String.class,Level.class,LogLevels.class);}  }
class C{  public ExtendedType(int nodetype,String namespace,String localName){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=nodetype + namespace.hashCode() + localName.hashCode();}  }
class C{  public void testActivityTestCaseSetUpProperly(){  assertNotNull("activity should be launched successfully",getActivity());}  }
class C{  public void initChannel() throws CarbonDataWriterException {  initFileCount();  if (this.isInProgressExtrequired) {    this.fileName=MessageFormat.format(this.fileNameFormat,this.fileCount) + CarbonCommonConstants.FILE_INPROGRESS_STATUS;    FileData fileData=new FileData(this.fileName,this.storeLocation);    fileManager.add(fileData);  } else {    this.fileName=MessageFormat.format(this.fileNameFormat,this.fileCount);  }  this.fileCount++;  try {    this.fileDataOutStream=FileFactory.getDataOutputStream(this.fileName,FileFactory.getFileType(this.fileName),(short)1);  } catch (  FileNotFoundException fileNotFoundException) {    throw new CarbonDataWriterException("Problem while getting the writer for Leaf File",fileNotFoundException);  }catch (  IOException e) {    throw new CarbonDataWriterException("Problem while getting the writer for Leaf File",e);  }}  }
class C{  public void decrementActivity(){  if (trackActivity) {    if (isPrimary) {      activityStats.primaryActive.decrement();    }    activityStats.allActive.decrement();  }}  }
class C{  public void remove(Status status){  status.getStatusType().getStatusHandler().remove(status,this);}  }
class C{  private void onStateChange(Session.State state){switch (state) {case OPEN:    setState(State.CONNECTED);  break;case UNSTABLE:setState(State.SUSPENDED);break;case EXPIRED:setState(State.SUSPENDED);recoveryStrategy.recover(this);break;case CLOSED:setState(State.CLOSED);break;default :break;}}  }
class C{  void add(SetupWindow window){  add(window,window.getKey());}  }
class C{  private void initAggregateMap(){  Iterator<String> it=typeMap.keySet().iterator();  while (it.hasNext()) {    AtomicReference<Number> ref=null;    String attribute=it.next();    Class<?> classzz=typeMap.get(attribute);    if (classzz == Long.TYPE) {      ref=new AtomicReference<Number>(new Long(0L));    } else     if (classzz == Integer.TYPE) {      ref=new AtomicReference<Number>(new Integer(0));    } else     if (classzz == Float.TYPE) {      ref=new AtomicReference<Number>(new Float(0F));    } else     if (classzz == Double.TYPE) {      ref=new AtomicReference<Number>(new Double(0D));    }    aggregateMap.put(attribute,ref);  }}  }
class C{  public static boolean isJavaScriptEnabled(HttpServletRequest request){  HttpSession session=request.getSession();  Boolean javaScriptEnabled=(Boolean)session.getAttribute("javaScriptEnabled");  if (javaScriptEnabled != null) {    return javaScriptEnabled.booleanValue();  }  return false;}  }
class C{  protected Float wrapValue(float k){  return new Float(k);}  }
class C{  public CountSimComparisonKMLWriter(final List<CountSimComparison> countSimCompList,final Network network,final CoordinateTransformation coordTransform){  super(countSimCompList);  this.network=network;  this.counts=null;  this.coordTransform=coordTransform;  this.graphname="countsSimRealPerHour_";}  }
class C{  public BezierOutlineHandle(BezierFigure owner){  this(owner,false);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.912 -0500",hash_original_method="5736B1A89F8587C3C51B72E5484012E7",hash_generated_method="B6FF23F3FBB84652AFC78CC30408C7FF") public boolean contains(float left,float top,float right,float bottom){  return (((left + top + right+ bottom+ getTaintInt())) == 1);}  }
class C{  public void testTimedPoll() throws InterruptedException {  LinkedBlockingQueue q=populatedQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.poll(SHORT_DELAY_MS,MILLISECONDS));  }  assertNull(q.poll(SHORT_DELAY_MS,MILLISECONDS));}  }
class C{  @Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){  throw new UnsupportedOperationException("Not implemented");}  }
class C{  private byte[] readASCII(byte[] data,int start,int end){  byte[] o=new byte[(end - start) / 2];  int count=0;  int bit=0;  for (int loc=start; loc < end; loc++) {    char c=(char)(data[loc] & 0xff);    byte b=(byte)0;    if (c >= '0' && c <= '9') {      b=(byte)(c - '0');    } else     if (c >= 'a' && c <= 'f') {      b=(byte)(10 + (c - 'a'));    } else     if (c >= 'A' && c <= 'F') {      b=(byte)(10 + (c - 'A'));    } else {      continue;    }    if ((bit++ % 2) == 0) {      o[count]=(byte)(b << 4);    } else {      o[count++]|=b;    }  }  return o;}  }
class C{  public DebuggerTemplate createDebuggerTemplate(final String name,final String host,final int port) throws CouldntSaveDataException {  try {    final com.google.security.zynamics.binnavi.debug.debugger.DebuggerTemplate newTemplate=m_manager.createDebugger(name,host,port);    return ObjectFinders.getObject(newTemplate,m_debuggerTemplates);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public MatFileReader(File file) throws IOException {  this(file,new MatFileFilter());}  }
class C{  static public void assertEquals(String message,int expected,int actual){  assertEquals(message,Integer.valueOf(expected),Integer.valueOf(actual));}  }
class C{  public Matrix4d normalize3x3(){  return normalize3x3(this);}  }
class C{  public static void dump(String fileName,boolean details){  dump(fileName,new PrintWriter(System.out),details);}  }
class C{  private void processTuple(ArrayList<Integer> tempOsrMaps,LocalRegPair tuple,boolean isLast){  int first=(tuple.num << NUM_SHIFT) & NUM_MASK;  if (!isLast) {    first|=NEXT_BIT;  }  first|=(tuple.kind ? 1 : 0) << KIND_SHIFT;  first|=(tuple.valueType << VTYPE_SHIFT);switch (tuple.typeCode) {case BooleanTypeCode:case ByteTypeCode:case CharTypeCode:case ShortTypeCode:case IntTypeCode:    first|=(INT << TCODE_SHIFT);  break;case FloatTypeCode:first|=(FLOAT << TCODE_SHIFT);break;case DoubleTypeCode:first|=(DOUBLE << TCODE_SHIFT);break;case LongTypeCode:if (VM.BuildFor32Addr || (tuple.valueType == LCONST)) {first|=NEXT_BIT;first|=(HIGH_64BIT << TCODE_SHIFT);tempOsrMaps.add(first);if (VM.BuildFor64Addr) {tempOsrMaps.add(tuple.value.rshl(32).toInt());} else {tempOsrMaps.add(tuple.value.toInt());tuple=tuple._otherHalf;}first=(tuple.num << NUM_SHIFT) & NUM_MASK;if (!isLast) first|=NEXT_BIT;first|=(tuple.kind ? 1 : 0) << KIND_SHIFT;first|=(tuple.valueType << VTYPE_SHIFT);}first|=(LONG << TCODE_SHIFT);break;case ReturnAddressTypeCode:if (false) {VM.sysWrite("returnaddress type for ");if (tuple.kind == LOCAL) {VM.sysWrite("L" + tuple.num);} else {VM.sysWrite("S" + tuple.num);}VM.sysWrite("\n");}first|=(RET_ADDR << TCODE_SHIFT);break;case WordTypeCode:if (VM.BuildFor64Addr && (tuple.valueType == ICONST)) {first|=NEXT_BIT;first|=(HIGH_64BIT << TCODE_SHIFT);tempOsrMaps.add(first);tempOsrMaps.add(tuple.value.rshl(32).toInt());first=(tuple.num << NUM_SHIFT) & NUM_MASK;if (!isLast) first|=NEXT_BIT;first|=(tuple.kind ? 1 : 0) << KIND_SHIFT;first|=(tuple.valueType << VTYPE_SHIFT);}first|=(WORD << TCODE_SHIFT);break;case ClassTypeCode:case ArrayTypeCode:first|=(REF << TCODE_SHIFT);break;}tempOsrMaps.add(first);tempOsrMaps.add(tuple.value.toInt());}  }
class C{  public void addOddChildCondition(){  _specificityC++;  addCondition(Condition.createOddChildCondition());}  }
class C{  @Override public void delete(){  HumanResource.this.myAssignments.remove(this);  HumanResource.this.fireAssignmentChanged(this);}  }
class C{  public JFontChooser(Controller controller){  this.controller=controller;  this.fontSizeStrings=DEFAULT_FONT_SIZE_STRINGS;  defaultFont=FontSizer.INSTANCE.getAdjustedDefaultFont();  fontMetrics=getFontMetrics(defaultFont);  int minimumWidth=fontMetrics.stringWidth(MultiBitFrame.EXAMPLE_LONG_FIELD_TEXT) + WIDTH_DELTA;  int minimumHeight=12 * fontMetrics.getHeight() + HEIGHT_DELTA;  setMinimumSize(new Dimension(minimumWidth,minimumHeight));  setPreferredSize(new Dimension(minimumWidth,minimumHeight));  applyComponentOrientation(ComponentOrientation.getOrientation(controller.getLocaliser().getLocale()));  JPanel selectPanel=new JPanel();  selectPanel.applyComponentOrientation(ComponentOrientation.getOrientation(controller.getLocaliser().getLocale()));  selectPanel.setLayout(new BoxLayout(selectPanel,BoxLayout.X_AXIS));  if (ComponentOrientation.LEFT_TO_RIGHT == ComponentOrientation.getOrientation(controller.getLocaliser().getLocale())) {    selectPanel.add(getFontFamilyPanel());    selectPanel.add(getFontStylePanel());    selectPanel.add(getFontSizePanel());  } else {    selectPanel.add(getFontSizePanel());    selectPanel.add(getFontStylePanel());    selectPanel.add(getFontFamilyPanel());  }  JPanel contentsPanel=new JPanel();  contentsPanel.applyComponentOrientation(ComponentOrientation.getOrientation(controller.getLocaliser().getLocale()));  contentsPanel.setLayout(new GridLayout(2,1));  contentsPanel.add(selectPanel,BorderLayout.CENTER);  contentsPanel.add(getSamplePanel(),BorderLayout.SOUTH);  this.setLayout(new BoxLayout(this,BoxLayout.X_AXIS));  this.add(contentsPanel);  this.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  this.setSelectedFont(DEFAULT_SELECTED_FONT);}  }
class C{  void transform(){  glEnable(GL_RASTERIZER_DISCARD);  glUseProgram(feedbackProgram);  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));  glUniformMatrix4fv(projectionMatrixUniform,false,projMatrix.get(matrixBuffer));  glBindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER,0,this.ssbo);  glBeginTransformFeedback(GL_TRIANGLES);  glBindVertexArray(vaoScene);{    modelMatrix.identity().rotateY(elapsedTime);    viewMatrix.mulAffine(modelMatrix,modelViewMatrix).normal(normalMatrix);    glUniformMatrix4fv(modelMatrixUniform,false,modelMatrix.get(matrixBuffer));    glUniformMatrix3fv(normalMatrixUniform,false,normalMatrix.get(matrixBuffer));    glDrawArrays(GL_TRIANGLES,0,mesh.numVertices);  }{    modelMatrix.rotationY(elapsedTime).translate(2.0f,0.0f,0.0f).scale(0.2f).scale(1.0f,(float)Math.abs(Math.sin(elapsedTime)),1.0f);    viewMatrix.mulAffine(modelMatrix,modelViewMatrix).normal(normalMatrix);    glUniformMatrix4fv(modelMatrixUniform,false,modelMatrix.get(matrixBuffer));    glUniformMatrix3fv(normalMatrixUniform,false,normalMatrix.get(matrixBuffer));    glDrawArrays(GL_TRIANGLES,0,mesh.numVertices);  }  glBindVertexArray(0);  glEndTransformFeedback();  glBindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER,0,0);  glUseProgram(0);  glDisable(GL_RASTERIZER_DISCARD);}  }
class C{  private boolean isViewHit(View view,int x,int y){  int[] viewLocation=new int[2];  view.getLocationOnScreen(viewLocation);  int[] parentLocation=new int[2];  this.getLocationOnScreen(parentLocation);  int screenX=parentLocation[0] + x;  int screenY=parentLocation[1] + y;  return screenX >= viewLocation[0] && screenX < viewLocation[0] + view.getWidth() && screenY >= viewLocation[1] && screenY < viewLocation[1] + view.getHeight();}  }
class C{  public NavigationCommand(String command,int id){  super(command,id);}  }
class C{  public boolean handleMessage(Message m,Object o){  if (!super.handleMessage(m,o)) {    if (m.getType().equals(MasterAgent.M_EVALUATE)) {      ((MasterEvaluator)evaluator).receiveEvaluatorData((EvaluatorData)o);    } else     return false;  }  return true;}  }
class C{  @Override public void panRangeAxes(double percent,PlotRenderingInfo info,Point2D source){  if (!isRangePannable()) {    return;  }  for (  ValueAxis axis : this.rangeAxes.values()) {    if (axis == null) {      continue;    }    double length=axis.getRange().getLength();    double adj=percent * length;    if (axis.isInverted()) {      adj=-adj;    }    axis.setRange(axis.getLowerBound() + adj,axis.getUpperBound() + adj);  }}  }
class C{  public boolean hasNextState(){  return next != null;}  }
class C{  public static byte[] readData(final ClientReader inputStream) throws IOException {  final int length=(int)readDWord(inputStream);  readDWord(inputStream,DebugArgumentType.DATA.getValue());  return readBytes(inputStream,length);}  }
class C{  public OpacityManager(String prop,boolean inherit){  property=prop;  inherited=inherit;}  }
class C{  public static boolean isXMLNameCharacter(char c){  return (NAME_CHARACTER[c / 32] & (1 << (c % 32))) != 0;}  }
class C{  protected static long nextID(){  m_CurrentID++;  return m_CurrentID;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.482 -0500",hash_original_method="2E7034A69395E1E5DBB2950602CE4F4E",hash_generated_method="5845989284F179105F977771244844BC") public Builder addIndexSetType(Primitive p){  Entry indexType=new Entry();  indexType.t=null;  indexType.e=null;  indexType.size=0;  indexType.prim=p;  mIndexTypes.addElement(indexType);  return this;}  }
class C{  public HttpRequest(String url){  this.m_url=url;  m_connectTimeout=-1;  m_readTimeout=-1;}  }
class C{  public static Bitmap shrink(Bitmap bitmap,float scale){  if (scale >= 1.0f) {    return bitmap.copy(bitmap.getConfig(),false);  }  Matrix matrix=new Matrix();  matrix.postScale(scale,scale);  return Bitmap.createBitmap(bitmap,0,0,(int)(scale * bitmap.getWidth()),(int)(scale * bitmap.getHeight()),matrix,true);}  }
class C{  public boolean isDisplayBoundingPoints(){  return mDisplayBoundingPoints;}  }
class C{  private String convertLessThanOneThousand(int number){  String soFar;  if (number % 100 < 20) {    soFar=numNames[number % 100];    number/=100;  } else {    soFar=numNames[number % 10];    number/=10;    String s=Integer.toString(number);    if (s.endsWith("2") && !soFar.equals(""))     soFar=" VINT-I-" + soFar.trim(); else     if (soFar.equals(""))     soFar=tensNames[number % 10] + soFar; else     soFar=tensNames[number % 10] + "-" + soFar;    number/=10;  }  if (number == 0)   return tensNames[number % 10] + soFar;  if (number > 1)   soFar="S" + soFar;  if (number == 1 && !soFar.equals(""))   number=0;  return numNames[number] + " CENT" + soFar;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Builder query(String... query){  this.query=query;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.869 -0400",hash_original_method="3A8CB74DE4DC3CEA9C672A9C00607FF1",hash_generated_method="7AD30FF30CDD6B8CEAD94B576867F0ED") public static IOFileFilter suffixFileFilter(String suffix){  return new SuffixFileFilter(suffix);}  }
class C{  public ManagerLogWriter(int level,PrintStream out){  this(level,out,null);}  }
class C{  public List<String> mainHeader(){  return mainHeader;}  }
class C{  public boolean resolveInAnnotation(){  if (fInAnnotationRequested)   return fInAnnotation;  fInAnnotationRequested=true;  resolveSelectedNodes();  ASTNode node=getStartNode();  while (node != null) {    if (node instanceof Annotation) {      fInAnnotation=true;      break;    }    node=node.getParent();  }  return fInAnnotation;}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  public boolean hasLongitude(){  return mHasLongitude;}  }
class C{  public void handleDocumentEvent(DocumentEvent e){  if (running && parsers.size() > 0) {    timer.restart();  }}  }
class C{  boolean hasRegisteredNode(UUID nodeId,IgniteUuid ldrId){  assert nodeId != null;  assert ldrId != null;  IgniteUuid ldrId0;synchronized (mux) {    ldrId0=nodeLdrMap.get(nodeId);  }  return ldrId0 != null && ldrId0.equals(ldrId);}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if (b == null) {    throw new NullPointerException();  }  if ((off < 0) || (len < 0) || (off + len > b.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return 0;  }  long pos=readUntil(pointer + len);  len=(int)Math.min(len,pos - pointer);  if (len > 0) {    cache.seek(pointer);    cache.readFully(b,off,len);    pointer+=len;    return len;  } else {    return -1;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (importURI: ");  result.append(importURI);  result.append(')');  return result.toString();}  }
class C{  private void neverChangeLabel(T label,VisualNode node){  label.setText(text);  label.setIcon(icon);}  }
class C{  public void addChild(Component child){  components.add(child);  child.setParent(this);}  }
class C{  public boolean hasAttendeeType(){  return super.hasElement(AttendeeType.KEY);}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  protected void checkChildType(Node n,boolean replace){switch (n.getNodeType()) {case ELEMENT_NODE:case PROCESSING_INSTRUCTION_NODE:case COMMENT_NODE:case TEXT_NODE:case CDATA_SECTION_NODE:case ENTITY_REFERENCE_NODE:case DOCUMENT_FRAGMENT_NODE:    break;default :  throw createDOMException(DOMException.HIERARCHY_REQUEST_ERR,"child.type",new Object[]{new Integer(getNodeType()),getNodeName(),new Integer(n.getNodeType()),n.getNodeName()});}}  }
class C{  public static DataWrapper serializableInstance(){  return new DataWrapper(new Parameters());}  }
class C{  public void sort(Comparator<Individual> comparator){  Collections.sort(individuals,comparator);}  }
class C{  public Result beforeCharTyped(char c,final Project project,final Editor editor,final PsiFile file,final FileType fileType){  return Result.CONTINUE;}  }
class C{  public void writeStatement(Statement oldStm){  boolean internal=this.internal;  this.internal=true;  try {    super.writeStatement(oldStm);    mark(oldStm);    Object target=oldStm.getTarget();    if (target instanceof Field) {      String method=oldStm.getMethodName();      Object[] args=oldStm.getArguments();      if ((method == null) || (args == null)) {      } else       if (method.equals("get") && (args.length == 1)) {        target=args[0];      } else       if (method.equals("set") && (args.length == 2)) {        target=args[0];      }    }    statementList(target).add(oldStm);  } catch (  Exception e) {    getExceptionListener().exceptionThrown(new Exception("XMLEncoder: discarding statement " + oldStm,e));  }  this.internal=internal;}  }
class C{  public static boolean followsSQFFunctionNameRules(SQFVariable variable){  return SQFStatic.followsSQFFunctionNameRules(variable.getVarName());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:11.679 -0500",hash_original_method="A04989E1C9551E085CB246E835FB8373",hash_generated_method="72794CF8418DDDE2C6E8DE9C87189279") public void updateEF(AdnRecord adn,int ef,int extensionEF,int recordNumber,String pin2,Message response){  this.ef=ef;  this.extensionEF=extensionEF;  this.recordNumber=recordNumber;  this.userResponse=response;  this.pin2=pin2;  phone.mIccFileHandler.getEFLinearRecordSize(ef,obtainMessage(EVENT_EF_LINEAR_RECORD_SIZE_DONE,adn));}  }
class C{  protected void writeExternalIndexCreateStmt(Table table,IIndex index,StringBuilder ddl){  if (databaseInfo.isIndicesSupported()) {    if (index.getName() == null) {      log.warn("Cannot write unnamed index " + index);    } else {      ddl.append("CREATE");      if (index.isUnique()) {        ddl.append(" UNIQUE");      }      ddl.append(" INDEX ");      printIdentifier(getIndexName(index),ddl);      ddl.append(" ON ");      ddl.append(getFullyQualifiedTableNameShorten(table));      ddl.append(" (");      for (int idx=0; idx < index.getColumnCount(); idx++) {        IndexColumn idxColumn=index.getColumn(idx);        if (idx > 0) {          ddl.append(", ");        }        String name=shortenName(idxColumn.getName(),databaseInfo.getMaxColumnNameLength());        if (name.startsWith("(")) {          ddl.append(name);        } else {          printIdentifier(name,ddl);        }      }      ddl.append(")");      printEndOfStatement(ddl);    }  }}  }
class C{  public static InputStream emptyInputStream(){  return emptyInputStream;}  }
class C{  public final void testKnownGeotoolsTransformation(){  CoordinateTransformation transformation=TransformationFactory.getCoordinateTransformation(TransformationFactory.WGS84_UTM35S,TransformationFactory.WGS84);  assertNotNull(transformation);  assertTrue(transformation instanceof GeotoolsTransformation);}  }
class C{  protected ForkJoinWorkerThread(ForkJoinPool pool){  super("aForkJoinWorkerThread");  this.pool=pool;  this.workQueue=pool.registerWorker(this);}  }
class C{  GeneralRange<T> reverse(){  GeneralRange<T> result=reverse;  if (result == null) {    result=new GeneralRange<T>(Ordering.from(comparator).reverse(),hasUpperBound,getUpperEndpoint(),getUpperBoundType(),hasLowerBound,getLowerEndpoint(),getLowerBoundType());    result.reverse=this;    return this.reverse=result;  }  return result;}  }
class C{  protected void fireTableEvent(int row0,int row1,int col,int type){  if (col == EventConstants.ALL_COLUMNS && type == EventConstants.DELETE) {    for (int r=row0; r <= row1; ++r)     clearAggregateMappings(r,false);  }  super.fireTableEvent(row0,row1,col,type);}  }
class C{  public boolean isArmed(){  return other.isArmed();}  }
class C{  public static KeyStroke parseKeyStroke(String keyStroke){  if (keyStroke == null) {    return null;  }  int modifiers=0;  int index=keyStroke.indexOf('+');  if (index != -1) {    for (int i=0; i < index; i++) {switch (Character.toUpperCase(keyStroke.charAt(i))) {case 'A':        modifiers|=InputEvent.ALT_MASK;      break;case 'C':    modifiers|=InputEvent.CTRL_MASK;  break;case 'M':modifiers|=InputEvent.META_MASK;break;case 'S':modifiers|=InputEvent.SHIFT_MASK;break;}}}String key=keyStroke.substring(index + 1);if (key.length() == 1) {char ch=Character.toUpperCase(key.charAt(0));if (modifiers == 0) {return KeyStroke.getKeyStroke(ch);} else {return KeyStroke.getKeyStroke(ch,modifiers);}} else if (key.length() == 0) {return null;} else {int ch;try {ch=KeyEvent.class.getField("VK_".concat(key)).getInt(null);} catch (Exception e) {return null;}return KeyStroke.getKeyStroke(ch,modifiers);}}  }
class C{  private void seekVideo(int seekTo){  mMediaPlayer.seekTo(seekTo);}  }
class C{  public RaptorState deepCopy(){  RaptorState state=this;  RaptorState ret=this.copy();  RaptorState copy=ret;  while (state.previous != null) {    copy.previous=state.previous.copy();    copy.previous.previous=null;    state=state.previous;    copy=copy.previous;  }  return ret;}  }
class C{  private ResultFormat(String value){  this.paramValue=value;}  }
class C{  public static String convertImageId(String response){  String model="<photoid>";  return response.substring(response.indexOf(model) + model.length(),response.indexOf("</photoid>"));}  }
class C{  public List<NamedRelatedVirtualPoolRep> listByTenant(URI tenantId){  UriBuilder builder=client.uriBuilder(baseUrl);  builder.queryParam(SearchConstants.TENANT_ID_PARAM,tenantId);  VirtualPoolList response=client.getURI(VirtualPoolList.class,builder.build());  return ResourceUtils.defaultList(response.getVirtualPool());}  }
class C{  public MarshalException(String message){  super(message);}  }
class C{  public synchronized ISourceRange mapSource(IType type,char[] contents,IBinaryType info,IJavaElement elementToFind){  this.binaryType=(BinaryType)type;  if (this.sourceRanges.get(type) != null)   return (elementToFind != null) ? getNameRange(elementToFind) : null;  this.importsTable.remove(this.binaryType);  this.importsCounterTable.remove(this.binaryType);  this.searchedElement=elementToFind;  this.types=new IType[1];  this.typeDeclarationStarts=new int[1];  this.typeNameRanges=new SourceRange[1];  this.typeModifiers=new int[1];  this.typeDepth=-1;  this.memberDeclarationStart=new int[1];  this.memberName=new String[1];  this.memberNameRange=new SourceRange[1];  this.methodParameterTypes=new char[1][][];  this.methodParameterNames=new char[1][][];  this.anonymousCounter=0;  HashMap oldSourceRanges=null;  if (elementToFind != null) {    oldSourceRanges=(HashMap)this.sourceRanges.clone();  }  try {    IProblemFactory factory=new DefaultProblemFactory();    SourceElementParser parser=null;    this.anonymousClassName=0;    if (info == null) {      try {        info=(IBinaryType)this.binaryType.getElementInfo();      } catch (      JavaModelException e) {        return null;      }    }    boolean isAnonymousClass=info.isAnonymous();    char[] fullName=info.getName();    if (isAnonymousClass) {      String eltName=this.binaryType.getParent().getElementName();      eltName=eltName.substring(eltName.lastIndexOf('$') + 1,eltName.length());      try {        this.anonymousClassName=Integer.parseInt(eltName);      } catch (      NumberFormatException e) {      }    }    boolean doFullParse=hasToRetrieveSourceRangesForLocalClass(fullName);    parser=new SourceElementParser(this,factory,new CompilerOptions(this.options),doFullParse,true);    parser.javadocParser.checkDocComment=false;    IJavaElement javaElement=this.binaryType.getCompilationUnit();    if (javaElement == null)     javaElement=this.binaryType.getParent();    parser.parseCompilationUnit(new BasicCompilationUnit(contents,null,this.binaryType.sourceFileName(info),javaElement),doFullParse,null);    if (elementToFind != null) {      ISourceRange range=getNameRange(elementToFind);      return range;    } else {      return null;    }  }  finally {    if (elementToFind != null) {      this.sourceRanges=oldSourceRanges;    }    this.binaryType=null;    this.searchedElement=null;    this.types=null;    this.typeDeclarationStarts=null;    this.typeNameRanges=null;    this.typeDepth=-1;  }}  }
class C{  public JMenuItem(String text){  this(text,(Icon)null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.872 -0500",hash_original_method="2F687A14AA3727476BB6949A7966696D",hash_generated_method="C526E32916C0209761BD154F36DD7C08") private String doubleQuote(String param){  if (param != null) {    return "\"" + param + "\"";  }  return null;}  }
class C{  public static String uuid(){  char[] uuid=new char[36];  int r;  uuid[8]=uuid[13]=uuid[18]=uuid[23]='-';  uuid[14]='4';  for (int i=0; i < 36; i++) {    if (uuid[i] == 0) {      r=(int)(Math.random() * 16);      uuid[i]=CHARS[(i == 19) ? (r & 0x3) | 0x8 : r & 0xf];    }  }  return new String(uuid);}  }
class C{  public static boolean isECAvailable(KeyStoreType keyStoreType){  return ((JavaVersion.getJreVersion().isAtLeast(JavaVersion.JRE_VERSION_170) && sunECProviderAvailable) || isBouncyCastleKeyStore(keyStoreType));}  }
class C{  public void checkAllRegistered(Collection<WorldGeneratorModifier> modifiers){  toIds(modifiers);}  }
class C{  public boolean equals(Object otherObj){  if (!(otherObj instanceof CharArrayList))   return super.equals(otherObj);  if (this == otherObj)   return true;  if (otherObj == null)   return false;  CharArrayList other=(CharArrayList)otherObj;  if (size() != other.size())   return false;  char[] theElements=elements();  char[] otherElements=other.elements();  for (int i=size(); --i >= 0; ) {    if (theElements[i] != otherElements[i])     return false;  }  return true;}  }
class C{  public boolean invalidateIt(){  log.info("invalidateIt - " + toString());  return true;}  }
class C{  public String[] diff_prettyHtml(LinkedList<Diff> diffs){  StringBuilder html=new StringBuilder();  int numEqual=0;  for (  Diff aDiff : diffs) {    String text=aDiff.text.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\n","&para;<br>");switch (aDiff.operation) {case INSERT:      html.append("<font color=\"#7fe77f\">").append(text).append("</font>");    break;case DELETE:  html.append("<font color=\"#ee9797\">").append(text).append("</font>");break;case EQUAL:html.append("<span>").append(text).append("</span>");numEqual+=text.split(" ").length;break;}}return new String[]{html.toString(),String.valueOf(numEqual)};}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Window_ID"))     p_AD_WindowFrom_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  p_AD_WindowTo_ID=getRecord_ID();}  }
class C{  public void reset(){  mProvider=null;  mTime=0;  mElapsedRealtimeNanos=0;  mLatitude=0;  mLongitude=0;  mHasAltitude=false;  mAltitude=0;  mHasSpeed=false;  mSpeed=0;  mHasBearing=false;  mBearing=0;  mHasAccuracy=false;  mAccuracy=0;  mExtras=null;  mIsFromMockProvider=false;}  }
class C{  public void endFilterInterval(){  endMillis=System.currentTimeMillis();  totalFilterMillis+=(endMillis - intervalStartMillis);  state=TaskState.other;}  }
class C{  void appendOp(int length,int op){  int totalLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  m_ops.setOp(totalLen,op);  m_ops.setOp(totalLen + OpMap.MAPINDEX_LENGTH,length);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,totalLen + length);}  }
class C{  public void addWidgets(WidgetsModel model){  mRecyclerView.setWidgets(model);  mAdapter.setWidgetsModel(model);  mAdapter.notifyDataSetChanged();}  }
class C{  public static void test2(int size,AbstractDistribution a,AbstractDistribution b){  System.out.println("FIXME:  Should this test exist without hep.aida");  System.out.println("\n\nBenchmarking frequencies...\n");  IntArrayList freq=new IntArrayList();  DoubleArrayList distinct=new DoubleArrayList();  cern.colt.Timer timer=new cern.colt.Timer();  timer.reset();  timer.start();  timer.stop().display();  System.out.println("\n\nGood bye.\n");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public boolean validateFullBounds(){  try {    if (comparisonBounds == null) {      System.out.println("Im null before.");    }    comparisonBounds=getUnionOfChildrenBounds(comparisonBounds);    if (comparisonBounds == null) {      System.out.println("Im null after.");    }  } catch (  NullPointerException npe) {    npe.printStackTrace();  }  if (!cachedChildBounds.equals(comparisonBounds)) {    setPaintInvalid(true);  }  return super.validateFullBounds();}  }
class C{  public void pushTreeChangedEvent(){  pushTreeChangedEvent(new TreeChangedEvent());}  }
class C{  @Override public void onTokenRefresh(){  Intent intent=new Intent(this,RegistrationIntentService.class);  startService(intent);}  }
class C{  private boolean analyzeTraces(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,List<ExecutionResult> results,Map<String,Integer> callCount){  boolean hasTimeoutOrTestException=false;  for (  ExecutionResult result : results) {    if (result.hasTimeout() || result.hasTestException()) {      hasTimeoutOrTestException=true;      continue;    }    for (    Integer line : result.getTrace().getAllCoveredLines()) {      if (linesCoverageMap.containsKey(line)) {        if (!lines.contains(line) || removedLines.contains(line))         continue;        result.test.addCoveredGoal(linesCoverageMap.get(line));        if (Properties.TEST_ARCHIVE) {          toRemoveLines.add(line);          TestsArchive.instance.putTest(this,linesCoverageMap.get(line),result);          suite.isToBeUpdated(true);        }      }    }  }  return hasTimeoutOrTestException;}  }
class C{  public VmHostData(String hostName){  this(hostName,false);}  }
class C{  public SparseGraphProjectionBuilder(){  super(new SparseGraphProjectionFactory<G,V,E>());}  }
class C{  private static Point2f findBackgroundMarker(Mat markers,MatVector contours){  final int cols=markers.cols();  final int rows=markers.rows();  final int minDist=5;  Point2f backgroundLabel=new Point2f();  boolean found=false;  for (int x=minDist; x < cols - minDist && !found; x++) {    for (int y=minDist; y < rows - minDist && !found; y++) {      backgroundLabel.x(x);      backgroundLabel.y(y);      boolean isOpen=true;      for (int c=0; c < contours.size(); c++) {        isOpen=pointPolygonTest(contours.get(c),backgroundLabel,true) <= -minDist;        if (!isOpen) {          break;        }      }      found=isOpen;    }  }  if (!found) {    throw new IllegalStateException("Could not find a point for the background label");  }  return backgroundLabel;}  }
class C{  public static void sort(char[] array){  sort(0,array.length,array);}  }
class C{  public static List<MgmtTarget> toResponseWithLinksAndPollStatus(final Collection<Target> targets){  if (targets == null) {    return Collections.emptyList();  }  return targets.stream().map(null).collect(Collectors.toList());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TCLASSIFIER__AST_ELEMENT:    setAstElement((EObject)newValue);  return;case TypesPackage.TCLASSIFIER__DECLARED_COVARIANT_CONSTRUCTOR:setDeclaredCovariantConstructor((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public List transform(Object[] organosProductores){  List ltOrganosProductores=new ArrayList();  if (organosProductores != null) {    for (int i=0; i < organosProductores.length; i++) {      if (organosProductores[i] instanceof ieci.tdw.ispac.services.dto.OrganoProductor) {        ieci.tdw.ispac.services.dto.OrganoProductor organoProductor=(ieci.tdw.ispac.services.dto.OrganoProductor)organosProductores[i];        OrganoProductorImpl organoProductorImpl=new OrganoProductorImpl();        organoProductorImpl.setId(organoProductor.getId());        organoProductorImpl.setInicioProduccion(organoProductor.getInicioProduccion());        ltOrganosProductores.add(organoProductorImpl);      } else       if (organosProductores[i] instanceof ieci.tdw.ispac.services.ws.client.dto.OrganoProductor) {        ieci.tdw.ispac.services.ws.client.dto.OrganoProductor organoProductor=(ieci.tdw.ispac.services.ws.client.dto.OrganoProductor)organosProductores[i];        OrganoProductorImpl organoProductorImpl=new OrganoProductorImpl();        organoProductorImpl.setId(organoProductor.getId());        organoProductorImpl.setInicioProduccion(organoProductor.getInicioProduccion());        ltOrganosProductores.add(organoProductorImpl);      }    }  }  return ltOrganosProductores;}  }
class C{  @Override public int hashCode(){  return this.inputStream.hashCode();}  }
class C{  public static ArtifactCreator makeResourceArtifactCreator(RepositoryManager repoManager,Iterable<? extends File> sourcePaths,Iterable<? extends File> resourcePaths,String resourceRootName,String moduleName,String moduleVersion,boolean verbose,Logger log) throws IOException {  return new ResourceArtifactCreatorImpl(repoManager,sourcePaths,resourcePaths,resourceRootName,moduleName,moduleVersion,verbose,log);}  }
class C{  public void addElement(ErStackTraceElement element){  if (className == null) {    declaringClass=element.getDeclaringClass();    if (declaringClass.contains(".")) {      className=declaringClass.substring(declaringClass.lastIndexOf(".") + 1);      packageName=declaringClass.substring(0,declaringClass.lastIndexOf("."));    } else {      className=declaringClass;      packageName="";    }    fileName=element.getFileName();    if (checkBasePackages(declaringClass)) {      isBasePackage=true;    }  }  stackTraceElements.add(element);}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static IFile findUmletDiagram(ICompilationUnit unit,String src) throws JavaModelException {  IPath imgRef=getRootRelativePath(unit,src);  IFile pngFile=getFile(getPackageFragmentRoot(unit),imgRef);  IFile uxfFile=getUxfDiagramForImgFile(pngFile);  if (uxfFile.exists()) {    return uxfFile;  }  return null;}  }
class C{  public BufferAllocator allocator(){  return allocator;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean isYear(){  String pt=getPAPeriodType();  if (pt == null)   return false;  return PAPERIODTYPE_Year.equals(pt);}  }
class C{  @SuppressFBWarnings(value="EI_EXPOSE_REP",justification="Returns internal buffer by design") public byte[] readAll() throws IOException {  if (pos == 0 && count == buf.length) {    pos=count;    return buf;  }  byte[] ret=new byte[count - pos];  super.read(ret);  return ret;}  }
class C{  public SystemStream(SystemStream other){  this(other.getSystem(),other.getStream());}  }
class C{  private static boolean equalityConditionPresent(Column column,List<ConditionExpression> conditions){  for (  ConditionExpression cond : conditions) {    if (cond instanceof ComparisonCondition) {      ComparisonCondition cc=(ComparisonCondition)cond;      ColumnExpression colExpr=null;      ExpressionNode otherExpr=null;      if (cc.getLeft() instanceof ColumnExpression) {        colExpr=(ColumnExpression)cc.getLeft();        otherExpr=cc.getRight();      } else       if (cc.getRight() instanceof ColumnExpression) {        colExpr=(ColumnExpression)cc.getRight();        otherExpr=cc.getLeft();      }      if ((colExpr != null) && (cc.getOperation() == Comparison.EQ) && (colExpr.getColumn() == column)&& (otherExpr instanceof ConstantExpression || otherExpr instanceof ParameterExpression)) {        return true;      }    }  }  return false;}  }
class C{  public MBeanNotificationInfo(String[] notifTypes,String name,String description){  this(notifTypes,name,description,null);}  }
class C{  public RemoteInterpreterResult(RemoteInterpreterResult other){  if (other.isSetCode()) {    this.code=other.code;  }  if (other.isSetType()) {    this.type=other.type;  }  if (other.isSetMsg()) {    this.msg=other.msg;  }  if (other.isSetConfig()) {    this.config=other.config;  }  if (other.isSetGui()) {    this.gui=other.gui;  }}  }
class C{  public ServiceSchemeException(){  super();}  }
class C{  public static String formatNumber(String source){  SpannableStringBuilder text=new SpannableStringBuilder(source);  formatNumber(text,getFormatTypeForLocale(Locale.getDefault()));  return text.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodetextnodeattribute.class,args);}  }
class C{  public Sort weightSort(Sort sort) throws IOException {  return (sort != null) ? sort.rewrite(this) : null;}  }
class C{  public AltRegistry(){  this(null);}  }
class C{  private void updateTokenScopes(){  boolean chat=client.settings.getBoolean("token_chat");  boolean commercials=client.settings.getBoolean("token_commercials");  boolean editor=client.settings.getBoolean("token_editor");  boolean user=client.settings.getBoolean("token_user");  boolean subscriptions=client.settings.getBoolean("token_subs");  boolean follow=client.settings.getBoolean("token_follow");  tokenDialog.updateAccess(chat,editor,commercials,user,subscriptions,follow);  adminDialog.updateAccess(editor,commercials);}  }
class C{  public XMLSignature(Element element,String baseURI) throws XMLSignatureException, XMLSecurityException {  this(element,baseURI,false);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_OPTIONS_1__TRACE_OPTION_1:    return ((InternalEList<?>)getTraceOption_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target,int leg){  final Entity ae=game.getEntity(attackerId);  if (ae == null)   return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't attack from a null entity!");  if (!game.getOptions().booleanOption("tacops_jump_jet_attack"))   return new ToHitData(TargetRoll.IMPOSSIBLE,"no Jump Jet attack");  String impossible=toHitIsImpossible(game,ae,target);  if (impossible != null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"impossible");  }  IHex attHex=game.getBoard().getHex(ae.getPosition());  IHex targHex=game.getBoard().getHex(target.getPosition());  final int attackerElevation=ae.getElevation() + attHex.getLevel();  final int attackerHeight=attackerElevation + ae.getHeight();  final int targetElevation=target.getElevation() + targHex.getLevel();  final int targetHeight=targetElevation + target.getHeight();  int[] kickLegs=new int[2];  if (ae.entityIsQuad() && !ae.isProne()) {    kickLegs[0]=Mech.LOC_RARM;    kickLegs[1]=Mech.LOC_LARM;  } else {    kickLegs[0]=Mech.LOC_RLEG;    kickLegs[1]=Mech.LOC_LLEG;  }  ToHitData toHit;  if (leg != RIGHT && leg != LEFT && leg != BOTH) {    throw new IllegalArgumentException("Leg must be LEFT or RIGHT");  }  if (!(ae instanceof Mech)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Non-mechs can't kick");  }  if (leg == BOTH && !ae.isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Only prone mechs can attack with both legs");  }  if ((ae.isLocationBad(kickLegs[0]) && (leg == BOTH || leg == LEFT)) || (ae.isLocationBad(kickLegs[1]) && (leg == BOTH || leg == RIGHT))) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Leg missing");  }  for (  Mounted m : ae.getMisc()) {    boolean hasJJ=false;    int loc=m.getLocation();    if (m.getType().hasFlag(MiscType.F_JUMP_JET) && m.isReady() && ((loc == kickLegs[0] && (leg == BOTH || leg == LEFT)) || (loc == kickLegs[1] && (leg == BOTH || leg == RIGHT)))) {      hasJJ=true;      break;    }    if (!hasJJ) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Jump jets missing or destroyed");    }  }  for (  Mounted mounted : ae.getWeaponList()) {    if (mounted.isUsedThisRound()) {      int loc=mounted.getLocation();      if (((leg == BOTH || leg == LEFT) && loc == kickLegs[0]) || ((leg == BOTH || leg == RIGHT) && loc == kickLegs[1])) {        return new ToHitData(TargetRoll.IMPOSSIBLE,"Weapons fired from leg this turn");      }    }  }  final int range=ae.getPosition().distance(target.getPosition());  if (1 != range) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Enemy must be at range 1");  }  if (!ae.isProne() && attackerHeight - targetHeight != 1) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target elevation not in range");  }  if (ae.isProne() && (attackerHeight > targetHeight || attackerHeight < targetElevation)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target elevation not in range");  }  if (!ae.isProne()) {    if (!target.getPosition().equals(ae.getPosition().translated(ae.getFacing()))) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not directly ahead of feet");    }  } else {    if (!target.getPosition().equals(ae.getPosition().translated((3 + ae.getFacing()) % 6))) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not directly behind of feet");    }  }  if (target.getTargetType() == Targetable.TYPE_BUILDING || target.getTargetType() == Targetable.TYPE_FUEL_TANK || target instanceof GunEmplacement) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Targeting adjacent building.");  }  int base=ae.getCrew().getPiloting() + 2;  toHit=new ToHitData(base,"base");  setCommonModifiers(toHit,game,ae,target);  if (ae.isProne()) {    toHit.addModifier(2,"Attacker is prone");  }  toHit.setSideTable(Compute.targetSideTable(ae,target));  return toHit;}  }
class C{  public void printTree(final EvolutionState state,final int log){  printTree(state,log,Output.V_VERBOSE);}  }
class C{  private void prepareSnapData() throws Exception {  log.info("Preparing block snapshots for BlockSnapshotReplicationGroupInstanceMigration");  BlockSnapshot snapshot=new BlockSnapshot();  snapURI=URIUtil.createId(BlockSnapshot.class);  groupInstance=UUID.randomUUID().toString();  snapshot.setId(snapURI);  snapshot.setSnapshotGroupInstance(groupInstance);  _dbClient.createObject(snapshot);}  }
class C{  public static TextHitInfo afterOffset(int offset){  return new TextHitInfo(offset,true);}  }
class C{  default boolean isCleared(){  return false;}  }
class C{  protected final void doTest(IgfsPath inFile,boolean useNewMapper,boolean useNewCombiner,boolean useNewReducer) throws Exception {  igfs.delete(new IgfsPath(PATH_OUTPUT),true);  JobConf jobConf=new JobConf();  jobConf.set(HadoopCommonUtils.JOB_COUNTER_WRITER_PROPERTY,IgniteHadoopFileSystemCounterWriter.class.getName());  jobConf.setUser(USER);  jobConf.set(IgniteHadoopFileSystemCounterWriter.COUNTER_WRITER_DIR_PROPERTY,"/xxx/${USER}/zzz");  jobConf.setInt(FileInputFormat.SPLIT_MAXSIZE,65000);  jobConf.setInt("fs.local.block.size",65000);  setupFileSystems(jobConf);  HadoopWordCount1.setTasksClasses(jobConf,!useNewMapper,!useNewCombiner,!useNewReducer);  Job job=Job.getInstance(jobConf);  HadoopWordCount2.setTasksClasses(job,useNewMapper,useNewCombiner,useNewReducer,compressOutputSnappy());  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(IntWritable.class);  FileInputFormat.setInputPaths(job,new Path(igfsScheme() + inFile.toString()));  FileOutputFormat.setOutputPath(job,new Path(igfsScheme() + PATH_OUTPUT));  job.setJarByClass(HadoopWordCount2.class);  HadoopJobId jobId=new HadoopJobId(UUID.randomUUID(),1);  IgniteInternalFuture<?> fut=grid(0).hadoop().submit(jobId,createJobInfo(job.getConfiguration()));  fut.get();  checkJobStatistics(jobId);  final String outFile=PATH_OUTPUT + "/" + (useNewReducer ? "part-r-" : "part-")+ "00000";  checkOwner(new IgfsPath(PATH_OUTPUT + "/" + "_SUCCESS"));  checkOwner(new IgfsPath(outFile));  String actual=readAndSortFile(outFile,job.getConfiguration());  assertEquals("Use new mapper: " + useNewMapper + ", new combiner: "+ useNewCombiner+ ", new reducer: "+ useNewReducer,"blue\t" + blue + "\n"+ "green\t"+ green+ "\n"+ "red\t"+ red+ "\n"+ "yellow\t"+ yellow+ "\n",actual);}  }
class C{  public static CallFormat readCall(VariableElement e) throws ProcessorError {  ClassParceler parceler=findParceler(e);  if (parceler == null) {    return null;  }  return parceler.readCall();}  }
class C{  public static void startWebServer(Connection conn) throws SQLException {  WebServer webServer=new WebServer();  Server web=new Server(webServer,new String[]{"-webPort","0"});  web.start();  Server server=new Server();  server.web=web;  webServer.setShutdownHandler(server);  String url=webServer.addSession(conn);  try {    Server.openBrowser(url);    while (!webServer.isStopped()) {      Thread.sleep(1000);    }  } catch (  Exception e) {  }}  }
class C{  public Boolean isHttpFirmwareUpgrade(){  return httpFirmwareUpgrade;}  }
class C{  @Override public int lengthOfYear(){  return (isLeapYear() ? 366 : 365);}  }
class C{  private boolean finalizeBlocks(List<BlockParser> blockParsers){  for (int i=blockParsers.size() - 1; i >= 0; i--) {    BlockParser blockParser=blockParsers.get(i);    finalize(blockParser);  }  return true;}  }
class C{  protected IXmlSerializer registerSerializer(Class<?> clazz,IXmlSerializer serializer){  IXmlSerializer old=m_nodeSerializers.get(clazz);  m_nodeSerializers.put(clazz,serializer);  return old;}  }
class C{  public boolean matchesThisPacket(DatapathId switchDpid,OFPort inPort,Ethernet packet,AllowDropPair adp){  IPacket pkt=packet.getPayload();  IPv4 pkt_ip=null;  TCP pkt_tcp=null;  UDP pkt_udp=null;  TransportPort pkt_tp_src=TransportPort.NONE;  TransportPort pkt_tp_dst=TransportPort.NONE;  if (any_dpid == false && !dpid.equals(switchDpid))   return false;  if (any_in_port == false && !in_port.equals(inPort))   return false;  if (action == FirewallRule.FirewallAction.DROP) {    if (!OFPort.ANY.equals(this.in_port)) {      adp.drop.setExact(MatchField.IN_PORT,this.in_port);    }  } else {    if (!OFPort.ANY.equals(this.in_port)) {      adp.allow.setExact(MatchField.IN_PORT,this.in_port);    }  }  if (any_dl_src == false && !dl_src.equals(packet.getSourceMACAddress()))   return false;  if (action == FirewallRule.FirewallAction.DROP) {    if (!MacAddress.NONE.equals(this.dl_src)) {      adp.drop.setExact(MatchField.ETH_SRC,this.dl_src);    }  } else {    if (!MacAddress.NONE.equals(this.dl_src)) {      adp.allow.setExact(MatchField.ETH_SRC,this.dl_src);    }  }  if (any_dl_dst == false && !dl_dst.equals(packet.getDestinationMACAddress()))   return false;  if (action == FirewallRule.FirewallAction.DROP) {    if (!MacAddress.NONE.equals(this.dl_dst)) {      adp.drop.setExact(MatchField.ETH_DST,this.dl_dst);    }  } else {    if (!MacAddress.NONE.equals(this.dl_dst)) {      adp.allow.setExact(MatchField.ETH_DST,this.dl_dst);    }  }  if (any_dl_type == false) {    if (dl_type.equals(EthType.ARP)) {      if (packet.getEtherType() != EthType.ARP)       return false; else {        if (action == FirewallRule.FirewallAction.DROP) {          if (!EthType.NONE.equals(this.dl_type)) {            adp.drop.setExact(MatchField.ETH_TYPE,this.dl_type);          }        } else {          if (!EthType.NONE.equals(this.dl_type)) {            adp.allow.setExact(MatchField.ETH_TYPE,this.dl_type);          }        }      }    } else     if (dl_type.equals(EthType.IPv4)) {      if (packet.getEtherType() != EthType.IPv4)       return false; else {        if (action == FirewallRule.FirewallAction.DROP) {          if (!IpProtocol.NONE.equals(this.nw_proto)) {            adp.drop.setExact(MatchField.IP_PROTO,this.nw_proto);          }        } else {          if (!IpProtocol.NONE.equals(this.nw_proto)) {            adp.allow.setExact(MatchField.IP_PROTO,this.nw_proto);          }        }        pkt_ip=(IPv4)pkt;        if (any_nw_src == false && !nw_src_prefix_and_mask.matches(pkt_ip.getSourceAddress()))         return false;        if (action == FirewallRule.FirewallAction.DROP) {          if (!IPv4AddressWithMask.NONE.equals(this.nw_src_prefix_and_mask)) {            adp.drop.setMasked(MatchField.IPV4_SRC,nw_src_prefix_and_mask);          }        } else {          if (!IPv4AddressWithMask.NONE.equals(this.nw_src_prefix_and_mask)) {            adp.allow.setMasked(MatchField.IPV4_SRC,nw_src_prefix_and_mask);          }        }        if (any_nw_dst == false && !nw_dst_prefix_and_mask.matches(pkt_ip.getDestinationAddress()))         return false;        if (action == FirewallRule.FirewallAction.DROP) {          if (!IPv4AddressWithMask.NONE.equals(this.nw_dst_prefix_and_mask)) {            adp.drop.setMasked(MatchField.IPV4_DST,nw_dst_prefix_and_mask);          }        } else {          if (!IPv4AddressWithMask.NONE.equals(this.nw_dst_prefix_and_mask)) {            adp.allow.setMasked(MatchField.IPV4_DST,nw_dst_prefix_and_mask);          }        }        if (any_nw_proto == false) {          if (nw_proto.equals(IpProtocol.TCP)) {            if (!pkt_ip.getProtocol().equals(IpProtocol.TCP)) {              return false;            } else {              pkt_tcp=(TCP)pkt_ip.getPayload();              pkt_tp_src=pkt_tcp.getSourcePort();              pkt_tp_dst=pkt_tcp.getDestinationPort();            }          } else           if (nw_proto.equals(IpProtocol.UDP)) {            if (!pkt_ip.getProtocol().equals(IpProtocol.UDP)) {              return false;            } else {              pkt_udp=(UDP)pkt_ip.getPayload();              pkt_tp_src=pkt_udp.getSourcePort();              pkt_tp_dst=pkt_udp.getDestinationPort();            }          } else           if (nw_proto.equals(IpProtocol.ICMP)) {            if (!pkt_ip.getProtocol().equals(IpProtocol.ICMP)) {              return false;            } else {            }          }          if (action == FirewallRule.FirewallAction.DROP) {            if (!IpProtocol.NONE.equals(this.nw_proto)) {              adp.drop.setExact(MatchField.IP_PROTO,this.nw_proto);            }          } else {            if (!IpProtocol.NONE.equals(this.nw_proto)) {              adp.allow.setExact(MatchField.IP_PROTO,this.nw_proto);            }          }          if (pkt_tcp != null || pkt_udp != null) {            if (tp_src.getPort() != 0 && tp_src.getPort() != pkt_tp_src.getPort()) {              return false;            }            if (action == FirewallRule.FirewallAction.DROP) {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.drop.setExact(MatchField.TCP_SRC,this.tp_src);                }              } else {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.drop.setExact(MatchField.UDP_SRC,this.tp_src);                }              }            } else {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.allow.setExact(MatchField.TCP_SRC,this.tp_src);                }              } else {                if (!TransportPort.NONE.equals(this.tp_src)) {                  adp.allow.setExact(MatchField.UDP_SRC,this.tp_src);                }              }            }            if (tp_dst.getPort() != 0 && tp_dst.getPort() != pkt_tp_dst.getPort()) {              return false;            }            if (action == FirewallRule.FirewallAction.DROP) {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.drop.setExact(MatchField.TCP_DST,this.tp_dst);                }              } else {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.drop.setExact(MatchField.UDP_DST,this.tp_dst);                }              }            } else {              if (pkt_tcp != null) {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.allow.setExact(MatchField.TCP_DST,this.tp_dst);                }              } else {                if (!TransportPort.NONE.equals(this.tp_dst)) {                  adp.allow.setExact(MatchField.UDP_DST,this.tp_dst);                }              }            }          }        }      }    } else {      return false;    }  }  if (action == FirewallRule.FirewallAction.DROP) {    if (!EthType.NONE.equals(this.dl_type)) {      adp.drop.setExact(MatchField.ETH_TYPE,this.dl_type);    }  } else {    if (!EthType.NONE.equals(this.dl_type)) {      adp.allow.setExact(MatchField.ETH_TYPE,this.dl_type);    }  }  return true;}  }
class C{  public DVector(int c){  vector=new double[Math.max(defaultCapacity,c)];}  }
class C{  public boolean isSortingProperties(){  return sortingProperties;}  }
class C{  public static void showErrorBox(Exception e){  if (e instanceof IOException) {    JOptionPane.showMessageDialog(null,"There was an error contacting Google: " + e.getMessage(),"Error contacting Google",JOptionPane.ERROR_MESSAGE);  } else   if (e instanceof AuthenticationException) {    JOptionPane.showMessageDialog(null,"Your username and/or password were rejected: " + e.getMessage(),"Authentication Error",JOptionPane.ERROR_MESSAGE);  } else   if (e instanceof ServiceException) {    JOptionPane.showMessageDialog(null,"Google returned the error: " + e.getMessage(),"Google had an error processing the request",JOptionPane.ERROR_MESSAGE);  } else {    JOptionPane.showMessageDialog(null,"There was an unexpected error: " + e.getMessage(),"Unexpected error",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  protected PCMFeed(int sampleRate,int channels,int bufferSizeInBytes,PlayerCallback playerCallback){  this.sampleRate=sampleRate;  this.channels=channels;  this.bufferSizeInBytes=bufferSizeInBytes;  this.bufferSizeInMs=bytesToMs(bufferSizeInBytes,sampleRate,channels);  this.playerCallback=playerCallback;}  }
class C{  public void allocateType(ItemStack drive,ItemStack item,int count){  NBTTagCompound prototype=createPrototype(item);  int idx=findDataIndexForPrototype(drive,prototype);  if (idx == -1) {    NBTTagCompound data=new NBTTagCompound();    data.setTag("Prototype",prototype);    data.setInteger("Count",count);    ItemStacks.getCompoundList(drive,"Data").appendTag(data);    markDirty(drive);  }}  }
class C{  public Iterator<Item> iterator(){  return new ListIterator();}  }
class C{  public String unprunedTipText(){  return "Whether unpruned tree/rules are to be generated.";}  }
class C{  public static HistoryEvent createAdded(Recordable recordable,String referrer){  return createAdded(System.currentTimeMillis(),recordable,referrer);}  }
class C{  public entryInfo fileInfo(final String path){  if (this.infoCache.containsKey(path)) {    return this.infoCache.get(path);  }  try {    send("STAT " + path);    final String reply=receive();    if (isNotPositiveCompletion(reply)) {      throw new IOException(reply);    }    final String[] lines=reply.split("\\r\\n");    if (lines.length < 3) {      throw new IOException(reply);    }    final int startCode=getStatusCode(lines[0]);    final int endCode=getStatusCode(lines[lines.length - 1]);    if (startCode != endCode) {      throw new IOException(reply);    }    entryInfo info=null;    final int endFor=lines.length - 1;    for (int i=1; i < endFor; i++) {      info=parseListData(lines[i]);      if (info != null) {        this.infoCache.put(path,info);        break;      }    }    return info;  } catch (  final IOException e) {    return null;  }}  }
class C{  private void bfs(int s){}  }
class C{  private boolean isUsed(final String name){  if (name == null)   throw new IllegalArgumentException();  return used.containsKey(name);}  }
class C{  public static boolean createFolder(String folderPath){  if (!TextUtils.isEmpty(folderPath)) {    File folder=new File(folderPath);    return createFolder(folder);  }  return false;}  }
class C{  synchronized public boolean contains(T item){  if (item == null)   return false;  for (  Map.Entry<String,List<T>> entry : this.items.entrySet()) {    List<T> itemList=entry.getValue();    if (itemList == null)     continue;    if (itemList.contains(item))     return true;  }  return false;}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public static Collection<ClusterNode> remoteNodes(final GridCacheSharedContext ctx,AffinityTopologyVersion topVer){  return ctx.discovery().remoteCacheNodes(topVer);}  }
class C{  private double[][] makeJointVectorForNextPastSource(double[] destination,double[] source){  double[][] destNextPastSourceVectors=new double[destination.length - k][k + 2];  for (int t=k; t < destination.length; t++) {    for (int i=0; i < k + 1; i++) {      destNextPastSourceVectors[t - k][i]=destination[t - i];    }    destNextPastSourceVectors[t - k][k + 1]=source[t - 1];  }  return destNextPastSourceVectors;}  }
class C{  public boolean addCertificate(@NotNull X509Certificate certificate){  myWriteLock.lock();  try {    if (isBroken()) {      return false;    }    myKeyStore.setCertificateEntry(createAlias(certificate),certificate);    flushKeyStore();    myTrustManager=initFactoryAndGetManager();    myDispatcher.getMulticaster().certificateAdded(certificate);    return true;  } catch (  Exception e) {    LOG.error("Can't add certificate",e);    return false;  } finally {    myWriteLock.unlock();  }}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){  return m_editable;}  }
class C{  public static void fill(boolean[] array,boolean value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  private void applyThrowsAnnotations(final List<Attribute.TypeCompound> annos){  final List<AnnotatedTypeMirror> thrown=methodType.getThrownTypes();  if (thrown.isEmpty()) {    return;  }  Map<AnnotatedTypeMirror,List<TypeCompound>> typeToAnnos=new LinkedHashMap<>();  for (  final AnnotatedTypeMirror thrownType : thrown) {    typeToAnnos.put(thrownType,new ArrayList<TypeCompound>());  }  for (  TypeCompound anno : annos) {    final TypeAnnotationPosition annoPos=anno.position;    if (annoPos.type_index >= 0 && annoPos.type_index < thrown.size()) {      final AnnotatedTypeMirror thrownType=thrown.get(annoPos.type_index);      typeToAnnos.get(thrownType).add(anno);    } else {      ErrorReporter.errorAbort("MethodApplier.applyThrowsAnnotation: " + "invalid throws index " + annoPos.type_index + " for annotation: "+ anno+ " for element: "+ ElementUtils.getVerboseName(element));    }  }  for (  final Entry<AnnotatedTypeMirror,List<TypeCompound>> typeToAnno : typeToAnnos.entrySet()) {    annotateViaTypeAnnoPosition(typeToAnno.getKey(),typeToAnno.getValue());  }}  }
