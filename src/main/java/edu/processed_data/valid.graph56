class C{  private void writeCurrentConnectionContents(ServerDescriptor desc,int maxLabelWidth){  writeLabelValue(INFO_CONNECTIONS_LABEL.get(),getNbConnection(desc),maxLabelWidth);}  }
class C{  void append(final String s){  templateValue.append(s);}  }
class C{  public byte[] Process(String fontName){  try {    int j;    for (j=0; j < fonts.length; j++)     if (fontName.equals(fonts[j].name))     break;    if (j == fonts.length)     return null;    if (gsubrIndexOffset >= 0)     GBias=CalcBias(gsubrIndexOffset,j);    BuildNewCharString(j);    BuildNewLGSubrs(j);    return BuildNewFile(j);  } catch (  java.io.IOException e) {    throw new IOException(IOException.IoException,e);  } finally {    try {      buf.close();    } catch (    Exception e) {    }  }}  }
class C{  private void parseSessionString(){  if (isParsed) {    return;  }  if (isNull()) {    throw new IllegalArgumentException("sid value is null or empty");  }  String serverID=null;  try {    String sidString=encryptedString;    if (isC66Encoded()) {      sidString=c66DecodeCookieString(encryptedString);    }    int outerIndex=sidString.lastIndexOf("@");    if (outerIndex == -1) {      isParsed=true;      return;    }    String outer=sidString.substring(outerIndex + 1);    int tailIndex=outer.indexOf("#");    tail=outer.substring(tailIndex + 1);    if (tailIndex != -1) {      String extensionPart=outer.substring(0,tailIndex);      extensions=new DynamicSessionIDExtensions(new LegacySessionIDExtensions(extensionPart));    } else {      extensions=new LegacySessionIDExtensions();    }    serverID=extensions.getSiteID();    if (serverID != null) {      setServerID(serverID);    }  } catch (  Exception e) {    debug.error("Invalid sessionid format:[" + encryptedString + "]",e);    throw new IllegalArgumentException("Invalid sessionid format:[" + encryptedString + "]"+ e);  }  isParsed=true;}  }
class C{  public static <K,V>Map<K,V> map(K key1,V value1,K key2,V value2){  return getInstance().mapInstance(key1,value1,key2,value2);}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public ProviderNotFoundException(String msg){  super(msg);}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  private ListResourceBundle loadResourceBundle(String resourceBundle) throws MissingResourceException {  m_resourceBundleName=resourceBundle;  Locale locale=getLocale();  ListResourceBundle lrb;  try {    ResourceBundle rb=ResourceBundle.getBundle(m_resourceBundleName,locale);    lrb=(ListResourceBundle)rb;  } catch (  MissingResourceException e) {    try {      lrb=(ListResourceBundle)ResourceBundle.getBundle(m_resourceBundleName,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles." + m_resourceBundleName,m_resourceBundleName,"");    }  }  m_resourceBundle=lrb;  return lrb;}  }
class C{  public static boolean isParityAdjusted(byte[] key,int offset) throws InvalidKeyException {  if (key.length - offset < DES_EDE_KEY_LEN) {    throw new InvalidKeyException();  }  for (int i=offset; i < DES_EDE_KEY_LEN + offset; i++) {    int b=key[i];    if ((((b & 1) + ((b & 2) >> 1) + ((b & 4) >> 2)+ ((b & 8) >> 3)+ ((b & 16) >> 4)+ ((b & 32) >> 5)+ ((b & 64) >> 6)) & 1) == ((b & 128) >> 7)) {      return false;    }  }  return true;}  }
class C{  @Override public MinguoDate dateYearDay(Era era,int yearOfEra,int dayOfYear){  return dateYearDay(prolepticYear(era,yearOfEra),dayOfYear);}  }
class C{  public static String encodeFromFile(String filename){  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0)     length+=numBytes;    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    System.err.println("Error encoding from file " + filename);  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public static Clause or(Iterable<Clause> clauses){  return new OrClause(clauses);}  }
class C{  public SMProfileViewBean(){  super("SMProfile");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createTableModel();  ptModel=new CCPageTitleModel(getClass().getClassLoader().getResourceAsStream("com/sun/identity/console/simplePageTitle.xml"));  registerChildren();}  }
class C{  static void writeOffset(ZoneOffset offset,DataOutput out) throws IOException {  final int offsetSecs=offset.getTotalSeconds();  int offsetByte=offsetSecs % 900 == 0 ? offsetSecs / 900 : 127;  out.writeByte(offsetByte);  if (offsetByte == 127) {    out.writeInt(offsetSecs);  }}  }
class C{  private boolean askWhatToDelete(UninstallUserData userData,Set<String> outsideDbs,Set<String> outsideLogs) throws UserDataException {  boolean cancelled=false;  final int REMOVE_ALL=1;  final int SPECIFY_TO_REMOVE=2;  int[] indexes={REMOVE_ALL,SPECIFY_TO_REMOVE};  LocalizableMessage[] msgs=new LocalizableMessage[]{INFO_CLI_UNINSTALL_REMOVE_ALL.get(),INFO_CLI_UNINSTALL_SPECIFY_WHAT_REMOVE.get()};  MenuBuilder<Integer> builder=new MenuBuilder<>(this);  builder.setPrompt(INFO_CLI_UNINSTALL_WHAT_TO_DELETE.get());  for (int i=0; i < indexes.length; i++) {    builder.addNumberedOption(msgs[i],MenuResult.success(indexes[i]));  }  builder.addQuitOption();  builder.setDefault(LocalizableMessage.raw(String.valueOf(REMOVE_ALL)),MenuResult.success(REMOVE_ALL));  builder.setMaxTries(CONFIRMATION_MAX_TRIES);  Menu<Integer> menu=builder.toMenu();  int choice;  try {    MenuResult<Integer> m=menu.run();    if (m.isSuccess()) {      choice=m.getValue();    } else     if (m.isQuit()) {      choice=REMOVE_ALL;      cancelled=true;    } else {      throw new RuntimeException();    }  } catch (  ClientException ce) {    logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));    throw new UserDataException(null,ce.getMessageObject(),ce);  }  if (cancelled) {  } else   if (choice == REMOVE_ALL) {    userData.setRemoveBackups(true);    userData.setRemoveConfigurationAndSchema(true);    userData.setRemoveDatabases(true);    userData.setRemoveLDIFs(true);    userData.setRemoveLibrariesAndTools(true);    userData.setRemoveLogs(true);    userData.setExternalDbsToRemove(outsideDbs);    userData.setExternalLogsToRemove(outsideLogs);  } else {    boolean somethingSelected=false;    while (!somethingSelected && !cancelled) {      println();      msgs=new LocalizableMessage[]{INFO_CLI_UNINSTALL_CONFIRM_LIBRARIES_BINARIES.get(),INFO_CLI_UNINSTALL_CONFIRM_DATABASES.get(),INFO_CLI_UNINSTALL_CONFIRM_LOGS.get(),INFO_CLI_UNINSTALL_CONFIRM_CONFIGURATION_SCHEMA.get(),INFO_CLI_UNINSTALL_CONFIRM_BACKUPS.get(),INFO_CLI_UNINSTALL_CONFIRM_LDIFS.get(),INFO_CLI_UNINSTALL_CONFIRM_OUTSIDEDBS.get(joinAsString(Constants.LINE_SEPARATOR,outsideDbs)),INFO_CLI_UNINSTALL_CONFIRM_OUTSIDELOGS.get(joinAsString(Constants.LINE_SEPARATOR,outsideLogs))};      boolean[] answers=new boolean[msgs.length];      try {        for (int i=0; i < msgs.length; i++) {          boolean ignore=(i == 6 && outsideDbs.isEmpty()) || (i == 7 && outsideLogs.isEmpty());          if (!ignore) {            answers[i]=askConfirmation(msgs[i],true,logger);          } else {            answers[i]=false;          }        }      } catch (      ClientException ce) {        throw new UserDataException(null,ce.getMessageObject(),ce);      }      if (!cancelled) {        for (int i=0; i < answers.length; i++) {switch (i) {case 0:            userData.setRemoveLibrariesAndTools(answers[i]);          break;case 1:        userData.setRemoveDatabases(answers[i]);      break;case 2:    userData.setRemoveLogs(answers[i]);  break;case 3:userData.setRemoveConfigurationAndSchema(answers[i]);break;case 4:userData.setRemoveBackups(answers[i]);break;case 5:userData.setRemoveLDIFs(answers[i]);break;case 6:if (answers[i]) {userData.setExternalDbsToRemove(outsideDbs);}break;case 7:if (answers[i]) {userData.setExternalLogsToRemove(outsideLogs);}break;}}if (userData.getExternalDbsToRemove().isEmpty() && userData.getExternalLogsToRemove().isEmpty() && !userData.getRemoveLibrariesAndTools()&& !userData.getRemoveDatabases()&& !userData.getRemoveConfigurationAndSchema()&& !userData.getRemoveBackups()&& !userData.getRemoveLDIFs()&& !userData.getRemoveLogs()) {somethingSelected=false;println();printErrorMessage(ERR_CLI_UNINSTALL_NOTHING_TO_BE_UNINSTALLED.get());} else {somethingSelected=true;}}}}return cancelled;}  }
class C{  public PdfCollectionField(String name,int subType){  super(new PdfDictionary());  getPdfObject().put(PdfName.N,new PdfString(name));  this.subType=subType;switch (subType) {default :    getPdfObject().put(PdfName.Subtype,PdfName.S);  break;case DATE:getPdfObject().put(PdfName.Subtype,PdfName.D);break;case NUMBER:getPdfObject().put(PdfName.Subtype,PdfName.N);break;case FILENAME:getPdfObject().put(PdfName.Subtype,PdfName.F);break;case DESC:getPdfObject().put(PdfName.Subtype,PdfName.Desc);break;case MODDATE:getPdfObject().put(PdfName.Subtype,PdfName.ModDate);break;case CREATIONDATE:getPdfObject().put(PdfName.Subtype,PdfName.CreationDate);break;case SIZE:getPdfObject().put(PdfName.Subtype,PdfName.Size);break;}}  }
class C{  @Override public void update(){  if (hitStatus)   return;switch (tileLoop) {case 10:    super.getSpriteFrame().setImage(super.getPlayerStates().get(0));  break;case 30:super.getSpriteFrame().setImage(super.getPlayerStates().get(1));break;case 40:super.getSpriteFrame().setImage(super.getPlayerStates().get(2));tileLoop=0;break;}tileLoop++;if (wasHit) {this.getSpriteFrame().setImage(playerStates.get(4));frame++;switch (frame) {case 1:this.spriteFrame.setTranslateY(this.spriteFrame.getTranslateY() - BOUNCE_HEIGHT);Main.coinHit.play();break;case 5:this.spriteFrame.setTranslateY(this.spriteFrame.getTranslateY() + BOUNCE_HEIGHT);break;case 10:Main.updateScore(100);Main.updateCoins();coinView.setImage(hitCoins[0]);break;case 25:coinView.setImage(hitCoins[1]);break;case 35:coinView.setImage(hitCoins[2]);coinGravity=true;break;case 60:coinView.setImage(hitCoins[3]);break;}if (counter++ < 70) {if (coinGravity) {cYPos+=yVel;} else {cYPos-=yVel;}} else {coinView.setImage(null);hitStatus=true;parent.getChildren().remove(coinView);}coinView.setTranslateY(cYPos);if (hitStatus) {coinView=null;hitCoins=null;parent=null;coinGravity=false;xPos=yPos=xVel=yVel=cYPos=counter=frame=tileLoop=0;}}}  }
class C{  public void rebuildContext(JenkinsRule j) throws Exception {  WorkflowJob p2=(WorkflowJob)j.jenkins.getItem("demo");  assertNotNull("could not find a job named demo",p2);  assert p != p2;  p=p2;  WorkflowRun b2=p.getLastBuild();  assert b != b2;  b=b2;  e=(CpsFlowExecution)b.getExecution();}  }
class C{  private OpenSSLDigest(String algorithm,long evp_md,int size,int blockSize){  this.algorithm=algorithm;  this.evp_md=evp_md;  this.size=size;  this.blockSize=blockSize;}  }
class C{  public Builder signer(PrivateKeyEntry signer){  this.signer=signer;  return this;}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  @Override public void unbind() throws Exception {  if (running) {    stop();  }  if (serverSockPool != 0) {    Pool.destroy(serverSockPool);    serverSockPool=0;  }  if (serverSock != 0) {    Socket.close(serverSock);    serverSock=0;  }  if (sslContext != 0) {    Long ctx=Long.valueOf(sslContext);    SSLContext.unregisterDefault(ctx);    for (    SSLHostConfig sslHostConfig : sslHostConfigs.values()) {      sslHostConfig.setOpenSslContext(null);    }    sslContext=0;  }  if (rootPool != 0) {    Pool.destroy(rootPool);    rootPool=0;  }  getHandler().recycle();}  }
class C{  public boolean remove(NetClass p_net_class){  return class_list.remove(p_net_class);}  }
class C{  public static double distanceToRadians(double distance) throws TurfException {  return distanceToRadians(distance,TurfConstants.UNIT_DEFAULT);}  }
class C{  public synchronized void removeObject(NSObject obj){  set.remove(obj);}  }
class C{  public boolean isRequired(final AttributeType attributeType){  return requiredAttributes.contains(attributeType);}  }
class C{  public Base64(){  this(0);}  }
class C{  private void handleResponse(AvsResponse response){  mEventManager.post(new CommandEvent(CommandEvent.TYPE_COMMAND_SEARCHING,KEYWORD_ALEXA));  if (response != null) {    for (int i=response.size() - 1; i >= 0; i--) {      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {        mAvsQueue.clear();        response.remove(i);      }    }    Timber.i("Adding %s items to our queue",response.size());    mAvsQueue.addAll(response);  }  checkQueue();}  }
class C{  boolean casNext(Node<K,V> cmp,Node<K,V> val){  return UNSAFE.compareAndSwapObject(this,nextOffset,cmp,val);}  }
class C{  public static boolean equals(String filename1,String filename2,boolean normalized,IOCase caseSensitivity){  if (filename1 == null || filename2 == null) {    return filename1 == null && filename2 == null;  }  if (normalized) {    filename1=normalize(filename1);    filename2=normalize(filename2);    if (filename1 == null || filename2 == null) {      throw new NullPointerException("Error normalizing one or both of the file names");    }  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  return caseSensitivity.checkEquals(filename1,filename2);}  }
class C{  public void selectMetaObject(int index,PdfCanvas cb){  MetaObject obj=MetaObjects.get(index);  if (obj == null)   return;  int style;switch (obj.getType()) {case MetaObject.META_BRUSH:    currentBrush=(MetaBrush)obj;  style=currentBrush.getStyle();if (style == MetaBrush.BS_SOLID) {  Color color=currentBrush.getColor();  cb.setFillColor(color);} else if (style == MetaBrush.BS_HATCHED) {  Color color=currentBackgroundColor;  cb.setFillColor(color);}break;case MetaObject.META_PEN:{currentPen=(MetaPen)obj;style=currentPen.getStyle();if (style != MetaPen.PS_NULL) {Color color=currentPen.getColor();cb.setStrokeColor(color);cb.setLineWidth(Math.abs(currentPen.getPenWidth() * scalingX / extentWx));switch (style) {case MetaPen.PS_DASH:  cb.setLineDash(18,6,0);break;case MetaPen.PS_DASHDOT:cb.writeLiteral("[9 6 3 6]0 d\n");break;case MetaPen.PS_DASHDOTDOT:cb.writeLiteral("[9 3 3 3 3 3]0 d\n");break;case MetaPen.PS_DOT:cb.setLineDash(3,0);break;default :cb.setLineDash(0);break;}}break;}case MetaObject.META_FONT:{currentFont=(MetaFont)obj;break;}}}  }
class C{  public void sync() throws SyncFailedException {  writer.sync();}  }
class C{  public MissingMandatoryPropertiesException(LocalizableMessage ufn,Collection<PropertyException> causes,boolean isCreate){  super(createMessage(causes));  this.causes=new ArrayList<>(causes);  this.ufn=ufn;  this.isCreate=isCreate;}  }
class C{  public static void assertSupportedCipherSuites(Set<String> expected,String[] cipherSuites){  Set<String> remainingCipherSuites=assertValidCipherSuites(expected,cipherSuites);  assertEquals("Missing cipher suites",Collections.EMPTY_SET,remainingCipherSuites);  assertEquals(expected.size(),cipherSuites.length);}  }
class C{  private float sizeOfBlackWhiteBlackRun(int fromX,int fromY,int toX,int toY){  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int xstep=fromX < toX ? 1 : -1;  int ystep=fromY < toY ? 1 : -1;  int state=0;  int xLimit=toX + xstep;  for (int x=fromX, y=fromY; x != xLimit; x+=xstep) {    int realX=steep ? y : x;    int realY=steep ? x : y;    if ((state == 1) == image.get(realX,realY)) {      if (state == 2) {        return MathUtils.distance(x,y,fromX,fromY);      }      state++;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  if (state == 2) {    return MathUtils.distance(toX + xstep,toY,fromX,fromY);  }  return Float.NaN;}  }
class C{  public MalformedURIException(String p_msg){  super(p_msg);}  }
class C{  void signedAdd(MutableBigInteger addend){  if (sign == 1)   add(addend); else   sign=sign * subtract(addend);}  }
class C{  public static ByteString convertValue(Object obj) throws IOException {  if (obj == null) {    return null;  } else   if (obj instanceof String) {    return ByteString.valueOfUtf8((String)obj);  } else   if (obj instanceof byte[]) {    return ByteString.wrap((byte[])obj);  } else   if (obj instanceof URI) {    try (InputStream is=((URI)obj).toURL().openStream()){      ByteStringBuilder bsb=new ByteStringBuilder();      while (bsb.appendBytes(is,2048) != -1) {      }      return bsb.toByteString();    }   } else   if (obj instanceof Element) {    Element element=(Element)obj;    return ByteString.valueOfUtf8(element.getTextContent());  }  return null;}  }
class C{  public void put(E e){  xfer(e,true,ASYNC,0);}  }
class C{  public FSSPAuthenticationContextInfo(){}  }
class C{  private static Handler<AsyncResult<Void>> completer(Future<SQLConnection> future,SQLConnection connection){  return null;}  }
class C{  public boolean retainAll(Collection<?> c){  return al.retainAll(c);}  }
class C{  public static byte[] encodeBase64Chunked(final byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  protected boolean isIgnoredProfile(String realm){  return true;}  }
class C{  @Override protected void paintComponent(Graphics g){  Painter painter=(Painter)UIManager.get("TableHeader:\"TableHeader.renderer\"[Enabled].backgroundPainter");  if (painter != null) {    if (g instanceof Graphics2D) {      painter.paint((Graphics2D)g,this,getWidth() + 1,getHeight());    } else {      BufferedImage img=new BufferedImage(getWidth(),getHeight(),BufferedImage.TYPE_INT_ARGB);      Graphics2D g2=(Graphics2D)img.getGraphics();      painter.paint(g2,this,getWidth() + 1,getHeight());      g2.dispose();      g.drawImage(img,0,0,null);      img=null;    }  }}  }
class C{  public final void testToString(){  CRL crl=new MyCRL("TEST_TYPE");  crl.toString();}  }
class C{  public static void main(String[] args){  int retCode=mainCLI(args,System.out,System.err);  if (retCode != 0) {    System.exit(retCode);  }}  }
class C{  public RESTEndpointBuilder postData(String s){  this.postData=s;  return this;}  }
class C{  private void savepostLogout(String postLocation,String postRespLocation,List logList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException {  if (postLocation != null && postLocation.length() > 0) {    SingleLogoutServiceElement slsElemPost=objFact.createSingleLogoutServiceElement();    slsElemPost.setBinding(httpPostBinding);    slsElemPost.setLocation(postLocation);    slsElemPost.setResponseLocation(postRespLocation);    logList.add(slsElemPost);  }}  }
class C{  public void initializePasswordGenerators() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addPasswordGeneratorAddListener(this);  rootConfiguration.addPasswordGeneratorDeleteListener(this);  for (  String generatorName : rootConfiguration.listPasswordGenerators()) {    PasswordGeneratorCfg generatorConfiguration=rootConfiguration.getPasswordGenerator(generatorName);    generatorConfiguration.addChangeListener(this);    if (generatorConfiguration.isEnabled()) {      String className=generatorConfiguration.getJavaClass();      try {        PasswordGenerator<? extends PasswordGeneratorCfg> generator=loadGenerator(className,generatorConfiguration,true);        passwordGenerators.put(generatorConfiguration.dn(),generator);        DirectoryServer.registerPasswordGenerator(generatorConfiguration.dn(),generator);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());        continue;      }    }  }}  }
class C{  public void insert_reference(org.omg.CORBA.Object value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_reference",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_reference(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static String layoutCompoundLabel(JComponent c,FontMetrics fm,String text,Icon icon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int textIconGap){  boolean orientationIsLeftToRight=true;  int hAlign=horizontalAlignment;  int hTextPos=horizontalTextPosition;  if (c != null) {    if (!(c.getComponentOrientation().isLeftToRight())) {      orientationIsLeftToRight=false;    }  }switch (horizontalAlignment) {case LEADING:    hAlign=(orientationIsLeftToRight) ? LEFT : RIGHT;  break;case TRAILING:hAlign=(orientationIsLeftToRight) ? RIGHT : LEFT;break;}switch (horizontalTextPosition) {case LEADING:hTextPos=(orientationIsLeftToRight) ? LEFT : RIGHT;break;case TRAILING:hTextPos=(orientationIsLeftToRight) ? RIGHT : LEFT;break;}return layoutCompoundLabelImpl(c,fm,text,icon,verticalAlignment,hAlign,verticalTextPosition,hTextPos,viewR,iconR,textR,textIconGap);}  }
class C{  public java.lang.String signXML(java.lang.String xmlString,java.lang.String certAlias,java.lang.String algorithm,java.lang.String idAttrName,java.lang.String id,boolean includeCert) throws XMLSignatureException {  return sp.signXML(xmlString,certAlias,algorithm,idAttrName,id,includeCert);}  }
class C{  public static void closeAndDeleteLogFile(){  if (logFile != null) {    fileHandler.close();    logFile.delete();  }}  }
class C{  public StandardWrapper(){  super();  swValve=new StandardWrapperValve();  pipeline.setBasic(swValve);  broadcaster=new NotificationBroadcasterSupport();}  }
class C{  public void incrementSpamCheck(){  spamStrike++;}  }
class C{  public RESTEndpointBuilder header(String header,String value){  headers.put(header,value);  return this;}  }
class C{  public Dictionary<String,Object> encrypt(String pidOrFactory,String instanceAlias,Dictionary<String,Object> config) throws InvalidException, InternalErrorException, WaitForMetaData {  JsonValue parsed=parse(config,pidOrFactory);  return encrypt(pidOrFactory,instanceAlias,config,parsed);}  }
class C{  public ByteStringBuilder appendLong(long l){  ensureAdditionalCapacity(8);  for (int i=length + 7; i >= length; i--) {    buffer[i]=(byte)l;    l>>>=8;  }  length+=8;  return this;}  }
class C{  public String toDisplayString(Locale locale){  return toDisplayString(defaultResourceBundleName,locale);}  }
class C{  private synchronized void shapeContextually(char[] text,int start,int count,int ctxKey){  if ((mask & (1 << ctxKey)) == 0) {    ctxKey=EUROPEAN_KEY;  }  int lastkey=ctxKey;  int base=bases[ctxKey];  char minDigit=ctxKey == ETHIOPIC_KEY ? '1' : '0';synchronized (NumericShaper.class) {    for (int i=start, e=start + count; i < e; ++i) {      char c=text[i];      if (c >= minDigit && c <= '\u0039') {        text[i]=(char)(c + base);      }      if (isStrongDirectional(c)) {        int newkey=getContextKey(c);        if (newkey != lastkey) {          lastkey=newkey;          ctxKey=newkey;          if (((mask & EASTERN_ARABIC) != 0) && (ctxKey == ARABIC_KEY || ctxKey == EASTERN_ARABIC_KEY)) {            ctxKey=EASTERN_ARABIC_KEY;          } else           if (((mask & ARABIC) != 0) && (ctxKey == ARABIC_KEY || ctxKey == EASTERN_ARABIC_KEY)) {            ctxKey=ARABIC_KEY;          } else           if ((mask & (1 << ctxKey)) == 0) {            ctxKey=EUROPEAN_KEY;          }          base=bases[ctxKey];          minDigit=ctxKey == ETHIOPIC_KEY ? '1' : '0';        }      }    }  }}  }
class C{  private LocalizableMessage expectedOutput(LocalizableMessage val){  return val;}  }
class C{  @Override public boolean equals(Object obj){  if ((obj == null) || !getClass().equals(obj.getClass())) {    return false;  }  EntitlementConditionAdaptor other=(EntitlementConditionAdaptor)obj;  return CollectionUtils.genericCompare(this.displayType,other.displayType);}  }
class C{  private void searchForCustomFilter(DN dn,ConnectionWithControls conn) throws IOException {  SearchRequest request=newSearchRequest(dn,WHOLE_SUBTREE,controller.getFilter()).setSizeLimit(1);  try (ConnectionEntryReader entryReader=conn.search(request)){    if (!entryReader.hasNext()) {      throw LdapException.newLdapException(ResultCode.NO_SUCH_OBJECT,"Entry " + dn + " does not verify filter "+ controller.getFilter());    }    while (entryReader.hasNext()) {      entryReader.readEntry();    }  } catch (  LdapException e) {    if (!e.getResult().getResultCode().equals(ResultCode.SIZE_LIMIT_EXCEEDED)) {      throw e;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrcreatedocumentfragment.class,args);}  }
class C{  public long skip(long n) throws IOException {  if (n < 0) {    throw new IllegalArgumentException("negative skip length");  }  ensureOpen();  int max=(int)Math.min(n,Integer.MAX_VALUE);  int total=0;  while (total < max) {    int len=max - total;    if (len > tmpbuf.length) {      len=tmpbuf.length;    }    len=read(tmpbuf,0,len);    if (len == -1) {      entryEOF=true;      break;    }    total+=len;  }  return total;}  }
class C{  public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  InternalConnection(final ServerConnection<Integer> serverConnection){  this.serverConnection=serverConnection;}  }
class C{  public void writeVecor(File ftrain,File ftest,File all,File trainLabel) throws Exception {  int labels[]=readLabels();  FileWriter fw=new FileWriter(ftrain);  FileWriter fwt=new FileWriter(ftest);  FileWriter flabel=new FileWriter(trainLabel);  for (int i=0; i < dataNum; i++) {    if (TestTrain[i] == 1) {      flabel.write(String.valueOf(labels[i]) + '\n');      for (int j=0; j < dimension; j++) {        if (j != dimension - 1) {          fw.write(String.valueOf(W[i][j]) + " ");        } else {          fw.write(String.valueOf(W[i][j]) + '\n');        }      }    } else {      for (int j=0; j < dimension; j++) {        if (j != dimension - 1) {          fwt.write(String.valueOf(W[i][j]) + " ");        } else {          fwt.write(String.valueOf(W[i][j]) + '\n');        }      }    }  }  fw.close();  fwt.close();  flabel.close();  FileWriter fwall=new FileWriter(all);  for (int i=0; i < dataNum; i++) {    for (int j=0; j < dimension; j++) {      if (j != dimension - 1) {        fwall.write(String.valueOf(W[i][j]) + " ");      } else {        fwall.write(String.valueOf(W[i][j]) + '\n');      }    }  }  fwall.close();}  }
class C{  @Override public boolean completeCycle(){  return completeCycle;}  }
class C{  public static boolean isValidFilter(String filter){  try {    getFilterFromString(filter);  } catch (  IllegalArgumentException e) {    return false;  }  return true;}  }
class C{  private static int[] stripLeadingZeroInts(int val[]){  int vlen=val.length;  int keep;  for (keep=0; keep < vlen && val[keep] == 0; keep++)   ;  return java.util.Arrays.copyOfRange(val,keep,vlen);}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  private void mergeParameters(){  if ((queryParamString == null) || (queryParamString.length() < 1))   return;  Parameters paramParser=new Parameters();  MessageBytes queryMB=MessageBytes.newInstance();  queryMB.setString(queryParamString);  String encoding=getCharacterEncoding();  if (encoding != null) {    try {      queryMB.setCharset(B2CConverter.getCharset(encoding));    } catch (    UnsupportedEncodingException ignored) {    }  }  paramParser.setQuery(queryMB);  paramParser.setQueryStringEncoding(encoding);  paramParser.handleQueryParameters();  Enumeration<String> dispParamNames=paramParser.getParameterNames();  while (dispParamNames.hasMoreElements()) {    String dispParamName=dispParamNames.nextElement();    String[] dispParamValues=paramParser.getParameterValues(dispParamName);    String[] originalValues=parameters.get(dispParamName);    if (originalValues == null) {      parameters.put(dispParamName,dispParamValues);      continue;    }    parameters.put(dispParamName,mergeValues(dispParamValues,originalValues));  }}  }
class C{  private Class<?> validateClassInterfaces(String className,boolean initialize){  Class<?> theClass=loadClassForValidation(className,className,initialize);  for (  String i : instanceOfInterfaces) {    Class<?> instanceOfClass=loadClassForValidation(className,i,initialize);    if (!instanceOfClass.isAssignableFrom(theClass)) {      throw PropertyException.illegalPropertyValueException(this,className);    }  }  return theClass;}  }
class C{  public static boolean isStorageExists(){  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    return true;  }  return false;}  }
class C{  private boolean needsSizeRotation(){  fileLock.readLock().lock();  try {    if (currentFile != null) {      return configuration.getRotationFileSizeInByte() != -1 && currentFile.length() >= configuration.getRotationFileSizeInByte();    }  }  finally {    fileLock.readLock().unlock();  }  return false;}  }
class C{  public static Artwork createLinkedArtworkFromURL(String link) throws IOException {  return AndroidArtwork.createLinkedArtworkFromURL(link);}  }
class C{  public boolean showOperations(){  return showOperations;}  }
class C{  public void _read(InputStream input){  value=input.read_string();}  }
class C{  public LDAPConnectionHandler(QueueingStrategy strategy,String friendlyName){  super(friendlyName != null ? friendlyName : DEFAULT_FRIENDLY_NAME + " Thread");  this.friendlyName=friendlyName;  this.queueingStrategy=strategy;}  }
class C{  @Override public void run(){  while (!shutdown) {    try {      ReplicationMsg msg=rb.receive();      rb.updateWindowAfterReplay();      if (msg != null) {        debugInfo("Broker " + serverId + " reader received: "+ msg);      }      lastMsg=msg;    } catch (    SocketTimeoutException ex) {      if (shutdown) {        return;      }    }  }  debugInfo("Broker " + serverId + " reader thread is dying");}  }
class C{  public Object createToken(String name,String Password){  return new Object();}  }
class C{  private Pair<String,String> parseValue(String m) throws ArgumentException {  int sep=m.indexOf(':');  if (sep < 0) {    throw ArgumentExceptionFactory.missingSeparatorInPropertyArgument(m);  }  if (sep == 0) {    throw ArgumentExceptionFactory.missingNameInPropertyArgument(m);  }  String propertyName=m.substring(0,sep);  String value=m.substring(sep + 1,m.length());  if (value.length() == 0) {    throw ArgumentExceptionFactory.missingValueInPropertyArgument(m);  }  return Pair.of(propertyName,value);}  }
class C{  public UNKNOWN(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  Node newNode;  String newValue;  NamedNodeMap nodeMap;  doc=(Document)load("staff",true);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  nodeMap=docType.getNotations();  assertNotNull("notationsNotNull",nodeMap);  newNode=nodeMap.getNamedItem("notation1");  assertNotNull("notationNotNull",newNode);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  private void verifyIndex(ReadableTransaction txn,EntryID entryID,Entry entry){  for (  AttributeIndex attrIndex : attrIndexList) {    verifyAttribute(txn,entryID,entry,attrIndex);  }  for (  VLVIndex vlvIndex : vlvIndexList) {    try {      if (vlvIndex.verifyEntry(txn,entryID,entry)) {        logger.error(ERR_VERIFY_MISSING_ENTRY_VLV,entry.getName(),vlvIndex.getName());        errorCount++;      }    } catch (    DirectoryException e) {      if (logger.isTraceEnabled()) {        logger.traceException(e);        logger.trace("Error checking entry %s against filter or base DN for VLV index %s: %s",entry.getName(),vlvIndex.getName(),e.getMessageObject());      }      errorCount++;    }catch (    StorageRuntimeException e) {      if (logger.isTraceEnabled()) {        logger.traceException(e);        logger.trace("Error reading VLV index %s for entry %s: %s",vlvIndex.getName(),entry.getName(),StaticUtils.getBacktrace(e));      }      errorCount++;    }  }}  }
class C{  private boolean verifySignature(String[] record,int signPos,int recPos) throws Exception {  String curSign=record[signPos];  if (curMAC == null) {    return false;  }  byte[] prevMAC=helper.toByteArray(curMAC);  byte[] newMAC;  if ((prevSignature == null) || prevSignature.equals("")) {    newMAC=new byte[prevMAC.length];    System.arraycopy(prevMAC,0,newMAC,0,prevMAC.length);  } else {    newMAC=new byte[prevMAC.length + helper.toByteArray(prevSignature).length];    System.arraycopy(prevMAC,0,newMAC,0,prevMAC.length);    System.arraycopy(helper.toByteArray(prevSignature),0,newMAC,prevMAC.length,helper.toByteArray(prevSignature).length);  }  if (recPos != 0) {    prevSignature=curSign;  }  verified=helper.verifySignature(helper.toByteArray(curSign),newMAC);  return verified;}  }
class C{  @Override public void closePool(final String username) throws SQLException {  try {    _pool.clear(new UserPassKey(username,null));  } catch (  final Exception ex) {    throw new SQLException("Error closing connection pool",ex);  }}  }
class C{  public MetadataContainer(final ContainerType type){  this(type,0,BigInteger.ZERO);}  }
class C{  public PropertyChangeSupport(Object sourceBean){  if (sourceBean == null) {    throw new NullPointerException("sourceBean == null");  }  this.sourceBean=sourceBean;}  }
class C{  public void write_value(java.io.Serializable value,java.lang.Class clz){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  @Override public void recycle(){}  }
class C{  public boolean hasName(final String name){  for (  final String n : names) {    if (n.equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  static public void assertEquals(int expected,int actual){  assertEquals(null,expected,actual);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix09.class,args);}  }
class C{  public void removePropertyChangeListener(String name,PropertyChangeListener pcl){  pcSupport.removePropertyChangeListener(name,pcl);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  NodeList elementList;  Element element;  Node firstChild;  Node secondChild;  String childValue;  Text emptyText;  Attr attrNode;  Node retval;  doc=(Document)load("hc_staff",true);  root=doc.getDocumentElement();  emptyText=doc.createTextNode("");  elementList=root.getElementsByTagName("acronym");  element=(Element)elementList.item(0);  attrNode=element.getAttributeNode("title");  retval=attrNode.appendChild(emptyText);  element.normalize();  attrNode=element.getAttributeNode("title");  firstChild=attrNode.getFirstChild();  childValue=firstChild.getNodeValue();  assertEquals("firstChild","Yes",childValue);  secondChild=firstChild.getNextSibling();  assertNull("secondChildNull",secondChild);}  }
class C{  public SMSessionCache(Collection sessions,String searchErrorMsg,SMProfileModelImpl modelImpl){  searchErrorMessage=searchErrorMsg;  Map mapSessions=retainSessionsWithUserID(sessions,modelImpl);  cacheSessions(mapSessions,modelImpl);}  }
class C{  @Override public MatchStrength hasFormat(InputAccessor acc) throws IOException {  return MatchStrength.INCONCLUSIVE;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public void addDragSourceMotionListener(DragSourceMotionListener dsml){  if (dsml != null) {synchronized (this) {      motionListener=DnDEventMulticaster.add(motionListener,dsml);    }  }}  }
class C{  public void testSetBitZero(){  byte aBytes[]={0};  int aSign=0;  int number=0;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String01() throws Exception {  for (  String validValue : getValidValues()) {    try {      TrustManagerFactory.getInstance(validValue,(String)null);      fail();    } catch (    IllegalArgumentException expected) {    }    try {      TrustManagerFactory.getInstance(validValue,"");      fail();    } catch (    IllegalArgumentException expected) {    }  }}  }
class C{  public boolean isEmpty(){  return (exchange_keys.length == 0);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    System.out.println("shootme: got an ACK " + requestEvent.getRequest());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  private void deleteIndex(final ConnectionWrapper connWrapper,final AbstractIndexDescriptor index) throws Exception {  final RootCfgClient root=connWrapper.getRootConfiguration();  final BackendCfgClient backend=root.getBackend(index.getBackend().getBackendID());  removeBackendIndex((PluggableBackendCfgClient)backend,index);  backend.commit();}  }
class C{  private static String buildAciValue(String... aciFields){  return _buildAciValue("aci:",aciFields);}  }
class C{  @Override public Foo[] findByUuid_PrevAndNext(long fooId,String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByUuid_PrevAndNext(session,foo,uuid,orderByComparator,true);    array[1]=foo;    array[2]=getByUuid_PrevAndNext(session,foo,uuid,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public boolean isEmailEnabled(){  return emailEnabled;}  }
class C{  public void removeLocalEjb(String name){  try {    envCtx.unbind(name);  } catch (  NamingException e) {    log.error(sm.getString("naming.unbindFailed",e));  }}  }
class C{  public MenuDragMouseEvent(Component source,int id,long when,int modifiers,int x,int y,int clickCount,boolean popupTrigger,MenuElement p[],MenuSelectionManager m){  super(source,id,when,modifiers,x,y,clickCount,popupTrigger);  path=p;  manager=m;}  }
class C{  public PowerTile genPowerTile(float[] coords,int stageZone){  return new PowerTile(player,stageZone,coords[0],coords[1],(float)1.0 * REL_HEIGHT,(float)3.0 * REL_HEIGHT,stageContainer,tile0,tile1,tile2,tile3,tile4);}  }
class C{  public AgeFileFilter(long cutoff,boolean acceptOlder){  this.acceptOlder=acceptOlder;  this.cutoff=cutoff;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementaddnewattribute.class,args);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  DocumentFragment newdocFragment;  Node newChild1;  Node newChild2;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  int nodeType;  Node appendedChild;  java.util.List expected=new java.util.ArrayList();  expected.add("employeeId");  expected.add("name");  expected.add("position");  expected.add("salary");  expected.add("gender");  expected.add("address");  expected.add("newChild1");  expected.add("newChild2");  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newdocFragment=doc.createDocumentFragment();  newChild1=doc.createElement("newChild1");  newChild2=doc.createElement("newChild2");  appendedChild=newdocFragment.appendChild(newChild1);  appendedChild=newdocFragment.appendChild(newChild2);  appendedChild=employeeNode.appendChild(newdocFragment);  for (int indexN1009F=0; indexN1009F < childList.getLength(); indexN1009F++) {    child=(Node)childList.item(indexN1009F);    nodeType=(int)child.getNodeType();    if (equals(1,nodeType)) {      childName=child.getNodeName();      result.add(childName);    }  }  assertEquals("elementNames",expected,result);}  }
class C{  protected void installRolloverBorders(JComponent c){  Component[] components=c.getComponents();  for (  Component component : components) {    if (component instanceof JComponent) {      ((JComponent)component).updateUI();      setBorderToRollover(component);    }  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  String nullString=null;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("Core",nullString);  assertTrue("Core",state);}  }
class C{  private static Class safeLoadClass(String className,ClassLoader classLoader) throws ClassNotFoundException {  logger.log(Level.FINE,"Trying to load {0}",className);  try {    SecurityManager s=System.getSecurityManager();    if (s != null) {      int i=className.lastIndexOf('.');      if (i != -1) {        s.checkPackageAccess(className.substring(0,i));      }    }    if (classLoader == null) {      return Class.forName(className);    } else {      return classLoader.loadClass(className);    }  } catch (  SecurityException se) {    if (PLATFORM_DEFAULT_FACTORY_CLASS.equals(className)) {      return Class.forName(className);    }    throw se;  }}  }
class C{  public ProductService retrieveAllProducts(Handler<AsyncResult<List<Product>>> resultHandler){  delegate.retrieveAllProducts(resultHandler);  return this;}  }
class C{  public ByteArrayBuilder appendCSNUTF8(CSN csn){  appendString(csn.toString());  return this;}  }
class C{  protected void drawRadioField(PdfCanvas canvas,float width,float height,boolean on){  canvas.saveState();  if (on) {    canvas.resetFillColorRgb().circle(width / 2,height / 2,Math.min(width,height) / 4).fill();  }  canvas.restoreState();}  }
class C{  public static boolean isRequestSuccessful(int requestCode,String[] permissions,int[] grantResults){  boolean result=false;  if (requestCode == LOCATION_PERMISSIONS_REQUEST) {    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      result=true;    }  }  return result;}  }
class C{  public void append(StringBuilder buff,String formatting,int[] index,String placeholder) throws ParseException {  boolean inString=index[0] < formatting.length();  char aChar=inString ? formatting.charAt(index[0]) : 0;  if (isLiteral()) {    buff.append(getChar(aChar));    if (getValueContainsLiteralCharacters()) {      if (inString && aChar != getChar(aChar)) {        throw new ParseException("Invalid character: " + aChar,index[0]);      }      index[0]=index[0] + 1;    }  } else   if (index[0] >= formatting.length()) {    if (placeholder != null && index[0] < placeholder.length()) {      buff.append(placeholder.charAt(index[0]));    } else {      buff.append(getPlaceholderCharacter());    }    index[0]=index[0] + 1;  } else   if (isValidCharacter(aChar)) {    buff.append(getChar(aChar));    index[0]=index[0] + 1;  } else {    throw new ParseException("Invalid character: " + aChar,index[0]);  }}  }
class C{  private IteraNetItem[] calculate_net_items(Collection<BrdItem> p_item_list){  IteraNetItem[] result=new IteraNetItem[p_item_list.size()];  Collection<BrdItem> handeled_items=new LinkedList<BrdItem>();  int curr_index=0;  while (!p_item_list.isEmpty()) {    BrdItem start_item=p_item_list.iterator().next();    Collection<BrdItem> curr_connected_set=start_item.get_connected_set(this.rule_net.net_number);    handeled_items.addAll(curr_connected_set);    p_item_list.removeAll(curr_connected_set);    Iterator<BrdItem> it=curr_connected_set.iterator();    while (it.hasNext()) {      BrdItem curr_item=it.next();      if (curr_index >= result.length) {        System.out.println("NetIncompletes.calculate_net_items: to many items");        return result;      }      result[curr_index]=new IteraNetItem(curr_item,curr_connected_set);      ++curr_index;    }  }  if (curr_index < result.length) {    System.out.println("NetIncompletes.calculate_net_items: to few items");  }  return result;}  }
class C{  public void testHttpsConnection_Not_Found_Response() throws Throwable {  setUpStoreProperties();  SSLContext ctx=getContext();  ServerSocket ss=ctx.getServerSocketFactory().createServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  connection.setSSLSocketFactory(ctx.getSocketFactory());  try {    doInteraction(connection,ss,NOT_FOUND_CODE);    fail("Expected exception was not thrown.");  } catch (  FileNotFoundException e) {    if (DO_LOG) {      System.out.println("Expected exception was thrown: " + e.getMessage());      e.printStackTrace();    }  }  connection.connect();}  }
class C{  public String str(){  return m_val ? "true" : "false";}  }
class C{  public ArrayDeque(int numElements){  allocateElements(numElements);}  }
class C{  public JToggleButton(Icon icon,boolean selected){  this(null,icon,selected);}  }
class C{  public static int println(int priority,String tag,String msg){  return Log.println(priority,tag,msg);}  }
class C{  public CMapToUnicode(){  byteMappings=new HashMap<>();}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  root=(JRootPane)c;  int style=root.getWindowDecorationStyle();  if (style != JRootPane.NONE) {    installClientDecorations(root);  }}  }
class C{  @Override public void destroyModuleState(){  userId=null;  userName=null;}  }
class C{  public static NSObject parse(InputStream is) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {  return parse(readAll(is));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodenull.class,args);}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  public boolean isSignatureValid(){  if (signed & !validationDone) {    try {      XMLSignatureManager manager=XMLSignatureManager.getInstance();      valid=manager.verifyXMLSignature(xmlString,ASSERTION_ID_ATTRIBUTE,verifyingCertAlias);    } catch (    Exception e) {      if (SAMLUtils.debug.warningEnabled()) {        SAMLUtils.debug.warning("SecurityAssertion.isSignatureValid: " + " signature validation exception",e);      }      valid=false;    }    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SAMLUtils.checkSignatureValid:" + " valid = " + valid);    }    validationDone=true;  }  return valid;}  }
class C{  public SQLNonTransientConnectionException(Throwable cause){  super(cause);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.StatusCodeType createStatusCodeType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.StatusCodeTypeImpl();}  }
class C{  public int digest(byte[] buf,int offset,int len) throws DigestException {  if (buf == null) {    throw new IllegalArgumentException("No output buffer given");  }  if (buf.length - offset < len) {    throw new IllegalArgumentException("Output buffer too small for specified offset and length");  }  int numBytes=engineDigest(buf,offset,len);  state=INITIAL;  return numBytes;}  }
class C{  public ActionEvent(Object source,int id,String command,int modifiers){  this(source,id,command,0,modifiers);}  }
class C{  @Override public void closePool(final String username) throws SQLException {synchronized (this) {    if (username == null || !username.equals(_username)) {      return;    }  }  try {    _pool.close();  } catch (  final Exception ex) {    throw new SQLException("Error closing connection pool",ex);  }}  }
class C{  public boolean isActive(String flagName,FlagContextInterface flagContext,boolean defaultValue){  if (TextUtils.isEmpty(flagName)) {    return defaultValue;  }  if (flagCaches.containsKey(flagName))   return flagCaches.get(flagName);  if (null != flags && null != flagContext) {    for (    Flag flag : flags) {      if (null != flag && null != flag.getName() && flag.getName().equals(flagName)) {        boolean isActivated=FlaggrManager.isActivated(flag,flagContext,defaultValue);        flagCaches.put(flagName,isActivated);        return isActivated;      }    }  }  Log.w(TAG,"The flag " + flagName + " is not found.");  return defaultValue;}  }
class C{  @Override public void visitInnerClass(final String aname,final String outerName,final String innerName,final int attr_access){  if ((name != null) && name.equals(aname)) {    this.access=attr_access;  }  super.visitInnerClass(aname,outerName,innerName,attr_access);}  }
class C{  public static void saveSAML2Token(String primaryKey,String secondaryKey,Object samlObj,long expirationTime) throws SAML2TokenRepositoryException {  SAML2TokenRepositoryHolder.getRepo().saveSAML2Token(primaryKey,secondaryKey,samlObj,expirationTime);}  }
class C{  public static void fill(int[] a,int fromIndex,int toIndex,int val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public static NSObject parse(File f) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {  DocumentBuilder docBuilder=getDocBuilder();  Document doc=docBuilder.parse(f);  return parse(doc);}  }
class C{  public static String byteToHex(final byte b){  return BYTE_HEX_STRINGS[UPPER_CASE][b & 0xFF];}  }
class C{  static byte[] rawKey(Class requester,String key){  return hash(getUTF8Bytes(requester.getName() + "/" + key));}  }
class C{  @Override public void run(){  while (!exitRequested) {    if (getAssociatedTask() == null) {      try {synchronized (notifyLock) {          notifyLock.wait(5000);        }      } catch (      InterruptedException ie) {        logger.traceException(ie);      }      continue;    }    TaskState taskState=getAssociatedTask().getTaskState();    try {      if (!TaskState.isDone(taskState)) {        Task task=getAssociatedTask();        logger.info(NOTE_TASK_STARTED,task.getDisplayName(),task.getTaskID());        taskState=task.execute();        logger.info(NOTE_TASK_FINISHED,task.getDisplayName(),task.getTaskID(),taskState.getDisplayName());      }    } catch (    Exception e) {      logger.traceException(e);      Task task=getAssociatedTask();      logger.error(ERR_TASK_EXECUTE_FAILED,task.getTaskEntry().getName(),stackTraceToSingleLineString(e));      task.setTaskState(TaskState.STOPPED_BY_ERROR);    }    Task completedTask=getAssociatedTask();    setAssociatedTask(null);    if (!taskScheduler.threadDone(this,completedTask,taskState)) {      exitRequested=true;      break;    }  }  if (getAssociatedTask() != null) {    Task task=getAssociatedTask();    TaskState taskState=TaskState.STOPPED_BY_SHUTDOWN;    taskScheduler.threadDone(this,task,taskState);  }}  }
class C{  @Override public void fileModified(File newWar){  try {    File deployWar=new File(getDeployDirFile(),newWar.getName());    ContextName cn=new ContextName(deployWar.getName(),true);    if (deployWar.exists() && deployWar.lastModified() > newWar.lastModified()) {      if (log.isInfoEnabled())       log.info(sm.getString("farmWarDeployer.alreadyDeployed",cn.getName()));      return;    }    if (log.isInfoEnabled())     log.info(sm.getString("farmWarDeployer.modInstall",cn.getName(),deployWar.getAbsolutePath()));    if (!isServiced(cn.getName())) {      addServiced(cn.getName());      try {        copy(newWar,deployWar);        check(cn.getName());      }  finally {        removeServiced(cn.getName());      }    } else {      log.error(sm.getString("farmWarDeployer.servicingDeploy",cn.getName(),deployWar.getName()));    }    install(cn.getName(),deployWar);  } catch (  Exception x) {    log.error(sm.getString("farmWarDeployer.modInstallFail"),x);  }}  }
class C{  public void test_store_java_io_OutputStream_char() throws Exception {  KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());  try {    keyStore.store(new ByteArrayOutputStream(),"pwd".toCharArray());  } catch (  KeyStoreException expected) {  }  keyStore.load(null,"pwd".toCharArray());  try {    keyStore.store(null,"pwd".toCharArray());    fail();  } catch (  NullPointerException expected) {  }catch (  IOException expected) {  }}  }
class C{  public GitHubRequest(){}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.ConsentType createConsentType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ConsentTypeImpl();}  }
class C{  public void error(Level level,String messageId,String data[],Object session) throws LogException {  error(level,messageId,data,session,null);}  }
class C{  @Parameters({}) @AfterTest(groups={"api-adminwrite","api-adminread"}) public void tearDown() throws Exception {  setbufferSizer("ON","60");}  }
class C{  public Authenticator authenticator(){  return authenticator;}  }
class C{  public boolean isSignatureValid(X509CRL crl,X509Certificate crlIssuer){  if (crlIssuer != null) {    try {      crl.verify(crlIssuer.getPublicKey());      return true;    } catch (    GeneralSecurityException e) {      LOGGER.warn("CRL not issued by the same authority as the certificate that is being checked");    }  }  if (rootStore == null)   return false;  try {    for (    X509Certificate anchor : SignUtils.getCertificates(rootStore)) {      try {        crl.verify(anchor.getPublicKey());        return true;      } catch (      GeneralSecurityException e) {        continue;      }    }  } catch (  GeneralSecurityException e) {    return false;  }  return false;}  }
class C{  public Tag convertTag(Tag tag,ID3V2Version id3V2Version){  if (tag instanceof ID3v24Tag) {switch (id3V2Version) {case ID3_V22:      return new ID3v22Tag((ID3v24Tag)tag);case ID3_V23:    return new ID3v23Tag((ID3v24Tag)tag);case ID3_V24:  return tag;}} else if (tag instanceof ID3v23Tag) {switch (id3V2Version) {case ID3_V22:return new ID3v22Tag((ID3v23Tag)tag);case ID3_V23:return tag;case ID3_V24:return new ID3v24Tag((ID3v23Tag)tag);}} else if (tag instanceof ID3v22Tag) {switch (id3V2Version) {case ID3_V22:return tag;case ID3_V23:return new ID3v23Tag((ID3v22Tag)tag);case ID3_V24:return new ID3v24Tag((ID3v22Tag)tag);}}return tag;}  }
class C{  final boolean isInvalid(){  if (status == null) {    status=(this.path.indexOf('\u0000') < 0) ? PathStatus.CHECKED : PathStatus.INVALID;  }  return status == PathStatus.INVALID;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.ResourceAccessStatementElement createResourceAccessStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.ResourceAccessStatementElementImpl();}  }
class C{  public XPathFunctionException(String message){  super(message);}  }
class C{  public String toString(){  return getClass().getName() + "[id=" + getID()+ ",offset="+ rawOffset+ ",dstSavings="+ dstSavings+ ",useDaylight="+ useDaylight+ ",startYear="+ startYear+ ",startMode="+ startMode+ ",startMonth="+ startMonth+ ",startDay="+ startDay+ ",startDayOfWeek="+ startDayOfWeek+ ",startTime="+ startTime+ ",startTimeMode="+ startTimeMode+ ",endMode="+ endMode+ ",endMonth="+ endMonth+ ",endDay="+ endDay+ ",endDayOfWeek="+ endDayOfWeek+ ",endTime="+ endTime+ ",endTimeMode="+ endTimeMode+ ']';}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,50,"2600");  childData=child.getData();  assertEquals("characterdataReplaceDataExceedsLengthOfDataAssert","2600",childData);}  }
class C{  public SessionResponse sendRequestWithRetry(URL svcurl,SessionRequest sreq,Session session) throws SessionException {  if (SystemProperties.isServerMode()) {    try {      return getSessionResponseWithRetry(svcurl,sreq,session);    } catch (    SessionException e) {      String hostServer=foreignSessionHandler.getCurrentHostServer(session.getID());      if (!servicesClusterMonitorHandler.checkServerUp(hostServer)) {        URL retryURL=session.getSessionServiceURL();        if (!retryURL.equals(svcurl)) {          return getSessionResponseWithRetry(retryURL,sreq,session);        }      }      throw e;    }  } else {    return getSessionResponseWithRetry(svcurl,sreq,session);  }}  }
class C{  public JKPrivilige(){}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  ReadObjectCallback cb=readObjectCallbacks.get(s);  if (cb == null) {    try {      readObjectCallbacks.put(s,cb=new ReadObjectCallback(s));    } catch (    Exception e) {      throw new IOException(e.toString());    }  }  cb.registerComponent(this);  int cpCount=s.readInt();  if (cpCount > 0) {    clientProperties=new ArrayTable();    for (int counter=0; counter < cpCount; counter++) {      clientProperties.put(s.readObject(),s.readObject());    }  }  if (getToolTipText() != null) {    ToolTipManager.sharedInstance().registerComponent(this);  }  setWriteObjCounter(this,(byte)0);  revalidateRunnableScheduled=new AtomicBoolean(false);}  }
class C{  public Node nextNode() throws DOMException {  if ((m_next) < this.size()) {    Node next=this.elementAt(m_next);    m_next++;    return next;  } else   return null;}  }
class C{  @Override public void checkClientTrusted(X509Certificate[] chain,String authType) throws CertificateException {  Date currentDate=new Date();  for (  X509Certificate c : chain) {    try {      c.checkValidity(currentDate);    } catch (    CertificateExpiredException cee) {      logger.error(ERR_EXPCHECK_TRUSTMGR_CLIENT_CERT_EXPIRED,c.getSubjectDN().getName(),c.getNotAfter());      throw cee;    }catch (    CertificateNotYetValidException cnyve) {      logger.error(ERR_EXPCHECK_TRUSTMGR_CLIENT_CERT_NOT_YET_VALID,c.getSubjectDN().getName(),c.getNotBefore());      throw cnyve;    }  }  trustManager.checkClientTrusted(chain,authType);}  }
class C{  public SQLRecoverableException(Throwable cause){  super(cause);}  }
class C{  public boolean processRegistrationResponse(HttpServletRequest request,HttpServletResponse response,FSNameRegistrationResponse regisResponse){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Entered FSNameRegistrationHandler::" + "handleRegistrationResponse");  }  this.request=request;  this.response=response;  this.regisResponse=regisResponse;  setRegistrationURL();  if (managerInst == null) {    FSUtils.debug.error("FSNameRegistrationHandler " + "Account Manager instance is null");    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::handleNameRegistration" + "failed to get Account Manager instance");    }    returnLocallyAtSource(response,false);    return false;  }  String responseStatus=((regisResponse.getStatus()).getStatusCode()).getValue();  if (responseStatus.equals(IFSConstants.SAML_SUCCESS)) {    FSUtils.debug.message("Name registration Successful");    relayState=regisResponse.getRelayState();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Relay State : " + relayState);    }    if (relayState == null) {      returnLocallyAtSource(response,false);      return true;    } else {      FSRegistrationManager regisManager=FSRegistrationManager.getInstance(metaAlias);      HashMap valMap=regisManager.getRegistrationMap(relayState);      if (valMap == null) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Map does not contain request " + "for state = " + relayState);        }        returnLocallyAtSource(response,false);        return false;      } else {        regisManager.removeRegistrationMapInfo(relayState);        regisMap=(HashMap)valMap.get("SSODetails");        HashMap returnMap=(HashMap)valMap.get("ReturnEntry");        oldAcctKey=(FSAccountFedInfoKey)returnMap.get("OldAccountKey");        if (oldAcctKey != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("Get OldAcctKet Name : " + oldAcctKey.getName() + "\nGet OldAcctKet Qualifier : "+ oldAcctKey.getNameSpace());          }        } else {          FSUtils.debug.message("OldAccount Key is null");        }        newAcctKey=(FSAccountFedInfoKey)returnMap.get("AccountKey");        if (newAcctKey != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("Get newAcctKey Name : " + newAcctKey.getName() + "Get newAcctKey Qualifier : "+ newAcctKey.getNameSpace());          }        } else {          FSUtils.debug.message("newAcctKey Key is null");        }        newAcctInfo=(FSAccountFedInfo)returnMap.get("AccountInfo");        userID=(String)returnMap.get("userID");        regisSource=(String)returnMap.get("RegisSource");        returnURL=(String)returnMap.get(IFSConstants.LRURL);        boolean bStatus=doCommonRegistration();        if (bStatus && hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("processRegResponse/HTTP, " + "call postRegisterNameIdentifier success");          }          callPostRegisterNameIdentifierSuccess(request,response,userID,null,regisResponse,IFSConstants.NAME_REGISTRATION_SP_HTTP_PROFILE);        }        returnLocallyAtSource(response,bStatus);        return bStatus;      }    }  } else   if (responseStatus.equals(IFSConstants.FEDERATION_NOT_EXISTS_STATUS)) {    FSUtils.debug.message("Name registration Failed. Federation does not exist");    returnLocallyAtSource(response,false);    return false;  } else   if (responseStatus.equals(IFSConstants.REGISTRATION_FAILURE_STATUS)) {    FSUtils.debug.message("Name registration Failed.");    returnLocallyAtSource(response,false);    return false;  }  return false;}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding,boolean append) throws IOException {  writeLines(file,null,lines,lineEnding,append);}  }
class C{  public final int size(){  return written;}  }
class C{  public boolean isServiceClass(Class service){  return serviceClass.equals(service);}  }
class C{  public Paragraph(Text text){  add(text);}  }
class C{  long freeSpaceUnix(String path,boolean kb,boolean posix,long timeout) throws IOException {  if (path.length() == 0) {    throw new IllegalArgumentException("Path must not be empty");  }  String flags="-";  if (kb) {    flags+="k";  }  if (posix) {    flags+="P";  }  String[] cmdAttribs=flags.length() > 1 ? new String[]{DF,flags,path} : new String[]{DF,path};  List<String> lines=performCommand(cmdAttribs,3,timeout);  if (lines.size() < 2) {    throw new IOException("Command line '" + DF + "' did not return info as expected "+ "for path '"+ path+ "'- response was "+ lines);  }  String line2=lines.get(1);  StringTokenizer tok=new StringTokenizer(line2," ");  if (tok.countTokens() < 4) {    if (tok.countTokens() == 1 && lines.size() >= 3) {      String line3=lines.get(2);      tok=new StringTokenizer(line3," ");    } else {      throw new IOException("Command line '" + DF + "' did not return data as expected "+ "for path '"+ path+ "'- check path is valid");    }  } else {    tok.nextToken();  }  tok.nextToken();  tok.nextToken();  String freeSpace=tok.nextToken();  return parseBytes(freeSpace,path);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild4.class,args);}  }
class C{  public static ArgumentException unknownTypeForCategory(String typeName,String categoryName){  LocalizableMessage msg=ERR_DSCFG_ERROR_CATEGORY_TYPE_UNRECOGNIZED.get(typeName,categoryName);  return new ArgumentException(msg);}  }
class C{  public boolean isCauseOf(Exception exception){  return TaggedIOException.isTaggedWith(exception,tag);}  }
class C{  public NoPermissionException(String explanation){  super(explanation);}  }
class C{  public LDAPConnectionOptions(){}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  private void enableBle(){  final Intent enableIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);  startActivityForResult(enableIntent,Utils.REQUEST_ENABLE_BT);}  }
class C{  private char map(char ch){  int index=ch - 'A';  if (index < 0 || index >= this.getSoundexMapping().length) {    throw new IllegalArgumentException("The character is not mapped: " + ch);  }  return this.getSoundexMapping()[index];}  }
class C{  public boolean isGenericURI(){  return (m_host != null);}  }
class C{  public ScenarioBuilder commit(String fileName,String id){  File content=new File(scenario.getRepositoryLocation(),fileName);  try {    AddCommand add=git.add().addFilepattern(fileName);    Files.touch(content);    add.call();    RevCommit rc=git.commit().setMessage("content " + id).call();    scenario.getCommits().put(id,rc.getId());  } catch (  Exception ex) {    throw new IllegalStateException(String.format("error creating a commit with new file %s",content),ex);  }  return this;}  }
class C{  public static void registerAuthenticationPolicy(DN configEntryDN,AuthenticationPolicy policy){  Reject.ifNull(configEntryDN,policy);synchronized (directoryServer.authenticationPolicies) {    if (directoryServer.defaultPasswordPolicyDN.equals(configEntryDN)) {      directoryServer.defaultPasswordPolicy=(PasswordPolicy)policy;    }    AuthenticationPolicy oldPolicy=directoryServer.authenticationPolicies.put(configEntryDN,policy);    if (oldPolicy != null) {      oldPolicy.finalizeAuthenticationPolicy();    }  }}  }
class C{  @Override protected Object createSsoServerWSSAgentsMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   wssAgentsGroup=new SsoServerWSSAgentsImpl(this,server); else   wssAgentsGroup=new SsoServerWSSAgentsImpl(this);  return wssAgentsGroup;}  }
class C{  public SizeSequence(int numEntries){  this(numEntries,0);}  }
class C{  public void applyLocalizedPattern(String pattern){  ndf.applyLocalizedPattern(pattern);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrspecifiedvalueremove.class,args);}  }
class C{  public GradientPaint(Point2D pt1,Color color1,Point2D pt2,Color color2){  if ((color1 == null) || (color2 == null) || (pt1 == null)|| (pt2 == null)) {    throw new NullPointerException("Colors and points should be non-null");  }  p1=new Point2D.Float((float)pt1.getX(),(float)pt1.getY());  p2=new Point2D.Float((float)pt2.getX(),(float)pt2.getY());  this.color1=color1;  this.color2=color2;}  }
class C{  void writeToSecretStore(byte[] cryptoMaterial,String filename,AMPassword password,String dataType) throws Exception {  KeyStore store=KeyStore.getInstance("jceks");  File file=new File(filename);  if (file.exists()) {    FileInputStream fis=new FileInputStream(file);    store.load(fis,password.getChars());    fis.close();  } else {    store.load(null,new char[0]);  }  if (store.containsAlias(dataType)) {    store.deleteEntry(dataType);  }  SecretKeySpec data=new SecretKeySpec(cryptoMaterial,"DESede");  KeyStore.SecretKeyEntry secKeyEntry=new KeyStore.SecretKeyEntry(data);  KeyStore.ProtectionParameter params=new KeyStore.PasswordProtection(password.getChars());  store.setEntry(dataType,secKeyEntry,params);  FileOutputStream fos=new FileOutputStream(file);  store.store(fos,password.getChars());  fos.close();}  }
class C{  void refresh(SMSEntry e){  if (e.attrSet != null) {    attrSet=SMSUtils.copyAttributes(e.attrSet);  } else {    attrSet=null;  }  newEntry=e.newEntry;  modSet=null;}  }
class C{  @Override protected void doDelete(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  if (readOnly) {    resp.sendError(WebdavStatus.SC_FORBIDDEN);    return;  }  if (isLocked(req)) {    resp.sendError(WebdavStatus.SC_LOCKED);    return;  }  deleteResource(req,resp);}  }
class C{  public static <A>ImmutableList<A> of(final A x1){  return new ImmutableList<>(x1,ImmutableList.<A>empty());}  }
class C{  public void sendEmail(String from,String to,String subject,String message,Map<String,String> options) throws NoEmailSentException {  if (to == null) {    if (debug.messageEnabled()) {      debug.message("DefaultEmailGatewayImpl::sendEmail to header is empty");    }    return;  }  try {    setOptions(options);    String tos[]=new String[]{to};    AMSendMail sendMail=new AMSendMail();    if (smtpHostName == null || smtpHostPort == null || smtpUserName == null || smtpUserPassword == null || smtpSSLEnabled == null) {      sendMail.postMail(tos,subject,message,from);      OAuthUtil.debugWarning("DefaultEmailGatewayImpl.sendEmail() :" + "sending email using the defaults localhost and port 25");    } else {      sendMail.postMail(tos,subject,message,from,"UTF-8",smtpHostName,smtpHostPort,smtpUserName,smtpUserPassword,sslEnabled);    }    OAuthUtil.debugMessage("DefaultEmailGatewayImpl.sendEmail() : " + "email sent to : " + to + ".");  } catch (  Exception ex) {    debug.error("DefaultEmailGatewayImpl.sendEmail() : " + "Exception in sending email : ",ex);    throw new NoEmailSentException(ex);  }}  }
class C{  public void normalize_traces(int p_net_no){  long time_end=System.currentTimeMillis() + 20 * 1000;  Iterator<UndoObjectNode> itera=undo_items.start_read_object();  while (System.currentTimeMillis() < time_end) {    BrdItem curr_item=(BrdItem)undo_items.read_next(itera);    if (curr_item == null)     break;    if (!curr_item.is_on_the_board())     continue;    if (!curr_item.contains_net(p_net_no))     continue;    if (!(curr_item instanceof BrdTracep))     continue;    BrdTracep curr_trace=(BrdTracep)curr_item;    if (curr_trace.is_user_fixed())     continue;    if (curr_trace.normalize(null)) {      ;    } else     if (remove_if_cycle(curr_trace)) {      ;    }  }}  }
class C{  public void removeAttributeDefaults(Set attrs) throws SMSException, SSOException {  SMSEntry.validateToken(ssm.getSSOToken());  Iterator it=attrs.iterator();  while (it.hasNext()) {    String asName=(String)it.next();    AttributeSchema as=getAttributeSchema(asName);    if (as == null) {      throw (new InvalidAttributeNameException(IUMSConstants.UMS_BUNDLE_NAME,IUMSConstants.services_validator_invalid_attr_name,null));    }    as.removeDefaultValues();  }}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String02() throws NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  try {    KeyManagerFactory.getInstance(null,defaultProviderName);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  SignedMutableBigInteger(MutableBigInteger val){  super(val);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardToAgentsViewBean();}  }
class C{  private void showUploadProgressNotification(){  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_file_upload_white_24dp).setContentTitle(getString(R.string.app_name)).setContentText("Uploading...").setProgress(0,0,true).setOngoing(true).setAutoCancel(false);  NotificationManager manager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  manager.notify(NOTIF_ID_DOWNLOAD,builder.build());}  }
class C{  public Builder names(final Collection<String> names){  this.names.addAll(names);  return this;}  }
class C{  public Collection<PartialSession> searchPartialSessions(CrestQuery crestQuery) throws CoreTokenException {  final QueryFilter<JsonPointer> queryFilter=crestQuery.getQueryFilter();  Reject.ifNull(queryFilter,"Query Filter must be specified in the request");  FilterAttributeBuilder filterAttributeBuilder=new TokenFilterBuilder().withSizeLimit(sessionServiceConfig.getMaxSessionListSize()).withTimeLimit(duration(10,TimeUnit.SECONDS)).and();  queryFilter.accept(new SessionQueryFilterVisitor(),filterAttributeBuilder);  filterAttributeBuilder.withAttribute(SessionTokenField.SESSION_STATE.getField(),SessionState.VALID.toString());  addFieldsToFilter(filterAttributeBuilder,crestQuery.getFields());  Collection<PartialSession> results;  final Collection<PartialToken> partialTokens=coreTokenService.attributeQuery(filterAttributeBuilder.build());  results=new ArrayList<>(partialTokens.size());  for (  PartialToken partialToken : partialTokens) {    results.add(new PartialSession(partialToken));  }  return results;}  }
class C{  public int at(int x,int y){  int value=matrix.get(x,y);  if (!(value == 0 || value == 1)) {    throw new RuntimeException("Bad value");  }  return value;}  }
class C{  public JsonValue action(String location,String resourceId,String actionId,JsonValue payload,Context context) throws ResourceException {  Reject.ifTrue(StringUtils.isEmpty(location),"The endpoint destination may not be null or empty.");  Reject.ifTrue(StringUtils.isEmpty(actionId),"The specific action to perform may not be null or empty.");  final Router rootRouter=router.get();  final ActionRequest actionRequest=Requests.newActionRequest(location,actionId);  if (payload != null) {    actionRequest.setContent(payload);  }  if (resourceId != null) {    actionRequest.setResourcePath(resourceId);  }  return rootRouter.handleAction(context,actionRequest).getOrThrowUninterruptibly().getJsonContent();}  }
class C{  public void modifyAllPolicyTemplates(String serviceName,Set policyDNs) throws AMException, SSOException {  throw new UnsupportedOperationException();}  }
class C{  public ConfigManagerFatalException(String s){  super(s);}  }
class C{  private Component createInputPanel(){  JPanel inputPanel=new JPanel(new GridBagLayout());  inputPanel.setOpaque(false);  lInitialMemory=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_INITIAL_MEMORY_LABEL.get(),UIFactory.TextStyle.PRIMARY_FIELD_VALID);  lInitialMemory.setOpaque(false);  tfInitialMemory=UIFactory.makeJTextField(LocalizableMessage.EMPTY,INFO_INITIAL_MEMORY_TOOLTIP.get(),10,UIFactory.TextStyle.TEXTFIELD);  lInitialMemory.setLabelFor(tfInitialMemory);  lMaxMemory=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_MAX_MEMORY_LABEL.get(),UIFactory.TextStyle.PRIMARY_FIELD_VALID);  lMaxMemory.setOpaque(false);  tfMaxMemory=UIFactory.makeJTextField(LocalizableMessage.EMPTY,INFO_MAX_MEMORY_TOOLTIP.get(),10,UIFactory.TextStyle.TEXTFIELD);  lMaxMemory.setLabelFor(tfMaxMemory);  lOtherArguments=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_OTHER_JAVA_ARGUMENTS_LABEL.get(),UIFactory.TextStyle.PRIMARY_FIELD_VALID);  lOtherArguments.setOpaque(false);  tfOtherArguments=UIFactory.makeJTextField(LocalizableMessage.EMPTY,INFO_OTHER_JAVA_ARGUMENTS_TOOLTIP.get(),30,UIFactory.TextStyle.TEXTFIELD);  lOtherArguments.setLabelFor(tfOtherArguments);  GridBagConstraints gbc=new GridBagConstraints();  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=0.0;  inputPanel.add(lInitialMemory,gbc);  gbc.gridx=1;  gbc.weightx=1.0;  gbc.insets.left=UIFactory.LEFT_INSET_PRIMARY_FIELD;  inputPanel.add(tfInitialMemory,gbc);  gbc.weightx=0.0;  gbc.gridx=2;  gbc.insets.left=UIFactory.LEFT_INSET_SECONDARY_FIELD;  JLabel lMb=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_MEGABYTE_LABEL.get(),UIFactory.TextStyle.SECONDARY_FIELD_VALID);  lMb.setOpaque(false);  inputPanel.add(lMb,gbc);  gbc.gridx=1;  gbc.gridy++;  gbc.gridwidth=2;  gbc.insets.top=3;  gbc.insets.left=UIFactory.LEFT_INSET_PRIMARY_FIELD;  inputPanel.add(UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_JAVA_ARGUMENTS_LEAVE_EMPTY.get(),UIFactory.TextStyle.INLINE_HELP),gbc);  gbc.gridy++;  gbc.gridwidth=1;  gbc.gridx=0;  gbc.weightx=0.0;  gbc.insets.left=0;  gbc.insets.top=UIFactory.TOP_INSET_PRIMARY_FIELD;  inputPanel.add(lMaxMemory,gbc);  gbc.gridx=1;  gbc.weightx=1.0;  gbc.insets.left=UIFactory.LEFT_INSET_PRIMARY_FIELD;  inputPanel.add(tfMaxMemory,gbc);  gbc.weightx=0.0;  gbc.gridx=2;  gbc.insets.left=UIFactory.LEFT_INSET_SECONDARY_FIELD;  lMb=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_MEGABYTE_LABEL.get(),UIFactory.TextStyle.SECONDARY_FIELD_VALID);  lMb.setOpaque(false);  inputPanel.add(lMb,gbc);  gbc.gridx=1;  gbc.gridy++;  gbc.gridwidth=2;  gbc.insets.top=3;  gbc.insets.left=UIFactory.LEFT_INSET_PRIMARY_FIELD;  inputPanel.add(UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,INFO_JAVA_ARGUMENTS_LEAVE_EMPTY.get(),UIFactory.TextStyle.INLINE_HELP),gbc);  gbc.gridy++;  gbc.gridwidth=1;  gbc.gridx=0;  gbc.weightx=0.0;  gbc.insets.left=0;  gbc.insets.top=UIFactory.TOP_INSET_PRIMARY_FIELD;  inputPanel.add(lOtherArguments,gbc);  gbc.gridx=1;  gbc.weightx=1.0;  gbc.gridwidth=2;  gbc.insets.left=UIFactory.LEFT_INSET_PRIMARY_FIELD;  inputPanel.add(tfOtherArguments,gbc);  gbc.gridy++;  gbc.gridx=0;  gbc.weighty=1.0;  gbc.insets=UIFactory.getEmptyInsets();  inputPanel.add(Box.createVerticalGlue(),gbc);  return inputPanel;}  }
class C{  public boolean isRenamed(){  return isTruelyRenamed() || isRenamedOverride;}  }
class C{  public void createStructure(){  MP3File.getStructureFormatter().openHeadingElement(TYPE_TAG,getIdentifier());  super.createStructureHeader();  MP3File.getStructureFormatter().openHeadingElement(TYPE_HEADER,"");  MP3File.getStructureFormatter().addElement(TYPE_UNSYNCHRONISATION,this.isUnsynchronization());  MP3File.getStructureFormatter().addElement(TYPE_EXTENDED,this.extended);  MP3File.getStructureFormatter().addElement(TYPE_EXPERIMENTAL,this.experimental);  MP3File.getStructureFormatter().addElement(TYPE_CRCDATA,this.crc32);  MP3File.getStructureFormatter().addElement(TYPE_PADDINGSIZE,this.paddingSize);  MP3File.getStructureFormatter().closeHeadingElement(TYPE_HEADER);  super.createStructureBody();  MP3File.getStructureFormatter().closeHeadingElement(TYPE_TAG);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AttributeConsumingServiceType createAttributeConsumingServiceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AttributeConsumingServiceTypeImpl();}  }
class C{  public static boolean showSoftKeyBoard(Context context,View view){  InputMethodManager mgr=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  return mgr.showSoftInput(view,InputMethodManager.SHOW_FORCED);}  }
class C{  private AbstractManagedObjectDefinition<? extends C,? extends S> resolveManagedObjectDefinitionAux(AbstractManagedObjectDefinition<? extends C,? extends S> d,DefinitionResolver r){  if (!r.matches(d)) {    return null;  }  for (  AbstractManagedObjectDefinition<? extends C,? extends S> child : d.getChildren()) {    AbstractManagedObjectDefinition<? extends C,? extends S> rd=resolveManagedObjectDefinitionAux(child,r);    if (rd != null) {      return rd;    }  }  return d;}  }
class C{  public void onLoginFailure(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response) throws AuthenticationException {}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider() throws Exception {  for (  Entry<Provider,List<String>> e : digestAlgs.entrySet()) {    for (    String algorithm : e.getValue()) {      MessageDigest md=MessageDigest.getInstance(algorithm,e.getKey().getName());      assertNotNull(md);    }  }  try {    MessageDigest.getInstance(null,new TestProvider());    fail("expected NullPointerException");  } catch (  NullPointerException expected) {  }  try {    MessageDigest.getInstance("UnknownDigest",new TestProvider());    fail("expected NoSuchAlgorithmException");  } catch (  NoSuchAlgorithmException expected) {  }  try {    MessageDigest.getInstance("AnyDigest",(Provider)null);    fail("expected IllegalArgumentException");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference newEntRefNode;  NodeList newEntRefList;  Node child;  String name;  String value;  doc=(Document)load("staff",true);  newEntRefNode=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",newEntRefNode);  newEntRefList=newEntRefNode.getChildNodes();  assertSize("size",1,newEntRefList);  child=newEntRefNode.getFirstChild();  name=child.getNodeName();  assertEquals("name","#text",name);  value=child.getNodeValue();  assertEquals("value","Texas",value);}  }
class C{  public Set searchAllRoles(String wildcard,Map avPairs,int level) throws AMException, SSOException {  int[] objectTypes={AMObject.ROLE,AMObject.FILTERED_ROLE};  return searchObjects(objectTypes,wildcard,avPairs,level);}  }
class C{  public void testCase8(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte rBytes[]={1,2,3,4,15,26,37,41,52,63,74,15,26,37};  BigInteger aNumber=new BigInteger(aBytes);  BigInteger bNumber=new BigInteger(bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Override public void addValue(final String valueString){  final String actualValue=namesToValues.get(valueString);  if (actualValue != null) {    super.addValue(actualValue);  }}  }
class C{  public LogoutRequest createLogoutRequest(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.LOGOUT_REQUEST);  if (obj == null) {    return new LogoutRequestImpl();  } else {    return (LogoutRequest)obj;  }}  }
class C{  public void moveDot(int dot,Position.Bias dotBias){  if (dotBias == null) {    throw new IllegalArgumentException("null bias");  }  if (!component.isEnabled()) {    setDot(dot,dotBias);    return;  }  if (dot != this.dot) {    NavigationFilter filter=component.getNavigationFilter();    if (filter != null) {      filter.moveDot(getFilterBypass(),dot,dotBias);    } else {      handleMoveDot(dot,dotBias);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  EntityReference entRef;  Element entElement;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=(EntityReference)gender.getFirstChild();  assertNotNull("entRefNotNull",entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);{    boolean success=false;    try {      entElement.setAttribute("newAttr","newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public MBeanOperationInfo(String name,String description,MBeanParameterInfo[] signature,String type,int impact,Descriptor descriptor){  super(name,description,descriptor);  if (signature == null || signature.length == 0)   signature=MBeanParameterInfo.NO_PARAMS; else   signature=signature.clone();  this.signature=signature;  this.type=type;  this.impact=impact;  this.arrayGettersSafe=MBeanInfo.arrayGettersSafe(this.getClass(),MBeanOperationInfo.class);}  }
class C{  public static List<String> findChildrensList(final File dir,final boolean searchDirs){  List<String> files=new ArrayList<>();  for (  String subFiles : dir.list()) {    File file=new File(dir + "/" + subFiles);    if ((searchDirs && file.isDirectory()) || (!searchDirs && !file.isDirectory())) {      files.add(file.getName());    }  }  return files;}  }
class C{  public boolean isCancelled(){  return cancel;}  }
class C{  private void addFiltersToRuleNode(long ruleId,RuleNode rootEvent){  HashMap<Long,Long> parentIds=new HashMap<Long,Long>();  HashMap<Long,ModelRuleFilter> filtersUnlinked=new HashMap<Long,ModelRuleFilter>();  Cursor cursorRuleFilters=ruleFilterDbAdapter.fetchAll(ruleId,null,null,null,null,null);  while (cursorRuleFilters.moveToNext()) {    long attributeID=getLongFromCursor(cursorRuleFilters,RuleFilterDbAdapter.KEY_EVENTATTRIBUTEID);    ModelAttribute attribute;    if (specificAttributes.containsKey(attributeID)) {      attribute=specificAttributes.get(attributeID);    } else {      attribute=globalAttributes.get(attributeID);    }    String filterInputFromUser=getStringFromCursor(cursorRuleFilters,RuleFilterDbAdapter.KEY_RULEFILTERDATA);    Log.d("addFiltersToRuleNode","trying to construct a " + attribute.getDatatype() + " dataType with: "+ filterInputFromUser);    long filterID=getLongFromCursor(cursorRuleFilters,RuleFilterDbAdapter.KEY_DATAFILTERID);    String filterName=dataFilterNames.get(filterID);    Cursor cursorFilter=dataFilterDbAdapter.fetch(filterID);    long compareWithDataTypeId=getLongFromCursor(cursorFilter,DataFilterDbAdapter.KEY_COMPAREWITHDATATYPEID);    DataType filterData=getDataType(compareWithDataTypeId,filterInputFromUser);    Log.d("addFiltersToRuleNode","The object constructed is : " + filterData);    ModelFilter modelFilter=new ModelFilter(filterName,"",R.drawable.icon_filter_unknown,filterID,attribute);    ModelRuleFilter filter=new ModelRuleFilter(getLongFromCursor(cursorRuleFilters,RuleFilterDbAdapter.KEY_RULEFILTERID),modelFilter,filterData);    long filterParentId=getLongFromCursor(cursorRuleFilters,RuleFilterDbAdapter.KEY_PARENTRULEFILTERID);    parentIds.put(filter.getDatabaseId(),filterParentId);    filtersUnlinked.put(filter.getDatabaseId(),filter);    cursorFilter.close();  }  cursorRuleFilters.close();  HashMap<Long,RuleNode> filtersLinked=new HashMap<Long,RuleNode>();  Iterator<Long> it=filtersUnlinked.keySet().iterator();  while (it.hasNext()) {    Long filterId=it.next();    ModelRuleFilter filter=filtersUnlinked.get(filterId);    Long parentFilterId=parentIds.get(filterId);    if (parentFilterId < 1) {      RuleNode node=rootEvent.addChild(filter);      filtersLinked.put(filterId,node);      it.remove();    } else {      RuleNode nodeParent=filtersLinked.get(parentFilterId);      if (nodeParent != null) {        RuleNode nodeChild=nodeParent.addChild(filter);        filtersLinked.put(filterId,nodeChild);        it.remove();      }    }  }}  }
class C{  public StringBuilder reverse(){  reverse0();  return this;}  }
class C{  public String toString(){  return new String("DirectColorModel: rmask=" + Integer.toHexString(red_mask) + " gmask="+ Integer.toHexString(green_mask)+ " bmask="+ Integer.toHexString(blue_mask)+ " amask="+ Integer.toHexString(alpha_mask));}  }
class C{  public void startDocument() throws SAXException {  if (DEBUG)   System.out.println("startDocument");  int doc=addNode(DTM.DOCUMENT_NODE,m_expandedNameTable.getExpandedTypeID(DTM.DOCUMENT_NODE),DTM.NULL,DTM.NULL,0,true);  m_parents.push(doc);  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  public ImageTypeSpecifier(RenderedImage image){  if (image == null) {    throw new IllegalArgumentException("image == null!");  }  colorModel=image.getColorModel();  sampleModel=image.getSampleModel();}  }
class C{  public Matcher usePattern(Pattern newPattern){  if (newPattern == null)   throw new IllegalArgumentException("Pattern cannot be null");  parentPattern=newPattern;  int parentGroupCount=Math.max(newPattern.capturingGroupCount,10);  groups=new int[parentGroupCount * 2];  locals=new int[newPattern.localCount];  for (int i=0; i < groups.length; i++)   groups[i]=-1;  for (int i=0; i < locals.length; i++)   locals[i]=-1;  return this;}  }
class C{  public void init(ServletConfig config) throws ServletException {  String localServerProtocol=SystemConfigurationUtil.getProperty(SAMLConstants.SERVER_PROTOCOL);  String localServer=SystemConfigurationUtil.getProperty(SAMLConstants.SERVER_HOST);  String localServerPort=SystemConfigurationUtil.getProperty(SAMLConstants.SERVER_PORT);  localSAMLServiceID=localServerProtocol + "://" + localServer+ ":"+ localServerPort;  super.init(config);  try {    msgFactory=MessageFactory.newInstance();  } catch (  SOAPException ex) {    String message=SAMLUtils.bundle.getString("missingSoapMessageFactory");    SAMLUtils.debug.error(message,ex);    String[] data={SAMLUtils.bundle.getString("missingSoapMessageFactory")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.SOAP_MESSAGE_FACTORY_ERROR,data);    throw new ServletException(ex.getMessage());  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeObject(SerializationTester.test(flavorMap) ? flavorMap : null);  DnDEventMulticaster.save(s,dragSourceListenerK,listener);  DnDEventMulticaster.save(s,dragSourceMotionListenerK,motionListener);  s.writeObject(null);}  }
class C{  public boolean retainAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String encryptionOID,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  doAddSigner(key,subjectKeyID,encryptionOID,digestOID,signedAttrGen,unsignedAttrGen,null);}  }
class C{  public Builder addPart(Part part){  if (part == null)   throw new NullPointerException("part == null");  parts.add(part);  return this;}  }
class C{  private void notifySwipeDirections(SwipeOpenViewHolder holder,boolean isRtl,float dX,float dY){  View swipeView=holder.getSwipeView();  if (ViewCompat.getTranslationX(swipeView) <= 0 && dX > 0) {    if (isRtl) {      holder.notifyEndOpen();    } else {      holder.notifyStartOpen();    }  } else   if (ViewCompat.getTranslationX(swipeView) >= 0 && dX < 0) {    if (isRtl) {      holder.notifyStartOpen();    } else {      holder.notifyEndOpen();    }  } else   if (ViewCompat.getTranslationY(swipeView) >= 0 && dY < 0) {    holder.notifyEndOpen();  } else   if (ViewCompat.getTranslationY(swipeView) <= 0 && dY > 0) {    holder.notifyStartOpen();  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAVED_STORY\"";  db.execSQL(sql);}  }
class C{  protected SecureRandom(SecureRandomSpi secureRandomSpi,Provider provider){  this(secureRandomSpi,provider,null);}  }
class C{  public String encode(String pString){  return soundex(pString);}  }
class C{  public void addRotationPolicy(RotationPolicy<?> policy){  this.rotationPolicies.add(policy);  if (policy instanceof SizeBasedRotationPolicy) {    SizeBasedRotationPolicy sizePolicy=(SizeBasedRotationPolicy)policy;    if (sizeLimit == 0 || sizeLimit > sizePolicy.currentConfig.getFileSizeLimit()) {      sizeLimit=sizePolicy.currentConfig.getFileSizeLimit();    }    sizePolicy.currentConfig.addSizeLimitChangeListener(this);  }}  }
class C{  public SerialStruct(SQLData in,Map<String,Class<?>> map) throws SerialException {  try {    SQLTypeName=in.getSQLTypeName();    Vector<Object> tmp=new Vector<>();    in.writeSQL(new SQLOutputImpl(tmp,map));    attribs=tmp.toArray();  } catch (  SQLException e) {    throw new SerialException(e.getMessage());  }}  }
class C{  public void testCFII_ServerStartLater_NonBlock() throws Exception {  ensureServerClosed();  this.channel1.configureBlocking(false);  statusNotConnected_NotPending();  assertFalse(this.channel1.connect(localAddr1));  statusNotConnected_Pending();  ensureServerOpen();  try {    assertFalse(this.channel1.finishConnect());    statusNotConnected_Pending();    this.channel1.close();  } catch (  ConnectException e) {  }}  }
class C{  private void addField(MappedClass clazz,String[] parts){  String newName=parts[1];  String original=parts[3];  String desc=fixDesc(parts[0]);  MappedMember mm=new MappedMember(clazz,null,-1,desc,original);  mm.setNewName(newName);  clazz.addField(mm);}  }
class C{  public PdfCanvas resetStrokeColorCmyk(){  return setStrokeColorCmyk(0,0,0,1);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj instanceof ECFieldFp) {    return (p.equals(((ECFieldFp)obj).p));  }  return false;}  }
class C{  @Override public String toString(){  return "FastDateFormat[" + printer.getPattern() + ","+ printer.getLocale()+ ","+ printer.getTimeZone().getID()+ "]";}  }
class C{  public final boolean isAnyModifiers(){  return _anyModifiers;}  }
class C{  private WebappClassLoaderBase createClassLoader() throws Exception {  Class<?> clazz=Class.forName(loaderClass);  WebappClassLoaderBase classLoader=null;  if (parentClassLoader == null) {    parentClassLoader=context.getParentClassLoader();  }  Class<?>[] argTypes={ClassLoader.class};  Object[] args={parentClassLoader};  Constructor<?> constr=clazz.getConstructor(argTypes);  classLoader=(WebappClassLoaderBase)constr.newInstance(args);  return classLoader;}  }
class C{  public final int bytesConsumed(){  return bytesConsumed;}  }
class C{  public static boolean isSigningOn(){  return signingOn;}  }
class C{  @Inject public ClientAuthenticator(ClientRegistrationStore clientRegistrationStore,OAuth2AuditLogger auditLogger,RealmNormaliser realmNormaliser,ClientCredentialsReader clientCredentialsReader,ClientAuthenticationFailureFactory failureFactory){  this.clientRegistrationStore=clientRegistrationStore;  this.auditLogger=auditLogger;  this.realmNormaliser=realmNormaliser;  this.clientCredentialsReader=clientCredentialsReader;  this.failureFactory=failureFactory;}  }
class C{  public Service(Provider provider,String type,String algorithm,String className,List<String> aliases,Map<String,String> attributes){  if ((provider == null) || (type == null) || (algorithm == null)|| (className == null)) {    throw new NullPointerException();  }  this.provider=provider;  this.type=getEngineName(type);  this.algorithm=algorithm;  this.className=className;  if (aliases == null) {    this.aliases=Collections.<String>emptyList();  } else {    this.aliases=new ArrayList<String>(aliases);  }  if (attributes == null) {    this.attributes=Collections.<UString,String>emptyMap();  } else {    this.attributes=new HashMap<UString,String>();    for (    Map.Entry<String,String> entry : attributes.entrySet()) {      this.attributes.put(new UString(entry.getKey()),entry.getValue());    }  }}  }
class C{  public TaskClientException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  public void removeStyle(String nm){  StyledDocument doc=getStyledDocument();  doc.removeStyle(nm);}  }
class C{  public static void main(String args[]) throws Exception {  if (args.length != 1) {    System.out.println("Usage: java Base64ToHex <Base64_encoded_id>");    return;  }  String inputString=args[0];  Base64 decoder=new Base64();  byte[] byteArray=decoder.decode(inputString);  int readBytes=byteArray.length;  StringBuffer hexData=new StringBuffer();  int onebyte;  for (int i=0; i < readBytes; i++) {    onebyte=((0x000000ff & byteArray[i]) | 0xffffff00);    hexData.append(Integer.toHexString(onebyte).substring(6));  }  System.out.println(hexData.toString());}  }
class C{  private String findPropertiesFile(final String directory){  final File f=new File(directory,DEFAULT_OPENDJ_PROPERTIES_FILE_NAME + DEFAULT_OPENDJ_PROPERTIES_FILE_EXTENSION);  if (f.exists() && f.canRead()) {    return f.getAbsolutePath();  }  return null;}  }
class C{  public CompareRequestProtocolOp(ByteString dn,String attributeType,ByteString assertionValue){  this.dn=dn;  this.attributeType=attributeType;  this.assertionValue=assertionValue;}  }
class C{  public SQLDataException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_right.num(xctxt);}  }
class C{  private static synchronized void initCerts(){  if (CA1 != null) {    return;  }  try {    CA1=TestKeyStore.getClient().getRootCertificate("RSA");    CA2=TestKeyStore.getClientCA2().getRootCertificate("RSA");    PRIVATE=TestKeyStore.getServer().getPrivateKey("RSA","RSA");    CHAIN=(X509Certificate[])PRIVATE.getCertificateChain();    CA3_WITH_CA1_SUBJECT=new TestKeyStore.Builder().aliasPrefix("unused").subject(CA1.getSubjectX500Principal()).ca(true).build().getRootCertificate("RSA");    ALIAS_SYSTEM_CA1=alias(false,CA1,0);    ALIAS_SYSTEM_CA2=alias(false,CA2,0);    ALIAS_USER_CA1=alias(true,CA1,0);    ALIAS_USER_CA2=alias(true,CA2,0);    ALIAS_SYSTEM_CHAIN0=alias(false,getChain()[0],0);    ALIAS_SYSTEM_CHAIN1=alias(false,getChain()[1],0);    ALIAS_SYSTEM_CHAIN2=alias(false,getChain()[2],0);    ALIAS_USER_CHAIN0=alias(true,getChain()[0],0);    ALIAS_USER_CHAIN1=alias(true,getChain()[1],0);    ALIAS_USER_CHAIN2=alias(true,getChain()[2],0);    ALIAS_SYSTEM_CA3=alias(false,CA3_WITH_CA1_SUBJECT,0);    ALIAS_SYSTEM_CA3_COLLISION=alias(false,CA3_WITH_CA1_SUBJECT,1);    ALIAS_USER_CA3=alias(true,CA3_WITH_CA1_SUBJECT,0);    ALIAS_USER_CA3_COLLISION=alias(true,CA3_WITH_CA1_SUBJECT,1);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private int computeFields(int fieldMask,int tzMask){  int zoneOffset=0;  TimeZone tz=getZone();  if (zoneOffsets == null) {    zoneOffsets=new int[2];  }  if (tzMask != (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) {    if (tz instanceof ZoneInfo) {      zoneOffset=((ZoneInfo)tz).getOffsets(time,zoneOffsets);    } else {      zoneOffset=tz.getOffset(time);      zoneOffsets[0]=tz.getRawOffset();      zoneOffsets[1]=zoneOffset - zoneOffsets[0];    }  }  if (tzMask != 0) {    if (isFieldSet(tzMask,ZONE_OFFSET)) {      zoneOffsets[0]=internalGet(ZONE_OFFSET);    }    if (isFieldSet(tzMask,DST_OFFSET)) {      zoneOffsets[1]=internalGet(DST_OFFSET);    }    zoneOffset=zoneOffsets[0] + zoneOffsets[1];  }  long fixedDate=zoneOffset / ONE_DAY;  int timeOfDay=zoneOffset % (int)ONE_DAY;  fixedDate+=time / ONE_DAY;  timeOfDay+=(int)(time % ONE_DAY);  if (timeOfDay >= ONE_DAY) {    timeOfDay-=ONE_DAY;    ++fixedDate;  } else {    while (timeOfDay < 0) {      timeOfDay+=ONE_DAY;      --fixedDate;    }  }  fixedDate+=EPOCH_OFFSET;  if (fixedDate != cachedFixedDate || fixedDate < 0) {    jcal.getCalendarDateFromFixedDate(jdate,fixedDate);    cachedFixedDate=fixedDate;  }  int era=getEraIndex(jdate);  int year=jdate.getYear();  internalSet(ERA,era);  internalSet(YEAR,year);  int mask=fieldMask | (ERA_MASK | YEAR_MASK);  int month=jdate.getMonth() - 1;  int dayOfMonth=jdate.getDayOfMonth();  if ((fieldMask & (MONTH_MASK | DAY_OF_MONTH_MASK | DAY_OF_WEEK_MASK)) != 0) {    internalSet(MONTH,month);    internalSet(DAY_OF_MONTH,dayOfMonth);    internalSet(DAY_OF_WEEK,jdate.getDayOfWeek());    mask|=MONTH_MASK | DAY_OF_MONTH_MASK | DAY_OF_WEEK_MASK;  }  if ((fieldMask & (HOUR_OF_DAY_MASK | AM_PM_MASK | HOUR_MASK| MINUTE_MASK| SECOND_MASK| MILLISECOND_MASK)) != 0) {    if (timeOfDay != 0) {      int hours=timeOfDay / ONE_HOUR;      internalSet(HOUR_OF_DAY,hours);      internalSet(AM_PM,hours / 12);      internalSet(HOUR,hours % 12);      int r=timeOfDay % ONE_HOUR;      internalSet(MINUTE,r / ONE_MINUTE);      r%=ONE_MINUTE;      internalSet(SECOND,r / ONE_SECOND);      internalSet(MILLISECOND,r % ONE_SECOND);    } else {      internalSet(HOUR_OF_DAY,0);      internalSet(AM_PM,AM);      internalSet(HOUR,0);      internalSet(MINUTE,0);      internalSet(SECOND,0);      internalSet(MILLISECOND,0);    }    mask|=(HOUR_OF_DAY_MASK | AM_PM_MASK | HOUR_MASK| MINUTE_MASK| SECOND_MASK| MILLISECOND_MASK);  }  if ((fieldMask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) != 0) {    internalSet(ZONE_OFFSET,zoneOffsets[0]);    internalSet(DST_OFFSET,zoneOffsets[1]);    mask|=(ZONE_OFFSET_MASK | DST_OFFSET_MASK);  }  if ((fieldMask & (DAY_OF_YEAR_MASK | WEEK_OF_YEAR_MASK | WEEK_OF_MONTH_MASK| DAY_OF_WEEK_IN_MONTH_MASK)) != 0) {    int normalizedYear=jdate.getNormalizedYear();    boolean transitionYear=isTransitionYear(jdate.getNormalizedYear());    int dayOfYear;    long fixedDateJan1;    if (transitionYear) {      fixedDateJan1=getFixedDateJan1(jdate,fixedDate);      dayOfYear=(int)(fixedDate - fixedDateJan1) + 1;    } else     if (normalizedYear == MIN_VALUES[YEAR]) {      CalendarDate dx=jcal.getCalendarDate(Long.MIN_VALUE,getZone());      fixedDateJan1=jcal.getFixedDate(dx);      dayOfYear=(int)(fixedDate - fixedDateJan1) + 1;    } else {      dayOfYear=(int)jcal.getDayOfYear(jdate);      fixedDateJan1=fixedDate - dayOfYear + 1;    }    long fixedDateMonth1=transitionYear ? getFixedDateMonth1(jdate,fixedDate) : fixedDate - dayOfMonth + 1;    internalSet(DAY_OF_YEAR,dayOfYear);    internalSet(DAY_OF_WEEK_IN_MONTH,(dayOfMonth - 1) / 7 + 1);    int weekOfYear=getWeekNumber(fixedDateJan1,fixedDate);    if (weekOfYear == 0) {      long fixedDec31=fixedDateJan1 - 1;      long prevJan1;      LocalGregorianCalendar.Date d=getCalendarDate(fixedDec31);      if (!(transitionYear || isTransitionYear(d.getNormalizedYear()))) {        prevJan1=fixedDateJan1 - 365;        if (d.isLeapYear()) {          --prevJan1;        }      } else       if (transitionYear) {        if (jdate.getYear() == 1) {          if (era > HEISEI) {            CalendarDate pd=eras[era - 1].getSinceDate();            if (normalizedYear == pd.getYear()) {              d.setMonth(pd.getMonth()).setDayOfMonth(pd.getDayOfMonth());            }          } else {            d.setMonth(LocalGregorianCalendar.JANUARY).setDayOfMonth(1);          }          jcal.normalize(d);          prevJan1=jcal.getFixedDate(d);        } else {          prevJan1=fixedDateJan1 - 365;          if (d.isLeapYear()) {            --prevJan1;          }        }      } else {        CalendarDate cd=eras[getEraIndex(jdate)].getSinceDate();        d.setMonth(cd.getMonth()).setDayOfMonth(cd.getDayOfMonth());        jcal.normalize(d);        prevJan1=jcal.getFixedDate(d);      }      weekOfYear=getWeekNumber(prevJan1,fixedDec31);    } else {      if (!transitionYear) {        if (weekOfYear >= 52) {          long nextJan1=fixedDateJan1 + 365;          if (jdate.isLeapYear()) {            nextJan1++;          }          long nextJan1st=LocalGregorianCalendar.getDayOfWeekDateOnOrBefore(nextJan1 + 6,getFirstDayOfWeek());          int ndays=(int)(nextJan1st - nextJan1);          if (ndays >= getMinimalDaysInFirstWeek() && fixedDate >= (nextJan1st - 7)) {            weekOfYear=1;          }        }      } else {        LocalGregorianCalendar.Date d=(LocalGregorianCalendar.Date)jdate.clone();        long nextJan1;        if (jdate.getYear() == 1) {          d.addYear(+1);          d.setMonth(LocalGregorianCalendar.JANUARY).setDayOfMonth(1);          nextJan1=jcal.getFixedDate(d);        } else {          int nextEraIndex=getEraIndex(d) + 1;          CalendarDate cd=eras[nextEraIndex].getSinceDate();          d.setEra(eras[nextEraIndex]);          d.setDate(1,cd.getMonth(),cd.getDayOfMonth());          jcal.normalize(d);          nextJan1=jcal.getFixedDate(d);        }        long nextJan1st=LocalGregorianCalendar.getDayOfWeekDateOnOrBefore(nextJan1 + 6,getFirstDayOfWeek());        int ndays=(int)(nextJan1st - nextJan1);        if (ndays >= getMinimalDaysInFirstWeek() && fixedDate >= (nextJan1st - 7)) {          weekOfYear=1;        }      }    }    internalSet(WEEK_OF_YEAR,weekOfYear);    internalSet(WEEK_OF_MONTH,getWeekNumber(fixedDateMonth1,fixedDate));    mask|=(DAY_OF_YEAR_MASK | WEEK_OF_YEAR_MASK | WEEK_OF_MONTH_MASK| DAY_OF_WEEK_IN_MONTH_MASK);  }  return mask;}  }
class C{  public static void appendLogsContents(StringBuilder logsContents){  appendMessages(logsContents,TestCaseUtils.ACCESS_TEXT_WRITER,"Access Log Messages:");  appendMessages(logsContents,TestCaseUtils.ERROR_TEXT_WRITER,"Error Log Messages:");  appendMessages(logsContents,TestCaseUtils.DEBUG_TEXT_WRITER,"Debug Log Messages:");  appendStreamContent(logsContents,TestCaseUtils.getSystemOutContents(),"System.out");  appendStreamContent(logsContents,TestCaseUtils.getSystemErrContents(),"System.err");}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {  out.write(cbuf,off,len);}  }
class C{  public static PdfAction createLaunch(PdfFileSpec fileSpec,boolean newWindow){  return createLaunch(fileSpec,null,newWindow);}  }
class C{  public static ViewItemGroup buildUIForFilter(final ModelFilter modelFilter,final DataType initData,Activity activity){  ViewItemGroup viewItemGroup=new ViewItemGroup(activity);  ViewItemFactory viewItemFactory=ViewItemFactory.instance();  int uiID=0;  long filterDbID=modelFilter.getDatabaseId();  if (filterDbID == AllFilterID.PHONENUMBER_EQUALS) {    TextView tvInstructions=new TextView(activity);    tvInstructions.setText(R.string.phone_num_eq_filter_inst);    viewItemGroup.addView(tvInstructions);    viewItemGroup.addViewItem(viewItemFactory.create(uiID,viewItemFactory.PHONE_NUMBER_DATATYPE_DB_ID,activity),initData);  } else   if (filterDbID == AllFilterID.PHONENUMBER_NOT_EQUALS) {    TextView tvInstructions=new TextView(activity);    tvInstructions.setText(R.string.phone_num_not_eq_filter_inst);    viewItemGroup.addView(tvInstructions);    viewItemGroup.addViewItem(viewItemFactory.create(uiID,viewItemFactory.PHONE_NUMBER_DATATYPE_DB_ID,activity),initData);  } else   if (filterDbID == AllFilterID.TEXT_EQUALS) {    TextView tvInstructions=new TextView(activity);    tvInstructions.setText(R.string.text_eq_filter_inst);    viewItemGroup.addView(tvInstructions);    viewItemGroup.addViewItem(viewItemFactory.create(uiID,viewItemFactory.TEXT_DATATYPE_DB_ID,activity),initData);  } else   if (filterDbID == AllFilterID.TEXT_CONTAINS) {    TextView tvInstructions=new TextView(activity);    tvInstructions.setText(R.string.text_cont_filter_inst);    viewItemGroup.addView(tvInstructions);    viewItemGroup.addViewItem(viewItemFactory.create(uiID,viewItemFactory.TEXT_DATATYPE_DB_ID,activity),initData);  } else   if (filterDbID == AllFilterID.AREA_AWAY || filterDbID == AllFilterID.AREA_NEAR) {    viewItemGroup.addViewItem(viewItemFactory.create(uiID,viewItemFactory.AREA_DATATYPE_DB_ID,activity),initData);  } else   if (filterDbID == AllFilterID.DATE_BEFORE_EVERYDAY || filterDbID == AllFilterID.DATE_IS_EVERYDAY || filterDbID == AllFilterID.DATE_IS_NOT_EVERYDAY || filterDbID == AllFilterID.DATE_AFTER_EVERYDAY) {    viewItemGroup.addViewItem(viewItemFactory.create(uiID,viewItemFactory.DATE_DATATYPE_DB_ID,activity),initData);  } else   if (filterDbID == AllFilterID.DATE_DURING_EVERYDAY || filterDbID == AllFilterID.DATE_EXCEPT_EVERYDAY || filterDbID == AllFilterID.TIMEPERIOD_DURING_EVERYDAY || filterDbID == AllFilterID.TIMEPERIOD_EXCEPT_EVERYDAY) {    viewItemGroup.addViewItem(viewItemFactory.create(uiID,viewItemFactory.TIME_PERIOD_DATATYPE_DB_ID,activity),initData);  } else {    throw new IllegalArgumentException("Unknown filter ID: " + filterDbID);  }  return viewItemGroup;}  }
class C{  public void assignPolicies(String serviceName,Set policyDNs) throws AMException, SSOException {  throw new UnsupportedOperationException();}  }
class C{  public void testImportNode2() throws Throwable {  Document doc;  Document docImported;  Element element;  Attr attr;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  NodeList addresses;  Node attrsParent;  doc=(Document)load("staffNS",builder);  docImported=(Document)load("staff",builder);  addresses=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)addresses.item(1);  attr=element.getAttributeNodeNS("http://www.nist.gov","zone");  importedAttr=docImported.importNode(attr,false);  nodeName=importedAttr.getNodeName();  nodeType=(int)importedAttr.getNodeType();  nodeValue=importedAttr.getNodeValue();  attrsParent=importedAttr.getParentNode();  assertNull("documentimportnode02_parentNull",attrsParent);  assertEquals("documentimportnode02_nodeName","emp:zone",nodeName);  assertEquals("documentimportnode02_nodeType",2,nodeType);  assertEquals("documentimportnode02_nodeValue","CANADA",nodeValue);}  }
class C{  public static void registerPersistentSearch(){  directoryServer.activePSearches.incrementAndGet();}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  private StringBuffer processString(String field){  if ((field == null) || (field.length() == 0)) {    return new StringBuffer(LogConstants.NOTAVAIL);  }  StringBuffer sbuffer=new StringBuffer();  int len=field.length();  boolean hasUniqueChar=false;  for (int i=0; i < len; i++) {    char currentCharacter=field.charAt(i);    if (currentCharacter == '"') {      sbuffer.append("\"\"");      hasUniqueChar=true;    }    if (currentCharacter == '\r') {      sbuffer.append("\\\\r");      hasUniqueChar=true;    }    if (currentCharacter == '\n') {      sbuffer.append("\\\\n");      hasUniqueChar=true;    }    if (!hasUniqueChar) {      sbuffer.append(currentCharacter);    }    hasUniqueChar=false;  }  return sbuffer;}  }
class C{  private void appendHtml(String msg){  HTMLDocument doc=(HTMLDocument)logs.getDocument();  try {    msg=filterForBugID4988885(msg);    doc.insertBeforeStart(doc.getElement(LASTID),msg);  } catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  public MalformedChunkCodingException(){  super();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  int index;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  index=(int)employeeList.getLength();  index-=1;  child=employeeList.item(((int)index));  childName=child.getNodeName();  if (equals(12,index)) {    assertEquals("lastNodeName_w_whitespace","#text",childName);  } else {    assertEqualsAutoCase("element","lastNodeName","acronym",childName);    assertEquals("index",5,index);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  Node retval;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);    try {      retval=notations.removeNamedItemNS("http://www.w3.org/1999/xhtml","alpha");      fail("throw_NO_MOD_OR_NOT_FOUND_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 7:        break;case 8:      break;default :    throw ex;}}}}  }
class C{  public UnsupportedClassVersionError(String s){  super(s);}  }
class C{  private synchronized void addTracker(String path,Object marker,FileDeleteStrategy deleteStrategy){  if (exitWhenFinished) {    throw new IllegalStateException("No new trackers can be added once exitWhenFinished() is called");  }  if (reaper == null) {    reaper=new Reaper();    reaper.start();  }  trackers.add(new Tracker(path,deleteStrategy,marker,q));}  }
class C{  @ConstructorProperties({"border","title","titleJustification","titlePosition","titleFont","titleColor"}) public TitledBorder(Border border,String title,int titleJustification,int titlePosition,Font titleFont,Color titleColor){  this.title=title;  this.border=border;  this.titleFont=titleFont;  this.titleColor=titleColor;  setTitleJustification(titleJustification);  setTitlePosition(titlePosition);  this.label=new JLabel();  this.label.setOpaque(false);  this.label.putClientProperty(BasicHTML.propertyKey,null);}  }
class C{  public static Reflect on(String name) throws ReflectException {  return on(forName(name));}  }
class C{  public SessionID(HttpServletRequest request){  String cookieValue;  if (cookieName == null) {    cookieName=SystemProperties.get("com.iplanet.am.cookie.name");  }  if (cookieName != null) {    String isForward=(String)request.getAttribute(Constants.FORWARD_PARAM);    if (debug.messageEnabled()) {      debug.message("SessionID(HttpServletRequest) : is forward = " + isForward);    }    if ((isForward != null) && isForward.equals(Constants.FORWARD_YES_VALUE)) {      String realReqSid=SessionEncodeURL.getSidFromURL(request);      if (realReqSid != null) {        encryptedString=realReqSid;      } else {        cookieValue=CookieUtils.getCookieValueFromReq(request,cookieName);        if (cookieValue != null) {          encryptedString=cookieValue;          cookieMode=Boolean.TRUE;        }      }    } else {      cookieValue=CookieUtils.getCookieValueFromReq(request,cookieName);      if (cookieValue == null) {        String realReqSid=SessionEncodeURL.getSidFromURL(request);        if (realReqSid != null) {          encryptedString=realReqSid;        }        cookieMode=Boolean.FALSE;      } else {        cookieMode=Boolean.TRUE;        encryptedString=cookieValue;      }    }  }}  }
class C{  public Cell add(Image element){  childElements.add(element);  return this;}  }
class C{  private int mapNSTokens(String pat,int startSubstring,int posOfNSSep,int posOfScan) throws javax.xml.transform.TransformerException {  String prefix="";  if ((startSubstring >= 0) && (posOfNSSep >= 0)) {    prefix=pat.substring(startSubstring,posOfNSSep);  }  String uName;  if ((null != m_namespaceContext) && !prefix.equals("*") && !prefix.equals("xmlns")) {    try {      if (prefix.length() > 0)       uName=((PrefixResolver)m_namespaceContext).getNamespaceForPrefix(prefix); else {        if (false) {          addToTokenQueue(":");          String s=pat.substring(posOfNSSep + 1,posOfScan);          if (s.length() > 0)           addToTokenQueue(s);          return -1;        } else {          uName=((PrefixResolver)m_namespaceContext).getNamespaceForPrefix(prefix);        }      }    } catch (    ClassCastException cce) {      uName=m_namespaceContext.getNamespaceForPrefix(prefix);    }  } else {    uName=prefix;  }  if ((null != uName) && (uName.length() > 0)) {    addToTokenQueue(uName);    addToTokenQueue(":");    String s=pat.substring(posOfNSSep + 1,posOfScan);    if (s.length() > 0)     addToTokenQueue(s);  } else {    m_processor.errorForDOM3(XPATHErrorResources.ER_PREFIX_MUST_RESOLVE,new String[]{prefix});  }  return -1;}  }
class C{  public final void testGetPrivate01(){  KeyPair kp=new KeyPair(null,null);  assertNull(kp.getPrivate());}  }
class C{  public boolean add(ProtocolMessage pm){  return protocolMessages.add(pm);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() - right.num());}  }
class C{  private synchronized boolean containsMapping(Object key,Object value){  int hash=Collections.secondaryHash(key);  HashtableEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashtableEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && e.key.equals(key)) {      return e.value.equals(value);    }  }  return false;}  }
class C{  private String trimPrefix(String val){  if ((val != null) && (val.startsWith(WSSEConstants.NS_X509) || val.startsWith(WSSEConstants.NS_SMS))) {    return val;  }  int pos=val.indexOf(":");  if (pos == -1) {    return val;  } else   if (pos == val.length()) {    return "";  } else {    return val.substring(pos + 1);  }}  }
class C{  public void insert_octet(byte value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_octet",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_octet(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private static byte[] procIPv6Addr(String addrStr,String expr) throws AciException {  if (addrStr.indexOf('*') > -1) {    LocalizableMessage message=WARN_ACI_SYNTAX_IPV6_WILDCARD_INVALID.get(expr);    throw new AciException(message);  }  byte[] addrBytes;  try {    addrBytes=InetAddress.getByName(addrStr).getAddress();  } catch (  UnknownHostException ex) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_IPV6_FORMAT.get(expr,ex.getMessage());    throw new AciException(message);  }  return addrBytes;}  }
class C{  public ResponseProvider removeResponseProvider(String responseProviderName){  return (ResponseProvider)providers.remove(responseProviderName);}  }
class C{  public static String stackTraceToString(Throwable t){  StringBuilder buffer=new StringBuilder();  stackTraceToString(buffer,t);  return buffer.toString();}  }
class C{  @Override public boolean isClosed(){  return closed;}  }
class C{  static void importPreferences(InputStream is) throws IOException, InvalidPreferencesFormatException {  try {    Document doc=loadPrefsDoc(is);    String xmlVersion=doc.getDocumentElement().getAttribute("EXTERNAL_XML_VERSION");    if (xmlVersion.compareTo(EXTERNAL_XML_VERSION) > 0)     throw new InvalidPreferencesFormatException("Exported preferences file format version " + xmlVersion + " is not supported. This java installation can read"+ " versions "+ EXTERNAL_XML_VERSION+ " or older. You may need"+ " to install a newer version of JDK.");    Element xmlRoot=(Element)doc.getDocumentElement().getChildNodes().item(0);    Preferences prefsRoot=(xmlRoot.getAttribute("type").equals("user") ? Preferences.userRoot() : Preferences.systemRoot());    ImportSubtree(prefsRoot,xmlRoot);  } catch (  SAXException e) {    throw new InvalidPreferencesFormatException(e);  }}  }
class C{  public static StringArgument equivalentCommandFileArgument(final LocalizableMessage description) throws ArgumentException {  return StringArgument.builder(OPTION_LONG_EQUIVALENT_COMMAND_FILE_PATH).description(description).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildArgument();}  }
class C{  public TypeDecompilationResults(@Nullable final List<LineNumberPosition> lineNumberPositions){  _lineNumberPositions=lineNumberPositions;}  }
class C{  final void doubleAccumulate(double x,DoubleBinaryOperator fn,boolean wasUncontended){  int h;  if ((h=getProbe()) == 0) {    ThreadLocalRandom.current();    h=getProbe();    wasUncontended=true;  }  boolean collide=false;  for (; ; ) {    Cell[] as;    Cell a;    int n;    long v;    if ((as=cells) != null && (n=as.length) > 0) {      if ((a=as[(n - 1) & h]) == null) {        if (cellsBusy == 0) {          Cell r=new Cell(Double.doubleToRawLongBits(x));          if (cellsBusy == 0 && casCellsBusy()) {            boolean created=false;            try {              Cell[] rs;              int m, j;              if ((rs=cells) != null && (m=rs.length) > 0 && rs[j=(m - 1) & h] == null) {                rs[j]=r;                created=true;              }            }  finally {              cellsBusy=0;            }            if (created)             break;            continue;          }        }        collide=false;      } else       if (!wasUncontended)       wasUncontended=true; else       if (a.cas(v=a.value,((fn == null) ? Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x) : Double.doubleToRawLongBits(fn.applyAsDouble(Double.longBitsToDouble(v),x)))))       break; else       if (n >= NCPU || cells != as)       collide=false; else       if (!collide)       collide=true; else       if (cellsBusy == 0 && casCellsBusy()) {        try {          if (cells == as) {            Cell[] rs=new Cell[n << 1];            for (int i=0; i < n; ++i)             rs[i]=as[i];            cells=rs;          }        }  finally {          cellsBusy=0;        }        collide=false;        continue;      }      h=advanceProbe(h);    } else     if (cellsBusy == 0 && cells == as && casCellsBusy()) {      boolean init=false;      try {        if (cells == as) {          Cell[] rs=new Cell[2];          rs[h & 1]=new Cell(Double.doubleToRawLongBits(x));          cells=rs;          init=true;        }      }  finally {        cellsBusy=0;      }      if (init)       break;    } else     if (casBase(v=base,((fn == null) ? Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x) : Double.doubleToRawLongBits(fn.applyAsDouble(Double.longBitsToDouble(v),x)))))     break;  }}  }
class C{  public Node.Nodes parseTagFileDirectives(String inFileName,Jar jar) throws JasperException, IOException {  boolean isTagFileSave=isTagFile;  boolean directiveOnlySave=directiveOnly;  isTagFile=true;  directiveOnly=true;  Node.Nodes page=doParse(inFileName,null,jar);  directiveOnly=directiveOnlySave;  isTagFile=isTagFileSave;  return page;}  }
class C{  @Override public MapboxDirections build() throws ServicesException {  validateAccessToken(accessToken);  geometry=DirectionsCriteria.GEOMETRY_POLYLINE;  return new MapboxDirections(this);}  }
class C{  public void clear(){  map.clear();}  }
class C{  public SessionDescriptionImpl(){}  }
class C{  public ResultHandler<Token,CoreTokenException> create(Token token) throws CoreTokenException {  applyBlobStrategy(token);  debug("Create: queued {0} Token {1}\n{2}",token.getType(),token.getTokenId(),token);  final ResultHandler<Token,CoreTokenException> createHandler=handlerFactory.getCreateHandler();  dispatcher.create(token,createHandler);  return createHandler;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node child;  NodeList employeeIdList;  Node employeeNode;  Node textNode;  boolean state;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  child=elementList.item(1);  employeeIdList=child.getChildNodes();  employeeNode=employeeIdList.item(1);  textNode=employeeNode.getFirstChild();  state=textNode.hasChildNodes();  assertFalse("nodeHasChildFalseAssert1",state);}  }
class C{  public DTMAxisIterator reset(){  if (_isConstant) {    _currentNode=_startNode;    return resetPosition();  } else {    final boolean temp=_isRestartable;    _isRestartable=true;    setStartNode(_startNode);    _isRestartable=temp;  }  return this;}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  static void putEntityConfig(String realm,String entityId,EntityConfigElement config){  String cacheKey=buildCacheKey(realm,entityId);  if (config != null) {    if (debug.messageEnabled()) {      debug.message("SAML2MetaCache.putEntityConfig: cacheKey = " + cacheKey);    }    configCache.put(cacheKey,config);  } else {    if (debug.messageEnabled()) {      debug.message("SAML2MetaCache.putEntityConfig: delete cacheKey = " + cacheKey);    }    configCache.remove(cacheKey);  }}  }
class C{  public void step3(Map<String,String> fileNameToPackageName,Map<String,List<FunDef>> fileNameToFunctions) throws SyntaxException {  for (  STypeDef sTypeDef : typeDefSet) {    if (sTypeDef instanceof SClassDef) {      List<STypeDef> circularRecorder=new ArrayList<>();      SClassDef parent=((SClassDef)sTypeDef).parent();      while (parent != null) {        circularRecorder.add(parent);        if (parent.equals(sTypeDef)) {          err.SyntaxException("circular inheritance " + circularRecorder,LineCol.SYNTHETIC);          return;        }        parent=parent.parent();      }      circularRecorder.clear();    } else     if (sTypeDef instanceof SInterfaceDef) {      SInterfaceDef i=(SInterfaceDef)sTypeDef;      checkInterfaceCircularInheritance(i,i.superInterfaces(),new ArrayList<>());    } else {      throw new LtBug("wrong STypeDefType " + sTypeDef.getClass());    }  }  for (  STypeDef sTypeDef : typeDefSet) {    checkOverrideAllMethods(sTypeDef);  }  for (  String fileName : mapOfStatements.keySet()) {    List<Import> imports=fileNameToImport.get(fileName);    String pkg=fileNameToPackageName.get(fileName);    List<FunDef> functionDefs=fileNameToFunctions.get(fileName);    for (    FunDef fun : functionDefs) {      STypeDef type=getTypeWithAccess(fun.superType,imports);      if (!(type instanceof SClassDef || type instanceof SInterfaceDef)) {        err.SyntaxException("function super type should be functional interfaces or functional abstract classes",fun.superType.line_col());        return;      }      SConstructorDef[] zeroParamConstructor=new SConstructorDef[1];      SMethodDef[] methodToOverride=new SMethodDef[1];      if (!getMethodForLambda(type,zeroParamConstructor,methodToOverride)) {        err.SyntaxException("function super type should be functional interfaces or functional abstract classes",fun.superType.line_col());        return;      }      SClassDef sClassDef=(SClassDef)types.get(pkg + fun.name);      parseAnnos(fun.annos,sClassDef,imports,ElementType.TYPE,Arrays.asList(ElementType.METHOD,ElementType.CONSTRUCTOR));      if (zeroParamConstructor[0] == null) {        sClassDef.setParent(getObject_Class());        assert type instanceof SInterfaceDef;        sClassDef.superInterfaces().add((SInterfaceDef)type);      } else {        sClassDef.setParent((SClassDef)zeroParamConstructor[0].declaringType());      }      SConstructorDef cons=new SConstructorDef(LineCol.SYNTHETIC);      parseAnnos(fun.annos,cons,imports,ElementType.CONSTRUCTOR,Arrays.asList(ElementType.TYPE,ElementType.METHOD));      cons.setDeclaringType(sClassDef);      sClassDef.constructors().add(cons);      if (zeroParamConstructor[0] == null) {        zeroParamConstructor[0]=getObject_Class().constructors().get(0);      }      cons.statements().add(new Ins.InvokeSpecial(new Ins.This(sClassDef),zeroParamConstructor[0],LineCol.SYNTHETIC));      cons.modifiers().add(SModifier.PUBLIC);      SMethodDef method=new SMethodDef(LineCol.SYNTHETIC);      method.setDeclaringType(sClassDef);      method.setReturnType(getRealReturnType(methodToOverride[0].getReturnType(),true));      method.setName(methodToOverride[0].name());      sClassDef.methods().add(method);      parseAnnos(fun.annos,method,imports,ElementType.METHOD,Arrays.asList(ElementType.TYPE,ElementType.CONSTRUCTOR));      method.modifiers().add(SModifier.PUBLIC);      parseParameters(fun.params,fun.params.size(),method,imports,false);      methodToStatements.put(method,fun.statements);      checkOverrideAllMethods(sClassDef);    }  }  for (  STypeDef typeDef : typeDefSet) {    for (    SAnno anno : typeDef.annos()) {      if (anno.type().fullName().equals("java.lang.FunctionalInterface")) {        final String msg=typeDef + " is not a functional interface";        if (typeDef instanceof SInterfaceDef) {          if (!getMethodForLambda(typeDef,new SConstructorDef[1],new SMethodDef[1])) {            err.SyntaxException(msg,typeDef.line_col());            return;          }        } else {          err.SyntaxException(msg,typeDef.line_col());          return;        }      } else       if (anno.type().fullName().equals("lt.lang.FunctionalAbstractClass")) {        final String msg=typeDef + " is not a functional abstract class";        if (typeDef instanceof SClassDef) {          if (!getMethodForLambda(typeDef,new SConstructorDef[1],new SMethodDef[1])) {            err.SyntaxException(msg,typeDef.line_col());            return;          }        } else {          err.SyntaxException(msg,typeDef.line_col());          return;        }      }    }    List<SMethodDef> methods;    if (typeDef instanceof SClassDef)     methods=((SClassDef)typeDef).methods(); else     methods=((SInterfaceDef)typeDef).methods();    for (    SMethodDef method : methods) {      for (      SAnno anno : method.annos()) {        if (anno.type().fullName().equals("java.lang.Override")) {          if (method.overRide().isEmpty()) {            err.SyntaxException(method + " doesn't override any method",method.line_col());            return;          }        }      }    }  }  for (  STypeDef typeDef : typeDefSet) {    if (typeDef instanceof SClassDef) {      SClassDef cls=(SClassDef)typeDef;      if (cls.isDataClass()) {        fillMethodsIntoDataClass(cls);      }    }  }}  }
class C{  public void test_MultipleOperationsInSeveralTables() throws SQLException {  int id1=numOfRecords - 1;  threadPool.runTask(createTask4(id1));  int id2=numOfRecords + 1;  threadPool.runTask(createTask5(id2));  int oldID=5;  int newID=100;  threadPool.runTask(createTask6(oldID,newID));  threadPool.join();  Statement statement=conn.createStatement();  String selectQuery="SELECT * FROM " + DatabaseCreator.TEST_TABLE1 + " WHERE id=";  ResultSet result=statement.executeQuery(selectQuery + id1);  assertFalse("The record was not deleted",result.next());  result=statement.executeQuery(selectQuery + id2);  assertTrue("The record was not inserted",result.next());  assertEquals("Wrong value of field1",DatabaseCreator.defaultString + id2,result.getString("field1"));  assertEquals("Wrong value of field2",Integer.valueOf(id2).intValue(),result.getInt("field2"));  assertEquals("Wrong value of field3",Integer.valueOf(id2).intValue(),result.getInt("field3"));  result.close();  result=statement.executeQuery(selectQuery + oldID);  assertFalse("The record was not deleted",result.next());  result.close();  result=statement.executeQuery(selectQuery + newID);  assertTrue("The record was not updated",result.next());  assertEquals("Wrong value of field1",DatabaseCreator.defaultString + newID,result.getString("field1"));  assertEquals("Wrong value of field2",Integer.valueOf(newID).intValue(),result.getInt("field2"));  assertEquals("Wrong value of field3",Integer.valueOf(newID).intValue(),result.getInt("field3"));  result.close();}  }
class C{  private void putForCreate(K key,V value) throws java.io.StreamCorruptedException {  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  Object item;  while ((item=tab[i]) != null) {    if (item == k)     throw new java.io.StreamCorruptedException();    i=nextKeyIndex(i,len);  }  tab[i]=k;  tab[i + 1]=value;}  }
class C{  public String toString(){  return MessageFormat.format("[node={0},object={1},url={2},line={3},col={4},offset={5}]",getNode(),getObject(),getURL(),String.valueOf(getLineNumber()),String.valueOf(getColumnNumber()),String.valueOf(getOffset()));}  }
class C{  public void testGetInstance02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, InvalidAlgorithmParameterException, CertPathBuilderException {  try {    CertPathBuilder.getInstance(null,mProv.getName());    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathBuilder.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      CertPathBuilder.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        CertPathBuilder.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (type: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  CertPathBuilder cerPB;  for (int i=0; i < validValues.length; i++) {    cerPB=CertPathBuilder.getInstance(validValues[i],mProv.getName());    assertEquals("Incorrect type",cerPB.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPB.getProvider().getName(),mProv.getName());    checkResult(cerPB);  }}  }
class C{  protected BindOperationWrapper(BindOperation bind){  super(bind);}  }
class C{  public Location subtract(Location vec){  if (vec == null || vec.getWorld() != getWorld()) {    throw new IllegalArgumentException("Cannot add Locations of differing worlds");  }  x-=vec.x;  y-=vec.y;  z-=vec.z;  return this;}  }
class C{  void auditAccessFailure(int resultCode,String message){  if (auditEventPublisher.isAuditing(realm,ACCESS_TOPIC,EventName.AM_ACCESS_OUTCOME)) {    final long endTime=currentTimeMillis();    final long elapsedTime=endTime - startTime;    JsonValue detail=json(object(field(ACCESS_RESPONSE_DETAIL_REASON,message)));    AMAccessAuditEventBuilder builder=auditEventFactory.accessEvent(realm).forHttpRequest(context,request).timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_OUTCOME).component(component).responseWithDetail(FAILED,Integer.toString(resultCode),elapsedTime,MILLISECONDS,detail);    addSessionDetailsFromSSOTokenContextIfNotNull(builder,context);    if (ipAddressHeaderPropertyIsSet()) {      setClientFromHttpContextHeaderIfExists(builder,context);    }    AuditEvent auditEvent=builder.toEvent();    postProcessEvent(auditEvent);    auditEventPublisher.tryPublish(ACCESS_TOPIC,auditEvent);  }}  }
class C{  private boolean equals(Map<AttributeType,List<Attribute>> attributes1,Map<AttributeType,List<Attribute>> attributes2){  for (  AttributeType at : attributes1.keySet()) {    List<Attribute> list1=attributes1.get(at);    List<Attribute> list2=attributes2.get(at);    if (list2 == null || list1.size() != list2.size()) {      return false;    }    for (    Attribute a : list1) {      if (!list2.contains(a)) {        return false;      }    }  }  return true;}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){  return getService().fetchFooByUuidAndGroupId(uuid,groupId);}  }
class C{  public static boolean isXML11ValidName(String name){  int length=name.length();  if (length == 0)   return false;  int i=1;  char ch=name.charAt(0);  if (!isXML11NameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=name.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=name.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=name.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  private ReadOnlyPropertyViewer(ManagedObject<?> mo,PropertyDefinition<?> pd){  this.mo=mo;  this.pd=pd;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RC5ParameterSpec)) {    return false;  }  RC5ParameterSpec ps=(RC5ParameterSpec)obj;  return (version == ps.version) && (rounds == ps.rounds) && (wordSize == ps.wordSize)&& (Arrays.equals(iv,ps.iv));}  }
class C{  public void checkReady() throws BootstrapFailure {  if (requireRepository) {    ServiceTracker<?,?> repoTracker=null;    try {      if (repo == null) {        Filter filter=ctx.createFilter("(" + Constants.OBJECTCLASS + "="+ RepoBootService.class.getName()+ ")");        repoTracker=new ServiceTracker<>(ctx,filter,null);        repoTracker.open();        logger.debug("Bootstrapping repository");        RepoBootService rawRepo=(RepoBootService)repoTracker.waitForService(5000);        if (rawRepo != null) {          logger.debug("Bootstrap obtained repository");          repo=rawRepo;        } else {          logger.info("Failed to bootstrap repo, returned null");        }      }    } catch (    InterruptedException ex) {      logger.warn("Failed to bootstrap repo " + ex.getMessage(),ex);    }catch (    InvalidSyntaxException ex) {      logger.warn("Failed to bootstrap repo " + ex.getMessage(),ex);    } finally {      if (repoTracker != null) {        repoTracker.close();      }    }    if (repo == null) {      throw new BootstrapFailure("Failed to acquire the bootstrap repository service to access configuration persistence.");    }  }}  }
class C{  private boolean isRegisteredForSubOrgs(String serviceName) throws SSOException {  Map avPair=new HashMap();  Set value=new HashSet();  value.add(serviceName);  avPair.put(SERVICE_STATUS_ATTRIBUTE,value);  Set subOrgs=null;  try {    subOrgs=searchSubOrganizationalUnits("*",avPair,SCOPE_SUB);  } catch (  AMException ae) {  }  if ((subOrgs != null) && (!subOrgs.isEmpty()) && (subOrgs.size() > 1)) {    return true;  } else {    return false;  }}  }
class C{  public void registerTask(Task task){  tasks.add(task);}  }
class C{  public void addSubject(String name,Subject subject,boolean exclusive) throws NameAlreadyExistsException, InvalidNameException {  users.addSubject(name,subject,exclusive);}  }
class C{  public ConcurrentSkipListSet(SortedSet<E> s){  m=new ConcurrentSkipListMap<E,Object>(s.comparator());  addAll(s);}  }
class C{  public static Date stringToDate(String strDate) throws ParseException {  int[] diffTime=null;  boolean plusTime=true;  int idxT=strDate.indexOf('T');  if (idxT == -1) {    throw new ParseException("Invalid Date Format",0);  }  int idxDiffUTC=strDate.indexOf('-',idxT);  if (idxDiffUTC == -1) {    idxDiffUTC=strDate.indexOf('+',idxT);    plusTime=false;  }  if (idxDiffUTC != -1) {    diffTime=getDiffTime(strDate,idxDiffUTC);    strDate=strDate.substring(0,idxDiffUTC);  }  int idxMilliSec=strDate.indexOf('.');  if (idxMilliSec != -1) {    strDate=strDate.substring(0,idxMilliSec);  } else {    char lastChar=strDate.charAt(strDate.length() - 1);    if ((lastChar == 'z') || (lastChar == 'Z')) {      strDate=strDate.substring(0,strDate.length() - 1);    }  }  return createDate(strDate,diffTime,plusTime);}  }
class C{  private ByteOrderMark find(){  for (  ByteOrderMark bom : boms) {    if (matches(bom)) {      return bom;    }  }  return null;}  }
class C{  public void heart(String name){  final String ip=Sailing.acceptIp.get();  String namePath=zkBaseMonitor + "/" + ip+ "/"+ name.replace('/','.').substring(zkBase.length() + 1);  try {    this.zk.setData(namePath,new DateTime().toString().getBytes(),-1);  } catch (  KeeperException e1) {    e1.printStackTrace();  }catch (  InterruptedException e) {    log.info("when heart I recv a inter!");    Thread.currentThread().interrupt();  }}  }
class C{  public synchronized void addHeader(String name,String value){  String nameLower=name.toLowerCase(Locale.ENGLISH);  List<String> headerValueList=headerNameToValueListMap.get(nameLower);  if (null == headerValueList) {    headerValueList=new ArrayList<>();    headerNameToValueListMap.put(nameLower,headerValueList);  }  headerValueList.add(value);}  }
class C{  public static boolean isAccessLoggable(Level level){  if (logger == null) {    return false;  } else {    return logger.isAccessLoggable(level);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RequireBearerTokensElement createRequireBearerTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RequireBearerTokensElementImpl();}  }
class C{  public static Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByField2_First(field2,orderByComparator);}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public ResolveResult(Object robj,String rcomp){  resolvedObj=robj;  try {    remainingName=new CompositeName(rcomp);  } catch (  InvalidNameException e) {  }}  }
class C{  @Override public void delete(final int index){}  }
class C{  private void checkState(final boolean usesMiddles) throws IllegalStateException {  if (beginnings == null) {    throw new IllegalStateException("The list of beginnings is null.");  }  if (usesMiddles && middles == null) {    throw new IllegalStateException("The list of middles is null.");  }  if (endings == null) {    throw new IllegalStateException("The list of endings is null.");  }  if (beginnings.size() == 0) {    throw new IllegalStateException("The list of beginnings is empty.");  }  if (usesMiddles && middles.size() == 0) {    throw new IllegalStateException("The list of middles is empty.");  }  if (endings.size() == 0) {    throw new IllegalStateException("The list of endings is empty.");  }}  }
class C{  public static KeyManager[] wrap(KeyManager[] keyManagers,SortedSet<String> aliases,String componentName){  final KeyManager[] newKeyManagers=new KeyManager[keyManagers.length];  for (int i=0; i < keyManagers.length; i++) {    newKeyManagers[i]=new SelectableCertificateKeyManager((X509KeyManager)keyManagers[i],aliases,componentName);  }  return newKeyManagers;}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  for (int i=0; i < flavors.length; i++) {    if (flavor.equals(flavors[i])) {      return true;    }  }  return false;}  }
class C{  public static String[] createSteps(String[] before,String[] after){  assert after != null;  int diff=0;  if (before == null) {    before=new String[0];  } else   if (before.length > 0) {    diff=("...".equals(before[before.length - 1])) ? 1 : 0;  }  String[] res=new String[(before.length - diff) + after.length];  for (int i=0; i < res.length; i++) {    if (i < (before.length - diff)) {      res[i]=before[i];    } else {      res[i]=after[i - before.length + diff];    }  }  return res;}  }
class C{  public void remove(String attrName,String delValue){  int index=indexOf(attrName);  if (index != -1) {    Attr attr=(Attr)_attrs.get(index);    attr.removeValue(delValue);    if (attr.size() == 0) {      _attrs.remove(index);    }  }}  }
class C{  private ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {  int[] lastRange=null;  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {    int[] range;    if (deltaX == 0) {      range=blackWhiteRange(y,maxWhiteRun,left,right,true);    } else {      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);    }    if (range == null) {      if (lastRange == null) {        throw NotFoundException.getNotFoundInstance();      }      if (deltaX == 0) {        int lastY=y - deltaY;        if (lastRange[0] < centerX) {          if (lastRange[1] > centerX) {            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);          }          return new ResultPoint(lastRange[0],lastY);        } else {          return new ResultPoint(lastRange[1],lastY);        }      } else {        int lastX=x - deltaX;        if (lastRange[0] < centerY) {          if (lastRange[1] > centerY) {            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);          }          return new ResultPoint(lastX,lastRange[0]);        } else {          return new ResultPoint(lastX,lastRange[1]);        }      }    }    lastRange=range;  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public void paintViewportBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  return extns != null && !extns.isEmpty();}  }
class C{  public CompressedSchema(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String prefix;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:employee");  testEmployee=elementList.item(0);  assertNotNull("empEmployeeNotNull",testEmployee);  prefix=testEmployee.getPrefix();  assertEquals("prefix","emp",prefix);}  }
class C{  @Override public String changeSessionId(){  return this._getHttpServletRequest().changeSessionId();}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.out.println("usage : java SAMLSiteID <host_name>");    return;  }  System.out.println(generateSourceID(args[0]));}  }
class C{  public void addMembers(Guid[] guids) throws UMSException {  if (guids == null) {    String msg=i18n.getString(IUMSConstants.BAD_GUID);    throw new IllegalArgumentException(msg);  }  for (int i=0; i < guids.length; i++) {    addMember(guids[i]);  }}  }
class C{  private EvictionTimer(){}  }
class C{  public XMLString concat(String str){  return new XString(str().concat(str));}  }
class C{  @Override public String create(SSOToken token,IdType type,String name,Map<String,Set<String>> attrMap) throws IdRepoException {  if (DEBUG.messageEnabled()) {    DEBUG.message("Create invoked on " + type + ": "+ name+ " attrMap = "+ IdRepoUtils.getAttrMapWithoutPasswordAttrs(attrMap,null));  }  String dn=generateDN(type,name);  Set<String> objectClasses=getObjectClasses(type);  attrMap=new CaseInsensitiveHashMap(attrMap);  byte[] encodedPwd=helper.encodePassword(type,attrMap.get(AD_UNICODE_PWD_ATTR));  mapUserStatus(type,attrMap);  mapCreationAttributes(type,name,attrMap);  attrMap=removeUndefinedAttributes(type,attrMap);  Set<String> ocs=attrMap.get(OBJECT_CLASS_ATTR);  if (ocs != null) {    ocs.addAll(objectClasses);  } else {    attrMap.put(OBJECT_CLASS_ATTR,objectClasses);  }  attrMap.put(getSearchAttribute(type),asSet(name));  Entry entry=new LinkedHashMapEntry(dn);  Set<String> attributeValue;  for (  Map.Entry<String,Set<String>> attr : attrMap.entrySet()) {    attributeValue=attr.getValue();    if (attributeValue != null && !attributeValue.isEmpty()) {      entry.addAttribute(attr.getKey(),attributeValue.toArray());    }  }  if (type.equals(IdType.GROUP) && defaultGroupMember != null) {    entry.addAttribute(uniqueMemberAttr,defaultGroupMember);  }  if (encodedPwd != null) {    entry.replaceAttribute(AD_UNICODE_PWD_ATTR,encodedPwd);  }  Connection conn=null;  try {    conn=createConnection();    conn.add(LDAPRequests.newAddRequest(entry));    if (type.equals(IdType.GROUP) && defaultGroupMember != null) {      if (memberOfAttr != null) {        ModifyRequest modifyRequest=LDAPRequests.newModifyRequest(defaultGroupMember);        modifyRequest.addModification(ModificationType.ADD,memberOfAttr,dn);        conn.modify(modifyRequest);      }    }  } catch (  LdapException ere) {    DEBUG.error("Unable to add a new entry: " + name + " attrMap: "+ IdRepoUtils.getAttrMapWithoutPasswordAttrs(attrMap,null),ere);    if (ResultCode.ENTRY_ALREADY_EXISTS.equals(ere.getResult().getResultCode())) {      throw IdRepoDuplicateObjectException.nameAlreadyExists(name);    } else {      handleErrorResult(ere);    }  } finally {    IOUtils.closeIfNotNull(conn);  }  return dn;}  }
class C{  public void stateChanged(ChangeEvent e){  if (e == null) {    throw new NullPointerException();  }  firePropertyChange(ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM,"/");  metadata=getStringOptionValue(FedCLIConstants.ARGUMENT_METADATA);  extendedData=getStringOptionValue(FedCLIConstants.ARGUMENT_EXTENDED_DATA);  cot=getStringOptionValue(FedCLIConstants.ARGUMENT_COT);  spec=FederationManager.getIDFFSubCommandSpecification(rc);  String[] params={realm,metadata,extendedData,cot,spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IMPORT_ENTITY",params);  if ((metadata == null) && (extendedData == null)) {    String[] args={realm,metadata,extendedData,cot,spec,getResourceString("import-entity-exception-no-datafile")};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IMPORT_ENTITY",args);    throw new CLIException(getResourceString("import-entity-exception-no-datafile"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  validateCOT();  CommandManager mgr=getCommandManager();  String url=mgr.getWebEnabledURL();  webAccess=(url != null) && (url.length() > 0);  try {    if (spec.equals(FederationManager.DEFAULT_SPECIFICATION)) {      handleSAML2Request(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_IMPORT_ENTITY",params);    } else     if (spec.equals(FedCLIConstants.IDFF_SPECIFICATION)) {      handleIDFFRequest(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_IMPORT_ENTITY",params);    } else     if (spec.equals(FedCLIConstants.WSFED_SPECIFICATION)) {      handleWSFedRequest(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_IMPORT_ENTITY",params);    } else {      throw new CLIException(getResourceString("unsupported-specification"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  CLIException e) {    String[] args={realm,metadata,extendedData,cot,spec,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IMPORT_ENTITY",args);    throw e;  }}  }
class C{  public EnigmaLoader(){  super(null);}  }
class C{  public void createEntityConfig(String realm,FederationConfigElement config) throws WSFederationMetaException {  String federationId=config.getFederationID();  if (federationId == null) {    debug.error("WSFederationMetaManager.createEntityConfig: " + "entity ID is null");    String[] data={realm};    LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_ID_CREATE_ENTITY_CONFIG,data,null);    throw new WSFederationMetaException("empty_entityid",null);  }  if (realm == null) {    realm="/";  }  String[] objs={federationId,realm};  try {    Map attrs=WSFederationMetaUtils.convertJAXBToAttrMap(ATTR_ENTITY_CONFIG,config);    Map oldAttrs=configInst.getConfiguration(realm,federationId);    if (oldAttrs == null) {      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG,objs,null);      throw new WSFederationMetaException("entity_descriptor_not_exist",objs);    }    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);    if (oldValues != null && !oldValues.isEmpty()) {      LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_EXISTS,objs,null);      throw new WSFederationMetaException("entity_config_exists",objs);    }    configInst.setConfiguration(realm,federationId,attrs);    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_CREATED,objs,null);    SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId);    if (spconfig != null) {      addToCircleOfTrust(spconfig,realm,federationId);    }    IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId);    if (idpconfig != null) {      addToCircleOfTrust(idpconfig,realm,federationId);    }  } catch (  ConfigurationException e) {    debug.error("WSFederationMetaManager.createEntityConfig:",e);    String[] data={e.getMessage(),federationId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_ENTITY_CONFIG,data,null);    throw new WSFederationMetaException(e);  }catch (  JAXBException jaxbe) {    debug.error("WSFederationMetaManager.createEntityConfig:",jaxbe);    LogUtil.error(Level.INFO,LogUtil.CREATE_INVALID_ENTITY_CONFIG,objs,null);    throw new WSFederationMetaException("invalid_config",objs);  }}  }
class C{  private void backupFavorites(BackupDataOutput data) throws IOException {  ContentResolver cr=mContext.getContentResolver();  Cursor cursor=cr.query(LauncherSettings.Favorites.CONTENT_URI,FAVORITE_PROJECTION,getUserSelectionArg(),null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final long updateTime=cursor.getLong(ID_MODIFIED);      BackupProtos.Key key=getKey(BackupProtos.Key.FAVORITE,id);      mKeys.add(key);      final String backupKey=keyToBackupKey(key);      if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime || restoredBackupVersion < 4) {        writeRowToBackup(key,packFavorite(cursor),data);      } else {        if (DEBUG)         Log.d(TAG,"favorite already backup up: " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  private AccessRequest createAccessRequest() throws NoSuchAlgorithmException {  RequestAuthenticator ra=new RequestAuthenticator(random,secret);  AccessRequest req=new AccessRequest(getIdentifier(),ra);  return req;}  }
class C{  public static boolean copySelfSignedCertificates(KeyStore dst,KeyStore src){  try {    boolean copied=false;    for (    String alias : Collections.list(src.aliases())) {      if (!src.isCertificateEntry(alias)) {        continue;      }      X509Certificate cert=(X509Certificate)src.getCertificate(alias);      if (!cert.getSubjectDN().equals(cert.getIssuerDN())) {        continue;      }      dst.setCertificateEntry(alias,cert);      copied=true;    }    return copied;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void curveTo(float x1,float y1,float x2,float y2,float x3,float y3){  if (currentPoint == null) {    throw new RuntimeException(START_PATH_ERR_MSG);  }  Point secondPoint=new Point(x1,y1);  Point thirdPoint=new Point(x2,y2);  Point fourthPoint=new Point(x3,y3);  List<Point> controlPoints=new ArrayList<>(Arrays.asList(currentPoint,secondPoint,thirdPoint,fourthPoint));  getLastSubpath().addSegment(new BezierCurve(controlPoints));  currentPoint=fourthPoint;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  repopulateMechID();  forwardTo();}  }
class C{  public static void registerPasswordValidator(DN configEntryDN,PasswordValidator<? extends PasswordValidatorCfg> validator){  directoryServer.passwordValidators.put(configEntryDN,validator);}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  try {    int n;    while ((n=inf.inflate(b,off,len)) == 0) {      if (inf.finished() || inf.needsDictionary()) {        reachEOF=true;        return -1;      }      if (inf.needsInput()) {        fill();      }    }    return n;  } catch (  DataFormatException e) {    String s=e.getMessage();    throw new ZipException(s != null ? s : "Invalid ZLIB data format");  }}  }
class C{  public final void writeChar(int v) throws IOException {  out.write((v >>> 8) & 0xFF);  out.write((v >>> 0) & 0xFF);  incCount(2);}  }
class C{  public static int makeMovementFlags(int swipeFlags){  return makeFlag(ACTION_STATE_IDLE,swipeFlags) | makeFlag(ACTION_STATE_SWIPE,swipeFlags);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.PPType createPPType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.PPTypeImpl();}  }
class C{  public static String createSOAPMessageString(String xmlString) throws SOAPException, SAML2Exception {  StringBuffer sb=new StringBuffer(500);  if (debug.messageEnabled()) {    debug.message("SAML2Utils.createSOAPMessage: xmlstr = " + xmlString);  }  sb.append("<").append(SAMLConstants.SOAP_ENV_PREFIX).append(":Envelope").append(SAMLConstants.SPACE).append("xmlns:").append(SAMLConstants.SOAP_ENV_PREFIX).append("=\"").append(SAMLConstants.SOAP_URI).append("\">").append("<").append(SAMLConstants.SOAP_ENV_PREFIX).append(":Body>").append(xmlString).append(SAMLConstants.START_END_ELEMENT).append(SAMLConstants.SOAP_ENV_PREFIX).append(":Body>").append(SAMLConstants.START_END_ELEMENT).append(SAMLConstants.SOAP_ENV_PREFIX).append(":Envelope>").append(SAMLConstants.NL);  if (debug.messageEnabled()) {    debug.message("SAML2Utils.createSOAPMessage: soap message = " + sb.toString());  }  return sb.toString();}  }
class C{  public static boolean isFloat(String desc){  return desc.endsWith("F");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentfragmentnodetype.class,args);}  }
class C{  @Override public void createDaysStreamingQuoteTable(String date){  if (conn != null) {    Statement stmt;    try {      stmt=conn.createStatement();      quoteTable=ZStreamingConfig.getStreamingQuoteTbNameAppendFormat(date);      String sql="CREATE TABLE " + quoteTable + " "+ "(Time time NOT NULL, "+ " InstrumentToken varchar(32) NOT NULL, "+ " LastTradedPrice DECIMAL(20,4) NOT NULL, "+ " PRIMARY KEY (InstrumentToken, Time)) "+ " ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;";      stmt.executeUpdate(sql);      System.out.println("StreamingQuoteDAOModeLtp.createDaysStreamingQuoteTable(): SQL table for Streaming quote created, table name: [" + quoteTable + "]");    } catch (    SQLException e) {      System.out.println("StreamingQuoteDAOModeLtp.createDaysStreamingQuoteTable(): ERROR: SQLException on creating Table, cause: " + e.getMessage());    }  } else {    System.out.println("StreamingQuoteDAOModeLtp.createDaysStreamingQuoteTable(): ERROR: DB conn is null !!!");  }}  }
class C{  @BeforeClass public void disableLogging(){  TestCaseUtils.setDefaultLogLevel(Level.SEVERE);}  }
class C{  public void testCertificateFactory10(){  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  byte[] bb={};  InputStream is=new ByteArrayInputStream(bb);  Collection<?> colCer;  Collection<?> colCrl;  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCertificate(null);      fail("generateCertificate must thrown CertificateException or NullPointerEXception when input stream is null");    } catch (    CertificateException e) {    }catch (    NullPointerException e) {    }    is=new ByteArrayInputStream(bb);    try {      certFs[i].generateCertificates(null);      fail("generateCertificates must throw CertificateException or NullPointerException when input stream is null");    } catch (    CertificateException e) {    }catch (    NullPointerException e) {    }    is=new ByteArrayInputStream(bb);    try {      certFs[i].generateCertificate(is);    } catch (    CertificateException e) {    }    is=new ByteArrayInputStream(bb);    try {      colCer=certFs[i].generateCertificates(is);      if (colCer != null) {        assertTrue("Not empty certificate collection",colCer.isEmpty());      }    } catch (    CertificateException e) {    }  }  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCRL(null);    } catch (    CRLException e) {    }catch (    NullPointerException e) {    }    try {      colCrl=certFs[i].generateCRLs(null);      if (colCrl != null) {        assertTrue("Not empty CRL collection was returned from null stream",colCrl.isEmpty());      }    } catch (    CRLException e) {    }catch (    NullPointerException e) {    }    is=new ByteArrayInputStream(bb);    try {      certFs[i].generateCRL(is);    } catch (    CRLException e) {    }    is=new ByteArrayInputStream(bb);    try {      certFs[i].generateCRLs(is);      colCrl=certFs[i].generateCRLs(null);      if (colCrl != null) {        assertTrue("Not empty CRL collection was returned from empty stream",colCrl.isEmpty());      }    } catch (    CRLException e) {    }  }}  }
class C{  public boolean add(E e){  typeCheck(e);  int eOrdinal=e.ordinal();  int eWordNum=eOrdinal >>> 6;  long oldElements=elements[eWordNum];  elements[eWordNum]|=(1L << eOrdinal);  boolean result=(elements[eWordNum] != oldElements);  if (result)   size++;  return result;}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public boolean isCompleteCRLEnabled(){  return completeCRLEnabled;}  }
class C{  public ContinuousQueryException(String message){  super(message);}  }
class C{  public static boolean isDefaultLookAndFeelDecorated(){  Boolean defaultLookAndFeelDecorated=(Boolean)SwingUtilities.appContextGet(defaultLookAndFeelDecoratedKey);  if (defaultLookAndFeelDecorated == null) {    defaultLookAndFeelDecorated=Boolean.FALSE;  }  return defaultLookAndFeelDecorated.booleanValue();}  }
class C{  public void incrementIdxOfCurrentCallback(){  ++idxOfCurrentCallback;}  }
class C{  private synchronized boolean updateDerivedGauge(Object scanCounter,CounterMonitorObservedObject o){  boolean is_derived_gauge_valid;  if (differenceMode) {    if (o.getPreviousScanCounter() != null) {      setDerivedGaugeWithDifference((Number)scanCounter,null,o);      if (((Number)o.getDerivedGauge()).longValue() < 0L) {        if (modulus.longValue() > 0L) {          setDerivedGaugeWithDifference((Number)scanCounter,modulus,o);        }        o.setThreshold(initThreshold);        o.setEventAlreadyNotified(false);      }      is_derived_gauge_valid=true;    } else {      is_derived_gauge_valid=false;    }    o.setPreviousScanCounter((Number)scanCounter);  } else {    o.setDerivedGauge((Number)scanCounter);    is_derived_gauge_valid=true;  }  return is_derived_gauge_valid;}  }
class C{  public static void putObject(String key,Object value){  if (mGson == null || value == null) {    return;  }  putString(key,mGson.toJson(value));}  }
class C{  public void storeLocal(final int local){  storeInsn(getLocalType(local),local);}  }
class C{  private <T extends TrustManagerProviderCfg>TrustManagerProvider<T> loadProvider(String className,T configuration,boolean initialize) throws InitializationException {  try {    TrustManagerProviderCfgDefn definition=TrustManagerProviderCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends TrustManagerProvider> providerClass=propertyDefinition.loadClass(className,TrustManagerProvider.class);    TrustManagerProvider<T> provider=providerClass.newInstance();    if (initialize) {      provider.initializeTrustManagerProvider(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!provider.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_TRUSTMANAGER_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));      }    }    return provider;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_TRUSTMANAGER_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public DataBuffer createDataBuffer(){  DataBuffer dataBuffer=null;  int size=(int)scanlineStride * height;switch (dataType) {case DataBuffer.TYPE_BYTE:    dataBuffer=new DataBufferByte(size + (dataBitOffset + 7) / 8);  break;case DataBuffer.TYPE_USHORT:dataBuffer=new DataBufferUShort(size + (dataBitOffset + 15) / 16);break;case DataBuffer.TYPE_INT:dataBuffer=new DataBufferInt(size + (dataBitOffset + 31) / 32);break;}return dataBuffer;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported04.class,args);}  }
class C{  public void addRule(String rule){  if (rule != null) {    final String baseUnitsDisable="BASE_SIZE_DISABLE";    final String baseUnits="BASE_SIZE ";    final String w3cLengthUnitsEnable="W3C_LENGTH_UNITS_ENABLE";    final String w3cLengthUnitsDisable="W3C_LENGTH_UNITS_DISABLE";    if (rule == baseUnitsDisable) {      sizeMap=sizeMapDefault;    } else     if (rule.startsWith(baseUnits)) {      rebaseSizeMap(Integer.parseInt(rule.substring(baseUnits.length())));    } else     if (rule == w3cLengthUnitsEnable) {      w3cLengthUnits=true;    } else     if (rule == w3cLengthUnitsDisable) {      w3cLengthUnits=false;    } else {      CssParser parser=new CssParser();      try {        parser.parse(getBase(),new StringReader(rule),false,false);      } catch (      IOException ioe) {      }    }  }}  }
class C{  GZIPAction(String origFile,String newFile,boolean deleteOrig){  this.originalFile=new File(origFile);  this.newFile=new File(newFile);  this.deleteOriginal=deleteOrig;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignatureMethodType.HMACOutputLength createSignatureMethodTypeHMACOutputLength() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignatureMethodTypeImpl.HMACOutputLengthImpl();}  }
class C{  @Override public void removeWhiteListItem(String item){  final Set<String> stringSet=sharedPreferences.getStringSet(KEY_WHITELIST,new HashSet<String>());  stringSet.remove(item);  SharedPreferences.Editor editor=sharedPreferences.edit();  editor.remove(KEY_WHITELIST);  editor.putStringSet(KEY_WHITELIST,stringSet);  editor.commit();}  }
class C{  private Map sendCallback(){  Map map=null;  try {    CallbackHandler callbackHandler=getCallbackHandler();    if (callbackHandler == null) {      throw new AuthLoginException(amAuthMSISDN,"NoCallbackHandler",null);    }    Callback[] callbacks=new Callback[2];    callbacks[0]=new NameCallback(bundle.getString("gateway"));    callbacks[1]=new PasswordCallback(bundle.getString("msisdn"),true);    callbackHandler.handle(callbacks);    map=new HashMap();    int len=callbacks.length;    for (int i=0; i < len; i++) {      Callback cb=callbacks[i];      if (cb instanceof PasswordCallback) {        char[] pass=((PasswordCallback)cb).getPassword();        if (pass != null) {          map.put("msisdnNumber",new String(pass));        }      } else       if (cb instanceof NameCallback) {        String gateway=((NameCallback)cb).getName();        if (gateway != null) {          map.put("gateway",gateway);        }      }    }  } catch (  Exception e) {    if (debug.messageEnabled()) {      debug.message("sendCallback",e);    }  }  return map;}  }
class C{  public LDAPFilter(SearchFilter filter){  this.filterType=filter.getFilterType();switch (filterType) {case AND:case OR:    Collection<SearchFilter> comps=filter.getFilterComponents();  filterComponents=new ArrayList<>(comps.size());for (SearchFilter f : comps) {  filterComponents.add(new LDAPFilter(f));}notComponent=null;attributeDescription=null;assertionValue=null;subInitialElement=null;subAnyElements=null;subFinalElement=null;matchingRuleID=null;dnAttributes=false;break;case NOT:notComponent=new LDAPFilter(filter.getNotComponent());filterComponents=null;attributeDescription=null;assertionValue=null;subInitialElement=null;subAnyElements=null;subFinalElement=null;matchingRuleID=null;dnAttributes=false;break;case EQUALITY:case GREATER_OR_EQUAL:case LESS_OR_EQUAL:case APPROXIMATE_MATCH:attributeDescription=filter.getAttributeType().getNameOrOID();assertionValue=filter.getAssertionValue();filterComponents=null;notComponent=null;subInitialElement=null;subAnyElements=null;subFinalElement=null;matchingRuleID=null;dnAttributes=false;break;case SUBSTRING:attributeDescription=filter.getAttributeType().getNameOrOID();ByteString bs=filter.getSubInitialElement();if (bs == null) {subInitialElement=null;} else {subInitialElement=bs;}bs=filter.getSubFinalElement();if (bs == null) {subFinalElement=null;} else {subFinalElement=bs;}List<ByteString> subAnyStrings=filter.getSubAnyElements();if (subAnyStrings == null) {subAnyElements=null;} else {subAnyElements=new ArrayList<>(subAnyStrings);}filterComponents=null;notComponent=null;assertionValue=null;matchingRuleID=null;dnAttributes=false;break;case PRESENT:attributeDescription=filter.getAttributeType().getNameOrOID();filterComponents=null;notComponent=null;assertionValue=null;subInitialElement=null;subAnyElements=null;subFinalElement=null;matchingRuleID=null;dnAttributes=false;break;case EXTENSIBLE_MATCH:dnAttributes=filter.getDNAttributes();matchingRuleID=filter.getMatchingRuleID();AttributeType attrType=filter.getAttributeType();if (attrType == null) {attributeDescription=null;} else {attributeDescription=attrType.getNameOrOID();}assertionValue=filter.getAssertionValue();filterComponents=null;notComponent=null;subInitialElement=null;subAnyElements=null;subFinalElement=null;break;}}  }
class C{  private static byte[][] rotateArray(byte[][] bitarray){  byte[][] temp=new byte[bitarray[0].length][bitarray.length];  for (int ii=0; ii < bitarray.length; ii++) {    int inverseii=bitarray.length - ii - 1;    for (int jj=0; jj < bitarray[0].length; jj++) {      temp[jj][inverseii]=bitarray[ii][jj];    }  }  return temp;}  }
class C{  private int handleCH(String value,DoubleMetaphoneResult result,int index){  if (index > 0 && contains(value,index,4,"CHAE")) {    result.append('K','X');    return index + 2;  } else   if (conditionCH0(value,index)) {    result.append('K');    return index + 2;  } else   if (conditionCH1(value,index)) {    result.append('K');    return index + 2;  } else {    if (index > 0) {      if (contains(value,0,2,"MC")) {        result.append('K');      } else {        result.append('X','K');      }    } else {      result.append('X');    }    return index + 2;  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public boolean equals(XObject obj2){  try {    return m_val == obj2.bool();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  public void beginMonitoringOf(final InetAddress inetAddress){  final long socketIdentifier=fromInet4Address(inetAddress);  candidateSockets.beginMonitoringSocketIdentifier(new InetSocketAddress(inetAddress,0),socketIdentifier);}  }
class C{  protected void handleALL_SESSION_NOCONTEXTMANAGER(SessionMessage msg,Member sender){  counterReceive_EVT_ALL_SESSION_NOCONTEXTMANAGER++;  if (log.isDebugEnabled())   log.debug(sm.getString("deltaManager.receiveMessage.noContextManager",getName(),sender.getHost(),Integer.valueOf(sender.getPort())));  noContextManagerReceived=true;}  }
class C{  void ReconstructFDArray(int Font,OffsetItem[] fdPrivate){  BuildIndexHeader(fonts[Font].FDArrayCount,fonts[Font].FDArrayOffsize,1);  OffsetItem[] fdOffsets=new IndexOffsetItem[fonts[Font].FDArrayOffsets.length - 1];  for (int i=0; i < fonts[Font].FDArrayOffsets.length - 1; i++) {    fdOffsets[i]=new IndexOffsetItem(fonts[Font].FDArrayOffsize);    OutputList.addLast(fdOffsets[i]);  }  IndexBaseItem fdArrayBase=new IndexBaseItem();  OutputList.addLast(fdArrayBase);  for (int k=0; k < fonts[Font].FDArrayOffsets.length - 1; k++) {    seek(fonts[Font].FDArrayOffsets[k]);    while (getPosition() < fonts[Font].FDArrayOffsets[k + 1]) {      int p1=getPosition();      getDictItem();      int p2=getPosition();      if ("Private".equals(key)) {        int NewSize=(int)((Integer)args[0]);        int OrgSubrsOffsetSize=CalcSubrOffsetSize(fonts[Font].fdprivateOffsets[k],fonts[Font].fdprivateLengths[k]);        if (OrgSubrsOffsetSize != 0)         NewSize+=5 - OrgSubrsOffsetSize;        OutputList.addLast(new DictNumberItem(NewSize));        fdPrivate[k]=new DictOffsetItem();        OutputList.addLast(fdPrivate[k]);        OutputList.addLast(new UInt8Item((char)18));        seek(p2);      } else       OutputList.addLast(new RangeItem(buf,p1,p2 - p1));    }    OutputList.addLast(new IndexMarkerItem(fdOffsets[k],fdArrayBase));  }}  }
class C{  public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.indicator_radius,R.drawable.indicator_un_radius);}  }
class C{  public Element previous(){  int stackSize;  if (elementStack == null || (stackSize=elementStack.size()) == 0) {    return null;  }  StackItem item=elementStack.peek();  Element elem=item.getElement();  int index=item.getIndex();  if (index > 0) {    return getDeepestLeaf(elem.getElement(--index));  } else   if (index == 0) {    return elem;  } else   if (index == -1) {    if (stackSize == 1) {      return null;    }    StackItem top=elementStack.pop();    item=elementStack.peek();    elementStack.push(top);    elem=item.getElement();    index=item.getIndex();    return ((index == -1) ? elem : getDeepestLeaf(elem.getElement(index)));  }  return null;}  }
class C{  public void testNotNeg(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  int aSign=-1;  byte rBytes[]={0,-128,56,100,-2,-76,89,45,91,3,-15,35,26,-118};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.not();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public RefinedSoundex(){  this(US_ENGLISH_MAPPING);}  }
class C{  private void updateFilteredTokens(){  setFilteredTokens(getFilteredTokens(getRawTokens()));}  }
class C{  public boolean isWithinMinimumAge(){  long minAge=passwordPolicy.getMinPasswordAge();  if (minAge <= 0L) {    if (logger.isTraceEnabled()) {      logger.trace("Returning false because there is no minimum age.");    }    return false;  } else   if (getPasswordChangedTime() + minAge * 1000L < currentTime) {    if (logger.isTraceEnabled()) {      logger.trace("Returning false because the minimum age has expired.");    }    return false;  } else   if (mustChangePassword()) {    if (logger.isTraceEnabled()) {      logger.trace("Returning false because the account is in a must-change state.");    }    return false;  } else {    if (logger.isTraceEnabled()) {      logger.trace("Returning true.");    }    return true;  }}  }
class C{  private void endArguments(){  if (argumentStack % 2 != 0) {    buf.append('>');  }  argumentStack/=2;}  }
class C{  protected void sendAck(byte[] command){  try {    OutputStream out=socket.getOutputStream();    out.write(command);    out.flush();    if (log.isTraceEnabled()) {      log.trace("ACK sent to " + socket.getPort());    }  } catch (  java.io.IOException x) {    log.warn(sm.getString("bioReplicationTask.unable.sendAck",x.getMessage()));  }}  }
class C{  private void throwForNullValue(@Nullable final String value,final Class<?> clazz,final @NonNull String key) throws WrongTypeException {  if (value == null) {    throw new WrongTypeException("The value for key <" + key + "> is null. "+ "You obviously saved this value as String and try to access it with type "+ clazz.getSimpleName()+ " which cannot be null. "+ " Always use getString(key, defaultValue) when accessing data you saved with put(String).");  }}  }
class C{  public E poll(long timeout,TimeUnit unit) throws InterruptedException {  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null) {        if (nanos <= 0)         return null; else         nanos=available.awaitNanos(nanos);      } else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        if (nanos <= 0)         return null;        first=null;        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            long timeLeft=available.awaitNanos(delay);            nanos-=delay - timeLeft;          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (xctxt.getIteratorRoot() == xctxt.getCurrentNode())   return getStaticScore(); else   return this.SCORE_NONE;}  }
class C{  public void flushOutputStreamOrWriter() throws IOException {  if (servletOutputStream != null) {    servletOutputStream.flush();  }  if (printWriter != null) {    printWriter.flush();  }}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  protected boolean filterHeader(int index){  return (this.headerName == null) || this.headerName.equalsIgnoreCase(this.allHeaders[index].getName());}  }
class C{  public static String replaceTrailingBrackets(String self){  return replaceTrailingBrackets(self,"");}  }
class C{  public Future<List<Job>> jobRangeByType(String type,String state,long from,long to,String order){  Future<List<Job>> future=Future.future();  jobService.jobRangeByType(type,state,from,to,order,future.completer());  return future;}  }
class C{  public PrefixFileFilter(String[] prefixes,IOCase caseSensitivity){  if (prefixes == null) {    throw new IllegalArgumentException("The array of prefixes must not be null");  }  this.prefixes=new String[prefixes.length];  System.arraycopy(prefixes,0,this.prefixes,0,prefixes.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public void destroy() throws DestroyFailedException {  if (!destroyed) {    Arrays.fill(asn1Encoding,(byte)0);    client=null;    server=null;    sessionKey.destroy();    flags=null;    authTime=null;    startTime=null;    endTime=null;    renewTill=null;    clientAddresses=null;    destroyed=true;  }}  }
class C{  public void clearPasswordChangedByRequiredTime(){  operations.add(PasswordPolicyStateOperationType.CLEAR_PASSWORD_CHANGED_BY_REQUIRED_TIME);}  }
class C{  private void parseSessionExpirationTimeInfo(Element sess){  String sid=null;  Long expTime=null;  String temp=sess.getAttribute("sid");  if (temp != null) {    sid=temp;  }  temp=sess.getAttribute("expTime");  if (temp != null) {    expTime=new Long(temp);  }  sessionResponse.addSessionForGivenUUID(sid,expTime);}  }
class C{  public static <T>void copy(List<? super T> dest,List<? extends T> src){  int srcSize=src.size();  if (srcSize > dest.size())   throw new IndexOutOfBoundsException("Source does not fit in dest");  if (srcSize < COPY_THRESHOLD || (src instanceof RandomAccess && dest instanceof RandomAccess)) {    for (int i=0; i < srcSize; i++)     dest.set(i,src.get(i));  } else {    ListIterator<? super T> di=dest.listIterator();    ListIterator<? extends T> si=src.listIterator();    for (int i=0; i < srcSize; i++) {      di.next();      di.set(si.next());    }  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  DirectoryServer.registerMonitorProvider(testMonitorProvider);}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public static String toLatinAlphabetNumberUpperCase(int number){  return AlphabetNumbering.toAlphabetNumber(number,ALPHABET_UPPERCASE);}  }
class C{  boolean isNewEntry(){  return (newEntry);}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  charactersFlush();  m_contextIndexes.quickPop(1);  int topContextIndex=m_contextIndexes.peek();  if (topContextIndex != m_prefixMappings.size()) {    m_prefixMappings.setSize(topContextIndex);  }  m_previous=m_parents.pop();  popShouldStripWhitespace();}  }
class C{  private static void createAndCheckIsDirectory(Path dir,FileAttribute<?>... attrs) throws IOException {  try {    createDirectory(dir,attrs);  } catch (  FileAlreadyExistsException x) {    if (!isDirectory(dir,LinkOption.NOFOLLOW_LINKS))     throw x;  }}  }
class C{  @Override protected boolean checkCollision(){  Shape intersection=SVGPath.intersect(SpriteHandler.getCurrentCast().get(2).getSpriteBounds(),spriteBounds);  return intersection.getBoundsInParent().getWidth() != -1;}  }
class C{  public final void run(Runnable task) throws ThreadPoolException {  try {    lock.lock();    taskList.add(task);    hasTasks.signal();  }  finally {    lock.unlock();  }}  }
class C{  public Invalid(){  super();}  }
class C{  public static void start(){  if (INSTANCE == null) {    INSTANCE=new TimeThread();  }}  }
class C{  public Builder substringMatchingRule(String substringMatchingRuleOID){  this.substringMatchingRuleOID=substringMatchingRuleOID;  return this;}  }
class C{  public ServiceAlreadyExistsException(){  super();}  }
class C{  public void addWelcomeFile(String hostName,String contextPath,String version,String welcomeFile){  hostName=renameWildcardHost(hostName);  ContextVersion contextVersion=findContextVersion(hostName,contextPath,version,false);  if (contextVersion == null) {    return;  }  int len=contextVersion.welcomeResources.length + 1;  String[] newWelcomeResources=new String[len];  System.arraycopy(contextVersion.welcomeResources,0,newWelcomeResources,0,len - 1);  newWelcomeResources[len - 1]=welcomeFile;  contextVersion.welcomeResources=newWelcomeResources;}  }
class C{  public boolean willExpire(){  return willExpireFlag;}  }
class C{  public void postProcessModifyMemberShip(SSOToken token,String entryDN,String orgDN,Set members,int operation,int objectType) throws AMException {  Set implSet=getPrePostImpls(orgDN);  if ((implSet != null) && (!implSet.isEmpty())) {    Iterator itr=implSet.iterator();    while (itr.hasNext()) {      String className=(String)itr.next();      AMCallBack impl=getCallBackObject(className);      if (impl == null) {        continue;      }      try {switch (operation) {case DirectoryServicesImpl.ADD_MEMBER:          impl.postProcessAddUser(token,entryDN,members,objectType);        break;case DirectoryServicesImpl.REMOVE_MEMBER:      impl.postProcessRemoveUser(token,entryDN,members,objectType);    break;}} catch (AMException ae) {debug.error("CallBackHelper.postProcessModifyMemberShip()" + ": Preprocessing impl " + impl.getClass().getName() + " exception thrown: ",ae);}}}}  }
class C{  public PBEKeySpec(char[] password,byte[] salt,int iterationCount){  if (salt == null) {    throw new NullPointerException("salt == null");  }  if (salt.length == 0) {    throw new IllegalArgumentException("salt.length == 0");  }  if (iterationCount <= 0) {    throw new IllegalArgumentException("iterationCount <= 0");  }  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;  this.keyLength=0;}  }
class C{  public DateEditor(JSpinner spinner,String dateFormatPattern){  this(spinner,new SimpleDateFormat(dateFormatPattern,spinner.getLocale()));}  }
class C{  private void addAcquiredTrigger(Trigger trigger,String instanceId) throws JobPersistenceException {synchronized (lock) {    try {      logger.debug("Adding acquired trigger {} for instance {}",trigger.getName(),instanceId);      int retries=0;      while (writeRetries == -1 || retries <= writeRetries && !shutdown) {        try {          addRepoListName(getTriggerId(trigger.getGroup(),trigger.getName()),ACQUIRED_TRIGGERS_RESOURCE_PATH,instanceId);          break;        } catch (        PreconditionFailedException e) {          logger.debug("Adding acquired trigger failed {}, retrying",e);          retries++;        }      }    } catch (    ResourceException e) {      throw new JobPersistenceException("Error adding waiting trigger",e);    }  }}  }
class C{  public boolean activate(String userDN,boolean stateless){  if (userDN == null) {    return false;  }  if ((sessionService.hasExceededMaxSessions()) && !sessionService.isSuperUser(userDN)) {    fireSessionEvent(SessionEventType.SESSION_MAX_LIMIT_REACHED);    sessionLogging.logSystemMessage(LOG_MSG_SESSION_MAX_LIMIT_REACHED);    return false;  }  SessionInfo sessionInfo=toSessionInfo();  if ((serviceConfig.isSessionConstraintEnabled()) && !shouldIgnoreSessionQuotaChecking()) {    if (sessionConstraint.checkQuotaAndPerformAction(this)) {      debug.message("Session Quota exhausted!");      fireSessionEvent(SessionEventType.QUOTA_EXHAUSTED);      sessionLogging.logEvent(sessionInfo,SessionEventType.QUOTA_EXHAUSTED);      return false;    }  }  setLatestAccessTime();  setState(SessionState.VALID);  fireSessionEvent(SessionEventType.SESSION_CREATION);  sessionLogging.logEvent(sessionInfo,SessionEventType.SESSION_CREATION);  sessionAuditor.auditActivity(sessionInfo,AM_SESSION_CREATED);  sessionService.sendEvent(this,SessionEventType.SESSION_CREATION);  if (!stateless && (!isAppSession() || serviceConfig.isReturnAppSessionEnabled())) {    sessionService.incrementActiveSessions();  }  return true;}  }
class C{  public void handleBtnOKRequest(RequestInvocationEvent event){  PWResetQuestionModel model=(PWResetQuestionModel)getModel();  String orgDN=(String)getPageSessionAttribute(ORG_DN);  String userDN=(String)getPageSessionAttribute(USER_DN);  RequestContext reqContext=event.getRequestContext();  ISLocaleContext localeContext=new ISLocaleContext();  localeContext.setLocale(reqContext.getRequest());  java.util.Locale localeObj=localeContext.getLocale();  String locale=localeObj.toString();  model.setUserLocale(locale);  PWResetQuestionTiledView tView=(PWResetQuestionTiledView)getChild(PASSWORD_RESET_TILEDVIEW);  Map map=tView.getAnswers();  if (tView.isAnswerBlank()) {    setErrorMessage(model.getErrorTitle(),model.getMissingAnswerMessage());    forwardTo();  } else {    try {      model.resetPassword(userDN,orgDN,map);      PWResetSuccessViewBean vb=(PWResetSuccessViewBean)getViewBean(PWResetSuccessViewBean.class);      vb.setResetMessage(model.getPasswordResetMessage());      vb.setPageSessionAttribute(URL_LOCALE,locale);      vb.forwardTo(getRequestContext());    } catch (    PWResetException pwe) {      if (!model.isUserLockout(userDN,orgDN)) {        setErrorMessage(model.getErrorTitle(),pwe.getMessage());      }      forwardTo();    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node newAttribute;  String strong;  Node setNode;  doc1=(Document)load("hc_staff",true);  doc2=(Document)load("hc_staff",true);  elementList=doc1.getElementsByTagName("acronym");  testAddress=elementList.item(2);  newAttribute=doc2.createAttribute("newAttribute");  attributes=testAddress.getAttributes();{    boolean success=false;    try {      setNode=attributes.setNamedItem(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public boolean isRepresentationClassByteBuffer(){  return java.nio.ByteBuffer.class.isAssignableFrom(representationClass);}  }
class C{  public void resourcesStart() throws LifecycleException {  if (!resources.getState().isAvailable()) {    resources.start();  }  if (effectiveMajorVersion >= 3 && addWebinfClassesResources) {    WebResource webinfClassesResource=resources.getResource("/WEB-INF/classes/META-INF/resources");    if (webinfClassesResource.isDirectory()) {      getResources().createWebResourceSet(WebResourceRoot.ResourceSetType.RESOURCE_JAR,"/",webinfClassesResource.getURL(),"/");    }  }}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  if (m_needToCallStartDocument)   startDocumentInternal();  if (m_tracer != null) {    super.fireStartElem(elementName);    this.firePseudoAttributes();  }  return;}  }
class C{  @Override public int compare(ConnectionHandlerDescriptor desc1,ConnectionHandlerDescriptor desc2){  int result=0;  if (sortColumn == 0) {    if (desc1.getAddresses().equals(desc2.getAddresses())) {      Integer port1=Integer.valueOf(desc1.getPort());      Integer port2=Integer.valueOf(desc2.getPort());      result=port1.compareTo(port2);    } else {      result=getAddressPortString(desc1).compareTo(getAddressPortString(desc2));    }    if (result == 0) {      result=getProtocolString(desc1).compareTo(getProtocolString(desc2));    }    if (result == 0) {      result=desc1.getState().compareTo(desc2.getState());    }  } else   if (sortColumn == 1) {    result=getProtocolString(desc1).compareTo(getProtocolString(desc2));    if (result == 0) {      result=getAddressPortString(desc1).compareTo(getAddressPortString(desc2));    }    if (result == 0) {      result=desc1.getState().compareTo(desc2.getState());    }  } else {    result=desc1.getState().compareTo(desc2.getState());    if (result == 0) {      result=getAddressPortString(desc1).compareTo(getAddressPortString(desc2));    }    if (result == 0) {      result=getProtocolString(desc1).compareTo(getProtocolString(desc2));    }  }  if (!sortAscending) {    result=-result;  }  return result;}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  private DevicesOpenHelper(Context context){  super(context,DB_NAME,null,SCHEMA_VERSION);  this.context=context;  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {    SQLiteDatabase db=getWritableDatabase();    db.enableWriteAheadLogging();    db.execSQL("PRAGMA foreign_keys = ON;");  }}  }
class C{  public static UIComponent findComponent(UIComponent base,String id){  if (id.equals(base.getId()))   return base;  UIComponent kid=null;  UIComponent result=null;  Iterator kids=base.getFacetsAndChildren();  while (kids.hasNext() && (result == null)) {    kid=(UIComponent)kids.next();    if (id.equals(kid.getId())) {      result=kid;      break;    }    result=findComponent(kid,id);    if (result != null) {      break;    }  }  return result;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws SAXException {  String msg="";  super.startElement(handler,uri,localName,rawName,attributes);  ElemTemplateElement ancestor=handler.getElemTemplateElement().getParentElem();  while (ancestor != null && !(ancestor instanceof ElemExsltFunction)) {    if (ancestor instanceof ElemVariable || ancestor instanceof ElemParam || ancestor instanceof ElemExsltFuncResult) {      msg="func:result cannot appear within a variable, parameter, or another func:result.";      handler.error(msg,new SAXException(msg));    }    ancestor=ancestor.getParentElem();  }  if (ancestor == null) {    msg="func:result must appear in a func:function element";    handler.error(msg,new SAXException(msg));  }}  }
class C{  private List<Integer> computeExpectedServersSafeData(int rs1Gid,long rs1GenId,int rs1Scen,int rs2Gid,long rs2GenId,int rs2Scen,int rs3Gid,long rs3GenId,int rs3Scen){  List<Integer> expectedServers=new ArrayList<>();  assertRSExpectations(expectedServers,rs1Gid,rs1GenId,rs1Scen,FRS1_ID);  assertRSExpectations(expectedServers,rs2Gid,rs2GenId,rs2Scen,FRS2_ID);  assertRSExpectations(expectedServers,rs3Gid,rs3GenId,rs3Scen,FRS3_ID);  return expectedServers;}  }
class C{  @Override public void close() throws IOException {  try {    in.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public PluginResult.PostOperation invokePostOperationComparePlugins(PostOperationCompareOperation compareOperation){  PluginResult.PostOperation result=null;  PluginResult.PostOperation finalResult=null;  ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(compareOperation);  for (  DirectoryServerPlugin p : postOperationComparePlugins) {    if (isInternalOperation(compareOperation,p) || isSkipped(skippedPlugins,p)) {      continue;    }    try {      result=p.doPostOperation(compareOperation);    } catch (    Exception e) {      logException(compareOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(compareOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);    } else     if (!result.continueProcessing()) {      finalResult=result;    }  }  if (result == null) {    finalResult=PluginResult.PostOperation.continueOperationProcessing();  } else   if (finalResult == null) {    finalResult=result;  }  return finalResult;}  }
class C{  public void generate_snapshot(){  undo_items.generate_snapshot();  brd_components.generate_snapshot();}  }
class C{  private void buildStatements(StringBuilder sb,List<Statement> statements,int indentation) throws SyntaxException {  for (  Statement stmt : statements) {    buildStatement(sb,stmt,indentation);    if (sb.charAt(sb.length() - 1) != '\n') {      sb.append(";\n");    }  }}  }
class C{  private void inactivateUserAccount(AMIdentity amIdentity){  debug.message("entering ISAccountLockout.inactivateUserAccount");  try {    Map attrMap=new HashMap();    Set attrValSet1=new HashSet();    if ((lockoutAttrName != null) && (lockoutAttrValue != null)) {      attrValSet1.add(lockoutAttrValue);      attrMap.put(lockoutAttrName,attrValSet1);    }    Set attrValSet2=new HashSet();    attrValSet2.add(USER_INACTIVE);    attrMap.put(USER_STATUS_ATTR,attrValSet2);    amIdentity.setAttributes(attrMap);    amIdentity.store();  } catch (  Exception e) {    debug.error("ISAccountLockout.inactivateUserAccount",e);  }}  }
class C{  @Override protected void passivate() throws SQLException {  setClosedInternal(true);  if (getConnectionInternal() != null) {    getConnectionInternal().removeTrace(this);  }  final List<AbandonedTrace> resultSets=getTrace();  if (resultSets != null) {    final ResultSet[] set=resultSets.toArray(new ResultSet[resultSets.size()]);    for (    final ResultSet element : set) {      element.close();    }    clearTrace();  }  super.passivate();}  }
class C{  public Attribute toAttribute() throws IllegalStateException {  Attribute attribute=toAttribute0();  values=new SmallSet<>();  return attribute;}  }
class C{  public void testCompareToZeroPos(){  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int bSign=1;  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(-1,aNumber.compareTo(bNumber));}  }
class C{  private boolean isAttributeSyntaxValid(AttributeType attribute){  return attribute.getSyntax().getOID().equals(SYNTAX_DN_OID) || attribute.getSyntax().getOID().equals(SYNTAX_NAME_AND_OPTIONAL_UID_OID);}  }
class C{  void mirror(){  for (int x=0; x < bitMatrix.getWidth(); x++) {    for (int y=x + 1; y < bitMatrix.getHeight(); y++) {      if (bitMatrix.get(x,y) != bitMatrix.get(y,x)) {        bitMatrix.flip(y,x);        bitMatrix.flip(x,y);      }    }  }}  }
class C{  public boolean shouldSelectCell(EventObject anEvent){  return true;}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  @Override public Object postProcessAfterInitialization(Object bean,String beanName) throws BeansException {  if (!isMatchPackage(bean)) {    return bean;  }  Class<?> clazz=bean.getClass();  if (isProxyBean(bean)) {    clazz=AopUtils.getTargetClass(bean);  }  MotanService service=clazz.getAnnotation(MotanService.class);  if (service != null) {    ServiceConfigBean<Object> serviceConfig=new ServiceConfigBean<Object>();    if (void.class.equals(service.interfaceClass())) {      if (clazz.getInterfaces().length > 0) {        Class<Object> clz=(Class<Object>)clazz.getInterfaces()[0];        serviceConfig.setInterface(clz);      } else {        throw new IllegalStateException("Failed to export remote service class " + clazz.getName() + ", cause: The @Service undefined interfaceClass or interfaceName, and the service class unimplemented any interfaces.");      }    } else {      serviceConfig.setInterface((Class<Object>)service.interfaceClass());    }    if (beanFactory != null) {      serviceConfig.setBeanFactory(beanFactory);      if (service.basicService() != null && service.basicService().length() > 0) {        serviceConfig.setBasicServiceConfig(beanFactory.getBean(service.basicService(),BasicServiceInterfaceConfig.class));      }      if (service.export() != null && service.export().length() > 0) {        serviceConfig.setExport(service.export());      }      if (service.host() != null && service.host().length() > 0) {        serviceConfig.setHost(service.host());      }      String protocolValue=null;      if (service.protocol() != null && service.protocol().length() > 0) {        protocolValue=service.protocol();      } else       if (service.export() != null && service.export().length() > 0) {        protocolValue=ConfigUtil.extractProtocols(service.export());      }      if (!StringUtils.isBlank(protocolValue)) {        List<ProtocolConfig> protocolConfigs=SpringBeanUtil.getMultiBeans(beanFactory,protocolValue,SpringBeanUtil.COMMA_SPLIT_PATTERN,ProtocolConfig.class);        serviceConfig.setProtocols(protocolConfigs);      }      if (service.registry() != null && service.registry().length() > 0) {        List<RegistryConfig> registryConfigs=SpringBeanUtil.getMultiBeans(beanFactory,service.registry(),SpringBeanUtil.COMMA_SPLIT_PATTERN,RegistryConfig.class);        serviceConfig.setRegistries(registryConfigs);      }      if (service.extConfig() != null && service.extConfig().length() > 0) {        serviceConfig.setExtConfig(beanFactory.getBean(service.extConfig(),ExtConfig.class));      }      if (service.application() != null && service.application().length() > 0) {        serviceConfig.setApplication(service.application());      }      if (service.module() != null && service.module().length() > 0) {        serviceConfig.setModule(service.module());      }      if (service.group() != null && service.group().length() > 0) {        serviceConfig.setGroup(service.group());      }      if (service.version() != null && service.version().length() > 0) {        serviceConfig.setVersion(service.version());      }      if (service.proxy() != null && service.proxy().length() > 0) {        serviceConfig.setProxy(service.proxy());      }      if (service.filter() != null && service.filter().length() > 0) {        serviceConfig.setFilter(service.filter());      }      if (service.actives() > 0) {        serviceConfig.setActives(service.actives());      }      if (service.async()) {        serviceConfig.setAsync(service.async());      }      if (service.mock() != null && service.mock().length() > 0) {        serviceConfig.setMock(service.mock());      }      if (service.shareChannel()) {        serviceConfig.setShareChannel(service.shareChannel());      }      if (service.throwException()) {        serviceConfig.setThrowException(service.throwException());      }      if (service.requestTimeout() > 0) {        serviceConfig.setRequestTimeout(service.requestTimeout());      }      if (service.register()) {        serviceConfig.setRegister(service.register());      }      if (service.accessLog()) {        serviceConfig.setAccessLog("true");      }      if (service.check()) {        serviceConfig.setCheck("true");      }      if (service.usegz()) {        serviceConfig.setUsegz(service.usegz());      }      if (service.retries() > 0) {        serviceConfig.setRetries(service.retries());      }      if (service.mingzSize() > 0) {        serviceConfig.setMingzSize(service.mingzSize());      }      if (service.codec() != null && service.codec().length() > 0) {        serviceConfig.setCodec(service.codec());      }      try {        serviceConfig.afterPropertiesSet();      } catch (      RuntimeException e) {        throw (RuntimeException)e;      }catch (      Exception e) {        throw new IllegalStateException(e.getMessage(),e);      }    }    serviceConfig.setRef(bean);    serviceConfigs.add(serviceConfig);    serviceConfig.export();  }  return bean;}  }
class C{  public boolean isSaveChunk(){  return saveChunk;}  }
class C{  private static void initiateAuthnRequest(final HttpServletRequest request,final HttpServletResponse response,final String spEntityID,final String idpEntityID,final String realmName,final Map paramsMap,final SAML2EventLogger auditor) throws SAML2Exception {  if (FSUtils.needSetLBCookieAndRedirect(request,response,false)) {    return;  }  if (spEntityID == null) {    SAML2Utils.debug.error("SPSSOFederate:Service Provider ID  is missing.");    String[] data={spEntityID};    LogUtil.error(Level.INFO,LogUtil.INVALID_SP,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("nullSPEntityID"));  }  if (idpEntityID == null) {    SAML2Utils.debug.error("SPSSOFederate: Identity Provider ID is missing .");    String[] data={idpEntityID};    LogUtil.error(Level.INFO,LogUtil.INVALID_IDP,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("nullIDPEntityID"));  }  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message("SPSSOFederate: in initiateSSOFed");    SAML2Utils.debug.message("SPSSOFederate: spEntityID is : " + spEntityID);    SAML2Utils.debug.message("SPSSOFederate: idpEntityID : " + idpEntityID);  }  String realm=getRealm(realmName);  try {    if (sm == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("errorMetaManager"));    }    Map spConfigAttrsMap=getAttrsMapForAuthnReq(realm,spEntityID);    SPSSODescriptorElement spsso=getSPSSOForAuthnReq(realm,spEntityID);    if (spsso == null) {      String[] data={spEntityID};      LogUtil.error(Level.INFO,LogUtil.SP_METADATA_ERROR,data,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));    }    List extensionsList=getExtensionsList(spEntityID,realm);    IDPSSODescriptorElement idpsso=getIDPSSOForAuthnReq(realm,idpEntityID);    if (idpsso == null) {      String[] data={idpEntityID};      LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));    }    String binding=getParameter(paramsMap,SAML2Constants.REQ_BINDING);    List<SingleSignOnServiceElement> ssoServiceList=idpsso.getSingleSignOnService();    final SingleSignOnServiceElement endPoint=getSingleSignOnServiceEndpoint(ssoServiceList,binding);    if (endPoint == null || StringUtils.isEmpty(endPoint.getLocation())) {      String[] data={idpEntityID};      LogUtil.error(Level.INFO,LogUtil.SSO_NOT_FOUND,data,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("ssoServiceNotfound"));    }    String ssoURL=endPoint.getLocation();    SAML2Utils.debug.message("SPSSOFederate: SingleSignOnService URL : {}",ssoURL);    if (binding == null) {      SAML2Utils.debug.message("SPSSOFederate: reqBinding is null using endpoint binding: {} ",endPoint.getBinding());      binding=endPoint.getBinding();      if (binding == null) {        String[] data={idpEntityID};        LogUtil.error(Level.INFO,LogUtil.NO_RETURN_BINDING,data,null);        throw new SAML2Exception(SAML2Utils.bundle.getString("UnableTofindBinding"));      }    }    AuthnRequest authnRequest=createAuthnRequest(realm,spEntityID,paramsMap,spConfigAttrsMap,extensionsList,spsso,idpsso,ssoURL,false);    if (null != auditor && null != authnRequest) {      auditor.setRequestId(authnRequest.getID());    }    SAML2ServiceProviderAdapter spAdapter=SAML2Utils.getSPAdapterClass(spEntityID,realmName);    if (spAdapter != null) {      spAdapter.preSingleSignOnRequest(spEntityID,idpEntityID,realmName,request,response,authnRequest);    }    String authReqXMLString=authnRequest.toXMLString(true,true);    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("SPSSOFederate: AuthnRequest:" + authReqXMLString);    }    String relayState=getParameter(paramsMap,SAML2Constants.RELAY_STATE);    SAML2Utils.validateRelayStateURL(realm,spEntityID,relayState,SAML2Constants.SP_ROLE);    String relayStateID=null;    if (relayState != null && relayState.length() > 0) {      relayStateID=getRelayStateID(relayState,authnRequest.getID());    }    if (binding.equals(SAML2Constants.HTTP_POST)) {      String encodedReqMsg=getPostBindingMsg(idpsso,spsso,spConfigAttrsMap,authnRequest);      SAML2Utils.postToTarget(request,response,"SAMLRequest",encodedReqMsg,"RelayState",relayStateID,ssoURL);    } else {      String redirect=getRedirect(authReqXMLString,relayStateID,ssoURL,idpsso,spsso,spConfigAttrsMap);      response.sendRedirect(redirect);    }    String[] data={ssoURL};    LogUtil.access(Level.INFO,LogUtil.REDIRECT_TO_IDP,data,null);    AuthnRequestInfo reqInfo=new AuthnRequestInfo(request,response,realm,spEntityID,idpEntityID,authnRequest,relayState,paramsMap);synchronized (SPCache.requestHash) {      SPCache.requestHash.put(authnRequest.getID(),reqInfo);    }    if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {      long sessionExpireTime=currentTimeMillis() / 1000 + SPCache.interval;      String key=authnRequest.getID();      try {        SAML2FailoverUtils.saveSAML2TokenWithoutSecondaryKey(key,new AuthnRequestInfoCopy(reqInfo),sessionExpireTime);        if (SAML2Utils.debug.messageEnabled()) {          SAML2Utils.debug.message("SPSSOFederate.initiateAuthnRequest:" + " SAVE AuthnRequestInfoCopy for requestID " + key);        }      } catch (      SAML2TokenRepositoryException e) {        SAML2Utils.debug.error("SPSSOFederate.initiateAuthnRequest: There was a problem saving the " + "AuthnRequestInfoCopy in the SAML2 Token Repository for requestID " + key,e);        throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));      }    }  } catch (  IOException ioe) {    SAML2Utils.debug.error("SPSSOFederate: Exception :",ioe);    throw new SAML2Exception(SAML2Utils.bundle.getString("errorCreatingAuthnRequest"));  }catch (  SAML2MetaException sme) {    SAML2Utils.debug.error("SPSSOFederate:Error retrieving metadata",sme);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }}  }
class C{  private void enableBle(){  final Intent enableIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);  startActivityForResult(enableIntent,REQUEST_ENABLE_BT);}  }
class C{  private void readVersion() throws IOException, ClassFormatException {  Utility.skipFully(dataInputStream,4);}  }
class C{  public MethodHandle findSetter(Class<?> refc,String name,Class<?> type) throws NoSuchFieldException, IllegalAccessException {  MemberName field=resolveOrFail(REF_putField,refc,name,type);  return getDirectField(REF_putField,refc,field);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  boolean state;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  state=streetAttr.getSpecified();  assertFalse("streetNotSpecified",state);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.initializeTestBackend(true);  TestCaseUtils.clearBackend("userRoot","dc=example,dc=com");}  }
class C{  public void repaint(){}  }
class C{  public boolean hasValue(AttributeDescription attributeDescription,ByteString value){  Attribute attr=getAttribute(attributeDescription);  return attr != null && attr.contains(value);}  }
class C{  public boolean validate(){  boolean result=search_graph.anchor.validate();  if (result == true) {    System.out.println("Delauny triangulation check passed ok");  } else {    System.out.println("Delauny triangulation check has detected problems");  }  return result;}  }
class C{  public FieldFrameBodyIMG(Lyrics3Image image){  images.add(image);}  }
class C{  public static int stopDS(String[] args,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  LocalizableMessage toolDescription=INFO_STOPDS_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_STOP_DS.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  BooleanArgument checkStoppability;  BooleanArgument quietMode;  BooleanArgument restart;  BooleanArgument showUsage;  BooleanArgument trustAll;  FileBasedArgument bindPWFile;  FileBasedArgument keyStorePWFile;  FileBasedArgument trustStorePWFile;  IntegerArgument port;  StringArgument bindDN;  StringArgument bindPW;  StringArgument certNickname;  StringArgument host;  StringArgument keyStoreFile;  StringArgument keyStorePW;  StringArgument proxyAuthzID;  StringArgument saslOption;  StringArgument stopReason;  StringArgument stopTimeStr;  StringArgument trustStoreFile;  StringArgument trustStorePW;  StringArgument propertiesFileArgument;  BooleanArgument noPropertiesFileArgument;  try {    propertiesFileArgument=StringArgument.builder(OPTION_LONG_PROP_FILE_PATH).description(INFO_DESCRIPTION_PROP_FILE_PATH.get()).valuePlaceholder(INFO_PROP_FILE_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    argParser.setFilePropertiesArgument(propertiesFileArgument);    noPropertiesFileArgument=BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildAndAddToParser(argParser);    argParser.setNoPropertiesFileArgument(noPropertiesFileArgument);    host=StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(INFO_STOPDS_DESCRIPTION_HOST.get()).defaultValue("127.0.0.1").valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildAndAddToParser(argParser);    port=IntegerArgument.builder(OPTION_LONG_PORT).shortIdentifier(OPTION_SHORT_PORT).description(INFO_STOPDS_DESCRIPTION_PORT.get()).range(1,65535).defaultValue(AdministrationConnector.DEFAULT_ADMINISTRATION_CONNECTOR_PORT).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindDN=StringArgument.builder(OPTION_LONG_BINDDN).shortIdentifier(OPTION_SHORT_BINDDN).description(INFO_STOPDS_DESCRIPTION_BINDDN.get()).valuePlaceholder(INFO_BINDDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPW=StringArgument.builder(OPTION_LONG_BINDPWD).shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_STOPDS_DESCRIPTION_BINDPW.get()).valuePlaceholder(INFO_BINDPWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPWFile=FileBasedArgument.builder(OPTION_LONG_BINDPWD_FILE).shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_STOPDS_DESCRIPTION_BINDPWFILE.get()).valuePlaceholder(INFO_BINDPWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    saslOption=StringArgument.builder(OPTION_LONG_SASLOPTION).shortIdentifier(OPTION_SHORT_SASLOPTION).description(INFO_STOPDS_DESCRIPTION_SASLOPTIONS.get()).multiValued().valuePlaceholder(INFO_SASL_OPTION_PLACEHOLDER.get()).buildAndAddToParser(argParser);    proxyAuthzID=StringArgument.builder(OPTION_LONG_PROXYAUTHID).shortIdentifier(OPTION_SHORT_PROXYAUTHID).description(INFO_STOPDS_DESCRIPTION_PROXYAUTHZID.get()).valuePlaceholder(INFO_PROXYAUTHID_PLACEHOLDER.get()).buildAndAddToParser(argParser);    stopReason=StringArgument.builder("stopReason").shortIdentifier('r').description(INFO_STOPDS_DESCRIPTION_STOP_REASON.get()).valuePlaceholder(INFO_STOP_REASON_PLACEHOLDER.get()).buildAndAddToParser(argParser);    checkStoppability=BooleanArgument.builder(OPTION_LONG_CHECK_STOPPABILITY).description(INFO_STOPDS_CHECK_STOPPABILITY.get()).hidden().buildAndAddToParser(argParser);    BooleanArgument.builder(OPTION_LONG_WINDOWS_NET_STOP).description(INFO_STOPDS_DESCRIPTION_WINDOWS_NET_STOP.get()).hidden().buildAndAddToParser(argParser);    restart=restartArgument();    argParser.addArgument(restart);    stopTimeStr=StringArgument.builder("stopTime").shortIdentifier('t').description(INFO_STOPDS_DESCRIPTION_STOP_TIME.get()).valuePlaceholder(INFO_STOP_TIME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustAll=trustAllArgument();    argParser.addArgument(trustAll);    keyStoreFile=StringArgument.builder(OPTION_LONG_KEYSTOREPATH).shortIdentifier(OPTION_SHORT_KEYSTOREPATH).description(INFO_STOPDS_DESCRIPTION_KSFILE.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    keyStorePW=StringArgument.builder(OPTION_LONG_KEYSTORE_PWD).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD).description(INFO_STOPDS_DESCRIPTION_KSPW.get()).valuePlaceholder(INFO_KEYSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    keyStorePWFile=FileBasedArgument.builder(OPTION_LONG_KEYSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD_FILE).description(INFO_STOPDS_DESCRIPTION_KSPWFILE.get()).valuePlaceholder(INFO_KEYSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    certNickname=StringArgument.builder("certNickname").shortIdentifier('N').description(INFO_DESCRIPTION_CERT_NICKNAME.get()).valuePlaceholder(INFO_NICKNAME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStoreFile=StringArgument.builder(OPTION_LONG_TRUSTSTOREPATH).shortIdentifier(OPTION_SHORT_TRUSTSTOREPATH).description(INFO_STOPDS_DESCRIPTION_TSFILE.get()).valuePlaceholder(INFO_TRUSTSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePW=StringArgument.builder(OPTION_LONG_TRUSTSTORE_PWD).shortIdentifier('T').description(INFO_STOPDS_DESCRIPTION_TSPW.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePWFile=FileBasedArgument.builder(OPTION_LONG_TRUSTSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_TRUSTSTORE_PWD_FILE).description(INFO_STOPDS_DESCRIPTION_TSPWFILE.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    quietMode=quietArgument();    argParser.addArgument(quietMode);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage,out);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return LDAPResultCode.SUCCESS;  }  if (quietMode.isPresent()) {    out=NullOutputStream.printStream();  }  if (checkStoppability.isPresent()) {    System.exit(checkStoppability(argParser,out,err));  }  if (bindPW.isPresent() && bindPWFile.isPresent()) {    printWrappedText(err,ERR_STOPDS_MUTUALLY_EXCLUSIVE_ARGUMENTS.get(bindPW.getLongIdentifier(),bindPWFile.getLongIdentifier()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (keyStorePW.isPresent() && keyStorePWFile.isPresent()) {    printWrappedText(err,ERR_STOPDS_MUTUALLY_EXCLUSIVE_ARGUMENTS.get(keyStorePW.getLongIdentifier(),keyStorePWFile.getLongIdentifier()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (trustStorePW.isPresent() && trustStorePWFile.isPresent()) {    printWrappedText(err,ERR_STOPDS_MUTUALLY_EXCLUSIVE_ARGUMENTS.get(trustStorePW.getLongIdentifier(),trustStorePWFile.getLongIdentifier()));    return CLIENT_SIDE_PARAM_ERROR;  }  Date stopTime=new Date();  if (stopTimeStr.isPresent()) {    String timeStr=stopTimeStr.getValue();    if (!TaskTool.NOW.equals(timeStr)) {      try {        stopTime=parseDateTimeString(timeStr);      } catch (      Exception e) {        printWrappedText(err,ERR_STOPDS_CANNOT_DECODE_STOP_TIME.get());        return CLIENT_SIDE_PARAM_ERROR;      }      Date currentDate=new Date(System.currentTimeMillis());      if (currentDate.after(stopTime)) {        printWrappedText(err,ERR_STOPDS_DATETIME_ALREADY_PASSED.get(timeStr));        return CLIENT_SIDE_PARAM_ERROR;      }    }  }  LDAPConnectionOptions connectionOptions=new LDAPConnectionOptions();  connectionOptions.setVersionNumber(3);  try {    String clientAlias;    if (certNickname.isPresent()) {      clientAlias=certNickname.getValue();    } else {      clientAlias=null;    }    SSLConnectionFactory sslConnectionFactory=new SSLConnectionFactory();    sslConnectionFactory.init(trustAll.isPresent(),keyStoreFile.getValue(),keyStorePW.getValue(),clientAlias,trustStoreFile.getValue(),trustStorePW.getValue());    connectionOptions.setSSLConnectionFactory(sslConnectionFactory);  } catch (  SSLConnectionException sce) {    printWrappedText(err,ERR_STOPDS_CANNOT_INITIALIZE_SSL.get(sce.getMessage()));    return CLIENT_SIDE_LOCAL_ERROR;  }  if (saslOption.isPresent()) {    String mechanism=null;    LinkedList<String> options=new LinkedList<>();    for (    String s : saslOption.getValues()) {      int equalPos=s.indexOf('=');      if (equalPos <= 0) {        printWrappedText(err,ERR_STOPDS_CANNOT_PARSE_SASL_OPTION.get(s));        return CLIENT_SIDE_PARAM_ERROR;      } else {        String name=s.substring(0,equalPos);        if (name.equalsIgnoreCase("mech")) {          mechanism=s;        } else {          options.add(s);        }      }    }    if (mechanism == null) {      printWrappedText(err,ERR_STOPDS_NO_SASL_MECHANISM.get());      return CLIENT_SIDE_PARAM_ERROR;    }    connectionOptions.setSASLMechanism(mechanism);    for (    String option : options) {      connectionOptions.addSASLProperty(option);    }  }  AtomicInteger nextMessageID=new AtomicInteger(1);  LDAPConnection connection;  try {    connection=new LDAPConnection(host.getValue(),port.getIntValue(),connectionOptions,out,err);    connection.connectToHost(bindDN.getValue(),LDAPConnectionArgumentParser.getPasswordValue(bindPW,bindPWFile,bindDN,out,err),nextMessageID);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_STOPDS_CANNOT_DETERMINE_PORT.get(port.getLongIdentifier(),ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }catch (  LDAPConnectionException lce) {    LocalizableMessage message;    if (lce.getCause() != null && lce.getCause().getCause() != null && lce.getCause().getCause() instanceof SSLException) {      message=ERR_STOPDS_CANNOT_CONNECT_SSL.get(host.getValue(),port.getValue());    } else {      String hostPort=host.getValue() + ":" + port.getValue();      message=ERR_STOPDS_CANNOT_CONNECT.get(hostPort,lce.getMessage());    }    printWrappedText(err,message);    return CLIENT_SIDE_CONNECT_ERROR;  }  LDAPReader reader=connection.getLDAPReader();  LDAPWriter writer=connection.getLDAPWriter();  String taskID=UUID.randomUUID().toString();  ByteString entryDN=ByteString.valueOfUtf8(ATTR_TASK_ID + "=" + taskID+ ","+ SCHEDULED_TASK_BASE_RDN+ ","+ DN_TASK_ROOT);  ArrayList<RawAttribute> attributes=new ArrayList<>();  attributes.add(new LDAPAttribute(ATTR_OBJECTCLASS,newArrayList("top","ds-task","ds-task-shutdown")));  attributes.add(new LDAPAttribute(ATTR_TASK_ID,taskID));  attributes.add(new LDAPAttribute(ATTR_TASK_CLASS,ShutdownTask.class.getName()));  if (restart.isPresent()) {    attributes.add(new LDAPAttribute(ATTR_RESTART_SERVER,"true"));  }  if (stopReason.isPresent()) {    attributes.add(new LDAPAttribute(ATTR_SHUTDOWN_MESSAGE,stopReason.getValue()));  }  SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_GMT_TIME);  dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));  String stopTimeValues=dateFormat.format(stopTime);  attributes.add(new LDAPAttribute(ATTR_TASK_SCHEDULED_START_TIME,stopTimeValues));  ArrayList<Control> controls=new ArrayList<>();  if (proxyAuthzID.isPresent()) {    controls.add(new ProxiedAuthV2Control(ByteString.valueOfUtf8(proxyAuthzID.getValue())));  }  AddRequestProtocolOp addRequest=new AddRequestProtocolOp(entryDN,attributes);  LDAPMessage requestMessage=new LDAPMessage(nextMessageID.getAndIncrement(),addRequest,controls);  LDAPMessage responseMessage;  try {    writer.writeMessage(requestMessage);    responseMessage=reader.readMessage();    if (responseMessage == null) {      printWrappedText(err,ERR_STOPDS_UNEXPECTED_CONNECTION_CLOSURE.get());      return CLIENT_SIDE_SERVER_DOWN;    }  } catch (  DecodeException|LDAPException e) {    printWrappedText(err,ERR_STOPDS_DECODE_ERROR.get(e.getMessage()));    return CLIENT_SIDE_DECODING_ERROR;  }catch (  IOException ioe) {    printWrappedText(err,ERR_STOPDS_IO_ERROR.get(ioe));    return LDAPResultCode.CLIENT_SIDE_SERVER_DOWN;  }  if (responseMessage.getProtocolOpType() != LDAPConstants.OP_TYPE_ADD_RESPONSE) {    if (responseMessage.getProtocolOpType() == LDAPConstants.OP_TYPE_EXTENDED_RESPONSE) {      ExtendedResponseProtocolOp extendedResponse=responseMessage.getExtendedResponseProtocolOp();      String responseOID=extendedResponse.getOID();      if (LDAPConstants.OID_NOTICE_OF_DISCONNECTION.equals(responseOID)) {        printWrappedText(err,extendedResponse.getErrorMessage());        return extendedResponse.getResultCode();      }    }    printWrappedText(err,ERR_STOPDS_INVALID_RESPONSE_TYPE.get(responseMessage.getProtocolOpName()));    return CLIENT_SIDE_LOCAL_ERROR;  }  AddResponseProtocolOp addResponse=responseMessage.getAddResponseProtocolOp();  printWrappedText(err,addResponse.getErrorMessage());  return addResponse.getResultCode();}  }
class C{  public void addSubpath(Subpath subpath){  subpaths.add(subpath);  currentPoint=subpath.getLastPoint();}  }
class C{  private String constructInputStream(){  StringBuilder sbuffer=new StringBuilder(2000);  String key=null;  String value=null;  Set set;  Iterator it;  StringBuilder tempBuffer=new StringBuilder();  boolean fileBackend=false;  String basedir=null;  String famuri=null;  try {    famuri=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);    famuri=famuri.replace('\\','/');    basedir=SystemProperties.get(SystemProperties.CONFIG_PATH);    basedir=basedir.replace('\\','/');    if (famuri.startsWith("/")) {      byte[] btmp=famuri.getBytes();      famuri=new String(btmp,1,(btmp.length - 1));    }    if (basedir.endsWith("/")) {      byte[] btmp=basedir.getBytes();      basedir=new String(btmp,0,(btmp.length - 1));    }    logAttributes=smsLogSchema.getAttributeDefaults();    key=LogConstants.BACKEND;    value=CollectionHelper.getMapAttr(logAttributes,key);    if ((value == null) || (value.length() == 0)) {      debug.warning("LogConfigReader: Backend string is null");    } else {      sbuffer.append(key).append("=").append(value).append(LogConstants.CRLF);      fileBackend=value.equals("File");    }  } catch (  Exception e) {    debug.error("LogConfigReader: Could not read Backend ",e);  }  copyConfigOption(sbuffer,LogConstants.DB_DRIVER,logAttributes,"DB driver");  copyConfigOption(sbuffer,LogConstants.DB_PASSWORD,logAttributes,"DB password");  copyConfigOption(sbuffer,LogConstants.DB_USER,logAttributes,"DB user");  try {    key=LogConstants.ALL_FIELDS;    tempBuffer.append("time, Data, ");    set=(Set)logAttributes.get(key);    if (!useOldLogFormat) {      it=set.iterator();    } else {      TreeSet orderedHeaders=new TreeSet(new LogHeaderComparator());      orderedHeaders.addAll(set);      it=orderedHeaders.descendingIterator();    }    String headerValue=(String)it.next();    if (headerValue.contains(Constants.COLON)) {      headerValue=headerValue.substring(headerValue.indexOf(Constants.COLON) + 1);    }    tempBuffer.append(headerValue);    while (it.hasNext()) {      headerValue=(String)it.next();      if (headerValue.contains(Constants.COLON)) {        headerValue=headerValue.substring(headerValue.indexOf(Constants.COLON) + 1);      }      tempBuffer.append(", ").append(headerValue);    }    sbuffer.append(key).append(Constants.EQUALS).append(tempBuffer).append(LogConstants.CRLF);  } catch (  Exception ex) {    debug.error("LogConfigReader: Could not read all field  ",ex);  }  try {    key=LogConstants.LOG_FIELDS;    set=(Set)logAttributes.get(key);    if ((set != null) && (!set.isEmpty())) {      it=set.iterator();      tempBuffer=new StringBuilder();      tempBuffer.append((String)it.next());      while (it.hasNext()) {        tempBuffer.append(", ").append((String)it.next());      }      sbuffer.append(key).append("=").append(tempBuffer).append(LogConstants.CRLF);    }  } catch (  Exception e) {    debug.error("LogConfigReader: Could not read log-field ",e);  }  copyConfigOption(sbuffer,LogConstants.ENABLE_ROTATION,logAttributes,"Enable Logfile rotation");  copyConfigOption(sbuffer,LogConstants.MAX_FILE_SIZE,logAttributes,"Max File Size");  copyConfigOption(sbuffer,LogConstants.LOGFILE_PREFIX,logAttributes,"Logfile prefix string");  copyConfigOption(sbuffer,LogConstants.LOGFILE_SUFFIX,logAttributes,"Logfile suffix string");  copyConfigOption(sbuffer,LogConstants.LOGFILE_ROTATION,logAttributes,"Logfile rotation interval");  copyConfigOption(sbuffer,LogConstants.NUM_HISTORY_FILES,logAttributes,"Num history files");  copyConfigOption(sbuffer,LogConstants.ARCHIVER,logAttributes,"Archiver class");  copyConfigOption(sbuffer,LogConstants.FILE_HANDLER,logAttributes,"File handler class");  copyConfigOption(sbuffer,LogConstants.SECURE_FILE_HANDLER,logAttributes,"Secure File handler class");  copyConfigOption(sbuffer,LogConstants.DB_HANDLER,logAttributes,"DB handler class");  copyConfigOption(sbuffer,LogConstants.REMOTE_HANDLER,logAttributes,"Remote handler class");  copyConfigOption(sbuffer,LogConstants.SYSLOG_HANDLER,logAttributes,"Syslog handler class");  copyConfigOption(sbuffer,LogConstants.ELF_FORMATTER,logAttributes,"ELF Formatter class");  copyConfigOption(sbuffer,LogConstants.SECURE_ELF_FORMATTER,logAttributes,"Secure ELF Formatter class");  copyConfigOption(sbuffer,LogConstants.DB_FORMATTER,logAttributes,"DB Formatter class");  copyConfigOption(sbuffer,LogConstants.REMOTE_FORMATTER,logAttributes,"Remote Formatter class");  copyConfigOption(sbuffer,LogConstants.SYSLOG_FORMATTER,logAttributes,"Syslog Formatter class");  copyConfigOption(sbuffer,LogConstants.AUTHZ,logAttributes,"Authz class");  getLoggingDirectory(fileBackend,basedir,famuri,sbuffer);  copyConfigOption(sbuffer,LogConstants.SECURITY_STATUS,logAttributes,"Security status");  copyConfigOption(sbuffer,LogConstants.SECURITY_SIGNING_ALGORITHM,logAttributes,"Secure log signing algorithm");  copyConfigOption(sbuffer,LogConstants.SECURE_LOG_HELPER,logAttributes,"Secure log helper class");  try {    key=LogConstants.LOGGER_CERT_STORE;    value=CollectionHelper.getMapAttr(logAttributes,key);    if ((value == null) || (value.length() == 0)) {      debug.warning("LogConfigReader: secure logger " + "certificate store is null");    } else {      value=value.replace('\\','/');      if (value.contains("%BASE_DIR%") || value.contains("%SERVER_URI%")) {        value=value.replace("%BASE_DIR%",basedir);        value=value.replace("%SERVER_URI%",famuri);      }      sbuffer.append(key).append("=").append(value).append(LogConstants.CRLF);    }  } catch (  Exception e) {    debug.error("LogConfigReader: Could not read secure " + "logger certificate store ",e);  }  copyConfigOption(sbuffer,LogConstants.LOGVERIFY_PERIODINSECONDS,logAttributes,"Log verify period");  copyConfigOption(sbuffer,LogConstants.LOGSIGN_PERIODINSECONDS,logAttributes,"Log sign period");  copyConfigOption(sbuffer,LogConstants.FILE_READ_HANDLER,logAttributes,"File read handler");  copyConfigOption(sbuffer,LogConstants.DB_READ_HANDLER,logAttributes,"DB read handler");  copyConfigOption(sbuffer,LogConstants.MAX_RECORDS,logAttributes,"Max records string");  copyConfigOption(sbuffer,LogConstants.FILES_PER_KEYSTORE,logAttributes,"Files per keystore");  copyConfigOption(sbuffer,LogConstants.TOKEN_PROVIDER,logAttributes,"Token provider class");  copyConfigOption(sbuffer,LogConstants.SECURE_TIMESTAMP_GENERATOR,logAttributes,"Secure timestamp generator class");  copyConfigOption(sbuffer,LogConstants.VERIFIER_ACTION_CLASS,logAttributes,"Verifier action class");  copyConfigOption(sbuffer,LogConstants.FILTER_CLASS_NAME,logAttributes,"Filter class");  copyConfigOption(sbuffer,LogConstants.DEBUG_IMPL_CLASS,logAttributes,"Debug impl class");  copyConfigOption(sbuffer,LogConstants.BUFFER_SIZE,logAttributes,"Buffer size");  copyConfigOption(sbuffer,LogConstants.DB_MEM_MAX_RECS,logAttributes,"Max DB mem buffer size");  copyConfigOption(sbuffer,LogConstants.BUFFER_TIME,logAttributes,"Buffer time");  copyConfigOption(sbuffer,LogConstants.TIME_BUFFERING_STATUS,logAttributes,"Time buffering status");  copyConfigOption(sbuffer,LogConstants.ORA_DBDATA_FIELDTYPE,logAttributes,"Oracle DB data type");  copyConfigOption(sbuffer,LogConstants.MYSQL_DBDATA_FIELDTYPE,logAttributes,"MySQL DB data type");  copyConfigOption(sbuffer,LogConstants.ORA_DBDATETIME_FORMAT,logAttributes,"Oracle DB date/time format");  copyConfigOption(sbuffer,LogConstants.MYSQL_DBDATETIME_FORMAT,logAttributes,"MySQL DB date/time format");  copyConfigOption(sbuffer,LogConstants.SYSLOG_PROTOCOL,logAttributes,"Syslog protocol");  copyConfigOption(sbuffer,LogConstants.SYSLOG_HOST,logAttributes,"Syslog host");  copyConfigOption(sbuffer,LogConstants.SYSLOG_PORT,logAttributes,"Syslog port");  copyConfigOption(sbuffer,LogConstants.SYSLOG_FACILITY,logAttributes,"Syslog facility");  copyConfigOption(sbuffer,LogConstants.SYSLOG_CONNECTION_TIMEOUT,logAttributes,"Syslog connection timeout");  try {    key=LogConstants.LOG_STATUS_ATTR;    value=CollectionHelper.getMapAttr(logAttributes,key);    if ((value == null) || (value.length() == 0)) {      debug.warning("LogConfigReader:reading from SystemProperties");      value=SystemProperties.get(LogConstants.LOG_STATUS);      if (debug.messageEnabled()) {        debug.message("####### SystemProperties logStatus is: " + value);      }      if ((value == null) || (value.length() == 0)) {        value="ACTIVE";      }    }    sbuffer.append(key).append("=").append(value).append(LogConstants.CRLF);  } catch (  Exception e) {    debug.error("LogConfigReader:Could not read Log Status attribute");  }  copyConfigOption(sbuffer,LogConstants.LOGGING_LEVEL,logAttributes,"Logging level");  copyConfigOption(sbuffer,LogConstants.LOCALE,smsPlatformSchema.getAttributeDefaults(),"Locale string");  copyConfigOption(sbuffer,LogConstants.LOGGING_SERVICE_URL,smsNamingSchema.getAttributeDefaults(),"Logging service URL");  try {    key=LogConstants.LOG_RESOLVE_HOSTNAME_ATTR;    value=CollectionHelper.getMapAttr(logAttributes,key);    if ((value == null) || (value.length() == 0)) {      debug.warning("LogConfigReader: " + "Log Resolve Hostname attribute is null");      value=SystemProperties.get(LogConstants.LOG_RESOLVE_HOSTNAME);      if (debug.messageEnabled()) {        debug.message("####### SystemProperties resolveHostName is: " + value);      }      if ((value == null) || (value.length() == 0)) {        value="false";      }    }    sbuffer.append(key).append("=").append(value).append(LogConstants.CRLF);  } catch (  Exception e) {    debug.error("LogConfigReader: could not get from DS",e);  }  return sbuffer.toString();}  }
class C{  public static String tabsToSpaces(String in,int tabSize){  StringBuilder buf=new StringBuilder();  int width=0;  for (int i=0; i < in.length(); i++) {switch (in.charAt(i)) {case '\t':      int count=tabSize - (width % tabSize);    width+=count;  while (--count >= 0)   buf.append(' ');break;case '\n':width=0;buf.append(in.charAt(i));break;default :width++;buf.append(in.charAt(i));break;}}return buf.toString();}  }
class C{  private void readExtendedHeader(ByteBuffer byteBuffer,int size) throws InvalidTagException {  byte[] buffer;  int extendedHeaderSize=byteBuffer.getInt();  if (extendedHeaderSize <= TAG_EXT_HEADER_LENGTH) {    throw new InvalidTagException(ErrorMessage.ID3_EXTENDED_HEADER_SIZE_TOO_SMALL.getMsg(getLoggingFilename(),extendedHeaderSize));  }  byteBuffer.get();  byte extFlag=byteBuffer.get();  updateTag=(extFlag & MASK_V24_TAG_UPDATE) != 0;  crcDataFlag=(extFlag & MASK_V24_CRC_DATA_PRESENT) != 0;  tagRestriction=(extFlag & MASK_V24_TAG_RESTRICTIONS) != 0;  if (updateTag) {    byteBuffer.get();  }  if (crcDataFlag) {    byteBuffer.get();    buffer=new byte[TAG_EXT_HEADER_CRC_DATA_LENGTH];    byteBuffer.get(buffer,0,TAG_EXT_HEADER_CRC_DATA_LENGTH);    crcData=0;    for (int i=0; i < TAG_EXT_HEADER_CRC_DATA_LENGTH; i++) {      crcData<<=8;      crcData+=buffer[i];    }  }  if (tagRestriction) {    byteBuffer.get();    buffer=new byte[1];    byteBuffer.get(buffer,0,1);    tagSizeRestriction=(byte)((buffer[0] & MASK_V24_TAG_SIZE_RESTRICTIONS) >> 6);    textEncodingRestriction=(byte)((buffer[0] & MASK_V24_TEXT_ENCODING_RESTRICTIONS) >> 5);    textFieldSizeRestriction=(byte)((buffer[0] & MASK_V24_TEXT_FIELD_SIZE_RESTRICTIONS) >> 3);    imageEncodingRestriction=(byte)((buffer[0] & MASK_V24_IMAGE_ENCODING) >> 2);    imageSizeRestriction=(byte)(buffer[0] & MASK_V24_IMAGE_SIZE_RESTRICTIONS);  }}  }
class C{  public SaltedSHA384FieldStorageScheme() throws Exception {  super(SHA384_LENGTH,ALGORITHM_SHA_384);}  }
class C{  public void testConstructorBytesPositive(){  byte aBytes[]={127,56,100,-1,14,75,-24,-100};  byte rBytes[]={127,56,100,-1,14,75,-24,-100};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public static boolean hasElementChild(Node node){  NodeList nl=node.getChildNodes();  Node child=null;  int length=nl.getLength();  for (int i=0; i < length; i++) {    child=nl.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      return true;    }  }  return false;}  }
class C{  public final boolean isForwardable(){  return flags[FORWARDABLE_TICKET_FLAG];}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.NameIDPolicyElement createNameIDPolicyElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIDPolicyElementImpl(value);}  }
class C{  public InterruptibleReentrantLock(final boolean fairness){  super(fairness);}  }
class C{  public void merge_entries_in_front(BrdTracep p_from_trace,BrdTracep p_to_trace,Polyline p_joined_polyline,int p_from_entry_no,int p_to_entry_no){  for (  AwtreeShapeSearch curr_tree : search_trees) {    curr_tree.merge_entries_in_front(p_from_trace,p_to_trace,p_joined_polyline,p_from_entry_no,p_to_entry_no);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetownerdocument02.class,args);}  }
class C{  public void testGetInstance03() throws NoSuchAlgorithmException, IllegalArgumentException, InvalidAlgorithmParameterException, CertPathValidatorException {  try {    CertPathValidator.getInstance(null,mProv);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathValidator.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  CertPathValidator cerPV;  for (int i=0; i < validValues.length; i++) {    cerPV=CertPathValidator.getInstance(validValues[i],mProv);    assertEquals("Incorrect type",cerPV.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPV.getProvider(),mProv);    checkResult(cerPV);  }}  }
class C{  @Override public String toString(){  return "Document{" + "id=" + id + ", table="+ table+ ", object="+ object+ '}';}  }
class C{  public static void warning(String msg,Throwable t){  debugInst.debug(IDebug.WARNING,msg,t);}  }
class C{  public boolean addAll(int index,RoleList roleList) throws IllegalArgumentException, IndexOutOfBoundsException {  if (roleList == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  return (super.addAll(index,roleList));}  }
class C{  @VisibleForTesting public static boolean containsUndesiredCharacters(String s){  final String[] DODGY_LDAP_CHARS={",","+","\"","\\","<",">",";"};  Set<String> dodgyChars=new HashSet<>(Arrays.asList(DODGY_LDAP_CHARS));  for (int i=0; i < s.length(); i++) {    String sub=s.substring(i,i + 1);    if (dodgyChars.contains(sub)) {      return true;    }  }  return false;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<K,V> n=findFirst(); n != null; n=n.next) {    V v=n.getValidValue();    if (v != null) {      s.writeObject(n.key);      s.writeObject(v);    }  }  s.writeObject(null);}  }
class C{  public static int makeFieldFlag(int bitPosition){  return (1 << (bitPosition - 1));}  }
class C{  public CountingInputStream(InputStream in){  super(in);}  }
class C{  private void runDetectChildren() throws SearchAbandonException, LdapException {  if (controller.isShowContainerOnly() || !isNumSubOrdinatesUsable()) {    runDetectChildrenManually();  } else {    SearchResultEntry entry=getDisplayedEntry();    isLeafNode=!BrowserController.getHasSubOrdinates(entry);  }}  }
class C{  private void assertFileUriEquals(String message,String expectedFile,String actual){  if (!("file:" + expectedFile).equals(actual) && !("file://" + expectedFile).equals(actual)) {    fail("Expected URI for: " + expectedFile + " but was "+ actual+ ". "+ message);  }}  }
class C{  private Field(final String str,final int id){  this.str=str;  this.id=id;}  }
class C{  boolean isSystemTheme(){  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported06.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrsubstringnegativeoffset.class,args);}  }
class C{  public List<VerificationOK> verify(X509Certificate signCert,X509Certificate issuerCert,Date signDate) throws GeneralSecurityException, IOException {  List<VerificationOK> result=new ArrayList<>();  int validOCSPsFound=0;  if (ocsps != null) {    for (    BasicOCSPResp ocspResp : ocsps) {      if (verify(ocspResp,signCert,issuerCert,signDate))       validOCSPsFound++;    }  }  boolean online=false;  if (onlineCheckingAllowed && validOCSPsFound == 0) {    if (verify(getOcspResponse(signCert,issuerCert),signCert,issuerCert,signDate)) {      validOCSPsFound++;      online=true;    }  }  LOGGER.info("Valid OCSPs found: " + validOCSPsFound);  if (validOCSPsFound > 0)   result.add(new VerificationOK(signCert,this.getClass(),"Valid OCSPs Found: " + validOCSPsFound + (online ? " (online)" : "")));  if (verifier != null)   result.addAll(verifier.verify(signCert,issuerCert,signDate));  return result;}  }
class C{  public boolean containsValue(double val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSNumber.class)) {      NSNumber num=(NSNumber)o;      if (num.isReal() && num.doubleValue() == val)       return true;    }  }  return false;}  }
class C{  private static boolean validateManifestResources(String appName,ArrayList<ManifestResource> resources){  boolean passes=true;  int failureCount=0;  ArrayList<Extension> availableExtensions=null;  Iterator<ManifestResource> it=resources.iterator();  while (it.hasNext()) {    ManifestResource mre=it.next();    ArrayList<Extension> requiredList=mre.getRequiredExtensions();    if (requiredList == null) {      continue;    }    if (availableExtensions == null) {      availableExtensions=buildAvailableExtensionsList(resources);    }    if (containerAvailableExtensions == null) {      containerAvailableExtensions=buildAvailableExtensionsList(containerManifestResources);    }    Iterator<Extension> rit=requiredList.iterator();    while (rit.hasNext()) {      boolean found=false;      Extension requiredExt=rit.next();      if (availableExtensions != null) {        Iterator<Extension> ait=availableExtensions.iterator();        while (ait.hasNext()) {          Extension targetExt=ait.next();          if (targetExt.isCompatibleWith(requiredExt)) {            requiredExt.setFulfilled(true);            found=true;            break;          }        }      }      if (!found && containerAvailableExtensions != null) {        Iterator<Extension> cit=containerAvailableExtensions.iterator();        while (cit.hasNext()) {          Extension targetExt=cit.next();          if (targetExt.isCompatibleWith(requiredExt)) {            requiredExt.setFulfilled(true);            found=true;            break;          }        }      }      if (!found) {        log.info(sm.getString("extensionValidator.extension-not-found-error",appName,mre.getResourceName(),requiredExt.getExtensionName()));        passes=false;        failureCount++;      }    }  }  if (!passes) {    log.info(sm.getString("extensionValidator.extension-validation-error",appName,failureCount + ""));  }  return passes;}  }
class C{  public boolean hasID3v2Tag(){  return (id3v2tag != null);}  }
class C{  public E removeFirst(){  final Node<E> f=first;  if (f == null)   throw new NoSuchElementException();  return unlinkFirst(f);}  }
class C{  static public void assertEquals(String message,float expected,float actual,float delta){  if (Float.isInfinite(expected)) {    if (!(expected == actual))     failNotEquals(message,new Float(expected),new Float(actual));  } else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Float(expected),new Float(actual));}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static <T>T max(Collection<? extends T> coll,Comparator<? super T> comp){  if (comp == null)   return (T)max((Collection)coll);  Iterator<? extends T> i=coll.iterator();  T candidate=i.next();  while (i.hasNext()) {    T next=i.next();    if (comp.compare(next,candidate) > 0)     candidate=next;  }  return candidate;}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.TimeoutElement createTimeoutElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.TimeoutElementImpl();}  }
class C{  public SCSOAPBindingViewBean(){  super("SCSOAPBinding",DEFAULT_DISPLAY_URL,"sunIdentityServerSOAPBinding");}  }
class C{  public synchronized void newPixels(int[] newpix,ColorModel newmodel,int offset,int scansize){  this.pixels=newpix;  this.model=newmodel;  this.pixeloffset=offset;  this.pixelscan=scansize;  newPixels();}  }
class C{  private void processLDIFFile(File ldifFile){  if (logger.isTraceEnabled()) {    logger.trace("Beginning processing on LDIF file " + ldifFile.getAbsolutePath());  }  boolean fullyProcessed=false;  boolean errorEncountered=false;  String inputPath=ldifFile.getAbsolutePath();  LDIFImportConfig importConfig=new LDIFImportConfig(inputPath);  importConfig.setInvokeImportPlugins(false);  importConfig.setValidateSchema(true);  String outputPath=inputPath + ".applied." + TimeThread.getGMTTime();  if (new File(outputPath).exists()) {    int i=2;    while (true) {      if (!new File(outputPath + "." + i).exists()) {        outputPath=outputPath + "." + i;        break;      }      i++;    }  }  LDIFExportConfig exportConfig=new LDIFExportConfig(outputPath,ExistingFileBehavior.APPEND);  if (logger.isTraceEnabled()) {    logger.trace("Creating applied file " + outputPath);  }  LDIFReader reader=null;  LDIFWriter writer=null;  try {    reader=new LDIFReader(importConfig);    writer=new LDIFWriter(exportConfig);    while (true) {      ChangeRecordEntry changeRecord;      try {        changeRecord=reader.readChangeRecord(false);        if (logger.isTraceEnabled()) {          logger.trace("Read change record entry %s",changeRecord);        }      } catch (      LDIFException le) {        logger.traceException(le);        errorEncountered=true;        if (le.canContinueReading()) {          LocalizableMessage m=ERR_LDIF_CONNHANDLER_CANNOT_READ_CHANGE_RECORD_NONFATAL.get(le.getMessageObject());          writer.writeComment(m,78);          continue;        } else {          LocalizableMessage m=ERR_LDIF_CONNHANDLER_CANNOT_READ_CHANGE_RECORD_FATAL.get(le.getMessageObject());          writer.writeComment(m,78);          DirectoryConfig.sendAlertNotification(this,ALERT_TYPE_LDIF_CONNHANDLER_PARSE_ERROR,m);          break;        }      }      Operation operation=null;      if (changeRecord == null) {        fullyProcessed=true;        break;      }      if (changeRecord instanceof AddChangeRecordEntry) {        operation=conn.processAdd((AddChangeRecordEntry)changeRecord);      } else       if (changeRecord instanceof DeleteChangeRecordEntry) {        operation=conn.processDelete((DeleteChangeRecordEntry)changeRecord);      } else       if (changeRecord instanceof ModifyChangeRecordEntry) {        operation=conn.processModify((ModifyChangeRecordEntry)changeRecord);      } else       if (changeRecord instanceof ModifyDNChangeRecordEntry) {        operation=conn.processModifyDN((ModifyDNChangeRecordEntry)changeRecord);      }      if (operation == null) {        LocalizableMessage m=INFO_LDIF_CONNHANDLER_UNKNOWN_CHANGETYPE.get(changeRecord.getChangeOperationType().getLDIFChangeType());        writer.writeComment(m,78);      } else {        if (logger.isTraceEnabled()) {          logger.trace("Result Code: %s",operation.getResultCode());        }        LocalizableMessage m=INFO_LDIF_CONNHANDLER_RESULT_CODE.get(operation.getResultCode().intValue(),operation.getResultCode());        writer.writeComment(m,78);        LocalizableMessageBuilder errorMessage=operation.getErrorMessage();        if (errorMessage != null && errorMessage.length() > 0) {          m=INFO_LDIF_CONNHANDLER_ERROR_MESSAGE.get(errorMessage);          writer.writeComment(m,78);        }        DN matchedDN=operation.getMatchedDN();        if (matchedDN != null) {          m=INFO_LDIF_CONNHANDLER_MATCHED_DN.get(matchedDN);          writer.writeComment(m,78);        }        List<String> referralURLs=operation.getReferralURLs();        if (referralURLs != null && !referralURLs.isEmpty()) {          for (          String url : referralURLs) {            m=INFO_LDIF_CONNHANDLER_REFERRAL_URL.get(url);            writer.writeComment(m,78);          }        }      }      writer.writeChangeRecord(changeRecord);    }  } catch (  IOException ioe) {    logger.traceException(ioe);    fullyProcessed=false;    LocalizableMessage m=ERR_LDIF_CONNHANDLER_IO_ERROR.get(inputPath,getExceptionMessage(ioe));    logger.error(m);    DirectoryConfig.sendAlertNotification(this,ALERT_TYPE_LDIF_CONNHANDLER_PARSE_ERROR,m);  } finally {    close(reader,writer);  }  if (errorEncountered || !fullyProcessed) {    String renamedPath=inputPath + ".errors-encountered." + TimeThread.getGMTTime();    if (new File(renamedPath).exists()) {      int i=2;      while (true) {        if (!new File(renamedPath + "." + i).exists()) {          renamedPath=renamedPath + "." + i;        }        i++;      }    }    try {      if (logger.isTraceEnabled()) {        logger.trace("Renaming source file to " + renamedPath);      }      ldifFile.renameTo(new File(renamedPath));    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage m=ERR_LDIF_CONNHANDLER_CANNOT_RENAME.get(inputPath,renamedPath,getExceptionMessage(e));      logger.error(m);      DirectoryConfig.sendAlertNotification(this,ALERT_TYPE_LDIF_CONNHANDLER_IO_ERROR,m);    }  } else {    try {      if (logger.isTraceEnabled()) {        logger.trace("Deleting source file");      }      ldifFile.delete();    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage m=ERR_LDIF_CONNHANDLER_CANNOT_DELETE.get(inputPath,getExceptionMessage(e));      logger.error(m);      DirectoryConfig.sendAlertNotification(this,ALERT_TYPE_LDIF_CONNHANDLER_IO_ERROR,m);    }  }}  }
class C{  public LDAPConnectionException(LocalizableMessage message,int resultCode,LocalizableMessage errorMessage){  super(message);  this.resultCode=resultCode;  this.errorMessage=errorMessage;  matchedDN=null;}  }
class C{  public TokenFilterBuilder withTimeLimit(Duration timeLimit){  tokenFilter.setTimeLimit(timeLimit);  return this;}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  flushPending();  if (m_tracer != null)   super.fireEscapingEvent(target,data);}  }
class C{  public boolean closed(){  return closed;}  }
class C{  protected void usage(){  System.out.println("usage: java org.apache.catalina.startup.Catalina" + " [ -config {pathname} ]" + " [ -nonaming ] "+ " { -help | start | stop }");}  }
class C{  public void testConstrStringWithExponentWithPoint3(){  String a="2380964839238475457356735674573563567890.295784902768787678287E+21";  int aScale=0;  BigInteger bA=new BigInteger("2380964839238475457356735674573563567890295784902768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public boolean isNativeLookAndFeel(){  return false;}  }
class C{  public boolean inDaylightTime(Date date){  return (getOffset(date.getTime()) != rawOffset);}  }
class C{  public static byte[] decode(String s){  char[] a=s.toCharArray();  if (a.length > 2 && a[0] == 'X' && a[1] == '\'' && a[a.length - 1] == '\'') {    byte[] result=new byte[(a.length - 3) / 2];    for (int i=2, k=0; i < a.length - 1; i+=2, k++) {      byte tmp;switch (a[i]) {case '0':        tmp=0;      break;case '1':    tmp=1;  break;case '2':tmp=2;break;case '3':tmp=3;break;case '4':tmp=4;break;case '5':tmp=5;break;case '6':tmp=6;break;case '7':tmp=7;break;case '8':tmp=8;break;case '9':tmp=9;break;case 'A':case 'a':tmp=10;break;case 'B':case 'b':tmp=11;break;case 'C':case 'c':tmp=12;break;case 'D':case 'd':tmp=13;break;case 'E':case 'e':tmp=14;break;case 'F':case 'f':tmp=15;break;default :tmp=0;break;}result[k]=(byte)(tmp << 4);switch (a[i + 1]) {case '0':tmp=0;break;case '1':tmp=1;break;case '2':tmp=2;break;case '3':tmp=3;break;case '4':tmp=4;break;case '5':tmp=5;break;case '6':tmp=6;break;case '7':tmp=7;break;case '8':tmp=8;break;case '9':tmp=9;break;case 'A':case 'a':tmp=10;break;case 'B':case 'b':tmp=11;break;case 'C':case 'c':tmp=12;break;case 'D':case 'd':tmp=13;break;case 'E':case 'e':tmp=14;break;case 'F':case 'f':tmp=15;break;default :tmp=0;break;}result[k]|=tmp;}return result;}byte[] result=new byte[a.length - 1];int i=0;int shift=s.charAt(i++);int j=0;while (i < s.length()) {int c;if ((c=s.charAt(i++)) == 1) {if ((c=s.charAt(i++)) == 1) {c=0;} else if (c == 2) {c=1;} else if (c == 3) {c='\'';} else {throw new IllegalArgumentException("invalid string passed to decoder: " + j);}}result[j++]=(byte)((c + shift) & 0xff);}int outLen=j;if (result.length != outLen) {result=byteCopy(result,0,outLen,new byte[outLen]);}return result;}  }
class C{  public static MappedMember findMethodOverride(MappedMember mm){  if (mm.doesOverride()) {    for (    MappedMember mm2 : mm.getOverrides()) {      return findMethodOverride(mm2);    }  }  return mm;}  }
class C{  protected void toggleExpandState(TreePath path){  if (!tree.isExpanded(path)) {    int row=getRowForPath(tree,path);    tree.expandPath(path);    updateSize();    if (row != -1) {      if (tree.getScrollsOnExpand())       ensureRowsAreVisible(row,row + treeState.getVisibleChildCount(path)); else       ensureRowsAreVisible(row,row);    }  } else {    tree.collapsePath(path);    updateSize();  }}  }
class C{  public static long decodeAscii(final ByteBuffer src,final int startPosition,final int endPosition){  final int length=endPosition - startPosition;  if (length == 0) {    throw new IllegalArgumentException("Cannot decode zero-length ascii string.");  }  long decoded=0L;  for (int offset=0; offset < length; offset++) {    decoded*=10;    final byte digit=src.get(startPosition + offset);    if (digit < '0' || digit > '9') {      throw new IllegalArgumentException("Invalid digit: " + (char)digit);    }    decoded+=digit - '0';  }  return decoded;}  }
class C{  private void putBackDefaultAggregationDefinitionFromTargetAndSourceEnabled(){  TestCfg.removeConstraint(aggregationPropertyDefinitionTargetAndSourceMustBeEnabled.getSourceConstraint());  TestCfg.addPropertyDefinition(aggregationPropertyDefinitionDefault);  TestCfg.addConstraint(aggregationPropertyDefinitionDefault.getSourceConstraint());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforenewchildexists.class,args);}  }
class C{  public static boolean isPubid(int c){  return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;}  }
class C{  private SASLContext(final HashMap<String,String> saslProps,final String serverFQDN,final String mechanism,final IdentityMapper<?> identityMapper) throws SaslException {  this.identityMapper=identityMapper;  this.mechanism=mechanism;  this.saslProps=saslProps;  this.serverFQDN=serverFQDN;  if (mechanism.equals(SASL_MECHANISM_DIGEST_MD5)) {    initSASLServer();  }}  }
class C{  public static void writeSwappedInteger(byte[] data,int offset,int value){  data[offset + 0]=(byte)((value >> 0) & 0xff);  data[offset + 1]=(byte)((value >> 8) & 0xff);  data[offset + 2]=(byte)((value >> 16) & 0xff);  data[offset + 3]=(byte)((value >> 24) & 0xff);}  }
class C{  public void insert_char(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_char",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_char(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementremoveattributeaftercreate.class,args);}  }
class C{  public void purgeUser(String uid,String domainName,int graceperiod) throws AMException, SSOException {  String orgDN=getOrganizationDN(domainName,null);  String filter=AMCompliance.getDeletedObjectFilter(AMObject.USER);  filter=AMObjectImpl.constructFilter(AMNamingAttrManager.getNamingAttr(AMObject.USER),filter,uid);  if (AMCommonUtils.debug.messageEnabled()) {    AMCommonUtils.debug.message("AMStoreConnection.purgeGroup: " + "Using deleted user filter= " + filter);  }  Set uSet=dsServices.search(token,orgDN,filter,SCOPE_SUB);  if ((uSet == null) || (uSet.size() > 1) || uSet.isEmpty()) {    Object args[]={uid};    throw new AMException(AMSDKBundle.getString("971",args,locale),"971",args);  }  String uDN=(String)uSet.iterator().next();  AMUser user=getUser(uDN);  user.purge(false,graceperiod);  return;}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setAutoIncrementPatch(true);  unchecked(null);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);  unchecked(null);}  }
class C{  public void startScalingY(float currentMaxY,float currentMinY,float endMaxY,float endMinY){  startRTC=SystemClock.elapsedRealtime();  this.endMaxY=endMaxY;  this.endMinY=endMinY;  this.startMaxY=this.currentMaxY=currentMaxY;  this.startMinY=this.currentMinY=currentMinY;  finished=false;}  }
class C{  protected void publishLogEvent(String type,JsonObject data){  JsonObject msg=new JsonObject().put("type",type).put("message",data);  vertx.eventBus().publish(LOG_EVENT_ADDRESS,msg);}  }
class C{  static ComputedDayOfField ofWeekOfWeekBasedYearField(WeekFields weekDef){  return new ComputedDayOfField("WeekOfWeekBasedYear",weekDef,WEEKS,IsoFields.WEEK_BASED_YEARS,WEEK_OF_WEEK_BASED_YEAR_RANGE);}  }
class C{  @Override public IndexCreatedEvent create(IndexCreatedEvent entity){  BoundStatement create=new BoundStatement(createStmt);  bindCreate(create,entity);  BatchStatement batch=new BatchStatement(BatchStatement.Type.LOGGED);  if (!entity.isDoneIndexing()) {    markIndexing(entity.getUuid());  }  batch.add(create);  getSession().execute(batch);  return entity;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfArray copyTo(PdfDocument document){  return (PdfArray)super.copyTo(document,true);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public SQLIntegrityConstraintViolationException(Throwable cause){  super(cause);}  }
class C{  public RecycleViewDivider(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  synchronized void receive(char c[],int off,int len) throws IOException {  while (--len >= 0) {    receive(c[off++]);  }}  }
class C{  public void testFlipBitPositiveOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=150;  byte rBytes[]={64,0,0,0,0,0,1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void focusGained(FocusEvent e){  getHandler().focusGained(e);}  }
class C{  public BlockView(Element elem,int axis){  super(elem,axis);}  }
class C{  public void add(XMPPathSegment segment){  segments.add(segment);}  }
class C{  public void testEngineGenerateCertPathLjava_io_InputStream01(){  CertificateFactorySpi certFactorySpi=new MyCertificateFactorySpi();  MyCertificateFactorySpi.putMode(true);  ByteArrayInputStream bais=new ByteArrayInputStream(new byte[0]);  DataInputStream dis=new DataInputStream(bais);  try {    assertNull(certFactorySpi.engineGenerateCertPath(dis));  } catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  public void removePopupMenuListener(PopupMenuListener l){  listenerList.remove(PopupMenuListener.class,l);}  }
class C{  ClientResponseHandler(LDAPReader<ASN1BufferReader> reader){  this.reader=reader;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentitynodeattributes.class,args);}  }
class C{  public void testConstructorBytesNegative4(){  byte aBytes[]={-128,-12,56,100,-13,56,93,-78};  byte rBytes[]={-128,-12,56,100,-13,56,93,-78};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  private Reader createReader(InputStream inputStream,String encoding,Boolean isBigEndian) throws IOException, JasperException {  if (encoding == null) {    encoding="UTF-8";  }  String ENCODING=encoding.toUpperCase(Locale.ENGLISH);  if (ENCODING.equals("UTF-8")) {    return new UTF8Reader(inputStream,fBufferSize);  }  if (ENCODING.equals("US-ASCII")) {    return new ASCIIReader(inputStream,fBufferSize);  }  if (ENCODING.equals("ISO-10646-UCS-4")) {    if (isBigEndian != null) {      boolean isBE=isBigEndian.booleanValue();      if (isBE) {        return new UCSReader(inputStream,UCSReader.UCS4BE);      } else {        return new UCSReader(inputStream,UCSReader.UCS4LE);      }    } else {      err.jspError("jsp.error.xml.encodingByteOrderUnsupported",encoding);    }  }  if (ENCODING.equals("ISO-10646-UCS-2")) {    if (isBigEndian != null) {      boolean isBE=isBigEndian.booleanValue();      if (isBE) {        return new UCSReader(inputStream,UCSReader.UCS2BE);      } else {        return new UCSReader(inputStream,UCSReader.UCS2LE);      }    } else {      err.jspError("jsp.error.xml.encodingByteOrderUnsupported",encoding);    }  }  boolean validIANA=XMLChar.isValidIANAEncoding(encoding);  if (!validIANA) {    err.jspError("jsp.error.xml.encodingDeclInvalid",encoding);    encoding="ISO-8859-1";  }  String javaEncoding=EncodingMap.getIANA2JavaMapping(ENCODING);  if (javaEncoding == null) {    err.jspError("jsp.error.xml.encodingDeclInvalid",encoding);    javaEncoding="ISO8859_1";  }  return new InputStreamReader(inputStream,javaEncoding);}  }
class C{  public void runTest() throws Throwable {  String localName="domestic";  String namespaceURI="http://www.usa.com";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertTrue("hasAttribute",state);}  }
class C{  public static PasswordModifyExtendedResult newPasswordModifyExtendedResult(final ResultCode resultCode){  Reject.ifNull(resultCode);  return new PasswordModifyExtendedResultImpl(resultCode);}  }
class C{  public void removeNotify(){  dropTargetContextPeer=null;  transferable=null;}  }
class C{  public void transformSelectedNodes(TransformerImpl transformer) throws TransformerException {  final XPathContext xctxt=transformer.getXPathContext();  final int sourceNode=xctxt.getCurrentNode();  DTMIterator sourceNodes=m_selectExpression.asIterator(xctxt,sourceNode);  VariableStack vars=xctxt.getVarStack();  int nParams=getParamElemCount();  int thisframe=vars.getStackFrame();  boolean pushContextNodeListFlag=false;  try {    xctxt.pushCurrentNode(DTM.NULL);    xctxt.pushCurrentExpressionNode(DTM.NULL);    xctxt.pushSAXLocatorNull();    transformer.pushElemTemplateElement(null);    final Vector keys=(m_sortElems == null) ? null : transformer.processSortKeys(this,sourceNode);    if (null != keys)     sourceNodes=sortNodes(xctxt,keys,sourceNodes);    final SerializationHandler rth=transformer.getSerializationHandler();    final StylesheetRoot sroot=transformer.getStylesheet();    final TemplateList tl=sroot.getTemplateListComposed();    final boolean quiet=transformer.getQuietConflictWarnings();    DTM dtm=xctxt.getDTM(sourceNode);    int argsFrame=-1;    if (nParams > 0) {      argsFrame=vars.link(nParams);      vars.setStackFrame(thisframe);      for (int i=0; i < nParams; i++) {        ElemWithParam ewp=m_paramElems[i];        XObject obj=ewp.getValue(transformer,sourceNode);        vars.setLocalVariable(i,obj,argsFrame);      }      vars.setStackFrame(argsFrame);    }    xctxt.pushContextNodeList(sourceNodes);    pushContextNodeListFlag=true;    IntStack currentNodes=xctxt.getCurrentNodeStack();    IntStack currentExpressionNodes=xctxt.getCurrentExpressionNodeStack();    int child;    while (DTM.NULL != (child=sourceNodes.nextNode())) {      currentNodes.setTop(child);      currentExpressionNodes.setTop(child);      if (xctxt.getDTM(child) != dtm) {        dtm=xctxt.getDTM(child);      }      final int exNodeType=dtm.getExpandedTypeID(child);      final int nodeType=dtm.getNodeType(child);      final QName mode=transformer.getMode();      ElemTemplate template=tl.getTemplateFast(xctxt,child,exNodeType,mode,-1,quiet,dtm);      if (null == template) {switch (nodeType) {case DTM.DOCUMENT_FRAGMENT_NODE:case DTM.ELEMENT_NODE:          template=sroot.getDefaultRule();        break;case DTM.ATTRIBUTE_NODE:case DTM.CDATA_SECTION_NODE:case DTM.TEXT_NODE:      transformer.pushPairCurrentMatched(sroot.getDefaultTextRule(),child);    transformer.setCurrentElement(sroot.getDefaultTextRule());  dtm.dispatchCharactersEvents(child,rth,false);transformer.popCurrentMatched();continue;case DTM.DOCUMENT_NODE:template=sroot.getDefaultRootRule();break;default :continue;}} else {transformer.setCurrentElement(template);}transformer.pushPairCurrentMatched(template,child);int currentFrameBottom;if (template.m_frameSize > 0) {xctxt.pushRTFContext();currentFrameBottom=vars.getStackFrame();vars.link(template.m_frameSize);if (template.m_inArgsSize > 0) {int paramIndex=0;for (ElemTemplateElement elem=template.getFirstChildElem(); null != elem; elem=elem.getNextSiblingElem()) {if (Constants.ELEMNAME_PARAMVARIABLE == elem.getXSLToken()) {ElemParam ep=(ElemParam)elem;int i;for (i=0; i < nParams; i++) {ElemWithParam ewp=m_paramElems[i];if (ewp.m_qnameID == ep.m_qnameID) {XObject obj=vars.getLocalVariable(i,argsFrame);vars.setLocalVariable(paramIndex,obj);break;}}if (i == nParams) vars.setLocalVariable(paramIndex,null);} else break;paramIndex++;}}} else currentFrameBottom=0;for (ElemTemplateElement t=template.m_firstChild; t != null; t=t.m_nextSibling) {xctxt.setSAXLocator(t);try {transformer.pushElemTemplateElement(t);t.execute(transformer);}  finally {transformer.popElemTemplateElement();}}if (template.m_frameSize > 0) {vars.unlink(currentFrameBottom);xctxt.popRTFContext();}transformer.popCurrentMatched();}} catch (SAXException se) {transformer.getErrorListener().fatalError(new TransformerException(se));} finally {if (nParams > 0) vars.unlink(thisframe);xctxt.popSAXLocator();if (pushContextNodeListFlag) xctxt.popContextNodeList();transformer.popElemTemplateElement();xctxt.popCurrentExpressionNode();xctxt.popCurrentNode();sourceNodes.detach();}}  }
class C{  void updateParametersFrom(SQLiteDatabaseConfiguration other){  if (other == null) {    throw new IllegalArgumentException("other must not be null.");  }  if (!path.equals(other.path)) {    throw new IllegalArgumentException("other configuration must refer to " + "the same database.");  }  openFlags=other.openFlags;  maxSqlCacheSize=other.maxSqlCacheSize;  locale=other.locale;  foreignKeyConstraintsEnabled=other.foreignKeyConstraintsEnabled;  customFunctions.clear();  customFunctions.addAll(other.customFunctions);  customExtensions.clear();  customExtensions.addAll(other.customExtensions);}  }
class C{  public boolean isAllowed(final String input){  final String lowerCaseInput=input.toLowerCase();  return !disallowedStrings.parallelStream().anyMatch(null);}  }
class C{  public ProguardLoader(){  super(null);}  }
class C{  public RAckParser(String rack){  super(rack);}  }
class C{  public void initializeDefaultEntryCache() throws InitializationException {  try {    DefaultEntryCache defaultCache=new DefaultEntryCache();    defaultCache.initializeEntryCache(null);    DirectoryServer.setEntryCache(defaultCache);    _defaultEntryCache=defaultCache;  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_CONFIG_ENTRYCACHE_CANNOT_INSTALL_DEFAULT_CACHE.get(stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public static String resolveUrl(String url,String context,PageContext pageContext) throws JspException {  if (isAbsoluteUrl(url))   return url;  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();  if (context == null) {    if (url.startsWith("/"))     return (request.getContextPath() + url); else     return url;  } else {    if (!context.startsWith("/") || !url.startsWith("/")) {      throw new JspTagException("In URL tags, when the \"context\" attribute is specified, values of both \"context\" and \"url\" must start with \"/\".");    }    if (context.equals("/")) {      return url;    } else {      return (context + url);    }  }}  }
class C{  public boolean isEnabled(){  return this.enabled;}  }
class C{  private boolean isLogLibraryAvailable(String name,String classname){  if (isDiagnosticsEnabled()) {    logDiagnostic("Checking for '" + name + "'.");  }  try {    Log log=createLogFromClass(classname,this.getClass().getName(),false);    if (log == null) {      if (isDiagnosticsEnabled()) {        logDiagnostic("Did not find '" + name + "'.");      }      return false;    } else {      if (isDiagnosticsEnabled()) {        logDiagnostic("Found '" + name + "'.");      }      return true;    }  } catch (  LogConfigurationException e) {    if (isDiagnosticsEnabled()) {      logDiagnostic("Logging system '" + name + "' is available but not useable.");    }    return false;  }}  }
class C{  public void insert_wstring(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wstring",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_wstring(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  static boolean fractionalRemoveAttributesFromEntry(FractionalConfig fractionalConfig,RDN entryRdn,Map<ObjectClass,String> classes,Map<AttributeType,List<Attribute>> attributesMap,boolean performFiltering){  boolean hasSomeAttributesToFilter=false;  Set<AttributeType> fractionalConcernedAttributes=createFractionalConcernedAttrList(fractionalConfig,classes.keySet());  boolean fractionalExclusive=fractionalConfig.isFractionalExclusive();  if (fractionalExclusive && fractionalConcernedAttributes.isEmpty()) {    return false;  }  Set<ObjectClass> entryClasses=classes.keySet();  List<List<Attribute>> newRdnAttrLists=new ArrayList<>();  List<AttributeType> rdnAttrTypes=new ArrayList<>();  final Set<AttributeType> attrTypes=attributesMap.keySet();  for (Iterator<AttributeType> iter=attrTypes.iterator(); iter.hasNext(); ) {    AttributeType attributeType=iter.next();    if (isMandatoryAttribute(entryClasses,attributeType) || isFractionalProhibited(attributeType) || !canRemoveAttribute(attributeType,fractionalExclusive,fractionalConcernedAttributes)) {      continue;    }    if (!performFiltering) {      return true;    }    if (entryRdn.hasAttributeType(attributeType)) {      ByteString rdnAttributeValue=entryRdn.getAttributeValue(attributeType);      List<Attribute> attrList=attributesMap.get(attributeType);      ByteString sameAttrValue=null;      for (      Attribute attr : attrList) {        if (attr.contains(rdnAttributeValue)) {          for (          ByteString attrValue : attr) {            if (rdnAttributeValue.equals(attrValue)) {              sameAttrValue=attrValue;            } else {              hasSomeAttributesToFilter=true;            }          }        } else {          hasSomeAttributesToFilter=true;        }      }      if (sameAttrValue != null) {        newRdnAttrLists.add(Attributes.createAsList(attributeType,sameAttrValue));        rdnAttrTypes.add(attributeType);      }    } else {      iter.remove();      hasSomeAttributesToFilter=true;    }  }  for (int index=0; index < rdnAttrTypes.size(); index++) {    attributesMap.put(rdnAttrTypes.get(index),newRdnAttrLists.get(index));  }  return hasSomeAttributesToFilter;}  }
class C{  public Artifact createArtifact(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ARTIFACT,elem);  if (obj == null) {    return new ArtifactImpl(elem);  } else {    return (Artifact)obj;  }}  }
class C{  public InstanceOfQueryExp(StringValueExp classNameValue){  if (classNameValue == null) {    throw new IllegalArgumentException("Null class name.");  }  this.classNameValue=classNameValue;}  }
class C{  @Advice.OnMethodEnter public static long enter(){  final long startTime=System.currentTimeMillis();  return startTime;}  }
class C{  public boolean match(MimeType type){  if (type == null)   return false;  return primaryType.equals(type.getPrimaryType()) && (subType.equals("*") || type.getSubType().equals("*") || (subType.equals(type.getSubType())));}  }
class C{  public boolean deleteOldRDN(){  return deleteOldRDN;}  }
class C{  public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException {  flushPending();  String data=node.getNodeValue();  if (data != null) {    final int length=data.length();    if (length > m_charsBuff.length) {      m_charsBuff=new char[length * 2 + 1];    }    data.getChars(0,length,m_charsBuff,0);    characters(m_charsBuff,0,length);  }}  }
class C{  public void addMenuKeyListener(MenuKeyListener l){  listenerList.add(MenuKeyListener.class,l);}  }
class C{  boolean impliesIgnoreMask(FilePermission that){  if (this.directory) {    if (this.recursive) {      if (that.directory) {        return (that.cpath.length() >= this.cpath.length()) && that.cpath.startsWith(this.cpath);      } else {        return ((that.cpath.length() > this.cpath.length()) && that.cpath.startsWith(this.cpath));      }    } else {      if (that.directory) {        if (that.recursive)         return false; else         return (this.cpath.equals(that.cpath));      } else {        int last=that.cpath.lastIndexOf(File.separatorChar);        if (last == -1)         return false; else {          return (this.cpath.length() == (last + 1)) && this.cpath.regionMatches(0,that.cpath,0,last + 1);        }      }    }  } else   if (that.directory) {    return false;  } else {    return (this.cpath.equals(that.cpath));  }}  }
class C{  private <T>void buildImpl(PropertyDefinition<T> pd){  T value=pd.decodeValue(propertyStringValue);  this.impl=new Impl<>(pd,value);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeSchemaName=getStringOptionValue(IArgument.ATTRIBUTE_SCHEMA);  String range=getStringOptionValue(ARGUMENT_RANGE);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName,range};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_ATTRIBUTE_SCHEMA_END_RANGE",params);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeSchemaName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,range,"attribute schema does not exist"};      attributeSchemaNoExist(attributeSchemaName,"FAILED_SET_ATTRIBUTE_SCHEMA_END_RANGE",args);    }    attrSchema.setEndRange(range);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_ATTRIBUTE_SCHEMA_END_RANGE",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-set-end-range-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,range,e.getMessage()};    debugError("SetAttributeSchemaEndRange.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_ATTRIBUTE_SCHEMA_END_RANGE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,range,e.getMessage()};    debugError("SetAttributeSchemaEndRange.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_ATTRIBUTE_SCHEMA_END_RANGE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static Object convertNodeToJAXB(Node node) throws JAXBException {  Unmarshaller u=jaxbContext.createUnmarshaller();  return u.unmarshal(node);}  }
class C{  public static AffinityControl newControl(final ByteString affinityValue,final boolean isCritical){  Reject.ifNull(affinityValue);  return new AffinityControl(affinityValue,isCritical);}  }
class C{  private String[] processName(String qName,boolean isAttribute,boolean useException) throws SAXException {  String parts[]=nsSupport.processName(qName,nameParts,isAttribute);  if (parts == null) {    if (useException)     throw makeException("Undeclared prefix: " + qName);    reportError("Undeclared prefix: " + qName);    parts=new String[3];    parts[0]=parts[1]="";    parts[2]=qName.intern();  }  return parts;}  }
class C{  public int compareToIgnoreCase(XMLString str){  return m_str.compareToIgnoreCase(str.toString());}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  public void readByteArray(byte[] arr,int offset) throws InvalidDataTypeException {  super.readByteArray(arr,offset);  Integer intValue=((Long)value).intValue();  if (!keyToValue.containsKey(intValue)) {    if (!hasEmptyValue) {      throw new InvalidDataTypeException(ErrorMessage.MP3_REFERENCE_KEY_INVALID.getMsg(identifier,intValue));    } else     if (identifier.equals(DataTypes.OBJ_PICTURE_TYPE)) {      logger.warning(ErrorMessage.MP3_PICTURE_TYPE_INVALID.getMsg(value));    }  }}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2){  return contains(value,start,length,new String[]{criteria1,criteria2});}  }
class C{  public static Map<String,Set<String>> readMap(String fileName) throws IOException {  InputStream is=null;  try {    is=MapHelper.class.getResourceAsStream(fileName);    if (is == null) {      DEBUG.warning("Could not locate properties file " + fileName);      return new CaseInsensitiveHashMap();    }    return readMap(is);  }  finally {    IOUtils.closeIfNotNull(is);  }}  }
class C{  public UnknownDependencyException(final Throwable throwable,final String message){  super(message,throwable);}  }
class C{  private void onTaskFinished(String queueName){synchronized (syncRoot) {    currentTasksMap.remove(queueName);    DispatcherTask nextTask=dequeueNextTask(queueName);    if (nextTask != null) {      submit(nextTask);    }  }}  }
class C{  public static void disableLogging(){  LogManager.getLogManager().reset();  Logger.getLogger("").setLevel(Level.OFF);}  }
class C{  public LimitLatch(long limit){  this.limit=limit;  this.count=new AtomicLong(0);  this.sync=new Sync();}  }
class C{  @Deprecated public static boolean isOrganizationActive(SSOToken token,String realm) throws IdRepoException, SSOException {  try {    RealmLookup realmLookup=InjectorHolder.getInstance(RealmLookup.class);    return realmLookup.isActive(realmLookup.lookup(realm));  } catch (  RealmLookupException e) {    throw new IdRepoException(e.getResourceBundleName(),e.getErrorCode(),e.getMessageArgs());  }}  }
class C{  @Override public Rectangle placeBarcode(PdfCanvas canvas,Color barColor,Color textColor){  if (supp.getFont() != null) {    float sizeCoef=supp.getSize() / FontProgram.UNITS_NORMALIZATION;    supp.setBarHeight(ean.getBarHeight() + supp.getBaseline() - supp.getFont().getFontProgram().getFontMetrics().getCapHeight() * sizeCoef);  } else {    supp.setBarHeight(ean.getBarHeight());  }  Rectangle eanR=ean.getBarcodeSize();  canvas.saveState();  ean.placeBarcode(canvas,barColor,textColor);  canvas.restoreState();  canvas.saveState();  canvas.concatMatrix(1,0,0,1,eanR.getWidth() + n,eanR.getHeight() - ean.getBarHeight());  supp.placeBarcode(canvas,barColor,textColor);  canvas.restoreState();  return getBarcodeSize();}  }
class C{  public static List retrieveSAML2TokensWithSecondaryKey(String secondaryKey) throws SAML2TokenRepositoryException {  return SAML2TokenRepositoryHolder.getRepo().retrieveSAML2TokensWithSecondaryKey(secondaryKey);}  }
class C{  private BaseConfigType createAttributeElement(Map values,BaseConfigType bconfig) throws AMConsoleException {  try {    ObjectFactory objFactory=new ObjectFactory();    for (Iterator iter=values.keySet().iterator(); iter.hasNext(); ) {      AttributeElement avp=objFactory.createAttributeElement();      String key=(String)iter.next();      avp.setName(key);      bconfig.getAttribute().add(avp);    }  } catch (  JAXBException e) {    debug.warning("WSFedPropertiesModelImpl.createAttributeElement",e);    throw new AMConsoleException(e.getMessage());  }  return bconfig;}  }
class C{  @Override public int countByUuid_C(String uuid,long companyId){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_C;  Object[] finderArgs=new Object[]{uuid,companyId};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(3);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_C_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_C_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_C_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_C_COMPANYID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(companyId);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public AsfTagTextField(final MetadataDescriptor source){  super(source);  if (source.getType() == MetadataDescriptor.TYPE_BINARY) {    throw new IllegalArgumentException("Cannot interpret binary as string.");  }}  }
class C{  public void translate(int x,int y){  if (debugLog()) {    info().log(toShortString() + " Translating by: " + new Point(x,y));  }  xOffset+=x;  yOffset+=y;  graphics.translate(x,y);}  }
class C{  public void endRow(){}  }
class C{  public List unshift(Collection<?> elements){  addAll(0,elements);  return this;}  }
class C{  private static FieldDataType parseArgs(String[] args){  if (args.length != 1) {    throw new IllegalArgumentException("You must pass in a single FieldDataType");  }  return FieldDataType.valueOf(args[0].toUpperCase().trim());}  }
class C{  public void windowClosed(WindowEvent e){}  }
class C{  public static String returnId(Set servers,String server){  String serverId=null;  Iterator iter=servers.iterator();  while (iter.hasNext()) {    String serverEntry=(String)iter.next();    if (!serverEntry.startsWith(server)) {      continue;    }    int index=serverEntry.indexOf(delimiter);    if (index != -1) {      serverId=serverEntry.substring(index + 1,serverEntry.length());      return serverId;    }  }  return serverId;}  }
class C{  private Object writeReplace(){  return new SerializationProxy(this);}  }
class C{  protected void handleStart(File startDirectory,Collection<T> results) throws IOException {}  }
class C{  public JsonEntitlement(){  this(new Entitlement());}  }
class C{  public final boolean checkTag(int identifier){  return this.id == identifier || this.constrId == identifier;}  }
class C{  @Override public void removeByUuid_C(String uuid,long companyId){  for (  Foo foo : findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  public OpenSSLPBEParametersGenerator(){}  }
class C{  public PolicySet exportXACML(String realm,Subject admin,List<String> filters) throws EntitlementException {  PrivilegeManager pm=privilegeManagerFactory.createReferralPrivilegeManager(realm,admin);  Set<SearchFilter> filterSet=new HashSet<SearchFilter>();  if (filters != null) {    for (    String filter : filters) {      SearchFilter searchFilter=searchFilterFactory.getFilter(filter);      message("Export: Search Filter: {0}",searchFilter);      filterSet.add(searchFilter);    }  }  Set<String> privilegeNames=pm.searchNames(filterSet);  message("Export: Privilege Matches {0}",privilegeNames.size());  PrivilegeSet privilegeSet=new PrivilegeSet();  for (  String name : privilegeNames) {    Privilege privilege=pm.findByName(name,admin);    message("Export: Privilege {0}",privilege.getName());    privilegeSet.addPrivilege(privilege);  }  PolicySet policySet=xacmlReaderWriter.toXACML(realm,privilegeSet);  message("Export: Complete");  return policySet;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  DelegationModel model=(DelegationModel)getModel();  String uid=(String)getPageSessionAttribute(CURRENT_IDENTITY);  AMPropertySheet ps=(AMPropertySheet)getChild(DELEGATION_PROPERTIES);  String realm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  try {    PrivilegeXMLBuilder builder=PrivilegeXMLBuilder.getInstance();    Set privileges=builder.getAllPrivileges(realm,model);    Map values=ps.getAttributeValues(privileges);    model.setPrivileges(realm,uid,values);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","delegation.privilege.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  void clear() throws ChangelogException {  log.clear();  replicationEnv.resetGenerationId(baseDN);  csnLimits=new CSNLimits(null,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementchangeattributevalue.class,args);}  }
class C{  public TemplateFile(String resourcePath,Random random){  this.resourcePath=resourcePath;  this.random=random;  firstNames=new String[0];  lastNames=new String[0];  nameUniquenessCounter=1;  registerDefaultTags();  try {    readNameFiles();  } catch (  IOException ioe) {    ioe.printStackTrace();    firstNames=new String[]{"John"};    lastNames=new String[]{"Doe"};  }}  }
class C{  public PWResetQuestionTiledView(View parent,String name){  super(parent,name);  setPrimaryModel((DatasetModel)getDefaultModel());  registerChildren();}  }
class C{  public void testIsCryptoAllowed() throws Exception {  Provider mProv=(new SpiEngUtils()).new MyProvider("MyExMechProvider","Provider for ExemptionMechanism testing",srvExemptionMechanism.concat(".").concat(defaultAlg),ExemptionMechanismProviderClass);  ExemptionMechanism em=new ExemptionMechanism(new MyExemptionMechanismSpi(),mProv,defaultAlg){  };  Key key=new MyExemptionMechanismSpi().new tmpKey("Proba",new byte[0]);  assertFalse(em.isCryptoAllowed(key));  em.init(key);  assertFalse(em.isCryptoAllowed(key));  em.genExemptionBlob();  assertTrue(em.isCryptoAllowed(key));  Key key1=new MyExemptionMechanismSpi().new tmpKey("Proba",new byte[]{1});  assertFalse(em.isCryptoAllowed(key1));  em.init(key1);  assertFalse(em.isCryptoAllowed(key));}  }
class C{  public synchronized void mark(int readlimit){}  }
class C{  public int ordinal(){  return ordinal;}  }
class C{  private synchronized void stopRSHeartBeatMonitoring(){  if (heartbeatMonitor != null) {    heartbeatMonitor.shutdown();    heartbeatMonitor=null;  }}  }
class C{  public Node importNode(Node importedNode,boolean deep) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public AttributeList(AttributeList list){  super(list);}  }
class C{  public void deleteField(FieldKey genericKey){  if (genericKey == FieldKey.TRACK) {    track=0;  } else {    super.deleteField(genericKey);  }}  }
class C{  public ResourceOwnerAuthenticationRequired(final URI redirectUri){  super(307,"redirection_temporary","The request requires a redirect.");  this.redirectUri=redirectUri;}  }
class C{  public static final String decode(String src){  return new String(decode(src.getBytes()));}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  TBSCertificate tbsCert=x509Certificate.getTBSCertificate();  if (!CertUtils.isAlgIdEqual(tbsCert.getSignature(),x509Certificate.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((tbsCert.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(tbsCert);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(x509Certificate.getSignature().getBytes());}  }
class C{  private static Map<DN,ServerState> splitGenStateToServerStates(String multiDomainServerState) throws DirectoryException {  Map<DN,ServerState> startStates=new TreeMap<>();  if (multiDomainServerState != null && multiDomainServerState.length() > 0) {    try {      String[] domains=multiDomainServerState.split(";");      for (      String domain : domains) {        final ServerState serverStateByDomain=new ServerState();        final String[] fields=domain.split(":");        if (fields.length == 0) {          throw new DirectoryException(ResultCode.PROTOCOL_ERROR,ERR_INVALID_COOKIE_SYNTAX.get(multiDomainServerState));        }        final String domainBaseDN=fields[0];        if (fields.length > 1) {          final String serverStateStr=fields[1];          for (          String csnStr : serverStateStr.split(" ")) {            final CSN csn=new CSN(csnStr);            serverStateByDomain.update(csn);          }        }        startStates.put(DN.valueOf(domainBaseDN),serverStateByDomain);      }    } catch (    DirectoryException de) {      throw de;    }catch (    Exception e) {      throw new DirectoryException(ResultCode.PROTOCOL_ERROR,LocalizableMessage.raw("Exception raised: " + e),e);    }  }  return startStates;}  }
class C{  public GeneralPath(int rule,int initialCapacity){  super(rule,initialCapacity);}  }
class C{  public final void testGetPrivateExponent(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPrivateExponent()));}  }
class C{  protected MediaName(int value){  super(value);}  }
class C{  public final void debug(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {    log(SimpleLog.LOG_LEVEL_DEBUG,message,t);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  int length;  String childName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  if (equals(6,length)) {    child=employeeList.item(1);  } else {    child=employeeList.item(3);  }  childName=child.getNodeName();  assertEquals("nodeName","name",childName);}  }
class C{  public Cursor fetchAll(Long failedActionID,String actionParameterName,String failedActionParameterData){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (failedActionID != null) {    qb.appendWhere(" AND " + KEY_FAILEDACTIONID + " = "+ failedActionID);  }  if (actionParameterName != null) {    qb.appendWhere(" AND " + KEY_ACTIONPARAMETERNAME + " = "+ actionParameterName);  }  if (failedActionParameterData != null) {    qb.appendWhere(" AND " + KEY_FAILEDACTIONPARAMETERDATA + " = ");    qb.appendWhereEscapeString(failedActionParameterData);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  public boolean isGlobalScope(){  return this.scope == GlobalScope.class;}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public void replaceAttributeValues(String attrName,Set oldValues,Set newValues) throws SMSException, SSOException {  validateServiceConfigImpl();  Map attributes=getAttributes();  Set newVals=new HashSet();  Set oldVals=(Set)attributes.get(attrName);  if (oldVals != null) {    newVals.addAll(oldVals);    newVals.removeAll(oldValues);  }  newVals.addAll(newValues);  ss.validateAttrValues(token,attrName,newVals,true,sc.getOrganizationName());  SMSEntry e=sc.getSMSEntry();  SMSUtils.replaceAttributeValues(e,attrName,oldValues,newValues,ss.getSearchableAttributeNames());  saveSMSEntry(e);}  }
class C{  EmulatedFieldsForDumping(ObjectOutputStream oos,ObjectStreamClass streamClass){  this.oos=oos;  this.emulatedFields=new EmulatedFields(streamClass.fields(),(ObjectStreamField[])null);}  }
class C{  public String toXML(){  StringBuilder buff=new StringBuilder();  buff.append("<").append(DSConfigMgr.USER).append(" ").append(DSConfigMgr.NAME).append("=\"").append(name).append("\"").append(" ").append(DSConfigMgr.AUTH_TYPE).append("=\"").append(type).append("\"").append(">\n");  buff.append("<").append(DSConfigMgr.AUTH_ID).append(">");  buff.append(dn);  buff.append("</").append(DSConfigMgr.AUTH_ID).append(">\n");  buff.append("<").append(DSConfigMgr.AUTH_PASSWD).append(">");  buff.append(password);  buff.append("</").append(DSConfigMgr.AUTH_PASSWD).append(">\n");  buff.append("</" + DSConfigMgr.USER + ">\n");  return buff.toString();}  }
class C{  public boolean hasOutlines(){  return catalog.hasOutlines();}  }
class C{  public int nextInt(int least,int bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextInt(bound - least) + least;}  }
class C{  protected void paintBorder(Graphics g){  if (isBorderPainted()) {    super.paintBorder(g);  }}  }
class C{  public static Foo fetchByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_C_Last(uuid,companyId,orderByComparator);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.SessionContextStatementType createSessionContextStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextStatementTypeImpl();}  }
class C{  public AuthnStatement createAuthnStatement(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_STATEMENT,elem);  if (obj == null) {    return new AuthnStatementImpl(elem);  } else {    return (AuthnStatement)obj;  }}  }
class C{  public Object encode(Object value) throws EncoderException {  if (value == null) {    return null;  } else   if (value instanceof String) {    return encode((String)value);  } else {    throw new EncoderException("Objects of type " + value.getClass().getName() + " cannot be encoded using BCodec");  }}  }
class C{  public static MatchedValuesFilter createSubstringsFilter(AttributeType attributeType,ByteString subInitial,List<ByteString> subAny,ByteString subFinal){  Reject.ifNull(attributeType);  String rawAttributeType=attributeType.getNameOrOID();  MatchedValuesFilter filter=new MatchedValuesFilter(SUBSTRINGS_TYPE,rawAttributeType,null,subInitial,subAny,subFinal,null);  filter.attributeType=attributeType;  return filter;}  }
class C{  public void testConstructorBytesNegative1(){  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte rBytes[]={-12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  @Override public void notationDecl(String name,String publicId,String systemId){  if (saxLog.isDebugEnabled()) {    saxLog.debug("notationDecl(" + name + ","+ publicId+ ","+ systemId+ ")");  }}  }
class C{  public QRCallbackBuilder withUriPort(String port){  this.port=port;  return this;}  }
class C{  public boolean isCaptchaEnabled(){  return captchaEnabled;}  }
class C{  K lowestKey(){  Comparator<? super K> cmp=m.comparator;  ConcurrentSkipListMap.Node<K,V> n=loNode(cmp);  if (isBeforeEnd(n,cmp))   return n.key; else   throw new NoSuchElementException();}  }
class C{  public int[] lookupPixel(int[] src,int[] dst){  if (dst == null) {    dst=new int[src.length];  }  if (numComponents == 1) {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xffff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=(int)data[0][s];    }  } else {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xffff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=(int)data[i][s];    }  }  return dst;}  }
class C{  public Builder addAction(String actionName,Boolean defaultValue){  actions.put(actionName,defaultValue);  return this;}  }
class C{  public static String xmlCData(String xmlData){  char tempChar;  StringBuffer replacedString=new StringBuffer();  for (int i=0; i < xmlData.length(); i++) {    tempChar=xmlData.charAt(i);    if ((Character.isLetterOrDigit(tempChar)) || (Character.isSpaceChar(tempChar))) {      replacedString.append(tempChar);    } else {      replacedString.append("#x").append(Character.digit(tempChar,16));    }  }  return xmlCDataTagOpen + replacedString + xmlCDataTagClose;}  }
class C{  public ConsoleApplication(){  this(System.out,System.err);}  }
class C{  public void handle(String messageId,JsonValue content) throws NotFoundException, PredicateNotMetException {  Reject.ifNull(content);  Reject.ifNull(messageId);  MessagePromise messagePromise=cache.getIfPresent(messageId);  if (messagePromise != null) {    for (    Predicate p : messagePromise.getPredicates()) {      if (!p.perform(content)) {        throw new PredicateNotMetException("Predicate was not matched. Message invalid.");      }    }    messagePromise.getPromise().tryHandleResult(content);    cache.invalidate(messageId);  } else {    debug.warning("Cache was asked to handle {} but never expected it.",messageId);    throw new NotFoundException("This cache was not primed for this messageId.");  }}  }
class C{  public void updateFromExtGState(PdfDictionary extGState){  updateFromExtGState(new PdfExtGState(extGState));}  }
class C{  public <T extends DragGestureRecognizer>T createDragGestureRecognizer(Class<T> recognizerAbstractClass,Component c,int actions,DragGestureListener dgl){  return Toolkit.getDefaultToolkit().createDragGestureRecognizer(recognizerAbstractClass,this,c,actions,dgl);}  }
class C{  protected void paintDoubleBuffered(JComponent c,Image image,Graphics g,int clipX,int clipY,int clipW,int clipH){  Graphics osg=image.getGraphics();  int bw=Math.min(clipW,image.getWidth(null));  int bh=Math.min(clipH,image.getHeight(null));  int x, y, maxx, maxy;  try {    for (x=clipX, maxx=clipX + clipW; x < maxx; x+=bw) {      for (y=clipY, maxy=clipY + clipH; y < maxy; y+=bh) {        osg.translate(-x,-y);        osg.setClip(x,y,bw,bh);        if (volatileBufferType != Transparency.OPAQUE && osg instanceof Graphics2D) {          final Graphics2D g2d=(Graphics2D)osg;          final Color oldBg=g2d.getBackground();          g2d.setBackground(c.getBackground());          g2d.clearRect(x,y,bw,bh);          g2d.setBackground(oldBg);        }        c.paintToOffscreen(osg,x,y,bw,bh,maxx,maxy);        g.setClip(x,y,bw,bh);        if (volatileBufferType != Transparency.OPAQUE && g instanceof Graphics2D) {          final Graphics2D g2d=(Graphics2D)g;          final Composite oldComposite=g2d.getComposite();          g2d.setComposite(AlphaComposite.Src);          g2d.drawImage(image,x,y,c);          g2d.setComposite(oldComposite);        } else {          g.drawImage(image,x,y,c);        }        osg.translate(x,y);      }    }  }  finally {    osg.dispose();  }}  }
class C{  public void doUpgrade(HttpServletRequest request,HttpServletResponse response,ServerEndpointConfig sec,Map<String,String> pathParams) throws ServletException, IOException {  UpgradeUtil.doUpgrade(this,request,response,sec,pathParams);}  }
class C{  public Node insertBefore(Node newChild,Node refChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  @ConstructorProperties({"point1","color1","point2","color2","cyclic"}) public GradientPaint(Point2D pt1,Color color1,Point2D pt2,Color color2,boolean cyclic){  this(pt1,color1,pt2,color2);  this.cyclic=cyclic;}  }
class C{  public Map read(SSOToken token,String objName) throws SMSException, SSOException {  if (objName == null || objName.length() == 0) {    throw new IllegalArgumentException("SMSEnhancedFlatFileObject.read: object name is null or empty.");  }  Map attrMap=null;  mRWLock.readRequest();  try {    String filepath=root.getAttributeFilename(objName,mRootDir);    if (filepath == null) {      if (mDebug.messageEnabled()) {        mDebug.message("SMSEnhancedFlatFileObject.read: object " + objName + " not found.");      }    } else {      attrMap=Collections.EMPTY_MAP;      File filehandle=new File(filepath);      Properties props=null;      if (filehandle.exists()) {        try {          props=loadProperties(filehandle,objName);        } catch (        ServiceNotFoundException e) {        }      }      if (props != null) {        attrMap=new CaseInsensitiveHashMap();        Enumeration keys=props.propertyNames();        while (keys.hasMoreElements()) {          String key=(String)keys.nextElement();          String vals=props.getProperty(key);          if ((vals != null) && (vals.length() > 0)) {            attrMap.put(key,toValSet(key,vals));          }        }      }    }  }  finally {    mRWLock.readDone();  }  return attrMap;}  }
class C{  public boolean hasGlobalSubSchema(){  return (globalSubSchemaNames != null) && !globalSubSchemaNames.isEmpty();}  }
class C{  public void storeToXML(OutputStream os,String comment) throws IOException {  storeToXML(os,comment,"UTF-8");}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  public synchronized int lastIndexOf(Object object,int location){  if (location < elementCount) {    if (object != null) {      for (int i=location; i >= 0; i--) {        if (object.equals(elementData[i])) {          return i;        }      }    } else {      for (int i=location; i >= 0; i--) {        if (elementData[i] == null) {          return i;        }      }    }    return -1;  }  throw arrayIndexOutOfBoundsException(location,elementCount);}  }
class C{  private static BigInteger multiplyKaratsuba(BigInteger x,BigInteger y){  int xlen=x.mag.length;  int ylen=y.mag.length;  int half=(Math.max(xlen,ylen) + 1) / 2;  BigInteger xl=x.getLower(half);  BigInteger xh=x.getUpper(half);  BigInteger yl=y.getLower(half);  BigInteger yh=y.getUpper(half);  BigInteger p1=xh.multiply(yh);  BigInteger p2=xl.multiply(yl);  BigInteger p3=xh.add(xl).multiply(yh.add(yl));  BigInteger result=p1.shiftLeft(32 * half).add(p3.subtract(p1).subtract(p2)).shiftLeft(32 * half).add(p2);  if (x.signum != y.signum) {    return result.negate();  } else {    return result;  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public UMSException(String message,Throwable rootCause){  super(message);  xcptMessage=message;  this.rootCause=rootCause;}  }
class C{  public void toFront(){  moveToFront();}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof ByteOrderMark)) {    return false;  }  ByteOrderMark bom=(ByteOrderMark)obj;  if (bytes.length != bom.length()) {    return false;  }  for (int i=0; i < bytes.length; i++) {    if (bytes[i] != bom.get(i)) {      return false;    }  }  return true;}  }
class C{  public final Key unwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  if (mode != UNWRAP_MODE) {    throw new IllegalStateException();  }  return spiImpl.engineUnwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb11.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb11.impl.ExtensionTypeImpl();}  }
class C{  public String[] generateCodes(int numCodes,CodeGeneratorSource alphabet,int length,boolean allowDuplicates) throws CodeException {  Reject.ifTrue(numCodes < 1,"numCodes must be greater than or equal to 1.");  Reject.ifTrue(length < 1,"length must be greater than or equal to 1.");  String[] recoveryCodes=new String[numCodes];  String result;  for (int i=0; i < numCodes; i++) {    int counter=0;    do {      result=generateCode(alphabet,length);    } while (!allowDuplicates && Arrays.asList(recoveryCodes).contains(result) && counter++ <= retryMaximum);    if (counter >= retryMaximum) {      throw new CodeException("Unable to generate unique codes with the given constraints.");    }    recoveryCodes[i]=result;  }  return recoveryCodes;}  }
class C{  public static boolean contentEquals(File file1,File file2) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.length() != file2.length()) {    return false;  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  InputStream input1=null;  InputStream input2=null;  try {    input1=new FileInputStream(file1);    input2=new FileInputStream(file2);    return IOUtils.contentEquals(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public final boolean isErrorEnabled(){  return false;}  }
class C{  public static void main(String[] args){  LocalizableMessage description=INFO_EMAIL_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(EMailMessage.class.getName(),description,false);  BooleanArgument showUsage=null;  StringArgument attachFile=null;  StringArgument bodyFile=null;  StringArgument host=null;  StringArgument from=null;  StringArgument subject=null;  StringArgument to=null;  try {    host=StringArgument.builder("host").shortIdentifier('h').description(INFO_EMAIL_HOST_DESCRIPTION.get()).multiValued().required().defaultValue("127.0.0.1").valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildAndAddToParser(argParser);    from=StringArgument.builder("from").shortIdentifier('f').description(INFO_EMAIL_FROM_DESCRIPTION.get()).required().valuePlaceholder(INFO_ADDRESS_PLACEHOLDER.get()).buildAndAddToParser(argParser);    to=StringArgument.builder("to").shortIdentifier('t').description(INFO_EMAIL_TO_DESCRIPTION.get()).multiValued().required().valuePlaceholder(INFO_ADDRESS_PLACEHOLDER.get()).buildAndAddToParser(argParser);    subject=StringArgument.builder("subject").shortIdentifier('s').description(INFO_EMAIL_SUBJECT_DESCRIPTION.get()).required().valuePlaceholder(INFO_SUBJECT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bodyFile=StringArgument.builder("body").shortIdentifier('b').description(INFO_EMAIL_BODY_DESCRIPTION.get()).multiValued().required().valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    attachFile=StringArgument.builder("attach").shortIdentifier('a').description(INFO_EMAIL_ATTACH_DESCRIPTION.get()).multiValued().valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage);  } catch (  ArgumentException ae) {    System.err.println(ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    System.exit(1);  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(System.err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    System.exit(1);  }  if (showUsage.isPresent()) {    return;  }  LinkedList<Properties> mailServerProperties=new LinkedList<>();  for (  String s : host.getValues()) {    Properties p=new Properties();    p.setProperty(SMTP_PROPERTY_HOST,s);    mailServerProperties.add(p);  }  EMailMessage message=new EMailMessage(from.getValue(),to.getValues(),subject.getValue());  for (  String s : bodyFile.getValues()) {    try {      File f=new File(s);      if (!f.exists()) {        System.err.println(ERR_EMAIL_NO_SUCH_BODY_FILE.get(s));        System.exit(1);      }      BufferedReader reader=new BufferedReader(new FileReader(f));      while (true) {        String line=reader.readLine();        if (line == null) {          break;        }        message.appendToBody(line);        message.appendToBody("\r\n");      }      reader.close();    } catch (    Exception e) {      System.err.println(ERR_EMAIL_CANNOT_PROCESS_BODY_FILE.get(s,getExceptionMessage(e)));      System.exit(1);    }  }  if (attachFile.isPresent()) {    for (    String s : attachFile.getValues()) {      File f=new File(s);      if (!f.exists()) {        System.err.println(ERR_EMAIL_NO_SUCH_ATTACHMENT_FILE.get(s));        System.exit(1);      }      try {        message.addAttachment(f);      } catch (      Exception e) {        System.err.println(ERR_EMAIL_CANNOT_ATTACH_FILE.get(s,getExceptionMessage(e)));      }    }  }  try {    message.send(mailServerProperties);  } catch (  Exception e) {    System.err.println(ERR_EMAIL_CANNOT_SEND_MESSAGE.get(getExceptionMessage(e)));    System.exit(1);  }}  }
class C{  boolean isSessionInvalid(){  InternalSession session=getReferencedSession();  return (session == null || session.getState() == SessionState.INVALID || session.getState() == SessionState.DESTROYED);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    logger.info("shootme: got an Invite sending OK");    Response response=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.setHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      logger.info("This is a RE INVITE ");      ReInviteTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);    }    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.setHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;    this.sendReInvite(sipProvider);  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  public StateInteractive move_to(PlaPointFloat p_to_location){  PlaPointInt to_location=p_to_location.round();  PlaPointInt from_location=previous_location.round();  if (r_brd.brd_rules.is_trace_snap_45()) {    to_location=to_location.fortyfive_degree_projection(from_location);  }  if (to_location.equals(from_location))   return this;  if (item_to_move.is_user_fixed()) {    i_brd.screen_messages.set_status_message("Please unfix item before dragging");    return this;  }  StateDragMoveComponent move_component=null;  PlaVectorInt rel_coor=to_location.difference_by(from_location);  double length=rel_coor.distance();  boolean shove_ok=false;  for (int index=0; index < 2; ++index) {    move_component=new StateDragMoveComponent(item_to_move,rel_coor,99,5);    if (move_component.check_move()) {      shove_ok=true;      break;    }    if (index == 0) {      double sample_width=2 * r_brd.get_min_trace_half_width();      if (length > sample_width) {        rel_coor=rel_coor.change_length_approx(sample_width);      }    }  }  if (shove_ok) {    if (!something_dragged) {      r_brd.start_notify_observers();      r_brd.generate_snapshot();      actlog_start_scope(LogfileScope.DRAGGING_ITEMS,previous_location);      something_dragged=true;    }    if (!move_component.drag_move(i_brd.itera_settings.trace_pullt_min_move)) {      return return_state;    }    i_brd.repaint();  }  previous_location=p_to_location;  return this;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) static final int cpr(Comparator c,Object x,Object y){  return (c != null) ? c.compare(x,y) : ((Comparable)x).compareTo(y);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("SearchResultEntry(dn=");  buffer.append(dn);  buffer.append(", attrs={");  LinkedList<LDAPAttribute> tmp=getAttributes();  if (!tmp.isEmpty()) {    Iterator<LDAPAttribute> iterator=tmp.iterator();    iterator.next().toString(buffer);    while (iterator.hasNext()) {      buffer.append(", ");      iterator.next().toString(buffer);    }  }  buffer.append("})");}  }
class C{  public static boolean verifyRequestIssuer(String realm,String hostEntity,Issuer reqIssuer,String requestId) throws SAML2Exception {  boolean issuerValid=isSourceSiteValid(reqIssuer,realm,hostEntity);  if (!issuerValid) {    if (debug.messageEnabled()) {      debug.message("SAML2Utils " + "Issuer in Request is not valid.");    }    String[] data={hostEntity,realm,requestId};    LogUtil.error(Level.INFO,LogUtil.INVALID_ISSUER_REQUEST,data,null);    throw new SAML2Exception(bundle.getString("invalidIssuerInRequest"));  }  return issuerValid;}  }
class C{  public ContentDescription findContentDescription(){  ContentDescription result=getContentDescription();  if (result == null && getExtendedHeader() != null) {    result=getExtendedHeader().getContentDescription();  }  return result;}  }
class C{  public void update(LdapDataLayerConfiguration config){  config.updateExternalLdapConfiguration(hosts,username,password,maxConnections,sslMode,heartbeat);}  }
class C{  boolean isUserEnabled(){  return userEnabled;}  }
class C{  public static UpgradeParameters upgradeParams(){  return new UpgradeParameters();}  }
class C{  public synchronized int read(char cbuf[],int off,int len) throws IOException {  if (!connected) {    throw new IOException("Pipe not connected");  } else   if (closedByReader) {    throw new IOException("Pipe closed");  } else   if (writeSide != null && !writeSide.isAlive() && !closedByWriter && (in < 0)) {    throw new IOException("Write end dead");  }  if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int c=read();  if (c < 0) {    return -1;  }  cbuf[off]=(char)c;  int rlen=1;  while ((in >= 0) && (--len > 0)) {    cbuf[off + rlen]=buffer[out++];    rlen++;    if (out >= buffer.length) {      out=0;    }    if (in == out) {      in=-1;    }  }  return rlen;}  }
class C{  protected JobSheets(int value){  super(value);}  }
class C{  public Paper(){  mHeight=LETTER_HEIGHT;  mWidth=LETTER_WIDTH;  mImageableArea=new Rectangle2D.Double(INCH,INCH,mWidth - 2 * INCH,mHeight - 2 * INCH);}  }
class C{  public void testUpdate9() throws SQLException {  DatabaseCreator.fillTestTable5(conn);  PreparedStatement stat=conn.prepareStatement("UPDATE " + DatabaseCreator.TEST_TABLE5 + " SET testValue = ? WHERE testID = ?");  stat.setString(1,"1");  stat.setInt(2,1);  stat.execute();  stat.setString(1,"2");  stat.setInt(2,2);  stat.execute();  ResultSet r=statement.executeQuery("SELECT testId, testValue FROM " + DatabaseCreator.TEST_TABLE5 + " WHERE testID < 3 ORDER BY testID");  while (r.next()) {    assertEquals("Incorrect value was returned",new Integer(r.getInt(1)).toString(),r.getString(2));  }  r.close();  stat.close();}  }
class C{  protected void enableHeartbeatCheck(Router router,JsonObject config){  router.get(config.getString("heartbeat.path","/health")).handler(null);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject left=m_left.execute(xctxt,true);  XObject right=m_right.execute(xctxt,true);  XObject result=operate(left,right);  left.detach();  right.detach();  return result;}  }
class C{  public boolean isPeersNotFoundError(String logMsg){  return logMsg.contains("=" + ReplicationMessages.ERR_NO_REACHABLE_PEER_IN_THE_DOMAIN.ordinal());}  }
class C{  public ReplicaOfflineMsg(byte[] in) throws DataFormatException {  try {    final ByteArrayScanner scanner=new ByteArrayScanner(in);    final byte msgType=scanner.nextByte();    if (msgType != MSG_TYPE_REPLICA_OFFLINE) {      throw new DataFormatException("input is not a valid " + getClass().getSimpleName() + " message: "+ msgType);    }    protocolVersion=scanner.nextShort();    csn=scanner.nextCSN();    if (!scanner.isEmpty()) {      throw new DataFormatException("Did not expect to find more bytes to read for " + getClass().getSimpleName());    }  } catch (  RuntimeException e) {    throw new DataFormatException("byte[] is not a valid " + getClass().getSimpleName());  }}  }
class C{  private void addBlockingView(){  if (mBlockingView == null) {    mBlockingView=new View(this);    RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);    lp.addRule(RelativeLayout.BELOW,R.id.toolbar);    mBlockingView.setLayoutParams(lp);    mBlockingView.setClickable(true);  }  ((RelativeLayout)findViewById(R.id.ucrop_photobox)).addView(mBlockingView);}  }
class C{  public void changedUpdate(FlowView fv,DocumentEvent e,Rectangle alloc){  sync(fv);  super.changedUpdate(fv,e,alloc);}  }
class C{  @Override public void run(Runnable runnable){  if (!TaskProxy.sDefaultExecutor.isBusy()) {    TaskProxy.sDefaultExecutor.execute(runnable);  } else {    new Thread(runnable).start();  }}  }
class C{  protected SizeRequirements calculateMajorAxisRequirements(int axis,SizeRequirements r){  if (r == null) {    r=new SizeRequirements();  }  if (!spanSetFromAttributes(axis,r,cssWidth,cssHeight)) {    r=super.calculateMajorAxisRequirements(axis,r);  } else {    SizeRequirements parentR=super.calculateMajorAxisRequirements(axis,null);    int margin=(axis == X_AXIS) ? getLeftInset() + getRightInset() : getTopInset() + getBottomInset();    r.minimum-=margin;    r.preferred-=margin;    r.maximum-=margin;    constrainSize(axis,r,parentR);  }  return r;}  }
class C{  public String addListener(ConfigurationListener listener) throws ConfigurationException {  if (hasOrgSchema) {    return scm.addListener(new ServiceListenerImpl(listener,componentName));  } else {    return ssm.addListener(new ServiceListenerImpl(listener,componentName));  }}  }
class C{  protected void populateAnnotationsCache(Class<?> clazz,Map<String,String> injections) throws IllegalAccessException, InvocationTargetException, NamingException {  List<AnnotationCacheEntry> annotations=null;  while (clazz != null) {    AnnotationCacheEntry[] annotationsArray=null;synchronized (annotationCache) {      annotationsArray=annotationCache.get(clazz);    }    if (annotationsArray == null) {      if (annotations == null) {        annotations=new ArrayList<>();      } else {        annotations.clear();      }      if (context != null) {        Field[] fields=Introspection.getDeclaredFields(clazz);        for (        Field field : fields) {          Resource resourceAnnotation;          EJB ejbAnnotation;          WebServiceRef webServiceRefAnnotation;          PersistenceContext persistenceContextAnnotation;          PersistenceUnit persistenceUnitAnnotation;          if (injections != null && injections.containsKey(field.getName())) {            annotations.add(new AnnotationCacheEntry(field.getName(),null,injections.get(field.getName()),AnnotationCacheEntryType.FIELD));          } else           if ((resourceAnnotation=field.getAnnotation(Resource.class)) != null) {            annotations.add(new AnnotationCacheEntry(field.getName(),null,resourceAnnotation.name(),AnnotationCacheEntryType.FIELD));          } else           if ((ejbAnnotation=field.getAnnotation(EJB.class)) != null) {            annotations.add(new AnnotationCacheEntry(field.getName(),null,ejbAnnotation.name(),AnnotationCacheEntryType.FIELD));          } else           if ((webServiceRefAnnotation=field.getAnnotation(WebServiceRef.class)) != null) {            annotations.add(new AnnotationCacheEntry(field.getName(),null,webServiceRefAnnotation.name(),AnnotationCacheEntryType.FIELD));          } else           if ((persistenceContextAnnotation=field.getAnnotation(PersistenceContext.class)) != null) {            annotations.add(new AnnotationCacheEntry(field.getName(),null,persistenceContextAnnotation.name(),AnnotationCacheEntryType.FIELD));          } else           if ((persistenceUnitAnnotation=field.getAnnotation(PersistenceUnit.class)) != null) {            annotations.add(new AnnotationCacheEntry(field.getName(),null,persistenceUnitAnnotation.name(),AnnotationCacheEntryType.FIELD));          }        }      }      Method[] methods=Introspection.getDeclaredMethods(clazz);      Method postConstruct=null;      String postConstructFromXml=postConstructMethods.get(clazz.getName());      Method preDestroy=null;      String preDestroyFromXml=preDestroyMethods.get(clazz.getName());      for (      Method method : methods) {        if (context != null) {          if (injections != null && Introspection.isValidSetter(method)) {            String fieldName=Introspection.getPropertyName(method);            if (injections.containsKey(fieldName)) {              annotations.add(new AnnotationCacheEntry(method.getName(),method.getParameterTypes(),injections.get(fieldName),AnnotationCacheEntryType.SETTER));              continue;            }          }          Resource resourceAnnotation;          EJB ejbAnnotation;          WebServiceRef webServiceRefAnnotation;          PersistenceContext persistenceContextAnnotation;          PersistenceUnit persistenceUnitAnnotation;          if ((resourceAnnotation=method.getAnnotation(Resource.class)) != null) {            annotations.add(new AnnotationCacheEntry(method.getName(),method.getParameterTypes(),resourceAnnotation.name(),AnnotationCacheEntryType.SETTER));          } else           if ((ejbAnnotation=method.getAnnotation(EJB.class)) != null) {            annotations.add(new AnnotationCacheEntry(method.getName(),method.getParameterTypes(),ejbAnnotation.name(),AnnotationCacheEntryType.SETTER));          } else           if ((webServiceRefAnnotation=method.getAnnotation(WebServiceRef.class)) != null) {            annotations.add(new AnnotationCacheEntry(method.getName(),method.getParameterTypes(),webServiceRefAnnotation.name(),AnnotationCacheEntryType.SETTER));          } else           if ((persistenceContextAnnotation=method.getAnnotation(PersistenceContext.class)) != null) {            annotations.add(new AnnotationCacheEntry(method.getName(),method.getParameterTypes(),persistenceContextAnnotation.name(),AnnotationCacheEntryType.SETTER));          } else           if ((persistenceUnitAnnotation=method.getAnnotation(PersistenceUnit.class)) != null) {            annotations.add(new AnnotationCacheEntry(method.getName(),method.getParameterTypes(),persistenceUnitAnnotation.name(),AnnotationCacheEntryType.SETTER));          }        }        postConstruct=findPostConstruct(postConstruct,postConstructFromXml,method);        preDestroy=findPreDestroy(preDestroy,preDestroyFromXml,method);      }      if (postConstruct != null) {        annotations.add(new AnnotationCacheEntry(postConstruct.getName(),postConstruct.getParameterTypes(),null,AnnotationCacheEntryType.POST_CONSTRUCT));      } else       if (postConstructFromXml != null) {        throw new IllegalArgumentException("Post construct method " + postConstructFromXml + " for class "+ clazz.getName()+ " is declared in deployment descriptor but cannot be found.");      }      if (preDestroy != null) {        annotations.add(new AnnotationCacheEntry(preDestroy.getName(),preDestroy.getParameterTypes(),null,AnnotationCacheEntryType.PRE_DESTROY));      } else       if (preDestroyFromXml != null) {        throw new IllegalArgumentException("Pre destroy method " + preDestroyFromXml + " for class "+ clazz.getName()+ " is declared in deployment descriptor but cannot be found.");      }      if (annotations.isEmpty()) {        annotationsArray=ANNOTATIONS_EMPTY;      } else {        annotationsArray=annotations.toArray(new AnnotationCacheEntry[annotations.size()]);      }synchronized (annotationCache) {        annotationCache.put(clazz,annotationsArray);      }    }    clazz=clazz.getSuperclass();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  boolean state;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  state=domesticAttr.getSpecified();  assertTrue("domesticSpecified",state);}  }
class C{  static AxesWalker loadOneWalker(WalkingIterator lpi,Compiler compiler,int stepOpCodePos) throws javax.xml.transform.TransformerException {  AxesWalker firstWalker=null;  int stepType=compiler.getOp(stepOpCodePos);  if (stepType != OpCodes.ENDOP) {    firstWalker=createDefaultWalker(compiler,stepType,lpi,0);    firstWalker.init(compiler,stepOpCodePos,stepType);  }  return firstWalker;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgettagname.class,args);}  }
class C{  public void windowDeiconified(WindowEvent e){  ((WindowListener)a).windowDeiconified(e);  ((WindowListener)b).windowDeiconified(e);}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  if (debug > 0) {    System.out.println("@doFilter");  }  if (compressionThreshold == 0) {    if (debug > 0) {      System.out.println("doFilter got called, but compressionTreshold is set to 0 - no compression");    }    chain.doFilter(request,response);    return;  }  boolean supportCompression=false;  if (request instanceof HttpServletRequest) {    if (debug > 1) {      System.out.println("requestURI = " + ((HttpServletRequest)request).getRequestURI());    }    String s=((HttpServletRequest)request).getParameter("gzip");    if ("false".equals(s)) {      if (debug > 0) {        System.out.println("got parameter gzip=false --> don't compress, just chain filter");      }      chain.doFilter(request,response);      return;    }    Enumeration<String> e=((HttpServletRequest)request).getHeaders("Accept-Encoding");    while (e.hasMoreElements()) {      String name=e.nextElement();      if (name.indexOf("gzip") != -1) {        if (debug > 0) {          System.out.println("supports compression");        }        supportCompression=true;      } else {        if (debug > 0) {          System.out.println("no support for compression");        }      }    }  }  if (supportCompression) {    if (response instanceof HttpServletResponse) {      CompressionServletResponseWrapper wrappedResponse=new CompressionServletResponseWrapper((HttpServletResponse)response);      wrappedResponse.setDebugLevel(debug);      wrappedResponse.setCompressionThreshold(compressionThreshold);      wrappedResponse.setCompressionBuffer(compressionBuffer);      wrappedResponse.setCompressionMimeTypes(compressionMimeTypes);      if (debug > 0) {        System.out.println("doFilter gets called with compression");      }      try {        chain.doFilter(request,wrappedResponse);      }  finally {        wrappedResponse.finishResponse();      }      return;    }  } else {    if (debug > 0) {      System.out.println("doFilter gets called w/o compression");    }    chain.doFilter(request,response);    return;  }}  }
class C{  @Descriptor("Display help messages") public String help(){  return "mockservice\t Start new service";}  }
class C{  public MalformedURLException(){}  }
class C{  protected void deployWAR(ContextName cn,File war){  File xml=new File(host.getAppBaseFile(),cn.getBaseName() + "/" + Constants.ApplicationContextXml);  File warTracker=new File(host.getAppBaseFile(),cn.getBaseName() + "/" + Constants.WarTracker);  boolean xmlInWar=false;  try (JarFile jar=new JarFile(war)){    JarEntry entry=jar.getJarEntry(Constants.ApplicationContextXml);    if (entry != null) {      xmlInWar=true;    }  } catch (  IOException e) {  }  boolean useXml=false;  if (xml.exists() && unpackWARs && (!warTracker.exists() || warTracker.lastModified() == war.lastModified())) {    useXml=true;  }  Context context=null;  try {    if (deployXML && useXml && !copyXML) {synchronized (digesterLock) {        try {          context=(Context)digester.parse(xml);        } catch (        Exception e) {          log.error(sm.getString("hostConfig.deployDescriptor.error",war.getAbsolutePath()),e);        } finally {          digester.reset();          if (context == null) {            context=new FailedContext();          }        }      }      context.setConfigFile(xml.toURI().toURL());    } else     if (deployXML && xmlInWar) {synchronized (digesterLock) {        try (JarFile jar=new JarFile(war)){          JarEntry entry=jar.getJarEntry(Constants.ApplicationContextXml);          try (InputStream istream=jar.getInputStream(entry)){            context=(Context)digester.parse(istream);          }         } catch (        Exception e) {          log.error(sm.getString("hostConfig.deployDescriptor.error",war.getAbsolutePath()),e);        } finally {          digester.reset();          if (context == null) {            context=new FailedContext();          }          context.setConfigFile(UriUtil.buildJarUrl(war,Constants.ApplicationContextXml));        }      }    } else     if (!deployXML && xmlInWar) {      log.error(sm.getString("hostConfig.deployDescriptor.blocked",cn.getPath(),Constants.ApplicationContextXml,new File(host.getConfigBaseFile(),cn.getBaseName() + ".xml")));    } else {      context=(Context)Class.forName(contextClass).newInstance();    }  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error(sm.getString("hostConfig.deployWar.error",war.getAbsolutePath()),t);  } finally {    if (context == null) {      context=new FailedContext();    }  }  boolean copyThisXml=false;  if (deployXML) {    if (host instanceof StandardHost) {      copyThisXml=((StandardHost)host).isCopyXML();    }    if (!copyThisXml && context instanceof StandardContext) {      copyThisXml=((StandardContext)context).getCopyXML();    }    if (xmlInWar && copyThisXml) {      xml=new File(host.getConfigBaseFile(),cn.getBaseName() + ".xml");      try (JarFile jar=new JarFile(war)){        JarEntry entry=jar.getJarEntry(Constants.ApplicationContextXml);        try (InputStream istream=jar.getInputStream(entry);FileOutputStream fos=new FileOutputStream(xml);BufferedOutputStream ostream=new BufferedOutputStream(fos,1024)){          byte buffer[]=new byte[1024];          while (true) {            int n=istream.read(buffer);            if (n < 0) {              break;            }            ostream.write(buffer,0,n);          }          ostream.flush();        }       } catch (      IOException e) {      }    }  }  DeployedApplication deployedApp=new DeployedApplication(cn.getName(),xml.exists() && deployXML && copyThisXml);  long startTime=0;  if (log.isInfoEnabled()) {    startTime=System.currentTimeMillis();    log.info(sm.getString("hostConfig.deployWar",war.getAbsolutePath()));  }  try {    deployedApp.redeployResources.put(war.getAbsolutePath(),Long.valueOf(war.lastModified()));    if (deployXML && xml.exists() && copyThisXml) {      deployedApp.redeployResources.put(xml.getAbsolutePath(),Long.valueOf(xml.lastModified()));    } else {      deployedApp.redeployResources.put((new File(host.getConfigBaseFile(),cn.getBaseName() + ".xml")).getAbsolutePath(),Long.valueOf(0));    }    Class<?> clazz=Class.forName(host.getConfigClass());    LifecycleListener listener=(LifecycleListener)clazz.newInstance();    context.addLifecycleListener(listener);    context.setName(cn.getName());    context.setPath(cn.getPath());    context.setWebappVersion(cn.getVersion());    context.setDocBase(cn.getBaseName() + ".war");    host.addChild(context);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error(sm.getString("hostConfig.deployWar.error",war.getAbsolutePath()),t);  } finally {    boolean unpackWAR=unpackWARs;    if (unpackWAR && context instanceof StandardContext) {      unpackWAR=((StandardContext)context).getUnpackWAR();    }    if (unpackWAR && context.getDocBase() != null) {      File docBase=new File(host.getAppBaseFile(),cn.getBaseName());      deployedApp.redeployResources.put(docBase.getAbsolutePath(),Long.valueOf(docBase.lastModified()));      addWatchedResources(deployedApp,docBase.getAbsolutePath(),context);      if (deployXML && !copyThisXml && (xmlInWar || xml.exists())) {        deployedApp.redeployResources.put(xml.getAbsolutePath(),Long.valueOf(xml.lastModified()));      }    } else {      addWatchedResources(deployedApp,null,context);    }    addGlobalRedeployResources(deployedApp);  }  deployed.put(cn.getName(),deployedApp);  if (log.isInfoEnabled()) {    log.info(sm.getString("hostConfig.deployWar.finished",war.getAbsolutePath(),Long.valueOf(System.currentTimeMillis() - startTime)));  }}  }
class C{  protected Schema readSchema() throws ConfigException, InitializationException, DirectoryException {  SchemaLoader loader=new SchemaLoader();  schema=loader.readSchema();  return schema;}  }
class C{  public EmulatedFields(ObjectStreamField[] fields,ObjectStreamField[] declared){  buildSlots(fields);  declaredFields=declared;}  }
class C{  public GridBagLayout(){  comptable=new Hashtable<Component,GridBagConstraints>();  defaultConstraints=new GridBagConstraints();}  }
class C{  static boolean isLowUTF16Surrogate(char ch){  return ('\uDC00' <= ch && ch <= '\uDFFF');}  }
class C{  public JarInputStream(InputStream in) throws IOException {  this(in,true);}  }
class C{  public JKHttpException(final Throwable cause){  super(cause);}  }
class C{  public ReadPendingException(){}  }
class C{  public void test_rotate2(){  List list=new ArrayList();  try {    Collections.rotate(list,5);  } catch (  UnsupportedOperationException e) {    fail("Unexpected UnsupportedOperationException for empty list, " + e);  }  list.add(0,"zero");  list.add(1,"one");  list.add(2,"two");  list.add(3,"three");  list.add(4,"four");  Collections.rotate(list,Integer.MIN_VALUE);  assertEquals("Rotated incorrectly at position 0, ","three",(String)list.get(0));  assertEquals("Rotated incorrectly at position 1, ","four",(String)list.get(1));  assertEquals("Rotated incorrectly at position 2, ","zero",(String)list.get(2));  assertEquals("Rotated incorrectly at position 3, ","one",(String)list.get(3));  assertEquals("Rotated incorrectly at position 4, ","two",(String)list.get(4));}  }
class C{  private DeferredFileOutputStream(int threshold,File outputFile,String prefix,String suffix,File directory){  super(threshold);  this.outputFile=outputFile;  memoryOutputStream=new ByteArrayOutputStream();  currentOutputStream=memoryOutputStream;  this.prefix=prefix;  this.suffix=suffix;  this.directory=directory;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  trimToFileCount();  journalWriter.flush();}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs && null != m_avts) {    int nAttrs=m_avts.size();    for (int i=(nAttrs - 1); i >= 0; i--) {      AVT avt=(AVT)m_avts.get(i);      avt.callVisitors(visitor);    }  }  super.callChildVisitors(visitor,callAttrs);}  }
class C{  @Override public ShapeTileOctagon translate_by(PlaVectorInt p_rel_coor){  if (p_rel_coor.equals(PlaVectorInt.ZERO))   return this;  return new ShapeTileOctagon(oct_lx + p_rel_coor.v_x,oct_ly + p_rel_coor.v_y,oct_rx + p_rel_coor.v_x,oct_uy + p_rel_coor.v_y,oct_ulx + p_rel_coor.v_x - p_rel_coor.v_y,oct_lrx + p_rel_coor.v_x - p_rel_coor.v_y,oct_llx + p_rel_coor.v_x + p_rel_coor.v_y,oct_urx + p_rel_coor.v_x + p_rel_coor.v_y);}  }
class C{  public final int lastIndexOf(Object elem){  for (int i=(m_firstFree - 1); i >= 0; i--) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public static String escapePipe(String text){  int i=text.indexOf("|");  if (i != -1) {    StringBuilder sb=new StringBuilder();    int len=0;    if (text != null) {      len=text.length();    }    sb.append(text.substring(0,i));    for (; i < len; i++) {      if (text.charAt(i) == '|') {        sb.append("&#124;");      } else {        sb.append(text.charAt(i));      }    }    text=sb.toString();  }  return text;}  }
class C{  public Scanner(Readable source){  this(Objects.requireNonNull(source,"source"),WHITESPACE_PATTERN);}  }
class C{  protected void rehash(){  int oldCapacity=table.length;  Entry oldMap[]=table;  int newCapacity=oldCapacity * 2 + 1;  if (newCapacity > maxSize) {    newCapacity=maxSize;    threshold=newCapacity;  } else {    threshold=(int)(newCapacity * loadFactor);  }  Entry newMap[]=new Entry[newCapacity];  modCount++;  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldMap[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=(e.hash & 0x7FFFFFFF) % newCapacity;      e.next=newMap[index];      newMap[index]=e;    }  }}  }
class C{  static Set<String> stripAttributeNameFromValue(Set<String> attributeValues){  Set<String> values=new HashSet<>();  for (  String attributeValue : attributeValues) {    int index=attributeValue.indexOf('=');    if (index != -1) {      String trimmedValue=attributeValue.substring(index + 1).trim();      if (!trimmedValue.isEmpty()) {        values.add(trimmedValue);      }    }  }  return values;}  }
class C{  public Axial(PdfColorSpace cs,PdfArray coords,PdfFunction function){  super(new PdfDictionary(),ShadingType.AXIAL,cs);  setCoords(coords);  setFunction(function);}  }
class C{  public Builder removeRequiredAttribute(String attributeNameOrOID){  this.requiredAttributeOIDs.remove(attributeNameOrOID);  return this;}  }
class C{  protected boolean translateCommand(StringBuilder buf,String pattern,int index,boolean oldInside){  char firstChar=pattern.charAt(index);  boolean newInside=oldInside;  if (firstChar == 'O' || firstChar == 'E') {    if (index + 1 < pattern.length()) {      newInside=translateCommand(buf,pattern,index + 1,oldInside);    } else {      buf.append(quote("%" + firstChar,oldInside));    }  } else {    String command=translate.getProperty(String.valueOf(firstChar));    if (command == null) {      buf.append(quote("%" + firstChar,oldInside));    } else {      if (oldInside) {        buf.append('\'');      }      buf.append(command);      newInside=false;    }  }  return newInside;}  }
class C{  public void removeAuthenticationHeader(String callId){  this.authorizationHeaders.remove(callId);}  }
class C{  @NonNull public static Agera defer(@NonNull Supplier<? extends Observable> supplier){  return new AgeraDefer(supplier);}  }
class C{  public void destroy(){  org.omg.CORBA.portable.InputStream _in=null;  try {    org.omg.CORBA.portable.OutputStream _out=_request("destroy",true);    _in=_invoke(_out);  } catch (  org.omg.CORBA.portable.ApplicationException _ex) {    _in=_ex.getInputStream();    String _id=_ex.getId();    throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException _rm) {    destroy();  } finally {    _releaseReply(_in);  }}  }
class C{  public String instanceName(Object instance){  if (instance == null) {    return "null";  }  if (instance instanceof Class) {    return unqualifiedClassName((Class)instance);  } else {    String result=valueToName.get(instance);    if (result != null) {      return result;    }    Class<?> type=instance.getClass();    String className=unqualifiedClassName(type);    Integer size=nameToCount.get(className);    int instanceNumber=(size == null) ? 0 : (size).intValue() + 1;    nameToCount.put(className,new Integer(instanceNumber));    result=className + instanceNumber;    valueToName.put(instance,result);    return result;  }}  }
class C{  private void updateConfigEntryWithAttribute(DN entryDn,String attrName,List<DN> newBaseDNs) throws DirectoryException, ConfigException {  ConfigurationHandler configHandler=DirectoryServer.getConfigurationHandler();  final Entry configEntry=configHandler.getEntry(entryDn);  final Entry newEntry=LinkedHashMapEntry.deepCopyOfEntry(configEntry);  AttributeType attrType=Schema.getDefaultSchema().getAttributeType(attrName,CoreSchema.getDirectoryStringSyntax());  newEntry.replaceAttribute(new LinkedAttribute(AttributeDescription.create(attrType),newBaseDNs));  configHandler.replaceEntry(configEntry,newEntry);}  }
class C{  public Socket createSocket(Socket s,String hostName,int portNumber,boolean autoClose) throws SSLConnectionException, IOException {  if (sslSocketFactory == null) {    throw new SSLConnectionException(ERR_TOOLS_SSL_CONNECTION_NOT_INITIALIZED.get());  }  return socketWithEnabledProtocols(sslSocketFactory.createSocket(s,hostName,portNumber,autoClose));}  }
class C{  @Post public Representation validateIdToken(Representation body) throws OAuth2RestletException {  try {    final OAuth2Request request=requestFactory.create(getRequest());    final OAuth2Jwt idToken=validateIdToken(request);    return new JsonRepresentation(filterClaims(idToken,request).build());  } catch (  InvalidClientException e) {    throw new OAuth2RestletException(Status.BAD_REQUEST.getCode(),e.getError(),"no registered client matches audience of id_token",null);  }catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);  }catch (  RealmLookupException e) {    throw new OAuth2RestletException(Status.BAD_REQUEST.getCode(),"Invalid realm","Invalid realm: " + e.getRealm(),null);  }}  }
class C{  public static void closeSession() throws HibernateException {  Session session=(Session)threadLocal.get();  threadLocal.set(null);  if (session != null) {    session.close();  }}  }
class C{  private boolean isDualRole(EntityDescriptorElement entityDescriptor){  boolean dual=false;  if (entityDescriptor != null) {    if ((SAML2MetaUtils.getSPSSODescriptor(entityDescriptor) != null) && (SAML2MetaUtils.getIDPSSODescriptor(entityDescriptor) != null)) {      dual=true;    }  }  return dual;}  }
class C{  public void addConfig(DelayedConfig config){  delayedConfigs.add(config);}  }
class C{  public void run(){  while (this.isRunning) {    Socket newsock=null;    try {synchronized (this) {        while (sipStack.maxConnections != -1 && this.nConnections >= sipStack.maxConnections) {          try {            this.wait();            if (!this.isRunning)             return;          } catch (          InterruptedException ex) {            break;          }        }        this.nConnections++;      }      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        logger.logDebug(" waiting to accept new connection!");      }      newsock=sock.accept();      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        logger.logDebug("Accepting new connection!");      }    } catch (    SocketException ex) {      if (this.isRunning) {        logger.logError("Fatal - SocketException occured while Accepting connection",ex);        this.isRunning=false;        break;      }    }catch (    SSLException ex) {      this.isRunning=false;      logger.logError("Fatal - SSSLException occured while Accepting connection",ex);      break;    }catch (    IOException ex) {      logger.logError("Problem Accepting Connection",ex);      continue;    }catch (    Exception ex) {      logger.logError("Unexpected Exception!",ex);      continue;    }    if (isRunning) {      try {        TLSMessageChannel newChannel=new TLSMessageChannel(newsock,sipStack,this,"TLSMessageChannelThread-" + nConnections);        if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))         logger.logDebug(Thread.currentThread() + " adding incoming channel " + newChannel.getKey());        if (newChannel.isHandshakeCompleted()) {          incomingMessageChannels.put(newChannel.getKey(),newChannel);        }      } catch (      Exception ex) {        logger.logError("A problem occured while Accepting connection",ex);      }    }  }}  }
class C{  private Record<Integer,Integer> record(int key){  return Record.from(key,key);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer sb=new StringBuffer(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(ONETIMEUSE_ELEMENT).append(NS).append(" />\n");  return sb.toString();}  }
class C{  public final Signum projection(PlaDirection p_other){  return Signum.of(projection_value(p_other));}  }
class C{  public ECPRelayState createECPRelayState() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_RELAY_STATE);  if (obj == null) {    return new ECPRelayStateImpl();  } else {    return (ECPRelayState)obj;  }}  }
class C{  protected IOException copyRange(Reader reader,PrintWriter writer){  IOException exception=null;  char buffer[]=new char[input];  int len=buffer.length;  while (true) {    try {      len=reader.read(buffer);      if (len == -1)       break;      writer.write(buffer,0,len);    } catch (    IOException e) {      exception=e;      len=-1;      break;    }  }  return exception;}  }
class C{  public synchronized void newPixels(int x,int y,int w,int h,boolean framenotify){  if (animating) {    if (fullbuffers) {      x=y=0;      w=width;      h=height;    } else {      if (x < 0) {        w+=x;        x=0;      }      if (x + w > width) {        w=width - x;      }      if (y < 0) {        h+=y;        y=0;      }      if (y + h > height) {        h=height - y;      }    }    if ((w <= 0 || h <= 0) && !framenotify) {      return;    }    Enumeration enum_=theConsumers.elements();    while (enum_.hasMoreElements()) {      ImageConsumer ic=(ImageConsumer)enum_.nextElement();      if (w > 0 && h > 0) {        sendPixels(ic,x,y,w,h);      }      if (framenotify && isConsumer(ic)) {        ic.imageComplete(ImageConsumer.SINGLEFRAMEDONE);      }    }  }}  }
class C{  protected void shutdown(){  session=null;  version=null;  in=null;  handshakeProtocol=null;  alertProtocol=null;  appData=null;  if (pendingConnectionState != null) {    pendingConnectionState.shutdown();  }  pendingConnectionState=null;  if (activeReadState != null) {    activeReadState.shutdown();  }  activeReadState=null;  if (activeReadState != null) {    activeReadState.shutdown();  }  activeWriteState=null;}  }
class C{  public MetadataContainer(final ContainerType type,final long pos,final BigInteger size){  super(type.getContainerGUID(),pos,size);  this.containerType=type;}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null) {        changeEvent=new ChangeEvent(this);      }      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public void testCreateAttributeNS2() throws Throwable {  Document doc;  Attr attribute1;  Attr attribute2;  String name;  String nodeName;  String nodeValue;  String prefix;  String namespaceURI;  doc=(Document)load("staffNS",builder);  attribute1=doc.createAttributeNS("http://www.w3.org/XML/1998/namespace","xml:xml");  name=attribute1.getName();  nodeName=attribute1.getNodeName();  nodeValue=attribute1.getNodeValue();  prefix=attribute1.getPrefix();  namespaceURI=attribute1.getNamespaceURI();  assertEquals("documentcreateattributeNS02_att1_name","xml:xml",name);  assertEquals("documentcreateattributeNS02_att1_nodeName","xml:xml",nodeName);  assertEquals("documentcreateattributeNS02_att1_nodeValue","",nodeValue);  assertEquals("documentcreateattributeNS02_att1_prefix","xml",prefix);  assertEquals("documentcreateattributeNS02_att1_namespaceURI","http://www.w3.org/XML/1998/namespace",namespaceURI);  attribute2=doc.createAttributeNS("http://www.w3.org/2000/xmlns/","xmlns");  name=attribute2.getName();  nodeName=attribute2.getNodeName();  nodeValue=attribute2.getNodeValue();  prefix=attribute2.getPrefix();  namespaceURI=attribute2.getNamespaceURI();  assertEquals("documentcreateattributeNS02_att2_name","xmlns",name);  assertEquals("documentcreateattributeNS02_att2_nodeName","xmlns",nodeName);  assertEquals("documentcreateattributeNS02_att2_nodeValue","",nodeValue);  assertEquals("documentcreateattributeNS02_att2_namespaceURI","http://www.w3.org/2000/xmlns/",namespaceURI);}  }
class C{  public String extract(HttpServletRequest request,String cookieName){  if (request.getCookies() != null) {    for (    final Cookie cookie : request.getCookies()) {      if (cookie.getName().equals(cookieName)) {        return cookie.getValue();      }    }  }  return null;}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  return in.read(b,off,len);}  }
class C{  public ConcurrentSkipListSet(Comparator<? super E> comparator){  m=new ConcurrentSkipListMap<E,Object>(comparator);}  }
class C{  public void testCase7(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  byte rBytes[]={1,2,3,4,15,26,37,41,52,63,74,15,26,37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public StubNotFoundException(String s,Exception ex){  super(s,ex);}  }
class C{  private SessionID generateSessionId(String domain) throws SessionException {  SessionID sid;  do {    sid=SessionID.generateSessionID(serverConfig,domain);  } while (sessionAccessManager.getInternalSession(sid) != null || sessionAccessManager.getInternalSessionByHandle(sid.toString()) != null);  return sid;}  }
class C{  public FacebookGraphObjectException(Throwable throwable){  super(throwable);}  }
class C{  public ExpandRoomFreespaceIncomplete(ShapeTile p_shape,int p_layer,ShapeTile p_contained_shape){  super(p_shape,p_layer);  contained_shape=p_contained_shape;}  }
class C{  private static boolean entryExists(String dn) throws SMSException {  boolean entryExists=false;  try (Connection conn=getConnection(adminPrincipal)){    conn.searchSingleEntry(LDAPRequests.newSingleEntrySearchRequest(dn,OU_ATTR));    entryExists=true;  } catch (  EntryNotFoundException e) {    debug.warning("SMSLdapObject:entryExists: {} does not exist",dn);  }catch (  LdapException e) {    throw new SMSException("Unable to find entry with DN: " + dn,e,IUMSConstants.SMS_LDAP_OPERATION_FAILED);  }  return entryExists;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Throwable cause=super.getCause();  if (!(cause instanceof IOException))   throw new InvalidObjectException("Cause must be an IOException");}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  public void parseArguments(final String[] rawArguments) throws ArgumentException {  parseArguments(rawArguments,null);}  }
class C{  public void delete(String database,String table,Identifier id){  verifyTable(database,table);  docRepo.delete(id);  notifyAllPlugins(NotifierPlugin.MutateType.DELETE,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeelementnodename.class,args);}  }
class C{  public ByteStringBuilder(final ByteSequence bs){  this(bs.length());  bs.copyTo(this);}  }
class C{  public void invalidateConnection(final Connection conn) throws SQLException {  if (conn instanceof PoolGuardConnectionWrapper) {    final PoolGuardConnectionWrapper pgconn=(PoolGuardConnectionWrapper)conn;    @SuppressWarnings("unchecked") final ObjectPool<Connection> pool=(ObjectPool<Connection>)pgconn.pool;    try {      pool.invalidateObject(pgconn.getDelegateInternal());    } catch (    final Exception e) {    }  } else {    throw new SQLException("Invalid connection class");  }}  }
class C{  public IllformedLocaleException(){  super();}  }
class C{  public void addSortKey(int column,Comparator<String> comparator){  sortKeys.add(column);  sortComparators.add(comparator);}  }
class C{  private void retrieveFailedOperationElements(ModifyOperation modifyOperation){  assertTrue(modifyOperation.getProcessingStartTime() > 0);  assertTrue(modifyOperation.getProcessingStopTime() >= modifyOperation.getProcessingStartTime());  assertTrue(modifyOperation.getProcessingTime() >= 0);}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  public SessionPropertyCondition(){  this(PrivilegeManager.debug,new CoreWrapper());}  }
class C{  private void fill() throws IOException {  int dst;  if (markedChar <= UNMARKED) {    dst=0;  } else {    int delta=nextChar - markedChar;    if (delta >= readAheadLimit) {      markedChar=INVALIDATED;      readAheadLimit=0;      dst=0;    } else {      if (readAheadLimit <= cb.length) {        System.arraycopy(cb,markedChar,cb,0,delta);        markedChar=0;        dst=delta;      } else {        char ncb[]=new char[readAheadLimit];        System.arraycopy(cb,markedChar,ncb,0,delta);        cb=ncb;        markedChar=0;        dst=delta;      }      nextChar=nChars=delta;    }  }  int n;  do {    n=in.read(cb,dst,cb.length - dst);  } while (n == 0);  if (n > 0) {    nChars=dst + n;    nextChar=dst;  }}  }
class C{  private void removeECLDomainCfg(){  try {    DN eclConfigEntryDN=DN.valueOf("cn=external changeLog," + config.dn());    if (DirectoryServer.getConfigurationHandler().hasEntry(eclConfigEntryDN)) {      DirectoryServer.getConfigurationHandler().deleteEntry(eclConfigEntryDN);    }  } catch (  Exception e) {    logger.traceException(e);    logger.error(ERR_CHECK_CREATE_REPL_BACKEND_FAILED,stackTraceToSingleLineString(e));  }}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  @Override protected void afterHandle(Request request,Response response){  if (response.getStatus().isError() && response.getEntity() == null) {    if (405 == response.getStatus().getCode()) {      response.setEntity(jacksonRepresentationFactory.create(UNSUPPORTED_METHOD_TYPE));    } else     if (412 == response.getStatus().getCode()) {      response.setEntity(jacksonRepresentationFactory.create(PRECONDITION_FAILED));    } else     if (response.getStatus().getThrowable() instanceof OAuth2Exception) {      OAuth2Exception exception=(OAuth2Exception)response.getStatus().getThrowable();      setExceptionResponse(response,exception.getStatusCode(),exception.getError());    } else {      setExceptionResponse(response,500,"server_error");    }  }}  }
class C{  private static HttpHost[] toChain(HttpHost proxy){  if (proxy == null)   return null;  return new HttpHost[]{proxy};}  }
class C{  public boolean isSorted(){  return sortControl != null;}  }
class C{  public boolean handleError(DOMError error){  boolean fail=true;  String severity=null;  if (error.getSeverity() == DOMError.SEVERITY_WARNING) {    fail=false;    severity="[Warning]";  } else   if (error.getSeverity() == DOMError.SEVERITY_ERROR) {    severity="[Error]";  } else   if (error.getSeverity() == DOMError.SEVERITY_FATAL_ERROR) {    severity="[Fatal Error]";  }  System.err.println(severity + ": " + error.getMessage()+ "\t");  System.err.println("Type : " + error.getType() + "\t"+ "Related Data: "+ error.getRelatedData()+ "\t"+ "Related Exception: "+ error.getRelatedException());  return fail;}  }
class C{  public static void finalizeAllEnqueued() throws InterruptedException {  Sentinel sentinel=new Sentinel();  enqueueSentinelReference(sentinel);  sentinel.awaitFinalization();}  }
class C{  public void appendCell(char value){  appendCell(String.valueOf(value));}  }
class C{  private Builder(Event35Log.Builder other){  super(other);}  }
class C{  private boolean isClosed(){  return str == null;}  }
class C{  public void insert_pin(int p_component_no,int p_pin_no,NetNosList p_net_no_arr,int p_clearance_class,ItemFixState p_fixed_state){  BrdAbitPin new_pin=new BrdAbitPin(p_component_no,p_pin_no,p_net_no_arr,p_clearance_class,0,p_fixed_state,this);  insert_item(new_pin);}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  private String[] parseRowColSpec(HTML.Attribute key){  AttributeSet attributes=getElement().getAttributes();  String spec="*";  if (attributes != null) {    if (attributes.getAttribute(key) != null) {      spec=(String)attributes.getAttribute(key);    }  }  StringTokenizer tokenizer=new StringTokenizer(spec,",");  int nTokens=tokenizer.countTokens();  int n=getViewCount();  String[] items=new String[Math.max(nTokens,n)];  int i=0;  for (; i < nTokens; i++) {    items[i]=tokenizer.nextToken().trim();    if (items[i].equals("100%")) {      items[i]="*";    }  }  for (; i < items.length; i++) {    items[i]="*";  }  return items;}  }
class C{  public AtomicIntegerArray(int[] array){  this.array=array.clone();}  }
class C{  public Action mapToXACMLAction(String nativeActionName,String serviceName) throws XACMLException {  return null;}  }
class C{  public static void clearAllCaches(){  Enumeration e=cacheMap.elements();  while (e.hasMoreElements()) {    Cache c=(Cache)e.nextElement();    c.removeAll();  }}  }
class C{  public DNTag(){  numComponents=0;}  }
class C{  public static Map<String,String> parseMappings(Set<String> configuredMappings){  Map<String,String> parsedMappings=new HashMap<String,String>();  for (  String mapping : configuredMappings) {    if (mapping.indexOf(EQUALS) == -1) {      continue;    }    StringTokenizer tokenizer=new StringTokenizer(mapping,EQUALS);    final String key=tokenizer.nextToken();    final String value=tokenizer.nextToken();    if (!parsedMappings.containsKey(key)) {      parsedMappings.put(key,value);    } else {      if (debug.warningEnabled()) {        debug.warning("In MappingUtils.parseMappings, the user-entered attribute mappings contain " + "duplicate entries. The first entry will be preserved: " + configuredMappings);      }    }  }  if (parsedMappings.isEmpty()) {    throw new IllegalArgumentException("The mapping Set does not contain any mappings in format " + "local_attribute=source_attribute.");  }  return Collections.unmodifiableMap(parsedMappings);}  }
class C{  public MemberName(Method m){  this(m,false);}  }
class C{  public java.lang.String toString(){  String xml=this.toString(true,false);  return xml;}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public static int length(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return value.length();}  }
class C{  private void initExtendedTypes(){  m_extendedTypes=new ExtendedType[m_initialSize];  for (int i=0; i < DTM.NTYPES; i++) {    m_extendedTypes[i]=m_defaultExtendedTypes[i];    m_table[i]=new HashEntry(m_defaultExtendedTypes[i],i,i,null);  }  m_nextType=DTM.NTYPES;}  }
class C{  public static MatchedValuesFilter createPresentFilter(String rawAttributeType){  Reject.ifNull(rawAttributeType);  return new MatchedValuesFilter(PRESENT_TYPE,rawAttributeType,null,null,null,null,null);}  }
class C{  public FilterExprIteratorSimple(Expression expr){  super(null);  m_expr=expr;}  }
class C{  public AttributeInUseException(String explanation){  super(explanation);}  }
class C{  public static long readUINT32(RandomAccessFile raf) throws IOException {  long result=0;  for (int i=0; i < 4; i++) {    result<<=8;    result|=(long)raf.read();  }  return result;}  }
class C{  public boolean isAccessLoggable(Level level){  SSOToken authSSOToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  if ((authSSOToken == null) || !logStatus) {    return false;  }  return accessLogger.isLoggable(level);}  }
class C{  private static long copy(InputStream source,OutputStream sink) throws IOException {  long nread=0L;  byte[] buf=new byte[BUFFER_SIZE];  int n;  while ((n=source.read(buf)) > 0) {    sink.write(buf,0,n);    nread+=n;  }  return nread;}  }
class C{  public AcroFieldsSearch(Collection<String> items){  inverseSearch=new HashMap<>();  acroShort2LongName=new HashMap<>();  for (  String itemName : items) {    String itemShort=getShortName(itemName);    acroShort2LongName.put(itemShort,itemName);    inverseSearchAdd(inverseSearch,splitParts(itemShort),itemName);  }}  }
class C{  public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {  backTrail();  try {    String name=(String)getPageSessionAttribute(AMAdminConstants.SAVE_VB_NAME);    SCConfigViewBean vb=(SCConfigViewBean)getViewBean(Class.forName(name));    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  ClassNotFoundException e) {    debug.warning("SMG11NViewBean.handleButton3Request:",e);  }}  }
class C{  public static View createHTMLView(JComponent c,String html){  BasicEditorKit kit=getFactory();  Document doc=kit.createDefaultDocument(c.getFont(),c.getForeground());  Object base=c.getClientProperty(documentBaseKey);  if (base instanceof URL) {    ((HTMLDocument)doc).setBase((URL)base);  }  Reader r=new StringReader(html);  try {    kit.read(r,doc,0);  } catch (  Throwable e) {  }  ViewFactory f=kit.getViewFactory();  View hview=f.create(doc.getDefaultRootElement());  View v=new Renderer(c,f,hview);  return v;}  }
class C{  public FramedIPXNetworkAttribute(int msb,int msb2,int msb3,int msb4){  super(OctetUtils.toOctets(AttributeType.FRAMED_IPX_NETWORK,msb,msb2,msb3,msb4));  this.net=new FramedIPXNetworkAttribute(super.getOctets()).getIPXNetworkAddress();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionPropertiesType createEncryptionPropertiesType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionPropertiesTypeImpl();}  }
class C{  public ThreadPool(String poolName,int numThreads,boolean daemon,Debug debug) throws IllegalArgumentException {  if (poolName != null) {    this.poolName=poolName;  } else {    throw new IllegalArgumentException("Must assign a non-null pool name to ThreadPool");  }  this.debug=debug;  numThreads=Math.max(1,numThreads);  idleThreadList=new IPSThread[numThreads];  allThreadList=new IPSThread[numThreads];  for (int i=0; i < numThreads; ++i) {    allThreadList[i]=new IPSThread(getNextIPSThreadID(),daemon);  }}  }
class C{  public SignerId(X500Name issuer,BigInteger serialNumber){  this(issuer,serialNumber,null);}  }
class C{  private void createLayout(){  createBasicLayout(this,new GridBagConstraints());  setBorder(PANEL_BORDER);}  }
class C{  public boolean isPermanent(){  return permanent;}  }
class C{  public FramedCompressionAttribute(byte[] octets){  super(octets);  this.compression=OctetUtils.toIntVal(octets);}  }
class C{  public SerialDatalink(URL url) throws SerialException {  if (url == null) {    throw new SerialException("Cannot serialize empty URL instance");  }  this.url=url;}  }
class C{  public void addListener(CircularProgressViewListener listener){  if (listener != null)   listeners.add(listener);}  }
class C{  protected void paintVerticalLine(Graphics g,JComponent c,int x,int top,int bottom){  if (lineTypeDashed) {    drawDashedVerticalLine(g,x,top,bottom);  } else {    g.drawLine(x,top,x,bottom);  }}  }
class C{  void doneWithMeta(){  parsingMeta=false;  anyToVerify=!sigFileSigners.isEmpty();  baos=null;  sigFileData=null;  pendingBlocks=null;  signerCache=null;  manDig=null;  if (sigFileSigners.containsKey(JarFile.MANIFEST_NAME)) {    CodeSigner[] codeSigners=sigFileSigners.remove(JarFile.MANIFEST_NAME);    verifiedSigners.put(JarFile.MANIFEST_NAME,codeSigners);  }}  }
class C{  @Override public void end(String namespace,String name) throws Exception {  Object parameters[]=null;  if (paramCount > 0) {    parameters=(Object[])digester.popParams();  } else {    parameters=new Object[0];    super.end(namespace,name);  }  ArrayList<?> multiParams=(ArrayList<?>)parameters[multiParamIndex];  Object paramValues[]=new Object[paramTypes.length];  for (int i=0; i < paramTypes.length; i++) {    if (i != multiParamIndex) {      if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {        paramValues[i]=IntrospectionUtils.convert((String)parameters[i],paramTypes[i]);      } else {        paramValues[i]=parameters[i];      }    }  }  Object target;  if (targetOffset >= 0) {    target=digester.peek(targetOffset);  } else {    target=digester.peek(digester.getCount() + targetOffset);  }  if (target == null) {    StringBuilder sb=new StringBuilder();    sb.append("[CallMethodRule]{");    sb.append("");    sb.append("} Call target is null (");    sb.append("targetOffset=");    sb.append(targetOffset);    sb.append(",stackdepth=");    sb.append(digester.getCount());    sb.append(")");    throw new org.xml.sax.SAXException(sb.toString());  }  if (multiParams == null) {    paramValues[multiParamIndex]=null;    IntrospectionUtils.callMethodN(target,methodName,paramValues,paramTypes);    return;  }  for (int j=0; j < multiParams.size(); j++) {    Object param=multiParams.get(j);    if (param == null || (param instanceof String && !String.class.isAssignableFrom(paramTypes[multiParamIndex]))) {      paramValues[multiParamIndex]=IntrospectionUtils.convert((String)param,paramTypes[multiParamIndex]);    } else {      paramValues[multiParamIndex]=param;    }    IntrospectionUtils.callMethodN(target,methodName,paramValues,paramTypes);  }}  }
class C{  public FileWriter(String fileName,boolean append) throws IOException {  super(new FileOutputStream(fileName,append));}  }
class C{  public CryptoManagerException(LocalizableMessage message,Exception cause){  super(message,cause);}  }
class C{  public ValidationResult isDirectoryValid(String dirname,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  if (isStringValid(dirname)) {    File dir=new File(dirname);    if (dir.exists() && dir.isDirectory()) {      returnMessage=LocalizedMessage.get(LOC_VA_MSG_VAL_DIRECTORY,new Object[]{dirname});      validRes=ValidationResultStatus.STATUS_SUCCESS;    }  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_IN_VAL_DIRECTORY,new Object[]{dirname});  }  Debug.log("FileSystemValidator : Is directory : " + dirname + " valid ? "+ validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  public void testUpdate5(){  int factor=3;  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2=field2 *"+ factor;  try {    String selectQuery="SELECT field2 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    HashSet<BigDecimal> values=new HashSet<BigDecimal>();    int num=statement.executeUpdate(updateQuery);    assertEquals("Not all records in the database were updated",numberOfRecords,num);    result=statement.executeQuery(selectQuery);    assertTrue("Not all records were updated",values.isEmpty());    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  public boolean isExpired(){  return currentTimeMillis() > getExpiryTime();}  }
class C{  public float popFloat(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Float value=(Float)wrapper.getValue();  return value.floatValue();}  }
class C{  public boolean contains_plane(){  return contains_plane;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocumentType03.class,args);}  }
class C{  public boolean hasVaryAll(){  return varyFields.contains("*");}  }
class C{  protected HttpURLConnection createConnection(String uri,String method) throws IOException {  HttpURLConnection connection=createConnection(uri);  connection.setRequestMethod(method);  return configureRequest(connection);}  }
class C{  private void prepareNames(){  permitted_names=new ArrayList[9];  if (permittedSubtrees != null) {    for (    GeneralSubtree generalSubtree : permittedSubtrees.getSubtrees()) {      GeneralName name=generalSubtree.getBase();      int tag=name.getTag();      if (permitted_names[tag] == null) {        permitted_names[tag]=new ArrayList<GeneralName>();      }      permitted_names[tag].add(name);    }  }  excluded_names=new ArrayList[9];  if (excludedSubtrees != null) {    for (    GeneralSubtree generalSubtree : excludedSubtrees.getSubtrees()) {      GeneralName name=generalSubtree.getBase();      int tag=name.getTag();      if (excluded_names[tag] == null) {        excluded_names[tag]=new ArrayList<GeneralName>();      }      excluded_names[tag].add(name);    }  }}  }
class C{  public void cancel(){  setStage(ReconStage.ACTIVE_CANCELING);  canceled=true;}  }
class C{  public boolean doAccessibleAction(int i){  if (i == 0) {    doClick();    return true;  } else {    return false;  }}  }
class C{  @Override public void invalidate(){}  }
class C{  public boolean equalArrayTypes(PropertyOptions options){  return isArray() == options.isArray() && isArrayOrdered() == options.isArrayOrdered() && isArrayAlternate() == options.isArrayAlternate() && isArrayAltText() == options.isArrayAltText();}  }
class C{  public final boolean pull_tight(boolean p_own_net_only,int p_pullt_min_move,ThreadStoppable p_stoppable_thread){  NetNosList opt_net_no_arr=p_own_net_only ? net_nos : NetNosList.EMPTY;  AlgoPullTight pull_tight_algo=AlgoPullTight.get_instance(r_board,opt_net_no_arr,p_pullt_min_move,p_stoppable_thread,null);  return pull_tight(pull_tight_algo);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  @DataProvider public Object[][] validAttributeDescriptions(){  return new Object[][]{{"cn",false},{"cn-xxx",false},{"cn",true},{"cn-xxx",true},{"cn_xxx",true},{"cn.xxx",true},{"cn;xxx",false},{"cn;xxx-yyy",false},{"cn;xxx",true},{"cn;xxx-yyy",true},{"cn;xxx_yyy",true},{"cn;xxx.yyy",true}};}  }
class C{  public void update(VLVIndexDescriptor index){  ignoreCheckSave=true;  readOnlyName.setText(index.getName());  titlePanel.setDetails(LocalizableMessage.raw(index.getName()));  if (index.getBackend() != null) {    updateBaseDNCombo(index.getBackend());    backendName.setText(index.getBackend().getBackendID());  }  final String dn=Utilities.unescapeUtf8(index.getBaseDN().toString());  if (((DefaultComboBoxModel)baseDNs.getModel()).getIndexOf(dn) != -1) {    baseDN.setText("");    baseDNs.setSelectedItem(dn);  } else {    baseDN.setText(dn);    baseDNs.setSelectedItem(OTHER_BASE_DN);  }  selectScopeRadioButton(index.getScope());  filter.setText(index.getFilter());  final int indexes[]=new int[sortOrderModel.getSize()];  for (int i=0; i < indexes.length; i++) {    indexes[i]=i;  }  sortOrder.setSelectedIndices(indexes);  remove.doClick();  final DefaultComboBoxModel model=(DefaultComboBoxModel)attributes.getModel();  for (  final VLVSortOrder s : index.getSortOrder()) {    sortOrderModel.addElement(s);    for (int i=0; i < model.getSize(); i++) {      final CategorizedComboBoxElement o=(CategorizedComboBoxElement)model.getElementAt(i);      if (o.getType() == CategorizedComboBoxElement.Type.REGULAR && o.getValue().equals(s.getAttributeName())) {        model.removeElementAt(i);        break;      }    }  }  if (model.getSize() > 1) {    attributes.setSelectedIndex(1);  }  if (getInfo() != null) {    if (getInfo().mustReindex(index)) {      setWarningLabel(warning,INDEX_MODIFIED);      warning.setVisible(true);      warning.setVerticalTextPosition(SwingConstants.TOP);    } else {      warning.setVisible(false);    }  }  this.index=index;  ignoreCheckSave=false;  checkSaveButton();  scrollListener.updateBorder();}  }
class C{  public FileInfo(FileInfo info){  name=info.name;  permissions=info.permissions;  owner=info.owner;  group=info.group;  size=info.size;  lastModified=info.lastModified;  directoryFileCount=info.directoryFileCount;  readAvailable=info.readAvailable;  isSymlink=info.isSymlink;  isDirectory=info.isDirectory;  realFile=info.realFile;  linkedPath=info.linkedPath;}  }
class C{  public void cancelEditing(){  TreeUI tree=getUI();  if (tree != null)   tree.cancelEditing(this);}  }
class C{  public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintScrollBarTrackBorder(context,g,x,y,w,h);}  }
class C{  static public void assertEquals(int expected,int actual){  assertEquals(null,expected,actual);}  }
class C{  TextJustifier(GlyphJustificationInfo[] info,int start,int limit){  this.info=info;  this.start=start;  this.limit=limit;  if (DEBUG) {    System.out.println("start: " + start + ", limit: "+ limit);    for (int i=start; i < limit; i++) {      GlyphJustificationInfo gji=info[i];      System.out.println("w: " + gji.weight + ", gp: "+ gji.growPriority+ ", gll: "+ gji.growLeftLimit+ ", grl: "+ gji.growRightLimit);    }  }}  }
class C{  public CRLVerifier(CertificateVerifier verifier,List<X509CRL> crls){  super(verifier);  this.crls=crls;}  }
class C{  private void savehttpRedLogout(String lohttpLocation,String lohttpRespLocation,List logList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException {  if (lohttpLocation != null && lohttpLocation.length() > 0) {    SingleLogoutServiceElement slsElemRed=objFact.createSingleLogoutServiceElement();    slsElemRed.setBinding(httpRedirectBinding);    slsElemRed.setLocation(lohttpLocation);    slsElemRed.setResponseLocation(lohttpRespLocation);    logList.add(slsElemRed);  }}  }
class C{  public int read() throws IOException {  int b=in.read();  if (b != -1) {    cksum.update(b);  }  return b;}  }
class C{  public NewSubSchemaWrapper(String serviceName,String subSchemaName,Node subSchemas){  this.serviceName=serviceName;  this.subSchemaName=subSchemaName;  this.subSchemas=subSchemas;}  }
class C{  public ImmutableList<A> prependList(final ImmutableList<A> xs){  if (this.isEmpty()) {    return xs;  }  if (xs.isEmpty()) {    return this;  }  if (xs.tail.isEmpty()) {    return prepend(xs.head);  }  ImmutableList<A> result=this;  ImmutableList<A> rev=xs.reverse();  assert rev != xs;  while (rev.nonEmpty()) {    final ImmutableList<A> h=rev;    rev=rev.tail;    h.setTail(result);    result=h;  }  return result;}  }
class C{  @Descriptor("Generate connector configuration.") public void configureconnector(CommandSession session,@Descriptor(USER_PASS_DESC) @MetaVar(USER_PASS_METAVAR) @Parameter(names={"-u","--user"},absentValue=USER_PASS_DEFAULT) final String userPass,@Descriptor(IDM_URL_DESC) @MetaVar(IDM_URL_METAVAR) @Parameter(names={"--url"},absentValue=IDM_URL_DEFAULT) final String idmUrl,@Descriptor(IDM_PORT_DESC) @MetaVar(IDM_PORT_METAVAR) @Parameter(names={"-P","--port"},absentValue="") final String idmPort,@Descriptor("Name of the new connector configuration.") @MetaVar("CONNECTOR") @Parameter(names={"-n","--name"},absentValue="test") final String name){  try (final HttpRemoteJsonResource resource=new HttpRemoteJsonResource(getUrl(idmUrl),getPort(idmPort),getUsername(userPass),getPassword(userPass))){    File temp=IdentityServer.getFileForPath("temp");    if (!temp.exists()) {      temp.mkdir();    }    if (isBlank(name) || !name.matches("\\w++")) {      session.getConsole().append("The given name \"").append(name).println("\" must match [a-zA-Z_0-9] pattern");      return;    }    File finalConfig=new File(temp,"provisioner.openicf-" + name + ".json");    ActionRequest request=Requests.newActionRequest("system","CREATECONFIGURATION");    JsonValue responseValue;    Map<String,Object> configuration=null;    if (!finalConfig.exists()) {      responseValue=resource.action(null,request).getJsonContent();      JsonValue connectorRef=responseValue.get("connectorRef");      if (!connectorRef.isNull() && connectorRef.isList()) {        int i=0;        for (        JsonValue connector : connectorRef) {          String displayName=connector.get("displayName").asString();          if (null == displayName) {            displayName=connector.get("connectorName").asString();          }          String version=connector.get("bundleVersion").asString();          String connectorHostRef=connector.get("connectorHostRef").asString();          session.getConsole().append(Integer.toString(i)).append(". ").append(displayName);          if (null != connectorHostRef) {            session.getConsole().append(" Remote (").append(connectorHostRef).append(")");          }          session.getConsole().append(" version ").println(version);          i++;        }        session.getConsole().append(Integer.toString(connectorRef.size())).println(". Exit");        Scanner input=new Scanner(session.getKeyboard());        int index=-1;        do {          session.getConsole().append("Select [0..").append(Integer.toString(connectorRef.size())).append("]: ");          index=input.nextInt();        } while (index < 0 || index > connectorRef.size());        if (index == connectorRef.size()) {          return;        }        configuration=responseValue.asMap();        configuration.put("connectorRef",connectorRef.get(index).getObject());      } else {        session.getConsole().println("There are no available connector!");      }    } else {      configuration=new JsonValue(mapper.readValue(finalConfig,Map.class)).asMap();      session.getConsole().append("Configuration was found and read from: ").println(finalConfig.getAbsolutePath());    }    if (null == configuration) {      return;    }    request.setContent(new JsonValue(configuration));    responseValue=resource.action(null,request).getJsonContent();    configuration=responseValue.asMap();    configuration.put("name",name);    mapper.writerWithDefaultPrettyPrinter().writeValue(finalConfig,configuration);    session.getConsole().append("Edit the configuration file and run the command again. The configuration was saved to ").println(finalConfig.getAbsolutePath());  } catch (  ResourceException e) {    failAndExit(session,REMOTE_OPERATION_FAILED,e.getMessage());  }catch (  Exception e) {    failAndExit(session,OPERATION_FAILED,e.getMessage());  }}  }
class C{  public void detach(){  if (m_allowDetach) {    m_traverser=null;    m_extendedTypeID=0;    super.detach();  }}  }
class C{  public PaintPathOperator(int operation,int rule,boolean close){  this.operation=operation;  this.rule=rule;  this.close=close;}  }
class C{  protected AbstractConnectionWrapper(final C connection){  Reject.ifNull(connection);  this.connection=connection;}  }
class C{  public NO_IMPLEMENT(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public static void write(OutputStream out,NSObject root) throws IOException {  int minVersion=getMinimumRequiredVersion(root);  if (minVersion > VERSION_00) {    String versionString=((minVersion == VERSION_10) ? "v1.0" : ((minVersion == VERSION_15) ? "v1.5" : ((minVersion == VERSION_20) ? "v2.0" : "v0.0")));    throw new IOException("The given property list structure cannot be saved. " + "The required version of the binary format (" + versionString + ") is not yet supported.");  }  BinaryPropertyListWriter w=new BinaryPropertyListWriter(out,minVersion);  w.write(root);}  }
class C{  String constructComponentName(){synchronized (PopupMenu.class) {    return base + nameCounter++;  }}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  public TRANSACTION_ROLLEDBACK(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  private static void checkPrivilegeForProxyAuthControl(Operation operation) throws DirectoryException {  if (!operation.getClientConnection().hasPrivilege(Privilege.PROXIED_AUTH,operation)) {    throw new DirectoryException(ResultCode.AUTHORIZATION_DENIED,ERR_PROXYAUTH_INSUFFICIENT_PRIVILEGES.get());  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(64);switch (_type) {case TYPE_ROOT:    sb.append("/");  break;case TYPE_ARRAY:sb.append('[');sb.append(getCurrentIndex());sb.append(']');break;case TYPE_OBJECT:sb.append('{');if (_currentName != null) {sb.append('"');CharTypes.appendQuoted(sb,_currentName);sb.append('"');} else {sb.append('?');}sb.append('}');break;}return sb.toString();}  }
class C{  public static XMPDateTime convertToLocalTime(XMPDateTime dateTime){  long timeInMillis=dateTime.getCalendar().getTimeInMillis();  GregorianCalendar cal=new GregorianCalendar();  cal.setTimeInMillis(timeInMillis);  return new XMPDateTimeImpl(cal);}  }
class C{  public Message processRequest(Message request) throws AuthnSvcException {  List list=request.getBodies(AuthnSvcConstants.NS_AUTHN_SVC,AuthnSvcConstants.TAG_SASL_REQUEST);  if (list.isEmpty()) {    throw new AuthnSvcException("missingSASLRequet");  } else   if (list.size() > 1) {    throw new AuthnSvcException("tooManySASLRequet");  }  SASLRequest saslReq=new SASLRequest((Element)list.get(0));  saslReq.setMessageID(request.getCorrelationHeader().getMessageID());  saslReq.setRefToMessageID(request.getCorrelationHeader().getRefToMessageID());  Message message=new Message();  String respMessageID=message.getCorrelationHeader().getMessageID();  SASLResponse saslResp=processSASLRequest(saslReq,request,respMessageID);  message.setSOAPBody(saslResp.toElement());  return message;}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public boolean isEmailEnabled(){  return emailEnabled;}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws SAXException {  m_handler.startDTD(name,publicId,systemId);}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked,final boolean urlSafe){  return encodeBase64(binaryData,isChunked,urlSafe,Integer.MAX_VALUE);}  }
class C{  public static boolean isAccessLoggable(Level level){  SSOToken authSSOToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  if ((authSSOToken == null) || !logActive) {    return false;  }  return accessLogger.isLoggable(level);}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String systemId;  int index;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  systemId=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,systemId);}  }
class C{  public boolean isCreate(){  return isCreate;}  }
class C{  public StringWriter(){  buf=new StringBuffer();  lock=buf;}  }
class C{  public void add(Permission permission){  if (!(permission instanceof AllPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");  all_allowed=true;}  }
class C{  private Pfm2afm(RandomAccessFileOrArray input,OutputStream output) throws java.io.IOException {  this.input=input;  this.output=FileUtil.createPrintWriter(output,"ISO-8859-1");}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public String lookupNamespaceURI(String specifiedPrefix){  short type=this.getNodeType();switch (type) {case Node.ELEMENT_NODE:{      String namespace=this.getNamespaceURI();      String prefix=this.getPrefix();      if (namespace != null) {        if (specifiedPrefix == null && prefix == specifiedPrefix) {          return namespace;        } else         if (prefix != null && prefix.equals(specifiedPrefix)) {          return namespace;        }      }      if (this.hasAttributes()) {        NamedNodeMap map=this.getAttributes();        int length=map.getLength();        for (int i=0; i < length; i++) {          Node attr=map.item(i);          String attrPrefix=attr.getPrefix();          String value=attr.getNodeValue();          namespace=attr.getNamespaceURI();          if (namespace != null && namespace.equals("http://www.w3.org/2000/xmlns/")) {            if (specifiedPrefix == null && attr.getNodeName().equals("xmlns")) {              return value;            } else             if (attrPrefix != null && attrPrefix.equals("xmlns") && attr.getLocalName().equals(specifiedPrefix)) {              return value;            }          }        }      }      return null;    }case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:  return null;case Node.ATTRIBUTE_NODE:{  if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);  }  return null;}default :{return null;}}}  }
class C{  public boolean paint(JComponent paintingComponent,JComponent bufferComponent,Graphics g,int x,int y,int w,int h){  boolean paintCompleted=false;  Image offscreen;  if (repaintManager.useVolatileDoubleBuffer() && (offscreen=getValidImage(repaintManager.getVolatileOffscreenBuffer(bufferComponent,w,h))) != null) {    VolatileImage vImage=(java.awt.image.VolatileImage)offscreen;    GraphicsConfiguration gc=bufferComponent.getGraphicsConfiguration();    for (int i=0; !paintCompleted && i < RepaintManager.VOLATILE_LOOP_MAX; i++) {      if (vImage.validate(gc) == VolatileImage.IMAGE_INCOMPATIBLE) {        repaintManager.resetVolatileDoubleBuffer(gc);        offscreen=repaintManager.getVolatileOffscreenBuffer(bufferComponent,w,h);        vImage=(java.awt.image.VolatileImage)offscreen;      }      paintDoubleBuffered(paintingComponent,vImage,g,x,y,w,h);      paintCompleted=!vImage.contentsLost();    }  }  if (!paintCompleted && (offscreen=getValidImage(repaintManager.getOffscreenBuffer(bufferComponent,w,h))) != null) {    paintDoubleBuffered(paintingComponent,offscreen,g,x,y,w,h);    paintCompleted=true;  }  return paintCompleted;}  }
class C{  public DsnLayerStructure(Collection<DsnLayer> p_layer_list){  arr=new DsnLayer[p_layer_list.size()];  Iterator<DsnLayer> it=p_layer_list.iterator();  for (int i=0; i < arr.length; ++i) {    arr[i]=it.next();  }}  }
class C{  protected int CalcBias(int Offset,int Font){  seek(Offset);  int nSubrs=getCard16();  if (fonts[Font].CharstringType == 1)   return 0; else   if (nSubrs < 1240)   return 107; else   if (nSubrs < 33900)   return 1131; else   return 32768;}  }
class C{  public boolean delete(String value,String name){  Iterator li=this.parameters.iterator();  NameValue nv;  boolean removed=false;  while (li.hasNext()) {    nv=(NameValue)li.next();    if (((String)nv.getValueAsObject()).equalsIgnoreCase(value) && nv.getName().equalsIgnoreCase(name)) {      li.remove();      removed=true;    }  }  return removed;}  }
class C{  public static Polynomial25519 mult(Polynomial25519 a,Polynomial25519 b){  Polynomial25519 output=new Polynomial25519();  output.c=Polynomial25519.innerMult(a.c,b.c);  output.reduceDegree();  output.reduceCoefficients();  return output;}  }
class C{  public static AdvicesHandleableByAMResponse parseXML(Node node){  return new AdvicesHandleableByAMResponse((Set)PolicyUtils.parseAttributeValuePairs(node).get(ADVICES_HANDLEABLE_BY_AM));}  }
class C{  public BeanContextChildSupport(){  super();  beanContextChildPeer=this;  pcSupport=new PropertyChangeSupport(beanContextChildPeer);  vcSupport=new VetoableChangeSupport(beanContextChildPeer);}  }
class C{  public HttpRoute(HttpHost target,InetAddress local,HttpHost proxy,boolean secure,TunnelType tunnelled,LayerType layered){  this(local,target,toChain(proxy),secure,tunnelled,layered);}  }
class C{  public InternalSession recoverSession(SessionID sessionID){  String tokenId=tokenIdFactory.toSessionTokenId(sessionID);  Token token=null;  try {    token=coreTokenService.read(tokenId);  } catch (  CoreTokenException e) {    debug.error("Failed to retrieve session by its handle",e);  }  if (token == null) {    return null;  }  return getInternalSessionFromToken(token);}  }
class C{  public Object shallowClone(){  try {    return super.clone();  } catch (  Exception e) {    return null;  }}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  if (getPrimaryModel() == null) {    throw new ModelControlException("Primary model is null");  }  if (buttons != null) {    getPrimaryModel().setSize(buttons.length);  } else {    getPrimaryModel().setSize(0);  }  super.beginDisplay(event);  resetTileIndex();}  }
class C{  @Override public void close() throws IOException {  if (closed) {    return;  }  if (suspended) {    return;  }  if (cb.getLength() > 0) {    cb.flushBuffer();  }  if ((!coyoteResponse.isCommitted()) && (coyoteResponse.getContentLengthLong() == -1) && !coyoteResponse.getRequest().method().equals("HEAD")) {    if (!coyoteResponse.isCommitted()) {      coyoteResponse.setContentLength(bb.getLength());    }  }  if (coyoteResponse.getStatus() == HttpServletResponse.SC_SWITCHING_PROTOCOLS) {    doFlush(true);  } else {    doFlush(false);  }  closed=true;  Request req=(Request)coyoteResponse.getRequest().getNote(CoyoteAdapter.ADAPTER_NOTES);  req.inputBuffer.close();  coyoteResponse.action(ActionCode.CLOSE,null);}  }
class C{  public boolean equals(Object obj){  if (!super.equals(obj)) {    return false;  }  if (obj.getClass() != getClass()) {    return false;  }  return true;}  }
class C{  public static Foo fetchByUUID_G(java.lang.String uuid,long groupId,boolean retrieveFromCache){  return getPersistence().fetchByUUID_G(uuid,groupId,retrieveFromCache);}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  H5=0xc3d2e1f0;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  boolean removedAt(int removedIndex){  if (isDetached())   return true;  final int cycles=itrs.cycles;  final int takeIndex=ArrayBlockingQueue.this.takeIndex;  final int prevCycles=this.prevCycles;  final int prevTakeIndex=this.prevTakeIndex;  final int len=items.length;  int cycleDiff=cycles - prevCycles;  if (removedIndex < takeIndex)   cycleDiff++;  final int removedDistance=(cycleDiff * len) + (removedIndex - prevTakeIndex);  int cursor=this.cursor;  if (cursor >= 0) {    int x=distance(cursor,prevTakeIndex,len);    if (x == removedDistance) {      if (cursor == putIndex)       this.cursor=cursor=NONE;    } else     if (x > removedDistance) {      this.cursor=cursor=dec(cursor);    }  }  int lastRet=this.lastRet;  if (lastRet >= 0) {    int x=distance(lastRet,prevTakeIndex,len);    if (x == removedDistance)     this.lastRet=lastRet=REMOVED; else     if (x > removedDistance)     this.lastRet=lastRet=dec(lastRet);  }  int nextIndex=this.nextIndex;  if (nextIndex >= 0) {    int x=distance(nextIndex,prevTakeIndex,len);    if (x == removedDistance)     this.nextIndex=nextIndex=REMOVED; else     if (x > removedDistance)     this.nextIndex=nextIndex=dec(nextIndex);  } else   if (cursor < 0 && nextIndex < 0 && lastRet < 0) {    this.prevTakeIndex=DETACHED;    return true;  }  return false;}  }
class C{  public void invalidate(){  super.invalidate();  if (getParent() != null) {    preferenceChanged(null,true,true);  }}  }
class C{  public Map<String,MappedClass> remapClass(MappedClass mc,Map<String,MappedClass> mappings,MappingMode mode){  if (mc.isLibrary() || remapped.contains(mc.getOriginalName())) {    return mappings;  }  if (mc.hasParent()) {    mappings=remapClass(mc.getParent(),mappings,mode);  }  for (  MappedClass interfaze : mc.getInterfaces()) {    mappings=remapClass(interfaze,mappings,mode);  }  if (mc.isInnerClass()) {    mappings=remapClass(mc.getOuterClass(),mappings,mode);  }  if (!mc.isInnerClass()) {    mc.setNewName(mode.getClassName(mc));  } else {    MappedClass outter=mc.getOuterClass();    String newName=mode.getClassName(mc);    String post=newName.contains("/") ? newName.substring(newName.lastIndexOf("/") + 1,newName.length()) : newName;    mc.setNewName(outter.getNewName() + "$" + post);  }  for (  MappedMember mm : mc.getFields()) {    mm.setNewName(mode.getFieldName(mm));  }  for (  MappedMember mm : mc.getMethods()) {    if (keepName(mm) || mm.isLibrary()) {      continue;    }    MappedMember override=ParentUtils.findMethodOverride(mm);    if (override.equals(mm)) {      mm.setNewName(mode.getMethodName(mm));    } else {      mm.setNewName(override.getNewName());      if (mm.doesOverride() && !mm.isOverriden()) {        fixOverrideNames(mm,override);      }    }    MethodNode mn=mm.getMethodNode();    updateStrings(mn,mappings);  }  remapped.add(mc.getOriginalName());  return mappings;}  }
class C{  public void addMember(Guid guid) throws UMSException {  String id=guid.getDn();  PersistentObject entry=null;  try {    entry=UMSObject.getObject(getPrincipal(),guid);  } catch (  UMSException ignore) {  }  if (entry != null && entry instanceof StaticGroup) {    StaticGroup g=(StaticGroup)entry;    if (id.equalsIgnoreCase(getDN()) || g.hasMember(getGuid(),LEVEL_ALL)) {      throw new UMSException(i18n.getString(IUMSConstants.NO_RECURSION_ALLOW));    }  }  modify(new Attr(MEMBER_ATTR_NAME,id),ModificationType.ADD);  save();}  }
class C{  public void addPattern(String pattern) throws ParseException {  if (pattern == null)   return;  PatternEntry.Parser parser=new PatternEntry.Parser(pattern);  PatternEntry entry=parser.next();  while (entry != null) {    fixEntry(entry);    entry=parser.next();  }}  }
class C{  @Override public void init(Subject subject,Map sharedState,Map options){  if (debug.messageEnabled()) {    debug.message("OATH::init");  }  this.options=options;  this.sharedState=sharedState;  bundle=amCache.getResBundle(amAuthOATH,getLoginLocale());  try {    this.authLevel=CollectionHelper.getMapAttr(options,AUTHLEVEL);    try {      this.passLen=Integer.parseInt(CollectionHelper.getMapAttr(options,PASSWORD_LENGTH));    } catch (    NumberFormatException e) {      passLen=0;    }    try {      this.minSecretKeyLength=Integer.parseInt(CollectionHelper.getMapAttr(options,MIN_SECRET_KEY_LENGTH));    } catch (    NumberFormatException e) {      minSecretKeyLength=0;    }    this.secretKeyAttrName=CollectionHelper.getMapAttr(options,SECRET_KEY_ATTRIBUTE_NAME);    this.windowSize=Integer.parseInt(CollectionHelper.getMapAttr(options,WINDOW_SIZE));    this.counterAttrName=CollectionHelper.getMapAttr(options,COUNTER_ATTRIBUTE_NAME);    this.truncationOffset=Integer.parseInt(CollectionHelper.getMapAttr(options,TRUNCATION_OFFSET));    this.totpTimeStep=Integer.parseInt(CollectionHelper.getMapAttr(options,TOTP_TIME_STEP));    this.totpStepsInWindow=Integer.parseInt(CollectionHelper.getMapAttr(options,TOTP_STEPS_IN_WINDOW));    this.loginTimeAttrName=CollectionHelper.getMapAttr(options,LAST_LOGIN_TIME_ATTRIBUTE_NAME);    this.sharedSecretImplClass=CollectionHelper.getMapAttr(options,SHARED_SECRET_IMPLEMENTATION_CLASS);    this.totpMaxClockDrift=CollectionHelper.getIntMapAttr(options,MAXIMUM_CLOCK_DRIFT,-1,debug);    this.observedClockDriftAttrName=CollectionHelper.getMapAttr(options,OBSERVED_CLOCK_DRIFT_ATTRIBUTE_NAME);    String algorithm=CollectionHelper.getMapAttr(options,ALGORITHM);    if (algorithm.equalsIgnoreCase("HOTP")) {      this.algorithm=HOTP;    } else     if (algorithm.equalsIgnoreCase("TOTP")) {      this.algorithm=TOTP;    } else {      this.algorithm=ERROR;    }    String checksumVal=CollectionHelper.getMapAttr(options,CHECKSUM);    checksum=Boolean.parseBoolean(checksumVal);    if (authLevel != null) {      try {        setAuthLevel(Integer.parseInt(authLevel));      } catch (      Exception e) {        debug.error("OATH.init(): Unable to set auth level " + authLevel,e);      }    }  } catch (  Exception e) {    debug.error("OATH.init(): Unable to get module attributes",e);  }  try {    userName=(String)sharedState.get(getUserKey());  } catch (  Exception e) {    debug.error("OATH.init(): Unable to get username: ",e);  }}  }
class C{  public static byte[] decode(String data){  int len=data.length() / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("unable to decode base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public static FontProgram createFont(byte[] fontProgram,boolean cached) throws java.io.IOException {  return createFont(null,fontProgram,cached);}  }
class C{  public void release(){  Log.d(TAG,"deleting program " + mProgramHandle);  GLES20.glDeleteProgram(mProgramHandle);  mProgramHandle=-1;}  }
class C{  private MethodDef parse_method_def_one_stmt() throws SyntaxException {  LineCol lineCol=current.getLineCol();  String methodName=((Element)current).getContent();  Set<AST.Anno> annos=new HashSet<>(this.annos);  this.annos.clear();  Set<Modifier> modifiers=new HashSet<>(this.modifiers);  this.modifiers.clear();  List<VariableDef> variableList=new ArrayList<>();  Set<String> names=new HashSet<>();  parse_method_def_variables(variableList,names);  nextNode(false);  nextNode(false);  parse_expression();  Expression exp=parsedExps.pop();  return new MethodDef(methodName,modifiers,null,variableList,annos,Collections.singletonList(new AST.Return(exp,exp.line_col())),lineCol);}  }
class C{  ObjectStreamField(String signature,String name){  if (name == null) {    throw new NullPointerException("name == null");  }  this.name=name;  this.typeString=signature.replace('.','/').intern();  defaultResolve();  this.isDeserialized=true;}  }
class C{  private static void validateOperation(EnumBindRuleKeyword keyword,EnumBindRuleType op) throws AciException {switch (keyword) {case USERDN:case ROLEDN:case GROUPDN:case IP:case DNS:case AUTHMETHOD:case DAYOFWEEK:    if (op != EnumBindRuleType.EQUAL_BINDRULE_TYPE && op != EnumBindRuleType.NOT_EQUAL_BINDRULE_TYPE) {      throw new AciException(WARN_ACI_SYNTAX_INVALID_BIND_RULE_KEYWORD_OPERATOR_COMBO.get(keyword,op));    }}}  }
class C{  public boolean isField(){  return testAllFlags(IS_FIELD);}  }
class C{  @VisibleForTesting protected Set<String> calculateDeletedServerDefaults(Map<String,String> existingDefaults,Map<String,String> validServerProperties){  Set<String> deletedValues=new HashSet<String>();  for (  String existingAttr : existingDefaults.keySet()) {    int startBracket=existingAttr.indexOf('[');    if (startBracket != -1) {      existingAttr=existingAttr.substring(0,startBracket);    }    if (!validServerProperties.containsKey(existingAttr)) {      deletedValues.add(existingAttr);    }  }  return deletedValues;}  }
class C{  public AttributeSet copyAttributes(){  AttributeSet[] as=getAttributes();  MutableAttributeSet a=new SimpleAttributeSet();  int n=0;  for (int i=as.length - 1; i >= 0; i--) {    a.addAttributes(as[i]);  }  return a;}  }
class C{  @Override public void begin(String namespace,String name,Attributes attributes) throws Exception {  Container c=(Container)digester.peek();  Container p=null;  Object obj=digester.peek(1);  if (obj instanceof Container) {    p=(Container)obj;  }  String className=null;  if (attributeName != null) {    String value=attributes.getValue(attributeName);    if (value != null)     className=value;  }  if (p != null && className == null) {    String configClass=(String)IntrospectionUtils.getProperty(p,attributeName);    if (configClass != null && configClass.length() > 0) {      className=configClass;    }  }  if (className == null) {    className=listenerClass;  }  Class<?> clazz=Class.forName(className);  LifecycleListener listener=(LifecycleListener)clazz.newInstance();  c.addLifecycleListener(listener);}  }
class C{  public boolean equals(XMLString anObject){  return m_str.equals(anObject.toString());}  }
class C{  public boolean markSupported(){  return in.markSupported();}  }
class C{  public final void testIsStatePreserved2(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  EncodedKeySpec meks=new MyEncodedKeySpec(encodedKey);  byte[] ek=meks.getEncoded();  ek[3]=(byte)5;  byte[] ek1=meks.getEncoded();  assertTrue(ek1[3] == (byte)4);}  }
class C{  void pushProcessor(XSLTElementProcessor processor){  m_processors.push(processor);}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  private ResourceResponse decrypt(final ResourceResponse value) throws InternalServerErrorException {  try {    return newResourceResponse(value.getId(),value.getRevision(),null != value.getContent() ? cryptoService.decrypt(value.getContent()) : null);  } catch (  JsonException je) {    throw new InternalServerErrorException(je);  }}  }
class C{  public int registerOrUpdateServer(Map<ServerProperty,Object> serverProperties) throws ADSContextException {  try {    registerServer(serverProperties);    return 0;  } catch (  ADSContextException x) {    if (x.getError() == ErrorType.ALREADY_REGISTERED) {      updateServer(serverProperties);      return 1;    }    throw x;  }}  }
class C{  public FrameBodyTCMP(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public String toUpperUnderscore(){  return toUnderscore(CaseFormat.UPPER_UNDERSCORE);}  }
class C{  public RealmPropertiesViewBean(){  super("RealmProperties");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public void readBitString() throws IOException {  if (tag == ASN1Constants.TAG_BITSTRING) {    if (length == 0) {      throw new ASN1Exception("ASN.1 Bitstring: wrong length. Tag at [" + tagOffset + "]");    }    readContent();    if (buffer[contentOffset] > 7) {      throw new ASN1Exception("ASN.1 Bitstring: wrong content at [" + contentOffset + "]. A number of unused bits MUST be in range 0 to 7");    }    if (length == 1 && buffer[contentOffset] != 0) {      throw new ASN1Exception("ASN.1 Bitstring: wrong content at [" + contentOffset + "]. For empty string unused bits MUST be 0");    }  } else   if (tag == ASN1Constants.TAG_C_BITSTRING) {    throw new ASN1Exception("Decoding constructed ASN.1 bitstring  type is not provided");  } else {    throw expected("bitstring");  }}  }
class C{  public Object clone(){  AttrSet attrSet=new AttrSet();  int size=_attrs.size();  for (int i=0; i < size; i++) {    attrSet.add((Attr)((Attr)_attrs.get(i)).clone());  }  return attrSet;}  }
class C{  public boolean isHidden(){  return hidden;}  }
class C{  public void testCase5(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127};  byte bBytes[]={-127,100,56,7,98,-1,39,-128,127,1,2,3,4,5};  int aSign=-1;  int bSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  this.encrypting=encrypting;  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);      for (int i=0; i < IV.length - iv.length; i++) {        IV[i]=0;      }    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    if (ivParam.getParameters() != null) {      cipher.init(true,ivParam.getParameters());    }  } else {    reset();    if (params != null) {      cipher.init(true,params);    }  }}  }
class C{  public BindOperation processSimpleBind(DN bindDN,ByteString password,List<Control> controls){  BindOperationBasis bindOperation=new BindOperationBasis(this,nextOperationID(),nextMessageID(),controls,PROTOCOL_VERSION,bindDN,password);  bindOperation.setInternalOperation(true);  bindOperation.run();  return bindOperation;}  }
class C{  public static void removeByUuid_C(java.lang.String uuid,long companyId){  getPersistence().removeByUuid_C(uuid,companyId);}  }
class C{  public PathFileComparator(IOCase caseSensitivity){  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  private <T extends AuthenticationPolicyCfg>void createAuthenticationPolicy(T policyConfiguration) throws ConfigException, InitializationException {  if (policyConfiguration.dn().equals(DirectoryServer.getDefaultPasswordPolicyDN()) && !(policyConfiguration instanceof PasswordPolicyCfg)) {    throw new ConfigException(ERR_CONFIG_PWPOLICY_DEFAULT_POLICY_IS_WRONG_TYPE.get(policyConfiguration.dn()));  }  String className=policyConfiguration.getJavaClass();  AuthenticationPolicyCfgDefn d=AuthenticationPolicyCfgDefn.getInstance();  ClassPropertyDefinition pd=d.getJavaClassPropertyDefinition();  try {    Class<AuthenticationPolicyFactory<T>> theClass=(Class<AuthenticationPolicyFactory<T>>)pd.loadClass(className,AuthenticationPolicyFactory.class);    AuthenticationPolicyFactory<T> factory=theClass.newInstance();    factory.setServerContext(serverContext);    AuthenticationPolicy policy=factory.createAuthenticationPolicy(policyConfiguration);    DirectoryServer.registerAuthenticationPolicy(policyConfiguration.dn(),policy);  } catch (  Exception e) {    if (e instanceof InvocationTargetException) {      Throwable t=e.getCause();      if (t instanceof InitializationException) {        throw (InitializationException)t;      } else       if (t instanceof ConfigException) {        throw (ConfigException)t;      }    }    logger.traceException(e);    LocalizableMessage message=ERR_CONFIG_PWPOLICY_INVALID_POLICY_CONFIG.get(policyConfiguration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public static ByteBuffer toBuffer(String spacedHex){  return ByteBuffer.wrap(toByteArray(spacedHex));}  }
class C{  public Lyrics3v2(AbstractTag mp3tag){  if (mp3tag != null) {    if (mp3tag instanceof Lyrics3v2) {      throw new UnsupportedOperationException("Copy Constructor not called. Please type cast the argument");    } else     if (mp3tag instanceof Lyrics3v1) {      Lyrics3v1 lyricOld=(Lyrics3v1)mp3tag;      Lyrics3v2Field newField;      newField=new Lyrics3v2Field(new FieldFrameBodyLYR(lyricOld.getLyric()));      fieldMap.put(newField.getIdentifier(),newField);    } else {      Lyrics3v2Field newField;      Iterator<AbstractID3v2Frame> iterator;      iterator=(new ID3v24Tag(mp3tag)).iterator();      while (iterator.hasNext()) {        try {          newField=new Lyrics3v2Field(iterator.next());          if (newField != null) {            fieldMap.put(newField.getIdentifier(),newField);          }        } catch (        TagException ex) {        }      }    }  }}  }
class C{  public ConversationFactory withEscapeSequence(String escapeSequence){  return withConversationCanceller(new ExactMatchConversationCanceller(escapeSequence));}  }
class C{  @Override public Foo findByUuid_Last(String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_Last(uuid,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public boolean equals(Object obj){  if (obj == null || (!(obj instanceof Timestamp))) {    return false;  }  Timestamp that=(Timestamp)obj;  if (this == that) {    return true;  }  return (timestamp.equals(that.getTimestamp()) && signerCertPath.equals(that.getSignerCertPath()));}  }
class C{  protected boolean filter(String name,boolean isClassName){  if (name == null)   return false;  char ch;  if (name.startsWith("javax")) {    if (name.length() == 5) {      return false;    }    ch=name.charAt(5);    if (isClassName && ch == '.') {      if (name.startsWith("servlet.jsp.jstl.",6)) {        return false;      }      if (name.startsWith("el.",6) || name.startsWith("servlet.",6) || name.startsWith("websocket.",6)|| name.startsWith("security.auth.message.",6)) {        return true;      }    } else     if (!isClassName && ch == '/') {      if (name.startsWith("servlet/jsp/jstl/",6)) {        return false;      }      if (name.startsWith("el/",6) || name.startsWith("servlet/",6) || name.startsWith("websocket/",6)|| name.startsWith("security/auth/message/",6)) {        return true;      }    }  } else   if (name.startsWith("org")) {    if (name.length() == 3) {      return false;    }    ch=name.charAt(3);    if (isClassName && ch == '.') {      if (name.startsWith("apache.",4)) {        if (name.startsWith("tomcat.jdbc.",11)) {          return false;        }        if (name.startsWith("el.",11) || name.startsWith("catalina.",11) || name.startsWith("jasper.",11)|| name.startsWith("juli.",11)|| name.startsWith("tomcat.",11)|| name.startsWith("naming.",11)|| name.startsWith("coyote.",11)) {          return true;        }      }    } else     if (!isClassName && ch == '/') {      if (name.startsWith("apache/",4)) {        if (name.startsWith("tomcat/jdbc/",11)) {          return false;        }        if (name.startsWith("el/",11) || name.startsWith("catalina/",11) || name.startsWith("jasper/",11)|| name.startsWith("juli/",11)|| name.startsWith("tomcat/",11)|| name.startsWith("naming/",11)|| name.startsWith("coyote/",11)) {          return true;        }      }    }  }  return false;}  }
class C{  public static String basic(String userName,String password){  try {    String usernameAndPassword=userName + ":" + password;    byte[] bytes=usernameAndPassword.getBytes("ISO-8859-1");    String encoded=ByteString.of(bytes).base64();    return "Basic " + encoded;  } catch (  UnsupportedEncodingException e) {    throw new AssertionError();  }}  }
class C{  public static MatchedValuesFilter createGreaterOrEqualFilter(String rawAttributeType,ByteString rawAssertionValue){  Reject.ifNull(rawAttributeType,rawAssertionValue);  return new MatchedValuesFilter(GREATER_OR_EQUAL_TYPE,rawAttributeType,rawAssertionValue,null,null,null,null);}  }
class C{  public LDIFEntryReader(final List<String> ldifLines){  super(ldifLines);}  }
class C{  private void logReconEndFailure(ReconciliationContext reconContext,Context context) throws SynchronizationException {  logReconEnd(reconContext,context,Status.FAILURE,"Reconciliation failed.");}  }
class C{  public void selectText(int startIndex,int endIndex){  JTextComponent.this.select(startIndex,endIndex);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  int sourceNode=xctxt.getCurrentNode();  if (m_test.bool(xctxt,sourceNode,this)) {    transformer.executeChildTemplates(this,true);  }}  }
class C{  private ResourceResponse patchResource(Context context,Request request,ResourceResponse resource,String revision,List<PatchOperation> patchOperations) throws ResourceException {  boolean forceUpdate=(revision == null);  boolean retry=forceUpdate;  String rev=revision;  do {    logger.debug("patch name={} id={}",name,request.getResourcePath());    try {      JsonValue oldValue=resource.getContent().copy();      if (revision == null) {        rev=oldValue.get("_rev").asString();      }      Set<JsonPointer> patchedRelationshipFields=new HashSet<JsonPointer>();      for (      PatchOperation operation : patchOperations) {        JsonPointer field=new JsonPointer(operation.getField().get(0));        SchemaField schemaField=schema.getField(field);        if (schemaField != null && schemaField.isRelationship()) {          if (schemaField.isArray() && operation.getValue().isNull()) {            throw new BadRequestException("Cannot delete collection: " + field.toString());          }          patchedRelationshipFields.add(field);        }      }      final Set<JsonPointer> allFields=new HashSet<JsonPointer>(request.getFields());      allFields.addAll(patchedRelationshipFields);      final JsonValue relationships=fetchRelationshipFields(context,resource.getId(),new ArrayList<JsonPointer>(allFields));      oldValue.asMap().putAll(relationships.asMap());      JsonValue newValue=decrypt(oldValue);      boolean modified=JsonValuePatch.apply(newValue,patchOperations);      if (!modified) {        ResourceResponse response=newResourceResponse(resource.getId(),revision,oldValue);        return prepareResponse(context,response,request.getFields());      }      if (enforcePolicies) {        JsonValue propertiesToValidate=json(object());        for (        PatchOperation operation : patchOperations) {          String field=operation.getField().get(0);          if (newValue.keys().contains(field)) {            propertiesToValidate.put(field,newValue.get(field));          }        }        ActionRequest policyAction=newActionRequest(ResourcePath.valueOf("policy").concat(managedId(resource.getId())).toString(),"validateProperty").setContent(propertiesToValidate);        if (ContextUtil.isExternal(context)) {          policyAction.setAdditionalParameter("external","true");        }        JsonValue result=connectionFactory.getConnection().action(context,policyAction).getJsonContent();        if (!result.isNull() && !result.get("result").asBoolean()) {          logger.debug("Requested patch failed policy validation: {}",result);          throw new ForbiddenException("Failed policy validation").setDetail(result);        }      }      if (forceUpdate) {        newValue.put("_rev",rev);      }      ResourceResponse patchedResource=update(context,request,resource.getId(),rev,oldValue,newValue,patchedRelationshipFields,Collections.<JsonPointer>emptySet());      activityLogger.log(context,request,"",managedId(patchedResource.getId()).toString(),oldValue,patchedResource.getContent(),Status.SUCCESS);      retry=false;      logger.debug("Patch successful!");      return prepareResponse(context,patchedResource,request.getFields());    } catch (    PreconditionFailedException e) {      if (forceUpdate) {        logger.debug("Unable to update due to revision conflict. Retrying.");        resource=readResource(context,repoId(resource.getId()));      } else {        throw e;      }    }catch (    ResourceException e) {      throw e;    }catch (    Exception e) {      throw new InternalServerErrorException(e.getMessage(),e);    }  } while (retry);  return null;}  }
class C{  ZIPAction(String origFile,String newFile,boolean deleteOrig){  this.originalFile=new File(origFile);  this.newFile=new File(newFile);  this.deleteOriginal=deleteOrig;}  }
class C{  public DocumentFragment rtree(){  return null;}  }
class C{  private void createLookupFiles(File dirHandle,String attr,Set sunserviceids) throws SMSException {  StringBuilder sb=new StringBuilder(dirHandle.getPath());  sb.append(File.separatorChar);  sb.append(attr);  sb.append('=');  String fileprefix=sb.toString();  for (Iterator i=sunserviceids.iterator(); i.hasNext(); ) {    String id=((String)i.next()).toLowerCase();    File idFile=new File(fileprefix + id);    try {      idFile.createNewFile();    } catch (    IOException e) {      String errmsg="SMSFlatFileObject.createLookupIdFiles: " + " File, " + idFile.getPath() + ". Exception: "+ e.getMessage();      mDebug.error("SMSFlatFileObject.createLookupIdFiles",e);      throw new SMSException(errmsg);    }  }}  }
class C{  public int indexOf(Object o){  if (o == null) {    for (int i=0; i < size; i++)     if (elementData[i] == null)     return i;  } else {    for (int i=0; i < size; i++)     if (o.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  public boolean isConnectionBased(){  return false;}  }
class C{  public boolean validate(int validateAction){  return validate(validateAction,null);}  }
class C{  public void printMessage(String str){  buff.append(str);}  }
class C{  public void onUnsubscribe(){}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeTruncatedLengthArrayAsInteger() throws Exception {  super.testDecodeTruncatedLengthArrayAsInteger();}  }
class C{  protected void listen() throws Exception {  if (doListen()) {    log.warn(sm.getString("nioReceiver.alreadyStarted"));    return;  }  setListen(true);  Selector selector=this.selector.get();  if (selector != null && datagramChannel != null) {    ObjectReader oreader=new ObjectReader(MAX_UDP_SIZE);    registerChannel(selector,datagramChannel,SelectionKey.OP_READ,oreader);  }  while (doListen() && selector != null) {    try {      events();      socketTimeouts();      int n=selector.select(getSelectorTimeout());      if (n == 0) {        continue;      }      Iterator<SelectionKey> it=selector.selectedKeys().iterator();      while (it != null && it.hasNext()) {        SelectionKey key=it.next();        if (key.isAcceptable()) {          ServerSocketChannel server=(ServerSocketChannel)key.channel();          SocketChannel channel=server.accept();          channel.socket().setReceiveBufferSize(getTxBufSize());          channel.socket().setSendBufferSize(getTxBufSize());          channel.socket().setTcpNoDelay(getTcpNoDelay());          channel.socket().setKeepAlive(getSoKeepAlive());          channel.socket().setOOBInline(getOoBInline());          channel.socket().setReuseAddress(getSoReuseAddress());          channel.socket().setSoLinger(getSoLingerOn(),getSoLingerTime());          channel.socket().setSoTimeout(getTimeout());          Object attach=new ObjectReader(channel);          registerChannel(selector,channel,SelectionKey.OP_READ,attach);        }        if (key.isReadable()) {          readDataFromSocket(key);        } else {          key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));        }        it.remove();      }    } catch (    java.nio.channels.ClosedSelectorException cse) {    }catch (    java.nio.channels.CancelledKeyException nx) {      log.warn(sm.getString("nioReceiver.clientDisconnect"));    }catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      log.error(sm.getString("nioReceiver.requestError"),t);    }  }  serverChannel.close();  if (datagramChannel != null) {    try {      datagramChannel.close();    } catch (    Exception iox) {      if (log.isDebugEnabled())       log.debug("Unable to close datagram channel.",iox);    }    datagramChannel=null;  }  closeSelector();}  }
class C{  public boolean closeInitiated(){synchronized (stateLock) {    return closeInitiated;  }}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  public static net.aimeizi.person.QueryParameter.Builder newBuilder(net.aimeizi.person.QueryParameter.Builder other){  return new net.aimeizi.person.QueryParameter.Builder(other);}  }
class C{  public SAML2MetaException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public boolean hasSex(){  return fieldSetFlags()[2];}  }
class C{  public Paragraph addTabStops(TabStop... tabStops){  addTabStopsAsProperty(Arrays.asList(tabStops));  return this;}  }
class C{  public void insert_ushort(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ushort",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_ushort(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void read(InputStream in,Object desc) throws IOException {  if (desc instanceof HTMLDocument && kit instanceof HTMLEditorKit) {    HTMLDocument hdoc=(HTMLDocument)desc;    setDocument(hdoc);    read(in,hdoc);  } else {    String charset=(String)getClientProperty("charset");    Reader r=(charset != null) ? new InputStreamReader(in,charset) : new InputStreamReader(in);    super.read(r,desc);  }}  }
class C{  public boolean hasByteMappings(){  return byteMappings.size() != 0;}  }
class C{  public static StyledParagraph insertChar(AttributedCharacterIterator aci,char[] chars,int insertPos,StyledParagraph oldParagraph){  char ch=aci.setIndex(insertPos);  int relativePos=Math.max(insertPos - aci.getBeginIndex() - 1,0);  Map<? extends Attribute,?> attributes=addInputMethodAttrs(aci.getAttributes());  Decoration d=Decoration.getDecoration(attributes);  if (!oldParagraph.getDecorationAt(relativePos).equals(d)) {    return new StyledParagraph(aci,chars);  }  Object f=getGraphicOrFont(attributes);  if (f == null) {    FontResolver resolver=FontResolver.getInstance();    int fontIndex=resolver.getFontIndex(ch);    f=resolver.getFont(fontIndex,attributes);  }  if (!oldParagraph.getFontOrGraphicAt(relativePos).equals(f)) {    return new StyledParagraph(aci,chars);  }  oldParagraph.length+=1;  if (oldParagraph.decorations != null) {    insertInto(relativePos,oldParagraph.decorationStarts,oldParagraph.decorations.size());  }  if (oldParagraph.fonts != null) {    insertInto(relativePos,oldParagraph.fontStarts,oldParagraph.fonts.size());  }  return oldParagraph;}  }
class C{  protected void loadMaps(){  Set clientTypes=mergedClientData.keySet();  Iterator keys=clientTypes.iterator();  String clientType=null;  Map clientDataMap=null;  while (keys.hasNext()) {    clientType=(String)keys.next();    clientDataMap=(Map)mergedClientData.get(clientType);    setParentStyles(clientDataMap);  }  keys=clientTypes.iterator();  while (keys.hasNext()) {    clientType=(String)keys.next();    clientDataMap=(Map)mergedClientData.get(clientType);    addToClientMap(clientType,clientDataMap);  }}  }
class C{  @Override synchronized boolean isThresholdTypeValid(ObjectName object,String attribute,Comparable<?> value){  final GaugeMonitorObservedObject o=(GaugeMonitorObservedObject)getObservedObject(object);  if (o == null)   return false;  Class<? extends Number> c=classForType(o.getType());  return (isValidForType(highThreshold,c) && isValidForType(lowThreshold,c));}  }
class C{  public SOAPElement create(Name name) throws SOAPException {  return soapFactory.createElement(name);}  }
class C{  @Override public void onTokenRefresh(){  String refreshedToken=FirebaseInstanceId.getInstance().getToken();  Log.d(TAG,"Refreshed token: " + refreshedToken);  sendRegistrationToServer(refreshedToken);}  }
class C{  public final void println(){  if (!isQuiet()) {    out.println();  }}  }
class C{  public AgeFileFilter(long cutoff){  this(cutoff,true);}  }
class C{  public TagField createField(Artwork artwork) throws FieldDataInvalidException {  return new Mp4TagCoverField(artwork.getBinaryData());}  }
class C{  public IllegalAccessError(String s){  super(s);}  }
class C{  public NSString(String string){  content=string;}  }
class C{  public OmnidroidRuntimeException(int code,String message){  super(message);  this.code=code;}  }
class C{  public static void agentmain(String args,Instrumentation inst) throws Exception {  setAndAddTransformer(inst);}  }
class C{  public Holder(ObjectDigestInfo objectDigestInfo){  this.objectDigestInfo=objectDigestInfo;}  }
class C{  public synchronized void clear(){  Entry tab[]=table;  modCount++;  for (int index=tab.length; --index >= 0; )   tab[index]=null;  lruTracker.clear();  count=0;}  }
class C{  public UnavailableException(String msg){  super(msg);  seconds=0;  servlet=null;  permanent=true;}  }
class C{  public Object clone(){  WebServicesClients theClone=null;  try {    theClone=(WebServicesClients)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (selectedWebServicesClients != null) {    theClone.selectedWebServicesClients=new HashSet();    theClone.selectedWebServicesClients.addAll(selectedWebServicesClients);  }  return theClone;}  }
class C{  @Override public ShapeTile simplify(){  if (is_empty())   return ShapeTileSimplex.EMPTY; else   if (is_IntBox())   return bounding_box(); else   if (is_IntOctagon())   return to_octagon(); else   return this;}  }
class C{  static <T>DoubleStream makeDouble(AbstractPipeline<?,Double,?> upstream){  return new OfDouble(upstream);}  }
class C{  public ServerEntryNotFoundException(String msg){  super(msg);  fillInStackTrace();}  }
class C{  public WordIterator(Locale locale){  mIterator=BreakIterator.getWordInstance(locale);}  }
class C{  private int handleZ(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (charAt(value,index + 1) == 'H') {    result.append('J');    index+=2;  } else {    if (contains(value,index + 1,2,"ZO","ZI","ZA") || (slavoGermanic && (index > 0 && charAt(value,index - 1) != 'T'))) {      result.append("S","TS");    } else {      result.append('S');    }    index=charAt(value,index + 1) == 'Z' ? index + 2 : index + 1;  }  return index;}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (justification != StyleConstants.ALIGN_LEFT)   return x + 10.0f;  x-=tabBase;  TabSet tabs=getTabSet();  if (tabs == null) {    return (float)(tabBase + (((int)x / 72 + 1) * 72));  }  TabStop tab=tabs.getTabAfter(x + .01f);  if (tab == null) {    return tabBase + x + 5.0f;  }  int alignment=tab.getAlignment();  int offset;switch (alignment) {default :case TabStop.ALIGN_LEFT:    return tabBase + tab.getPosition();case TabStop.ALIGN_BAR:  return tabBase + tab.getPosition();case TabStop.ALIGN_RIGHT:case TabStop.ALIGN_CENTER:offset=findOffsetToCharactersInString(tabChars,tabOffset + 1);break;case TabStop.ALIGN_DECIMAL:offset=findOffsetToCharactersInString(tabDecimalChars,tabOffset + 1);break;}if (offset == -1) {offset=getEndOffset();}float charsSize=getPartialSize(tabOffset + 1,offset);switch (alignment) {case TabStop.ALIGN_RIGHT:case TabStop.ALIGN_DECIMAL:return tabBase + Math.max(x,tab.getPosition() - charsSize);case TabStop.ALIGN_CENTER:return tabBase + Math.max(x,tab.getPosition() - charsSize / 2.0f);}return x;}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec03(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public void test_DivideBigDecimalRoundingModeCEILING(){  String a="3736186567876876578956958765675671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.CEILING;  String c="50000260373164286401361914";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  static public boolean validateCertificate(X509Certificate cert,boolean checkCAStatus){  String method="validateCertificate : ";  boolean certgood=true;  try {    Vector crls=new Vector();    X509CRL crl=AMCRLStore.getCRL(ldapParams,cert,crlSearchAttr);    if (crl != null) {      crls.add(crl);    }    if (debug.messageEnabled()) {      debug.message(method + " crls size = " + crls.size());      if (crls.size() > 0) {        debug.message(method + "CRL = " + crls.toString());      } else {        debug.message(method + "NO CRL found.");      }    }    AMCertPath certpath=new AMCertPath(crls);    X509Certificate certs[]={cert};    if (!certpath.verify(certs,true,false)) {      debug.error(method + "CertPath:verify failed.");      return certgood=false;    }  } catch (  Exception e) {    debug.error(method + "verify failed.",e);    return certgood=false;  }  if ((checkCAStatus == true) && (AMCertStore.isRootCA(cert) == false)) {    X509Certificate caCert=AMCertStore.getIssuerCertificate(ldapParams,cert,crlSearchAttr);    certgood=validateCertificate(caCert,checkCAStatus);  }  return certgood;}  }
class C{  public final AMAccessAuditEventBuilder realm(String realm){  putRealm(jsonValue,realm);  return this;}  }
class C{  @NonNull public static Interpolator fastOutLinearIn(){  return new FastOutLinearInInterpolator();}  }
class C{  public boolean chainIsNotPinned(String hostname,List<X509Certificate> chain) throws PinManagerException {  PinListEntry entry=lookup(hostname);  if (entry != null) {    return entry.chainIsNotPinned(chain);  }  return false;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509IssuerSerialType createX509IssuerSerialType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509IssuerSerialTypeImpl();}  }
class C{  public static KeywordBindRule decode(String expression,EnumBindRuleType type) throws AciException {  String[] vals=expression.split("[|][|]");  List<UserDNTypeURL> urlList=new LinkedList<>();  for (  String val : vals) {    StringBuilder value=new StringBuilder(val.trim());    EnumUserDNType userDNType=UserDN.getType(value);    LDAPURL url;    try {      url=LDAPURL.decode(value.toString(),true);    } catch (    LocalizedIllegalArgumentException|DirectoryException e) {      throw new AciException(WARN_ACI_SYNTAX_INVALID_USERDN_URL.get(e.getMessageObject()));    }    urlList.add(new UserDNTypeURL(userDNType,url));  }  return new UserDN(type,urlList);}  }
class C{  private MatchedValuesFilter(byte matchType,String rawAttributeType,ByteString rawAssertionValue,ByteString subInitial,List<ByteString> subAny,ByteString subFinal,String matchingRuleID){  this.matchType=matchType;  this.rawAttributeType=rawAttributeType;  this.rawAssertionValue=rawAssertionValue;  this.subInitial=subInitial;  this.subAny=subAny;  this.subFinal=subFinal;  this.matchingRuleID=matchingRuleID;}  }
class C{  public void bind(org.omg.CosNaming.NameComponent[] n,org.omg.CORBA.Object obj) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName, org.omg.CosNaming.NamingContextPackage.AlreadyBound {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("bind",true);    org.omg.CosNaming.NameHelper.write($out,n);    org.omg.CORBA.ObjectHelper.write($out,obj);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    bind(n,obj);  } finally {    _releaseReply($in);  }}  }
class C{  public BufferedImage toImage(int scale,int border){  if (scale <= 0 || border < 0)   throw new IllegalArgumentException("Value out of range");  BufferedImage result=new BufferedImage((size + border * 2) * scale,(size + border * 2) * scale,BufferedImage.TYPE_INT_RGB);  for (int y=0; y < result.getHeight(); y++) {    for (int x=0; x < result.getWidth(); x++) {      int val=getModule(x / scale - border,y / scale - border);      result.setRGB(x,y,val == 1 ? 0x000000 : 0xFFFFFF);    }  }  return result;}  }
class C{  @AfterClass public void disableLockdownMode(){  DirectoryServer.setLockdownMode(false);}  }
class C{  public final void pushPair(Node v1,Node v2){  if (null == m_map) {    m_map=new Node[m_blocksize];    m_mapSize=m_blocksize;  } else {    if ((m_firstFree + 2) >= m_mapSize) {      m_mapSize+=m_blocksize;      Node newMap[]=new Node[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree);      m_map=newMap;    }  }  m_map[m_firstFree]=v1;  m_map[m_firstFree + 1]=v2;  m_firstFree+=2;}  }
class C{  private static LibPackage search_lib_package(String p_part_name,java.util.Collection<DsnLogicalPartMapping> p_logical_part_mappings,RoutingBoard p_board){  for (  DsnLogicalPartMapping curr_mapping : p_logical_part_mappings) {    if (curr_mapping.name.equals(p_part_name)) {      if (curr_mapping.components.isEmpty()) {        System.out.println("Network.search_lib_package: component list empty");        return null;      }      String component_name=curr_mapping.components.first();      if (component_name == null) {        System.out.println("Network.search_lib_package: component list empty");        return null;      }      BrdComponent curr_component=p_board.brd_components.get(component_name);      if (curr_component == null) {        System.out.println("Network.search_lib_package: component not found");        return null;      }      return curr_component.get_package();    }  }  System.out.print("Network.search_lib_package: library package ");  System.out.print(p_part_name);  System.out.println(" not found");  return null;}  }
class C{  public Vector multiply(double m){  x*=m;  y*=m;  z*=m;  return this;}  }
class C{  public StatelessSession generate(String tokenId) throws SessionException {  return generate(new SessionID(tokenId));}  }
class C{  public AssertionManagerClient(String url) throws SAMLException {  try {    String[] urls={url};    stub=new SOAPClient(urls);    useLocal=false;  } catch (  Exception e) {    if (SAMLUtils.debug.warningEnabled()) {      SAMLUtils.debug.warning("AssertionManagerClient() Exception",e);    }    throw (new SAMLException(e.getMessage()));  }}  }
class C{  public WSFedPropertiesModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  public void testDelete7() throws SQLException {  DatabaseCreator.fillTestTable5(conn);  PreparedStatement stat=conn.prepareStatement("DELETE FROM " + DatabaseCreator.TEST_TABLE5 + " WHERE testID = ?");  stat.setInt(1,1);  stat.execute();  stat.setInt(1,2);  stat.execute();  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.TEST_TABLE5 + " WHERE testID < 3 ");  r.next();  assertEquals(0,r.getInt(1));  r.close();  stat.close();}  }
class C{  public static void copy(InputStream inputStream,OutputStream outputStream,int bufferSize) throws IOException {  byte[] buffer;  ByteArrayPool.ByteArray array=null;  if (bufferSize > BUFFER_SIZE) {    buffer=new byte[bufferSize];  } else {    array=BUFFER_POOL.getByteArray();    buffer=array.getBytes();  }  IOUtils.copyLarge(inputStream,outputStream,buffer);  outputStream.flush();  if (array != null) {    array.release();  }}  }
class C{  protected void storeWithBackup(StandardContext aContext) throws Exception {  StoreFileMover mover=getConfigFileWriter(aContext);  if (mover != null) {    if ((mover.getConfigOld() == null) || (mover.getConfigOld().isDirectory()) || (mover.getConfigOld().exists() && !mover.getConfigOld().canWrite())) {      log.error("Cannot move orignal context output file at " + mover.getConfigOld());      throw new IOException("Context orginal file at " + mover.getConfigOld() + " is null, not a file or not writable.");    }    File dir=mover.getConfigSave().getParentFile();    if (dir != null && dir.isDirectory() && (!dir.canWrite())) {      log.error("Cannot save context output file at " + mover.getConfigSave());      throw new IOException("Context save file at " + mover.getConfigSave() + " is not writable.");    }    if (log.isInfoEnabled())     log.info("Store Context " + aContext.getPath() + " separate with backup (at file "+ mover.getConfigSave()+ " )");    try (PrintWriter writer=mover.getWriter()){      storeXMLHead(writer);      super.store(writer,-2,aContext);    }     mover.move();  }}  }
class C{  public InsufficientResourcesException(){  super();}  }
class C{  public static <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return getService().dynamicQuery(dynamicQuery);}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  B64OutputStream bos=null;  try {    bos=new B64OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
