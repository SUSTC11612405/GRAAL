class C{  private void doBaseDN(DN baseDN,Map<DN,DN> modifyDNmap){  for (  Map.Entry<DN,DN> mapEntry : modifyDNmap.entrySet()) {    searchBaseDN(baseDN,mapEntry.getKey(),mapEntry.getValue());  }}  }
class C{  public String metaphone(String txt){  boolean hard=false;  if ((txt == null) || (txt.length() == 0)) {    return "";  }  if (txt.length() == 1) {    return txt.toUpperCase();  }  char[] inwd=txt.toUpperCase().toCharArray();  StringBuffer local=new StringBuffer(40);  StringBuffer code=new StringBuffer(10);switch (inwd[0]) {case 'K':case 'G':case 'P':    if (inwd[1] == 'N') {      local.append(inwd,1,inwd.length - 1);    } else {      local.append(inwd);    }  break;case 'A':if (inwd[1] == 'E') {  local.append(inwd,1,inwd.length - 1);} else {  local.append(inwd);}break;case 'W':if (inwd[1] == 'R') {local.append(inwd,1,inwd.length - 1);break;}if (inwd[1] == 'H') {local.append(inwd,1,inwd.length - 1);local.setCharAt(0,'W');} else {local.append(inwd);}break;case 'X':inwd[0]='S';local.append(inwd);break;default :local.append(inwd);}int wdsz=local.length();int n=0;while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {char symb=local.charAt(n);if ((symb != 'C') && (isPreviousChar(local,n,symb))) {n++;} else {switch (symb) {case 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {code.append(symb);}break;case 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {break;}code.append(symb);break;case 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0)) {break;}if (regionMatch(local,n,"CIA")) {code.append('X');break;}if (!isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0)) {code.append('S');break;}if (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {code.append('K');break;}if (isNextChar(local,n,'H')) {if ((n == 0) && (wdsz >= 3) && isVowel(local,2)) {code.append('K');} else {code.append('X');}} else {code.append('K');}break;case 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && (this.frontv.indexOf(local.charAt(n + 2)) >= 0)) {code.append('J');n+=2;} else {code.append('T');}break;case 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {break;}if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {break;}if ((n > 0) && (regionMatch(local,n,"GN") || regionMatch(local,n,"GNED"))) {break;}if (isPreviousChar(local,n,'G')) {hard=true;} else {hard=false;}if (!isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {code.append('J');} else {code.append('K');}break;case 'H':if (isLastChar(wdsz,n)) {break;}if ((n > 0) && (this.varson.indexOf(local.charAt(n - 1)) >= 0)) {break;}if (isVowel(local,n + 1)) {code.append('H');}break;case 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);break;case 'K':if (n > 0) {if (!isPreviousChar(local,n,'C')) {code.append(symb);}} else {code.append(symb);}break;case 'P':if (isNextChar(local,n,'H')) {code.append('F');} else {code.append(symb);}break;case 'Q':code.append('K');break;case 'S':if (regionMatch(local,n,"SH") || regionMatch(local,n,"SIO") || regionMatch(local,n,"SIA")) {code.append('X');} else {code.append('S');}break;case 'T':if (regionMatch(local,n,"TIA") || regionMatch(local,n,"TIO")) {code.append('X');break;}if (regionMatch(local,n,"TCH")) {break;}if (regionMatch(local,n,"TH")) {code.append('0');} else {code.append('T');}break;case 'V':code.append('F');break;case 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {code.append(symb);}break;case 'X':code.append('K');code.append('S');break;case 'Z':code.append('S');break;}n++;}if (code.length() > this.getMaxCodeLen()) {code.setLength(this.getMaxCodeLen());}}return code.toString();}  }
class C{  public static int encodePassword(String[] args){  return encodePassword(args,true,System.out,System.err);}  }
class C{  public TransformerConfigurationException(String msg){  super(msg);}  }
class C{  public boolean beginContentStaticTextHeaderDisplay(ChildDisplayEvent event){  return ((TextHeaderVal != null) && (TextHeaderVal.length() > 0));}  }
class C{  void checkTargetForReferral(Entry entry,SearchScope searchScope) throws DirectoryException {  Set<String> referralURLs=entry.getReferralURLs();  if (referralURLs != null) {    throwReferralException(entry.getName(),entry.getName(),referralURLs,searchScope);  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  String subSchema=(String)getDisplayFieldValue(RB_SUBCONFIG);  SubConfigAddViewBean vb=(SubConfigAddViewBean)getViewBean(SubConfigAddViewBean.class);  unlockPageTrailForSwapping();  passPgSessionMap(vb);  vb.setPageSessionAttribute(AMServiceProfile.PG_SESSION_SUB_SCHEMA_NAME,subSchema);  vb.forwardTo(getRequestContext());}  }
class C{  @Override public void removeApplicationType(String name) throws EntitlementException {  try {    SSOToken token=SubjectUtils.getSSOToken(subject);    if (token == null) {      Object[] arg={name};      throw new EntitlementException(245,arg);    }    ServiceConfig conf=getApplicationTypeCollectionConfig(token);    if (conf != null) {      conf.removeSubConfig(name);    }  } catch (  SMSException ex) {    Object[] arg={name};    throw new EntitlementException(240,arg,ex);  }catch (  SSOException ex) {    Object[] arg={name};    throw new EntitlementException(240,arg,ex);  }}  }
class C{  public org.w3c.dom.Document encryptAndReplace(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keySize,java.security.Key kek,int kekStrength,String providerID) throws EncryptionException {  return ep.encryptAndReplace(doc,element,secretKeyAlg,keySize,kek,kekStrength,providerID);}  }
class C{  @Override public ByteString generatePassword(Entry userEntry) throws DirectoryException {  StringBuilder buffer=new StringBuilder(totalLength);synchronized (generatorLock) {    for (int i=0; i < characterSets.length; i++) {      characterSets[i].getRandomCharacters(buffer,characterCounts[i]);    }  }  return ByteString.valueOfUtf8(buffer);}  }
class C{  @SuppressWarnings("deprecation") public final void testGetAlgorithmPropertyLjava_lang_String_java_lang_String(){  Provider provider=new MyProvider();  Map<String,String> m=new HashMap<String,String>();  m.clear();  m.put("Alg.propName.algName","value");  provider.putAll(m);  try {    Security.addProvider(provider);    assertNotNull(Security.getAlgorithmProperty("algName","propName"));    assertNull(Security.getAlgorithmProperty("DSA",null));    assertNull(Security.getAlgorithmProperty("DSA","propName"));  }  finally {    Security.removeProvider(provider.getName());  }}  }
class C{  boolean legalElementContext(Element elem) throws ChangedCharSetException {  if (stack == null) {    if (elem != dtd.html) {      startTag(makeTag(dtd.html,true));      return legalElementContext(elem);    }    return true;  }  if (stack.advance(elem)) {    markFirstTime(elem);    return true;  }  boolean insertTag=false;  String stackElemName=stack.elem.getName();  String elemName=elem.getName();  if (!strict && ((stackElemName.equals("table") && elemName.equals("td")) || (stackElemName.equals("table") && elemName.equals("th")) || (stackElemName.equals("tr") && !elemName.equals("tr")))) {    insertTag=true;  }  if (!strict && !insertTag && (stack.elem.getName() != elem.getName() || elem.getName().equals("body"))) {    if (skipTag=ignoreElement(elem)) {      error("tag.ignore",elem.getName());      return skipTag;    }  }  if (!strict && stackElemName.equals("table") && !elemName.equals("tr")&& !elemName.equals("td")&& !elemName.equals("th")&& !elemName.equals("caption")) {    Element e=dtd.getElement("tr");    TagElement t=makeTag(e,true);    legalTagContext(t);    startTag(t);    error("start.missing",elem.getName());    return legalElementContext(elem);  }  if (!insertTag && stack.terminate() && (!strict || stack.elem.omitEnd())) {    for (TagStack s=stack.next; s != null; s=s.next) {      if (s.advance(elem)) {        while (stack != s) {          endTag(true);        }        return true;      }      if (!s.terminate() || (strict && !s.elem.omitEnd())) {        break;      }    }  }  Element next=stack.first();  if (next != null && (!strict || next.omitStart()) && !(next == dtd.head && elem == dtd.pcdata)) {    TagElement t=makeTag(next,true);    legalTagContext(t);    startTag(t);    if (!next.omitStart()) {      error("start.missing",elem.getName());    }    return legalElementContext(elem);  }  if (!strict) {    ContentModel content=stack.contentModel();    Vector<Element> elemVec=new Vector<Element>();    if (content != null) {      content.getElements(elemVec);      for (      Element e : elemVec) {        if (stack.excluded(e.getIndex())) {          continue;        }        boolean reqAtts=false;        for (AttributeList a=e.getAttributes(); a != null; a=a.next) {          if (a.modifier == REQUIRED) {            reqAtts=true;            break;          }        }        if (reqAtts) {          continue;        }        ContentModel m=e.getContent();        if (m != null && m.first(elem)) {          TagElement t=makeTag(e,true);          legalTagContext(t);          startTag(t);          error("start.missing",e.getName());          return legalElementContext(elem);        }      }    }  }  if (stack.terminate() && (stack.elem != dtd.body) && (!strict || stack.elem.omitEnd())) {    if (!stack.elem.omitEnd()) {      error("end.missing",elem.getName());    }    endTag(true);    return legalElementContext(elem);  }  return false;}  }
class C{  public void testZeroOne(){  byte aBytes[]={0};  byte bBytes[]={1};  int aSign=0;  int bSign=1;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public Observable<DriveFile> updateFileContent(final DriveFile driveFile,File file){  return updateFileContent(driveFile,Uri.fromFile(file));}  }
class C{  private DataFlavor(String primaryType,String subType,MimeTypeParameterList params,Class<?> representationClass,String humanPresentableName){  super();  if (primaryType == null) {    throw new NullPointerException("primaryType");  }  if (subType == null) {    throw new NullPointerException("subType");  }  if (representationClass == null) {    throw new NullPointerException("representationClass");  }  if (params == null)   params=new MimeTypeParameterList();  params.set("class",representationClass.getName());  if (humanPresentableName == null) {    humanPresentableName=params.get("humanPresentableName");    if (humanPresentableName == null)     humanPresentableName=primaryType + "/" + subType;  }  try {    mimeType=new MimeType(primaryType,subType,params);  } catch (  MimeTypeParseException mtpe) {    throw new IllegalArgumentException("MimeType Parse Exception: " + mtpe.getMessage());  }  this.representationClass=representationClass;  this.humanPresentableName=humanPresentableName;  mimeType.removeParameter("humanPresentableName");}  }
class C{  public final void testGetPublicExponent(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPublicExponent()));}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AdditionalMetadataLocationElement createAdditionalMetadataLocationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AdditionalMetadataLocationElementImpl();}  }
class C{  public boolean contains(Object attrVal){  return (find(attrVal) >= 0);}  }
class C{  public synchronized int read() throws IOException {  if (pos >= count) {    fill();    if (pos >= count)     return -1;  }  return getBufIfOpen()[pos++] & 0xff;}  }
class C{  public void start(int scenario){  gen=new CSNGenerator(3,0L);  this.scenario=scenario;  start();}  }
class C{  protected void engineSetPadding(String padding) throws NoSuchPaddingException {  if (!padding.equalsIgnoreCase("NoPadding")) {    throw new NoSuchPaddingException("Padding " + padding + " unknown.");  }}  }
class C{  public Element defineElement(String name,int type,boolean omitStart,boolean omitEnd,ContentModel content,BitSet exclusions,BitSet inclusions,AttributeList atts){  Element e=getElement(name);  e.type=type;  e.oStart=omitStart;  e.oEnd=omitEnd;  e.content=content;  e.exclusions=exclusions;  e.inclusions=inclusions;  e.atts=atts;  return e;}  }
class C{  private void recycleChildren(RecyclerView.Recycler recycler,int startIndex,int endIndex){  if (startIndex > endIndex) {    return;  }  for (int i=endIndex; i >= startIndex; i--) {    removeAndRecycleViewAt(i,recycler);  }}  }
class C{  public static void premain(String args,Instrumentation inst) throws Exception {  setAndAddTransformer(inst);}  }
class C{  public IdentityServicesImpl newInstance(){  if (providerImpl == null) {    try {      providerImpl=(IdentityServicesImpl)provider.newInstance();    } catch (    Exception e) {      throw new RuntimeException(e);    }  }  return (providerImpl);}  }
class C{  public RuleEditViewBean(){  super("RuleEdit",DEFAULT_DISPLAY_URL);}  }
class C{  public FileAlterationMonitor(long interval){  this.interval=interval;}  }
class C{  public void copy(Map map){  if (map == null || map.isEmpty()) {    return;  }  Iterator itr=map.keySet().iterator();  if (!byteValues) {    while (itr.hasNext()) {      String name=(String)itr.next();      Set values=(Set)map.get(name);      this.put(name,getSetCopy(values));    }  } else {    while (itr.hasNext()) {      String name=(String)itr.next();      byte[][] values=(byte[][])map.get(name);      this.put(name,values);      this.removeNegativeByteAttr(name);    }    if (map instanceof AMHashMap) {      this.setNegativeByteAttr(((AMHashMap)map).getNegativeByteAttrClone());    }  }}  }
class C{  public void put(E e) throws InterruptedException {  if (e == null)   throw new NullPointerException();  int c=-1;  Node<E> node=new Node<E>(e);  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      notFull.await();    }    enqueue(node);    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();}  }
class C{  public final boolean contains(Object s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s)     return true;  }  return false;}  }
class C{  private void createLeftOver(){  int lineLengthBytes=currentLastBytePos + 1;  if (lineLengthBytes > 0) {    leftOver=new byte[lineLengthBytes];    System.arraycopy(data,0,leftOver,0,lineLengthBytes);  } else {    leftOver=null;  }  currentLastBytePos=-1;}  }
class C{  public Manifest(Manifest man){  attr.putAll(man.getMainAttributes());  entries.putAll(man.getEntries());}  }
class C{  private void mergeAt(int i){  assert stackSize >= 2;  assert i >= 0;  assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  assert len1 > 0 && len2 > 0;  assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight(a[base2],a,base1,len1,0,c);  assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft(a[base1 + len1 - 1],a,base2,len2,len2 - 1,c);  assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  boolean specified;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(0);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  specified=domesticAttr.getSpecified();  assertTrue("acronymTitleSpecified",specified);}  }
class C{  private static Document createPrefsDoc(String qname){  try {    DOMImplementation di=DocumentBuilderFactory.newInstance().newDocumentBuilder().getDOMImplementation();    DocumentType dt=di.createDocumentType(qname,null,PREFS_DTD_URI);    return di.createDocument(null,qname,dt);  } catch (  ParserConfigurationException e) {    throw new AssertionError(e);  }}  }
class C{  @Override public boolean iTableExists(Index index){  logger.info("Checking for existance of iTable for index: " + index.toString());  return iTableExists(Utils.calculateITableName(index));}  }
class C{  public MetalBumps(int width,int height,Color newTopColor,Color newShadowColor,Color newBackColor){  setBumpArea(width,height);  setBumpColors(newTopColor,newShadowColor,newBackColor);}  }
class C{  private void open(File fileName,boolean append) throws IOException {  meteredStream=new MeteredStream(fileName,append);  setOutputStream(meteredStream);  checkForHeaderWritten(fileName.toString());}  }
class C{  public void printTitleLine(){  startNewLineIfNeeded();  passFirstSeparatorColumn();  for (  final Column column : this.printableColumns) {    printCell(column.title,Alignment.RIGHT);  }}  }
class C{  public SubjectKeyIdentifier(byte[] keyIdentifier){  this.keyIdentifier=keyIdentifier;}  }
class C{  public StatusDetail createStatusDetail(Element elem) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_DETAIL,elem);  if (object == null) {    return new StatusDetailImpl(elem);  } else {    return (StatusDetail)object;  }}  }
class C{  public Set searchSubPeopleContainers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER),getSearchFilter(AMObject.PEOPLE_CONTAINER),wildcard,avPairs,level);}  }
class C{  public void postProcessCreate(SSOToken token,String entryDN,Map attributes,int objectType) throws AMPostCallBackException {}  }
class C{  @Override protected void finalize() throws Throwable {  try {    NativeCollation.closeElements(address);  }  finally {    super.finalize();  }}  }
class C{  public static boolean isStarted(){  return isRunning && !isShutdownCalled;}  }
class C{  private final void ensureCapacity(int len){  if (value.length < len) {    value=new int[len];    offset=0;    intLen=len;  }}  }
class C{  protected boolean isDirectoryExist(String directory){  String fullPath=debugDirectory + File.separator + directory;  File f=new File(fullPath);  return f.exists() && f.isDirectory();}  }
class C{  public void addEdge(String label,Vertex source,Vertex destination,List<DbDataContainer> attributes){  Object[] attributesArray=new Object[attributes.size() * 2];  for (int i=0; i < attributes.size(); i++) {    attributesArray[2 * i]=attributes.get(i).getField();    attributesArray[2 * i + 1]=attributes.get(i).getValue();  }  source.addEdge(label,destination,attributesArray);}  }
class C{  public void sendMessage(int type,String msg) throws LoginException {  messageCallback(type,msg);}  }
class C{  private void incrementInDegree(){  ++inDegree;}  }
class C{  public boolean isTimestampWithinInterval(DateTime timestamp,String intervalString) throws IllegalArgumentException {  Interval interval=Interval.parse(intervalString);  return interval.contains(timestamp);}  }
class C{  public void await(){  getServer().await();}  }
class C{  public ByteStringBuilder appendUtf8(final char[] chars){  if (chars == null) {    return this;  }  final int len=chars.length;  ensureAdditionalCapacity(len);  for (int i=0; i < len; i++) {    final char c=chars[i];    final byte b=(byte)(c & 0x0000007F);    if (c == b) {      buffer[this.length + i]=b;    } else {      final Charset utf8=Charset.forName("UTF-8");      final ByteBuffer byteBuffer=utf8.encode(CharBuffer.wrap(chars));      final int remaining=byteBuffer.remaining();      ensureAdditionalCapacity(remaining - len);      byteBuffer.get(buffer,this.length,remaining);      this.length+=remaining;      return this;    }  }  this.length+=len;  return this;}  }
class C{  public EasyMemoryMod(final Context context){  this.context=context;}  }
class C{  @Hidden static Object invoke__L(MethodHandle mh,Object[] a) throws Throwable {  assert (arityCheck(0,mh,a));  return mh.invokeBasic();}  }
class C{  private boolean isOutsideDocElem(){  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);}  }
class C{  public static int mainSearch(String[] args,boolean initializeServer,boolean returnMatchingEntries,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  LDAPConnectionOptions connectionOptions=new LDAPConnectionOptions();  LDAPSearchOptions searchOptions=new LDAPSearchOptions();  LDAPConnection connection=null;  final List<LDAPFilter> filters=new ArrayList<>();  final Set<String> attributes=new LinkedHashSet<>();  final BooleanArgument continueOnError;  final BooleanArgument countEntries;  final BooleanArgument dontWrap;  final BooleanArgument noop;  final BooleanArgument reportAuthzID;  final BooleanArgument saslExternal;  final BooleanArgument showUsage;  final BooleanArgument trustAll;  final BooleanArgument usePasswordPolicyControl;  final BooleanArgument useSSL;  final BooleanArgument startTLS;  final BooleanArgument typesOnly;  final BooleanArgument verbose;  final FileBasedArgument bindPasswordFile;  final FileBasedArgument keyStorePasswordFile;  final FileBasedArgument trustStorePasswordFile;  final IntegerArgument port;  final IntegerArgument simplePageSize;  final IntegerArgument sizeLimit;  final IntegerArgument timeLimit;  final IntegerArgument version;  final StringArgument assertionFilter;  final StringArgument baseDN;  final StringArgument bindDN;  final StringArgument bindPassword;  final StringArgument certNickname;  final StringArgument controlStr;  final StringArgument dereferencePolicy;  final StringArgument encodingStr;  final StringArgument filename;  final StringArgument hostName;  final StringArgument keyStorePath;  final StringArgument keyStorePassword;  final StringArgument matchedValuesFilter;  final StringArgument proxyAuthzID;  final StringArgument pSearchInfo;  final StringArgument saslOptions;  final MultiChoiceArgument searchScope;  final StringArgument sortOrder;  final StringArgument trustStorePath;  final StringArgument trustStorePassword;  final IntegerArgument connectTimeout;  final StringArgument vlvDescriptor;  final StringArgument effectiveRightsUser;  final StringArgument effectiveRightsAttrs;  final StringArgument propertiesFileArgument;  final BooleanArgument noPropertiesFileArgument;  final BooleanArgument subEntriesArgument;  LocalizableMessage toolDescription=INFO_LDAPSEARCH_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false,true,0,0,"[filter] [attributes ...]");  argParser.setShortToolDescription(REF_SHORT_DESC_LDAPSEARCH.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    propertiesFileArgument=StringArgument.builder(OPTION_LONG_PROP_FILE_PATH).description(INFO_DESCRIPTION_PROP_FILE_PATH.get()).valuePlaceholder(INFO_PROP_FILE_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    argParser.setFilePropertiesArgument(propertiesFileArgument);    noPropertiesFileArgument=BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildAndAddToParser(argParser);    argParser.setNoPropertiesFileArgument(noPropertiesFileArgument);    hostName=StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(INFO_DESCRIPTION_HOST.get()).defaultValue("localhost").valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildAndAddToParser(argParser);    port=IntegerArgument.builder(OPTION_LONG_PORT).shortIdentifier(OPTION_SHORT_PORT).description(INFO_DESCRIPTION_PORT.get()).range(1,65535).defaultValue(389).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    useSSL=BooleanArgument.builder(OPTION_LONG_USE_SSL).shortIdentifier(OPTION_SHORT_USE_SSL).description(INFO_DESCRIPTION_USE_SSL.get()).buildAndAddToParser(argParser);    startTLS=BooleanArgument.builder(OPTION_LONG_START_TLS).shortIdentifier(OPTION_SHORT_START_TLS).description(INFO_DESCRIPTION_START_TLS.get()).buildAndAddToParser(argParser);    bindDN=StringArgument.builder(OPTION_LONG_BINDDN).shortIdentifier(OPTION_SHORT_BINDDN).description(INFO_DESCRIPTION_BINDDN.get()).valuePlaceholder(INFO_BINDDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPassword=StringArgument.builder(OPTION_LONG_BINDPWD).shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_DESCRIPTION_BINDPASSWORD.get()).valuePlaceholder(INFO_BINDPWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPasswordFile=FileBasedArgument.builder(OPTION_LONG_BINDPWD_FILE).shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_DESCRIPTION_BINDPASSWORDFILE.get()).valuePlaceholder(INFO_BINDPWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    baseDN=StringArgument.builder(OPTION_LONG_BASEDN).shortIdentifier(OPTION_SHORT_BASEDN).description(INFO_SEARCH_DESCRIPTION_BASEDN.get()).required().valuePlaceholder(INFO_BASEDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    searchScope=MultiChoiceArgument.<String>builder("searchScope").shortIdentifier('s').description(INFO_SEARCH_DESCRIPTION_SEARCH_SCOPE.get()).allowedValues("base","one","sub","subordinate").defaultValue("sub").valuePlaceholder(INFO_SEARCH_SCOPE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    filename=StringArgument.builder(OPTION_LONG_FILENAME).shortIdentifier(OPTION_SHORT_FILENAME).description(INFO_SEARCH_DESCRIPTION_FILENAME.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    saslExternal=BooleanArgument.builder("useSASLExternal").shortIdentifier('r').description(INFO_DESCRIPTION_USE_SASL_EXTERNAL.get()).buildAndAddToParser(argParser);    saslOptions=StringArgument.builder(OPTION_LONG_SASLOPTION).shortIdentifier(OPTION_SHORT_SASLOPTION).description(INFO_DESCRIPTION_SASL_PROPERTIES.get()).multiValued().valuePlaceholder(INFO_SASL_OPTION_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustAll=trustAllArgument();    argParser.addArgument(trustAll);    keyStorePath=StringArgument.builder(OPTION_LONG_KEYSTOREPATH).shortIdentifier(OPTION_SHORT_KEYSTOREPATH).description(INFO_DESCRIPTION_KEYSTOREPATH.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    keyStorePassword=StringArgument.builder(OPTION_LONG_KEYSTORE_PWD).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD).description(INFO_DESCRIPTION_KEYSTOREPASSWORD.get()).valuePlaceholder(INFO_KEYSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    keyStorePasswordFile=FileBasedArgument.builder(OPTION_LONG_KEYSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD_FILE).description(INFO_DESCRIPTION_KEYSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_KEYSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    certNickname=StringArgument.builder(OPTION_LONG_CERT_NICKNAME).shortIdentifier(OPTION_SHORT_CERT_NICKNAME).description(INFO_DESCRIPTION_CERT_NICKNAME.get()).valuePlaceholder(INFO_NICKNAME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePath=StringArgument.builder(OPTION_LONG_TRUSTSTOREPATH).shortIdentifier(OPTION_SHORT_TRUSTSTOREPATH).description(INFO_DESCRIPTION_TRUSTSTOREPATH.get()).valuePlaceholder(INFO_TRUSTSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePassword=StringArgument.builder(OPTION_LONG_TRUSTSTORE_PWD).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePasswordFile=FileBasedArgument.builder(OPTION_LONG_TRUSTSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_TRUSTSTORE_PWD_FILE).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    proxyAuthzID=StringArgument.builder(OPTION_LONG_PROXYAUTHID).shortIdentifier(OPTION_SHORT_PROXYAUTHID).description(INFO_DESCRIPTION_PROXY_AUTHZID.get()).valuePlaceholder(INFO_PROXYAUTHID_PLACEHOLDER.get()).buildAndAddToParser(argParser);    reportAuthzID=BooleanArgument.builder(OPTION_LONG_REPORT_AUTHZ_ID).shortIdentifier('E').description(INFO_DESCRIPTION_REPORT_AUTHZID.get()).buildAndAddToParser(argParser);    usePasswordPolicyControl=BooleanArgument.builder(OPTION_LONG_USE_PW_POLICY_CTL).description(INFO_DESCRIPTION_USE_PWP_CONTROL.get()).buildAndAddToParser(argParser);    pSearchInfo=StringArgument.builder("persistentSearch").shortIdentifier('C').description(INFO_DESCRIPTION_PSEARCH_INFO.get()).docDescriptionSupplement(SUPPLEMENT_DESCRIPTION_PSEARCH_INFO.get()).valuePlaceholder(INFO_PSEARCH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    simplePageSize=IntegerArgument.builder("simplePageSize").description(INFO_DESCRIPTION_SIMPLE_PAGE_SIZE.get()).lowerBound(1).defaultValue(1000).valuePlaceholder(INFO_NUM_ENTRIES_PLACEHOLDER.get()).buildAndAddToParser(argParser);    assertionFilter=StringArgument.builder(OPTION_LONG_ASSERTION_FILE).description(INFO_DESCRIPTION_ASSERTION_FILTER.get()).valuePlaceholder(INFO_ASSERTION_FILTER_PLACEHOLDER.get()).buildAndAddToParser(argParser);    matchedValuesFilter=StringArgument.builder("matchedValuesFilter").description(INFO_DESCRIPTION_MATCHED_VALUES_FILTER.get()).multiValued().valuePlaceholder(INFO_FILTER_PLACEHOLDER.get()).buildAndAddToParser(argParser);    sortOrder=StringArgument.builder("sortOrder").shortIdentifier('S').description(INFO_DESCRIPTION_SORT_ORDER.get()).valuePlaceholder(INFO_SORT_ORDER_PLACEHOLDER.get()).buildAndAddToParser(argParser);    vlvDescriptor=StringArgument.builder("virtualListView").shortIdentifier('G').description(INFO_DESCRIPTION_VLV.get()).valuePlaceholder(INFO_VLV_PLACEHOLDER.get()).buildAndAddToParser(argParser);    controlStr=StringArgument.builder("control").shortIdentifier('J').description(INFO_DESCRIPTION_CONTROLS.get()).docDescriptionSupplement(SUPPLEMENT_DESCRIPTION_CONTROLS.get()).multiValued().valuePlaceholder(INFO_LDAP_CONTROL_PLACEHOLDER.get()).buildAndAddToParser(argParser);    subEntriesArgument=BooleanArgument.builder(OPTION_LONG_SUBENTRIES).shortIdentifier(OPTION_SHORT_SUBENTRIES).description(INFO_DESCRIPTION_SUBENTRIES.get()).buildAndAddToParser(argParser);    effectiveRightsUser=StringArgument.builder(OPTION_LONG_EFFECTIVERIGHTSUSER).shortIdentifier(OPTION_SHORT_EFFECTIVERIGHTSUSER).description(INFO_DESCRIPTION_EFFECTIVERIGHTS_USER.get()).valuePlaceholder(INFO_PROXYAUTHID_PLACEHOLDER.get()).buildAndAddToParser(argParser);    effectiveRightsAttrs=StringArgument.builder(OPTION_LONG_EFFECTIVERIGHTSATTR).shortIdentifier(OPTION_SHORT_EFFECTIVERIGHTSATTR).description(INFO_DESCRIPTION_EFFECTIVERIGHTS_ATTR.get()).multiValued().valuePlaceholder(INFO_ATTRIBUTE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    version=IntegerArgument.builder(OPTION_LONG_PROTOCOL_VERSION).shortIdentifier(OPTION_SHORT_PROTOCOL_VERSION).description(INFO_DESCRIPTION_VERSION.get()).defaultValue(3).valuePlaceholder(INFO_PROTOCOL_VERSION_PLACEHOLDER.get()).buildAndAddToParser(argParser);    connectTimeout=IntegerArgument.builder(OPTION_LONG_CONNECT_TIMEOUT).description(INFO_DESCRIPTION_CONNECTION_TIMEOUT.get()).lowerBound(0).defaultValue(CliConstants.DEFAULT_LDAP_CONNECT_TIMEOUT).valuePlaceholder(INFO_TIMEOUT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    encodingStr=StringArgument.builder("encoding").shortIdentifier('i').description(INFO_DESCRIPTION_ENCODING.get()).valuePlaceholder(INFO_ENCODING_PLACEHOLDER.get()).buildAndAddToParser(argParser);    dereferencePolicy=StringArgument.builder("dereferencePolicy").shortIdentifier('a').description(INFO_SEARCH_DESCRIPTION_DEREFERENCE_POLICY.get()).defaultValue("never").valuePlaceholder(INFO_DEREFERENCE_POLICE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    typesOnly=BooleanArgument.builder("typesOnly").shortIdentifier('A').description(INFO_DESCRIPTION_TYPES_ONLY.get()).buildAndAddToParser(argParser);    sizeLimit=IntegerArgument.builder("sizeLimit").shortIdentifier('z').description(INFO_SEARCH_DESCRIPTION_SIZE_LIMIT.get()).defaultValue(0).valuePlaceholder(INFO_SIZE_LIMIT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    timeLimit=IntegerArgument.builder("timeLimit").shortIdentifier('l').description(INFO_SEARCH_DESCRIPTION_TIME_LIMIT.get()).defaultValue(0).valuePlaceholder(INFO_TIME_LIMIT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    dontWrap=BooleanArgument.builder("dontWrap").shortIdentifier('T').description(INFO_DESCRIPTION_DONT_WRAP.get()).buildAndAddToParser(argParser);    countEntries=BooleanArgument.builder("countEntries").description(INFO_DESCRIPTION_COUNT_ENTRIES.get()).buildAndAddToParser(argParser);    continueOnError=BooleanArgument.builder("continueOnError").shortIdentifier('c').description(INFO_DESCRIPTION_CONTINUE_ON_ERROR.get()).buildAndAddToParser(argParser);    noop=BooleanArgument.builder(OPTION_LONG_DRYRUN).shortIdentifier(OPTION_SHORT_DRYRUN).description(INFO_DESCRIPTION_NOOP.get()).buildAndAddToParser(argParser);    verbose=verboseArgument();    argParser.addArgument(verbose);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage,out);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return 0;  }  final List<String> filterAndAttributeStrings=argParser.getTrailingArguments();  if (!filterAndAttributeStrings.isEmpty()) {    if (!filename.isPresent()) {      String filterString=filterAndAttributeStrings.remove(0);      try {        filters.add(LDAPFilter.decode(filterString));      } catch (      LDAPException le) {        logger.traceException(le);        printWrappedText(err,le.getMessage());        return CLIENT_SIDE_PARAM_ERROR;      }    }    attributes.addAll(filterAndAttributeStrings);  }  try {    throwIfArgumentsConflict(bindPassword,bindPasswordFile);    throwIfArgumentsConflict(useSSL,startTLS);    throwIfArgumentsConflict(keyStorePassword,keyStorePasswordFile);    throwIfArgumentsConflict(trustStorePassword,trustStorePasswordFile);  } catch (  final ArgumentException conflict) {    printWrappedText(err,conflict.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  String hostNameValue=hostName.getValue();  int portNumber=389;  try {    portNumber=port.getIntValue();  } catch (  ArgumentException ae) {    logger.traceException(ae);    argParser.displayMessageAndUsageReference(err,ae.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  try {    int versionNumber=version.getIntValue();    if (versionNumber != 2 && versionNumber != 3) {      printWrappedText(err,ERR_DESCRIPTION_INVALID_VERSION.get(versionNumber));      return CLIENT_SIDE_PARAM_ERROR;    }    connectionOptions.setVersionNumber(versionNumber);  } catch (  ArgumentException ae) {    logger.traceException(ae);    argParser.displayMessageAndUsageReference(err,ae.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  connectionOptions.setReportAuthzID(reportAuthzID.isPresent());  connectionOptions.setUsePasswordPolicyControl(usePasswordPolicyControl.isPresent());  String baseDNValue=baseDN.getValue();  String bindDNValue=bindDN.getValue();  String fileNameValue=filename.getValue();  String bindPasswordValue;  try {    bindPasswordValue=getPasswordValue(bindPassword,bindPasswordFile,bindDNValue,out,err);  } catch (  Exception ex) {    logger.traceException(ex);    printWrappedText(err,ex.getMessage());    return CLIENT_SIDE_PARAM_ERROR;  }  String keyStorePathValue=keyStorePath.getValue();  String trustStorePathValue=trustStorePath.getValue();  String keyStorePasswordValue=null;  if (keyStorePassword.isPresent()) {    keyStorePasswordValue=keyStorePassword.getValue();  } else   if (keyStorePasswordFile.isPresent()) {    keyStorePasswordValue=keyStorePasswordFile.getValue();  }  String trustStorePasswordValue=null;  if (trustStorePassword.isPresent()) {    trustStorePasswordValue=trustStorePassword.getValue();  } else   if (trustStorePasswordFile.isPresent()) {    trustStorePasswordValue=trustStorePasswordFile.getValue();  }  searchOptions.setTypesOnly(typesOnly.isPresent());  searchOptions.setShowOperations(noop.isPresent());  searchOptions.setVerbose(verbose.isPresent());  searchOptions.setContinueOnError(continueOnError.isPresent());  searchOptions.setEncoding(encodingStr.getValue());  searchOptions.setCountMatchingEntries(countEntries.isPresent());  try {    searchOptions.setTimeLimit(timeLimit.getIntValue());    searchOptions.setSizeLimit(sizeLimit.getIntValue());  } catch (  ArgumentException ex1) {    argParser.displayMessageAndUsageReference(err,ex1.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  if (!searchOptions.setSearchScope(searchScope.getValue(),err) || !searchOptions.setDereferencePolicy(dereferencePolicy.getValue(),err)) {    return CLIENT_SIDE_PARAM_ERROR;  }  if (controlStr.isPresent()) {    for (    String ctrlString : controlStr.getValues()) {      Control ctrl=LDAPToolUtils.getControl(ctrlString,err);      if (ctrl == null) {        printWrappedText(err,ERR_TOOL_INVALID_CONTROL_STRING.get(ctrlString));        return CLIENT_SIDE_PARAM_ERROR;      }      searchOptions.getControls().add(ctrl);    }  }  if (effectiveRightsUser.isPresent()) {    String authzID=effectiveRightsUser.getValue();    if (!authzID.startsWith("dn:")) {      printWrappedText(err,ERR_EFFECTIVERIGHTS_INVALID_AUTHZID.get(authzID));      return CLIENT_SIDE_PARAM_ERROR;    }    Control effectiveRightsControl=new GetEffectiveRightsRequestControl(false,authzID.substring(3),effectiveRightsAttrs.getValues());    searchOptions.getControls().add(effectiveRightsControl);  }  if (proxyAuthzID.isPresent()) {    Control proxyControl=new ProxiedAuthV2Control(true,ByteString.valueOfUtf8(proxyAuthzID.getValue()));    searchOptions.getControls().add(proxyControl);  }  if (pSearchInfo.isPresent()) {    String infoString=toLowerCase(pSearchInfo.getValue().trim());    HashSet<PersistentSearchChangeType> changeTypes=new HashSet<>();    boolean changesOnly=true;    boolean returnECs=true;    StringTokenizer tokenizer=new StringTokenizer(infoString,":");    if (!tokenizer.hasMoreTokens()) {      printWrappedText(err,ERR_PSEARCH_MISSING_DESCRIPTOR.get());      return CLIENT_SIDE_PARAM_ERROR;    } else {      String token=tokenizer.nextToken();      if (!token.equals("ps")) {        printWrappedText(err,ERR_PSEARCH_DOESNT_START_WITH_PS.get(infoString));        return CLIENT_SIDE_PARAM_ERROR;      }    }    if (tokenizer.hasMoreTokens()) {      StringTokenizer st=new StringTokenizer(tokenizer.nextToken(),", ");      while (st.hasMoreTokens()) {        String token=st.nextToken();        if (token.equals("add")) {          changeTypes.add(PersistentSearchChangeType.ADD);        } else         if (token.equals("delete") || token.equals("del")) {          changeTypes.add(PersistentSearchChangeType.DELETE);        } else         if (token.equals("modify") || token.equals("mod")) {          changeTypes.add(PersistentSearchChangeType.MODIFY);        } else         if (token.equals("modifydn") || token.equals("moddn") || token.equals("modrdn")) {          changeTypes.add(PersistentSearchChangeType.MODIFY_DN);        } else         if (token.equals("any") || token.equals("all")) {          changeTypes.add(PersistentSearchChangeType.ADD);          changeTypes.add(PersistentSearchChangeType.DELETE);          changeTypes.add(PersistentSearchChangeType.MODIFY);          changeTypes.add(PersistentSearchChangeType.MODIFY_DN);        } else {          printWrappedText(err,ERR_PSEARCH_INVALID_CHANGE_TYPE.get(token));          return CLIENT_SIDE_PARAM_ERROR;        }      }    }    if (changeTypes.isEmpty()) {      changeTypes.add(PersistentSearchChangeType.ADD);      changeTypes.add(PersistentSearchChangeType.DELETE);      changeTypes.add(PersistentSearchChangeType.MODIFY);      changeTypes.add(PersistentSearchChangeType.MODIFY_DN);    }    if (tokenizer.hasMoreTokens()) {      String token=tokenizer.nextToken();      if (token.equals("1") || token.equals("true") || token.equals("yes")) {        changesOnly=true;      } else       if (token.equals("0") || token.equals("false") || token.equals("no")) {        changesOnly=false;      } else {        printWrappedText(err,ERR_PSEARCH_INVALID_CHANGESONLY.get(token));        return CLIENT_SIDE_PARAM_ERROR;      }    }    if (tokenizer.hasMoreTokens()) {      String token=tokenizer.nextToken();      if (token.equals("1") || token.equals("true") || token.equals("yes")) {        returnECs=true;      } else       if (token.equals("0") || token.equals("false") || token.equals("no")) {        returnECs=false;      } else {        printWrappedText(err,ERR_PSEARCH_INVALID_RETURN_ECS.get(token));        return CLIENT_SIDE_PARAM_ERROR;      }    }    PersistentSearchControl psearchControl=new PersistentSearchControl(changeTypes,changesOnly,returnECs);    searchOptions.getControls().add(psearchControl);  }  if (assertionFilter.isPresent()) {    String filterString=assertionFilter.getValue();    LDAPFilter filter;    try {      filter=LDAPFilter.decode(filterString);      Control assertionControl=new LDAPAssertionRequestControl(true,filter);      searchOptions.getControls().add(assertionControl);    } catch (    LDAPException le) {      printWrappedText(err,ERR_LDAP_ASSERTION_INVALID_FILTER.get(le.getMessage()));      return CLIENT_SIDE_PARAM_ERROR;    }  }  if (matchedValuesFilter.isPresent()) {    List<String> mvFilterStrings=matchedValuesFilter.getValues();    List<MatchedValuesFilter> mvFilters=new ArrayList<>();    for (    String s : mvFilterStrings) {      try {        LDAPFilter f=LDAPFilter.decode(s);        mvFilters.add(MatchedValuesFilter.createFromLDAPFilter(f));      } catch (      LDAPException le) {        printWrappedText(err,ERR_LDAP_MATCHEDVALUES_INVALID_FILTER.get(le.getMessage()));        return CLIENT_SIDE_PARAM_ERROR;      }    }    MatchedValuesControl mvc=new MatchedValuesControl(true,mvFilters);    searchOptions.getControls().add(mvc);  }  if (sortOrder.isPresent()) {    try {      searchOptions.getControls().add(new ServerSideSortRequestControl(sortOrder.getValue()));    } catch (    LDAPException le) {      printWrappedText(err,ERR_LDAP_SORTCONTROL_INVALID_ORDER.get(le.getErrorMessage()));      return CLIENT_SIDE_PARAM_ERROR;    }  }  if (vlvDescriptor.isPresent()) {    if (!sortOrder.isPresent()) {      printWrappedText(err,ERR_LDAPSEARCH_VLV_REQUIRES_SORT.get(vlvDescriptor.getLongIdentifier(),sortOrder.getLongIdentifier()));      return CLIENT_SIDE_PARAM_ERROR;    }    StringTokenizer tokenizer=new StringTokenizer(vlvDescriptor.getValue(),":");    int numTokens=tokenizer.countTokens();    if (numTokens == 3) {      try {        int beforeCount=Integer.parseInt(tokenizer.nextToken());        int afterCount=Integer.parseInt(tokenizer.nextToken());        ByteString assertionValue=ByteString.valueOfUtf8(tokenizer.nextToken());        searchOptions.getControls().add(new VLVRequestControl(beforeCount,afterCount,assertionValue));      } catch (      Exception e) {        printWrappedText(err,ERR_LDAPSEARCH_VLV_INVALID_DESCRIPTOR.get());        return CLIENT_SIDE_PARAM_ERROR;      }    } else     if (numTokens == 4) {      try {        int beforeCount=Integer.parseInt(tokenizer.nextToken());        int afterCount=Integer.parseInt(tokenizer.nextToken());        int offset=Integer.parseInt(tokenizer.nextToken());        int contentCount=Integer.parseInt(tokenizer.nextToken());        searchOptions.getControls().add(new VLVRequestControl(beforeCount,afterCount,offset,contentCount));      } catch (      Exception e) {        printWrappedText(err,ERR_LDAPSEARCH_VLV_INVALID_DESCRIPTOR.get());        return CLIENT_SIDE_PARAM_ERROR;      }    } else {      printWrappedText(err,ERR_LDAPSEARCH_VLV_INVALID_DESCRIPTOR.get());      return CLIENT_SIDE_PARAM_ERROR;    }  }  if (subEntriesArgument.isPresent()) {    Control subentriesControl=new SubentriesControl(true,true);    searchOptions.getControls().add(subentriesControl);  }  connectionOptions.setSASLExternal(saslExternal.isPresent());  if (saslOptions.isPresent()) {    List<String> values=saslOptions.getValues();    for (    String saslOption : values) {      if (saslOption.startsWith("mech=")) {        if (!connectionOptions.setSASLMechanism(saslOption)) {          return CLIENT_SIDE_PARAM_ERROR;        }      } else {        if (!connectionOptions.addSASLProperty(saslOption)) {          return CLIENT_SIDE_PARAM_ERROR;        }      }    }  }  connectionOptions.setUseSSL(useSSL.isPresent());  connectionOptions.setStartTLS(startTLS.isPresent());  if (connectionOptions.useSASLExternal()) {    if (!connectionOptions.useSSL() && !connectionOptions.useStartTLS()) {      printWrappedText(err,ERR_TOOL_SASLEXTERNAL_NEEDS_SSL_OR_TLS.get());      return CLIENT_SIDE_PARAM_ERROR;    }    if (keyStorePathValue == null) {      printWrappedText(err,ERR_TOOL_SASLEXTERNAL_NEEDS_KEYSTORE.get());      return CLIENT_SIDE_PARAM_ERROR;    }  }  connectionOptions.setVerbose(verbose.isPresent());  if (fileNameValue != null) {    BufferedReader in=null;    try {      in=new BufferedReader(new FileReader(fileNameValue));      String line=null;      while ((line=in.readLine()) != null) {        if (line.trim().equals("")) {          continue;        }        LDAPFilter ldapFilter=LDAPFilter.decode(line);        filters.add(ldapFilter);      }    } catch (    Exception e) {      logger.traceException(e);      printWrappedText(err,e.getMessage());      return CLIENT_SIDE_PARAM_ERROR;    } finally {      close(in);    }  }  if (filters.isEmpty()) {    argParser.displayMessageAndUsageReference(err,ERR_SEARCH_NO_FILTERS.get());    return CLIENT_SIDE_PARAM_ERROR;  }  int wrapColumn=80;  if (dontWrap.isPresent()) {    wrapColumn=0;  }  LDAPSearch ldapSearch=null;  try {    if (initializeServer) {      DirectoryServer.bootstrapClient();    }    SSLConnectionFactory sslConnectionFactory=null;    if (connectionOptions.useSSL() || connectionOptions.useStartTLS()) {      String clientAlias;      if (certNickname.isPresent()) {        clientAlias=certNickname.getValue();      } else {        clientAlias=null;      }      sslConnectionFactory=new SSLConnectionFactory();      sslConnectionFactory.init(trustAll.isPresent(),keyStorePathValue,keyStorePasswordValue,clientAlias,trustStorePathValue,trustStorePasswordValue);      connectionOptions.setSSLConnectionFactory(sslConnectionFactory);    }    if (noop.isPresent()) {      return 0;    }    AtomicInteger nextMessageID=new AtomicInteger(1);    connection=new LDAPConnection(hostNameValue,portNumber,connectionOptions,out,err);    int timeout=pSearchInfo.isPresent() ? 0 : connectTimeout.getIntValue();    connection.connectToHost(bindDNValue,bindPasswordValue,nextMessageID,timeout);    int matchingEntries=0;    if (simplePageSize.isPresent()) {      if (filters.size() > 1) {        LocalizableMessage message=ERR_PAGED_RESULTS_REQUIRES_SINGLE_FILTER.get();        throw new LDAPException(CLIENT_SIDE_PARAM_ERROR,message);      }      int pageSize=simplePageSize.getIntValue();      ByteString cookieValue=null;      ArrayList<Control> origControls=searchOptions.getControls();      while (true) {        ArrayList<Control> newControls=new ArrayList<>(origControls.size() + 1);        newControls.addAll(origControls);        newControls.add(new PagedResultsControl(true,pageSize,cookieValue));        searchOptions.setControls(newControls);        ldapSearch=new LDAPSearch(nextMessageID,out,err);        matchingEntries+=ldapSearch.executeSearch(connection,baseDNValue,filters,attributes,searchOptions,wrapColumn);        List<Control> responseControls=ldapSearch.getResponseControls();        boolean responseFound=false;        for (        Control c : responseControls) {          if (c.getOID().equals(OID_PAGED_RESULTS_CONTROL)) {            try {              PagedResultsControl control=PagedResultsControl.DECODER.decode(c.isCritical(),((LDAPControl)c).getValue());              responseFound=true;              cookieValue=control.getCookie();              break;            } catch (            DirectoryException de) {              LocalizableMessage message=ERR_PAGED_RESULTS_CANNOT_DECODE.get(de.getMessage());              throw new LDAPException(CLIENT_SIDE_DECODING_ERROR,message,de);            }          }        }        if (!responseFound) {          LocalizableMessage message=ERR_PAGED_RESULTS_RESPONSE_NOT_FOUND.get();          throw new LDAPException(CLIENT_SIDE_CONTROL_NOT_FOUND,message);        } else         if (cookieValue.length() == 0) {          break;        }      }    } else {      ldapSearch=new LDAPSearch(nextMessageID,out,err);      matchingEntries=ldapSearch.executeSearch(connection,baseDNValue,filters,attributes,searchOptions,wrapColumn);    }    if (countEntries.isPresent() && returnMatchingEntries) {      return matchingEntries;    } else {      return 0;    }  } catch (  LDAPException le) {    int code=le.getResultCode();    if (code == REFERRAL) {      out.println();      printWrappedText(out,le.getErrorMessage());    } else {      logger.traceException(le);      LDAPToolUtils.printErrorMessage(err,le.getMessageObject(),code,le.getErrorMessage(),le.getMatchedDN());    }    return code;  }catch (  LDAPConnectionException lce) {    logger.traceException(lce);    LDAPToolUtils.printErrorMessage(err,lce.getMessageObject(),lce.getResultCode(),lce.getErrorMessage(),lce.getMatchedDN());    return lce.getResultCode();  }catch (  Exception e) {    logger.traceException(e);    printWrappedText(err,e.getMessage());    return 1;  } finally {    if (connection != null) {      if (ldapSearch == null) {        connection.close(null);      } else {        connection.close(ldapSearch.nextMessageID);      }    }  }}  }
class C{  public String toXMLString(){  StringBuilder xmlsb=new StringBuilder(100);  xmlsb.append('<').append(POLICY_LISTENER).append(' ').append(SERVICE_NAME).append('=').append('\"').append(serviceName).append("\" ").append(NOTIFICATION_URL).append("=\"").append(notificationURL).append("\"/>").append(CRLF);  return xmlsb.toString();}  }
class C{  public boolean isInheritedFromDNCollectiveAttributeSubentry(){  return hasObjectClass(OC_INHERITED_FROM_DN_COLLECTIVE_ATTR_SUBENTRY_LC);}  }
class C{  public static String replace(final String value,final String search,final String newValue,final boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  validate(search,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (caseSensitive) {    return value.replace(search,newValue);  }  return Pattern.compile(search,Pattern.CASE_INSENSITIVE).matcher(value).replaceAll(Matcher.quoteReplacement(newValue));}  }
class C{  public static PdfAction createLaunch(PdfFileSpec fileSpec,PdfWin win,boolean newWindow){  PdfAction action=new PdfAction().put(PdfName.S,PdfName.Launch).put(PdfName.NewWindow,new PdfBoolean(newWindow));  if (fileSpec != null) {    action.put(PdfName.F,fileSpec.getPdfObject());  }  if (win != null) {    action.put(PdfName.Win,win.getPdfObject());  }  return action;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void appendPath(String p_addToPath) throws MalformedURIException {  if (p_addToPath == null || p_addToPath.trim().length() == 0) {    return;  }  if (!isURIString(p_addToPath)) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_INVALID_CHAR,new Object[]{p_addToPath}));  }  if (m_path == null || m_path.trim().length() == 0) {    if (p_addToPath.startsWith("/")) {      m_path=p_addToPath;    } else {      m_path="/" + p_addToPath;    }  } else   if (m_path.endsWith("/")) {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath.substring(1));    } else {      m_path=m_path.concat(p_addToPath);    }  } else {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath);    } else {      m_path=m_path.concat("/" + p_addToPath);    }  }}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {  try {    AMViewBeanBase vb=(AMViewBeanBase)getViewBean(Class.forName((String)getPageSessionAttribute(PG_ATTR_CONFIG_PAGE)));    removePageSessionAttribute(PG_ATTR_CONFIG_PAGE);    removePageSessionAttribute(PG_ATTR_PROPERTY_NAMES);    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  ClassNotFoundException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public static boolean isNodeAfter(Node node1,Node node2){  if (node1 == node2 || isNodeTheSame(node1,node2))   return true;  boolean isNodeAfter=true;  Node parent1=getParentOfNode(node1);  Node parent2=getParentOfNode(node2);  if (parent1 == parent2 || isNodeTheSame(parent1,parent2)) {    if (null != parent1)     isNodeAfter=isNodeAfterSibling(parent1,node1,node2); else {    }  } else {    int nParents1=2, nParents2=2;    while (parent1 != null) {      nParents1++;      parent1=getParentOfNode(parent1);    }    while (parent2 != null) {      nParents2++;      parent2=getParentOfNode(parent2);    }    Node startNode1=node1, startNode2=node2;    if (nParents1 < nParents2) {      int adjust=nParents2 - nParents1;      for (int i=0; i < adjust; i++) {        startNode2=getParentOfNode(startNode2);      }    } else     if (nParents1 > nParents2) {      int adjust=nParents1 - nParents2;      for (int i=0; i < adjust; i++) {        startNode1=getParentOfNode(startNode1);      }    }    Node prevChild1=null, prevChild2=null;    while (null != startNode1) {      if (startNode1 == startNode2 || isNodeTheSame(startNode1,startNode2)) {        if (null == prevChild1) {          isNodeAfter=(nParents1 < nParents2) ? true : false;          break;        } else {          isNodeAfter=isNodeAfterSibling(startNode1,prevChild1,prevChild2);          break;        }      }      prevChild1=startNode1;      startNode1=getParentOfNode(startNode1);      prevChild2=startNode2;      startNode2=getParentOfNode(startNode2);    }  }  return isNodeAfter;}  }
class C{  public static String htmlDecode(final String encodedHtml){  validate(encodedHtml,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  String[] entities=encodedHtml.split("&\\W+;");  return Arrays.stream(entities).map(null).collect(joining());}  }
class C{  public void addFirst(HDR obj){  hlist.add(0,(HDR)obj);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.CanonicalizationMethodType createCanonicalizationMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.CanonicalizationMethodTypeImpl();}  }
class C{  public synchronized AttributeSet removeAttribute(AttributeSet old,Object name){  if ((old.getAttributeCount() - 1) <= getCompressionThreshold()) {    search.removeAttributes(search);    search.addAttributes(old);    search.removeAttribute(name);    reclaim(old);    return getImmutableUniqueSet();  }  MutableAttributeSet ma=getMutableAttributeSet(old);  ma.removeAttribute(name);  return ma;}  }
class C{  public static Foo fetchByPrimaryKey(long fooId){  return getPersistence().fetchByPrimaryKey(fooId);}  }
class C{  public void test_setILjava_lang_Object(){  Object obj;  alist.set(65,obj=new Object());  assertTrue("Failed to set object",alist.get(65) == obj);  alist.set(50,null);  assertNull("Setting to null did not work",alist.get(50));  assertTrue("Setting increased the list's size to: " + alist.size(),alist.size() == 100);  try {    alist.set(-1,null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    alist.set(alist.size() + 1,null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  public void addSubject(String subjectName,Subject subject) throws NameAlreadyExistsException, InvalidNameException, PolicyException, SSOException {  addSubject(subjectName,subject,false);}  }
class C{  public Duration minusHours(long hoursToSubtract){  return (hoursToSubtract == Long.MIN_VALUE ? plusHours(Long.MAX_VALUE).plusHours(1) : plusHours(-hoursToSubtract));}  }
class C{  private void updateCache(SSOToken token,String dn,Map stringAttributes,Map byteAttributes) throws SSOException {  String key=LDAPUtils.formatToRFC(dn);  CacheBlock cb=(CacheBlock)sdkCache.get(key);  if (cb != null && !cb.hasExpiredAndUpdated() && cb.isExists()) {    String pDN=CommonUtils.getPrincipalDN(token);    cb.replaceAttributes(pDN,stringAttributes,byteAttributes);  }}  }
class C{  public static List<Foo> findAll(){  return getPersistence().findAll();}  }
class C{  public PluginResult.PreParse invokePreParseAddPlugins(PreParseAddOperation addOperation) throws CanceledOperationException {  PluginResult.PreParse result=null;  for (  DirectoryServerPlugin p : preParseAddPlugins) {    if (isInternalOperation(addOperation,p)) {      continue;    }    try {      result=p.doPreParse(addOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreParseException(e,addOperation,p);    }    if (result == null) {      return handlePreParseResult(addOperation,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreParse.continueOperationProcessing();  }  return result;}  }
class C{  public void deleteTrustPartners(Set values) throws AMConsoleException {  String schemaName=SAML_TRUSTED_PARTNERS;  String[] params=new String[3];  params[0]=SAML_SERVICE_NAME;  params[1]="-";  params[2]=schemaName;  try {    AttributeSchema as=(AttributeSchema)attributeSchemas.get(schemaName);    Set orgValues=(Set)as.getDefaultValues();    orgValues.removeAll(values);    as.setDefaultValues(orgValues);    logEvent("SUCCEED_SET_ATTR_VALUE_ATR_SCHEMA_SCHEMA_TYPE",params);  } catch (  SSOException e) {    String strError=getErrorString(e);    String[] paramsEx={SAML_SERVICE_NAME,"-",schemaName,strError};    logEvent("SSO_EXCEPTION_SET_ATTR_VALUE_ATR_SCHEMA_SCHEMA_TYPE",paramsEx);    throw new AMConsoleException(strError);  }catch (  SMSException e) {    String strError=getErrorString(e);    String[] paramsEx={SAML_SERVICE_NAME,"-",schemaName,strError};    logEvent("SMS_EXCEPTION_SET_ATTR_VALUE_ATR_SCHEMA_SCHEMA_TYPE",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  private FunDef parse_fun() throws SyntaxException {  ClassDef classDef=parse_class();  if (classDef.superWithoutInvocation.isEmpty()) {    classDef.superWithoutInvocation.add(new AST.Access(new AST.PackageRef("lt::lang::function",LineCol.SYNTHETIC),"Function" + classDef.params.size(),LineCol.SYNTHETIC));  }  if ((classDef.superWithInvocation != null) || classDef.superWithoutInvocation.size() != 1) {    err.SyntaxException("function definitions should have one super type, which should be functional interface or functional abstract class",classDef.line_col());    if (classDef.superWithoutInvocation.isEmpty()) {      classDef.superWithoutInvocation.add(new AST.Access(new AST.PackageRef("lt::lang::function",LineCol.SYNTHETIC),"Function" + classDef.params.size(),LineCol.SYNTHETIC));    }  }  if (!classDef.modifiers.isEmpty()) {    err.SyntaxException("function definitions do not have modifiers",classDef.line_col());  }  return new FunDef(classDef.name,classDef.params,classDef.superWithoutInvocation.get(0),classDef.annos,classDef.statements,classDef.line_col());}  }
class C{  public JKXmlException(){  super();}  }
class C{  protected CellEditorListener createCellEditorListener(){  return getHandler();}  }
class C{  public DataBufferUShort(int size){  super(STABLE,TYPE_USHORT,size);  data=new short[size];  bankdata=new short[1][];  bankdata[0]=data;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.OneTimeUseType createOneTimeUseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.OneTimeUseTypeImpl();}  }
class C{  private List<Integer> computeEligibleServersSafeData(int fakeRs1Gid,long fakeRs1GenId,int fakeRs2Gid,long fakeRs2GenId,int fakeRs3Gid,long fakeRs3GenId){  List<Integer> eligibleServers=new ArrayList<>(3);  if (areGroupAndGenerationIdOk(fakeRs1Gid,fakeRs1GenId)) {    eligibleServers.add(FRS1_ID);  }  if (areGroupAndGenerationIdOk(fakeRs2Gid,fakeRs2GenId)) {    eligibleServers.add(FRS2_ID);  }  if (areGroupAndGenerationIdOk(fakeRs3Gid,fakeRs3GenId)) {    eligibleServers.add(FRS3_ID);  }  return eligibleServers;}  }
class C{  public final static int primaryOrder(int order){  order&=RBCollationTables.PRIMARYORDERMASK;  return (order >>> RBCollationTables.PRIMARYORDERSHIFT);}  }
class C{  private ConditionResult processLessOrEqual(SearchFilter completeFilter,Entry entry) throws DirectoryException {  if (getAttributeType() == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_LESS_OR_EQUAL_NO_ATTRIBUTE_TYPE.get(entry.getName(),toString());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  if (assertionValue == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_LESS_OR_EQUAL_NO_ASSERTION_VALUE.get(entry.getName(),toString(),getAttributeType().getNameOrOID());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  Iterable<Attribute> attrs=entry.getAllAttributes(attributeDescription);  if (isEmpty(attrs)) {    if (logger.isTraceEnabled()) {      logger.trace("Returning FALSE for less-or-equal component %s in " + "filter %s because entry %s didn't have attribute " + "type %s",this,completeFilter,entry.getName(),getAttributeType().getNameOrOID());    }    return ConditionResult.FALSE;  }  ConditionResult result=ConditionResult.FALSE;  for (  Attribute a : attrs) {switch (a.lessThanOrEqualTo(assertionValue)) {case TRUE:      if (logger.isTraceEnabled()) {        logger.trace("Returning TRUE for less-or-equal component %s " + "in filter %s for entry %s",this,completeFilter,entry.getName());      }    return ConditionResult.TRUE;case FALSE:  break;case UNDEFINED:if (logger.isTraceEnabled()) {  logger.trace("Undefined result encountered for " + "less-or-equal component %s in filter %s " + "for entry %s",this,completeFilter,entry.getName());}result=ConditionResult.UNDEFINED;break;default :}}if (logger.isTraceEnabled()) {logger.trace("Returning %s for less-or-equal component %s in " + "filter %s for entry %s",result,this,completeFilter,entry.getName());}return result;}  }
class C{  public static byte[] encodePassword(final String password){  return ("\"" + password + "\"").getBytes(Charset.forName("UTF-16LE"));}  }
class C{  private static void rdf_ResourcePropertyElement(XMPMetaImpl xmp,XMPNode xmpParent,Node xmlNode,boolean isTopLevel) throws XMPException {  if (isTopLevel && "iX:changes".equals(xmlNode.getNodeName())) {    return;  }  XMPNode newCompound=addChildNode(xmp,xmpParent,xmlNode,"",isTopLevel);  for (int i=0; i < xmlNode.getAttributes().getLength(); i++) {    Node attribute=xmlNode.getAttributes().item(i);    if ("xmlns".equals(attribute.getPrefix()) || (attribute.getPrefix() == null && "xmlns".equals(attribute.getNodeName()))) {      continue;    }    String attrLocal=attribute.getLocalName();    String attrNS=attribute.getNamespaceURI();    if (XML_LANG.equals(attribute.getNodeName())) {      addQualifierNode(newCompound,XML_LANG,attribute.getNodeValue());    } else     if ("ID".equals(attrLocal) && NS_RDF.equals(attrNS)) {      continue;    } else {      throw new XMPException("Invalid attribute for resource property element",BADRDF);    }  }  Node currChild=null;  boolean found=false;  int i;  for (i=0; i < xmlNode.getChildNodes().getLength(); i++) {    currChild=xmlNode.getChildNodes().item(i);    if (!isWhitespaceNode(currChild)) {      if (currChild.getNodeType() == Node.ELEMENT_NODE && !found) {        boolean isRDF=NS_RDF.equals(currChild.getNamespaceURI());        String childLocal=currChild.getLocalName();        if (isRDF && "Bag".equals(childLocal)) {          newCompound.getOptions().setArray(true);        } else         if (isRDF && "Seq".equals(childLocal)) {          newCompound.getOptions().setArray(true).setArrayOrdered(true);        } else         if (isRDF && "Alt".equals(childLocal)) {          newCompound.getOptions().setArray(true).setArrayOrdered(true).setArrayAlternate(true);        } else {          newCompound.getOptions().setStruct(true);          if (!isRDF && !"Description".equals(childLocal)) {            String typeName=currChild.getNamespaceURI();            if (typeName == null) {              throw new XMPException("All XML elements must be in a namespace",BADXMP);            }            typeName+=':' + childLocal;            addQualifierNode(newCompound,"rdf:type",typeName);          }        }        rdf_NodeElement(xmp,newCompound,currChild,false);        if (newCompound.getHasValueChild()) {          fixupQualifiedNode(newCompound);        } else         if (newCompound.getOptions().isArrayAlternate()) {          XMPNodeUtils.detectAltText(newCompound);        }        found=true;      } else       if (found) {        throw new XMPException("Invalid child of resource property element",BADRDF);      } else {        throw new XMPException("Children of resource property element must be XML elements",BADRDF);      }    }  }  if (!found) {    throw new XMPException("Missing child of resource property element",BADRDF);  }}  }
class C{  private boolean validateIpRangeSet(Set ipSet) throws PolicyException {  Iterator ipRanges=ipSet.iterator();  while (ipRanges.hasNext()) {    String ipRange=(String)ipRanges.next();    StringTokenizer st=new StringTokenizer(ipRange,"-");    int tokenCount=st.countTokens();    if (tokenCount > 2) {      String args[]={IP_RANGE,ipRange};      throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);    }    String startIp=st.nextToken();    String endIp=startIp;    if (tokenCount == 2) {      endIp=st.nextToken();    }    ipList.add(new Long(stringToIp(startIp)));    ipList.add(new Long(stringToIp(endIp)));  }  return true;}  }
class C{  public CodeGenerator(Set<STypeDef> types,Map<String,STypeDef> typeDefMap){  this.types=types;  this.typeDefMap=typeDefMap;}  }
class C{  public PluginResult.PreParse invokePreParseModifyDNPlugins(PreParseModifyDNOperation modifyDNOperation) throws CanceledOperationException {  PluginResult.PreParse result=null;  for (  DirectoryServerPlugin p : preParseModifyDNPlugins) {    if (isInternalOperation(modifyDNOperation,p)) {      continue;    }    try {      result=p.doPreParse(modifyDNOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreParseException(e,modifyDNOperation,p);    }    if (result == null) {      return handlePreParseResult(modifyDNOperation,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreParse.continueOperationProcessing();  }  return result;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(DatastoreOptions.DATASTORE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List listValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (listValues == null)) {    throw new CLIException(getResourceString("datastore-update-datastore-missing-data"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  validateRealm(realm);  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,listValues);  String[] params={realm,name};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_DATASTORE",params);  try {    ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,adminSSOToken);    ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realm,null);    if (cfg != null) {      ServiceConfig ss=cfg.getSubConfig(name);      if (ss != null) {        ss.setAttributes(attributeValues);        getOutputWriter().printlnMessage(getResourceString("datastore-update-datastore-succeeded"));      } else {        getOutputWriter().printlnMessage(getResourceString("datastore-update-datastore-not-found"));      }    } else {      getOutputWriter().printlnMessage(getResourceString("datastore-update-datastore-not-found"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_UPDATE_DATASTORE",params);  } catch (  SMSException e) {    String[] p={realm,name,e.getMessage()};    debugError("UpdateDataStore.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_DATASTORE",p);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] p={realm,name,e.getMessage()};    debugError("UpdateDataStore.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_DATASTORE",p);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String s1=m_arg0.execute(xctxt).str();  String s2=m_arg1.execute(xctxt).str();  if (s1.length() == 0 && s2.length() == 0)   return XBoolean.S_TRUE;  int index=s1.indexOf(s2);  return (index > -1) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public static void printBlock(Object... params){  line();  print(params);  line();}  }
class C{  public void addEntryReadListener(EntryReadListener listener){  listeners.add(listener);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptionPropertiesElement createEncryptionPropertiesElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionPropertiesElementImpl();}  }
class C{  public void updateSPAuthenticationContexts(String realm,String entityName,SAMLv2AuthContexts cxt) throws AMConsoleException {  List list=cxt.toSPAuthContextInfo();  String[] params={realm,entityName,"SAMLv2","SP-updateSPAuthenticationContexts"};  logEvent("ATTEMPT_MODIFY_ENTITY_DESCRIPTOR",params);  try {    SAML2MetaManager saml2MetaManager=getSAML2MetaManager();    EntityConfigElement entityConfig=saml2MetaManager.getEntityConfig(realm,entityName);    if (entityConfig == null) {      throw new AMConsoleException("invalid.entity.name");    }    SPSSOConfigElement spDecConfigElement=saml2MetaManager.getSPSSOConfig(realm,entityName);    if (spDecConfigElement == null) {      throw new AMConsoleException("invalid.config.element");    } else {      updateBaseConfig(spDecConfigElement,SP_AUTHN_CONTEXT_CLASS_REF_MAPPING,list);    }    saml2MetaManager.setEntityConfig(realm,entityConfig);    logEvent("SUCCEED_MODIFY_ENTITY_DESCRIPTOR",params);  } catch (  SAML2MetaException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,entityName,"SAMLv2","SP-updateSPAuthenticationContexts",strError};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(strError);  }  return;}  }
class C{  public static Object eval(ClassLoader loader,String e) throws Exception {  Evaluator evaluator=new Evaluator(new ClassPathLoader(loader));  return evaluator.eval(e).result;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("RetryAfterParser.parse");  RetryAfter retryAfter=new RetryAfter();  try {    headerName(TokenTypes.RETRY_AFTER);    String value=lexer.number();    try {      int ds=Integer.parseInt(value);      retryAfter.setRetryAfter(ds);    } catch (    NumberFormatException ex) {      throw createParseException(ex.getMessage());    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    if (lexer.lookAhead(0) == '(') {      String comment=this.lexer.comment();      retryAfter.setComment(comment);    }    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ';') {      this.lexer.match(';');      this.lexer.SPorHT();      lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      value=token.getTokenValue();      if (value.equalsIgnoreCase("duration")) {        this.lexer.match('=');        this.lexer.SPorHT();        value=lexer.number();        try {          int duration=Integer.parseInt(value);          retryAfter.setDuration(duration);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }      } else {        this.lexer.SPorHT();        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        Token secondToken=lexer.getNextToken();        String secondValue=secondToken.getTokenValue();        retryAfter.setParameter(value,secondValue);      }      this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("RetryAfterParser.parse");  }  return retryAfter;}  }
class C{  @Override public void execute(final OutputStream out) throws ConnectorException {  if (configuration.isDebugMode() && this.exception != null) {    throw new ConnectorException(this.errorCode,this.exception);  }  try {    String errorMsg=(this.errorCode == 0) ? "" : ErrorUtils.getInstance().getErrorMsgByLangAndCode(this.langCode,this.errorCode,this.configuration);    errorMsg=errorMsg.replaceAll("%1",this.newFileName);    String path="";    if (!uploaded) {      this.newFileName="";      this.currentFolder="";    } else {      path=configuration.getTypes().get(type).getUrl() + this.currentFolder;    }    if (this.responseType != null && this.responseType.equals("txt")) {      out.write((this.newFileName + "|" + errorMsg).getBytes("UTF-8"));    } else {      out.write("<script type=\"text/javascript\">".getBytes("UTF-8"));      if (checkFuncNum()) {        handleOnUploadCompleteCallFuncResponse(out,errorMsg,path);      } else {        handleOnUploadCompleteResponse(out,errorMsg);      }      out.write("</script>".getBytes("UTF-8"));    }  } catch (  IOException e) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,e);  }}  }
class C{  private void forceTrustManagerInitialization(){  forceNonInteractive=true;  try {    ci.initializeTrustManagerIfRequired();  } catch (  ArgumentException ae) {    logger.warn(LocalizableMessage.raw("Error initializing trust store: " + ae,ae));  }  forceNonInteractive=false;}  }
class C{  public void testGetOwnerDocument1() throws Throwable {  Document doc;  Document ownerDoc;  DOMImplementation domImpl;  DocumentType docType;  String nullID=null;  doc=(Document)load("staff",builder);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("mydoc",nullID,nullID);  ownerDoc=docType.getOwnerDocument();  assertNull("nodegetownerdocument01",ownerDoc);}  }
class C{  public void testBitLengthNegative2(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(96,aNumber.bitLength());}  }
class C{  private void genPreambleImports(){  Iterator<String> iter=pageInfo.getImports().iterator();  while (iter.hasNext()) {    out.printin("import ");    out.print(iter.next());    out.println(";");  }  out.println();}  }
class C{  public JFileChooser(String currentDirectoryPath){  this(currentDirectoryPath,(FileSystemView)null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributenomodificationallowederrEE.class,args);}  }
class C{  public static java.awt.Graphics2D GETGRAPHICS(Object c,long iid) throws IOException {  ThreadTracer tracer=getActiveThreadTracer();  if (tracer != null)   tracer.stop();  java.awt.Graphics2D g=(java.awt.Graphics2D)(c instanceof java.awt.Component ? ((java.awt.Component)c).getGraphics() : c instanceof java.awt.image.VolatileImage ? ((java.awt.image.VolatileImage)c).createGraphics() : c instanceof java.awt.image.BufferedImage ? ((java.awt.image.BufferedImage)c).createGraphics() : c instanceof java.awt.Image ? ((java.awt.Image)c).getGraphics() : null);  if (tracer != null)   tracer.start();  if (tracer == null)   return g;  tracer.stop();  int translateX=0, translateY=0;  int width=0, height=0;  java.awt.Window window=null;  int windowX=0, windowY=0;  long windowID=0;  if (c instanceof java.awt.Component) {    java.awt.Component comp=(java.awt.Component)c;    if (c instanceof java.awt.Window) {      window=(java.awt.Window)c;    } else {      window=javax.swing.SwingUtilities.getWindowAncestor(comp);      if (window != null) {        java.awt.Point p=javax.swing.SwingUtilities.convertPoint(((java.awt.Component)c).getParent(),comp.getX(),comp.getY(),window.getComponent(0));        translateX=(int)p.getX();        translateY=(int)p.getY();      } else {        translateX=comp.getX();        translateY=comp.getY();      }    }  }  tracer.header(iid);  DataOutputStream trace=tracer.trace;  long id=0;  boolean representsWindow=false;  if (c instanceof java.awt.Component) {    if (window == null) {      id=getUniqueObjectID(c);      width=0;      height=0;    } else {      representsWindow=true;      id=getUniqueObjectID(window);      width=window.getComponent(0).getWidth();      height=window.getComponent(0).getHeight();    }  } else   if (c instanceof java.awt.Image) {    id=getUniqueObjectID(c);    width=((java.awt.Image)c).getWidth(null);    height=((java.awt.Image)c).getHeight(null);  } else   if (c instanceof java.awt.peer.ComponentPeer) {    id=getUniqueObjectID(c);    width=((java.awt.peer.ComponentPeer)c).getBounds().width;    height=((java.awt.peer.ComponentPeer)c).getBounds().height;  } else {    debug.write("Not handling " + c + "\n");    debug.write("Class is " + c.getClass() + "\n");    debug.write("Instanceof java.awt.Component? " + (c instanceof java.awt.Component) + "\n");    id=getUniqueObjectID(c);  }  if (window != null) {    windowX=window.getX();    windowY=window.getY();    windowID=getUniqueObjectID(window);  }  trace.writeBoolean(representsWindow);  trace.writeLong(id);  trace.writeLong(getUniqueObjectID(g));  trace.writeShort(width);  trace.writeShort(height);  trace.writeShort(translateX);  trace.writeShort(translateY);  trace.writeLong(windowID);  trace.writeShort(windowX);  trace.writeShort(windowY);  tracer.start();  return g;}  }
class C{  static <T>ReplayPromise<T> replayPromise(final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public HTMLFrameHyperlinkEvent(Object source,EventType type,URL targetURL,String targetFrame){  super(source,type,targetURL);  this.targetFrame=targetFrame;}  }
class C{  protected void load(){  File file=new File(pathname);  if (!file.isAbsolute()) {    String catalinaBase=getCatalinaBase();    if (catalinaBase == null) {      log.warn("Unable to determine Catalina base to load file " + pathname);      return;    } else {      file=new File(catalinaBase,pathname);    }  }  if (!file.canRead()) {    log.warn("Cannot load configuration file " + file.getAbsolutePath());    return;  }  Digester digester=new Digester();  digester.setValidating(false);  digester.addRuleSet(new MemoryRuleSet());  try {    digester.push(this);    digester.parse(file);  } catch (  Exception e) {    log.warn("Error processing configuration file " + file.getAbsolutePath(),e);    return;  } finally {    digester.reset();  }}  }
class C{  public CoyoteAdapter(Connector connector){  super();  this.connector=connector;}  }
class C{  public void init(String componentName) throws LogException {  accessLogger=Logger.getLogger(componentName + ".access");  errorLogger=Logger.getLogger(componentName + ".error");}  }
class C{  public java.lang.String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  @DataProvider(name="entryChangeNotificationControl") public Object[][] createEntryChangeNotificationControlData(){  return new Object[][]{{true,1,"cn=test"},{false,2,"dc=example,dc=com"},{true,3,"cn=test, dc=example,dc=com"},{false,4,"cn= new test, dc=example,dc=com"}};}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Wss11Element createWss11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Wss11ElementImpl();}  }
class C{  @Override protected void toASCII(StringBuilder ascii,int level){  indent(ascii,level);  NSObject[] array=allObjects();  ascii.append(ASCIIPropertyListParser.ARRAY_BEGIN_TOKEN);  int indexOfLastNewLine=ascii.lastIndexOf(NEWLINE);  for (int i=0; i < array.length; i++) {    Class<?> objClass=array[i].getClass();    if ((objClass.equals(NSDictionary.class) || objClass.equals(NSArray.class) || objClass.equals(NSData.class)) && indexOfLastNewLine != ascii.length()) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();      array[i].toASCII(ascii,level + 1);    } else {      if (i != 0)       ascii.append(" ");      array[i].toASCII(ascii,0);    }    if (i != array.length - 1)     ascii.append(ASCIIPropertyListParser.ARRAY_ITEM_DELIMITER_TOKEN);    if (ascii.length() - indexOfLastNewLine > ASCII_LINE_LENGTH) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();    }  }  ascii.append(ASCIIPropertyListParser.ARRAY_END_TOKEN);}  }
class C{  private int[] readLengthAndOffset(int objInfo,int offset){  int lengthValue=objInfo;  int offsetValue=1;  if (objInfo == 0xF) {    int int_type=bytes[offset + 1];    int intType=(int_type & 0xF0) >> 4;    if (intType != 0x1) {      System.err.println("BinaryPropertyListParser: Length integer has an unexpected type" + intType + ". Attempting to parse anyway...");    }    int intInfo=int_type & 0x0F;    int intLength=(int)Math.pow(2,intInfo);    offsetValue=2 + intLength;    if (intLength < 3) {      lengthValue=(int)parseUnsignedInt(bytes,offset + 2,offset + 2 + intLength);    } else {      lengthValue=new BigInteger(copyOfRange(bytes,offset + 2,offset + 2 + intLength)).intValue();    }  }  return new int[]{lengthValue,offsetValue};}  }
class C{  public void testGetEntry3() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  assertNull(cache.getEntry(b,-1),"Not expected to find entry id " + -1 + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.putEntry(testEntriesList.get(0),b,1);  assertNotNull(cache.getEntry(b,1),"Expected to find entry id " + 1 + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  private final boolean isInScope(SevenBitCleanPluginCfg config,DN dn){  Set<DN> baseDNs=config.getBaseDN();  if (baseDNs == null || baseDNs.isEmpty()) {    baseDNs=DirectoryServer.getPublicNamingContexts().keySet();  }  return isDescendantOfAny(dn,baseDNs);}  }
class C{  public int countNode(XPathContext support,ElemNumber numberElem,int node) throws TransformerException {  int count=0;  Vector counters=getCounters(numberElem);  int nCounters=counters.size();  int target=numberElem.getTargetNode(support,node);  if (DTM.NULL != target) {    for (int i=0; i < nCounters; i++) {      Counter counter=(Counter)counters.elementAt(i);      count=counter.getPreviouslyCounted(support,target);      if (count > 0)       return count;    }    count=0;    if (m_newFound == null)     m_newFound=new NodeSetDTM(support.getDTMManager());    for (; DTM.NULL != target; target=numberElem.getPreviousNode(support,target)) {      if (0 != count) {        for (int i=0; i < nCounters; i++) {          Counter counter=(Counter)counters.elementAt(i);          int cacheLen=counter.m_countNodes.size();          if ((cacheLen > 0) && (counter.m_countNodes.elementAt(cacheLen - 1) == target)) {            count+=(cacheLen + counter.m_countNodesStartCount);            if (cacheLen > 0)             appendBtoFList(counter.m_countNodes,m_newFound);            m_newFound.removeAllElements();            return count;          }        }      }      m_newFound.addElement(target);      count++;    }    Counter counter=new Counter(numberElem,new NodeSetDTM(support.getDTMManager()));    m_countersMade++;    appendBtoFList(counter.m_countNodes,m_newFound);    m_newFound.removeAllElements();    counters.addElement(counter);  }  return count;}  }
class C{  private void modifyVLVIndexOnline(ConnectionWrapper connWrapper) throws Exception {  final RootCfgClient root=connWrapper.getRootConfiguration();  modifyBackendVLVIndexOnline((PluggableBackendCfgClient)root.getBackend(backendID));}  }
class C{  private String retrieveFullID(String resourceID,String objectID){  return resourceID + '/' + objectID;}  }
class C{  void replace(DocumentFilter.FilterBypass fb,int offset,int length,String string,AttributeSet attr) throws BadLocationException {  if (!getAllowsInvalid() && length == 0 && string != null && string.length() == 1 && toggleSignIfNecessary(fb,offset,string.charAt(0))) {    return;  }  super.replace(fb,offset,length,string,attr);}  }
class C{  public static void fill(Object[] a,Object val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public SecurityTokenException(){  super();}  }
class C{  protected boolean refillReadBuffer(boolean block) throws IOException {  if (replay) {    endOfStream=true;  }  if (endOfStream) {    return false;  }  if (first) {    first=false;    long contentLength=request.getContentLengthLong();    if (contentLength > 0) {      waitingForBodyMessage=true;    } else     if (contentLength == 0) {      endOfStream=true;      return false;    }  }  if (!waitingForBodyMessage) {    socketWrapper.write(true,getBodyMessageArray,0,getBodyMessageArray.length);    socketWrapper.flush(true);    waitingForBodyMessage=true;  }  boolean moreData=receive(block);  if (!moreData && !waitingForBodyMessage) {    endOfStream=true;  }  return moreData;}  }
class C{  boolean checkIfChildObscuredBySibling(){  return true;}  }
class C{  public void parse(InputSource input) throws org.xml.sax.SAXException, IOException {  if (null == getParent()) {    XMLReader reader=null;    try {      javax.xml.parsers.SAXParserFactory factory=javax.xml.parsers.SAXParserFactory.newInstance();      factory.setNamespaceAware(true);      if (m_transformer.getStylesheet().isSecureProcessing()) {        try {          factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);        } catch (        org.xml.sax.SAXException se) {        }      }      javax.xml.parsers.SAXParser jaxpParser=factory.newSAXParser();      reader=jaxpParser.getXMLReader();    } catch (    javax.xml.parsers.ParserConfigurationException ex) {      throw new org.xml.sax.SAXException(ex);    }catch (    javax.xml.parsers.FactoryConfigurationError ex1) {      throw new org.xml.sax.SAXException(ex1.toString());    }catch (    NoSuchMethodError ex2) {    }catch (    AbstractMethodError ame) {    }    XMLReader parent;    if (reader == null)     parent=XMLReaderFactory.createXMLReader(); else     parent=reader;    try {      parent.setFeature("http://xml.org/sax/features/namespace-prefixes",true);    } catch (    org.xml.sax.SAXException se) {    }    setParent(parent);  } else {    setupParse();  }  if (null == m_transformer.getContentHandler()) {    throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_CALL_PARSE,null));  }  getParent().parse(input);  Exception e=m_transformer.getExceptionThrown();  if (null != e) {    if (e instanceof org.xml.sax.SAXException)     throw (org.xml.sax.SAXException)e; else     throw new org.xml.sax.SAXException(e);  }}  }
class C{  private ConnectionWithControls createLDAPConnection(LDAPURL ldapUrl,AuthRecord ar) throws LdapException {  final HostPort hostPort=new HostPort(ldapUrl.getHost(),ldapUrl.getPort());  final Type connectiontype=isSecureLDAPUrl(ldapUrl) ? LDAPS : LDAP;  final ConnectionWrapper conn=new ConnectionWrapper(hostPort,connectiontype,ar.dn,ar.password,getConnectTimeout(),getTrustManager(),getKeyManager());  return new ConnectionWithControls(conn,sortControl,followReferralsControl);}  }
class C{  @Post public Representation createResourceSet(JsonRepresentation entity) throws NotFoundException, ServerException, BadRequestException {  ResourceSetDescription resourceSetDescription=new ResourceSetDescription(null,getClientId(),getResourceOwnerId(),validator.validate(toMap(entity)));  OAuth2Request oAuth2Request=requestFactory.create(getRequest());  ResourceSetStore store=providerSettingsFactory.get(oAuth2Request).getResourceSetStore();  QueryFilter<String> query=QueryFilter.and(QueryFilter.equalTo(ResourceSetTokenField.NAME,resourceSetDescription.getName()),QueryFilter.equalTo(ResourceSetTokenField.CLIENT_ID,getClientId()),QueryFilter.equalTo(ResourceSetTokenField.RESOURCE_OWNER_ID,getResourceOwnerId()));  if (!store.query(query).isEmpty()) {    getResponse().setStatus(Status.CLIENT_ERROR_BAD_REQUEST);    Map<String,Object> response=new HashMap<String,Object>();    response.put(OAuth2Constants.Params.ERROR,Status.CLIENT_ERROR_BAD_REQUEST.getReasonPhrase());    response.put(OAuth2Constants.Params.ERROR_DESCRIPTION,"A shared item with the name '" + resourceSetDescription.getName() + "' already exists");    return new JsonRepresentation(response);  }  JsonValue labels=resourceSetDescription.getDescription().get(OAuth2Constants.ResourceSets.LABELS);  resourceSetDescription.getDescription().remove(OAuth2Constants.ResourceSets.LABELS);  for (  ResourceRegistrationFilter filter : extensionFilterManager.getFilters(ResourceRegistrationFilter.class)) {    filter.beforeResourceRegistration(resourceSetDescription);  }  store.create(oAuth2Request,resourceSetDescription);  if (labels.isNotNull()) {    resourceSetDescription.getDescription().add(OAuth2Constants.ResourceSets.LABELS,labels.getObject());  } else {    resourceSetDescription.getDescription().add(OAuth2Constants.ResourceSets.LABELS,emptyList());  }  labelRegistration.updateLabelsForNewResourceSet(resourceSetDescription);  for (  ResourceRegistrationFilter filter : extensionFilterManager.getFilters(ResourceRegistrationFilter.class)) {    filter.afterResourceRegistration(resourceSetDescription);  }  for (  ResourceSetRegistrationHook hook : hooks) {    hook.resourceSetCreated(oAuth2Request.<String>getParameter("realm"),resourceSetDescription);  }  getResponse().setStatus(Status.SUCCESS_CREATED);  return createJsonResponse(resourceSetDescription,false,true);}  }
class C{  public SMethodDef parseInnerMethod(MethodDef methodDef,SemanticScope scope,boolean lambdaParam) throws SyntaxException {  if (scope.parent == null)   throw new LtBug("scope.parent should not be null");  SemanticScope theTopScope=scope.parent;  while (theTopScope.parent != null)   theTopScope=theTopScope.parent;  if (scope.containsInnerMethod(methodDef.name)) {    err.SyntaxException("duplicate inner method name",methodDef.line_col());    return null;  }  if (!methodDef.modifiers.isEmpty() && (methodDef.modifiers.size() != 1 || !methodDef.modifiers.iterator().next().modifier.equals(Modifier.Available.DEF))) {    err.SyntaxException("inner method cannot have modifiers",methodDef.line_col());    return null;  }  if (!methodDef.annos.isEmpty()) {    err.SyntaxException("inner method cannot have annotations",methodDef.line_col());    return null;  }  for (  VariableDef v : methodDef.params) {    if (null != scope.getLeftValue(v.getName())) {      err.SyntaxException(v.getName() + " is already used",v.line_col());      return null;    }    if (v.getInit() != null) {      err.SyntaxException("parameters of inner methods cannot have default value",v.line_col());      return null;    }  }  List<SMethodDef> methods;  if (scope.type() instanceof SClassDef) {    methods=((SClassDef)scope.type()).methods();  } else {    methods=((SInterfaceDef)scope.type()).methods();  }  String generatedMethodName=methodDef.name + "$Latte$InnerMethod$";  int i=0;  out:   while (true) {    String tmpName=generatedMethodName + i;    for (    SMethodDef m : methods) {      if (m.name().equals(tmpName)) {        ++i;        continue out;      }    }    break;  }  generatedMethodName+=i;  String name=methodDef.name;  int paramCount=methodDef.params.size();  LinkedHashMap<String,STypeDef> localVariables=scope.getLocalVariables();  List<VariableDef> param4Locals=new ArrayList<>();  List<PointerType> realPointerTypes=new ArrayList<>();  localVariables.forEach(null);  MethodDef newMethodDef=new MethodDef(generatedMethodName,Collections.emptySet(),methodDef.returnType,new ArrayList<>(methodDef.params),Collections.emptySet(),methodDef.body,methodDef.line_col());  newMethodDef.params.addAll(0,param4Locals);  if (lambdaParam) {    newMethodDef.params.add(new VariableDef("$",Collections.emptySet(),Collections.emptySet(),LineCol.SYNTHETIC));  }  parseMethod(newMethodDef,newMethodDef.params.size(),scope.type(),null,fileNameToImport.get(newMethodDef.line_col().fileName),(scope.type() instanceof SClassDef) ? PARSING_CLASS : PARSING_INTERFACE,scope.getThis() == null);  SMethodDef m=methods.get(methods.size() - 1);  m.modifiers().remove(SModifier.PUBLIC);  m.modifiers().remove(SModifier.PROTECTED);  m.modifiers().add(0,SModifier.PRIVATE);  int cursor=0;  for (  SParameter p : m.getParameters()) {    if (isPointerType(p.type())) {      p.setType(realPointerTypes.get(cursor++));    }  }  assert cursor == realPointerTypes.size();  SemanticScope.MethodRecorder rec=new SemanticScope.MethodRecorder(m,paramCount);  scope.addMethodDef(name,rec);  SemanticScope innerMethodScope=new SemanticScope(theTopScope);  innerMethodScope.addMethodDef(name,rec);  parseMethod(m,newMethodDef.body,innerMethodScope);  return m;}  }
class C{  @SuppressWarnings("unchecked") private void mergeAt(int i){  assert stackSize >= 2;  assert i >= 0;  assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  assert len1 > 0 && len2 > 0;  assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight((Comparable<Object>)a[base2],a,base1,len1,0);  assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft((Comparable<Object>)a[base1 + len1 - 1],a,base2,len2,len2 - 1);  assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public FrameBodyWOAR(String urlLink){  super(urlLink);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request,null,null);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    TlsTest.fail("Unexpected exception");  }}  }
class C{  protected PrintQuality(int value){  super(value);}  }
class C{  public boolean requiresTunnel(){  return address.sslSocketFactory != null && proxy.type() == Proxy.Type.HTTP;}  }
class C{  public void warning(String msg){  print("[WARNING] " + msg,out.warn);}  }
class C{  public SAML2Exception(String message){  super(message);}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;}  }
class C{  public void testZeroZero(){  byte aBytes[]={0};  byte bBytes[]={0};  int aSign=0;  int bSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public int next(){  final int node=_currentNode;  _currentNode=NULL;  return returnNode(node);}  }
class C{  private void updateBaseConfig(BaseConfigType baseConfig,Map values,String role) throws JAXBException, AMConsoleException {  List attrList=baseConfig.getAttribute();  if (role.equals(EntityModel.IDENTITY_PROVIDER)) {    attrList.clear();    baseConfig=addAttributeType(extendedMetaIdpMap,baseConfig);    attrList=baseConfig.getAttribute();  } else   if (role.equals(EntityModel.SERVICE_PROVIDER)) {    attrList.clear();    baseConfig=addAttributeType(extendedMetaSpMap,baseConfig);    attrList=baseConfig.getAttribute();  } else   if (role.equals(EntityModel.POLICY_ENFORCEMENT_POINT_DESCRIPTOR)) {    attrList.clear();    baseConfig=addAttributeType(xacmlPEPExtendedMeta,baseConfig);    attrList=baseConfig.getAttribute();  } else   if (role.equals(EntityModel.POLICY_DECISION_POINT_DESCRIPTOR)) {    attrList.clear();    baseConfig=addAttributeType(xacmlPDPExtendedMeta,baseConfig);    attrList=baseConfig.getAttribute();  }  for (Iterator it=attrList.iterator(); it.hasNext(); ) {    AttributeElement avpnew=(AttributeElement)it.next();    String name=avpnew.getName();    if (values.keySet().contains(name)) {      Set set=(Set)values.get(name);      if (set != null) {        avpnew.getValue().clear();        avpnew.getValue().addAll(set);      }    }  }}  }
class C{  private void updateConfigEntryWithAttribute(String entryDn,String attributeName,Syntax syntax,Object... values) throws DirectoryException, ConfigException {  org.forgerock.opendj.ldap.Entry configEntry=configHandler.getEntry(DN.valueOf(entryDn));  final org.forgerock.opendj.ldap.Entry newEntry=putAttribute(configEntry,attributeName,syntax,values);  configHandler.replaceEntry(configEntry,newEntry);}  }
class C{  final void postAccept(){  connected=true;  created=true;  bound=true;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  forwardToFederationView();}  }
class C{  public TriggerWrapper(final Trigger trigger,final boolean paused,final boolean acquired) throws JobPersistenceException {  this(trigger.getName(),trigger.getGroup(),RepoJobStoreUtils.serialize(trigger),paused,acquired,null);}  }
class C{  public Socket createSocket(String hostName,int portNumber) throws SSLConnectionException, IOException {  if (sslSocketFactory == null) {    throw new SSLConnectionException(ERR_TOOLS_SSL_CONNECTION_NOT_INITIALIZED.get());  }  return socketWithEnabledProtocols(sslSocketFactory.createSocket(hostName,portNumber));}  }
class C{  public StringFixedLength(String identifier,AbstractTagFrameBody frameBody,int size){  super(identifier,frameBody);  if (size < 0) {    throw new IllegalArgumentException("size is less than zero: " + size);  }  setSize(size);}  }
class C{  @Override public void uninitialize(){  KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(_handler);  super.uninitialize();}  }
class C{  private void GetInstance03(int mode) throws NoSuchAlgorithmException, IllegalArgumentException, InvalidAlgorithmParameterException {  try {    KeyPairGenerator.getInstance(null,mProv);    fail("NullPointerException or KeyStoreException must be thrown");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    try {      KeyPairGenerator.getInstance(alg,prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(alg).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  KeyPairGenerator kpG;  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    kpG=KeyPairGenerator.getInstance(alg,mProv);    assertEquals("Incorrect algorithm",kpG.getAlgorithm().toUpperCase(),(mode <= 2 ? resAlg : alg).toUpperCase());    assertEquals("Incorrect provider",kpG.getProvider(),mProv);    checkResult(kpG,mode);  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    Request request=requestEvent.getRequest();    SipProvider sipProvider=(SipProvider)requestEvent.getSource();    ServerTransaction st=sipProvider.getNewServerTransaction(request);    TTask ttask=new TTask(requestEvent,st);    int ttime=100;    new Timer().schedule(ttask,ttime);  } catch (  Exception ex) {    ex.printStackTrace();    TxTimeoutTest.fail("Shootme: Failed on process INVITE",ex);  }}  }
class C{  private void updateMask(AttributedCharacterIterator iterator){  if (iterator != null) {    validMask=true;    this.iterator=iterator;    if (literalMask == null) {      literalMask=new BitSet();    } else {      for (int counter=literalMask.length() - 1; counter >= 0; counter--) {        literalMask.clear(counter);      }    }    iterator.first();    while (iterator.current() != CharacterIterator.DONE) {      Map attributes=iterator.getAttributes();      boolean set=isLiteral(attributes);      int start=iterator.getIndex();      int end=iterator.getRunLimit();      while (start < end) {        if (set) {          literalMask.set(start);        } else {          literalMask.clear(start);        }        start++;      }      iterator.setIndex(start);    }  }}  }
class C{  public NetObjectList(String lname,Class<?> cname){  super(lname,cname);}  }
class C{  public IDFFModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  public static Boolean isHeartBitMsgPrintable(){  return QUOTE_STREAMING_HEART_BIT_MSG_PRINT;}  }
class C{  public ParseOptions(){  setOption(FIX_CONTROL_CHARS | ACCEPT_LATIN_1,true);}  }
class C{  DN2URI(TreeName treeName,EntryContainer entryContainer) throws StorageRuntimeException {  super(treeName);  prefixRDNComponents=entryContainer.getBaseDN().size();}  }
class C{  public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return this;}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public static NSObject parse(byte[] data) throws PropertyListFormatException, UnsupportedEncodingException {  BinaryPropertyListParser parser=new BinaryPropertyListParser();  return parser.doParse(data);}  }
class C{  public static ValueExp value(Number val){  return new NumericValueExp(val);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return execute(xctxt,xctxt.getCurrentNode());}  }
class C{  private void utah(int row,int col,int pos){  module(row - 2,col - 2,pos,1);  module(row - 2,col - 1,pos,2);  module(row - 1,col - 2,pos,3);  module(row - 1,col - 1,pos,4);  module(row - 1,col,pos,5);  module(row,col - 2,pos,6);  module(row,col - 1,pos,7);  module(row,col,pos,8);}  }
class C{  public void computeVisibleRect(Rectangle visibleRect){  computeVisibleRect(this,visibleRect);}  }
class C{  public Tenant updateTenant(EntityManager em,String tenantId,String tenantName) throws Exception {  Tenant tenant=getTenant(em,tenantId);  if (tenant != null) {    EntityTransaction t=em.getTransaction();    try {      t.begin();      tenant.setTenant_name(tenantName);      em.merge(tenant);      em.flush();      t.commit();      return tenant;    } catch (    Exception e) {      if (t.isActive()) {        t.rollback();      }      logger.log(Level.SEVERE,"Failed to update tenant:" + tenant,e);      throw e;    }  } else {    throw new EntityNotFoundException("Tenant not found");  }}  }
class C{  public Cursor fetch(Long attributeID){  if (attributeID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_EXTERNALATTRIBUTEID + "=" + attributeID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public FrameBodyTSO2(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  private String searchUserAccount(String attributeValue,String organization) throws AuthLoginException {  String classMethod="WindowsDesktopSSO.searchUserAccount: ";  if (organization.isEmpty()) {    organization="/";  }  if (debug.messageEnabled()) {    debug.message(classMethod + " searching for user " + attributeValue+ " in the organization ="+ organization);  }  IdSearchControl searchControl=new IdSearchControl();  searchControl.setMaxResults(1);  searchControl.setTimeOut(3000);  searchControl.setSearchModifiers(IdSearchOpModifier.OR,buildSearchControl(attributeValue));  searchControl.setAllReturnAttributes(false);  try {    AMIdentityRepository amirepo=new AMIdentityRepository(getSSOSession(),organization);    IdSearchResults searchResults=amirepo.searchIdentities(IdType.USER,"*",searchControl);    if (searchResults.getErrorCode() == IdSearchResults.SUCCESS && searchResults != null) {      Set<AMIdentity> results=searchResults.getSearchResults();      if (!results.isEmpty()) {        if (debug.messageEnabled()) {          debug.message(classMethod + results.size() + " result(s) obtained");        }        AMIdentity userDNId=results.iterator().next();        if (userDNId != null) {          if (debug.messageEnabled()) {            debug.message(classMethod + "user = " + userDNId.getUniversalId());            debug.message(classMethod + "attrs =" + userDNId.getAttributes(getUserAliasList()));          }          return attributeValue.trim();        }      }    }  } catch (  IdRepoException idrepoex) {    String data[]={attributeValue,organization};    throw new AuthLoginException(amAuthWindowsDesktopSSO,"idRepoSearch",data,idrepoex);  }catch (  SSOException ssoe) {    String data[]={attributeValue,organization};    throw new AuthLoginException(amAuthWindowsDesktopSSO,"ssoSearch",data,ssoe);  }  if (debug.messageEnabled()) {    debug.message(classMethod + " No results were found !");  }  return null;}  }
class C{  public void destroy(){}  }
class C{  public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public PopupMenu() throws HeadlessException {  this("");}  }
class C{  public String toString(){  return (attrSyntax);}  }
class C{  public static void checkClassSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkClassTypeSignature(signature,pos);  while (getChar(signature,pos) == 'L') {    pos=checkClassTypeSignature(signature,pos);  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public DeleteOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,ByteString rawEntryDN){  super(clientConnection,operationID,messageID,requestControls);  this.rawEntryDN=rawEntryDN;}  }
class C{  private void initialize(URI p_other){  m_scheme=p_other.getScheme();  m_userinfo=p_other.getUserinfo();  m_host=p_other.getHost();  m_port=p_other.getPort();  m_path=p_other.getPath();  m_queryString=p_other.getQueryString();  m_fragment=p_other.getFragment();}  }
class C{  public void removeAttributeValues(String serviceName,String attrName,Set values) throws SMSException {  validateConfigImpl();  if (serviceName == null || attrName == null) {    return;  }  if (migratedTo70) {    try {      CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,orgDN);      if (cEntry.isDirty()) {        cEntry.refresh();      }      SMSEntry e=cEntry.getClonedSMSEntry();      ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);      ServiceSchema ss=ssm.getOrganizationCreationSchema();      Map map=new HashMap(2);      map.put(attrName,values);      ss.validateAttributes(map);      SMSUtils.removeAttributeValues(e,serviceName.toLowerCase() + "-" + attrName,values,ss.getSearchableAttributeNames());      e.save(token);      cEntry.refresh(e);    } catch (    SSOException ssoe) {      SMSEntry.debug.error("OrganizationConfigManager: Unable " + "to remove Attribute Values",ssoe);      throw (new SMSException(SMSEntry.bundle.getString(SMS_INVALID_SSO_TOKEN),SMS_INVALID_SSO_TOKEN));    }  }  if (coexistMode && serviceName.equalsIgnoreCase(OrgConfigViaAMSDK.IDREPO_SERVICE)) {    amsdk.removeAttributeValues(attrName,values);  }}  }
class C{  public void printlnMessage(String str){  buff.append(str).append("\n");}  }
class C{  public static ImageData create(java.awt.Image image,java.awt.Color color,boolean forceBW) throws java.io.IOException {  if (image instanceof BufferedImage) {    BufferedImage bi=(BufferedImage)image;    if (bi.getType() == BufferedImage.TYPE_BYTE_BINARY && bi.getColorModel().getPixelSize() == 1) {      forceBW=true;    }  }  PixelGrabber pg=new PixelGrabber(image,0,0,-1,-1,true);  try {    pg.grabPixels();  } catch (  InterruptedException e) {    throw new java.io.IOException("Java.awt.image was interrupted. Waiting for pixels");  }  if ((pg.getStatus() & ImageObserver.ABORT) != 0) {    throw new java.io.IOException("Java.awt.image fetch aborted or errored");  }  int w=pg.getWidth();  int h=pg.getHeight();  int[] pixels=(int[])pg.getPixels();  if (forceBW) {    int byteWidth=w / 8 + ((w & 7) != 0 ? 1 : 0);    byte[] pixelsByte=new byte[byteWidth * h];    int index=0;    int size=h * w;    int transColor=1;    if (color != null) {      transColor=color.getRed() + color.getGreen() + color.getBlue() < 384 ? 0 : 1;    }    int[] transparency=null;    int cbyte=0x80;    int wMarker=0;    int currByte=0;    if (color != null) {      for (int j=0; j < size; j++) {        int alpha=pixels[j] >> 24 & 0xff;        if (alpha < 250) {          if (transColor == 1)           currByte|=cbyte;        } else {          if ((pixels[j] & 0x888) != 0)           currByte|=cbyte;        }        cbyte>>=1;        if (cbyte == 0 || wMarker + 1 >= w) {          pixelsByte[index++]=(byte)currByte;          cbyte=0x80;          currByte=0;        }        ++wMarker;        if (wMarker >= w)         wMarker=0;      }    } else {      for (int j=0; j < size; j++) {        if (transparency == null) {          int alpha=pixels[j] >> 24 & 0xff;          if (alpha == 0) {            transparency=new int[2];            transparency[0]=transparency[1]=(pixels[j] & 0x888) != 0 ? 0xff : 0;          }        }        if ((pixels[j] & 0x888) != 0)         currByte|=cbyte;        cbyte>>=1;        if (cbyte == 0 || wMarker + 1 >= w) {          pixelsByte[index++]=(byte)currByte;          cbyte=0x80;          currByte=0;        }        ++wMarker;        if (wMarker >= w)         wMarker=0;      }    }    return ImageDataFactory.create(w,h,1,1,pixelsByte,transparency);  } else {    byte[] pixelsByte=new byte[w * h * 3];    byte[] smask=null;    int index=0;    int size=h * w;    int red=255;    int green=255;    int blue=255;    if (color != null) {      red=color.getRed();      green=color.getGreen();      blue=color.getBlue();    }    int[] transparency=null;    if (color != null) {      for (int j=0; j < size; j++) {        int alpha=pixels[j] >> 24 & 0xff;        if (alpha < 250) {          pixelsByte[index++]=(byte)red;          pixelsByte[index++]=(byte)green;          pixelsByte[index++]=(byte)blue;        } else {          pixelsByte[index++]=(byte)(pixels[j] >> 16 & 0xff);          pixelsByte[index++]=(byte)(pixels[j] >> 8 & 0xff);          pixelsByte[index++]=(byte)(pixels[j] & 0xff);        }      }    } else {      int transparentPixel=0;      smask=new byte[w * h];      boolean shades=false;      for (int j=0; j < size; j++) {        byte alpha=smask[j]=(byte)(pixels[j] >> 24 & 0xff);        if (!shades) {          if (alpha != 0 && alpha != -1) {            shades=true;          } else           if (transparency == null) {            if (alpha == 0) {              transparentPixel=pixels[j] & 0xffffff;              transparency=new int[6];              transparency[0]=transparency[1]=transparentPixel >> 16 & 0xff;              transparency[2]=transparency[3]=transparentPixel >> 8 & 0xff;              transparency[4]=transparency[5]=transparentPixel & 0xff;              for (int prevPixel=0; prevPixel < j; prevPixel++) {                if ((pixels[prevPixel] & 0xffffff) == transparentPixel) {                  shades=true;                  break;                }              }            }          } else           if (((pixels[j] & 0xffffff) != transparentPixel) && (alpha == 0)) {            shades=true;          } else           if (((pixels[j] & 0xffffff) == transparentPixel) && (alpha != 0)) {            shades=true;          }        }        pixelsByte[index++]=(byte)(pixels[j] >> 16 & 0xff);        pixelsByte[index++]=(byte)(pixels[j] >> 8 & 0xff);        pixelsByte[index++]=(byte)(pixels[j] & 0xff);      }      if (shades)       transparency=null; else       smask=null;    }    ImageData img=ImageDataFactory.create(w,h,3,8,pixelsByte,transparency);    if (smask != null) {      ImageData sm=ImageDataFactory.create(w,h,1,8,smask,null);      sm.makeMask();      img.setImageMask(sm);    }    return img;  }}  }
class C{  public SerialStruct(Struct in,Map<String,Class<?>> map) throws SerialException {  try {    SQLTypeName=in.getSQLTypeName();    System.out.println("SQLTypeName: " + SQLTypeName);    attribs=in.getAttributes(map);    mapToSerial(map);  } catch (  SQLException e) {    throw new SerialException(e.getMessage());  }}  }
class C{  static Object valueConversion(Class<?> src,Class<?> dst,boolean strict,boolean monobox){  assert (!VerifyType.isNullConversion(src,dst,strict));  if (dst == void.class)   return dst;  MethodHandle fn;  if (src.isPrimitive()) {    if (src == void.class) {      return void.class;    } else     if (dst.isPrimitive()) {      fn=ValueConversions.convertPrimitive(src,dst);    } else {      Wrapper wsrc=Wrapper.forPrimitiveType(src);      fn=ValueConversions.boxExact(wsrc);      assert (fn.type().parameterType(0) == wsrc.primitiveType());      assert (fn.type().returnType() == wsrc.wrapperType());      if (!VerifyType.isNullConversion(wsrc.wrapperType(),dst,strict)) {        MethodType mt=MethodType.methodType(dst,src);        if (strict)         fn=fn.asType(mt); else         fn=MethodHandleImpl.makePairwiseConvert(fn,mt,false);      }    }  } else   if (dst.isPrimitive()) {    Wrapper wdst=Wrapper.forPrimitiveType(dst);    if (monobox || src == wdst.wrapperType()) {      fn=ValueConversions.unboxExact(wdst,strict);    } else {      fn=(strict ? ValueConversions.unboxWiden(wdst) : ValueConversions.unboxCast(wdst));    }  } else {    return dst;  }  assert (fn.type().parameterCount() <= 1) : "pc" + Arrays.asList(src.getSimpleName(),dst.getSimpleName(),fn);  return fn;}  }
class C{  private FileEntry createFileEntry(FileEntry parent,File file){  FileEntry entry=parent.newChildInstance(file);  entry.refresh(file);  File[] files=listFiles(file);  FileEntry[] children=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;  for (int i=0; i < files.length; i++) {    children[i]=createFileEntry(entry,files[i]);  }  entry.setChildren(children);  return entry;}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.PasswordTransformsType.TransformType.ParameterType createPasswordTransformsTypeTransformTypeParameterType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.PasswordTransformsTypeImpl.TransformTypeImpl.ParameterTypeImpl();}  }
class C{  public MBeanAttributeInfo(String name,String type,String description,boolean isReadable,boolean isWritable,boolean isIs,Descriptor descriptor){  super(name,description,descriptor);  this.attributeType=type;  this.isRead=isReadable;  this.isWrite=isWritable;  if (isIs && !isReadable) {    throw new IllegalArgumentException("Cannot have an \"is\" getter " + "for a non-readable attribute");  }  if (isIs && !type.equals("java.lang.Boolean") && !type.equals("boolean")) {    throw new IllegalArgumentException("Cannot have an \"is\" getter " + "for a non-boolean attribute");  }  this.is=isIs;}  }
class C{  public void add(int index,RoleUnresolved role) throws IllegalArgumentException, IndexOutOfBoundsException {  if (role == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  super.add(index,role);}  }
class C{  public boolean is_colinear(PlaPointInt i_point,double tolerance_sq){  return is_colinear(i_point.to_float(),tolerance_sq);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentfragmentnormalize1.class,args);}  }
class C{  public void logTrace(String message){  if (needsLogging) {    String newMessage=this.enhanceMessage(message);    if (this.lineCount == 0) {      getLogger().debug("BUILD TIMESTAMP = " + this.buildTimeStamp);      getLogger().debug("Config Propeties = " + this.configurationProperties);    }    countLines(newMessage);    getLogger().trace(newMessage);  }}  }
class C{  public org.omg.CORBA.Object resolve(org.omg.CosNaming.NameComponent[] n) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("resolve",true);    org.omg.CosNaming.NameHelper.write($out,n);    $in=_invoke($out);    org.omg.CORBA.Object $result=org.omg.CORBA.ObjectHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return resolve(n);  } finally {    _releaseReply($in);  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public boolean isRoot(){  return true;}  }
class C{  public static List<String> importSAML2Document(SAML2MetaManager metaManager,String realm,Document doc) throws SAML2MetaException, JAXBException {  List<String> result=new ArrayList<String>(1);  Object element=preProcessSAML2Document(doc);  if (element instanceof EntityDescriptorElement) {    String entityId=importSAML2Entity(metaManager,realm,(EntityDescriptorElement)element);    if (entityId != null) {      result.add(entityId);    }  } else   if (element instanceof EntitiesDescriptorElement) {    result=importSAML2Entites(metaManager,realm,(EntitiesDescriptorElement)element);  }  if (debug.messageEnabled()) {    debug.message("SAML2MetaUtils.importSAML2Document: " + "Created " + result + " entities");  }  return result;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("NotificationInfo[");  sb.append("name=");  sb.append(name);  sb.append(", description=");  sb.append(description);  sb.append(", notifTypes=");  Lock readLock=notifTypesLock.readLock();  readLock.lock();  try {    sb.append(notifTypes.length);  }  finally {    readLock.unlock();  }  sb.append("]");  return (sb.toString());}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  private void enableMapper() throws Exception {  String externalDN="cn=EXTERNAL,cn=SASL Mechanisms,cn=config";  String mapperDN="cn=Subject DN to User Attribute,cn=Certificate Mappers,cn=config";  assertModifyReplaceIsSuccess(externalDN,"ds-cfg-certificate-mapper",mapperDN);}  }
class C{  @DataProvider private Object[][] testExcludePrecommitProvider(){  return new Object[][]{{1,new String[]{"inetOrgPerson","displayName"}}};}  }
class C{  public void run(){  AuthContext.authDebug.message("AuthLoginThread::run()");  try {    authContext.loginContext.login();    authContext.setLoginStatus(AuthContext.AUTH_SUCCESS);    AuthContext.authDebug.message("AuthLoginThread::run() successful login");  } catch (  LoginException le) {    authContext.setLoginStatus(AuthContext.AUTH_FAILED);    authContext.loginException=le;    AuthContext.authDebug.message("AuthLoginThread::run() exception during login; " + le);  }}  }
class C{  private JButton createTitleButton(){  JButton button=new JButton();  button.setFocusPainted(false);  button.setFocusable(false);  button.setOpaque(true);  return button;}  }
class C{  public AtomicLongArray(int length){  array=new long[length];}  }
class C{  public void testFloatValueNegMaxValue(){  byte[] a={0,-1,-1,-1,0,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=-1;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == -Float.MAX_VALUE);}  }
class C{  private int subParse(String text,int start,int patternCharIndex,int count,boolean obeyCount,boolean[] ambiguousYear,ParsePosition origPos,boolean useFollowingMinusSignAsDelimiter,CalendarBuilder calb){  Number number;  int value=0;  ParsePosition pos=new ParsePosition(0);  pos.index=start;  if (patternCharIndex == PATTERN_WEEK_YEAR && !calendar.isWeekDateSupported()) {    patternCharIndex=PATTERN_YEAR;  }  int field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];  for (; ; ) {    if (pos.index >= text.length()) {      origPos.errorIndex=start;      return -1;    }    char c=text.charAt(pos.index);    if (c != ' ' && c != '\t') {      break;    }    ++pos.index;  }  int actualStart=pos.index;  parsing: {    if (patternCharIndex == PATTERN_HOUR_OF_DAY1 || patternCharIndex == PATTERN_HOUR1 || (patternCharIndex == PATTERN_MONTH && count <= 2) || patternCharIndex == PATTERN_YEAR || patternCharIndex == PATTERN_WEEK_YEAR) {      if (obeyCount) {        if ((start + count) > text.length()) {          break parsing;        }        number=numberFormat.parse(text.substring(0,start + count),pos);      } else {        number=numberFormat.parse(text,pos);      }      if (number == null) {        if (patternCharIndex != PATTERN_YEAR || calendar instanceof GregorianCalendar) {          break parsing;        }      } else {        value=number.intValue();        if (useFollowingMinusSignAsDelimiter && (value < 0) && (((pos.index < text.length()) && (text.charAt(pos.index) != minusSign)) || ((pos.index == text.length()) && (text.charAt(pos.index - 1) == minusSign)))) {          value=-value;          pos.index--;        }      }    }    boolean useDateFormatSymbols=useDateFormatSymbols();    int index;switch (patternCharIndex) {case PATTERN_ERA:      if (useDateFormatSymbols) {        if ((index=matchString(text,start,Calendar.ERA,formatData.getEras(),calb)) > 0) {          return index;        }      } else {        Map<String,Integer> map=getDisplayNamesMap(field,locale);        if ((index=matchString(text,start,field,map,calb)) > 0) {          return index;        }      }    break parsing;case PATTERN_WEEK_YEAR:case PATTERN_YEAR:  if (!(calendar instanceof GregorianCalendar)) {    int style=(count >= 4) ? Calendar.LONG : Calendar.SHORT;    Map<String,Integer> map=calendar.getDisplayNames(field,style,locale);    if (map != null) {      if ((index=matchString(text,start,field,map,calb)) > 0) {        return index;      }    }    calb.set(field,value);    return pos.index;  }if (count <= 2 && (pos.index - actualStart) == 2 && Character.isDigit(text.charAt(actualStart)) && Character.isDigit(text.charAt(actualStart + 1))) {  int ambiguousTwoDigitYear=defaultCenturyStartYear % 100;  ambiguousYear[0]=value == ambiguousTwoDigitYear;  value+=(defaultCenturyStartYear / 100) * 100 + (value < ambiguousTwoDigitYear ? 100 : 0);}calb.set(field,value);return pos.index;case PATTERN_MONTH:if (count <= 2) {calb.set(Calendar.MONTH,value - 1);return pos.index;}if (useDateFormatSymbols) {int newStart;if ((newStart=matchString(text,start,Calendar.MONTH,formatData.getMonths(),calb)) > 0) {return newStart;}if ((index=matchString(text,start,Calendar.MONTH,formatData.getShortMonths(),calb)) > 0) {return index;}} else {Map<String,Integer> map=getDisplayNamesMap(field,locale);if ((index=matchString(text,start,field,map,calb)) > 0) {return index;}}break parsing;case PATTERN_HOUR_OF_DAY1:if (!isLenient()) {if (value < 1 || value > 24) {break parsing;}}if (value == calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1) {value=0;}calb.set(Calendar.HOUR_OF_DAY,value);return pos.index;case PATTERN_DAY_OF_WEEK:{if (useDateFormatSymbols) {int newStart;if ((newStart=matchString(text,start,Calendar.DAY_OF_WEEK,formatData.getWeekdays(),calb)) > 0) {return newStart;}if ((index=matchString(text,start,Calendar.DAY_OF_WEEK,formatData.getShortWeekdays(),calb)) > 0) {return index;}} else {int[] styles={Calendar.LONG,Calendar.SHORT};for (int style : styles) {Map<String,Integer> map=calendar.getDisplayNames(field,style,locale);if ((index=matchString(text,start,field,map,calb)) > 0) {return index;}}}}break parsing;case PATTERN_AM_PM:if (useDateFormatSymbols) {if ((index=matchString(text,start,Calendar.AM_PM,formatData.getAmPmStrings(),calb)) > 0) {return index;}} else {Map<String,Integer> map=getDisplayNamesMap(field,locale);if ((index=matchString(text,start,field,map,calb)) > 0) {return index;}}break parsing;case PATTERN_HOUR1:if (!isLenient()) {if (value < 1 || value > 12) {break parsing;}}if (value == calendar.getLeastMaximum(Calendar.HOUR) + 1) {value=0;}calb.set(Calendar.HOUR,value);return pos.index;case PATTERN_ZONE_NAME:case PATTERN_ZONE_VALUE:{int sign=0;try {char c=text.charAt(pos.index);if (c == '+') {sign=1;} else if (c == '-') {sign=-1;}if (sign == 0) {if ((c == 'G' || c == 'g') && (text.length() - start) >= GMT.length() && text.regionMatches(true,start,GMT,0,GMT.length())) {pos.index=start + GMT.length();if ((text.length() - pos.index) > 0) {c=text.charAt(pos.index);if (c == '+') {sign=1;} else if (c == '-') {sign=-1;}}if (sign == 0) {calb.set(Calendar.ZONE_OFFSET,0).set(Calendar.DST_OFFSET,0);return pos.index;}int i=subParseNumericZone(text,++pos.index,sign,0,true,calb);if (i > 0) {return i;}pos.index=-i;} else {int i=subParseZoneString(text,pos.index,calb);if (i > 0) {return i;}pos.index=-i;}} else {int i=subParseNumericZone(text,++pos.index,sign,0,false,calb);if (i > 0) {return i;}pos.index=-i;}} catch (IndexOutOfBoundsException e) {}}break parsing;case PATTERN_ISO_ZONE:{if ((text.length() - pos.index) <= 0) {break parsing;}int sign;char c=text.charAt(pos.index);if (c == 'Z') {calb.set(Calendar.ZONE_OFFSET,0).set(Calendar.DST_OFFSET,0);return ++pos.index;}if (c == '+') {sign=1;} else if (c == '-') {sign=-1;} else {++pos.index;break parsing;}int i=subParseNumericZone(text,++pos.index,sign,count,count == 3,calb);if (i > 0) {return i;}pos.index=-i;}break parsing;default :if (obeyCount) {if ((start + count) > text.length()) {break parsing;}number=numberFormat.parse(text.substring(0,start + count),pos);} else {number=numberFormat.parse(text,pos);}if (number != null) {value=number.intValue();if (useFollowingMinusSignAsDelimiter && (value < 0) && (((pos.index < text.length()) && (text.charAt(pos.index) != minusSign)) || ((pos.index == text.length()) && (text.charAt(pos.index - 1) == minusSign)))) {value=-value;pos.index--;}calb.set(field,value);return pos.index;}break parsing;}}origPos.errorIndex=pos.index;return -1;}  }
class C{  SmsRouteTreeBuilder subTrees(SmsRouteTreeBuilder... subTreeBuilders){  this.subTreeBuilders=asSet(subTreeBuilders);  return this;}  }
class C{  public void shutDown(){  if (logger.isTraceEnabled()) {    logger.trace(getName() + " being signaled to shut down.");  }  shutdownRequested=true;  if (waitingForWork) {    try {      workerThread.interrupt();    } catch (    Exception e) {      if (logger.isTraceEnabled()) {        logger.trace("Caught an exception while trying to interrupt the worker " + "thread waiting for work: %s",e);        logger.traceException(e);      }    }  } else {    try {      CancelRequest cancelRequest=new CancelRequest(true,INFO_CANCELED_BY_SHUTDOWN.get());      operation.cancel(cancelRequest);    } catch (    Exception e) {      if (logger.isTraceEnabled()) {        logger.trace("Caught an exception while trying to abandon the " + "operation in progress for the worker thread: %s",e);        logger.traceException(e);      }    }  }}  }
class C{  public Node replaceChild(Node newChild,Node oldChild){  if (newChild == null) {    throw new IllegalArgumentException("newChild == null!");  }  checkNode(newChild);  checkNode(oldChild);  IIOMetadataNode newChildNode=(IIOMetadataNode)newChild;  IIOMetadataNode oldChildNode=(IIOMetadataNode)oldChild;  IIOMetadataNode previous=oldChildNode.previousSibling;  IIOMetadataNode next=oldChildNode.nextSibling;  if (previous != null) {    previous.nextSibling=newChildNode;  }  if (next != null) {    next.previousSibling=newChildNode;  }  newChildNode.parent=this;  newChildNode.previousSibling=previous;  newChildNode.nextSibling=next;  if (firstChild == oldChildNode) {    firstChild=newChildNode;  }  if (lastChild == oldChildNode) {    lastChild=newChildNode;  }  oldChildNode.parent=null;  oldChildNode.previousSibling=null;  oldChildNode.nextSibling=null;  return oldChildNode;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionMethodType createEncryptionMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionMethodTypeImpl();}  }
class C{  public void test_verify$BII() throws Exception {  Signature sig=Signature.getInstance("DSA");  sig.initSign(getDsaKeys().getPrivate());  sig.update(MESSAGE.getBytes());  byte[] signature=sig.sign();  sig.initVerify(getDsaKeys().getPublic());  sig.update(MESSAGE.getBytes());  assertTrue("Sign/Verify does not pass",sig.verify(signature,0,signature.length));  try {    sig.verify(null,0,signature.length);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    sig.verify(signature,-5,signature.length);    fail();  } catch (  IllegalArgumentException expected) {  }  if (StandardNames.IS_RI) {    try {      sig.verify(signature,signature.length,0);      fail();    } catch (    SignatureException expected) {    }  } else {    boolean verified=sig.verify(signature,signature.length,0);    assertFalse(verified);  }  try {    sig.verify(signature,0,signature.length * 2);    fail();  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public static boolean isReservedShortOption(String name){  return reservedShortOptionNames.contains(name);}  }
class C{  public double lengthSquared(){  return NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X500Name || obj instanceof ASN1Sequence)) {    return false;  }  ASN1Primitive derO=((ASN1Encodable)obj).toASN1Primitive();  if (this.toASN1Primitive().equals(derO)) {    return true;  }  try {    return style.areEqual(this,new X500Name(ASN1Sequence.getInstance(((ASN1Encodable)obj).toASN1Primitive())));  } catch (  Exception e) {    return false;  }}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  flushStartDoc();  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.comment(ch,start,length);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("PriorityParser.parse");  Priority priority=new Priority();  try {    headerName(TokenTypes.PRIORITY);    priority.setHeaderName(SIPHeaderNames.PRIORITY);    this.lexer.SPorHT();    priority.setPriority(this.lexer.ttokenSafe());    this.lexer.SPorHT();    this.lexer.match('\n');    return priority;  }  finally {    if (debug)     dbg_leave("PriorityParser.parse");  }}  }
class C{  private boolean isValidToken(String s){  int len=s.length();  if (len > 0) {    for (int i=0; i < len; ++i) {      char c=s.charAt(i);      if (!isTokenChar(c)) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  public StatusImpl(Element element) throws SAML2Exception {  parseElement(element);}  }
class C{  protected void removeAuthConfigListener(String configName){  removeConfigListenerEntry(singleton(configName));}  }
class C{  public static String toRomanUpperCase(int number){  return convert(number).toUpperCase();}  }
class C{  public boolean isReplicationServer() throws IOException {  return getReplicationPort() != -1;}  }
class C{  public static boolean isValidName(String name){  if (name.length() == 0)   return false;  char ch=name.charAt(0);  if (isNameStart(ch) == false)   return false;  for (int i=1; i < name.length(); i++) {    ch=name.charAt(i);    if (isName(ch) == false) {      return false;    }  }  return true;}  }
class C{  String constructComponentName(){synchronized (Canvas.class) {    return base + nameCounter++;  }}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SPKIDataElement createSPKIDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SPKIDataElementImpl();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.LaxTsFirstElement createLaxTsFirstElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.LaxTsFirstElementImpl();}  }
class C{  public DefaultMutableTreeNode(Object userObject){  this(userObject,true);}  }
class C{  @Override public Foo remove(long fooId) throws NoSuchFooException {  return remove((Serializable)fooId);}  }
class C{  protected boolean isSpecialUser(String dn){  boolean isSpecialUser=false;  StringTokenizer st=new StringTokenizer(specialUser,"|");  if (debug.messageEnabled()) {    debug.message("AuthAgents:isSpecial:dn = " + dn);  }  if ((dn != null) && (specialUser != null)) {    String lcdn=DNUtils.normalizeDN(dn);    while (st.hasMoreTokens()) {      String specialAdminDN=(String)st.nextToken();      if (specialAdminDN != null) {        String normSpecialAdmin=DNUtils.normalizeDN(specialAdminDN);        if (debug.messageEnabled()) {          debug.message("AuthAgents:isSpecial:compare to " + normSpecialAdmin);        }        if (lcdn.equals(normSpecialAdmin)) {          isSpecialUser=true;          break;        }      }    }  }  return isSpecialUser;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static Map toSimpleModel(Map<String,Object> mapToClean){  for (  Map.Entry<String,Object> entry : mapToClean.entrySet()) {    entry.setValue(asSimpleBinding(entry.getValue()));  }  return mapToClean;}  }
class C{  public OBJECT_NOT_EXIST(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public static void storeResourceBundle(SSOToken token,String rbName,String locale,Map attributes) throws SMSException, SSOException {  if (rbName == null) {    return;  }  ServiceConfigManager scm=new ServiceConfigManager(token,LOCALE_SERVICE,VERSION);  ServiceConfig globalConfig=scm.getGlobalConfig(null);  ServiceConfig rbConfig=globalConfig.getSubConfig(rbName);  if (rbConfig == null) {    globalConfig.addSubConfig(rbName,RB_CONFIG_ID,0,new HashMap());    rbConfig=globalConfig.getSubConfig(rbName);  }  if (locale == null) {    rbConfig.setAttributes(attributes);  } else {    ServiceConfig localeConfig=rbConfig.getSubConfig(locale);    if (localeConfig == null) {      rbConfig.addSubConfig(locale,LOCALE_CONFIG_ID,0,attributes);      localeConfig=rbConfig.getSubConfig(locale);    } else {      localeConfig.setAttributes(attributes);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodecommentnodeattributes.class,args);}  }
class C{  public void makeVisible(){  TreeStateNode parent=(TreeStateNode)getParent();  if (parent != null)   parent.expandParentAndReceiver();}  }
class C{  public DataFlavor(String mimeType) throws ClassNotFoundException {  super();  if (mimeType == null) {    throw new NullPointerException("mimeType");  }  try {    initialize(mimeType,null,this.getClass().getClassLoader());  } catch (  MimeTypeParseException mtpe) {    throw new IllegalArgumentException("failed to parse:" + mimeType);  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    logger.info("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    TestHarness.fail(ex.getMessage());    System.exit(0);  }}  }
class C{  protected void doWriteObject(ObjectOutputStream stream) throws IOException {  stream.writeObject(Long.valueOf(creationTime));  stream.writeObject(Long.valueOf(lastAccessedTime));  stream.writeObject(Integer.valueOf(maxInactiveInterval));  stream.writeObject(Boolean.valueOf(isNew));  stream.writeObject(Boolean.valueOf(isValid));  stream.writeObject(Long.valueOf(thisAccessedTime));  stream.writeObject(id);  if (manager.getContext().getLogger().isDebugEnabled())   manager.getContext().getLogger().debug("writeObject() storing session " + id);  String keys[]=keys();  ArrayList<String> saveNames=new ArrayList<>();  ArrayList<Object> saveValues=new ArrayList<>();  for (int i=0; i < keys.length; i++) {    Object value=attributes.get(keys[i]);    if (value == null) {      continue;    } else     if (isAttributeDistributable(keys[i],value) && !exclude(keys[i],value)) {      saveNames.add(keys[i]);      saveValues.add(value);    } else {      removeAttributeInternal(keys[i],true);    }  }  int n=saveNames.size();  stream.writeObject(Integer.valueOf(n));  for (int i=0; i < n; i++) {    stream.writeObject(saveNames.get(i));    try {      stream.writeObject(saveValues.get(i));      if (manager.getContext().getLogger().isDebugEnabled())       manager.getContext().getLogger().debug("  storing attribute '" + saveNames.get(i) + "' with value '"+ saveValues.get(i)+ "'");    } catch (    NotSerializableException e) {      manager.getContext().getLogger().warn(sm.getString("standardSession.notSerializable",saveNames.get(i),id),e);    }  }}  }
class C{  public void testFloatValueNeg(){  String a="-1238096483923847.6356789029578E+21";  BigDecimal aNumber=new BigDecimal(a);  float result=-1.2380965E36F;  assertTrue("incorrect value",aNumber.floatValue() == result);}  }
class C{  private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {  try {    in.defaultReadObject();    final PerUserPoolDataSource oldDS=(PerUserPoolDataSource)new PerUserPoolDataSourceFactory().getObjectInstance(getReference(),null,null,null);    this.managers=oldDS.managers;  } catch (  final NamingException e) {    throw new IOException("NamingException: " + e);  }}  }
class C{  public void addAll(T... items){synchronized (lock) {    this.items.addAll(identifiedItemFactory.createList(items));  }  itemPositionChangeChecked=new SparseBooleanArray(this.items.size());  notifyDataSetChanged();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staff",false);  element=doc.createElement("address");  attribute=doc.createAttribute("domestic");  state=element.hasAttribute("domestic");  assertFalse("elementhasattribute03_False",state);  newAttribute=element.setAttributeNode(attribute);  state=element.hasAttribute("domestic");  assertTrue("elementhasattribute03_True",state);}  }
class C{  public List<String> defaultComments(ProtoElement element){  if (!element.hasAttribute(ElementDocumentationAttribute.KEY)) {    return ImmutableList.<String>of();  }  return convertToCommentedBlock(JSDocCommentFixer.jsdocify(DocumentationUtil.getScopedDescription(element)));}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof NSNumber))   return false;  NSNumber n=(NSNumber)obj;  return type == n.type && longValue == n.longValue && doubleValue == n.doubleValue && boolValue == n.boolValue;}  }
class C{  public static void registerFamily(String familyName,String fullName,String path){  FontProgramFactory.registerFontFamily(familyName,fullName,path);}  }
class C{  @Override public Foo fetchByUUID_G(String uuid,long groupId){  return fetchByUUID_G(uuid,groupId,true);}  }
class C{  public synchronized void close() throws IOException {  isClosed=true;  localAddress=Inet4Address.ANY;  impl.close();}  }
class C{  static String generateRandomName(){  StringBuilder sb=new StringBuilder(30);  byte[] keyRandom=new byte[5];  random.nextBytes(keyRandom);  sb.append(currentTimeMillis()).toString();  return (sb.append(Base64.encode(keyRandom)).toString());}  }
class C{  @Override public void forceResort(){  updateDataArray();  fireTableDataChanged();}  }
class C{  public void addCondition(Condition condition) throws NameAlreadyExistsException {  addCondition(null,condition);}  }
class C{  public static void makeLdif(String ldifPath,String resourcePath,String templatePath) throws IOException, InitializationException, MakeLDIFException {  TemplateFile template=new TemplateFile(resourcePath,new Random(1));  ArrayList<LocalizableMessage> warnings=new ArrayList<>();  template.parse(templatePath,warnings);  makeLdif(ldifPath,template);}  }
class C{  public String generatePassword(AMIdentity user) throws PWResetException {  StringBuilder buf=new StringBuilder(PASSWORD_LENGTH);  for (int i=0; i < PASSWORD_LENGTH; i++) {    int nextNum=rnd.nextInt(SIZE);    Integer value=values.get(nextNum);    int num=value.intValue();    if (num < NUMBERS_RANGE) {      buf.append(String.valueOf(num));    } else {      char c=(char)num;      buf.append(String.valueOf(c));    }  }  return buf.toString();}  }
class C{  @JsonIgnore public Boolean hasNativeType(){  return nativeType != null;}  }
class C{  public void printStackTrace(){  super.printStackTrace();}  }
class C{  public void popContext(){  contexts[contextPos].clear();  contextPos--;  if (contextPos < 0) {    throw new EmptyStackException();  }  currentContext=contexts[contextPos];}  }
class C{  private void encipher(int lr[],int off){  int i, n, l=lr[off], r=lr[off + 1];  l^=P[0];  for (i=0; i <= BLOWFISH_NUM_ROUNDS - 2; ) {    n=S[(l >> 24) & 0xff];    n+=S[0x100 | ((l >> 16) & 0xff)];    n^=S[0x200 | ((l >> 8) & 0xff)];    n+=S[0x300 | (l & 0xff)];    r^=n ^ P[++i];    n=S[(r >> 24) & 0xff];    n+=S[0x100 | ((r >> 16) & 0xff)];    n^=S[0x200 | ((r >> 8) & 0xff)];    n+=S[0x300 | (r & 0xff)];    l^=n ^ P[++i];  }  lr[off]=r ^ P[BLOWFISH_NUM_ROUNDS + 1];  lr[off + 1]=l;}  }
class C{  public void test_read_writeUTF() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeUTF(unihw);  raf.seek(0);  assertEquals("Test 1: Incorrect UTF string written or read;",unihw,raf.readUTF());  try {    raf.readUTF();    fail("Test 2: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeUTF("Already closed.");    fail("Test 3: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readUTF();    fail("Test 4: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public void paintScrollBarThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public List<PdfObject> subList(int fromIndex,int toIndex){  return list.subList(fromIndex,toIndex);}  }
class C{  private void updateAttribute(String name,String value,boolean addQuotes){  failIfDeleted();  ArrayList attributes=getAttributes();  if (attributes == null) {    attributes=new ArrayList();  }  boolean found=false;  for (int i=0; i < attributes.size(); i++) {    XMLElementAttribute attr=(XMLElementAttribute)attributes.get(i);    if (attr.getName().equals(name)) {      if (addQuotes) {        attr.setValue("\"" + value + "\"");      } else {        attr.setValue(value);      }      found=true;    }  }  if (!found) {    String attrValue=null;    if (value.startsWith("\"") && value.endsWith("\"")) {      attrValue=value;    } else {      attrValue="\"" + value + "\"";    }    attributes.add(new XMLElementAttribute(name,attrValue));  }  setAttributes(attributes);  updateAttributeStrings();}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  public static String postRequest(String url,String postData,String encoding,String contentType,int readTimeout,int socketTimeout){  try {    return postRequest(new URL(url),postData,encoding,contentType,readTimeout,socketTimeout);  } catch (  MalformedURLException ex) {    LOG.error("Error posting request to {}, post data length={}",url,StringUtils.length(postData),ex);    return null;  }}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeTemplates(this);}  }
class C{  public SDPAnnounceParser(Vector sdpMessage){  this.sdpMessage=sdpMessage;}  }
class C{  @Override public ConnectionChangeRecordWriter writeChangeRecord(final DeleteRequest change) throws LdapException {  Reject.ifNull(change);  connection.delete(change);  return this;}  }
class C{  boolean isConnected(){  return !(channel instanceof SocketChannel) || ((SocketChannel)channel).isConnected();}  }
class C{  protected boolean isImageWrapCropBounds(){  return isImageWrapCropBounds(mCurrentImageCorners);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  serveResource(request,response,true,fileEncoding);}  }
class C{  private void cutout_route(){  if (corner1 == null || corner2 == null) {    return;  }  r_brd.generate_snapshot();  PlaPointInt p1=corner1.round();  PlaPointInt p2=corner2.round();  ShapeTileBox cut_box=new ShapeTileBox(Math.min(p1.v_x,p2.v_x),Math.min(p1.v_y,p2.v_y),Math.max(p1.v_x,p2.v_x),Math.max(p1.v_y,p2.v_y));  Set<Integer> changed_nets=new TreeSet<Integer>();  for (  BrdTracep curr_trace : trace_list) {    board.algo.AlgoShoveTraceEntries.cutout_trace(curr_trace,cut_box,0);    for (int i=0; i < curr_trace.net_count(); ++i) {      changed_nets.add(curr_trace.get_net_no(i));    }  }  for (  Integer changed_net : changed_nets) {    i_brd.update_ratsnest(changed_net);  }}  }
class C{  protected Rectangle computePopupBounds(int px,int py,int pw,int ph){  Toolkit toolkit=Toolkit.getDefaultToolkit();  Rectangle screenBounds;  GraphicsConfiguration gc=comboBox.getGraphicsConfiguration();  Point p=new Point();  SwingUtilities.convertPointFromScreen(p,comboBox);  if (gc != null) {    Insets screenInsets=toolkit.getScreenInsets(gc);    screenBounds=gc.getBounds();    screenBounds.width-=(screenInsets.left + screenInsets.right);    screenBounds.height-=(screenInsets.top + screenInsets.bottom);    screenBounds.x+=(p.x + screenInsets.left);    screenBounds.y+=(p.y + screenInsets.top);  } else {    screenBounds=new Rectangle(p,toolkit.getScreenSize());  }  Rectangle rect=new Rectangle(px,py,pw,ph);  if (py + ph > screenBounds.y + screenBounds.height && ph < screenBounds.height) {    rect.y=-rect.height;  }  return rect;}  }
class C{  static ReplayPromise<Float> replayPromiseFloat(final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public OutputStreamWriter(OutputStream out,Charset cs){  super(out);  if (cs == null)   throw new NullPointerException("charset");  se=StreamEncoder.forOutputStreamWriter(out,this,cs);}  }
class C{  public Comparator(BlockFace facingDirection,boolean isSubtraction,boolean state){  super(state ? Material.REDSTONE_COMPARATOR_ON : Material.REDSTONE_COMPARATOR_OFF);  setFacingDirection(facingDirection);  setSubtractionMode(isSubtraction);}  }
class C{  public void put(String name,String supported,String authScheme,String level,boolean isDefault){  SAMLv2AuthContext c=new SAMLv2AuthContext();  c.name=name;  c.supported=supported;  if (authScheme.length() != 0 && authScheme != null) {    int index=authScheme.lastIndexOf("=");    c.value=authScheme.substring(index + 1);    c.key=authScheme.substring(0,index);  } else {    c.value="";    c.key="";  }  c.level=level;  c.isDefault=isDefault;  collections.put(name,c);}  }
class C{  public String matchByFirstCommonWordSequence(String... names){  if (names.length < 2) {    throw new IllegalArgumentException("Can't match common sequence from less than two names");  }  return commonSequenceMatcher.matchFirstCommonSequence(names);}  }
class C{  private E xfer(E e,boolean haveData,int how,long nanos){  if (haveData && (e == null))   throw new NullPointerException();  Node s=null;  retry:   for (; ; ) {    for (Node h=head, p=h; p != null; ) {      boolean isData=p.isData;      Object item=p.item;      if (item != p && (item != null) == isData) {        if (isData == haveData)         break;        if (p.casItem(item,e)) {          for (Node q=p; q != h; ) {            Node n=q.next;            if (head == h && casHead(h,n == null ? q : n)) {              h.forgetNext();              break;            }            if ((h=head) == null || (q=h.next) == null || !q.isMatched())             break;          }          LockSupport.unpark(p.waiter);          return LinkedTransferQueue.<E>cast(item);        }      }      Node n=p.next;      p=(p != n) ? n : (h=head);    }    if (how != NOW) {      if (s == null)       s=new Node(e,haveData);      Node pred=tryAppend(s,haveData);      if (pred == null)       continue retry;      if (how != ASYNC)       return awaitMatch(s,pred,e,(how == TIMED),nanos);    }    return e;  }}  }
class C{  public DatatypeConfigurationException(Throwable cause){  super(cause);}  }
class C{  public SignerInformationStore generateCounterSigners(SignerInformation signer,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  return this.generate(null,new CMSProcessableByteArray(signer.getSignature()),false,sigProvider).getSignerInfos();}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  debug.message("SAE AuthModule.process...");  HttpServletRequest req=getHttpServletRequest();  if (req == null) {    debug.error("SAE AuthModule.process: httprequest is null.");    throw new AuthLoginException("HttpServletRequest is null");  }  String encodedString=req.getParameter(SecureAttrs.SAE_PARAM_DATA);  if (debug.messageEnabled()) {    debug.message("SAE AuthModule.process+encodedStr=" + encodedString);  }  String realm=req.getParameter(SAML2Constants.SAE_REALM);  String idpEntityId=req.getParameter(SAML2Constants.SAE_IDP_ENTITYID);  String idpAppUrl=req.getParameter(SAML2Constants.SAE_IDPAPP_URL);  debug.message("SAE AuthModule.SAML2Utils.getSAEAttrs");  Map saeattrs=SAML2Utils.getSAEAttrs(realm,idpEntityId,SAML2Constants.IDP_ROLE,idpAppUrl);  if (saeattrs == null) {    debug.error("SAE AuthModule.process:get SAE Attrs failed:null.");    throw new AuthLoginException("SAE config Attributes are null");  }  String cryptoType=(String)saeattrs.get(SecureAttrs.SAE_CRYPTO_TYPE);  String encryptAlg=(String)saeattrs.get(SecureAttrs.SAE_CONFIG_DATA_ENCRYPTION_ALG);  String encryptStrength=(String)saeattrs.get(SecureAttrs.SAE_CONFIG_ENCRYPTION_KEY_STRENGTH);  String saekey=null;  String saeprivatekey=null;  if ("symmetric".equals(cryptoType)) {    saekey=(String)saeattrs.get(SecureAttrs.SAE_CONFIG_SHARED_SECRET);    saeprivatekey=saekey;  } else   if ("asymmetric".equals(cryptoType)) {    saekey=(String)saeattrs.get(SecureAttrs.SAE_CONFIG_PUBLIC_KEY_ALIAS);    saeprivatekey=(String)saeattrs.get(SecureAttrs.SAE_CONFIG_PRIVATE_KEY_ALIAS);  }  if (debug.messageEnabled()) {    debug.message("SAE AuthModule: realm=" + realm + ", idpEntityID="+ idpEntityId+ ", idpAppUrl="+ idpAppUrl+ ", cryptoType="+ cryptoType+ ", key="+ saekey);  }  Map attrs=null;  try {    String saInstanceName=cryptoType + "_" + encryptAlg+ "_"+ encryptStrength;    SecureAttrs sa=SecureAttrs.getInstance(saInstanceName);    if (sa == null) {      Properties prop=new Properties();      prop.setProperty(SecureAttrs.SAE_CONFIG_CERT_CLASS,"com.sun.identity.sae.api.FMCerts");      if (encryptAlg != null) {        prop.setProperty(SecureAttrs.SAE_CONFIG_DATA_ENCRYPTION_ALG,encryptAlg);      }      if (encryptStrength != null) {        prop.setProperty(SecureAttrs.SAE_CONFIG_ENCRYPTION_KEY_STRENGTH,encryptStrength);      }      SecureAttrs.init(saInstanceName,cryptoType,prop);      sa=SecureAttrs.getInstance(saInstanceName);    }    attrs=sa.verifyEncodedString(encodedString,saekey,saeprivatekey);    if (debug.messageEnabled())     debug.message("SAE AuthModule.: SAE attrs:" + attrs);  } catch (  Exception ex) {    debug.error("SAE AuthModule.process: verification failed.",ex);    throw new AuthLoginException("verify failed");  }  if (attrs == null) {    debug.error("SAE AuthModule.process:verification failed:attrs null.");    throw new AuthLoginException("Attributes are null");  }  userTokenId=(String)attrs.get(SecureAttrs.SAE_PARAM_USERID);  Iterator iter=attrs.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry entry=(Map.Entry)iter.next();    String key=(String)entry.getKey();    String value=(String)entry.getValue();    if (key.equals(SecureAttrs.SAE_PARAM_USERID)) {      continue;    }    if (debug.messageEnabled()) {      debug.message("Session Property set: " + key + "= "+ value);    }    setUserSessionProperty(key,value);  }  String authLevel=(String)attrs.get(SecureAttrs.SAE_PARAM_AUTHLEVEL);  int authLevelInt=DEFAULT_AUTH_LEVEL;  if (authLevel != null && authLevel.length() != 0) {    try {      authLevelInt=Integer.parseInt(authLevel);    } catch (    Exception e) {      debug.error("Unable to parse auth level " + authLevel + ". Using default.",e);      authLevelInt=DEFAULT_AUTH_LEVEL;    }  }  if (debug.messageEnabled()) {    debug.message("SAE AuthModule: auth level = " + authLevelInt);  }  setAuthLevel(authLevelInt);  debug.message("SAE AuthModule:return SUCCESS");  return ISAuthConstants.LOGIN_SUCCEED;}  }
class C{  public LibPackage(String p_name,int p_no,LibPackagePin[] p_pin_arr,PlaShape[] p_outline,DsnPackageKeepout[] p_keepout_arr,DsnPackageKeepout[] p_via_keepout_arr,DsnPackageKeepout[] p_place_keepout_arr,boolean p_is_front,LibPackages p_package_list){  pkg_name=p_name;  pkg_no=p_no;  pin_arr=p_pin_arr;  keepout_arr=p_keepout_arr;  via_keepout_arr=p_via_keepout_arr;  place_keepout_arr=p_place_keepout_arr;  is_front=p_is_front;  parent_package_list=p_package_list;  outline_shapes=new ArrayList<PlaShape>(p_outline.length);  for (int index=0; index < p_outline.length; index++)   outline_shapes.add(p_outline[index]);}  }
class C{  public Dimension preferredLayoutSize(Container parent){  JScrollPane scrollPane=(JScrollPane)parent;  vsbPolicy=scrollPane.getVerticalScrollBarPolicy();  hsbPolicy=scrollPane.getHorizontalScrollBarPolicy();  Insets insets=parent.getInsets();  int prefWidth=insets.left + insets.right;  int prefHeight=insets.top + insets.bottom;  Dimension extentSize=null;  Dimension viewSize=null;  Component view=null;  if (viewport != null) {    extentSize=viewport.getPreferredSize();    view=viewport.getView();    if (view != null) {      viewSize=view.getPreferredSize();    } else {      viewSize=new Dimension(0,0);    }  }  if (extentSize != null) {    prefWidth+=extentSize.width;    prefHeight+=extentSize.height;  }  Border viewportBorder=scrollPane.getViewportBorder();  if (viewportBorder != null) {    Insets vpbInsets=viewportBorder.getBorderInsets(parent);    prefWidth+=vpbInsets.left + vpbInsets.right;    prefHeight+=vpbInsets.top + vpbInsets.bottom;  }  if ((rowHead != null) && rowHead.isVisible()) {    prefWidth+=rowHead.getPreferredSize().width;  }  if ((colHead != null) && colHead.isVisible()) {    prefHeight+=colHead.getPreferredSize().height;  }  if ((vsb != null) && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {    if (vsbPolicy == VERTICAL_SCROLLBAR_ALWAYS) {      prefWidth+=vsb.getPreferredSize().width;    } else     if ((viewSize != null) && (extentSize != null)) {      boolean canScroll=true;      if (view instanceof Scrollable) {        canScroll=!((Scrollable)view).getScrollableTracksViewportHeight();      }      if (canScroll && (viewSize.height > extentSize.height)) {        prefWidth+=vsb.getPreferredSize().width;      }    }  }  if ((hsb != null) && (hsbPolicy != HORIZONTAL_SCROLLBAR_NEVER)) {    if (hsbPolicy == HORIZONTAL_SCROLLBAR_ALWAYS) {      prefHeight+=hsb.getPreferredSize().height;    } else     if ((viewSize != null) && (extentSize != null)) {      boolean canScroll=true;      if (view instanceof Scrollable) {        canScroll=!((Scrollable)view).getScrollableTracksViewportWidth();      }      if (canScroll && (viewSize.width > extentSize.width)) {        prefHeight+=hsb.getPreferredSize().height;      }    }  }  return new Dimension(prefWidth,prefHeight);}  }
class C{  private <T extends PasswordValidatorCfg>PasswordValidator<T> loadValidator(String className,T configuration,boolean initialize) throws InitializationException {  try {    PasswordValidatorCfgDefn definition=PasswordValidatorCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends PasswordValidator> validatorClass=propertyDefinition.loadClass(className,PasswordValidator.class);    PasswordValidator<T> validator=validatorClass.newInstance();    if (initialize) {      validator.initializePasswordValidator(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!validator.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_PWVALIDATOR_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));      }    }    return validator;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_PWVALIDATOR_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public LDAPSearchOptions(){}  }
class C{  @Override public void processChallenge(final Header header) throws MalformedChallengeException {  super.processChallenge(header);  this.complete=true;}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  super.endElement(handler,uri,localName,rawName);  handler.popElemTemplateElement();  handler.popStylesheet();}  }
class C{  public boolean isObjectModelSupported(String objectModel){  if (objectModel == null) {    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_OBJECT_MODEL_NULL,new Object[]{this.getClass().getName()});    throw new NullPointerException(fmsg);  }  if (objectModel.length() == 0) {    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_OBJECT_MODEL_EMPTY,new Object[]{this.getClass().getName()});    throw new IllegalArgumentException(fmsg);  }  if (objectModel.equals(XPathFactory.DEFAULT_OBJECT_MODEL_URI)) {    return true;  }  return false;}  }
class C{  public void error(String msg,Object[] args) throws TransformerException {  java.lang.String fmsg=XSLMessages.createXPATHMessage(msg,args);  if (null != m_errorHandler) {    m_errorHandler.fatalError(new TransformerException(fmsg,m_locator));  } else {    throw new TransformerException(fmsg,(SAXSourceLocator)m_locator);  }}  }
class C{  public Value parseInsFromVariableDef(VariableDef variableDef,SemanticScope scope) throws SyntaxException {  List<Import> imports=fileNameToImport.get(variableDef.line_col().fileName);  STypeDef type=variableDef.getType() == null ? getTypeWithName("java.lang.Object",variableDef.line_col()) : getTypeWithAccess(variableDef.getType(),imports);  STypeDef rawType=type;  SFieldDef field=findFieldFromTypeDef(variableDef.getName(),scope.type(),scope.type(),scope.getThis() == null ? FIND_MODE_STATIC : FIND_MODE_ANY,false);  boolean isLocalVar=false;  if (field == null) {    if (scope.getLeftValue(variableDef.getName()) == null) {      isLocalVar=true;    } else {      err.SyntaxException(variableDef.getName() + " is already defined",variableDef.line_col());      return null;    }  }  if (variableDef.getInit() != null || isLocalVar) {    boolean nonnull=false;    boolean nonempty=false;    Value v;    ValuePack pack=new ValuePack(true);    if (isLocalVar) {      boolean canChange=true;      for (      Modifier m : variableDef.getModifiers()) {        if (m.modifier.equals(Modifier.Available.VAL)) {          canChange=false;        } else         if (m.modifier.equals(Modifier.Available.NONNULL)) {          nonnull=true;        } else         if (m.modifier.equals(Modifier.Available.NONEMPTY)) {          nonempty=true;        } else         if (!m.modifier.equals(Modifier.Available.VAR)) {          err.SyntaxException("invalid modifier for local variable " + m.modifier.name().toLowerCase(),m.line_col());        }      }      AST.Access typeAccess=variableDef.getType();      type=getTypeWithAccess(new AST.Access(typeAccess,"*",typeAccess == null ? LineCol.SYNTHETIC : typeAccess.line_col()),imports);      LocalVariable localVariable=new LocalVariable(type,canChange);      scope.putLeftValue(variableDef.getName(),localVariable);      Ins.TStore storePtr=new Ins.TStore(localVariable,constructPointer(nonnull,nonempty),scope,LineCol.SYNTHETIC,err);      pack.instructions().add(storePtr);    }    if (variableDef.getInit() == null) {      if (rawType instanceof PrimitiveTypeDef) {        if (rawType instanceof IntTypeDef) {          v=new IntValue(0);        } else         if (rawType instanceof ShortTypeDef || rawType instanceof ByteTypeDef) {          v=new ValueAnotherType(type,new IntValue(0),LineCol.SYNTHETIC);        } else         if (rawType instanceof LongTypeDef) {          v=new LongValue(0);        } else         if (rawType instanceof FloatTypeDef) {          v=new FloatValue(0);        } else         if (rawType instanceof DoubleTypeDef) {          v=new DoubleValue(0);        } else         if (rawType instanceof BoolTypeDef) {          v=new BoolValue(false);        } else         if (rawType instanceof CharTypeDef) {          v=new CharValue((char)0);        } else         throw new LtBug("unknown primitive type " + type);      } else {        v=NullValue.get();      }    } else {      v=parseValueFromExpression(variableDef.getInit(),rawType,scope);    }    if (null != field) {      if (field.modifiers().contains(SModifier.STATIC)) {        pack.instructions().add(new Ins.PutStatic(field,v,variableDef.line_col(),err));        Ins.GetStatic getStatic=new Ins.GetStatic(field,variableDef.line_col());        pack.instructions().add(getStatic);      } else {        pack.instructions().add(new Ins.PutField(field,scope.getThis(),v,variableDef.line_col(),err));        Ins.GetField getField=new Ins.GetField(field,scope.getThis(),variableDef.line_col());        pack.instructions().add(getField);      }    } else {      assert isPointerType(type);      LocalVariable localVariable=(LocalVariable)scope.getLeftValue(variableDef.getName());      Ins.InvokeVirtual invokeSet=invokePointerSet(new Ins.TLoad(localVariable,scope,LineCol.SYNTHETIC),v,variableDef.line_col());      pack.instructions().add(invokeSet);      Value get=invokePointerGet(new Ins.TLoad(localVariable,scope,variableDef.line_col()),variableDef.line_col());      pack.instructions().add((Instruction)get);      localVariable.alreadyAssigned();      if (!localVariable.canChange()) {        PointerType tmp=new PointerType(v.type());        if (types.containsKey(tmp.toString())) {          tmp=(PointerType)types.get(tmp.toString());        } else {          types.put(tmp.toString(),tmp);        }        localVariable.setType(tmp);      }    }    return pack;  }  return null;}  }
class C{  public static boolean isIPv6(String ipAddress){  if (ipAddress == null || ipAddress.isEmpty()) {    return false;  }  Matcher ipv6Matcher=IP_V6_PATTERN.matcher(ipAddress);  return ipv6Matcher.find();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SamlTokenElement createSamlTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SamlTokenElementImpl();}  }
class C{  private ConsulResponse<List<ConsulService>> lookupConsulService(String serviceName,Long lastConsulIndexId){  ConsulResponse<List<ConsulService>> response=client.lookupHealthService(ConsulUtils.convertGroupToServiceName(serviceName),lastConsulIndexId);  return response;}  }
class C{  public TokenOperationsStore(){  this(new OperationStoreFactory(),new HashMap<TokenType,OperationStore>(),new OperationStore(),new OperationStore());}  }
class C{  public void push(final double value){  long bits=Double.doubleToLongBits(value);  if (bits == 0L || bits == 0x3ff0000000000000L) {    mv.visitInsn(Opcodes.DCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatainsertdatamiddle.class,args);}  }
class C{  public void start(int scenario){  this.scenario=scenario;  if (scenario == SENDER_RS_SCENARIO) {    return;  }  start();}  }
class C{  public int length(){  return size();}  }
class C{  public void execute(java.security.Principal principal,PersistentObject pObject,Guid pGUID) throws UMSException {  String className;  HashMap hm=null;  Set set=null;  Iterator iter=null;  Attr attr=null;  AttrSet attrSet=null;  String[] attrValues;  if (pObject == null) {    String msg=i18n.getString(IUMSConstants.PERSISTENT_OBJECT_PARAM_NULL);    throw new UMSException(msg);  }  _principal=principal;  _pObject=pObject;  _stack=new Stack();  className=_pObject.getClass().getName();  _parentObject=_pObject;  if (debug.messageEnabled()) {    debug.message("GETTING ENTITY FOR:CLASS:" + className + ",PARENT:"+ pGUID.getDn());  }  try {    set=_configManager.getEntity(pGUID,className);    if (!set.isEmpty()) {      if (set.size() > 1) {        attrSet=findEntity(_pObject,set);      } else {        Iterator it=set.iterator();        if (it.hasNext())         attrSet=(AttrSet)it.next();      }    } else     return;    if (attrSet == null) {      String args[]=new String[1];      args[0]=className;      String msg=i18n.getString(IUMSConstants.STRUCTURE_TEMPLATE_ATTRSET_NULL,args);      throw new UMSException(msg);    }  } catch (  ConfigManagerException cme) {    String args[]=new String[1];    args[0]=cme.getMessage();    String msg=i18n.getString(IUMSConstants.CONFIG_MGR_ERROR,args);    throw new UMSException(msg);  }  if (debug.messageEnabled()) {    debug.message("ENTITY ATTRSET:" + attrSet);  }  attr=attrSet.getAttribute(ENTITY_CHILDNODE);  if (attr == null) {    return;  }  attrValues=attr.getStringValues();  for (int i=0; i < attrValues.length; i++) {    hm=new HashMap();    hm.put(attrValues[i],_parentObject.getGuid());    _stack.push(hm);  }  while (!_stack.empty()) {    hm=(HashMap)_stack.pop();    set=hm.keySet();    iter=set.iterator();    String childNodeName=(String)iter.next();    Guid parentGuid=(Guid)hm.get(childNodeName);    try {      Set childSet=_configManager.getEntity(pGUID,childNodeName);      if (!childSet.isEmpty()) {        iter=childSet.iterator();        if (iter.hasNext())         attrSet=(AttrSet)iter.next();      }      if (childSet.isEmpty() | attrSet == null)       return;    } catch (    ConfigManagerException cme) {      String args[]=new String[1];      args[0]=cme.getMessage();      String msg=i18n.getString(IUMSConstants.CONFIG_MGR_ERROR,args);      throw new UMSException(msg);    }    PersistentObject pObj=createObject(attrSet,parentGuid,pGUID);    attr=attrSet.getAttribute(ENTITY_CHILDNODE);    if (attr != null) {      attrValues=attr.getStringValues();      for (int j=0; j < attrValues.length; j++) {        hm=new HashMap();        hm.put(attrValues[j],pObj.getGuid());        _stack.push(hm);      }    }  }}  }
class C{  public ServerSideSortRequestControl(boolean isCritical,String sortOrderString) throws LDAPException {  super(OID_SERVER_SIDE_SORT_REQUEST_CONTROL,isCritical);  StringTokenizer tokenizer=new StringTokenizer(sortOrderString,",");  decodedKeyList=new ArrayList<>();  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken().trim();    boolean reverseOrder=false;    if (token.startsWith("-")) {      reverseOrder=true;      token=token.substring(1);    } else     if (token.startsWith("+")) {      token=token.substring(1);    }    int colonPos=token.indexOf(':');    if (colonPos < 0) {      if (token.length() == 0) {        LocalizableMessage message=INFO_SORTREQ_CONTROL_NO_ATTR_NAME.get(sortOrderString);        throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);      }      if (reverseOrder) {        decodedKeyList.add(new String[]{token,null,"r"});      } else {        decodedKeyList.add(new String[]{token,null,null});      }    } else     if (colonPos == 0) {      LocalizableMessage message=INFO_SORTREQ_CONTROL_NO_ATTR_NAME.get(sortOrderString);      throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);    } else     if (colonPos == (token.length() - 1)) {      LocalizableMessage message=INFO_SORTREQ_CONTROL_NO_MATCHING_RULE.get(sortOrderString);      throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);    } else {      String attrName=token.substring(0,colonPos);      String ruleID=token.substring(colonPos + 1);      if (reverseOrder) {        decodedKeyList.add(new String[]{attrName,ruleID,"r"});      } else {        decodedKeyList.add(new String[]{attrName,ruleID,null});      }    }  }  if (decodedKeyList.isEmpty()) {    LocalizableMessage message=INFO_SORTREQ_CONTROL_NO_SORT_KEYS.get();    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);  }}  }
class C{  public LockManager(){  this(DEFAULT_LOCK_TIMEOUT,DEFAULT_LOCK_TIMEOUT_UNITS);}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.WEST;  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=0.0;  gbc.gridwidth=1;  gbc.fill=GridBagConstraints.NONE;  dnLabel=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_BIND_DN_LABEL.get());  add(dnLabel,gbc);  gbc.insets.left=10;  gbc.gridx=1;  dn=Utilities.createTextField("cn=Directory Manager",20);  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  add(dn,gbc);  gbc.insets.top=10;  gbc.insets.left=0;  gbc.gridx=0;  gbc.gridy++;  gbc.weightx=0.0;  gbc.gridwidth=1;  gbc.fill=GridBagConstraints.NONE;  pwdLabel=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_BIND_PASSWORD_LABEL.get());  add(pwdLabel,gbc);  gbc.insets.left=10;  gbc.gridx=1;  pwd=Utilities.createPasswordField();  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  add(pwd,gbc);  addBottomGlue(gbc);}  }
class C{  @Override public void addLifecycleListener(LifecycleListener listener){}  }
class C{  public void animateBgAlpha(float finalAlpha,int duration){  int finalAlphaI=(int)(finalAlpha * 255f);  if (getAlpha() != finalAlphaI) {    mBackgroundAnim=cancelAnimator(mBackgroundAnim);    mBackgroundAnim=ObjectAnimator.ofInt(this,"alpha",finalAlphaI);    mBackgroundAnim.setDuration(duration);    mBackgroundAnim.start();  }}  }
class C{  public XMLDecoder(InputStream in,Object owner,ExceptionListener exceptionListener,ClassLoader cl){  this(new InputSource(in),owner,exceptionListener,cl);}  }
class C{  public void testAlgorithmParameterGenerator06() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  AlgorithmParameterGenerator apg;  for (int i=0; i < algs.length; i++) {    apg=AlgorithmParameterGenerator.getInstance(algs[i],validProviderName);    assertEquals("Incorrect algorithm",algs[i],apg.getAlgorithm());    assertEquals("Incorrect provider",apg.getProvider().getName(),validProviderName);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  NodeList elementList;  String attrName;  String attrValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(0);  element.setAttributeNS("http://www.w3.org/DOM/Test/setAttributeNS","this:street","Silver Street");  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/setAttributeNS","street");  attrName=attribute.getNodeName();  attrValue=attribute.getNodeValue();  assertEquals("elementsetattributens02_attrName","this:street",attrName);  assertEquals("elementsetattributens02_attrValue","Silver Street",attrValue);}  }
class C{  public void deleteEntry(final DN dn) throws DirectoryException {  if (!backend.contains(dn)) {    throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,ERR_CONFIG_FILE_DELETE_NO_SUCH_ENTRY.get(dn),getMatchedDN(dn),null);  }  try {    if (!getChildren(dn).isEmpty()) {      throw new DirectoryException(ResultCode.NOT_ALLOWED_ON_NONLEAF,ERR_CONFIG_FILE_DELETE_HAS_CHILDREN.get(dn));    }  } catch (  ConfigException e) {    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,ERR_CONFIG_BACKEND_CANNOT_DELETE_ENTRY.get(stackTraceToSingleLineString(e)),e);  }  final DN parentDN=retrieveParentDNForDelete(dn);  final List<ConfigDeleteListener> deleteListeners=getDeleteListeners(parentDN);  final LocalizableMessageBuilder unacceptableReason=new LocalizableMessageBuilder();  final Entry entry=backend.get(dn);  for (  final ConfigDeleteListener listener : deleteListeners) {    if (!listener.configDeleteIsAcceptable(entry,unacceptableReason)) {      throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,ERR_CONFIG_FILE_DELETE_REJECTED_BY_LISTENER.get(entry,parentDN,unacceptableReason));    }  }  final ConfigLdapResultHandler resultHandler=new ConfigLdapResultHandler();  backend.handleDelete(UNCANCELLABLE_REQUEST_CONTEXT,Requests.newDeleteRequest(dn),null,resultHandler);  listeners.remove(dn);  if (!resultHandler.hasCompletedSuccessfully()) {    LdapException ex=resultHandler.getResultError();    throw new DirectoryException(ex.getResult().getResultCode(),ERR_CONFIG_FILE_DELETE_FAILED.get(dn,parentDN,ex.getLocalizedMessage()),ex);  }  writeUpdatedConfig();  final ConfigChangeResult ccr=new ConfigChangeResult();  for (  final ConfigDeleteListener listener : deleteListeners) {    final ConfigChangeResult result=listener.applyConfigurationDelete(entry);    ccr.aggregate(result);    handleConfigChangeResult(result,dn,listener.getClass().getName(),"applyConfigurationDelete");  }  if (ccr.getResultCode() != ResultCode.SUCCESS) {    final String reasons=Utils.joinAsString(".  ",ccr.getMessages());    throw new DirectoryException(ccr.getResultCode(),ERR_CONFIG_FILE_DELETE_APPLY_FAILED.get(reasons));  }}  }
class C{  private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  public Enumeration elements(){  debug.message("ISPermissionCollection::calling elements....");  if (debug.messageEnabled()) {    for (Enumeration e=perms.elements(); e.hasMoreElements(); ) {      debug.message("ISPC::perms::" + e.nextElement().toString());    }  }  return perms.elements();}  }
class C{  public boolean readChunk() throws IOException {  int numComments=Utils.readUint16(raf);  for (int i=0; i < numComments; i++) {    long timestamp=Utils.readUint32(raf);    Date jTimestamp=AiffUtil.timestampToDate(timestamp);    int marker=Utils.readInt16(raf);    int count=Utils.readUint16(raf);    bytesLeft-=8;    byte[] buf=new byte[count];    raf.read(buf);    bytesLeft-=count;    String cmt=new String(buf);    cmt+=" " + AiffUtil.formatDate(jTimestamp);    aiffHeader.addComment(cmt);  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue09.class,args);}  }
class C{  public boolean merge(Set<WebXml> fragments){  WebXml temp=new WebXml();  for (  WebXml fragment : fragments) {    if (!mergeMap(fragment.getContextParams(),contextParams,temp.getContextParams(),fragment,"Context Parameter")) {      return false;    }  }  contextParams.putAll(temp.getContextParams());  if (displayName == null) {    for (    WebXml fragment : fragments) {      String value=fragment.getDisplayName();      if (value != null) {        if (temp.getDisplayName() == null) {          temp.setDisplayName(value);        } else {          log.error(sm.getString("webXml.mergeConflictDisplayName",fragment.getName(),fragment.getURL()));          return false;        }      }    }    displayName=temp.getDisplayName();  }  if (!denyUncoveredHttpMethods) {    for (    WebXml fragment : fragments) {      if (fragment.getDenyUncoveredHttpMethods()) {        denyUncoveredHttpMethods=true;        break;      }    }  }  if (distributable) {    for (    WebXml fragment : fragments) {      if (!fragment.isDistributable()) {        distributable=false;        break;      }    }  }  for (  WebXml fragment : fragments) {    if (!mergeResourceMap(fragment.getEjbLocalRefs(),ejbLocalRefs,temp.getEjbLocalRefs(),fragment)) {      return false;    }  }  ejbLocalRefs.putAll(temp.getEjbLocalRefs());  for (  WebXml fragment : fragments) {    if (!mergeResourceMap(fragment.getEjbRefs(),ejbRefs,temp.getEjbRefs(),fragment)) {      return false;    }  }  ejbRefs.putAll(temp.getEjbRefs());  for (  WebXml fragment : fragments) {    if (!mergeResourceMap(fragment.getEnvEntries(),envEntries,temp.getEnvEntries(),fragment)) {      return false;    }  }  envEntries.putAll(temp.getEnvEntries());  for (  WebXml fragment : fragments) {    if (!mergeMap(fragment.getErrorPages(),errorPages,temp.getErrorPages(),fragment,"Error Page")) {      return false;    }  }  errorPages.putAll(temp.getErrorPages());  List<FilterMap> filterMapsToAdd=new ArrayList<>();  for (  WebXml fragment : fragments) {    for (    FilterMap filterMap : fragment.getFilterMappings()) {      if (!filterMappingNames.contains(filterMap.getFilterName())) {        filterMapsToAdd.add(filterMap);      }    }  }  for (  FilterMap filterMap : filterMapsToAdd) {    addFilterMapping(filterMap);  }  for (  WebXml fragment : fragments) {    for (    Map.Entry<String,FilterDef> entry : fragment.getFilters().entrySet()) {      if (filters.containsKey(entry.getKey())) {        mergeFilter(entry.getValue(),filters.get(entry.getKey()),false);      } else {        if (temp.getFilters().containsKey(entry.getKey())) {          if (!(mergeFilter(entry.getValue(),temp.getFilters().get(entry.getKey()),true))) {            log.error(sm.getString("webXml.mergeConflictFilter",entry.getKey(),fragment.getName(),fragment.getURL()));            return false;          }        } else {          temp.getFilters().put(entry.getKey(),entry.getValue());        }      }    }  }  filters.putAll(temp.getFilters());  for (  WebXml fragment : fragments) {    for (    JspPropertyGroup jspPropertyGroup : fragment.getJspPropertyGroups()) {      addJspPropertyGroup(jspPropertyGroup);    }  }  for (  WebXml fragment : fragments) {    for (    String listener : fragment.getListeners()) {      addListener(listener);    }  }  for (  WebXml fragment : fragments) {    if (!mergeMap(fragment.getLocaleEncodingMappings(),localeEncodingMappings,temp.getLocaleEncodingMappings(),fragment,"Locale Encoding Mapping")) {      return false;    }  }  localeEncodingMappings.putAll(temp.getLocaleEncodingMappings());  if (getLoginConfig() == null) {    LoginConfig tempLoginConfig=null;    for (    WebXml fragment : fragments) {      LoginConfig fragmentLoginConfig=fragment.loginConfig;      if (fragmentLoginConfig != null) {        if (tempLoginConfig == null || fragmentLoginConfig.equals(tempLoginConfig)) {          tempLoginConfig=fragmentLoginConfig;        } else {          log.error(sm.getString("webXml.mergeConflictLoginConfig",fragment.getName(),fragment.getURL()));        }      }    }    loginConfig=tempLoginConfig;  }  for (  WebXml fragment : fragments) {    if (!mergeResourceMap(fragment.getMessageDestinationRefs(),messageDestinationRefs,temp.getMessageDestinationRefs(),fragment)) {      return false;    }  }  messageDestinationRefs.putAll(temp.getMessageDestinationRefs());  for (  WebXml fragment : fragments) {    if (!mergeResourceMap(fragment.getMessageDestinations(),messageDestinations,temp.getMessageDestinations(),fragment)) {      return false;    }  }  messageDestinations.putAll(temp.getMessageDestinations());  for (  WebXml fragment : fragments) {    if (!mergeMap(fragment.getMimeMappings(),mimeMappings,temp.getMimeMappings(),fragment,"Mime Mapping")) {      return false;    }  }  mimeMappings.putAll(temp.getMimeMappings());  for (  WebXml fragment : fragments) {    if (!mergeResourceMap(fragment.getResourceEnvRefs(),resourceEnvRefs,temp.getResourceEnvRefs(),fragment)) {      return false;    }  }  resourceEnvRefs.putAll(temp.getResourceEnvRefs());  for (  WebXml fragment : fragments) {    if (!mergeResourceMap(fragment.getResourceRefs(),resourceRefs,temp.getResourceRefs(),fragment)) {      return false;    }  }  resourceRefs.putAll(temp.getResourceRefs());  for (  WebXml fragment : fragments) {    for (    SecurityConstraint constraint : fragment.getSecurityConstraints()) {      addSecurityConstraint(constraint);    }  }  for (  WebXml fragment : fragments) {    for (    String role : fragment.getSecurityRoles()) {      addSecurityRole(role);    }  }  for (  WebXml fragment : fragments) {    if (!mergeResourceMap(fragment.getServiceRefs(),serviceRefs,temp.getServiceRefs(),fragment)) {      return false;    }  }  serviceRefs.putAll(temp.getServiceRefs());  List<Map.Entry<String,String>> servletMappingsToAdd=new ArrayList<>();  for (  WebXml fragment : fragments) {    for (    Map.Entry<String,String> servletMap : fragment.getServletMappings().entrySet()) {      if (!servletMappingNames.contains(servletMap.getValue()) && !servletMappings.containsKey(servletMap.getKey())) {        servletMappingsToAdd.add(servletMap);      }    }  }  for (  Map.Entry<String,String> mapping : servletMappingsToAdd) {    addServletMappingDecoded(mapping.getKey(),mapping.getValue());  }  for (  WebXml fragment : fragments) {    for (    Map.Entry<String,ServletDef> entry : fragment.getServlets().entrySet()) {      if (servlets.containsKey(entry.getKey())) {        mergeServlet(entry.getValue(),servlets.get(entry.getKey()),false);      } else {        if (temp.getServlets().containsKey(entry.getKey())) {          if (!(mergeServlet(entry.getValue(),temp.getServlets().get(entry.getKey()),true))) {            log.error(sm.getString("webXml.mergeConflictServlet",entry.getKey(),fragment.getName(),fragment.getURL()));            return false;          }        } else {          temp.getServlets().put(entry.getKey(),entry.getValue());        }      }    }  }  servlets.putAll(temp.getServlets());  if (sessionConfig.getSessionTimeout() == null) {    for (    WebXml fragment : fragments) {      Integer value=fragment.getSessionConfig().getSessionTimeout();      if (value != null) {        if (temp.getSessionConfig().getSessionTimeout() == null) {          temp.getSessionConfig().setSessionTimeout(value.toString());        } else         if (value.equals(temp.getSessionConfig().getSessionTimeout())) {        } else {          log.error(sm.getString("webXml.mergeConflictSessionTimeout",fragment.getName(),fragment.getURL()));          return false;        }      }    }    if (temp.getSessionConfig().getSessionTimeout() != null) {      sessionConfig.setSessionTimeout(temp.getSessionConfig().getSessionTimeout().toString());    }  }  if (sessionConfig.getCookieName() == null) {    for (    WebXml fragment : fragments) {      String value=fragment.getSessionConfig().getCookieName();      if (value != null) {        if (temp.getSessionConfig().getCookieName() == null) {          temp.getSessionConfig().setCookieName(value);        } else         if (value.equals(temp.getSessionConfig().getCookieName())) {        } else {          log.error(sm.getString("webXml.mergeConflictSessionCookieName",fragment.getName(),fragment.getURL()));          return false;        }      }    }    sessionConfig.setCookieName(temp.getSessionConfig().getCookieName());  }  if (sessionConfig.getCookieDomain() == null) {    for (    WebXml fragment : fragments) {      String value=fragment.getSessionConfig().getCookieDomain();      if (value != null) {        if (temp.getSessionConfig().getCookieDomain() == null) {          temp.getSessionConfig().setCookieDomain(value);        } else         if (value.equals(temp.getSessionConfig().getCookieDomain())) {        } else {          log.error(sm.getString("webXml.mergeConflictSessionCookieDomain",fragment.getName(),fragment.getURL()));          return false;        }      }    }    sessionConfig.setCookieDomain(temp.getSessionConfig().getCookieDomain());  }  if (sessionConfig.getCookiePath() == null) {    for (    WebXml fragment : fragments) {      String value=fragment.getSessionConfig().getCookiePath();      if (value != null) {        if (temp.getSessionConfig().getCookiePath() == null) {          temp.getSessionConfig().setCookiePath(value);        } else         if (value.equals(temp.getSessionConfig().getCookiePath())) {        } else {          log.error(sm.getString("webXml.mergeConflictSessionCookiePath",fragment.getName(),fragment.getURL()));          return false;        }      }    }    sessionConfig.setCookiePath(temp.getSessionConfig().getCookiePath());  }  if (sessionConfig.getCookieComment() == null) {    for (    WebXml fragment : fragments) {      String value=fragment.getSessionConfig().getCookieComment();      if (value != null) {        if (temp.getSessionConfig().getCookieComment() == null) {          temp.getSessionConfig().setCookieComment(value);        } else         if (value.equals(temp.getSessionConfig().getCookieComment())) {        } else {          log.error(sm.getString("webXml.mergeConflictSessionCookieComment",fragment.getName(),fragment.getURL()));          return false;        }      }    }    sessionConfig.setCookieComment(temp.getSessionConfig().getCookieComment());  }  if (sessionConfig.getCookieHttpOnly() == null) {    for (    WebXml fragment : fragments) {      Boolean value=fragment.getSessionConfig().getCookieHttpOnly();      if (value != null) {        if (temp.getSessionConfig().getCookieHttpOnly() == null) {          temp.getSessionConfig().setCookieHttpOnly(value.toString());        } else         if (value.equals(temp.getSessionConfig().getCookieHttpOnly())) {        } else {          log.error(sm.getString("webXml.mergeConflictSessionCookieHttpOnly",fragment.getName(),fragment.getURL()));          return false;        }      }    }    if (temp.getSessionConfig().getCookieHttpOnly() != null) {      sessionConfig.setCookieHttpOnly(temp.getSessionConfig().getCookieHttpOnly().toString());    }  }  if (sessionConfig.getCookieSecure() == null) {    for (    WebXml fragment : fragments) {      Boolean value=fragment.getSessionConfig().getCookieSecure();      if (value != null) {        if (temp.getSessionConfig().getCookieSecure() == null) {          temp.getSessionConfig().setCookieSecure(value.toString());        } else         if (value.equals(temp.getSessionConfig().getCookieSecure())) {        } else {          log.error(sm.getString("webXml.mergeConflictSessionCookieSecure",fragment.getName(),fragment.getURL()));          return false;        }      }    }    if (temp.getSessionConfig().getCookieSecure() != null) {      sessionConfig.setCookieSecure(temp.getSessionConfig().getCookieSecure().toString());    }  }  if (sessionConfig.getCookieMaxAge() == null) {    for (    WebXml fragment : fragments) {      Integer value=fragment.getSessionConfig().getCookieMaxAge();      if (value != null) {        if (temp.getSessionConfig().getCookieMaxAge() == null) {          temp.getSessionConfig().setCookieMaxAge(value.toString());        } else         if (value.equals(temp.getSessionConfig().getCookieMaxAge())) {        } else {          log.error(sm.getString("webXml.mergeConflictSessionCookieMaxAge",fragment.getName(),fragment.getURL()));          return false;        }      }    }    if (temp.getSessionConfig().getCookieMaxAge() != null) {      sessionConfig.setCookieMaxAge(temp.getSessionConfig().getCookieMaxAge().toString());    }  }  if (sessionConfig.getSessionTrackingModes().size() == 0) {    for (    WebXml fragment : fragments) {      EnumSet<SessionTrackingMode> value=fragment.getSessionConfig().getSessionTrackingModes();      if (value.size() > 0) {        if (temp.getSessionConfig().getSessionTrackingModes().size() == 0) {          temp.getSessionConfig().getSessionTrackingModes().addAll(value);        } else         if (value.equals(temp.getSessionConfig().getSessionTrackingModes())) {        } else {          log.error(sm.getString("webXml.mergeConflictSessionTrackingMode",fragment.getName(),fragment.getURL()));          return false;        }      }    }    sessionConfig.getSessionTrackingModes().addAll(temp.getSessionConfig().getSessionTrackingModes());  }  for (  WebXml fragment : fragments) {    if (!mergeMap(fragment.getTaglibs(),taglibs,temp.getTaglibs(),fragment,"Taglibs")) {      return false;    }  }  taglibs.putAll(temp.getTaglibs());  for (  WebXml fragment : fragments) {    if (fragment.alwaysAddWelcomeFiles || welcomeFiles.size() == 0) {      for (      String welcomeFile : fragment.getWelcomeFiles()) {        addWelcomeFile(welcomeFile);      }    }  }  if (postConstructMethods.isEmpty()) {    for (    WebXml fragment : fragments) {      if (!mergeLifecycleCallback(fragment.getPostConstructMethods(),temp.getPostConstructMethods(),fragment,"Post Construct Methods")) {        return false;      }    }    postConstructMethods.putAll(temp.getPostConstructMethods());  }  if (preDestroyMethods.isEmpty()) {    for (    WebXml fragment : fragments) {      if (!mergeLifecycleCallback(fragment.getPreDestroyMethods(),temp.getPreDestroyMethods(),fragment,"Pre Destroy Methods")) {        return false;      }    }    preDestroyMethods.putAll(temp.getPreDestroyMethods());  }  return true;}  }
class C{  public StringBuilder(){  super(16);}  }
class C{  public static void main(String[] args){  int exitCode=main(args,System.out,System.err);  if (exitCode != 0) {    System.exit(exitCode);  }}  }
class C{  private void doSetArrayItem(XMPNode arrayNode,int itemIndex,String itemValue,PropertyOptions itemOptions,boolean insert) throws XMPException {  XMPNode itemNode=new XMPNode(ARRAY_ITEM_NAME,null);  itemOptions=XMPNodeUtils.verifySetOptions(itemOptions,itemValue);  int maxIndex=insert ? arrayNode.getChildrenLength() + 1 : arrayNode.getChildrenLength();  if (itemIndex == ARRAY_LAST_ITEM) {    itemIndex=maxIndex;  }  if (1 <= itemIndex && itemIndex <= maxIndex) {    if (!insert) {      arrayNode.removeChild(itemIndex);    }    arrayNode.addChild(itemIndex,itemNode);    setNode(itemNode,itemValue,itemOptions,false);  } else {    throw new XMPException("Array index out of bounds",XMPError.BADINDEX);  }}  }
class C{  static String readLhex(StringReader input) throws IOException {  StringBuilder result=new StringBuilder();  boolean quoted=false;  int c=skipLws(input,false);  if (c == '"') {    quoted=true;  } else   if (c == -1 || !isHex(c)) {    return null;  } else {    if ('A' <= c && c <= 'F') {      c-=('A' - 'a');    }    result.append((char)c);  }  c=input.read();  while (c != -1 && isHex(c)) {    if ('A' <= c && c <= 'F') {      c-=('A' - 'a');    }    result.append((char)c);    c=input.read();  }  if (quoted) {    if (c != '"') {      return null;    }  } else {    input.skip(-1);  }  if (c != -1 && result.length() == 0) {    return null;  } else {    return result.toString();  }}  }
class C{  private String formatQuoteListToCSV(List<StreamingQuote> quoteList){  String csvData=null;  CsvMapper mapper=new CsvMapper();  CsvSchema schema=null;  if (quoteList.get(0).getClass() == StreamingQuoteModeLtp.class) {    schema=mapper.schemaFor(StreamingQuoteModeLtp.class).withHeader().withColumnSeparator(',');  } else   if (quoteList.get(0).getClass() == StreamingQuoteModeQuote.class) {    schema=mapper.schemaFor(StreamingQuoteModeQuote.class).withHeader().withColumnSeparator(',');  } else   if (quoteList.get(0).getClass() == StreamingQuoteModeFull.class) {    schema=mapper.schemaFor(StreamingQuoteModeFull.class).withHeader().withColumnSeparator(',');  } else {    System.out.println("TimeRangeStreamingQuoteActionHandler.formatQuoteListToCSV(): ERROR: Wrong POJO class to map");  }  try {    csvData=mapper.writer(schema).writeValueAsString(quoteList);  } catch (  JsonProcessingException e) {    System.out.println("TimeRangeStreamingQuoteActionHandler.formatQuoteListToCSV(): ERROR: JsonProcessingException on quote list !!!");    e.printStackTrace();  }  return csvData;}  }
class C{  public void log(Level level,Supplier<String> msgSupplier){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msgSupplier.get());  doLog(lr);}  }
class C{  public int next(){  int node=_currentNode;  if (node == DTM.NULL)   return DTM.NULL;  final int nodeType=_nodeType;  if (nodeType != DTM.ELEMENT_NODE) {    while (node != DTM.NULL && _exptype2(node) != nodeType) {      node=_nextsib2(node);    }  } else {    int eType;    while (node != DTM.NULL) {      eType=_exptype2(node);      if (eType >= DTM.NTYPES)       break; else       node=_nextsib2(node);    }  }  if (node == DTM.NULL) {    _currentNode=DTM.NULL;    return DTM.NULL;  } else {    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public ExtensionHeader createMinSEHeader(int expires) throws InvalidArgumentException {  if (expires < 0)   throw new InvalidArgumentException("bad value " + expires);  MinSE e=new MinSE();  e.setExpires(expires);  return e;}  }
class C{  public void processKeyEvent(KeyEvent e,MenuElement path[],MenuSelectionManager manager){  if (DEBUG) {    System.out.println("in JMenuItem.processKeyEvent/3 for " + getText() + "  "+ KeyStroke.getKeyStrokeForEvent(e));  }  MenuKeyEvent mke=new MenuKeyEvent(e.getComponent(),e.getID(),e.getWhen(),e.getModifiers(),e.getKeyCode(),e.getKeyChar(),path,manager);  processMenuKeyEvent(mke);  if (mke.isConsumed()) {    e.consume();  }}  }
class C{  public FSAuthContextResult(){  loginURL=null;  authContextRef=null;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  protected void finishDraggingTo(int location){  splitPaneUI.finishDraggingTo(location);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PagesPerMinute);}  }
class C{  public static Note natural(int octave,Tone tone){  Validate.isTrue(octave != 2,"Octave cannot be 2 for naturals");  return new Note(octave,tone,false);}  }
class C{  private final void _startBuffering(int typedTag) throws IOException {  _ensureRoom(20);  int ptr=_currPtr;  if (_buffered == null) {    int start=_currStart;    int len=ptr - start;    if (len > 0) {      ptr=0;      _output.write(_currBuffer,start,len);    }  }  _currStart=_currPtr=ptr + 10;  _buffered=new ByteAccumulator(_buffered,typedTag,_currBuffer,ptr);}  }
class C{  public SearchResult(String name,Object obj,Attributes attrs,boolean isRelative){  super(name,obj,isRelative);  this.attrs=attrs;}  }
class C{  public long insert(Long eventID,String ruleName,String ruleDesc,Boolean enabled){  if (eventID == null || ruleName == null || ruleDesc == null || enabled == null) {    throw new IllegalArgumentException("insert parameter null.");  }  SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  String insertTime=dateFormat.format(new Timestamp(System.currentTimeMillis()));  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_EVENTID,eventID);  initialValues.put(KEY_RULENAME,ruleName);  initialValues.put(KEY_RULEDESC,ruleDesc);  initialValues.put(KEY_ENABLED,enabled);  initialValues.put(KEY_CREATED,insertTime);  initialValues.put(KEY_UPDATED,insertTime);  initialValues.put(KEY_NOTIFICATION,notification);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public Message resendRequest(String returnToURL,HttpServletRequest httpRequest,HttpServletResponse httpResponse,Message requestMessage) throws InteractionRedirectException, InteractionException, SOAPBindingException, SOAPFaultException {  if (debug.messageEnabled()) {    debug.message("InteractionManager.resendRequest():entering ");  }  String messageID=httpRequest.getParameter(RESEND_MESSAGE);  if (messageID == null) {    debug.error("InteractionManager.resend():" + " request without " + RESEND_MESSAGE + " in requestURL="+ httpRequest.getRequestURL().toString());    String objs[]={RESEND_MESSAGE};    throw new InteractionException(INTERACTION_RB_NAME,"missing_query_parameter",objs);  }  if ((messageID == "0") || (messageID.equals("false"))) {    debug.error("InteractionManager.resend():" + " resend not allowed in requestURL=" + httpRequest.getRequestURL().toString());    throw new InteractionException(INTERACTION_RB_NAME,"wsp_advised_not_to_resend",null);  }  messageID=httpRequest.getParameter(REQUEST_ID);  if (messageID == null) {    debug.error("InteractionManager.resend():" + " request without " + REQUEST_ID + " in requestURL="+ httpRequest.getRequestURL().toString());    String[] objs={REQUEST_ID};    throw new InteractionException(INTERACTION_RB_NAME,"request_missing_query_parameter",objs);  }  String connectTo=getConnectTo(messageID);  if (connectTo == null) {    debug.error("InteractionManager.resend():" + " old connectTo not  found for messageID=" + messageID);    throw new InteractionException(INTERACTION_RB_NAME,"old_connectTo_not_found",null);  }  if (requestMessage == null) {    if (debug.messageEnabled()) {      debug.message("InteractionManager.resendRequest():" + "invoking with null requestMessage:" + "old cached message would be used");    }    Message oldMessage=getRequestMessage(messageID);    if (oldMessage == null) {      debug.error("InteractionManager.resend():" + " old message not  found for messageID=" + messageID);      throw new InteractionException(INTERACTION_RB_NAME,"old_message_not_found",null);    }    requestMessage=oldMessage;  } else {    if (debug.messageEnabled()) {      debug.message("InteractionManager.resendRequest():" + "invoking with non null requestMessage");    }  }  CorrelationHeader ch=new CorrelationHeader();  ch.setRefToMessageID(InteractionManager.getInstance().getRequestMessageID(messageID));  requestMessage.setCorrelationHeader(ch);  if (debug.messageEnabled()) {    debug.message("InteractionManager.resendRequest():" + "invoking InteractionManager.sendRequest():" + "with requestMessage=" + requestMessage + ":returnToURL="+ returnToURL);  }  if (LogUtil.isLogEnabled()) {    String[] objs=new String[2];    objs[0]=messageID;    objs[1]=ch.getMessageID();    LogUtil.access(Level.INFO,LogUtil.IS_RESENDING_MESSAGE,objs);  }  Message responseMessage=sendRequest(requestMessage,connectTo,getClientCert(messageID),getSoapAction(messageID),returnToURL,httpRequest,httpResponse);  if (debug.messageEnabled()) {    debug.message("InteractionManager.resendRequest():" + " returning responseMessage=" + responseMessage);  }  return responseMessage;}  }
class C{  private SessionOperations logAndWrap(SessionID sessionID,SessionOperations op,SessionMonitorType type){  if (debug.messageEnabled()) {    debug.message(sessionID + ": " + op.getClass().getSimpleName()+ " selected.");  }  return new MonitoredOperations(op,type,store);}  }
class C{  @Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){  DN dn=templateEntry.getDN();  if (dn != null && !dn.isRootDN()) {    templateValue.getValue().append(dn.rdn());  }  return TagResult.SUCCESS_RESULT;}  }
class C{  private void buildClass(StringBuilder sb,ClassDef classDef,int indentation) throws SyntaxException {  assertNoAnno(classDef.annos);  assertNoModifier(classDef.modifiers);  if (classDef.superWithInvocation != null)   err.SyntaxException("JavaScript don't have parent classes",classDef.superWithInvocation.line_col());  if (!classDef.superWithoutInvocation.isEmpty())   err.SyntaxException("JavaScript don't have parent classes or interfaces",classDef.superWithoutInvocation.get(0).line_col());  sb.append("function ").append(classDef.name).append("(");  buildParameters(sb,classDef.params);  sb.append(") {\n");  buildDefaultValues(sb,classDef.params,indentation + INDENT);  buildStatements(sb,classDef.statements,indentation + INDENT);  for (  VariableDef v : classDef.params) {    buildIndentation(sb,indentation + INDENT);    sb.append("this.").append(v.getName()).append(" = ").append(v.getName()).append(";\n");  }  sb.append("}\n");}  }
class C{  private void unpackRules(byte[] rules){  startDay=rules[0];  startDayOfWeek=rules[1];  endDay=rules[2];  endDayOfWeek=rules[3];  if (rules.length >= 6) {    startTimeMode=rules[4];    endTimeMode=rules[5];  }}  }
class C{  public void addToParent(Element headerE) throws Exception {  Document doc=headerE.getOwnerDocument();  Element securityE=doc.createElementNS(wsseNS,WSSEConstants.TAG_WSSE + ":" + WSSEConstants.TAG_SECURITYT);  securityE.setAttributeNS(SOAPBindingConstants.NS_XML,WSSEConstants.TAG_XML_WSSE,wsseNS);  headerE.appendChild(securityE);  Document binaryTokenD=XMLUtils.toDOMDocument(toString(),debug);  Element binaryTokenE=binaryTokenD.getDocumentElement();  securityE.appendChild(doc.importNode(binaryTokenE,true));}  }
class C{  public PolicyStatsListener(Stats policyStats){  this.policyStats=policyStats;}  }
class C{  public static Set<Application> search(Subject subject,String realm,QueryFilter<String> queryFilter) throws EntitlementException {  return getApplicationService(subject,realm).search(queryFilter);}  }
class C{  public JTextArea(Document doc){  this(doc,null,0,0);}  }
class C{  public void deleteUsers(Set users) throws AMException, SSOException {  Iterator iter=users.iterator();  while (iter.hasNext()) {    String userDN=(String)iter.next();    AMUser user=new AMUserImpl(super.token,userDN);    user.delete();  }}  }
class C{  public static String replaceString(String string,String orig,String substitution){  int idx=string.indexOf(orig);  while (idx != -1) {    string=string.substring(0,idx) + substitution + string.substring(idx + orig.length());    idx=string.indexOf(orig,idx + substitution.length());  }  return string;}  }
class C{  public boolean isSuccess(){  return code >= 0;}  }
class C{  private void outputDocTypeDecl(String name) throws SAXException {  if (true == m_needToOutputDocTypeDecl) {    String doctypeSystem=getDoctypeSystem();    String doctypePublic=getDoctypePublic();    if ((null != doctypeSystem) || (null != doctypePublic)) {      final java.io.Writer writer=m_writer;      try {        writer.write("<!DOCTYPE ");        writer.write(name);        if (null != doctypePublic) {          writer.write(" PUBLIC \"");          writer.write(doctypePublic);          writer.write('"');        }        if (null != doctypeSystem) {          if (null == doctypePublic)           writer.write(" SYSTEM \""); else           writer.write(" \"");          writer.write(doctypeSystem);          writer.write('"');        }        writer.write('>');        outputLineSep();      } catch (      IOException e) {        throw new SAXException(e);      }    }  }  m_needToOutputDocTypeDecl=false;}  }
class C{  public synchronized boolean rotate(String newFileName){  if (currentLogFile != null) {    File holder=currentLogFile;    close(false);    try {      holder.renameTo(new File(newFileName));    } catch (    Throwable e) {      ExceptionUtils.handleThrowable(e);      log.error(sm.getString("accessLogValve.rotateFail"),e);    }    dateStamp=fileDateFormatter.format(new Date(System.currentTimeMillis()));    open();    return true;  } else {    return false;  }}  }
class C{  public long bytesUsed() throws IOException {  return diskLruCache.size();}  }
class C{  public BufferedImageFilter(BufferedImageOp op){  super();  if (op == null) {    throw new NullPointerException("Operation cannot be null");  }  bufferedImageOp=op;}  }
class C{  public void testCase5(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=-1;  byte rBytes[]={-11,-41,-101,54,-97,-52,-77,-41,44,-86,-116,-45,126,-116,20,61,14,-86,-65,86,1,35,35,106};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void validate(ValidatableObject vo) throws SAXException {  if (validatedObjects.add(ProxyGroup.unwrap(vo))) {    MSVValidator.validate(jaxbContext,this,vo);  } else {    reportEvent(vo,Messages.format(Messages.CYCLE_DETECTED));  }}  }
class C{  public OperationNotSupportedException(){  super();}  }
class C{  public synchronized void reset() throws IOException {  in.reset();}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public Wood(final Material type,final TreeSpecies species){  super(getSpeciesType(type,species));  setSpecies(species);}  }
class C{  private void parseDocument(Document doc) throws SOAPBindingException {  Element envelopeE=doc.getDocumentElement();  if (Utils.debug.messageEnabled()) {    Utils.debug.message("Message.parseDocument: doc = " + XMLUtils.print(envelopeE));  }  NodeList nl=envelopeE.getChildNodes();  int length=nl.getLength();  if (length == 0) {    String msg=Utils.bundle.getString("soapEnvelopeMissingChildren");    Utils.debug.error("Message.parseDocument: " + msg);    throw new SOAPBindingException(msg);  }  Element headerE=null;  Element bodyE=null;  for (int i=0; i < length; i++) {    Node child=nl.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      Element element=(Element)child;      String localName=element.getLocalName();      String namespaceURI=element.getNamespaceURI();      if (SOAPBindingConstants.NS_SOAP.equals(namespaceURI)) {        if (SOAPBindingConstants.TAG_HEADER.equals(localName)) {          headerE=element;        } else         if (SOAPBindingConstants.TAG_BODY.equals(localName)) {          bodyE=element;        }      }    }  }  Element securityE=null;  soapHeaders=new ArrayList();  if (headerE != null) {    nl=headerE.getChildNodes();    length=nl.getLength();    for (int i=0; i < length; i++) {      Node child=nl.item(i);      if (child.getNodeType() == Node.ELEMENT_NODE) {        Element element=(Element)child;        String localName=element.getLocalName();        String ns=element.getNamespaceURI();        if (SOAPBindingConstants.NS_SOAP_BINDING.equals(ns)) {          if (SOAPBindingConstants.TAG_CORRELATION.equals(localName)) {            correlationHeader=new CorrelationHeader(element);          } else           if (SOAPBindingConstants.TAG_CONSENT.equals(localName)) {            consentHeader=new ConsentHeader(element);          } else           if (SOAPBindingConstants.TAG_USAGE_DIRECTIVE.equals(localName)) {            if (usageDirectiveHeaders == null) {              usageDirectiveHeaders=new ArrayList();            }            usageDirectiveHeaders.add(new UsageDirectiveHeader(element));          } else           if (SOAPBindingConstants.TAG_PROVIDER.equals(localName)) {            providerHeader=new ProviderHeader(element);          } else           if (SOAPBindingConstants.TAG_PROCESSING_CONTEXT.equals(localName)) {            processingContextHeader=new ProcessingContextHeader(element);          } else {            soapHeaders.add(element);          }        } else         if (SOAPBindingConstants.NS_SOAP_BINDING_11.equals(ns) && SOAPBindingConstants.TAG_SERVICE_INSTANCE_UPDATE.equals(localName)) {          serviceInstanceUpdateHeader=new ServiceInstanceUpdateHeader(element);        } else         if (WSSEConstants.NS_WSSE.equals(ns) || WSSEConstants.NS_WSSE_WSF11.equals(ns)) {          if (WSSEConstants.TAG_SECURITYT.equals(localName)) {            securityE=element;          } else {            soapHeaders.add(element);          }        } else {          soapHeaders.add(element);        }      }    }    parseSecurityElement(securityE);  }  if (soapHeaders.isEmpty()) {    soapHeaders=null;  }  if (bodyE != null) {    nl=bodyE.getChildNodes();    length=nl.getLength();    for (int i=0; i < length; i++) {      Node child=nl.item(i);      if (child.getNodeType() == Node.ELEMENT_NODE) {        Element childE=(Element)child;        String localName=childE.getLocalName();        String ns=childE.getNamespaceURI();        if (soapFault == null && SOAPBindingConstants.NS_SOAP.equals(ns) && SOAPBindingConstants.TAG_FAULT.equals(localName)) {          soapFault=new SOAPFault(childE);        } else {          if (soapBodies == null) {            soapBodies=new ArrayList();          }          soapBodies.add(child);        }      }    }  }}  }
class C{  public static Set combineOCs(Set one,Set two){  if (one == null || one.isEmpty()) {    return two;  }  if (two == null || two.isEmpty()) {    return one;  }  Set resultSet=new HashSet();  Iterator itr1=one.iterator();  while (itr1.hasNext()) {    String value1=(String)itr1.next();    resultSet.add(value1.toLowerCase());  }  Iterator itr2=two.iterator();  while (itr2.hasNext()) {    String value2=(String)itr2.next();    resultSet.add(value2.toLowerCase());  }  return resultSet;}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  private final String _findDecodedLong(int len,int q1,int q2) throws IOException {{    int bufLen=(len + 3) >> 2;    if (bufLen > _quadBuffer.length) {      _quadBuffer=_growArrayTo(_quadBuffer,bufLen);    }  }  _quadBuffer[0]=q1;  _quadBuffer[1]=q2;  int offset=2;  int inPtr=_inputPtr + 8;  len-=8;  final byte[] inBuf=_inputBuffer;  do {    int q=(inBuf[inPtr++] & 0xFF);    q=(q << 8) | inBuf[inPtr++] & 0xFF;    q=(q << 8) | inBuf[inPtr++] & 0xFF;    q=(q << 8) | inBuf[inPtr++] & 0xFF;    _quadBuffer[offset++]=q;  } while ((len-=4) > 3);  if (len > 0) {    int q=inBuf[inPtr] & 0xFF;    if (len > 1) {      q=(q << 8) + (inBuf[++inPtr] & 0xFF);      if (len > 2) {        q=(q << 8) + (inBuf[++inPtr] & 0xFF);      }    }    _quadBuffer[offset++]=q;  }  return _symbols.findName(_quadBuffer,offset);}  }
class C{  @Override public String toString(){  return super.toString() + "[" + delegate.toString()+ "]";}  }
class C{  public void test_engineInit_02(){  KeyManagerFactorySpiImpl kmf=new KeyManagerFactorySpiImpl();  try {    kmf.engineInit(null);    fail("InvalidAlgorithmParameterException wasn't thrown");  } catch (  InvalidAlgorithmParameterException iape) {  }catch (  Exception e) {    fail(e + " was thrown instead of InvalidAlgorithmParameterException");  }  try {    char[] psw="password".toCharArray();    Parameters pr=new Parameters(psw);    kmf.engineInit(pr);  } catch (  Exception e) {    fail(e + " unexpected exception was thrown");  }}  }
class C{  public void write(int b) throws IOException {  out.write(b);  written++;}  }
class C{  public WalkingIterator(PrefixResolver nscontext){  super(nscontext);}  }
class C{  private ShoveTraceEntryPoint[] pop_piece(){  if (list_anchor == null) {    if (trace_piece_count != 0) {      System.out.println("ShapeTraceEntries: trace_piece_count is inconsistent");    }    return null;  }  ShoveTraceEntryPoint first=list_anchor;  ShoveTraceEntryPoint prev_first=null;  while (first != null) {    if (first.stack_level == max_stack_level)     break;    prev_first=first;    first=first.next;  }  if (first == null) {    System.out.println("ShapeTraceEntries: max_stack_level not found");    return null;  }  ShoveTraceEntryPoint[] result=new ShoveTraceEntryPoint[2];  result[0]=first;  ShoveTraceEntryPoint last=first;  ShoveTraceEntryPoint after_last=first.next;  while (after_last != null) {    if (after_last.stack_level != max_stack_level || !after_last.trace.nets_equal(first.trace)) {      break;    }    last=after_last;    after_last=last.next;  }  result[1]=last;  if (prev_first != null) {    prev_first.next=after_last;  } else {    list_anchor=after_last;  }  max_stack_level=0;  ShoveTraceEntryPoint curr=list_anchor;  while (curr != null) {    if (curr.stack_level > max_stack_level) {      max_stack_level=curr.stack_level;    }    curr=curr.next;  }  --trace_piece_count;  if (first.trace.nets_equal(own_net_nos)) {    result=pop_piece();  }  return result;}  }
class C{  public final boolean hasOption(ManagedObjectOption option){  return options.contains(option);}  }
class C{  public void removeDocumentFromCache(int n){  if (DTM.NULL == n)   return;  for (int i=m_sourceTree.size() - 1; i >= 0; --i) {    SourceTree st=(SourceTree)m_sourceTree.elementAt(i);    if (st != null && st.m_root == n) {      m_sourceTree.removeElementAt(i);      return;    }  }}  }
class C{  Policy refreshPolicy(String cacheKey){  String[] cacheKeyTokens=tokenizeCacheKey(cacheKey);  Policy policy=null;  String orgName=cacheKeyTokens[5];  String policyName=cacheKeyTokens[1];  if (DEBUG.messageEnabled()) {    StringBuilder sb=new StringBuilder(500);    sb.append("at PolicyCache.refreshPolicy refreshing policy for - ").append("cacheKey=").append(cacheKey).append(":").append("policyName=").append(policyName).append(":").append("orgName=").append(orgName);    DEBUG.message(sb.toString());  }  try {    PolicyManager pm=getPolicyManager(orgName);    policy=pm.getPolicy(policyName);  } catch (  PolicyException pe) {    String[] objs={cacheKey};    DEBUG.error(ResBundleUtils.getString("can_not_refresh_policy_for_cachekey",objs),pe);  }catch (  SSOException ssoe) {    String[] objs={cacheKey};    DEBUG.error(ResBundleUtils.getString("can_not_refresh_policy_for_cachekey",objs),ssoe);  }  if (policy == null) {    DEBUG.error("refreshed policy is null for cache key : " + cacheKey);  } else {    policies.put(cacheKey,policy);    policy.initializeEvaluationWeights();  }  return policy;}  }
class C{  public String toHTML(){  String htmlID="tblTestPassed";  String status="Succeeded";  if (failed()) {    htmlID="tblTestFailed";    status="Failed";  } else   if (skipped()) {    htmlID="tblTestSkipped";    status="Skipped";  }  StringBuffer buff=new StringBuffer();  buff.append("<tr>");  Object[] params={htmlID,name};  buff.append(MessageFormat.format(HTMLConstants.TBL_ENTRY,params));  params[1]=status;  buff.append(MessageFormat.format(HTMLConstants.TBL_ENTRY,params));  params[1]=Float.toString(timeTaken);  buff.append(MessageFormat.format(HTMLConstants.TBL_NUM_ENTRY,params));  params[1]=(failure != null) ? "<pre>" + failure.getStackTrace() + "</pre>" : "&nbsp;";  buff.append(MessageFormat.format(HTMLConstants.TBL_ENTRY,params));  buff.append("</tr>");  return buff.toString();}  }
class C{  protected void paintChild(Graphics g,Rectangle alloc,int index){  listPainter.paint(g,alloc.x,alloc.y,alloc.width,alloc.height,this,index);  super.paintChild(g,alloc,index);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.RoleDescriptorType createRoleDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.RoleDescriptorTypeImpl();}  }
class C{  public String toString(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanNotificationInfo.class.getName(),"toString()","Entry");  }  final StringBuilder retStr=new StringBuilder();  retStr.append("ModelMBeanNotificationInfo: ").append(this.getName());  retStr.append(" ; Description: ").append(this.getDescription());  retStr.append(" ; Descriptor: ").append(this.getDescriptor());  retStr.append(" ; Types: ");  String[] nTypes=this.getNotifTypes();  for (int i=0; i < nTypes.length; i++) {    if (i > 0)     retStr.append(", ");    retStr.append(nTypes[i]);  }  return retStr.toString();}  }
class C{  public boolean equals(Object obj){  if (obj instanceof Policy) {    Policy p=(Policy)obj;    if (rules.equals(p.rules) && users.equals(p.users) && referrals.equals(p.referrals)&& respProviders.equals(p.respProviders)&& conditions.equals(p.conditions)) {      return (true);    }  }  return (false);}  }
class C{  public synchronized void clear(){  if (mMap.isEmpty())   return;  for (  Pair<Integer,Subscription> pair : mMap.values()) {    if (!pair.second.isUnsubscribed())     pair.second.unsubscribe();  }}  }
class C{  public ACTIVITY_COMPLETED(){  this("");}  }
class C{  public void delete(String tokenID,String objName) throws SMSException, SSOException, RemoteException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::delete dn: " + objName);  }  SMSEntry entry=new SMSEntry(getToken(tokenID),objName);  entry.delete();}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  try {    Condition condition=createCondition();    if (condition != null) {      CachedPolicy cachedPolicy=getCachedPolicy();      Policy policy=cachedPolicy.getPolicy();      String name=(String)propertySheetModel.getValue(CONDITION_NAME);      policy.addCondition(name,condition);      backTrail();      forwardToPolicyViewBean();    } else {      forwardTo();    }  } catch (  NameAlreadyExistsException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));    forwardTo();  }catch (  InvalidNameException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",getModel().getErrorString(e));    forwardTo();  }catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  protected Collection<PlaPointFloat> calculate_next_trace_corners(){  Collection<PlaPointFloat> result=new LinkedList<PlaPointFloat>();  if (current_to_door_index >= current_target_door_index) {    if (current_to_door_index == current_target_door_index) {      PlaPointFloat nearest_point=current_target_shape.nearest_point_approx(current_from_point.round());      ++current_to_door_index;      result.add(nearest_point);    }    return result;  }  double trace_halfwidth_exact=art_ctrl.compensated_trace_half_width[current_trace_layer];  double trace_halfwidth_max=trace_halfwidth_exact + ArtEngine.TRACE_WIDTH_TOLERANCE;  double trace_halfwidth_middle=trace_halfwidth_exact + c_tolerance;  ArtBacktrackElement curr_to_info=backtrack_array[current_to_door_index];  PlaPointFloat door_left_corner=calc_door_left_corner(curr_to_info);  if (door_left_corner == null)   return result;  PlaPointFloat door_right_corner=calc_door_right_corner(curr_to_info);  if (door_right_corner == null)   return result;  if (current_from_point.side_of(door_left_corner,door_right_corner) != PlaSide.ON_THE_LEFT) {    if (current_from_point.scalar_product(previous_from_point,door_left_corner) >= 0) {      door_left_corner=null;    }    if (current_from_point.scalar_product(previous_from_point,door_right_corner) >= 0) {      door_right_corner=null;    }    if (door_left_corner == null && door_right_corner == null) {      current_to_door_index++;      result.add(current_from_point);      return result;    }  }  boolean end_of_trace=false;  PlaPointFloat left_tangent_point=null;  PlaPointFloat right_tangent_point=null;  int new_door_ind=current_to_door_index;  int left_ind=new_door_ind;  int right_ind=new_door_ind;  int curr_door_ind=current_to_door_index + 1;  PlaPointFloat result_corner=null;  for (; ; ) {    left_tangent_point=current_from_point.right_tangential_point(door_left_corner,trace_halfwidth_max);    if (door_left_corner != null && left_tangent_point == null) {      System.out.println("LocateFoundConnectionAlgo.calculate_next_trace_corner: left tangent point is null");      left_tangent_point=door_left_corner;    }    right_tangent_point=current_from_point.left_tangential_point(door_right_corner,trace_halfwidth_max);    if (door_right_corner != null && right_tangent_point == null) {      System.out.println("LocateFoundConnectionAlgo.calculate_next_trace_corner: right tangent point is null");      right_tangent_point=door_right_corner;    }    if (left_tangent_point != null && right_tangent_point != null && right_tangent_point.side_of(current_from_point,left_tangent_point) != PlaSide.ON_THE_RIGHT) {      double left_corner_distance=door_left_corner.distance(current_from_point);      double right_corner_distance=door_right_corner.distance(current_from_point);      if (left_corner_distance <= right_corner_distance) {        new_door_ind=left_ind;        result_corner=left_turn_next_corner(current_from_point,trace_halfwidth_max,door_left_corner,door_right_corner);      } else {        new_door_ind=right_ind;        result_corner=right_turn_next_corner(current_from_point,trace_halfwidth_max,door_right_corner,door_left_corner);      }      break;    }    if (curr_door_ind >= current_target_door_index) {      end_of_trace=true;      break;    }    ArtBacktrackElement next_to_info=backtrack_array[curr_door_ind];    PlaPointFloat next_left_corner=calc_door_left_corner(next_to_info);    PlaPointFloat next_right_corner=calc_door_right_corner(next_to_info);    if (current_from_point.side_of(next_left_corner,next_right_corner) != PlaSide.ON_THE_RIGHT) {      if (door_left_corner == null && current_from_point.scalar_product(previous_from_point,next_left_corner) >= 0) {        next_left_corner=null;      }      if (door_right_corner == null && current_from_point.scalar_product(previous_from_point,next_right_corner) >= 0) {        next_right_corner=null;      }      if (next_left_corner == null && next_right_corner == null) {        System.out.println("LocateFoundConnectionAlgo.calculate_next_trace_corner: next door passed unexpected");        ++current_to_door_index;        result.add(current_from_point);        return result;      }    }    if (door_left_corner != null && door_right_corner != null) {      if (next_left_corner.side_of(current_from_point,door_right_corner) == PlaSide.ON_THE_RIGHT) {        new_door_ind=right_ind + 1;        result_corner=right_turn_next_corner(current_from_point,trace_halfwidth_max,door_right_corner,next_left_corner);        break;      }      if (next_right_corner.side_of(current_from_point,door_left_corner) == PlaSide.ON_THE_LEFT) {        new_door_ind=left_ind + 1;        result_corner=left_turn_next_corner(current_from_point,trace_halfwidth_max,door_left_corner,next_right_corner);        break;      }    }    boolean visability_range_gets_smaller_on_the_right_side=(door_right_corner == null);    if (door_right_corner != null && next_right_corner.side_of(current_from_point,door_right_corner) != PlaSide.ON_THE_RIGHT) {      PlaPointFloat curr_tangential_point=current_from_point.left_tangential_point(next_right_corner,trace_halfwidth_max);      if (curr_tangential_point != null) {        PlaSegmentFloat check_line=new PlaSegmentFloat(current_from_point,curr_tangential_point);        if (check_line.segment_distance(door_right_corner) >= trace_halfwidth_max) {          visability_range_gets_smaller_on_the_right_side=true;        }      }    }    if (visability_range_gets_smaller_on_the_right_side) {      door_right_corner=next_right_corner;      right_ind=curr_door_ind;    }    boolean visability_range_gets_smaller_on_the_left_side=(door_left_corner == null);    if (door_left_corner != null && next_left_corner.side_of(current_from_point,door_left_corner) != PlaSide.ON_THE_LEFT) {      PlaPointFloat curr_tangential_point=current_from_point.right_tangential_point(next_left_corner,trace_halfwidth_max);      if (curr_tangential_point != null) {        PlaSegmentFloat check_line=new PlaSegmentFloat(current_from_point,curr_tangential_point);        if (check_line.segment_distance(door_left_corner) >= trace_halfwidth_max) {          visability_range_gets_smaller_on_the_left_side=true;        }      }    }    if (visability_range_gets_smaller_on_the_left_side) {      door_left_corner=next_left_corner;      left_ind=curr_door_ind;    }    ++curr_door_ind;  }  if (end_of_trace) {    PlaPointFloat nearest_point=current_target_shape.nearest_point_approx(current_from_point);    result_corner=nearest_point;    if (left_tangent_point != null && nearest_point.side_of(current_from_point,left_tangent_point) == PlaSide.ON_THE_LEFT) {      new_door_ind=left_ind + 1;      PlaPointFloat target_right_corner=current_target_shape.corner_approx(current_target_shape.index_of_right_most_corner(current_from_point));      PlaPointFloat curr_corner=right_left_tangential_point(current_from_point,target_right_corner,door_left_corner,trace_halfwidth_max);      if (curr_corner != null) {        result_corner=curr_corner;        end_of_trace=false;      }    } else     if (right_tangent_point != null && nearest_point.side_of(current_from_point,right_tangent_point) == PlaSide.ON_THE_RIGHT) {      PlaPointFloat target_left_corner=current_target_shape.corner_approx(current_target_shape.index_of_left_most_corner(current_from_point));      new_door_ind=right_ind + 1;      PlaPointFloat curr_corner=left_right_tangential_point(current_from_point,target_left_corner,door_right_corner,trace_halfwidth_max);      if (curr_corner != null) {        result_corner=curr_corner;        end_of_trace=false;      }    }  }  if (end_of_trace) {    new_door_ind=current_target_door_index;  }  PlaSegmentFloat check_line=new PlaSegmentFloat(current_from_point,result_corner);  int check_from_door_index=Math.max(current_to_door_index - 5,current_from_door_index + 1);  PlaPointFloat corrected_result=null;  int corrected_door_ind=0;  for (int index=check_from_door_index; index < new_door_ind; ++index) {    PlaPointFloat curr_left_corner=calc_door_left_corner(backtrack_array[index]);    double curr_dist=check_line.segment_distance(curr_left_corner);    if (Math.abs(curr_dist) < trace_halfwidth_middle) {      PlaPointFloat curr_corrected_result=right_left_tangential_point(check_line.point_a,check_line.point_b,curr_left_corner,trace_halfwidth_max);      if (curr_corrected_result != null) {        if (corrected_result == null || curr_corrected_result.side_of(current_from_point,corrected_result) == PlaSide.ON_THE_RIGHT) {          corrected_door_ind=index;          corrected_result=curr_corrected_result;        }      }    }    PlaPointFloat curr_right_corner=calc_door_right_corner(backtrack_array[index]);    curr_dist=check_line.segment_distance(curr_right_corner);    if (Math.abs(curr_dist) < trace_halfwidth_middle) {      PlaPointFloat curr_corrected_result=left_right_tangential_point(check_line.point_a,check_line.point_b,curr_right_corner,trace_halfwidth_max);      if (curr_corrected_result != null) {        if (corrected_result == null || curr_corrected_result.side_of(current_from_point,corrected_result) == PlaSide.ON_THE_LEFT) {          corrected_door_ind=index;          corrected_result=curr_corrected_result;        }      }    }  }  if (corrected_result != null) {    result_corner=corrected_result;    new_door_ind=Math.max(corrected_door_ind,current_to_door_index);  }  current_to_door_index=new_door_ind;  if (result_corner != null && result_corner != current_from_point) {    result.add(result_corner);  }  return result;}  }
class C{  public Enumeration oids(){  return ordering.elements();}  }
class C{  protected void trimForLimit(){  if (limit >= 0) {    int size=edits.size();    if (size > limit) {      int halfLimit=limit / 2;      int keepFrom=indexOfNextAdd - 1 - halfLimit;      int keepTo=indexOfNextAdd - 1 + halfLimit;      if (keepTo - keepFrom + 1 > limit) {        keepFrom++;      }      if (keepFrom < 0) {        keepTo-=keepFrom;        keepFrom=0;      }      if (keepTo >= size) {        int delta=size - keepTo - 1;        keepTo+=delta;        keepFrom+=delta;      }      trimEdits(keepTo + 1,size - 1);      trimEdits(0,keepFrom - 1);    }  }}  }
class C{  public static Pair<X509Certificate,PrivateKey> generateCertificate(String commonName,String algorithm,int keySize,String signatureAlgorithm,String validFrom,String validTo) throws Exception {  return generateCertificate(commonName,"None","None","None","None","None",algorithm,keySize,signatureAlgorithm,validFrom,validTo);}  }
class C{  public boolean read(ObjectInputStream p_object_stream){  try {    WindowSavedAttributes saved_attributes=(WindowSavedAttributes)p_object_stream.readObject();    setBounds(saved_attributes.bounds);    setVisible(saved_attributes.is_visible);    return true;  } catch (  Exception e) {    System.out.println("SelectParameterWindow.read: read failed");    return false;  }}  }
class C{  private void resetUserParameters(){  try {    if (null == m_userParams)     return;    int n=m_userParams.size();    for (int i=n - 1; i >= 0; i--) {      Arg arg=(Arg)m_userParams.elementAt(i);      QName name=arg.getQName();      String s1=name.getNamespace();      String s2=name.getLocalPart();      setParameter(s2,s1,arg.getVal().object());    }  } catch (  java.util.NoSuchElementException nsee) {  }}  }
class C{  public X509Name(boolean reverse,String dirName){  this(reverse,DefaultLookUp,dirName);}  }
class C{  public short compareDocumentPosition(Node other) throws DOMException {  return 0;}  }
class C{  @Override public void makeImmutable(){  if (mutable) {    if (attrs != null) {      Iterator iter=attrs.iterator();      while (iter.hasNext()) {        Attribute attr=(Attribute)iter.next();        attr.makeImmutable();      }      attrs=Collections.unmodifiableList(attrs);    }    if (encAttrs != null) {      encAttrs=Collections.unmodifiableList(encAttrs);    }    mutable=false;  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof Point) {    Point pt=(Point)obj;    return (x == pt.x) && (y == pt.y);  }  return super.equals(obj);}  }
class C{  public int transformToGlobalRTF(ElemTemplateElement templateParent) throws TransformerException {  DTM dtmFrag=m_xcontext.getGlobalRTFDTM();  return transformToRTF(templateParent,dtmFrag);}  }
class C{  public LifecycleException(){  super();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  List optionData=restoreOptionsData();  CCCheckBox cbForceResetPwd=(CCCheckBox)getChild(CB_FORCE_RESET_PWD);  boolean forceResetPwd=cbForceResetPwd.isChecked();  UMUserPasswordResetOptionsModel model=(UMUserPasswordResetOptionsModel)getModel();  String userId=(String)getPageSessionAttribute(EntityEditViewBean.UNIVERSAL_ID);  try {    model.modifyUserOption(optionData,userId,forceResetPwd);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",model.getLocalizedString("profile.updated"));  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public final void testGetSeed02(){  ECFieldFp f=new ECFieldFp(BigInteger.valueOf(23L));  BigInteger a=BigInteger.ONE;  BigInteger b=BigInteger.valueOf(19L);  byte[] seed=new byte[24];  EllipticCurve c=new EllipticCurve(f,a,b,seed.clone());  byte[] seedRet=c.getSeed();  seedRet[0]=(byte)1;  assertTrue(Arrays.equals(seed,c.getSeed()));}  }
class C{  public ReflectionException(java.lang.Exception e,String message){  super(message);  exception=e;}  }
class C{  public static int px2dip(Context context,float pxValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  public ClosedByInterruptException(){}  }
class C{  public void process(Vector notifications){  processPLLNotifications(notifications);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  forwardToEntityServiceViewBean();}  }
class C{  public synchronized void readDone(){  if (--currentReaders == 0) {    notify_writers();  }}  }
class C{  @Override public int doFinal(ByteBuffer inBuffer,ByteBuffer outBuffer) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  int n=cipher.update(inBuffer,outBuffer);  return n + cipher.doFinal(outBuffer);}  }
class C{  public DigitalSignature(String algorithm){  try {    sha=MessageDigest.getInstance("SHA-1");    if ("RSA".equals(algorithm)) {      md5=MessageDigest.getInstance("MD5");      cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");      signature=null;    } else     if ("DSA".equals(algorithm)) {      signature=Signature.getInstance("NONEwithDSA");      cipher=null;      md5=null;    } else {      cipher=null;      signature=null;      md5=null;    }  } catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }catch (  NoSuchPaddingException e) {    throw new AssertionError(e);  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton2Request(event);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void testCertPathBuilder04() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathBuilder.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown thrown");    } catch (    IllegalArgumentException e) {    }    try {      CertPathBuilder.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  @Override public void markActive(Index entity){  BoundStatement bs=new BoundStatement(markActiveStmt);  bindIdentifier(bs,entity.getId());  getSession().execute(bs);}  }
class C{  public Mp4TagCoverField(ByteBuffer raw,Mp4FieldType imageType) throws UnsupportedEncodingException {  super(Mp4FieldKey.ARTWORK.getFieldName(),raw);  this.imageType=imageType;  if (!Mp4FieldType.isCoverArtType(imageType)) {    logger.warning(ErrorMessage.MP4_IMAGE_FORMAT_IS_NOT_TO_EXPECTED_TYPE.getMsg(imageType));  }}  }
class C{  public static boolean isValidServerId(String serverID){  if (isSiteId(serverID)) {    return false;  }  return idToServerTable.containsKey(serverID);}  }
class C{  public XMPDateTimeImpl(){}  }
class C{  public boolean isOtherReadable(){  return is(encodedPermission,OTHER_READABLE);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType documentTypeNode;  int nodeType;  doc=(Document)load("staff",false);  documentTypeNode=doc.getDoctype();  assertNotNull("doctypeNotNull",documentTypeNode);  nodeType=(int)documentTypeNode.getNodeType();  assertEquals("nodeType",10,nodeType);}  }
class C{  private synchronized void commit(CSN csn,LDAPUpdateMsg msg){  final PendingChange curChange=pendingChanges.get(csn);  if (curChange == null) {    throw new NoSuchElementException();  }  curChange.setCommitted(true);  curChange.setMsg(msg);}  }
class C{  public static void enableStrictMode(){  if (isGingerbread()) {    StrictMode.ThreadPolicy.Builder threadPolicyBuilder=new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog();    StrictMode.VmPolicy.Builder vmPolicyBuilder=new StrictMode.VmPolicy.Builder().detectAll().penaltyLog();    if (isHoneycomb()) {      threadPolicyBuilder.penaltyFlashScreen();      vmPolicyBuilder.setClassInstanceLimit(MainActivity.class,1);    }    StrictMode.setThreadPolicy(threadPolicyBuilder.build());    StrictMode.setVmPolicy(vmPolicyBuilder.build());  }}  }
class C{  @Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if ("/xacml".equals(request.getServletPath())) {    restletXACMLHttpServlet.service(request,response);  } else   if ("/oauth2".equals(request.getServletPath())) {    restletOAuth2ServiceServlet.service(new HttpServletRequestWrapper(request),response);  } else   if ("/uma".equals(request.getServletPath())) {    restletUMAServiceServlet.service(new HttpServletRequestWrapper(request),response);  }}  }
class C{  private void startConnectorNoClientCertificate() throws Exception {  try {    HashMap<String,Object> env=new HashMap<>();    SslRMIClientSocketFactory rmiClientSockeyFactory=null;    DirectoryRMIServerSocketFactory rmiServerSockeyFactory=null;    if (jmxConnectionHandler.isUseSSL()) {      if (logger.isTraceEnabled()) {        logger.trace("SSL connection");      }      KeyManagerProvider provider=DirectoryServer.getKeyManagerProvider(jmxConnectionHandler.getKeyManagerProviderDN());      final KeyManager[] keyManagers;      if (provider == null) {        keyManagers=new NullKeyManagerProvider().getKeyManagers();      } else {        final SortedSet<String> nicknames=jmxConnectionHandler.getSSLServerCertNicknames();        keyManagers=nicknames == null ? provider.getKeyManagers() : SelectableCertificateKeyManager.wrap(provider.getKeyManagers(),nicknames);      }      SSLContext ctx=SSLContext.getInstance("TLSv1");      ctx.init(keyManagers,null,null);      SSLSocketFactory ssf=ctx.getSocketFactory();      rmiServerSockeyFactory=new DirectoryRMIServerSocketFactory(ssf,false);      env.put("jmx.remote.rmi.server.socket.factory",rmiServerSockeyFactory);      rmiClientSockeyFactory=new SslRMIClientSocketFactory();      env.put("jmx.remote.rmi.client.socket.factory",rmiClientSockeyFactory);    } else {      if (logger.isTraceEnabled()) {        logger.trace("UNSECURE CONNECTION");      }    }    if (logger.isTraceEnabled()) {      logger.trace("Add RmiAuthenticator into JMX map");    }    rmiAuthenticator=new RmiAuthenticator(jmxConnectionHandler);    env.put(JMXConnectorServer.AUTHENTICATOR,rmiAuthenticator);    String uri="org.opends.server.protocols.jmx.client-unknown";    String serviceUrl="service:jmx:rmi:///jndi/rmi://" + jmxConnectionHandler.getListenAddress().getHostName() + ":"+ jmxConnectionHandler.getListenPort()+ "/"+ uri;    JMXServiceURL url=new JMXServiceURL(serviceUrl);    if (logger.isTraceEnabled()) {      logger.trace("Create and start the JMX RMI connector");    }    OpendsRMIJRMPServerImpl opendsRmiConnectorServer=new OpendsRMIJRMPServerImpl(jmxConnectionHandler.getRmiPort(),rmiClientSockeyFactory,rmiServerSockeyFactory,env);    jmxRmiConnectorNoClientCertificate=new RMIConnectorServer(url,env,opendsRmiConnectorServer,mbs);    jmxRmiConnectorNoClientCertificate.start();    ObjectName name=new ObjectName(jmxRmiConnectorNoClientCertificateName);    mbs.registerMBean(jmxRmiConnectorNoClientCertificate,name);    rmiVersion=opendsRmiConnectorServer.getVersion();    if (logger.isTraceEnabled()) {      logger.trace("JMX RMI connector Started");    }  } catch (  Exception e) {    logger.traceException(e);    throw e;  }}  }
class C{  public Object[] toArray(){  return al.toArray();}  }
class C{  private boolean processSASLBind() throws DirectoryException {  SASLMechanismHandler<?> saslHandler=DirectoryServer.getSASLMechanismHandler(saslMechanism);  if (saslHandler == null) {    throw new DirectoryException(ResultCode.AUTH_METHOD_NOT_SUPPORTED,ERR_BIND_OPERATION_UNKNOWN_SASL_MECHANISM.get(saslMechanism));  }  if (!invokePreOpPlugins()) {    return false;  }  saslHandler.processSASLBind(this);  Entry saslAuthUserEntry=getSASLAuthUserEntry();  if (DirectoryServer.lockdownMode()) {    ResultCode resultCode=getResultCode();    if (resultCode != ResultCode.SASL_BIND_IN_PROGRESS && (resultCode != ResultCode.SUCCESS || saslAuthUserEntry == null || !ClientConnection.hasPrivilege(saslAuthUserEntry,BYPASS_LOCKDOWN))) {      throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_REJECTED_LOCKDOWN_MODE.get());    }  }  if (saslAuthUserEntry != null) {    setUserEntryDN(saslAuthUserEntry.getName());    authPolicyState=AuthenticationPolicyState.forUser(saslAuthUserEntry,false);    if (authPolicyState.isPasswordPolicy()) {      checkUnverifiedPasswordPolicyState(saslAuthUserEntry,saslHandler);    }  }  ResultCode resultCode=getResultCode();  if (resultCode == ResultCode.SUCCESS) {    if (authPolicyState != null && authPolicyState.isPasswordPolicy()) {      checkVerifiedPasswordPolicyState(saslAuthUserEntry,saslHandler);      PasswordPolicyState pwPolicyState=(PasswordPolicyState)authPolicyState;      if (saslHandler.isPasswordBased(saslMechanism) && pwPolicyState.mustChangePassword()) {        mustChangePassword=true;      }      if (isFirstWarning) {        pwPolicyState.setWarnedTime();        int numSeconds=pwPolicyState.getSecondsUntilExpiration();        LocalizableMessage m=WARN_BIND_PASSWORD_EXPIRING.get(secondsToTimeString(numSeconds));        pwPolicyState.generateAccountStatusNotification(AccountStatusNotificationType.PASSWORD_EXPIRING,saslAuthUserEntry,m,AccountStatusNotification.createProperties(pwPolicyState,false,numSeconds,null,null));      }      if (isGraceLogin) {        pwPolicyState.updateGraceLoginTimes();      }      pwPolicyState.setLastLoginTime();    }    if (saslAuthUserEntry != null) {      setResourceLimits(saslAuthUserEntry);    }  } else   if (resultCode == ResultCode.SASL_BIND_IN_PROGRESS) {    return false;  } else {    if (authPolicyState != null && authPolicyState.isPasswordPolicy()) {      PasswordPolicyState pwPolicyState=(PasswordPolicyState)authPolicyState;      if (saslHandler.isPasswordBased(saslMechanism) && pwPolicyState.getAuthenticationPolicy().getLockoutFailureCount() > 0) {        updateFailureCount(saslAuthUserEntry,pwPolicyState);      }    }  }  return true;}  }
class C{  public MBeanServerDelegate(){  stamp=getStamp();  broadcaster=new NotificationBroadcasterSupport();}  }
class C{  public Set<BrdItem> overlapping_items_with_clearance(ShapeTile p_shape,int p_layer,NetNosList p_ignore_net_nos,int p_clearance_class){  AwtreeShapeSearch default_tree=search_tree_manager.get_default_tree();  return default_tree.find_overlap_items_with_clearance(p_shape,p_layer,p_ignore_net_nos,p_clearance_class);}  }
class C{  public synchronized void stop() throws Exception {  stop(interval);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public List<Entitlement> evaluate(String realm,Subject subject,Set<String> resourceNames,Map<String,Set<String>> environment) throws EntitlementException {  if ((resourceNames == null) || resourceNames.isEmpty()) {    throw new EntitlementException(424);  }  List<Entitlement> results=new ArrayList<Entitlement>();  for (  String res : resourceNames) {    List<Entitlement> r=evaluate(realm,subject,res,environment,false);    if ((r != null) && !r.isEmpty()) {      results.addAll(r);    }  }  return results;}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public void addResourceData(SMDiscoEntryData data){  try {    data.setDiscoStr(isUserResourceOffering());    discoData.add(data);  } catch (  AMConsoleException e) {    debug.error("SMDiscoveryServiceData.addResourceData",e);  }}  }
class C{  public void addToParent(Element headerE){  Document doc=headerE.getOwnerDocument();  Element correlationHeaderE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING,SOAPBindingConstants.PTAG_CORRELATION);  headerE.appendChild(correlationHeaderE);  correlationHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_MESSAGE_ID,messageID);  if (refToMessageID != null) {    correlationHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_REF_TO_MESSAGE_ID,refToMessageID);  }  correlationHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_TIMESTAMP,DateUtils.toUTCDateFormat(timestamp));  correlationHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_id,messageID);  if (mustUnderstand != null) {    correlationHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_MUSTUNDERSTAND,Utils.BooleanToString(mustUnderstand));  }  if (actor != null) {    correlationHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_ACTOR,actor);  }}  }
class C{  @Indexable(type=IndexableType.REINDEX) @Override public Foo updateFoo(Foo foo){  return fooPersistence.update(foo);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.RetryAfterElement createRetryAfterElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.RetryAfterElementImpl();}  }
class C{  void checkMethodName(byte refKind,String name) throws NoSuchMethodException {  if (name.startsWith("<") && refKind != REF_newInvokeSpecial)   throw new NoSuchMethodException("illegal method name: " + name);}  }
class C{  private static ODatabaseDocumentTx checkDB(String dbURL,String user,String password,JsonValue completeConfig) throws InvalidException {  ODatabaseDocumentTx db=new ODatabaseDocumentTx(dbURL);  if (isLocalDB(dbURL) || isMemoryDB(dbURL)) {    if (db.exists()) {      logger.info("Using DB at {}",dbURL);      db.open(user,password);      populateSample(db,completeConfig);    } else {      logger.info("DB does not exist, creating {}",dbURL);      db.create();      OSecurity security=db.getMetadata().getSecurity();      security.dropUser(OUser.ADMIN);      security.createUser(user,password,security.getRole(ORole.ADMIN));      populateSample(db,completeConfig);    }  } else {    logger.info("Using remote DB at {}",dbURL);  }  return db;}  }
class C{  public static int parseStringAsInt(String in) throws IndexParseFieldException {  try {    return Integer.parseInt(in);  } catch (  NumberFormatException e) {    throw new IndexParseFieldException(in,e);  }}  }
class C{  public static char reverseBytes(char ch){  return (char)(((ch & 0xFF00) >> 8) | (ch << 8));}  }
class C{  public static List sortItems(Collection collection,Locale locale){  List sorted=Collections.EMPTY_LIST;  if ((collection != null) && !collection.isEmpty()) {    sorted=new ArrayList(collection);    Collator collator=Collator.getInstance(locale);    Collections.sort(sorted,collator);  }  return sorted;}  }
class C{  public Map modifyDiscoEntries(String userID,List removes,List inserts){  if (DiscoUtils.debug.messageEnabled()) {    DiscoUtils.debug.message("GlobalDiscoEntryHandler.modifyDisco" + "Entries: init ");  }  Map result=new HashMap();  result.put(STATUS_CODE,DiscoConstants.STATUS_FAILED);  Map discoEntries=new HashMap();  try {    registerDiscoveryService();    AMIdentity amId=getRealmIdentity();    DiscoEntryHandlerImplUtils.getGlobalDiscoEntries(getRealmIdentity(),DYNAMIC_ATTR_NAME,discoEntries,userID);    if ((removes != null) && (removes.size() != 0)) {      if (!DiscoEntryHandlerImplUtils.handleRemoves(discoEntries,removes)) {        return result;      }    }    Set entries=new HashSet();    entries.addAll(discoEntries.values());    List newEntryIDs=null;    if ((inserts != null) && (inserts.size() != 0)) {      Map insertResults=DiscoEntryHandlerImplUtils.handleInserts(entries,inserts);      if (!((String)insertResults.get(STATUS_CODE)).equals(DiscoConstants.STATUS_OK)) {        return result;      }      newEntryIDs=(List)insertResults.get(NEW_ENTRY_IDS);    }    if (!DiscoEntryHandlerImplUtils.setGlobalDiscoEntries(amId,DYNAMIC_ATTR_NAME,entries)) {      return result;    } else {      result.put(STATUS_CODE,DiscoConstants.STATUS_OK);      if ((newEntryIDs != null) && (newEntryIDs.size() != 0)) {        result.put(NEW_ENTRY_IDS,newEntryIDs);      }      return result;    }  } catch (  DiscoveryException de) {    DiscoUtils.debug.error("GlobalDiscoEntryHandler.modify" + "DiscoEntries: Exception",de);    return result;  }catch (  Exception ex) {    DiscoUtils.debug.error("GlobalDiscoEntryHandler.modify" + "DiscoEntries: Exception",ex);    return result;  }}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.CanonicalizationMethodType createCanonicalizationMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.CanonicalizationMethodTypeImpl();}  }
class C{  public boolean isApplicable(AciTargetMatchContext matchCtx){  if (matchCtx.getControlOID() == null) {    return false;  }  boolean ret=isApplicable(matchCtx.getControlOID());  if (EnumTargetOperator.NOT_EQUALITY.equals(op)) {    return !ret;  }  return ret;}  }
class C{  public SubjectDelegationPermission(String name){  super(name);}  }
class C{  private static boolean checkSingleExtension(final String fileExt,final ResourceType type){  Scanner scanner=new Scanner(type.getDeniedExtensions()).useDelimiter(",");  while (scanner.hasNext()) {    if (scanner.next().equalsIgnoreCase(fileExt)) {      return false;    }  }  Scanner scanner1=new Scanner(type.getAllowedExtensions()).useDelimiter(",");  while (scanner1.hasNext()) {    if (scanner1.next().equalsIgnoreCase(fileExt)) {      return true;    }  }  return false;}  }
class C{  private MethodInfo createMethod(Method method){  ImmutableMap.Builder<String,FieldInfo> fields=new ImmutableMap.Builder<>();  TypeInfo requestBodyType=null;  for (  String fieldName : apiaryConfig.getMethodParams(method.getName())) {    Type containerType=apiaryConfig.getType(method.getRequestTypeUrl());    Field field=apiaryConfig.getField(containerType,fieldName);    if (fieldName.equals(DiscoveryImporter.REQUEST_FIELD_NAME)) {      requestBodyType=createTypeInfo(field,method);      continue;    }    fields.put(field.getName(),createFieldInfo(field,containerType,method));  }  TypeInfo requestType=createTypeInfo(method,true);  TypeInfo responseType=null;  String responseTypeUrl=typeNameGenerator.getResponseTypeUrl(method.getResponseTypeUrl());  if (!Strings.isNullOrEmpty(responseTypeUrl)) {    responseType=createTypeInfo(method,false);  }  boolean isPageStreaming=isPageStreaming(method);  FieldInfo pageStreamingResourceField=null;  if (isPageStreaming) {    Type containerType=apiaryConfig.getType(responseTypeUrl);    Field field=getPageStreamingResourceField(containerType);    if (field != null) {      pageStreamingResourceField=createFieldInfo(field,containerType,method);    }  }  boolean hasMediaUpload=apiaryConfig.getMediaUpload().contains(method.getName());  MethodInfo methodInfo=MethodInfo.newBuilder().verb(apiaryConfig.getHttpMethod(method.getName())).nameComponents(methodNameComponents.get(method.getName())).fields(fields.build()).requestType(requestType).requestBodyType(requestBodyType).responseType(responseType).isPageStreaming(isPageStreaming).pageStreamingResourceField(pageStreamingResourceField).isPageStreamingResourceSetterInRequestBody(false).hasMediaUpload(hasMediaUpload).hasMediaDownload(!hasMediaUpload && apiaryConfig.getMediaDownload().contains(method.getName())).authScopes(apiaryConfig.getAuthScopes(method.getName())).build();  return methodInfo;}  }
class C{  public NSObject put(String key,NSObject obj){  if (key == null)   return null;  if (obj == null)   return dict.get(key);  return dict.put(key,obj);}  }
class C{  public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){  Window window=activity.getWindow();  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);  View mChildView=mContentView.getChildAt(0);  if (mChildView != null) {    ViewCompat.setFitsSystemWindows(mChildView,false);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int statusBarHeight=getStatusBarHeight(activity);    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);      if (hideStatusBarBackground) {        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.setStatusBarColor(Color.parseColor("#00000000"));      } else {        window.setStatusBarColor(Color.parseColor("#55000000"));      }      if (mChildView != null) {        ViewCompat.requestApplyInsets(mChildView);      }    } else {      if (mChildView != null && mChildView.getLayoutParams() != null && mChildView.getLayoutParams().height == statusBarHeight) {        mContentView.removeView(mChildView);        mChildView=mContentView.getChildAt(0);      }      if (mChildView != null) {        FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();        if (lp != null && lp.topMargin >= statusBarHeight) {          lp.topMargin-=statusBarHeight;          mChildView.setLayoutParams(lp);        }      }    }  }}  }
class C{  public boolean hasNext(){  scan();  return currentBlock != -1;}  }
class C{  public void endCDATA() throws SAXException {  m_handler.endCDATA();}  }
class C{  public boolean isActive(){  if (stub != null) {    return stub.isActive();  } else {    return false;  }}  }
class C{  @Deprecated public static boolean isUnique(){  return true;}  }
class C{  public final int _parent2(int identity){  if (identity < m_blocksize)   return m_parent_map0[identity]; else   return m_parent_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  public void testCase11(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=-1;  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public DirectoryIteratorException(IOException cause){  super(Objects.requireNonNull(cause));}  }
class C{  public static void centerGoldenMean(Window comp,Component ref){  comp.setLocationRelativeTo(ref);  if (ref != null && ref.isVisible()) {    int refY=ref.getY();    int refHeight=ref.getHeight();    int compHeight=comp.getPreferredSize().height;    int newY=refY + (int)(refHeight * 0.3819 - compHeight * 0.5);    Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();    if (newY > 0 && screenSize.height > newY + compHeight) {      comp.setLocation(comp.getX(),newY);    }  }}  }
class C{  private Polypoint(ArrayList<PlaPointInt> p_corners){  point_alist=p_corners;}  }
class C{  public static AlertDialog create(Context context,CharSequence message){  if (SDK_INT > FROYO) {    ProgressDialog dialog;    if (SDK_INT >= ICE_CREAM_SANDWICH)     dialog=new LightProgressDialog(context,message); else {      dialog=new ProgressDialog(context);      dialog.setInverseBackgroundForced(true);    }    dialog.setMessage(message);    dialog.setIndeterminate(true);    dialog.setProgressStyle(STYLE_SPINNER);    dialog.setIndeterminateDrawable(context.getResources().getDrawable(R.drawable.spinner));    return dialog;  } else {    AlertDialog dialog=LightAlertDialog.create(context);    dialog.setInverseBackgroundForced(true);    View view=LayoutInflater.from(context).inflate(R.layout.dialog_progress,null);    ((TextView)view.findViewById(R.id.tv_loading)).setText(message);    dialog.setView(view);    return dialog;  }}  }
class C{  public void deleteUsers(Set users) throws AMException, SSOException {  Iterator iter=users.iterator();  while (iter.hasNext()) {    String userDN=(String)iter.next();    AMUser user=new AMUserImpl(super.token,userDN);    user.delete();  }}  }
class C{  public StreamResult(String systemId){  this.systemId=systemId;}  }
class C{  public void warn(SourceLocator srcLctr,String msg) throws TransformerException {  warn(srcLctr,null,null,msg,null);}  }
class C{  public static String displayXML(String input){  debug.message("In displayXML ");  StringCharacterIterator iter=new StringCharacterIterator(input);  StringBuffer buf=new StringBuffer();  for (char c=iter.first(); c != CharacterIterator.DONE; c=iter.next()) {    if (c == '>') {      buf.append("&gt;");    } else     if (c == '<') {      buf.append("&lt;");    } else     if (c == '\n') {      buf.append("<BR>\n");    } else {      buf.append(c);    }  }  return buf.toString();}  }
class C{  private Node<K,V> findNode(Comparable<? super K> key){  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c == 0)       return n;      if (c < 0)       return null;      b=n;      n=f;    }  }}  }
class C{  public void stop(){  if (logger.isTraceEnabled() && !shutdown) {    debugInfo("is stopping and will close the connection to RS(" + getRsServerId() + ")");  }synchronized (startStopLock) {    if (shutdown) {      return;    }    domain.publishReplicaOfflineMsg();    shutdown=true;    setConnectedRS(ConnectedRS.stopped());    stopRSHeartBeatMonitoring();    stopChangeTimeHeartBeatPublishing();    deregisterReplicationMonitor();  }}  }
class C{  ZoneOffsetTransitionRule(Month month,int dayOfMonthIndicator,DayOfWeek dayOfWeek,LocalTime time,boolean timeEndOfDay,TimeDefinition timeDefnition,ZoneOffset standardOffset,ZoneOffset offsetBefore,ZoneOffset offsetAfter){  this.month=month;  this.dom=(byte)dayOfMonthIndicator;  this.dow=dayOfWeek;  this.time=time;  this.timeEndOfDay=timeEndOfDay;  this.timeDefinition=timeDefnition;  this.standardOffset=standardOffset;  this.offsetBefore=offsetBefore;  this.offsetAfter=offsetAfter;}  }
class C{  public static NodeList selectNodeList(Node doc,String str,Node nsNode) throws XPathException {  SimpleNamespaceContext nsctx=new SimpleNamespaceContext(nsNode);  return selectNodeList(doc,str,nsctx);}  }
class C{  public void printStackTrace(java.io.PrintWriter pw){  if (rootCause != null) {    String superString=super.toString();synchronized (pw) {      pw.print(superString + (superString.endsWith(".") ? "" : ".") + "  Root exception is ");      rootCause.printStackTrace(pw);    }  } else {    super.printStackTrace(pw);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS02.class,args);}  }
class C{  public boolean hasPort(){  return (getSentBy()).hasPort();}  }
class C{  public static Issuer createIssuer(String entityID) throws SAML2Exception {  String method="createIssuer: ";  Issuer issuer=assertionFactory.createIssuer();  issuer.setValue(entityID);  if (debug.messageEnabled()) {    debug.message(method + "Issuer : " + issuer.toXMLString());  }  return issuer;}  }
class C{  public final void clear(){  m_index=-1;}  }
class C{  public DashedBorder(float width){  super(width);}  }
class C{  public final void init(byte[] params) throws IOException {  if (this.initialized)   throw new IOException("already initialized");  paramSpi.engineInit(params);  this.initialized=true;}  }
class C{  public void addTextValue(String value){  TextEncodedStringSizeTerminated text=(TextEncodedStringSizeTerminated)getObject(DataTypes.OBJ_TEXT);  text.addValue(value);}  }
class C{  final V remove(Object key,int hash,Object value){  if (!tryLock())   scanAndLock(key,hash);  V oldValue=null;  try {    HashEntry<K,V>[] tab=table;    int index=(tab.length - 1) & hash;    HashEntry<K,V> e=entryAt(tab,index);    HashEntry<K,V> pred=null;    while (e != null) {      K k;      HashEntry<K,V> next=e.next;      if ((k=e.key) == key || (e.hash == hash && key.equals(k))) {        V v=e.value;        if (value == null || value == v || value.equals(v)) {          if (pred == null)           setEntryAt(tab,index,next); else           pred.setNext(next);          ++modCount;          --count;          oldValue=v;        }        break;      }      pred=e;      e=next;    }  }  finally {    unlock();  }  return oldValue;}  }
class C{  public void addAttributes(final List<JKKeyValue<String,String>> attributes){  for (  final JKKeyValue<String,String> keyValue : attributes) {    addAttribue(keyValue.getKey(),keyValue.getValue());  }}  }
class C{  public String resolveRelativeUri(String uri){  if (uri.startsWith("/") || uri.startsWith(File.separator)) {    return uri;  } else {    return baseURI + uri;  }}  }
class C{  public Bounds(String reason){  super(reason);}  }
class C{  public SMSException(String message,Throwable t,String errorCode){  super(message,t);  rootCause=t;  this.errorCode=errorCode;  this.message=message + ": " + getL10NMessage(java.util.Locale.ENGLISH);  exceptionMapper();}  }
class C{  public int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(cfbV,0,cfbOutV,0);  for (int i=0; i < blockSize; i++) {    out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]);  }  System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize);  System.arraycopy(out,outOff,cfbV,cfbV.length - blockSize,blockSize);  return blockSize;}  }
class C{  protected void insertUpdate(DefaultDocumentEvent chng,AttributeSet attr){  removed.removeAllElements();  added.removeAllElements();  BranchElement lineMap=(BranchElement)getDefaultRootElement();  int offset=chng.getOffset();  int length=chng.getLength();  if (offset > 0) {    offset-=1;    length+=1;  }  int index=lineMap.getElementIndex(offset);  Element rmCandidate=lineMap.getElement(index);  int rmOffs0=rmCandidate.getStartOffset();  int rmOffs1=rmCandidate.getEndOffset();  int lastOffset=rmOffs0;  try {    if (s == null) {      s=new Segment();    }    getContent().getChars(offset,length,s);    boolean hasBreaks=false;    for (int i=0; i < length; i++) {      char c=s.array[s.offset + i];      if (c == '\n') {        int breakOffset=offset + i + 1;        added.addElement(createLeafElement(lineMap,null,lastOffset,breakOffset));        lastOffset=breakOffset;        hasBreaks=true;      }    }    if (hasBreaks) {      removed.addElement(rmCandidate);      if ((offset + length == rmOffs1) && (lastOffset != rmOffs1) && ((index + 1) < lineMap.getElementCount())) {        Element e=lineMap.getElement(index + 1);        removed.addElement(e);        rmOffs1=e.getEndOffset();      }      if (lastOffset < rmOffs1) {        added.addElement(createLeafElement(lineMap,null,lastOffset,rmOffs1));      }      Element[] aelems=new Element[added.size()];      added.copyInto(aelems);      Element[] relems=new Element[removed.size()];      removed.copyInto(relems);      ElementEdit ee=new ElementEdit(lineMap,index,relems,aelems);      chng.addEdit(ee);      lineMap.replace(index,relems.length,aelems);    }    if (Utilities.isComposedTextAttributeDefined(attr)) {      insertComposedTextUpdate(chng,attr);    }  } catch (  BadLocationException e) {    throw new Error("Internal error: " + e.toString());  }  super.insertUpdate(chng,attr);}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void resume(){synchronized (threadRefs) {    for (    Thread thread : threads) {      thread.resume();    }  }synchronized (groups) {    for (    ThreadGroup group : groups) {      group.resume();    }  }}  }
class C{  public InputMethodHighlight(boolean selected,int state,int variation,Map<TextAttribute,?> style){  this.selected=selected;  if (!(state == RAW_TEXT || state == CONVERTED_TEXT)) {    throw new IllegalArgumentException("unknown input method highlight state");  }  this.state=state;  this.variation=variation;  this.style=style;}  }
class C{  private void registerHost(Host host){  String[] aliases=host.findAliases();  mapper.addHost(host.getName(),aliases,host);  for (  Container container : host.findChildren()) {    if (container.getState().isAvailable()) {      registerContext((Context)container);    }  }  if (log.isDebugEnabled()) {    log.debug(sm.getString("mapperListener.registerHost",host.getName(),domain,service));  }}  }
class C{  public static Class<?> toClass(final String name){  try {    return Class.forName(name);  } catch (  final ClassNotFoundException e) {    throw new RuntimeException(e);  }}  }
class C{  JELogFileFilter(String latestFilename,long latestFileSize){  this.latestFilename=latestFilename;  this.latestFileSize=latestFileSize;}  }
class C{  public Builder url(URL url){  if (url == null)   throw new IllegalArgumentException("url == null");  HttpUrl parsed=HttpUrl.get(url);  if (parsed == null)   throw new IllegalArgumentException("unexpected url: " + url);  return url(parsed);}  }
class C{  public boolean isGenericURI(){  return (m_host != null);}  }
class C{  void writeExternal(DataOutput out) throws IOException {  out.writeInt(standardTransitions.length);  for (  long trans : standardTransitions) {    Ser.writeEpochSec(trans,out);  }  for (  ZoneOffset offset : standardOffsets) {    Ser.writeOffset(offset,out);  }  out.writeInt(savingsInstantTransitions.length);  for (  long trans : savingsInstantTransitions) {    Ser.writeEpochSec(trans,out);  }  for (  ZoneOffset offset : wallOffsets) {    Ser.writeOffset(offset,out);  }  out.writeByte(lastRules.length);  for (  ZoneOffsetTransitionRule rule : lastRules) {    rule.writeExternal(out);  }}  }
class C{  @Override public Principal authenticate(String username,String credentials){  Principal authenticatedUser=null;  for (  Realm realm : realms) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("combinedRealm.authStart",username,realm.getClass().getName()));    }    authenticatedUser=realm.authenticate(username,credentials);    if (authenticatedUser == null) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("combinedRealm.authFail",username,realm.getClass().getName()));      }    } else {      if (log.isDebugEnabled()) {        log.debug(sm.getString("combinedRealm.authSuccess",username,realm.getClass().getName()));      }      break;    }  }  return authenticatedUser;}  }
class C{  boolean isOdd(){  return isZero() ? false : ((value[offset + intLen - 1] & 1) == 1);}  }
class C{  @Override public void lifecycleEvent(LifecycleEvent event){  try {    host=(Host)event.getLifecycle();    if (host instanceof StandardHost) {      setCopyXML(((StandardHost)host).isCopyXML());      setDeployXML(((StandardHost)host).isDeployXML());      setUnpackWARs(((StandardHost)host).isUnpackWARs());      setContextClass(((StandardHost)host).getContextClass());    }  } catch (  ClassCastException e) {    log.error(sm.getString("hostConfig.cce",event.getLifecycle()),e);    return;  }  if (event.getType().equals(Lifecycle.PERIODIC_EVENT)) {    check();  } else   if (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) {    beforeStart();  } else   if (event.getType().equals(Lifecycle.START_EVENT)) {    start();  } else   if (event.getType().equals(Lifecycle.STOP_EVENT)) {    stop();  }}  }
class C{  public FilterIdAttribute(byte[] octets){  super(octets);  this.filterId=new String(octets,2,octets.length - 2);}  }
class C{  public void removeTreeModelListener(TreeModelListener l){  listenerList.remove(TreeModelListener.class,l);}  }
class C{  public static void validate(DefaultJAXBContextImpl jaxbCtx,ValidationContext context,ValidatableObject vo) throws SAXException {  try {    new MSVValidator(jaxbCtx,context,vo)._validate();  } catch (  RuntimeException e) {    context.reportEvent(vo,e);  }}  }
class C{  public boolean containsJwt(SessionID sid){  return getJWTFromSessionID(sid,false) != null;}  }
class C{  private void installSubcomponents(){  int decorationStyle=getWindowDecorationStyle();  if (decorationStyle == JRootPane.FRAME) {    createActions();    menuBar=createMenuBar();    add(menuBar);    createButtons();    add(iconifyButton);    add(toggleButton);    add(closeButton);  } else   if (decorationStyle == JRootPane.PLAIN_DIALOG || decorationStyle == JRootPane.INFORMATION_DIALOG || decorationStyle == JRootPane.ERROR_DIALOG || decorationStyle == JRootPane.COLOR_CHOOSER_DIALOG || decorationStyle == JRootPane.FILE_CHOOSER_DIALOG || decorationStyle == JRootPane.QUESTION_DIALOG || decorationStyle == JRootPane.WARNING_DIALOG) {    createActions();    createButtons();    add(closeButton);  }}  }
class C{  public String toString(){  return "[Certificate Exception: " + getMessage() + "]";}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final Table other=(Table)obj;  if (!Objects.equals(this.database,other.database)) {    return false;  }  if (!Objects.equals(this.name,other.name)) {    return false;  }  if (!Objects.equals(this.description,other.description)) {    return false;  }  if (this.getTtl() != other.getTtl()) {    return false;  }  if (this.getDeleteTtl() != other.getDeleteTtl()) {    return false;  }  return true;}  }
class C{  public void testCase2(){  byte aBytes[]={1,2,3,4,5,6,7};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  try {    aNumber.divide(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  boolean[] extractBits(BitMatrix matrix){  boolean compact=ddata.isCompact();  int layers=ddata.getNbLayers();  int baseMatrixSize=compact ? 11 + layers * 4 : 14 + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  boolean[] rawbits=new boolean[totalBitsInLayer(layers,compact)];  if (compact) {    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    int matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=compact ? (layers - i) * 4 + 9 : (layers - i) * 4 + 12;    int low=i * 2;    int high=baseMatrixSize - 1 - low;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        rawbits[rowOffset + columnOffset + k]=matrix.get(alignmentMap[low + k],alignmentMap[low + j]);        rawbits[rowOffset + 2 * rowSize + columnOffset + k]=matrix.get(alignmentMap[low + j],alignmentMap[high - k]);        rawbits[rowOffset + 4 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - k],alignmentMap[high - j]);        rawbits[rowOffset + 6 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - j],alignmentMap[low + k]);      }    }    rowOffset+=rowSize * 8;  }  return rawbits;}  }
class C{  public void unlockWrite(long stamp){  WNode h;  if (state != stamp || (stamp & WBIT) == 0L)   throw new IllegalMonitorStateException();  state=(stamp+=WBIT) == 0L ? ORIGIN : stamp;  if ((h=whead) != null && h.status != 0)   release(h);}  }
class C{  public JRadioButton(Icon icon){  this(null,icon,false);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.ManifestElement createManifestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.ManifestElementImpl();}  }
class C{  public void testClearBitNegativeInside4(){  String as="-4294967295";  String res="-4294967296";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.clearBit(number);  assertEquals(res,result.toString());}  }
class C{  static public void assertNotNull(String message,Object object){  assertTrue(message,object != null);}  }
class C{  public PlaVectorInt(int p_x,int p_y){  v_x=p_x;  v_y=p_y;}  }
class C{  public void createStructure(){  MP3File.getStructureFormatter().openHeadingElement(TYPE_FRAME,getIdentifier());  MP3File.getStructureFormatter().addElement(TYPE_FRAME_SIZE,frameSize);  statusFlags.createStructure();  encodingFlags.createStructure();  frameBody.createStructure();  MP3File.getStructureFormatter().closeHeadingElement(TYPE_FRAME);}  }
class C{  public RepeatedCharactersPasswordValidator(){  super();}  }
class C{  private void validateConverterType(Class<?> attributeType,Class<?> beanFieldType,Class<? extends Converter> converterType){  for (  java.lang.reflect.Type t : converterType.getGenericInterfaces()) {    if (t instanceof ParameterizedType) {      ParameterizedType pt=(ParameterizedType)t;      if (pt.getRawType().equals(Converter.class)) {        Class<?> from;        if (pt.getActualTypeArguments()[0] instanceof Class) {          from=(Class<?>)pt.getActualTypeArguments()[0];        } else         if (pt.getActualTypeArguments()[0] instanceof ParameterizedType) {          from=(Class<?>)((ParameterizedType)pt.getActualTypeArguments()[0]).getRawType();        } else {          throw new IllegalStateException("Can't work out what the converter type is");        }        java.lang.reflect.Type to=pt.getActualTypeArguments()[1];        if (!(isMatchingClassType(attributeType,to) || isMatchingArrayType(attributeType,to)) || !from.isAssignableFrom(beanFieldType)) {          throw new IllegalStateException("Incompatible converter types (" + from.getName() + " -> "+ to.toString()+ "). Expected "+ beanFieldType.getName()+ " -> "+ attributeType.getName());        }      }    }  }}  }
class C{  protected void acceptDrag(int dragOperation){  DropTargetContextPeer peer=getDropTargetContextPeer();  if (peer != null) {    peer.acceptDrag(dragOperation);  }}  }
class C{  protected final void deserialize(ObjectInputStream ois,Collection coll) throws IOException, ClassNotFoundException {  int count=0;  count=ois.readInt();  while (count-- > 0) {    coll.add(ois.readObject());  }}  }
class C{  public void removeItemListener(ItemListener l){  listenerList.remove(ItemListener.class,l);}  }
class C{  public Enumeration pathFromAncestorEnumeration(TreeNode ancestor){  return new PathBetweenNodesEnumeration(ancestor,this);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  System.out.println("Got an INVITE  " + request);  try {    System.out.println("shootme: got an Invite sending 180 and 200");    Response response=messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      System.out.println("Server transaction created!" + request);      System.out.println("Dialog = " + st.getDialog());    }    System.out.println("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      System.out.println(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=headerFactory.createContentTypeHeader("application","sdp");      System.out.println("response = " + response);      response.setContent(content,contentTypeHeader);    }    Dialog dialog=st.getDialog();    System.out.println("Dialog " + dialog);    dialog=sipProvider.getNewDialog(st);    System.out.println("Dialog " + st.getDialog());    if (dialog != st.getDialog()) {      throw new RuntimeException("Dialog mismatch ");    }    response=messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    this.inviteTid=st;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.write(server_version);  out.write(random);  out.writeUint8(session_id.length);  out.write(session_id);  out.write(cipher_suite.toBytes());  out.write(compression_method);  length=38 + session_id.length;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.PGPDataType createPGPDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.PGPDataTypeImpl();}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  @Override public void backgroundProcess(){  if (reloadable && modified()) {    try {      Thread.currentThread().setContextClassLoader(WebappLoader.class.getClassLoader());      if (context != null) {        context.reload();      }    }  finally {      if (context != null && context.getLoader() != null) {        Thread.currentThread().setContextClassLoader(context.getLoader().getClassLoader());      }    }  }}  }
class C{  public ConcurrentModificationException(){  super(ERR_CONCURRENT_MODIFICATION_EXCEPTION_DEFAULT.get());}  }
class C{  public void clear(){  Entry[] tab=table;  for (int index=tab.length; --index >= 0; ) {    tab[index]=null;  }  count=0;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String strong1;  String strong2;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(1);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("class");  strong1=streetAttr.getNodeName();  strong2=streetAttr.getName();  assertEqualsAutoCase("attribute","nodeName","class",strong1);  assertEqualsAutoCase("attribute","name","class",strong2);}  }
class C{  public static QueryExp anySubString(AttributeValueExp a,StringValueExp s){  return new MatchQueryExp(a,new StringValueExp("*" + escapeString(s.getValue()) + "*"));}  }
class C{  protected static String escapeXML(String s,boolean onlyASCII){  char[] cc=s.toCharArray();  int len=cc.length;  StringBuilder sb=new StringBuilder();  for (int k=0; k < len; ++k) {    int c=cc[k];switch (c) {case '<':      sb.append("&lt;");    break;case '>':  sb.append("&gt;");break;case '&':sb.append("&amp;");break;case '"':sb.append("&quot;");break;case '\'':sb.append("&apos;");break;default :if (isValidCharacterValue(c)) {if (onlyASCII && c > 127) sb.append("&#").append(c).append(';'); else sb.append((char)c);}}}return sb.toString();}  }
class C{  public static InternalSession newSession(final String domain,final boolean stateless){  return getSessionService().newInternalSession(domain,stateless);}  }
class C{  protected void writeNonHTMLAttributes(AttributeSet attr) throws IOException {  String style="";  String separator="; ";  if (inFontTag() && fontAttributes.isEqual(attr)) {    return;  }  boolean first=true;  Color color=(Color)attr.getAttribute(StyleConstants.Foreground);  if (color != null) {    style+="color: " + css.styleConstantsValueToCSSValue((StyleConstants)StyleConstants.Foreground,color);    first=false;  }  Integer size=(Integer)attr.getAttribute(StyleConstants.FontSize);  if (size != null) {    if (!first) {      style+=separator;    }    style+="font-size: " + size.intValue() + "pt";    first=false;  }  String family=(String)attr.getAttribute(StyleConstants.FontFamily);  if (family != null) {    if (!first) {      style+=separator;    }    style+="font-family: " + family;    first=false;  }  if (style.length() > 0) {    if (fontMask != 0) {      writeEndMask(fontMask);      fontMask=0;    }    startSpanTag(style);    fontAttributes=attr;  } else   if (fontAttributes != null) {    writeEndMask(fontMask);    fontMask=0;    endSpanTag();  }}  }
class C{  public byte[] readRawPacketData(RandomAccessFile raf) throws CannotReadException, IOException {  logger.fine("Read 1st page");  OggPageHeader pageHeader=OggPageHeader.read(raf);  raf.seek(raf.getFilePointer() + pageHeader.getPageLength());  logger.fine("Read 2nd page");  pageHeader=OggPageHeader.read(raf);  byte[] b=new byte[VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH];  raf.read(b);  if (!isVorbisCommentHeader(b)) {    throw new CannotReadException("Cannot find comment block (no vorbiscomment header)");  }  byte[] rawVorbisCommentData=convertToVorbisCommentPacket(pageHeader,raf);  return rawVorbisCommentData;}  }
class C{  public SQLIntegrityConstraintViolationException(Throwable cause){  super(cause);}  }
class C{  public NameIDPolicy createNameIDPolicy(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEID_POLICY,value);  if (obj == null) {    return new NameIDPolicyImpl(value);  } else {    return (NameIDPolicy)obj;  }}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public NASPortAttribute(int port){  super(OctetUtils.toOctets(AttributeType.NAS_PORT,port));  this.port=port;}  }
class C{  Invokers(MethodType targetType){  this.targetType=targetType;}  }
class C{  private void checkEntryFilteredAfterAdd(Entry newEntry,int fractionalMode,String... fractionalConf) throws Exception {{    String objectClassStr=fractionalConf[0];    if (!objectClassStr.equals("*")) {      ObjectClass objectClass=DirectoryServer.getSchema().getObjectClass(objectClassStr);      assertTrue(newEntry.hasObjectClass(objectClass));    }    boolean first=true;switch (fractionalMode) {case EXCLUDE_FRAC_MODE:      for (      String fracAttr : fractionalConf) {        if (!first) {          assertFalse(newEntry.hasAttribute(DirectoryServer.getSchema().getAttributeType(fracAttr)));        }        first=false;      }    checkEntryAttributeValue(newEntry,OPTIONAL_ATTR,OPTIONAL_ATTR + "Value");  break;case INCLUDE_FRAC_MODE:for (String fracAttr : fractionalConf) {  if (!first) {    checkEntryAttributeValue(newEntry,fracAttr,fracAttr + "Value");  }  first=false;}assertFalse(newEntry.hasAttribute(DirectoryServer.getSchema().getAttributeType(OPTIONAL_ATTR)));break;default :fail("Unexpected fractional mode.");}}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemgetvalue.class,args);}  }
class C{  public void info(Object message,Throwable t){}  }
class C{  public static int dehexchar(char hex){  if (hex >= '0' && hex <= '9') {    return hex - '0';  } else   if (hex >= 'A' && hex <= 'F') {    return hex - 'A' + 10;  } else   if (hex >= 'a' && hex <= 'f') {    return hex - 'a' + 10;  } else {    return -1;  }}  }
class C{  public Set searchGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {  String filter="(|" + getSearchFilter(AMObject.GROUP) + getSearchFilter(AMObject.DYNAMIC_GROUP)+ getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP)+ ")";  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),filter,wildcard,avPairs,level);}  }
class C{  public boolean containsObject(NSObject obj){  return set.contains(obj);}  }
class C{  protected void paint(SynthContext context,Graphics g){  JLabel label=(JLabel)context.getComponent();  Icon icon=(label.isEnabled()) ? label.getIcon() : label.getDisabledIcon();  g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));  g.setFont(style.getFont(context));  context.getStyle().getGraphicsUtils(context).paintText(context,g,label.getText(),icon,label.getHorizontalAlignment(),label.getVerticalAlignment(),label.getHorizontalTextPosition(),label.getVerticalTextPosition(),label.getIconTextGap(),label.getDisplayedMnemonicIndex(),0);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public boolean isFieldResult(){  return field != null;}  }
class C{  public WaitForMetaData(String message,Throwable cause){  super(message,cause);}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public static Mp4BoxHeader seekWithinLevel(RandomAccessFile raf,String id) throws IOException {  logger.finer("Started searching for:" + id + " in file at:"+ raf.getChannel().position());  Mp4BoxHeader boxHeader=new Mp4BoxHeader();  ByteBuffer headerBuffer=ByteBuffer.allocate(HEADER_LENGTH);  int bytesRead=raf.getChannel().read(headerBuffer);  if (bytesRead != HEADER_LENGTH) {    return null;  }  headerBuffer.rewind();  boxHeader.update(headerBuffer);  while (!boxHeader.getId().equals(id)) {    logger.finer("Found:" + boxHeader.getId() + " Still searching for:"+ id+ " in file at:"+ raf.getChannel().position());    if (boxHeader.getLength() < Mp4BoxHeader.HEADER_LENGTH) {      return null;    }    int noOfBytesSkipped=raf.skipBytes(boxHeader.getDataLength());    logger.finer("Skipped:" + noOfBytesSkipped);    if (noOfBytesSkipped < boxHeader.getDataLength()) {      return null;    }    headerBuffer.rewind();    bytesRead=raf.getChannel().read(headerBuffer);    logger.finer("Header Bytes Read:" + bytesRead);    headerBuffer.rewind();    if (bytesRead == Mp4BoxHeader.HEADER_LENGTH) {      boxHeader.update(headerBuffer);    } else {      return null;    }  }  return boxHeader;}  }
class C{  @Override public boolean isValidToken(SSOToken token){  return isValidToken(token,true);}  }
class C{  private static boolean isAlpha(char p_char){  return ((p_char >= 'a' && p_char <= 'z') || (p_char >= 'A' && p_char <= 'Z'));}  }
class C{  public PdfImageXObject(ImageData image,PdfImageXObject imageMask){  this(createPdfStream(checkImageType(image),imageMask));  mask=image.isMask();  softMask=image.isSoftMask();}  }
class C{  public CellView(Element elem){  super(elem,Y_AXIS);}  }
class C{  public void paintComboBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private static String parseOID(String definition,Arg1<Object> parsingErrorMsg) throws DirectoryException {  try {    int pos=0;    int length=definition.length();    while (pos < length && (definition.charAt(pos) == ' ')) {      pos++;    }    pos++;    while (pos < length && definition.charAt(pos) == ' ') {      pos++;    }    int oidStartPos=pos;    while (pos < length && definition.charAt(pos) != ' ' && definition.charAt(pos) != ')') {      pos++;    }    return definition.substring(oidStartPos,pos);  } catch (  IndexOutOfBoundsException e) {    throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,parsingErrorMsg.get(definition),e);  }}  }
class C{  private void deregisterPlugin0(DirectoryServerPlugin<? extends PluginCfg> plugin){  for (  PluginType t : plugin.getPluginTypes()) {switch (t) {case STARTUP:      startupPlugins=removePlugin(startupPlugins,plugin);    break;case SHUTDOWN:  shutdownPlugins=removePlugin(shutdownPlugins,plugin);break;case POST_CONNECT:postConnectPlugins=removePlugin(postConnectPlugins,plugin);break;case POST_DISCONNECT:postDisconnectPlugins=removePlugin(postDisconnectPlugins,plugin);break;case LDIF_IMPORT:ldifImportPlugins=removePlugin(ldifImportPlugins,plugin);break;case LDIF_IMPORT_END:ldifImportEndPlugins=removePlugin(ldifImportEndPlugins,plugin);break;case LDIF_IMPORT_BEGIN:ldifImportBeginPlugins=removePlugin(ldifImportBeginPlugins,plugin);break;case LDIF_EXPORT:ldifExportPlugins=removePlugin(ldifExportPlugins,plugin);break;case PRE_PARSE_ABANDON:preParseAbandonPlugins=removePlugin(preParseAbandonPlugins,plugin);break;case PRE_PARSE_ADD:preParseAddPlugins=removePlugin(preParseAddPlugins,plugin);break;case PRE_PARSE_BIND:preParseBindPlugins=removePlugin(preParseBindPlugins,plugin);break;case PRE_PARSE_COMPARE:preParseComparePlugins=removePlugin(preParseComparePlugins,plugin);break;case PRE_PARSE_DELETE:preParseDeletePlugins=removePlugin(preParseDeletePlugins,plugin);break;case PRE_PARSE_EXTENDED:preParseExtendedPlugins=removePlugin(preParseExtendedPlugins,plugin);break;case PRE_PARSE_MODIFY:preParseModifyPlugins=removePlugin(preParseModifyPlugins,plugin);break;case PRE_PARSE_MODIFY_DN:preParseModifyDNPlugins=removePlugin(preParseModifyDNPlugins,plugin);break;case PRE_PARSE_SEARCH:preParseSearchPlugins=removePlugin(preParseSearchPlugins,plugin);break;case PRE_PARSE_UNBIND:preParseUnbindPlugins=removePlugin(preParseUnbindPlugins,plugin);break;case PRE_OPERATION_ADD:preOperationAddPlugins=removePlugin(preOperationAddPlugins,plugin);break;case PRE_OPERATION_BIND:preOperationBindPlugins=removePlugin(preOperationBindPlugins,plugin);break;case PRE_OPERATION_COMPARE:preOperationComparePlugins=removePlugin(preOperationComparePlugins,plugin);break;case PRE_OPERATION_DELETE:preOperationDeletePlugins=removePlugin(preOperationDeletePlugins,plugin);break;case PRE_OPERATION_EXTENDED:preOperationExtendedPlugins=removePlugin(preOperationExtendedPlugins,plugin);break;case PRE_OPERATION_MODIFY:preOperationModifyPlugins=removePlugin(preOperationModifyPlugins,plugin);break;case PRE_OPERATION_MODIFY_DN:preOperationModifyDNPlugins=removePlugin(preOperationModifyDNPlugins,plugin);break;case PRE_OPERATION_SEARCH:preOperationSearchPlugins=removePlugin(preOperationSearchPlugins,plugin);break;case POST_OPERATION_ABANDON:postOperationAbandonPlugins=removePlugin(postOperationAbandonPlugins,plugin);break;case POST_OPERATION_ADD:postOperationAddPlugins=removePlugin(postOperationAddPlugins,plugin);break;case POST_OPERATION_BIND:postOperationBindPlugins=removePlugin(postOperationBindPlugins,plugin);break;case POST_OPERATION_COMPARE:postOperationComparePlugins=removePlugin(postOperationComparePlugins,plugin);break;case POST_OPERATION_DELETE:postOperationDeletePlugins=removePlugin(postOperationDeletePlugins,plugin);break;case POST_OPERATION_EXTENDED:postOperationExtendedPlugins=removePlugin(postOperationExtendedPlugins,plugin);break;case POST_OPERATION_MODIFY:postOperationModifyPlugins=removePlugin(postOperationModifyPlugins,plugin);break;case POST_OPERATION_MODIFY_DN:postOperationModifyDNPlugins=removePlugin(postOperationModifyDNPlugins,plugin);break;case POST_OPERATION_SEARCH:postOperationSearchPlugins=removePlugin(postOperationSearchPlugins,plugin);break;case POST_OPERATION_UNBIND:postOperationUnbindPlugins=removePlugin(postOperationUnbindPlugins,plugin);break;case POST_RESPONSE_ADD:postResponseAddPlugins=removePlugin(postResponseAddPlugins,plugin);break;case POST_RESPONSE_BIND:postResponseBindPlugins=removePlugin(postResponseBindPlugins,plugin);break;case POST_RESPONSE_COMPARE:postResponseComparePlugins=removePlugin(postResponseComparePlugins,plugin);break;case POST_RESPONSE_DELETE:postResponseDeletePlugins=removePlugin(postResponseDeletePlugins,plugin);break;case POST_RESPONSE_EXTENDED:postResponseExtendedPlugins=removePlugin(postResponseExtendedPlugins,plugin);break;case POST_RESPONSE_MODIFY:postResponseModifyPlugins=removePlugin(postResponseModifyPlugins,plugin);break;case POST_RESPONSE_MODIFY_DN:postResponseModifyDNPlugins=removePlugin(postResponseModifyDNPlugins,plugin);break;case POST_RESPONSE_SEARCH:postResponseSearchPlugins=removePlugin(postResponseSearchPlugins,plugin);break;case POST_SYNCHRONIZATION_ADD:postSynchronizationAddPlugins=removePlugin(postSynchronizationAddPlugins,plugin);break;case POST_SYNCHRONIZATION_DELETE:postSynchronizationDeletePlugins=removePlugin(postSynchronizationDeletePlugins,plugin);break;case POST_SYNCHRONIZATION_MODIFY:postSynchronizationModifyPlugins=removePlugin(postSynchronizationModifyPlugins,plugin);break;case POST_SYNCHRONIZATION_MODIFY_DN:postSynchronizationModifyDNPlugins=removePlugin(postSynchronizationModifyDNPlugins,plugin);break;case SEARCH_RESULT_ENTRY:searchResultEntryPlugins=removePlugin(searchResultEntryPlugins,plugin);break;case SEARCH_RESULT_REFERENCE:searchResultReferencePlugins=removePlugin(searchResultReferencePlugins,plugin);break;case SUBORDINATE_MODIFY_DN:subordinateModifyDNPlugins=removePlugin(subordinateModifyDNPlugins,plugin);break;case SUBORDINATE_DELETE:subordinateDeletePlugins=removePlugin(subordinateDeletePlugins,plugin);break;case INTERMEDIATE_RESPONSE:intermediateResponsePlugins=removePlugin(intermediateResponsePlugins,plugin);break;default :}}}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  resolvePrefixTables();  ElemTemplateElement t=getFirstChildElem();  m_hasTextLitOnly=((t != null) && (t.getXSLToken() == Constants.ELEMNAME_TEXTLITERALRESULT) && (t.getNextSiblingElem() == null));  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  cstate.pushStackMark();}  }
class C{  public void preSingleLogoutProcess(String hostedProviderID,HttpServletRequest request,HttpServletResponse response,String userDN,FSLogoutNotification logoutRequest,FSLogoutResponse logoutResponse,String sloProfile){  FSUtils.debug.message("In FSDefaultSPAdapter.preSingleLogoutProcess.");}  }
class C{  public void initializeTrustManagerProviders() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addTrustManagerProviderAddListener(this);  rootConfiguration.addTrustManagerProviderDeleteListener(this);  for (  String name : rootConfiguration.listTrustManagerProviders()) {    TrustManagerProviderCfg providerConfig=rootConfiguration.getTrustManagerProvider(name);    providerConfig.addChangeListener(this);    if (providerConfig.isEnabled()) {      String className=providerConfig.getJavaClass();      try {        TrustManagerProvider provider=loadProvider(className,providerConfig,true);        providers.put(providerConfig.dn(),provider);        DirectoryServer.registerTrustManagerProvider(providerConfig.dn(),provider);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());        continue;      }    }  }}  }
class C{  public static void download(Logger log,URL downloadUrl,File target) throws MojoExecutionException {  log.progressStart();  try {    OkHttpClient client=new OkHttpClient.Builder().readTimeout(30,TimeUnit.MINUTES).build();    Request request=new Request.Builder().url(downloadUrl).build();    Response response=client.newCall(request).execute();    try (OutputStream out=new FileOutputStream(target);InputStream im=response.body().byteStream()){      long length=response.body().contentLength();      InputStream in=response.body().byteStream();      byte[] buffer=new byte[8192];      long readBytes=0;      while (true) {        int len=in.read(buffer);        readBytes+=len;        log.progressUpdate(target.getName(),"Downloading",getProgressBar(readBytes,length));        if (len <= 0) {          out.flush();          break;        }        out.write(buffer,0,len);      }    }   } catch (  IOException e) {    throw new MojoExecutionException("Failed to download URL " + downloadUrl + " to  "+ target+ ": "+ e,e);  } finally {    log.progressFinished();  }}  }
class C{  public FileDescriptor(){}  }
class C{  public void addBundlingCallSettingsImports(ModelTypeTable typeTable){}  }
class C{  public SavedRequestInputFilter(ByteChunk input){  this.input=input;}  }
class C{  public void addObject(PdfObject object){  if (size.intValue() == MAX_OBJ_STREAM_SIZE) {    throw new PdfException(PdfException.PdfObjectStreamReachMaxSize);  }  PdfOutputStream outputStream=getOutputStream();  indexStream.writeInteger(object.getIndirectReference().getObjNumber()).writeSpace().writeLong(outputStream.getCurrentPos()).writeSpace();  outputStream.write(object);  object.getIndirectReference().setObjStreamNumber(getIndirectReference().getObjNumber());  object.getIndirectReference().setIndex(size.intValue());  outputStream.writeSpace();  size.increment();  ((PdfNumber)get(PdfName.First)).setValue(indexStream.getCurrentPos());}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterPatch(Context context,PatchRequest request,RequestHandler next){  CrestAuditor auditor=newAuditor(context,request);  auditor.auditAccessAttempt();  return auditResponse(next.handlePatch(context,request),auditor,request);}  }
class C{  public ConfigChangeResult applyConfigurationChange(ErrorLogAccountStatusNotificationHandlerCfg configuration,boolean detailedResults){  return applyConfigurationChange(configuration);}  }
class C{  public FlowLayout(int align){  this(align,5,5);}  }
class C{  public void testOneOne(){  BigInteger aNumber=BigInteger.ONE;  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.and(bNumber);  assertTrue(result.equals(BigInteger.ONE));  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void stateChanged(ChangeEvent e){  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));  if (JMenuItem.this.getModel().isArmed()) {    if (!isArmed) {      isArmed=true;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.ARMED);      fireAccessibilityFocusedEvent(JMenuItem.this);    }  } else {    if (isArmed) {      isArmed=false;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.ARMED,null);    }  }  if (JMenuItem.this.isFocusOwner()) {    if (!hasFocus) {      hasFocus=true;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.FOCUSED);    }  } else {    if (hasFocus) {      hasFocus=false;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.FOCUSED,null);    }  }  if (JMenuItem.this.getModel().isPressed()) {    if (!isPressed) {      isPressed=true;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.PRESSED);    }  } else {    if (isPressed) {      isPressed=false;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.PRESSED,null);    }  }  if (JMenuItem.this.getModel().isSelected()) {    if (!isSelected) {      isSelected=true;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.CHECKED);      fireAccessibilityFocusedEvent(JMenuItem.this);    }  } else {    if (isSelected) {      isSelected=false;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.CHECKED,null);    }  }}  }
class C{  public static int defineTag(int ifdId,short tagId){  return (tagId & 0x0000ffff) | (ifdId << 16);}  }
class C{  public Cursor fetchAll(String dataTypeName,String dataTypeClassName){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (dataTypeName != null) {    qb.appendWhere(" AND " + KEY_DATATYPENAME + " = ");    qb.appendWhereEscapeString(dataTypeName);  }  if (dataTypeClassName != null) {    qb.appendWhere(" AND " + KEY_DATATYPECLASSNAME + " = ");    qb.appendWhereEscapeString(dataTypeClassName);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  protected Transferable createTransferableProxy(Transferable t,boolean local){  return new TransferableProxy(t,local);}  }
class C{  private boolean isDualRole(FederationElement edes){  int cnt=0;  boolean dual=false;  if (edes != null) {    for (Iterator iter=edes.getAny().iterator(); iter.hasNext(); ) {      Object o=iter.next();      if (o instanceof TokenIssuerEndpointElement) {        cnt++;      }    }  }  if (cnt > 1) {    dual=true;  }  return dual;}  }
class C{  public boolean isErrorConcealed(){  return getErrorConcealment().equals(GUID.GUID_AUDIO_ERROR_CONCEALEMENT_INTERLEAVED);}  }
class C{  public static boolean isAllowed(String url,String method) throws IOException {  AuthorizeFaceletsTag authorizeTag=new AuthorizeFaceletsTag();  authorizeTag.setUrl(url);  authorizeTag.setMethod(method);  return authorizeTag.authorizeUsingUrlCheck();}  }
class C{  public boolean passwordIsAcceptable(Operation operation,Entry userEntry,ByteString newPassword,Set<ByteString> currentPasswords,LocalizableMessageBuilder invalidReason){  for (  PasswordValidator<?> validator : passwordPolicy.getPasswordValidators()) {    if (!validator.passwordIsAcceptable(newPassword,currentPasswords,operation,userEntry,invalidReason)) {      if (logger.isTraceEnabled()) {        logger.trace("The password provided for user %s failed validation: %s",userDNString,invalidReason);      }      return false;    }  }  return true;}  }
class C{  protected UndoableEdit lastEdit(){  int count=edits.size();  if (count > 0)   return edits.elementAt(count - 1); else   return null;}  }
class C{  public ProgressMonitorInputStream(Component parentComponent,Object message,InputStream in){  super(in);  try {    size=in.available();  } catch (  IOException ioe) {    size=0;  }  monitor=new ProgressMonitor(parentComponent,message,null,0,size);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterURI);}  }
class C{  public java.security.cert.Certificate engineGenerateCertificate(InputStream in) throws CertificateException {  if (currentStream == null) {    currentStream=in;    sData=null;    sDataObjectCount=0;  } else   if (currentStream != in) {    currentStream=in;    sData=null;    sDataObjectCount=0;  }  try {    if (sData != null) {      if (sDataObjectCount != sData.size()) {        return getCertificate();      } else {        sData=null;        sDataObjectCount=0;        return null;      }    }    PushbackInputStream pis=new PushbackInputStream(in);    int tag=pis.read();    if (tag == -1) {      return null;    }    pis.unread(tag);    if (tag != 0x30) {      return readPEMCertificate(pis);    } else {      return readDERCertificate(new ASN1InputStream(pis));    }  } catch (  Exception e) {    throw new ExCertificateException(e);  }}  }
class C{  public com.sun.identity.liberty.ws.paos.jaxb.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.paos.jaxb.impl.ExtensionTypeImpl();}  }
class C{  private FilePart rollOver() throws IOException {  if (currentLastBytePos > -1) {    throw new IllegalStateException("Current currentLastCharPos unexpectedly positive... " + "last readLine() should have returned something! currentLastCharPos=" + currentLastBytePos);  }  if (no > 1) {    return new FilePart(no - 1,blockSize,leftOver);  } else {    if (leftOver != null) {      throw new IllegalStateException("Unexpected leftover of the last block: leftOverOfThisFilePart=" + new String(leftOver,encoding));    }    return null;  }}  }
class C{  public static final Signum of(double p_value){  if (p_value > 0) {    return POSITIVE;  } else   if (p_value < 0) {    return NEGATIVE;  } else {    return ZERO;  }}  }
class C{  public void updateUI(){  setUI((ScrollPaneUI)UIManager.getUI(this));}  }
class C{  public void removeResource(String name){  try {    envCtx.unbind(name);  } catch (  NamingException e) {    log.error(sm.getString("naming.unbindFailed",e));  }  ObjectName on=objectNames.get(name);  if (on != null) {    Registry.getRegistry(null,null).unregisterComponent(on);  }}  }
class C{  private boolean isNextCallbackSetAvailable(RadiusResponse response,ContextHolder holder){  final boolean moreCallbacksAvailable=holder.getAuthContext().hasMoreRequirements();  if (!moreCallbacksAvailable) {    holder.setCallbacks(null);    return false;  }  final Callback[] callbacks=holder.getAuthContext().getRequirements(true);  holder.setCallbacks(callbacks);  if (holder.getCallbacks() == null) {    return false;  }  if (callbacks[0] instanceof PagePropertiesCallback) {    final PagePropertiesCallback pp=(PagePropertiesCallback)callbacks[0];    holder.setCallbackSetProps(pp);    holder.setIdxOfCurrentCallback(1);    final String moduleName=pp.getModuleName();    if (!moduleName.equals(holder.getModuleName())) {      holder.setModuleName(moduleName);      holder.incrementChainModuleIndex();      holder.setIdxOfCallbackSetInModule(0);    } else {      holder.incrementIdxOfCallbackSetInModule();    }    holder.setMillisExpiryForCurrentCallbacks(1000L * pp.getTimeOutValue());    holder.setMillisExpiryPoint(currentTimeMillis() + holder.getMillisExpiryForCurrentCallbacks());  } else {    LOG.error("Callback at index 0 is not of type PagePropertiesCallback!!!");    rejectAccessAndTerminateProcess(response,holder);    return false;  }  boolean httpCbIncurred=false;  boolean redirectCbIncurred=false;  for (int i=1; i < callbacks.length; i++) {    final Callback cb=callbacks[i];    if (cb instanceof HttpCallback) {      httpCbIncurred=true;      break;    } else     if (cb instanceof RedirectCallback) {      redirectCbIncurred=true;      break;    }  }  if (httpCbIncurred || redirectCbIncurred) {    LOG.error("Radius can not support " + (httpCbIncurred ? HttpCallback.class.getSimpleName() : RedirectCallback.class.getSimpleName()) + " used by module "+ holder.getChainModuleIndex()+ " with name "+ holder.getModuleName()+ " in chain '"+ this.authChain+ "'. Denying Access.");    rejectAccessAndTerminateProcess(response,holder);    return false;  }  return true;}  }
class C{  public Set searchUsers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,avPairs,level);}  }
class C{  private static List<Integer> possibleLocations(String str){  List<Integer> possibleLocations=new ArrayList<Integer>();  int lastIndex=-1;  int index;  while ((index=str.indexOf("${",lastIndex + 1)) >= 0) {    if (lastIndex == index) {      break;    }    possibleLocations.add(index);    lastIndex=index;  }  return possibleLocations;}  }
class C{  public void close() throws IOException {  if (!closed) {    try {      byte buffer[]=new byte[BUFFER_SIZE];      while (read(buffer) >= 0) {      }    }  finally {      closed=true;    }  }}  }
class C{  public static void readAttributeSet(ObjectInputStream in,MutableAttributeSet a) throws ClassNotFoundException, IOException {  int n=in.readInt();  for (int i=0; i < n; i++) {    Object key=in.readObject();    Object value=in.readObject();    if (thawKeyMap != null) {      Object staticKey=thawKeyMap.get(key);      if (staticKey != null) {        key=staticKey;      }      Object staticValue=thawKeyMap.get(value);      if (staticValue != null) {        value=staticValue;      }    }    a.addAttribute(key,value);  }}  }
class C{  public final boolean contains(PlaPointInt p_point){  if (p_point == null)   return false;  if (middle.side_of(p_point) != PlaSide.COLLINEAR)   return false;  PlaDirection perpendicular_direction=middle.direction().rotate_45_deg(2);  PlaLineInt perpendicular_line=new PlaLineInt(p_point,perpendicular_direction);  PlaSide start_point_side=perpendicular_line.side_of(start_point());  PlaSide end_point_side=perpendicular_line.side_of(end_point());  if (start_point_side != PlaSide.COLLINEAR && end_point_side != PlaSide.COLLINEAR && start_point_side == end_point_side) {    return false;  }  return true;}  }
class C{  private static JAXBException handleClassCastException(Class originalType,Class targetType){  final URL targetTypeURL=which(targetType);  return new JAXBException(Messages.format(Messages.ILLEGAL_CAST,getClassClassLoader(originalType).getResource("javax/xml/bind/JAXBContext.class"),targetTypeURL));}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  tblModelPopulated=false;  forwardTo();}  }
class C{  @Override public Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByField2_Last(field2,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("field2=");  msg.append(field2);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  protected void close(int i){  try {    if (connectionReaders[i] != null) {      connectionReaders[i].close();    }  } catch (  IOException e) {  }  connectionReaders[i]=null;  try {    if (connectionWriters[i] != null) {      connectionWriters[i].close();    }  } catch (  IOException e) {  }  connectionWriters[i]=null;  try {    if (connections[i] != null) {      connections[i].close();    }  } catch (  IOException e) {  }  connections[i]=null;}  }
class C{  public TRANSACTION_UNAVAILABLE(){  this("");}  }
class C{  public void append(byte[] src){  if (buffer != null) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("Attempt to override the data"));  }  buffer=src;}  }
class C{  public IIOException(String message){  super(message);}  }
class C{  private static int determineType(String dataBeginning){  dataBeginning=dataBeginning.trim();  if (dataBeginning.length() == 0) {    return TYPE_ERROR_BLANK;  }  if (dataBeginning.startsWith("bplist")) {    return TYPE_BINARY;  }  if (dataBeginning.startsWith("(") || dataBeginning.startsWith("{") || dataBeginning.startsWith("/")) {    return TYPE_ASCII;  }  if (dataBeginning.startsWith("<")) {    return TYPE_XML;  }  return TYPE_ERROR_UNKNOWN;}  }
class C{  public void expandRow(int row){  expandPath(getPathForRow(row));}  }
class C{  public boolean addVerification(String signatureName,IOcspClient ocsp,ICrlClient crl,CertificateOption certOption,Level level,CertificateInclusion certInclude) throws IOException, GeneralSecurityException {  if (used)   throw new IllegalStateException(PdfException.VerificationAlreadyOutput);  PdfPKCS7 pk=sgnUtil.verifySignature(signatureName,null);  LOGGER.info("Adding verification for " + signatureName);  Certificate[] xc=pk.getCertificates();  X509Certificate cert;  X509Certificate signingCert=pk.getSigningCertificate();  ValidationData vd=new ValidationData();  for (int k=0; k < xc.length; ++k) {    cert=(X509Certificate)xc[k];    LOGGER.info("Certificate: " + cert.getSubjectDN());    if (certOption == CertificateOption.SIGNING_CERTIFICATE && !cert.equals(signingCert)) {      continue;    }    byte[] ocspEnc=null;    if (ocsp != null && level != Level.CRL) {      ocspEnc=ocsp.getEncoded(cert,getParent(cert,xc),null);      if (ocspEnc != null) {        vd.ocsps.add(buildOCSPResponse(ocspEnc));        LOGGER.info("OCSP added");      }    }    if (crl != null && (level == Level.CRL || level == Level.OCSP_CRL || (level == Level.OCSP_OPTIONAL_CRL && ocspEnc == null))) {      Collection<byte[]> cims=crl.getEncoded(cert,null);      if (cims != null) {        for (        byte[] cim : cims) {          boolean dup=false;          for (          byte[] b : vd.crls) {            if (Arrays.equals(b,cim)) {              dup=true;              break;            }          }          if (!dup) {            vd.crls.add(cim);            LOGGER.info("CRL added");          }        }      }    }    if (certInclude == CertificateInclusion.YES) {      vd.certs.add(cert.getEncoded());    }  }  if (vd.crls.size() == 0 && vd.ocsps.size() == 0)   return false;  validated.put(getSignatureHashKey(signatureName),vd);  return true;}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true).setUseDefaultBranchingPolicy(false).setNonQualifierBranches("");  unchecked(null);}  }
class C{  public List<String> toNameValueBlock(){  Set<String> names=new HashSet<String>();  List<String> result=new ArrayList<String>();  for (int i=0; i < namesAndValues.size(); i+=2) {    String name=namesAndValues.get(i).toLowerCase(Locale.US);    String value=namesAndValues.get(i + 1);    if (name.equals("connection") || name.equals("host") || name.equals("keep-alive")|| name.equals("proxy-connection")|| name.equals("transfer-encoding")) {      continue;    }    if (names.add(name)) {      result.add(name);      result.add(value);      continue;    }    for (int j=0; j < result.size(); j+=2) {      if (name.equals(result.get(j))) {        result.set(j + 1,result.get(j + 1) + "\0" + value);        break;      }    }  }  return result;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String authModule=getStringOptionValue(RegisterAuthModule.AUTH_MODULE);  ServiceSchema ss=getServiceSchema(ISAuthConstants.AUTH_SERVICE_NAME,null,"Global");  IOutput outputWriter=getOutputWriter();  try {    String[] params={ISAuthConstants.AUTH_SERVICE_NAME};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UNREGISTER_AUTH_MODULE",params);    Map attrValues=ss.getAttributeDefaults();    Set values=(Set)attrValues.get(RegisterAuthModule.AUTH_AUTHENTICATOR_ATTR);    boolean removed=false;    if ((values != null) && !values.isEmpty()) {      removed=values.remove(authModule);      ss.setAttributeDefaults(RegisterAuthModule.AUTH_AUTHENTICATOR_ATTR,values);    }    if (removed) {      outputWriter.printlnMessage(getResourceString("unregister-auth-module-succeeded"));    } else {      outputWriter.printlnMessage(getResourceString("unregister-auth-module-notfound"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_UNREGISTER_AUTH_MODULE",params);  } catch (  SSOException e) {    String[] args={ISAuthConstants.AUTH_SERVICE_NAME,e.getMessage()};    debugError("UnregisterAuthModule.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UNREGISTER_AUTH_MODULE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={ISAuthConstants.AUTH_SERVICE_NAME,e.getMessage()};    debugError("UnregisterAuthModule.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UNREGISTER_AUTH_MODULE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  protected DsnKeywordScope(String p_name){  super(p_name);}  }
class C{  private void checkTimeAndMonitoringSafeData(int nSentUpdates,int prevNAckUpdates,int prevNTimeoutUpdates,Map<Integer,Integer> prevNServerErrors,long sendUpdateTime,int nWishedServers,List<Integer> eligibleServers,List<Integer> expectedServers){  final FakeReplicationDomain fakeRd1=fakeRDs[1];  assertEquals(fakeRd1.getAssuredSdSentUpdates(),nSentUpdates);  if (eligibleServers.size() >= nWishedServers) {    if (expectedServers.size() >= nWishedServers) {      checkAckOccured(sendUpdateTime,prevNAckUpdates,prevNTimeoutUpdates,prevNServerErrors);    } else {      Set<Integer> serversInError=computeExpectedServersInError(eligibleServers,expectedServers);      checkTimeOutOccured(sendUpdateTime,prevNAckUpdates,prevNTimeoutUpdates,prevNServerErrors,serversInError);    }  } else {    if (!eligibleServers.isEmpty()) {      if (expectedServers.size() == eligibleServers.size()) {        checkAckOccured(sendUpdateTime,prevNAckUpdates,prevNTimeoutUpdates,prevNServerErrors);      } else {        Set<Integer> serversInError=computeExpectedServersInError(eligibleServers,expectedServers);        checkTimeOutOccured(sendUpdateTime,prevNAckUpdates,prevNTimeoutUpdates,prevNServerErrors,serversInError);      }    } else {      checkAckOccured(sendUpdateTime,prevNAckUpdates,prevNTimeoutUpdates,prevNServerErrors);    }  }}  }
class C{  @KnownFailure("not supported") public void testUpdate2() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  try {    statement.executeUpdate("UPDATE " + DatabaseCreator.PARENT_TABLE + " SET id = 5 WHERE id = 1;");    fail("expecting SQLException");  } catch (  SQLException ex) {  }}  }
class C{  @Override public Foo fetchFooByUuidAndGroupId(String uuid,long groupId){  return fooPersistence.fetchByUUID_G(uuid,groupId);}  }
class C{  public void initializeArguments() throws ArgumentException {  quietArg=quietArgument();  addArgument(quietArg);  propertiesFileArg=StringArgument.builder("propertiesFile").shortIdentifier('p').description(INFO_JAVAPROPERTIES_DESCRIPTION_PROPERTIES_FILE.get(getDefaultPropertiesValue())).hidden().defaultValue(getDefaultPropertiesValue()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildArgument();  addArgument(propertiesFileArg);  destinationFileArg=StringArgument.builder("destinationFile").shortIdentifier('d').description(INFO_JAVAPROPERTIES_DESCRIPTION_DESTINATION_FILE.get(getDefaultDestinationValue())).hidden().defaultValue(getDefaultDestinationValue()).valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildArgument();  addArgument(destinationFileArg);  showUsageArg=showUsageArgument();  addArgument(showUsageArg);  setUsageArgument(showUsageArg);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws ParseException, FSMsgException {  SAMLConstants sc;  StringBuffer xml=new StringBuffer(3000);  String secprefix="";  String libprefix="";  String liburi="";  String secNS="";  if (includeNS) {    libprefix=IFSConstants.LIB_PREFIX;    secprefix=WSSEConstants.TAG_SEC + ":";  }  if (declareNS) {    liburi=IFSConstants.LIB_NAMESPACE_STRING;    secNS=" " + WSSEConstants.TAG_XMLNS + ":"+ WSSEConstants.TAG_SEC+ "=\""+ WSSEConstants.NS_SEC+ "\"";  }  xml.append("<").append(secprefix).append(WSSEConstants.TAG_SESSIONCONTEXT).append(secNS).append(" ").append("AuthenticationInstant=").append("\"").append(DateUtils.toUTCDateFormat(_issueInstant)).append("\" ").append("AssertionIssueInstant=").append("\"").append(DateUtils.toUTCDateFormat(_authenticationInstant)).append("\"").append(">");  xml.append(_sessionSubject.toXMLString(includeNS,declareNS));  xml.append("<").append(secprefix).append(WSSEConstants.TAG_PROVIDERID).append(">").append(_providerID).append("</").append(secprefix).append(WSSEConstants.TAG_PROVIDERID).append(">");  if (_authnContext != null) {    xml.append(_authnContext.toXMLString(includeNS,declareNS));  }  xml.append("</").append(secprefix).append(WSSEConstants.TAG_SESSIONCONTEXT).append(">");  return xml.toString();}  }
class C{  public boolean match(CRL crl){  if (!(crl instanceof X509CRL)) {    return false;  }  X509CRL crlist=(X509CRL)crl;  if ((issuerNames != null) && !(issuerNames.contains(crlist.getIssuerX500Principal().getName(X500Principal.CANONICAL)))) {    return false;  }  if ((minCRL != null) || (maxCRL != null)) {    try {      byte[] bytes=crlist.getExtensionValue("2.5.29.20");      bytes=(byte[])ASN1OctetString.getInstance().decode(bytes);      BigInteger crlNumber=new BigInteger((byte[])ASN1Integer.getInstance().decode(bytes));      if ((minCRL != null) && (crlNumber.compareTo(minCRL) < 0)) {        return false;      }      if ((maxCRL != null) && (crlNumber.compareTo(maxCRL) > 0)) {        return false;      }    } catch (    IOException e) {      return false;    }  }  if (dateAndTime != -1) {    Date thisUp=crlist.getThisUpdate();    Date nextUp=crlist.getNextUpdate();    if ((thisUp == null) || (nextUp == null)) {      return false;    }    if ((dateAndTime < thisUp.getTime()) || (dateAndTime > nextUp.getTime())) {      return false;    }  }  return true;}  }
class C{  public SubjectConfirmation createSubjectConfirmation(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_CONFIRMATION,xml);  if (obj == null) {    return new SubjectConfirmationImpl(xml);  } else {    return (SubjectConfirmation)obj;  }}  }
class C{  public void insert_float(float value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_float",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_float(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void shutdown(){  if (shutdown) {    return;  }  shutdown=true;  if (session != null) {    session.close();  }  try {    join();  } catch (  InterruptedException ignored) {  }}  }
class C{  public Rectangle moveRight(float move){  x+=move;  return this;}  }
class C{  RhinoCompiledScript(final RhinoScriptEngine engine,final Script compiledScript){  Reject.ifNull(engine,compiledScript);  this.engine=engine;  this.compiledScript=compiledScript;}  }
class C{  public SaltedSHA256PasswordStorageScheme(){  super();}  }
class C{  public Furnace(BlockFace direction){  this();  setFacingDirection(direction);}  }
class C{  protected static void writeContext(PrintWriter writer,ObjectName objectName,MBeanServer mBeanServer,int mode) throws Exception {  if (mode == 0) {    String webModuleName=objectName.getKeyProperty("name");    String name=webModuleName;    if (name == null) {      return;    }    String hostName=null;    String contextName=null;    if (name.startsWith("//")) {      name=name.substring(2);    }    int slash=name.indexOf('/');    if (slash != -1) {      hostName=name.substring(0,slash);      contextName=name.substring(slash);    } else {      return;    }    ObjectName queryManager=new ObjectName(objectName.getDomain() + ":type=Manager,context=" + contextName+ ",host="+ hostName+ ",*");    Set<ObjectName> managersON=mBeanServer.queryNames(queryManager,null);    ObjectName managerON=null;    Iterator<ObjectName> iterator2=managersON.iterator();    while (iterator2.hasNext()) {      managerON=iterator2.next();    }    ObjectName queryJspMonitor=new ObjectName(objectName.getDomain() + ":type=JspMonitor,WebModule=" + webModuleName+ ",*");    Set<ObjectName> jspMonitorONs=mBeanServer.queryNames(queryJspMonitor,null);    if (contextName.equals("/")) {      contextName="";    }    writer.print("<h1>");    writer.print(filter(name));    writer.print("</h1>");    writer.print("</a>");    writer.print("<p>");    Object startTime=mBeanServer.getAttribute(objectName,"startTime");    writer.print(" Start time: " + new Date(((Long)startTime).longValue()));    writer.print(" Startup time: ");    writer.print(formatTime(mBeanServer.getAttribute(objectName,"startupTime"),false));    writer.print(" TLD scan time: ");    writer.print(formatTime(mBeanServer.getAttribute(objectName,"tldScanTime"),false));    if (managerON != null) {      writeManager(writer,managerON,mBeanServer,mode);    }    if (jspMonitorONs != null) {      writeJspMonitor(writer,jspMonitorONs,mBeanServer,mode);    }    writer.print("</p>");    String onStr=objectName.getDomain() + ":j2eeType=Servlet,WebModule=" + webModuleName+ ",*";    ObjectName servletObjectName=new ObjectName(onStr);    Set<ObjectInstance> set=mBeanServer.queryMBeans(servletObjectName,null);    Iterator<ObjectInstance> iterator=set.iterator();    while (iterator.hasNext()) {      ObjectInstance oi=iterator.next();      writeWrapper(writer,oi.getObjectName(),mBeanServer,mode);    }  } else   if (mode == 1) {  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedatanomodificationallowederrEE.class,args);}  }
class C{  public Map<CoreTokenField,Object> mapFromEntry(Entry entry){  stripObjectClass(entry);  Map<CoreTokenField,Object> r=new LinkedHashMap<>();  for (  Attribute a : entry.getAllAttributes()) {    AttributeDescription description=a.getAttributeDescription();    CoreTokenField field=CoreTokenField.fromLDAPAttribute(description.toString());    if (CoreTokenField.TOKEN_TYPE.equals(field)) {      String value=entry.parseAttribute(description).asString();      r.put(field,TokenType.valueOf(value));      continue;    }    if (CoreTokenFieldTypes.isMulti(field)) {      r.put(field,parseMulti(field,entry,description));    } else     if (CoreTokenFieldTypes.isCalendar(field)) {      String dateString=entry.parseAttribute(description).asString();      Calendar calendar=conversion.fromLDAPDate(dateString);      r.put(field,calendar);    } else     if (CoreTokenFieldTypes.isString(field)) {      String value=entry.parseAttribute(description).asString();      r.put(field,resolveEmpty(value));    } else     if (CoreTokenFieldTypes.isInteger(field)) {      Integer value=entry.parseAttribute(description).asInteger();      r.put(field,value);    } else     if (CoreTokenFieldTypes.isByteArray(field)) {      byte[] data=entry.parseAttribute(description).asByteString().toByteArray();      r.put(field,data);    } else {      throw new IllegalStateException();    }  }  return r;}  }
class C{  public final void popSubContextList(){  m_axesIteratorStack.pop();}  }
class C{  public String foundType(){  return this.foundType;}  }
class C{  @Override protected void shutdownOutput() throws IOException {  try {    Libcore.os.shutdown(fd,SHUT_WR);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsSocketException();  }}  }
class C{  public void writeString(byte[] str){  int max=uncompData.length - dstIndex;  if (str.length < max)   max=str.length;  System.arraycopy(str,0,uncompData,dstIndex,max);  dstIndex+=max;}  }
class C{  public void test_toString(){  MockAttributedCharacterIteratorAttribute mac1=new MockAttributedCharacterIteratorAttribute(null);  assertEquals("Unexpected class representation string",mac1.toString(),getClass().getName() + "$MockAttributedCharacterIteratorAttribute(null)");  TestAttributedCharacterIteratorAttribute mac2=new TestAttributedCharacterIteratorAttribute("test1");  assertEquals("Unexpected class representation string",mac2.toString(),getClass().getName() + "$TestAttributedCharacterIteratorAttribute(test1)");}  }
class C{  public static Kue createQueue(Vertx vertx,JsonObject config){  return new Kue(vertx,config);}  }
class C{  public void mouseReleased(MouseEvent e){}  }
class C{  public void initialize(Map configurationMap){}  }
class C{  public static void beforeCall(URL url,Request request){  String uri=url.getUri();  onBeforeCall(getServiceStat(uri));  onBeforeCall(getMethodStat(uri,request.getMethodName(),request.getParamtersDesc()));}  }
class C{  private JsonValue performUpdate(String resourceID,JsonValue value) throws ResourceException {  String id=value.get("_id").required().asString();  String fullID=retrieveFullID(resourceID,value);  String rev=value.get("_rev").required().asString();  UpdateRequest updateRequest=Requests.newUpdateRequest(fullID,value);  updateRequest.setRevision(rev);  connectionFactory.getConnection().update(taskScannerContext.getContext(),updateRequest);  return retrieveObject(resourceID,id);}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {  return getService().deleteFoo(fooId);}  }
class C{  public void paintOptionPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override void decode(final byte[] in,int inPos,final int inAvail,final Context context){  if (context.eof) {    return;  }  if (inAvail < 0) {    context.eof=true;  }  for (int i=0; i < inAvail; i++) {    final byte[] buffer=ensureBufferSize(decodeSize,context);    final byte b=in[inPos++];    if (b == pad) {      context.eof=true;      break;    }    if (b >= 0 && b < DECODE_TABLE.length) {      final int result=DECODE_TABLE[b];      if (result >= 0) {        context.modulus=(context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;        context.ibitWorkArea=(context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;        if (context.modulus == 0) {          buffer[context.pos++]=(byte)((context.ibitWorkArea >> 16) & MASK_8BITS);          buffer[context.pos++]=(byte)((context.ibitWorkArea >> 8) & MASK_8BITS);          buffer[context.pos++]=(byte)(context.ibitWorkArea & MASK_8BITS);        }      }    }  }  if (context.eof && context.modulus != 0) {    final byte[] buffer=ensureBufferSize(decodeSize,context);switch (context.modulus) {case 1:      break;case 2:    context.ibitWorkArea=context.ibitWorkArea >> 4;  buffer[context.pos++]=(byte)((context.ibitWorkArea) & MASK_8BITS);break;case 3:context.ibitWorkArea=context.ibitWorkArea >> 2;buffer[context.pos++]=(byte)((context.ibitWorkArea >> 8) & MASK_8BITS);buffer[context.pos++]=(byte)((context.ibitWorkArea) & MASK_8BITS);break;default :throw new IllegalStateException("Impossible modulus " + context.modulus);}}}  }
class C{  private static LDAPFilter createEqualityFilter(AttributeValueAssertion ava) throws IOException {  return LDAPFilter.createEqualityFilter(ava.getName(),ByteStringUtility.convertValue(ava.getValue()));}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  private ConditionResult matchesEntryInternal(SearchFilter completeFilter,Entry entry,int depth) throws DirectoryException {switch (filterType) {case AND:    return processAND(completeFilter,entry,depth);case OR:  return processOR(completeFilter,entry,depth);case NOT:return processNOT(completeFilter,entry,depth);case EQUALITY:return processEquality(completeFilter,entry);case SUBSTRING:return processSubstring(completeFilter,entry);case GREATER_OR_EQUAL:return processGreaterOrEqual(completeFilter,entry);case LESS_OR_EQUAL:return processLessOrEqual(completeFilter,entry);case PRESENT:return processPresent(completeFilter,entry);case APPROXIMATE_MATCH:return processApproximate(completeFilter,entry);case EXTENSIBLE_MATCH:return processExtensibleMatch(completeFilter,entry);default :throw new DirectoryException(ResultCode.PROTOCOL_ERROR,ERR_SEARCH_FILTER_INVALID_FILTER_TYPE.get(entry.getName(),this,filterType));}}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Comment comment;  Node aNode;  Document ownerDocument;  DocumentType docType;  String system;  String value;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  comment=aNewDoc.createComment("this is a comment");  aNode=doc.importNode(comment,false);  ownerDocument=aNode.getOwnerDocument();  assertNotNull("ownerDocumentNotNull",ownerDocument);  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  value=aNode.getNodeValue();  assertEquals("nodeValue","this is a comment",value);}  }
class C{  static boolean equals(final byte[] b1,final int offset1,final int length1,final byte[] b2,final int offset2,final int length2){  if (length1 != length2) {    return false;  }  int i=offset1;  int j=offset2;  int count=length1;  while (count-- != 0) {    if (b1[i++] != b2[j++]) {      return false;    }  }  return true;}  }
class C{  public boolean isTimedOut(){  return timedOut;}  }
class C{  public static BackupDirectory readBackupDirectoryDescriptor(String path) throws IOException, ConfigException {  String descriptorFilePath=path + File.separator + BACKUP_DIRECTORY_DESCRIPTOR_FILE;  if (!new File(descriptorFilePath).exists()) {    throw new ConfigException(ERR_BACKUPDIRECTORY_NO_DESCRIPTOR_FILE.get(descriptorFilePath));  }  try (BufferedReader reader=new BufferedReader(new FileReader(descriptorFilePath))){    String line=reader.readLine();    if (line == null || line.length() == 0) {      throw new ConfigException(ERR_BACKUPDIRECTORY_CANNOT_READ_CONFIG_ENTRY_DN.get(descriptorFilePath));    } else     if (!line.startsWith(PROPERTY_BACKEND_CONFIG_DN)) {      throw new ConfigException(ERR_BACKUPDIRECTORY_FIRST_LINE_NOT_DN.get(descriptorFilePath,line));    }    String dnString=line.substring(PROPERTY_BACKEND_CONFIG_DN.length() + 1);    DN configEntryDN;    try {      configEntryDN=DN.valueOf(dnString);    } catch (    LocalizedIllegalArgumentException e) {      LocalizableMessage message=ERR_BACKUPDIRECTORY_CANNOT_DECODE_DN.get(dnString,descriptorFilePath,e.getMessageObject());      throw new ConfigException(message,e);    }catch (    Exception e) {      LocalizableMessage message=ERR_BACKUPDIRECTORY_CANNOT_DECODE_DN.get(dnString,descriptorFilePath,getExceptionMessage(e));      throw new ConfigException(message,e);    }    BackupDirectory backupDirectory=new BackupDirectory(path,configEntryDN);    List<String> lines=new LinkedList<>();    while ((line=reader.readLine()) != null) {      if (!line.isEmpty()) {        lines.add(line);        continue;      }      readBackupFromLines(backupDirectory,lines);    }    readBackupFromLines(backupDirectory,lines);    return backupDirectory;  } }  }
class C{  public MessageCapture(final Logger logger,final boolean captureEntity,final boolean captureContext){  this.logger=logger;  this.captureEntity=captureEntity;  this.captureContext=captureContext;}  }
class C{  private boolean wouldLoop(Path dir,Object key){  for (  DirectoryNode ancestor : stack) {    Object ancestorKey=ancestor.key();    if (key != null && ancestorKey != null) {      if (key.equals(ancestorKey)) {        return true;      }    } else {      try {        if (Files.isSameFile(dir,ancestor.directory())) {          return true;        }      } catch (      IOException|SecurityException x) {      }    }  }  return false;}  }
class C{  public void markStale(){  stale=true;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void init(Subject subject,Map sharedState,Map options){  if (debug == null) {    debug=com.sun.identity.shared.debug.Debug.getInstance(amAuthCert);  }  java.util.Locale locale=getLoginLocale();  bundle=amCache.getResBundle(amAuthCert,locale);  this.callbackHandler=getCallbackHandler();  this.options=options;  if (debug.messageEnabled()) {    debug.message("Cert Auth resbundle locale=" + locale);    debug.message("Cert auth init() done");  }}  }
class C{  public void skip(int len) throws IOException {  length+=len;  StreamUtil.skip(in,len);}  }
class C{  public static String parseObjectClassOID(String definition) throws DirectoryException {  return parseOID(definition,ERR_PARSING_OBJECTCLASS_OID);}  }
class C{  public static final double nextDouble(double value){  if (value == Double.POSITIVE_INFINITY) {    return value;  }  long bits;  if (value == 0) {    bits=0;  } else {    bits=Double.doubleToLongBits(value);  }  return Double.longBitsToDouble(value < 0 ? bits - 1 : bits + 1);}  }
class C{  public void onProviderDisabled(String provider){}  }
class C{  public final void push(int value){  int ff=m_firstFree;  if ((ff + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new int[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      int newMap[]=new int[m_mapSize];      System.arraycopy(m_map,0,newMap,0,ff + 1);      m_map=newMap;    }  }  m_map[ff]=value;  ff++;  m_firstFree=ff;}  }
class C{  public final int lastIndexOf(int elem){  for (int i=(m_firstFree - 1); i >= 0; i--) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public final BufferedImage filter(BufferedImage src,BufferedImage dest){  ColorSpace srcColorSpace, destColorSpace;  BufferedImage savdest=null;  if (src.getColorModel() instanceof IndexColorModel) {    IndexColorModel icm=(IndexColorModel)src.getColorModel();    src=icm.convertToIntDiscrete(src.getRaster(),true);  }  srcColorSpace=src.getColorModel().getColorSpace();  if (dest != null) {    if (dest.getColorModel() instanceof IndexColorModel) {      savdest=dest;      dest=null;      destColorSpace=null;    } else {      destColorSpace=dest.getColorModel().getColorSpace();    }  } else {    destColorSpace=null;  }  if ((CSList != null) || (!(srcColorSpace instanceof ICC_ColorSpace)) || ((dest != null) && (!(destColorSpace instanceof ICC_ColorSpace)))) {    dest=nonICCBIFilter(src,srcColorSpace,dest,destColorSpace);  } else {    dest=ICCBIFilter(src,srcColorSpace,dest,destColorSpace);  }  if (savdest != null) {    Graphics2D big=savdest.createGraphics();    try {      big.drawImage(dest,0,0,null);    }  finally {      big.dispose();    }    return savdest;  } else {    return dest;  }}  }
class C{  boolean isStrict(){  return strict;}  }
class C{  protected void copy(byte[] src,byte[] dst,int dstOffset){  System.arraycopy(src,0,dst,dstOffset,src.length);}  }
class C{  private static void connect(){  final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port);  Connection connection=null;  try {    connection=factory.getConnection();    connection.bind("","".toCharArray());    final String attributeList;    if ("controls".equals(infoType.toLowerCase())) {      attributeList="supportedControl";    } else     if ("extops".equals(infoType.toLowerCase())) {      attributeList="supportedExtension";    } else {      attributeList="+";    }    final SearchResultEntry entry=connection.searchSingleEntry("",SearchScope.BASE_OBJECT,"(objectclass=*)",attributeList);    final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);    writer.writeComment("Root DSE for LDAP server at " + host + ":"+ port);    if (entry != null) {      writer.writeEntry(entry);    }    writer.flush();  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());    return;  }catch (  final IOException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    return;  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  void ensurePrestart(){  int wc=workerCountOf(ctl.get());  if (wc < corePoolSize)   addWorker(null,true); else   if (wc == 0)   addWorker(null,false);}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws PAOSException {  validateData();  StringBuffer xml=new StringBuffer(300);  xml.append("<");  if (includeNSPrefix) {    xml.append(PAOSConstants.PAOS_PREFIX).append(":");  }  xml.append(PAOSConstants.RESPONSE);  if (declareNS) {    xml.append(" xmlns:").append(PAOSConstants.PAOS_PREFIX).append("=\"").append(PAOSConstants.PAOS_NAMESPACE).append("\" xmlns:").append(PAOSConstants.SOAP_ENV_PREFIX).append("=\"").append(PAOSConstants.SOAP_ENV_NAMESPACE).append("\"");  }  if (refToMessageID != null) {    xml.append(" ").append(PAOSConstants.REF_TO_MESSAGE_ID).append("=\"").append(refToMessageID).append("\"");  }  xml.append(" ").append(PAOSConstants.SOAP_ENV_PREFIX).append(":").append(PAOSConstants.MUST_UNDERSTAND).append("=\"").append(mustUnderstand.toString()).append("\"").append(" ").append(PAOSConstants.SOAP_ENV_PREFIX).append(":").append(PAOSConstants.ACTOR).append("=\"").append(actor).append("\"></");  if (includeNSPrefix) {    xml.append(PAOSConstants.PAOS_PREFIX).append(":");  }  xml.append(PAOSConstants.RESPONSE).append(">");  return xml.toString();}  }
class C{  public int read() throws IOException {  while (in != null) {    int c=in.read();    if (c != -1) {      return c;    }    nextStream();  }  return -1;}  }
class C{  public static String[] array(String... values){  return values;}  }
class C{  public void saveState(Bundle bundle){  for (  ViewItem item : getItems()) {    item.saveState(bundle);  }}  }
class C{  private boolean verifySyntax(Entry entry,Operation operation,DN clientDN) throws DirectoryException {  if (entry.hasOperationalAttribute(aciType)) {    if (!operation.getClientConnection().hasPrivilege(Privilege.MODIFY_ACL,operation)) {      logger.debug(INFO_ACI_ADD_FAILED_PRIVILEGE,entry.getName(),clientDN);      return false;    }    List<Attribute> attributeList=entry.getOperationalAttribute(AttributeDescription.create(aciType));    for (    Attribute attribute : attributeList) {      for (      ByteString value : attribute) {        try {          Aci.decode(value,entry.getName());        } catch (        AciException ex) {          throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,WARN_ACI_ADD_FAILED_DECODE.get(entry.getName(),ex.getMessage()));        }      }    }  }  return true;}  }
class C{  public void insert_longlong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_longlong",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_longlong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static byte[] readFully(InputStream in) throws IOException {  try {    return readFullyNoClose(in);  }  finally {    in.close();  }}  }
class C{  protected ForwardingJavaFileManager(M fileManager){  fileManager.getClass();  this.fileManager=fileManager;}  }
class C{  public JOptionPane(Object message,int messageType,int optionType,Icon icon,Object[] options){  this(message,messageType,optionType,icon,options,null);}  }
class C{  protected StateRoute(StateInteractive p_parent_state,IteraBoard p_board_handling,Actlog p_logfile){  super(p_parent_state,p_board_handling,p_logfile);}  }
class C{  private static BigInteger valueOf(int val[]){  return (val[0] > 0 ? new BigInteger(val,1) : new BigInteger(val));}  }
class C{  private String parseFileName(int gen){  int cur=0;  int next=0;  boolean hasUniqueID=false;  boolean hasGeneration=false;  String tempPath=System.getProperty("java.io.tmpdir");  boolean tempPathHasSepEnd=(tempPath == null ? false : tempPath.endsWith(File.separator));  String homePath=System.getProperty("user.home");  boolean homePathHasSepEnd=(homePath == null ? false : homePath.endsWith(File.separator));  StringBuilder sb=new StringBuilder();  pattern=pattern.replace('/',File.separatorChar);  char[] value=pattern.toCharArray();  while ((next=pattern.indexOf('%',cur)) >= 0) {    if (++next < pattern.length()) {switch (value[next]) {case 'g':        sb.append(value,cur,next - cur - 1).append(gen);      hasGeneration=true;    break;case 'u':  sb.append(value,cur,next - cur - 1).append(uniqueID);hasUniqueID=true;break;case 't':sb.append(value,cur,next - cur - 1).append(tempPath);if (!tempPathHasSepEnd) {sb.append(File.separator);}break;case 'h':sb.append(value,cur,next - cur - 1).append(homePath);if (!homePathHasSepEnd) {sb.append(File.separator);}break;case '%':sb.append(value,cur,next - cur - 1).append('%');break;default :sb.append(value,cur,next - cur);}cur=++next;} else {}}sb.append(value,cur,value.length - cur);if (!hasGeneration && count > 1) {sb.append(".").append(gen);}if (!hasUniqueID && uniqueID > 0) {sb.append(".").append(uniqueID);}return sb.toString();}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  logger.info("shootme: local party = " + dialog.getLocalParty());  try {    logger.info("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    logger.info("shootme: Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    logger.error("UNexpected exception",ex);    fail("UNexpected exception");  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemreturnnodevalue.class,args);}  }
class C{  protected Expression gt(int opPos) throws TransformerException {  return compileOperation(new Gt(),opPos);}  }
class C{  public final void testGetOtherPrimeInfo01(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(checkOtherPrimeInfo(ks.getOtherPrimeInfo()));}  }
class C{  final boolean shouldMapAttrChar(int value){  if (value < ASCII_MAX)   return shouldMapAttrChar_ASCII[value];  return get(value);}  }
class C{  public void resume(){  setPaused(false);}  }
class C{  public ProductService deleteProduct(String productId,Handler<AsyncResult<Void>> resultHandler){  delegate.deleteProduct(productId,resultHandler);  return this;}  }
class C{  private NamedCharacterSet(String name,char[] characters,Random random) throws ConfigException {  this.name=name;  this.characters=characters;  this.random=random;  if (name == null || name.length() == 0) {    LocalizableMessage message=ERR_CHARSET_CONSTRUCTOR_NO_NAME.get();    throw new ConfigException(message);  }  for (int i=0; i < name.length(); i++) {    if (!isAlpha(name.charAt(i))) {      throw new ConfigException(ERR_CHARSET_CONSTRUCTOR_INVALID_NAME_CHAR.get(name.charAt(i),i));    }  }}  }
class C{  boolean alwaysOnTop(){  return true;}  }
class C{  public DelegatingPreparedStatement(final DelegatingConnection<?> c,final PreparedStatement s){  super(c,s);}  }
class C{  public void receiveNewStatus(ChangeStatusMsg csMsg){  replicationServerDomain.processNewStatus(this,csMsg);}  }
class C{  private static boolean isNull(String s){  return s == null || s.length() == 0;}  }
class C{  public static void sendResponse(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String cachedResID) throws SAML2Exception {  String classMethod="IDPSSOUtil.sendResponse: ";  ArrayList cacheList=(ArrayList)IDPCache.responseCache.remove(cachedResID);  if ((cacheList != null) && (cacheList.size() == 9)) {    String acsBinding=(String)cacheList.get(0);    String spEntityID=(String)cacheList.get(1);    String idpEntityID=(String)cacheList.get(2);    String idpMetaAlias=(String)cacheList.get(3);    String realm=(String)cacheList.get(4);    String relayState=(String)cacheList.get(5);    String acsURL=(String)cacheList.get(6);    Response res=(Response)cacheList.get(7);    Object session=cacheList.get(8);    sendResponse(request,response,out,acsBinding,spEntityID,idpEntityID,idpMetaAlias,realm,relayState,acsURL,res,session);  } else {    SAML2Utils.debug.error(classMethod + "unable to get response information from cache.");    throw new SAML2Exception(SAML2Utils.bundle.getString("UnableToGetResponseInfoFromCache"));  }}  }
class C{  protected static byte[] decodeStringContent(byte[] content,int from,int to,boolean hexWriting){  ByteBuffer buffer=new ByteBuffer(to - from + 1);  if (hexWriting) {    for (int i=from; i <= to; ) {      int v1=ByteBuffer.getHex(content[i++]);      if (i > to) {        buffer.append(v1 << 4);        break;      }      int v2=content[i++];      v2=ByteBuffer.getHex(v2);      buffer.append((v1 << 4) + v2);    }  } else {    for (int i=from; i <= to; ) {      int ch=content[i++];      if (ch == '\\') {        boolean lineBreak=false;        ch=content[i++];switch (ch) {case 'n':          ch='\n';        break;case 'r':      ch='\r';    break;case 't':  ch='\t';break;case 'b':ch='\b';break;case 'f':ch='\f';break;case '(':case ')':case '\\':break;case '\r':lineBreak=true;if (i <= to && content[i++] != '\n') {i--;}break;case '\n':lineBreak=true;break;default :{if (ch < '0' || ch > '7') {break;}int octal=ch - '0';ch=content[i++];if (ch < '0' || ch > '7') {i--;ch=octal;break;}octal=(octal << 3) + ch - '0';ch=content[i++];if (ch < '0' || ch > '7') {i--;ch=octal;break;}octal=(octal << 3) + ch - '0';ch=octal & 0xff;break;}}if (lineBreak) continue;} else if (ch == '\r') {ch='\n';if (i <= to && content[i++] != '\n') {i--;}}buffer.append(ch);}}return buffer.toByteArray();}  }
class C{  static public void assertEquals(String message,int expected,int actual){  assertEquals(message,new Integer(expected),new Integer(actual));}  }
class C{  public void test_PBKDF2_b8312059() throws Exception {  char[] password="\u0141\u0142".toCharArray();  byte[] salt="salt".getBytes();  int iterations=4096;  int keyLength=160;  byte[] expected_utf8=new byte[]{(byte)0x4c,(byte)0xe0,(byte)0x6a,(byte)0xb8,(byte)0x48,(byte)0x04,(byte)0xb7,(byte)0xe7,(byte)0x72,(byte)0xf2,(byte)0xaf,(byte)0x5e,(byte)0x54,(byte)0xe9,(byte)0x03,(byte)0xad,(byte)0x59,(byte)0x64,(byte)0x8b,(byte)0xab};  byte[] expected_8bit=new byte[]{(byte)0x6e,(byte)0x43,(byte)0xe0,(byte)0x18,(byte)0xc5,(byte)0x50,(byte)0x0d,(byte)0xa7,(byte)0xfe,(byte)0x7a,(byte)0x44,(byte)0x4d,(byte)0x99,(byte)0x5d,(byte)0x8c,(byte)0xae,(byte)0xc1,(byte)0xc9,(byte)0x17,(byte)0xce};  test_PBKDF2_UTF8(password,salt,iterations,keyLength,expected_utf8);  test_PBKDF2_8BIT(password,salt,iterations,keyLength,expected_8bit);}  }
class C{  public void schedule(TimerTask task,Date when,long period){  if (period <= 0 || when.getTime() < 0) {    throw new IllegalArgumentException();  }  long delay=when.getTime() - System.currentTimeMillis();  scheduleImpl(task,delay < 0 ? 0 : delay,period,false);}  }
class C{  protected boolean inHitRegion(int x,int y){  if (lastRow != -1 && tree != null) {    Rectangle bounds=tree.getRowBounds(lastRow);    ComponentOrientation treeOrientation=tree.getComponentOrientation();    if (treeOrientation.isLeftToRight()) {      if (bounds != null && x <= (bounds.x + offset) && offset < (bounds.width - 5)) {        return false;      }    } else     if (bounds != null && (x >= (bounds.x + bounds.width - offset + 5) || x <= (bounds.x + 5)) && offset < (bounds.width - 5)) {      return false;    }  }  return true;}  }
class C{  public Builder requiredAttributes(final String... attributeNamesOrOIDs){  this.requiredAttributeOIDs.addAll(asList(attributeNamesOrOIDs));  return this;}  }
class C{  public boolean isTraversable(File f){  Boolean traversable=null;  if (f != null) {    if (getFileView() != null) {      traversable=getFileView().isTraversable(f);    }    FileView uiFileView=getUI().getFileView(this);    if (traversable == null && uiFileView != null) {      traversable=uiFileView.isTraversable(f);    }    if (traversable == null) {      traversable=getFileSystemView().isTraversable(f);    }  }  return (traversable != null && traversable.booleanValue());}  }
class C{  public CopyOnWriteArrayList(){  setArray(new Object[0]);}  }
class C{  public boolean isValid(){  return true;}  }
class C{  public final void test_chooseEngineClientAlias(){  X509ExtendedKeyManager km=new MyX509ExtendedKeyManager();  if (km.chooseEngineClientAlias(null,null,null) != null) {    fail("non null result");  }}  }
class C{  public boolean containsValue(Object value){  return contents.containsValue(value);}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public void append(byte[] src){  int length=src.length;  if (BUFFER_SIZE - (end - pos) < length) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("Could not accept income app data."));  }  if (end + length > BUFFER_SIZE) {    System.arraycopy(buffer,pos,buffer,0,end - pos);    end-=pos;    pos=0;  }  System.arraycopy(src,0,buffer,end,length);  end=end + length;}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public SubEntry(Entry entry) throws DirectoryException {  this.entry=entry;  this.subTreeSpec=buildSubTreeSpecification(entry);  this.isCollective=entry.isCollectiveAttributeSubentry();  this.isInheritedCollective=entry.isInheritedCollectiveAttributeSubentry();  if (this.isInheritedCollective) {    this.isInheritedFromDNCollective=entry.isInheritedFromDNCollectiveAttributeSubentry();    this.isInheritedFromRDNCollective=entry.isInheritedFromRDNCollectiveAttributeSubentry();  } else {    this.isInheritedFromDNCollective=false;    this.isInheritedFromRDNCollective=false;  }  if (this.isCollective) {    for (    Attribute subAttr : entry.getAllAttributes()) {      AttributeType attrType=subAttr.getAttributeDescription().getAttributeType();      if (attrType.isCollective()) {        this.collectiveAttributes.add(new CollectiveVirtualAttribute(subAttr));      } else       if (subAttr.getAttributeDescription().hasOption(ATTR_OPTION_COLLECTIVE)) {        AttributeBuilder builder=new AttributeBuilder(subAttr.getAttributeDescription().getAttributeType());        builder.addAll(subAttr);        for (        String option : subAttr.getAttributeDescription().getOptions()) {          if (!ATTR_OPTION_COLLECTIVE.equals(option)) {            builder.setOption(option);          }        }        Attribute attr=builder.toAttribute();        this.collectiveAttributes.add(new CollectiveVirtualAttribute(attr));      }    }  }  if (this.isInheritedCollective) {    if (this.isInheritedFromDNCollective) {      for (      Attribute attr : entry.getAllAttributes(ATTR_INHERIT_COLLECTIVE_FROM_DN_LC)) {        for (        ByteString value : attr) {          this.inheritFromDNType=DirectoryServer.getSchema().getAttributeType(value.toString());          this.inheritFromDNAttrValue=value;          break;        }      }    }    if (this.isInheritedFromRDNCollective) {      for (      Attribute attr : entry.getAllAttributes(ATTR_INHERIT_COLLECTIVE_FROM_RDN_LC)) {        for (        ByteString value : attr) {          this.inheritFromRDNAttrType=DirectoryServer.getSchema().getAttributeType(value.toString());          this.inheritFromRDNAttrValue=value;          break;        }      }      for (      Attribute attr : entry.getAllAttributes(ATTR_INHERIT_COLLECTIVE_FROM_RDN_TYPE_LC)) {        for (        ByteString value : attr) {          this.inheritFromRDNType=DirectoryServer.getSchema().getAttributeType(value.toString());          break;        }      }      for (      Attribute attr : entry.getAllAttributes(ATTR_INHERIT_COLLECTIVE_FROM_BASE_LC)) {        for (        ByteString value : attr) {          this.inheritFromBaseDN=getDN().parent().child(DN.valueOf(value));          break;        }      }    }    for (    Attribute attr : entry.getAllAttributes(ATTR_INHERIT_COLLECTIVE_ATTR_LC)) {      for (      ByteString value : attr) {        Attribute collectiveAttr=Attributes.empty(value.toString());        this.collectiveAttributes.add(new CollectiveVirtualAttribute(collectiveAttr));      }    }  }  if (this.isCollective || this.isInheritedCollective) {    for (    Attribute attr : entry.getAllAttributes(ATTR_COLLECTIVE_CONFLICT_BEHAVIOR_LC)) {      for (      ByteString value : attr) {        for (        CollectiveConflictBehavior behavior : CollectiveConflictBehavior.values()) {          if (behavior.toString().equals(value.toString())) {            this.conflictBehavior=behavior;            break;          }        }      }    }  }}  }
class C{  public boolean isAffiliationMember(String providerID,String affID){  return false;}  }
class C{  public FrameBodyTLEN(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  private SortedSet<String> generateOtherReplicationServerUrls(int excludedRsPort,int totalNbRS){  SortedSet<String> replServers=new TreeSet<>();  if (totalNbRS >= 2) {    addIfNotSame(replServers,rsPorts[0],excludedRsPort);    addIfNotSame(replServers,rsPorts[1],excludedRsPort);    if (totalNbRS >= 3) {      addIfNotSame(replServers,rsPorts[2],excludedRsPort);      if (totalNbRS >= 4) {        addIfNotSame(replServers,rsPorts[3],excludedRsPort);      }    }  }  return replServers;}  }
class C{  @Override public boolean onOptionsItemSelected(final MenuItem item){  return delegate.onOptionsItemSelected(item);}  }
class C{  @Issue("JENKINS-29922") @Test public void dollar_class_must_die_colliding_argument() throws Exception {  WorkflowJob p=r.jenkins.createProject(WorkflowJob.class,"die5");  p.setDefinition(new CpsFlowDefinition("newYork motto:'Empire', moderate:true"));  WorkflowRun run=r.assertBuildStatusSuccess(p.scheduleBuild2(0));  r.assertLogContains("Introducing newYork\nThe Empire State",run);  r.assertLogNotContains("New York can be moderate in spring or fall",run);}  }
class C{  public void free(){  bufHandler.free();}  }
class C{  public void unlockRead(long stamp){  long s, m;  WNode h;  for (; ; ) {    if (((s=state) & SBITS) != (stamp & SBITS) || (stamp & ABITS) == 0L || (m=s & ABITS) == 0L || m == WBIT)     throw new IllegalMonitorStateException();    if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        break;      }    } else     if (tryDecReaderOverflow(s) != 0L)     break;  }}  }
class C{  public ImmutableList<A> toList(){  shared=true;  return elements;}  }
class C{  public Set searchUsers(String wildcard) throws AMException, SSOException {  if ((wildcard == null) || (wildcard.length() == 0)) {    throw new AMException(AMSDKBundle.getString("122",super.locale),"122");  }  Set<String> resultSet;  Set<String> usersSet=getUserDNs();  if (wildcard.length() == 1) {    if (wildcard.equals("*")) {      resultSet=usersSet;    } else {      throw new AMException(AMSDKBundle.getString("122",super.locale),"122");    }  } else {    resultSet=new HashSet<>();    if (wildcard.startsWith("*")) {      String pattern=wildcard.substring(1);      extractUserDNs(pattern,usersSet,resultSet);    } else     if (wildcard.endsWith("*")) {      String pattern=wildcard.substring(0,wildcard.length() - 1);      extractUserDNs(pattern,usersSet,resultSet);    } else {      throw new AMException(AMSDKBundle.getString("122",super.locale),"122");    }  }  return resultSet;}  }
class C{  public void clearLastLoginTime(){  operations.add(PasswordPolicyStateOperationType.CLEAR_LAST_LOGIN_TIME);}  }
class C{  public void close() throws IOException {  closed=true;  if (sink != null) {    sink.receivedLast();  }}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  fsb().sendSAXcharacters(ch,m_start,m_length);}  }
class C{  public static String calculateITableName(IndexIdentifier indexId){  return calculateITableName(indexId.getDatabaseName(),indexId.getTableName(),indexId.getIndexName());}  }
class C{  public void reportError(LocalizableMessage error,boolean isAcceptable,ResultCode resultCode){switch (_configPhase) {case PHASE_INIT:{      _errorMessages.add(error);      _isAcceptable=isAcceptable;      break;    }case PHASE_ACCEPTABLE:{    _unacceptableReasons.add(error);    _isAcceptable=isAcceptable;    break;  }case PHASE_APPLY:{  _errorMessages.add(error);  _isAcceptable=isAcceptable;  if (_resultCode == ResultCode.SUCCESS) {    _resultCode=resultCode;  }  break;}}}  }
class C{  private void checkTrailingNull(List<String> values,String stringValue){  if (!TagOptionSingleton.getInstance().isRemoveTrailingTerminatorOnWrite()) {    if (stringValue.length() > 0 && stringValue.charAt(stringValue.length() - 1) == '\0') {      String lastVal=values.get(values.size() - 1);      String newLastVal=lastVal + '\0';      values.set(values.size() - 1,newLastVal);    }  }}  }
class C{  public static boolean isAbsoluteURI(String systemId){  if (isWindowsAbsolutePath(systemId)) {    return false;  }  final int fragmentIndex=systemId.indexOf('#');  final int queryIndex=systemId.indexOf('?');  final int slashIndex=systemId.indexOf('/');  final int colonIndex=systemId.indexOf(':');  int index=systemId.length() - 1;  if (fragmentIndex > 0)   index=fragmentIndex;  if ((queryIndex > 0) && (queryIndex < index))   index=queryIndex;  if ((slashIndex > 0) && (slashIndex < index))   index=slashIndex;  return ((colonIndex > 0) && (colonIndex < index));}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  public String defaultValue(TypeRef type,PythonImportHandler importHandler){  if (type.getCardinality() == Cardinality.REPEATED) {    return "[]";  }switch (type.getKind()) {case TYPE_MESSAGE:    return importHandler.elementPath(type.getMessageType(),false) + "()";case TYPE_ENUM:  Preconditions.checkArgument(type.getEnumType().getValues().size() > 0,"enum must have a value");return "enums." + pathInEnumFile(type.getEnumType()) + "."+ type.getEnumType().getValues().get(0).getSimpleName();default :if (type.isPrimitive()) {return DEFAULT_VALUE_MAP.get(type.getKind());}throw new IllegalArgumentException("unknown type kind: " + type.getKind());}}  }
class C{  final void chompNewline() throws IOException {  if ((pos != end || fillBuf() != -1) && buf[pos] == '\n') {    ++pos;  }}  }
class C{  public String join(String separator){  StringBuilder sb=new StringBuilder();  boolean isFirst=true;  for (  Object e : this) {    if (isFirst)     isFirst=false; else     sb.append(separator);    sb.append(e);  }  return sb.toString();}  }
class C{  public JKException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public boolean shouldSelectCell(EventObject anEvent){  return true;}  }
class C{  public static String printFloat(float val){  if (theConverter == null)   initConverter();  return theConverter.printFloat(val);}  }
class C{  public ApiHandlerAssert hasI18nTitle(){  assertI18nTitle(actual.title(),annotatedClass);  return this;}  }
class C{  public void removeColumnModelListener(TableColumnModelListener x){  listenerList.remove(TableColumnModelListener.class,x);}  }
class C{  public static Node selectSingleNode(Node doc,String str,NamespaceContext nsctx) throws XPathException {  NodeList nl=selectNodeList(doc,str,nsctx);  if (nl.getLength() == 0) {    return null;  }  return nl.item(0);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String agentGroupName=getStringOptionValue(IArgument.AGENT_GROUP_NAME);  String outfile=getStringOptionValue(IArgument.OUTPUT_FILE);  String[] params={realm,agentGroupName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_AGENT_GROUP",params);    AMIdentity amid=new AMIdentity(adminSSOToken,agentGroupName,IdType.AGENTGROUP,realm,null);    if (!amid.isExists()) {      String[] args={realm,agentGroupName,"agent group did not exist"};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT_GROUP",args);      Object[] p={agentGroupName};      String msg=MessageFormat.format(getResourceString("show-agent-group-does-not-exist"),p);      throw new CLIException(msg,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    Map values=AgentConfiguration.getAgentGroupAttributes(adminSSOToken,realm,agentGroupName);    Set passwords=AgentConfiguration.getAttributesSchemaNames(amid,AttributeSchema.Syntax.PASSWORD);    if ((values != null) && !values.isEmpty()) {      StringBuilder buff=new StringBuilder();      List<String> sortedKeys=new ArrayList<String>(values.keySet());      Collections.sort(sortedKeys);      for (      String attrName : sortedKeys) {        if (passwords.contains(attrName)) {          buff.append(attrName).append("=********\n");        } else {          Set vals=(Set)values.get(attrName);          if (vals.isEmpty()) {            buff.append(attrName).append("=").append("\n");          } else {            for (Iterator j=vals.iterator(); j.hasNext(); ) {              String val=(String)j.next();              buff.append(attrName).append("=").append(val).append("\n");            }          }        }      }      if (outfile == null) {        outputWriter.printlnMessage(buff.toString());      } else {        writeToFile(outfile,buff.toString());        outputWriter.printlnMessage(getResourceString("show-agent-group-to-file"));      }    } else {      outputWriter.printlnMessage(getResourceString("show-agent-group-no-attributes"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SHOW_AGENT_GROUP",params);  } catch (  SMSException e) {    String[] args={realm,agentGroupName,e.getMessage()};    debugError("ShowAgentGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IdRepoException e) {    String[] args={realm,agentGroupName,e.getMessage()};    debugError("ShowAgentGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentGroupName,e.getMessage()};    debugError("ShowAgentGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SHOW_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override public void removeByUuid_C(String uuid,long companyId){  for (  Foo foo : findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  public TextAction(String name){  super(name);}  }
class C{  private boolean isDescendant(ObjectClass ocParent,ObjectClass oChild){  Set<ObjectClass> superiors=oChild.getSuperiorClasses();  if (superiors != null) {    for (    ObjectClass o : superiors) {      if (ocParent == o || isDescendant(ocParent,o)) {        return true;      }    }  }  return false;}  }
class C{  private void assertUniqueMod(List<Modification> mods,ModificationType modType,String value){  assertThat(mods).hasSize(1);  Modification mod=mods.get(0);  assertEquals(mod.getModificationType(),modType);  String firstVal=mod.getAttribute().iterator().next().toString();  assertEquals(firstVal,value);}  }
class C{  public V remove(Object key){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k) {      modCount++;      size--;      @SuppressWarnings("unchecked") V oldValue=(V)tab[i + 1];      tab[i + 1]=null;      tab[i]=null;      closeDeletion(i);      return oldValue;    }    if (item == null)     return null;    i=nextKeyIndex(i,len);  }}  }
class C{  private void assertEqualAdviceExpressionValues(final AdviceExpression ae1,final AdviceExpression ae2){  assertThat(checkEqualAdviceExpressionValues(ae1,ae2)).isTrue();}  }
class C{  public synchronized void addFlavorListener(FlavorListener listener){  if (listener == null) {    return;  }  if (flavorListeners == null) {    currentDataFlavors=getAvailableDataFlavorSet();    flavorListeners=new EventListenerAggregate(FlavorListener.class);  }  flavorListeners.add(listener);}  }
class C{  public static int executeCommand(String[] commandArray,String[] environment,StringBuffer resultBuffer){  int status;  BufferedReader reader=null;  try {    Runtime runtime=Runtime.getRuntime();    Process process=runtime.exec(commandArray,environment);    String line;    reader=new BufferedReader(new InputStreamReader(process.getInputStream()));    if (resultBuffer != null) {      resultBuffer.setLength(0);      for (line=reader.readLine(); line != null; line=reader.readLine()) {        resultBuffer.append(line).append('\n');      }    } else {      line=reader.readLine();      while (line != null) {        line=reader.readLine();      }    }    status=process.waitFor();  } catch (  InterruptedException exc) {    throw new RuntimeException("ExecuteCommand.executeCommand(...) error waiting for " + commandArray[0]);  }catch (  IOException exc) {    throw new RuntimeException("ExecuteCommand.executeCommand(...) : " + "error executing " + commandArray[0]);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException exc) {        Debug.log("ExecuteCommand.executeCommand(...) : " + "Error executing java runtime command",exc);      }    }  }  return status;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapreturnfirstitem.class,args);}  }
class C{  private static boolean checkFolderNamePattern(final String fileName){  Pattern pattern=Pattern.compile(Constants.INVALID_FILE_NAME_REGEX);  Matcher matcher=pattern.matcher(fileName);  return matcher.find();}  }
class C{  DebugTracer(String className,DebugLogPublisher<?>[] publishers){  this.className=className;  publisherSettings=toPublisherSettings(publishers);}  }
class C{  public static List<String> split(String content,Pattern pattern){  List<String> result=Collections.emptyList();  if (content != null) {    result=Arrays.asList(pattern.split(content));  }  return result;}  }
class C{  public static long takePower(ICapabilityProvider provider,EnumFacing side,long power,boolean simulated){  return isTeslaProducer(provider,side) ? getTeslaProducer(provider,side).takePower(power,simulated) : 0;}  }
class C{  private void parseMinorVersion(String version) throws FSMsgException {  try {    minorVersion=Integer.parseInt(version);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingResponse." + "parseMinorVersion:invalid MinorVersion:" + version,e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingResponse." + "parseMinorVersion: MinorVersion is too high");    }    throw new FSMsgException("requestVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingResponse." + "parseMinorVersion: MinorVersion is too low");    }    throw new FSMsgException("requestVersionTooLow",null);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.UsernameTokenElement createUsernameTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.UsernameTokenElementImpl();}  }
class C{  @Override public void initialize(ClassLoadHelper loadHelper,SchedulerSignaler schedSignaler){  logger.info("Initializing RepoJobStore");  this.schedulerSignaler=schedSignaler;  this.loadHelper=loadHelper;  this.writeRetries=Integer.parseInt(IdentityServer.getInstance().getProperty("openidm.scheduler.repo.retry","-1"));}  }
class C{  public static boolean isNetworkProblem(Object error){  return (error instanceof NetworkError);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {  startPrefixMapping(prefix,uri,true);}  }
class C{  public TimeStampHeader createTimeStampHeader(float timeStamp) throws InvalidArgumentException {  if (timeStamp < 0)   throw new IllegalArgumentException("illegal timeStamp");  TimeStamp t=new TimeStamp();  t.setTimeStamp(timeStamp);  return t;}  }
class C{  public Class<?> type(){  if (isClass) {    return (Class<?>)object;  } else {    return object.getClass();  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public void logException(Throwable ex){  logger.error("Error",ex);}  }
class C{  public void test_ConstructorLjava_io_ReaderI() throws IOException {  PushbackReader tobj;  tobj=new PushbackReader(underlying,10000);  tobj=new PushbackReader(underlying,1);  try {    tobj=new PushbackReader(underlying,-1);    tobj.close();    fail("IOException not thrown.");  } catch (  IllegalArgumentException e) {  }  try {    tobj=new PushbackReader(underlying,0);    tobj.close();    fail("IOException not thrown.");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  private boolean deleteDir(File dir){  if (dir != null && dir.isDirectory()) {    String[] children=dir.list();    for (    String aChildren : children) {      boolean success=deleteDir(new File(dir,aChildren));      if (!success) {        return false;      }    }  }  return dir != null && dir.delete();}  }
class C{  static void stringToPacket(String s,DatagramPacket packet){  byte[] bytes=s.getBytes();  System.arraycopy(bytes,0,packet.getData(),0,bytes.length);  packet.setLength(bytes.length);}  }
class C{  public MatteBorder(Icon tileIcon){  this(-1,-1,-1,-1,tileIcon);}  }
class C{  public void reset(){  extensions=new Hashtable();  extOrdering=new Vector();}  }
class C{  public static void start(Context context,Params params){  Intent intent=new Intent(context,DebugPortService.class);  intent.putExtra(INTENT_EXTRA_PARAMS,params);  context.startService(intent);}  }
class C{  public void insert_float(float value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_float",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_float(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public final String toString(){  StringBuffer builder=new StringBuffer(property);  builder.append('=');  builder.append(String.valueOf(value));  return builder.toString();}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public static ACI valueOf(String aciText) throws ACIParseException {  return ACIParser.parseACI(aciText);}  }
class C{  public BrdComponent add(String p_name,PlaPointInt p_location,int p_rotation_in_degree,boolean p_on_front,LibPackage p_package_front,LibPackage p_package_back,boolean p_position_fixed){  BrdComponent new_component=new BrdComponent(p_name,p_location,p_rotation_in_degree,p_on_front,p_package_front,p_package_back,component_list.size() + 1,p_position_fixed);  component_list.add(new_component);  undo_list.insert(new_component);  return new_component;}  }
class C{  public SelectServiceTypeViewBean(){  super("SelectServiceType",DEFAULT_DISPLAY_URL);}  }
class C{  private void addMapping(TreeStateNode node){  treePathMapping.put(node.getTreePath(),node);}  }
class C{  protected void open(){  openWriter();}  }
class C{  public AlreadyBoundException(){}  }
class C{  public IdentityMembershipConditionEditViewBean(){  super("IdentityMembershipConditionEdit",DEFAULT_DISPLAY_URL);}  }
class C{  public ProtocolException(){}  }
class C{  public static Metrics isBoring(LayoutContext layoutContext,CharSequence text,TextPaint paint){  return isBoring(layoutContext,text,paint,TextDirectionHeuristics.FIRSTSTRONG_LTR,null);}  }
class C{  public DSTClient(ResourceOffering resourceOffering,String providerID,Object credential,HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws DSTException {  if (resourceOffering == null) {    DSTUtils.debug.error("DSTClient: resource offering is null");    throw new DSTException(DSTUtils.bundle.getString("nullInputParams"));  }  parseResourceOffering(resourceOffering);  if (securityProfile == Message.X509_TOKEN) {    generateBinarySecurityToken(credential);  }  this.httpRequest=httpRequest;  this.httpResponse=httpResponse;  this.providerID=providerID;}  }
class C{  private Map<String,EntryListeners> exportListeners(){  final Map<String,EntryListeners> listenersCopy=new HashMap<>();  for (  Map.Entry<DN,EntryListeners> entry : listeners.entrySet()) {    listenersCopy.put(entry.getKey().toString(),entry.getValue());  }  return listenersCopy;}  }
class C{  private E advance(){  lastRet=nextNode;  E x=nextItem;  Node<E> pred, p;  if (nextNode == null) {    p=first();    pred=null;  } else {    pred=nextNode;    p=succ(nextNode);  }  for (; ; ) {    if (p == null) {      nextNode=null;      nextItem=null;      return x;    }    E item=p.item;    if (item != null) {      nextNode=p;      nextItem=item;      return x;    } else {      Node<E> next=succ(p);      if (pred != null && next != null)       pred.casNext(p,next);      p=next;    }  }}  }
class C{  public static boolean unexportObject(Remote obj,boolean force) throws java.rmi.NoSuchObjectException {  return sun.rmi.transport.ObjectTable.unexportObject(obj,force);}  }
class C{  private static boolean isValidObjectclassName(String s){  if (s == null || s.length() == 0) {    return false;  }  final StringCharacterIterator iter=new StringCharacterIterator(s,0);  char c=iter.first();  while (c != CharacterIterator.DONE) {    if (VALID_SCHEMA_SYNTAX.indexOf(Character.toLowerCase(c)) == -1) {      return false;    }    c=iter.next();  }  return true;}  }
class C{  public static SearchFilter createORFilter(Collection<SearchFilter> filterComponents){  return new SearchFilter(FilterType.OR,filterComponents,null,null,null,null,null,null,null,false);}  }
class C{  public void testKeyPairGenerator09() throws NoSuchAlgorithmException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator kpg;  for (int i=0; i < algs.length; i++) {    kpg=KeyPairGenerator.getInstance(algs[i],validProvider);    assertEquals("Incorrect algorithm",kpg.getAlgorithm().toUpperCase(),algs[i].toUpperCase());    assertEquals("Incorrect provider",kpg.getProvider(),validProvider);  }}  }
class C{  private static boolean cannotDisplayAdvancedOrCustomTypes(ConsoleApplication app,ManagedObjectDefinition<?,?> defn){  return !app.isAdvancedMode() && (defn.hasOption(ManagedObjectOption.ADVANCED) || CLIProfile.getInstance().isForCustomization(defn));}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  super.handleButton2Request(event);}  }
class C{  public void nodeClicked(RequestInvocationEvent event,int nodeID){  boolean forwardTo=false;  String strNodeId=Integer.toString(nodeID);  if (strNodeId.length() > 2) {    String prefix=strNodeId.substring(0,2);    if (prefix.equals(AMAdminConstants.TAB_AGENT_PREFIX)) {      setPageSessionAttribute(getTrackingTabIDName(),Integer.toString(nodeID));      AMViewConfig amconfig=AMViewConfig.getInstance();      List list=amconfig.getSupportedAgentTypes(getModel());      strNodeId=strNodeId.substring(2);      int idx=Integer.parseInt(strNodeId);      if (idx < list.size()) {        setPageSessionAttribute(PG_SESSION_AGENT_TYPE,(String)list.get(idx));        AMPostViewBean vb=(AMPostViewBean)getViewBean(AMPostViewBean.class);        passPgSessionMap(vb);        vb.setTargetViewBeanURL("../agentconfig/Agents");        vb.forwardTo(getRequestContext());        forwardTo=true;      }    }  }  if (!forwardTo) {    try {      AMViewBeanBase vb=getTabNodeAssociatedViewBean("realms",nodeID);      String tmp=(String)getPageSessionAttribute(AMAdminConstants.PREVIOUS_REALM);      vb.setPageSessionAttribute(AMAdminConstants.PREVIOUS_REALM,tmp);      tmp=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);      vb.setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,tmp);      tmp=(String)getPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID);      vb.setPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID,tmp);      unlockPageTrailForSwapping();      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    } catch (    AMConsoleException e) {      debug.error("AgentViewBean.nodeClicked",e);      forwardTo();    }  }}  }
class C{  protected JMenuBar createMenuBar(){  menuBar=new SystemMenuBar();  menuBar.setFocusable(false);  menuBar.setBorderPainted(true);  menuBar.add(createMenu());  return menuBar;}  }
class C{  private void invoke(ServletRequest request,ServletResponse response,State state) throws IOException, ServletException {  ClassLoader oldCCL=context.bind(false,null);  HttpServletResponse hresponse=state.hresponse;  Servlet servlet=null;  IOException ioException=null;  ServletException servletException=null;  RuntimeException runtimeException=null;  boolean unavailable=false;  if (wrapper.isUnavailable()) {    wrapper.getLogger().warn(sm.getString("applicationDispatcher.isUnavailable",wrapper.getName()));    long available=wrapper.getAvailable();    if ((available > 0L) && (available < Long.MAX_VALUE))     hresponse.setDateHeader("Retry-After",available);    hresponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,sm.getString("applicationDispatcher.isUnavailable",wrapper.getName()));    unavailable=true;  }  try {    if (!unavailable) {      servlet=wrapper.allocate();    }  } catch (  ServletException e) {    wrapper.getLogger().error(sm.getString("applicationDispatcher.allocateException",wrapper.getName()),StandardWrapper.getRootCause(e));    servletException=e;  }catch (  Throwable e) {    ExceptionUtils.handleThrowable(e);    wrapper.getLogger().error(sm.getString("applicationDispatcher.allocateException",wrapper.getName()),e);    servletException=new ServletException(sm.getString("applicationDispatcher.allocateException",wrapper.getName()),e);    servlet=null;  }  ApplicationFilterChain filterChain=ApplicationFilterFactory.createFilterChain(request,wrapper,servlet);  try {    if ((servlet != null) && (filterChain != null)) {      filterChain.doFilter(request,response);    }  } catch (  ClientAbortException e) {    ioException=e;  }catch (  IOException e) {    wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException",wrapper.getName()),e);    ioException=e;  }catch (  UnavailableException e) {    wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException",wrapper.getName()),e);    servletException=e;    wrapper.unavailable(e);  }catch (  ServletException e) {    Throwable rootCause=StandardWrapper.getRootCause(e);    if (!(rootCause instanceof ClientAbortException)) {      wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException",wrapper.getName()),rootCause);    }    servletException=e;  }catch (  RuntimeException e) {    wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException",wrapper.getName()),e);    runtimeException=e;  }  try {    if (filterChain != null)     filterChain.release();  } catch (  Throwable e) {    ExceptionUtils.handleThrowable(e);    wrapper.getLogger().error(sm.getString("standardWrapper.releaseFilters",wrapper.getName()),e);  }  try {    if (servlet != null) {      wrapper.deallocate(servlet);    }  } catch (  ServletException e) {    wrapper.getLogger().error(sm.getString("applicationDispatcher.deallocateException",wrapper.getName()),e);    servletException=e;  }catch (  Throwable e) {    ExceptionUtils.handleThrowable(e);    wrapper.getLogger().error(sm.getString("applicationDispatcher.deallocateException",wrapper.getName()),e);    servletException=new ServletException(sm.getString("applicationDispatcher.deallocateException",wrapper.getName()),e);  }  context.unbind(false,oldCCL);  unwrapRequest(state);  unwrapResponse(state);  recycleRequestWrapper(state);  if (ioException != null)   throw ioException;  if (servletException != null)   throw servletException;  if (runtimeException != null)   throw runtimeException;}  }
class C{  public void invokeInterface(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEINTERFACE,owner,method,true);}  }
class C{  public void requestSecondsUntilPasswordExpirationWarning(){  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_PASSWORD_EXPIRATION_WARNING);}  }
class C{  private ReplicationBroker enableReplication(ReplicaId replicaId) throws Exception {  ReplicationBroker broker=brokers.get(replicaId);  if (broker == null) {    broker=openReplicationSession(replicaId.getBaseDN(),replicaId.getServerId(),100,replicationServerPort,5000);    brokers.put(replicaId,broker);    DomainFakeCfg domainConf=newFakeCfg(replicaId.getBaseDN(),replicaId.getServerId(),replicationServerPort);    startNewReplicationDomain(domainConf,null,null);  }  return broker;}  }
class C{  private void verifyAuthenticationRealm(HttpServletRequest request) throws AuthLoginException, SSOException, RestAuthException {  String orgDN=coreServicesWrapper.getDomainNameByRequest(request);  if (StringUtils.isEmpty(orgDN)) {    throw new RestAuthException(400,"Invalid Domain Alias");  } else {    try {      coreServicesWrapper.isOrganizationActive(orgDN);    } catch (    IdRepoException e) {      throw new RestAuthException(400,"Invalid Domain DN");    }  }}  }
class C{  public void removeIdentity(Identity identity) throws KeyManagementException {}  }
class C{  public void testGetCertificateIssuer(){  assertNull("The default implementation should return null.",tbt_crlentry.getCertificateIssuer());}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  private static int handleDpadVertical(int iconIndex,int cntX,int cntY,int[][] matrix,int increment){  int newIconIndex=NOOP;  if (matrix == null) {    throw new IllegalStateException("Dpad navigation requires a matrix.");  }  int xPos=-1;  int yPos=-1;  for (int i=0; i < cntX; i++) {    for (int j=0; j < cntY; j++) {      if (matrix[i][j] == iconIndex) {        xPos=i;        yPos=j;      }    }  }  if (DEBUG) {    Log.v(TAG,String.format("\thandleDpadVertical: \t[x, y]=[%d, %d] iconIndex=%d",xPos,yPos,iconIndex));  }  for (int j=yPos + increment; 0 <= j && j < cntY && 0 <= j; j=j + increment) {    if ((newIconIndex=inspectMatrix(xPos,j,cntX,cntY,matrix)) != NOOP) {      return newIconIndex;    }  }  int nextXPos1;  int nextXPos2;  int j=-1;  for (int coeff=1; coeff < cntX; coeff++) {    nextXPos1=xPos + coeff * increment;    nextXPos2=xPos - coeff * increment;    for (j=yPos + increment * coeff; 0 <= j && j < cntY; j=j + increment) {      if ((newIconIndex=inspectMatrix(nextXPos1,j,cntX,cntY,matrix)) != NOOP) {        return newIconIndex;      }      if ((newIconIndex=inspectMatrix(nextXPos2,j,cntX,cntY,matrix)) != NOOP) {        return newIconIndex;      }    }  }  return newIconIndex;}  }
class C{  public SIPDate(long timeMillis){  javaCal=new GregorianCalendar(TimeZone.getTimeZone("GMT:0"),Locale.getDefault());  java.util.Date date=new java.util.Date(timeMillis);  javaCal.setTime(date);  wkday=javaCal.get(Calendar.DAY_OF_WEEK);switch (wkday) {case Calendar.MONDAY:    sipWkDay=MON;  break;case Calendar.TUESDAY:sipWkDay=TUE;break;case Calendar.WEDNESDAY:sipWkDay=WED;break;case Calendar.THURSDAY:sipWkDay=THU;break;case Calendar.FRIDAY:sipWkDay=FRI;break;case Calendar.SATURDAY:sipWkDay=SAT;break;case Calendar.SUNDAY:sipWkDay=SUN;break;default :InternalErrorHandler.handleException("No date map for wkday " + wkday);}day=javaCal.get(Calendar.DAY_OF_MONTH);month=javaCal.get(Calendar.MONTH);switch (month) {case Calendar.JANUARY:sipMonth=JAN;break;case Calendar.FEBRUARY:sipMonth=FEB;break;case Calendar.MARCH:sipMonth=MAR;break;case Calendar.APRIL:sipMonth=APR;break;case Calendar.MAY:sipMonth=MAY;break;case Calendar.JUNE:sipMonth=JUN;break;case Calendar.JULY:sipMonth=JUL;break;case Calendar.AUGUST:sipMonth=AUG;break;case Calendar.SEPTEMBER:sipMonth=SEP;break;case Calendar.OCTOBER:sipMonth=OCT;break;case Calendar.NOVEMBER:sipMonth=NOV;break;case Calendar.DECEMBER:sipMonth=DEC;break;default :InternalErrorHandler.handleException("No date map for month " + month);}year=javaCal.get(Calendar.YEAR);hour=javaCal.get(Calendar.HOUR_OF_DAY);minute=javaCal.get(Calendar.MINUTE);second=javaCal.get(Calendar.SECOND);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String prefixValue;  java.util.List prefixValues=new java.util.ArrayList();  prefixValues.add("_:");  prefixValues.add(":0");  prefixValues.add(":");  prefixValues.add("_::");  prefixValues.add("a:0:c");  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/L2","dom:elem");  for (int indexN10050=0; indexN10050 < prefixValues.size(); indexN10050++) {    prefixValue=(String)prefixValues.get(indexN10050);{      boolean success=false;      try {        element.setPrefix(prefixValue);      } catch (      DOMException ex) {        success=(ex.code == DOMException.NAMESPACE_ERR);      }      assertTrue("throw_NAMESPACE_ERR",success);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforerefchildnull.class,args);}  }
class C{  public static Aci decode(ByteSequence byteString,DN dn) throws AciException {  String input=byteString.toString();  if (!Pattern.matches(aciRegex,input)) {    throw new AciException(WARN_ACI_SYNTAX_GENERAL_PARSE_FAILED.get(input));  }  AciBody body=AciBody.decode(input);  String targetStr=input.substring(0,body.getMatcherStartPos());  AciTargets targets=AciTargets.decode(targetStr,dn);  return new Aci(input,dn,body,targets);}  }
class C{  void resetId(){  id=NativeCrypto.SSL_SESSION_session_id(sslSessionNativePointer);}  }
class C{  public Builder names(final Collection<String> names){  this.names.addAll(names);  return this;}  }
class C{  public void internalFrameClosing(InternalFrameEvent e){}  }
class C{  public boolean isSessionBlacklistingEnabled(){  return hotSwappableSessionServiceConfig.sessionBlacklistEnabled;}  }
class C{  public static int sizeOfMap(@SuppressWarnings("rawtypes") Map map){  if (map == null) {    return 0;  }  int size=36;  Object[] values=map.values().toArray();  for (int i=0; i < values.length; i++) {    size+=sizeOfString((String)values[i]);  }  Object[] keys=map.keySet().toArray();  for (int i=0; i < keys.length; i++) {    size+=sizeOfString((String)keys[i]);  }  return size;}  }
class C{  public void insert_long(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_long",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_long(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testBitCountZero(){  BigInteger aNumber=new BigInteger("0");  assertEquals(0,aNumber.bitCount());}  }
class C{  public void testParsingNumbersThatAreBestRepresentedAsLongs() throws JSONException {  assertParsed(9223372036854775807L,"9223372036854775807");  assertParsed(9223372036854775806L,"9223372036854775806");  assertParsed(-9223372036854775808L,"-9223372036854775808");  assertParsed(-9223372036854775807L,"-9223372036854775807");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretDynamicPlaintextType createSharedSecretDynamicPlaintextType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretDynamicPlaintextTypeImpl();}  }
class C{  public void testPowNegativeNumToOddExp(){  byte aBytes[]={50,-26,90,69,120,32,63,-103,-14,35};  int aSign=-1;  int exp=5;  byte rBytes[]={-21,-94,-42,-15,-127,113,-50,-88,115,-35,3,59,-92,111,-75,103,-42,41,34,-114,99,-32,105,-59,127,45,108,74,-93,105,33,12,-5,-20,17,-21,-119,-127,-115,27,-122,26,-67,109,-125,16,91,-70,109};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.pow(exp);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public Observable<DriveId> createFile(DriveFolder folder,final InputStream inputStream,String title){  return createFile(folder,inputStream,title,null);}  }
class C{  public boolean equals(Object obj){  return (obj != null && obj instanceof CompositeName && impl.equals(((CompositeName)obj).impl));}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public void dropComplete(boolean success){  getDropTargetContext().dropComplete(success);}  }
class C{  public static boolean isCookieSecure(){  return secureCookie;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (DEBUG)   System.out.println("endElement: uri: " + uri + ", localname: "+ localName+ ", qname: "+ qName);  charactersFlush();  m_contextIndexes.quickPop(1);  int topContextIndex=m_contextIndexes.peek();  if (topContextIndex != m_prefixMappings.size()) {    m_prefixMappings.setSize(topContextIndex);  }  int lastNode=m_previous;  m_previous=m_parents.pop();  if (DTM.NULL == lastNode)   m_firstch.setElementAt(DTM.NULL,m_previous); else   m_nextsib.setElementAt(DTM.NULL,lastNode);  popShouldStripWhitespace();}  }
class C{  public static boolean isRoleStatus(int status){  if (status != NO_ROLE_WITH_NAME && status != ROLE_NOT_READABLE && status != ROLE_NOT_WRITABLE && status != LESS_THAN_MIN_ROLE_DEGREE && status != MORE_THAN_MAX_ROLE_DEGREE && status != REF_MBEAN_OF_INCORRECT_CLASS && status != REF_MBEAN_NOT_REGISTERED) {    return false;  }  return true;}  }
class C{  public AMSearchResults searchAssignableDynamicGroups(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchAssignableDynamicGroups(wildcard,null,searchControl);}  }
class C{  public int component_count(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("component_count",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    return $self.component_count();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public ServerConfigInheritViewBean(){  super("ServerConfigInherit");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  protected DecodeException newUnexpectedResponseException(final int messageID,final Response response){  return DecodeException.fatalError(LocalizableMessage.raw("Unexpected LDAP response: id=%d, message=%s",messageID,response));}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  response.setContentType("text/html");  response.setCharacterEncoding("UTF-8");  try (PrintWriter writer=response.getWriter()){    writer.println("<!DOCTYPE html><html>");    writer.println("<head>");    writer.println("<meta charset=\"UTF-8\" />");    writer.println("<title>Sample Application Servlet Page</title>");    writer.println("</head>");    writer.println("<body>");    writer.println("<div style=\"float: left; padding: 10px;\">");    writer.println("<img src=\"images/tomcat.gif\" alt=\"\" />");    writer.println("</div>");    writer.println("<h1>Sample Application Servlet</h1>");    writer.println("<p>");    writer.println("This is the output of a servlet that is part of");    writer.println("the Hello, World application.");    writer.println("</p>");    writer.println("</body>");    writer.println("</html>");  } }  }
class C{  private static Object newInstance(String className,ClassLoader classLoader) throws SOAPException {  try {    Class spiClass=safeLoadClass(className,classLoader);    return spiClass.newInstance();  } catch (  ClassNotFoundException x) {    throw new SOAPException("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new SOAPException("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public void rederiveColor(){  Color src=UIManager.getColor(uiDefaultParentName);  if (src != null) {    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);    tmp[0]=clamp(tmp[0] + hOffset);    tmp[1]=clamp(tmp[1] + sOffset);    tmp[2]=clamp(tmp[2] + bOffset);    int alpha=clamp(src.getAlpha() + aOffset);    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);  } else {    float[] tmp=new float[3];    tmp[0]=clamp(hOffset);    tmp[1]=clamp(sOffset);    tmp[2]=clamp(bOffset);    int alpha=clamp(aOffset);    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);  }}  }
class C{  static void appendBytes(String content,Mode mode,BitArray bits,String encoding) throws WriterException {switch (mode) {case NUMERIC:    appendNumericBytes(content,bits);  break;case ALPHANUMERIC:appendAlphanumericBytes(content,bits);break;case BYTE:append8BitBytes(content,bits,encoding);break;case KANJI:appendKanjiBytes(content,bits);break;default :throw new WriterException("Invalid mode: " + mode);}}  }
class C{  public Builder oid(final String oid){  this.oid=oid;  return this;}  }
class C{  public static void sort(int[] a){  doSort(a,0,a.length - 1);}  }
class C{  public DsnShape board_to_dsn_rel(freert.planar.PlaShape p_board_shape,DsnLayer p_layer){  DsnShape result;  if (p_board_shape instanceof ShapeTileBox) {    result=new DsnRectangle(p_layer,board_to_dsn_rel((ShapeTileBox)p_board_shape));  } else   if (p_board_shape instanceof ShapeSegments) {    PlaPointFloat[] corners=((ShapeSegments)p_board_shape).corner_approx_arr();    double[] coors=board_to_dsn_rel(corners);    result=new DsnPolygon(p_layer,coors);  } else   if (p_board_shape instanceof freert.planar.ShapeCircle) {    freert.planar.ShapeCircle board_circle=(freert.planar.ShapeCircle)p_board_shape;    double diameter=2 * board_to_dsn(board_circle.radius);    double[] center_coor=board_to_dsn_rel(board_circle.center.to_float());    result=new DsnCircle(p_layer,diameter,center_coor[0],center_coor[1]);  } else {    System.out.println("CoordinateTransform.board_to_dsn not yet implemented for p_board_shape");    result=null;  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attr;  NodeList childList;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  doc=(Document)load("staffNS",true);  childList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=(Element)childList.item(1);  attr=element.getAttributeNode("defaultAttr");  importedAttr=doc.importNode(attr,false);  nodeName=importedAttr.getNodeName();  nodeValue=importedAttr.getNodeValue();  nodeType=(int)importedAttr.getNodeType();  assertEquals("documentimportnode03_nodeName","defaultAttr",nodeName);  assertEquals("documentimportnode03_nodeType",2,nodeType);  assertEquals("documentimportnode03_nodeValue","defaultVal",nodeValue);}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  paramIndex=((ParamIndex)elems.elementAt(0)).intValue;  paramValue=((ParamValue)elems.elementAt(1)).str;}  }
class C{  public static void validateChannel(String channel){  if (channel == null) {    throw new IllegalArgumentException("Channel cannot be null");  }  if (channel.length() > Messenger.MAX_CHANNEL_SIZE) {    throw new ChannelNameTooLongException(channel);  }}  }
class C{  public void updateTaskInformation(ConnectionWrapper connWrapper,List<Exception> ex,Collection<TaskEntry> ts){  SearchRequest request=newSearchRequest(DN_TASK_ROOT,WHOLE_SUBTREE,"(objectclass=ds-task)",getMonitoringAttributes());  try (ConnectionEntryReader taskEntries=connWrapper.getConnection().search(request)){    while (taskEntries.hasNext()) {      SearchResultEntry sr=taskEntries.readEntry();      handleTaskSearchResult(sr,ts,ex);    }  } catch (  IOException e) {    ex.add(new OnlineUpdateException(ERR_READING_CONFIG_LDAP.get(e.getMessage()),e));  }}  }
class C{  public JPasswordField(String text,int columns){  this(null,text,columns);}  }
class C{  private boolean removeMapping(Object key,Object value){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k) {      if (tab[i + 1] != value)       return false;      modCount++;      size--;      tab[i]=null;      tab[i + 1]=null;      closeDeletion(i);      return true;    }    if (item == null)     return false;    i=nextKeyIndex(i,len);  }}  }
class C{  public static int findWordStart(String line,int pos,String noWordSep){  return findWordStart(line,pos,noWordSep,true,false);}  }
class C{  @Override protected void uninstallDefaults(){  if (spinner.getLayout() instanceof UIResource) {    spinner.setLayout(null);  }  SynthContext context=getContext(spinner,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;}  }
class C{  public static ByteBuffer parseBase64StringAsByteBuffer(String in){  return ByteBuffer.wrap(Base64.decodeBase64(in.getBytes()));}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public final void testToString(){  LDAPCertStoreParameters cp1=new LDAPCertStoreParameters("myhost",1101);  assertNotNull(cp1.toString());}  }
class C{  protected ComboBoxEditor createEditor(){  return new BasicComboBoxEditor.UIResource();}  }
class C{  protected void freeBuffers(){  CryptoInputStream.freeDirectBuffer(inBuffer);  CryptoInputStream.freeDirectBuffer(outBuffer);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite " + request + "sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      logger.info("null server tx -- getting a new one");      st=sipProvider.getNewServerTransaction(request);    }    logger.info("getNewServerTransaction : " + st);    if (request.getContentLength().getContentLength() < 1) {      throw new Exception("Content Length shouldn't be lower than zero, bad parsing occured along the way");    }    String value=((HeaderExt)request.getHeader(PPreferredServiceHeader.NAME)).getValue();    if (value == null || !value.equalsIgnoreCase(InviteTest.PREFERRED_SERVICE_VALUE)) {      throw new Exception("Bad value " + value);    }    String txId=((ViaHeader)request.getHeader(ViaHeader.NAME)).getBranch();    this.serverTxTable.put(txId,st);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    Response ringingResponse=messageFactory.createResponse(Response.RINGING,request);    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ringingResponse.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);    String toTag="shootme-" + myPort + "-"+ new Integer(new Random().nextInt()).toString();    toHeader.setTag(toTag);    if (sendRinging) {      ringingResponse.addHeader(contactHeader);      Thread.sleep(this.ringingDelay / 2);      st.sendResponse(ringingResponse);    }    Dialog dialog=st.getDialog();    dialog.setApplicationData(st);    this.inviteSeen=true;    timer.schedule(new MyTimerTask(requestEvent,st,toTag),this.okDelay);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  private boolean idpProxyCase(String requestID,HttpServletRequest request,HttpServletResponse response) throws ServerFaultException {  final String classMethod="IDPSSOFederate.idpProxyCase:";  final Map paramsMap=(Map)SPCache.reqParamHash.get(requestID);  if (requestID != null) {    String preferredIDP=SAML2Utils.getPreferredIDP(request);    if (preferredIDP != null) {      SAML2Utils.debug.message("{} IDP to be proxied {}",classMethod,preferredIDP);      try {        IDPProxyUtil.sendProxyAuthnRequest((AuthnRequest)paramsMap.get("authnReq"),preferredIDP,(SPSSODescriptorElement)paramsMap.get("spSSODescriptor"),(String)paramsMap.get("idpEntityID"),request,response,(String)paramsMap.get("realm"),(String)paramsMap.get("relayState"),(String)paramsMap.get("binding"));        SPCache.reqParamHash.remove(requestID);        return true;      } catch (      SAML2Exception|IOException e) {        SAML2Utils.debug.message(classMethod + "{} Redirecting for the proxy handling error: {}",classMethod,e.getMessage());        throw new ServerFaultException("UnableToRedirectToPreferredIDP",e.getMessage());      }    }  }  return false;}  }
class C{  public boolean containsKey(String itemName){  if (itemName == null) {    return false;  }  return nameToDescription.containsKey(itemName);}  }
class C{  private static Issuer createIssuer(String entityID) throws SAML2Exception {  Issuer issuer=AssertionFactory.getInstance().createIssuer();  issuer.setValue(entityID);  return issuer;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.AttributedString createAttributedString() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.AttributedStringImpl();}  }
class C{  public void insert_wstring(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wstring",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_wstring(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  final boolean unlink(Index<K,V> succ){  return !indexesDeletedNode() && casRight(succ,succ.right);}  }
class C{  public FrameBodyWCOM(String urlLink){  super(urlLink);}  }
class C{  private static boolean isAccentColorTinted(View view){  return view instanceof EditText;}  }
class C{  private void initializeGlobalArguments() throws ArgumentException {  if (!globalArgumentsInitialized) {    configFile=configFileArgument();    noPrompt=noPromptArgument();    verbose=verboseArgument();    quietMode=quietArgument();    ignoreErrors=BooleanArgument.builder(OPTION_LONG_IGNORE_ERRORS).description(INFO_UPGRADE_OPTION_IGNORE_ERRORS.get()).buildArgument();    force=BooleanArgument.builder(OPTION_LONG_FORCE_UPGRADE).description(INFO_UPGRADE_OPTION_FORCE.get(OPTION_LONG_NO_PROMPT)).buildArgument();    acceptLicense=acceptLicenseArgument();    showUsageArgument=showUsageArgument();    parser.addGlobalArgument(showUsageArgument);    parser.setUsageArgument(showUsageArgument,getOutputStream());    parser.addGlobalArgument(configFile);    parser.addGlobalArgument(noPrompt);    parser.addGlobalArgument(verbose);    parser.addGlobalArgument(quietMode);    parser.addGlobalArgument(force);    parser.addGlobalArgument(ignoreErrors);    parser.addGlobalArgument(acceptLicense);    globalArgumentsInitialized=true;  }}  }
class C{  public String peekNextId(){  int oldPtr=ptr;  String retval=ttoken();  savedPtr=ptr;  ptr=oldPtr;  return retval;}  }
class C{  public boolean verifyXMLSignature(java.lang.String xmlString,java.lang.String certAlias) throws XMLSignatureException {  return verifyXMLSignature(xmlString,DEF_ID_ATTRIBUTE,certAlias);}  }
class C{  public static boolean isValidIP(String ipAddress){  return ValidateIPaddress.isIPv4(ipAddress) || ValidateIPaddress.isIPv6(ipAddress);}  }
class C{  public void readString(String s){}  }
class C{  public static GenericControl newControl(final String oid,final boolean isCritical){  return new GenericControl(oid,isCritical,null);}  }
class C{  public void removeService(String name){  try {    envCtx.unbind(name);  } catch (  NamingException e) {    log.error(sm.getString("naming.unbindFailed",e));  }}  }
class C{  public Extensions generate(){  Extension[] exts=new Extension[extOrdering.size()];  for (int i=0; i != extOrdering.size(); i++) {    exts[i]=(Extension)extensions.get(extOrdering.elementAt(i));  }  return new Extensions(exts);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  modifyProperties();  forwardTo();}  }
class C{  public void nodeClicked(RequestInvocationEvent event,int nodeID){  try {    AMViewBeanBase vb=getTabNodeAssociatedViewBean(null,nodeID);    passPgSessionMapEx(vb);    vb.resetView();    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    AMModelBase.debug.error("AMPrimaryMastHeadViewBean.nodeClicked",e);    forwardTo();  }}  }
class C{  private static boolean checkConditions(Flag flag,FlagContextInterface context){switch (flag.getStrategy()) {case Flag.UNANIMOUS:    strategy=new UnanimousStrategy();  break;case Flag.MAJORITY:strategy=new MajorityStrategy();break;case Flag.AFFIRMATIVE:strategy=new AffirmativeStrategy();break;}return strategy.isFlagActivated(flag,context);}  }
class C{  public LineBorder(Color color){  this(color,1,false);}  }
class C{  StaticGroup(AttrSet attrSet) throws UMSException {  this(TemplateManager.getTemplateManager().getCreationTemplate(_class,null),attrSet);}  }
class C{  public void init(int mode,byte[] key,byte[] iv){  context=OpenSslNative.init(context,mode,algorithm,padding,key,iv);}  }
class C{  private void processDeleteModification(Attribute attr) throws DirectoryException {  List<ByteString> missingValues=new LinkedList<>();  boolean attrExists=modifiedEntry.removeAttribute(attr,missingValues);  AttributeDescription attrDesc=attr.getAttributeDescription();  if (attrExists) {    if (missingValues.isEmpty()) {      AttributeType t=attrDesc.getAttributeType();      RDN rdn=modifiedEntry.getName().rdn();      if (rdn != null && rdn.hasAttributeType(t) && !modifiedEntry.hasValue(attrDesc,rdn.getAttributeValue(t))) {        throw newDirectoryException(currentEntry,ResultCode.NOT_ALLOWED_ON_RDN,ERR_MODIFY_DELETE_RDN_ATTR.get(entryDN,attrDesc));      }    } else     if (!permissiveModify) {      String missingValuesStr=Utils.joinAsString(", ",missingValues);      throw newDirectoryException(currentEntry,ResultCode.NO_SUCH_ATTRIBUTE,ERR_MODIFY_DELETE_MISSING_VALUES.get(entryDN,attrDesc,missingValuesStr));    }  } else   if (!permissiveModify) {    throw newDirectoryException(currentEntry,ResultCode.NO_SUCH_ATTRIBUTE,ERR_MODIFY_DELETE_NO_SUCH_ATTR.get(entryDN,attrDesc));  }}  }
class C{  static Promise<Boolean> blockingPromiseBoolean(final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  public SAMLRequestVersionDeprecatedException(Throwable t){  super(t);}  }
class C{  public static FSAuthnRequestEnvelope parseBASE64EncodedString(String encodedReq) throws FSMsgException {  if (encodedReq != null) {    String decodedAuthnReq=new String(Base64.decode(encodedReq));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequestEnvelope." + "parseBASE64EncodedString: decoded input string: \n" + decodedAuthnReq);    }    return parseXML(decodedAuthnReq);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequestEnvelope.parseBASE64EncodedString: null " + " String passed in as argument.");    }    throw new FSMsgException("nullInput",null);  }}  }
class C{  boolean isFinished(){  if (lastValid > pos) {    return false;  }  if (lastActiveFilter >= 0) {    return activeFilters[lastActiveFilter].isFinished();  } else {    return false;  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof NumberOfDocuments);}  }
class C{  public URI(String scheme,String authority,String path,String query,String fragment) throws URISyntaxException {  if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {    throw new URISyntaxException(path,"Relative path");  }  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (authority != null) {    uri.append("//");    AUTHORITY_ENCODER.appendEncoded(uri,authority);  }  if (path != null) {    PATH_ENCODER.appendEncoded(uri,path);  }  if (query != null) {    uri.append('?');    ALL_LEGAL_ENCODER.appendEncoded(uri,query);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),false);}  }
class C{  public int doRead(ByteChunk chunk) throws IOException {  int n=inputBuffer.doRead(chunk);  if (n > 0) {    bytesRead+=n;  }  return n;}  }
class C{  public static String[] removeEmptyStrings(String[] strings){  if (Objects.isNull(strings)) {    throw new IllegalArgumentException("Input array should not be null");  }  return Arrays.stream(strings).filter(null).toArray(null);}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();}  }
class C{  public FrameBodyTDRC(){  super();}  }
class C{  public static String colon(String self,String ratio,String colon){  return COLON.matcher(RATIO.matcher(self).replaceAll(ratio)).replaceAll(colon);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("xml","2.0");  assertTrue("throw_True",state);}  }
class C{  public synchronized void delay(int ms){  checkDelayArgument(ms);  try {    Thread.sleep(ms);  } catch (  InterruptedException ite) {    ite.printStackTrace();  }}  }
class C{  public TransformerConfigurationException(String msg,Throwable e){  super(msg,e);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.RelatesToType createRelatesToType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.RelatesToTypeImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  Element newElem;  Document ownerDocDoc;  Document ownerDocElem;  DOMImplementation domImpl;  DocumentType docType;  String nullNS=null;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("mydoc",nullNS,nullNS);  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","mydoc",docType);  ownerDocDoc=newDoc.getOwnerDocument();  assertNull("nodegetownerdocument02_1",ownerDocDoc);  newElem=newDoc.createElementNS("http://www.w3.org/DOM/Test","myelem");  ownerDocElem=newElem.getOwnerDocument();  assertNotNull("nodegetownerdocument02_2",ownerDocElem);}  }
class C{  public static String convert(String mimeCharsetName){  return s_enchash.get(mimeCharsetName.toUpperCase(Locale.ENGLISH));}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  super.endElement(handler,uri,localName,rawName);  handler.popElemTemplateElement().setEndLocaterInfo(handler.getLocator());}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  flushPending();  startEntity(name);  endEntity(name);  if (m_tracer != null)   fireEntityReference(name);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterMessageFromOperator);}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.ProviderElement createProviderElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ProviderElementImpl();}  }
class C{  public DropTarget() throws HeadlessException {  this(null,DnDConstants.ACTION_COPY_OR_MOVE,null,true,null);}  }
class C{  public AccessAccept(){  super(PacketType.ACCESS_ACCEPT);}  }
class C{  public static String addWordBreaks(String htmlString,int from,int spacing){  StringBuilder sb=new StringBuilder();  boolean insideTag=false;  int totalAddedChars=0;  int addedChars=0;  for (int i=0; i < htmlString.length(); i++) {    char c=htmlString.charAt(i);    sb.append(c);    if (c == '<') {      insideTag=true;    } else     if (c == '>' && insideTag) {      insideTag=false;    }    if (!insideTag && c != '>') {      addedChars++;      totalAddedChars++;    }    if (addedChars > spacing && totalAddedChars > from && !insideTag) {      sb.append("<wbr>");      addedChars=0;    }  }  return sb.toString();}  }
class C{  public void testDoubleValueNegative2(){  String a="-2746723894572364578265426346273456972";  double result=-2.7467238945723645E36;  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public void insert_short(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_short",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_short(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void error(TransformerException exception) throws TransformerException {  if (m_throwExceptionOnError)   throw exception; else {    PrintWriter pw=getErrorWriter();    printLocation(pw,exception);    pw.println(exception.getMessage());  }}  }
class C{  public boolean requiresResourceName(){  return (isResourceNameAllowed());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr streetAttr;  Attr replacedAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  streetAttr=testEmployee.getAttributeNode("street");  replacedAttr=testEmployee.setAttributeNode(streetAttr);  assertSame("replacedAttr",streetAttr,replacedAttr);}  }
class C{  public AMAccountLockout(LoginState loginState){  this.loginState=loginState;  loginFailureLockoutTime=loginState.getLoginFailureLockoutTime();  loginFailureLockoutCount=loginState.getLoginFailureLockoutCount();  loginLockoutNotification=loginState.getLoginLockoutNotification();  loginLockoutUserWarning=loginState.getLoginLockoutUserWarning();  loginLockoutAttrName=loginState.getLoginLockoutAttrName();  loginLockoutAttrValue=loginState.getLoginLockoutAttrValue();  loginFailureLockoutDuration=loginState.getLoginFailureLockoutDuration();  loginFailureLockoutMultiplier=loginState.getLoginFailureLockoutMultiplier();  loginFailureLockoutMode=loginState.getLoginFailureLockoutMode();  loginFailureLockoutStoreInDS=loginState.getLoginFailureLockoutStoreInDS();  String invalidAttemptsDataAttrName=loginState.getInvalidAttemptsDataAttrName();  isAccountLockout=new ISAccountLockout(loginFailureLockoutMode,loginFailureLockoutTime,loginFailureLockoutCount,loginLockoutNotification,loginLockoutUserWarning,loginLockoutAttrName,loginLockoutAttrValue,loginFailureLockoutDuration,loginFailureLockoutMultiplier,invalidAttemptsDataAttrName,BUNDLE_NAME);  isAccountLockout.setStoreInvalidAttemptsInDS(loginFailureLockoutStoreInDS);}  }
class C{  public boolean match(Object other){  if (other == null)   return true;  if (!this.getClass().equals(other.getClass()))   return false;  GenericObject that=(GenericObject)other;  Class<?> hisclass=other.getClass();  Class<?> myclass=this.getClass();  while (true) {    Field[] fields=myclass.getDeclaredFields();    Field[] hisfields=hisclass.getDeclaredFields();    for (int i=0; i < fields.length; i++) {      Field f=fields[i];      Field g=hisfields[i];      int modifier=f.getModifiers();      if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)       continue;      Class<?> fieldType=f.getType();      String fieldName=f.getName();      if (fieldName.compareTo("stringRepresentation") == 0) {        continue;      }      if (fieldName.compareTo("indentation") == 0) {        continue;      }      try {        if (fieldType.isPrimitive()) {          String fname=fieldType.toString();          if (fname.compareTo("int") == 0) {            if (f.getInt(this) != g.getInt(that))             return false;          } else           if (fname.compareTo("short") == 0) {            if (f.getShort(this) != g.getShort(that))             return false;          } else           if (fname.compareTo("char") == 0) {            if (f.getChar(this) != g.getChar(that))             return false;          } else           if (fname.compareTo("long") == 0) {            if (f.getLong(this) != g.getLong(that))             return false;          } else           if (fname.compareTo("boolean") == 0) {            if (f.getBoolean(this) != g.getBoolean(that))             return false;          } else           if (fname.compareTo("double") == 0) {            if (f.getDouble(this) != g.getDouble(that))             return false;          } else           if (fname.compareTo("float") == 0) {            if (f.getFloat(this) != g.getFloat(that))             return false;          }        } else {          Object myObj=f.get(this);          Object hisObj=g.get(that);          if (hisObj != null && myObj == null)           return false; else           if (hisObj == null && myObj != null)           continue; else           if (hisObj == null && myObj == null)           continue; else           if (hisObj instanceof java.lang.String && myObj instanceof java.lang.String) {            if (((String)hisObj).equals(""))             continue;            if (((String)myObj).compareToIgnoreCase((String)hisObj) != 0)             return false;          } else           if (GenericObject.isMySubclass(myObj.getClass()) && GenericObject.isMySubclass(hisObj.getClass()) && myObj.getClass().equals(hisObj.getClass())&& ((GenericObject)hisObj).getMatcher() != null) {            String myObjEncoded=((GenericObject)myObj).encode();            boolean retval=((GenericObject)hisObj).getMatcher().match(myObjEncoded);            if (!retval)             return false;          } else           if (GenericObject.isMySubclass(myObj.getClass()) && !((GenericObject)myObj).match(hisObj))           return false; else           if (GenericObjectList.isMySubclass(myObj.getClass()) && !((GenericObjectList)myObj).match(hisObj))           return false;        }      } catch (      IllegalAccessException ex1) {        InternalErrorHandler.handleException(ex1);      }    }    if (myclass.equals(NetObject.class))     break; else {      myclass=myclass.getSuperclass();      hisclass=hisclass.getSuperclass();    }  }  return true;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.TripleDesRsa15Element createTripleDesRsa15Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.TripleDesRsa15ElementImpl();}  }
class C{  public AreaBreak(){  this(AreaBreakType.NEXT_AREA);}  }
class C{  private synchronized void checkIfAvailable(){  if (!isOperational.get() && (pendingConnectPromise == null || pendingConnectPromise.isDone())) {    logger.debug(LocalizableMessage.raw("Attempting reconnect to offline factory '%s'",this));    pendingConnectPromise=factory.getConnectionAsync().thenOnResult(this).thenOnException(this);  }}  }
class C{  public void onLoop(View v){  mLooping=mBtnLoop.toggleState();  mMP4Broadcaster.setLooping(mLooping);  if (mMediaPlayer != null)   mMediaPlayer.setLooping(mLooping);}  }
class C{  public AiffFile(String filename) throws IOException, TagException, ReadOnlyFileException, InvalidAudioFrameException {  this(new File(filename));}  }
class C{  public Phaser(int parties){  this(null,parties);}  }
class C{  protected AbstractSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  public DTMIterator sortNodes(XPathContext xctxt,Vector keys,DTMIterator sourceNodes) throws TransformerException {  NodeSorter sorter=new NodeSorter(xctxt);  sourceNodes.setShouldCacheNodes(true);  sourceNodes.runTo(-1);  xctxt.pushContextNodeList(sourceNodes);  try {    sorter.sort(sourceNodes,keys,xctxt);    sourceNodes.setCurrentPos(0);  }  finally {    xctxt.popContextNodeList();  }  return sourceNodes;}  }
class C{  protected void handleText(char text[]){}  }
class C{  @Override public Foo[] findByField2_PrevAndNext(long fooId,boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByField2_PrevAndNext(session,foo,field2,orderByComparator,true);    array[1]=foo;    array[2]=getByField2_PrevAndNext(session,foo,field2,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public static void startCapture(){  CaptureLog log=null;  if (!reuse.isEmpty()) {    try {      log=reuse.pop();    } catch (    EmptyStackException e) {      log=new CaptureLog();    }  } else {    log=new CaptureLog();  }  Stack<CaptureLog> stack=logs.get();  if (stack == null) {    stack=new Stack<>();    logs.set(stack);  }  stack.push(log);}  }
class C{  public void removeContinuousQueryListener(ContinuousQueryListener listener,TokenFilter filter) throws CoreTokenException {  dispatcher.removeContinuousQueryListener(listener,filter);}  }
class C{  public boolean addStatement(Statement statement){  boolean addedStmt=false;  if (statement != null) {    super.addStatement(statement);    addedStmt=true;  }  return addedStmt;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  m_outputProperties=new OutputProperties();  m_outputProperties.setDOMBackPointer(handler.getOriginatingNode());  m_outputProperties.setLocaterInfo(handler.getLocator());  m_outputProperties.setUid(handler.nextUid());  setPropertiesFromAttributes(handler,rawName,attributes,this);  String entitiesFileName=(String)m_outputProperties.getProperties().get(OutputPropertiesFactory.S_KEY_ENTITIES);  if (null != entitiesFileName) {    try {      String absURL=SystemIDResolver.getAbsoluteURI(entitiesFileName,handler.getBaseIdentifier());      m_outputProperties.getProperties().put(OutputPropertiesFactory.S_KEY_ENTITIES,absURL);    } catch (    TransformerException te) {      handler.error(te.getMessage(),te);    }  }  handler.getStylesheet().setOutput(m_outputProperties);  ElemTemplateElement parent=handler.getElemTemplateElement();  parent.appendChild(m_outputProperties);  m_outputProperties=null;}  }
class C{  public int read(byte[] buf,int off,int len) throws IOException {  ensureOpen();  if (eos) {    return -1;  }  int n=super.read(buf,off,len);  if (n == -1) {    if (readTrailer())     eos=true; else     return this.read(buf,off,len);  } else {    crc.update(buf,off,n);  }  return n;}  }
class C{  public void insert_wchar(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wchar",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_wchar(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  if (log.isDebugEnabled()) {    log.debug("Init");  }  this.subject=subject;  this.callbackHandler=callbackHandler;  this.sharedState=sharedState;  this.options=options;  Object option=options.get("pathname");  if (option instanceof String) {    this.pathname=(String)option;  }  CredentialHandler credentialHandler=null;  option=options.get("credentialHandlerClassName");  if (option instanceof String) {    try {      Class<?> clazz=Class.forName((String)option);      credentialHandler=(CredentialHandler)clazz.newInstance();    } catch (    InstantiationException|IllegalAccessException|ClassNotFoundException e) {      throw new IllegalArgumentException(e);    }  }  if (credentialHandler == null) {    credentialHandler=new MessageDigestCredentialHandler();  }  for (  Entry<String,?> entry : options.entrySet()) {    if ("pathname".equals(entry.getKey())) {      continue;    }    if ("credentialHandlerClassName".equals(entry.getKey())) {      continue;    }    if (entry.getValue() instanceof String) {      IntrospectionUtils.setProperty(credentialHandler,entry.getKey(),(String)entry.getValue());    }  }  setCredentialHandler(credentialHandler);  load();}  }
class C{  public ReplyMessageAttribute(byte[] octets){  super(octets);  msg=new String(octets,2,octets.length - 2,Charset.forName("utf-8"));}  }
class C{  public JRadioButton(String text,boolean selected){  this(text,null,selected);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.THAIBUDDHIST_DATE_TYPE,this);}  }
class C{  public static String before(String self,String pattern){  Matcher matcher=compile(pattern,CASE_INSENSITIVE | UNICODE_CHARACTER_CLASS).matcher(self);  return matcher.find() ? self.substring(0,matcher.start()).trim() : self;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  @ApiOperation(value="update a document",notes="This route should be used to update the details of the document",response=Document.class) @ApiModelRequest(model=Document.class,required=true,modelName="Document") public void update(Request request,Response response){  String database=request.getHeader(Constants.Url.DATABASE,"No database provided");  String table=request.getHeader(Constants.Url.TABLE,"No table provided");  String id=request.getHeader(Constants.Url.DOCUMENT_ID,"No document ID supplied");  String data=request.getBody().toString(ContentType.CHARSET);  if (data == null || data.isEmpty()) {    throw new BadRequestException("No document data provided");  }  Document document=new Document();  document.setUuid(UUID.fromString(id));  document.setTable(database,table);  document.setObjectAsString(data);  documentService.update(document);  response.setResponseNoContent();}  }
class C{  public static NamedCharacterSet[] decodeCharacterSets(SortedSet<String> values) throws ConfigException {  NamedCharacterSet[] sets=new NamedCharacterSet[values.size()];  int i=0;  for (  String value : values) {    int colonPos=value.indexOf(':');    if (colonPos < 0) {      throw new ConfigException(ERR_CHARSET_NO_COLON.get(value));    } else     if (colonPos == 0) {      throw new ConfigException(ERR_CHARSET_NO_NAME.get(value));    } else     if (colonPos == (value.length() - 1)) {      throw new ConfigException(ERR_CHARSET_NO_CHARS.get(value));    } else {      String name=value.substring(0,colonPos);      char[] characters=value.substring(colonPos + 1).toCharArray();      sets[i]=new NamedCharacterSet(name,characters);    }    i++;  }  return sets;}  }
class C{  public void insert_wchar(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wchar",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_wchar(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void insert_longlong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_longlong",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_longlong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private boolean start_ok(PlaPointFloat p_location){  PlaPointInt pick_location=p_location.round();  ItemSelectionChoice[] selectable_choices={ItemSelectionChoice.KEEPOUT,ItemSelectionChoice.VIA_KEEPOUT,ItemSelectionChoice.CONDUCTION};  ItemSelectionFilter selection_filter=new ItemSelectionFilter(selectable_choices);  Collection<BrdItem> found_items=r_brd.pick_items(pick_location,i_brd.itera_settings.layer_no,selection_filter);  if (found_items.size() != 1) {    i_brd.screen_messages.set_status_message(resources.getString("no_item_found_for_adding_hole"));    return false;  }  board.items.BrdItem found_item=found_items.iterator().next();  if (!(found_item instanceof BrdArea)) {    i_brd.screen_messages.set_status_message(resources.getString("no_obstacle_area_found_for_adding_hole"));    return false;  }  item_to_modify=(BrdArea)found_item;  if (item_to_modify.get_area() instanceof ShapeCircle) {    i_brd.screen_messages.set_status_message(resources.getString("adding_hole_to_circle_not_yet_implemented"));    return false;  }  actlog_start_scope(LogfileScope.ADDING_HOLE);  add_corner(p_location);  return true;}  }
class C{  public void validatePrivilege(Privilege privilege) throws EntitlementException {}  }
class C{  private void restoreWidget(BackupProtos.Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking widget " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  BackupProtos.Widget widget=unpackProto(new BackupProtos.Widget(),buffer,dataSize);  if (DEBUG)   Log.d(TAG,"unpacked " + widget.provider);  if (widget.icon.data != null) {    Bitmap icon=BitmapFactory.decodeByteArray(widget.icon.data,0,widget.icon.data.length);    if (icon == null) {      Log.w(TAG,"failed to unpack widget icon for " + key.name);    } else {      mIconCache.preloadIcon(ComponentName.unflattenFromString(widget.provider),icon,widget.icon.dpi,widget.label,mUserSerial,mIdp);    }  }  widgetSizes.add(widget.provider + "#" + widget.minSpanX+ ","+ widget.minSpanY);}  }
class C{  protected void customExceptionHandling(Throwable ex,R requestContext,IRoutingResult<R> originalRoutingResult) throws Throwable {  try {    IRoutingResult<R> exceptionRoutingResult=getRouter().route(requestContext,RoutingType.EXCEPTION);    if (exceptionRoutingResult != null) {      requestContext.variables().add(SpincastConstants.RequestScopedVariables.ROUTING_RESULT,exceptionRoutingResult);      requestContext.variables().add(SpincastConstants.RequestScopedVariables.ORIGINAL_ROUTING_RESULT,originalRoutingResult);      callRouteHandlers(requestContext,exceptionRoutingResult);      return;    }  } catch (  Throwable ex2) {    try {      this.logger.error("An exception occured while using the custom exception handler. The original " + "exception will be thrown again so it can be managed by the default exception " + "handler. The exception which occured is : "+ SpincastStatics.getStackTrace(ex2));    } catch (    Throwable ex3) {    }  }  throw ex;}  }
class C{  public SQLTimeoutException(Throwable cause){  super(cause);}  }
class C{  public Response createResponse(String responseString) throws java.text.ParseException {  if (responseString == null)   return new SIPResponse();  StringMsgParser smp=new StringMsgParser();  SIPMessage sipMessage=smp.parseSIPMessage(responseString.getBytes(),true,false,null);  if (!(sipMessage instanceof SIPResponse))   throw new ParseException(responseString,0);  return (SIPResponse)sipMessage;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof Destination);}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  return src.createCompatibleWritableRaster();}  }
class C{  public void deleteDynamicGroups(Set groupDNs) throws AMException, SSOException {  Iterator iter=groupDNs.iterator();  while (iter.hasNext()) {    String groupDN=(String)iter.next();    AMDynamicGroup group=new AMDynamicGroupImpl(token,groupDN);    group.delete();  }}  }
class C{  @Override public void noAntennaContinue(){  Log.d(TAG," noAntennaContinue.onClick ok to continue");  if (isAntennaAvailable()) {    powerUpFm();  } else {    Log.d(TAG,"noAntennaContinue.earphone is not ready");    mService.switchAntennaAsync(1);  }}  }
class C{  private static boolean findActivity(List<LauncherActivityInfoCompat> apps,ComponentName component){  for (  LauncherActivityInfoCompat info : apps) {    if (info.getComponentName().equals(component)) {      return true;    }  }  return false;}  }
class C{  public boolean isAckSeen(){  if (lastAckReceivedCSeqNumber == null && lastResponseStatusCode == Response.OK) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SIPDialog::isAckSeen:" + this + "lastAckReceived is null -- returning false");    }    return false;  } else   if (lastResponseMethod == null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SIPDialog::isAckSeen:" + this + "lastResponse is null -- returning false");    }    return false;  } else   if (lastAckReceivedCSeqNumber == null && lastResponseStatusCode / 100 > 2) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SIPDialog::isAckSeen:" + this + "lastResponse statusCode "+ lastResponseStatusCode);    }    return true;  } else {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SIPDialog::isAckSeen:lastAckReceivedCSeqNumber = " + lastAckReceivedCSeqNumber + " remoteCSeqNumber = "+ this.getRemoteSeqNumber());    }    return this.lastAckReceivedCSeqNumber != null && this.lastAckReceivedCSeqNumber >= this.getRemoteSeqNumber();  }}  }
class C{  @Inject public SessionMaxStats(SessionAccessManager sessionAccessManager,MonitoringOperations monitoringOperations,SessionNotificationSender sessionNotificationSender,Stats stats){  this.sessionAccessManager=sessionAccessManager;  this.monitoringOperations=monitoringOperations;  this.sessionNotificationSender=sessionNotificationSender;  this.stats=stats;}  }
class C{  public void updateUI(){  setUI((TableHeaderUI)UIManager.getUI(this));  TableCellRenderer renderer=getDefaultRenderer();  if (renderer instanceof Component) {    SwingUtilities.updateComponentTreeUI((Component)renderer);  }}  }
class C{  private GetConnectionIDExtendedRequest(){}  }
class C{  @SuppressWarnings("unused") public static PointF toPoint(float[] point){  if (point == null)   return null;  if (point.length < 2)   throw new IndexOutOfBoundsException();  return new PointF(point[0],point[1]);}  }
class C{  public static boolean verifyQueryString(String queryString,String realm,String hostEntityRole,String remoteEntity) throws SAML2Exception {  String method="verifyQueryString : ";  if (debug.messageEnabled()) {    debug.message(method + "queryString :" + queryString);  }  Set<X509Certificate> signingCerts;  if (hostEntityRole.equalsIgnoreCase(SAML2Constants.IDP_ROLE)) {    SPSSODescriptorElement spSSODesc=saml2MetaManager.getSPSSODescriptor(realm,remoteEntity);    signingCerts=KeyUtil.getVerificationCerts(spSSODesc,remoteEntity,SAML2Constants.SP_ROLE);  } else {    IDPSSODescriptorElement idpSSODesc=saml2MetaManager.getIDPSSODescriptor(realm,remoteEntity);    signingCerts=KeyUtil.getVerificationCerts(idpSSODesc,remoteEntity,SAML2Constants.IDP_ROLE);  }  if (debug.messageEnabled()) {    debug.message(method + "realm is : " + realm);    debug.message(method + "Host Entity role is : " + hostEntityRole);    debug.message(method + "remoteEntity is : " + remoteEntity);  }  if (signingCerts.isEmpty()) {    debug.error("Incorrect configuration for Signing Certificate.");    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  return QuerySignatureUtil.verify(queryString,signingCerts);}  }
class C{  public void resetAura(){  sMario.getRoot().getChildren().remove(aura.getSpriteFrame());  enableAura=false;  aura.enableSuperAura();  removeStates(6);  godMode=true;}  }
class C{  public static String generateMessageHandle(){  if (random == null) {    return null;  }  byte bytes[]=new byte[SAML2Constants.ID_LENGTH];  random.nextBytes(bytes);  return byteArrayToString(bytes);}  }
class C{  private boolean isValidCORSRequest(final HttpServletRequest req){  final String hostHeader=req.getHeader(CORSConstants.HOST);  final String originHeader=req.getHeader(CORSConstants.ORIGIN);  if (originHeader == null || originHeader.isEmpty()) {    DEBUG.warning("CORS Fail - Request did not contain an origin header.");    return false;  }  if (!acceptedOrigins.contains(CORSConstants.ALL)) {    if (!acceptedOrigins.contains(originHeader)) {      DEBUG.warning("CORS Fail - Requested origin comes from a location not whitelisted.");      return false;    }  }  if (expectedHostname != null && !expectedHostname.isEmpty() && !expectedHostname.equals(hostHeader)) {    DEBUG.warning("CORS Fail - Expected hostname does not equal actual hostname.");    return false;  }  if (!acceptedMethods.contains(req.getMethod())) {    DEBUG.warning("CORS Fail - Requested HTTP method has not been whitelisted.");    return false;  }  return true;}  }
class C{  public void deregisterChangeListener(ConfigurationChangeListener<? super S> listener){  for (  ConfigChangeListener l : configRepository.getChangeListeners(configDN)) {    if (l instanceof ConfigChangeListenerAdaptor) {      ConfigChangeListenerAdaptor<?> adaptor=(ConfigChangeListenerAdaptor<?>)l;      ServerManagedObjectChangeListener<?> l2=adaptor.getServerManagedObjectChangeListener();      if (l2 instanceof ServerManagedObjectChangeListenerAdaptor<?>) {        ServerManagedObjectChangeListenerAdaptor<?> adaptor2=(ServerManagedObjectChangeListenerAdaptor<?>)l2;        if (adaptor2.getConfigurationChangeListener() == listener) {          adaptor.finalizeChangeListener();          configRepository.deregisterChangeListener(configDN,adaptor);        }      }    }  }}  }
class C{  public Set createPeopleContainers(Set peopleContainerNames) throws AMException, SSOException {  Iterator iter=peopleContainerNames.iterator();  Set peopleContainers=new HashSet();  while (iter.hasNext()) {    String peopleContainerDN=AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMPeopleContainerImpl peopleContainerImpl=new AMPeopleContainerImpl(super.token,peopleContainerDN);    peopleContainerImpl.create();    peopleContainers.add(peopleContainerImpl);  }  return peopleContainers;}  }
class C{  public SAXException createSAXException(String message){  return createSAXException(message,null);}  }
class C{  protected void paintHorizontalPartOfLeg(Graphics g,Rectangle clipBounds,Insets insets,Rectangle bounds,TreePath path,int row,boolean isExpanded,boolean hasBeenExpanded,boolean isLeaf){  if (!paintLines) {    return;  }  int depth=path.getPathCount() - 1;  if ((depth == 0 || (depth == 1 && !isRootVisible())) && !getShowsRootHandles()) {    return;  }  int clipLeft=clipBounds.x;  int clipRight=clipBounds.x + clipBounds.width;  int clipTop=clipBounds.y;  int clipBottom=clipBounds.y + clipBounds.height;  int lineY=bounds.y + bounds.height / 2;  if (leftToRight) {    int leftX=bounds.x - getRightChildIndent();    int nodeX=bounds.x - getHorizontalLegBuffer();    if (lineY >= clipTop && lineY < clipBottom && nodeX >= clipLeft && leftX < clipRight && leftX < nodeX) {      g.setColor(getHashColor());      paintHorizontalLine(g,tree,lineY,leftX,nodeX - 1);    }  } else {    int nodeX=bounds.x + bounds.width + getHorizontalLegBuffer();    int rightX=bounds.x + bounds.width + getRightChildIndent();    if (lineY >= clipTop && lineY < clipBottom && rightX >= clipLeft && nodeX < clipRight && nodeX < rightX) {      g.setColor(getHashColor());      paintHorizontalLine(g,tree,lineY,nodeX,rightX - 1);    }  }}  }
class C{  public void notationDecl(StylesheetHandler handler,String name,String publicId,String systemId){}  }
class C{  public void insert_dyn_any(org.omg.DynamicAny.DynAny value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_dyn_any",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_dyn_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private static void disableConsoleLogging(final Logger logger){  if (!"true".equalsIgnoreCase(System.getenv("OPENDJ_LOG_TO_STDOUT"))) {    logger.setUseParentHandlers(false);  }}  }
class C{  @Override public String toString(){  final StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public AllPermission(){  super("<all permissions>");}  }
class C{  public HierarchyEvent(Component source,int id,Component changed,Container changedParent,long changeFlags){  super(source,id);  this.changed=changed;  this.changedParent=changedParent;  this.changeFlags=changeFlags;}  }
class C{  public final void testGetSeed03(){  ECFieldFp f=new ECFieldFp(BigInteger.valueOf(23L));  BigInteger a=BigInteger.ONE;  BigInteger b=BigInteger.valueOf(19L);  byte[] seed=new byte[24];  EllipticCurve c=new EllipticCurve(f,a,b,seed);  c.getSeed();  assertNotSame(c.getSeed(),c.getSeed());}  }
class C{  private void removeAttributes(AttributeType attrType){  getUserOrOperationalAttributes(attrType).remove(attrType);}  }
class C{  public void addGlobalArgument(Argument argument) throws ArgumentException {  addGlobalArgument(argument,null);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.KerberosTokenElement createKerberosTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.KerberosTokenElementImpl();}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] copyOf(T[] original,int newLength){  return (T[])copyOf(original,newLength,original.getClass());}  }
class C{  public void insert(BrdItem p_item){  for (  AwtreeShapeSearch curr_tree : search_trees)   curr_tree.insert(p_item);  p_item.set_on_the_board(true);}  }
class C{  public static boolean isExpired(){  return getInstance().expired;}  }
class C{  public PersistentCookieAuthModule(){  this(new CoreWrapper(),new PersistentCookieModuleWrapper());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittextnomodificationallowederrEE.class,args);}  }
class C{  public Date(){  this(System.currentTimeMillis());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node commentNode;  int nodeType;  String commentNodeName;  doc=(Document)load("staff",false);  elementList=doc.getChildNodes();  for (int indexN10040=0; indexN10040 < elementList.getLength(); indexN10040++) {    commentNode=(Node)elementList.item(indexN10040);    nodeType=(int)commentNode.getNodeType();    if (equals(8,nodeType)) {      commentNodeName=commentNode.getNodeName();      assertEquals("commentNodeName","#comment",commentNodeName);    }  }}  }
class C{  public void testSimpleLiterals() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  JsonGenerator gen=cborGenerator(out);  gen.writeBoolean(true);  assertEquals("/",gen.getOutputContext().toString());  gen.close();  JsonParser p=cborParser(out);  assertEquals(JsonToken.VALUE_TRUE,p.nextToken());  assertNull(p.nextToken());  p.close();  out=new ByteArrayOutputStream();  gen=cborGenerator(out);  gen.writeBoolean(false);  gen.close();  p=cborParser(out);  assertEquals(JsonToken.VALUE_FALSE,p.nextToken());  assertEquals("/",p.getParsingContext().toString());  assertNull(p.nextToken());  p.close();  out=new ByteArrayOutputStream();  gen=cborGenerator(out);  gen.writeNull();  gen.close();  p=cborParser(out);  assertEquals(JsonToken.VALUE_NULL,p.nextToken());  assertNull(p.nextToken());  p.close();}  }
class C{  public void testPlusPositive(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String c="92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.plus());}  }
class C{  private static DexClassLoader createInstance(Configuration config){  File file1;  File file2;switch (config) {case ONE_DEX:    file1=DEX_FILE;  file2=null;break;case ONE_JAR:file1=JAR_FILE;file2=null;break;case TWO_DEX:file1=DEX_FILE;file2=DEX2_FILE;break;case TWO_JAR:file1=JAR_FILE;file2=JAR2_FILE;break;default :throw new AssertionError("shouldn't happen");}String path=file1.getAbsolutePath();if (file2 != null) {path+=File.pathSeparator + file2.getAbsolutePath();}return new DexClassLoader(path,OPTIMIZED_DIR.getAbsolutePath(),null,ClassLoader.getSystemClassLoader());}  }
class C{  public void replaceAttributeValue(String attrName,String oldValue,String newValue) throws SMSException, SSOException {  validatePluginConfig();  Map attributes=getAttributes();  Set newVals=new HashSet();  Set oldVals=(Set)attributes.get(attrName);  if (oldVals != null) {    newVals.addAll(oldVals);    newVals.remove(oldValue);  }  newVals.add(newValue);  ps.validateAttrValues(token,attrName,newVals,true,pc.getOrganizationName());  SMSEntry e=pc.getSMSEntry();  SMSUtils.replaceAttributeValue(e,attrName,oldValue,newValue,ps.getSearchableAttributeNames());  saveSMSEntry(e);}  }
class C{  public AndCondition(){  super();}  }
class C{  public void put(int index,char val){  array[index]=val;}  }
class C{  public void cache(String key,HyphenationTree hTree){  hyphenTrees.put(key,hTree);}  }
class C{  private void buildDefaultValues(StringBuilder sb,List<VariableDef> params,int indentation) throws SyntaxException {  for (  VariableDef v : params) {    if (v.getInit() != null) {      buildIndentation(sb,indentation);      sb.append(v.getName()).append(" = ").append(v.getName()).append(" ? ").append(v.getName()).append(" : ");      buildExpression(sb,v.getInit(),indentation);      sb.append(";\n");    }  }}  }
class C{  private void initialize() throws ChangelogException {  final ReplicationDomainDB domainDB=changelogDB.getReplicationDomainDB();  initializeLastAliveCSNs(domainDB);  initializeNextChangeCursor(domainDB);  initializeOfflineReplicas();}  }
class C{  Entry(int key,int value,Entry next){  this.key=key;  this.value=value;  this.next=next;}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  protected static void addResource(Context context,Resource annotation){  addResource(context,annotation,null,null);}  }
class C{  private void writeDataToFile(File file) throws FileNotFoundException, IOException {  FileOutputStream fos=new FileOutputStream(file);  try {    fos.write(CONTENT_AS_BYTES);  }  finally {    fos.close();  }}  }
class C{  public PdfDictionary clone(List<PdfName> excludeKeys){  Map<PdfName,PdfObject> excluded=new TreeMap<>();  for (  PdfName key : excludeKeys) {    PdfObject obj=map.get(key);    if (obj != null)     excluded.put(key,map.remove(key));  }  PdfDictionary dictionary=(PdfDictionary)clone();  map.putAll(excluded);  return dictionary;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzFinalHighSurrogate=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  void linkLast(E e){  final Node<E> l=last;  final Node<E> newNode=new Node<>(l,e,null);  last=newNode;  if (l == null)   first=newNode; else   l.next=newNode;  size++;  modCount++;}  }
class C{  public BrdArea(PlaArea p_area,int p_layer_no,PlaVectorInt p_translation,int p_rotation_in_degree,boolean p_side_changed,NetNosList p_net_no_arr,int p_clearance_type,int p_id_no,int p_cmp_no,String p_name,ItemFixState p_fixed_state,RoutingBoard p_board){  super(p_net_no_arr,p_clearance_type,p_id_no,p_cmp_no,p_fixed_state,p_board);  relative_area=p_area;  layer_no=p_layer_no;  translation=p_translation;  rotation_in_degree=p_rotation_in_degree;  side_changed=p_side_changed;  area_name=p_name;}  }
class C{  protected void paint(SynthContext context,Graphics g){  Border vpBorder=scrollpane.getViewportBorder();  if (vpBorder != null) {    Rectangle r=scrollpane.getViewportBorderBounds();    vpBorder.paintBorder(scrollpane,g,r.x,r.y,r.width,r.height);  }}  }
class C{  protected boolean matchNameAttribute(AttributeSet attr,HTML.Tag tag){  Object o=attr.getAttribute(StyleConstants.NameAttribute);  if (o instanceof HTML.Tag) {    HTML.Tag name=(HTML.Tag)o;    if (name == tag) {      return true;    }  }  return false;}  }
class C{  public static Boolean valueOf(String string){  return parseBoolean(string) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  protected void tearDown(){}  }
class C{  public static void sort(byte[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public R visitDuration(DurationPropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  @JavascriptInterface public final void onTransact(String transactInfoMarshalling,String paramMarshalling){  if (JsBridge.DEBUG) {    Log.d("ServerProxy#onTransact",transactInfoMarshalling + "/" + paramMarshalling);  }  TransactInfo transactInfo=TransactInfo.parse(transactInfoMarshalling);  if (transactInfo.isCallback()) {    dispatchCallbackInvoke(transactInfo,paramMarshalling);  } else {    dispatchDirectInvoke(transactInfo,paramMarshalling);  }}  }
class C{  @DataProvider public Object[][] authzID(){  return new Object[][]{{"uid=test.user,o=test"},{"dn:uid=test.user,o=test"},{"u:test.user"}};}  }
class C{  public void close() throws IOException {  super.close();  disposerRecord.dispose();  stream=null;  cache=null;  cacheFile=null;  StreamCloser.removeFromQueue(closeAction);}  }
class C{  StatusFlags(){  super();}  }
class C{  private void handleRemoveException(Subject subject,String realm,String uuid,Exception e) throws EntitlementException {  OpenSSOLogger.log(ERROR,Level.INFO,FAILED_REMOVE_RESOURCE_TYPE,new String[]{realm,uuid,e.getMessage()},subject);  throw new EntitlementException(REMOVE_RESOURCE_TYPE_FAIL,e,uuid);}  }
class C{  public boolean isExpanded(TreePath path){  if (path != null) {    FHTreeStateNode lastNode=getNodeForPath(path,true,false);    return (lastNode != null && lastNode.isExpanded());  }  return false;}  }
class C{  public void test_readFully$B_writeBytesLjava_lang_String() throws IOException {  byte[] buf=new byte[testLength];  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeBytes(testString);  raf.seek(0);  try {    raf.readFully(null);    fail("Test 1: NullPointerException expected.");  } catch (  NullPointerException e) {  }  raf.readFully(buf);  assertEquals("Test 2: Incorrect bytes written or read;",testString,new String(buf));  try {    raf.readFully(buf);    fail("Test 3: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeBytes("Already closed.");    fail("Test 4: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readFully(buf);    fail("Test 5: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  protected void processComponentKeyEvent(KeyEvent e){}  }
class C{  SamlFederationHandler(Map<String,String> attributeMapping,String subjectMapping,String authnContextDelimiter,String authnContext,String sessionIndexMapping,String redirectURI,String logoutURI,String assertionConsumerEndpoint,String sPinitiatedSSOEndpoint,String singleLogoutEndpoint,String singleLogoutEndpointSoap,String sPinitiatedSLOEndpoint){  this.attributeMapping=Collections.unmodifiableMap(attributeMapping);  this.subjectMapping=subjectMapping;  this.authnContextDelimiter=authnContextDelimiter;  this.authnContext=authnContext;  this.sessionIndexMapping=sessionIndexMapping;  this.redirectURI=redirectURI;  this.logoutURI=logoutURI;  this.assertionConsumerEndpoint=assertionConsumerEndpoint;  this.sPinitiatedSSOEndpoint=sPinitiatedSSOEndpoint;  this.singleLogoutEndpoint=singleLogoutEndpoint;  this.singleLogoutEndpointSoap=singleLogoutEndpointSoap;  this.sPinitiatedSLOEndpoint=sPinitiatedSLOEndpoint;}  }
class C{  static DnTemplate compileRelative(String template){  return compile(template,true);}  }
class C{  public static PasswordPolicyRequestControl newControl(final boolean isCritical){  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;}  }
class C{  public void writeRaw(byte b) throws IOException {  _writeByte(b);}  }
class C{  public boolean hitEnd(){  return hitEnd;}  }
class C{  public XfaForm(InputStream inputStream){  try {    initXfaForm(inputStream);  } catch (  Exception e) {    throw new PdfException(e);  }}  }
class C{  public JInternalFrame(String title,boolean resizable,boolean closable,boolean maximizable){  this(title,resizable,closable,maximizable,false);}  }
class C{  public void startNonEscaping() throws org.xml.sax.SAXException {  m_disableOutputEscapingStates.push(true);}  }
class C{  public StreamSource(Reader reader,String systemId){  setReader(reader);  setSystemId(systemId);}  }
class C{  public boolean add(Object o){  if (nodes.contains(o)) {    return false;  }  DigraphNode node=new DigraphNode(o);  poNodes.put(o,node);  return true;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.ConditionElement createConditionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionElementImpl();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.EncryptedNameIdentifierElement createEncryptedNameIdentifierElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.EncryptedNameIdentifierElementImpl();}  }
class C{  public LongIteratorSpliterator(PrimitiveIterator.OfLong iterator,int characteristics){  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  boolean isSecureReplicationEnabled(){  return secureReplicationEnabled;}  }
class C{  private void disconnectDServer(){  if (ld != null) {    ld.close();    ld=null;    dsConfigInstance=null;  }}  }
class C{  public SQLTransientConnectionException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public int filterRGB(int x,int y,int rgb){  int gray=(int)((0.30 * ((rgb >> 16) & 0xff) + 0.59 * ((rgb >> 8) & 0xff) + 0.11 * (rgb & 0xff)) / 3);  if (brighter) {    gray=(255 - ((255 - gray) * (100 - percent) / 100));  } else {    gray=(gray * (100 - percent) / 100);  }  if (gray < 0)   gray=0;  if (gray > 255)   gray=255;  return (rgb & 0xff000000) | (gray << 16) | (gray << 8)| (gray << 0);}  }
class C{  public static boolean isHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDBFF);}  }
class C{  public SQLDataException(){}  }
class C{  public void testConstructorSignBytesNegative5(){  byte aBytes[]={-127,56,100,-2};  int aSign=-1;  byte rBytes[]={-1,126,-57,-101,2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public static byte[] decode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  private IP(List<PatternIP> patternIPList,EnumBindRuleType type){  this.patternIPList=patternIPList;  this.type=type;}  }
class C{  public void test_ConstructorLjava_io_FileZ(){  try {    JarFile jarFile=new JarFile(new File("Wrong.file"),true);    fail("Should throw IOException");  } catch (  IOException e) {  }  try {    Support_Resources.copyFile(resources,null,jarName);    JarFile jarFile=new JarFile(new File(resources,jarName),false);  } catch (  IOException e) {    fail("Should not throw IOException");  }}  }
class C{  public static boolean match(String name,int majorVersion,int minorVersion){  return osName.equalsIgnoreCase(name) && (osMajorVersion == majorVersion) && (osMinorVersion == minorVersion);}  }
class C{  public FastStringBuffer fsb(){  return ((FastStringBuffer)m_obj);}  }
class C{  public void printStackTrace(java.io.PrintStream s){  printStackTrace(new java.io.PrintWriter(s));}  }
class C{  void addNonExpiringSession(InternalSession session){  if (session.willExpire()) {    throw new IllegalStateException("Tried to add session which would expire to NonExpiringSessionManager");  }  session.setMaxSessionTime(NON_EXPIRING_SESSION_LENGTH_MINUTES);  session.setMaxIdleTime(refreshPeriodInMinutes * 2);  updateSession(session);  nonExpiringSessions.add(session.getID());}  }
class C{  @RequestMapping({"/dir.do","/file.do"}) public String dirAndFile(Integer projectId,Integer fileId,ModelMap model,HttpServletRequest request) throws Exception {  Assert.notNull(projectId,"Wrong!! projectId must not be null!");  Assert.notNull(fileId,"Wrong!! fileId must not be null!");  DefFileSys defFileSys=defFileSysService.getById(fileId);  Assert.notNull(defFileSys,"Wrong!! fileId[Id=" + fileId + "]'s file must not be null!");  Assert.isTrue(projectId.intValue() == defFileSys.getProjectId(),"Wrong!! fileId[Id=" + fileId + "]'s projectId[Id="+ projectId+ "] must not be the same to the input projectId from url!");  Assert.notNull(projectId,"Wrong!! projectId must not be null!");  model.put("projectId",projectId);  model.put("fileId",fileId);  model.put("defFileSys",defFileSys);  model.put("idType","defFileSys");  model.put("idValue",fileId);  String projectDirFileType=defFileSys.getIsDir() == 1 ? "dir" : "file";  model.put("projectDirFileType",projectDirFileType);  return "pages/home/schedule/" + projectDirFileType;}  }
class C{  public int compare(Object o1,Object o2){  AttributeSchema attr1=(AttributeSchema)o1;  AttributeSchema attr2=(AttributeSchema)o2;  return (collator != null) ? collator.compare(attr1.getI18NKey(),attr2.getI18NKey()) : attr1.getI18NKey().compareTo(attr2.getI18NKey());}  }
class C{  public LDIFChangeRecordReader(final List<String> ldifLines){  super(ldifLines);}  }
class C{  public FileWriterWithEncoding(String filename,CharsetEncoder encoding) throws IOException {  this(new File(filename),encoding,false);}  }
class C{  public GenericSignatureParser(String signature){  int s=signature.indexOf('(');  String sig=signature;  if (s > 0)   sig=sig.substring(s); else   if (s < 0 || sig.indexOf(':') >= 0 || sig.startsWith("(V)"))   throw new IllegalArgumentException("Bad method signature: " + signature);  this.signature=sig;}  }
class C{  private void handlePossibleCancellationInterrupt(int s){  if (s == INTERRUPTING)   while (state == INTERRUPTING)   Thread.yield();}  }
class C{  static public void assertEquals(boolean expected,boolean actual){  assertEquals(null,expected,actual);}  }
class C{  @Override public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){}  }
class C{  public void updateTrigger(Trigger trigger) throws JobPersistenceException {  serialized=RepoJobStoreUtils.serialize(trigger);}  }
class C{  protected boolean accept(Component aComponent){  if (!(aComponent.isVisible() && aComponent.isDisplayable() && aComponent.isEnabled())) {    return false;  }  if (!(aComponent instanceof Window)) {    for (Container enableTest=aComponent.getParent(); enableTest != null; enableTest=enableTest.getParent()) {      if (!(enableTest.isEnabled() || enableTest.isLightweight())) {        return false;      }      if (enableTest instanceof Window) {        break;      }    }  }  boolean focusable=aComponent.isFocusable();  if (aComponent.isFocusTraversableOverridden()) {    return focusable;  }  ComponentPeer peer=aComponent.getPeer();  return (peer != null && peer.isFocusable());}  }
class C{  protected void endFontTag() throws IOException {  write(NEWLINE);  writeEndTag("</font>");  fontAttributes=null;}  }
class C{  protected boolean isAttributesModified(){  if (attributes != null) {    return (attributes.isEmpty()) ? false : true;  }  return false;}  }
class C{  public boolean verify(String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  return verify(this.getPublicKey(provider),provider);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {  returnToHomePage();}  }
class C{  private static int lookupFieldSelector(XMPNode arrayNode,String fieldName,String fieldValue) throws XMPException {  int result=-1;  for (int index=1; index <= arrayNode.getChildrenLength() && result < 0; index++) {    XMPNode currItem=arrayNode.getChild(index);    if (!currItem.getOptions().isStruct()) {      throw new XMPException("Field selector must be used on array of struct",XMPError.BADXPATH);    }    for (int f=1; f <= currItem.getChildrenLength(); f++) {      XMPNode currField=currItem.getChild(f);      if (!fieldName.equals(currField.getName())) {        continue;      }      if (fieldValue.equals(currField.getValue())) {        result=index;        break;      }    }  }  return result;}  }
class C{  public void loadImage(String url,String lowUrl,int placeHolder,int errorResId,ScalingUtils.ScaleType scaleType,int width,int height,final BaseControllerListener<ImageInfo> l){  ImageRequest request=ImageRequestBuilder.newBuilderWithSource(Uri.parse(url)).setResizeOptions(new ResizeOptions(width,height)).build();  getHierarchy().setActualImageScaleType(scaleType);  if (placeHolder != 0) {    getHierarchy().setPlaceholderImage(getResources().getDrawable(placeHolder),scaleType);  }  if (errorResId != 0) {    getHierarchy().setFailureImage(getResources().getDrawable(errorResId),scaleType);  }  PipelineDraweeControllerBuilder controller=Fresco.newDraweeControllerBuilder().setControllerListener(l).setImageRequest(request).setOldController(getController());  if (lowUrl != null) {    Uri lowUri=lowUrl.startsWith("http") ? Uri.parse(lowUrl) : Uri.fromFile(new File(lowUrl));    controller.setLowResImageRequest(ImageRequestBuilder.newBuilderWithSource(lowUri).setResizeOptions(new ResizeOptions(width,height)).build());  }  setController(controller.build());}  }
class C{  protected boolean flipEastAndWestAtEnds(int position,Position.Bias bias){  Document doc=getDocument();  position=getStartOffset();  return !AbstractDocument.isLeftToRight(doc,position,position + 1);}  }
class C{  protected void firePseudoAttributes(){  if (m_tracer != null) {    try {      m_writer.flush();      StringBuffer sb=new StringBuffer();      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        java.io.Writer writer=new ToStream.WritertoStringBuffer(sb);        processAttributes(writer,nAttrs);      }      sb.append('>');      char ch[]=sb.toString().toCharArray();      m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS,ch,0,ch.length);    } catch (    IOException ioe) {    }catch (    SAXException se) {    }  }}  }
