class C{  public static Collection<Map.Entry<URI,Object>> filterSort(URI child,Map<URI,Object> uris){  boolean childPathIsOpaque=child.isOpaque();  boolean childPathIsRelative=!child.isAbsolute();  String[] childPathElements=parsePathElements(child);  TreeMap<Integer,Map.Entry<URI,Object>> result=new TreeMap<Integer,Map.Entry<URI,Object>>();  for (  Map.Entry<URI,Object> entry : uris.entrySet()) {    URI facoryUri=entry.getKey();    if (childPathIsOpaque || childPathIsRelative || !facoryUri.isAbsolute()|| facoryUri.isOpaque()) {      if (facoryUri.equals(child)) {        result.put(Integer.MIN_VALUE,entry);      }      continue;    }    if (((child.getScheme() != null) && (facoryUri.getScheme() == null)) || ((child.getScheme() == null) && (facoryUri.getScheme() != null))) {      continue;    }    if ((child.getScheme() != null) && (!child.getScheme().equals(facoryUri.getScheme()))) {      continue;    }    if (((child.getAuthority() != null) && (facoryUri.getAuthority() == null)) || ((child.getAuthority() == null) && (facoryUri.getAuthority() != null))) {      continue;    }    if ((child.getAuthority() != null) && (!child.getAuthority().equals(facoryUri.getAuthority()))) {      continue;    }    String[] factoryPathElements=parsePathElements(facoryUri);    int score=computeScore(childPathElements,factoryPathElements);    if (score > 0) {      result.put(score,entry);    }  }  return result.values();}  }
class C{  protected void assertContains(InputStream theInput,String theExpectedString) throws Exception {  try {    BufferedReader inReader=new BufferedReader(new InputStreamReader(theInput));    BufferedReader stringReader=new BufferedReader(new StringReader(theExpectedString));    String line;    while ((line=inReader.readLine()) != null) {      assertEquals(stringReader.readLine(),line);    }  }  finally {    if (theInput != null) {      theInput.close();    }  }}  }
class C{  public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public void appendData(ParsableByteArray buffer,int length){  while (length > 0) {    int thisAppendLength=prepareForAppend(length);    buffer.readBytes(lastAllocation.data,lastAllocation.translateOffset(lastAllocationOffset),thisAppendLength);    lastAllocationOffset+=thisAppendLength;    totalBytesWritten+=thisAppendLength;    length-=thisAppendLength;  }}  }
class C{  public ImplMessageHistory(ImplDiscordAPI api,String channelId,int limit) throws Exception {  this(api,channelId,null,false,limit);}  }
class C{  public SolrQuery clearSorts(){  sortClauses=null;  serializeSorts();  return this;}  }
class C{  @Step("Asserting element {1} is not visible after {2} seconds") public static void assertElementIsNotVisibleAfter(AugmentedFunctions driver,By by,int timeoutInSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(by);  try {    driver.findElementsVisibleAfter(by,timeoutInSeconds);    org.junit.Assert.fail(String.format("Element %s is visible",by));  } catch (  TimeoutException e) {  }}  }
class C{  public Loop merge(Loop other,PlanNode before){  loaders.putAll(other.loaders);  if (indexColumns == null)   indexColumns=other.indexColumns; else   if (other.indexColumns != null)   indexColumns.putAll(other.indexColumns);  if (flattens == null)   flattens=other.flattens; else   if (other.flattens != null) {    int i=-1;    if (before != null)     i=flattens.indexOf(before);    if (i < 0)     i=flattens.size();    for (    PlanNode flatten : other.flattens) {      if (flatten == before)       break;      flattens.add(i++,flatten);    }  }  if (flattened == null)   flattened=other.flattened; else   if (other.flattened != null) {    for (    Map.Entry<PlanNode,Set<TableSource>> entry : other.flattened.entrySet()) {      Set<TableSource> existing=flattened.get(entry.getKey());      if (existing != null)       existing.addAll(entry.getValue()); else       flattened.put(entry.getKey(),entry.getValue());    }  }  return this;}  }
class C{  static double log10(double v){  if (v > 0.0) {    return Math.log10(v);  } else   if (v < 0.0) {    return -1.0 * Math.log10(-1.0 * v);  } else {    return 0.0;  }}  }
class C{  public static NeuronPropertiesPanel createNeuronPropertiesPanel(final List<Neuron> neuronList,final Window parent,final boolean displayUpdateRuleProperties){  NeuronPropertiesPanel cnip=new NeuronPropertiesPanel(neuronList,parent,displayUpdateRuleProperties);  cnip.initializeLayout();  return cnip;}  }
class C{  @Override public String toString(){  return "CUdeviceptr[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + ","+ "byteOffset="+ getByteOffset()+ "]";}  }
class C{  public boolean makeBackupFile(String directory,File file){  if (file == null) {    log.info("No file to backup");  } else   if (file.canWrite()) {    String backupFullName=directory + File.separator + createFileNameWithDate(file.getName());    if (log.isDebugEnabled()) {      log.debug("new backup file: " + backupFullName);    }    File backupFile=findFile(backupFullName);    if (backupFile != null) {      if (backupFile.delete()) {        if (log.isDebugEnabled()) {          log.debug("deleted backup file " + backupFullName);        }      }    } else {      backupFile=new File(backupFullName);    }    File parentDir=backupFile.getParentFile();    if (!parentDir.exists()) {      if (log.isDebugEnabled()) {        log.debug("creating backup directory: " + parentDir.getName());      }      if (!parentDir.mkdirs()) {        log.error("backup directory not created");        return false;      }    }    if (file.renameTo(new File(backupFullName))) {      if (log.isDebugEnabled()) {        log.debug("created new backup file " + backupFullName);      }    } else {      if (log.isDebugEnabled()) {        log.debug("could not create backup file " + backupFullName);      }      return false;    }  }  return true;}  }
class C{  public static <U extends Key<?>>AndMatcher<U> and(Matcher<U> leftOperand,Matcher<U> rightOperand){  return new AndMatcher<U>(leftOperand,rightOperand);}  }
class C{  public static void writeElement(final XMLStreamWriter writer,final String elementName,final long value) throws XMLStreamException {  writer.writeStartElement(elementName);  writer.writeCharacters(XMLConvert.toString(value));  writer.writeEndElement();}  }
class C{  public static boolean isRunning(final Protos.TaskState state){  return Protos.TaskState.TASK_RUNNING.equals(state);}  }
class C{  public SubscriptionMigrationException(String message,SubscriptionMigrationExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  void markBit(boolean input,int sensorNum){  if (log.isDebugEnabled()) {    log.debug("Mark bit " + sensorNum + " "+ input+ " in node "+ getNodeAddress());  }  if (sensorArray[sensorNum] == null) {    log.debug("Try to create sensor " + sensorNum + " on node "+ getNodeAddress()+ ", since sensor doesn't exist");    jmri.InstanceManager.sensorManagerInstance().provideSensor("GS" + (getNodeAddress() * 1000 + sensorNum));    if (sensorArray[sensorNum] == null) {      log.error("Creating sensor GS" + (getNodeAddress() * 1000 + sensorNum) + " failed unexpectedly");      log.debug("node should be " + this);      return;    }  }  boolean value=input ^ sensorArray[sensorNum].getInverted();  try {    if (value) {      if (sensorLastSetting[sensorNum] != Sensor.ACTIVE) {        sensorLastSetting[sensorNum]=Sensor.ACTIVE;        sensorArray[sensorNum].setKnownState(Sensor.ACTIVE);      }    } else {      if (sensorLastSetting[sensorNum] != Sensor.INACTIVE) {        sensorLastSetting[sensorNum]=Sensor.INACTIVE;        sensorArray[sensorNum].setKnownState(Sensor.INACTIVE);      }    }  } catch (  JmriException e) {    log.error("exception in markChanges: " + e);  }}  }
class C{  private static void decodeEdifactSegment(BitSource bits,StringBuilder result){  do {    if (bits.available() <= 16) {      return;    }    for (int i=0; i < 4; i++) {      int edifactValue=bits.readBits(6);      if (edifactValue == 0x1F) {        int bitsLeft=8 - bits.getBitOffset();        if (bitsLeft != 8) {          bits.readBits(bitsLeft);        }        return;      }      if ((edifactValue & 0x20) == 0) {        edifactValue|=0x40;      }      result.append((char)edifactValue);    }  } while (bits.available() > 0);}  }
class C{  public SpanManager replace(int start,int end,String str){  sb.replace(start,end,str);  if (calculateSrcPositions) {    for (int i=0; i < end - start; i++)     ib.remove(start);    for (int i=0; i < str.length(); i++)     ib.add(start,-1);  }  adjustLists(start,str.length() - (end - start));  return this;}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  ensureCapacity(map.size());  super.putAll(map);}  }
class C{  public void addCVParameter(String cvParam) throws Exception {  CVParameter newCV=new CVParameter(cvParam);  m_CVParams.addElement(newCV);}  }
class C{  public static String strMon(int month){  return strPad(Integer.toString(month),2,"0",STR_PAD_RIGHT);}  }
class C{  public void parseFromLocalFileData(byte[] data,int offset,int length) throws SwcException {  long givenChecksum=(new ZipLong(data,offset)).getValue();  byte[] tmp=new byte[length - 4];  System.arraycopy(data,offset + 4,tmp,0,length - 4);  crc.reset();  crc.update(tmp);  long realChecksum=crc.getValue();  if (givenChecksum != realChecksum) {    throw new SwcException.BadCRC(Long.toHexString(givenChecksum),Long.toHexString(realChecksum));  }  int newMode=(new ZipShort(tmp,0)).getValue();  byte[] linkArray=new byte[(int)(new ZipLong(tmp,2)).getValue()];  uid=(new ZipShort(tmp,6)).getValue();  gid=(new ZipShort(tmp,8)).getValue();  if (linkArray.length == 0) {    link="";  } else {    System.arraycopy(tmp,10,linkArray,0,linkArray.length);    link=new String(linkArray);  }  setDirectory((newMode & DIR_FLAG) != 0);  setMode(newMode);}  }
class C{  public final boolean safeSubtreeMatch(Object node1,Object node2){  if (node1 == null && node2 == null) {    return true;  }  if (node1 == null || node2 == null) {    return false;  }  return ((ASTNode)node1).subtreeMatch(this,node2);}  }
class C{  public void dispose(){  preDispose();  super.dispose();  AEnv.exit(0);}  }
class C{  @Override public void afterLoad(TermsEnum termsEnum,long actualUsed){  assert termsEnum instanceof RamAccountingTermsEnum;  long estimatedBytes=((RamAccountingTermsEnum)termsEnum).getTotalBytes();  breaker.addWithoutBreaking(-(estimatedBytes - actualUsed));}  }
class C{  public synchronized T addItem(V item){  if (item == null) {    return self();  }  items.add(item);  if (selectedIndex == -1) {    selectedIndex=0;  }  invalidate();  return self();}  }
class C{  public boolean isMultiSelectionEnabled(){  return multiSelectionEnabled;}  }
class C{  public String desiredWeightOfInstancesPerIntervalTipText(){  return "Sets the desired weight of instances per interval for " + "equal-frequency binning.";}  }
class C{  public TestSuite make(){  this.result=new TestSuite();  this.prefix=getBaseName(startingClass);  result.setName(prefix);  BulkTest bulk=makeFirstTestCase(startingClass);  ignored=new ArrayList();  String[] s=bulk.ignoredTests();  if (s != null) {    ignored.addAll(Arrays.asList(s));  }  make(bulk);  return result;}  }
class C{  private void initializeLiveAttributes(){  d=createLiveAnimatedPathData(null,SVG_D_ATTRIBUTE,"");}  }
class C{  public static <T extends Throwable>void throwIfInstanceOf(Throwable t,Class<T> cls) throws T {  if (cls.isInstance(t)) {    throw cls.cast(t);  }}  }
class C{  boolean match(int from,int anchor){  this.hitEnd=false;  this.requireEnd=false;  from=from < 0 ? 0 : from;  this.first=from;  this.oldLast=oldLast < 0 ? from : oldLast;  for (int i=0; i < groups.length; i++)   groups[i]=-1;  acceptMode=anchor;  boolean result=parentPattern.matchRoot.match(this,from,text);  if (!result)   this.first=-1;  this.oldLast=this.last;  return result;}  }
class C{  public Result<?> evaluate() throws QueryEvaluationException {  TupleQueryResult result=query.evaluate();  List<String> bindings=result.getBindingNames();  return new ResultImpl(createCursor(result,bindings));}  }
class C{  @Override public synchronized String toString(){  if (elementCount == 0) {    return "[]";  }  int length=elementCount - 1;  StringBuilder buffer=new StringBuilder(elementCount * 16);  buffer.append('[');  for (int i=0; i < length; i++) {    if (elementData[i] == this) {      buffer.append("(this Collection)");    } else {      buffer.append(elementData[i]);    }    buffer.append(", ");  }  if (elementData[length] == this) {    buffer.append("(this Collection)");  } else {    buffer.append(elementData[length]);  }  buffer.append(']');  return buffer.toString();}  }
class C{  Option(Type type,String name,int numvalues,String description){  this.type=type;  this.name=name;  this.len=numvalues;  this.description=description;  this.value="";}  }
class C{  public NamedMapConverter(@SuppressWarnings("rawtypes") final Class<? extends Map> type,final Mapper mapper,final String entryName,final String keyName,final Class<?> keyType,final String valueName,final Class<?> valueType,final boolean keyAsAttribute,final boolean valueAsAttribute,final ConverterLookup lookup){  super(mapper,type);  this.entryName=entryName != null && entryName.length() == 0 ? null : entryName;  this.keyName=keyName != null && keyName.length() == 0 ? null : keyName;  this.keyType=keyType;  this.valueName=valueName != null && valueName.length() == 0 ? null : valueName;  this.valueType=valueType;  this.keyAsAttribute=keyAsAttribute;  this.valueAsAttribute=valueAsAttribute;  this.lookup=lookup;  enumMapper=UseAttributeForEnumMapper.createEnumMapper(mapper);  if (keyType == null || valueType == null) {    throw new IllegalArgumentException("Class types of key and value are mandatory");  }  if (entryName == null) {    if (keyAsAttribute || valueAsAttribute) {      throw new IllegalArgumentException("Cannot write attributes to map entry, if map entry must be omitted");    }    if (valueName == null) {      throw new IllegalArgumentException("Cannot write value as text of entry, if entry must be omitted");    }  }  if (keyName == null) {    throw new IllegalArgumentException("Cannot write key without name");  }  if (valueName == null) {    if (valueAsAttribute) {      throw new IllegalArgumentException("Cannot write value as attribute without name");    } else     if (!keyAsAttribute) {      throw new IllegalArgumentException("Cannot write value as text of entry, if key is also child element");    }  }  if (keyAsAttribute && valueAsAttribute && keyName.equals(valueName)) {    throw new IllegalArgumentException("Cannot write key and value with same attribute name");  }}  }
class C{  protected void onError(Throwable err){  assert err != null;}  }
class C{  public void removeListener(ActionListener<RestoreCompletionResponse> listener){  this.listeners.remove(listener);}  }
class C{  private void orientTailPath(List<Node> path,Graph graph){  for (int i=0; i < path.size() - 1; i++) {    Node n1=path.get(i);    Node n2=path.get(i + 1);    graph.setEndpoint(n1,n2,Endpoint.TAIL);    graph.setEndpoint(n2,n1,Endpoint.TAIL);    changeFlag=true;    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Orient circle undirectedPaths",graph.getEdge(n1,n2)));  }}  }
class C{  public static EncryptionKey[] keysFromJavaxKeyTab(KeyTab ktab,PrincipalName cname){  return snapshotFromJavaxKeyTab(ktab).readServiceKeys(cname);}  }
class C{  public void actionPerformed(ActionEvent e){  ControlPanelPropertyEditor editor=new ControlPanelPropertyEditor(this);  editor.setVisible(true);}  }
class C{  public static boolean isVerbose(){  return verbose;}  }
class C{  public boolean isUndoEnabled(){  return ((DataTableModel)getModel()).isUndoEnabled();}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final boolean value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return DPID;case 2:  return PORT;default :return null;}}  }
class C{  @DSComment("clear history, could be the hidden one") @DSSpec(DSCat.SECURITY) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.021 -0500",hash_original_method="9379C31AF46289752B20FFA616A8CEEF",hash_generated_method="61FE23FE6BF777E9A110DE8EC3BB1869") public void clearHistory(){  ContentResolver cr=mContext.getContentResolver();  truncateHistory(cr,0);}  }
class C{  public boolean hasDebugger(final DebuggerTemplate debugger){  return m_assignedDebuggers.contains(debugger);}  }
class C{  public void restore(){  Network longTermMemory;  try {    File file=new File(XMLMemory.knowledgeBaseFileName);    if (!file.exists()) {      longTermMemory=new BasicNetwork();      longTermMemory.setBot(getBot());    } else {      longTermMemory=NetworkXMLParser.instance().parse(file);      longTermMemory.setBot(getBot());    }  } catch (  Exception exception) {    exception.printStackTrace();    URL url=getClass().getResource("/memory.xml");    try {      longTermMemory=NetworkXMLParser.instance().parse(url);    } catch (    Exception resourceException) {      resourceException.printStackTrace();      longTermMemory=new BasicNetwork();    }  }  setLongTermMemory(longTermMemory);}  }
class C{  public static int ladderLengthB(String start,String end,Set<String> dict){  if (dict == null || dict.isEmpty())   return 0;  dict.add(end);  Map<String,Integer> map=new HashMap<String,Integer>();  map.put(start,1);  Queue<String> q=new LinkedList<String>();  q.add(start);  while (!q.isEmpty()) {    String word=q.poll();    if (word.equals(end))     break;    for (int i=0; i < word.length(); i++) {      for (char j='a'; j <= 'z'; j++) {        char[] ch=word.toCharArray();        if (ch[i] == j)         continue;        ch[i]=j;        String newWord=new String(ch);        if (dict.contains(newWord) && !map.containsKey(newWord)) {          map.put(newWord,map.get(word) + 1);          q.add(newWord);        }      }    }  }  return map.containsKey(end) ? map.get(end) : 0;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  op="";  timePattern=null;  timePatterns=DynamicList.getInstance(new ArrayList(),factoryPattern);  availableTimePatterns=DynamicList.getInstance(new ArrayList(),factoryPattern);  roomPrefs=DynamicList.getInstance(new ArrayList(),factoryPref);  roomPrefLevels=DynamicList.getInstance(new ArrayList(),factoryPrefLevel);  bldgPrefs=DynamicList.getInstance(new ArrayList(),factoryPref);  bldgPrefLevels=DynamicList.getInstance(new ArrayList(),factoryPrefLevel);  roomFeaturePrefs=DynamicList.getInstance(new ArrayList(),factoryPref);  roomFeaturePrefLevels=DynamicList.getInstance(new ArrayList(),factoryPrefLevel);  roomGroups=DynamicList.getInstance(new ArrayList(),factoryPref);  roomGroupLevels=DynamicList.getInstance(new ArrayList(),factoryPrefLevel);  distPrefs=DynamicList.getInstance(new ArrayList(),factoryPref);  distPrefLevels=DynamicList.getInstance(new ArrayList(),factoryPrefLevel);  datePatternPrefs=DynamicList.getInstance(new ArrayList(),factoryPref);  datePatternPrefLevels=DynamicList.getInstance(new ArrayList(),factoryPrefLevel);  nextId=previousId=null;  allowHardPrefs=true;  hasNotAvailable=false;  addBlankPrefRows();  availability=null;}  }
class C{  @SuppressWarnings("deprecation") public synchronized void runSystemMLDebugger(){  debuggerUI.setOptions();  debuggerUI.getDebuggerCLI();  Thread runtime=new Thread(DMLRuntime);  boolean isRuntimeInstruction=false;  while (!quit) {    try {      getCommand();      if (cmd != null) {        isRuntimeInstruction=false;        if (cmd.hasOption("h")) {          debuggerUI.getDebuggerCLI();        } else         if (cmd.hasOption("q")) {synchronized (DMLDebugger.class) {            quit=true;          }          runtime.stop();        } else         if (cmd.hasOption("r")) {          if (currEC != null) {            System.out.println("Runtime has already started. Try \"s\" to go to next line, or \"c\" to continue running your DML script.");          } else {            currEC=preEC;            runtime.start();            isRuntimeInstruction=true;          }        } else         if (cmd.hasOption("c")) {          if (currEC == null)           System.out.println("Runtime has not been started. Try \"r\" to start DML runtime execution."); else           if (!runtime.isAlive()) {            System.err.println("Invalid debug state.");          } else {            System.out.println("Resuming DML script execution ...");            preEC.getDebugState().setCommand(null);            runtime.resume();            isRuntimeInstruction=true;          }        } else         if (cmd.hasOption("si")) {          if (!runtime.isAlive()) {            currEC=preEC;            runtime.start();            isRuntimeInstruction=true;          }          preEC.getDebugState().setCommand("step_instruction");          runtime.resume();          isRuntimeInstruction=true;        } else         if (cmd.hasOption("s")) {          if (!runtime.isAlive()) {            currEC=preEC;            runtime.start();            isRuntimeInstruction=true;          }          preEC.getDebugState().setCommand("step_line");          runtime.resume();          isRuntimeInstruction=true;        } else         if (cmd.hasOption("b")) {          int lineNumber=dbFunctions.getValue(cmd.getOptionValues("b"),lines.length);          if (lineNumber > 0) {            if (DMLBreakpointManager.getBreakpoint(lineNumber) == null)             System.out.println("Sorry, a breakpoint cannot be inserted at line " + lineNumber + ". Please try a different line number."); else {              if (DMLBreakpointManager.getBreakpoint(lineNumber).getBPInstructionStatus() != BPINSTRUCTION_STATUS.INVISIBLE) {                System.out.format("Breakpoint at line %d already exists.\n",lineNumber);              } else {                dbprog.accessBreakpoint(lineNumber,0,BPINSTRUCTION_STATUS.ENABLED);              }            }          }        } else         if (cmd.hasOption("d")) {          int lineNumber=dbFunctions.getValue(cmd.getOptionValues("d"),lines.length);          if (lineNumber > 0 && DMLBreakpointManager.getBreakpoint(lineNumber) != null && DMLBreakpointManager.getBreakpoint(lineNumber).getBPInstructionStatus() != BPINSTRUCTION_STATUS.INVISIBLE) {            dbprog.accessBreakpoint(lineNumber,1,BPINSTRUCTION_STATUS.INVISIBLE);          } else {            System.out.println("Sorry, a breakpoint cannot be deleted at line " + lineNumber + ". Please try a different line number.");          }        } else         if (cmd.hasOption("i")) {          String[] infoOptions=cmd.getOptionValues("i");          if (infoOptions == null || infoOptions.length == 0) {            System.err.println("The command \"info\" requires option. Try \"info break\" or \"info frame\".");          } else           if (infoOptions[0].trim().equals("break")) {            dbFunctions.listBreakpoints(DMLBreakpointManager.getBreakpoints());          } else           if (infoOptions[0].trim().equals("frame")) {            if (!runtime.isAlive())             System.err.println("Runtime has not been started. Try \"r\" or \"s\" to start DML runtime execution."); else             dbFunctions.printCallStack(currEC.getDebugState().getCurrentFrame(),currEC.getDebugState().getCallStack());          } else {            System.err.println("Invalid option for command \"info\".  Try \"info break\" or \"info frame\".");          }        } else         if (cmd.hasOption("p")) {          String[] pOptions=cmd.getOptionValues("p");          if (pOptions == null || pOptions.length != 1) {            System.err.println("Incorrect options for command \"print\"");          } else {            String varName=pOptions[0].trim();            if (runtime.isAlive()) {              if (varName.contains("[")) {                try {                  String variableNameWithoutIndices=varName.split("\\[")[0].trim();                  String indexString=(varName.split("\\[")[1].trim()).split("\\]")[0].trim();                  String rowIndexStr="";                  String colIndexStr="";                  if (indexString.startsWith(",")) {                    colIndexStr=indexString.split(",")[1].trim();                  } else                   if (indexString.endsWith(",")) {                    rowIndexStr=indexString.split(",")[0].trim();                  } else {                    rowIndexStr=indexString.split(",")[0].trim();                    colIndexStr=indexString.split(",")[1].trim();                  }                  int rowIndex=-1;                  int colIndex=-1;                  if (!rowIndexStr.isEmpty()) {                    rowIndex=Integer.parseInt(rowIndexStr);                  }                  if (!colIndexStr.isEmpty()) {                    colIndex=Integer.parseInt(colIndexStr);                  }                  dbFunctions.print(currEC.getDebugState().getVariables(),variableNameWithoutIndices,"value",rowIndex,colIndex);                } catch (                Exception indicesException) {                  System.err.println("Incorrect format for \"p\". If you are trying to print matrix variable M, you can use M[1,] or M[,1] or M[1,1] (without spaces).");                }              } else {                dbFunctions.print(currEC.getDebugState().getVariables(),varName,"value",-1,-1);              }            } else             System.err.println("Runtime has not been started. Try \"r\" or \"s\" to start DML runtime execution.");          }        } else         if (cmd.hasOption("whatis")) {          String[] pOptions=cmd.getOptionValues("whatis");          if (pOptions == null || pOptions.length != 1) {            System.err.println("Incorrect options for command \"whatis\"");          } else {            String varName=pOptions[0].trim();            dbFunctions.print(currEC.getDebugState().getVariables(),varName,"metadata",-1,-1);          }        } else         if (cmd.hasOption("set")) {          String[] pOptions=cmd.getOptionValues("set");          if (pOptions == null || pOptions.length != 2) {            System.err.println("Incorrect options for command \"set\"");          } else {            try {              if (pOptions[0].contains("[")) {                String[] paramsToSetMatrix=new String[4];                paramsToSetMatrix[0]=pOptions[0].split("\\[")[0].trim();                String indexString=(pOptions[0].split("\\[")[1].trim()).split("\\]")[0].trim();                paramsToSetMatrix[1]=indexString.split(",")[0].trim();                paramsToSetMatrix[2]=indexString.split(",")[1].trim();                paramsToSetMatrix[3]=pOptions[1].trim();                dbFunctions.setMatrixCell(currEC.getDebugState().getVariables(),paramsToSetMatrix);              } else {                dbFunctions.setScalarValue(currEC.getDebugState().getVariables(),pOptions);              }            } catch (            Exception exception1) {              System.out.println("Only scalar variable or a matrix cell available in current frame can be set in current version.");            }          }        } else         if (cmd.hasOption("l")) {          String[] pOptions=cmd.getOptionValues("l");          String[] argsForRange=new String[2];          int currentPC=1;          if (runtime.isAlive()) {            currentPC=currEC.getDebugState().getPC().getLineNumber();          }          IntRange range=null;          if (pOptions == null) {            range=new IntRange(currentPC,Math.min(lines.length,currentPC + 10));          } else           if (pOptions.length == 1 && pOptions[0].trim().toLowerCase().equals("all")) {            range=new IntRange(1,lines.length);          } else           if (pOptions.length == 2 && pOptions[0].trim().toLowerCase().equals("next")) {            int numLines=10;            try {              numLines=Integer.parseInt(pOptions[1]);            } catch (            Exception e1) {            }            argsForRange[0]="" + currentPC;            argsForRange[1]="" + Math.min(lines.length,numLines + currentPC);            range=dbFunctions.getRange(argsForRange,lines.length);          } else           if (pOptions.length == 2 && pOptions[0].trim().toLowerCase().equals("prev")) {            int numLines=10;            try {              numLines=Integer.parseInt(pOptions[1]);            } catch (            Exception e1) {            }            argsForRange[0]="" + Math.max(1,currentPC - numLines);            argsForRange[1]="" + currentPC;            range=dbFunctions.getRange(argsForRange,lines.length);          }          if (range == null) {            System.err.println("Incorrect usage of command \"l\". Try \"l\" or \"l all\" or \"l next 5\" or \"l prev 5\".");          } else {            if (range.getMinimumInteger() > 0) {              dbFunctions.printLines(lines,range);            } else {              System.err.println("Sorry no lines that can be printed. Try \"l\" or \"l all\" or \"l next 5\" or \"l prev 5\".");            }          }        } else         if (cmd.hasOption("li")) {          String[] pOptions=cmd.getOptionValues("li");          String[] argsForRange=new String[2];          int currentPC=1;          if (runtime.isAlive()) {            currentPC=currEC.getDebugState().getPC().getLineNumber();          }          IntRange range=null;          if (pOptions == null) {            range=new IntRange(currentPC,Math.min(lines.length,currentPC + 10));          } else           if (pOptions.length == 1 && pOptions[0].trim().toLowerCase().equals("all")) {            range=new IntRange(1,lines.length);          } else           if (pOptions.length == 2 && pOptions[0].trim().toLowerCase().equals("next")) {            int numLines=10;            try {              numLines=Integer.parseInt(pOptions[1]);            } catch (            Exception e1) {            }            argsForRange[0]="" + currentPC;            argsForRange[1]="" + Math.min(lines.length,numLines + currentPC);            range=dbFunctions.getRange(argsForRange,lines.length);          } else           if (pOptions.length == 2 && pOptions[0].trim().toLowerCase().equals("prev")) {            int numLines=10;            try {              numLines=Integer.parseInt(pOptions[1]);            } catch (            Exception e1) {            }            argsForRange[0]="" + Math.max(1,currentPC - numLines);            argsForRange[1]="" + currentPC;            range=dbFunctions.getRange(argsForRange,lines.length);          }          if (range == null) {            System.err.println("Incorrect usage of command \"li\". Try \"li\" or \"li all\" or \"li next 5\" or \"li prev 5\".");          } else {            if (range.getMinimumInteger() > 0) {              dbFunctions.printInstructions(lines,dbprog.getDMLInstMap(),range,false);            } else {              System.err.println("Sorry no lines that can be printed. Try \"li\" or \"li all\" or \"li next 5\" or \"li prev 5\".");            }          }        } else         if (cmd.hasOption("set_scalar")) {          if (!runtime.isAlive())           System.err.println("Runtime has not been started. Try \"r\" to start DML runtime execution."); else           dbFunctions.setScalarValue(currEC.getDebugState().getVariables(),cmd.getOptionValues("set_scalar"));        } else         if (cmd.hasOption("m")) {          String varname=dbFunctions.getValue(cmd.getOptionValues("m"));          if (runtime.isAlive())           dbFunctions.printMatrixVariable(currEC.getDebugState().getVariables(),varname); else           System.err.println("Runtime has not been started. Try \"r\" to start DML runtime execution.");        } else         if (cmd.hasOption("x")) {          if (!runtime.isAlive())           System.err.println("Runtime has not been started. Try \"r\" to start DML runtime execution."); else {            dbFunctions.printMatrixCell(currEC.getDebugState().getVariables(),cmd.getOptionValues("x"));          }        } else         if (cmd.hasOption("set_cell")) {          if (!runtime.isAlive())           System.err.println("Runtime has not been started. Try \"r\" to start DML runtime execution."); else {            dbFunctions.setMatrixCell(currEC.getDebugState().getVariables(),cmd.getOptionValues("set_cell"));          }        } else {          System.err.println("Undefined command. Try \"help\".");        }        wait(300);        while (isRuntimeInstruction && !currEC.getDebugState().canAcceptNextCommand()) {          if (quit) {            break;          } else {            wait(300);          }        }      }      wait(300);    } catch (    Exception e) {      System.err.println("Error processing debugger command. Try \"help\".");    }  }}  }
class C{  public DateParser(DateFormat dateFormat){  m_dfmt=dateFormat;  m_pos=new ParsePosition(0);}  }
class C{  public HttpParams copy(){  return this;}  }
class C{  public static void d(String tag,String s){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,s);}  }
class C{  public void emailIntent(String to,String subject,String body){  StringBuilder builder=new StringBuilder("mailto:" + Uri.encode(to));  if (subject != null) {    builder.append("?subject=").append(subject);    if (body != null) {      builder.append("&body=").append(body);    }  }  String uri=builder.toString();  mContext.startActivity(new Intent(Intent.ACTION_SENDTO,Uri.parse(uri)).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));}  }
class C{  public static byte[] insertAt(byte[] dest,byte[] src,int offset){  byte[] temp=new byte[dest.length + src.length - 1];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);  return temp;}  }
class C{  public static void unregisterInterest(){  try {    Cache cacheClient=GemFireCacheImpl.getInstance();    Region region1=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME1);    Region region2=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME2);    region1.unregisterInterest("ALL_KEYS");    region2.unregisterInterest("ALL_KEYS");  } catch (  CacheWriterException e) {    fail("test failed due to " + e);  }}  }
class C{  @SuppressWarnings("unchecked") public static void findGinModules(File rootFolder) throws IOException {  Reflections reflection=new Reflections(new SubTypesScanner(),new TypeAnnotationsScanner());  Set<Class<?>> classes=reflection.getTypesAnnotatedWith(ExtensionGinModule.class);  for (  Class clazz : classes) {    EXTENSIONS_FQN.add(clazz.getCanonicalName());    System.out.println(String.format("New Gin Module Found: %s",clazz.getCanonicalName()));  }  System.out.println(String.format("Found: %d Gin Modules",EXTENSIONS_FQN.size()));}  }
class C{  public void addPoint(float x,float y){  if (npoints == xpoints.length) {    float[] tmp;    tmp=new float[npoints * 2];    System.arraycopy(xpoints,0,tmp,0,npoints);    xpoints=tmp;    tmp=new float[npoints * 2];    System.arraycopy(ypoints,0,tmp,0,npoints);    ypoints=tmp;  }  xpoints[npoints]=x;  ypoints[npoints]=y;  npoints++;  updatePath(x,y);}  }
class C{  public ServicesStillPublishedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.924 -0500",hash_original_method="A632F71919730AFFFF566F700D39B7D0",hash_generated_method="932F9A6FF8031B05F90EB37CC4A15E26") protected boolean lineEnd(TextView widget,Spannable buffer){  return false;}  }
class C{  public Executor inheritEnv(boolean b){  this.inheritEnv=b;  return this;}  }
class C{  public double eval(double params[]){  return (Math.pow(params[0],params[1]));}  }
class C{  @Nullable public static IgfsListingEntry readListingEntry(DataInput in) throws IOException {  if (in.readBoolean()) {    IgniteUuid id=IgniteUtils.readGridUuid(in);    boolean dir=in.readBoolean();    return new IgfsListingEntry(id,dir);  } else   return null;}  }
class C{  public void addRow(Object... row){  if (rows == null) {    throw new IllegalStateException("Cannot add a row when using RowSource");  }  rows.add(row);}  }
class C{  public static void main(String[] args) throws Exception {  new FileProtection().start(args);}  }
class C{  public void keyTyped(KeyEvent e){  if (AWTEventMonitor.keyListener_private != null) {    AWTEventMonitor.keyListener_private.keyTyped(e);  }}  }
class C{  public FontSelectionAction(){  super("Font...");}  }
class C{  private void init(){  setTitle("New Competitive Group");  compPropertiesPanel=CompetitivePropertiesPanel.createCompetitivePropertiesPanel(networkPanel,CompetitivePropsPanelType.CREATE_GROUP);  tabLogic.add(compPropertiesPanel);  layoutPanel=new MainLayoutPanel(false,this);  layoutPanel.setCurrentLayout(CompetitiveGroup.DEFAULT_LAYOUT);  tabLayout.add(layoutPanel);  tabbedPane.addTab("Logic",tabLogic);  tabbedPane.addTab("Layout",layoutPanel);  setContentPane(tabbedPane);  Action helpAction=new ShowHelpAction(compPropertiesPanel.getHelpPath());  addButton(new JButton(helpAction));}  }
class C{  public void testDivideExpGreaterZero(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=20;  String c="1.647694590099337641891395686052735285121058381E+50";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static <T>int binarySearch(T[] array,int startIndex,int endIndex,T object,Comparator<? super T> comparator){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  if (comparator == null) {    return binarySearch(array,startIndex,endIndex,object);  }  int low=startIndex, mid=-1, high=endIndex - 1, result=0;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=comparator.compare(array[mid],object)) < 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (comparator.compare(object,array[index]) < 0) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (result >= 0 ? 1 : 2);}  }
class C{  private ValidationResult discoverIdentityProvidersForSelectionList(List<String> eligibleLocalIdpList,List<String> eligibleExternalIdpList,AuthnRequestState t){  log.debug("Discovering eligible identity providers for authentication.");  Validate.isTrue(t.isChooseIDPViewRequired() == null);  IdmAccessor accessor=t.getIdmAccessor();  String tenantIDPCookie=t.getTenantIDPCookie();  String selectedIDPEntityId=tenantIDPCookie;  if (tenantIDPCookie == null || tenantIDPCookie.isEmpty()) {    String tenantIDPHeader=t.getTenantIDPSelectHeader();    if (tenantIDPHeader == null || tenantIDPHeader.isEmpty()) {      List<String> eligibleIdps=new ArrayList<>();      eligibleIdps.add(accessor.getIdpEntityId());      eligibleIdps.addAll(eligibleExternalIdpList);      t.setIDPEntityIdList(eligibleIdps);      log.debug("No IDP header or cookie is available. Redirect to choose idp view.");      t.setNeedChooseIDPView(true);      return null;    } else {      log.debug("EntityId from IDP header is " + tenantIDPHeader);      selectedIDPEntityId=tenantIDPHeader;      t.addTenantIDPCookie(tenantIDPHeader,t.getResponse());    }  }  t.setNeedChooseIDPView(false);  if (eligibleLocalIdpList.contains(selectedIDPEntityId)) {    log.debug("Tenant IDP cookie is set to local idp. Not proxying.");    t.setProxying(false);  } else {    IDPConfig idpConfigToUse=accessor.getExternalIdpConfigForTenant(accessor.getTenant(),selectedIDPEntityId);    if (idpConfigToUse == null) {      log.warn("External IDP with entity id : " + selectedIDPEntityId + " is not registered.");      return new ValidationResult(OasisNames.REQUESTER,OasisNames.NO_SUPPORTED_IDP);    } else {      t.setExtIDPToUse(idpConfigToUse);      t.setProxying(true);    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.765 -0500",hash_original_method="1B54E28475DEC6550B23EDEA7E3734FF",hash_generated_method="8C9718B707C8AD6173B3ED10AC70B180") public boolean isDebugEnabled(){  return (getLogger().isLoggable(Level.FINE));}  }
class C{  @HLEFunction(nid=0xD8B299AE,version=150) public int sceKernelSetVTimerHandler(@CheckArgument("checkVTimerID") int vtimerUid,TPointer64 scheduleAddr,@CanBeNull TPointer handlerAddress,int handlerArgument){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  long schedule=scheduleAddr.getValue();  sceKernelVTimerInfo.handlerAddress=handlerAddress.getAddress();  sceKernelVTimerInfo.handlerArgument=handlerArgument;  scheduleVTimer(sceKernelVTimerInfo,schedule);  return 0;}  }
class C{  public boolean checkReadPermission(InetAddress address,String community){  if (alwaysAuthorized)   return (true);  PrincipalImpl p=new PrincipalImpl(address);  return acl.checkPermission(p,community,READ);}  }
class C{  public void ValidateSchedule(String newScheduleFile){  for (  ScheduledRoute R : this.routes) {    double prevDep=0;    for (int currentDepIndex=0; currentDepIndex < R.getStop(0).getTimes().size(); currentDepIndex++) {      double currentDep=R.getStop(0).getTimes().get(currentDepIndex).getSecond();      double prevStopDep=0;      for (int i=0; i < R.getStopSequence().size(); i++) {        double stopDep=R.getStop(i).getTimes().get(currentDepIndex).getSecond();        if (stopDep <= prevStopDep) {          String msg="Route \"" + R.id + "\" has a stop congruency error.\n\n"+ "Please enter a new time for the previous stop ("+ R.getStop(i - 1).getId()+ "):\n";          for (int j=0; j < R.getStopLength(); j++)           msg+="\n" + R.getStop(j).getId() + "     "+ Time.writeTime(R.getStop(j).getTimes().get(currentDepIndex).getSecond());          msg+="\n\nFormat: hhmm";          String s=JOptionPane.showInputDialog(msg);          Double first=new Double(ScheduledStop.parseTime(s));          R.getStop(i - 1).setTime(currentDepIndex,new Tuple<Double,Double>(first,first));          msg="Please enter a new time for the current stop (" + R.getStop(i).getId() + "):\n";          for (int j=0; j < R.getStopLength(); j++)           msg+="\n" + R.getStop(j).getId() + "     "+ Time.writeTime(R.getStop(j).getTimes().get(currentDepIndex).getSecond());          msg+="\n\nFormat: hhmm";          s=JOptionPane.showInputDialog(msg);          Double second=new Double(ScheduledStop.parseTime(s));          R.getStop(i).setTime(currentDepIndex,new Tuple<Double,Double>(second,second));        }        prevStopDep=stopDep;      }      if (currentDep <= prevDep) {        System.out.println("Departures for route \"" + R.id + "\" are out of order!");      }    }  }}  }
class C{  public boolean isLocalAndExists(){  return file.exists();}  }
class C{  private void handleHtmlSearchNotes(PageWrapper pageWrapper,RequestAndResponse requestAndResponse,String query,String paneId) throws IOException, ServletException {  pageWrapper.addPageIntroText(servletText.introTextSearchNotes(false),servletText.introTextSearchNotes(true));  try {    final StringBuilder result=new StringBuilder();    User queryUser=null;    if (null != (queryUser=canUserSeeUsersData(requestAndResponse,true))) {      final ResultsPaginator paginator=new ResultsPaginator(requestAndResponse,servletText.sentenceThereWereNoMatches(),result,servletText);      try {        final List<?> results=dbLogic.searchEntriesForUserByNote(queryUser.getId(),query,paginator.getStartPosition(),paginator.getMaxResults());        entryListToHtmlAndJson(paneId,result,paginator,results);      } catch (      EmptyQueryException e) {        requestAndResponse.print(servletText.errorNeedLongerQuery());      }    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    requestAndResponse.print(servletText.errorInternalDatabase());  }}  }
class C{  public CoverageGoalTestNameGenerationStrategy(List<TestCase> testCases){  Map<TestCase,Set<TestFitnessFunction>> testToGoals=initializeCoverageMapFromTests(testCases);  generateNames(testToGoals);}  }
class C{  @VisibleForTesting protected void runInHanderThread(Runnable runnable){  if (handler == null) {    Log.d(TAG,"handler is null.",new Throwable());    return;  }  handler.post(runnable);}  }
class C{  public boolean isEmpty(){  if (sortedEvents == null) {    return true;  }  return sortedEvents.isEmpty();}  }
class C{  private static boolean isMacRetina(Graphics2D g){  GraphicsDevice device=g.getDeviceConfiguration().getDevice();  return isOracleMacRetinaDevice(device);}  }
class C{  private long nextPageSize(long required){  long pages=(required / pageSize) + 1;  long pagesPow2=nextPowerOfTwo(pages);  return pagesPow2 * pageSize;}  }
class C{  private static void d_uarmxx(double[] a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n)   c[i]=builtin(a,aix,init,n,builtin);}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  private void showInfoWithVerticalBar(String text,int duration,int barNewValue){  showInfo(text,duration);  LinearLayout.LayoutParams layoutParams=(LinearLayout.LayoutParams)mVerticalBarProgress.getLayoutParams();  layoutParams.weight=barNewValue;  mVerticalBarProgress.setLayoutParams(layoutParams);  mVerticalBar.setVisibility(View.VISIBLE);}  }
class C{  int storeLeadingComments(ASTNode node,int previousEnd,int[] parentLineRange){  int nodeStart=node.getStartPosition();  int extended=nodeStart;  int previousEndLine=getLineNumber(previousEnd,parentLineRange);  int nodeStartLine=getLineNumber(nodeStart,parentLineRange);  int idx=getCommentIndex(0,nodeStart,-1);  if (idx == -1) {    return nodeStart;  }  int startIdx=-1;  int endIdx=idx;  int previousStart=nodeStart;  while (idx >= 0 && previousStart >= previousEnd) {    Comment comment=this.comments[idx];    int commentStart=comment.getStartPosition();    int end=commentStart + comment.getLength() - 1;    int commentLine=getLineNumber(commentStart,parentLineRange);    if (end <= previousEnd || (commentLine == previousEndLine && commentLine != nodeStartLine)) {      break;    } else     if ((end + 1) < previousStart) {      this.scanner.resetTo(end + 1,previousStart);      try {        int token=this.scanner.getNextToken();        if (token != TerminalTokens.TokenNameWHITESPACE || this.scanner.currentPosition != previousStart) {          if (idx == endIdx) {            return nodeStart;          }          break;        }      } catch (      InvalidInputException e) {        return nodeStart;      }      char[] gap=this.scanner.getCurrentIdentifierSource();      int nbrLine=0;      int pos=-1;      while ((pos=CharOperation.indexOf('\n',gap,pos + 1)) >= 0) {        nbrLine++;      }      if (nbrLine > 1) {        break;      }    }    previousStart=commentStart;    startIdx=idx--;  }  if (startIdx != -1) {    int commentStart=this.comments[startIdx].getStartPosition();    if (previousEnd < commentStart && previousEndLine != nodeStartLine) {      int lastTokenEnd=previousEnd;      this.scanner.resetTo(previousEnd,commentStart);      try {        while (this.scanner.currentPosition < commentStart) {          if (this.scanner.getNextToken() != TerminalTokens.TokenNameWHITESPACE) {            lastTokenEnd=this.scanner.getCurrentTokenEndPosition();          }        }      } catch (      InvalidInputException e) {      }      int lastTokenLine=getLineNumber(lastTokenEnd,parentLineRange);      int length=this.comments.length;      while (startIdx < length && lastTokenLine == getLineNumber(this.comments[startIdx].getStartPosition(),parentLineRange) && nodeStartLine != lastTokenLine) {        startIdx++;      }    }    if (startIdx <= endIdx) {      if (++this.leadingPtr == 0) {        this.leadingNodes=new ASTNode[STORAGE_INCREMENT];        this.leadingIndexes=new long[STORAGE_INCREMENT];      } else       if (this.leadingPtr == this.leadingNodes.length) {        int newLength=(this.leadingPtr * 3 / 2) + STORAGE_INCREMENT;        System.arraycopy(this.leadingNodes,0,this.leadingNodes=new ASTNode[newLength],0,this.leadingPtr);        System.arraycopy(this.leadingIndexes,0,this.leadingIndexes=new long[newLength],0,this.leadingPtr);      }      this.leadingNodes[this.leadingPtr]=node;      this.leadingIndexes[this.leadingPtr]=(((long)startIdx) << 32) + endIdx;      extended=this.comments[endIdx].getStartPosition();    }  }  return extended;}  }
class C{  protected void loadValue(String sValue){  value=new File(sValue);  absolutePath=value.getAbsolutePath();}  }
class C{  public void reset(){  localStores=new HashMap<String,ListenerStorageEngine>();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredDynamic: ");  result.append(declaredDynamic);  result.append(')');  return result.toString();}  }
class C{  public boolean isGreaterThanOrEqualTo(Money money){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(money);  return (thisValue.compareTo(parameter) >= 0);}  }
class C{  protected void refreshIdents(){  Map<PlatformIdent,AgentStatusData> agentMap=globalDataAccessService.getAgentsOverview();  platformMap.clear();  methodMap.clear();  sensorTypeMap.clear();  jmxDefinitionDataMap.clear();  for (  PlatformIdent overview : agentMap.keySet()) {    PlatformIdent platformIdent;    try {      platformIdent=globalDataAccessService.getCompleteAgent(overview.getId());    } catch (    BusinessException e) {      LOG.warn("Exception occurred trying to refresh sensor information for the agent " + overview.getAgentName() + ".",e);      continue;    }    platformMap.put(platformIdent.getId(),platformIdent);    for (    MethodIdent methodIdent : platformIdent.getMethodIdents()) {      methodMap.put(methodIdent.getId(),methodIdent);    }    for (    SensorTypeIdent sensorTypeIdent : platformIdent.getSensorTypeIdents()) {      sensorTypeMap.put(sensorTypeIdent.getId(),sensorTypeIdent);    }    for (    JmxDefinitionDataIdent jmxDefinitionDataIdent : platformIdent.getJmxDefinitionDataIdents()) {      jmxDefinitionDataMap.put(jmxDefinitionDataIdent.getId(),jmxDefinitionDataIdent);    }  }}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  public VelocityScroller(Context context){  this(context,null);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.RECORD_ENTITY___ANONYMOUS_RECORD_ENTITY_11:    return getAnonymous_recordEntity_1_1();case UmplePackage.RECORD_ENTITY___TRACE_RECORD_1:  return getTrace_record_1();case UmplePackage.RECORD_ENTITY___ANONYMOUS_RECORD_ENTITY_21:return getAnonymous_recordEntity_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static String encodeForURL(String str){  StringBuffer result=new StringBuffer();  for (int i=0; i < str.length(); i++) {    char ch=str.charAt(i);    if (ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z' || ch >= '0' && ch <= '9')     result.append(ch); else {switch (ch) {case '-':case '_':case '.':case '!':case '~':case '*':case '\'':case '(':case ')':        result.append(ch);      break;default :    result.append('%');  result.append(hexchars[(ch & 0xf0) >> 4]);result.append(hexchars[ch & 0x0f]);break;}}}return result.toString();}  }
class C{  private void testLinkedLocalTablesWithAutoServerReconnect() throws SQLException {  if (config.memory || config.networked) {    return;  }  deleteDb(getTestName() + "1");  deleteDb(getTestName() + "2");  String url=getURL(getTestName() + "1;AUTO_SERVER=TRUE",true);  String urlLinked=getURL(getTestName() + "2",true);  String user=getUser(), password=getPassword();  Connection connLinked=getConnection(urlLinked,user,password);  Statement statLinked=connLinked.createStatement();  statLinked.execute("CREATE TABLE TEST(ID VARCHAR)");  Connection connAutoServer1=getConnection(url + ";OPEN_NEW=TRUE",user,password);  Statement statAutoServer1=connAutoServer1.createStatement();  statAutoServer1.execute("CREATE LOCAL TEMPORARY LINKED TABLE T('', '" + urlLinked + "', '"+ user+ "', '"+ password+ "', 'TEST')");  Connection connAutoServer2=getConnection(url + ";OPEN_NEW=TRUE",user,password);  Statement statAutoServer2=connAutoServer2.createStatement();  statAutoServer2.execute("CREATE LOCAL TEMPORARY LINKED TABLE T('', '" + urlLinked + "', '"+ user+ "', '"+ password+ "', 'TEST')");  statAutoServer1.execute("shutdown immediately");  try {    connAutoServer1.close();  } catch (  SQLException e) {  }  statAutoServer2.execute("INSERT INTO T (ID) VALUES('abc')");  statAutoServer2.execute("drop table t");  connAutoServer2.close();  connLinked.createStatement().execute("shutdown immediately");  try {    connLinked.close();  } catch (  SQLException e) {  }  deleteDb(getTestName() + "1");  deleteDb(getTestName() + "2");}  }
class C{  public static Object convertMapToXML(Map<String,? extends Object> map,String root,Class<?> clazz) throws DOMException, IllegalArgumentException, IllegalAccessException {  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder documentBuilder;  Document document=null;  LSSerializer lsSerializer=null;  try {    documentBuilder=documentBuilderFactory.newDocumentBuilder();    document=documentBuilder.newDocument();    Element rootElement=document.createElement(root);    if (null != rootElement) {      document.appendChild(rootElement);      for (      Entry<String,? extends Object> entry : map.entrySet()) {        Element mapElement=document.createElement(entry.getKey());        if (entry.getValue() instanceof String) {          mapElement.setTextContent(entry.getValue().toString());        } else {          Method[] methods=clazz.getDeclaredMethods();          String getterPrefix="get";          for (          Method method : methods) {            String methodName=method.getName();            if (methodName.startsWith("get")) {              String fieldName=methodName.substring(getterPrefix.length(),getterPrefix.length() + 1).toLowerCase();              fieldName=fieldName + methodName.substring(getterPrefix.length() + 1);              Element subElement=document.createElement(fieldName);              try {                subElement.setTextContent(String.valueOf(method.invoke(clazz.cast(entry.getValue()))));              } catch (              SecurityException e) {                _log.info("The getter method {} for the field led to security exception {}",methodName);              }catch (              Exception e) {                _log.info("The getter method {} for the field failed with exception {}",methodName,e.toString());              }              mapElement.appendChild(subElement);            }          }        }        rootElement.appendChild(mapElement);      }    }    DOMImplementationLS domImplementation=(DOMImplementationLS)document.getImplementation();    lsSerializer=domImplementation.createLSSerializer();  } catch (  ParserConfigurationException e) {    throw APIException.internalServerErrors.ioWriteError(root);  }  return lsSerializer.writeToString(document);}  }
class C{  static void welcome(final Player player){  String msg=welcomeMessage;  try {    final Configuration config=Configuration.getConfiguration();    if (config.has("server_welcome")) {      msg=config.get("server_welcome");      if (msg.startsWith("http://")) {        final URL url=new URL(msg);        HttpURLConnection.setFollowRedirects(false);        final HttpURLConnection connection=(HttpURLConnection)url.openConnection();        try {          final BufferedReader br=new BufferedReader(new InputStreamReader(connection.getInputStream(),"UTF-8"));          try {            msg=br.readLine();          }  finally {            br.close();          }        }  finally {          connection.disconnect();        }      }    }  } catch (  final IOException e) {    if (firstWelcomeException) {      logger.warn("Can't read server_welcome from marauroa.ini",e);      firstWelcomeException=false;    }  }  if (msg != null) {    player.sendPrivateText(NotificationType.SERVER,msg);  }}  }
class C{  public byte nextByte(){  return nextByte(defaultRadix);}  }
class C{  public Response(final Request request,final CrawlProfile profile){  this.request=request;  this.requestHeader=new RequestHeader();  this.responseHeader=new ResponseHeader(200);  this.responseHeader.put(HeaderFramework.CONTENT_TYPE,Classification.ext2mime(MultiProtocolURL.getFileExtension(request.url().getFileName()),"text/plain"));  this.profile=profile;  this.status=QUEUE_STATE_FRESH;  this.content=request.name().length() > 0 ? UTF8.getBytes(request.name()) : UTF8.getBytes(request.url().toTokens());  this.fromCache=true;  if (this.responseHeader != null)   this.responseHeader.put(HeaderFramework.CONTENT_LENGTH,"0");}  }
class C{  private void flushBuffer() throws IOException {  if (count > 0) {    char[] chars=new char[count];    for (int i=0; i < count; i++)     chars[i]=(char)buf[i];    if (m_tracer != null)     m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_OUTPUT_CHARACTERS,chars,0,chars.length);    count=0;  }}  }
class C{  public void println(){  out.println();}  }
class C{  protected void initNode(Node node){  node.setTimestamp(currentTimeMicros());}  }
class C{  private Set collectUniqueResourcesForChanges(final PendingChange[] changes){  Check.notNull(changes,"changes");  final Set uniqueResources=new HashSet();  for (int i=0; i < changes.length; i++) {    final PendingChange change=changes[i];    final String localPath=change.getLocalItem();    if (localPath == null || localPath.length() == 0) {      continue;    }    final IResource resource=getAreaResourceForLocalPath(localPath);    if (resource != null) {      uniqueResources.add(resource);    }  }  return uniqueResources;}  }
class C{  public WeakHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  public void startSampling(){  if (mSamplingCounter.getAndIncrement() == 0) {    mHandler.startSamplingThread();    mLastTimeReading=SystemClock.elapsedRealtime();  }}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  conservativeApproximation=(ApproximationLine)in.readObject();}  }
class C{  public void readDict(BufferedReader fin) throws IOException {  dict.clear();  String line;  if ((line=fin.readLine()) == null) {    System.out.println("No dictionary size information");    return;  }  int dictSize=Integer.parseInt(line);  if (dictSize <= 0) {    System.out.println("Invalid dictionary size");  }  System.out.println("Reading dictionary ...");  for (int i=0; i < dictSize; i++) {    line=fin.readLine();    if (line == null) {      System.out.println("Invalid dictionary line");      return;    }    StringTokenizer strTok=new StringTokenizer(line," \t\r\n");    int len=strTok.countTokens();    if (len < 2) {      continue;    }    StringTokenizer cpTok=new StringTokenizer(strTok.nextToken(),":");    int cp=Integer.parseInt(cpTok.nextToken());    int cpCount=Integer.parseInt(cpTok.nextToken());    Element elem=new Element();    elem.count=cpCount;    elem.chosen=1;    while (strTok.hasMoreTokens()) {      StringTokenizer lbTok=new StringTokenizer(strTok.nextToken(),":");      int order=Integer.parseInt(lbTok.nextToken());      int label=Integer.parseInt(lbTok.nextToken());      int count=Integer.parseInt(lbTok.nextToken());      int fidx=Integer.parseInt(lbTok.nextToken());      CountFeatureIdx cntFeaIdx=new CountFeatureIdx(count,fidx);      if (order == Option.FIRST_ORDER) {        elem.lbCntFidxes.put(new Integer(label),cntFeaIdx);      } else       if (order == Option.SECOND_ORDER) {      }    }    dict.put(new Integer(cp),elem);  }  System.out.println("Reading dictionary (" + Integer.toString(dict.size()) + " entries) completed!");  line=fin.readLine();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE__CHARACTER:    return getCharacter();case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE__SEQUENCE:  return getSequence();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean saveAsGeoJSON(File file){  try {    FileWriter fw=new FileWriter(file);    BufferedWriter writer=new BufferedWriter(fw,8192);    boolean result=saveAsGeoJSON(writer);    writer.close();    return result;  } catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  private RhinoScriptBuilder initScriptBuilder(){  try {    RhinoScriptBuilder builder=null;    if (scope == null) {      builder=RhinoScriptBuilder.newChain().evaluateChain(getCoffeeScriptAsStream(),DEFAULT_COFFE_SCRIPT);      scope=builder.getScope();    } else {      builder=RhinoScriptBuilder.newChain(scope);    }    return builder;  } catch (  final IOException ex) {    throw new IllegalStateException("Failed reading init script",ex);  }}  }
class C{  protected void init(int limit){  if (init)   throw new IllegalStateException();  init=true;  this.limit=limit;  if (limit < 0) {    limit=-limit;  }  this.keys=(sendKeys ? new MutableKeysRaba(0,0,limit,new byte[limit][]) : null);  this.vals=(sendVals ? new MutableValuesRaba(0,0,limit,new byte[limit][]) : null);  if (indexMetadata.getDeleteMarkers()) {    deleteMarkers=new byte[limit];  }  if (indexMetadata.getVersionTimestamps()) {    versionTimestamps=new long[limit];    minimumVersionTimestamp=Long.MIN_VALUE;    maximumVersionTimestamp=Long.MAX_VALUE;  }  sourceIndices=sources.length > 1 ? new byte[limit] : null;  if (log.isInfoEnabled()) {    log.info("limit=" + limit + ", sendKeys="+ sendKeys+ ", sendVals="+ sendVals+ ", deleteMarkers="+ (deleteMarkers != null ? true : false)+ ", timestamps="+ (versionTimestamps != null ? true : false)+ ", #sources="+ sources.length);  }}  }
class C{  public ServiceAlreadyStartedException(String servicePath){  super("Service already started: " + servicePath);}  }
class C{  private void startNotification(){  mNotifyManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  mBuilder=new NotificationCompat.Builder(this).setContentTitle("Video Upload").setContentText("Upload in progress").setSmallIcon(android.R.drawable.stat_sys_upload).setTicker("Uploading video").setProgress(0,0,true);  mNotifyManager.notify(NOTIFICATION_ID,mBuilder.build());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  Attr attributeRemoved;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","employee");  element=elementList.item(0);  attributes=element.getAttributes();  attributeRemoved=(Attr)attributes.removeNamedItemNS("http://www.w3.org/2000/xmlns/","xmlns");  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/2000/xmlns/","xmlns");  assertNull("namednodemapremovenameditemns04_1",attribute);  attributeRemoved=(Attr)attributes.removeNamedItemNS("http://www.w3.org/2000/xmlns/","dmstc");  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/2000/xmlns/","dmstc");  assertNull("namednodemapremovenameditemns04_2",attribute);}  }
class C{  @VisibleForTesting ExponentialBackoffScheduler createBackoffScheduler(String prefPackage,Context context,long base,long max){  return new ExponentialBackoffScheduler(prefPackage,context,base,max);}  }
class C{  private void resetDialogPath(){  if (mDialogPath != null) {    Core.getInstance().getImService().removeGroupChatConferenceSubscriber(mDialogPath.getCallId());    mDialogPath=null;  }}  }
class C{  private synchronized void buildIdIndexMapIfNeeded(){  if (idIndexMap == null) {    TObjectIntMap idIndexMap=new TObjectIntHashMap<String>(this.capacity,1f,-1);    for (int i=0; i < this.capacity; i++) {      if (ids[i] != null) {        if (idIndexMap.containsKey(ids[i])) {          LOG.error("Duplicate ID {} in pointset.",ids[i]);        } else {          idIndexMap.put(ids[i],i);        }      }    }    this.idIndexMap=idIndexMap;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isToday(Calendar calendar){  return isSameDay(calendar,Calendar.getInstance());}  }
class C{  public void nodeToBeRemoved(Node removedNode){  if (state == INVALID) {    return;  }  Node node;  for (node=referenceNode; node != null && node != root; node=node.getParentNode()) {    if (node == removedNode) {      break;    }  }  if (node == null || node == root) {    return;  }  if (state == BACKWARD) {    if (node.getNodeType() != Node.ENTITY_REFERENCE_NODE || expandEntityReferences) {      Node n=node.getFirstChild();      if (n != null) {        referenceNode=n;        return;      }    }    Node n=node.getNextSibling();    if (n != null) {      referenceNode=n;      return;    }    n=node;    while ((n=n.getParentNode()) != null && n != root) {      Node t=n.getNextSibling();      if (t != null) {        referenceNode=t;        return;      }    }    referenceNode=null;  } else {    Node n=node.getPreviousSibling();    if (n == null) {      referenceNode=node.getParentNode();      return;    }    if (n.getNodeType() != Node.ENTITY_REFERENCE_NODE || expandEntityReferences) {      Node t;      while ((t=n.getLastChild()) != null) {        n=t;      }    }    referenceNode=n;  }}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public void reset(){  this.canceled=false;  this.fields=null;  this.initializers=null;  this.memberTypes=null;  this.methods=null;  this.packageFragments=null;  this.types=null;}  }
class C{  public static AnimationBuilder animationBuilder(){  return new AnimationBuilder();}  }
class C{  public T caseFaultSource(FaultSource object){  return null;}  }
class C{  public void dispose(){  m_model.removeListener(m_perspectiveListener);  m_historyStringBuilder.removeListener(m_builderListener);  synchronizeDebugger(null);}  }
class C{  public HttpResponse uploadEndUserPhoto(PhotoIcon photo) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Upload the end user photo");  }  String data=Base64.encodeBase64ToString(photo.getContent());  String content=new StringBuilder("<?xml version=\"1.0\" encoding=\"").append(UTF8_STR).append("\"?>").append(CRLF).append("<content xmlns=\"urn:oma:xml:prs:pres-content\">").append(CRLF).append("<mime-type>").append(photo.getType()).append("</mime-type>").append(CRLF).append("<encoding>base64</encoding>").append(CRLF).append("<data>").append(data).append("</data>").append(CRLF).append("</content>").toString();  String url="/org.openmobilealliance.pres-content/users/" + Uri.encode(ImsModule.getImsUserProfile().getPublicUri()) + "/oma_status-icon/rcs_status_icon";  return sendRequestToXDMS(new HttpPutRequest(url,content,"application/vnd.oma.pres-content+xml"));}  }
class C{  @Override public BigdataStatement next() throws QueryEvaluationException {  final BigdataStatement stmt=src.next();{    final BigdataValue s=stmt.getSubject();    if (describedResources.contains(s)) {      record(s,stmt);    }  }{    final BigdataValue o=stmt.getObject();    if (describedResources.contains(o)) {      record(o,stmt);    }  }  return stmt;}  }
class C{  public static String format(Object value,Type type){  value=decode(value,type);switch (type.getTag()) {case BYTE:    return formatByte((Byte)value);case LONG:  return formatLong((Long)value);case FLOAT:return formatFloat((Float)value);case DOUBLE:return formatDouble((Double)value);case CHAR:return formatChar((Character)value);}if (value instanceof String) return formatString((String)value);return value + "";}  }
class C{  protected void freeMemory(){  memory.clear();}  }
class C{  @Deprecated public boolean isAssignableFrom(TypeToken<?> token){  return isAssignableFrom(token.getType());}  }
class C{  public TExportableElement createTExportableElement(){  TExportableElementImpl tExportableElement=new TExportableElementImpl();  return tExportableElement;}  }
class C{  public Normalization(OperatorDescription description){  super(description);}  }
class C{  public boolean isLookAtEnabled(){  return mLookAtEnabled;}  }
class C{  boolean isPrivateKeyEntriesEqual(KeyStore.PrivateKeyEntry first,KeyStore.PrivateKeyEntry second){  if (!Arrays.equals(first.getPrivateKey().getEncoded(),second.getPrivateKey().getEncoded())) {    err.println("Mismatch found in privateKey!");    return false;  }  if (!Arrays.equals(first.getCertificateChain(),second.getCertificateChain())) {    err.println("Mismatch found in certificate chain!");    return false;  }  return true;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void removeByName(String wsName,String wsOwner){  workspaceCache.invalidate(new Key(wsName,wsName,false));}  }
class C{  public Callgraph(final List<FunctionBlock> nodes,final List<FunctionEdge> edges){  super(nodes,edges);  for (  final Object block : nodes) {    if (!(block instanceof FunctionBlock)) {      throw new IllegalArgumentException("Error: Block list contains objects that are not FunctionBlock objects");    }  }  for (  final Object block : edges) {    if (!(block instanceof FunctionEdge)) {      throw new IllegalArgumentException("Error: Edge list contains objects that are not FunctionEdge objects");    }  }}  }
class C{  public static boolean testCondc(int b){  char x=(char)b;  int y=x & 0xffff;  return y == 0xffff;}  }
class C{  private void ensureOpen() throws IOException {  mParent.ensureOpen();  if (!mOpen) {    throw new IOException("Input stream is closed");  }}  }
class C{  public final int countNewWifis(final int session){  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(Uri.withAppendedPath(ContentProvider.CONTENT_URI_WIFI,ContentProvider.CONTENT_URI_OVERVIEW_SUFFIX),session),new String[]{Schema.COL_ID},Schema.COL_KNOWN_WIFI + " = ?",new String[]{"0"},null);  final int count=cursor.getCount();  cursor.close();  return count;}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.192 -0400",hash_original_method="61B68200ED327F129B4748F269F81B81",hash_generated_method="24F22909957B8ACB1A51C86D2B238C30") public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,encoding,lines,lineEnding,false);}  }
class C{  public static int[] randomInts(int max,int count){  int[] vals=new int[count];  for (int i=0; i < count; i++)   vals[i]=SEEDED_RANDOM.nextInt(max);  return vals;}  }
class C{  public SecretKeySpec(byte[] key,int offset,int len,String algorithm){  if (key == null) {    throw new IllegalArgumentException("key == null");  }  if (key.length == 0) {    throw new IllegalArgumentException("key.length == 0");  }  if (len < 0 || offset < 0) {    throw new ArrayIndexOutOfBoundsException("len < 0 || offset < 0");  }  if (key.length - offset < len) {    throw new IllegalArgumentException("key too short");  }  if (algorithm == null) {    throw new IllegalArgumentException("algorithm == null");  }  this.algorithm=algorithm;  this.key=new byte[len];  System.arraycopy(key,offset,this.key,0,len);}  }
class C{  public static boolean isValidGYear(String value){  String regex="-?\\d\\d\\d\\d(Z|(\\+|-)\\d\\d:\\d\\d)?";  if (value.matches(regex)) {    return isValidCalendarValue(value);  } else {    return false;  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_entryOrExitAction_2_();}  }
class C{  public void move(){}  }
class C{  public void testComputeClasspathForMultipleSources() throws CoreException {  addAndCreateSourceEntry(javaProjectA,SRC_DIR_NAME,null);  addAndCreateSourceEntry(javaProjectA,SECONDARY_SRC_DIR_NAME,null);  List<File> actualCp=getListOfFiles(GWTCompileRunner.computeClasspath(javaProjectA));  List<File> expectedCp=new ArrayList<File>();  expectedCp.add(getFile(javaProjectA.getProject(),SRC_DIR_NAME));  expectedCp.add(getFile(javaProjectA.getProject(),SECONDARY_SRC_DIR_NAME));  expectedCp.add(getOutputOfProject(javaProjectA));  assertEquals(expectedCp,actualCp);}  }
class C{  private boolean remoteAddPoi(final Poi poi,String changeSetId){  Backend.CreationResult creationResult=backend.addPoi(poi,changeSetId);switch (creationResult.getStatus()) {case SUCCESS:    poi.setBackendId(creationResult.getBackendId());  poi.setUpdated(false);poiManager.savePoi(poi);return true;case FAILURE_UNKNOWN:default :poiManager.deletePoi(poi);bus.post(new SyncNewNodeErrorEvent(poi.getName(),poi.getId()));return false;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.483 -0400",hash_original_method="1C28DB1C2E0E3429B1E7E978A47E1708",hash_generated_method="F86FF65764F702E2AC455F5D8D050E1D") public void testConnectInput(){  int iterations=BluetoothTestRunner.sConnectInputIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.INPUT_DEVICE,null);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("connectInput iteration " + (i + 1) + " of "+ iterations);    mTestUtils.connectProfile(adapter,device,BluetoothProfile.INPUT_DEVICE,String.format("connectInput(device=%s)",device));    mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.INPUT_DEVICE,String.format("disconnectInput(device=%s)",device));  }  mTestUtils.unpair(adapter,device);  mTestUtils.disable(adapter);}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  assumeTrue(CanConnect.to(new InetSocketAddress(CONSUL_HOST,CONSUL_PORT)));  VaultRule vaultRule=new VaultRule();  vaultRule.before();  if (!vaultRule.prepare().hasSecretBackend("consul")) {    vaultRule.prepare().mountSecret("consul");  }  VaultOperations vaultOperations=vaultRule.prepare().getVaultOperations();  RestTemplate restTemplate=new RestTemplate();  HttpHeaders headers=new HttpHeaders();  headers.add("X-Consul-Token",CONSUL_ACL_MASTER_TOKEN);  HttpEntity<String> requestEntity=new HttpEntity<>("{\"Name\": \"sample\", \"Type\": \"management\"}",headers);  ResponseEntity<Map<String,String>> tokenResponse=restTemplate.exchange("http://{host}:{port}/v1/acl/create",HttpMethod.PUT,requestEntity,STRING_MAP,CONSUL_HOST,CONSUL_PORT);  Map<String,String> consulAccess=new HashMap<>();  consulAccess.put("address",CONNECTION_URL);  consulAccess.put("token",tokenResponse.getBody().get("ID"));  vaultOperations.write("consul/config/access",consulAccess);  vaultOperations.write("consul/roles/readonly",Collections.singletonMap("policy",Base64.encode(POLICY.getBytes())));}  }
class C{  @Command(aliases="start",description="Start the game",permissions="cardinal.start") @PlayerCommand public static void start(CommandContext cmd,@Optional Integer time){  if (time == null) {    time=30;  }  time*=20;  Match match=Cardinal.getMatch((Player)cmd.getSender());  AbstractCountdown countdown=Cardinal.getModule(CountdownModule.class).getStartCountdown(match);  countdown.setTime(time);  countdown.setCancelled(false);}  }
class C{  static HttpStreamWrapper openRead(HttpPath path) throws IOException {  HttpStream stream=createStream(path);  stream._isPost=false;  HttpStreamWrapper wrapper=new HttpStreamWrapper(stream);  String status=(String)wrapper.getAttribute("status");  if ("404".equals(status)) {    throw new FileNotFoundException(L.l("'{0}' returns a HTTP 404.",path.getURL()));  }  return wrapper;}  }
class C{  public FreeResourcesLimit store(FreeResourcesLimit freeResourcesLimit) throws NotFoundException, ServerException {  requireNonNull(freeResourcesLimit,"Required non-null free resources limit");  final FreeResourcesLimitImpl toStore=new FreeResourcesLimitImpl(freeResourcesLimit);  freeResourcesLimitDao.store(toStore);  return toStore;}  }
class C{  protected void appleStyleAfterCreated(WXEditText editText){  String alignStr=(String)getDomObject().getStyles().get(Constants.Name.TEXT_ALIGN);  int textAlign=getTextAlign(alignStr);  if (textAlign <= 0) {    textAlign=Gravity.LEFT;  }  editText.setGravity(textAlign | Gravity.CENTER_VERTICAL);  int colorInt=WXResourceUtils.getColor("#999999");  if (colorInt != Integer.MIN_VALUE) {    editText.setHintTextColor(colorInt);  }  editText.setTextSize(TypedValue.COMPLEX_UNIT_PX,WXStyle.getFontSize(getDomObject().getStyles()));  editText.setText(getDomObject().getAttrs().optString(Constants.Name.VALUE));}  }
class C{  public synchronized boolean syncSeen(){  return syncSeen;}  }
class C{  public static void testHidenWindowDispose() throws Exception {  JFrame f=new JFrame();  Listener l=new Listener();  f.addWindowListener(l);  f.dispose();  waitEvents();  assertEquals(0,l.getCount());}  }
class C{  private static Pointer computePointer(DoubleBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.DOUBLE);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    DoubleBuffer t=DoubleBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.DOUBLE);  }  return result;}  }
class C{  private PostgreSQLNodeSaver(){}  }
class C{  public static long copy(InputStream in,OutputStream out,long length) throws IOException {  try {    long copied=0;    int len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);    byte[] buffer=new byte[len];    while (length > 0) {      len=in.read(buffer,0,len);      if (len < 0) {        break;      }      if (out != null) {        out.write(buffer,0,len);      }      copied+=len;      length-=len;      len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);    }    return copied;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  @Nonnull public BugInstance addCalledMethod(ConstantPoolGen cpg,InvokeInstruction inv){  String className=inv.getClassName(cpg);  String methodName=inv.getMethodName(cpg);  String methodSig=inv.getSignature(cpg);  addMethod(className,methodName,methodSig,inv.getOpcode() == Constants.INVOKESTATIC);  describe(MethodAnnotation.METHOD_CALLED);  return this;}  }
class C{  protected final void CMP(Instruction s,RegisterOperand val1,Operand val2,ConditionOperand cond,boolean immediate){  RegisterOperand cr=regpool.makeTempCondition();  Operator op;  if (immediate) {    op=cond.isUNSIGNED() ? PPC_CMPLI : PPC_CMPI;  } else {    op=cond.isUNSIGNED() ? PPC_CMPL : PPC_CMP;  }  EMIT(MIR_Binary.create(op,cr,val1,val2));  EMIT(MIR_CondBranch.mutate(s,PPC_BCOND,cr.copyD2U(),new PowerPCConditionOperand(cond),IfCmp.getTarget(s),IfCmp.getBranchProfile(s)));}  }
class C{  public String foundType(){  return foundType;}  }
class C{  public int start_state(){  return 0;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.196 -0500",hash_original_method="03121A7AC3B4E7519E88953F37DA485C",hash_generated_method="E0F9C5B343EA0376178403393DBFABB2") public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  @Deprecated public static void dragViewToTop(ActivityInstrumentationTestCase test,View v,int stepCount){  dragViewToTop((InstrumentationTestCase)test,v,stepCount);}  }
class C{  private ClassReader typeInfo(final String type) throws IOException, NullPointerException {  InputStream is=l.getResourceAsStream(type + ".class");  try {    if (is == null)     throw new NullPointerException("Class not found " + type);    return new ClassReader(is);  }  finally {    if (is != null)     is.close();  }}  }
class C{  public boolean isEncrypted(){  if (m_vo.IsEncryptedField)   return true;  String ob=getObscureType();  if (ob != null && ob.length() > 0)   return true;  return m_vo.ColumnName.equals("Password");}  }
class C{  private Combo createRangeOp(RelationCount.RangeOption setup){  rangeOp=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);  for (  RelationCount.RangeOption option : COMBO_DISPLAY) {    rangeOp.add(option.getRangeLabel());  }  rangeOp.addSelectionListener(this);  rangeOp.select(getRangeIndex(setup));  return rangeOp;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_GUARD_2__MORE_GUARDS_1:    return moreGuards_1 != null && !moreGuards_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static ReilInstruction createJcc(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize thirdSize,final String thirdValue,final String... meta){  return createBinaryInstruction(ReilHelpers.OPCODE_JCC,new CAddress(offset),firstSize,firstValue,thirdSize,thirdValue,meta);}  }
class C{  public void startEditingAtPath(TreePath path){  TreeUI tree=getUI();  if (tree != null)   tree.startEditingAtPath(this,path);}  }
class C{  @Autowired public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {  auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder()).and().jdbcAuthentication().dataSource(dataSource).usersByUsernameQuery("SELECT username, password, enabled, full_name FROM user WHERE username=?").authoritiesByUsernameQuery("SELECT username, role FROM authority WHERE username=?");}  }
class C{  public void connectionClosed(Spy spy){  if (connectionLogger.isDebugEnabled()) {    connectionLogger.info(spy.getConnectionNumber() + ". Connection closed " + getDebugInfo());    connectionLogger.debug(ConnectionSpy.getOpenConnectionsDump());  } else {    connectionLogger.info(spy.getConnectionNumber() + ". Connection closed");  }}  }
class C{  public CharSequence format(Formatter formatter){  CharSequence input=format();  return formatter.format(String.valueOf(input));}  }
class C{  public void testSetPropertyWhenDefaultPropertyExists() throws Exception {  TestableAbstractStandaloneConfiguration configuration=new TestableAbstractStandaloneConfiguration("dummy");  configuration.setProperty(ServletPropertySet.PORT,"8081");  assertEquals("8081",configuration.getPropertyValue(ServletPropertySet.PORT));}  }
class C{  public void ruleR0(Graph graph){  graph.reorientAllWith(Endpoint.CIRCLE);  fciOrientbk(knowledge,graph,graph.getNodes());  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    List<Node> adjacentNodes=graph.getAdjacentNodes(b);    if (adjacentNodes.size() < 2) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);    int[] combination;    while ((combination=cg.next()) != null) {      Node a=adjacentNodes.get(combination[0]);      Node c=adjacentNodes.get(combination[1]);      if (graph.isAdjacentTo(a,c)) {        continue;      }      if (graph.isDefCollider(a,b,c)) {        continue;      }      if (sepsets.isCollider(a,b,c)) {        if (!isArrowpointAllowed(a,b,graph)) {          continue;        }        if (!isArrowpointAllowed(c,b,graph)) {          continue;        }        graph.setEndpoint(a,b,Endpoint.ARROW);        graph.setEndpoint(c,b,Endpoint.ARROW);        if (verbose) {          logger.log("colliderOrientations",SearchLogUtils.colliderOrientedMsg(a,b,c));          out.println(SearchLogUtils.colliderOrientedMsg(a,b,c));          String location="R0";          printWrongColliderMessage(a,b,c,location,graph);        }      }    }  }}  }
class C{  public boolean isSignWithExpiredCertificate(){  return signWithExpiredCertificate;}  }
class C{  public final ArrayList<Move> legalMoves(Position pos){  ArrayList<Move> moveList=pseudoLegalMoves(pos);  moveList=MoveGen.removeIllegal(pos,moveList);  return moveList;}  }
class C{  public String buildLogisticModelsTipText(){  return "Whether to fit logistic models to the outputs (for proper " + "probability estimates).";}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){}  }
class C{  public void validate() throws org.apache.thrift.TException {  if (taskName == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskName' was not present! Struct: " + toString());  }  if (className == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'className' was not present! Struct: " + toString());  }  if (method == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'method' was not present! Struct: " + toString());  }}  }
class C{  private static void executeTransaction(IgniteCache<Long,Person> cache){  try (Transaction tx=Ignition.ignite().transactions().txStart()){    Person val=cache.get(id);    System.out.println("Read value: " + val);    val=cache.getAndPut(id,new Person(id,"Isaac","Newton"));    System.out.println("Overwrote old value: " + val);    val=cache.get(id);    System.out.println("Read value: " + val);    tx.commit();  }   System.out.println("Read value after commit: " + cache.get(id));}  }
class C{  private void fingerScroll(final float yDiff){  float ratio=mDragRatio;  float yScrolled=yDiff * ratio;  float tmpTargetOffset=yScrolled + mTargetOffset;  if ((tmpTargetOffset > 0 && mTargetOffset < 0) || (tmpTargetOffset < 0 && mTargetOffset > 0)) {    yScrolled=-mTargetOffset;  }  if (mRefreshFinalDragOffset >= mRefreshTriggerOffset && tmpTargetOffset > mRefreshFinalDragOffset) {    yScrolled=mRefreshFinalDragOffset - mTargetOffset;  } else   if (mLoadMoreFinalDragOffset >= mLoadMoreTriggerOffset && -tmpTargetOffset > mLoadMoreFinalDragOffset) {    yScrolled=-mLoadMoreFinalDragOffset - mTargetOffset;  }  if (STATUS.isRefreshStatus(mStatus)) {    mRefreshCallback.onMove(mTargetOffset,false,false);  } else   if (STATUS.isLoadMoreStatus(mStatus)) {    mLoadMoreCallback.onMove(mTargetOffset,false,false);  }  updateScroll(yScrolled);}  }
class C{  public static void main(String[] args){  ServiceOption option=new ServiceOption();  CmdLineParser parser=new CmdLineParser(option);  if (args.length == 0) {    System.out.println("TaggingService [options...] [arguments..]");    parser.printUsage(System.out);    return;  }  new TaggingService(option).run();}  }
class C{  protected void drawZeroRangeBaseline(Graphics2D g2,Rectangle2D area){  if (!isRangeZeroBaselineVisible()) {    return;  }  CategoryItemRenderer r=getRenderer();  if (r instanceof AbstractCategoryItemRenderer) {    AbstractCategoryItemRenderer aci=(AbstractCategoryItemRenderer)r;    aci.drawRangeLine(g2,this,getRangeAxis(),area,0.0,this.rangeZeroBaselinePaint,this.rangeZeroBaselineStroke);  } else {    r.drawRangeGridline(g2,this,getRangeAxis(),area,0.0);  }}  }
class C{  @Override public void registerNewSession(String sessionId,Object principal){}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("[" + state + ",");  int i=0;  for (  Expression triggerExpr : triggers) {    if (i++ > 0) {      sb.append('|');    }    sb.append(triggerExpr);  }  sb.append(',');  return sb.append(nextState + "," + condition+ ",\""+ label+ "\"]").toString();}  }
class C{  public void enableFiltering(Approximator a){  mFilterData=true;}  }
class C{  private void readFile(IndexWriter indexWriter,File inputFile) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException {  InputStream in=new FileInputStream(inputFile);  byte[] tempInt=new byte[4];  int tmp, tmpFeature;  count=0;  byte[] temp=new byte[100 * 1024];  while ((tmp=in.read(tempInt,0,4)) > 0) {    Document d=new Document();    tmp=SerializationUtils.toInt(tempInt);    in.read(temp,0,tmp);    String filename=new String(temp,0,tmp);    d.add(new StringField(DocumentBuilder.FIELD_NAME_IDENTIFIER,filename,Field.Store.YES));    while (in.read(tempInt,0,1) > 0) {      if (tempInt[0] == -1)       break;      tmpFeature=tempInt[0];      GlobalFeature f=(GlobalFeature)Class.forName(Extractor.features[tmpFeature]).newInstance();      in.read(tempInt,0,4);      tmp=SerializationUtils.toInt(tempInt);      in.read(temp,0,tmp);      f.setByteArrayRepresentation(temp,0,tmp);      addToDocument(f,d,Extractor.featureFieldNames[tmpFeature]);    }    indexWriter.addDocument(d);    count++;    if (verbose) {      if (count % 100 == 0)       System.out.print('.');      if (count % 1000 == 0)       System.out.println(" " + count);    }  }  if (verbose)   System.out.println(" " + count);  in.close();}  }
class C{  private static DatabaseFieldConfig buildConfig(DatabaseField databaseField,String tableName,Field field) throws Exception {  InvocationHandler proxy=Proxy.getInvocationHandler(databaseField);  if (proxy.getClass() != annotationFactoryClazz) {    return null;  }  Object elementsObject=elementsField.get(proxy);  if (elementsObject == null) {    return null;  }  DatabaseFieldConfig config=new DatabaseFieldConfig(field.getName());  Object[] objs=(Object[])elementsObject;  for (int i=0; i < configFieldNums.length; i++) {    Object value=valueField.get(objs[i]);    if (value != null) {      assignConfigField(configFieldNums[i],config,field,value);    }  }  return config;}  }
class C{  public Object encode(Object obj) throws EncoderException {  if (!(obj instanceof String)) {    throw new EncoderException("DoubleMetaphone encode parameter is not of type String");  }  return doubleMetaphone((String)obj);}  }
class C{  public void readSignals(String string){  startSignals=new ArrayList<Integer>();  stopSignals=new ArrayList<Integer>();  try {    Scanner input=new Scanner(new BufferedReader(new FileReader(new File(string))));    try {      String[] listStart=input.nextLine().split(",");      if (listStart[0].equalsIgnoreCase("start")) {        for (int i=1; i < listStart.length; i++) {          startSignals.add(Integer.parseInt(listStart[i]));        }        if (startSignals.size() == 0) {          log.warn("No start signals were identified!");        }      } else {        log.error("The first line of the signal file does not start with 'Start'");        throw new RuntimeException("The signal file is in the wrong format!");      }      String[] listStop=input.nextLine().split(",");      if (listStop[0].equalsIgnoreCase("stop")) {        for (int i=1; i < listStop.length; i++) {          stopSignals.add(Integer.parseInt(listStop[i]));        }        if (stopSignals.size() == 0) {          log.warn("No stop signals were identified!");        }      } else {        log.error("The second line of the signal file does not start with 'Stop'");        throw new RuntimeException("The signal file is in the wrong format!");      }    }  finally {      input.close();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  @SuppressWarnings("unchecked") public static Set<Float> toSet(float[] array){  return toSet(DefaultTypeTransformation.primitiveArrayToList(array));}  }
class C{  public static Parser parser(String separator){  return new Parser(separator,null,null);}  }
class C{  private CEdgeDeleter(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean contains(final Object o){  return contains(((((Character)(o)).charValue())));}  }
class C{  public synchronized void addNetMapListener(NetMapListener l){  if (listeners == null) {    listeners=new java.util.Vector();  }  if (!listeners.contains(l)) {    listeners.addElement(l);  }}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.166 -0500",hash_original_method="FDD1437D28F7C23540C204D06460844B",hash_generated_method="ED7508CB6BB22ED3E257048449A4E56D") public int head(int articleNumber) throws IOException {  return sendCommand(NNTPCommand.HEAD,Integer.toString(articleNumber));}  }
class C{  public void saveAsEPS(File file) throws IOException, TranscoderException, ClassNotFoundException {  try {    Object t=Class.forName("org.apache.fop.render.ps.EPSTranscoder").newInstance();    transcode(file,(Transcoder)t);  } catch (  InstantiationException|IllegalAccessException e) {    throw new ClassNotFoundException("Could not instantiate EPS transcoder - is Apache FOP installed?",e);  }}  }
class C{  public boolean supportsProtocol(int protocolVersion){switch (protocolVersion) {case 10:    return true;case 11:  return serverVersion.isEqualOrAbove(2,1);case 12:return serverVersion.isEqualOrAbove(2,5);case 13:return serverVersion.isEqualOrAbove(3,0);default :return false;}}  }
class C{  boolean isBetterCandidate(int direction,Rect source,Rect rect1,Rect rect2){  if (!isCandidate(source,rect1,direction)) {    return false;  }  if (!isCandidate(source,rect2,direction)) {    return true;  }  if (beamBeats(direction,source,rect1,rect2)) {    return true;  }  if (beamBeats(direction,source,rect2,rect1)) {    return false;  }  return (getWeightedDistanceFor(majorAxisDistance(direction,source,rect1),minorAxisDistance(direction,source,rect1)) < getWeightedDistanceFor(majorAxisDistance(direction,source,rect2),minorAxisDistance(direction,source,rect2)));}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("frminimaltestdata.zip"),"frminimal.txt");}  }
class C{  public Feature(int label,int cp,Map fmap){  FeatureInit(label,cp);  strId2IdxAdd(fmap);}  }
class C{  public boolean removeEdges(Node nodeA,Node nodeB){  boolean removed=false;  for (  Edge edge : getEdges()) {    if ((edge.getNode1() == nodeA) && (edge.getNode2() == nodeB)) {      removed=removed || removeEdge(edge);    }  }  return true;}  }
class C{  public static void addStringValues(final FontData fontData,final Map<String,String> fontDetails){  final FontFile2 currentFontFile=new FontFile2(fontData);  final int fontCount=currentFontFile.getFontCount();  for (int i=0; i < fontCount; i++) {    currentFontFile.setSelectedFontIndex(i);    final Name currentName=new Name(currentFontFile);    final Map<Integer,String> stringValues=currentName.getStrings();    if (stringValues != null) {      for (      final Integer o : stringValues.keySet()) {        final Integer currentKey=o;        final int keyInt=currentKey;        if (keyInt < Name.stringNames.length) {          fontDetails.put(Name.stringNames[currentKey],stringValues.get(currentKey));        }      }    }  }  if (fontData != null) {    fontData.close();  }}  }
class C{  public GeneratorStatic(String name,List<double[]> points){  super();  this.name=name;  this.points=points;}  }
class C{  private void inflateRootView(){  ViewGroup contentView=(ViewGroup)findViewById(android.R.id.content);  contentView.removeAllViews();  LayoutInflater layoutInflater=LayoutInflater.from(getContext());  rootView=(DraggableView)layoutInflater.inflate(R.layout.bottom_sheet,contentView,false);  rootView.setCallback(this);  contentView.addView(rootView,createRootViewLayoutParams());}  }
class C{  protected Shape createBorder(final SegmentType segmentType,final int x,final int y,final int w,final int h){switch (segmentType) {case FIRST:    return shapeGenerator.createRoundRectangle(x,y,w + 2,h,CornerSize.BORDER,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.SQUARE,CornerStyle.SQUARE);case MIDDLE:  return shapeGenerator.createRectangle(x - 2,y,w + 4,h);case LAST:return shapeGenerator.createRoundRectangle(x - 2,y,w + 2,h,CornerSize.BORDER,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.ROUNDED,CornerStyle.ROUNDED);default :return shapeGenerator.createRoundRectangle(x,y,w,h,CornerSize.BORDER);}}  }
class C{  public void showPreferences(){  if (preferencesMap != null) {    view.show();    return;  }  preferencesMap=new HashMap<>();  for (  PreferencePagePresenter preference : preferences) {    Set<PreferencePagePresenter> prefsList=preferencesMap.get(preference.getCategory());    if (prefsList == null) {      prefsList=new HashSet<PreferencePagePresenter>();      preferencesMap.put(preference.getCategory(),prefsList);    }    prefsList.add(preference);  }  view.setPreferences(preferencesMap);  view.show();  view.enableSaveButton(false);  view.selectPreference(preferencesMap.entrySet().iterator().next().getValue().iterator().next());}  }
class C{  public static void wtf(String tag,String msg,Throwable tr){  println(ASSERT,tag,msg,tr);}  }
class C{  public void open(String projectXml){  open(new StringReader(projectXml));}  }
class C{  public boolean isInitialization(){  return initialization;}  }
class C{  private void removeRefactoringDescriptors(final RefactoringDescriptorProxy[] proxies,final IPath path,final IProgressMonitor monitor,final String task) throws CoreException {  try {    monitor.beginTask(task,5);    final IFileStore folder=fHistoryStore.getFileStore(path);    final IFileStore index=folder.getChild(RefactoringHistoryService.NAME_INDEX_FILE);    if (index.fetchInfo(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)).exists()) {      final Set resultingProxies=new HashSet(64);      readRefactoringDescriptorProxies(index,null,resultingProxies,0,Long.MAX_VALUE,new SubProgressMonitor(monitor,1),task);      if (resultingProxies.size() == proxies.length)       removeIndexTree(folder,new SubProgressMonitor(monitor,1),task); else {        final IFileStore history=folder.getChild(RefactoringHistoryService.NAME_HISTORY_FILE);        if (history.fetchInfo(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)).exists()) {          InputStream input=null;          Document document=null;          try {            input=new BufferedInputStream(history.openInputStream(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)));            document=getCachedDocument(path,input);          } catch (          ParserConfigurationException exception) {            throw createCoreException(exception);          }catch (          IOException exception) {            throw createCoreException(exception);          }catch (          SAXException exception) {            throw createCoreException(exception);          } finally {            if (input != null) {              try {                input.close();              } catch (              IOException exception) {              }            }          }          final Set removedNodes=new HashSet(proxies.length);          final NodeList list=document.getElementsByTagName(IRefactoringSerializationConstants.ELEMENT_REFACTORING);          final int length=list.getLength();          for (int offset=0; offset < length; offset++) {            final Node node=list.item(offset);            final NamedNodeMap attributes=node.getAttributes();            if (attributes != null) {              final Node item=attributes.getNamedItem(IRefactoringSerializationConstants.ATTRIBUTE_STAMP);              if (item != null) {                final String value=item.getNodeValue();                if (value != null) {                  for (int current=0; current < proxies.length; current++) {                    final RefactoringDescriptorProxy proxy=proxies[current];                    final long stamp=proxy.getTimeStamp();                    if (value.equals(String.valueOf(stamp))) {                      resultingProxies.remove(new DefaultRefactoringDescriptorProxy(proxy.getDescription(),proxy.getProject(),stamp));                      removedNodes.add(node);                    }                  }                }              }            }          }          for (final Iterator iterator=removedNodes.iterator(); iterator.hasNext(); ) {            final Node node=(Node)iterator.next();            node.getParentNode().removeChild(node);          }          try {            writeIndexEntry(index,(RefactoringDescriptorProxy[])resultingProxies.toArray(new RefactoringDescriptorProxy[resultingProxies.size()]),EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL),task);            writeHistoryEntry(history,document,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL),task);          } catch (          IOException exception) {            throw createCoreException(exception);          }        }      }    }  }  finally {    monitor.done();  }}  }
class C{  public void deleteMap(String mapName){  MAP_STORE.deleteMap(mapName);  MAP_STORE.store();}  }
class C{  protected String defaultAssociatorString(){  return Apriori.class.getName();}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof NegatedCondition) {    return ((NegatedCondition)o).getInitCondition().equals(initCondition);  }  return false;}  }
class C{  public KMLListStyle(String namespaceURI){  super(namespaceURI);}  }
class C{  public static List<ACLEntry> convertToACLEntries(StringSetMap acls){  List<ACLEntry> assignments=new ArrayList<ACLEntry>();  if (CollectionUtils.isEmpty(acls)) {    return assignments;  }  for (  Map.Entry<String,AbstractChangeTrackingSet<String>> ace : acls.entrySet()) {    PermissionsKey rowKey=new PermissionsKey();    rowKey.parseFromString(ace.getKey());    ACLEntry entry=new ACLEntry();    if (rowKey.getType().equals(PermissionsKey.Type.GROUP)) {      entry.setGroup(rowKey.getValue());    } else     if (rowKey.getType().equals(PermissionsKey.Type.SID)) {      entry.setSubjectId(rowKey.getValue());    } else     if (rowKey.getType().equals(PermissionsKey.Type.TENANT)) {      entry.setTenant(rowKey.getValue());    }    for (    String priv : ace.getValue()) {      if (priv.equalsIgnoreCase(ACL.OWN.toString())) {        continue;      }      entry.getAces().add(priv);    }    if (!entry.getAces().isEmpty()) {      assignments.add(entry);    }  }  return assignments;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    String data=transformer.transformToString(this);    transformer.getResultTreeHandler().comment(data);  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  protected void firePopupMenuWillBecomeInvisible(){  Object[] listeners=listenerList.getListenerList();  PopupMenuEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == PopupMenuListener.class) {      if (e == null)       e=new PopupMenuEvent(this);      ((PopupMenuListener)listeners[i + 1]).popupMenuWillBecomeInvisible(e);    }  }}  }
class C{  public int size(){  int a;  for (a=arrays.length() - 1; a >= 0; a--) {    AtomicLongArray array=arrays.get(a);    if (array != null)     break;  }  return ((1 << a + 1) - 1) * BITS_PER_WORD;}  }
class C{  public TimeSeriesAttributes(ChartGenerator generator,XYSeries series,int index,SeriesChangeListener stoppable){  super(generator,"" + series.getKey(),index,stoppable);  this.series=series;}  }
class C{  public Builder includeRetweets(Boolean includeRetweets){  this.includeRetweets=includeRetweets;  return this;}  }
class C{  public GeoRssWhere(Double lowerLat,Double lowerLon,Double upperLat,Double upperLon){  this(new GmlEnvelope(lowerLat,lowerLon,upperLat,upperLon));}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  public void testMapper() throws Exception {  KerberosUserNameMapper mapper=create(null,null);  assertEquals(IgfsUtils.fixUserName(null),mapper.map(null));  assertEquals("test",mapper.map("test"));}  }
class C{  private int h(int v){  return -1;}  }
class C{  @Nullable public CodenvyLicense load() throws LicenseException {  String licenseText;  try {    licenseText=new String(Files.readAllBytes(licenseFile),UTF_8);  } catch (  NoSuchFileException e) {    throw new LicenseNotFoundException("Codenvy license not found");  }catch (  IOException e) {    throw new LicenseException(e.getMessage(),e);  }  if (isNullOrEmpty(licenseText)) {    throw new LicenseNotFoundException("Codenvy license not found");  }  return licenseFactory.create(licenseText);}  }
class C{  public boolean match(NormalAnnotation node,Object other){  if (!(other instanceof NormalAnnotation)) {    return false;  }  NormalAnnotation o=(NormalAnnotation)other;  return (safeSubtreeMatch(node.getTypeName(),o.getTypeName()) && safeSubtreeListMatch(node.values(),o.values()));}  }
class C{  static String isDotSuper(ASTree target){  if (target instanceof Expr) {    Expr e=(Expr)target;    if (e.getOperator() == '.') {      ASTree right=e.oprand2();      if (right instanceof Keyword && ((Keyword)right).get() == SUPER)       return ((Symbol)e.oprand1()).get();    }  }  return null;}  }
class C{  public static boolean isSurpriseMember(DistributedSystem sys,DistributedMember mbr){  return getMembershipManager(sys).isSurpriseMember(mbr);}  }
class C{  public void pushStack(int method){  stack[stackPointer]=method;  stackPointer++;}  }
class C{  public static boolean isEnum(int mod){  return (mod & ENUM) != 0;}  }
class C{  public String toString(){  try {    Iterator keys=keys();    StringBuffer sb=new StringBuffer("{");    while (keys.hasNext()) {      if (sb.length() > 1) {        sb.append(',');      }      Object o=keys.next();      sb.append(quote(o.toString()));      sb.append(':');      sb.append(valueToString(this.get(o)));    }    sb.append('}');    return sb.toString();  } catch (  Exception e) {    return null;  }}  }
class C{  public static File createDir(String parent,String directoryName){  File createdFile=new File(parent,directoryName);  if (!createdFile.exists()) {    createdFile.mkdir();  }  return createdFile;}  }
class C{  public void clear(){  paintMap.clear();  nextPaintIndex=0;}  }
class C{  public void mouseDragged(MouseEvent e){}  }
class C{  public static void generateExtensionManager(File rootFolder) throws IOException {  File extManager=new File(rootFolder,IDE_INJECTOR_PATH);  StringBuilder builder=new StringBuilder();  builder.append("package org.eclipse.che.ide.client.inject;\n\n");  builder.append("import org.eclipse.che.ide.client.BootstrapController;\n");  builder.append("import com.google.gwt.inject.client.GinModules;\n");  builder.append("import com.google.gwt.inject.client.Ginjector;\n");  builder.append("\n");  builder.append("/**\n");  builder.append(" * THIS CLASS WILL BE OVERRIDDEN BY MAVEN BUILD. DON'T EDIT CLASS, IT WILL HAVE NO EFFECT.\n");  builder.append(" * \n");  builder.append(" * Interface for GIN Injector, that provides access to the top level\n");  builder.append(" * application components. Implementation of Injector is generated\n");  builder.append(" * on compile time.\n");  builder.append(" */\n");  builder.append("@GinModules({\n");  generateListOfModules(builder);  builder.append("})\n");  builder.append("public interface IDEInjector extends Ginjector\n");  builder.append("{\n");  builder.append("\n");  builder.append(GeneratorUtils.TAB).append("/**\n");  builder.append(GeneratorUtils.TAB).append(" * @return the instance of BootstrapController\n");  builder.append(GeneratorUtils.TAB).append(" */\n");  builder.append(GeneratorUtils.TAB).append("BootstrapController getBootstrapController();\n");  builder.append("\n");  builder.append("}\n");  FileUtils.writeStringToFile(extManager,builder.toString());}  }
class C{  private static void toggleTimeOneButtonClicked(){  timePicker1.togglePopup();  String message="The timePicker1 menu popup is ";  message+=(timePicker1.isPopupOpen()) ? "open!" : "closed!";  panel.messageTextArea.setText(message);}  }
class C{  private void removeFromPeers(CacheDataPage cacheDataPage) throws IOException {  DataPageMain dpMain=cacheDataPage._main;  Integer prevPageNumber=dpMain._prevPageNumber;  Integer nextPageNumber=dpMain._nextPageNumber;  DataPageMain prevMain=dpMain.getPrevPage();  if (prevMain != null) {    setModified(new CacheDataPage(prevMain));    prevMain._nextPageNumber=nextPageNumber;  }  DataPageMain nextMain=dpMain.getNextPage();  if (nextMain != null) {    setModified(new CacheDataPage(nextMain));    nextMain._prevPageNumber=prevPageNumber;  }}  }
class C{  public DividerBuilder erase(EnumSet<Direction> directions){  return with(Divider.ERASER,directions);}  }
class C{  public static HierarchyListener remove(HierarchyListener l,HierarchyListener oldl){  return (HierarchyListener)removeInternal(l,oldl);}  }
class C{  private Object readResolve(){  return Seconds.seconds(getValue());}  }
class C{  public CDefaultTransferHandler(final DNDTree tree,final int action,final List<IDropHandler> handlers){  super(tree,action,true);  Preconditions.checkNotNull(handlers,"IE01930: Handlers argument can not be null");  for (  final IDropHandler handler : handlers) {    Preconditions.checkNotNull(handler,"IE01931: Handlers list contains a null-element");  }  m_handlers=new ArrayList<IDropHandler>(handlers);}  }
class C{  public void initOptions(){  CHECK_BOX.setSelected(UISettings.AUTOCOMPLETE_ENABLED.getValue());}  }
class C{  protected void reset(){}  }
class C{  public Executor withAlgorithm(String algorithmName){  this.algorithmName=algorithmName;  return this;}  }
class C{  public int position(){  return position;}  }
class C{  @Override public void generatePartition(Instances data) throws Exception {  if (m_Classifier instanceof PartitionGenerator)   buildClassifier(data); else   throw new Exception("Classifier: " + getClassifierSpec() + " cannot generate a partition");}  }
class C{  public static void unregisterMBean(String name) throws Exception {  ObjectName mbeanObjectName=MBEANS.remove(name);  if (mbeanObjectName != null) {    MBeanServer mbeanServer=ManagementFactory.getPlatformMBeanServer();    mbeanServer.unregisterMBean(mbeanObjectName);  }}  }
class C{  private int readFromIS(final int number,final boolean readWord,int currentPointer,final int[] program){  for (int i=0; i < number; i++) {    final int data;    currentPointer++;    if (!readWord) {      data=program[currentPointer];    } else {      final int d1=program[currentPointer];      currentPointer++;      final int d2=program[currentPointer];      data=getIntFrom2Uint8(d1,d2);    }    stack.push(data);  }  return currentPointer;}  }
class C{  public URL read(String target) throws Exception {  return new URL(target);}  }
class C{  public static boolean contains(double[] doubleArray,double value){  for (  double each : doubleArray) {    if (Double.doubleToLongBits(each) == Double.doubleToLongBits(value)) {      return true;    }  }  return false;}  }
class C{  public RoutePoint(String sidc){  super(sidc);}  }
class C{  public synchronized void remove() throws CacheException {  if (this.peekedIds.isEmpty()) {    return;  }  Long key=this.peekedIds.remove();  try {    updateHeadKey(key.longValue());    removeIndex(key);    this.region.localDestroy(key,WAN_QUEUE_TOKEN);    this.stats.decQueueSize();  } catch (  EntryNotFoundException ok) {    if (logger.isDebugEnabled()) {      logger.debug("{}: Did not destroy entry at {} it was not there. It should have been removed by conflation.",this,key);    }  }  boolean wasEmpty=this.lastDispatchedKey == this.lastDestroyedKey;  this.lastDispatchedKey=key;  if (wasEmpty) {    this.notify();  }  if (logger.isDebugEnabled()) {    logger.debug("{}: Destroyed entry at key {} setting the lastDispatched Key to {}. The last destroyed entry was {}",this,key,this.lastDispatchedKey,this.lastDestroyedKey);  }}  }
class C{  public void beginTransaction() throws IOException {  if (!isOpen)   throw new IllegalStateException("database must be open before beginning a new transaction");  if (inTransaction) {    throw new IllegalStateException("only one transaction can exist at a time");  }  inTransaction=true;  transactionSuccessful=false;  for (  ITimmyTable tt : tables) {    tt.beginTransaction();  }}  }
class C{  public Builder addFormDataPart(String name,String value){  return addPart(Part.createFormData(name,value));}  }
class C{  public AtomicInteger(int initialValue){  value=initialValue;}  }
class C{  private static LSException createLSException(short code,Throwable cause){  LSException lse=new LSException(code,cause != null ? cause.getMessage() : null);  if (cause != null && ThrowableMethods.fgThrowableMethodsAvailable) {    try {      ThrowableMethods.fgThrowableInitCauseMethod.invoke(lse,new Object[]{cause});    } catch (    Exception e) {    }  }  return lse;}  }
class C{  static long validateLong(Map<String,Object> map,String key,String errorPrefix) throws IOException {  Object value=map.get(key);  if (value == null) {    throw new IOException(String.format(VALUE_NOT_FOUND_MESSAGE,errorPrefix,key));  }  if (value instanceof BigDecimal) {    BigDecimal bigDecimalValue=(BigDecimal)value;    return bigDecimalValue.longValueExact();  }  if (!(value instanceof Long)) {    throw new IOException(String.format(VALUE_WRONG_TYPE_MESSAGE,errorPrefix,"long",key));  }  return (Long)value;}  }
class C{  private void cmd_loadFormat(){  previewPanel.removeAll();  String formatName=pickFormat.getSelectedItem().toString();  if (formatName.equals(s_none))   return;  m_format=ImpFormat.load(formatName);  if (m_format == null) {    ADialog.error(m_WindowNo,this,"FileImportNoFormat",formatName);    return;  }  int size=m_format.getRowCount();  m_labels=new JLabel[size];  m_fields=new JTextField[size];  for (int i=0; i < size; i++) {    ImpFormatRow row=m_format.getRow(i);    m_labels[i]=new JLabel(row.getColumnName());    previewPanel.add(m_labels[i],new GridBagConstraints(i,0,1,1,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(2,2,2,2),0,0));    int length=row.getEndNo() - row.getStartNo();    if (length <= 5)     length=5; else     if (length > 20)     length=20;    m_fields[i]=new JTextField(length);    previewPanel.add(m_fields[i],new GridBagConstraints(i,1,1,1,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(2,2,2,2),0,0));  }  m_record=-1;  record.setText("------");  previewPanel.invalidate();  previewPanel.repaint();}  }
class C{  private void stripContentBorder(Object c){  if (c instanceof JComponent) {    JComponent contentComp=(JComponent)c;    Border contentBorder=contentComp.getBorder();    if (contentBorder == null || contentBorder instanceof UIResource) {      contentComp.setBorder(handyEmptyBorder);    }  }}  }
class C{  @Override public int fillChunkData(byte[] data,int offset,int index,KeyStructureInfo keyStructureInfo){  if (chunkAttributes.getInvertedIndexes() != null) {    index=chunkAttributes.getInvertedIndexesReverse()[index];  }  System.arraycopy(dataChunk,index * chunkAttributes.getColumnValueSize(),data,offset,chunkAttributes.getColumnValueSize());  return chunkAttributes.getColumnValueSize();}  }
class C{  SocketCreator(final SSLConfig sslConfig){  this.sslConfig=sslConfig;  initialize();}  }
class C{  public final long sumDocFreq(){  return sumDocFreq;}  }
class C{  public Textifier visitAnnotation(final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  text.add(visible ? ")\n" : ") // invisible\n");  return t;}  }
class C{  public LimitExceededException(String explanation){  super(explanation);}  }
class C{  public EmptyPlot(DiagnosticTool frame){  super(frame,null);  setBackground(Color.WHITE);}  }
class C{  public static Stream<Transaction> streamSelfAndAllTransactions(final Transaction transaction){  final List<Transaction> allTransactions=new ArrayList<>();  allTransactions.add(transaction);  addTransactionsRecursive(allTransactions,transaction.getChildTransactions());  return allTransactions.stream();}  }
class C{  private static void replaceAction(InputMap map,char c){  KeyStroke ctrl=KeyStroke.getKeyStroke("control pressed " + c);  KeyStroke meta=KeyStroke.getKeyStroke("meta pressed " + c);  if (ctrl == null || meta == null)   return;  Object action=map.get(ctrl);  if (action != null) {    map.remove(ctrl);    map.put(meta,action);  }}  }
class C{  private void sendNotificationClickedIntent(Context context,long[] ids,int[] statuses){  Intent appIntent=new Intent(DownloadManager.ACTION_NOTIFICATION_CLICKED);  appIntent.setPackage(context.getPackageName());  appIntent.putExtra(DownloadManager.EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS,ids);  appIntent.putExtra(DownloadManager.EXTRA_NOTIFICATION_CLICK_DOWNLOAD_STATUSES,statuses);  context.sendBroadcast(appIntent);}  }
class C{  static void unregister(Object value){  if (value != null) {    Map m=getRegistry();    if (m != null) {      m.remove(value);      if (m.isEmpty()) {        REGISTRY.set(null);      }    }  }}  }
class C{  public Set<T> unmarshalSet(HierarchicalStreamReader reader,UnmarshallingContext context){  try {    Set<T> result=Sets.newHashSet();    unmarshalCollection(result,reader,context);    return result;  } catch (  RuntimeException err) {    err.printStackTrace();    throw err;  }}  }
class C{  public void testMethodAnnotationInMap() throws Exception {  ObjectMapper mapper=new ObjectMapper();  SimpleModule module=new SimpleModule("test",Version.unknownVersion());  module.addSerializer(String.class,new AnnotatedContextualSerializer());  mapper.registerModule(module);  ContextualMapBean map=new ContextualMapBean();  map.beans.put("first","In Map");  assertEquals("{\"beans\":{\"first\":\"map->In Map\"}}",mapper.writeValueAsString(map));}  }
class C{  public static boolean extractPackage(String packageName,String targetFolder,boolean isVerbose,boolean isInheritIO){  String cmd=String.format("tar -xvf %s",packageName);  int ret=runSyncProcess(isVerbose,isInheritIO,cmd,new StringBuilder(),new StringBuilder(),new File(targetFolder));  return ret == 0;}  }
class C{  @Override public void write(DataOutput out) throws IOException {  out.writeInt(this.initialCapacity);  this.value.write(out);  this.meta.write(out);}  }
class C{  private PrintElement createImageElement(MPrintFormatItem item){  Object obj=m_data.getNode(new Integer(item.getAD_Column_ID()));  if (obj == null)   return null; else   if (obj instanceof PrintDataElement)   ; else {    log.log(Level.SEVERE,"Element not PrintDataElement " + obj.getClass());    return null;  }  PrintDataElement data=(PrintDataElement)obj;  if (data.isNull() && item.isSuppressNull())   return null;  String url=data.getValueDisplay(m_format.getLanguage());  if ((url == null || url.length() == 0)) {    if (item.isSuppressNull())     return null; else     return null;  }  ImageElement element=null;  if (data.getDisplayType() == DisplayType.Image) {    element=ImageElement.get(data,url);  } else {    element=ImageElement.get(url);  }  return element;}  }
class C{  @Deprecated public void removeBucketsBefore(long cutoff){  int i;  for (i=0; i < bucketCount; i++) {    final long curStart=bucketStart[i];    final long curEnd=curStart + bucketDuration;    if (curEnd > cutoff)     break;  }  if (i > 0) {    final int length=bucketStart.length;    bucketStart=Arrays.copyOfRange(bucketStart,i,length);    if (activeTime != null)     activeTime=Arrays.copyOfRange(activeTime,i,length);    if (rxBytes != null)     rxBytes=Arrays.copyOfRange(rxBytes,i,length);    if (rxPackets != null)     rxPackets=Arrays.copyOfRange(rxPackets,i,length);    if (txBytes != null)     txBytes=Arrays.copyOfRange(txBytes,i,length);    if (txPackets != null)     txPackets=Arrays.copyOfRange(txPackets,i,length);    if (operations != null)     operations=Arrays.copyOfRange(operations,i,length);    bucketCount-=i;  }}  }
class C{  public static int min(final int a,final int b){  return (a <= b) ? a : b;}  }
class C{  boolean casValue(Object cmp,Object val){  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);}  }
class C{  public static Integer createServerCache() throws Exception {  new HAEventIdPropagationDUnitTest().createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  CacheListener clientListener=new HAEventIdPropagationListenerForServer();  factory.setCacheListener(clientListener);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  server=(CacheServerImpl)cache.addCacheServer();  assertNotNull(server);  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(true);  server.start();  return new Integer(server.getPort());}  }
class C{  public void addObserver(AppMenuObserver observer){  mObservers.add(observer);}  }
class C{  boolean alwaysOnTop(){  return false;}  }
class C{  private double superMatch(IHex org,IHex com){  if ((com.getLevel() != ITerrain.WILDCARD) && (org.getLevel() != com.getLevel())) {    return 0;  }  if ((com.getTheme() != null) && !com.getTheme().equalsIgnoreCase(org.getTheme())) {    return 0.0;  }  if (org.terrainsPresent() < com.terrainsPresent())   return 0.0;  int cTerrainTypes[]=com.getTerrainTypes();  for (int i=0; i < cTerrainTypes.length; i++) {    int cTerrType=cTerrainTypes[i];    ITerrain cTerr=com.getTerrain(cTerrType);    ITerrain oTerr=org.getTerrain(cTerrType);    if (cTerr == null) {      continue;    } else     if ((oTerr == null) || ((cTerr.getLevel() != ITerrain.WILDCARD) && (oTerr.getLevel() != cTerr.getLevel())) || (cTerr.hasExitsSpecified() && (oTerr.getExits() != cTerr.getExits()))) {      return 0;    }  }  return 1.0;}  }
class C{  public TStream<JsonObject> receive(){  return receiveText(JsonFunctions.fromString());}  }
class C{  public RandomLocationTransformer(final Dimension d,long seed){  this.d=d;  this.random=new Random(seed);}  }
class C{  public boolean add(AccessibleState state){  if (states == null) {    states=new Vector();  }  if (!states.contains(state)) {    states.addElement(state);    return true;  } else {    return false;  }}  }
class C{  public boolean containsValue(Object value){  if (value == null) {    return containsNullValue();  }  Entry[] tab=getTable();  for (int i=tab.length; i-- > 0; )   for (Entry e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  public void tryObtain() throws IOException {  if (fileLock != null && fileLock.isValid()) {    return;  }  fileLock=fileToLock.tryLock();}  }
class C{  public CharSetMap(){  String path;  try {    path=System.getProperty("user.home");    if (path != null) {      path=path + File.separator + CHARSET_RESOURCE;      mappers[MAP_HOME]=loadPath(path);    }  } catch (  Exception x) {  }  try {    path=System.getProperty("java.home") + File.separator + "lib"+ File.separator+ CHARSET_RESOURCE;    mappers[MAP_SYS]=loadPath(path);  } catch (  Exception x) {  }  mappers[MAP_JAR]=loadResource("/META-INF/" + CHARSET_RESOURCE);  mappers[MAP_COM]=commonMapper;  mappers[MAP_CACHE]=new Hashtable<String,String>();}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  public ZyGraphOrthogonalSettings(final GraphSettingsConfigItem type){  Preconditions.checkNotNull(type,"IE02026: Type argument can't be null");  m_type=type;}  }
class C{  public boolean exists(final String followerId,final String followingId) throws RepositoryException {  return null != getByFollowerIdAndFollowingId(followerId,followingId);}  }
class C{  @Post public String store(String fmJson){  IFirewallService firewall=(IFirewallService)getContext().getAttributes().get(IFirewallService.class.getCanonicalName());  FirewallRule rule=jsonToFirewallRule(fmJson);  if (rule == null) {    return "{\"status\" : \"Error! Could not parse firewall rule, see log for details.\"}";  }  String status=null;  if (checkRuleExists(rule,firewall.getRules())) {    status="Error! A similar firewall rule already exists.";    log.error(status);    return ("{\"status\" : \"" + status + "\"}");  } else {    firewall.addRule(rule);    status="Rule added";    return ("{\"status\" : \"" + status + "\", \"rule-id\" : \""+ Integer.toString(rule.ruleid)+ "\"}");  }}  }
class C{  public WriteBuffer putInt(int x){  ensureCapacity(4).putInt(x);  return this;}  }
class C{  public static boolean equals(final Object[] a,final Object[] b){  if (a == b) {    return true;  } else   if (a.length != b.length) {    return false;  }  for (int i=0; i < a.length; i++) {    final Object x=a[i];    final Object y=b[i];    if (x == null) {      if (y != null) {        return false;      }    } else {      if (!x.equals(y)) {        return false;      }    }  }  return true;}  }
class C{  private static Element createRelationTypeOptionNode(RelationshipType relationshipType,Element controlNode,boolean isA){  Element itemNode=controlNode.createElement(XformBuilder.NAMESPACE_XFORMS,null);  itemNode.setName(XformBuilder.NODE_ITEM);  Element node=itemNode.createElement(XformBuilder.NAMESPACE_XFORMS,null);  node.setName(XformBuilder.NODE_LABEL);  node.addChild(Element.TEXT,"is " + ((isA) ? relationshipType.getaIsToB() : relationshipType.getbIsToA()) + " ["+ relationshipType.getRelationshipTypeId()+ "]");  itemNode.addChild(Element.ELEMENT,node);  node=itemNode.createElement(XformBuilder.NAMESPACE_XFORMS,null);  node.setName(XformBuilder.NODE_VALUE);  node.addChild(Element.TEXT,relationshipType.getRelationshipTypeId() + ((isA) ? "A" : "B"));  itemNode.addChild(Element.ELEMENT,node);  return itemNode;}  }
class C{  private static String createLibExtension(){  OSType osType=calculateOS();switch (osType) {case APPLE:    return "jnilib";case LINUX:  return "so";case SUN:return "so";case WINDOWS:return "dll";}return "";}  }
class C{  public void updateContext(Context newContext){  context=newContext;}  }
class C{  public void undiscloseAllLogEntries(){  List<LogEntry<T>> undisclosedLogEntries;synchronized (instanceLock) {    LogEntry<T> logEntry=getRootLogEntry();    undisclosedLogEntries=setUndisclosed(logEntry);  }  fireEntriesRemoved(undisclosedLogEntries);}  }
class C{  public boolean removeFacetQuery(String q){  boolean b=this.remove(FacetParams.FACET_QUERY,q);  if (this.get(FacetParams.FACET_FIELD) == null && this.get(FacetParams.FACET_QUERY) == null) {    this.setFacet(false);  }  return b;}  }
class C{  private void forceInternalError(){  throw new UnknownError("gotcha");}  }
class C{  protected IgniteConfiguration gridConfiguration() throws Exception {  IgniteConfiguration cfg=getConfiguration(getTestGridName());  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(IP_FINDER);  cfg.setDiscoverySpi(discoSpi);  CacheConfiguration cc=defaultCacheConfiguration();  cc.setName("partitioned");  cc.setCacheMode(CacheMode.PARTITIONED);  cc.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  cc.setBackups(0);  cc.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCfg=defaultCacheConfiguration();  metaCfg.setName("replicated");  metaCfg.setCacheMode(CacheMode.REPLICATED);  metaCfg.setAtomicityMode(TRANSACTIONAL);  cfg.setCacheConfiguration(metaCfg,cc);  return cfg;}  }
class C{  public SubInlineMenuButtonBuilder<T> menuButton(){  return new SubInlineMenuButtonBuilder<>(this,buttons().size());}  }
class C{  public static boolean isBoundsEnabled(){  return boundsEnabled;}  }
class C{  protected synchronized void sendChunks(ByteBuffer... chunks){  startChunkSend(chunks);  for (  ByteBuffer chunk : chunks)   endChunkSend(chunk);}  }
class C{  public void forceRewriteExif(String filename) throws FileNotFoundException, IOException {  forceRewriteExif(filename,getAllTags());}  }
class C{  public static boolean isWallet(InputStream is){  try {    final CodedInputStream cis=CodedInputStream.newInstance(is);    final int tag=cis.readTag();    final int field=WireFormat.getTagFieldNumber(tag);    if (field != 1)     return false;    final String network=cis.readString();    return NetworkParameters.fromID(network) != null;  } catch (  IOException x) {    return false;  }}  }
class C{  public String rootID(){  if (this.rootID == null) {switch (this.entryKind) {case IClasspathEntry.CPE_LIBRARY:      this.rootID="[LIB]" + this.path;    break;case IClasspathEntry.CPE_PROJECT:  this.rootID="[PRJ]" + this.path;break;case IClasspathEntry.CPE_SOURCE:this.rootID="[SRC]" + this.path;break;case IClasspathEntry.CPE_VARIABLE:this.rootID="[VAR]" + this.path;break;case IClasspathEntry.CPE_CONTAINER:this.rootID="[CON]" + this.path;break;default :this.rootID="";break;}}return this.rootID;}  }
class C{  private void removeSubnetsWithAvailableIpsLessThan(List<Subnet> subnets,int availableIps){  Iterator<Subnet> iterator=subnets.iterator();  while (iterator.hasNext()) {    Subnet subnet=iterator.next();    if (subnet.getAvailableIpAddressCount() < availableIps) {      iterator.remove();    }  }}  }
class C{  @NamespacePermission(fields="#request?.namespace",permissions=NamespacePermissionEnum.EXECUTE) @Override @Transactional(propagation=Propagation.REQUIRES_NEW) public Object addStepToCluster(Object request) throws Exception {  return addStepToClusterImpl(request);}  }
class C{  public static File dumpStackTraces(boolean clearTraces,ArrayList<Integer> firstPids,ProcessStats processStats,SparseArray<Boolean> lastPids,String[] nativeProcs){  String tracesPath=SystemProperties.get("dalvik.vm.stack-trace-file",null);  if (tracesPath == null || tracesPath.length() == 0) {    return null;  }  File tracesFile=new File(tracesPath);  try {    File tracesDir=tracesFile.getParentFile();    if (!tracesDir.exists()) {      tracesFile.mkdirs();      if (!SELinux.restorecon(tracesDir)) {        return null;      }    }    FileUtils.setPermissions(tracesDir.getPath(),0775,-1,-1);    if (clearTraces && tracesFile.exists())     tracesFile.delete();    tracesFile.createNewFile();    FileUtils.setPermissions(tracesFile.getPath(),0666,-1,-1);  } catch (  IOException e) {    Slog.w(TAG,"Unable to prepare ANR traces file: " + tracesPath,e);    return null;  }  dumpStackTraces(tracesPath,firstPids,processStats,lastPids,nativeProcs);  return tracesFile;}  }
class C{  public CToolbarPanel(final JFrame parent,final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  Preconditions.checkNotNull(parent,"IE01523: Parent argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01522: Debug perspective model argument can not be null");  m_parent=parent;  final JPanel toolbarPanel=new JPanel(new BorderLayout());  toolbarPanel.setBorder(new EmptyBorder(1,1,1,1));  m_threadPanel=new CThreadPanel(debugPerspectiveModel);  final CDebuggerToolbar toolbar=new CDebuggerToolbar(debugPerspectiveModel);  toolbarPanel.add(toolbar,BorderLayout.WEST);  toolbarPanel.add(m_threadPanel,BorderLayout.CENTER);  add(toolbarPanel,BorderLayout.SOUTH);  m_synchronizer=new CToolbarPanelSynchronizer(toolbar,m_threadPanel,debugPerspectiveModel);  m_synchronizer.addListener(m_internalSynchronizerListener);}  }
class C{  public static <T>void reverseForEach(List<T> list,Procedure<? super T> procedure){  if (!list.isEmpty()) {    ListIterate.forEach(list,list.size() - 1,0,procedure);  }}  }
class C{  @Override public void declareOutputFields(OutputFieldsDeclarer declarer){  declarer.declare(new Fields("databaseName","txEvent"));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static public void assertEquals(char expected,char actual){  assertEquals(null,expected,actual);}  }
class C{  public static Props create(ActorCreator creator){  return new Props(null,creator,null);}  }
class C{  private static String superMethodName(Method method){  String returnType=method.getReturnType().getName();  return "super$" + method.getName() + "$"+ returnType.replace('.','_').replace('[','_').replace(';','_');}  }
class C{  public boolean isError(){  return (this.toString().indexOf("!E") >= 0);}  }
class C{  private static void highlightChangedRegister(final int counter,final RegisterValue registerValue,final RegisterInformationInternal[] oldRegisterInformation,final RegisterInformationInternal[] newRegisterInformation){  if (counter < oldRegisterInformation.length) {    if (!oldRegisterInformation[counter].getValue().equals(registerValue.getValue())) {      newRegisterInformation[counter].setModified(true);    }  } else {    newRegisterInformation[counter].setModified(true);  }}  }
class C{  public BankSlot(final Banks bank){  super(bank.getSlotName());  this.bank=bank;}  }
class C{  public boolean pre_jimplify(){  return soot.PhaseOptions.getBoolean(options,"pre-jimplify");}  }
class C{  public synchronized void streamStatus(StreamInfo info){  if (enabled && info.isValid()) {    for (    Item item : items) {      checkItemAndWrite(info,item);    }  }}  }
class C{  public Builder clientName(String clientName){  this.clientName=clientName;  return this;}  }
class C{  public boolean isEnabled(){  return contact.isEnabled();}  }
class C{  public ArrayIndexOutOfBoundsException(int index){  super("" + index);}  }
class C{  public static double[][] trimMatrix(double[][] matrix,int numberOfRows,int numberOfColumns){  double newMatrix[][]=new double[numberOfRows][numberOfColumns];  for (int i=0; i < numberOfRows; i++) {    for (int j=0; j < numberOfColumns; j++) {      newMatrix[i][j]=matrix[i][j];    }  }  return newMatrix;}  }
class C{  public static V1 global(){  V1 v=new V1();  v.N.sendToGlobalView(true);  return v;}  }
class C{  @Override public boolean equals(Object otherRule){  if (otherRule == this) {    return true;  }  if (otherRule instanceof ZoneOffsetTransitionRule) {    ZoneOffsetTransitionRule other=(ZoneOffsetTransitionRule)otherRule;    return month == other.month && dom == other.dom && dow == other.dow && timeDefinition == other.timeDefinition && time.equals(other.time) && timeEndOfDay == other.timeEndOfDay && standardOffset.equals(other.standardOffset) && offsetBefore.equals(other.offsetBefore) && offsetAfter.equals(other.offsetAfter);  }  return false;}  }
class C{  @Override public boolean add(Object element){  if (null == element) {    throw new NullPointerException("Attempted to add null object to buffer");  }  if (full) {    throw new IllegalStateException("The buffer cannot hold more than " + maxElements + " objects.");  }  elements[end++]=element;  if (end >= maxElements) {    end=0;  }  if (end == start) {    full=true;  }  return true;}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case N4mfPackage.PROJECT_TYPE:    return createProjectTypeFromString(eDataType,initialValue);case N4mfPackage.SOURCE_FRAGMENT_TYPE:  return createSourceFragmentTypeFromString(eDataType,initialValue);case N4mfPackage.MODULE_FILTER_TYPE:return createModuleFilterTypeFromString(eDataType,initialValue);case N4mfPackage.PROJECT_DEPENDENCY_SCOPE:return createProjectDependencyScopeFromString(eDataType,initialValue);case N4mfPackage.MODULE_LOADER:return createModuleLoaderFromString(eDataType,initialValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public static void releaseWakeLock(){  if (wakeLock != null && wakeLock.isHeld()) {    wakeLock.release();  }}  }
class C{  public void rebuildStackMap(ClassPool pool) throws BadBytecode {  CodeAttribute ca=getCodeAttribute();  if (ca != null) {    StackMapTable smt=MapMaker.make(pool,this);    ca.setAttribute(smt);  }}  }
class C{  public static Set<Node> convertNodelistToSet(NodeList xpathNodeSet){  if (xpathNodeSet == null) {    return new HashSet<Node>();  }  int length=xpathNodeSet.getLength();  Set<Node> set=new HashSet<Node>(length);  for (int i=0; i < length; i++) {    set.add(xpathNodeSet.item(i));  }  return set;}  }
class C{  public static boolean matchDevice(List<Device> devices){  if (devices == null)   return true;  boolean matched=false;  for (  Device device : devices) {    if (device.manufacturer == null && device.model == null) {      continue;    }    if (device.manufacturer != null) {      if (!device.manufacturer.equalsIgnoreCase(getManufacturer())) {        continue;      }    }    if (device.model != null) {      if (!device.model.equalsIgnoreCase(DeviceModelUtils.getModel(getManufacturer(),getModel()))) {        continue;      }    }    matched=true;    break;  }  return matched;}  }
class C{  final void printMicro(long value){  Log.write(1000 * VM.statistics.nanosToMillis(value));}  }
class C{  public LinkedCaseInsensitiveMap(){  this(null);}  }
class C{  public Vector(int capacity){  this(capacity,0);}  }
class C{  public boolean hasExtendedProperties(){  return hasRepeatingExtension(ExtendedProperty.class);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null)   return false;  if (!(obj instanceof Cursor))   return false;  return index == ((Cursor)obj).index;}  }
class C{  public static int max(int a,int b){  return 0;}  }
class C{  public ReflectiveProperty(Class<T> propertyHolder,Class<V> valueType,String name){  super(valueType,name);  char firstLetter=Character.toUpperCase(name.charAt(0));  String theRest=name.substring(1);  String capitalizedName=firstLetter + theRest;  String getterName=PREFIX_GET + capitalizedName;  try {    mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);  } catch (  NoSuchMethodException e) {    try {      mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);      mGetter.setAccessible(true);    } catch (    NoSuchMethodException e2) {      getterName=PREFIX_IS + capitalizedName;      try {        mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);      } catch (      NoSuchMethodException e3) {        try {          mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);          mGetter.setAccessible(true);        } catch (        NoSuchMethodException e4) {          try {            mField=propertyHolder.getField(name);            Class fieldType=mField.getType();            if (!typesMatch(valueType,fieldType)) {              throw new NoSuchPropertyException("Underlying type (" + fieldType + ") "+ "does not match Property type ("+ valueType+ ")");            }            return;          } catch (          NoSuchFieldException e5) {            throw new NoSuchPropertyException("No accessor method or field found for" + " property with name " + name);          }        }      }    }  }  Class getterType=mGetter.getReturnType();  if (!typesMatch(valueType,getterType)) {    throw new NoSuchPropertyException("Underlying type (" + getterType + ") "+ "does not match Property type ("+ valueType+ ")");  }  String setterName=PREFIX_SET + capitalizedName;  try {    mSetter=propertyHolder.getDeclaredMethod(setterName,getterType);    mSetter.setAccessible(true);  } catch (  NoSuchMethodException ignored) {  }}  }
class C{  public static Map<String,Object> sendOrderCompleteNotification(DispatchContext ctx,Map<String,? extends Object> context){  return sendOrderNotificationScreen(ctx,context,"PRDS_ODR_COMPLETE");}  }
class C{  public boolean equals(Object o){  if (o instanceof Level) {    Level l=(Level)o;    if (l.value == this.value) {      return (true);    }  }  return (false);}  }
class C{  protected void refreshRemoveNodes() throws Exception {  int i;  FolderTokenDocTreeNode node=null;  int numNodes=count();  for (i=0; i < numNodes; i++) {    node=(FolderTokenDocTreeNode)m_nodes.get(i);    if (node.isRemove()) {      m_nodes.remove(i);      numNodes=numNodes - 1;    }  }}  }
class C{  public CLImage3D createImage3D(CLMem.Usage usage,CLImageFormat format,long width,long height,long depth,long rowPitch,long slicePitch){  return createImage3D(usage,format,width,height,depth,rowPitch,slicePitch,null,false);}  }
class C{  @Override public boolean supportsOpenStatementsAcrossCommit(){  debugCodeCall("supportsOpenStatementsAcrossCommit");  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.735 -0400",hash_original_method="6BA921DFE406E4FB2E3ADDA69967D7F7",hash_generated_method="9D705E36618CB1F12130B41CDFC2CAA7") public int compare(File file1,File file2){  int result=0;  for (  Comparator<File> delegate : delegates) {    result=delegate.compare(file1,file2);    if (result != 0) {      break;    }  }  return result;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return CURSOR_ID;case 3:return VALUES;default :return null;}}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  altList.drawScreen(par1,par2,par3);  if (altList.getSelectedSlot() != -1 && altList.getSelectedSlot() < GuiAltList.alts.size()) {    Alt alt=GuiAltList.alts.get(altList.getSelectedSlot());    AltRenderer.drawAltBack(alt.getNameOrEmail(),(width / 2 - 125) / 2 - 32,height / 2 - 64 - 9,64,128);    AltRenderer.drawAltBody(alt.getNameOrEmail(),width - (width / 2 - 140) / 2 - 32,height / 2 - 64 - 9,64,128);  }  drawCenteredString(fontRendererObj,"Alt Manager",width / 2,4,16777215);  drawCenteredString(fontRendererObj,"Alts: " + GuiAltList.alts.size(),width / 2,14,10526880);  drawCenteredString(fontRendererObj,"premium: " + GuiAltList.premiumAlts + ", cracked: "+ GuiAltList.crackedAlts,width / 2,24,10526880);  if (errorTimer > 0) {    GL11.glDisable(GL11.GL_TEXTURE_2D);    GL11.glDisable(GL_CULL_FACE);    GL11.glEnable(GL_BLEND);    GL11.glColor4f(1.0F,0.0F,0.0F,(float)errorTimer / 16);    GL11.glBegin(GL11.GL_QUADS);{      GL11.glVertex2d(0,0);      GL11.glVertex2d(width,0);      GL11.glVertex2d(width,height);      GL11.glVertex2d(0,height);    }    GL11.glEnd();    GL11.glEnable(GL11.GL_TEXTURE_2D);    GL11.glEnable(GL_CULL_FACE);    GL11.glDisable(GL_BLEND);    errorTimer--;  }  super.drawScreen(par1,par2,par3);}  }
class C{  public void testGetUnsignedInt24(){  byte[] bytes={12,0,0,1,-1,-1,-1,0,0,0,0,0,-128,-1,-1,127};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  assertEquals(0xffffff,array.getUnsignedInt24());  assertEquals(0,array.getUnsignedInt24());  assertEquals(0x800000,array.getUnsignedInt24());  assertEquals(0x7fffff,array.getUnsignedInt24());}  }
class C{  public void onBackPressed(){  boolean isTrapped=false;  if (PEOPLE_TAB_INDEX == mCurrentTabIndex) {    isTrapped=mRoomDetailsMembersFragment.onBackPressed();  }  if (!isTrapped) {    super.onBackPressed();  }}  }
class C{  public boolean containsKey(K key){  return get(key) != null;}  }
class C{  public void ExportStopList(String filename,String systemName) throws IOException {  BufferedWriter writer=new BufferedWriter(new FileWriter(filename));  writer.write(systemName + " LIST OF STOPS");  writer.newLine();  writer.newLine();  ArrayList<String> stops=new ArrayList<String>();  for (  ScheduledRoute r : this.routes) {    for (    String s : r.getStopSequence()) {      if (!(stops.contains(s)))       stops.add(s);    }  }  for (  String s : stops) {    writer.write(s);    writer.newLine();  }  writer.close();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (lagGraph == null) {    throw new NullPointerException();  }}  }
class C{  private void gotoHomeActivity(){  Intent intent=new Intent();  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.setClass(this,HomeActivity.class);  startActivity(intent);  finish();}  }
class C{  public void testSameFormat(){  m_Filter=getFilter();  ((ChangeDateFormat)m_Filter).setDateFormat("yyyy-MM-dd");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  boolean equal=true;  for (int i=0; i < m_Instances.numInstances(); i++) {    if (m_Instances.instance(i) instanceof SparseInstance)     continue;    if (m_Comparator.compare(m_Instances.instance(i),result.instance(i)) != 0) {      equal=false;      break;    }  }  if (!equal)   fail("Instances modified!");}  }
class C{  public WoWoRotationAnimation(int page,float startOffset,float endOffset,float pivotX,float pivotY,float targetX,float targetY,float targetZ,EaseType easeType,boolean useSameEaseTypeBack){  setPage(page);  setStartOffset(startOffset);  setEndOffset(endOffset);  this.pivotX=pivotX;  this.pivotY=pivotY;  this.targetX=targetX;  this.targetY=targetY;  this.targetZ=targetZ;  this.easeType=easeType;  this.useSameEaseTypeBack=useSameEaseTypeBack;}  }
class C{  public static <T>List<T> synchronizedList(List<T> list){  if (list == null) {    throw new NullPointerException();  }  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<T>(list);  }  return new SynchronizedList<T>(list);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o != null) {    if (o instanceof MetaImage)     return ((MetaImage)o).isNullOrFailed() ? Boolean.TRUE : Boolean.FALSE; else {      MetaImage mi=MetaImage.getMetaImageNoLoad(o);      return (mi != null && mi.isNullOrFailed()) ? Boolean.TRUE : Boolean.FALSE;    }  }  return Boolean.FALSE;}  }
class C{  void sendMessageToHandlerWithControllerReset(List<OFMessage> messages) throws Exception {  sendMessageToHandlerNoControllerReset(messages);}  }
class C{  public CSSOMStoredStyleDeclaration(CSSEngine eng){  super(null,null,eng);  valueProvider=this;  setModificationHandler(this);}  }
class C{  private boolean isRequiredFieldsOk(){  boolean discountCode=false;  if (discountCodeInput.getEditText() == null || discountCodeInput.getEditText().getText().toString().equalsIgnoreCase("")) {    discountCodeInput.setErrorEnabled(true);    discountCodeInput.setError(getString(R.string.Required_field));  } else {    Timber.d("Some fields are required.");    discountCodeInput.setErrorEnabled(false);    discountCode=true;  }  return discountCode;}  }
class C{  @Override public void configure(){  log.debug("configure() called.");  SerialTrafficController tc=new SerialTrafficController();  this.getSystemConnectionMemo().setTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().configureManagers();  tc.connectPort(this);}  }
class C{  @Override public boolean isEmpty(){  return !((ResourceBundle)object).getKeys().hasMoreElements() && super.isEmpty();}  }
class C{  public static float[] spatialSampling(Gesture gesture,int bitmapSize){  return spatialSampling(gesture,bitmapSize,false);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:23.158 -0400",hash_original_method="27E0D57FF2AEBC70EE6BF760C51E525C",hash_generated_method="70C186BF3C020F97975A93D7ABF97EE3") public final int length(){  return array.length;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private ZyGroupNodeBuilder(){}  }
class C{  private boolean testTrinomials(){  int i, l;  boolean done=false;  l=0;  fieldPolynomial=new GF2Polynomial(mDegree + 1);  fieldPolynomial.setBit(0);  fieldPolynomial.setBit(mDegree);  for (i=1; (i < mDegree) && !done; i++) {    fieldPolynomial.setBit(i);    done=fieldPolynomial.isIrreducible();    l++;    if (done) {      isTrinomial=true;      tc=i;      return done;    }    fieldPolynomial.resetBit(i);    done=fieldPolynomial.isIrreducible();  }  return done;}  }
class C{  public Position(){  squares=new int[64];  for (int i=0; i < 64; i++)   squares[i]=Piece.EMPTY;  pieceTypeBB=new long[Piece.nPieceTypes];  psScore1=new short[Piece.nPieceTypes];  psScore2=new short[Piece.nPieceTypes];  for (int i=0; i < Piece.nPieceTypes; i++) {    pieceTypeBB[i]=0L;    psScore1[i]=0;    psScore2[i]=0;  }  whiteBB=blackBB=0L;  whiteMove=true;  castleMask=0;  epSquare=-1;  halfMoveClock=0;  fullMoveCounter=1;  hashKey=computeZobristHash();  wKingSq=bKingSq=-1;  wMtrl=bMtrl=-Evaluate.kV;  wMtrlPawns=bMtrlPawns=0;}  }
class C{  @Override public List<TransLog> findAll(){  return getMongoTemplate().find(new Query(),TransLog.class);}  }
class C{  public void putNullCascaded(int i,boolean b){  if (b)   masks[i]|=NULL_CASCADED_MASK; else   masks[i]&=~NULL_CASCADED_MASK;}  }
class C{  public Vector3 tmp2(){  return tmp2.set(this);}  }
class C{  public static GFciRunner serializableInstance(){  return new GFciRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public Boolean isIpfixOverrideAllowed(){  return ipfixOverrideAllowed;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodetextnodeattribute.class,args);}  }
class C{  public void mute(){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  sendMuteFrame();  Log.i("Device " + this.name + ": Communications muted.");  isMuted=true;}  }
class C{  private static double exp(double x,double extra,double[] hiPrec){  double intPartA;  double intPartB;  int intVal;  if (x < 0.0) {    intVal=(int)-x;    if (intVal > 746) {      if (hiPrec != null) {        hiPrec[0]=0.0;        hiPrec[1]=0.0;      }      return 0.0;    }    if (intVal > 709) {      final double result=exp(x + 40.19140625,extra,hiPrec) / 285040095144011776.0;      if (hiPrec != null) {        hiPrec[0]/=285040095144011776.0;        hiPrec[1]/=285040095144011776.0;      }      return result;    }    if (intVal == 709) {      final double result=exp(x + 1.494140625,extra,hiPrec) / 4.455505956692756620;      if (hiPrec != null) {        hiPrec[0]/=4.455505956692756620;        hiPrec[1]/=4.455505956692756620;      }      return result;    }    intVal++;    intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX - intVal];    intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX - intVal];    intVal=-intVal;  } else {    intVal=(int)x;    if (intVal > 709) {      if (hiPrec != null) {        hiPrec[0]=Double.POSITIVE_INFINITY;        hiPrec[1]=0.0;      }      return Double.POSITIVE_INFINITY;    }    intPartA=ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX + intVal];    intPartB=ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX + intVal];  }  final int intFrac=(int)((x - intVal) * 1024.0);  final double fracPartA=ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final double fracPartB=ExpFracTable.EXP_FRAC_TABLE_B[intFrac];  final double epsilon=x - (intVal + intFrac / 1024.0);  double z=0.04168701738764507;  z=z * epsilon + 0.1666666505023083;  z=z * epsilon + 0.5000000000042687;  z=z * epsilon + 1.0;  z=z * epsilon + -3.940510424527919E-20;  double tempA=intPartA * fracPartA;  double tempB=intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;  final double tempC=tempB + tempA;  final double result;  if (extra != 0.0) {    result=tempC * extra * z + tempC * extra + tempC * z + tempB + tempA;  } else {    result=tempC * z + tempB + tempA;  }  if (hiPrec != null) {    hiPrec[0]=tempA;    hiPrec[1]=tempC * extra * z + tempC * extra + tempC * z + tempB;  }  return result;}  }
class C{  public static int quadTreeLevelsForPrecision(String distance){  return quadTreeLevelsForPrecision(DistanceUnit.METERS.parse(distance,DistanceUnit.DEFAULT));}  }
class C{  public MemberDefinition makeMemberDefinition(Environment origEnv,long where,ClassDefinition clazz,String doc,int modifiers,Type type,Identifier name,IdentifierToken argNames[],IdentifierToken expIds[],Object value){  if (tracing)   dtEvent("makeMemberDefinition: " + name + " IN "+ clazz);  Vector v=null;  if (argNames != null) {    v=new Vector(argNames.length);    for (int i=0; i < argNames.length; i++) {      v.addElement(argNames[i]);    }  }  SourceMember f=new SourceMember(where,clazz,doc,modifiers,type,name,v,expIds,(Node)value);  clazz.addMember(origEnv,f);  return f;}  }
class C{  public OMGraphicList filter(Shape withinThisShape){  return filter.filter(withinThisShape);}  }
class C{  private List<File> findDuplicateFiles(List<File> files){  HashSet<File> sourceFileSet=new HashSet<>();  List<File> duplicateFiles=new ArrayList<>();  for (  File file : files) {    if (!sourceFileSet.contains(file)) {      sourceFileSet.add(file);    } else {      duplicateFiles.add(file);    }  }  return duplicateFiles;}  }
class C{  @Override protected String doExport(List<EvaluationStatistics> stats){  return m_Exporter.export(filter(stats));}  }
class C{  public boolean isAdjacent(Cell c){  if (equals(c))   return false;  if (col == c.col) {    return (Math.abs(row - c.row) == 1);  }  if (row == c.row) {    return (Math.abs(col - c.col) == 1);  }  return false;}  }
class C{  public static DefaultEvent serializableInstance(){  return new DefaultEvent("","");}  }
class C{  private void checkDuplicateHost(Host host,Host targetHost){  if (targetHost != null && !(host.getId().equals(targetHost.getId()))) {    ComputeSystemControllerException ex=ComputeSystemControllerException.exceptions.duplicateSystem("Host",targetHost.getLabel());    DiscoveryStatusUtils.markAsFailed(modelClient,host,ex.getMessage(),ex);    throw ex;  }}  }
class C{  @Override public boolean isConsciousProcessingRequired(){  return true;}  }
class C{  public static Typeface ostrichBlack(Context context){  return FontSourceProcessor.process(R.raw.ostrich_black,context);}  }
class C{  public PhoneticFilterFactory(Map<String,String> args){  super(args);  inject=getBoolean(args,INJECT,true);  name=require(args,ENCODER);  String v=get(args,MAX_CODE_LENGTH);  if (v != null) {    maxCodeLength=Integer.valueOf(v);  } else {    maxCodeLength=null;  }  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject){  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public Collection<?> toCollection(String column) throws SQLException {  return crsInternal.toCollection(column);}  }
class C{  SegmentManager commitIndex(long commitIndex){  this.commitIndex=Math.max(this.commitIndex,commitIndex);  return this;}  }
class C{  public boolean union(RWSet other){  throw new RuntimeException("Unsupported");}  }
class C{  public void invertSelection(){  partition.invertSelection();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(String.format("=================== Asset : %s%n",this.getUUID()));  sb.append(String.format("hash = %s%n",Arrays.toString(this.hash)));  sb.append(String.format("size = %d%n",this.getSize()));  sb.append(String.format("type = %s%n",this.getType()));  sb.append(String.format("original_filename = %s%n",this.getOriginalFilename()));  sb.append(String.format("hash_algorithm = %s%n",this.hash_algorithm));  return sb.toString();}  }
class C{  private static void initUsableDisplaySizes(){  displaySizes.add(new Dimension(640,480));  displaySizes.add(new Dimension(800,600));  displaySizes.add(new Dimension(864,486));}  }
class C{  private boolean appearsNested(RSyntaxTextArea textArea,int line,int offs){  final int firstLine=line;  while (line < textArea.getLineCount()) {    Token t=textArea.getTokenListForLine(line);    int i=0;    if (line++ == firstLine) {      t=RSyntaxUtilities.getTokenAtOffset(t,offs);      if (t == null) {        continue;      }      i=t.documentToToken(offs);    } else {      i=t.textOffset;    }    while (i < t.textOffset + t.textCount - 1) {      if (t.text[i] == '/' && t.text[i + 1] == '*') {        return true;      }      i++;    }    if (t.getNextToken() != null) {      return false;    }  }  return true;}  }
class C{  public double cdf(int k){  return Probability.negativeBinomial(k,n,p);}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public void addConflictModifiedListener(final ConflictCacheListener listener){  Check.notNull(listener,"listener");synchronized (listenerLock) {    conflictListeners.addListener(listener,MODIFIED);  }}  }
class C{  public void arrayStore(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IASTORE));}  }
class C{  public LogDiscretizer(double base){  this(base,Double.POSITIVE_INFINITY,1.0);}  }
class C{  @Nonnull @CheckReturnValue public static <T,R>LifecycleTransformer<T> bind(@Nonnull Observable<R> lifecycle,@Nonnull final Func1<R,R> correspondingEvents){  checkNotNull(lifecycle,"lifecycle == null");  checkNotNull(correspondingEvents,"correspondingEvents == null");  return new UntilCorrespondingEventObservableTransformer<>(lifecycle.share(),correspondingEvents);}  }
class C{  public static void checkState(final boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void hideTheItems(){  for (int i=0; i < mItemViews.length; i++) {    View itemView=mItemViews[i];    long startDelay=(mDefaultAnimDuration / mItemViews.length) * (mItemViews.length - i);    itemView.animate().alpha(0).setStartDelay(startDelay);  }}  }
class C{  public DD sqrt(){  if (isZero())   return valueOf(0.0);  if (isNegative()) {    return NaN;  }  double x=1.0 / Math.sqrt(hi);  double ax=hi * x;  DD axdd=valueOf(ax);  DD diffSq=this.subtract(axdd.sqr());  double d2=diffSq.hi * (x * 0.5);  return axdd.add(d2);}  }
class C{  private void addSystemMenuItems(JPopupMenu menu){  JMenuItem mi=(JMenuItem)menu.add(restoreAction);  mi.setMnemonic('R');  mi=(JMenuItem)menu.add(moveAction);  mi.setMnemonic('M');  mi=(JMenuItem)menu.add(sizeAction);  mi.setMnemonic('S');  mi=(JMenuItem)menu.add(iconifyAction);  mi.setMnemonic('n');  mi=(JMenuItem)menu.add(maximizeAction);  mi.setMnemonic('x');  menu.add(new JSeparator());  mi=(JMenuItem)menu.add(closeAction);  mi.setMnemonic('C');}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public OpenCouplingListAction(final SimbrainDesktop desktop){  super("Open Coupling List...");  this.desktop=desktop;  putValue(SMALL_ICON,ResourceManager.getImageIcon("CouplingList.png"));  putValue(SHORT_DESCRIPTION,"Open coupling list");}  }
class C{  public JSONArray append(long value){  this.append(new Long(value));  return this;}  }
class C{  public void normalise(){  table=InferenceUtils.normalise(table);}  }
class C{  public Activator(){}  }
class C{  public UniversalDataSource remove(String name) throws InterruptedException {  return datasources.remove(name);}  }
class C{  @DSComment("File Information") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.546 -0500",hash_original_method="6E1602EC51AE975F6EDA687DC2872422",hash_generated_method="0CD97CA24911DBF6FF7EFE61EEFD12E2") public long length(){  try {    return Libcore.os.stat(path).st_size;  } catch (  ErrnoException errnoException) {    return 0;  }}  }
class C{  @BeforeMethod public void before() throws Exception {  final ResourceBinderImpl resources=new ResourceBinderImpl();  resources.addResource(MyJaxRSService.class,null);  final DependencySupplierImpl dependencies=new DependencySupplierImpl();  final ApplicationProviderBinder binder=new ApplicationProviderBinder();  binder.addExceptionMapper(ApiExceptionMapper.class);  binder.addResponseFilter(ETagResponseFilter.class);  final URI uri=new URI(BASE_URI);  final ContainerRequest req=new ContainerRequest(null,uri,uri,null,null,null);  final ApplicationContextImpl contextImpl=new ApplicationContextImpl(req,null,binder);  contextImpl.setDependencySupplier(dependencies);  ApplicationContextImpl.setCurrent(contextImpl);  final EverrestProcessor processor=new EverrestProcessor(resources,binder,dependencies,new EverrestConfiguration(),null);  resourceLauncher=new ResourceLauncher(processor);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  void doApproach(){  if (approachSensor1 != null && approachSensor1.getBean().getKnownState() == Sensor.INACTIVE) {    if (driveSignal.getBean().getLit()) {      driveSignal.getBean().setLit(false);    }  } else {    if (!driveSignal.getBean().getLit()) {      driveSignal.getBean().setLit(true);    }  }  return;}  }
class C{  public List<LocalDateTime> top(int n){  List<LocalDateTime> top=new ArrayList<>();  long[] values=data.toLongArray();  LongArrays.parallelQuickSort(values,ReverseLongComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(PackedLocalDateTime.asLocalDateTime(values[i]));  }  return top;}  }
class C{  protected void applyGradientToPaint(){  if (Color.alpha(mSeriesItem.getSecondaryColor()) != 0) {    int colorOne=mSeriesItem.getSpinClockwise() ? mSeriesItem.getColor() : mSeriesItem.getSecondaryColor();    int colorTwo=mSeriesItem.getSpinClockwise() ? mSeriesItem.getSecondaryColor() : mSeriesItem.getColor();    LinearGradient gradient=new LinearGradient(mBounds.left,mBounds.top,mBounds.right,mBounds.bottom,colorOne,colorTwo,Shader.TileMode.CLAMP);    mPaint.setShader(gradient);  }}  }
class C{  protected void copyExternalResources(File sourceDir,File destDir,String[] cargoFiles) throws IOException {  File[] sourceFiles=sourceDir.listFiles();  if (sourceFiles != null) {    for (int i=0; i < sourceFiles.length; i++) {      if (!isExcluded(cargoFiles,sourceFiles[i].getName())) {        if (sourceFiles[i].isDirectory()) {          getFileHandler().createDirectory(destDir.getPath(),sourceFiles[i].getName());          copyExternalResources(sourceFiles[i],new File(destDir,sourceFiles[i].getName()),cargoFiles);        } else {          FileOutputStream fops=new FileOutputStream(new File(destDir,sourceFiles[i].getName()));          FileInputStream fips=new FileInputStream(sourceFiles[i]);          getFileHandler().copy(fips,fops);          fips.close();          fops.close();        }      }    }  }}  }
class C{  public boolean moveObject(final Object obj,final int fromX,final int fromY,final int toX,final int toY){  boolean result=removeObjectAtLocation(obj,fromX,fromY);  addObjectToLocation(obj,toX,toY);  return result;}  }
class C{  public void serialize(XmlSerializer serializer,String elementNamespaceUri,String elementLocalName,Object element) throws IOException {  serialize(serializer,elementNamespaceUri,elementLocalName,element,true);}  }
class C{  public static DiffException createDiffException(final ErrorKeys errorId,final String message){  return new DiffException(errorId.toString() + ":\r\n" + message);}  }
class C{  static public double log2(double value){  return Math.log(value) * 1.4426950408889634;}  }
class C{  public TravelEvent createTravelEvent(GalacticPosition from,GalacticPosition to,int shipID){  Planet planet=theGalaxy.getPlanet(from);  if (planet != null) {    ItemStack ship=planet.getShip(shipID);    if (ship != null) {      TravelEvent travelEvent=new TravelEvent(world,from,to,ship,GalaxyServer.getInstance().getTheGalaxy());      if (travelEvent.isValid(GalaxyServer.getInstance().getTheGalaxy())) {        if (GalaxyServer.getInstance().getTheGalaxy().canCompleteTravelEvent(travelEvent)) {          theGalaxy.getPlanet(from).removeShip(shipID);          theGalaxy.getPlanet(from).markDirty();          GalaxyServer.getInstance().getTheGalaxy().addTravelEvent(travelEvent);          return travelEvent;        }      }    }  }  return null;}  }
class C{  protected void addError(String message,Throwable e){  errorTable.add(new Status(IStatus.ERROR,"eu.numberfour.n4js.ui",0,message,e));}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  private void verifyXmlForModificationType(String srvId,String xmlString,ParameterModificationType currentModificationType) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  Document document=builder.parse(new InputSource(new StringReader(xmlString)));  Element root=(Element)XMLConverter.getNodeByXPath(document,"//*[local-name(.)=\'TechnicalService\'][@id=\'" + srvId + "\']");  NodeList serviceNode=root.getChildNodes();  for (int index=0; index < serviceNode.getLength(); index++) {    if (serviceNode.item(index).getNodeName().equals("ParameterDefinition")) {      NamedNodeMap parameterDefinitionAttrs=serviceNode.item(index).getAttributes();      if (parameterDefinitionAttrs.getNamedItem("id").equals("TEST")) {        if (currentModificationType == null || currentModificationType.equals(ParameterModificationType.STANDARD)) {          assertNull(parameterDefinitionAttrs.getNamedItem("modificationType"));        } else {          assertEquals(currentModificationType.name(),parameterDefinitionAttrs.getNamedItem("modificationType").getTextContent());        }      }    }  }}  }
class C{  @Override public void validateAllocator(){  if (topSize < 0) {    return;  }  traverseAndCheck();  for (int i=0; i < smallBins.length; i++) {    checkSmallBin(i);  }  for (int i=0; i < treeBins.length; i++) {    checkTreeBin(i);  }}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public void deleteLibrary(String libraryName,String tag){  libraryName=libraryName.replace("'","''");  tag=tag.replace("'","''");  String where=LIBRARY_NAME + "=" + "'"+ libraryName+ "'"+ " AND "+ LIBRARY_TAG+ "="+ "'"+ tag+ "'";  getDatabase().delete(LIBRARIES_TABLE,where,null);}  }
class C{  public EWMA(double alpha,long interval,TimeUnit intervalUnit){  this.interval=intervalUnit.toNanos(interval);  this.alpha=alpha;}  }
class C{  public static byte[] concatenate(byte[] x1,byte[] x2){  byte[] result=new byte[x1.length + x2.length];  System.arraycopy(x1,0,result,0,x1.length);  System.arraycopy(x2,0,result,x1.length,x2.length);  return result;}  }
class C{  public Map<String,List<String>> findReferencingRelations(ObjectName mbeanName,String relationTypeName,String roleName) throws IllegalArgumentException {  if (mbeanName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"findReferencingRelations",new Object[]{mbeanName,relationTypeName,roleName});  Map<String,List<String>> result=new HashMap<String,List<String>>();synchronized (myRefedMBeanObjName2RelIdsMap) {    Map<String,List<String>> relId2RoleNamesMap=myRefedMBeanObjName2RelIdsMap.get(mbeanName);    if (relId2RoleNamesMap != null) {      Set<String> allRelIdSet=relId2RoleNamesMap.keySet();      List<String> relIdList;      if (relationTypeName == null) {        relIdList=new ArrayList<String>(allRelIdSet);      } else {        relIdList=new ArrayList<String>();        for (        String currRelId : allRelIdSet) {          String currRelTypeName;synchronized (myRelId2RelTypeMap) {            currRelTypeName=myRelId2RelTypeMap.get(currRelId);          }          if (currRelTypeName.equals(relationTypeName)) {            relIdList.add(currRelId);          }        }      }      for (      String currRelId : relIdList) {        List<String> currRoleNameList=relId2RoleNamesMap.get(currRelId);        if (roleName == null) {          result.put(currRelId,new ArrayList<String>(currRoleNameList));        } else         if (currRoleNameList.contains(roleName)) {          List<String> dummyList=new ArrayList<String>();          dummyList.add(roleName);          result.put(currRelId,dummyList);        }      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"findReferencingRelations");  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String process(String document,ResultFormatter resultFormatter) throws DocumentCreationTimeMissingException {  return process(document,null,resultFormatter);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.788 -0500",hash_original_method="F5E3085137E37D29F0F8CB3C296F1F57",hash_generated_method="47D4A76F75042B03A266F16D90E98429") private Contacts(){}  }
class C{  @Override protected void keyTyped(char par1,int par2){  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  private void writeSentencesInFileInit(OrganismosVO organismosDCO,String outputFileUnidades) throws IOException {  Iterator<OrganismoVO> iterator=organismosDCO.getOrganismos().iterator();  BufferedWriter writer=new BufferedWriter(new FileWriter(outputFileUnidades));  try {    OrganismoVO organismo;    while (iterator.hasNext()) {      organismo=(OrganismoVO)iterator.next();      if (VIGENTE.equals(organismo.getDatosVigencia().getEstado())) {        writer.write(getOrganismoStmt(organismo,ORGANISMO_INSERT));      }    }  }  finally {    writer.close();  }}  }
class C{  public static CompoundSelect except(Query query){  return new CompoundSelect(CompoundSelectOperator.EXCEPT,query);}  }
class C{  IVariableBinding resolveVariable(VariableDeclaration variable){  return null;}  }
class C{  public void applyDefault(Default def){  this.location=def.location;  impl.visit(type,def.anno);}  }
class C{  protected TipoAsuntoVO validateAsuntoByOficina(Locale locale,ScrCa scrCa,String idOficina) throws HibernateException {  TipoAsuntoVO result=null;  if (scrCa.getAllOfics().intValue() != AsuntoValidoAllOficinas) {    result=getCaoficByOficinayAsunto(locale,scrCa.getId().toString(),idOficina);  } else {    result=tipoAsuntoAdapter(scrCa);  }  return result;}  }
class C{  private int readNext(boolean charstring){  num=(int)(data[pos++]) & 0xff;  if (num == 30 && !charstring) {    readFNum();    return type=FLT;  } else   if (num == 28) {    num=(((int)data[pos]) << 8) + (((int)data[pos + 1]) & 0xff);    pos+=2;    return type=NUM;  } else   if (num == 29 && !charstring) {    num=(((int)data[pos] & 0xff) << 24) | (((int)data[pos + 1] & 0xff) << 16) | (((int)data[pos + 2] & 0xff) << 8)| (((int)data[pos + 3] & 0xff));    pos+=4;    return type=NUM;  } else   if (num == 12) {    num=1000 + ((int)(data[pos++]) & 0xff);    return type=CMD;  } else   if (num < 32) {    return type=CMD;  } else   if (num < 247) {    num-=139;    return type=NUM;  } else   if (num < 251) {    num=(num - 247) * 256 + (((int)data[pos++]) & 0xff) + 108;    return type=NUM;  } else   if (num < 255) {    num=-(num - 251) * 256 - (((int)data[pos++]) & 0xff) - 108;    return type=NUM;  } else   if (!charstring) {    printData();    throw new RuntimeException("Got a 255 code while reading dict");  } else {    fnum=((((int)data[pos] & 0xff) << 24) | (((int)data[pos + 1] & 0xff) << 16) | (((int)data[pos + 2] & 0xff) << 8)| (((int)data[pos + 3] & 0xff))) / 65536f;    pos+=4;    return type=FLT;  }}  }
class C{  public static BufferedImage blur(BufferedImage sourceImage){  return blur(sourceImage,3);}  }
class C{  public boolean isMaxLengthExceeded(){  return (mInUseLength + getFreeListSize() > mMaxLength);}  }
class C{  private void enableSearchControl(){  final TFSRepository defaultRepository=TFSCommonUIClientPlugin.getDefault().getProductPlugin().getRepositoryManager().getDefaultRepository();  searchControl.setEnabled(defaultRepository != null && context.getCurrentProjectInfo() != null);}  }
class C{  @RequestMapping(value="/unzip/container/{containerId}/application/{applicationName}",method=RequestMethod.PUT) public void unzipFile(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam("path") final String path,@RequestParam("fileName") final String fileName,HttpServletRequest request,HttpServletResponse response) throws ServiceException, CheckException, IOException {  if (logger.isDebugEnabled()) {    logger.debug("containerId:" + containerId);    logger.debug("applicationName:" + applicationName);    logger.debug("fileName:" + fileName);  }  String command=null;  String realPath=path + "/" + fileName;  if (FileUnit.tar().test(fileName)) {    command="tar xvf " + realPath + " -C "+ path;  } else   if (FileUnit.zip().test(fileName)) {    command="unzip " + realPath + " -d "+ path;  } else {    throw new CheckException("Cannot decompress this file. Extension is not right : " + realPath);  }  logger.info(command);  try {    String commandExec=dockerService.execCommand(containerId,command);    if (commandExec != null) {      logger.debug(commandExec);    } else {      logger.error("No content for : " + command);    }  } catch (  FatalDockerJSONException e) {    logger.error(e.getMessage());  }}  }
class C{  protected boolean addToCollection(Collection collection,String collectionName,PersistentResource toAdd){  final Collection singleton=Collections.singleton(toAdd.getObject());  final Collection original=copyCollection(collection);  checkFieldAwareDeferPermissions(UpdatePermission.class,collectionName,CollectionUtils.union(CollectionUtils.emptyIfNull(collection),singleton),original);  if (collection == null) {    collection=Collections.singleton(toAdd.getObject());    Object value=getValueUnchecked(collectionName);    if ((value == null && toAdd.getObject() != null) || (value != null && !value.equals(toAdd.getObject()))) {      this.setValueChecked(collectionName,collection);      return true;    }  } else {    if (!collection.contains(toAdd.getObject())) {      collection.add(toAdd.getObject());      auditField(new ChangeSpec(this,collectionName,original,collection));      return true;    }  }  return false;}  }
class C{  IntBuffer overflowBuffer(){  byteBuffer.position(PERFDATA_PROLOG_OVERFLOW_OFFSET);  IntBuffer ib=byteBuffer.asIntBuffer();  ib.limit(1);  return ib;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new MotifTextPaneUI();}  }
class C{  public ObjectFactory(){}  }
class C{  protected Customer createCustomer(int id,String name,ZonedDateTime dateTime,String street,String houseNumber,String postalCode,String city,String country){  final List<Address> addressList=new ArrayList<>();  final Customer customer=new Customer();  final Address address=new Address();  addressList.add(address);  address.setStreet(street);  address.setHouseNumber(houseNumber);  address.setPostalCode(postalCode);  address.setCity(city);  address.setCountry(country);  customer.setId(id);  customer.setName(name);  customer.setAddress(addressList);  customer.setDateTime(dateTime);  return customer;}  }
class C{  public Builder baseValue(IonValue val){  this.baseValue=val;  return this;}  }
class C{  public Range<C> from(C from){  Objects.requireNonNull(from);  this.from=from;  return this;}  }
class C{  public static File intersect(File source,File dest){  Path sPath=source.toPath().toAbsolutePath();  Path dPath=dest.toPath().toAbsolutePath();  int sLen=sPath.getNameCount();  int dLen=dPath.getNameCount();  File res=null;  for (int j=dLen - 1; j != -1 && res == null; j--) {    for (int i=sLen - 1; i != -1; i--) {      if (sPath.getName(i).equals(dPath.getName(j))) {        StringBuilder b=new StringBuilder();        b.append(dPath.getRoot().toString());        for (int r=0; r < j; r++) {          b.append(dPath.getName(r));          b.append(File.separator);        }        for (int r=i; r < sLen; r++) {          b.append(sPath.getName(r));          if (r < sLen - 1) {            b.append(File.separator);          }        }        res=new File(b.toString());        break;      }    }  }  return res;}  }
class C{  public static java.sql.Date toSqlDate(int month,int day,int year){  java.util.Date newDate=toDate(month,day,year,0,0,0);  if (newDate != null) {    return new java.sql.Date(newDate.getTime());  } else {    return null;  }}  }
class C{  public DownloadFile(final DownloadFileDescription download,final Consumer<Integer> progressUpdateListener,final Runnable completionListener){  this(download,progressUpdateListener);  this.addDownloadCompletedListener(completionListener);}  }
class C{  public boolean addWatch(long varId,String varName,int type,int tag,int isolateId) throws NoResponseException, NotConnectedException, NotSupportedException {  if (!supportsWatchpoints(isolateId))   throw new NotSupportedException(PlayerSessionManager.getLocalizationManager().getLocalizedTextString("watchpointsNotSupported"));  varName=getRawMemberName(varId,varName,isolateId);  DMessage dm=DMessageCache.alloc(4 + DMessage.getSizeofPtr() + DMessage.getStringLength(varName)+ 1);  dm.setType(DMessage.OutAddWatch2);  dm.setTargetIsolate(isolateId);  dm.putPtr(varId);  try {    dm.putString(varName);  } catch (  UnsupportedEncodingException uee) {    dm.putByte((byte)'\0');  }  dm.putWord(type);  dm.putWord(tag);  int timeout=getPreference(SessionManager.PREF_GETVAR_RESPONSE_TIMEOUT);  boolean result=simpleRequestResponseMessage(dm,DMessage.InWatch2,timeout);  return result;}  }
class C{  public SerializableList(final Collection<T> collection,final String label){  super(collection,label);}  }
class C{  public void addExtension(Extension extension){  extPoint.addExtension(extension);}  }
class C{  @Override public void onNewIntent(Intent intent){  setIntent(intent);  boolean shouldOpenConversation=intent.hasExtra(MessageListActivity.ARG_THREAD_ID);  if (intent.getData() != null) {    String scheme=intent.getData().getScheme();    shouldOpenConversation=shouldOpenConversation || scheme.startsWith("sms") || scheme.startsWith("mms");  }  if (shouldOpenConversation) {    intent.setClass(this,MessageListActivity.class);    startActivity(intent);  }}  }
class C{  @Override public CredentialsBuilder withUsername(String username){  this.username=username;  return this;}  }
class C{  public static int lightness(int r,int g,int b){  return (int)(r * 0.3 + g * 0.59 + b * 0.11);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS03.class,args);}  }
class C{  @Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){  View rootView=inflater.inflate(R.layout.fragment_globe,container,false);  FrameLayout globeLayout=(FrameLayout)rootView.findViewById(R.id.globe);  globeLayout.addView(this.createWorldWindow());  return rootView;}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  private void validateNotificationActions(List<JobAction> jobActions){  Assert.notEmpty(jobActions,"At least one notification action must be specified.");  Set<JobAction> validatedJobActionsSet=new LinkedHashSet<>();  for (  JobAction jobAction : jobActions) {    Assert.hasText(jobAction.getNamespace(),"A job action namespace must be specified.");    jobAction.setNamespace(jobAction.getNamespace().trim());    Assert.hasText(jobAction.getJobName(),"A job action job name must be specified.");    jobAction.setJobName(jobAction.getJobName().trim());    JobAction lowercaseJobDefinitionKey=new JobAction();    lowercaseJobDefinitionKey.setNamespace(jobAction.getNamespace().toLowerCase());    lowercaseJobDefinitionKey.setJobName(jobAction.getJobName().toLowerCase());    if (validatedJobActionsSet.contains(lowercaseJobDefinitionKey)) {      throw new IllegalArgumentException(String.format("Duplicate job action {namespace: \"%s\", jobName: \"%s\"} found.",jobAction.getNamespace(),jobAction.getJobName()));    }    validatedJobActionsSet.add(lowercaseJobDefinitionKey);  }}  }
class C{  public static synchronized void removeConsoleAppender(){  final AppenderContext appenderContext=LogService.getAppenderContext(LogService.ROOT_LOGGER_NAME);  final LoggerConfig config=appenderContext.getLoggerConfig();  Appender stdout=config.getAppenders().get(STDOUT);  if (stdout != null) {    config.removeAppender(STDOUT);    stdoutAppender=stdout;    appenderContext.getLoggerContext().updateLoggers();  }}  }
class C{  private byte[] generateClientResponse(byte[] charset) throws IOException {  ByteArrayOutputStream digestResp=new ByteArrayOutputStream();  if (useUTF8) {    digestResp.write("charset=".getBytes(encoding));    digestResp.write(charset);    digestResp.write(',');  }  digestResp.write(("username=\"" + quotedStringValue(username) + "\",").getBytes(encoding));  if (negotiatedRealm.length() > 0) {    digestResp.write(("realm=\"" + quotedStringValue(negotiatedRealm) + "\",").getBytes(encoding));  }  digestResp.write("nonce=\"".getBytes(encoding));  writeQuotedStringValue(digestResp,nonce);  digestResp.write('"');  digestResp.write(',');  nonceCount=getNonceCount(nonce);  digestResp.write(("nc=" + nonceCountToHex(nonceCount) + ",").getBytes(encoding));  cnonce=generateNonce();  digestResp.write("cnonce=\"".getBytes(encoding));  writeQuotedStringValue(digestResp,cnonce);  digestResp.write("\",".getBytes(encoding));  digestResp.write(("digest-uri=\"" + digestUri + "\",").getBytes(encoding));  digestResp.write("maxbuf=".getBytes(encoding));  digestResp.write(String.valueOf(recvMaxBufSize).getBytes(encoding));  digestResp.write(',');  try {    digestResp.write("response=".getBytes(encoding));    digestResp.write(generateResponseValue("AUTHENTICATE",digestUri,negotiatedQop,username,negotiatedRealm,passwd,nonce,cnonce,nonceCount,authzidBytes));    digestResp.write(',');  } catch (  Exception e) {    throw new SaslException("DIGEST-MD5: Error generating response value",e);  }  digestResp.write(("qop=" + negotiatedQop).getBytes(encoding));  if (negotiatedCipher != null) {    digestResp.write((",cipher=\"" + negotiatedCipher + "\"").getBytes(encoding));  }  if (authzidBytes != null) {    digestResp.write(",authzid=\"".getBytes(encoding));    writeQuotedStringValue(digestResp,authzidBytes);    digestResp.write("\"".getBytes(encoding));  }  if (digestResp.size() > MAX_RESPONSE_LENGTH) {    throw new SaslException("DIGEST-MD5: digest-response size too " + "large. Length: " + digestResp.size());  }  return digestResp.toByteArray();}  }
class C{  public final void popExpressionState(){  m_currentNodes.quickPop(1);  m_currentExpressionNodes.quickPop(1);  m_prefixResolvers.pop();}  }
class C{  public boolean equals(int i){  return value == i;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.381 -0500",hash_original_method="DD16C43D02F60D2EF25B9D7E2B37609F",hash_generated_method="9E9AC4081BDA0AFCDF0238988BF2DE54") static public void assertEquals(String expected,String actual){  assertEquals(null,expected,actual);}  }
class C{  public static Vector3d interpolationFactorsTriangle(double v0X,double v0Y,double v1X,double v1Y,double v2X,double v2Y,double x,double y,Vector3d dest){  double v12Y=v1Y - v2Y;  double v21X=v2X - v1X;  double v02X=v0X - v2X;  double yv2Y=y - v2Y;  double xv2X=x - v2X;  double v02Y=v0Y - v2Y;  double invDen=1.0 / (v12Y * v02X + v21X * v02Y);  dest.x=(v12Y * xv2X + v21X * yv2Y) * invDen;  dest.y=(v02X * yv2Y - v02Y * xv2X) * invDen;  dest.z=1.0 - dest.x - dest.y;  return dest;}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_inCData=true;  append(m_doc.createCDATASection(""));}  }
class C{  public QuantumFluxLoader(Context context,Select<T> select,int cacheSize){  this(context,select);  enableCursorCache(cacheSize);}  }
class C{  private void removeLinkSetMember(final URI property,final Resource resource){  materialize();  final GPOEntry entry=establishLinkEntry(property);  entry.remove(this,resource);}  }
class C{  public Object remove(IconPartCollectionEntry entry){  return getEntryMap().remove(entry.getName());}  }
class C{  public DtoModel(Class dto){  this.dto=dto;  this.methods=new ArrayList<>();  this.fieldAttributeModels=new ArrayList<>();  analyze();}  }
class C{  protected BusinessObjectDataStorageFilesCreateResponse createBusinessObjectDataStorageFilesImpl(BusinessObjectDataStorageFilesCreateRequest businessObjectDataStorageFilesCreateRequest){  validateBusinessObjectDataStorageFilesCreateRequest(businessObjectDataStorageFilesCreateRequest);  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoHelper.getBusinessObjectDataEntity(getBusinessObjectDataKey(businessObjectDataStorageFilesCreateRequest));  Assert.isTrue(BooleanUtils.isTrue(businessObjectDataEntity.getStatus().getPreRegistrationStatus()),String.format("Business object data status must be one of the pre-registration statuses. Business object data status {%s}, business object data {%s}",businessObjectDataEntity.getStatus().getCode(),businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity)));  StorageUnitEntity storageUnitEntity=storageUnitDaoHelper.getStorageUnitEntity(businessObjectDataStorageFilesCreateRequest.getStorageName(),businessObjectDataEntity);  StorageEntity storageEntity=storageUnitEntity.getStorage();  boolean validatePathPrefix=storageHelper.getBooleanStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_PATH_PREFIX),storageEntity,false,true);  boolean validateFileExistence=storageHelper.getBooleanStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_FILE_EXISTENCE),storageEntity,false,true);  boolean validateFileSize=storageHelper.getBooleanStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_FILE_SIZE),storageEntity,false,true);  if (validateFileSize) {    Assert.isTrue(validateFileExistence,String.format("Storage \"%s\" has file size validation enabled without file existence validation.",storageEntity.getName()));  }  List<StorageFile> storageFiles;  if (BooleanUtils.isTrue(businessObjectDataStorageFilesCreateRequest.isDiscoverStorageFiles())) {    storageFiles=discoverStorageFiles(storageUnitEntity);  } else {    storageFiles=businessObjectDataStorageFilesCreateRequest.getStorageFiles();    validateStorageFiles(storageFiles,storageUnitEntity,validatePathPrefix,validateFileExistence,validateFileSize);  }  storageFileDaoHelper.createStorageFileEntitiesFromStorageFiles(storageUnitEntity,storageFiles);  return createBusinessObjectDataStorageFilesCreateResponse(storageEntity,businessObjectDataEntity,storageFiles);}  }
class C{  @Override public void registerPackages(ResourceSet resourceSet){  super.registerPackages(resourceSet);}  }
class C{  Pair(int index,double value){  this.index=index;  this.value=value;}  }
class C{  private static void probabilisticUnionTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"probabilistic_probabilistic",TestType.UNION);  final Random random=new Random(randomLong());  final HLL hll=newHLL(HLLType.EMPTY);  final HLL emptyHLL=newHLL(HLLType.EMPTY);  cumulativeUnionLine(output,hll,emptyHLL,schemaVersion);  for (int i=0; i < 1000; i++) {    final HLL fullHLL=newHLL(HLLType.FULL);    final int elementCount=random.nextInt(10000);    for (int j=0; j < elementCount; j++) {      fullHLL.addRaw(random.nextLong());    }    cumulativeUnionLine(output,hll,fullHLL,schemaVersion);  }  output.flush();  output.close();}  }
class C{  @Nullable public <K>ClusterNode mapKeyToNode(@Nullable String cacheName,K key) throws IgniteCheckedException {  Map<ClusterNode,Collection<K>> map=keysToNodes(cacheName,F.asList(key));  return !F.isEmpty(map) ? F.first(map.keySet()) : null;}  }
class C{  public EventProcessorHost(final String hostName,final String eventHubPath,final String consumerGroupName,final String eventHubConnectionString,final String storageConnectionString,final String storageContainerName,final String storageBlobPrefix){  this(hostName,eventHubPath,consumerGroupName,eventHubConnectionString,storageConnectionString,storageContainerName,storageBlobPrefix,(ExecutorService)null);}  }
class C{  public String[] createCmds(NodeRunOptions nodeRunOptions) throws IOException {  final ArrayList<String> commands=new ArrayList<>();  commands.add(nodeJsBinary.get().getBinaryAbsolutePath());  final String nodeOptions=nodeRunOptions.getEngineOptions();  if (nodeOptions != null) {    for (    String nodeOption : Splitter.on(BREAKING_WHITESPACE).omitEmptyStrings().split(nodeOptions)) {      commands.add(nodeOption);    }  }  final StringBuilder elfData=getELFCode(nodeRunOptions.getInitModules(),nodeRunOptions.getExecModule(),nodeRunOptions.getExecutionData());  final File elf=createTempFileFor(elfData.toString());  commands.add(elf.getCanonicalPath());  if (nodeRunOptions.getSystemLoader() == SystemLoaderInfo.COMMON_JS) {    commands.add(CJS_COMMAND);  }  return commands.toArray(new String[]{});}  }
class C{  public static void exportObject(Remote obj) throws IOException {  if (proxy == null)   throw new IOException("RMI object cannot be exported, RMI/IIOP not available");  proxy.exportObject(obj);}  }
class C{  @Override public void load(Entity unit) throws IllegalArgumentException {  if (!canLoad(unit)) {    throw new IllegalArgumentException("Can not load " + unit.getShortName() + " into this bay. "+ currentSpace);  }  currentSpace-=1;  troops.addElement(unit.getId());}  }
class C{  @Override public CategoricalTable toDiscrete(){  if (discreteCache == null) {    Map<double[],Double> discretisation=function.discretise(Settings.discretisationBuckets);    CategoricalTable.Builder builder=new CategoricalTable.Builder(variable);    for (    double[] value : discretisation.keySet()) {      Value val=(value.length > 1) ? new ArrayVal(value) : ValueFactory.create(value[0]);      builder.addRow(val,discretisation.get(value));    }    discreteCache=builder.build().toDiscrete();  }  return discreteCache;}  }
class C{  public void addPacketWriterListener(PacketListener packetListener,PacketFilter packetFilter){  addPacketSendingListener(packetListener,packetFilter);}  }
class C{  public void saveHandlers(){  if (this.chunkDataHandlers != null)   for (  ChunkDataBase handler : this.chunkDataHandlers) {    NBTTagCompound nbt=handler.writeToNBT(new NBTTagCompound());    this.nbt.setTag(handler.getName(),nbt);  }}  }
class C{  public void registerMediator(Mediator mediator){  if (view != null) {    view.registerMediator(mediator);  }}  }
class C{  public List selectByExample(UserExample example) throws SQLException {  List list=sqlMapClient.queryForList("t_user.ibatorgenerated_selectByExample",example);  return list;}  }
class C{  private boolean readMetaData() throws IOException {  SegmentExtent10 segment=_metaSegment;  try (ReadStream is=openRead(segment.address(),segment.length())){    is.position(META_OFFSET);    while (readMetaEntry(is)) {    }  }   return true;}  }
class C{  public BaseCreateSessionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options,final ChunkedUploadSessionDescriptor item){  super(requestUrl,client,options);  mItem=item;}  }
class C{  public HttpRequestExecutor(){  super();}  }
class C{  public LimitedSizeSPARQLMinusIteration(Iteration<BindingSet,QueryEvaluationException> leftArg,Iteration<BindingSet,QueryEvaluationException> rightArg,boolean distinct,AtomicLong used,long maxSize){  super(leftArg,rightArg,distinct);  this.used=used;  this.maxSize=maxSize;}  }
class C{  @Deprecated public ServiceInvocationException reCreateOnClientSide(CorrelationId correlationId){  return null;}  }
class C{  void parseHeader(String headerName,String headerValue,ParseHeaderState state){  List<Type> context=state.context;  ClassInfo classInfo=state.classInfo;  ArrayValueMap arrayValueMap=state.arrayValueMap;  StringBuilder logger=state.logger;  if (logger != null) {    logger.append(headerName + ": " + headerValue).append(StringUtils.LINE_SEPARATOR);  }  FieldInfo fieldInfo=classInfo.getFieldInfo(headerName);  if (fieldInfo != null) {    Type type=Data.resolveWildcardTypeOrTypeVariable(context,fieldInfo.getGenericType());    if (Types.isArray(type)) {      Class<?> rawArrayComponentType=Types.getRawArrayComponentType(context,Types.getArrayComponentType(type));      arrayValueMap.put(fieldInfo.getField(),rawArrayComponentType,parseValue(rawArrayComponentType,context,headerValue));    } else     if (Types.isAssignableToOrFrom(Types.getRawArrayComponentType(context,type),Iterable.class)) {      @SuppressWarnings("unchecked") Collection<Object> collection=(Collection<Object>)fieldInfo.getValue(this);      if (collection == null) {        collection=Data.newCollectionInstance(type);        fieldInfo.setValue(this,collection);      }      Type subFieldType=type == Object.class ? null : Types.getIterableParameter(type);      collection.add(parseValue(subFieldType,context,headerValue));    } else {      fieldInfo.setValue(this,parseValue(type,context,headerValue));    }  } else {    @SuppressWarnings("unchecked") ArrayList<String> listValue=(ArrayList<String>)this.get(headerName);    if (listValue == null) {      listValue=new ArrayList<String>();      this.set(headerName,listValue);    }    listValue.add(headerValue);  }}  }
class C{  public static List listRegisteredLoggers(){  return new ArrayList(LOGGER_NAMES);}  }
class C{  protected final boolean isSessionOpen(){  if (sessionTracker != null) {    return sessionTracker.getOpenSession() != null;  }  return false;}  }
class C{  @Override public void endElement(final String namespaceURI,final String localName,final String qName) throws SAXException {  final StackedObject so=(StackedObject)openNodes.pop();  final Object endingObject=so.object;  if (endingObject == null)   return;  if (so.childInfos != null && so.childInfos.size() > 0) {    final Iterator iter=so.childInfos.values().iterator();    while (iter.hasNext())     ((ChildInfo)iter.next()).endChild(endingObject);  }}  }
class C{  protected void run(){  activeTester=this;  if (com.sun.tools.apt.Main.process(args) != 0) {    throw new Error("apt errors encountered.");  }}  }
class C{  public static void goToLine(IEditorPart editorPart,int lineNumber){  if (!(editorPart instanceof ITextEditor) || lineNumber < DEFAULT_LINE_IN_EDITOR) {    return;  }  ITextEditor editor=(ITextEditor)editorPart;  IDocument document=editor.getDocumentProvider().getDocument(editor.getEditorInput());  if (document != null) {    IRegion lineInfo=null;    try {      lineInfo=document.getLineInformation(lineNumber - 1);    } catch (    BadLocationException e) {    }    if (lineInfo != null) {      editor.selectAndReveal(lineInfo.getOffset(),lineInfo.getLength());    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.388 -0500",hash_original_method="CA3503A44AF2EBF75D9BE6634816F5BD",hash_generated_method="2F1D840268C9E28C26FC89221FEC809F") static private int indexOfLastNetworkChar(String a){  int pIndex, wIndex;  int origLength;  int trimIndex;  origLength=a.length();  pIndex=a.indexOf(PAUSE);  wIndex=a.indexOf(WAIT);  trimIndex=minPositive(pIndex,wIndex);  if (trimIndex < 0) {    return origLength - 1;  } else {    return trimIndex - 1;  }}  }
class C{  WebXmlProcessor(ServletContext context){  if (context != null) {    scanForFacesServlet(context);  }}  }
class C{  public T caseModifiableElement(ModifiableElement object){  return null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.880 -0500",hash_original_method="A7DAC75B31530E6CD4845B1030678B66",hash_generated_method="9B207B429FF314BC173047239A3E4983") void onUssdFinished(String ussdMessage,boolean isUssdRequest){  if (state == State.PENDING) {    if (ussdMessage == null) {      message=context.getText(com.android.internal.R.string.mmiComplete);    } else {      message=ussdMessage;    }    this.isUssdRequest=isUssdRequest;    if (!isUssdRequest) {      state=State.COMPLETE;    }    phone.onMMIDone(this);  }}  }
class C{  @Override @Deprecated public boolean shouldCalculateWeights(){  return false;}  }
class C{  public Map<Integer,Double> compute(int... dataset){  return computeInPlace(intsToDoubles(dataset));}  }
class C{  protected IceMediaStream(Agent parentAgent,String name){  logger=new org.ice4j.util.Logger(classLogger,parentAgent.getLogger());  this.name=name;  this.parentAgent=parentAgent;  checkList=new CheckList(this);}  }
class C{  @Dev public SendPrivateMessageAction(@Dev(defaultValue="SERVER") final NotificationType type,final String text){  this.text=checkNotNull(text);  this.type=type;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void clear(){  names.clear();  types.clear();  values.clear();}  }
class C{  public static int[] indexOf(String s,String arr[]){  return indexOf(s,arr,0);}  }
class C{  protected int index(Object obj){  if (obj == null)   return indexForNull();  final int hash=hash(obj) & 0x7fffffff;  int index=hash % _set.length;  Object cur=_set[index];  if (cur == FREE) {    return -1;  }  if (cur == obj || equals(obj,cur)) {    return index;  }  return indexRehashed(obj,index,hash,cur);}  }
class C{  public SourceModel sourceForClass(ReferenceType refType){  SourceModel sm=classToSource.get(refType);  if (sm != null) {    return sm;  }  try {    String filename=refType.sourceName();    String refName=refType.name();    int iDot=refName.lastIndexOf('.');    String pkgName=(iDot >= 0) ? refName.substring(0,iDot + 1) : "";    String full=pkgName.replace('.',File.separatorChar) + filename;    File path=sourcePath.resolve(full);    if (path != null) {      sm=sourceForFile(path);      classToSource.put(refType,sm);      return sm;    }    return null;  } catch (  AbsentInformationException e) {    return null;  }}  }
class C{  private void addInstructionCount(){  int count=cfw.getCurrentCodeOffset() - savedCodeOffset;  addInstructionCount(Math.max(count,1));}  }
class C{  int crossOver(int index,E x){  int minChildIndex=findMinChild(index);  if ((minChildIndex > 0) && (ordering.compare(elementData(minChildIndex),x) < 0)) {    queue[index]=elementData(minChildIndex);    queue[minChildIndex]=x;    return minChildIndex;  }  return crossOverUp(index,x);}  }
class C{  @Deprecated private void generateColumnIndexCode(MethodSpec.Builder builder,Collection<ColumnAnnotateable> elements,String cursorVarName,String throwOnIndexNotFoundVarName){  for (  ColumnAnnotateable e : elements) {    builder.addStatement("int $LIndex",e.getColumnName());  }  builder.beginControlFlow("if ($L)",throwOnIndexNotFoundVarName);  for (  ColumnAnnotateable e : elements) {    builder.addStatement("$LIndex = $L.getColumnIndexOrThrow($S)",e.getColumnName(),cursorVarName,e.getColumnName());  }  builder.nextControlFlow("else");  for (  ColumnAnnotateable e : elements) {    builder.addStatement("$LIndex = $L.getColumnIndex($S)",e.getColumnName(),cursorVarName,e.getColumnName());  }  builder.endControlFlow();}  }
class C{  private void buildTasksLoadsRectangles(List<Load> partition,int ypos){  List<Offset> offsets=getDefaultOffsets();  Iterator<Load> loads=partition.iterator();  while (loads.hasNext()) {    final Load nextLoad=loads.next();    final Date nextStart=nextLoad.startDate;    final Date nextEnd=nextLoad.endDate;    final Rectangle nextRect=createRectangle(offsets,nextStart,nextEnd,ypos);    if (nextRect == null) {      continue;    }    String style;    if (nextLoad.load < 100f) {      style="load.underload";    } else     if (nextLoad.load > 100f) {      style="load.overload";    } else {      style="load.normal";    }    style+=".first.last";    nextRect.setStyle(style);    nextRect.setModelObject(new ResourceLoad(nextLoad.load));    createLoadText(nextRect,nextLoad);  }}  }
class C{  void writeRaw(String data) throws IOException {  writer.write(data);}  }
class C{  public double norm(double[] x1,double[] x2){switch (normToUse) {case NORM_EUCLIDEAN_NORMALISED:    return euclideanNorm(x1,x2) / Math.sqrt(x1.length);case NORM_MAX_NORM:  return maxNorm(x1,x2);case NORM_EUCLIDEAN_SQUARED:return euclideanNormSquared(x1,x2);case NORM_EUCLIDEAN:default :return euclideanNorm(x1,x2);}}  }
class C{  public static void main(final String[] args){  TransitSchedule schedule=ScheduleTools.readTransitSchedule(args[0]);  TransitSchedule debug=ScheduleTools.createSchedule();  for (  TransitLine tl : schedule.getTransitLines().values()) {    if (tl.getId().toString().equals(args[1])) {      for (      TransitRoute tr : tl.getRoutes().values()) {        if (tr.getId().toString().equals(args[2])) {          TransitLine line=debug.getFactory().createTransitLine(tl.getId());          line.addRoute(tr);          debug.addTransitLine(line);          for (          TransitRouteStop rs : tr.getStops()) {            if (!debug.getFacilities().containsKey(rs.getStopFacility().getId())) {              debug.addStopFacility(rs.getStopFacility());            }          }        }      }    }  }  ScheduleTools.writeTransitSchedule(debug,args[3]);}  }
class C{  @Override public boolean retainAll(Collection<?> that){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public static boolean hasBuddy(String name){  if (User.isNull()) {    return false;  }  RPObject rpobject=User.get().rpObject;  return rpobject.has("buddies",name);}  }
class C{  @Override protected void translateCore(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  final OperandSize dw=OperandSize.DWORD;  final OperandSize wd=OperandSize.WORD;  final OperandSize bt=OperandSize.BYTE;  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0).getChildren().get(0).getChildren().get(0);  final IOperandTreeNode shifterRootOperand=instruction.getOperands().get(0).getRootNode().getChildren().get(0).getChildren().get(0).getChildren().get(1);  final String firstRegister=registerOperand1.getValue();  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  final Pair<String,String> shifterOut=AddressingModeOneGenerator.generate(baseOffset,environment,instruction,instructions,shifterRootOperand);  final String memoryAddress=environment.getNextVariableString();  final String halfword=environment.getNextVariableString();  final String twoTimesHalfword=environment.getNextVariableString();  final String jumpTarget=environment.getNextVariableString();  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,firstRegister,dw,shifterOut.first(),dw,memoryAddress));  instructions.add(ReilHelpers.createLdm(baseOffset++,dw,memoryAddress,wd,halfword));  instructions.add(ReilHelpers.createMul(baseOffset++,wd,halfword,wd,String.valueOf(2),dw,twoTimesHalfword));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,"PC",dw,twoTimesHalfword,dw,jumpTarget));  instructions.add(ReilHelpers.createJcc(baseOffset++,bt,String.valueOf(1),dw,jumpTarget));}  }
class C{  public void assureBufferCapacity(final int len){  while (len > buffer.remaining()) {    int newCapacity=Math.max((int)(len + buffer.position() * BIG_SIZE_INCREASE),(int)((buffer.capacity() > 4194304) ? buffer.capacity() * BIG_SIZE_INCREASE : buffer.capacity() * NORMAL_INCREASE));    increase(newCapacity);  }}  }
class C{  public void attachDialogFields(DialogField[] dialogFields){  fAttachedDialogFields=dialogFields;  for (int i=0; i < dialogFields.length; i++) {    dialogFields[i].setEnabled(fIsSelected);  }}  }
class C{  @Override public final void postSetUp() throws Exception {  final Host host=Host.getHost(0);  server1=host.getVM(0);  server1.invoke(null);  client1=host.getVM(2);}  }
class C{  public boolean processIt(ProcessInfo pi,Trx trx,boolean managedTrx){  if (pi.getAD_PInstance_ID() == 0) {    MPInstance pInstance=new MPInstance(this,pi.getRecord_ID());    pInstance.setIsProcessing(true);    pInstance.saveEx();  }  boolean ok=false;  String Classname=getClassname();  if (Classname != null && Classname.length() > 0) {    pi.setClassName(Classname);    ok=startClass(pi,trx,managedTrx);  } else {    String ProcedureName=getProcedureName();    if (ProcedureName != null && ProcedureName.length() > 0) {      ok=startProcess(ProcedureName,pi,trx,managedTrx);    } else {      if (this.isReport()) {        ok=true;      } else {        String msg="No Classname or ProcedureName for " + getName();        pi.setSummary(msg,ok);        log.warning(msg);      }    }  }  return ok;}  }
class C{  public float mean(){  return sum() / length;}  }
class C{  private void addLinearSegments(Coordinate[] pts){  for (int i=0; i < pts.length - 1; i++) {    double segmentLen=pts[i].distance(pts[i + 1]);    totalLength+=segmentLen;    double midx=(pts[i].x + pts[i + 1].x) / 2;    centSum.x+=segmentLen * midx;    double midy=(pts[i].y + pts[i + 1].y) / 2;    centSum.y+=segmentLen * midy;  }}  }
class C{  protected MetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(ItemMeta.class);}  }
class C{  public MLUInt8(String name,Byte[] vals,int m){  super(name,MLArray.mxUINT8_CLASS,vals,m);}  }
class C{  public void loadFile(){  int retVal;  int i;  String filename;  retVal=m_FileChooser.showOpenDialog(this);  if (retVal != ConverterFileChooser.APPROVE_OPTION) {    return;  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  for (i=0; i < m_FileChooser.getSelectedFiles().length; i++) {    filename=m_FileChooser.getSelectedFiles()[i].getAbsolutePath();    loadFile(filename,m_FileChooser.getLoader());  }  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.SOFTWARE_PATTERN___IS_A1:    return getIsA_1();case UmplePackage.SOFTWARE_PATTERN___SINGLETON_1:  return getSingleton_1();case UmplePackage.SOFTWARE_PATTERN___IMMUTABLE_1:return getImmutable_1();case UmplePackage.SOFTWARE_PATTERN___KEY_DEFINITION_1:return getKeyDefinition_1();case UmplePackage.SOFTWARE_PATTERN___CODE_INJECTION_1:return getCodeInjection_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void receiveChunk() throws IOException {  if (this.socket != null) {synchronized (getCommBuffer()) {      readChunk();    }  } else {    throw new IOException(LocalizedStrings.ChunkedMessage_DEAD_CONNECTION.toLocalizedString());  }}  }
class C{  public void addAll(AccessibleRelation[] relations){  if (relations.length != 0) {    if (this.relations == null) {      this.relations=new Vector(relations.length);    }    for (int i=0; i < relations.length; i++) {      add(relations[i]);    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("UOM[");  sb.append("ID=").append(get_ID()).append(", Name=").append(getName());  return sb.toString();}  }
class C{  public boolean isUuid(){  return uuid;}  }
class C{  public final void add(Matrix3d m1){  this.m00+=m1.m00;  this.m01+=m1.m01;  this.m02+=m1.m02;  this.m10+=m1.m10;  this.m11+=m1.m11;  this.m12+=m1.m12;  this.m20+=m1.m20;  this.m21+=m1.m21;  this.m22+=m1.m22;}  }
class C{  public final int hashCode(){  int hash=37;  hash+=17 * this.clusters.hashCode() + 37;  return hash;}  }
class C{  final void addExplicitSubstitute(Context instanceeCtxt,UniqueString lhs,TreeNode stn,ExprOrOpArgNode sub){  int index;  for (index=0; index < this.substs.length; index++) {    if (lhs == this.substs[index].getOp().getName())     break;  }  if (index < this.substs.length) {    if (!this.substs[index].isImplicit()) {      errors.addError(stn.getLocation(),"Multiple substitutions for symbol '" + lhs.toString() + "' in substitution.");    } else {      this.substs[index].setExpr(sub,false);      this.substs[index].setExprSTN(stn);    }  } else {    SymbolNode lhsSymbol=instanceeCtxt.getSymbol(lhs);    if (!(lhsSymbol instanceof OpDeclNode)) {      return;    }    if (lhsSymbol != null) {      int newlength=this.substs.length + 1;      Subst[] newSubsts=new Subst[newlength];      Subst newSubst=new Subst((OpDeclNode)lhsSymbol,sub,stn,false);      System.arraycopy(this.substs,0,newSubsts,0,newlength - 1);      newSubsts[newlength - 1]=newSubst;      this.substs=newSubsts;    } else {      errors.addError(stn.getLocation(),"Illegal identifier '" + lhs + "' in LHS of substitution.");    }  }}  }
class C{  public void clear(){  super.clear();  graphicHash.clear();}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void queryBaudRate(){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  isBaudRateQueried=false;  sendBaudRateQueryFrame();  Log.i("Device " + this.name + ": Baud rate queried.");}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum > 1)   reportWrongNumberArgs();}  }
class C{  public boolean systemShouldAdvance(){  return !isAtRest() || !wasAtRest();}  }
class C{  public double calculateLogLikelihood(){  double logL=0.0;  for (  Statistic statistic : dataList) {    for (int j=0; j < statistic.getDimension(); j++) {      logL+=-beta / statistic.getStatisticValue(j);    }  }  return logL;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public BufferedImageFilter(BufferedImageOp op){  super();  if (op == null) {    throw new NullPointerException("Operation cannot be null");  }  bufferedImageOp=op;}  }
class C{  public FromContainsFilter(String from){  if (from == null) {    throw new IllegalArgumentException("Parameter cannot be null.");  }  this.from=from.toLowerCase();}  }
class C{  private void finalMove(){  FilesUtils.deleteRecursively(tmpFolder);  progressBar.setValue(progressBar.getMaximum());  progressBar.setString(R.getString("progress.done"));  progressBar.setEnabled(false);  this.threadWatcher.updateProgress();  this.threadWatcher.done(this);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static <A>A[] append(final A[] a,final A[] b){  final int alen=a.length;  final int blen=b.length;  final A[] res=Arrays.copyOf(a,alen + blen);  System.arraycopy(b,0,res,alen,blen);  return res;}  }
class C{  public boolean isReadWrite(){  return super.isEnabled();}  }
class C{  final void dispose(){synchronized (SequencedEvent.class) {    if (disposed) {      return;    }    if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getCurrentSequencedEvent() == this) {      KeyboardFocusManager.getCurrentKeyboardFocusManager().setCurrentSequencedEvent(null);    }    disposed=true;  }  if (appContext != null) {    SunToolkit.postEvent(appContext,new SentEvent());  }  SequencedEvent next=null;synchronized (SequencedEvent.class) {    SequencedEvent.class.notifyAll();    if (list.getFirst() == this) {      list.removeFirst();      if (!list.isEmpty()) {        next=(SequencedEvent)list.getFirst();      }    } else {      list.remove(this);    }  }  if (next != null && next.appContext != null) {    SunToolkit.postEvent(next.appContext,new SentEvent());  }}  }
class C{  public static FileSetInfo lockFileSet(ZooKeeperManager zkManager,String fileSet) throws Exception {  return lockFileSet(zkManager,fileSet,CreateMode.EPHEMERAL);}  }
class C{  List optimizeBulkGet(CompiledRegion cRgn,ExecutionContext context) throws RegionNotFoundException, TypeMismatchException, NameResolutionException, FunctionDomainException, QueryInvocationTargetException {  boolean match=false;  CompiledValue resolution=null;  if (this.elm instanceof CompiledID) {    String id=((CompiledID)this.elm).getId();    if (id.equals("key") || id.equals("getKey")) {      resolution=context.resolve(id);      if (resolution instanceof CompiledPath) {        resolution=((CompiledPath)resolution).getReceiver();      }    }  } else   if (this.elm instanceof CompiledPath) {    CompiledPath cPath=(CompiledPath)this.elm;    if (cPath.getTailID().equals("key") || cPath.getTailID().equals("getKey")) {      CompiledValue cVal=cPath.getReceiver();      if (cVal instanceof CompiledID) {        resolution=context.resolve(((CompiledID)cVal).getId());      }    }  } else   if (this.elm instanceof CompiledOperation) {    CompiledOperation cOp=(CompiledOperation)this.elm;    if (cOp.getMethodName().equals("key") || cOp.getMethodName().equals("getKey")) {      if (cOp.getReceiver(context) instanceof CompiledID) {        resolution=context.resolve(((CompiledID)cOp.getReceiver(context)).getId());      } else       if (cOp.getReceiver(context) == null) {        match=true;      }    }  }  if (!match && !(resolution instanceof RuntimeIterator)) {    return null;  }  if (context.isDependentOnAnyIterator(this.colln)) {    return null;  }  Object evalColln=evaluateColln(context);  if (evalColln == null || evalColln == QueryService.UNDEFINED) {    return null;  }  Collection colln=null;  if (evalColln instanceof Collection) {    colln=(Collection)evalColln;  }  if (evalColln instanceof Object[]) {    colln=Arrays.asList((Object[])evalColln);  }  if (colln != null) {    QRegion rgn=(QRegion)cRgn.evaluate(context);    if (rgn.keySet().size() < colln.size()) {      return null;    }    if (logger.isDebugEnabled()) {      logger.debug("Executing BULK GET on keys {}, in region {}",colln,rgn);    }    List results=new ArrayList(colln.size());    for (Iterator itr=colln.iterator(); itr.hasNext(); ) {      Object key=itr.next();      Region.Entry entry=rgn.getEntry(key);      if (entry != null) {        results.add(entry);      }    }    return results;  }  return null;}  }
class C{  private static boolean isIntendedException(Exception e,Class<?> clazz){  final String message=e.getMessage();  return (!TextUtils.isEmpty(message) && message.startsWith(clazz.getName()));}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void addFieldValue(int fldId,Object val) throws Exception {  m_flds.addFieldValue(fldId,val);}  }
class C{  public boolean editCellAt(int i,int j,EventObject object){  if (object instanceof MouseEvent && ((MouseEvent)object).getClickCount() == 2) {    editTimer.stop();    if (cellEditor != null)     cellEditor.stopCellEditing();    view.openItem();    return false;  }  if (!isCellSelected(i,j)) {    editTimer.stop();    if (cellEditor != null)     cellEditor.stopCellEditing();    return false;  }  lasti=i;  lastj=j;  lastobject=object;  editTimer.start();  return false;}  }
class C{  public static AvedevProjectionExpression avedev(Expression expression){  return new AvedevProjectionExpression(expression,false);}  }
class C{  private void splitBulkRequest(SnmpPduBulk req,int nonRepeaters,int maxRepetitions,int R){  for (Enumeration<SnmpMibAgent> e=mibs.elements(); e.hasMoreElements(); ) {    final SnmpMibAgent agent=e.nextElement();    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {      SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"splitBulkRequest","Create a sub with : " + agent + " "+ nonRepeaters+ " "+ maxRepetitions+ " "+ R);    }    subs.put(agent,new SnmpSubBulkRequestHandler(adaptor,agent,req,nonRepeaters,maxRepetitions,R));  }}  }
class C{  public static MIssue create(LogRecord record){  s_log.config(record.getMessage());  MSystem system=MSystem.get(Env.getCtx());  if (!DB.isConnected() || system == null || !system.isAutoErrorReport())   return null;  MIssue issue=new MIssue(record);  String error=issue.report();  issue.saveEx();  if (error != null)   return null;  return issue;}  }
class C{  public static Color parseColor(String colorString,boolean forceAlpha) throws NumberFormatException {  return ColorFactory.parseColor(colorString,forceAlpha);}  }
class C{  public static void checkValidRandomVariableName(String name) throws IllegalArgumentException {  if (null == name || name.trim().length() == 0 || name.trim().length() != name.length() || name.contains(" ")) {    throw new IllegalArgumentException("Name of RandomVariable must be specified and contain no leading, trailing or embedded spaces.");  }  if (name.substring(0,1).toLowerCase().equals(name.substring(0,1))) {    throw new IllegalArgumentException("Name must start with a leading upper case letter.");  }}  }
class C{  public void verifyClients(int port,int numberOfClients,boolean useSSL,AuthenticationInfo securityInfo,boolean silentFail) throws Exception {  server=new EchoServer("127.0.0.1",port,useSSL,null,null,silentFail);  server.start();  EchoClient[] clients=new EchoClient[numberOfClients];  if (useSSL) {    Assert.assertTrue(securityInfo != null);  }  for (int i=0; i < clients.length; i++) {    EchoClient client=new EchoClient("127.0.0.1",port,useSSL,100);    client.setEnabledCiphers(SecurityHelper.getCiphers());    client.setEnabledProtocols(SecurityHelper.getProtocols());    client.start();    clients[i]=client;  }  Thread.sleep(5000);  try {    for (    EchoClient client : clients) {      Assert.assertTrue("Shut down client: " + client.getName(),client.shutdown());      Assert.assertTrue("Expect least 10 operations per client: " + client.getName(),client.getEchoCount() >= 10);      Assert.assertNull("Do not expect errors for client: " + client.getName(),client.getThrowable());    }  }  finally {    for (    EchoClient client : clients)     client.shutdown();  }  Assert.assertNull("Echo server does not have any errors",server.getThrowable());}  }
class C{  public MersenneTwister(int seed){  setSeed(seed);}  }
class C{  final public boolean drawRuleEquals(Position other){  for (int i=0; i < 64; i++) {    if (squares[i] != other.squares[i])     return false;  }  if (whiteMove != other.whiteMove)   return false;  if (castleMask != other.castleMask)   return false;  if (epSquare != other.epSquare)   return false;  return true;}  }
class C{  LineSeparatorUtil(final String lineSeparatorString){  string=lineSeparatorString.replaceAll("\\\\r","\r").replaceAll("\\\\n","\n");  if (isIllegalString()) {    throw new FailureException("LineSeparator must be either \\n, \\r or \\r\\n, but separator characters were " + Arrays.toString(lineSeparatorString.getBytes(Charset.defaultCharset())));  }}  }
class C{  public static void murmurhash3_x64_128(byte[] key,int offset,int len,int seed,LongPair out){  long h1=seed & 0x00000000FFFFFFFFL;  long h2=seed & 0x00000000FFFFFFFFL;  final long c1=0x87c37b91114253d5L;  final long c2=0x4cf5ad432745937fL;  int roundedEnd=offset + (len & 0xFFFFFFF0);  for (int i=offset; i < roundedEnd; i+=16) {    long k1=getLongLittleEndian(key,i);    long k2=getLongLittleEndian(key,i + 8);    k1*=c1;    k1=Long.rotateLeft(k1,31);    k1*=c2;    h1^=k1;    h1=Long.rotateLeft(h1,27);    h1+=h2;    h1=h1 * 5 + 0x52dce729;    k2*=c2;    k2=Long.rotateLeft(k2,33);    k2*=c1;    h2^=k2;    h2=Long.rotateLeft(h2,31);    h2+=h1;    h2=h2 * 5 + 0x38495ab5;  }  long k1=0;  long k2=0;  int r=len & 15;  if (r == 15) {    k2=(key[roundedEnd + 14] & 0xffL) << 48;  } else   if (r == 14) {    k2|=(key[roundedEnd + 13] & 0xffL) << 40;  } else   if (r == 13) {    k2|=(key[roundedEnd + 12] & 0xffL) << 32;  } else   if (r == 12) {    k2|=(key[roundedEnd + 11] & 0xffL) << 24;  } else   if (r == 11) {    k2|=(key[roundedEnd + 10] & 0xffL) << 16;  } else   if (r == 10) {    k2|=(key[roundedEnd + 9] & 0xffL) << 8;  } else   if (r == 9) {    k2|=(key[roundedEnd + 8] & 0xffL);    k2*=c2;    k2=Long.rotateLeft(k2,33);    k2*=c1;    h2^=k2;  } else   if (r == 8) {    k1=((long)key[roundedEnd + 7]) << 56;  } else   if (r == 7) {    k1|=(key[roundedEnd + 6] & 0xffL) << 48;  } else   if (r == 6) {    k1|=(key[roundedEnd + 5] & 0xffL) << 40;  } else   if (r == 5) {    k1|=(key[roundedEnd + 4] & 0xffL) << 32;  } else   if (r == 4) {    k1|=(key[roundedEnd + 3] & 0xffL) << 24;  } else   if (r == 3) {    k1|=(key[roundedEnd + 2] & 0xffL) << 16;  } else   if (r == 2) {    k1|=(key[roundedEnd + 1] & 0xffL) << 8;  } else   if (r == 1) {    k1|=(key[roundedEnd] & 0xffL);    k1*=c1;    k1=Long.rotateLeft(k1,31);    k1*=c2;    h1^=k1;  }  h1^=len;  h2^=len;  h1+=h2;  h2+=h1;  h1=fmix64(h1);  h2=fmix64(h2);  h1+=h2;  h2+=h1;  out.val1=h1;  out.val2=h2;}  }
class C{  public void writeTo(java.io.File file) throws IOException {  Files.write(file.toPath(),getBytes());}  }
class C{  public RawImage(int width,int height,byte[] data,boolean hasAlpha,int stride){  if (!ImageLoader.EMBEDDED)   throw new UnsupportedOperationException("RawImage objects with byte[] backed data is only supported on embedded.");  this.width=width;  this.height=height;  this.dataArr=data;  this.hasAlpha=hasAlpha;  this.stride=stride;}  }
class C{  private void submergeSubsVsOnlyAir(final IDelegateBridge bridge){  if (Match.allMatch(m_attackingUnits,Matches.UnitIsAir) && Match.someMatch(m_defendingUnits,Matches.UnitIsSub)) {    final List<Unit> defendingSubs=Match.getMatches(m_defendingUnits,Matches.UnitIsSub);    submergeUnits(defendingSubs,true,bridge);  } else   if (Match.allMatch(m_defendingUnits,Matches.UnitIsAir) && Match.someMatch(m_attackingUnits,Matches.UnitIsSub)) {    final List<Unit> attackingSubs=Match.getMatches(m_attackingUnits,Matches.UnitIsSub);    submergeUnits(attackingSubs,false,bridge);  }}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Rectangle alloc=a.getBounds();  RSyntaxTextArea textArea=(RSyntaxTextArea)getContainer();  alloc.height=textArea.getLineHeight();  alloc.width=1;  int p0=getStartOffset();  int p1=getEndOffset();  int testP=(b == Position.Bias.Forward) ? pos : Math.max(p0,pos - 1);  RSyntaxDocument doc=(RSyntaxDocument)getDocument();  Element map=doc.getDefaultRootElement();  int line=map.getElementIndex(p0);  Token tokenList=doc.getTokenListForLine(line);  float x0=alloc.x;  while (p0 < p1) {    x0=RSyntaxUtilities.makeTokenListStartAt(tokenList,p0,WrappedSyntaxView.this,textArea,x0);    int p=calculateBreakPosition(p0,tokenList,x0);    if ((pos >= p0) && (testP < p)) {      alloc=RSyntaxUtilities.getLineWidthUpTo(textArea,s,p0,pos,WrappedSyntaxView.this,alloc,alloc.x);      return alloc;    }    if (p == p1 - 1 && pos == p1 - 1) {      if (pos > p0) {        alloc=RSyntaxUtilities.getLineWidthUpTo(textArea,s,p0,pos,WrappedSyntaxView.this,alloc,alloc.x);      }      return alloc;    }    p0=(p == p0) ? p1 : p;    alloc.y+=alloc.height;  }  throw new BadLocationException(null,pos);}  }
class C{  private void shrinkThreadPool(int newSize){  while (messageProcessors.size() > newSize) {    MessageProcessor mp=messageProcessors.remove(0);    mp.stop();  }}  }
class C{  @Override public synchronized void paint(Graphics g,JComponent c){  AbstractButton b=(AbstractButton)c;  ButtonModel model=b.getModel();  Font f=c.getFont();  g.setFont(f);  FontMetrics fm=SwingUtilities2.getFontMetrics(c,g,f);  Insets i=c.getInsets();  size=b.getSize(size);  viewRect.x=i.left;  viewRect.y=i.top;  viewRect.width=size.width - (i.right + viewRect.x);  viewRect.height=size.height - (i.bottom + viewRect.y);  iconRect.x=iconRect.y=iconRect.width=iconRect.height=0;  textRect.x=textRect.y=textRect.width=textRect.height=0;  Icon altIcon=b.getIcon();  Icon selectedIcon=null;  Icon disabledIcon=null;  String text=SwingUtilities.layoutCompoundLabel(c,fm,b.getText(),altIcon != null ? altIcon : getDefaultIcon(),b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),viewRect,iconRect,textRect,b.getText() == null ? 0 : b.getIconTextGap());  if (c.isOpaque()) {    g.setColor(b.getBackground());    g.fillRect(0,0,size.width,size.height);  }  if (altIcon != null) {    if (!model.isEnabled()) {      if (model.isSelected()) {        altIcon=b.getDisabledSelectedIcon();      } else {        altIcon=b.getDisabledIcon();      }    } else     if (model.isPressed() && model.isArmed()) {      altIcon=b.getPressedIcon();      if (altIcon == null) {        altIcon=b.getSelectedIcon();      }    } else     if (model.isSelected()) {      if (b.isRolloverEnabled() && model.isRollover()) {        altIcon=b.getRolloverSelectedIcon();        if (altIcon == null) {          altIcon=b.getSelectedIcon();        }      } else {        altIcon=b.getSelectedIcon();      }    } else     if (b.isRolloverEnabled() && model.isRollover()) {      altIcon=b.getRolloverIcon();    }    if (altIcon == null) {      altIcon=b.getIcon();    }    altIcon.paintIcon(c,g,iconRect.x,iconRect.y);  } else {    getDefaultIcon().paintIcon(c,g,iconRect.x,iconRect.y);  }  if (text != null) {    View v=(View)c.getClientProperty(BasicHTML.propertyKey);    if (v != null) {      v.paint(g,textRect);    } else {      paintText(g,b,textRect,text);    }    if (b.hasFocus() && b.isFocusPainted() && textRect.width > 0 && textRect.height > 0) {      paintFocus(g,textRect,size);    }  }}  }
class C{  public CurlFilter(){  super(ConvolveFilter.ZERO_EDGES);}  }
class C{  public void addBitmap(float lt,float ln,int w,int h,byte[] bytes,LinkProperties properties) throws IOException {  LinkBitmap.write(lt,ln,w,h,bytes,properties,link.dos);}  }
class C{  @Override public void invoke(IN next){  int numberOfSubTasks=getRuntimeContext().getNumberOfParallelSubtasks();  int indexofThisSubTask=getRuntimeContext().getIndexOfThisSubtask();  byte[] msg;  if (serializer == null) {    TypeInformation<IN> typeInfo=TypeExtractor.getForObject(next);    serializer=typeInfo.createSerializer(getRuntimeContext().getExecutionConfig());    try {      handler.sendOpen(indexofThisSubTask,numberOfSubTasks,SerializeUtil.serialize(serializer));    } catch (    IOException e) {      LOG.error("Could not serialize TypeSerializer",e);      return;    }  }  byte[] bytes;  try {    bytes=SerializeUtil.serialize(next,serializer);  } catch (  IOException e) {    LOG.error("Could not serialize input",e);    return;  }  handler.sendRecord(bytes);}  }
class C{  public Signature(final BigInteger r,final BigInteger s){  if (0 < r.compareTo(MAXIMUM_VALUE) || 0 < s.compareTo(MAXIMUM_VALUE)) {    throw new IllegalArgumentException("r and s must fit into 32 bytes");  }  this.r=ArrayUtils.toByteArray(r,32);  this.s=ArrayUtils.toByteArray(s,32);}  }
class C{  protected void load(){  if (!loaded) {    try {      update();    } catch (    AcmeRetryAfterException ex) {    }catch (    AcmeException ex) {      throw new AcmeProtocolException("Could not load lazily",ex);    }  }}  }
class C{  @Deprecated public ExtendedErrorDialog(String key,String errorMessage,Object... arguments){  this(ApplicationFrame.getApplicationFrame(),key,errorMessage,arguments);}  }
class C{  public void prefetch(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void add(@Nonnull IModule module){  touch();  subModules.add(module);}  }
class C{  public static boolean isApplicationInBackground(Context context){  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningTaskInfo> taskList=am.getRunningTasks(1);  if (taskList != null && !taskList.isEmpty()) {    ComponentName topActivity=taskList.get(0).topActivity;    if (topActivity != null && !topActivity.getPackageName().equals(context.getPackageName())) {      return true;    }  }  return false;}  }
class C{  @Override public void createPartControl(Composite parent){  viewer=new TreeViewer(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);  viewer.getTree().setHeaderVisible(true);  TreeColumn column=new TreeColumn(viewer.getTree(),SWT.LEFT);  column.setText(LOCATION);  column.setWidth(300);  column=new TreeColumn(viewer.getTree(),SWT.LEFT);  column.setText(ROLES);  column.setWidth(500);  viewer.setContentProvider(new SecurityViewContentProvider(this));  viewer.setLabelProvider(new SecurityViewLabelProvider());  viewer.setSorter(new NameSorter());  viewer.setInput(getViewSite());  makeActions();  hookContextMenu();  contributeToActionBars();}  }
class C{  public Coverage(double[] priors,int large){  super(priors,large);}  }
class C{  public static Builder newInstance(Id<VehicleType> typeId){  return new Builder(typeId);}  }
class C{  public static double[] pairOfCleanFactors(int maxProduct){  int[] easyNumbers={10,50,100,1000,10000};  int[][] easyDivisors={{2},{2,5,10},{5,10,25},{100,200,250},{1000,2000,2500}};  int index, sub_index, product=Integer.MAX_VALUE;  double[] nums=new double[2];  while (product > maxProduct) {    index=ExUtil.randomInt(0,easyNumbers.length - 1,false);    sub_index=ExUtil.randomInt(0,easyDivisors[index].length - 1,false);    product=easyNumbers[index] * randomInt(1,4,false);    nums[0]=easyDivisors[index][sub_index];    nums[1]=product / nums[0];  }  return nums;}  }
class C{  public V remove(Object key){  int hash=hash(key.hashCode());  Segment<K,V> s=segmentForHash(hash);  return s == null ? null : s.remove(key,hash,null);}  }
class C{  public boolean isExtensionPresent(String urn){  return extensions.containsKey(urn);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer("123456789");  for (int ai=0; ai < 3; ai++) {    for (int bi=0; bi < 3; bi++) {      buf.setCharAt(3 * ai + bi,Dimension.toDimensionSymbol(matrix[ai][bi]));    }  }  return buf.toString();}  }
class C{  final synchronized public SnmpValue duplicate(){  return (SnmpValue)clone();}  }
class C{  public Executor(){  super();  isCanceled=new AtomicBoolean();  progress=new ProgressHelper(this);  properties=new TypedProperties();  numberOfThreads=1;}  }
class C{  public void remove(){  throw new UnsupportedOperationException("The method remove() is not supported on this lexer.");}  }
class C{  public FastItemAdapter<Item> removeItemRange(int position,int itemCount){  mItemAdapter.removeRange(position,itemCount);  return this;}  }
class C{  public ThrottleWindow createThrottleWindow(){  ThrottleWindow tw=new ThrottleWindow();  tw.pack();  KeyListenerInstaller.installKeyListenerOnAllComponents(throttleCycler,tw);  throttleWindows.add(tw);  activeFrame=throttleWindows.indexOf(tw);  return tw;}  }
class C{  public static SegmentCommitInfo writeDoc(Random random,Directory dir,Document doc) throws IOException {  return writeDoc(random,dir,new MockAnalyzer(random,MockTokenizer.WHITESPACE,false),null,doc);}  }
class C{  public final float cos(float theta){  while (theta < 0) {    theta+=MathUtils.TWO_PI;  }  return sinLUT[((int)(theta * rad2deg) + quadrant) % period];}  }
class C{  public AssociationException(String msg){  super(msg);}  }
class C{  private void creatAWSRequestAndAsyncHandler(EnumerationCreationContext aws){  DescribeInstancesRequest request=new DescribeInstancesRequest();  Filter runningInstanceFilter=getAWSNonTerminatedInstancesFilter();  request.getFilters().add(runningInstanceFilter);  request.setMaxResults(getQueryPageSize());  request.setNextToken(aws.nextToken);  aws.describeInstancesRequest=request;  AsyncHandler<DescribeInstancesRequest,DescribeInstancesResult> resultHandler=new AWSEnumerationAsyncHandler(this,aws);  aws.resultHandler=resultHandler;}  }
class C{  private NodeIterator(NodeSet nodes,NodeIterator parent){  this.nodes=nodes;  this.parent=parent;  this.motifNodeID=parent.motifNodeID;  neighbourLists=new Stack<NodeSet>();  nodeCausingRestriction=new Stack<Node>();  minSetSize=nodes.size();}  }
class C{  private boolean processPhi(ValuePhiNode phi,PartialEscapeBlockState<?>[] states,int[] mergedVirtualObjects){  int virtualInputs=0;  boolean uniqueVirtualObject=true;  boolean ensureVirtual=true;  VirtualObjectNode[] virtualObjs=new VirtualObjectNode[states.length];  for (int i=0; i < states.length; i++) {    ValueNode alias=getAlias(getPhiValueAt(phi,i));    if (alias instanceof VirtualObjectNode) {      VirtualObjectNode virtual=(VirtualObjectNode)alias;      virtualObjs[i]=virtual;      ObjectState objectState=states[i].getObjectStateOptional(virtual);      if (objectState == null) {        assert getPhiValueAt(phi,i) instanceof PhiNode : "this should only happen for phi nodes";        return false;      }      if (objectState.isVirtual()) {        if (virtualObjs[0] != alias) {          uniqueVirtualObject=false;        }        ensureVirtual&=objectState.getEnsureVirtualized();        virtualInputs++;      }    }  }  if (virtualInputs == states.length) {    if (uniqueVirtualObject) {      addAndMarkAlias(virtualObjs[0],phi);      mergeEffects.deleteNode(phi);      return false;    } else {      boolean compatible=true;      boolean hasIdentity=false;      VirtualObjectNode firstVirtual=virtualObjs[0];      for (int i=0; i < states.length; i++) {        VirtualObjectNode virtual=virtualObjs[i];        hasIdentity|=virtual.hasIdentity();        boolean identitySurvives=virtual.hasIdentity() && Arrays.asList(mergedVirtualObjects).contains(virtual.getObjectId());        if (identitySurvives || !firstVirtual.type().equals(virtual.type()) || firstVirtual.entryCount() != virtual.entryCount()) {          compatible=false;          break;        }        if (!states[0].getObjectState(firstVirtual).locksEqual(states[i].getObjectState(virtual))) {          compatible=false;          break;        }      }      if (compatible && !hasIdentity) {        VirtualObjectNode virtual=getValueObjectVirtual(phi,virtualObjs[0]);        mergeEffects.addFloatingNode(virtual,"valueObjectNode");        mergeEffects.deleteNode(phi);        if (virtual.getObjectId() == -1) {          int id=virtualObjects.size();          virtualObjects.add(virtual);          virtual.setObjectId(id);        }        int[] virtualObjectIds=new int[states.length];        for (int i=0; i < states.length; i++) {          virtualObjectIds[i]=virtualObjs[i].getObjectId();        }        boolean materialized=mergeObjectStates(virtual.getObjectId(),virtualObjectIds,states);        addAndMarkAlias(virtual,virtual);        addAndMarkAlias(virtual,phi);        return materialized;      }    }  }  boolean materialized=false;  if (virtualInputs > 0) {    for (int i=0; i < states.length; i++) {      VirtualObjectNode virtual=virtualObjs[i];      if (virtual != null) {        Block predecessor=getPredecessor(i);        if (!ensureVirtual && states[i].getObjectState(virtual).isVirtual()) {          states[i].getObjectState(virtual).setEnsureVirtualized(false);        }        materialized|=ensureMaterialized(states[i],virtual.getObjectId(),predecessor.getEndNode(),blockEffects.get(predecessor),COUNTER_MATERIALIZATIONS_PHI);      }    }  }  for (int i=0; i < states.length; i++) {    VirtualObjectNode virtual=virtualObjs[i];    if (virtual != null) {      setPhiInput(phi,i,getAliasAndResolve(states[i],virtual));    }  }  return materialized;}  }
class C{  @Override public boolean isFirst() throws SQLException {  try {    debugCodeCall("isFirst");    checkClosed();    int row=result.getRowId();    return row == 0 && row < result.getRowCount();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Drawable fetchDrawable(String urlString){  try {    InputStream is=fetch(urlString);    Drawable drawable=Drawable.createFromResourceStream(App.getContext().getResources(),null,is,"src");    L.d("%d----------X------ %d--%s",drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),urlString);    drawable.setBounds(0,0,0 + drawable.getIntrinsicWidth(),0 + drawable.getIntrinsicHeight());    return drawable;  } catch (  Exception e) {    return null;  }}  }
class C{  public BooleanClause(Query query,Occur occur){  this.query=Objects.requireNonNull(query,"Query must not be null");  this.occur=Objects.requireNonNull(occur,"Occur must not be null");}  }
class C{  public boolean isExternalZoomEnabled(){  return mExternalZoomEnabled;}  }
class C{  public boolean isRoot(){  return (getParent() == null);}  }
class C{  public static void writeDOT(String filename,String graphName,ArrayList<GraphNode> nodes,ArrayList<GraphEdge> edges){  try {    FileWriter os=new FileWriter(filename);    os.write("digraph ",0,("digraph ").length());    if (graphName != null) {      os.write(graphName + " ",0,graphName.length() + 1);    }    os.write("{\n",0,("{\n").length());    GraphEdge e;    for (int i=0; i < edges.size(); i++) {      e=edges.get(i);      os.write(nodes.get(e.src).ID,0,nodes.get(e.src).ID.length());      os.write("->",0,("->").length());      os.write(nodes.get(e.dest).ID + "\n",0,nodes.get(e.dest).ID.length() + 1);    }    os.write("}\n",0,("}\n").length());    os.close();  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  protected void postorder(TreeNode<E> root){  if (root == null)   return;  Stack<TreeNode<E>> stack1=new Stack<>();  Stack<TreeNode<E>> stack2=new Stack<>();  stack1.push(root);  while (!stack1.empty()) {    TreeNode<E> node=stack1.pop();    stack2.push(node);    if (node.left != null)     stack1.push(node.left);    if (node.right != null)     stack1.push(node.right);  }  while (!stack2.empty()) {    System.out.print(stack2.pop().element + " ");  }}  }
class C{  public PropertyEditorSupport(){  setSource(this);}  }
class C{  public boolean equals(Object o){  if (this == o)   return true; else   if (o == null || !o.getClass().equals(this.getClass()))   return false;  JarPath jarPath=(JarPath)o;  return (_backing.equals(jarPath._backing) && getPath().equals(jarPath.getPath()));}  }
class C{  @Override public Map<String,Set<URI>> findExportMasks(final StorageSystem storage,final List<String> initiatorNames,final boolean mustHaveAllPorts) throws DeviceControllerException {  return _exportMaskOperationsHelper.findExportMasks(storage,initiatorNames,mustHaveAllPorts);}  }
class C{  public GuzzTransactionManager(TransactionManager transactionManager){  this.transactionManager=transactionManager;  afterPropertiesSet();}  }
class C{  private PDFObject readObject(int objNum,int objGen,PDFDecrypter decrypter) throws IOException {  return readObject(objNum,objGen,false,decrypter);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Crossfader withCanSlide(boolean canSlide){  this.mCanSlide=canSlide;  if (mCrossFadeSlidingPaneLayout != null) {    mCrossFadeSlidingPaneLayout.setCanSlide(mCanSlide);  }  return this;}  }
class C{  public boolean isRebootSupported(){  return rebootSupported;}  }
class C{  public void shutdown(){  connectionFactory.getConnectionPool().close();  ldapServer.stop();  PORT_SERVICE.release(port);  deleteRecursive(workingDir);}  }
class C{  @NoInline @Unpreemptible("Non-preemptible but yield when table needs to be grown") private void addCandidate(Reference<?> ref,ObjectReference referent){  if (TRACE) {    ObjectReference referenceAsAddress=ObjectReference.fromObject(ref);    VM.sysWrite("Adding Reference: ",referenceAsAddress);    VM.sysWriteln(" ~> ",referent);  }  lock.acquire();  while (growingTable || maxIndex >= references.length()) {    if (growingTable) {      lock.release();      RVMThread.yieldWithHandshake();      lock.acquire();    } else {      growingTable=true;      lock.release();      AddressArray newTable=growReferenceTable();      lock.acquire();      references=newTable;      growingTable=false;    }  }  addReference(ref,referent);  lock.release();}  }
class C{  @Override public long calculateLastFetchTime(WebPage page){  return page.getFetchTime() - page.getFetchInterval() * 1000L;}  }
class C{  public JSlider createSlider(){  JSlider slider=new JSlider(m_model);  slider.addFocusListener(getSliderAdjuster());  return slider;}  }
class C{  public boolean hasNext(){  return !stack.isEmpty();}  }
class C{  public void hide(){}  }
class C{  private static void readLinks(String pathToInputFile_Links,TemplateNetworkConverter networkConverter){  BufferedReader fileReader=IOUtils.getBufferedReader(pathToInputFile_Links);  try {    String line=fileReader.readLine();    while (line != null) {      String[] lineArgs=line.split(",");      if (lineArgs[0].equals("link")) {        String linkId=null;        String fromNodeId=null;        String toNodeId=null;        Set<String> allowedModes=null;        double capacity=0;        double freeSpeed=0;        double length=0;        double numberOfLanes=0;        networkConverter.addLink(linkId,fromNodeId,toNodeId,allowedModes,capacity,freeSpeed,length,numberOfLanes);      } else {      }      line=fileReader.readLine();    }    fileReader.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected static StringList args(String... args){  return new StringList(args);}  }
class C{  @Override public boolean onJsPrompt(AmazonWebView view,String url,String message,String defaultValue,AmazonJsPromptResult result){  if (defaultValue != null && defaultValue.startsWith("gap")) {    if (defaultValue.startsWith("gap-iab://")) {      PluginResult scriptResult;      String scriptCallbackId=defaultValue.substring(10);      if (scriptCallbackId.startsWith("InAppBrowser")) {        if (message == null || message.length() == 0) {          scriptResult=new PluginResult(PluginResult.Status.OK,new JSONArray());        } else {          try {            scriptResult=new PluginResult(PluginResult.Status.OK,new JSONArray(message));          } catch (          JSONException e) {            scriptResult=new PluginResult(PluginResult.Status.JSON_EXCEPTION,e.getMessage());          }        }        this.webView.sendPluginResult(scriptResult,scriptCallbackId);        result.confirm("");        return true;      }    } else {      LOG.w(LOG_TAG,"InAppBrowser does not support Cordova API calls: " + url + " "+ defaultValue);      result.cancel();      return true;    }  }  return false;}  }
class C{  public static String describeFactor(long value,long compare,String suffix){  double factor=(double)value / (double)compare;  if (Double.isNaN(factor)) {    return "";  }  return "(" + String.format("%.2f",factor) + suffix+ ")";}  }
class C{  public static void unescapeJavaScript(Writer out,String str) throws IOException {  unescapeJava(out,str);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.782 -0500",hash_original_method="76BB97F012769A161CBA88EA8A2E4EBA",hash_generated_method="BF80F476B3ED4C700CD6C964F72A2D1A") public XMLReaderAdapter() throws SAXException {  setup(XMLReaderFactory.createXMLReader());}  }
class C{  public void add(PivotItem dataItem,boolean notify){  if (!this.isEmpty()) {    PivotItem item0=(PivotItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  public int size(){  return this.values.size();}  }
class C{  public void addPolygon(S2Polygon polygon){  for (int i=0; i < polygon.numLoops(); ++i) {    addLoop(polygon.loop(i));  }}  }
class C{  public boolean unassigned(){  return state == ShardRoutingState.UNASSIGNED;}  }
class C{  public static NumericEntityEscaper outsideOf(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,false);}  }
class C{  public ExecutionNode createExecutionNode(){  ExecutionNodeImpl executionNode=new ExecutionNodeImpl();  return executionNode;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < getLocals(); ++i) {    sb.append(getLocal(i));  }  sb.append(' ');  for (int i=0; i < getStackSize(); ++i) {    sb.append(getStack(i).toString());  }  return sb.toString();}  }
class C{  public static void registerInfuseType(InfuseType infuse){  if (infuseTypes.containsKey(infuse.name)) {    return;  }  infuseTypes.put(infuse.name,infuse);}  }
class C{  public EventTimeInputBuilder<T> emit(T elem,Moment moment,int times){  if (moment == null) {    throw new IllegalArgumentException("TimeBetween has to bo not null!");  }  if (times < 1) {    throw new IllegalArgumentException("Times has to be greater than 1.");  }  long ts=getLastTimestamp();  for (int i=0; i < times; i++) {    ts=moment.getTimestamp(ts);    addWithShift(elem,ts,moment.getShift());  }  return this;}  }
class C{  private ITag injectMetaData(IMetaData<?,?> meta,ITag tag){  IoBuffer bb=IoBuffer.allocate(1000);  bb.setAutoExpand(true);  Output out=new Output(bb);  Serializer ser=new Serializer();  ser.serialize(out,"onMetaData");  ser.serialize(out,meta);  IoBuffer tmpBody=out.buf().flip();  int tmpBodySize=out.buf().limit();  int tmpPreviousTagSize=tag.getPreviousTagSize();  return new Tag(IoConstants.TYPE_METADATA,0,tmpBodySize,tmpBody,tmpPreviousTagSize);}  }
class C{  public static Map<String,String> toFlatStringMap(final JSONObject object) throws JSONException {  final Map<String,String> map=new HashMap<String,String>();  final Iterator<String> keysItr=object.keys();  while (keysItr.hasNext()) {    final String key=keysItr.next();    final Object value=object.get(key);    if (!(value instanceof String)) {      continue;    }    map.put(key,(String)value);  }  return map;}  }
class C{  protected void buildJMSResources2() throws Exception {  destroyJMSResources(true);  if (cf == null) {    Log.logger.log(Level.FINE,"Getting ConnectionFactory");    cf=jmsProvider.lookupConnectionFactory(null);  }  Log.logger.log(Level.FINE,"Making connection");  connection=jmsProvider.getConnection(cf,this,String.valueOf(this.getThreadNum()));}  }
class C{  public void write(byte[] buff,int off,int len){  System.arraycopy(buff,off,data,pos,len);  pos+=len;}  }
class C{  public EquipRandomItemAction(final String itemlist,final boolean bind){  String[] elements=itemlist.split(";");  if (elements.length == 1) {    logger.warn("Using random item function for one item? List: " + itemlist);  }  for (  String element : elements) {    String[] subelements=element.split("=");    String itemname=subelements[0];    Integer amount=1;    try {      amount=Integer.parseInt(subelements[1]);    } catch (    ArrayIndexOutOfBoundsException ex) {      logger.error("Bad format for list " + itemlist);    }catch (    NumberFormatException ex) {      logger.error("Bad number " + subelements[1] + " for entry "+ subelements[0]+ " in list "+ itemlist);    }    items.put(itemname,amount);  }  this.bind=bind;}  }
class C{  public static ResultSet polar2Cartesian(Double r,Double alpha){  SimpleResultSet rs=new SimpleResultSet();  rs.addColumn("X",Types.DOUBLE,0,0);  rs.addColumn("Y",Types.DOUBLE,0,0);  if (r != null && alpha != null) {    double x=r.doubleValue() * Math.cos(alpha.doubleValue());    double y=r.doubleValue() * Math.sin(alpha.doubleValue());    rs.addRow(x,y);  }  return rs;}  }
class C{  public OlcbAddress(String s){  aString=s;  match=hCode.reset(aString).matches();  if (match) {    if (hCode.group(GROUP_FULL_HEX) != null) {      String l=hCode.group(GROUP_FULL_HEX);      int len=(l.length() - 1) / 2;      aFrame=new int[len];      for (int i=0; i < len; i++) {        String two=l.substring(1 + 2 * i,1 + 2 * i + 2);        aFrame[i]=Integer.parseInt(two,16);      }    } else     if (hCode.group(GROUP_DOT_HEX) != null) {      String[] terms=s.split("\\.");      if (terms.length != 8) {        log.error("unexpected number of terms: " + terms.length);      }      aFrame=new int[terms.length];      for (int i=0; i < terms.length; i++) {        aFrame[i]=Integer.parseInt(terms[i],16);      }    }  } else {  }}  }
class C{  public SRNTrainer(SimpleRecurrentNetwork srn){  super(srn,srn.getNeuronGroupsAsList());  this.srn=srn;}  }
class C{  private String convertKey(String key){  return MRule.convertKey(key,m_windowNo);}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((CanListener)client).message((CanMessage)m);}  }
class C{  public PendingInstallShortcutInfo(Intent data,Context context){  this.data=data;  mContext=context;  launchIntent=data.getParcelableExtra(Intent.EXTRA_SHORTCUT_INTENT);  label=data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME);  user=UserHandleCompat.myUserHandle();  activityInfo=null;}  }
class C{  private String sign(String baseString,PrivateKey privateKey){  try {    Signature signer=Signature.getInstance(SHA1_WITH_RSA);    signer.initSign(privateKey);    signer.update(baseString.getBytes(UTF_8));    return DatatypeConverter.printBase64Binary(signer.sign());  } catch (  InvalidKeyException e) {    throw new MCApiRuntimeException(e);  }catch (  SignatureException e) {    throw new MCApiRuntimeException(e);  }catch (  UnsupportedEncodingException e) {    throw new MCApiRuntimeException(e);  }catch (  NoSuchAlgorithmException e) {    throw new MCApiRuntimeException(e);  }}  }
class C{  public ZkSolrResourceLoader(String instanceDir,String collection,ClassLoader parent,Properties coreProperties,ZkController zooKeeperController){  super(instanceDir,parent,coreProperties);  this.zkController=zooKeeperController;  collectionZkPath=ZkController.CONFIGS_ZKNODE + "/" + collection;}  }
class C{  private static void formatNames(Iterable<List<String>> names){  if (names != null) {    for (    List<String> list : names) {      String name=list.get(0);      String[] components=new String[5];      int start=0;      int end;      int componentIndex=0;      while (componentIndex < components.length - 1 && (end=name.indexOf(';',start)) >= 0) {        components[componentIndex]=name.substring(start,end);        componentIndex++;        start=end + 1;      }      components[componentIndex]=name.substring(start);      StringBuilder newName=new StringBuilder(100);      maybeAppendComponent(components,3,newName);      maybeAppendComponent(components,1,newName);      maybeAppendComponent(components,2,newName);      maybeAppendComponent(components,0,newName);      maybeAppendComponent(components,4,newName);      list.set(0,newName.toString().trim());    }  }}  }
class C{  public PublishIdentitiesWoPINDialog(PanboxClient client,List<PanboxGUIContact> contacts){  super(client.getMainWindow());  this.client=client;  this.contacts=contacts;  this.contactModel=new ContactListModel();  for (  PanboxGUIContact c : contacts) {    this.contactModel.addElement(c);  }  initComponents();}  }
class C{  public Integer onLoadData16(byte[] ioPage,int addr,int value,DebuggableMemory.AccessSource accessSource){  if (addr >= REGISTER_IMC00 && addr < (REGISTER_IMC19 + 4)) {    TxInterruptController intc=(TxInterruptController)platform.getInterruptController();    return ((intc.getImc(addr - REGISTER_IMC00) << 8) | intc.getImc(addr - REGISTER_IMC00 + 1));  }  if (addr >= REGISTER_PORT0 && addr < REGISTER_PORT0 + (NUM_PORT << PORT_OFFSET_SHIFT)) {    stop("The I/O port registers cannot be accessed by 16-bit for now");  } else   if (addr >= REGISTER_TB0EN && addr < REGISTER_TB0EN + (NUM_16B_TIMER << TIMER_OFFSET_SHIFT)) {    int timerNr=(addr - REGISTER_TB0EN) >> TIMER_OFFSET_SHIFT;    TxTimer txTimer=(TxTimer)platform.getProgrammableTimers()[timerNr];switch (addr - (timerNr << TIMER_OFFSET_SHIFT)) {case REGISTER_TB0EN + 2:      return txTimer.getTben() & 0xFFFF;case REGISTER_TB0RUN + 2:    return txTimer.getTbrun() & 0xFFFF;case REGISTER_TB0CR + 2:  return txTimer.getTbcr() & 0xFFFF;case REGISTER_TB0MOD + 2:return txTimer.getTbmod() & 0xFFFF;case REGISTER_TB0FFCR + 2:return txTimer.getTbffcr() & 0xFFFF;case REGISTER_TB0ST + 2:return txTimer.getTbst() & 0xFFFF;case REGISTER_TB0IM + 2:return txTimer.getTbim() & 0xFFFF;case REGISTER_TB0UC + 2:return txTimer.getTbuc() & 0xFFFF;case REGISTER_TB0RG0 + 2:return txTimer.getTbrg0() & 0xFFFF;case REGISTER_TB0RG1 + 2:return txTimer.getTbrg1() & 0xFFFF;case REGISTER_TB0CP0 + 2:return txTimer.getTbcp0() & 0xFFFF;case REGISTER_TB0CP1 + 2:return txTimer.getTbcp1() & 0xFFFF;default :return 0;}} else if (addr >= REGISTER_TCEN && addr < REGISTER_CAPCR0 + (NUM_CAPTURE_CHANNEL << INPUT_CAPTURE_OFFSET_SHIFT)) {TxInputCaptureTimer txInputCaptureTimer=(TxInputCaptureTimer)platform.getProgrammableTimers()[NUM_16B_TIMER];if (addr < REGISTER_CMPCTL0) {switch (addr) {case REGISTER_TCEN + 2:return txInputCaptureTimer.getTcen() & 0xFFFF;case REGISTER_TBTRUN + 2:return txInputCaptureTimer.getTbtrun() & 0xFFFF;case REGISTER_TBTCR + 2:return txInputCaptureTimer.getTbtcr() & 0xFFFF;case REGISTER_TBTCAP + 2:return txInputCaptureTimer.getTbtcap() & 0xFFFF;case REGISTER_TBTRDCAP + 2:return txInputCaptureTimer.getCurrentValue() & 0xFFFF;}} else if (addr < REGISTER_CAPCR0) {int compareChannel=(addr - REGISTER_CMPCTL0) >> INPUT_COMPARE_OFFSET_SHIFT;switch (addr - (compareChannel << INPUT_COMPARE_OFFSET_SHIFT)) {case REGISTER_CMPCTL0 + 2:return txInputCaptureTimer.getCmpctl(compareChannel) & 0xFFFF;case REGISTER_TCCMP0 + 2:return txInputCaptureTimer.getTccmp(compareChannel) & 0xFFFF;}} else {int captureChannel=(addr - REGISTER_CAPCR0) >> INPUT_CAPTURE_OFFSET_SHIFT;switch (addr - (captureChannel << INPUT_CAPTURE_OFFSET_SHIFT)) {case REGISTER_CAPCR0 + 2:return txInputCaptureTimer.getCapcr(captureChannel) & 0xFFFF;case REGISTER_TCCAP0 + 2:return txInputCaptureTimer.getTccap(captureChannel) & 0xFFFF;}}} else if (addr >= REGISTER_HOURR && addr < REGISTER_RESTR + 4) {stop("The RTC registers cannot be accessed by 16-bit for now");} else if (addr >= REGISTER_KWUPST00 && addr < REGISTER_KWUPINT + 4) {stop("The KEY registers cannot be accessed by 16-bit for now");} else if (addr >= REGISTER_SC0EN && addr < REGISTER_SC0EN + (NUM_SERIAL_IF << SERIAL_OFFSET_SHIFT)) {int serialInterfaceNr=(addr - REGISTER_SC0EN) >> SERIAL_OFFSET_SHIFT;TxSerialInterface txSerialInterface=(TxSerialInterface)platform.getSerialInterfaces()[serialInterfaceNr];switch (addr - (serialInterfaceNr << SERIAL_OFFSET_SHIFT)) {case REGISTER_SC0EN + 2:return txSerialInterface.getEn() & 0xFFFF;case REGISTER_SC0BUF + 2:return txSerialInterface.getBuf() & 0xFFFF;case REGISTER_SC0CR + 2:return txSerialInterface.getCr() & 0xFFFF;case REGISTER_SC0MOD0 + 2:return txSerialInterface.getMod0() & 0xFFFF;case REGISTER_SC0MOD1 + 2:return txSerialInterface.getMod1() & 0xFFFF;case REGISTER_SC0MOD2 + 2:return txSerialInterface.getMod2() & 0xFFFF;case REGISTER_BR0CR + 2:return txSerialInterface.getBrcr() & 0xFFFF;case REGISTER_BR0ADD + 2:return txSerialInterface.getBradd() & 0xFFFF;case REGISTER_SC0RFC + 2:return txSerialInterface.getRfc() & 0xFFFF;case REGISTER_SC0TFC + 2:return txSerialInterface.getTfc() & 0xFFFF;case REGISTER_SC0RST + 2:return txSerialInterface.getRst() & 0xFFFF;case REGISTER_SC0TST + 2:return txSerialInterface.getTst() & 0xFFFF;case REGISTER_SC0FCNF + 2:return txSerialInterface.getFcnf() & 0xFFFF;}} else if (addr >= REGISTER_HSC0BUF && addr < REGISTER_HSC0BUF + (NUM_HSERIAL_IF << HSERIAL_OFFSET_SHIFT)) {stop("Serial register 0x" + Format.asHex(addr,8) + " can only be read by 8 bits");} else if (addr >= REGISTER_ADACLK && addr < REGISTER_ADACLK + (NUM_AD_UNIT << AD_UNIT_OFFSET_SHIFT)) {int adUnitNumber=(addr - REGISTER_ADACLK) >> AD_UNIT_OFFSET_SHIFT;TxAdUnit unit=((TxAdConverter)platform.getAdConverter()).units[adUnitNumber];int shiftedAddress=addr - (adUnitNumber << AD_UNIT_OFFSET_SHIFT);if (shiftedAddress >= REGISTER_ADAREG0 && shiftedAddress < REGISTER_ADAREG0 + 32) {int channelNumber=(shiftedAddress - REGISTER_ADAREG0) / 4;if (channelNumber < unit.getNumChannels()) {return unit.getReg(channelNumber) & 0xFFFF;} else {stop("Address 0x" + Format.asHex(addr,8) + " is not a A/D converter channel register");}} else {switch (shiftedAddress) {case REGISTER_ADACLK + 2:return unit.getClk() & 0xFFFF;case REGISTER_ADAMOD0 + 2:return unit.getMod0() & 0xFFFF;case REGISTER_ADAMOD1 + 2:return unit.getMod1() & 0xFFFF;case REGISTER_ADAMOD2 + 2:return unit.getMod2() & 0xFFFF;case REGISTER_ADAMOD3 + 2:return unit.getMod3() & 0xFFFF;case REGISTER_ADAMOD4 + 2:return unit.getMod4() & 0xFFFF;case REGISTER_ADAMOD5 + 2:return unit.getMod5() & 0xFFFF;case REGISTER_ADAREGSP + 2:return (unit.getRegSp()) & 0xFFFF;case REGISTER_ADACOMREG0 + 2:return (unit.getComReg0()) & 0xFFFF;case REGISTER_ADACOMREG1 + 2:return (unit.getComReg1()) & 0xFFFF;default :stop("Address 0x" + Format.asHex(addr,8) + " is not a A/D converter register");}}} else if (addr >= REGISTER_IMCGA && addr < (REGISTER_IMCG11 + 4)) {TxInterruptController intc=(TxInterruptController)platform.getInterruptController();return ((intc.getImcg(addr - REGISTER_IMCGA) << 8) | intc.getImcg(addr - REGISTER_IMCGA + 1));} else switch (addr) {case REGISTER_SYSCR:stop("The SYSCR register can not be accessed by 16-bit for now");case REGISTER_SYSCR + 2:stop("The SYSCR register can not be accessed by 16-bit for now");case REGISTER_OSCCR:stop("The OSCCR register can not be accessed by 16-bit for now");case REGISTER_OSCCR + 2:stop("The OSCCR register can not be accessed by 16-bit for now");case REGISTER_PLLSEL + 2:return ((TxClockGenerator)platform.getClockGenerator()).getPllsel() & 0xFFFF;case REGISTER_NMIFLG + 2:return ((TxInterruptController)platform.getInterruptController()).readAndClearNmiFlag() & 0xFFFF;case REGISTER_RSTFLG + 2:return ((TxClockGenerator)platform.getClockGenerator()).getRstflg() & 0xFFFF;case REGISTER_DREQFLG + 2:return ((TxInterruptController)platform.getInterruptController()).getDreqflg() & 0xFFFF;}if (logRegisterMessages) warn("Register 0x" + Format.asHex(addr,8) + ": Load16 is not supported yet");return null;}  }
class C{  public void allowStateless(boolean allowStateless){  setAllowStateless(allowStateless);}  }
class C{  synchronized void send(String fileName,long skip) throws IOException {  connect();  try {    OutputStream out=socket.getOutputStream();    InputStream in=FileUtils.newInputStream(fileName);    IOUtils.skipFully(in,skip);    IOUtils.copy(in,out);    in.close();  }  finally {    socket.close();  }  server.trace("closed");}  }
class C{  private StringBuffer subformat(Object[] arguments,StringBuffer result,FieldPosition fp,List<AttributedCharacterIterator> characterIterators){  int lastOffset=0;  int last=result.length();  for (int i=0; i <= maxOffset; ++i) {    result.append(pattern.substring(lastOffset,offsets[i]));    lastOffset=offsets[i];    int argumentNumber=argumentNumbers[i];    if (arguments == null || argumentNumber >= arguments.length) {      result.append('{').append(argumentNumber).append('}');      continue;    }    if (false) {      result.append('\uFFFD');    } else {      Object obj=arguments[argumentNumber];      String arg=null;      Format subFormatter=null;      if (obj == null) {        arg="null";      } else       if (formats[i] != null) {        subFormatter=formats[i];        if (subFormatter instanceof ChoiceFormat) {          arg=formats[i].format(obj);          if (arg.indexOf('{') >= 0) {            subFormatter=new MessageFormat(arg,locale);            obj=arguments;            arg=null;          }        }      } else       if (obj instanceof Number) {        subFormatter=NumberFormat.getInstance(locale);      } else       if (obj instanceof Date) {        subFormatter=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,locale);      } else       if (obj instanceof String) {        arg=(String)obj;      } else {        arg=obj.toString();        if (arg == null)         arg="null";      }      if (characterIterators != null) {        if (last != result.length()) {          characterIterators.add(createAttributedCharacterIterator(result.substring(last)));          last=result.length();        }        if (subFormatter != null) {          AttributedCharacterIterator subIterator=subFormatter.formatToCharacterIterator(obj);          append(result,subIterator);          if (last != result.length()) {            characterIterators.add(createAttributedCharacterIterator(subIterator,Field.ARGUMENT,Integer.valueOf(argumentNumber)));            last=result.length();          }          arg=null;        }        if (arg != null && arg.length() > 0) {          result.append(arg);          characterIterators.add(createAttributedCharacterIterator(arg,Field.ARGUMENT,Integer.valueOf(argumentNumber)));          last=result.length();        }      } else {        if (subFormatter != null) {          arg=subFormatter.format(obj);        }        last=result.length();        result.append(arg);        if (i == 0 && fp != null && Field.ARGUMENT.equals(fp.getFieldAttribute())) {          fp.setBeginIndex(last);          fp.setEndIndex(result.length());        }        last=result.length();      }    }  }  result.append(pattern.substring(lastOffset,pattern.length()));  if (characterIterators != null && last != result.length()) {    characterIterators.add(createAttributedCharacterIterator(result.substring(last)));  }  return result;}  }
class C{  public void flush() throws XMLStreamException {  if (_writer != null) {    _writer.flush();  }}  }
class C{  public static TellerTransactionData instance(final Long id,final Long officeId,final Long tellerId,final Long cashierId,final Long clientId,final EnumOptionData type,final Double amount,final Date postingDate){  return new TellerTransactionData(id,officeId,tellerId,cashierId,clientId,type,amount,postingDate);}  }
class C{  public void flagFunctionsForRecompileOnce(DMLProgram dmlp) throws LanguageException {  for (  String namespaceKey : dmlp.getNamespaces().keySet())   for (  String fname : dmlp.getFunctionStatementBlocks(namespaceKey).keySet()) {    FunctionStatementBlock fsblock=dmlp.getFunctionStatementBlock(namespaceKey,fname);    if (rFlagFunctionForRecompileOnce(fsblock,false)) {      fsblock.setRecompileOnce(true);      LOG.debug("IPA: FUNC flagged for recompile-once: " + DMLProgram.constructFunctionKey(namespaceKey,fname));    }  }}  }
class C{  public int indexOf(final AbstractInsnNode insn){  if (cache == null) {    cache=toArray();  }  return insn.index;}  }
class C{  public void prepareAB(){  a=get(0);  b=get(1);}  }
class C{  public void updatePassword(final JSONObject requestJSONObject) throws ServiceException {  final Transaction transaction=userRepository.beginTransaction();  try {    final String oldUserId=requestJSONObject.optString(Keys.OBJECT_ID);    final JSONObject oldUser=userRepository.get(oldUserId);    if (null == oldUser) {      throw new ServiceException(langPropsService.get("updateFailLabel"));    }    oldUser.put(User.USER_PASSWORD,requestJSONObject.optString(User.USER_PASSWORD));    userRepository.update(oldUserId,oldUser);    transaction.commit();  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates user password failed",e);    throw new ServiceException(e);  }}  }
class C{  public OverpassFilterQuery boundingBox(double southernLat,double westernLon,double northernLat,double easternLon){  builder.boundingBox(southernLat,westernLon,northernLat,easternLon);  return this;}  }
class C{  public boolean visit(CopyingRangeMarker edit){  return visitNode(edit);}  }
class C{  @Override public byte[] hget(final byte[] key,final byte[] field){  checkIsInMultiOrPipeline();  client.hget(key,field);  return client.getBinaryBulkReply();}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  public void put(String key,double value){  super.put(key,Double.valueOf(value));}  }
class C{  @Override public int hashCode(){  return hash(phase,subphase);}  }
class C{  public void addNonKMLFile(final String filename,final String inZipFilename) throws IOException {  if (this.nonKmlFiles.containsKey(filename) && (inZipFilename.compareTo(this.nonKmlFiles.get(filename)) == 0)) {    log.warn("File: " + filename + " is already included in the kmz as "+ inZipFilename);    return;  }  this.nonKmlFiles.put(filename,inZipFilename);  FileInputStream fis=new FileInputStream(filename);  try {    addNonKMLFile(fis,inZipFilename);  }  finally {    fis.close();  }}  }
class C{  public TransformerConfigurationException(String message,SourceLocator locator,Throwable e){  super(message,locator,e);}  }
class C{  protected void writeLine(String line) throws IOException {  mOut.write(line.getBytes());  ByteUtils.writeLn(mOut);}  }
class C{  protected void addColladaLayer(ColladaRoot colladaRoot){  ColladaController colladaController=new ColladaController(colladaRoot);  RenderableLayer layer=new RenderableLayer();  layer.addRenderable(colladaController);  this.getWwd().getModel().getLayers().add(layer);}  }
class C{  public GenericGF(int primitive,int size){  this.primitive=primitive;  this.size=size;  if (size <= INITIALIZATION_THRESHOLD) {    initialize();  }}  }
class C{  private void resetTabPositionsToLeadingTabIndex(int tabCount){  int leadingTabPosition=orientation.getPosition(rects[leadingTabIndex]);  for (int i=0; i < tabCount; i++) {    if (i < leadingTabIndex || i > trailingTabIndex) {      rects[i].setBounds(-1,-1,0,0);    } else {      orientation.updateBoundsPosition(rects[i],orientation.getPosition(rects[i]) - leadingTabPosition);    }  }}  }
class C{  protected Population loadPopulationFile(final String filename,Scenario sc){  Population plans=sc.getPopulation();  log.info("  reading plans xml file... ");  MatsimReader plansReader=new PopulationReader(sc);  plansReader.readFile(filename);  log.info("  done");  return plans;}  }
class C{  public boolean isMarried(final Player player){  return player.hasQuest(SPOUSE_QUEST_SLOT);}  }
class C{  public SyncFactoryException(){}  }
class C{  public GF2nPolynomialElement(GF2nPolynomialElement other){  mField=other.mField;  mDegree=other.mDegree;  polynomial=new GF2Polynomial(other.polynomial);}  }
class C{  public BasicHttpClient(){  this("");}  }
class C{  public String commandId(String sensorId,String commandId){  return sensorId + "." + commandId;}  }
class C{  public boolean onOverrideUrlLoading(String url){  return false;}  }
class C{  public FilteredNavigationRecordRequestImpl(final String facetName,final String field){  this(facetName,field,false,null);}  }
class C{  void updateBooleanPreference(boolean newSettingEnabled,BooleanPreference booleanPreference,String enabledText,String disabledText){  booleanPreference.set(newSettingEnabled);  if (newSettingEnabled) {    Toast.makeText(this,enabledText,Toast.LENGTH_LONG).show();  } else {    Toast.makeText(this,disabledText,Toast.LENGTH_LONG).show();  }  invalidateOptionsMenu();}  }
class C{  public byte[] serializeAuthenticatedFields(){  try {    ByteArrayOutputStream outBytes=new ByteArrayOutputStream();    DataOutputStream dataStream=new DataOutputStream(outBytes);    dataStream.writeByte(version_);    dataStream.writeByte(typeVal_);    dataStream.writeShort(cryptoAlgoVal_);    dataStream.write(messageId_);    PrimitivesParser.writeUnsignedShort(dataStream,encryptionContextLen_);    if (encryptionContextLen_ > 0) {      dataStream.write(encryptionContext_);    }    dataStream.writeShort(cipherKeyCount_);    for (int i=0; i < cipherKeyCount_; i++) {      final byte[] cipherKeyBlobBytes=cipherKeyBlobs_.get(i).toByteArray();      dataStream.write(cipherKeyBlobBytes);    }    dataStream.writeByte(contentTypeVal_);    dataStream.writeInt(reservedField_);    dataStream.writeByte(nonceLen_);    dataStream.writeInt(frameLength_);    dataStream.close();    return outBytes.toByteArray();  } catch (  IOException e) {    throw new RuntimeException("Failed to serialize cipher text headers",e);  }}  }
class C{  public boolean isInfinite(){  return infinite;}  }
class C{  @Override public void flush(Map<TopicPartition,OffsetAndMetadata> offsets){  if (stopped)   return;  StreamerContext.getStreamer().flush();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (null != m_parts) {    int n=m_parts.size();    for (int i=0; i < n; i++) {      AVTPart part=(AVTPart)m_parts.elementAt(i);      if (part.canTraverseOutsideSubtree())       return true;    }  }  return false;}  }
class C{  public long swapSize(@Nullable String spaceName) throws IgniteCheckedException {  try {    return getSpi().size(spaceName);  } catch (  IgniteSpiException e) {    throw new IgniteCheckedException("Failed to get swap size for space: " + spaceName,e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.368 -0500",hash_original_method="BF4B60E4788A555E5EC3F45CB4B13E83",hash_generated_method="882A8280767CD4829639889DA54FF7DB") public void removeQValue(){  super.removeParameter(ParameterNames.Q);}  }
class C{  private static void stop(){  if (_client != null) {    _client.stop();  }  System.exit(0);}  }
class C{  public int numCompactableOplogs(){  CompactableOplog[] oplogs=getOplogsToBeCompacted(true);  if (oplogs == null) {    return 0;  } else {    return oplogs.length;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isPrivateCopy(){  PrivateCopyProperty privateCopy=getExtension(PrivateCopyProperty.class);  return (privateCopy != null) && privateCopy.getValue();}  }
class C{  public DerpibooruTagTypeComparator(boolean filterSort){  mValueSpoilerWarning=filterSort;}  }
class C{  public int length(){  return builder.length();}  }
class C{  void compress(){  if (compressCount++ > COMPRESS_THRESHOLD) {    compressCount=0;    Enumeration e=classes.elements();    while (e.hasMoreElements())     ((CtClass)e.nextElement()).compress();  }}  }
class C{  private static boolean checkParameterIsValid(ResourceBundle bundle,String key){  final String value=parms.getString(key);  try {    final String type=bundle.getString(key + ".type");    if ("java.lang.Boolean".equals(type))     parms.getBoolean(key); else     if ("java.lang.Integer".equals(type))     parms.getInt(key); else     if ("java.lang.Long".equals(type))     parms.getLong(key); else     if ("java.lang.Double".equals(type))     parms.getDouble(key); else     if ("java.lang.String".equals(type)) {    } else     return checkClassParameterIsValid(key,value,type);  } catch (  MissingResourceException e) {    logger.log(Level.WARNING,"INTERNAL ERROR: No type specified for property [{0}]",key);    return false;  }catch (  TypedPropertyException err) {    logger.log(Level.WARNING,"Parameter validation failed for property [" + key + ']',err);    return false;  }  return true;}  }
class C{  @SideOnly(Side.CLIENT) public static void runBurst(long endTime,long duration){  PlanetEventHandler.endTime=endTime;  PlanetEventHandler.duration=duration;}  }
class C{  private void addSignatureToHotspotMap(String signature,Hotspot hotspot){  List<Hotspot> hotspots=this.signatureToHotspotMap.get(signature);  if (hotspots == null) {    hotspots=new ArrayList<Hotspot>();    this.signatureToHotspotMap.put(signature,hotspots);  }  hotspots.add(hotspot);}  }
class C{  public int export(ConstantPool target){  return target.addInterfaceRef(getClassName(),getName(),getType()).getIndex();}  }
class C{  static char readChar(IXMLReader reader,char entityChar) throws IOException, XMLParseException {  String str=XMLUtil.read(reader,entityChar);  char ch=str.charAt(0);  if (ch == entityChar) {    XMLUtil.errorUnexpectedEntity(reader.getSystemID(),reader.getLineNr(),str);  }  return ch;}  }
class C{  public WrapLayout(int align){  super(align);}  }
class C{  public void writeUnsignedInteger(long value) throws IOException {  if (value > MAX_UNSIGNED_INT) {    throw new IOException("Maximun unsigned integer value reached");  }  byte[] octets=new byte[5];  octets[4]=(byte)(value & 0x7f);  value>>=7;  int i;  for (i=3; value > 0 && i >= 0; i--) {    octets[i]=(byte)(0x80 | (value & 0x7f));    value>>=7;  }  int start=i + 1;  write(octets,start,5 - start);}  }
class C{  ValueForKeyIterator(@Nullable Object key){  this.key=key;  KeyList<K,V> keyList=keyToKeyList.get(key);  next=(keyList == null) ? null : keyList.head;}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private String computeReplacementString(){  int proposalKind=fProposal.getKind();  String qualifiedTypeName=null;  char[] qualifiedType=null;  if (proposalKind == CompletionProposal.TYPE_IMPORT) {    qualifiedType=fProposal.getSignature();    qualifiedTypeName=String.valueOf(Signature.toCharArray(qualifiedType));  } else   if (proposalKind == CompletionProposal.METHOD_IMPORT || proposalKind == CompletionProposal.FIELD_IMPORT) {    qualifiedType=Signature.getTypeErasure(fProposal.getDeclarationSignature());    qualifiedTypeName=String.valueOf(Signature.toCharArray(qualifiedType));  } else {    Assert.isTrue(false);  }  fImportRewrite=createImportRewrite();  if (fImportRewrite != null) {    if (proposalKind == CompletionProposal.TYPE_IMPORT) {      String simpleType=fImportRewrite.addImport(qualifiedTypeName,fImportContext);      if (fParentProposalKind == CompletionProposal.METHOD_REF) {        return simpleType + ".";      }    } else {      String res=fImportRewrite.addStaticImport(qualifiedTypeName,String.valueOf(fProposal.getName()),proposalKind == CompletionProposal.FIELD_IMPORT,fImportContext);      int dot=res.lastIndexOf('.');      if (dot != -1) {        String typeName=fImportRewrite.addImport(res.substring(0,dot),fImportContext);        return typeName + '.';      }    }    return "";  }  return qualifiedTypeName + ".";}  }
class C{  public void numParameters(int num) throws IOException {  output.write(num);}  }
class C{  public void createFloatingIcon(){  mHideOption.setVisibility(View.VISIBLE);  AnimationHelper.slideToLeft(mHideOption);}  }
class C{  MyRectangle2D(){  this(0,0,1,1);}  }
class C{  public Object readColor(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  int i;  int red;  int green;  int blue;  String name;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  children=XMLDocument.getChildTags(node);  red=0;  green=0;  blue=0;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_RED)) {      red=readIntFromXML(child);    } else     if (name.equals(VAL_GREEN)) {      green=readIntFromXML(child);    } else     if (name.equals(VAL_BLUE)) {      blue=readIntFromXML(child);    } else {      System.out.println("WARNING: '" + name + "' is not a recognized name for "+ node.getAttribute(ATT_NAME)+ "!");    }  }  result=new Color(red,green,blue);  return result;}  }
class C{  public void clearParsers(){  timer.stop();  clearParserNoticeHighlights();  parsers.clear();  textArea.fireParserNoticesChange();}  }
class C{  private static void highlightUnusedRange(Editor editor,TextAttributes unusedTextAttributes,TextRange textRange){  final Project project=editor.getProject();  if (project != null) {    HighlightManager.getInstance(project).addRangeHighlight(editor,textRange.getStartOffset(),textRange.getEndOffset(),unusedTextAttributes,true,true,null);  }}  }
class C{  public boolean add(TMember m,MemberSource source){  int index=index(m);  if (members[index] == null) {    members[index]=m;    sources[index]=source;    return true;  }  return false;}  }
class C{  public void box(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    newInstance(boxed);    if (type.getSize() == 2) {      dupX2();      dupX2();      pop();    } else {      dupX1();      swap();    }    invokeConstructor(boxed,new Method("<init>",Type.VOID_TYPE,new Type[]{type}));  }}  }
class C{  public void toUPS(double lat,double lon){  double a=0;  double t=0;  double e=0;  double es=0;  double rho=0;  double x;  double y;  final double k0=0.994;  double lambda=lon * Degree;  double phi=Math.abs(lat * Degree);  a=6378137.0;  es=0.00669438d;  e=Math.sqrt(es);  t=Math.tan(Math.PI / 4.0 - phi / 2.0) / Math.pow((1.0 - e * Math.sin(phi)) / (1.0 + e * Math.sin(phi)),(e / 2.0));  rho=2.0 * a * k0* t / Math.sqrt(Math.pow(1.0 + e,1.0 + e) * Math.pow(1.0 - e,1.0 - e));  x=rho * Math.sin(lambda);  y=rho * Math.cos(lambda);  if (lat > 0.0) {    y=-(y);  }  x+=2.0e6;  y+=2.0e6;  easting=x;  northing=y;}  }
class C{  public static byte composeReplyPath(byte esmClass){  return composeSpecificFeatures(esmClass,SMPPConstant.ESMCLS_REPLY_PATH);}  }
class C{  public SaaSApplicationException(){  this.init();}  }
class C{  private static boolean compareArrayCase(final String value,final int comparator,final Object[] array){  for (int i=0; i < array.length; i++) {    final Object obj=array[i];    if (obj instanceof String) {      if (compareStringCase(value,comparator,(String)obj)) {        return true;      }    } else     if (obj instanceof Number) {      if (compareNumber(value.trim(),comparator,(Number)obj)) {        return true;      }    } else {      if (compareReflective(value,comparator,obj)) {        return true;      }    }  }  return false;}  }
class C{  public IOContainer prepend(IOObject[] output){  List<IOObject> newObjects=new LinkedList<>();  newObjects.addAll(ioObjects);  for (int i=0; i < output.length; i++) {    newObjects.add(output[i]);  }  return new IOContainer(newObjects);}  }
class C{  public static void launchIndividualChat(Context context,String userId,String displayName){  Intent intent=new Intent(context,ConversationActivity.class);  if (!TextUtils.isEmpty(userId)) {    intent.putExtra(ConversationUIService.USER_ID,userId);  }  if (!TextUtils.isEmpty(displayName)) {    intent.putExtra(ConversationUIService.DISPLAY_NAME,displayName);  }  context.startActivity(intent);}  }
class C{  public void mergeObjects(GenericObjectList mergeList){  Iterator<GenericObject> it1=this.listIterator();  Iterator<GenericObject> it2=mergeList.listIterator();  while (it1.hasNext()) {    GenericObject outerObj=(GenericObject)it1.next();    while (it2.hasNext()) {      Object innerObj=it2.next();      outerObj.merge(innerObj);    }  }}  }
class C{  public void notifyDevelopers(String subject,String message) throws JPlagException {  NodeList userList=rootElement.getElementsByTagName("user");  for (int i=0; i < userList.getLength(); i++) {    Element elem=(Element)userList.item(i);    if ((parseInt(elem,"state") & MASK_DEVELOPER) != 0)     sendMail(elem.getAttribute("email"),subject,message);  }}  }
class C{  public RegisterNodesResponse RegisterNodes(RequestHeader RequestHeader,NodeId... NodesToRegister) throws ServiceFaultException, ServiceResultException {  RegisterNodesRequest req=new RegisterNodesRequest(RequestHeader,NodesToRegister);  return (RegisterNodesResponse)channel.serviceRequest(req);}  }
class C{  public HessianSerializerOutput(OutputStream os){  super(os);}  }
class C{  public AbstractStateMachinePersister(StateMachinePersist<S,E,T> stateMachinePersist){  Assert.notNull(stateMachinePersist,"StateMachinePersist must be set");  this.stateMachinePersist=stateMachinePersist;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getVideoFrame().getDVDSubpicture();}  }
class C{  public ServiceConfigurationError(String message){  super(message);}  }
class C{  public static int max(int[] values){  int max=Integer.MIN_VALUE;  for (int i=0; i < values.length; ++i) {    if (max < values[i]) {      max=values[i];    }  }  return max;}  }
class C{  public void createConnectionDialog(){  userNameLabel=new JLabel("User name: ",JLabel.RIGHT);  userNameField=new JTextField("app");  passwordLabel=new JLabel("Password: ",JLabel.RIGHT);  passwordField=new JTextField("app");  serverLabel=new JLabel("Database URL: ",JLabel.RIGHT);  serverField=new JTextField("jdbc:derby://localhost:1527/sample");  driverLabel=new JLabel("Driver: ",JLabel.RIGHT);  driverField=new JTextField("org.apache.derby.jdbc.ClientDriver");  connectionPanel=new JPanel(false);  connectionPanel.setLayout(new BoxLayout(connectionPanel,BoxLayout.X_AXIS));  JPanel namePanel=new JPanel(false);  namePanel.setLayout(new GridLayout(0,1));  namePanel.add(userNameLabel);  namePanel.add(passwordLabel);  namePanel.add(serverLabel);  namePanel.add(driverLabel);  JPanel fieldPanel=new JPanel(false);  fieldPanel.setLayout(new GridLayout(0,1));  fieldPanel.add(userNameField);  fieldPanel.add(passwordField);  fieldPanel.add(serverField);  fieldPanel.add(driverField);  connectionPanel.add(namePanel);  connectionPanel.add(fieldPanel);}  }
class C{  public double nextDouble(double degreesOfFreedom){  if (degreesOfFreedom <= 0.0)   throw new IllegalArgumentException();  double u, v, w;  do {    u=2.0 * randomGenerator.nextDouble() - 1.0;    v=2.0 * randomGenerator.nextDouble() - 1.0;  } while ((w=u * u + v * v) > 1.0);  return (u * Math.sqrt(degreesOfFreedom * (Math.exp(-2.0 / degreesOfFreedom * Math.log(w)) - 1.0) / w));}  }
class C{  public synchronized int indexOf(Object object,int location){  if (object != null) {    for (int i=location; i < elementCount; i++) {      if (object.equals(elementData[i])) {        return i;      }    }  } else {    for (int i=location; i < elementCount; i++) {      if (elementData[i] == null) {        return i;      }    }  }  return -1;}  }
class C{  public void decorateBugInstance(BugInstance bugInstance){  int priority=computePriority(bugInstance.getPriority());  bugInstance.setPriority(priority);  for (  Map.Entry<T,Object> entry : map.entrySet()) {    WarningProperty prop=entry.getKey();    Object attribute=entry.getValue();    if (attribute == null) {      attribute="";    }    bugInstance.setProperty(prop.getName(),attribute.toString());  }}  }
class C{  void readTranslations(WebSession session,String language){  Properties text=new Properties();  try {    trace("translation: " + language);    byte[] trans=getFile("_text_" + language + ".prop");    trace("  " + new String(trans));    text=SortedProperties.fromLines(new String(trans,Constants.UTF8));    for (    Entry<Object,Object> entry : text.entrySet()) {      String value=(String)entry.getValue();      if (value.startsWith("#")) {        entry.setValue(value.substring(1));      }    }  } catch (  IOException e) {    DbException.traceThrowable(e);  }  session.put("text",new HashMap<Object,Object>(text));}  }
class C{  protected Node newNode(){  return new SVGOMFETileElement();}  }
class C{  public void deleteTriggers(BigInteger alertId) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/triggers";  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.DELETE,requestUrl,null);  assertValidResponse(response,requestUrl);}  }
class C{  public void updateRemoteCandidates(){  List<CandidatePair> checkList;  List<RemoteCandidate> newRemoteCandidates;synchronized (remoteUpdateCandidates) {    if (remoteUpdateCandidates.size() == 0)     return;    newRemoteCandidates=new LinkedList<>(remoteUpdateCandidates);    List<LocalCandidate> localCnds=getLocalCandidates();    LocalCandidate upnpBase=null;    for (    LocalCandidate lc : localCnds) {      if (lc instanceof UPNPCandidate) {        upnpBase=lc.getBase();      }    }    checkList=new Vector<>();    for (    LocalCandidate localCnd : localCnds) {      if (localCnd == upnpBase)       continue;      for (      RemoteCandidate remoteCnd : remoteUpdateCandidates) {        if (localCnd.canReach(remoteCnd) && remoteCnd.getTransportAddress().getPort() != 0) {          CandidatePair pair=getParentStream().getParentAgent().createCandidatePair(localCnd,remoteCnd);          logger.info("new Pair added: " + pair.toShortString() + ". Local ufrag "+ parentStream.getParentAgent().getLocalUfrag());          checkList.add(pair);        }      }    }    remoteUpdateCandidates.clear();  }synchronized (remoteCandidates) {    remoteCandidates.addAll(newRemoteCandidates);  }  Collections.sort(checkList,CandidatePair.comparator);  parentStream.pruneCheckList(checkList);  if (parentStream.getCheckList().getState().equals(CheckListState.RUNNING)) {    CheckList streamCheckList=parentStream.getCheckList();synchronized (streamCheckList) {      for (      CandidatePair pair : checkList) {        streamCheckList.add(pair);      }    }  }}  }
class C{  protected int[] generateFirstKPrimes(int k){  int[] primes=new int[k];  primes[0]=2;  for (int i=1; i < k; i++) {    primes[i]=Primes.nextPrime(primes[i - 1]);  }  return primes;}  }
class C{  public final CC x(String x){  return corrPos(x,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.774 -0500",hash_original_method="336E472D067E61968C1967D8BD9529A8",hash_generated_method="AB037BFB4F7B08D8E50858CDBC4D9CFF") public boolean isTraceEnabled(){  return (getLogger().isLoggable(Level.FINEST));}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException {  return decode(image,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private int[] blackWhiteRange(int fixedDimension,int maxWhiteRun,int minDim,int maxDim,boolean horizontal){  int center=(minDim + maxDim) >> 1;  int start=center;  while (start >= minDim) {    if (horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)) {      start--;    } else {      int whiteRunStart=start;      do {        start--;      } while (start >= minDim && !(horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)));      int whiteRunSize=whiteRunStart - start;      if (start < minDim || whiteRunSize > maxWhiteRun) {        start=whiteRunStart;        break;      }    }  }  start++;  int end=center;  while (end < maxDim) {    if (horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)) {      end++;    } else {      int whiteRunStart=end;      do {        end++;      } while (end < maxDim && !(horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)));      int whiteRunSize=end - whiteRunStart;      if (end >= maxDim || whiteRunSize > maxWhiteRun) {        end=whiteRunStart;        break;      }    }  }  end--;  return end > start ? new int[]{start,end} : null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:59.612 -0500",hash_original_method="50F8519255BFC8FA08076C6C60F3293C",hash_generated_method="256A2A02373F69088619FBBAA5BA9D8B") @DSSource({DSSourceKind.CONTACT_INFORMATION}) @DSSpec(DSCat.SPEC_OTHERS) @Deprecated public static Bitmap loadContactPhoto(Context context,Uri person,int placeholderImageResource,BitmapFactory.Options options){  if (person == null) {    return loadPlaceholderPhoto(placeholderImageResource,context,options);  }  InputStream stream=openContactPhotoInputStream(context.getContentResolver(),person);  Bitmap bm=stream != null ? BitmapFactory.decodeStream(stream,null,options) : null;  if (bm == null) {    bm=loadPlaceholderPhoto(placeholderImageResource,context,options);  }  return bm;}  }
class C{  private void updateGui(){  autoConnectBox.setEnabled(savePasswordBox.isSelected());  if (!savePasswordBox.isSelected()) {    autoConnectBox.setSelected(false);  }}  }
class C{  public static boolean isWindows7(){  return win7;}  }
class C{  public TermsQueryBuilder(String name,String... values){  this(name,(Object[])values);}  }
class C{  protected void layoutMinorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  int n=getViewCount();  Object key=(axis == X_AXIS) ? CSS.Attribute.WIDTH : CSS.Attribute.HEIGHT;  for (int i=0; i < n; i++) {    View v=getView(i);    int min=(int)v.getMinimumSpan(axis);    int max;    AttributeSet a=v.getAttributes();    CSS.LengthValue lv=(CSS.LengthValue)a.getAttribute(key);    if ((lv != null) && lv.isPercentage()) {      min=Math.max((int)lv.getValue(targetSpan),min);      max=min;    } else {      max=(int)v.getMaximumSpan(axis);    }    if (max < targetSpan) {      float align=v.getAlignment(axis);      offsets[i]=(int)((targetSpan - max) * align);      spans[i]=max;    } else {      offsets[i]=0;      spans[i]=Math.max(min,targetSpan);    }  }}  }
class C{  public static String rightPad(String s,int minLength){  return rightPad(s,minLength,' ');}  }
class C{  static public NodeModel parse(InputSource is,boolean removeComments,boolean removePIs) throws SAXException, IOException, ParserConfigurationException {  DocumentBuilder builder=getDocumentBuilderFactory().newDocumentBuilder();  ErrorHandler errorHandler=getErrorHandler();  if (errorHandler != null)   builder.setErrorHandler(errorHandler);  final Document doc;  try {    doc=builder.parse(is);  } catch (  MalformedURLException e) {    if (is.getSystemId() == null && is.getCharacterStream() == null && is.getByteStream() == null) {      throw new MalformedURLException("The SAX InputSource has systemId == null && characterStream == null && byteStream == null. " + "This is often because it was created with a null InputStream or Reader, which is often because " + "the XML file it should point to was not found. "+ "(The original exception was: " + e + ")");    } else {      throw e;    }  }  if (removeComments && removePIs) {    simplify(doc);  } else {    if (removeComments) {      removeComments(doc);    }    if (removePIs) {      removePIs(doc);    }    mergeAdjacentText(doc);  }  return wrap(doc);}  }
class C{  public boolean isFixedWidth(){  Object oo=get_Value(COLUMNNAME_IsFixedWidth);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public NotificationChain basicSetFlags(RegularExpressionFlags newFlags,NotificationChain msgs){  RegularExpressionFlags oldFlags=flags;  flags=newFlags;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__FLAGS,oldFlags,newFlags);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @PostConstruct public void init(){  final Panel rootPanel=new Panel();  rootPanel.setSizeFull();  rootPanel.addStyleName("config-panel");  final VerticalLayout vLayout=new VerticalLayout();  vLayout.setMargin(true);  vLayout.setSizeFull();  final Label headerDisSetType=new Label(i18n.get("configuration.authentication.title"));  headerDisSetType.addStyleName("config-panel-header");  vLayout.addComponent(headerDisSetType);  final GridLayout gridLayout=new GridLayout(2,4);  gridLayout.setSpacing(true);  gridLayout.setImmediate(true);  gridLayout.setColumnExpandRatio(1,1.0F);  gridLayout.setSizeFull();  certificateAuthCheckbox=SPUIComponentProvider.getCheckBox("",DIST_CHECKBOX_STYLE,null,false,"");  certificateAuthCheckbox.setValue(certificateAuthenticationConfigurationItem.isConfigEnabled());  certificateAuthCheckbox.addValueChangeListener(this);  certificateAuthenticationConfigurationItem.addChangeListener(this);  gridLayout.addComponent(certificateAuthCheckbox,0,0);  gridLayout.addComponent(certificateAuthenticationConfigurationItem,1,0);  targetSecTokenCheckBox=SPUIComponentProvider.getCheckBox("",DIST_CHECKBOX_STYLE,null,false,"");  targetSecTokenCheckBox.setValue(targetSecurityTokenAuthenticationConfigurationItem.isConfigEnabled());  targetSecTokenCheckBox.addValueChangeListener(this);  targetSecurityTokenAuthenticationConfigurationItem.addChangeListener(this);  gridLayout.addComponent(targetSecTokenCheckBox,0,1);  gridLayout.addComponent(targetSecurityTokenAuthenticationConfigurationItem,1,1);  gatewaySecTokenCheckBox=SPUIComponentProvider.getCheckBox("",DIST_CHECKBOX_STYLE,null,false,"");  gatewaySecTokenCheckBox.setId("gatewaysecuritycheckbox");  gatewaySecTokenCheckBox.setValue(gatewaySecurityTokenAuthenticationConfigurationItem.isConfigEnabled());  gatewaySecTokenCheckBox.addValueChangeListener(this);  gatewaySecurityTokenAuthenticationConfigurationItem.addChangeListener(this);  gridLayout.addComponent(gatewaySecTokenCheckBox,0,2);  gridLayout.addComponent(gatewaySecurityTokenAuthenticationConfigurationItem,1,2);  downloadAnonymousCheckBox=SPUIComponentProvider.getCheckBox("",DIST_CHECKBOX_STYLE,null,false,"");  downloadAnonymousCheckBox.setId(UIComponentIdProvider.DOWNLOAD_ANONYMOUS_CHECKBOX);  downloadAnonymousCheckBox.setValue(anonymousDownloadAuthenticationConfigurationItem.isConfigEnabled());  downloadAnonymousCheckBox.addValueChangeListener(this);  anonymousDownloadAuthenticationConfigurationItem.addChangeListener(this);  gridLayout.addComponent(downloadAnonymousCheckBox,0,3);  gridLayout.addComponent(anonymousDownloadAuthenticationConfigurationItem,1,3);  vLayout.addComponent(gridLayout);  rootPanel.setContent(vLayout);  setCompositionRoot(rootPanel);}  }
class C{  public final ByteBuffer putShort(int baseOffset,short value){  if (order == ByteOrder.BIG_ENDIAN) {    byteArray.set(baseOffset,(byte)((value >> 8) & 0xFF));    byteArray.set(baseOffset + 1,(byte)(value & 0xFF));  } else {    byteArray.set(baseOffset + 1,(byte)((value >> 8) & 0xFF));    byteArray.set(baseOffset,(byte)(value & 0xFF));  }  return this;}  }
class C{  private void findGroupsInLDAPByMemberAttribute(String memberEntryDN,Set<String> allGroupsOfUserWithDomain,ValidationFailureReason[] failureReason){  if (_type != ProvidersType.ldap) {    _log.info("Non ldap authn provider.");    return;  }  if (StringUtils.isBlank(memberEntryDN)) {    _log.error("Invalid DN {} to search in ldap.",memberEntryDN);  }  final Filter groupObjectClassFilter=createGroupObjectClassFilter();  if (groupObjectClassFilter == null) {    _log.info("Empty ldap group object classes or attributes.");    return;  }  final long countLimit=0L;  final AndFilter queryBuilder=new AndFilter();  final OrFilter groupMemberAttributeFilter=new OrFilter();  for (  String groupMemberAttribute : this._groupMemberAttributes) {    final Filter localGroupMemberAttributeFilter=new EqualsFilter(groupMemberAttribute,memberEntryDN);    groupMemberAttributeFilter.or(localGroupMemberAttributeFilter);  }  queryBuilder.and(groupObjectClassFilter);  queryBuilder.and(groupMemberAttributeFilter);  Set<String> returnAttributesSet=new HashSet<String>(this._groupMemberAttributes);  returnAttributesSet.add(COMMON_NAME);  returnAttributesSet.add(OBJECT_CLASS);  returnAttributesSet.add(getDistinguishedNameAttribute());  String[] returnAttributes=returnAttributesSet.toArray(new String[returnAttributesSet.size()]);  List<List<GroupAttribute>> queryGroupResults=null;  try {    queryGroupResults=searchAuthProvider(queryBuilder,returnAttributes,countLimit,new GroupsMapper(_groupWhiteList.getType(),getDistinguishedNameAttribute()),failureReason);  } catch (  SizeLimitExceededException e) {    _log.error("Multiple entries for group are found in LDAP. Please use other group attributes such as cn or entryDN to uniquely identify the group.");    failureReason[0]=ValidationFailureReason.USER_OR_GROUP_NOT_FOUND_FOR_TENANT;  }  if (CollectionUtils.isEmpty(queryGroupResults)) {    _log.debug("{} is not a member of any group ",memberEntryDN);    return;  }  if (allGroupsOfUserWithDomain == null) {    allGroupsOfUserWithDomain=new HashSet<String>();  }  for (  List<GroupAttribute> groupAttrResults : queryGroupResults) {    if (CollectionUtils.isEmpty(groupAttrResults)) {      continue;    }    for (    GroupAttribute groupAttr : groupAttrResults) {      String groupDN=groupAttr.getGroupDistinguishedName();      allGroupsOfUserWithDomain.add(groupAttr.getGroupNameWithDomain());      _log.debug("Finding the higher level group of {}",groupDN);      findGroupsInLDAPByMemberAttribute(groupAttr.getGroupDistinguishedName(),allGroupsOfUserWithDomain,failureReason);    }  }}  }
class C{  public void restartDownload(long... ids){  Cursor cursor=query(new Query().setFilterById(ids));  try {    for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {      int status=cursor.getInt(cursor.getColumnIndex(COLUMN_STATUS));      if (status != STATUS_SUCCESSFUL && status != STATUS_FAILED) {        throw new IllegalArgumentException("Cannot restart incomplete download: " + cursor.getLong(cursor.getColumnIndex(COLUMN_ID)));      }    }  }  finally {    cursor.close();  }  ContentValues values=new ContentValues();  values.put(Downloads.Impl.COLUMN_CURRENT_BYTES,0);  values.put(Downloads.Impl.COLUMN_TOTAL_BYTES,-1);  values.putNull(Downloads.Impl._DATA);  values.put(Downloads.Impl.COLUMN_STATUS,Downloads.Impl.STATUS_PENDING);  values.put(Downloads.Impl.COLUMN_FAILED_CONNECTIONS,0);  mResolver.update(mBaseUri,values,getWhereClauseForIds(ids),getWhereArgsForIds(ids));}  }
class C{  public SQLTable(SQLDatabase db,String name){  m_db=db;  m_sName=name;  m_aColumns=new ArrayList();}  }
class C{  @Override public boolean isApplicable(XStudent student){  boolean match=false;  if (student.getAcademicAreaClasiffications() == null)   return false;  for (  XAcademicAreaCode aac : student.getAcademicAreaClasiffications()) {    if (getAcademicArea().equals(aac.getArea())) {      if (getClassifications().isEmpty() || getClassifications().contains(aac.getCode())) {        match=true;        break;      }    }  }  if (!match)   return false;  for (  XAcademicAreaCode aac : student.getMajors()) {    if (getAcademicArea().equals(aac.getArea())) {      if (getMajors().isEmpty() || getMajors().contains(aac.getCode()))       return true;    }  }  return getMajors().isEmpty();}  }
class C{  public BaseMessage(final String topic,final String payload){  this(MessageIdGenerator.getNewId(),topic,payload,new Date());}  }
class C{  public void addDecoderStateEventListener(Listener<DecoderStateEvent> listener){  mDecoderStateEventBroadcaster.addListener(listener);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject left=m_left.execute(xctxt,true);  XObject right=m_right.execute(xctxt,true);  boolean result=left.equals(right) ? true : false;  left.detach();  right.detach();  return result;}  }
class C{  public boolean detachMirrorFilePairStep(URI systemURI,URI sourceURI,URI targetURI,String opId){  log.info("START Detach Pair ={}",sourceURI.toString());  TaskCompleter completer=null;  try {    WorkflowStepCompleter.stepExecuting(opId);    StorageSystem system=getStorageSystem(systemURI);    completer=new FileMirrorDetachTaskCompleter(sourceURI,opId);    getRemoteMirrorDevice(system).doDetachMirrorLink(system,sourceURI,targetURI,completer);  } catch (  Exception e) {    ServiceError error=DeviceControllerException.errors.jobFailed(e);    if (null != completer) {      completer.error(dbClient,error);    }    WorkflowStepCompleter.stepFailed(opId,error);    return false;  }  return true;}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(keySize + ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  public Scanner createScannerByByteRange(long offset,long length) throws IOException {  return new Scanner(this,offset,offset + length);}  }
class C{  public static long millisTime(){  return TimeUnit.NANOSECONDS.toMillis(Clock.SYSTEM_CLOCK.nowNanos());}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    URI quotaId=getTaskCompleter().getId();    QuotaDirectory quotaObj=dbClient.queryObject(QuotaDirectory.class,quotaId);    URI fsUri=quotaObj.getParent().getURI();    FileShare fsObj=dbClient.queryObject(FileShare.class,fsUri);    StorageSystem storageObj=dbClient.queryObject(StorageSystem.class,getStorageSystemUri());    String event=null;    if (_status == JobStatus.SUCCESS && quotaObj != null) {      quotaObj.setInactive(true);      dbClient.updateObject(quotaObj);      event=String.format("Deleted file system quota directory %s successfully",quotaObj.getName());      logMsgBuilder.append("\n");      logMsgBuilder.append(event);    } else     if (_status == JobStatus.FAILED && quotaObj != null) {      event=String.format("Task %s failed to delete file system quota directory: %s",opId,quotaObj.getName());      logMsgBuilder.append("\n");      logMsgBuilder.append(event);    } else {      event="File sytem quota directory has been deleted";      logMsgBuilder.append(String.format("Could not find the quota directory: %s",quotaId));    }    _logger.info(logMsgBuilder.toString());    FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.DELETE_FILE_SYSTEM_QUOTA_DIR,_isSuccess,event,"",quotaObj,fsObj,storageObj);  } catch (  Exception e) {    _logger.error("Caught an exception while trying to update status for VNXUnityDeleteFileSystemQuotaDirectoryJob",e);    setErrorStatus("Encountered an internal error during file system quota delete job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.281 -0500",hash_original_method="9A62FFB59334167B71BC2FE402276C31",hash_generated_method="D42C210D0000FD68DEC32966AF1098BB") public UnsupportedHeader createUnsupportedHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException(optionTag);  Unsupported unsupported=new Unsupported();  unsupported.setOptionTag(optionTag);  return unsupported;}  }
class C{  public String showInputDialog(){  showAndWait();  if (isCancelled) {    return null;  } else {    return input.get();  }}  }
class C{  public void test_ConstructorILjava_lang_StringIIIIIIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);  assertTrue("Incorrect TZ constructed",st.inDaylightTime(new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime()));  assertTrue("Incorrect TZ constructed",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  assertEquals("Incorrect TZ constructed","TEST",st.getID());  assertEquals("Incorrect TZ constructed",1000,st.getRawOffset());  assertTrue("Incorrect TZ constructed",st.useDaylightTime());  try {    new SimpleTimeZone(1000,"TEST",12,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,10,Calendar.SUNDAY,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.NOVEMBER,1,10,0,Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new SimpleTimeZone(1000,"TEST",Calendar.DECEMBER,1,Calendar.SUNDAY,0,Calendar.NOVEMBER,-10,Calendar.SUNDAY,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public static List<SootMethod> findPossibleInheritedMethods(SootClass clz,String name){  Hierarchy hierarchy=Scene.v().getActiveHierarchy();  LinkedList<SootMethod> methods=new LinkedList<SootMethod>();  List<SootClass> classes=new LinkedList<SootClass>();  if (!clz.isInterface())   classes.addAll(hierarchy.getSuperclassesOfIncluding(clz));  classes.addAll(clz.getInterfaces());  for (  SootClass parent : classes) {    logger.debug("Looking at {}",parent);    for (    SootMethod method : parent.getMethods()) {      if (method.getName().equals(name))       methods.add(method);    }  }  return methods;}  }
class C{  public SparseMatrix(int rows,int cols,int rowCapacity){  this.rows=new SparseVector[rows];  for (int i=0; i < rows; i++)   this.rows[i]=new SparseVector(cols,rowCapacity);}  }
class C{  public boolean hasCoordinates(){  return hasCoordinates;}  }
class C{  protected void groupFrames(Vector<Frame> frames,Vector<Group> groups,boolean isDchum) throws MakeTocException {  Frame frame;  Group group;  int groupCount;  int nFrames=frames.size();  Debug.message("maketoc","MakeToc: *** grouping frames ***");  for (int i=0; i < nFrames; i++) {    Debug.message("maketocdetail","MakeToc: group addition, starting outer loop");    frame=(Frame)frames.elementAt(i);    if (!frame.marked) {      groupCount=groups.size();      group=new Group();      group.left=maxSide / 2;      group.right=group.left + 1;      group.top=maxSide / 2;      group.bottom=group.top + 1;      group.horiz_pos[group.top]=frame.top;      group.horiz_pos[group.bottom]=frame.bottom;      group.vert_pos[group.left]=frame.left;      group.vert_pos[group.right]=frame.right;      group.h_interval=frame.h_interval;      group.v_interval=frame.v_interval;      group.h_resolution=frame.h_resolution;      group.v_resolution=frame.v_resolution;      group.scale=frame.scale;      group.zone=frame.zone;      group.cib=frame.cib;      group.cdted=frame.cdted;      frame.x=group.left;      frame.y=group.top;      frame.group=groupCount;      frame.marked=true;      Debug.message("maketocdetail","Maketoc.groupFrames: created group " + groupCount + " for frame "+ i+ ", - "+ frame.filename+ " checking other frames for neighbors");      if (!isDchum) {        for (int j=0; j < nFrames; j++) {          if (i == j) {            Debug.message("maketocdetail","Maketoc.groupFrames: inner loop, i = j = " + i + ", frame that created group added to group, expecting false return");            continue;          }          Frame f=(Frame)frames.elementAt(j);          if (addFrameToGroup(group,f,groupCount)) {            Debug.message("maketocdetail","Maketoc.groupFrames: added frame " + j + " to group "+ groupCount);            continue;          }        }      }      Debug.message("maketocdetail","Maketoc.groupFrames: adding another group - " + groupCount + " *******************\n\n");      groups.add(group);    }    fireProgressUpdate(ProgressEvent.UPDATE,"Organizing frames",i,nFrames);  }  if (Debug.debugging("maketoc")) {    Debug.output("MakeToc: Number of boundary rectangles (groups): " + groups.size());  }}  }
class C{  public boolean relative(int rows) throws SQLException {  checkCursorMove();  boolean result=fbFetcher.relative(rows);  if (result)   notifyRowUpdater();  return result;}  }
class C{  @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.EXECUTION_NODE__NAME:    setName(NAME_EDEFAULT);  return;case SexecPackage.EXECUTION_NODE__REACTIONS:getReactions().clear();return;case SexecPackage.EXECUTION_NODE__SIMPLE_NAME:setSimpleName(SIMPLE_NAME_EDEFAULT);return;case SexecPackage.EXECUTION_NODE__REACT_SEQUENCE:setReactSequence((Sequence)null);return;}super.eUnset(featureID);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  public void addWatcher(AngularObjectWatcher watcher){synchronized (watchers) {    watchers.add(watcher);  }}  }
class C{  protected boolean shouldStartEditingTimer(EventObject event){  if ((event instanceof MouseEvent) && SwingUtilities.isLeftMouseButton((MouseEvent)event)) {    MouseEvent me=(MouseEvent)event;    return (me.getClickCount() == 1 && inHitRegion(me.getX(),me.getY()));  }  return false;}  }
class C{  private void initRowRange(Table table,boolean from) throws Exception {  long row=rowTill;  String caption="till";  if (from) {    row=rowFrom;    caption="from";  }  String usePk="";  if (methodPk)   usePk=" (PK)";  if (row >= 0) {    println(String.format("Row %s%s: %d",caption,usePk,row));  } else {    if (methodPk) {      if (from) {        rowFrom=retrieveMaxMinPK(masterDbUser,table,false);        println("Row from (min PK): " + rowFrom);      } else {        rowTill=retrieveMaxMinPK(masterDbUser,table,true);        println("Row till (max PK): " + rowTill);      }    } else {      if (from) {        rowFrom=0;        println("Row from: " + rowFrom);      } else {        rowTill=retrieveRowCount(masterDbUser,table);        println("Row till (count): " + rowTill);      }    }  }}  }
class C{  protected boolean scrollRight(TextView widget,Spannable buffer,int amount){  final int maxScrollX=getScrollBoundsRight(widget) - getInnerWidth(widget);  int scrollX=widget.getScrollX();  if (scrollX < maxScrollX) {    scrollX=Math.min(scrollX + getCharacterWidth(widget) * amount,maxScrollX);    widget.scrollTo(scrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public static void initialize(File path_to_context_directory){  contexts=new HashMap<>();  String[] context_candidates=path_to_context_directory.list();  for (  String context_candidate : context_candidates) {    File ccf=new File(path_to_context_directory,context_candidate);    if (!ccf.isDirectory())     continue;    String[] category_candidates=ccf.list();    Map<String,File> categoryExampleLinesFiles=new HashMap<>();    File negativeExampleLines=null;    for (    String category_candidate : category_candidates) {      if (!category_candidate.endsWith(".txt"))       continue;      File catcf=new File(ccf,category_candidate);      if (category_candidate.startsWith("negative")) {        negativeExampleLines=catcf;      } else {        categoryExampleLinesFiles.put(category_candidate.substring(0,category_candidate.length() - 4),catcf);      }    }    if (negativeExampleLines != null && categoryExampleLinesFiles.size() > 0) {      try {        Context context=new Context(context_candidate,categoryExampleLinesFiles,negativeExampleLines);        contexts.put(context_candidate,context);      } catch (      IOException e) {        ConcurrentLog.logException(e);      }    }  }}  }
class C{  public OrbitViewInputHandler(){  this.initializeInputHandlers();}  }
class C{  int boundedIndexOf(String string,char search,int start,int end){  int retValue=string.indexOf(search,start);  if (retValue >= end) {    return -1;  }  return retValue;}  }
class C{  private boolean isClosed(){  return buf == null;}  }
class C{  public static void saveStringToPreference(Context context,String key,String value){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);  if (null == value) {    pref.edit().remove(key).apply();  } else {    pref.edit().putString(key,value).apply();  }}  }
class C{  public void init(String prefix,Properties props){  prefix=PropUtils.getScopedPropertyPrefix(prefix);  init(getLayers(prefix,props));  getListeners().setSynchronous(PropUtils.booleanFromProperties(props,prefix + SynchronousThreadingProperty,getListeners().isSynchronous()));}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testUserDefinedPattern(){  ApacheLogParseMapOutputOperator oper=new ApacheLogParseMapOutputOperator();  CollectorTestSink sink=new CollectorTestSink();  oper.output.setSink(sink);  oper.setRegexGroups(new String[]{null,"ipAddr",null,"userId","date","url","httpCode","rest"});  String token="127.0.0.1 - - [04/Apr/2013:17:17:21 -0700] \"GET /favicon.ico HTTP/1.1\" 404 498 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31\"";  oper.setLogRegex("^([\\d\\.]+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"[A-Z]+ (.+?) HTTP/\\S+\" (\\d{3})(.*)");  oper.setup(null);  oper.beginWindow(0);  oper.data.process(token);  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,sink.collectedTuples.size());  Map<String,Object> map=(Map<String,Object>)sink.collectedTuples.get(0);  log.debug("map {}",map);  Assert.assertEquals("Size of map is 6",6,map.size());  Assert.assertEquals("checking ip","127.0.0.1",map.get("ipAddr"));  Assert.assertEquals("checking userid","-",map.get("userId"));  Assert.assertEquals("checking date","04/Apr/2013:17:17:21 -0700",map.get("date"));  Assert.assertEquals("checking url","/favicon.ico",map.get("url"));  Assert.assertEquals("checking http code","404",map.get("httpCode"));  Assert.assertEquals("checking bytes","498 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31\"",map.get("rest"));}  }
class C{  public List<C> instantiateClasses(Parameterization config){  config=config.descend(this);  List<C> instances=new ArrayList<>();  if (getValue() == null) {    config.reportError(new UnusedParameterException("Value of parameter " + getName() + " has not been specified."));    return instances;  }  for (  Class<? extends C> cls : getValue()) {    try {      C instance=ClassGenericsUtil.tryInstantiate(restrictionClass,cls,config);      instances.add(instance);    } catch (    Exception e) {      config.reportError(new WrongParameterValueException(this,cls.getName(),e));    }  }  return instances;}  }
class C{  public void writeMCMC(XMLWriter writer){  writer.writeComment("Define MCMC");  List<Attribute> attributes=new ArrayList<Attribute>();  attributes.add(new Attribute.Default<String>(XMLParser.ID,"mcmc"));  attributes.add(new Attribute.Default<Integer>("chainLength",options.chainLength));  attributes.add(new Attribute.Default<String>("autoOptimize",options.autoOptimize ? "true" : "false"));  if (options.operatorAnalysis) {    attributes.add(new Attribute.Default<String>("operatorAnalysis",options.operatorAnalysisFileName));  }  writer.writeOpenTag("mcmc",attributes);  if (options.hasData()) {    writer.writeOpenTag(CompoundLikelihoodParser.POSTERIOR,new Attribute.Default<String>(XMLParser.ID,"posterior"));  }  writer.writeOpenTag(CompoundLikelihoodParser.PRIOR,new Attribute.Default<String>(XMLParser.ID,"prior"));  if (options.useStarBEAST) {    writer.writeIDref(MultiSpeciesCoalescentParser.SPECIES_COALESCENT,TraitData.TRAIT_SPECIES + "." + COALESCENT);    writer.writeIDref(MixedDistributionLikelihoodParser.DISTRIBUTION_LIKELIHOOD,SPOPS);    writer.writeIDref(SpeciationLikelihoodParser.SPECIATION_LIKELIHOOD,SPECIATION_LIKE);  }  parameterPriorGenerator.writeParameterPriors(writer,options.useStarBEAST);  for (  PartitionTreeModel model : options.getPartitionTreeModels()) {    PartitionTreePrior prior=model.getPartitionTreePrior();    treePriorGenerator.writePriorLikelihoodReference(prior,model,writer);    writer.writeText("");  }  for (  PartitionTreePrior prior : options.getPartitionTreePriors()) {    treePriorGenerator.writeMultiLociLikelihoodReference(prior,writer);    writer.writeText("");  }  clockModelGenerator.writeClockLikelihoodReferences(writer);  generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_MCMC_PRIOR,writer);  writer.writeCloseTag(CompoundLikelihoodParser.PRIOR);  if (options.hasData()) {    writer.writeOpenTag(CompoundLikelihoodParser.LIKELIHOOD,new Attribute.Default<String>(XMLParser.ID,"likelihood"));    treeLikelihoodGenerator.writeTreeLikelihoodReferences(writer);    generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_MCMC_LIKELIHOOD,writer);    writer.writeCloseTag(CompoundLikelihoodParser.LIKELIHOOD);    writer.writeCloseTag(CompoundLikelihoodParser.POSTERIOR);  }  writer.writeIDref(SimpleOperatorScheduleParser.OPERATOR_SCHEDULE,"operators");  logGenerator.writeLogToScreen(writer,clockModelGenerator,substitutionModelGenerator);  logGenerator.writeLogToFile(writer,treePriorGenerator,clockModelGenerator,substitutionModelGenerator,treeLikelihoodGenerator);  logGenerator.writeTreeLogToFile(writer);  writer.writeCloseTag("mcmc");}  }
class C{  private static String quote(String value){  boolean needsQuotes=false;  int length=value.length();  for (int i=0; (i < length) && !needsQuotes; ++i) {    needsQuotes=!isTokenChar(value.charAt(i));  }  if (needsQuotes) {    StringBuilder buffer=new StringBuilder((int)(length * 1.5));    buffer.append('"');    for (int i=0; i < length; ++i) {      char c=value.charAt(i);      if ((c == '\\') || (c == '"')) {        buffer.append('\\');      }      buffer.append(c);    }    buffer.append('"');    return buffer.toString();  } else {    return value;  }}  }
class C{  private void clearActiveLineRange(){  iconArea.clearActiveLineRange();}  }
class C{  public void clear(){  polys=null;  size=0;}  }
class C{  public Matrix4d m12(double m12){  this.m12=m12;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  public void actionPerformed(ActionEvent event){  Enumeration<ActionListener> iter=actionListeners.elements();  while (iter.hasMoreElements()) {    ActionListener listener=iter.nextElement();    listener.actionPerformed(event);  }}  }
class C{  public static double[] inverse(double[] matrix){  double det=determinant(matrix);  if (isZero(det)) {    return matrix;  }  double m00=matrix[0], m01=matrix[1], m02=matrix[2], m03=matrix[3], m10=matrix[4], m11=matrix[5], m12=matrix[6], m13=matrix[7], m20=matrix[8], m21=matrix[9], m22=matrix[10], m23=matrix[11], m30=matrix[12], m31=matrix[13], m32=matrix[14], m33=matrix[15];  return new double[]{(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det,(m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det,(m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det,(m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det,(m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det,(m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det,(m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det,(m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det,(m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det,(m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det,(m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det,(m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det,(m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det,(m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det,(m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det,(m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det};}  }
class C{  public static void writeStringToFile(File file,String s,String charset,boolean append) throws IOException {  if (s == null)   return;  try (OutputStream out=new FileOutputStream(file,append)){    out.write(s.getBytes(charset));  } }  }
class C{  public CustomizedOsmNetworkReader(final Network network,final TransitSchedule schedule,final CoordinateTransformation transformation,final boolean useHighwayDefaults){  this.network=network;  this.transform=transformation;  this.schedule=schedule;  if (useHighwayDefaults) {    log.info("Falling back to default values.");    this.setHighwayDefaults(1,"motorway",2,100.0 / 3.6,1.2,2000,true);    this.setHighwayDefaults(1,"motorway_link",1,60.0 / 3.6,1.2,1500,true);    this.setHighwayDefaults(2,"trunk",1,80.0 / 3.6,0.5,2000);    this.setHighwayDefaults(2,"trunk_link",1,60.0 / 3.6,0.5,1500);    this.setHighwayDefaults(3,"primary",1,50.0 / 3.6,0.5,1500);    this.setHighwayDefaults(3,"primary_link",1,50.0 / 3.6,0.5,1500);    this.setHighwayDefaults(4,"secondary",1,50.0 / 3.6,0.5,1000);    this.setHighwayDefaults(5,"tertiary",1,30.0 / 3.6,0.8,600);    this.setHighwayDefaults(6,"minor",1,30.0 / 3.6,0.8,600);    this.setHighwayDefaults(6,"unclassified",1,30.0 / 3.6,0.8,600);    this.setHighwayDefaults(6,"residential",1,30.0 / 3.6,0.6,600);    this.setHighwayDefaults(6,"living_street",1,15.0 / 3.6,1.0,300);    this.setHighwayDefaults(7,"pedestrian",1,10 / 3.6,1.0,100);    this.setHighwayDefaults(7,"footway",1,10 / 3.6,1.0,100);    this.setHighwayDefaults(6,"service",1,30.0 / 3.6,0.6,300);    this.setRailwayDefaults(1,"rail",1,120 / 3.6,1.0,30);  }}  }
class C{  static public int[] parseInt(String what[]){  return parseInt(what,0);}  }
class C{  public void awaitTermination() throws InterruptedException {  do {    logger.info("Awaiting completion of scanner.");  } while (!executor.awaitTermination(60,TimeUnit.SECONDS));  logger.info("Scanner finished.");}  }
class C{  public void decodeRAW(ByteBuffer[] buffer,int[] strides,int numMCURows) throws IOException {  if (!insideSOS) {    throw new IllegalStateException("decode not started");  }  if (numMCURows <= 0 || currentMCURow + numMCURows > mcuCountY) {    throw new IllegalArgumentException("numMCURows");  }  int scanN=order.length;  if (scanN != components.length) {    throw new UnsupportedOperationException("for RAW decode all components need to be decoded at once");  }  if (scanN > buffer.length || scanN > strides.length) {    throw new IllegalArgumentException("not enough buffers");  }  for (int compIdx=0; compIdx < scanN; compIdx++) {    order[compIdx].outPos=buffer[compIdx].position();  }  outer:   for (int j=0; j < numMCURows; j++) {    ++currentMCURow;    for (int i=0; i < mcuCountX; i++) {      for (int compIdx=0; compIdx < scanN; compIdx++) {        Component c=order[compIdx];        int outStride=strides[compIdx];        int outPosY=c.outPos + 8 * (i * c.blocksPerMCUHorz + j * c.blocksPerMCUVert * outStride);        for (int y=0; y < c.blocksPerMCUVert; y++, outPosY+=8 * outStride) {          for (int x=0, outPos=outPosY; x < c.blocksPerMCUHorz; x++, outPos+=8) {            try {              decodeBlock(data,c);            } catch (            ArrayIndexOutOfBoundsException ex) {              throwBadHuffmanCode();            }            idct2D.compute(buffer[compIdx],outPos,outStride,data);          }        }      }      if (--todo <= 0) {        if (!checkRestart()) {          break outer;        }      }    }  }  checkDecodeEnd();  for (int compIdx=0; compIdx < scanN; compIdx++) {    Component c=order[compIdx];    buffer[compIdx].position(c.outPos + numMCURows * c.blocksPerMCUVert * 8* strides[compIdx]);  }}  }
class C{  public static VOOrganizationVatRate toVOOrganizationVatRate(VatRate domObj,LocalizerFacade localizerFacade){  if (domObj == null) {    return null;  }  VOOrganizationVatRate vo=new VOOrganizationVatRate();  vo.setRate(domObj.getRate());  vo.setOrganization(OrganizationAssembler.toVOOrganization(domObj.getTargetOrganization(),false,localizerFacade));  updateValueObject(vo,domObj);  return vo;}  }
class C{  @Override public void resetTX(Transaction transaction){  this.tx=transaction;  this.autoCommitAcks=transaction == null;  this.autoCommitSends=transaction == null;}  }
class C{  @Override public void addView(ReactDrawerLayout parent,View child,int index){  if (getChildCount(parent) >= 2) {    throw new JSApplicationIllegalArgumentException("The Drawer cannot have more than two children");  }  if (index != 0 && index != 1) {    throw new JSApplicationIllegalArgumentException("The only valid indices for drawer's child are 0 or 1. Got " + index + " instead.");  }  parent.addView(child,index);  parent.setDrawerProperties();}  }
class C{  public static void printWarnings(Connection conn){  printWarnings(conn,new PrintWriter(System.err));}  }
class C{  private static void createNotifTimerThread(){  setLastNotifTime(0);  notifTimeoutThread=new Thread(new NotifTimeoutHandler());  try {    notifTimeoutThread.setName("Notifications Timeout");  } catch (  SecurityException e) {    Logger.Error("Access denied attempting to set the name of the notifications thread. This is not fatal.");  }  notifTimeoutThread.setDaemon(true);  notifTimeoutThread.start();}  }
class C{  public boolean startsWith(String prefix){  if (TextUtils.isEmpty(prefix)) {    return false;  }  if (!TextUtils.isEmpty(mDisplayName)) {    if ((null != mLowerCaseDisplayName) && mLowerCaseDisplayName.startsWith(prefix)) {      return true;    }    if (null == mDisplayNameComponents) {      String[] componentsArrays=mDisplayName.split(" ");      mDisplayNameComponents=new ArrayList<>();      if (componentsArrays.length > 0) {        for (int i=0; i < componentsArrays.length; i++) {          mDisplayNameComponents.add(componentsArrays[i].trim().toLowerCase());        }      }    }    for (    String comp : mDisplayNameComponents) {      if (comp.startsWith(prefix)) {        return true;      }    }  }  if (!TextUtils.isEmpty(mUserId) && mUserId.startsWith("@" + prefix)) {    return true;  }  return (null != mContact) && mContact.startsWith(prefix);}  }
class C{  public static FontImage createMaterial(char icon,Style s,float size){  Font f=getMaterialDesignFont().derive(Display.getInstance().convertToPixels(size),Font.STYLE_PLAIN);  return create("" + icon,s,f);}  }
class C{  @Override public NoneVal copy(){  return this;}  }
class C{  public final List<Warning> validate(VCardVersion version,VCard vcard){  List<Warning> warnings=new ArrayList<Warning>(0);  if (!isSupportedBy(version)) {    warnings.add(new Warning(2,Arrays.toString(getSupportedVersions())));  }  warnings.addAll(parameters.validate(version));  if (group != null) {    SyntaxStyle syntax=version.getSyntaxStyle();    AllowedCharacters allowed=VObjectValidator.allowedCharactersGroup(syntax,true);    if (!allowed.check(group)) {      if (syntax == SyntaxStyle.OLD) {        AllowedCharacters notAllowed=allowed.flip();        warnings.add(new Warning(32,group,notAllowed.toString(true)));      } else {        warnings.add(new Warning(23,group));      }    }  }  _validate(warnings,version,vcard);  return warnings;}  }
class C{  public int[] doChoiceDialog(String title,String question,String[] choices){  ChoiceDialog choice=new ChoiceDialog(frame,title,question,choices);  choice.setVisible(true);  return choice.getChoices();}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public NotImplementedException(){  super("Sorry, not implemented yet. Please contribute to ELKI.");}  }
class C{  public static boolean isOs2(){  return osName.indexOf("OS/2") > -1;}  }
class C{  public <K,V>GeodeJavaRegionRDD<K,V> geodeRegion(String regionPath,GeodeConnectionConf connConf,Properties opConf){  ClassTag<K> kt=fakeClassTag();  ClassTag<V> vt=fakeClassTag();  GeodeRegionRDD<K,V> rdd=GeodeRegionRDD$.MODULE$.apply(sc,regionPath,connConf,propertiesToScalaMap(opConf),kt,vt);  return new GeodeJavaRegionRDD<>(rdd);}  }
class C{  public void unregisterAll(HGHandle typeHandle){  List<HGIndexer<?,?>> forType=indexers.get(typeHandle);  if (forType != null) {    for (Iterator<HGIndexer<?,?>> i=forType.iterator(); i.hasNext(); ) {      HGIndexer<?,?> indexer=i.next();      removeFromSubtypes(indexer);      deleteIndex(indexer);      graph.remove(graph.getHandle(indexer));      i.remove();    }    if (forType.isEmpty())     indexers.remove(typeHandle);  }}  }
class C{  @Bean(destroyMethod="close") DataSource dataSource(Environment env){  HikariConfig dataSourceConfig=new HikariConfig();  dataSourceConfig.setDriverClassName(env.getRequiredProperty(PROPERTY_NAME_DB_DRIVER_CLASS));  dataSourceConfig.setJdbcUrl(env.getRequiredProperty(PROPERTY_NAME_DB_URL));  dataSourceConfig.setUsername(env.getRequiredProperty(PROPERTY_NAME_DB_USER));  dataSourceConfig.setPassword(env.getRequiredProperty(PROPERTY_NAME_DB_PASSWORD));  return new HikariDataSource(dataSourceConfig);}  }
class C{  @Override public void removeDisposable(Disposable disposable){  if (disposables != null) {    disposables.remove(disposable);    if (disposables.isEmpty()) {      disposables=null;    }  }}  }
class C{  public int character(){  assert (error == null);  return character;}  }
class C{  private Metric predictAnomalies(Map<Long,String> metricData){  Metric predictions=new Metric(getResultScopeName(),getResultMetricName());  Map<Long,String> predictionDatapoints=new HashMap<>();  if (variance == 0.0) {    for (    Entry<Long,String> entry : metricData.entrySet()) {      Long timestamp=entry.getKey();      predictionDatapoints.put(timestamp,"0.0");    }  } else {    for (    Entry<Long,String> entry : metricData.entrySet()) {      Long timestamp=entry.getKey();      String valueString=entry.getValue();      double valueDouble=Double.parseDouble(valueString);      try {        double anomalyScore=calculateAnomalyScore(valueDouble);        predictionDatapoints.put(timestamp,String.valueOf(anomalyScore));      } catch (      ArithmeticException e) {        continue;      }    }  }  predictions.setDatapoints(predictionDatapoints);  return predictions;}  }
class C{  public static double min(DoubleArrayList data){  int size=data.size();  if (size == 0)   throw new IllegalArgumentException();  double[] elements=data.elements();  double min=elements[size - 1];  for (int i=size - 1; --i >= 0; ) {    if (elements[i] < min)     min=elements[i];  }  return min;}  }
class C{  public void readBackwards() throws IOException {  if (currentByte != null) {    nextByte=currentByte;    currentByte=null;  } else {    throw new IOException("Only one readBackwards is permitted!");  }}  }
class C{  public Builder slugWithOwnerScreenName(String slug,String ownerScreenName){  this.slug=slug;  this.ownerScreenName=ownerScreenName;  return this;}  }
class C{  public boolean isValidUsername(String username){  return Pattern.matches("^[\\w\\@\\.]+$",username);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CategoryPlot clone=(CategoryPlot)super.clone();  clone.domainAxes=CloneUtils.cloneMapValues(this.domainAxes);  for (  CategoryAxis axis : clone.domainAxes.values()) {    if (axis != null) {      axis.setPlot(clone);      axis.addChangeListener(clone);    }  }  clone.rangeAxes=CloneUtils.cloneMapValues(this.rangeAxes);  for (  ValueAxis axis : clone.rangeAxes.values()) {    if (axis != null) {      axis.setPlot(clone);      axis.addChangeListener(clone);    }  }  clone.domainAxisLocations=new HashMap<Integer,AxisLocation>(this.domainAxisLocations);  clone.rangeAxisLocations=new HashMap<Integer,AxisLocation>(this.rangeAxisLocations);  clone.datasets=new HashMap<Integer,CategoryDataset>(this.datasets);  for (  CategoryDataset dataset : clone.datasets.values()) {    if (dataset != null) {      dataset.addChangeListener(clone);    }  }  clone.datasetToDomainAxesMap=new TreeMap();  clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);  clone.datasetToRangeAxesMap=new TreeMap();  clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);  clone.renderers=CloneUtils.cloneMapValues(this.renderers);  for (  CategoryItemRenderer renderer : clone.renderers.values()) {    if (renderer != null) {      renderer.setPlot(clone);      renderer.addChangeListener(clone);    }  }  if (this.fixedDomainAxisSpace != null) {    clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);  }  if (this.fixedRangeAxisSpace != null) {    clone.fixedRangeAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedRangeAxisSpace);  }  clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);  clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);  clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);  clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);  clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);  if (this.fixedLegendItems != null) {    clone.fixedLegendItems=(LegendItemCollection)this.fixedLegendItems.clone();  }  return clone;}  }
class C{  public void changeProgram(IFilter newFilter){  mFilter.releaseProgram();  mFilter=newFilter;}  }
class C{  public boolean isStrict(){  return detail.isStrict();}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  if (unit instanceof Tank) {    result=true;  }  if (currentSpace < 1) {    result=false;  }  if (doors < loadedThisTurn) {    result=false;  }  return result;}  }
class C{  protected void writeComplexAttribute(mxCodec enc,Object obj,String attr,Object value,Node node){  Node child=enc.encode(value);  if (child != null) {    if (attr != null) {      mxCodec.setAttribute(child,"as",attr);    }    node.appendChild(child);  } else {    System.err.println("mxObjectCodec.encode: No node for " + mxCodecRegistry.getName(obj) + "."+ attr+ ": "+ value);  }}  }
class C{  public CollapsedStackLayout(String group,String field){  super(group);  m_polyField=field;}  }
class C{  public boolean isObject(String key){  return get(key) instanceof Json.Object;}  }
class C{  public int testClockwise(){  if (points.size() < 3) {    return 0;  }  final int size=points.size();  int c=0;  for (int i=0; i < size; i++) {    final int j=(i + 1) % size;    final int k=(i + 2) % size;    final double dxji=points.get(j)[0] - points.get(i)[0];    final double dykj=points.get(k)[1] - points.get(j)[1];    final double dyji=points.get(j)[1] - points.get(i)[1];    final double dxkj=points.get(k)[0] - points.get(j)[0];    final double z=(dxji * dykj) - (dyji * dxkj);    if (z < 0) {      c--;    } else     if (z > 0) {      c++;    }  }  if (c > 0) {    return -1;  } else   if (c < 0) {    return +1;  } else {    return 0;  }}  }
class C{  public void testGetDatasetCount(){  XYPlot plot=new XYPlot();  assertEquals(0,plot.getDatasetCount());}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 39:{        start=zzMarkedPos - yylength();        yybegin(STRING_Q_LT);      }case 52:    break;case 2:{    addToken(Token.IDENTIFIER);  }case 53:break;case 45:{addToken(Token.LITERAL_BOOLEAN);}case 54:break;case 32:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);return firstToken;}case 55:break;case 19:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_PAREN);return firstToken;}case 56:break;case 18:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_CURLY_BRACE);return firstToken;}case 57:break;case 20:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_SLASH);return firstToken;}case 58:break;case 46:{yybegin(YYINITIAL);addToken(start,zzStartRead + 3,Token.COMMENT_DOCUMENTATION);}case 59:break;case 10:{start=zzMarkedPos - 1;yybegin(STRING);}case 60:break;case 44:{if (start == zzStartRead) {addToken(Token.PREPROCESSOR);addNullToken();return firstToken;}}case 61:break;case 9:{addToken(Token.FUNCTION);}case 62:break;case 22:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_LT);return firstToken;}case 63:break;case 42:{addToken(Token.VARIABLE);}case 64:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 65:break;case 31:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_SINGLE_QUOTED);return firstToken;}case 66:break;case 4:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 67:break;case 41:{start=zzMarkedPos - yylength();yybegin(STRING_Q_CURLY_BRACE);}case 68:break;case 50:{start=zzStartRead;yybegin(HEREDOC_EOF_SINGLE_QUOTED);}case 69:break;case 51:{start=zzStartRead;yybegin(HEREDOC_EOT_SINGLE_QUOTED);}case 70:break;case 47:{start=zzStartRead;yybegin(HEREDOC_EOF_UNQUOTED);}case 71:break;case 14:{}case 72:break;case 25:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 73:break;case 43:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 74:break;case 28:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_UNQUOTED);return firstToken;}case 75:break;case 6:{addToken(Token.WHITESPACE);}case 76:break;case 17:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_BANG);return firstToken;}case 77:break;case 35:{addToken(Token.PREPROCESSOR);}case 78:break;case 11:{start=zzMarkedPos - 1;yybegin(CHAR_LITERAL);}case 79:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 80:break;case 38:{start=zzMarkedPos - yylength();yybegin(STRING_Q_SLASH);}case 81:break;case 27:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_BACKQUOTE);}case 82:break;case 16:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 83:break;case 37:{start=zzMarkedPos - yylength();yybegin(STRING_Q_BANG);}case 84:break;case 23:{}case 85:break;case 30:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_UNQUOTED);return firstToken;}case 86:break;case 49:{start=zzMarkedPos - 6;yybegin(DOCCOMMENT);}case 87:break;case 34:{addToken(Token.RESERVED_WORD);}case 88:break;case 26:{addToken(start,zzStartRead - 1,Token.LITERAL_BACKQUOTE);return firstToken;}case 89:break;case 36:{start=zzMarkedPos - yylength();yybegin(STRING_Q_SQUARE_BRACKET);}case 90:break;case 8:{addToken(Token.SEPARATOR);}case 91:break;case 5:{addNullToken();return firstToken;}case 92:break;case 21:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_SQUARE_BRACKET);return firstToken;}case 93:break;case 40:{start=zzMarkedPos - yylength();yybegin(STRING_Q_PAREN);}case 94:break;case 7:{addToken(Token.OPERATOR);}case 95:break;case 24:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 96:break;case 33:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 97:break;case 48:{start=zzStartRead;yybegin(HEREDOC_EOT_UNQUOTED);}case 98:break;case 12:{start=zzMarkedPos - 1;yybegin(BACKTICKS);}case 99:break;case 13:{}case 100:break;case 15:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 101:break;case 29:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_SINGLE_QUOTED);return firstToken;}case 102:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case HEREDOC_EOF_SINGLE_QUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_SINGLE_QUOTED);return firstToken;}case 345:break;case DOCCOMMENT:{yybegin(YYINITIAL);addToken(start,zzEndRead,Token.COMMENT_DOCUMENTATION);return firstToken;}case 346:break;case HEREDOC_EOT_SINGLE_QUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_SINGLE_QUOTED);return firstToken;}case 347:break;case HEREDOC_EOT_UNQUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_UNQUOTED);return firstToken;}case 348:break;case STRING_Q_SLASH:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_SLASH);return firstToken;}case 349:break;case STRING_Q_BANG:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_BANG);return firstToken;}case 350:break;case STRING_Q_LT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_LT);return firstToken;}case 351:break;case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 352:break;case BACKTICKS:{addToken(start,zzStartRead - 1,Token.LITERAL_BACKQUOTE);return firstToken;}case 353:break;case YYINITIAL:{addNullToken();return firstToken;}case 354:break;case HEREDOC_EOF_UNQUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_UNQUOTED);return firstToken;}case 355:break;case STRING_Q_CURLY_BRACE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_CURLY_BRACE);return firstToken;}case 356:break;case STRING_Q_PAREN:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_PAREN);return firstToken;}case 357:break;case CHAR_LITERAL:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 358:break;case STRING_Q_SQUARE_BRACKET:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_STRING_Q_SQUARE_BRACKET);return firstToken;}case 359:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private void assertReadLittleEndian64(byte[] data,long value) throws Exception {  CodedInputStream input=CodedInputStream.newInstance(data);  assertEquals(value,input.readRawLittleEndian64());  assertTrue(input.isAtEnd());  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));    assertEquals(value,input.readRawLittleEndian64());    assertTrue(input.isAtEnd());  }}  }
class C{  public CF1(int numberOfVariables){  super(numberOfVariables,2,1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.633 -0500",hash_original_method="E2DED68AC9B462E78AE6945CB037592B",hash_generated_method="886EFB9D1599BB90032DDEDB84CFDE25") public static ArrayList<String> fragmentText(String text){  int activePhone=TelephonyManager.getDefault().getCurrentPhoneType();  TextEncodingDetails ted=(PHONE_TYPE_CDMA == activePhone) ? com.android.internal.telephony.cdma.SmsMessage.calculateLength(text,false) : com.android.internal.telephony.gsm.SmsMessage.calculateLength(text,false);  int limit;  if (ted.codeUnitSize == ENCODING_7BIT) {    int udhLength;    if (ted.languageTable != 0 && ted.languageShiftTable != 0) {      udhLength=GsmAlphabet.UDH_SEPTET_COST_TWO_SHIFT_TABLES;    } else     if (ted.languageTable != 0 || ted.languageShiftTable != 0) {      udhLength=GsmAlphabet.UDH_SEPTET_COST_ONE_SHIFT_TABLE;    } else {      udhLength=0;    }    if (ted.msgCount > 1) {      udhLength+=GsmAlphabet.UDH_SEPTET_COST_CONCATENATED_MESSAGE;    }    if (udhLength != 0) {      udhLength+=GsmAlphabet.UDH_SEPTET_COST_LENGTH;    }    limit=MAX_USER_DATA_SEPTETS - udhLength;  } else {    if (ted.msgCount > 1) {      limit=MAX_USER_DATA_BYTES_WITH_HEADER;    } else {      limit=MAX_USER_DATA_BYTES;    }  }  int pos=0;  int textLen=text.length();  ArrayList<String> result=new ArrayList<String>(ted.msgCount);  while (pos < textLen) {    int nextPos=0;    if (ted.codeUnitSize == ENCODING_7BIT) {      if (activePhone == PHONE_TYPE_CDMA && ted.msgCount == 1) {        nextPos=pos + Math.min(limit,textLen - pos);      } else {        nextPos=GsmAlphabet.findGsmSeptetLimitIndex(text,pos,limit,ted.languageTable,ted.languageShiftTable);      }    } else {      nextPos=pos + Math.min(limit / 2,textLen - pos);    }    if ((nextPos <= pos) || (nextPos > textLen)) {      Log.e(LOG_TAG,"fragmentText failed (" + pos + " >= "+ nextPos+ " or "+ nextPos+ " >= "+ textLen+ ")");      break;    }    result.add(text.substring(pos,nextPos));    pos=nextPos;  }  return result;}  }
class C{  public static double euclideanDistance(Problem problem,Solution a,Solution b){  return distance(problem,a,b,2.0);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.698 -0500",hash_original_method="81F5AC8E69E1A1CBA984F8550D6AF5BD",hash_generated_method="359C401138D8DF0D69F0B5325E55616C") public String toOIDString(){  if (sOID == null) {    sOID="OID." + toString();  }  return sOID;}  }
class C{  public Element store(Object o){  jmri.UserPreferencesManager p=(jmri.UserPreferencesManager)o;  Element messages=new Element("UserMessagePreferences");  setStoreElementClass(messages);  java.util.ArrayList<String> preferenceList=p.getSimplePreferenceStateList();  for (int i=0; i < preferenceList.size(); i++) {    Element pref=new Element("setting");    pref.addContent(preferenceList.get(i));    messages.addContent(pref);  }  int comboBoxSize=p.getComboBoxSelectionSize();  if (comboBoxSize > 0) {    Element comboList=new Element("comboBoxLastValue");    for (int i=0; i < comboBoxSize; i++) {      if ((p.getComboBoxLastSelection(i) != null) && (!p.getComboBoxLastSelection(i).equals(""))) {        Element combo=new Element("comboBox");        combo.setAttribute("name",p.getComboBoxName(i));        combo.setAttribute("lastSelected",p.getComboBoxLastSelection(i));        comboList.addContent(combo);      }    }    messages.addContent(comboList);  }  java.util.ArrayList<String> preferenceClassList=p.getPreferencesClasses();  for (int k=0; k < preferenceClassList.size(); k++) {    String strClass=preferenceClassList.get(k);    java.util.ArrayList<String> multipleList=p.getMultipleChoiceList(strClass);    Element classElement=new Element("classPreferences");    classElement.setAttribute("class",strClass);    boolean store=false;    Element multiOption=new Element("multipleChoice");    for (int i=0; i < multipleList.size(); i++) {      String itemName=p.getChoiceName(strClass,i);      if (p.getMultipleChoiceDefaultOption(strClass,itemName) != p.getMultipleChoiceOption(strClass,itemName)) {        Element multiOptionItem=new Element("option");        store=true;        multiOptionItem.setAttribute("item",itemName);        multiOptionItem.setAttribute("value",Integer.toString(p.getMultipleChoiceOption(strClass,itemName)));        multiOption.addContent(multiOptionItem);      }    }    if (store) {      classElement.addContent(multiOption);    }    boolean listStore=false;    java.util.ArrayList<String> singleList=p.getPreferenceList(strClass);    if (singleList.size() != 0) {      Element singleOption=new Element("reminderPrompts");      for (int i=0; i < singleList.size(); i++) {        String itemName=p.getPreferenceItemName(strClass,i);        if (p.getPreferenceState(strClass,itemName)) {          Element pref=new Element("reminder");          pref.addContent(singleList.get(i));          singleOption.addContent(pref);          listStore=true;        }      }      if (listStore) {        classElement.addContent(singleOption);      }    }    if ((store) || (listStore)) {      messages.addContent(classElement);    }  }  java.util.ArrayList<String> windowList=p.getWindowList();  if (windowList != null && windowList.size() != 0) {    for (    String strClass : windowList) {      Element windowElement=new Element("windowDetails");      windowElement.setAttribute("class",strClass);      boolean set=false;      if (p.getSaveWindowLocation(strClass)) {        try {          double x=p.getWindowLocation(strClass).getX();          double y=p.getWindowLocation(strClass).getY();          Element loc=new Element("locX");          loc.addContent(Double.toString(x));          windowElement.addContent(loc);          loc=new Element("locY");          windowElement.addContent(loc);          loc.addContent(Double.toString(y));          set=true;        } catch (        NullPointerException ex) {        }      }      if (p.getSaveWindowSize(strClass)) {        try {          double width=p.getWindowSize(strClass).getWidth();          double height=p.getWindowSize(strClass).getHeight();          if (!(width == 0.0 && height == 0.0)) {            Element size=new Element("width");            size.addContent(Double.toString(width));            windowElement.addContent(size);            size=new Element("height");            size.addContent(Double.toString(height));            windowElement.addContent(size);            set=true;          }        } catch (        NullPointerException ex) {        }      }      Set<String> s=p.getPropertyKeys(strClass);      if (s != null && s.size() != 0) {        Element ret=new Element("properties");        windowElement.addContent(ret);        for (        String key : s) {          Object value=p.getProperty(strClass,key);          Element prop=new Element("property");          ret.addContent(prop);          prop.addContent(new Element("key").setAttribute("class",key.getClass().getName()).setText(key));          if (value != null) {            prop.addContent(new Element("value").setAttribute("class",value.getClass().getName()).setText(value.toString()));          }        }        set=true;      }      if (set) {        messages.addContent(windowElement);      }    }  }  if (p.getTablesList().size() != 0) {    Element tablesElement=new Element("tableDetails");    for (    String table : p.getTablesList()) {      Element tableElement=new Element("table");      tableElement.setAttribute("name",table);      for (      String column : p.getTablesColumnList(table)) {        Element columnElement=new Element("column");        columnElement.setAttribute("name",column);        if (p.getTableColumnOrder(table,column) != -1) {          columnElement.addContent(new Element("order").addContent(Integer.toString(p.getTableColumnOrder(table,column))));        }        if (p.getTableColumnWidth(table,column) != -1) {          columnElement.addContent(new Element("width").addContent(Integer.toString(p.getTableColumnWidth(table,column))));        }        if (p.getTableColumnSort(table,column) != SortOrder.UNSORTED) {          columnElement.addContent(new Element("sortOrder").addContent(p.getTableColumnSort(table,column).name()));          columnElement.addContent(new Element("sort").addContent(p.getTableColumnSort(table,column) == SortOrder.ASCENDING ? Integer.toString(TableSorter.ASCENDING) : Integer.toString(TableSorter.DESCENDING)));        }        if (p.getTableColumnHidden(table,column)) {          columnElement.addContent(new Element("hidden").addContent("yes"));        }        tableElement.addContent(columnElement);      }      tablesElement.addContent(tableElement);    }    messages.addContent(tablesElement);  }  return messages;}  }
class C{  public PortService addPorts(Integer... ports){  for (  int port : ports) {    if (port > 0 && port < 665535)     this.portList.add(port);  }  return this;}  }
class C{  public void takeValuesFrom(Bean<T> bean){  for (  PropertyDescriptor property : getProperties()) {    setValue(property,bean.getValue(property.getName()));  }}  }
class C{  @Override public Object readObject() throws IOException {  return readObject(0);}  }
class C{  public void removeListener(final IOperandExpressionListener listener){  m_listeners.removeListener(listener);}  }
class C{  public static <U,I>SimplePreferenceData<U,I> load(Stream<Tuple3<U,I,Double>> tuples){  return load((Stream<Tuple4<U,I,Double,Void>>)tuples.map(null),null,null);}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  @Override public String toString(){  if (m_ZeroR != null) {    StringBuffer buf=new StringBuffer();    buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");    buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");    buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");    buf.append(m_ZeroR.toString());    return buf.toString();  }  if (m_rule == null) {    return "OneR: No model built yet.";  }  return m_rule.toString();}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public Drawable generateImageFromScramble(SharedPreferences sp,String scramble){  String top;  String left;  String front;  String right;  String back;  String down;  if (!puzzleType.equals(PuzzleUtils.TYPE_SKEWB)) {    top=sp.getString("cubeTop","FFFFFF");    left=sp.getString("cubeLeft","FF8B24");    front=sp.getString("cubeFront","02D040");    right=sp.getString("cubeRight","EC0000");    back=sp.getString("cubeBack","304FFE");    down=sp.getString("cubeDown","FDD835");  } else {    top=sp.getString("cubeTop","FFFFFF");    left=sp.getString("cubeFront","02D040");    front=sp.getString("cubeRight","EC0000");    right=sp.getString("cubeBack","304FFE");    back=sp.getString("cubeLeft","EF6C00");    down=sp.getString("cubeDown","FDD835");  }  String cubeImg=null;  SVG cubeSvg=null;  Drawable pic=null;  try {    cubeImg=puzzle.drawScramble(scramble,puzzle.parseColorScheme(back + "," + down+ ","+ front+ ","+ left+ ","+ right+ ","+ top)).toString();  } catch (  InvalidScrambleException e) {    e.printStackTrace();  }  if (cubeImg != null) {    try {      cubeSvg=SVG.getFromString(cubeImg);      pic=new PictureDrawable(cubeSvg.renderToPicture());    } catch (    SVGParseException e) {      e.printStackTrace();    }  }  return pic;}  }
class C{  protected void updateFileIcon(@NotNull VirtualFile file){  Set<EditorsSplitters> all=getAllSplitters();  for (  EditorsSplitters each : all) {    each.updateFileIcon(file);  }}  }
class C{  private void checkSearch(String inputGraph,String outputGraph){  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  Pc pc=new Pc(independence);  Graph resultGraph=pc.search(new FasStableConcurrent(independence),independence.getVariables());  Graph trueGraph=GraphConverter.convert(outputGraph);  resultGraph=GraphUtils.replaceNodes(resultGraph,trueGraph.getNodes());  assertTrue(resultGraph.equals(trueGraph));}  }
class C{  @Override public boolean addAll(Collection<? extends E> collection){  int size=collection.size();  ensureCapacity(size);  Iterator<? extends E> it=collection.iterator();  boolean changed=false;  while (size-- > 0) {    if (add(it.next())) {      changed=true;    }  }  return changed;}  }
class C{  public AccessTokenBodyExtractor(ContainerRequestContext context,String accessTokenParameter,String tokenTypeParameter,String tokenSignatureParameter){  this.accessTokenParameter=accessTokenParameter;  this.tokenTypeParameter=tokenTypeParameter;  this.tokenSignatureParameter=tokenSignatureParameter;  this.sm=StringManager.getManager(Config.LOCALIZATION_PACKAGE_NAME);  this.form=new Form();  if (MediaType.APPLICATION_JSON_TYPE.isCompatible(context.getMediaType()) && context.hasEntity()) {    InputStream inputStream=context.getEntityStream();    Scanner scanner=new Scanner(inputStream);    scanner.useDelimiter(FIELD_DELIMITER);    while (scanner.hasNext(FIELD_PATTERN)) {      scanner.next(FIELD_PATTERN);      MatchResult matches=scanner.match();      if (matches.groupCount() == 2) {        String name=matches.group(1);        String value=matches.group(2);        if (value != null) {          form.param(name,value);        }      }    }    if (scanner.findWithinHorizon(JSON_DELIMITER,0) != null) {      MatchResult matches=scanner.match();      json=matches.group(1);    }    if (json != null) {      try {        inputStream.close();      } catch (      IOException e) {        throw new IllegalArgumentException(e);      }      try {        String requestCharset=context.getMediaType().getParameters().get(MediaType.CHARSET_PARAMETER);        if (requestCharset == null) {          requestCharset=StandardCharsets.UTF_8.name();        }        inputStream=new ByteArrayInputStream(json.getBytes(requestCharset));      } catch (      UnsupportedEncodingException e) {        throw new IllegalArgumentException(e);      }      context.setEntityStream(inputStream);    }  }}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("PP_Order_ID"))     p_PP_Order_ID=para.getParameterAsInt(); else     if (name.equals("IsPrintPickList"))     p_IsPrintPickList=para.getParameterAsBoolean(); else     if (name.equals("IsPrintWorkflow"))     p_IsPrintWorkflow=para.getParameterAsBoolean(); else     if (name.equals("IsPrintPackingList"))     p_IsPrintPackList=para.getParameterAsBoolean(); else     if (name.equals("IsComplete"))     p_IsComplete=para.getParameterAsBoolean(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  final public void testApplicationTestCaseSetUpProperly() throws Exception {  setupApplication();  assertNotNull("Application class could not be instantiated successfully",mApplication);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String toPrettyString(){  return JsonOutput.prettyPrint(toString());}  }
class C{  public void doTestEntityExpiration() throws Exception {  IDeviceListener mockListener=createMock(IDeviceListener.class);  expect(mockListener.getName()).andReturn("mockListener").anyTimes();  expect(mockListener.isCallbackOrderingPostreq((String)anyObject(),(String)anyObject())).andReturn(false).atLeastOnce();  expect(mockListener.isCallbackOrderingPrereq((String)anyObject(),(String)anyObject())).andReturn(false).atLeastOnce();  ITopologyService mockTopology=createMock(ITopologyService.class);  expect(mockTopology.isAttachmentPointPort(DatapathId.of(anyLong()),OFPort.of(anyShort()))).andReturn(true).anyTimes();  expect(mockTopology.isBroadcastDomainPort(DatapathId.of(1L),OFPort.of(1))).andReturn(false).anyTimes();  expect(mockTopology.isBroadcastDomainPort(DatapathId.of(5L),OFPort.of(1))).andReturn(false).anyTimes();  expect(mockTopology.getOpenflowDomainId(DatapathId.of(1L))).andReturn(DatapathId.of(1L)).anyTimes();  expect(mockTopology.getOpenflowDomainId(DatapathId.of(5L))).andReturn(DatapathId.of(5L)).anyTimes();  expect(mockTopology.isConsistent(DatapathId.of(1L),OFPort.of(1),DatapathId.of(5L),OFPort.of(1))).andReturn(false).anyTimes();  Date topologyUpdateTime=new Date();  expect(mockTopology.getLastUpdateTime()).andReturn(topologyUpdateTime).anyTimes();  replay(mockTopology);  deviceManager.topology=mockTopology;  Calendar c=Calendar.getInstance();  Entity entity1=new Entity(MacAddress.of(1L),VlanVid.ZERO,IPv4Address.of(2),IPv6Address.NONE,DatapathId.of(1L),OFPort.of(1),c.getTime());  c.add(Calendar.MILLISECOND,-DeviceManagerImpl.ENTITY_TIMEOUT - 1);  Entity entity2=new Entity(MacAddress.of(1L),VlanVid.ZERO,IPv4Address.of(1),IPv6Address.NONE,DatapathId.of(5L),OFPort.of(1),c.getTime());  deviceManager.learnDeviceByEntity(entity1);  IDevice d=deviceManager.learnDeviceByEntity(entity2);  assertArrayEquals(new IPv4Address[]{IPv4Address.of(1),IPv4Address.of(2)},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());  Iterator<? extends IDevice> diter=deviceManager.queryClassDevices(d.getEntityClass(),MacAddress.NONE,VlanVid.ZERO,IPv4Address.of(1),IPv6Address.NONE,DatapathId.NONE,OFPort.ZERO);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  diter=deviceManager.queryClassDevices(d.getEntityClass(),MacAddress.NONE,VlanVid.ZERO,IPv4Address.of(2),IPv6Address.NONE,DatapathId.NONE,OFPort.ZERO);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  replay(mockListener);  deviceManager.addListener(mockListener);  verify(mockListener);  reset(mockListener);  mockListener.deviceMoved(isA(IDevice.class));  mockListener.deviceIPV4AddrChanged(isA(IDevice.class));  replay(mockListener);  deviceManager.entityCleanupTask.reschedule(0,null);  d=deviceManager.getDevice(d.getDeviceKey());  assertArrayEquals(new IPv4Address[]{IPv4Address.of(2)},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());  diter=deviceManager.queryClassDevices(d.getEntityClass(),MacAddress.NONE,VlanVid.ZERO,IPv4Address.of(2),IPv6Address.NONE,DatapathId.NONE,OFPort.ZERO);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  diter=deviceManager.queryClassDevices(d.getEntityClass(),MacAddress.NONE,VlanVid.ZERO,IPv4Address.of(1),IPv6Address.NONE,DatapathId.NONE,OFPort.ZERO);  assertFalse(diter.hasNext());  d=deviceManager.findDevice(MacAddress.of(1L),VlanVid.ZERO,IPv4Address.NONE,IPv6Address.NONE,DatapathId.NONE,OFPort.ZERO);  assertArrayEquals(new IPv4Address[]{IPv4Address.of(2)},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());  verify(mockListener);}  }
class C{  public void writeEmlIntoRtf(Document doc,Resource resource) throws DocumentException {  resourceBundle=ResourceBundle.getBundle("ApplicationResources",Locale.ENGLISH);  Eml eml=resource.getEml();  doc.setMargins(72,72,72,72);  System.out.println(DataDir.CONFIG_DIR);  doc.addAuthor(resource.getCreator().getName());  doc.addCreationDate();  doc.addTitle((eml.getTitle() == null) ? resource.getShortname() : eml.getTitle());  StringBuilder keys=new StringBuilder();  for (  KeywordSet kw : eml.getKeywords()) {    if (keys.length() == 0) {      keys.append(kw.getKeywordsString(", "));    } else {      keys.append(", " + kw.getKeywordsString(", "));    }  }  String keysValue=keys.toString();  doc.addKeywords(keysValue);  doc.open();  addPara(doc,eml.getTitle(),fontHeader,0,Element.ALIGN_CENTER);  doc.add(Chunk.NEWLINE);  addAuthors(doc,eml);  addDates(doc);  addCitations(doc);  addResourceCitation(doc,eml);  addAbstract(doc,eml);  addKeywords(doc,keysValue);  addGeneralDescription(doc,eml);  addProjectData(doc,eml);  addResourceLink(doc,resource);  addTaxonomicCoverages(doc,eml);  addSpatialCoverage(doc,eml);  addTemporalCoverages(doc,eml);  addNaturalCollections(doc,eml);  addMethods(doc,eml);  addDatasetDescriptions(doc,resource);  addMetadataDescriptions(doc,eml);  addReferences(doc,eml);  doc.close();}  }
class C{  public boolean isBold(){  return bold;}  }
class C{  public StateMachineTestPlanBuilder<S,E> stateMachine(StateMachine<S,E> stateMachine){  return stateMachine(stateMachine,stateMachine);}  }
class C{  static boolean eq(Object x,Object y){  return x == y || x.equals(y);}  }
class C{  private JComponent createInputComponent(AttributeSet attr,Object model){  JComponent c=null;  String type=(String)attr.getAttribute(HTML.Attribute.TYPE);  if (type.equals("submit") || type.equals("reset")) {    String value=(String)attr.getAttribute(HTML.Attribute.VALUE);    if (value == null) {      if (type.equals("submit")) {        value=UIManager.getString("FormView.submitButtonText");      } else {        value=UIManager.getString("FormView.resetButtonText");      }    }    JButton button=new JButton(value);    if (model != null) {      button.setModel((ButtonModel)model);      button.addActionListener(this);    }    c=button;    maxIsPreferred=3;  } else   if (type.equals("image")) {    String srcAtt=(String)attr.getAttribute(HTML.Attribute.SRC);    JButton button;    try {      URL base=((HTMLDocument)getElement().getDocument()).getBase();      URL srcURL=new URL(base,srcAtt);      Icon icon=new ImageIcon(srcURL);      button=new JButton(icon);    } catch (    MalformedURLException e) {      button=new JButton(srcAtt);    }    if (model != null) {      button.setModel((ButtonModel)model);      button.addMouseListener(new MouseEventListener());    }    c=button;    maxIsPreferred=3;  } else   if (type.equals("checkbox")) {    c=new JCheckBox();    if (model != null) {      ((JCheckBox)c).setModel((JToggleButton.ToggleButtonModel)model);    }    maxIsPreferred=3;  } else   if (type.equals("radio")) {    c=new JRadioButton();    if (model != null) {      ((JRadioButton)c).setModel((JToggleButton.ToggleButtonModel)model);    }    maxIsPreferred=3;  } else   if (type.equals("text")) {    int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,-1);    JTextField field;    if (size > 0) {      field=new JTextField();      field.setColumns(size);    } else {      field=new JTextField();      field.setColumns(20);    }    c=field;    if (model != null) {      field.setDocument((Document)model);    }    field.addActionListener(this);    maxIsPreferred=3;  } else   if (type.equals("password")) {    JPasswordField field=new JPasswordField();    c=field;    if (model != null) {      field.setDocument((Document)model);    }    int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,-1);    field.setColumns((size > 0) ? size : 20);    field.addActionListener(this);    maxIsPreferred=3;  } else   if (type.equals("file")) {    JTextField field=new JTextField();    if (model != null) {      field.setDocument((Document)model);    }    int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,-1);    field.setColumns((size > 0) ? size : 20);    JButton browseButton=new JButton(UIManager.getString("FormView.browseFileButtonText"));    Box box=Box.createHorizontalBox();    box.add(field);    box.add(Box.createHorizontalStrut(5));    box.add(browseButton);    browseButton.addActionListener(new BrowseFileAction(attr,(Document)model));    c=box;    maxIsPreferred=3;  }  return c;}  }
class C{  public static EventBean[] addToArray(EventBean[] array,Collection<EventBean> eventsToAdd){  EventBean[] newArray=new EventBean[array.length + eventsToAdd.size()];  System.arraycopy(array,0,newArray,0,array.length);  int counter=array.length;  for (  EventBean eventToAdd : eventsToAdd) {    newArray[counter++]=eventToAdd;  }  return newArray;}  }
class C{  public static String toHex(final byte[] value){  return (value != null) ? new String(Hex.encodeHex(value,false)) : null;}  }
class C{  public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false; else {    TLSMessageChannel that=(TLSMessageChannel)other;    if (this.mySock != that.mySock)     return false; else     return true;  }}  }
class C{  public void onEvent(StickyUpdatedMessage ignored){  ModelModifiedMessage m=EventBus.getDefault().getStickyEvent(ModelModifiedMessage.class);  List<InstalledApp> updated_apps=new ArrayList<InstalledApp>();  List<Pair<ModelModifiedMessage.event_type,String>> events=m.access_events(new MessageAccessor());  if (events.size() == 0) {    return;  }  Pair<ModelModifiedMessage.event_type,String> last=events.get(events.size() - 1);  if (last.first != ModelModifiedMessage.event_type.APP_UPDATED) {    return;  }  InstalledApp app=InstalledApp.find_app(last.second);  if (app == null || !app.is_update_available() || app.has_notified()) {    return;  }  for (  Pair<ModelModifiedMessage.event_type,String> p : events) {    if (p.first != ModelModifiedMessage.event_type.APP_UPDATED) {      continue;    }    app=InstalledApp.find_app(p.second);    if (app == null || !app.is_update_available() || app.has_notified()) {      continue;    }    if (!updated_apps.contains(app)) {      updated_apps.add(app);    }  }  if (updated_apps.size() == 0) {    return;  }  Resources r=getResources();  NotificationCompat.Builder b=new NotificationCompat.Builder(this);  if (updated_apps.size() == 1) {    app=updated_apps.get(updated_apps.size() - 1);    b.setContentTitle(r.getString(R.string.app_updated_notification,app.get_display_name())).setContentText(r.getString(R.string.app_version_available,app.get_latest_version())).setTicker(r.getString(R.string.app_can_be_updated,app.get_display_name())).setSmallIcon(R.drawable.ic_menu_refresh).setAutoCancel(true);  } else {    b.setContentTitle(r.getString(R.string.apps_updated_notification)).setContentText(r.getString(R.string.apps_updated_notification_summary,updated_apps.get(updated_apps.size() - 1).get_display_name(),updated_apps.size() - 1)).setTicker(r.getString(R.string.apps_updated_notification)).setSmallIcon(R.drawable.ic_menu_refresh).setAutoCancel(true);    NotificationCompat.InboxStyle style=new NotificationCompat.InboxStyle();    for (    InstalledApp ia : updated_apps) {      style.addLine(r.getString(R.string.app_version_available_2,ia.get_display_name(),ia.get_version(),ia.get_latest_version()));    }    style.setBigContentTitle(r.getString(R.string.apps_updated_notification));    b.setStyle(style);  }  Intent i=new Intent();  i.setClass(this,MainActivity.class);  PendingIntent pi=PendingIntent.getActivity(this,0,i,PendingIntent.FLAG_ONE_SHOT);  b.setContentIntent(pi);  NotificationManager mgr=(NotificationManager)getSystemService(Service.NOTIFICATION_SERVICE);  mgr.notify(1,b.build());}  }
class C{  public void order(ByteOrder order){  this.order=order;}  }
class C{  private void testAndCorrectNumerics(){  if (population.size() > 0) {    population.sort(new ObjectiveComparator(0));    if (population.get(0).getObjective(0) == population.get(Math.min(lambda - 1,lambda / 2 + 1) - 1).getObjective(0)) {      System.err.println("flat fitness landscape, consider reformulation of fitness, step size increased");      sigma*=Math.exp(0.2 + cs / damps);    }  }  double fac=1.0;  if (StatUtils.max(diagD) < 1e-6) {    fac=1.0 / StatUtils.max(diagD);  } else   if (StatUtils.min(diagD) > 1e4) {    fac=1.0 / StatUtils.min(diagD);  }  if (fac != 1.0) {    sigma/=fac;    for (int i=0; i < problem.getNumberOfVariables(); i++) {      pc[i]*=fac;      diagD[i]*=fac;      for (int j=0; j <= i; j++) {        C[i][j]*=fac * fac;      }    }  }}  }
class C{  public void determineValues(Instances inst){  int i;  AttributeStats stats;  int attIdx;  int min;  int max;  int count;  m_AttIndex.setUpper(inst.numAttributes() - 1);  attIdx=m_AttIndex.getIndex();  m_Values=new HashSet<String>();  stats=inst.attributeStats(attIdx);  if (m_Invert) {    count=stats.nominalCounts.length - m_NumValues;  } else {    count=m_NumValues;  }  if (count < 1) {    count=1;  }  if (count > stats.nominalCounts.length) {    count=stats.nominalCounts.length;  }  Arrays.sort(stats.nominalCounts);  if (m_LeastValues) {    min=stats.nominalCounts[0];    max=stats.nominalCounts[count - 1];  } else {    min=stats.nominalCounts[(stats.nominalCounts.length - 1) - count + 1];    max=stats.nominalCounts[stats.nominalCounts.length - 1];  }  stats=inst.attributeStats(attIdx);  for (i=0; i < stats.nominalCounts.length; i++) {    if ((stats.nominalCounts[i] >= min) && (stats.nominalCounts[i] <= max) && (m_Values.size() < count)) {      m_Values.add(inst.attribute(attIdx).value(i));    }  }}  }
class C{  private synchronized void deleteConnection(final HttpConnection connection){  final HostConfiguration connectionConfiguration=configurationForConnection(connection);  if (LOG.isDebugEnabled()) {    LOG.debug("Reclaiming connection, hostConfig=" + connectionConfiguration);  }  connection.close();  final HostConnectionPool hostPool=getHostPool(connectionConfiguration,true);  hostPool.freeConnections.remove(connection);  hostPool.numConnections--;  numConnections--;  if ((hostPool.numConnections == 0) && hostPool.waitingThreads.isEmpty()) {    mapHosts.remove(connectionConfiguration);  }  idleConnectionHandler.remove(connection);}  }
class C{  public static CCMenuItemToggle item(CCNode target,String selector,CCMenuItem... items){  return new CCMenuItemToggle(target,selector,items);}  }
class C{  private Member nextMember(Member.Type type){  return new TestMember(type,new Address("localhost",++port),new Address("localhost",port + 1000));}  }
class C{  public DefaultStateMachineEventPublisher(){}  }
class C{  public static String FDtoString(Instances i,String FDIDs){  String[] fd=FDIDs.split("->");  String premise=fd[0];  String rhs=fd[1];  StringBuilder result=new StringBuilder();  result.append(i.attribute(Integer.parseInt(premise)).name());  result.append("->");  if (rhs.contains(",")) {    String[] rhsList=rhs.split(",");    for (    String r : rhsList)     result.append(i.attribute(Integer.parseInt(r)).name() + ", ");    result.deleteCharAt(result.length() - 1);    result.deleteCharAt(result.length() - 1);  } else {    result.append(i.attribute(Integer.parseInt(rhs)).name());  }  return result.toString();}  }
class C{  public RangeFileAsyncHttpResponseHandler(File file){  super(file);}  }
class C{  public static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {  byte[] bytes=new byte[expectedSize];  int remaining=expectedSize;  while (remaining > 0) {    int off=expectedSize - remaining;    int read=in.read(bytes,off,remaining);    if (read == -1) {      return Arrays.copyOf(bytes,off);    }    remaining-=read;  }  int b=in.read();  if (b == -1) {    return bytes;  }  FastByteArrayOutputStream out=new FastByteArrayOutputStream();  out.write(b);  copy(in,out);  byte[] result=new byte[bytes.length + out.size()];  System.arraycopy(bytes,0,result,0,bytes.length);  out.writeTo(result,bytes.length);  return result;}  }
class C{  private static long copy(InputStream from,OutputStream to) throws IOException {  byte[] buf=new byte[Settings.BUFFER_SIZE];  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  private double rss(TetradMatrix x,TetradMatrix y,TetradMatrix b){  double rss=0.0;  for (int i=0; i < x.rows(); i++) {    double yH=0.0;    for (int j=0; j < x.columns(); j++) {      yH+=b.get(j,0) * x.get(i,j);    }    double d=y.get(i,0) - yH;    rss+=d * d;  }  return rss;}  }
class C{  public IntervalCategoryToolTipGenerator(String labelFormat,DateFormat formatter){  super(labelFormat,formatter);}  }
class C{  public SignJarAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("SignJarAction.statusbar"));  putValue(NAME,res.getString("SignJarAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SignJarAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SignJarAction.image")))));}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,float[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public BitwiseOrExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void deleteSelection(ArrayList<Integer> nodes){  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      if (nodes.get(i) > nodes.get(j)) {        int h=nodes.get(i);        nodes.set(i,nodes.get(j));        nodes.set(j,h);      }    }  }  if (m_bNeedsUndoAction) {    addUndoAction(new DeleteSelectionAction(nodes));  }  boolean bNeedsUndoAction=m_bNeedsUndoAction;  m_bNeedsUndoAction=false;  try {    for (int iNode=nodes.size() - 1; iNode >= 0; iNode--) {      deleteNode(nodes.get(iNode));    }  } catch (  Exception e) {    e.printStackTrace();  }  m_bNeedsUndoAction=bNeedsUndoAction;}  }
class C{  protected Anonymous_constantDeclaration_1_Impl(){  super();}  }
class C{  public String qty(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  int M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  BigDecimal QtyInvoiced, QtyEntered, PriceActual, PriceEntered;  if (M_Product_ID == 0) {    QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");    mTab.setValue("QtyInvoiced",QtyEntered);  } else   if (mField.getColumnName().equals("C_UOM_ID")) {    int C_UOM_To_ID=((Integer)value).intValue();    QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");    BigDecimal QtyEntered1=QtyEntered.setScale(MUOM.getPrecision(ctx,C_UOM_To_ID),BigDecimal.ROUND_HALF_UP);    if (QtyEntered.compareTo(QtyEntered1) != 0) {      log.fine("Corrected QtyEntered Scale UOM=" + C_UOM_To_ID + "; QtyEntered="+ QtyEntered+ "->"+ QtyEntered1);      QtyEntered=QtyEntered1;      mTab.setValue("QtyEntered",QtyEntered);    }    QtyInvoiced=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (QtyInvoiced == null)     QtyInvoiced=QtyEntered;    boolean conversion=QtyEntered.compareTo(QtyInvoiced) != 0;    PriceActual=(BigDecimal)mTab.getValue("PriceActual");    PriceEntered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,PriceActual);    if (PriceEntered == null)     PriceEntered=PriceActual;    log.fine("qty - UOM=" + C_UOM_To_ID + ", QtyEntered/PriceActual="+ QtyEntered+ "/"+ PriceActual+ " -> "+ conversion+ " QtyInvoiced/PriceEntered="+ QtyInvoiced+ "/"+ PriceEntered);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyInvoiced",QtyInvoiced);    mTab.setValue("PriceEntered",PriceEntered);  } else   if (mField.getColumnName().equals("QtyEntered")) {    int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");    QtyEntered=(BigDecimal)value;    BigDecimal QtyEntered1=QtyEntered.setScale(MUOM.getPrecision(ctx,C_UOM_To_ID),BigDecimal.ROUND_HALF_UP);    if (QtyEntered.compareTo(QtyEntered1) != 0) {      log.fine("Corrected QtyEntered Scale UOM=" + C_UOM_To_ID + "; QtyEntered="+ QtyEntered+ "->"+ QtyEntered1);      QtyEntered=QtyEntered1;      mTab.setValue("QtyEntered",QtyEntered);    }    QtyInvoiced=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (QtyInvoiced == null)     QtyInvoiced=QtyEntered;    boolean conversion=QtyEntered.compareTo(QtyInvoiced) != 0;    log.fine("qty - UOM=" + C_UOM_To_ID + ", QtyEntered="+ QtyEntered+ " -> "+ conversion+ " QtyInvoiced="+ QtyInvoiced);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyInvoiced",QtyInvoiced);  } else   if (mField.getColumnName().equals("QtyInvoiced")) {    int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");    QtyInvoiced=(BigDecimal)value;    int precision=MProduct.get(ctx,M_Product_ID).getUOMPrecision();    BigDecimal QtyInvoiced1=QtyInvoiced.setScale(precision,BigDecimal.ROUND_HALF_UP);    if (QtyInvoiced.compareTo(QtyInvoiced1) != 0) {      log.fine("Corrected QtyInvoiced Scale " + QtyInvoiced + "->"+ QtyInvoiced1);      QtyInvoiced=QtyInvoiced1;      mTab.setValue("QtyInvoiced",QtyInvoiced);    }    QtyEntered=MUOMConversion.convertProductTo(ctx,M_Product_ID,C_UOM_To_ID,QtyInvoiced);    if (QtyEntered == null)     QtyEntered=QtyInvoiced;    boolean conversion=QtyInvoiced.compareTo(QtyEntered) != 0;    log.fine("qty - UOM=" + C_UOM_To_ID + ", QtyInvoiced="+ QtyInvoiced+ " -> "+ conversion+ " QtyEntered="+ QtyEntered);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyEntered",QtyEntered);  }  return "";}  }
class C{  public boolean isComplete(){  String s=getParameter("stale");  if ("true".equalsIgnoreCase(s)) {    return false;  } else {    return this.complete;  }}  }
class C{  public boolean wouldBeSatisfied(double testValue){  return type == ParamConstraintType.NONE || param2 == null && (type == ParamConstraintType.EQ && testValue == number || type == ParamConstraintType.GT && testValue > number || type == ParamConstraintType.LT && testValue < number);}  }
class C{  public boolean containsKey(Object key){  key=convertKey(key);  int hashCode=hash(key);  HashEntry entry=data[hashIndex(hashCode,data.length)];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.key)) {      return true;    }    entry=entry.next;  }  return false;}  }
class C{  public TabbedInspector(Tabbable object,GUIState state,String name){  Properties properties=Properties.getProperties(object);  if (properties instanceof SimpleProperties) {    buildTabbedInspector((SimpleProperties)properties,state,name,object.provideTabProperties(),object.provideTabNames(),object.provideExtraTab());  } else   throw new RuntimeException("A Tabbable Object must provide SimpleProperties.");}  }
class C{  private static boolean send(Email email,Settings settings) throws EmailException {  email=buildMessage(email,settings);  email.setMailSession(getSession(settings));  return sendMessage(email);}  }
class C{  public boolean isExpired(final Date date){  if (date == null) {    throw new IllegalArgumentException("Date may not be null");  }  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= date.getTime());}  }
class C{  public boolean isNonRegularLoop(){  return !isAffineLoop();}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  private RadialGradient_Delegate(float x,float y,float radius,int colors[],float positions[],TileMode tile){  super(colors,positions);  mJavaPaint=new RadialGradientPaint(x,y,radius,mColors,mPositions,tile);}  }
class C{  public T caseCompositeSlot(CompositeSlot object){  return null;}  }
class C{  public void sendResponse(Response response){  response.setDestination(request.getSource());  response.setDestinationPort(request.getSourcePort());  setResponse(response);  endpoint.sendResponse(this,response);}  }
class C{  public boolean columnUpdated(int indexColumn) throws SQLException {  return crsInternal.columnUpdated(indexColumn);}  }
class C{  public static void e(String tag,String msg){  e(tag,msg,null);}  }
class C{  public static Short[] nullToEmpty(Short[] array){  if (array == null || array.length == 0) {    return EMPTY_SHORT_OBJECT_ARRAY;  }  return array;}  }
class C{  public static void vibrate(Context context){  vibrate(context,VIBRATE_TIME);}  }
class C{  private void enableOrDisableControls(){  boolean enabled=(this.showTitle == true);  this.titleField.setEnabled(enabled);  this.selectFontButton.setEnabled(enabled);  this.selectPaintButton.setEnabled(enabled);}  }
class C{  @Override protected void tearDownQuery(UUID queryId){  if (queryId != null) {    if (log.isDebugEnabled()) {      log.debug("Tearing down query: " + queryId);      log.debug("m_queries2 has " + m_queries2.size());    }    final RunningQuery r=m_queries2.get(queryId);    if (r != null) {      m_queries.remove(r.getExtQueryId(),r);      m_queries2.remove(queryId);      if (log.isDebugEnabled()) {        log.debug("Tearing down query: " + queryId);        log.debug("m_queries2 has " + m_queries2.size());      }    }  }}  }
class C{  public static DoubleMatrix[] jblas_sparseSVD(double[][] A){  return org.jblas.Singular.sparseSVD(new DoubleMatrix(A));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setDxvaMpegMode(DShowTVPlayer.getDXVACode(getString(stack)));  return null;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  DaoTestDao.dropTable(db,ifExists);}  }
class C{  public LazyObjectMap(final ObjectProvider<? extends Value> provider){  super();  this.provider=provider;}  }
class C{  @SuppressWarnings({"rawtypes"}) public int[] findItemSlots(@Nonnull IInventory inv,@Nonnull List expected,@Nonnull int[] slotsSlice){  final boolean[] usedSlots=new boolean[inv.getSizeInventory()];  final int[] slots=new int[expected.size()];  int i=0;  final int invSize=slotsSlice != null ? slotsSlice.length : inv.getSizeInventory();  for (  Object expectedStack : expected) {    slots[i]=-1;    for (int index=0; index < invSize; ++index) {      final int slotIndex=slotsSlice != null ? slotsSlice[index] : index;      boolean foundItem=false;      if (expectedStack instanceof IMultiItemStacks) {        foundItem=checkSlotAndSize(inv,(IMultiItemStacks)expectedStack,slotIndex);      } else       if (expectedStack instanceof ItemStack) {        foundItem=checkSlotAndSize(inv,(ItemStack)expectedStack,slotIndex);      }      if (foundItem) {        if (usedSlots[slotIndex])         continue;        usedSlots[slotIndex]=true;        slots[i]=slotIndex;        break;      }    }    i++;  }  return slots;}  }
class C{  public StyledSpinnerUI(Style style){  this.style=style;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);}  }
class C{  @Override public void stop(){  CountDownLatch latch=stopped;  Thread oldThread=thread.getAndUpdate(null);  if (oldThread != null && latch != null) {    try {      latch.await(10,TimeUnit.SECONDS);    } catch (    InterruptedException e) {      Thread.interrupted();    }  }}  }
class C{  public int clearWritten(){  int temp=written;  written=0;  return temp;}  }
class C{  public void initialize(BSFManager mgr,String lang,Vector declaredBeans) throws BSFException {  super.initialize(mgr,lang,declaredBeans);  shell=new GroovyShell(mgr.getClassLoader());  shell.setVariable("bsf",new BSFFunctions(mgr,this));  int size=declaredBeans.size();  for (int i=0; i < size; i++) {    declareBean((BSFDeclaredBean)declaredBeans.elementAt(i));  }}  }
class C{  public ClientAuthenticatorException(final String message,final Throwable ex,final OneDriveErrorCodes code){  super(message,ex,code);}  }
class C{  public static IndexWriter createIndexWriter(Directory directory,boolean create,AnalyzerType analyzer) throws IOException {  Analyzer tmpAnalyzer=null;  if (analyzer == AnalyzerType.SimpleAnalyzer)   tmpAnalyzer=new SimpleAnalyzer(); else   if (analyzer == AnalyzerType.WhitespaceAnalyzer)   tmpAnalyzer=new WhitespaceAnalyzer(); else   if (analyzer == AnalyzerType.KeywordAnalyzer)   tmpAnalyzer=new KeywordAnalyzer(); else   if (analyzer == AnalyzerType.StandardAnalyzer)   tmpAnalyzer=new StandardAnalyzer();  IndexWriterConfig config=new IndexWriterConfig(tmpAnalyzer);  config.setRAMBufferSizeMB(512);  config.setCommitOnClose(true);  if (create)   config.setOpenMode(IndexWriterConfig.OpenMode.CREATE); else   config.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);  config.setCodec(new LireCustomCodec());  return new IndexWriter(directory,config);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node newChild;  Node retval;  Node lastChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  newChild=doc.createElement("terday");{    boolean success=false;    try {      retval=titleAttr.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  private boolean checkReady(){  if (mMap == null) {    Toast.makeText(this,R.string.map_not_ready,Toast.LENGTH_SHORT).show();    return false;  }  return true;}  }
class C{  public List<Integer> topKFrequent(int[] nums,int k){  if (nums == null || nums.length == 0)   return Collections.emptyList();  Map<Integer,Integer> frequencyMap=new HashMap<>();  for (  int n : nums) {    frequencyMap.put(n,frequencyMap.getOrDefault(n,0) + 1);  }  List<Integer>[] lists=new List[nums.length + 1];  for (  Map.Entry<Integer,Integer> e : frequencyMap.entrySet()) {    int frequency=e.getValue();    if (lists[frequency] == null)     lists[frequency]=new ArrayList<>();    lists[frequency].add(e.getKey());  }  List<Integer> res=new ArrayList<>();  for (int i=lists.length - 1; i >= 0; i--) {    if (lists[i] == null)     continue;    for (int j=0; j < lists[i].size() && res.size() < k; j++) {      res.add(lists[i].get(j));    }  }  return res;}  }
class C{  @Override public synchronized void addKeyListener(KeyListener l){  super.addKeyListener(l);}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  protected Point isAreaClearBWT(int xPoint,int yPoint,Point point){  Debug.message("declutterdetail","Decluttering: Checking both ways...");  if (!indexes.setFromPixels(xPoint,yPoint)) {    return null;  }  if (isClear(indexes,true)) {    point.x=xPoint;    point.y=yPoint;    Debug.message("declutterdetail","*******Decluttering: found a spot");    return point;  }  int leftMostIndex=indexes.origXIndex - indexes.origIndexLength;  if (!indexes.set(leftMostIndex,indexes.origYIndex)) {    return null;  }  if (isClear(indexes,true)) {    point.x=leftMostIndex * x_pix_interval;    point.y=yPoint;    Debug.message("declutterdetail","*******Decluttering: found a spot");    return point;  }  return null;}  }
class C{  public static final void fixupEPSquare(Position pos){  int epSquare=pos.getEpSquare();  if (epSquare >= 0) {    ArrayList<Move> moves=MoveGen.instance.legalMoves(pos);    boolean epValid=false;    for (    Move m : moves) {      if (m.to == epSquare) {        if (pos.getPiece(m.from) == (pos.whiteMove ? Piece.WPAWN : Piece.BPAWN)) {          epValid=true;          break;        }      }    }    if (!epValid)     pos.setEpSquare(-1);  }}  }
class C{  protected String composeUnrecognizedSymCode(){  return null;}  }
class C{  public double next(){  moveToNextIndex();  return _hash._set[_index];}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.PATTERN_CHARACTER;}  }
class C{  public void removeInternalFrameListener(InternalFrameListener l){  listenerList.remove(InternalFrameListener.class,l);}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public static TimeKeeper start(){  return new TimeKeeper();}  }
class C{  void replicateUpdate(NodeGroupState localState,Operation outboundOp,SelectAndForwardRequest req,SelectOwnerResponse rsp){  int memberCount=localState.nodes.size();  NodeState selfNode=localState.nodes.get(getHost().getId());  if (req.serviceOptions.contains(ServiceOption.OWNER_SELECTION) && selfNode.membershipQuorum > memberCount) {    outboundOp.fail(new IllegalStateException("Not enough peers: " + memberCount));    return;  }  if (memberCount == 1) {    outboundOp.complete();    return;  }  Collection<NodeState> selectedNodes=rsp.selectedNodes;  int eligibleMemberCount=selectedNodes.size();  String location=getHost().getLocation();  NodeSelectorReplicationContext context=new NodeSelectorReplicationContext(location,selectedNodes,outboundOp);  String rplQuorumValue=outboundOp.getRequestHeader(Operation.REPLICATION_QUORUM_HEADER);  if (rplQuorumValue != null) {    try {      if (Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL.equals(rplQuorumValue)) {        context.successThreshold=eligibleMemberCount;      } else {        context.successThreshold=Integer.parseInt(rplQuorumValue);      }      if (context.successThreshold > eligibleMemberCount) {        String errorMsg=String.format("Requested quorum %d is larger than member count %d",context.successThreshold,eligibleMemberCount);        throw new IllegalArgumentException(errorMsg);      }      outboundOp.getRequestHeaders().remove(Operation.REPLICATION_QUORUM_HEADER);    } catch (    Throwable e) {      outboundOp.setRetryCount(0).fail(e);      return;    }    context.failureThreshold=(eligibleMemberCount - context.successThreshold) + 1;    replicateUpdateToNodes(context);    return;  }  if (req.serviceOptions.contains(ServiceOption.OWNER_SELECTION)) {    if (location == null) {      context.successThreshold=Math.min(eligibleMemberCount,selfNode.membershipQuorum);      context.failureThreshold=(eligibleMemberCount - context.successThreshold) + 1;    } else {      int localNodeCount=getNodeCountInLocation(location,selectedNodes);      context.successThreshold=Math.min(localNodeCount,selfNode.membershipQuorum);      context.failureThreshold=(localNodeCount - context.successThreshold) + 1;    }    replicateUpdateToNodes(context);    return;  }  context.successThreshold=Math.min(2,eligibleMemberCount - 1);  context.failureThreshold=(eligibleMemberCount - context.successThreshold) + 1;  replicateUpdateToNodes(context);}  }
class C{  @Override public void progress(double pct,int blocksSoFar,Date date){  if (pct > DONE_FOR_DOUBLES) {    doneDownload();  } else {synchronized (lockObject) {      String downloadStatusText=controller.getLocaliser().getString("multiBitDownloadListener.downloadingTextShort");      if (!(downloadStatusText.indexOf("multiBitDownloadListener") > -1)) {        singleWalletPanel.setSyncMessage(downloadStatusText,pct);      }    }  }}  }
class C{  public synchronized void flush(){  _sharedMap.clear();}  }
class C{  public void makeCurrent(EGLSurface drawSurface,EGLSurface readSurface){  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    Log.d(TAG,"NOTE: makeCurrent w/o display");  }  if (!EGL14.eglMakeCurrent(mEGLDisplay,drawSurface,readSurface,mEGLContext)) {    throw new RuntimeException("eglMakeCurrent(draw,read) failed");  }}  }
class C{  protected void invalidate(boolean first){  if (!isValid()) {    if (canBeValid && !first) {      canBeValid=false;    }    return;  }  isValid=false;  canBeValid=first;  if (children != null) {    for (    ElementInfo child : children) {      child.invalidate(false);    }    children=null;  }}  }
class C{  public InExpression(Expression value,boolean isNotIn,Object... parameters){  this.notIn=isNotIn;  this.getChildren().add(value);  for (int i=0; i < parameters.length; i++) {    if (parameters[i] instanceof Expression) {      this.getChildren().add((Expression)parameters[i]);    } else {      this.getChildren().add(new ConstantExpression(parameters[i]));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.721 -0500",hash_original_method="8535257A8EC97C9D266AD8174A62E8F9",hash_generated_method="5F61CA0B08E7DB545E43980463DAE0FD") public boolean isOpen(){  return _isOpen_;}  }
class C{  public static String parseExperimentName(String name){  Scanner scanner=new Scanner(name);  StringBuilder csvName=new StringBuilder();  scanner.useDelimiter("_");  for (int i=0; i < 4; i++) {    if (scanner.hasNext()) {      csvName.append(scanner.next() + ",");    } else {      csvName.append(",");    }  }  scanner.close();  return csvName.toString();}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  private synchronized boolean applyPendingOptions(){  if (pendingOptions.isEmpty())   return false;  boolean modified=false;  UCIEngine uci=uciEngine;  if (uci != null)   modified=uci.setUCIOptions(pendingOptions);  pendingOptions.clear();  return modified;}  }
class C{  public VelocityOutlinePage(VelocityEditor anEditor){  fEditor=anEditor;  fIsDisposed=true;}  }
class C{  public static Node traverseDirected(Node node,Edge edge){  if (node == edge.getNode1()) {    if ((edge.getEndpoint1() == Endpoint.TAIL) && (edge.getEndpoint2() == Endpoint.ARROW)) {      return edge.getNode2();    }  } else   if (node == edge.getNode2()) {    if ((edge.getEndpoint2() == Endpoint.TAIL) && (edge.getEndpoint1() == Endpoint.ARROW)) {      return edge.getNode1();    }  }  return null;}  }
class C{  private void init(){  double normalizedFrequency=(double)mTargetFrequency / mSampleRate;  mCoefficient=2.0D * Math.cos(2 * Math.PI * normalizedFrequency);}  }
class C{  private void maybeAddNewWizardActionsToPerspective(WorkbenchPage page,IPerspectiveDescriptor desc){  if (page == null || desc == null) {    return;  }  if (PERSPECTIVES_TO_ADD_WIZARDS_TO.contains(desc.getId())) {  }}  }
class C{  public static boolean isValidEmail(String email){  return email != null && !email.endsWith(MACHINE_GENERATED_ADDRESS);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int hashCode(){  int hash=1;  hash=hash * 31 + m_codeDecodeIdentifier.hashCode();  hash=hash * 31 + (m_codeDecodeType == null ? 0 : m_codeDecodeType.hashCode());  return hash;}  }
class C{  public void unsetBusyTask(){  if (mBusyTask == null) {    LOG.error("Attempt to mark device as not busy anymore, but was not busy before.");    return;  }  LOG.info("Mark device as NOT busy anymore: " + mBusyTask);  mBusyTask=null;}  }
class C{  public ByteBuffer scratchBuffer(int capacity){  if (this.scratchBuffer.capacity() < capacity) {    this.scratchBuffer=ByteBuffer.allocateDirect(capacity).order(ByteOrder.nativeOrder());  }  return this.scratchBuffer;}  }
class C{  ElementTransform toTransform(){  check();  return ElementTransform.create(this);}  }
class C{  protected void removeMapping(HashEntry entry,int hashIndex,HashEntry previous){  modCount++;  removeEntry(entry,hashIndex,previous);  size--;  destroyEntry(entry);}  }
class C{  private void initListeners(){  addMouseListener(m_listener);  addMouseMotionListener(m_listener);  addMouseWheelListener(m_listener);  addFocusListener(m_listener);  addComponentListener(m_listener);  addKeyListener(m_listener);  m_caret.addCaretListener(m_listener);}  }
class C{  @Override protected void consumeAttributes(AttributeHelper attrsHelper) throws ParseException {}  }
class C{  public boolean addRef(Object object) throws IOException {  if (_refs == null)   _refs=new IdentityHashMap();  Integer ref=(Integer)_refs.get(object);  if (ref != null) {    int value=ref.intValue();    writeRef(value);    return true;  } else {    _refs.put(object,new Integer(_refs.size()));    return false;  }}  }
class C{  private int balanceFactor(Node x){  return height(x.left) - height(x.right);}  }
class C{  protected CMapFormat4(short language){  super((short)4,language);  segments=Collections.synchronizedSortedMap(new TreeMap<Segment,Object>());  char[] map=new char[1];  map[0]=(char)0;  addSegment((short)0xffff,(short)0xffff,map);}  }
class C{  public AstrixContext configure(){  DynamicConfig config=createDynamicConfig();  ModulesConfigurer modulesConfigurer=new ModulesConfigurer();  modulesConfigurer.registerDefault(StrategyProvider.create(HystrixCommandNamingStrategy.class,DefaultHystrixCommandNamingStrategy.class));  modulesConfigurer.registerDefault(StrategyProvider.create(BeanFaultToleranceFactorySpi.class,NoFaultTolerance.class));  modulesConfigurer.registerDefault(StrategyProvider.create(MetricsSpi.class,DefaultMetricSpi.class));  modulesConfigurer.registerDefault(StrategyProvider.create(MBeanServerFacade.class,PlatformMBeanServer.class,null));  for (  Module plugin : customModules) {    modulesConfigurer.register(plugin);  }  loadAstrixContextPlugins(modulesConfigurer);  for (  StrategyProvider<?> strategyProvider : this.strategyProviderByType.values()) {    modulesConfigurer.register(strategyProvider);  }  modulesConfigurer.register(new AstrixConfigModule(config,this.settings));  modulesConfigurer.register(new DirectComponentModule());  modulesConfigurer.register(new AstrixBeansCoreModule());  modulesConfigurer.register(new MetricsModule());  modulesConfigurer.register(new AstrixMBeanModule());  modulesConfigurer.register(new ServiceRegistryDiscoveryModule());  modulesConfigurer.register(new ConfigDiscoveryModule());  modulesConfigurer.register(new BeansPublishModule());  modulesConfigurer.register(new ServiceModule());  modulesConfigurer.register(new ObjectSerializerModule());  modulesConfigurer.register(new Jackson1SerializerModule());  modulesConfigurer.register(new ApiProviderBeanPublisherModule());  modulesConfigurer.register(new FaultToleranceModule());  modulesConfigurer.register(new BeanFactoryModule());  if (this.applicationDescriptor != null) {    setupApplicationInstanceId(config);    modulesConfigurer.register(new ServiceUnitModule(this.applicationDescriptor));  }  modulesConfigurer.registerBeanPostProcessor(new AstrixAwareInjector(config));  Modules modules=modulesConfigurer.configure();  final AstrixContextImpl context=new AstrixContextImpl(modules,this.applicationDescriptor);  Stream<ApiProviderClass> systemApis=Stream.of(AstrixServiceRegistryServiceProvider.class,AstrixServiceRegistryLibraryProvider.class,SystemServiceApiProvider.class).map(null);  Stream.concat(systemApis,getApiProviders(modules,config)).filter(null).distinct().forEach(null);  for (  StandardFactoryBean<?> beanFactory : standaloneFactories) {    log.debug("Registering standalone factory: bean={}",beanFactory.getBeanKey());    context.registerBeanFactory(beanFactory);  }  return context;}  }
class C{  public void applyTo(MinecraftlyConfiguration masterConfig){  if (getMyAddress() != null) {    IPAddressConfiguration ipAddressConfiguration=masterConfig.getMyAddress();    if (ipAddressConfiguration == null)     masterConfig.setMyAddress(ipAddressConfiguration=new IPAddressConfiguration());    if (ipAddressConfiguration.getIpAddress() == null || ipAddressConfiguration.getIpAddress().isEmpty())     ipAddressConfiguration.setIpAddress(getMyAddress().getIpAddress());    if (ipAddressConfiguration.getPort() <= 0)     ipAddressConfiguration.setPort(getMyAddress().getPort());  }  if (getRedisConfig() != null) {    RedisConfiguration redisConfiguration=masterConfig.getRedisConfig();    if (redisConfiguration == null)     masterConfig.setRedisConfig(redisConfiguration=new RedisConfiguration());    if (redisConfiguration.getIp() == null || redisConfiguration.getIp().isEmpty())     redisConfiguration.setIp(getRedisConfig().getIp());    if (redisConfiguration.getPassword() == null)     redisConfiguration.setPassword(getRedisConfig().getPassword());    if (redisConfiguration.getPort() <= 0)     redisConfiguration.setPort(getRedisConfig().getPort());    if (redisConfiguration.getTimeOut() <= 0)     redisConfiguration.setTimeOut(getRedisConfig().getTimeOut());    if (redisConfiguration.getMaxNumPools() <= 0)     redisConfiguration.setMaxNumPools(getRedisConfig().getMaxNumPools());  }  if (masterConfig.getDefaultActionIfNoServer() == null)   masterConfig.setDefaultActionIfNoServer(getDefaultActionIfNoServer());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE___TRACE_DIRECTIVE_1:    return ((InternalEList<?>)getTraceDirective_1()).basicRemove(otherEnd,msgs);case UmplePackage.TRACE___TRACE_CASE_1:  return ((InternalEList<?>)getTraceCase_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  public InvalidCharException(char val){  super();  c=val;}  }
class C{  public boolean isOfSpecialType(){  return TypeMap.isSpecialType(getMappedTypeCode());}  }
class C{  @Override public NativePooledByteBuffer toByteBuffer(){  ensureValid();  return new NativePooledByteBuffer(mBufRef,mCount);}  }
class C{  public Tradingday findByOpenCloseDate(ZonedDateTime openDate,ZonedDateTime closeDate){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Tradingday> query=builder.createQuery(Tradingday.class);    Root<Tradingday> from=query.from(Tradingday.class);    query.select(from);    if (null != openDate)     query.where(builder.equal(from.get("open"),openDate));    if (null != closeDate)     query.where(builder.equal(from.get("close"),closeDate));    List<Tradingday> items=entityManager.createQuery(query).getResultList();    for (    Tradingday tradingday : items) {      for (      Tradestrategy tradestrategy : tradingday.getTradestrategies()) {        tradestrategy.getTradeOrders().size();        tradestrategy.getStrategy().getIndicatorSeries().size();      }    }    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  boolean initialize(GridDeployment dep,Class<?> taskCls){  assert dep != null;  IgniteException ex=null;  try {    if (job == null) {      job=marsh.unmarshal(jobBytes,U.resolveClassLoader(dep.classLoader(),ctx.config()));      jobBytes=null;    }    ctx.resource().inject(dep,taskCls,job,ses,jobCtx);    if (!internal && ctx.event().isRecordable(EVT_JOB_QUEUED))     recordEvent(EVT_JOB_QUEUED,"Job got queued for computation.");  } catch (  IgniteCheckedException e) {    U.error(log,"Failed to initialize job [jobId=" + ses.getJobId() + ", ses="+ ses+ ']',e);    ex=new IgniteException(e);  }catch (  Throwable e) {    ex=handleThrowable(e);    assert ex != null;    if (e instanceof Error)     throw e;  } finally {    if (ex != null)     finishJob(null,ex,true);  }  return ex == null;}  }
class C{  @Override public String toString(){  return getClass().getName() + "[color=" + color+ (italic ? ",italic" : "")+ (bold ? ",bold" : "")+ "]";}  }
class C{  @Override public void addAttribute(String name,String value){  if (name.equals("class")) {    this.type=getOwner().findClass(value);  } else {    super.addAttribute(name,value);  }}  }
class C{  private boolean initializeSearchItemset(BitVector bv,int[] scratchi,int[] iters){  for (int i=0; i < scratchi.length; i++) {    iters[i]=(i == 0) ? bv.iter() : bv.iterAdvance(iters[i - 1]);    if (iters[i] < 0) {      return false;    }    scratchi[i]=bv.iterDim(iters[i]);  }  return true;}  }
class C{  private void fireSubjectUpdatedListeners(String subject,String from){  SubjectUpdatedListener[] listeners;synchronized (subjectUpdatedListeners) {    listeners=new SubjectUpdatedListener[subjectUpdatedListeners.size()];    subjectUpdatedListeners.toArray(listeners);  }  for (  SubjectUpdatedListener listener : listeners) {    listener.subjectUpdated(subject,from);  }}  }
class C{  static int computeNumLevelsNeeded(int k,long n){  return 1 + hiBitPos(n / (2L * k));}  }
class C{  public TemperatureEffect(float scale){  if (scale < 0.0f)   scale=0.0f;  if (scale > 1.0f)   scale=1.0f;  this.scale=scale;}  }
class C{  public void sendStream(InputStream is) throws IOException {  byte[] buffer=new byte[BUFFER_DEFAULT_SIZE];  int len;  while ((len=is.read(buffer)) > 0) {    write(buffer,0,len);  }}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesDate1String=null;  String inputFilesDate2String=null;  String[] imageFilesDate1=null;  String[] imageFilesDate2=null;  String outputHeader=null;  String outputHeaderDirection=null;  WhiteboxRasterInfo[] date1Images=null;  WhiteboxRasterInfo[] date2Images=null;  int nCols=0;  int nRows=0;  double z;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data1;  double[][] data2;  double noData=-32768;  double dist, direction;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesDate1String=args[0];  inputFilesDate2String=args[1];  outputHeader=args[2];  outputHeaderDirection=args[3];  try {    imageFilesDate1=inputFilesDate1String.split(";");    imageFilesDate2=inputFilesDate2String.split(";");    numImages=imageFilesDate1.length;    if (imageFilesDate2.length != numImages) {      showFeedback("The number of specified images must be the same for both dates.");      return;    }    date1Images=new WhiteboxRasterInfo[numImages];    date2Images=new WhiteboxRasterInfo[numImages];    double[] date1NoDataValues=new double[numImages];    double[] date2NoDataValues=new double[numImages];    for (i=0; i < numImages; i++) {      date1Images[i]=new WhiteboxRasterInfo(imageFilesDate1[i]);      date2Images[i]=new WhiteboxRasterInfo(imageFilesDate2[i]);      if (i == 0) {        nCols=date1Images[i].getNumberColumns();        nRows=date1Images[i].getNumberRows();        noData=date1Images[i].getNoDataValue();        if (date2Images[i].getNumberColumns() != nCols || date2Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      } else {        if (date1Images[i].getNumberColumns() != nCols || date1Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }        if (date2Images[i].getNumberColumns() != nCols || date2Images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      date1NoDataValues[i]=date1Images[i].getNoDataValue();      date2NoDataValues[i]=date2Images[i].getNoDataValue();    }    data1=new double[numImages][];    data2=new double[numImages][];    double[] directionArray=new double[numImages];    for (i=0; i < numImages; i++) {      directionArray[i]=Math.pow(2,i);    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFilesDate1[0],WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    WhiteboxRaster outputDir=new WhiteboxRaster(outputHeaderDirection,"rw",imageFilesDate1[0],WhiteboxRaster.DataType.INTEGER,0);    outputDir.setDataScale(DataScale.CATEGORICAL);    outputDir.setPreferredPalette("qual.pal");    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data1[i]=date1Images[i].getRowValues(row);        data2[i]=date2Images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        dist=0;        direction=0;        a=0;        for (i=0; i < numImages; i++) {          if (data1[i][col] != date1NoDataValues[i] && data2[i][col] != date2NoDataValues[i]) {            z=(data2[i][col] - data1[i][col]);            dist+=z * z;            a++;            if (z >= 0) {              direction+=directionArray[i];            }          }        }        if (a > 0) {          output.setValue(row,col,Math.sqrt(dist));          outputDir.setValue(row,col,direction);        } else {          output.setValue(row,col,noData);          outputDir.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    for (i=0; i < numImages; i++) {      date1Images[i].close();      date2Images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    outputDir.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputDir.addMetadataEntry("Created on " + new Date());    outputDir.close();    returnData(outputHeader);    returnData(outputHeaderDirection);    String ret="Key For Interpreting The CVA Direction Image:\n\n\tDirection of Change (+ or -)\nValue";    for (i=0; i < numImages; i++) {      ret+="\tBand" + (i + 1);    }    ret+="\n";    String line="";    for (a=0; a < (2 * Math.pow(2,(numImages - 1))); a++) {      line=a + "\t";      for (i=0; i < numImages; i++) {        if (BitOps.checkBit(a,i)) {          line+="+\t";        } else {          line+="-\t";        }      }      ret+=line + "\n";    }    returnData(ret);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public CompilerOptions(Map settings){  resetDefaults();  if (settings != null) {    set(settings);  }}  }
class C{  private AStarNode jump(int nextX,int nextY,int nextZ,int px,int pz){  int y=nextY;  int dist=currentNode.getG() + (Math.abs(nextX - currentNode.x) + Math.abs(y - currentNode.y) + Math.abs(nextZ - currentNode.z));  int dx=nextX - px;  int dz=nextZ - pz;  int py=y;  y=getGroundNodeHeight(nextX,py,nextZ);  if (y == 0) {    return null;  } else   if (targetNode.x == nextX && targetNode.z == nextZ && targetNode.y == y || dist >= MAX_SKIP_DISTANCE) {    return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);  }  int nxY=(dx != 0) ? getGroundNodeHeight(nextX + dx,y,nextZ) : 0;  int nzY=(dz != 0) ? getGroundNodeHeight(nextX,y,nextZ + dz) : 0;  if (dx != 0 && dz != 0) {    if ((getGroundNodeHeight(nextX - dx,y,nextZ + dz) != 0 && getGroundNodeHeight(nextX - dx,py,nextZ) == 0) || (getGroundNodeHeight(nextX + dx,y,nextZ - dz) != 0 && getGroundNodeHeight(nextX,py,nextZ - dz) == 0)) {      return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);    }  } else {    if (dx != 0) {      if (nxY != y || (getGroundNodeHeight(nextX,y,nextZ + 1) == 0 && getGroundNodeHeight(nextX + dx,nxY,nextZ + 1) != 0) || (getGroundNodeHeight(nextX,y,nextZ - 1) == 0 && getGroundNodeHeight(nextX + dx,nxY,nextZ - 1) != 0)) {        return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);      }    } else {      if (nzY != y || (getGroundNodeHeight(nextX + 1,y,nextZ) == 0 && getGroundNodeHeight(nextX + 1,nzY,nextZ + dz) != 0) || (getGroundNodeHeight(nextX - 1,y,nextZ) == 0 && getGroundNodeHeight(nextX - 1,nzY,nextZ + dz) != 0)) {        return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);      }    }  }  if (dx != 0 && dz != 0) {    AStarNode jx=jump(nextX + dx,y,nextZ,nextX,nextZ);    AStarNode jy=jump(nextX,y,nextZ + dz,nextX,nextZ);    if (jx != null || jy != null) {      return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);    }  }  if (nxY != 0 || nzY != 0) {    return jump(nextX + dx,y,nextZ + dz,nextX,nextZ);  } else {    return null;  }}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  public static String toJson(Object obj){  Gson gson=new Gson();  return gson.toJson(obj);}  }
class C{  public boolean unregister(){  return mSession.unRegister();}  }
