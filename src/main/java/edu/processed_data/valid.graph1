class C{  @Override public Geometry deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {  JsonObject jsonObject=(JsonObject)json;  String geometryType=jsonObject.get("type").getAsString();  if (geometryType.equals("Point")) {    JsonArray coordinates=jsonObject.getAsJsonArray("coordinates");    return Point.fromCoordinates(Position.fromCoordinates(coordinates.get(0).getAsDouble(),coordinates.get(1).getAsDouble()));  } else {    throw new JsonParseException("Unexpected geometry found: " + geometryType);  }}  }
class C{  public DocumentFragment rtree(XPathContext support){  DocumentFragment docFrag=null;  int result=rtf();  if (DTM.NULL == result) {    DTM frag=support.createDocumentFragment();    frag.appendTextChild(str());    docFrag=(DocumentFragment)frag.getNode(frag.getDocument());  } else {    DTM frag=support.getDTM(result);    docFrag=(DocumentFragment)frag.getNode(frag.getDocument());  }  return docFrag;}  }
class C{  @Override public boolean isEmpty(){  return tail == null;}  }
class C{  private void searchWithSubordinates(final RequestContext requestContext,final SearchResultHandler entryHandler,final LdapResultHandler<Result> resultHandler,final DN dn,final Matcher matcher,final AttributeFilter attributeFilter,final int sizeLimit,SearchScope scope,SimplePagedResultsControl pagedResults) throws LdapException {  final NavigableMap<DN,Entry> subtree=entries.subMap(dn,dn.child(RDN.maxValue()));  if (subtree.isEmpty() || !dn.equals(subtree.firstKey())) {    throw newLdapException(newResult(ResultCode.NO_SUCH_OBJECT));  }  final int pageSize=pagedResults != null ? pagedResults.getSize() : 0;  final int offset=(pagedResults != null && !pagedResults.getCookie().isEmpty()) ? Integer.valueOf(pagedResults.getCookie().toString()) : 0;  int numberOfResults=0;  int position=0;  for (  final Entry entry : subtree.values()) {    requestContext.checkIfCancelled(false);    if (scope.equals(SearchScope.WHOLE_SUBTREE) || entry.getName().isChildOf(dn) || (scope.equals(SearchScope.SUBORDINATES) && !entry.getName().equals(dn))) {      final Entry augmentedEntry=addVirtualAttributesIfNeeded(entry);      if (matcher.matches(augmentedEntry).toBoolean()) {        if (sizeLimit > 0 && numberOfResults >= sizeLimit) {          throw newLdapException(newResult(ResultCode.SIZE_LIMIT_EXCEEDED));        }        if (pageSize > 0 && position++ < offset) {          continue;        }        if (!sendEntry(attributeFilter,entryHandler,augmentedEntry)) {          break;        }        numberOfResults++;        if (pageSize > 0 && numberOfResults == pageSize) {          break;        }      }    }  }  final Result result=newResult(ResultCode.SUCCESS);  if (pageSize > 0) {    final ByteString cookie=numberOfResults == pageSize ? ByteString.valueOfUtf8(String.valueOf(position)) : ByteString.empty();    result.addControl(SimplePagedResultsControl.newControl(true,0,cookie));  }  resultHandler.handleResult(result);}  }
class C{  public SoundException(){  super();}  }
class C{  public static void duplicateVars(MethodNode mn){  if (AccessHelper.isAbstract(mn.access)) {    return;  }  for (  AbstractInsnNode ain : mn.instructions.toArray()) {    if (ain.getType() == AbstractInsnNode.VAR_INSN) {      VarInsnNode vin=(VarInsnNode)ain;      if (vin.getOpcode() == Opcodes.ASTORE) {        mn.instructions.insertBefore(vin,new InsnNode(Opcodes.DUP));        mn.instructions.insertBefore(vin,new InsnNode(Opcodes.ACONST_NULL));        mn.instructions.insertBefore(vin,new InsnNode(Opcodes.SWAP));        AbstractInsnNode next=vin.getNext();        mn.instructions.insertBefore(next,new InsnNode(Opcodes.POP));        mn.instructions.insertBefore(next,new VarInsnNode(Opcodes.ASTORE,vin.var));      }    }  }}  }
class C{  public static String unescapeValue(String str){  StringBuilder retbuf=new StringBuilder();  for (int i=0; i < str.length(); i++) {    char currentChar=str.charAt(i);    if (currentChar == '\\') {      char nextChar=str.charAt(i + 1);      if (isEscapeCharacter(nextChar)) {        currentChar=nextChar;        i++;      }    }    retbuf.append(currentChar);  }  return retbuf.toString();}  }
class C{  public static <T>T newInstance(final Class<T> clas){  try {    return clas.newInstance();  } catch (  final Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Deactivate protected void deactivate(ComponentContext context){  mappings=new ArrayList<>();}  }
class C{  @Override protected void onProviderChanged(int appWidgetId,AppWidgetProviderInfo appWidget){  LauncherAppWidgetProviderInfo info=LauncherAppWidgetProviderInfo.fromProviderInfo(mLauncher,appWidget);  super.onProviderChanged(appWidgetId,info);}  }
class C{  private static void doSLOBySOAP(String requestID,LogoutRequest sloRequest,String sloURL,String realm,String hostEntity,String hostRole,HttpServletRequest request,HttpServletResponse response) throws SAML2Exception, SessionException {  String sloRequestXMLString=sloRequest.toXMLString(true,true);  if (debug.messageEnabled()) {    debug.message("LogoutUtil.doSLOBySOAP : SLORequestXML: " + sloRequestXMLString + "\nSOAPURL : "+ sloURL);  }  SOAPMessage resMsg=null;  try {    resMsg=SOAPCommunicator.getInstance().sendSOAPMessage(sloRequestXMLString,sloURL,true);  } catch (  SOAPException se) {    debug.error("Unable to send SOAPMessage to IDP ",se);    throw new SAML2Exception(se.getMessage());  }  Element respElem=SOAPCommunicator.getInstance().getSamlpElement(resMsg,"LogoutResponse");  LogoutResponse sloResponse=ProtocolFactory.getInstance().createLogoutResponse(respElem);  String userId=null;  if ((hostRole != null) && hostRole.equals(SAML2Constants.SP_ROLE)) {    userId=SPSingleLogout.preSingleLogoutProcess(hostEntity,realm,request,response,null,sloRequest,sloResponse,SAML2Constants.SOAP);  }  if (sloResponse == null) {    debug.error("LogoutUtil.doSLOBySoap : null response");    throw new SAML2Exception(SAML2Utils.bundle.getString("nullLogoutResponse"));  }  if (debug.messageEnabled()) {    debug.message("LogoutUtil.doSLOBySOAP : " + "LogoutResponse without SOAP envelope:\n" + sloResponse.toXMLString());  }  Issuer resIssuer=sloResponse.getIssuer();  String requestId=sloResponse.getInResponseTo();  SAML2Utils.verifyResponseIssuer(realm,hostEntity,resIssuer,requestId);  String remoteEntityID=sloResponse.getIssuer().getValue();  verifySLOResponse(sloResponse,realm,remoteEntityID,hostEntity,hostRole);  boolean success=checkSLOResponse(sloResponse,requestID);  if (debug.messageEnabled()) {    debug.message("Request success : " + success);  }  if (success == false) {    if (SPCache.isFedlet) {      FedletAdapter fedletAdapter=SAML2Utils.getFedletAdapterClass(hostEntity,realm);      if (fedletAdapter != null) {        fedletAdapter.onFedletSLOFailure(request,response,sloRequest,sloResponse,hostEntity,remoteEntityID,SAML2Constants.SOAP);      }    }    throw new SAML2Exception(SAML2Utils.bundle.getString("sloFailed"));  } else {    if ((hostRole != null) && hostRole.equals(SAML2Constants.SP_ROLE)) {      if (SPCache.isFedlet) {        FedletAdapter fedletAdapter=SAML2Utils.getFedletAdapterClass(hostEntity,realm);        if (fedletAdapter != null) {          fedletAdapter.onFedletSLOSuccess(request,response,sloRequest,sloResponse,hostEntity,remoteEntityID,SAML2Constants.SOAP);        }      } else {        SPSingleLogout.postSingleLogoutSuccess(hostEntity,realm,request,response,userId,sloRequest,sloResponse,SAML2Constants.SOAP);      }    }  }}  }
class C{  public JToggleButton(Action a){  this();  setAction(a);}  }
class C{  public void dup(){  mv.visitInsn(Opcodes.DUP);}  }
class C{  public boolean nextTile() throws ModelControlException {  boolean movedToRow=super.nextTile();  if (movedToRow) {    curTile=getTileIndex();    setDisplayFieldValue(TXT_INDEX,Integer.toString(curTile));    setDisplayFieldValue(TXT_BUTTON,buttons[curTile]);    setDisplayFieldValue(TXT_CLASS,curTile == 0 ? "button primary" : "button");  }  return movedToRow;}  }
class C{  @Inject public OpenIDConnectConfiguration(OAuth2RequestFactory requestFactory,OpenIDConnectProviderConfiguration providerConfiguration,ExceptionHandler exceptionHandler){  this.requestFactory=requestFactory;  this.providerConfiguration=providerConfiguration;  this.exceptionHandler=exceptionHandler;}  }
class C{  public SecretKeySpec(byte[] key,String algorithm){  if (key == null) {    throw new IllegalArgumentException("key == null");  }  if (key.length == 0) {    throw new IllegalArgumentException("key.length == 0");  }  if (algorithm == null) {    throw new IllegalArgumentException("algorithm == null");  }  this.algorithm=algorithm;  this.key=new byte[key.length];  System.arraycopy(key,0,this.key,0,key.length);}  }
class C{  private int policyConditionUsageCount(String uuid) throws SSOException, SMSException {  return getUsageCount(getPolicyBaseDN(),getPolicySearchString(uuid));}  }
class C{  public void testLearnIntermediate() throws Exception {  KeyStore.PrivateKeyEntry pke=TestKeyStore.getServer().getPrivateKey("RSA","RSA");  X509Certificate[] chain3=(X509Certificate[])pke.getCertificateChain();  X509Certificate root=chain3[2];  X509Certificate intermediate=chain3[1];  X509Certificate server=chain3[0];  X509Certificate[] chain2=new X509Certificate[]{server,intermediate};  X509Certificate[] chain1=new X509Certificate[]{server};  assertValid(chain3,trustManager(root));  assertValid(chain2,trustManager(root));  assertInvalid(chain1,trustManager(root));  assertValid(chain3,trustManager(intermediate));  assertValid(chain2,trustManager(intermediate));  assertValid(chain1,trustManager(intermediate));  assertValid(chain3,trustManager(server));  assertValid(chain2,trustManager(server));  assertValid(chain1,trustManager(server));  X509TrustManager tm=trustManager(root);  assertInvalid(chain1,tm);  assertValid(chain2,tm);  assertValid(chain1,tm);}  }
class C{  public String encodeURL(String url,boolean escape,String cookieName,Session session){  return encodeSessionURL(url,SessionUtils.QUERY,escape,cookieName,session);}  }
class C{  public void serviceAvailable(BeanContextServiceAvailableEvent bcssae){synchronized (BeanContext.globalHierarchyLock) {    if (services.containsKey(bcssae.getServiceClass()))     return;    fireServiceAdded(bcssae);    Iterator i;synchronized (children) {      i=children.keySet().iterator();    }    while (i.hasNext()) {      Object c=i.next();      if (c instanceof BeanContextServices) {        ((BeanContextServicesListener)c).serviceAvailable(bcssae);      }    }  }}  }
class C{  public static void writeStringToFile(File file,String data,String encoding,boolean append) throws IOException {  writeStringToFile(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public static void main(String[] args) throws Exception {  String encrypt=encrypt("123");  System.out.println(encrypt);  System.out.println(decrypt("97,-32,64,9,-124,-41,-95,94,-73,-72,28,-126,-76,79,-108,109"));  System.out.println(encode("3"));}  }
class C{  private static void scale(double constant,double vector[]){  if (constant == 1.0)   return;  for (int i=0; i < vector.length; i++) {    vector[i]*=constant;  }}  }
class C{  public void testSetScaleRoundCeiling(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478139";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_CEILING);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public static final String createXPATHWarning(String msgKey,Object args[]){  return createXPATHMsg(XPATHBundle,msgKey,args);}  }
class C{  @Override public Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByField2_First(field2,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("field2=");  msg.append(field2);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public final void testWriteint01() throws IOException {  for (int k=0; k < algorithmName.length; k++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      DigestOutputStream dos=new DigestOutputStream(bos,md);      for (int i=0; i < MY_MESSAGE_LEN; i++) {        dos.write(myMessage[i]);      }      assertTrue("write",Arrays.equals(MDGoldenData.getMessage(),bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void pushContext(){  int max=contexts.length;  contexts[contextPos].declsOK=false;  contextPos++;  if (contextPos >= max) {    Context newContexts[]=new Context[max * 2];    System.arraycopy(contexts,0,newContexts,0,max);    max*=2;    contexts=newContexts;  }  currentContext=contexts[contextPos];  if (currentContext == null) {    contexts[contextPos]=currentContext=new Context();  }  if (contextPos > 0) {    currentContext.setParent(contexts[contextPos - 1]);  }}  }
class C{  public StreamAllocation close(){  if (bufferedRequestBody != null) {    closeQuietly(bufferedRequestBody);  } else   if (requestBodyOut != null) {    closeQuietly(requestBodyOut);  }  if (userResponse != null) {    closeQuietly(userResponse.body());  } else {    streamAllocation.connectionFailed();  }  return streamAllocation;}  }
class C{  @Override protected void onAttachedToWindow(){  super.onAttachedToWindow();  if (isRippling) {    startAnimation();  }}  }
class C{  public Document load(java.net.URL url) throws DOMTestLoadException {  try {    java.io.InputStream stream=url.openStream();    return (org.w3c.dom.Document)createDocument.invoke(domFactory,new Object[]{url.toString(),stream});  } catch (  InvocationTargetException ex) {    ex.printStackTrace();    throw new DOMTestLoadException(ex.getTargetException());  }catch (  Exception ex) {    ex.printStackTrace();    throw new DOMTestLoadException(ex);  }}  }
class C{  protected Class<?> findClassInternal(String name){  checkStateForResourceLoading(name);  if (name == null) {    return null;  }  String path=binaryNameToPath(name,true);  ResourceEntry entry=resourceEntries.get(path);  WebResource resource=null;  if (entry == null) {    resource=resources.getClassLoaderResource(path);    if (!resource.exists()) {      return null;    }    entry=new ResourceEntry();    entry.lastModified=resource.getLastModified();synchronized (resourceEntries) {      ResourceEntry entry2=resourceEntries.get(path);      if (entry2 == null) {        resourceEntries.put(path,entry);      } else {        entry=entry2;      }    }  }  Class<?> clazz=entry.loadedClass;  if (clazz != null)   return clazz;synchronized (getClassLoadingLock(name)) {    clazz=entry.loadedClass;    if (clazz != null)     return clazz;    if (resource == null) {      resource=resources.getClassLoaderResource(path);    }    if (!resource.exists()) {      return null;    }    byte[] binaryContent=resource.getContent();    Manifest manifest=resource.getManifest();    URL codeBase=resource.getCodeBase();    Certificate[] certificates=resource.getCertificates();    if (transformers.size() > 0) {      String className=name.endsWith(CLASS_FILE_SUFFIX) ? name.substring(0,name.length() - CLASS_FILE_SUFFIX.length()) : name;      String internalName=className.replace(".","/");      for (      ClassFileTransformer transformer : this.transformers) {        try {          byte[] transformed=transformer.transform(this,internalName,null,null,binaryContent);          if (transformed != null) {            binaryContent=transformed;          }        } catch (        IllegalClassFormatException e) {          log.error(sm.getString("webappClassLoader.transformError",name),e);          return null;        }      }    }    String packageName=null;    int pos=name.lastIndexOf('.');    if (pos != -1)     packageName=name.substring(0,pos);    Package pkg=null;    if (packageName != null) {      pkg=getPackage(packageName);      if (pkg == null) {        try {          if (manifest == null) {            definePackage(packageName,null,null,null,null,null,null,null);          } else {            definePackage(packageName,manifest,codeBase);          }        } catch (        IllegalArgumentException e) {        }        pkg=getPackage(packageName);      }    }    if (securityManager != null) {      if (pkg != null) {        boolean sealCheck=true;        if (pkg.isSealed()) {          sealCheck=pkg.isSealed(codeBase);        } else {          sealCheck=(manifest == null) || !isPackageSealed(packageName,manifest);        }        if (!sealCheck)         throw new SecurityException("Sealing violation loading " + name + " : Package "+ packageName+ " is sealed.");      }    }    try {      clazz=defineClass(name,binaryContent,0,binaryContent.length,new CodeSource(codeBase,certificates));    } catch (    UnsupportedClassVersionError ucve) {      throw new UnsupportedClassVersionError(ucve.getLocalizedMessage() + " " + sm.getString("webappClassLoader.wrongVersion",name));    }    entry.loadedClass=clazz;  }  return clazz;}  }
class C{  boolean parseHeaders() throws IOException {  if (!parsingHeader) {    throw new IllegalStateException(sm.getString("iib.parseheaders.ise.error"));  }  HeaderParseStatus status=HeaderParseStatus.HAVE_MORE_HEADERS;  do {    status=parseHeader();    if (pos > headerBufferSize || buf.length - pos < socketReadBufferSize) {      throw new IllegalArgumentException(sm.getString("iib.requestheadertoolarge.error"));    }  } while (status == HeaderParseStatus.HAVE_MORE_HEADERS);  if (status == HeaderParseStatus.DONE) {    parsingHeader=false;    end=pos;    return true;  } else {    return false;  }}  }
class C{  public Task removeCompletedTask(String taskID) throws DirectoryException {  schedulerLock.lock();  try {    Iterator<Task> iterator=completedTasks.iterator();    while (iterator.hasNext()) {      Task t=iterator.next();      if (t.getTaskID().equals(taskID)) {        iterator.remove();        tasks.remove(taskID);        writeState();        return t;      }    }    LocalizableMessage message=ERR_TASKSCHED_REMOVE_COMPLETED_NO_SUCH_TASK.get(taskID);    throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,message);  }  finally {    schedulerLock.unlock();  }}  }
class C{  @Override public void performBackendPreInitializationProcessing(Backend<?> backend){}  }
class C{  public SMSException(String rbName,String message,Throwable t,String errorCode){  super(message,t);  rootCause=t;  this.errorCode=errorCode;  this.bundleName=rbName;  this.message=message + ": " + getL10NMessage(java.util.Locale.ENGLISH);  if (rootCause != null && !(rootCause instanceof AMException)) {    exceptionMapper();  }}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){  return _fooLocalService.fetchFooByUuidAndGroupId(uuid,groupId);}  }
class C{  public static void saveApplicationType(Subject adminSubject,ApplicationType appType) throws EntitlementException {  EntitlementConfiguration ec=getEntitlementConfiguration(adminSubject,"/");  ec.storeApplicationType(appType);}  }
class C{  public CallEndedEvent(Intent intent){  super(EVENT_NAME,intent);  Log.d(LOG_TAG,EVENT_NAME);}  }
class C{  public Conditions createConditions(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.CONDITIONS);  if (obj == null) {    return new ConditionsImpl();  } else {    return (Conditions)obj;  }}  }
class C{  private void findNumberOfItemsInTopStackAndUpdateState(StackScrollState resultState,StackScrollAlgorithmState algorithmState){  float yPositionInScrollView=0.0f;  int childCount=algorithmState.visibleChildren.size();  for (int i=0; i < childCount; i++) {    ExpandableView child=algorithmState.visibleChildren.get(i);    StackScrollState.ViewState childViewState=resultState.getViewStateForView(child);    int childHeight=getMaxAllowedChildHeight(child);    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;    if (yPositionInScrollView < algorithmState.scrollY) {      if (i == 0 && algorithmState.scrollY <= mCollapsedSize) {        int bottomPeekStart=mInnerHeight - mBottomStackPeekSize - mCollapseSecondCardPadding;        float maxHeight=mIsExpansionChanging && child == mFirstChildWhileExpanding ? mFirstChildMaxHeight : childHeight;        childViewState.height=(int)Math.max(Math.min(bottomPeekStart,maxHeight),mCollapsedSize);        algorithmState.itemsInTopStack=1.0f;      } else       if (yPositionInScrollViewAfterElement < algorithmState.scrollY) {        algorithmState.itemsInTopStack+=1.0f;        if (i == 0) {          childViewState.height=mCollapsedSize;        }      } else {        algorithmState.scrolledPixelsTop=algorithmState.scrollY - yPositionInScrollView;        algorithmState.partialInTop=(algorithmState.scrolledPixelsTop) / (childHeight + mPaddingBetweenElements);        algorithmState.partialInTop=Math.max(0.0f,algorithmState.partialInTop);        algorithmState.itemsInTopStack+=algorithmState.partialInTop;        if (i == 0) {          float newSize=yPositionInScrollViewAfterElement - mPaddingBetweenElements - algorithmState.scrollY + mCollapsedSize;          newSize=Math.max(mCollapsedSize,newSize);          algorithmState.itemsInTopStack=1.0f;          childViewState.height=(int)newSize;        }        algorithmState.lastTopStackIndex=i;        break;      }    } else {      algorithmState.lastTopStackIndex=i - 1;      break;    }    yPositionInScrollView=yPositionInScrollViewAfterElement;  }}  }
class C{  private final int _decodeExplicitLength(int lowBits) throws IOException {  if (lowBits == 31) {    return -1;  }  if (lowBits <= 23) {    return lowBits;  }switch (lowBits - 24) {case 0:    return _decode8Bits();case 1:  return _decode16Bits();case 2:return _decode32Bits();case 3:long l=_decode64Bits();if (l < 0 || l > MAX_INT_L) {throw _constructError("Illegal length for " + getCurrentToken() + ": "+ l);}return (int)l;}throw _constructError("Invalid length for " + getCurrentToken() + ": 0x"+ Integer.toHexString(lowBits));}  }
class C{  public static void writeBody(PrintWriter writer,Object[] args,int mode){  if (mode == 0) {    writer.print(MessageFormat.format(Constants.BODY_HEADER_SECTION,args));  }}  }
class C{  public void addTimingCode(final long timestamp,final int... types){  final List<EventTimingCode> codes=(List<EventTimingCode>)getObjectValue(DataTypes.OBJ_TIMED_EVENT_LIST);  long lastTimestamp=0;  int insertIndex=0;  if (!codes.isEmpty() && codes.get(0).getTimestamp() <= timestamp) {    for (    final EventTimingCode code : codes) {      final long translatedTimestamp=code.getTimestamp() == 0 ? lastTimestamp : code.getTimestamp();      if (timestamp < translatedTimestamp) {        break;      }      insertIndex++;      lastTimestamp=translatedTimestamp;    }  }  for (  final int type : types) {    codes.add(insertIndex,new EventTimingCode(DataTypes.OBJ_TIMED_EVENT,this,type,timestamp));    insertIndex++;  }}  }
class C{  public static AMIdentity createAgent(SSOToken ssoToken,String realm,String agentName,String agentType,Map attrValues) throws IdRepoException, SSOException, SMSException, ConfigurationException {  return createAgentEx(ssoToken,realm,agentName,agentType,attrValues,null,null);}  }
class C{  public AttributeList(){  super();}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (names != null) {    for (int i=0; i < names.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(names[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public FileFilterUtils(){}  }
class C{  public static boolean isLogoutSuccess(HttpServletRequest request){  String status=request.getParameter(IFSConstants.LOGOUT_STATUS);  if (status == null || status.equalsIgnoreCase(IFSConstants.LOGOUT_SUCCESS)) {    return true;  } else {    return false;  }}  }
class C{  private JSONObject toJSONObject() throws JSONException {  JSONObject jo=new JSONObject();  jo.put("propertyName",propertyName);  jo.put("propertyValues",propertyValues);  jo.put("pResponseProviderName",pResponseProviderName);  return jo;}  }
class C{  boolean validateAttrSet(AttrSet attrSet) throws UMSException {  AttrSet reqAttrs=getRequiredAttributeSet();  AttrSet optionalAttrs=getOptionalAttributeSet();  if (reqAttrs == null && optionalAttrs == null) {    throw new UMSException(i18n.getString(IUMSConstants.TEMPLATE_NO_ATTR));  }  String[] attrNames=attrSet.getAttributeNames();  int attrSetSize=(attrNames != null) ? attrNames.length : -1;  String attrName=null;  if (reqAttrs != null) {    Enumeration attrEnum=reqAttrs.getAttributes();    while (attrEnum.hasMoreElements()) {      Attr anAttr=(Attr)attrEnum.nextElement();      if (!attrSet.contains(anAttr.getName())) {        if (anAttr.size() > 0) {          attrSet.add((Attr)anAttr.clone());        } else {          attrName=anAttr.getName();          String args[]=new String[1];          args[0]=attrName;          String msg=i18n.getString(IUMSConstants.NO_VALUE,args);          throw new UMSException(msg);        }      }    }  }  if (optionalAttrs != null && optionalAttrs.contains("*")) {    return true;  }  boolean attrAllowed=false;  for (int i=0; i < attrSetSize; i++) {    attrAllowed=false;    attrName=attrNames[i];    if (reqAttrs != null && reqAttrs.contains(attrName)) {      attrAllowed=true;    } else     if (optionalAttrs != null && optionalAttrs.contains(attrName)) {      attrAllowed=true;    }    if (!attrAllowed) {      String args[]=new String[1];      args[0]=attrName;      String msg=i18n.getString(IUMSConstants.ATTR_NOT_ALLOWED,args);      throw new UMSException(msg);    }  }  return true;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_APPLICATION_TYPES",null);  Set<String> names=ApplicationTypeManager.getApplicationTypeNames(getAdminSubject());  IOutput writer=getOutputWriter();  if ((names == null) || names.isEmpty()) {    writer.printlnMessage(getResourceString("list-applications-type-no-entries"));  } else {    for (    String n : names) {      writer.printlnMessage(n);    }  }  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_APPLICATION_TYPES",null);}  }
class C{  public NoRouteToHostException(String msg){  super(msg);}  }
class C{  public String toXMLString() throws FSMsgException {  String xml=this.toXMLString(true,false);  return xml;}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  public void save(InternalSession session) throws CoreTokenException {  coreTokenService.update(tokenAdapter.toToken(session));}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ApplicationParameter[");  sb.append("name=");  sb.append(name);  if (description != null) {    sb.append(", description=");    sb.append(description);  }  sb.append(", value=");  sb.append(value);  sb.append(", override=");  sb.append(override);  sb.append("]");  return (sb.toString());}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  elementData=EMPTY_ELEMENTDATA;  s.defaultReadObject();  s.readInt();  if (size > 0) {    ensureCapacityInternal(size);    Object[] a=elementData;    for (int i=0; i < size; i++) {      a[i]=s.readObject();    }  }}  }
class C{  private static void dualPivotQuicksort(float[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  float ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    float t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    float t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    float t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    float t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    float t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    float t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    float t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    float t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    float t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  float pivot1=ae2;  a[e2]=a[left];  float pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public void clearUriParms(){  uriParms=new NameValueList();}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.clear();  }  finally {    lock.unlock();  }}  }
class C{  public Lock acquireLock(K key){  if (key == null) {    throw new NullPointerException("Key must not be null");  }  final Key<K> internalKey=new Key<K>(key);  Lock lock;synchronized (lockCache) {    final Reference<Lock> holder=lockCache.get(internalKey);    if (holder == null || (lock=holder.get()) == null) {      lock=new KeyReferenceLock<K>(internalKey);      lockCache.put(internalKey,new WeakReference<Lock>(lock));    }  }  return lock;}  }
class C{  private void handleRequestControls() throws DirectoryException {  LocalBackendWorkflowElement.evaluateProxyAuthControls(this);  LocalBackendWorkflowElement.removeAllDisallowedControls(entryDN,this);  for (  Control c : getRequestControls()) {    final String oid=c.getOID();    if (OID_LDAP_ASSERTION.equals(oid)) {      LDAPAssertionRequestControl assertControl=getRequestControl(LDAPAssertionRequestControl.DECODER);      SearchFilter filter;      try {        filter=assertControl.getSearchFilter();      } catch (      DirectoryException de) {        logger.traceException(de);        throw newDirectoryException(entry,de.getResultCode(),ERR_DELETE_CANNOT_PROCESS_ASSERTION_FILTER.get(entryDN,de.getMessageObject()));      }      if (!getAccessControlHandler().isAllowed(this,entry,filter)) {        throw new DirectoryException(ResultCode.INSUFFICIENT_ACCESS_RIGHTS,ERR_CONTROL_INSUFFICIENT_ACCESS_RIGHTS.get(oid));      }      try {        if (!filter.matchesEntry(entry)) {          throw newDirectoryException(entry,ResultCode.ASSERTION_FAILED,ERR_DELETE_ASSERTION_FAILED.get(entryDN));        }      } catch (      DirectoryException de) {        if (de.getResultCode() == ResultCode.ASSERTION_FAILED) {          throw de;        }        logger.traceException(de);        throw newDirectoryException(entry,de.getResultCode(),ERR_DELETE_CANNOT_PROCESS_ASSERTION_FILTER.get(entryDN,de.getMessageObject()));      }    } else     if (OID_LDAP_NOOP_OPENLDAP_ASSIGNED.equals(oid)) {      noOp=true;    } else     if (OID_LDAP_READENTRY_PREREAD.equals(oid)) {      preReadRequest=getRequestControl(LDAPPreReadRequestControl.DECODER);    } else     if (LocalBackendWorkflowElement.isProxyAuthzControl(oid)) {      continue;    } else     if (c.isCritical() && !backend.supportsControl(oid)) {      throw newDirectoryException(entry,ResultCode.UNAVAILABLE_CRITICAL_EXTENSION,ERR_DELETE_UNSUPPORTED_CRITICAL_CONTROL.get(entryDN,oid));    }  }}  }
class C{  public Set<Triangle> neighbors(Triangle triangle){  return triGraph.neighbors(triangle);}  }
class C{  static int tieBreakOrder(Object a,Object b){  int d;  if (a == null || b == null || (d=a.getClass().getName().compareTo(b.getClass().getName())) == 0)   d=(System.identityHashCode(a) <= System.identityHashCode(b) ? -1 : 1);  return d;}  }
class C{  public static boolean isLong(String desc){  return desc.endsWith("J");}  }
class C{  public synchronized void enableAttribute(String name) throws java.lang.IllegalArgumentException {  if (name == null) {    throw new java.lang.IllegalArgumentException("The name cannot be null.");  }  if (!enabledAttributes.contains(name)) {    enabledAttributes.addElement(name);  }}  }
class C{  public void writeUint24(long n){  check(3);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public void removeUser(){  this.authority.removeUserInfo();}  }
class C{  public FilteredStaticGroupMemberList(ServerContext serverContext,DN groupDN,Set<CompactDn> memberDNs,DN baseDN,SearchScope scope,SearchFilter filter){  ifNull(groupDN,memberDNs);  this.serverContext=serverContext;  this.groupDN=groupDN;  this.memberDNIterator=memberDNs.iterator();  this.baseDN=baseDN;  this.filter=filter;  this.scope=scope != null ? scope : SearchScope.WHOLE_SUBTREE;  nextMemberInternal();}  }
class C{  public void uninstallUI(JComponent c){  super.uninstallUI(c);  uninstallClientDecorations(root);  layoutManager=null;  mouseInputListener=null;  root=null;}  }
class C{  public void makeImmutable(){  if (isMutable) {    if ((idpEntryList != null) && (!idpEntryList.isEmpty())) {      Iterator i=idpEntryList.iterator();      while (i.hasNext()) {        IDPEntry idpEntry=(IDPEntry)i.next();        if ((idpEntry != null) && (idpEntry.isMutable())) {          idpEntry.makeImmutable();        }      }    }    if ((getComplete != null) && (getComplete.isMutable())) {      getComplete.makeImmutable();    }    isMutable=false;  }}  }
class C{  public String toString(){  return getName() + " = " + getValue();}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    Caret caret=target.getCaret();    DefaultCaret bidiCaret=(caret instanceof DefaultCaret) ? (DefaultCaret)caret : null;    int dot=caret.getDot();    Position.Bias[] bias=new Position.Bias[1];    Point magicPosition=caret.getMagicCaretPosition();    try {      if (magicPosition == null && (direction == SwingConstants.NORTH || direction == SwingConstants.SOUTH)) {        Rectangle r=(bidiCaret != null) ? target.getUI().modelToView(target,dot,bidiCaret.getDotBias()) : target.modelToView(dot);        magicPosition=new Point(r.x,r.y);      }      NavigationFilter filter=target.getNavigationFilter();      if (filter != null) {        dot=filter.getNextVisualPositionFrom(target,dot,(bidiCaret != null) ? bidiCaret.getDotBias() : Position.Bias.Forward,direction,bias);      } else {        dot=target.getUI().getNextVisualPositionFrom(target,dot,(bidiCaret != null) ? bidiCaret.getDotBias() : Position.Bias.Forward,direction,bias);      }      if (bias[0] == null) {        bias[0]=Position.Bias.Forward;      }      if (bidiCaret != null) {        if (select) {          bidiCaret.moveDot(dot,bias[0]);        } else {          bidiCaret.setDot(dot,bias[0]);        }      } else {        if (select) {          caret.moveDot(dot);        } else {          caret.setDot(dot);        }      }      if (magicPosition != null && (direction == SwingConstants.NORTH || direction == SwingConstants.SOUTH)) {        target.getCaret().setMagicCaretPosition(magicPosition);      }    } catch (    BadLocationException ex) {    }  }}  }
class C{  @Override public void include(ServletRequest request,ServletResponse response) throws ServletException, IOException {  if (Globals.IS_SECURITY_ENABLED) {    try {      PrivilegedInclude dp=new PrivilegedInclude(request,response);      AccessController.doPrivileged(dp);    } catch (    PrivilegedActionException pe) {      Exception e=pe.getException();      if (e instanceof ServletException)       throw (ServletException)e;      throw (IOException)e;    }  } else {    doInclude(request,response);  }}  }
class C{  public NonRepeatableRequestException(){  super();}  }
class C{  public static JsonValue toJsonValue(byte[] json) throws JsonException {  try {    return new JsonValue(MAPPER.readValue(json,Map.class));  } catch (  IOException e) {    throw new JsonException("Failed to parse json",e);  }}  }
class C{  public boolean checkDependencies(AddOperation op){  final CSN csn=OperationContext.getCSN(op);  final PendingChange change=getPendingChange(csn);  if (change == null) {    return false;  }  boolean hasDependencies=false;  final DN targetDN=op.getEntryDN();  for (  PendingChange pendingChange : activeAndDependentChanges) {    if (pendingChange.getCSN().isNewerThanOrEqualTo(csn)) {      break;    }    final LDAPUpdateMsg pendingMsg=pendingChange.getLDAPUpdateMsg();    if (pendingMsg instanceof DeleteMsg) {      if (pendingMsg.getDN().equals(targetDN)) {        hasDependencies=true;        addDependency(change);      }    } else     if (pendingMsg instanceof AddMsg) {      if (pendingMsg.getDN().isSuperiorOrEqualTo(targetDN)) {        hasDependencies=true;        addDependency(change);      }    } else     if (pendingMsg instanceof ModifyDNMsg) {      if (pendingMsg.getDN().equals(targetDN)) {        hasDependencies=true;        addDependency(change);      } else {        final ModifyDNMsg pendingModDn=(ModifyDNMsg)pendingMsg;        if (pendingModDn.newDNIsParent(targetDN)) {          hasDependencies=true;          addDependency(change);        }      }    }  }  return hasDependencies;}  }
class C{  public InvalidAttributeNameException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public final boolean isAppInstalled(String packageName){  return context.getPackageManager().getLaunchIntentForPackage(packageName) != null;}  }
class C{  private ComparableTimSort(Object[] a,Object[] work,int workBase,int workLen){  this.a=a;  int len=a.length;  int tlen=(len < 2 * INITIAL_TMP_STORAGE_LENGTH) ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH;  if (work == null || workLen < tlen || workBase + tlen > work.length) {    tmp=new Object[tlen];    tmpBase=0;    tmpLen=tlen;  } else {    tmp=work;    tmpBase=workBase;    tmpLen=workLen;  }  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 24 : 49);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  private static LocalizableMessage createMessage(String illegalName,PropertyDefinition<?> namingPropertyDefinition){  if (illegalName.length() == 0) {    return ERR_ILLEGAL_MANAGED_OBJECT_NAME_EXCEPTION_EMPTY.get();  } else   if (illegalName.trim().length() == 0) {    return ERR_ILLEGAL_MANAGED_OBJECT_NAME_EXCEPTION_BLANK.get();  } else   if (namingPropertyDefinition != null) {    try {      namingPropertyDefinition.decodeValue(illegalName);    } catch (    PropertyException e) {      PropertyDefinitionUsageBuilder builder=new PropertyDefinitionUsageBuilder(true);      return ERR_ILLEGAL_MANAGED_OBJECT_NAME_EXCEPTION_SYNTAX.get(illegalName,namingPropertyDefinition.getName(),builder.getUsage(namingPropertyDefinition));    }  }  return ERR_ILLEGAL_MANAGED_OBJECT_NAME_EXCEPTION_OTHER.get(illegalName);}  }
class C{  public PdfArray(List<? extends PdfObject> objects){  list=new ArrayList<>(objects.size());  for (  PdfObject element : objects)   add(element);}  }
class C{  public void insert_float(float value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_float",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_float(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean requiresTunnel(){  return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;}  }
class C{  public static void main(final String[] args){  final int retCode=new ModRate().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  public static File writeDataToFile(final byte[] data,final File file,final boolean append){  try (FileOutputStream out=new FileOutputStream(file,append)){    out.write(data);    out.close();    return file;  } catch (  Exception e) {    JKExceptionUtil.handle(e);    return null;  }}  }
class C{  public JCheckBox(Action a){  this();  setAction(a);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.LaxElement createLaxElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.LaxElementImpl();}  }
class C{  public int hashCode(){  int rest=((copies + fromPage + maxPage+ minPage+ prFirst+ prLast+ toPage) * 31) << 21;  if (pageRanges != null) {    int sum=0;    for (int i=0; i < pageRanges.length; i++) {      sum+=pageRanges[i][0] + pageRanges[i][1];    }    rest^=(sum * 31) << 11;  }  if (fileName != null) {    rest^=fileName.hashCode();  }  if (printer != null) {    rest^=printer.hashCode();  }  return (defaultSelection.hashCode() << 6 ^ destination.hashCode() << 5 ^ dialog.hashCode() << 3 ^ multipleDocumentHandling.hashCode() << 2 ^ sides.hashCode() ^ rest);}  }
class C{  public void removeInstance(String instanceName) throws SMSException, SSOException {  getInstance(instanceName).delete();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int docContext=dtm.getDocumentRoot(context);  XObject arg=(XObject)this.getArg0().execute(xctxt);  String base="";  Expression arg1Expr=this.getArg1();  if (null != arg1Expr) {    XObject arg2=arg1Expr.execute(xctxt);    if (XObject.CLASS_NODESET == arg2.getType()) {      int baseNode=arg2.iter().nextNode();      if (baseNode == DTM.NULL) {        warn(xctxt,XSLTErrorResources.WG_EMPTY_SECOND_ARG,null);        XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());        return nodes;      } else {        DTM baseDTM=xctxt.getDTM(baseNode);        base=baseDTM.getDocumentBaseURI();      }    } else {      arg2.iter();    }  } else {    assertion(null != xctxt.getNamespaceContext(),"Namespace context can not be null!");    base=xctxt.getNamespaceContext().getBaseIdentifier();  }  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());  NodeSetDTM mnl=nodes.mutableNodeset();  DTMIterator iterator=(XObject.CLASS_NODESET == arg.getType()) ? arg.iter() : null;  int pos=DTM.NULL;  while ((null == iterator) || (DTM.NULL != (pos=iterator.nextNode()))) {    XMLString ref=(null != iterator) ? xctxt.getDTM(pos).getStringValue(pos) : arg.xstr();    if (null == arg1Expr && DTM.NULL != pos) {      DTM baseDTM=xctxt.getDTM(pos);      base=baseDTM.getDocumentBaseURI();    }    if (null == ref)     continue;    if (DTM.NULL == docContext) {      error(xctxt,XSLTErrorResources.ER_NO_CONTEXT_OWNERDOC,null);    }    int indexOfColon=ref.indexOf(':');    int indexOfSlash=ref.indexOf('/');    if ((indexOfColon != -1) && (indexOfSlash != -1) && (indexOfColon < indexOfSlash)) {      base=null;    }    int newDoc=getDoc(xctxt,context,ref.toString(),base);    if (DTM.NULL != newDoc) {      if (!mnl.contains(newDoc)) {        mnl.addElement(newDoc);      }    }    if (null == iterator || newDoc == DTM.NULL)     break;  }  return nodes;}  }
class C{  private void createLock() throws IOException {synchronized (LockableFileWriter.class) {    if (!lockFile.createNewFile()) {      throw new IOException("Can't write file, lock " + lockFile.getAbsolutePath() + " exists");    }    lockFile.deleteOnExit();  }}  }
class C{  private synchronized void initializeClusterService() throws Exception {  clusterMemberMap.put(serverConfig.getLocalServerSessionServiceURL().toExternalForm(),serverConfig.getLocalServerID());  Map<String,String> siteMemberMap=getSiteMemberMap();  clusterStateService=clusterStateServiceFactory.createClusterStateService(foreignSessionHandler,serverConfig,serviceConfig,CollectionUtils.invertMap(clusterMemberMap),siteMemberMap);  if (sessionDebug.messageEnabled()) {    sessionDebug.message("SessionService's ClusterStateService Initialized Successfully, " + clusterStateService.toString());  }}  }
class C{  private byte[] generateDerivedKey(int bytesNeeded){  byte[] buf=new byte[digest.getDigestSize()];  byte[] key=new byte[bytesNeeded];  int offset=0;  for (; ; ) {    digest.update(password,0,password.length);    digest.update(salt,0,salt.length);    digest.doFinal(buf,0);    int len=(bytesNeeded > buf.length) ? buf.length : bytesNeeded;    System.arraycopy(buf,0,key,offset,len);    offset+=len;    bytesNeeded-=len;    if (bytesNeeded == 0) {      break;    }    digest.reset();    digest.update(buf,0,buf.length);  }  return key;}  }
class C{  public ListEditor(JSpinner spinner){  super(spinner);  if (!(spinner.getModel() instanceof SpinnerListModel)) {    throw new IllegalArgumentException("model not a SpinnerListModel");  }  getTextField().setEditable(true);  getTextField().setFormatterFactory(new DefaultFormatterFactory(new ListFormatter()));}  }
class C{  protected void clearCoRoutine(SAXException ex){  if (null != ex)   m_transformer.setExceptionThrown(ex);  if (m_dtm instanceof SAX2DTM) {    if (DEBUG)     System.err.println("In clearCoRoutine...");    try {      SAX2DTM sax2dtm=((SAX2DTM)m_dtm);      if (null != m_contentHandler && m_contentHandler instanceof IncrementalSAXSource_Filter) {        IncrementalSAXSource_Filter sp=(IncrementalSAXSource_Filter)m_contentHandler;        sp.deliverMoreNodes(false);      }      sax2dtm.clearCoRoutine(true);      m_contentHandler=null;      m_dtdHandler=null;      m_entityResolver=null;      m_errorHandler=null;      m_lexicalHandler=null;    } catch (    Throwable throwable) {      throwable.printStackTrace();    }    if (DEBUG)     System.err.println("...exiting clearCoRoutine");  }}  }
class C{  public static final int bytesToInt(byte[] value){  int result=0;  int shift=0;  for (int i=value.length - 1; i >= 0; i--) {    result+=(value[i] & 0xFF) << shift;    shift+=8;  }  return result;}  }
class C{  public Object clone(){  LDAPGroups theClone=null;  try {    theClone=(LDAPGroups)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (selectedGroupDNs != null) {    theClone.selectedGroupDNs=new HashSet();    theClone.selectedGroupDNs.addAll(selectedGroupDNs);  }  if (selectedRFCGroupDNs != null) {    theClone.selectedRFCGroupDNs=new HashSet();    theClone.selectedRFCGroupDNs.addAll(selectedRFCGroupDNs);  }  return theClone;}  }
class C{  @Override public Object lookup(Name name) throws NamingException {  return lookup(name,true);}  }
class C{  protected void expandCGIScript(){  StringBuilder srcPath=new StringBuilder();  StringBuilder destPath=new StringBuilder();  InputStream is=null;  if (cgiPathPrefix == null) {    srcPath.append(pathInfo);    is=context.getResourceAsStream(srcPath.toString());    destPath.append(tmpDir);    destPath.append(pathInfo);  } else {    srcPath.append(cgiPathPrefix);    StringTokenizer pathWalker=new StringTokenizer(pathInfo,"/");    while (pathWalker.hasMoreElements() && (is == null)) {      srcPath.append("/");      srcPath.append(pathWalker.nextElement());      is=context.getResourceAsStream(srcPath.toString());    }    destPath.append(tmpDir);    destPath.append("/");    destPath.append(srcPath);  }  if (is == null) {    log.warn(sm.getString("cgiServlet.expandNotFound",srcPath));    return;  }  File f=new File(destPath.toString());  if (f.exists()) {    try {      is.close();    } catch (    IOException e) {      log.warn(sm.getString("cgiServlet.expandCloseFail",srcPath),e);    }    return;  }  File dir=f.getParentFile();  if (!dir.mkdirs() && !dir.isDirectory()) {    log.warn(sm.getString("cgiServlet.expandCreateDirFail",dir.getAbsolutePath()));    return;  }  try {synchronized (expandFileLock) {      if (f.exists()) {        return;      }      if (!f.createNewFile()) {        return;      }      try {        Files.copy(is,f.toPath());      }  finally {        is.close();      }      if (log.isDebugEnabled()) {        log.debug(sm.getString("cgiServlet.expandOk",srcPath,destPath));      }    }  } catch (  IOException ioe) {    log.warn(sm.getString("cgiServlet.expandFail",srcPath,destPath),ioe);    if (f.exists()) {      if (!f.delete()) {        log.warn(sm.getString("cgiServlet.expandDeleteFail",f.getAbsolutePath()));      }    }  }}  }
class C{  private void parseMajorVersion(String majorVer) throws FSMsgException, SAMLException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Response(Element): invalid " + "MajorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Response(Element):MajorVersion of" + " the Response is too high.");      }      throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Response(Element):MajorVersion of" + " the Response is too low.");      }      throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooLow",null);    }  }}  }
class C{  public Duration minusDays(long daysToSubtract){  return (daysToSubtract == Long.MIN_VALUE ? plusDays(Long.MAX_VALUE).plusDays(1) : plusDays(-daysToSubtract));}  }
class C{  public void testUnsupportedCallbackException02(){  myCallback c=new myCallback();  assertNotNull("Callback object is null",c);  UnsupportedCallbackException ucE=new UnsupportedCallbackException(c);  assertNull("getMessage() must return null.",ucE.getMessage());  assertEquals("Incorrect callback object was returned",c,ucE.getCallback());}  }
class C{  public V put(K key,V value){  if (value == null)   throw new NullPointerException();  return doPut(key,value,false);}  }
class C{  protected void sendAck(SelectionKey key,WritableByteChannel channel,byte[] command,SocketAddress udpaddr){  try {    ByteBuffer buf=ByteBuffer.wrap(command);    int total=0;    if (channel instanceof DatagramChannel) {      DatagramChannel dchannel=(DatagramChannel)channel;      while (total < command.length) {        total+=dchannel.send(buf,udpaddr);      }    } else {      while (total < command.length) {        total+=channel.write(buf);      }    }    if (log.isTraceEnabled()) {      log.trace("ACK sent to " + ((channel instanceof SocketChannel) ? ((SocketChannel)channel).socket().getInetAddress() : ((DatagramChannel)channel).socket().getInetAddress()));    }  } catch (  java.io.IOException x) {    log.warn(sm.getString("nioReplicationTask.unable.ack",x.getMessage()));  }}  }
class C{  public QueuedJobCount(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  void young(){  mYoung=true;}  }
class C{  protected IdentifiedException(Throwable cause){  super(cause);}  }
class C{  public RSAPublicKey decodeRSAPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {  if (encodedKey == null) {    return null;  }  encodedKey=encodedKey.replace("-----BEGIN PUBLIC KEY-----","").replace("-----END PUBLIC KEY-----","").trim();  byte[] decodedKey=Base64.decode(encodedKey);  KeyFactory keyFactory=KeyFactory.getInstance("RSA");  X509EncodedKeySpec keySpec=new X509EncodedKeySpec(decodedKey);  return (RSAPublicKey)keyFactory.generatePublic(keySpec);}  }
class C{  private static void install(X509Certificate x,String alias){  try {    File file=file(alias);    file.getParentFile().mkdirs();    OutputStream out=new FileOutputStream(file);    out.write(x.getEncoded());    out.close();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public PagePropertiesCallback(String name,String header,String image,int timeOut,String templateName,boolean error,String page_state){  this.image=image;  if (timeOut != 0) {    this.timeOut=timeOut;  }  this.templateName=templateName;  this.moduleName=name;  this.header=header;  this.error=error;  this.page_state=page_state;}  }
class C{  private void send(){  vertx.eventBus().publish(GeneratorConfigVerticle.ADDRESS,toJson());}  }
class C{  public boolean isUnshared(){  return unshared;}  }
class C{  public static void calculateTiledPositions(int allocated,SizeRequirements total,SizeRequirements[] children,int[] offsets,int[] spans,boolean forward){  long min=0;  long pref=0;  long max=0;  for (int i=0; i < children.length; i++) {    min+=children[i].minimum;    pref+=children[i].preferred;    max+=children[i].maximum;  }  if (allocated >= pref) {    expandedTile(allocated,min,pref,max,children,offsets,spans,forward);  } else {    compressedTile(allocated,min,pref,max,children,offsets,spans,forward);  }}  }
class C{  private PolicyDecision mergePolicyDecisions(PolicyDecision pd1,PolicyDecision pd2,String serviceName){  Map actionDecisions1=pd1.getActionDecisions();  Set actions=new HashSet();  actions.addAll(actionDecisions1.keySet());  Iterator iter=actions.iterator();  while (iter.hasNext()) {    String action=(String)iter.next();    ActionDecision ad1=(ActionDecision)actionDecisions1.get(action);    pd2.addActionDecision(ad1,policyProperties.getTrueValue(serviceName,action),policyProperties.getFalseValue(serviceName,action));  }  Map mergedReponseAttrsMap=new HashMap();  PolicyUtils.appendMapToMap(pd1.getResponseAttributes(),mergedReponseAttrsMap);  PolicyUtils.appendMapToMap(pd2.getResponseAttributes(),mergedReponseAttrsMap);  pd2.setResponseAttributes(mergedReponseAttrsMap);  return pd2;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String02() throws NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    SSLContext.getInstance(null,defaultProviderName);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (protocol is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException was not thrown as expected (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Attr newAttr;  Node removedNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  attributes=testAddress.getAttributes();  removedNode=attributes.removeNamedItemNS("http://www.usa.com","domestic");  assertNotNull("retval",removedNode);  newAttr=(Attr)attributes.getNamedItem("dmstc:domestic");  assertNull("nodeRemoved",newAttr);}  }
class C{  public void runTo(int index){  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_INDEX,null));  if ((index >= 0) && (m_next < m_firstFree))   m_next=index; else   m_next=m_firstFree - 1;}  }
class C{  public static SecurityConfig newInstance(){  if (singleton == null) {    singleton=new SecurityConfig();  }  return singleton;}  }
class C{  public static void addSubConfigAttributeDefaultValues(String serviceName,Set sunServiceID,String realm,String subConfigName,String attributeName,Set defaultValues){  String classMethod="UpgradeUtils:addSubConfigAttributeDefaultValues : ";  try {    Set oldVal=new HashSet();    ServiceConfigManager scm=getServiceConfigManager(serviceName);    ServiceConfig sc=scm.getOrganizationConfig(realm,null);    ServiceConfig subConfig=sc.getSubConfig(subConfigName);    String serviceID=getSunServiceID(subConfig);    if (sunServiceID.contains(serviceID)) {      Set valSet=getExistingValues(subConfig,attributeName,defaultValues);      defaultValues.removeAll(valSet);      subConfig.replaceAttributeValues(attributeName,oldVal,defaultValues);    }  } catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSOToken",ssoe);  }catch (  SMSException sme) {    debug.error(classMethod + "Error adding values ",sme);  }}  }
class C{  public SubscriptionState(){  super(SIPHeaderNames.SUBSCRIPTION_STATE);  expires=-1;  retryAfter=-1;}  }
class C{  protected static String convert(int index){  StringBuilder buf=new StringBuilder();  if (index < 0) {    buf.append('-');    index=-index;  }  if (index > 3000) {    buf.append('|');    buf.append(convert(index / 1000));    buf.append('|');    index=index - (index / 1000) * 1000;  }  int pos=0;  while (true) {    RomanDigit dig=ROMAN_DIGITS[pos];    while (index >= dig.value) {      buf.append(dig.digit);      index-=dig.value;    }    if (index <= 0) {      break;    }    int j=pos;    while (!ROMAN_DIGITS[++j].pre)     ;    if (index + ROMAN_DIGITS[j].value >= dig.value) {      buf.append(ROMAN_DIGITS[j].digit).append(dig.digit);      index-=dig.value - ROMAN_DIGITS[j].value;    }    pos++;  }  return buf.toString();}  }
class C{  @Deprecated protected ActionListener createKeyboardResizeToggleListener(){  return new KeyboardResizeToggleHandler();}  }
class C{  public void updateStandardObjectClass(ObjectClass oc,Schema schema){  standardObjectClassPanel.update(oc,schema);  schemaElementPanel=standardObjectClassPanel;  ((CardLayout)mainPanel.getLayout()).show(mainPanel,standardObjectClassPanel.getTitle().toString());}  }
class C{  protected boolean checkSendfile(HttpServletRequest request,HttpServletResponse response,WebResource resource,long length,Range range){  if (sendfileSize > 0 && resource.isFile() && length > sendfileSize && (resource.getCanonicalPath() != null) && (Boolean.TRUE.equals(request.getAttribute(Globals.SENDFILE_SUPPORTED_ATTR))) && (request.getClass().getName().equals("org.apache.catalina.connector.RequestFacade")) && (response.getClass().getName().equals("org.apache.catalina.connector.ResponseFacade"))) {    request.setAttribute(Globals.SENDFILE_FILENAME_ATTR,resource.getCanonicalPath());    if (range == null) {      request.setAttribute(Globals.SENDFILE_FILE_START_ATTR,Long.valueOf(0L));      request.setAttribute(Globals.SENDFILE_FILE_END_ATTR,Long.valueOf(length));    } else {      request.setAttribute(Globals.SENDFILE_FILE_START_ATTR,Long.valueOf(range.start));      request.setAttribute(Globals.SENDFILE_FILE_END_ATTR,Long.valueOf(range.end + 1));    }    return true;  }  return false;}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    key=(RSAKeyParameters)rParam.getParameters();  } else {    key=(RSAKeyParameters)param;  }  this.forEncryption=forEncryption;}  }
class C{  @Override public int doStartTag() throws JspException {  return EVAL_BODY_BUFFERED;}  }
class C{  public EntityException(String msg,String errorCode,Object[] args){  super(msg);  this.localizedMsg=msg;  this.errorCode=errorCode;  this.args=args;}  }
class C{  private void sendCallOrTransactionDoesNotExistResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  if (transaction.getState() != TransactionState.TERMINATED) {    SIPResponse sipResponse=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);    ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();    if (serverHeader != null) {      sipResponse.setHeader(serverHeader);    }    try {      if (sipRequest.getMethod().equals(Request.INVITE)) {        sipStack.addTransactionPendingAck(transaction);      }      transaction.sendResponse(sipResponse);      transaction.releaseSem();    } catch (    Exception ex) {      logger.logError("Problem sending error response",ex);      transaction.releaseSem();      sipStack.removeTransaction(transaction);    }  }}  }
class C{  protected static final int compare(ByteChunk name,byte[] compareTo){  int result=0;  byte[] b=name.getBuffer();  int start=name.getStart();  int end=name.getEnd();  int len=compareTo.length;  if ((end - start) < len) {    len=end - start;  }  for (int i=0; (i < len) && (result == 0); i++) {    if (b[i + start] > compareTo[i]) {      result=1;    } else     if (b[i + start] < compareTo[i]) {      result=-1;    }  }  if (result == 0) {    if (compareTo.length > (end - start)) {      result=-1;    } else     if (compareTo.length < (end - start)) {      result=1;    }  }  return result;}  }
class C{  public ModelMBeanOperationInfo(ModelMBeanOperationInfo inInfo){  super(inInfo.getName(),inInfo.getDescription(),inInfo.getSignature(),inInfo.getReturnType(),inInfo.getImpact());  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),"ModelMBeanOperationInfo(ModelMBeanOperationInfo)","Entry");  }  Descriptor newDesc=inInfo.getDescriptor();  operationDescriptor=validDescriptor(newDesc);}  }
class C{  private CORSConstants(){}  }
class C{  public List<VerificationOK> verifySignature() throws GeneralSecurityException, IOException {  LOGGER.info("Verifying signature.");  List<VerificationOK> result=new ArrayList<>();  Certificate[] chain=pkcs7.getSignCertificateChain();  verifyChain(chain);  int total=1;  if (CertificateOption.WHOLE_CHAIN.equals(option)) {    total=chain.length;  }  X509Certificate signCert;  X509Certificate issuerCert;  for (int i=0; i < total; ) {    signCert=(X509Certificate)chain[i++];    issuerCert=(X509Certificate)null;    if (i < chain.length)     issuerCert=(X509Certificate)chain[i];    LOGGER.info(signCert.getSubjectDN().getName());    List<VerificationOK> list=verify(signCert,issuerCert,signDate);    if (list.size() == 0) {      try {        signCert.verify(signCert.getPublicKey());        if (latestRevision && chain.length > 1) {          list.add(new VerificationOK(signCert,this.getClass(),"Root certificate in final revision"));        }        if (list.size() == 0 && verifyRootCertificate) {          throw new GeneralSecurityException();        } else         if (chain.length > 1)         list.add(new VerificationOK(signCert,this.getClass(),"Root certificate passed without checking"));      } catch (      GeneralSecurityException e) {        throw new VerificationException(signCert,"Couldn't verify with CRL or OCSP or trusted anchor");      }    }    result.addAll(list);  }  switchToPreviousRevision();  return result;}  }
class C{  public String createAMTemplate(SSOToken token,String entryDN,int objectType,String serviceName,Map attributes,int priority) throws AMException {  String templateDN=super.createAMTemplate(token,entryDN,objectType,serviceName,attributes,priority);  String dn=LDAPUtils.formatToRFC(templateDN);  CacheBlock cb=(CacheBlock)sdkCache.get(dn);  if (cb != null) {    cb.setExists(true);  }  return templateDN;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Node entityNode;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entityNode=entities.getNamedItem("ent1");  assertNotNull("ent1NotNull",entityNode);  attrList=entityNode.getAttributes();  assertNull("entityAttributesNull",attrList);}  }
class C{  protected void release(){}  }
class C{  @Override public void clear() throws IOException {synchronized (this) {    int numberOfTries=2;    while (numberOfTries > 0) {      Connection _conn=getConnection();      if (_conn == null) {        return;      }      try {        if (preparedClearSql == null) {          String clearSql="DELETE FROM " + sessionTable + " WHERE "+ sessionAppCol+ " = ?";          preparedClearSql=_conn.prepareStatement(clearSql);        }        preparedClearSql.setString(1,getName());        preparedClearSql.execute();        numberOfTries=0;      } catch (      SQLException e) {        manager.getContext().getLogger().error(sm.getString(getStoreName() + ".SQLException",e));        if (dbConnection != null)         close(dbConnection);      } finally {        release(_conn);      }      numberOfTries--;    }  }}  }
class C{  public static void addPropertyChangeListener(PropertyChangeListener listener){synchronized (classLock) {    getLAFState().getPropertyChangeSupport(true).addPropertyChangeListener(listener);  }}  }
class C{  boolean isSynchProviderEnabled(){  return synchProviderEnabled;}  }
class C{  public SortKey(final String attributeDescription,final boolean isReverseOrder){  this(attributeDescription,isReverseOrder,null);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  AMViewBeanBase vb=(AMViewBeanBase)getReturnToViewBean();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public int hashCode(){  return rp == null ? m : m + rp.hashCode();}  }
class C{  private void writeAdministrativeUserContents(ServerDescriptor desc,int maxLabelWidth){  Set<DN> administrators=desc.getAdministrativeUsers();  if (!administrators.isEmpty()) {    TreeSet<DN> ordered=new TreeSet<>(administrators);    for (    DN dn : ordered) {      writeLabelValue(INFO_ADMINISTRATIVE_USERS_LABEL.get(),dn.toString(),maxLabelWidth);    }  } else {    writeLabelValue(INFO_ADMINISTRATIVE_USERS_LABEL.get(),getErrorText(desc),maxLabelWidth);  }}  }
class C{  private Map.Entry<K,V> doRemoveFirstEntry(){  for (Node<K,V> b, n; ; ) {    if ((n=(b=head.node).next) == null)     return null;    Node<K,V> f=n.next;    if (n != b.next)     continue;    Object v=n.value;    if (v == null) {      n.helpDelete(b,f);      continue;    }    if (!n.casValue(v,null))     continue;    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();    clearIndexToFirst();    @SuppressWarnings("unchecked") V vv=(V)v;    return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,vv);  }}  }
class C{  public String toXMLString() throws FSMsgException {  String xml=this.toXMLString(true,false);  return xml;}  }
class C{  public PlaPointInt round_to_grid(int p_horizontal_grid,int p_vertical_grid){  double rounded_x;  if (p_horizontal_grid > 0) {    rounded_x=Math.rint(v_x / p_horizontal_grid) * p_horizontal_grid;  } else {    rounded_x=v_x;  }  double rounded_y;  if (p_vertical_grid > 0) {    rounded_y=Math.rint(v_y / p_vertical_grid) * p_vertical_grid;  } else {    rounded_y=v_y;  }  return new PlaPointInt(rounded_x,rounded_y);}  }
class C{  public ProxiedAuthV1Control(DN authorizationDN){  this(true,authorizationDN);}  }
class C{  public <R>Kue on(String eventType,Handler<Message<R>> handler){  vertx.eventBus().consumer(Kue.workerAddress(eventType),handler);  return this;}  }
class C{  public void encode(ASN1Writer writer) throws IOException {switch (matchType) {case EQUALITY_MATCH_TYPE:case GREATER_OR_EQUAL_TYPE:case LESS_OR_EQUAL_TYPE:case APPROXIMATE_MATCH_TYPE:    writer.writeStartSequence(matchType);  writer.writeOctetString(rawAttributeType);writer.writeOctetString(rawAssertionValue);writer.writeEndSequence();return;case SUBSTRINGS_TYPE:writer.writeStartSequence(matchType);writer.writeOctetString(rawAttributeType);writer.writeStartSequence();if (subInitial != null) {writer.writeOctetString(TYPE_SUBINITIAL,subInitial);}if (subAny != null) {for (ByteString s : subAny) {writer.writeOctetString(TYPE_SUBANY,s);}}if (subFinal != null) {writer.writeOctetString(TYPE_SUBFINAL,subFinal);}writer.writeEndSequence();writer.writeEndSequence();return;case PRESENT_TYPE:writer.writeOctetString(matchType,rawAttributeType);return;case EXTENSIBLE_MATCH_TYPE:writer.writeStartSequence(matchType);if (matchingRuleID != null) {writer.writeOctetString(TYPE_MATCHING_RULE_ID,matchingRuleID);}if (rawAttributeType != null) {writer.writeOctetString(TYPE_MATCHING_RULE_TYPE,rawAttributeType);}writer.writeOctetString(TYPE_MATCHING_RULE_VALUE,rawAssertionValue);writer.writeEndSequence();return;default :}}  }
class C{  UnselectAction(){  super(unselectAction);}  }
class C{  protected PrinterStateReason(int value){  super(value);}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  public static String showInputDialog(Component parentComponent,Object message) throws HeadlessException {  return showInputDialog(parentComponent,message,UIManager.getString("OptionPane.inputDialogTitle",parentComponent),QUESTION_MESSAGE);}  }
class C{  public Object object(){  if (null == m_obj)   setObject(new Double(m_val));  return m_obj;}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().addFoo(foo);}  }
class C{  private String serializeAsRDF() throws IOException, XMPException {  int level=0;  if (!options.getOmitPacketWrapper()) {    writeIndent(level);    write(PACKET_HEADER);    writeNewline();  }  if (!options.getOmitXmpMetaElement()) {    writeIndent(level);    write(RDF_XMPMETA_START);    if (!options.getOmitVersionAttribute()) {      write(XMPMetaFactory.getVersionInfo().getMessage());    }    write("\">");    writeNewline();    level++;  }  writeIndent(level);  write(RDF_RDF_START);  writeNewline();  if (options.getUseCanonicalFormat()) {    serializeCanonicalRDFSchemas(level);  } else {    serializeCompactRDFSchemas(level);  }  writeIndent(level);  write(RDF_RDF_END);  writeNewline();  if (!options.getOmitXmpMetaElement()) {    level--;    writeIndent(level);    write(RDF_XMPMETA_END);    writeNewline();  }  String tailStr="";  if (!options.getOmitPacketWrapper()) {    for (level=options.getBaseIndent(); level > 0; level--) {      tailStr+=options.getIndent();    }    tailStr+=PACKET_TRAILER;    tailStr+=options.getReadOnlyPacket() ? 'r' : 'w';    tailStr+=PACKET_TRAILER2;  }  return tailStr;}  }
class C{  public static boolean removeAgentGroup(AMIdentity amid,AMIdentity groupToRemove) throws IdRepoException, SSOException, SMSException {  boolean bRemoved=false;  Set groups=amid.getMemberships(IdType.AGENTGROUP);  if ((groups != null) && !groups.isEmpty()) {    if (groupToRemove != null) {      if (groups.contains(groupToRemove)) {        unheritPropertyValues(groupToRemove,amid);        groupToRemove.removeMember(amid);        bRemoved=true;      }    }  }  return bRemoved;}  }
class C{  protected void fireActionPerformed(ActionEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  public static String[] wordWrap(String rawString,int lineLength){  if (rawString == null) {    return new String[]{""};  }  if (rawString.length() <= lineLength && !rawString.contains("\n")) {    return new String[]{rawString};  }  char[] rawChars=(rawString + ' ').toCharArray();  StringBuilder word=new StringBuilder();  StringBuilder line=new StringBuilder();  List<String> lines=new LinkedList<String>();  int lineColorChars=0;  for (int i=0; i < rawChars.length; i++) {    char c=rawChars[i];    if (c == ChatColor.COLOR_CHAR) {      word.append(ChatColor.getByChar(rawChars[i + 1]));      lineColorChars+=2;      i++;      continue;    }    if (c == ' ' || c == '\n') {      if (line.length() == 0 && word.length() > lineLength) {        for (        String partialWord : word.toString().split("(?<=\\G.{" + lineLength + "})")) {          lines.add(partialWord);        }      } else       if (line.length() + word.length() - lineColorChars == lineLength) {        line.append(word);        lines.add(line.toString());        line=new StringBuilder();        lineColorChars=0;      } else       if (line.length() + 1 + word.length() - lineColorChars > lineLength) {        for (        String partialWord : word.toString().split("(?<=\\G.{" + lineLength + "})")) {          lines.add(line.toString());          line=new StringBuilder(partialWord);        }        lineColorChars=0;      } else {        if (line.length() > 0) {          line.append(' ');        }        line.append(word);      }      word=new StringBuilder();      if (c == '\n') {        lines.add(line.toString());        line=new StringBuilder();      }    } else {      word.append(c);    }  }  if (line.length() > 0) {    lines.add(line.toString());  }  if (lines.get(0).length() == 0 || lines.get(0).charAt(0) != ChatColor.COLOR_CHAR) {    lines.set(0,ChatColor.WHITE + lines.get(0));  }  for (int i=1; i < lines.size(); i++) {    final String pLine=lines.get(i - 1);    final String subLine=lines.get(i);    char color=pLine.charAt(pLine.lastIndexOf(ChatColor.COLOR_CHAR) + 1);    if (subLine.length() == 0 || subLine.charAt(0) != ChatColor.COLOR_CHAR) {      lines.set(i,ChatColor.getByChar(color) + subLine);    }  }  return lines.toArray(new String[lines.size()]);}  }
class C{  final void forgetContents(){  UNSAFE.putObject(this,itemOffset,this);  UNSAFE.putObject(this,waiterOffset,null);}  }
class C{  void quickRemove(int i){  assert i <= size;  queue[i]=queue[size];  queue[size--]=null;}  }
class C{  public static String tagSwap(Map<String,String> tags,String content){  for (  Map.Entry<String,String> contents : tags.entrySet()) {    content=content.replace(contents.getKey(),contents.getValue().toString());  }  return content;}  }
class C{  private void acceptForSession(){  returnValue=ReturnType.ACCEPTED_FOR_SESSION;  dispose();}  }
class C{  public SchemaFactoryConfigurationError(Throwable cause){  super(cause);}  }
class C{  private void pauseLogging(){  try {    mLogcatViewerService.pause();  } catch (  RemoteException e) {    Log.e(LOG_TAG,"Pausing logcat failed");  }}  }
class C{  ResourceIndexEntry(String resourceName,Set policyNames){  this.resourceName=resourceName;  if (policyNames != null) {    this.policyNames=policyNames;  }}  }
class C{  void checkSingleColumnCell(int axis,int col,View v){  SizeRequirements req=columnRequirements[col];  req.minimum=Math.max((int)v.getMinimumSpan(axis),req.minimum);  req.preferred=Math.max((int)v.getPreferredSpan(axis),req.preferred);}  }
class C{  public Expected<T> ifNotEmpty(final Consumer<? super T> consumer){  if (!isEmpty())   consumer.accept(this.value);  return this;}  }
class C{  private void serializeCanonicalRDFSchemas(int level) throws IOException, XMPException {  if (xmp.getRoot().getChildrenLength() > 0) {    startOuterRDFDescription(xmp.getRoot(),level);    for (Iterator it=xmp.getRoot().iterateChildren(); it.hasNext(); ) {      XMPNode currSchema=(XMPNode)it.next();      serializeCanonicalRDFSchema(currSchema,level);    }    endOuterRDFDescription(level);  } else {    writeIndent(level + 1);    write(RDF_SCHEMA_START);    writeTreeName();    write("/>");    writeNewline();  }}  }
class C{  protected void initialize(){  existStmt=PreparedStatementFactory.getPreparedStatement(EXISTENCE_CQL,getSession());  readStmt=PreparedStatementFactory.getPreparedStatement(READ_CQL,getSession());  createStmt=PreparedStatementFactory.getPreparedStatement(CREATE_CQL,getSession());  updateStmt=PreparedStatementFactory.getPreparedStatement(UPDATE_CQL,getSession());  readAllStmt=PreparedStatementFactory.getPreparedStatement(READ_ALL_CQL,getSession());  readAllCurrentlyIndexingStmt=PreparedStatementFactory.getPreparedStatement(READ_ALL_CURRENTLY_INDEXING_CQL,getSession());  deleteFromNotDoneStmt=PreparedStatementFactory.getPreparedStatement(DELETE_FROM_NOT_DONE,getSession());  markIndexingStmt=PreparedStatementFactory.getPreparedStatement(MARK_INDEXING_CQL,getSession());  isCurrentlyIndexingStmt=PreparedStatementFactory.getPreparedStatement(IS_CURRENTLY_INDEXING_CQL,getSession());}  }
class C{  @Override public void addFilterDef(FilterDef filterDef){synchronized (filterDefs) {    filterDefs.put(filterDef.getFilterName(),filterDef);  }  fireContainerEvent("addFilterDef",filterDef);}  }
class C{  public SessionID addRestrictedToken(SessionID sid,TokenRestriction restriction){  SessionID previousValue=restrictedTokensByRestriction.putIfAbsent(restriction,sid);  if (previousValue == null) {    restrictedTokensBySid.put(sid,restriction);    notifyPersistenceManager();    return null;  }  return previousValue;}  }
class C{  public AsfTagTextField(final String fieldKey,final String value){  super(fieldKey);  toWrap.setString(value);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public void testMac05() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac mac;  for (int i=0; i < validValues.length; i++) {    mac=Mac.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect algorithm",mac.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",mac.getProvider().getName(),defaultProviderName);  }}  }
class C{  public void addSSOTokenListener(SSOTokenListener listener) throws SSOException {  if (!ldapConnect) {    try {      SessionListener ssoListener=new SSOSessionListener(listener);      session.addSessionListener(ssoListener);    } catch (    Exception e) {      SSOProviderImpl.debug.error("Couldn't add listener to the token" + getTokenID().toString());      throw new SSOException(e);    }  }}  }
class C{  private void createAdministrationSuffix(String backendName) throws ADSContextException {  ADSContextHelper helper=new ADSContextHelper();  String ben=backendName;  if (backendName == null) {    ben=getDefaultBackendName();  }  helper.createAdministrationSuffix(connectionWrapper,ben);}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range,currentItem);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  public static String rdnTypeFromDn(DN dn){  if (dn.size() > 0) {    return rdnType(dn.rdn());  }  return "";}  }
class C{  static KeyPair newKeyPair() throws NoSuchAlgorithmException {  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance("RSA");  keyPairGenerator.initialize(1024);  return keyPairGenerator.generateKeyPair();}  }
class C{  public void testBitLengthNegative1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(108,aNumber.bitLength());}  }
class C{  public static SimplePrefixSet of(String... prefixes){  return new SimplePrefixSet(Arrays.asList(prefixes));}  }
class C{  public EnderChest(BlockFace direction){  this();  setFacingDirection(direction);}  }
class C{  static void encodeInteger(ByteBuffer source,int value,int n){  int twoNminus1=PREFIX_TABLE[n];  int pos=source.position() - 1;  if (value < twoNminus1) {    source.put(pos,(byte)(source.get(pos) | value));  } else {    source.put(pos,(byte)(source.get(pos) | twoNminus1));    value=value - twoNminus1;    while (value >= 128) {      source.put((byte)(value % 128 + 128));      value=value / 128;    }    source.put((byte)value);  }}  }
class C{  final void updateHead(Node<E> h,Node<E> p){  if (h != p && casHead(h,p))   h.lazySetNext(h);}  }
class C{  public void cancel(){  HeadTaskRunnable oldHeadTask=null;  do {    oldHeadTask=headTask;    if (oldHeadTask != null) {      if (oldHeadTask.acquireValidLock()) {        try {          if (oldHeadTask == headTask) {            if (!oldHeadTask.isTimedOut()) {              previousTask.setNext(nextTask);              if (nextTask != null) {                nextTask.setPrevious(previousTask);                nextTask=null;              } else {                oldHeadTask.setTail(previousTask);              }            }            break;          }        }  finally {          oldHeadTask.releaseLockAndNotify();        }      }    }  } while (oldHeadTask != headTask);  headTask=null;}  }
class C{  static MatchingRuleImpl collationGreaterThanOrEqualToMatchingRule(Locale locale){  return new CollationGreaterThanOrEqualToMatchingRuleImpl(locale);}  }
class C{  public void animateIn(){  animate(IN);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RequireReferenceTokenElement createRequireReferenceTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RequireReferenceTokenElementImpl();}  }
class C{  public static boolean isIA5String(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }  }  return true;}  }
class C{  public MultipartBody build(){  if (parts.isEmpty()) {    throw new IllegalStateException("Multipart body must have at least one part.");  }  return new MultipartBody(boundary,type,parts);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix08.class,args);}  }
class C{  private void releaseLockAndNotify() throws IllegalMonitorStateException {  rwlock.writeLock().unlock();}  }
class C{  public TimeoutEvent(Object source,ServerTransaction serverTransaction,Timeout timeout){  super(source);  m_serverTransaction=serverTransaction;  m_isServerTransaction=true;  m_timeout=timeout;}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  TabularData other;  try {    other=(TabularData)obj;  } catch (  ClassCastException e) {    return false;  }  if (!this.getTabularType().equals(other.getTabularType())) {    return false;  }  if (this.size() != other.size()) {    return false;  }  for (  CompositeData value : dataMap.values()) {    if (!other.containsValue(value)) {      return false;    }  }  return true;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node secondChildNode;  Node textNode;  Node noChildNode;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(0);  employeeList=employeeNode.getChildNodes();  secondChildNode=employeeList.item(1);  textNode=secondChildNode.getFirstChild();  noChildNode=textNode.getLastChild();  assertNull("nodeGetLastChildNullAssert1",noChildNode);}  }
class C{  public static Object convertInputStreamToJAXB(InputStream is) throws JAXBException {  Unmarshaller u=jaxbContext.createUnmarshaller();  return u.unmarshal(XMLUtils.createSAXSource(new InputSource(is)));}  }
class C{  private void shutdown() throws Exception {  TestCaseUtils.dsconfig("delete-replication-server","--provider-name","Multimaster Synchronization");  replicationServer=null;}  }
class C{  public static ComponentUI createUI(JComponent h){  return new SynthTableHeaderUI();}  }
class C{  protected void serializeCDATASection(CDATASection node) throws SAXException {  if ((fFeatures & WELLFORMED) != 0) {    isCDATASectionWellFormed(node);  }  if ((fFeatures & CDATA) != 0) {    String nodeValue=node.getNodeValue();    int endIndex=nodeValue.indexOf("]]>");    if ((fFeatures & SPLITCDATA) != 0) {      if (endIndex >= 0) {        String relatedData=nodeValue.substring(0,endIndex + 2);        String msg=Utils.messages.createMessage(MsgKey.ER_CDATA_SECTIONS_SPLIT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_WARNING,msg,MsgKey.ER_CDATA_SECTIONS_SPLIT,null,relatedData,null));        }      }    } else {      if (endIndex >= 0) {        String relatedData=nodeValue.substring(0,endIndex + 2);        String msg=Utils.messages.createMessage(MsgKey.ER_CDATA_SECTIONS_SPLIT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_CDATA_SECTIONS_SPLIT));        }        return;      }    }    if (!applyFilter(node,NodeFilter.SHOW_CDATA_SECTION)) {      return;    }    if (fLexicalHandler != null) {      fLexicalHandler.startCDATA();    }    dispatachChars(node);    if (fLexicalHandler != null) {      fLexicalHandler.endCDATA();    }  } else {    dispatachChars(node);  }}  }
class C{  public boolean next(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("next",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.next();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void clear(){  names.removeAllElements();  types.removeAllElements();  values.removeAllElements();}  }
class C{  public void addCRLs(Store crlStore) throws CMSException {  crls.addAll(CMSUtils.getCRLsFromStore(crlStore));}  }
class C{  public AbandonedObjectCreatedException(){  super();  _createdTime=System.currentTimeMillis();}  }
class C{  private void createActions(){  closeAction=new CloseAction();  if (getWindowDecorationStyle() == JRootPane.FRAME) {    iconifyAction=new IconifyAction();    restoreAction=new RestoreAction();    maximizeAction=new MaximizeAction();  }}  }
class C{  public boolean isCellEditable(EventObject event){  boolean retValue=false;  boolean editable=false;  if (event != null) {    if (event.getSource() instanceof JTree) {      setTree((JTree)event.getSource());      if (event instanceof MouseEvent) {        TreePath path=tree.getPathForLocation(((MouseEvent)event).getX(),((MouseEvent)event).getY());        editable=(lastPath != null && path != null && lastPath.equals(path));        if (path != null) {          lastRow=tree.getRowForPath(path);          Object value=path.getLastPathComponent();          boolean isSelected=tree.isRowSelected(lastRow);          boolean expanded=tree.isExpanded(path);          TreeModel treeModel=tree.getModel();          boolean leaf=treeModel.isLeaf(value);          determineOffset(tree,value,isSelected,expanded,leaf,lastRow);        }      }    }  }  if (!realEditor.isCellEditable(event))   return false;  if (canEditImmediately(event))   retValue=true; else   if (editable && shouldStartEditingTimer(event)) {    startEditingTimer();  } else   if (timer != null && timer.isRunning())   timer.stop();  if (retValue)   prepareForEditing();  return retValue;}  }
class C{  public void testInit03() throws Exception {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  byte[] bbRes1;  byte[] bbRes2;  byte[] bbRes3;  SecureRandom randomNull=null;  SecureRandom random=new SecureRandom();  for (int i=0; i < kAgs.length; i++) {    kAgs[i].init(privKey);    kAgs[i].doPhase(publKey,true);    bbRes1=kAgs[i].generateSecret();    kAgs[i].init(privKey,random);    kAgs[i].doPhase(publKey,true);    bbRes2=kAgs[i].generateSecret();    assertEquals("Incorrect byte array length",bbRes1.length,bbRes2.length);    for (int j=0; j < bbRes1.length; j++) {      assertEquals("Incorrect byte (index: ".concat(Integer.toString(i)).concat(")"),bbRes1[j],bbRes2[j]);    }    kAgs[i].init(privKey,randomNull);    kAgs[i].doPhase(publKey,true);    bbRes3=kAgs[i].generateSecret();    assertEquals("Incorrect byte array length",bbRes1.length,bbRes3.length);    for (int j=0; j < bbRes1.length; j++) {      assertEquals("Incorrect byte (index: ".concat(Integer.toString(i)).concat(")"),bbRes1[j],bbRes3[j]);    }  }}  }
class C{  @Override public void showView(final FeatureView featureView,final boolean addToBackStack,final String fragmentTag){  String tag=fragmentTag;  if (fragmentTag == null) {    tag=featureView.getViewTag();  }  final FragmentManager manager=getFragmentManager();  if (featureView instanceof DialogFragment) {    showDialogFragment(manager,(DialogFragment)featureView,addToBackStack,tag);  } else   if (featureView instanceof MirrorView) {    showMirrorView(manager,(MirrorView)featureView,addToBackStack,tag);  } else {    throw new IllegalArgumentException("View must be a DialogFragment or MirrorView");  }}  }
class C{  public void handleTblSubConfigButtonAddRequest(RequestInvocationEvent event){  SubSchemaModel model=(SubSchemaModel)getModel();  Map createable=model.getCreateableSubSchemaNames();  if (!createable.isEmpty()) {    if (createable.size() > 1) {      SubSchemaTypeSelectViewBean vb=(SubSchemaTypeSelectViewBean)getViewBean(SubSchemaTypeSelectViewBean.class);      addViewBeanClassToPageSession();      unlockPageTrail();      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    } else {      String subSchema=(String)createable.keySet().iterator().next();      setPageSessionAttribute(AMServiceProfile.PG_SESSION_SUB_SCHEMA_NAME,subSchema);      SubConfigAddViewBean vb=(SubConfigAddViewBean)getViewBean(SubConfigAddViewBean.class);      addViewBeanClassToPageSession();      unlockPageTrail();      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    }  } else {    forwardTo();  }}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterUpdate(final Context context,final UpdateRequest request,final RequestHandler next){  final JsonValue jsonValue=request.getContent();  final Map<String,Boolean> actions=jsonValue.get(ACTIONS).asMap(Boolean.class);  final Collection<String> resources=jsonValue.get(RESOURCES).asCollection(String.class);  final String bodyRealm=jsonValue.get(REALM).asString();  final String pathRealm=contextHelper.getRealm(context);  if (actions == null) {    return new BadRequestException("Invalid actions defined in request").asPromise();  }  if (resources == null) {    return new BadRequestException("Invalid resources defined in request").asPromise();  }  if (!pathRealm.equals(bodyRealm)) {    return resourceErrorHandler.handleError(context,request,new EntitlementException(EntitlementException.INVALID_APP_REALM,new String[]{bodyRealm,pathRealm})).asPromise();  }  final Subject callingSubject=contextHelper.getSubject(context);  final String applicationName=request.getResourcePath();  try {    final ApplicationService applicationService=applicationServiceFactory.create(callingSubject,pathRealm);    final Application application=applicationService.getApplication(applicationName);    if (application == null) {      return new NotFoundException("Unable to find application " + applicationName).asPromise();    }    if (application.getResourceTypeUuids().size() != 1) {      return new BadRequestException("Cannot modify application with more than one " + "resource type using version 1.0 of this endpoint").asPromise();    }    final String resourceTypeUuid=application.getResourceTypeUuids().iterator().next();    ResourceType resourceType=resourceTypeService.getResourceType(callingSubject,pathRealm,resourceTypeUuid);    boolean resourceTypeModified=false;    if (!actions.equals(resourceType.getActions())) {      resourceTypeModified=true;      resourceType=resourceType.populatedBuilder().setActions(actions).build();    }    if (!resources.equals(resourceType.getPatterns())) {      resourceTypeModified=true;      resourceType=resourceType.populatedBuilder().setPatterns(resources).build();    }    if (resourceTypeModified) {      resourceTypeService.updateResourceType(callingSubject,pathRealm,resourceType);    }    jsonValue.put(RESOURCE_TYPE_UUIDS,array(resourceTypeUuid));  } catch (  EntitlementException eE) {    debug.error("Error filtering application update CREST request",eE);    return resourceErrorHandler.handleError(context,request,eE).asPromise();  }  return applicationTransformer.transform(next.handleUpdate(context,request),context);}  }
class C{  public ShapeTileSimplex remove_border_line(int p_no){  if (p_no < 0 || p_no >= lines_size()) {    return this;  }  ArrayList<PlaLineInt> new_arr=new ArrayList<PlaLineInt>(lines_size());  new_arr.addAll(lines_list);  new_arr.remove(p_no);  return new ShapeTileSimplex(new_arr);}  }
class C{  private byte[] calculateCMSKeyChecksum(byte[] key){  byte[] result=new byte[8];  sha1.update(key,0,key.length);  sha1.doFinal(digest,0);  System.arraycopy(digest,0,result,0,8);  return result;}  }
class C{  void clearCachedDecisionsForService(String serviceName){  if (debug.messageEnabled()) {    debug.message("ResourceResultCache." + "clearCachedDecisionsForService():" + "serviceName="+ serviceName);  }synchronized (resultCache) {    resultCache.remove(serviceName);  }}  }
class C{  public static KeyStore loadCacertsKeyStore(){  return loadCacertsKeyStore(null);}  }
class C{  @NonNull public static Interpolator anticipateOvershoot(int tension,int extraTension){  return new AnticipateOvershootInterpolator(tension,extraTension);}  }
class C{  private boolean uploadFile(final HttpServletRequest request){  if (!AccessControlUtil.getInstance(configuration).checkFolderACL(this.type,this.currentFolder,this.userRole,AccessControlUtil.CKFINDER_CONNECTOR_ACL_FILE_UPLOAD)) {    this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_UNAUTHORIZED;    return false;  }  return fileUpload(request);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(0,16);  childData=child.getData();  assertEquals("characterdataDeleteDataBeginingAssert","Dallas, Texas 98551",childData);}  }
class C{  public Map<String,Set<String>> evaluate(Subject adminSubject,String realm,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  Map<String,Set<String>> map=new HashMap<String,Set<String>>();  map.put(propertyName,propertyValues);  return map;}  }
class C{  public String toString(){  return "[Digest Input Stream] " + digest.toString();}  }
class C{  public void testAndNotPosPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-96};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.andNot(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Inject public LicenseChecker(LicenseLocator locator,LicenseLog log,User user,DebugLog debug){  if (locator == null) {    throw new NullPointerException("License locator is null");  }  if (log == null) {    throw new NullPointerException("License log is null");  }  if (user == null) {    throw new NullPointerException("User is null");  }  if (debug == null) {    throw new NullPointerException("Debug log is null");  }  debug.log("Starting LicenseChecker");  this.user=user;  this.debug=debug;  String userName=user.getName();  debug.log("User Name: " + userName);  if (userName != null && !userName.trim().isEmpty()) {    locator=new PersistentLicenseLocator(locator,log,userName);  } else {    debug.log("Unable to determine username: disabling license acceptance logging");  }  this.licensePresenter=new CLILicensePresenter(locator,user);}  }
class C{  @Override @SuppressWarnings("unchecked") public boolean remove(Object o){  if (o == null) {    return false;  }  for (int targetIndex=0; targetIndex < size; targetIndex++) {    if (o.equals(elements[targetIndex])) {      removeAt(targetIndex);      return true;    }  }  return false;}  }
class C{  public InlineView(Element elem){  super(elem);  StyleSheet sheet=getStyleSheet();  attr=sheet.getViewAttributes(this);}  }
class C{  static InternalSearchOperation searchForChangedEntries(DN baseDN,CSN fromCSN,InternalSearchListener resultListener) throws Exception {  return searchForChangedEntries(baseDN,fromCSN,null,resultListener);}  }
class C{  @Override public <T>T evaluateScript(final ScriptObject script,final Bindings bindings) throws ScriptException {  final Future<T> future=threadPool.submit(new ScriptExecutorTask<T>(script,bindings));  final long timeout=scriptEngineManager.getConfiguration().getScriptExecutionTimeout();  try {    if (timeout == ScriptEngineConfiguration.NO_TIMEOUT) {      return future.get();    } else {      return future.get(timeout,TimeUnit.SECONDS);    }  } catch (  ExecutionException ex) {    LOGGER.error("Script terminated with exception",ex);    throw new ScriptException(ex);  }catch (  TimeoutException ex) {    LOGGER.warn("Script timed out");    throw new ScriptException(ex);  }catch (  InterruptedException ex) {    Thread.currentThread().interrupt();    LOGGER.debug("Interrupted while waiting for script result");    throw new ScriptException(ex);  } finally {    future.cancel(true);  }}  }
class C{  private final void round(int maximumDigits,boolean alreadyRounded,boolean valueExactAsDecimal){  if (maximumDigits >= 0 && maximumDigits < count) {    if (shouldRoundUp(maximumDigits,alreadyRounded,valueExactAsDecimal)) {      for (; ; ) {        --maximumDigits;        if (maximumDigits < 0) {          digits[0]='1';          ++decimalAt;          maximumDigits=0;          break;        }        ++digits[maximumDigits];        if (digits[maximumDigits] <= '9')         break;      }      ++maximumDigits;    }    count=maximumDigits;    while (count > 1 && digits[count - 1] == '0') {      --count;    }  }}  }
class C{  @Override public void log(CharArrayWriter message){  rotate();  if (checkExists) {synchronized (this) {      if (currentLogFile != null && !currentLogFile.exists()) {        try {          close(false);        } catch (        Throwable e) {          ExceptionUtils.handleThrowable(e);          log.info(sm.getString("accessLogValve.closeFail"),e);        }        dateStamp=fileDateFormatter.format(new Date(System.currentTimeMillis()));        open();      }    }  }  try {synchronized (this) {      if (writer != null) {        message.writeTo(writer);        writer.println("");        if (!buffered) {          writer.flush();        }      }    }  } catch (  IOException ioe) {    log.warn(sm.getString("accessLogValve.writeFail",message.toString()),ioe);  }}  }
class C{  protected final AwtreeNodeLeaf insert(AwtreeObject p_object,int p_index){  PlaShape object_shape=p_object.get_tree_shape(this,p_index);  if (object_shape == null) {    System.err.println("ShapeTree.insert: object_shape is null");    return null;  }  ShapeTileRegular bounding_shape=object_shape.bounding_shape();  if (bounding_shape == null) {    System.err.println("ShapeTree.insert: bounding_shape is null");    return null;  }  AwtreeNodeLeaf new_leaf=new AwtreeNodeLeaf(p_object,p_index,null,bounding_shape);  insert_leaf(new_leaf);  return new_leaf;}  }
class C{  public FileSystemAlreadyExistsException(String msg){  super(msg);}  }
class C{  public void addPolicy(Policy policy) throws SSOException, NameAlreadyExistsException, NoPermissionException, InvalidFormatException, PolicyException {  String realmName=getOrganizationDN();  PolicyManager.initAdminSubject();  realmName=LDAPUtils.formatToRFC(realmName);  String subjectRealm=policy.getSubjectRealm();  String[] realmNames={realmName,subjectRealm};  if ((subjectRealm != null) && !subjectRealm.equals(realmName)) {    if (debug.messageEnabled()) {      debug.message("Can not add policy in realm :" + realmName + ", policy has realm subjects "+ " from realm : "+ subjectRealm);    }    throw (new InvalidFormatException(ResBundleUtils.rbName,"policy_realm_does_not_match",realmNames,null,realmName,PolicyException.POLICY));  }  validateForResourcePrefix(policy);  validateReferrals(policy);  String testCreatedBy=policy.getCreatedBy();  if ((testCreatedBy == null) || (testCreatedBy.length() == 0)) {    Date creationDate=Time.newDate();    policy.setCreatedBy(token.getPrincipal().getName());    policy.setCreationDate(creationDate.getTime());    policy.setLastModifiedBy(token.getPrincipal().getName());    policy.setLastModifiedDate(creationDate.getTime());  }  String policyXml=policy.toXML();  Map attrs=new HashMap();  Set set=new HashSet();  set.add(policyXml);  attrs.put(POLICY_XML,set);  ServiceConfig namedPolicy=createOrGetPolicyConfig(NAMED_POLICY,NAMED_POLICY,scm,org);  try {    namedPolicy.addSubConfig(policy.getName(),NAMED_POLICY_ID,0,attrs);    PrivilegeIndexStore pis=PrivilegeIndexStore.getInstance(adminSubject,realmName);    Set<IPrivilege> privileges=PrivilegeUtils.policyToPrivileges(policy);    pis.add(privileges);    policyCache.sendPolicyChangeNotification(null,policy,ServiceListener.ADDED);  } catch (  EntitlementException e) {    String[] objs={policy.getName(),org};    throw (new PolicyException(ResBundleUtils.rbName,"unable_to_add_policy",objs,e));  }catch (  ServiceAlreadyExistsException e) {    String[] objs={policy.getName(),org};    if (PolicyUtils.logStatus) {      PolicyUtils.logErrorMessage("POLICY_ALREADY_EXISTS_IN_REALM",objs,token);    }    throw (new NameAlreadyExistsException(ResBundleUtils.rbName,"policy_already_exists_in_org",objs,policy.getName(),PolicyException.POLICY));  }catch (  SMSException se) {    String[] objs={policy.getName(),org};    if (PolicyUtils.logStatus) {      PolicyUtils.logErrorMessage("UNABLE_TO_ADD_POLICY",objs,token);    }    debug.error("SMS error in add policy: " + policy.getName() + " for org: "+ org,se);    if (se.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {      throw (new NoPermissionException(ResBundleUtils.rbName,"insufficient_access_rights",null));    } else {      throw (new PolicyException(ResBundleUtils.rbName,"unable_to_add_policy",objs,se));    }  }  if (PolicyUtils.logStatus) {    String[] objs={policy.getName(),org};    PolicyUtils.logAccessMessage("POLICY_CREATE_SUCCESS",objs,token);  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK! ");  logger.info("Dialog = " + requestEvent.getDialog());  logger.info("Dialog State = " + requestEvent.getDialog().getState());  this.ackSeen=true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode16.class,args);}  }
class C{  private static AddResponseProtocolOp readAddResponse(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  int resultCode;  try {    resultCode=(int)reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_RESULT_CODE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  DN matchedDN;  try {    String dnString=reader.readOctetStringAsString();    if (dnString.length() == 0) {      matchedDN=null;    } else {      matchedDN=DN.valueOf(dnString);    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_MATCHED_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  LocalizableMessage errorMessage;  try {    errorMessage=LocalizableMessage.raw(reader.readOctetStringAsString());    if (errorMessage.length() == 0) {      errorMessage=null;    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_ERROR_MESSAGE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<String> referralURLs=null;  try {    if (reader.hasNextElement()) {      reader.readStartSequence();      referralURLs=new ArrayList<>();      while (reader.hasNextElement()) {        referralURLs.add(reader.readOctetStringAsString());      }      reader.readEndSequence();    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_REFERRALS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new AddResponseProtocolOp(resultCode,errorMessage,matchedDN,referralURLs);}  }
class C{  public Point(Point p){  this(p.x,p.y);}  }
class C{  public boolean isImageCachable(int w,int h){  return (w * h) < maxSingleImagePixelSize;}  }
class C{  public void logModifyDNResponse(ModifyDNOperation modifyDNOperation){}  }
class C{  private ConnectionMonitor(final RateTimer timer){  this(timer,new RateWindow(timer,WINDOW_SIZE,SAMPLE_RATE));}  }
class C{  private void writeConfigArchive(){  if (!maintainConfigArchive) {    return;  }  File archiveDirectory=new File(configFile.getParentFile(),CONFIG_ARCHIVE_DIR_NAME);  try {    createArchiveDirectoryIfNeeded(archiveDirectory);    File archiveFile=getNewArchiveFile(archiveDirectory);    copyCurrentConfigFileToArchiveFile(archiveFile);    removeOldArchiveFilesIfNeeded(archiveDirectory);  } catch (  DirectoryException e) {    LocalizableMessage message=e.getMessageObject();    logger.error(message);    DirectoryServer.sendAlertNotification(this,ALERT_TYPE_CANNOT_WRITE_CONFIGURATION,message);  }}  }
class C{  public static String read(String fileName){  return read(fileName,Resource.class);}  }
class C{  public PolicyEvaluationException(Throwable nestedException,String reqId){  super(nestedException);  this.reqId=reqId;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,int macSizeInBits){  this(cipher,macSizeInBits,null);}  }
class C{  protected int checkVerticalKey(int key,String message){  if ((key == TOP) || (key == CENTER) || (key == BOTTOM)) {    return key;  } else {    throw new IllegalArgumentException(message);  }}  }
class C{  protected void fieldUpdated(){}  }
class C{  private static void createOrgAuthConfig(String realmName) throws Exception {  String classMethod="UpgradeUtils:createOrgAuthConfig: ";  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName);  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);  if (orgConfig != null) {    Map aa=orgConfig.getAttributes();    if (debug.messageEnabled()) {      debug.message(classMethod + "Org is :" + realmName);      debug.message(classMethod + "Attribute Map is :" + aa);    }    String orgName=realmName;    if (LDAPUtils.isDN(realmName)) {      orgName=LDAPUtils.rdnValueFromDn(realmName);    }    String authConfigName=orgName + "-authconfig";    String adminAuthConfigName=orgName + "-admin-authconfig";    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);    if (debug.messageEnabled()) {      debug.message(classMethod + "authConfigAttrValue : " + authConfigAttrValue);    }    Set newVal=new HashSet();    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {      newVal.add(authConfigName);      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);    }    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);    if (debug.messageEnabled()) {      debug.message("adminauthConfigAttrValue : " + adminConfigAttrValue);    }    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {      newVal.clear();      newVal.add(adminAuthConfigName);      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);    }    aa=orgConfig.getAttributes();    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);    if (authConfig == null) {      s.addSubConfig(NAMED_CONFIG,null,0,null);      authConfig=s.getSubConfig(NAMED_CONFIG);    }    Map aMap=new HashMap();    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);    aMap.clear();    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);  }}  }
class C{  public byte[] remainingBytes(){  final int length=byteArray.length - bytes.position();  return nextByteArray(length);}  }
class C{  @Override public int hashCode(){  int code=0;  if (name != null) {    code+=name.hashCode();  }  if (applicationName != null) {    code+=applicationName.hashCode();  }  if (resourceNames != null) {    code+=resourceNames.hashCode();  }  if (actionValues != null) {    code+=actionValues.hashCode();  }  if (advices != null) {    code+=advices.hashCode();  }  if (attributes != null) {    code+=attributes.hashCode();  }  return code;}  }
class C{  public void not(){  mv.visitInsn(Opcodes.ICONST_1);  mv.visitInsn(Opcodes.IXOR);}  }
class C{  public ParallelWorkQueueMonitor(ParallelWorkQueue workQueue){  this.workQueue=workQueue;}  }
class C{  public static void putInt(final String key,final int value){  try {    systemRoot.putInt(fixKey(key),value);  } catch (  final Exception e) {    System.err.print(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore3.class,args);}  }
class C{  public static boolean isSameContainer(HttpServletRequest request,String url){  boolean result=false;  FSUtils.debug.message("FSUtils.isSameContainer: called");  try {    String sourceHost=request.getServerName();    int sourcePort=request.getServerPort();    if (debug.messageEnabled()) {      FSUtils.debug.message("FSUtils.isSameContainer: " + "SourceHost=" + sourceHost + " SourcePort="+ sourcePort);    }    URL target=new URL(url);    String targetHost=target.getHost();    int targetPort=target.getPort();    if (debug.messageEnabled()) {      FSUtils.debug.message("FSUtils.isSameContainer: targetHost=" + targetHost + " targetPort="+ targetPort);    }    int index=url.indexOf(deploymentURI + "/");    if (!(sourceHost.equals(targetHost)) || !(sourcePort == targetPort) || !(index > 0)) {      if (debug.messageEnabled()) {        FSUtils.debug.message("FSUtils.isSameContainer: Source and " + "Target are not on the same container.");      }    } else {      if (debug.messageEnabled()) {        FSUtils.debug.message("FSUtils.isSameContainer: Source and " + "Target are on the same container.");      }      result=true;    }  } catch (  Exception ex) {    FSUtils.debug.error("FSUtils.isSameContainer: Exception occured",ex);  }  return result;}  }
class C{  public void mult(int scalar){  for (int i=0; i < 10; i++) {    c[i]*=scalar;  }  reduceCoefficients();}  }
class C{  public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if ((null != top) && top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || ((null != top) && top.equals(pos))) {          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.m_contentHandler.endDocument();}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public static boolean isParityAdjusted(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new InvalidKeyException("key == null");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("key too short");  }  int byteKey=0;  for (int i=offset; i < DES_KEY_LEN; i++) {    byteKey=key[i];    byteKey^=byteKey >> 1;    byteKey^=byteKey >> 2;    byteKey^=byteKey >> 4;    if ((byteKey & 1) == 0) {      return false;    }  }  return true;}  }
class C{  public static void showMessageDialog(Component parentComponent,Object message,String title,int messageType) throws HeadlessException {  showMessageDialog(parentComponent,message,title,messageType,null);}  }
class C{  private static void sendAlreadyLogedOutResp(HttpServletResponse response,HttpServletRequest request,LogoutRequest logoutReq,String relayState,String realm,String idpEntityID,String spEntityID,String binding) throws SAML2Exception {  String classMethod="IDPSingleLogout.sendAlreadyLogedOutResp";  debug.message(classMethod + "No session in the IdP. " + "We are already logged out. Generating success logout");  LogoutResponse logRes=LogoutUtil.generateResponse(ALREADY_LOGGEDOUT,logoutReq.getID(),SAML2Utils.createIssuer(idpEntityID),realm,SAML2Constants.IDP_ROLE,logoutReq.getIssuer().getSPProvidedID());  SingleLogoutServiceElement endpoint=getLogoutResponseEndpoint(realm,spEntityID,binding);  binding=endpoint.getBinding();  String location=getResponseLocation(endpoint);  debug.message(classMethod + "Location found: " + location+ " for binding "+ binding);  logRes.setDestination(XMLUtils.escapeSpecialCharacters(location));  LogoutUtil.sendSLOResponse(response,request,logRes,location,relayState,realm,idpEntityID,SAML2Constants.IDP_ROLE,spEntityID,binding);}  }
class C{  protected AdminException(LocalizableMessage message,Throwable cause){  super(cause);  this.message=message;}  }
class C{  public StringBuilder encodeMessage(StringBuilder retval){  if (statusLine != null) {    statusLine.encode(retval);    super.encodeSIPHeaders(retval);  } else {    retval=super.encodeSIPHeaders(retval);  }  return retval;}  }
class C{  @Override public boolean isTLSInUse(SoapMessage message){  return super.isTLSInUse(message) || HTTPS.equals(message.get(HTTP_SCHEME));}  }
class C{  public TaggedIOException(IOException original,Serializable tag){  super(original.getMessage(),original);  this.tag=tag;}  }
class C{  protected boolean isSpecial(String name){  for (int i=0; i < specials.length; i++) {    if (specials[i].equals(name))     return true;  }  return false;}  }
class C{  public void addTreeModelListener(TreeModelListener l){  listenerList.add(TreeModelListener.class,l);}  }
class C{  public static Object instantiate(ClassLoader cls,String beanName) throws IOException, ClassNotFoundException {  return Beans.instantiate(cls,beanName,null,null);}  }
class C{  @Override public boolean is_tail(){  Collection<BrdItem> contact_list=get_normal_contacts();  if (contact_list.size() <= 1) {    return true;  }  Iterator<BrdItem> iter=contact_list.iterator();  BrdItem curr_contact_item=iter.next();  int first_contact_first_layer=curr_contact_item.first_layer();  int first_contact_last_layer=curr_contact_item.last_layer();  while (iter.hasNext()) {    curr_contact_item=iter.next();    if (curr_contact_item.first_layer() != first_contact_first_layer || curr_contact_item.last_layer() != first_contact_last_layer) {      return false;    }  }  return true;}  }
class C{  public static final int toIntVal(byte[] octets){  int intVal=octets[5] & 0xFF;  intVal|=((octets[4] << 8) & 0xFF00);  intVal|=((octets[3] << 16) & 0xFF0000);  intVal|=((octets[2] << 24) & 0xFF000000);  return intVal;}  }
class C{  protected void updateCellEditor(){  TreeCellEditor newEditor;  completeEditing();  if (tree == null)   newEditor=null; else {    if (tree.isEditable()) {      newEditor=tree.getCellEditor();      if (newEditor == null) {        newEditor=createDefaultCellEditor();        if (newEditor != null) {          tree.setCellEditor(newEditor);          createdCellEditor=true;        }      }    } else     newEditor=null;  }  if (newEditor != cellEditor) {    if (cellEditor != null && cellEditorListener != null)     cellEditor.removeCellEditorListener(cellEditorListener);    cellEditor=newEditor;    if (cellEditorListener == null)     cellEditorListener=createCellEditorListener();    if (newEditor != null && cellEditorListener != null)     newEditor.addCellEditorListener(cellEditorListener);    createdCellEditor=false;  }}  }
class C{  public AttributeTypeAndValue(ObjectIdentifier oid,AttributeValue value) throws IOException {  this.oid=oid;  this.value=value;}  }
class C{  public PdfCanvas showText(GlyphLine text,Iterator<GlyphLine.GlyphLinePart> iterator){  document.checkShowTextIsoConformance(currentGs,resources);  PdfFont font;  if ((font=currentGs.getFont()) == null) {    throw new PdfException(PdfException.FontAndSizeMustBeSetBeforeWritingAnyText,currentGs);  }  float fontSize=currentGs.getFontSize() / 1000f;  float charSpacing=currentGs.getCharSpacing();  float scaling=currentGs.getHorizontalScaling() / 100f;  List<GlyphLine.GlyphLinePart> glyphLineParts=iteratorToList(iterator);  for (int partIndex=0; partIndex < glyphLineParts.size(); ++partIndex) {    GlyphLine.GlyphLinePart glyphLinePart=glyphLineParts.get(partIndex);    if (glyphLinePart.actualText != null) {      PdfDictionary properties=new PdfDictionary();      properties.put(PdfName.ActualText,new PdfString(glyphLinePart.actualText,PdfEncodings.UNICODE_BIG).setHexWriting(true));      beginMarkedContent(PdfName.Span,properties);    } else     if (glyphLinePart.reversed) {      beginMarkedContent(PdfName.ReversedChars);    }    int sub=glyphLinePart.start;    for (int i=glyphLinePart.start; i < glyphLinePart.end; i++) {      Glyph glyph=text.get(i);      if (glyph.hasOffsets()) {        if (i - 1 - sub >= 0) {          font.writeText(text,sub,i - 1,contentStream.getOutputStream());          contentStream.getOutputStream().writeBytes(Tj);          contentStream.getOutputStream().writeFloat(getSubrangeWidth(text,sub,i - 1),true).writeSpace().writeFloat(0).writeSpace().writeBytes(Td);        }        float xPlacement=Float.NaN;        float yPlacement=Float.NaN;        if (glyph.hasPlacement()) {{            float xPlacementAddition=0;            int currentGlyphIndex=i;            Glyph currentGlyph=text.get(i);            while (currentGlyph != null && currentGlyph.getXPlacement() != 0) {              xPlacementAddition+=currentGlyph.getXPlacement();              if (currentGlyph.getAnchorDelta() == 0) {                break;              } else {                currentGlyphIndex+=currentGlyph.getAnchorDelta();                currentGlyph=text.get(currentGlyphIndex);              }            }            xPlacement=-getSubrangeWidth(text,currentGlyphIndex,i) + xPlacementAddition * fontSize;          }{            float yPlacementAddition=0;            int currentGlyphIndex=i;            Glyph currentGlyph=text.get(i);            while (currentGlyph != null && currentGlyph.getYPlacement() != 0) {              yPlacementAddition+=currentGlyph.getYPlacement();              if (currentGlyph.getAnchorDelta() == 0) {                break;              } else {                currentGlyph=text.get(currentGlyphIndex + currentGlyph.getAnchorDelta());                currentGlyphIndex+=currentGlyph.getAnchorDelta();              }            }            yPlacement=glyph.getYAdvance() * fontSize + yPlacementAddition * fontSize;          }          contentStream.getOutputStream().writeFloat(xPlacement,true).writeSpace().writeFloat(yPlacement,true).writeSpace().writeBytes(Td);        }        font.writeText(text,i,i,contentStream.getOutputStream());        contentStream.getOutputStream().writeBytes(Tj);        if (!Float.isNaN(xPlacement)) {          contentStream.getOutputStream().writeFloat(-xPlacement,true).writeSpace().writeFloat(-yPlacement,true).writeSpace().writeBytes(Td);        }        if (glyph.hasAdvance()) {          contentStream.getOutputStream().writeFloat(((glyph.getWidth() + glyph.getXAdvance()) * fontSize + charSpacing) * scaling,true).writeSpace().writeFloat(glyph.getYAdvance() * fontSize,true).writeSpace().writeBytes(Td);        }        sub=i + 1;      }    }    if (glyphLinePart.end - sub > 0) {      font.writeText(text,sub,glyphLinePart.end - 1,contentStream.getOutputStream());      contentStream.getOutputStream().writeBytes(Tj);    }    if (glyphLinePart.actualText != null) {      endMarkedContent();    } else     if (glyphLinePart.reversed) {      endMarkedContent();    }    if (glyphLinePart.end > sub && partIndex + 1 < glyphLineParts.size()) {      contentStream.getOutputStream().writeFloat(getSubrangeWidth(text,sub,glyphLinePart.end - 1),true).writeSpace().writeFloat(0).writeSpace().writeBytes(Td);    }  }  return this;}  }
class C{  public ReplicationRepairRequestControl(boolean isCritical){  super(OID_REPLICATION_REPAIR_CONTROL,isCritical);}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeSequencePrematureEof() throws Exception {  super.testDecodeSequencePrematureEof();}  }
class C{  public LoginTCPPortAttribute(int port){  super(OctetUtils.toOctets(AttributeType.LOGIN_TCP_PORT,port));  this.port=port;}  }
class C{  public static FSLogoutResponse parseBASE64EncodedString(String encodedRes) throws FSMsgException, SAMLException {  if (encodedRes != null) {    String decodedNameRegRes=new String(Base64.decode(encodedRes));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLogoutResponse." + "parseBASE64EncodedString: decoded input string: " + decodedNameRegRes);    }    return parseXML(decodedNameRegRes);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLogoutResponse.parseBASE64EncodedString" + ": null String passed in as argument.");    }    throw new FSMsgException("nullInput",null);  }}  }
class C{  @Override public void close() throws Exception {  save();synchronized (groups) {synchronized (users) {      users.clear();      groups.clear();    }  }}  }
class C{  private boolean split(PlaDelTriTriangle p_triangle,PlaDelTriCorner p_corner){  PlaDelTriEdge containing_edge=null;  for (int index=0; index < 3; ++index) {    PlaDelTriEdge curr_edge=p_triangle.edge_lines[index];    PlaSide curr_side;    if (curr_edge.left_triangle == p_triangle) {      curr_side=p_corner.side_of(curr_edge.start_corner,curr_edge.end_corner);    } else {      curr_side=p_corner.side_of(curr_edge.end_corner,curr_edge.start_corner);    }    if (curr_side == PlaSide.ON_THE_RIGHT) {      System.out.println("PlanarDelaunayTriangulation.split: p_corner is outside");      return false;    } else     if (curr_side == PlaSide.COLLINEAR) {      if (containing_edge != null) {        PlaDelTriCorner common_corner=curr_edge.common_corner(containing_edge);        if (common_corner == null) {          System.out.println("PlanarDelaunayTriangulation.split: common corner expected");          return false;        }        if (p_corner.object == common_corner.object) {          return false;        }        degenerate_edges.add(new PlaDelTriEdge(last_edge_id_no,p_corner,common_corner));        return true;      }      containing_edge=curr_edge;    }  }  if (containing_edge == null) {    PlaDelTriTriangle[] new_triangles=p_triangle.split_at_inner_point(p_corner);    if (new_triangles == null)     return false;    for (    PlaDelTriTriangle curr_triangle : new_triangles) {      search_graph.insert(curr_triangle,p_triangle);    }    for (int index=0; index < 3; ++index) {      legalize_edge(p_corner,p_triangle.edge_lines[index]);    }  } else {    PlaDelTriTriangle neighbour_to_split=containing_edge.other_neighbour(p_triangle);    PlaDelTriTriangle[] new_triangles=p_triangle.split_at_border_point(p_corner,neighbour_to_split);    if (new_triangles == null)     return false;    search_graph.insert(new_triangles[0],p_triangle);    search_graph.insert(new_triangles[1],p_triangle);    search_graph.insert(new_triangles[2],neighbour_to_split);    search_graph.insert(new_triangles[3],neighbour_to_split);    for (int index=0; index < 3; ++index) {      PlaDelTriEdge curr_edge=p_triangle.edge_lines[index];      if (curr_edge != containing_edge) {        legalize_edge(p_corner,curr_edge);      }    }    for (int index=0; index < 3; ++index) {      PlaDelTriEdge curr_edge=neighbour_to_split.edge_lines[index];      if (curr_edge != containing_edge) {        legalize_edge(p_corner,curr_edge);      }    }  }  return true;}  }
class C{  public Calendar fromLDAPDate(String ldapDate){  return GeneralizedTime.valueOf(ldapDate).toCalendar();}  }
class C{  private Promise<Void,ResourceException> deleteToken(Context context,String tokenId,boolean deleteRefreshToken){  try {    AMIdentity uid=getUid(context);    JsonValue token=getToken(tokenId);    String username=getAttributeValue(token,USERNAME);    if (username == null || username.isEmpty()) {      if (debug.errorEnabled()) {        debug.error("TokenResource :: DELETE : No username associated with " + "token with ID, " + tokenId + ".");      }      throw new PermanentException(HttpURLConnection.HTTP_NOT_FOUND,"Not Found",null);    }    String grantType=getAttributeValue(token,GRANT_TYPE);    if (grantType != null && grantType.equalsIgnoreCase(CLIENT_CREDENTIALS)) {      if (deleteRefreshToken) {        deleteAccessTokensRefreshToken(token);      }      tokenStore.delete(tokenId);    } else {      String realm=getAttributeValue(token,REALM);      AMIdentity uid2=identityManager.getResourceOwnerIdentity(username,realm);      if (uid.equals(uid2) || uid.equals(adminUserId)) {        if (deleteRefreshToken) {          deleteAccessTokensRefreshToken(token);        }        tokenStore.delete(tokenId);      } else {        if (debug.errorEnabled()) {          debug.error("TokenResource :: DELETE : Only the resource owner or an administrator may perform " + "a delete on the token with ID, " + tokenId + ".");        }        throw new PermanentException(401,"Unauthorized",null);      }    }    return newResultPromise(null);  } catch (  CoreTokenException e) {    return new ServiceUnavailableException(e.getMessage(),e).asPromise();  }catch (  ResourceException e) {    return e.asPromise();  }catch (  SSOException e) {    debug.error("TokenResource :: DELETE : Unable to retrieve identity of the requesting user. Unauthorized.");    return new PermanentException(401,"Unauthorized",e).asPromise();  }catch (  IdRepoException e) {    debug.error("TokenResource :: DELETE : Unable to retrieve identity of the requesting user. Unauthorized.");    return new PermanentException(401,"Unauthorized",e).asPromise();  }catch (  UnauthorizedClientException e) {    debug.error("TokenResource :: DELETE : Requesting user is unauthorized.");    return new PermanentException(401,"Unauthorized",e).asPromise();  }}  }
class C{  private static BigInteger expandBigIntegerTenPowers(int n){synchronized (BigDecimal.class) {    BigInteger[] pows=BIG_TEN_POWERS_TABLE;    int curLen=pows.length;    if (curLen <= n) {      int newLen=curLen << 1;      while (newLen <= n)       newLen<<=1;      pows=Arrays.copyOf(pows,newLen);      for (int i=curLen; i < newLen; i++)       pows[i]=pows[i - 1].multiply(BigInteger.TEN);      BIG_TEN_POWERS_TABLE=pows;    }    return pows[n];  }}  }
class C{  public SubjectDelegationPermission(String name,String actions){  super(name,actions);  if (actions != null)   throw new IllegalArgumentException("Non-null actions");}  }
class C{  protected void persist(PrintWriter writer,StringManager smClient){  if (debug >= 1) {    log(sm.getString("hostManagerServlet.persist"));  }  try {    MBeanServer platformMBeanServer=ManagementFactory.getPlatformMBeanServer();    ObjectName oname=new ObjectName(engine.getDomain() + ":type=StoreConfig");    platformMBeanServer.invoke(oname,"storeConfig",null,null);    writer.println(smClient.getString("hostManagerServlet.persisted"));  } catch (  Exception e) {    getServletContext().log(sm.getString("hostManagerServlet.persistFailed"),e);    writer.println(smClient.getString("hostManagerServlet.persistFailed"));    if (e instanceof InstanceNotFoundException) {      writer.println("Please enable StoreConfig to use this feature.");    } else {      writer.println(smClient.getString("hostManagerServlet.exception",e.toString()));    }    return;  }}  }
class C{  public void testSendNullRequest(){  try {    try {      Request nullRequest=riMessageFactory.createRequest("");      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(nullRequest);      waitForMessage();      RequestEvent receivedRequestEvent=eventCollector.extractCollectedRequestEvent();      if (receivedRequestEvent != null)       throw new TiUnexpectedError("The the sent null string request should not generate a request event!");    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("A TooManyListenersException was thrown while trying to add " + "a SipListener to a TI SipProvider.",ex);    }catch (    SipException ex) {      throw new TckInternalError("The RI failed to send the request!",ex);    }catch (    ParseException ex) {      throw new TiUnexpectedError("The null request did not parse and create an empty message!");    }  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  void init(JsonValue config) throws InvalidException {  try {    String enabled=config.get("enabled").asString();    if ("false".equals(enabled)) {      logger.debug("JDBC repository not enabled");      throw new RuntimeException("JDBC repository not enabled.");    }    JsonValue genericQueries=config.get("queries").get("genericTables");    JsonValue genericCommands=config.get("commands").get("genericTables");    tableHandlers=new ConcurrentHashMap<>();    databaseType=config.get(CONFIG_DB_TYPE).defaultTo(DatabaseType.ANSI_SQL99.name()).as(enumConstant(DatabaseType.class));    maxTxRetry=config.get(CONFIG_MAX_TX_RETRY).defaultTo(5).asInteger();    int maxBatchSize=config.get(CONFIG_MAX_BATCH_SIZE).defaultTo(100).asInteger();    JsonValue defaultMapping=config.get("resourceMapping").get("default");    if (!defaultMapping.isNull()) {      defaultTableHandler=getGenericTableHandler(databaseType,defaultMapping,dataSourceService.getDatabaseName(),genericQueries,genericCommands,maxBatchSize);      logger.debug("Using default table handler: {}",defaultTableHandler);    } else {      logger.warn("No default table handler configured");    }    JsonValue defaultTableProps=json(object(field("mainTable","configobjects"),field("propertiesTable","configobjectproperties"),field("searchableDefault",Boolean.TRUE)));    GenericTableHandler defaultConfigHandler=getGenericTableHandler(databaseType,defaultTableProps,dataSourceService.getDatabaseName(),genericQueries,genericCommands,1);    tableHandlers.put("config",defaultConfigHandler);    JsonValue genericMapping=config.get("resourceMapping").get("genericMapping");    if (!genericMapping.isNull()) {      for (      String key : genericMapping.keys()) {        JsonValue value=genericMapping.get(key);        if (key.endsWith("/*")) {          key=key.substring(0,key.length() - 1);        }        TableHandler handler=getGenericTableHandler(databaseType,value,dataSourceService.getDatabaseName(),genericQueries,genericCommands,maxBatchSize);        tableHandlers.put(key,handler);        logger.debug("For pattern {} added handler: {}",key,handler);      }    }    JsonValue explicitQueries=config.get("queries").get("explicitTables");    JsonValue explicitCommands=config.get("commands").get("explicitTables");    JsonValue explicitMapping=config.get("resourceMapping").get("explicitMapping");    if (!explicitMapping.isNull()) {      for (      Object keyObj : explicitMapping.keys()) {        JsonValue value=explicitMapping.get((String)keyObj);        String key=(String)keyObj;        if (key.endsWith("/*")) {          key=key.substring(0,key.length() - 1);        }        TableHandler handler=getMappedTableHandler(databaseType,value,value.get("table").required().asString(),value.get("objectToColumn").required().asMap(),dataSourceService.getDatabaseName(),explicitQueries,explicitCommands,maxBatchSize);        tableHandlers.put(key,handler);        logger.debug("For pattern {} added handler: {}",key,handler);      }    }  } catch (  RuntimeException ex) {    logger.warn("Configuration invalid, can not start JDBC repository.",ex);    throw new InvalidException("Configuration invalid, can not start JDBC repository.",ex);  }catch (  InternalServerErrorException ex) {    throw new InvalidException("Could not initialize mapped table handler, can not start JDBC repository.",ex);  }  Connection testConn=null;  try {    testConn=getConnection();    testConn.setAutoCommit(true);  } catch (  Exception ex) {    logger.warn("JDBC Repository start-up experienced a failure getting a DB connection: " + ex.getMessage() + ". If this is not temporary or resolved, Repository operation will be affected.",ex);  } finally {    if (testConn != null) {      try {        testConn.close();      } catch (      SQLException ex) {        logger.warn("Failure during test connection close ",ex);      }    }  }}  }
class C{  public void warning(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {  String formattedMsg=e.getMessage();  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    handler.warning(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  private void operationViewClicked(){  if (operationViewDlg == null) {    operationViewPanel=MonitoringAttributesViewPanel.createMonitoringAttributesInstance(allowedChOperations);    operationViewDlg=new GenericDialog(Utilities.getFrame(this),operationViewPanel);    Utilities.centerGoldenMean(operationViewDlg,Utilities.getParentDialog(this));    operationViewDlg.setModal(true);  }  operationViewPanel.setSelectedAttributes(chOperations);  operationViewDlg.setVisible(true);  if (!operationViewPanel.isCanceled()) {    boolean showAverages=showAveragesMenu.isSelected();    chOperations=operationViewPanel.getAttributes();    setChOperationsToDisplay(chOperations,showAverages);    updateTableSizes();  }}  }
class C{  private static boolean isHex(char p_char){  return (isDigit(p_char) || (p_char >= 'a' && p_char <= 'f') || (p_char >= 'A' && p_char <= 'F'));}  }
class C{  public static Method findAbstractMethod(Class<?> c){  if (abstractMethod.containsKey(c))   return abstractMethod.get(c);  for (  Method m : c.getDeclaredMethods()) {    if (Modifier.isAbstract(m.getModifiers())) {      abstractMethod.put(c,m);      return m;    }  }  if (!c.isInterface()) {    Class<?> tmp=c.getSuperclass();    while (tmp != null) {      if (!Modifier.isAbstract(tmp.getModifiers()))       break;      for (      Method method : tmp.getDeclaredMethods()) {        if (Modifier.isAbstract(method.getModifiers())) {          if (isOverriddenInClass(method,c))           continue;          abstractMethod.put(c,method);          return method;        }      }      tmp=tmp.getSuperclass();    }  }  Set<Class<?>> visited=new HashSet<>();  Queue<Class<?>> interfaces=new ArrayDeque<>();  Collections.addAll(interfaces);  while (!interfaces.isEmpty()) {    Class<?> ii=interfaces.remove();    if (visited.contains(ii))     continue;    for (    Method m : ii.getDeclaredMethods()) {      if (Modifier.isAbstract(m.getModifiers())) {        if (isOverriddenInClass(m,c))         continue;        abstractMethod.put(c,m);        return m;      }    }    visited.add(ii);    Collections.addAll(interfaces,ii.getInterfaces());  }  throw new LtRuntimeException("cannot find abstract method in " + c);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  configFilePath=DirectoryServer.getInstanceRoot() + File.separator + "config"+ File.separator+ "config.ldif";}  }
class C{  public static Thread start(long timeout){  return start(Thread.currentThread(),timeout);}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public AttributeFilter includeAllUserAttributes(final boolean include){  this.includeAllUserAttributes=include;  return this;}  }
class C{  private void printArgumentUsage(final Argument a,final StringBuilder buffer){  printLineForShortLongArgument(a,buffer);  final int indentLength=INDENT.length();  buffer.append(wrapText(a.getDescription(),MAX_LINE_WIDTH,indentLength));  buffer.append(EOL);  if (a.needsValue() && a.getDefaultValue() != null && a.getDefaultValue().length() > 0) {    buffer.append(INDENT);    buffer.append(INFO_ARGPARSER_USAGE_DEFAULT_VALUE.get(a.getDefaultValue()));    buffer.append(EOL);  }}  }
class C{  public FixedHolder(java.math.BigDecimal initial){  value=initial;}  }
class C{  private void updateSpanBottomParameters(){  spanBottomMin=spanBottom[0];  spanBottomMax=spanBottom[0];  for (int i=1; i < mSpanCount; i++) {    if (spanBottomMin > spanBottom[i])     spanBottomMin=spanBottom[i];    if (spanBottomMax < spanBottom[i])     spanBottomMax=spanBottom[i];  }  for (int i=0; i < mSpanCount; i++) {    if (spanBottom[i] == spanBottomMin) {      firstOneEmptyBottomSpanIndex=i;      break;    }  }  firstTwoEmptyBottomSpanIndex=-1;  for (int i=firstOneEmptyBottomSpanIndex; i < mSpanCount - 1; i++) {    if (spanBottom[i] == spanBottomMin && spanBottom[i + 1] == spanBottomMin) {      firstTwoEmptyBottomSpanIndex=i;      break;    }  }}  }
class C{  public boolean hasAllUserAttributes(){  return hasAttribute(ACI_USER_ATTR_STAR_MATCHED);}  }
class C{  public static void onHideSoftInput(Context context,View view){  if (view != null && view.getWindowToken() != null) {    InputMethodManager mInputMethodManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    mInputMethodManager.hideSoftInputFromWindow(view.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);  }}  }
class C{  public JsonValue correlate(Map<String,Object> scope,String linkQualifier,Context context,ReconciliationContext reconContext) throws SynchronizationException {  scope.put("linkQualifier",linkQualifier);  final long startNanoTime=ObjectMapping.startNanoTime(reconContext,type != CorrelationType.none);  try {switch (type) {case correlationQuery:      return json(queryTargetObjectSet(execScript(type.toString(),correlationQueries.get(linkQualifier),scope,context).asMap())).get(QueryResponse.FIELD_RESULT).required();case correlationScript:    return execScript(type.toString(),correlationScript,scope,context);default :  return null;}} catch (ScriptThrownException ste) {String errorMessage=objectMapping.getName() + " " + type+ " script encountered exception";LOGGER.debug(errorMessage,ste);throw new SynchronizationException(ste.toResourceException(ResourceException.INTERNAL_ERROR,errorMessage));}catch (ScriptException se) {LOGGER.debug("{} {} script encountered exception",objectMapping.getName(),type.toString(),se);throw new SynchronizationException(se);} finally {ObjectMapping.addDuration(reconContext,ReconciliationStatistic.DurationMetric.valueOf(type.toString()),startNanoTime);}}  }
class C{  private static Dimension createThumbDimension(final BufferedImage image,final int maxWidth,final int maxHeight){  Dimension dimension=new Dimension();  if (image.getWidth() >= image.getHeight()) {    if (image.getWidth() >= maxWidth) {      dimension.width=maxWidth;      dimension.height=Math.round(((float)maxWidth / image.getWidth()) * image.getHeight());    } else {      dimension.height=image.getHeight();      dimension.width=image.getWidth();    }  } else {    if (image.getHeight() >= maxHeight) {      dimension.height=maxHeight;      dimension.width=Math.round((((float)maxHeight / image.getHeight()) * image.getWidth()));    } else {      dimension.height=image.getHeight();      dimension.width=image.getWidth();    }  }  return dimension;}  }
class C{  public static void saveAsASCII(NSArray root,File out) throws IOException {  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toASCIIPropertyList());  w.close();}  }
class C{  public RMRealmModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  public CipherSuite cipherSuite(){  return cipherSuite;}  }
class C{  final public ColorModel coerceData(WritableRaster raster,boolean isAlphaPremultiplied){  if (!supportsAlpha || this.isAlphaPremultiplied() == isAlphaPremultiplied) {    return this;  }  int w=raster.getWidth();  int h=raster.getHeight();  int aIdx=numColorComponents;  float normAlpha;  float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));  int rminX=raster.getMinX();  int rY=raster.getMinY();  int rX;  int pixel[]=null;  int zpixel[]=null;  if (isAlphaPremultiplied) {switch (transferType) {case DataBuffer.TYPE_BYTE:{        for (int y=0; y < h; y++, rY++) {          rX=rminX;          for (int x=0; x < w; x++, rX++) {            pixel=raster.getPixel(rX,rY,pixel);            normAlpha=pixel[aIdx] * alphaScale;            if (normAlpha != 0.f) {              for (int c=0; c < aIdx; c++) {                pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);              }              raster.setPixel(rX,rY,pixel);            } else {              if (zpixel == null) {                zpixel=new int[numComponents];                java.util.Arrays.fill(zpixel,0);              }              raster.setPixel(rX,rY,zpixel);            }          }        }      }    break;case DataBuffer.TYPE_USHORT:{    for (int y=0; y < h; y++, rY++) {      rX=rminX;      for (int x=0; x < w; x++, rX++) {        pixel=raster.getPixel(rX,rY,pixel);        normAlpha=pixel[aIdx] * alphaScale;        if (normAlpha != 0.f) {          for (int c=0; c < aIdx; c++) {            pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);          }          raster.setPixel(rX,rY,pixel);        } else {          if (zpixel == null) {            zpixel=new int[numComponents];            java.util.Arrays.fill(zpixel,0);          }          raster.setPixel(rX,rY,zpixel);        }      }    }  }break;case DataBuffer.TYPE_INT:{for (int y=0; y < h; y++, rY++) {  rX=rminX;  for (int x=0; x < w; x++, rX++) {    pixel=raster.getPixel(rX,rY,pixel);    normAlpha=pixel[aIdx] * alphaScale;    if (normAlpha != 0.f) {      for (int c=0; c < aIdx; c++) {        pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);      }      raster.setPixel(rX,rY,pixel);    } else {      if (zpixel == null) {        zpixel=new int[numComponents];        java.util.Arrays.fill(zpixel,0);      }      raster.setPixel(rX,rY,zpixel);    }  }}}break;default :throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);}} else {switch (transferType) {case DataBuffer.TYPE_BYTE:{for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=raster.getPixel(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0.0f) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {  pixel[c]=(int)(pixel[c] * invAlpha + 0.5f);}raster.setPixel(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_USHORT:{for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=raster.getPixel(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(int)(pixel[c] * invAlpha + 0.5f);}raster.setPixel(rX,rY,pixel);}}}}break;case DataBuffer.TYPE_INT:{for (int y=0; y < h; y++, rY++) {rX=rminX;for (int x=0; x < w; x++, rX++) {pixel=raster.getPixel(rX,rY,pixel);normAlpha=pixel[aIdx] * alphaScale;if (normAlpha != 0) {float invAlpha=1.0f / normAlpha;for (int c=0; c < aIdx; c++) {pixel[c]=(int)(pixel[c] * invAlpha + 0.5f);}raster.setPixel(rX,rY,pixel);}}}}break;default :throw new UnsupportedOperationException("This method has not been " + "implemented for transferType " + transferType);}}return new DirectColorModel(colorSpace,pixel_bits,maskArray[0],maskArray[1],maskArray[2],maskArray[3],isAlphaPremultiplied,transferType);}  }
class C{  @Read(operationDescription=@Operation(description=APPLICATIONS_RESOURCE + READ_DESCRIPTION,errors={@ApiError(code=UNAUTHORIZED,description=APPLICATIONS_RESOURCE + ERROR_401_DESCRIPTION),@ApiError(code=NOT_FOUND,description=APPLICATIONS_RESOURCE + ERROR_404_DESCRIPTION)})) @Override public Promise<ResourceResponse,ResourceException> readInstance(Context context,String resourceId,ReadRequest request){  final Subject subject=getContextSubject(context);  if (subject == null) {    debug.error("ApplicationsResource :: READ : Unknown Subject");    return new BadRequestException().asPromise();  }  final String realm=getRealm(context);  try {    final Application application=appService(subject,realm).getApplication(resourceId);    if (application == null) {      throw new EntitlementException(EntitlementException.APP_RETRIEVAL_ERROR,realm);    }    ApplicationWrapper applicationWrapper=createApplicationWrapper(application,appTypeManagerWrapper);    return newResultPromise(newResourceResponse(resourceId,Long.toString(application.getLastModifiedDate()),applicationWrapper.toJsonValue()));  } catch (  EntitlementException e) {    debug.error("ApplicationsResource :: READ by {}: Application failed to retrieve the resource specified.",getPrincipalNameFromSubject(subject),e);    return exceptionMappingHandler.handleError(context,request,e).asPromise();  }}  }
class C{  private Component createTitlePanel(){  JPanel titlePanel=UIFactory.makeJPanel();  titlePanel.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=0.0;  gbc.gridwidth=GridBagConstraints.RELATIVE;  LocalizableMessage title=INFO_CERTIFICATE_TITLE.get();  JLabel l=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,title,UIFactory.TextStyle.TITLE);  l.setOpaque(false);  titlePanel.add(l,gbc);  gbc.gridwidth=GridBagConstraints.RELATIVE;  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.weightx=1.0;  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.insets.left=0;  gbc.weightx=1.0;  gbc.gridwidth=GridBagConstraints.REMAINDER;  titlePanel.add(Box.createHorizontalGlue(),gbc);  return titlePanel;}  }
class C{  public static QueryElement createQueryElement(List queryExpressions,String resourceID,boolean includeCommonAttr) throws JAXBException, IDPPException {  QueryElement query=idppFactory.createQueryElement();  if (queryExpressions == null || resourceID == null || queryExpressions.size() == 0) {    debug.error("IDPPUtils:createQueryElement: Either query" + " expressions or resource id is null.");    throw new IDPPException("ResourceID or query expressions are null");  }  query.setResourceID(createResourceIDElement(resourceID));  query.setId(SAMLUtils.generateID());  for (int i=0; i < queryExpressions.size(); i++) {    QueryType.QueryItemType item=idppFactory.createQueryTypeQueryItemType();    item.setId(SAMLUtils.generateID());    item.setIncludeCommonAttributes(includeCommonAttr);    item.setItemID(SAMLUtils.generateID());    item.setSelect(addIDPPPrefix((String)queryExpressions.get(i)));    query.getQueryItem().add(item);  }  return query;}  }
class C{  public org.omg.DynamicAny.DynAny current_component() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_component",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    return $self.current_component();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public void removeAccessibleSelection(int i){  List.this.deselect(i);}  }
class C{  public static boolean dnEquals(String dn1,String dn2){  DN dnObj1=DN.valueOf(dn1);  DN dnObj2=DN.valueOf(dn2);  return dnObj1.equals(dnObj2);}  }
class C{  Stylesheet popStylesheet(){  if (!m_stylesheetLocatorStack.isEmpty())   m_stylesheetLocatorStack.pop();  if (!m_stylesheets.isEmpty())   m_lastPoppedStylesheet=(Stylesheet)m_stylesheets.pop();  return m_lastPoppedStylesheet;}  }
class C{  private SchemaFactory _newFactory(String schemaLanguage){  SchemaFactory sf;  String propertyName=SERVICE_CLASS.getName() + ":" + schemaLanguage;  try {    if (debug)     debugPrintln("Looking up system property '" + propertyName + "'");    String r=System.getProperty(propertyName);    if (r != null && r.length() > 0) {      if (debug)       debugPrintln("The value is '" + r + "'");      sf=createInstance(r);      if (sf != null)       return sf;    } else     if (debug) {      debugPrintln("The property is undefined.");    }  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    if (debug) {      debugPrintln("failed to look up system property '" + propertyName + "'");      t.printStackTrace();    }  }  String javah=System.getProperty("java.home");  String configFile=javah + File.separator + "lib"+ File.separator+ "jaxp.properties";  String factoryClassName=null;  try {    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          File f=new File(configFile);          firstTime=false;          if (f.exists()) {            if (debug)             debugPrintln("Read properties file " + f);            cacheProps.load(new FileInputStream(f));          }        }      }    }    factoryClassName=cacheProps.getProperty(propertyName);    if (debug)     debugPrintln("found " + factoryClassName + " in $java.home/jaxp.properties");    if (factoryClassName != null) {      sf=createInstance(factoryClassName);      if (sf != null) {        return sf;      }    }  } catch (  Exception ex) {    if (debug) {      ex.printStackTrace();    }  }  for (  URL resource : createServiceFileIterator()) {    if (debug)     debugPrintln("looking into " + resource);    try {      sf=loadFromServicesFile(schemaLanguage,resource.toExternalForm(),resource.openStream());      if (sf != null)       return sf;    } catch (    IOException e) {      if (debug) {        debugPrintln("failed to read " + resource);        e.printStackTrace();      }    }  }  if (schemaLanguage.equals(XMLConstants.W3C_XML_SCHEMA_NS_URI) || schemaLanguage.equals(W3C_XML_SCHEMA10_NS_URI)) {    if (debug)     debugPrintln("attempting to use the platform default XML Schema 1.0 validator");    return createInstance("org.apache.xerces.jaxp.validation.XMLSchemaFactory");  } else   if (schemaLanguage.equals(W3C_XML_SCHEMA11_NS_URI)) {    if (debug)     debugPrintln("attempting to use the platform default XML Schema 1.1 validator");    return createInstance("org.apache.xerces.jaxp.validation.XMLSchema11Factory");  }  if (debug)   debugPrintln("all things were tried, but none was found. bailing out.");  return null;}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("LDAP client connection from ");  buffer.append(clientAddress);  buffer.append(":");  buffer.append(clientPort);  buffer.append(" to ");  buffer.append(serverAddress);  buffer.append(":");  buffer.append(serverPort);}  }
class C{  public Response createResponse(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.RESPONSE,xml);  if (obj == null) {    return new ResponseImpl(xml);  } else {    return (Response)obj;  }}  }
class C{  public static URI toURI(URL url){  if (url == null)   throw new NullPointerException("`url' must not be null");  try {    String protocol=url.getProtocol();    if ("file".equals(protocol)) {      return new File(url.getFile()).toURI();    } else     if ("jar".equals(protocol)) {      String cleaned=url.toExternalForm().replaceAll("^jar:file:([a-zA-Z]+):","jar:file:///$1:").replace("\\","/");      return URI.create(cleaned);    }    return url.toURI();  } catch (  URISyntaxException e) {    throw new IllegalArgumentException("parsing " + url,e);  }}  }
class C{  public static void closeInputmethod(IBinder binder,Context context){  InputMethodManager inputMethodManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  if (inputMethodManager.isActive()) {    inputMethodManager.hideSoftInputFromWindow(binder,InputMethodManager.HIDE_NOT_ALWAYS);  }}  }
class C{  public final void testIsRevocationEnabled() throws Exception {  Set<TrustAnchor> taSet=TestUtils.getTrustAnchorSet();  if (taSet == null) {    fail(getName() + ": not performed (could not create test TrustAnchor set)");  }  PKIXParameters p=new PKIXParameters(taSet);  assertTrue(p.isRevocationEnabled());  CertificateFactory cf=CertificateFactory.getInstance("X.509");  TestUtils.initCertPathSSCertChain();  Set<TrustAnchor> taSet2=Collections.singleton(new TrustAnchor(TestUtils.rootCertificateSS,null));  p=new PKIXParameters(taSet2);  assertTrue(p.isRevocationEnabled());  p.setRevocationEnabled(false);  assertFalse(p.isRevocationEnabled());}  }
class C{  public void insertElementAt(Node value,int at){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null == m_map) {    m_map=new Node[m_blocksize];    m_mapSize=m_blocksize;  } else   if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Node newMap[]=new Node[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  @Override public void repaint(Rectangle r){}  }
class C{  protected String replace(String str){  String result=str;  int pos_start=str.indexOf("${");  if (pos_start >= 0) {    StringBuilder builder=new StringBuilder();    int pos_end=-1;    while (pos_start >= 0) {      builder.append(str,pos_end + 1,pos_start);      pos_end=str.indexOf('}',pos_start + 2);      if (pos_end < 0) {        pos_end=pos_start - 1;        break;      }      String propName=str.substring(pos_start + 2,pos_end);      String replacement;      if (propName.length() == 0) {        replacement=null;      } else       if (Globals.CATALINA_HOME_PROP.equals(propName)) {        replacement=getCatalinaHome();      } else       if (Globals.CATALINA_BASE_PROP.equals(propName)) {        replacement=getCatalinaBase();      } else {        replacement=System.getProperty(propName);      }      if (replacement != null) {        builder.append(replacement);      } else {        builder.append(str,pos_start,pos_end + 1);      }      pos_start=str.indexOf("${",pos_end + 1);    }    builder.append(str,pos_end + 1,str.length());    result=builder.toString();  }  return result;}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  DoneMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  final byte msgType=scanner.nextByte();  if (msgType != MSG_TYPE_DONE) {    throw new DataFormatException("input is not a valid DoneMessage");  }  this.senderID=scanner.nextIntUTF8();  this.destination=scanner.nextIntUTF8();}  }
class C{  public void handleTblDataActionDefaultHrefRequest(RequestInvocationEvent event){  String name=(String)getDisplayFieldValue(TBL_DATA_ACTION_DEFAULT_HREF);  deleteDevice(name,"clientDetection.client.defaulted.message");  forwardTo();}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  String nsDeclaration="";  String nsPrefix="";  if (declareNS) {    nsDeclaration=XACMLConstants.CONTEXT_NS_DECLARATION;  }  if (includeNSPrefix) {    nsPrefix=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  sb.append("<").append(nsPrefix).append(XACMLConstants.STATUS_MESSAGE).append(nsDeclaration).append(">").append(value).append("</").append(nsPrefix).append(XACMLConstants.STATUS_MESSAGE).append(">\n");  return sb.toString();}  }
class C{  public SAXException(){  super();  this.exception=null;}  }
class C{  public static boolean isFmSuspendSupport(){  return IS_FM_SUSPEND_SUPPORT;}  }
class C{  public void testAbsNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  String result="123809648392384754573567356745735635678902957849027687.87678287";  assertEquals("incorrect value",result,aNumber.abs().toString());}  }
class C{  @Override public LocalDate dateYearDay(Era era,int yearOfEra,int dayOfYear){  return dateYearDay(prolepticYear(era,yearOfEra),dayOfYear);}  }
class C{  public boolean equal(org.omg.DynamicAny.DynAny dyn_any){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("equal",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.equal(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void refresh(){  small_cursor_checkbox.setSelected(!panel.is_cross_hair_cursor());  big_cursor_checkbox.setSelected(panel.is_cross_hair_cursor());  int ninety_degree_rotation=panel.itera_board.gdi_context.coordinate_transform.get_90_degree_rotation();  if (ninety_degree_rotation == 0) {    rotation_none_checkbox.setSelected(true);  } else   if (ninety_degree_rotation == 1) {    rotation_90_degree_checkbox.setSelected(true);  } else   if (ninety_degree_rotation == 2) {    rotation_180_degree_checkbox.setSelected(true);  } else   if (ninety_degree_rotation == 3) {    rotation_270_degree_checkbox.setSelected(true);  } else {    System.out.println("DisplayMiscWindow: unexpected ninety_degree_rotation");    rotation_none_checkbox.setSelected(true);  }  boolean is_mirror_left_right=panel.itera_board.gdi_context.coordinate_transform.is_mirror_left_right();  boolean is_mirror_top_button=panel.itera_board.gdi_context.coordinate_transform.is_mirror_top_bottom();  mirror_none_checkbox.setSelected(!(is_mirror_left_right || is_mirror_top_button));  vertical_mirror_checkbox.setSelected(panel.itera_board.gdi_context.coordinate_transform.is_mirror_left_right());  horizontal_mirror_checkbox.setSelected(panel.itera_board.gdi_context.coordinate_transform.is_mirror_top_bottom());  int curr_slider_value=(int)Math.round(MAX_SLIDER_VALUE * (1 - panel.itera_board.gdi_context.get_auto_layer_dim_factor()));  auto_layer_dim_slider.setValue(curr_slider_value);}  }
class C{  public TypeConstraintException(String message,String errorCode){  this(message,errorCode,null);}  }
class C{  public boolean isStatusAttribute(){  return (as.isStatusAttribute());}  }
class C{  public GroupSubject(String group,String pSubjectName){  super(group,pSubjectName);}  }
class C{  private static String encode(byte[] binaryData){  if (binaryData.length != 16) {    return null;  }  char[] buffer=new char[32];  for (int i=0; i < 16; i++) {    int low=(binaryData[i] & 0x0f);    int high=((binaryData[i] & 0xf0) >> 4);    buffer[i * 2]=HEXADECIMAL[high];    buffer[(i * 2) + 1]=HEXADECIMAL[low];  }  return new String(buffer);}  }
class C{  public RouteSpecificPool(HttpRoute route,int maxEntries){  this.route=route;  this.maxEntries=maxEntries;  this.freeEntries=new LinkedList<BasicPoolEntry>();  this.waitingThreads=new LinkedList<WaitingThread>();  this.numEntries=0;}  }
class C{  public ReplyToHeader createReplyToHeader(Address address){  if (address == null)   throw new NullPointerException("null address");  ReplyTo replyTo=new ReplyTo();  replyTo.setAddress(address);  return replyTo;}  }
class C{  protected ClassNode classFromLine(String line){  String[] split=line.trim().split(" ");  String s=split[1];  int dotIndex=s.indexOf(".");  String classStr=s;  if (dotIndex != -1) {    classStr=s.substring(0,dotIndex);  }  return nodes.get(classStr);}  }
class C{  public void completeBranchInitialization(Map<String,Template> templates) throws MakeLDIFException {  if (subordinateTemplateNames == null) {    subordinateTemplateNames=new String[0];    subordinateTemplates=new Template[0];  } else {    subordinateTemplates=new Template[subordinateTemplateNames.length];    for (int i=0; i < subordinateTemplates.length; i++) {      subordinateTemplates[i]=templates.get(toLowerCase(subordinateTemplateNames[i]));      if (subordinateTemplates[i] == null) {        throw new MakeLDIFException(ERR_MAKELDIF_UNDEFINED_BRANCH_SUBORDINATE.get(branchDN,subordinateTemplateNames[i]));      }    }  }}  }
class C{  protected void checkUnboundPrefixInEntRef(Node node){  Node child, next;  for (child=node.getFirstChild(); child != null; child=next) {    next=child.getNextSibling();    if (child.getNodeType() == Node.ELEMENT_NODE) {      String prefix=child.getPrefix();      if (prefix != null && fNSBinder.getURI(prefix) == null) {        String msg=Utils.messages.createMessage(MsgKey.ER_ELEM_UNBOUND_PREFIX_IN_ENTREF,new Object[]{node.getNodeName(),child.getNodeName(),prefix});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_ELEM_UNBOUND_PREFIX_IN_ENTREF,null,null,null));        }      }      NamedNodeMap attrs=child.getAttributes();      for (int i=0; i < attrs.getLength(); i++) {        String attrPrefix=attrs.item(i).getPrefix();        if (attrPrefix != null && fNSBinder.getURI(attrPrefix) == null) {          String msg=Utils.messages.createMessage(MsgKey.ER_ATTR_UNBOUND_PREFIX_IN_ENTREF,new Object[]{node.getNodeName(),child.getNodeName(),attrs.item(i)});          if (fErrorHandler != null) {            fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_ATTR_UNBOUND_PREFIX_IN_ENTREF,null,null,null));          }        }      }    }    if (child.hasChildNodes()) {      checkUnboundPrefixInEntRef(child);    }  }}  }
class C{  public void testCipherSpi05() throws ShortBufferException {  Mock_CipherSpi cSpi=new Mock_CipherSpi();  byte[] bb={(byte)0,(byte)1,(byte)2,(byte)3,(byte)4,(byte)5,(byte)6,(byte)7,(byte)8,(byte)9,(byte)10};  int pos=5;  int len=bb.length;  ByteBuffer bbNull=null;  ByteBuffer bb1=ByteBuffer.allocate(len);  bb1.put(bb);  bb1.position(0);  try {    cSpi.engineUpdate(bbNull,bb1);    fail("NullPointerException must be thrown");  } catch (  NullPointerException e) {  }  try {    cSpi.engineUpdate(bb1,bbNull);    fail("NullPointerException must be thrown");  } catch (  NullPointerException e) {  }  ByteBuffer bb2=ByteBuffer.allocate(bb.length);  bb1.position(len);  assertEquals("Incorrect number of stored bytes",0,cSpi.engineUpdate(bb1,bb2));  bb1.position(0);  bb2.position(len - 2);  try {    cSpi.engineUpdate(bb1,bb2);    fail("ShortBufferException bust be thrown. Output buffer remaining: ".concat(Integer.toString(bb2.remaining())));  } catch (  ShortBufferException e) {  }  bb1.position(10);  bb2.position(0);  assertTrue("Incorrect number of stored bytes",cSpi.engineUpdate(bb1,bb2) > 0);  bb1.position(bb.length);  cSpi.engineUpdate(bb1,bb2);  bb1.position(pos);  bb2.position(0);  int res=cSpi.engineUpdate(bb1,bb2);  assertTrue("Incorrect result",res > 0);}  }
class C{  public void test_setSubjectPublicKeyLjava_security_PublicKey() throws Exception {  PublicKey pkey1=new TestKeyPair("RSA").getPublic();  PublicKey pkey2=new TestKeyPair("DSA").getPublic();  TestCert cert1=new TestCert(pkey1);  TestCert cert2=new TestCert(pkey2);  X509CertSelector selector=new X509CertSelector();  selector.setSubjectPublicKey((PublicKey)null);  assertTrue("Any certificate should match in the case of null " + "subjectPublicKey criteria.",selector.match(cert1) && selector.match(cert2));  selector.setSubjectPublicKey(pkey1);  assertTrue("The certificate should match the selection criteria.",selector.match(cert1));  assertFalse("The certificate should not match the selection criteria.",selector.match(cert2));  selector.setSubjectPublicKey(pkey2);  assertTrue("The certificate should match the selection criteria.",selector.match(cert2));}  }
class C{  private void initialize_windows(){  allocate_permanent_subwindows();  work_frame.setLocation(120,0);  select_parameter_window.setLocation(0,0);  select_parameter_window.setVisible(true);  route_parameter_window.setLocation(0,100);  autoroute_parameter_window.setLocation(0,200);  move_parameter_window.setLocation(0,50);  clearance_matrix_window.setLocation(0,150);  via_window.setLocation(50,150);  edit_vias_window.setLocation(100,150);  edit_net_rules_window.setLocation(100,200);  assign_net_classes_window.setLocation(100,250);  padstacks_window.setLocation(100,30);  packages_window.setLocation(200,30);  components_window.setLocation(300,30);  incompletes_window.setLocation(400,30);  clearance_violations_window.setLocation(500,30);  length_violations_window.setLocation(550,30);  net_info_window.setLocation(350,30);  unconnected_route_window.setLocation(650,30);  route_stubs_window.setLocation(600,30);  window_beanshell.setLocation(0,250);  layer_visibility_window.setLocation(0,450);  object_visibility_window.setLocation(0,550);  display_misc_window.setLocation(0,350);  color_manager.setLocation(0,600);  about_window.setLocation(200,200);}  }
class C{  @Override public boolean equals(Object obj){  return (obj == this);}  }
class C{  private GeneralMonitoringRightPanel createBrowserRightPanel(){  return new GeneralMonitoringRightPanel();}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  impl=new NameImpl(null);  int n=s.readInt();  try {    while (--n >= 0) {      add((String)s.readObject());    }  } catch (  InvalidNameException e) {    throw (new java.io.StreamCorruptedException("Invalid name"));  }}  }
class C{  void unassignService(String serviceName) throws SMSException {  try {    if (getAssignedServices().contains(serviceName)) {      parentOrg.unregisterService(serviceName);    }  } catch (  AMException ame) {    if (debug.messageEnabled()) {      debug.message("OrgConfigViaAMSDK::unassignService" + ": failed with AMException",ame);    }    throw (new SMSException(AMSDKBundle.BUNDLE_NAME,ame.getMessage(),ame,ame.getMessage()));  }catch (  SSOException ssoe) {    throw (new SMSException(bundle.getString("sms-INVALID_SSO_TOKEN"),ssoe,"sms-INVALID_SSO_TOKEN"));  }}  }
class C{  private void initializeAllExtensions(final File extensionsPath) throws ConfigException {  try {    if (!extensionsPath.exists()) {      adminLogger.warn(WARN_ADMIN_NO_EXTENSIONS_DIR,extensionsPath);      return;    }    if (!extensionsPath.isDirectory()) {      throw new ConfigException(ERR_ADMIN_EXTENSIONS_DIR_NOT_DIRECTORY.get(extensionsPath));    }    addExtension(listFiles(extensionsPath));  } catch (  final ConfigException e) {    debugLogger.trace("Unable to initialize all extensions",e);    throw e;  }catch (  final Exception e) {    debugLogger.trace("Unable to initialize all extensions",e);    final LocalizableMessage message=ERR_ADMIN_EXTENSIONS_CANNOT_LIST_FILES.get(extensionsPath,stackTraceToSingleLineString(e,true));    throw new ConfigException(message,e);  }}  }
class C{  public synchronized <T extends EventListener>void add(Class<T> t,T l){  if (l == null) {    return;  }  if (!t.isInstance(l)) {    throw new IllegalArgumentException("Listener " + l + " is not of type "+ t);  }  if (listenerList == NULL_ARRAY) {    listenerList=new Object[]{t,l};  } else {    int i=listenerList.length;    Object[] tmp=new Object[i + 2];    System.arraycopy(listenerList,0,tmp,0,i);    tmp[i]=t;    tmp[i + 1]=l;    listenerList=tmp;  }}  }
class C{  public Value parseValueFromObject(Object o) throws SyntaxException {  if (o instanceof Integer) {    return new IntValue((Integer)o);  } else   if (o instanceof Long) {    return new LongValue((Long)o);  } else   if (o instanceof Character) {    return new CharValue((Character)o);  } else   if (o instanceof Short) {    return new ShortValue((Short)o);  } else   if (o instanceof Byte) {    return new ByteValue((Byte)o);  } else   if (o instanceof Boolean) {    return new BoolValue((Boolean)o);  } else   if (o instanceof Float) {    return new FloatValue((Float)o);  } else   if (o instanceof Double) {    return new DoubleValue((Double)o);  } else   if (o instanceof String) {    StringConstantValue v=new StringConstantValue((String)o);    v.setType((SClassDef)getTypeWithName("java.lang.String",LineCol.SYNTHETIC));    return v;  } else   if (o.getClass().isEnum()) {    EnumValue e=new EnumValue();    e.setType(getTypeWithName(o.getClass().getName(),LineCol.SYNTHETIC));    e.setEnumStr(o.toString());    return e;  } else   if (o instanceof Class) {    return new Ins.GetClass(getTypeWithName(((Class)o).getName(),LineCol.SYNTHETIC),(SClassDef)getTypeWithName("java.lang.Class",LineCol.SYNTHETIC));  } else   if (o instanceof Annotation) {    SAnno a=new SAnno();    Class<?> annoCls=o.getClass().getInterfaces()[0];    a.setAnnoDef((SAnnoDef)getTypeWithName(annoCls.getName(),LineCol.SYNTHETIC));    Map<SAnnoField,Value> map=new HashMap<>();    for (    SAnnoField f : a.type().annoFields()) {      try {        Object obj=annoCls.getMethod(f.name()).invoke(o);        Value v=parseValueFromObject(obj);        v=checkAndCastAnnotationValues(v,LineCol.SYNTHETIC);        map.put(f,v);      } catch (      IllegalAccessException|NoSuchMethodException|InvocationTargetException e) {        throw new LtBug(e);      }    }    a.values().putAll(map);    return a;  } else   if (o.getClass().isArray()) {    assert !o.getClass().getComponentType().isArray();    SArrayValue arr=new SArrayValue();    int length=Array.getLength(o);    Value[] values=new Value[length];    for (int i=0; i < length; ++i) {      Object elem=Array.get(o,i);      Value v=parseValueFromObject(elem);      values[i]=v;    }    arr.setType((SArrayTypeDef)getTypeWithName(o.getClass().getName(),LineCol.SYNTHETIC));    arr.setDimension(1);    arr.setValues(values);    return arr;  } else   throw new LtBug("cannot parse " + o + " into Value");}  }
class C{  @SuppressWarnings("rawtypes") public Promise<ConfigAuditState,ResourceException> delete(ResourcePath resourcePath,String rev){  logger.debug("Invoking delete configuration {} {}",resourcePath.toString(),rev);  if (resourcePath.isEmpty()) {    return new BadRequestException("The passed identifier to delete is null").asPromise();  }  try {    ParsedId parsedId=new ParsedId(resourcePath);    Configuration config=findExistingConfiguration(parsedId);    if (config == null) {      return new NotFoundException("No existing configuration found for " + resourcePath.toString() + ", can not delete the configuration.").asPromise();    }    Dictionary<String,Object> existingConfig=config.getProperties();    JsonValue value=enhancedConfig.getConfiguration(existingConfig,resourcePath.toString(),false);    if (existingConfig == null) {      return new NotFoundException("No existing configuration found for " + resourcePath.toString() + ", can not delete the configuration.").asPromise();    }    config.delete();    logger.debug("Deleted configuration for {}",resourcePath.toString());    return newResultPromise(new ConfigAuditState(resourcePath.toString(),value.get(ResourceResponse.FIELD_CONTENT_REVISION).asString(),value,null));  } catch (  ResourceException ex) {    return ex.asPromise();  }catch (  Exception ex) {    logger.warn("Failure to delete configuration for {}",resourcePath.toString(),ex);    return new InternalServerErrorException("Failure to delete configuration for " + resourcePath.toString() + ": "+ ex.getMessage(),ex).asPromise();  }}  }
class C{  public CreateCOTViewBean(){  super("CreateCOT");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public void recycle(){  jspConfig.isJspConfigSet=false;  sessionConfig.isSessionConfigSet=false;  loginConfig.isLoginConfigSet=false;  name.isNameSet=false;  absoluteOrdering.isAbsoluteOrderingSet=false;  relativeOrdering.isRelativeOrderingSet=false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementreplaceexistingattribute.class,args);}  }
class C{  public final void testGetModulus(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getModulus()));}  }
class C{  protected MouseInputAdapter createBorderListener(JInternalFrame w){  return new BorderListener1();}  }
class C{  private static String buildSignedResponse(String retURL,String bArgStatus,int minorVersion,BaseConfigType hostedConfig,String hostedEntityId,String userID){  try {    String inResponseTo="";    String logoutStatus="";    String relayState="";    FSLogoutResponse responseLogout=new FSLogoutResponse();    responseLogout.setID(IFSConstants.LOGOUTID);    if (userID != null) {      FSReturnSessionManager mngInst=FSReturnSessionManager.getInstance(hostedConfig.getMetaAlias());      HashMap providerMap=new HashMap();      if (mngInst != null) {        providerMap=mngInst.getUserProviderInfo(userID);      }      if (providerMap != null) {        inResponseTo=(String)providerMap.get(IFSConstants.RESPONSE_TO);        relayState=(String)providerMap.get(IFSConstants.LOGOUT_RELAY_STATE);        logoutStatus=(String)providerMap.get(IFSConstants.LOGOUT_STATUS);        inResponseTo=(String)providerMap.get(IFSConstants.RESPONSE_TO);        mngInst.removeUserProviderInfo(userID);        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Deleted " + userID + " from return list");        }        responseLogout.setResponseTo(inResponseTo);        responseLogout.setRelayState(relayState);        responseLogout.setProviderId(hostedEntityId);        responseLogout.setStatus(logoutStatus);      } else {        responseLogout.setStatus(bArgStatus);        responseLogout.setProviderId(hostedEntityId);      }    } else {      responseLogout.setStatus(bArgStatus);      responseLogout.setProviderId(hostedEntityId);    }    responseLogout.setMinorVersion(minorVersion);    String urlEncodedResponse=responseLogout.toURLEncodedQueryString();    if (FSServiceUtils.isSigningOn()) {      String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);      if (certAlias == null || certAlias.length() == 0) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSLogoutUtil::buildSignedResponse:" + "couldn't obtain this site's cert alias.");        }        throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));      }      urlEncodedResponse=FSSignatureUtil.signAndReturnQueryString(urlEncodedResponse,certAlias);    }    StringBuffer redirectURL=new StringBuffer();    redirectURL.append(retURL);    if (retURL.indexOf(IFSConstants.QUESTION_MARK) == -1) {      redirectURL.append(IFSConstants.QUESTION_MARK);    } else {      redirectURL.append(IFSConstants.AMPERSAND);    }    redirectURL.append(urlEncodedResponse);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLogoutUtil : Response to be sent : " + redirectURL.toString());    }    return redirectURL.toString();  } catch (  Exception e) {    return null;  }}  }
class C{  public static InstructionFragment newInstance(Recipe recipe,int sectionNumber){  InstructionFragment fragment=new InstructionFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean isCookieTimeToLiveEnabled(){  if (DEBUG.messageEnabled()) {    DEBUG.message("LoginState.isCookieTimeToLiveEnabled(): enabled=" + cookieTimeToLiveEnabledFlag);  }  return cookieTimeToLiveEnabledFlag;}  }
class C{  MigrationReport(String policyName){  this.policyName=policyName;}  }
class C{  public boolean isVisible(){  return false;}  }
class C{  void cleanupParameters(String relayState){  if (debug.messageEnabled()) {    debug.message("SingleLogoutManager.cleanupParameters:" + " new relayState=" + relayState);  }  relayStateMap.remove(relayState);  userSessionMap.remove(relayState);  userIDMap.remove(relayState);  isSOAPInitiatedMap.remove(relayState);  isSOAPInitiatedMap.remove(relayState);  isIDPInitiatedMap.remove(relayState);  origProtocolMap.remove(relayState);  protocolListMap.remove(relayState);  realmMap.remove(relayState);  idpEntityIDMap.remove(relayState);  spEntityIDMap.remove(relayState);  sloRequestXMLMap.remove(relayState);  sloResponseXMLMap.remove(relayState);  currentStatusMap.remove(relayState);}  }
class C{  public static String convertGenericToID3v24Genre(String value){  try {    int genreId=Integer.parseInt(value);    if (genreId < GenreTypes.getMaxGenreId()) {      return String.valueOf(genreId);    } else {      return value;    }  } catch (  NumberFormatException nfe) {    Integer genreId=GenreTypes.getInstanceOf().getIdForName(value);    if (genreId != null) {      return String.valueOf(genreId);    }    if (value.equalsIgnoreCase(ID3V2ExtendedGenreTypes.RX.getDescription())) {      value=ID3V2ExtendedGenreTypes.RX.name();    } else     if (value.equalsIgnoreCase(ID3V2ExtendedGenreTypes.CR.getDescription())) {      value=ID3V2ExtendedGenreTypes.CR.name();    } else     if (value.equalsIgnoreCase(ID3V2ExtendedGenreTypes.RX.name())) {      value=ID3V2ExtendedGenreTypes.RX.name();    } else     if (value.equalsIgnoreCase(ID3V2ExtendedGenreTypes.CR.name())) {      value=ID3V2ExtendedGenreTypes.CR.name();    }  }  return value;}  }
class C{  public boolean isKbaEnabled(){  return kbaEnabled;}  }
class C{  public PdfCanvas newPath(){  contentStream.getOutputStream().writeBytes(n);  return this;}  }
class C{  @Override public void cacheResult(List<Foo> foos){  for (  Foo foo : foos) {    if (entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey()) == null) {      cacheResult(foo);    } else {      foo.resetOriginalValues();    }  }}  }
class C{  public ElemTemplateElement removeChild(ElemTemplateElement childETE){  if (childETE == null || childETE.m_parentNode != this)   return null;  if (childETE == m_firstChild)   m_firstChild=childETE.m_nextSibling; else {    ElemTemplateElement prev=childETE.getPreviousSiblingElem();    prev.m_nextSibling=childETE.m_nextSibling;  }  childETE.m_parentNode=null;  childETE.m_nextSibling=null;  return childETE;}  }
class C{  public void selectAllAccessibleSelection(){synchronized (List.this) {    for (int i=List.this.getItemCount() - 1; i >= 0; i--) {      List.this.select(i);    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof AbstractChronology) {    return compareTo((AbstractChronology)obj) == 0;  }  return false;}  }
class C{  private static String toString(int[] ints){  StringBuilder sb=new StringBuilder("[");  for (int i=0; i < ints.length; i++) {    if (i != 0) {      sb.append(",");    }    sb.append(ints[i]);  }  sb.append("]");  return sb.toString();}  }
class C{  public static boolean isErrorLoggable(Level level){  if (logger == null) {    return false;  } else {    return logger.isErrorLoggable(level);  }}  }
class C{  public AuthnRequest createAuthnRequest(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_REQUEST,value);  if (obj == null) {    return new AuthnRequestImpl(value);  } else {    return (AuthnRequest)obj;  }}  }
class C{  @Deprecated public JavaPluginLoader(Server instance){  Validate.notNull(instance,"Server cannot be null");  server=instance;}  }
class C{  public ModelMBeanOperationInfo(String name,String description,MBeanParameterInfo[] signature,String type,int impact,Descriptor descriptor){  super(name,description,signature,type,impact);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),"ModelMBeanOperationInfo(String,String," + "MBeanParameterInfo[],String,int,Descriptor)","Entry");  }  operationDescriptor=validDescriptor(descriptor);}  }
class C{  public void readAndExecute(LDAPConnection connection,Reader reader,LDAPDeleteOptions deleteOptions) throws IOException, LDAPException {  BufferedReader in=new BufferedReader(reader);  String line=null;  while ((line=in.readLine()) != null) {    executeDelete(connection,line,deleteOptions);  }  in.close();}  }
class C{  @Override protected byte[] encrypt(byte type,byte[] fragment,int offset,int len){  try {    int content_mac_length=len + hash_size;    int padding_length=(block_size == 0) ? 0 : getPaddingSize(++content_mac_length);    byte[] res=new byte[content_mac_length + padding_length];    System.arraycopy(fragment,offset,res,0,len);    mac_material_part[0]=type;    mac_material_part[1]=(byte)((0x00FF00 & len) >> 8);    mac_material_part[2]=(byte)(0x0000FF & len);    messageDigest.update(mac_write_secret);    messageDigest.update(pad_1);    messageDigest.update(write_seq_num);    messageDigest.update(mac_material_part);    messageDigest.update(fragment,offset,len);    byte[] digest=messageDigest.digest();    messageDigest.update(mac_write_secret);    messageDigest.update(pad_2);    messageDigest.update(digest);    digest=messageDigest.digest();    System.arraycopy(digest,0,res,len,hash_size);    if (block_size != 0) {      Arrays.fill(res,content_mac_length - 1,res.length,(byte)(padding_length));    }    if (logger != null) {      logger.println("SSLRecordProtocol.encrypt: " + (block_size != 0 ? "GenericBlockCipher with padding[" + padding_length + "]:" : "GenericStreamCipher:"));      logger.print(res);    }    byte[] rez=new byte[encCipher.getOutputSize(res.length)];    encCipher.update(res,0,res.length,rez);    incSequenceNumber(write_seq_num);    return rez;  } catch (  GeneralSecurityException e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during the encryption"));  }}  }
class C{  static void loadActionMap(LazyActionMap map){  map.put(new Actions(Actions.TOGGLE_SORT_ORDER));  map.put(new Actions(Actions.SELECT_COLUMN_TO_LEFT));  map.put(new Actions(Actions.SELECT_COLUMN_TO_RIGHT));  map.put(new Actions(Actions.MOVE_COLUMN_LEFT));  map.put(new Actions(Actions.MOVE_COLUMN_RIGHT));  map.put(new Actions(Actions.RESIZE_LEFT));  map.put(new Actions(Actions.RESIZE_RIGHT));  map.put(new Actions(Actions.FOCUS_TABLE));}  }
class C{  public FrameBodyTPUB(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  @Deprecated public MapCursor(byte x,byte y,byte direction,byte type,boolean visible){  this.x=x;  this.y=y;  setDirection(direction);  setRawType(type);  this.visible=visible;}  }
class C{  public BindOperation processSimpleBind(DN bindDN,ByteString password){  return processSimpleBind(bindDN,password,null);}  }
class C{  protected Container createButtonArea(){  JPanel bottom=new JPanel();  Border border=(Border)DefaultLookup.get(optionPane,this,"OptionPane.buttonAreaBorder");  bottom.setName("OptionPane.buttonArea");  if (border != null) {    bottom.setBorder(border);  }  bottom.setLayout(new ButtonAreaLayout(DefaultLookup.getBoolean(optionPane,this,"OptionPane.sameSizeButtons",true),DefaultLookup.getInt(optionPane,this,"OptionPane.buttonPadding",6),DefaultLookup.getInt(optionPane,this,"OptionPane.buttonOrientation",SwingConstants.CENTER),DefaultLookup.getBoolean(optionPane,this,"OptionPane.isYesLast",false)));  addButtonComponents(bottom,getButtons(),getInitialValueIndex());  return bottom;}  }
class C{  public UnmodifiableSetException(){}  }
class C{  public LocalBackendCompareOperation(CompareOperation compare){  super(compare);  LocalBackendWorkflowElement.attachLocalOperation(compare,this);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namespaceURI04.class,args);}  }
class C{  protected void layoutColumns(int targetSpan,int[] offsets,int[] spans,SizeRequirements[] reqs){  Arrays.fill(offsets,0);  Arrays.fill(spans,0);  colIterator.setLayoutArrays(offsets,spans,targetSpan);  CSS.calculateTiledLayout(colIterator,targetSpan);}  }
class C{  private void alignAboveBaseline(GridBagConstraints cons,Rectangle r,int cellY,int cellHeight){  if (layoutInfo.hasBaseline(cons.tempY)) {    int maxY;    if (layoutInfo.hasConstantDescent(cons.tempY)) {      maxY=cellY + cellHeight - layoutInfo.maxDescent[cons.tempY];    } else {      maxY=cellY + layoutInfo.maxAscent[cons.tempY];    }    if (cons.isVerticallyResizable()) {      r.y=cellY + cons.insets.top;      r.height=maxY - r.y;    } else {      r.height=cons.minHeight + cons.ipady;      r.y=maxY - r.height;    }  } else {    centerVertically(cons,r,cellHeight);  }}  }
class C{  private Base64(){}  }
class C{  public boolean isCanceled(){  return isCanceled;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(300);  sb.append("<ResourceID xmlns=\"").append(DiscoConstants.DISCO_NS).append("\"");  if ((id != null) && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  sb.append(">");  if (resourceID != null) {    sb.append(resourceID);  }  sb.append("</ResourceID>");  return sb.toString();}  }
class C{  public boolean isWorseThan(final Problem other){  return other == null ? true : compareTo(other) > 0;}  }
class C{  boolean takeIndexWrapped(){  if (isDetached())   return true;  if (itrs.cycles - prevCycles > 1) {    shutdown();    return true;  }  return false;}  }
class C{  public NumberFormatException(String s){  super(s);}  }
class C{  public DeviceJsonUtils(Class<T> classType){  this.classType=classType;}  }
class C{  public void trimToSize(){  delegate.trimToSize();}  }
class C{  private static <T>int countRunAndMakeAscending(T[] a,int lo,int hi,Comparator<? super T> c){  assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (c.compare(a[runHi++],a[lo]) < 0) {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  Attr attribute2;  EntityReference entRef;  NodeList elementList;  Node newAttribute;  Node newChild;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test","elem1");  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Test","attr");  entRef=doc.createEntityReference("ent4");  newChild=attribute.appendChild(entRef);  newAttribute=element.setAttributeNodeNS(attribute);  elementList=entRef.getChildNodes();  element=(Element)elementList.item(0);  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Test","attr2");{    boolean success=false;    try {      newAttribute=element.setAttributeNodeNS(attribute2);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("elementsetattributenodens06",success);  }}  }
class C{  static String createFilter(String providerID,String nameID){  String str=FED_INFO_DELIM + providerID + FED_INFO_DELIM+ nameID+ FED_INFO_DELIM;  return str;}  }
class C{  private UIKeyStore(){  super(null,null,null);}  }
class C{  @Override public boolean isStretchWidth(){  return true;}  }
class C{  public boolean validate(String telephone){  char aChar;  StringBuilder buf=new StringBuilder(telephone);  for (int aIndex=0; aIndex < buf.length(); aIndex++) {    aChar=buf.charAt(aIndex);    if (!Character.isSpaceChar(aChar)) {      if (!Character.isDigit(aChar) && !isValidTelephoneChars(aChar)) {        return false;      }    }  }  return true;}  }
class C{  private long calcChecksum(String filename) throws Exception {  return calcChecksum(new File(filename));}  }
class C{  public AuthenticationException(String message){  super(message);}  }
class C{  public ImageReaderWriterSpi(String vendorName,String version,String[] names,String[] suffixes,String[] MIMETypes,String pluginClassName,boolean supportsStandardStreamMetadataFormat,String nativeStreamMetadataFormatName,String nativeStreamMetadataFormatClassName,String[] extraStreamMetadataFormatNames,String[] extraStreamMetadataFormatClassNames,boolean supportsStandardImageMetadataFormat,String nativeImageMetadataFormatName,String nativeImageMetadataFormatClassName,String[] extraImageMetadataFormatNames,String[] extraImageMetadataFormatClassNames){  super(vendorName,version);  if (names == null) {    throw new IllegalArgumentException("names == null!");  }  if (names.length == 0) {    throw new IllegalArgumentException("names.length == 0!");  }  if (pluginClassName == null) {    throw new IllegalArgumentException("pluginClassName == null!");  }  this.names=(String[])names.clone();  if (suffixes != null && suffixes.length > 0) {    this.suffixes=(String[])suffixes.clone();  }  if (MIMETypes != null && MIMETypes.length > 0) {    this.MIMETypes=(String[])MIMETypes.clone();  }  this.pluginClassName=pluginClassName;  this.supportsStandardStreamMetadataFormat=supportsStandardStreamMetadataFormat;  this.nativeStreamMetadataFormatName=nativeStreamMetadataFormatName;  this.nativeStreamMetadataFormatClassName=nativeStreamMetadataFormatClassName;  if (extraStreamMetadataFormatNames != null && extraStreamMetadataFormatNames.length > 0) {    this.extraStreamMetadataFormatNames=(String[])extraStreamMetadataFormatNames.clone();  }  if (extraStreamMetadataFormatClassNames != null && extraStreamMetadataFormatClassNames.length > 0) {    this.extraStreamMetadataFormatClassNames=(String[])extraStreamMetadataFormatClassNames.clone();  }  this.supportsStandardImageMetadataFormat=supportsStandardImageMetadataFormat;  this.nativeImageMetadataFormatName=nativeImageMetadataFormatName;  this.nativeImageMetadataFormatClassName=nativeImageMetadataFormatClassName;  if (extraImageMetadataFormatNames != null && extraImageMetadataFormatNames.length > 0) {    this.extraImageMetadataFormatNames=(String[])extraImageMetadataFormatNames.clone();  }  if (extraImageMetadataFormatClassNames != null && extraImageMetadataFormatClassNames.length > 0) {    this.extraImageMetadataFormatClassNames=(String[])extraImageMetadataFormatClassNames.clone();  }}  }
class C{  public static PolicyDecision parsePolicyDecision(Node policyDecisionNode) throws PolicyException {  PolicyDecision policyDecision=new PolicyDecision();  Set nodeSet=XMLUtils.getChildNodes(policyDecisionNode,ActionDecision.ACTION_DECISION);  if (nodeSet == null) {    PolicyManager.debug.error("parsePolicyDecision: Required element " + "not found in policy decision node:" + ActionDecision.ACTION_DECISION);    Object[] args={ActionDecision.ACTION_DECISION};    throw new PolicyException(ResBundleUtils.rbName,"missing_element",args,null);  } else {    Iterator nodes=nodeSet.iterator();    while (nodes.hasNext()) {      Node node=(Node)nodes.next();      ActionDecision actionDecision=ActionDecision.parseActionDecision(node);      policyDecision.addActionDecision(actionDecision);    }  }  Set resposeAttrsSet=XMLUtils.getChildNodes(policyDecisionNode,RESPONSE_ATTRIBUTES);  if ((resposeAttrsSet != null) && !resposeAttrsSet.isEmpty()) {    Node node=(Node)resposeAttrsSet.iterator().next();    Map responseAttrsMap=PolicyUtils.parseAttributeValuePairs(node);    policyDecision.setResponseAttributes(responseAttrsMap);  }  Set responseNodeSet=XMLUtils.getChildNodes(policyDecisionNode,RESPONSE_DECISIONS);  if ((responseNodeSet != null) && !responseNodeSet.isEmpty()) {    Node node=(Node)responseNodeSet.iterator().next();    Map responseMap=PolicyUtils.parseAttributeValuePairs(node);    policyDecision.setResponseDecisions(responseMap);  }  return policyDecision;}  }
class C{  public static Map<String,MappedClass> mappingsFromJar(File file){  Map<String,ClassNode> nodes=null;  try {    nodes=JarUtils.loadClasses(file);  } catch (  IOException e) {    e.printStackTrace();  }  return mappingsFromNodes(nodes);}  }
class C{  public void testGetSerialNumber(){  if (this.cert == null) {    return;  }  assertEquals("The serial number is not correct.",tbt_cert.getSerialNumber(),cert.getSerialNumber());}  }
class C{  public BrdAbitPin(int p_component_no,int p_pin_no,NetNosList p_net_no_arr,int p_clearance_type,int p_id_no,ItemFixState p_fixed_state,RoutingBoard p_board){  super(null,p_net_no_arr,p_clearance_type,p_id_no,p_component_no,p_fixed_state,p_board);  pin_no=p_pin_no;  changed_to=this;}  }
class C{  protected static byte[] readAll(InputStream in) throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  byte[] buf=new byte[READ_BUFFER_LENGTH];  int read;  while ((read=in.read(buf,0,READ_BUFFER_LENGTH)) != -1) {    outputStream.write(buf,0,read);  }  return outputStream.toByteArray();}  }
class C{  public HashPrintServiceAttributeSet(PrintServiceAttribute attribute){  super(attribute,PrintServiceAttribute.class);}  }
class C{  public StringIndexOutOfBoundsException(String s,int index){  this(s.length(),index);}  }
class C{  private void formatAndLogArguments(LoggingLevel level,Color color,String msg,Object[] args){  if (!USE_COLORS) {    formatAndLogArguments(level,msg,args);    return;  }  if (PhotonLogger.level.id < level.id) {    return;  }  LocalDateTime dateTime=LocalDateTime.now();  FormattingTuple ft=MessageFormatter.arrayFormat(msg,args);  String formatted=formatLogLine(level,dateTime,ft.getMessage());  Throwable t=ft.getThrowable();  if (t == null) {    LoggingService.logLine(dateTime,formatted,color);  } else {    LoggingService.logThrowable(dateTime,t,formatted,color);  }}  }
class C{  public NO_RESPONSE(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public synchronized void sendMessage(byte message[],InetAddress receiverAddress,int receiverPort,boolean retry) throws IOException {  if (message == null || receiverAddress == null)   throw new IllegalArgumentException("Null argument");  if (peerPortAdvertisedInHeaders <= 0) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("receiver port = " + receiverPort + " for this channel "+ this+ " key "+ key);    }    if (receiverPort <= 0) {      this.peerPortAdvertisedInHeaders=5060;    } else {      this.peerPortAdvertisedInHeaders=receiverPort;    }    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("2.Storing peerPortAdvertisedInHeaders = " + peerPortAdvertisedInHeaders + " for this channel "+ this+ " key "+ key);    }  }  Socket sock=null;  IOException problem=null;  try {    sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),receiverAddress,receiverPort,"TCP",message,retry,this);  } catch (  IOException any) {    problem=any;    logger.logWarning("Failed to connect " + this.peerAddress + ":"+ receiverPort+ " but trying the advertised port="+ this.peerPortAdvertisedInHeaders+ " if it's different than the port we just failed on");    logger.logError("Error is ",any);  }  if (sock == null) {    if (peerAddressAdvertisedInHeaders != null && peerPortAdvertisedInHeaders > 0) {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("Couldn't connect to receiverAddress = " + receiverAddress + " receiverPort = "+ receiverPort+ " key = "+ key+ " retrying on peerPortAdvertisedInHeaders "+ peerPortAdvertisedInHeaders);      }      InetAddress address=InetAddress.getByName(peerAddressAdvertisedInHeaders);      sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),address,this.peerPortAdvertisedInHeaders,"TCP",message,retry,this);      this.peerPort=this.peerPortAdvertisedInHeaders;      this.peerAddress=address;      this.key=MessageChannel.getKey(peerAddress,peerPort,"TCP");      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("retry suceeded to peerAddress = " + peerAddress + " peerPort = "+ peerPort+ " key = "+ key);      }    } else {      throw problem;    }  }  if (sock != mySock && sock != null) {    if (mySock != null) {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("Old socket different than new socket on channel " + key);        logger.logStackTrace();        logger.logWarning("Old socket local ip address " + mySock.getLocalSocketAddress());        logger.logWarning("Old socket remote ip address " + mySock.getRemoteSocketAddress());        logger.logWarning("New socket local ip address " + sock.getLocalSocketAddress());        logger.logWarning("New socket remote ip address " + sock.getRemoteSocketAddress());      }      close(false,false);    }    if (problem == null) {      if (mySock != null) {        if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {          logger.logWarning("There was no exception for the retry mechanism so creating a new thread based on the new socket for incoming " + key);        }      }      mySock=sock;      this.myClientInputStream=mySock.getInputStream();      this.myClientOutputStream=mySock.getOutputStream();      Thread mythread=new Thread(this);      mythread.setDaemon(true);      mythread.setName("TCPMessageChannelThread");      mythread.start();    } else {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("There was an exception for the retry mechanism so not creating a new thread based on the new socket for incoming " + key);      }      mySock=sock;    }  }}  }
class C{  private boolean evaluateArguments(String[] names,String[] values,SSIMediator ssiMediator) throws SSIStopProcessingException {  String expr=getExpression(names,values);  if (expr == null) {    throw new SSIStopProcessingException();  }  try {    ExpressionParseTree tree=new ExpressionParseTree(expr,ssiMediator);    return tree.evaluateTree();  } catch (  ParseException e) {    throw new SSIStopProcessingException();  }}  }
class C{  boolean shouldUpdateSelectedStateFromAction(){  return true;}  }
class C{  public void removeChild(String name) throws MBeanException {  if (name != null) {    try {      Container container=(Container)getManagedResource();      Container contained=container.findChild(name);      container.removeChild(contained);    } catch (    InstanceNotFoundException e) {      throw new MBeanException(e);    }catch (    RuntimeOperationsException e) {      throw new MBeanException(e);    }catch (    InvalidTargetObjectTypeException e) {      throw new MBeanException(e);    }  }}  }
class C{  private void runWrapped(final Operation operation){  try {    operation.run();  }  finally {    nbRunningOperations.decrementAndGet();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  s=domesticAttr.getPreviousSibling();  assertNull("attrPreviousSiblingNullAssert",s);}  }
class C{  @Override public void skippedEntity(String name) throws SAXException {  if (saxLog.isDebugEnabled()) {    saxLog.debug("skippedEntity(" + name + ")");  }}  }
class C{  public LoginLATNodeAttribute(String latNode){  super(OctetUtils.toOctets(AttributeType.LOGIN_LAT_NODE,latNode));  this.latNode=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  public static final void addLoggingBehavior(LoggingBehavior behavior){synchronized (loggingBehaviors) {    loggingBehaviors.add(behavior);  }}  }
class C{  public static String serializeToString(Object object) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  oos.writeObject(object);  oos.close();  return Base64.encode(baos.toByteArray());}  }
class C{  public ParameterBlock addSource(Object source){  sources.addElement(source);  return this;}  }
class C{  private void initMapLayer(){  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());  Log.i(TAG,Float.toString(zoom));  mapView.setCurrentZoom(zoom,0,0);  float width=mapView.getWidth() - zoom * image.getWidth();  float height=mapView.getHeight() - zoom * image.getHeight();  mapView.translate(width / 2,height / 2);}  }
class C{  private final Object slotExchange(Object item,boolean timed,long ns){  Node p=participant.get();  Thread t=Thread.currentThread();  if (t.isInterrupted())   return null;  for (Node q; ; ) {    if ((q=slot) != null) {      if (U.compareAndSwapObject(this,SLOT,q,null)) {        Object v=q.item;        q.match=item;        Thread w=q.parked;        if (w != null)         U.unpark(w);        return v;      }      if (NCPU > 1 && bound == 0 && U.compareAndSwapInt(this,BOUND,0,SEQ))       arena=new Node[(FULL + 2) << ASHIFT];    } else     if (arena != null)     return null; else {      p.item=item;      if (U.compareAndSwapObject(this,SLOT,null,p))       break;      p.item=null;    }  }  int h=p.hash;  long end=timed ? System.nanoTime() + ns : 0L;  int spins=(NCPU > 1) ? SPINS : 1;  Object v;  while ((v=p.match) == null) {    if (spins > 0) {      h^=h << 1;      h^=h >>> 3;      h^=h << 10;      if (h == 0)       h=SPINS | (int)t.getId(); else       if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)       Thread.yield();    } else     if (slot != p)     spins=SPINS; else     if (!t.isInterrupted() && arena == null && (!timed || (ns=end - System.nanoTime()) > 0L)) {      U.putObject(t,BLOCKER,this);      p.parked=t;      if (slot == p)       U.park(false,ns);      p.parked=null;      U.putObject(t,BLOCKER,null);    } else     if (U.compareAndSwapObject(this,SLOT,p,null)) {      v=timed && ns <= 0L && !t.isInterrupted() ? TIMED_OUT : null;      break;    }  }  U.putOrderedObject(p,MATCH,null);  p.item=null;  p.hash=h;  return v;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(this.getClass().getName());  sb.append('[');  if (container == null) {    sb.append("Container is null");  } else {    sb.append(container.getName());  }  sb.append(']');  return sb.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node imported;  DocumentType docType;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();{    boolean success=false;    try {      imported=doc.importNode(docType,true);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_SUPPORTED_ERR);    }    assertTrue("throw_NOT_SUPPORTED_ERR",success);  }}  }
class C{  public boolean isReturnPolicyIdList(){  return returnPolicyIdList;}  }
class C{  private boolean checkOtherPrimeInfo(RSAOtherPrimeInfo[] toBeChecked){  if (toBeChecked == null || toBeChecked.length != opi.length) {    return false;  }  for (int i=0; i < opi.length; i++) {    if (opi[i].getPrime().equals(toBeChecked[i].getPrime()) && opi[i].getExponent().equals(toBeChecked[i].getExponent()) && opi[i].getCrtCoefficient().equals(toBeChecked[i].getCrtCoefficient())) {      continue;    }    return false;  }  return true;}  }
class C{  public ContextRuleSet(){  this("");}  }
class C{  public JasperException(String reason,Throwable exception){  super(reason,exception);}  }
class C{  public final void testHashCodeEqualsObject(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  Certificate c2=new MyCertificate("TEST_TYPE",testEncoding);  assertTrue((c1.hashCode() == c2.hashCode()) && c1.equals(c2));  assertFalse(cert.equals(c1));}  }
class C{  private PageSize ensureDocumentHasNPages(int n,PageSize customPageSize){  PageSize lastPageSize=null;  while (document.getPdfDocument().getNumberOfPages() < n) {    lastPageSize=addNewPage(customPageSize);  }  return lastPageSize;}  }
class C{  public void parse(InputStream inputStream,DefaultSynthStyleFactory factory,URL urlResourceBase,Class<?> classResourceBase,Map<String,Object> defaultsMap) throws ParseException, IllegalArgumentException {  if (inputStream == null || factory == null || (urlResourceBase == null && classResourceBase == null)) {    throw new IllegalArgumentException("You must supply an InputStream, StyleFactory and Class or URL");  }  assert (!(urlResourceBase != null && classResourceBase != null));  _factory=factory;  _classResourceBase=classResourceBase;  _urlResourceBase=urlResourceBase;  _defaultsMap=defaultsMap;  try {    try {      SAXParser saxParser=SAXParserFactory.newInstance().newSAXParser();      saxParser.parse(new BufferedInputStream(inputStream),this);    } catch (    ParserConfigurationException e) {      throw new ParseException("Error parsing: " + e,0);    }catch (    SAXException se) {      throw new ParseException("Error parsing: " + se + " "+ se.getException(),0);    }catch (    IOException ioe) {      throw new ParseException("Error parsing: " + ioe,0);    }  }  finally {    reset();  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclRefElement createAuthnContextDeclRefElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextDeclRefElementImpl(value);}  }
class C{  public ID3v23Tag(AbstractTag mp3tag){  logger.config("Creating tag from a tag of a different version");  frameMap=new LinkedHashMap();  encryptedFrameMap=new LinkedHashMap();  if (mp3tag != null) {    ID3v24Tag convertedTag;    if (mp3tag instanceof ID3v23Tag) {      throw new UnsupportedOperationException("Copy Constructor not called. Please type cast the argument");    }    if (mp3tag instanceof ID3v24Tag) {      convertedTag=(ID3v24Tag)mp3tag;    } else {      convertedTag=new ID3v24Tag(mp3tag);    }    this.setLoggingFilename(convertedTag.getLoggingFilename());    copyPrimitives(convertedTag);    copyFrames(convertedTag);    logger.config("Created tag from a tag of a different version");  }}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public boolean startWS(){  boolean status=false;  try {    System.out.println("WebsocketThread.startWS(): creating WebsocketClientEndpoint with URI: <" + URIstring + ">....");    currWSstateLock.lock();    currWSstate=WSstate.WS_INITIATED;    currWSstateLock.unlock();    clientEndPoint=new WebsocketClientEndpoint(new URI(URIstring),this);    status=true;    runStatus=true;  } catch (  URISyntaxException e) {    System.out.println("WebsocketThread.startWS(): ERROR: URISyntaxException on WebsocketClientEndpoint");    e.printStackTrace();  }  return status;}  }
class C{  private void internalPutProperty(String key,String value){  if (key.equals(HOST_NAME) || key.equals(HOST)) {    if (value == null || value.length() == 0) {      return;    }    if (isEnableHostLookUp) {      try {        InetAddress address=java.net.InetAddress.getByName(value);        String hostName=address.getHostName();        sessionProperties.put(HOST_NAME,hostName);        sessionProperties.put(HOST,value);      } catch (      UnknownHostException uhe) {        debug.error("InternalSession.internalputProperty():" + "Unable to get HostName for:" + value + " SessionException: ",uhe);      }    } else {      sessionProperties.put(HOST_NAME,value);      sessionProperties.put(HOST,value);    }  } else   if (key.equals(AM_MAX_IDLE_TIME)) {    setMaxIdleTime(Long.parseLong(value));  } else   if (key.equals(AM_MAX_SESSION_TIME)) {    setMaxSessionTime(Long.parseLong(value));  } else {    sessionProperties.put(key,value);  }  if (sessionState == SessionState.VALID && serviceConfig.isSendPropertyNotification(key)) {    fireSessionEvent(SessionEventType.PROPERTY_CHANGED);    sessionService.sendEvent(this,SessionEventType.PROPERTY_CHANGED);    SessionInfo sessionInfo=toSessionInfo();    sessionLogging.logEvent(sessionInfo,SessionEventType.PROPERTY_CHANGED);    sessionAuditor.auditActivity(sessionInfo,AM_SESSION_PROPERTY_CHANGED);  }  notifyPersistenceManager();}  }
class C{  public void fine(Supplier<String> msgSupplier){  log(Level.FINE,msgSupplier);}  }
class C{  protected int firstStep(RouteInfo plan){  return (plan.getHopCount() > 1) ? CONNECT_PROXY : CONNECT_TARGET;}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  String message=data.getString("message");  Log.d(TAG,"From: " + from);  Log.d(TAG,"Message: " + message);  if (from.startsWith("/topics/")) {  } else {  }  sendNotification(message);}  }
class C{  public static int registerFontDirectory(String dir){  return fontRegisterProvider.registerFontDirectory(dir);}  }
class C{  public static boolean isArray(String desc){  return desc.startsWith("[");}  }
class C{  private static Boolean doPassive(Map paramsMap,Map spConfigAttrsMap){  Boolean isPassive=Boolean.FALSE;  String isPassiveStr=getParameter(paramsMap,SAML2Constants.ISPASSIVE);  if ((isPassiveStr != null) && ((isPassiveStr.equals(SAML2Constants.TRUE) || (isPassiveStr.equals(SAML2Constants.FALSE))))) {    isPassive=new Boolean(isPassiveStr);  } else {    isPassive=getAttrValueFromMap(spConfigAttrsMap,SAML2Constants.ISPASSIVE);  }  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message("SPSSOFederate: isPassive : " + isPassive);  }  return (isPassive == null) ? Boolean.FALSE : isPassive;}  }
class C{  public Subject createSubject(String realmName,String subjectType,Set values) throws AMConsoleException {  Subject subject=null;  try {    PolicyManager policyMgr=getPolicyManager(realmName);    if (policyMgr != null) {      SubjectTypeManager subjectTypeMgr=policyMgr.getSubjectTypeManager();      subject=subjectTypeMgr.getSubject(subjectType);      subject.setValues(values);    }  } catch (  NameNotFoundException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  PolicyException e) {    throw new AMConsoleException(getErrorString(e));  }  return subject;}  }
class C{  protected final void copyNS(final int nodeID,SerializationHandler handler,boolean inScope) throws SAXException {  if (m_namespaceDeclSetElements != null && m_namespaceDeclSetElements.size() == 1 && m_namespaceDeclSets != null && ((SuballocatedIntVector)m_namespaceDeclSets.elementAt(0)).size() == 1)   return;  SuballocatedIntVector nsContext=null;  int nextNSNode;  if (inScope) {    nsContext=findNamespaceContext(nodeID);    if (nsContext == null || nsContext.size() < 1)     return; else     nextNSNode=makeNodeIdentity(nsContext.elementAt(0));  } else   nextNSNode=getNextNamespaceNode2(nodeID);  int nsIndex=1;  while (nextNSNode != DTM.NULL) {    int eType=_exptype2(nextNSNode);    String nodeName=m_extendedTypes[eType].getLocalName();    int dataIndex=m_dataOrQName.elementAt(nextNSNode);    if (dataIndex < 0) {      dataIndex=-dataIndex;      dataIndex=m_data.elementAt(dataIndex + 1);    }    String nodeValue=(String)m_values.elementAt(dataIndex);    handler.namespaceAfterStartElement(nodeName,nodeValue);    if (inScope) {      if (nsIndex < nsContext.size()) {        nextNSNode=makeNodeIdentity(nsContext.elementAt(nsIndex));        nsIndex++;      } else       return;    } else     nextNSNode=getNextNamespaceNode2(nextNSNode);  }}  }
class C{  public static int findWordEnd(CharSequence line,int pos,String noWordSep,boolean joinNonWordChars,boolean camelCasedWords,boolean eatWhitespace){  if (pos != 0)   pos--;  char ch=line.charAt(pos);  if (noWordSep == null)   noWordSep="";  int type=getCharType(ch,noWordSep);  for (int i=pos; i < line.length(); i++) {    char lastCh=ch;    ch=line.charAt(i);switch (type) {case WHITESPACE:      if (Character.isWhitespace(ch))       break; else       return i;case WORD_CHAR:    if (camelCasedWords && i > pos + 1 && !Character.isUpperCase(ch) && Character.isLetterOrDigit(ch) && Character.isUpperCase(lastCh)) {      return i - 1;    } else     if (camelCasedWords && Character.isUpperCase(ch) && !Character.isUpperCase(lastCh)) {      return i;    } else     if (Character.isLetterOrDigit(ch) || noWordSep.indexOf(ch) != -1) {      break;    } else     if (Character.isWhitespace(ch) && eatWhitespace) {      type=WHITESPACE;      break;    } else     return i;case SYMBOL:  if (!joinNonWordChars && i != pos)   return i;if (Character.isWhitespace(ch)) {  if (eatWhitespace) {    type=WHITESPACE;    break;  } else   return i;} else if (Character.isLetterOrDigit(ch) || noWordSep.indexOf(ch) != -1) {  return i;} else {  break;}}}return line.length();}  }
class C{  static SearchBuffer obtainSearchBuffer(){  SearchBuffer sb;  try {    if (!searchBuffers.empty()) {      sb=searchBuffers.pop();    } else {      sb=new SearchBuffer();    }  } catch (  EmptyStackException ese) {    sb=new SearchBuffer();  }  return sb;}  }
class C{  public synchronized void run(){  if (component != null) {    TextUI mapper=component.getUI();    if (mapper != null && lastDoc == component.getDocument()) {      int len=p0.size();      for (int i=0; i < len; i++) {        mapper.damageRange(component,p0.get(i).getOffset(),p1.get(i).getOffset());      }    }  }  p0.clear();  p1.clear();  lastDoc=null;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ExtensionElementImpl();}  }
class C{  private void initializeTasksFromBackingFile() throws InitializationException {  String backingFilePath=taskBackend.getTaskBackingFile();  try {    File backingFile=getFileForPath(backingFilePath);    if (!backingFile.exists()) {      createNewTaskBackingFile();      return;    }    LDIFImportConfig importConfig=new LDIFImportConfig(backingFilePath);    LDIFReader ldifReader=new LDIFReader(importConfig);    taskRootEntry=null;    recurringTaskParentEntry=null;    scheduledTaskParentEntry=null;    while (true) {      Entry entry;      try {        entry=ldifReader.readEntry();      } catch (      LDIFException le) {        logger.traceException(le);        if (le.canContinueReading()) {          logger.error(ERR_TASKSCHED_CANNOT_PARSE_ENTRY_RECOVERABLE,backingFilePath,le.getLineNumber(),le.getMessage());          continue;        } else {          try {            ldifReader.close();          } catch (          Exception e) {            logger.traceException(e);          }          LocalizableMessage message=ERR_TASKSCHED_CANNOT_PARSE_ENTRY_FATAL.get(backingFilePath,le.getLineNumber(),le.getMessage());          throw new InitializationException(message);        }      }      if (entry == null) {        break;      }      DN entryDN=entry.getName();      if (entryDN.equals(taskBackend.getTaskRootDN())) {        taskRootEntry=entry;      } else       if (entryDN.equals(taskBackend.getRecurringTasksParentDN())) {        recurringTaskParentEntry=entry;      } else       if (entryDN.equals(taskBackend.getScheduledTasksParentDN())) {        scheduledTaskParentEntry=entry;      } else {        DN parentDN=DirectoryServer.getParentDNInSuffix(entryDN);        if (parentDN == null) {          logger.error(ERR_TASKSCHED_ENTRY_HAS_NO_PARENT,entryDN,taskBackend.getTaskRootDN());        } else         if (parentDN.equals(taskBackend.getScheduledTasksParentDN())) {          try {            Task task=entryToScheduledTask(entry,null);            if (TaskState.isDone(task.getTaskState())) {              String id=task.getTaskID();              if (tasks.containsKey(id)) {                logger.warn(WARN_TASKSCHED_DUPLICATE_TASK_ID,id);              } else {                completedTasks.add(task);                tasks.put(id,task);              }            } else {              scheduleTask(task,false);            }          } catch (          DirectoryException de) {            logger.traceException(de);            logger.error(ERR_TASKSCHED_CANNOT_SCHEDULE_TASK_FROM_ENTRY,entryDN,de.getMessageObject());          }        } else         if (parentDN.equals(taskBackend.getRecurringTasksParentDN())) {          try {            RecurringTask recurringTask=entryToRecurringTask(entry);            addRecurringTask(recurringTask,false);          } catch (          DirectoryException de) {            logger.traceException(de);            logger.error(ERR_TASKSCHED_CANNOT_SCHEDULE_RECURRING_TASK_FROM_ENTRY,entryDN,de.getMessageObject());          }        } else {          logger.error(ERR_TASKSCHED_INVALID_TASK_ENTRY_DN,entryDN,backingFilePath);        }      }    }    ldifReader.close();  } catch (  IOException ioe) {    logger.traceException(ioe);    LocalizableMessage message=ERR_TASKSCHED_ERROR_READING_TASK_BACKING_FILE.get(backingFilePath,stackTraceToSingleLineString(ioe));    throw new InitializationException(message,ioe);  }}  }
class C{  public NSData(String base64) throws IOException {  String data=base64.replaceAll("\\s+","");  bytes=Base64.decode(data);}  }
class C{  protected int checkRegisteredClient(){  int retVal=0;  String deviceHash=null;  if (debug.messageEnabled()) {    debug.message("{}.checkRegisteredClient:",ADAPTIVE);  }  HttpServletRequest req=getHttpServletRequest();  if (req != null) {    StringBuilder sb=new StringBuilder(150);    sb.append(req.getHeader("User-Agent"));    sb.append("|").append(req.getHeader("accept"));    sb.append("|").append(req.getHeader("accept-language"));    sb.append("|").append(req.getHeader("accept-encoding"));    sb.append("|").append(req.getHeader("accept-charset"));    sb.append("|").append(userName);    deviceHash=AccessController.doPrivileged(new EncodeAction(Hash.hash(sb.toString())));    Cookie cookie=CookieUtils.getCookieFromReq(req,deviceCookieName);    if (cookie != null) {      if (debug.messageEnabled()) {        debug.message("{}.checkRegisteredClient: Found Cookie : {}",ADAPTIVE,deviceCookieName);      }      if (deviceHash.equalsIgnoreCase(CookieUtils.getCookieValue(cookie))) {        retVal=deviceCookieScore;      }    }  }  if (deviceCookieSave) {    postAuthNMap.put("DEVICENAME",deviceCookieName);    postAuthNMap.put("DEVICEVALUE",deviceHash);  }  if (!deviceCookieInvert) {    retVal=deviceCookieScore - retVal;  }  return retVal;}  }
class C{  public static ClientException wrongManagedObjectType(RelationDefinition<?,?> r,ManagedObjectDefinition<?,?> d,String subcommandName){  LocalizableMessage msg=ERR_DSCFG_ERROR_TYPE_UNRECOGNIZED_FOR_SUBCOMMAND.get(d.getUserFriendlyName(),subcommandName);  return new ClientException(ReturnCode.ERROR_USER_DATA,msg);}  }
class C{  public static <T>T buildComponent(Class<T> componentClass,Object... dependencies){  buildMethodsCache(componentClass);  String fqn=componentClass.getName();  String packageName=componentClass.getPackage().getName();  String simpleName=fqn.substring(packageName.length() + 1);  String generatedName=(packageName + ".Dagger" + simpleName).replace('$','_');  try {    Class<?> generatedClass=Class.forName(generatedName);    Object builder=generatedClass.getMethod("builder").invoke(null);    for (    Method method : builder.getClass().getMethods()) {      Class<?>[] params=method.getParameterTypes();      if (params.length == 1) {        Class<?> dependencyClass=params[0];        for (        Object dependency : dependencies) {          if (dependencyClass.isAssignableFrom(dependency.getClass())) {            method.invoke(builder,dependency);            break;          }        }      }    }    return (T)builder.getClass().getMethod("build").invoke(builder);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public PlaLineIntAlist alist_copy(int extra_space){  if (extra_space < 0)   extra_space=0;  PlaLineIntAlist risul=new PlaLineIntAlist(plaline_len() + extra_space);  risul.addAll(lines_list);  return risul;}  }
class C{  public static boolean endsWith(final String value,final String search,final boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return endsWith(value,search,value.length(),caseSensitive);}  }
class C{  static void testInterface(ClassLoader loader){  Class getDoubledClass;  Object obj;  try {    getDoubledClass=loader.loadClass("GetDoubled");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed: " + cnfe);    return;  }  try {    obj=getDoubledClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.out.println("Got LinkageError on GD");    return;  }  IGetDoubled iface=(IGetDoubled)obj;  try {    DoubledExtendOkay de=iface.getDoubled();    String str=de.getStr();  } catch (  LinkageError le) {    System.out.println("Got LinkageError on GD");    return;  }  System.err.println("Should have failed by now on GetDoubled");}  }
class C{  public TaskRunnable previous(){  return null;}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  try {    int resultLen=0;    if (outOff + bufOff > out.length) {      throw new OutputLengthException("output buffer too short for doFinal()");    }    if (bufOff != 0) {      if (!partialBlockOkay) {        throw new DataLengthException("data not block size aligned");      }      cipher.processBlock(buf,0,buf,0);      resultLen=bufOff;      bufOff=0;      System.arraycopy(buf,0,out,outOff,resultLen);    }    return resultLen;  }  finally {    reset();  }}  }
class C{  private String expandAffix(String pattern,StringBuffer buffer){  buffer.setLength(0);  for (int i=0; i < pattern.length(); ) {    char c=pattern.charAt(i++);    if (c == QUOTE) {      c=pattern.charAt(i++);switch (c) {case CURRENCY_SIGN:        if (i < pattern.length() && pattern.charAt(i) == CURRENCY_SIGN) {          ++i;          buffer.append(symbols.getInternationalCurrencySymbol());        } else {          buffer.append(symbols.getCurrencySymbol());        }      continue;case PATTERN_PERCENT:    c=symbols.getPercent();  break;case PATTERN_PER_MILLE:c=symbols.getPerMill();break;case PATTERN_MINUS:c=symbols.getMinusSign();break;}}buffer.append(c);}return buffer.toString();}  }
class C{  public static String idOf(JsonValue policy) throws BadRequestException {  if (!policy.isDefined(POLICY_ID_KEY)) {    throw new BadRequestException("Missing required field: " + POLICY_ID_KEY);  }  return policy.get(POLICY_ID_KEY).asString();}  }
class C{  public void deleteDynamicGroups(Set groupDNs) throws AMException, SSOException {  Iterator iter=groupDNs.iterator();  while (iter.hasNext()) {    String groupDN=(String)iter.next();    AMDynamicGroup group=new AMDynamicGroupImpl(super.token,groupDN);    group.delete();  }}  }
class C{  public Event35Id.Builder clearFirst(){  first=null;  fieldSetFlags()[1]=false;  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  int childLength;  java.util.List result=new java.util.ArrayList();  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(30,5);  childData=child.getData();  assertEquals("data","1230 North Ave. Dallas, Texas ",childData);  childLength=(int)child.getLength();  assertEquals("length",30,childLength);}  }
class C{  public void mouseEntered(MouseEvent e){  JMenu menu=(JMenu)menuItem;  if (!menu.isEnabled() && !UIManager.getBoolean("MenuItem.disabledAreNavigable")) {    return;  }  MenuSelectionManager manager=MenuSelectionManager.defaultManager();  MenuElement selectedPath[]=manager.getSelectedPath();  if (!menu.isTopLevelMenu()) {    if (!(selectedPath.length > 0 && selectedPath[selectedPath.length - 1] == menu.getPopupMenu())) {      if (menu.getDelay() == 0) {        appendPath(getPath(),menu.getPopupMenu());      } else {        manager.setSelectedPath(getPath());        setupPostTimer(menu);      }    }  } else {    if (selectedPath.length > 0 && selectedPath[0] == menu.getParent()) {      MenuElement newPath[]=new MenuElement[3];      newPath[0]=(MenuElement)menu.getParent();      newPath[1]=menu;      if (BasicPopupMenuUI.getLastPopup() != null) {        newPath[2]=menu.getPopupMenu();      }      manager.setSelectedPath(newPath);    }  }}  }
class C{  public static CipherProvider cipherProvider(String transformation,String preferredProvider,int maxSize){  return new PerThreadCipherProvider(new JCECipherProvider(transformation,preferredProvider),maxSize);}  }
class C{  private ObjectDef parse_object() throws SyntaxException {  ClassDef classDef=parse_class();  if (!classDef.modifiers.isEmpty()) {    err.SyntaxException("object do not have modifiers",classDef.line_col());  }  if (!classDef.params.isEmpty()) {    err.SyntaxException("object do not have params",classDef.params.get(0).line_col());  }  return new ObjectDef(classDef.name,classDef.superWithInvocation,classDef.superWithoutInvocation,classDef.annos,classDef.statements,classDef.line_col());}  }
class C{  public void save(){  if (!state.isSaved()) {    state.setSaved(updateStateEntry());  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(this.getClass().getName());  sb.append('[');  if (container == null) {    sb.append("Container is null");  } else {    sb.append(container.getName());  }  sb.append(']');  return sb.toString();}  }
class C{  public void registerDecisionCombiner(String name,Class<? extends EntitlementCombiner> type){  register(name,combiners,type);}  }
class C{  public Certificate engineGenerateCertificate(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("inStream == null");  }  try {    if (!inStream.markSupported()) {      inStream=new RestoringInputStream(inStream);    }    inStream.mark(1);    if (inStream.read() == '-') {      return getCertificate(decodePEM(inStream,CERT_BOUND_SUFFIX));    } else {      inStream.reset();      return getCertificate(inStream);    }  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  public FrameBodyTDLY(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public InternalSearchOperation processSearch(SearchRequest request){  InternalSearchOperation searchOperation=new InternalSearchOperation(this,nextOperationID(),nextMessageID(),request);  if (!hasPrivilege(Privilege.JMX_READ,null)) {    LocalizableMessage message=ERR_JMX_SEARCH_INSUFFICIENT_PRIVILEGES.get();    searchOperation.setErrorMessage(new LocalizableMessageBuilder(message));    searchOperation.setResultCode(ResultCode.INSUFFICIENT_ACCESS_RIGHTS);  } else {    searchOperation.run();  }  return searchOperation;}  }
class C{  public final void testRSAOtherPrimeInfo01(){  Object o=new RSAOtherPrimeInfo(BigInteger.valueOf(1L),BigInteger.valueOf(2L),BigInteger.valueOf(3L));  assertTrue(o instanceof RSAOtherPrimeInfo);}  }
class C{  public void addChildElement(XMLElement child) throws Exception {  addChildElementAt(child,-1,false);}  }
class C{  public String generateCommonName(String univId,AMModel model){  String commonName="";  Map userInfoMap=getUserAttributeValues(univId);  if ((userInfoMap != null) && !userInfoMap.isEmpty()) {    String localeStr=AMAdminUtils.getFirstElement((Set)userInfoMap.get(USER_SERVICE_PREFERRED_LOCALE));    if ((localeStr == null) || (localeStr.trim().length() == 0)) {      localeStr=model.getUserLocale().toString();    }    String format=getCommonNameFormat(localeStr,model);    Set tokens=getTokens(format);    Map mapAttrValue=getAttributeValues(userInfoMap,tokens);    commonName=format;    for (Iterator iter=mapAttrValue.keySet().iterator(); iter.hasNext(); ) {      String token=(String)iter.next();      String value=(String)mapAttrValue.get(token);      if (!format.equals(DEFAULT_FORMAT)) {        value+=" ";      }      commonName=AMFormatUtils.replaceString(commonName,token,value);    }    tokens.removeAll(mapAttrValue.keySet());    for (Iterator iter=tokens.iterator(); iter.hasNext(); ) {      String token=(String)iter.next();      int idx=commonName.indexOf(token + " ");      if (idx != -1) {        commonName=commonName.substring(0,idx) + commonName.substring(idx + token.length() + 1);      } else {        idx=commonName.indexOf(token);        if (idx != -1) {          commonName=commonName.substring(0,idx) + commonName.substring(idx + token.length());        }      }    }  }  return commonName;}  }
class C{  boolean isAllReasons(){  return _reasons == allReasons._reasons ? true : false;}  }
class C{  public LDAPDeleteOptions(){}  }
class C{  public void registerDescription(StoreDescription desc){  String key=desc.getId();  if (key == null || "".equals(key))   key=desc.getTagClass();  descriptors.put(key,desc);  if (log.isDebugEnabled())   log.debug("register store descriptor " + key + "#"+ desc.getTag()+ "#"+ desc.getTagClass());}  }
class C{  protected int positionForMouseEvent(MouseEvent e){  int newY=(e.getSource() == BasicSplitPaneDivider.this) ? (e.getY() + getLocation().y) : e.getY();  newY=Math.min(maxX,Math.max(minX,newY - offset));  return newY;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.LOCAL_DATE_TIME_TYPE,this);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="xmlns";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public synchronized void removeNotifications(String type) throws InstanceNotFoundException {  Vector<Integer> v=getNotificationIDs(type);  if (v.isEmpty())   throw new InstanceNotFoundException("Timer notifications to remove not in the list of notifications");  for (  Integer i : v)   removeNotification(i);}  }
class C{  public boolean isSynthetic(){  return getFlag(IS_SYNTHETIC);}  }
class C{  public void onLoginFailure(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response) throws AuthenticationException {  OAuthUtil.debugMessage("OAuth2PostAuthnPlugin:onLoginFailure called");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild1.class,args);}  }
class C{  private String[] listTestParents(ManagementContext context) throws Exception {  ManagedObject<RootCfgClient> root=context.getRootConfigurationManagedObject();  return root.listChildren(TestCfg.getTestOneToManyParentRelationDefinition());}  }
class C{  public void printStats(){  stats.record("Idm  Cache Statistics: " + nameOfCache + "\n--------------------"+ "\nNumber of Get and Search requests during this interval: "+ (double)intervalCount+ "\nNumber of Hits during this interval: "+ totalIntervalHits+ "\nHit ratio for this interval: "+ (double)totalIntervalHits / (double)intervalCount + "\nTotal number of Get requests since server start: " + totalGetRequests + "\nTotal number of Get Hits since server start: " + totalGetCacheHits + "\nOverall Hit ratio: " + (double)totalGetCacheHits / (double)totalGetRequests + "\nTotal number of Search requests since server start: " + totalSearchRequests + "\nTotal number of FQDN Search hits since server start: " + totalSearchHits + "\nOverall Hit ratio: " + (double)totalSearchHits / (double)totalSearchRequests + "\nTotal Cache Size: " + cacheSize + "\n");  intervalCount=0;  totalIntervalHits=0;}  }
class C{  public InputMismatchException(){  super();}  }
class C{  public PVisitedNetworkIDHeader createPVisitedNetworkIDHeader(){  PVisitedNetworkID visitedNetworkID=new PVisitedNetworkID();  return visitedNetworkID;}  }
class C{  private Object lock(){  Document document=getDocument();  if (document instanceof AbstractDocument) {    ((AbstractDocument)document).readLock();    return document;  }  return null;}  }
class C{  public void testAlgorithmParameterGenerator08(){  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  try {    AlgorithmParameterGenerator.getInstance(null,validProvider);    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i],validProvider);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  SOAPFaultDetail(Element detailElement) throws SOAPBindingException {  NodeList nl=detailElement.getChildNodes();  int length=nl.getLength();  if (length == 0) {    return;  }  otherChildren=new ArrayList();  for (int i=0; i < length; i++) {    Node child=nl.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      Element element=(Element)child;      String localName=element.getLocalName();      String ns=element.getNamespaceURI();      if (SOAPBindingConstants.NS_SOAP_BINDING.equals(ns)) {        if (SOAPBindingConstants.TAG_STATUS.equals(localName)) {          String value=XMLUtils.getNodeAttributeValue(element,SOAPBindingConstants.ATTR_CODE);          if (value == null || value.length() == 0) {            String msg=Utils.bundle.getString("missingFaultStatusCode");            Utils.debug.error("SOAPFaultException: " + msg);            throw new SOAPBindingException(msg);          }          statusCode=Utils.convertStringToQName(value,element);          statusRef=XMLUtils.getNodeAttributeValue(element,SOAPBindingConstants.ATTR_REF);          statusComment=XMLUtils.getNodeAttributeValue(element,SOAPBindingConstants.ATTR_COMMENT);        } else         if (SOAPBindingConstants.TAG_CORRELATION.equals(localName)) {          correlationHeader=new CorrelationHeader(element);        } else         if (SOAPBindingConstants.TAG_CONSENT.equals(localName)) {          consentHeader=new ConsentHeader(element);        } else         if (SOAPBindingConstants.TAG_USAGE_DIRECTIVE.equals(localName)) {          if (usageDirectiveHeaders == null) {            usageDirectiveHeaders=new ArrayList();          }          usageDirectiveHeaders.add(new UsageDirectiveHeader(element));        } else         if (SOAPBindingConstants.TAG_PROVIDER.equals(localName)) {          providerHeader=new ProviderHeader(element);        } else         if (SOAPBindingConstants.TAG_PROCESSING_CONTEXT.equals(localName)) {          processingContextHeader=new ProcessingContextHeader(element);        } else {          otherChildren.add(element);        }      } else       if (SOAPBindingConstants.NS_SOAP_BINDING_11.equals(ns) && SOAPBindingConstants.TAG_SERVICE_INSTANCE_UPDATE.equals(localName)) {        serviceInstanceUpdateHeader=new ServiceInstanceUpdateHeader(element);      } else {        otherChildren.add(element);      }    }  }  if (otherChildren.isEmpty()) {    otherChildren=null;  }}  }
class C{  public boolean isPattern(){  return isPattern;}  }
class C{  public static void writeSwappedFloat(byte[] data,int offset,float value){  writeSwappedInteger(data,offset,Float.floatToIntBits(value));}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  str=pcdata;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("staff",true);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(3);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  value=streetAttr.getValue();  assertEquals("streetYes","Yes",value);}  }
class C{  private Long convertIntToLong(int quoteParam){  Long quoteParamLong=new Long(convertIntToIntString(quoteParam));  return quoteParamLong;}  }
class C{  private void examineIncompleteOperation(ModifyDNOperation modifyDNOperation,ResultCode resultCode){  assertEquals(modifyDNOperation.getResultCode(),resultCode);  assertTrue(modifyDNOperation.getErrorMessage().length() > 0);  assertTrue(modifyDNOperation.getProcessingStartTime() > 0);  assertTrue(modifyDNOperation.getProcessingStopTime() > 0);  assertTrue(modifyDNOperation.getProcessingTime() >= 0);  assertTrue(modifyDNOperation.getErrorMessage().length() > 0);  ensurePostReponseHasRun();}  }
class C{  public NamingRuleSet(){  this("");}  }
class C{  public boolean beginBtnGroupSearchDisplay(ChildDisplayEvent event){  return !is2dot2Agent() && !isAgentAuthenticator();}  }
class C{  public static boolean isFileNewer(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileNewer(file,reference.lastModified());}  }
class C{  public boolean isPrimaryServer(String serverID){  return isSiteEnabled() ? getSiteID().equals(serverID) : localServerID.equals(serverID);}  }
class C{  public Set readAllFederatedProviderID(String providerID,String userID) throws FSAccountMgmtException {  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAccountManager.readAllFedProviderID() : userID=" + userID + ", providerID="+ providerID);  }  if (userID == null) {    FSUtils.debug.error("FSAccountManager.readAllFederatedProviderID()" + ":Invalid Argument : user ID is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_USER_DN,null);  }  Set existFedInfoSet=null;  try {    existFedInfoSet=provider.getAttribute(userID,FSAccountUtils.USER_FED_INFO_ATTR);  } catch (  DataStoreProviderException ame) {    FSUtils.debug.error("FSAccountManager.readAllFederatedProviderID():Exception:",ame);    throw new FSAccountMgmtException(ame.getMessage());  }  Set providerIDSet=new HashSet();  if (existFedInfoSet != null && !existFedInfoSet.isEmpty()) {    Iterator i=existFedInfoSet.iterator();    String existFedInfoStr="";    while (i.hasNext()) {      existFedInfoStr=(String)i.next();      FSAccountFedInfo afi=FSAccountUtils.stringToObject(existFedInfoStr);      if (afi.isFedStatusActive()) {        if (providerID == null) {          providerIDSet.add(afi.getProviderID());        } else         if (existFedInfoStr.indexOf("|" + providerID + "|") != -1) {          providerIDSet.add(afi.getProviderID());        }      }    }  }  return providerIDSet;}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("gtone",null));}  }
class C{  static String handleIllegalCharacterInResult(final String result){  String tempResult=result;  if (tempResult != null && tempResult.contains(" ")) {    tempResult=tempResult.replaceAll(" ","_");  }  return tempResult;}  }
class C{  public ListItem(){  super();  role=PdfName.LBody;}  }
class C{  public static boolean compare(int result,int mode){  if ((mode & COMPARE_MODE_EQ) == COMPARE_MODE_EQ && result == 0)   return true;  if ((mode & COMPARE_MODE_GT) == COMPARE_MODE_GT && result > 0)   return true;  if ((mode & COMPARE_MODE_LT) == COMPARE_MODE_LT && result < 0)   return true;  return false;}  }
class C{  public synchronized void cancelTask(String id) throws TaskClientException, IOException, DecodeException, LDAPException {  LDAPReader reader=connection.getLDAPReader();  LDAPWriter writer=connection.getLDAPWriter();  TaskEntry entry=getTaskEntry(id);  TaskState state=entry.getTaskState();  if (state == null) {    throw new TaskClientException(ERR_TASK_CLIENT_TASK_STATE_UNKNOWN.get(id));  }  if (!TaskState.isDone(state)) {    cancelNotDoneTask(entry,state,writer,reader);  } else   if (TaskState.isRecurring(state)) {    cancelRecurringTask(entry,writer,reader);  } else {    throw new TaskClientException(ERR_TASK_CLIENT_UNCANCELABLE_TASK.get(id));  }}  }
class C{  public static String quote(int i){  return quote(Integer.toString(i));}  }
class C{  public static void error(Level level,String msgid,String data[],Object session){  if (logger != null) {    try {      logger.error(level,msgid,data,session);    } catch (    LogException le) {      COTUtils.debug.error("LogUtil.error: Couldn't write log:",le);    }  }}  }
class C{  public EntryEncodeConfig(boolean excludeDN,boolean compressAttrDescriptions,boolean compressObjectClassSets){  this.excludeDN=excludeDN;  this.compressAttrDescriptions=compressAttrDescriptions;  this.compressObjectClassSets=compressObjectClassSets;  compressedSchema=DirectoryServer.getDefaultCompressedSchema();  byte flagByte=0x00;  if (excludeDN) {    flagByte|=ENCODE_FLAG_EXCLUDE_DN;  }  if (compressAttrDescriptions) {    flagByte|=ENCODE_FLAG_COMPRESS_ADS;  }  if (compressObjectClassSets) {    flagByte|=ENCODE_FLAG_COMPRESS_OCS;  }  encodedRepresentation=flagByte;}  }
class C{  public TagAttribute buildAttribute(){  final TagAttribute attr=new TagAttributeImpl(getLocation(),getNamespace(),getLocalName(),getqName(),getValue());  return attr;}  }
class C{  public void cancelCellEditing(){  fireEditingCanceled();}  }
class C{  public static Hashtable<String,Object> loadConfigFile(final File f) throws IOException {  logger.debug("Loading configuration from {}",f);  final Hashtable<String,Object> ht=new Hashtable<>();  if (f.getName().endsWith(ConfigBootstrapHelper.JSON_CONFIG_FILE_EXT)) {    StringBuilder fileBuf=new StringBuilder(1024);    try (InputStream is=new FileInputStream(f);InputStreamReader isr=new InputStreamReader(is,fileEncoding);BufferedReader reader=new BufferedReader(isr)){      char[] buf=new char[1024];      int numRead;      while ((numRead=reader.read(buf)) != -1) {        fileBuf.append(buf,0,numRead);      }    }     ht.put(JSON_CONFIG_PROPERTY,fileBuf.toString());  }  return ht;}  }
class C{  public AMIdentitySubject(){}  }
class C{  public void testCase19(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=1;  int bSign=-1;  byte rBytes[]={12,-21,73,56,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public String encode(String pString,String charset) throws UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(encode(pString.getBytes(charset)),StringEncodings.US_ASCII);}  }
class C{  public static Foo[] findByUuid_PrevAndNext(long fooId,java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_PrevAndNext(fooId,uuid,orderByComparator);}  }
class C{  public final static String formatNameValuePair(final NameValuePair nvp,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatNameValuePair(null,nvp,quote).toString();}  }
class C{  public byte lookup(Segment text,int offset,int length){  if (length == 0)   return Token.NULL;  Keyword k=map[getSegmentMapKey(text,offset,length)];  while (k != null) {    if (length != k.keyword.length) {      k=k.next;      continue;    }    if (SyntaxUtilities.regionMatches(ignoreCase,text,offset,k.keyword))     return k.id;    k=k.next;  }  return Token.NULL;}  }
class C{  int currentPoolSize(){  return maxPoolSize - availableConnections.availablePermits();}  }
class C{  public SIPHeader parse() throws ParseException {  AcceptEncodingList acceptEncodingList=new AcceptEncodingList();  if (debug)   dbg_enter("AcceptEncodingParser.parse");  try {    headerName(TokenTypes.ACCEPT_ENCODING);    if (!lexer.startsId()) {      AcceptEncoding acceptEncoding=new AcceptEncoding();      acceptEncodingList.add(acceptEncoding);    } else {      do {        AcceptEncoding acceptEncoding=new AcceptEncoding();        if (lexer.startsId()) {          Token value=lexer.match(TokenTypes.ID);          acceptEncoding.setEncoding(value.getTokenValue());          while (lexer.lookAhead(0) == ';') {            this.lexer.match(';');            this.lexer.SPorHT();            Token pname=lexer.match(TokenTypes.ID);            this.lexer.SPorHT();            if (lexer.lookAhead() == '=') {              this.lexer.match('=');              this.lexer.SPorHT();              value=lexer.match(TokenTypes.ID);              if (pname.getTokenValue().equalsIgnoreCase("q")) {                try {                  float qv=Float.parseFloat(value.getTokenValue());                  acceptEncoding.setQValue(qv);                } catch (                NumberFormatException ex) {                  throw createParseException(ex.getMessage());                }catch (                InvalidArgumentException ex) {                  throw createParseException(ex.getMessage());                }              } else {                acceptEncoding.setParameter(pname.getTokenValue(),value.getTokenValue());              }              this.lexer.SPorHT();            } else             acceptEncoding.setParameter(pname.getTokenValue(),"");          }        }        acceptEncodingList.add(acceptEncoding);        if (lexer.lookAhead(0) == ',') {          this.lexer.match(',');          this.lexer.SPorHT();        } else         break;      } while (true);    }    return acceptEncodingList;  }  finally {    if (debug)     dbg_leave("AcceptEncodingParser.parse");  }}  }
class C{  @Deprecated public static void disableSwingFocusManager(){  if (enabled) {    enabled=false;    KeyboardFocusManager.getCurrentKeyboardFocusManager().setDefaultFocusTraversalPolicy(new DefaultFocusTraversalPolicy());  }}  }
class C{  public void removeSID(SessionID sid){  if (sid == null || sid.isNull()) {    return;  }  Session session=readSession(sid);  if (session != null) {    long eventTime=currentTimeMillis();    SessionCuller sessionCuller=getSessionCuller(sid);    Reject.ifNull(sessionCuller);    if (sessionCuller.getPurgeAt() <= eventTime) {      deleteSession(sid);    }    if (session.getRemoved().compareAndSet(false,true)) {      session.setState(SessionState.DESTROYED);      SessionEvent event=new SessionEvent(session,SessionEventType.DESTROY,eventTime);      Session.invokeListeners(event);    }  }}  }
class C{  public MakeLDIFInputStreamThread(MakeLDIFInputStream inputStream,TemplateFile templateFile){  super("MakeLDIF Input Stream Thread");  this.inputStream=inputStream;  this.templateFile=templateFile;}  }
class C{  private Todo wrapObject(Todo todo,RoutingContext context){  int id=todo.getId();  if (id > Todo.getIncId()) {    Todo.setIncIdWith(id);  } else   if (id == 0)   todo.setIncId();  todo.setUrl(context.request().absoluteURI() + "/" + todo.getId());  return todo;}  }
class C{  private final String _decodeShortUnicodeName(int len) throws IOException {  int outPtr=0;  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();  int inPtr=_inputPtr;  _inputPtr+=len;  final int[] codes=SmileConstants.sUtf8UnitLengths;  final byte[] inBuf=_inputBuffer;  for (int end=inPtr + len; inPtr < end; ) {    int i=inBuf[inPtr++] & 0xFF;    int code=codes[i];    if (code != 0) {switch (code) {case 1:        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);      break;case 2:    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);  break;case 3:i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);i-=0x10000;outBuf[outPtr++]=(char)(0xD800 | (i >> 10));i=0xDC00 | (i & 0x3FF);break;default :_reportError("Invalid byte " + Integer.toHexString(i) + " in short Unicode text block");}}outBuf[outPtr++]=(char)i;}_textBuffer.setCurrentLength(outPtr);return _textBuffer.contentsAsString();}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public LoginLATServiceAttribute(String latService){  super(OctetUtils.toOctets(AttributeType.LOGIN_LAT_SERVICE,latService));  this.latService=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  public static boolean encodeToFile(byte[] dataToEncode,String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);    success=true;  } catch (  java.io.IOException e) {    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  public boolean isRemote(){  int index=combo.getSelectedIndex();  return index == 1;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  support.removePropertyChangeListener(listener);}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  private static void isVersionCanBeUpdated(final UpgradeContext context) throws ClientException {  if (context.getFromVersion().equals(context.getToVersion())) {    final LocalizableMessage message=ERR_UPGRADE_VERSION_UP_TO_DATE.get(context.getToVersion());    context.notify(message,NOTICE_CALLBACK);    throw new ClientException(ReturnCode.SUCCESS,message);  }  if (context.getFromVersion().compareTo(UPGRADE_SUPPORTS_VERSION_FROM) < 0) {    final LocalizableMessage message=INFO_UPGRADE_VERSION_IS_NOT_SUPPORTED.get(UPGRADE_SUPPORTS_VERSION_FROM,UPGRADE_SUPPORTS_VERSION_FROM);    context.notify(message,NOTICE_CALLBACK);    throw new ClientException(ReturnCode.ERROR_UNEXPECTED,message);  }}  }
class C{  public double[] board_to_dsn(PlaPointFloat[] p_points){  double[] result=new double[2 * p_points.length];  for (int i=0; i < p_points.length; ++i) {    result[2 * i]=board_to_dsn(p_points[i].v_x) + base_x;    result[2 * i + 1]=board_to_dsn(p_points[i].v_y) + base_y;  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbefore.class,args);}  }
class C{  @Override public void engineLoad(final InputStream stream,final char[] password){  if (stream != null) {    throw new IllegalArgumentException("the LDAP key store is not file based");  } else   if (provider.getDefaultConfig() == null || password == null || password.length == 0) {    engineLoad(null);  } else {    final KeyStoreParameters defaultConfig=provider.getDefaultConfig();    final Options options=copyOf(defaultConfig.getOptions()).set(GLOBAL_PASSWORD,newClearTextPasswordFactory(password));    engineLoad(newKeyStoreParameters(defaultConfig.getConnectionFactory(),defaultConfig.getBaseDN(),options));  }}  }
class C{  public String toString(){  String s="";  Enumeration names=getAttributeNames();  while (names.hasMoreElements()) {    Object key=names.nextElement();    Object value=getAttribute(key);    if (value instanceof AttributeSet) {      s=s + key + "=**AttributeSet** ";    } else {      s=s + key + "="+ value+ " ";    }  }  return s;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrinsertdataoffsetnegative.class,args);}  }
class C{  public ActionEvent(Object source,int id,String command){  this(source,id,command,0);}  }
class C{  public void testMac08() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac mac;  for (int i=0; i < validValues.length; i++) {    mac=Mac.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",mac.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",mac.getProvider(),defaultProvider);  }}  }
class C{  public void seek(long pos) throws java.io.IOException {  byteSourcePosition=pos;  isBack=false;}  }
class C{  public EventSetDescriptor(String eventSetName,Class<?> listenerType,Method listenerMethods[],Method addListenerMethod,Method removeListenerMethod) throws IntrospectionException {  this(eventSetName,listenerType,listenerMethods,addListenerMethod,removeListenerMethod,null);}  }
class C{  public boolean endsWith(Name n){  if (n instanceof CompoundName) {    return (impl.endsWith(n.size(),n.getAll()));  } else {    return false;  }}  }
class C{  public static boolean isName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;}  }
class C{  private void onInviteClicked(){  Intent intent=new AppInviteInvitation.IntentBuilder(getString(R.string.invitation_title)).setMessage(getString(R.string.invitation_message)).setDeepLink(Uri.parse(getString(R.string.invitation_deep_link))).setCustomImage(Uri.parse(getString(R.string.invitation_custom_image))).setCallToActionText(getString(R.string.invitation_cta)).build();  startActivityForResult(intent,REQUEST_INVITE);}  }
class C{  public static PostReadRequestControl newControl(final boolean isCritical,final Collection<String> attributes){  Reject.ifNull(attributes);  if (attributes.isEmpty()) {    return isCritical ? CRITICAL_EMPTY_INSTANCE : NONCRITICAL_EMPTY_INSTANCE;  } else   if (attributes.size() == 1) {    return new PostReadRequestControl(isCritical,singletonList(attributes.iterator().next()));  } else {    return new PostReadRequestControl(isCritical,unmodifiableList(new ArrayList<String>(attributes)));  }}  }
class C{  public void testPlusMathContextNegative(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=49;  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String c="-9294878209448847823.121247898748298842980877981";  int cScale=27;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal res=aNumber.plus(mc);  assertEquals("incorrect value",c,res.toString());  assertEquals("incorrect scale",cScale,res.scale());}  }
class C{  @Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(long fooId) throws PortalException {  return fooPersistence.remove(fooId);}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public LineMessagingServiceBuilder connectTimeout(long connectTimeout){  this.connectTimeout=connectTimeout;  return this;}  }
class C{  public boolean filterStop(){  if (getLogger().isDebugEnabled())   getLogger().debug("Stopping filters");synchronized (filterConfigs) {    for (    Entry<String,ApplicationFilterConfig> entry : filterConfigs.entrySet()) {      if (getLogger().isDebugEnabled())       getLogger().debug(" Stopping filter '" + entry.getKey() + "'");      ApplicationFilterConfig filterConfig=entry.getValue();      filterConfig.release();    }    filterConfigs.clear();  }  return true;}  }
class C{  public Role(String roleName,List<ObjectName> roleValue) throws IllegalArgumentException {  if (roleName == null || roleValue == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  setRoleName(roleName);  setRoleValue(roleValue);  return;}  }
class C{  public void addAttribute(Attribute attribute,Object value){  if (attribute == null) {    throw new NullPointerException();  }  int len=length();  if (len == 0) {    throw new IllegalArgumentException("Can't add attribute to 0-length text");  }  addAttributeImpl(attribute,value,0,len);}  }
class C{  public InternalErrorException(Throwable cause){  super(cause);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.OptionsElement createOptionsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.OptionsElementImpl();}  }
class C{  public ServerObject(Node node){  Element elm=(Element)node;  name=elm.getAttribute(DSConfigMgr.NAME);  host=elm.getAttribute(DSConfigMgr.HOST);  port=elm.getAttribute(DSConfigMgr.PORT);  type=elm.getAttribute(DSConfigMgr.AUTH_TYPE);}  }
class C{  public boolean add(E e){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    Object[] newElements=Arrays.copyOf(elements,len + 1);    newElements[len]=e;    setArray(newElements);    return true;  }  finally {    lock.unlock();  }}  }
class C{  public SIPObjectList(String lname){  super(lname);}  }
class C{  public void addSelectionPaths(TreePath[] paths){  getSelectionModel().addSelectionPaths(paths);}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {synchronized (lock) {    ensureOpen();    try {      if (len <= 0) {        if (len < 0) {          throw new IndexOutOfBoundsException();        } else         if ((off < 0) || (off > cbuf.length)) {          throw new IndexOutOfBoundsException();        }        return 0;      }      int avail=buf.length - pos;      if (avail > 0) {        if (len < avail)         avail=len;        System.arraycopy(buf,pos,cbuf,off,avail);        pos+=avail;        off+=avail;        len-=avail;      }      if (len > 0) {        len=super.read(cbuf,off,len);        if (len == -1) {          return (avail == 0) ? -1 : avail;        }        return avail + len;      }      return avail;    } catch (    ArrayIndexOutOfBoundsException e) {      throw new IndexOutOfBoundsException();    }  }}  }
class C{  protected boolean identityEquals(Identity identity){  if (!name.equalsIgnoreCase(identity.name))   return false;  if ((publicKey == null) ^ (identity.publicKey == null))   return false;  if (publicKey != null && identity.publicKey != null)   if (!publicKey.equals(identity.publicKey))   return false;  return true;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.FederationMetadataHandlerElement createFederationMetadataHandlerElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FederationMetadataHandlerElementImpl();}  }
class C{  public void testCase3(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127};  byte bBytes[]={-127,100,56,7,98,-1,39,-128,127};  int aSign=1;  int bSign=1;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static FSScoping parseURLEncodedRequest(HttpServletRequest request){  if (request == null) {    return null;  }  String count=request.getParameter("ProxyCount");  if (count == null) {    return null;  }  int proxyCount=-1;  try {    proxyCount=Integer.parseInt(count);  } catch (  NumberFormatException ne) {    FSUtils.debug.error("FSScoping.parseURLEncodedRequest:" + "proxyCount can not be parsed.");    return null;  }  FSScoping scoping=new FSScoping();  scoping.setProxyCount(proxyCount);  String[] idps=request.getParameterValues("IDPEntries");  if (idps == null || idps.length == 0) {    return scoping;  }  List list=new ArrayList();  for (int i=0; i < idps.length; i++) {    String providerID=idps[i];    IDPEntry entry=new IDPEntry(providerID,null,null);    list.add(entry);  }  IDPEntries entries=new IDPEntries(list);  FSIDPList idpsList=new FSIDPList(entries,null);  scoping.setIDPList(idpsList);  return scoping;}  }
class C{  public Dispatch<Object> createDispatch(QName portName,JAXBContext context,Service.Mode mode,WebServiceFeature... features){  return delegate.createDispatch(portName,context,mode,features);}  }
class C{  private void addAMSessionTokenSupport(){  PolicyInterceptorProviderRegistry pipr=bus.getExtension(PolicyInterceptorProviderRegistry.class);  pipr.register(new OpenAMSessionTokenClientInterceptorProvider());  AssertionBuilderRegistry abr=bus.getExtension(AssertionBuilderRegistry.class);  abr.setIgnoreUnknownAssertions(false);  abr.registerBuilder(AMSTSConstants.AM_SESSION_TOKEN_ASSERTION_QNAME,new OpenAMSessionTokenClientAssertionBuilder(callbackHander));}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public AuthzDecisionStatement createAuthzDecisionStatement(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHZ_DECISION_STATEMENT,elem);  if (obj == null) {    return null;  } else {    return (AuthzDecisionStatement)obj;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.RespondWithElement createRespondWithElement(javax.xml.namespace.QName value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RespondWithElementImpl(value);}  }
class C{  private static void assertEcho(String result,String expected){  Assert.assertTrue(result,result.indexOf("<p>" + expected + "</p>") > 0);}  }
class C{  final Node<K,V> findLast(){  Index<K,V> q=head;  for (; ; ) {    Index<K,V> d, r;    if ((r=q.right) != null) {      if (r.indexesDeletedNode()) {        q.unlink(r);        q=head;      } else       q=r;    } else     if ((d=q.down) != null) {      q=d;    } else {      for (Node<K,V> b=q.node, n=b.next; ; ) {        if (n == null)         return b.isBaseHeader() ? null : b;        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (b.value == null || v == n)         break;        b=n;        n=f;      }      q=head;    }  }}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  public static boolean isWhiteSpace(StringBuffer buf){  int n=buf.length();  for (int i=0; i < n; i++) {    if (!isWhiteSpace(buf.charAt(i)))     return false;  }  return true;}  }
class C{  public Future<Boolean> existsJob(long id){  Future<Boolean> future=Future.future();  jobService.existsJob(id,future.completer());  return future;}  }
class C{  public ConnectionEntryWriter(final Connection connection){  Reject.ifNull(connection);  this.connection=connection;}  }
class C{  public StandardPipeline(Container container){  super();  setContainer(container);}  }
class C{  @Override public void removeAttribute(String name){  removeAttribute(name,true);}  }
class C{  public Object clone(){  return (new SampleSubject());}  }
class C{  static void clearImage(BufferedImage img){  Graphics2D g2=img.createGraphics();  g2.setComposite(AlphaComposite.Clear);  g2.fillRect(0,0,img.getWidth(),img.getHeight());  g2.dispose();}  }
class C{  public Class<? extends Annotation> annotationType(){  return annotationType;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclElement createAuthnContextDeclElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextDeclElementImpl();}  }
class C{  @Override public <T>List<T> dynamicQuery(DynamicQuery dynamicQuery){  return fooPersistence.findWithDynamicQuery(dynamicQuery);}  }
class C{  private void detectRootElementCollisions(String[] points) throws JAXBException {  for (int i=0; i < points.length; i+=2) {    boolean elementFound=false;    for (int j=grammarInfos.length - 1; j >= 0; j--) {      if (grammarInfos[j].recognize(points[i],points[i + 1])) {        if (elementFound == false) {          elementFound=true;        } else {          throw new JAXBException(Messages.format(Messages.COLLISION_DETECTED,points[i],points[i + 1]));        }      }    }  }}  }
class C{  public DecoderException(String pMessage){  super(pMessage);}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  @Override public synchronized void mark(int readlimit){  in.mark(readlimit);}  }
class C{  public static <T>void fill(List<? super T> list,T obj){  int size=list.size();  if (size < FILL_THRESHOLD || list instanceof RandomAccess) {    for (int i=0; i < size; i++)     list.set(i,obj);  } else {    ListIterator<? super T> itr=list.listIterator();    for (int i=0; i < size; i++) {      itr.next();      itr.set(obj);    }  }}  }
class C{  public PipedOutputStream(PipedInputStream snk) throws IOException {  connect(snk);}  }
class C{  @NonNull public static Observable toAgeraObservable(@NonNull rx.Observable<?> rxObservable){  return new RxObservableAsAgera(rxObservable);}  }
class C{  public MemoryUserDatabase(String id){  this.id=id;}  }
class C{  public synchronized void clear(){  Entry<?,?> tab[]=table;  modCount++;  for (int index=tab.length; --index >= 0; )   tab[index]=null;  count=0;}  }
class C{  public void addVertexAndEdge(String label,List<DbDataContainer> attributes,String edgeLabel,String fromId,List<DbDataContainer> edgeAttributes){  String insert="MATCH (f {id: '" + fromId + "'})";  insert+="CREATE (t: " + label + "{";  insert=this.addValuesToStatement(insert,attributes);  insert+="})";  insert+="CREATE (f)-[e: " + edgeLabel + "{";  insert=this.addValuesToStatement(insert,edgeAttributes);  insert+="}]->(t)";  this.transaction.run(insert);}  }
class C{  public static FSAuthnResponseEnvelope parseXML(String xml) throws FSMsgException {  try {    Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);    Element root=doc.getDocumentElement();    return new FSAuthnResponseEnvelope(root);  } catch (  SAMLException ex) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponseEnvelope.parseXML: " + "Error while parsing input xml string");    }    throw new FSMsgException("parseError",null);  }}  }
class C{  public void testOneOne(){  byte aBytes[]={1};  byte bBytes[]={1};  int aSign=1;  int bSign=1;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_right.num(xctxt) + m_left.num(xctxt));}  }
class C{  public boolean isCached(){  return true;}  }
class C{  public static boolean isCli(){  return "true".equals(System.getProperty(Constants.CLI_JAVA_PROPERTY));}  }
class C{  public EventBus(){  this("default",null);}  }
class C{  protected void registerClusterValve(){  if (container != null) {    for (Iterator<Valve> iter=valves.iterator(); iter.hasNext(); ) {      ClusterValve valve=(ClusterValve)iter.next();      if (log.isDebugEnabled())       log.debug("Invoking addValve on " + getContainer() + " with class="+ valve.getClass().getName());      if (valve != null) {        container.getPipeline().addValve(valve);        valve.setCluster(this);      }    }  }}  }
class C{  public static Integer toInteger(String str){  try {    return Integer.valueOf(str);  } catch (  Exception ex) {    return null;  }}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  flushPending();  if (m_tracer != null)   super.fireCommentEvent(ch,start,length);}  }
class C{  public boolean isIgnoringCancelled(){  return ignoreCancelled;}  }
class C{  public static byte[] serialize(Serializable msg) throws IOException {  ByteArrayOutputStream outs=new ByteArrayOutputStream();  ObjectOutputStream out=new ObjectOutputStream(outs);  out.writeObject(msg);  out.flush();  byte[] data=outs.toByteArray();  return data;}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof StringCharacterIterator))   return false;  StringCharacterIterator that=(StringCharacterIterator)obj;  if (hashCode() != that.hashCode())   return false;  if (!text.equals(that.text))   return false;  if (pos != that.pos || begin != that.begin || end != that.end)   return false;  return true;}  }
class C{  public void removePubGruuParam(){  if (parameters != null)   parameters.delete(ParameterNames.PUB_GRUU);}  }
class C{  public LDAPConnection connect(PrintStream out,PrintStream err) throws LDAPConnectionException, ArgumentException {  return connect(this.args,out,err);}  }
class C{  public static KeyStore createClient(KeyStore caKeyStore){  KeyStore clientKeyStore=createKeyStore();  copySelfSignedCertificates(clientKeyStore,caKeyStore);  return clientKeyStore;}  }
class C{  public void run(){  ThreadAuditor.ThreadHandle threadHandle=null;  final UDPMessageProcessor udpMessageProcessor=(UDPMessageProcessor)messageProcessor;  while (true) {    DatagramPacket packet=null;    if (sipStack.threadPoolSize != -1) {      if (threadHandle == null) {        threadHandle=sipStack.getThreadAuditor().addCurrentThread();      }      threadHandle.ping();      try {        DatagramQueuedMessageDispatch work=null;        if (sipStack.getThreadAuditor().isEnabled()) {          work=udpMessageProcessor.messageQueue.poll(threadHandle.getPingIntervalInMillisecs(),TimeUnit.MILLISECONDS);        } else {          work=udpMessageProcessor.messageQueue.take();        }        if (!udpMessageProcessor.isRunning) {          return;        }        if (work == null) {          continue;        } else {          packet=work.packet;          this.incomingPacket=work.packet;        }      } catch (      InterruptedException ex) {        if (!udpMessageProcessor.isRunning) {          return;        }      }    } else {      packet=this.incomingPacket;    }    try {      processIncomingDataPacket(packet);    } catch (    Exception e) {      logger.logError("Error while processing incoming UDP packet" + Arrays.toString(packet.getData()),e);    }    if (sipStack.threadPoolSize == -1) {      return;    }  }}  }
class C{  @Override public boolean isField2(){  return _foo.isField2();}  }
class C{  public Object pop(){  try {    return (stack.pop());  } catch (  EmptyStackException e) {    log.warn("Empty stack (returning null)");    return (null);  }}  }
class C{  public final void testGetModulus(){  RSAPrivateKeySpec rpks=new RSAPrivateKeySpec(BigInteger.valueOf(1234567890L),BigInteger.valueOf(3L));  assertEquals(1234567890L,rpks.getModulus().longValue());}  }
class C{  @Override public int countByField2(boolean field2){  FinderPath finderPath=FINDER_PATH_COUNT_BY_FIELD2;  Object[] finderArgs=new Object[]{field2};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(2);    query.append(_SQL_COUNT_FOO_WHERE);    query.append(_FINDER_COLUMN_FIELD2_FIELD2_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      qPos.add(field2);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  private static boolean matchFiltersURL(FilterMap filterMap,String requestPath){  if (filterMap.getMatchAllUrlPatterns())   return true;  if (requestPath == null)   return false;  String[] testPaths=filterMap.getURLPatterns();  for (int i=0; i < testPaths.length; i++) {    if (matchFiltersURL(testPaths[i],requestPath)) {      return true;    }  }  return false;}  }
class C{  public static <V>List<V> findCachedBitmapsForkey(String key,MemoryCache memoryCache){  List<V> values=new ArrayList<V>();  for (  String k : memoryCache.keys()) {    if (k.startsWith(key)) {      V value=memoryCache.get(k);      values.add(value);    }  }  return values;}  }
class C{  public static Filter parseFilter(String filter,Filter defaultFilter){  try {    return filter == null ? defaultFilter : Filter.valueOf(filter);  } catch (  LocalizedIllegalArgumentException liae) {    DEBUG.error("Unable to construct Filter from " + filter + " -> "+ liae.getMessage()+ "\nFalling back to "+ defaultFilter.toString());  }  return defaultFilter;}  }
class C{  public static String toString(Object o){  Class<?> c=o.getClass();  StringBuilder sb=new StringBuilder();  sb.append(c.getSimpleName()).append('[');  int i=0;  for (  Field f : c.getDeclaredFields()) {    if ((f.getModifiers() & (Modifier.STATIC | Modifier.TRANSIENT)) != 0) {      continue;    }    f.setAccessible(true);    try {      Object value=f.get(o);      if (i++ > 0) {        sb.append(',');      }      sb.append(f.getName());      sb.append('=');      if (value.getClass().isArray()) {        if (value.getClass() == boolean[].class) {          sb.append(Arrays.toString((boolean[])value));        } else         if (value.getClass() == byte[].class) {          sb.append(Arrays.toString((byte[])value));        } else         if (value.getClass() == char[].class) {          sb.append(Arrays.toString((char[])value));        } else         if (value.getClass() == double[].class) {          sb.append(Arrays.toString((double[])value));        } else         if (value.getClass() == float[].class) {          sb.append(Arrays.toString((float[])value));        } else         if (value.getClass() == int[].class) {          sb.append(Arrays.toString((int[])value));        } else         if (value.getClass() == long[].class) {          sb.append(Arrays.toString((long[])value));        } else         if (value.getClass() == short[].class) {          sb.append(Arrays.toString((short[])value));        } else {          sb.append(Arrays.toString((Object[])value));        }      } else       if (value.getClass() == Character.class) {        sb.append('\'').append(value).append('\'');      } else       if (value.getClass() == String.class) {        sb.append('"').append(value).append('"');      } else {        sb.append(value);      }    } catch (    IllegalAccessException unexpected) {      throw new AssertionError(unexpected);    }  }  sb.append("]");  return sb.toString();}  }
class C{  public Set createPeopleContainers(Map peopleContainersMap) throws AMException, SSOException {  Iterator iter=peopleContainersMap.keySet().iterator();  Set peopleContainers=new HashSet();  while (iter.hasNext()) {    String peopleContainerName=(String)iter.next();    StringBuffer peopleContainerDNSB=new StringBuffer();    peopleContainerDNSB.append(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER)).append("=").append(peopleContainerName).append(",").append(super.entryDN);    Map attributes=(Map)peopleContainersMap.get(peopleContainerName);    AMPeopleContainerImpl peopleContainerImpl=new AMPeopleContainerImpl(super.token,peopleContainerDNSB.toString());    peopleContainerImpl.setAttributes(attributes);    peopleContainerImpl.create();    peopleContainers.add(peopleContainerImpl);  }  return peopleContainers;}  }
class C{  private void displayInformationMessage(LocalizableMessage msg,LocalizableMessage title){  Utilities.displayInformationMessage(parent,msg,title);  toFront();}  }
class C{  public void testDivideExpLessZero(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1.64770E+10";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public IteratorSpliterator(Iterator<? extends T> iterator,long size,int characteristics){  this.collection=null;  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  @Override public Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByField2_First(field2,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("field2=");  msg.append(field2);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public String fullTableName(){  return keyspace + "." + tableName;}  }
class C{  public void endMonitoringOf(final InetAddress inetAddress){  candidateSockets.endMonitoringOfSocketIdentifier(fromInet4Address(inetAddress));}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof Locale))   return false;  BaseLocale otherBase=((Locale)obj).baseLocale;  if (!baseLocale.equals(otherBase)) {    return false;  }  if (localeExtensions == null) {    return ((Locale)obj).localeExtensions == null;  }  return localeExtensions.equals(((Locale)obj).localeExtensions);}  }
class C{  public NameID createNameID(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEID);  if (obj == null) {    return new NameIDImpl();  } else {    return (NameID)obj;  }}  }
class C{  public boolean containsAll(Collection c){synchronized (children) {    Iterator i=c.iterator();    while (i.hasNext())     if (!contains(i.next()))     return false;    return true;  }}  }
class C{  public ExpandVetoException(TreeExpansionEvent event){  this(event,null);}  }
class C{  @Override public void connect(SocketAddress endpoint,int timeout) throws IOException {  super.connect(endpoint,timeout);  init();}  }
class C{  private static ByteString createEncodedValue(BigInteger serial,ByteString issuerDN){  return new ByteStringBuilder().appendBytes(issuerDN).appendByte(0).appendBytes(serial.toByteArray()).toByteString();}  }
class C{  public Duration minusMinutes(long minutesToSubtract){  return (minutesToSubtract == Long.MIN_VALUE ? plusMinutes(Long.MAX_VALUE).plusMinutes(1) : plusMinutes(-minutesToSubtract));}  }
class C{  public static boolean canUseAsPort(int port){  return SetupUtils.canUseAsPort(port);}  }
class C{  public String normalizeTargetId(String aTargetId){  if (!isTargetCaseSensitive()) {    return (aTargetId == null ? null : aTargetId.toLowerCase());  } else {    return aTargetId;  }}  }
class C{  public boolean isAdvancedSupported(){  return mAdvancedAdvertisedTxPowerCharacteristic != null || mLockStateCharacteristic != null || mUnlockCharacteristic != null;}  }
class C{  public WorldType type(){  return type;}  }
class C{  public URI(String p_scheme,String p_host,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  this(p_scheme,null,p_host,-1,p_path,p_queryString,p_fragment);}  }
class C{  public void invalidate(){}  }
class C{  private String readLine(InputStream inputStream) throws IOException {  int counter=0;  int increment=1024;  int bufferSize=increment;  byte[] lineBuffer=new byte[bufferSize];  byte[] crlfBuffer=new byte[2];  int crlfCounter=0;  while (true) {    char ch;    int i=inputStream.read();    if (i == -1) {      throw new IOException("End of stream");    } else     ch=(char)(i & 0xFF);    if (this.maxMessageSize > 0) {      this.sizeCounter--;      if (this.sizeCounter <= 0)       throw new IOException("Max size exceeded!");    }    if (ch != '\r')     lineBuffer[counter++]=(byte)(i & 0xFF); else     if (counter == 0)     crlfBuffer[crlfCounter++]=(byte)'\r';    if (ch == '\n') {      if (counter == 1 && crlfCounter > 0) {        crlfBuffer[crlfCounter++]=(byte)'\n';      }      break;    }    if (counter == bufferSize) {      byte[] tempBuffer=new byte[bufferSize + increment];      System.arraycopy((Object)lineBuffer,0,(Object)tempBuffer,0,bufferSize);      bufferSize=bufferSize + increment;      lineBuffer=tempBuffer;    }  }  if (counter == 1 && crlfCounter > 0) {    return new String(crlfBuffer,0,crlfCounter,"UTF-8");  } else {    return new String(lineBuffer,0,counter,"UTF-8");  }}  }
class C{  @Override @SuppressWarnings("dep-ann") public String encodeUrl(String url){  return this._getHttpServletResponse().encodeUrl(url);}  }
class C{  public void resetLabels(){  AbstractInsnNode insn=first;  while (insn != null) {    if (insn instanceof LabelNode) {      ((LabelNode)insn).resetLabel();    }    insn=insn.next;  }}  }
class C{  public void testNegatePositive(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String c="-92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.negate());}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){  firePropertyChange(propertyName,Boolean.valueOf(oldValue),Boolean.valueOf(newValue));}  }
class C{  public boolean isDefined(Object key){  AttributeSet[] as=getAttributes();  for (int i=0; i < as.length; i++) {    if (as[i].isDefined(key)) {      return true;    }  }  return false;}  }
class C{  public String toString(){  return name;}  }
class C{  public static Object unescapeValue(String val){  char[] chars=val.toCharArray();  int beg=0;  int end=chars.length;  while ((beg < end) && isWhitespace(chars[beg])) {    ++beg;  }  while ((beg < end) && isWhitespace(chars[end - 1])) {    --end;  }  if (end != chars.length && (beg < end) && chars[end - 1] == '\\') {    end++;  }  if (beg >= end) {    return "";  }  if (chars[beg] == '#') {    return decodeHexPairs(chars,++beg,end);  }  if ((chars[beg] == '\"') && (chars[end - 1] == '\"')) {    ++beg;    --end;  }  StringBuilder builder=new StringBuilder(end - beg);  int esc=-1;  for (int i=beg; i < end; i++) {    if ((chars[i] == '\\') && (i + 1 < end)) {      if (!Character.isLetterOrDigit(chars[i + 1])) {        ++i;        builder.append(chars[i]);        esc=i;      } else {        byte[] utf8=getUtf8Octets(chars,i,end);        if (utf8.length > 0) {          try {            builder.append(new String(utf8,"UTF8"));          } catch (          java.io.UnsupportedEncodingException e) {          }          i+=utf8.length * 3 - 1;        } else {          throw new IllegalArgumentException("Not a valid attribute string value:" + val + ",improper usage of backslash");        }      }    } else {      builder.append(chars[i]);    }  }  int len=builder.length();  if (isWhitespace(builder.charAt(len - 1)) && esc != (end - 1)) {    builder.setLength(len - 1);  }  return builder.toString();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SecureConversationTokenElement createSecureConversationTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SecureConversationTokenElementImpl();}  }
class C{  public ProtocolException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static List<Foo> toModels(FooSoap[] soapModels){  if (soapModels == null) {    return null;  }  List<Foo> models=new ArrayList<Foo>(soapModels.length);  for (  FooSoap soapModel : soapModels) {    models.add(toModel(soapModel));  }  return models;}  }
class C{  @Override public Socket accept() throws IOException {  if (logger != null) {    logger.println("SSLServerSocketImpl.accept ..");  }  SSLSocketImpl s=new SSLSocketImpl((SSLParametersImpl)sslParameters.clone());  implAccept(s);  s.init();  if (logger != null) {    logger.println("SSLServerSocketImpl: accepted, initialized");  }  return s;}  }
class C{  public Shape modelToView(int p0,Position.Bias b0,int p1,Position.Bias b1,Shape a) throws BadLocationException {  return super.modelToView(p0,b0,p1,b1,adjustAllocation(a));}  }
class C{  @Deprecated public final String readLine() throws IOException {  char buf[]=lineBuffer;  if (buf == null) {    buf=lineBuffer=new char[128];  }  int room=buf.length;  int offset=0;  int c;  loop:   while (true) {switch (c=in.read()) {case -1:case '\n':      break loop;case '\r':    int c2=in.read();  if ((c2 != '\n') && (c2 != -1)) {    if (!(in instanceof PushbackInputStream)) {      this.in=new PushbackInputStream(in);    }    ((PushbackInputStream)in).unread(c2);  }break loop;default :if (--room < 0) {buf=new char[offset + 128];room=buf.length - offset - 1;System.arraycopy(lineBuffer,0,buf,0,offset);lineBuffer=buf;}buf[offset++]=(char)c;break;}}if ((c == -1) && (offset == 0)) {return null;}return String.copyValueOf(buf,0,offset);}  }
class C{  public boolean containsExtensionElementURI(String uri){  if (null == m_ExtensionElementURIs)   return false;  return m_ExtensionElementURIs.contains(uri);}  }
class C{  public static int showConfirmDialog(Component parentComponent,Object message,String title,int optionType,int messageType) throws HeadlessException {  return showConfirmDialog(parentComponent,message,title,optionType,messageType,null);}  }
class C{  public ModifyOperation processModify(ModifyRequest modifyRequest){  return processModify(ByteString.valueOfObject(modifyRequest.getName()),toRawModifications(modifyRequest.getModifications()),to(modifyRequest.getControls()));}  }
class C{  public boolean isSubjectExclusive(String subjectName) throws NameNotFoundException {  return users.isSubjectExclusive(subjectName);}  }
class C{  public TimeDescription createTimeDescription() throws SdpException {  TimeDescriptionImpl timeDescriptionImpl=new TimeDescriptionImpl();  TimeField timeImpl=new TimeField();  timeImpl.setZero();  timeDescriptionImpl.setTime(timeImpl);  return timeDescriptionImpl;}  }
class C{  public AuthTargetMappingBuilder addMapping(TokenTypeId tokenTypeId,String authIndexType,String authIndexValue,Map<String,String> context){  mappings.put(tokenTypeId.getId(),new AuthTarget(authIndexType,authIndexValue,context));  return this;}  }
class C{  public TableResult(int maxrows){  this.maxrows=maxrows;  clear();}  }
class C{  public MagicMimeEntry(final ArrayList<?> entries) throws InvalidMagicMimeEntryException {  this(0,null,entries);}  }
class C{  public static Certificate readCertificate(String certString) throws Exception {  StringReader sr=new StringReader(certString);  PEMReader pw=new PEMReader(sr);  Object object=pw.readObject();  if (object instanceof X509Certificate) {    return (X509Certificate)object;  } else {    throw ResourceException.newResourceException(ResourceException.BAD_REQUEST,"Unsupported certificate format");  }}  }
class C{  @Override public void storeConfig(){  store(server);}  }
class C{  private void completeIfNecessary(final ResourceException e,final PromiseImpl<QueryResponse,ResourceException> handler){  if (pendingResult == null) {    pendingResult=e;  }  completeIfNecessary(handler);}  }
class C{  public void initialize(){  super.initialize();  services=new HashMap(serializable + 1);  bcsListeners=new ArrayList(1);}  }
class C{  public static boolean isInterface(int mod){  return (mod & ACC_INTERFACE) != 0;}  }
class C{  public AllowParser(String allow){  super(allow);}  }
class C{  private Future<Void> publish(Record record){  if (discovery == null) {    try {      start();    } catch (    Exception e) {      throw new IllegalStateException("Cannot create discovery service");    }  }  Future<Void> future=Future.future();  discovery.publish(record,null);  return future;}  }
class C{  public static boolean doesHandleProperties(final Argument argument){  final String id=argument.getLongIdentifier();  return ("add".equals(id) || "remove".equals(id) || "reset".equals(id)|| "set".equals(id));}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public static ImageTypeSpecifier createFromBufferedImageType(int bufferedImageType){  if (bufferedImageType >= BufferedImage.TYPE_INT_RGB && bufferedImageType <= BufferedImage.TYPE_BYTE_INDEXED) {    return getSpecifier(bufferedImageType);  } else   if (bufferedImageType == BufferedImage.TYPE_CUSTOM) {    throw new IllegalArgumentException("Cannot create from TYPE_CUSTOM!");  } else {    throw new IllegalArgumentException("Invalid BufferedImage type!");  }}  }
class C{  public TooManyListenersException(){  super();}  }
class C{  public TemplateLine(AttributeType attributeType,int lineNumber,Tag[] tags,boolean isURL,boolean isBase64){  this.attributeType=attributeType;  this.lineNumber=lineNumber;  this.tags=tags;  this.isURL=isURL;  this.isBase64=isBase64;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(entitygetpublicid.class,args);}  }
class C{  private void unregisterServerHandler(ServerHandler sHandler){  if (sHandler.isReplicationServer()) {    connectedRSs.remove(sHandler.getServerId());  } else {    connectedDSs.remove(sHandler.getServerId());  }}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RequestProofTokenType createRequestProofTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RequestProofTokenTypeImpl();}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  final String resultNS;  NamespaceAlias na=new NamespaceAlias(handler.nextUid());  setPropertiesFromAttributes(handler,rawName,attributes,na);  String prefix=na.getStylesheetPrefix();  if (prefix.equals("#default")) {    prefix="";    na.setStylesheetPrefix(prefix);  }  String stylesheetNS=handler.getNamespaceForPrefix(prefix);  na.setStylesheetNamespace(stylesheetNS);  prefix=na.getResultPrefix();  if (prefix.equals("#default")) {    prefix="";    na.setResultPrefix(prefix);    resultNS=handler.getNamespaceForPrefix(prefix);    if (null == resultNS)     handler.error(XSLTErrorResources.ER_INVALID_NAMESPACE_URI_VALUE_FOR_RESULT_PREFIX_FOR_DEFAULT,null,null);  } else {    resultNS=handler.getNamespaceForPrefix(prefix);    if (null == resultNS)     handler.error(XSLTErrorResources.ER_INVALID_NAMESPACE_URI_VALUE_FOR_RESULT_PREFIX,new Object[]{prefix},null);  }  na.setResultNamespace(resultNS);  handler.getStylesheet().setNamespaceAlias(na);  handler.getStylesheet().appendChild(na);}  }
class C{  public ContainsCondition(String propertyName,String stringValue){  Reject.ifNull(propertyName,stringValue);  this.propertyName=propertyName;  this.propertyStringValue=stringValue;}  }
class C{  public ObjectName preRegister(MBeanServer server,ObjectName name) throws java.lang.Exception {  return name;}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    logger.info("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    TestHarness.fail(ex.getMessage());    System.exit(0);  }}  }
class C{  public TextHitInfo hitTestChar(float x,float y){  return hitTestChar(x,y,getNaturalBounds());}  }
class C{  public Observable<Long> failedCountObservable(String type){  io.vertx.rx.java.ObservableFuture<Long> handler=io.vertx.rx.java.RxHelper.observableFuture();  failedCount(type,handler.toHandler());  return handler;}  }
class C{  public String toASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCII(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  synchronized CSN putLocalOperation(PluginOperation operation){  final CSN csn=csnGenerator.newCSN();  if (!operation.isSynchronizationOperation()) {    pendingChanges.put(csn,new PendingChange(csn,operation,null));  }  return csn;}  }
class C{  public Set createUsers(Map usersMap) throws AMException, SSOException {  String parentOrgDN=getOrganizationDN();  AMOrganizationImpl parentOrg=new AMOrganizationImpl(super.token,parentOrgDN);  Set serviceNames=parentOrg.getOrgTypeAttributes(ADMINISTRATION_SERVICE,REQUIRED_SERVICES_ATTR);  return createUsers(usersMap,serviceNames);}  }
class C{  public static String toUTCDateFormat(final Date date){  return dateToString(date,UTC_DATE_Z_FORMAT,UTC_TIME_ZONE);}  }
class C{  public void testShiftLeft4(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  byte rBytes[]={48,7,12,-97,-42,-117,37,-85,96,126,36,99,64,0,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftLeft(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void copyTessDataFiles(String path){  try {    String fileList[]=getAssets().list(path);    for (    String fileName : fileList) {      String pathToDataFile=DATA_PATH + path + "/"+ fileName;      if (!(new File(pathToDataFile)).exists()) {        InputStream in=getAssets().open(path + "/" + fileName);        OutputStream out=new FileOutputStream(pathToDataFile);        byte[] buf=new byte[1024];        int len;        while ((len=in.read(buf)) > 0) {          out.write(buf,0,len);        }        in.close();        out.close();        Log.d(TAG,"Copied " + fileName + "to tessdata");      }    }  } catch (  IOException e) {    Log.e(TAG,"Unable to copy files to tessdata " + e.toString());  }}  }
class C{  @Override protected void doGet(final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {  request.setCharacterEncoding("UTF-8");  response.setCharacterEncoding("UTF-8");  getResponse(request,response,false);}  }
class C{  public static String rdnValue(RDN rdn){  Reject.ifTrue(rdn.isMultiValued(),"Multivalued RDNs not supported");  return rdn.getFirstAVA().getAttributeValue().toString();}  }
class C{  protected synchronized void sendMessage(byte[] msg,boolean isClient) throws IOException {  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("sendMessage isClient  = " + isClient);  }  Socket sock=null;  IOException problem=null;  try {    sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),this.peerAddress,this.peerPort,this.peerProtocol,msg,isClient,this);  } catch (  IOException any) {    problem=any;    logger.logWarning("Failed to connect " + this.peerAddress + ":"+ this.peerPort+ " but trying the advertised port="+ this.peerPortAdvertisedInHeaders+ " if it's different than the port we just failed on");  }  if (sock == null) {    if (peerAddressAdvertisedInHeaders != null && peerPortAdvertisedInHeaders > 0) {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("Couldn't connect to peerAddress = " + peerAddress + " peerPort = "+ peerPort+ " key = "+ key+ " retrying on peerPortAdvertisedInHeaders "+ peerPortAdvertisedInHeaders);      }      InetAddress address=InetAddress.getByName(peerAddressAdvertisedInHeaders);      sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),address,this.peerPortAdvertisedInHeaders,this.peerProtocol,msg,isClient,this);      this.peerPort=this.peerPortAdvertisedInHeaders;      this.peerAddress=address;      this.key=MessageChannel.getKey(peerAddress,peerPort,"TCP");      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("retry suceeded to peerAddress = " + peerAddress + " peerPortAdvertisedInHeaders = "+ peerPortAdvertisedInHeaders+ " key = "+ key);      }    } else {      throw problem;    }  }  if (sock != mySock && sock != null) {    if (mySock != null) {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("Old socket different than new socket on channel " + key);        logger.logStackTrace();        logger.logWarning("Old socket local ip address " + mySock.getLocalSocketAddress());        logger.logWarning("Old socket remote ip address " + mySock.getRemoteSocketAddress());        logger.logWarning("New socket local ip address " + sock.getLocalSocketAddress());        logger.logWarning("New socket remote ip address " + sock.getRemoteSocketAddress());      }      close(false,false);    }    if (problem == null) {      if (mySock != null) {        if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {          logger.logWarning("There was no exception for the retry mechanism so creating a new thread based on the new socket for incoming " + key);        }      }      mySock=sock;      this.myClientInputStream=mySock.getInputStream();      this.myClientOutputStream=mySock.getOutputStream();      Thread thread=new Thread(this);      thread.setDaemon(true);      thread.setName("TCPMessageChannelThread");      thread.start();    } else {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("There was an exception for the retry mechanism so not creating a new thread based on the new socket for incoming " + key);      }      mySock=sock;    }  }}  }
class C{  public Object remove(Object name){  return map.remove(name);}  }
class C{  public javax.sip.address.TelURL createTelURL(String uri) throws ParseException {  if (uri == null)   throw new NullPointerException("null url");  String telUrl=null;  if (uri.startsWith("tel:")) {    telUrl=uri;  } else {    telUrl="tel:" + uri;  }  try {    StringMsgParser smp=new StringMsgParser();    TelURLImpl timp=(TelURLImpl)smp.parseUrl(telUrl);    return (TelURL)timp;  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }}  }
class C{  protected boolean isPackageSealed(String name,Manifest man){  String path=name.replace('.','/') + '/';  Attributes attr=man.getAttributes(path);  String sealed=null;  if (attr != null) {    sealed=attr.getValue(Name.SEALED);  }  if (sealed == null) {    if ((attr=man.getMainAttributes()) != null) {      sealed=attr.getValue(Name.SEALED);    }  }  return "true".equalsIgnoreCase(sealed);}  }
class C{  @Override public void onTokenRefresh(){  String token=FirebaseInstanceId.getInstance().getToken();  Log.d(TAG,"FCM Token: " + token);  FirebaseMessaging.getInstance().subscribeToTopic(FRIENDLY_ENGAGE_TOPIC);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("(");  sb.append("Signer: " + signerCertPath.getCertificates().get(0));  if (timestamp != null) {    sb.append("timestamp: " + timestamp);  }  sb.append(")");  return sb.toString();}  }
class C{  private DN findEntryDN(String uuid){  try {    final SearchRequest request=newSearchRequest(getBaseDN(),SearchScope.WHOLE_SUBTREE,"entryuuid=" + uuid);    InternalSearchOperation search=conn.processSearch(request);    final SearchResultEntry resultEntry=getFirstResult(search);    if (resultEntry != null) {      return resultEntry.getName();    }  } catch (  DirectoryException e) {  }  return null;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public static void removeMapEntries(Map map,Set set){  if ((set != null) && !set.isEmpty()) {    for (Iterator iter=set.iterator(); iter.hasNext(); ) {      map.remove(iter.next());    }  }}  }
class C{  void elementDequeued(){  if (count == 0)   queueIsEmpty(); else   if (takeIndex == 0)   takeIndexWrapped();}  }
class C{  public boolean equals(Object o){  if (o instanceof Organization) {    Organization org=(Organization)o;    if ((selectedOrgDNs != null) && (org.selectedOrgDNs != null) && (selectedOrgDNs.equals(org.selectedOrgDNs))) {      return true;    }  }  return false;}  }
class C{  private byte[] generateDigest(ByteString password,ByteString challenge){  byte[] p=password.toByteArray();  byte[] c=challenge.toByteArray();synchronized (digestLock) {    if (p.length > HMAC_MD5_BLOCK_LENGTH) {      p=md5Digest.digest(p);    }    byte[] iPadAndData=new byte[HMAC_MD5_BLOCK_LENGTH + c.length];    System.arraycopy(iPad,0,iPadAndData,0,HMAC_MD5_BLOCK_LENGTH);    System.arraycopy(c,0,iPadAndData,HMAC_MD5_BLOCK_LENGTH,c.length);    byte[] oPadAndHash=new byte[HMAC_MD5_BLOCK_LENGTH + MD5_DIGEST_LENGTH];    System.arraycopy(oPad,0,oPadAndHash,0,HMAC_MD5_BLOCK_LENGTH);    for (int i=0; i < p.length; i++) {      iPadAndData[i]^=p[i];      oPadAndHash[i]^=p[i];    }    System.arraycopy(md5Digest.digest(iPadAndData),0,oPadAndHash,HMAC_MD5_BLOCK_LENGTH,MD5_DIGEST_LENGTH);    return md5Digest.digest(oPadAndHash);  }}  }
class C{  public static LogoutResponse processLogoutRequest(LogoutRequest logoutReq,HttpServletRequest request,HttpServletResponse response,PrintWriter out,String binding,String relayState,String idpEntityID,String realm,boolean isVerified) throws SAML2Exception {  Status status=null;  String spEntity=logoutReq.getIssuer().getValue();  Object session=null;  String tmpStr=request.getParameter("isLBReq");  boolean isLBReq=(tmpStr == null || !tmpStr.equals("false"));  try {    do {      String requestId=logoutReq.getID();      SAML2Utils.verifyRequestIssuer(realm,idpEntityID,logoutReq.getIssuer(),requestId);      List siList=logoutReq.getSessionIndex();      if (siList == null) {        debug.error("IDPSingleLogout.processLogoutRequest: " + "session index are null in logout request");        status=SAML2Utils.generateStatus(SAML2Constants.REQUESTER,"");        break;      }      int numSI=siList.size();      Iterator siIter=siList.iterator();      String sessionIndex=null;      if (siIter.hasNext()) {        sessionIndex=(String)siIter.next();      }      if (debug.messageEnabled()) {        debug.message("IDPLogoutUtil.processLogoutRequest: " + "idpEntityID=" + idpEntityID + ", sessionIndex="+ sessionIndex);      }      if (sessionIndex == null) {        debug.error("IDPLogoutUtil.processLogoutRequest: " + "No session index in logout request");        status=SAML2Utils.generateStatus(SAML2Constants.REQUESTER,"");        break;      }      String remoteServiceURL=null;      if (isLBReq) {        String serverId=sessionIndex.substring(sessionIndex.length() - 2);        if (debug.messageEnabled()) {          debug.message("IDPSingleLogout.processLogoutRequest: " + "sessionIndex=" + sessionIndex + ", id="+ serverId);        }        remoteServiceURL=SAML2Utils.getRemoteServiceURL(serverId);      }      IDPSession idpSession=IDPCache.idpSessionsByIndices.get(sessionIndex);      if (idpSession == null && SAML2FailoverUtils.isSAML2FailoverEnabled()) {        IDPSessionCopy idpSessionCopy=null;        try {          idpSessionCopy=(IDPSessionCopy)SAML2FailoverUtils.retrieveSAML2Token(sessionIndex);        } catch (        SAML2TokenRepositoryException se) {          debug.error("IDPSingleLogout.processLogoutRequest: Error while deleting token from " + "SAML2 Token Repository for sessionIndex:" + sessionIndex,se);        }        if (idpSessionCopy != null) {          idpSession=new IDPSession(idpSessionCopy);        } else {          SAML2Utils.debug.error("IDPSessionCopy is NULL!!!");        }      }      if (idpSession == null) {        if (remoteServiceURL != null) {          boolean peerError=false;          String remoteLogoutURL=remoteServiceURL + SAML2Utils.removeDeployUri(request.getRequestURI());          String queryString=request.getQueryString();          if (queryString == null) {            remoteLogoutURL=remoteLogoutURL + "?isLBReq=false";          } else {            remoteLogoutURL=remoteLogoutURL + "?" + queryString+ "&isLBReq=false";          }          LogoutResponse logoutRes=LogoutUtil.forwardToRemoteServer(logoutReq,remoteLogoutURL);          if ((logoutRes != null) && !isNameNotFound(logoutRes)) {            if ((isSuccess(logoutRes)) && (numSI > 0)) {              siList=LogoutUtil.getSessionIndex(logoutRes);              if (siList == null || siList.isEmpty()) {                peerError=false;                break;              }            }          } else {            peerError=true;          }          if (peerError || (siList != null && siList.size() > 0)) {            status=PARTIAL_LOGOUT_STATUS;            break;          } else {            status=SUCCESS_STATUS;            break;          }        } else {          debug.error("IDPLogoutUtil.processLogoutRequest: " + "IDP no longer has this session index " + sessionIndex);          status=SAML2Utils.generateStatus(SAML2Constants.RESPONDER,SAML2Utils.bundle.getString("invalidSessionIndex"));          break;        }      } else {        if (!isVerified && !LogoutUtil.verifySLORequest(logoutReq,realm,logoutReq.getIssuer().getValue(),idpEntityID,SAML2Constants.IDP_ROLE)) {          throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignInRequest"));        }      }      session=idpSession.getSession();      BaseConfigType idpConfig=SAML2Utils.getSAML2MetaManager().getIDPSSOConfig(realm,idpEntityID);      List appLogoutURL=(List)SAML2MetaUtils.getAttributes(idpConfig).get(SAML2Constants.APP_LOGOUT_URL);      if (debug.messageEnabled()) {        debug.message("IDPLogoutUtil.processLogoutRequest: " + "external app logout URL= " + appLogoutURL);      }      if ((appLogoutURL != null) && (appLogoutURL.size() != 0)) {        SAML2Utils.postToAppLogout(request,(String)appLogoutURL.get(0),session);      }      List<NameIDandSPpair> list=idpSession.getNameIDandSPpairs();      int n=list.size();      if (debug.messageEnabled()) {        debug.message("IDPLogoutUtil.processLogoutRequest: " + "NameIDandSPpair for " + sessionIndex + " is "+ list+ ", size="+ n);      }      NameIDandSPpair pair=null;      String spIssuer=logoutReq.getIssuer().getValue();      for (int i=0; i < n; i++) {        pair=list.get(i);        if (pair.getSPEntityID().equals(spIssuer)) {          list.remove(i);          removeTransientNameIDFromCache(pair.getNameID());          break;        }      }      List partners=idpSession.getSessionPartners();      boolean cleanUp=true;      if (CollectionUtils.isNotEmpty(partners)) {        IDPCache.logoutRequestById.put(logoutReq.getID(),logoutReq);        cleanUp=false;      }      n=list.size();      if (n == 0) {        status=destroyTokenAndGenerateStatus(sessionIndex,idpSession.getSession(),request,response,cleanUp);        if (cleanUp) {          IDPCache.idpSessionsByIndices.remove(sessionIndex);          if ((agent != null) && agent.isRunning() && (saml2Svc != null)) {            saml2Svc.setIdpSessionCount((long)IDPCache.idpSessionsByIndices.size());          }          if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {            try {              SAML2FailoverUtils.deleteSAML2Token(sessionIndex);            } catch (            SAML2TokenRepositoryException se) {              debug.error("IDPSingleLogout.processLogoutRequest: Error while deleting token from " + "SAML2 Token Repository for sessionIndex:" + sessionIndex,se);            }          }          IDPCache.authnContextCache.remove(sessionIndex);        }        break;      }      idpSession.setOriginatingLogoutRequestBinding(binding);      if (binding.equals(SAML2Constants.HTTP_REDIRECT) || binding.equals(SAML2Constants.HTTP_POST)) {        idpSession.setOriginatingLogoutRequestID(logoutReq.getID());        idpSession.setOriginatingLogoutSPEntityID(logoutReq.getIssuer().getValue());      }      int soapFailCount=0;      for (int i=0; i < n; i++) {        pair=list.remove(0);        removeTransientNameIDFromCache(pair.getNameID());        String spEntityID=pair.getSPEntityID();        if (debug.messageEnabled()) {          debug.message("IDPSingleLogout.processLogoutRequest: SP for " + sessionIndex + " is "+ spEntityID);        }        List<SingleLogoutServiceElement> slosList=getSPSLOServiceEndpoints(realm,spEntityID);        SPSSOConfigElement spConfig=null;        spConfig=SAML2Utils.getSAML2MetaManager().getSPSSOConfig(realm,spEntityID);        String uri=request.getRequestURI();        String metaAlias=SAML2MetaUtils.getMetaAliasByUri(uri);        HashMap paramsMap=new HashMap();        paramsMap.put(SAML2Constants.ROLE,SAML2Constants.IDP_ROLE);        StringBuffer requestID=null;        SingleLogoutServiceElement logoutEndpoint=LogoutUtil.getMostAppropriateSLOServiceLocation(slosList,idpSession.getOriginatingLogoutRequestBinding());        if (logoutEndpoint == null) {          continue;        }        try {          requestID=LogoutUtil.doLogout(metaAlias,spEntityID,null,logoutEndpoint,relayState,sessionIndex,pair.getNameID(),request,response,paramsMap,spConfig);        } catch (        SAML2Exception ex) {          if (logoutEndpoint.getBinding().equals(SAML2Constants.SOAP)) {            debug.error("IDPSingleLogout.initiateLogoutRequest:",ex);            soapFailCount++;            continue;          } else {            throw ex;          }        }        String bindingUsed=logoutEndpoint.getBinding();        if (bindingUsed.equals(SAML2Constants.HTTP_REDIRECT) || bindingUsed.equals(SAML2Constants.HTTP_POST)) {          String requestIDStr=requestID.toString();          if (requestIDStr != null && requestIDStr.length() != 0) {            idpSession.setPendingLogoutRequestID(requestIDStr);          }          return null;        }      }      if (soapFailCount == n) {        throw new SAML2Exception(SAML2Utils.bundle.getString("sloFailed"));      } else       if (soapFailCount > 0) {        throw new SAML2Exception(SAML2Utils.bundle.getString("partialLogout"));      }      spEntity=idpSession.getOriginatingLogoutSPEntityID();      if (binding.equals(SAML2Constants.HTTP_REDIRECT) || binding.equals(SAML2Constants.HTTP_POST)) {        sendLastResponse(idpSession,null,request,response,out,sessionIndex,session,realm,idpEntityID,relayState);        return null;      } else {        status=destroyTokenAndGenerateStatus(sessionIndex,idpSession.getSession(),request,response,true);        if (cleanUp) {          IDPCache.idpSessionsByIndices.remove(sessionIndex);          if ((agent != null) && agent.isRunning() && (saml2Svc != null)) {            saml2Svc.setIdpSessionCount((long)IDPCache.idpSessionsByIndices.size());          }          if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {            try {              SAML2FailoverUtils.deleteSAML2Token(sessionIndex);            } catch (            SAML2TokenRepositoryException se) {              debug.error("IDPSingleLogout.processLogoutRequest: Error while deleting token from " + "SAML2 Token Repository for sessionIndex:" + sessionIndex,se);            }          }          IDPCache.authnContextCache.remove(sessionIndex);        }      }    } while (false);  } catch (  SessionException ssoe) {    debug.error("IDPSingleLogout.processLogoutRequest: unable to get meta for ",ssoe);    status=SAML2Utils.generateStatus(idpEntityID,ssoe.toString());  }catch (  SAML2Exception e) {    e.printStackTrace();    SAML2Utils.debug.error("DB ERROR!!!");  }  boolean isMultiProtocol=false;  try {    SessionProvider provider=SessionManager.getProvider();    if ((session != null) && (provider.isValid(session)) && MultiProtocolUtils.isMultipleProtocolSession(session,SingleLogoutManager.SAML2)) {      isMultiProtocol=true;    }  } catch (  SessionException ex) {  }  LogoutResponse logRes=LogoutUtil.generateResponse(status,logoutReq.getID(),SAML2Utils.createIssuer(idpEntityID),realm,SAML2Constants.IDP_ROLE,null);  if (!isMultiProtocol) {    return logRes;  } else {    try {      Set set=new HashSet();      set.add(session);      String sessUser=SessionManager.getProvider().getPrincipalName(session);      boolean isSOAPInitiated=binding.equals(SAML2Constants.SOAP);      SingleLogoutServiceElement endpoint=getLogoutResponseEndpoint(realm,spEntity,binding);      String location=getResponseLocation(endpoint);      logRes.setDestination(XMLUtils.escapeSpecialCharacters(location));      debug.message("IDPSingleLogout.processLogReq : call MP");      int retStat=SingleLogoutManager.getInstance().doIDPSingleLogout(set,sessUser,request,response,isSOAPInitiated,false,SingleLogoutManager.SAML2,realm,idpEntityID,spEntity,relayState,logoutReq.toXMLString(true,true),logRes.toXMLString(true,true),SingleLogoutManager.LOGOUT_SUCCEEDED_STATUS);      if (retStat != SingleLogoutManager.LOGOUT_REDIRECTED_STATUS) {        logRes=updateLogoutResponse(logRes,retStat);        return logRes;      } else {        return null;      }    } catch (    SessionException ex) {      debug.error("IDPSingleLogout.ProcessLogoutRequest: SP " + "initiated SOAP logout",ex);      throw new SAML2Exception(ex.getMessage());    }catch (    Exception ex) {      debug.error("IDPSingleLogout.ProcessLogoutRequest: SP " + "initiated SOAP logout (MP)",ex);      throw new SAML2Exception(ex.getMessage());    }  }}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=getCrossCheckStateCount();  int i=startI;  while (i >= 0 && image.get(centerJ,i)) {    stateCount[2]++;    i--;  }  if (i < 0) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i)) {    stateCount[2]++;    i++;  }  if (i == maxI) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (i == maxI || stateCount[3] >= maxCount) {    return Float.NaN;  }  while (i < maxI && image.get(centerJ,i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  public JKDefaultTableModel(){  this(0,0);}  }
class C{  boolean validatePlugin(SSOToken token,String attrName,Set values) throws SMSException {  AttributeSchemaImpl as=getAttributeSchema(attrName);  if (as == null) {    String[] args={attrName};    throw new InvalidAttributeNameException(IUMSConstants.UMS_BUNDLE_NAME,"sms-validation_failed_invalid_name",args);  }  String validatorName=as.getValidator();  if (validatorName == null) {    return true;  }  if (values == Collections.EMPTY_SET && !as.getExampleValues().isEmpty()) {    values=as.getExampleValues();  }  String[] validators=validatorName.split(" ");  for (  String validator : validators) {    AttributeSchemaImpl validatorAttrSchema=getAttributeSchema(validator);    if (validatorAttrSchema != null) {      boolean isServerMode=SystemProperties.isServerMode();      Set javaClasses=validatorAttrSchema.getDefaultValues();      for (      Object jClass : javaClasses) {        String javaClass=(String)jClass;        try {          serverEndAttrValidation(as,attrName,values,javaClass);        } catch (        SMSException e) {          if (!isServerMode) {            clientEndAttrValidation(token,as,attrName,values,javaClass);          } else {            throw e;          }        }      }    }  }  return true;}  }
class C{  public static boolean isXML11NCName(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public JKExceptionHandlerInfo(){}  }
class C{  public String toXMLString() throws FSMsgException {  return this.toXMLString(true,true);}  }
class C{  @Override public long dynamicQueryCount(DynamicQuery dynamicQuery,Projection projection){  return fooPersistence.countWithDynamicQuery(dynamicQuery,projection);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static Mp4BoxHeader seekWithinLevel(ByteBuffer data,String id) throws IOException {  logger.finer("Started searching for:" + id + " in bytebuffer at"+ data.position());  Mp4BoxHeader boxHeader=new Mp4BoxHeader();  if (data.remaining() >= Mp4BoxHeader.HEADER_LENGTH) {    boxHeader.update(data);  } else {    return null;  }  while (!boxHeader.getId().equals(id)) {    logger.finer("Found:" + boxHeader.getId() + " Still searching for:"+ id+ " in bytebuffer at"+ data.position());    if (boxHeader.getLength() < Mp4BoxHeader.HEADER_LENGTH) {      return null;    }    if (data.remaining() < (boxHeader.getLength() - HEADER_LENGTH)) {      return null;    }    data.position(data.position() + (boxHeader.getLength() - HEADER_LENGTH));    if (data.remaining() >= Mp4BoxHeader.HEADER_LENGTH) {      boxHeader.update(data);    } else {      return null;    }  }  logger.finer("Found:" + id + " in bytebuffer at"+ data.position());  return boxHeader;}  }
class C{  public DefaultTreeModel buildTree(RandomAccessFile raf,boolean closeExit) throws IOException, CannotReadException {  FileChannel fc=null;  try {    fc=raf.getChannel();    fc.position(0);    rootNode=new DefaultMutableTreeNode();    dataTree=new DefaultTreeModel(rootNode);    ByteBuffer headerBuffer=ByteBuffer.allocate(Mp4BoxHeader.HEADER_LENGTH);    while (fc.position() < fc.size()) {      Mp4BoxHeader boxHeader=new Mp4BoxHeader();      headerBuffer.clear();      fc.read(headerBuffer);      headerBuffer.rewind();      try {        boxHeader.update(headerBuffer);      } catch (      NullBoxIdException ne) {        if (moovNode != null & mdatNode != null) {          NullPadding np=new NullPadding(fc.position() - Mp4BoxHeader.HEADER_LENGTH,fc.size());          DefaultMutableTreeNode trailingPaddingNode=new DefaultMutableTreeNode(np);          rootNode.add(trailingPaddingNode);          logger.warning(ErrorMessage.NULL_PADDING_FOUND_AT_END_OF_MP4.getMsg(np.getFilePos()));          break;        } else {          throw ne;        }      }      boxHeader.setFilePos(fc.position() - Mp4BoxHeader.HEADER_LENGTH);      DefaultMutableTreeNode newAtom=new DefaultMutableTreeNode(boxHeader);      if (boxHeader.getId().equals(Mp4AtomIdentifier.MOOV.getFieldName())) {        if (moovNode != null & mdatNode != null) {          logger.warning(ErrorMessage.ADDITIONAL_MOOV_ATOM_AT_END_OF_MP4.getMsg(fc.position() - Mp4BoxHeader.HEADER_LENGTH));          break;        }        moovNode=newAtom;        moovHeader=boxHeader;        long filePosStart=fc.position();        moovBuffer=ByteBuffer.allocate(boxHeader.getDataLength());        int bytesRead=fc.read(moovBuffer);        if (bytesRead < boxHeader.getDataLength()) {          String msg=ErrorMessage.ATOM_LENGTH_LARGER_THAN_DATA.getMsg(boxHeader.getId(),boxHeader.getDataLength(),bytesRead);          throw new CannotReadException(msg);        }        moovBuffer.rewind();        buildChildrenOfNode(moovBuffer,newAtom);        fc.position(filePosStart);      } else       if (boxHeader.getId().equals(Mp4AtomIdentifier.FREE.getFieldName())) {        freeNodes.add(newAtom);      } else       if (boxHeader.getId().equals(Mp4AtomIdentifier.MDAT.getFieldName())) {        mdatNode=newAtom;        mdatNodes.add(newAtom);      }      rootNode.add(newAtom);      fc.position(fc.position() + boxHeader.getDataLength());    }    return dataTree;  }  finally {    if (mdatNode == null) {      throw new CannotReadException(ErrorMessage.MP4_CANNOT_FIND_AUDIO.getMsg());    }    if (closeExit) {      fc.close();    }  }}  }
class C{  @Override public boolean isShow(HttpServletRequest request) throws PortalException {  return true;}  }
class C{  public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,byte[] content) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("missing parameters");  SIPResponse sipResponse=new SIPResponse();  StatusLine statusLine=new StatusLine();  statusLine.setStatusCode(statusCode);  String reason=SIPResponse.getReasonPhrase(statusCode);  if (reason == null)   throw new ParseException(statusCode + " : Unknown",0);  statusLine.setReasonPhrase(reason);  sipResponse.setStatusLine(statusLine);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setContent(content,contentType);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  RomanDigit(char digit,int value,boolean pre){  this.digit=digit;  this.value=value;  this.pre=pre;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean success;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  success=domImpl.hasFeature("Blah Blah","");  assertFalse("domimplementationhasfeature02",success);}  }
class C{  public synchronized void mouseWheel(int wheelAmt){  peer.mouseWheel(wheelAmt);  afterEvent();}  }
class C{  public static void clearBlock(){synchronized (monitor) {    BlockingPojo.block=false;    monitor.notifyAll();  }}  }
class C{  public MapboxDirections(Builder builder){  this.builder=builder;}  }
class C{  public static String toString(final Entry entry){  final StringWriter writer=new StringWriter(128);  try (LDIFEntryWriter ldifWriter=new LDIFEntryWriter(writer)){    ldifWriter.setAddUserFriendlyComments(true).writeEntry(entry);  } catch (  final IOException e) {    throw new IllegalStateException(e);  }  return writer.toString();}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  address.encode(retval);  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty()) {    retval=retval.append(SEMICOLON);    retval=this.parameters.encode(retval);  }  return retval;}  }
class C{  public EntryGenerator(final List<String> templateLines){  Reject.ifNull(templateLines);  this.templateLines=templateLines.toArray(new String[templateLines.size()]);}  }
class C{  public Resource createResource(Element elem) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESOURCE,elem);  if (obj == null) {    return new ResourceImpl(elem);  } else {    return (Resource)obj;  }}  }
class C{  public CameraHelper(Activity activity){  this.activity=activity;}  }
class C{  public void deleteAdministrator(Map<AdministratorProperty,Object> adminProperties) throws ADSContextException {  DN dnCentralAdmin=getAdministratorDN(getAdministratorUID(adminProperties));  try {    throwIfNotSuccess(connectionWrapper.getConnection().delete(newDeleteRequest(dnCentralAdmin)));  } catch (  EntryNotFoundException x) {    throw new ADSContextException(ErrorType.NOT_YET_REGISTERED);  }catch (  AuthorizationException x) {    throw new ADSContextException(ErrorType.ACCESS_PERMISSION);  }catch (  LdapException x) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }}  }
class C{  @Override public int countByField2(boolean field2){  FinderPath finderPath=FINDER_PATH_COUNT_BY_FIELD2;  Object[] finderArgs=new Object[]{field2};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(2);    query.append(_SQL_COUNT_FOO_WHERE);    query.append(_FINDER_COLUMN_FIELD2_FIELD2_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      qPos.add(field2);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public void resetFederateCookie(){  try {    if (userID == null || userID.length() < 1) {      return;    } else {      Cookie fedCookie;      String cookieValue;      if (managerInst.hasAnyActiveFederation(userID)) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("User : " + userID + " Federation Exists : "+ IFSConstants.YES);        }        cookieValue=IFSConstants.YES;      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("User : " + userID + " Federation Exists : "+ IFSConstants.NO);        }        cookieValue=IFSConstants.NO;      }      FSUtils.debug.message("Setting Path to /");      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Setting Age to " + IFSConstants.PERSISTENT_COOKIE_AGE + " Age");      }      Set<String> domains=SystemConfigurationUtil.getCookieDomainsForRequest(request);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Provider cookie domain list is " + domains);      }      for (      String domain : domains) {        CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(FEDERATE_COOKIE_NAME,cookieValue,IFSConstants.PERSISTENT_COOKIE_AGE,"/",domain));      }    }  } catch (  FSAccountMgmtException e) {    FSUtils.debug.error("Unable to read user federation information",e);    return;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.SecurityTokenReferenceElement createSecurityTokenReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.SecurityTokenReferenceElementImpl();}  }
class C{  public PdfDocumentEvent(String type,PdfDocument document){  super(type);  this.document=document;}  }
class C{  public void add(Permission permission){  if (!(permission instanceof BasicPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");  BasicPermission bp=(BasicPermission)permission;  if (permClass == null) {    permClass=bp.getClass();  } else {    if (bp.getClass() != permClass)     throw new IllegalArgumentException("invalid permission: " + permission);  }synchronized (this) {    perms.put(bp.getCanonicalName(),permission);  }  if (!all_allowed) {    if (bp.getCanonicalName().equals("*"))     all_allowed=true;  }}  }
class C{  private void populateMap(Map<String,StateInfo> map,StateInfo stateInfo){  String serverId=stateInfo.id;  map.put(serverId,stateInfo);  if (!stateInfo.isUp) {    down.add(serverId);  }  serverSelectionList[getNextSelected()]=stateInfo;}  }
class C{  private void readServiceConfig() throws SSOException, SMSException {  if (debug.messageEnabled()) {    debug.message("G11Settings::ReadServiceConfig");  }  SSOToken internalToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  serviceSchemaManager=new ServiceSchemaManager(G11N_SETTINGS_SERVICE_NAME,internalToken);  ServiceSchema gsc=serviceSchemaManager.getGlobalSchema();  rawServiceData=gsc.getAttributeDefaults();}  }
class C{  private int monthLength(int month){  int year=internalGet(YEAR);  if (internalGetEra() == BCE) {    year=1 - year;  }  return monthLength(month,year);}  }
class C{  public JKReportException(String arg0,Throwable arg1,boolean arg2,boolean arg3){  super(arg0,arg1,arg2,arg3);}  }
class C{  public PushDeviceSettings(String sharedSecret,String deviceName){  super();  setSharedSecret(sharedSecret);  setDeviceName(deviceName);}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  public void test_getPrivateExponent() throws Exception {  KeyFactory gen=KeyFactory.getInstance("RSA");  final BigInteger n=BigInteger.valueOf(3233);  final BigInteger d=BigInteger.valueOf(2753);  RSAPrivateKey key=(RSAPrivateKey)gen.generatePrivate(new RSAPrivateKeySpec(n,d));  assertEquals("invalid private exponent",d,key.getPrivateExponent());}  }
class C{  private static int jacobiSymbol(int p,BigInteger n){  if (p == 0)   return 0;  int j=1;  int u=n.mag[n.mag.length - 1];  if (p < 0) {    p=-p;    int n8=u & 7;    if ((n8 == 3) || (n8 == 7))     j=-j;  }  while ((p & 3) == 0)   p>>=2;  if ((p & 1) == 0) {    p>>=1;    if (((u ^ (u >> 1)) & 2) != 0)     j=-j;  }  if (p == 1)   return j;  if ((p & u & 2) != 0)   j=-j;  u=n.mod(BigInteger.valueOf(p)).intValue();  while (u != 0) {    while ((u & 3) == 0)     u>>=2;    if ((u & 1) == 0) {      u>>=1;      if (((p ^ (p >> 1)) & 2) != 0)       j=-j;    }    if (u == 1)     return j;    assert (u < p);    int t=u;    u=p;    p=t;    if ((u & p & 2) != 0)     j=-j;    u%=p;  }  return 0;}  }
class C{  private PackageDeclare parse_pkg_declare() throws SyntaxException {  LineCol lineCol=current.getLineCol();  nextNode(false);  if (current instanceof Element) {    StringBuilder sb=new StringBuilder();    boolean isName=true;    while (current != null && (current instanceof Element)) {      Element elem=(Element)current;      String s=elem.getContent();      if (!isName && !s.equals("::")) {        err.UnexpectedTokenException("::",s,elem.getLineCol());        err.debug("make it '::'");        s="::";      }      isName=!isName;      sb.append(s);      nextNode(true);    }    if (isName) {      sb.delete(sb.length() - 2,sb.length());      err.SyntaxException("package name should end with a valid name",lineCol);      return new PackageDeclare(new AST.PackageRef(sb.toString(),LineCol.SYNTHETIC),lineCol);    }    AST.PackageRef pkg=new AST.PackageRef(sb.toString(),lineCol);    return new PackageDeclare(pkg,lineCol);  } else {    err.UnexpectedTokenException("package declare",current.toString(),current.getLineCol());    err.debug("let it be (default package)");    return new PackageDeclare(new AST.PackageRef("",LineCol.SYNTHETIC),lineCol);  }}  }
class C{  public static boolean[] copyOf(boolean[] original,int newLength){  boolean[] copy=new boolean[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){  if (ownsSelection) {    ownsSelection=false;    if (component != null && !component.hasFocus()) {      setSelectionVisible(false);    }  }}  }
class C{  public static MetadataBlockHeader readHeader(RandomAccessFile raf) throws CannotReadException, IOException {  ByteBuffer rawdata=ByteBuffer.allocate(HEADER_LENGTH);  int bytesRead=raf.getChannel().read(rawdata);  if (bytesRead < HEADER_LENGTH) {    throw new IOException("Unable to read required number of databytes read:" + bytesRead + ":required:"+ HEADER_LENGTH);  }  rawdata.rewind();  return new MetadataBlockHeader(rawdata);}  }
class C{  static void createPolicyTree(String configName,String configId,ServiceConfigManager scm,String org) throws NoPermissionException, PolicyException, SSOException {  try {    ServiceConfig pConfig=scm.getOrganizationConfig(org,null);    if (pConfig == null) {      scm.createOrganizationConfig(org,null);      pConfig=scm.getOrganizationConfig(org,null);    }    pConfig.addSubConfig(configName,configId,0,null);  } catch (  ServiceAlreadyExistsException se) {    if (debug.messageEnabled()) {      debug.message("PolicyManager->createPolicyTree: Name: " + configName + " ID: "+ configId+ " Policy service already exists under org->"+ org);    }  }catch (  SMSException e) {    String[] objs={org};    if (e.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {      throw (new NoPermissionException(ResBundleUtils.rbName,"insufficient_access_rights",null));    } else {      throw (new PolicyException(ResBundleUtils.rbName,"unable_to_create_policy_for_org",objs,e));    }  }}  }
class C{  public boolean contains(Object value){  if (value == null) {    throw new NullPointerException();  }  boolean found=false;  rwlock.readLock().lock();  try {    Entry tab[]=table;    for (int i=tab.length; i-- > 0; ) {      for (Entry e=tab[i]; (e != null) && !found; e=e.next) {        found=e.value.equals(value);      }    }  }  finally {    rwlock.readLock().unlock();  }  return found;}  }
class C{  public int link(final int size){  _currentFrameBottom=_frameTop;  _frameTop+=size;  if (_frameTop >= _stackFrames.length) {    XObject newsf[]=new XObject[_stackFrames.length + XPathContext.RECURSIONLIMIT + size];    System.arraycopy(_stackFrames,0,newsf,0,_stackFrames.length);    _stackFrames=newsf;  }  if (_linksTop + 1 >= _links.length) {    int newlinks[]=new int[_links.length + (CLEARLIMITATION * 2)];    System.arraycopy(_links,0,newlinks,0,_links.length);    _links=newlinks;  }  _links[_linksTop++]=_currentFrameBottom;  return _currentFrameBottom;}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  public final void testEncryptedPrivateKeyInfoStringbyteArray6(){  try {    new EncryptedPrivateKeyInfo("0",new byte[]{});    fail("NoSuchAlgorithmException expected");  } catch (  NoSuchAlgorithmException e) {  }}  }
class C{  public void warning(String msg){  getDebugServiceInstance().warning(msg,null);}  }
class C{  public Observable<ConnectionState> connectionObservable(){  return mConnectionStatePublishSubject.asObservable();}  }
class C{  public boolean isSecure(){  return request != null ? this.request.isSecure() : isSecure;}  }
class C{  protected void shiftGapStartDown(int newGapStart){  int adjustIndex=findMarkAdjustIndex(newGapStart);  int n=marks.size();  int g0=getGapStart();  int g1=getGapEnd();  for (int i=adjustIndex; i < n; i++) {    MarkData mark=marks.elementAt(i);    if (mark.index > g0) {      break;    }    mark.index=g1;  }  super.shiftGapStartDown(newGapStart);  resetMarksAtZero();}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfStream makeIndirect(PdfDocument document,PdfIndirectReference reference){  return (PdfStream)super.makeIndirect(document,reference);}  }
class C{  public WeakHashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Initial Capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal Load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  table=newTable(capacity);  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);}  }
class C{  public FactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  public boolean ready() throws IOException {  return sd.ready();}  }
class C{  public FrameView(Element elem){  super(elem);}  }
class C{  @Override public String toString(){  String pals="<no principals>";  if (principals != null && principals.length > 0) {    StringBuilder palBuf=new StringBuilder("(principals ");    for (int i=0; i < principals.length; i++) {      palBuf.append(principals[i].getClass().getName() + " \"" + principals[i].getName()+ "\"");      if (i < principals.length - 1)       palBuf.append(",\n"); else       palBuf.append(")\n");    }    pals=palBuf.toString();  }  PermissionCollection pc=Policy.isSet() && seeAllp() ? mergePermissions() : getPermissions();  return "ProtectionDomain " + " " + codesource + "\n"+ " "+ classloader+ "\n"+ " "+ pals+ "\n"+ " "+ pc+ "\n";}  }
class C{  public void addUniqueAttribute(String name,String value,int flags) throws SAXException {  try {    final java.io.Writer writer=m_writer;    if ((flags & NO_BAD_CHARS) > 0 && m_htmlcharInfo.onlyQuotAmpLtGt) {      writer.write(' ');      writer.write(name);      writer.write("=\"");      writer.write(value);      writer.write('"');    } else     if ((flags & HTML_ATTREMPTY) > 0 && (value.length() == 0 || value.equalsIgnoreCase(name))) {      writer.write(' ');      writer.write(name);    } else {      writer.write(' ');      writer.write(name);      writer.write("=\"");      if ((flags & HTML_ATTRURL) > 0) {        writeAttrURI(writer,value,m_specialEscapeURLs);      } else {        writeAttrString(writer,value,this.getEncoding());      }      writer.write('"');    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public String toPolyline(int precision){  return PolylineUtils.encode(getCoordinates(),precision);}  }
class C{  public static String makeRelatedSessionID(String encryptedID,SessionID prototype) throws SessionException {  prototype.parseSessionString();  return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    Response okResponse=messageFactory.createResponse(Response.OK,request);    FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);    from.removeParameter("tag");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    sipProvider.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void sort(){  if (hasQualifier()) {    XMPNode[] quals=(XMPNode[])getQualifier().toArray(new XMPNode[getQualifierLength()]);    int sortFrom=0;    while (quals.length > sortFrom && (XMPConst.XML_LANG.equals(quals[sortFrom].getName()) || "rdf:type".equals(quals[sortFrom].getName()))) {      quals[sortFrom].sort();      sortFrom++;    }    Arrays.sort(quals,sortFrom,quals.length);    ListIterator it=qualifier.listIterator();    for (int j=0; j < quals.length; j++) {      it.next();      it.set(quals[j]);      quals[j].sort();    }  }  if (hasChildren()) {    if (!getOptions().isArray()) {      Collections.sort(children);    }    for (Iterator it=iterateChildren(); it.hasNext(); ) {      ((XMPNode)it.next()).sort();    }  }}  }
class C{  @Override @Deprecated public void shutdown(){  throw new UnsupportedOperationException();}  }
class C{  private static MethodHandle fillToRight(int nargs){  MethodHandle filler=FILL_ARRAY_TO_RIGHT[nargs];  if (filler != null)   return filler;  filler=buildFiller(nargs);  assert (assertCorrectArity(filler,nargs - LEFT_ARGS + 1));  return FILL_ARRAY_TO_RIGHT[nargs]=filler;}  }
class C{  public static void initiateLogoutRequest(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String binding,Map paramsMap,SAML2EventLogger auditor) throws SAML2Exception {  initiateLogoutRequest(request,response,out,binding,paramsMap,null,null,null,auditor);}  }
class C{  public void deleteField(FieldKey fieldKey) throws KeyNotFoundException {  if (fieldKey.equals(FieldKey.COVER_ART)) {    images.clear();  } else {    tag.deleteField(fieldKey);  }}  }
class C{  private List createArtifact(Object sso,String target,HttpServletRequest request,HttpServletResponse response,String targetUrl,String version) throws SAMLException {  if (sso == null || target == null || target.length() == 0 || version == null || version.length() == 0) {    throw new SAMLException(SAMLUtils.bundle.getString("createArtifactError"));  }  List artifactList=new ArrayList();  AssertionManager assertManager=AssertionManager.getInstance();  try {    SessionProvider sessionProvider=SessionManager.getProvider();    AssertionArtifact artifact=assertManager.createAssertionArtifact(sessionProvider.getSessionID(sso),target,request,response,targetUrl,version);    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("AssertionArtifact id = " + artifact.toString());    }    String artid=artifact.getAssertionArtifact();    artifactList.add(artid);  } catch (  SessionException se) {    SAMLUtils.debug.error("Couldn't get SessionProvider.");    throw new SAMLException(SAMLUtils.bundle.getString("nullSessionProvider"));  }  return artifactList;}  }
class C{  public void reset(){  mLogFilterText="";  mLogPriorityLevel="";  mFilteredLogcatData.clear();  mFilteredLogcatData.addAll(mLogcatData);  notifyDataSetChanged();}  }
class C{  private static Charset toCharset(String csn){  Objects.requireNonNull(csn,"charsetName");  try {    return Charset.forName(csn);  } catch (  IllegalCharsetNameException|UnsupportedCharsetException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public void commitTransaction() throws SQLException {  try {    this.currentConection.commit();  } catch (  SQLException e) {    if (this.currentConection != null) {      this.currentConection.rollback();    }  } finally {    this.currentConection.setAutoCommit(false);  }}  }
class C{  public TransformerFactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public BAD_OPERATION(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  private void unregisterWrapper(Wrapper wrapper){  Context context=((Context)wrapper.getParent());  String contextPath=context.getPath();  String wrapperName=wrapper.getName();  if ("/".equals(contextPath)) {    contextPath="";  }  String version=context.getWebappVersion();  String hostName=context.getParent().getName();  String[] mappings=wrapper.findMappings();  for (  String mapping : mappings) {    mapper.removeWrapper(hostName,contextPath,version,mapping);  }  if (log.isDebugEnabled()) {    log.debug(sm.getString("mapperListener.unregisterWrapper",wrapperName,contextPath,service));  }}  }
class C{  public IdleTimeoutAttribute(byte[] octets){  super(octets);  timeout=OctetUtils.toIntVal(octets);}  }
class C{  @Override public void pack(){  setPreferredSize(new Dimension(500,300));  addComponentListener(new MinimumSizeComponentListener(this,500,300));  super.pack();  closeButton.requestFocusInWindow();  getRootPane().setDefaultButton(closeButton);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  SerializationHandler rhandler=transformer.getSerializationHandler();  try {    rhandler.startPrefixMapping(getPrefix(),getNamespace());    executeNSDecls(transformer);    rhandler.startElement(getNamespace(),getLocalName(),getRawName());  } catch (  SAXException se) {    throw new TransformerException(se);  }  TransformerException tException=null;  try {    super.execute(transformer);    if (null != m_avts) {      int nAttrs=m_avts.size();      for (int i=(nAttrs - 1); i >= 0; i--) {        AVT avt=(AVT)m_avts.get(i);        XPathContext xctxt=transformer.getXPathContext();        int sourceNode=xctxt.getCurrentNode();        String stringedValue=avt.evaluate(xctxt,sourceNode,this);        if (null != stringedValue) {          rhandler.addAttribute(avt.getURI(),avt.getName(),avt.getRawName(),"CDATA",stringedValue,false);        }      }    }    transformer.executeChildTemplates(this,true);  } catch (  TransformerException te) {    tException=te;  }catch (  SAXException se) {    tException=new TransformerException(se);  }  try {    rhandler.endElement(getNamespace(),getLocalName(),getRawName());  } catch (  SAXException se) {    if (tException != null)     throw tException; else     throw new TransformerException(se);  }  if (tException != null)   throw tException;  unexecuteNSDecls(transformer);  try {    rhandler.endPrefixMapping(getPrefix());  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  private void initializeScheme(String p_uriSpec) throws MalformedURIException {  int uriSpecLen=p_uriSpec.length();  int index=0;  String scheme=null;  char testChar='\0';  while (index < uriSpecLen) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':' || testChar == '/' || testChar == '?' || testChar == '#') {      break;    }    index++;  }  scheme=p_uriSpec.substring(0,index);  if (scheme.length() == 0) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_SCHEME_INURI,null));  } else {    setScheme(scheme);  }}  }
class C{  public Powerface(StageBlock collidingBlock,float xPos,float yPos,float powerSize){  super("M 0,0 L 0,0 " + powerSize + ",0 "+ powerSize+ ","+ powerSize+ ", 0,"+ powerSize+ ", 0,0",xPos,yPos,0,0,new Image("res/sprites/stage/powerups/madface.png",powerSize,powerSize,true,true,true));  pushThreshold=(float)0.5 * REL_HEIGHT;  this.collidingBlock=collidingBlock;}  }
class C{  public ImmutableDescriptor(Map<String,?> fields){  if (fields == null)   throw new IllegalArgumentException("Null Map");  SortedMap<String,Object> map=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);  for (  Map.Entry<String,?> entry : fields.entrySet()) {    String name=entry.getKey();    if (name == null || name.equals(""))     throw new IllegalArgumentException("Empty or null field name");    if (map.containsKey(name))     throw new IllegalArgumentException("Duplicate name: " + name);    map.put(name,entry.getValue());  }  int size=map.size();  this.names=map.keySet().toArray(new String[size]);  this.values=map.values().toArray(new Object[size]);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int which=getArg0AsNode(xctxt);  if (DTM.NULL != which) {    return new XString("N" + Integer.toHexString(which).toUpperCase());  } else   return XString.EMPTYSTRING;}  }
class C{  public List(Function1 initializer) throws Exception {  initializer.apply(this);}  }
class C{  public boolean isPopupVisible(JComboBox a){  boolean returnValue=((ComboBoxUI)(uis.elementAt(0))).isPopupVisible(a);  for (int i=1; i < uis.size(); i++) {    ((ComboBoxUI)(uis.elementAt(i))).isPopupVisible(a);  }  return returnValue;}  }
class C{  private boolean validateDates(Set startDateSet,Set endDateSet) throws PolicyException {  if (startDateSet.size() != 1) {    String[] args={START_DATE};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_multiple_values",args,null);  }  if (endDateSet.size() != 1) {    String[] args={END_DATE};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_multiple_values",args,null);  }  DateFormat df=new SimpleDateFormat(DATE_FORMAT);  df.setLenient(false);  df.setTimeZone(TimeZone.getTimeZone("GMT"));  String startDateString=(String)(startDateSet.iterator().next());  String endDateString=(String)(endDateSet.iterator().next());  Date date1=null;  Date date2=null;  try {    date1=df.parse(startDateString);  } catch (  Exception e) {    String[] args={START_DATE,startDateString};    throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,e);  }  try {    date2=df.parse(endDateString);  } catch (  Exception e) {    String[] args={END_DATE,endDateString};    throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,e);  }  if (date1.getTime() > date2.getTime()) {    throw new PolicyException(ResBundleUtils.rbName,"start_date_can_not_be_larger_than_end_date",null,null);  }  Calendar cal=new GregorianCalendar(TimeZone.getTimeZone("GMT"));  cal.setTime(date1);  startDate[0]=cal.get(Calendar.YEAR);  startDate[1]=cal.get(Calendar.MONTH);  startDate[2]=cal.get(Calendar.DAY_OF_MONTH);  cal.setTime(date2);  endDate[0]=cal.get(Calendar.YEAR);  endDate[1]=cal.get(Calendar.MONTH);  endDate[2]=cal.get(Calendar.DAY_OF_MONTH);  return true;}  }
class C{  public Period plusDays(long daysToAdd){  if (daysToAdd == 0) {    return this;  }  return create(years,months,Math.toIntExact(Math.addExact(days,daysToAdd)));}  }
class C{  public static void displayVerboseSingleProperty(ConsoleApplication app,AbstractManagedObjectDefinition<?,?> d,String name){  PropertyDefinition<?> pd=d.getPropertyDefinition(name);  app.println(INFO_DSCFG_HELP_HEADING_PROPERTY.get(name));  app.println();  app.println(pd.getSynopsis(),4);  if (pd.getDescription() != null) {    app.println();    app.println(pd.getDescription(),4);  }  if (pd instanceof AggregationPropertyDefinition) {    AggregationPropertyDefinition<?,?> apd=(AggregationPropertyDefinition<?,?>)pd;    if (apd.getSourceConstraintSynopsis() != null) {      app.println();      app.println(apd.getSourceConstraintSynopsis(),4);    }  }  app.println();  SyntaxPrinter syntaxPrinter=new SyntaxPrinter();  syntaxPrinter.print(app.getErrorStream(),pd);  app.println();  TableBuilder builder=new TableBuilder();  DefaultBehaviorPrinter defaultPrinter=new DefaultBehaviorPrinter();  builder.startRow();  builder.appendCell(INFO_DSCFG_HELP_HEADING_DEFAULT.get());  builder.appendCell(HEADING_SEPARATOR);  builder.appendCell(defaultPrinter.print(pd));  builder.startRow();  builder.appendCell(INFO_DSCFG_HELP_HEADING_ADVANCED.get());  builder.appendCell(HEADING_SEPARATOR);  builder.appendCell(hasOptionYN(pd,PropertyOption.ADVANCED));  builder.startRow();  builder.appendCell(INFO_DSCFG_HELP_HEADING_MULTI_VALUED.get());  builder.appendCell(HEADING_SEPARATOR);  builder.appendCell(hasOptionYN(pd,PropertyOption.MULTI_VALUED));  builder.startRow();  builder.appendCell(INFO_DSCFG_HELP_HEADING_MANDATORY.get());  builder.appendCell(HEADING_SEPARATOR);  builder.appendCell(hasOptionYN(pd,PropertyOption.MANDATORY));  builder.startRow();  builder.appendCell(INFO_DSCFG_HELP_HEADING_READ_ONLY.get());  builder.appendCell(HEADING_SEPARATOR);  if (pd.hasOption(PropertyOption.MONITORING)) {    builder.appendCell(INFO_DSCFG_HELP_FIELD_MONITORING.get());  } else   if (pd.hasOption(PropertyOption.READ_ONLY)) {    builder.appendCell(INFO_DSCFG_HELP_FIELD_READ_ONLY.get(d.getUserFriendlyName()));  } else {    builder.appendCell(INFO_GENERAL_NO.get());  }  TextTablePrinter factory=new TextTablePrinter(app.getErrorStream());  factory.setDisplayHeadings(false);  factory.setColumnWidth(0,HEADING_WIDTH);  factory.setColumnWidth(2,0);  factory.setPadding(0);  builder.print(factory);  LocalizableMessage synopsis=getSynopsis(d,pd);  if (synopsis != null) {    app.println();    app.println(synopsis);  }}  }
class C{  public DeleteOperation processDelete(DeleteChangeRecordEntry deleteRecord){  return processDelete(deleteRecord.getDN());}  }
class C{  public static String printHexBinary(byte[] val){  if (theConverter == null)   initConverter();  return theConverter.printHexBinary(val);}  }
class C{  public boolean isClientAuthentication(){  return clientAuthentication;}  }
class C{  @Override public void onFaceDetection(Camera.Face[] faces,Camera camera){  Camera.Face chosenFace=null;  if (faces.length > 0) {    chosenFace=faces[0];    for (    Camera.Face face : faces)     if (face.score > chosenFace.score)     chosenFace=face;    if (chosenFace.score < 50)     chosenFace=null;  }  if (chosenFace != null) {    RectF viewRect=mWZCameraView.getCamera().toViewCoords(mWZCameraView,chosenFace.rect);    float faceScale=viewRect.width() / (float)mWZCameraView.getWidth();    mNinjaFace.setPosition((int)viewRect.centerX(),mWZCameraView.getHeight() - Math.round(viewRect.centerY()));    mNinjaFace.setScale(faceScale * 1.5f,WZBitmap.SURFACE_WIDTH);  }  mNinjaFace.setVisible(chosenFace != null);  mNoFaces.setVisible(chosenFace == null);}  }
class C{  public void invalidate(){  if (session != null)   session.invalidate();}  }
class C{  public ModificationItem(int mod_op,Attribute attr){switch (mod_op) {case DirContext.ADD_ATTRIBUTE:case DirContext.REPLACE_ATTRIBUTE:case DirContext.REMOVE_ATTRIBUTE:    if (attr == null)     throw new IllegalArgumentException("Must specify non-null attribute for modification");  this.mod_op=mod_op;this.attr=attr;break;default :throw new IllegalArgumentException("Invalid modification code " + mod_op);}}  }
class C{  public ListBuffer<A> append(final A x){  x.getClass();  if (shared) {    copy();  }  last.head=x;  last.setTail(new ImmutableList<A>(null,null));  last=last.tail;  count++;  return this;}  }
class C{  @Override public int read(char[] chars,int offset,int length) throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=length;  int returnLength=length;  if (position > size) {    returnLength=length - (int)(position - size);    position=size;  }  processChars(chars,offset,returnLength);  return returnLength;}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WSFederationAction action=WSFederationActionFactory.createAction(request,response);  if (action == null) {    WSFederationUtils.debug.error("Can't create WSFederationAction");    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  try {    action.process();  } catch (  WSFederationException wsfe) {    if (WSFederationUtils.debug.messageEnabled()) {      WSFederationUtils.debug.message("WSFedServlet.doGet: Can't process action",wsfe);    }    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }}  }
class C{  public TagField createField(Mp4FieldKey mp4FieldKey,String value) throws KeyNotFoundException, FieldDataInvalidException {  if (value == null) {    throw new IllegalArgumentException(ErrorMessage.GENERAL_INVALID_NULL_ARGUMENT.getMsg());  }  if (mp4FieldKey == null) {    throw new KeyNotFoundException();  }  if (mp4FieldKey == Mp4FieldKey.COMPILATION) {    if (value.equalsIgnoreCase("true") || value.equals("1")) {      return createCompilationField(true);    } else {      return createCompilationField(false);    }  } else   if (mp4FieldKey == Mp4FieldKey.GENRE) {    if (Mp4GenreField.isValidGenre(value)) {      return new Mp4GenreField(value);    } else {      throw new IllegalArgumentException(ErrorMessage.NOT_STANDARD_MP$_GENRE.getMsg());    }  } else   if (mp4FieldKey == Mp4FieldKey.GENRE_CUSTOM) {    return new Mp4TagTextField(GENRE_CUSTOM.getFieldName(),value);  } else   if (mp4FieldKey.getSubClassFieldType() == Mp4TagFieldSubType.DISC_NO) {    return new Mp4DiscNoField(value);  } else   if (mp4FieldKey.getSubClassFieldType() == Mp4TagFieldSubType.TRACK_NO) {    return new Mp4TrackField(value);  } else   if (mp4FieldKey.getSubClassFieldType() == Mp4TagFieldSubType.BYTE) {    return new Mp4TagByteField(mp4FieldKey,value,mp4FieldKey.getFieldLength());  } else   if (mp4FieldKey.getSubClassFieldType() == Mp4TagFieldSubType.NUMBER) {    return new Mp4TagTextNumberField(mp4FieldKey.getFieldName(),value);  } else   if (mp4FieldKey.getSubClassFieldType() == Mp4TagFieldSubType.REVERSE_DNS) {    return new Mp4TagReverseDnsField(mp4FieldKey,value);  } else   if (mp4FieldKey.getSubClassFieldType() == Mp4TagFieldSubType.ARTWORK) {    throw new UnsupportedOperationException(ErrorMessage.ARTWORK_CANNOT_BE_CREATED_WITH_THIS_METHOD.getMsg());  } else   if (mp4FieldKey.getSubClassFieldType() == Mp4TagFieldSubType.TEXT) {    return new Mp4TagTextField(mp4FieldKey.getFieldName(),value);  } else   if (mp4FieldKey.getSubClassFieldType() == Mp4TagFieldSubType.UNKNOWN) {    throw new UnsupportedOperationException(ErrorMessage.DO_NOT_KNOW_HOW_TO_CREATE_THIS_ATOM_TYPE.getMsg(mp4FieldKey.getFieldName()));  } else {    throw new UnsupportedOperationException(ErrorMessage.DO_NOT_KNOW_HOW_TO_CREATE_THIS_ATOM_TYPE.getMsg(mp4FieldKey.getFieldName()));  }}  }
class C{  public boolean noStore(){  return noStore;}  }
class C{  public long insertGeneralAttribute(String attributeName,Long dataTypeID){  return insert(attributeName,GLOBAL_ATTRIBUTE_DB_ID,dataTypeID);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  String nsPrefix="";  String nsDeclaration="";  if (declareNS) {    nsDeclaration=XACMLConstants.CONTEXT_NS_DECLARATION;  }  if (includeNSPrefix) {    nsPrefix=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  sb.append("<").append(nsPrefix).append(XACMLConstants.DECISION).append(nsDeclaration).append(">");  if (value != null) {    sb.append(value);  }  sb.append("</").append(nsPrefix).append(XACMLConstants.DECISION).append(">\n");  return sb.toString();}  }
class C{  public DataServerHandler(Session session,int queueSize,ReplicationServer replicationServer,int rcvWindowSize){  super(session,queueSize,replicationServer,rcvWindowSize);}  }
class C{  public void logPurchase(BigDecimal purchaseAmount,Currency currency){  logPurchase(purchaseAmount,currency,null);}  }
class C{  int readCorner4(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  @AndroidOnly("dalvikvm specific") public void test_streams() throws IOException, InterruptedException {  Process p=javaProcessBuilder().start();  assertNotNull(p.getInputStream());  assertNotNull(p.getErrorStream());  assertNotNull(p.getOutputStream());}  }
class C{  public static String decode(String uri){  String uriToWorkOn=uri;  int indexOfNextPercent=uriToWorkOn.indexOf("%");  StringBuilder decodedUri=new StringBuilder();  while (indexOfNextPercent != -1) {    decodedUri.append(uriToWorkOn.substring(0,indexOfNextPercent));    if (indexOfNextPercent + 2 < uriToWorkOn.length()) {      String hexadecimalString=uriToWorkOn.substring(indexOfNextPercent + 1,indexOfNextPercent + 3);      try {        byte hexadecimalNumber=(byte)Integer.parseInt(hexadecimalString,16);        String correspondingCharacter=utf8CharSet.decode(ByteBuffer.wrap(new byte[]{hexadecimalNumber})).toString();        decodedUri.append(correspondingCharacter);      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("Illegal hex characters in pattern %" + hexadecimalString);      }    }    uriToWorkOn=uriToWorkOn.substring(indexOfNextPercent + 3);    indexOfNextPercent=uriToWorkOn.indexOf("%");  }  decodedUri.append(uriToWorkOn);  return decodedUri.toString();}  }
class C{  public boolean doSingleSignOn(Object ssoToken,String inResponseTo,NameIdentifier spNameIdentifier,NameIdentifier idpNameIdentifier){  FSUtils.debug.message("FSProxyHandler.doSingleSignOn:Init");  String protocolProfile=authnRequest.getProtocolProfile();  if (protocolProfile == null || protocolProfile.equals(IFSConstants.SSO_PROF_BROWSER_ART)) {    FSSSOBrowserArtifactProfileHandler handler=new FSSSOBrowserArtifactProfileHandler(request,response,authnRequest,spDescriptor,spConfig,spEntityId,relayState);    handler.setHostedEntityId(hostedEntityId);    handler.setHostedDescriptor(hostedDesc);    handler.setHostedDescriptorConfig(hostedConfig);    handler.setMetaAlias(metaAlias);    handler.setRealm(realm);    return handler.doSingleSignOn(ssoToken,inResponseTo,spNameIdentifier,idpNameIdentifier);  } else   if (protocolProfile.equals(IFSConstants.SSO_PROF_BROWSER_POST)) {    FSSSOBrowserPostProfileHandler handler=new FSSSOBrowserPostProfileHandler(request,response,authnRequest,spDescriptor,spConfig,spEntityId,relayState);    handler.setHostedEntityId(hostedEntityId);    handler.setHostedDescriptor(hostedDesc);    handler.setHostedDescriptorConfig(hostedConfig);    handler.setMetaAlias(metaAlias);    handler.setRealm(realm);    return handler.doSingleSignOn(ssoToken,inResponseTo,spNameIdentifier,idpNameIdentifier);  } else {    FSUtils.debug.error("FSProxyHandler.doProxySingleSignOn:" + "Unsupported protocol profile.");    return false;  }}  }
class C{  @Override public void close() throws IOException {  if (in != null) {    in.close();    in=null;    buf=null;  }}  }
class C{  public TitledBorder(Border border){  this(border,"",LEADING,DEFAULT_POSITION,null,null);}  }
class C{  public NO_IMPLEMENT(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  protected final void assertNotAborted() throws InterruptedIOException {  if (aborted) {    throw new InterruptedIOException("Connection has been shut down.");  }}  }
class C{  private Comparable<? super K> comparable(Object key) throws ClassCastException {  if (key == null)   throw new NullPointerException();  if (comparator != null)   return new ComparableUsingComparator<K>((K)key,comparator); else   return (Comparable<? super K>)key;}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (this == other)   return true;  if (!other.getClass().equals(this.getClass())) {    return false;  }  RequestLine that=(RequestLine)other;  if (this.method == null) {    if (that.method != null)     return false;  } else   if (!this.method.equals(that.method))   return false;  if (this.sipVersion == null) {    if (that.sipVersion != null)     return false;  } else   if (!this.sipVersion.equals(that.sipVersion))   return false;  if (this.uri == null) {    if (that.uri != null)     return false;  } else   if (!this.uri.equals(that.uri))   return false;  return true;}  }
class C{  public void insert_string(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_string",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_string(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void putValue(String name,Object value){  if (name == null || value == null) {    throw new IllegalArgumentException("name == null || value == null");  }  Object old=values.put(name,value);  if (value instanceof SSLSessionBindingListener) {    ((SSLSessionBindingListener)value).valueBound(new SSLSessionBindingEvent(this,name));  }  if (old instanceof SSLSessionBindingListener) {    ((SSLSessionBindingListener)old).valueUnbound(new SSLSessionBindingEvent(this,name));  }}  }
class C{  public boolean isValidFQDN(String hostname){  return FqdnValidator.getInstance().isHostnameValid(hostname);}  }
class C{  private int estimateContentSize(){  int total=0;  int count=0;  for (int i=mAdapter.getItemCount() - 1; i >= 0 && count < mConfig.viewCountEstimateSize; i--) {    View view=mLayoutManager.findViewByPosition(i + 1);    if (view != null) {      Rect rect=new Rect();      mLayoutManager.getDecoratedBoundsWithMargins(view,rect);      int itemHeight=Math.abs(directionVertical() ? rect.height() : rect.width());      count++;      total+=itemHeight;    }  }  if (count > 0) {    double average=(double)total / count;    return (int)(average * mAdapter.getItemCount());  }  return 0;}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new DataLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;    len-=gapLen;    inOff+=gapLen;    while (len > blockSize) {      System.arraycopy(in,inOff,buf,bufOff,blockSize);      resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);      System.arraycopy(buf,blockSize,buf,0,blockSize);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  public void generate_snapshot(){  undo_list.generate_snapshot();}  }
class C{  public <T extends Rectangle>T applyMargins(float topIndent,float rightIndent,float bottomIndent,float leftIndent,boolean reverse){  x+=leftIndent * (reverse ? -1 : 1);  width-=(leftIndent + rightIndent) * (reverse ? -1 : 1);  y+=bottomIndent * (reverse ? -1 : 1);  height-=(topIndent + bottomIndent) * (reverse ? -1 : 1);  return (T)this;}  }
class C{  public ArrayList<ShapeTile> offset_shapes(int p_half_width,int p_from_no,int p_to_no){  int from_no=Math.max(p_from_no,0);  int to_no=Math.min(p_to_no,plaline_len(-1));  int shape_count=Math.max(to_no - from_no - 1,0);  ArrayList<ShapeTile> shape_list=new ArrayList<ShapeTile>(shape_count);  if (shape_count == 0)   return shape_list;  PlaDirection prev_dir=plaline(from_no).direction();  PlaDirection curr_dir=plaline(from_no + 1).direction();  for (int index=from_no + 1; index < to_no; ++index) {    PlaDirection next_dir=plaline(index + 1).direction();    PlaLineIntAlist lines=new PlaLineIntAlist(4);    lines.add(plaline(index).translate(-p_half_width));    PlaSide next_dir_from_curr_dir=next_dir.side_of(curr_dir);    if (next_dir_from_curr_dir == PlaSide.ON_THE_LEFT) {      lines.add(plaline(index + 1).translate(-p_half_width));    } else {      lines.add(plaline(index + 1).opposite().translate(-p_half_width));    }    lines.add(plaline(index).opposite().translate(-p_half_width));    PlaSide curr_dir_from_prev_dir=curr_dir.side_of(prev_dir);    if (curr_dir_from_prev_dir == PlaSide.ON_THE_LEFT) {      lines.add(plaline(index - 1).translate(-p_half_width));    } else {      lines.add(plaline(index - 1).opposite().translate(-p_half_width));    }    PlaPointFloat corner_to_check=null;    PlaLineInt curr_line=lines.get(1);    PlaLineInt check_line=null;    if (next_dir_from_curr_dir == PlaSide.ON_THE_LEFT) {      check_line=lines.get(2);    } else {      check_line=lines.get(0);    }    PlaPointFloat check_distance_corner=corner_approx(index);    final double check_dist_square=2.0 * p_half_width * p_half_width;    PlaLineIntAlist cut_dog_ear_lines=new PlaLineIntAlist(plaline_len());    PlaDirection tmp_curr_dir=next_dir;    boolean direction_changed=false;    for (int jndex=index + 2; jndex < plaline_len(-1); ++jndex) {      if (corner_approx(jndex - 1).distance_square(check_distance_corner) > check_dist_square) {        break;      }      if (!direction_changed) {        corner_to_check=curr_line.intersection_approx(check_line);      }      PlaDirection tmp_next_dir=plaline(jndex).direction();      PlaLineInt next_border_line=null;      PlaSide tmp_next_dir_from_tmp_curr_dir=tmp_next_dir.side_of(tmp_curr_dir);      direction_changed=tmp_next_dir_from_tmp_curr_dir != next_dir_from_curr_dir;      if (!direction_changed) {        if (tmp_next_dir_from_tmp_curr_dir == PlaSide.ON_THE_LEFT) {          next_border_line=plaline(jndex).translate(-p_half_width);        } else {          next_border_line=plaline(jndex).opposite().translate(-p_half_width);        }        if (next_border_line.side_of(corner_to_check) == PlaSide.ON_THE_LEFT && next_border_line.side_of(corner(index)) == PlaSide.ON_THE_RIGHT && next_border_line.side_of(corner(index - 1)) == PlaSide.ON_THE_RIGHT) {          cut_dog_ear_lines.add(next_border_line);        }        tmp_curr_dir=tmp_next_dir;        curr_line=next_border_line;      }    }    check_distance_corner=corner_approx(index - 1);    if (curr_dir_from_prev_dir == PlaSide.ON_THE_LEFT) {      check_line=lines.get(2);    } else {      check_line=lines.get(0);    }    curr_line=lines.get(3);    tmp_curr_dir=prev_dir;    direction_changed=false;    for (int jndex=index - 2; jndex >= 1; --jndex) {      if (corner_approx(jndex).distance_square(check_distance_corner) > check_dist_square) {        break;      }      if (!direction_changed) {        corner_to_check=curr_line.intersection_approx(check_line);      }      PlaDirection tmp_prev_dir=plaline(jndex).direction();      PlaLineInt prev_border_line=null;      PlaSide tmp_curr_dir_from_tmp_prev_dir=tmp_curr_dir.side_of(tmp_prev_dir);      direction_changed=tmp_curr_dir_from_tmp_prev_dir != curr_dir_from_prev_dir;      if (!direction_changed) {        if (tmp_curr_dir.side_of(tmp_prev_dir) == PlaSide.ON_THE_LEFT) {          prev_border_line=plaline(jndex).translate(-p_half_width);        } else {          prev_border_line=plaline(jndex).opposite().translate(-p_half_width);        }        if (prev_border_line.side_of(corner_to_check) == PlaSide.ON_THE_LEFT && prev_border_line.side_of(corner(index)) == PlaSide.ON_THE_RIGHT && prev_border_line.side_of(corner(index - 1)) == PlaSide.ON_THE_RIGHT) {          cut_dog_ear_lines.add(prev_border_line);        }        tmp_curr_dir=tmp_prev_dir;        curr_line=prev_border_line;      }    }    ShapeTile a_shape=ShapeTile.get_instance(lines);    if (cut_dog_ear_lines.size() > 0) {      a_shape=a_shape.intersection(ShapeTile.get_instance(cut_dog_ear_lines));    }    ShapeTile bounding_shape;    ShapeTileOctagon surr_oct=bounding_octagon(index - 1,index);    bounding_shape=surr_oct.offset(p_half_width);    ShapeTile a_risul=bounding_shape.intersection_with_simplify(a_shape);    if (a_risul.is_empty())     Stat.instance.userPrintln(null,new IllegalArgumentException("offset_shapes: shape is empty")); else     shape_list.add(a_risul);    prev_dir=curr_dir;    curr_dir=next_dir;  }  return shape_list;}  }
class C{  protected void init(JsonValue config){  ClusterConfig clstrCfg=new ClusterConfig(config);  instanceId=clstrCfg.getInstanceId();  if (null == instanceId || instanceId.isEmpty() || PropertyUtil.containsProperty(instanceId,NODE_ID)) {    throw new IllegalStateException("No property of '" + NODE_ID + "' could be found in configuration.");  }  clusterConfig=clstrCfg;  if (clusterConfig.isEnabled()) {    enabled=true;    clusterManagerThread=new ClusterManagerThread(clusterConfig.getInstanceCheckInInterval(),clusterConfig.getInstanceCheckInOffset());  }}  }
class C{  public void onPageSelected(int position){  if (position == 2)   mGuideButton.setVisibility(View.VISIBLE); else   mGuideButton.setVisibility(View.GONE);  currentItem=position;  dots.get(oldPosition).setBackgroundResource(R.drawable.dot_normal);  dots.get(position).setBackgroundResource(R.drawable.dot_focused);  oldPosition=position;}  }
class C{  protected void validateUserStatusEntry(Map data){  Set h=(Set)data.get(ATTR_USER_STATUS);  if ((h != null) && (!h.isEmpty())) {    String tmp=(String)h.iterator().next();    if (tmp.equalsIgnoreCase(STRING_ACTIVE)) {      tmp=STRING_ACTIVE;    } else {      tmp=STRING_INACTIVE;    }    h.clear();    h.add(tmp);    data.put(ATTR_USER_STATUS,h);  }}  }
class C{  @Override public boolean isSecure(){  return false;}  }
class C{  protected int StackOpp(){switch (key) {case "ifelse":    return -3;case "roll":case "put":  return -2;case "callsubr":case "callgsubr":case "add":case "sub":case "div":case "mul":case "drop":case "and":case "or":case "eq":return -1;case "abs":case "neg":case "sqrt":case "exch":case "index":case "get":case "not":case "return":return 0;case "random":case "dup":return 1;}return 2;}  }
class C{  public JKException(final String message){  super(message);}  }
class C{  private void scrollToColumn(int col){  Container container;  JTable table;  if ((header.getParent() == null) || ((container=header.getParent().getParent()) == null) || !(container instanceof JScrollPane)|| ((table=header.getTable()) == null)) {    return;  }  Rectangle vis=table.getVisibleRect();  Rectangle cellBounds=table.getCellRect(0,col,true);  vis.x=cellBounds.x;  vis.width=cellBounds.width;  table.scrollRectToVisible(vis);}  }
class C{  public boolean isDelegated(){  return !this.equals(beanContextChildPeer);}  }
class C{  public boolean update(Long appID,String appName,String pkgName,Boolean enabled,Boolean loginEnabled,String username,String password){  if (appID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (appName != null) {    args.put(KEY_APPNAME,appName);  }  if (pkgName != null) {    args.put(KEY_PKGNAME,pkgName);  }  if (enabled != null) {    args.put(KEY_ENABLED,enabled);  }  if (loginEnabled != null) {    args.put(KEY_LOGIN,loginEnabled);  }  if (username != null) {    args.put(KEY_USERNAME,username);  }  if (password != null) {    args.put(KEY_PASSWORD,password);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_APPID + "=" + appID,null) > 0;  }  return false;}  }
class C{  public static void deregisterExportTaskListener(ExportTaskListener listener){  directoryServer.exportTaskListeners.remove(listener);}  }
class C{  public boolean useSSL(){  return state.useSSL;}  }
class C{  public void testZeroOne(){  String numA="0";  String numB="1";  String res="1";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public void test_getByteLjava_lang_ObjectI(){  byte[] x={1};  byte ret=0;  boolean thrown=false;  try {    ret=Array.getByte(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret);  try {    ret=Array.getByte(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getByte(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getByte(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public void removeStyleSheet(StyleSheet ss){synchronized (this) {    if (linkedStyleSheets != null) {      int index=linkedStyleSheets.indexOf(ss);      if (index != -1) {        linkedStyleSheets.removeElementAt(index);        unlinkStyleSheet(ss,index);        if (index == 0 && linkedStyleSheets.size() == 0) {          linkedStyleSheets=null;        }      }    }  }}  }
class C{  public long insert(String attributeName,Long appID,Long dataTypeID){  if (attributeName == null || appID == null || dataTypeID == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_EXTERNALATTRIBUTENAME,attributeName);  initialValues.put(KEY_APPID,appID);  initialValues.put(KEY_DATATYPEID,dataTypeID);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  private ConfigExceptionFactory(){}  }
class C{  public boolean inStylusButtonPressed(){  return mIsButtonPressed;}  }
class C{  public void waitForStartup() throws InterruptedException {  latch.await();}  }
class C{  public static DeleteSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,SetRelationDefinition<?,?> r) throws ArgumentException {  return new DeleteSubCommandHandler(parser,p,r,p.child(r));}  }
class C{  public <T>T deserialise(String text,Class<T> clazz){  try {    T value=mapper.readValue(text,clazz);    return value;  } catch (  IOException e) {    throw new IllegalStateException(MessageFormat.format("Failed to deserailise {0}",clazz.getSimpleName()),e);  }}  }
class C{  void preload(long timeLimit){  if (timeLimit > 0) {    final List<Tree> trees=new ArrayList<>();    for (    EntryContainer ec : entryContainers.values()) {      ec.sharedLock.lock();      try {        trees.addAll(ec.listTrees());      }  finally {        ec.sharedLock.unlock();      }    }    Collections.sort(trees,new TreePreloadComparator());    try {      throw new UnsupportedOperationException("Not implemented exception");    } catch (    StorageRuntimeException e) {      logger.error(ERR_CACHE_PRELOAD,backendId,stackTraceToSingleLineString(e.getCause() != null ? e.getCause() : e));    }  }}  }
class C{  @ConstructorProperties({"etchType","highlightColor","shadowColor"}) public EtchedBorder(int etchType,Color highlight,Color shadow){  this.etchType=etchType;  this.highlight=highlight;  this.shadow=shadow;}  }
class C{  public void testDivideBigDecimalScaleMathContextCEILING(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=15;  String b="748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String c="4.98978611802562512996E+70";  int resScale=-50;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public static String loadFileContent(String path,Context context){  StringBuilder builder;  try {    InputStream in=context.getAssets().open(path);    builder=new StringBuilder(in.available() + 10);    BufferedReader localBufferedReader=new BufferedReader(new InputStreamReader(in));    char[] data=new char[2048];    int len=-1;    while ((len=localBufferedReader.read(data)) > 0) {      builder.append(data,0,len);    }    localBufferedReader.close();    if (in != null) {      try {        in.close();      } catch (      IOException e) {        WXLogUtils.e("WXFileUtils loadFileContent: " + WXLogUtils.getStackTrace(e));      }    }    return builder.toString();  } catch (  IOException e) {    e.printStackTrace();  }  return "";}  }
class C{  public void stopContinuousQuery(TokenFilter filter){  dispatcher.stopContinuousQuery(filter);}  }
class C{  public ExpandableItemAdapter(List<MultiItemEntity> data){  super(data);  addItemType(TYPE_LEVEL_0,R.layout.item_expandable_lv0);  addItemType(TYPE_LEVEL_1,R.layout.item_expandable_lv1);  addItemType(TYPE_PERSON,R.layout.item_text_view);}  }
class C{  public MBeanException(java.lang.Exception e,String message){  super(message);  exception=e;}  }
class C{  protected ArrayList<Range> parseRange(HttpServletRequest request,HttpServletResponse response,WebResource resource) throws IOException {  String headerValue=request.getHeader("If-Range");  if (headerValue != null) {    long headerValueTime=(-1L);    try {      headerValueTime=request.getDateHeader("If-Range");    } catch (    IllegalArgumentException e) {    }    String eTag=resource.getETag();    long lastModified=resource.getLastModified();    if (headerValueTime == (-1L)) {      if (!eTag.equals(headerValue.trim()))       return FULL;    } else {      if (lastModified > (headerValueTime + 1000))       return FULL;    }  }  long fileLength=resource.getContentLength();  if (fileLength == 0)   return null;  String rangeHeader=request.getHeader("Range");  if (rangeHeader == null)   return null;  if (!rangeHeader.startsWith("bytes")) {    response.addHeader("Content-Range","bytes */" + fileLength);    response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);    return null;  }  rangeHeader=rangeHeader.substring(6);  ArrayList<Range> result=new ArrayList<>();  StringTokenizer commaTokenizer=new StringTokenizer(rangeHeader,",");  while (commaTokenizer.hasMoreTokens()) {    String rangeDefinition=commaTokenizer.nextToken().trim();    Range currentRange=new Range();    currentRange.length=fileLength;    int dashPos=rangeDefinition.indexOf('-');    if (dashPos == -1) {      response.addHeader("Content-Range","bytes */" + fileLength);      response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);      return null;    }    if (dashPos == 0) {      try {        long offset=Long.parseLong(rangeDefinition);        currentRange.start=fileLength + offset;        currentRange.end=fileLength - 1;      } catch (      NumberFormatException e) {        response.addHeader("Content-Range","bytes */" + fileLength);        response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);        return null;      }    } else {      try {        currentRange.start=Long.parseLong(rangeDefinition.substring(0,dashPos));        if (dashPos < rangeDefinition.length() - 1)         currentRange.end=Long.parseLong(rangeDefinition.substring(dashPos + 1,rangeDefinition.length())); else         currentRange.end=fileLength - 1;      } catch (      NumberFormatException e) {        response.addHeader("Content-Range","bytes */" + fileLength);        response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);        return null;      }    }    if (!currentRange.validate()) {      response.addHeader("Content-Range","bytes */" + fileLength);      response.sendError(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);      return null;    }    result.add(currentRange);  }  return result;}  }
class C{  public static Service create(QName serviceName,WebServiceFeature... features){  return new Service(null,serviceName,features);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public AddEditTaskPresenter(@NonNull UseCaseHandler useCaseHandler,@Nullable String taskId,@NonNull AddEditTaskContract.View addTaskView,@NonNull GetTask getTask,@NonNull SaveTask saveTask){  mUseCaseHandler=useCaseHandler;  mTaskId=taskId;  mAddTaskView=checkNotNull(addTaskView);  mGetTask=checkNotNull(getTask);  mSaveTask=checkNotNull(saveTask);  mAddTaskView.setPresenter(this);}  }
class C{  static void make72Safe(StringBuffer line){  int length=line.length();  if (length > 72) {    int index=70;    while (index < length - 2) {      line.insert(index,"\r\n ");      index+=72;      length+=3;    }  }  return;}  }
class C{  private static BindRequestProtocolOp readBindRequest(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_BIND_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  int protocolVersion;  try {    protocolVersion=(int)reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_BIND_REQUEST_DECODE_VERSION.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString dn;  try {    dn=reader.readOctetString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_BIND_REQUEST_DECODE_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  byte type;  try {    type=reader.peekType();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_BIND_REQUEST_DECODE_CREDENTIALS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString simplePassword=null;  String saslMechanism=null;  ByteString saslCredentials=null;switch (type) {case TYPE_AUTHENTICATION_SIMPLE:    try {      simplePassword=reader.readOctetString();    } catch (    Exception e) {      LocalizableMessage message=ERR_LDAP_BIND_REQUEST_DECODE_PASSWORD.get(e);      throw new LDAPException(PROTOCOL_ERROR,message,e);    }  break;case TYPE_AUTHENTICATION_SASL:try {  reader.readStartSequence();  saslMechanism=reader.readOctetStringAsString();  if (reader.hasNextElement()) {    saslCredentials=reader.readOctetString();  }  reader.readEndSequence();} catch (Exception e) {  LocalizableMessage message=ERR_LDAP_BIND_REQUEST_DECODE_SASL_INFO.get(e);  throw new LDAPException(PROTOCOL_ERROR,message,e);}break;default :LocalizableMessage message=ERR_LDAP_BIND_REQUEST_DECODE_INVALID_CRED_TYPE.get(type);throw new LDAPException(AUTH_METHOD_NOT_SUPPORTED,message);}try {reader.readEndSequence();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_LDAP_BIND_REQUEST_DECODE_SEQUENCE.get(e);throw new LDAPException(PROTOCOL_ERROR,message,e);}if (type == TYPE_AUTHENTICATION_SIMPLE) {return new BindRequestProtocolOp(dn,protocolVersion,simplePassword);} else {return new BindRequestProtocolOp(dn,saslMechanism,saslCredentials);}}  }
class C{  public Set<BrdItem> pick_items(PlaPointFloat p_location){  return pick_items(p_location,itera_settings.item_selection_filter);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public Connection createConnection(String netType,String addrType,String addr) throws SdpException {  ConnectionField connectionImpl=new ConnectionField();  connectionImpl.setNetworkType(netType);  connectionImpl.setAddressType(addrType);  connectionImpl.setAddress(addr);  return connectionImpl;}  }
class C{  public PWResetModelImpl(){  ssoToken=getSSOToken();  logger=new PWResetAdminLog(ssoToken);  resBundle=PWResetResBundleCacher.getBundle(rbName,localeContext.getLocale());  ConfigurationObserver.getInstance().addListener(logger);}  }
class C{  private void addToCircleOfTrust(BaseConfigType config,String realm,String entityId){  String classMethod="COTManager:addToCircleOfTrust :";  try {    if (config != null) {      Map attr=IDFFMetaUtils.getAttributes(config);      List cotAttr=(List)attr.get(COTConstants.COT_LIST);      List cotList=new ArrayList(cotAttr);      if ((cotList != null) && !cotList.isEmpty()) {        for (Iterator iter=cotList.iterator(); iter.hasNext(); ) {          String cotName=(String)iter.next();          try {            cotManager.addCircleOfTrustMember(realm,cotName,COTConstants.IDFF,entityId);          } catch (          COTException ce) {            debug.error(classMethod + cotName + " cotName");          }        }      }    }  } catch (  Exception e) {    debug.error(classMethod + "Error while adding entity " + entityId+ " to COT.",e);  }}  }
class C{  public static Builder newBuilder(boolean satisfied){  return new Builder(satisfied);}  }
class C{  public void testClearBackend() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  String c=DirectoryServer.getBackend(DN.valueOf("cn=config")).getBackendID();  cache.clearBackend(b);  cache.putEntry(testEntriesList.get(0),b,1);  cache.putEntry(testEntriesList.get(1),c,1);  cache.clearBackend(b);  assertNull(cache.getEntry(b,1),"Not expected to find entry id " + 1 + " on backend "+ b+ " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  assertNull(cache.getEntry(testEntriesList.get(0).getName()),"Not expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  assertNotNull(cache.getEntry(c,1),"Expected to find entry id " + 1 + " on backend "+ c+ " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  private void sendRoomMessage(MessageType type,String content){  Objects.requireNonNull(content);  Objects.requireNonNull(type);  String completeMsg=String.valueOf(type.flag) + content;  client.sendMessage(new StringWebsocketMessage(completeMsg));}  }
class C{  @Override public List<Foo> findByUuid(String uuid){  return findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public BeanContextSupport(BeanContext peer){  this(peer,null,false,true);}  }
class C{  public ServletException(){  super();}  }
class C{  public Map loadMinimalClient(String clientType){  Map props=null;  String dn=generateClientDN(clientType);  try {    AMEntity amEntity=amConnection.getEntity(dn);    if (amEntity.isExists()) {      Map attrsMap=amEntity.getAttributes(minClient);      props=parsePropertyNames(attrsMap);    }  } catch (  Exception e) {    debug.warning(dbStr + "Could not get Client: " + clientType,e);  }  return props;}  }
class C{  public int compareMediaRange(String media){  return (mediaRange.type + "/" + mediaRange.subtype).compareToIgnoreCase(media);}  }
class C{  protected void configurePopup(){  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  setBorderPainted(true);  setBorder(LIST_BORDER);  setOpaque(false);  add(scroller);  setDoubleBuffered(true);  setFocusable(false);}  }
class C{  public DescriptorPointer(final MetadataDescriptor descriptor){  setDescriptor(descriptor);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  void bindAuditFilter(Filter filter){  auditFilter.setDelegate(filter);}  }
class C{  private TemplateLine parseTemplateLine(final String line,final int lineNumber,final Branch branch,final Template template,final Element element,final Map<String,TemplateTag> tags,final List<LocalizableMessage> warnings) throws DecodeException {  final String elementName=element == Element.BRANCH ? branch.getBranchDN().toString() : template.getName();  final String lowerLine=line.toLowerCase();  final int colonPos=lowerLine.indexOf(':');  if (colonPos < 0) {    throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_NO_COLON_IN_TEMPLATE_LINE.get(lineNumber + 1,element.getLabel(),elementName));  } else   if (colonPos == 0) {    throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_NO_ATTR_IN_TEMPLATE_LINE.get(lineNumber + 1,element.getLabel(),elementName));  }  final AttributeType attributeType=schema.getAttributeType(lowerLine.substring(0,colonPos));  final int length=line.length();  int pos=colonPos + 1;  boolean valueIsURL=false;  boolean valueIsBase64=false;  if (pos < length) {    if (lowerLine.charAt(pos) == '<') {      valueIsURL=true;      pos++;    } else     if (lowerLine.charAt(pos) == ':') {      valueIsBase64=true;      pos++;    }  }  while (pos < length && lowerLine.charAt(pos) == ' ') {    pos++;  }  if (pos >= length) {    warnings.add(WARN_ENTRY_GENERATOR_NO_VALUE_IN_TEMPLATE_LINE.get(lineNumber + 1,element.getLabel(),elementName));  }  int phase=PARSING_STATIC_TEXT;  int previousPhase=PARSING_STATIC_TEXT;  final List<TemplateTag> tagList=new ArrayList<>();  StringBuilder buffer=new StringBuilder();  for (; pos < length; pos++) {    char c=line.charAt(pos);switch (phase) {case PARSING_STATIC_TEXT:switch (c) {case '\\':        phase=PARSING_ESCAPED_CHAR;      previousPhase=PARSING_STATIC_TEXT;    break;case '<':  if (buffer.length() > 0) {    StaticTextTag t=new StaticTextTag();    String[] args=new String[]{buffer.toString()};    t.initializeForBranch(schema,this,branch,args,lineNumber,warnings);    tagList.add(t);    buffer=new StringBuilder();  }phase=PARSING_REPLACEMENT_TAG;break;case '{':if (buffer.length() > 0) {StaticTextTag t=new StaticTextTag();String[] args=new String[]{buffer.toString()};t.initializeForBranch(schema,this,branch,args,lineNumber,warnings);tagList.add(t);buffer=new StringBuilder();}phase=PARSING_ATTRIBUTE_TAG;break;default :buffer.append(c);}break;case PARSING_REPLACEMENT_TAG:switch (c) {case '\\':phase=PARSING_ESCAPED_CHAR;previousPhase=PARSING_REPLACEMENT_TAG;break;case '>':TemplateTag t=parseReplacementTag(buffer.toString(),branch,template,lineNumber,tags,warnings);tagList.add(t);buffer=new StringBuilder();phase=PARSING_STATIC_TEXT;break;default :buffer.append(c);break;}break;case PARSING_ATTRIBUTE_TAG:switch (c) {case '\\':phase=PARSING_ESCAPED_CHAR;previousPhase=PARSING_ATTRIBUTE_TAG;break;case '}':TemplateTag t=parseAttributeTag(buffer.toString(),branch,template,lineNumber,warnings);tagList.add(t);buffer=new StringBuilder();phase=PARSING_STATIC_TEXT;break;default :buffer.append(c);break;}break;default :buffer.append(c);phase=previousPhase;break;}}if (phase == PARSING_STATIC_TEXT) {if (buffer.length() > 0) {StaticTextTag t=new StaticTextTag();String[] args=new String[]{buffer.toString()};t.initializeForBranch(schema,this,branch,args,lineNumber,warnings);tagList.add(t);}} else {throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_INCOMPLETE_TAG.get(lineNumber + 1));}return new TemplateLine(attributeType,lineNumber,tagList,valueIsURL,valueIsBase64);}  }
class C{  private void pad(long pos) throws IOException {  long currIndex=cacheStart + cache.size() - 1;  long lastIndex=pos / BUFFER_LENGTH;  long numNewBuffers=lastIndex - currIndex;  for (long i=0; i < numNewBuffers; i++) {    try {      cache.add(new byte[BUFFER_LENGTH]);    } catch (    OutOfMemoryError e) {      throw new IOException("No memory left for cache!");    }  }}  }
class C{  public boolean beginTabCommonDisplay(ChildDisplayEvent event){  return (tabModel.getNodeCount() > 1);}  }
class C{  public static long givePower(ICapabilityProvider provider,EnumFacing side,long power,boolean simulated){  return isTeslaConsumer(provider,side) ? getTeslaConsumer(provider,side).givePower(power,simulated) : 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapnumberofnodes.class,args);}  }
class C{  public void testToString(){  SecretKey sk=new tmpSecretKey();  KeyStore.SecretKeyEntry ske=new KeyStore.SecretKeyEntry(sk);  assertNotNull("toString() returns null string",ske.toString());}  }
class C{  @Inject public LdapConnectionFactoryProvider(ConnectionType connectionType,ConnectionConfigFactory connectionConfigFactory,TimeoutConfig timeoutConfig,@Named(DataLayerConstants.DATA_LAYER_DEBUG) Debug debug){  this.configFactory=connectionConfigFactory;  this.timeoutConfig=timeoutConfig;  this.debug=debug;  this.connectionType=connectionType;}  }
class C{  public void unregisterServer(Map<ServerProperty,Object> serverProperties) throws ADSContextException {  DN dn=makeDNFromServerProperties(serverProperties);  Connection conn=connectionWrapper.getConnection();  try {    String member="cn=" + Rdn.escapeValue(serverProperties.get(ServerProperty.ID));    Set<Map<ServerGroupProperty,Object>> serverGroups=readServerGroupRegistry();    for (    Map<ServerGroupProperty,Object> serverGroup : serverGroups) {      Set<?> memberList=(Set<?>)serverGroup.get(ServerGroupProperty.MEMBERS);      if (memberList != null && memberList.remove(member)) {        Map<ServerGroupProperty,Object> serverGroupProperties=new HashMap<>();        serverGroupProperties.put(ServerGroupProperty.MEMBERS,memberList);        String groupName=(String)serverGroup.get(ServerGroupProperty.UID);        updateServerGroup(groupName,serverGroupProperties);      }    }    throwIfNotSuccess(conn.delete(newDeleteRequest(dn)));  } catch (  EntryNotFoundException x) {    throw new ADSContextException(ErrorType.NOT_YET_REGISTERED);  }catch (  LdapException x) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }  String serverID=getServerID(serverProperties);  if (serverID != null) {    String memberAttrName=ServerGroupProperty.MEMBERS.getAttributeName();    Filter filter=Filter.valueOf("(" + memberAttrName + "=cn="+ serverID+ ")");    SearchRequest request=newSearchRequest(getServerGroupContainerDN(),SINGLE_LEVEL,filter);    try (ConnectionEntryReader entryReader=conn.search(request)){      while (entryReader.hasNext()) {        SearchResultEntry sr=entryReader.readEntry();        DN groupDn=sr.getName();        Attribute newAttr=new LinkedAttribute(memberAttrName);        for (        Attribute attr : sr.getAllAttributes()) {          AttributeType attrType=attr.getAttributeDescription().getAttributeType();          if (attrType.hasName(memberAttrName)) {            for (            ByteString value : attr) {              if (!value.toString().equalsIgnoreCase("cn=" + serverID)) {                newAttr.add(value);              }            }          }        }        ModificationType modType=newAttr.size() > 0 ? REPLACE : DELETE;        ModifyRequest modRequest=newModifyRequest(groupDn).addModification(new Modification(modType,newAttr));        throwIfNotSuccess(conn.modify(modRequest));      }    } catch (    EntryNotFoundException x) {      throw new ADSContextException(ErrorType.BROKEN_INSTALL);    }catch (    AuthorizationException x) {      throw new ADSContextException(ErrorType.ACCESS_PERMISSION);    }catch (    IOException x) {      throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);    }  }}  }
class C{  AssignableDynamicGroup(AttrSet attrSet,Guid baseGuid,int scope) throws UMSException {  this(TemplateManager.getTemplateManager().getCreationTemplate(_class,null),attrSet,baseGuid,scope);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK " + requestEvent.getRequest());  ackReceived=true;}  }
class C{  public boolean isSpammed(){  return !isWaitLongEnough() && spamStrike > maxSpamRequest;}  }
class C{  public void insert(char[] key,int start,char val){  int len=strlen(key) + 1;  if (freenode + len > eq.length) {    redimNodeArrays(eq.length + BLOCK_SIZE);  }  root=insert(root,key,start,val);}  }
class C{  public final void popPair(){  m_firstFree-=2;  m_map[m_firstFree]=DTM.NULL;  m_map[m_firstFree + 1]=DTM.NULL;}  }
class C{  public void parse(String systemId) throws org.xml.sax.SAXException, IOException {  parse(new InputSource(systemId));}  }
class C{  public IDFFCOTUtils(Object callerToken){  callerSession=callerToken;}  }
class C{  public Value cast(STypeDef requiredType,Value v,LineCol lineCol) throws SyntaxException {  if (requiredType != null && isPointerType(requiredType)) {    requiredType=getPointingType(requiredType);  }  if (requiredType == null || (!(requiredType instanceof PrimitiveTypeDef) && requiredType.isAssignableFrom(v.type())) || requiredType.equals(v.type()))   return v;  Value resultVal;  if (requiredType instanceof PrimitiveTypeDef) {    if (v.type() instanceof PrimitiveTypeDef) {      if (v.type().equals(IntTypeDef.get()) || v.type().equals(ShortTypeDef.get()) || v.type().equals(ByteTypeDef.get())|| v.type().equals(CharTypeDef.get())) {        if (requiredType.equals(IntTypeDef.get())) {          return new ValueAnotherType(requiredType,v,lineCol);        } else         if (requiredType.equals(ShortTypeDef.get())) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_INT_TO_SHORT,lineCol);        } else         if (requiredType.equals(ByteTypeDef.get())) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_INT_TO_BYTE,lineCol);        } else         if (requiredType.equals(CharTypeDef.get())) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_INT_TO_CHAR,lineCol);        } else         if (requiredType instanceof LongTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_INT_TO_LONG,lineCol);        } else         if (requiredType instanceof FloatTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_INT_TO_FLOAT,lineCol);        } else         if (requiredType instanceof DoubleTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_INT_TO_DOUBLE,lineCol);        } else         if (requiredType instanceof BoolTypeDef) {          return castObjToPrimitive(BoolTypeDef.get(),boxPrimitive(v,lineCol),lineCol);        } else         throw new LtBug("unknown primitive requiredType " + requiredType);      } else       if (v.type().equals(LongTypeDef.get())) {        if (requiredType instanceof IntTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_LONG_TO_INT,lineCol);        } else         if (requiredType instanceof ShortTypeDef) {          Ins.Cast c1=new Ins.Cast(IntTypeDef.get(),v,Ins.Cast.CAST_LONG_TO_INT,lineCol);          return new Ins.Cast(requiredType,c1,Ins.Cast.CAST_INT_TO_SHORT,lineCol);        } else         if (requiredType instanceof ByteTypeDef) {          Ins.Cast c1=new Ins.Cast(IntTypeDef.get(),v,Ins.Cast.CAST_LONG_TO_INT,lineCol);          return new Ins.Cast(requiredType,c1,Ins.Cast.CAST_INT_TO_BYTE,lineCol);        } else         if (requiredType instanceof CharTypeDef) {          Ins.Cast c1=new Ins.Cast(IntTypeDef.get(),v,Ins.Cast.CAST_LONG_TO_INT,lineCol);          return new Ins.Cast(requiredType,c1,Ins.Cast.CAST_INT_TO_CHAR,lineCol);        } else         if (requiredType instanceof FloatTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_LONG_TO_FLOAT,lineCol);        } else         if (requiredType instanceof DoubleTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_LONG_TO_DOUBLE,lineCol);        } else         if (requiredType instanceof BoolTypeDef) {          return castObjToPrimitive(BoolTypeDef.get(),boxPrimitive(v,lineCol),lineCol);        } else         throw new LtBug("unknown primitive requiredType " + requiredType);      } else       if (v.type().equals(FloatTypeDef.get())) {        if (requiredType instanceof IntTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_FLOAT_TO_INT,lineCol);        } else         if (requiredType instanceof ShortTypeDef) {          Ins.Cast c1=new Ins.Cast(IntTypeDef.get(),v,Ins.Cast.CAST_FLOAT_TO_INT,lineCol);          return new Ins.Cast(requiredType,c1,Ins.Cast.CAST_INT_TO_SHORT,lineCol);        } else         if (requiredType instanceof ByteTypeDef) {          Ins.Cast c1=new Ins.Cast(IntTypeDef.get(),v,Ins.Cast.CAST_FLOAT_TO_INT,lineCol);          return new Ins.Cast(requiredType,c1,Ins.Cast.CAST_INT_TO_BYTE,lineCol);        } else         if (requiredType instanceof CharTypeDef) {          Ins.Cast c1=new Ins.Cast(IntTypeDef.get(),v,Ins.Cast.CAST_FLOAT_TO_INT,lineCol);          return new Ins.Cast(requiredType,c1,Ins.Cast.CAST_INT_TO_CHAR,lineCol);        } else         if (requiredType instanceof LongTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_FLOAT_TO_LONG,lineCol);        } else         if (requiredType instanceof DoubleTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_FLOAT_TO_DOUBLE,lineCol);        } else         if (requiredType instanceof BoolTypeDef) {          return castObjToPrimitive(BoolTypeDef.get(),boxPrimitive(v,lineCol),lineCol);        } else         throw new LtBug("unknown primitive requiredType " + requiredType);      } else       if (v.type().equals(DoubleTypeDef.get())) {        if (requiredType instanceof IntTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_DOUBLE_TO_INT,lineCol);        } else         if (requiredType instanceof ShortTypeDef) {          Ins.Cast c1=new Ins.Cast(IntTypeDef.get(),v,Ins.Cast.CAST_DOUBLE_TO_INT,lineCol);          return new Ins.Cast(requiredType,c1,Ins.Cast.CAST_INT_TO_SHORT,lineCol);        } else         if (requiredType instanceof ByteTypeDef) {          Ins.Cast c1=new Ins.Cast(IntTypeDef.get(),v,Ins.Cast.CAST_DOUBLE_TO_INT,lineCol);          return new Ins.Cast(requiredType,c1,Ins.Cast.CAST_INT_TO_BYTE,lineCol);        } else         if (requiredType instanceof CharTypeDef) {          Ins.Cast c1=new Ins.Cast(IntTypeDef.get(),v,Ins.Cast.CAST_DOUBLE_TO_INT,lineCol);          return new Ins.Cast(requiredType,c1,Ins.Cast.CAST_INT_TO_CHAR,lineCol);        } else         if (requiredType instanceof FloatTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_DOUBLE_TO_FLOAT,lineCol);        } else         if (requiredType instanceof LongTypeDef) {          return new Ins.Cast(requiredType,v,Ins.Cast.CAST_DOUBLE_TO_LONG,lineCol);        } else         if (requiredType instanceof BoolTypeDef) {          return castObjToPrimitive(BoolTypeDef.get(),boxPrimitive(v,lineCol),lineCol);        } else         throw new LtBug("unknown primitive requiredType " + requiredType);      } else       if (v.type().equals(BoolTypeDef.get())) {        err.SyntaxException("cannot cast from boolean to other primitives",lineCol);        return null;      } else       throw new LtBug("unknown primitive value " + v);    } else {      return castObjToPrimitive((PrimitiveTypeDef)requiredType,v,lineCol);    }  } else {    if (v.type() instanceof PrimitiveTypeDef) {      v=boxPrimitive(v,lineCol);      if (requiredType.isAssignableFrom(v.type()))       return v;      resultVal=castObjToObj(requiredType,v,lineCol);    } else {      resultVal=castObjToObj(requiredType,v,lineCol);    }  }  return new Ins.CheckCast(resultVal,requiredType,lineCol);}  }
class C{  public SQLClientInfoException(String reason,String SQLState,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,SQLState);  initCause(cause);  this.failedProperties=failedProperties;}  }
class C{  public boolean isFastFailValidation(){  return _fastFailValidation;}  }
class C{  private boolean isRegisteredForSubOrgs(String serviceName) throws SSOException {  Map avPair=new HashMap();  Set value=new HashSet();  value.add(serviceName);  avPair.put(SERVICE_STATUS_ATTRIBUTE,value);  Set subOrgs=null;  try {    subOrgs=searchSubOrganizations("*",avPair,SCOPE_SUB);  } catch (  AMException ae) {  }  if ((subOrgs != null) && (!subOrgs.isEmpty()) && (subOrgs.size() > 1)) {    return true;  } else {    return false;  }}  }
class C{  public void e(String log,Throwable tr){  if (logFlag) {    String line=getFunctionName();    android.util.Log.e(tag,"{Thread:" + Thread.currentThread().getName() + "}"+ "["+ mClassName+ line+ ":] "+ log+ "\n",tr);  }}  }
class C{  protected String mapTypeName(Field field){  return mapTypeName(keyTypeName(field),valueTypeName(field));}  }
class C{  @Override public void onResume(){  super.onResume();  if (mAdView != null) {    mAdView.resume();  }  if (!mInterstitialAd.isLoaded()) {    requestNewInterstitial();  }}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  ObjectInputStream.GetField f=s.readFields();  DragSource newDragSource=(DragSource)f.get("dragSource",null);  if (newDragSource == null) {    throw new InvalidObjectException("null DragSource");  }  dragSource=newDragSource;  Component newComponent=(Component)f.get("component",null);  if (newComponent == null) {    throw new InvalidObjectException("null component");  }  component=newComponent;  Point newOrigin=(Point)f.get("origin",null);  if (newOrigin == null) {    throw new InvalidObjectException("null origin");  }  origin=newOrigin;  int newAction=f.get("action",0);  if (newAction != DnDConstants.ACTION_COPY && newAction != DnDConstants.ACTION_MOVE && newAction != DnDConstants.ACTION_LINK) {    throw new InvalidObjectException("bad action");  }  action=newAction;  List newEvents;  try {    newEvents=(List)f.get("events",null);  } catch (  IllegalArgumentException e) {    newEvents=(List)s.readObject();  }  if (newEvents != null && newEvents.isEmpty()) {    throw new InvalidObjectException("empty list of events");  } else   if (newEvents == null) {    newEvents=Collections.emptyList();  }  events=newEvents;}  }
class C{  private boolean hasFallbackChildren(){  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK)     return true;  }  return false;}  }
class C{  public boolean isQueryPolicyEvalRequired(){  return isQueryPolicyEval;}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  JLabel lTitle=Utilities.createTitleLabel(INFO_CTRL_PANEL_SYSTEM_INFORMATION.get());  gbc.fill=GridBagConstraints.NONE;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridwidth=2;  gbc.gridx=0;  gbc.gridy=0;  gbc.insets.top=5;  gbc.insets.bottom=7;  add(lTitle,gbc);  gbc.insets.bottom=0;  gbc.insets.top=10;  gbc.gridy++;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridwidth=1;  for (int i=0; i < operations.size(); i++) {    JLabel l=Utilities.createPrimaryLabel(getLabel(operations.get(i)));    gbc.gridy++;    gbc.insets.left=0;    gbc.gridx=0;    gbc.weightx=0.0;    gbc.gridwidth=1;    add(l,gbc);    gbc.insets.left=10;    gbc.gridx=1;    gbc.gridwidth=2;    add(monitoringLabels.get(i),gbc);  }  gbc.gridx=0;  gbc.gridy++;  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.gridwidth=3;  add(Box.createGlue(),gbc);  setBorder(PANEL_BORDER);}  }
class C{  public AMSearchResults searchUsers(AMSearchControl searchControl,String avfilter) throws AMException, SSOException {  return searchObjects(getSearchFilter(AMObject.USER),searchControl,avfilter);}  }
class C{  public boolean isReducedCrossTalkEnabled(){  return reducedCrosstalkEnabled;}  }
class C{  public static String buildTimeString(int year,int month,int day,int hour,int minute,int second){  return String.format("%04d-%02d-%02d %02d:%02d:%02d",year,month,day,hour,minute,second);}  }
class C{  @Inject public AuthenticationAccessAuditFilter(AuthIdHelper authIdHelper,AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory){  super(Component.AUTHENTICATION,auditEventPublisher,auditEventFactory);  this.authIdHelper=authIdHelper;}  }
class C{  public MarshalException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public int hashCode(){  return 42;}  }
class C{  public static MessageBytes newInstance(){  return factory.newInstance();}  }
class C{  private void updateCryptoCipher() throws ConfigureDSException {  final CryptoManagerCfgDefn cryptoManager=CryptoManagerCfgDefn.getInstance();  final StringPropertyDefinition prop=cryptoManager.getKeyWrappingTransformationPropertyDefinition();  String defaultCipher=null;  final DefaultBehaviorProvider<?> p=prop.getDefaultBehaviorProvider();  if (p instanceof DefinedDefaultBehaviorProvider) {    final Collection<?> defaultValues=((DefinedDefaultBehaviorProvider<?>)p).getDefaultValues();    if (!defaultValues.isEmpty()) {      defaultCipher=defaultValues.iterator().next().toString();    }  }  if (defaultCipher != null) {    try {      Cipher.getInstance(defaultCipher);    } catch (    final GeneralSecurityException ex) {      final String alternativeCipher=getAlternativeCipher();      if (alternativeCipher != null) {        try {          updateConfigEntryWithAttribute(DN_CRYPTO_MANAGER,ATTR_CRYPTO_CIPHER_KEY_WRAPPING_TRANSFORMATION,CoreSchema.getDirectoryStringSyntax(),alternativeCipher);        } catch (        final Exception e) {          throw new ConfigureDSException(e,ERR_CONFIGDS_CANNOT_UPDATE_CRYPTO_MANAGER.get(e));        }      }    }  }}  }
class C{  public void deletePeopleContainers(Set peopleContainerDNs) throws AMException, SSOException {  Iterator iter=peopleContainerDNs.iterator();  while (iter.hasNext()) {    String peopleContainerDN=(String)iter.next();    AMPeopleContainer peopleContainer=new AMPeopleContainerImpl(super.token,peopleContainerDN);    peopleContainer.delete();  }}  }
class C{  public LDIFEntryWriter(final List<String> ldifLines){  super(ldifLines);}  }
class C{  void composeTemplates(ElemTemplateElement templ) throws TransformerException {  templ.compose(this);  for (ElemTemplateElement child=templ.getFirstChildElem(); child != null; child=child.getNextSiblingElem()) {    composeTemplates(child);  }  templ.endCompose(this);}  }
class C{  public int read() throws IOException {  char cbuf[]=new char[1];  return read(cbuf,0,1) == 1 ? cbuf[0] : -1;}  }
class C{  public void addMember(PersistentObject member) throws UMSException {  addMember(member.getGuid());}  }
class C{  private static void initializeParams(){  String cacheSize=SystemProperties.get(CACHE_MAX_SIZE_KEY,CACHE_MAX_SIZE);  try {    maxSize=Integer.parseInt(cacheSize);    if (maxSize < 1) {      maxSize=CACHE_MAX_SIZE_INT;    }    if (DEBUG.messageEnabled()) {      DEBUG.message("IdRemoteCachedServicesImpl." + "intializeParams() Caching size set to: " + maxSize);    }  } catch (  NumberFormatException ne) {    maxSize=CACHE_MAX_SIZE_INT;    if (DEBUG.warningEnabled()) {      DEBUG.warning("IdRemoteCachedServicesImpl.initializeParams() - invalid value for cache size specified." + " Setting to default value: " + maxSize);    }  }}  }
class C{  public boolean contains(Point p){  Rectangle r=getBounds();  if (r != null) {    return r.contains(p.x,p.y);  } else {    return false;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(9,"Ann ");  childData=child.getData();  assertEquals("characterdataInsertDataMiddleAssert","Margaret Ann Martin",childData);}  }
class C{  public static MatchedValuesFilter createFromLDAPFilter(RawFilter filter) throws LDAPException {switch (filter.getFilterType()) {case AND:case OR:case NOT:    LocalizableMessage message=ERR_MVFILTER_INVALID_LDAP_FILTER_TYPE.get(filter,filter.getFilterType());  throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);case EQUALITY:return new MatchedValuesFilter(EQUALITY_MATCH_TYPE,filter.getAttributeType(),filter.getAssertionValue(),null,null,null,null);case SUBSTRING:return new MatchedValuesFilter(SUBSTRINGS_TYPE,filter.getAttributeType(),null,filter.getSubInitialElement(),filter.getSubAnyElements(),filter.getSubFinalElement(),null);case GREATER_OR_EQUAL:return new MatchedValuesFilter(GREATER_OR_EQUAL_TYPE,filter.getAttributeType(),filter.getAssertionValue(),null,null,null,null);case LESS_OR_EQUAL:return new MatchedValuesFilter(LESS_OR_EQUAL_TYPE,filter.getAttributeType(),filter.getAssertionValue(),null,null,null,null);case PRESENT:return new MatchedValuesFilter(PRESENT_TYPE,filter.getAttributeType(),null,null,null,null,null);case APPROXIMATE_MATCH:return new MatchedValuesFilter(APPROXIMATE_MATCH_TYPE,filter.getAttributeType(),filter.getAssertionValue(),null,null,null,null);case EXTENSIBLE_MATCH:if (filter.getDNAttributes()) {message=ERR_MVFILTER_INVALID_DN_ATTRIBUTES_FLAG.get(filter);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);} else {return new MatchedValuesFilter(EXTENSIBLE_MATCH_TYPE,filter.getAttributeType(),filter.getAssertionValue(),null,null,null,filter.getMatchingRuleID());}default :message=ERR_MVFILTER_INVALID_LDAP_FILTER_TYPE.get(filter,filter.getFilterType());throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}}  }
class C{  public BAD_INV_ORDER(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  private boolean line_outside_update_box(PlaPointFloat p_1,PlaPointFloat p_2,double p_update_offset,ShapeTileBox p_update_box){  if (p_1 == null || p_2 == null) {    return true;  }  if (Math.max(p_1.v_x,p_2.v_x) < p_update_box.box_ll.v_x - p_update_offset) {    return true;  }  if (Math.max(p_1.v_y,p_2.v_y) < p_update_box.box_ll.v_y - p_update_offset) {    return true;  }  if (Math.min(p_1.v_x,p_2.v_x) > p_update_box.box_ur.v_x + p_update_offset) {    return true;  }  if (Math.min(p_1.v_y,p_2.v_y) > p_update_box.box_ur.v_y + p_update_offset) {    return true;  }  return false;}  }
class C{  public void paintTableBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public InflaterInputStream(InputStream in,Inflater inf){  this(in,inf,512);}  }
class C{  public boolean isDocumentAllDeclarationsProcessed(int documentHandle){  return false;}  }
class C{  public boolean canBeRequestTime(){  return reqTime;}  }
class C{  void pack(){  Component component=getComponent();  if (component instanceof Window) {    ((Window)component).pack();  }}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public MyURLClassLoader(final ClassLoader parent){  super(new URL[0],parent);}  }
class C{  public TemplateEntry(Template template,DN parentDN){  this.branch=null;  dn=null;  this.template=template;  this.parentDN=parentDN;}  }
class C{  public CheckedOutputStream(OutputStream out,Checksum cksum){  super(out);  this.cksum=cksum;}  }
class C{  private InetAddress socksGetServerAddress() throws UnknownHostException {  String proxyName;  InetSocketAddress addr=(InetSocketAddress)proxy.address();  proxyName=addr.getHostName();  if (proxyName == null) {    proxyName=addr.getAddress().getHostAddress();  }  return InetAddress.getByName(proxyName);}  }
class C{  private static boolean isV0Separator(final char c){  if (c < 0x20 || c >= 0x7f) {    if (c != 0x09) {      throw new IllegalArgumentException("Control character in cookie value or attribute.");    }  }  return V0_SEPARATOR_FLAGS.get(c);}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  private void sendResponse(HttpServletRequest request,HttpServletResponse response,String returnURL){  try {    FSUtils.forwardRequest(request,response,returnURL);  } catch (  Exception exp) {    FSUtils.debug.error("FSPreLogin:: sendError Error during sending error page");  }}  }
class C{  protected static AttrSet combineAttrSets(AttrSet attrSet1,AttrSet attrSet2){  AttrSet retAttrSet=new AttrSet();  if (attrSet1 != null) {    int count=attrSet1.size();    for (int i=0; i < count; i++) {      Attr attr=attrSet1.elementAt(i);      retAttrSet.add(attr);    }  }  if (attrSet2 != null) {    int count=attrSet2.size();    for (int i=0; i < count; i++) {      Attr attr=attrSet2.elementAt(i);      retAttrSet.add(attr);    }  }  return retAttrSet;}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public SCPolicyViewBean(){  super("SCPolicy",DEFAULT_DISPLAY_URL);}  }
class C{  @SuppressWarnings("unchecked") public Frame(final int nLocals,final int nStack){  this.values=(V[])new Value[nLocals + nStack];  this.locals=nLocals;}  }
class C{  public Polyline combine(Polyline p_other){  if (p_other == null)   return this;  if (plaline_len() < 3)   throw new IllegalArgumentException(classname + "what A");  if (p_other.plaline_len() < 3)   throw new IllegalArgumentException(classname + "what B");  boolean combine_at_start;  boolean combine_other_at_start;  if (corner_first().equals(p_other.corner_first())) {    combine_at_start=true;    combine_other_at_start=true;  } else   if (corner_first().equals(p_other.corner_last())) {    combine_at_start=true;    combine_other_at_start=false;  } else   if (corner_last().equals(p_other.corner_first())) {    combine_at_start=false;    combine_other_at_start=true;  } else   if (corner_last().equals(p_other.corner_last())) {    combine_at_start=false;    combine_other_at_start=false;  } else {    return this;  }  PlaLineIntAlist lines_list=new PlaLineIntAlist(plaline_len() + p_other.plaline_len());  if (combine_at_start) {    if (combine_other_at_start) {      int from_index=p_other.plaline_len(-1);      for (int index=0; index < p_other.plaline_len(-1); ++index)       lines_list.add(p_other.plaline(from_index--).opposite());    } else {      for (int index=0; index < p_other.plaline_len(-1); ++index)       lines_list.add(p_other.plaline(index));    }    for (int iindex=1; iindex < plaline_len(); ++iindex)     lines_list.add(plaline(iindex));  } else {    for (int index=0; index < plaline_len(-1); ++index)     lines_list.add(plaline(index));    if (combine_other_at_start) {      for (int index=1; index < p_other.plaline_len(); ++index)       lines_list.add(p_other.plaline(index));    } else {      int from_index=p_other.plaline_len(-2);      for (int index=1; index < p_other.plaline_len(); ++index)       lines_list.add(p_other.plaline(from_index--).opposite());    }  }  return new Polyline(lines_list);}  }
class C{  public ExpandRoomFreespace(ShapeTile p_shape,int p_layer){  room_shape=p_shape;  layer_no=p_layer;}  }
class C{  @Override public String toString(){  return "InitializeRequestMessage: baseDN=" + baseDN + " senderId="+ senderID+ " destination="+ destination+ " initWindow="+ initWindow;}  }
class C{  private ServiceInstanceType createServiceInstanceEntry() throws JAXBException {  ServiceInstanceType svc=discoFac.createServiceInstanceType();  svc.setProviderID(providerId);  svc.setServiceType(serviceType);  List descriptionTypeList=(List)svc.getDescription();  for (Iterator iter=descData.iterator(); iter.hasNext(); ) {    DescriptionType dType=createDescriptionEntry((SMDescriptionData)iter.next());    descriptionTypeList.add(dType);  }  return svc;}  }
class C{  public void replaceSubject(String subjectName,Subject subject) throws NameNotFoundException, PolicyException, SSOException {  replaceSubject(subjectName,subject,false);}  }
class C{  public static void writeStringToFile(File file,String data,String encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  protected void fixupElementNS(Node node) throws SAXException {  String namespaceURI=((Element)node).getNamespaceURI();  String prefix=((Element)node).getPrefix();  String localName=((Element)node).getLocalName();  if (namespaceURI != null) {    prefix=prefix == null ? "" : prefix;    String inScopeNamespaceURI=fNSBinder.getURI(prefix);    if ((inScopeNamespaceURI != null && inScopeNamespaceURI.equals(namespaceURI))) {    } else {      if ((fFeatures & NAMESPACEDECLS) != 0) {        if ("".equals(prefix) || "".equals(namespaceURI)) {          ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX,namespaceURI);        } else {          ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX + ":" + prefix,namespaceURI);        }      }      fLocalNSBinder.declarePrefix(prefix,namespaceURI);      fNSBinder.declarePrefix(prefix,namespaceURI);    }  } else {    if (localName == null || "".equals(localName)) {      String msg=Utils.messages.createMessage(MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,new Object[]{node.getNodeName()});      if (fErrorHandler != null) {        fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,null,null,null));      }    } else {      namespaceURI=fNSBinder.getURI("");      if (namespaceURI != null && namespaceURI.length() > 0) {        ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX,"");        fLocalNSBinder.declarePrefix("","");        fNSBinder.declarePrefix("","");      }    }  }}  }
class C{  public void error(Object message,Throwable t){}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  FSSAMLServiceViewBean vb=(FSSAMLServiceViewBean)getViewBean(FSSAMLServiceViewBean.class);  backTrail();  unlockPageTrailForSwapping();  passPgSessionMap(vb);  vb.setValues();  vb.forwardTo(getRequestContext());}  }
class C{  public FSSPAuthenticationContextInfo(String mapping) throws FSException {  if (mapping == null) {    throw new FSException("nullInput",null);  }  StringTokenizer stk=new StringTokenizer(mapping,IFSConstants.ATTRIBUTE_SEPARATOR);  while (stk.hasMoreTokens()) {    String token=stk.nextToken();    int equalSign=token.indexOf(IFSConstants.KEY_VALUE_SEPARATOR);    if (equalSign == -1) {      throw new FSException("wrongInput",null);    }    try {      String key=token.substring(0,equalSign);      String value=token.substring(equalSign + 1,token.length());      if (key.equalsIgnoreCase(IFSConstants.AUTH_CONTEXT_NAME)) {        authenticationContext=value;      } else       if (key.equalsIgnoreCase(IFSConstants.LEVEL)) {        authenticationLevel=Integer.parseInt(value);      } else {        throw new FSException("wrongInput",null);      }    } catch (    IndexOutOfBoundsException ie) {      throw new FSException("wrongInput",null);    }catch (    NumberFormatException ne) {      throw new FSException("wrongInput",null);    }  }  if (authenticationContext == null || authenticationLevel == -1) {    throw new FSException("wrongInput",null);  }}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority){  BlockingQueue<Runnable> taskQueue=new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,"uil-pool-"));}  }
class C{  public final void testGetEncryptedData02(){  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.algName0[i][0],EncryptedPrivateKeyInfoData.encryptedData);      assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.encryptedData,epki.getEncryptedData()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public void init(Subject subject,Map sharedState,Map options){  locale=getLoginLocale();  bundle=amCache.getResBundle(amAuthMSISDN,locale);  if (debug.messageEnabled()) {    debug.message("MSISDN resbundle locale=" + locale);  }  this.options=options;  initAuthConfig();}  }
class C{  public double distance(Location o){  return Math.sqrt(distanceSquared(o));}  }
class C{  public V put(K key,V value){  return putVal(hash(key),key,value,false,true);}  }
class C{  public void handleOpenError(File file,Throwable ex){  System.err.println(ERR_LOGGER_ERROR_OPENING_FILE.get(file,publisherConfigDN,stackTraceToSingleLineString(ex)));}  }
class C{  @Override public synchronized int hashCode(){  int hashCode=getID().hashCode() + rawOffset;  if (useDaylight) {    hashCode+=startYear + startMonth + startDay+ startDayOfWeek+ startTime+ startMode+ endMonth+ endDay+ endDayOfWeek+ endTime+ endMode+ dstSavings;  }  return hashCode;}  }
class C{  public void clearAuthContext(){  this.authContext=null;}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  public CLIException(String message,int exitCode,String subcommandName){  super(message);  this.exitCode=exitCode;  this.subcommandName=subcommandName;}  }
class C{  protected boolean isDescendant(int identity){  return (_parent(identity) >= _startNode) || (_startNode == identity);}  }
class C{  public void mark(int readAheadLimit) throws IOException {  in.mark(readAheadLimit);}  }
class C{  public PdfSignature(){  super(new PdfDictionary());  put(PdfName.Type,PdfName.Sig);}  }
class C{  public Builder requiredAttributes(final String... attributeNamesOrOIDs){  this.requiredAttributes.addAll(asList(attributeNamesOrOIDs));  return this;}  }
class C{  public static Foo[] findByUuid_C_PrevAndNext(long fooId,java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_PrevAndNext(fooId,uuid,companyId,orderByComparator);}  }
class C{  private static boolean hasResource(String path){  return NativeCodeLoader.class.getResource(path) != null;}  }
class C{  public void removeAccessibleSelection(int i){  if (i >= 0 && i < getMenuCount()) {    JMenu menu=getMenu(i);    if (menu != null) {      MenuSelectionManager.defaultManager().setSelectedPath(null);    }    getSelectionModel().setSelectedIndex(-1);  }}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public final Signum negate(){  if (this == POSITIVE) {    return NEGATIVE;  } else   if (this == NEGATIVE) {    return POSITIVE;  } else {    return this;  }}  }
class C{  private String htmlDecode(String content){  return Jsoup.parse(content).text();}  }
class C{  public static Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_First(field2,orderByComparator);}  }
class C{  public void testSetBitTopPositive(){  byte aBytes[]={1,-128,56,100,-15,35,26};  int aSign=1;  int number=63;  byte rBytes[]={0,-128,1,-128,56,100,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private int execute(String[] args){  argParser=new StatusCliArgumentParser(StatusCli.class.getName());  try {    argParser.initializeGlobalArguments(getOutputStream());  } catch (  ArgumentException ae) {    println(ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return ReturnCode.CLIENT_SIDE_PARAM_ERROR.get();  }  argParser.getSecureArgsList().initArgumentsWithConfiguration(argParser);  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(getErrStream(),ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return ReturnCode.CLIENT_SIDE_PARAM_ERROR.get();  }  if (argParser.usageOrVersionDisplayed()) {    return ReturnCode.SUCCESS.get();  }  try {    BuildVersion.checkVersionMismatch();  } catch (  InitializationException e) {    println(e.getMessageObject());    return 1;  }  int v=argParser.validateGlobalOptions(getErrorStream());  if (v != ReturnCode.SUCCESS.get()) {    println(LocalizableMessage.raw(argParser.getUsage()));    return v;  }  final ControlPanelInfo controlInfo=ControlPanelInfo.getInstance();  controlInfo.setTrustManager(getTrustManager());  controlInfo.setConnectTimeout(argParser.getConnectTimeout());  controlInfo.regenerateDescriptor();  if (controlInfo.getServerDescriptor().getStatus() == ServerDescriptor.ServerStatus.STARTED) {    DN bindDn=null;    String bindPwd=null;    controlInfo.setConnectionPolicy(ConnectionProtocolPolicy.USE_ADMIN);    int port=controlInfo.getAdminConnectorHostPort().getPort();    final SecureConnectionCliArgs secureArgsList=argParser.getSecureArgsList();    final StringArgument hostNameArg=secureArgsList.getHostNameArg();    hostNameArg.setPresent(true);    hostNameArg.addValue(hostNameArg.getDefaultValue());    final IntegerArgument portArg=secureArgsList.getPortArg();    portArg.setPresent(true);    portArg.addValue(Integer.toString(port));    final LDAPConnectionConsoleInteraction ci=new LDAPConnectionConsoleInteraction(this,secureArgsList,ALLOW_ANONYMOUS_IF_NON_INTERACTIVE);    try {      ci.run(false);    } catch (    ArgumentException e) {      argParser.displayMessageAndUsageReference(getErrStream(),e.getMessageObject());      return ReturnCode.CLIENT_SIDE_PARAM_ERROR.get();    }    boolean managementContextOpened=false;    try {      if (argParser.isInteractive()) {        bindDn=ci.getBindDN();        bindPwd=ci.getBindPassword();      } else {        bindDn=DN.valueOf(argParser.getBindDN());        bindPwd=argParser.getBindPassword();      }      if (bindPwd != null && !bindPwd.isEmpty()) {        try (ManagementContext mContext=getManagementContextFromConnection(ci)){          managementContextOpened=true;          interactiveTrustManager=ci.getTrustManager();          controlInfo.setTrustManager(interactiveTrustManager);          useInteractiveTrustManager=true;        } catch (        IOException e) {          logger.traceException(e);        }      }    } catch (    ClientException e) {      println(e.getMessageObject());      return ReturnCode.CLIENT_SIDE_PARAM_ERROR.get();    }    if (managementContextOpened) {      try (ConnectionWrapper conn=Utilities.getAdminConnection(controlInfo,bindDn,bindPwd)){        controlInfo.setConnection(conn);        controlInfo.regenerateDescriptor();        writeStatus(controlInfo);        if (!controlInfo.getServerDescriptor().getExceptions().isEmpty()) {          return ReturnCode.ERROR_INITIALIZING_SERVER.get();        }      } catch (      IOException e) {        println();        println(INFO_ERROR_READING_SERVER_CONFIGURATION.get(e));        return ReturnCode.ERROR_INITIALIZING_SERVER.get();      }catch (      ConfigReadException e) {        println();        println(e.getMessageObject());        return ReturnCode.ERROR_INITIALIZING_SERVER.get();      }    } else {      writeStatus(controlInfo);      return ReturnCode.ERROR_USER_CANCELLED.get();    }  } else {    writeStatus(controlInfo);  }  return ReturnCode.SUCCESS.get();}  }
class C{  public void nodesWereInserted(TreeNode node,int[] childIndices){  if (listenerList != null && node != null && childIndices != null && childIndices.length > 0) {    int cCount=childIndices.length;    Object[] newChildren=new Object[cCount];    for (int counter=0; counter < cCount; counter++)     newChildren[counter]=node.getChildAt(childIndices[counter]);    fireTreeNodesInserted(this,getPathToRoot(node),childIndices,newChildren);  }}  }
class C{  public int next(){  int node;  while ((node=super.next()) != END) {    node=makeNodeIdentity(node);    int parent=_parent(node);    int child=_firstch(parent);    int pos=0;    do {      int type=_type(child);      if (ELEMENT_NODE == type)       pos++;    } while ((pos < _pos) && (child=_nextsib(child)) != END);    if (node == child)     return node;  }  return (END);}  }
class C{  public static ActionListener remove(ActionListener l,ActionListener oldl){  return (ActionListener)removeInternal(l,oldl);}  }
class C{  public static Clause where(String clause){  return new SimpleClause(clause);}  }
class C{  public void testUlpNeg(){  String a="-3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.ulp();  String res="1E-45";  int resScale=45;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static KeywordBindRule decode(String expr,EnumBindRuleType type) throws AciException {  if (!Pattern.matches(LDAP_URLS,expr)) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_GROUPDN_EXPRESSION.get(expr);    throw new AciException(message);  }  List<DN> groupDNs=new LinkedList<>();  int ldapURLPos=1;  Pattern ldapURLPattern=Pattern.compile(LDAP_URL);  Matcher ldapURLMatcher=ldapURLPattern.matcher(expr);  while (ldapURLMatcher.find()) {    try {      String value=ldapURLMatcher.group(ldapURLPos).trim();      DN dn=LDAPURL.decode(value,true).getBaseDN();      groupDNs.add(dn);    } catch (    LocalizedIllegalArgumentException|DirectoryException e) {      throw new AciException(WARN_ACI_SYNTAX_INVALID_GROUPDN_URL.get(e.getMessageObject()));    }  }  return new GroupDN(type,groupDNs);}  }
class C{  @Inject public ThreadPoolScriptEvaluator(final StandardScriptEngineManager scriptEngineManager,final ExecutorService threadPool,final ScriptEvaluator delegate){  Reject.ifNull(scriptEngineManager,threadPool,delegate);  this.scriptEngineManager=scriptEngineManager;  this.threadPool=threadPool;  this.delegate=delegate;  scriptEngineManager.addConfigurationListener(new ThreadPoolConfigurator(threadPool));}  }
class C{  public static int convertToInteger(String rawValue) throws XMPException {  try {    if (rawValue == null || rawValue.length() == 0) {      throw new XMPException("Empty convert-string",XMPError.BADVALUE);    }    if (rawValue.startsWith("0x")) {      return Integer.parseInt(rawValue.substring(2),16);    } else {      return Integer.parseInt(rawValue);    }  } catch (  NumberFormatException e) {    throw new XMPException("Invalid integer string",XMPError.BADVALUE);  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){}  }
class C{  protected synchronized void expire() throws IllegalMonitorStateException {  if (owner == Thread.currentThread()) {    expired=true;  } else {    throw new IllegalMonitorStateException("The calling thread is not the owner of the lock!");  }}  }
class C{  public GSSException(int majorCode){  if (validateMajor(majorCode))   major=majorCode; else   major=FAILURE;}  }
class C{  public void test_scheduleLjava_util_TimerTaskJ() throws Exception {  Timer t=null;  try {    t=new Timer();    TimerTestTask testTask=new TimerTestTask();    t.cancel();    try {      t.schedule(testTask,100);      fail("Scheduling a task after Timer.cancel() should throw exception");    } catch (    IllegalStateException expected) {    }    t=new Timer();    testTask=new TimerTestTask();    testTask.cancel();    try {      t.schedule(testTask,100);      fail("Scheduling a task after cancelling it should throw exception");    } catch (    IllegalStateException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,-100);      fail("Scheduling a task with negative delay should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    try {      t.schedule(null,10);      fail("Scheduling a null task should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    try {      t.schedule(null,-10);      fail("Scheduling a null task with negative delays should throw IllegalArgumentException first");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    t.schedule(testTask,200);    awaitRun(testTask);    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,100);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,150);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,70);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,10);    Thread.sleep(400);    assertTrue("Multiple tasks should have incremented counter 4 times not " + timerCounter,timerCounter == 4);    t.cancel();  }  finally {    if (t != null)     t.cancel();  }}  }
class C{  public LazyReplicatedMap(MapOwner owner,Channel channel,long timeout,String mapContextName,int initialCapacity,ClassLoader[] cls){  super(owner,channel,timeout,mapContextName,initialCapacity,AbstractReplicatedMap.DEFAULT_LOAD_FACTOR,Channel.SEND_OPTIONS_DEFAULT,cls,true);}  }
class C{  @Override public ShapeTileSimplex offset(double p_width){  if (p_width == 0)   return this;  ArrayList<PlaLineInt> new_arr=new ArrayList<PlaLineInt>(lines_size());  for (int index=0; index < lines_size(); ++index) {    new_arr.add(tline_get(index).translate(-p_width));  }  ShapeTileSimplex offset_simplex=new ShapeTileSimplex(new_arr);  if (p_width < 0)   offset_simplex=offset_simplex.remove_redundant_lines();  return offset_simplex;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return execute(xctxt,false);}  }
class C{  void logLogout(){  try {    String logLogout=LazyConfig.AUTHD.bundle.getString("logout");    List<String> dataList=new ArrayList<String>();    dataList.add(logLogout);    StringBuilder messageId=new StringBuilder();    messageId.append("LOGOUT");    if (indexType != null) {      messageId.append("_").append(indexType.toString().toUpperCase());      dataList.add(indexType.toString());      if (indexName != null) {        dataList.add(indexName);      }    }    String[] data=dataList.toArray(new String[dataList.size()]);    String contextId=null;    SSOToken localSSOToken=getSSOToken();    if (localSSOToken != null) {      contextId=localSSOToken.getProperty(Constants.AM_CTX_ID);    }    Hashtable<String,String> props=new Hashtable<String,String>();    if (client != null) {      props.put(LogConstants.IP_ADDR,client);    }    if (userDN != null) {      props.put(LogConstants.LOGIN_ID,userDN);    }    if (orgDN != null) {      props.put(LogConstants.DOMAIN,orgDN);    }    if (authMethName != null) {      props.put(LogConstants.MODULE_NAME,authMethName);    }    InternalSession session=getReferencedSession();    if (session != null) {      props.put(LogConstants.LOGIN_ID_SID,finalSessionId.toString());    }    if (contextId != null) {      props.put(LogConstants.CONTEXT_ID,contextId);    }    LazyConfig.AUTHD.logIt(data,AuthD.LOG_ACCESS,messageId.toString(),props);  } catch (  Exception e) {    DEBUG.error("Error creating logout message",e);  }}  }
class C{  public static List<ImageData> createGifFrames(byte[] bytes){  byte[] imageType=readImageType(bytes);  if (imageTypeIs(imageType,gif)) {    GifImageData image=new GifImageData(bytes);    GifImageHelper.processImage(image);    return image.getFrames();  }  throw new IllegalArgumentException("GIF image expected.");}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) Map<String,Object> dictToMap(Dictionary dict){  Map<String,Object> convert=new HashMap<String,Object>();  Enumeration keysEnum=dict.keys();  while (keysEnum.hasMoreElements()) {    String key=(String)keysEnum.nextElement();    Object rawValue=dict.get(key);    Object putValue=rawValue;    if (rawValue instanceof Dictionary) {      putValue=dictToMap((Dictionary)rawValue);    } else     if (rawValue instanceof Vector) {      putValue=new ArrayList((Vector)rawValue);    } else     if (rawValue instanceof Object[]) {      List convList=new ArrayList(Arrays.asList((Object[])rawValue));      convList.add(OPENIDM_ORIG_ARRAY);      convList.add(OPENIDM_ORIG_ARRAY_TYPE + rawValue.getClass().getComponentType().getName());      putValue=convList;    }    convert.put(toEscapedKey(key),putValue);  }  return convert;}  }
class C{  public void insert_long(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_long",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_long(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public PatternSyntaxException(String description,String pattern,int index){  this.desc=description;  this.pattern=pattern;  this.index=index;}  }
class C{  public boolean isModal(){  return modal;}  }
class C{  private static <T>void siftUpComparable(int k,T x,Object[] array){  Comparable<? super T> key=(Comparable<? super T>)x;  while (k > 0) {    int parent=(k - 1) >>> 1;    Object e=array[parent];    if (key.compareTo((T)e) >= 0)     break;    array[k]=e;    k=parent;  }  array[k]=key;}  }
class C{  public String productPublicationDate(){  return properties.getProperty("product.publication.date");}  }
class C{  public static StringArgument hostNameArgument(final String defaultHostName,final LocalizableMessage description) throws ArgumentException {  return StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(description != null ? description : INFO_ARGUMENT_DESCRIPTION_HOST_NAME.get()).defaultValue(defaultHostName).valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildArgument();}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof MemberImpl) {    return Arrays.equals(this.getHost(),((MemberImpl)o).getHost()) && this.getPort() == ((MemberImpl)o).getPort() && Arrays.equals(this.getUniqueId(),((MemberImpl)o).getUniqueId());  } else   return false;}  }
class C{  public boolean domainMatch(String host,String domain){  boolean match=host.equals(domain) || (domain.startsWith(".") && host.endsWith(domain));  return match;}  }
class C{  public boolean update(Long ruleActionID,Long ruleID,Long actionID){  if (ruleActionID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (ruleID != null) {    args.put(KEY_RULEID,ruleID);  }  if (actionID != null) {    args.put(KEY_ACTIONID,actionID);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_RULEACTIONID + "=" + ruleActionID,null) > 0;  }  return false;}  }
