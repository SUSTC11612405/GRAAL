class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  FriendDao.dropTable(db,ifExists);  UserDao.dropTable(db,ifExists);  GroupDao.dropTable(db,ifExists);}  }
class C{  public KMLLineStringPlacemarkImpl(KMLTraversalContext tc,KMLPlacemark placemark,KMLAbstractGeometry geom){  super(((KMLLineString)geom).getCoordinates());  if (tc == null) {    String msg=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (placemark == null) {    String msg=Logging.getMessage("nullValue.ParentIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.parent=placemark;  KMLLineString lineString=(KMLLineString)geom;  if (lineString.isExtrude())   this.setExtrude(true);  if (lineString.getTessellate() != null && lineString.getTessellate())   this.setFollowTerrain(true);  this.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  String altMode=lineString.getAltitudeMode();  if (!WWUtil.isEmpty(altMode)) {    if ("clampToGround".equals(altMode))     this.setAltitudeMode(WorldWind.CLAMP_TO_GROUND); else     if ("relativeToGround".equals(altMode))     this.setAltitudeMode(WorldWind.RELATIVE_TO_GROUND); else     if ("absolute".equals(altMode))     this.setAltitudeMode(WorldWind.ABSOLUTE);  }  if (this.getAltitudeMode() == WorldWind.CLAMP_TO_GROUND && this.isFollowTerrain())   this.setPathType(AVKey.GREAT_CIRCLE); else   this.setPathType(AVKey.LINEAR);  if (placemark.getName() != null)   this.setValue(AVKey.DISPLAY_NAME,placemark.getName());  if (placemark.getDescription() != null)   this.setValue(AVKey.DESCRIPTION,placemark.getDescription());  if (placemark.getSnippetText() != null)   this.setValue(AVKey.SHORT_DESCRIPTION,placemark.getSnippetText());  this.setValue(AVKey.CONTEXT,this.parent);}  }
class C{  public boolean hasStructuredPostalAddress(){  return hasExtension(StructuredPostalAddress.class);}  }
class C{  public boolean isStartEager(){  return isStartEager;}  }
class C{  private void checkRemainingExtensions(Set<String> exts) throws CertificateException {  exts.remove(SimpleValidator.OID_BASIC_CONSTRAINTS);  exts.remove(OID_SUBJECT_ALT_NAME);  if (!exts.isEmpty()) {    throw new CertificateException("Certificate contains unsupported " + "critical extensions: " + exts);  }}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3));}  }
class C{  @NonNull public Builder addMethod(@NonNull String className,@NonNull String methodName){  Class<?> clazz=getClass(className);  if (clazz == null) {    addError(className);    return this;  }  return addMethod(clazz,methodName);}  }
class C{  public void executeFileMoveAfterStepsImpl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto){  try {    BusinessObjectDataEntity targetBusinessObjectDataEntity=businessObjectDataDaoHelper.getBusinessObjectDataEntity(completeUploadSingleParamsDto.getTargetBusinessObjectDataKey());    if (completeUploadSingleParamsDto.getTargetNewStatus().equalsIgnoreCase(BusinessObjectDataStatusEntity.VALID) && !targetBusinessObjectDataEntity.getStatus().getCode().equalsIgnoreCase(completeUploadSingleParamsDto.getTargetOldStatus())) {      completeUploadSingleParamsDto.setTargetNewStatus(null);    }    if (completeUploadSingleParamsDto.getTargetNewStatus() != null) {      completeUploadSingleParamsDto.setTargetOldStatus(targetBusinessObjectDataEntity.getStatus().getCode());      businessObjectDataDaoHelper.updateBusinessObjectDataStatus(targetBusinessObjectDataEntity,completeUploadSingleParamsDto.getTargetNewStatus());    }  } catch (  Exception e) {    LOGGER.error("Failed to update target business object data status. newBusinessObjectDataStatus=\"{}\" s3Key=\"{}\" targetBusinessObjectDataKey={}",completeUploadSingleParamsDto.getTargetNewStatus(),completeUploadSingleParamsDto.getSourceFilePath(),jsonHelper.objectToJson(completeUploadSingleParamsDto.getTargetBusinessObjectDataKey()),e);    completeUploadSingleParamsDto.setTargetNewStatus(null);  }  try {    S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=S3FileTransferRequestParamsDto.builder().s3BucketName(completeUploadSingleParamsDto.getSourceBucketName()).s3KeyPrefix(completeUploadSingleParamsDto.getSourceFilePath()).httpProxyHost(completeUploadSingleParamsDto.getAwsParams().getHttpProxyHost()).httpProxyPort(completeUploadSingleParamsDto.getAwsParams().getHttpProxyPort()).build();    s3Dao.deleteDirectory(s3FileTransferRequestParamsDto);  } catch (  Exception e) {    LOGGER.error("Failed to delete the upload single file. s3Key=\"{}\" sourceS3BucketName=\"{}\" sourceBusinessObjectDataKey={}",completeUploadSingleParamsDto.getSourceFilePath(),completeUploadSingleParamsDto.getSourceBucketName(),jsonHelper.objectToJson(completeUploadSingleParamsDto.getSourceBusinessObjectDataKey()),e);  }  try {    completeUploadSingleParamsDto.setSourceOldStatus(completeUploadSingleParamsDto.getSourceNewStatus());    completeUploadSingleParamsDto.setSourceNewStatus(BusinessObjectDataStatusEntity.DELETED);    businessObjectDataDaoHelper.updateBusinessObjectDataStatus(businessObjectDataDaoHelper.getBusinessObjectDataEntity(completeUploadSingleParamsDto.getSourceBusinessObjectDataKey()),completeUploadSingleParamsDto.getSourceNewStatus());  } catch (  Exception e) {    LOGGER.error("Failed to update source business object data status. newBusinessObjectDataStatus=\"{}\" s3Key=\"{}\" sourceBusinessObjectDataKey={}",BusinessObjectDataStatusEntity.DELETED,completeUploadSingleParamsDto.getSourceFilePath(),jsonHelper.objectToJson(completeUploadSingleParamsDto.getSourceBusinessObjectDataKey()),e);    completeUploadSingleParamsDto.setSourceNewStatus(null);  }  if (completeUploadSingleParamsDto.getSourceNewStatus() != null) {    notificationEventService.processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG,completeUploadSingleParamsDto.getSourceBusinessObjectDataKey(),completeUploadSingleParamsDto.getSourceNewStatus(),completeUploadSingleParamsDto.getSourceOldStatus());  }  if (completeUploadSingleParamsDto.getTargetNewStatus() != null) {    notificationEventService.processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG,completeUploadSingleParamsDto.getTargetBusinessObjectDataKey(),completeUploadSingleParamsDto.getTargetNewStatus(),completeUploadSingleParamsDto.getTargetOldStatus());  }}  }
class C{  protected void configureGLRuntimeCaps(){  SceneController sc=this.getSceneController();  if (sc == null)   return;  GLRuntimeCapabilities glrc=sc.getGLRuntimeCapabilities();  if (glrc == null) {    String message=Logging.getMessage("nullValue.GLRuntimeCapabilitiesIsNull");    Logging.logger().warning(message);    return;  }  glrc.setFramebufferObjectEnabled(this.isEnableFramebufferObjects());}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.traceTest=true;  test.test();}  }
class C{  public boolean put(Object object) throws CacheException, InterruptedException {  this.giiLock.readLock().lock();  try {    if (this.giiCount > 0) {      if (logger.isDebugEnabled()) {        logger.debug("{}: adding message to GII queue of size {}: {}",this.region.getName(),giiQueue.size(),object);      }      if (object instanceof HAEventWrapper) {        putEntryConditionallyIntoHAContainer((HAEventWrapper)object);      }      this.giiQueue.add(object);    } else {      if (logger.isTraceEnabled()) {        logger.trace("{}: adding message to HA queue: {}",this.region.getName(),object);      }      basicPut(object);    }  }  finally {    this.giiLock.readLock().unlock();  }  return true;}  }
class C{  SpeechToTextWebSocketListener(final InputStream stream,final RecognizeOptions options,final RecognizeCallback callback){  this.stream=stream;  this.options=options;  this.callback=callback;}  }
class C{  public int size(){  return _all.size();}  }
class C{  public void fineGrained(){  changed(F_FINE_GRAINED);}  }
class C{  public NodeSequence(){  return;}  }
class C{  public static Object readStaticField(final Field field) throws IllegalAccessException {  return FieldUtils.readStaticField(field,false);}  }
class C{  public static void emitDataFile(byte[] ary,String name){  FileOutputStream ostr;  try {    File file=File.createTempFile("DateFile",name);    ostr=new FileOutputStream(file);    System.out.println("Write: " + file.getPath());    ostr.write(ary);    ostr.close();  } catch (  IOException ex) {  }}  }
class C{  public void endGroup(String groupName,PrintWriter out){}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){}  }
class C{  public int selectNextWeapon(){  int selected=getNextWeaponListIdx();  weaponList.setSelectedIndex(selected);  weaponList.ensureIndexIsVisible(selected);  if ((selected >= 0) && (selected < entity.getWeaponList().size())) {    return entity.getEquipmentNum(((WeaponListModel)weaponList.getModel()).getWeaponAt(selected));  } else {    return -1;  }}  }
class C{  public void endVisit(TagElement node){}  }
class C{  public void normalizeTable(){  for (int i=0; i < this.getLogicalColumnCount(); i++) {    normalizeColumn(i);  }}  }
class C{  static private String encodeUri(final String uri){  final StringTokenizer st=new StringTokenizer(uri,"/ ",true);  final StringBuilder newUri=new StringBuilder("");  while (st.hasMoreTokens()) {    final String tok=st.nextToken();    if (tok.equals("/"))     newUri.append("/"); else     if (tok.equals(" "))     newUri.append("%20"); else {      try {        newUri.append(URLEncoder.encode(tok,UTF8));      } catch (      UnsupportedEncodingException uee) {        throw new RuntimeException(uee);      }    }  }  return newUri.toString();}  }
class C{  @org.junit.Test public void testUnderstanding(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("is the sky blue?");  String response=waitForOutput(output);  assertUnknown(response);  text.input("the sky is blue");  response=waitForOutput(output);  assertKnown(response);  text.input("is the sky blue?");  response=waitForOutput(output);  assertTrue(response);  bot.shutdown();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CODE_LANG___CODE_LANG_1:    setCodeLang_1(CODE_LANG_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private void checkQueryText(final String queryText){  if (queryText.indexOf("'''") > 0) {    throw new IllegalArgumentException("queryText may not contain '''-quoted strings.");  }}  }
class C{  protected void notifyConnect(){  for (  ISharedObjectListener listener : listeners) {    listener.onSharedObjectConnect(this);  }}  }
class C{  public static String fromUUID(UUID uuid){  return "urn:uuid:" + uuid.toString();}  }
class C{  private XMLAttribute findAttribute(String fullName){  Iterator enm=this.attributes.iterator();  while (enm.hasNext()) {    XMLAttribute attr=(XMLAttribute)enm.next();    if (attr.getFullName().equals(fullName)) {      return attr;    }  }  return null;}  }
class C{  public Object remove(Object key){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k) {      modCount++;      size--;      Object oldValue=tab[i + 1];      tab[i + 1]=null;      tab[i]=null;      closeDeletion(i);      return oldValue;    }    if (item == null)     return null;    i=nextKeyIndex(i,len);  }}  }
class C{  private KeyFactorySpi nextSpi(KeyFactorySpi oldSpi){synchronized (lock) {    if ((oldSpi != null) && (oldSpi != spi)) {      return spi;    }    if (serviceIterator == null) {      return null;    }    while (serviceIterator.hasNext()) {      Service s=serviceIterator.next();      try {        Object obj=s.newInstance(null);        if (obj instanceof KeyFactorySpi == false) {          continue;        }        KeyFactorySpi spi=(KeyFactorySpi)obj;        provider=s.getProvider();        this.spi=spi;        return spi;      } catch (      NoSuchAlgorithmException e) {      }    }    serviceIterator=null;    return null;  }}  }
class C{  @Override public double[] sample(){  double length=maximum - minimum;  return new double[]{sampler.nextFloat() * length + minimum};}  }
class C{  public boolean adjustValue(int key,long amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  protected void finishScanning(){  try {    this.blockExecutionInfo.getScannedResultProcessor().addScannedResult(scannerResultAggregator.getAggregatedResult());  } catch (  QueryExecutionException e) {    LOGGER.error(e,"Problem while adding the result to Scanned Result Processor");  }}  }
class C{  @CallSuper public void onViewModelDestroyed(){  mView=null;  mUiThreadTaskQueue.clear();}  }
class C{  public void testGetServletNamesForClassWithSingleServlet() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>s1class</servlet-class>"+ "  </servlet>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> servletNames=WebXmlUtils.getServletNamesForClass(webXml,"s1class");  assertEquals(1,servletNames.size());  assertEquals("s1",servletNames.get(0));}  }
class C{  @Interruptible public static Word bootTimeWriteBarrier(Word value){  return Selected.Plan.get().bootTimeWriteBarrier(value);}  }
class C{  public void parse(final SetCookie cookie,final String portValue) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof SetCookie2) {    SetCookie2 cookie2=(SetCookie2)cookie;    if (portValue != null && portValue.trim().length() > 0) {      int[] ports=parsePortAttribute(portValue);      cookie2.setPorts(ports);    }  }}  }
class C{  public static int compareNull(boolean aNull,int sortType){  if ((sortType & NULLS_FIRST) != 0) {    return aNull ? -1 : 1;  } else   if ((sortType & NULLS_LAST) != 0) {    return aNull ? 1 : -1;  } else {    int comp=aNull ? DEFAULT_NULL_SORT : -DEFAULT_NULL_SORT;    return (sortType & DESCENDING) == 0 ? comp : -comp;  }}  }
class C{  protected void stopDetectRootViewChanges(){  Log.d(TAG,"stopDetectRootViewChanges()");  if (mActivityRootView != null)   mActivityRootView.getViewTreeObserver().removeOnGlobalLayoutListener(mLayoutListener);}  }
class C{  public List<Award> awards(){  return awards;}  }
class C{  @VisibleForTesting boolean prepareAndUploadPoints(Track track,List<Location> locations,boolean lastBatch){  ArrayList<Track> splitTracks=SendToGoogleUtils.prepareLocations(track,locations);  boolean onlyOneSegment=lastBatch && currentSegment == 1 && splitTracks.size() == 1;  for (  Track segment : splitTracks) {    if (!onlyOneSegment) {      segment.setName(context.getString(R.string.send_google_track_part_label,segment.getName(),currentSegment));    }    if (!uploadSegment(segment.getName(),segment.getLocations())) {      Log.d(TAG,"Unable to upload segment");      return false;    }    currentSegment++;  }  return true;}  }
class C{  public DoubleDataBox(int rows,int cols){  this.data=new double[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      data[i][j]=Double.NaN;    }  }}  }
class C{  public void applyTemplates(Object input,XPath xpath) throws Exception {  applyTemplates(input,xpath,this.modeName);}  }
class C{  public boolean hasWindow(){  return mWindow != null;}  }
class C{  public static String toString(Timestamp v){  if (v != null) {    return new SimpleDateFormat("EEE MM/dd/yyyy hh:mm:ss a").format(v);  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:20.004 -0500",hash_original_method="BD4623110C086A165B3AF83FA1BCBA34",hash_generated_method="1BD1699667D9B50F813761DAFD73391A") public void hangup() throws CallStateException {  owner.hangup(this);}  }
class C{  static public List<IValueExpressionNode> extractToplevelConjuncts(final IValueExpressionNode vexp,List<IValueExpressionNode> nodes){  if (vexp instanceof FunctionNode) {    final FunctionNode functionNode=(FunctionNode)vexp;    final URI functionURI=functionNode.getFunctionURI();    if (functionURI.equals(FunctionRegistry.AND)) {      extractToplevelConjuncts((ValueExpressionNode)functionNode.get(0),nodes);      extractToplevelConjuncts((ValueExpressionNode)functionNode.get(1),nodes);      return nodes;    }  }  nodes.add(vexp);  return nodes;}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.998 -0500",hash_original_method="B2A0AA5C97E9078316CA6FEBE65DB0C3",hash_generated_method="FE5A84F56F259ACFA9BFA9B919E878D5") public String byteStringNoSlash(){  StringBuffer retval=new StringBuffer();  try {    while (true) {      char next=lookAhead(0);      if (next == '\0' || next == '\n' || next == '/') {        break;      } else {        consume(1);        retval.append(next);      }    }  } catch (  ParseException ex) {    return retval.toString();  }  return retval.toString();}  }
class C{  @Override public Void call() throws Exception {  try {    final ICloseableIterator<IBindingSet[]> sitr=context.getSource();    while (sitr.hasNext()) {      final IBindingSet[] chunk=sitr.next();      for (      IBindingSet bset : chunk) {        final IRunningQuery runningSubquery=new SubqueryTask(bset,subquery,context).call();        if (!runningSubquery.isDone()) {          throw new AssertionError("Future not done: " + runningSubquery.toString());        }      }    }    context.getSink().flush();    return null;  }  finally {    context.getSource().close();    context.getSink().close();    if (context.getSink2() != null)     context.getSink2().close();  }}  }
class C{  Node<K,V> findFirst(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    if (n.value != null)     return n;    n.helpDelete(b,n.next);  }}  }
class C{  public String convertUnaryOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static int binarySearch(float[] array,float value){  return binarySearch(array,0,array.length,value);}  }
class C{  public static <T extends IChained<T>>void concatenate(T left,T right){  T next=left.getNext();  if (next != null) {    next.setPrevious(null);  }  T previous=right.getPrevious();  if (previous != null) {    previous.setNext(null);  }  left.setNext(right);  right.setPrevious(left);}  }
class C{  public EntityAttribute intern(EntityAttribute att){  EntityAttribute result=null;  if (!ignoredAttKeys.contains(att.getKey()) && (!ignorePathKeys || !att.getKey().contains(":"))) {    att.setKey(intern(att.getKey()));    att.setValue(intern(att.getValue()));    result=att;  }  return result;}  }
class C{  public final AC fill(){  return fill(curIx);}  }
class C{  @Override public void paint(Graphics g){  if (this.nodesToRemove.size() > 0) {    this.nodesToRemove.stream().forEach(null);    this.nodesToRemove.clear();    DefaultNode[] lastNode={null};    this.nodes.stream().filter(null).forEach(null);  }  Graphics2D g2d=(Graphics2D)g;  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  GraphToolKit.fillBackgroundColor(g2d,Color.WHITE);  this.nodes.stream().forEach(null);  this.links.stream().forEach(null);  if (this.paintToolTip) {    this.toolTip.paintNode(g2d);    resize();  }}  }
class C{  public static boolean areMsCapiStoresSupported(){  return Security.getProvider(MS_CAPI.jce()) != null;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_STAT\"";  db.execSQL(sql);}  }
class C{  private void sweepLargePages(boolean sweepNursery){  while (true) {    Address cell=sweepNursery ? treadmill.popNursery() : treadmill.pop();    if (cell.isZero())     break;    release(getSuperPage(cell));  }  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(sweepNursery ? treadmill.nurseryEmpty() : treadmill.fromSpaceEmpty());}  }
class C{  public GreekStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void drawString(AttributedCharacterIterator iterator,float x,float y){  System.err.println("drawString(AttributedCharacterIterator)");}  }
class C{  boolean ensureTouchMode(boolean inTouchMode){  if (DBG)   Log.d("touchmode","ensureTouchMode(" + inTouchMode + "), current "+ "touch mode is "+ mAttachInfo.mInTouchMode);  if (mAttachInfo.mInTouchMode == inTouchMode)   return false;  try {    mWindowSession.setInTouchMode(inTouchMode);  } catch (  RemoteException e) {    throw new RuntimeException(e);  }  return ensureTouchModeLocally(inTouchMode);}  }
class C{  public boolean betterThan(Fitness _fitness){  return fitness < ((SPEA2MultiObjectiveFitness)_fitness).fitness;}  }
class C{  public static Conjunction and(Expression first,Expression second,Expression... expressions){  return new Conjunction(first,second,expressions);}  }
class C{  private ByteString bytes(String str) throws Exception {  return ByteString.copyFrom(str.getBytes("ISO-8859-1"));}  }
class C{  public void testGetF6(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF6();  assertEquals(expResult,result);}  }
class C{  public Map<Integer,Double> compute(long... dataset){  return computeInPlace(longsToDoubles(dataset));}  }
class C{  protected void removeAt(int index){  _set[index]=no_entry_key;  super.removeAt(index);}  }
class C{  long toEpochSecond(ZoneOffset standardOffset,int savingsBeforeSecs){  LocalDateTime ldt=LocalDateTime.of(toLocalDate(),time);  ZoneOffset wallOffset=ZoneOffset.ofTotalSeconds(standardOffset.getTotalSeconds() + savingsBeforeSecs);  return timeDefinition.createDateTime(ldt,standardOffset,wallOffset).toEpochSecond(wallOffset);}  }
class C{  protected boolean controlContainsPoint(final int x,final int y){  final Point controlSize=computeSize(SWT.DEFAULT,SWT.DEFAULT,true);  return (x >= 0 && y >= 0 && x < controlSize.x && y < controlSize.y);}  }
class C{  private void updateProgress(Graphics2D g2,String text,int progress){  Object oldAAValue=g2.getRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING);  g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB);  g2.setComposite(AlphaComposite.Clear);  g2.fillRect(20,200,480,305);  g2.setPaintMode();  g2.setColor(new Color(51,153,255));  g2.fillRect(22,272,452 * progress / 100,21);  g2.setColor(Color.black);  g2.drawString(text + "...",23,310);  int l=g2.getFontMetrics().stringWidth(ReleaseInfo.getRealVersion());  g2.drawString(ReleaseInfo.getRealVersion(),480 - l,325);  g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,oldAAValue);  LOGGER.debug("Startup (" + progress + "%) "+ text);}  }
class C{  public boolean isWednesday(){  return wednesday;}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  public Holder(ObjectDigestInfo objectDigestInfo){  this.objectDigestInfo=objectDigestInfo;}  }
class C{  public static void saveAsBinary(NSObject root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists() && !parent.mkdirs()) {    throw new IOException("The output directory does not exist and could not be created.");  }  BinaryPropertyListWriter.write(out,root);}  }
class C{  public String addStaticImport(String qualifiedMemberName){  if (isReadOnly())   return qualifiedMemberName;  return qualifiedMemberName;}  }
class C{  public byte[] processBlock(byte[] in,int inOff,int len) throws InvalidCipherTextException {  if (key == null) {    throw new IllegalStateException("NaccacheStern engine not initialised");  }  if (len > (getInputBlockSize() + 1)) {    throw new DataLengthException("input too large for Naccache-Stern cipher.\n");  }  if (!forEncryption) {    if (len < getInputBlockSize()) {      throw new InvalidCipherTextException("BlockLength does not match modulus for Naccache-Stern cipher.\n");    }  }  byte[] block;  if (inOff != 0 || len != in.length) {    block=new byte[len];    System.arraycopy(in,inOff,block,0,len);  } else {    block=in;  }  BigInteger input=new BigInteger(1,block);  if (debug) {    System.out.println("input as BigInteger: " + input);  }  byte[] output;  if (forEncryption) {    output=encrypt(input);  } else {    Vector plain=new Vector();    NaccacheSternPrivateKeyParameters priv=(NaccacheSternPrivateKeyParameters)key;    Vector primes=priv.getSmallPrimes();    for (int i=0; i < primes.size(); i++) {      BigInteger exp=input.modPow(priv.getPhi_n().divide((BigInteger)primes.elementAt(i)),priv.getModulus());      Vector al=lookup[i];      if (lookup[i].size() != ((BigInteger)primes.elementAt(i)).intValue()) {        if (debug) {          System.out.println("Prime is " + primes.elementAt(i) + ", lookup table has size "+ al.size());        }        throw new InvalidCipherTextException("Error in lookup Array for " + ((BigInteger)primes.elementAt(i)).intValue() + ": Size mismatch. Expected ArrayList with length "+ ((BigInteger)primes.elementAt(i)).intValue()+ " but found ArrayList of length "+ lookup[i].size());      }      int lookedup=al.indexOf(exp);      if (lookedup == -1) {        if (debug) {          System.out.println("Actual prime is " + primes.elementAt(i));          System.out.println("Decrypted value is " + exp);          System.out.println("LookupList for " + primes.elementAt(i) + " with size "+ lookup[i].size()+ " is: ");          for (int j=0; j < lookup[i].size(); j++) {            System.out.println(lookup[i].elementAt(j));          }        }        throw new InvalidCipherTextException("Lookup failed");      }      plain.addElement(BigInteger.valueOf(lookedup));    }    BigInteger test=chineseRemainder(plain,primes);    output=test.toByteArray();  }  return output;}  }
class C{  @SuppressWarnings("unchecked") private void registerMBeans(ObjectName mBeanName){  if (!initialized || !connection.isConnected()) {    return;  }  List<JmxAttributeDescriptor> descriptors=new ArrayList<JmxAttributeDescriptor>();  Set<ObjectName> allNames=mBeanServer.queryNames(mBeanName,null);  for (  ObjectName objectName : allNames) {    try {      MBeanAttributeInfo[] attributeInfos=mBeanServer.getMBeanInfo(objectName).getAttributes();      for (      MBeanAttributeInfo mBeanAttributeInfo : attributeInfos) {        JmxAttributeDescriptor descriptor=new JmxAttributeDescriptor();        descriptor.setmBeanObjectName(objectName.toString());        descriptor.setAttributeName(mBeanAttributeInfo.getName());        descriptor.setmBeanAttributeDescription(mBeanAttributeInfo.getDescription());        descriptor.setmBeanAttributeIsIs(mBeanAttributeInfo.isIs());        descriptor.setmBeanAttributeIsReadable(mBeanAttributeInfo.isReadable());        descriptor.setmBeanAttributeIsWritable(mBeanAttributeInfo.isWritable());        descriptor.setmBeanAttributeType(mBeanAttributeInfo.getType());        descriptors.add(descriptor);      }    } catch (    IntrospectionException e) {      continue;    }catch (    InstanceNotFoundException e) {      continue;    }catch (    ReflectionException e) {      continue;    }  }  try {    Collection<JmxAttributeDescriptor> toMonitor=connection.analyzeJmxAttributes(platformManager.getPlatformId(),descriptors);    for (    JmxAttributeDescriptor descriptor : toMonitor) {      activeAttributes.put(descriptor,Boolean.FALSE);    }    for (    ObjectName name : allNames) {      nameStringToObjectName.put(name.toString(),name);    }  } catch (  ServerUnavailableException e) {    if (log.isWarnEnabled()) {      log.warn("Error registering JMX attributes on the server.",e);    }  }catch (  IdNotAvailableException e) {    if (log.isDebugEnabled()) {      log.debug("Error registering JMX attributes on the server.",e);    }  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP2") public WavBuffer(byte[] content){  buffer=content;  initFmt();  initData();}  }
class C{  public int[] add(ReadablePartial instant,int fieldIndex,int[] values,int valueToAdd){  throw unsupported();}  }
class C{  public CMSSignedData generate(String eContentType,CMSProcessable content,boolean encapsulate,String sigProvider,boolean addDefaultAttributes) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return generate(eContentType,content,encapsulate,CMSUtils.getProvider(sigProvider),addDefaultAttributes);}  }
class C{  public ISchedulingRule validateEditRule(IResource[] resources){  if (resources.length == 0)   return null;  if (resources.length == 1) {    if (resources[0].getType() == IResource.ROOT)     return root;    return factoryFor(resources[0]).validateEditRule(resources);  }  HashSet<ISchedulingRule> rules=new HashSet<ISchedulingRule>();  IResource[] oneResource=new IResource[1];  for (int i=0; i < resources.length; i++) {    if (resources[i].getType() == IResource.ROOT)     return root;    oneResource[0]=resources[i];    ISchedulingRule rule=factoryFor(resources[i]).validateEditRule(oneResource);    if (rule != null)     rules.add(rule);  }  if (rules.isEmpty())   return null;  if (rules.size() == 1)   return rules.iterator().next();  ISchedulingRule[] ruleArray=rules.toArray(new ISchedulingRule[rules.size()]);  return new MultiRule(ruleArray);}  }
class C{  protected ElementoEtiquetaDato findElementoEtiquetaDatoById(String idElemento,ContenedorElementos contenedor){  ElementoEtiquetaDato dato=null;  for (int i=0; (dato == null) && (i < contenedor.getTotalElementos()); i++) {    Elemento elemento=(Elemento)contenedor.getElemento(i);switch (elemento.getTipo()) {case TiposElemento.TIPO_ELEMENTO_AREA:case TiposElemento.TIPO_ELEMENTO_CABECERA:case TiposElemento.TIPO_ELEMENTO_TABLA:case TiposElemento.TIPO_ELEMENTO_TABLA_TEXTUAL:      dato=findElementoEtiquetaDatoById(idElemento,(ContenedorElementos)elemento);    break;case TiposElemento.TIPO_ELEMENTO_ETIQUETA_DATO:  if ((((ElementoEtiquetaDato)elemento).getEdicion() != null) && idElemento.equals(((ElementoEtiquetaDato)elemento).getEdicion().getId()))   dato=(ElementoEtiquetaDato)elemento;break;}}return dato;}  }
class C{  public javax.naming.Context createSubcontext(Name name) throws NamingException {  if (name.size() == 0)   throw new InvalidNameException("Name is empty");  NameComponent[] path=CNNameParser.nameToCosName(name);  try {    return callBindNewContext(path);  } catch (  CannotProceedException e) {    javax.naming.Context cctx=getContinuationContext(e);    return cctx.createSubcontext(e.getRemainingName());  }}  }
class C{  public DefaultTableColumn addPropertyColumn(Object headerValue,String property,Class type,boolean editable){  return addColumn(headerValue,property,new PropertyModel(rowModel,property,type,editable));}  }
class C{  @Override public void snmpV1Trap(int generic,int specific,SnmpVarBindList varBindList) throws IOException, SnmpStatusException {  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"snmpV1Trap","generic=" + generic + ", specific="+ specific);  }  SnmpPduTrap pdu=new SnmpPduTrap();  pdu.address=null;  pdu.port=trapPort;  pdu.type=pduV1TrapPdu;  pdu.version=snmpVersionOne;  pdu.community=null;  pdu.enterprise=enterpriseOid;  pdu.genericTrap=generic;  pdu.specificTrap=specific;  pdu.timeStamp=getSysUpTime();  if (varBindList != null) {    pdu.varBindList=new SnmpVarBind[varBindList.size()];    varBindList.copyInto(pdu.varBindList);  } else   pdu.varBindList=null;  try {    if (address != null)     pdu.agentAddr=handleMultipleIpVersion(address.getAddress()); else     pdu.agentAddr=handleMultipleIpVersion(InetAddress.getLocalHost().getAddress());  } catch (  UnknownHostException e) {    byte[] zeroedAddr=new byte[4];    pdu.agentAddr=handleMultipleIpVersion(zeroedAddr);  }  sendTrapPdu(pdu);}  }
class C{  public void buildCorpus(){  Set<String> set=new HashSet<String>(hamTokenCounts.size() + spamTokenCounts.size());  set.addAll(hamTokenCounts.keySet());  set.addAll(spamTokenCounts.keySet());  Map<String,Double> tempCorpus=new HashMap<String,Double>(set.size());  for (  String token : set) {    tempCorpus.put(token,computeProbability(token));  }  setCorpus(tempCorpus);}  }
class C{  static void computeHash(int[] arrW){  int a=arrW[HASH_OFFSET];  int b=arrW[HASH_OFFSET + 1];  int c=arrW[HASH_OFFSET + 2];  int d=arrW[HASH_OFFSET + 3];  int e=arrW[HASH_OFFSET + 4];  int temp;  for (int t=16; t < 80; t++) {    temp=arrW[t - 3] ^ arrW[t - 8] ^ arrW[t - 14]^ arrW[t - 16];    arrW[t]=(temp << 1) | (temp >>> 31);  }  for (int t=0; t < 20; t++) {    temp=((a << 5) | (a >>> 27)) + ((b & c) | ((~b) & d)) + (e + arrW[t] + 0x5A827999);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=20; t < 40; t++) {    temp=(((a << 5) | (a >>> 27))) + (b ^ c ^ d) + (e + arrW[t] + 0x6ED9EBA1);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=40; t < 60; t++) {    temp=((a << 5) | (a >>> 27)) + ((b & c) | (b & d) | (c & d)) + (e + arrW[t] + 0x8F1BBCDC);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  for (int t=60; t < 80; t++) {    temp=(((a << 5) | (a >>> 27))) + (b ^ c ^ d) + (e + arrW[t] + 0xCA62C1D6);    e=d;    d=c;    c=(b << 30) | (b >>> 2);    b=a;    a=temp;  }  arrW[HASH_OFFSET]+=a;  arrW[HASH_OFFSET + 1]+=b;  arrW[HASH_OFFSET + 2]+=c;  arrW[HASH_OFFSET + 3]+=d;  arrW[HASH_OFFSET + 4]+=e;}  }
class C{  public static String toBinaryString(long l){  return toBinaryString(toByteArray(l));}  }
class C{  private void onBluetoothDisconnectRequested(Context context,Intent intent){  BluetoothDevice device;  device=(BluetoothDevice)intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);  Log.i(TAG,"Bluetooth broadcast: disconnected! (from " + device + ")");}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.POINT__Z:    setZ((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:27.308 -0500",hash_original_method="E87735CFC3568A22F95F85C3BABBD5E2",hash_generated_method="1BCB57549E8D5FC89BAEB4083D3C579A") public int remove(long... ids){  return markRowDeleted(ids);}  }
class C{  public boolean arraysCorrectos(){  int longitud=booleano.length;  if (longitud == 1)   return true;  if (longitud == abrirpar.length && longitud == booleano.length && longitud == abrirpar.length && longitud == campo.length && longitud == tipoCampo.length && longitud == operador.length && longitud == cerrarpar.length && longitud == formatoFecha1.length && longitud == formatoFechaSel1.length && longitud == valor1.length && longitud == valor1D.length && longitud == valor1M.length && longitud == valor1A.length && longitud == valor1S.length && longitud == formatoFecha2.length && longitud == formatoFechaSel2.length && longitud == valor2.length && longitud == valor2D.length && longitud == valor2M.length && longitud == valor2A.length && longitud == valor2S.length) {    return true;  }  return false;}  }
class C{  public static long hash64(final String text){  final byte[] bytes=text.getBytes();  return hash64(bytes,bytes.length);}  }
class C{  public static Export named(String name){  return new ExportImpl(name);}  }
class C{  @Override public void matchHostsToComputeElements(URI hostId){  HostToComputeElementMatcher.matchHostsToComputeElementsByUuid(hostId,getDbClient());}  }
class C{  public void unregister(String noteId,String className,String event){synchronized (registry) {    if (noteId == null) {      noteId=GLOBAL_KEY;    }    addRepl(noteId,className);    registry.get(noteId).get(className).remove(event);  }}  }
class C{  public void onListenerConnected(){}  }
class C{  private ShapeUtils(){}  }
class C{  private boolean equals(Object o1,Object o2){  return o1 == null ? o2 == null : o1.equals(o2);}  }
class C{  @Override public boolean nullsAreSortedHigh(){  debugCodeCall("nullsAreSortedHigh");  return SysProperties.SORT_NULLS_HIGH;}  }
class C{  private void calculateDataSets(){  final boolean showSelect=showSelectCheckBox.isSelected();  for (  final Event event : repProc.replay.gameEvents.events) {    if (event.id != IGameEvents.ID_CONTROL_GROUP_UPDATE)     continue;    final DataModel<ControlGroupChartDataSet> model=modelByUserIds[event.userId];    if (model == null)     continue;    final ControlGroupUpdateEvent cgue=(ControlGroupUpdateEvent)event;    if (cgue.isAssign())     model.getDataSetList().get(0).controlGroupEventLists[cgue.getGroupIndex()].add(cgue); else     if (showSelect)     model.getDataSetList().get(1).controlGroupEventLists[cgue.getGroupIndex()].add(cgue);  }  for (  final Chart<ControlGroupChartDataSet> chart : chartList) {    for (    final DataModel<ControlGroupChartDataSet> model : chart.getDataModelList()) {      int i=0;      for (      final ControlGroupChartDataSet dataSet : model.getDataSetList()) {        int count=0;        for (        final List<ControlGroupUpdateEvent> list : dataSet.controlGroupEventLists)         count+=list.size();        dataSet.setTitle((i == 0 ? "Assign: " : "Select: ") + count);        i++;      }    }  }}  }
class C{  @RequestProcessing(value="/forget-pwd",method=HTTPRequestMethod.GET) @Before(adviceClass=StopwatchStartAdvice.class) @After(adviceClass=StopwatchEndAdvice.class) public void showForgetPwd(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  final Map<String,Object> dataModel=renderer.getDataModel();  renderer.setTemplateName("forget-pwd.ftl");  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public ObjectFactory(){}  }
class C{  public void check(){  if (!hasAnimVal) {    if (baseVal == null) {      baseVal=new BaseSVGTransformList();    }    baseVal.revalidate();    if (baseVal.missing) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MISSING,null);    }    if (baseVal.malformed) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MALFORMED,baseVal.getValueAsString());    }  }}  }
class C{  public String toClassDetailsString() throws Exception {  return m_delegate.toClassDetailsString();}  }
class C{  public void switchRowPresentation(){  stopEditor(true);  if (m_singleRow)   switchMultiRow(); else   switchSingleRow();}  }
class C{  public synchronized boolean writeMarkup(final byte[] data){  final String markupName=makeMarkupName(markupId,true);  if (Cfg.DEBUG) {    Check.asserts(markupName != "","markupName empty");  }  final AutoFile fileRet=new AutoFile(markupName);  fileRet.create();  if (data != null) {    final byte[] encData=encryption.encryptData(data);    if (Cfg.DEBUG) {      Check.asserts(encData.length >= data.length,"strange data len");    }    fileRet.write(data.length);    fileRet.append(encData);  }  return fileRet.exists();}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  if (params[0] == null) {    float volume=ClientSingletonRepository.getSound().getVolume();    UserInterface ui=ClientSingletonRepository.getUserInterface();    ui.addEventLine(new StandardEventLine("Please use /volume <name> <value> to adjust the volume."));    ui.addEventLine(new HeaderLessEventLine("<name> is an item from the following list. \"master\" refers to the global volume setting.",NotificationType.CLIENT));    ui.addEventLine(new HeaderLessEventLine("<value> is in the range from 0 to 100 but may be set higher.",NotificationType.CLIENT));    ui.addEventLine(new HeaderLessEventLine("master -> " + Numeric.floatToInt(volume,100.0f),NotificationType.CLIENT));    for (    String name : ClientSingletonRepository.getSound().getGroupNames()) {      volume=ClientSingletonRepository.getSound().getGroup(name).getVolume();      ui.addEventLine(new HeaderLessEventLine(name + " -> " + Numeric.floatToInt(volume,100.0f),NotificationType.CLIENT));    }  } else   if (params[1] != null) {    changeVolume(params[0],params[1]);  } else {    ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine("Please use /volume for help.",NotificationType.ERROR));  }  return true;}  }
class C{  public StackAllocator(Address baseAddress,Extent spaceSize,Extent stackSize){  this.baseAddress=baseAddress;  this.topAddress=baseAddress.plus(spaceSize);  this.stackSize=(int)(stackSize.toLong() / BYTES_IN_PAGE);  long spacePages=spaceSize.toLong() / BYTES_IN_PAGE;  int nStacks=(int)((spacePages - 2) / (this.stackSize + 1));  this.allocated=new boolean[nStacks];}  }
class C{  public void startFtpFixedUpload(final String hostname,final String uri,final int fileSizeOctet,final int maxDuration,final int reportInterval){  initReportTask(reportInterval,false);  mTask.setReportInterval(true);  startFtpFixedUpload(hostname,uri,fileSizeOctet,maxDuration);}  }
class C{  @SuppressWarnings("unused") public StreamingCombineGloballyAsSingletonView(DataflowRunner runner,Combine.GloballyAsSingletonView<InputT,OutputT> transform){  this.transform=transform;}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public static List<VOLocalizedText> trim(final List<VOLocalizedText> values){  return trim(values,FacesContext.getCurrentInstance().getApplication().getSupportedLocales());}  }
class C{  public void close() throws IOException {  client.close();  isConnectionOpen=false;}  }
class C{  void advance(double deltaTime){  for (  Spring spring : mActiveSprings) {    if (spring.systemShouldAdvance()) {      spring.advance(deltaTime / 1000.0);    } else {      mActiveSprings.remove(spring);    }  }}  }
class C{  public List<Game> mapToGameList(List<Result> giantBombGameList){  List<Game> gameList=new ArrayList<>();  for (  Result giantBombGameResult : giantBombGameList) {    if (isADisplayableGame(giantBombGameResult)) {      gameList.add(mapToGame(giantBombGameResult));    }  }  return gameList;}  }
class C{  public boolean contains(Object o){  if (!(o instanceof Map.Entry))   return false;  Map.Entry<?,?> e=(Map.Entry<?,?>)o;  return s.contains((e instanceof CheckedEntry) ? e : checkedEntry(e,valueType));}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    int n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (int i=0; i < n; ++i) {      TryCatchBlockNode tcb=tryCatchBlocks.get(i);      if (tcb.visibleTypeAnnotations != null && tcb.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (tcb.invisibleTypeAnnotations != null && tcb.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }    }    for (int i=0; i < instructions.size(); ++i) {      AbstractInsnNode insn=instructions.get(i);      if (insn.visibleTypeAnnotations != null && insn.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn.invisibleTypeAnnotations != null && insn.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn instanceof MethodInsnNode) {        boolean itf=((MethodInsnNode)insn).itf;        if (itf != (insn.opcode == Opcodes.INVOKEINTERFACE)) {          throw new RuntimeException();        }      }    }    if (visibleLocalVariableAnnotations != null && visibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleLocalVariableAnnotations != null && invisibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  DiscardedTags(){  Log.d("DiscardedTags","Parsing configuration file");  AssetManager assetManager=Application.getCurrentApplication().getAssets();  try {    InputStream is=assetManager.open("discarded.json");    JsonReader reader=new JsonReader(new InputStreamReader(is,"UTF-8"));    try {      try {        reader.beginArray();        while (reader.hasNext()) {          redundantTags.add(reader.nextString());        }        reader.endArray();        Log.d("DiscardedTags","Found " + redundantTags.size() + " tags.");      } catch (      IOException e) {        e.printStackTrace();      }    }  finally {      reader.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private byte readByteProtected(DataInputStream istream) throws java.io.IOException {  byte[] rcvBuffer=new byte[1];  while (true) {    int nchars;    nchars=istream.read(rcvBuffer,0,1);    if (nchars > 0) {      return rcvBuffer[0];    }  }}  }
class C{  public static TrialSuite testSlidingLadder(IntersectionDetection id){  TrialSuite suite=new TrialSuite();  int NUM_TRIALS=100;  for (int c=2; c <= 512; c*=2) {    ILineSegment[] segments=new ILineSegment[c];    int idx=0;    for (int i=segments.length - 1; i >= 0; i--) {      segments[idx++]=new TwoDLineSegment(0,segments.length - i,i,0);    }    for (int k=0; k < NUM_TRIALS; k++) {      System.gc();      long now=System.currentTimeMillis();      Hashtable<IPoint,List<ILineSegment>> res=id.intersections(segments);      long end=System.currentTimeMillis();      int n=segments.length;      if (res.size() != n * (n - 1) / 2) {        System.err.println("Unexpected size returned:" + res.size() + " for "+ c);        System.exit(2);      }      suite.addTrial(c,now,end);    }  }  return suite;}  }
class C{  public final void add(Instance instance){  Instance newInstance=(Instance)instance.copy();  newInstance.setDataset(this);  m_Instances.addElement(newInstance);}  }
class C{  public boolean match(Object matchObj){  if (!(matchObj instanceof StatusLine))   return false;  StatusLine sl=(StatusLine)matchObj;  if (sl.matchExpression != null)   return sl.matchExpression.match(this.encode());  if (sl.sipVersion != null && !sl.sipVersion.equals(sipVersion))   return false;  if (sl.statusCode != 0) {    if (matchStatusClass) {      int hiscode=sl.statusCode;      String codeString=Integer.toString(sl.statusCode);      String mycode=Integer.toString(statusCode);      if (codeString.charAt(0) != mycode.charAt(0))       return false;    } else {      if (statusCode != sl.statusCode)       return false;    }  }  if (sl.reasonPhrase == null || reasonPhrase == sl.reasonPhrase)   return true;  return reasonPhrase.equals(sl.reasonPhrase);}  }
class C{  private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){  try {    Class classTmp=getClassForName(className);    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);    declaredConstructor.setAccessible(true);    return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectArray));  } catch (  Exception e) {    Log.d(WearBusTools.BUSWEAR_TAG,"syncEvent error: " + e.getMessage());  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.598 -0500",hash_original_method="00099B5ABB2589DBB04B6BC1AD6C4CF5",hash_generated_method="75BA9D77046CF6409D4CBE0F95B882A5") public AuthScope(final String host,int port){  this(host,port,ANY_REALM,ANY_SCHEME);}  }
class C{  public ID3Node(CategoricalResults cr){  this.children=null;  this.cr=cr;}  }
class C{  public Aggregator[] createSubAggregators(Aggregator parent) throws IOException {  Aggregator[] aggregators=new Aggregator[count()];  for (int i=0; i < factories.length; ++i) {    final boolean collectsFromSingleBucket=false;    aggregators[i]=factories[i].create(parent.context(),parent,collectsFromSingleBucket);  }  return aggregators;}  }
class C{  public void testFullRuntime() throws Exception {  TungstenProperties conf=new TungstenProperties();  conf.setString(ReplicatorConf.SERVICE_NAME,"test");  conf.setString(ReplicatorConf.ROLE,ReplicatorConf.ROLE_MASTER);  conf.setString(ReplicatorConf.PIPELINES,"master");  conf.setString(ReplicatorConf.PIPELINE_ROOT + ".master","extract");  conf.setString(ReplicatorConf.STAGE_ROOT + ".extract",SingleThreadStageTask.class.toString());  conf.setString(ReplicatorConf.STAGE_ROOT + ".extract.extractor","dummy");  conf.setString(ReplicatorConf.STAGE_ROOT + ".extract.filters","filter1,filter2");  conf.setString(ReplicatorConf.STAGE_ROOT + ".extract.applier","dummy");  conf.setString(ReplicatorConf.FILTER_ROOT + ".filter1",DummyFilter.class.getName());  conf.setString(ReplicatorConf.FILTER_ROOT + ".filter2",DummyFilter.class.getName());  conf.setString(ReplicatorConf.APPLIER_ROOT + ".dummy",DummyApplier.class.getName());  conf.setString(ReplicatorConf.EXTRACTOR_ROOT + ".dummy",DummyExtractor.class.getName());  ReplicatorRuntime runtime=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline p=runtime.getPipeline();  Assert.assertNotNull("Stageine not null",p);  List<Stage> stages=p.getStages();  Assert.assertEquals("Expect one stage",1,stages.size());  Stage stage=stages.get(0);  Assert.assertNotNull("Extractor not null",stage.getExtractor0());  Assert.assertNotNull("Pre-filters not null",stage.getFilters0());  Assert.assertEquals("2 filters set",2,stage.getFilters0().size());  Assert.assertNotNull("Applier not null",stage.getApplier0());  runtime.release();}  }
class C{  public List<NamedRelatedResourceRep> listByVirtualArray(URI virtualArrayId){  return getList(PathConstants.AUTO_TIER_BY_VARRAY_URL,virtualArrayId);}  }
class C{  public int loadInstruction32(int addr){  return (loadInstruction8(addr + 3) << 24) | (loadInstruction8(addr + 2) << 16) | (loadInstruction8(addr + 1) << 8)| loadInstruction8(addr);}  }
class C{  public static String loadStateLessPatterns(String dirName,String fileName,ConfigData configData){  String filePath=dirName + fileName;  _stateLessFileName=fileName;  _stateLessFilePath=filePath;  _stateLessLastModified=0;  _stateLessPatterns=DEFAULT_STATE_LESS_PATTERNS;  PatternsInfo patternsInfo=loadPatterns(filePath,"state-less");  if (patternsInfo.patterns != null) {    _stateLessPatterns=patternsInfo.patterns;    _stateLessVersion=patternsInfo.version;    _stateLessLastModified=new File(filePath).lastModified();  }  configData.setStateLessPatterns(_stateLessPatterns);  return patternsInfo.html.toString();}  }
class C{  public int indexOf(String str,int startIndex){  startIndex=(startIndex < 0 ? 0 : startIndex);  if (str == null || startIndex >= size) {    return -1;  }  int strLen=str.length();  if (strLen == 1) {    return indexOf(str.charAt(0),startIndex);  }  if (strLen == 0) {    return startIndex;  }  if (strLen > size) {    return -1;  }  char[] thisBuf=buffer;  int len=size - strLen + 1;  outer:   for (int i=startIndex; i < len; i++) {    for (int j=0; j < strLen; j++) {      if (str.charAt(j) != thisBuf[i + j]) {        continue outer;      }    }    return i;  }  return -1;}  }
class C{  Node<T,E> findBestMatchingNode(List<Token<E>> tokens,int tokenIdx){  List<Node<T,E>> matches=findAllMatchingNodes(tokens,tokenIdx);  Node<T,E> resultNode=null;  int score=0;  for (  Node<T,E> node : matches) {    if (node.getDistanceFromRoot() > score) {      score=node.getDistanceFromRoot();      resultNode=node;    }  }  return resultNode;}  }
class C{  public static void run(AdSenseHost service,String adClientId,long maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all custom channels for ad client %s\n",adClientId);  System.out.println("=================================================================");  String pageToken=null;  CustomChannels customChannels=null;  do {    customChannels=service.customchannels().list(adClientId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if ((customChannels.getItems() != null) && !customChannels.getItems().isEmpty()) {      for (      CustomChannel channel : customChannels.getItems()) {        System.out.printf("Custom channel with ID \"%s\", code \"%s\" and name \"%s\" found.\n",channel.getId(),channel.getCode(),channel.getName());      }    } else {      System.out.println("No custom channels found.");    }    pageToken=customChannels.getNextPageToken();  } while (pageToken != null);  System.out.println();}  }
class C{  public RandomGraphEditor(boolean cyclicAllowed,Parameters parameters){  this(new EdgeListGraph(),cyclicAllowed,parameters);}  }
class C{  public <T extends Layout>Class<Array2D<T>> genArray2DImpl(final Class<T> elementInterfaceClass){  try {    @SuppressWarnings("unused") Class<Array1D<T>> array1Dcls=genArray1DImpl(elementInterfaceClass);    @SuppressWarnings("unchecked") Class<Array2D<T>> implCls=(Class<Array2D<T>>)implClassloader.load2DClass(elementInterfaceClass);    unsafe.ensureClassInitialized(implCls);    Field f=implCls.getDeclaredField("unsafe");    unsafe.putObject(unsafe.staticFieldBase(f),unsafe.staticFieldOffset(f),unsafe);    return implCls;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public static void assertNoMoreVCards(StreamReader reader){  try {    assertNull(reader.readNext());  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public Vector3f mult(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  return mult(vec,null);}  }
class C{  public void onDrawerClosed(View drawerView){  super.onDrawerClosed(drawerView);  leftlayout.removeAllViews();  leftlayout.invalidate();}  }
class C{  public DailyView(Context context){  super(context);  this.initialize();}  }
class C{  public static Set<String> checkInheritanceDependencies(List<String> targetSwcs,Set<String> sourceSwcs,CompilerSwcContext swcContext){  if (sourceSwcs.isEmpty()) {    return Collections.emptySet();  }  Set<String> inheritanceDependencies=new HashSet<String>(64 * sourceSwcs.size());  Set<String> inheritanceDependencyType=new HashSet<String>();  inheritanceDependencyType.add(SwcDependencySet.INHERITANCE);  for (  String sourceSwc : sourceSwcs) {    Swc swc=swcContext.getSwc(sourceSwc);    inheritanceDependencies.addAll(getSwcDependencies(swc,inheritanceDependencyType));  }  if (inheritanceDependencies.isEmpty())   return Collections.emptySet();  Set<String> foundSwcs=new HashSet<String>();  for (ListIterator<String> iter=targetSwcs.listIterator(targetSwcs.size()); iter.hasPrevious(); ) {    String targetSwc=iter.previous();    Set<String> scriptNameSet=getSwcScripts(swcContext.getSwc(targetSwc));    for (    String dependency : inheritanceDependencies) {      if (scriptNameSet.contains(dependency)) {        foundSwcs.add(targetSwc);        if (iter.hasPrevious()) {          inheritanceDependencies.addAll(getSwcDependencies(swcContext.getSwc(targetSwc),inheritanceDependencyType));        }        break;      }    }  }  return foundSwcs;}  }
class C{  @Override public void autoSetInternal(){  int mainGunIS=hasMainGun() ? (getWeight() > 9 ? 2 : 1) : IArmorState.ARMOR_NA;switch ((int)weight) {case 2:    setInternal(1,2,isQuad() ? IArmorState.ARMOR_NA : 1,isQuad() ? 4 : 2,mainGunIS);  break;case 3:setInternal(1,3,isQuad() ? IArmorState.ARMOR_NA : 1,isQuad() ? 4 : 2,mainGunIS);break;case 4:setInternal(1,4,isQuad() ? IArmorState.ARMOR_NA : 1,isQuad() ? 5 : 3,mainGunIS);break;case 5:setInternal(1,5,isQuad() ? IArmorState.ARMOR_NA : 1,isQuad() ? 5 : 3,mainGunIS);break;case 6:setInternal(2,6,isQuad() ? IArmorState.ARMOR_NA : 2,isQuad() ? 8 : 4,mainGunIS);break;case 7:setInternal(2,7,isQuad() ? IArmorState.ARMOR_NA : 2,isQuad() ? 8 : 4,mainGunIS);break;case 8:setInternal(2,8,isQuad() ? IArmorState.ARMOR_NA : 2,isQuad() ? 9 : 5,mainGunIS);break;case 9:setInternal(2,9,isQuad() ? IArmorState.ARMOR_NA : 2,isQuad() ? 9 : 5,mainGunIS);break;case 10:setInternal(3,10,isQuad() ? IArmorState.ARMOR_NA : 3,isQuad() ? 12 : 6,mainGunIS);break;case 11:setInternal(3,11,isQuad() ? IArmorState.ARMOR_NA : 3,isQuad() ? 12 : 6,mainGunIS);break;case 12:setInternal(3,12,isQuad() ? IArmorState.ARMOR_NA : 3,isQuad() ? 13 : 7,mainGunIS);break;case 13:setInternal(3,13,isQuad() ? IArmorState.ARMOR_NA : 3,isQuad() ? 13 : 6,mainGunIS);break;case 14:setInternal(4,14,isQuad() ? IArmorState.ARMOR_NA : 4,isQuad() ? 16 : 8,mainGunIS);break;case 15:setInternal(4,15,isQuad() ? IArmorState.ARMOR_NA : 4,isQuad() ? 16 : 8,mainGunIS);break;}}  }
class C{  public ConcurrentOffHeapClockCache(Factory<? extends AbstractOffHeapClockCache<K,V>> segmentFactory,int concurrency){  super(segmentFactory,concurrency);}  }
class C{  private void addLimitedMitreJoin(LineSegment offset0,LineSegment offset1,double distance,double mitreLimit){  Coordinate basePt=seg0.p1;  double ang0=Angle.angle(basePt,seg0.p0);  double ang1=Angle.angle(basePt,seg1.p1);  double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1);  double angDiffHalf=angDiff / 2;  double midAng=Angle.normalize(ang0 + angDiffHalf);  double mitreMidAng=Angle.normalize(midAng + Math.PI);  double mitreDist=mitreLimit * distance;  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));  double bevelHalfLen=distance - bevelDelta;  double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng);  double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng);  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);  LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt);  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);  if (side == Position.LEFT) {    segList.addPt(bevelEndLeft);    segList.addPt(bevelEndRight);  } else {    segList.addPt(bevelEndRight);    segList.addPt(bevelEndLeft);  }}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(0xB1);  buffer.setAtIndexAndInc(trigger);  super.loadByteArray(buffer);}  }
class C{  public IfItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void excludeFrom(int start){  Assert.check(currentState != BitsState.UNKNOWN);  Bits temp=new Bits();  temp.sizeTo(bits.length);  temp.inclRange(0,start);  internalAndSet(temp);  currentState=BitsState.NORMAL;}  }
class C{  public InvitationProjectsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private boolean isCommentAdjacentToLine(int line){  int commentLine=getLastLineOfCurrentComment();  return commentLine == line || (commentLine == line - 1 && commentLine != getFirstLineOfNextComment());}  }
class C{  public TypeInstance loadTypeInstance(final Integer typeInstanceId) throws CouldntLoadDataException {  Preconditions.checkNotNull(typeInstanceId,"Error: typeInstanceId argument can not be null");  final RawTypeInstance rawTypeInstance=provider.loadTypeInstance(module,typeInstanceId);  final BaseType baseType=typeManager.getBaseType(rawTypeInstance.getTypeId());  final Section section=sectionContainer.getSection(rawTypeInstance.getSectionId());  final TypeInstance typeInstance=new TypeInstance(rawTypeInstance.getId(),rawTypeInstance.getName(),baseType,section,rawTypeInstance.getSectionOffset(),module);  instancesById.put(typeInstance.getId(),typeInstance);  if (rawTypeInstance.getCommentId() != null) {    final CommentManager manager=CommentManager.get(provider);    final List<IComment> comments=provider.loadCommentById(rawTypeInstance.getCommentId());    manager.initializeTypeInstanceComment(typeInstance,comments);  }  return typeInstance;}  }
class C{  public synchronized StringBuffer append(char[] chars){  append0(chars);  return this;}  }
class C{  @Override public void run(){  try {    doRun();  }  finally {  }}  }
class C{  public static InArrowImpliesNonancestor serializableInstance(){  return new InArrowImpliesNonancestor();}  }
class C{  public static Object loadFromFile(String filename){  Object result;  try {    result=SerializationHelper.read(filename);  } catch (  Exception e) {    result=null;  }  return result;}  }
class C{  private void updateGatewayReceiver(ObjectName mbeanName) throws IOException {  try {    String memberName=mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);    if (cluster.getMembersHMap().containsKey(memberName)) {      Cluster.Member existingMember=cluster.getMembersHMap().get(memberName);      Cluster.GatewayReceiver gatewayReceiver=initGatewayReceiver(mbeanName);      existingMember.setGatewayReceiver(gatewayReceiver);    } else {      Cluster.Member member=new Cluster.Member();      member.setName(memberName);      member.setId(memberName);      Cluster.GatewayReceiver gatewayReceiver=initGatewayReceiver(mbeanName);      member.setGatewayReceiver(gatewayReceiver);      cluster.getMembersHMap().put(memberName,member);    }  } catch (  InstanceNotFoundException infe) {    LOGGER.warning(infe);  }catch (  ReflectionException re) {    LOGGER.warning(re);  }catch (  MBeanException me) {    LOGGER.warning(me);  }catch (  AttributeNotFoundException anfe) {    LOGGER.warning(anfe);  }catch (  IntrospectionException ire) {    LOGGER.warning(ire);  }}  }
class C{  public List<FlashcardEntity> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<FlashcardEntity> list=new ArrayList<FlashcardEntity>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  int findUnusualMap(int mapid){  int i;  for (i=JSR_INDEX_MASK; i < jsrInfo.numberUnusualMaps; i++) {    if (jsrInfo.unusualMaps[i].getNormalMapIndex() == mapid) {      break;    }  }  if (i >= jsrInfo.numberUnusualMaps) {    VM.sysFail(" can't find jsr map - PANIC !!!!");  }  return i;}  }
class C{  protected ApplicationUser buildUser(Map<String,String> headerMap,boolean includeRoles){  LOGGER.debug("Creating Application User From Headers");  Map<String,String> headerNames=getHeaderNames();  ApplicationUser applicationUser=createNewApplicationUser();  buildUserId(applicationUser,headerMap,headerNames.get(HTTP_HEADER_USER_ID));  buildFirstName(applicationUser,headerMap,headerNames.get(HTTP_HEADER_FIRST_NAME));  buildLastName(applicationUser,headerMap,headerNames.get(HTTP_HEADER_LAST_NAME));  buildEmail(applicationUser,headerMap,headerNames.get(HTTP_HEADER_EMAIL));  buildSessionId(applicationUser,headerMap,HTTP_HEADER_SESSION_ID);  buildSessionInitTime(applicationUser,headerMap,headerNames.get(HTTP_HEADER_SESSION_INIT_TIME));  userNamespaceAuthorizationHelper.buildNamespaceAuthorizations(applicationUser);  if (includeRoles) {    buildRoles(applicationUser,headerMap,headerNames.get(HTTP_HEADER_ROLES));  }  LOGGER.debug("Application user created successfully: " + applicationUser);  return applicationUser;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(", name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public RepeatedFieldBuilder(List<MType> messages,boolean isMessagesListMutable,GeneratedMessage.BuilderParent parent,boolean isClean){  this.messages=messages;  this.isMessagesListMutable=isMessagesListMutable;  this.parent=parent;  this.isClean=isClean;}  }
class C{  @Override public void close() throws IOException {  scanner.close();  reader.close();  fsdis.close();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.EXPRESSION_STATEMENT__EXPRESSION:    return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Builder(RenderScript rs){  mRS=rs;  mCount=0;  mElements=new Element[8];  mElementNames=new String[8];  mArraySizes=new int[8];}  }
class C{  public void clear(){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.clear();      mObjects.clear();    }  } else {    mObjects.clear();  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public Item(CharSequence text){  mText=text;  mHtmlText=null;  mIntent=null;  mUri=null;}  }
class C{  Point adjustPopupLocationToFitScreen(int xPosition,int yPosition){  Point popupLocation=new Point(xPosition,yPosition);  if (popupPostionFixDisabled == true || GraphicsEnvironment.isHeadless()) {    return popupLocation;  }  Rectangle scrBounds;  GraphicsConfiguration gc=getCurrentGraphicsConfiguration(popupLocation);  Toolkit toolkit=Toolkit.getDefaultToolkit();  if (gc != null) {    scrBounds=gc.getBounds();  } else {    scrBounds=new Rectangle(toolkit.getScreenSize());  }  Dimension popupSize=JPopupMenu.this.getPreferredSize();  long popupRightX=(long)popupLocation.x + (long)popupSize.width;  long popupBottomY=(long)popupLocation.y + (long)popupSize.height;  int scrWidth=scrBounds.width;  int scrHeight=scrBounds.height;  if (!canPopupOverlapTaskBar()) {    Insets scrInsets=toolkit.getScreenInsets(gc);    scrBounds.x+=scrInsets.left;    scrBounds.y+=scrInsets.top;    scrWidth-=scrInsets.left + scrInsets.right;    scrHeight-=scrInsets.top + scrInsets.bottom;  }  int scrRightX=scrBounds.x + scrWidth;  int scrBottomY=scrBounds.y + scrHeight;  if (popupRightX > (long)scrRightX) {    popupLocation.x=scrRightX - popupSize.width;  }  if (popupBottomY > (long)scrBottomY) {    popupLocation.y=scrBottomY - popupSize.height;  }  if (popupLocation.x < scrBounds.x) {    popupLocation.x=scrBounds.x;  }  if (popupLocation.y < scrBounds.y) {    popupLocation.y=scrBounds.y;  }  return popupLocation;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_EXPR_1__INDEX_1:    return INDEX_1_EDEFAULT == null ? index_1 != null : !INDEX_1_EDEFAULT.equals(index_1);}return super.eIsSet(featureID);}  }
class C{  protected boolean possiblyUpdateLongLine(Element line,int lineNumber){  float w=getLineWidth(lineNumber);  if (w > longLineWidth) {    longLineWidth=w;    longLine=line;    return true;  }  return false;}  }
class C{  private Recommendation findRecommendation(final String id){  return ofy().load().type(Recommendation.class).id(id).now();}  }
class C{  public GraphProjectionBuilder(GraphProjectionFactory<G2,V2,E2,G,V,E> factory){  super(null);  this.factory=factory;}  }
class C{  public static EPType collectionOfEvents(EventType eventTypeOfCollectionEvents){  if (eventTypeOfCollectionEvents == null) {    throw new IllegalArgumentException("Invalid null event type");  }  return new EventMultiValuedEPType(Collection.class,eventTypeOfCollectionEvents);}  }
class C{  public BERoundBorder(){  this(defaultLineColor,1);}  }
class C{  public static boolean overlaps(Region left,Region right){  if (left == null || right == null)   return false;  int rightEnd=right.getOffset() + right.getLength();  int leftEnd=left.getOffset() + left.getLength();  if (right.getLength() > 0) {    if (left.getLength() > 0)     return left.getOffset() < rightEnd && right.getOffset() < leftEnd;    return right.getOffset() <= left.getOffset() && left.getOffset() < rightEnd;  }  if (left.getLength() > 0)   return left.getOffset() <= right.getOffset() && right.getOffset() < leftEnd;  return left.getOffset() == right.getOffset();}  }
class C{  protected JSONNode(String name,NodeType type){  this(name,null,type);}  }
class C{  public OptionSet addUriQuery(String argument){  if (argument == null)   throw new NullPointerException("Uri-Query option must not be null");  if (argument.getBytes(CoAP.UTF8_CHARSET).length > 255)   throw new IllegalArgumentException("Uri-Query option must be smaller or euqal to 255 bytes (UTF-8 encoded): " + argument);  getUriQuery().add(argument);  return this;}  }
class C{  public boolean ready() throws IOException {  if (text == null)   throw new IOException("TextReader is Closed");  return true;}  }
class C{  public byte[] wrap(byte[] outgoing,int offset,int len) throws SaslException {  throw new IllegalStateException("wrap: QOP has neither integrity nor privacy>");}  }
class C{  public boolean isStarted(){  return has(STARTED);}  }
class C{  public static GenericObjectEditorDialog createDialog(Container parent){  return createDialog(parent,null);}  }
class C{  public static List<? extends Element> childElementList(DocumentFragment fragment){  if (fragment == null)   return null;  List<Element> elements=new LinkedList<Element>();  Node node=fragment.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE) {        Element childElement=(Element)node;        elements.add(childElement);      }    } while ((node=node.getNextSibling()) != null);  }  return elements;}  }
class C{  public Split findSplit(double lat,double lon,double radiusMeters,StreetMode streetMode){  Split split=null;  if (radiusMeters > 300) {    split=Split.find(lat,lon,150,this,streetMode);  }  if (split == null) {    split=Split.find(lat,lon,radiusMeters,this,streetMode);  }  return split;}  }
class C{  void classifyWords(final ErrorDrain errors){  final WordList wl=WordList.getInstance();  for (  final Expression w : expressions) {    final String original=w.getOriginal();    if (context.isForMatching()) {      if (ExpressionType.isTypeString(original)) {        w.setType(new ExpressionType(original));        w.setNormalized(Expression.JOKER);      }    }    boolean wordFound=w.getType() != null;    boolean entryMissing=false;    if (!wordFound) {      WordEntry entry=wl.find(original);      if (entry == null) {        entryMissing=true;      } else       if (entry.getType() != null) {        ExpressionType type=entry.getType();        w.setType(type);        wordFound=true;        if (type.isNumeral()) {          w.setAmount(entry.getValue());          w.setNormalized(Integer.toString(w.getAmount()));        } else         if (type.isPlural()) {          if (entry.getPlurSing() != null) {            w.setNormalized(entry.getPlurSing());          } else {            w.setNormalized(original);          }        } else {          w.setNormalized(entry.getNormalized());        }      }    }    if (!wordFound) {      if (original.matches("^[+-]?[0-9.,]+")) {        w.parseAmount(original,errors);        final int amount=w.getAmount();        if (amount < 0) {          errors.setError("negative amount: " + amount);        }        wordFound=w.getType() != null;      }    }    if (!wordFound) {      final WordList.Verb verb=wl.normalizeVerb(original);      if (verb != null) {        if (verb.isGerund) {          w.setType(new ExpressionType(verb.entry.getTypeString() + ExpressionType.SUFFIX_GERUND));          wordFound=true;        } else         if ((verb.entry.getType() != null) && verb.entry.getType().isVerb()) {          w.setType(verb.entry.getType());          wordFound=true;        } else         if (!verb.isPast) {          w.setType(new ExpressionType(ExpressionType.VERB));          wordFound=true;        }        if (wordFound) {          w.setNormalized(verb.entry.getNormalized());        }      }    }    if (!wordFound) {      final WordEntry adjective=wl.normalizeAdjective(original);      if (adjective != null) {        w.setType(new ExpressionType(ExpressionType.ADJECTIVE));        w.setNormalized(adjective.getNormalized());        wordFound=true;      }    }    if (!wordFound) {      w.setType(new ExpressionType(""));      w.setNormalized(original.toLowerCase());      if (entryMissing) {        wl.addNewWord(original);      }    }    assert w.getType() != null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.039 -0500",hash_original_method="64C4C862491F960E8DEBBD66833128C1",hash_generated_method="0AEFB87EE015AAA01F35FE44F6807EAF") public void registerNotifHandler(TelnetNotificationHandler notifhand){  __notifhand=notifhand;}  }
class C{  static void showActiveTextEditorAgain(){  if (sInstance != null) {    sInstance.showTextEditorAgain();  }}  }
class C{  public OutlierResult run(Relation<?> relation){  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    scores.putDouble(iditer,1.0);  }  DoubleRelation scoreres=new MaterializedDoubleRelation("Trivial all-outlier score","all-outlier",scores,relation.getDBIDs());  OutlierScoreMeta meta=new ProbabilisticOutlierScore();  return new OutlierResult(meta,scoreres);}  }
class C{  protected InputAnchor(){  super(null);  this.connection=Optional.empty();  this.errorState=new SimpleBooleanProperty(false);  this.errorState.addListener(null);}  }
class C{  public static void downloadUrlToStorageInBackground(String url,String fileName,ActionListener onCompletion){  downloadUrlTo(url,fileName,false,true,true,onCompletion);}  }
class C{  public static void register(){}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  @Override public void createPaths(final int[] pX,final int[] pY,final boolean[] onCurve,final boolean[] endOfContour,final int endIndex){  if (endOfContour == null) {    return;  }  final int ptCount=endOfContour.length;  int start=0, firstPt=-1;  for (int ii=0; ii < ptCount; ii++) {    if (endOfContour[ii]) {      if (firstPt != -1 && (!onCurve[start] || !onCurve[ii])) {        final int diff=firstPt - start;        int newPos;        final int pXlength=pX.length;        final int[] old_pX=new int[pXlength];        System.arraycopy(pX,0,old_pX,0,pXlength);        final int[] old_pY=new int[pXlength];        System.arraycopy(pY,0,old_pY,0,pXlength);        final boolean[] old_onCurve=new boolean[pXlength];        System.arraycopy(onCurve,0,old_onCurve,0,pXlength);        for (int oldPos=start; oldPos < ii + 1; oldPos++) {          newPos=oldPos + diff;          if (newPos > ii) {            newPos-=(ii - start + 1);          }          pX[oldPos]=old_pX[newPos];          pY[oldPos]=old_pY[newPos];          onCurve[oldPos]=old_onCurve[newPos];        }      }      start=ii + 1;      firstPt=-1;    } else     if (onCurve[ii] && firstPt == -1) {      firstPt=ii;    }  }  boolean isFirstDraw=true;  final GeneralPath current_path=new GeneralPath(GeneralPath.WIND_NON_ZERO);  final int c=pX.length;  int fc=-1;  for (int jj=0; jj < c; jj++) {    if (endOfContour[jj]) {      fc=jj + 1;      jj=c;    }  }  int x1, y1, x2=0, y2=0, x3=0, y3=0;  x1=pX[0];  y1=pY[0];  if (debug) {    System.out.println(pX[0] + " " + pY[0]+ " move to x1,y1="+ x1+ ' '+ y1);  }  current_path.moveTo(x1,y1);  if (debug) {    System.out.println("first contour=" + fc + "===================================="+ pX[0]+ ' '+ pY[0]);  }  int xs=0, ys=0, lc=0;  boolean isEnd=false;  for (int j=0; j < endIndex; j++) {    final int p=j % fc;    int p1=(j + 1) % fc;    int p2=(j + 2) % fc;    int pm1=(j - 1) % fc;    if (j == 0) {      pm1=fc - 1;    }    if (p1 < lc) {      p1+=lc;    }    if (p2 < lc) {      p2+=lc;    }    if (debug) {      System.out.println("points=" + lc + '/'+ fc+ ' '+ pm1+ ' '+ p+ ' '+ p1+ ' '+ p2+ " j="+ j+ " endOfContour[j]="+ endOfContour[j]);    }    if (endOfContour[j]) {      isEnd=true;      if (onCurve[fc]) {        xs=pX[fc];        ys=pY[fc];      } else {        xs=pX[j + 1];        ys=pY[j + 1];      }      lc=fc;      for (int jj=j + 1; jj < c; jj++) {        if (endOfContour[jj]) {          fc=jj + 1;          jj=c;        }      }      if (debug) {        System.out.println("End of contour. next=" + j + ' '+ fc+ ' '+ lc);      }    }    if (debug) {      if (j > 0) {        System.out.println("curves=" + onCurve[p] + ' '+ onCurve[p1]+ ' '+ onCurve[p2]+ " EndOfContour j-1="+ endOfContour[j - 1]+ " j="+ endOfContour[j]+ " j+1="+ endOfContour[j + 1]);      } else {        System.out.println("curves=" + onCurve[p] + ' '+ onCurve[p1]+ ' '+ onCurve[p2]+ " EndOfContour j="+ endOfContour[j]+ " j+1="+ endOfContour[j + 1]);      }    }    if (lc == fc && onCurve[p]) {      j=c;      if (debug) {        System.out.println("last 2 match");      }    } else {      if (debug) {        System.out.println(fc + " " + pm1+ ' '+ p+ ' '+ p1+ ' '+ p2);      }      if (onCurve[p] && onCurve[p1]) {        x3=pX[p1];        y3=pY[p1];        current_path.lineTo(x3,y3);        if (debug) {          System.out.println(p + " pt,pt " + x3+ ' '+ y3+ " (lineTo)");        }        isFirstDraw=false;      } else       if (j < (c - 3) && ((fc - lc) > 1 || fc == lc)) {        boolean checkEnd=false;        if (onCurve[p] && !onCurve[p1] && onCurve[p2]) {          x1=pX[p];          y1=pY[p];          x2=pX[p1];          y2=pY[p1];          x3=pX[p2];          y3=pY[p2];          j++;          checkEnd=true;          if (debug) {            System.out.println(p + " pt,cv,pt " + x1+ ' '+ y1+ ' '+ x2+ ' '+ y2+ ' '+ x3+ ' '+ y3);          }        } else         if (onCurve[p] && !onCurve[p1] && !onCurve[p2]) {          x1=pX[p];          y1=pY[p];          x2=pX[p1];          y2=pY[p1];          x3=midPt(pX[p1],pX[p2]);          y3=midPt(pY[p1],pY[p2]);          j++;          checkEnd=true;          if (debug) {            System.out.println(p + " pt,cv,cv " + x1+ ' '+ y1+ ' '+ x2+ ' '+ y2+ ' '+ x3+ ' '+ y3);          }        } else         if (!onCurve[p] && !onCurve[p1] && (!endOfContour[p2] || fc - p2 == 1)) {          x1=midPt(pX[pm1],pX[p]);          y1=midPt(pY[pm1],pY[p]);          x2=pX[p];          y2=pY[p];          x3=midPt(pX[p],pX[p1]);          y3=midPt(pY[p],pY[p1]);          if (debug) {            System.out.println(p + " cv,cv1 " + x1+ ' '+ y1+ ' '+ x2+ ' '+ y2+ ' '+ x3+ ' '+ y3);          }        } else         if (!onCurve[p] && onCurve[p1]) {          x1=midPt(pX[pm1],pX[p]);          y1=midPt(pY[pm1],pY[p]);          x2=pX[p];          y2=pY[p];          x3=pX[p1];          y3=pY[p1];          if (debug) {            System.out.println(p + " cv,pt " + x1+ ' '+ y1+ ' '+ x2+ ' '+ y2+ ' '+ x3+ ' '+ y3);          }        }        if (isFirstDraw) {          current_path.moveTo(x1,y1);          isFirstDraw=false;          if (debug) {            System.out.println("first draw move to " + x1 + ' '+ y1);          }        }        if (!(endOfContour[p] && p > 0 && endOfContour[p - 1])) {          current_path.curveTo(x1,y1,x2,y2,x3,y3);        }        if (debug) {          System.out.println("curveto " + x1 + ' '+ y1+ ' '+ x2+ ' '+ y2+ ' '+ x3+ ' '+ y3);        }        if (checkEnd && endOfContour[j]) {          isEnd=true;          xs=pX[fc];          ys=pY[fc];          lc=fc;          for (int jj=j + 1; jj < c; jj++) {            if (endOfContour[jj]) {              fc=jj + 1;              jj=c;            }          }          if (debug) {            System.out.println("Curve");          }        }      }      if (endOfContour[p]) {        current_path.closePath();      }      if (debug) {        System.out.println("x2 " + xs + ' '+ ys+ ' '+ isEnd);      }      if (isEnd) {        current_path.moveTo(xs,ys);        isEnd=false;        if (debug) {          System.out.println("Move to " + xs + ' '+ ys);        }      }      if (debug) {        try {          if (img == null) {            img=new java.awt.image.BufferedImage(800,800,java.awt.image.BufferedImage.TYPE_INT_ARGB);          }          final Graphics2D g2=img.createGraphics();          g2.setColor(java.awt.Color.green);          g2.draw(current_path);          final String key=String.valueOf(p);          org.jpedal.gui.ShowGUIMessage.showGUIMessage(key,img,key);        } catch (        final Exception e) {          LogWriter.writeLog("Exception: " + e.getMessage());        }      }    }  }  paths.addElement(current_path);  if (debug) {    System.out.println("Ends at " + x1 + ' '+ y1+ " x="+ minX+ ','+ maxX+ " y="+ minY+ ','+ maxY+ " glyph x="+ compMinX+ ','+ compMaxX+ " y="+ compMinY+ ','+ compMaxY);  }}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  public static final void outlineShape(GL2 gl,Shape s,float w,float[] color){  float lw=RenderUtilities.getLineWidth(gl);  RenderUtilities.setLineWidth(gl,w);  if (color != null)   gl.glColor4fv(color,0);  RenderUtilities.drawShape(gl,s,true);  RenderUtilities.setLineWidth(gl,lw);}  }
class C{  @Override public void run(int connId,String[] args){  if (!canRunRestrictedCommand(connId)) {    server.sendServerChat(connId,"Observers are restricted from skipping turns.");    return;  }  if (server.isTurnSkippable()) {    server.sendServerChat(server.getPlayer(connId).getName() + " has issued the skip command...");    server.skipCurrentTurn();  } else {    server.sendServerChat("/skip : skip failed.");  }}  }
class C{  public void exitApp(){  clearAllActivity();  System.exit(0);}  }
class C{  public float[] interpolate(float sample){  mBuffer[mBufferPointer]=(double)sample;  mBufferPointer++;  mBufferPointer%=mBuffer.length;  float[] samples=new float[mPhases.length];  for (int x=0; x < mPhases.length; x++) {    samples[x]=mPhases[x].filter();  }  return samples;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.600 -0400",hash_original_method="2C8858F1FEF258A79F4059C0A1CB8058",hash_generated_method="73DBD95B0639383FC78436A99232C748") @Override public String toString(){  return super.toString() + "[caseSensitivity=" + caseSensitivity+ "]";}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","njust");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void configureManagers(){  InstanceManager.setLightManager(new jmri.jmrix.powerline.cm11.SpecificLightManager(getTrafficController()));  InstanceManager.setSensorManager(new jmri.jmrix.powerline.cm11.SpecificSensorManager(getTrafficController()));  InstanceManager.setTurnoutManager(new jmri.jmrix.powerline.SerialTurnoutManager(getTrafficController()));}  }
class C{  public boolean isReadWrite(){  Object oo=get_Value(COLUMNNAME_IsReadWrite);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  public boolean isNotStarted(){  return STATE_NotStarted.equals(m_state);}  }
class C{  public XYDifferenceRenderer(Paint positivePaint,Paint negativePaint,boolean shapes){  ParamChecks.nullNotPermitted(positivePaint,"positivePaint");  ParamChecks.nullNotPermitted(negativePaint,"negativePaint");  this.positivePaint=positivePaint;  this.negativePaint=negativePaint;  this.shapesVisible=shapes;  this.legendLine=new Line2D.Double(-7.0,0.0,7.0,0.0);  this.roundXCoordinates=false;}  }
class C{  public HttpConnection(final HostConfiguration hostConfiguration){  this(hostConfiguration.getProxyHost(),hostConfiguration.getProxyPort(),hostConfiguration.getHost(),hostConfiguration.getPort(),hostConfiguration.getProtocol());  localAddress=hostConfiguration.getLocalAddress();}  }
class C{  public OneVSAll(Classifier baseClassifier,boolean concurrentTraining){  this.baseClassifier=baseClassifier;  this.concurrentTraining=concurrentTraining;}  }
class C{  public boolean contains(Object u){  return innerChain.contains(u);}  }
class C{  @Override public void teardown(){}  }
class C{  public void offset(float offset){  TimingSpecifier ts=new OffsetTimingSpecifier(owner,isBegin,offset);  timingSpecifiers.add(ts);}  }
class C{  private static void addCommaSeparator(final StringBuffer line,final List<CStyleRunData> styleRuns,final List<? extends INaviOperandTree> operands,final int operandIndex){  if (operandIndex < operands.size() - 1) {    styleRuns.add(new CStyleRunData(line.length(),2,ConfigManager.instance().getColorSettings().getOperandSeparatorColor()));    line.append(", ");  }}  }
class C{  @Override public void exitQuery(SQLGrammarParser.QueryContext ctx){  numQueriesEncountered++;  validateAllQueriesParsed(numQueriesEncountered,numQueriesParsed);}  }
class C{  public boolean isValidAttachmentPoint(DatapathId switchDPID,OFPort switchPort){  if (topology.isAttachmentPointPort(switchDPID,switchPort) == false)   return false;  if (suppressAPs.contains(new SwitchPort(switchDPID,switchPort)))   return false;  return true;}  }
class C{  public boolean isUseSearch(){  return isApply() && !isEmpty() && isValid();}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public List<A> reverse(){  List<A> rev=new List<A>();  for (List<A> l=this; l.nonEmpty(); l=l.tail)   rev=new List<A>(l.head,rev);  return rev;}  }
class C{  protected DocletImpl(){  super();}  }
class C{  private void updateMessage(){  int count=getValidationErrorsCount();  if (0 == count) {    setMessage(null);  } else {    String msg=count + " validation error" + (count > 1 ? "s" : "")+ " detected";    setMessage(msg,ERROR);  }}  }
class C{  @Override protected void installListeners(){  super.installListeners();  table.addPropertyChangeListener(this);}  }
class C{  @Ignore public java.lang.Object[] $getArray$(){  if (rest instanceof Empty) {    return array;  }  return null;}  }
class C{  protected long computeSVUID() throws IOException {  ByteArrayOutputStream bos;  DataOutputStream dos=null;  long svuid=0;  try {    bos=new ByteArrayOutputStream();    dos=new DataOutputStream(bos);    dos.writeUTF(name.replace('/','.'));    dos.writeInt(access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_INTERFACE| Opcodes.ACC_ABSTRACT));    Arrays.sort(interfaces);    for (int i=0; i < interfaces.length; i++) {      dos.writeUTF(interfaces[i].replace('/','.'));    }    writeItems(svuidFields,dos,false);    if (hasStaticInitializer) {      dos.writeUTF("<clinit>");      dos.writeInt(Opcodes.ACC_STATIC);      dos.writeUTF("()V");    }    writeItems(svuidConstructors,dos,true);    writeItems(svuidMethods,dos,true);    dos.flush();    byte[] hashBytes=computeSHAdigest(bos.toByteArray());    for (int i=Math.min(hashBytes.length,8) - 1; i >= 0; i--) {      svuid=(svuid << 8) | (hashBytes[i] & 0xFF);    }  }  finally {    if (dos != null) {      dos.close();    }  }  return svuid;}  }
class C{  private static void openModel(final Context context,final String path){  View generatingProjectDialog=LayoutInflater.from(context).inflate(R.layout.dialog_loading_project,null);  mSnapshotLayout=(FrameLayout)generatingProjectDialog.findViewById(R.id.framesnapshot);  Log.i("OUT","Opening to snap " + path);  String count=context.getString(R.string.generating_project);  if (mFileQueue != null)   count+=" (" + (mCount - (mFileQueue.size() - 1)) + "/"+ mCount+ ")";  final MaterialDialog.Builder createFolderDialog=new MaterialDialog.Builder(mContext);  createFolderDialog.title(count).customView(generatingProjectDialog,true).cancelable(false).autoDismiss(false);  mAlert=createFolderDialog.build();  mAlert.show();  File file=new File(path);  List<DataStorage> list=new ArrayList<DataStorage>();  DataStorage data=new DataStorage();  if (StlFile.checkFileSize(file,mContext)) {    if (LibraryController.hasExtension(0,path)) {      StlFile.openStlFile(context,file,data,ViewerMainFragment.DO_SNAPSHOT);    } else     if (LibraryController.hasExtension(1,path)) {      GcodeFile.openGcodeFile(context,file,data,ViewerMainFragment.DO_SNAPSHOT);    }    mSnapshotSurface=new ViewerSurfaceView(context,list,ViewerSurfaceView.NORMAL,ViewerMainFragment.DO_SNAPSHOT,null);    list.add(data);  } else   mAlert.dismiss();}  }
class C{  public void removeRow(int rowIndex){  this.rowKeys.remove(rowIndex);  this.rows.remove(rowIndex);}  }
class C{  private static final int hexToInt(char c) throws ParseException {  if ('0' <= c && c <= '9') {    return c - '0';  } else   if ('a' <= c && c <= 'f') {    return c - 'a' + 10;  } else   if ('A' <= c && c <= 'F') {    return c - 'A' + 10;  } else {    throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE,c));  }}  }
class C{  public synchronized boolean addPeer(Peer p){  if (isKnownPeer(p)) {    touchPeer(p);    return false;  } else {    mCurrentPeers.add(p);    return true;  }}  }
class C{  @Field(9) public cl_mem buffer(){  return this.io.getTypedPointerField(this,9);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static void reinitRecompiler(){  _rewriter.set(new ProgramRewriter(false,true));}  }
class C{  void add(CharSequence key,CharSequence cmd){  if (key == null || cmd == null) {    return;  }  if (cmd.length() == 0) {    return;  }  int id_cmd=cmds.indexOf(cmd);  if (id_cmd == -1) {    id_cmd=cmds.size();    cmds.add(cmd);  }  int node=root;  Row r=getRow(node);  StrEnum e=new StrEnum(key,forward);  for (int i=0; i < e.length() - 1; i++) {    Character ch=new Character(e.next());    node=r.getRef(ch);    if (node >= 0) {      r=getRow(node);    } else {      node=rows.size();      Row n;      rows.add(n=new Row());      r.setRef(ch,node);      r=n;    }  }  r.setCmd(new Character(e.next()),id_cmd);}  }
class C{  public List<Tradestrategy> findTradestrategyContractDistinctByDateRange(ZonedDateTime fromOpen,ZonedDateTime toOpen){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Tradestrategy> query=builder.createQuery(Tradestrategy.class);    Root<Tradestrategy> from=query.from(Tradestrategy.class);    query.select(from);    query.orderBy(builder.asc(from.join("contract").get("symbol")));    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != fromOpen) {      Join<Tradestrategy,Tradingday> tradingday=from.join("tradingday");      Predicate predicate=builder.greaterThanOrEqualTo(tradingday.get("open").as(ZonedDateTime.class),fromOpen);      predicates.add(predicate);    }    if (null != toOpen) {      Join<Tradestrategy,Tradingday> tradingday=from.join("tradingday");      Predicate predicate=builder.lessThanOrEqualTo(tradingday.get("open").as(ZonedDateTime.class),toOpen);      predicates.add(predicate);    }    query.multiselect(from.join("contract")).distinct(true);    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Tradestrategy> typedQuery=entityManager.createQuery(query);    List<Tradestrategy> items=typedQuery.getResultList();    entityManager.getTransaction().commit();    return items;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public final void completeImage(){  if (hasClip) {    i_x=(int)clip.getBounds2D().getMinX();    i_y=(int)clip.getBounds2D().getMinY();    i_w=(current_image.getWidth());    i_h=(current_image.getHeight());  }}  }
class C{  private int read() throws IOException {  this.bytePosition++;  return input.read();}  }
class C{  private void updateOffsetLabel(){  m_offsetLabel.setText(String.format("%s: %08X","Current Offset",m_hexView.getHexView().getCurrentOffset()));}  }
class C{  private TimeTree addTimeTree(TimeTree tt){  if (tt.getMinTimeSecs() < this.getMaxTimeSecs())   throw new CacheException("trying to add a tt that is before the end of this one, this: " + this + ", tt is "+ tt);  int index=chooseSubNodeOrCurrNodeToAddTo();  if (index == NUM_NODES) {    return createTimeTreeForKids(this,tt);  } else {    if (getSubNode(index) == null) {      setSubNodeFk(index,tt.id);    } else {      setSubNodeFk(index,getSubNode(index).addTimeTree(tt).id);    }    setTotalSubNodeCount(getTotalSubNodeCount() + tt.getTotalSubNodeCount());    setNumPoints(tt.getNumPoints() + getNumPoints());    setTimeJumpSecs(Util.maxAll(getTimeJumpSecs(),tt.getTimeJumpSecs(),tt.getMinTimeSecs() - getMaxTimeSecs()));    setMaxTimeSecs(tt.getMaxTimeSecs());    setPrevAndCurrDistM(getPrevAndCurrDistM() + tt.getPrevAndCurrDistM());    setNextApId(tt.getNextApId());    return this;  }}  }
class C{  protected boolean isLabelColumn(int col){  return labelIndices != null && BitsUtil.get(labelIndices,col);}  }
class C{  private static int trailingZeroBits(int x){  Assert.check(wordlen == 32);  if (x == 0) {    return 32;  }  int n=1;  if ((x & 0xffff) == 0) {    n+=16;    x>>>=16;  }  if ((x & 0x00ff) == 0) {    n+=8;    x>>>=8;  }  if ((x & 0x000f) == 0) {    n+=4;    x>>>=4;  }  if ((x & 0x0003) == 0) {    n+=2;    x>>>=2;  }  return n - (x & 1);}  }
class C{  public KeywordExample(KeywordObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getKeyword() != null) {    criteria.andKeywordEqualTo(sample.getKeyword());  }  if (sample.getTimes() != null) {    criteria.andTimesEqualTo(sample.getTimes());  }  if (sample.getAttachType() != null) {    criteria.andAttachTypeEqualTo(sample.getAttachType());  }  if (sample.getAttachId() != null) {    criteria.andAttachIdEqualTo(sample.getAttachId());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getTfidf() != null) {    criteria.andTfidfEqualTo(sample.getTfidf());  }}  }
class C{  public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","N");  try {    fillPicks();    jbInit();    dynInit();    m_frame.getContentPane().add(mainPanel,BorderLayout.CENTER);    m_frame.getContentPane().add(statusBar,BorderLayout.SOUTH);  } catch (  Exception e) {    log.log(Level.SEVERE,"Info",e);  }}  }
class C{  public synchronized String maxProcessingTimeMessageClass(){  return maxProcTimeMsgCls;}  }
class C{  public final String toString(){  StringBuffer buf=new StringBuffer();  int sz=this.initNodes.size();  if (sz != 0) {    boolean seen=this.getInitNode(0).getVisited();    for (int i=0; i < this.initNodes.size(); i++) {      BEGraphNode node=this.getInitNode(i);      node.toString(buf,seen);    }  }  return buf.toString();}  }
class C{  @Override public boolean execute(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public DocumentoImpl(){}  }
class C{  public static synchronized void addResource(RecoverableResource resource) throws IllegalStateException {  purgeResources();  if (resources_.containsKey(resource.getName()))   throw new IllegalStateException("Attempt to register second " + "resource with name " + resource.getName());  resource.setRecoveryService(recoveryService_);  resources_.put(resource.getName(),resource);  resourceList_.add(resource);}  }
class C{  void enqueueSnapshotResults(SnapshotResultMessage msg){  if (!isListening()) {    return;  }  for (; ; ) {    this.system.getCancelCriterion().checkCancelInProgress(null);    boolean interrupted=Thread.interrupted();    try {      snapshotResults.put(msg);      break;    } catch (    InterruptedException ignore) {      interrupted=true;    } finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }}  }
class C{  public void addArg(final BOp newArg){  if (newArg == null)   throw new IllegalArgumentException();  if (newArg == this)   throw new IllegalArgumentException();  args.add(newArg);  mutation();}  }
class C{  public static void e(String tag,String msg){  e(tag,msg,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.579 -0500",hash_original_method="B6F2129527CFF355191EDA726B295B54",hash_generated_method="3E5AFBD15D73C4AB7C01CBE3C61110CE") public boolean isSecure(){  return this.firstTransactionSecure;}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.addAttribute(uri,localName,rawName,type,value,XSLAttribute);}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  public InvalidClassException(String reason){  super(reason);}  }
class C{  public static String generateRandomUUID(){  return UUID.randomUUID().toString();}  }
class C{  float invLogFunc(float y){  return (float)(Math.log((1f - reverse(y)) * (LogBase - 1) + 1) / Math.log(LogBase));}  }
class C{  @Override void initAnimation(){  if (!mInitialized) {    if ((mProperty == null) && AnimatorProxy.NEEDS_PROXY && (mTarget instanceof View)&& PROXY_PROPERTIES.containsKey(mPropertyName)) {      setProperty(PROXY_PROPERTIES.get(mPropertyName));    }    int numValues=mValues.length;    for (int i=0; i < numValues; ++i) {      mValues[i].setupSetterAndGetter(mTarget);    }    super.initAnimation();  }}  }
class C{  public EditorColorChooserAction(DrawingEditor editor,AttributeKey<Color> key,@Nullable Icon icon){  this(editor,key,null,icon);}  }
class C{  public static boolean isAlphanumericSpace(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if ((Character.isLetterOrDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {      return false;    }  }  return true;}  }
class C{  public vec3 lerp(vec3 a,vec3 b,float t){  float dx=b.m[0] - a.m[0];  float dy=b.m[1] - a.m[1];  float dz=b.m[2] - a.m[2];  this.m[0]=a.m[0] + t * dx;  this.m[1]=a.m[1] + t * dy;  this.m[2]=a.m[2] + t * dz;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean x=evalBool(stack.pop());  if (!Sage.EMBEDDED)   UIManager.setAlwaysOnTop(stack.getUIMgrSafe().getVideoFrame().getVideoHandle(),x);  return null;}  }
class C{  public void fillDefaultValues(){  tfLearningRate.setText(Double.toString(HebbianCPCARule.DEFAULT_LEARNING_RATE));  tfM.setText(Double.toString(HebbianCPCARule.DEFAULT_M));  tfTheta.setText(Double.toString(HebbianCPCARule.DEFAULT_THETA));  tfLambda.setText(Double.toString(HebbianCPCARule.DEFAULT_LAMBDA));}  }
class C{  public Arguments(Option[] options){  this.options=options;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static double log2(final double value){  return Math.log(value) / LOGE_2;}  }
class C{  VPlexExtentInfo findExtent(String extentName) throws VPlexApiException {  VPlexExtentInfo extentInfo=null;  List<VPlexClusterInfo> clusterInfoList=getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    String clusterName=clusterInfo.getName();    s_logger.info("Find extent {} on cluster {}",extentName,clusterName);    List<VPlexExtentInfo> extentInfoList=getExtentInfoForCluster(clusterName);    for (    VPlexExtentInfo clusterExtentInfo : extentInfoList) {      if (clusterExtentInfo.getName().equals(extentName)) {        extentInfo=clusterExtentInfo;        extentInfo.setClusterId(clusterName);        break;      }    }    if (extentInfo != null) {      break;    }  }  return extentInfo;}  }
class C{  public boolean isLight(){  return isLight;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case DPID:    return isSetDpid();case PORT:  return isSetPort();}throw new IllegalStateException();}  }
class C{  public void testGetF5(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF5();  assertEquals(expResult,result);}  }
class C{  private void commit(final boolean close){  if (!close && (intermediateBatchSize == 0L || listener.mutations() < intermediateBatchSize))   return;  if (null != graph) {    if (graph.features().graph().supportsTransactions()) {      LOGGER.info("Committing transaction on Graph instance: {} [{} mutations]",graph,listener.mutations());      try {        graph.tx().commit();        LOGGER.debug("Committed transaction on Graph instance: {}",graph);        listener.resetCounter();      } catch (      Exception e) {        LOGGER.error("Failed to commit transaction on Graph instance: {}",graph);        graph.tx().rollback();        listener.resetCounter();        throw e;      }    }    if (close) {      try {        graph.close();        LOGGER.info("Closed Graph instance: {}",graph);        graph=null;      } catch (      Exception e) {        LOGGER.warn("Failed to close Graph instance",e);      }    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.388 -0500",hash_original_method="901B0F4CA28424233D996D3F63CA3D29",hash_generated_method="4B5893EEDD3C4DA62552168499070307") void syncSummaryView(View view){  TextView summaryView=(TextView)view.findViewById(com.android.internal.R.id.summary);  if (summaryView != null) {    boolean useDefaultSummary=true;    if (mChecked && mSummaryOn != null) {      summaryView.setText(mSummaryOn);      useDefaultSummary=false;    } else     if (!mChecked && mSummaryOff != null) {      summaryView.setText(mSummaryOff);      useDefaultSummary=false;    }    if (useDefaultSummary) {      final CharSequence summary=getSummary();      if (summary != null) {        summaryView.setText(summary);        useDefaultSummary=false;      }    }    int newVisibility=View.GONE;    if (!useDefaultSummary) {      newVisibility=View.VISIBLE;    }    if (newVisibility != summaryView.getVisibility()) {      summaryView.setVisibility(newVisibility);    }  }}  }
class C{  public void findAndInit(Object obj){  if (obj instanceof GraphicLoader) {    checkGraphicLoader((GraphicLoader)obj);  }  if (obj instanceof LayerHandler) {    Debug.message("graphicLoader","GraphicLoaderConnector found a LayerHandler.");    setLayerHandler((LayerHandler)obj);  }}  }
class C{  public <RO,Entity>RO map(final Entity object,final Class<RO> ro,final Class<Entity> entity){  if (entity != null) {    final RO dto=(RO)dtoFactory.getByIface(ro);    DTOAssembler.newAssembler(ro,entity).assembleDto(dto,object,adaptersRepository.getAll(),dtoFactory);    return dto;  }  return null;}  }
class C{  public static void toXml(final FeaturesConfig toConvert,final OutputStream stream,Boolean prettyXml) throws JAXBException {  Marshaller varMarshaller=getMarshaller(prettyXml);  varMarshaller.marshal(toConvert,stream);}  }
class C{  public double latDegrees(){  return 180.0 / Math.PI * latRadians;}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  public FieldInfo fieldInfo(String fieldName){  return byName.get(fieldName);}  }
class C{  public TFloatHashSet(float[] array,TFloatHashingStrategy strategy){  this(array.length,strategy);  addAll(array);}  }
class C{  public void testBadRequest() throws Exception {  socketRpcServer.registerService(new FakeServiceImpl(null));  FakeSocket socket=new FakeSocket(false).withInputBytes("bad bytes".getBytes());  runHandler(socket);  assertFalse(socket.getResponse().getCallback());  assertTrue(socket.getResponse().hasError());  assertEquals(ErrorReason.BAD_REQUEST_DATA,socket.getResponse().getErrorReason());}  }
class C{  @Mod.EventHandler public void preInit(FMLPreInitializationEvent evt){  try {    DependencyInjectionEntryPoint diep=new DependencyInjectionEntryPoint();    diep.install(NetworkModule.class);    diep.install(SaveModule.class);    diep.install(TickerModule.class);    diep.install(LanguageModule.class);    diep.install(KeyModule.class);    diep.install(ClientModule.class);    diep.install(GameInfoModule.class);    diep.install(RenderModule.class);    diep.install(ComponentModule.class);    Set<Class<?>> modClasses=NovaMinecraftPreloader.modClasses;    proxy.registerResourcePacks(modClasses);    launcher=new NovaLauncher(diep,modClasses);    Game.inject(diep);    Game.natives().registerConverter(new DataWrapper());    Game.natives().registerConverter(new EntityConverter());    Game.natives().registerConverter(new BlockConverter());    Game.natives().registerConverter(new ItemConverter());    Game.natives().registerConverter(new WorldConverter());    Game.natives().registerConverter(new CuboidConverter());    Game.natives().registerConverter(new InventoryConverter());    OreDictionaryIntegration.instance.registerOreDictionary();    MinecraftRecipeRegistry.instance.registerRecipes();    launcher.generateDependencies();    try {      for (      List<MavenDependency> dependencies : launcher.getNeededDeps().values()) {        for (        MavenDependency dep : dependencies) {          DepDownloader.downloadDepdency(dep.getDownloadURL(),FMLInjectionData.data()[6] + "/mods/" + dep.getPath());        }      }    } catch (    Exception e) {      e.printStackTrace();    }    launcher.load();    nativeConverters=Game.natives().getNativeConverters().stream().filter(null).map(null).collect(Collectors.toSet());    nativeConverters.stream().forEachOrdered(null);    Game.blocks().init();    Game.items().init();    Game.entities().init();    Game.render().init();    Game.language().init();    launcher.preInit();    proxy.preInit();    MinecraftForge.EVENT_BUS.register(new ForgeEventHandler());    FMLCommonHandler.instance().bus().register(new FMLEventHandler());    MinecraftForge.EVENT_BUS.register(Game.retention());  } catch (  Exception e) {    System.out.println("Error during preInit");    e.printStackTrace();    throw new InitializationException(e);  }}  }
class C{  FiringPlan guessBestFiringPlanWithTwists(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,IGame game){  FiringPlan noTwistPlan=guessBestFiringPlan(shooter,shooterState,target,targetState,game);  if (!shooter.canChangeSecondaryFacing()) {    return noTwistPlan;  }  int originalFacing=shooter.getSecondaryFacing();  shooter.setSecondaryFacing(correctFacing(originalFacing + 1));  FiringPlan rightTwistPlan=guessBestFiringPlan(shooter,shooterState,target,targetState,game);  rightTwistPlan.setTwist(1);  shooter.setSecondaryFacing(correctFacing(originalFacing - 1));  FiringPlan leftTwistPlan=guessBestFiringPlan(shooter,shooterState,target,targetState,game);  leftTwistPlan.setTwist(-1);  shooter.setSecondaryFacing(originalFacing);  if ((noTwistPlan.getUtility() > rightTwistPlan.getUtility()) && (noTwistPlan.getUtility() > leftTwistPlan.getUtility())) {    return noTwistPlan;  }  if (leftTwistPlan.getUtility() > rightTwistPlan.getUtility()) {    return leftTwistPlan;  }  return rightTwistPlan;}  }
class C{  public boolean isEncrypted(){  return keyCrypter != null && encryptedPrivateKey != null && encryptedPrivateKey.getEncryptedBytes() != null && encryptedPrivateKey.getEncryptedBytes().length > 0;}  }
class C{  public boolean isPassthruEnabled(){  return passthruEnabled;}  }
class C{  public void stateChanged(ChangeEvent e){  JSlider j=(JSlider)e.getSource();  BoundedRangeModel r=j.getModel();  for (int i=0; i < nValues; i++) {    if (r == models[i]) {      setModel(i,r.getValue());      break;    }  }  prop.firePropertyChange("Value",null,j);}  }
class C{  public TraceLevel_ createTraceLevel_(){  TraceLevel_Impl traceLevel_=new TraceLevel_Impl();  return traceLevel_;}  }
class C{  public static void multiply(int[] n1,int[] n2,int[] result){  int pos=result.length - 1;  for (int i=0; i < result.length; i++) {    result[i]=0;  }  int off;  for (int m=n1.length - 1; m >= 0; m--) {    off=n1.length - 1 - m;    if (n1[m] == 0) {      continue;    }    for (int n=n2.length - 1; n >= 0; n--) {      int prod=n1[m] * n2[n];      result[pos - off]+=prod % 10;      if (result[pos - off] > 9) {        do {          result[pos - off]-=10;          result[pos - off - 1]++;        } while (result[pos - off] > 9);      }      if (prod > 9) {        result[pos - off - 1]+=prod / 10;      }      off++;    }  }}  }
class C{  public static Test suite(){  return (new TestSuite(SelectStarITCase.class));}  }
class C{  public void handleFeatureCheckRequest(final CheckRequest checkRequest){  if (sourceType == null) {    sourceType=PersistUtils.getSourceType(getContext());  }  if (!sourceType.equals(SourceType.URL) || !checkRequest.getLatest) {    getAndProcessCachedConfig(checkRequest);  } else {    makeNetworkFeatureCheckRequest(checkRequest);  }}  }
class C{  public GMatrix(GMatrix matrix){  nRow=matrix.nRow;  nCol=matrix.nCol;  values=new double[nRow][nCol];  int i, j;  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=matrix.values[i][j];    }  }}  }
class C{  public String globalInfo(){  return "Dimensionality of training and test data is reduced by " + "attribute selection before being passed on to a classifier.";}  }
class C{  private static void rangeCheck(int arrayLen,int fromIndex,int toIndex){  if (fromIndex > toIndex)   throw new IllegalArgumentException("fromIndex(" + fromIndex + ") > toIndex("+ toIndex+ ")");  if (fromIndex < 0)   throw new ArrayIndexOutOfBoundsException(fromIndex);  if (toIndex > arrayLen)   throw new ArrayIndexOutOfBoundsException(toIndex);}  }
class C{  public boolean onReceivedHttpAuthRequest(CordovaWebView view,ICordovaHttpAuthHandler handler,String host,String realm){  return false;}  }
class C{  private static void usage(){  System.err.println("Usage: GenerateBreakIteratorData [options]\n" + "    -o outputDir                 output directory name\n" + "    -spec specname               unicode text filename\n"+ "  and locale data:\n"+ "    -lang language               target language name\n"+ "    -country country             target country name\n"+ "    -valiant valiant             target valiant name\n");}  }
class C{  public boolean isWhitelisted(String name){  if (getWhitelistEnabled() == false)   return true;  return isOnList(whitelist,name);}  }
class C{  public static String toArrayString(Object[] arguments,int maxSize,boolean safe){  return toArrayString(arguments,false,maxSize,safe);}  }
class C{  public void testLoggingDisabledSamplingNotSet() throws Exception {  startUp();  assert !logEnabled();}  }
class C{  private void plotReset(Instances inst,int cIndex){  if (m_splitListener == null) {    m_submit.setText("Reset");    m_submit.setActionCommand("Reset");    if (m_originalPlot == null || m_originalPlot.m_plotInstances == inst) {      m_submit.setEnabled(false);    } else {      m_submit.setEnabled(true);    }  } else {    m_submit.setEnabled(false);  }  m_plotInstances=inst;  if (m_splitListener != null) {    m_plotInstances.randomize(new Random());  }  m_xIndex=0;  m_yIndex=0;  m_cIndex=cIndex;  cancelShapes();}  }
class C{  public void replace(ByteString namespace,ByteString key,Iterable<? extends ByteString> values){  if (namespace != null && key != null) {    if (values == null) {      remove(namespace,key);    } else {      SetMultimap<ByteString,ByteString> namespaceData=modifyKey(namespace,key);      namespaceData.putAll(key,values);      namespaceData.remove(key,null);      if (namespaceData.isEmpty()) {        contents.remove(namespace);      }    }  }}  }
class C{  private int julery_isqrt(int val){  int temp, g=0, b=0x8000, bshft=15;  do {    if (val >= (temp=(((g << 1) + b) << bshft--))) {      g+=b;      val-=temp;    }  } while ((b>>=1) > 0);  return g;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String snapshot(){  return snapshot;}  }
class C{  @Override protected void initViews(View self,Bundle savedInstanceState){}  }
class C{  public static void compact(String sourceFileName,String targetFileName,boolean compress){  MVStore source=new MVStore.Builder().fileName(sourceFileName).readOnly().open();  FileUtils.delete(targetFileName);  MVStore.Builder b=new MVStore.Builder().fileName(targetFileName);  if (compress) {    b.compress();  }  MVStore target=b.open();  compact(source,target);  target.close();  source.close();}  }
class C{  public static <T extends Number,V>void show(BackgroundTask<T,V> task,Number total,boolean cancelAllowed){  show(task,null,null,total,cancelAllowed);}  }
class C{  public ROCDataGenerator(double misclassificationCostsPositive,double misclassificationCostsNegative){  this.misclassificationCostsPositive=misclassificationCostsPositive;  this.misclassificationCostsNegative=misclassificationCostsNegative;}  }
class C{  public static String initializeOrderEntry(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  HttpSession session=request.getSession();  Security security=(Security)request.getAttribute("security");  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  Locale locale=UtilHttp.getLocale(request);  String productStoreId=request.getParameter("productStoreId");  if (UtilValidate.isNotEmpty(productStoreId)) {    session.setAttribute("productStoreId",productStoreId);  }  ShoppingCart cart=getCartObject(request);  String orderMode=request.getParameter("orderMode");  if (orderMode != null) {    cart.setOrderType(orderMode);    session.setAttribute("orderMode",orderMode);  } else {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderPleaseSelectEitherSaleOrPurchaseOrder",locale));    return "error";  }  GenericValue productStore=null;  if (UtilValidate.isNotEmpty(productStoreId)) {    productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);    if (productStore != null) {      boolean hasPermission=false;      if ((cart.getOrderType().equals("PURCHASE_ORDER")) && (security.hasEntityPermission("ORDERMGR","_PURCHASE_CREATE",session))) {        hasPermission=true;      } else       if (cart.getOrderType().equals("SALES_ORDER")) {        if (security.hasEntityPermission("ORDERMGR","_SALES_CREATE",session)) {          hasPermission=true;        } else {          List<GenericValue> storeReps=null;          try {            storeReps=EntityQuery.use(delegator).from("ProductStoreRole").where("productStoreId",productStore.getString("productStoreId"),"partyId",userLogin.getString("partyId"),"roleTypeId","SALES_REP").filterByDate().queryList();          } catch (          GenericEntityException gee) {          }          if (UtilValidate.isNotEmpty(storeReps)) {            hasPermission=true;          }        }      }      if (hasPermission) {        cart=ShoppingCartEvents.getCartObject(request,null,productStore.getString("defaultCurrencyUomId"));      } else {        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToTakeOrdersForThisStore",locale));        cart.clear();        session.removeAttribute("orderMode");        return "error";      }      cart.setProductStoreId(productStoreId);    } else {      cart.setProductStoreId(null);    }  }  if ("SALES_ORDER".equals(cart.getOrderType()) && UtilValidate.isEmpty(cart.getProductStoreId())) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderAProductStoreMustBeSelectedForASalesOrder",locale));    cart.clear();    session.removeAttribute("orderMode");    return "error";  }  String salesChannelEnumId=request.getParameter("salesChannelEnumId");  if (UtilValidate.isNotEmpty(salesChannelEnumId)) {    cart.setChannelType(salesChannelEnumId);  }  String partyId=request.getParameter("supplierPartyId");  cart.setAttribute("supplierPartyId",partyId);  String originOrderId=request.getParameter("originOrderId");  cart.setAttribute("originOrderId",originOrderId);  if (!UtilValidate.isEmpty(request.getParameter("partyId"))) {    partyId=request.getParameter("partyId");  }  String userLoginId=request.getParameter("userLoginId");  if (partyId != null || userLoginId != null) {    if (UtilValidate.isEmpty(partyId) && UtilValidate.isNotEmpty(userLoginId)) {      GenericValue thisUserLogin=null;      try {        thisUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();      } catch (      GenericEntityException gee) {      }      if (thisUserLogin != null) {        partyId=thisUserLogin.getString("partyId");      } else {        partyId=userLoginId;      }    }    if (UtilValidate.isNotEmpty(partyId)) {      GenericValue thisParty=null;      try {        thisParty=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();      } catch (      GenericEntityException gee) {      }      if (thisParty == null) {        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderCouldNotLocateTheSelectedParty",locale));        return "error";      } else {        cart.setOrderPartyId(partyId);        if ("PURCHASE_ORDER".equals(cart.getOrderType())) {          cart.setBillFromVendorPartyId(partyId);        }      }    } else     if (partyId != null && partyId.length() == 0) {      cart.setOrderPartyId("_NA_");      partyId=null;    }  } else {    partyId=cart.getPartyId();    if (partyId != null && partyId.equals("_NA_"))     partyId=null;  }  return "success";}  }
class C{  @Override public void decode(final BufferedInputStream bis,final BufferedOutputStream streamCache,final String cacheName,final Map<String,String> cachedObjects){  this.bis=bis;  this.streamCache=streamCache;  this.cachedObjects=cachedObjects;  try {    StringBuffer value=new StringBuffer();    char current;    int count=bis.available();    for (int i=0; i < count; i++) {      current=(char)bis.read();      while (current == '\n') {        current=(char)bis.read();      }      if ((current >= '0' && current <= '9') || (current >= 'a' && current <= 'f') || (current >= 'A' && current <= 'F')) {        value.append(current);        if (count == 1) {          streamCache.write(Integer.valueOf(value.toString(),16));          count=0;          value=new StringBuffer();        } else {          count++;        }      }      if (current == '>') {        break;      }    }    if (count == 1) {      value.append('0');      streamCache.write(Integer.valueOf(value.toString(),16));    }  } catch (  final IOException e1) {    LogWriter.writeLog("IO exception in RunLength " + e1);  }}  }
class C{  public boolean containsOneCategory(List categories){  for (Iterator iter=categories.iterator(); iter.hasNext(); ) {    GroupCategory category=(GroupCategory)iter.next();    if (contains(category))     return true;  }  return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.MORE_CODE___ANONYMOUS_MORE_CODE_11:    return ((InternalEList<?>)getAnonymous_moreCode_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void resetDict(){  dictlen=258;  bitspercode=9;}  }
class C{  public String sqlAction_checkRecordExists(String vendorName,String catalogName,String schemaName,String tableName,String columnName,String checkCondition){  String condition=new StringBuffer(columnName).append("=").append(checkCondition).toString();  String sql=sql_select(vendorName,catalogName,schemaName,tableName,condition);  sql=sql.replaceFirst("\\*",new StringBuffer("COUNT(").append(columnName).append(") AS NumberOfRecords").toString());  return sql;}  }
class C{  @After public void tearDown() throws Exception {  TradestrategyTest.clearDBData();}  }
class C{  public boolean performAccessibilityAction(int action,Bundle arguments){  if (!isAccessibilityEnabled()) {    mAccessibilityScriptInjected=false;    toggleFallbackAccessibilityInjector(false);    return false;  }  if (mAccessibilityScriptInjected) {    return sendActionToAndroidVox(action,arguments);  }  if (mAccessibilityInjectorFallback != null) {    return mAccessibilityInjectorFallback.performAccessibilityAction(action,arguments);  }  return false;}  }
class C{  public void endCreateCQ(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(createCQInProgressId,-1);  int endCreateCQId;  if (timedOut) {    endCreateCQId=createCQTimedOutId;  } else   if (failed) {    endCreateCQId=createCQFailedId;  } else {    endCreateCQId=createCQId;  }  this.stats.incInt(endCreateCQId,1);  this.stats.incLong(createCQDurationId,duration);}  }
class C{  private void replaceUse(SsaInsn use,SsaInsn prev,ArrayList<RegisterSpec> newRegs,HashSet<SsaInsn> deletedInsns){  int index;  int length=newRegs.size();  SsaInsn next;  RegisterSpecList sources;  RegisterSpec source, result;  CstLiteralBits indexReg;switch (use.getOpcode().getOpcode()) {case RegOps.AGET:    next=getMoveForInsn(use);  sources=use.getSources();indexReg=((CstLiteralBits)sources.get(1).getTypeBearer());index=indexReg.getIntBits();if (index < length) {source=newRegs.get(index);result=source.withReg(next.getResult().getReg());insertPlainInsnBefore(next,RegisterSpecList.make(source),result,RegOps.MOVE,null);} else {insertExceptionThrow(next,sources.get(1),deletedInsns);deletedInsns.add(next.getBlock().getInsns().get(2));}deletedInsns.add(next);break;case RegOps.APUT:sources=use.getSources();indexReg=((CstLiteralBits)sources.get(2).getTypeBearer());index=indexReg.getIntBits();if (index < length) {source=sources.get(0);result=source.withReg(newRegs.get(index).getReg());insertPlainInsnBefore(use,RegisterSpecList.make(source),result,RegOps.MOVE,null);newRegs.set(index,result.withSimpleType());} else {insertExceptionThrow(use,sources.get(2),deletedInsns);}break;case RegOps.ARRAY_LENGTH:TypeBearer lengthReg=prev.getSources().get(0).getTypeBearer();next=getMoveForInsn(use);insertPlainInsnBefore(next,RegisterSpecList.EMPTY,next.getResult(),RegOps.CONST,(Constant)lengthReg);deletedInsns.add(next);break;case RegOps.MARK_LOCAL:break;case RegOps.FILL_ARRAY_DATA:Insn ropUse=use.getOriginalRopInsn();FillArrayDataInsn fill=(FillArrayDataInsn)ropUse;ArrayList<Constant> constList=fill.getInitValues();for (int i=0; i < length; i++) {RegisterSpec newFill=RegisterSpec.make(newRegs.get(i).getReg(),(TypeBearer)constList.get(i));insertPlainInsnBefore(use,RegisterSpecList.EMPTY,newFill,RegOps.CONST,constList.get(i));newRegs.set(i,newFill);}break;default :}}  }
class C{  public void displayHelp(PrintStream out){  this.options.displayHelp(out);}  }
class C{  public static void checkAndSetIntegerParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    Integer d=getInteger(context,paramName,xpath);    if (d != null)     params.setValue(paramKey,d);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private ArrayListSpliterator(ArrayList<E> list,int origin,int fence,int expectedModCount){  this.list=list;  this.index=origin;  this.fence=fence;  this.expectedModCount=expectedModCount;}  }
class C{  public void parse() throws IOException {  if (styledText == null || "".equals(styledText.getText().trim())) {    return;  }  initBeforeParsing();  final String text=styledText.getText().trim();  final int max=text.length();  boolean inTag=false;  for (int i=0; i < max; i++) {    final char currentChar=text.charAt(i);    if (currentChar == '<') {      inTag=true;      continue;    } else     if (currentChar == '>') {      inTag=false;      handleTag();      currentTag.delete(0,currentTag.length());    } else {      if (inTag) {        currentTag.append(currentChar);      } else {        currentPosition++;        output.append(currentChar);      }    }  }  styledText.setText(output.toString());  styledText.setStyleRanges(listOfStyles.toArray(new StyleRange[listOfStyles.size()]));}  }
class C{  public JCheckBox(Action a){  this();  setAction(a);}  }
class C{  public void reset(){  this.nextIdentifierPosition=0;  this.nextOperationPosition=0;  this.iteration=null;  this.currentIterationValues=null;  this.iterations.clear();  this.identifiers.clear();  this.operations.clear();  this.currentMeasuredOperations.clear();  this.currentIterationChildren.clear();  this.children.clear();}  }
class C{  private void showMainMenu(){  JButton hostB;  JButton connectB;  JButton botB;  JButton editB;  JButton skinEditB;  JButton scenB;  JButton loadB;  JButton quitB;  JLabel labVersion=new JLabel();  labVersion.setText(Messages.getString("MegaMek.Version") + MegaMek.VERSION);  hostB=new JButton(Messages.getString("MegaMek.hostNewGame.label"));  hostB.setActionCommand("fileGameNew");  hostB.addActionListener(actionListener);  scenB=new JButton(Messages.getString("MegaMek.hostScenario.label"));  scenB.setActionCommand("fileGameScenario");  scenB.addActionListener(actionListener);  loadB=new JButton(Messages.getString("MegaMek.hostSavedGame.label"));  loadB.setActionCommand("fileGameOpen");  loadB.addActionListener(actionListener);  connectB=new JButton(Messages.getString("MegaMek.Connect.label"));  connectB.setActionCommand("fileGameConnect");  connectB.addActionListener(actionListener);  botB=new JButton(Messages.getString("MegaMek.ConnectAsBot.label"));  botB.setActionCommand("fileGameConnectBot");  botB.addActionListener(actionListener);  editB=new JButton(Messages.getString("MegaMek.MapEditor.label"));  editB.setActionCommand("fileBoardNew");  editB.addActionListener(actionListener);  skinEditB=new JButton(Messages.getString("MegaMek.SkinEditor.label"));  skinEditB.setActionCommand("fileSkinNew");  skinEditB.addActionListener(actionListener);  quitB=new JButton(Messages.getString("MegaMek.Quit.label"));  quitB.setActionCommand("quit");  quitB.addActionListener(actionListener);  Image imgSplash=frame.getToolkit().getImage(new File(Configuration.miscImagesDir(),FILENAME_MEGAMEK_SPLASH).toString());  MediaTracker tracker=new MediaTracker(frame);  tracker.addImage(imgSplash,0);  try {    tracker.waitForID(0);  } catch (  InterruptedException e) {  }  ImageIcon icon=new ImageIcon(imgSplash);  JLabel panTitle=new JLabel(icon);  GridBagLayout gridbag=new GridBagLayout();  GridBagConstraints c=new GridBagConstraints();  frame.getContentPane().setLayout(gridbag);  c.anchor=GridBagConstraints.WEST;  c.insets=new Insets(4,4,1,1);  c.ipadx=10;  c.ipady=5;  c.gridx=0;  c.gridy=0;  c.fill=GridBagConstraints.BOTH;  c.weightx=1.0;  c.weighty=1.0;  c.gridwidth=1;  c.gridheight=9;  addBag(panTitle,gridbag,c);  c.gridwidth=GridBagConstraints.REMAINDER;  c.weightx=.05;  c.weighty=1.0;  c.gridx=1;  c.gridheight=1;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridy=0;  addBag(labVersion,gridbag,c);  c.gridy++;  addBag(hostB,gridbag,c);  c.gridy++;  addBag(loadB,gridbag,c);  c.gridy++;  addBag(scenB,gridbag,c);  c.gridy++;  addBag(connectB,gridbag,c);  c.gridy++;  addBag(botB,gridbag,c);  c.gridy++;  addBag(editB,gridbag,c);  c.gridy++;  addBag(skinEditB,gridbag,c);  c.gridy++;  addBag(quitB,gridbag,c);  frame.validate();}  }
class C{  public static Criteria insert(Class<?> clazz){  return new Criteria(clazz,new InsertBuilder(clazz));}  }
class C{  public ParsedGraphQuery(String sourceString,TupleExpr tupleExpr){  super(sourceString,tupleExpr);}  }
class C{  @Override public void write(DataOutput out) throws IOException {  out.writeByte(type.val);  out.writeInt(nodeid);  if (type.equals(Type.Mass)) {    out.writeFloat(pagerank);    return;  }  if (type.equals(Type.Complete)) {    out.writeFloat(pagerank);  }  adjacenyList.write(out);}  }
class C{  @SuppressWarnings("unchecked") public T sliceOperations(long rl,long ru,long cl,long cu,T block) throws DMLRuntimeException {  int lrl=(int)rl;  int lru=(int)ru;  int lcl=(int)cl;  int lcu=(int)cu;  ArrayList<Pair<?,?>> allBlks=(ArrayList<Pair<?,?>>)CacheBlockFactory.getPairList(block);  int start_iix=(lrl - 1) / _brlen + 1;  int end_iix=(lru - 1) / _brlen + 1;  int start_jix=(lcl - 1) / _bclen + 1;  int end_jix=(lcu - 1) / _bclen + 1;  for (int iix=start_iix; iix <= end_iix; iix++)   for (int jix=start_jix; jix <= end_jix; jix++) {    IndexRange ixrange=new IndexRange(rl,ru,cl,cu);    allBlks.addAll(OperationsOnMatrixValues.performSlice(ixrange,_brlen,_bclen,iix,jix,getBlock(iix,jix)));  }  if (allBlks.size() == 1) {    return (T)allBlks.get(0).getValue();  } else {    Constructor<?> constr;    try {      constr=block.getClass().getConstructor(int.class,int.class,boolean.class);      T ret=(T)constr.newInstance(lru - lrl + 1,lcu - lcl + 1,false);      for (      Pair<?,?> kv : allBlks) {        ret.merge((T)kv.getValue(),false);      }      return ret;    } catch (    Exception e) {      throw new DMLRuntimeException(e);    }  }}  }
class C{  public PeekGraphics(Graphics2D graphics,PrinterJob printerJob){  mGraphics=graphics;  mPrinterJob=printerJob;}  }
class C{  @Check public void checkTopLevelLambda(ArrowFunction arrowFun){  if (LambdaUtils.isTopLevelLambda(arrowFun)) {    rejectUsagesOfThisInTopLevelLambda(arrowFun);  }}  }
class C{  protected boolean beforeRelease(){  return deque.size() < maxSize;}  }
class C{  public DeterministicKey(ImmutableList<ChildNumber> childNumberPath,byte[] chainCode,LazyECPoint publicAsPoint,@Nullable DeterministicKey parent,int depth,int parentFingerprint){  super(null,compressPoint(checkNotNull(publicAsPoint)));  checkArgument(chainCode.length == 32);  this.parent=parent;  this.childNumberPath=checkNotNull(childNumberPath);  this.chainCode=Arrays.copyOf(chainCode,chainCode.length);  this.depth=depth;  this.parentFingerprint=ascertainParentFingerprint(parent,parentFingerprint);}  }
class C{  public String toString(){  Object val=getValue();  if (val != null)   return val.toString();  return "NULL";}  }
class C{  @Override public void insertString(int offset,String string,AttributeSet attr) throws BadLocationException {  log.finest("Offset=" + offset + ",String="+ string+ ",Attr="+ attr+ ",OldText="+ getText()+ ",OldLength="+ getText().length());  if (string != null && string.length() == 1) {    if (offset >= m_mask.length())     return;    int length=getText().length();    if (offset == 0 && length == 0) {      Date today=new Date(System.currentTimeMillis());      String dateStr=m_format.format(today);      super.insertString(0,string + dateStr.substring(1),attr);      m_tc.setCaretPosition(1);      return;    }    try {      Integer.parseInt(string);    } catch (    Exception pe) {      ADialog.beep();      return;    }    if (offset != m_mask.length() - 1 && m_mask.charAt(offset + 1) == DELIMITER)     m_tc.setCaretPosition(offset + 2);    if (m_mask.charAt(offset) == DELIMITER) {      offset++;      m_tc.setCaretPosition(offset + 1);    }    super.remove(offset,1);  }  super.insertString(offset,string,attr);  if (offset == 0 && string != null && string.length() > 1)   m_tc.setCaretPosition(0);}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (DEBUG)   System.out.println("processingInstruction: target: " + target + ", data: "+ data);  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(null,target,DTM.PROCESSING_INSTRUCTION_NODE);  int dataIndex=m_valuesOrPrefixes.stringToIndex(data);  m_previous=addNode(DTM.PROCESSING_INSTRUCTION_NODE,exName,m_parents.peek(),m_previous,dataIndex,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.602 -0500",hash_original_method="C0C59EBD9F5AF1603D81C107186D4E66",hash_generated_method="D4FE196EFDC8540DC58A2E6EE0804DA1") public void removeToTag(){  parameters.delete(ParameterNames.TO_TAG);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:37.822 -0500",hash_original_method="DE008A6A0942FE352BE58D2F6B7E9069",hash_generated_method="D3C5BDA22382B8D3BA336B952BC07A61") public ECPoint multiply(ECPoint p,BigInteger k,PreCompInfo preCompInfo){  BigInteger e=k;  BigInteger h=e.multiply(BigInteger.valueOf(3));  ECPoint neg=p.negate();  ECPoint R=p;  for (int i=h.bitLength() - 2; i > 0; --i) {    R=R.twice();    boolean hBit=h.testBit(i);    boolean eBit=e.testBit(i);    if (hBit != eBit) {      R=R.add(hBit ? p : neg);    }  }  return R;}  }
class C{  private boolean isCurrentPasswordNeeded(final User editedUser,boolean currentIsEditedUser,boolean isUserAdmin){  return (!isUserAdmin || currentIsEditedUser) && !editedUser.getIsSingleUser() && editedUser.getPassword() != null;}  }
class C{  void close(LocalRegion region,boolean closeDataOnly){  try {    getDiskStore().close(region,this,closeDataOnly);  }  finally {    statsClose(region);  }}  }
class C{  private void createSignalControl(SignalControlData control){  int cycle=120;  List<Id<SignalSystem>> ids=new LinkedList<Id<SignalSystem>>();  ids.add(Id.create("3",SignalSystem.class));  ids.add(Id.create("4",SignalSystem.class));  ids.add(Id.create("7",SignalSystem.class));  ids.add(Id.create("8",SignalSystem.class));  for (  Id<SignalSystem> id : ids) {    SignalSystemControllerData controller=control.getFactory().createSignalSystemControllerData(id);    control.addSignalSystemControllerData(controller);    controller.setControllerIdentifier(DefaultPlanbasedSignalSystemController.IDENTIFIER);    SignalPlanData plan=control.getFactory().createSignalPlanData(Id.create("1",SignalPlan.class));    controller.addSignalPlanData(plan);    plan.setCycleTime(cycle);    plan.setOffset(0);    SignalGroupSettingsData settings1=control.getFactory().createSignalGroupSettingsData(Id.create("1",SignalGroup.class));    plan.addSignalGroupSettings(settings1);    settings1.setOnset(0);    settings1.setDropping(55);    SignalGroupSettingsData settings2=control.getFactory().createSignalGroupSettingsData(Id.create("2",SignalGroup.class));    plan.addSignalGroupSettings(settings2);    settings2.setOnset(0);    settings2.setDropping(55);  }}  }
class C{  public BACKUP_ACTIVATION waitForStatusChange(){  try {    latch.await();  } catch (  InterruptedException e) {    return BACKUP_ACTIVATION.STOP;  }  return signal;}  }
class C{  public void replace(final Component current,final Component next,final Transition t,Runnable onFinish,int growSpeed){  replaceComponents(current,next,t,false,false,onFinish,growSpeed,0,true);}  }
class C{  private void sortNodes(){  if (mNeedsSort) {    mSortedNodes.clear();    ArrayList<Node> roots=new ArrayList<Node>();    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies == null || node.dependencies.size() == 0) {        roots.add(node);      }    }    ArrayList<Node> tmpRoots=new ArrayList<Node>();    while (roots.size() > 0) {      int numRoots=roots.size();      for (int i=0; i < numRoots; ++i) {        Node root=roots.get(i);        mSortedNodes.add(root);        if (root.nodeDependents != null) {          int numDependents=root.nodeDependents.size();          for (int j=0; j < numDependents; ++j) {            Node node=root.nodeDependents.get(j);            node.nodeDependencies.remove(root);            if (node.nodeDependencies.size() == 0) {              tmpRoots.add(node);            }          }        }      }      roots.clear();      roots.addAll(tmpRoots);      tmpRoots.clear();    }    mNeedsSort=false;    if (mSortedNodes.size() != mNodes.size()) {      throw new IllegalStateException("Circular dependencies cannot exist" + " in AnimatorSet");    }  } else {    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies != null && node.dependencies.size() > 0) {        int numDependencies=node.dependencies.size();        for (int j=0; j < numDependencies; ++j) {          Dependency dependency=node.dependencies.get(j);          if (node.nodeDependencies == null) {            node.nodeDependencies=new ArrayList<Node>();          }          if (!node.nodeDependencies.contains(dependency.node)) {            node.nodeDependencies.add(dependency.node);          }        }      }      node.done=false;    }  }}  }
class C{  private UnManagedExportMask createUnManagedExportMask(com.emc.storageos.db.client.model.StorageSystem storageSystem,HostExportInfo hostExportInfo,Set<String> unManagedVolumesUris,Set<String> managedVolumesUris,DbClient dbClient){  UnManagedExportMask exportMask=new UnManagedExportMask();  exportMask.setId(URIUtil.createId(UnManagedExportMask.class));  StringSet knownInitiatorUris=new StringSet();  StringSet knownInitiatorNetworkIds=new StringSet();  StringSet unknownInitiatorNetworkIds=new StringSet();  StringSet knownStoragePortUris=new StringSet();  StringSet unmanagedStoragePortNetworkIds=new StringSet();  StringSet unknownVolumesUris=new StringSet();  StringSet knownVolumesUris=new StringSet();  List<com.emc.storageos.db.client.model.Initiator> knownFCInitiators=new ArrayList<>();  List<com.emc.storageos.db.client.model.StoragePort> knownFCPorts=new ArrayList<>();  String hostName=hostExportInfo.getHostName();  List<Initiator> initiators=hostExportInfo.getInitiators();  List<StoragePort> targets=hostExportInfo.getTargets();  exportMask.setMaskName(getUnManagedMaskName(hostName,storageSystem.getNativeGuid()));  exportMask.setStorageSystemUri(storageSystem.getId());  for (  Initiator driverInitiator : initiators) {    com.emc.storageos.db.client.model.Initiator knownInitiator=NetworkUtil.getInitiator(driverInitiator.getPort(),dbClient);    if (knownInitiator != null) {      URI initiatorUri=knownInitiator.getId();      knownInitiatorUris.add(initiatorUri.toString());      knownInitiatorNetworkIds.add(driverInitiator.getPort());      if (HostInterface.Protocol.FC.toString().equals(knownInitiator.getProtocol())) {        knownFCInitiators.add(knownInitiator);      }    } else {      unknownInitiatorNetworkIds.add(driverInitiator.getPort());    }  }  exportMask.setKnownInitiatorNetworkIds(knownInitiatorNetworkIds);  exportMask.setKnownInitiatorUris(knownInitiatorUris);  exportMask.setUnmanagedInitiatorNetworkIds(unknownInitiatorNetworkIds);  for (  StoragePort driverPort : targets) {    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(storageSystem,driverPort.getNativeId(),NativeGUIDGenerator.PORT);    URIQueryResultList storagePortURIs=new URIQueryResultList();    dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),storagePortURIs);    if (storagePortURIs.iterator().hasNext()) {      URI portUri=storagePortURIs.iterator().next();      knownStoragePortUris.add(portUri.toString());      com.emc.storageos.db.client.model.StoragePort port=dbClient.queryObject(com.emc.storageos.db.client.model.StoragePort.class,portUri);      if (com.emc.storageos.db.client.model.StoragePort.TransportType.FC.toString().equals(port.getTransportType())) {        knownFCPorts.add(port);      }    } else {      unmanagedStoragePortNetworkIds.add(driverPort.getPortNetworkId());    }  }  exportMask.setKnownStoragePortUris(knownStoragePortUris);  exportMask.setUnmanagedStoragePortNetworkIds(unmanagedStoragePortNetworkIds);  if (unManagedVolumesUris != null && !unManagedVolumesUris.isEmpty()) {    unknownVolumesUris.addAll(unManagedVolumesUris);    exportMask.setUnmanagedVolumeUris(unknownVolumesUris);  }  if (managedVolumesUris != null && !managedVolumesUris.isEmpty()) {    knownVolumesUris.addAll(managedVolumesUris);    exportMask.setKnownVolumeUris(knownVolumesUris);  }  updateZoningMap(exportMask,knownFCInitiators,knownFCPorts);  return exportMask;}  }
class C{  public static boolean configureEdgeLoopback(){  String path="HKCU\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppContainer\\Storage\\microsoft.microsoftedge_8wekyb3d8bbwe\\MicrosoftEdge\\ExperimentalFeatures";  String name="AllowLocalhostLoopback";  int value=1;  int data=ShellUtilities.getRegistryDWORD(path,name);  if (data != -1) {    if ((data & value) != value) {      return ShellUtilities.setRegistryDWORD(path,name,data | value);    }    return true;  }  return false;}  }
class C{  public Matrix dct2(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dct2(scale);  return new Matrix(dm.toArray());}  }
class C{  public Executor withInstrumenter(Instrumenter instrumenter){  this.instrumenter=instrumenter;  return this;}  }
class C{  static public String cdata(final String s){  if (s == null)   throw new IllegalArgumentException();  return HTMLUtility.escapeForXHTML(s);}  }
class C{  MysqlSavepoint(ExceptionInterceptor exceptionInterceptor) throws SQLException {  this(getUniqueId(),exceptionInterceptor);}  }
class C{  public void addConference(Conference conference){  addProperty(conference);}  }
class C{  static boolean isInstanceOfSingleCondnEvaluator(Object o){  return o instanceof RangeJunction.SingleCondnEvaluator;}  }
class C{  private void growByOne(){  int adding=0;  if (capacityIncrement <= 0) {    if ((adding=elementData.length) == 0) {      adding=1;    }  } else {    adding=capacityIncrement;  }  E[] newData=newElementArray(elementData.length + adding);  System.arraycopy(elementData,0,newData,0,elementCount);  elementData=newData;}  }
class C{  public SAML2AuthnRequestExceptionBean(ApplicationExceptionBean sup,ReasonEnum reason){  super(sup);  setReason(reason);}  }
class C{  public int readNext(int offset,boolean ignoreComments) throws CoreException {  setOffset(offset);  return readNext(ignoreComments);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double hasLowerNeighbour=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          hasLowerNeighbour=1;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 < z && z2 != noData) {              hasLowerNeighbour=noData;            }          }          output.setValue(row,col,hasLowerNeighbour);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ICUTransformFilter(TokenStream input,Transliterator transform){  super(input);  this.transform=transform;  if (transform.getFilter() == null && transform instanceof com.ibm.icu.text.RuleBasedTransliterator) {    final UnicodeSet sourceSet=transform.getSourceSet();    if (sourceSet != null && !sourceSet.isEmpty())     transform.setFilter(sourceSet);  }}  }
class C{  @Override void decode(final byte[] in,int inPos,final int inAvail,final Context context){  if (context.eof) {    return;  }  if (inAvail < 0) {    context.eof=true;  }  for (int i=0; i < inAvail; i++) {    final byte[] buffer=ensureBufferSize(decodeSize,context);    final byte b=in[inPos++];    if (b == pad) {      context.eof=true;      break;    } else {      if (b >= 0 && b < DECODE_TABLE.length) {        final int result=DECODE_TABLE[b];        if (result >= 0) {          context.modulus=(context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;          context.ibitWorkArea=(context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;          if (context.modulus == 0) {            buffer[context.pos++]=(byte)((context.ibitWorkArea >> 16) & MASK_8BITS);            buffer[context.pos++]=(byte)((context.ibitWorkArea >> 8) & MASK_8BITS);            buffer[context.pos++]=(byte)(context.ibitWorkArea & MASK_8BITS);          }        }      }    }  }  if (context.eof && context.modulus != 0) {    final byte[] buffer=ensureBufferSize(decodeSize,context);switch (context.modulus) {case 1:      break;case 2:    context.ibitWorkArea=context.ibitWorkArea >> 4;  buffer[context.pos++]=(byte)((context.ibitWorkArea) & MASK_8BITS);break;case 3:context.ibitWorkArea=context.ibitWorkArea >> 2;buffer[context.pos++]=(byte)((context.ibitWorkArea >> 8) & MASK_8BITS);buffer[context.pos++]=(byte)((context.ibitWorkArea) & MASK_8BITS);break;default :throw new IllegalStateException("Impossible modulus " + context.modulus);}}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Node insertBefore(Node newChild,Node refChild) throws DOMException {  if (null == refChild) {    appendChild(newChild);    return newChild;  }  if (newChild == refChild) {    return newChild;  }  Node node=m_firstChild;  Node prev=null;  boolean foundit=false;  while (null != node) {    if (newChild == node) {      if (null != prev)       ((ElemTemplateElement)prev).m_nextSibling=(ElemTemplateElement)node.getNextSibling(); else       m_firstChild=(ElemTemplateElement)node.getNextSibling();      node=node.getNextSibling();      continue;    }    if (refChild == node) {      if (null != prev) {        ((ElemTemplateElement)prev).m_nextSibling=(ElemTemplateElement)newChild;      } else {        m_firstChild=(ElemTemplateElement)newChild;      }      ((ElemTemplateElement)newChild).m_nextSibling=(ElemTemplateElement)refChild;      ((ElemTemplateElement)newChild).setParentElem(this);      prev=newChild;      node=node.getNextSibling();      foundit=true;      continue;    }    prev=node;    node=node.getNextSibling();  }  if (!foundit)   throw new DOMException(DOMException.NOT_FOUND_ERR,"refChild was not found in insertBefore method!"); else   return newChild;}  }
class C{  @org.junit.Test public void verifyGetEmptyResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  queryParams.put("user","tony");  String str=client.invokeAPI("/mockResponses","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,"");}  }
class C{  public static Direction randomEntry(List<Direction> L){  int dirIndex=randomInt(L.size() - 1);  return L.get(dirIndex);}  }
class C{  @Override public void onReady(CameraView cv){  if (cameras != null) {    open();  }}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null ? o2 == null : o1.equals(o2));}  }
class C{  public static void main(String[] args){  expand();}  }
class C{  private boolean uriInObject(URI uri,Object object){  if (NullColumnValueGetter.isNullURI(uri)) {    return false;  }  if (uri == null) {    return false;  }  if (object instanceof StringSet) {    StringSet set=(StringSet)object;    return (set.contains(uri.toString()));  }  if (object instanceof StringMap) {    StringMap map=(StringMap)object;    return (map.containsKey(uri.toString()));  }  if (object instanceof StringSetMap) {    StringSetMap map=(StringSetMap)object;    return (map.containsKey(uri.toString()));  }  return object.toString().equals(uri.toString());}  }
class C{  protected static void updateChildren(Collection<View> childViews,EventBean[] newData,EventBean[] oldData){  for (  View child : childViews) {    child.update(newData,oldData);  }}  }
class C{  public static CGPoint ccpProject(final CGPoint v1,final CGPoint v2){  return ccpMult(v2,ccpDot(v1,v2) / ccpDot(v2,v2));}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 78) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public OkPacket(Buffer buffer){  buffer.skipByte();  affectedRows=buffer.getLengthEncodedBinary();  insertId=buffer.getLengthEncodedBinary();  serverStatus=buffer.readShort();  warnings=buffer.readShort();}  }
class C{  protected Reader openReader(String uri){  InputStream is=null;  try {    URL urlObj=new URL(uri);    if (urlObj.getProtocol().equalsIgnoreCase("http") || urlObj.getProtocol().equalsIgnoreCase("https")) {      return _streamFactory.getUrl(uri).getReader();    } else {      try {        is=new URL(uri).openStream();      } catch (      java.net.MalformedURLException e) {        XRLog.exception("bad URL given: " + uri,e);      }catch (      java.io.FileNotFoundException e) {        XRLog.exception("item at URI " + uri + " not found");      }catch (      java.io.IOException e) {        XRLog.exception("IO problem for " + uri,e);      }    }  } catch (  MalformedURLException e2) {    XRLog.exception("bad URL given: " + uri,e2);  }  try {    return is == null ? null : new InputStreamReader(is,"UTF-8");  } catch (  UnsupportedEncodingException e) {    XRLog.exception("Failed to create stream reader",e);  }  return null;}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public void closeOnCompletion(){  checkClosed();}  }
class C{  public void align(final long alignByteNumber) throws IOException {  if (this.bitBufferCount > 0) {    this.writeBits(0,JBBPBitNumber.decode(8 - this.bitBufferCount));  }  if (alignByteNumber > 0) {    long padding=(alignByteNumber - (this.byteCounter % alignByteNumber)) % alignByteNumber;    while (padding > 0) {      this.out.write(0);      this.byteCounter++;      padding--;    }  }}  }
class C{  public VerboseTiming(){  super(Options.set,"Verbose Timing","Should we display detailed breakdown of where GC time is spent?",false);}  }
class C{  private ScServer createOrFindScServer(StorageCenterAPI api,String ssn,List<Initiator> initiators,List<ScServerHba> matchedHbas,boolean createIfNotFound){  ScServerOperatingSystem os=null;  Map<String,ScServer> serverLookup=new HashMap<>();  for (  Initiator init : initiators) {    if (os == null) {      os=findOsType(api,ssn,init.getHostOsType());    }    if (os == null) {      LOG.warn("Unable to find OS type for initiator {}, skipping...",init.getPort());      continue;    }    String iqnOrWwn=init.getPort();    if (init.getProtocol().equals(Protocol.FC)) {      iqnOrWwn=iqnOrWwn.replace(":","").toUpperCase();    }    ScServer individualServer=serverLookup.get(init.getHostName());    if (individualServer == null) {      individualServer=api.findServer(ssn,iqnOrWwn);      if (individualServer != null) {        serverLookup.put(init.getHostName(),individualServer);      }    }    if (individualServer == null && createIfNotFound) {      try {        individualServer=api.createServer(ssn,init.getHostName(),init.getProtocol().equals(Protocol.iSCSI),os.instanceId);      } catch (      StorageCenterAPIException e) {        LOG.warn(String.format("Error creating server: %s",e));        continue;      }      ScServerHba hba=api.addHbaToServer(individualServer.instanceId,iqnOrWwn,init.getProtocol().equals(Protocol.iSCSI));      if (hba != null && !matchedHbas.contains(hba)) {        matchedHbas.add(hba);      }    }    if (individualServer != null) {      serverLookup.put(init.getHostName(),individualServer);    }  }  if (serverLookup.size() != 1) {    LOG.warn("Looking for server returned {} servers.",serverLookup.size());  }  for (  ScServer scServer : serverLookup.values()) {    return scServer;  }  return null;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_TYPE_ACCESS_MODIFIER:    setDeclaredTypeAccessModifier((TypeAccessModifier)newValue);  return;case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_PROVIDED_BY_RUNTIME:setDeclaredProvidedByRuntime((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public LoginScreenLayout(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,499,261);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  setContentPane(contentPane);  contentPane.setLayout(new BorderLayout(-2,-2));  contentPane.add(getPanel_1(),BorderLayout.NORTH);  contentPane.add(getPanel_1_1(),BorderLayout.SOUTH);  contentPane.add(getPanelLeft(),BorderLayout.WEST);  contentPane.add(getPanelRight(),BorderLayout.EAST);  contentPane.add(getPanelCenter(),BorderLayout.CENTER);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void decodeJBIG2(final byte[] data) throws IOException, JBIG2Exception {  streamDecoder.decodeJBIG2(data);}  }
class C{  public static Gdb start() throws IOException {  return new Gdb();}  }
class C{  public ChannelChangeListener(String groupName,SoundGroup group){  this.group=group;  this.groupName=groupName;}  }
class C{  public void addMapping(final String key,final int index){  Check.notNull(key,"key");  final Integer value=new Integer(index);  if (mappings.containsValue(value)) {    for (final Iterator it=mappings.keySet().iterator(); it.hasNext(); ) {      final String currentKey=(String)it.next();      if (mappings.get(currentKey).equals(value)) {        if (currentKey.equals(key)) {          return;        }        final String messageFormat="the index [{0}] is already mapped to key [{1}]";        final String message=MessageFormat.format(messageFormat,Integer.toString(index),currentKey);        throw new IllegalArgumentException(message);      }    }  }  mappings.put(key,value);}  }
class C{  void addString(int c){  if (strpos == str.length) {    char newstr[]=new char[str.length * 2];    System.arraycopy(str,0,newstr,0,str.length);    str=newstr;  }  str[strpos++]=(char)c;}  }
class C{  public T caseParameterizedPropertyAccessExpression_IM(ParameterizedPropertyAccessExpression_IM object){  return null;}  }
class C{  public DBValidationException(ValidationException exception){  this.validationException=exception;}  }
class C{  public static float convertStrokeMiterlimit(Value v){  float miterlimit=v.getFloatValue();  return (miterlimit < 1.0f) ? 1.0f : miterlimit;}  }
class C{  public jMatrix uminus(){  jMatrix X=new jMatrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=-A[i][j];    }  }  return X;}  }
class C{  public void removeActionListener(ActionListener l){  eventDispatcher.removeListener(l);}  }
class C{  @Parameterized.Parameters(name="{index}: PaymentChannelClientTest({0})") public static Collection<PaymentChannelClient.VersionSelector> data(){  return Arrays.asList(PaymentChannelClient.VersionSelector.VERSION_1,PaymentChannelClient.VersionSelector.VERSION_2_ALLOW_1,PaymentChannelClient.VersionSelector.VERSION_2);}  }
class C{  public void start(Map<Class<?>,Object> beans){  log=(IgniteLogger)beans.get(IgniteLogger.class);  if (log == null) {    U.error(log,"Failed to find logger definition in application context. Stopping the router.");    return;  }  GridTcpRouterConfiguration tcpCfg=(GridTcpRouterConfiguration)beans.get(GridTcpRouterConfiguration.class);  if (tcpCfg == null)   U.warn(log,"TCP router startup skipped (configuration not found)."); else {    tcpRouter=new GridTcpRouterImpl(tcpCfg);    try {      tcpRouter.start();    } catch (    Exception e) {      U.error(log,"Failed to start TCP router on port " + tcpCfg.getPort() + ": "+ e.getMessage(),e);      tcpRouter=null;    }  }}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  if (log.isInfoEnabled()) {    log.info("|-SQL Data Access Service active...");  }}  }
class C{  private ResourceMethod interpretResourceMethod(final MethodResult methodResult,final ClassResult classResult){  final ResourceMethod resourceMethod=new ResourceMethod(methodResult.getHttpMethod());  updateMethodParameters(resourceMethod.getMethodParameters(),classResult.getClassFields());  updateMethodParameters(resourceMethod.getMethodParameters(),methodResult.getMethodParameters());  stringParameterResolver.replaceParametersTypes(resourceMethod.getMethodParameters());  if (methodResult.getRequestBodyType() != null) {    resourceMethod.setRequestBody(javaTypeAnalyzer.analyze(methodResult.getRequestBodyType()));  }  addDefaultResponses(methodResult);  methodResult.getResponses().stream().forEach(null);  addMediaTypes(methodResult,classResult,resourceMethod);  return resourceMethod;}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public OptionScanNode buildTreeFromWindowList(List<SwitchAccessWindowInfo> windowList,OptionScanNode contextMenuTree){  contextMenuTree=(contextMenuTree == null) ? new ClearFocusNode() : contextMenuTree;  if (windowList == null || windowList.size() == 0) {    return contextMenuTree;  }  List<OptionScanNode> treeNodes=new ArrayList<>();  for (  SwitchAccessWindowInfo window : windowList) {    SwitchAccessNodeCompat windowRoot=window.getRoot();    if (windowRoot != null) {      treeNodes.addAll(getNodeListFromNodeTree(windowRoot));      windowRoot.recycle();    }  }  return buildTreeFromNodeList(treeNodes,OPTION_SCAN_SELECTION_NODE,contextMenuTree);}  }
class C{  @Pure @CausesError({IncorrectPure4JImmutableCallException.class,PureMethodParameterNotImmutableException.class}) public static String testParam5Bad(Object in1){  Pure4J.immutable(in1,6);  return in1.toString();}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  protected void append(Node newNode) throws org.xml.sax.SAXException {  Node currentNode=m_currentNode;  if (null != currentNode) {    if (currentNode == m_root && m_nextSibling != null)     currentNode.insertBefore(newNode,m_nextSibling); else     currentNode.appendChild(newNode);  } else   if (null != m_docFrag) {    if (m_nextSibling != null)     m_docFrag.insertBefore(newNode,m_nextSibling); else     m_docFrag.appendChild(newNode);  } else {    boolean ok=true;    short type=newNode.getNodeType();    if (type == Node.TEXT_NODE) {      String data=newNode.getNodeValue();      if ((null != data) && (data.trim().length() > 0)) {        throw new org.xml.sax.SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANT_OUTPUT_TEXT_BEFORE_DOC,null));      }      ok=false;    } else     if (type == Node.ELEMENT_NODE) {      if (m_doc.getDocumentElement() != null) {        ok=false;        throw new org.xml.sax.SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANT_HAVE_MORE_THAN_ONE_ROOT,null));      }    }    if (ok) {      if (m_nextSibling != null)       m_doc.insertBefore(newNode,m_nextSibling); else       m_doc.appendChild(newNode);    }  }}  }
class C{  public static ContentProviderOperation newSetOperation(Uri uri,Account account,byte[] data){  ContentValues values=new ContentValues();  values.put(Columns.DATA,data);  return ContentProviderOperation.newInsert(uri).withValue(Columns.ACCOUNT_NAME,account.name).withValue(Columns.ACCOUNT_TYPE,account.type).withValues(values).build();}  }
class C{  private void loadPlayMusicExporter(){  mPlayMusicManager=PlayMusicManager.getInstance();  if (mPlayMusicManager == null) {    mPlayMusicManager=new PlayMusicManager(this);    try {      mPlayMusicManager.startUp();      mPlayMusicManager.setOfflineOnly(true);      mPlayMusicManager.setID3Enable(true);      mPlayMusicManager.setID3EnableArtwork(true);      mPlayMusicManager.setID3EnableFallback(true);      mPlayMusicManager.setID3v2Version(ID3v2Version.ID3v23);      mPlayMusicManager.setID3ArtworkFormat(Bitmap.CompressFormat.JPEG);      mPlayMusicManager.setID3ArtworkMaximumSize(512);    } catch (    Exception e) {      Logger.getInstance().logError("SetupPlayMusicExporter",e.toString());    }  }  mViewType=mNavigationDrawerFragment.getViewType();  loadList();  SelectedTrackList.getInstance().setupActionMode(this);}  }
class C{  void reportWarning(String msg,Element e){  messager.printMessage(Diagnostic.Kind.WARNING,msg,e);}  }
class C{  public void endDocument() throws SAXException {  flushPending();  m_saxHandler.endDocument();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static String wekaStaticWrapper(Sourcable classifier,String className) throws Exception {  StringBuffer result=new StringBuffer();  String staticClassifier=classifier.toSource(className);  result.append("// Generated with Weka " + Version.VERSION + "\n");  result.append("//\n");  result.append("// This code is public domain and comes with no warranty.\n");  result.append("//\n");  result.append("// Timestamp: " + new Date() + "\n");  result.append("\n");  result.append("package weka.classifiers;\n");  result.append("\n");  result.append("import weka.core.Attribute;\n");  result.append("import weka.core.Capabilities;\n");  result.append("import weka.core.Capabilities.Capability;\n");  result.append("import weka.core.Instance;\n");  result.append("import weka.core.Instances;\n");  result.append("import weka.core.RevisionUtils;\n");  result.append("import weka.classifiers.Classifier;\nimport weka.classifiers.AbstractClassifier;\n");  result.append("\n");  result.append("public class WekaWrapper\n");  result.append("  extends AbstractClassifier {\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Returns only the toString() method.\n");  result.append("   *\n");  result.append("   * @return a string describing the classifier\n");  result.append("   */\n");  result.append("  public String globalInfo() {\n");  result.append("    return toString();\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Returns the capabilities of this classifier.\n");  result.append("   *\n");  result.append("   * @return the capabilities\n");  result.append("   */\n");  result.append("  public Capabilities getCapabilities() {\n");  result.append(((Classifier)classifier).getCapabilities().toSource("result",4));  result.append("    return result;\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * only checks the data against its capabilities.\n");  result.append("   *\n");  result.append("   * @param i the training data\n");  result.append("   */\n");  result.append("  public void buildClassifier(Instances i) throws Exception {\n");  result.append("    // can classifier handle the data?\n");  result.append("    getCapabilities().testWithFail(i);\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Classifies the given instance.\n");  result.append("   *\n");  result.append("   * @param i the instance to classify\n");  result.append("   * @return the classification result\n");  result.append("   */\n");  result.append("  public double classifyInstance(Instance i) throws Exception {\n");  result.append("    Object[] s = new Object[i.numAttributes()];\n");  result.append("    \n");  result.append("    for (int j = 0; j < s.length; j++) {\n");  result.append("      if (!i.isMissing(j)) {\n");  result.append("        if (i.attribute(j).isNominal())\n");  result.append("          s[j] = new String(i.stringValue(j));\n");  result.append("        else if (i.attribute(j).isNumeric())\n");  result.append("          s[j] = new Double(i.value(j));\n");  result.append("      }\n");  result.append("    }\n");  result.append("    \n");  result.append("    // set class value to missing\n");  result.append("    s[i.classIndex()] = null;\n");  result.append("    \n");  result.append("    return " + className + ".classify(s);\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Returns the revision string.\n");  result.append("   * \n");  result.append("   * @return        the revision\n");  result.append("   */\n");  result.append("  public String getRevision() {\n");  result.append("    return RevisionUtils.extract(\"1.0\");\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Returns only the classnames and what classifier it is based on.\n");  result.append("   *\n");  result.append("   * @return a short description\n");  result.append("   */\n");  result.append("  public String toString() {\n");  result.append("    return \"Auto-generated classifier wrapper, based on " + classifier.getClass().getName() + " (generated with Weka "+ Version.VERSION+ ").\\n"+ "\" + this.getClass().getName() + \"/"+ className+ "\";\n");  result.append("  }\n");  result.append("\n");  result.append("  /**\n");  result.append("   * Runs the classfier from commandline.\n");  result.append("   *\n");  result.append("   * @param args the commandline arguments\n");  result.append("   */\n");  result.append("  public static void main(String args[]) {\n");  result.append("    runClassifier(new WekaWrapper(), args);\n");  result.append("  }\n");  result.append("}\n");  result.append("\n");  result.append(staticClassifier);  return result.toString();}  }
class C{  static public java.awt.geom.Rectangle2D.Double computeBounds(final Envelope outer,final Display2D display,final GeomGridField gridField){  Display2D.InnerDisplay2D innerDisplay=display.insideDisplay;  java.awt.geom.Rectangle2D.Double bounds=new java.awt.geom.Rectangle2D.Double(innerDisplay.xOffset,innerDisplay.yOffset,innerDisplay.width,innerDisplay.height);  AffineTransform transform=GeometryUtilities.worldToScreenTransform(outer,bounds);  if (isWithinBounds(outer,gridField)) {    Point2D.Double srcMinPoint=new Point2D.Double(gridField.MBR.getMinX(),gridField.MBR.getMaxY());    Point2D destMinPoint=transform.transform(srcMinPoint,null);    Point2D.Double srcMaxPoint=new Point2D.Double(gridField.MBR.getMaxX(),gridField.MBR.getMinY());    Point2D destMaxPoint=transform.transform(srcMaxPoint,null);    bounds.setRect(destMinPoint.getX(),destMinPoint.getY(),destMaxPoint.getX() - destMinPoint.getX(),destMaxPoint.getY() - destMinPoint.getY());  } else {    System.err.println("Warning: raster not in display");  }  return bounds;}  }
class C{  @Override public ServiceBuilderAmp service(Key<?> key,Class<?> api){  Objects.requireNonNull(api);  return new ServiceBuilderImpl(this,api,key);}  }
class C{  public int action(String fault,String action){  Integer current=get(fault);  if (current == null)   throw new IllegalArgumentException(fault);  boolean no=action.startsWith("no");  if (no)   action=action.substring(2);  Integer bit=getAction(action);  if (bit == null)   throw new IllegalArgumentException(action);  int old=current.intValue();  int mask=bit.intValue();  int n=(old & (~mask));  n=(no) ? n : (n | mask);  put(fault,new Integer(n));  return n;}  }
class C{  private void writeOldest(){  IAggregatedData<E> oldest=queue.poll();  E data=oldest.getData();  map.remove(getCacheHash(data,data.getTimeStamp().getTime()));  data.finalizeData();  elementCount.decrementAndGet();  passToStorageWriter(data);}  }
class C{  private Volume prepareVPlexVolume(List<Recommendation> vplexRecommendations,Project project,VirtualArray varray,VirtualPool vpool,URI storagePoolUri,URI storageSystemId,VirtualPoolCapabilityValuesWrapper capabilities,BlockConsistencyGroup consistencyGroup,VolumeCreate param,String volumeName,String size,List<VolumeDescriptor> descriptors,TaskList taskList,String task,Volume.PersonalityTypes personality,boolean isChangeVpool,Volume changeVpoolVolume){  Volume vplexVirtualVolume=null;  if (!isChangeVpool) {    List<URI> volumes=new ArrayList<URI>();    capabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,consistencyGroup.getId());    capabilities.put(VirtualPoolCapabilityValuesWrapper.PERSONALITY,personality.name());    capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,1);    VolumeCreate volumeCreateParam=new VolumeCreate();    volumeCreateParam.setConsistencyGroup(consistencyGroup.getId());    volumeCreateParam.setCount(1);    volumeCreateParam.setName(volumeName);    volumeCreateParam.setProject(project.getId());    volumeCreateParam.setSize(size);    volumeCreateParam.setVarray(varray.getId());    volumeCreateParam.setVpool(vpool.getId());    boolean createTask=Volume.PersonalityTypes.SOURCE.equals(personality);    List<VolumeDescriptor> vplexVolumeDescriptors=vplexBlockServiceApiImpl.createVPlexVolumeDescriptors(volumeCreateParam,project,varray,vpool,vplexRecommendations,task,capabilities,capabilities.getBlockConsistencyGroup(),taskList,volumes,createTask);    if ((createTask) && (param.getComputeResource() != null)) {      for (      VolumeDescriptor vplexVolumeDescriptor : vplexVolumeDescriptors) {        vplexVolumeDescriptor.setComputeResource(param.getComputeResource());      }    }    descriptors.addAll(vplexVolumeDescriptors);    vplexVirtualVolume=this.getVPlexVirtualVolume(volumes);  } else {    if (Volume.PersonalityTypes.SOURCE.equals(personality)) {      VolumeDescriptor changeVpoolDescriptor=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,changeVpoolVolume.getStorageController(),changeVpoolVolume.getId(),null,consistencyGroup.getId(),capabilities,changeVpoolVolume.getCapacity());      Map<String,Object> descParams=new HashMap<String,Object>();      descParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,changeVpoolVolume.getId());      descParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,vpool.getId());      descParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,changeVpoolVolume.getVirtualPool());      changeVpoolDescriptor.setParameters(descParams);      descriptors.add(changeVpoolDescriptor);      vplexVirtualVolume=changeVpoolVolume;    }  }  return vplexVirtualVolume;}  }
class C{  public FastItemAdapter<Item> add(int position,List<Item> items){  mItemAdapter.add(position,items);  return this;}  }
class C{  public boolean decodeXWapContentURI(int startIndex){  return decodeTextString(startIndex);}  }
class C{  private Shape[] createVerticalBlock(double x0,double width,double y0,double y1,boolean inverted){  Shape[] result=new Shape[6];  Point2D p00=new Point2D.Double(x0,y0);  Point2D p01=new Point2D.Double(x0 + width,y0);  Point2D p02=new Point2D.Double(p01.getX() + getXOffset(),p01.getY() - getYOffset());  Point2D p03=new Point2D.Double(p00.getX() + getXOffset(),p00.getY() - getYOffset());  Point2D p0=new Point2D.Double(x0,y1);  Point2D p1=new Point2D.Double(x0 + width,y1);  Point2D p2=new Point2D.Double(p1.getX() + getXOffset(),p1.getY() - getYOffset());  Point2D p3=new Point2D.Double(p0.getX() + getXOffset(),p0.getY() - getYOffset());  GeneralPath right=new GeneralPath();  right.moveTo((float)p1.getX(),(float)p1.getY());  right.lineTo((float)p01.getX(),(float)p01.getY());  right.lineTo((float)p02.getX(),(float)p02.getY());  right.lineTo((float)p2.getX(),(float)p2.getY());  right.closePath();  GeneralPath left=new GeneralPath();  left.moveTo((float)p0.getX(),(float)p0.getY());  left.lineTo((float)p00.getX(),(float)p00.getY());  left.lineTo((float)p03.getX(),(float)p03.getY());  left.lineTo((float)p3.getX(),(float)p3.getY());  left.closePath();  GeneralPath back=new GeneralPath();  back.moveTo((float)p2.getX(),(float)p2.getY());  back.lineTo((float)p02.getX(),(float)p02.getY());  back.lineTo((float)p03.getX(),(float)p03.getY());  back.lineTo((float)p3.getX(),(float)p3.getY());  back.closePath();  GeneralPath front=new GeneralPath();  front.moveTo((float)p0.getX(),(float)p0.getY());  front.lineTo((float)p1.getX(),(float)p1.getY());  front.lineTo((float)p01.getX(),(float)p01.getY());  front.lineTo((float)p00.getX(),(float)p00.getY());  front.closePath();  GeneralPath top=new GeneralPath();  top.moveTo((float)p0.getX(),(float)p0.getY());  top.lineTo((float)p1.getX(),(float)p1.getY());  top.lineTo((float)p2.getX(),(float)p2.getY());  top.lineTo((float)p3.getX(),(float)p3.getY());  top.closePath();  GeneralPath bottom=new GeneralPath();  bottom.moveTo((float)p00.getX(),(float)p00.getY());  bottom.lineTo((float)p01.getX(),(float)p01.getY());  bottom.lineTo((float)p02.getX(),(float)p02.getY());  bottom.lineTo((float)p03.getX(),(float)p03.getY());  bottom.closePath();  result[0]=bottom;  result[1]=back;  result[2]=left;  result[3]=right;  result[4]=top;  result[5]=front;  if (inverted) {    result[0]=top;    result[4]=bottom;  }  return result;}  }
class C{  public Builder add(String name,String value){  checkNameAndValue(name,value);  return addLenient(name,value);}  }
class C{  public JsonHierarchicalStreamDriver(){  super();}  }
class C{  public PayloadFilter(FilterType filterType){  payload=new HashMap<>();  payload.put("filter",filterData);  filterData.put("filterType",filterType.getValue());  filterData.put("filters",filters);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.SYMBOL_TABLE__ENTRIES:    return entries != null && !entries.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private int importTables(Referenceable databaseReferenceable,String databaseName,final boolean failOnError) throws Exception {  int tablesImported=0;  List<String> hiveTables=hiveClient.getAllTables(databaseName);  LOG.info("Importing tables {} for db {}",hiveTables.toString(),databaseName);  for (  String tableName : hiveTables) {    int imported=importTable(databaseReferenceable,databaseName,tableName,failOnError);    tablesImported+=imported;  }  if (tablesImported == hiveTables.size()) {    LOG.info("Successfully imported all {} tables from {} ",tablesImported,databaseName);  } else {    LOG.error("Able to import {} tables out of {} tables from {}. Please check logs for import errors",tablesImported,hiveTables.size(),databaseName);  }  return tablesImported;}  }
class C{  public static void updatePortAssociations(Network network,List<StoragePort> ports,DbClient dbClient){  Set<String> varraySet=network.getAssignedVirtualArrays() == null ? null : new HashSet<String>(network.getAssignedVirtualArrays());  for (  StoragePort port : ports) {    if (!network.getId().equals(port.getNetwork())) {      port.setNetwork(network.getId());    }    port.replaceConnectedVirtualArray(varraySet);    _log.info("Setting the connected virtual arrays for added port {} to {}",port.getPortNetworkId(),varraySet);  }  dbClient.updateAndReindexObject(ports);}  }
class C{  public void forceSetActivationLevels(final double value){  for (  Neuron n : getNeuronList()) {    n.forceSetActivation(value);  }}  }
class C{  public void clear(){  modCount++;  data.clear();}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public static String selectAgreement(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCart cart=getCartObject(request);  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);  String agreementId=request.getParameter("agreementId");  Map<String,Object> result=cartHelper.selectAgreement(agreementId);  if (ServiceUtil.isError(result)) {    request.setAttribute("_ERROR_MESSAGE_",ServiceUtil.getErrorMessage(result));    return "error";  }  return "success";}  }
class C{  public static boolean checkProtectionChanged(VirtualPool from,BlockVirtualPoolProtectionUpdateParam to){  if (to == null) {    _log.info("No virtual pool protection changes have been made");    return false;  }  if (to.getContinuousCopies() != null) {    if (to.getContinuousCopies().getVpool() != null && from.getMirrorVirtualPool() != null && !from.getMirrorVirtualPool().equals(String.valueOf(to.getContinuousCopies().getVpool()))) {      _log.info("Protection mirror virtual pool is being updated on virtual pool {}",from.getId());      return true;    }  }  if (to.getRemoteCopies() != null) {    if ((null != to.getRemoteCopies().getAdd() && !to.getRemoteCopies().getAdd().isEmpty()) || (null != to.getRemoteCopies().getRemove() && !to.getRemoteCopies().getRemove().isEmpty())) {      _log.info("SRDF Protection cannot be added to a vpool with provisioned volumes ",from.getId());      return true;    }  }  if (to.getRecoverPoint() != null) {    if (to.getRecoverPoint().getAdd().isEmpty() && to.getRecoverPoint().getRemove().isEmpty() && to.getRecoverPoint().getSourcePolicy() == null) {      if (VirtualPool.vPoolSpecifiesProtection(from)) {        _log.info("RP protection is being removed from virtual pool {}",from.getId());        return true;      }    }    if (to.getRecoverPoint().getSourcePolicy() != null && to.getRecoverPoint().getSourcePolicy().getJournalSize() != null) {      if (!to.getRecoverPoint().getSourcePolicy().getJournalSize().equals(from.getJournalSize())) {        _log.info("The source policy journal size is being updated on virtual pool {}",from.getId());        return true;      }    }    if (to.getRecoverPoint().getSourcePolicy() != null && to.getRecoverPoint().getSourcePolicy().getJournalSize() == null) {      if (from.getJournalSize() != null && !from.getJournalSize().equals(NullColumnValueGetter.getNullStr())) {        _log.info("The source policy is being removed from virtual pool {}",from.getId());        return true;      }    }    if (to.getRecoverPoint().getAdd() != null && !to.getRecoverPoint().getAdd().isEmpty()) {      _log.info("Adding/updating RP protection copies to virtual pool {}",from.getId());      return true;    }    if (to.getRecoverPoint().getRemove() != null && !to.getRecoverPoint().getRemove().isEmpty()) {      _log.info("Removing RP protection copies from virtual pool {}",from.getId());      return true;    }  }  _log.info("No protection changes");  return false;}  }
class C{  private void lexError(String key,Object... args){  token=ERROR;}  }
class C{  public boolean startsWith(java.lang.String prefix){  return false;}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public String[] fields(){  return this.fields;}  }
class C{  @Override public String toString(){  return new String(buffer);}  }
class C{  public boolean containsKey(Object key){  return getEntry(key) != null;}  }
class C{  public BloomVisualPanel1(){  initComponents();}  }
class C{  public File forcedGlossary(){  return forcedGlossary;}  }
class C{  @DSComment("Package priviledge") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.412 -0500",hash_original_method="04633BF5293F80973E1AA355DB2C35EF",hash_generated_method="04633BF5293F80973E1AA355DB2C35EF") void initState(){  mIndex=-1;  mWho=null;  mAdded=false;  mRemoving=false;  mResumed=false;  mFromLayout=false;  mInLayout=false;  mRestored=false;  mBackStackNesting=0;  mFragmentManager=null;  mActivity=null;  mFragmentId=0;  mContainerId=0;  mTag=null;  mHidden=false;  mDetached=false;  mRetaining=false;  mLoaderManager=null;  mLoadersStarted=false;  mCheckedForLoaderManager=false;}  }
class C{  public String toString(){  java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("UnixNumericUserPrincipal.name","sun.security.util.AuthResources"));  Object[] source={name};  return form.format(source);}  }
class C{  public applet addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public MeasureTool(final WorldWindow wwd,RenderableLayer applicationLayer){  if (wwd == null) {    String msg=Logging.getMessage("nullValue.WorldWindow");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.wwd=wwd;  this.applicationLayer=applicationLayer;  this.layer=createCustomRenderableLayer();  this.shapeLayer=createCustomRenderableLayer();  this.controlPointsLayer=createCustomRenderableLayer();  this.shapeLayer.setPickEnabled(false);  this.layer.setName("Measure Tool");  this.layer.addRenderable(this.shapeLayer);  this.layer.addRenderable(this.controlPointsLayer);  this.controlPointsLayer.setEnabled(this.showControlPoints);  if (this.applicationLayer != null)   this.applicationLayer.addRenderable(this.layer); else   this.wwd.getModel().getLayers().add(this.layer);  this.controlPointsAttributes=new AnnotationAttributes();  this.controlPointsAttributes.setFrameShape(AVKey.SHAPE_RECTANGLE);  this.controlPointsAttributes.setLeader(AVKey.SHAPE_NONE);  this.controlPointsAttributes.setAdjustWidthToText(AVKey.SIZE_FIXED);  this.controlPointsAttributes.setSize(new Dimension(8,8));  this.controlPointsAttributes.setDrawOffset(new Point(0,-4));  this.controlPointsAttributes.setInsets(new Insets(0,0,0,0));  this.controlPointsAttributes.setBorderWidth(0);  this.controlPointsAttributes.setCornerRadius(0);  this.controlPointsAttributes.setBackgroundColor(Color.BLUE);  this.controlPointsAttributes.setTextColor(Color.GREEN);  this.controlPointsAttributes.setHighlightScale(1.2);  this.controlPointsAttributes.setDistanceMaxScale(1);  this.controlPointsAttributes.setDistanceMinScale(1);  this.controlPointsAttributes.setDistanceMinOpacity(1);  this.controlPointWithLeaderAttributes=new AnnotationAttributes();  this.controlPointWithLeaderAttributes.setDefaults(this.controlPointsAttributes);  this.controlPointWithLeaderAttributes.setFrameShape(AVKey.SHAPE_ELLIPSE);  this.controlPointWithLeaderAttributes.setSize(new Dimension(10,10));  this.controlPointWithLeaderAttributes.setDrawOffset(new Point(0,-5));  this.controlPointWithLeaderAttributes.setBackgroundColor(Color.LIGHT_GRAY);  this.leaderAttributes=new BasicShapeAttributes();  this.leaderAttributes.setOutlineMaterial(Material.WHITE);  this.leaderAttributes.setOutlineOpacity(0.7);  this.leaderAttributes.setOutlineWidth(3);  this.setInitialLabels();  this.annotationAttributes=new AnnotationAttributes();  this.annotationAttributes.setFrameShape(AVKey.SHAPE_NONE);  this.annotationAttributes.setInsets(new Insets(0,0,0,0));  this.annotationAttributes.setDrawOffset(new Point(0,10));  this.annotationAttributes.setTextAlign(AVKey.CENTER);  this.annotationAttributes.setEffect(AVKey.TEXT_EFFECT_OUTLINE);  this.annotationAttributes.setFont(Font.decode("Arial-Bold-14"));  this.annotationAttributes.setTextColor(Color.WHITE);  this.annotationAttributes.setBackgroundColor(Color.BLACK);  this.annotationAttributes.setSize(new Dimension(220,0));  this.annotation=new ScreenAnnotation("",new Point(0,0),this.annotationAttributes);  this.annotation.getAttributes().setVisible(false);  this.annotation.getAttributes().setDrawOffset(null);  this.shapeLayer.addRenderable(this.annotation);}  }
class C{  private void advance(){  try {    if (tok == null)     tok=source.token();  } catch (  LexerException e) {    throw new IllegalStateException(e);  }catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  @Override public final BufferedImage JPEGToRGBImage(final byte[] data,final int w,final int h,final int pX,final int pY){  return nonRGBJPEGToRGBImage(data,w,h,pX,pY);}  }
class C{  public static Object findValueOfType(Collection<?> collection,Class<?>[] types){  if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {    return null;  }  for (  Class<?> type : types) {    Object value=findValueOfType(collection,type);    if (value != null) {      return value;    }  }  return null;}  }
class C{  public int delete(){  log.info("");  StringBuffer sql=new StringBuffer("DELETE FROM AD_Preference WHERE ");  sql.append("AD_Client_ID=").append(cbClient.isChecked() ? m_AD_Client_ID : 0);  sql.append(" AND AD_Org_ID=").append(cbOrg.isChecked() ? m_AD_Org_ID : 0);  if (cbUser.isChecked())   sql.append(" AND AD_User_ID=").append(m_AD_User_ID); else   sql.append(" AND AD_User_ID IS NULL");  if (cbWindow.isChecked())   sql.append(" AND AD_Window_ID=").append(m_AD_Window_ID); else   sql.append(" AND AD_Window_ID IS NULL");  sql.append(" AND Attribute='").append(m_Attribute).append("'");  log.fine(sql.toString());  int no=DB.executeUpdate(sql.toString(),null);  if (no > 0)   Env.setContext(m_ctx,getContextKey(),(String)null);  return no;}  }
class C{  public boolean isCurrentLetter(){  if (!isValidIndex())   return false;  return lcText[pos] >= 'a' && lcText[pos] <= 'z';}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public void debug(String message){  if (ToastBootstrap.debug_logging)   log(message,DEBUG);}  }
class C{  protected boolean tryBridgeMethod(MethodNode target,Expression receiver,boolean implicitThis,TupleExpression args){  ClassNode lookupClassNode;  if (target.isProtected()) {    lookupClassNode=controller.getClassNode();    while (lookupClassNode != null && !lookupClassNode.isDerivedFrom(target.getDeclaringClass())) {      lookupClassNode=lookupClassNode.getOuterClass();    }    if (lookupClassNode == null) {      return false;    }  } else {    lookupClassNode=target.getDeclaringClass().redirect();  }  Map<MethodNode,MethodNode> bridges=lookupClassNode.getNodeMetaData(PRIVATE_BRIDGE_METHODS);  MethodNode bridge=bridges == null ? null : bridges.get(target);  if (bridge != null) {    Expression fixedReceiver=receiver;    if (implicitThis && !controller.isInClosure()) {      fixedReceiver=new PropertyExpression(new ClassExpression(lookupClassNode),"this");    }    ArgumentListExpression newArgs=new ArgumentListExpression(target.isStatic() ? new ConstantExpression(null) : fixedReceiver);    for (    Expression expression : args.getExpressions()) {      newArgs.addExpression(expression);    }    return writeDirectMethodCall(bridge,implicitThis,fixedReceiver,newArgs);  }  return false;}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  public boolean copy(String whereClause,boolean dropFirst){  log.info(whereClause);  if (getConnection(false,true) == null)   return false;  boolean success=true;  int count=0;  ArrayList<String> list=new ArrayList<String>();  String sql="SELECT * FROM AD_Table";  if (whereClause != null && whereClause.length() > 0)   sql+=" WHERE " + whereClause;  sql+=" ORDER BY TableName";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    Connection conn=pstmt.getConnection();    DatabaseMetaData md=null;    if (conn != null)     md=conn.getMetaData(); else {      throw new DBException("No Connection");    }    rs=pstmt.executeQuery();    while (rs.next() && success) {      MTable table=new MTable(m_ctx,rs,null);      if (table.isView())       continue;      if (dropFirst) {        executeCommands(new String[]{"DROP TABLE " + table.getTableName()},m_conn,false,false);      }      if (createTable(table,md)) {        list.add(table.getTableName());        count++;      } else       success=false;    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    success=false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (!success)   return false;  enableConstraints(list);  databaseBuild();  log.info("#" + count);  try {    if (m_conn != null)     m_conn.close();  } catch (  SQLException e2) {    log.log(Level.SEVERE,"close connection",e2);  }  m_conn=null;  return success;}  }
class C{  private void nonblockingCreateSavePointData(){  try {    SavePointTask savePointTask=new SavePointTask(this);    savePointTask.execute();  } catch (  Exception e) {    Log.e(TAG,"Could not schedule SavePointTask. Perhaps a lot of swiping is taking place?");  }}  }
class C{  @Override protected void handleSuccess(final StepBreakpointSetReply reply){  final BreakpointManager manager=getDebugger().getBreakpointManager();  final Set<BreakpointAddress> addressesToActivate=new HashSet<BreakpointAddress>();  final Set<BreakpointAddress> addressesToRemove=new HashSet<BreakpointAddress>();  for (  final Pair<RelocatedAddress,Integer> resultPair : reply.getAddresses()) {    final RelocatedAddress address=resultPair.first();    if (resultPair.second() == DebuggerErrorCodes.SUCCESS) {      addressesToActivate.add(DebuggerHelpers.getBreakpointAddress(getDebugger(),address));    } else {      addressesToRemove.add(DebuggerHelpers.getBreakpointAddress(getDebugger(),address));    }  }  manager.setBreakpointStatus(addressesToActivate,BreakpointType.STEP,BreakpointStatus.BREAKPOINT_ACTIVE);  manager.removeBreakpoints(BreakpointType.STEP,addressesToRemove);}  }
class C{  public void increment(){  counter.getAndIncrement();}  }
class C{  public void run(){  if (!isOnline()) {    status=ERROR;    thr=new IOException("Base is offline");    a=null;    return;  }  byte reply=0;  Connection c=null;  try {    c=new Connection(to,group,AGENT);    c.oos.writeObject(to.name);    c.oos.flush();    reply=c.ois.readByte();    Logger.debug(getClass().getName(),"recipient found: " + reply);    if (reply == NOT_OK)     throw (new ConnectException("Node not found at " + to));    c.oos.writeObject(a.getJob());    c.oos.flush();    reply=c.ois.readByte();    Logger.debug(getClass().getName(),"return status: " + reply);    if (reply == GET_JAR)     sendJAR(c);    c.oos.writeObject(a);    c.oos.writeObject(new Address(null,port,name));    c.oos.flush();    reply=c.ois.readByte();  } catch (  Throwable e) {    if (e instanceof ConnectException)     Logger.debug(getClass().getName(),"Agent to " + to + " not delivered. Destination unreachable."); else     Logger.error(getClass().getName(),"Agent to " + to + " not delivered.",e);    thr=e;    status=ERROR;  }  try {    if (c != null)     c.close();  } catch (  Throwable e) {    Logger.error(getClass().getName(),"Exception when closing a connection for " + to,e);    thr=e;    status=ERROR;  }  if (reply != OK)   status=ERROR;  if (status != ERROR) {    status=DONE;    if (destroy)     destroyAgent(a.getName());  }  a=null;  to=null;}  }
class C{  public void search(String objectType,String query,DefaultListModel results,ActionListener callback) throws IOException {  Hashtable params=new Hashtable();  params.put("q",query);  params.put("type",objectType);  getFaceBookObjectItems("search","",results,params,callback);}  }
class C{  public void configureTable(JTable eventTable){  eventTable.getTableHeader().setReorderingAllowed(true);  eventTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  for (int i=0; i < eventTable.getColumnCount(); i++) {    int width=getPreferredWidth(i);    eventTable.getColumnModel().getColumn(i).setPreferredWidth(width);  }  eventTable.sizeColumnsToFit(-1);}  }
class C{  private void validateNfsAceSyntax(List<NfsACE> nfsAces){  for (  NfsACE ace : nfsAces) {    if (ace.getPermissionType() != null && !ace.getPermissionType().isEmpty()) {      if (!isValidEnum(ace.getPermissionType(),NfsPermissionType.class)) {        throw APIException.badRequests.invalidPermissionType(ace.getPermissionType());      }    }    if (ace.getType() != null && !ace.getType().isEmpty()) {      if (!isValidEnum(ace.getType(),NfsUserType.class)) {        throw APIException.badRequests.invalidUserType(ace.getType());      }    }    for (    String permission : ace.getPermissionSet()) {      if (!isValidEnum(permission,NfsPermission.class)) {        throw APIException.badRequests.invalidNFSPermission(permission);      }    }    int index=ace.getUser().indexOf("\\");    if (index >= 0) {      if (ace.getDomain() != null && !ace.getDomain().isEmpty()) {        throw APIException.badRequests.multipleDomainsFound("update",ace.getDomain(),ace.getUser().substring(0,index));      } else {        String domainAndUser[]=ace.getUser().split("\\");        if (domainAndUser.length > 2) {          throw APIException.badRequests.multipleDomainsFound("update",domainAndUser[0],domainAndUser[1]);        }        if (domainAndUser.length == 2) {          ace.setDomain(domainAndUser[0]);          ace.setUser(domainAndUser[1]);        }      }    }  }}  }
class C{  public MatrixReader(File file) throws FileNotFoundException {  this(new FileReader(file),-1);}  }
class C{  public DrawingOfficer findById(Long id){  return drawingOfficerRepository.findOne(id);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Files(){}  }
class C{  public void arc(float a,float b,float c,float d,float start,float stop){  g.arc(a,b,c,d,start,stop);}  }
class C{  private Workflow loadWorkflow(Workflow workflow){  if (!isExistingWorkflow(workflow)) {    return workflow;  }  String zkWorkflowPath=getZKWorkflowPath(workflow);  return loadWorkflow(zkWorkflowPath);}  }
class C{  public static String initialValue(CSSName cssName){  return cssName.initialValue;}  }
class C{  private void serializeVersion1(final V val,final short version,final OutputStream out,final ByteArrayBuffer tmp) throws IOException {  final byte termCode=getTermCode(val);  out.write(termCode);switch (termCode) {case ITermIndexCodes.TERM_CODE_BND:    uc.encode(((BNode)val).getID(),out,tmp);  break;case ITermIndexCodes.TERM_CODE_URI:uc.encode(((URI)val).stringValue(),out,tmp);break;case ITermIndexCodes.TERM_CODE_LIT:uc.encode(((Literal)val).getLabel(),out,tmp);break;case ITermIndexCodes.TERM_CODE_LCL:uc.encode(((Literal)val).getLanguage(),out,tmp);uc.encode(((Literal)val).getLabel(),out,tmp);break;case ITermIndexCodes.TERM_CODE_DTL:uc.encode(((Literal)val).getDatatype().stringValue(),out,tmp);uc.encode(((Literal)val).getLabel(),out,tmp);break;default :throw new IOException(ERR_CODE + " : " + termCode);}}  }
class C{  public void removeTableListener(TableListener listnr){  m_listeners.remove(listnr);}  }
class C{  public TwoDPoint[] generate(int size){  TwoDPoint[] points=new TwoDPoint[size];  for (int i=0; i < size; i++) {    points[i]=new TwoDPoint(10 * i,yValue);  }  return points;}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple1<Window<T>>> window(final WindowSpecification<T> specification1){  return fromStream(Seq.super.window(specification1));}  }
class C{  public boolean isValidTemplate(){  return isValidTemplate(template);}  }
class C{  public INaviView createView(final String name,final String description){  final Date date=new Date();  final CProjectViewGenerator generator=new CProjectViewGenerator(m_provider,m_project);  final CView view=generator.generate(-1,name,description,ViewType.NonNative,GraphType.MIXED_GRAPH,date,date,0,0,new HashSet<CTag>(),new HashSet<CTag>(),false);  try {    view.load();  } catch (  CouldntLoadDataException|CPartialLoadException|LoadCancelledException e) {    CUtilityFunctions.logException(e);  }  addView(view);  return view;}  }
class C{  public void sendModeChange(int nEntity,int nEquip,int nMode){  Object[] data={new Integer(nEntity),new Integer(nEquip),new Integer(nMode)};  send(new Packet(Packet.COMMAND_ENTITY_MODECHANGE,data));}  }
class C{  @Override protected String createMenuItemText(int index,File item){  return FileUtils.createPartialFilename(item,m_MinNumParentDirs);}  }
class C{  private ResultPoint[] centerEdges(ResultPoint y,ResultPoint z,ResultPoint x,ResultPoint t){  float yi=y.getX();  float yj=y.getY();  float zi=z.getX();  float zj=z.getY();  float xi=x.getX();  float xj=x.getY();  float ti=t.getX();  float tj=t.getY();  if (yi < width / 2) {    return new ResultPoint[]{new ResultPoint(ti - CORR,tj + CORR),new ResultPoint(zi + CORR,zj + CORR),new ResultPoint(xi - CORR,xj - CORR),new ResultPoint(yi + CORR,yj - CORR)};  } else {    return new ResultPoint[]{new ResultPoint(ti + CORR,tj + CORR),new ResultPoint(zi + CORR,zj - CORR),new ResultPoint(xi - CORR,xj + CORR),new ResultPoint(yi - CORR,yj - CORR)};  }}  }
class C{  public OngoinSetupState(){}  }
class C{  public EaseIn(){}  }
class C{  public static boolean selfTest(){  byte[] testKey1={(byte)0x1c,(byte)0x58,(byte)0x7f,(byte)0x1c,(byte)0x13,(byte)0x92,(byte)0x4f,(byte)0xef};  int[] tv_p1={0x30553228,0x6d6f295a};  int[] tv_c1={0x55cb3774,0xd13ef201};  int[] tv_t1=new int[2];  String sTestKey2="Who is John Galt?";  byte[] testKey2=sTestKey2.getBytes();  int[] tv_p2={0xfedcba98,0x76543210};  int[] tv_c2={0xcc91732b,0x8022f684};  int[] tv_t2=new int[2];  BlowfishECB testbf1=new BlowfishECB(testKey1);  testbf1.encrypt(tv_p1,tv_t1);  if ((tv_t1[0] != tv_c1[0]) || (tv_t1[1] != tv_c1[1]))   return false;  testbf1.decrypt(tv_t1);  if ((tv_t1[0] != tv_p1[0]) || (tv_t1[1] != tv_p1[1]))   return false;  BlowfishECB testbf2=new BlowfishECB(testKey2);  testbf2.encrypt(tv_p2,tv_t2);  if ((tv_t2[0] != tv_c2[0]) || (tv_t2[1] != tv_c2[1]))   return false;  testbf2.decrypt(tv_t2);  if ((tv_t2[0] != tv_p2[0]) || (tv_t2[1] != tv_p2[1]))   return false;  return true;}  }
class C{  public static String formatDate(Date date){  String formatString="";  Calendar cal=Calendar.getInstance();  cal.setTime(date);  if (cal.isSet(Calendar.MINUTE))   formatString="yyyyMMdd'T'hhmmss"; else   formatString="yyyyMMdd";  SimpleDateFormat formatter=new SimpleDateFormat(formatString);  return formatter.format(date);}  }
class C{  private boolean sendChatMessage(String message,String serverChatId){  boolean sent=true;  if (!TextUtils.isEmpty(message)) {    if (mBoundToChatService) {      final String sentAt=mFormatter.format(new Date());      mChatService.sendMessageToUser(myId,mWithUserId,mWallId,mIsWallIdSent,serverChatId,message,sentAt);      MixpanelAnalytics.getInstance().onChatMessageSent();      mIsWallIdSent=true;    } else {      sent=false;    }  }  return sent;}  }
class C{  public JSONObject optJSONObject(String key){  Object o=opt(key);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public ObdItemTableModel(){}  }
class C{  public AsymmetricCipherKeyPair generateKeyPair(){  NTRUSigningPublicKeyParameters pub=null;  ExecutorService executor=Executors.newCachedThreadPool();  List<Future<NTRUSigningPrivateKeyParameters.Basis>> bases=new ArrayList<Future<NTRUSigningPrivateKeyParameters.Basis>>();  for (int k=params.B; k >= 0; k--) {    bases.add(executor.submit(new BasisGenerationTask()));  }  executor.shutdown();  List<NTRUSigningPrivateKeyParameters.Basis> basises=new ArrayList<NTRUSigningPrivateKeyParameters.Basis>();  for (int k=params.B; k >= 0; k--) {    Future<NTRUSigningPrivateKeyParameters.Basis> basis=bases.get(k);    try {      basises.add(basis.get());      if (k == params.B) {        pub=new NTRUSigningPublicKeyParameters(basis.get().h,params.getSigningParameters());      }    } catch (    Exception e) {      throw new IllegalStateException(e);    }  }  NTRUSigningPrivateKeyParameters priv=new NTRUSigningPrivateKeyParameters(basises,pub);  AsymmetricCipherKeyPair kp=new AsymmetricCipherKeyPair(pub,priv);  return kp;}  }
class C{  public void startDefaultCoreServicesSynchronously() throws Throwable {  if (findService(ServiceHostManagementService.SELF_LINK) != null) {    throw new IllegalStateException("Already started");  }  addPrivilegedService(this.managementService.getClass());  addPrivilegedService(OperationIndexService.class);  addPrivilegedService(LuceneBlobIndexService.class);  addPrivilegedService(BasicAuthenticationService.class);  AuthorizationContext ctx=OperationContext.getAuthorizationContext();  OperationContext.setAuthorizationContext(getSystemAuthorizationContext());  if (this.authorizationService != null) {    addPrivilegedService(this.authorizationService.getClass());    startCoreServicesSynchronously(this.authorizationService);  }  List<URI> peers=getInitialPeerHosts();  startDefaultReplicationAndNodeGroupServices();  if (this.documentIndexService != null) {    addPrivilegedService(this.documentIndexService.getClass());    if (this.documentIndexService instanceof LuceneDocumentIndexService) {      Service[] queryServiceArray=new Service[]{this.documentIndexService,new LuceneBlobIndexService(),new ServiceContextIndexService(),new QueryTaskFactoryService(),new LocalQueryTaskFactoryService(),TaskFactoryService.create(GraphQueryTaskService.class),TaskFactoryService.create(SynchronizationTaskService.class)};      startCoreServicesSynchronously(queryServiceArray);    }  }  List<Service> coreServices=new ArrayList<>();  coreServices.add(this.managementService);  coreServices.add(new ProcessFactoryService());  coreServices.add(new ODataQueryService());  coreServices.add(AuthCredentialsService.createFactory());  Service userGroupFactory=UserGroupService.createFactory();  addPrivilegedService(userGroupFactory.getClass());  addPrivilegedService(UserGroupService.class);  coreServices.add(userGroupFactory);  addPrivilegedService(ResourceGroupService.class);  coreServices.add(ResourceGroupService.createFactory());  Service roleFactory=RoleService.createFactory();  addPrivilegedService(RoleService.class);  addPrivilegedService(roleFactory.getClass());  coreServices.add(roleFactory);  addPrivilegedService(UserService.class);  coreServices.add(UserService.createFactory());  coreServices.add(TenantService.createFactory());  coreServices.add(new SystemUserService());  coreServices.add(new GuestUserService());  coreServices.add(new BasicAuthenticationService());  Service transactionFactoryService=new TransactionFactoryService();  coreServices.add(transactionFactoryService);  Service[] coreServiceArray=new Service[coreServices.size()];  coreServices.toArray(coreServiceArray);  startCoreServicesSynchronously(coreServiceArray);  setTransactionService(transactionFactoryService);  startService(Operation.createPost(UriUtils.buildUri(this,ServiceUriPaths.PROCESS_LOG)),new ServiceHostLogService(ServiceHostLogService.getDefaultProcessLogName()));  startService(Operation.createPost(UriUtils.buildUri(this,ServiceUriPaths.GO_PROCESS_LOG)),new ServiceHostLogService(ServiceHostLogService.getDefaultGoDcpProcessLogName()));  startService(Operation.createPost(UriUtils.buildUri(this,ServiceUriPaths.SYSTEM_LOG)),new ServiceHostLogService(ServiceHostLogService.DEFAULT_SYSTEM_LOG_NAME));  Service webSocketService=new WebSocketService(null,null);  webSocketService.setHost(this);  startUiFileContentServices(webSocketService);  OperationContext.setAuthorizationContext(ctx);  schedule(null,this.state.maintenanceIntervalMicros,TimeUnit.MICROSECONDS);}  }
class C{  public FixedTweetTimeline build(){  return new FixedTweetTimeline(tweetUi,tweets);}  }
class C{  public static boolean adjustToTakebacks(Game game,Style12Message message,Connector connector){  boolean result=false;  if (game.isInState(Game.EXAMINING_STATE) || game.isInState(Game.OBSERVING_EXAMINED_STATE) || game.isInState(Game.SETUP_STATE)) {    return false;  }  int currentHalfMove=(message.fullMoveNumber - 1) * 2 + (message.isWhitesMoveAfterMoveIsMade ? 0 : 1);  if (LOG.isDebugEnabled()) {    LOG.debug("adjustToTakebacks calculatedHalfMove " + currentHalfMove + " 12FulLMoveNumber "+ message.fullMoveNumber+ " 12isWhitesMoveAfter "+ message.isWhitesMoveAfterMoveIsMade+ " gameHalfMove "+ game.getHalfMoveCount());  }  if (currentHalfMove != game.getHalfMoveCount() + 1) {    if (game.getHalfMoveCount() < currentHalfMove) {      if (LOG.isDebugEnabled()) {        LOG.debug("Didnt have all the moves needed for rollback. Resetting game and sending moves request.");      }      resetGame(game,message);      connector.sendMessage("moves " + message.gameId,true,ChatType.MOVES);      result=true;    } else {      while (game.getHalfMoveCount() > currentHalfMove) {        if (game.getLastMove() != null) {          if (LOG.isDebugEnabled()) {            LOG.debug("Rolled back a move.");          }          game.rollback();        } else {          game.removeHeader(PgnHeader.ECO);          game.removeHeader(PgnHeader.Opening);          resetGame(game,message);          connector.sendMessage("moves " + message.gameId,true,ChatType.MOVES);          result=false;          break;        }      }      if (game.isInState(Game.OBSERVING_EXAMINED_STATE) && game.getMoveList().getSize() == 0) {        game.clear();        updateNonPositionFields(game,message);        updatePosition(game,message);        game.removeHeader(PgnHeader.ECO);        game.removeHeader(PgnHeader.Opening);      }      result=true;    }    game.setHeader(PgnHeader.WhiteRemainingMillis,String.valueOf(message.whiteRemainingTimeMillis));    game.setHeader(PgnHeader.BlackRemainingMillis,String.valueOf(message.blackRemainingTimeMillis));  }  if (message.isClockTicking) {    game.addState(Game.IS_CLOCK_TICKING_STATE);  } else {    game.clearState(Game.IS_CLOCK_TICKING_STATE);  }  return result;}  }
class C{  private int navigateWeb(int action,CursorGranularity granularity){  final int movementType;  final String htmlElementType;switch (action) {case AccessibilityNodeInfoCompat.ACTION_NEXT_AT_MOVEMENT_GRANULARITY:    movementType=WebInterfaceUtils.DIRECTION_FORWARD;  break;case AccessibilityNodeInfoCompat.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:movementType=WebInterfaceUtils.DIRECTION_BACKWARD;break;default :return NOT_SUPPORTED;}switch (granularity) {case WEB_SECTION:htmlElementType=WebInterfaceUtils.HTML_ELEMENT_MOVE_BY_SECTION;break;case WEB_LIST:htmlElementType=WebInterfaceUtils.HTML_ELEMENT_MOVE_BY_LIST;break;case WEB_CONTROL:htmlElementType=WebInterfaceUtils.HTML_ELEMENT_MOVE_BY_CONTROL;break;default :return NOT_SUPPORTED;}if (!WebInterfaceUtils.performNavigationToHtmlElementAction(mLockedNode,movementType,htmlElementType)) {return HIT_EDGE;}return SUCCESS;}  }
class C{  private String c(String str){  return str + count;}  }
class C{  protected void flush(final boolean eos) throws IOException {  int chksum;  byte[] header;  header=buildOggPageHeader((eos ? 4 : 0),granulepos,streamSerialNumber,pageCount++,packetCount,headerBuffer);  chksum=OggCrc.checksum(0,header,0,header.length);  chksum=OggCrc.checksum(chksum,dataBuffer,0,dataBufferPtr);  writeInt(header,22,chksum);  this.write(header);  this.write(dataBuffer,0,dataBufferPtr);  dataBufferPtr=0;  headerBufferPtr=0;  packetCount=0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object p=stack.pop();  if (p instanceof sage.vfs.MediaNode)   p=((sage.vfs.MediaNode)p).getDataObject();  return Boolean.valueOf(p instanceof Playlist && (Wizard.getInstance().getPlaylistForID(((Playlist)p).getID()) != null || (stack.getUIMgr() != null && stack.getUIMgr().getVideoFrame().getNowPlayingList() == p)));}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  private void postShowImpl(Form f){  postShow(f);  analyticsCallback(f.getName(),getPreviousFormName(f));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPrintFormat[ID=").append(get_ID()).append(",Name=").append(getName()).append(",Language=").append(getLanguage()).append(",Items=").append(getItemCount()).append("]");  return sb.toString();}  }
class C{  public String toString(){  return "RGBA(" + red + ","+ green+ ","+ blue+ ","+ alpha+ ")";}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public boolean contains(int point){  return start <= point && end >= point;}  }
class C{  public static List<ErrorLogger.ErrorObject> validatePKLAndAssetMap(PayloadRecord assetMapPayload,List<PayloadRecord> pklPayloads) throws IOException {  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  List<PayloadRecord> packingListPayloadRecords=Collections.unmodifiableList(pklPayloads);  if (assetMapPayload.getPayloadAssetType() != PayloadRecord.PayloadAssetType.AssetMap) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_AM_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("Payload asset type is %s, expected asset type %s",assetMapPayload.getPayloadAssetType(),PayloadRecord.PayloadAssetType.AssetMap.toString()));  }  ResourceByteRangeProvider assetMapByteRangeProvider=new ByteArrayByteRangeProvider(assetMapPayload.getPayload());  AssetMap assetMapObjectModel=null;  try {    assetMapObjectModel=new AssetMap(assetMapByteRangeProvider);    imfErrorLogger.addAllErrors(assetMapObjectModel.getErrors());    if (assetMapObjectModel.getPackingListAssets().size() == 0) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_AM_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("Asset map should reference atleast one PackingList, %d " + "references found",assetMapObjectModel.getPackingListAssets().size()));    }  } catch (  IMFException e) {    imfErrorLogger.addAllErrors(e.getErrors());  }  List<ResourceByteRangeProvider> packingLists=new ArrayList<>();  for (  PayloadRecord payloadRecord : packingListPayloadRecords) {    if (payloadRecord.getPayloadAssetType() != PayloadRecord.PayloadAssetType.PackingList) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_MASTER_PACKAGE_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("Payload asset type is %s, expected asset type %s",assetMapPayload.getPayloadAssetType(),PayloadRecord.PayloadAssetType.PackingList.toString()));    } else {      packingLists.add(new ByteArrayByteRangeProvider(payloadRecord.getPayload()));    }  }  if (packingLists.size() == 0) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_MASTER_PACKAGE_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("Atleast one PackingList is expected, %d were detected",packingLists.size()));  }  if (imfErrorLogger.hasFatalErrors()) {    return imfErrorLogger.getErrors();  }  List<PackingList> packingListObjectModels=new ArrayList<>();  for (  ResourceByteRangeProvider resourceByteRangeProvider : packingLists) {    try {      PackingList packingList=new PackingList(resourceByteRangeProvider);      packingListObjectModels.add(packingList);      imfErrorLogger.addAllErrors(packingList.getErrors());    } catch (    IMFException e) {      imfErrorLogger.addAllErrors(e.getErrors());      return imfErrorLogger.getErrors();    }  }  List<UUID> assetUUIDsAssetMapList=new ArrayList<>();  for (  AssetMap.Asset asset : assetMapObjectModel.getAssetList()) {    assetUUIDsAssetMapList.add(asset.getUUID());  }  List<UUID> assetUUIDsPackingList=new ArrayList<>();  for (  PackingList packingList : packingListObjectModels) {    assetUUIDsPackingList.add(packingList.getUUID());    for (    PackingList.Asset asset : packingList.getAssets()) {      assetUUIDsPackingList.add(asset.getUUID());    }  }  Set<UUID> assetUUIDsAssetMapSet=new HashSet<>(assetUUIDsAssetMapList);  Set<UUID> assetUUIDsPKLSet=new HashSet<>(assetUUIDsPackingList);  StringBuilder unreferencedPKLAssetsUUIDs=new StringBuilder();  for (  UUID uuid : assetUUIDsPKLSet) {    if (!assetUUIDsAssetMapSet.contains(uuid)) {      unreferencedPKLAssetsUUIDs.append(uuid.toString());      unreferencedPKLAssetsUUIDs.append(", ");    }  }  if (!unreferencedPKLAssetsUUIDs.toString().isEmpty()) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_AM_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("The following UUID/s %s in the Packing list are not referenced by the AssetMap.",unreferencedPKLAssetsUUIDs.toString()));    return imfErrorLogger.getErrors();  }  Set<UUID> packingListAssetsUUIDsSet=new HashSet<>();  for (  AssetMap.Asset asset : assetMapObjectModel.getPackingListAssets()) {    packingListAssetsUUIDsSet.add(asset.getUUID());  }  StringBuilder unreferencedPKLUUIDs=new StringBuilder();  for (  PackingList packingList : packingListObjectModels) {    if (!packingListAssetsUUIDsSet.contains(packingList.getUUID())) {      unreferencedPKLUUIDs.append(packingList.getUUID());    }  }  if (!unreferencedPKLUUIDs.toString().isEmpty()) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_AM_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("The following Packing lists %s are not referenced in the AssetMap",unreferencedPKLUUIDs.toString()));    return imfErrorLogger.getErrors();  }  return imfErrorLogger.getErrors();}  }
class C{  public static Object[] upsert(final Object[] keyValues,final Object key,final Object val){  if (!getKeys(keyValues).contains(key))   return Stream.concat(Stream.of(keyValues),Stream.of(key,val)).toArray(); else {    final Object[] kvs=new Object[keyValues.length];    for (int i=0; i < keyValues.length; i=i + 2) {      kvs[i]=keyValues[i];      if (keyValues[i].equals(key))       kvs[i + 1]=val; else       kvs[i + 1]=keyValues[i + 1];    }    return kvs;  }}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  public static boolean isJavaFile(IResource resource){  return isFileWithExtension(resource,"java");}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("NewInstanceTarg");  targetClass=bpe.location().declaringType();  makeArray("objArray");  makeArray("clsArray");  makeArray("ifc0Array");  makeArray("ifcArray");  listenUntilVMDisconnect();  if (!testFailed) {    println("NewInstanceTest: passed");  } else {    throw new Exception("NewInstanceTest: failed");  }}  }
class C{  private void CVClusters() throws Exception {  double CVLogLikely=-Double.MAX_VALUE;  double templl, tll;  boolean CVincreased=true;  m_num_clusters=1;  int upperBoundMaxClusters=(m_upperBoundNumClustersCV > 0) ? m_upperBoundNumClustersCV : Integer.MAX_VALUE;  int num_clusters=m_num_clusters;  int i;  Random cvr;  Instances trainCopy;  int numFolds=(m_theInstances.numInstances() < m_cvFolds) ? m_theInstances.numInstances() : m_cvFolds;  boolean ok=true;  int seed=getSeed();  int restartCount=0;  CLUSTER_SEARCH:   while (CVincreased) {    if (num_clusters > upperBoundMaxClusters) {      break CLUSTER_SEARCH;    }    CVincreased=false;    cvr=new Random(getSeed());    trainCopy=new Instances(m_theInstances);    trainCopy.randomize(cvr);    templl=0.0;    for (i=0; i < numFolds; i++) {      Instances cvTrain=trainCopy.trainCV(numFolds,i,cvr);      if (num_clusters > cvTrain.numInstances()) {        break CLUSTER_SEARCH;      }      Instances cvTest=trainCopy.testCV(numFolds,i);      m_rr=new Random(seed);      for (int z=0; z < 10; z++) {        m_rr.nextDouble();      }      m_num_clusters=num_clusters;      EM_Init(cvTrain);      try {        iterate(cvTrain,false);      } catch (      Exception ex) {        ex.printStackTrace();        seed++;        restartCount++;        ok=false;        if (restartCount > 5) {          break CLUSTER_SEARCH;        }        break;      }      try {        tll=E(cvTest,false);      } catch (      Exception ex) {        ex.printStackTrace();        seed++;        restartCount++;        ok=false;        if (restartCount > 5) {          break CLUSTER_SEARCH;        }        break;      }      if (m_verbose) {        System.out.println("# clust: " + num_clusters + " Fold: "+ i+ " Loglikely: "+ tll);      }      templl+=tll;    }    if (ok) {      restartCount=0;      seed=getSeed();      templl/=numFolds;      if (m_verbose) {        System.out.println("===================================" + "==============\n# clust: " + num_clusters + " Mean Loglikely: "+ templl+ "\n================================"+ "=================");      }      if (templl - CVLogLikely > m_minLogLikelihoodImprovementCV) {        CVLogLikely=templl;        CVincreased=true;        num_clusters++;      }    }  }  if (m_verbose) {    System.out.println("Number of clusters: " + (num_clusters - 1));  }  m_num_clusters=num_clusters - 1;}  }
class C{  private void generateQuaternionFromMatrix(){  float qx;  float qy;  float qz;  float qw;  float[] mat=matrix.getMatrix();  int[] indices=null;  if (this.matrix.size() == 16) {    if (this.matrix.isColumnMajor()) {      indices=Matrixf4x4.matIndCol16_3x3;    } else {      indices=Matrixf4x4.matIndRow16_3x3;    }  } else {    if (this.matrix.isColumnMajor()) {      indices=Matrixf4x4.matIndCol9_3x3;    } else {      indices=Matrixf4x4.matIndRow9_3x3;    }  }  int m00=indices[0];  int m01=indices[1];  int m02=indices[2];  int m10=indices[3];  int m11=indices[4];  int m12=indices[5];  int m20=indices[6];  int m21=indices[7];  int m22=indices[8];  float tr=mat[m00] + mat[m11] + mat[m22];  if (tr > 0) {    float s=(float)Math.sqrt(tr + 1.0) * 2;    qw=0.25f * s;    qx=(mat[m21] - mat[m12]) / s;    qy=(mat[m02] - mat[m20]) / s;    qz=(mat[m10] - mat[m01]) / s;  } else   if ((mat[m00] > mat[m11]) & (mat[m00] > mat[m22])) {    float s=(float)Math.sqrt(1.0 + mat[m00] - mat[m11] - mat[m22]) * 2;    qw=(mat[m21] - mat[m12]) / s;    qx=0.25f * s;    qy=(mat[m01] + mat[m10]) / s;    qz=(mat[m02] + mat[m20]) / s;  } else   if (mat[m11] > mat[m22]) {    float s=(float)Math.sqrt(1.0 + mat[m11] - mat[m00] - mat[m22]) * 2;    qw=(mat[m02] - mat[m20]) / s;    qx=(mat[m01] + mat[m10]) / s;    qy=0.25f * s;    qz=(mat[m12] + mat[m21]) / s;  } else {    float s=(float)Math.sqrt(1.0 + mat[m22] - mat[m00] - mat[m11]) * 2;    qw=(mat[m10] - mat[m01]) / s;    qx=(mat[m02] + mat[m20]) / s;    qy=(mat[m12] + mat[m21]) / s;    qz=0.25f * s;  }  setX(qx);  setY(qy);  setZ(qz);  setW(qw);}  }
class C{  @Override public void paintValue(java.awt.Graphics gfx,java.awt.Rectangle box){  if (m_Enabled) {    String rep;    if (m_Object != null) {      if (m_Object instanceof CustomDisplayStringProvider) {        rep=((CustomDisplayStringProvider)m_Object).toDisplay();      } else {        rep=m_Object.getClass().getName();        int dotPos=rep.lastIndexOf('.');        if (dotPos != -1) {          rep=rep.substring(dotPos + 1);        }      }    } else {      rep="None";    }    java.awt.Font originalFont=gfx.getFont();    gfx.setFont(originalFont.deriveFont(java.awt.Font.BOLD));    FontMetrics fm=gfx.getFontMetrics();    int vpad=(box.height - fm.getHeight());    gfx.drawString(rep,2,fm.getAscent() + vpad);    int repwidth=fm.stringWidth(rep);    gfx.setFont(originalFont);    if ((m_Object instanceof OptionHandler) && !(m_Object instanceof CustomDisplayStringProvider)) {      gfx.drawString(" " + Utils.joinOptions(((OptionHandler)m_Object).getOptions()),repwidth + 2,fm.getAscent() + vpad);    }  }}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("users") @Valid Users users,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    String hashedPassword=DigestUtils.sha1Hex(users.getPassword());    users.setPassword(hashedPassword);    com.wipro.ats.bdre.md.dao.jpa.Users jpaUsers=new com.wipro.ats.bdre.md.dao.jpa.Users();    jpaUsers.setPassword(hashedPassword);    jpaUsers.setUsername(users.getUsername());    jpaUsers.setEnabled((users.getEnabled() == 1) ? true : false);    usersDAO.update(jpaUsers);    restWrapper=new RestWrapper(users,RestWrapper.OK);    LOGGER.info("Record with name:" + users.getUsername() + " updated in Users by User:"+ principal.getName()+ users);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public void init() throws ServletException {}  }
class C{  public String toString(){  return "(" + x + ", "+ y+ ")";}  }
class C{  static boolean compare(ByteBuffer bb,byte[] message){  if (message.length != bb.remaining()) {    out.println("Compare failed, byte array length != to buffer remaining");    return false;  }  for (int i=0; i < message.length; i++) {    byte b=bb.get();    if (message[i] != b) {      out.println("Position " + i + ": "+ message[i]+ " != "+ b);      return false;    }  }  return true;}  }
class C{  public boolean generatedKeyAlwaysReturned(){  return true;}  }
class C{  private void updateGoods(){  mGoodsTextView.setText(String.format("Goods: %d",mGoods));}  }
class C{  public void printMap(){  if (lastEntry > 0) {    VM.sysWrite("On-stack-replacement maps:\n");  }  for (int i=0; i <= lastEntry; i++) {    VM.sysWrite("Entry " + i + " : ");    int mapIndex=getOSRMapIndex(i);    VM.sysWrite("  mapIndex " + mapIndex + ", ");    int mcOffset=getMCOffset(i);    VM.sysWrite("  mc " + mcOffset + ", ");    int bcIndex=getBCIndex(i);    VM.sysWriteln("bc " + bcIndex);    int regmap=osrMaps[mapIndex] & ~NEXT_BIT;    VM.sysWrite("regmap: " + Integer.toBinaryString(regmap));    OSRMapIterator iterator=new OSRMapIterator(osrMaps,mapIndex);    while (iterator.hasMore()) {      VM.sysWrite("(" + iterator.getValueType() + ","+ iterator.getValue()+ ")");      iterator.moveToNext();    }    VM.sysWrite("\n");  }}  }
class C{  public String toString(boolean extended){  StringBuilder sb=new StringBuilder();  boolean positive=(millis >= 0);  long hour=Math.abs(millisToHours(millis));  long minute=Math.abs(millisToMinutes(millis));  sb.append(positive ? '+' : '-');  if (hour < 10) {    sb.append('0');  }  sb.append(hour);  if (extended) {    sb.append(':');  }  if (minute < 10) {    sb.append('0');  }  sb.append(minute);  return sb.toString();}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  protected FeatureTypeLibraryImpl(){  super();}  }
class C{  public static <E>ImmutableList<E> copyOf(E[] elements){switch (elements.length) {case 0:    return ImmutableList.of();case 1:  return new SingletonImmutableList<E>(elements[0]);default :return new RegularImmutableList<E>(checkElementsNotNull(elements.clone()));}}  }
class C{  public ByteVector put4(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public UserEntry createUser(String username,String givenName,String familyName,String password,String passwordHashFunction) throws AppsForYourDomainException, ServiceException, IOException {  return createUser(username,givenName,familyName,password,passwordHashFunction,null);}  }
class C{  static long checkPreambleSize(Memory mem){  final long cap=mem.getCapacity();  if (cap < 8) {    throwNotBigEnough(cap,8);  }  final long pre0=mem.getLong(0);  final int preLongs=(int)(pre0 & 0X3FL);  final int required=Math.max(preLongs << 3,8);  if (cap < required) {    throwNotBigEnough(cap,required);  }  return pre0;}  }
class C{  public ZipEntry(ZipEntry e){  Objects.requireNonNull(e,"entry");  name=e.name;  xdostime=e.xdostime;  mtime=e.mtime;  atime=e.atime;  ctime=e.ctime;  crc=e.crc;  size=e.size;  csize=e.csize;  method=e.method;  flag=e.flag;  extra=e.extra;  comment=e.comment;}  }
class C{  private static JFreeChart createChart(){  XYSeries series1=new XYSeries("Series 1");  series1.add(1.0,1.0);  series1.add(2.0,2.0);  series1.add(3.0,3.0);  XYDataset dataset=new XYSeriesCollection(series1);  return ChartFactory.createXYLineChart("XY Line Chart","Domain","Range",dataset);}  }
class C{  public void parse(String systemId) throws SAXNotSupportedException {  throw new SAXNotSupportedException("This XMLReader can only accept" + " <dom4j> InputSource objects");}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo info=connectivityManager.getActiveNetworkInfo();  return (info != null && info.isConnected());}  }
class C{  @Override protected void appendFields(StringBuffer buff){  super.appendFields(buff);  buff.append("; key=").append(getKey());  if (originalSender != null) {    buff.append("; originalSender=").append(originalSender);  }  if (bridgeContext != null) {    buff.append("; bridgeContext=").append(bridgeContext);  }  if (eventId != null) {    buff.append("; eventId=").append(eventId);  }  buff.append("; hasOldValue= ").append(this.hasOldValue);}  }
class C{  public void parseCommandCsv(String filePath) throws IOException {  CSVReader reader=new CSVReader(new FileReader(filePath),';');  String[] line=reader.readNext();  while (line != null) {    log.info(CollectionUtils.arrayToString(line));    executeCmdLine(line);    line=reader.readNext();  }  reader.close();}  }
class C{  public void startSample(long sampleTimeUs,int offset){  Assertions.checkState(offset <= 0);  pendingSampleTimeUs=sampleTimeUs;  pendingSampleOffset=totalBytesWritten + offset;}  }
class C{  public void clearMemoryCache(){  if (mMemoryCache != null) {    mMemoryCache.clear();  }}  }
class C{  public ControlInToolBarState(){  super("InToolBar");}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.VERTEX__PARENT_REGION:    return basicSetParentRegion(null,msgs);case SGraphPackage.VERTEX__INCOMING_TRANSITIONS:  return ((InternalEList<?>)getIncomingTransitions()).basicRemove(otherEnd,msgs);case SGraphPackage.VERTEX__OUTGOING_TRANSITIONS:return ((InternalEList<?>)getOutgoingTransitions()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (propertyAsText: ");  result.append(propertyAsText);  result.append(')');  return result.toString();}  }
class C{  protected void resetFileLists(){  compileList.clear();}  }
class C{  RSAKeyPair(long hCryptProv,long hCryptKey,int keyLength){  privateKey=new RSAPrivateKey(hCryptProv,hCryptKey,keyLength);  publicKey=new RSAPublicKey(hCryptProv,hCryptKey,keyLength);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION__OWNED_MEMBERS_RAW:    return ((InternalEList<?>)getOwnedMembersRaw()).basicRemove(otherEnd,msgs);case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPE_VARS:  return ((InternalEList<?>)getTypeVars()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static char[] values(Character[] array){  char[] dest=new char[array.length];  for (int i=0; i < array.length; i++) {    Character v=array[i];    if (v != null) {      dest[i]=v.charValue();    }  }  return dest;}  }
class C{  public long startWrite(){  this.stats.incInt(writesInProgressId,1);  return DistributionStats.getStatTime();}  }
class C{  public void testGetInstance03() throws NoSuchAlgorithmException, IllegalArgumentException, InvalidAlgorithmParameterException, CertPathValidatorException {  try {    CertPathValidator.getInstance(null,mProv);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathValidator.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  CertPathValidator cerPV;  for (int i=0; i < validValues.length; i++) {    cerPV=CertPathValidator.getInstance(validValues[i],mProv);    assertEquals("Incorrect type",cerPV.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPV.getProvider(),mProv);    checkResult(cerPV);  }}  }
class C{  private void export_dependencies(JCas jcas){  dependencies=new LinkedHashMap<Token,List<Dependency>>();  List<Token> nonGoverned=new ArrayList<Token>(nodes.keySet());  for (  Dependency dependency : select(jcas,Dependency.class)) {    Token governor=dependency.getGovernor();    Token dependent=dependency.getDependent();    List<Dependency> l=dependencies.get(governor);    if (l == null) {      dependencies.put(governor,new ArrayList<Dependency>());      l=dependencies.get(governor);    }    l.add(dependency);    nonGoverned.remove(dependent);  }  for (  Token t : nonGoverned) {    traverseDependents(t,"",-1);    writeToFile("component",componentId,"p","dep","dep");    componentId++;  }}  }
class C{  public CstNat(CstString name,CstString descriptor){  if (name == null) {    throw new NullPointerException("name == null");  }  if (descriptor == null) {    throw new NullPointerException("descriptor == null");  }  this.name=name;  this.descriptor=descriptor;}  }
class C{  default void updating(Map<String,Object> stateObjectsById,Consumer<ProxyingEventBus> busConsumer){  EventOutChannel outChannel=RoutingEventOutChannel.routingWith(stateObjectsById.entrySet().stream().collect(Collectors.toMap(null,null)));  notifying(outChannel.toEventsOutChannel(),Consumers.transform(busConsumer,null));}  }
class C{  public final void removeAll(Object from,boolean onlyIfSameObject){  final int width=this.width;  final int height=this.height;  Bag[][] fieldx=null;  Bag[] fieldxy=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        Bag bag=fieldxy[z];        int len=bag.size();        for (int i=0; i < len; i++) {          Object obj=bag.get(i);          if ((obj == null && from == null) || (onlyIfSameObject && obj == from) || (!onlyIfSameObject && obj.equals(from))) {            bag.remove(i);            i--;            len--;          }        }      }    }  }}  }
class C{  protected String doIt() throws Exception {  log.info("Selection=" + p_Selection + ", DateInvoiced="+ p_DateInvoiced+ ", AD_Org_ID="+ p_AD_Org_ID+ ", C_BPartner_ID="+ p_C_BPartner_ID+ ", C_Order_ID="+ p_C_Order_ID+ ", DocAction="+ p_docAction+ ", Consolidate="+ p_ConsolidateDocument);  String sql=null;  if (p_Selection) {    sql="SELECT C_Order.* FROM C_Order, T_Selection " + "WHERE C_Order.DocStatus='CO' AND C_Order.IsSOTrx='Y' " + "AND C_Order.C_Order_ID = T_Selection.T_Selection_ID "+ "AND T_Selection.AD_PInstance_ID=? "+ "ORDER BY C_Order.M_Warehouse_ID, C_Order.PriorityRule, C_Order.C_BPartner_ID, C_Order.Bill_Location_ID, C_Order.C_Order_ID";  } else {    sql="SELECT * FROM C_Order o " + "WHERE DocStatus IN('CO','CL') AND IsSOTrx='Y'";    if (p_AD_Org_ID != 0)     sql+=" AND AD_Org_ID=?";    if (p_C_BPartner_ID != 0)     sql+=" AND C_BPartner_ID=?";    if (p_C_Order_ID != 0)     sql+=" AND C_Order_ID=?";    sql+=" AND EXISTS (SELECT * FROM C_OrderLine ol " + "WHERE o.C_Order_ID=ol.C_Order_ID AND ol.QtyOrdered<>ol.QtyInvoiced) " + "AND o.C_DocType_ID IN (SELECT C_DocType_ID FROM C_DocType "+ "WHERE DocBaseType='SOO' AND DocSubTypeSO NOT IN ('ON','OB','WR')) "+ "ORDER BY M_Warehouse_ID, PriorityRule, C_BPartner_ID, Bill_Location_ID, C_Order_ID";  }  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    int index=1;    if (p_Selection) {      pstmt.setInt(index,getAD_PInstance_ID());    } else {      if (p_AD_Org_ID != 0)       pstmt.setInt(index++,p_AD_Org_ID);      if (p_C_BPartner_ID != 0)       pstmt.setInt(index++,p_C_BPartner_ID);      if (p_C_Order_ID != 0)       pstmt.setInt(index++,p_C_Order_ID);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  return generate(pstmt);}  }
class C{  public int purge(){synchronized (impl) {    return impl.purge();  }}  }
class C{  public static void login(final HttpServletRequest request,final HttpServletResponse response,final JSONObject user){  final HttpSession session=request.getSession(false);  if (null == session) {    LOGGER.warn("The session is null");    return;  }  session.setAttribute(User.USER,user);  session.setAttribute(Common.CSRF_TOKEN,RandomStringUtils.randomAlphanumeric(12));  try {    final JSONObject cookieJSONObject=new JSONObject();    cookieJSONObject.put(Keys.OBJECT_ID,user.optString(Keys.OBJECT_ID));    cookieJSONObject.put(Common.TOKEN,user.optString(User.USER_PASSWORD));    final Cookie cookie=new Cookie("b3log-latke",cookieJSONObject.toString());    cookie.setPath("/");    cookie.setMaxAge(COOKIE_EXPIRY);    cookie.setHttpOnly(true);    response.addCookie(cookie);  } catch (  final Exception e) {    LOGGER.log(Level.WARN,"Can not write cookie",e);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public QuotaExceededException(String message){  super(message);}  }
class C{  @Override public String toString(){  return "nvrtcProgram[" + "nativePointer=" + getNativePointer() + "]";}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static int codePointCount(char[] seq,int offset,int count){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length;  int endIndex=offset + count;  if (offset < 0 || count < 0 || endIndex > len) {    throw new IndexOutOfBoundsException();  }  int result=0;  for (int i=offset; i < endIndex; i++) {    char c=seq[i];    if (isHighSurrogate(c)) {      if (++i < endIndex) {        c=seq[i];        if (!isLowSurrogate(c)) {          result++;        }      }    }    result++;  }  return result;}  }
class C{  public QueryStringBuilder(final String template){  if (null == template || template.isEmpty()) {    throw new IllegalArgumentException("Template is null or length is zero.");  }  if (!VAR_PATTERN.matcher(template).find()) {    throw new IllegalArgumentException("Template did not contain variables.");  }  this.builder=new StringBuilder(template);}  }
class C{  public XNumber(Number num){  super();  m_val=num.doubleValue();  setObject(num);}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  public MaterialEditText hintColor(int color){  mHintColor=color;  mHint.setTextColor(mHintColor);  return this;}  }
class C{  private void autoSelectCheckboxes(){  for (int i=0; i < checkBoxes.size(); i++) {    checkBoxes.get(i).setSelected(false);    List<Track> tracks=_location.getTrackList();    for (    Track track : tracks) {      if (track.acceptsTypeName(checkBoxes.get(i).getText())) {        checkBoxes.get(i).setSelected(true);      }    }    if (!checkBoxes.get(i).isSelected()) {      _location.deleteTypeName(checkBoxes.get(i).getText());    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:10.436 -0400",hash_original_method="FCF1FEF981EDB1C83E31C9BD11054CAA",hash_generated_method="5A8F03B8B34D99EE547B7AC5146576B5") public PrintServiceInfo(ResolveInfo resolveInfo,String settingsActivityName,String addPrintersActivityName,String advancedPrintOptionsActivityName){  mId=new ComponentName(resolveInfo.serviceInfo.packageName,resolveInfo.serviceInfo.name).flattenToString();  mResolveInfo=resolveInfo;  mSettingsActivityName=settingsActivityName;  mAddPrintersActivityName=addPrintersActivityName;  mAdvancedPrintOptionsActivityName=advancedPrintOptionsActivityName;}  }
class C{  @Override public void onChooseEdit(){  if (editingMyData != null) {    editingMyData.setName("<Edited>");    editingMyData.setImageResourceId(android.R.drawable.ic_menu_edit);    pigeonholeView.updateEditingObject();  }}  }
class C{  private SavedState(Parcel in){  Parcelable superState=in.readParcelable(RecyclerView.class.getClassLoader());  this.superState=superState != null ? superState : EMPTY_STATE;  prevFirstVisiblePosition=in.readInt();  prevFirstVisibleChildHeight=in.readInt();  prevScrolledChildrenHeight=in.readInt();  prevScrollY=in.readInt();  scrollY=in.readInt();  childrenHeights=new SparseIntArray();  final int numOfChildren=in.readInt();  if (0 < numOfChildren) {    for (int i=0; i < numOfChildren; i++) {      final int key=in.readInt();      final int value=in.readInt();      childrenHeights.put(key,value);    }  }}  }
class C{  public LanguageIndexingFilter(){}  }
class C{  public void addLast(String productImageUrl){  productImagesUrls.add(productImagesUrls.size(),productImageUrl);  notifyItemInserted(productImagesUrls.size());}  }
class C{  synchronized protected void markSupportedPids(int obdService,int start,long bitmask,PvList pvList){  currSupportedPid=0;  for (int i=0; i < 0x1F; i++) {    if ((bitmask & (0x80000000L >> i)) != 0) {      pidSupported.add(i + start + 1);    }  }  log.debug(Long.toHexString(bitmask).toUpperCase() + "(" + Long.toHexString(start)+ "):"+ pidSupported);  if ((bitmask & 1) != 0)   cmdQueue.add(String.format("%02X%02X",obdService,start + 0x20)); else   preparePidPvs(obdService,pvList);}  }
class C{  private List<TagNode> findMatchingTagNodes(ITagNodeCondition condition,boolean isRecursive){  List<TagNode> result=new LinkedList<TagNode>();  if (condition == null) {    return result;  }  for (  Object item : children) {    if (item instanceof TagNode) {      TagNode currNode=(TagNode)item;      if (condition.satisfy(currNode)) {        result.add(currNode);      }      if (isRecursive) {        List<TagNode> innerList=currNode.findMatchingTagNodes(condition,isRecursive);        if (innerList != null && innerList.size() > 0) {          result.addAll(innerList);        }      }    }  }  return result;}  }
class C{  void enableAllNetworks(){  boolean networkEnabledStateChanged=false;  for (  WifiConfiguration config : mConfiguredNetworks.values()) {    if (config != null && config.status == Status.DISABLED) {      if (mWifiNative.enableNetwork(config.networkId,false)) {        networkEnabledStateChanged=true;        config.status=Status.ENABLED;      } else {        loge("Enable network failed on " + config.networkId);      }    }  }  if (networkEnabledStateChanged) {    mWifiNative.saveConfig();    sendConfiguredNetworksChangedBroadcast();  }}  }
class C{  public static void log(Throwable t){  throw new RuntimeException(t);}  }
class C{  private void fillPicks() throws Exception {  Properties ctx=Env.getCtx();  Language language=Language.getLoginLanguage();  MLookup orderLookup=MLookupFactory.get(ctx,m_WindowNo,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_PP_Order_ID),DisplayType.Search,language,"PP_Order_ID",0,false,"PP_Order.DocStatus = '" + MPPOrder.DOCACTION_Complete + "'");  orderField=new WSearchEditor(MPPOrder.COLUMNNAME_PP_Order_ID,false,false,true,orderLookup);  orderField.addValueChangeListener(this);  MLookup resourceLookup=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_S_Resource_ID),DisplayType.TableDir);  resourceField=new WSearchEditor(MPPOrder.COLUMNNAME_S_Resource_ID,false,false,false,resourceLookup);  MLookup warehouseLookup=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_M_Warehouse_ID),DisplayType.TableDir);  warehouseField=new WSearchEditor(MPPOrder.COLUMNNAME_M_Warehouse_ID,false,false,false,warehouseLookup);  MLookup productLookup=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_M_Product_ID),DisplayType.TableDir);  productField=new WSearchEditor(MPPOrder.COLUMNNAME_M_Product_ID,false,false,false,productLookup);  MLookup uomLookup=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_C_UOM_ID),DisplayType.TableDir);  uomField=new WSearchEditor(MPPOrder.COLUMNNAME_C_UOM_ID,false,false,false,uomLookup);  MLookup uomOrderLookup=MLookupFactory.get(ctx,m_WindowNo,0,MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_C_UOM_ID),DisplayType.TableDir);  uomorderField=new WSearchEditor(MPPOrder.COLUMNNAME_C_UOM_ID,false,false,false,uomOrderLookup);  MLocatorLookup locatorL=new MLocatorLookup(ctx,m_WindowNo);  locatorField=new WLocatorEditor(MLocator.COLUMNNAME_M_Locator_ID,true,false,true,locatorL,m_WindowNo);  int m_Window=MWindow.getWindow_ID("Manufacturing Order");  GridFieldVO vo=GridFieldVO.createStdField(ctx,m_WindowNo,0,m_Window,MTab.getTab_ID(m_Window,"Manufacturing Order"),false,false,false);  vo.AD_Column_ID=MColumn.getColumn_ID(MPPOrder.Table_Name,MPPOrder.COLUMNNAME_M_AttributeSetInstance_ID);  vo.ColumnName=MPPOrder.COLUMNNAME_M_AttributeSetInstance_ID;  vo.displayType=DisplayType.PAttribute;  GridField field=new GridField(vo);  attribute=new WPAttributeEditor(field.getGridTab(),field);  attribute.setValue(0);  scrapQtyField.setValue(Env.ZERO);  rejectQty.setValue(Env.ZERO);  pickcombo.appendItem(Msg.translate(Env.getCtx(),"IsBackflush"),1);  pickcombo.appendItem(Msg.translate(Env.getCtx(),"OnlyIssue"),2);  pickcombo.appendItem(Msg.translate(Env.getCtx(),"OnlyReceipt"),3);  pickcombo.addEventListener(Events.ON_CHANGE,this);  Process.addActionListener(this);  toDeliverQty.addValueChangeListener(this);  scrapQtyField.addValueChangeListener(this);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (extendsName_1: ");  result.append(extendsName_1);  result.append(')');  return result.toString();}  }
class C{  public void updateViewWithPercent(View child,float percent){  if (mAnimation == null) {    float newX=targetX == UNSPECIFIED_INT ? 0 : (targetX - mStartX) * percent;    float newY=targetY == UNSPECIFIED_INT ? 0 : (targetY - mStartY) * percent;    if (targetWidth != UNSPECIFIED_INT || targetHeight != UNSPECIFIED_INT) {      float newWidth=mStartWidth + ((targetWidth - mStartWidth) * percent);      float newHeight=mStartHeight + ((targetHeight - mStartHeight) * percent);      child.setScaleX(newWidth / mStartWidth);      child.setScaleY(newHeight / mStartHeight);      newX-=(mStartWidth - newWidth) / 2;      newY-=(mStartHeight - newHeight) / 2;    }    child.setTranslationX(newX);    child.setTranslationY(newY);    if (targetAlpha != UNSPECIFIED_FLOAT) {      child.setAlpha(mStartAlpha + (targetAlpha - mStartAlpha) * percent);    }    if (targetBackgroundColor != UNSPECIFIED_INT && mStartBackgroundColor != 0) {      ArgbEvaluator evaluator=new ArgbEvaluator();      int color=(int)evaluator.evaluate(percent,mStartBackgroundColor,targetBackgroundColor);      child.setBackgroundColor(color);    }    if (targetRotateX != UNSPECIFIED_FLOAT) {      child.setRotationX(mStartRotateX + (targetRotateX - mStartRotateX) * percent);    }    if (targetRotateY != UNSPECIFIED_FLOAT) {      child.setRotationX(mStartRotateY + (targetRotateY - mStartRotateY) * percent);    }  } else {    mAnimation.setStartTime(0);    mAnimation.restrictDuration(100);    Transformation transformation=new Transformation();    mAnimation.getTransformation((long)(percent * 100),transformation);    BehaviorAnimation animation=new BehaviorAnimation(transformation);    child.startAnimation(animation);  }  child.requestLayout();}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  static String generateCurlyBracketTokens(final int numberOfTokens){  String generatedTokens="";  for (int counter=0; counter < numberOfTokens; counter++) {    generatedTokens+=DEFAULT_FIELDS_FORMAT_PREFIX + counter + DEFAULT_FIELDS_FORMAT_POSTFIX;  }  return generatedTokens;}  }
class C{  protected SecureRandom(SecureRandomSpi secureRandomSpi,Provider provider){  this(secureRandomSpi,provider,null);}  }
class C{  @Override public void loadUrl(Tab tab,String url){  loadUrl(tab,url,null);}  }
class C{  public static int nextPowerOfTwo(int x){  assert x < 0x10000;  int bit=0x8000, highest=-1, count=0;  for (int i=15; i >= 0; --i, bit>>=1) {    if ((x & bit) != 0) {      ++count;      if (highest == -1) {        highest=i;      }    }  }  if (count <= 1) {    return 0;  }  return 1 << (highest + 1);}  }
class C{  public ConnectionGroup removeConnectionGroup(String identifier){  return connectionGroups.remove(identifier);}  }
class C{  private Optional<List<File>> chooseFiles(Window win){  FileChooser fc=new FileChooser();  fc.setTitle("Add Fingerprints");  fc.setInitialDirectory(Environment.DIR_FPRINT_USER.getDir());  return Optional.ofNullable(fc.showOpenMultipleDialog(win));}  }
class C{  public FPSSurfaceView addChildAt(int location,@NonNull DisplayBase DisplayBase){  DisplayBase.setUp(mFps);  mDisplayList.add(location,DisplayBase);  return this;}  }
class C{  protected ShoppingCartItem(GenericValue product,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,Locale locale,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,GenericValue parentProduct){  this._product=product;  this.productId=_product.getString("productId");  this._parentProduct=parentProduct;  if (parentProduct != null)   this.parentProductId=_parentProduct.getString("productId");  if (UtilValidate.isEmpty(itemType)) {    if (UtilValidate.isNotEmpty(_product.getString("productTypeId"))) {      if ("ASSET_USAGE".equals(_product.getString("productTypeId"))) {        this.itemType="RENTAL_ORDER_ITEM";      } else       if ("ASSET_USAGE_OUT_IN".equals(_product.getString("productTypeId"))) {        this.itemType="RENTAL_ORDER_ITEM";      } else {        this.itemType="PRODUCT_ORDER_ITEM";      }    } else {      this.itemType="PRODUCT_ORDER_ITEM";    }  } else {    this.itemType=itemType;  }  this.itemGroup=itemGroup;  this.prodCatalogId=prodCatalogId;  this.attributes=(attributes == null ? new HashMap<String,Object>() : attributes);  this.delegator=_product.getDelegator();  this.delegatorName=_product.getDelegator().getDelegatorName();  this.addAllProductFeatureAndAppls(additionalProductFeatureAndAppls);  this.locale=locale;  if (UtilValidate.isNotEmpty(configWrapper)) {    this.configWrapper=configWrapper;    if (UtilValidate.isEmpty(configWrapper.getConfigId())) {      ProductConfigWorker.storeProductConfigWrapper(configWrapper,getDelegator());    }  }}  }
class C{  private int[][] generateImageMap(ArrayList nodes_ID){  int numOfNode=nodes_ID.size();  int rowNode_count=(int)Math.ceil((float)numOfNode / SIZE);  int rowTotal_count=2 * rowNode_count - 1;  int ROW=rowTotal_count;  int COL=2 * SIZE - 1;  int[][] imageMap=new int[ROW][COL];  boolean isEmptyRow_Right=true;  boolean isForwardRow=true;  int row_Last=ROW - 1;  int index_Row=0;  int index_Node=0;  int i, j;  for (index_Row=0; index_Row < ROW; index_Row++) {    if ((index_Row % 2) != 0) {      if (isEmptyRow_Right) {        imageMap[index_Row][COL - 1]=ARROW_DOWN;        isEmptyRow_Right=false;      } else {        imageMap[index_Row][0]=ARROW_DOWN;        isEmptyRow_Right=true;      }    }    if ((index_Row % 2) == 0) {      if (isForwardRow) {        isForwardRow=false;        if (index_Row == row_Last) {          j=0;          for (i=index_Node; i < numOfNode; i++) {            imageMap[index_Row][j++]=((Integer)nodes_ID.get(i)).intValue();            if (i != numOfNode - 1)             imageMap[index_Row][j++]=ARROW_FORWARD;          }        } else {          for (i=0; i < COL; i++)           imageMap[index_Row][i]=((i % 2 == 0) ? ((Integer)nodes_ID.get(index_Node++)).intValue() : ARROW_FORWARD);        }      } else {        isForwardRow=true;        if (index_Row == row_Last) {          j=0;          for (i=index_Node; i < numOfNode; i++) {            imageMap[index_Row][COL - 1 - j++]=((Integer)nodes_ID.get(i)).intValue();            if (i != numOfNode - 1)             imageMap[index_Row][COL - 1 - j++]=ARROW_BACKWARD;          }        } else {          j=0;          for (i=0; i < COL; i++) {            imageMap[index_Row][COL - 1 - i]=(i % 2 == 0) ? ((Integer)nodes_ID.get(index_Node++)).intValue() : ARROW_BACKWARD;          }        }      }    }  }  return imageMap;}  }
class C{  @Override public VeriniceSearchResult query(VeriniceQuery veriniceQuery){  ServerInitializer.inheritVeriniceContextState();  IAuthService authService=(IAuthService)VeriniceContext.get(VeriniceContext.AUTH_SERVICE);  if (authService.isPermissionHandlingNeeded()) {    veriniceQuery.setScopeOnly(authService.isScopeOnly());  }  return query(veriniceQuery,null);}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,Vector3 normal,double eccentricity,OrbitDirection direction){  super();  mFocalPoint=focalPoint;  mPeriapsis=periapsis;  mNormal=normal.clone();  mEccentricity=eccentricity;  mDirection=direction;  mAngle=360.0;}  }
class C{  public TypeRefsSwitch(){  if (modelPackage == null) {    modelPackage=TypeRefsPackage.eINSTANCE;  }}  }
class C{  public void image(RenderedImage image,Color bkg,String encode) throws IOException {  ImageBytes bytes=new ImageBytes(image,bkg,encode,ImageConstants.COLOR_MODEL_RGB);  entry("Width",image.getWidth());  entry("Height",image.getHeight());  entry("ColorSpace",pdf.name("DeviceRGB"));  entry("BitsPerComponent",8);  entry("Filter",getFilterName(bytes.getFormat()));  write(bytes.getBytes());}  }
class C{  public String toString(){  return new String(payload);}  }
class C{  public void showDialog(){  view.setAmend(false);  view.setAllFilesInclude(false);  view.setIncludeSelection(false);  view.setOnlySelection(false);  view.setEnableCommitButton(!view.getMessage().isEmpty());  view.showDialog();  view.focusInMessageField();}  }
class C{  private void updatePadding(Rect insets){  int rightPadding=originalPadding.right + insets.right;  int bottomPadding=originalPadding.bottom + insets.bottom;  int topPadding=originalPadding.top + insets.top;  setPadding(originalPadding.left,topPadding,rightPadding,bottomPadding);}  }
class C{  public static int testLoop5Snippet(int a,int b,MemoryScheduleTest obj){  int ret=0;  int bb=b;  for (int i=0; i < a; i++) {    ret=obj.hash;    if (a > 10) {      bb++;    } else {      bb--;    }    ret=ret / 10;  }  return ret + bb;}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  assumeTrue(CanConnect.to(new InetSocketAddress(POSTGRES_HOST,POSTGRES_PORT)));  VaultRule vaultRule=new VaultRule();  vaultRule.before();  if (!vaultRule.prepare().hasSecretBackend("postgresql")) {    vaultRule.prepare().mountSecret("postgresql");  }  VaultOperations vaultOperations=vaultRule.prepare().getVaultOperations();  vaultOperations.write("postgresql/config/connection",Collections.singletonMap("connection_url",CONNECTION_URL));  vaultOperations.write("postgresql/roles/readonly",Collections.singletonMap("sql",CREATE_USER_AND_GRANT_SQL));}  }
class C{  protected void processEvent(AWTEvent e){  if (e instanceof ItemEvent) {    processItemEvent((ItemEvent)e);    return;  } else   if (e instanceof ActionEvent) {    processActionEvent((ActionEvent)e);    return;  }  super.processEvent(e);}  }
class C{  public void include(final PathMatcher matcher){  includeMatchers.add(matcher);}  }
class C{  public static void retainAll(Map map1,Map map2){  Iterator itr=map1.keySet().iterator();  while (itr.hasNext()) {    Object key=itr.next();    if (!map2.containsKey(key)) {      itr.remove();    }  }}  }
class C{  public ParameterizedHashMap(int initialCapacity,float loadFactor,Equality keyEquality){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  table=new Entry[capacity];  this.keyEquality=keyEquality;  init();}  }
class C{  protected void formBusquedaGenericaSeleccionExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  try {    inicializarBusquedaGenerica(form,request);    setReturnActionFordward(request,mapping.findForward("busqueda_seleccion"));  } catch (  FileNotFoundException flne) {    logger.error("NO SE HA ENCONTRADO EL FICHERO DE CONFIGURACION DE BUSQUEDA",flne);    getErrors(request,false).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIGURACION_FILE_NOT_FOUND));    goBackExecuteLogic(mapping,form,request,response);  }catch (  Exception e) {    logger.error("ERROR AL OBTENER EL FICHERO DE CONFIGURACION DE BUSQUEDA",e);    getErrors(request,false).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIGURACION_FILE));    goBackExecuteLogic(mapping,form,request,response);  }}  }
class C{  public WeakReference(T referent){  super(referent);}  }
class C{  public static Sequence appendItem(Sequence sequence1,Item lastItem){  Sequence result=new Sequence(sequence1);  int lastIndex=result.size() - 1;  Transaction newTransaction=new Transaction(result.get(lastIndex));  result.remove(lastIndex);  newTransaction.add(lastItem);  result.add(newTransaction);  return result;}  }
class C{  public static File stringToGzFile(final String content,final File file) throws IOException {  if (content == null) {    throw new NullPointerException("null string given");  }  try (OutputStream out=FileUtils.createOutputStream(file,true,false,true)){    out.write(content.getBytes());  }   return file;}  }
class C{  public applet removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public StunStack(){  this(null,null);}  }
class C{  IMethodBinding resolveMethod(MethodInvocation method){  return null;}  }
class C{  public IntervalMarker(double start,double end,Paint paint,Stroke stroke,Paint outlinePaint,Stroke outlineStroke,float alpha){  super(paint,stroke,outlinePaint,outlineStroke,alpha);  this.startValue=start;  this.endValue=end;  this.gradientPaintTransformer=null;  setLabelOffsetType(LengthAdjustmentType.CONTRACT);}  }
class C{  public void clear(){  while (queue.poll() != null)   ;  modCount++;  Arrays.fill(table,null);  size=0;  while (queue.poll() != null)   ;}  }
class C{  private static boolean remoteBooleanMethod(){  return BOOLEAN_VALUE;}  }
class C{  public <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  try {    return iface.cast(this);  } catch (  ClassCastException cce) {    throw SQLError.createSQLException("Unable to unwrap to " + iface.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,this.conn.getExceptionInterceptor());  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.HIJRAH_DATE_TYPE,this);}  }
class C{  public void writeToFile(DefineSprite sprite,OutputStream fout) throws IOException {  Movie movie=new Movie();  movie.version=version;  movie.framerate=framerate;  movie.width=width;  movie.height=height;  movie.size=new Rect(width * SwfConstants.TWIPS_PER_PIXEL,height * SwfConstants.TWIPS_PER_PIXEL);  Frame frame=new Frame();  movie.frames=new ArrayList<Frame>();  movie.frames.add(frame);  PlaceObject po3=new PlaceObject(Tag.stagPlaceObject3);  po3.matrix=new Matrix();  po3.setRef(sprite);  po3.depth=depth;  frame.controlTags.add(po3);  TagEncoder tagEncoder=new TagEncoder();  MovieEncoder movieEncoder=new MovieEncoder(tagEncoder);  movieEncoder.export(movie);  tagEncoder.writeTo(fout);}  }
class C{  public void accumulate(TaggedLogAPIEntity entity) throws Exception {  AggregateAPIEntity current=root;  for (  String groupby : groupbys) {    String tagv=locateGroupbyField(groupby,entity);    if (tagv == null || tagv.isEmpty()) {      tagv=UNASSIGNED_GROUPBY_ROOT_FIELD_NAME;    }    Map<String,AggregateAPIEntity> children=current.getEntityList();    if (children.get(tagv) == null) {      children.put(tagv,factory.create());      current.setNumDirectDescendants(current.getNumDirectDescendants() + 1);    }    AggregateAPIEntity child=children.get(tagv);    if (counting)     count(child);    for (    String sumFunctionField : sumFunctionFields) {      sum(child,entity,sumFunctionField);    }    current=child;  }}  }
class C{  public void initializeHeartbeatTable(Database database) throws SQLException {  if (logger.isDebugEnabled())   logger.debug("Initializing heartbeat table");  if (database.findTungstenTable(hbTable.getSchema(),hbTable.getName()) == null) {    database.createTable(this.hbTable,false,this.hbTable.getSchema(),tableType,serviceName);  }  ResultSet res=null;  PreparedStatement hbRowCount=null;  int rows=0;  try {    hbRowCount=database.prepareStatement("SELECT count(*) from " + this.hbTable.getSchema() + "."+ this.hbTable.getName());    res=hbRowCount.executeQuery();    if (res.next()) {      rows=res.getInt(1);    }  }  finally {    if (res != null) {      try {        res.close();      } catch (      SQLException e) {      }    }    if (hbRowCount != null) {      try {        hbRowCount.close();      } catch (      Exception e) {      }    }  }  if (rows == 0) {    hbId.setValue(KEY);    hbSourceTstamp.setValue(new Timestamp(System.currentTimeMillis()));    hbSalt.setValue(saltValue.getAndIncrement());    database.insert(hbTable);  }}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter an integer: ");  int number=input.nextInt();  System.out.println(number + (isPalindrome(number) ? " is " : " is not ") + "a palindrome.");}  }
class C{  public static boolean isEmpty(Collection collection){  return (collection == null || collection.isEmpty());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:19.774 -0500",hash_original_method="D35C3B0425645BAC16D8668E04F8F0BF",hash_generated_method="696E48EA35044F78DA5C2EF965CEEEC0") public SpannableStringBuilder(CharSequence text,int start,int end){  int srclen=end - start;  int len=ArrayUtils.idealCharArraySize(srclen + 1);  mText=new char[len];  mGapStart=srclen;  mGapLength=len - srclen;  TextUtils.getChars(text,start,end,mText,0);  mSpanCount=0;  int alloc=ArrayUtils.idealIntArraySize(0);  mSpans=new Object[alloc];  mSpanStarts=new int[alloc];  mSpanEnds=new int[alloc];  mSpanFlags=new int[alloc];  if (text instanceof Spanned) {    Spanned sp=(Spanned)text;    Object[] spans=sp.getSpans(start,end,Object.class);    for (int i=0; i < spans.length; i++) {      if (spans[i] instanceof NoCopySpan) {        continue;      }      int st=sp.getSpanStart(spans[i]) - start;      int en=sp.getSpanEnd(spans[i]) - start;      int fl=sp.getSpanFlags(spans[i]);      if (st < 0)       st=0;      if (st > end - start)       st=end - start;      if (en < 0)       en=0;      if (en > end - start)       en=end - start;      setSpan(spans[i],st,en,fl);    }  }}  }
class C{  public static byte[] createSignatureAlgorithmsExtension(Vector supportedSignatureAlgorithms) throws IOException {  ByteArrayOutputStream buf=new ByteArrayOutputStream();  encodeSupportedSignatureAlgorithms(supportedSignatureAlgorithms,false,buf);  return buf.toByteArray();}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean isTerminal(){  return terminal;}  }
class C{  public List<ModelEntity> induceModelFromDb(Collection<String> messages){  ExecutorService executor=Executors.newFixedThreadPool(datasourceInfo.getMaxWorkerPoolSize());  TreeSet<String> tableNames=this.getTableNames(messages);  Map<String,Map<String,ColumnCheckInfo>> colInfo=getColumnInfo(tableNames,true,messages,executor);  List<ModelEntity> newEntList=new LinkedList<ModelEntity>();  boolean isCaseSensitive=false;  DatabaseMetaData dbData=this.getDatabaseMetaData(null,messages);  if (dbData != null) {    try {      isCaseSensitive=dbData.supportsMixedCaseIdentifiers();    } catch (    SQLException e) {      Debug.logError(e,"Error getting db meta data about case sensitive",module);    }  }  for (  String tableName : new TreeSet<String>(colInfo.keySet())) {    Map<String,ColumnCheckInfo> colMap=colInfo.get(tableName);    ModelEntity newEntity=new ModelEntity(tableName,colMap,modelFieldTypeReader,isCaseSensitive);    newEntList.add(newEntity);  }  executor.shutdown();  return newEntList;}  }
class C{  private String classNameFromTypeIndex(int idx){  return mStrings[mTypeIds[idx].descriptorIdx];}  }
class C{  @Override public Object deserializeTypedFromObject(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  return _deserialize(jp,ctxt);}  }
class C{  public static Collection<Object> pdxRename(String dsName,File[] dsDirs,String oldRegEx,String newName) throws Exception {  try {    DiskStoreImpl dsi=createForOfflineModify(dsName,dsDirs);    return dsi.pdxRename(oldRegEx,newName);  }  finally {    cleanupOffline();  }}  }
class C{  public BooleanSparseArrayDataRow(){  this(0);}  }
class C{  public double evaluate(final Vector v){  return dotProduct(v) + D;}  }
class C{  public boolean isRunning(){  _log.debug("LDAP Service status : {}",_isRunning);  return _isRunning;}  }
class C{  protected void validate_return(MessageCatalog[] param){}  }
class C{  protected void configureMessage(Message message) throws JMSException {}  }
class C{  public ParseContextConfig(){}  }
class C{  public Rectangle2D(){  size=new Dimension2D();}  }
class C{  public <T>int clear(final Class<T> tClass){  BaseAdapter<T> adapter=getBaseAdapter(tClass);  return adapter.clear();}  }
class C{  public final String serialize(final SymbolDescription symbolDescription,final boolean includingBuiltIn){  if (symbolDescription.isBuiltIn() && !includingBuiltIn) {    return "";  }  final StringBuilder sb=new StringBuilder();  serialize(symbolDescription,sb,includingBuiltIn);  return sb.toString();}  }
class C{  private BusinessObjectFormatEntity createBusinessObjectFormatEntity(BusinessObjectFormatCreateRequest request,BusinessObjectDefinitionEntity businessObjectDefinitionEntity,FileTypeEntity fileTypeEntity,Integer businessObjectFormatVersion){  BusinessObjectFormatEntity businessObjectFormatEntity=new BusinessObjectFormatEntity();  businessObjectFormatEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  businessObjectFormatEntity.setUsage(request.getBusinessObjectFormatUsage());  businessObjectFormatEntity.setFileType(fileTypeEntity);  businessObjectFormatEntity.setBusinessObjectFormatVersion(businessObjectFormatVersion);  businessObjectFormatEntity.setLatestVersion(Boolean.TRUE);  businessObjectFormatEntity.setPartitionKey(request.getPartitionKey());  businessObjectFormatEntity.setDescription(request.getDescription());  if (!CollectionUtils.isEmpty(request.getAttributes())) {    List<BusinessObjectFormatAttributeEntity> attributeEntities=new ArrayList<>();    businessObjectFormatEntity.setAttributes(attributeEntities);    for (    Attribute attribute : request.getAttributes()) {      BusinessObjectFormatAttributeEntity attributeEntity=new BusinessObjectFormatAttributeEntity();      attributeEntities.add(attributeEntity);      attributeEntity.setBusinessObjectFormat(businessObjectFormatEntity);      attributeEntity.setName(attribute.getName());      attributeEntity.setValue(attribute.getValue());    }  }  businessObjectFormatEntity.setAttributeDefinitions(createAttributeDefinitionEntities(request.getAttributeDefinitions(),businessObjectFormatEntity));  populateBusinessObjectFormatSchema(businessObjectFormatEntity,request.getSchema());  return businessObjectFormatDao.saveAndRefresh(businessObjectFormatEntity);}  }
class C{  @Override public void validate(final StatementDescription cd){  final IExpressionDescription desc=cd.getFacet(IKeyword.SPECIES);  if (desc != null) {    final IExpression exp=desc.getExpression();    if (exp != null) {      final IType type=exp.getType();      if (type.isAgentType() && !(type.getSpecies() instanceof ModelDescription)) {        cd.warning("Facet " + IKeyword.SPECIES + " expects a species name and not an agent",IGamlIssue.WRONG_TYPE,IKeyword.SPECIES);      }    }  }  final SpeciesDescription species=cd.getType().getDenotedSpecies();  if (species != null) {    if (species.isAbstract()) {      cd.error("Species " + species.getName() + " is abstract and cannot be instantiated",IGamlIssue.WRONG_TYPE,IKeyword.SPECIES);      return;    } else     if (species.isMirror()) {      cd.error("Species " + species.getName() + " is a mirror and cannot be instantiated",IGamlIssue.WRONG_TYPE,IKeyword.SPECIES);      return;    } else     if (species.isBuiltIn()) {      cd.error("Species " + species.getName() + " is built-in and cannot be instantiated. Instead, you might want to define a concrete child species and instantiate that one.",IGamlIssue.WRONG_TYPE,IKeyword.SPECIES);      return;    } else     if (species.isGrid()) {      cd.error("Species " + species.getName() + " is a grid and cannot be instantiated",IGamlIssue.WRONG_TYPE,IKeyword.SPECIES);      return;    } else     if (species instanceof ModelDescription && !(cd.getSpeciesContext() instanceof ExperimentDescription)) {      cd.error("Simulations can only be created within experiments",IGamlIssue.WRONG_CONTEXT,IKeyword.SPECIES);    }    final SpeciesDescription callerSpecies=cd.getSpeciesContext();    final SpeciesDescription macro=species.getMacroSpecies();    if (macro == null) {      cd.error("The macro-species of " + species + " cannot be determined");    } else     if (macro instanceof ModelDescription && callerSpecies instanceof ModelDescription) {    } else     if (callerSpecies != macro && !callerSpecies.hasMacroSpecies(macro) && !callerSpecies.hasParent(macro)) {      cd.error("No instance of " + macro.getName() + " available for creating instances of "+ species.getName());    }    final IExpression exp=cd.getFacetExpr(FROM);    if (exp != null) {      final IType type=exp.getType();      boolean found=false;      for (      final IType delegateType : delegateTypes) {        found=delegateType.isAssignableFrom(type);        if (found) {          break;        }      }      if (!found) {        cd.warning("Facet 'from' expects an expression with one of the following types: " + delegateTypes,IGamlIssue.WRONG_TYPE,FROM);      }    }  } else {    cd.error("Species cannot be determined");  }}  }
class C{  public static String formatRfc822Date(Date date){  return getRfc822DateFormat().format(date);}  }
class C{  public CertificateX509Key(DerInputStream in) throws IOException {  DerValue val=in.getDerValue();  key=X509Key.parse(val);}  }
class C{  public DNetscapeComment(JDialog parent){  super(parent);  setTitle(res.getString("DNetscapeComment.Title"));  initComponents();}  }
class C{  public final boolean hasExtension(Extension<M,?> extension){  if (unknownFieldData == null) {    return false;  }  FieldData field=unknownFieldData.get(WireFormatNano.getTagFieldNumber(extension.tag));  return field != null;}  }
class C{  public Input(byte[] buffer){  setBuffer(buffer,0,buffer.length);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.RELATIONAL_EXPRESSION__LHS:    return basicSetLhs(null,msgs);case N4JSPackage.RELATIONAL_EXPRESSION__RHS:  return basicSetRhs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public String engineGetCertificateAlias(Certificate cert){  Certificate certElem=null;  for (Enumeration<String> e=engineAliases(); e.hasMoreElements(); ) {    String alias=e.nextElement();    Entry entry=entries.get(alias);    if (entry instanceof PrivateKeyEntry) {      if (((PrivateKeyEntry)entry).chain != null) {        certElem=((PrivateKeyEntry)entry).chain[0];      }    } else     if (entry instanceof CertEntry && ((CertEntry)entry).trustedKeyUsage != null) {      certElem=((CertEntry)entry).cert;    } else {      continue;    }    if (certElem != null && certElem.equals(cert)) {      return alias;    }  }  return null;}  }
class C{  public static RevocationHash calculateRevocationHash(byte[] seed,int depth,int childNumber){  byte[] childseed=seed;  for (int i=0; i < depth; i++) {    childseed=Tools.hashSecret(childseed);  }  if (childNumber == 0) {    return new RevocationHash(depth,childNumber,childseed,null);  }  byte[] childseedWithNumber=new byte[24];  System.arraycopy(childseed,0,childseedWithNumber,0,20);  ByteBuffer buffer=ByteBuffer.allocate(4);  buffer.putInt(childNumber);  buffer.flip();  System.arraycopy(buffer.array(),0,childseedWithNumber,20,4);  byte[] secret=Tools.hashSecret(childseedWithNumber);  byte[] secretHash=Tools.hashSecret(secret);  return new RevocationHash(depth,childNumber,secret,secretHash);}  }
class C{  public ProjectExtensionManager(String extensionName,String extensionVersion,String extensionTargets,String[] extensionDependencies,String antTaskLibrary){  this.extensionName=extensionName;  this.extensionVersion=extensionVersion;  this.extensionTargets=extensionTargets;  this.extensionDependencies=extensionDependencies;  this.antTaskLibrary=antTaskLibrary;}  }
class C{  protected void addSubKeysAndAggregator(Set<String> values,Set<String> keysOfCompositeAggregator,Set<String> subKeys,String aggregatorName,Map<Set<String>,Integer> keysToCombinationId){  if (keysOfCompositeAggregator == null || subKeys == null || keysOfCompositeAggregator.isEmpty() || subKeys.isEmpty()) {    throw new IllegalArgumentException("Both keys and subKeys can't be null or empty");  }  Set<String> allKeys=Sets.newHashSet();  allKeys.addAll(keysOfCompositeAggregator);  allKeys.addAll(subKeys);  if (allKeys.size() != keysOfCompositeAggregator.size() + subKeys.size()) {    throw new IllegalArgumentException("Should NOT have overlap between keys " + keysOfCompositeAggregator.toString() + " and subKeys "+ subKeys);  }  Integer combinationId=keysToCombinationId.get(allKeys);  if (combinationId == null) {    if (dimensionsDescriptorIDToKeys.add(new Fields(allKeys))) {      combinationId=dimensionsDescriptorIDToKeys.size() - 1;    } else {      throw new RuntimeException("The keys " + allKeys + " already existed.");    }    keysToCombinationId.put(allKeys,combinationId);    addValueToAggregatorToCombination(values,allKeys,aggregatorName);  } else {    Set<String> incrementalAggregatorNames;    boolean isOTFAggregator=false;    if (!isIncrementalAggregator(aggregatorName)) {      incrementalAggregatorNames=getOTFDependedIncrementalAggregatorNames(aggregatorName);      isOTFAggregator=true;    } else {      incrementalAggregatorNames=Sets.newHashSet();      incrementalAggregatorNames.add(aggregatorName);    }    Map<String,Set<String>> newValueToIncrementalAggregators=Maps.newHashMap();    Map<String,Set<String>> newValueToOTFAggregators=Maps.newHashMap();    for (    String value : values) {      newValueToIncrementalAggregators.put(value,incrementalAggregatorNames);      if (isOTFAggregator) {        newValueToOTFAggregators.put(value,Sets.newHashSet(aggregatorName));      }    }    int ddid=combinationId * customTimeBucketsCombination.size();    for (int index=0; index < customTimeBucketsCombination.size(); ++index, ++ddid) {      mergeMaps(dimensionsDescriptorIDToValueToAggregator.get(ddid),newValueToIncrementalAggregators);      mergeMaps(dimensionsDescriptorIDToValueToOTFAggregator.get(ddid),newValueToOTFAggregators);    }  }}  }
class C{  public static void initPlugins(){  callPluginInitMethods("initPlugin",new Class[]{},new Object[]{},false);}  }
class C{  public boolean addEdge(H hyperedge,Collection<? extends V> to_attach){  if (hyperedge == null)   throw new IllegalArgumentException("input hyperedge may not be null");  if (to_attach == null)   throw new IllegalArgumentException("endpoints may not be null");  if (to_attach.contains(null))   throw new IllegalArgumentException("cannot add an edge with a null endpoint");  Set<V> new_endpoints=new HashSet<V>(to_attach);  if (edges.containsKey(hyperedge)) {    Collection<V> attached=edges.get(hyperedge);    if (!attached.equals(new_endpoints)) {      throw new IllegalArgumentException("Edge " + hyperedge + " exists in this graph with endpoints "+ attached);    } else     return false;  }  edges.put(hyperedge,new_endpoints);  for (  V v : to_attach) {    addVertex(v);    vertices.get(v).add(hyperedge);  }  return true;}  }
class C{  public BufferedRandomAccessFile(String filename,String mode,int bufsize) throws IOException {  super(filename,mode);  invalidate();  BUF_SIZE=bufsize;  buffer=new byte[BUF_SIZE];}  }
class C{  public final String adjustBarcode(String val){  if (val == null) {    throw new IllegalArgumentException("Cannot create a barcode without value");  }  if (isPadded()) {    this.value=(alignment == BARCODE_ALIGN.RIGHT) ? StringUtils.leftPad(val,length,padder) : StringUtils.rightPad(val,length,padder);  } else {    this.value=val;  }  return this.value;}  }
class C{  private synchronized void updateThreadPanel(boolean forceUpdate){  if (!forceUpdate && !isVisible()) {    return;  }  threadPanel.removeAll();  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=1.0;  gbc.weighty=0.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.ipady=10;  for (  ProgressThread currentThread : ProgressThread.getCurrentThreads()) {    ProgressThreadDisplay pgPanel=new ProgressThreadDisplay(currentThread,false);    threadPanel.add(pgPanel,gbc);    MAPPING_PG_TO_UI.put(currentThread,pgPanel);    updateProgressMessage(currentThread);    updateProgress(currentThread);    gbc.gridy+=1;  }  for (  ProgressThread queuedThread : ProgressThread.getQueuedThreads()) {    ProgressThreadDisplay pgPanel=new ProgressThreadDisplay(queuedThread,true);    threadPanel.add(pgPanel,gbc);    MAPPING_PG_TO_UI.put(queuedThread,pgPanel);    gbc.gridy+=1;  }  gbc.gridy+=1;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  threadPanel.add(new JLabel(),gbc);  threadPanel.revalidate();  threadPanel.repaint();}  }
class C{  public void configure(){  this.getSystemConnectionMemo().setQsiTrafficController(new QsiTrafficController());  this.getSystemConnectionMemo().getQsiTrafficController().connectPort(this);  this.getSystemConnectionMemo().configureManagers();  sinkThread=new Thread(this.getSystemConnectionMemo().getQsiTrafficController());  sinkThread.start();  jmri.jmrix.qsi.ActiveFlag.setActive();}  }
class C{  public void sort() throws Exception {  sort(m_map,0,m_firstFree - 1);}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    URI snapId=getTaskCompleter().getId();    Snapshot snapshotObj=dbClient.queryObject(Snapshot.class,snapId);    URI fsUri=snapshotObj.getParent().getURI();    FileShare fsObj=dbClient.queryObject(FileShare.class,fsUri);    StorageSystem storageObj=dbClient.queryObject(StorageSystem.class,getStorageSystemUri());    String event=null;    if (_status == JobStatus.SUCCESS && snapshotObj != null) {      snapshotObj.setInactive(true);      dbClient.persistObject(snapshotObj);      event=String.format("Deleted file sytem snapshot %s successfully",snapshotObj.getName());      logMsgBuilder.append("\n");      logMsgBuilder.append(event);    } else     if (_status == JobStatus.FAILED && snapshotObj != null) {      event=String.format("Task %s failed to delete file system snapshot: %s",opId,snapshotObj.getName());      logMsgBuilder.append("\n");      logMsgBuilder.append(event);    } else {      event="File sytem snapshot has been deleted";      logMsgBuilder.append(String.format("Could not find the snapshot: %s",snapId));    }    _logger.info(logMsgBuilder.toString());    FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.DELETE_FILE_SNAPSHOT,_isSuccess,event,"",snapshotObj,fsObj,storageObj);  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeDeleteFileSystemSnapshotJob",e);    setErrorStatus("Encountered an internal error during file system snapshot delete job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  protected void resetFrame(){  lastDispose=dispose;  lastRect=new Rectangle(ix,iy,iw,ih);  lastImage=image;  lastBgColor=bgColor;  lct=null;}  }
class C{  TransitionDrawable(){  this(new TransitionState(null,null,null),(Resources)null);}  }
class C{  private void executeAction(Action type,File deploymentFile,String deploymentName) throws Exception {  String hostname=this.configuration.getPropertyValue(GeneralPropertySet.HOSTNAME);  String portname;  if (this.configuration.getCapability().supportsProperty(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT)) {    portname=this.configuration.getPropertyValue(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT);  } else {    portname=this.configuration.getPropertyValue(JBossPropertySet.JBOSS_MANAGEMENT_HTTP_PORT);  }  int portnumber=Integer.parseInt(portname);  ModelControllerClient client=ModelControllerClient.Factory.create(hostname,portnumber,new UsernamePasswordCallbackHandler(this.configuration));  try {    ServerDeploymentManager manager=ServerDeploymentManager.Factory.create(client);    DeploymentPlanBuilder builder=manager.newDeploymentPlan();    DeploymentPlan plan;switch (type) {case DEPLOY:      plan=builder.add(deploymentName,new FileInputStream(deploymentFile)).deploy(deploymentName).build();    break;case UNDEPLOY:  plan=builder.undeploy(deploymentName).remove(deploymentName).build();break;default :throw new IllegalStateException("Invalid action: " + type);}if (plan.getDeploymentActions().size() > 0) {ServerDeploymentPlanResult planResult=manager.execute(plan).get();for (DeploymentAction action : plan.getDeploymentActions()) {ServerDeploymentActionResult actionResult=planResult.getDeploymentActionResult(action.getId());ServerUpdateActionResult.Result result=actionResult.getResult();switch (result) {case FAILED:case NOT_EXECUTED:case ROLLED_BACK:throw new CargoException("Deployment action " + action.getType() + " failed",actionResult.getDeploymentException());case CONFIGURATION_MODIFIED_REQUIRES_RESTART:break;default :break;}}}}  finally {try {client.close();} catch (IOException e) {this.configuration.getLogger().warn("Failed closing the JBoss deployment client: " + e.toString(),this.getClass().getName());}}}  }
class C{  @Override public double mean(){  QL.require(sampleWeight_ > 0.0,UNSUFFICIENT_SAMPLE_WEIGHT);  return sum_ / sampleWeight_;}  }
class C{  public void drawFigure(Graphics2D g){  AffineTransform savedTransform=null;  if (get(TRANSFORM) != null) {    savedTransform=g.getTransform();    g.transform(get(TRANSFORM));  }  Paint paint=SVGAttributeKeys.getFillPaint(this);  if (paint != null) {    g.setPaint(paint);    drawFill(g);  }  paint=SVGAttributeKeys.getStrokePaint(this);  if (paint != null && get(STROKE_WIDTH) > 0) {    g.setPaint(paint);    g.setStroke(SVGAttributeKeys.getStroke(this));    drawStroke(g);  }  if (get(TRANSFORM) != null) {    g.setTransform(savedTransform);  }}  }
class C{  private static void adjustAbs(double[] array,int lower,int upper){  int j, k;  double temp;  j=lower;  k=lower * 2;  while (k <= upper) {    if ((k < upper) && (Math.abs(array[k - 1]) < Math.abs(array[k]))) {      k+=1;    }    if (Math.abs(array[j - 1]) < Math.abs(array[k - 1])) {      temp=array[j - 1];      array[j - 1]=array[k - 1];      array[k - 1]=temp;    }    j=k;    k*=2;  }}  }
class C{  protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;}  }
class C{  public void put(Block block){  size++;}  }
class C{  public VerletPhysics2D addParticle(VerletParticle2D p){  particles.add(p);  return this;}  }
class C{  public int write(final ByteBuffer byteBuffer) throws IOException {  ensureOpen();  final int remaining=byteBuffer.remaining();  if (inspectable < buffer.length) {    final int toBuffer=Math.min(buffer.length - inspectable,remaining);    byteBuffer.get(buffer,inspectable,toBuffer);    inspectable+=toBuffer;  }  if (byteBuffer.hasRemaining()) {    fileChannel.position(writePosition);    writePosition+=fileChannel.write(byteBuffer);  }  return remaining;}  }
class C{  public static Annotations combine(Annotations a1,Annotations a2){  Annotations result=new Annotations();  result.addAll(a1);  result.addAll(a2);  result.setImmutable();  return result;}  }
class C{  private static double[] GetFirstControlPoints(double[] rhs){  int n=rhs.length;  double[] x=new double[n];  double[] tmp=new double[n];  double b=2.0;  x[0]=rhs[0] / b;  for (int i=1; i < n; i++) {    tmp[i]=1 / b;    b=(i < n - 1 ? 4.0 : 3.5) - tmp[i];    x[i]=(rhs[i] - x[i - 1]) / b;  }  for (int i=1; i < n; i++) {    x[n - i - 1]-=tmp[n - i] * x[n - i];  }  return x;}  }
class C{  public MessageDialog(Window owner,String i18nKey,JComponent c,Object... i18nArgs){  super(owner,"message." + i18nKey,ModalityType.APPLICATION_MODAL,i18nArgs);  layoutDefault(c,makeOkButton());}  }
class C{  @Override public void write(DataOutput dataOutput) throws IOException {  if (ryaStatement == null) {    throw new IOException("Rya Statement is null");  }  try {    Map<RdfCloudTripleStoreConstants.TABLE_LAYOUT,TripleRow> map=ryaContext.serializeTriple(ryaStatement);    TripleRow tripleRow=map.get(RdfCloudTripleStoreConstants.TABLE_LAYOUT.SPO);    byte[] row=tripleRow.getRow();    byte[] columnFamily=tripleRow.getColumnFamily();    byte[] columnQualifier=tripleRow.getColumnQualifier();    write(dataOutput,row);    write(dataOutput,columnFamily);    write(dataOutput,columnQualifier);    write(dataOutput,ryaStatement.getColumnVisibility());    write(dataOutput,ryaStatement.getValue());    Long timestamp=ryaStatement.getTimestamp();    boolean b=timestamp != null;    dataOutput.writeBoolean(b);    if (b) {      dataOutput.writeLong(timestamp);    }  } catch (  TripleRowResolverException e) {    throw new IOException(e);  }}  }
class C{  double maxError(){  return Math.sqrt(image.getWidth(null) * image.getHeight(null) * (255.0 * 255.0)* 3);}  }
class C{  final void reject(Runnable command){  handler.rejectedExecution(command,this);}  }
class C{  public void preSaveInit(){  persistentData.clear();  for (int i=0; i < getNumPoints(); i++) {    persistentData.add(getPoint(i));  }}  }
class C{  public DynamicPercept(Object key1,Object value1){  setAttribute(key1,value1);}  }
class C{  public void queryLibraryVersion(){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  Log.i("Device " + this.name + ": Query library version.");  isLibraryVersionQueried=false;  sendLibraryVersionQueryFrame();}  }
class C{  public NetworkEvent(Network net,final T theThing){  super(net);  this.theObject=theThing;}  }
class C{  BlazeBindingSet(final Map<String,Object> vals){  this.vals=vals;}  }
class C{  protected void notifyStopProcess(){synchronized (listeners) {    for (    INodejsProcessListener listener : listeners) {      listener.onStop(this);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public NodeSetDTM(NodeIterator iterator,XPathContext xctxt){  super();  Node node;  m_manager=xctxt.getDTMManager();  while (null != (node=iterator.nextNode())) {    int handle=xctxt.getDTMHandleFromNode(node);    addNodeInDocOrder(handle,xctxt);  }}  }
class C{  public Boolean hasRelation(String relationId) throws IllegalArgumentException {  if (relationId == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"hasRelation",relationId);  try {    Object result=getRelation(relationId);    return true;  } catch (  RelationNotFoundException exc) {    return false;  }}  }
class C{  public UnsignedMessageFromClientProxy(){  requestFileName="attachm.query";  requestContentType="multipart/mixed; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";  url="http://127.0.0.1:" + PortNumbers.PROXY_PORT;}  }
class C{  private double treeRecursion(IntMathVec iSignature,IntMathVec iPos){  if (iNativeMethod.isAvailable()) {    return iNativeMethod.treeRecursion(iSignature,iPos);  }  int iLeaves=iSignature.iV.length;  int iNumNodes=iParent.length;  int[] iHom=new int[iNumNodes];  int[] iHomNum=new int[iNumNodes];  int[] iHomMultiplicity=new int[cMaxUnalignDimension + 1];  int[] iChild1=new int[iNumNodes], iChild2=new int[iNumNodes];  double[][] iFh=new double[iNumNodes][], iFi=new double[iNumNodes][];  for (int i=0; i < iNumNodes; i++) {    iFh[i]=new double[iNumNucs];    iFi[i]=new double[iNumNucs + 1];  }  for (int i=0; i < iLeaves; i++) {    iHomMultiplicity[iSignature.iV[i]]++;    iHom[i]=iSignature.iV[i];    if (iSignature.iV[i] == 0)     iHomNum[i]=0; else     iHomNum[i]=1;  }  boolean iClashingHomology=false;  for (int i=0; i < iNumNodes - 1; i++) {    if ((iHomNum[i] == iHomMultiplicity[iHom[i]]) || (iHom[i] == 0)) {    } else {      if (iHom[iParent[i]] == 0 || iHom[iParent[i]] == iHom[i]) {        iHom[iParent[i]]=iHom[i];        iHomNum[iParent[i]]+=iHomNum[i];      } else {        iClashingHomology=true;      }    }    if (iChild1[iParent[i]] == 0)     iChild1[iParent[i]]=i; else     iChild2[iParent[i]]=i;  }  if (iClashingHomology) {    return 0.0;  }  for (int i=0; i < iLeaves; i++) {    if (iSignature.iV[i] == 0) {      iFi[i][iNumNucs]=1.0;    } else {      iFh[i][iSequences[i][iPos.iV[i]]]=1.0;    }  }  for (int i=iLeaves; i < iNumNodes; i++) {    if ((iHom[i] != 0) && (iHom[i] == iHom[iChild1[i]]) && (iHom[i] == iHom[iChild2[i]])) {      for (int j=0; j < iNumNucs; j++) {        double iL=0.0;        double iR=0.0;        for (int k=0; k < iNumNucs; k++) {          iL+=iFh[iChild1[i]][k] * iH[iChild1[i]] * iTrans[iChild1[i]][j][k];          iR+=iFh[iChild2[i]][k] * iH[iChild2[i]] * iTrans[iChild2[i]][j][k];        }        iFh[i][j]=iL * iR;      }    } else     if (iHom[i] != 0) {      int iChildH, iChildI;      if (iHom[i] == iHom[iChild1[i]]) {        iChildH=iChild1[i];        iChildI=iChild2[i];      } else {        iChildH=iChild2[i];        iChildI=iChild1[i];      }      for (int j=0; j < iNumNucs; j++) {        double iL=0.0;        double iR=iE[iChildI] * iFi[iChildI][iNumNucs];        for (int k=0; k < iNumNucs; k++) {          iL+=iFh[iChildH][k] * iH[iChildH] * iTrans[iChildH][j][k];          iR+=(iFh[iChildI][k] + iFi[iChildI][k]) * (iN[iChildI] - iE[iChildI] * iB[iChildI]) * iEquil[k] + iFi[iChildI][k] * iH[iChildI] * iTrans[iChildI][j][k];        }        iFh[i][j]=iL * iR;      }    } else {      int iC1=iChild1[i];      int iC2=iChild2[i];      for (int j=0; j < iNumNucs; j++) {        double iL1=0.0, iL2=0.0;        double iR1=iE[iC1] * iFi[iC1][iNumNucs];        double iR2=iE[iC2] * iFi[iC2][iNumNucs];        for (int k=0; k < iNumNucs; k++) {          iL1+=iFh[iC1][k] * iH[iC1] * iTrans[iC1][j][k];          iL2+=iFh[iC2][k] * iH[iC2] * iTrans[iC2][j][k];          iR1+=(iFh[iC1][k] + iFi[iC1][k]) * (iN[iC1] - iE[iC1] * iB[iC1]) * iEquil[k] + iFi[iC1][k] * iH[iC1] * iTrans[iC1][j][k];          iR2+=(iFh[iC2][k] + iFi[iC2][k]) * (iN[iC2] - iE[iC2] * iB[iC2]) * iEquil[k] + iFi[iC2][k] * iH[iC2] * iTrans[iC2][j][k];        }        iFh[i][j]=iL1 * iR2 + iL2 * iR1;        iFi[i][j]=iR1 * iR2;      }      double iL=iFi[iC1][iNumNucs];      double iR=iFi[iC2][iNumNucs];      for (int j=0; j < iNumNucs; j++) {        iL-=iB[iC1] * (iFi[iC1][j] + iFh[iC1][j]) * iEquil[j];        iR-=iB[iC2] * (iFi[iC2][j] + iFh[iC2][j]) * iEquil[j];      }      iFi[i][iNumNucs]=iL * iR;    }  }  int iRoot=iNumNodes - 1;  double iResult=iFi[iRoot][iNumNucs];  for (int i=0; i < iNumNucs; i++)   iResult-=(iFi[iRoot][i] + iFh[iRoot][i]) * iB[iRoot] * iEquil[i];  return iResult;}  }
class C{  public BytesInputStream(byte[] data){  super(data);  dataInputStream=new DataInputStream(this);}  }
class C{  public VNXeCommandResult modifyLunSync(LunModifyParam param,String resourceId){  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);  urlBld.append(resourceId);  urlBld.append(URL_LUN_MODIFY_ACTION);  _url=urlBld.toString();  VNXeCommandResult result=postRequestSync(param);  result.setSuccess(true);  return result;}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  public static void sleep(){  try {    Thread.sleep(TestSettings.RESPONSE_WAIT);  } catch (  InterruptedException e) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.631 -0500",hash_original_method="213D34FB491711CFF086DB4B25220A73",hash_generated_method="DE80E8A4A362E5C8FE3D32DB67B0C882") public char next(){  return pos < in.length() ? in.charAt(pos++) : '\0';}  }
class C{  public Period(ReadableInstant startInstant,ReadableInstant endInstant){  super(startInstant,endInstant,null);}  }
class C{  public void refresh(){  PendingChange[] newPendingChanges=null;  PendingSet pendingSet;  try {    pendingSet=workspace.getPendingChanges();  } catch (  final Exception e) {    log.error("Error refreshing pending change cache",e);    return;  }  if (pendingSet != null) {    newPendingChanges=pendingSet.getPendingChanges();  }  if (newPendingChanges == null) {    newPendingChanges=new PendingChange[0];  }synchronized (atomicOperationLock) {    beginUpdatePendingChanges();    try {      clearPendingChanges();      for (int i=0; i < newPendingChanges.length; i++) {        addPendingChange(newPendingChanges[i],true);      }    }  finally {      endUpdatePendingChanges();    }  }}  }
class C{  public static int pickFromDistribution(final Object[] objs,final RandomChoiceChooserD chooser,final double prob,final int checkboundary){  if (prob < 0.0 || prob > 1.0)   throw new ArithmeticException("Invalid probability for pickFromDistribution (must be 0.0<=x<=1.0)");  if (objs.length == 1)   return 0; else   if (objs.length < checkboundary) {    for (int x=0; x < objs.length - 1; x++)     if (chooser.getProbability(objs[x]) > prob)     return exemptZeroes(objs,chooser,x);    return exemptZeroes(objs,chooser,objs.length - 1);  } else {    int top=objs.length - 1;    int bottom=0;    int cur;    while (top != bottom) {      cur=(top + bottom) / 2;      if (chooser.getProbability(objs[cur]) > prob)       if (cur == 0 || chooser.getProbability(objs[cur - 1]) <= prob)       return exemptZeroes(objs,chooser,cur); else       top=cur; else       if (cur == objs.length - 1)       return exemptZeroes(objs,chooser,cur); else       if (bottom == cur)       bottom++; else       bottom=cur;    }    return exemptZeroes(objs,chooser,bottom);  }}  }
class C{  public static String map2AlgName(String oid){  String algUC=oid2AlgMap.get(oid);  return algUC == null ? null : algAliasesMap.get(algUC);}  }
class C{  public MovingButtonContainer(){  setLayout(new java.awt.FlowLayout());  timer=new Timer(30,this);  button=new JButton("Start Animation");  button.setOpaque(false);  button.addActionListener(this);  add(button);}  }
class C{  public void showFragment(int position,boolean reset,boolean allowingStateLoss){  this.mCurrentPosition=position;  FragmentTransaction transaction=mFragmentManager.beginTransaction();  int count=mAdapter.getCount();  for (int i=0; i < count; i++) {    if (position == i) {      if (reset) {        remove(position,transaction);        add(position,transaction);      } else {        show(i,transaction);      }    } else {      hide(i,transaction);    }  }  if (allowingStateLoss) {    transaction.commitAllowingStateLoss();  } else {    transaction.commit();  }}  }
class C{  private boolean isNeededToolEquipped(RPEntity entity){  for (  String tool : tools) {    if (entity.isEquipped(tool)) {      return true;    }  }  return false;}  }
class C{  private static Object[] convertToColumns(Object[][] data){  Object[] row=data[0];  int nrow=data.length;  Object[] results=new Object[row.length];  for (int col=0; col < row.length; col++) {    if (row[col] instanceof String) {      String[] sa=new String[nrow];      for (int irow=0; irow < nrow; irow++) {        sa[irow]=(String)data[irow][col];      }      results[col]=sa;    } else {      Class<?> base=ArrayFuncs.getBaseClass(row[col]);      int[] dims=ArrayFuncs.getDimensions(row[col]);      if (dims.length > 1 || dims[0] > 1) {        int[] xdims=new int[dims.length + 1];        xdims[0]=nrow;        Object[] arr=(Object[])ArrayFuncs.newInstance(base,xdims);        for (int irow=0; irow < nrow; irow++) {          arr[irow]=data[irow][col];        }        results[col]=arr;      } else {        Object arr=ArrayFuncs.newInstance(base,nrow);        for (int irow=0; irow < nrow; irow++) {          System.arraycopy(data[irow][col],0,arr,irow,1);        }        results[col]=arr;      }    }  }  return results;}  }
class C{  private static void validateInteger(String fieldName,String value){  validateRegex(fieldName,value,INTEGER_REGEX,MessagesUtils.get(INVALID_INTEGER_KEY));}  }
class C{  public static void expand(){  Node root=readTrie();  int length=BinaryStdIn.readInt();  for (int i=0; i < length; i++) {    Node x=root;    while (!x.isLeaf()) {      boolean bit=BinaryStdIn.readBoolean();      if (bit)       x=x.right; else       x=x.left;    }    BinaryStdOut.write(x.ch,8);  }  BinaryStdOut.close();}  }
class C{  @Override public Header onGetInitialHeader(){  String fragmentClass=getStartingFragmentClass(super.getIntent());  if (fragmentClass != null) {    Header header=new Header();    header.fragment=fragmentClass;    header.title=getTitle();    header.fragmentArguments=getIntent().getExtras();    mCurrentHeader=header;    return header;  }  return mFirstHeader;}  }
class C{  public void removeResult(String name){  StringBuffer buff=m_Results.get(name);  if (buff != null) {    m_Results.remove(name);    m_Model.removeElement(name);    m_Objs.remove(name);    System.gc();  }}  }
class C{  public CipherInputStream(InputStream is,BufferedBlockCipher cipher){  super(is);  this.bufferedBlockCipher=cipher;  buf=new byte[cipher.getOutputSize(INPUT_BUF_SIZE)];  inBuf=new byte[INPUT_BUF_SIZE];}  }
class C{  public Boolean isUplinkPort(){  return uplinkPort;}  }
class C{  public void onLoaded(){  if (!addedToEnet && !FMLCommonHandler.instance().getEffectiveSide().isClient() && Info.isIc2Available()) {    worldObj=parent.getWorldObj();    xCoord=parent.xCoord;    yCoord=parent.yCoord;    zCoord=parent.zCoord;    MinecraftForge.EVENT_BUS.post(new EnergyTileLoadEvent(this));    addedToEnet=true;  }}  }
class C{  @SuppressWarnings("unchecked") public static void discoverDefaultEncodeables(Map<NodeId,Class<IEncodeable>> map){  Class<?> clazz=Identifiers.class;  ClassLoader cl=clazz.getClassLoader();  int index=clazz.getCanonicalName().lastIndexOf(".");  String prefix=clazz.getCanonicalName().substring(0,index);  for (  Field f : clazz.getFields()) {    f.setAccessible(true);    try {      String className=prefix + "." + f.getName();      Class<IEncodeable> c=(Class<IEncodeable>)cl.loadClass(className);      if (!IEncodeable.class.isAssignableFrom(c))       continue;      for (      Field cf : c.getFields()) {        cf.setAccessible(true);        if (!cf.getType().equals(NodeId.class))         continue;        NodeId nodeId;        try {          nodeId=(NodeId)cf.get(null);        } catch (        IllegalArgumentException e) {          throw new RuntimeException("Failed to load default identifiers",e);        }catch (        IllegalAccessException e) {          throw new RuntimeException("Failed to load default identifiers",e);        }        if (nodeId == null)         throw new RuntimeException("Failed to load default identifiers");        map.put(nodeId,c);      }    } catch (    ClassNotFoundException e) {      continue;    }  }}  }
class C{  public final void renameClass(String oldname,String newname){  ArrayList list;  int n;  if (oldname.equals(newname))   return;  if (oldname.equals(thisclassname))   thisclassname=newname;  oldname=Descriptor.toJvmName(oldname);  newname=Descriptor.toJvmName(newname);  constPool.renameClass(oldname,newname);  AttributeInfo.renameClass(attributes,oldname,newname);  list=methods;  n=list.size();  for (int i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    String desc=minfo.getDescriptor();    minfo.setDescriptor(Descriptor.rename(desc,oldname,newname));    AttributeInfo.renameClass(minfo.getAttributes(),oldname,newname);  }  list=fields;  n=list.size();  for (int i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    String desc=finfo.getDescriptor();    finfo.setDescriptor(Descriptor.rename(desc,oldname,newname));    AttributeInfo.renameClass(finfo.getAttributes(),oldname,newname);  }}  }
class C{  private GeoMatch geomatch(LinkedHashMap<Integer,String> mix,final boolean preferLargePopulation){  TreeMap<Long,GeoMatch> cand=new TreeMap<>();  int hitcount=0;  for (  Map.Entry<Integer,String> entry : mix.entrySet()) {    if (cand.size() > 0 && entry.getValue().indexOf(' ') < 0)     return preferNonStopwordLocation(cand.values(),preferLargePopulation);    List<Integer> locs=this.hash2ids.get(entry.getKey());    if (locs == null || locs.size() == 0)     continue;    for (    Integer i : locs) {      GeoLocation loc=this.id2loc.get(i);      if (loc != null) {        for (        String name : loc.getNames()) {          if (normalize(entry.getValue()).equals(normalize(name))) {            cand.put(hitcount++ - loc.getPopulation(),new GeoMatch(entry.getValue(),loc));            break;          }        }      }    }  }  return cand.size() > 0 ? preferNonStopwordLocation(cand.values(),preferLargePopulation) : null;}  }
class C{  float layerSize(int par1){  if ((double)par1 < (double)((float)this.heightLimit) * 0.3D) {    return -1.618F;  } else {    float var2=(float)this.heightLimit / 2.0F;    float var3=(float)this.heightLimit / 2.0F - (float)par1;    float var4;    if (var3 == 0.0F) {      var4=var2;    } else     if (Math.abs(var3) >= var2) {      var4=0.0F;    } else {      var4=(float)Math.sqrt(Math.pow((double)Math.abs(var2),2.0D) - Math.pow((double)Math.abs(var3),2.0D));    }    var4*=0.5F;    return var4;  }}  }
class C{  private void moveNode(SimpleTreeNode movingNode,SimpleTreeNode toNode){  log.info(movingNode.toString() + " to " + toNode.toString());  if (movingNode == toNode)   return;  MTreeNode toMNode=(MTreeNode)toNode.getData();  SimpleTreeNode newParent;  int index;  if (!toMNode.isSummary()) {    moveNode(movingNode,toNode,false);  } else {    int path[]=treeModel.getPath(treeModel.getRoot(),toNode);    Treeitem toItem=tree.renderItemByPath(path);    tree.setSelectedItem(toItem);    Events.sendEvent(tree,new Event(Events.ON_SELECT,tree));    MenuListener listener=new MenuListener(movingNode,toNode);    Menupopup popup=new Menupopup();    Menuitem menuItem=new Menuitem("Insert After");    menuItem.setValue("InsertAfter");    menuItem.setParent(popup);    menuItem.addEventListener(Events.ON_CLICK,listener);    menuItem=new Menuitem("Move Into");    menuItem.setValue("MoveInto");    menuItem.setParent(popup);    menuItem.addEventListener(Events.ON_CLICK,listener);    popup.setPage(tree.getPage());    popup.open(toItem.getTreerow());  }}  }
class C{  public int entryPoint(){  int pc=curCP();  alive=true;  pendingStackMap=needStackMap;  return pc;}  }
class C{  public Label(String text,String uiid){  noBind=true;  this.text=text;  localize();  setFocusable(false);  setUIID(uiid);  endsWith3Points=UIManager.getInstance().getLookAndFeel().isDefaultEndsWith3Points();}  }
class C{  public void AddKey(Key key){  keys.add(key);  if (key.getType() == Key.Primary) {    primaryKey=key;    purge(key.getColumns(),nonKeyColumns);  } else   if (key.getType() == Key.Unique) {    uniqueKeys.add(key);  }}  }
class C{  public void testMergeOneServletWithMultipleMappingsIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "  <servlet-mapping>"+ "    <servlet-name>s1</servlet-name>"+ "    <url-pattern>/s1mapping1</url-pattern>"+ "  </servlet-mapping>"+ "  <servlet-mapping>"+ "    <servlet-name>s1</servlet-name>"+ "    <url-pattern>/s1mapping2</url-pattern>"+ "  </servlet-mapping>"+ "  <servlet-mapping>"+ "    <servlet-name>s1</servlet-name>"+ "    <url-pattern>/s1mapping3</url-pattern>"+ "  </servlet-mapping>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasServlet(srcWebXml,"s1"));  List<String> servletMappings=WebXmlUtils.getServletMappings(srcWebXml,"s1");  assertEquals(3,servletMappings.size());  assertEquals("/s1mapping1",servletMappings.get(0));  assertEquals("/s1mapping2",servletMappings.get(1));  assertEquals("/s1mapping3",servletMappings.get(2));}  }
class C{  public void doTestEntityExpiration() throws Exception {  IDeviceListener mockListener=createMock(IDeviceListener.class);  expect(mockListener.getName()).andReturn("mockListener").anyTimes();  expect(mockListener.isCallbackOrderingPostreq((String)anyObject(),(String)anyObject())).andReturn(false).atLeastOnce();  expect(mockListener.isCallbackOrderingPrereq((String)anyObject(),(String)anyObject())).andReturn(false).atLeastOnce();  ITopologyService mockTopology=createMock(ITopologyService.class);  expect(mockTopology.isAttachmentPointPort(anyLong(),anyShort())).andReturn(true).anyTimes();  expect(mockTopology.isBroadcastDomainPort(1L,(short)1)).andReturn(false).anyTimes();  expect(mockTopology.isBroadcastDomainPort(5L,(short)1)).andReturn(false).anyTimes();  expect(mockTopology.getL2DomainId(1L)).andReturn(1L).anyTimes();  expect(mockTopology.getL2DomainId(5L)).andReturn(5L).anyTimes();  expect(mockTopology.isConsistent(1L,(short)1,5L,(short)1)).andReturn(false).anyTimes();  Date topologyUpdateTime=new Date();  expect(mockTopology.getLastUpdateTime()).andReturn(topologyUpdateTime).anyTimes();  replay(mockTopology);  deviceManager.topology=mockTopology;  Calendar c=Calendar.getInstance();  Entity entity1=new Entity(1L,null,2,1L,1,c.getTime());  c.add(Calendar.MILLISECOND,-DeviceManagerImpl.ENTITY_TIMEOUT - 1);  Entity entity2=new Entity(1L,null,1,5L,1,c.getTime());  deviceManager.learnDeviceByEntity(entity1);  IDevice d=deviceManager.learnDeviceByEntity(entity2);  assertArrayEquals(new Integer[]{1,2},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(1L,1),new SwitchPort(5L,1)},d.getAttachmentPoints());  Iterator<? extends IDevice> diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,1,null,null);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,2,null,null);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  replay(mockListener);  deviceManager.addListener(mockListener);  verify(mockListener);  reset(mockListener);  mockListener.deviceIPV4AddrChanged(isA(IDevice.class));  replay(mockListener);  deviceManager.entityCleanupTask.reschedule(0,null);  d=deviceManager.getDevice(d.getDeviceKey());  assertArrayEquals(new Integer[]{2},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(1L,1),new SwitchPort(5L,1)},d.getAttachmentPoints());  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,2,null,null);  assertTrue(diter.hasNext());  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,1,null,null);  assertFalse(diter.hasNext());  d=deviceManager.findDevice(1L,null,null,null,null);  assertArrayEquals(new Integer[]{2},d.getIPv4Addresses());  assertArrayEquals(new SwitchPort[]{new SwitchPort(1L,1),new SwitchPort(5L,1)},d.getAttachmentPoints());  verify(mockListener);}  }
class C{  private static int checkTypeArguments(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkTypeArgument(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkTypeArgument(signature,pos);  }  return pos + 1;}  }
class C{  protected BottomSheet(@NonNull final Context context,@StyleRes final int themeResourceId){  super(context,themeResourceId);  initialize();}  }
class C{  private void themeUI(int primaryColor,int seekBarColor){  findViewById(R.id.media_controls).setBackgroundColor(primaryColor);  getWindow().setStatusBarColor(ColorHelper.getStatusBarColor(primaryColor));  mToolbar.setBackgroundColor(primaryColor);  int textColor=ColorHelper.getTextColor(primaryColor);  mSeekBackward.setImageTintList(ColorStateList.valueOf(textColor));  mSeekForward.setImageTintList(ColorStateList.valueOf(textColor));  mPlayButton.setImageTintList(ColorStateList.valueOf(textColor));  mInfo.setImageTintList(ColorStateList.valueOf(textColor));  mFavoriteButton.setImageTintList(ColorStateList.valueOf(textColor));  mSeekBar.setProgressBackgroundTintList(ColorStateList.valueOf(seekBarColor));  mSeekBar.setBackgroundTintList(ColorStateList.valueOf(seekBarColor));  mSeekBar.setProgressTintList(ColorStateList.valueOf(primaryColor));  mSeekBar.setSecondaryProgressTintList(ColorStateList.valueOf(ColorHelper.darkenColor(primaryColor)));  mSeekBar.setThumbTintList(ColorStateList.valueOf(primaryColor));}  }
class C{  public static void CheckNumberOfAffectedChains(){  LOG.info("Checking the number of affected facilities.");  Map<Integer,Integer> countMap=new TreeMap<>();  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(sc).readFile("/Volumes/Nifty/workspace/coct-data/matsim/20150930/output/ITERS/it.0/0.plans.xml.gz");  for (  Person person : sc.getPopulation().getPersons().values()) {    int affected=countNumberOfAffectedFacilities(person.getSelectedPlan());    if (affected > 4) {      LOG.info("  Id " + person.getId().toString() + " has "+ affected+ " affected activities.");    }    if (countMap.containsKey(affected)) {      int oldValue=countMap.get(affected);      countMap.put(affected,oldValue + 1);    } else {      countMap.put(affected,1);    }  }  LOG.info("Affected facilities:");  for (  Integer i : countMap.keySet()) {    LOG.info(String.format("%3s: %d",i.toString(),countMap.get(i)));  }  LOG.info("Done checking affected facilities.");}  }
class C{  public static String quote(String input){  String output="";  for (int i=0; i < input.length(); i++) {    output+="\\" + input.charAt(i);  }  return output;}  }
class C{  public boolean isOneTime(){  Object oo=get_Value(COLUMNNAME_IsOneTime);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Matrix zoomIn(float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(1.4f,1.4f,x,y);  return save;}  }
class C{  protected void renderScene(GL10 gl,PLIScene scene,PLICamera camera){  if (scene != null && camera != null) {    gl.glMatrixMode(GL10.GL_PROJECTION);    gl.glLoadIdentity();    GLU.gluPerspective(gl,camera.getFov(),PLConstants.kPerspectiveAspect,PLConstants.kPerspectiveZNear,PLConstants.kPerspectiveZFar);    gl.glMatrixMode(GL10.GL_MODELVIEW);    scene.render(gl,this);  }}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  public <T>Pair<String,Class<Object>> resolveSerializationType(final T fieldValue){  final FieldBaseTypes type=FieldBaseTypes.resolveType(fieldValue);  return Pair.of(type.name(),type.getSerializationType());}  }
class C{  private static void addDom(ScrDom dom,Element parent){  Element row=parent.addElement(XML_DOMICILIO_TEXT);  if (dom.getAddress() != null) {    row.addElement(XML_DIRECCION_TEXT).add(DocumentHelper.createCDATA(dom.getAddress()));  } else {    row.addElement(XML_DIRECCION_TEXT).add(DocumentHelper.createCDATA(BLANCO));  }  if (dom.getZip() != null) {    row.addElement(XML_CODPOSTAL_TEXT).add(DocumentHelper.createCDATA(dom.getZip()));  } else {    row.addElement(XML_CODPOSTAL_TEXT).add(DocumentHelper.createCDATA(BLANCO));  }  if (dom.getCity() != null) {    row.addElement(XML_POBLACION_TEXT).add(DocumentHelper.createCDATA(dom.getCity()));  } else {    row.addElement(XML_POBLACION_TEXT).add(DocumentHelper.createCDATA(BLANCO));  }  if (dom.getCountry() != null) {    row.addElement(XML_PROVINCIA_TEXT).add(DocumentHelper.createCDATA(dom.getCountry()));  } else {    row.addElement(XML_PROVINCIA_TEXT).add(DocumentHelper.createCDATA(BLANCO));  }  row.addElement(XML_ID_TEXT).addText(dom.getId().toString());  row.addElement(XML_PREFERENCIA_TEXT).addText(Integer.toString(dom.getPreference()));}  }
class C{  void writeExternal(DataOutput out) throws IOException {  out.writeInt(standardTransitions.length);  for (  long trans : standardTransitions) {    Ser.writeEpochSec(trans,out);  }  for (  ZoneOffset offset : standardOffsets) {    Ser.writeOffset(offset,out);  }  out.writeInt(savingsInstantTransitions.length);  for (  long trans : savingsInstantTransitions) {    Ser.writeEpochSec(trans,out);  }  for (  ZoneOffset offset : wallOffsets) {    Ser.writeOffset(offset,out);  }  out.writeByte(lastRules.length);  for (  ZoneOffsetTransitionRule rule : lastRules) {    rule.writeExternal(out);  }}  }
class C{  private static boolean isBeginningOfListSpan(Editable editable,int start,int before,int after){  if (before - after > 0) {    return false;  }  MDOrderListSpan mdOrderListSpan=getOrderListBeginning(editable,start,before,after);  MDUnOrderListSpan mdUnOrderListSpan=getUnOrderListBeginning(editable,start,before,after);  if (mdOrderListSpan != null) {    int spanStart=editable.getSpanStart(mdOrderListSpan);    if (start <= spanStart || (start >= spanStart && start <= (spanStart + mdOrderListSpan.getNested() + String.valueOf(mdOrderListSpan.getNumber()).length()+ 2))) {      return true;    }  } else   if (mdUnOrderListSpan != null) {    int spanStart=editable.getSpanStart(mdUnOrderListSpan);    if (start <= spanStart || (start >= spanStart && start <= (spanStart + mdUnOrderListSpan.getNested() + 2))) {      return true;    }  }  return false;}  }
class C{  public void iinc(final int local,final int amount){  mv.visitIincInsn(local,amount);}  }
class C{  public void markAsExpression(){  marked=true;}  }
class C{  void addColumn(Column column){  columns.add(column);}  }
class C{  public void deleteRefactoringDescriptors(final RefactoringDescriptorProxy[] proxies,final IRefactoringDescriptorDeleteQuery query,IProgressMonitor monitor) throws CoreException {  Assert.isNotNull(proxies);  Assert.isNotNull(query);  if (monitor == null)   monitor=new NullProgressMonitor();  try {    monitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_deleting_refactorings,proxies.length + 300);    final Set set=new HashSet(proxies.length);    for (int index=0; index < proxies.length; index++) {      if (query.proceed(proxies[index]).isOK())       set.add(proxies[index]);      monitor.worked(1);    }    if (!set.isEmpty()) {      final RefactoringDescriptorProxy[] delete=(RefactoringDescriptorProxy[])set.toArray(new RefactoringDescriptorProxy[set.size()]);      deleteRefactoringDescriptors(delete,new SubProgressMonitor(monitor,300));      for (int index=0; index < delete.length; index++)       fireRefactoringHistoryEvent(delete[index],RefactoringHistoryEvent.DELETED);    }  }  finally {    monitor.done();  }}  }
class C{  public static void addToBlacklist(ItemStack aStack){  if (GT_Utility.isStackValid(aStack) && !GT_Utility.isStackInList(aStack,sNoUnificationList))   sNoUnificationList.add(aStack);}  }
class C{  @operator(value="partially_overlaps",category={IOperatorCategory.SPATIAL,IOperatorCategory.SP_PROPERTIES},concept={IConcept.GEOMETRY,IConcept.SPATIAL_COMPUTATION,IConcept.SPATIAL_RELATION}) @doc(value="A boolean, equal to true if the left-geometry (or agent/point) partially overlaps the right-geometry (or agent/point).",usages={@usage("if one of the operand is null, returns false.")},comment="if one geometry operand fully covers the other geometry operand, returns false (contrarily to the overlaps operator).",examples={@example(value="polyline([{10,10},{20,20}]) partially_overlaps polyline([{15,15},{25,25}])",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{15,15},{15,25},{25,25},{25,15}])",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps {25,25}",equals="false"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{35,35},{35,45},{45,45},{45,35}])",equals="false"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polyline([{10,10},{20,20}])",equals="false"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps {15,15}",equals="false"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{0,0},{0,30},{30,30}, {30,0}])",equals="false"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{15,15},{15,25},{25,25},{25,15}])",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) partially_overlaps polygon([{10,20},{20,20},{20,30},{10,30}])",equals="false")},see={"disjoint_from","crosses","overlaps","intersects","touches"}) public static Boolean partially_overlaps(final IShape g1,final IShape g){  if (g == null) {    return false;  }  return g1.getInnerGeometry().overlaps(g.getInnerGeometry());}  }
class C{  private void prepareTransport(boolean useRtuOverTcp) throws IOException {  if (transport == null) {    if (useRtuOverTcp) {      logger.trace("prepareTransport() -> using RTU over TCP transport.");      transport=new ModbusRTUTCPTransport(socket);      transport.setMaster(this);    } else {      logger.trace("prepareTransport() -> using standard TCP transport.");      transport=new ModbusTCPTransport(socket);      transport.setMaster(this);    }  } else {    logger.trace("prepareTransport() -> using custom transport: {}",transport.getClass().getSimpleName());    transport.setSocket(socket);  }  transport.setTimeout(timeout);}  }
class C{  public static CsvJUnitData openFile(File file){  if (!file.getName().endsWith("csv")) {    logger.error("Not a csv file: " + file.getAbsolutePath());    return null;  }  List<String[]> rows=null;  try {    CSVReader reader=new CSVReader(new FileReader(file));    rows=reader.readAll();    reader.close();  } catch (  Exception e) {    logger.error("Exception while parsing CSV file " + file.getAbsolutePath() + " , "+ e.getMessage(),e);    return null;  }  if (rows.size() != 2) {    logger.error("Cannot parse " + file.getAbsolutePath() + " as it has "+ rows.size()+ " rows");    return null;  }  CsvJUnitData data=new CsvJUnitData();  try {    data.targetClass=getValue(rows,"TARGET_CLASS").trim();    data.configurationId=0;    for (    String columnName : rows.get(0)) {      if (!columnName.equals(RuntimeVariable.Coverage.name()) && (columnName.endsWith("Coverage") || columnName.endsWith("Score"))) {        data.coverageValues.put(columnName,Double.parseDouble(getValue(rows,columnName)));      }      if (!columnName.equals(RuntimeVariable.CoverageBitString.name()) && columnName.endsWith("CoverageBitString")) {        String coverageColumn=columnName.replace("BitString","");        if (coverageColumn.contains("Mutation")) {          coverageColumn=coverageColumn.replace("Coverage","Score");        }        data.coverageBitString.put(coverageColumn,getValue(rows,columnName));      }    }    data.totalNumberOfStatements=Integer.parseInt(getValue(rows,RuntimeVariable.Length.toString()));    data.durationInSeconds=Integer.parseInt(getValue(rows,RuntimeVariable.Total_Time.toString())) / 1000;    data.numberOfTests=Integer.parseInt(getValue(rows,RuntimeVariable.Size.toString()));    data.totalNumberOfFailures=0;  } catch (  Exception e) {    logger.error("Error while parsing CSV file: " + e,e);    return null;  }  return data;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  private static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public CharBuffer append(CharBuffer cb){  return append(cb.buffer(),0,cb.length());}  }
class C{  public Event basicGetEvent(){  return event;}  }
class C{  public Boolean updateTopology(TopologyAPI.Topology topology,String topologyName){  if (getTopology(topologyName) != null) {    deleteTopology(topologyName);  }  return setTopology(topology,topologyName);}  }
class C{  public int add(int a,int b){  return a ^ b;}  }
class C{  public void remove(Drawable drawable){  components.remove(drawable);  constraints.remove(drawable);  layout();}  }
class C{  public void testBug28596() throws Exception {  String query="SELECT #\n?, #\n? #?\r\n,-- abcdefg \n?";  this.pstmt=((com.mysql.jdbc.Connection)this.conn).clientPrepareStatement(query);  this.pstmt.setInt(1,1);  this.pstmt.setInt(2,2);  this.pstmt.setInt(3,3);  assertEquals(3,this.pstmt.getParameterMetaData().getParameterCount());  this.rs=this.pstmt.executeQuery();  assertTrue(this.rs.next());  assertEquals(1,this.rs.getInt(1));  assertEquals(2,this.rs.getInt(2));  assertEquals(3,this.rs.getInt(3));}  }
class C{  public ContainerCloudletSchedulerTimeShared(){  super();  currentCPUs=0;}  }
class C{  public static PngWriter prepareFileTmp(File f,boolean palette){  return prepareFileTmp(f,new ImageInfo(32,32,8,false,false,palette));}  }
class C{  @Override protected void buildActions(final List<String> list){  if (!entity.getRPObject().has("menu")) {    list.add(ActionType.USE.getRepresentation());  }  super.buildActions(list);}  }
class C{  public static void startGooglePlayServicesRefresh(Context context){  try {    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://play.google.com/store/apps/details?id=com.google.android.gms")));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static <T extends DataObjectRestRep>Map<URI,T> mapById(Collection<T> resources){  Map<URI,T> map=new LinkedHashMap<URI,T>();  for (  T resource : resources) {    map.put(resource.getId(),resource);  }  return map;}  }
class C{  public static void releaseSession(WriteTranSession session,TransactionManager transactionManager){  if (session == null) {    return;  }  if (!isSessionTransactional(session,transactionManager)) {    closeSession(session);  }}  }
class C{  public String toStringOriginalFormat(){  StringBuilder sb=new StringBuilder();  sb.append(getTimeBytes()).append(" ").append("[").append(getThreadName()).append("]").append(" ").append(getLevel()).append(" ").append(getFileName()).append(" ").append("(line ").append(getLineNumber()).append(") ").append(" service ").append(getService()).append(" ").append(getLogContent());  return sb.toString();}  }
class C{  public boolean isGroupChatStoreForwardSupported(){  return mGroupChatStoreForward;}  }
class C{  public Graph search(){  this.logger.log("info","Starting Fast Adjacency Search.");  graph.removeEdges(graph.getEdges());  sepset=new SepsetMap();  sepset.setReturnEmptyIfNotSet(true);  int _depth=depth;  if (_depth == -1) {    _depth=1000;  }  Map<Node,Set<Node>> adjacencies=new HashMap<>();  List<Node> nodes=graph.getNodes();  for (  Node node : nodes) {    adjacencies.put(node,new TreeSet<Node>());  }  for (int d=0; d <= _depth; d++) {    boolean more;    if (d == 0) {      more=searchAtDepth0(nodes,test,adjacencies);    } else {      more=searchAtDepth(nodes,test,adjacencies,d);    }    if (!more) {      break;    }  }  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      Node x=nodes.get(i);      Node y=nodes.get(j);      if (adjacencies.get(x).contains(y)) {        graph.addUndirectedEdge(x,y);      }    }  }  this.logger.log("info","Finishing Fast Adjacency Search.");  return graph;}  }
class C{  private void addSubnetwork(Subnetwork subnet){  Set<PNode> nodes=new HashSet<PNode>();  for (  NeuronGroup neuronGroup : ((Subnetwork)subnet).getNeuronGroupList()) {    addGroup(neuronGroup);    NeuronGroupNode neuronGroupNode=(NeuronGroupNode)objectNodeMap.get(neuronGroup);    nodes.add(neuronGroupNode);  }  for (  SynapseGroup synapseGroup : ((Subnetwork)subnet).getSynapseGroupList()) {    addSynapseGroup(synapseGroup);  }  for (  SynapseGroup synapseGroup : ((Subnetwork)subnet).getSynapseGroupList()) {    PNode synapseGroupNode=objectNodeMap.get(synapseGroup);    nodes.add(synapseGroupNode);  }  SubnetworkNode subnetNode=createSubnetworkNode(subnet);  for (  PNode node : nodes) {    subnetNode.addNode(node);  }  canvas.getLayer().addChild(subnetNode);  objectNodeMap.put(subnet,subnetNode);  repaint();}  }
class C{  private void generateShipments(){  log.info("M_Warehouse_ID=" + m_M_Warehouse_ID);  String trxName=Trx.createTrxName("IOG");  Trx trx=Trx.get(trxName,true);  m_selectionActive=false;  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"InOutGenerateGen"));  statusBar.setStatusDB(String.valueOf(selection.size()));  int AD_Process_ID=0;  KeyNamePair docTypeKNPair=(KeyNamePair)cmbDocType.getSelectedItem();  if (docTypeKNPair.getKey() == MRMA.Table_ID) {    AD_Process_ID=52001;  } else {    AD_Process_ID=199;  }  MPInstance instance=new MPInstance(Env.getCtx(),AD_Process_ID,0);  if (!instance.save()) {    info.setText(Msg.getMsg(Env.getCtx(),"ProcessNoInstance"));    return;  }  StringBuffer insert=new StringBuffer();  insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");  int counter=0;  for (  Integer selectedId : selection) {    counter++;    if (counter > 1)     insert.append(" UNION ");    insert.append("SELECT ");    insert.append(instance.getAD_PInstance_ID());    insert.append(", ");    insert.append(selectedId);    insert.append(" FROM DUAL ");    if (counter == 1000) {      if (DB.executeUpdate(insert.toString(),trxName) < 0) {        String msg="No Shipments";        log.config(msg);        info.setText(msg);        trx.rollback();        return;      }      insert=new StringBuffer();      insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");      counter=0;    }  }  if (counter > 0) {    if (DB.executeUpdate(insert.toString(),trxName) < 0) {      String msg="No Shipments";      log.config(msg);      info.setText(msg);      trx.rollback();      return;    }  }  ProcessInfo pi=new ProcessInfo("VInOutGen",AD_Process_ID);  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  MPInstancePara ip=new MPInstancePara(instance,10);  ip.setParameter("Selection","Y");  if (!ip.save()) {    String msg="No Parameter added";    info.setText(msg);    log.log(Level.SEVERE,msg);    return;  }  ip=new MPInstancePara(instance,20);  ip.setParameter("M_Warehouse_ID",Integer.parseInt(m_M_Warehouse_ID.toString()));  if (!ip.save()) {    String msg="No Parameter added";    info.setText(msg);    log.log(Level.SEVERE,msg);    return;  }  ProcessCtl worker=new ProcessCtl(this,Env.getWindowNo(this),pi,trx);  worker.start();}  }
class C{  public static void clearCache(Path path,String prefix){  File[] files=path.toAbsolutePath().toFile().listFiles();  if (files != null) {    for (    File file : files) {      if ((prefix == null && file.getName().startsWith(GLOBAL_PREFIX)) || file.getName().startsWith(GLOBAL_PREFIX + prefix + "__")) {        file.delete();      }    }  }}  }
class C{  private List<String> lookupServicePath(String siteId,String serviceRoot) throws CoordinatorException {  List<String> services=null;  String fullPath=String.format("%1$s/%2$s",getServicePath(siteId),serviceRoot);  try {    services=_zkConnection.curator().getChildren().forPath(fullPath);  } catch (  KeeperException.NoNodeException e) {    throw CoordinatorException.retryables.cannotFindNode(fullPath,e);  }catch (  Exception e) {    throw CoordinatorException.retryables.errorWhileFindingNode(fullPath,e);  }  if (services == null) {    return new ArrayList<>();  }  return services;}  }
class C{  public R reduce(R r1,R r2){  return r1;}  }
class C{  private void send(float sample){  if (mListener != null) {    mListener.receive(sample);  }}  }
class C{  public PutRepositoryRequest source(byte[] repositoryDefinition){  return source(repositoryDefinition,0,repositoryDefinition.length);}  }
class C{  public void addGraphModelListener(GraphListener listnr){  if (!m_listeners.contains(listnr))   m_listeners.add(listnr);}  }
class C{  private String toStringWithoutMorpheme(){  StringBuilder s=new StringBuilder();  for (int i=0; i < splits.size(); i++) {    s.append(splits.get(i).toStringWithoutMorpheme());    if (i < splits.size() - 1) {      s.append('+');    }  }  return s.toString();}  }
class C{  public ProgramRewriter(ArrayList<HopRewriteRule> hRewrites,ArrayList<StatementBlockRewriteRule> sbRewrites){  _dagRuleSet=new ArrayList<HopRewriteRule>();  _dagRuleSet.addAll(hRewrites);  _sbRuleSet=new ArrayList<StatementBlockRewriteRule>();  _sbRuleSet.addAll(sbRewrites);}  }
class C{  public void testReset(){  DoubleAdder ai=new DoubleAdder();  ai.add(2.0);  assertEquals(2.0,ai.sum());  ai.reset();  assertEquals(0.0,ai.sum());}  }
class C{  private void process(File baseDir,String xmlFile,File destDir) throws BuildException {  File outFile=null;  File inFile=null;  try {    inFile=new File(baseDir,xmlFile);    outFile=new File(destDir,xmlFile.substring(0,xmlFile.lastIndexOf('.')) + extension);    if (!incremental || (inFile.lastModified() > outFile.lastModified() || templateFileLastModified > outFile.lastModified() || projectFileLastModified > outFile.lastModified())) {      ensureDirectoryFor(outFile);      log("Input:  " + xmlFile,Project.MSG_INFO);      if (projectTemplate == null && projectFile != null) {        Document doc=builder.parse(projectFile);        projectTemplate=new NodeListModel(builder.parse(projectFile));        projectNode=NodeModel.wrap(doc);      }      Document docNode=builder.parse(inFile);      TemplateModel document=new NodeListModel(docNode);      TemplateNodeModel docNodeModel=NodeModel.wrap(docNode);      HashMap root=new HashMap();      root.put("document",document);      insertDefaults(root);      Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outFile),encoding));      try {        if (parsedTemplate == null) {          throw new BuildException("No template file specified in build script or in XML file");        }        if (prepareModel != null) {          Map vars=new HashMap();          vars.put("model",root);          vars.put("doc",docNode);          if (projectNode != null) {            vars.put("project",((NodeModel)projectNode).getNode());          }          prepareModel.execute(vars);        }        freemarker.core.Environment env=parsedTemplate.createProcessingEnvironment(root,writer);        env.setCurrentVisitorNode(docNodeModel);        if (prepareEnvironment != null) {          Map vars=new HashMap();          vars.put("env",env);          vars.put("doc",docNode);          if (projectNode != null) {            vars.put("project",((NodeModel)projectNode).getNode());          }          prepareEnvironment.execute(vars);        }        env.process();        writer.flush();      }  finally {        writer.close();      }      log("Output: " + outFile,Project.MSG_INFO);    }  } catch (  SAXParseException spe) {    Throwable rootCause=spe;    if (spe.getException() != null)     rootCause=spe.getException();    log("XML parsing error in " + inFile.getAbsolutePath(),Project.MSG_ERR);    log("Line number " + spe.getLineNumber());    log("Column number " + spe.getColumnNumber());    throw new BuildException(rootCause,getLocation());  }catch (  Throwable e) {    if (outFile != null) {      if (!outFile.delete() && outFile.exists()) {        log("Failed to delete " + outFile,Project.MSG_WARN);      }    }    e.printStackTrace();    throw new BuildException(e,getLocation());  }}  }
class C{  public static String buildString(Set<String> values){  StringBuilder sb=new StringBuilder();  for (  String value : values) {    sb.append(value).append(SEPARATOR);  }  String value=sb.toString();  if (value.length() > 0) {    value=value.substring(0,value.length() - SEPARATOR.length());  }  return value;}  }
class C{  public void redo(){  if (redoStack.size() > 0)   redoCommand(redoStack.peek());}  }
class C{  public PlayGameController(TicTacToeApplet applet){  this.applet=applet;}  }
class C{  public static Step fromCursor(Cursor cursor){  Step step=new Step();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeInstructionsTable.PHOTO_COLUMN)) {      step.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeInstructionsTable.DESCRIPTION_COLUMN)) {      step.setDescription(cursor.getString(c));    }  }  return step;}  }
class C{  public void write(final char chars[],final int start,final int length) throws java.io.IOException {  int lengthx3=3 * length;  if (lengthx3 >= BYTES_MAX - count) {    flushBuffer();    if (lengthx3 > BYTES_MAX) {      int split=length / CHARS_MAX;      final int chunks;      if (length % CHARS_MAX > 0)       chunks=split + 1; else       chunks=split;      int end_chunk=start;      for (int chunk=1; chunk <= chunks; chunk++) {        int start_chunk=end_chunk;        end_chunk=start + (int)((((long)length) * chunk) / chunks);        final char c=chars[end_chunk - 1];        int ic=chars[end_chunk - 1];        if (c >= 0xD800 && c <= 0xDBFF) {          if (end_chunk < start + length) {            end_chunk++;          } else {            end_chunk--;          }        }        int len_chunk=(end_chunk - start_chunk);        this.write(chars,start_chunk,len_chunk);      }      return;    }  }  final int n=length + start;  final byte[] buf_loc=m_outputBytes;  int count_loc=count;  int i=start;{    char c;    for (; i < n && (c=chars[i]) < 0x80; i++)     buf_loc[count_loc++]=(byte)c;  }  for (; i < n; i++) {    final char c=chars[i];    if (c < 0x80)     buf_loc[count_loc++]=(byte)(c); else     if (c < 0x800) {      buf_loc[count_loc++]=(byte)(0xc0 + (c >> 6));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    } else     if (c >= 0xD800 && c <= 0xDBFF) {      char high, low;      high=c;      i++;      low=chars[i];      buf_loc[count_loc++]=(byte)(0xF0 | (((high + 0x40) >> 8) & 0xf0));      buf_loc[count_loc++]=(byte)(0x80 | (((high + 0x40) >> 2) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 | ((low >> 6) & 0x0f) + ((high << 4) & 0x30));      buf_loc[count_loc++]=(byte)(0x80 | (low & 0x3f));    } else {      buf_loc[count_loc++]=(byte)(0xe0 + (c >> 12));      buf_loc[count_loc++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    }  }  count=count_loc;}  }
class C{  public void onEnter(Context cx,Scriptable scope,Scriptable thisObj,Object[] args){  contextData.pushFrame(this);  this.scope=scope;  this.thisObj=thisObj;  if (dim.breakOnEnter) {    dim.handleBreakpointHit(this,cx);  }}  }
class C{  public Object encode(Object pObject){  if (!(pObject instanceof byte[])) {    throw new InvalidParameterException("Parameter supplied to Base64 encode is not a byte[]");  }  return encode((byte[])pObject);}  }
class C{  public ObjectFactory(){}  }
class C{  static boolean regionMatches(final CharSequence cs,final boolean ignoreCase,final int thisStart,final CharSequence substring,final int start,final int length){  if (cs instanceof String && substring instanceof String) {    return ((String)cs).regionMatches(ignoreCase,thisStart,(String)substring,start,length);  }  int index1=thisStart;  int index2=start;  int tmpLen=length;  while (tmpLen-- > 0) {    final char c1=cs.charAt(index1++);    final char c2=substring.charAt(index2++);    if (c1 == c2) {      continue;    }    if (!ignoreCase) {      return false;    }    if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {      return false;    }  }  return true;}  }
class C{  private void attribute() throws Exception {  int mark=++off;  while (off < count) {    char value=data[off++];    if (!isValid(value)) {      throw new PathException("Illegal character '%s' in attribute for '%s' in %s",value,path,type);    }  }  if (off <= mark) {    throw new PathException("Attribute reference in '%s' for %s is empty",path,type);  } else {    attribute=true;  }  attribute(mark,off - mark);}  }
class C{  public Period toPeriodTo(ReadableInstant endInstant){  return new Period(this,endInstant);}  }
class C{  public static void register(){  final MoveToAction moveTo=new MoveToAction();  CommandCenter.register(MOVETO,moveTo);}  }
class C{  protected void applyToXYItemRenderer(XYItemRenderer renderer){  ParamChecks.nullNotPermitted(renderer,"renderer");  if (renderer instanceof AbstractRenderer) {    applyToAbstractRenderer((AbstractRenderer)renderer);  }  renderer.setBaseItemLabelFont(this.regularFont);  renderer.setBaseItemLabelPaint(this.itemLabelPaint);  if (renderer instanceof XYBarRenderer) {    XYBarRenderer br=(XYBarRenderer)renderer;    br.setBarPainter(this.xyBarPainter);    br.setShadowVisible(this.shadowVisible);  }}  }
class C{  public void checkIn(ISchedulingRule rule,IProgressMonitor monitor) throws CoreException {  boolean success=false;  try {    if (workspace.isTreeLocked()) {      String msg=Messages.resources_cannotModify;      throw new ResourceException(IResourceStatus.WORKSPACE_LOCKED,null,msg,null);    }    jobManager.beginRule(rule,monitor);    lock.acquire();    incrementPreparedOperations();    success=true;  }  finally {    if (!success)     checkInFailed.set(Boolean.TRUE);  }}  }
class C{  @Override public int read(final byte[] buffer,int offset,int len) throws IOException {  if (compressDone) {    return -1;  }  byte[] readBuffer=new byte[2 * len];  int n=0;  int read=0;  while (len > 0) {    n=deflater.deflate(buffer,offset,len);    if (n == 0) {      if (isFinished) {        deflater.end();        compressDone=true;        break;      } else       if (deflater.needsInput()) {        int m=input.read(readBuffer);        if (m == -1) {          deflater.finish();          isFinished=true;        } else {          if (bytesRead != null) {            bytesRead.addAndGet(m);          }          deflater.setInput(readBuffer,0,m);        }      } else {        deflater.finish();        isFinished=true;      }    } else {      read+=n;      offset+=n;      len-=n;    }  }  return read;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String toBinaryString(long v){  return IntegralToString.longToBinaryString(v);}  }
class C{  public boolean visitStep(ExpressionOwner owner,NodeTest step){  return true;}  }
class C{  public Builder configDebugMode(boolean isDebugMode){  this.mIsDebugMode=isDebugMode;  Log.setDebugMode(mIsDebugMode);  return this;}  }
class C{  public TIFFEncodeParam(){}  }
class C{  public DefaultMiddlewareChain(Predicate<REQ> predicate,String middlewareName,Middleware<REQ,RES> middleware){  this.predicate=predicate;  this.middleware=middleware;  enkan.annotation.Middleware anno=middleware.getClass().getAnnotation(enkan.annotation.Middleware.class);  if (middlewareName != null) {    this.middlewareName=middlewareName;  } else   if (anno != null) {    this.middlewareName=anno.name();  } else {    this.middlewareName="Anonymous(" + middleware.toString() + ")";  }}  }
class C{  public static void copyStringValues(Instance inst,Instances destDataset,AttributeLocator strAtts){  if (inst.dataset() == null) {    throw new IllegalArgumentException("Instance has no dataset assigned!!");  } else   if (inst.dataset().numAttributes() != destDataset.numAttributes()) {    throw new IllegalArgumentException("Src and Dest differ in # of attributes: " + inst.dataset().numAttributes() + " != "+ destDataset.numAttributes());  }  copyStringValues(inst,true,inst.dataset(),strAtts,destDataset,strAtts);}  }
class C{  public boolean isSigned(){  return (tsigState == TSIG_SIGNED || tsigState == TSIG_VERIFIED || tsigState == TSIG_FAILED);}  }
class C{  public Integer executeUpdateSilent(Statement stmt,String sqlCommand,boolean useInlineSavepoint){  if (isSource())   return null;  if (s_dbEngine.isDBError())   return null;  if (stmt == null)   return null;  if (sqlCommand == null || sqlCommand.length() == 0)   return null;  setDoNotInterrupt(true);  Integer result=null;  m_lastSilentError=null;  Savepoint spInline=null;  if (useInlineSavepoint)   spInline=setSavepoint("silentInline");  try {    s_logger.log(Level.FINER,sqlCommand);    int recordsUpdated=stmt.executeUpdate(sqlCommand);    result=new Integer(recordsUpdated);  } catch (  SQLException e) {    s_dbEngine.setTransactionErrors(1);    result=null;    m_lastSilentError=e.toString();  }  releaseSavepoint(spInline);  return result;}  }
class C{  protected void clear(){  m_ModelClassifiers.removeAllElements();  m_GOEDatasets.setValue(new LocalDatasetProvider());  m_GOEEvaluator.setValue(new RepeatedRuns());  m_GOEStatisticsHandler.setValue(new KeyValuePairs());}  }
class C{  protected Anonymous_derivedAttribute_3_Impl(){  super();}  }
class C{  public void testEdgeCase(){  final int bits=3;  final int size=1 << bits;  final ShortIndex ix0=new ShortChunks(size - 1,bits);  ix0.integrity();  final ShortIndex ix1=new ShortChunks(size,bits);  ix1.integrity();  final ShortIndex ix2=new ShortChunks(size + 1,bits);  ix2.integrity();}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public LatLonPoint toLatLonPoint(boolean southernHemisphere){  LatLonPoint llp=new LatLonPoint.Double();  double lon=0;  double lat=0;  double a=0;  double es=0;  double e=0;  double t=0;  double rho=0;  double x=easting;  double y=northing;  final double k0=0.994;  a=6378137.0;  es=0.00669438d;  e=Math.sqrt(es);  x-=2.0e6;  y-=2.0e6;  rho=Math.sqrt(x * x + y * y);  t=rho * Math.sqrt(Math.pow(1.0 + e,1.0 + e) * Math.pow(1.0 - e,1.0 - e)) / (2.0 * a * k0);  lat=calcPhi(e,t);  lat/=Degree;  if (y != 0.0) {    t=Math.atan(Math.abs(x / y));  } else {    t=Math.PI / 2.0;    if (x < 0.0) {      t=-t;    }  }  if (southernHemisphere == false) {    y=-y;  } else {    lat=-lat;  }  if (y < 0.0) {    t=Math.PI - t;  }  if (x < 0.0) {    t=-t;  }  lon=t / Degree;  llp.setLatitude((float)lat);  llp.setLongitude((float)lon);  return llp;}  }
class C{  public void testBug15570() throws Exception {  Connection replConn=null;  try {    replConn=getMasterSlaveReplicationConnection();    int masterConnectionId=Integer.parseInt(getSingleIndexedValueWithQuery(replConn,1,"SELECT CONNECTION_ID()").toString());    replConn.setReadOnly(false);    assertEquals(masterConnectionId,Integer.parseInt(getSingleIndexedValueWithQuery(replConn,1,"SELECT CONNECTION_ID()").toString()));    String currentCatalog=replConn.getCatalog();    replConn.setCatalog(currentCatalog);    assertEquals(currentCatalog,replConn.getCatalog());    replConn.setReadOnly(true);    int slaveConnectionId=Integer.parseInt(getSingleIndexedValueWithQuery(replConn,1,"SELECT CONNECTION_ID()").toString());    assertTrue("Master id " + masterConnectionId + " is not newer than slave id "+ slaveConnectionId,masterConnectionId > slaveConnectionId);    assertEquals(currentCatalog,replConn.getCatalog());    String newCatalog="mysql";    replConn.setCatalog(newCatalog);    assertEquals(newCatalog,replConn.getCatalog());    replConn.setReadOnly(true);    assertEquals(newCatalog,replConn.getCatalog());    replConn.setReadOnly(false);    assertEquals(masterConnectionId,Integer.parseInt(getSingleIndexedValueWithQuery(replConn,1,"SELECT CONNECTION_ID()").toString()));  }  finally {    if (replConn != null) {      replConn.close();    }  }}  }
class C{  public static GeoTimeSerie shrinkTo(GeoTimeSerie gts,int newsize) throws WarpScriptException {  if (newsize > 0 && newsize < gts.values) {    gts.values=newsize;  }  return gts;}  }
class C{  public void testSubstringSharesBackingArray() throws IllegalAccessException {  String abcdefghij="ABCDEFGHIJ";  String cdefg=abcdefghij.substring(2,7);  assertSame(getBackingArray(abcdefghij),getBackingArray(cdefg));}  }
class C{  public void onSync(){  this.properties.onSync();}  }
class C{  public double nextDouble(double lambda){  return -Math.log(randomGenerator.nextDouble()) / lambda;}  }
class C{  @Override protected void onRestart(){  super.onRestart();  if (this.mPubNub == null) {    initPubNub();  } else {    subscribeWithPresence();    history();  }}  }
class C{  public FrontCodedStringList(final Collection<? extends CharSequence> c,final int ratio,final boolean utf8){  this(c.iterator(),ratio,utf8);}  }
class C{  public void test_setAccessible$Ljava_lang_reflect_AccessibleObjectZ(){  try {    AccessibleObject ao=TestClass.class.getField("aField");    AccessibleObject[] aoa=new AccessibleObject[]{ao};    AccessibleObject.setAccessible(aoa,true);    assertTrue("Returned false to isAccessible",ao.isAccessible());    AccessibleObject.setAccessible(aoa,false);    assertTrue("Returned true to isAccessible",!ao.isAccessible());  } catch (  Exception e) {    fail("Exception during test : " + e.getMessage());  }}  }
class C{  public boolean isHighlighted(){  return mHighlighted;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean matches(String regex){  return this.str.matches(regex);}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes){  if (elementProcessor != null) {    elementProcessor=elementProcessor.getChild(uri,localName,qName);  } else   if (ELEMENT_NAME_OSM.equals(qName)) {    elementProcessor=osmElementProcessor;  } else {    throw new OsmRuntimeException("This does not appear to be an OSM XML file.");  }  elementProcessor.begin(attributes);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__LIST_1:    return list_1 != LIST_1_EDEFAULT;case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__NAME_1:  return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__TYPE_1:return TYPE_1_EDEFAULT == null ? type_1 != null : !TYPE_1_EDEFAULT.equals(type_1);}return super.eIsSet(featureID);}  }
class C{  public static boolean p2pLoader(ClassLoader ldr){  return ldr instanceof GridDeploymentInfo;}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public TLongHash(int initialCapacity){  super(initialCapacity);  _hashingStrategy=this;}  }
class C{  protected Pattern createObliquePattern(IFigure figure,int alpha,Color color){  Rectangle b=figure.getBounds();  double cx=b.x + b.width * 0.5;  double cy=b.y + b.height * 0.5;  PrecisionPoint p1=points.getPoint(0);  PrecisionPoint p2=points.getPoint(3);  Pattern p=new GradientPattern(Display.getCurrent(),(float)(cx + p1.x),(float)(cy + p1.y),(float)(cx + p2.x),(float)(cy + p2.y),ColorUtils.gradientLighter(color),alpha,color,alpha);  return p;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_BINDING__DEFINED_VARIABLE:    return definedVariable != null;}return super.eIsSet(featureID);}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  AuthnProviderList response=client.get(AuthnProviderList.class,baseUrl);  return ResourceUtils.defaultList(response.getProviders());}  }
class C{  protected void assertSmaller(long a,long b){  if (a >= b) {    fail("a: " + a + " is not smaller than b: "+ b);  }}  }
class C{  public boolean isDivideBy100(){  return m_divideBy100;}  }
class C{  @Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){  Node node=mAdapter.getFlatItems().get(position);  if (node.isExpandable()) {    onGroupItemClicked(view,node);  } else {    onItemClicked(view,node);  }}  }
class C{  private CASHInterval doDetermineNextIntervalAtMaxLevel(ObjectHeap<IntegerPriorityObject<CASHInterval>> heap){  CASHInterval interval=heap.poll().getObject();  int dim=interval.getDimensionality();  while (true) {    if (interval.getLevel() >= maxLevel && interval.getMaxSplitDimension() == (dim - 1)) {      return interval;    }    if (heap.size() % 10000 == 0 && LOG.isVerbose()) {      LOG.verbose("heap size " + heap.size());    }    if (heap.size() >= 40000) {      LOG.warning("Heap size > 40.000!!!");      heap.clear();      return null;    }    if (LOG.isDebuggingFiner()) {      LOG.debugFiner("split " + interval.toString() + " "+ interval.getLevel()+ "-"+ interval.getMaxSplitDimension());    }    interval.split();    if (!interval.hasChildren()) {      return null;    }    CASHInterval bestInterval;    if (interval.getLeftChild() != null && interval.getRightChild() != null) {      int comp=interval.getLeftChild().compareTo(interval.getRightChild());      if (comp < 0) {        bestInterval=interval.getRightChild();        heap.add(new IntegerPriorityObject<>(interval.getLeftChild().priority(),interval.getLeftChild()));      } else {        bestInterval=interval.getLeftChild();        heap.add(new IntegerPriorityObject<>(interval.getRightChild().priority(),interval.getRightChild()));      }    } else     if (interval.getLeftChild() == null) {      bestInterval=interval.getRightChild();    } else {      bestInterval=interval.getLeftChild();    }    interval=bestInterval;  }}  }
class C{  public GMac(final GCMBlockCipher cipher,final int macSizeBits){  this.cipher=cipher;  this.macSizeBits=macSizeBits;}  }
class C{  public Future<?> registerEventProcessorFactory(IEventProcessorFactory<?> factory,EventProcessorOptions processorOptions) throws Exception {  if (this.processorFactory != null) {    throw new IllegalStateException("Register has already been called on this EventProcessorHost");  }  if (EventProcessorHost.executorService.isShutdown() || EventProcessorHost.executorService.isTerminated()) {    this.logWithHost(Level.SEVERE,"Calling registerEventProcessor/Factory after executor service has been shut down");    throw new RejectedExecutionException("EventProcessorHost executor service has been shut down");  }  if (this.initializeLeaseManager) {    try {      ((AzureStorageCheckpointLeaseManager)leaseManager).initialize(this);    } catch (    InvalidKeyException|URISyntaxException|StorageException e) {      this.logWithHost(Level.SEVERE,"Failure initializing Storage lease manager",e);      throw new RuntimeException("Failure initializing Storage lease manager",e);    }  }  logWithHost(Level.INFO,"Starting event processing");  this.processorFactory=factory;  this.processorOptions=processorOptions;  return EventProcessorHost.executorService.submit(null);}  }
class C{  public void testSkipRawBytesPastEndOfBufferWithLimit() throws Exception {  byte[] rawBytes=new byte[]{1,2,3,4,5};  CodedInputStream input=CodedInputStream.newInstance(new SmallBlockInputStream(rawBytes,3));  int limit=input.pushLimit(4);  assertEquals(1,input.readRawByte());  input.skipRawBytes(3);  assertTrue(input.isAtEnd());  input.popLimit(limit);  assertEquals(5,input.readRawByte());}  }
class C{  @Override public int size(){  return dataList.size();}  }
class C{  public ChunkedWrappedIterator(final Iterator<E> src){  this(src,DEFAULT_CHUNK_SIZE);}  }
class C{  public static boolean regressEvalLinear(Regressor instance,ExecutorService ex,int N_train,int N_test){  RegressionDataSet train=FixedProblems.getLinearRegression(N_train,new XORWOW());  RegressionDataSet test=FixedProblems.getLinearRegression(N_test,new XORWOW());  RegressionModelEvaluation rme=new RegressionModelEvaluation(instance,train,ex);  rme.evaluateTestSet(test);  return rme.getMeanError() <= test.getTargetValues().mean() * 1.5;}  }
class C{  public String toString(){  return getClass().getName();}  }
class C{  private static void add2(int[] n1,int[] n2,int[] sum){  int b=n1.length - 1;  sum[b + 1]=0;  while (b >= 0) {    int s=n1[b] + n2[b] + sum[b + 1];    sum[b + 1]=s % 10;    if (s > 9) {      sum[b]=1;    }    b--;  }}  }
class C{  final boolean indexesDeletedNode(){  return node.value == null;}  }
class C{  public boolean extendActiveTrainsPath(Section s,ActiveTrain at,JmriJFrame jFrame){  if (s.getEntryPointFromSection(at.getEndBlockSection(),Section.FORWARD) != null && at.getNextSectionToAllocate() == null) {    int seq=at.getEndBlockSectionSequenceNumber() + 1;    if (!at.addEndSection(s,seq)) {      return false;    }    jmri.TransitSection ts=new jmri.TransitSection(s,seq,Section.FORWARD);    ts.setTemporary(true);    at.getTransit().addTransitSection(ts);    boolean requested=requestAllocation(at,s,Section.FORWARD,seq,true,jFrame);    AllocationRequest ar=findAllocationRequestInQueue(s,seq,Section.FORWARD,at);    if (requested && (ar != null)) {      allocateSection(ar,null);      return true;    }  }  return false;}  }
class C{  public void close(JarFile jarFile){synchronized (instance) {    URL urlRemoved=urlCache.remove(jarFile);    if (urlRemoved != null)     fileCache.remove(URLUtil.urlNoFragString(urlRemoved));  }}  }
class C{  private void init(final String clazz,final String actionName,final int maxRipeness,final int width,final int height){  this.maxRipeness=maxRipeness;  setRPClass("growing_entity_spawner");  put("type","growing_entity_spawner");  setEntityClass(clazz);  put("action_name",actionName);  put("max_ripeness",maxRipeness);  setSize(width,height);  setResistance(30);}  }
class C{  protected final void afterAttachActions() throws SQLException {  getDatabaseInfo(getDescribeDatabaseInfoBlock(),1024,getDatabaseInformationProcessor());  connection.resetSocketTimeout();}  }
class C{  public static Statement distinct(Object... columns){  QueryStatement queryStmt=new QueryStatement();  queryStmt.statement.append("SELECT DISTINCT");  return queryStmt.processColumns(columns);}  }
class C{  @org.junit.Test public void verifyGetUUIDResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/primitiveUUIDResponse","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,quote(ExampleBuilder.SAMPLE_UUID_PROPERTY_VALUE));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrreplacechild1.class,args);}  }
class C{  public static byte[] transceiveAndRequireOk(byte[] command,IsoCard isoCard) throws IOException {  return transceiveAndRequireStatus(command,isoCard,OK_APDU);}  }
class C{  public void ellipseTo(Object x,Object y,Object w,Object h,Object t0,Object t1){  if (size() == 0 || get(size() - 1).type == SegType.CLOSE) {    throw new IllegalPathStateException("ellipseTo is only allowed when a path segment is open");  }  add(new Segment(SegType.ELLIPSETO,x,y,w,h,t0,t1));}  }
class C{  @Deprecated public Class<?>[] checkIO(Class<?>[] input) throws IllegalInputException, WrongNumberOfInnerOperatorsException {  if (isEnabled()) {    return getIODescription().getOutputClasses(input,this);  } else {    return input;  }}  }
class C{  public Query createQuery(Model model,String partialQuery){  PrefixMapping pm=new PrefixMappingImpl();  String defaultNamespace=JenaUtil.getNsPrefixURI(model,"");  if (defaultNamespace != null) {    pm.setNsPrefix("",defaultNamespace);  }  Map<String,String> extraPrefixes=ExtraPrefixes.getExtraPrefixes();  for (  String prefix : extraPrefixes.keySet()) {    String ns=extraPrefixes.get(prefix);    if (ns != null && pm.getNsPrefixURI(prefix) == null) {      pm.setNsPrefix(prefix,ns);    }  }  for (  String prefix : model.getNsPrefixMap().keySet()) {    String namespace=JenaUtil.getNsPrefixURI(model,prefix);    if (prefix.length() > 0 && namespace != null) {      pm.setNsPrefix(prefix,namespace);    }  }  return doCreateQuery(partialQuery,pm);}  }
class C{  void normalize() throws IOException {  int end=chars.length();  if (end == 0) {    return;  }  int pos=0;  int codepoint=Character.codePointAt(chars,0);  boolean escaped=false;  for (int i=0; i < end; ) {    int charCount=Character.charCount(codepoint);    int i2=i + charCount;    int nextCodepoint=i2 < end ? Character.codePointAt(chars,i2) : -1;    if (escaped) {      escaped=false;      if (escapeOneCodepoint(pos,i - 1,codepoint,nextCodepoint)) {        pos=i2;      }    } else     if (codepoint == '\\') {      escaped=true;    } else     if (escapeOneCodepoint(pos,i,codepoint,nextCodepoint)) {      pos=i2;    }    i=i2;    codepoint=nextCodepoint;  }  out.append(chars,pos,end);}  }
class C{  public static double abs(double d){  return (d < 0) ? -d : d;}  }
class C{  public void fetchMyWalls(String userId){  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.GET_USER_WALLS);  retroCallbackList.add(retroCallback);  mYeloApi.getUserWalls(userId,retroCallback);  mSwipeRefreshLayout.setRefreshing(true);}  }
class C{  @Override public void applyMatrix(float n00,float n01,float n02,float n03,float n10,float n11,float n12,float n13,float n20,float n21,float n22,float n23,float n30,float n31,float n32,float n33){  applyMatrixImpl(n00,n01,n02,n03,n10,n11,n12,n13,n20,n21,n22,n23,n30,n31,n32,n33);}  }
class C{  public static void writeUnsafe(PacketOutputStream out,byte[] bytes,boolean noBackslashEscapes){  out.writeUnsafe(BINARY_INTRODUCER);  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);  out.writeUnsafe(QUOTE);}  }
class C{  private void ensureOpen() throws IOException {  if (length == -1)   throw new IOException("Stream closed");}  }
class C{  public Macro(File file) throws EOFException, FileNotFoundException, IOException {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  DocumentBuilder db=null;  Document doc=null;  try {    db=dbf.newDocumentBuilder();    InputSource is=new InputSource(new UnicodeReader(new FileInputStream(file),FILE_ENCODING));    is.setEncoding(FILE_ENCODING);    doc=db.parse(is);  } catch (  Exception e) {    e.printStackTrace();    String desc=e.getMessage();    if (desc == null) {      desc=e.toString();    }    throw new IOException("Error parsing XML: " + desc);  }  macroRecords=new ArrayList();  boolean parsedOK=initializeFromXMLFile(doc.getDocumentElement());  if (parsedOK == false) {    name=null;    macroRecords.clear();    macroRecords=null;    throw new IOException("Error parsing XML!");  }}  }
class C{  public void normalize(){  entries.multAll(1.0 / entries.sum());}  }
class C{  public DialView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  public void requestUpdate(){  updateRequest.setChanged();  updateRequest.notifyObservers();}  }
class C{  void nestedMayThrow(boolean doThrow){synchronized (this) {synchronized (Main.class) {synchronized (new Object()) {synchronized (Class.class) {          if (doThrow) {            throw new MyException();          }        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:45.047 -0500",hash_original_method="BEBCC50C9D4D6D2EEDEE155B4F15D792",hash_generated_method="0BB8E31B2DB76EE59D88CA669423161E") public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  public void testNullPrefixToken() throws IOException {  BytesRef payload=new BytesRef("lake");  Input keys[]=new Input[]{new Input("top of the lake",8,payload)};  Path tempDir=createTempDir("BlendedInfixSuggesterTest");  Analyzer a=new StandardAnalyzer(CharArraySet.EMPTY_SET);  BlendedInfixSuggester suggester=new BlendedInfixSuggester(newFSDirectory(tempDir),a,a,AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,BlendedInfixSuggester.BlenderType.POSITION_LINEAR,BlendedInfixSuggester.DEFAULT_NUM_FACTOR,false);  suggester.build(new InputArrayIterator(keys));  getInResults(suggester,"of ",payload,1);  getInResults(suggester,"the ",payload,1);  getInResults(suggester,"lake ",payload,1);  suggester.close();}  }
class C{  public static CustomFormat createInstance(String pattern,Map<String,String> regexMap){  CustomFormat format=new CustomFormat();  format.m_nameList=extractNames(pattern);  format.m_nameSet=new HashSet<String>(format.m_nameList);  format.m_pattern=pattern;  Map<String,String> varMap=new HashMap<String,String>();  for (  String name : format.m_nameSet) {    String regex=String.format("(%s)",regexMap.containsKey(name) ? regexMap.get(name) : VALUE_REGEX);    varMap.put(name,regex);  }  format.m_regex=StrSubstitutor.replace(pattern,varMap);  return format;}  }
class C{  public boolean isValid(){  if (getName() == null || getName().length() < 2) {    log.log(Level.WARNING,"Name not valid: " + getName());    return false;  }  if (getPassword() == null || getPassword().length() < 2) {    log.log(Level.WARNING,"Password not valid: " + getPassword());    return false;  }  if (getInfo() == null || getInfo().length() < 2) {    log.log(Level.WARNING,"Need to run Migration once");    return false;  }  return true;}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final String[] temp=items;    items=new String[max_size];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  public void add_propagate(lalr_item prop_to){  _propagate_items.push(prop_to);  needs_propagation=true;}  }
class C{  protected void fireDataBrowse(){  m_bIsAdjusting=true;  Object obj=getCurrentElement();  int iIndex=getIndex();  int iCount=m_bd.getSize();  if (obj == null) {    m_iState=ST_NORECORD;    m_editorrecord.writeValueEOF();  } else {    m_iState=ST_UPDATE;    m_editorrecord.writeValueEdit(obj);  }  m_Dirty.setDirty(false);  fireStateUpdate();  EventListener[] l=listeners.getListeners(EditorListener.class);  for (int i=0; i < l.length; i++) {    ((EditorListener)l[i]).updateValue(obj);  }  l=listeners.getListeners(BrowseListener.class);  for (int i=0; i < l.length; i++) {    ((BrowseListener)l[i]).updateIndex(iIndex,iCount);  }  m_bIsAdjusting=false;}  }
class C{  public CollectionConverter(final Mapper mapper,@SuppressWarnings("rawtypes") final Class<? extends Collection> type){  super(mapper);  @SuppressWarnings("unchecked") final Class<? extends Collection<?>> checkedType=(Class<? extends Collection<?>>)type;  this.type=checkedType;  if (type != null && !Collection.class.isAssignableFrom(type)) {    throw new IllegalArgumentException(type + " not of type " + Collection.class);  }}  }
class C{  @Override public String toString(){  return LocalizedStrings.LRUCapacityController_LRUCAPACITYCONTROLLER_WITH_A_CAPACITY_OF_0_ENTRIES_AND_EVICTION_ACTION_1.toLocalizedString(new Object[]{Long.valueOf(this.getLimit()),this.getEvictionAction()});}  }
class C{  @Deprecated public static <K,V>Map<K,V> asMap(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  Map<K,V> map=new GridLeanMap<>(4);  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  map.put(k4,v4);  return map;}  }
class C{  public void decreaseKey(int i,Key key){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  if (greater(key,nodes[i].key))   throw new IllegalArgumentException("Calling with this argument would not decrease the key");  Node<Key> x=nodes[i];  x.key=key;  if (greater(min.key,key))   min=x;  if (x.parent != null && greater(x.parent.key,key)) {    cut(i);  }}  }
class C{  protected static List<String> detectClassPathResourcesToStage(ClassLoader classLoader){  if (!(classLoader instanceof URLClassLoader)) {    String message=String.format("Unable to use ClassLoader to detect classpath elements. " + "Current ClassLoader is %s, only URLClassLoaders are supported.",classLoader);    LOG.error(message);    throw new IllegalArgumentException(message);  }  List<String> files=new ArrayList<>();  for (  URL url : ((URLClassLoader)classLoader).getURLs()) {    try {      files.add(new File(url.toURI()).getAbsolutePath());    } catch (    IllegalArgumentException|URISyntaxException e) {      String message=String.format("Unable to convert url (%s) to file.",url);      LOG.error(message);      throw new IllegalArgumentException(message,e);    }  }  return files;}  }
class C{  public static BigInteger[] decodeToBigIntegerArray(byte[] signature) throws IOException {  ASN1InputStream decoder=new ASN1InputStream(signature);  DLSequence seq=(DLSequence)decoder.readObject();  ASN1Integer r=(ASN1Integer)seq.getObjectAt(0);  ASN1Integer s=(ASN1Integer)seq.getObjectAt(1);  decoder.close();  BigInteger[] ret=new BigInteger[2];  ret[0]=r.getPositiveValue();  ret[1]=s.getPositiveValue();  return ret;}  }
class C{  public boolean replaceAction(@NotNull AnAction oldAction,@NotNull AnAction newAction){  int index=mySortedChildren.indexOf(oldAction);  if (index >= 0) {    mySortedChildren.set(index,newAction);    return true;  } else {    for (int i=0; i < myPairs.size(); i++) {      Pair<AnAction,Constraints> pair=myPairs.get(i);      if (pair.first.equals(newAction)) {        myPairs.set(i,Pair.create(newAction,pair.second));        return true;      }    }  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean IsIn(String elt,Vector set){  int i=0;  boolean result=false;  while (i < set.size()) {    result=result || elt.equals((String)set.elementAt(i));    i=i + 1;  }  ;  return result;}  }
class C{  @Override public void updateShort(int columnIndex,short x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateShort(" + columnIndex + ", (short) "+ x+ ");");    }    update(columnIndex,ValueShort.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean canDockEast(){  return canDockEast;}  }
class C{  public int compareTo(final DatabaseVersion version){  final String[] naviSplit=this.version.split("\\.");  final String[] dbSplit=version.getString().split("\\.");  final int mainVersionNavi=Integer.parseInt(naviSplit[0]);  final int mainVersionDB=Integer.parseInt(dbSplit[0]);  if (mainVersionNavi != mainVersionDB) {    return mainVersionNavi - mainVersionDB;  }  final int subVersionNavi=Integer.parseInt(naviSplit[1]);  final int subVersionDB=Integer.parseInt(dbSplit[1]);  if (subVersionNavi != subVersionDB) {    return subVersionNavi - subVersionDB;  }  final int buildVersionNavi=Integer.parseInt(naviSplit[2]);  final int buildVersionDB=Integer.parseInt(dbSplit[2]);  return buildVersionNavi - buildVersionDB;}  }
class C{  protected boolean isAmmoRequired(ItemStack bow,EntityPlayer shooter){  return !shooter.capabilities.isCreativeMode && EnchantmentHelper.getEnchantmentLevel(Enchantments.INFINITY,bow) == 0;}  }
class C{  void inheritRanges(OwlProperty prop){  for (  OwlClass superclass : this.superClasses) {    prop.addRange(superclass);  }}  }
class C{  public LayerConfig(@NonNull String layerType,int indent,@NonNull ArgumentsBundle argumentsBundle){  mLayerType=layerType;  mIndent=indent;  mArgumentsBundle=argumentsBundle;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int length=curNumberOfParameters;  Object[] rv=new Object[length];  for (int i=length - 1; i >= 0; i--)   rv[i]=stack.pop();  return rv;}  }
class C{  private void push(String input,int pos,int limit,boolean addTrailingSlash,boolean alreadyEncoded){  String segment=canonicalize(input,pos,limit,PATH_SEGMENT_ENCODE_SET,alreadyEncoded,false,false,true);  if (isDot(segment)) {    return;  }  if (isDotDot(segment)) {    pop();    return;  }  if (encodedPathSegments.get(encodedPathSegments.size() - 1).isEmpty()) {    encodedPathSegments.set(encodedPathSegments.size() - 1,segment);  } else {    encodedPathSegments.add(segment);  }  if (addTrailingSlash) {    encodedPathSegments.add("");  }}  }
class C{  public MethodWithSourceSinkFilter(MethodModel method,SourceSinkPair sourceSinkFilter){  super(method,sourceSinkFilter);}  }
class C{  public AsyncResult ModifySubscriptionAsync(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,Double RequestedPublishingInterval,UnsignedInteger RequestedLifetimeCount,UnsignedInteger RequestedMaxKeepAliveCount,UnsignedInteger MaxNotificationsPerPublish,UnsignedByte Priority){  ModifySubscriptionRequest req=new ModifySubscriptionRequest(RequestHeader,SubscriptionId,RequestedPublishingInterval,RequestedLifetimeCount,RequestedMaxKeepAliveCount,MaxNotificationsPerPublish,Priority);  return channel.serviceRequestAsync(req);}  }
class C{  private long sendNiciraRoleRequest(OFControllerRole role){  long xid;  if (factory.getVersion().compareTo(OFVersion.OF_12) < 0) {    OFNiciraControllerRoleRequest.Builder builder=factory.buildNiciraControllerRoleRequest();    xid=factory.nextXid();    builder.setXid(xid);    OFNiciraControllerRole niciraRole=NiciraRoleUtils.ofRoleToNiciraRole(role);    builder.setRole(niciraRole);    OFNiciraControllerRoleRequest roleRequest=builder.build();    mainConnection.write(roleRequest);  } else {    OFRoleRequest roleRequest=factory.buildRoleRequest().setGenerationId(U64.of(0)).setRole(role).build();    xid=roleRequest.getXid();    mainConnection.write(roleRequest);  }  return xid;}  }
class C{  public void editingCanceled(ChangeEvent e){  completeEditing(false,false,false);}  }
class C{  public boolean waitFinish(long timeout){  if (myThread == null)   return false; else {    try {      myThread.join(timeout);    } catch (    InterruptedException e) {    }    return !myThread.isAlive();  }}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  public boolean isLoop(){  return loop;}  }
class C{  public void endDestroyRegionSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(destroyRegionSendInProgressId,-1);  int endDestroyRegionSendId;  if (failed) {    endDestroyRegionSendId=destroyRegionSendFailedId;  } else {    endDestroyRegionSendId=destroyRegionSendId;  }  this.sendStats.incInt(endDestroyRegionSendId,1);  this.stats.incLong(destroyRegionSendDurationId,duration);}  }
class C{  public static int multiplyColorAlpha(int color,int alpha){  if (alpha == 255) {    return color;  }  if (alpha == 0) {    return color & 0x00FFFFFF;  }  alpha=alpha + (alpha >> 7);  int colorAlpha=color >>> 24;  int multipliedAlpha=colorAlpha * alpha >> 8;  return (multipliedAlpha << 24) | (color & 0x00FFFFFF);}  }
class C{  public static void startActivity(Context context,String sharingId){  Intent intent=new Intent(context,GeolocSharingLogView.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra(EXTRA_SHARING_ID,sharingId);  context.startActivity(intent);}  }
class C{  public void writeExif(byte[] jpeg,OutputStream exifOutStream) throws IOException {  if (jpeg == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  s.write(jpeg,0,jpeg.length);  s.flush();}  }
class C{  public boolean equals(Object o){  if (o instanceof PointFeature) {    PointFeature f=(PointFeature)o;    return f.lat == this.lat && f.lon == this.lon && (f.geom == this.geom || f.geom != null && f.geom.equals(this.geom)) && (f.id == this.id || f.id != null && f.id.equals(this.id)) && this.properties.equals(f.properties);  }  return false;}  }
class C{  static void testSymLinks(Path dir) throws IOException {  final Path link=dir.resolve("link");  try {    Files.createSymbolicLink(link,Paths.get("foo"));    Files.delete(link);  } catch (  UnsupportedOperationException x) {    return;  }catch (  IOException x) {    return;  }  String[] windowsTargets={"foo","C:\\foo","\\foo","\\\\server\\share\\foo"};  String[] otherTargets={"relative","/absolute"};  String[] targets=(isWindows) ? windowsTargets : otherTargets;  for (  String s : targets) {    Path target=Paths.get(s);    Files.createSymbolicLink(link,target);    try {      assertTrue(Files.readSymbolicLink(link).equals(target));    }  finally {      Files.delete(link);    }  }  Path mydir=dir.resolve("mydir");  Path myfile=mydir.resolve("myfile");  try {    Files.createDirectory(mydir);    Files.createFile(myfile);    Files.createSymbolicLink(link,mydir.getFileName());    assertTrue(Files.readSymbolicLink(link).equals(mydir.getFileName()));    try (DirectoryStream<Path> stream=Files.newDirectoryStream(link)){      boolean found=false;      for (      Path entry : stream) {        if (entry.getFileName().equals(myfile.getFileName())) {          found=true;          break;        }      }      assertTrue(found);    }     final Path link2=dir.resolve("link2");    Path target2=link.getFileName();    Files.createSymbolicLink(link2,target2);    try {      assertTrue(Files.readSymbolicLink(link2).equals(target2));      Files.newDirectoryStream(link2).close();    }  finally {      Files.delete(link2);    }    Files.delete(myfile);    Files.delete(mydir);    Files.createSymbolicLink(link2,target2);    try {      assertTrue(Files.readSymbolicLink(link2).equals(target2));      Files.createDirectory(mydir);      Files.newDirectoryStream(link2).close();    }  finally {      Files.delete(link2);    }  }  finally {    Files.deleteIfExists(myfile);    Files.deleteIfExists(mydir);    Files.deleteIfExists(link);  }}  }
class C{  public String toString(){  if (m_ZeroR != null) {    StringBuffer buf=new StringBuffer();    buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");    buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");    buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");    buf.append(m_ZeroR.toString());    return buf.toString();  }  if (m_Train == null) {    return "Locally weighted learning: No model built yet.";  }  String result="Locally weighted learning\n" + "===========================\n";  result+="Using classifier: " + m_Classifier.getClass().getName() + "\n";switch (m_WeightKernel) {case LINEAR:    result+="Using linear weighting kernels\n";  break;case EPANECHNIKOV:result+="Using epanechnikov weighting kernels\n";break;case TRICUBE:result+="Using tricube weighting kernels\n";break;case INVERSE:result+="Using inverse-distance weighting kernels\n";break;case GAUSS:result+="Using gaussian weighting kernels\n";break;case CONSTANT:result+="Using constant weighting kernels\n";break;}result+="Using " + (m_UseAllK ? "all" : "" + m_kNN) + " neighbours";return result;}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if (bytes != null && bytes.length >= 4 && !dontGunzip) {    int head=bytes[0] & 0xff | bytes[1] << 8 & 0xff00;    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public float loadFloat(Offset offset){  return 0;}  }
class C{  public void checkAndHandleFirstVisibleCellChange(){  if (mCurrentFirstVisibleItem != mPreviousFirstVisibleItem) {    if (mCellIsMobile && mMobileItemId != INVALID_ID) {      updateNeighborViewsForID(mMobileItemId);      handleCellSwitch();    }  }}  }
class C{  private JavaFile createMigrationFile(Schema from,Schema to,Schema beforeFrom){  final int fromVersion=from.getVersion();  final int toVersion=to.getVersion();  if (fromVersion >= toVersion) {    throw new IllegalArgumentException("Cannot generate a migration from " + fromVersion + " to "+ toVersion);  }  final ClassName migrationClassName=Utils.generateMigrationName(mPackageName,from,to);  final MethodSpec getTargetVersionSpec=MethodSpec.methodBuilder("getTargetVersion").addAnnotation(Override.class).addModifiers(Modifier.PROTECTED).returns(int.class).addStatement("return $L",fromVersion).build();  final MethodSpec getMigratedVersionSpec=MethodSpec.methodBuilder("getMigratedVersion").addAnnotation(Override.class).addModifiers(Modifier.PROTECTED).returns(int.class).addStatement("return $L",toVersion).build();  final MethodSpec.Builder getPreviousMigrationBuilder=MethodSpec.methodBuilder("getPreviousMigration").addAnnotation(Override.class).addModifiers(Modifier.PROTECTED).returns(mAbstractMigrationClassName);  MethodSpec getPreviousMigrationSpec;  if (beforeFrom == null) {    getPreviousMigrationBuilder.addStatement("return null");  } else {    getPreviousMigrationBuilder.addStatement("return new $T()",Utils.generateMigrationName(mPackageName,beforeFrom,from));  }  getPreviousMigrationSpec=getPreviousMigrationBuilder.build();  final MethodSpec applyMigrationSpec=createApplyMethodSpec(from,to);  final TypeSpec migrationSpec=TypeSpec.classBuilder(migrationClassName.simpleName()).superclass(mAbstractMigrationClassName).addModifiers(Modifier.PUBLIC).addMethods(Arrays.asList(getTargetVersionSpec,getMigratedVersionSpec,getPreviousMigrationSpec,applyMigrationSpec)).build();  return JavaFile.builder(mPackageName,migrationSpec).addFileComment(Poirot.GENERATED_FILE).build();}  }
class C{  public boolean match(String ns,String nm){  if (namespaceURI != null) {    if (!namespaceURI.equals(ns)) {      return false;    }  } else   if (ns != null) {    return false;  }  return name.equals(nm);}  }
class C{  public void hide(){  mDismissed=true;  removeCallbacks(mDelayedShow);  long diff=System.currentTimeMillis() - mStartTime;  if (diff >= MIN_SHOW_TIME || mStartTime == -1) {    setVisibility(View.GONE);  } else {    if (!mPostedHide) {      postDelayed(mDelayedHide,MIN_SHOW_TIME - diff);      mPostedHide=true;    }  }}  }
class C{  protected void engineInit(int opmode,Key key,AlgorithmParameters params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  if (params != null) {    throw new InvalidAlgorithmParameterException("This cipher " + "does not accept any parameters");  }  engineInit(opmode,key,random);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static void overrideSymbolSet(SymbolInfo[] override){  symbols=override;}  }
class C{  private void onWifiP2pThisDeviceChanged(Context context,Intent intent){  mLocalDevice=(WifiP2pDevice)intent.getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_DEVICE);  Log.v(TAG,"Wifi P2P this device changed action received; local device is now: " + mLocalDevice);}  }
class C{  private void addWalletTransaction(Pool pool,Transaction tx){  checkState(lock.isHeldByCurrentThread());  transactions.put(tx.getHash(),tx);switch (pool) {case UNSPENT:    checkState(unspent.put(tx.getHash(),tx) == null);  break;case SPENT:checkState(spent.put(tx.getHash(),tx) == null);break;case PENDING:checkState(pending.put(tx.getHash(),tx) == null);break;case DEAD:checkState(dead.put(tx.getHash(),tx) == null);break;default :throw new RuntimeException("Unknown wallet transaction type " + pool);}if (pool == Pool.UNSPENT || pool == Pool.PENDING) {for (TransactionOutput output : tx.getOutputs()) {if (output.isAvailableForSpending() && output.isMineOrWatched(this)) myUnspents.add(output);}}tx.getConfidence().addEventListener(Threading.SAME_THREAD,txConfidenceListener);}  }
class C{  public static void applyToStatusLine(DialogPage page,IStatus status){  String message=status.getMessage();switch (status.getSeverity()) {case IStatus.OK:    page.setMessage(message,IMessageProvider.NONE);  page.setErrorMessage(null);break;case IStatus.WARNING:page.setMessage(message,IMessageProvider.WARNING);page.setErrorMessage(null);break;case IStatus.INFO:page.setMessage(message,IMessageProvider.INFORMATION);page.setErrorMessage(null);break;default :if (message.length() == 0) {message=null;}page.setMessage(null);page.setErrorMessage(message);break;}}  }
class C{  public int unStartSize(){  return mDownloadQueue.size();}  }
class C{  public static org.oscm.vo.VOServiceDetails convertToApi(org.oscm.internal.vo.VOServiceDetails oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOServiceDetails newVO=new org.oscm.vo.VOServiceDetails();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setTechnicalService(convertToApi(oldVO.getTechnicalService()));  newVO.setImageDefined(oldVO.isImageDefined());  newVO.setParameters(convertToApiVOParameter(oldVO.getParameters()));  newVO.setDescription(oldVO.getDescription());  newVO.setName(oldVO.getName());  newVO.setServiceId(oldVO.getServiceId());  newVO.setTechnicalId(oldVO.getTechnicalId());  newVO.setFeatureURL(oldVO.getFeatureURL());  newVO.setBaseURL(oldVO.getBaseURL());  newVO.setPriceModel(convertToApi(oldVO.getPriceModel()));  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.ServiceStatus.class));  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.types.enumtypes.ServiceAccessType.class));  newVO.setSellerId(oldVO.getSellerId());  newVO.setSellerName(oldVO.getSellerName());  newVO.setSellerKey(oldVO.getSellerKey());  newVO.setTags(oldVO.getTags());  newVO.setShortDescription(oldVO.getShortDescription());  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setNumberOfReviews(oldVO.getNumberOfReviews());  newVO.setOfferingType(EnumConverter.convert(oldVO.getOfferingType(),org.oscm.types.enumtypes.OfferingType.class));  newVO.setConfiguratorUrl(oldVO.getConfiguratorUrl());  newVO.setCustomTabUrl(oldVO.getCustomTabUrl());  newVO.setCustomTabName(oldVO.getCustomTabName());  return newVO;}  }
class C{  public BufferParameters(int quadrantSegments){  setQuadrantSegments(quadrantSegments);}  }
class C{  @Override public boolean match(Certificate cert){  if (!super.match(cert))   return (false);  if (badKeySet.contains(cert.getPublicKey())) {    if (debug != null)     debug.println("RejectKeySelector.match: bad key");    return false;  }  if (debug != null)   debug.println("RejectKeySelector.match: returning true");  return true;}  }
class C{  private static void readAdminsFromFile(final Player player){synchronized (StendhalRPRuleProcessor.class) {    if (adminNames == null) {      Map<String,String> tempAdminNames=new HashMap<String,String>();      String adminFilename="data/conf/admins.txt";      try {        InputStream is=player.getClass().getClassLoader().getResourceAsStream(adminFilename);        if (is == null) {          logger.info(adminFilename + " does not exist.");          return;        }        final BufferedReader in=new BufferedReader(new UnicodeSupportingInputStreamReader(is));        try {          String line;          while ((line=in.readLine()) != null) {            String[] tokens=line.split("=");            if (tokens.length >= 2) {              tempAdminNames.put(tokens[0].trim(),tokens[1].trim());            } else {              tempAdminNames.put(tokens[0].trim(),Integer.toString(AdministrationAction.REQUIRED_ADMIN_LEVEL_FOR_SUPER));            }          }        } catch (        final Exception e) {          logger.error("Error loading admin names from: " + adminFilename,e);        } finally {          in.close();        }        adminNames=tempAdminNames;      } catch (      final IOException e) {        logger.error("Error loading admin names from: " + adminFilename,e);      }    }  }  if (adminNames.get(player.getName()) != null) {    player.setAdminLevel(Integer.parseInt(adminNames.get(player.getName())));  }}  }
class C{  public float slotsUnused(){  if (m_totalSlots == 0) {    return 0.0f;  }  BigDecimal used=new BigDecimal(100 * (m_totalSlots - usedSlots()));  BigDecimal total=new BigDecimal(m_totalSlots);  if (total.signum() == 0)   return 0f;  return used.divide(total,2,RoundingMode.HALF_UP).floatValue();}  }
class C{  @Override public boolean shouldExecuteOnProject(Project project){  return delphiProjectHelper.shouldExecuteOnProject();}  }
class C{  public SignatureAndHashAlgorithm(int hashAlgorithmCode,int signatureAlgorithmCode){  this.signature=SignatureAlgorithm.getAlgorithmByCode(signatureAlgorithmCode);  this.hash=HashAlgorithm.getAlgorithmByCode(hashAlgorithmCode);}  }
class C{  public void clearWithFinalAction(Action1<Object> destroyAction){  try {    optionOf(Shank.scopedCache.get(this)).doIfPresent(null);  }  finally {    action.call();  }}  }
class C{  protected DNSJavaNameService(){  String nameServers=System.getProperty(nsProperty);  String domain=System.getProperty(domainProperty);  String v6=System.getProperty(v6Property);  if (nameServers != null) {    StringTokenizer st=new StringTokenizer(nameServers,",");    String[] servers=new String[st.countTokens()];    int n=0;    while (st.hasMoreTokens())     servers[n++]=st.nextToken();    try {      Resolver res=new ExtendedResolver(servers);      Lookup.setDefaultResolver(res);    } catch (    UnknownHostException e) {      System.err.println("DNSJavaNameService: invalid " + nsProperty);    }  }  if (domain != null) {    try {      Lookup.setDefaultSearchPath(new String[]{domain});    } catch (    TextParseException e) {      System.err.println("DNSJavaNameService: invalid " + domainProperty);    }  }  if (v6 != null && v6.equalsIgnoreCase("true"))   preferV6=true;}  }
class C{  public WebSocket clearUserInfo(){  mHandshakeBuilder.clearUserInfo();  return this;}  }
class C{  public boolean isEmpty(){  return options.isEmpty();}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((MarklinListener)client).message((MarklinMessage)m);}  }
class C{  public <P,Q>String testSuperSuperMethod2(int x1,int x2){  return null;}  }
class C{  public static boolean polyIntersect_optimized(double[] polyPoints1,double[] polyPoints2){  Geo geos1[]=new Geo[polyPoints1.length / 2];  Geo geos2[]=new Geo[polyPoints2.length / 2];  for (int i=0; i < geos1.length; i++) {    geos1[i]=new Geo(polyPoints1[2 * i],polyPoints1[2 * i + 1]);  }  for (int i=0; i < geos2.length; i++) {    geos2[i]=new Geo(polyPoints2[2 * i],polyPoints2[2 * i + 1]);  }  for (int i=0; i < geos1.length - 1; i++) {    for (int j=0; j < geos2.length - 1; j++) {      Geo p1=geos1[i];      Geo p2=geos1[i + 1];      Geo p3=geos2[j];      Geo p4=geos2[j + 1];      Geo[] results=getSegIntersection(p1,p2,p3,p4);      if (results[0] != null || results[1] != null) {        return true;      }    }  }  return false;}  }
class C{  private boolean isTagPresent(String message,String tag){  return (message != null) && (tag != null) && (message.toLowerCase().contains(tag));}  }
class C{  public UF13(){  super(8,22,5);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public X509CRLHolder(InputStream crlStream) throws IOException {  this(parseStream(crlStream));}  }
class C{  public Void call() throws Exception {  log("Opening the connection to " + connection.getURL());  connection.connect();  log("Connection has been ESTABLISHED, using proxy: " + connection.usingProxy());  if (connection.getDoOutput()) {    log("Posting data");    connection.getOutputStream().write(clientsData.getBytes());  }  InputStream is=connection.getInputStream();  log("Input Stream obtained");  byte[] buff=new byte[2048];  int num=0;  int byt=0;  while ((num < buff.length) && ((byt=is.read()) != -1)) {    buff[num++]=(byte)byt;  }  String message=new String(buff,0,num);  log("Got content:\n" + message);  log("------------------");  log("Response code: " + connection.getResponseCode());  assertEquals(httpsResponseContent,message);  return null;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentityreferencenodevalue.class,args);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UserRecord rec=getUserRecord(stack);  return Wizard.getInstance().removeUserRecord(rec) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static Scale quartiles(){  return scale(4);}  }
class C{  public static long firstMondayAfter1900(){  int offset=TimeZone.getDefault().getRawOffset();  TimeZone z=new SimpleTimeZone(offset,"UTC-" + offset);  Calendar cal=new GregorianCalendar(z);  cal.set(1900,0,1,0,0,0);  cal.set(Calendar.MILLISECOND,0);  while (cal.get(Calendar.DAY_OF_WEEK) != Calendar.MONDAY) {    cal.add(Calendar.DATE,1);  }  return cal.getTime().getTime();}  }
class C{  public void buildReport(String organizationId,VOReportResult result) throws XPathExpressionException, ParserConfigurationException {  result.setServerTimeZone(DateConverter.getCurrentTimeZoneAsUTCString());  List<ReportResultData> reportData=dao.retrieveProviderSubscriptionReportData(organizationId,SubscriptionStatus.ACTIVE.name());  ReportDataConverter converter=new ReportDataConverter(subscriptionDao);  converter.convertToXml(reportData,result.getData(),Collections.<String,String>emptyMap());}  }
class C{  protected void test(String problemName){  Problem problem=ProblemFactory.getInstance().getProblem(problemName);  NondominatedPopulation referenceSet=ProblemFactory.getInstance().getReferenceSet(problemName);  NondominatedPopulation approximationSet=generateApproximationSet(problemName,100);  GenerationalDistance myIndicator=new GenerationalDistance(problem,referenceSet);  jmetal.qualityIndicator.GenerationalDistance theirIndicator=new jmetal.qualityIndicator.GenerationalDistance();  double actual=myIndicator.evaluate(approximationSet);  double expected=theirIndicator.generationalDistance(toArray(approximationSet),toArray(referenceSet),problem.getNumberOfObjectives());  Assert.assertEquals(expected,actual,Settings.EPS);  actual=myIndicator.evaluate(referenceSet);  Assert.assertEquals(0.0,actual,Settings.EPS);}  }
class C{  public Map<Id<Node>,Node> searchBiggestCluster(Network network){  final Map<Id<Node>,Node> visitedNodes=new TreeMap<>();  Map<Id<Node>,Node> biggestCluster=new TreeMap<>();  log.info("running " + this.getClass().getName() + " algorithm...");  log.info("  checking " + network.getNodes().size() + " nodes and "+ network.getLinks().size()+ " links for dead-ends...");  boolean stillSearching=true;  Iterator<? extends Node> iter=network.getNodes().values().iterator();  while (iter.hasNext() && stillSearching) {    Node startNode=iter.next();    if (!visitedNodes.containsKey(startNode.getId())) {      Map<Id<Node>,Node> cluster=this.findCluster(startNode,network);      visitedNodes.putAll(cluster);      if (cluster.size() > biggestCluster.size()) {        biggestCluster=cluster;        if (biggestCluster.size() >= (network.getNodes().size() - visitedNodes.size())) {          stillSearching=false;        }      }    }  }  log.info("    The biggest cluster consists of " + biggestCluster.size() + " nodes.");  log.info("  done.");  return biggestCluster;}  }
class C{  public IllegalAccessException(){}  }
class C{  protected void insertHoldOutInstance(Instance inst,double weight,Tree parent) throws Exception {  if (inst.classAttribute().isNominal()) {    m_HoldOutDist[(int)inst.classValue()]+=weight;    int predictedClass=0;    if (m_ClassProbs == null) {      predictedClass=Utils.maxIndex(parent.m_ClassProbs);    } else {      predictedClass=Utils.maxIndex(m_ClassProbs);    }    if (predictedClass != (int)inst.classValue()) {      m_HoldOutError+=weight;    }  } else {    m_HoldOutDist[0]+=weight;    m_HoldOutDist[1]+=weight * inst.classValue();    double diff=0;    if (m_ClassProbs == null) {      diff=parent.m_ClassProbs[0] - inst.classValue();    } else {      diff=m_ClassProbs[0] - inst.classValue();    }    m_HoldOutError+=diff * diff * weight;  }  if (m_Attribute != -1) {    if (inst.isMissing(m_Attribute)) {      for (int i=0; i < m_Successors.length; i++) {        if (m_Prop[i] > 0) {          m_Successors[i].insertHoldOutInstance(inst,weight * m_Prop[i],this);        }      }    } else {      if (m_Info.attribute(m_Attribute).isNominal()) {        m_Successors[(int)inst.value(m_Attribute)].insertHoldOutInstance(inst,weight,this);      } else {        if (inst.value(m_Attribute) < m_SplitPoint) {          m_Successors[0].insertHoldOutInstance(inst,weight,this);        } else {          m_Successors[1].insertHoldOutInstance(inst,weight,this);        }      }    }  }}  }
class C{  public Boolean isStgInstrInd(){  return stgInstrInd;}  }
class C{  protected static Boolean isDistributed_DTLS(){  TXLockService dtls=TXLockService.getDTLS();  boolean isDistributed=((TXLockServiceImpl)dtls).getInternalDistributedLockService().isDistributed();  DLockService svc=((TXLockServiceImpl)dtls).getInternalDistributedLockService();  assertNotNull(svc);  assertEquals("DTLS InternalDistributedLockService should not be destroyed",false,svc.isDestroyed());  if (true) {    DLockService service=DLockService.getInternalServiceNamed(svc.getName());    assertNotNull(service);    assertEquals("DTLS and DLock should both report same isDistributed result",true,isDistributed == service.isDistributed());  }  Boolean result=Boolean.valueOf(isDistributed);  logInfo("isDistributed_DTLS (hopefully true): " + result);  return result;}  }
class C{  protected void processFreeResponse(@SuppressWarnings("UnusedParameters") Response response){}  }
class C{  public void addAttributes(Map<? extends Attribute,?> attributes,int beginIndex,int endIndex){  if (attributes == null) {    throw new NullPointerException();  }  if (beginIndex < 0 || endIndex > length() || beginIndex > endIndex) {    throw new IllegalArgumentException("Invalid substring range");  }  if (beginIndex == endIndex) {    if (attributes.isEmpty())     return;    throw new IllegalArgumentException("Can't add attribute to 0-length text");  }  if (runCount == 0) {    createRunAttributeDataVectors();  }  int beginRunIndex=ensureRunBreak(beginIndex);  int endRunIndex=ensureRunBreak(endIndex);  Iterator<? extends Map.Entry<? extends Attribute,?>> iterator=attributes.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<? extends Attribute,?> entry=iterator.next();    addAttributeRunData(entry.getKey(),entry.getValue(),beginRunIndex,endRunIndex);  }}  }
class C{  public static <T>OrderedItem<T> of(T value,long index){  return new PrimaryOrderedItem<>(value,index);}  }
class C{  public final void removeElementAt(final int id){  if (id >= 0) {    System.arraycopy(items,id + 1,items,id,current_item - 1 - id);    items[current_item - 1]=0;  } else {    items[0]=0;  }  current_item--;}  }
class C{  public void open(){synchronized (this) {    boolean old=mCondition;    mCondition=true;    if (!old) {      this.notifyAll();    }  }}  }
class C{  private void generate(String kind,Object callback) throws SAXException {  if (callback == null) {    return;  }  handler.startElement("",kind,kind,EMPTY);  String className=callback.getClass().getName();  handler.startElement("",CLASS_NAME,CLASS_NAME,EMPTY);  handler.characters(className.toCharArray(),0,className.length());  handler.endElement("",CLASS_NAME,CLASS_NAME);  Properties props=null;  if (callback instanceof Declarable2) {    props=((Declarable2)callback).getConfig();  } else   if (callback instanceof ReflectionBasedAutoSerializer) {    props=((ReflectionBasedAutoSerializer)callback).getConfig();  } else   if (callback instanceof Declarable && cache instanceof GemFireCacheImpl) {    props=((GemFireCacheImpl)cache).getDeclarableProperties((Declarable)callback);  }  generate(props,null);  handler.endElement("",kind,kind);}  }
class C{  public static <E extends Comparable<E>>MinMaxPriorityQueue<E> create(){  return new Builder<Comparable>(Ordering.natural()).create();}  }
class C{  @SuppressWarnings("static-access") protected void parseArgs(String[] args) throws AdeUsageException {  Option helpOpt=new Option("h","help",false,"Mask potentially sensitive information in Linux Log RFC 3164 format");  options.addOption(helpOpt);  Option outputFileOpt=OptionBuilder.withLongOpt("output").hasArg(true).withArgName("FILE").isRequired(false).withDescription("Output file name ").create('o');  options.addOption(outputFileOpt);  Option inputFileOpt=OptionBuilder.withLongOpt("input").hasArg(true).withArgName("FILE").isRequired(false).withDescription("Input file name").create('f');  options.addOption(inputFileOpt);  Option systemNameOpt=OptionBuilder.withLongOpt("systemname").hasArg(true).withArgName("SYSTEM_NAME").isRequired(false).withDescription("String to replace system name").create('s');  options.addOption(systemNameOpt);  Option companyNameOpt=OptionBuilder.withLongOpt("companyname").hasArgs(2).withArgName("COMPANY_NAME> <REPLACEMENT_COMPANY_NAME").isRequired(false).withDescription("String to find company name and replacement company name").withValueSeparator(' ').create('c');  options.addOption(companyNameOpt);  Option ipAddressMaskOpt=OptionBuilder.withLongOpt("maskIPAddress").withDescription("Do not mask IP address with local host IP address").create('t');  options.addOption(ipAddressMaskOpt);  Option emailAddressMaskOpt=OptionBuilder.withLongOpt("maskEmailAddress").withDescription("Do not Mask email address with gmail.com address").create('e');  options.addOption(emailAddressMaskOpt);  CommandLineParser parser=new GnuParser();  CommandLine line=null;  try {    line=parser.parse(options,args);  } catch (  MissingOptionException exp) {    new HelpFormatter().printHelp(AdeMaskLog.class.getName(),options);    throw new AdeUsageException("Command Line parsing failed",exp);  }catch (  ParseException exp) {    logger.error("Parsing failed",exp);    throw new AdeUsageException("Argument Parsing failed",exp);  }  if (line.hasOption('h')) {    new HelpFormatter().printHelp(this.getClass().getSimpleName(),options);    System.exit(0);  }  if (line.hasOption(helpOpt.getLongOpt())) {    new HelpFormatter().printHelp(getClass().getSimpleName(),options);  }  if (line.hasOption(outputFileOpt.getLongOpt())) {    mOutputFile=new File(line.getOptionValue(outputFileOpt.getLongOpt()));  } else {    throw new AdeUsageException("Command Line parsing failed missing output file name");  }  if (line.hasOption(inputFileOpt.getLongOpt())) {    mInputFile=new File(line.getOptionValue(inputFileOpt.getLongOpt()));  } else {    throw new AdeUsageException("Command Line parsing failed missing input file name");  }  if (line.hasOption(systemNameOpt.getLongOpt())) {    mSystemName=line.getOptionValue(systemNameOpt.getLongOpt());  }  if (line.hasOption(companyNameOpt.getLongOpt())) {    String[] workArg=line.getOptionValues(companyNameOpt.getLongOpt());    mCompanyName=workArg[0];    mCompanyNameNew=workArg[1];  }  if (line.hasOption(ipAddressMaskOpt.getLongOpt())) {    mMaskTCPIPAddress=false;  }  if (line.hasOption(emailAddressMaskOpt.getLongOpt())) {    mMaskEmailAddress=false;  }}  }
class C{  public DViewAsn1Dump(JDialog parent,PKCS10CertificationRequest pkcs10Csr) throws Asn1Exception, IOException {  super(res.getString("DViewAsn1Dump.Csr.Title"));  this.pkcs10Csr=pkcs10Csr;  initComponents();}  }
class C{  public boolean canUseThisXPathQueryHolder(final String namespace){  boolean canUse=XAdESNamespaces.XAdES.equals(namespace);  return canUse;}  }
class C{  RightThreadedBinaryNode<T> construct(T value){  return new RightThreadedBinaryNode<T>(value);}  }
class C{  public static void createVerticalSpacer(Composite parent,int numlines){  Label lbl=new Label(parent,SWT.NONE);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  Layout layout=parent.getLayout();  if (layout instanceof GridLayout) {    gd.horizontalSpan=((GridLayout)parent.getLayout()).numColumns;  }  gd.heightHint=numlines;  lbl.setLayoutData(gd);}  }
class C{  public boolean isReferencedByRoot(){  if (rootBean) {    return true;  }  for (  Reference reference : references) {    Instance parent=reference.getParent();    if (parent.isReferencedByRoot()) {      return true;    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return ""; else {    sage.media.format.VideoFormat d=uiMgr.getDisplayResolution();    return (d == null) ? "" : d.getFormatName();  }}  }
class C{  public static boolean isAttributesResult(final Message message) throws JMSException {  return ManagementHelper.isAttributesResult(JMSManagementHelper.getCoreMessage(message));}  }
class C{  protected double calculateTotalWidth(double contentWidth){  double result=contentWidth;  result=this.padding.extendWidth(result);  result=this.frame.getInsets().extendWidth(result);  result=this.margin.extendWidth(result);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.659 -0400",hash_original_method="25B4B3738F76CD829B542B29AB479C5C",hash_generated_method="DAB4EDC68A95EDFC0B447329BEC057AA") protected void engineUpdate(byte b) throws SignatureException {  msgDigest.update(b);}  }
class C{  final public void println(char v){  Writer out=this.out;  if (out == null)   return;  try {    out.write(v);    out.write(_newline,0,_newline.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply r){  ((CanListener)client).reply((CanReply)r);}  }
class C{  public static String generateChatId(final String receiverId,final String senderId){  String combined=null;  if (receiverId.compareTo(senderId) < 0) {    combined=String.format(Locale.US,AppConstants.CHAT_ID_FORMAT,receiverId,senderId);  } else {    combined=String.format(Locale.US,AppConstants.CHAT_ID_FORMAT,senderId,receiverId);  }  String hashed=null;  try {    hashed=Utils.sha1(combined);  } catch (  final NoSuchAlgorithmException e) {    hashed=combined;  }  return hashed;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:32.782 -0500",hash_original_method="0F38C1B7EF4D27E0FE011F71A1226373",hash_generated_method="EE9A0886C5343FE0EEB4CA45AB817FDB") private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){  boolean scaleUp=(options & OPTIONS_SCALE_UP) != 0;  boolean recycle=(options & OPTIONS_RECYCLE_INPUT) != 0;  int deltaX=source.getWidth() - targetWidth;  int deltaY=source.getHeight() - targetHeight;  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);    Canvas c=new Canvas(b2);    int deltaXHalf=Math.max(0,deltaX / 2);    int deltaYHalf=Math.max(0,deltaY / 2);    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));    int dstX=(targetWidth - src.width()) / 2;    int dstY=(targetHeight - src.height()) / 2;    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);    c.drawBitmap(source,src,dst,null);    if (recycle) {      source.recycle();    }    c.setBitmap(null);    return b2;  }  float bitmapWidthF=source.getWidth();  float bitmapHeightF=source.getHeight();  float bitmapAspect=bitmapWidthF / bitmapHeightF;  float viewAspect=(float)targetWidth / targetHeight;  if (bitmapAspect > viewAspect) {    float scale=targetHeight / bitmapHeightF;    if (scale < .9F || scale > 1F) {      scaler.setScale(scale,scale);    } else {      scaler=null;    }  } else {    float scale=targetWidth / bitmapWidthF;    if (scale < .9F || scale > 1F) {      scaler.setScale(scale,scale);    } else {      scaler=null;    }  }  Bitmap b1;  if (scaler != null) {    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);  } else {    b1=source;  }  if (recycle && b1 != source) {    source.recycle();  }  int dx1=Math.max(0,b1.getWidth() - targetWidth);  int dy1=Math.max(0,b1.getHeight() - targetHeight);  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);  if (b2 != b1) {    if (recycle || b1 != source) {      b1.recycle();    }  }  return b2;}  }
class C{  public boolean addToReplicationGroup(URI storage,URI consistencyGroup,String replicationGroupName,List<URI> addVolumesList,String opId) throws ControllerException {  WorkflowStepCompleter.stepExecuting(opId);  TaskCompleter taskCompleter=null;  try {    List<String> lockKeys=new ArrayList<String>();    lockKeys.add(ControllerLockingUtil.getReplicationGroupStorageKey(_dbClient,replicationGroupName,storage));    WorkflowService workflowService=_blockDeviceController.getWorkflowService();    workflowService.acquireWorkflowStepLocks(opId,lockKeys,LockTimeoutValue.get(LockType.ARRAY_CG));    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);    taskCompleter=new BlockConsistencyGroupUpdateCompleter(consistencyGroup,opId);    _blockDeviceController.getDevice(storageSystem.getSystemType()).doAddToReplicationGroup(storageSystem,consistencyGroup,replicationGroupName,addVolumesList,taskCompleter);    WorkflowStepCompleter.stepSucceded(opId);  } catch (  Exception e) {    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    taskCompleter.error(_dbClient,serviceError);    WorkflowStepCompleter.stepFailed(opId,serviceError);    return false;  }  return true;}  }
class C{  @Override public Binding removeBinding(final SimpleString uniqueName,Transaction tx) throws Exception {  Binding binding=super.removeBinding(uniqueName,tx);  if (binding != null) {    Address add=getAddress(binding.getAddress());    if (add.containsWildCard()) {      for (      Address theAddress : add.getLinkedAddresses()) {        super.removeBindingInternal(theAddress.getAddress(),uniqueName);      }    }    removeAndUpdateAddressMap(add);  }  return binding;}  }
class C{  public static int hashCode(String[] names,Object[] values){  int hash=0;  for (int i=0; i < names.length; i++) {    Object v=values[i];    int h;    if (v == null) {      h=0;    } else     if (v instanceof Object[]) {      h=Arrays.deepHashCode((Object[])v);    } else     if (v.getClass().isArray()) {      h=Arrays.deepHashCode(new Object[]{v}) - 31;    } else {      h=v.hashCode();    }    hash+=names[i].toLowerCase().hashCode() ^ h;  }  return hash;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose();  if (getTo() == null || getTo().length() == 0) {    return;  }  if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    confirmPanel.getOKButton().setEnabled(false);    StringTokenizer st=new StringTokenizer(getTo()," ,;",false);    String to=st.nextToken();    EMail email=m_client.createEMail(getFrom(),to,getSubject(),getMessage());    String status="Check Setup";    if (email != null) {      while (st.hasMoreTokens())       email.addTo(st.nextToken());      StringTokenizer stcc=new StringTokenizer(getCc()," ,;",false);      while (stcc.hasMoreTokens()) {        String cc=stcc.nextToken();        if (cc != null && cc.length() > 0)         email.addCc(cc);      }      if (m_attachFile != null && m_attachFile.exists())       email.addAttachment(m_attachFile);      status=email.send();      if (m_user != null)       new MUserMail(m_user,m_user.getAD_User_ID(),email).saveEx();      if (email.isSentOK()) {        ADialog.info(0,this,"MessageSent");        dispose();      } else       ADialog.error(0,this,"MessageNotSent",status);    } else     ADialog.error(0,this,"MessageNotSent",status);    confirmPanel.getOKButton().setEnabled(false);    setCursor(Cursor.getDefaultCursor());  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose();}  }
class C{  public long rangeCount(final IPredicate predicate){  final IRelation relation=joinNexus.getTailRelationView(predicate);  final IAccessPath accessPath=joinNexus.getTailAccessPath(relation,predicate);  final long rangeCount=accessPath.rangeCount(false);  if (DEBUG) {    log.debug("rangeCount=" + rangeCount + ", tail="+ predicate+ ", accessPath="+ accessPath);  }  return rangeCount;}  }
class C{  private void checkForUpdates(String updateURL,boolean force){  UpdateMessageReader umr=new UpdateMessageReader();  umr.setUpdateURL(updateURL);  umr.readUpdateFile();  handlePossibleUpdateMessage(umr,force);  if (umr.hasAnnouncements()) {    attemptShowAnnouncements(umr.getAnnouncements());  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (ElmProt.PROP_STATUS.equals(evt.getPropertyName())) {    Message msg=mHandler.obtainMessage(MESSAGE_OBD_STATE_CHANGED);    msg.obj=evt;    mHandler.sendMessage(msg);  } else   if (ElmProt.PROP_NUM_CODES.equals(evt.getPropertyName())) {    Message msg=mHandler.obtainMessage(MESSAGE_OBD_NUMCODES);    msg.obj=evt;    mHandler.sendMessage(msg);  } else   if (ElmProt.PROP_ECU_ADDRESS.equals(evt.getPropertyName())) {    Message msg=mHandler.obtainMessage(MESSAGE_OBD_ECUS);    msg.obj=evt;    mHandler.sendMessage(msg);  } else   if (ObdProt.PROP_NRC.equals(evt.getPropertyName())) {    Message msg=mHandler.obtainMessage(MESSAGE_OBD_NRC);    msg.obj=evt;    mHandler.sendMessage(msg);  }}  }
class C{  @Override public void execute(){  IBaseDao<CnATreeElement,Serializable> iBaseDao=getDao(CnATreeElement.class);  importReferenceTypes=new ImportReferenceTypes(iBaseDao,getCommandService(),idElementMap);  try {    if (getLogrt().isDebugEnabled()) {      globalStart=System.currentTimeMillis();    }    merged=0;    CheckSourceId checkSourceId=new CheckSourceId(sourceId);    checkSourceId=getCommandService().executeCommand(checkSourceId);    sourceIdExists=checkSourceId.exists();    if (sourceIdExists && getLog().isDebugEnabled()) {      getLog().debug("Source-Id exists in DB: " + sourceId);    }    List<SyncObject> soList=syncData.getSyncObject();    for (    SyncObject so : soList) {      importObject(null,so);    }    importReferenceTypes.replaceExternalIdsWithDbIds();    if (getLogrt().isDebugEnabled()) {      getLogrt().debug("Elements: " + merged);    }    for (    SyncLink syncLink : syncData.getSyncLink()) {      importLink(syncLink);    }    importRiskAnalysis();    finalizeDaos();  } catch (  RuntimeException e) {    getLog().error("RuntimeException while importing",e);    throw e;  }catch (  Exception e) {    getLog().error("Exception while importing",e);    throw new RuntimeCommandException(e);  }}  }
class C{  public Builder notificationColor(String value){  notificationParams.put("color",value);  return this;}  }
class C{  private VecMathUtil(){}  }
class C{  private JProductFinder(java.awt.Dialog parent,boolean modal){  super(parent,modal);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public static <R,A,B,C>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,CompletionStage<C> c,Function3<A,B,C,R> function){  final CompletableFuture<A> af=a.toCompletableFuture();  final CompletableFuture<B> bf=b.toCompletableFuture();  final CompletableFuture<C> cf=c.toCompletableFuture();  return CompletableFuture.allOf(af,bf,cf).thenApply(null);}  }
class C{  public static String a_noun(final String noun){  if (noun == null) {    return null;  }  final String enoun=fullForm(noun);  return a_an(enoun) + enoun;}  }
class C{  public boolean isStableNumber(){  return true;}  }
class C{  public static String[][] APOS_ESCAPE(){  return APOS_ESCAPE.clone();}  }
class C{  public Polygon2D increaseVertexCount(int count){  int num=vertices.size();  while (num < count) {    int longestID=0;    float maxD=0;    for (int i=0; i < num; i++) {      float d=vertices.get(i).distanceToSquared(vertices.get((i + 1) % num));      if (d > maxD) {        longestID=i;        maxD=d;      }    }    Vec2D m=vertices.get(longestID).add(vertices.get((longestID + 1) % num)).scaleSelf(0.5f);    vertices.add(longestID + 1,m);    num++;  }  return this;}  }
class C{  public Builder addEmail(Email email){  if (email != null) {    this.emails.add(new Email.Builder(email).build());  }  return this;}  }
class C{  static int indexOf(Object obj,Object[] a,int start){  for (int i=start; i < a.length; i++) {    if (obj.equals(a[i]))     return i;  }  return -1;}  }
class C{  public void test(String... urls){  initComponent();  if (urls.length > 0) {    for (    String url : urls) {      processRequest(new Request(url));    }  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/schema";  String qualifiedName;  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  String charact;  java.util.List illegalQNames=new java.util.ArrayList();  illegalQNames.add("namespaceURI:{");  illegalQNames.add("namespaceURI:}");  illegalQNames.add("namespaceURI:~");  illegalQNames.add("namespaceURI:'");  illegalQNames.add("namespaceURI:!");  illegalQNames.add("namespaceURI:@");  illegalQNames.add("namespaceURI:#");  illegalQNames.add("namespaceURI:$");  illegalQNames.add("namespaceURI:%");  illegalQNames.add("namespaceURI:^");  illegalQNames.add("namespaceURI:&");  illegalQNames.add("namespaceURI:*");  illegalQNames.add("namespaceURI:(");  illegalQNames.add("namespaceURI:)");  illegalQNames.add("namespaceURI:+");  illegalQNames.add("namespaceURI:=");  illegalQNames.add("namespaceURI:[");  illegalQNames.add("namespaceURI:]");  illegalQNames.add("namespaceURI:\\");  illegalQNames.add("namespaceURI:/");  illegalQNames.add("namespaceURI:;");  illegalQNames.add("namespaceURI:`");  illegalQNames.add("namespaceURI:<");  illegalQNames.add("namespaceURI:>");  illegalQNames.add("namespaceURI:,");  illegalQNames.add("namespaceURI:a ");  illegalQNames.add("namespaceURI:\"");  doc=(Document)load("staffNS",false);  for (int indexN1009A=0; indexN1009A < illegalQNames.size(); indexN1009A++) {    qualifiedName=(String)illegalQNames.get(indexN1009A);    domImpl=doc.getImplementation();{      boolean success=false;      try {        aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  public static void main(final String[] args){  CoordinateTransformation ct=args.length == 3 ? TransformationFactory.getCoordinateTransformation("WGS84",args[2]) : null;  Osm2TransitSchedule osm2mts=new Osm2TransitSchedule(ScheduleTools.createSchedule(),ct);  osm2mts.parse(args[0]);  osm2mts.createSchedule();  osm2mts.writeFile(args[1]);}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  public AddMarketingPermissionException(String message,Object[] params){  super(message,params);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double maxPatchValue=0;  int x, y;  boolean blnFoundNeighbour;  boolean blnIncludeDiagNeighbour=false;  boolean blnTreatZerosAsBackground=false;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnIncludeDiagNeighbour=Boolean.parseBoolean(args[i]);      if (!blnIncludeDiagNeighbour) {        dX=new int[]{0,1,0,-1};        dY=new int[]{-1,0,1,0};      }    } else     if (i == 3) {      blnTreatZerosAsBackground=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    numScanCells=dY.length;    image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    noData=image.getNoDataValue();    double initialValue=-1;    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,initialValue);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (blnTreatZerosAsBackground) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (image.getValue(row,col) == 0) {            output.setValue(row,col,0);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      if (output.getValue(0,0) == -1) {        output.setValue(0,0,1);      }    } else {      output.setValue(0,0,0);    }    double patchValue=0;    double neighbourPatchValue=0;    double newPatchValue=0;    double imageValue=0;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        imageValue=image.getValue(row,col);        if (imageValue != noData) {          patchValue=output.getValue(row,col);          if (patchValue == initialValue) {            blnFoundNeighbour=false;            for (i=0; i < numScanCells; i++) {              x=col + dX[i];              y=row + dY[i];              neighbourPatchValue=output.getValue(y,x);              if (neighbourPatchValue != initialValue && image.getValue(y,x) == imageValue) {                output.setValue(row,col,neighbourPatchValue);                newPatchValue=neighbourPatchValue;                blnFoundNeighbour=true;                break;              }            }            if (!blnFoundNeighbour) {              maxPatchValue++;              newPatchValue=maxPatchValue;              output.setValue(row,col,newPatchValue);            }            depth=0;            ScanConnectedCells(row,col,imageValue,initialValue,newPatchValue);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    boolean somethingDone;    double[] reclass=new double[(int)maxPatchValue + 1];    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          imageValue=image.getValue(row,col);          if (imageValue != noData) {            patchValue=output.getValue(row,col);            for (i=0; i < numScanCells; i++) {              x=col + dX[i];              y=row + dY[i];              neighbourPatchValue=output.getValue(y,x);              if (neighbourPatchValue != patchValue && image.getValue(y,x) == imageValue) {                somethingDone=true;                if (patchValue < neighbourPatchValue) {                  reclass[(int)neighbourPatchValue]=-1;                  output.setValue(y,x,patchValue);                  ScanConnectedCells(y,x,imageValue,neighbourPatchValue,patchValue);                } else {                  reclass[(int)patchValue]=-1;                  output.setValue(row,col,neighbourPatchValue);                  ScanConnectedCells(row,col,imageValue,patchValue,neighbourPatchValue);                  patchValue=neighbourPatchValue;                }              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } while (somethingDone);    i=0;    for (int a=0; a < maxPatchValue + 1; a++) {      if (reclass[a] != -1) {        reclass[a]=i;        i++;      }    }    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        patchValue=output.getValue(row,col);        if (patchValue != noData) {          output.setValue(row,col,reclass[(int)patchValue]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void advanceCommitIndex() throws InterruptedException {  Map<Integer,Peer> peers=this.peers;  Arrays.fill(matchIndices,0);  final int[] ix={0};  peers.forEach(null);  for (int i=0; i < matchIndices.length; i++) {    for (int j=1; j < matchIndices.length - i; j++) {      if (matchIndices[j - 1] < matchIndices[j]) {        int temp=matchIndices[j - 1];        matchIndices[j - 1]=matchIndices[j];        matchIndices[j]=temp;      }    }  }  saveQueue.getLatest(savedRid);  int newCommitIndex=Math.min(savedRid.index,matchIndices[matchIndices.length - majority]);  if (newCommitIndex > commitIndex) {    commitIndex=newCommitIndex;  }}  }
class C{  private void upperCaseEmployees(List<Employee> employees){  Stream<String> employeeStream=employees.stream().map(null).map(null);  employeeStream.forEach(null);}  }
class C{  public static void mapClasses(int numClusters,int lev,int[][] counts,int[] clusterTotals,double[] current,double[] best,int error){  if (lev == numClusters) {    if (error < best[numClusters]) {      best[numClusters]=error;      for (int i=0; i < numClusters; i++) {        best[i]=current[i];      }    }  } else {    if (clusterTotals[lev] == 0) {      current[lev]=-1;      mapClasses(numClusters,lev + 1,counts,clusterTotals,current,best,error);    } else {      current[lev]=-1;      mapClasses(numClusters,lev + 1,counts,clusterTotals,current,best,error + clusterTotals[lev]);      for (int i=0; i < counts[0].length; i++) {        if (counts[lev][i] > 0) {          boolean ok=true;          for (int j=0; j < lev; j++) {            if ((int)current[j] == i) {              ok=false;              break;            }          }          if (ok) {            current[lev]=i;            mapClasses(numClusters,lev + 1,counts,clusterTotals,current,best,(error + (clusterTotals[lev] - counts[lev][i])));          }        }      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ARRAY_LITERAL__ELEMENTS:    return getElements();case N4JSPackage.ARRAY_LITERAL__TRAILING_COMMA:  return isTrailingComma();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public V pop() throws IndexOutOfBoundsException {  if (top == 0) {    throw new IndexOutOfBoundsException("Cannot pop operand off an empty stack.");  }  return values[--top + locals];}  }
class C{  public CancelResponse Cancel(RequestHeader RequestHeader,UnsignedInteger RequestHandle) throws ServiceFaultException, ServiceResultException {  CancelRequest req=new CancelRequest(RequestHeader,RequestHandle);  return (CancelResponse)channel.serviceRequest(req);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public int indexOf(String groupName,int index){  int idx=-1;  if (groupInfo.containsKey(groupName)) {    List<GroupInfo> list=groupInfo.get(groupName);    idx=list.get(index).groupIndex();  }  return idx;}  }
class C{  public static Map<String,Object> testProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=FastMap.newInstance();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  if (processAmount != null && processAmount.compareTo(new BigDecimal("100.00")) >= 0)   result.put("authResult",Boolean.TRUE);  if (processAmount != null && processAmount.compareTo(new BigDecimal("100.00")) < 0)   result.put("authResult",Boolean.FALSE);  result.put("customerRespMsgs",UtilMisc.toList(UtilProperties.getMessage(resource,"AccountingPaymentTestProcessorMinimumPurchase",locale)));  if (processAmount == null)   result.put("authResult",null);  String refNum=UtilDateTime.nowAsString();  result.put("processAmount",context.get("processAmount"));  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authFlag","X");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestProcessor",locale));  result.put("internalRespMsgs",UtilMisc.toList(UtilProperties.getMessage(resource,"AccountingPaymentTestProcessor",locale)));  return result;}  }
class C{  public SoundEffects(KeyFrames keyFrames){  this.keyFrames=keyFrames;  try {    URL url=SoundEffects.class.getResource("sounds/vroom.wav");    drivingClip=java.applet.Applet.newAudioClip(url);    url=SoundEffects.class.getResource("sounds/drift.wav");    turningClip=java.applet.Applet.newAudioClip(url);  } catch (  Exception e) {    System.out.println("Problem loading track/car images: " + e);  }}  }
class C{  static String genInitializers(){  return initializers.toString();}  }
class C{  public void testLongExtremeValues() throws Exception {  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,1,true,Arrays.asList(0xffffffffffffffffL,0xffffffffffffffffL),Arrays.asList(0));  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,2,true,Arrays.asList(0xffffffffffffffffL,0xffffffffffffffffL),Arrays.asList(0));  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,4,true,Arrays.asList(0xffffffffffffffffL,0xffffffffffffffffL),Arrays.asList(0));  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,6,true,Arrays.asList(0xffffffffffffffffL,0xffffffffffffffffL),Arrays.asList(0));  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,8,true,Arrays.asList(0xffffffffffffffffL,0xffffffffffffffffL),Arrays.asList(0));  assertLongRangeSplit(Long.MAX_VALUE,Long.MAX_VALUE,64,true,Arrays.asList(0xffffffffffffffffL,0xffffffffffffffffL),Arrays.asList(0));  assertLongRangeSplit(Long.MAX_VALUE - 0xfL,Long.MAX_VALUE,4,true,Arrays.asList(0xfffffffffffffffL,0xfffffffffffffffL),Arrays.asList(4));  assertLongRangeSplit(Long.MAX_VALUE - 0x10L,Long.MAX_VALUE,4,true,Arrays.asList(0xffffffffffffffefL,0xffffffffffffffefL,0xfffffffffffffffL,0xfffffffffffffffL),Arrays.asList(0,4));  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,1,true,Arrays.asList(0x0000000000000000L,0x0000000000000000L),Arrays.asList(0));  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,2,true,Arrays.asList(0x0000000000000000L,0x0000000000000000L),Arrays.asList(0));  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,4,true,Arrays.asList(0x0000000000000000L,0x0000000000000000L),Arrays.asList(0));  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,6,true,Arrays.asList(0x0000000000000000L,0x0000000000000000L),Arrays.asList(0));  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,8,true,Arrays.asList(0x0000000000000000L,0x0000000000000000L),Arrays.asList(0));  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE,64,true,Arrays.asList(0x0000000000000000L,0x0000000000000000L),Arrays.asList(0));  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE + 0xfL,4,true,Arrays.asList(0x000000000000000L,0x000000000000000L),Arrays.asList(4));  assertLongRangeSplit(Long.MIN_VALUE,Long.MIN_VALUE + 0x10L,4,true,Arrays.asList(0x0000000000000010L,0x0000000000000010L,0x000000000000000L,0x000000000000000L),Arrays.asList(0,4));}  }
class C{  public void beginExtractInterval(){  intervalStartMillis=System.currentTimeMillis();  endMillis=intervalStartMillis;  state=TaskState.extract;}  }
class C{  public T caseMethodDeclaration(MethodDeclaration object){  return null;}  }
class C{  public boolean isFolderExist(long scopeGroupId,long parentFolderId,String folderName){  boolean folderExist=false;  try {    DLAppServiceUtil.getFolder(scopeGroupId,parentFolderId,folderName);    folderExist=true;  } catch (  Exception e) {  }  return folderExist;}  }
class C{  public void removePoint(PointLayer point){  if (!point.isProjected()) {    Coord c=getProjection().fromWGS84(point);    point.setLatitude(c.getLatitude());    point.setLongitude(c.getLongitude());    point.setProjected(true);  }  points.removeElement(point);}  }
class C{  @Override public boolean isReady(){  try {    Socket s=new Socket();    s.connect(new InetSocketAddress(ipAddress,port),CONNECTION_TIMEOUT);    s.close();    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  private void updateRunHeader(){  MCommissionRun run=new MCommissionRun(getCtx(),getC_CommissionRun_ID(),get_TrxName());  run.updateFromAmt();  run.saveEx();}  }
class C{  public AlgorithmTerminationException(Algorithm algorithm,String message,Throwable cause){  super(algorithm,message,cause);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void createAndShowGUI(final GraphSet graphs,LineMapper lineMapper){  frame=new JFrame("SequenceDiagram");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  createMenu();  createSequenceDiagram(graphs,lineMapper);  createSequenceMaps(graphs);  createSelectGraphDialog(graphs);  sequencePanel=new SequencePanel(sequenceDiagram);  frame.getContentPane().add(sequencePanel);  frame.pack();  frame.setVisible(true);  showGraphSelector();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputFileName;  int row, col, x, y;  double xCoord, yCoord, value;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputFileName=args[1];  if ((inputHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputRaster=new WhiteboxRaster(inputHeader,"r");    int rows=inputRaster.getNumberRows();    int cols=inputRaster.getNumberColumns();    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POINT);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("VALUE");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int FID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=inputRaster.getValue(row,col);        if (value > 0) {          FID++;          xCoord=inputRaster.getXCoordinateFromColumn(col);          yCoord=inputRaster.getYCoordinateFromRow(row);          whitebox.geospatialfiles.shapefile.Point pnt=new whitebox.geospatialfiles.shapefile.Point(xCoord,yCoord);          output.addRecord(pnt);          Object[] rowData=new Object[2];          rowData[0]=new Double(FID);          rowData[1]=new Double(value);          writer.addRecord(rowData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.write();    writer.write();    inputRaster.close();    returnData(outputFileName);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void configure(){  if (log.isDebugEnabled()) {    log.debug("configure called");  }  DCCppTrafficController packets=(new DCCppEthernetPacketizer(new DCCppCommandStation()));  packets.connectPort(this);  this.getSystemConnectionMemo().setDCCppTrafficController(packets);  new DCCppInitializationManager(this.getSystemConnectionMemo());}  }
class C{  public void registerController(final Class<?> mappedControllerClass,final ViewController controller){  controllers.put(mappedControllerClass,controller);  if (Strings.isNotEmpty(controller.getViewId())) {    parser.getData().addActorConsumer(SCREEN_TRANSITION_ACTION_PREFIX + controller.getViewId(),new ScreenTransitionAction(this,mappedControllerClass));  }}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  int id=item.getItemId();  if (id == R.id.action_settings) {    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  public static boolean isValidSHA1(String s){  return s.matches("[a-fA-F0-9]{40}");}  }
class C{  public Matrix mulAssign(final double scalar){  if (addr.isContiguous()) {    for (int addr=0; addr < size(); addr++) {      $[addr]*=scalar;    }  } else {    final Address.MatrixAddress.MatrixOffset dst=this.addr.offset();    for (int row=0; row < rows(); row++) {      dst.setRow(row);      for (int col=0; col < cols(); col++) {        $[dst.op()]*=scalar;        dst.nextCol();      }    }  }  return this;}  }
class C{  boolean isBaseHeader(){  return value == BASE_HEADER;}  }
class C{  public void releaseAndCleanup(){  stop();  if (cameraSource != null) {    cameraSource.release();    cameraSource=null;  }}  }
class C{  public <R>R mapTo(Class<R> resultClass,Object properties,String[] propertyNames){  return propertyNames.length == 1 ? resultClass.cast(properties) : mapper.convertValue(propertyMap((Object[])properties,propertyNames),resultClass);}  }
class C{  public ExtensionValue(byte[] encoding){  this.encoding=encoding;}  }
class C{  public BufferRecycler _getBufferRecycler(){  SoftReference<BufferRecycler> ref=_recyclerRef.get();  BufferRecycler br=(ref == null) ? null : ref.get();  if (br == null) {    br=new BufferRecycler();    _recyclerRef.set(new SoftReference<BufferRecycler>(br));  }  return br;}  }
class C{  public UnicodeBOMInputStream(final InputStream inputStream) throws NullPointerException, IOException {  if (inputStream == null)   throw new NullPointerException("invalid input stream: null is not allowed");  in=new PushbackInputStream(inputStream,4);  final byte bom[]=new byte[4];  final int read=in.read(bom);switch (read) {case 4:    if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) && (bom[2] == (byte)0x00)&& (bom[3] == (byte)0x00)) {      this.bom=BOM.UTF_32_LE;      break;    } else     if ((bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) && (bom[2] == (byte)0xFE)&& (bom[3] == (byte)0xFF)) {      this.bom=BOM.UTF_32_BE;      break;    }case 3:  if ((bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) && (bom[2] == (byte)0xBF)) {    this.bom=BOM.UTF_8;    break;  }case 2:if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE)) {  this.bom=BOM.UTF_16_LE;  break;} else if ((bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF)) {  this.bom=BOM.UTF_16_BE;  break;}default :this.bom=BOM.NONE;break;}if (read > 0) in.unread(bom,0,read);}  }
class C{  private String retrieveRegistrationLinkDetails(List<NameValuePair> registrationParameters,RequestData data2) throws PSPCommunicationException {  StringBuffer response=new StringBuffer();  String pspPostInterfaceURL=data2.getProperty(HeidelpayConfigurationKey.PSP_POST_URL.name());  PostMethod postMethod=HttpMethodFactory.getPostMethod(pspPostInterfaceURL);  List<NameValuePair> parameters=new ArrayList<NameValuePair>();  parameters.addAll(registrationParameters);  NameValuePair[] data=parameters.toArray(new NameValuePair[parameters.size()]);  postMethod.setRequestBody(data);  Header rqHeader=new Header("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");  postMethod.setRequestHeader(rqHeader);  BufferedReader br=null;  InputStream in=null;  try {    client.executeMethod(postMethod);    in=postMethod.getResponseBodyAsStream();    br=new BufferedReader(new InputStreamReader(in,"UTF-8"));    String line=br.readLine();    while (line != null) {      response.append(line);      line=br.readLine();    }  } catch (  Exception e) {    PSPCommunicationException pce=new PSPCommunicationException("Failure during communication with the PSP",Reason.MISSING_RESPONSE_URL,e);    logger.logWarn(Log4jLogger.SYSTEM_LOG,pce,LogMessageIdentifier.WARN_RETRIEVE_PSP_LINK_FAILED);    throw pce;  } finally {    try {      if (br != null)       br.close();    } catch (    IOException ex) {    }    try {      if (in != null) {        in.close();      }    } catch (    IOException ex) {    }    postMethod.releaseConnection();  }  return response.toString();}  }
class C{  private void load(int AD_User_ID){  log.info("ID=" + AD_User_ID + ", AD_Client_ID="+ m_AD_Client_ID);  String sql="SELECT * " + "FROM AD_User " + "WHERE AD_Client_ID=?"+ " AND AD_User_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_AD_Client_ID);    pstmt.setInt(2,AD_User_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      m_bpc=new MUser(m_ctx,rs,null);      log.fine("= found BPC=" + m_bpc);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  m_passwordOK=false;  m_loggedIn=false;  if (m_bpc != null) {    m_bp=new MBPartner(m_ctx,m_bpc.getC_BPartner_ID(),null);    log.fine("= Found BP=" + m_bp);  } else   m_bp=null;  if (m_bpc != null) {    if (m_bpc.getC_BPartner_Location_ID() != 0) {      m_bpl=new MBPartnerLocation(m_ctx,m_bpc.getC_BPartner_Location_ID(),null);      log.fine("= Found BPL=" + m_bpl);    } else {      MBPartnerLocation[] bpls=m_bp.getLocations(false);      if (bpls != null && bpls.length > 0) {        m_bpl=bpls[0];        log.fine("= Found BPL=" + m_bpl);      }    }    if (m_bpl != null) {      m_loc=MLocation.get(m_ctx,m_bpl.getC_Location_ID(),null);      log.fine("= Found LOC=" + m_loc);    } else     m_loc=null;  } else {    m_bpl=null;    m_loc=null;  }  if (m_bpc == null) {    m_bpc=new MUser(m_ctx,0,null);    m_bpc.setEMail("?");    m_bpc.setPassword("?");  }  if (m_bp == null) {    m_bp=new MBPartner(m_ctx);    m_bp.setIsCustomer(true);  }  if (m_bpl == null)   m_bpl=new MBPartnerLocation(m_bp);  if (m_loc == null)   m_loc=new MLocation(m_ctx,0,null);  log.info("= " + m_bp + " - "+ m_bpc);}  }
class C{  public static MediaType create(String type,String subtype){  return create(type,subtype,ImmutableListMultimap.<String,String>of());}  }
class C{  public static void processThumbnail(final Account mAccount,final OCFile file,final ImageView target,final int resource,int viewType,int processMode){  if (mAccount != null) {    try {      final OwnCloudAccount ocAccount=new OwnCloudAccount(mAccount,getContext());      final OwnCloudVersion serverOCVersion=AccountUtils.getServerVersion(mAccount);      if (processMode == 0) {        int dimensions=getThumbnailDimension();        if (serverOCVersion.supportsRemoteThumbnails() && !file.isDown() && file.isImage()) {          thumbnail.with(mContext).load(getThumbnailURL(ocAccount,file,serverOCVersion,new Dimensions(getThumbnailDimension(),getThumbnailDimension()))).diskCacheStrategy(DiskCacheStrategy.RESULT).override(dimensions,dimensions).placeholder(R.drawable.file_image).fallback(R.drawable.file_image).centerCrop().into(target);        } else         if ((file.isImage() || file.isVideo()) && file.isDown()) {          thumbnail.with(mContext).load(file.getStoragePath()).override(dimensions,dimensions).placeholder(resource).fallback(resource).centerCrop().into(target);        } else {          thumbnail.with(mContext).load(file.getFileName()).override(dimensions,dimensions).placeholder(resource).fallback(resource).dontAnimate().centerCrop().into(target);        }      } else       if (processMode == 1) {        if (file.isDown()) {          thumbnail.with(mContext).load(file.getStoragePath()).placeholder(resource).error(R.drawable.file_image).skipMemoryCache(true).diskCacheStrategy(DiskCacheStrategy.NONE).sizeMultiplier(0.7f).fitCenter().into(target);        } else {          WindowManager wm=(WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);          Display display=wm.getDefaultDisplay();          Point size=new Point();          display.getSize(size);          int width=size.x;          int height=size.y;          Dimensions d=new Dimensions();          d.setWidth(width);          d.setHeight(height);          thumbnail.with(mContext).load(getGalleryImageURL(ocAccount,file,d)).asBitmap().placeholder(resource).fallback(R.drawable.file_image).error(R.drawable.file_image).diskCacheStrategy(DiskCacheStrategy.RESULT).thumbnail(0.3f).fitCenter().into(target);        }      }    } catch (    com.synox.android.lib.common.accounts.AccountUtils.AccountNotFoundException e) {      Log_OC.e("ThumbnailUtils",e.getMessage());    }  } else {    target.setImageResource(resource);  }  if (viewType == 1) {    if (file.isImage() || (file.isVideo() && file.isDown())) {      target.setScaleX(SCALE_DEFAULT);      target.setScaleY(SCALE_DEFAULT);    } else {      target.setScaleX(SCALE_ADAPT);      target.setScaleY(SCALE_ADAPT);    }  } else {    target.setScaleX(SCALE_DEFAULT);    target.setScaleY(SCALE_DEFAULT);  }}  }
class C{  protected List parseLocators(){  List locatorIds=new ArrayList();  if (isMcastEnabled()) {    String mcastId=new StringBuffer(this.getMcastAddress()).append("[").append(this.getMcastPort()).append("]").toString();    locatorIds.add(new DistributionLocatorId(mcastId));  }  StringTokenizer st=new StringTokenizer(this.getLocators(),",");  while (st.hasMoreTokens()) {    locatorIds.add(new DistributionLocatorId(st.nextToken()));  }  if (logger.isDebugEnabled()) {    StringBuffer sb=new StringBuffer("Locator set is: ");    for (Iterator iter=locatorIds.iterator(); iter.hasNext(); ) {      sb.append(iter.next());      sb.append(" ");    }    logger.debug(sb);  }  return locatorIds;}  }
class C{  private void last(){  try (RandomAccessFile inout=new RandomAccessFile("AddressBook.dat","rw")){    count=((int)inout.length()) / 91;    inout.seek((count * 91) - 91);    read(inout);    System.out.println("Reading address #" + count);  } catch (  IOException ex) {  }}  }
class C{  public void createChain(final Vec2 vertices[],int count){  assert (m_vertices == null && m_count == 0);  assert (count >= 2);  m_count=count;  m_vertices=new Vec2[m_count];  for (int i=1; i < m_count; i++) {    Vec2 v1=vertices[i - 1];    Vec2 v2=vertices[i];    if (MathUtils.distanceSquared(v1,v2) < Settings.linearSlop * Settings.linearSlop) {      throw new RuntimeException("Vertices of chain shape are too close together");    }  }  for (int i=0; i < m_count; i++) {    m_vertices[i]=new Vec2(vertices[i]);  }  m_hasPrevVertex=false;  m_hasNextVertex=false;  m_prevVertex.setZero();  m_nextVertex.setZero();}  }
class C{  public boolean isScaledScreenshotSupported(){  return scaledScreenshotSupported;}  }
class C{  private ResultPoint[] centerEdges(ResultPoint y,ResultPoint z,ResultPoint x,ResultPoint t){  float yi=y.getX();  float yj=y.getY();  float zi=z.getX();  float zj=z.getY();  float xi=x.getX();  float xj=x.getY();  float ti=t.getX();  float tj=t.getY();  if (yi < width / 2) {    return new ResultPoint[]{new ResultPoint(ti - CORR,tj + CORR),new ResultPoint(zi + CORR,zj + CORR),new ResultPoint(xi - CORR,xj - CORR),new ResultPoint(yi + CORR,yj - CORR)};  } else {    return new ResultPoint[]{new ResultPoint(ti + CORR,tj + CORR),new ResultPoint(zi + CORR,zj - CORR),new ResultPoint(xi - CORR,xj + CORR),new ResultPoint(yi - CORR,yj - CORR)};  }}  }
class C{  public HeapRowIterator(final String table) throws IOException {  this.whereColumn=null;  this.whereValue=null;  this.wherePattern=null;  final BEncodedHeap heap=getHeap(table);  this.i=heap.iterator();}  }
class C{  public NSNumber(byte[] bytes,int type){  this(bytes,0,bytes.length,type);}  }
class C{  public void testAuthenticateSpringSunDirectoryServerEmpty(){  LdapManager mgr=getLdapSunDirectoryServer();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("nacho");  authenticationInfo.setUserCredentials("");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {    assertEquals(LdapErrorCodes.ERR_10000_AUTHENTICACION_CREDENTIALS_EMPTY,((LdapException)e).getErrCode());  }  assertNull(ret);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_program_1_();}  }
class C{  public void clear(@NotNull String file,int lineNumber) throws IOException, InterruptedException, DebuggerException {  String command="clear " + file + ":"+ lineNumber;  GdbOutput gdbOutput=sendCommand(command);  GdbClear.parse(gdbOutput);}  }
class C{  public static boolean isEnabled(){  if (sEnabled == null) {    sEnabled=detectEnabled();  }  return sEnabled.booleanValue();}  }
class C{  public String substring(int start){  if (_length < start || start < 0)   throw new StringIndexOutOfBoundsException();  return new String(_buffer,_offset + start,_length - start);}  }
