class C{  public static StringBuilder formatTo(StringBuilder buf,double[] d,String sep){  if (d == null) {    return buf.append("null");  }  if (d.length == 0) {    return buf;  }  buf.append(d[0]);  for (int i=1; i < d.length; i++) {    buf.append(sep);    buf.append(d[i]);  }  return buf;}  }
class C{  @Override public boolean dataDefinitionCausesTransactionCommit(){  debugCodeCall("dataDefinitionCausesTransactionCommit");  return true;}  }
class C{  public static Attribute createAttribute(int valueType){  return createAttribute(createName(),valueType);}  }
class C{  public TitledBorder(Border border){  this(border,"",LEADING,DEFAULT_POSITION,null,null);}  }
class C{  public float computeDistance(Vec2 p,int childIndex,Vec2 normalOut){  return m_shape.computeDistanceToOut(m_body.getTransform(),p,childIndex,normalOut);}  }
class C{  protected void reset(){  try {    changing=true;    element.setAttributeNS(namespaceURI,localName,Float.toString(x) + ' ' + y+ ' '+ w+ ' '+ h);  }  finally {    changing=false;  }}  }
class C{  public static SnapshotDirectory from(Snapshot snapshot,FileConfig config){  return SnapshotDirectory.from(config.base(),snapshot.backupUDID(),Integer.toString(snapshot.snapshotID()),config.isFlat(),config.isCombined(),config.combinedDirectory());}  }
class C{  @Bean ItemProcessor<StudentDTO,StudentDTO> excelStudentProcessor(){  return new LoggingStudentProcessor();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  FormatInformation readFormatInformation() throws FormatException {  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  int formatInfoBits1=0;  for (int i=0; i < 6; i++) {    formatInfoBits1=copyBit(i,8,formatInfoBits1);  }  formatInfoBits1=copyBit(7,8,formatInfoBits1);  formatInfoBits1=copyBit(8,8,formatInfoBits1);  formatInfoBits1=copyBit(8,7,formatInfoBits1);  for (int j=5; j >= 0; j--) {    formatInfoBits1=copyBit(8,j,formatInfoBits1);  }  int dimension=bitMatrix.getHeight();  int formatInfoBits2=0;  int jMin=dimension - 7;  for (int j=dimension - 1; j >= jMin; j--) {    formatInfoBits2=copyBit(8,j,formatInfoBits2);  }  for (int i=dimension - 8; i < dimension; i++) {    formatInfoBits2=copyBit(i,8,formatInfoBits2);  }  parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits1,formatInfoBits2);  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  throw FormatException.getFormatInstance();}  }
class C{  public SocketConnection acceptConnection() throws IOException {  if (mAcceptSocket != null) {    if (sLogger.isActivated()) {      sLogger.debug("Socket serverSocket is waiting for incoming connection");    }    Socket socket=mAcceptSocket.accept();    return new AndroidSocketConnection(socket);  }  throw new IOException("Connection not opened");}  }
class C{  public ProtocolHeartbeat(){  super(null);}  }
class C{  public boolean shouldSendToCrashlytics(){  return report;}  }
class C{  public IntegerInterleavedRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public void printDate(Calendar calendar) throws IOException {  int year=calendar.get(Calendar.YEAR);  os.write((char)('0' + (year / 1000 % 10)));  os.write((char)('0' + (year / 100 % 10)));  os.write((char)('0' + (year / 10 % 10)));  os.write((char)('0' + (year % 10)));  int month=calendar.get(Calendar.MONTH) + 1;  os.write((char)('0' + (month / 10 % 10)));  os.write((char)('0' + (month % 10)));  int day=calendar.get(Calendar.DAY_OF_MONTH);  os.write((char)('0' + (day / 10 % 10)));  os.write((char)('0' + (day % 10)));  os.write('T');  int hour=calendar.get(Calendar.HOUR_OF_DAY);  os.write((char)('0' + (hour / 10 % 10)));  os.write((char)('0' + (hour % 10)));  int minute=calendar.get(Calendar.MINUTE);  os.write((char)('0' + (minute / 10 % 10)));  os.write((char)('0' + (minute % 10)));  int second=calendar.get(Calendar.SECOND);  os.write((char)('0' + (second / 10 % 10)));  os.write((char)('0' + (second % 10)));  os.write('Z');}  }
class C{  static void stopQRMThread(){  qrmThread.shutdown();}  }
class C{  private int readAheadNonBlocking() throws IOException {  int avail=in.available();  if (avail > 0) {    ensureRawAvailable(avail);    int nread;    try {      nread=in.read(rawData,rawCount,avail);    } catch (    IOException e) {      error=true;      throw e;    }    if (nread < 0) {      error=true;      return -1;    }    rawCount+=nread;    processRaw();  }  return chunkCount - chunkPos;}  }
class C{  public Item(String affiliation,String role){  this.affiliation=affiliation;  this.role=role;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  if (mf != null && mf.isPicture()) {    if (!mf.isThumbnailEmbedded()) {      java.io.File thumbPath=mf.getGeneratedThumbnailFileLocation();      thumbPath.delete();      MetaImage.clearFromCache(thumbPath);    } else     if (Sage.client) {      stack.push(mf);      return makeNetworkedCall(stack);    } else     if (sage.media.format.MediaFormat.JPEG.equals(mf.getContainerFormat())) {      MetaImage fullImage=MetaImage.getMetaImage(mf);      int fullWidth=fullImage.getWidth();      int fullHeight=fullImage.getHeight();      MetaImage thumbImage=MetaImage.getMetaImage(new MetaImage.MediaFileThumbnail(mf));      int finalThumbWidth=thumbImage.getWidth();      int finalThumbHeight=thumbImage.getHeight();      if ((fullWidth > fullHeight && finalThumbWidth < finalThumbHeight) || (fullWidth < fullHeight && finalThumbWidth > finalThumbHeight)) {        int swap=finalThumbWidth;        finalThumbWidth=finalThumbHeight;        finalThumbHeight=swap;      }      java.io.File srcFile=mf.getFile(0);      java.io.File tmpFile=new java.io.File(srcFile.getParentFile(),"TEMP" + srcFile.getName());      int x=1;      while (tmpFile.isFile())       tmpFile=new java.io.File(srcFile.getParentFile(),"TEMP" + (x++) + srcFile.getName());      String tmpPath=tmpFile.toString();      if (sage.media.image.ImageLoader.createThumbnail(srcFile.toString(),tmpPath,finalThumbWidth,finalThumbHeight)) {        if (Sage.getBoolean("temp_backup_picture_file_before_rotateflip",true) && !new java.io.File(srcFile.toString() + ".original").isFile()) {          IOUtils.copyFile(srcFile,new java.io.File(srcFile.toString() + ".original"));        }        String jheadToolPath=sage.Sage.getToolPath("jhead");        String[] jheadArgs=new String[]{jheadToolPath,"-rt",tmpPath,"-norot",srcFile.toString()};        if (IOUtils.exec2(jheadArgs) == 0) {          if (Sage.DBG)           System.out.println("Successfully regenerated thumbnail and inserted it into exif header!");          MetaImage.clearFromCache(new MetaImage.MediaFileThumbnail(mf));          mf.reinitializeMetadata(true,true,mf.getName().substring(0,mf.getName().length() - (Sage.EMBEDDED ? mf.getShow().getEpisodeName().length() : srcFile.getName().length())));          if (Sage.DBG)           System.out.println("MF reinitialized to:" + mf);        } else {          if (Sage.DBG)           System.out.println("ERROR Re-insertion of regenerated thumbnail into jpeg file exif header failed");        }      } else {        if (Sage.DBG)         System.out.println("ERROR regeneration of picture file thumbnail failed");      }      tmpFile.delete();    }  }  return null;}  }
class C{  @Override public Vertex parseState(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  List<String> comments=null;  String next=stream.nextWord();  if (next == null || !next.equalsIgnoreCase("state")) {    throw new SelfParseException("Expecting state not: " + next,stream);  }  Vertex state=parseElementName(Primitive.STATE,stream,elements,debug,network);  if (!elements.containsKey("root")) {    HashMap<String,Vertex> root=new HashMap<String,Vertex>(1);    root.put("root",state);    elements.put("root",root);  }  stream.skipWhitespace();  ensureNext('{',stream);  stream.skipWhitespace();  String element=stream.peekWord();  while (!("}".equals(element))) {    if (element == null) {      throw new SelfParseException("Unexpected end of state, missing '}'",stream);    }    Vertex vertex=state;    element=element.toLowerCase();    if (element.equals(CASE)) {      vertex=parseCase(stream,elements,debug,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);    } else     if (element.equals(PATTERN)) {      vertex=parsePattern(stream,elements,debug,network);    } else     if (element.equals(STATE)) {      vertex=parseState(stream,elements,debug,network);    } else     if (element.equals(VAR) || element.equals(VARIABLE)) {      vertex=parseVariable(stream,elements,debug,network);    } else     if (element.equals(ANSWER)) {      parseAnswer(state,stream,elements,debug,network);    } else     if (element.equals(FUNCTION) || element.equals(EQUATION)) {      vertex=parseFunction(stream,elements,debug,network);    } else     if (element.equals(DO)) {      vertex=network.createInstance(Primitive.DO);      Vertex expression=parseOperator(stream,elements,debug,network);      vertex.addRelationship(Primitive.DO,expression,Integer.MAX_VALUE);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);    } else     if (element.equals(GOTO)) {      vertex=parseGoto(stream,elements,debug,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      ensureNext(';',stream);    } else     if (element.equals(PUSH)) {      vertex=parsePush(stream,elements,debug,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      ensureNext(';',stream);    } else     if (element.equals(RETURN)) {      vertex=parseReturn(stream,elements,debug,network);      state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      ensureNext(';',stream);    } else     if (element.equals("/")) {      comments=getComments(stream);      if (comments.isEmpty()) {        throw new SelfParseException("Unknown element: " + element,stream);      }      vertex=null;    } else {      throw new SelfParseException("Unknown element: " + element,stream);    }    if (debug && (comments != null) && (vertex != null)) {      for (      String comment : comments) {        vertex.addRelationship(Primitive.COMMENT,network.createVertex(comment),Integer.MAX_VALUE);      }      comments=null;    }    stream.skipWhitespace();    element=stream.peekWord();  }  ensureNext('}',stream);  return state;}  }
class C{  @ObjectiveCName("onProfileClosedWithUid:") public void onProfileClosed(int uid){  modules.getEvents().post(new PeerInfoClosed(Peer.user(uid)));}  }
class C{  private void finishBuildingStateTable(boolean forward){  backfillLoopingStates();  int[] rowNumMap=new int[tempStateTable.size()];  Stack<Integer> rowsToFollow=new Stack<>();  rowsToFollow.push(new Integer(1));  rowNumMap[1]=1;  while (rowsToFollow.size() != 0) {    int rowNum=rowsToFollow.pop().intValue();    short[] row=tempStateTable.elementAt(rowNum);    for (int i=0; i < numCategories; i++) {      if (row[i] != 0) {        if (rowNumMap[row[i]] == 0) {          rowNumMap[row[i]]=row[i];          rowsToFollow.push(new Integer(row[i]));        }      }    }  }  boolean madeChange;  int newRowNum;  int[] stateClasses=new int[tempStateTable.size()];  int nextClass=numCategories + 1;  short[] state1, state2;  for (int i=1; i < stateClasses.length; i++) {    if (rowNumMap[i] == 0) {      continue;    }    state1=tempStateTable.elementAt(i);    for (int j=0; j < numCategories; j++) {      if (state1[j] != 0) {        ++stateClasses[i];      }    }    if (stateClasses[i] == 0) {      stateClasses[i]=nextClass;    }  }  ++nextClass;  int currentClass;  int lastClass;  boolean split;  do {    currentClass=1;    lastClass=nextClass;    while (currentClass < nextClass) {      split=false;      state1=state2=null;      for (int i=0; i < stateClasses.length; i++) {        if (stateClasses[i] == currentClass) {          if (state1 == null) {            state1=tempStateTable.elementAt(i);          } else {            state2=tempStateTable.elementAt(i);            for (int j=0; j < state2.length; j++) {              if ((j == numCategories && state1[j] != state2[j] && forward) || (j != numCategories && stateClasses[state1[j]] != stateClasses[state2[j]])) {                stateClasses[i]=nextClass;                split=true;                break;              }            }          }        }      }      if (split) {        ++nextClass;      }      ++currentClass;    }  } while (lastClass != nextClass);  int[] representatives=new int[nextClass];  for (int i=1; i < stateClasses.length; i++)   if (representatives[stateClasses[i]] == 0) {    representatives[stateClasses[i]]=i;  } else {    rowNumMap[i]=representatives[stateClasses[i]];  }  for (int i=1; i < rowNumMap.length; i++) {    if (rowNumMap[i] != i) {      tempStateTable.setElementAt(null,i);    }  }  newRowNum=1;  for (int i=1; i < rowNumMap.length; i++) {    if (tempStateTable.elementAt(i) != null) {      rowNumMap[i]=newRowNum++;    }  }  for (int i=1; i < rowNumMap.length; i++) {    if (tempStateTable.elementAt(i) == null) {      rowNumMap[i]=rowNumMap[rowNumMap[i]];    }  }  if (forward) {    endStates=new boolean[newRowNum];    lookaheadStates=new boolean[newRowNum];    stateTable=new short[newRowNum * numCategories];    int p=0;    int p2=0;    for (int i=0; i < tempStateTable.size(); i++) {      short[] row=tempStateTable.elementAt(i);      if (row == null) {        continue;      }      for (int j=0; j < numCategories; j++) {        stateTable[p]=(short)(rowNumMap[row[j]]);        ++p;      }      endStates[p2]=((row[numCategories] & END_STATE_FLAG) != 0);      lookaheadStates[p2]=((row[numCategories] & LOOKAHEAD_STATE_FLAG) != 0);      ++p2;    }  } else {    backwardsStateTable=new short[newRowNum * numCategories];    int p=0;    for (int i=0; i < tempStateTable.size(); i++) {      short[] row=tempStateTable.elementAt(i);      if (row == null) {        continue;      }      for (int j=0; j < numCategories; j++) {        backwardsStateTable[p]=(short)(rowNumMap[row[j]]);        ++p;      }    }  }}  }
class C{  public static boolean isMimeTypeImage(String mimeType){  return mimeType != null && mimeType.startsWith("image/");}  }
class C{  public ModuleLoader createModuleLoaderFromString(EDataType eDataType,String initialValue){  ModuleLoader result=ModuleLoader.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public void periodicProcessing() throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Execute re-registration");  }  register();}  }
class C{  ArchivedCoupling addCoupling(final Coupling<?> coupling){  ArchivedCoupling c=new ArchivedCoupling(this,coupling);  archivedCouplings.add(c);  return c;}  }
class C{  public void delay(int napTime){  try {    Thread.sleep(napTime);  } catch (  InterruptedException e) {  }}  }
class C{  public boolean isValidSavepoint(Savepoint sp){  if (isSource())   return false;  boolean result=false;  if (sp != null)   result=true;  return result;}  }
class C{  public void stop(){  Logger.printDebug("OscP5.stop","starting to stop oscP5.");  _myOscNetManager.stop();  Logger.printDebug("OscP5.stop","stopping oscP5.");}  }
class C{  private static Object[] loadKey(final InputStream keyInput) throws Exception {  final Object[] sizeModExp=new Object[3];  try (final DataInputStream in=new DataInputStream(keyInput)){    sizeModExp[0]=in.readInt();    byte[] buff=new byte[in.readInt()];    in.read(buff);    sizeModExp[1]=new BigInteger(buff);    buff=new byte[in.readInt()];    in.read(buff);    sizeModExp[2]=new BigInteger(buff);  }   return sizeModExp;}  }
class C{  public static String displaySet(String setName,Set<String> set){  StringBuilder sb=new StringBuilder();  sb.append(setName);  sb.append(":\n");  if (set.isEmpty()) {    sb.append("None\n");  } else {    int count=0;    for (    String value : set) {      sb.append("  [");      sb.append(++count);      sb.append("] ");      sb.append(value);      sb.append("\n");    }  }  return sb.toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.227 -0500",hash_original_method="5859C0A727537B8EC88F05E2B2FE00D6",hash_generated_method="F741D2A1942CB111613D0D4114618CDE") public static Integer valueOf(String string,int radix) throws NumberFormatException {  Integer ret=new Integer(string.getTaintInt() + radix);  if (DroidSafeAndroidRuntime.control)   throw new NumberFormatException();  return ret;}  }
class C{  public CursorResponseMessage(CursorResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.cursorId=other.cursorId;  if (other.isSetValues()) {    List<KeyedValues> __this__values=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.values) {      __this__values.add(new KeyedValues(other_element));    }    this.values=__this__values;  }}  }
class C{  public void destroy(){  mController.destroy();}  }
class C{  public void tokenVerified(boolean valid,String result){  setTokenInfo(result);  verifyToken.setEnabled(true);  update();}  }
class C{  private static String stringValue(Object attributeValue){  if (attributeValue == null) {    return (null);  } else   if (attributeValue instanceof String) {    return ((String)attributeValue);  } else {    return (attributeValue.toString());  }}  }
class C{  public boolean isLeaveBlacklisted(){  return fieldLeaveBlacklisted;}  }
class C{  public static <T>LazySortedSetX<T> fromIterable(Collector<T,?,SortedSet<T>> collector,Iterable<T> it){  if (it instanceof LazySortedSetX)   return (LazySortedSetX<T>)it;  if (it instanceof SortedSet)   return new LazySortedSetX<T>((SortedSet<T>)it,collector);  return new LazySortedSetX<T>(Flux.fromIterable(it),collector);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof VOPaymentType) {    VOPaymentType other=(VOPaymentType)obj;    if (paymentTypeId != null) {      return paymentTypeId.equals(other.paymentTypeId);    }  }  return false;}  }
class C{  public String decode(String input){  if (Encoding.isURLEncoded(input)) {    input=helpers.urlDecode(input);  }  if (Encoding.isBase64Encoded(input)) {    input=helpers.bytesToString(helpers.base64Decode(input));  }  if (Encoding.isJSON(input)) {    return input;  }  return null;}  }
class C{  protected List<RandomVariable> order(BayesianNetwork bn,Collection<RandomVariable> vars){  List<RandomVariable> order=new ArrayList<RandomVariable>(vars);  Collections.reverse(order);  return order;}  }
class C{  public void updateAll(){  if (!busy) {    setUpdateBusy();    LnSensorUpdateThread thread=new LnSensorUpdateThread(this,tc);    thread.start();  }}  }
class C{  public float[] generateTransformedValuesBarChart(List<? extends Entry> entries,int dataSet,BarData bd,float phaseY){  float[] valuePoints=new float[entries.size() * 2];  int setCount=bd.getDataSetCount();  float space=bd.getGroupSpace();  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=entries.get(j / 2);    int i=e.getXIndex();    float x=e.getXIndex() + i * (setCount - 1) + dataSet + space * i + space / 2f;    float y=e.getVal();    valuePoints[j]=x;    valuePoints[j + 1]=y * phaseY;  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public OptionsHttpSessionsTableModel(){  super();}  }
class C{  public void accumulateAll(List<TaggedLogAPIEntity> entities) throws Exception {  for (  TaggedLogAPIEntity entity : entities) {    accumulate(entity);  }}  }
class C{  public static EverythingMatcher<TriggerKey> allTriggers(){  return new EverythingMatcher<TriggerKey>();}  }
class C{  public void updateFromRaw(FilterType ftype,byte[] rowb,byte[] rowbprev,int rown){  updateFromRawOrFiltered(ftype,null,rowb,rowbprev,rown);}  }
class C{  public void addRecentFile(File recentFile){  jmrfRecentFiles.add(createRecentFileMenuItem(jmrfRecentFiles,recentFile));}  }
class C{  public static void writeApplicationXml(ApplicationXml appXml,OutputStream output,String encoding,boolean isIndent) throws IOException {  Format format=Format.getPrettyFormat();  if (encoding != null) {    format.setEncoding(encoding);  }  XMLOutputter serializer=new XMLOutputter(format);  serializer.output(appXml.getDocument(),output);}  }
class C{  public void test_tx_begin_rollback() throws RepositoryException {  assertFalse(cxn.isActive());  cxn.begin();  assertTrue(cxn.isActive());  cxn.rollback();  assertFalse(cxn.isActive());}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 16:{        return ScopeTokenTypes.SHARP;      }case 19:    break;case 6:{    return ScopeTokenTypes.MINUS;  }case 20:break;case 18:{return ScopeTokenTypes.ANDAND;}case 21:break;case 9:{return ScopeTokenTypes.RBRACKET;}case 22:break;case 3:{return ScopeTokenTypes.WHITE_SPACE;}case 23:break;case 13:{return ScopeTokenTypes.COLON;}case 24:break;case 11:{return ScopeTokenTypes.RPARENTH;}case 25:break;case 1:{return ScopeTokenTypes.BAD_CHARACTER;}case 26:break;case 12:{return ScopeTokenTypes.DOT;}case 27:break;case 2:{return ScopeTokenTypes.IDENTIFIER;}case 28:break;case 8:{return ScopeTokenTypes.LBRACKET;}case 29:break;case 17:{return ScopeTokenTypes.OROR;}case 30:break;case 4:{return ScopeTokenTypes.INTEGER_LITERAL;}case 31:break;case 5:{return ScopeTokenTypes.EXCL;}case 32:break;case 15:{return ScopeTokenTypes.DIV;}case 33:break;case 10:{return ScopeTokenTypes.LPARENTH;}case 34:break;case 14:{return ScopeTokenTypes.ASTERISK;}case 35:break;case 7:{return ScopeTokenTypes.TILDE;}case 36:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private void enableOrDisable(final PWRow row,final boolean enabled){  for (  final PWWidget widget : row.widgets) {    final boolean widgetEnable=widget.enableOrDisable();    for (    final Control c : widget.getControls()) {      if (!c.isDisposed()) {        c.setEnabled(enabled && widgetEnable);      }    }  }}  }
class C{  public void testResourcesAvailable(){  new IrishAnalyzer().close();}  }
class C{  private PropertyManager(Properties props){  this.props=props;}  }
class C{  public Jerry toggleClass(String... classNames){  for (  Node node : nodes) {    String attrClass=node.getAttribute("class");    Set<String> classes=createPropertiesSet(attrClass,' ');    for (    String className : classNames) {      if (classes.contains(className) == true) {        classes.remove(className);      } else {        classes.add(className);      }    }    String attrValue=generateAttributeValue(classes,' ');    node.setAttribute("class",attrValue);  }  return this;}  }
class C{  public RenamePackageProcessor(IPackageFragment fragment){  fPackage=fragment;  if (fPackage != null)   setNewElementName(fPackage.getElementName());  fUpdateReferences=true;  fUpdateTextualMatches=false;  fRenameSubpackages=false;}  }
class C{  public void write(String str,int off,int len) throws IOException {  out.write(str,off,len);}  }
class C{  public void removeAll(){  dockPanel.removeAll();}  }
class C{  public T progress(Object view){  progress=view;  return self();}  }
class C{  private void terminateProperlyAudit(AuditServiceThread thread){  thread.remove(this);  if (pageAuditExecutionList.remove(thread)) {    processPageAuditWaitQueue();  } else   if (scenarioAuditExecutionList.remove(thread)) {    processScenarioAuditWaitQueue();  } else   if (uploadAuditExecutionList.remove(thread)) {    processPageUploadAuditWaitQueue();  } else   if (siteAuditExecutionList.remove(thread)) {    processSiteAuditWaitQueue();  }}  }
class C{  @Deprecated public void resumeAllActions(CCNode target){  this.resume(target);}  }
class C{  @Hook("android.net.ConnectivityManager->setNetworkPreference") public static void ConnectivityManager_setNetworkPreference(ConnectivityManager manager,int preference){  Log.d(TAG,"Making something from nothing!");  OriginalMethod.by(new $(){  }).invoke(manager,preference);}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  SumDistinctDoubleAggregator distinctAggregator=(SumDistinctDoubleAggregator)aggregator;  if (!aggregator.isFirstTime()) {    agg(distinctAggregator.valueSet);    firstTime=false;  }}  }
class C{  protected void drawCropGrid(@NonNull Canvas canvas){  if (mShowCropGrid) {    if (mGridPoints == null && !mCropViewRect.isEmpty()) {      mGridPoints=new float[(mCropGridRowCount) * 4 + (mCropGridColumnCount) * 4];      int index=0;      for (int i=0; i < mCropGridRowCount; i++) {        mGridPoints[index++]=mCropViewRect.left;        mGridPoints[index++]=(mCropViewRect.height() * (((float)i + 1.0f) / (float)(mCropGridRowCount + 1))) + mCropViewRect.top;        mGridPoints[index++]=mCropViewRect.right;        mGridPoints[index++]=(mCropViewRect.height() * (((float)i + 1.0f) / (float)(mCropGridRowCount + 1))) + mCropViewRect.top;      }      for (int i=0; i < mCropGridColumnCount; i++) {        mGridPoints[index++]=(mCropViewRect.width() * (((float)i + 1.0f) / (float)(mCropGridColumnCount + 1))) + mCropViewRect.left;        mGridPoints[index++]=mCropViewRect.top;        mGridPoints[index++]=(mCropViewRect.width() * (((float)i + 1.0f) / (float)(mCropGridColumnCount + 1))) + mCropViewRect.left;        mGridPoints[index++]=mCropViewRect.bottom;      }    }    if (mGridPoints != null) {      canvas.drawLines(mGridPoints,mCropGridPaint);    }  }  if (mShowCropFrame) {    canvas.drawRect(mCropViewRect,mCropFramePaint);  }}  }
class C{  public void start(){  runningThread=new Thread(this);  runningThread.setName("IdentServer");  runningThread.start();}  }
class C{  public long optLong(String key,long defaultValue){  try {    return getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_ENUM_DECLARATION__LITERALS:    getLiterals().clear();  getLiterals().addAll((Collection<? extends N4EnumLiteral>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean fireMapMouseClicked(MouseEvent evt){  if (DEBUG) {    logger.fine("MapMouseSupport: fireMapMouseClicked");  }  clickHappened=true;  boolean consumed=false;  evt=new MapMouseEvent(getParentMode(),evt);  if (priorityListener != null && evt.getClickCount() > 1) {    priorityListener.mouseClicked(evt);    consumed=true;  }  priorityListener=null;  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED) > 0) {    Iterator<MapMouseListener> it=iterator();    while (it.hasNext() && !consumed) {      MapMouseListener target=it.next();      consumed=target.mouseClicked(evt) && consumeEvents;      if (consumed) {        priorityListener=target;      }    }  }  boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED) == 0));  if (proxy != null && ignoreConsumed && !evt.isShiftDown()) {    proxy.mouseClicked(evt);    consumed=true;  }  return consumed;}  }
class C{  public void close() throws IOException {  super.close();  cache.close();  cacheFile.delete();}  }
class C{  protected boolean mustDrawFill(SymbolCode code){  String masked=code.toMaskedString();  return TacGrpSidc.MOBSU_CBRN_NDGZ.equalsIgnoreCase(masked) || TacGrpSidc.MOBSU_CBRN_REEVNT_BIO.equalsIgnoreCase(masked) || TacGrpSidc.MOBSU_CBRN_REEVNT_CML.equalsIgnoreCase(masked);}  }
class C{  private static void writeInt(int value,byte[] array,int offset){  for (int i=0; i < 4; i++) {    array[offset + i]=(byte)(value >>> (8 * i));  }}  }
class C{  protected Map<String,Object> createDefaultVertexStyle(){  Map<String,Object> style=new Hashtable<String,Object>();  style.put(mxConstants.STYLE_SHAPE,mxConstants.SHAPE_RECTANGLE);  style.put(mxConstants.STYLE_PERIMETER,mxPerimeter.RectanglePerimeter);  style.put(mxConstants.STYLE_VERTICAL_ALIGN,mxConstants.ALIGN_MIDDLE);  style.put(mxConstants.STYLE_ALIGN,mxConstants.ALIGN_CENTER);  style.put(mxConstants.STYLE_FILLCOLOR,"#C3D9FF");  style.put(mxConstants.STYLE_STROKECOLOR,"#6482B9");  style.put(mxConstants.STYLE_FONTCOLOR,"#774400");  return style;}  }
class C{  public void paintComponent(Graphics g){  super.paintComponent(g);  paint((Graphics2D)g);}  }
class C{  public CThreadPanelSynchronizer(final CThreadComboBox tidBox,final CDebugPerspectiveModel debugPerspectiveModel){  m_tidBox=Preconditions.checkNotNull(tidBox,"IE01519: Thead box argument can not be null");  m_debugPerspectiveModel=Preconditions.checkNotNull(debugPerspectiveModel,"IE01520: Debug perspective model argument can not be null");  m_debugPerspectiveModel.addListener(m_debugListener);  m_tidBox.addItemListener(m_boxListener);  synchronizeDebugger(null,debugPerspectiveModel.getCurrentSelectedDebugger());  updateGui();}  }
class C{  public final CC grow(float... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  growY(widthHeight[1]);case 1:growX(widthHeight[0]);}return this;}  }
class C{  public void addAccessibleSelection(int i){  TreeModel model=JTree.this.getModel();  if (model != null) {    if (i >= 0 && i < getAccessibleChildrenCount()) {      TreePath path=getChildTreePath(i);      JTree.this.addSelectionPath(path);    }  }}  }
class C{  public void testSharedMode() throws Exception {  depMode=DeploymentMode.SHARED;  processTest(false,false);}  }
class C{  public boolean isDigit(char c){  return c >= '0' && c <= '9';}  }
class C{  @Override protected void processResponseHeaders(final HttpState state,final HttpConnection conn){  LOG.trace("enter OptionsMethod.processResponseHeaders(HttpState, HttpConnection)");  final Header allowHeader=getResponseHeader("allow");  if (allowHeader != null) {    final String allowHeaderValue=allowHeader.getValue();    final StringTokenizer tokenizer=new StringTokenizer(allowHeaderValue,",");    while (tokenizer.hasMoreElements()) {      final String methodAllowed=tokenizer.nextToken().trim().toUpperCase();      methodsAllowed.addElement(methodAllowed);    }  }}  }
class C{  public void addLineEndCap(Coordinate p0,Coordinate p1){  LineSegment seg=new LineSegment(p0,p1);  LineSegment offsetL=new LineSegment();  computeOffsetSegment(seg,Position.LEFT,distance,offsetL);  LineSegment offsetR=new LineSegment();  computeOffsetSegment(seg,Position.RIGHT,distance,offsetR);  double dx=p1.x - p0.x;  double dy=p1.y - p0.y;  double angle=Math.atan2(dy,dx);switch (bufParams.getEndCapStyle()) {case BufferParameters.CAP_ROUND:    segList.addPt(offsetL.p1);  addFillet(p1,angle + Math.PI / 2,angle - Math.PI / 2,CGAlgorithms.CLOCKWISE,distance);segList.addPt(offsetR.p1);break;case BufferParameters.CAP_FLAT:segList.addPt(offsetL.p1);segList.addPt(offsetR.p1);break;case BufferParameters.CAP_SQUARE:Coordinate squareCapSideOffset=new Coordinate();squareCapSideOffset.x=Math.abs(distance) * Math.cos(angle);squareCapSideOffset.y=Math.abs(distance) * Math.sin(angle);Coordinate squareCapLOffset=new Coordinate(offsetL.p1.x + squareCapSideOffset.x,offsetL.p1.y + squareCapSideOffset.y);Coordinate squareCapROffset=new Coordinate(offsetR.p1.x + squareCapSideOffset.x,offsetR.p1.y + squareCapSideOffset.y);segList.addPt(squareCapLOffset);segList.addPt(squareCapROffset);break;}}  }
class C{  public void staleLocator(final PartitionLocator locator){  if (locator == null)   throw new IllegalArgumentException();  if (timestamp != ITx.UNISOLATED && timestamp != ITx.READ_COMMITTED) {    throw new RuntimeException("Stale locator, but views should be consistent? timestamp=" + TimestampUtility.toString(timestamp));  }  if (log.isInfoEnabled())   log.info(locator.toString());  final Lock lock=readWriteLock.writeLock();  lock.lock();  try {    cacheLocators(locator.getLeftSeparatorKey(),locator.getRightSeparatorKey());  }  finally {    lock.unlock();  }}  }
class C{  public static ActiveMQConnectionFactory createConnectionFactory(final String url,String name) throws Exception {  ConnectionFactoryParser parser=new ConnectionFactoryParser();  return parser.newObject(parser.expandURI(url),name);}  }
class C{  public boolean mouseMoved(MouseEvent e){  EsriGraphicList list=getEsriGraphicList();  boolean ret=false;  if (list != null) {    OMGraphic omg=list.findClosest(e.getX(),e.getY(),4);    if (omg != null) {      int index;      Integer I=((Integer)omg.getAttribute(SHAPE_INDEX_ATTRIBUTE));      if (I != null) {        index=I.intValue();      } else {        index=list.indexOf(omg);      }      if (parentLayer == null) {        Component comp=getComponent();        if (comp instanceof Layer) {          parentLayer=(Layer)comp;        }      }      if (parentLayer != null) {        parentLayer.fireRequestToolTip(getDescription(index));      }      ret=true;    } else     if (parentLayer != null) {      parentLayer.fireHideToolTip();    }  }  return ret;}  }
class C{  protected void damageLineRange(int line0,int line1,Shape a,Component host){  if (a != null) {    Rectangle area0=lineToRect(a,line0);    Rectangle area1=lineToRect(a,line1);    if ((area0 != null) && (area1 != null)) {      Rectangle dmg=area0.union(area1);      host.repaint(dmg.x,dmg.y,dmg.width,dmg.height);    } else     host.repaint();  }}  }
class C{  public int[] estimateCellPosition(int x,int y){  return new int[]{getPaddingLeft() + (x * mCellWidth) + (x * mWidthGap)+ (mCellWidth / 2),getPaddingTop() + (y * mCellHeight) + (y * mHeightGap)+ (mCellHeight / 2)};}  }
class C{  private void initialize(URI p_base,String p_uriSpec) throws MalformedURIException {  if (p_base == null && (p_uriSpec == null || p_uriSpec.trim().length() == 0)) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_CANNOT_INIT_URI_EMPTY_PARMS,null));  }  if (p_uriSpec == null || p_uriSpec.trim().length() == 0) {    initialize(p_base);    return;  }  String uriSpec=p_uriSpec.trim();  int uriSpecLen=uriSpec.length();  int index=0;  int colonIndex=uriSpec.indexOf(':');  if (colonIndex < 0) {    if (p_base == null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_SCHEME_IN_URI,new Object[]{uriSpec}));    }  } else {    initializeScheme(uriSpec);    uriSpec=uriSpec.substring(colonIndex + 1);    uriSpecLen=uriSpec.length();  }  if (uriSpec.startsWith("//")) {    index+=2;    int startPos=index;    char testChar='\0';    while (index < uriSpecLen) {      testChar=uriSpec.charAt(index);      if (testChar == '/' || testChar == '?' || testChar == '#') {        break;      }      index++;    }    if (index > startPos) {      initializeAuthority(uriSpec.substring(startPos,index));    } else {      m_host="";    }  }  initializePath(uriSpec.substring(index));  if (p_base != null) {    if (m_path.length() == 0 && m_scheme == null && m_host == null) {      m_scheme=p_base.getScheme();      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();      m_path=p_base.getPath();      if (m_queryString == null) {        m_queryString=p_base.getQueryString();      }      return;    }    if (m_scheme == null) {      m_scheme=p_base.getScheme();    }    if (m_host == null) {      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();    } else {      return;    }    if (m_path.length() > 0 && m_path.startsWith("/")) {      return;    }    String path=new String();    String basePath=p_base.getPath();    if (basePath != null) {      int lastSlash=basePath.lastIndexOf('/');      if (lastSlash != -1) {        path=basePath.substring(0,lastSlash + 1);      }    }    path=path.concat(m_path);    index=-1;    while ((index=path.indexOf("/./")) != -1) {      path=path.substring(0,index + 1).concat(path.substring(index + 3));    }    if (path.endsWith("/.")) {      path=path.substring(0,path.length() - 1);    }    index=-1;    int segIndex=-1;    String tempString=null;    while ((index=path.indexOf("/../")) > 0) {      tempString=path.substring(0,path.indexOf("/../"));      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        if (!tempString.substring(segIndex++).equals("..")) {          path=path.substring(0,segIndex).concat(path.substring(index + 4));        }      }    }    if (path.endsWith("/..")) {      tempString=path.substring(0,path.length() - 3);      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        path=path.substring(0,segIndex + 1);      }    }    m_path=path;  }}  }
class C{  private List<Group> parseGroups(JSONArray groups,String groupType) throws JSONException, AdeUsageException {  if (groups.length() == 0)   throw new AdeUsageException("No groups specified for group of type " + groupType);  List<Group> currentGroups=new ArrayList<Group>();  for (int i=0; i < groups.length(); i++) {    JSONObject group=groups.getJSONObject(i);    String name=group.getString("name");    String dataType=group.getString("dataType");    short evalOrder=group.getShort("evaluationOrder");    String ruleName=group.getString("ruleName");    if (!verifyStringParam(name,200,"[a-zA-Z0-9_ ]*") || name.equalsIgnoreCase("unassigned") || !validateDataType(dataType)|| evalOrder < 1 || !verifyStringParam(ruleName,200,"[a-zA-Z0-9_ ]*")) {      throw new AdeUsageException("Invalid parameters for a group of type " + groupType + " was specified");    }    currentGroups.add(new Group(name,GroupType.valueOf(groupType),DataType.valueOf(dataType.toUpperCase()),evalOrder,ruleName));  }  validateEvaluationOrderAndName(currentGroups);  return currentGroups;}  }
class C{  public boolean isBufferResultSetToLocalTemp(){  return bufferResultSetToLocalTemp;}  }
class C{  public static File relativeFile(File root,File file){  if (root != null && file != null) {    String absRoot=absoluteFile(root).getPath();    String absFile=absoluteFile(file).getPath();    if (absFile.startsWith(absRoot)) {      String path=absFile.substring(absRoot.length());      if (path.startsWith(File.separator)) {        path=path.substring(1);      }      file=new File(path);    }  }  return file;}  }
class C{  private void adjustFocus(boolean inWindow){  RTextArea textArea=getTextArea();  if ((textArea != null) && textArea.isEnabled() && textArea.isRequestFocusEnabled()) {    if (inWindow)     textArea.requestFocusInWindow(); else     textArea.requestFocus();  }}  }
class C{  protected int bytesPerLine(){  return (72);}  }
class C{  public static BlockObject querySnapshotSessionSource(URI sourceURI,UriInfo uriInfo,boolean checkAssociatedVolumes,DbClient dbClient){  ArgValidator.checkUri(sourceURI);  if ((!URIUtil.isType(sourceURI,Volume.class)) && (!URIUtil.isType(sourceURI,BlockSnapshot.class))) {    throw APIException.badRequests.invalidSnapshotSessionSource(sourceURI.toString());  }  BlockObject sourceObj=BlockObject.fetch(dbClient,sourceURI);  ArgValidator.checkEntity(sourceObj,sourceURI,BlockServiceUtils.isIdEmbeddedInURL(sourceURI,uriInfo),true);  if (URIUtil.isType(sourceURI,Volume.class) && (checkAssociatedVolumes)) {    List<Volume> volumes=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Volume.class,AlternateIdConstraint.Factory.getVolumeByAssociatedVolumesConstraint(sourceURI.toString()));    if (!volumes.isEmpty()) {      sourceObj=volumes.get(0);    }  }  return sourceObj;}  }
class C{  static RendererContext createContext(){  final RendererContext newCtx=new RendererContext("ctx" + Integer.toString(CTX_COUNT.getAndIncrement()));  if (DO_STATS || DO_MONITORS) {    RendererStats.ALL_CONTEXTS.add(newCtx);  }  return newCtx;}  }
class C{  public static int[] createColors(int count){  RandomColor r=new RandomColor();  int[] colors=new int[count];  for (int i=0; i < count; ++i) {    colors[i]=r.randomColor(0,SaturationType.RANDOM,Luminosity.LIGHT);  }  return colors;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BabyModel'";  db.execSQL(sql);}  }
class C{  public static PrintWriter openScriptWriter(String fileName,String compressionAlgorithm,String cipher,String password,String charset) throws IOException {  try {    OutputStream out;    if (cipher != null) {      byte[] key=SHA256.getKeyPasswordHash("script",password.toCharArray());      FileUtils.delete(fileName);      FileStore store=FileStore.open(null,fileName,"rw",cipher,key);      store.init();      out=new FileStoreOutputStream(store,null,compressionAlgorithm);      out=new BufferedOutputStream(out,Constants.IO_BUFFER_SIZE_COMPRESS);    } else {      out=FileUtils.newOutputStream(fileName,false);      out=new BufferedOutputStream(out,Constants.IO_BUFFER_SIZE);      out=CompressTool.wrapOutputStream(out,compressionAlgorithm,"script.sql");    }    return new PrintWriter(new OutputStreamWriter(out,charset));  } catch (  Exception e) {    throw new IOException(e.getMessage(),e);  }}  }
class C{  public static void startAndroidTool(){  startAndroidTool(false);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public PartialHull(IPoint first,IPoint second){  points.add(first);  points.add(second);}  }
class C{  public void deleteInstanceAt(int rowIndex){  ((ArffTableModel)getModel()).deleteInstanceAt(mIndices[rowIndex]);}  }
class C{  public SpecialInvokeExpr newSpecialInvokeExpr(Local base,SootMethodRef method,Value arg1,Value arg2){  return new JSpecialInvokeExpr(base,method,Arrays.asList(new Value[]{arg1,arg2}));}  }
class C{  public void dupX2(){  mv.visitInsn(Opcodes.DUP_X2);}  }
class C{  public RemoteAttributeServiceImpl(final DtoAttributeService dtoAttributeService){  super(dtoAttributeService);}  }
class C{  public Builder throwableFormatter(ThrowableFormatter throwableFormatter){  this.throwableFormatter=throwableFormatter;  return this;}  }
class C{  public void decode(byte[] data,int length){  try {    decoder=new BerDecoder(data,0,length);  } catch (  Exception e) {    log.log(Level.SEVERE,data.toString(),e);    return;  }  try {    decoder.parseSeq(null);    msgId=decoder.parseInt();    m_protocolOp=decoder.parseSeq(null);    if (m_protocolOp == BIND_REQUEST)     handleBind(); else     if (m_protocolOp == UNBIND_REQUEST)     log.info("#" + msgId + ": unbind"); else     if (m_protocolOp == SEARCH_REQUEST)     handleSearch(); else {      result.setErrorNo(LdapResult.LDAP_PROTOCOL_ERROR);      result.setErrorString(": Unsupported Request");      log.warning("#" + msgId + ": Unknown Op + "+ m_protocolOp);    }  } catch (  Exception ex) {    result.setErrorNo(LdapResult.LDAP_PROTOCOL_ERROR);    log.log(Level.SEVERE,"",ex);  }}  }
class C{  public CCFadeTransition(float d,CCScene s){  this(d,s,new ccColor3B(0,0,0));}  }
class C{  static void testSetUp() throws Exception {  InstallSDE.install(new File(System.getProperty("test.classes","."),"TemperatureTableServlet.class"),new File(System.getProperty("test.src","."),"TemperatureTable.sde"));}  }
class C{  @Override public int clipSecondaryFacing(int dir){  return dir;}  }
class C{  public IllegalAccessException(){  super();}  }
class C{  public synchronized void unregister(StreamScope<?> streamScope){  List<String> names=byStreamScopeMap.get(streamScope);  if (names == null)   return;  names=new ArrayList<>(names);  for (  String name : names)   unregister(name);}  }
class C{  MyDate(long elapsedTime){  setDate(elapsedTime);}  }
class C{  protected FeatureCallImpl(){  super();}  }
class C{  public static final String asciiBoard(Position pos){  StringBuilder ret=new StringBuilder(400);  String nl=String.format(Locale.US,"%n");  ret.append("    +----+----+----+----+----+----+----+----+");  ret.append(nl);  for (int y=7; y >= 0; y--) {    ret.append("    |");    for (int x=0; x < 8; x++) {      ret.append(' ');      int p=pos.getPiece(Position.getSquare(x,y));      if (p == Piece.EMPTY) {        boolean dark=Position.darkSquare(x,y);        ret.append(dark ? ".. |" : "   |");      } else {        ret.append(Piece.isWhite(p) ? ' ' : '*');        String pieceName=pieceToChar(p);        if (pieceName.length() == 0)         pieceName="P";        ret.append(pieceName);        ret.append(" |");      }    }    ret.append(nl);    ret.append("    +----+----+----+----+----+----+----+----+");    ret.append(nl);  }  return ret.toString();}  }
class C{  private float[] convertUnpacked(byte[] data){  float[] samples=new float[data.length / 2];  int pointer=0;  for (int x=0; x < data.length; x+=2) {    samples[pointer++]=scale((data[x] & 0xFF) | (data[x + 1] << 8));  }  return samples;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  private void resolveUserTransaction(UserTransaction userTransaction){  if (userTransaction != null) {    try {      if (userTransaction.getStatus() == Status.STATUS_MARKED_ROLLBACK) {        userTransaction.rollback();      } else {        userTransaction.commit();      }    } catch (    Throwable t) {      getLog().error("Failed to resolve UserTransaction for plugin: " + getName(),t);    } finally {      UserTransactionHelper.returnUserTransaction(userTransaction);    }  }}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static DBIDs randomSample(DBIDs ids,double rate,RandomFactory random){  return randomSample(ids,rate,random.getSingleThreadedRandom());}  }
class C{  private void evict(Entry<K,V> newCold){  while ((queueSize << 5) < mapSize) {    convertOldestHotToCold();  }  if (stackSize > 0) {    addToQueue(queue,newCold);  }  while (usedMemory > maxMemory && queueSize > 1) {    Entry<K,V> e=queue.queuePrev;    usedMemory-=e.memory;    removeFromQueue(e);    e.value=null;    e.memory=0;    addToQueue(queue2,e);    while (queue2Size + queue2Size > stackSize) {      e=queue2.queuePrev;      int hash=getHash(e.key);      remove(e.key,hash);    }  }}  }
class C{  public String evaluateTemplate(String template,Map<String,String> variables){  if (template == null) {    return template;  }  StringBuffer result=new StringBuffer();  int startIndex=template.indexOf(VAR_START);  int endIndex=-1;  while (startIndex >= 0 && startIndex < template.length()) {    result.append(template.substring(endIndex + 1,startIndex));    endIndex=template.indexOf(VAR_END,startIndex);    if (endIndex > startIndex) {      String varName=template.substring(startIndex + VAR_START.length(),endIndex);      Object resultObj=variables != null ? variables.get(varName.toLowerCase()) : "";      result.append(resultObj == null ? "" : resultObj.toString());    }    startIndex=template.indexOf(VAR_START,Math.max(endIndex + VAR_END.length(),startIndex + 1));  }  result.append(template.substring(endIndex + 1));  return result.toString();}  }
class C{  public void moveToNext(){  checkWidget();  final int index=this.selection + 1;  if (index == this.controls.size()) {    return;  }  changeSelectionTo(index);}  }
class C{  public StunServerTransaction(StunStack stackCallback,TransactionID tranID,TransportAddress localListeningAddress,TransportAddress requestSource){  this.stackCallback=stackCallback;  this.transactionID=tranID;  this.localListeningAddress=localListeningAddress;  this.requestSource=requestSource;}  }
class C{  private static void arrayStoreBarrierHelper(Assembler asm,BaselineCompilerImpl compiler,NormalMethod barrier){  MethodReference method=barrier.getMemberRef().asMethodReference();  compiler.genParameterRegisterLoad(method,false);  asm.generateJTOCcall(barrier.getOffset());}  }
class C{  public void render(Graphics g){  super.render(g);  drawingAttributes.setFrom(this);  if (subCircles != null) {    for (int i=subCircles.length - 1; i >= 0; i--) {      drawingAttributes.setTo(subCircles[i]);      drawingAttributes.setTo(labels[i]);      labels[i].setLinePaint(drawingAttributes.getLinePaint());      subCircles[i].render(g);      if (drawLabels) {        labels[i].render(g);      }    }    if (labels.length > subCircles.length && drawLabels) {      drawingAttributes.setTo(labels[subCircles.length]);      labels[subCircles.length].setLinePaint(drawingAttributes.getLinePaint());      labels[subCircles.length].render(g);    }  }  if (centerPoint != null) {    drawingAttributes.setTo(centerPoint);    centerPoint.render(g);  }}  }
class C{  @Override public Response listPlacementStrategies(){  return Response.ok(JsonUtil.toJson(strategyManager.getPlacementStrategyTitles())).build();}  }
class C{  void removeNodeReferences(Node<T> node){  layout.remove(node.stringID);  node.disconnectFromDividers();}  }
class C{  public AtomicCounter(long seqno){  this.seqno=seqno;}  }
class C{  public static Color stringToColor(String str){  int icol=SVG_COLOR_NAMES.get(str.toLowerCase());  if (icol != NO_VALUE) {    return new Color(icol,false);  }  return colorLookupStylesheet.stringToColor(str);}  }
class C{  private void updateCheckedItems(){  for (  TableItem item : tableViewer.getTable().getItems()) {    Profile data=(Profile)item.getData();    item.setChecked(environment.getProfileIds().contains(data.getId()));  }}  }
class C{  protected static String extractEncoding(String line){  Pattern p=Pattern.compile(EXTRACT_ENCODING_REGEX);  String[] matches=p.split(line);  String value=matches[1];  String[] cleanup=value.split("\"");  String encoding=cleanup[0];  return encoding.toLowerCase();}  }
class C{  public boolean areAllItemsEnabled(){  final ListAdapter adapter=mListAdapter;  if (adapter != null) {    return adapter.areAllItemsEnabled();  } else {    return true;  }}  }
class C{  public boolean isConfigurable(){  return configurable;}  }
class C{  public long time(){  return this.time;}  }
class C{  public boolean isIDRSlice(){  if (FUI_TYPE == (byte)0x05) {    return true;  }  if (isFrameNonInterleaved() && FUH_TYPE == (byte)0x05) {    return true;  }  return false;}  }
class C{  public boolean hasSymbol(){  return getSymbol() != null;}  }
class C{  @Override public String decode(String input){  return input;}  }
class C{  public static <K,V>Map<K,V> asImmutable(Map<K,V> self){  return Collections.unmodifiableMap(self);}  }
class C{  public boolean removeColumn(String recordKey,Column<CompositeColumnName> column,RowMutator mutator,Map<String,List<Column<CompositeColumnName>>> fieldColumnMap){  CompositeColumnName columnName=column.getName();  mutator.getRecordColumnList(_parentType.getCF(),recordKey).deleteColumn(columnName);  if (_index == null || column instanceof ColumnWrapper || isDeletionMark(column)) {    return false;  }  return _index.removeColumn(recordKey,column,_parentType.getDataObjectClass().getSimpleName(),mutator,fieldColumnMap);}  }
class C{  private void closeDeletion(int d){  Object[] tab=table;  int len=tab.length;  Object item;  for (int i=nextKeyIndex(d,len); (item=tab[i]) != null; i=nextKeyIndex(i,len)) {    int r=hash(item,len);    if ((i < r && (r <= d || d <= i)) || (r <= d && d <= i)) {      tab[d]=item;      tab[d + 1]=tab[i + 1];      tab[i]=null;      tab[i + 1]=null;      d=i;    }  }}  }
class C{  public static void showCallgraphSettingsDialog(final JFrame parent){  final ZyGraphViewSettings settings=ConfigManager.instance().getDefaultCallGraphSettings();  final CGraphSettingsDialog dlg=new CGraphSettingsDialog(parent,"Initial Call graph Settings",settings,true,true);  dlg.setVisible(true);  ConfigManager.instance().updateCallgraphSettings(settings);  ConfigManager.instance().saveSettings(parent);}  }
class C{  final public void write(char[] buf){  try {    _out.print(buf,0,buf.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public Y le(String value){  if (value == null || value.trim().length() == 0) {    return super.le((Integer)null);  } else {    return super.le(Integer.parseInt(value.trim()));  }}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (ch == null || start < 0 || length >= (ch.length - start) || length < 0)   return;  append(m_doc.createComment(new String(ch,start,length)));}  }
class C{  private static String createRegExpStringForWildcardPattern(String wildcardPattern){  String escaped=regexpWildcardEscape.replace(wildcardPattern,"\\$&");  RegExp mimicLookbehind=RegExp.compile("([\\\\]*)([?*])","g");  StringBuilder wildcardStr=new StringBuilder(escaped);  for (MatchResult match=mimicLookbehind.exec(wildcardStr.toString()); match != null; match=mimicLookbehind.exec(wildcardStr.toString())) {    if (match.getGroup(1) != null && !match.getGroup(1).isEmpty()) {      int offset=match.getGroup(1).length() / 2;      wildcardStr.delete(match.getIndex(),match.getIndex() + offset);      if (offset % 2 == 0) {        if (match.getGroup(2).equals("?")) {          wildcardStr.replace(match.getIndex() + offset,match.getIndex() + offset + 1,"\\S");          offset-=1;        } else {          wildcardStr.replace(match.getIndex() + offset,match.getIndex() + offset + 1,"\\S+");          offset-=2;        }      }      mimicLookbehind.setLastIndex(mimicLookbehind.getLastIndex() - offset);    } else     if (match.getGroup(2).equals("?")) {      wildcardStr.replace(match.getIndex(),match.getIndex() + 1,"\\S");      mimicLookbehind.setLastIndex(mimicLookbehind.getLastIndex() + 1);    } else {      wildcardStr.replace(match.getIndex(),match.getIndex() + 1,"\\S+");      mimicLookbehind.setLastIndex(mimicLookbehind.getLastIndex() + 2);    }  }  return wildcardStr.toString();}  }
class C{  public cudaIpcMemHandle(){}  }
class C{  public static boolean verify(byte[] data,ECDSASignature signature,byte[] pub){  if (FAKE_SIGNATURES)   return true;  if (Secp256k1Context.isEnabled()) {    try {      return NativeSecp256k1.verify(data,signature.encodeToDER(),pub);    } catch (    NativeSecp256k1Util.AssertFailException e) {      log.error("Caught AssertFailException inside secp256k1",e);      return false;    }  }  ECDSASigner signer=new ECDSASigner();  ECPublicKeyParameters params=new ECPublicKeyParameters(CURVE.getCurve().decodePoint(pub),CURVE);  signer.init(false,params);  try {    return signer.verifySignature(data,signature.r,signature.s);  } catch (  NullPointerException e) {    log.error("Caught NPE inside bouncy castle",e);    return false;  }}  }
class C{  public void loadFromStream(InputStream inStr){  BufferedReader rdr;  String currLine;  String[] params;  Conversion[] currCnvSet;  EcuDataItem newItm;  int line=0;  try {    rdr=new BufferedReader(new InputStreamReader(inStr));    while ((currLine=rdr.readLine()) != null) {      if (++line == 1 || currLine.startsWith("#")) {        continue;      }      currLine=currLine.replaceAll("\"","");      params=currLine.split("\t");      currCnvSet=cnv.get(params[FLD.FORMULA.ordinal()]);      if (currCnvSet == null) {        log.warn("Conversion not found: " + params[FLD.FORMULA.ordinal()] + " "+ currLine);      }      Float minVal=null;      Float maxVal=null;      try {        minVal=Float.parseFloat(params[FLD.MIN.ordinal()]);      } catch (      NumberFormatException ex) {      }      try {        maxVal=Float.parseFloat(params[FLD.MAX.ordinal()]);      } catch (      NumberFormatException e) {      }      String label=Messages.getString(params[FLD.MNEMONIC.ordinal()],params[FLD.LABEL.ordinal()]);      newItm=new EcuDataItem(Integer.decode(params[FLD.PID.ordinal()]).intValue(),Integer.parseInt(params[FLD.OFS.ordinal()]),Integer.parseInt(params[FLD.LEN.ordinal()]),Integer.parseInt(params[FLD.BIT_OFS.ordinal()]),Integer.parseInt(params[FLD.BIT_LEN.ordinal()]),Long.decode(params[FLD.BIT_MASK.ordinal()]).longValue(),currCnvSet,params[FLD.FORMAT.ordinal()],minVal,maxVal,label);      String[] services=params[FLD.SVC.ordinal()].split(",");      for (      String service : services) {        int svcId=Integer.decode(service);        appendItemToService(svcId,newItm);      }    }    rdr.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=new OpenCameraManager().build().open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  protected Injector createInjector(List<Module> modules){  return Guice.createInjector(modules);}  }
class C{  protected ParameterizedTypeRefStructuralImpl(){  super();}  }
class C{  @Override public boolean supportsSchemasInPrivilegeDefinitions(){  debugCodeCall("supportsSchemasInPrivilegeDefinitions");  return true;}  }
class C{  @Override public int hashCode(){  return 83 + start + 7 * end + (negated ? 1 : 0);}  }
class C{  public Entry withDisposition(Disposition disposition){  if (disposition == this.disposition) {    return this;  }  return new Entry(address,disposition,spec);}  }
class C{  @Override protected void drawGuiContainerBackgroundLayer(float f,int mouseX,int mouseY){  FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE);  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);  containerWidth=(this.width - this.xSize) / 2;  containerHeight=(this.height - this.ySize) / 2;  this.drawTexturedModalRect(containerWidth,containerHeight,0,0,this.xSize,this.ySize);}  }
class C{  public boolean isResident(){  return (status != Status.NONRES);}  }
class C{  public Object clone(){  DVector clone=null;  try {    clone=(DVector)super.clone();  } catch (  Exception e) {    System.err.println("Error cloning " + getClass().getName() + ":");    e.printStackTrace();    System.exit(1);  }  clone.vector=(double[])vector.clone();  return clone;}  }
class C{  Operation endOperation(int threadId,String className,LoadedClass loadedClass,long time){  LinkedList<Operation> stack=stacks.get(threadId);  if (stack == null || stack.isEmpty()) {    didNotStart(className);    return null;  }  Operation o=stack.getLast();  if (loadedClass != o.loadedClass) {    didNotStart(className);    return null;  }  stack.removeLast();  o.endTimeNanos=time;  return o;}  }
class C{  public boolean isEmpty(){  return tanks.isFluidTankEmpty(index);}  }
class C{  public static InlineMenuBuilder builder(TelegramBot bot){  return new InlineMenuBuilder(bot);}  }
class C{  public KeyProtector(char[] password) throws NoSuchAlgorithmException {  int i, j;  if (password == null) {    throw new IllegalArgumentException("password can't be null");  }  md=MessageDigest.getInstance(DIGEST_ALG);  passwdBytes=new byte[password.length * 2];  for (i=0, j=0; i < password.length; i++) {    passwdBytes[j++]=(byte)(password[i] >> 8);    passwdBytes[j++]=(byte)password[i];  }}  }
class C{  protected void drawText(DrawContext dc){  TextRenderer tr=this.getTextRenderer(dc);  Point2D point=this.getOffset().computeOffset(this.textBounds.getWidth(),this.textBounds.getHeight(),null,null);  int x=(int)point.getX();  int y=(int)point.getY();  try {    tr.begin3DRendering();    Color bgColor=this.determineBackgroundColor(this.color);    CharSequence text=this.getText();    tr.setColor(bgColor);    tr.draw(text,x + 1,y - 1);    tr.setColor(this.getColor());    tr.draw(text,x,y);  }  finally {    tr.end3DRendering();  }}  }
class C{  public void testGetServletElementWithOneServlet() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet>".trim() + "    <servlet-name>s1</servlet-name>".trim()+ "    <servlet-class>sclass1</servlet-class>".trim()+ "  </servlet>".trim()+ "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  Element servletElement=webXml.getTagByIdentifier(WebXmlType.SERVLET,"s1");  assertNotNull(servletElement);  assertEquals("servlet",servletElement.getName());  assertEquals("servlet-name",((Element)servletElement.getChildren().get(0)).getName());  assertEquals("s1",((Element)servletElement.getChildren().get(0)).getValue());  assertEquals("servlet-class",getLastChild(servletElement).getName());  assertEquals("sclass1",getLastChild(servletElement).getValue());}  }
class C{  public DgAnalysisPopulation(){  table=new LinkedHashMap<Id<Person>,DgPersonData>();}  }
class C{  void doDie(int x,int y){  destroyCreature(x,y);}  }
class C{  public final int size(){  int count=0;  for (  E ignored : myIterable) {    count++;  }  return count;}  }
class C{  private void interruptIdleWorkers(boolean onlyOne){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers) {      Thread t=w.thread;      if (!t.isInterrupted() && w.tryLock()) {        try {          t.interrupt();        } catch (        SecurityException ignore) {        } finally {          w.unlock();        }      }      if (onlyOne)       break;    }  }  finally {    mainLock.unlock();  }}  }
class C{  @SuppressWarnings("serial") @Test public final void testFire(){  final StendhalRPZone zone=new StendhalRPZone("test");  final Area ar=new Area(zone,new Rectangle(-2,-2,4,4){  });  final PlayerInAreaCondition cond=new PlayerInAreaCondition(ar);  final Player player=PlayerTestHelper.createPlayer("player");  assertFalse(cond.fire(player,null,null));  zone.add(player);  assertTrue(ar.contains(player));  assertTrue(cond.fire(player,null,null));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String removeFormattingAndColors(String line){  return removeFormatting(removeColors(line));}  }
class C{  public void deleteImageSharings(ContactId contact) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteImageSharings2(contact);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private void offsetChildrenLeftAndRight(int offset){  for (int i=getChildCount() - 1; i >= 0; i--) {    getChildAt(i).offsetLeftAndRight(offset);  }}  }
class C{  protected void copyBindings() throws StandardException {  for (  QueryTreeNode node : bindingsToCopy) {    Object userData=node.getUserData();    if (userData instanceof TableBinding)     userData=new TableBinding((TableBinding)userData); else     if (userData instanceof ColumnBinding) {      ColumnBinding cb=(ColumnBinding)userData;      FromTable oldFromTable=cb.getFromTable();      FromTable newFromTable=(FromTable)nodeMap.get(oldFromTable);      if (newFromTable == null)       newFromTable=oldFromTable;      ResultColumn oldResultColumn=cb.getResultColumn();      if (oldResultColumn == null) {        userData=new ColumnBinding(newFromTable,cb.getColumn(),cb.isNullable());      } else {        ResultColumn newResultColumn=(ResultColumn)nodeMap.get(oldResultColumn);        if (newResultColumn == null)         newResultColumn=oldResultColumn;        userData=new ColumnBinding(newFromTable,newResultColumn);      }    } else {      continue;    }    node.setUserData(userData);  }}  }
class C{  @Override protected void finalize() throws Throwable {  close();  super.finalize();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.718 -0400",hash_original_method="307DABE77B65556975D712DF7F2D3DF0",hash_generated_method="BC48B88DF10CE450AA1C6373806B3AF8") public void trace(Object message,Throwable t){}  }
class C{  public boolean isPc(){  return isProgramCounter;}  }
class C{  public LongArray(int capacity){  this(true,capacity);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == PropertyAssignment.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == AnnotablePropertyAssignment.class) {switch (derivedFeatureID) {case N4JSPackage.PROPERTY_GETTER_DECLARATION__ANNOTATION_LIST:    return N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  query="";  listSize="";}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.TYPE_CAST_EXPRESSION__OPERAND:    setOperand((Expression)null);  return;case ExpressionsPackage.TYPE_CAST_EXPRESSION__TYPE:setType((Type)null);return;}super.eUnset(featureID);}  }
class C{  private double toDouble(byte[] data){  if (data == null || data.length != 8)   return 0;  return Double.longBitsToDouble(convertBinaryDoubleToLong(data));}  }
class C{  protected void findNumBins(int index){  double min=Double.MAX_VALUE, max=-Double.MAX_VALUE, binWidth=0, entropy, bestEntropy=Double.MAX_VALUE, currentVal;  double[] distribution;  int bestNumBins=1;  Instance currentInstance;  for (int i=0; i < getInputFormat().numInstances(); i++) {    currentInstance=getInputFormat().instance(i);    if (!currentInstance.isMissing(index)) {      currentVal=currentInstance.value(index);      if (currentVal > max) {        max=currentVal;      }      if (currentVal < min) {        min=currentVal;      }    }  }  for (int i=0; i < m_NumBins; i++) {    distribution=new double[i + 1];    binWidth=(max - min) / (i + 1);    for (int j=0; j < getInputFormat().numInstances(); j++) {      currentInstance=getInputFormat().instance(j);      if (!currentInstance.isMissing(index)) {        for (int k=0; k < i + 1; k++) {          if (currentInstance.value(index) <= (min + (((double)k + 1) * binWidth))) {            distribution[k]+=currentInstance.weight();            break;          }        }      }    }    entropy=0;    for (int k=0; k < i + 1; k++) {      if (distribution[k] < 2) {        entropy=Double.MAX_VALUE;        break;      }      entropy-=distribution[k] * Math.log((distribution[k] - 1) / binWidth);    }    if (entropy < bestEntropy) {      bestEntropy=entropy;      bestNumBins=i + 1;    }  }  double[] cutPoints=null;  if ((bestNumBins > 1) && (binWidth > 0)) {    cutPoints=new double[bestNumBins - 1];    for (int i=1; i < bestNumBins; i++) {      cutPoints[i - 1]=min + binWidth * i;    }  }  m_CutPoints[index]=cutPoints;}  }
class C{  synchronized public int size(){  return mapping.size();}  }
class C{  public JSONObject extract(JSONObject choice){  if (this.selectionMapping == null)   return choice;  JSONObject json=new JSONObject(true);  for (  Map.Entry<String,String> c : selectionMapping.entrySet()) {    String key=c.getKey();    int p=key.indexOf('.');    if (p > 0) {      String k0=key.substring(0,p);      String k1=key.substring(p + 1);      if (choice.has(k0)) {        if (k1.equals("length") || k1.equals("size()")) {          Object a=choice.get(k0);          if (a instanceof String[]) {            json.put(c.getValue(),((String[])a).length);          } else           if (a instanceof JSONArray) {            json.put(c.getValue(),((JSONArray)a).length());          }        } else {          JSONObject o=choice.getJSONObject(k0);          if (o.has(k1))           json.put(c.getValue(),o.get(k1));        }      }    } else     if ((p=key.indexOf('[')) > 0) {      int q=key.indexOf("]",p);      if (q > 0) {        String k0=key.substring(0,p);        int i=Integer.parseInt(key.substring(p + 1,q));        if (choice.has(k0)) {          JSONArray a=choice.getJSONArray(k0);          if (i < a.length())           json.put(c.getValue(),a.get(i));        }      }    } else {      if (choice.has(key))       json.put(c.getValue(),choice.get(key));    }  }  return json;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.824 -0500",hash_original_method="7B93ED55B73724A8D927AFB13EC86251",hash_generated_method="CB02D8B39A62AE9F494D3453E700A589") public void writeToParcel(Parcel dest,int flags){  dest.writeString(exceptionClassName);  dest.writeString(exceptionMessage);  dest.writeString(throwFileName);  dest.writeString(throwClassName);  dest.writeString(throwMethodName);  dest.writeInt(throwLineNumber);  dest.writeString(stackTrace);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.066 -0500",hash_original_method="37495B10D833FDE07627744A97E6F360",hash_generated_method="1C9A247DEF15CC56BBB62F24F77B8BB7") public void close() throws IOException {  if (!closed) {    try {      byte buffer[]=new byte[BUFFER_SIZE];      while (read(buffer) >= 0) {      }    }  finally {      closed=true;    }  }}  }
class C{  private static String capitalize(String s){  if (s == null || s.length() == 0) {    return "";  }  char first=s.charAt(0);  if (Character.isUpperCase(first)) {    return s;  } else {    return Character.toUpperCase(first) + s.substring(1);  }}  }
class C{  public void addSGraphic(SGraphic g){  graphics.addElement(g);}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  @ObjectiveCName("changeNotificationSoundEnabledWithValue:") public void changeNotificationSoundEnabled(boolean val){  modules.getSettingsModule().changeNotificationSoundEnabled(val);}  }
class C{  SolrInputField field(String name,float boost,Object... values){  SolrInputField f=new SolrInputField(name);  for (  Object v : values) {    f.addValue(v,1.0F);  }  f.setBoost(boost);  return f;}  }
class C{  public boolean containsValue(double val){  byte[] states=_states;  double[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  public ParameterBlock add(char c){  return add(new Character(c));}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public static void writeTokenFile(File tokenFile,String value) throws IOException {  writeToken(tokenFile.getParentFile(),tokenFile.getName(),value);}  }
class C{  public static void mixInBands(File f1,File f2,File dest,int nrowsband,boolean increaseband){  PngReader pngr1=new PngReader(f1);  PngReader pngr2=new PngReader(f2);  if (!pngr2.imgInfo.equals(pngr1.imgInfo))   throw new RuntimeException("must be same type");  PngWriter pngw=new PngWriter(dest,pngr1.imgInfo,false);  pngw.copyChunksFrom(pngr1.getChunksList());  int which=1;  int nr=0;  for (int i=0; i < pngr1.imgInfo.rows; i++) {    IImageLine line1=pngr1.readRow();    IImageLine line2=pngr2.readRow();    pngw.writeRow(which == 1 ? line1 : line2);    nr++;    if (nr == nrowsband) {      which=which == 2 ? 1 : which + 1;      nr=0;      if (which == 1 && increaseband)       nrowsband++;    }  }  pngr1.end();  pngr2.end();  pngw.end();  System.out.println("done: see " + dest);}  }
class C{  public int indexOf(int elem){  if (null == m_map)   return -1;  for (int i=0; i < m_firstFree; i++) {    int node=m_map[i];    if (node == elem)     return i;  }  return -1;}  }
class C{  public GmlEnvelope(){}  }
class C{  public boolean retainAll(Collection<?> c){  if (c == null)   throw new NullPointerException();  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    if (len != 0) {      int newlen=0;      Object[] temp=new Object[len];      for (int i=0; i < len; ++i) {        Object element=elements[i];        if (c.contains(element))         temp[newlen++]=element;      }      if (newlen != len) {        setArray(Arrays.copyOf(temp,newlen));        return true;      }    }    return false;  }  finally {    lock.unlock();  }}  }
class C{  public EncryptedDataElement(Element encDataElement){  initEncryptionElement(encDataElement);}  }
class C{  private void testTable(){  for (int j=0; j < ((NumericTable)table.getData()).getRowCount(); j++) {    ((NumericTable)table.getData()).setCurrentRow(j);    table.scrollRectToVisible(table.getCellRect(((NumericTable)table.getData()).getCurrentRow(),table.getColumnCount(),true));    testRow();  }}  }
class C{  public static void addValidator(IFrancaExternalValidator validator,String mode){  if (validatorMap == null) {    validatorMap=ArrayListMultimap.create();  }  putToMap(validator,mode);}  }
class C{  @Override public void read(ArrayDataInput dis) throws TruncatedFileException, IOException {  if (dis instanceof RandomAccess) {    this.fileOffset=FitsUtil.findOffset(dis);  } else {    this.fileOffset=-1;  }  boolean firstCard=true;  HeaderCardCountingArrayDataInput cardCountingArray=new HeaderCardCountingArrayDataInput(dis);  try {    while (true) {      HeaderCard fcard=new HeaderCard(cardCountingArray);      String key=fcard.getKey();      if (firstCard) {        checkFirstCard(key);        firstCard=false;      }      if (key != null && this.cards.containsKey(key)) {        addDuplicate(this.cards.get(key));      }      if (LONGSTRN.key().equals(key)) {        FitsFactory.setLongStringsEnabled(true);      }      addLine(fcard);      if (END.key().equals(key)) {        break;      }    }  } catch (  EOFException e) {    if (!firstCard) {      throw new IOException("Invalid FITS Header:",new TruncatedFileException(e.getMessage()));    }    throw e;  }catch (  TruncatedFileException e) {    if (firstCard && FitsFactory.getAllowTerminalJunk()) {      EOFException eofException=new EOFException("First card truncated");      eofException.initCause(e);      throw eofException;    }    throw new IOException("Invalid FITS Header:",new TruncatedFileException(e.getMessage()));  }catch (  Exception e) {    throw new IOException("Invalid FITS Header",e);  }  if (this.fileOffset >= 0) {    this.input=dis;  }  this.originalCardCount=cardCountingArray.getPhysicalCardsRead();  try {    dis.skipAllBytes(FitsUtil.padding(this.originalCardCount * HeaderCard.FITS_HEADER_CARD_SIZE));  } catch (  IOException e) {    throw new TruncatedFileException("Failed to skip " + FitsUtil.padding(this.originalCardCount * HeaderCard.FITS_HEADER_CARD_SIZE) + " bytes",e);  }}  }
class C{  protected boolean canParseContentType(String mimeType){  return ColladaConstants.COLLADA_MIME_TYPE.equals(mimeType) || "text/plain".equals(mimeType) || "text/xml".equals(mimeType);}  }
class C{  public ExtensibleIndex createUnsigned(){  return mType.createUnsigned(mLength);}  }
class C{  public static boolean containsTypeParameter(Type type){  if (type.isTypeParameter())   return true;  for (  Type pt : type.getTypeArgumentList()) {    if (containsTypeParameter(pt)) {      return true;    }  }  if (type.isIntersection()) {    List<Type> types=type.getSatisfiedTypes();    for (int i=0, l=types.size(); i < l; i++) {      if (containsTypeParameter(types.get(i)))       return true;    }    return false;  }  if (type.isUnion()) {    List<Type> types=type.getCaseTypes();    for (int i=0, l=types.size(); i < l; i++) {      if (containsTypeParameter(types.get(i)))       return true;    }    return false;  }  return false;}  }
class C{  public String str(){  return (null != m_obj) ? ((String)m_obj) : "";}  }
class C{  public static boolean isClassicWindows(){  return isClassicWindows;}  }
class C{  public synchronized int addPeers(List<Peer> newPeers){  int nonDuplicateCount=0;  for (  Peer p : newPeers) {    if (addPeer(p)) {      nonDuplicateCount++;    }  }  return nonDuplicateCount;}  }
class C{  public Builder messageTimeout(Duration messageTimeout){  this.messageTimeout=messageTimeout;  return this;}  }
class C{  public Object invokeMethodSynchronously(StorageSystem storageDevice,CIMObjectPath objectPath,String methodName,CIMArgument[] inArgs,CIMArgument[] outArgs,SmisJob job) throws WBEMException, SmisException {  Object obj=invokeMethod(storageDevice,objectPath,methodName,inArgs,outArgs);  CIMObjectPath cimJobPath=_cimPath.getCimObjectPathFromOutputArgs(outArgs,"Job");  if (cimJobPath != null) {    try {      waitForAsyncSmisJob(storageDevice,cimJobPath,job);    } catch (    Exception ex) {      _log.error("Exception occurred while waiting on async job {} to complete",cimJobPath);      if (ex instanceof SmisException) {        throw (SmisException)ex;      } else {        throw new SmisException("Exception occurred while waiting on async " + "job to complete.",ex);      }    }  } else {    throw new SmisException(MessageFormat.format("No job was created for method {0}, object {1}, on storage device {2}",methodName,objectPath.getObjectName(),storageDevice.getLabel()));  }  return obj;}  }
class C{  private final void resize(){  final long[] newlist=allocate(list.length + DELTA);  java.lang.System.arraycopy(list,0,newlist,0,size);  list=newlist;}  }
class C{  public void resetTo(int begin,int end){  this.diet=false;  this.initialPosition=this.startPosition=this.currentPosition=begin;  if (this.source != null && this.source.length < end) {    this.eofPosition=this.source.length;  } else {    this.eofPosition=end < Integer.MAX_VALUE ? end + 1 : end;  }  this.commentPtr=-1;  this.foundTaskCount=0;}  }
class C{  public void add(int value){  throwIfImmutable();  growIfNeeded();  values[size++]=value;  if (sorted && (size > 1)) {    sorted=(value >= values[size - 2]);  }}  }
class C{  @Nullable public FailedNodeException[] failures(){  return null;}  }
class C{  public CTrackingResultContainer(final IViewContainer viewContainer,final ZyGraph graph){  m_viewContainer=Preconditions.checkNotNull(viewContainer,"IE01683: View container argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE01684: Graph argument can not be null");}  }
class C{  @Override public PLCameraParameters clone(){  return new PLCameraParameters(this);}  }
class C{  public String toString(){  return String.format("%02d:%02d:%04.1f\n",this.hour,this.minute,this.second);}  }
class C{  public static Sequence concatenate(List<Sequence> sequences){  List<SimpleList<Statement>> statements1=new ArrayList<>();  int newHashCode=0;  int newNetSize=0;  for (  Sequence c : sequences) {    newHashCode+=c.savedHashCode;    newNetSize+=c.savedNetSize;    statements1.add(c.statements);  }  return new Sequence(new ListOfLists<>(statements1),newHashCode,newNetSize);}  }
class C{  public boolean isReboot(){  return reboot;}  }
class C{  public void addChangeListener(ChartChangeListener listener){  ParamChecks.nullNotPermitted(listener,"listener");  this.changeListeners.add(ChartChangeListener.class,listener);}  }
class C{  private static boolean isInnerJoint(Point jointPoint,Rect pathBBox,double miterLimit,double halfWeight){  if ((jointPoint.x - pathBBox.xMin) > miterLimit * halfWeight && (pathBBox.xMax - jointPoint.x) > miterLimit * halfWeight && (jointPoint.y - pathBBox.yMin) > miterLimit * halfWeight && (pathBBox.yMax - jointPoint.y) > miterLimit * halfWeight) {    return true;  } else {    return false;  }}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  @Override @SuppressWarnings("try") public void close() throws IOException {  try (SequencesReader ignored=mSingle){  }  finally {    try (SequencesReader ignored=mLeft){    }  finally {      try (SequencesReader ignored=mRight){      }     }  }}  }
class C{  public int hashCode(){  return rp == null ? m : m + rp.hashCode();}  }
class C{  public boolean isDConnectedTo(Node node1,Node node2,List z){  throw new UnsupportedOperationException();}  }
class C{  @Override public void onFinished(BuildStatus buildStatus){  if (buildStatus == BuildStatus.SUCCESSFUL) {    projectExplorer.reloadChildren();    namesByTypes.clear();    widgetByTypes.clear();    view.clear();    updateGenerateButton();  }}  }
class C{  @Override protected void start(){  if (Cfg.DEBUG) {    Check.log(TAG + " (actualStart)");  }  readChatWeChatMessages();}  }
class C{  public Relation createAndInsertRelation(List<OsmElement> members){  dirty=true;  Relation relation=factory.createRelationWithNewId();  insertElementUnsafe(relation);  if (members != null) {    for (    OsmElement e : members) {      undo.save(e);      RelationMember rm=new RelationMember("",e);      relation.addMember(rm);      e.addParentRelation(relation);    }  }  return relation;}  }
class C{  public T onkeyup(String value){  return attr("onkeyup",value);}  }
class C{  public void onItemClick(AdapterView parent,View view,int position,long id){  String result=String.valueOf(mOptions.charAt(position));  replaceCharacterAndClose(result);}  }
class C{  public CResolveAllFunctionsSingleAddressSpaceAction(final JComponent parent,final IDatabase database,final INaviAddressSpace addressSpace){  super("Resolve all imported functions");  m_parent=Preconditions.checkNotNull(parent,"IE01915: Parent argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE01916: Database argument can not be null");  m_addressSpace=Preconditions.checkNotNull(addressSpace,"IE02340: module argument can not be null");}  }
class C{  public ParsedQuery parseQuery(BytesReference source){  try {    ParsedQuery parsedQuery=null;    XContentParser parser=XContentHelper.createParser(source);    for (XContentParser.Token token=parser.nextToken(); token != XContentParser.Token.END_OBJECT; token=parser.nextToken()) {      if (token == XContentParser.Token.FIELD_NAME) {        String fieldName=parser.currentName();        if ("query".equals(fieldName)) {          parsedQuery=parse(parser);        } else         if ("query_binary".equals(fieldName) || "queryBinary".equals(fieldName)) {          byte[] querySource=parser.binaryValue();          XContentParser qSourceParser=XContentFactory.xContent(querySource).createParser(querySource);          parsedQuery=parse(qSourceParser);        } else {          throw new QueryParsingException(getParseContext(),"request does not support [" + fieldName + "]");        }      }    }    if (parsedQuery != null) {      return parsedQuery;    }  } catch (  QueryParsingException e) {    throw e;  }catch (  Throwable e) {    throw new QueryParsingException(getParseContext(),"Failed to parse",e);  }  throw new QueryParsingException(getParseContext(),"Required query is missing");}  }
class C{  private boolean hasConnectivityToAllSystems(Initiator initiator,Collection<URI> storageSystems,List<URI> connectedStorageSystems,ExportGroup exportGroup){  boolean hasConnectivity=true;  if (connectedStorageSystems != null) {    connectedStorageSystems.addAll(storageSystems);  }  for (  URI storage : storageSystems) {    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);    List<URI> varrays=ExportUtils.getVarraysForStorageSystemVolumes(exportGroup,storage,_dbClient);    if (!hasConnectivityToSystem(storageSystem,varrays,initiator)) {      hasConnectivity=false;      if (connectedStorageSystems != null) {        connectedStorageSystems.remove(storage);      }    }  }  return hasConnectivity;}  }
class C{  public void testCFII_ServerStartLater_Block() throws Exception {  ensureServerClosed();  assertTrue(this.channel1.isBlocking());  statusNotConnected_NotPending();  try {    this.channel1.connect(localAddr1);    fail("Should throw a ConnectException here.");  } catch (  ConnectException e) {  }  statusChannelClosed();  ensureServerOpen();  try {    this.channel1.finishConnect();    fail("Should throw a ClosedChannelException here.");  } catch (  ClosedChannelException e) {  }}  }
class C{  public static ListenNowFragment newInstance(){  return new ListenNowFragment();}  }
class C{  public void show(){  mHandler.post(mShow);  if (mDuration > 0) {    mHandler.postDelayed(mHide,mDuration);  }}  }
class C{  @Command(description="Generate key on token") public void generateKey(@Param(name="tokenId",description="Token ID") String tokenId) throws Exception {  Map<String,Object> logData=new LinkedHashMap<>();  logData.put(TOKEN_ID_PARAM,tokenId);  KeyInfo response;  try {    response=SignerClient.execute(new GenerateKey(tokenId));    logData.put(KEY_ID_PARAM,response.getId());    AuditLogger.log(GENERATE_A_KEY_ON_THE_TOKEN_EVENT,XROAD_USER,logData);  } catch (  Exception e) {    AuditLogger.log(GENERATE_A_KEY_ON_THE_TOKEN_EVENT,XROAD_USER,e.getMessage(),logData);    throw e;  }  System.out.println(response.getId());}  }
class C{  public Entity insertPhoto(final String description,final String userId) throws DatastoreException {  List<Property> properties=ImmutableList.of(makeProperty("description",makeValue(description)).build(),makeProperty("userId",makeValue(userId)).build(),makeProperty("date",makeValue(new Date())).build(),makeProperty("flagged",makeValue(false)).build(),makeProperty("available",makeValue(false)).build(),makeProperty("numberVotes",makeValue(0)).build(),makeProperty("numberPositiveVotes",makeValue(0)).build(),makeProperty("lowerTruePopularity",makeValue(0)).build(),makeProperty("upperTruePopularity",makeValue(0)).build());  Entity photo=DbUtils.insertEntity(datastore,PHOTO_ENTITY,null,properties);  if (photo.hasKey()) {    voteForPhoto(DbUtils.getEntityId(photo),1,userId);  }  return photo;}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  public void startDelayed(int seconds) throws SchedulerException {  try {    getRemoteScheduler().startDelayed(seconds);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo netInfo=cm.getActiveNetworkInfo();  return netInfo != null && netInfo.isConnectedOrConnecting();}  }
class C{  public void writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpeg == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    s.write(jpeg,0,jpeg.length);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public void add(final AbstractInsnNode insn){  ++size;  if (last == null) {    first=insn;    last=insn;  } else {    last.next=insn;    insn.prev=last;  }  last=insn;  cache=null;  insn.index=0;}  }
class C{  public Task resize(String clusterId,int size) throws IOException {  String path=String.format("%s/%s/resize",getBasePath(),clusterId);  ClusterResizeOperation op=new ClusterResizeOperation();  op.setNewSlaveCount(size);  HttpResponse response=this.restClient.perform(RestClient.Method.POST,path,serializeObjectAsJson(op));  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  private void antiAliasFillRaster(int[] pixels,int off,int adjust,int x,int y,int w,int h){  final double constC=-(radiusSq) + (centerX * centerX) + (centerY * centerY);  final float precalc2=2 * centerY;  final float precalc3=-2 * centerX;  final float constX=(a00 * (x - .5f)) + (a01 * (y + .5f)) + a02;  final float constY=(a10 * (x - .5f)) + (a11 * (y + .5f)) + a12;  float X;  float Y;  int i, j;  int indexer=off - 1;  double[] prevGs=new double[w + 1];  double deltaXSq, deltaYSq;  double solutionX, solutionY;  double slope, yintcpt, A, B, C, det;  double intersectToFocusSq, currentToFocusSq;  double g00, g01, g10, g11;  X=constX - a01;  Y=constY - a11;  for (i=0; i <= w; i++) {    final float dx=X - focusX;    if ((dx > -0.000001f) && (dx < 0.000001f)) {      solutionX=focusX;      solutionY=centerY;      solutionY+=(Y > focusY) ? trivial : -trivial;    } else {      slope=(Y - focusY) / (X - focusX);      yintcpt=Y - (slope * X);      A=(slope * slope) + 1;      B=precalc3 + (-2 * slope * (centerY - yintcpt));      C=constC + (yintcpt * (yintcpt - precalc2));      det=Math.sqrt((B * B) - (4 * A * C));      solutionX=-B;      solutionX+=(X < focusX) ? -det : det;      solutionX=solutionX / (2 * A);      solutionY=(slope * solutionX) + yintcpt;    }    deltaXSq=solutionX - focusX;    deltaXSq=deltaXSq * deltaXSq;    deltaYSq=solutionY - focusY;    deltaYSq=deltaYSq * deltaYSq;    intersectToFocusSq=deltaXSq + deltaYSq;    deltaXSq=X - focusX;    deltaXSq=deltaXSq * deltaXSq;    deltaYSq=Y - focusY;    deltaYSq=deltaYSq * deltaYSq;    currentToFocusSq=deltaXSq + deltaYSq;    prevGs[i]=Math.sqrt(currentToFocusSq / intersectToFocusSq);    X+=a00;    Y+=a10;  }  for (j=0; j < h; j++) {    X=(a01 * j) + constX;    Y=(a11 * j) + constY;    g10=prevGs[0];    float dx=X - focusX;    if ((dx > -0.000001f) && (dx < 0.000001f)) {      solutionX=focusX;      solutionY=centerY;      solutionY+=(Y > focusY) ? trivial : -trivial;    } else {      slope=(Y - focusY) / (X - focusX);      yintcpt=Y - (slope * X);      A=(slope * slope) + 1;      B=precalc3 + (-2 * slope * (centerY - yintcpt));      C=constC + (yintcpt * (yintcpt - precalc2));      det=Math.sqrt((B * B) - (4 * A * C));      solutionX=-B;      solutionX+=(X < focusX) ? -det : det;      solutionX=solutionX / (2 * A);      solutionY=(slope * solutionX) + yintcpt;    }    deltaXSq=solutionX - focusX;    deltaXSq=deltaXSq * deltaXSq;    deltaYSq=solutionY - focusY;    deltaYSq=deltaYSq * deltaYSq;    intersectToFocusSq=deltaXSq + deltaYSq;    deltaXSq=X - focusX;    deltaXSq=deltaXSq * deltaXSq;    deltaYSq=Y - focusY;    deltaYSq=deltaYSq * deltaYSq;    currentToFocusSq=deltaXSq + deltaYSq;    g11=Math.sqrt(currentToFocusSq / intersectToFocusSq);    prevGs[0]=g11;    X+=a00;    Y+=a10;    for (i=1; i <= w; i++) {      g00=g10;      g01=g11;      g10=prevGs[i];      dx=X - focusX;      if ((dx > -0.000001f) && (dx < 0.000001f)) {        solutionX=focusX;        solutionY=centerY;        solutionY+=(Y > focusY) ? trivial : -trivial;      } else {        slope=(Y - focusY) / (X - focusX);        yintcpt=Y - (slope * X);        A=(slope * slope) + 1;        B=precalc3 + (-2 * slope * (centerY - yintcpt));        C=constC + (yintcpt * (yintcpt - precalc2));        det=Math.sqrt((B * B) - (4 * A * C));        solutionX=-B;        solutionX+=(X < focusX) ? -det : det;        solutionX=solutionX / (2 * A);        solutionY=(slope * solutionX) + yintcpt;      }      deltaXSq=solutionX - focusX;      deltaXSq=deltaXSq * deltaXSq;      deltaYSq=solutionY - focusY;      deltaYSq=deltaYSq * deltaYSq;      intersectToFocusSq=deltaXSq + deltaYSq;      deltaXSq=X - focusX;      deltaXSq=deltaXSq * deltaXSq;      deltaYSq=Y - focusY;      deltaYSq=deltaYSq * deltaYSq;      currentToFocusSq=deltaXSq + deltaYSq;      g11=Math.sqrt(currentToFocusSq / intersectToFocusSq);      prevGs[i]=g11;      pixels[indexer + i]=indexGradientAntiAlias((float)((g00 + g01 + g10+ g11) / 4),(float)Math.max(Math.abs(g11 - g00),Math.abs(g10 - g01)));      X+=a00;      Y+=a10;    }    indexer+=(w + adjust);  }}  }
class C{  public Version version(){  return version;}  }
class C{  public ImageWarp(int[] pix,int width,int height,GeoCoordTransformation transform,WorldFile worldFile){  if (pix != null) {    iwidth=width;    iheight=height;    setGeoTrans(transform);    setImageBounds(worldFile);    pixels=pix;  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return CURSOR_ID;case 4:return CLOSE;default :return null;}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void write(byte[] buffer){  try {    mmOutStream.write(buffer);  } catch (  Exception e) {    Log.e(TAG,"Exception during write",e);  }}  }
class C{  public boolean hasText(){  return mHasText;}  }
class C{  public static String extractAddrSpec(String address){  Matcher match=NAME_ADDR_EMAIL_PATTERN.matcher(address);  if (match.matches()) {    return match.group(2);  }  return address;}  }
class C{  protected void sequence_ParameterizedTypeRefNominal_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean startDocumentPrint(int type,MPrintFormat customPrintFormat,int Record_ID,ASyncProcess parent,int WindowNo,String printerName){  return (startDocumentPrint(type,customPrintFormat,Record_ID,parent,WindowNo,true,printerName));}  }
class C{  public int port(){  return port;}  }
class C{  public void clearParameters(){  cachedBuildResult=null;  parameters.clear();}  }
class C{  private void assertPivot(String field,Object value,int count,PivotField actual){  assertEquals("FIELD: " + actual.toString(),field,actual.getField());  assertEquals("VALUE: " + actual.toString(),value,actual.getValue());  assertEquals("COUNT: " + actual.toString(),count,actual.getCount());}  }
class C{  public T caseS_Global(S_Global object){  return null;}  }
class C{  public int lengthOfYear(){  return (isLeapYear() ? 366 : 365);}  }
class C{  private void createLinks(Composite parent,FormToolkit toolkit,Map<String,String> commandMap){  for (  Map.Entry<String,String> entry : commandMap.entrySet()) {    Command command=commandService.getCommand(entry.getKey());    if (command.isDefined() && (null != command.getHandler()) && command.getHandler().isEnabled()) {      toolkit.createLabel(parent,"",SWT.NONE).setImage(arrow);      Hyperlink link=toolkit.createHyperlink(parent,entry.getValue(),SWT.WRAP);      link.addHyperlinkListener(new CommandHyperlinkListener(command));      link.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));    }  }}  }
class C{  public static final long bitVectorOfStates(int[][] statuses) throws IllegalArgumentException {  if (statuses.length != NUMBER_OF_PROVERS) {    Activator.getDefault().logDebug("Method ColorPredicate.bitVectorOfStates must be reimplemented" + " when number of provers changes");  }  long result=0;  int[] array=new int[3];  for (int i=0; i < statuses[0].length; i++) {    array[0]=statuses[0][i];    for (int j=0; j < statuses[1].length; j++) {      array[1]=statuses[1][j];      for (int k=0; k < statuses[2].length; k++) {        array[2]=statuses[2][k];        result=result | (1L << numberOfState(array));      }    }  }  return result;}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public String toXML(){  StringBuilder buf=new StringBuilder();  buf.append("<storage xmlns=\"storage:bookmarks\">");  final Iterator<BookmarkedURL> urls=getBookmarkedURLS().iterator();  while (urls.hasNext()) {    BookmarkedURL urlStorage=urls.next();    if (urlStorage.isShared()) {      continue;    }    buf.append("<url name=\"").append(urlStorage.getName()).append("\" url=\"").append(urlStorage.getURL()).append("\"");    if (urlStorage.isRss()) {      buf.append(" rss=\"").append(true).append("\"");    }    buf.append(" />");  }  final Iterator<BookmarkedConference> conferences=getBookmarkedConferences().iterator();  while (conferences.hasNext()) {    BookmarkedConference conference=conferences.next();    if (conference.isShared()) {      continue;    }    buf.append("<conference ");    buf.append("name=\"").append(conference.getName()).append("\" ");    buf.append("autojoin=\"").append(conference.isAutoJoin()).append("\" ");    buf.append("jid=\"").append(conference.getJid()).append("\" ");    buf.append(">");    if (conference.getNickname() != null) {      buf.append("<nick>").append(conference.getNickname()).append("</nick>");    }    if (conference.getPassword() != null) {      buf.append("<password>").append(conference.getPassword()).append("</password>");    }    buf.append("</conference>");  }  buf.append("</storage>");  return buf.toString();}  }
class C{  public RStringVector execute(RAbstractIntVector factor){  Object attr=attrAccess.execute(factor.getAttributes());  RVector<?> vec;  if (nonScalarLevels.profile(attr instanceof RVector)) {    vec=(RVector<?>)attr;  } else   if (attr != null) {    vec=(RVector<?>)RRuntime.asAbstractVector(attr);  } else {    notVectorBranch.enter();    return null;  }  if (stringVectorLevels.profile(vec instanceof RStringVector)) {    return (RStringVector)vec;  } else {    if (castString == null) {      CompilerDirectives.transferToInterpreterAndInvalidate();      castString=insert(CastStringNodeGen.create(false,false,false));    }    RStringVector slevels=(RStringVector)castString.executeString(vec);    return RDataFactory.createStringVector(slevels.getDataWithoutCopying(),RDataFactory.COMPLETE_VECTOR);  }}  }
class C{  public final boolean isStarted(){  return _started;}  }
class C{  public T caseExecutionState(ExecutionState object){  return null;}  }
class C{  public PosterizeEffect(){}  }
class C{  public void drawImage(Graphics2D g,Image image){  mHasImages=true;}  }
class C{  public void close() throws IOException {  if (datagramConnection != null) {    datagramConnection.close();  }  if (logger.isActivated()) {    logger.debug("RTP transmitter closed");  }}  }
class C{  public static void compareFromDifferentFoldersByName(final File sourceFolder,final File targetFolder,final String srcExtension,final String targetExtension,final ResourcePostProcessor processor) throws IOException {  compareFromDifferentFolders(sourceFolder,targetFolder,new WildcardFileFilter("*." + srcExtension),Transformers.extensionTransformer("css"),processor);}  }
class C{  public static int lookupKeyword(String text){  return lookup(text,KEYWORD);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(getFile(stack).length());}  }
class C{  public ColumnVector sqrt(){  return this.transform(null);}  }
class C{  @Override public String toString(){  List<TcpSession> ls=new ArrayList<>(socks);  StringBuilder sb=new StringBuilder("connection total:");  sb.append(socks.size()).append("\r\n");  for (  TcpSession hp : ls) {    sb.append(hp.getRemoteAddress());    sb.append(",createtime:").append(TextUtils.Date2String(new Date(hp.getCreatetime())));    sb.append(",activetime:").append(TextUtils.Date2String(new Date(hp.getActivetime())));    sb.append("\r\n");  }  return sb.toString();}  }
class C{  public static void main(String[] args) throws Exception {  DirectProvider dp=new DirectProvider();  Topology top=dp.newTopology();  TStream<String> helloStream=top.strings("Hello","Edgent!");  helloStream.print();  dp.submit(top);}  }
class C{  public boolean isSelectionVisible(){  return selectionVisible;}  }
class C{  @Nullable private Module moduleBySingleContentRoot(@NotNull VirtualFile file){  if (ProjectRootsUtil.isModuleContentRoot(file,myProject)) {    Module module=ProjectRootManager.getInstance(myProject).getFileIndex().getModuleForFile(file);    if (module != null && !module.isDisposed() && ModuleRootManager.getInstance(module).getContentRoots().length == 1) {      return module;    }  }  return null;}  }
class C{  public boolean isError(){  return error;}  }
class C{  public void fileAdded(String filename) throws Exception {  deploy(filename);}  }
class C{  private boolean yCollission(OdorWorldEntity entityToCheck,float yCheck){  for (  OdorWorldEntity sprite : entityList) {    if (sprite == entityToCheck) {      continue;    }    if ((entityToCheck.getY() > sprite.getY()) && (entityToCheck.getY() < (sprite.getY() + sprite.getHeight()))) {      return true;    }  }  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:57.393 -0500",hash_original_method="8A8EDD1088AB3F7694E04A76DE584752",hash_generated_method="8A6C9CCF0D097FF838DD1FBE220DAD25") synchronized boolean readCertificates(){  if (metaEntries == null) {    return false;  }  Iterator<String> it=metaEntries.keySet().iterator();  while (it.hasNext()) {    String key=it.next();    if (key.endsWith(".DSA") || key.endsWith(".RSA")) {      verifyCertificate(key);      if (metaEntries == null) {        return false;      }      it.remove();    }  }  return true;}  }
class C{  public int length(){  return prevSize;}  }
class C{  private static String maskNull(String spaceName){  return spaceName != null ? spaceName : DFLT_SPACE_NAME;}  }
class C{  public static void notifyNewConversationEvent(Context ctx,String action){  if (sActivityVisible) {    Intent intent=new Intent(ctx,TalkList.class);    intent.setAction(action);    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);    ctx.startActivity(intent);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static Number[] applyFunction(short functorId,Number[] vals){  Number[] res=new Number[1];switch (functorId) {case FUN_SUM:    res[0]=SUM(vals);  return res;case FUN_AVG:res[0]=AVG(vals);return res;case FUN_MIN:res[0]=MIN(vals);return res;case FUN_MAX:res[0]=MAX(vals);return res;default :return null;}}  }
class C{  void start(){  Thread.setDefaultUncaughtExceptionHandler(this);  sendStoredExceptions();}  }
class C{  public static ArrayList<ByteString> byteArraysToStrings(ArrayList<byte[]> byteArrays){  if (byteArrays == null) {    return null;  }  ArrayList<ByteString> byteStrings=new ArrayList<ByteString>();  for (  byte[] bytes : byteArrays) {    byteStrings.add(ByteString.of(bytes));  }  return byteStrings;}  }
class C{  public void testNOT() throws Exception {  BooleanQuery.Builder expected=new BooleanQuery.Builder();  expected.add(new TermQuery(new Term("field","foo")),Occur.MUST_NOT);  expected.add(new MatchAllDocsQuery(),Occur.SHOULD);  assertEquals(expected.build(),parse("-foo"));  assertEquals(expected.build(),parse("-(foo)"));  assertEquals(expected.build(),parse("---foo"));}  }
class C{  @Override public void validate(){  ConfigVerification verification=controller.getConfigErrors();  if (verification != null) {    saveButton.setEnabled(!verification.hasFailed());  } else {    saveButton.setEnabled(false);  }}  }
class C{  public void open(String fileName) throws IOException {  model.setBytes(fileName);}  }
class C{  private static void clearOneAndTwoButtonClicked(ActionEvent e){  datePicker1.clear();  datePicker2.clear();  String message="The datePicker1 and datePicker2 dates were cleared!\n\n";  message+=getDatePickerOneDateText() + "\n";  String date2String=datePicker2.getDateStringOrSuppliedString("(null)");  message+=("The datePicker2 date is currently set to: " + date2String + ".");  panel.messageTextArea.setText(message);}  }
class C{  public String simplifyPath(String path){  if (path == null || path.isEmpty()) {    return "";  }  Deque<String> s=new ArrayDeque<>();  String[] words=path.split("/");  for (  String str : words) {    if (str.length() == 0 || str.equals(".")) {      continue;    }    if (str.equals("..")) {      if (!s.isEmpty()) {        s.pop();      }    } else {      s.push(str);    }  }  StringBuilder res=new StringBuilder();  while (!s.isEmpty()) {    res.append("/").append(s.pollLast());  }  return res.length() == 0 ? "/" : res.toString();}  }
class C{  public HistoryReadResponse clone(){  HistoryReadResponse result=new HistoryReadResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Results != null) {    result.Results=new HistoryReadResult[Results.length];    for (int i=0; i < Results.length; i++)     result.Results[i]=Results[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  @Override public OfferViewHolder newViewHolder(ViewGroup viewGroup){  View view=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.telco_card_layout_view,viewGroup,false);  return new OfferViewHolder(view);}  }
class C{  public void cancelButtonActionPerformed(){  curNode=null;  addButton.setVisible(true);  cancelButton.setVisible(false);  this.dispatchEvent(new WindowEvent(this,WindowEvent.WINDOW_CLOSING));}  }
class C{  public SparseByteArray(){  this(10);}  }
class C{  @Override public void validateConvertUpdateSequence(Session session,Row row){  for (int i=0; i < columns.length; i++) {    Value value=row.getValue(i);    if (value != null) {      Column column=columns[i];      Value v2=column.validateConvertUpdateSequence(session,value);      if (v2 != value) {        row.setValue(i,v2);      }    }  }}  }
class C{  public boolean equals(Object object){  if (this == object)   return true;  if (object instanceof org.eclipse.jdt.internal.core.ClasspathEntry) {    org.eclipse.jdt.internal.core.ClasspathEntry otherEntry=(org.eclipse.jdt.internal.core.ClasspathEntry)object;    if (this.contentKind != otherEntry.getContentKind())     return false;    if (this.entryKind != otherEntry.getEntryKind())     return false;    if (this.isExported != otherEntry.isExported())     return false;    if (!this.path.equals(otherEntry.getPath()))     return false;    IPath otherPath=otherEntry.getSourceAttachmentPath();    if (this.sourceAttachmentPath == null) {      if (otherPath != null)       return false;    } else {      if (!this.sourceAttachmentPath.equals(otherPath))       return false;    }    otherPath=otherEntry.getSourceAttachmentRootPath();    if (this.sourceAttachmentRootPath == null) {      if (otherPath != null)       return false;    } else {      if (!this.sourceAttachmentRootPath.equals(otherPath))       return false;    }    if (!equalPatterns(this.inclusionPatterns,otherEntry.getInclusionPatterns()))     return false;    if (!equalPatterns(this.exclusionPatterns,otherEntry.getExclusionPatterns()))     return false;    AccessRuleSet otherRuleSet=otherEntry.getAccessRuleSet();    if (getAccessRuleSet() != null) {      if (!getAccessRuleSet().equals(otherRuleSet))       return false;    } else     if (otherRuleSet != null)     return false;    if (this.combineAccessRules != otherEntry.combineAccessRules())     return false;    otherPath=otherEntry.getOutputLocation();    if (this.specificOutputLocation == null) {      if (otherPath != null)       return false;    } else {      if (!this.specificOutputLocation.equals(otherPath))       return false;    }    if (!equalAttributes(this.extraAttributes,otherEntry.getExtraAttributes()))     return false;    return true;  } else {    return false;  }}  }
class C{  public PriorityQueue(){  size=0;  items=new ArrayList();  items.add(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.139 -0500",hash_original_method="06E8E6E37E1424A31870FF0EF434E6CA",hash_generated_method="A187188A20C0BEBD74FA62089DD62DE5") public int article(int articleNumber) throws IOException {  return sendCommand(NNTPCommand.ARTICLE,Integer.toString(articleNumber));}  }
class C{  private static String codingLoopNameToCsvPrefix(String className){  List<String> names=splitCamelCase(className);  return names.get(0) + "," + names.get(1)+ ","+ names.get(2)+ ","+ names.get(3)+ ",";}  }
class C{  public AFSDBRecord(Name name,int dclass,long ttl,int subtype,Name host){  super(name,Type.AFSDB,dclass,ttl,subtype,"subtype",host,"host");}  }
class C{  public double computeAverageInfoDistanceOfObservations(){  double infoDistance=0.0;  for (int b=0; b < totalObservations; b++) {    double prob1=mvkeSource.getProbability(sourceObservations[b],b);    double prob2=mvkeDest.getProbability(destObservations[b],b);    double probJoint=mvkeJoint.getProbability(sourceObservations[b],destObservations[b],b);    double logTerm=0.0;    double cont=0.0;    if (probJoint > 0.0) {      logTerm=(prob1 * prob2) / (probJoint * probJoint);      cont=Math.log(logTerm);    }    infoDistance+=cont;    if (debug) {      System.out.println(b + ": " + logTerm+ " -> "+ (cont / Math.log(2.0))+ " -> sum: "+ (infoDistance / Math.log(2.0)));    }  }  return infoDistance / (double)totalObservations / Math.log(2.0);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getBeforeCode_();}  }
class C{  protected StreamAdapter(IgniteDataStreamer<K,V> stmr,StreamSingleTupleExtractor<T,K,V> extractor){  this.stmr=stmr;  this.singleTupleExtractor=extractor;}  }
class C{  public Log truncate(){  return truncate(0);}  }
class C{  public boolean isParseSVNEntries(){  return parseSVNentries;}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  if (DTM.NULL == m_lastFetched) {    resetProximityPositions();  }  int next;  org.apache.xpath.VariableStack vars;  int savedStart;  if (-1 != m_stackFrame) {    vars=m_execContext.getVarStack();    savedStart=vars.getStackFrame();    vars.setStackFrame(m_stackFrame);  } else {    vars=null;    savedStart=0;  }  try {    do {      if (0 == m_extendedTypeID) {        next=m_lastFetched=(DTM.NULL == m_lastFetched) ? m_traverser.first(m_context) : m_traverser.next(m_context,m_lastFetched);      } else {        next=m_lastFetched=(DTM.NULL == m_lastFetched) ? m_traverser.first(m_context,m_extendedTypeID) : m_traverser.next(m_context,m_lastFetched,m_extendedTypeID);      }      if (DTM.NULL != next) {        if (DTMIterator.FILTER_ACCEPT == acceptNode(next))         break; else         continue;      } else       break;    } while (next != DTM.NULL);    if (DTM.NULL != next) {      m_pos++;      return next;    } else {      m_foundLast=true;      return DTM.NULL;    }  }  finally {    if (-1 != m_stackFrame) {      vars.setStackFrame(savedStart);    }  }}  }
class C{  private static DataObjectRestRep findCategoryOrService(CatalogCategoryRestRep root,String... subPaths){  if (subPaths == null) {    return root;  }  DataObjectRestRep result=root;  for (  String path : subPaths) {    if (StringUtils.isBlank(path)) {      continue;    }    if (result instanceof CatalogCategoryRestRep) {      result=getCategoryOrService((CatalogCategoryRestRep)result,path);      if (result == null) {        notFound(Messages.get("CatalogApi.subpathNotFound",path));      }    }  }  return result;}  }
class C{  @Override public boolean hasNext(){  return bitVector[length + 1] != 1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:54.907 -0500",hash_original_method="1D5D0C2F4FF0286B2839C7504C536EE3",hash_generated_method="89BBD29FF9474CF6EE73DC7C02803154") @Override public void onRefresh(boolean fileChanged,int[] fileList){  if (fileChanged) {    fetchRuimRecords();  }}  }
class C{  public static void writeUnsafe(PacketOutputStream out,InputStream is,boolean noBackslashEscapes) throws IOException {  out.writeUnsafe(QUOTE);  byte[] buffer=new byte[1024];  int len;  while ((len=is.read(buffer)) >= 0) {    writeBytesEscapedUnsafe(out,buffer,len,noBackslashEscapes);  }  out.writeUnsafe(QUOTE);}  }
class C{  public Message(Object sender,String id){  this(MessageLevel.DEBUG,sender,id);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.128 -0500",hash_original_method="3FEA70547EDCF31E1AA086D3362AC6CE",hash_generated_method="4B1983FBB805BAAF80775A2DCEAE6D38") public AcceptHeader createAcceptHeader(String contentType,String contentSubType) throws ParseException {  if (contentType == null || contentSubType == null)   throw new NullPointerException("contentType or subtype is null ");  Accept accept=new Accept();  accept.setContentType(contentType);  accept.setContentSubType(contentSubType);  return accept;}  }
class C{  protected Frame<V> newFrame(final Frame<? extends V> src){  return new Frame<V>(src);}  }
class C{  public void removeNull(){  if (hasNull) {    removeItem(SimbrainConstants.NULL_STRING);    setSelectedIndex(getItemCount() - 1);    hasNull=false;  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tUnsets the class index temporarily before the filter is\n" + "\tapplied to the data.\n" + "\t(default: no)","unset-class-temporarily",1,"-unset-class-temporarily"));  return result.elements();}  }
class C{  @Override public CompletableFuture<Optional<T>> reduce(final BinaryOperator<T> accumulator){  return CompletableFuture.supplyAsync(null);}  }
class C{  public Point translate(final Location location,Point position){  double heightCoef=(topLeft.second.getLatitude() - location.getLatitude()) / heightInDegrees();  double widthCoef=(location.getLongitude() - topLeft.second.getLongitude()) / widthInDegrees();  if (position == null) {    position=new Point();  }  position.x=(int)(widthInPixels() * widthCoef + topLeft.first.x);  position.y=(int)(heightInPixels() * heightCoef + topLeft.first.y);  return position;}  }
class C{  protected void parse(String rawdata) throws MimeTypeParseException {  int length=rawdata.length();  if (length > 0) {    int currentIndex=skipWhiteSpace(rawdata,0);    int lastIndex=0;    if (currentIndex < length) {      char currentChar=rawdata.charAt(currentIndex);      while ((currentIndex < length) && (currentChar == ';')) {        String name;        String value;        boolean foundit;        ++currentIndex;        currentIndex=skipWhiteSpace(rawdata,currentIndex);        if (currentIndex < length) {          lastIndex=currentIndex;          currentChar=rawdata.charAt(currentIndex);          while ((currentIndex < length) && isTokenChar(currentChar)) {            ++currentIndex;            currentChar=rawdata.charAt(currentIndex);          }          name=rawdata.substring(lastIndex,currentIndex).toLowerCase();          currentIndex=skipWhiteSpace(rawdata,currentIndex);          if ((currentIndex < length) && (rawdata.charAt(currentIndex) == '=')) {            ++currentIndex;            currentIndex=skipWhiteSpace(rawdata,currentIndex);            if (currentIndex < length) {              currentChar=rawdata.charAt(currentIndex);              if (currentChar == '"') {                ++currentIndex;                lastIndex=currentIndex;                if (currentIndex < length) {                  foundit=false;                  while ((currentIndex < length) && !foundit) {                    currentChar=rawdata.charAt(currentIndex);                    if (currentChar == '\\') {                      currentIndex+=2;                    } else                     if (currentChar == '"') {                      foundit=true;                    } else {                      ++currentIndex;                    }                  }                  if (currentChar == '"') {                    value=unquote(rawdata.substring(lastIndex,currentIndex));                    ++currentIndex;                  } else {                    throw new MimeTypeParseException("Encountered unterminated quoted parameter value.");                  }                } else {                  throw new MimeTypeParseException("Encountered unterminated quoted parameter value.");                }              } else               if (isTokenChar(currentChar)) {                lastIndex=currentIndex;                foundit=false;                while ((currentIndex < length) && !foundit) {                  currentChar=rawdata.charAt(currentIndex);                  if (isTokenChar(currentChar)) {                    ++currentIndex;                  } else {                    foundit=true;                  }                }                value=rawdata.substring(lastIndex,currentIndex);              } else {                throw new MimeTypeParseException("Unexpected character encountered at index " + currentIndex);              }              parameters.put(name,value);            } else {              throw new MimeTypeParseException("Couldn't find a value for parameter named " + name);            }          } else {            throw new MimeTypeParseException("Couldn't find the '=' that separates a parameter name from its value.");          }        } else {          throw new MimeTypeParseException("Couldn't find parameter name");        }        currentIndex=skipWhiteSpace(rawdata,currentIndex);        if (currentIndex < length) {          currentChar=rawdata.charAt(currentIndex);        }      }      if (currentIndex < length) {        throw new MimeTypeParseException("More characters encountered in input than expected.");      }    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  Pair<?,?> other=(Pair<?,?>)obj;  if (lhSide == null) {    if (other.lhSide != null)     return false;  } else   if (!lhSide.equals(other.lhSide))   return false;  if (rhSide == null) {    if (other.rhSide != null)     return false;  } else   if (!rhSide.equals(other.rhSide))   return false;  return true;}  }
class C{  public static double quantile(double z,double M,double S){  return Math.exp(NormalDistribution.quantile(z,M,S));}  }
class C{  public void paintPopupMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void initialize(Properties props,String configID) throws IllegalArgumentException {  checkPropertyKeys(props);  Properties p=new Properties();  p.putAll(props);  convertPassword(p);  if (configID != null) {    this.configs.put(configID,p);  } else {    this.defaultProperties=p;  }}  }
class C{  public synchronized Data findData(Data data){  if (data == null) {    return null;  }  return getEntityManager().find(data.getClass(),data.getId(),properties);}  }
class C{  public static byte[] intsToBytes(final int[] ints){  final byte[] rVal=new byte[ints.length * 4];  for (int i=0; i < ints.length; i++) {    rVal[4 * i]=(byte)(0x000000FF & ints[i]);    rVal[(4 * i) + 1]=(byte)((0x000000FF & (ints[i] >> 8)));    rVal[(4 * i) + 2]=(byte)((0x000000FF & (ints[i] >> 16)));    rVal[(4 * i) + 3]=(byte)((0x000000FF & (ints[i] >> 24)));  }  return rVal;}  }
class C{  private int[] randomize(int[] array,Random generator){  int index;  int temp;  int[] newArray=new int[array.length];  System.arraycopy(array,0,newArray,0,array.length);  for (int j=newArray.length - 1; j > 0; j--) {    index=(int)(generator.nextDouble() * (double)j);    temp=newArray[j];    newArray[j]=newArray[index];    newArray[index]=temp;  }  return newArray;}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public static void exportAttributesAsKML(XMLStreamWriter xmlWriter,String styleType,ShapeAttributes attributes) throws XMLStreamException, IOException {  if (attributes != null) {    xmlWriter.writeStartElement("Pair");    xmlWriter.writeStartElement("key");    xmlWriter.writeCharacters(styleType);    xmlWriter.writeEndElement();    attributes.export(KMLConstants.KML_MIME_TYPE,xmlWriter);    xmlWriter.writeEndElement();  }}  }
class C{  public void reset(){  for (int i=0; i < bgraphs.length; i++) {    bgraphs[i].resetNumberField();  }}  }
class C{  protected void addOperationsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ServiceRef_operations_feature"),getString("_UI_PropertyDescriptor_description","_UI_ServiceRef_operations_feature","_UI_ServiceRef_type"),EipPackage.Literals.SERVICE_REF__OPERATIONS,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void start(int statementId,EPStatementDesc desc,boolean isNewStatement,boolean isRecoveringStatement,boolean isResilient){  if (log.isDebugEnabled()) {    log.debug(".start Starting statement " + statementId + " from desc="+ desc);  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qEngineManagementStmtCompileStart(services.getEngineURI(),statementId,desc.getEpStatement().getName(),desc.getEpStatement().getText(),services.getSchedulingService().getTime());  }  eventProcessingRWLock.acquireWriteLock();  try {    startInternal(statementId,desc,isNewStatement,isRecoveringStatement,isResilient);    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().qaEngineManagementStmtStarted(services.getEngineURI(),statementId,desc.getEpStatement().getName(),desc.getEpStatement().getText(),services.getSchedulingService().getTime());    }    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aEngineManagementStmtCompileStart(true,null);    }  } catch (  RuntimeException ex) {    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aEngineManagementStmtCompileStart(false,ex.getMessage());    }    throw ex;  } finally {    eventProcessingRWLock.releaseWriteLock();  }}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  @Override public void readSettings(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);  serviceSwitch=sharedPreferences.getBoolean(getString(R.string.key_notification),false);  autoRefresh=sharedPreferences.getBoolean(getString(R.string.key_notification_auto_refresh),false);  setLocation(DatabaseHelper.getInstance(this).readLocation().get(0));}  }
class C{  @Around("execution(* org.yes.cart.service.order.impl.OrderStateManagerImpl.fireTransition(..))") public Object performNotifications(final ProceedingJoinPoint pjp) throws Throwable {  final Object[] args=pjp.getArgs();  final OrderEvent orderEvent=(OrderEvent)args[0];  final String adminEmail=orderEvent.getCustomerOrder().getShop().getAttributeValueByCode(AttributeNamesKeys.Shop.SHOP_ADMIN_EMAIL);  try {    Object rez=pjp.proceed();    if ((Boolean)rez) {      final String templateKey=getTemplateKey(orderEvent);      fillNotificationParameters(orderEvent,shopperTemplates.get(templateKey),orderEvent.getCustomerOrder().getEmail());      if (StringUtils.isBlank(adminEmail)) {        LOG.error("Cant get admin email address for shop " + orderEvent.getCustomerOrder().getShop().getCode());      } else {        fillNotificationParameters(orderEvent,adminTemplates.get(templateKey),adminEmail);      }    }    return rez;  } catch (  final OrderItemAllocationException th) {    LOG.error("Cant allocation quantity for product " + th.getProductSkuCode());    if (StringUtils.isBlank(adminEmail)) {      LOG.error("Cant get admin email address for shop " + orderEvent.getCustomerOrder().getShop().getCode());    } else {      final ProductSku sku=productSkuService.getProductSkuBySkuCode(th.getProductSkuCode());      fillNotificationParameters(orderEvent,"adm-cant-allocate-product-qty",new HashMap<String,Object>(){{          put("sku",sku);        }      },adminEmail);    }    throw th;  }catch (  Throwable th) {    throw th;  }}  }
class C{  public static void cancelAnimationWithoutCallbacks(Animator animator){  if (animator != null) {    animator.removeAllListeners();    animator.cancel();  }}  }
class C{  public boolean removeFieldCamera(FieldCamera fieldCamera){  boolean found=false;  String iName=fieldCamera.getName();  for (int i=0; i < layers.length; ++i) {    if (layers[i] instanceof FieldCameraLayer) {      FieldCameraLayer layer=(FieldCameraLayer)layers[i];      if (iName.equals(layer.getLayerName())) {        layer.dispose();        layers[i]=null;        visibleLayers.set(i,new LayerInfo("None","none",i));        layerEffects=new LayerEffects(layers,layerEffects);        layerEffects.setEnabled(true);        found=true;      }    }  }  Iterator<LayerInfo> iterator=availableLayers.iterator();  while (iterator.hasNext()) {    LayerInfo li=iterator.next();    if (li.name.equals(iName) && ((li.type == LayerType.footprint) || (li.type == LayerType.viewshed))) {      iterator.remove();    }  }  if (found) {    SurfaceAndLayersView view=ConfigurationManager.getInstance().getCurrentConfiguration().getSurfaceAndLayersView();    if (view != null) {      view.updateVisibleLayers();    }  }  return (found);}  }
class C{  public boolean accept(List<Node> currentResults,Node node,int index){  return pseudoClass.match(currentResults,node,index);}  }
class C{  private void drawCircle(Canvas canvas,Paint paint,float x,float y){  canvas.drawCircle(x,y,size,paint);}  }
class C{  public Wine runForeground(String executableToRun,List<String> arguments,Map<String,String> environment) throws CancelException {  runForeground(this.prefix.getWinePrefixDirectory(),executableToRun,arguments,environment);  return this;}  }
class C{  @SuppressWarnings("unchecked") private HeapVariable<Object> findOrCreateHeapVariable(Object type){  if (DEBUG) {    System.out.print("findOrCreateHeapVariable " + type);  }  HeapKey<Object> key=new HeapKey<Object>(0,type);  HeapVariable<Object> H=heapVariables.get(key);  if (DEBUG) {    System.out.println("...  found " + H);  }  if (H == null) {    int number=getNextHeapVariableNumber(type);    H=new HeapVariable<Object>(type,number,ir);    heapVariables.put(key,H);    if (DEBUG) {      System.out.println("...  created " + heapVariables.get(key));    }  }  return H;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (generator: ");  result.append(generator);  result.append(", declaredAsync: ");  result.append(declaredAsync);  result.append(')');  return result.toString();}  }
class C{  public VNXeNfsShare findSnapNfsShare(String snapId,String shareName,String softwareVersion){  StringBuilder queryFilter=new StringBuilder(VNXeConstants.NAME_FILTER);  if (!VNXeUtils.isHigherVersion(softwareVersion,VNXeConstants.VNXE_BASE_SOFT_VER)) {    queryFilter.append(shareName);    queryFilter.append(VNXeConstants.AND);    queryFilter.append(VNXeConstants.SNAP_FILTER);    queryFilter.append(snapId);  } else {    queryFilter.append("\"" + shareName + "\"");    queryFilter.append(VNXeConstants.AND);    queryFilter.append(VNXeConstants.SNAP_FILTER_V31);    queryFilter.append("\"" + snapId + "\"");  }  setFilter(queryFilter.toString());  VNXeNfsShare result=null;  List<VNXeNfsShare> shareList=getDataForObjects(VNXeNfsShare.class);  if (shareList != null && !shareList.isEmpty()) {    result=shareList.get(0);    _logger.info("Snapshot : {} NFS share named : {} found",snapId,shareName);  } else {    _logger.info("No snapshot share found using the snapId : {}, nfsShare name: {} ",snapId,shareName);  }  return result;}  }
class C{  public void ands(int size,Register dst,Register x,Register y){  super.ands(size,dst,x,y,ShiftType.LSL,0);}  }
class C{  public static String gensalt(int log_rounds){  return gensalt(log_rounds,new SecureRandom());}  }
class C{  public Path[] indexPaths(Index index){  assert assertEnvIsLocked();  Path[] indexPaths=new Path[nodePaths.length];  for (int i=0; i < nodePaths.length; i++) {    indexPaths[i]=nodePaths[i].indicesPath.resolve(index.name());  }  return indexPaths;}  }
class C{  public void abortTransfer() throws RcsPermissionDeniedException, RcsGenericException {  try {    mTransferInf.abortTransfer();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private ZyGraphNodeBuilder(){}  }
class C{  public void println(){  if (addNewlines) {    try {      out.write("\n");    } catch (    IOException ioe) {      throw new GroovyRuntimeException(ioe);    }  }}  }
class C{  public void disconnectWithoutSettlement(){  wireParser.closeConnection();}  }
class C{  public TupleSerializer(final IKeyBuilderFactory keyBuilderFactory){  super(keyBuilderFactory);}  }
class C{  public void addProcessListener(ProcessListener l){  listenerList.add(l);}  }
class C{  public ContingencyMatrix reweight(ExampleSet exampleSet,Model model,boolean normalize) throws OperatorException {  exampleSet=model.apply(exampleSet);  WeightedPerformanceMeasures wpm=new WeightedPerformanceMeasures(exampleSet);  WeightedPerformanceMeasures.reweightExamples(exampleSet,wpm.getContingencyMatrix(),false);  if (normalize) {    double maxWeight=Double.NEGATIVE_INFINITY;    Iterator<Example> reader=exampleSet.iterator();    while (reader.hasNext()) {      Example e=reader.next();      if (e.getWeight() > maxWeight) {        maxWeight=e.getWeight();      }    }    reader=exampleSet.iterator();    while (reader.hasNext()) {      Example e=reader.next();      e.setValue(e.getAttributes().getWeight(),e.getWeight() / maxWeight);    }  }  PredictionModel.removePredictedLabel(exampleSet);  return wpm.getContingencyMatrix();}  }
class C{  public boolean createJob(String slurmScript,String heronExec,String[] commandArgs,String topologyWorkingDirectory,long containers){  return createJob(slurmScript,heronExec,commandArgs,topologyWorkingDirectory,containers,null);}  }
class C{  public void createNewTab(AsyncTabCreationParams asyncParams,TabLaunchType type,int parentId){  assert asyncParams != null;  assert !(type == TabLaunchType.FROM_LONGPRESS_BACKGROUND && asyncParams.getWebContents() != null);  Context context=ApplicationStatus.getApplicationContext();  Activity parentActivity=ActivityDelegate.getActivityForTabId(parentId);  boolean mayLaunchDocumentActivity=isAllowedToLaunchDocumentActivity(context);  assert mayLaunchDocumentActivity || (asyncParams.getWebContents() == null);  if (FeatureUtilities.isDocumentMode(context) && mayLaunchDocumentActivity) {    AsyncDocumentLauncher.getInstance().enqueueLaunch(mIsIncognito,parentId,asyncParams);  } else {    int assignedTabId=TabIdManager.getInstance().generateValidId(Tab.INVALID_TAB_ID);    AsyncTabCreationParamsManager.add(assignedTabId,asyncParams);    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(asyncParams.getLoadUrlParams().getUrl()));    intent.setClass(context,ChromeLauncherActivity.class);    intent.putExtra(IntentHandler.EXTRA_TAB_ID,assignedTabId);    intent.putExtra(IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB,mIsIncognito);    intent.putExtra(IntentHandler.EXTRA_PARENT_TAB_ID,parentId);    if (parentActivity != null && parentActivity.getIntent() != null) {      intent.putExtra(IntentHandler.EXTRA_PARENT_INTENT,parentActivity.getIntent());    }    if (asyncParams.getRequestId() != null) {      intent.putExtra(ServiceTabLauncher.LAUNCH_REQUEST_ID_EXTRA,asyncParams.getRequestId().intValue());    }    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    IntentHandler.startActivityForTrustedIntent(intent,context);  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(CONSTRUCT)) {    return;  }  Content.registerMetadata(registry);  ElementCreator constructBuilder=registry.build(CONSTRUCT).setValidator(new TextContentValidator());  constructBuilder.addElement(DIV);  ElementCreator builder=registry.build(KEY);  registry.adapt(Content.KEY,KIND,KEY);}  }
class C{  public void load_Figure5_6(Iterator<V> it){  table=(LinkedList<V>[])new LinkedList[tableSize];  while (it.hasNext()) {    V v=it.next();    int h=hashMethod.hash(v);    if (table[h] == null) {      table[h]=new LinkedList<V>();    }    table[h].add(v);    count++;  }}  }
class C{  @Ignore @Test public void testmodifyPlayer() throws Exception {  DBTransaction transaction=TransactionPool.get().beginWork();  try {    MockStendlRPWorld.get();    final String characterName="modifyme";    final PlayerModifier mod=new PlayerModifier();    Player player=mod.loadPlayer(transaction,characterName);    assertThat(player,not(nullValue()));    assertThat(player.getName(),is(characterName));    int adminlevel;    if (player.getAdminLevel() == 100) {      adminlevel=0;    } else {      adminlevel=100;    }    assertThat(player.getAdminLevel(),not(is(adminlevel)));    player.setAdminLevel(adminlevel);    assertThat(mod.savePlayer(transaction,player),is(true));    player=mod.loadPlayer(transaction,characterName);    assertThat(player,not(nullValue()));    assertThat(player.getName(),is(characterName));    assertThat(player.getAdminLevel(),is(adminlevel));    TransactionPool.get().rollback(transaction);  } catch (  Exception e) {    TransactionPool.get().rollback(transaction);    throw e;  }}  }
class C{  public void testRandomHugeStrings() throws Exception {  Analyzer analyzers[]=new Analyzer[]{new WhitespaceAnalyzer(),new SimpleAnalyzer(),new StopAnalyzer(),new UnicodeWhitespaceAnalyzer()};  for (  Analyzer analyzer : analyzers) {    checkRandomData(random(),analyzer,100 * RANDOM_MULTIPLIER,8192);  }  IOUtils.close(analyzers);}  }
class C{  private void removeDataPage(CacheDataPage parentDataPage,CacheDataPage cacheDataPage,Entry oldLastEntry) throws IOException {  DataPageMain dpMain=cacheDataPage._main;  DataPageExtra dpExtra=cacheDataPage._extra;  if (dpMain.hasChildTail()) {    throw new IllegalStateException(withErrorContext("Still has child tail?"));  }  if (dpExtra._totalEntrySize != 0) {    throw new IllegalStateException(withErrorContext("Empty page but size is not 0? " + dpExtra._totalEntrySize + ", "+ cacheDataPage));  }  if (dpMain.isRoot()) {    dpExtra._entryPrefix=EMPTY_PREFIX;    dpMain._leaf=true;    return;  }  updateParentEntry(parentDataPage,cacheDataPage,oldLastEntry,null,UpdateType.REMOVE);  removeFromPeers(cacheDataPage);}  }
class C{  public void disableLookAt(){  mLookAtEnabled=false;}  }
class C{  protected boolean singleUse(){  return true;}  }
class C{  @Override public IType<?> fromFacetType(){  return Types.FILE;}  }
class C{  private int size(Node x){  if (x == null)   return 0;  return x.size;}  }
class C{  private Node sourceNode(Node parent){  Node source=new Node(parent,"source");  @SuppressWarnings("unchecked") BiConsumer<Iterable<String>,Consumer<Map<String,String>>> addRepos=null;  addRepos.accept(repos,Consumers.doNothing());  addRepos.accept(metadataRepos,null);  addRepos.accept(artifactRepos,null);  return source;}  }
class C{  synchronized public long find(final long timestamp){  if (timestamp <= 0L)   throw new IllegalArgumentException();  final long index=findIndexOf(timestamp);  if (index == -1) {    return -1L;  }  return decodeKey(keyAt(index));}  }
class C{  public StandardSemImImpliedCovTable(StandardizedSemIm semIm,boolean measured,boolean correlations){  this.semIm=semIm;  this.measured=measured;  this.correlations=correlations;  this.nf=NumberFormatUtil.getInstance().getNumberFormat();  if (measured() && covariances()) {    matrix=getSemIm().getImplCovarMeas().toArray();  } else   if (measured() && !covariances()) {    matrix=corr(getSemIm().getImplCovarMeas().toArray());  } else   if (!measured() && covariances()) {    TetradMatrix implCovarC=getSemIm().getImplCovar();    matrix=implCovarC.toArray();  } else   if (!measured() && !covariances()) {    TetradMatrix implCovarC=getSemIm().getImplCovar();    matrix=corr(implCovarC.toArray());  }}  }
class C{  private void popLongAsDouble(FPR reg){  asm.emitLFD(reg,spTopOffset + 2 * BYTES_IN_STACKSLOT - BYTES_IN_DOUBLE,FP);  discardSlots(2);}  }
class C{  public int size(){  return annotations.size();}  }
class C{  @Override public boolean remove(Object o){  if (!(o instanceof Struct)) {    return false;  }  Struct s=(Struct)o;  if (!this.structType.equals(StructTypeImpl.typeFromStruct(s))) {    return false;  }  return removeFieldValues(s.getFieldValues());}  }
class C{  protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException, JsonParseException {  ByteArrayBuilder builder=_getByteArrayBuilder();  while (true) {    int ch;    do {      if (_inputPtr >= _inputEnd) {        loadMoreGuaranteed();      }      ch=(int)_inputBuffer[_inputPtr++] & 0xFF;    } while (ch <= INT_SPACE);    int bits=b64variant.decodeBase64Char(ch);    if (bits < 0) {      if (ch == INT_QUOTE) {        return builder.toByteArray();      }      bits=_decodeBase64Escape(b64variant,ch,0);      if (bits < 0) {        continue;      }    }    int decodedData=bits;    if (_inputPtr >= _inputEnd) {      loadMoreGuaranteed();    }    ch=_inputBuffer[_inputPtr++] & 0xFF;    bits=b64variant.decodeBase64Char(ch);    if (bits < 0) {      bits=_decodeBase64Escape(b64variant,ch,1);    }    decodedData=(decodedData << 6) | bits;    if (_inputPtr >= _inputEnd) {      loadMoreGuaranteed();    }    ch=_inputBuffer[_inputPtr++] & 0xFF;    bits=b64variant.decodeBase64Char(ch);    if (bits < 0) {      if (bits != Base64Variant.BASE64_VALUE_PADDING) {        if (ch == '"' && !b64variant.usesPadding()) {          decodedData>>=4;          builder.append(decodedData);          return builder.toByteArray();        }        bits=_decodeBase64Escape(b64variant,ch,2);      }      if (bits == Base64Variant.BASE64_VALUE_PADDING) {        if (_inputPtr >= _inputEnd) {          loadMoreGuaranteed();        }        ch=_inputBuffer[_inputPtr++] & 0xFF;        if (!b64variant.usesPaddingChar(ch)) {          throw reportInvalidBase64Char(b64variant,ch,3,"expected padding character '" + b64variant.getPaddingChar() + "'");        }        decodedData>>=4;        builder.append(decodedData);        continue;      }    }    decodedData=(decodedData << 6) | bits;    if (_inputPtr >= _inputEnd) {      loadMoreGuaranteed();    }    ch=_inputBuffer[_inputPtr++] & 0xFF;    bits=b64variant.decodeBase64Char(ch);    if (bits < 0) {      if (bits != Base64Variant.BASE64_VALUE_PADDING) {        if (ch == '"' && !b64variant.usesPadding()) {          decodedData>>=2;          builder.appendTwoBytes(decodedData);          return builder.toByteArray();        }        bits=_decodeBase64Escape(b64variant,ch,3);      }      if (bits == Base64Variant.BASE64_VALUE_PADDING) {        decodedData>>=2;        builder.appendTwoBytes(decodedData);        continue;      }    }    decodedData=(decodedData << 6) | bits;    builder.appendThreeBytes(decodedData);  }}  }
class C{  private void processAnsiCommand_B(){  moveCursorDown(getAnsiParameter(0));}  }
class C{  public String testAbstractClass_method1(int p1,int p2) throws java.io.IOException, java.lang.NullPointerException {  return null;}  }
class C{  public void addRequestTags(String url,String host,String path,String method,Map<String,? extends Collection<String>> headers){  addRequestTags(url,host,path,method);  addRequestTagsFromHeaders(headers);}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);  }}  }
class C{  @Override public int size(){  return size;}  }
class C{  @SuppressWarnings("unchecked") protected static <T>T enumProperty(String name,Class cls){  return enumProperty(name,cls,null);}  }
class C{  public static int calcHeaderWidth(JTable table,int col){  if (table == null) {    return -1;  }  if (col < 0 || col > table.getColumnCount()) {    System.out.println("invalid col " + col);    return -1;  }  JTableHeader header=table.getTableHeader();  TableCellRenderer defaultHeaderRenderer=null;  if (header != null) {    defaultHeaderRenderer=header.getDefaultRenderer();  }  TableColumnModel columns=table.getColumnModel();  table.getModel();  TableColumn column=columns.getColumn(col);  int width=-1;  TableCellRenderer h=column.getHeaderRenderer();  if (h == null) {    h=defaultHeaderRenderer;  }  if (h != null) {    Component c=h.getTableCellRendererComponent(table,column.getHeaderValue(),false,false,-1,col);    width=c.getPreferredSize().width + 5;  }  return width;}  }
class C{  public static <T1,T2,T3,T4,T5,T6,R>Promise<R> join(Promise<T1> p1,Promise<T2> p2,Promise<T3> p3,Promise<T4> p4,Promise<T5> p5,Promise<T6> p6,final Func6<T1,T2,T3,T4,T5,T6,R> joinFunction){  return new Promise<R>(Observable.zip(p1.observable,p2.observable,p3.observable,p4.observable,p5.observable,p6.observable,joinFunction));}  }
class C{  @Around("execution(* org.yes.cart.service.domain.impl.CustomerServiceImpl.create(..))") public Object doSetPassword(final ProceedingJoinPoint pjp) throws Throwable {  setPassword((Customer)pjp.getArgs()[0]);  return pjp.proceed();}  }
class C{  public SendingSearch(UpnpService upnpService,UpnpHeader searchTarget){  this(upnpService,searchTarget,MXHeader.DEFAULT_VALUE);}  }
class C{  private static void renumProviders(){  Provider[] p=Services.getProviders();  for (int i=0; i < p.length; i++) {    p[i].setProviderNumber(i + 1);  }}  }
class C{  public static void main(String[] args){  System.out.println("\np           2^p-1");  System.out.println("--------------------");  for (int p=2; p <= 31; p++) {    if (PrimeNumberMethod.isPrime(p)) {      System.out.printf("%-13d",p);      System.out.println(mersennePrime(p));    }  }}  }
class C{  public void logException(Throwable e,String message){  logMessage(IStatus.ERROR,message,e);}  }
class C{  public void update(String sqlQuery){  db.rawQuery("UPDATE " + mDefaultTable + sqlQuery,null);}  }
class C{  public ProfilerSection section(String name){  if (!sections.containsKey(name)) {    ProfilerSection sec=new ProfilerSection(name,this);    sections.put(name,sec);    return sec;  }  return sections.get(name);}  }
class C{  public NotificationChain basicSetOwner(Composite newOwner,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newOwner,DomPackage.CONTENT_NODE__OWNER,msgs);  return msgs;}  }
class C{  private static String extractStatementResult(String result){  int pos=-1;  if ((pos=result.indexOf("=")) >= 0) {    return result.substring(pos + 1).trim();  } else {    throw new RuntimeException("No result can be extracted from '" + result + "', "+ "something must be wrong");  }}  }
class C{  public <T,I extends Serializable>Slice<T> findAll(final Pageable pageable,final Class<T> domainClass){  final SimpleJpaNoCountRepository<T,I> noCountDao=new SimpleJpaNoCountRepository<>(domainClass,em);  return noCountDao.findAll(pageable);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void mapTableViewerColumn(Enum<?> key,TableViewerColumn column){  tableViewerColumnMap.put(key,column);}  }
class C{  public void handleUpdateView(ReactShadowNode node,String className,CatalystStylesDiffMap props){  if (!ENABLED) {    mUIViewOperationQueue.enqueueUpdateProperties(node.getReactTag(),className,props);    return;  }  boolean needsToLeaveLayoutOnly=node.isLayoutOnly() && !isLayoutOnlyAndCollapsable(props);  if (needsToLeaveLayoutOnly) {    transitionLayoutOnlyViewToNativeView(node,props);  } else   if (!node.isLayoutOnly()) {    mUIViewOperationQueue.enqueueUpdateProperties(node.getReactTag(),className,props);  }}  }
class C{  @Override protected void onStop(){  if (null != mDownloaderClientStub) {    mDownloaderClientStub.disconnect(this);  }  super.onStop();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.218 -0500",hash_original_method="FF1AA715D5A76F97289F9771795F5B75",hash_generated_method="D13EA8B4571C88CE1520B97A33E45D38") public void arcTo(RectF oval,float startAngle,float sweepAngle,boolean forceMoveTo){  isSimplePath=false;  addTaint(oval.getTaintInt() + startAngle + sweepAngle);  addTaint(forceMoveTo);}  }
class C{  public static IntList copy(IntList other,int startIndex,int length){  return copy(other,startIndex,length,length);}  }
class C{  private void connectToPredictions(ChanceNode outputNode){  String outputVar=outputNode.getId();  String baseVar=outputVar.substring(0,outputVar.length() - 1);  String predictEquiv=baseVar + "^p";  if (hasChanceNode(predictEquiv) && !outputVar.contains("^p")) {    ChanceNode equalityNode=new ChanceNode("=_" + baseVar,new EquivalenceDistribution(baseVar));    equalityNode.addInputNode(outputNode);    equalityNode.addInputNode(getNode(predictEquiv));    addEvidence(new Assignment(equalityNode.getId(),true));    addNode(equalityNode);  }}  }
class C{  public void doDelete(){  try {    int result=JOptionPane.showConfirmDialog(this.getFrame(),"Are you sure you want to delete all Trade Orders?","Warning",JOptionPane.YES_NO_OPTION);    if (result == JOptionPane.YES_OPTION) {      deleteTradeOrders(m_tradingdays);    }  } catch (  Exception ex) {    this.setErrorMessage("Error deleting TradeOrders.",ex.getMessage(),ex);  }}  }
class C{  public void printStat(JCTree tree) throws IOException {  printExpr(tree,TreeInfo.notExpression);}  }
class C{  protected static Test suite(Test t,Vector<String> missing){  if (missing.size() > 0) {    Collections.sort(missing);    System.out.println("Missing Test classes:");    for (int i=0; i < missing.size(); i++) {      System.out.println("- " + missing.get(i));    }    System.out.println();  }  return t;}  }
class C{  public void defaultMutate(EvolutionState state,int thread){  IntegerVectorSpecies s=(IntegerVectorSpecies)species;  for (int x=0; x < genome.length; x++)   if (state.random[thread].nextBoolean(s.mutationProbability(x))) {    long old=genome[x];    for (int retries=0; retries < s.duplicateRetries(x) + 1; retries++) {switch (s.mutationType(x)) {case IntegerVectorSpecies.C_RESET_MUTATION:        genome[x]=randomValueFromClosedInterval((long)s.minGene(x),(long)s.maxGene(x),state.random[thread]);      break;case IntegerVectorSpecies.C_RANDOM_WALK_MUTATION:    long min=(long)s.minGene(x);  long max=(long)s.maxGene(x);if (!s.mutationIsBounded(x)) {  max=Long.MAX_VALUE;  min=Long.MIN_VALUE;}do {long n=(state.random[thread].nextBoolean() ? 1L : -1L);long g=genome[x];if ((n == 1L && g < max) || (n == -1L && g > min)) genome[x]=g + n; else if ((n == -1L && g < max) || (n == 1L && g > min)) genome[x]=g - n;} while (state.random[thread].nextBoolean(s.randomWalkProbability(x)));break;default :state.output.fatal("In LongVectorIndividual.defaultMutate, default case occurred when it shouldn't have");break;}if (genome[x] != old) break;}}}  }
class C{  public void bind(Class type,Class transform){  types.cache(type,transform);}  }
class C{  public boolean configureSpliceTo(SampleQueue nextQueue){  if (spliceOutTimeUs != Long.MIN_VALUE) {    return true;  }  long firstPossibleSpliceTime;  if (rollingBuffer.peekSample(sampleInfoHolder)) {    firstPossibleSpliceTime=sampleInfoHolder.timeUs;  } else {    firstPossibleSpliceTime=lastReadTimeUs + 1;  }  RollingSampleBuffer nextRollingBuffer=nextQueue.rollingBuffer;  while (nextRollingBuffer.peekSample(sampleInfoHolder) && (sampleInfoHolder.timeUs < firstPossibleSpliceTime || (sampleInfoHolder.flags & C.SAMPLE_FLAG_SYNC) == 0)) {    nextRollingBuffer.skipSample();  }  if (nextRollingBuffer.peekSample(sampleInfoHolder)) {    spliceOutTimeUs=sampleInfoHolder.timeUs;    return true;  }  return false;}  }
class C{  protected int[] runSelectedConversion(ImageProxy img,Rect crop,int subsample){switch (mThumbnailShape) {case DEBUG_SQUARE_ASPECT_CIRCULAR_INSET:    return dummyColorInscribedDataCircleFromYuvImage(img,subsample);case SQUARE_ASPECT_CIRCULAR_INSET:  return colorInscribedDataCircleFromYuvImage(img,crop,subsample);case SQUARE_ASPECT_NO_INSET:return colorSubSampleFromYuvImage(img,crop,subsample,true);case MAINTAIN_ASPECT_NO_INSET:return colorSubSampleFromYuvImage(img,crop,subsample,false);default :return null;}}  }
class C{  static String fileNameOfClass(final String className,String typeSuffix){  return className.replace('.','/') + "." + typeSuffix;}  }
class C{  public long addAndGet(long l){  return atomicSeq.addAndGet(l);}  }
class C{  private int size(){  if (isLeaf())   return points.size(); else   return children.size();}  }
class C{  public static boolean containsString(final String fileName,final String searchString) throws IOException {  File inFile=new File(fileName);  if (inFile.exists()) {    BufferedReader in=new BufferedReader(new FileReader(inFile));    try {      return containsString(in,searchString);    }  finally {      if (in != null)       in.close();    }  } else {    return false;  }}  }
class C{  public static Date parseDate(String dateValue,Collection dateFormats) throws DateParseException {  return parseDate(dateValue,dateFormats,null);}  }
class C{  @SuppressWarnings("unchecked") public static <T>Function<T,Integer> zero(){  return (Function<T,Integer>)ZERO;}  }
class C{  public boolean equals(java.lang.Object obj){  return false;}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  public static <T>T selectRandomItem(Set<T> items){  checkNotNull(items,"Cannot selectRandomItem from null items");  checkArgument(!items.isEmpty(),"Cannot selectRandomItem from empty items");  randomGenerator.setSeed(System.currentTimeMillis());  int selectedServerIndex=randomGenerator.nextInt(items.size());  T item=null;  Iterator<T> itemsIterator=items.iterator();  for (int i=0; i <= selectedServerIndex && itemsIterator.hasNext(); i++) {    item=itemsIterator.next();  }  return item;}  }
class C{  public static boolean isFileTransferOverHttp(SipRequest request){  CpimMessage message=extractCpimMessage(request);  if (message == null) {    return false;  }  String contentType=message.getContentType();  return contentType != null && contentType.startsWith(FileTransferHttpInfoDocument.MIME_TYPE);}  }
class C{  public IgniteIllegalStateException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public SQLRecoverableException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public T onkeydown(String value){  return attr("onkeydown",value);}  }
class C{  @SuppressWarnings("unchecked") public <T>TopGroups<T> search(IndexSearcher searcher,Query query,int groupOffset,int groupLimit) throws IOException {  if (groupField != null || groupFunction != null) {    return groupByFieldOrFunction(searcher,query,groupOffset,groupLimit);  } else   if (groupEndDocs != null) {    return (TopGroups<T>)groupByDocBlock(searcher,query,groupOffset,groupLimit);  } else {    throw new IllegalStateException("Either groupField, groupFunction or groupEndDocs must be set.");  }}  }
class C{  public void stop(){  mRunning=false;  mStop=true;}  }
class C{  public static boolean clear(String name){  SharedPreferences.Editor editor=getSharedPreferences(name).edit();  editor.clear();  return editor.commit();}  }
class C{  public LabeledPath(ScreenAnnotation annotation){  this.setAnnotation(annotation);}  }
class C{  private boolean replace(TestChromosome test,int statement){  logger.debug("Replacing call");  TestFactory factory=TestFactory.getInstance();  Statement theStatement=test.getTestCase().getStatement(statement);  VariableReference var=theStatement.getReturnValue();  int oldLength=test.size();  try {    VariableReference replacement=null;    if (Randomness.nextDouble() < Properties.NULL_PROBABILITY) {      NullStatement nullStatement=new NullStatement(test.getTestCase(),var.getType());      replacement=test.getTestCase().addStatement(nullStatement,statement);    } else     if (!var.isPrimitive()) {      replacement=factory.createObject(test.getTestCase(),var.getType(),statement,0,null);    }    if (replacement != null) {      int oldStatement=statement + (test.size() - oldLength);      for (int i=oldStatement + 1; i < test.size(); i++) {        test.getTestCase().getStatement(i).replace(var,replacement);      }      factory.deleteStatement(test.getTestCase(),oldStatement);      test.setChanged(true);    }  } catch (  ConstructionFailedException e) {    if (test.size() < oldLength) {      restore(test);    }    test.setChanged(test.size() != oldLength);  }  return false;}  }
class C{  public static void clearInputProcessor(){  Gdx.input.setInputProcessor(null);}  }
class C{  @Override public MessageConsumer createSharedConsumer(Topic topic,String name,String messageSelector) throws JMSException {  if (sessionType == ActiveMQSession.TYPE_QUEUE_SESSION) {    throw new IllegalStateException("Cannot create a shared consumer on a QueueSession");  }  checkTopic(topic);  ActiveMQTopic localTopic;  if (topic instanceof ActiveMQTopic) {    localTopic=(ActiveMQTopic)topic;  } else {    localTopic=new ActiveMQTopic(topic.getTopicName());  }  return internalCreateSharedConsumer(localTopic,name,messageSelector,ConsumerDurability.NON_DURABLE);}  }
class C{  public RangeCategorySeries(String title){  super(title);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public static boolean isLocalOrAnonymous(String className){  int i=className.lastIndexOf('$');  if (i >= 0 && i + 1 < className.length()) {    return Character.isDigit(className.charAt(i + 1));  }  return false;}  }
class C{  public String xmlToCsv(UpdateInventoryInput input){  return input.getSupplierId() + "," + input.getPartId()+ ","+ input.getName()+ ","+ input.getAmount();}  }
class C{  public static Class<?> wrapper(Class<?> type){  if (type == null) {    return null;  } else   if (type.isPrimitive()) {    if (boolean.class == type) {      return Boolean.class;    } else     if (int.class == type) {      return Integer.class;    } else     if (long.class == type) {      return Long.class;    } else     if (short.class == type) {      return Short.class;    } else     if (byte.class == type) {      return Byte.class;    } else     if (double.class == type) {      return Double.class;    } else     if (float.class == type) {      return Float.class;    } else     if (char.class == type) {      return Character.class;    } else     if (void.class == type) {      return Void.class;    }  }  return type;}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(HelloAnalyticsApiSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/?api=analytics " + "into analytics-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,Collections.singleton(AnalyticsScopes.ANALYTICS_READONLY)).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  @SuppressWarnings("unchecked") public void mouseDragged(MouseEvent e){  VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();  Point2D out=e.getPoint();  if (e.getModifiers() == additionalModifiers) {    rectangularShape.setFrameFromDiagonal(down,out);  } else   if (e.getModifiers() == modifiers) {    rectangularShape.setFrameFromDiagonal(down,out);  }  rectangularShape.setFrameFromDiagonal(down,out);  vv.repaint();}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  PositionableCircle ps=new PositionableCircle(ed);  Element elem=element.getChild("size");  ps.setRadius(getInt(elem,"radius"));  Editor editor=(Editor)o;  editor.putItem(ps);  loadCommonAttributes(ps,Editor.MARKERS,element);}  }
class C{  public final void testContainsSymbol(){  assertNotNull(Constraints.containsSymbol());}  }
class C{  @Override public String validate(ILaunchConfiguration launchConfig,IJavaProject javaProject,List<String> programArgs,List<String> vmArgs) throws CoreException {  return null;}  }
class C{  private static int determineIconIdByMimeTypeList(List<String> mimetypes){  if (mimetypes == null || mimetypes.size() < 1) {    return R.drawable.file;  } else {    for (    String mimetype : mimetypes) {      Integer iconId=MIMETYPE_TO_ICON_MAPPING.get(mimetype);      if (iconId != null) {        return iconId;      }    }    for (    String mimetype : mimetypes) {      String mainMimetypePart=mimetype.split("/")[0];      Integer iconId=MAINMIMETYPE_TO_ICON_MAPPING.get(mainMimetypePart);      if (iconId != null) {        return iconId;      }    }  }  return R.drawable.file;}  }
class C{  public Bundler(){  this(null);}  }
class C{  protected MouseListener createMouseListener(){  return new MouseAdapter(){  };}  }
class C{  public void resetAxisMaxValue(){  mCustomAxisMax=Float.NaN;}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) public static boolean isWatchdogEnabled(Context context){  final int SETTING_UNKNOWN=-1;  final int SETTING_ENABLED=1;  final String AVOID_POOR="wifi_watchdog_poor_network_test_enabled";  final String WATCHDOG_CLASS="android.net.wifi.WifiWatchdogStateMachine";  final String DEFAULT_ENABLED="DEFAULT_POOR_NETWORK_AVOIDANCE_ENABLED";  final ContentResolver contentResolver=context.getContentResolver();  int result;switch (SDK_INT) {case JELLY_BEAN_MR1:    result=Settings.Global.getInt(contentResolver,AVOID_POOR,SETTING_UNKNOWN);  break;case ICE_CREAM_SANDWICH_MR1:result=Settings.Secure.getInt(contentResolver,AVOID_POOR,SETTING_UNKNOWN);break;default :return false;}if (result != SETTING_UNKNOWN) {return (result == SETTING_ENABLED);}if (SDK_INT >= JELLY_BEAN_MR1) {try {Class wifiWatchdog=Class.forName(WATCHDOG_CLASS);Field defValue=wifiWatchdog.getField(DEFAULT_ENABLED);if (!defValue.isAccessible()) {defValue.setAccessible(true);}return defValue.getBoolean(null);} catch (IllegalAccessException ex) {return false;}catch (NoSuchFieldException ex) {return false;}catch (ClassNotFoundException ex) {return false;}catch (IllegalArgumentException ex) {return false;}} else {return true;}}  }
class C{  public void addCalendar(String calName,Calendar calendar,boolean replace,boolean updateTriggers) throws SchedulerException {  sched.addCalendar(calName,calendar,replace,updateTriggers);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Set<String> acronymsNNP(Collection<WordToken> words){  final StringBuilder upperCaseNNP=new StringBuilder();  final StringBuilder upperAndLowerCaseNNP=new StringBuilder();  Set<String> acronyms=new HashSet<>();  words.stream().filter(null).map(null).forEach(null);  if (upperCaseNNP.length() > 2) {    acronyms.add(upperCaseNNP.toString());  } else   if (upperCaseNNP.length() > 2 && upperAndLowerCaseNNP.length() != upperCaseNNP.length()) {    acronyms.add(upperAndLowerCaseNNP.toString().toUpperCase());  }  return acronyms;}  }
class C{  public Hashtable determinePoliticalAreas(OMGraphicList graphicList,Hashtable poli_areas){  String name=null;  String key=null;  if (graphicList != null) {    int size=graphicList.size();    for (int i=0; i < size; i++) {      OMGraphic graphic=graphicList.getOMGraphicAt(i);      Object obj=graphic.getAttribute(ShapeConstants.SHAPE_DBF_INFO_ATTRIBUTE);      if (obj == null) {        if (Debug.debugging("areas")) {          Debug.error("AreaHandler: No attributes for graphic #" + i);        }        continue;      }      if (obj instanceof Vector) {        Vector pair=(Vector)obj;        name=(String)pair.elementAt(nameIndex);        key=((String)pair.elementAt(keyIndex)).toUpperCase().intern();        if (Debug.debugging("areas")) {          Debug.output("AreaHandler: looking at " + name + ", "+ key);        }      } else       if (obj instanceof String) {        key=(String)obj;        if (Debug.debugging("areas")) {          Debug.output("AreaHandler: String app object, looking at " + key);        }      } else {        if (Debug.debugging("areas")) {          Debug.output("AreaHandler: Unidentified app object type " + obj);        }      }      PoliticalArea area=(PoliticalArea)poli_areas.get(key);      if (area == null) {        area=new PoliticalArea(name,key);        poli_areas.put(key,area);      }      area.addGraphic(graphic);    }    if (Debug.debugging("areas")) {      Debug.output("AreaHandler: Finished determinePoliticalAreas: " + poli_areas.size() + " areas defined.");    }  }  return poli_areas;}  }
class C{  public static VirtualArray verifyVirtualArrayForRequest(Project project,URI varrayURI,UriInfo uriInfo,PermissionsHelper permissionsHelper,DbClient dbClient){  VirtualArray neighborhood=dbClient.queryObject(VirtualArray.class,varrayURI);  ArgValidator.checkEntity(neighborhood,varrayURI,isIdEmbeddedInURL(varrayURI,uriInfo));  permissionsHelper.checkTenantHasAccessToVirtualArray(project.getTenantOrg().getURI(),neighborhood);  return neighborhood;}  }
class C{  public final CertPathBuilderResult build(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException {  return spiImpl.engineBuild(params);}  }
class C{  public ResultVO validate(BaseParam param,OperationType operationType) throws Exception {  Field[] fields=param.getClass().getDeclaredFields();  for (  Field field : fields) {    if (field == null || !field.isAnnotationPresent(NotNullField.class)) {      continue;    }    field.setAccessible(true);    if (ArrayUtils.contains(field.getAnnotation(NotNullField.class).value(),operationType) && field.get(param) == null) {      return resultHelper.infoResp(ErrorType.SYS0002,String.format(ControllerConstant.PARAM_BLANK,field.getName()));    }  }  return null;}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragDropEnd(dsde);  }  getDragSource().processDragDropEnd(dsde);}  }
class C{  public static boolean isEqual(String c,String a){  if (c.length() != a.length())   return false;  for (int i=0; i < c.length(); i++) {    if (c.charAt(i) != a.charAt(i))     return false;  }  return true;}  }
class C{  public String useMissingTipText(){  return "Flag to set if missing values are used.";}  }
class C{  public static boolean isInsatalled(Context context,String packageName){  if (!StringUtils.isEmpty(packageName)) {    List<PackageInfo> list=getInsatalledPackageInfos(context);    if (!CollectionUtils.isEmpty(list)) {      for (      PackageInfo pi : list) {        if (packageName.equalsIgnoreCase(pi.packageName)) {          return true;        }      }    }  }  return false;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public DataPanel(Instances data){  this();  m_Filename="";  setInstances(data);}  }
class C{  public ContentValues(int size){  mValues=new HashMap<String,Object>(size,1.0f);}  }
class C{  @Override public void dragDropEnd(DragSourceDropEvent dsde){  DragSourceContext dsc=dsde.getDragSourceContext();  JComponent c=(JComponent)dsc.getComponent();  DefaultDrawingViewTransferHandler th=(DefaultDrawingViewTransferHandler)c.getTransferHandler();  if (dsde.getDropSuccess()) {    th.exportDone(c,dsc.getTransferable(),dsde.getDropAction());  } else {    th.exportDone(c,dsc.getTransferable(),NONE);  }  c.setAutoscrolls(scrolls);}  }
class C{  public boolean isDirty(){  return dirty;}  }
class C{  public byte remove(int offset){  byte old=get(offset);  remove(offset,1);  return old;}  }
class C{  @Override public synchronized void configure() throws ReplicatorException, InterruptedException {  super.configure();}  }
class C{  public float noise(float x){  return noise(x,0f,0f);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="JLM_JSR166_UTILCONCURRENT_MONITORENTER",justification="findbugs complains about this synchronize. It could be changed to a sync on a dedicated Object instance to make findbugs happy. see comments below") private void prepareThreadStoreList(){synchronized (threadStoreList) {    ThreadStorage ts=this.threadStoreQ.poll();    if (ts == null)     return;    ArrayList<ThreadStorage> tmp=new ArrayList<ThreadStorage>(64);    do {      tmp.add(ts);      ts=this.threadStoreQ.poll();    } while (ts != null);    if (tmp.size() > 0) {      this.threadStoreList.addAll(tmp);    }  }}  }
class C{  public static synchronized void deleteLog(){  if (sLogStream != null) {    sLogStream.removeLog();    setLogStream();  }}  }
class C{  public Builder withDataPart(String key,String value){  if (data == null) {    data=new HashMap<>();  }  data.put(key,value);  return this;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public AddUserToGroupScriptCommand(Configuration configuration,String resourcePath,User user,String groupRole){  super(configuration,resourcePath);  this.user=user;  this.groupRole=groupRole;}  }
class C{  @After public void tearDown() throws Exception {  TradestrategyTest.clearDBData();}  }
class C{  public void notifyLocalWatch(TableKraken table,byte[] key){  WatchTable watchTable=_tableMap.get(table);  if (watchTable != null) {    watchTable.onPut(key,TableListener.TypePut.LOCAL);  }}  }
class C{  public ArrayDeque<E> clone(){  try {    @SuppressWarnings("unchecked") ArrayDeque<E> result=(ArrayDeque<E>)super.clone();    result.elements=Arrays.copyOf(elements,elements.length);    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  protected AbstractElementNS(){}  }
class C{  private void addReverse(final File[] files){  for (int i=files.length - 1; i >= 0; --i) {    stack.add(files[i]);  }}  }
class C{  private void instrumentModelClasses(){  long start=Calendar.getInstance().getTime().getTime();  if (_lazyLoadedFields.isEmpty()) {    return;  }  CtClass instrumentedClass=null;  try {    ClassPool pool=ClassPool.getDefault();    CtClass modelClass=pool.get(_clazz.getCanonicalName());    String instrumentedClassName=_clazz.getPackage().getName() + ".vipr-dbmodel$$" + _clazz.getSimpleName();    instrumentedClass=pool.getAndRename(LazyLoadedDataObject.class.getName(),instrumentedClassName);    if (instrumentedClass != null) {      instrumentedClass.setSuperclass(modelClass);    }  } catch (  CannotCompileException e) {    _log.error(String.format("Compile error instrumenting data model class %s",_clazz.getCanonicalName()));    _log.error(e.getMessage(),e);    throw DatabaseException.fatals.serializationFailedClass(_clazz,e);  }catch (  NotFoundException e) {    _log.error(String.format("Javassist could not find data model class %s",_clazz.getCanonicalName()));    _log.error(e.getMessage(),e);    throw DatabaseException.fatals.serializationFailedClass(_clazz,e);  }  long totalClassTime=Calendar.getInstance().getTime().getTime() - start;  long startFieldTime=Calendar.getInstance().getTime().getTime();  for (  ColumnField field : _lazyLoadedFields) {    PropertyDescriptor pd=field.getPropertyDescriptor();    String fieldName=field.getName();    try {      CtClass modelClass=ClassPool.getDefault().get(pd.getReadMethod().getDeclaringClass().getCanonicalName());      String quotedFieldName="\"" + fieldName + "\"";      if (DataObject.class.isAssignableFrom(pd.getPropertyType())) {        CtMethod readMethod=modelClass.getDeclaredMethod(pd.getReadMethod().getName());        CtMethod instReadMethod=CtNewMethod.delegator(readMethod,instrumentedClass);        String before=String.format("load(%s, this);",quotedFieldName);        _log.debug(String.format("creating new method %s for instrumented class %s: %s",instReadMethod.getName(),instrumentedClass.getName(),before));        instReadMethod.insertBefore(before);        instrumentedClass.addMethod(instReadMethod);        String mappedByFieldName=field.getMappedByField();        ColumnField mappedByField=getColumnField(mappedByFieldName);        if (mappedByField != null) {          CtMethod mappedByWriteMethod=modelClass.getDeclaredMethod(mappedByField.getPropertyDescriptor().getWriteMethod().getName());          CtMethod instMappedByWriteMethod=CtNewMethod.delegator(mappedByWriteMethod,instrumentedClass);          String mappedByCode=String.format("invalidate(%s);",quotedFieldName);          _log.debug(String.format("creating new method %s for instrumented class %s: %s",instMappedByWriteMethod.getName(),instrumentedClass.getName(),mappedByCode));          instMappedByWriteMethod.insertAfter(mappedByCode);          instrumentedClass.addMethod(instMappedByWriteMethod);        }      }      CtMethod writeMethod=modelClass.getDeclaredMethod(pd.getWriteMethod().getName());      CtMethod instWriteMethod=CtNewMethod.delegator(writeMethod,instrumentedClass);      String writeMethodDef=String.format("refreshMappedByField(%s, this);",quotedFieldName);      _log.debug(String.format("creating new method %s for instrumented class %s: %s",instWriteMethod.getName(),instrumentedClass.getName(),writeMethodDef));      instWriteMethod.insertAfter(writeMethodDef);      instrumentedClass.addMethod(instWriteMethod);    } catch (    CannotCompileException e) {      _log.error(String.format("Compile error instrumenting data model class %s",_clazz.getCanonicalName()));      _log.error(e.getMessage(),e);      throw DatabaseException.fatals.serializationFailedClass(_clazz,e);    }catch (    NotFoundException e) {      _log.error(String.format("Field %s in data model class %s must have both a write method and a read method",fieldName,_clazz.getCanonicalName()));      _log.error(e.getMessage(),e);      throw DatabaseException.fatals.serializationFailedClass(_clazz,e);    }  }  long totalFieldTime=Calendar.getInstance().getTime().getTime() - startFieldTime;  start=Calendar.getInstance().getTime().getTime();  if (instrumentedClass != null) {    try {      _instrumentedClazz=instrumentedClass.toClass();      instrumentedClass.detach();    } catch (    CannotCompileException e) {      _log.error(e.getMessage(),e);    }  }  totalClassTime+=Calendar.getInstance().getTime().getTime() - start;  _log.info(String.format("Class instrumentation for %s: total time: %d; class time: %d; field time: %d; avg per field: %f",_clazz.getName(),totalClassTime + totalFieldTime,totalClassTime,totalFieldTime,(float)totalFieldTime / (float)_lazyLoadedFields.size()));}  }
class C{  public void removeImageView(CubeImageView imageView){  if (null == imageView || null == mFirstImageViewHolder) {    return;  }  ImageViewHolder holder=mFirstImageViewHolder;  do {    if (holder.contains(imageView)) {      if (holder == mFirstImageViewHolder) {        mFirstImageViewHolder=holder.mNext;      }      if (null != holder.mNext) {        holder.mNext.mPrev=holder.mPrev;      }      if (null != holder.mPrev) {        holder.mPrev.mNext=holder.mNext;      }    }  } while ((holder=holder.mNext) != null);}  }
class C{  protected void init(long outfilePartitionMillis,String destSubTopicPathFormat,Locale locale,DateTimeZone outputTimeZone){  this.outfilePartitionMillis=outfilePartitionMillis;  this.outputDirFormatter=DateUtils.getDateTimeFormatter(destSubTopicPathFormat,outputTimeZone).withLocale(locale);}  }
class C{  public RepositoryConfig(String id,RepositoryImplConfig implConfig){  this(id);  setRepositoryImplConfig(implConfig);}  }
class C{  public static void println(){  out.println();}  }
class C{  public void dequeueOneToOneFileTransfer(String fileTransferId,ContactId contact,MmContent file,MmContent fileIcon){  long timestamp=System.currentTimeMillis();  long timestampSent=timestamp;  FileTransferProtocol ftProtocol=getFileTransferProtocolForOneToOneFileTransfer(contact);  if (ftProtocol == null) {    throw new ServerApiGenericException("No valid file transfer protocol could be determined for dequeueing file with fileTransferId '" + fileTransferId + "'!");  }  FileSharingSession session=mImService.createFileTransferSession(fileTransferId,contact,file,fileIcon,timestamp,ftProtocol);  OneToOneFileTransferImpl oneToOneFileTransfer=getOrCreateOneToOneFileTransfer(fileTransferId);  session.addListener(oneToOneFileTransfer);  setOneToOneFileTransferStateAndTimestamp(fileTransferId,contact,State.INITIATING,timestamp,timestampSent);  session.startSession();}  }
class C{  @Override public void updateBigDecimal(int columnIndex,BigDecimal x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBigDecimal(" + columnIndex + ", "+ quoteBigDecimal(x)+ ");");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueDecimal.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void pointerReleased(final int[] x,final int[] y){  longPointerCharged=false;  if (impl.getCurrentForm() == null) {    return;  }  if (x.length == 1) {    addPointerEvent(POINTER_RELEASED,x[0],y[0]);  } else {    addPointerEvent(POINTER_RELEASED_MULTI,x,y);  }}  }
class C{  default void addSuperClass(char[] buffer,int offset,int length){}  }
class C{  public static CreativeTabs tabMekanism(CreativeTabs preferred){  try {    if (Mekanism == null) {      Mekanism=Class.forName("mekanism.common.Mekanism");    }    Object ret=Mekanism.getField("tabMekanism").get(null);    if (ret instanceof CreativeTabs) {      return (CreativeTabs)ret;    }    return preferred;  } catch (  Exception e) {    System.err.println("Error retrieving Mekanism creative tab.");    return preferred;  }}  }
class C{  private void closeDatabase(){  if (mDatabase == null)   return;  mDatabase.close();}  }
class C{  protected int AdditiveExpr(int addPos) throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if (-1 == addPos)   addPos=opPos;  MultiplicativeExpr(-1);  if (null != m_token) {    if (tokenIs('+')) {      nextToken();      insertOp(addPos,2,OpCodes.OP_PLUS);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=AdditiveExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs('-')) {      nextToken();      insertOp(addPos,2,OpCodes.OP_MINUS);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=AdditiveExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    }  }  return addPos;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.537 -0500",hash_original_method="69829FBE15E20ADBF8C45DA9DA2D1745",hash_generated_method="6825C0FB6336688E464A7DD79DC4298D") public void replyToMessage(Message srcMsg,int what,int arg1,int arg2,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  msg.obj=obj;  replyToMessage(srcMsg,msg);}  }
class C{  public void scheduleAtFixedRate(TimerTask task,Date when,long period){  if (period <= 0 || when.getTime() < 0) {    throw new IllegalArgumentException();  }  long delay=when.getTime() - System.currentTimeMillis();  scheduleImpl(task,delay,period,true);}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.424 -0500",hash_original_method="79D16814F7AC00D5B324C095EC421557",hash_generated_method="E5447840A038CF6FF4B838DA64F9014B") public void put(String key,byte[] value){  mValues.put(key,value);}  }
class C{  public E put(int key,E value){  if (value == null) {    throw new NullPointerException();  }  final E prev;  if (key < array.length) {    prev=(E)array[key];  } else {    array=Arrays.copyOf(array,key * 3 / 2 + 1);    prev=null;    size++;  }  array[key]=value;  return prev;}  }
class C{  private void prepareAtomic(String key) throws Exception {  for (int i=0; i < INIT_GRID_NUM; i++)   assert startGrid(i) != null;  for (int i=0; i < INIT_GRID_NUM; i++)   assert PARTITIONED == grid(i).cache(null).getConfiguration(CacheConfiguration.class).getCacheMode();  grid(0).atomicLong(key,0,true).getAndSet(INIT_GRID_NUM);  assertEquals(INIT_GRID_NUM,grid(0).atomicLong(key,0,true).get());  stopGrid(0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected String formatBoolean(boolean b){  return b ? new String(new byte[]{1}) : "";}  }
class C{  public void testBeanPropertyApplication() throws Exception {  SampleContainingObject sco=new SampleContainingObject();  sco.setMyString("aString");  SampleObject so1=new SampleObject();  so1.setString("so1");  so1.setMyLong(1);  sco.setMyObject1(so1);  TungstenProperties tp=new TungstenProperties();  tp.setBeanSupportEnabled(true);  tp.extractProperties(sco,true);  SampleContainingObject sco2=new SampleContainingObject();  tp.applyProperties(sco2);  Assert.assertEquals("aString",sco2.getMyString());  Assert.assertNotNull("Bean is instantiated",sco2.getMyObject1());  Assert.assertNull("Bean is not instantiated",sco2.getMyObject2());  Assert.assertEquals("Compare heirarchy",sco,sco2);}  }
class C{  public Response releaseIP(String networkInterface,String macAddress){  Response response=new Response();  try {    String ipAddress=findIP(macAddress);    String command=String.format("%s %s %s %s %s",releaseIPPath,dhcpReleaseUtilityPath,networkInterface,ipAddress,macAddress);    Process p=Runtime.getRuntime().exec(command);    int exitVal=p.waitFor();    if (exitVal != 0) {      response.exitCode=exitVal;      String s;      BufferedReader stdError=new BufferedReader(new InputStreamReader(p.getErrorStream()));      while ((s=stdError.readLine()) != null) {        response.stdError+=s;      }    }  } catch (  Exception e) {    response.exitCode=-1;    response.stdError=e.toString();  } finally {    return response;  }}  }
class C{  private Object readResolve(){  return getPriorityForName(m_name);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public final double perBag(int bagIndex){  return m_perBag[bagIndex];}  }
class C{  private AlarmEvent activation(AlarmPoint alarm){  AlarmStatus status=alarm.currentStatus();  if ((status.name(null).equals(AlarmPoint.STATUS_NORMAL)) || (status.name(null).equals(AlarmPoint.STATUS_DEACTIVATED))) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_ACTIVATED);    return createEvent(alarm.identity().get(),status,newStatus,AlarmPoint.EVENT_ACTIVATION);  }  return null;}  }
class C{  public Segment(int marker) throws IOException {  this.marker=marker;  if (marker != 0) {    out.writeShort(marker);    offset=getStreamPosition();    if (!standaloneMarkers.contains(marker)) {      out.writeShort(0);    }  }}  }
class C{  private static void insertCommentsInNode(Node node,List<Comment> commentsToAttribute){  if (commentsToAttribute.size() == 0)   return;  List<Node> children=node.getChildrenNodes();  PositionUtils.sortByBeginPosition(children);  for (  Node child : children) {    List<Comment> commentsInsideChild=new LinkedList<Comment>();    for (    Comment c : commentsToAttribute) {      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {        commentsInsideChild.add(c);      }    }    commentsToAttribute.removeAll(commentsInsideChild);    insertCommentsInNode(child,commentsInsideChild);  }  List<Comment> attributedComments=new LinkedList<Comment>();  for (  Comment comment : commentsToAttribute) {    if (comment.isLineComment()) {      for (      Node child : children) {        if (child.getEndLine() == comment.getBeginLine()) {          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {            attributedComments.add(comment);          }        }      }    }  }  Comment previousComment=null;  attributedComments=new LinkedList<Comment>();  List<Node> childrenAndComments=new LinkedList<Node>();  childrenAndComments.addAll(children);  childrenAndComments.addAll(commentsToAttribute);  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);  for (  Node thing : childrenAndComments) {    if (thing instanceof Comment) {      previousComment=(Comment)thing;      if (!previousComment.isOrphan()) {        previousComment=null;      }    } else {      if (previousComment != null && !thing.hasComment()) {        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {          thing.setComment(previousComment);          attributedComments.add(previousComment);          previousComment=null;        }      }    }  }  commentsToAttribute.removeAll(attributedComments);  for (  Comment c : commentsToAttribute) {    if (c.isOrphan()) {      node.addOrphanComment(c);    }  }}  }
class C{  public int addOrderTerm(String termTypeId,BigDecimal termValue,Long termDays){  return addOrderTerm(termTypeId,termValue,termDays,null);}  }
class C{  protected void scanMethods(ClassFile cf){  List<?> methods=cf.getMethods();  if (methods == null) {    return;  }  for (  Object obj : methods) {    MethodInfo method=(MethodInfo)obj;    if (scanMethodAnnotations) {      AnnotationsAttribute visible=(AnnotationsAttribute)method.getAttribute(AnnotationsAttribute.visibleTag);      AnnotationsAttribute invisible=(AnnotationsAttribute)method.getAttribute(AnnotationsAttribute.invisibleTag);      if (visible != null) {        populate(visible.getAnnotations(),cf.getName());      }      if (invisible != null) {        populate(invisible.getAnnotations(),cf.getName());      }    }    if (scanParameterAnnotations) {      ParameterAnnotationsAttribute paramsVisible=(ParameterAnnotationsAttribute)method.getAttribute(ParameterAnnotationsAttribute.visibleTag);      ParameterAnnotationsAttribute paramsInvisible=(ParameterAnnotationsAttribute)method.getAttribute(ParameterAnnotationsAttribute.invisibleTag);      if (paramsVisible != null && paramsVisible.getAnnotations() != null) {        for (        Annotation[] anns : paramsVisible.getAnnotations()) {          populate(anns,cf.getName());        }      }      if (paramsInvisible != null && paramsInvisible.getAnnotations() != null) {        for (        Annotation[] anns : paramsInvisible.getAnnotations()) {          populate(anns,cf.getName());        }      }    }  }}  }
class C{  public Fountain(){  super();}  }
class C{  public static Settings init(String tag){  return printer.init(tag);}  }
class C{  protected void systemsMenu(JMenuBar menuBar,WindowInterface wi){  ActiveSystemsMenu.addItems(menuBar);}  }
class C{  public void considerRegionXRegion(GeoRegion r,GeoRegion region){  GeoArray rBoundary=r.getPoints();  Geo rPoint=rBoundary.get(0,new Geo());  GeoArray regionBoundary=region.getPoints();  Geo regionPoint=regionBoundary.get(0,new Geo());  if (Intersection.isPointInPolygon(rPoint,regionBoundary) || Intersection.isPointInPolygon(regionPoint,rBoundary)) {    collector.collect(r,region);  } else {    for (GeoPath.SegmentIterator pit=r.segmentIterator(); pit.hasNext(); ) {      GeoSegment seg=pit.nextSegment();      if (filter.preConsider(seg,region) && considerSegmentXRegion(seg,region)) {        collector.collect(seg,region);        return;      }    }  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static int selectPivotIndex(Object ar[],int left,int right,Comparator comparator){  int midIndex=(left + right) / 2;  int lowIndex=left;  if (comparator.compare(ar[lowIndex],ar[midIndex]) >= 0) {    lowIndex=midIndex;    midIndex=left;  }  if (comparator.compare(ar[right],ar[lowIndex]) <= 0) {    return lowIndex;  } else   if (comparator.compare(ar[right],ar[midIndex]) <= 0) {    return right;  }  return midIndex;}  }
class C{  protected CDFTsr(CDFTsr parent,int dataOffset,int dataStride,int transformOffset,int m){  c=parent.c;  c3=parent.c3;  s=parent.s;  s3=parent.s3;  this.m=m;  N=1 << m;  N8=N / 8;  N4=N / 4;  this.xoffset=dataOffset;  this.xstride=dataStride;  this.Xoffset=transformOffset;  f=c.length / N8;  reflect=2 * c.length;  if (m > 6) {    dft1=new CDFTsr(this,dataOffset,dataStride * 2,transformOffset,m - 1);    dft2=new CDFTsr(this,dataOffset + dataStride,dataStride * 4,transformOffset + N / 2,m - 2);    dft3=new CDFTsr(this,dataOffset + 3 * dataStride,dataStride * 4,transformOffset + 3 * N / 4,m - 2);  } else   if (m == 6) {    dft1=new CDFTsr(this,dataOffset,dataStride * 2,transformOffset,5);    dft2=new CDFTsr16(dataOffset + dataStride,dataStride * 4,transformOffset + N / 2);    dft3=new CDFTsr16(dataOffset + 3 * dataStride,dataStride * 4,transformOffset + 3 * N / 4);  } else   if (m == 5) {    dft1=new CDFTsr16(dataOffset,dataStride * 2,transformOffset);    dft2=new CDFTsr8(dataOffset + dataStride,dataStride * 4,transformOffset + N / 2);    dft3=new CDFTsr8(dataOffset + 3 * dataStride,dataStride * 4,transformOffset + 3 * N / 4);  }}  }
class C{  @NotNull public LineWrapPositionStrategy forEditor(@NotNull Editor editor){  LineWrapPositionStrategy result=getDefaultImplementation();  Project project=editor.getProject();  if (project != null && !project.isDisposed()) {    PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());    if (psiFile != null) {      result=INSTANCE.forLanguage(psiFile.getLanguage());    }  }  return result;}  }
class C{  public Instances pruneToK(Instances neighbours,double[] distances,int k){  if (neighbours == null || distances == null || neighbours.numInstances() == 0) {    return null;  }  if (k < 1) {    k=1;  }  int currentK=0;  double currentDist;  for (int i=0; i < neighbours.numInstances(); i++) {    currentK++;    currentDist=distances[i];    if (currentK > k && currentDist != distances[i - 1]) {      currentK--;      neighbours=new Instances(neighbours,0,currentK);      break;    }  }  return neighbours;}  }
class C{  @Override public void addParameter(String type,Map<String,Object> processVariables,String uuidElement,Map<String,String> emailParameter) throws MissingParameterException {  CnATreeElement element=getRemindService().retrieveElement(uuidElement,RetrieveInfo.getPropertyInstance());  if (element == null) {    throw new MissingParameterException("Obejct was not found, UUID is: " + uuidElement);  }  String title=element.getTitle();  String taskTitle=getTaskService().loadTaskTitle(type,processVariables);  String taskDescription=getTaskService().loadTaskDescription(type,processVariables);  String taskTitleHtml=taskTitle;  if (isHtml()) {    title=replaceSpecialChars(title);    taskTitleHtml=replaceSpecialChars(taskTitle);    taskDescription=replaceSpecialChars(taskDescription);  }  emailParameter.put(TEMPLATE_TASK_DESCRIPTION,taskDescription);  emailParameter.put(TEMPLATE_ELEMENT_TITLE,title);  emailParameter.put(TEMPLATE_TASK_TITLE,taskTitleHtml);  emailParameter.put(IRemindService.TEMPLATE_SUBJECT,Messages.getString("IndividualDeadlineAdminEmailHandler.1",taskTitle));  String assignee=(String)processVariables.get(IGenericProcess.VAR_ASSIGNEE_NAME);  Map<String,String> assigneeData=getRemindService().loadUserData(assignee);  emailParameter.put(TEMPLATE_ASSIGNEE_ADDRESS,assigneeData.get(IRemindService.TEMPLATE_ADDRESS));  emailParameter.put(TEMPLATE_ASSIGNEE_NAME,assigneeData.get(IRemindService.TEMPLATE_NAME));}  }
class C{  private static int readTypeid(final BufferedReader in) throws IOException {  final String line=in.readLine();  return Integer.parseInt(line.substring(line.lastIndexOf(' ') + 1));}  }
class C{  @Override protected void initData(){}  }
class C{  public void addFilePart(String fieldName,File uploadFile,String fileType) throws IOException {  log.debug("add file field: " + fieldName + "; file: "+ uploadFile+ "; type: "+ fileType);  String fileName=uploadFile.getName();  writer.append("--" + boundary).append(LINE_FEED);  writer.append("Content-Disposition: form-data; name=\"" + fieldName + "\"; filename=\""+ fileName+ "\"").append(LINE_FEED);  writer.append("Content-Type: " + fileType).append(LINE_FEED);  writer.append("Content-Transfer-Encoding: binary").append(LINE_FEED);  writer.append(LINE_FEED);  writer.flush();  FileInputStream inStream=new FileInputStream(uploadFile);  try {    byte[] buffer=new byte[4096];    @SuppressWarnings("UnusedAssignment") int bytesRead=-1;    while ((bytesRead=inStream.read(buffer)) != -1) {      outStream.write(buffer,0,bytesRead);    }    outStream.flush();  }  finally {    inStream.close();  }  writer.append(LINE_FEED);  writer.flush();}  }
class C{  private void replace(String name){  String value=filter.replace(name);  if (value == null) {    text.append("${");    text.append(name);    text.append("}");  } else {    text.append(value);  }}  }
class C{  public static boolean isEarlierTransaction(MCostDetail cd,int C_AcctSchema_ID,int M_CostType_ID,int M_CostElement_ID,String costingLevel){  MTransaction trx=new MTransaction(cd.getCtx(),cd.getM_Transaction_ID(),cd.get_TrxName());  MCostDetail last_cd=getLastTransaction(trx,C_AcctSchema_ID,M_CostType_ID,M_CostElement_ID,costingLevel);  if (last_cd == null)   return false;  if (cd.getSeqNo() <= last_cd.getSeqNo() && cd.getM_Transaction_ID() != last_cd.getM_Transaction_ID()) {    return true;  }  return false;}  }
class C{  public boolean hasSymbol(){  return hasExtension(Symbol.class);}  }
class C{  public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  factorySpi.engineInit(spec);}  }
class C{  public void forceShow(){  forceShow(DEFAULT_WELCOME_SCREEN_REQUEST);}  }
class C{  public AList(){}  }
class C{  public void java_lang_Thread_currentThread(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getThreadObject());}  }
class C{  public void testAttached() throws Throwable {  final ViewAttachTestActivity activity=getActivity();  for (int i=0; i < 20; i++) {    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);    SystemClock.sleep(250);    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);    SystemClock.sleep(250);  }}  }
class C{  public void writeParameter(String id,int dimension,double value,double lower,double upper,XMLWriter writer){  ArrayList<Attribute.Default> attributes=new ArrayList<Attribute.Default>();  if (id != null && id.length() > 0) {    attributes.add(new Attribute.Default<String>(XMLParser.ID,id));  }  if (dimension > 1) {    attributes.add(new Attribute.Default<String>(ParameterParser.DIMENSION,dimension + ""));  }  if (!Double.isNaN(value)) {    attributes.add(new Attribute.Default<String>(ParameterParser.VALUE,multiDimensionValue(dimension,value)));  }  if (!Double.isNaN(lower)) {    attributes.add(new Attribute.Default<String>(ParameterParser.LOWER,multiDimensionValue(dimension,lower)));  }  if (!Double.isNaN(upper)) {    attributes.add(new Attribute.Default<String>(ParameterParser.UPPER,multiDimensionValue(dimension,upper)));  }  Attribute[] attrArray=new Attribute[attributes.size()];  for (int i=0; i < attrArray.length; i++) {    attrArray[i]=attributes.get(i);  }  writer.writeTag(ParameterParser.PARAMETER,attrArray,true);}  }
class C{  public static long floorDiv(final long x,final long y){  long r=x / y;  if ((x ^ y) < 0 && r * y != x) {    r--;  }  return r;}  }
class C{  public static double MCSCE3fitness(boolean useTrainingData,GEPIndividual ind,double parameters[]){  double bestValueThreshold=parameters[0];  double secondBestValueThreshold;  if (parameters.length < 2)   secondBestValueThreshold=bestValueThreshold; else   secondBestValueThreshold=parameters[1];  double MCSCE=MCSCE3rawFitness(useTrainingData,ind,bestValueThreshold,secondBestValueThreshold);  return (1000.0 * (1.0 - MCSCE));}  }
class C{  public void check(){  if (sLogger.isActivated()) {    sLogger.debug("Check presence service");  }  if (!mWatcherInfoSubscriber.isSubscribed()) {    if (sLogger.isActivated()) {      sLogger.debug("Subscribe manager not yet started for watcher-info");    }    if (mWatcherInfoSubscriber.subscribe()) {      if (sLogger.isActivated()) {        sLogger.debug("Subscribe manager is started with success for watcher-info");      }    } else {      if (sLogger.isActivated()) {        sLogger.debug("Subscribe manager can't be started for watcher-info");      }    }  }  if (!mPresenceSubscriber.isSubscribed()) {    if (sLogger.isActivated()) {      sLogger.debug("Subscribe manager not yet started for presence");    }    if (mPresenceSubscriber.subscribe()) {      if (sLogger.isActivated()) {        sLogger.debug("Subscribe manager is started with success for presence");      }    } else {      if (sLogger.isActivated()) {        sLogger.debug("Subscribe manager can't be started for presence");      }    }  }}  }
class C{  @Override public void onDestroy(){  if (ctlr != null) {    ctlr.destroy();  }  super.onDestroy();}  }
class C{  public Shape createScrollCap(int x,int y,int w,int h){  path.reset();  path.moveTo(x,y);  path.lineTo(x,y + h);  path.lineTo(x + w,y + h);  addScrollGapPath(x,y,w,h,true);  path.closePath();  return path;}  }
class C{  public void resetCropOverlayView(){  if (initializedCropWindow) {    initCropWindow(mBitmapRect);    invalidate();  }}  }
class C{  public final boolean hasDataScheme(String scheme){  return mDataSchemes != null && mDataSchemes.contains(scheme);}  }
class C{  private void send(String message) throws WebSocketException {  if (getReadyState() != ReadyState.OPEN) {    messages2send.add(message);    return;  }  try {    ws.send(message);  } catch (  JavaScriptException e) {    throw new WebSocketException(e.getMessage(),e);  }}  }
class C{  public void onItemPinned(int position){  final DialogFragment dialog=ItemPinnedMessageDialogFragment.newInstance(position);  getSupportFragmentManager().beginTransaction().add(dialog,FRAGMENT_TAG_ITEM_PINNED_DIALOG).commit();}  }
class C{  public void addAll(Collection<? extends T> collection){  int pos;synchronized (mLock) {    pos=getItemCount();    mObjects.addAll(collection);  }  if (mNotifyOnChange)   notifyItemRangeInserted(pos,collection.size());}  }
class C{  private void updatePaths(){synchronized (chartData) {    for (    ChartValueSeries chartValueSeries : series) {      chartValueSeries.getPath().reset();    }    drawPaths();    closePaths();  }}  }
class C{  private void buildDialog(){  buildShell();  buildImage();  buildDescription();  buildLogin();  buildPassword();  if (this.displayRememberPassword) {    buildRememberPassword();  }  buildButtons();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void sendFunctionGroup5(){  int data=0x00 | (f28 ? 0x80 : 0) | (f27 ? 0x40 : 0)| (f26 ? 0x20 : 0)| (f25 ? 0x10 : 0)| (f24 ? 0x08 : 0)| (f23 ? 0x04 : 0)| (f22 ? 0x02 : 0)| (f21 ? 0x01 : 0);  MrcMessage m=MrcMessage.getSendFunction(6,addressLo,addressHi,data);  if (m != null) {    tc.sendMrcMessage(m);  }}  }
class C{  public boolean isOptional(){  return false;}  }
class C{  static private String SHORT_Max(){  short tempValue=Short.MAX_VALUE;  return String.valueOf(tempValue);}  }
class C{  public static Instances PSTransformation(Instances D,int L,String cname,int p,int n){  D=new Instances(D);  HashMap<LabelSet,Integer> distinctCombinations=PSUtils.countCombinationsSparse(D,L);  if (p > 0)   MLUtils.pruneCountHashMap(distinctCombinations,p);  if (distinctCombinations.size() <= 1 && p > 0) {    System.err.println("[Warning] You did too much pruning, setting P = P-1");    return PSTransformation(D,L,cname,p - 1,n);  }  ArrayList<String> ClassValues=new ArrayList<String>();  for (  LabelSet y : distinctCombinations.keySet())   ClassValues.add(y.toString());  Attribute C=new Attribute(cname,ClassValues);  D.insertAttributeAt(C,L);  D.setClassIndex(L);  int N=D.numInstances();  for (int i=0; i < N; i++) {    Instance x=D.instance(i);    LabelSet y=new LabelSet(MLUtils.toSparseIntArray(x,L));    String y_string=y.toString();    if (ClassValues.contains(y_string))     x.setClassValue(y_string); else     if (n > 0) {      LabelSet d_subsets[]=PSUtils.getTopNSubsets(y,distinctCombinations,n);      if (d_subsets.length > 0) {        x.setClassValue(d_subsets[0].toString());        if (d_subsets.length > 1) {          for (int s_i=1; s_i < d_subsets.length; s_i++) {            Instance x_=(Instance)(x).copy();            x_.setClassValue(d_subsets[s_i].toString());            D.add(x_);          }        }      } else {        x.setClassMissing();      }    }  }  D.deleteWithMissingClass();  try {    D=F.removeLabels(D,L);  } catch (  Exception e) {  }  D.setClassIndex(0);  return D;}  }
class C{  public static void isValidBaseParam(Parameter param,VOPricedParameter voPricedParam) throws ValidationException {  ParameterDefinition parameterDefinition=param.getParameterDefinition();  if (parameterDefinition == null || parameterDefinition.getValueType() == ParameterValueType.STRING) {    ValidationException ve=new ValidationException(ReasonEnum.PRICED_PARAM_WRONG_BASE,null,new Object[]{voPricedParam});    logger.logWarn(Log4jLogger.SYSTEM_LOG,ve,LogMessageIdentifier.WARN_VALIDATION_EXCEPTION_PRICED_PARAM_WRONG_BASE);    throw ve;  }}  }
class C{  private void nextToken(int start){  fToken=fScanner.previousToken(start - 1,JavaHeuristicScanner.UNBOUND);  fPreviousPos=start;  fPosition=fScanner.getPosition() + 1;  try {    fLine=fDocument.getLineOfOffset(fPosition);  } catch (  BadLocationException e) {    fLine=-1;  }}  }
class C{  public MoveStep(MovePath path,MoveStepType type,TreeMap<Integer,Vector<Integer>> targets){  this(path,type);  launched=targets;  if ((type == MoveStepType.UNLOAD) || (type == MoveStepType.LAUNCH) || (type == MoveStepType.DROP)|| (type == MoveStepType.UNDOCK)) {    hasEverUnloaded=true;  } else {    hasEverUnloaded=false;  }}  }
class C{  public void clear(){  resourceCache.clear();  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.log(Level.FINE,"Cache Cleared");  }}  }
class C{  public EmptyStackException(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.045 -0500",hash_original_method="5E53006C9FF9FBE366053539294E0761",hash_generated_method="12D474F4EE7FD734B7A6F0F15AC87567") public TestFailure(Test failedTest,Throwable thrownException){  fFailedTest=failedTest;  fThrownException=thrownException;}  }
class C{  public int nodeCount(){  return nodes == null ? 0 : nodes.size();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.DOUBLE_LITERAL;}  }
class C{  public void addTo(EncodedStringValue value){  mPduHeaders.appendEncodedStringValue(value,PduHeaders.TO);}  }
class C{  @SideEffectFree public void entering(@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable Object param1){  throw new RuntimeException();}  }
class C{  public ImportDeclarationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static CertPath genCertPath(int howMany,int startID){  Certificate[] certs=new Certificate[howMany];  for (int i=0; i < howMany; i++) {    certs[i]=new TestCertificate(Integer.toString(startID + i));  }  return new TestCertPath(certs);}  }
class C{  public ActivationGroupDesc(String className,String location,MarshalledObject<?> data,Properties overrides,CommandEnvironment cmd){  this.props=overrides;  this.env=cmd;  this.data=data;  this.location=location;  this.className=className;}  }
class C{  public static void main(String[] args) throws Throwable {  HasExpiringCertTest test=new HasExpiringCertTest();  test.start();}  }
class C{  private void emitDocComment(DocComment comment){  if (!comment.isExcluded()) {    int type=comment.getType();    if (type == DocComment.PACKAGE)     emitPackage(comment); else     if (type == DocComment.CLASS || type == DocComment.INTERFACE)     emitClass(comment); else     if (type >= DocComment.FUNCTION && type <= DocComment.FUNCTION_SET)     emitFunction(comment); else     if (type == DocComment.FIELD)     emitField(comment);  }}  }
class C{  public boolean hasAccepts(){  return super.hasElement(Accept.KEY);}  }
class C{  public void process(DistributionMessage msg){  process(msg,true);}  }
class C{  protected void updateClearButtonAction(){  clearButton.setEnabled(!textField.getText().equals(""));}  }
class C{  public String debugDump(){  stringRepresentation="";  Class<?> myclass=getClass();  sprint(myclass.getName());  sprint("{");  Field[] fields=myclass.getDeclaredFields();  for (int i=0; i < fields.length; i++) {    Field f=fields[i];    int modifier=f.getModifiers();    if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)     continue;    Class<?> fieldType=f.getType();    String fieldName=f.getName();    if (fieldName.compareTo("stringRepresentation") == 0) {      continue;    }    if (fieldName.compareTo("indentation") == 0) {      continue;    }    sprint(fieldName + ":");    try {      if (fieldType.isPrimitive()) {        String fname=fieldType.toString();        sprint(fname + ":");        if (fname.compareTo("int") == 0) {          int intfield=f.getInt(this);          sprint(intfield);        } else         if (fname.compareTo("short") == 0) {          short shortField=f.getShort(this);          sprint(shortField);        } else         if (fname.compareTo("char") == 0) {          char charField=f.getChar(this);          sprint(charField);        } else         if (fname.compareTo("long") == 0) {          long longField=f.getLong(this);          sprint(longField);        } else         if (fname.compareTo("boolean") == 0) {          boolean booleanField=f.getBoolean(this);          sprint(booleanField);        } else         if (fname.compareTo("double") == 0) {          double doubleField=f.getDouble(this);          sprint(doubleField);        } else         if (fname.compareTo("float") == 0) {          float floatField=f.getFloat(this);          sprint(floatField);        }      } else       if (GenericObject.class.isAssignableFrom(fieldType)) {        if (f.get(this) != null) {          sprint(((GenericObject)f.get(this)).debugDump(indentation + 1));        } else {          sprint("<null>");        }      } else       if (GenericObjectList.class.isAssignableFrom(fieldType)) {        if (f.get(this) != null) {          sprint(((GenericObjectList)f.get(this)).debugDump(indentation + 1));        } else {          sprint("<null>");        }      } else {        if (f.get(this) != null) {          sprint(f.get(this).getClass().getName() + ":");        } else {          sprint(fieldType.getName() + ":");        }        sprint("{");        if (f.get(this) != null) {          sprint(f.get(this).toString());        } else {          sprint("<null>");        }        sprint("}");      }    } catch (    IllegalAccessException ex1) {      continue;    }  }  sprint("}");  return stringRepresentation;}  }
class C{  public PTQuery_GroupBy Count() throws PTQueryException {  PTQuery_GroupBy copy=new PTQuery_GroupBy(this);  copy.aggregate.add(new AggVar(null,Agg.COUNT));  return copy;}  }
class C{  protected void announceSeedsFromReader(BufferedReader reader){  String s;  Iterator<String> iter=new RegexLineIterator(new LineReadingIterator(reader),RegexLineIterator.COMMENT_LINE,RegexLineIterator.NONWHITESPACE_ENTRY_TRAILING_COMMENT,RegexLineIterator.ENTRY);  while (iter.hasNext()) {    s=iter.next();    if (Character.isLetterOrDigit(s.charAt(0))) {      seedLine(s);    } else {      nonseedLine(s);    }  }  publishConcludedSeedBatch();}  }
class C{  private static boolean isStackTraceLikelyConflictive(Throwable throwable,Class<? extends Activity> activityClass){  do {    StackTraceElement[] stackTrace=throwable.getStackTrace();    for (    StackTraceElement element : stackTrace) {      if ((element.getClassName().equals("android.app.ActivityThread") && element.getMethodName().equals("handleBindApplication")) || element.getClassName().equals(activityClass.getName())) {        return true;      }    }  } while ((throwable=throwable.getCause()) != null);  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.981 -0400",hash_original_method="28C4BDB6A5F83B4A2D726F32ED4863B2",hash_generated_method="E32BFE1A45F547A449DD6FA2E38BCE1D") public void checkAndNotify(){  for (  FileAlterationListener listener : listeners) {    listener.onStart(this);  }  File rootFile=rootEntry.getFile();  if (rootFile.exists()) {    checkAndNotify(rootEntry,rootEntry.getChildren(),listFiles(rootFile));  } else   if (rootEntry.isExists()) {    checkAndNotify(rootEntry,rootEntry.getChildren(),FileUtils.EMPTY_FILE_ARRAY);  } else {  }  for (  FileAlterationListener listener : listeners) {    listener.onStop(this);  }}  }
class C{  public static void assertUtilityClassWellDefined(final Class<?> classObject) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {  assertTrue("class must be final",Modifier.isFinal(classObject.getModifiers()));  assertEquals("There must be only one constructor",1,classObject.getDeclaredConstructors().length);  final Constructor<?> constructor=classObject.getDeclaredConstructor();  if (constructor.isAccessible() || !Modifier.isPrivate(constructor.getModifiers())) {    fail("constructor is not private");  }  constructor.setAccessible(true);  constructor.newInstance();  constructor.setAccessible(false);  for (  final Method method : classObject.getMethods()) {    if (!Modifier.isStatic(method.getModifiers()) && method.getDeclaringClass().equals(classObject)) {      fail("there exists a non-static method:" + method);    }  }}  }
class C{  public static void textRight(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(s);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)(xs - ws),(float)(ys + hs));  draw();}  }
class C{  public static String checkProtectedView(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  String viewNameId=RequestHandler.getRequestUri(request.getPathInfo());  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  Delegator delegator=(Delegator)request.getAttribute("delegator");  String returnValue="success";  if (userLogin != null) {    String userLoginId=userLogin.getString("userLoginId");    try {      List<GenericValue> protectedViews=EntityQuery.use(delegator).from("UserLoginAndProtectedView").where("userLoginId",userLoginId,"viewNameId",viewNameId).cache(true).queryList();      if (UtilValidate.isNotEmpty(protectedViews)) {        Long now=System.currentTimeMillis();        List<GenericValue> tarpittedLoginViews=EntityQuery.use(delegator).from("TarpittedLoginView").where("userLoginId",userLoginId,"viewNameId",viewNameId).cache(true).queryList();        String viewNameUserLoginId=viewNameId + userLoginId;        if (UtilValidate.isNotEmpty(tarpittedLoginViews)) {          GenericValue tarpittedLoginView=tarpittedLoginViews.get(0);          Long tarpitReleaseDateTime=(Long)tarpittedLoginView.get("tarpitReleaseDateTime");          if (now < tarpitReleaseDateTime) {            String tarpittedMessage=UtilProperties.getMessage(resourceWebapp,"protectedviewevents.tarpitted_message",UtilHttp.getLocale(request));            hitsByViewAccessed.put(viewNameUserLoginId,new Long(0));            return ":_protect_:" + tarpittedMessage;          }        }        GenericValue protectedView=protectedViews.get(0);        Long curMaxHits=hitsByViewAccessed.get(viewNameUserLoginId);        if (UtilValidate.isEmpty(curMaxHits)) {          hitsByViewAccessed.put(viewNameUserLoginId,one);          Long maxHitsDuration=(Long)protectedView.get("maxHitsDuration") * 1000;          durationByViewAccessed.put(viewNameUserLoginId,now + maxHitsDuration);        } else {          Long maxDuration=durationByViewAccessed.get(viewNameUserLoginId);          Long newMaxHits=curMaxHits + one;          hitsByViewAccessed.put(viewNameUserLoginId,newMaxHits);          if (now < maxDuration) {            if (newMaxHits > protectedView.getLong("maxHits")) {              String blockedMessage=UtilProperties.getMessage(resourceWebapp,"protectedviewevents.blocked_message",UtilHttp.getLocale(request));              returnValue=":_protect_:" + blockedMessage;              Long tarpitDuration=(Long)protectedView.get("tarpitDuration") * 1000;              GenericValue tarpittedLoginView=delegator.makeValue("TarpittedLoginView");              tarpittedLoginView.set("userLoginId",userLoginId);              tarpittedLoginView.set("viewNameId",viewNameId);              tarpittedLoginView.set("tarpitReleaseDateTime",now + tarpitDuration);              try {                delegator.createOrStore(tarpittedLoginView);              } catch (              GenericEntityException e) {                Debug.logError(e,"Could not save TarpittedLoginView:",module);              }            }          } else {            hitsByViewAccessed.put(viewNameUserLoginId,one);            Long maxHitsDuration=(Long)protectedView.get("maxHitsDuration") * 1000;            durationByViewAccessed.put(viewNameUserLoginId,now + maxHitsDuration);          }        }      }    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.getMessage());      String errMsg=UtilProperties.getMessage("CommonUiLabels","CommonDatabaseProblem",messageMap,UtilHttp.getLocale(request));      Debug.logError(e,errMsg,module);    }  }  return returnValue;}  }
class C{  public void start(){  if (mActivity == null && mFragment == null && mSupportFragment == null) {    throw new RuntimeException("You must pass Activity/Fragment by calling withActivity/withFragment/withSupportFragment method");  }  if (mRequestCode == null) {    throw new RuntimeException("You must pass request code by calling withRequestCode method");  }  Intent intent=getIntent();  if (mActivity != null) {    mActivity.startActivityForResult(intent,mRequestCode);  } else   if (mFragment != null) {    mFragment.startActivityForResult(intent,mRequestCode);  } else {    mSupportFragment.startActivityForResult(intent,mRequestCode);  }}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  @Override public IStriterator append(Iterator iter){  return addFilter(new Appender(iter));}  }
class C{  public static void main(String[] args){  Locale.setDefault(Locale.US);  OsmViewerPlusApp demo=new OsmViewerPlusApp(args);  demo.getFrame().readMap(DataResource.getULMFileResource());  demo.showFrame();}  }
class C{  public void store(float value){}  }
class C{  private ParseTree(List<ParseTreeNode> roots,Map<PhraseChunk,ParseTreeNode> chunkToNode,Map<WordToken,ParseTreeNode> wordToNode){  this.root=new ParseTreeNode(roots);  this.chunkToNode=chunkToNode;  this.wordToNode=wordToNode;}  }
class C{  public MobilityTrace(List<Location> locations){  this.locations=locations;}  }
class C{  private void addParentFimIgnore(FimIgnore initialFimIgnore){  Path directory=context.getAbsoluteCurrentDirectory();  while (false == directory.equals(context.getRepositoryRootDir())) {    directory=directory.getParent();    if (directory == null) {      break;    }    FimIgnore fimIgnore=loadFimIgnore(directory);    initialFimIgnore.getFilesToIgnoreInAllDirectories().addAll(fimIgnore.getFilesToIgnoreInAllDirectories());  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== SourcePackage ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(String.format("package_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.package_uid[0],this.package_uid[1],this.package_uid[2],this.package_uid[3],this.package_uid[4],this.package_uid[5],this.package_uid[6],this.package_uid[7],this.package_uid[8],this.package_uid[9],this.package_uid[10],this.package_uid[11],this.package_uid[12],this.package_uid[13],this.package_uid[14],this.package_uid[15],this.package_uid[16],this.package_uid[17],this.package_uid[18],this.package_uid[19],this.package_uid[20],this.package_uid[21],this.package_uid[22],this.package_uid[23],this.package_uid[24],this.package_uid[25],this.package_uid[26],this.package_uid[27],this.package_uid[28],this.package_uid[29],this.package_uid[30],this.package_uid[31]));  sb.append("================== PackageCreationDate ======================\n");  sb.append(this.package_creation_date.toString());  sb.append("================== PackageModifiedDate ======================\n");  sb.append(this.package_modified_date.toString());  sb.append(this.tracks.toString());  sb.append(String.format("descriptor = %s%n",this.descriptor.toString()));  return sb.toString();}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject){  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  private IJavaElement resolvePackage() throws JavaModelException {  char[] signature=fProposal.getDeclarationSignature();  if (signature != null) {    String typeName=String.valueOf(signature);    typeName=typeName.replace('.',IPath.SEPARATOR);    return fJavaProject.findElement(new Path(typeName));  }  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.msg.SystemMessage sm=getSysMsg(stack);  if (sm != null) {    return sm.getMessageVarNames();  } else   return null;}  }
class C{  public synchronized StringBuffer replace(int start,int end,String string){  replace0(start,end,string);  return this;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @NonNull public static Animator color(int from,int to,float duration){  return color(from,to,duration,null);}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  private void discoverClusterIdentification(StorageSystem vplex,VPlexApiClient client){  try {    if (vplex.getVplexAssemblyIdtoClusterId() != null && !vplex.getVplexAssemblyIdtoClusterId().isEmpty()) {      return;    }    List<VPlexClusterInfo> clusterInfoList=client.getClusterInfoLite();    StringMap assemblyIdToClusterId=new StringMap();    for (    VPlexClusterInfo clusterInfo : clusterInfoList) {      String assemblyId=clusterInfo.getTopLevelAssembly();      if (VPlexApiConstants.NULL_ATT_VAL.equals(assemblyId)) {        throw VPlexCollectionException.exceptions.failedScanningManagedSystemsNullAssemblyId(vplex.getIpAddress(),clusterInfo.getName());      }      assemblyIdToClusterId.put(assemblyId,clusterInfo.getClusterId());    }    if (vplex.getVplexAssemblyIdtoClusterId() == null) {      vplex.setVplexAssemblyIdtoClusterId(assemblyIdToClusterId);    } else {      vplex.getVplexAssemblyIdtoClusterId().putAll(assemblyIdToClusterId);    }  } catch (  Exception e) {    if (vplex != null) {      s_logger.error("Error discovering cluster identification for the VPLEX storage system {}:",vplex.getIpAddress(),e);      throw VPlexCollectionException.exceptions.failedPortsDiscovery(vplex.getId().toString(),e.getLocalizedMessage(),e);    }    s_logger.error("Error discovering cluster identification for the VPLEX storage system",e);    throw VPlexCollectionException.exceptions.failedPortsDiscovery("None",e.getLocalizedMessage(),e);  }}  }
class C{  public AttachTodoExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  private boolean checkUserGroupWithPermissionKeys(String label,Set<String> acls){  boolean resourceUsingUserGroup=false;  if (CollectionUtils.isEmpty(acls)) {    _log.warn("Invalid acls");    return resourceUsingUserGroup;  }  for (  String acl : acls) {    if (StringUtils.isBlank(acl)) {      _log.debug("Invalid acl entry");      continue;    }    PermissionsKey permissionsKey=new PermissionsKey();    permissionsKey.parseFromString(acl);    if (permissionsKey.getType() == PermissionsKey.Type.GROUP && permissionsKey.getValue().equalsIgnoreCase(label)) {      resourceUsingUserGroup=true;    }  }  return resourceUsingUserGroup;}  }
class C{  public void add(int i){  final int removed=buffer[position];  final boolean removedFromBag=frequencies.remove(removed);  assert removedFromBag;  buffer[position]=i;  frequencies.add(i);  position+=1;  if (position == maxSize) {    position=0;  }}  }
class C{  private static void uploadConfiguration(){  System.out.println("Uploading configuration...");  service.uploadSolrClusterConfigurationDirectory(SOLR_CLUSTER_ID,CONFIG_NAME,new File(CONFIG_DIRECTORY)).execute();  System.out.println("Uploaded configuration.");}  }
class C{  public void update(AnActionEvent event){  final Presentation presentation=event.getPresentation();  final DataContext context=event.getDataContext();  final Project project=CommonDataKeys.PROJECT.getData(context);  final StructuralSearchPlugin plugin=(project == null) ? null : StructuralSearchPlugin.getInstance(project);  if (plugin == null || plugin.isSearchInProgress() || plugin.isReplaceInProgress() || plugin.isDialogVisible()) {    presentation.setEnabled(false);  } else {    presentation.setEnabled(true);  }  super.update(event);}  }
class C{  private static Spanned removeImageSpanObjects(Spanned spanned){  SpannableStringBuilder builder=(SpannableStringBuilder)spanned;  Object[] spannedObjects=builder.getSpans(0,builder.length(),Object.class);  for (int i=0; i < spannedObjects.length; i++) {    if (spannedObjects[i] instanceof ImageSpan) {      ImageSpan imageSpan=(ImageSpan)spannedObjects[i];      builder.replace(spanned.getSpanStart(imageSpan),builder.getSpanEnd(imageSpan),"");    }  }  return spanned;}  }
class C{  public EntryStream<K,V> distinctValues(){  return distinct(null);}  }
class C{  public boolean onScrollChanged(int scrollY){  boolean isPullingDownNow=scrollY < lastScrollY;  latestPullingDown.offer(isPullingDownNow);  if (latestPullingDown.size() > PULLING_DOWN_TIME_MAX) {    latestPullingDown.poll();  }  lastScrollY=scrollY;  return getPullingDownTime() >= PULLING_DOWN_TIME_THRESHOLD;}  }
class C{  public static Element createPayloadPostPart(Element signedPostPart,Element signedElement,Element payloadElement){  if (signedElement == signedPostPart) {    return payloadElement;  }  List<Element> parentElements=new ArrayList<Element>();  List<Integer> parentIndex=new ArrayList<Integer>();  Node theParent=signedElement;  while (theParent != null && theParent.getNodeType() == Node.ELEMENT_NODE && theParent != signedPostPart) {    parentElements.add((Element)theParent);    parentIndex.add(DomUtilities.getElementIndex((Element)theParent));    theParent=theParent.getParentNode();  }  Element payloadPostPart=(Element)signedPostPart.cloneNode(true);  Element tmp=payloadPostPart;  for (int i=parentElements.size() - 1; i >= 0; --i) {    Element child=parentElements.get(i);    int index=parentIndex.get(i);    List<Element> children=DomUtilities.findChildren(tmp,child.getLocalName(),child.getNamespaceURI());    tmp=children.get(index - 1);  }  tmp.getParentNode().replaceChild(payloadElement,tmp);  return payloadPostPart;}  }
class C{  protected AugmentedNode<K> construct(K key,K value,AugmentedNode<K> parent){  return new AugmentedNode<K>(key,value,parent);}  }
class C{  private void clipImage(final Area final_clip,final Area unscaled_clip,final int segCount){  if (debug) {    System.out.println("[clip image] segCount=" + segCount);  }  final double shape_x=unscaled_clip.getBounds2D().getX();  final double shape_y=unscaled_clip.getBounds2D().getY();  final int image_w=current_image.getWidth();  final int image_h=current_image.getHeight();  int x=(int)final_clip.getBounds().getX();  int y=(int)final_clip.getBounds().getY();  int w=(int)final_clip.getBounds().getWidth();  int h=(int)final_clip.getBounds().getHeight();  if (debug) {    System.out.println("[clip image] raw clip size==" + x + ' '+ y+ ' '+ w+ ' '+ h+ " image size="+ image_w+ ' '+ image_h);  }  if (segCount > 5) {    if (debug) {      System.out.println("[clip image] create inverse of clip");    }    final AffineTransform image_at=new AffineTransform();    image_at.scale(1,-1);    image_at.translate(0,-current_image.getHeight());    final AffineTransformOp invert=new AffineTransformOp(image_at,ColorSpaces.hints);    current_image=invert.filter(current_image,null);    final Area inverseClip=new Area(new Rectangle(0,0,image_w,image_h));    inverseClip.exclusiveOr(final_clip);    current_image=ColorSpaceConvertor.convertToARGB(current_image);    final Graphics2D image_g2=current_image.createGraphics();    image_g2.setComposite(AlphaComposite.Clear);    image_g2.fill(inverseClip);    final AffineTransform image_at2=new AffineTransform();    image_at2.scale(1,-1);    image_at2.translate(0,-current_image.getHeight());    final AffineTransformOp invert3=new AffineTransformOp(image_at2,ColorSpaces.hints);    current_image=invert3.filter(current_image,null);  }{    if (CTM[1][1] < 0 && pageRotation == 0 && CTM[0][0] > 0 && CTM[1][0] == 0 && CTM[0][1] == 0) {    } else {      y=image_h - h - y;    }    if (y < 0) {      y=0;    }  }  if (x < 0) {    w-=x;    x=0;  }  if (w > image_w) {    w=image_w;  }  if (h > image_h) {    h=image_h;  }  if (y + h > image_h) {    h=image_h - y;  }  if (x + w > image_w) {    w=image_w - x;  }  if (h < 1 || w < 1) {  } else   if (x == 0 && y == 0 && w == current_image.getWidth() && h == current_image.getHeight()) {  } else   if (CTM[1][1] == 0 && pageRotation == 0 && CTM[0][0] == 0 && CTM[1][0] < 0 && CTM[0][1] > 0) {  } else {    try {      current_image=current_image.getSubimage(x,y,w,h);      if (debug) {        System.out.println("[clip image] reduce size x,y,w,h=" + x + ", "+ y+ ", "+ w+ ", "+ h);      }    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " extracting clipped image with values x="+ x+ " y="+ y+ " w="+ w+ " h="+ h+ " from image "+ current_image);    }catch (    final Error err) {      LogWriter.writeLog("Exception " + err + " extracting clipped image with values x="+ x+ " y="+ y+ " w="+ w+ " h="+ h+ " from image "+ current_image);    }  }  final double x1;  final double y1;  if (i_x > shape_x) {    x1=i_x;  } else {    x1=shape_x;  }  if (i_y > shape_y) {    y1=i_y;  } else {    y1=shape_y;  }  i_x=(int)x1;  i_y=(int)y1;  i_w=w;  i_h=h;}  }
class C{  public static byte[] copyOfRange(byte[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      byte[] copy=new byte[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:43.388 -0500",hash_original_method="D85CBFA2F1A37C13B743BA6B1C12F2CC",hash_generated_method="1CD5DECB5B3EECBD930281411C62A36B") public void scan(Reader r0,ScanHandler h) throws IOException, SAXException {  theState=S_PCDATA;  PushbackReader r;  if (r0 instanceof PushbackReader) {    r=(PushbackReader)r0;  } else   if (r0 instanceof BufferedReader) {    r=new PushbackReader(r0);  } else {    r=new PushbackReader(new BufferedReader(r0,200));  }  int firstChar=r.read();  if (firstChar != '\uFEFF')   unread(r,firstChar);  while (theState != S_DONE) {    int ch=r.read();    if (ch >= 0x80 && ch <= 0x9F)     ch=theWinMap[ch - 0x80];    if (ch == '\r') {      ch=r.read();      if (ch != '\n') {        unread(r,ch);        ch='\n';      }    }    if (ch == '\n') {      theCurrentLine++;      theCurrentColumn=0;    } else {      theCurrentColumn++;    }    if (!(ch >= 0x20 || ch == '\n' || ch == '\t' || ch == -1))     continue;    int action=0;    for (int i=0; i < statetable.length; i+=4) {      if (theState != statetable[i]) {        if (action != 0)         break;        continue;      }      if (statetable[i + 1] == 0) {        action=statetable[i + 2];        theNextState=statetable[i + 3];      } else       if (statetable[i + 1] == ch) {        action=statetable[i + 2];        theNextState=statetable[i + 3];        break;      }    }switch (action) {case 0:      throw new Error("HTMLScanner can't cope with " + Integer.toString(ch) + " in state "+ Integer.toString(theState));case A_ADUP:    h.adup(theOutputBuffer,0,theSize);  theSize=0;break;case A_ADUP_SAVE:h.adup(theOutputBuffer,0,theSize);theSize=0;save(ch,h);break;case A_ADUP_STAGC:h.adup(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_ANAME:h.aname(theOutputBuffer,0,theSize);theSize=0;break;case A_ANAME_ADUP:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);break;case A_ANAME_ADUP_STAGC:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);h.stagc(theOutputBuffer,0,theSize);break;case A_AVAL:h.aval(theOutputBuffer,0,theSize);theSize=0;break;case A_AVAL_STAGC:h.aval(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_CDATA:mark();if (theSize > 1) theSize-=2;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_ENTITY_START:h.pcdata(theOutputBuffer,0,theSize);theSize=0;save(ch,h);break;case A_ENTITY:mark();char ch1=(char)ch;if (theState == S_ENT && ch1 == '#') {theNextState=S_NCR;save(ch,h);break;} else if (theState == S_NCR && (ch1 == 'x' || ch1 == 'X')) {theNextState=S_XNCR;save(ch,h);break;} else if (theState == S_ENT && Character.isLetterOrDigit(ch1)) {save(ch,h);break;} else if (theState == S_NCR && Character.isDigit(ch1)) {save(ch,h);break;} else if (theState == S_XNCR && (Character.isDigit(ch1) || "abcdefABCDEF".indexOf(ch1) != -1)) {save(ch,h);break;}h.entity(theOutputBuffer,1,theSize - 1);int ent=h.getEntity();if (ent != 0) {theSize=0;if (ent >= 0x80 && ent <= 0x9F) {ent=theWinMap[ent - 0x80];}if (ent < 0x20) {ent=0x20;} else if (ent >= 0xD800 && ent <= 0xDFFF) {ent=0;} else if (ent <= 0xFFFF) {save(ent,h);} else {ent-=0x10000;save((ent >> 10) + 0xD800,h);save((ent & 0x3FF) + 0xDC00,h);}if (ch != ';') {unread(r,ch);theCurrentColumn--;}} else {unread(r,ch);theCurrentColumn--;}theNextState=S_PCDATA;break;case A_ETAG:h.etag(theOutputBuffer,0,theSize);theSize=0;break;case A_DECL:h.decl(theOutputBuffer,0,theSize);theSize=0;break;case A_GI:h.gi(theOutputBuffer,0,theSize);theSize=0;break;case A_GI_STAGC:h.gi(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_LT:mark();save('<',h);save(ch,h);break;case A_LT_PCDATA:mark();save('<',h);h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_PCDATA:mark();h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_CMNT:mark();h.cmnt(theOutputBuffer,0,theSize);theSize=0;break;case A_MINUS3:save('-',h);save(' ',h);break;case A_MINUS2:save('-',h);save(' ',h);case A_MINUS:save('-',h);save(ch,h);break;case A_PI:mark();h.pi(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET:h.pitarget(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET_PI:h.pitarget(theOutputBuffer,0,theSize);theSize=0;h.pi(theOutputBuffer,0,theSize);break;case A_SAVE:save(ch,h);break;case A_SKIP:break;case A_SP:save(' ',h);break;case A_STAGC:h.stagc(theOutputBuffer,0,theSize);theSize=0;break;case A_EMPTYTAG:mark();if (theSize > 0) h.gi(theOutputBuffer,0,theSize);theSize=0;h.stage(theOutputBuffer,0,theSize);break;case A_UNGET:unread(r,ch);theCurrentColumn--;break;case A_UNSAVE_PCDATA:if (theSize > 0) theSize--;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;default :throw new Error("Can't process state " + action);}theState=theNextState;}h.eof(theOutputBuffer,0,0);}  }
class C{  public void register(String noteId,String className,String event,String cmd) throws IllegalArgumentException {synchronized (registry) {    if (noteId == null) {      noteId=GLOBAL_KEY;    }    addRepl(noteId,className);    if (!event.equals(HookType.POST_EXEC) && !event.equals(HookType.PRE_EXEC) && !event.equals(HookType.POST_EXEC_DEV)&& !event.equals(HookType.PRE_EXEC_DEV)) {      throw new IllegalArgumentException("Must be " + HookType.POST_EXEC + ", "+ HookType.POST_EXEC_DEV+ ", "+ HookType.PRE_EXEC+ " or "+ HookType.PRE_EXEC_DEV);    }    registry.get(noteId).get(className).put(event,cmd);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public ImmutableSet<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  public SelectionDialog(String key,int mode,Object[] arguments){  super(ApplicationFrame.getApplicationFrame(),I18N_PREFIX_SELECTION + key,ModalityType.APPLICATION_MODAL,arguments);  this.mode=mode;}  }
class C{  public T margin(float leftDip,float topDip,float rightDip,float bottomDip){  if (view != null) {    LayoutParams lp=view.getLayoutParams();    if (lp instanceof MarginLayoutParams) {      Context context=getContext();      int left=AQUtility.dip2pixel(context,leftDip);      int top=AQUtility.dip2pixel(context,topDip);      int right=AQUtility.dip2pixel(context,rightDip);      int bottom=AQUtility.dip2pixel(context,bottomDip);      ((MarginLayoutParams)lp).setMargins(left,top,right,bottom);      view.setLayoutParams(lp);    }  }  return self();}  }
class C{  public final void testGetItemViewType(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter proxySpinnerAdapter=createAdapter(entries);  assertEquals(0,proxySpinnerAdapter.getItemViewType(0));}  }
class C{  public CCallgraphEdge(final ICallgraphNode source,final ICallgraphNode target){  super(source,target);}  }
class C{  public static Vector<String> toVector(String[] array){  if (array == null) {    return new Vector<String>(0);  }  Vector<String> v=new Vector<String>(array.length);  v.copyInto(array);  return v;}  }
class C{  public DeleteEntityAction(final OdorWorldPanel worldPanel,OdorWorldEntity entity){  super("Delete entity");  this.worldPanel=worldPanel;  this.entity=entity;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Delete.png"));  putValue(SHORT_DESCRIPTION,"Delete entity");}  }
class C{  protected void freeMemory(){  memory.clear();}  }
class C{  public final boolean subdivp(double dsq,HG hg){  MathVector dr=new MathVector();  dr.subtraction(pos,hg.pos0);  double drsq=dr.dotProduct();  return (drsq < dsq);}  }
class C{  private void checkForUpdate(){  try {    String current=getClass().getPackage().getImplementationVersion();    if (current == null) {      return;    }    DefaultArtifactVersion currentVersion=new DefaultArtifactVersion(current);    GitHub github=GitHub.connectAnonymously();    GHRepository repository=github.getRepository("norecha/pokubot");    for (    GHRelease r : repository.listReleases()) {      String release=r.getName().substring(1);      DefaultArtifactVersion releaseVersion=new DefaultArtifactVersion(release);      if (currentVersion.compareTo(releaseVersion) < 0) {        updateLabel.setVisible(true);        return;      }    }  } catch (  Exception e) {    logger.log(Level.WARNING,"Unable to get latest version",e);  }}  }
class C{  public ST(){  st=new TreeMap<Key,Value>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:13.817 -0500",hash_original_method="865736B8E6D41CC27E8C4571B72736D6",hash_generated_method="2FBFF2774EBE1C709D4520ED4335CEEE") public DERExternal(DERObjectIdentifier directReference,DERInteger indirectReference,ASN1Object dataValueDescriptor,int encoding,DERObject externalData){  setDirectReference(directReference);  setIndirectReference(indirectReference);  setDataValueDescriptor(dataValueDescriptor);  setEncoding(encoding);  setExternalContent(externalData.getDERObject());}  }
class C{  @Override public Mono<Object> resolveArgument(MethodParameter parameter,ModelMap model,ServerWebExchange exchange){  String name=HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE;  Optional<Object> value=exchange.getAttribute(name);  return (value.isPresent() ? Mono.just(value.get()) : Mono.just(Collections.emptyMap()));}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private void handleDocumentActivityIntent(){  if (getIntent() == null || mIntentHandler.shouldIgnoreIntent(this,getIntent())) {    Log.e(TAG,"Ignoring intent: " + getIntent());    mIsFinishNeeded=true;    return;  }  maybePrefetchDnsInBackground();  boolean hasUserGesture=IntentWithGesturesHandler.getInstance().getUserGestureAndClear(getIntent());  TabIdManager.getInstance().incrementIdCounterTo(getTaskId() + 1);  String url=IntentHandler.getUrlFromIntent(getIntent());  if ((url == null && TextUtils.equals(getIntent().getAction(),Intent.ACTION_VIEW)) || TextUtils.equals(getIntent().getAction(),Intent.ACTION_MAIN)) {    handleMainDocumentIntent();    return;  }  if (clobberCurrentDocument(url,hasUserGesture))   return;  boolean incognito=IntentUtils.safeGetBooleanExtra(getIntent(),IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB,false);  boolean append=IntentUtils.safeGetBooleanExtra(getIntent(),IntentHandler.EXTRA_APPEND_TASK,false);  boolean reuse=IntentUtils.safeGetBooleanExtra(getIntent(),ShortcutHelper.REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB,false);  boolean affiliated=IntentUtils.safeGetBooleanExtra(getIntent(),IntentHandler.EXTRA_OPEN_IN_BG,false);  if (reuse && !append) {    int shortcutSource=getIntent().getIntExtra(ShortcutHelper.EXTRA_SOURCE,ShortcutSource.UNKNOWN);    LaunchMetrics.recordHomeScreenLaunchIntoTab(url,shortcutSource);    if (relaunchTask(incognito,url) != Tab.INVALID_TAB_ID)     return;  }  Intent newIntent=createLaunchIntent(getApplicationContext(),getIntent(),url,incognito,Tab.INVALID_TAB_ID);  setRecentsFlagsOnIntent(newIntent,append ? 0 : Intent.FLAG_ACTIVITY_NEW_DOCUMENT,incognito);  AsyncTabCreationParams asyncParams=new AsyncTabCreationParams(new LoadUrlParams(url));  fireDocumentIntent(this,newIntent,incognito,affiliated,asyncParams);}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public Builder addConfig(String configName,Path configPath){  this.configs.add(new Config(configName,configPath));  return this;}  }
class C{  protected IdentifierToken parseName(boolean star) throws SyntaxError, IOException {  IdentifierToken res=scanner.getIdToken();  expect(IDENT);  if (token != FIELD) {    return res;  }  StringBuffer buf=new StringBuffer(res.id.toString());  while (token == FIELD) {    scan();    if ((token == MUL) && star) {      scan();      buf.append(".*");      break;    }    buf.append('.');    if (token == IDENT) {      buf.append(scanner.idValue);    }    expect(IDENT);  }  res.id=Identifier.lookup(buf.toString());  return res;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  final double radToDeg=180 / Math.PI;  final double degToRad=Math.PI / 180;  double azimuth=315 * degToRad;  double altitude=45 * degToRad;  double zFactor=1;  double z;  int progress;  int[] Dy={-1,0,1,1,1,0,-1,-1};  int[] Dx={1,1,1,0,-1,-1,-1,0};  double sinTheta;  double cosTheta;  double tanSlope;  int row, col;  double fx, fy, aspect;  double gridRes, eightGridRes;  double[] N=new double[8];  double term1, term2, term3;  double outNoData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=(Double.parseDouble(args[2]) - 90) * degToRad;  altitude=Double.parseDouble(args[3]) * degToRad;  zFactor=Double.parseDouble(args[4]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    sinTheta=Math.sin(altitude);    cosTheta=Math.cos(altitude);    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    gridRes=inputFile.getCellSizeX();    eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        midLat=Math.toRadians(midLat);        zFactor=1.0 / (113200 * Math.cos(midLat));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,outNoData);    outputFile.setNoDataValue(outNoData);    outputFile.setPreferredPalette("grey.pal");    long[] histo=new long[256];    long numCells=0;    int index;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (int c=0; c < 8; c++) {            N[c]=inputFile.getValue(row + Dy[c],col + Dx[c]);            if (N[c] != noData) {              N[c]=N[c] * zFactor;            } else {              N[c]=z;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            tanSlope=Math.sqrt(fx * fx + fy * fy);            aspect=(180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx))) * degToRad;            term1=tanSlope / Math.sqrt(1 + tanSlope * tanSlope);            term2=sinTheta / tanSlope;            term3=cosTheta * Math.sin(azimuth - aspect);            z=term1 * (term2 - term3);          } else {            z=0.5;          }          z=(int)(z * 255);          if (z < 0) {            z=0;          }          histo[(int)z]++;          numCells++;          outputFile.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    double clipPercent=0.01;    if (args.length >= 6) {      clipPercent=Double.parseDouble(args[5]) / 100.0;    }    int newMin=0;    int newMax=0;    double targetCellNum=numCells * clipPercent;    long sum=0;    for (int c=0; c < 256; c++) {      sum+=histo[c];      if (sum >= targetCellNum) {        newMin=c;        break;      }    }    sum=0;    for (int c=255; c >= 0; c--) {      sum+=histo[c];      if (sum >= targetCellNum) {        newMax=c;        break;      }    }    if (newMax > newMin) {      outputFile.setDisplayMinimum((double)newMin);      outputFile.setDisplayMaximum((double)newMax);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void init(){  mFadeDuration=DEFAULT_FADE_DURATION;  mPlaceholderImage=null;  mPlaceholderImageScaleType=null;  mRetryImage=null;  mRetryImageScaleType=null;  mFailureImage=null;  mFailureImageScaleType=null;  mProgressBarImage=null;  mProgressBarImageScaleType=null;  mActualImageScaleType=DEFAULT_ACTUAL_IMAGE_SCALE_TYPE;  mActualImageMatrix=null;  mActualImageFocusPoint=null;  mBackgrounds=null;  mOverlays=null;  mPressedStateOverlay=null;  mRoundingParams=null;  mActualImageColorFilter=null;}  }
class C{  private File findFirstExisting(String path,@Nullable Location currentLocation){  if (isAbsolutePath(path)) {    File f=new File(path);    return f.exists() ? f : null;  }  if (currentLocation != null) {    File maybeFile=new File(currentLocation.base(),path).getAbsoluteFile();    if (maybeFile.exists()) {      return maybeFile;    }  }  for (  File includePath : includePaths) {    File maybeFile=new File(includePath,path).getAbsoluteFile();    if (maybeFile.exists()) {      return maybeFile;    }  }  return null;}  }
class C{  public SetGenerator(){  super();}  }
class C{  public static String escapeHtml(String s,CleanerProperties props){  boolean advanced=props.isAdvancedXmlEscape();  boolean recognizeUnicodeChars=props.isRecognizeUnicodeChars();  boolean translateSpecialEntities=props.isTranslateSpecialEntities();  boolean transResCharsToNCR=props.isTransResCharsToNCR();  boolean transSpecialEntitiesToNCR=props.isTransSpecialEntitiesToNCR();  return escapeXml(s,advanced,recognizeUnicodeChars,translateSpecialEntities,false,transResCharsToNCR,transSpecialEntitiesToNCR,true);}  }
class C{  public static boolean canHandleStreetView(Context context){  Destination.StreetView sv=new Destination.StreetView();  Intent intent=getStreetViewIntent(context.getString(R.string.streetview_uri),sv);  List<ResolveInfo> resolvers=context.getPackageManager().queryIntentActivities(intent,0);  return resolvers != null && resolvers.size() > 0;}  }
class C{  public void noop() throws IOException {  frameWriter.noop();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.295 -0500",hash_original_method="C0E9548D6FEBBB39DCAB5DD502EC06AD",hash_generated_method="D39D8B79B28699344B30CF82A503E4E0") private View fillSpecific(int position,int top){  boolean tempIsSelected=position == mSelectedPosition;  View temp=makeAndAddView(position,top,true,mListPadding.left,tempIsSelected);  mFirstPosition=position;  View above;  View below;  final int dividerHeight=mDividerHeight;  if (!mStackFromBottom) {    above=fillUp(position - 1,temp.getTop() - dividerHeight);    adjustViewsUpOrDown();    below=fillDown(position + 1,temp.getBottom() + dividerHeight);    int childCount=getChildCount();    if (childCount > 0) {      correctTooHigh(childCount);    }  } else {    below=fillDown(position + 1,temp.getBottom() + dividerHeight);    adjustViewsUpOrDown();    above=fillUp(position - 1,temp.getTop() - dividerHeight);    int childCount=getChildCount();    if (childCount > 0) {      correctTooLow(childCount);    }  }  if (tempIsSelected) {    return temp;  } else   if (above != null) {    return above;  } else {    return below;  }}  }
class C{  public static void removeCommonFrames(List causeFrames,List wrapperFrames){  if (causeFrames == null || wrapperFrames == null) {    throw new IllegalArgumentException("The List must not be null");  }  int causeFrameIndex=causeFrames.size() - 1;  int wrapperFrameIndex=wrapperFrames.size() - 1;  while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {    String causeFrame=(String)causeFrames.get(causeFrameIndex);    String wrapperFrame=(String)wrapperFrames.get(wrapperFrameIndex);    if (causeFrame.equals(wrapperFrame)) {      causeFrames.remove(causeFrameIndex);    }    causeFrameIndex--;    wrapperFrameIndex--;  }}  }
class C{  @Override public int hashCode(){  return value ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode();}  }
class C{  private String generateCreateTableDdlHelper(GenerateDdlRequest generateDdlRequest){  StringBuilder sb=new StringBuilder();  HashMap<String,String> replacements=new HashMap<>();  if (generateDdlRequest.isPartitioned && !CollectionUtils.isEmpty(generateDdlRequest.partitionFilters)) {    for (    List<String> partitionFilter : generateDdlRequest.partitionFilters) {      for (      String partitionValue : partitionFilter) {        Assert.doesNotContain(partitionValue,"/",String.format("Partition value \"%s\" can not contain a '/' character.",partitionValue));      }    }  }  BusinessObjectFormat businessObjectFormat=businessObjectFormatHelper.createBusinessObjectFormatFromEntity(generateDdlRequest.businessObjectFormatEntity);  assertSchemaColumnsNotEmpty(businessObjectFormat,generateDdlRequest.businessObjectFormatEntity);  if (generateDdlRequest.isPartitioned) {    Assert.notEmpty(businessObjectFormat.getSchema().getPartitions(),String.format("No schema partitions specified for business object format {%s}.",businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(generateDdlRequest.businessObjectFormatEntity)));    for (    SchemaColumn partitionColumn : businessObjectFormat.getSchema().getPartitions()) {      Assert.doesNotContain(partitionColumn.getName(),"/",String.format("Partition column name \"%s\" can not contain a '/' character. Business object format: {%s}",partitionColumn.getName(),businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(generateDdlRequest.businessObjectFormatEntity)));    }  }  if (BooleanUtils.isTrue(generateDdlRequest.includeDropTableStatement)) {    sb.append(String.format("DROP TABLE IF EXISTS `%s`;\n\n",generateDdlRequest.tableName));  }  String ifNotExistsOption=generateDdlRequest.includeIfNotExistsOption != null && generateDdlRequest.includeIfNotExistsOption ? "IF NOT EXISTS " : "";  if (generateDdlRequest.customDdlEntity == null) {    generateStandardBaseDdl(generateDdlRequest,sb,businessObjectFormat,ifNotExistsOption);  } else {    sb.append(String.format("%s\n\n",generateDdlRequest.customDdlEntity.getDdl()));    replacements.put(TABLE_NAME_CUSTOM_DDL_TOKEN,generateDdlRequest.tableName);  }  if (!CollectionUtils.isEmpty(generateDdlRequest.partitionFilters)) {    processPartitionFiltersForGenerateDdl(generateDdlRequest,sb,replacements,generateDdlRequest.businessObjectFormatEntity,businessObjectFormat,ifNotExistsOption);  } else   if (!generateDdlRequest.isPartitioned && generateDdlRequest.customDdlEntity == null) {    sb.append(String.format("LOCATION '%s';",NON_PARTITIONED_TABLE_LOCATION_CUSTOM_DDL_TOKEN));  }  String resultDdl=sb.toString().trim();  if (generateDdlRequest.customDdlEntity != null) {    for (    Map.Entry<String,String> entry : replacements.entrySet()) {      String token=entry.getKey();      String value=entry.getValue();      resultDdl=resultDdl.replaceAll(Pattern.quote(token),value);    }  }  return resultDdl;}  }
class C{  @Override public void close() throws IOException {  close(GOAWAY_OK,SpdyStream.RST_CANCEL);}  }
class C{  public static void main(String[] args){  try {    JettySolrRunner jetty=new JettySolrRunner(".","/solr",8983);    jetty.start();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.746 -0500",hash_original_method="ECDCE15AD3E40A66FECAA373F1AD69DD",hash_generated_method="B6D4BCB8D87317739197DB0702F9771D") public FileURLConnection(URL url){  super(url);  fileName=url.getFile();  if (fileName == null) {    fileName="";  }  fileName=UriCodec.decode(fileName);}  }
class C{  @SuppressWarnings("rawtypes") public Object[] toComponentArray(LiteralExtensionIV iv){  long[] longArr=asLongArray(iv);  return longArrAsComponentArr(longArr);}  }
class C{  public AbstractTask retrieveTask(String taskIdentifier){  final Executable task=this.executableRegistry.getTask(taskIdentifier);  return new LocalJvmTask(task);}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,"|");  StringTokenizer tokenizer2=new StringTokenizer(tokenizer.nextToken(),",");  isstd=Integer.parseInt(tokenizer2.nextToken());  if (isstd != 0) {    numItems=Integer.parseInt(tokenizer2.nextToken());    int i=0;    while (tokenizer.hasMoreTokens()) {      itemDefs.put(new Integer(i++),new TItemDef(tokenizer.nextToken()));    }  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void delete(){  this.isDeleted=true;  this.isActive=false;  this.name=this.name + "_deleted_" + this.getId();}  }
class C{  private void removeDeadCouplings(Object object){  List<Coupling<?>> toRemove=new ArrayList<Coupling<?>>();  for (  Coupling<?> coupling : getCouplings()) {    if (coupling.getConsumer().getBaseObject() == object) {      toRemove.add(coupling);    }    if (coupling.getProducer().getBaseObject() == object) {      toRemove.add(coupling);    }  }  for (  Coupling<?> coupling : toRemove) {    removeCoupling(coupling);  }}  }
class C{  @Override public void splitNode(BallNode node,int numNodesCreated) throws Exception {  correctlyInitialized();  m_Rand=new Random(m_RandSeed);  int ridx=node.m_Start + m_Rand.nextInt(node.m_NumInstances);  Instance randomInst=(Instance)m_Instances.instance(m_Instlist[ridx]).copy();  double[] distList=new double[node.m_NumInstances - 1];  Instance temp;  for (int i=node.m_Start, j=0; i < node.m_End; i++, j++) {    temp=m_Instances.instance(m_Instlist[i]);    distList[j]=m_DistanceFunction.distance(randomInst,temp,Double.POSITIVE_INFINITY);  }  int medianIdx=select(distList,m_Instlist,0,distList.length - 1,node.m_Start,(node.m_End - node.m_Start) / 2 + 1) + node.m_Start;  Instance pivot;  node.m_Left=new BallNode(node.m_Start,medianIdx,numNodesCreated + 1,(pivot=BallNode.calcCentroidPivot(node.m_Start,medianIdx,m_Instlist,m_Instances)),BallNode.calcRadius(node.m_Start,medianIdx,m_Instlist,m_Instances,pivot,m_DistanceFunction));  node.m_Right=new BallNode(medianIdx + 1,node.m_End,numNodesCreated + 2,(pivot=BallNode.calcCentroidPivot(medianIdx + 1,node.m_End,m_Instlist,m_Instances)),BallNode.calcRadius(medianIdx + 1,node.m_End,m_Instlist,m_Instances,pivot,m_DistanceFunction));}  }
class C{  public void startUploadRepeat(final String hostname,final String uri,final int repeatWindow,final int reportPeriodMillis,final int fileSizeOctet,final IRepeatListener repeatListener){  startUploadRepeat(hostname,SpeedTestConst.HTTP_DEFAULT_PORT,uri,repeatWindow,reportPeriodMillis,fileSizeOctet,repeatListener);}  }
class C{  public ASN1GeneralizedTime(String time){  this.time=Strings.toByteArray(time);  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  public RetryAfterParser(String retryAfter){  super(retryAfter);}  }
class C{  public void test_roll(){  Calendar calendar=Calendar.getInstance();  calendar.set(2008,3,20,17,28,12);  calendar.roll(Calendar.DATE,5);  assertEquals(25,calendar.get(Calendar.DATE));  calendar.roll(Calendar.DATE,-5);  assertEquals(20,calendar.get(Calendar.DATE));  calendar.roll(Calendar.DATE,0);  assertEquals(20,calendar.get(Calendar.DATE));  calendar.set(2008,1,31,17,28,12);  calendar.roll(Calendar.MONTH,1);  assertEquals(2,calendar.get(Calendar.DATE));}  }
class C{  private synchronized String loadLibraryAsResource(String libname){  try {    InputStream is=getResourceAsStream(libname.replace(File.separatorChar,'/'));    if (is != null) {      try {        File directory=new File(libraryDirectory);        directory.mkdirs();        File file=Files.createTempFile(directory.toPath(),libname + ".",null).toFile();        file.deleteOnExit();        FileOutputStream fileOutput=new FileOutputStream(file);        try {          byte[] buf=new byte[4096];          int n;          while ((n=is.read(buf)) >= 0) {            fileOutput.write(buf,0,n);          }        }  finally {          fileOutput.close();        }        if (file.exists()) {          return file.getAbsolutePath();        }      }  finally {        is.close();      }    }  } catch (  Exception e) {    MLET_LOGGER.logp(Level.FINEST,MLet.class.getName(),"loadLibraryAsResource","Failed to load library : " + libname,e);    return null;  }  return null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.114 -0500",hash_original_method="0F816E844CC5CD74396FEF014D25737B",hash_generated_method="0F816E844CC5CD74396FEF014D25737B") boolean isToDirectionOf(int direction,Rect src,Rect dest){  if (DroidSafeAndroidRuntime.control)   throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");  return (((direction + src.getTaintInt() + dest.getTaintInt())) == 1);}  }
class C{  public XMLMapper(Serializer serializer){  this.serializer=serializer;}  }
class C{  protected void linkStationsToNetwork(){  log.info("Linking pt stations to network...");  Counter counter=new Counter("route # ");  Set<TransitStopFacility> newFacilities=new HashSet<>();  for (  TransitStopFacility facility : this.schedule.getFacilities().values()) {    final Id<Link> closestLink=findClosestLink(facility);    if (closestLink != null) {      List<Id<TransitStopFacility>> localLinkedFacilities=new ArrayList<>();      facility.setLinkId(closestLink);      localLinkedFacilities.add(facility.getId());      final List<Id<Link>> oppositeDirectionLinks=getOppositeDirection(closestLink);      if (oppositeDirectionLinks != null && !oppositeDirectionLinks.isEmpty()) {        TransitStopFacility[] newStopFacilities=multiplyStop(facility,oppositeDirectionLinks.size());        for (int i=0; i < oppositeDirectionLinks.size(); i++) {          newStopFacilities[i + 1].setLinkId(oppositeDirectionLinks.get(i));          localLinkedFacilities.add(newStopFacilities[i + 1].getId());          newFacilities.add(newStopFacilities[i + 1]);        }      }      linkedStopFacilitiesTree.put(facility.getId(),localLinkedFacilities);    }    counter.incCounter();  }  for (  TransitStopFacility facility : newFacilities) {    this.schedule.addStopFacility(facility);  }  counter.printCounter();  log.info("Linking pt stations to network... done.");  for (  List<Id<TransitStopFacility>> facilityList : linkedStopFacilitiesTree.values()) {    for (    Id<TransitStopFacility> facilityId : facilityList) {      linkedStopFacilities.add(facilityId);    }  }}  }
class C{  private void selectSleepTimer(){  new MaterialDialog.Builder(this).title(R.string.sleep_timer_title).items(R.array.sleep_timer).itemsCallback(null).show();}  }
class C{  public final boolean safeRun(int currentRunCount){  return baseJob.safeRun(currentRunCount);}  }
class C{  public EmpiricalMeasurementDistribution(int size){  super();  distribution=new double[size];}  }
class C{  public void deleteDataTable(final String name){  if (dataTableExists(name)) {    DataTable table=dataTableMap.remove(name);    for (    LoggingListener listener : loggingListeners) {      listener.removeDataTable(table);    }  }}  }
class C{  public GenerationalDistance(Problem problem,NondominatedPopulation referenceSet){  super(problem,referenceSet);}  }
class C{  private void addLenient(String fieldName,String value){  namesAndValues.add(fieldName);  namesAndValues.add(value.trim());}  }
class C{  public boolean isSOTrx(){  return getParent().isSOTrx();}  }
class C{  public static boolean sameDay(ZonedDateTime date1,ZonedDateTime date2){  if (date1.getYear() == date2.getYear() && date1.getMonthValue() == date2.getMonthValue() && date1.getDayOfMonth() == date2.getDayOfMonth())   return true;  return false;}  }
class C{  @Deprecated public SearchSourceBuilder defaultRescoreWindowSize(int defaultRescoreWindowSize){  this.defaultRescoreWindowSize=defaultRescoreWindowSize;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix08.class,args);}  }
class C{  public UltraPlayer(UUID uuid,UltraCosmetics ultraCosmetics){  try {    this.uuid=uuid;    gadgetCooldowns=new HashMap<>();    if (UltraCosmeticsData.get().usingFileStorage())     SettingsManager.getData(getPlayer()).addDefault("Keys",0);    if (UltraCosmeticsData.get().isAmmoEnabled()) {      if (!UltraCosmeticsData.get().usingFileStorage())       ultraCosmetics.getMySqlConnectionManager().getSqlUtils().initStats(this); else {        GadgetType.values().stream().filter(null).forEachOrdered(null);      }    }    if (UltraCosmeticsData.get().usingFileStorage()) {      SettingsManager.getData(getPlayer()).addDefault("Gadgets-Enabled",true);      SettingsManager.getData(getPlayer()).addDefault("Third-Person-Morph-View",true);    }  } catch (  Exception exc) {    System.out.println("UltraCosmetics ERR -> " + "Couldn't find player with UUID: " + uuid);    isLoaded=false;    return;  }  if (!UltraCosmeticsData.get().usingFileStorage()) {    try {      ultraCosmetics.getMySqlConnectionManager().getSqlLoader().addPreloadPlayer(uuid);    } catch (    Exception e) {      System.out.println("UltraCosmetics ERR -> " + "SQLLoader Fails to preload UUID: " + uuid);    }  } else {    isLoaded=true;  }}  }
class C{  public void update(){  stepsDone++;  int newState=(int)(100 * stepsDone / numberOfSteps);  if (newState > 100)   newState=100;  while (newState > percent) {    percent++;    System.out.print('|');  }  if (newState == 100 && !isFinished) {    System.out.println("\r\n");    isFinished=Boolean.TRUE;  }}  }
class C{  public void test() throws Exception {  Similarity sim=getSimilarity("text");  assertEquals(IBSimilarity.class,sim.getClass());  IBSimilarity ib=(IBSimilarity)sim;  assertEquals(DistributionSPL.class,ib.getDistribution().getClass());  assertEquals(LambdaDF.class,ib.getLambda().getClass());  assertEquals(NormalizationH2.class,ib.getNormalization().getClass());}  }
class C{  public static Identifier lookupInner(Identifier c,Identifier n){  Identifier id;  if (c.isInner()) {    if (c.name.charAt(c.name.length() - 1) == INNERCLASS_PREFIX)     id=lookup(c.name + n); else     id=lookup(c,n);  } else {    id=lookup(c + "." + INNERCLASS_PREFIX+ n);  }  id.value=c.value;  return id;}  }
class C{  private static boolean hasHWChildren(Component comp){  if (comp instanceof Container) {    for (    Component c : ((Container)comp).getComponents()) {      if (c.getPeer() instanceof WComponentPeer || hasHWChildren(c)) {        return true;      }    }  }  return false;}  }
class C{  public EventBusIdlingResource(String name,EventBusRegistrationInterface eventBus){  mName=name;  mEventBus=eventBus;  mEventBus.register(mSubscriber);}  }
class C{  private static Double priority(final String text){  final String[] parts=MediaType.split(text);  final Double priority;  if (parts.length > 1) {    final String num=MediaType.NON_DIGITS.matcher(parts[1]).replaceAll("");    if (num.isEmpty()) {      priority=0.0d;    } else {      priority=Double.parseDouble(num);    }  } else {    priority=1.0d;  }  return priority;}  }
class C{  public void paint(Graphics g,Shape allocation){  Container host=getContainer();  if (host != null && htmlPane != null && htmlPane.isEditable() != ((JTextComponent)host).isEditable()) {    editable=((JTextComponent)host).isEditable();    htmlPane.setEditable(editable);  }  super.paint(g,allocation);}  }
class C{  private boolean sample(){  Sampler[] samplers=curSamplers;  for (  Sampler sampler : samplers) {    if (sampler.next()) {      return true;    }  }  return false;}  }
class C{  public int nextInt(){  return generateBinomial(n,p);}  }
class C{  public String toReadableString(String className){  return className + "#" + mName+ "("+ mFieldType+ ")";}  }
class C{  private void assertElementAttributeEquals(final HtmlPage page,final String elementId,final String attributeName,final String expected){  HtmlElement element=page.getElementById(elementId);  assertNotNull(element);  assertEquals("Testing attribute '" + attributeName + "' of #"+ elementId,expected,element.getAttribute(attributeName));}  }
class C{  public DelimitedPayloadTokenFilterFactory(Map<String,String> args){  super(args);  encoderClass=require(args,ENCODER_ATTR);  delimiter=getChar(args,DELIMITER_ATTR,'|');  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void pasteSubsession(List sessionElements,Point point){  getToolbar().setRespondingToEvents(false);  getWorkbench().pasteSubsession(sessionElements,point);  getToolbar().setRespondingToEvents(true);}  }
class C{  public void testSetBitZeroOutside1(){  byte aBytes[]={0};  int aSign=0;  int number=95;  byte rBytes[]={0,-128,0,0,0,0,0,0,0,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  private static String extractLibrary(final String platform,final String lib){  final String source='/' + Loader.class.getPackage().getName().replace('.','/') + '/'+ "linux-arm"+ "/"+ "libusb4java.so";  final URL url=Loader.class.getResource(source);  if (url == null) {    throw new LoaderException("Native library not found in classpath: " + source);  }  if ("file".equals(url.getProtocol())) {    try {      return new File(url.toURI()).getAbsolutePath();    } catch (    final URISyntaxException e) {      throw new LoaderException(e.toString(),e);    }  }  final File dest=new File(createTempDirectory(),lib);  try {    final InputStream stream=Loader.class.getResourceAsStream(source);    if (stream == null) {      throw new LoaderException("Unable to find " + source + " in the classpath");    }    try {      copy(stream,dest);    }  finally {      stream.close();    }  } catch (  final IOException e) {    throw new LoaderException("Unable to extract native library " + source + " to "+ dest+ ": "+ e,e);  }  dest.deleteOnExit();  return dest.getAbsolutePath();}  }
class C{  public boolean hasExtraStillImage(){  return isApng() && !firsIdatApngFrame;}  }
class C{  public boolean isPendingForRemoval(){  return mPendingRemoval;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testOperator() throws Exception {  JsonByteArrayOperator oper=new JsonByteArrayOperator();  oper.setConcatenationCharacter('.');  CollectorTestSink mapSink=new CollectorTestSink();  CollectorTestSink jsonObjectSink=new CollectorTestSink();  CollectorTestSink flatMapSink=new CollectorTestSink();  oper.outputMap.setSink(mapSink);  oper.outputJsonObject.setSink(jsonObjectSink);  oper.outputFlatMap.setSink(flatMapSink);  oper.beginWindow(0);  String inputJson=" {   \"@timestamp\":\"2013-09-25T19:37:23.569Z\"" + "      ,\"@version\":\"1\"" + "          ,\"type\":\"apache-logs\""+ "          ,\"host\":\"node1001\""+ "      ,\"clientip\":192.168.150.120"+ "          ,\"verb\":\"GET\""+ "       ,\"request\":\"/reset.css\""+ "   ,\"httpversion\":\"1.1\""+ "      ,\"response\":200"+ "     ,\"agentinfo\": {\"browser\":Firefox"+ "                          ,\"os\": {    \"name\":\"Ubuntu\""+ "                                    ,\"version\":\"10.04\""+ "                                   }"+ "                     }"+ "         ,\"bytes\":909.1"+ " }";  byte[] inputByteArray=inputJson.getBytes();  int numtuples=1000;  for (int i=0; i < numtuples; i++) {    oper.input.process(inputByteArray);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",numtuples,mapSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",numtuples,jsonObjectSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",numtuples,flatMapSink.collectedTuples.size());  Object map=mapSink.collectedTuples.get(510);  String expectedClientip="192.168.150.120";  Assert.assertEquals("emitted tuple",expectedClientip,((Map)map).get("clientip"));  Object jsonObject=jsonObjectSink.collectedTuples.get(433);  Number expectedResponse=200;  Assert.assertEquals("emitted tuple",expectedResponse,((JSONObject)jsonObject).get("response"));  Map flatMap=(Map)flatMapSink.collectedTuples.get(511);  String expectedBrowser="Firefox";  String expectedOsName="Ubuntu";  Assert.assertEquals("emitted tuple",expectedBrowser,flatMap.get("agentinfo.browser"));  Assert.assertEquals("emitted tuple",expectedOsName,flatMap.get("agentinfo.os.name"));}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  @Override public void postInvalidateOnAnimation(){  if (mPendingInvalidation)   return;  long nextDrawTime=mLastDrawTimeMs + MIN_MS_PER_FRAME;  long delay=Math.max(0,nextDrawTime - System.currentTimeMillis());  mPendingInvalidation=true;  postOnAnimationDelayed(mInvalidationRunnable,delay);}  }
class C{  public void merge(JavaDocStore javaDocStore){  if (javaDocStore != null) {    for (    Entry<String,JavaDocEntry> entry : javaDocStore.javaDocStore.entrySet()) {      putValue(entry.getKey(),entry.getValue());    }  }}  }
class C{  public frameset addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public TagTitle createTagTitle(){  TagTitleImpl tagTitle=new TagTitleImpl();  return tagTitle;}  }
class C{  public void addPage(@NotNull WizardPage<T> page){  page.setUpdateDelegate(delegate);  page.setContext(context);  page.init(dataObject);  wizardPages.add(page);}  }
class C{  public static int computeMessageSize(final int fieldNumber,final MessageLite value){  return computeTagSize(fieldNumber) + computeMessageSizeNoTag(value);}  }
class C{  public String innerClass(int nth){  int i=innerClassIndex(nth);  if (i == 0)   return null; else   return constPool.getClassInfo(i);}  }
class C{  public static void serialize(GPathResult node,OutputStream os){  serialize(asString(node),os);}  }
class C{  public final BufferedImage filter(BufferedImage src,BufferedImage dst){  if (src == null) {    throw new NullPointerException("src image is null");  }  if (src == dst) {    throw new IllegalArgumentException("src image cannot be the " + "same as the dst image");  }  boolean needToConvert=false;  ColorModel srcCM=src.getColorModel();  ColorModel dstCM;  BufferedImage origDst=dst;  if (srcCM instanceof IndexColorModel) {    IndexColorModel icm=(IndexColorModel)srcCM;    src=icm.convertToIntDiscrete(src.getRaster(),false);    srcCM=src.getColorModel();  }  if (dst == null) {    dst=createCompatibleDestImage(src,null);    dstCM=srcCM;    origDst=dst;  } else {    dstCM=dst.getColorModel();    if (srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()) {      needToConvert=true;      dst=createCompatibleDestImage(src,null);      dstCM=dst.getColorModel();    } else     if (dstCM instanceof IndexColorModel) {      dst=createCompatibleDestImage(src,null);      dstCM=dst.getColorModel();    }  }  if (ImagingLib.filter(this,src,dst) == null) {    throw new ImagingOpException("Unable to convolve src image");  }  if (needToConvert) {    ColorConvertOp ccop=new ColorConvertOp(hints);    ccop.filter(dst,origDst);  } else   if (origDst != dst) {    java.awt.Graphics2D g=origDst.createGraphics();    try {      g.drawImage(dst,0,0,null);    }  finally {      g.dispose();    }  }  return origDst;}  }
class C{  public Breadcrumb(final Composite parent,final int style){  super(parent,checkStyle(style) | SWT.DOUBLE_BUFFERED);  this.items=new ArrayList<BreadcrumbItem>();  this.hasBorder=(style & SWT.BORDER) != 0;  addListeners();}  }
class C{  private void onAttacked(final Entity attacker){  attackers.remove(attacker);  attackers.add(attacker);}  }
class C{  protected static void placeSomeTerrain(IBoard board,int terrainType,int probMore,int minHexes,int maxHexes,HashMap<IHex,Point> reverseHex,boolean exclusive){  Point p=new Point(Compute.randomInt(board.getWidth()),Compute.randomInt(board.getHeight()));  int count=minHexes;  if ((maxHexes - minHexes) > 0) {    count+=Compute.randomInt(maxHexes - minHexes);  }  IHex field;  HashSet<IHex> alreadyUsed=new HashSet<IHex>();  HashSet<IHex> unUsed=new HashSet<IHex>();  field=board.getHex(p.x,p.y);  if (!field.containsTerrain(terrainType)) {    unUsed.add(field);  } else {    findAllUnused(board,terrainType,alreadyUsed,unUsed,field,reverseHex);  }  ITerrainFactory f=Terrains.getTerrainFactory();  for (int i=0; i < count; i++) {    if (unUsed.isEmpty()) {      return;    }    int which=Compute.randomInt(unUsed.size());    Iterator<IHex> iter=unUsed.iterator();    for (int n=0; n < (which - 1); n++) {      iter.next();    }    field=iter.next();    if (exclusive) {      field.removeAllTerrains();    }    int tempInt=(Compute.randomInt(100) < probMore) ? 2 : 1;    ITerrain tempTerrain=f.createTerrain(terrainType,tempInt);    field.addTerrain(tempTerrain);    unUsed.remove(field);    findAllUnused(board,terrainType,alreadyUsed,unUsed,field,reverseHex);  }  if (terrainType == Terrains.WATER) {    int min=Integer.MAX_VALUE;    Iterator<IHex> iter=unUsed.iterator();    while (iter.hasNext()) {      field=iter.next();      if (field.getLevel() < min) {        min=field.getLevel();      }    }    iter=alreadyUsed.iterator();    while (iter.hasNext()) {      field=iter.next();      field.setLevel(min);    }  }}  }
class C{  public ComputeJobFailoverException(String msg){  super(msg);}  }
class C{  public int hashCode(){  return (field << 24) | (beginIndex << 16) | endIndex;}  }
class C{  public HttpsURL(final String original,final String charset) throws URIException {  protocolCharset=charset;  parseUriReference(original,false);  checkValid();}  }
class C{  public boolean isComponentMaximised(){  return maximisedComponent != null;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  VariableStack vars=transformer.getXPathContext().getVarStack();  if (!vars.isLocalSet(m_index)) {    int sourceNode=transformer.getXPathContext().getCurrentNode();    XObject var=getValue(transformer,sourceNode);    transformer.getXPathContext().getVarStack().setLocalVariable(m_index,var);  }}  }
class C{  public AsicContainer(String message,SignatureData signature,TimestampData timestamp) throws Exception {  put(ENTRY_MIMETYPE,MIMETYPE);  put(ENTRY_MESSAGE,message);  put(ENTRY_SIGNATURE,signature.getSignatureXml());  put(ENTRY_SIG_HASH_CHAIN_RESULT,signature.getHashChainResult());  put(ENTRY_SIG_HASH_CHAIN,signature.getHashChain());  if (timestamp != null) {    if (isNotBlank(timestamp.getHashChainResult())) {      put(ENTRY_TIMESTAMP,timestamp.getTimestampBase64());    }    put(ENTRY_TS_HASH_CHAIN,timestamp.getHashChain());    put(ENTRY_TS_HASH_CHAIN_RESULT,timestamp.getHashChainResult());  }  createManifests();  verifyContents();}  }
class C{  protected URLConnection createFileURLConnection(URL url,File file){  return new FileURLConnection(url,file);}  }
class C{  public void enableRowScaling(boolean enable){  mRowScaleEnabled=enable;}  }
class C{  public Vertex parseEquationForEvaluation(String code,Vertex speaker,Vertex target,boolean debug,Network network){  TextStream stream=new TextStream(code);  try {    Map<String,Map<String,Vertex>> elements=new HashMap<String,Map<String,Vertex>>();    elements.put(VARIABLE,new HashMap<String,Vertex>());    elements.get(VARIABLE).put("speaker",speaker);    elements.get(VARIABLE).put("target",target);    elements.put(EQUATION,new HashMap<String,Vertex>());    Vertex equation=network.createTemporyVertex();    equation.addRelationship(Primitive.INSTANTIATION,Primitive.EQUATION);    BinaryData byteCode=new BinaryData();    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    DataOutputStream dataStream=new DataOutputStream(byteStream);    dataStream.writeLong(network.createVertex(Primitive.DO).getId());    dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());    stream.skipWhitespace();    char peek=stream.peek();    if (peek == '{') {      stream.next();      peek=stream.peek();      stream.skipWhitespace();      while (peek != '}') {        stream.skipWhitespace();        parseElementByteCode(stream,dataStream,elements,debug,network);        ensureNext(';',',',stream);        stream.skipWhitespace();        peek=stream.peek();      }      ensureNext('}',stream);    } else {      parseElementByteCode(stream,dataStream,elements,debug,network);      stream.skipWhitespace();      if (!stream.atEnd()) {        throw new SelfParseException("Unexpect element " + stream.peekWord(),stream);      }    }    dataStream.writeLong(0l);    dataStream.writeLong(0l);    byteCode.setBytes(byteStream.toByteArray());    equation.setData(byteCode);    network.getBot().log(this,"Compiled new equation",Level.INFO,equation);    return equation;  } catch (  SelfParseException exception) {    throw exception;  }catch (  Exception exception) {    network.getBot().log(this,exception);    throw new SelfParseException("Parsing error occurred",stream,exception);  }}  }
class C{  public synchronized boolean removeLast(K obj){  if (peekLast() != obj) {    return false;  }  head=Entry.removeLast(head);  return true;}  }
class C{  private static byte determineOrientation(World world,int x,int y,int z,EntityLivingBase entityLiving){  if (entityLiving != null) {    if (MathHelper.abs((float)entityLiving.posX - x) < 2.0F && MathHelper.abs((float)entityLiving.posZ - z) < 2.0F) {      double var5=entityLiving.posY + 1.82D - entityLiving.yOffset;      if (var5 - y > 2.0D) {        return 1;      }      if (y - var5 > 0.0D) {        return 0;      }    }    int rotation=MathHelper.floor_double(entityLiving.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;    return (byte)(rotation == 0 ? 2 : (rotation == 1 ? 5 : (rotation == 2 ? 3 : (rotation == 3 ? 4 : 0))));  }  return 0;}  }
class C{  private String[] constructCommand(){  List<String> command=new ArrayList<String>();  command.add(tlapmPath.toOSString());  if (toolboxMode) {    command.add("--toolbox");    if (nodeToProve instanceof ModuleNode) {      command.add("0");      command.add("0");    } else {      int beginLine=getBeginLine(nodeToProve);      int endLine=getEndLine(nodeToProve);      command.add("" + beginLine);      command.add("" + endLine);    }  }  ProverHelper.setThreadsOption(command);  ProverHelper.setSolverOption(command);  ProverHelper.setSafeFPOption(command);  if (checkStatus) {    command.add("--noproving");  }  if (options != null) {    for (int i=0; i < options.length; i++) {      command.add(options[i]);    }  }  String[] pathList=Activator.getSpecManager().getSpecLoaded().getTLALibraryPath();  if (pathList != null) {    for (int i=0; i < pathList.length; i++) {      command.add("-I");      command.add(pathList[pathList.length - i - 1]);    }  }  command.add(module.getLocation().toOSString());  return (String[])command.toArray(new String[command.size()]);}  }
class C{  public boolean isSetHello(){  return this.hello != null;}  }
class C{  public Vertex details(Vertex source,Vertex vertex){  return details(source,vertex,null);}  }
class C{  public void hideCallNotifications(){  NotificationManager nm=(NotificationManager)EventStreamService.this.getSystemService(Context.NOTIFICATION_SERVICE);  if ((FOREGROUND_NOTIF_ID_PENDING_CALL == mForegroundServiceIdentifier) || (FOREGROUND_ID_INCOMING_CALL == mForegroundServiceIdentifier)) {    if (FOREGROUND_NOTIF_ID_PENDING_CALL == mForegroundServiceIdentifier) {      mCallIdInProgress=null;    } else {      mIncomingCallId=null;    }    nm.cancel(NOTIF_ID_FOREGROUND_SERVICE);    mForegroundServiceIdentifier=-1;    stopForeground(true);    updateServiceForegroundState();  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.IS_A__SINGLE_IS_A1:    return ((InternalEList<?>)getSingleIsA_1()).basicRemove(otherEnd,msgs);case UmplePackage.IS_A__MULTIPLE_IS_A1:  return ((InternalEList<?>)getMultipleIsA_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void run(){  CrawlStarterFromSraper anchorListener=new CrawlStarterFromSraper(this.crawlStacker,this.initiatorHash,this.profile,true);  this.scraper.registerHtmlFilterEventListener(anchorListener);  final Writer writer=new TransformerWriter(null,null,this.scraper,null,false);  FileInputStream inStream=null;  try {    if (this.crawlingFile != null && this.crawlingFile.exists()) {      inStream=new FileInputStream(this.crawlingFile);      FileUtils.copy(inStream,writer);    } else {      FileUtils.copy(this.crawlingFileContent,writer);    }    writer.close();  } catch (  IOException e) {    log.severe("Error parsing the crawlingFile " + this.crawlingFile.getAbsolutePath(),e);  }catch (  IllegalCrawlProfileException e) {    log.info("Parsing crawlingFile " + this.crawlingFile.getAbsolutePath() + " terminated. Crawl profile "+ this.profile.handle()+ " is no more active.");  }catch (  Exception e) {    log.warn("Error parsing the crawlingFile " + this.crawlingFile.getAbsolutePath(),e);  } finally {    if (inStream != null) {      try {        inStream.close();      } catch (      IOException e) {        log.warn("Could not close crawlingFile : " + this.crawlingFile.getAbsolutePath());      }    }  }}  }
class C{  private static <T>void writeConfig(BufferedWriter writer,DatabaseTableConfig<T> config) throws IOException, SQLException {  writer.append(CONFIG_FILE_START_MARKER);  writer.newLine();  if (config.getDataClass() != null) {    writer.append(FIELD_NAME_DATA_CLASS).append('=').append(config.getDataClass().getName());    writer.newLine();  }  if (config.getTableName() != null) {    writer.append(FIELD_NAME_TABLE_NAME).append('=').append(config.getTableName());    writer.newLine();  }  writer.append(CONFIG_FILE_FIELDS_START);  writer.newLine();  if (config.getFieldConfigs() != null) {    for (    DatabaseFieldConfig field : config.getFieldConfigs()) {      DatabaseFieldConfigLoader.write(writer,field,config.getTableName());    }  }  writer.append(CONFIG_FILE_FIELDS_END);  writer.newLine();  writer.append(CONFIG_FILE_END_MARKER);  writer.newLine();}  }
class C{  public void unregisterUserAssociation(Association assoc) throws AssociationNotRegisteredException, RegisterFailedException {  if (assoc == null) {    throw new IllegalArgumentException("The specified association is null");  }  try {    appAssocWriter.checkAssociationValidForUnregistration(assoc);  } catch (  IllegalArgumentException e) {    throw e;  }  if (!appAssocWriter.isAssociationExist(assoc,AppAssociationWriter.USER_LEVEL)) {    throw new AssociationNotRegisteredException("Assocation not exists!");  }  appAssocWriter.unregisterAssociation(assoc,AppAssociationWriter.USER_LEVEL);}  }
class C{  @Override public void run(){  amIActive=true;  String ouptutFile=null;  String shapefileName=null;  int i=0;  int row, col, rows, cols;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  Geometry[] JTSGeometries;  WKTWriter wktWriter=new WKTWriter();  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  if (inputFilesString.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  try {    for (i=0; i < numFiles; i++) {      if (numFiles > 1) {        progress=(int)(100f * i / (numFiles - 1));        updateProgress("Loop " + (i + 1) + " of "+ numFiles+ ":",progress);      }      shapefileName=imageFiles[i];      if (!((new File(shapefileName)).exists())) {        showFeedback("Vector file does not exist.");        break;      }      ShapeFile shapefile=new ShapeFile(shapefileName);      ouptutFile=shapefileName.replace(".shp",".wkt");      (new File(ouptutFile)).delete();      fw=new FileWriter(ouptutFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=0;      int n=0;      int onePercentOfRecs=shapefile.getNumberOfRecords() / 100;      for (      ShapeFileRecord record : shapefile.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          JTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < JTSGeometries.length; a++) {            str1=wktWriter.write(JTSGeometries[a]);            out.println(str1);          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        if (n == onePercentOfRecs) {          n=0;          progress++;          updateProgress("Exporting shapefile data:",progress);        }      }      showFeedback("Operation complete!");    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void homogeneousUnion(final HLL other){switch (type) {case EMPTY:    return;case EXPLICIT:  for (  LongCursor c : other.explicitStorage) {    addRaw(c.value);  }return;case SPARSE:for (IntByteCursor c : other.sparseProbabilisticStorage) {final int registerIndex=c.key;final byte registerValue=c.value;final byte currentRegisterValue=sparseProbabilisticStorage.get(registerIndex);if (registerValue > currentRegisterValue) {  sparseProbabilisticStorage.put(registerIndex,registerValue);}}if (sparseProbabilisticStorage.size() > sparseThreshold) {initializeStorage(HLLType.FULL);for (IntByteCursor c : sparseProbabilisticStorage) {final int registerIndex=c.key;final byte registerValue=c.value;probabilisticStorage.setMaxRegister(registerIndex,registerValue);}sparseProbabilisticStorage=null;}return;case FULL:for (int i=0; i < m; i++) {final long registerValue=other.probabilisticStorage.getRegister(i);probabilisticStorage.setMaxRegister(i,registerValue);}return;default :throw new RuntimeException("Unsupported HLL type " + type);}}  }
class C{  public boolean waitForWifiState(int expectedState,long timeout){  long startTime=System.currentTimeMillis();  while (true) {    if ((System.currentTimeMillis() - startTime) > timeout) {      if (mWifiState != expectedState) {        return false;      } else {        return true;      }    }    Log.v(LOG_TAG,"Wait for wifi state to be: " + expectedState);synchronized (mWifiMonitor) {      try {        mWifiMonitor.wait(SHORT_TIMEOUT);      } catch (      InterruptedException e) {        e.printStackTrace();      }      if (mWifiState != expectedState) {        Log.v(LOG_TAG,"Wifi state is: " + mWifiState);        continue;      }      return true;    }  }}  }
class C{  public static Entity stackingViolation(IGame game,int enteringId,Coords coords){  Entity entering=game.getEntity(enteringId);  if (entering == null) {    return null;  }  return Compute.stackingViolation(game,entering,coords,null);}  }
class C{  @Override public boolean supportsColumnAliasing(){  debugCodeCall("supportsColumnAliasing");  return true;}  }
class C{  public RasterModel(int numDataSources){  addDataSources(numDataSources);}  }
class C{  public synchronized Transliterator normalizer(){  if (normalizer == null) {    normalizer=Transliterator.createFromRules("",normalizerRules,Transliterator.FORWARD);  }  return normalizer;}  }
class C{  public boolean contains(Sector that){  if (that == null)   return false;  if (that.minLongitude.degrees < this.minLongitude.degrees)   return false;  if (that.maxLongitude.degrees > this.maxLongitude.degrees)   return false;  if (that.minLatitude.degrees < this.minLatitude.degrees)   return false;  if (that.maxLatitude.degrees > this.maxLatitude.degrees)   return false;  return true;}  }
class C{  @Override public Item withSetSelected(boolean selected){  this.mSelected=selected;  return (Item)this;}  }
class C{  public void removeUpdate(DocumentEvent e){  try {    int offs=e.getOffset();    if (firstOffsetModded == null || offs < firstOffsetModded.getOffset()) {      firstOffsetModded=e.getDocument().createPosition(offs);    }    if (lastOffsetModded == null || offs > lastOffsetModded.getOffset()) {      lastOffsetModded=e.getDocument().createPosition(offs);    }  } catch (  BadLocationException ble) {    ble.printStackTrace();  }  handleDocumentEvent(e);}  }
class C{  public static void saveName(final Window parent,final INaviAddressSpace addressSpace,final String name){  try {    addressSpace.getConfiguration().setName(name);  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00153: " + "Could not save address space name";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The new name of the address space '%s' could not be saved.",addressSpace.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The address space keeps its old name."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  public void storeLocal(final int local,final Type type){  setLocalType(local,type);  storeInsn(type,local);}  }
class C{  public void add(@NotNull Collection<VirtualFile> files){synchronized (myDefinitelyUntrackedFiles) {    myDefinitelyUntrackedFiles.addAll(files);  }}  }
class C{  public boolean contains(char ch){  return (ch >= start && ch <= end) != negated;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:54.993 -0500",hash_original_method="F84161825A8E4C54BC8547EBE9290572",hash_generated_method="93A4FA549F2F63403E088CAD0E99EFFE") public final MappedByteBuffer force(){  if (mapMode == MapMode.READ_WRITE) {    try {      Libcore.os.msync(block.toInt(),block.getSize(),MS_SYNC);    } catch (    ErrnoException errnoException) {      throw new AssertionError(errnoException);    }  }  return this;}  }
class C{  public final void testRemoveAllValidators(){  Validator<CharSequence> validator1=Validators.notEmpty("foo");  Validator<CharSequence> validator2=Validators.noWhitespace("bar");  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addValidator(validator1);  abstractValidateableView.addValidator(validator2);  abstractValidateableView.removeAllValidators();  assertTrue(abstractValidateableView.getValidators().isEmpty());}  }
class C{  public LazyValue(Collection<? super LazyValue<T>> collection,Supplier<T> supplier){  this.supplier=supplier;  collection.add(this);}  }
class C{  public static int highestOneBit(int i){  i|=(i >> 1);  i|=(i >> 2);  i|=(i >> 4);  i|=(i >> 8);  i|=(i >> 16);  return i - (i >>> 1);}  }
class C{  @Override protected void onCompleted(IoEventArgs e){  int transferred=e.getBytesTransferred();  if (transferred > 0) {    if (transferred < e.getCount()) {      e.setBuffer(e.getOffset() + transferred,e.getCount() - transferred);      sendAsync();    } else {      sendPacket();    }  } else {    dispose();  }}  }
class C{  public ArffTest(String name){  super(name);}  }
class C{  @Override public void currentRequestContentChanged(String newContent,String oldContent){  if (!working) {    working=true;    log().trace("Current Request Content Changed");    Document domDoc;    try {      domDoc=DomUtilities.stringToDom(newContent);    } catch (    SAXException e) {      getSignatureManager().setDocument(null);      working=false;      return;    }    getSignatureManager().setDocument(domDoc);    for (int i=0; i < optionPayloadList.size(); ++i) {      OptionPayload option=optionPayloadList.get(i);      option.removePropertyChangeListener(this);    }    optionPayloadList.clear();    for (    Payload payload : getSignatureManager().getPayloads()) {      payload.addPropertyChangeListener(this);      OptionPayload newPayload=new OptionPayload(payload);      optionPayloadList.add(newPayload);    }    List<AbstractOption> allOptions=addConfigOptions();    allOptions.addAll(optionPayloadList);    if (plugin != null) {      plugin.getPluginOptions().setOptions(allOptions);    }    working=false;  }}  }
class C{  public Element render(SVGPlot svgp){  Element tag=svgp.svgElement(SVGConstants.SVG_G_TAG);  Element button=svgp.svgRect(x,y,w,h);  if (!Double.isNaN(r)) {    SVGUtil.setAtt(button,SVGConstants.SVG_RX_ATTRIBUTE,r);    SVGUtil.setAtt(button,SVGConstants.SVG_RY_ATTRIBUTE,r);  }  SVGUtil.setAtt(button,SVGConstants.SVG_STYLE_ATTRIBUTE,butcss.inlineCSS());  tag.appendChild(button);  if (svgp.getIdElement(SVGEffects.LIGHT_GRADIENT_ID) != null) {    Element light=svgp.svgRect(x,y,w,h);    if (!Double.isNaN(r)) {      SVGUtil.setAtt(light,SVGConstants.SVG_RX_ATTRIBUTE,r);      SVGUtil.setAtt(light,SVGConstants.SVG_RY_ATTRIBUTE,r);    }    SVGUtil.setAtt(light,SVGConstants.SVG_STYLE_ATTRIBUTE,"fill:url(#" + SVGEffects.LIGHT_GRADIENT_ID + ");fill-opacity:.5");    tag.appendChild(light);  }  if (svgp.getIdElement(SVGEffects.SHADOW_ID) != null) {    button.setAttribute(SVGConstants.SVG_FILTER_ATTRIBUTE,"url(#" + SVGEffects.SHADOW_ID + ")");  }  if (title != null) {    Element label=svgp.svgText(x + w * .5,y + h * .7,title);    label.setAttribute(SVGConstants.SVG_STYLE_ATTRIBUTE,titlecss.inlineCSS());    tag.appendChild(label);  }  return tag;}  }
class C{  public boolean isLcdCrystalEnabled(){  return null == lcdCrystalEnabled ? _lcdCrystalEnabled : lcdCrystalEnabled.get();}  }
class C{  public CapabilityFilter(String... capabilities){  for (  String capability : capabilities) {    addCapability(capability);  }}  }
class C{  public void onCreate(Activity activity){  onCreate(activity,false);}  }
class C{  public BetweennessCentrality(Graph<V,E> graph){  initialize(graph);  computeBetweenness(new LinkedList<V>(),Functions.<Integer>constant(1));}  }
class C{  final long logNodeStart(long parentIndex,Move m,int alpha,int beta,int ply,int depth){  bb.putInt(0,(int)-1);  bb.putInt(4,(int)parentIndex);  bb.putShort(8,(short)(m.from + (m.to << 6) + (m.promoteTo << 12)));  bb.putShort(10,(short)alpha);  bb.putShort(12,(short)beta);  bb.put(14,(byte)ply);  bb.put(15,(byte)depth);  try {    bos.write(bb.array());  } catch (  IOException e) {    throw new RuntimeException();  }  return nextIndex++;}  }
class C{  public boolean containedWithin(Vector min,Vector max){  return x >= min.x && x <= max.x && y >= min.y && y <= max.y && z >= min.z && z <= max.z;}  }
class C{  public Partial plus(ReadablePeriod period){  return withPeriodAdded(period,1);}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,listener,errorListener);}  }
class C{  private final boolean checkProximityPosition(XPathContext xctxt,int predPos,DTM dtm,int context,int pos){  try {    DTMAxisTraverser traverser=dtm.getAxisTraverser(Axis.PRECEDINGSIBLING);    for (int child=traverser.first(context); DTM.NULL != child; child=traverser.next(context,child)) {      try {        xctxt.pushCurrentNode(child);        if (NodeTest.SCORE_NONE != super.execute(xctxt,child)) {          boolean pass=true;          try {            xctxt.pushSubContextList(this);            for (int i=0; i < predPos; i++) {              xctxt.pushPredicatePos(i);              try {                XObject pred=m_predicates[i].execute(xctxt);                try {                  if (XObject.CLASS_NUMBER == pred.getType()) {                    throw new Error("Why: Should never have been called");                  } else                   if (!pred.boolWithSideEffects()) {                    pass=false;                    break;                  }                }  finally {                  pred.detach();                }              }  finally {                xctxt.popPredicatePos();              }            }          }  finally {            xctxt.popSubContextList();          }          if (pass)           pos--;          if (pos < 1)           return false;        }      }  finally {        xctxt.popCurrentNode();      }    }  } catch (  javax.xml.transform.TransformerException se) {    throw new java.lang.RuntimeException(se.getMessage());  }  return (pos == 1);}  }
class C{  public NodesInfoRequest process(boolean process){  this.process=process;  return this;}  }
class C{  public String toString(){  return name;}  }
class C{  public FilePath(FilePath base){  this(base.elements,base.isAbsolute());}  }
class C{  private static String toString(byte[] ranges,int dimension){  return "[" + Double.toString(decodeMin(ranges,dimension)) + " : "+ Double.toString(decodeMax(ranges,dimension))+ "]";}  }
class C{  @Override public void stop() throws LifecycleException {  if (getLogger().isDebugEnabled()) {    getLogger().debug(this + ": Stopping");  }  this.started.set(false);  this.lifecycle.fireLifecycleEvent(STOP_EVENT,null);  this.random=null;  if (this.initialized) {    destroy();  }  getSessionsToTouch().clear();  cancelTimer();  unregisterJvmRouteBinderValve();  if (isCommitValveEnabled()) {    unregisterCommitSessionValve();  }}  }
class C{  private static void addProperty(final Map<String,String> props,final String key,final String value){  if (value == null) {    return;  }  props.put(key,value);}  }
class C{  @Override public Properties trackVideoPause(String videoId,Double currentTime,String courseId,String unitUrl){  SegmentAnalyticsEvent aEvent=getCommonPropertiesWithCurrentTime(currentTime,videoId,Values.VIDEO_PAUSED);  aEvent.setCourseContext(courseId,unitUrl,Values.VIDEOPLAYER);  tracker.track(Events.PAUSED_VIDEO,aEvent.properties);  return aEvent.properties;}  }
class C{  public void onBackPressed(){  if (bt.socket.isConnected()) {    bt.sendToManualMode("stop");    bt.disconnect();  }  Intent changeToMain=new Intent(getApplicationContext(),MainActivity.class);  startActivity(changeToMain);}  }
class C{  public void postPutAll(DistributedPutAllOperation putallO,VersionedObjectList successfulPuts,LocalRegion r) throws TransactionException {  if (r.getCache().isCacheAtShutdownAll()) {    throw new CacheClosedException("Cache is shutting down");  }  PartitionedRegion pr=(PartitionedRegion)r;  final long startTime=PartitionedRegionStats.startTime();  HashMap prMsgMap=putallO.createPRMessages();  PutAllPartialResult partialKeys=new PutAllPartialResult(putallO.putAllDataSize);  successfulPuts.clear();  Iterator itor=prMsgMap.entrySet().iterator();  while (itor.hasNext()) {    Map.Entry mapEntry=(Map.Entry)itor.next();    Integer bucketId=(Integer)mapEntry.getKey();    PutAllPRMessage prMsg=(PutAllPRMessage)mapEntry.getValue();    pr.checkReadiness();    try {      VersionedObjectList versions=sendMsgByBucket(bucketId,prMsg,pr);      partialKeys.addKeysAndVersions(versions);      successfulPuts.addAll(versions);    } catch (    PutAllPartialResultException pre) {      partialKeys.consolidate(pre.getResult());    }catch (    Exception ex) {      @Released EntryEventImpl firstEvent=prMsg.getFirstEvent(pr);      try {        partialKeys.saveFailedKey(firstEvent.getKey(),ex);      }  finally {        firstEvent.release();      }    }  }  pr.prStats.endPutAll(startTime);  if (partialKeys.hasFailure()) {    pr.getCache().getLoggerI18n().info(LocalizedStrings.Region_PutAll_Applied_PartialKeys_0_1,new Object[]{pr.getFullPath(),partialKeys});    if (putallO.isBridgeOperation()) {      if (partialKeys.getFailure() instanceof CancelException) {        throw (CancelException)partialKeys.getFailure();      } else {        throw new PutAllPartialResultException(partialKeys);      }    } else {      if (partialKeys.getFailure() instanceof RuntimeException) {        throw (RuntimeException)partialKeys.getFailure();      } else {        throw new RuntimeException(partialKeys.getFailure());      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.CATCH_VARIABLE__BINDING_PATTERN:    return getBindingPattern();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected boolean isConditionExpression(ValueNode value) throws StandardException {switch (value.getNodeType()) {case NodeTypes.BINARY_EQUALS_OPERATOR_NODE:case NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE:case NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE:case NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE:case NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE:case NodeTypes.BINARY_NOT_EQUALS_OPERATOR_NODE:case NodeTypes.BETWEEN_OPERATOR_NODE:case NodeTypes.IN_LIST_OPERATOR_NODE:case NodeTypes.LIKE_OPERATOR_NODE:case NodeTypes.IS_NULL_NODE:case NodeTypes.IS_NOT_NULL_NODE:case NodeTypes.IS_NODE:case NodeTypes.OR_NODE:case NodeTypes.AND_NODE:case NodeTypes.NOT_NODE:    return true;case NodeTypes.SUBQUERY_NODE:  return (((SubqueryNode)value).getSubqueryType() != SubqueryNode.SubqueryType.EXPRESSION);default :return false;}}  }
class C{  public static char toUpperAscii(char c){  if (isLowercaseAlpha(c)) {    c-=(char)0x20;  }  return c;}  }
class C{  public Builder withLogTerm(long term){  request.logTerm=Assert.argNot(term,term < 0,"log term must not be negative");  return this;}  }
class C{  public EventStoreBuilder tcpCloseTimeout(Duration duration){  tcpSettingsBuilder.closeTimeout(duration);  return this;}  }
class C{  @Override public void actualStart(){  setPeriod(180 * 60 * 1000);  setDelay(200);  ListenerSim.self().attach(this);  markupContacts=new Markup(this);  if (markupContacts.isMarkup()) {    try {      contacts=(HashMap<Long,Long>)markupContacts.readMarkupSerializable();    } catch (    final IOException e) {      if (Cfg.EXCEPTION) {        Check.log(e);      }      if (Cfg.DEBUG) {        Check.log(TAG + " Error (begin): cannot read markup");      }    }  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " (actualStart): no markup");    }  }  if (contacts == null) {    contacts=new HashMap<Long,Long>();    serializeContacts();  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " (actualStart), got serialized contacs from markup: " + contacts.size());    }  }}  }
class C{  public static double convertHoursToMillis(double hours){  return (hours * HOUR_TO_MILLIS);}  }
class C{  protected void validateOnStop(){  if (Command.STOP.equals(getCommand())) {  }}  }
class C{  public JarEntry(String name){  super(name);}  }
class C{  public final boolean isInfoEnabled(){  return false;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new WindowsEditorPaneUI();}  }
class C{  public void createTestDatabaseEntitiesForBusinessObjectFormatTesting(String namespaceCode,String dataProviderName,String businessObjectDefinitionName,String businessObjectFormatFileType,String partitionKeyGroupName){  businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(namespaceCode,businessObjectDefinitionName,dataProviderName,AbstractServiceTest.BDEF_DESCRIPTION);  fileTypeDaoTestHelper.createFileTypeEntity(businessObjectFormatFileType,AbstractServiceTest.FORMAT_FILE_TYPE_DESCRIPTION);  partitionKeyGroupDaoTestHelper.createPartitionKeyGroupEntity(partitionKeyGroupName);}  }
class C{  private static boolean shouldLimit(@LimitFlag int limits,@LimitFlag int flag){  return (limits & flag) != LIMIT_NONE;}  }
class C{  public MemberList<TMember> allMembers(ContainerType<?> type,boolean includeImplicitSuperTypes,boolean includePolyfills,boolean includeInheritedMembers){  return new AllMembersCollector(type,includeImplicitSuperTypes,includePolyfills,includeInheritedMembers).getResult();}  }
class C{  @Override protected void installDefaults(){  LayoutManager layout=spinner.getLayout();  if (layout == null || layout instanceof UIResource) {    spinner.setLayout(createLayout());  }  updateStyle(spinner);}  }
class C{  protected void deleteGateway(String guid){  Integer gwIp=guidToGateway.remove(guid);  if (gwIp == null)   return;  Set<String> gSet=gatewayToGuid.get(gwIp);  gSet.remove(guid);  if (vNetsByGuid.get(guid) != null)   vNetsByGuid.get(guid).setGateway(null);}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  public void testSize2PrivateMode() throws Exception {}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public boolean isEmail(String email){  return EMAIL_VALIDATOR.isValid(email);}  }
class C{  @Override public void fireActionPerformed(ActionEvent event){  super.fireActionPerformed(event);}  }
class C{  public void removeNetwork(String ssid){  List<WifiConfiguration> configs=mWifiManager.getConfiguredNetworks();  if (configs != null) {    for (    WifiConfiguration config : configs) {      loadWifiConfigurationFromProfile(config);      if ((config.SSID != null) && config.SSID.contains(ssid)) {        mWifiManager.disableNetwork(config.networkId);        mWifiManager.removeNetwork(config.networkId);      }    }  }  mWifiManager.saveConfiguration();}  }
class C{  private static CNaviViewNode insertFunctionNode(final INaviView target,final INaviFunctionNode sourceNode){  final CFunctionNode node=target.getContent().createFunctionNode(sourceNode.getFunction());  if (sourceNode.getLocalFunctionComment() != null) {    node.initializeLocalFunctionComment(sourceNode.getLocalFunctionComment());  }  return node;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public StyledPasswordFieldUI(Style style){  this.style=style;}  }
class C{  @Override public boolean supportsSchemasInProcedureCalls(){  debugCodeCall("supportsSchemasInProcedureCalls");  return true;}  }
class C{  public static WritableArray createArray(){  return new WritableNativeArray();}  }
class C{  @Override public boolean select(Viewer viewer,Object parentElement,Object element){  String title="";  if (element instanceof Gefaehrdung) {    Gefaehrdung gefaehrdung=(Gefaehrdung)element;    title=gefaehrdung.getTitel();  } else   if (element instanceof MassnahmenUmsetzung) {    MassnahmenUmsetzung massnahmeUmsetzung=(MassnahmenUmsetzung)element;    title=massnahmeUmsetzung.getTitle();  } else   if (element instanceof GefaehrdungsUmsetzung) {    GefaehrdungsUmsetzung gefaehrdung=(GefaehrdungsUmsetzung)element;    title=gefaehrdung.getText();  }  Matcher matcher=pattern.matcher(title);  if (matcher.find()) {    return true;  }  return false;}  }
class C{  protected Map<String,String> computeEntry2DpidMap(Map<String,Map<String,OFFlowMod>> map){  Map<String,String> ret=new ConcurrentHashMap<String,String>();  for (  String dpid : map.keySet()) {    for (    String entry : map.get(dpid).keySet())     ret.put(entry,dpid);  }  return ret;}  }
class C{  public void addAll(Iterator<? extends Number> values){  while (values.hasNext()) {    add(values.next().doubleValue());  }}  }
class C{  public MapBasedMovement(Settings settings){  super(settings);  map=readMap();  readOkMapNodeTypes(settings);  maxPathLength=100;  minPathLength=10;  backAllowed=false;}  }
class C{  public static PropertyValuesHolder ofFloat(String propertyName,float... values){  return new FloatPropertyValuesHolder(propertyName,values);}  }
class C{  public final ByteBuffer putLong(int baseOffset,long value){  if (order == ByteOrder.BIG_ENDIAN) {    for (int i=7; i >= 0; i--) {      byteArray.set(baseOffset + i,(byte)(value & 0xFF));      value=value >> 8;    }  } else {    for (int i=0; i <= 7; i++) {      byteArray.set(baseOffset + i,(byte)(value & 0xFF));      value=value >> 8;    }  }  return this;}  }
class C{  public void addField(String name,Object value,float boost){  SolrInputField field=_fields.get(name);  if (field == null || field.value == null) {    setField(name,value,boost);  } else {    field.addValue(value,boost);  }}  }
class C{  public MqttConfig(){}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public Url(String url){  super(url);}  }
class C{  private void removeFromStack(Entry<K,V> e){  e.stackPrev.stackNext=e.stackNext;  e.stackNext.stackPrev=e.stackPrev;  e.stackPrev=e.stackNext=null;  stackSize--;}  }
class C{  private void goBack(){  if (isAlbum()) {    final Long artistId=mArguments.getLong(Config.ID);    long[] tracks=MusicUtils.getSongListForArtist(this,artistId);    NavUtils.openArtistProfile(this,mArtistName,tracks);  }  finish();}  }
class C{  public int limit(){  return limit;}  }
class C{  private void updateHibernateSequences() throws SQLException {  executeStatement(QUERY_UPDATE_HIBERNATE_SEQUENCES);}  }
class C{  public void sendGroupMessage(String name,String text){  StendhalRPRuleProcessor ruleProcessor=SingletonRepository.getRuleProcessor();  for (  String playerName : membersAndLastSeen.keySet()) {    Player player=ruleProcessor.getPlayer(playerName);    if (player != null) {      player.sendPrivateText(NotificationType.GROUP,name + ": " + text);    }  }}  }
class C{  public static void clear(){  final AsyncContext context=getContext();  final boolean forceSetSecurity=forceSetSecurityContext(context);  if (forceSetSecurity) {    SecurityContextHolder.clearContext();  }  ctx.set(null);}  }
class C{  public boolean isSetStatus(){  return this.status != null;}  }
class C{  public static TupleQueryResultParser createTupleParser(QueryResultFormat format,ValueFactory valueFactory) throws UnsupportedQueryResultFormatException {  TupleQueryResultParser parser=createTupleParser(format);  parser.setValueFactory(valueFactory);  return parser;}  }
class C{  public static final void deleteOldBackupFile(Path file,int keep){  ArrayList<Path> al=new ArrayList<>();  String fname=file.getFileName().toString();  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(Paths.get("backup"))){    for (    Path path : directoryStream) {      if (path.getFileName().toString().matches(fname + "\\.\\d{4}\\-\\d{2}\\-\\d{2}\\.zip") || path.getFileName().toString().matches(fname + "\\.\\d{4}\\-\\d{2}\\-\\d{2}")) {        al.add(path);      }    }  } catch (  IOException ex) {  }  for (int i=0; i < al.size() - keep; i++) {    deleteFileSafely(al.get(i));  }}  }
class C{  public Victory createVictory(String victory){  return new SpaghettiVictory();}  }
class C{  public synchronized void beSick(){  if (!beingSick) {    beingSick=true;    logger.info("GroupMembershipService.beSick invoked for {} - simulating sickness",this.address);    services.getJoinLeave().beSick();    services.getHealthMonitor().beSick();    if (directChannel != null) {      directChannel.beSick();    }  }}  }
class C{  private Collection<Insanity> checkSubreaders(MapOfSets<Integer,CacheEntry> valIdToItems,MapOfSets<ReaderField,Integer> readerFieldToValIds){  final List<Insanity> insanity=new ArrayList<>(23);  Map<ReaderField,Set<ReaderField>> badChildren=new HashMap<>(17);  MapOfSets<ReaderField,ReaderField> badKids=new MapOfSets<>(badChildren);  Map<Integer,Set<CacheEntry>> viToItemSets=valIdToItems.getMap();  Map<ReaderField,Set<Integer>> rfToValIdSets=readerFieldToValIds.getMap();  Set<ReaderField> seen=new HashSet<>(17);  Set<ReaderField> readerFields=rfToValIdSets.keySet();  for (  final ReaderField rf : readerFields) {    if (seen.contains(rf))     continue;    List<Object> kids=getAllDescendantReaderKeys(rf.readerKey);    for (    Object kidKey : kids) {      ReaderField kid=new ReaderField(kidKey,rf.fieldName);      if (badChildren.containsKey(kid)) {        badKids.put(rf,kid);        badKids.putAll(rf,badChildren.get(kid));        badChildren.remove(kid);      } else       if (rfToValIdSets.containsKey(kid)) {        badKids.put(rf,kid);      }      seen.add(kid);    }    seen.add(rf);  }  for (  final ReaderField parent : badChildren.keySet()) {    Set<ReaderField> kids=badChildren.get(parent);    List<CacheEntry> badEntries=new ArrayList<>(kids.size() * 2);{      for (      final Integer value : rfToValIdSets.get(parent)) {        badEntries.addAll(viToItemSets.get(value));      }    }    for (    final ReaderField kid : kids) {      for (      final Integer value : rfToValIdSets.get(kid)) {        badEntries.addAll(viToItemSets.get(value));      }    }    CacheEntry[] badness=new CacheEntry[badEntries.size()];    badness=badEntries.toArray(badness);    insanity.add(new Insanity(InsanityType.SUBREADER,"Found caches for descendants of " + parent.toString(),badness));  }  return insanity;}  }
class C{  public static _BuildStepStatus fromString(final String value) throws SOAPSerializationException {  return (_BuildStepStatus)Enumeration.fromString(value,_BuildStepStatus.VALUES_TO_INSTANCES);}  }
class C{  static public int[] unPackDate(int packedDate){  int retval[]=new int[3];  retval[2]=packedDate & DAY_MASK;  retval[1]=(packedDate >> MONTH_SHIFT_BITS) & MONTH_MASK;  retval[0]=(packedDate >> YEAR_SHIFT_BITS) & YEAR_MASK;  return retval;}  }
class C{  public static CGPoint ccpRotateByAngle(CGPoint v,CGPoint pivot,float angle){  CGPoint r=ccpSub(v,pivot);  float t=r.x;  float cosa=(float)Math.cos(angle);  float sina=(float)Math.sin(angle);  r.x=t * cosa - r.y * sina;  r.y=t * sina + r.y * cosa;  r=ccpAdd(r,pivot);  return r;}  }
class C{  String retrieveStatusMessage(String userID){  String userStatus;  try {    Roster roster=Roster.getInstanceFor(sConnection);    userStatus=roster.getPresence(userID).getStatus();  } catch (  NullPointerException e) {    Log.e("Invalid connection or user in retrieveStatus() - NPE",e);    userStatus="";  }  if (userStatus == null) {    userStatus="";  }  return userStatus;}  }
class C{  private int assertUser(String methodName,int mask) throws JPlagException {  String user=getUsername();  int userstate=JPLAG_CENTRAL.getUserAdmin().getState(user);  if ((userstate & mask) == 0)   logInvalidAccessAndThrow(methodName,user);  return userstate;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void clearChoices(){  if (mCheckedStates != null) {    mCheckedStates.clear();  }  if (mCheckedIdStates != null) {    mCheckedIdStates.clear();  }  mCheckedCount=0;  updateOnScreenCheckedViews();}  }
class C{  private Set<Integer> doubleCheckAssociatedArticles(Set<Integer> idsToDoubleCheck,Set<Integer> blIds) throws WikiApiException {  if (idsToDoubleCheck.size() > 20000) {    getLogger().info("You want to double check " + idsToDoubleCheck.size() + " articles in the whitelist. This can take a very long time."+ System.getProperty("line.separator")+ "If you do not need ALL pages that meet the specified requirements, you might speed things up by setting PARAM_LIMIT_NUMBER_OF_ARTICLES_TO_READ.");  }  Set<Integer> doubleFilteredArticles=new HashSet<Integer>();  for (  Integer id : idsToDoubleCheck) {    try {      String curPageTitle=wiki.getTitle(id).getWikiStyleTitle();      if (curPageTitle.startsWith(WikiConstants.DISCUSSION_PREFIX)) {        curPageTitle=curPageTitle.replaceAll(WikiConstants.DISCUSSION_PREFIX,"");        if (curPageTitle.contains("/")) {          String[] parts=curPageTitle.split("/");          if (parts != null && parts.length > 0 && parts[0].length() > 0) {            curPageTitle=parts[0];          }        }        List<Integer> curArticleIds=wiki.getPageIds(curPageTitle);        for (        int curArtId : curArticleIds) {          if (blIds.contains(curArtId)) {            doubleFilteredArticles.add(id);          }        }      } else {        List<Integer> curDiscussionIds=wiki.getPageIds(WikiConstants.DISCUSSION_PREFIX + curPageTitle);        for (        int curDiscId : curDiscussionIds) {          if (blIds.contains(curDiscId)) {            doubleFilteredArticles.add(id);          }        }      }    } catch (    WikiPageNotFoundException e) {    }  }  idsToDoubleCheck.removeAll(doubleFilteredArticles);  return idsToDoubleCheck;}  }
class C{  protected Date parseMathString(DateMathParser parser,String datemathfmt) throws ParseException {  return parser.parseMath(datemathfmt);}  }
class C{  public static PGPPublicKey convert(PublicKeyStore publicKey) throws PGPException {  return PGPKeyUtil.readPublicKey(new ByteArrayInputStream(publicKey.getKeyData()));}  }
class C{  public boolean isLightWeightPopupEnabled(){  return lightWeightPopupEnabled;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addParticipantListener(PacketListener listener){  connection.addPacketListener(listener,presenceFilter);  connectionListeners.add(listener);}  }
class C{  protected void stopping(){  nodeCacheMomento.restore();  if (momentos != null) {    for (int i=0; i < momentos.length; i++) {      momentos[i].restore();    }  }}  }
class C{  public BufferedDataInputStream(InputStream o,int bufLength){  super(o,bufLength);}  }
class C{  public static <EX extends Throwable>EX throwDeepCauseChecked(Throwable t,Class<? extends EX> clazz) throws EX {  if (t == null) {    throw new NullPointerException();  }  Error firstError=null;  EX firstEX=null;  RuntimeException firstRTE=null;  for (Throwable tt=t; tt != null; tt=tt.getCause()) {    firstError=ExceptionUtil.chooseNonNullCorrectClass(Error.class,firstError,tt);    firstEX=ExceptionUtil.chooseNonNullCorrectClass(clazz,firstEX,tt);    firstRTE=ExceptionUtil.chooseNonNullCorrectClass(RuntimeException.class,firstRTE,tt);  }  if (firstError != null) {    throw firstError;  }  if (firstEX != null) {    throw firstEX;  }  if (firstRTE != null) {    throw firstRTE;  }  EX rslt=null;  try {    rslt=clazz.getConstructor(Throwable.class).newInstance(t);  } catch (  Exception e) {    try {      rslt=clazz.newInstance();      rslt.initCause(t);    } catch (    Exception e1) {      if (e1.getCause() == null) {        e1.initCause(t);      }      throw new IllegalArgumentException(clazz.getName() + " does not have a functioning constructor, with either no arguments or a Throwable argument.",e1);    }  }  throw rslt;}  }
class C{  public static int readInts(final File f,final int fileOffset,final int fileEnd,final CommonIndex a,final long offset,final long addend) throws IOException {  final int length=(fileEnd - fileOffset) * 4;  final byte[] b=new byte[length];  try (InputStream stream=new FileInputStream(f)){    int remaining=fileOffset * 4;    long skipped;    while (remaining > 0 && (skipped=FileUtils.streamSkip(stream,remaining)) > 0) {      remaining-=(int)skipped;    }    if (remaining > 0) {      throw new IOException();    }    int soFar=0;    int read;    while (soFar < length && (read=stream.read(b,soFar,length - soFar)) > 0) {      soFar+=read;    }    if (soFar < length) {      throw new IOException();    }  }   for (int i=0; i < b.length; i+=4) {    a.set(offset + i / 4,ByteArrayIOUtils.bytesToIntBigEndian(b,i) + addend);  }  return b.length / 4;}  }
class C{  @RolesAllowed({"PLATFORM_OPERATOR"}) public Map<String,Properties> loadMessageProperties(String languageCode) throws ObjectNotFoundException {  Map<String,Properties> propertiesMap=loadStandardLanguageProperties(PROPERTY_TYPE_MESSAGE);  if (languageCode != null && !propertiesMap.containsKey(languageCode)) {    Properties props=loadMessagePropertiesFromDB(languageCode);    propertiesMap.put(languageCode,props);  }  return propertiesMap;}  }
class C{  public void generate(final long countToGenerate){  log.info("Starting to generate {} key pairs using the two layered stream approach",countToGenerate);  final long blockCount=countToGenerate / generationBlockSize + 1;  rangeClosed(0,blockCount).mapToObj(null).forEach(null);  flushWriter();  logDurationStatistics();}  }
class C{  public boolean onNavigateUpFromChild(Activity child){  return onNavigateUp();}  }
class C{  public CustomElement(String value,String comment){  this.value=value;}  }
class C{  public SpecificMessage(String m,int l){  super(m,l);}  }
class C{  public void createTable(Table t,boolean replace) throws SQLException {  String orderCol=t.getAllColumns().get(0).getName();  boolean comma=false;  if (replace)   dropTable(t); else {    if (tableExists(t))     return;  }  String temporary=t.isTemporary() ? "TEMPORARY " : "";  String SQL="CREATE " + temporary + "TABLE "+ t.getSchema()+ (t.isTemporary() ? "_" : ".")+ t.getName()+ " (";  Iterator<Column> i=t.getAllColumns().iterator();  while (i.hasNext()) {    Column c=i.next();    SQL+=(comma ? ", " : "") + c.getName() + " "+ columnToTypeString(c,null)+ (c.isNotNull() ? " NOT NULL" : "");    comma=true;  }  Iterator<Key> j=t.getKeys().iterator();  while (j.hasNext()) {    Key key=j.next();    if (key.isPrimaryKey() && key.getName() != null) {      orderCol=key.getName();      break;    }  }  SQL+=")";  SQL+=" ORDER BY " + orderCol;  execute(SQL);}  }
class C{  private static void appendDefaultValue(StringBuilder sb,FieldType fieldType,Object defaultValue){  if (fieldType.isEscapedDefaultValue()) {    appendEscapedWord(sb,defaultValue.toString());  } else {    sb.append(defaultValue);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void updateUI(){  setUI((ScrollPaneUI)UIManager.getUI(this));}  }
class C{  private void removeSessionFile(){  File fileNew=(File)session.get(Constants.SESSION_FILE);  if (fileNew != null && fileNew.exists()) {    fileNew.delete();  }  session.remove(Constants.SESSION_FILE);  session.remove(Constants.SESSION_FILE_NAME);  session.remove(Constants.SESSION_FILE_CONTENT_TYPE);}  }
class C{  @HLEFunction(nid=0xE855BF76,version=150,checkInsideInterrupt=true) public int __sceSasSetOutputmode(int sasCore,int outputMode){  checkSasHandleGood(sasCore);  this.outputMode=outputMode;  return 0;}  }
class C{  public Info(){}  }
class C{  protected boolean isOutgoingDiscoveryAllowed(DatapathId sw,OFPort port,boolean isStandard,boolean isReverse){  if (isLinkDiscoverySuppressed(sw,port)) {    return false;  }  IOFSwitch iofSwitch=switchService.getSwitch(sw);  if (iofSwitch == null) {    return false;  }  if (port == OFPort.LOCAL)   return false;  OFPortDesc ofpPort=iofSwitch.getPort(port);  if (ofpPort == null) {    if (log.isTraceEnabled()) {      log.trace("Null physical port. sw={}, port={}",sw.toString(),port.getPortNumber());    }    return false;  } else {    return true;  }}  }
class C{  @Override public boolean equals(Object compareKey){  if (this == compareKey)   return true; else   if (compareKey instanceof MonKeyBase) {    MonKeyBase key=(MonKeyBase)compareKey;    return keyMap.equals(key.getMonKeyMap());  } else   return false;}  }
class C{  public void test_getPrimeExponentP(){  assertEquals("invalid prime exponent P",Util.rsaCrtParam.getPrimeExponentP(),key.getPrimeExponentP());}  }
class C{  protected void processMouseEvent(final MouseEvent e){  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {    finishInplaceEditing();  }  super.processMouseEvent(e);}  }
class C{  public void addPollMessage(MarklinMessage mm,MarklinListener ml){  mm.setTimeout(500);  for (  PollMessage pm : pollQueue) {    if (pm.getListener() == ml && pm.getMessage().toString().equals(mm.toString())) {      log.debug("Message is already in the poll queue so will not add");      return;    }  }  PollMessage pm=new PollMessage(mm,ml);  pollQueue.offer(pm);}  }
class C{  private boolean findCoordinator(){  SearchState state=searchState;  assert this.localAddress != null;  if (!state.hasContactedAJoinedLocator && state.view != null) {    return findCoordinatorFromView();  }  String dhalgo=services.getConfig().getDistributionConfig().getSecurityUDPDHAlgo();  FindCoordinatorRequest request=new FindCoordinatorRequest(this.localAddress,state.alreadyTried,state.viewId,services.getMessenger().getPublicKey(localAddress),services.getMessenger().getRequestId(),dhalgo);  Set<InternalDistributedMember> possibleCoordinators=new HashSet<InternalDistributedMember>();  Set<InternalDistributedMember> coordinatorsWithView=new HashSet<InternalDistributedMember>();  long giveUpTime=System.currentTimeMillis() + ((long)services.getConfig().getLocatorWaitTime() * 1000L);  int connectTimeout=(int)services.getConfig().getMemberTimeout() * 2;  boolean anyResponses=false;  logger.debug("sending {} to {}",request,locators);  state.hasContactedAJoinedLocator=false;  state.locatorsContacted=0;  do {    for (    InetSocketAddress addr : locators) {      try {        Object o=tcpClientWrapper.sendCoordinatorFindRequest(addr,request,connectTimeout);        FindCoordinatorResponse response=(o instanceof FindCoordinatorResponse) ? (FindCoordinatorResponse)o : null;        if (response != null) {          if (response.getRejectionMessage() != null) {            throw new GemFireConfigException(response.getRejectionMessage());          }          setCoordinatorPublicKey(response);          state.locatorsContacted++;          if (!state.hasContactedAJoinedLocator && response.getSenderId() != null && response.getSenderId().getVmViewId() >= 0) {            logger.debug("Locator's address indicates it is part of a distributed system " + "so I will not become membership coordinator on this attempt to join");            state.hasContactedAJoinedLocator=true;          }          if (response.getCoordinator() != null) {            anyResponses=true;            NetView v=response.getView();            int viewId=v == null ? -1 : v.getViewId();            if (viewId > state.viewId) {              state.viewId=viewId;              state.view=v;              state.registrants.clear();              if (response.getRegistrants() != null) {                state.registrants.addAll(response.getRegistrants());              }            }            if (viewId > -1) {              coordinatorsWithView.add(response.getCoordinator());            }            possibleCoordinators.add(response.getCoordinator());          }        }      } catch (      IOException|ClassNotFoundException problem) {      }    }  } while (!anyResponses && System.currentTimeMillis() < giveUpTime);  if (possibleCoordinators.isEmpty()) {    return false;  }  if (coordinatorsWithView.size() > 0) {    possibleCoordinators=coordinatorsWithView;  }  Iterator<InternalDistributedMember> it=possibleCoordinators.iterator();  if (possibleCoordinators.size() == 1) {    state.possibleCoordinator=it.next();  } else {    InternalDistributedMember oldest=it.next();    while (it.hasNext()) {      InternalDistributedMember candidate=it.next();      if (oldest.compareTo(candidate) > 0) {        oldest=candidate;      }    }    state.possibleCoordinator=oldest;  }  InternalDistributedMember coord=null;  boolean coordIsNoob=true;  for (; it.hasNext(); ) {    InternalDistributedMember mbr=it.next();    if (!state.alreadyTried.contains(mbr)) {      boolean mbrIsNoob=(mbr.getVmViewId() < 0);      if (mbrIsNoob) {        if (coordIsNoob && (coord == null || coord.compareTo(mbr) > 0)) {          coord=mbr;        }      } else {        if (coordIsNoob || mbr.getVmViewId() > coord.getVmViewId()) {          coord=mbr;          coordIsNoob=false;        }      }    }  }  return true;}  }
class C{  public final void sendMessage(Message msg){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessage(msg);}  }
class C{  public void generateOutput() throws Exception {  BufferedOutputStream ostrm;  PostscriptGraphics psg;  ostrm=null;  try {    ostrm=new BufferedOutputStream(new FileOutputStream(getFile()));    psg=new PostscriptGraphics(getComponent().getHeight(),getComponent().getWidth(),ostrm);    psg.setFont(getComponent().getFont());    psg.scale(getXScale(),getYScale());    getComponent().printAll(psg);    psg.finished();  } catch (  Exception e) {    System.err.println(e);  } finally {    if (ostrm != null) {      try {        ostrm.close();      } catch (      Exception e) {      }    }  }}  }
class C{  public JScrollBar createHorizontalScrollBar(){  return new ScrollBar(JScrollBar.HORIZONTAL);}  }
class C{  public String write(Integer value){  return value.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.905 -0500",hash_original_method="06C25D9275C46608400AACFE7B687C39",hash_generated_method="F6FEC691A089DA01633F8C77882C744D") private void replaceTop(Scope topOfStack){  stack.set(stack.size() - 1,topOfStack);}  }
class C{  public Matrix zoom(float scaleX,float scaleY,float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(scaleX,scaleY,x,y);  return save;}  }
class C{  public void putAsString(String key,Boolean value){  String strValue=value.toString();  super.put(key,strValue);}  }
class C{  @Override public void updateScreen(){  nameBox.updateCursorCounter();  Block block=Block.getBlockFromName(nameBox.getText());  ((GuiButton)buttonList.get(0)).enabled=nameBox.getText().trim().length() > 0 && block != null;}  }
class C{  public UserModificationConstraintException(String message,UserModificationConstraintExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  public CSVResultSetConfiguration(){}  }
class C{  public boolean containsValue(float val){  byte[] states=_states;  float[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  public ResultMatrixSignificance(ResultMatrix matrix){  super(matrix);}  }
class C{  public void close() throws java.io.IOException {  flushBuffer();  m_os.close();}  }
class C{  public Iterator<SolrDocument> scroll(SolrQuery query) throws IOException, SolrServerException {  return new IterableSearchResult(solrClient,query);}  }
class C{  public GitHubUser createUser(GHUser ghUser) throws IOException {  GitHubUser dtoUser=DtoFactory.getInstance().createDto(GitHubUser.class);  dtoUser.setId(String.valueOf(ghUser.getId()));  dtoUser.setHtmlUrl(ghUser.getHtmlUrl().toString());  dtoUser.setAvatarUrl(ghUser.getAvatarUrl());  dtoUser.setBio(ghUser.getBlog());  dtoUser.setCompany(ghUser.getCompany());  dtoUser.setEmail(ghUser.getEmail());  dtoUser.setFollowers(ghUser.getFollowersCount());  dtoUser.setFollowing(ghUser.getFollowingCount());  dtoUser.setLocation(ghUser.getLocation());  dtoUser.setLogin(ghUser.getLogin());  dtoUser.setName(ghUser.getName());  dtoUser.setPublicGists(ghUser.getPublicGistCount());  dtoUser.setPublicRepos(ghUser.getPublicRepoCount());  dtoUser.setUrl(String.valueOf(ghUser.getUrl()));  dtoUser.setGravatarId(ghUser.getGravatarId());  return dtoUser;}  }
class C{  @Override public void buildCloneFromRow(AbstractRecord databaseRow,JoinedAttributeManager joinManager,Object clone,CacheKey sharedCacheKey,ObjectBuildingQuery sourceQuery,UnitOfWorkImpl unitOfWork,AbstractSession executionSession){  Object clonedAttributeValue=buildAggregateFromRow(databaseRow,clone,null,joinManager,sourceQuery,false,executionSession,true);  ClassDescriptor descriptor=getReferenceDescriptor(clonedAttributeValue,unitOfWork);  if (clonedAttributeValue != null) {    descriptor.getObjectChangePolicy().setAggregateChangeListener(clone,clonedAttributeValue,unitOfWork,descriptor,getAttributeName());  }  setAttributeValueInObject(clone,clonedAttributeValue);  return;}  }
class C{  public void add(String... classNames){  for (  String className : classNames) {    className=className.trim();    openMonFactoryMap.put(className,className);    openMonFactoryMap.put(getJustClassName(className).toLowerCase(),className);  }}  }
class C{  @Override public boolean isModifiable(){  return false;}  }
class C{  @ApiOperation(value="Remove specified node (unregister and clean up) for the specified engine") @RequestMapping(value="/engine/{engine}/removenode",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postRemoveNodeByEngine(@RequestParam(value="nodeId") String nodeId,@PathVariable("engine") String engineName){  getSymmetricEngine(engineName).removeAndCleanupNode(nodeId);}  }
class C{  public synchronized void addRow(final String[] items){  Check.notNull(items,"items");  rows.add(items.clone());}  }
class C{  public HttpException(){  super();}  }
class C{  @Transactional public static Result postForm(String path){  String action="";  Map<String,String[]> formEncoded=request().body().asFormUrlEncoded();  if (formEncoded != null) {    String[] value=formEncoded.get("action");    if (value != null && value.length > 0) {      action=value[0];    }  }switch (action) {case "save":    TodoItem todo=form.bindFromRequest().get();  TodoService.save(todo);break;case "delete":Long id=Long.valueOf(path);TodoService.delete(id);break;}return redirect(routes.TodoWebApp.list("all"));}  }
class C{  public static List<MgmtTargetFilterQuery> toResponse(final List<TargetFilterQuery> filters){  if (CollectionUtils.isEmpty(filters)) {    return Collections.emptyList();  }  return filters.stream().map(null).collect(Collectors.toList());}  }
class C{  public byte[] toByteArray(){  return Arrays.copyOf(buf,position);}  }
class C{  public String classIndexTipText(){  return "Index of the class attribute. If set to -1, the last attribute is taken as class attribute.";}  }
class C{  public String encode(final long expireTime,final List<byte[]> fields){  Preconditions.checkState(fields.size() <= MAX_FIELD_SIZE,"exceed max field size:" + MAX_FIELD_SIZE);  for (  final byte[] field : fields) {    Preconditions.checkArgument(field.length <= 256,"field must <= 256 bytes");  }  final byte[] randomIV=new byte[RANDOM_IV_LENGTH];  LazyHolder.SECURE_RANDOM.nextBytes(randomIV);  int payloadLength=8;  for (  final byte[] field : fields) {    payloadLength+=(2 + field.length);  }  final ByteBuffer pyaloadBuf=ByteBuffer.allocate(payloadLength);  pyaloadBuf.putLong(expireTime);  for (  final byte[] field : fields) {    writePayloadNextField(pyaloadBuf,field);  }  pyaloadBuf.flip();  final byte[] payload=new byte[pyaloadBuf.limit()];  pyaloadBuf.get(payload);  try {    final byte[] cipherText=Encryptor.create(secretKey,randomIV).encrypt(payload);    final ByteBuffer tokenBuf=ByteBuffer.allocate(VERSION_LENGTH + randomIV.length + cipherText.length+ MAC_LENGTH);    tokenBuf.put(VERSION_2);    tokenBuf.put(randomIV);    tokenBuf.put(cipherText);    final byte[] ivCipherText=Arrays.copyOf(tokenBuf.array(),tokenBuf.capacity() - MAC_LENGTH);    final byte[] mac=generateMacForIvCipherText(macKey,ivCipherText);    tokenBuf.put(mac);    return Encryptor.URL_SAFE_BASE64_ENCODER.encodeToString(tokenBuf.array());  } catch (  final GeneralSecurityException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public Thread newThread(Runnable r){  Thread t=new Thread(r,name + "-" + integer.getAndIncrement());  if (t.isDaemon())   t.setDaemon(false);  if (t.getPriority() != Thread.NORM_PRIORITY)   t.setPriority(Thread.NORM_PRIORITY);  return t;}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  private int parseTimeExpression(String timeExpression,TimedTextObject tto,Document doc){  int mSeconds=0;  if (timeExpression.contains(":")) {    String[] parts=timeExpression.split(":");    if (parts.length == 3) {      int h, m;      float s;      h=Integer.parseInt(parts[0]);      m=Integer.parseInt(parts[1]);      s=Float.parseFloat(parts[2]);      mSeconds=h * 3600000 + m * 60000 + (int)(s * 1000);    } else     if (parts.length == 4) {      int h, m, s;      float f;      int frameRate=25;      Node n=doc.getElementsByTagName("ttp:frameRate").item(0);      if (n != null) {        String aux=n.getNodeValue();        try {          frameRate=Integer.parseInt(aux);        } catch (        NumberFormatException e) {        }      }      h=Integer.parseInt(parts[0]);      m=Integer.parseInt(parts[1]);      s=Integer.parseInt(parts[2]);      f=Float.parseFloat(parts[3]);      mSeconds=h * 3600000 + m * 60000 + s * 1000 + (int)(f * 1000 / frameRate);    } else {    }  } else {    String metric=timeExpression.substring(timeExpression.length() - 1);    timeExpression=timeExpression.substring(0,timeExpression.length() - 1).replace(',','.').trim();    double time;    try {      time=Double.parseDouble(timeExpression);      if (metric.equalsIgnoreCase("h"))       mSeconds=(int)(time * 3600000); else       if (metric.equalsIgnoreCase("m"))       mSeconds=(int)(time * 60000); else       if (metric.equalsIgnoreCase("s"))       mSeconds=(int)(time * 1000); else       if (metric.equalsIgnoreCase("ms"))       mSeconds=(int)time; else       if (metric.equalsIgnoreCase("f")) {        int frameRate;        Node n=doc.getElementsByTagName("ttp:frameRate").item(0);        if (n != null) {          String s=n.getNodeValue();          frameRate=Integer.parseInt(s);          mSeconds=(int)(time * 1000 / frameRate);        }      } else       if (metric.equalsIgnoreCase("t")) {        int tickRate;        Node n=doc.getElementsByTagName("ttp:tickRate").item(0);        if (n != null) {          String s=n.getNodeValue();          tickRate=Integer.parseInt(s);          mSeconds=(int)(time * 1000 / tickRate);        }      } else {      }    } catch (    NumberFormatException e) {    }  }  return mSeconds;}  }
class C{  public void testGenerateCRLs2() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCRL((InputStream)null);    fail("CRLException was not thrown");  } catch (  CRLException e) {  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public PShapeOpenGL(PGraphicsOpenGL pg,int kind,float... p){  this(pg,PRIMITIVE);  setKind(kind);  setParams(p);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void checkProtocolVersion(byte protoVer){  if (GridBinaryMarshaller.PROTO_VER != protoVer)   throw new BinaryObjectException("Unsupported protocol version: " + protoVer);}  }
class C{  private void saveBinaryDataIntoFileSystem(byte[] inflatedData){  if ("".equals(m_archivePathRoot)) {    throw new IllegalArgumentException("no attachmentPath defined");  }  if (inflatedData == null || inflatedData.length == 0) {    throw new IllegalArgumentException("InflatedData is NULL");  }  if (this.get_ID() == 0) {    super.setBinaryData(new byte[]{'0'});    if (!this.save()) {      throw new IllegalArgumentException("unable to save MArchive");    }  }  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  BufferedOutputStream out=null;  try {    final File destFolder=new File(m_archivePathRoot + File.separator + getArchivePathSnippet());    if (!destFolder.exists()) {      if (!destFolder.mkdirs()) {        log.warning("unable to create folder: " + destFolder.getPath());      }    }    final File destFile=new File(m_archivePathRoot + File.separator + getArchivePathSnippet()+ this.get_ID()+ ".pdf");    out=new BufferedOutputStream(new FileOutputStream(destFile));    out.write(inflatedData);    out.flush();    final DocumentBuilder builder=factory.newDocumentBuilder();    final Document document=builder.newDocument();    final Element root=document.createElement("archive");    document.appendChild(root);    document.setXmlStandalone(true);    final Element entry=document.createElement("entry");    entry.setAttribute("file",ARCHIVE_FOLDER_PLACEHOLDER + getArchivePathSnippet() + this.get_ID()+ ".pdf");    root.appendChild(entry);    final Source source=new DOMSource(document);    final ByteArrayOutputStream bos=new ByteArrayOutputStream();    final Result result=new StreamResult(bos);    final Transformer xformer=TransformerFactory.newInstance().newTransformer();    xformer.transform(source,result);    final byte[] xmlData=bos.toByteArray();    log.fine(bos.toString());    super.setBinaryData(xmlData);  } catch (  Exception e) {    log.log(Level.SEVERE,"saveLOBData",e);    m_deflated=null;    super.setBinaryData(null);  } finally {    if (out != null) {      try {        out.close();      } catch (      Exception e) {      }    }  }}  }
class C{  public EntityMode_Basic(EntityLittleMaid pEntity){  super(pEntity);  fusedTiles=new ArrayList<IInventory>();}  }
class C{  @SuppressWarnings({"ResultOfMethodCallIgnored"}) public static void unzip(File zipFile,File toDir,@Nullable IgniteLogger log) throws IOException {  ZipFile zip=null;  try {    zip=new ZipFile(zipFile);    for (    ZipEntry entry : asIterable(zip.entries())) {      if (entry.isDirectory()) {        new File(toDir,entry.getName()).mkdirs();        continue;      }      InputStream in=null;      OutputStream out=null;      try {        in=zip.getInputStream(entry);        File outFile=new File(toDir,entry.getName());        if (!outFile.getParentFile().exists())         outFile.getParentFile().mkdirs();        out=new BufferedOutputStream(new FileOutputStream(outFile));        copy(in,out);      }  finally {        close(in,log);        close(out,log);      }    }  }  finally {    if (zip != null)     zip.close();  }}  }
class C{  public double linearDistanceSquared(final Vector v){  double deltaX=this.x - v.x;  double deltaY=this.y - v.y;  double deltaZ=this.z - v.z;  return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;}  }
class C{  protected double calculateLowestVisibleTickValue(){  double unit=getTickUnit().getSize();  double index=Math.ceil(getRange().getLowerBound() / unit);  return index * unit;}  }
class C{  void move(int touchX,int touchY){  setTranslationX(touchX - mRegistrationX + (int)mOffsetX);  setTranslationY(touchY - mRegistrationY + (int)mOffsetY);}  }
class C{  public DtoPromotionServiceImpl(final DtoFactory dtoFactory,final GenericService<Promotion> promotionGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,promotionGenericService,adaptersRepository);}  }
class C{  public int createState(){  return nextState++;}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.REGULAR_EXPRESSION_BODY;}  }
class C{  public void notifyDataSetChanged(){  if (noxItemCatalog != null) {    noxItemCatalog.recreate();    createShape();    initializeScroller();    refreshView();  }}  }
class C{  public static CstDouble make(long bits){  return new CstDouble(bits);}  }
class C{  public void removeAncestorListener(AncestorListener listener){  AncestorNotifier ancestorNotifier=getAncestorNotifier();  if (ancestorNotifier == null) {    return;  }  ancestorNotifier.removeAncestorListener(listener);  if (ancestorNotifier.listenerList.getListenerList().length == 0) {    ancestorNotifier.removeAllListeners();    putClientProperty(JComponent_ANCESTOR_NOTIFIER,null);  }}  }
class C{  @Override public int hashCode(){  int result;  result=this.rowKeys.hashCode();  result=29 * result + this.columnKeys.hashCode();  result=29 * result + this.rows.hashCode();  return result;}  }
class C{  public final boolean opt(){  return (getFlags() & F_OPT) != 0;}  }
class C{  public LogarithmicAxis(String label){  super(label);  setupNumberFmtObj();}  }
class C{  public boolean isShowOnlyMinMaxEnabled(){  return mShowOnlyMinMax;}  }
class C{  public DoubleVector(IDoubleVector vec){  mValues=new double[vec.getLength()];  for (int i=0; i < vec.getLength(); ++i) {    mValues[i]=vec.get(i);  }}  }
class C{  @Override public String toString(){  return "null";}  }
class C{  @Override protected final long free(){  return youngAvailable();}  }
class C{  public CursorPos(final BlockFace blockFace,final HandType handType,final float x,final float y,final float z){  Validate.notNull(handType,"HandType can't be null.");  this.handType=handType;  if (blockFace != null) {    Validate.isTrue(blockFace.isBasic(),"BlockFace must be simple.");  }  Validate.isTrue(validFloatRange.isIn(x),"x (float) pos must be in 0..1 range.");  Validate.isTrue(validFloatRange.isIn(y),"x (float) pos must be in 0..1 range.");  Validate.isTrue(validFloatRange.isIn(z),"x (float) pos must be in 0..1 range.");  this.blockFace=blockFace;  this.x=(byte)(x * 16);  this.y=(byte)(x * 16);  this.z=(byte)(x * 16);}  }
class C{  public HotSpotForeignCallLinkage register(HotSpotForeignCallLinkage linkage){  assert !foreignCalls.containsKey(linkage.getDescriptor()) : "already registered linkage for " + linkage.getDescriptor();  foreignCalls.put(linkage.getDescriptor(),linkage);  return linkage;}  }
class C{  private void destroyNotification(int notificationId){  if (doesNotificationExist(notificationId)) {    mNotificationManager.cancel(NOTIFICATION_NAMESPACE,notificationId);    mNotifications.delete(notificationId);    updateSharedPreferencesEntry(notificationId,true);  }}  }
class C{  public Node textNoEncode(final String text) throws IOException {  closeHead();  m_writer.write(text);  m_text++;  return this;}  }
class C{  public boolean intersects(Geometry g){  return baseGeom.intersects(g);}  }
class C{  private void sendQuery(final QueryTask.QuerySpecification spec,final Operation.CompletionHandler handler){  QueryTask task=QueryTask.create(spec).setDirect(true);  Operation queryPost=Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_QUERY_TASKS)).setBody(task).setCompletion(handler);  sendRequest(queryPost);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public KeyUsage(byte[] encoding) throws IOException {  super(encoding);  this.keyUsage=(boolean[])ASN1.decode(encoding);}  }
class C{  public void registerRepeatingJob(Class<? extends Job> jobClass,int intervalInSeconds) throws SchedulerException {  JobDetail job=newJob(jobClass).withIdentity(jobClass.getSimpleName(),DEFAULT_JOB_GROUP).build();  Trigger trigger=newTrigger().withIdentity(jobClass.getSimpleName(),DEFAULT_JOB_GROUP).withSchedule(simpleSchedule().withIntervalInSeconds(intervalInSeconds).repeatForever()).startNow().build();  jobScheduler.scheduleJob(job,trigger);}  }
class C{  protected int read(){  int curByte=0;  try {    curByte=(rawData.get() & 0xFF);  } catch (  final Exception e) {    status=STATUS_FORMAT_ERROR;  }  return curByte;}  }
class C{  public IgniteCachePartitionedQueryMultiThreadedSelfTest(){  super(false);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  public void testBug68733() throws Exception {  Properties props=new Properties();  props.setProperty("loadBalanceStrategy",ForcedLoadBalanceStrategy.class.getName());  props.setProperty("loadBalancePingTimeout","100");  props.setProperty("autoReconnect","true");  props.setProperty("retriesAllDown","1");  String portNumber=new NonRegisteringDriver().parseURL(dbUrl,null).getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY);  if (portNumber == null) {    portNumber="3306";  }  ForcedLoadBalanceStrategy.forceFutureServer("slave1:" + portNumber,-1);  UnreliableSocketFactory.downHost("slave2");  ReplicationConnection conn2=this.getUnreliableReplicationConnection(new String[]{"master","slave1","slave2"},props);  assertTrue("Is not actually on master!",conn2.isMasterConnection());  conn2.setAutoCommit(false);  conn2.commit();  conn2.setReadOnly(true);  conn2.createStatement().execute("/* ping */ SELECT 1");  UnreliableSocketFactory.dontDownHost("slave2");  ForcedLoadBalanceStrategy.forceFutureServer("slave2:" + portNumber,-1);  conn2.commit();  UnreliableSocketFactory.downHost("slave1");  conn2.createStatement().execute("/* ping */ SELECT 1");  UnreliableSocketFactory.flushAllStaticData();  ForcedLoadBalanceStrategy.forceFutureServer("slave2:" + portNumber,-1);  conn2.commit();  this.rs=conn2.createStatement().executeQuery("SELECT CONNECTION_ID()");  this.rs.next();  int slave2id=this.rs.getInt(1);  ForcedLoadBalanceStrategy.forceFutureServer("slave1:" + portNumber,-1);  conn2.commit();  Thread.sleep(2000);  conn2.createStatement().execute("/* ping */ SELECT 1");  this.rs=conn2.createStatement().executeQuery("SELECT time FROM information_schema.processlist WHERE id = " + slave2id);  this.rs.next();  assertTrue("Processlist should be less than 2 seconds due to ping",this.rs.getInt(1) < 2);  ForcedLoadBalanceStrategy.forceFutureServer("slave2:" + portNumber,-1);  conn2.commit();  UnreliableSocketFactory.downHost("slave2");  try {    conn2.createStatement().execute("/* ping */ SELECT 1");    fail("Expected failure because current slave connection is down.");  } catch (  SQLException e) {  }  conn2.close();  ForcedLoadBalanceStrategy.forceFutureServer("slave1:" + portNumber,-1);  UnreliableSocketFactory.flushAllStaticData();  conn2=this.getUnreliableReplicationConnection(new String[]{"master","slave1","slave2"},props);  conn2.setAutoCommit(false);  conn2.setReadOnly(true);  conn2.commit();  ForcedLoadBalanceStrategy.forceFutureServer("slave2:" + portNumber,-1);  conn2.commit();  UnreliableSocketFactory.downHost("master");  conn2.createStatement().execute("/* ping */ SELECT 1");  UnreliableSocketFactory.dontDownHost("master");  conn2.commit();  conn2.createStatement().execute("/* ping */ SELECT 1");  try {    conn2.setReadOnly(false);  } catch (  SQLException e) {  }  conn2.commit();  UnreliableSocketFactory.downHost("slave1");  UnreliableSocketFactory.downHost("slave2");  assertTrue(conn2.isMasterConnection());  conn2.createStatement().execute("/* ping */ SELECT 1");  UnreliableSocketFactory.dontDownHost("slave1");  UnreliableSocketFactory.dontDownHost("slave2");  UnreliableSocketFactory.downHost("master");  try {    conn2.createStatement().execute("/* ping */ SELECT 1");    fail("should have failed because master is offline");  } catch (  SQLException e) {  }  UnreliableSocketFactory.dontDownHost("master");  conn2.createStatement().execute("SELECT 1");  conn2.setReadOnly(true);  conn2.createStatement().execute("/* ping */ SELECT 1");  UnreliableSocketFactory.downHost("slave2");  try {    conn2.createStatement().execute("/* ping */ SELECT 1");    fail("should have failed because slave2 is offline and the active chosen connection.");  } catch (  SQLException e) {  }  conn2.close();}  }
class C{  protected void sequence_Disjunction(ISerializationContext context,Disjunction semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void commit(Xid xid,boolean onePhase) throws XAException {  StringBuilder commandBuf=new StringBuilder(MAX_COMMAND_LENGTH);  commandBuf.append("XA COMMIT ");  appendXid(commandBuf,xid);  if (onePhase) {    commandBuf.append(" ONE PHASE");  }  try {    dispatchCommand(commandBuf.toString());  }  finally {    this.underlyingConnection.setInGlobalTx(false);  }}  }
class C{  protected ExpressionParsingException(String i18n,Object... arguments){  super(I18N.getErrorMessage(i18n,arguments));}  }
class C{  @HLEFunction(nid=0xA0CF2FA4,version=150,checkInsideInterrupt=true) public int __sceSasSetKeyOff(int sasCore,int voice){  checkSasAndVoiceHandlesGood(sasCore,voice);  checkVoiceNotPaused(voice,true);  voices[voice].off();  return 0;}  }
class C{  public IllegalArgumentException(){  super();}  }
class C{  public void _serializeStruct(PageContext pc,Set test,Struct struct,StringBuilder sb,boolean serializeQueryByColumns,boolean addUDFs,Set<Object> done) throws ConverterException {  if (struct instanceof Component) {    String res=castToJson(pc,(Component)struct,NULL_STRING);    if (res != NULL_STRING) {      sb.append(res);      return;    }  }  sb.append(goIn());  sb.append("{");  Iterator<Entry<Key,Object>> it=struct.entryIterator();  Entry<Key,Object> e;  Object value;  boolean doIt=false;  while (it.hasNext()) {    e=it.next();    value=e.getValue();    if (!addUDFs && (value instanceof UDF || value == null))     continue;    if (doIt)     sb.append(',');    doIt=true;    sb.append(StringUtil.escapeJS(e.getKey().getString(),'"',charsetEncoder));    sb.append(':');    _serialize(pc,test,value,sb,serializeQueryByColumns,done);  }  if (struct instanceof Component) {    Boolean remotingFetch;    Component comp=(Component)struct;    boolean isPeristent=false;    isPeristent=comp.isPersistent();    Property[] props=comp.getProperties(false);    ComponentScope scope=comp.getComponentScope();    for (int i=0; i < props.length; i++) {      if (!ignoreRemotingFetch) {        remotingFetch=Caster.toBoolean(props[i].getDynamicAttributes().get(REMOTING_FETCH,null),null);        if (remotingFetch == null) {          if (isPeristent && ORMUtil.isRelated(props[i]))           continue;        } else         if (!remotingFetch.booleanValue())         continue;      }      Key key=KeyImpl.getInstance(props[i].getName());      value=scope.get(key,null);      if (!addUDFs && (value instanceof UDF || value == null))       continue;      if (doIt)       sb.append(',');      doIt=true;      sb.append(StringUtil.escapeJS(key.getString(),'"',charsetEncoder));      sb.append(':');      _serialize(pc,test,value,sb,serializeQueryByColumns,done);    }  }  sb.append('}');}  }
class C{  public CAutomatismPanel(final ZyGraphViewSettings settings,final boolean isDefaultSettingsDialog){  super(new GridLayout(isDefaultSettingsDialog ? NUMBER_OF_ROWS_INITIAL : NUMBER_OF_ROWS,1));  Preconditions.checkNotNull(settings,"IE01583: Settings argument can not be null");  m_isDefaultSettingsDialog=isDefaultSettingsDialog;  setBorder(new TitledBorder("Automatism Settings"));  if (isDefaultSettingsDialog) {    CSettingsPanelBuilder.addComboBox(this,m_cbDefaultLayoutStyle,"Default Layout Style" + ":","Initial layout style for newly opened graphs",new String[]{"Circular","Hierarchical","Orthogonal"},settings.getLayoutSettings().getDefaultGraphLayout().ordinal());  }  CSettingsPanelBuilder.addComboBox(this,m_cbAutolayout,"Automatic Layouting" + ":","If activated, graphs are automatically layouted on relevant events.\n" + "This is especially useful when proximity browsing is activated.",settings.getLayoutSettings().getAutomaticLayouting());  CSettingsPanelBuilder.addComboBox(this,m_cbProximityBrowsing,"Proximity Browsing" + ":","If activated, proximity browsing is enabled by default.",settings.getProximitySettings().getProximityBrowsing());  CSettingsPanelBuilder.addTextField(this,m_tfProximityBrowsingActivationThres,"Proximity Browsing Activation Threshold" + ":","Enables proximity browsing on newly loaded graphs if " + "the graph has more than the specified number of nodes.",String.valueOf(settings.getProximitySettings().getProximityBrowsingActivationThreshold()));  CSettingsPanelBuilder.addTextField(this,m_tfAutolayoutDeactivationThres,"Automatic Layouting Deactivation Threshold" + ":","Disables automatic layouting if more than the specified number of nodes is visible.",String.valueOf(settings.getLayoutSettings().getAutolayoutDeactivationThreshold()));  CSettingsPanelBuilder.addTextField(this,m_tfLayoutProcessingDurationWarningThres,"Layout Calculation Time Warning Threshold" + ":","Shows a warning before layouting graphs when more than " + "the specified number of nodes is visible.",String.valueOf(settings.getLayoutSettings().getLayoutCalculationTimeWarningThreshold()));  CSettingsPanelBuilder.addTextField(this,m_tfVisibilityWarningThres,"Visibility Warning Threshold" + ":","Shows a warning if more than the specified number of graph nodes is " + "made visible in one step.",String.valueOf(settings.getLayoutSettings().getVisibilityWarningTreshold()));}  }
class C{  private void invoiceLine(MRequest request){  MRequestUpdate[] updates=request.getUpdates(null);  for (int i=0; i < updates.length; i++) {    BigDecimal qty=updates[i].getQtyInvoiced();    if (qty == null || qty.signum() == 0)     continue;    MInvoiceLine il=new MInvoiceLine(m_invoice);    m_linecount++;    il.setLine(m_linecount * 10);    il.setQty(qty);    int M_Product_ID=updates[i].getM_ProductSpent_ID();    if (M_Product_ID == 0)     M_Product_ID=p_M_Product_ID;    il.setM_Product_ID(M_Product_ID);    il.setPrice();    il.saveEx();  }}  }
class C{  private String extractDeclaringTypeFQN(CompletionProposal methodProposal){  char[] declaringTypeSignature=methodProposal.getDeclarationSignature();  if (declaringTypeSignature == null)   return "java.lang.Object";  return SignatureUtil.stripSignatureToFQN(String.valueOf(declaringTypeSignature));}  }
class C{  private boolean scanAndSendMessages(){  List<ReleaseMessage> releaseMessages=releaseMessageRepository.findFirst500ByIdGreaterThanOrderByIdAsc(maxIdScanned);  if (CollectionUtils.isEmpty(releaseMessages)) {    return false;  }  fireMessageScanned(releaseMessages);  int messageScanned=releaseMessages.size();  maxIdScanned=releaseMessages.get(messageScanned - 1).getId();  return messageScanned == 500;}  }
class C{  public PaletteFontChooserPreviewPanel(){  initComponents();  previewLabel.setUI((LabelUI)PaletteLabelUI.createUI(previewLabel));  previewLabel.setBackground(Color.WHITE);  previewLabel.setForeground(Color.BLACK);  previewLabel.setOpaque(true);  setPreferredSize(new Dimension(100,50));  setMinimumSize(new Dimension(100,50));}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIMPLE_ENTITY\"";  db.execSQL(sql);}  }
class C{  public static boolean isBadPath(String path){  if (SystemUtilities.isWindows()) {    return path.toLowerCase().contains(SystemUtilities.getDataDirectory().toLowerCase());  }  return path.contains(SystemUtilities.getDataDirectory());}  }
class C{  public static int strcmp(String str,char[] a,int start){  int i, d, len=str.length();  for (i=0; i < len; i++) {    d=(int)str.charAt(i) - a[start + i];    if (d != 0) {      return d;    }    if (a[start + i] == 0) {      return d;    }  }  if (a[start + i] != 0) {    return -a[start + i];  }  return 0;}  }
class C{  private LoggingFactory(){}  }
class C{  public void searchAllTypeNames(IWorkspace workspace,final char[] packageName,final char[] typeName,final int matchMode,final boolean isCaseSensitive,int searchFor,IJavaSearchScope scope,final ITypeNameRequestor nameRequestor,int waitingPolicy,IProgressMonitor progressMonitor) throws JavaModelException {  searchAllTypeNames(packageName,typeName,isCaseSensitive ? matchMode | SearchPattern.R_CASE_SENSITIVE : matchMode,searchFor,scope,nameRequestor,waitingPolicy,progressMonitor);}  }
class C{  public static FunctionAlias newInstanceFromSource(Schema schema,int id,String name,String source,boolean force,boolean bufferResultSetToLocalTemp){  FunctionAlias alias=new FunctionAlias(schema,id,name);  alias.source=source;  alias.bufferResultSetToLocalTemp=bufferResultSetToLocalTemp;  alias.init(force);  return alias;}  }
class C{  public static SubscriptionStateException convertToApi(org.oscm.internal.types.exception.SubscriptionStateException oldEx){  org.oscm.internal.types.exception.beans.SubscriptionStateExceptionBean bean=(org.oscm.internal.types.exception.beans.SubscriptionStateExceptionBean)getFaultInfo(oldEx);  SubscriptionStateExceptionBean v13Bean=convertBeanToApi(bean,SubscriptionStateExceptionBean.class);  if (bean != null) {    SubscriptionStateException.Reason v13Reason=EnumConverter.convert(bean.getReason(),SubscriptionStateException.Reason.class);    v13Bean.setReason(v13Reason);    v13Bean.setMember(bean.getMember());  }  return newApiException(SubscriptionStateException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  public void reset(){  super.reset();  H0=0x67452301;  H1=0xefcdab89;  H2=0x98badcfe;  H3=0x10325476;  H4=0xc3d2e1f0;  H5=0x76543210;  H6=0xFEDCBA98;  H7=0x89ABCDEF;  H8=0x01234567;  H9=0x3C2D1E0F;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public void toBytecode(DataOutputStream out) throws CannotCompileException, IOException {  throw new CannotCompileException("not a class");}  }
class C{  public Builder noStore(){  this.noStore=true;  return this;}  }
class C{  private void init(@Nullable final AttributeSet attributeSet){  final TypedArray typedArray=getContext().getTheme().obtainStyledAttributes(attributeSet,R.styleable.CustomLayoutPromptView,0,0);  config=new CustomLayoutPromptViewConfig(typedArray);  typedArray.recycle();}  }
class C{  public int indexOf(double value){  return indexOf(0,value);}  }
class C{  @Override public Vertex addVertex(final Object key){  try {    final String vid=key != null ? key.toString() : UUID.randomUUID().toString();    final URI uri=factory.toVertexURI(vid);    cxn().add(uri,TYPE,VERTEX);    return new BigdataVertex(uri,this);  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private double logNormalDens(double x,double mean,double stdDev){  double diff=x - mean;  return -(diff * diff / (2 * stdDev * stdDev)) - m_normConst - Math.log(stdDev);}  }
class C{  protected void addAxioms(final Collection<BigdataStatement> axioms){  super.addAxioms(axioms);  final BigdataValueFactory valueFactory=getValueFactory();  axioms.add(valueFactory.createStatement(RDF.TYPE,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.SUBJECT,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.PREDICATE,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.OBJECT,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.FIRST,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.REST,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.VALUE,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.NIL,RDF.TYPE,RDF.LIST,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.TYPE,RDFS.DOMAIN,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.DOMAIN,RDFS.DOMAIN,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.RANGE,RDFS.DOMAIN,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SUBPROPERTYOF,RDFS.DOMAIN,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SUBCLASSOF,RDFS.DOMAIN,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.SUBJECT,RDFS.DOMAIN,RDF.STATEMENT,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.PREDICATE,RDFS.DOMAIN,RDF.STATEMENT,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.OBJECT,RDFS.DOMAIN,RDF.STATEMENT,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.MEMBER,RDFS.DOMAIN,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.FIRST,RDFS.DOMAIN,RDF.LIST,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.REST,RDFS.DOMAIN,RDF.LIST,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SEEALSO,RDFS.DOMAIN,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.ISDEFINEDBY,RDFS.DOMAIN,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.COMMENT,RDFS.DOMAIN,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.LABEL,RDFS.DOMAIN,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.VALUE,RDFS.DOMAIN,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.TYPE,RDFS.RANGE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.DOMAIN,RDFS.RANGE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.RANGE,RDFS.RANGE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SUBPROPERTYOF,RDFS.RANGE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SUBCLASSOF,RDFS.RANGE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.SUBJECT,RDFS.RANGE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.PREDICATE,RDFS.RANGE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.OBJECT,RDFS.RANGE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.MEMBER,RDFS.RANGE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.FIRST,RDFS.RANGE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.REST,RDFS.RANGE,RDF.LIST,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SEEALSO,RDFS.RANGE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.ISDEFINEDBY,RDFS.RANGE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.COMMENT,RDFS.RANGE,RDFS.LITERAL,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.LABEL,RDFS.RANGE,RDFS.LITERAL,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.VALUE,RDFS.RANGE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.ALT,RDFS.SUBCLASSOF,RDFS.CONTAINER,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.BAG,RDFS.SUBCLASSOF,RDFS.CONTAINER,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.SEQ,RDFS.SUBCLASSOF,RDFS.CONTAINER,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CONTAINERMEMBERSHIPPROPERTY,RDFS.SUBCLASSOF,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.ISDEFINEDBY,RDFS.SUBPROPERTYOF,RDFS.SEEALSO,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.XMLLITERAL,RDF.TYPE,RDFS.DATATYPE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.XMLLITERAL,RDFS.SUBCLASSOF,RDFS.LITERAL,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.DATATYPE,RDFS.SUBCLASSOF,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.RESOURCE,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.OBJECT,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.REST,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.XMLLITERAL,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.NIL,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.FIRST,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.VALUE,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.SUBJECT,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.TYPE,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.PREDICATE,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.RESOURCE,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.DOMAIN,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.RESOURCE,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CLASS,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.PROPERTY,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CLASS,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.DOMAIN,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.PROPERTY,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.DOMAIN,RDFS.SUBPROPERTYOF,RDFS.DOMAIN,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CLASS,RDFS.SUBCLASSOF,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.PROPERTY,RDFS.SUBCLASSOF,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CLASS,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.PROPERTY,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.DATATYPE,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CONTAINERMEMBERSHIPPROPERTY,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SEEALSO,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.RANGE,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SEEALSO,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.RANGE,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SEEALSO,RDFS.SUBPROPERTYOF,RDFS.SEEALSO,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.RANGE,RDFS.SUBPROPERTYOF,RDFS.RANGE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.STATEMENT,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.STATEMENT,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.STATEMENT,RDFS.SUBCLASSOF,RDF.STATEMENT,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.STATEMENT,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.LITERAL,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.LABEL,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.LABEL,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.LITERAL,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.LITERAL,RDFS.SUBCLASSOF,RDFS.LITERAL,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.LABEL,RDFS.SUBPROPERTYOF,RDFS.LABEL,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.LITERAL,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.XMLLITERAL,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CONTAINER,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.ALT,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SUBCLASSOF,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.ALT,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CONTAINER,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CONTAINER,RDFS.SUBCLASSOF,RDFS.CONTAINER,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.ALT,RDFS.SUBCLASSOF,RDF.ALT,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SUBCLASSOF,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SUBCLASSOF,RDFS.SUBPROPERTYOF,RDFS.SUBCLASSOF,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CONTAINER,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.ALT,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.SEQ,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.BAG,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.OBJECT,RDFS.SUBPROPERTYOF,RDF.OBJECT,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.MEMBER,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.MEMBER,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.MEMBER,RDFS.SUBPROPERTYOF,RDFS.MEMBER,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.ISDEFINEDBY,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SUBPROPERTYOF,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SUBPROPERTYOF,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.ISDEFINEDBY,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.ISDEFINEDBY,RDFS.SUBPROPERTYOF,RDFS.ISDEFINEDBY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.SUBPROPERTYOF,RDFS.SUBPROPERTYOF,RDFS.SUBPROPERTYOF,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.DATATYPE,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.XMLLITERAL,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.DATATYPE,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.DATATYPE,RDFS.SUBCLASSOF,RDFS.DATATYPE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.XMLLITERAL,RDFS.SUBCLASSOF,RDF.XMLLITERAL,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.REST,RDFS.SUBPROPERTYOF,RDF.REST,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.SEQ,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.SEQ,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.SEQ,RDFS.SUBCLASSOF,RDF.SEQ,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.LIST,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.LIST,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.LIST,RDFS.SUBCLASSOF,RDF.LIST,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.LIST,RDFS.SUBCLASSOF,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.COMMENT,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.COMMENT,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.COMMENT,RDFS.SUBPROPERTYOF,RDFS.COMMENT,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.BAG,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.BAG,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.BAG,RDFS.SUBCLASSOF,RDF.BAG,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.FIRST,RDFS.SUBPROPERTYOF,RDF.FIRST,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.VALUE,RDFS.SUBPROPERTYOF,RDF.VALUE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CONTAINERMEMBERSHIPPROPERTY,RDF.TYPE,RDFS.CLASS,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CONTAINERMEMBERSHIPPROPERTY,RDFS.SUBCLASSOF,RDFS.CONTAINERMEMBERSHIPPROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDFS.CONTAINERMEMBERSHIPPROPERTY,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.SUBJECT,RDFS.SUBPROPERTYOF,RDF.SUBJECT,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.TYPE,RDFS.SUBPROPERTYOF,RDF.TYPE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(RDF.PREDICATE,RDFS.SUBPROPERTYOF,RDF.PREDICATE,null,StatementEnum.Axiom));}  }
class C{  public void testLegacyIntMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyIntField("value",-1,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyIntField("value",4,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_INTEGER));  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sortField=new SortField("value",SortField.Type.INT);  sortField.setMissingValue(Integer.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public static boolean sendMail(String receiver,String subject,String msg){  String mailCommand="mailx";  String os=System.getProperty("os.name");  if (os != null && os.toUpperCase().contains("WIN"))   return false;  logger.info("Sending email to " + receiver + " regarding "+ subject);  String[] cmd={mailCommand,"-s",subject,receiver};  try {    Process p=Runtime.getRuntime().exec(cmd);    Writer w=new java.io.OutputStreamWriter(p.getOutputStream());    w.append(msg);    w.flush();    w.close();    p.waitFor();    logger.info("Mail exitValue=" + p.exitValue());    return true;  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Error when send mail",ex);  }  return false;}  }
class C{  public static void main(String... args){  String testSrc=System.getProperty("test.src");  File baseDir=(testSrc == null) ? null : new File(testSrc);  boolean ok=new CheckAttributedTree().run(baseDir,args);  if (!ok) {    if (testSrc != null)     throw new Error("failed"); else     System.exit(1);  }}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding,boolean append) throws IOException {  writeLines(file,null,lines,lineEnding,append);}  }
class C{  public Integer loadIdNameParentValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadIdNameValues");  _id=statement.getLongInteger(index++);  _name=statement.getShortText(index++);  _parentId=statement.getLongInteger(index++);  _type=statement.getLongInteger(index++);  return new Integer(index);}  }
class C{  public T pop(){  --size;  T item=items[size];  items[size]=null;  return item;}  }
class C{  @SideEffectFree public XMLStreamException(@Nullable String msg,Location location,@Nullable Throwable th){  super("ParseError at [row,col]:[" + location.getLineNumber() + ","+ location.getColumnNumber()+ "]\n"+ "Message: "+ msg);  nested=th;  this.location=location;}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  public void clear(){  if (hasChanged) {    pages.clear();  }  hasChanged=false;}  }
class C{  public ElasticSearchTransportClient(String[] hostNames,String clusterName,ElasticSearchEventSerializer serializer){  configureHostnames(hostNames);  this.serializer=serializer;  openClient(clusterName);}  }
class C{  public static long multiplyWith8(long n){  return (n << 3);}  }
class C{  public boolean hasStartTime(){  return super.hasAttribute(START_TIME);}  }
class C{  public NATURAL_INNER_JOIN NATURAL_INNER_JOIN(String tableToJoin){  return new NATURAL_INNER_JOIN(this,tableToJoin);}  }
class C{  public void ignoreNode(){  Node node=getCurrentNode();  if (node != null) {    ignoredNodes.add(node);  }}  }
class C{  private void initInfo(int record_id,String value,String whereClause){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {    } else {      String sra=Env.getContext(Env.getCtx(),p_WindowNo,"S_ResourceAssignment_ID");      if (sra != null && sra.length() != 0) {        fieldID=new Integer(sra).intValue();      }      String srt=Env.getContext(Env.getCtx(),p_WindowNo,"S_ResourceType_ID");      if (srt != null && srt.length() > 0) {        fieldResourceType.setValue(new Integer(srt));      }      String sr=Env.getContext(Env.getCtx(),p_WindowNo,"S_Resource_ID");      if (sr != null && sr.length() > 0) {        fieldResource.setValue(new Integer(sr));      }    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int i;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[] data;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] == noData) {          output.setValue(row,col,0);        } else {          output.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SnippetHighlighter(){  drawsLayeredHighlights=true;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getHeight(),display.getWidth());  Log.d(TAG,"Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,screenResolution);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void close(){  panel.dispose();}  }
class C{  public final void pushCurrentNode(int n){  m_currentNodes.push(n);}  }
class C{  public NodeSetDTM mutableNodeset() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_MUTABLENODELIST,new Object[]{getTypeString()});  return (NodeSetDTM)m_obj;}  }
class C{  public void cancel(){  this.selectedName.setText("");  this.selectedValue.setText("");  setEditing(false);}  }
class C{  public UrlBasedViewResolverRegistration suffix(String suffix){  this.viewResolver.setSuffix(suffix);  return this;}  }
class C{  protected IEEE802154Message(){}  }
class C{  public static String encodeAll(final String unescaped) throws URIException {  return encodeAll(unescaped,URI.getDefaultProtocolCharset());}  }
class C{  public void test_setStartRuleIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"Test_TZ");  st.setStartRule(Calendar.NOVEMBER,1,1);  st.setEndRule(Calendar.DECEMBER,1,1);  assertTrue("StartRule improperly set",st.useDaylightTime());  assertTrue("StartRule improperly set",st.inDaylightTime((new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime())));  assertTrue("StartRule improperly set",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  try {    st.setStartRule(13,20,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(1,32,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(1,30,10);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  protected void complete(){  this.isComplete=true;  if (hasNext()) {    this.pipeline.taskDispatcher().accept(this.nextTask);  }}  }
class C{  public VectorApproximation calculateApproximation(DBID id,V dv){  int[] approximation=new int[dv.getDimensionality()];  for (int d=0; d < splitPositions.length; d++) {    final double val=dv.doubleValue(d);    final int lastBorderIndex=splitPositions[d].length - 1;    if (val < splitPositions[d][0]) {      approximation[d]=0;      if (id != null) {        LOG.warning("Vector outside of VAFile grid!");      }    } else     if (val > splitPositions[d][lastBorderIndex]) {      approximation[d]=lastBorderIndex - 1;      if (id != null) {        LOG.warning("Vector outside of VAFile grid!");      }    } else {      int pos=Arrays.binarySearch(splitPositions[d],val);      pos=(pos >= 0) ? pos : ((-pos) - 2);      approximation[d]=pos;    }  }  return new VectorApproximation(id,approximation);}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isInHalfPlane(int quad,int halfPlane){  if (halfPlane == SE) {    return quad == SE || quad == SW;  }  return quad == halfPlane || quad == halfPlane + 1;}  }
class C{  @Override public void close() throws IOException {  PipedInputStream stream=target;  if (stream != null) {    stream.done();    target=null;  }}  }
class C{  public static synchronized LogStream switchLog(final String log){  final File newLog=new File(log);  return switchLog(newLog);}  }
class C{  public void stop(){  if (mExternalCapabilityMonitoring != null) {    mCtx.unregisterReceiver(mExternalCapabilityMonitoring);    mExternalCapabilityMonitoring=null;  }  mUpdateExecutor.shutdownNow();}  }
class C{  private void filtro(String valor,ObservableList<Local> listaLocal){  FilteredList<Local> dadosFiltrados=new FilteredList<>(listaLocal,null);  dadosFiltrados.setPredicate(null);  SortedList<Local> dadosOrdenados=new SortedList<>(dadosFiltrados);  dadosOrdenados.comparatorProperty().bind(tbLocal.comparatorProperty());  Filtro.mensagem(legenda,dadosOrdenados.size(),"Quantidade de locais encontradas");  tbLocal.setItems(dadosOrdenados);}  }
class C{  public float slotWaste(){  if (usedStore() == 0)   return 0.0f;  final BigDecimal size=new BigDecimal(reservedStore());  final BigDecimal store=new BigDecimal(100 * (reservedStore() - usedStore()));  if (size.signum() == 0)   return 0f;  return store.divide(size,2,RoundingMode.HALF_UP).floatValue();}  }
class C{  public void removeGefaehrdungsBaumChild(IGefaehrdungsBaumElement child){  if (child instanceof CnATreeElement) {    removeChild((CnATreeElement)child);  }}  }
class C{  public static int size(final double error){  if (error < 0 && error > 1) {    throw new IllegalArgumentException("error should be in [0 .. 1]");  }  return (int)(1 / (error * error));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.787 -0400",hash_original_method="04EF0EF110937D61EB0AEE30F11FF81B",hash_generated_method="CCC1AA8CF3A7F6B6868B64FFEF5C87C5") private void onDevicePropertyChanged(String deviceObjectPath,String[] propValues){  String name=propValues[0];  String address=mBluetoothService.getAddressFromObjectPath(deviceObjectPath);  if (address == null) {    Log.e(TAG,"onDevicePropertyChanged: Address of the remote device in null");    return;  }  log("Device property changed: " + address + " property: "+ name+ " value: "+ propValues[1]);  BluetoothDevice device=mAdapter.getRemoteDevice(address);  if (name.equals("Name")) {    mBluetoothService.setRemoteDeviceProperty(address,name,propValues[1]);    Intent intent=new Intent(BluetoothDevice.ACTION_NAME_CHANGED);    intent.putExtra(BluetoothDevice.EXTRA_DEVICE,device);    intent.putExtra(BluetoothDevice.EXTRA_NAME,propValues[1]);    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);    mContext.sendBroadcast(intent,BLUETOOTH_PERM);  } else   if (name.equals("Alias")) {    mBluetoothService.setRemoteDeviceProperty(address,name,propValues[1]);  } else   if (name.equals("Class")) {    mBluetoothService.setRemoteDeviceProperty(address,name,propValues[1]);    Intent intent=new Intent(BluetoothDevice.ACTION_CLASS_CHANGED);    intent.putExtra(BluetoothDevice.EXTRA_DEVICE,device);    intent.putExtra(BluetoothDevice.EXTRA_CLASS,new BluetoothClass(Integer.valueOf(propValues[1])));    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);    mContext.sendBroadcast(intent,BLUETOOTH_PERM);  } else   if (name.equals("Connected")) {    mBluetoothService.setRemoteDeviceProperty(address,name,propValues[1]);    Intent intent=null;    if (propValues[1].equals("true")) {      intent=new Intent(BluetoothDevice.ACTION_ACL_CONNECTED);      if (mBluetoothService.isBluetoothDock(address)) {        mBluetoothService.setLinkTimeout(address,8000);      }    } else {      intent=new Intent(BluetoothDevice.ACTION_ACL_DISCONNECTED);    }    intent.putExtra(BluetoothDevice.EXTRA_DEVICE,device);    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);    mContext.sendBroadcast(intent,BLUETOOTH_PERM);  } else   if (name.equals("UUIDs")) {    String uuid=null;    int len=Integer.valueOf(propValues[1]);    if (len > 0) {      StringBuilder str=new StringBuilder();      for (int i=2; i < propValues.length; i++) {        str.append(propValues[i]);        str.append(",");      }      uuid=str.toString();    }    mBluetoothService.setRemoteDeviceProperty(address,name,uuid);    mBluetoothService.updateDeviceServiceChannelCache(address);    mBluetoothService.sendUuidIntent(address);  } else   if (name.equals("Paired")) {    if (propValues[1].equals("true")) {      if (null == mBluetoothService.getPendingOutgoingBonding()) {        mBluetoothService.setBondState(address,BluetoothDevice.BOND_BONDED);      }    } else {      mBluetoothService.setBondState(address,BluetoothDevice.BOND_NONE);      mBluetoothService.setRemoteDeviceProperty(address,"Trusted","false");    }  } else   if (name.equals("Trusted")) {    if (DBG)     log("set trust state succeeded, value is: " + propValues[1]);    mBluetoothService.setRemoteDeviceProperty(address,name,propValues[1]);  }}  }
class C{  private final double[] prune(Tree tree,NodeRef node,ColourChangeMatrix mm,double[] N){  double[] p=new double[colourCount];  if (tree.isExternal(node)) {    p[getColour(node)]=1.0;    return p;  }  NodeRef leftChild=tree.getChild(node,0);  NodeRef rightChild=tree.getChild(node,1);  double[] left=prune(tree,leftChild,mm,N);  double[] right=prune(tree,rightChild,mm,N);  double nodeHeight=tree.getNodeHeight(node);  double leftTime=nodeHeight - tree.getNodeHeight(tree.getChild(node,0));  double rightTime=nodeHeight - tree.getNodeHeight(tree.getChild(node,1));  for (int i=0; i < p.length; i++) {    double leftSum=0.0;    double rightSum=0.0;    for (int j=0; j < left.length; j++) {      leftSum+=left[j] * mm.forwardTimeEvolution(i,j,leftTime);      rightSum+=right[j] * mm.forwardTimeEvolution(i,j,rightTime);    }    p[i]=leftSum * rightSum;  }  nodePartials[node.getNumber()]=p;  return p;}  }
class C{  private synchronized void startImsConnection(){  if (mImsPollingThreadId >= 0) {    return;  }  if (sLogger.isActivated()) {    sLogger.info("Start the IMS connection manager");  }  mImsPollingThread=new Thread(this);  mImsPollingThreadId=mImsPollingThread.getId();  mImsPollingThread.start();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Collection<Node> matchingScenariosAndExamples(final Feature feature){  final List<ScenarioDefinition> allScenarios=feature.getScenarioDefinitions();  final List<Node> matchingScenariosAndExamples=new LinkedList<Node>();  for (  final ScenarioDefinition scenario : allScenarios) {    final Set<Tag> allTagsForScenario=new HashSet<Tag>(scenario.getTags());    allTagsForScenario.addAll(feature.getTags());    if (scenario instanceof ScenarioOutline) {      matchingScenariosAndExamples.addAll(matchingExamples((ScenarioOutline)scenario,allTagsForScenario));    } else {      if (matches(allTagsForScenario)) {        matchingScenariosAndExamples.add(scenario);      }    }  }  return matchingScenariosAndExamples;}  }
class C{  public int maxDoc(){  return maxDoc;}  }
class C{  public boolean put(double key,int value){  int i=indexOfInsertion(key);  if (i < 0) {    i=-i - 1;    this.values[i]=value;    return false;  }  if (this.distinct > this.highWaterMark) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);    return put(key,value);  }  this.table[i]=key;  this.values[i]=value;  if (this.state[i] == FREE)   this.freeEntries--;  this.state[i]=FULL;  this.distinct++;  if (this.freeEntries < 1) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  @Override public Object clone(){  return GenericPK.create(this);}  }
class C{  protected final void SSE2_FPCONSTANT(Instruction s){  RegisterOperand res=Binary.getResult(s);  Operand val=Binary.getVal2(s);  if (val.isFloatConstant() && Float.floatToRawIntBits(val.asFloatConstant().value) == 0) {    EMIT(MIR_BinaryAcc.mutate(s,IA32_XORPS,res,res.copyRO()));  } else   if (val.isDoubleConstant() && Double.doubleToRawLongBits(val.asDoubleConstant().value) == 0L) {    EMIT(MIR_BinaryAcc.mutate(s,IA32_XORPD,res,res.copyRO()));  } else {    EMIT(MIR_Move.mutate(s,SSE2_MOVE(res),res,MO_MC(s)));  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int variant(){  return variant;}  }
class C{  public DefaultContext(BridgeContext ctx,Element e){  this.ctx=ctx;  this.e=e;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int readBuffer(byte[] dst,int offset){  limit+=Length.StatusFlags;  int length=mem.getInt(limit);  limit+=Length.Metadata;  mem.getBytes(limit,dst,offset,length);  limit+=recordSize;  return length;}  }
class C{  @LogMessageDoc(level="ERROR",message="Failure sending LLDP out port {port} on switch {switch}",explanation="An I/O error occured while sending LLDP message " + "to the switch.",recommendation=LogMessageDoc.CHECK_SWITCH) protected void sendDiscoveryMessage(long sw,short port,boolean isStandard,boolean isReverse){  if (!isOutgoingDiscoveryAllowed(sw,port,isStandard,isReverse))   return;  IOFSwitch iofSwitch=floodlightProvider.getSwitch(sw);  OFPhysicalPort ofpPort=iofSwitch.getPort(port).toOFPhysicalPort();  if (log.isTraceEnabled()) {    log.trace("Sending LLDP packet out of swich: {}, port: {}",HexString.toHexString(sw),port);  }  OFPacketOut po=generateLLDPMessage(sw,port,isStandard,isReverse);  List<OFAction> actions=getDiscoveryActions(iofSwitch,ofpPort);  po.setActions(actions);  short actionLength=0;  Iterator<OFAction> actionIter=actions.iterator();  while (actionIter.hasNext()) {    actionLength+=actionIter.next().getLength();  }  po.setActionsLength(actionLength);  po.setLengthU(po.getLengthU() + po.getActionsLength());  try {    iofSwitch.write(po,null);    iofSwitch.flush();  } catch (  IOException e) {    log.error("Failure sending LLDP out port {} on switch {}",new Object[]{port,iofSwitch.getStringId()},e);  }}  }
class C{  private void resetTextAnimation(View v){  ViewHelper.setAlpha(v,!mIsMenuOpen ? 0 : 1);  ViewHelper.setTranslationX(v,!mIsMenuOpen ? mMenuItemSize : 0);}  }
class C{  public static CRC check(BitSet msg){  CRC crc=CRC.UNKNOWN;  int calculated=1;  if (msg.cardinality() % 2 == 0) {    for (int i=msg.nextSetBit(0); i >= 0 && i < 48; i=msg.nextSetBit(i + 1)) {      calculated^=sCHECKSUMS[i];    }    if (calculated == getChecksum(msg)) {      crc=CRC.PASSED;    } else {      crc=CRC.FAILED_CRC;    }  } else {    crc=CRC.FAILED_PARITY;  }  return crc;}  }
class C{  private Object writeReplace() throws java.io.ObjectStreamException {  return new KeyRep(KeyRep.Type.SECRET,getAlgorithm(),getFormat(),getEncoded());}  }
class C{  public void updateUI(){  setUI((ViewportUI)UIManager.getUI(this));}  }
class C{  public NSDate(byte[] bytes,final int startIndex,final int endIndex){  date=new Date(EPOCH + (long)(1000 * BinaryPropertyListParser.parseDouble(bytes,startIndex,endIndex)));}  }
class C{  public static <T,P>int detectIndexWith(List<T> list,Predicate2<? super T,? super P> predicate,P parameter){  if (list instanceof RandomAccess) {    return RandomAccessListIterate.detectIndexWith(list,predicate,parameter);  }  return IterableIterate.detectIndexWith(list,predicate,parameter);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void print(int inum){  print(String.valueOf(inum));}  }
class C{  public ImageSource tiling(boolean tile){  this.tile=tile;  return this;}  }
class C{  public void pushDirname(File directory){  if (!directory.isDirectory()) {    throw new IllegalArgumentException("Only directories may be pushed!");  }  mDirectories.insert(directory.getName(),0);  mCurrentDir=directory;}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public static List arrayToList(Object source){  return Arrays.asList(ObjectUtils.toObjectArray(source));}  }
class C{  public static void assumeNull(Object object,final String assumptionMessage,Object... params){  final boolean cond=object == null;  assume(cond,assumptionMessage,params);}  }
class C{  RangeBase(RangeHolder rangeHolder){  this.rangeHolder=rangeHolder;  this.isLessThan=rangeHolder.isLessThan();  this.rangeValues=rangeHolder.getEndPoints();  int len=rangeValues.length;  frequencyDist=new FrequencyDistBase[len + 1];  for (int i=0; i < len; i++) {    RangeHolder.RangeHolderItem item=rangeHolder.get(i);    frequencyDist[i]=new FrequencyDistBase(item.getDisplayHeader(),item.getEndPoint(),getFreqDistName(i));  }  frequencyDist[len]=new FrequencyDistBase(getLastHeader(),Double.MAX_VALUE,getFreqDistName(len));}  }
class C{  private TextAnchor textAlignPtForLabelAnchorV(RectangleAnchor anchor){  TextAnchor result=TextAnchor.CENTER;  if (anchor.equals(RectangleAnchor.TOP_LEFT)) {    result=TextAnchor.TOP_RIGHT;  } else   if (anchor.equals(RectangleAnchor.TOP)) {    result=TextAnchor.TOP_CENTER;  } else   if (anchor.equals(RectangleAnchor.TOP_RIGHT)) {    result=TextAnchor.TOP_LEFT;  } else   if (anchor.equals(RectangleAnchor.LEFT)) {    result=TextAnchor.HALF_ASCENT_RIGHT;  } else   if (anchor.equals(RectangleAnchor.RIGHT)) {    result=TextAnchor.HALF_ASCENT_LEFT;  } else   if (anchor.equals(RectangleAnchor.BOTTOM_LEFT)) {    result=TextAnchor.BOTTOM_RIGHT;  } else   if (anchor.equals(RectangleAnchor.BOTTOM)) {    result=TextAnchor.BOTTOM_CENTER;  } else   if (anchor.equals(RectangleAnchor.BOTTOM_RIGHT)) {    result=TextAnchor.BOTTOM_LEFT;  }  return result;}  }
class C{  @Override public String toString(){  return text.toString();}  }
class C{  private void updateExcludeRelCanonicalRegardingRef(){  for (  Parameter param : paramSet) {    if (param.getParameterElement().getParameterElementCode().equals("LEVEL")) {      String level=param.getValue().split(";")[0];      if (keepRelCanonicalRefList.contains(level)) {        LOGGER.info("Rel canonical pages are kept for ref " + level);        excludeRelCanonical=false;      } else {        LOGGER.info("Rel canonical pages are excluded for ref " + level);      }      break;    }  }}  }
class C{  public void componentRemoved(final ContainerEvent e){  final Component child=e.getChild();  if (!(child instanceof JMenu))   return;  removeSubmenu((JMenu)child);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.132 -0500",hash_original_method="9EAB8438172711193BA945D78BF156AE",hash_generated_method="6079F24DCCF84F8A2034CB9B0484C6F5") public InputSource resolveEntity(String publicId,String systemId) throws IOException, SAXException {  return null;}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  public static Instance calcPivot(BallNode child1,BallNode child2,Instances insts) throws Exception {  Instance p1=child1.getPivot(), p2=child2.getPivot();  double[] attrVals=new double[p1.numAttributes()];  for (int j=0; j < attrVals.length; j++) {    attrVals[j]+=p1.value(j);    attrVals[j]+=p2.value(j);    attrVals[j]/=2D;  }  p1=new DenseInstance(1.0,attrVals);  return p1;}  }
class C{  private DateTime createNextRecurringDateTime(final String recurrencePattern,final DateTime startDateTime){  DateTime nextRecurringDateTime=null;  if (StringUtils.isNotBlank(recurrencePattern) && startDateTime != null) {    final LocalDate nextDayLocalDate=startDateTime.plus(1).toLocalDate();    final LocalDate nextRecurringLocalDate=CalendarUtils.getNextRecurringDate(recurrencePattern,startDateTime.toLocalDate(),nextDayLocalDate);    final String nextDateTimeString=nextRecurringLocalDate + " " + startDateTime.getHourOfDay()+ ":"+ startDateTime.getMinuteOfHour()+ ":"+ startDateTime.getSecondOfMinute();    final DateTimeFormatter dateTimeFormatter=DateTimeFormat.forPattern(DATETIME_FORMAT);    nextRecurringDateTime=DateTime.parse(nextDateTimeString,dateTimeFormatter);  }  return nextRecurringDateTime;}  }
