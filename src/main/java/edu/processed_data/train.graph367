class C{  public void assertEquals(java.util.Date expected,java.util.Date actual){  if (expected != actual && !expected.equals(actual)) {    DateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");    SimpleTimeZone gmt=new SimpleTimeZone(0,"Z");    df.setTimeZone(gmt);    fail("Expected: " + df.format(expected) + " actual: "+ df.format(actual));  }}  }
class C{  private PhrasePositions[] repeatingPPs(HashMap<Term,Integer> rptTerms){  ArrayList<PhrasePositions> rp=new ArrayList<>();  for (  PhrasePositions pp : phrasePositions) {    for (    Term t : pp.terms) {      if (rptTerms.containsKey(t)) {        rp.add(pp);        hasMultiTermRpts|=(pp.terms.length > 1);        break;      }    }  }  return rp.toArray(new PhrasePositions[0]);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  public boolean isCanReport(int AD_Table_ID){  if (!isCanReport()) {    log.warning("Role denied");    return false;  }  if (!isTableAccess(AD_Table_ID,true))   return false;  boolean canReport=true;  for (int i=0; i < m_tableAccess.length; i++) {    if (!X_AD_Table_Access.ACCESSTYPERULE_Reporting.equals(m_tableAccess[i].getAccessTypeRule()))     continue;    if (m_tableAccess[i].isExclude()) {      if (m_tableAccess[i].getAD_Table_ID() == AD_Table_ID) {        canReport=m_tableAccess[i].isCanReport();        log.fine("Exclude " + AD_Table_ID + " - "+ canReport);        return canReport;      }    } else {      canReport=false;      if (m_tableAccess[i].getAD_Table_ID() == AD_Table_ID) {        canReport=m_tableAccess[i].isCanReport();        log.fine("Include " + AD_Table_ID + " - "+ canReport);        return canReport;      }    }  }  log.fine(AD_Table_ID + " - " + canReport);  return canReport;}  }
class C{  private Invocation createInvocation(QueryDescriptor descriptor,Example example){  final List<Object> values=new ArrayList<>();  final List<List<Parameter>> branches=descriptor.getBranches();  final List<Parameter> parameters=branches.get(0);  for (  Parameter parameter : parameters) {    final String propertyPath=parameter.getPath();    final Object propertyValue=PropertyUtils.getPropertyValue(example.getProbe(),propertyPath);    final ExampleMatcher.PropertySpecifier specifier=example.getMatcher().getPropertySpecifiers().getForPath(propertyPath);    values.add(specifier == null ? propertyValue : specifier.getPropertyValueTransformer().convert(propertyValue));  }  return new ImmutableInvocation(null,values.toArray());}  }
class C{  public Csch(){  super("csch",1);}  }
class C{  private void show(SetupWindow window){  window.handleWindowOpeningEvent();  _setupWindowHolder.show(window.getKey());  _currentWindow=window;}  }
class C{  protected double kernelHelper(int n,char[] s,int endIndexS,char[] t,int endIndexT){  if (n <= 0) {    return getReturnValue(n);  }  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {    return getReturnValue(n);  }  int adr=0;  if (m_useRecursionCache) {    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;    if (cachekhK[adr % maxCache] == adr + 1) {      return cachekh[adr % maxCache];    }  }  double result=0;  result=m_lambda * kernelHelper(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);  if (m_useRecursionCache) {    cachekhK[adr % maxCache]=adr + 1;    cachekh[adr % maxCache]=result;  }  return result;}  }
class C{  protected Caret createCaret(){  return new WindowsFieldCaret();}  }
class C{  public boolean isFunctionRow(){  return m_functionRows.contains(new Integer(m_row));}  }
class C{  public static synchronized void loadProperties(){  if (BEAN_PROPERTIES == null) {    weka.core.WekaPackageManager.loadPackages(false);    weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"[KnowledgeFlow] Loading properties and plugins...");    try {      BEAN_PROPERTIES=Utils.readProperties(PROPERTY_FILE);      java.util.Enumeration<?> keys=BEAN_PROPERTIES.propertyNames();      if (!keys.hasMoreElements()) {        throw new Exception("Could not read a configuration file for the bean\n" + "panel. An example file is included with the Weka distribution.\n" + "This file should be named \"" + PROPERTY_FILE + "\" and\n"+ "should be placed either in your user home (which is set\n"+ "to \""+ System.getProperties().getProperty("user.home")+ "\")\n"+ "or the directory that java was started from\n");      }    } catch (    Exception ex) {      JOptionPane.showMessageDialog(null,ex.getMessage(),"KnowledgeFlow",JOptionPane.ERROR_MESSAGE);    }    if (VISIBLE_PERSPECTIVES == null) {      Properties pp=new Properties();      pp.setProperty("weka.gui.beans.KnowledgeFlow.Perspectives","weka.gui.beans.ScatterPlotMatrix,weka.gui.beans.AttributeSummarizer," + "weka.gui.beans.SQLViewerPerspective");      BEAN_PLUGINS_PROPERTIES.add(pp);      VISIBLE_PERSPECTIVES=new TreeSet<String>();      try {        Properties visible=Utils.readProperties(VISIBLE_PERSPECTIVES_PROPERTIES_FILE);        Enumeration<?> keys=visible.propertyNames();        if (keys.hasMoreElements()) {          String listedPerspectives=visible.getProperty("weka.gui.beans.KnowledgeFlow.SelectedPerspectives");          if (listedPerspectives != null && listedPerspectives.length() > 0) {            StringTokenizer st=new StringTokenizer(listedPerspectives,", ");            while (st.hasMoreTokens()) {              String perspectiveName=st.nextToken().trim();              weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Adding perspective " + perspectiveName + " to visible list");              VISIBLE_PERSPECTIVES.add(perspectiveName);            }          }        }      } catch (      Exception ex) {        JOptionPane.showMessageDialog(null,ex.getMessage(),"KnowledgeFlow",JOptionPane.ERROR_MESSAGE);      }    }  }  if (TEMPLATE_PATHS == null) {    TEMPLATE_PATHS=new ArrayList<String>();    TEMPLATE_DESCRIPTIONS=new ArrayList<String>();    try {      Properties templateProps=Utils.readProperties(TEMPLATE_PROPERTY_FILE);      String paths=templateProps.getProperty("weka.gui.beans.KnowledgeFlow.templates");      String descriptions=templateProps.getProperty("weka.gui.beans.KnowledgeFlow.templates.desc");      if (paths == null || paths.length() == 0) {        weka.core.logging.Logger.log(weka.core.logging.Logger.Level.WARNING,"[KnowledgeFlow] WARNING: no templates found in classpath");      } else {        String[] templates=paths.split(",");        String[] desc=descriptions.split(",");        if (templates.length != desc.length) {          throw new Exception("Number of template descriptions does " + "not match number of templates.");        }        for (        String template : templates) {          TEMPLATE_PATHS.add(template.trim());        }        for (        String d : desc) {          TEMPLATE_DESCRIPTIONS.add(d.trim());        }      }    } catch (    Exception ex) {      JOptionPane.showMessageDialog(null,ex.getMessage(),"KnowledgeFlow",JOptionPane.ERROR_MESSAGE);    }  }  if (!s_pluginManagerIntialized && BEAN_PLUGINS_PROPERTIES != null && BEAN_PLUGINS_PROPERTIES.size() > 0) {    for (int i=0; i < BEAN_PLUGINS_PROPERTIES.size(); i++) {      Properties tempP=BEAN_PLUGINS_PROPERTIES.get(i);      String offscreenRenderers=tempP.getProperty("weka.gui.beans.OffscreenChartRenderer");      if (offscreenRenderers != null && offscreenRenderers.length() > 0) {        String[] parts=offscreenRenderers.split(",");        for (        String renderer : parts) {          renderer=renderer.trim();          try {            Object p=Class.forName(renderer).newInstance();            if (p instanceof OffscreenChartRenderer) {              String name=((OffscreenChartRenderer)p).rendererName();              PluginManager.addPlugin("weka.gui.beans.OffscreenChartRenderer",name,renderer);              weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"[KnowledgeFlow] registering chart rendering " + "plugin: " + renderer);            }          } catch (          Exception ex) {            weka.core.logging.Logger.log(weka.core.logging.Logger.Level.WARNING,"[KnowledgeFlow] WARNING: " + "unable to instantiate chart renderer \"" + renderer + "\"");            ex.printStackTrace();          }        }      }      String templatePaths=tempP.getProperty("weka.gui.beans.KnowledgeFlow.templates");      String templateDesc=tempP.getProperty("weka.gui.beans.KnowledgeFlow.templates.desc");      if (templatePaths != null && templatePaths.length() > 0 && templateDesc != null && templateDesc.length() > 0) {        String[] templates=templatePaths.split(",");        String[] desc=templateDesc.split(",");        if (templates.length == desc.length) {          for (int kk=0; kk < templates.length; kk++) {            String pth=templates[kk];            String d=desc[kk];            if (!TEMPLATE_PATHS.contains(pth)) {              TEMPLATE_PATHS.add(pth.trim());              TEMPLATE_DESCRIPTIONS.add(d.trim());            }          }        }      }    }    s_pluginManagerIntialized=true;  }}  }
class C{  public void onPause(){  barcodeView.pause();  inactivityTimer.cancel();  beepManager.close();}  }
class C{  private boolean QNameEquals(String uri,String localName){  return (equalsMayBeNullOrZeroLen(m_namespace,uri) && (equalsMayBeNullOrZeroLen(m_name,localName) || equalsMayBeNullOrZeroLen(m_nameAlias,localName)));}  }
class C{  private String createString(String f){  StringBuffer sb=new StringBuffer();  int keys[]=getKeys();  for (int i=0; i < keys.length; i++) {    int key=keys[i];    sb.append(CUjit_option.stringFor(key) + "=");    Object value=map.get(key);    if (value instanceof byte[]) {      byte data[]=(byte[])value;      sb.append(createString(data));    } else {      sb.append(String.valueOf(value));    }    if (i < keys.length - 1) {      sb.append(f);    }  }  return sb.toString();}  }
class C{  public String toString(){  return this.toBigInteger(sign).toString();}  }
class C{  public static <T>FutureW<T> ofSupplier(final Supplier<T> s){  return FutureW.of(CompletableFuture.supplyAsync(s));}  }
class C{  public float dotProduct(Vector3f inputVec){  return points[0] * inputVec.points[0] + points[1] * inputVec.points[1] + points[2] * inputVec.points[2];}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static <K extends Comparable<?>,V>Builder<K,V> builder(){  return new Builder<K,V>();}  }
class C{  void startShutdown(ShutdownModeAmp mode,ExitCode exitCode,Result<String> result){  _shutdownMode=mode;  _shutdownResult.compareAndSet(null,result);  _shutdownExitCode.compareAndSet(null,exitCode);  wake();}  }
class C{  public MicroservicesRunner addExceptionMapper(ExceptionMapper... exceptionMapper){  checkState();  msRegistry.addExceptionMapper(exceptionMapper);  return this;}  }
class C{  @Override public void start() throws Throwable {  photonControllerXenonHost.startFactory(PlacementTaskService.class,null);}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=(Rectangle)a;  tabBase=alloc.x;  JTextComponent host=(JTextComponent)getContainer();  sel0=host.getSelectionStart();  sel1=host.getSelectionEnd();  unselected=(host.isEnabled()) ? host.getForeground() : host.getDisabledTextColor();  Caret c=host.getCaret();  selected=c.isSelectionVisible() && host.getHighlighter() != null ? host.getSelectedTextColor() : unselected;  g.setFont(host.getFont());  super.paint(g,a);}  }
class C{  public boolean calculatePivot(List<Pair> pairs){  boolean isPivot=false;  Collections.sort(pairs,Pair.X_VALUE_ASC);  int size=pairs.size();  if (size > 1) {    Pair[] userData=pairs.toArray(new Pair[]{});    double[] terms=MatrixFunctions.getCalculatedCoeffients(userData,_polyOrder);    double correlationCoeff=MatrixFunctions.getCorrelationCoefficient(userData,terms);    double standardError=MatrixFunctions.getStandardError(userData,terms);    if (correlationCoeff > _minCorrelationCoeff) {      isPivot=true;      String output=MatrixFunctions.toPrint(_polyOrder,correlationCoeff,standardError,terms,userData.length);      _log.debug("Pivot Calc: " + output);      for (      Pair pair : pairs) {        double y=MatrixFunctions.fx(pair.x,terms);        pair.y=y;      }    }  }  return isPivot;}  }
class C{  public void selectByText(final String text){  TestLogging.logWebStep("make selection using text\"" + text + "\" on "+ toHTML(),false);  findElement();  if (options == null) {    driver.findElement(By.xpath("//li[text()='" + text + "']")).click();    return;  }  for (  WebElement option : options) {    String selectedText=null;    if (option.getTagName().equalsIgnoreCase("li")) {      selectedText=option.getAttribute("title");    } else {      selectedText=option.getAttribute("text");    }    if (selectedText.equals(text)) {      setSelected(option);      break;    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.582 -0500",hash_original_method="451C86882BCD1F18856FAB1FCF2DF436",hash_generated_method="F8E80606B800F2ABAAD0D0C071CB8B17") public boolean hasHeaders(){  return getListView().getVisibility() == View.VISIBLE && mPreferenceManager == null;}  }
class C{  void showConfirmationBox(String message,Consumer<Boolean> resultCallback){  Text text=createMessage(message);  FXGLButton btnYes=new FXGLButton("YES");  btnYes.setOnAction(null);  FXGLButton btnNo=new FXGLButton("NO");  btnNo.setOnAction(null);  HBox hbox=new HBox(btnYes,btnNo);  hbox.setAlignment(Pos.CENTER);  VBox vbox=new VBox(50,text,hbox);  vbox.setAlignment(Pos.CENTER);  vbox.setUserData(new Point2D(Math.max(text.getLayoutBounds().getWidth(),400),text.getLayoutBounds().getHeight() * 2 + 50));  setContent("Confirmation",vbox);  show();}  }
class C{  public Jetty6InjectionProvider(){  injections=new InjectionCollection();  callbacks=new LifeCycleCallbackCollection();}  }
class C{  @SuppressWarnings("unchecked") public T message(){  return (T)message;}  }
class C{  public void addToList(List<String> paths,String s){  for (  String path : paths) {    if (path.equals(s)) {      return;    }  }  paths.add(s);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String[] split(CharSequence self){  StringTokenizer st=new StringTokenizer(self.toString());  String[] strings=new String[st.countTokens()];  for (int i=0; i < strings.length; i++) {    strings[i]=st.nextToken();  }  return strings;}  }
class C{  public void delete(){  m_model.dispose();  removeMouseListener(m_mouseListener);}  }
class C{  public ObjectQuery prepareObjectQuery(String query) throws MalformedQueryException, RepositoryException {  return createObjectQuery(prepareTupleQuery(query));}  }
class C{  public static void checkTextInSearchQuery(String query){  onView(isAssignableFrom(AutoCompleteTextView.class)).check(matches(withText(query)));}  }
class C{  @Override public void fromBytes(ByteBuf buf){  final int numStacks=buf.readInt();  itemStacks=new ItemStack[numStacks];  for (int i=0; i < numStacks; i++) {    itemStacks[i]=ByteBufUtils.readItemStack(buf);  }}  }
class C{  public Connection(final InetSocketAddress peerAddress){  this(peerAddress,(Handshaker)null);}  }
class C{  public boolean isReceiptCanceled(String receiptNumber){  final javax.persistence.Query qry=entityManager.createNamedQuery(QUERY_RECEIPTS_BY_RECEIPTNUM);  qry.setParameter(1,receiptNumber);  ReceiptHeader receiptHeader=(ReceiptHeader)qry.getSingleResult();  return receiptHeader.getStatus().getCode().equals(CollectionConstants.RECEIPT_STATUS_CODE_CANCELLED) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static IJavaProject createJavaProject(String projectName,String binFolderName) throws CoreException {  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  IProject project=root.getProject(projectName);  if (!project.exists()) {    project.create(null);  } else {    project.refreshLocal(IResource.DEPTH_INFINITE,null);  }  if (!project.isOpen()) {    project.open(null);  }  IPath outputLocation;  if (binFolderName != null && binFolderName.length() > 0) {    IFolder binFolder=project.getFolder(binFolderName);    if (!binFolder.exists()) {      CoreUtility.createFolder(binFolder,false,true,null);    }    outputLocation=binFolder.getFullPath();  } else {    outputLocation=project.getFullPath();  }  if (!project.hasNature(JavaCore.NATURE_ID)) {    addNatureToProject(project,JavaCore.NATURE_ID,null);  }  IJavaProject jproject=JavaCore.create(project);  jproject.setOutputLocation(outputLocation,null);  jproject.setRawClasspath(new IClasspathEntry[0],null);  return jproject;}  }
class C{  public static Scenario loadScenarioFromOutputDir(String outputDir){  String configFile=outputDir + "/output_config.xml";  String plansFile=outputDir + "/output_plans.xml.gz";  String networkFile=outputDir + "/output_network.xml.gz";  Config config=new Config();  config.addCoreModules();  ConfigReader configReader=new ConfigReader(config);  configReader.readFile(configFile);  config.plans().setInputFile(plansFile);  config.network().setInputFile(networkFile);  String personAttributeFile=outputDir + "/output_personAttributes.xml.gz";  if (new File(personAttributeFile).exists()) {    config.plans().setInputPersonAttributeFile(personAttributeFile);  }  String vehicleFile=outputDir + "/output_vehicles.xml.gz";  if (new File(vehicleFile).exists()) {    config.vehicles().setVehiclesFile(vehicleFile);  }  Scenario sc=ScenarioUtils.loadScenario(config);  sc.getConfig().controler().setOutputDirectory(outputDir);  return sc;}  }
class C{  public char current(){  return aci.current();}  }
class C{  protected Anonymous_program_1_Impl(){  super();}  }
class C{  public void enterpriseWipe(String code){  resultBuilder.build(code);  CommonUtils.clearAppData(context);  Intent intent=new Intent(context,ServerDetails.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public boolean isFullBST(){  return size == Math.pow(2,height()) - 1 ? true : false;}  }
class C{  public boolean isReply(){  return is(REPLY);}  }
class C{  public static int utf2chars(byte[] src,int sindex,char[] dst,int dindex,int len){  int i=sindex;  int j=dindex;  int limit=sindex + len;  while (i < limit) {    int b=src[i++] & 0xFF;    if (b >= 0xE0) {      b=(b & 0x0F) << 12;      b=b | (src[i++] & 0x3F) << 6;      b=b | (src[i++] & 0x3F);    } else     if (b >= 0xC0) {      b=(b & 0x1F) << 6;      b=b | (src[i++] & 0x3F);    }    dst[j++]=(char)b;  }  return j;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.N4_CLASS_EXPRESSION___GET_ANNOTATIONS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == Expression.class) {switch (baseOperationID) {case N4JSPackage.EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:  return N4JSPackage.N4_CLASS_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET;default :return -1;}}if (baseClass == PrimaryExpression.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == AnnotableExpression.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_EXPRESSION___GET_ANNOTATIONS:return N4JSPackage.N4_CLASS_EXPRESSION___GET_ANNOTATIONS;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.N4_CLASS_EXPRESSION___GET_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public boolean isReadOnly(){  if (m_TableArff == null) {    return true;  } else {    return ((ArffSortedTableModel)m_TableArff.getModel()).isReadOnly();  }}  }
class C{  private boolean removeConfigFile(File file){  if (file.exists()) {    for (    File file1 : file.listFiles()) {      if (file1.isDirectory()) {        removeConfigFile(file1);      } else {        boolean isDeleted=file1.delete();        if (!isDeleted) {          LOGGER.error("The file " + file1.getPath() + " cannot be deleted");        }      }    }  }  return (file.delete());}  }
class C{  protected Anonymous_enum_1_Impl(){  super();}  }
class C{  private void seekBackward(){switch (mMediaPlayerState) {case MediaPlayerState.STATE_PAUSED:case MediaPlayerState.STATE_PLAYING:    long seekTo=Long.parseLong(PreferenceManager.getDefaultSharedPreferences(this).getString(getString(R.string.pref_key_skip_backward),"30")) * 1000;  seekPlayerBy(-seekTo);break;default :Timber.w("Trying to play an episode, but player is in state: %s",mPlaybackState);break;}}  }
class C{  public boolean isShapeOutlineVisible(){  return this.shapeOutlineVisible;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___IS_PROVIDED_BY_RUNTIME:    return isProvidedByRuntime();case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___GET_TYPE_ACCESS_MODIFIER:  return getTypeAccessModifier();case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___IS_EXPORTED:return isExported();}return super.eInvoke(operationID,arguments);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean visitVariableRef(ExpressionOwner owner,Variable var){  m_refs.addElement(var.getQName());  return true;}  }
class C{  public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits){  return appendDecimal(DateTimeFieldType.weekOfWeekyear(),minDigits,2);}  }
class C{  public boolean isCoordinator(){  return this.isCoordinator;}  }
class C{  public void add(double[] vals,int offset,int length){  ensureCapacity(_pos + length);  System.arraycopy(vals,offset,_data,_pos,length);  _pos+=length;}  }
class C{  public Graphics create(){  return new ProxyGraphics2D((Graphics2D)mGraphics.create(),mPrinterJob);}  }
class C{  protected void finalize() throws Throwable {  this.currentReader.lineReader=null;  this.currentReader.pbReader=null;  this.currentReader.systemId=null;  this.currentReader.publicId=null;  this.currentReader=null;  this.readers.clear();  super.finalize();}  }
class C{  public void onDestroyView(@NonNull Fragment fragment){  if (component == null) {    return;  }  if (fragment.getActivity() != null && fragment.getActivity().isFinishing()) {    removeComponent();  }}  }
class C{  public MemoryLoader(final IDebugger debugger){  this.debugger=Preconditions.checkNotNull(debugger,"IE00822: Debugger can not be null");}  }
class C{  public NonNumericFeaturesException(String message){  super(message);}  }
class C{  public boolean commit() throws LoginException {  if (succeeded == false) {    return false;  } else {    if (subject.isReadOnly()) {      cleanState();      throw new LoginException("Subject is Readonly");    }    if (!subject.getPrincipals().contains(userPrincipal))     subject.getPrincipals().add(userPrincipal);    if (!subject.getPrincipals().contains(UIDPrincipal))     subject.getPrincipals().add(UIDPrincipal);    if (!subject.getPrincipals().contains(GIDPrincipal))     subject.getPrincipals().add(GIDPrincipal);    for (int i=0; i < supplementaryGroups.size(); i++) {      if (!subject.getPrincipals().contains(supplementaryGroups.get(i)))       subject.getPrincipals().add(supplementaryGroups.get(i));    }    if (debug) {      System.out.println("\t\t[JndiLoginModule]: " + "added UnixPrincipal,");      System.out.println("\t\t\t\tUnixNumericUserPrincipal,");      System.out.println("\t\t\t\tUnixNumericGroupPrincipal(s),");      System.out.println("\t\t\t to Subject");    }  }  cleanState();  commitSucceeded=true;  return true;}  }
class C{  DefaultShellFolder(ShellFolder parent,File f){  super(parent,f.getAbsolutePath());}  }
class C{  public JToolTip createToolTip(){  return new JMultiLineToolTip();}  }
class C{  public void makeIconPanel(boolean useDefaults){  if (useDefaults && _userDefaults) {    makeIcons(_defaultIcons);  }  clearIconPanel();  doIconPanel();}  }
class C{  public static Matrix instancesToMatrix(Instances inst){  double[][] darr=new double[inst.numInstances()][inst.numAttributes()];  for (int i=0; i < inst.numAttributes(); i++) {    for (int j=0; j < inst.attributeToDoubleArray(i).length; j++) {      darr[j][i]=inst.attributeToDoubleArray(i)[j];    }  }  return new Matrix(darr);}  }
class C{  private FloatDataBox(int rows,int cols){  this.data=new float[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      data[i][j]=Float.NaN;    }  }}  }
class C{  public BooleanQueryResultFormat(String name,Collection<String> mimeTypes,Charset charset,Collection<String> fileExtensions){  super(name,mimeTypes,charset,fileExtensions);}  }
class C{  private boolean startAnimation(SurfaceSession session,long maxAnimationDuration,float animationScale,int finalWidth,int finalHeight,boolean dismissing,int exitAnim,int enterAnim){  if (mSurfaceControl == null) {    return false;  }  if (mStarted) {    return true;  }  mStarted=true;  boolean firstStart=false;  int delta=deltaRotation(mCurRotation,mOriginalRotation);  if (TWO_PHASE_ANIMATION && mFinishExitAnimation == null && (!dismissing || delta != Surface.ROTATION_0)) {    if (DEBUG_STATE)     Slog.v(TAG,"Creating start and finish animations");    firstStart=true;    mStartExitAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_start_exit);    mStartEnterAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_start_enter);    if (USE_CUSTOM_BLACK_FRAME) {      mStartFrameAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_start_frame);    }    mFinishExitAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_finish_exit);    mFinishEnterAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_finish_enter);    if (USE_CUSTOM_BLACK_FRAME) {      mFinishFrameAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_finish_frame);    }  }  if (DEBUG_STATE)   Slog.v(TAG,"Rotation delta: " + delta + " finalWidth="+ finalWidth+ " finalHeight="+ finalHeight+ " origWidth="+ mOriginalWidth+ " origHeight="+ mOriginalHeight);  final boolean customAnim;  if (exitAnim != 0 && enterAnim != 0) {    customAnim=true;    mRotateExitAnimation=AnimationUtils.loadAnimation(mContext,exitAnim);    mRotateEnterAnimation=AnimationUtils.loadAnimation(mContext,enterAnim);  } else {    customAnim=false;switch (delta) {case Surface.ROTATION_0:      mRotateExitAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_0_exit);    mRotateEnterAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_0_enter);  if (USE_CUSTOM_BLACK_FRAME) {    mRotateFrameAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_0_frame);  }break;case Surface.ROTATION_90:mRotateExitAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_plus_90_exit);mRotateEnterAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_plus_90_enter);if (USE_CUSTOM_BLACK_FRAME) {mRotateFrameAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_plus_90_frame);}break;case Surface.ROTATION_180:mRotateExitAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_180_exit);mRotateEnterAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_180_enter);if (USE_CUSTOM_BLACK_FRAME) {mRotateFrameAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_180_frame);}break;case Surface.ROTATION_270:mRotateExitAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_minus_90_exit);mRotateEnterAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_minus_90_enter);if (USE_CUSTOM_BLACK_FRAME) {mRotateFrameAnimation=AnimationUtils.loadAnimation(mContext,com.android.internal.R.anim.screen_rotate_minus_90_frame);}break;}}if (TWO_PHASE_ANIMATION && firstStart) {final int halfWidth=(finalWidth + mOriginalWidth) / 2;final int halfHeight=(finalHeight + mOriginalHeight) / 2;if (DEBUG_STATE) Slog.v(TAG,"Initializing start and finish animations");mStartEnterAnimation.initialize(finalWidth,finalHeight,halfWidth,halfHeight);mStartExitAnimation.initialize(halfWidth,halfHeight,mOriginalWidth,mOriginalHeight);mFinishEnterAnimation.initialize(finalWidth,finalHeight,halfWidth,halfHeight);mFinishExitAnimation.initialize(halfWidth,halfHeight,mOriginalWidth,mOriginalHeight);if (USE_CUSTOM_BLACK_FRAME) {mStartFrameAnimation.initialize(finalWidth,finalHeight,mOriginalWidth,mOriginalHeight);mFinishFrameAnimation.initialize(finalWidth,finalHeight,mOriginalWidth,mOriginalHeight);}}mRotateEnterAnimation.initialize(finalWidth,finalHeight,mOriginalWidth,mOriginalHeight);mRotateExitAnimation.initialize(finalWidth,finalHeight,mOriginalWidth,mOriginalHeight);if (USE_CUSTOM_BLACK_FRAME) {mRotateFrameAnimation.initialize(finalWidth,finalHeight,mOriginalWidth,mOriginalHeight);}mAnimRunning=false;mFinishAnimReady=false;mFinishAnimStartTime=-1;if (TWO_PHASE_ANIMATION && firstStart) {mStartExitAnimation.restrictDuration(maxAnimationDuration);mStartExitAnimation.scaleCurrentDuration(animationScale);mStartEnterAnimation.restrictDuration(maxAnimationDuration);mStartEnterAnimation.scaleCurrentDuration(animationScale);mFinishExitAnimation.restrictDuration(maxAnimationDuration);mFinishExitAnimation.scaleCurrentDuration(animationScale);mFinishEnterAnimation.restrictDuration(maxAnimationDuration);mFinishEnterAnimation.scaleCurrentDuration(animationScale);if (USE_CUSTOM_BLACK_FRAME) {mStartFrameAnimation.restrictDuration(maxAnimationDuration);mStartFrameAnimation.scaleCurrentDuration(animationScale);mFinishFrameAnimation.restrictDuration(maxAnimationDuration);mFinishFrameAnimation.scaleCurrentDuration(animationScale);}}mRotateExitAnimation.restrictDuration(maxAnimationDuration);mRotateExitAnimation.scaleCurrentDuration(animationScale);mRotateEnterAnimation.restrictDuration(maxAnimationDuration);mRotateEnterAnimation.scaleCurrentDuration(animationScale);if (USE_CUSTOM_BLACK_FRAME) {mRotateFrameAnimation.restrictDuration(maxAnimationDuration);mRotateFrameAnimation.scaleCurrentDuration(animationScale);}final int layerStack=mDisplay.getLayerStack();if (USE_CUSTOM_BLACK_FRAME && mCustomBlackFrame == null) {if (WindowManagerService.SHOW_LIGHT_TRANSACTIONS || DEBUG_STATE) Slog.i(WindowManagerService.TAG,">>> OPEN TRANSACTION ScreenRotationAnimation.startAnimation");SurfaceControl.openTransaction();createRotationMatrix(delta,mOriginalWidth,mOriginalHeight,mFrameInitialMatrix);try {Rect outer=new Rect(-mOriginalWidth * 1,-mOriginalHeight * 1,mOriginalWidth * 2,mOriginalHeight * 2);Rect inner=new Rect(0,0,mOriginalWidth,mOriginalHeight);mCustomBlackFrame=new BlackFrame(session,outer,inner,FREEZE_LAYER + 3,layerStack);mCustomBlackFrame.setMatrix(mFrameInitialMatrix);} catch (SurfaceControl.OutOfResourcesException e) {Slog.w(TAG,"Unable to allocate black surface",e);} finally {SurfaceControl.closeTransaction();if (WindowManagerService.SHOW_LIGHT_TRANSACTIONS || DEBUG_STATE) Slog.i(WindowManagerService.TAG,"<<< CLOSE TRANSACTION ScreenRotationAnimation.startAnimation");}}if (!customAnim && mExitingBlackFrame == null) {if (WindowManagerService.SHOW_LIGHT_TRANSACTIONS || DEBUG_STATE) Slog.i(WindowManagerService.TAG,">>> OPEN TRANSACTION ScreenRotationAnimation.startAnimation");SurfaceControl.openTransaction();try {createRotationMatrix(delta,mOriginalWidth,mOriginalHeight,mFrameInitialMatrix);Rect outer=new Rect(-mOriginalWidth * 1,-mOriginalHeight * 1,mOriginalWidth * 2,mOriginalHeight * 2);Rect inner=new Rect(0,0,mOriginalWidth,mOriginalHeight);mExitingBlackFrame=new BlackFrame(session,outer,inner,FREEZE_LAYER + 2,layerStack);mExitingBlackFrame.setMatrix(mFrameInitialMatrix);} catch (SurfaceControl.OutOfResourcesException e) {Slog.w(TAG,"Unable to allocate black surface",e);} finally {SurfaceControl.closeTransaction();if (WindowManagerService.SHOW_LIGHT_TRANSACTIONS || DEBUG_STATE) Slog.i(WindowManagerService.TAG,"<<< CLOSE TRANSACTION ScreenRotationAnimation.startAnimation");}}if (customAnim && mEnteringBlackFrame == null) {if (WindowManagerService.SHOW_LIGHT_TRANSACTIONS || DEBUG_STATE) Slog.i(WindowManagerService.TAG,">>> OPEN TRANSACTION ScreenRotationAnimation.startAnimation");SurfaceControl.openTransaction();try {Rect outer=new Rect(-finalWidth * 1,-finalHeight * 1,finalWidth * 2,finalHeight * 2);Rect inner=new Rect(0,0,finalWidth,finalHeight);mEnteringBlackFrame=new BlackFrame(session,outer,inner,FREEZE_LAYER,layerStack);} catch (SurfaceControl.OutOfResourcesException e) {Slog.w(TAG,"Unable to allocate black surface",e);} finally {SurfaceControl.closeTransaction();if (WindowManagerService.SHOW_LIGHT_TRANSACTIONS || DEBUG_STATE) Slog.i(WindowManagerService.TAG,"<<< CLOSE TRANSACTION ScreenRotationAnimation.startAnimation");}}return true;}  }
class C{  public Context provideContext(){  return sApplicationContext;}  }
class C{  TimerProcessing createTimerProcessing(TimerType type,long startTime){  TimerProcessing data=null;  TimerIntervalDetails timerIntervalDetails=getTimerDetailsForTimerType(type);  long timerInterval=timerIntervalDetails.getIntervalTime();  if (timerInterval == 0 && timerIntervalDetails.getPeriod() != null) {    timerInterval=timerIntervalDetails.getPeriod().getDuration(startTime);  }  long maxDeviation=(long)(DEVIATION_FACTOR * timerInterval);  long lowerTimeBound=startTime - maxDeviation;  Query query=dm.createNamedQuery("TimerProcessing.findDataForTimeAndTimeframe");  query.setParameter("timerType",type);  query.setParameter("lowerTimeBound",Long.valueOf(lowerTimeBound));  List<?> resultList=query.getResultList();  if (resultList.isEmpty()) {    data=new TimerProcessing();    data.setNodeName(cfgMgmt.getNodeName());    data.setTimerType(type);    data.setStartTime(startTime);    data.setSuccess(true);    data.setStartTimeMutex(startTime / TIMER_HANDLING_DISTANCE);    try {      dm.persist(data);      dm.flush();    } catch (    Exception e) {      data=null;    }  }  return data;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.788 -0500",hash_original_method="4EFCC19418AEA2B988CE34DFC9464C6A",hash_generated_method="8EA966CE9514042DD600884BE7C307E9") private int nativeInstallDrmRights(InputStream data,int len,int mimeType,DrmRights rights){  addTaint(data.getTaint());  addTaint(len);  addTaint(mimeType);  addTaint(rights.getTaint());  return getTaintInt();}  }
class C{  public int size(){  int count=0;  for (  ColladaParam param : this.params) {    if (!WWUtil.isEmpty(param.getName()))     count+=1;  }  return count * this.getCount();}  }
class C{  @Override protected void entityInit(){  if (wrapped != null) {    wrapped.events.publish(new Stateful.LoadEvent());    updateCollider();  }}  }
class C{  private String parseName() throws JasperException {  char ch=(char)reader.peekChar();  if (Character.isLetter(ch) || ch == '_' || ch == ':') {    StringBuilder buf=new StringBuilder();    buf.append(ch);    reader.nextChar();    ch=(char)reader.peekChar();    while (Character.isLetter(ch) || Character.isDigit(ch) || ch == '.' || ch == '_' || ch == '-' || ch == ':') {      buf.append(ch);      reader.nextChar();      ch=(char)reader.peekChar();    }    return buf.toString();  }  return null;}  }
class C{  public void clear(){  elements=0;  for (int ix=0; ix < objects.length; ix++)   objects[ix]=null;  freecells=objects.length;  modCount++;}  }
class C{  public void bind(){  init();  if (!bound) {    pgl.useProgram(glProgram);    bound=true;    consumeUniforms();    bindTextures();  }  if (hasType())   bindTyped();}  }
class C{  public ProductFilterReportWithCat(){  Font font=new Font("Arial",0,12);  setFont(font);  panel=new JPanel(new MigLayout());  GroupLayout layout=new GroupLayout(this);  setLayout(layout);  layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(panel,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addContainerGap(319,Short.MAX_VALUE)));  layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(panel,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE));  jLabel1=new JLabel(AppLocal.getIntString("label.prodcategory"));  jLabel1.setFont(font);  jLabel2=new JLabel(AppLocal.getIntString("label.prodname"));  jLabel2.setFont(font);  jLabel3=new JLabel(AppLocal.getIntString("label.prodpricesellexcludingtax"));  jLabel3.setFont(font);  jLabel4=new JLabel(AppLocal.getIntString("label.prodpricebuy"));  jLabel4.setFont(font);  jLabel5=new JLabel(AppLocal.getIntString("label.prodbarcode"));  jLabel5.setFont(font);  jLabel6=new JLabel(AppLocal.getIntString("label.CatalogueStatus"));  jLabel6.setFont(font);  m_jBarcode.setFont(font);  m_jBarcode.setPreferredSize(new Dimension(200,25));  m_jCategory.setFont(font);  m_jCboName.setFont(font);  m_jName.setFont(font);  m_jName.setPreferredSize(new Dimension(200,25));  m_jPriceBuy.setFont(font);  m_jPriceBuy.setPreferredSize(new Dimension(60,25));  m_jCboPriceBuy.setFont(font);  m_jCboPriceSell.setFont(font);  m_jPriceSell.setFont(font);  m_jPriceSell.setPreferredSize(new Dimension(60,25));  jLabel2.setFont(font);  jLabel2.setText(AppLocal.getIntString("label.prodname"));  panel.add(jLabel1,"w 80");  panel.add(m_jCategory,"w 220, gapright 5");  panel.add(jLabel4,"w 90");  panel.add(m_jCboPriceBuy,"w 120");  panel.add(m_jPriceBuy,"w 50, gapright 10");  panel.add(jLabel5,"w 80");  panel.add(m_jBarcode,"w 220, wrap");  panel.add(jLabel2,"w 80");  panel.add(m_jCboName,"w 220");  panel.add(jLabel3,"w 90");  panel.add(m_jCboPriceSell,"w 120");  panel.add(m_jPriceSell,"w 50, gapright 10");  panel.add(jLabel6,"w 90");  panel.add(m_jCatalog,"wrap");  panel.add(new JLabel(),"w 80");  panel.add(m_jName,"w 220, gapright 5");}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void putAll(Map<? extends V,? extends Double> map){  Iterator<? extends Entry<? extends V,? extends Double>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends V,? extends Double> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  protected void selectHorizontalAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  Range range=getRange();  double logAxisMin=calculateLog(Math.max(this.smallestValue,range.getLowerBound()));  double logAxisMax=calculateLog(range.getUpperBound());  double size=(logAxisMax - logAxisMin) / 50;  TickUnitSource tickUnits=getStandardTickUnits();  TickUnit candidate=tickUnits.getCeilingTickUnit(size);  TickUnit prevCandidate=candidate;  boolean found=false;  while (!found) {    this.tickUnit=(NumberTickUnit)candidate;    double tickLabelWidth=estimateMaximumTickLabelWidth(g2,candidate);    double candidateWidth=exponentLengthToJava2D(candidate.getSize(),dataArea,edge);    if (tickLabelWidth < candidateWidth) {      found=true;    } else     if (Double.isNaN(candidateWidth)) {      candidate=prevCandidate;      found=true;    } else {      prevCandidate=candidate;      candidate=tickUnits.getLargerTickUnit(prevCandidate);      if (candidate.equals(prevCandidate)) {        found=true;      }    }  }  setTickUnit((NumberTickUnit)candidate,false,false);}  }
class C{  public T caseGeneratorEntry(GeneratorEntry object){  return null;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 164) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  public synchronized void write(int b){  if (buf.length() > 5000)   return;  buf.append((char)b);  if ((char)b == '\n') {    int maxSize=50000;    if (false) {      String text=textArea.getText();      StringBuilder buf1=new StringBuilder(text.substring(maxSize - 10000));      buf1.append(buf);      textArea.setText(buf1.toString());      lengthWritten=buf1.length();      buf.setLength(0);      buf=new StringBuilder();      moveToEnd();      try {        Thread.sleep(100);      } catch (      InterruptedException e) {        e.printStackTrace();      }    } else {      textArea.append(buf.toString());      lengthWritten=lengthWritten + buf.length();      buf.setLength(0);      moveToEnd();    }  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static StandardEvaluationContext createStandardEvaluationContext(){  return doCreateContext(null);}  }
class C{  public void remember(IType lhs,IType rhs){  Assert.isLegal(lhs != null);  Assert.isLegal(rhs != null);  if (!isCacheableRHS(rhs))   return;  String rhsQualifiedName=rhs.getFullyQualifiedName();  rememberInternal(lhs,rhsQualifiedName);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,datasetsTipText(),"none","dataset");  return OptionUtils.toEnumeration(result);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  static void schedule(Activity a){  getInstance()._schedule(a,a.getStartTime());}  }
class C{  private int skipToStatementStart(boolean danglingElse,boolean isInBlock){  final int NOTHING=0;  final int READ_PARENS=1;  final int READ_IDENT=2;  int mayBeMethodBody=NOTHING;  boolean isTypeBody=false;  while (true) {    nextToken();    if (isInBlock) {switch (fToken) {case Symbols.TokenIF:case Symbols.TokenELSE:case Symbols.TokenCATCH:case Symbols.TokenDO:case Symbols.TokenWHILE:case Symbols.TokenFINALLY:case Symbols.TokenFOR:case Symbols.TokenTRY:        return fPosition;case Symbols.TokenSTATIC:      mayBeMethodBody=READ_IDENT;    break;case Symbols.TokenSYNCHRONIZED:  if (mayBeMethodBody != READ_IDENT)   return fPosition;break;case Symbols.TokenCLASS:case Symbols.TokenINTERFACE:case Symbols.TokenENUM:isTypeBody=true;break;case Symbols.TokenSWITCH:fIndent=fPrefs.prefCaseIndent;return fPosition;}}switch (fToken) {case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:case Symbols.TokenSEMICOLON:case Symbols.TokenEOF:if (isInBlock) fIndent=getBlockIndent(mayBeMethodBody == READ_IDENT,isTypeBody);return fPreviousPos;case Symbols.TokenCOLON:int pos=fPreviousPos;if (!isConditional()) return pos;break;case Symbols.TokenRBRACE:pos=fPreviousPos;if (skipScope() && looksLikeArrayInitializerIntro()) {continue;} else {if (isInBlock) fIndent=getBlockIndent(mayBeMethodBody == READ_IDENT,isTypeBody);return pos;}case Symbols.TokenRPAREN:if (isInBlock) mayBeMethodBody=READ_PARENS;case Symbols.TokenRBRACKET:case Symbols.TokenGREATERTHAN:pos=fPreviousPos;if (skipScope()) break; else return pos;case Symbols.TokenIF:if (danglingElse) return fPosition; else break;case Symbols.TokenELSE:pos=fPosition;if (skipNextIF()) break; else return pos;case Symbols.TokenCATCH:case Symbols.TokenFINALLY:pos=fPosition;if (skipNextTRY()) break; else return pos;case Symbols.TokenDO:return fPosition;case Symbols.TokenWHILE:pos=fPosition;if (hasMatchingDo()) {break;} else {fPosition=pos;break;}case Symbols.TokenIDENT:if (mayBeMethodBody == READ_PARENS) mayBeMethodBody=READ_IDENT;break;default :}}}  }
class C{  protected void adjustForGravity(GridBagConstraints constraints,Rectangle r){  AdjustForGravity(constraints,r);}  }
class C{  protected void paintSearchButton(Graphics g,JTextComponent c,Region region){  Rectangle bounds;  if (region == SeaGlassRegion.SEARCH_FIELD_FIND_BUTTON) {    bounds=getFindButtonBounds();  } else {    bounds=getCancelButtonBounds();  }  SeaGlassContext subcontext=getContext(c,region);  SeaGlassLookAndFeel.updateSubregion(subcontext,g,bounds);  SeaGlassSynthPainterImpl painter=(SeaGlassSynthPainterImpl)subcontext.getPainter();  painter.paintSearchButtonForeground(subcontext,g,bounds.x,bounds.y,bounds.width,bounds.height);  subcontext.dispose();}  }
class C{  public static double[] toWGS84(double lat,double lon){  double[] cartesian=fromLatLon(new double[]{lat,lon,0},Constants.ELLIPSOID_GRS80_MAJORAXIS,Constants.ELLIPSOID_GRS80_MINORAXIS);  double[] transformed=helmertTransformation(cartesian,-tX,-tY,-tZ,-s,-rX,-rY,-rZ);  double[] ret=toLatLon(transformed,Constants.ELLIPSOID_AIRY1830_MAJORAXIS,Constants.ELLIPSOID_AIRY1830_MINORAXIS,0.00000001);  return new double[]{ret[0],ret[1]};}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.898 -0500",hash_original_method="176341E451B55C50C4D903315018153A",hash_generated_method="9A326B7B865FA7C0667B1A1DA60FEAA8") protected boolean left(TextView widget,Spannable buffer){  return false;}  }
class C{  private static void printVolumeEntry(VolumeEntry entry) throws IOException, ServiceException {  System.out.print("Title: ");  for (  Title t : entry.getTitles()) {    System.out.print(t.getValue() + "\t");  }  System.out.println();  System.out.print("Author: ");  for (  Creator c : entry.getCreators()) {    System.out.print(c.getValue() + "\t");  }  System.out.println();  if (entry.hasRating()) {    System.out.println("Rating: " + entry.getRating().getAverage());  }  if (entry.hasReview()) {    System.out.println("Review: " + entry.getReview().getValue());  }  boolean firstLabel=true;  if (entry.getCategories().size() > 0) {    for (    Category c : entry.getCategories()) {      if (c.getScheme() == BooksCategory.Scheme.LABELS_SCHEME) {        if (firstLabel) {          System.out.print("Labels: ");          firstLabel=false;        }        System.out.print(c.getTerm() + "\t");      }    }    if (!firstLabel) {      System.out.println();    }  }  if (entry.hasViewability()) {    System.out.println("Viewability: " + entry.getViewability().getValue());  }  System.out.println();}  }
class C{  public static String addTTDir(final String fontPath,String failed){  checkFontTablesInitialised();  final File currentDir=new File(fontPath);  if ((currentDir.exists()) && (currentDir.isDirectory())) {    final String[] files=currentDir.list();    if (files != null) {      for (      final String currentFont : files) {        addFontFile(currentFont,fontPath);      }    }  } else {    if (failed == null) {      failed=fontPath;    } else {      failed=failed + ',' + fontPath;    }  }  return failed;}  }
class C{  private boolean processSystemRegistration(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String name=WebUtil.getParameter(request,"Name");  String userName=WebUtil.getParameter(request,"UserName");  String password=WebUtil.getParameter(request,"Password");  if ((name == null || name.length() == 0) && (userName == null || userName.length() == 0) && (password == null || password.length() == 0))   return false;  log.info("Name=" + name + ", User="+ userName);  String description=WebUtil.getParameter(request,"Description");  boolean inProduction=WebUtil.getParameterAsBoolean(request,"IsInProduction","Y");  Timestamp startDate=WebUtil.getParameterAsDate(request,"StartProductionDate");  if (startDate == null)   startDate=new Timestamp(System.currentTimeMillis());  boolean allowPublish=WebUtil.getParameterAsBoolean(request,"IsAllowPublish","Y");  boolean registered=WebUtil.getParameterAsBoolean(request,"IsRegistered","Y");  int Record_ID=WebUtil.getParameterAsInt(request,"Record_ID");  Properties ctx=JSPEnv.getCtx(request);  MUser user=null;  int AD_User_ID=DB.getSQLValue(null,"SELECT AD_User_ID FROM AD_User WHERE EMail=?",userName);  if (AD_User_ID > 0)   user=MUser.get(ctx,AD_User_ID); else   log.warning("User Not found=" + userName);  MRegistration reg=null;  if (Record_ID > 0) {    reg=new MRegistration(ctx,Record_ID,null);    if (reg.get_ID() != Record_ID) {      log.warning("Registration Not found=" + Record_ID);      reg=null;    } else     if (user != null) {      if (reg.getC_BPartner_ID() != user.getC_BPartner_ID()) {        log.warning("Registration for different BP - AD_User_ID=" + AD_User_ID + "("+ user.getEMail()+ "), BP RegistrationBP="+ reg.getC_BPartner_ID()+ "<>UserBP="+ user.getC_BPartner_ID());        reg=null;      }      if (!password.equals(user.getPassword())) {        log.warning("Password does not match - AD_User_ID=" + AD_User_ID + "("+ user.getEMail()+ ")");      }    }  }  if (reg == null) {    log.fine("New Registration");    reg=new MRegistration(ctx,name,allowPublish,inProduction,startDate,null);    Record_ID=0;  }  reg.setDescription(description);  reg.setRemote_Addr(request.getRemoteAddr());  reg.setRemote_Host(request.getRemoteHost());  if (user != null) {    reg.setAD_User_ID(user.getAD_User_ID());    reg.setC_BPartner_ID(user.getC_BPartner_ID());  }  if (reg.save()) {    if (Record_ID == 0)     reg.loadAttributeValues(request); else     reg.updateAttributeValues(request);    sendAnswer(response,THANKS + " Record_ID=" + reg.getA_Registration_ID());  } else {    log.log(Level.SEVERE,"Registration not saved");    sendAnswer(response,PROBLEM + " Record_ID=0");  }  return true;}  }
class C{  protected void addRegionPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_SaveHistory_region_feature"),getString("_UI_PropertyDescriptor_description","_UI_SaveHistory_region_feature","_UI_SaveHistory_type"),SexecPackage.Literals.SAVE_HISTORY__REGION,true,false,true,null,null,null));}  }
class C{  public Stoppable scheduleRepeating(final Steppable event,final double interval){synchronized (lock) {    return scheduleRepeating(time + interval,0,event,interval);  }}  }
class C{  public MariaSelectResultSet(ColumnInformation[] columnInformation,List<byte[][]> resultSet,Protocol protocol,int resultSetScrollType){  this.statement=null;  this.isClosed=false;  this.protocol=protocol;  if (protocol != null) {    this.options=protocol.getOptions();    this.cal=protocol.getCalendar();    this.dataTypeMappingFlags=protocol.getDataTypeMappingFlags();    this.returnTableAlias=this.options.useOldAliasMetadataBehavior;  } else {    this.options=null;    this.cal=null;    this.dataTypeMappingFlags=3;    this.returnTableAlias=false;  }  this.columnsInformation=columnInformation;  this.columnNameMap=new ColumnNameMap(columnsInformation);  this.columnInformationLength=columnInformation.length;  this.isEof=false;  this.isBinaryEncoded=false;  this.fetchSize=1;  this.resultSetScrollType=resultSetScrollType;  this.resultSet=resultSet;  this.resultSetSize=this.resultSet.size();  this.dataFetchTime=0;  this.rowPointer=-1;  this.callableResult=false;}  }
class C{  private void checkBoundedTypeParameter(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  assertEquals("T",typeParameter.getName());  assertEquals(method,typeParameter.getGenericDeclaration());  Type[] bounds=typeParameter.getBounds();  assertLenghtOne(bounds);  Type bound=bounds[0];  assertEquals(BoundedWildcardsGenericMethods.class,bound);}  }
class C{  public static void record(byte compiler,NativeMethod method,CompiledMethod compiledMethod){  recordCompilation(compiler,0,compiledMethod.numberOfInstructions(),compiledMethod.getCompilationTime());}  }
class C{  synchronized List<K> keys(boolean cold,boolean nonResident){  ArrayList<K> keys=new ArrayList<K>();  if (cold) {    Entry<K,V> start=nonResident ? queue2 : queue;    for (Entry<K,V> e=start.queueNext; e != start; e=e.queueNext) {      keys.add(e.key);    }  } else {    for (Entry<K,V> e=stack.stackNext; e != stack; e=e.stackNext) {      keys.add(e.key);    }  }  return keys;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.716 -0400",hash_original_method="E10BC923F0B48F117C617A8C2999379D",hash_generated_method="4EC571B131DC589BBDD2D0EDB3F98B9C") private int countOfMode(boolean data){  int count=0;  for (Node p=head; p != null; ) {    if (!p.isMatched()) {      if (p.isData != data)       return 0;      if (++count == Integer.MAX_VALUE)       break;    }    Node n=p.next;    if (n != p)     p=n; else {      count=0;      p=head;    }  }  return count;}  }
class C{  public void addImplicitResolver(Tag tag,Pattern regexp,String first){  resolver.addImplicitResolver(tag,regexp,first);}  }
class C{  public IXMLElement createElement(String fullName){  return new XMLElement(fullName);}  }
class C{  public static ArrayList<Object> mergeAllItemSets(ArrayList<Object> itemSets,int size,int totalTrans){  ArrayList<Object> newVector=new ArrayList<Object>();  LabeledItemSet result;  int numFound, k;  for (int i=0; i < itemSets.size(); i++) {    LabeledItemSet first=(LabeledItemSet)itemSets.get(i);    out:     for (int j=i + 1; j < itemSets.size(); j++) {      LabeledItemSet second=(LabeledItemSet)itemSets.get(j);      while (first.m_classLabel != second.m_classLabel) {        j++;        if (j == itemSets.size()) {          break out;        }        second=(LabeledItemSet)itemSets.get(j);      }      result=new LabeledItemSet(totalTrans,first.m_classLabel);      result.m_items=new int[first.m_items.length];      numFound=0;      k=0;      while (numFound < size) {        if (first.m_items[k] == second.m_items[k]) {          if (first.m_items[k] != -1) {            numFound++;          }          result.m_items[k]=first.m_items[k];        } else {          break out;        }        k++;      }      while (k < first.m_items.length) {        if ((first.m_items[k] != -1) && (second.m_items[k] != -1)) {          break;        } else {          if (first.m_items[k] != -1) {            result.m_items[k]=first.m_items[k];          } else {            result.m_items[k]=second.m_items[k];          }        }        k++;      }      if (k == first.m_items.length) {        result.m_ruleSupCounter=0;        result.m_counter=0;        newVector.add(result);      }    }  }  return newVector;}  }
class C{  public void testAnySelectionStrategy() throws Throwable {  List<Address> results=(List<Address>)ServerSelectionStrategies.ANY.selectConnections(null,servers);  assertTrue(listsEqual(results,servers));}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="IMSE_DONT_CATCH_IMSE") public final boolean doLocalPutAll(PartitionedRegion r,InternalDistributedMember eventSender,long lastModified) throws EntryExistsException, ForceReattemptException, DataLocationException {  boolean didPut=false;  long clientReadTimeOut=PoolFactory.DEFAULT_READ_TIMEOUT;  if (r.hasServerProxy()) {    clientReadTimeOut=r.getServerProxy().getPool().getReadTimeout();    if (logger.isDebugEnabled()) {      logger.debug("PutAllPRMessage: doLocalPutAll: clientReadTimeOut is {}",clientReadTimeOut);    }  }  DistributedPutAllOperation dpao=null;  @Released EntryEventImpl baseEvent=null;  BucketRegion bucketRegion=null;  PartitionedRegionDataStore ds=r.getDataStore();  InternalDistributedMember myId=r.getDistributionManager().getDistributionManagerId();  try {    if (!notificationOnly) {      bucketRegion=ds.getInitializedBucketForId(null,bucketId);      this.versions=new VersionedObjectList(this.putAllPRDataSize,true,bucketRegion.getAttributes().getConcurrencyChecksEnabled());      baseEvent=EntryEventImpl.create(bucketRegion,Operation.PUTALL_CREATE,null,null,this.callbackArg,true,eventSender,!skipCallbacks,true);      baseEvent.setEventId(putAllPRData[0].getEventID());      if (this.bridgeContext != null) {        baseEvent.setContext(this.bridgeContext);      }      baseEvent.setPossibleDuplicate(this.posDup);      if (logger.isDebugEnabled()) {        logger.debug("PutAllPRMessage.doLocalPutAll: eventSender is {}, baseEvent is {}, msg is {}",eventSender,baseEvent,this);      }      dpao=new DistributedPutAllOperation(baseEvent,putAllPRDataSize,false);    }    Object keys[]=new Object[putAllPRDataSize];    for (int i=0; i < putAllPRDataSize; ++i) {      keys[i]=putAllPRData[i].getKey();    }    if (!notificationOnly) {      try {        if (putAllPRData.length > 0) {          if (this.posDup && bucketRegion.getConcurrencyChecksEnabled()) {            if (logger.isDebugEnabled()) {              logger.debug("attempting to locate version tags for retried event");            }            for (int i=0; i < putAllPRDataSize; i++) {              if (putAllPRData[i].versionTag == null) {                putAllPRData[i].versionTag=bucketRegion.findVersionTagForClientBulkOp(putAllPRData[i].getEventID());                if (putAllPRData[i].versionTag != null) {                  putAllPRData[i].versionTag.replaceNullIDs(bucketRegion.getVersionMember());                }              }            }          }          EventID eventID=putAllPRData[0].getEventID();          ThreadIdentifier membershipID=new ThreadIdentifier(eventID.getMembershipID(),eventID.getThreadID());          bucketRegion.recordBulkOpStart(membershipID);        }        bucketRegion.waitUntilLocked(keys);        boolean lockedForPrimary=false;        final HashMap succeeded=new HashMap();        PutAllPartialResult partialKeys=new PutAllPartialResult(putAllPRDataSize);        Object key=keys[0];        try {          bucketRegion.doLockForPrimary(false);          lockedForPrimary=true;          for (int i=0; i < putAllPRDataSize; i++) {            @Released EntryEventImpl ev=getEventFromEntry(r,myId,eventSender,i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks);            try {              key=ev.getKey();              ev.setPutAllOperation(dpao);              ev.makeSerializedNewValue();              try {                didPut=r.getDataView().putEntryOnRemote(ev,false,false,null,false,lastModified,true);                if (didPut && logger.isDebugEnabled()) {                  logger.debug("PutAllPRMessage.doLocalPutAll:putLocally success for {}",ev);                }              } catch (              ConcurrentCacheModificationException e) {                didPut=true;                if (logger.isDebugEnabled()) {                  logger.debug("PutAllPRMessage.doLocalPutAll:putLocally encountered concurrent cache modification for {}",ev,e);                }              }              putAllPRData[i].setTailKey(ev.getTailKey());              if (!didPut) {                r.checkReadiness();                ForceReattemptException fre=new ForceReattemptException("unable to perform put in PutAllPR, but operation should not fail");                fre.setHash(ev.getKey().hashCode());                throw fre;              } else {                succeeded.put(putAllPRData[i].getKey(),putAllPRData[i].getValue());                this.versions.addKeyAndVersion(putAllPRData[i].getKey(),ev.getVersionTag());              }            }  finally {              ev.release();            }          }        } catch (        IllegalMonitorStateException ex) {          ForceReattemptException fre=new ForceReattemptException("unable to get lock for primary, retrying... ");          throw fre;        }catch (        CacheWriterException cwe) {          partialKeys.saveFailedKey(key,cwe);        } finally {          try {            dpao.setUseFakeEventId(true);            r.checkReadiness();            bucketRegion.getDataView().postPutAll(dpao,this.versions,bucketRegion);          }  finally {            if (lockedForPrimary) {              bucketRegion.doUnlockForPrimary();            }          }        }        if (partialKeys.hasFailure()) {          partialKeys.addKeysAndVersions(this.versions);          if (logger.isDebugEnabled()) {            logger.debug("PutAllPRMessage: partial keys applied, map to bucket {}'s keys: {}. Applied {}",bucketId,Arrays.toString(keys),succeeded);          }          throw new PutAllPartialResultException(partialKeys);        }      } catch (      RegionDestroyedException e) {        ds.checkRegionDestroyedOnBucket(bucketRegion,true,e);      } finally {        bucketRegion.removeAndNotifyKeys(keys);      }    } else {      for (int i=0; i < putAllPRDataSize; i++) {        EntryEventImpl ev=getEventFromEntry(r,myId,eventSender,i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks);        try {          ev.setOriginRemote(true);          if (this.callbackArg != null) {            ev.setCallbackArgument(this.callbackArg);          }          r.invokePutCallbacks(ev.getOperation().isCreate() ? EnumListenerEvent.AFTER_CREATE : EnumListenerEvent.AFTER_UPDATE,ev,r.isInitialized(),true);        }  finally {          ev.release();        }      }    }  }  finally {    if (baseEvent != null)     baseEvent.release();    if (dpao != null)     dpao.freeOffHeapResources();  }  return true;}  }
class C{  protected void flashRequest(HttpRequest request){  Session session=request.getSession();  if (session != null && session.containsKey(flashKey)) {    request.setFlash((Flash)session.remove(flashKey));  }}  }
class C{  private static void validatePricedProductRole(VOPricedRole pricedProductRole) throws ValidationException {  BLValidator.isNonNegativeNumber(FIELD_NAME_PRICE_PER_USER,pricedProductRole.getPricePerUser());  BLValidator.isValidPriceScale(FIELD_NAME_PRICE_PER_USER,pricedProductRole.getPricePerUser());}  }
class C{  private Class<?> findInnerClassByName(Class<?> clz,String simpleName){  for (  Class<?> c : clz.getClasses()) {    if (c.getSimpleName().equals(simpleName)) {      return c;    }  }  return null;}  }
class C{  void onAnchorReady(RecyclerView.State state,AnchorInfo anchorInfo){}  }
class C{  private Figure readRectElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a);  readShapeAttributes(elem,a);  double x=toNumber(elem,readAttribute(elem,"x","0"));  double y=toNumber(elem,readAttribute(elem,"y","0"));  double w=toWidth(elem,readAttribute(elem,"width","0"));  double h=toHeight(elem,readAttribute(elem,"height","0"));  String rxValue=readAttribute(elem,"rx","none");  String ryValue=readAttribute(elem,"ry","none");  if (rxValue.equals("none")) {    rxValue=ryValue;  }  if (ryValue.equals("none")) {    ryValue=rxValue;  }  double rx=toNumber(elem,rxValue.equals("none") ? "0" : rxValue);  double ry=toNumber(elem,ryValue.equals("none") ? "0" : ryValue);  Figure figure=factory.createRect(x,y,w,h,rx,ry,a);  elementObjects.put(elem,figure);  return figure;}  }
class C{  public void dropExternalForeignKeys(Table table,StringBuilder ddl){  if (!databaseInfo.isForeignKeysEmbedded()) {    for (int idx=0; idx < table.getForeignKeyCount(); idx++) {      writeExternalForeignKeyDropStmt(table,table.getForeignKey(idx),ddl);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:18.862 -0500",hash_original_method="324CE8CF3B7F222FC5B16C98F36DFFC3",hash_generated_method="23D1B1DB72236D151D62668338636E7B") @Override public void start(){  if (session == null) {    status=NEED_UNWRAP;    return;  }  if (clientHello != null && this.status != FINISHED) {    return;  }  sendHelloRequest();  status=NEED_UNWRAP;}  }
class C{  public static byte[] hashToBytes(String datum,long seed){  if ((datum == null) || datum.isEmpty()) {    return null;  }  byte[] data=datum.getBytes(UTF_8);  return toByteArray(hash(data,seed));}  }
class C{  public static double normalizeAngle360(double degrees){  double angle=degrees % 360;  return angle >= 0 ? angle : (angle < 0 ? 360 + angle : 360 - angle);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TANNOTATION_TYPE_REF_ARGUMENT;}  }
class C{  public XMLString toUpperCase(Locale locale){  return new XMLStringDefault(m_str.toUpperCase(locale));}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public static int[] cs_pinv(int[] p,int n){  int k, pinv[];  if (p == null)   return (null);  pinv=new int[n];  for (k=0; k < n; k++)   pinv[p[k]]=k;  return (pinv);}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public static PacketExtension parsePacketExtension(String elementName,String namespace,XmlPullParser parser) throws Exception {  Object provider=ProviderManager.getInstance().getExtensionProvider(elementName,namespace);  if (provider != null) {    if (provider instanceof PacketExtensionProvider) {      return ((PacketExtensionProvider)provider).parseExtension(parser);    } else     if (provider instanceof Class) {      return (PacketExtension)parseWithIntrospection(elementName,(Class<?>)provider,parser);    }  }  DefaultPacketExtension extension=new DefaultPacketExtension(elementName,namespace);  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      String name=parser.getName();      if (parser.isEmptyElementTag()) {        extension.setValue(name,"");      } else {        eventType=parser.next();        if (eventType == XmlPullParser.TEXT) {          String value=parser.getText();          extension.setValue(name,value);        }      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals(elementName)) {        done=true;      }    }  }  return extension;}  }
class C{  protected JnaConnection(FbClientLibrary clientLibrary,T attachProperties,IEncodingFactory encodingFactory) throws SQLException {  super(attachProperties,encodingFactory);  this.clientLibrary=requireNonNull(clientLibrary,"parameter clientLibrary cannot be null");}  }
class C{  @Override public void handle(final Throwable throwable){  try {    ClientLogger.logError(throwable);  } catch (  final Throwable t) {    try {      final String msg="Original error: " + throwable.getMessage() + ", next error while handling it: "+ t.getMessage();      System.err.println(msg);      t.printStackTrace();    } catch (    final Throwable fatal) {    }  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          if ((z1 + z2) > 0) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public synchronized void onSuccess(final Bitmap bitmap){  BitmapCompress=bitmap;}  }
class C{  public boolean isSetXtructs(){  return this.xtructs != null;}  }
class C{  @Override protected Result doInBackground(Void... params){  try {    if (!isCancelled()) {      BitmapUtils.BitmapSampled decodeResult=BitmapUtils.decodeSampledBitmap(mContext,mUri,mWidth,mHeight);      if (!isCancelled()) {        BitmapUtils.RotateBitmapResult rotateResult=BitmapUtils.rotateBitmapByExif(decodeResult.bitmap,mContext,mUri);        return new Result(mUri,rotateResult.bitmap,decodeResult.sampleSize,rotateResult.degrees);      }    }    return null;  } catch (  Exception e) {    return new Result(mUri,e);  }}  }
class C{  public void delete(){  storage.deleteLog(name);  storage.deleteSnapshotStore(name);  storage.deleteMetaStore(name);}  }
class C{  private boolean findSunJVM(){  List lserver=new ArrayList(0);  List lserver_tmp;  List lsearch=new ArrayList(0);  List lsearch_tmp;  try {    Class[] noClasses=new Class[0];    Object[] noObjects=new Object[0];    String resConfName="sun.net.dns.ResolverConfiguration";    Class resConfClass=Class.forName(resConfName);    Object resConf;    Method open=resConfClass.getDeclaredMethod("open",noClasses);    resConf=open.invoke(null,noObjects);    Method nameservers=resConfClass.getMethod("nameservers",noClasses);    lserver_tmp=(List)nameservers.invoke(resConf,noObjects);    Method searchlist=resConfClass.getMethod("searchlist",noClasses);    lsearch_tmp=(List)searchlist.invoke(resConf,noObjects);  } catch (  Exception e) {    return false;  }  if (lserver_tmp.size() == 0)   return false;  if (lserver_tmp.size() > 0) {    Iterator it=lserver_tmp.iterator();    while (it.hasNext())     addServer((String)it.next(),lserver);  }  if (lsearch_tmp.size() > 0) {    Iterator it=lsearch_tmp.iterator();    while (it.hasNext())     addSearch((String)it.next(),lsearch);  }  configureFromLists(lserver,lsearch);  return true;}  }
class C{  private ExpressionResult executeExpressions(final Expressions expressions,final Class<? extends Annotation> annotationClass){  Expression expression=expressions.getOperationExpression();  ExpressionResult result=expression.evaluate();  Long checkOccurrences=checkStats.getOrDefault(expression.toString(),0L) + 1;  checkStats.put(expression.toString(),checkOccurrences);  if (result == DEFERRED) {    Expression commitExpression=expressions.getCommitExpression();    if (commitExpression != null) {      if (isInlineOnlyCheck(annotationClass)) {        result=commitExpression.evaluate();        if (result == FAIL) {          ForbiddenAccessException e=new ForbiddenAccessException(annotationClass.getSimpleName(),commitExpression);          log.trace("{}",e.getLoggedMessage());          throw e;        }      } else {        commitCheckQueue.add(new QueuedCheck(commitExpression,annotationClass));      }    }    return DEFERRED;  } else   if (result == FAIL) {    ForbiddenAccessException e=new ForbiddenAccessException(annotationClass.getSimpleName(),expression);    log.trace("{}",e.getLoggedMessage());    throw e;  }  return result;}  }
class C{  public void startFunction(String functionName){  logger.debug("Starting function {}",functionName);  timers.put(functionName,metrics.getTimer(functionName).time());}  }
class C{  public boolean exceptionOnUnreadXml(){  return exceptionOnUnreadXml;}  }
class C{  @Override public void onWebsocketPing(WebSocket conn,Framedata f){  FramedataImpl1 resp=new FramedataImpl1(f);  resp.setOptcode(Opcode.PONG);  conn.sendFrame(resp);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.431 -0500",hash_original_method="8ED269C57B5B4F834AF78EEAE05F20CC",hash_generated_method="05C0BDAE85DE493D806AFBD3AE58240D") @Override public Object clone(){  return new Bundle(this);}  }
class C{  @Override public boolean accept(final File file){  if (file != null) {    if (file.isDirectory()) {      return true;    }    final String extension=getExtension(file);    if (extension != null && filters.containsKey(extension)) {      return true;    }  }  return false;}  }
class C{  public static boolean validSystemNameFormat(String systemName,char type){  if ((systemName.charAt(0) != 'O') || (systemName.charAt(1) != type)) {    log.error("illegal character in header field system name: " + systemName);    return (false);  }  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num;    try {      num=Integer.valueOf(systemName.substring(2)).intValue();    } catch (    Exception e) {      log.error("illegal character in number field system name: " + systemName);      return (false);    }    if ((num < 1) || (num >= 256000)) {      log.error("number field out of range in system name: " + systemName);      return (false);    }    if ((num - ((num / 1000) * 1000)) == 0) {      log.error("bit number not in range 1 - 999 in system name: " + systemName);      return (false);    }  } else {    if (s.length() == 0) {      log.error("no node address before 'B' in system name: " + systemName);      return (false);    }    int num;    try {      num=Integer.valueOf(s).intValue();    } catch (    Exception e) {      log.error("illegal character in node address field of system name: " + systemName);      return (false);    }    if ((num < 0) || (num >= 128)) {      log.error("node address field out of range in system name: " + systemName);      return (false);    }    try {      num=Integer.parseInt(systemName.substring(k,systemName.length()));    } catch (    Exception e) {      log.error("illegal character in bit number field of system name: " + systemName);      return (false);    }    if ((num < 1) || (num > 2048)) {      log.error("bit number field out of range in system name: " + systemName);      return (false);    }  }  return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_AFTER_CODE_2__MORE_CODE_1:    return getMoreCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  static String determineSourceHome(){  try {    File file;    try {      file=new File("solr/conf");      if (!file.exists()) {        file=new File(Thread.currentThread().getContextClassLoader().getResource("solr/conf").toURI());      }    } catch (    Exception e) {      file=new File(".");    }    File base=file.getAbsoluteFile();    while (!(new File(base,"solr/CHANGES.txt").exists()) && null != base) {      base=base.getParentFile();    }    return (null == base) ? null : new File(base,"solr/").getAbsolutePath();  } catch (  RuntimeException e) {    return null;  }}  }
class C{  public void reset(){  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }  mOff=0;  for (int i=0; i != M.length; i++) {    M[i]=0;  }  COff=0;  for (int i=0; i != C.length; i++) {    C[i]=0;  }}  }
class C{  private static <T extends Encoder>T map(String name,T encoder){  Encoder old=ENCODERS_MAP.put(name,encoder);  assert old == null;  return encoder;}  }
class C{  private void downloadOrEditFile(final String applicationName,final String containerId,String path,final String fileName,HttpServletRequest request,HttpServletResponse response,Boolean editionMode) throws ServiceException, CheckException, IOException {  if (logger.isDebugEnabled()) {    logger.debug("containerId:" + containerId);    logger.debug("applicationName:" + applicationName);    logger.debug("fileName:" + fileName);  }  User user=authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  String mimeType=URLConnection.guessContentTypeFromName(fileName);  String contentDisposition=String.format("attachment; filename=%s",fileName);  response.setContentType(mimeType);  response.setHeader("Content-Disposition",contentDisposition);  if (!editionMode) {    response.setHeader("Content-Description","File Transfer");    response.setContentType("utf-8");  }  this.authentificationUtils.canStartNewAction(user,application,locale);  try (OutputStream stream=response.getOutputStream()){    fileService.getFileFromContainer(containerId,"/" + path + "/"+ fileName,stream);    stream.flush();    stream.close();  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  protected void writeResultTable(TestSuiteChromosome suite,StringBuffer buffer,Map<String,OutputVariable<?>> data){  buffer.append("<ul>\n");  buffer.append("<li>");  buffer.append(suite.getFitness());  buffer.append(" fitness evaluations, ");  buffer.append(suite.getAge());  buffer.append(" generations, ");  buffer.append(getOutputVariableValue(data,RuntimeVariable.Statements_Executed.name()));  buffer.append(" statements, ");  buffer.append(suite.size());  buffer.append(" tests.\n");  buffer.append("<li>Covered " + getOutputVariableValue(data,RuntimeVariable.Covered_Branches.name()) + "/"+ getOutputVariableValue(data,RuntimeVariable.Total_Branches.name())+ " branches, ");  buffer.append("<li>Covered " + getOutputVariableValue(data,RuntimeVariable.Covered_Methods.name()) + "/"+ getOutputVariableValue(data,RuntimeVariable.Total_Methods.name())+ " methods, ");  buffer.append("<li>Covered " + getOutputVariableValue(data,RuntimeVariable.Covered_Goals.name()) + "/"+ getOutputVariableValue(data,RuntimeVariable.Total_Goals.name())+ " total goals\n");  if (data.containsKey(RuntimeVariable.MutationScore.name()))   buffer.append("<li>Mutation score: " + NumberFormat.getPercentInstance().format((Double)data.get(RuntimeVariable.MutationScore.name()).getValue()) + "\n");  buffer.append("</ul>\n");}  }
class C{  protected void removeMapping(HashEntry entry,int hashIndex,HashEntry previous){  modCount++;  removeEntry(entry,hashIndex,previous);  size--;  destroyEntry(entry);}  }
class C{  public void testGetInstance01() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException, CertPathValidatorException {  try {    CertPathValidator.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  CertPathValidator cerPV;  for (int i=0; i < validValues.length; i++) {    cerPV=CertPathValidator.getInstance(validValues[i]);    assertEquals("Incorrect type",cerPV.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPV.getProvider(),mProv);    checkResult(cerPV);  }}  }
class C{  public static String createMatchingString(String[] input){  String result="(";  for (  String word : input) {    if (!word.equals("EIP")) {      if (!result.equals("(")) {        result+="|";      }      result+="(" + word + ")";    }  }  result+=")";  return result;}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,RequestParams params,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=new HttpPost(URI.create(url).normalize());  if (params != null)   request.setEntity(paramsToEntity(params,responseHandler));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  protected synchronized void initializeBeanContextResources(){  super.initializeBeanContextResources();  BeanContext nbc=getBeanContext();  if (nbc == null)   return;  try {    BeanContextServices bcs=(BeanContextServices)nbc;    proxy=new BCSSProxyServiceProvider(bcs);  } catch (  ClassCastException cce) {  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public V remove(Object key){  int hash=hash(key.hashCode());  Segment<K,V> s=segmentForHash(hash);  return s == null ? null : s.remove(key,hash,null);}  }
class C{  public XYLineAnnotation(double x1,double y1,double x2,double y2){  this(x1,y1,x2,y2,new BasicStroke(1.0f),Color.black);}  }
class C{  public boolean canUndo(){  return !isInProgress() && super.canUndo();}  }
class C{  @Override public void removeValues(final IScope scope,final IContainer<?,?> values){  for (  final Object o : values.iterable(scope)) {    removeValue(scope,o);  }}  }
class C{  public static boolean isDocumentAutoCorrected(Document document){  return "true".equals(document.getUserData("autoCorrected"));}  }
class C{  private List<String> arrayToList(String[] array){  return Arrays.asList(array);}  }
class C{  public void acquirePermit(){  long startWaitTime=System.currentTimeMillis();  while (!aborted.get()) {    checkCancellation();    boolean interrupted=false;    try {      basicWait(startWaitTime);      break;    } catch (    InterruptedException e) {      interrupted=true;      checkCancellation();    } finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }  if (!aborted.get()) {    incMessagesInFlight(1);  }}  }
class C{  public static boolean isSourceTitleValid(String value){  return value == null || value.length() < 1024 * 2;}  }
class C{  protected Map<Integer,List<Solution>> createGridMap(){  AdaptiveGridArchive archive=getArchive();  Map<Integer,List<Solution>> result=new HashMap<Integer,List<Solution>>();  for (  Solution solution : archive) {    int index=archive.findIndex(solution);    List<Solution> solutions=result.get(index);    if (solutions == null) {      solutions=new ArrayList<Solution>();      result.put(index,solutions);    }    solutions.add(solution);  }  return result;}  }
class C{  public boolean isSetVersion(){  return this.version != null;}  }
class C{  @Deprecated public void insertData(Object[] values,boolean isnew){  Vector<Object> v=new Vector<Object>();  for (int i=0; i < values.length; i++) {    v.add(values[i]);  }  insertData(v,isnew);}  }
class C{  public InteractionDefinition(String type,String subType,Word word,String source,String target){  this.type=type;  this.subType=subType;  this.word=word;  this.source=source;  this.target=target;}  }
class C{  public boolean isNative(){  return this.modifierKeyword == ModifierKeyword.NATIVE_KEYWORD;}  }
class C{  public static Graph<String,Number> createDirectedAcyclicGraph(int layers,int maxNodesPerLayer,double linkprob){  DirectedGraph<String,Number> dag=new DirectedSparseMultigraph<String,Number>();  Set<String> previousLayers=new HashSet<String>();  Set<String> inThisLayer=new HashSet<String>();  for (int i=0; i < layers; i++) {    int nodesThisLayer=(int)(Math.random() * maxNodesPerLayer) + 1;    for (int j=0; j < nodesThisLayer; j++) {      String v=i + ":" + j;      dag.addVertex(v);      inThisLayer.add(v);      for (      String v2 : previousLayers) {        if (Math.random() < linkprob) {          Double de=new Double(Math.random());          dag.addEdge(de,v,v2);        }      }    }    previousLayers.addAll(inThisLayer);    inThisLayer.clear();  }  return dag;}  }
class C{  public void write(String key,Bitmap bitmap){  if (key == null || bitmap == null) {    return;  }  OutputStream out=null;  try {    CacheEntry cacheEntry=mDiskCache.beginEdit(key);    if (cacheEntry != null) {      out=cacheEntry.newOutputStream();      bitmap.compress(DEFAULT_COMPRESS_FORMAT,DEFAULT_COMPRESS_QUALITY,out);      cacheEntry.commit();      out.close();    }  } catch (  final IOException e) {    CLog.e(LOG_TAG,"addBitmapToCache - " + e);  }catch (  Exception e) {    CLog.e(LOG_TAG,"addBitmapToCache - " + e);  } finally {    try {      if (out != null) {        out.close();      }    } catch (    IOException e) {    }  }}  }
class C{  public static ByteTag parseByte(String mojangson) throws MojangsonParseException {  Character lastChar=mojangson.charAt(mojangson.length() - 1);  if (lastChar.toString().toLowerCase().charAt(0) == BYTE_SUFFIX.getSymbol()) {    mojangson=mojangson.substring(0,mojangson.length() - 1);  }  try {    return new ByteTag(Byte.valueOf(mojangson));  } catch (  NumberFormatException nfe) {    throw new MojangsonParseException("\'" + mojangson + "\'",MojangsonParseException.ParseExceptionReason.INVALID_FORMAT_NUM);  }}  }
class C{  public void unlockUI(ProcessInfo pi){  boolean notPrint=pi != null && pi.getAD_Process_ID() != m_curTab.getAD_Process_ID() && pi.isReportingProcess() == false;  setBusy(false,notPrint);  if (notPrint) {    m_curTab.dataRefresh();    if (pi.isTimeout())     Env.setContext(m_ctx,m_curWindowNo,"Processed","Y");    m_curGC.dynamicDisplay(0);    setStatusLine(pi.getSummary(),pi.isError());    if (pi.isError())     ADialog.error(m_curWindowNo,this,null,pi.getSummary());    ProcessInfoUtil.setLogFromDB(pi);    String logInfo=pi.getLogInfo();    if (logInfo.length() > 0)     ADialog.info(m_curWindowNo,this,Env.getHeader(m_ctx,m_curWindowNo),pi.getTitle(),logInfo);  } else {    setStatusLine(pi.getSummary(),pi.isError());    if (pi.isError())     ADialog.error(m_curWindowNo,this,null,pi.getSummary());  }}  }
class C{  protected MouseListener createMouseListener(){  return new MouseAdapter(){  };}  }
class C{  public static void addServlet(WebXml webXml,Servlet element){  if (element == null) {    throw new NullPointerException();  }  webXml.addTag(element);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.EXPRESSION_LIST__EXPRS:    getExprs().clear();  getExprs().addAll((Collection<? extends Expression>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void initBlock(int blockIndex) throws IOException {  klen=-1;  if (blkReader != null) {    try {      blkReader.close();    }  finally {      blkReader=null;    }  }  blkReader=reader.getBlockReader(blockIndex);  blockBuffer=blkReader.getBlockDataInputStream().getBuf();  currentLocation.set(blockIndex,0);}  }
class C{  private Particle emit(int i,double x,double y){  return new Particle(sourceImage,spawnPointFunction.apply(i,x,y),velocityFunction.apply(i,x,y),gravityFunction.get(),getRandomSize(),scaleFunction.apply(i,x,y),expireFunction.apply(i,x,y),colorFunction.get(),blendFunction.apply(i,x,y));}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public void check(){  for (int i=0; i < classes.size(); i++)   for (int j=i + 1; j < classes.size(); j++) {    IntCharSet x=classes.get(i);    IntCharSet y=classes.get(j);    if (x.and(y).containsElements()) {      System.out.println("Error: non disjoint char classes " + i + " and "+ j);      System.out.println("class " + i + ": "+ x);      System.out.println("class " + j + ": "+ y);    }  }  for (int c=0; c < maxChar; c++) {    getClassCode(c);    if (c % 100 == 0)     System.out.print(".");  }  getClassCode(maxChar);}  }
class C{  @Deprecated public void createNotebook(Notebook notebook,OnClientCallback<Notebook> callback){  AsyncReflector.execute(mClient,callback,"createNotebook",mAuthenticationToken,notebook);}  }
class C{  private static PipelineOp addSparql11Subquery(PipelineOp left,final SubqueryRoot subqueryRoot,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  final boolean usePipelinedHashJoin=usePipelinedHashJoin(ctx,subqueryRoot);  final ProjectionNode projection=subqueryRoot.getProjection();  final Set<IVariable<?>> projectedVars=projection.getProjectionVars(new HashSet<IVariable<?>>());  final Set<IVariable<?>> maybeIncomingBindings=ctx.sa.getMaybeIncomingBindings(subqueryRoot,new HashSet<IVariable<?>>());  projectedVars.retainAll(maybeIncomingBindings);  @SuppressWarnings("rawtypes") final Map<IConstraint,Set<IVariable<IV>>> needsMaterialization=new LinkedHashMap<IConstraint,Set<IVariable<IV>>>();  final IConstraint[] joinConstraints=getJoinConstraints(getJoinConstraints(subqueryRoot),needsMaterialization);switch (subqueryRoot.getQueryType()) {case SELECT:    break;default :  throw new UnsupportedOperationException();}final String solutionSetName="--set-" + ctx.nextId();final Set<IVariable<?>> joinVarSet=ctx.sa.getJoinVars(subqueryRoot,new LinkedHashSet<IVariable<?>>());@SuppressWarnings("rawtypes") final IVariable[] joinVars=joinVarSet.toArray(new IVariable[0]);final INamedSolutionSetRef namedSolutionSet=NamedSolutionSetRefUtility.newInstance(usePipelinedHashJoin ? null : ctx.queryId,solutionSetName,joinVars);final JoinTypeEnum joinType=JoinTypeEnum.Normal;final boolean lastPass=false;final boolean release=lastPass;final int maxParallel=lastPass ? 1 : ctx.maxParallelForSolutionSetHashJoin;PipelineOp subqueryPlan=null;if (usePipelinedHashJoin) {subqueryPlan=convertQueryBase(null,subqueryRoot,doneSet,ctx);subqueryPlan=(PipelineOp)subqueryPlan.setProperty(BOp.Annotations.NAMESPACE,ctx.getNamespace());}left=addHashIndexOp(left,usePipelinedHashJoin,ctx,subqueryRoot,joinType,joinVars,joinConstraints,projectedVars.toArray(new IVariable<?>[0]),namedSolutionSet,null,null,subqueryPlan);if (!usePipelinedHashJoin) {left=convertQueryBase(left,subqueryRoot,doneSet,ctx);}if (!usePipelinedHashJoin) {if (ctx.nativeHashJoins) {  left=applyQueryHints(new HTreeSolutionSetHashJoinOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,maxParallel),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(HTreeSolutionSetHashJoinOp.Annotations.RELEASE,release),new NV(HTreeSolutionSetHashJoinOp.Annotations.LAST_PASS,lastPass),new NV(HTreeSolutionSetHashJoinOp.Annotations.NAMED_SET_REF,namedSolutionSet)),subqueryRoot,ctx);} else {  left=applyQueryHints(new JVMSolutionSetHashJoinOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,ctx.nextId()),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.MAX_PARALLEL,maxParallel),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(JVMSolutionSetHashJoinOp.Annotations.RELEASE,release),new NV(JVMSolutionSetHashJoinOp.Annotations.LAST_PASS,lastPass),new NV(JVMSolutionSetHashJoinOp.Annotations.NAMED_SET_REF,namedSolutionSet)),subqueryRoot,ctx);}}maybeIncomingBindings.removeAll(projectedVars);if (ctx.nativeHashJoins) doneSet.removeAll(maybeIncomingBindings);left=addMaterializationSteps3(left,doneSet,needsMaterialization,subqueryRoot.getQueryHints(),ctx);return left;}  }
class C{  public String detachMirrorFromDistributedVolume(String virtualVolumeName,String clusterId) throws VPlexApiException {  s_logger.info("Request to detach a mirror from a distributed volume at {}",_baseURI);  return _virtualVolumeMgr.detachMirrorFromDistributedVolume(virtualVolumeName,clusterId);}  }
class C{  public static boolean isAllVariablesDefined(Evaluatee source,String logic){  if (logic == null || logic.length() == 0)   return true;  int pos=0;  while (pos < logic.length()) {    int first=logic.indexOf('@',pos);    if (first == -1)     return true;    int second=logic.indexOf('@',first + 1);    if (second == -1) {      s_log.severe("No second @ in Logic: " + logic);      return false;    }    String variable=logic.substring(first + 1,second - 1);    String eval=source.get_ValueAsString(variable);    s_log.finest(variable + "=" + eval);    if (eval == null || eval.length() == 0)     return false;    pos=second + 1;  }  return true;}  }
class C{  public MemoryUsageStats(final long usedBytes,final long totalBytes,final String used,final String total,final double percentUsed){  this.usedBytes=usedBytes;  this.totalBytes=totalBytes;  this.used=used;  this.total=total;  this.percentUsed=percentUsed;}  }
class C{  public void putInt(int key,int value){  map.put(key,value);}  }
class C{  private int handleH(String value,DoubleMetaphoneResult result,int index){  if ((index == 0 || isVowel(charAt(value,index - 1))) && isVowel(charAt(value,index + 1))) {    result.append('H');    index+=2;  } else {    index++;  }  return index;}  }
class C{  protected CSSSACMediaList parseMediaList(){  CSSSACMediaList result=new CSSSACMediaList();  result.append(parseMediaQuery());  while (current == LexicalUnits.COMMA) {    nextIgnoreSpaces();    result.append(parseMediaQuery());  }  return result;}  }
class C{  private String certInfo(final String keyId,final ConfProxyProperties conf){  if (keyId == null) {    return "";  }  Path certPath=conf.getCertPath(keyId).toAbsolutePath();  byte[] certBytes=null;  try {    certBytes=Files.readAllBytes(certPath);  } catch (  IOException e) {    log.warn("Cert file missing: {}",e);    return " (CERTIFICATE FILE MISSING!)";  }  try {    CryptoUtils.readCertificate(certBytes);  } catch (  Exception e) {    log.warn("Invalid certificate: {}",e);    return " (INVALID CERTIFICATE - " + e.getMessage() + ")";  }  return " (Certificate: " + certPath.toString() + ")";}  }
class C{  public boolean isTaxIncluded(){  Object oo=get_Value(COLUMNNAME_IsTaxIncluded);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static UUID fromString(String input,boolean withDashes){  return withDashes ? UUID.fromString(input) : UUID.fromString(UUID_PAT_NO_DASHES.matcher(input).replaceFirst("$1-$2-$3-$4-$5"));}  }
class C{  @Override public void propertyChange(PropertyChangeEvent event){  if (!(event.getSource() instanceof Context)) {    return;  }  Context context=(Context)event.getSource();  if (event.getPropertyName().equals("sessionTimeout")) {    try {      int interval=((Integer)event.getNewValue()).intValue();      if (interval < RegionConfiguration.DEFAULT_MAX_INACTIVE_INTERVAL) {        getLogger().warn("The configured session timeout of " + interval + " minutes is invalid. Using the original value of "+ event.getOldValue()+ " minutes.");        interval=((Integer)event.getOldValue()).intValue();        ;      }      setMaxInactiveInterval(interval == RegionConfiguration.DEFAULT_MAX_INACTIVE_INTERVAL ? RegionConfiguration.DEFAULT_MAX_INACTIVE_INTERVAL : interval * 60);    } catch (    NumberFormatException e) {      getLogger().error(sm.getString("standardManager.sessionTimeout",event.getNewValue().toString()));    }  }}  }
class C{  @Override public void postDelayed(Runnable runnable,long delayMillis){  if (runnable == null)   return;  TaskProxy.sHandler.postDelayed(runnable,delayMillis);}  }
class C{  public void addElement(int value){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.addElement(value);}  }
class C{  public static String appendParam(String url,String param){  String[] pa=param.split("&");  for (  String p : pa) {    if (p.trim().length() == 0)     continue;    String[] kv=p.split("=");    if (kv.length == 2) {      url=url + (url.indexOf('?') > 0 ? "&" : "?") + kv[0]+ "="+ kv[1];    } else {      warn("Skipping param " + p + " which is not on form key=value");    }  }  return url;}  }
class C{  public void ensureCapacity(int minCapacity){  if (table.length < minCapacity) {    int newCapacity=nextPrime(minCapacity);    rehash(newCapacity);  }}  }
class C{  public ServerController(String baseDir){  setBaseDir(baseDir);}  }
class C{  public static KeyStore createClient(KeyStore caKeyStore){  KeyStore clientKeyStore=createKeyStore();  copySelfSignedCertificates(clientKeyStore,caKeyStore);  return clientKeyStore;}  }
class C{  private Request parseRequest(final BufferedInputStream bis) throws InterruptedException, IOException {  final String method;  final String uri;  final Map<String,String> headers=new TreeMap<String,String>(new CaseInsensitiveStringComparator());  final LinkedHashMap<String,Vector<String>> params=new LinkedHashMap<String,Vector<String>>();{    final String requestLine=readLine(bis);    if (requestLine == null)     sendError(HTTP_BADREQUEST,ERR_BAD_REQUEST);    final StringTokenizer st=new StringTokenizer(requestLine);    if (!st.hasMoreTokens())     sendError(HTTP_BADREQUEST,ERR_BAD_REQUEST);    method=st.nextToken();    if (!st.hasMoreTokens()) {      sendError(HTTP_BADREQUEST,ERR_BAD_REQUEST);    }    final String requestURI=st.nextToken();    String uriString=requestURI;    final int qmi=uriString.indexOf('?');    if (qmi != -1) {      decodeParams(uriString.substring(qmi + 1),params);      uriString=decodePercent(uriString.substring(0,qmi));    } else {      uriString=decodePercent(uriString);    }    uri=uriString;    final String version=st.nextToken();    if (log.isDebugEnabled()) {      log.debug("method=" + method + ", requestURI=["+ requestURI+ "], version="+ version);    }  }{    String line=readLine(bis);    while (line != null && line.length() > 0) {      final int p=line.indexOf(':');      final String name=line.substring(0,p).trim();      final String value=line.substring(p + 1).trim();      headers.put(name,value);      if (log.isDebugEnabled())       log.debug("name=[" + name + "], value=["+ value+ "]");      line=readLine(bis);    }  }  final String contentType=headers.get(CONTENT_TYPE);  if (MIME_APPLICATION_URL_ENCODED.equals(contentType)) {    long size=0x7FFFFFFFFFFFFFFFl;    final String contentLength=headers.get(CONTENT_LENGTH);    if (contentLength != null) {      try {        size=Integer.parseInt(contentLength);      } catch (      NumberFormatException ex) {      }    }    if (size > 0) {      String s;      while ((s=readLine(bis)) != null) {        decodeParams(s,params);      }    }  } else {  }  return new Request(uri,method,headers,params,bis);}  }
class C{  public Object nextValue() throws JSONException {  int c=nextCleanInternal();switch (c) {case -1:    throw syntaxError("End of input");case '{':  return readObject();case '[':return readArray();case '\'':case '"':return nextString((char)c);default :pos--;return readLiteral();}}  }
class C{  private void showAndActivate(final String id,final boolean dirtyMode,List<FinalizableCommand> commandsList,boolean autoFocusContents,boolean forcedFocusRequest){  if (!getToolWindow(id).isAvailable()) {    return;  }  final WindowInfoImpl info=getInfo(id);  boolean toApplyInfo=false;  if (!info.isActive()) {    info.setActive(true);    toApplyInfo=true;  }  showToolWindowImpl(id,dirtyMode,commandsList);  if (toApplyInfo) {    appendApplyWindowInfoCmd(info,commandsList);    myActiveStack.push(id);  }  if (autoFocusContents && ApplicationManager.getApplication().isActive()) {    appendRequestFocusInToolWindowCmd(id,commandsList,forcedFocusRequest);  }}  }
class C{  private StringBuilder fixSource(StringBuilder fileData){  String fixed=fileData.toString();  fixed=fixed.replaceAll(":"," :");  fixed=fixed.replaceAll("\\.\\."," .. ");  fixed=fixed.concat("\n");  return new StringBuilder(fixed);}  }
class C{  public void clearDerefSet(ValueNumber value){  if (UnconditionalValueDerefAnalysis.DEBUG) {    System.out.println("Clearing dereference of " + value + " for # "+ System.identityHashCode(this));  }  valueNumbersUnconditionallyDereferenced.clear(value.getNumber());  derefLocationSetMap.remove(value);}  }
class C{  public void insertSite(Coordinate p){  insertSite(createVertex(p));}  }
class C{  @Override public boolean isForm(){  return res.isForm() || getFormRenderer().isXFA();}  }
class C{  private boolean isConditionSatisfied(Object key1,Object key2,int operator) throws TypeMismatchException {  return ((Boolean)TypeUtils.compare(key1,key2,operator)).booleanValue();}  }
class C{  public char readChar(){  scanner.useDelimiter(EMPTY_PATTERN);  String ch=scanner.next();  assert (ch.length() == 1) : "Internal (Std)In.readChar() error!" + " Please contact the authors.";  scanner.useDelimiter(WHITESPACE_PATTERN);  return ch.charAt(0);}  }
class C{  protected DataTypeMappingModelImpl(){  super();}  }
class C{  public Date parseMath(String math) throws ParseException {  if (0 == math.length()) {    return getNow();  }  ZoneId zoneId=zone.toZoneId();  LocalDateTime localDateTime=ZonedDateTime.ofInstant(getNow().toInstant(),zoneId).toLocalDateTime();  String[] ops=splitter.split(math);  int pos=0;  while (pos < ops.length) {    if (1 != ops[pos].length()) {      throw new ParseException("Multi character command found: \"" + ops[pos] + "\"",pos);    }    char command=ops[pos++].charAt(0);switch (command) {case '/':      if (ops.length < pos + 1) {        throw new ParseException("Need a unit after command: \"" + command + "\"",pos);      }    try {      localDateTime=round(localDateTime,ops[pos++]);    } catch (    IllegalArgumentException e) {      throw new ParseException("Unit not recognized: \"" + ops[pos - 1] + "\"",pos - 1);    }  break;case '+':case '-':if (ops.length < pos + 2) {  throw new ParseException("Need a value and unit for command: \"" + command + "\"",pos);}int val=0;try {val=Integer.valueOf(ops[pos++]);} catch (NumberFormatException e) {throw new ParseException("Not a Number: \"" + ops[pos - 1] + "\"",pos - 1);}if ('-' == command) {val=0 - val;}try {String unit=ops[pos++];localDateTime=add(localDateTime,val,unit);} catch (IllegalArgumentException e) {throw new ParseException("Unit not recognized: \"" + ops[pos - 1] + "\"",pos - 1);}break;default :throw new ParseException("Unrecognized command: \"" + command + "\"",pos - 1);}}return Date.from(ZonedDateTime.of(localDateTime,zoneId).toInstant());}  }
class C{  @Override public void step(SimState state){  double effectiveConsumptionRate=model.vegetationConsumptionRate / model.ticksPerMonth;  if (model.vegetationGrid.field[x][y] > effectiveConsumptionRate) {    this.energy+=effectiveConsumptionRate * model.energyPerUnitOfVegetation;    model.vegetationGrid.field[x][y]-=effectiveConsumptionRate;  } else {    DoubleBag result=new DoubleBag();    IntBag xPos=new IntBag(), yPos=new IntBag();    model.vegetationGrid.getNeighborsMaxDistance(x,y,model.herderVision,false,result,xPos,yPos);    double bestVeg=Double.MIN_VALUE;    int bestVegIndex=-1;    for (int i=0; i < result.numObjs; i++) {      if (result.objs[i] > bestVeg) {        bestVeg=result.objs[i];        bestVegIndex=i;      }    }    if (bestVegIndex != -1) {      x=xPos.objs[bestVegIndex];      y=yPos.objs[bestVegIndex];      model.agentGrid.setObjectLocation(this,x,y);    }  }  energy-=model.energyConsumptionRate / model.ticksPerMonth;  if (energy > model.birthEnergy) {    model.createOffspring(this);  }  if (energy < model.starvationLevel) {    model.removeAgent(this);  } else {    model.schedule.scheduleOnce(this);  }}  }
class C{  public void reset(){  localStores=new HashMap<String,ListenerStorageEngine>();}  }
class C{  public static String base64Encode(byte[] content) throws UtilException {  try {    return new String(Base64.encodeBase64(content),GlobalConstants.DEFAULT_CHARSET);  } catch (  UnsupportedEncodingException e) {    throw new UtilException(ErrorCodeDef.BASE64_ERROR_10037,e);  }}  }
class C{  public int indexOf(byte value){  return indexOf(0,value);}  }
class C{  public ProxyHttpServer(CoapServer server) throws IOException {  this(NetworkConfig.getStandard().getInt(NetworkConfig.Keys.HTTP_PORT));}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    testExpression.visit(v);    trueExpression.visit(v);    falseExpression.visit(v);  }}  }
class C{  public synchronized void removeLoggerListener(final LoggerListener loggerListener){  if (null == loggerListener) {    throw new NullPointerException("loggerListener");  }  if (null != m_loggerListener && m_loggerListener == loggerListener)   ;{    m_loggerListener=null;  }}  }
class C{  public Bar(){  super();}  }
class C{  public static PicasaUrl relativeToRoot(String relativePath){  return new PicasaUrl(ROOT_URL + relativePath);}  }
class C{  public static SessionWrapper serializableInstance(){  return new SessionWrapper(Session.serializableInstance());}  }
class C{  public void dispose(){  selectionStateBox.removeActionListener(selectionStateBoxListener);}  }
class C{  void moveForward(final int position){  assert position >= 0 && position <= mTemplate.length;  if (!isOnTemplate()) {    throw new IllegalStateException("Attempt to move forward while still in a variant");  }  mTemplatePosition=position - 1;  next();  assert templatePosition() >= position && isOnTemplate();  assert integrity();}  }
class C{  public String toString(){  return prettyName;}  }
class C{  ManagedIndexSchema(SolrConfig solrConfig,String name,InputSource is,boolean isMutable,String managedSchemaResourceName,int schemaZkVersion,Object schemaUpdateLock) throws KeeperException, InterruptedException {  super(solrConfig,name,is);  this.isMutable=isMutable;  this.managedSchemaResourceName=managedSchemaResourceName;  this.schemaZkVersion=schemaZkVersion;  this.schemaUpdateLock=schemaUpdateLock;}  }
class C{  public Tree<String> extractBestParse(int gState,int gp,int start,int end,List<String> sentence){  double bestScore=iScore[start][end][gState][gp];  String goalStr=(String)tagNumberer.object(gState);  if (end - start == 1) {    if (!grammar.isGrammarTag[gState]) {      List<Tree<String>> child=new ArrayList<Tree<String>>();      child.add(new Tree<String>(sentence.get(start)));      return new Tree<String>(goalStr,child);    } else {      double veryBestScore=Double.NEGATIVE_INFINITY;      int newIndex=-1;      UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(gState);      for (int r=0; r < unaries.length; r++) {        UnaryRule ur=unaries[r];        int cState=ur.childState;        double[][] scores=ur.getScores2();        for (int cp=0; cp < scores.length; cp++) {          if (scores[cp] == null)           continue;          double ruleScore=iScore[start][end][cState][cp] + scores[cp][gp];          if ((ruleScore >= veryBestScore) && (gState != cState || gp != cp) && (!grammar.isGrammarTag[ur.getChildState()])) {            veryBestScore=ruleScore;            newIndex=cState;          }        }      }      List<Tree<String>> child1=new ArrayList<Tree<String>>();      child1.add(new Tree<String>(sentence.get(start)));      String goalStr1=(String)tagNumberer.object(newIndex);      if (goalStr1 == null)       System.out.println("goalStr1==null with newIndex==" + newIndex + " goalStr=="+ goalStr);      List<Tree<String>> child=new ArrayList<Tree<String>>();      child.add(new Tree<String>(goalStr1,child1));      return new Tree<String>(goalStr,child);    }  }  for (int split=start + 1; split < end; split++) {    BinaryRule[] parentRules=grammar.splitRulesWithP(gState);    for (int i=0; i < parentRules.length; i++) {      BinaryRule br=parentRules[i];      int lState=br.leftChildState;      if (iScore[start][split][lState] == null)       continue;      int rState=br.rightChildState;      if (iScore[split][end][rState] == null)       continue;      double[][][] scores=br.getScores2();      for (int lp=0; lp < scores.length; lp++) {        for (int rp=0; rp < scores[lp].length; rp++) {          if (scores[lp][rp] == null)           continue;          double score=scores[lp][rp][gp] + iScore[start][split][lState][lp] + iScore[split][end][rState][rp];          if (matches(score,bestScore)) {            Tree<String> leftChildTree=extractBestParse(lState,lp,start,split,sentence);            Tree<String> rightChildTree=extractBestParse(rState,rp,split,end,sentence);            List<Tree<String>> children=new ArrayList<Tree<String>>();            children.add(leftChildTree);            children.add(rightChildTree);            Tree<String> result=new Tree<String>(goalStr,children);            return result;          }        }      }    }  }  UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(gState);  for (int r=0; r < unaries.length; r++) {    UnaryRule ur=unaries[r];    int cState=ur.childState;    if (iScore[start][end][cState] == null)     continue;    double[][] scores=ur.getScores2();    for (int cp=0; cp < scores.length; cp++) {      if (scores[cp] == null)       continue;      double score=scores[cp][gp] + iScore[start][end][cState][cp];      if ((cState != ur.parentState || cp != gp) && matches(score,bestScore)) {        Tree<String> childTree=extractBestParse(cState,cp,start,end,sentence);        List<Tree<String>> children=new ArrayList<Tree<String>>();        children.add(childTree);        Tree<String> result=new Tree<String>(goalStr,children);        return result;      }    }  }  System.err.println("Warning: could not find the optimal way to build state " + goalStr + " spanning from "+ start+ " to "+ end+ ".");  return null;}  }
class C{  public boolean isAnimated(){  return isAnimated;}  }
class C{  public static Map<String,Object> returnSuccess(List<String> successMessageList){  Map<String,Object> result=returnMessage(ModelService.RESPOND_SUCCESS,null);  result.put(ModelService.SUCCESS_MESSAGE_LIST,successMessageList);  return result;}  }
class C{  public void appendData(ParsableByteArray buffer,int length){  int remainingWriteLength=length;  while (remainingWriteLength > 0) {    if (dataQueue.isEmpty() || lastFragmentOffset == fragmentLength) {      lastFragmentOffset=0;      lastFragment=fragmentPool.allocateDirect();      dataQueue.add(lastFragment);    }    int thisWriteLength=Math.min(remainingWriteLength,fragmentLength - lastFragmentOffset);    buffer.readBytes(lastFragment,lastFragmentOffset,thisWriteLength);    lastFragmentOffset+=thisWriteLength;    remainingWriteLength-=thisWriteLength;  }  totalBytesWritten+=length;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.229 -0400",hash_original_method="9672E9BF1AC4A843B7E62F19261170F0",hash_generated_method="AA4280D1F86E349FD8E5DE687F0062DA") public DrmInfoRequest(int infoType,String mimeType){  mInfoType=infoType;  mMimeType=mimeType;}  }
class C{  public static Constraint validEmail(){  return new RegexConstraint(validEmailRegex,"Invalid Email Address");}  }
class C{  public ColorTintFilter(Color mixColor,float mixValue){  if (mixColor == null) {    throw new IllegalArgumentException("mixColor cannot be null");  }  this.mixColor=mixColor;  if (mixValue < 0.0f) {    mixValue=0.0f;  } else   if (mixValue > 1.0f) {    mixValue=1.0f;  }  this.mixValue=mixValue;}  }
class C{  public void reset(){  tbsGen=new V3TBSCertificateGenerator();  extGenerator.reset();}  }
class C{  public void layoutContainer(Container parent){  JRootPane root=(JRootPane)parent;  Rectangle b=root.getBounds();  Insets i=root.getInsets();  int nextY=0;  int w=b.width - i.right - i.left;  int h=b.height - i.top - i.bottom;  if (root.getLayeredPane() != null) {    root.getLayeredPane().setBounds(i.left,i.top,w,h);  }  if (root.getGlassPane() != null) {    root.getGlassPane().setBounds(i.left,i.top,w,h);  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof MetalRootPaneUI)) {    JComponent titlePane=((MetalRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      Dimension tpd=titlePane.getPreferredSize();      if (tpd != null) {        int tpHeight=tpd.height;        titlePane.setBounds(0,0,w,tpHeight);        nextY+=tpHeight;      }    }  }  if (root.getMenuBar() != null) {    Dimension mbd=root.getMenuBar().getPreferredSize();    root.getMenuBar().setBounds(0,nextY,w,mbd.height);    nextY+=mbd.height;  }  if (root.getContentPane() != null) {    Dimension cpd=root.getContentPane().getPreferredSize();    root.getContentPane().setBounds(0,nextY,w,h < nextY ? 0 : h - nextY);  }}  }
class C{  public byte[] encode(byte[] pArray){  return encodeBase64(pArray,false);}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.730 -0400",hash_original_method="570C1378326063600110CB3D156C7691",hash_generated_method="11531F2C7D6991750845B0705120981E") @Override public void write(String str) throws IOException {  out.write(str);}  }
class C{  public BoolLiteral createBoolLiteral(){  BoolLiteralImpl boolLiteral=new BoolLiteralImpl();  return boolLiteral;}  }
class C{  public void assertEmpty(String cacheName){  assert grid(0).cache(cacheName).get(KEY_VAL) == null;}  }
class C{  public static boolean isDataUri(@Nullable Uri uri){  return DATA_SCHEME.equals(getSchemeOrNull(uri));}  }
class C{  public void run(){  try {    if (gobblerFileHandle == null) {      outputToString();    } else {      outputToFile();    }  }  finally {    stillRunning=false;  }}  }
class C{  @SuppressWarnings("deprecation") @TargetApi(Build.VERSION_CODES.ECLAIR) @SuppressLint("NewApi") private void dumpEvent(MotionEvent event){  String names[]={"DOWN","UP","MOVE","CANCEL","OUTSIDE","POINTER_DOWN","POINTER_UP","7?","8?","9?"};  @SuppressWarnings("MismatchedQueryAndUpdateOfStringBuilder") StringBuilder sb=new StringBuilder();  int action=event.getAction();  int actionCode=action & MotionEvent.ACTION_MASK;  sb.append("event ACTION_").append(names[actionCode]);  if (actionCode == MotionEvent.ACTION_POINTER_DOWN || actionCode == MotionEvent.ACTION_POINTER_UP) {    sb.append("(pid ").append(action >> MotionEvent.ACTION_POINTER_ID_SHIFT);    sb.append(")");  }  sb.append("[");  for (int i=0; i < event.getPointerCount(); i++) {    sb.append("#").append(i);    sb.append("(pid ").append(event.getPointerId(i));    sb.append(")=").append((int)event.getX(i));    sb.append(",").append((int)event.getY(i));    if (i + 1 < event.getPointerCount())     sb.append(";");  }  sb.append("]");}  }
class C{  public void putAll(ContentValues other){  mValues.putAll(other.mValues);}  }
class C{  public static boolean isCjk(int codePoint){  if ((codePoint & 0xFFFFFF00) == 0) {    return false;  }  return CJK_BLOCKS.contains(Character.UnicodeBlock.of(codePoint));}  }
class C{  private static int decompose(long norm32,DecomposeArgs args){  int p=getExtraDataIndex(norm32);  args.length=extraData[p++];  if ((args.length & DECOMP_FLAG_LENGTH_HAS_CC) > 0) {    char bothCCs=extraData[p++];    args.cc=(UNSIGNED_BYTE_MASK) & (bothCCs >> 8);    args.trailCC=(UNSIGNED_BYTE_MASK) & bothCCs;  } else {    args.cc=args.trailCC=0;  }  args.length&=DECOMP_LENGTH_MASK;  return p;}  }
class C{  public static boolean patchClickCount(final MouseEvent e){  if (e.getClickCount() != 1 && e.getButton() > 3) {    ReflectionUtil.setField(MouseEvent.class,e,int.class,"clickCount",1);  }  return false;}  }
class C{  public int num_reductions(){  return _num_reductions;}  }
class C{  public float parseFloat(){  int mant=0;  int mantDig=0;  boolean mantPos=true;  boolean mantRead=false;  int exp=0;  int expDig=0;  int expAdj=0;  boolean expPos=true;switch (current) {case '-':    mantPos=false;case '+':  current=read();}m1: switch (current) {default :return Float.NaN;case '.':break;case '0':mantRead=true;l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;case '.':case 'e':case 'E':break m1;default :return 0.0f;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':mantRead=true;l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');} else {expAdj++;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}if (current == '.') {current=read();m2: switch (current) {default :case 'e':case 'E':if (!mantRead) {reportUnexpectedCharacterError(current);return 0.0f;}break;case '0':if (mantDig == 0) {l: for (; ; ) {current=read();expAdj--;switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :if (!mantRead) {return 0.0f;}break m2;case '0':}}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');expAdj--;}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}}switch (current) {case 'e':case 'E':current=read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '-':expPos=false;case '+':current=read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}en: switch (current) {case '0':l: for (; ; ) {current=read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :break en;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (expDig < 3) {expDig++;exp=exp * 10 + (current - '0');}current=read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}default :}if (!expPos) {exp=-exp;}exp+=expAdj;if (!mantPos) {mant=-mant;}return buildFloat(mant,exp);}  }
class C{  @Override public void addLayoutComponent(String name,Component comp){}  }
class C{  protected void updateBuildStatus(Notification notification,BuildTaskDescriptor descriptor,SubscriptionHandler<String> buildStatusHandler,SubscriptionHandler<String> buildOutputHandler,final String successMessage,final String errorMessage,final String prefixConsole,final BuildFinishedCallback buildFinishedCallback){  BuildStatus status=descriptor.getStatus();  if (status == BuildStatus.IN_PROGRESS || status == BuildStatus.IN_QUEUE) {    return;  }  if (status == BuildStatus.CANCELLED || status == BuildStatus.FAILED || status == BuildStatus.SUCCESSFUL) {    afterBuildFinished(notification,descriptor,buildStatusHandler,buildOutputHandler,successMessage,errorMessage,prefixConsole,buildFinishedCallback);  }}  }
class C{  public boolean imeExtract(){  return preferences.getBoolean(resources.getString(R.string.key_ime_extract),Boolean.parseBoolean(resources.getString(R.string.default_ime_extract)));}  }
class C{  public void onPackageModified(String packageName){}  }
class C{  public JMRIClientLight(int number,JMRIClientSystemConnectionMemo memo){  super(memo.getSystemPrefix() + "l" + number);  _number=number;  transmitName=memo.getTransmitPrefix() + "L" + number;  tc=memo.getJMRIClientTrafficController();  tc.addJMRIClientListener(this);  requestUpdateFromLayout();}  }
class C{  public static void main(String[] argv){  runClassifier(new RegressionByDiscretization(),argv);}  }
class C{  public String unflatten(){  StringWriter sw=new StringWriter();  if (root.isArray()) {    try {      unflattenArray(root.asArray()).writeTo(sw,getWriterConfig());    } catch (    IOException e) {    }    return sw.toString();  }  if (!root.isObject()) {    return root.toString();  }  JsonObject flattened=root.asObject();  JsonValue unflattened=flattened.names().isEmpty() ? Json.object() : null;  for (  String key : flattened.names()) {    JsonValue currentVal=unflattened;    String objKey=null;    Integer aryIdx=null;    Matcher matcher=keyPartPattern().matcher(key);    while (matcher.find()) {      String keyPart=matcher.group();      if (objKey != null ^ aryIdx != null) {        if (isJsonArray(keyPart)) {          currentVal=findOrCreateJsonArray(currentVal,objKey,aryIdx);          objKey=null;          aryIdx=extractIndex(keyPart);        } else {          if (flattened.get(key).isArray()) {            flattened.set(key,unflattenArray(flattened.get(key).asArray()));          }          currentVal=findOrCreateJsonObject(currentVal,objKey,aryIdx);          objKey=extractKey(keyPart);          aryIdx=null;        }      }      if (objKey == null && aryIdx == null) {        if (isJsonArray(keyPart)) {          aryIdx=extractIndex(keyPart);          if (currentVal == null)           currentVal=Json.array();        } else {          objKey=extractKey(keyPart);          if (currentVal == null)           currentVal=Json.object();        }      }      if (unflattened == null)       unflattened=currentVal;    }    setUnflattenedValue(flattened,key,currentVal,objKey,aryIdx);  }  try {    unflattened.writeTo(sw,getWriterConfig());  } catch (  IOException e) {  }  return sw.toString();}  }
class C{  public void decCqsStopped(){  this._stats.incLong(_numCqsStoppedId,-1);}  }
class C{  @SafeVarargs public static OrPredicate or(Predicate<Composite>... specs){  return new OrPredicate(Arrays.asList(specs));}  }
class C{  public void expand(long blockStartOff,int expansionSize){  if (endOff == startOff) {    assert endOff == blockStartOff : "Failed to expand range [endOff=" + endOff + ", blockStartOff="+ blockStartOff+ ", expansionSize="+ expansionSize+ ']';    endOff+=expansionSize - 1;  } else {    assert endOff == blockStartOff - 1;    endOff+=expansionSize;  }}  }
class C{  public static String toString(Object object,ToStringStyle style,boolean outputTransients,boolean outputStatics,Class reflectUpToClass){  return new ReflectionToStringBuilder(object,style,null,reflectUpToClass,outputTransients,outputStatics).toString();}  }
class C{  public List<FeedSource> _queryFeedAccount_FeedSources(long feedAccountId){synchronized (this) {    if (feedAccount_FeedSourcesQuery == null) {      QueryBuilder<FeedSource> queryBuilder=queryBuilder();      queryBuilder.where(Properties.FeedAccountId.eq(null));      feedAccount_FeedSourcesQuery=queryBuilder.build();    }  }  Query<FeedSource> query=feedAccount_FeedSourcesQuery.forCurrentThread();  query.setParameter(0,feedAccountId);  return query.list();}  }
class C{  public FindProviderStrategy withGroup(StorageSystem system,String groupName){  return new FindProviderStrategyByCG(dbClient,system,groupName,helper,cimPathFactory);}  }
class C{  public SVGAltGlyphElementBridge(){}  }
class C{  public void markNewSegment(){  nextIsNewSegment=true;}  }
class C{  public WireServiceConnection(IServiceProperties serviceProperties,IEncodingFactory encodingFactory,ProtocolCollection protocols) throws SQLException {  super(serviceProperties,encodingFactory,protocols);}  }
class C{  public HarvestInfo(final Long blockId,final BlockHeight height,final TimeInstant timeStamp,final Amount totalFee,final Long difficulty){  this.blockId=blockId;  this.height=height;  this.timeStamp=timeStamp;  this.totalFee=totalFee;  this.difficulty=difficulty;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.352 -0500",hash_original_method="A4A187292984F1C3EE73C7C78931040C",hash_generated_method="B45047FD99E72F75FF3244AA3317BDA2") public boolean hasFileDescriptors(){  return true;}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (_table == null) {    return;  }  int row=_table.getSelectedRow();  if (log.isDebugEnabled()) {    log.debug("Table valueChanged: row= " + row);  }  if (row >= 0) {    _addButton.setEnabled(true);    _addButton.setToolTipText(null);    if (_type != null && _type.equals("SignalHead")) {      makeIconMap(_pickListModel.getBeanAt(row));      clearIconPanel();      doIconPanel();    }  } else {    _addButton.setEnabled(false);    _addButton.setToolTipText(Bundle.getMessage("ToolTipPickFromTable"));  }  validate();}  }
class C{  @Override public byte[] serialize(Object o){  try {    JAXBContext context=JAXBContext.newInstance(o.getClass());    Marshaller m=context.createMarshaller();    m.setProperty(Marshaller.JAXB_FRAGMENT,Boolean.TRUE);    m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);    ByteArrayOutputStream stream=new ByteArrayOutputStream();    m.marshal(o,stream);    return stream.toByteArray();  } catch (  JAXBException e) {    e.printStackTrace();  }  return null;}  }
class C{  @Override public void rendererChanged(RendererChangeEvent event){  if (event.getSeriesVisibilityChanged()) {    configureDomainAxes();    configureRangeAxes();  }  fireChangeEvent();}  }
class C{  public static <T extends Comparable<? super T>>T max(final T... values){  T result=null;  if (values != null) {    for (    final T value : values) {      if (compare(value,result,false) > 0) {        result=value;      }    }  }  return result;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private void adjustAndMapSourceRangeRange(NormalSsaInsn insn){  int newRegStart=findRangeAndAdjust(insn);  RegisterSpecList sources=insn.getSources();  int szSources=sources.size();  int nextRopReg=newRegStart;  for (int i=0; i < szSources; i++) {    RegisterSpec source=sources.get(i);    int sourceReg=source.getReg();    int category=source.getCategory();    int curRopReg=nextRopReg;    nextRopReg+=category;    if (ssaRegsMapped.get(sourceReg)) {      continue;    }    LocalItem localItem=getLocalItemForReg(sourceReg);    addMapping(source,curRopReg);    if (localItem != null) {      markReserved(curRopReg,category);      ArrayList<RegisterSpec> similarRegisters=localVariables.get(localItem);      int szSimilar=similarRegisters.size();      for (int j=0; j < szSimilar; j++) {        RegisterSpec similarSpec=similarRegisters.get(j);        int similarReg=similarSpec.getReg();        if (-1 != sources.indexOfRegister(similarReg)) {          continue;        }        tryMapReg(similarSpec,curRopReg,category);      }    }  }}  }
class C{  protected void initializeWithPluginMetrics(){  m_pluginMetrics.clear();  List<AbstractEvaluationMetric> pluginMetrics=m_eval.getPluginMetrics();  if (pluginMetrics != null && pluginMetrics.size() > 0) {    for (    AbstractEvaluationMetric m : pluginMetrics) {      List<String> statNames=m.getStatisticNames();      for (      String s : statNames) {        m_pluginMetrics.put(s.toLowerCase(),m);      }    }  }}  }
class C{  @Override public void mouseWheelMoved(MouseWheelEvent e){  int z=e.getWheelRotation();  zoom_level_pos-=z;  if (zoom_level_pos < 0)   zoom_level_pos=0;  if (zoom_level_pos >= zoom_levels.length)   zoom_level_pos=zoom_levels.length - 1;  int x=e.getX();  int y=e.getY();  float old_zoom_level=zoom_level;  zoom_level=zoom_levels[zoom_level_pos];  float ratio=zoom_level / old_zoom_level;  shift_x-=(x - x / ratio) / old_zoom_level;  shift_y-=(y - y / ratio) / old_zoom_level;  if (!fastrendermode)   redraw(false); else   redraw(true);  repaint();}  }
class C{  protected LexicalUnit parsePropertyValueInternal() throws CSSException, IOException {  nextIgnoreSpaces();  LexicalUnit exp=null;  try {    exp=parseExpression(false);  } catch (  CSSParseException e) {    reportError(e);    throw e;  }  CSSParseException exception=null;  if (current != LexicalUnits.EOF)   exception=createCSSParseException("eof.expected");  scanner=null;  if (exception != null) {    errorHandler.fatalError(exception);  }  return exp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:31.459 -0500",hash_original_method="F2DDE632E78D7CF5EE18F245B99A4352",hash_generated_method="ABCF605936245ED0084439F6DA43E9A0") public void clear(){  this.parameters=null;}  }
class C{  public void updateRaster(float lt,float ln,ImageIcon ii,LinkProperties properties,int graphicUpdateMask) throws IOException, InterruptedException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(lt,ln,ii,properties,link.dos);}  }
class C{  public EaseOutIn(){}  }
class C{  public String name(){  return name;}  }
class C{  public Element removeAttribute(String name){  checkNotRemoved();  final Attribute attribute=getAttribute(name);  if (attribute != null) {    xmlTree.removeAttribute(attribute);    delegate.getAttributes().removeNamedItem(name);  }  return this;}  }
class C{  private ImageReplicatorService.State buildImageReplicatorServiceState(String imageId,String imageDatastoreId){  ImageReplicatorService.State imageReplicatorService=new ImageReplicatorService.State();  imageReplicatorService.image=imageId;  imageReplicatorService.datastore=imageDatastoreId;  return imageReplicatorService;}  }
class C{  private Map<Initiator,List<StoragePort>> nonNullAssignmentMap(Map<Initiator,List<StoragePort>> assignmentMap){  if (assignmentMap != null) {    return assignmentMap;  }  return new HashMap<Initiator,List<StoragePort>>();}  }
class C{  public GeneralException(String msg,List<String> messages){  super(msg);  this.messages=messages;}  }
class C{  public void hide(){  setVisibility(View.GONE);}  }
class C{  @Nullable public <T>T resource(Long rsrcId){  return (T)rsrcMap.get(rsrcId);}  }
class C{  public static MultiTextEdit flatten(TextEdit edit){  MultiTextEdit result=new MultiTextEdit();  flatten(edit,result);  return result;}  }
class C{  private XParameterPeriodValue createPeriodValueData(long endTime,long currentEndTime,RolePricingData roleCostsForParameter,ParameterOptionRolePricingData roleCostsForOptions,PricedParameterHistory pph,ParameterHistory paramHist,ParameterDefinitionHistory pdh,XParameterIdData idData,UserAssignmentFactors userFactors,long paramValueStartTime,List<SteppedPriceData> steppedPrices) throws BillingRunFailed {  XParameterPeriodValue periodValue=null;  if (pdh.getValueType() == ParameterValueType.ENUMERATION) {    List<Object[]> options=findOptionsForParameter(endTime,pph,paramHist);    if (options.size() != 1) {      throwBillingRunFailed(String.format("Option '%s' not found!",paramHist.getValue()),LogMessageIdentifier.ERROR_OPTION_NOT_FOUND,paramHist.getValue());    }    PricedOptionHistory poh=(PricedOptionHistory)options.get(0)[0];    XParameterPeriodEnumType enumPeriodValue=new XParameterPeriodEnumType(idData);    enumPeriodValue.setPricePerSubscription(poh.getPricePerSubscription());    enumPeriodValue.setPricePerUser(poh.getPricePerUser());    XParameterOption parameterOption=new XParameterOption(enumPeriodValue);    ParameterOptionHistory optionHistory=(ParameterOptionHistory)options.get(0)[1];    parameterOption.setId(optionHistory.getOptionId());    parameterOption.setRolePrices(roleCostsForOptions.getRolePricingDataForPricedParameterKey(Long.valueOf(pph.getObjKey())));    enumPeriodValue.setParameterOption(parameterOption);    enumPeriodValue.setKey(Long.valueOf(poh.getObjKey()));    updateRoleFactors(enumPeriodValue.getRolePrices(),userFactors,enumPeriodValue.getKey());    periodValue=enumPeriodValue;  } else {    XParameterPeriodPrimitiveType primitivePeriodValue=new XParameterPeriodPrimitiveType(idData,roleCostsForParameter,steppedPrices);    primitivePeriodValue.setValue(paramHist.getValue());    primitivePeriodValue.setPricePerSubscription(pph.getPricePerSubscription());    primitivePeriodValue.setPricePerUser(pph.getPricePerUser());    primitivePeriodValue.setKey(Long.valueOf(pph.getObjKey()));    updateRoleFactors(primitivePeriodValue.getRolePrices(),userFactors,primitivePeriodValue.getKey());    periodValue=primitivePeriodValue;  }  periodValue.setStartTime(paramValueStartTime);  periodValue.setEndTime(currentEndTime);  periodValue.setUserAssignmentFactor(userFactors.getBasicFactor());  return periodValue;}  }
class C{  public LifeSupportGear(String name,String clazz,String subclass,Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public void icon(int drawable){  this.icon.setImageDrawable(context.getResources().getDrawable(drawable));}  }
class C{  public void testOneTrackOneSegment() throws Exception {  Capture<Track> track=new Capture<Track>();  Location location0=createLocation(0,DATE_FORMAT_0.parse(TRACK_TIME_0).getTime());  Location location1=createLocation(1,DATE_FORMAT_1.parse(TRACK_TIME_1).getTime());  myTracksProviderUtils.clearTrack(getContext(),TRACK_ID_0);  expectFirstTrackPoint(location0,TRACK_ID_0,TRACK_POINT_ID_0);  expect(myTracksProviderUtils.bulkInsertTrackPoint(LocationsMatcher.eqLoc(location1),eq(1),eq(TRACK_ID_0))).andReturn(1);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID_0)).andReturn(TRACK_POINT_ID_1);  expect(myTracksProviderUtils.getTrack(PreferencesUtils.getLong(getContext(),R.string.recording_track_id_key))).andStubReturn(null);  expectUpdateTrack(track,true,TRACK_ID_0);  AndroidMock.replay(myTracksProviderUtils);  InputStream inputStream=new ByteArrayInputStream(VALID_ONE_TRACK_ONE_SEGMENT_GPX.getBytes());  KmlFileTrackImporter kmlFileTrackImporter=new KmlFileTrackImporter(getContext(),TRACK_ID_0,myTracksProviderUtils);  long trackId=kmlFileTrackImporter.importFile(inputStream);  assertEquals(TRACK_ID_0,trackId);  long time0=DATE_FORMAT_0.parse(TRACK_TIME_0).getTime();  long time1=DATE_FORMAT_1.parse(TRACK_TIME_1).getTime();  assertEquals(time1 - time0,track.getValue().getTripStatistics().getTotalTime());  AndroidMock.verify(myTracksProviderUtils);  verifyTrack(track.getValue(),TRACK_NAME_0,TRACK_DESCRIPTION_0,time0);}  }
class C{  public boolean join(IStorageDescriptor other){  if (this.getChannelId() != other.getChannelId()) {    return false;  } else {    return join(other.getPosition(),other.getSize());  }}  }
class C{  @Override default Eval<OptionalDouble> maxDouble(final ToDoubleFunction<? super T> fn){  return Eval.later(null);}  }
class C{  public boolean hasIndex(){  return getIndex() != null;}  }
class C{  public Credentials withToken(Token token){  this.token=token;  return this;}  }
class C{  public long toMicros(){  return TimeUnit.MICROSECONDS.convert(length,timeUnit);}  }
class C{  public VNXeCommandJob deleteNfsShareForSnapshot(String shareId) throws VNXeException {  NfsShareRequests req=new NfsShareRequests(_khClient);  return req.deleteShareForSnapshot(shareId);}  }
class C{  public T caseControlLetterEscapeSequence(ControlLetterEscapeSequence object){  return null;}  }
class C{  protected GemFireHealthImpl(GfManagerAgent agent,AdminDistributedSystem system){  this.agent=agent;  this.system=system;  this.hostConfigs=new HashMap();  this.hostMembers=new HashMap();  this.okayHealth=new HashSet();  this.poorHealth=new HashSet();  this.overallHealth=GOOD_HEALTH;  this.isClosed=false;  GemFireVM[] apps=this.agent.listApplications();  for (int i=0; i < apps.length; i++) {    GemFireVM member=apps[i];    this.noteNewMember(member);  }  agent.addJoinLeaveListener(this);  setDefaultGemFireHealthConfig(createGemFireHealthConfig(null));  setDistributedSystemHealthConfig(createDistributedSystemHealthConfig());}  }
class C{  public synchronized void addRR(Record r){  if (rrs.size() == 0) {    safeAddRR(r);    return;  }  Record first=first();  if (!r.sameRRset(first))   throw new IllegalArgumentException("record does not match " + "rrset");  if (r.getTTL() != first.getTTL()) {    if (r.getTTL() > first.getTTL()) {      r=r.cloneRecord();      r.setTTL(first.getTTL());    } else {      for (int i=0; i < rrs.size(); i++) {        Record tmp=(Record)rrs.get(i);        tmp=tmp.cloneRecord();        tmp.setTTL(r.getTTL());        rrs.set(i,tmp);      }    }  }  if (!rrs.contains(r))   safeAddRR(r);}  }
class C{  public static FeatureSet empty(){  return new FeatureSet(ImmutableSet.of(),ImmutableSet.of());}  }
class C{  protected void handleExpandControlClick(final TreePath path,final int mouseX,final int mouseY){  fMouseHandler=new TreeArrowMouseInputHandler(path);}  }
class C{  public Boolean isSuppressPowerOn(){  return suppressPowerOn;}  }
class C{  public EaseIn(){}  }
class C{  public boolean isActive(){  return active;}  }
class C{  @TargetApi(21) public static AddonDetailsFragment newInstance(AddonListFragment.ViewHolder vh){  AddonDetailsFragment fragment=new AddonDetailsFragment();  Bundle args=new Bundle();  args.putString(BUNDLE_KEY_ADDONID,vh.addonId);  args.putString(BUNDLE_KEY_NAME,vh.addonName);  args.putString(BUNDLE_KEY_AUTHOR,vh.author);  args.putString(BUNDLE_KEY_VERSION,vh.version);  args.putString(BUNDLE_KEY_SUMMARY,vh.summary);  args.putString(BUNDLE_KEY_DESCRIPTION,vh.description);  args.putString(BUNDLE_KEY_FANART,vh.fanart);  args.putString(BUNDLE_KEY_POSTER,vh.poster);  args.putBoolean(BUNDLE_KEY_ENABLED,vh.enabled);  args.putBoolean(BUNDLE_KEY_BROWSABLE,vh.browsable);  if (Utils.isLollipopOrLater()) {    args.putString(POSTER_TRANS_NAME,vh.artView.getTransitionName());  }  fragment.setArguments(args);  return fragment;}  }
class C{  public void reset(){  System.arraycopy(IV,0,ofbV,0,IV.length);  byteCount=0;  cipher.reset();}  }
class C{  public Iterable<Integer> path(){  return path;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void editClassifier(){  GenericObjectEditorDialog dialog;  String classifier;  if (m_ListClassifiers.getList().getSelectedIndex() == -1)   return;  dialog=getGOEDialog(MultiLabelClassifier.class,new BR());  dialog.setTitle("Edit classifier");  classifier=m_ModelClassifiers.get(m_ListClassifiers.getList().getSelectedIndex());  try {    dialog.setCurrent(OptionUtils.fromCommandLine(MultiLabelClassifier.class,classifier));  } catch (  Exception e) {    handleException("Failed to edit classifier: " + classifier,e);  }  dialog.setLocationRelativeTo(this);  dialog.setVisible(true);  if (dialog.getResult() != GenericObjectEditorDialog.APPROVE_OPTION)   return;  m_ModelClassifiers.setElementAt(OptionUtils.toCommandLine(dialog.getCurrent()),m_ListClassifiers.getList().getSelectedIndex());  m_Modified=true;  updateButtons();}  }
class C{  @SuppressWarnings("unchecked") private static <Type extends Message>Type copyAsType(final Type typeDefaultInstance,final Message source){  return (Type)typeDefaultInstance.newBuilderForType().mergeFrom(source).build();}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public int hashCode(){  if (hashCode == 0) {    if (bytes != null && bytes.length != 0) {      int len=bytes.length;      int inc=((len - 32) / 32) + 1;      for (int i=0; i < len; ) {        hashCode=(hashCode * 37) + bytes[i];        i+=inc;      }    }    if (hashCode == 0) {      hashCode=1;    }  }  return hashCode;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void init() throws ServletException {}  }
class C{  private static boolean isNetworkProblem(Object error){  return (error instanceof NetworkError) || (error instanceof NoConnectionError);}  }
class C{  protected String encodeCookie(SerializableCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  @Override protected SparseGraph newGraph(Attributes attrs){  return builder.createGraph();}  }
class C{  public boolean isVerticalSlide(){  return (transitionType == TYPE_SLIDE || transitionType == TYPE_FAST_SLIDE) && slideType == SLIDE_VERTICAL;}  }
class C{  protected CCCallFuncND(Object t,String s,Object d,Class<?>[] p){  super(t,s,p);  data=d;}  }
class C{  public static double ratio(Vessel<? extends Number> x,Vessel<? extends Number> y){  Number xVal=x.peek();  Number yVal=y.peek();  return xVal.doubleValue() / yVal.doubleValue();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_METHOD_BODY_2__POSTCONDITION_1:    return postcondition_1 != null && !postcondition_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void dispatchAllMatchingGatheredElements(String elemName) throws Exception {  SaxHandlerBase.ElementType dispelem=(SaxHandlerBase.ElementType)elementTypes.get(elemName);  if (dispelem == null) {    return;  }  boolean found=false;  for (Iterator it=gatherBuffer.iterator(); it.hasNext(); ) {    Object[] elem=(Object[])it.next();    SaxHandlerBase.ElementType type=(SaxHandlerBase.ElementType)elem[0];    if (type == null) {      continue;    }    if (type == dispelem) {      found=true;    }    if (found) {      it.remove();      if (elem[1] == null) {        type.endElement();        if (type == dispelem) {          found=false;        }      } else       if (elem[1] instanceof String) {        String charstring=(String)elem[1];        char[] chars=charstring.toCharArray();        type.characters(chars,0,chars.length);      } else {        Attributes atts=(Attributes)elem[1];        type.startElement(atts);      }    }  }}  }
class C{  private boolean isNoiseWord(String term){  int len=term.length();  if (minWordLen > 0 && len < minWordLen) {    return true;  }  if (maxWordLen > 0 && len > maxWordLen) {    return true;  }  return stopWords != null && stopWords.contains(term);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @RequestMapping(value="/authenticate",method=RequestMethod.POST,consumes={MediaType.APPLICATION_JSON_VALUE}) public AccountAuth authenticate(@Valid @RequestBody Credential credential){  return accountService.authenticate(credential.username.trim(),credential.password).orElseThrow(null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void createCollection(Set<String> solrHosts,String collectionName,String configName,int numShards,int replicationFactor,int numShardsPerNode) throws Exception {  createCollection(solrHosts,collectionName,configName,numShards,replicationFactor,numShardsPerNode,null);}  }
class C{  @HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int sasCore,int grain){  checkSasHandleGood(sasCore);  grainSamples=grain;  return 0;}  }
class C{  public void removeValue(Comparable key){  int index=getIndex(key);  if (index < 0) {    throw new UnknownKeyException("The key (" + key + ") is not recognised.");  }  removeValue(index);}  }
class C{  public final int size(){  if (written < 0) {    written=Integer.MAX_VALUE;  }  return written;}  }
class C{  protected void progress(S state,S patchState){  ServiceUtils.logInfo(this,"Progressing task service for workflow %s",state.documentSelfLink);  try {    E nextSubStage=ServiceDocumentUtils.getTaskStateSubStage(patchState);    TaskServiceUtils.progress(this,ServiceDocumentUtils.getTaskServiceState(state),nextSubStage.ordinal(),null);  } catch (  Throwable t) {    fail(state,t);  }}  }
class C{  public void deploy(int id,Coords c,int nFacing,int elevation,List<Entity> loadedUnits,boolean assaultDrop){  int packetCount=6 + loadedUnits.size();  int index=0;  Object[] data=new Object[packetCount];  data[index++]=new Integer(id);  data[index++]=c;  data[index++]=new Integer(nFacing);  data[index++]=new Integer(elevation);  data[index++]=new Integer(loadedUnits.size());  data[index++]=new Boolean(assaultDrop);  for (  Entity ent : loadedUnits) {    data[index++]=new Integer(ent.getId());  }  send(new Packet(Packet.COMMAND_ENTITY_DEPLOY,data));  flushConn();}  }
class C{  public void addExceptionMessage(ExceptionMessage exceptionMessage){  m_exceptionMessages.addElement(exceptionMessage);  Enumeration<ExceptionContext> enumeration;  enumeration=m_exceptionContexts.elements();  while (enumeration.hasMoreElements()) {    addExceptionContext(enumeration.nextElement());  }}  }
class C{  private void enableNew(){  boolean sel=fCreateNew.isSelected();  lWarehouse.setVisible(sel);  fWarehouse.setVisible(sel);  lWarehouseInfo.setVisible(!sel);  fWarehouseInfo.setVisible(!sel);  fX.setReadWrite(sel);  fY.setReadWrite(sel);  fZ.setReadWrite(sel);  fValue.setReadWrite(sel);  pack();}  }
class C{  private static int area(Size size){  if (size == null) {    return 0;  }  return size.width() * size.height();}  }
class C{  protected void doSmoothing(){  double val=m_InitialCount;  if (m_SpreadInitialCount) {    val/=m_ClassProbs.length;  }  for (int i=0; i < m_ClassProbs.length; i++) {    m_ClassProbs[i]+=val;  }}  }
class C{  public boolean hasInteriorIntersection(){  return hasInterior;}  }
class C{  public void updateTopic(String topic,DbContextRule rule){  topic=StringUtils.toLowerEnglish(topic);  RuleHead head=ruleMap.get(topic);  if (head == null) {    head=new RuleHead("db",topic,rule);    ruleMap.put(topic,head);    statements.add(head);  } else {    head.setRule(rule);  }}  }
class C{  public static double convertFeetToMeters(double feet){  return (feet / METERS_TO_FEET);}  }
class C{  public void key(K key){  this.key=key;}  }
class C{  public void sort(){  Collections.sort(this.labels);}  }
class C{  public boolean isSetSessionIDs(){  return this.sessionIDs != null;}  }
class C{  public void addClasspathEntries(List<String> paths){  if (paths != null) {    for (    String path : paths) {      addClasspath(path);    }  }}  }
class C{  private void unPauseGame(){  mViewPauseButton.setVisibility(View.VISIBLE);  mViewPlayButton.setVisibility(View.GONE);  mViewMatchPauseOverlay.setVisibility(View.GONE);  mViewCancelBar.setVisibility(View.GONE);  mCountDownTimer=new GameCountdown(mFramesPerSecond,mTimeLeftInMillis);  mCountDownTimer.start();  mGameView.setGameCountDown(mCountDownTimer);  wasPaused=false;  SensorManager sensorManager=(SensorManager)getActivity().getSystemService(Activity.SENSOR_SERVICE);  Sensor sensor=sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  if (sensor != null) {    sensorManager.registerListener(this,sensor,SensorManager.SENSOR_DELAY_GAME);  }  if (Utils.hasKitKat()) {    ImmersiveModeHelper.setImmersiveSticky(getActivity().getWindow());  }}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void clear(){  this.data.clear();}  }
class C{  public boolean isOrgAddressUsed(){  return orgAddressUsed;}  }
class C{  private void mapRelativeToAbsolute(float[] destPoints,float[] srcPoints,int numPoints){  for (int i=0; i < numPoints; i++) {    destPoints[i * 2 + 0]=srcPoints[i * 2 + 0] * mImageBounds.width() + mImageBounds.left;    destPoints[i * 2 + 1]=srcPoints[i * 2 + 1] * mImageBounds.height() + mImageBounds.top;  }}  }
class C{  public static void navigate(final String path){  if (API.manualAPI != null)   API.manualAPI.navigate(path);}  }
class C{  public Bindings add(String property,JComboBox combo,int defaultValue){  combo.addActionListener(this);  return add(new JComboBoxBinding(property,combo,defaultValue));}  }
class C{  public JSONObject put(String key,Collection<Object> value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  private void updateStats(ContentEvent event){  Instance instance;  if (event instanceof ClusteringContentEvent) {    ClusteringContentEvent ev=(ClusteringContentEvent)event;    instance=ev.getInstance();    DataPoint point=new DataPoint(instance,Integer.parseInt(event.getKey()));    model.trainOnInstance(point);    instancesCount++;  }  if (event instanceof ClusteringResultContentEvent) {    ClusteringResultContentEvent ev=(ClusteringResultContentEvent)event;    Clustering clustering=ev.getClustering();    for (int i=0; i < clustering.size(); i++) {      instance=new DenseInstance(1.0,clustering.get(i).getCenter());      instance.setDataset(model.getDataset());      DataPoint point=new DataPoint(instance,Integer.parseInt(event.getKey()));      model.trainOnInstance(point);      instancesCount++;    }  }  if (instancesCount % this.sampleFrequency == 0) {    logger.info("Trained model using {} events with classifier id {}",instancesCount,this.modelId);  }}  }
class C{  public String numFoldsTipText(){  return "The number of folds used for cross-validation (if 0, " + "performance on training data will be used).";}  }
class C{  private static String printRowChangeData(StringBuilder stringBuilder,RowChangeData rowChange,String lastSchema,boolean pureSQL,int sqlIndex,String charset,boolean hex,boolean specs,long seqno){  SimpleDateFormat formatter=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  printOptions(stringBuilder,rowChange.getOptions(),pureSQL);  if (!pureSQL)   println(stringBuilder,"- SQL(" + sqlIndex + ") =");  String schema=null;  for (  OneRowChange oneRowChange : rowChange.getRowChanges()) {    if (pureSQL) {      stringBuilder.append("/* SEQ# = ");      stringBuilder.append(seqno);      stringBuilder.append(" - SQL rendering of row change events is not supported */");      println(stringBuilder,"");    } else {      println(stringBuilder," - ACTION = " + oneRowChange.getAction().toString());      println(stringBuilder," - SCHEMA = " + oneRowChange.getSchemaName());      println(stringBuilder," - TABLE = " + oneRowChange.getTableName());      ArrayList<OneRowChange.ColumnSpec> keys=oneRowChange.getKeySpec();      ArrayList<OneRowChange.ColumnSpec> columns=oneRowChange.getColumnSpec();      ArrayList<ArrayList<OneRowChange.ColumnVal>> keyValues=oneRowChange.getKeyValues();      ArrayList<ArrayList<OneRowChange.ColumnVal>> columnValues=oneRowChange.getColumnValues();      for (int row=0; row < columnValues.size() || row < keyValues.size(); row++) {        println(stringBuilder," - ROW# = " + row);        if (columnValues.size() > 0) {          for (int c=0; c < columns.size(); c++) {            OneRowChange.ColumnSpec colSpec=columns.get(c);            ArrayList<OneRowChange.ColumnVal> values=columnValues.get(row);            OneRowChange.ColumnVal value=values.get(c);            println(stringBuilder,formatColumn(colSpec,value,"COL",charset,hex,specs,formatter));          }        } else         if (columns.size() > 0) {          StringBuffer buf=new StringBuffer("Column specs only found : ");          for (int c=0; c < columns.size(); c++) {            OneRowChange.ColumnSpec colSpec=columns.get(c);            if (c > 0)             buf.append(", ");            buf.append(colSpec.getName());          }          println(stringBuilder,buf.toString());        }        for (int k=0; k < keys.size(); k++) {          if (keyValues.size() > 0) {            OneRowChange.ColumnSpec colSpec=keys.get(k);            ArrayList<OneRowChange.ColumnVal> values=null;            if (row < keyValues.size())             values=keyValues.get(row);            OneRowChange.ColumnVal value=null;            if (values != null && k < values.size())             value=values.get(k);            println(stringBuilder,formatColumn(colSpec,value,"KEY",charset,hex,specs,formatter));          }        }      }    }  }  return schema;}  }
class C{  public void addInvokespecial(CtClass clazz,String name,String desc){  boolean isInterface=clazz == null ? false : clazz.isInterface();  addInvokespecial(isInterface,constPool.addClassInfo(clazz),name,desc);}  }
class C{  public SearchSourceBuilder minScore(float minScore){  this.minScore=minScore;  return this;}  }
class C{  public Map<String,Object> readMessage(Pdu pdu){  Optional<String> messageName=typeFactory.getStructNameForId(pdu.getId());  if (messageName.isPresent()) {    try {      MessageInputStream in=new MessageInputStream(new ByteArrayInputStream(pdu.getPayload()));      return (Map<String,Object>)readValue(messageName.get(),in);    } catch (    IOException e) {      throw new PduException(e);    }  } else {    return null;  }}  }
class C{  public void addAnnotation(AnnotationValue annotationValue){  HashMap<ClassDescriptor,AnnotationValue> updatedMap=new HashMap<ClassDescriptor,AnnotationValue>(classAnnotations);  updatedMap.put(annotationValue.getAnnotationClass(),annotationValue);  classAnnotations=Util.immutableMap(updatedMap);}  }
class C{  public void testFileDirectoryWithConfigOption() throws Exception {  Properties properties=loadProperties("test-file-configfile-directory/test-subfolder");  assertEquals("12345",properties.getProperty("cargo.servlet.port"));}  }
class C{  public int compare(Money o1,Money o2){  int returnVal=CoreUtils.nullSafeComparator(o1.getBigDecimalValue(),o2.getBigDecimalValue());  if (m_ascending.equals(Boolean.FALSE)) {    returnVal=returnVal * -1;  }  return returnVal;}  }
class C{  public static void dataReductionProxyLoFiUIAction(int action){  assert action >= 0 && action < LOFI_ACTION_INDEX_BOUNDARY;  RecordHistogram.recordEnumeratedHistogram("DataReductionProxy.LoFi.UIAction",action,DataReductionProxyUma.LOFI_ACTION_INDEX_BOUNDARY);}  }
class C{  @SuppressWarnings("unchecked") public void stop(){  for (  MessageProcessor mp : messageProcessors) {    mp.stop();  }  for (  Object o : new Object[]{udpConnectors,tcpConnectors}) {    Map<TransportAddress,Map<TransportAddress,Connector>> connectorsMap=(Map<TransportAddress,Map<TransportAddress,Connector>>)o;synchronized (connectorsMap) {      for (      Map<TransportAddress,Connector> connectorsForLocalAddress : connectorsMap.values()) {        for (        Connector connector : connectorsForLocalAddress.values()) {          connector.stop();        }      }    }  }}  }
class C{  public Sobol(){  super();}  }
class C{  @Override public int removeSorted(E element,Comparator<? super E> cmp){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public static void registerConfig(){  Config.registerSelf(MQCommandProcessor.class);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.238 -0500",hash_original_method="298F8792979BB77A625D9BD803A02F79",hash_generated_method="D53EEDA736AC930526CFF55855BFF7DB") @Override public void close() throws IOException {synchronized (lock) {    buf=null;    in.close();  }}  }
class C{  public void initialize(ClassLoadHelper loadHelper,SchedulerSignaler schedSignaler){  this.signaler=schedSignaler;  getLog().info("RAMJobStore initialized.");}  }
class C{  private boolean drawTile(long owner,Canvas c,IMapView osmv,int minz,int maxz,int z,int x,int y,boolean squareTiles,double lonOffset,double latOffset){  final MapTile tile=new MapTile(myRendererInfo.getId(),z,x,y);  if (mTileProvider.isTileAvailable(tile)) {    c.drawBitmap(mTileProvider.getMapTile(tile,owner),new Rect(0,0,myRendererInfo.getTileWidth(),myRendererInfo.getTileHeight()),getScreenRectForTile(c,osmv,z,y,x,squareTiles,lonOffset,latOffset),mPaint);    return true;  } else {    if (z < maxz && z < myRendererInfo.getMaxZoomLevel()) {      x<<=1;      y<<=1;      ++z;      boolean result=drawTile(owner,c,osmv,z,maxz,z,x,y,squareTiles,lonOffset,latOffset);      result=drawTile(owner,c,osmv,z,maxz,z,x + 1,y,squareTiles,lonOffset,latOffset) && result;      result=drawTile(owner,c,osmv,z,maxz,z,x,y + 1,squareTiles,lonOffset,latOffset) && result;      result=drawTile(owner,c,osmv,z,maxz,z,x + 1,y + 1,squareTiles,lonOffset,latOffset) && result;      return result;    } else {      return false;    }  }}  }
class C{  @Override public byte[] toByteArray(){  ByteArrayDataOutput byteArrayDataOutput=ByteStreams.newDataOutput();  try {    this.write(byteArrayDataOutput);    return byteArrayDataOutput.toByteArray();  } catch (  IOException e) {    LOG.error("Failed to serialize due to: " + e.getMessage(),e);    throw new RuntimeException(e);  }}  }
class C{  private AllocatableValue evacuateRegister(Register reg){  AllocatableValue val=getCurrentValue(reg);  if (val == null) {    return null;  }  setCurrentValue(reg,null);  return val;}  }
class C{  public void reject(){  this.manager.replyRejectPacket(this.byteStreamRequest);}  }
class C{  public ColorList sortByDistance(boolean isReversed){  return sortByDistance(new HSVDistanceProxy(),isReversed);}  }
class C{  private <T>FutureTask<T> submitWithDynamicLatency(final AbstractTask<T> task,final ExecutorService service,final TaskCounters taskCounters){synchronized (taskCounters.lastArrivalNanoTime) {    final long lastArrivalNanoTime=taskCounters.lastArrivalNanoTime.get();    final long now=System.nanoTime();    final long delta=now - lastArrivalNanoTime;    taskCounters.interArrivalNanoTime.addAndGet(delta);    taskCounters.lastArrivalNanoTime.set(now);  }  taskCounters.taskSubmitCount.incrementAndGet();  if (resourceManager instanceof StoreManager) {    if (!((StoreManager)resourceManager).awaitRunning()) {      throw new RejectedExecutionException("StoreManager is not available");    }  }  if (service == readService) {    journalOverextended(task);  }  if (backoff && service instanceof ThreadPoolExecutor) {    final BlockingQueue<Runnable> queue=((ThreadPoolExecutor)service).getQueue();    if (!(queue instanceof SynchronousQueue)) {      final int queueRemainingCapacity=queue.remainingCapacity();      final int queueSize=queue.size();      if (queue.size() * 1.10 >= queueRemainingCapacity) {        try {          if (BigdataStatics.debug)           System.err.print("z");          Thread.sleep(50);        } catch (        InterruptedException e) {          throw new RuntimeException(e);        }      }    }  }  final FutureTask<T> ft;  if (service instanceof WriteExecutorService) {    final NonBlockingLockManagerWithNewDesign<String> lockManager=((WriteExecutorService)service).getLockManager();    ft=lockManager.submit(task.getResource(),task);  } else {    ft=new FutureTask<T>(task);    service.submit(ft);  }  return ft;}  }
class C{  public int costTo(Dibit stateTest){  if (isCurrentConnectionCorrect()) {    Constellation c=Constellation.fromStateAndInputDibits(stateTest,mConstellation.getInput());    return mConstellation.costTo(c);  } else {    int cheapestCost=100;    for (    Dibit inputTest : Dibit.values()) {      Constellation constellationTest=Constellation.fromStateAndInputDibits(stateTest,inputTest);      int cost=mConnectedNode.costTo(inputTest) + mConstellation.costTo(constellationTest);      if (cost < cheapestCost) {        cheapestCost=cost;      }    }    return cheapestCost;  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static synchronized void addSessionParams(String sessionId,Map<?,?> parameterMap){  Map tempMap=new HashMap();  tempMap.putAll(parameterMap);  paramStore.put(sessionId,tempMap);}  }
class C{  public Map<String,Mapping> performTranslogRecovery(boolean indexExists){  final Map<String,Mapping> recoveredTypes=internalPerformTranslogRecovery(false,indexExists);  assert recoveryState.getStage() == RecoveryState.Stage.TRANSLOG : "TRANSLOG stage expected but was: " + recoveryState.getStage();  return recoveredTypes;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  protected void engineSetPadding(String paddingScheme) throws NoSuchPaddingException {  core.setPadding(paddingScheme);}  }
class C{  public Asinh(){  super(Number.class,Number.class);}  }
class C{  public TokenScanner(IScanner scanner,IDocument document){  fScanner=scanner;  fEndPosition=fScanner.getSource().length - 1;  fDocument=document;}  }
class C{  public synchronized Iterator<Relationship> allRelationships(){  return new RelationshipIterator(false);}  }
class C{  private void zipFile(ZipOutputStream zos,String pathInZip,File file) throws IOException {  byte[] buf=new byte[1024];  zos.putNextEntry(new ZipEntry(pathInZip));  FileInputStream in=null;  try {    in=new FileInputStream(file.getCanonicalFile());    int len;    while ((len=in.read(buf)) > 0) {      zos.write(buf,0,len);    }  }  finally {    if (in != null)     in.close();    zos.closeEntry();  }}  }
class C{  public Parameter createNodeTraitsParameter(String name,int dim,double[] initialValues,boolean rootNode,boolean internalNodes,boolean leafNodes,boolean firesTreeEvents){  if (!rootNode && !internalNodes && !leafNodes) {    throw new IllegalArgumentException("At least one of rootNode, internalNodes or leafNodes must be true");  }  CompoundParameter parameter=new CompoundParameter(name);  hasTraits=true;  for (int i=externalNodeCount; i < nodeCount; i++) {    nodes[i].createTraitParameter(name,dim,initialValues,firesTreeEvents);    if ((rootNode && nodes[i] == root) || (internalNodes && nodes[i] != root)) {      parameter.addParameter(nodes[i].getTraitParameter(name));    }  }  for (int i=0; i < externalNodeCount; i++) {    nodes[i].createTraitParameter(name,dim,initialValues,firesTreeEvents);    if (leafNodes) {      parameter.addParameter(nodes[i].getTraitParameter(name));    }  }  return parameter;}  }
class C{  public byte[] marshall(Object object,String noNamespaceSchemaLocation) throws JAXBException, IOException {  JAXBContext context=JAXBContext.newInstance(object.getClass());  Marshaller marshaller=context.createMarshaller();  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);  if (null != noNamespaceSchemaLocation) {    marshaller.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,noNamespaceSchemaLocation);  }  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){    marshaller.marshal(object,outputStream);    return outputStream.toByteArray();  } }  }
class C{  public void put(double[] val){  assert (val.length == elements.length);  wsum+=1.0;  for (int i=0; i < elements.length; i++) {    final double delta=val[i] - elements[i];    elements[i]+=delta / wsum;  }}  }
class C{  private static void incremExpt(RatTermVec vec,int degree){  for (int i=0, size=vec.size(); i < size; i++) {    vec.set(new RatTerm(vec.get(i).coeff,vec.get(i).expt + degree),i);  }}  }
class C{  protected ChangeDescriptor(){}  }
class C{  public static int addRow(Connection conn,int id,String name) throws SQLException {  conn.createStatement().execute("INSERT INTO TEST VALUES(" + id + ", '"+ name+ "')");  ResultSet rs=conn.createStatement().executeQuery("SELECT COUNT(*) FROM TEST");  rs.next();  int result=rs.getInt(1);  rs.close();  return result;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.AcademicSessions);  WebTable webTable=new WebTable(11,"","sessionList.do?order=%%",new String[]{"Default","Academic<br>Session","Academic<br>Initiative","Session<br>Begins","Classes<br>End","Session<br>Ends","Exams<br>Begins","Date<br>Pattern","Status","Class<br>Duration","Events<br>Begins","Events<br>Ends","<br>Enrollment","Deadline<br>Change","<br>Drop","Sectioning<br>Status"},new String[]{"center","left","left","left","left","left","left","left","left","right","left","left","left","left","left","left"},new boolean[]{true,true,true,false,false,false,true,false,true,true,true,true,true,true,true});  Formats.Format<Date> df=Formats.getDateFormat(Formats.Pattern.SESSION_DATE);  TreeSet<Session> sessions=new TreeSet<Session>(SessionDAO.getInstance().findAll());  Session defaultSession=UniTimeUserContext.defaultSession(sessions,sessionContext.getUser().getCurrentAuthority());  for (  Session s : SessionDAO.getInstance().findAll()) {    Calendar ce=Calendar.getInstance(Locale.US);    ce.setTime(s.getSessionBeginDateTime());    ce.add(Calendar.WEEK_OF_YEAR,s.getLastWeekToEnroll());    ce.add(Calendar.DAY_OF_YEAR,-1);    Calendar cc=Calendar.getInstance(Locale.US);    cc.setTime(s.getSessionBeginDateTime());    cc.add(Calendar.WEEK_OF_YEAR,s.getLastWeekToChange());    cc.add(Calendar.DAY_OF_YEAR,-1);    Calendar cd=Calendar.getInstance(Locale.US);    cd.setTime(s.getSessionBeginDateTime());    cd.add(Calendar.WEEK_OF_YEAR,s.getLastWeekToDrop());    cd.add(Calendar.DAY_OF_YEAR,-1);    webTable.addLine(sessionContext.hasPermission(s,Right.AcademicSessionEdit) ? "onClick=\"document.location='sessionEdit.do?doit=editSession&sessionId=" + s.getSessionId() + "';\"" : null,new String[]{s.equals(defaultSession) ? "<img src='images/accept.png'> " : "&nbsp; ",s.getAcademicTerm() + " " + s.getSessionStartYear(),s.academicInitiativeDisplayString(),df.format(s.getSessionBeginDateTime()).replace(" ","&nbsp;"),df.format(s.getClassesEndDateTime()).replace(" ","&nbsp;"),df.format(s.getSessionEndDateTime()).replace(" ","&nbsp;"),(s.getExamBeginDate() == null ? "N/A" : df.format(s.getExamBeginDate()).replace(" ","&nbsp;")),s.getDefaultDatePattern() != null ? s.getDefaultDatePattern().getName() : "-",s.statusDisplayString(),s.getDefaultClassDurationType() == null ? "&nbsp;" : s.getDefaultClassDurationType().getAbbreviation(),(s.getEventBeginDate() == null ? "N/A" : df.format(s.getEventBeginDate()).replace(" ","&nbsp;")),(s.getEventEndDate() == null ? "N/A" : df.format(s.getEventEndDate()).replace(" ","&nbsp;")),df.format(ce.getTime()).replace(" ","&nbsp;"),df.format(cc.getTime()).replace(" ","&nbsp;"),df.format(cd.getTime()).replace(" ","&nbsp;"),(s.getDefaultSectioningStatus() == null ? "&nbsp;" : s.getDefaultSectioningStatus().getReference())},new Comparable[]{s.equals(defaultSession) ? "<img src='images/accept.png'>" : "",s.getLabel(),s.academicInitiativeDisplayString(),s.getSessionBeginDateTime(),s.getClassesEndDateTime(),s.getSessionEndDateTime(),s.getExamBeginDate(),s.getDefaultDatePattern() != null ? s.getDefaultDatePattern().getName() : "-",s.statusDisplayString(),s.getDefaultClassDurationType() == null ? " " : s.getDefaultClassDurationType().getAbbreviation(),s.getEventBeginDate(),s.getEventEndDate(),ce.getTime(),cc.getTime(),cd.getTime(),(s.getDefaultSectioningStatus() == null ? " " : s.getDefaultSectioningStatus().getReference())});  }  webTable.enableHR("#9CB0CE");  int orderCol=4;  if (request.getParameter("order") != null) {    try {      orderCol=Integer.parseInt(request.getParameter("order"));    } catch (    Exception e) {      orderCol=4;    }  }  request.setAttribute("table",webTable.printTable(orderCol));  return mapping.findForward("showSessionList");}  }
class C{  private boolean initTemplate(int AD_Client_ID){  if (AD_Client_ID == 0)   throw new IllegalArgumentException("Client_ID=0");  boolean success=true;  String sql="SELECT * FROM C_BPartner " + "WHERE C_BPartner_ID IN (SELECT C_BPartnerCashTrx_ID FROM AD_ClientInfo WHERE AD_Client_ID=?)";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Client_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     success=load(rs); else {      load(0,null);      success=false;      log.severe("None found");    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    try {      if (pstmt != null)       pstmt.close();    } catch (    Exception e) {    }    pstmt=null;  }  setStandardDefaults();  set_ValueNoCheck("C_BPartner_ID",I_ZERO);  setValue("");  setName("");  setName2(null);  return success;}  }
class C{  public Map<Long,Object> retrieveAllWindows() throws IOException {  Map<Long,Object> artifactPerWindow=new HashMap<>();  FileSystemWAL.FileSystemWALReader reader=getWal().getReader();  reader.seek(getWal().getWalStartPointer());  Slice windowSlice=readNext(reader);  while (reader.getCurrentPointer().compareTo(getWal().getWalEndPointerAfterRecovery()) < 0 && windowSlice != null) {    long window=Longs.fromByteArray(windowSlice.toByteArray());    Object data=fromSlice(readNext(reader));    artifactPerWindow.put(window,data);    windowSlice=readNext(reader);  }  reader.seek(getWal().getWalStartPointer());  return artifactPerWindow;}  }
class C{  public void onReqMarketData(Contract contract,String genericTicklist,boolean snapshot) throws BrokerModelException {}  }
class C{  public int size(){  return crsInternal.size();}  }
class C{  public static boolean equals(boolean[] array1,boolean[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public boolean isCanceled(){  return isCanceled;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_WHEN___CONDITION_TYPE_1:    setConditionType_1(CONDITION_TYPE_1_EDEFAULT);  return;case UmplePackage.TRACE_WHEN___CONSTRAINT_TOKEN_1:getConstraintToken_1().clear();return;}super.eUnset(featureID);}  }
class C{  public Period toPeriod(){  return new Period(this);}  }
class C{  public boolean isFriday(){  return friday;}  }
class C{  public SnackbarBuilder actionTextColorRes(@ColorRes int actionTextColorResId){  this.actionTextColor=getColor(actionTextColorResId);  return this;}  }
class C{  public EventReader provide(Reader source) throws Exception {  return provide(new InputSource(source));}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  @SuppressWarnings("unchecked") public List<Boundary> populateStreets(final Long wardId){  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);  List<Boundary> streetList=new LinkedList<Boundary>();  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType("Street",hType);  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);  streetList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));  return streetList;}  }
class C{  public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;  return this;}  }
class C{  public ParallelTaskBuilder prepareTcp(String command){  reinitIfClosed();  ParallelTaskBuilder cb=new ParallelTaskBuilder();  cb.setProtocol(RequestProtocol.TCP);  cb.getTcpMeta().setCommand(command);  return cb;}  }
class C{  private List hotkeyToList(Hotkey hotkey){  List l=new ArrayList();  l.add(hotkey.actionId);  l.add(hotkey.keyStroke.toString());  l.add(hotkey.type.id);  l.add(hotkey.custom);  l.add(hotkey.delay);  return l;}  }
class C{  public void invalidateCache(int start,int end){  m_valid.clear(start,end + 1);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static MessageDialog newInstance(int icon,String title,String message,Fragment fragment){  MessageDialog confirmDialog=new MessageDialog();  Bundle args=new Bundle();  args.putInt(ARG_ICON,icon);  args.putString(ARG_TITLE,title);  args.putString(ARG_MESSAGE,message);  confirmDialog.setArguments(args);  if (fragment != null)   confirmDialog.setTargetFragment(fragment,0);  return confirmDialog;}  }
class C{  public void draw(GasTank leftTank,GasTank rightTank){  if (meets(new ChemicalPairInput(leftTank.getGas(),rightTank.getGas()))) {    leftTank.draw(leftGas.amount,true);    rightTank.draw(rightGas.amount,true);  } else   if (meets(new ChemicalPairInput(rightTank.getGas(),leftTank.getGas()))) {    leftTank.draw(rightGas.amount,true);    rightTank.draw(leftGas.amount,true);  }}  }
class C{  static boolean isRoot(long rootCandidate,long screenNumber){  long root;  XToolkit.awtLock();  try {    root=XlibWrapper.RootWindow(XToolkit.getDisplay(),screenNumber);  }  finally {    XToolkit.awtUnlock();  }  return root == rootCandidate;}  }
class C{  private void updateAssociatedStorageSystemsForPS(){  DbClient dbClient=getDbClient();  List<URI> protectionSystemURIs=dbClient.queryByType(ProtectionSystem.class,false);  Iterator<ProtectionSystem> protectionSystems=dbClient.queryIterativeObjects(ProtectionSystem.class,protectionSystemURIs);  while (protectionSystems.hasNext()) {    ProtectionSystem protectionSystem=protectionSystems.next();    log.info("ProtectionSystem (id={}) must be upgraded",protectionSystem.getId().toString());    clearAssociatedStorageSystems(protectionSystem,dbClient);    log.info("ProtectionSystem (id={}) upgraded.",protectionSystem.getId().toString());  }}  }
class C{  protected void doWaitForDownloadsOrTimeout(Query query,long poll,long timeoutMillis) throws TimeoutException {  int currentWaitTime=0;  while (true) {    query.setFilterByStatus(DownloadManager.STATUS_PENDING | DownloadManager.STATUS_PAUSED | DownloadManager.STATUS_RUNNING);    Cursor cursor=mDownloadManager.query(query);    try {      if (cursor.getCount() == 0) {        Log.i(LOG_TAG,"All downloads should be done...");        break;      }      currentWaitTime=timeoutWait(currentWaitTime,poll,timeoutMillis,"Timed out waiting for all downloads to finish");    }  finally {      cursor.close();    }  }}  }
class C{  public FastArrayList(int initialCapacity){  super();  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  this.elementData=new Object[initialCapacity];}  }
class C{  public void flip(int bitIndex){  if (bitIndex < 0) {    throw new IndexOutOfBoundsException("bitIndex < 0: " + bitIndex);  }  int unitIndex=unitIndex(bitIndex);  int unitsRequired=unitIndex + 1;  if (unitsInUse < unitsRequired) {    ensureCapacity(unitsRequired);    bits[unitIndex]^=bit(bitIndex);    unitsInUse=unitsRequired;  } else {    bits[unitIndex]^=bit(bitIndex);    if (bits[unitsInUse - 1] == 0)     recalculateUnitsInUse();  }}  }
class C{  public void removeParticipantListener(PacketListener listener){  connection.removePacketListener(listener);  connectionListeners.remove(listener);}  }
class C{  private void loadConfigurationFromJvmParameters(){  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);  if (null != repositoryProperty) {    String[] repositoryIpHost=repositoryProperty.split(":");    if (repositoryIpHost.length == 2) {      String repositoryIp=repositoryIpHost[0];      String repositoryPort=repositoryIpHost[1];      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {        log.info("Repository information found in the JVM parameters: IP=" + repositoryIp + " Port="+ repositoryPort);        try {          int port=Integer.parseInt(repositoryPort);          setRepository(repositoryIp,port);        } catch (        Exception e) {          log.warn("Repository could not be defined from the data in the JVM parameters",e);        }      }    }  }  String agentName=System.getProperty(AGENT_NAME_PROPERTY);  if (StringUtils.isNotBlank(agentName)) {    try {      log.info("Agent name found in the JVM parameters: AgentName=" + agentName);      setAgentName(agentName);    } catch (    Exception e) {      log.warn("Agent name could not be defined from the data in the JVM parameters",e);    }  } else {    try {      setAgentName(DEFAULT_AGENT_NAME);    } catch (    StorageException e) {      log.warn("Agent name could not be defined from default agent name",e);    }  }}  }
class C{  public boolean isUrlSafe(){  return this.encodeTable == URL_SAFE_ENCODE_TABLE;}  }
class C{  public static EventBean[] resizeArray(EventBean[] oldArray,int newSize){  if (oldArray == null) {    return null;  }  if (oldArray.length == newSize) {    return oldArray;  }  EventBean[] newArray=new EventBean[newSize];  int preserveLength=Math.min(oldArray.length,newSize);  if (preserveLength > 0) {    System.arraycopy(oldArray,0,newArray,0,preserveLength);  }  return newArray;}  }
class C{  public StepBreakpointsRemovedReply(final int packetId,final int errorCode,final List<Pair<RelocatedAddress,Integer>> addresses){  super(packetId,errorCode,addresses);}  }
class C{  public VecWithNorm(Vec base){  this(base,base.pNorm(2));}  }
class C{  public static double quantile(double x,double mu,double sigma){  return mu + sigma * standardNormalQuantile(x);}  }
class C{  protected int cardinality(int maxCardinality){  int cardinality=0;  int index=index(0);  int s=this.stride;  double[] elems=this.elements;  int i=size;  while (--i >= 0 && cardinality < maxCardinality) {    if (elems[index] != 0)     cardinality++;    index+=s;  }  return cardinality;}  }
class C{  public static boolean isDebug(){  return BuildConfig.DEBUG;}  }
class C{  public boolean flush(){  return flush;}  }
class C{  @Override public void close() throws IOException {  if ((debug != null) && Debug.isOn("ssl")) {    System.out.println(Thread.currentThread().getName() + ", called close()");  }  closeInternal(true);  setConnectionState(cs_APP_CLOSED);}  }
class C{  @Override public void run(){  if (schedule == null) {    throw new RuntimeException("No schedule defined!");  } else   if (network == null) {    throw new RuntimeException("No network defined!");  }  setLogLevels();  config.loadParameterSets();  log.info("======================================");  log.info("Mapping transit schedule to network...");  Set<String> scheduleTransportModes=new HashSet<>();  int nStopFacilities=schedule.getFacilities().size();  int nTransitRoutes=0;  for (  TransitLine transitLine : this.schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      scheduleTransportModes.add(transitRoute.getTransportMode());      nTransitRoutes++;    }  }  log.info("==============================================");  log.info("Creating mode separated network and routers...");  Map<String,Set<String>> modeRoutingAssignment=config.getModeRoutingAssignment();  FastAStarRouter.setTravelCostType(config.getTravelCostType());  for (  String scheduleMode : scheduleTransportModes) {    log.info("Initiating network and router for schedule mode \"" + scheduleMode + "\", network modes "+ modeRoutingAssignment.get(scheduleMode));    modeSeparatedRouters.put(scheduleMode,FastAStarRouter.createModeSeparatedRouter(network,modeRoutingAssignment.get(scheduleMode)));  }  log.info("===========================");  log.info("Creating link candidates...");  LinkCandidateCreator linkCandidates=new LinkCandidateCreatorStandard(this.schedule,this.network,this.config,this.modeSeparatedRouters);  linkCandidates.createLinkCandidates();  log.info("==================================");  log.info("Calculating pseudoTransitRoutes... (" + nTransitRoutes + " transit routes in "+ schedule.getTransitLines().size()+ " transit lines)");  int numThreads=config.getNumOfThreads() > 0 ? config.getNumOfThreads() : 1;  PseudoRouting[] pseudoRoutingRunnables=new PseudoRouting[numThreads];  for (int i=0; i < numThreads; i++) {    pseudoRoutingRunnables[i]=new PseudoRoutingImpl(config,modeSeparatedRouters,linkCandidates);  }  int thr=0;  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    pseudoRoutingRunnables[thr++ % numThreads].addTransitLineToQueue(transitLine);  }  Thread[] threads=new Thread[numThreads];  for (int i=0; i < numThreads; i++) {    threads[i]=new Thread(pseudoRoutingRunnables[i]);    threads[i].start();  }  for (  Thread thread : threads) {    try {      thread.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  log.info("=====================================");  log.info("Adding artificial links to network...");  for (  PseudoRouting prt : pseudoRoutingRunnables) {    prt.addArtificialLinks(network);    pseudoSchedule.mergePseudoSchedule(prt.getPseudoSchedule());  }  log.info("========================================================================");  log.info("Replacing parent StopFacilities in schedule with child StopFacilities...");  pseudoSchedule.createAndReplaceFacilities(schedule);  log.info("===========================================================================================");  log.info("Initiating final routers to map transit routes with referenced facilities to the network...");  Map<String,Router> finalRouters=new HashMap<>();  for (  String scheduleMode : scheduleTransportModes) {    Set<String> routingTransportModes=new HashSet<>(PublicTransitMappingStrings.ARTIFICIAL_LINK_MODE_AS_SET);    if (modeRoutingAssignment.get(scheduleMode) != null)     routingTransportModes.addAll(modeRoutingAssignment.get(scheduleMode));    log.info("Initiating network and router for schedule mode \"" + scheduleMode + "\", network modes "+ routingTransportModes);    finalRouters.put(scheduleMode,FastAStarRouter.createModeSeparatedRouter(network,routingTransportModes));  }  log.info("=============================================");  log.info("Creating link sequences for transit routes...");  ScheduleTools.routeSchedule(this.schedule,this.network,finalRouters);  log.info("================================");  log.info("Pulling child stop facilities...");  int nPulled=1;  while (nPulled != 0) {    nPulled=PTMapperUtils.pullChildStopFacilitiesTogether(this.schedule,this.network);  }  log.info("=============================");  log.info("Clean schedule and network...");  cleanScheduleAndNetwork();  log.info("======================");  log.info("Validating schedule...");  printValidateSchedule();  log.info("=======================================");  log.info("Writing schedule and network to file...");  writeOutputFiles();  log.info("==================================================");  log.info("= Mapping transit schedule to network completed! =");  log.info("==================================================");  printStatistics(nStopFacilities);}  }
class C{  void invalidate(){  if (getGeneratedImageClip() != null) {    new File(getGeneratedImageClip()).delete();    setGeneratedImageClip(null);    setRegenerateClip(true);  }  if (mScaledFilename != null) {    if (mFileName != mScaledFilename) {      new File(mScaledFilename).delete();    }    mScaledFilename=null;  }  if (mDecodedFilename != null) {    new File(mDecodedFilename).delete();    mDecodedFilename=null;  }}  }
class C{  public void fatal(Object message){  log(Level.SEVERE,String.valueOf(message),null);}  }
class C{  public boolean isSecure(){  Object oo=get_Value(COLUMNNAME_IsSecure);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.116 -0500",hash_original_method="421EA5B79C34222DD4C5C9C56863B2BC",hash_generated_method="C604BD246E5BAABEAB7B3CB2661D06A4") public static float[] spatialSampling(Gesture gesture,int bitmapSize,boolean keepAspectRatio){  final float targetPatchSize=bitmapSize - 1;  float[] sample=new float[bitmapSize * bitmapSize];  Arrays.fill(sample,0);  RectF rect=gesture.getBoundingBox();  final float gestureWidth=rect.width();  final float gestureHeight=rect.height();  float sx=targetPatchSize / gestureWidth;  float sy=targetPatchSize / gestureHeight;  if (keepAspectRatio) {    float scale=sx < sy ? sx : sy;    sx=scale;    sy=scale;  } else {    float aspectRatio=gestureWidth / gestureHeight;    if (aspectRatio > 1) {      aspectRatio=1 / aspectRatio;    }    if (aspectRatio < SCALING_THRESHOLD) {      float scale=sx < sy ? sx : sy;      sx=scale;      sy=scale;    } else {      if (sx > sy) {        float scale=sy * NONUNIFORM_SCALE;        if (scale < sx) {          sx=scale;        }      } else {        float scale=sx * NONUNIFORM_SCALE;        if (scale < sy) {          sy=scale;        }      }    }  }  float preDx=-rect.centerX();  float preDy=-rect.centerY();  float postDx=targetPatchSize / 2;  float postDy=targetPatchSize / 2;  final ArrayList<GestureStroke> strokes=gesture.getStrokes();  final int count=strokes.size();  int size;  float xpos;  float ypos;  for (int index=0; index < count; index++) {    final GestureStroke stroke=strokes.get(index);    float[] strokepoints=stroke.points;    size=strokepoints.length;    final float[] pts=new float[size];    for (int i=0; i < size; i+=2) {      pts[i]=(strokepoints[i] + preDx) * sx + postDx;      pts[i + 1]=(strokepoints[i + 1] + preDy) * sy + postDy;    }    float segmentEndX=-1;    float segmentEndY=-1;    for (int i=0; i < size; i+=2) {      float segmentStartX=pts[i] < 0 ? 0 : pts[i];      float segmentStartY=pts[i + 1] < 0 ? 0 : pts[i + 1];      if (segmentStartX > targetPatchSize) {        segmentStartX=targetPatchSize;      }      if (segmentStartY > targetPatchSize) {        segmentStartY=targetPatchSize;      }      plot(segmentStartX,segmentStartY,sample,bitmapSize);      if (segmentEndX != -1) {        if (segmentEndX > segmentStartX) {          xpos=(float)Math.ceil(segmentStartX);          float slope=(segmentEndY - segmentStartY) / (segmentEndX - segmentStartX);          while (xpos < segmentEndX) {            ypos=slope * (xpos - segmentStartX) + segmentStartY;            plot(xpos,ypos,sample,bitmapSize);            xpos++;          }        } else         if (segmentEndX < segmentStartX) {          xpos=(float)Math.ceil(segmentEndX);          float slope=(segmentEndY - segmentStartY) / (segmentEndX - segmentStartX);          while (xpos < segmentStartX) {            ypos=slope * (xpos - segmentStartX) + segmentStartY;            plot(xpos,ypos,sample,bitmapSize);            xpos++;          }        }        if (segmentEndY > segmentStartY) {          ypos=(float)Math.ceil(segmentStartY);          float invertSlope=(segmentEndX - segmentStartX) / (segmentEndY - segmentStartY);          while (ypos < segmentEndY) {            xpos=invertSlope * (ypos - segmentStartY) + segmentStartX;            plot(xpos,ypos,sample,bitmapSize);            ypos++;          }        } else         if (segmentEndY < segmentStartY) {          ypos=(float)Math.ceil(segmentEndY);          float invertSlope=(segmentEndX - segmentStartX) / (segmentEndY - segmentStartY);          while (ypos < segmentStartY) {            xpos=invertSlope * (ypos - segmentStartY) + segmentStartX;            plot(xpos,ypos,sample,bitmapSize);            ypos++;          }        }      }      segmentEndX=segmentStartX;      segmentEndY=segmentStartY;    }  }  return sample;}  }
class C{  private void collectVehiclesInfo(){  Set<Id> set=new HashSet<Id>(this.transitRoute.getDepartures().size() * 2);  for (  Departure departure : this.transitRoute.getDepartures().values()) {    if (departure.getVehicleId() != null) {      set.add(departure.getVehicleId());    }  }  this.routeVehicles=set;}  }
class C{  public boolean isWorkbench(){  return X_AD_Menu.ACTION_Workbench.equals(m_imageIndicator);}  }
class C{  public static synchronized Type tMethod(Type ret){  return tMethod(ret,noArgs);}  }
class C{  public Maze(String configFilename){  In in=new In(configFilename);  int rseed=0;  N=10;  DRAW_DELAY_MS=50;  MazeType mt=MazeType.SINGLE_GAP;  double pOpen=0.48;  String configPatternString="(\\w+)\\s*=\\s*([a-zA-Z0-9_.]+)";  Pattern configPattern=Pattern.compile(configPatternString);  while (!in.isEmpty()) {    String thisLine=in.readLine();    if (thisLine.length() == 0 || thisLine.charAt(0) == '%') {      continue;    }    Matcher m=configPattern.matcher(thisLine);    if (m.find()) {      String variable=m.group(1);      String value=m.group(2);switch (variable) {case "N":        N=Integer.parseInt(value);      break;case "rseed":    rseed=Integer.parseInt(value);  break;case "pOpen":pOpen=Double.parseDouble(value);break;case "DRAW_DELAY_MS":DRAW_DELAY_MS=Integer.parseInt(value);break;case "MazeType":if (value.equals("SINGLE_GAP")) {mt=MazeType.SINGLE_GAP;}if (value.equals("POPEN_SOLVABLE")) {mt=MazeType.POPEN_SOLVABLE;}if (value.equals("BLANK")) {mt=MazeType.BLANK;}break;default :break;}}}init(rseed,pOpen,mt);}  }
class C{  public void createView(Entity entity,boolean edit,boolean useRules,String[] tags,boolean taggedPropertiesOnly,List<String> validationList,boolean useValidationGuiHints) throws DBException {  this.editable=edit;  this.useRules=useRules;  this.filterTags=(tags != null) ? tags.clone() : null;  this.taggedOnly=taggedPropertiesOnly;  this.validationList=validationList;  this.useValidationGuiHints=useValidationGuiHints;  huiComposite.setVisible(false);  this.entity=entity;  entity.addChangeListener(this);  clearComposite();  HUITypeFactory typeFactory=HUITypeFactory.getInstance();  EntityType entityType=typeFactory.getEntityType(entity.getEntityType());  List allElements=entityType.getElements();  for (Iterator iter=allElements.iterator(); iter.hasNext(); ) {    Object obj=iter.next();    if (obj instanceof PropertyType) {      PropertyType type=(PropertyType)obj;      createField(type,huiComposite,validationList.contains(type.getId()),useValidationGuiHints);    } else     if (obj instanceof PropertyGroup) {      PropertyGroup group=(PropertyGroup)obj;      createGroup(group,huiComposite);    }  }  addBehavior(entityType);  huiComposite.layout();  huiComposite.setVisible(true);  resizeContainer();  setInitialFocus();}  }
class C{  protected Key engineTranslateKey(Key key) throws InvalidKeyException {  if (key == null) {    throw new InvalidKeyException("Key must not be null");  }  String keyAlg=key.getAlgorithm();  if (keyAlg.equals("RSA") == false) {    throw new InvalidKeyException("Not an RSA key: " + keyAlg);  }  if (key instanceof PublicKey) {    return translatePublicKey((PublicKey)key);  } else   if (key instanceof PrivateKey) {    return translatePrivateKey((PrivateKey)key);  } else {    throw new InvalidKeyException("Neither a public nor a private key");  }}  }
class C{  public static void main(String[] args) throws IOException {  ListedData<PackageInfo> p=new PackageLister().list();  System.out.println("raw: " + p.getJmxData());  System.out.println("parsed: " + p.getParsedData());}  }
class C{  public void touch(final Object key,final Object value){}  }
class C{  public static int quadrant(Coordinate p0,Coordinate p1){  if (p1.x == p0.x && p1.y == p0.y)   throw new IllegalArgumentException("Cannot compute the quadrant for two identical points " + p0);  if (p1.x >= p0.x) {    if (p1.y >= p0.y)     return NE; else     return SE;  } else {    if (p1.y >= p0.y)     return NW; else     return SW;  }}  }
class C{  public ColorDrawable(int color){  this(null);  setColor(color);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (get_Value(COLUMNNAME_IsAutoErrorReport) == null)   setIsAutoErrorReport(true);  boolean userChange=Ini.isClient() && (is_ValueChanged(COLUMNNAME_Name) || is_ValueChanged(COLUMNNAME_UserName) || is_ValueChanged(COLUMNNAME_Password)|| is_ValueChanged(COLUMNNAME_LDAPHost)|| is_ValueChanged(COLUMNNAME_LDAPDomain)|| is_ValueChanged(COLUMNNAME_CustomPrefix));  if (userChange) {    String name=getName();    if (name.equals("?") || name.length() < 2) {      throw new AdempiereException("Define a unique System name (e.g. Company name) not " + name);    }    if (getUserName().equals("?") || getUserName().length() < 2) {      throw new AdempiereException("Use the same EMail address as in the Adempiere Web Store");    }    if (getPassword().equals("?") || getPassword().length() < 2) {      throw new AdempiereException("Use the same Password as in the Adempiere Web Store");    }  }  setInfo();  return true;}  }
class C{  public static String dump(final DeviceDescriptor descriptor){  return dump(descriptor,null,null,null);}  }
class C{  public static POS toPos(String pos){  final String lc=pos.toLowerCase();  if (lc.startsWith("n")) {    return POS.NOUN;  } else   if (lc.startsWith("v")) {    return POS.VERB;  } else   if (lc.startsWith("r") || lc.startsWith("adv")) {    return POS.ADVERB;  } else   if (lc.startsWith("j") || lc.startsWith("adj")) {    return POS.ADJECTIVE;  } else {    return null;  }}  }
class C{  public static void startProgressBar(){  MasterServices.getInstance().getMasterNode().addListener(new ConsoleProgressBar());}  }
class C{  public final boolean inMask(int tm){  return ((1 << typeCode) & tm) != 0;}  }
class C{  public Map<ObligationSet,State> createEmptyMap(){  return new HashMap<ObligationSet,State>();}  }
class C{  public ClosedFileSystemException(){}  }
class C{  public DistributedLogManager createDistributedLogManagerWithSharedClients(String nameOfLogStream) throws InvalidStreamNameException, IOException {  return createDistributedLogManager(nameOfLogStream,ClientSharingOption.SharedClients);}  }
class C{  private Settings(){}  }
class C{  private void deleteTrustedCertChains(){  String baseDn=getRootLdusDn();  ILdapMessage certChainsMsg=null;  ILdapMessage certContainerMsg=null;  try {    certChainsMsg=getTenantCertChains(baseDn);    delete(certChainsMsg);    certContainerMsg=getTenantCertChainsContainer(baseDn);    delete(certContainerMsg);  }  finally {    closeMessage(certChainsMsg);    closeMessage(certContainerMsg);  }}  }
class C{  public CombinedRangeCategoryPlot(ValueAxis rangeAxis){  super(null,null,rangeAxis,null);  this.subplots=new java.util.ArrayList();  this.gap=5.0;}  }
class C{  private void writeDataToDestination(State state,byte[] data,int bytesRead) throws StopRequest {  for (; ; ) {    try {      if (state.mStream == null) {        state.mStream=new FileOutputStream(state.mFilename,true);      }      state.mStream.write(data,0,bytesRead);      closeDestination(state);      return;    } catch (    IOException ex) {      if (!Helpers.isExternalMediaMounted()) {        throw new StopRequest(DownloaderService.STATUS_DEVICE_NOT_FOUND_ERROR,"external media not mounted while writing destination file");      }      long availableBytes=Helpers.getAvailableBytes(Helpers.getFilesystemRoot(state.mFilename));      if (availableBytes < bytesRead) {        throw new StopRequest(DownloaderService.STATUS_INSUFFICIENT_SPACE_ERROR,"insufficient space while writing destination file",ex);      }      throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"while writing destination file: " + ex.toString(),ex);    }  }}  }
class C{  @Override public boolean onDrag(View v,DragEvent event){  int action=event.getAction();switch (action) {case DragEvent.ACTION_DROP:{      CharSequence tag=event.getClipDescription().getLabel();      if (tag.equals("name")) {        if ((mModel.getStatus() == StateUtils.STATE_OPERATIONAL) || (mModel.getStatus() == StateUtils.STATE_ERROR)) {          ClipData.Item item=event.getClipData().getItemAt(0);          File file=new File(item.getText().toString());          OctoprintFiles.uploadFile(v.getContext(),file,mModel);          mAdapter.notifyDataSetChanged();        } else {          MainActivity.showDialog(v.getContext().getString(R.string.devices_dialog_loading) + "\n" + v.getContext().getString(R.string.viewer_printer_unavailable));        }      }      v.setBackgroundColor(Resources.getSystem().getColor(android.R.color.transparent));    }  break;case DragEvent.ACTION_DRAG_ENTERED:{  CharSequence tag=event.getClipDescription().getLabel();  if (tag.equals("name")) {    if ((mModel.getStatus() == StateUtils.STATE_OPERATIONAL) || (mModel.getStatus() == StateUtils.STATE_ERROR)) {      v.setBackgroundColor(mContext.getResources().getColor(R.color.drag_and_drop_hover_background));    }  }}break;case DragEvent.ACTION_DRAG_EXITED:{v.setBackgroundColor(Resources.getSystem().getColor(android.R.color.transparent));}break;default :break;}return true;}  }
class C{  protected void sequence_TSetter(ISerializationContext context,TSetter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static EqualityExpression gt(String propertyName,Object value){  return new EqualityExpression(Operator.GREATER_THAN,propertyName,value);}  }
class C{  public static <T>T eachLine(Path self,String charset,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(self,charset,1,closure);}  }
class C{  public NameCoderWrapper(final NameCoder inner){  wrapped=inner;}  }
class C{  public static final boolean even(long x){  return ((x & 0x1) == 0);}  }
class C{  public long arg_end(){  return Long.parseLong(fields[48]);}  }
class C{  private int isApplicable(ReflectionCallableMemberDescriptor memberDesc,boolean varArg){  final Class[] paramTypes=memberDesc.getParamTypes();  final int cl=types.length;  final int fl=paramTypes.length - (varArg ? 1 : 0);  if (varArg) {    if (cl < fl) {      return CONVERSION_DIFFICULTY_IMPOSSIBLE;    }  } else {    if (cl != fl) {      return CONVERSION_DIFFICULTY_IMPOSSIBLE;    }  }  int maxDifficulty=0;  for (int i=0; i < fl; ++i) {    int difficulty=isMethodInvocationConvertible(paramTypes[i],types[i]);    if (difficulty == CONVERSION_DIFFICULTY_IMPOSSIBLE) {      return CONVERSION_DIFFICULTY_IMPOSSIBLE;    }    if (maxDifficulty < difficulty) {      maxDifficulty=difficulty;    }  }  if (varArg) {    Class varArgParamType=paramTypes[fl].getComponentType();    for (int i=fl; i < cl; ++i) {      int difficulty=isMethodInvocationConvertible(varArgParamType,types[i]);      if (difficulty == CONVERSION_DIFFICULTY_IMPOSSIBLE) {        return CONVERSION_DIFFICULTY_IMPOSSIBLE;      }      if (maxDifficulty < difficulty) {        maxDifficulty=difficulty;      }    }  }  return maxDifficulty;}  }
class C{  public ConnectionClosedException(final String message){  super(message);}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  public void displayTour(Tour tour,Paint paint,Stroke stroke){synchronized (tours) {    tours.put(tour,new TourDisplaySetting(paint,stroke));  }  if (autoRepaint) {    repaint();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public FileSelectView(Context context,int dialogid,CallbackBundle callback,String suffix,Map<String,Integer> images){  super(context);  this.imagemap=images;  this.suffix=suffix == null ? "" : suffix.toLowerCase(Locale.getDefault());  this.callback=callback;  this.dialogid=dialogid;  this.setOnItemClickListener(this);  refreshFileList();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"GREEN_NEWS\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"NEWSLIST\" TEXT,"+ "\"TYPE\" TEXT);");}  }
class C{  public void testDrainToSelf(){  LinkedBlockingQueue q=populatedQueue(SIZE);  try {    q.drainTo(q);    shouldThrow();  } catch (  IllegalArgumentException success) {  }}  }
class C{  public ChunkedHashStore(final TransformationStrategy<? super T> transform,final File tempDir) throws IOException {  this(transform,tempDir,null);}  }
class C{  public long nextLong(){  long ret=gen.nextLong();  ret=_min + FNVhash64(ret) % _itemcount;  setLastInt((int)ret);  return ret;}  }
class C{  public static byte[] characterBytes(String convert){  if (convert.length() > 2) {    try {      char literal=(char)Integer.parseInt(convert.substring(2),16);      return StringUtils.getBytesUtf8(String.valueOf(literal));    } catch (    NumberFormatException ignore) {    }  }  return StringEscapeUtils.unescapeJava(convert).getBytes();}  }
class C{  public boolean isReconnectEnabled(){  return preferences.getBoolean(resources.getString(R.string.key_reconnect),Boolean.parseBoolean(resources.getString(R.string.default_reconnect)));}  }
class C{  public static Graph asReadOnlyGraph(Graph g){  return helper.asReadOnlyGraph(g);}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  private static PorterDuffColorFilter updateTintFilter(ColorStateList tint,PorterDuff.Mode tintMode,int[] drawableState){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(drawableState,Color.TRANSPARENT);  PorterDuffColorFilter filter=COLOR_FILTER_CACHE.get(color,tintMode);  if (filter == null) {    filter=new PorterDuffColorFilter(color,tintMode);    COLOR_FILTER_CACHE.put(color,tintMode,filter);  }  return filter;}  }
class C{  public void recordingLongTrack(boolean isShowTracksList,int tabNameId){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  EndToEndTestUtils.startRecording();  if (isShowTracksList) {    EndToEndTestUtils.SOLO.goBack();  } else {    EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(tabNameId));  }  BigTestUtils.moniterTest(context,INTERVALE_TO_CHECK,TEST_DURATION_IN_MILLISECONDS);  BigTestUtils.unlockAndWakeupDevice();  EndToEndTestUtils.stopRecording(true);}  }
class C{  public Drawable loadIcon(PackageManager pm){  Drawable dr;  if (resolvePackageName != null && icon != 0) {    dr=pm.getDrawable(resolvePackageName,icon,null);    if (dr != null) {      return dr;    }  }  ComponentInfo ci=activityInfo != null ? activityInfo : serviceInfo;  ApplicationInfo ai=ci.applicationInfo;  if (icon != 0) {    dr=pm.getDrawable(ci.packageName,icon,ai);    if (dr != null) {      return dr;    }  }  return ci.loadIcon(pm);}  }
class C{  public void configViewMode(int state){switch (state) {case (ViewerSurfaceView.NORMAL):    setOverhang(false);  setXray(false);setTransparent(false);break;case (ViewerSurfaceView.XRAY):setOverhang(false);setXray(true);setTransparent(false);break;case (ViewerSurfaceView.TRANSPARENT):setOverhang(false);setXray(false);setTransparent(true);break;case (ViewerSurfaceView.OVERHANG):setOverhang(true);setXray(false);setTransparent(false);break;}requestRender();}  }
class C{  @Override public void doCancelMirrorLink(StorageSystem system,FileShare target,TaskCompleter completer,String devSpecificPolicyName){  throw DeviceControllerException.exceptions.operationNotSupported();}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public void newProcessingInstruction(String target,Reader reader){}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  String idEntidad=(String)session.getAttribute(Misc.ENTIDAD_ID);  DetalleExpedienteForm detalleExpedienteForm=(DetalleExpedienteForm)form;  try {    String id=request.getParameter("id");    String reg=request.getParameter("registro");    Entidad entidad=Misc.obtenerEntidad(idEntidad);    ServicioConsultaExpedientes oServicio=LocalizadorServicios.getServicioConsultaExpedientes();    HitoExpediente hitoEstado=oServicio.obtenerHitoEstado(id,entidad);    if (hitoEstado != null)     hitoEstado.setDescripcion(Misc.obtenerMensaje(request,hitoEstado.getDescripcion()));    detalleExpedienteForm.setHitoEstado(hitoEstado);    detalleExpedienteForm.setFicherosEstado(Misc.modificarMensajesFicherosHito(request,oServicio.obtenerFicherosHito(hitoEstado.getGuid(),entidad)).getFicheros());    try {      Subsanaciones subsActual=oServicio.obtenerSubsanacionesHitoActual(id,entidad);      Misc.modificarMensajesSubsanaciones(request,subsActual);      detalleExpedienteForm.setSubsActual(subsActual);    } catch (    Exception ex1) {      detalleExpedienteForm.setSubsActual(new Subsanaciones());    }    try {      Notificaciones notifsActual=oServicio.obtenerNotificionesHitoActual(id,entidad);      Misc.modificarMensajesNotificaciones(request,notifsActual);      detalleExpedienteForm.setNotifsActual(notifsActual);    } catch (    Exception ex1) {      detalleExpedienteForm.setNotifsActual(new Notificaciones());    }    try {      Pagos pagosActual=oServicio.obtenerPagosHitoActual(id,entidad);      Misc.modificarMensajesPagos(request,pagosActual);      detalleExpedienteForm.setPagosActual(pagosActual);    } catch (    Exception ex1) {      detalleExpedienteForm.setPagosActual(new Pagos());    }    HitosExpediente hitos=oServicio.obtenerHistoricoExpediente(id,entidad);    HitosExpediente hitosRev=new HitosExpediente();    for (int i=0; i < hitos.count(); i++) {      if (hitos.get(hitos.count() - i - 1) != null)       hitos.get(hitos.count() - i - 1).setDescripcion(Misc.obtenerMensaje(request,(hitos.get(hitos.count() - i - 1)).getDescripcion()));      hitosRev.add(hitos.get(hitos.count() - i - 1));    }    detalleExpedienteForm.setHitos(hitosRev.getHitosExpediente());    detalleExpedienteForm.setFicherosHashtable(obtenerFicherosHitos(request,hitosRev,entidad));    ArrayList subsanaciones=new ArrayList();    for (int i=0; i < hitos.count(); i++) {      String idHito=((HitoExpediente)hitos.get(hitos.count() - i - 1)).getGuid();      try {        Subsanaciones subsHist=oServicio.obtenerSubsanacionesHito(idHito,entidad);        Misc.modificarMensajesSubsanaciones(request,subsHist);        subsanaciones.add(subsHist);      } catch (      Exception ex2) {        subsanaciones.add(new Subsanaciones());      }    }    ArrayList notificaciones=new ArrayList();    for (int i=0; i < hitos.count(); i++) {      String idHito=((HitoExpediente)hitos.get(hitos.count() - i - 1)).getGuid();      try {        Notificaciones notifsHist=oServicio.obtenerNotificionesHito(idHito,entidad);        Misc.modificarMensajesNotificaciones(request,notifsHist);        notificaciones.add(notifsHist);      } catch (      Exception ex2) {        notificaciones.add(new Notificaciones());      }    }    ArrayList pagos=new ArrayList();    for (int i=0; i < hitos.count(); i++) {      String idHito=((HitoExpediente)hitos.get(hitos.count() - i - 1)).getGuid();      try {        Pagos pagosHist=oServicio.obtenerPagosHito(idHito,entidad);        Misc.modificarMensajesPagos(request,pagosHist);        pagos.add(pagosHist);      } catch (      Exception ex2) {        pagos.add(new Pagos());      }    }    detalleExpedienteForm.setSubsHistoricas(subsanaciones);    detalleExpedienteForm.setNotifsHistoricas(notificaciones);    detalleExpedienteForm.setPagosHistoricas(pagos);    detalleExpedienteForm.setNumeroExpediente(id);    detalleExpedienteForm.setNumeroRegistro(reg);    request.setAttribute("busqueda",request.getParameter("busqueda"));  } catch (  Exception ex) {    request.setAttribute(Misc.MENSAJE_ERROR,ex.getMessage());    return mapping.findForward("Failure");  }  return mapping.findForward("Success");}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.INVOCABLE_ENDPOINT;}  }
class C{  public void toRGB(RGBImage image,int destX,int destY,int x,int y,int width,int height){  getRGB(image.getRGB(),destX + destY * image.getWidth(),x,y,width,height);}  }
class C{  public HadoopV2JobResourceManager(HadoopJobId jobId,JobContextImpl ctx,IgniteLogger log,HadoopV2Job job){  this.jobId=jobId;  this.ctx=ctx;  this.log=log.getLogger(HadoopV2JobResourceManager.class);  this.job=job;}  }
class C{  public ArffSortedTableModel(Instances data){  this(new ArffTableModel(data));}  }
class C{  public static IdentityMessage fromHeaders(Map<String,Object> headers){  int transports=headers.containsKey(HEADER_TRANSPORTS) ? (int)headers.get(HEADER_TRANSPORTS) : 0;  Peer peer=new Peer(Base64.decode((String)headers.get(HEADER_PUBKEY),Base64.DEFAULT),(String)headers.get(HEADER_ALIAS),new Date(),-1,transports);  return new IdentityMessage((String)headers.get(SessionMessage.HEADER_ID),peer);}  }
class C{  private Optional<BillingEvent.Cancellation> createOptionalAutorenewCancellation(DateTime automaticTransferTime,HistoryEntry historyEntry,DomainResource existingDomain){  Registry registry=Registry.get(existingDomain.getTld());  DateTime oldExpirationTime=existingDomain.getRegistrationExpirationTime();  Duration autoRenewGracePeriodLength=registry.getAutoRenewGracePeriodLength();  if (automaticTransferTime.isAfter(oldExpirationTime) && automaticTransferTime.isBefore(oldExpirationTime.plus(autoRenewGracePeriodLength))) {    return Optional.of(new BillingEvent.Cancellation.Builder().setReason(Reason.RENEW).setFlags(ImmutableSet.of(Flag.AUTO_RENEW)).setTargetId(targetId).setClientId(existingDomain.getCurrentSponsorClientId()).setEventTime(automaticTransferTime).setBillingTime(existingDomain.getRegistrationExpirationTime().plus(registry.getAutoRenewGracePeriodLength())).setRecurringEventKey(existingDomain.getAutorenewBillingEvent()).setParent(historyEntry).build());  }  return Optional.absent();}  }
class C{  public double logScore(int nType){  if (m_BayesNet.m_Distributions == null) {    return 0;  }  if (nType < 0) {    nType=m_nScoreType;  }  double fLogScore=0.0;  Instances instances=m_BayesNet.m_Instances;  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {    int nCardinality=m_BayesNet.getParentSet(iAttribute).getCardinalityOfParents();    for (int iParent=0; iParent < nCardinality; iParent++) {      fLogScore+=((Scoreable)m_BayesNet.m_Distributions[iAttribute][iParent]).logScore(nType,nCardinality);    }switch (nType) {case (Scoreable.MDL):{        fLogScore-=0.5 * m_BayesNet.getParentSet(iAttribute).getCardinalityOfParents() * (instances.attribute(iAttribute).numValues() - 1)* Math.log(m_BayesNet.getNumInstances());      }    break;case (Scoreable.AIC):{    fLogScore-=m_BayesNet.getParentSet(iAttribute).getCardinalityOfParents() * (instances.attribute(iAttribute).numValues() - 1);  }break;}}return fLogScore;}  }
class C{  public DateTimeFormatter(DateTimePrinter printer,DateTimeParser parser){  super();  iPrinter=printer;  iParser=parser;  iLocale=null;  iOffsetParsed=false;  iChrono=null;  iZone=null;  iPivotYear=null;  iDefaultYear=2000;}  }
class C{  public LogMessage(LogRecord record,int seq){  sequenceNumber=seq;  String msg=record.getMessage();  data=new byte[msg.length() + 64];  dataUsed=6;  addTimestamp(record.getMillis());  addInt32(LOGMSG_TYPE_LOG,PART_KEY_MESSAGE_TYPE);  addInt32(sequenceNumber,PART_KEY_MESSAGE_SEQ);  addString(Long.toString(record.getThreadID()),PART_KEY_THREAD_ID);  addInt16(record.getLevel().intValue(),PART_KEY_LEVEL);  addString(record.getSourceClassName() + "." + record.getSourceMethodName(),PART_KEY_FUNCTIONNAME);  addString(record.getMessage(),PART_KEY_MESSAGE);}  }
class C{  public void cancel(){synchronized (this) {    mStatus=Status.CANCELLED;  }}  }
class C{  private Object processLine(List<ChannelBuffer> parts,Channel channel,ChannelHandlerContext channelHandlerContext) throws UnknownCommandException, MalformedCommandException {  final int numParts=parts.size();  Op op;  try {    op=Op.FindOp(parts.get(0));    if (op == null)     throw new IllegalArgumentException("unknown operation: " + parts.get(0).toString());  } catch (  IllegalArgumentException e) {    throw new UnknownCommandException("unknown operation: " + parts.get(0).toString());  }  CommandMessage cmd=CommandMessage.command(op);switch (op) {case DELETE:    cmd.setKey(parts.get(1));  if (numParts >= MIN_BYTES_LINE) {    if (parts.get(numParts - 1).equals(NOREPLY)) {      cmd.noreply=true;      if (numParts == 4)       cmd.time=BufferUtils.atoi(parts.get(MIN_BYTES_LINE));    } else     if (numParts == 3)     cmd.time=BufferUtils.atoi(parts.get(MIN_BYTES_LINE));  }return cmd;case DECR:case INCR:if (numParts < MIN_BYTES_LINE || numParts > 3) throw new MalformedCommandException("invalid increment command");cmd.setKey(parts.get(1));cmd.incrAmount=BufferUtils.atoi(parts.get(MIN_BYTES_LINE));if (numParts == 3 && parts.get(MIN_BYTES_LINE).equals(NOREPLY)) {cmd.noreply=true;}return cmd;case FLUSH_ALL:if (numParts >= 1) {if (parts.get(numParts - 1).equals(NOREPLY)) {cmd.noreply=true;if (numParts == 3) cmd.time=BufferUtils.atoi((parts.get(1)));} else if (numParts == MIN_BYTES_LINE) cmd.time=BufferUtils.atoi((parts.get(1)));}return cmd;case VERBOSITY:if (numParts < MIN_BYTES_LINE || numParts > 3) throw new MalformedCommandException("invalid verbosity command");cmd.time=BufferUtils.atoi((parts.get(1)));if (numParts > 1 && parts.get(MIN_BYTES_LINE).equals(NOREPLY)) cmd.noreply=true;return cmd;case APPEND:case PREPEND:case REPLACE:case ADD:case SET:case CAS:if (numParts < 5) {throw new MalformedCommandException("invalid command length");}int size=BufferUtils.atoi(parts.get(4));int expire=BufferUtils.atoi(parts.get(3));int flags=BufferUtils.atoi(parts.get(MIN_BYTES_LINE));cmd.element=new LocalCacheElement(new Key(parts.get(1).slice()),flags,expire != 0 && expire < CacheElement.THIRTY_DAYS ? LocalCacheElement.Now() + expire : expire,0L);if (numParts > 5) {int noreply=op == Op.CAS ? 6 : 5;if (op == Op.CAS) {cmd.cas_key=BufferUtils.atol(parts.get(5));}if (numParts == noreply + 1 && parts.get(noreply).equals(NOREPLY)) cmd.noreply=true;}status.needMore(size,cmd);break;case GET:case GETS:case STATS:case VERSION:case QUIT:cmd.setKeys(parts.subList(1,numParts));return cmd;default :throw new UnknownCommandException("unknown command: " + op);}return null;}  }
class C{  public void clear(){  set.clear();  fireContentsChanged(this,0,0);}  }
class C{  @Field(21) public __VARIANT_NAME_3_union pboolVal(Pointer<Integer> pboolVal){  this.io.setPointerField(this,21,pboolVal);  return this;}  }
class C{  protected void smartInsertAfterBracket(IDocument document,DocumentCommand command){  if (command.offset == -1 || document.getLength() == 0) {    return;  }  try {    int p=(command.offset == document.getLength() ? command.offset - 1 : command.offset);    int line=document.getLineOfOffset(p);    int start=document.getLineOffset(line);    int whiteend=findEndOfWhiteSpace(document,start,command.offset);    if (whiteend == command.offset) {      int indLine=findMatchingOpenBracket(document,line,command.offset,1);      if (indLine != -1 && indLine != line) {        StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine));        replaceText.append(document.get(whiteend,command.offset - whiteend));        replaceText.append(command.text);        command.length=command.offset - start;        command.offset=start;        command.text=replaceText.toString();      }    }  } catch (  BadLocationException e) {    GWTPluginLog.logError(e);  }}  }
class C{  @Override public void nodeChanged(){  wakeupRecoveryThread();}  }
class C{  private Object readPdx(PdxInstance target) throws NameNotFoundException, QueryInvocationTargetException {  if (target instanceof PdxInstanceImpl) {    PdxInstanceImpl pdxInstance=(PdxInstanceImpl)target;    if (pdxInstance.hasField(_name)) {      return pdxInstance.getRawField(_name);    } else {      String className=pdxInstance.getClassName();      if (className.equals(JSONFormatter.JSON_CLASSNAME)) {        return QueryService.UNDEFINED;      }      if (!isFieldAlreadySearchedAndNotFound(className,_name)) {        try {          return pdxInstance.getDefaultValueIfFieldExistsInAnyPdxVersions(_name,className);        } catch (        FieldNotFoundInPdxVersion e1) {          updateClassToFieldsMap(className,_name);        }      }      if (!this.isMethodAlreadySearchedAndNotFound(className,_name)) {        try {          return readFieldFromDeserializedObject(pdxInstance,target);        } catch (        NameNotFoundException ex) {          updateClassToMethodsMap(pdxInstance.getClassName(),_name);          throw ex;        }      } else       return QueryService.UNDEFINED;    }  } else {    if (((PdxInstance)target).hasField(_name)) {      return ((PdxInstance)target).getField(_name);    }    throw new NameNotFoundException(LocalizedStrings.AttributeDescriptor_FIELD_0_IN_CLASS_1_IS_NOT_ACCESSIBLE_TO_THE_QUERY_PROCESSOR.toLocalizedString(new Object[]{_name,target.getClass().getName()}));  }}  }
class C{  public Task<HostRestRep> deactivate(URI id){  return deactivate(id,false);}  }
class C{  private Collection<InetSocketAddress> filterIfNecessary(Collection<InetSocketAddress> addrs,boolean filter){  if (!filter)   return addrs;  List<InetSocketAddress> res=new ArrayList<>(addrs.size());  for (  InetSocketAddress addr : addrs)   if (!addr.isUnresolved())   res.add(addr);  return res;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.214 -0500",hash_original_method="2659119ED4E9182341F4E2CF2510ACC4",hash_generated_method="60488882DC013DC02E5B18F972072683") public final byte readByte() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return (byte)temp;}  }
class C{  public FastCounterMap<V,K> invert(){  FastCounterMap<V,K> invertCounterMap=new FastCounterMap<V,K>();  for (  K key : this.keySet()) {    FastCounter<V> keyCounts=this.getCounter(key);    for (    V val : keyCounts.keySet()) {      double count=keyCounts.getCount(val);      invertCounterMap.setCount(val,key,count);    }  }  return invertCounterMap;}  }
class C{  public JInternalFrame(String title,boolean resizable,boolean closable,boolean maximizable){  this(title,resizable,closable,maximizable,false);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.304 -0500",hash_original_method="B7E1BCC1B7A5845C5179DE746CBEEF71",hash_generated_method="D5F9E6B59E5CA5AC8021B7D7B2DC2734") public static String toString(float f){  return RealToString.getInstance().floatToString(f);}  }
class C{  public static void makePrivate(){  for (int i=0; i < line.length; i++) {    line[i]=replace(" public "," private ",line[i]);  }}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  String command=e.getActionCommand();  if (command.equals(mouseModeCmd)) {    JRadioButtonMenuItem rb=(JRadioButtonMenuItem)(e.getSource());    mouseDelegator.setActiveMouseModeWithID(rb.getName());  }}  }
class C{  public boolean equals(ShoppingCartItem item){  if (item == null)   return false;  return this.equals(item.getProductId(),item.additionalProductFeatureAndAppls,item.attributes,item.prodCatalogId,item.selectedAmount,item.getItemType(),item.getItemGroup(),item.getIsPromo());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.832 -0500",hash_original_method="AA36F499694835EB802B188BC7C59A14",hash_generated_method="8953162C6AA68B916C25F394B240BDD3") private void checkShutdownAccess(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkPermission(shutdownPerm);    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      for (      Worker w : workers)       security.checkAccess(w.thread);    }  finally {      mainLock.unlock();    }  }}  }
class C{  protected JvmRTLibraryPathTableMeta createJvmRTLibraryPathTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmRTLibraryPathTableMetaImpl(mib,objectserver);}  }
class C{  public NettyWSTransport(NettyTransportListener listener,URI remoteLocation,NettyTransportOptions options){  this.options=options;  this.listener=listener;  this.remote=remoteLocation;  this.secure=remoteLocation.getScheme().equalsIgnoreCase("wss");}  }
class C{  public int findIndexByName(String name) throws Exception {  int i;  FolderTokenDocTreeNode node=null;  int idx=-1;  for (i=0; i < count(); i++) {    node=(FolderTokenDocTreeNode)m_nodes.get(i);    if (node.getName().equals(name)) {      idx=i;      break;    }  }  return idx;}  }
class C{  @Override public boolean othersInsertsAreVisible(int type){  debugCodeCall("othersInsertsAreVisible",type);  return false;}  }
class C{  public HttpGet(String path,ParameterMap params){  super(path,params);  this.httpMethod=HttpMethod.GET;}  }
class C{  public void put(String hostname,InetAddress[] addresses){  cache.put(hostname,new AddressCacheEntry(addresses));}  }
class C{  public InternalInputPosition(int offset,int line,int column){  this.offset=offset;  this.line=line;  this.column=column;}  }
class C{  public MutableShort(final Number value){  super();  this.value=value.shortValue();}  }
class C{  private void saveLocaleLocked(Locale l,boolean isDiff,boolean isPersist){  if (isDiff) {    SystemProperties.set("user.language",l.getLanguage());    SystemProperties.set("user.region",l.getCountry());  }  if (isPersist) {    SystemProperties.set("persist.sys.language",l.getLanguage());    SystemProperties.set("persist.sys.country",l.getCountry());    SystemProperties.set("persist.sys.localevar",l.getVariant());  }}  }
class C{  public void clearHeaderCache(){  mHeaderCache.clear();}  }
class C{  public address removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void handleEvent(Event evt){  handleDOMChildNodeRemovedEvent((MutationEvent)evt);}  }
class C{  boolean writeData() throws IOException {  int tosend;  int sent;  byte[] block=new byte[kBlockSize];  do {    tosend=Math.min(sendStreamSize - totalSent,block.length);    System.arraycopy(sendData,totalSent,block,0,tosend);    if (tosend > 0) {      sent=localSend(block,tosend);      updateLocalClock();      if (sent != -1) {        totalSent+=sent;      } else {        logger.log(Level.FINE,"Flow Controlled");      }    } else {      sent=tosend=0;    }  } while (sent > 0);  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"Sent: " + totalSent + " remaining: "+ (sendStreamSize - totalSent));  }  return tosend == 0;}  }
class C{  protected void sendFunctionGroup5(){  byte[] result=jmri.NmraPacket.function21Through28Packet(address.getNumber(),address.isLongAddress(),getF21(),getF22(),getF23(),getF24(),getF25(),getF26(),getF27(),getF28());  station.sendPacket(result,1);}  }
class C{  public static void updateTimezone(String sourceId,DateTime dateTime){  if (dateTime != null) {    s_sourceToTimeZoneMap.put(sourceId,dateTime);  }}  }
class C{  private boolean isSymmetric(TreeNode root){  if (root == null)   return true;  Stack<TreeNode> s=new Stack<TreeNode>();  s.push(root.left);  s.push(root.right);  while (!s.isEmpty()) {    TreeNode n1=s.pop();    TreeNode n2=s.pop();    if (n1 == null && n2 == null)     continue;    if (n1 == null || n2 == null || n1.val != n2.val)     return false;    s.push(n1.left);    s.push(n2.right);    s.push(n1.right);    s.push(n2.left);  }  return true;}  }
class C{  public BasicAttributes(){}  }
class C{  @Override protected EntityFigure createFigure(){  final EntityFigure figure=new EntityFigure(getTable());  final EntityDiagram diagram=((DiagramPart)getParent()).getDiagram();  Rectangle bounds=diagram.getInitBounds(getTable());  if (bounds != null) {    figure.setLocation(bounds.getLocation());  }  return figure;}  }
class C{  protected EntityLiving createEntity(World world){  try {    return this.entityCtor.newInstance(world);  } catch (  Exception ex) {    ex.printStackTrace();  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrspecifiedvalue.class,args);}  }
class C{  private void init(){  rippleAlpha=MIN_RIPPLE_ALPHA;  mRadius=0.0f;  drawRect=new RectF(0.0f,0.0f,mView.getWidth(),mView.getHeight());  isOutsideView=false;  endRippleRadius=0.0f;}  }
class C{  public void showAndWait(){  if (!isTrayShowing()) {    stage.show();    animation.playShowAnimation();    onShown();  }}  }
class C{  private boolean isTemporalPageEmpty(Eml eml){  List<TemporalCoverage> coverages=eml.getTemporalCoverages();  for (  TemporalCoverage coverage : coverages) {    boolean isEmtpy=isTemporalCoverageEmpty(coverage);    if (!isEmtpy) {      return false;    }  }  return true;}  }
class C{  public static QueryTask.QuerySpecification buildTaskStatusQuerySpec(final Class taskClass,final TaskState.TaskStage... stages){  checkArgument(stages != null && stages.length >= 1,"stages.length must be >= 1");  String fieldName=findStageFieldName(taskClass);  if (null == fieldName) {    throw new IllegalArgumentException(String.format("%s does not have a member of type %s",taskClass,TaskState.class));  }  QueryTask.Query stageQuery=buildTaskStateQuery(String.format(STAGE_FIELD_NAME_FORMAT,fieldName),stages);  return buildQuerySpec(taskClass,stageQuery);}  }
class C{  public void afterQuadrantMove(Quadrant newQuadrant){  Raptor.getInstance().getPreferences().setValue(PreferenceKeys.APP_BROWSER_QUADRANT,newQuadrant);}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public void update(final float delta){  if (transitionInProgress) {    currentValue+=(targetValue - initialValue) * delta / transitionLength;    if (isInitialGreater) {      if (currentValue <= targetValue) {        finalizeTransition();      }    } else {      if (currentValue >= targetValue) {        finalizeTransition();      }    }  }}  }
class C{  public void draw(@NonNull Canvas canvas,@NonNull RectF bounds,float percentComplete,float startAngle,float sweepAngle){switch (mEffectType) {case EFFECT_SPIRAL_EXPLODE:    final float step=0.6f;  if (percentComplete <= step) {    drawMoveToCenter(canvas,bounds,percentComplete * (1f / step),startAngle,sweepAngle);  } else {    final float remain=1.0f - step;    drawExplode(canvas,bounds,(percentComplete - step) / remain);    drawText(canvas,bounds,(percentComplete - step) / remain);  }break;case EFFECT_EXPLODE:drawExplode(canvas,bounds,percentComplete);drawText(canvas,bounds,percentComplete);break;case EFFECT_SPIRAL_IN:case EFFECT_SPIRAL_OUT:case EFFECT_SPIRAL_OUT_FILL:drawMoveToCenter(canvas,bounds,percentComplete,startAngle,sweepAngle);break;}}  }
class C{  public UpdateRequest add(final SolrInputDocument doc){  Objects.requireNonNull(doc,"Cannot add a null SolrInputDocument");  if (documents == null) {    documents=new LinkedHashMap<>();  }  documents.put(doc,null);  return this;}  }
class C{  private void updateNowPlayingInfo(){  mTrackName.setText(MusicUtils.getTrackName());  mArtistName.setText(getArtistAndAlbumName());  mTotalTime.setText(MusicUtils.makeTimeString(this,MusicUtils.duration() / 1000));  mImageFetcher.loadCurrentArtwork(mAlbumArt);  mImageFetcher.loadCurrentArtwork(mAlbumArtSmall);  queueNextRefresh(1);}  }
class C{  public JFXDialogLayout(){  super();  initialize();  layout.getChildren().add(heading);  heading.getStyleClass().add("jfx-layout-heading");  heading.getStyleClass().add("title");  layout.getChildren().add(body);  body.getStyleClass().add("jfx-layout-body");  body.prefHeightProperty().bind(this.prefHeightProperty());  body.prefWidthProperty().bind(this.prefWidthProperty());  layout.getChildren().add(actions);  actions.getStyleClass().add("jfx-layout-actions");  this.getChildren().add(layout);}  }
class C{  public static void checkPrivateKey(String keyFile) throws Exception {  JSch jsch=new JSch();  KeyPair keyPair=KeyPair.load(jsch,keyFile);  if (!keyPair.isEncrypted()) {    throw new IllegalArgumentException("private key is not protected by a passphrase - aborting");  }}  }
class C{  public boolean isAllowAttachments(){  return allowAttachments;}  }
class C{  public void buildClassifier(Instances insts) throws Exception {  Instances newInsts;  getCapabilities().testWithFail(insts);  boolean zeroTrainingInstances=insts.numInstances() == 0;  insts=new Instances(insts);  insts.deleteWithMissingClass();  if (m_Classifier == null) {    throw new Exception("No base classifier has been set!");  }  m_ZeroR=new ZeroR();  m_ZeroR.buildClassifier(insts);  m_TwoClassDataset=null;  int numClassifiers=insts.numClasses();  if (numClassifiers <= 2) {    m_Classifiers=AbstractClassifier.makeCopies(m_Classifier,1);    m_Classifiers[0].buildClassifier(insts);    m_ClassFilters=null;  } else   if (m_Method == METHOD_1_AGAINST_1) {    ArrayList<int[]> pairs=new ArrayList<int[]>();    for (int i=0; i < insts.numClasses(); i++) {      for (int j=0; j < insts.numClasses(); j++) {        if (j <= i)         continue;        int[] pair=new int[2];        pair[0]=i;        pair[1]=j;        pairs.add(pair);      }    }    numClassifiers=pairs.size();    m_Classifiers=AbstractClassifier.makeCopies(m_Classifier,numClassifiers);    m_ClassFilters=new Filter[numClassifiers];    m_SumOfWeights=new double[numClassifiers];    for (int i=0; i < numClassifiers; i++) {      RemoveWithValues classFilter=new RemoveWithValues();      classFilter.setAttributeIndex("" + (insts.classIndex() + 1));      classFilter.setModifyHeader(true);      classFilter.setInvertSelection(true);      classFilter.setNominalIndicesArr((int[])pairs.get(i));      Instances tempInstances=new Instances(insts,0);      tempInstances.setClassIndex(-1);      classFilter.setInputFormat(tempInstances);      newInsts=Filter.useFilter(insts,classFilter);      if (newInsts.numInstances() > 0 || zeroTrainingInstances) {        newInsts.setClassIndex(insts.classIndex());        m_Classifiers[i].buildClassifier(newInsts);        m_ClassFilters[i]=classFilter;        m_SumOfWeights[i]=newInsts.sumOfWeights();      } else {        m_Classifiers[i]=null;        m_ClassFilters[i]=null;      }    }    m_TwoClassDataset=new Instances(insts,0);    int classIndex=m_TwoClassDataset.classIndex();    m_TwoClassDataset.setClassIndex(-1);    ArrayList<String> classLabels=new ArrayList<String>();    classLabels.add("class0");    classLabels.add("class1");    m_TwoClassDataset.replaceAttributeAt(new Attribute("class",classLabels),classIndex);    m_TwoClassDataset.setClassIndex(classIndex);  } else {    Code code=null;switch (m_Method) {case METHOD_ERROR_EXHAUSTIVE:      code=new ExhaustiveCode(numClassifiers);    break;case METHOD_ERROR_RANDOM:  code=new RandomCode(numClassifiers,(int)(numClassifiers * m_RandomWidthFactor),insts);break;case METHOD_1_AGAINST_ALL:code=new StandardCode(numClassifiers);break;default :throw new Exception("Unrecognized correction code type");}numClassifiers=code.size();m_Classifiers=AbstractClassifier.makeCopies(m_Classifier,numClassifiers);m_ClassFilters=new MakeIndicator[numClassifiers];for (int i=0; i < m_Classifiers.length; i++) {m_ClassFilters[i]=new MakeIndicator();MakeIndicator classFilter=(MakeIndicator)m_ClassFilters[i];classFilter.setAttributeIndex("" + (insts.classIndex() + 1));classFilter.setValueIndices(code.getIndices(i));classFilter.setNumeric(false);classFilter.setInputFormat(insts);newInsts=Filter.useFilter(insts,m_ClassFilters[i]);m_Classifiers[i].buildClassifier(newInsts);}}m_ClassAttribute=insts.classAttribute();}  }
class C{  public final static void writeInt(BytesRef dst,int i){  dst.bytes[dst.offset]=((byte)(i >> 24));  dst.bytes[dst.offset + 1]=((byte)(i >> 16));  dst.bytes[dst.offset + 2]=((byte)(i >> 8));  dst.bytes[dst.offset + 3]=((byte)i);  dst.offset+=4;}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  public final void testGetMGFParameters01(){  PSSParameterSpec pssps=new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,1);  assertTrue(MGF1ParameterSpec.SHA1.equals(pssps.getMGFParameters()));}  }
class C{  public boolean containsExtensionElementURI(String uri){  if (null == m_ExtensionElementURIs)   return false;  return m_ExtensionElementURIs.contains(uri);}  }
class C{  public ParseException(final String message){  this(-1,-1,message);}  }
class C{  public static void mockStatusCode(final HttpResponse response,final int statusCode){  final StatusLine statusLine=Mockito.mock(StatusLine.class);  Mockito.when(response.getStatusLine()).thenReturn(statusLine);  Mockito.when(statusLine.getStatusCode()).thenReturn(statusCode);}  }
class C{  public String toString(){  return getClass().getSimpleName() + " of size " + this.cols+ "x"+ this.rows+ ", cell size="+ this.cellSize;}  }
class C{  protected void parseDefineTextField(InStream in) throws IOException {  int id=in.readUI16();  Rect boundary=new Rect(in);  int flags=in.readUI16();  int fontId=in.readUI16();  int fontSize=in.readUI16();  AlphaColor textColor=new AlphaColor(in);  int charLimit=((flags & TEXTFIELD_LIMIT_CHARS) != 0) ? in.readUI16() : 0;  int alignment=in.readUI8();  int leftMargin=in.readUI16();  int rightMargin=in.readUI16();  int indentation=in.readUI16();  int lineSpacing=in.readUI16();  String fieldName=in.readString();  String initialText=((flags & TEXTFIELD_HAS_TEXT) != 0) ? in.readString() : null;  tagtypes.tagDefineTextField(id,fieldName,initialText,boundary,flags,textColor,alignment,fontId,fontSize,charLimit,leftMargin,rightMargin,indentation,lineSpacing);}  }
class C{  public boolean isLocation(){  return LOCATION.equals(value);}  }
class C{  public EditorFileFilter(String description){  desc=description;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized boolean allChecksCompleted(){  for (  CandidatePair pair : this) {    CandidatePairState pairState=pair.getState();    if ((pairState != CandidatePairState.SUCCEEDED) && (pairState != CandidatePairState.FAILED)) {      return false;    }  }  return true;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static boolean canWrite(String fileName){  return FilePath.get(fileName).canWrite();}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  public static String normalize(CharSequence src,Form form){  return NormalizerBase.normalize(src.toString(),form);}  }
class C{  private static void interpolateRange(final int start,final int end,final int ref1,final int ref2,final int[] points,final int[] original){  final int lowerRef;  final int higherRef;  if (original[ref2] < original[ref1]) {    lowerRef=ref2;    higherRef=ref1;  } else {    lowerRef=ref1;    higherRef=ref2;  }  for (int i=start; i <= end; i++) {    if (original[i] < original[lowerRef]) {      points[i]+=(points[lowerRef] - original[lowerRef]);    } else     if (original[i] > original[higherRef]) {      points[i]+=(points[higherRef] - original[higherRef]);    } else {      final double pos=(double)(original[i] - original[lowerRef]) / (original[higherRef] - original[lowerRef]);      points[i]=points[lowerRef] + (int)(pos * (points[higherRef] - points[lowerRef]));    }  }}  }
class C{  void notExcessiveNesting(){synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {synchronized (this) {                                                                }                                                              }                                                            }                                                          }                                                        }                                                      }                                                    }                                                  }                                                }                                              }                                            }                                          }                                        }                                      }                                    }                                  }                                }                              }                            }                          }                        }                      }                    }                  }                }              }            }          }        }      }    }  }}  }
class C{  private void drawBoundary(Graphics g){  Rectangle r=getPlotRect();  g.setColor(boundaryColor);  g.drawRect(r.x,r.y,r.width,r.height);}  }
class C{  public WrappedIndentingWriter(Writer out,int width){  this(out,width,"");}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startTo("InvokeTarg","sayHi","()V");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  StackFrame frame=mainThread.frame(0);  thisObject=frame.thisObject();  longCheckField=targetClass.fieldByName("longCheck");  booleanCheckField=targetClass.fieldByName("booleanCheck");  objectCheckField=targetClass.fieldByName("objectCheck");  voidCheckField=targetClass.fieldByName("voidCheck");  callToString("aBooleanArray");  invoke("invokeVoid","()Z",new ArrayList(0),vm().mirrorOf(true));  invoke("invokeBoolean","(Z)Z",vm().mirrorOf(true));  invoke("invokeByte","(B)B",vm().mirrorOf((byte)14));  invoke("invokeChar","(C)C",vm().mirrorOf('h'));  invoke("invokeShort","(S)S",vm().mirrorOf((short)54));  invoke("invokeInt","(I)I",vm().mirrorOf((int)414));  invoke("invokeLong","(J)J",vm().mirrorOf((long)140000));  invoke("invokeFloat","(F)F",vm().mirrorOf((float)315));  invoke("invokeDouble","(D)D",vm().mirrorOf((double)181818));  invoke("invokeBooleanArray","([Z)[Z","aBooleanArray");  invoke("invokeByteArray","([B)[B","aByteArray");  invoke("invokeCharArray","([C)[C","aCharArray");  invoke("invokeShortArray","([S)[S","aShortArray");  invoke("invokeIntArray","([I)[I","aIntArray");  invoke("invokeLongArray","([J)[J","aLongArray");  invoke("invokeFloatArray","([F)[F","aFloatArray");  invoke("invokeDoubleArray","([D)[D","aDoubleArray");  invoke("invokeBoolean2DArray","([[Z)[[Z","aBoolean2DArray");  invoke("invokeByte2DArray","([[B)[[B","aByte2DArray");  invoke("invokeChar2DArray","([[C)[[C","aChar2DArray");  invoke("invokeShort2DArray","([[S)[[S","aShort2DArray");  invoke("invokeInt2DArray","([[I)[[I","aInt2DArray");  invoke("invokeLong2DArray","([[J)[[J","aLong2DArray");  invoke("invokeFloat2DArray","([[F)[[F","aFloat2DArray");  invoke("invokeDouble2DArray","([[D)[[D","aDouble2DArray");  invoke("invokeString","(Ljava/lang/String;)Ljava/lang/String;",vm().mirrorOf("Howdy"));  invoke("invokeStringArray","([Ljava/lang/String;)[Ljava/lang/String;","aStringArray");  invoke("invokeString2DArray","([[Ljava/lang/String;)[[Ljava/lang/String;","aString2DArray");  invoke("invokeDate","(Ljava/util/Date;)Ljava/util/Date;","aDate");  invoke("invokeDateArray","([Ljava/util/Date;)[Ljava/util/Date;","aDateArray");  invoke("invokeDate2DArray","([[Ljava/util/Date;)[[Ljava/util/Date;","aDate2DArray");  Value i2=fieldValue("aInt2DArray");  Value str=vm().mirrorOf("Later");  List args=new ArrayList(2);  args.add(i2);  args.add(str);  invoke("invokeCombo","([[ILjava/lang/String;)Ljava/lang/String;",args,str);  invoke("invokeCombo2","([[ILjava/lang/String;)[[I",args,i2);  listenUntilVMDisconnect();  if (!testFailed) {    println("InvokeTest: passed");  } else {    throw new Exception("InvokeTest: failed");  }}  }
class C{  private void initialize(URI p_other){  m_scheme=p_other.getScheme();  m_userinfo=p_other.getUserinfo();  m_host=p_other.getHost();  m_port=p_other.getPort();  m_path=p_other.getPath();  m_queryString=p_other.getQueryString();  m_fragment=p_other.getFragment();}  }
class C{  @Override public int weight(){  return 1;}  }
class C{  private char readChar(){  if (this.charReadTooMuch != '\0') {    char ch=this.charReadTooMuch;    this.charReadTooMuch='\0';    return ch;  } else {    if (readerIndex > this.reader.length() - 1) {      throw this.unexpectedEndOfData();    }    int i=this.reader.charAt(readerIndex);    readerIndex++;    if (i == 10) {      this.parserLineNr+=1;      return '\n';    } else {      return (char)i;    }  }}  }
class C{  public boolean postProcessInstance(){  return mFormEntryController.getModel().getForm().postProcessInstance();}  }
class C{  @CheckForNull private static String colorToName(@Nullable Color color){  if (color == null) {    return null;  }  if (color.equals(Color.black)) {    return "black";  } else   if (color.equals(Color.darkGray)) {    return "darkGray";  } else   if (color.equals(Color.gray)) {    return "gray";  } else   if (color.equals(Color.lightGray)) {    return "lightGray";  } else   if (color.equals(Color.white)) {    return "white";  } else   if (color.equals(Color.red)) {    return "red";  } else   if (color.equals(Color.pink)) {    return "pink";  } else   if (color.equals(Color.orange)) {    return "orange";  } else   if (color.equals(Color.yellow)) {    return "yellow";  } else   if (color.equals(Color.green)) {    return "green";  } else   if (color.equals(Color.blue)) {    return "blue";  } else   if (color.equals(Color.magenta)) {    return "magenta";  } else   if (color.equals(Color.cyan)) {    return "cyan";  }  return null;}  }
class C{  @Override public synchronized void removeConfigurationListener(ConfigurationListener cl){}  }
class C{  private boolean hitBorder(int from,int offset){  int spanCount=getSpanCount();  if (Math.abs(offset) == 1) {    int spanIndex=from % spanCount;    int newSpanIndex=spanIndex + offset;    return newSpanIndex < 0 || newSpanIndex >= spanCount;  } else {    int newPos=from + offset;    return newPos < 0 || newPos >= spanCount;  }}  }
class C{  public void write2File(String valuesPath,String xmlContent){  File fileDir=new File(this.resFile + File.separator + valuesPath);  fileDir.mkdir();  File file=new File(fileDir.getAbsolutePath(),"dimens.xml");  BufferedWriter bw=null;  FileOutputStream fos=null;  try {    fos=new FileOutputStream(file);    bw=new BufferedWriter(new OutputStreamWriter(fos));    bw.write(xmlContent);  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      if (bw != null) {        bw.close();        bw=null;      }      if (fos != null) {        fos.close();        fos=null;      }    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  private void scrollList(final int scrolledDistance){  mListTop=mListTopStart + scrolledDistance;  if (mRotationEnabled) {    mListRotation=-(DEGREES_PER_SCREEN * mListTop) / getHeight();  }  requestLayout();}  }
class C{  private static AdeException adeExceptionOf(Throwable t){  if (t instanceof AdeException) {    return (AdeException)t;  } else {    return new AdeInternalException("adeExceptionOf( " + t.getMessage() + " )",t);  }}  }
class C{  public FloatMatrix put(int rowIndex,int columnIndex,float value){  data[index(rowIndex,columnIndex)]=value;  return this;}  }
class C{  public final boolean equals(Object node){  try {    return equals((Node)node);  } catch (  ClassCastException cce) {    return false;  }}  }
class C{  public URI(URI p_base,String p_uriSpec) throws MalformedURIException {  initialize(p_base,p_uriSpec);}  }
class C{  public static MInvoice copyFrom(MInvoice from,Timestamp dateDoc,Timestamp dateAcct,int C_DocTypeTarget_ID,boolean isSOTrx,boolean counter,String trxName,boolean setOrder){  MInvoice to=new MInvoice(from.getCtx(),0,trxName);  PO.copyValues(from,to,from.getAD_Client_ID(),from.getAD_Org_ID());  to.set_ValueNoCheck("C_Invoice_ID",I_ZERO);  to.set_ValueNoCheck("DocumentNo",null);  to.setDocStatus(DOCSTATUS_Drafted);  to.setDocAction(DOCACTION_Complete);  to.setC_DocType_ID(0);  to.setC_DocTypeTarget_ID(C_DocTypeTarget_ID);  to.setIsSOTrx(isSOTrx);  to.setDateInvoiced(dateDoc);  to.setDateAcct(dateAcct);  to.setDatePrinted(null);  to.setIsPrinted(false);  to.setIsApproved(false);  to.setC_Payment_ID(0);  to.setC_CashLine_ID(0);  to.setIsPaid(false);  to.setIsInDispute(false);  to.setGrandTotal(Env.ZERO);  to.setTotalLines(Env.ZERO);  to.setIsTransferred(false);  to.setPosted(false);  to.setProcessed(false);  to.setProcessing(false);  to.setIsSelfService(false);  if (!setOrder)   to.setC_Order_ID(0);  if (counter) {    to.setRef_Invoice_ID(from.getC_Invoice_ID());    if (from.getC_Order_ID() != 0) {      MOrder peer=new MOrder(from.getCtx(),from.getC_Order_ID(),from.get_TrxName());      if (peer.getRef_Order_ID() != 0)       to.setC_Order_ID(peer.getRef_Order_ID());    }    if (from.getM_RMA_ID() != 0) {      MRMA peer=new MRMA(from.getCtx(),from.getM_RMA_ID(),from.get_TrxName());      if (peer.getRef_RMA_ID() > 0)       to.setM_RMA_ID(peer.getRef_RMA_ID());    }  } else   to.setRef_Invoice_ID(0);  to.saveEx(trxName);  if (counter)   from.setRef_Invoice_ID(to.getC_Invoice_ID());  if (from.getLines(true).length > 0) {    if (to.copyLinesFrom(from,counter,setOrder) == 0)     throw new IllegalStateException("Could not create Invoice Lines");  }  return to;}  }
class C{  public static void main(String[] args) throws Exception {  SpringApplication.run(Application.class,args);}  }
class C{  public List<String> classify(List<List<Feature>> features) throws CleartkProcessingException {  String[][] featureStringArray=toStrings(features);  Pipe pipe=transducer.getInputPipe();  Instance instance=new Instance(featureStringArray,null,null,null);  instance=pipe.instanceFrom(instance);  Sequence<?> data=(Sequence<?>)instance.getData();  Sequence<?> untypedSequence=transducer.transduce(data);  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);  List<String> returnValues=new ArrayList<String>();  for (int i=0; i < sequence.size(); i++) {    String encodedOutcome=sequence.get(i);    returnValues.add(outcomeEncoder.decode(encodedOutcome));  }  return returnValues;}  }
class C{  public void shutdown(){  shutDown=true;  try {    if (!cg.close().await(5,TimeUnit.SECONDS)) {      logger.warn("Failed to cleanly shut down RPC server");      return;    }    clientBootstrap=null;    channelInitializer=null;    if (bossGroup != null)     bossGroup.shutdownGracefully();    bossGroup=null;    if (workerGroup != null)     workerGroup.shutdownGracefully();    workerGroup=null;  } catch (  InterruptedException e) {    logger.warn("Interrupted while shutting down RPC server");  }  logger.debug("Internal floodlight RPC shut down");}  }
class C{  protected BasePeriod(int years,int months,int weeks,int days,int hours,int minutes,int seconds,int millis,PeriodType type){  super();  type=checkPeriodType(type);  iType=type;  iValues=setPeriodInternal(years,months,weeks,days,hours,minutes,seconds,millis);}  }
class C{  public <O>Tree<O> transformNodesUsingNode(MyMethod<Tree<L>,O> trans){  ArrayList<Tree<O>> newChildren=new ArrayList<Tree<O>>(children.size());  O newLabel=trans.call(this);  for (  Tree<L> child : children) {    newChildren.add(child.transformNodesUsingNode(trans));  }  return new Tree<O>(newLabel,newChildren);}  }
class C{  public void updateIndex(final int index){  int newTypeRef=0x42000000 | (index << 8);  if (visibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : visibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }  if (invisibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : invisibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }}  }
class C{  protected void drawBorder(Graphics2D g2,Rectangle2D area){  this.frame.draw(g2,area);}  }
class C{  public void addConfiguredProperty(Property property){  this.properties.add(property);}  }
class C{  public final DoubleGrid3D add(IntGrid3D withThis){  checkBounds(withThis);  int[][][] otherField=withThis.field;  int[][] ofieldx=null;  int[] ofieldxy=null;  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=otherField[x];    for (int y=0; y < height; y++) {      ofieldxy=ofieldx[y];      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]+=ofieldxy[z];    }  }  return this;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_arg0.execute(xctxt).xstr().startsWith(m_arg1.execute(xctxt).xstr()) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  private Result addView(ViewGroup parent,View view,int index){  try {    parent.addView(view,index);    return SUCCESS.createResult();  } catch (  UnsupportedOperationException e) {    return ERROR_VIEWGROUP_NO_CHILDREN.createResult();  }}  }
class C{  public synchronized StartResultDownloadData startDownload(AccessStructure struct) throws JPlagException {  if (userToDownloadMap.containsKey(struct.getUsername())) {    throw new JPlagException("downloadException","You are already " + "downloading a submission!","Only one submission may be " + "downloaded by one user at a time");  }  File file=new File(struct.getResultPath());  if (!file.exists()) {    System.out.println("startDownload: \"" + struct.getResultPath() + "\" doesn't exist!");    throw new JPlagException("downloadException","File doesn't exist!?","Unable to find result file!");  }  int filesize=(int)file.length();  TransferObject obj=new TransferObject(struct,file,filesize,120);  byte[] data=obj.readNextPart();  if (obj.getRemainingBytes() > 0) {    userToDownloadMap.put(struct.getUsername(),obj);    downloadTimeoutQueue.add(obj);  } else   JPlagCentral.cancelSubmission(struct);  return new StartResultDownloadData(filesize,data);}  }
class C{  public byte[] toByteArray(){  return output.toByteArray();}  }
class C{  private Percentile(){}  }
class C{  public LightCycles(long seed){  this(seed,100,100,10);}  }
class C{  private void robust(Node tree){  String asHtml=renderHtml(tree);  assertIdenticalStructure(tree,html(asHtml));  assertIdenticalStructure(tree,xml(asHtml));  String asXml=renderXml(tree);  assertIdenticalStructure(tree,html(asXml));  assertIdenticalStructure(tree,xml(asXml));}  }
class C{  public Word deleteLetter(){  Box currentBox=this.boxes[this.highlightLetter.across][this.highlightLetter.down];  Word wordToReturn=this.getCurrentWord();  if (currentBox.getResponse() == ' ') {    wordToReturn=this.previousLetter();    currentBox=this.boxes[this.highlightLetter.across][this.highlightLetter.down];  }  if (currentBox.getResponse() == currentBox.getSolution() && this.isShowErrors()) {  } else {    currentBox.setResponse(' ');  }  return wordToReturn;}  }
class C{  public void handleManagerStop() throws ManagementException {  if (!isServiceInitialised("handleManagerStop")) {    return;  }  MBeanJMXAdapter jmxAdapter=service.getJMXAdapter();  Map<ObjectName,Object> registeredMBeans=jmxAdapter.getLocalGemFireMBean();  ObjectName aggregatemMBeanPattern=null;  try {    aggregatemMBeanPattern=new ObjectName(ManagementConstants.AGGREGATE_MBEAN_PATTERN);  } catch (  MalformedObjectNameException e1) {    throw new ManagementException(e1);  }catch (  NullPointerException e1) {    throw new ManagementException(e1);  }  MemberMXBean localMember=service.getMemberMXBean();  ObjectName memberObjectName=MBeanJMXAdapter.getMemberMBeanName(InternalDistributedSystem.getConnectedInstance().getDistributedMember());  FederationComponent removedComp=service.getLocalManager().getFedComponents().get(memberObjectName);  service.afterRemoveProxy(memberObjectName,MemberMXBean.class,localMember,removedComp);  Iterator<ObjectName> it=registeredMBeans.keySet().iterator();  while (it.hasNext()) {    ObjectName objectName=it.next();    if (objectName.equals(memberObjectName)) {      continue;    }    if (aggregatemMBeanPattern.apply(objectName)) {      continue;    }    Object object=registeredMBeans.get(objectName);    ObjectInstance instance;    try {      instance=mbeanServer.getObjectInstance(objectName);      String className=instance.getClassName();      Class cls=ClassLoadUtil.classFromName(className);      Type[] intfTyps=cls.getGenericInterfaces();      FederationComponent oldObj=service.getLocalManager().getFedComponents().get(objectName);      for (int i=0; i < intfTyps.length; i++) {        Class intfTyp=(Class)intfTyps[i];        service.afterRemoveProxy(objectName,intfTyp,object,oldObj);      }    } catch (    InstanceNotFoundException e) {      logger.warn("Failed to invoke aggregator for {} with exception {}",objectName,e.getMessage(),e);    }catch (    ClassNotFoundException e) {      logger.warn("Failed to invoke aggregator for {} with exception {}",objectName,e.getMessage(),e);    }  }  service.removeProxyListener(this.aggregator);  this.aggregator=null;}  }
class C{  public void addPlugInVirtualDataWindow(String namespace,String name,String factoryClass,Serializable customConfigurationObject){  ConfigurationPlugInVirtualDataWindow configurationPlugInVirtualDataWindow=new ConfigurationPlugInVirtualDataWindow();  configurationPlugInVirtualDataWindow.setNamespace(namespace);  configurationPlugInVirtualDataWindow.setName(name);  configurationPlugInVirtualDataWindow.setFactoryClassName(factoryClass);  configurationPlugInVirtualDataWindow.setConfig(customConfigurationObject);  plugInVirtualDataWindows.add(configurationPlugInVirtualDataWindow);}  }
class C{  @Override public int size(){  if (status == DequeStatus.Full) {    return elements.length;  }  return (front <= rear) ? (rear - front) : (rear + elements.length - front);}  }
class C{  private void updateDataPlan(Cycle cycle){  view.updateCycleView(cycle);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  @Override public double predictQuantile(double percentage){  updateBoundariesAndOrWeights();  double val=Statistics.normalInverse(1.0 - (1.0 - 0.95) / 2);  double min=m_TM.firstKey() - val * m_Width;  double max=m_TM.lastKey() + val * m_Width;  double delta=(max - min) / m_NumIntervals;  double sum=0;  double leftVal=Math.exp(logDensity(min));  for (int i=0; i < m_NumIntervals; i++) {    if (sum >= percentage) {      return min + i * delta;    }    double rightVal=Math.exp(logDensity(min + (i + 1) * delta));    sum+=0.5 * (leftVal + rightVal) * delta;    leftVal=rightVal;  }  return max;}  }
class C{  protected static String quoteBigDecimal(BigDecimal x){  if (x == null) {    return "null";  }  return "new BigDecimal(\"" + x.toString() + "\")";}  }
class C{  private StunMessageEvent doTestIII(TransportAddress serverAddress) throws StunException, IOException {  Request request=MessageFactory.createBindingRequest();  ChangeRequestAttribute changeRequest=AttributeFactory.createChangeRequestAttribute();  changeRequest.setChangeIpFlag(false);  changeRequest.setChangePortFlag(true);  request.putAttribute(changeRequest);  StunMessageEvent evt=requestSender.sendRequestAndWaitForResponse(request,serverAddress);  if (evt != null)   logger.fine("Test III res=" + evt.getRemoteAddress().toString() + " - "+ evt.getRemoteAddress().getHostAddress()); else   logger.fine("NO RESPONSE received to Test III.");  return evt;}  }
class C{  @Override public void keyPressed(KeyEvent e){}  }
class C{  private boolean isIdentifierPart(char c){  return (Character.isLetterOrDigit(c) || c == '-' || c == '_');}  }
class C{  public void loadSound(int resourceId){  int soundId=mSoundPool.load(mAppContext,resourceId,1);  mResourceToSoundId.put(resourceId,soundId);}  }
class C{  @Override public void notifyMobsimInitialized(@SuppressWarnings("rawtypes") MobsimInitializedEvent e){  Collection<MobsimAgent> agents=((QSim)e.getQueueSimulation()).getAgents();  String mode=passengerEngine.getMode();  for (  MobsimAgent mobsimAgent : agents) {    if (mobsimAgent instanceof PlanAgent) {      Plan plan=((PlanAgent)mobsimAgent).getCurrentPlan();      for (      PlanElement elem : plan.getPlanElements()) {        if (elem instanceof Leg) {          Leg leg=(Leg)elem;          if (leg.getMode().equals(mode)) {            Id<Link> fromLinkId=leg.getRoute().getStartLinkId();            Id<Link> toLinkId=leg.getRoute().getEndLinkId();            double departureTime=leg.getDepartureTime();            passengerEngine.prebookTrip(0,(MobsimPassengerAgent)mobsimAgent,fromLinkId,toLinkId,departureTime);          }        }      }    }  }}  }
class C{  public boolean hasString(){  return (null != m_strCache);}  }
class C{  public void addSizeChangedListener(ActionListener l){  if (sizeChangedListener == null) {    sizeChangedListener=new EventDispatcher();  }  sizeChangedListener.addListener(l);}  }
class C{  public static final CButton createOKButton(boolean withText){  if (withText)   return createOKButton(Msg.getMsg(Env.getCtx(),A_OK));  return createOKButton("");}  }
class C{  public void update(byte b){  digest.update(b);  if (messageLength < mBuf.length) {    mBuf[messageLength]=b;  }  messageLength++;}  }
class C{  public String toStringRanking(){  String result;  int[] ranking;  int i;  int curr;  if (m_RankingWins == null)   return "-ranking data not set-";  result=">-<,>,<,Resultset\n";  ranking=Utils.sort(m_RankingDiff);  for (i=getColCount() - 1; i >= 0; i--) {    curr=ranking[i];    if (getColHidden(curr))     continue;    result+=m_RankingDiff[curr] + "," + m_RankingWins[curr]+ ","+ m_RankingLosses[curr]+ ","+ removeFilterName(m_ColNames[curr])+ "\n";  }  return result;}  }
class C{  public SyncValueResponseMessage(SyncValueResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.count=other.count;}  }
class C{  public DefaultProcessingInstruction(String target,Map<String,String> values){  super(target,values);}  }
class C{  public boolean trackSelectionAvailable(){  return mediaPlayerImpl.trackSelectionAvailable();}  }
class C{  public StatTrackingEventListener(long startTime,String prefix,String info,boolean logError,Map<String,String> tags){  this.startTime=startTime;  this.statPrefix=MorePreconditions.checkNotBlank(prefix);  this.info=info;  this.logError=logError;  ignoreExceptionPredicate=Predicates.alwaysFalse();  appendTags(tags);}  }
class C{  public static IStatus validateImportDeclaration(String name){  return validateImportDeclaration(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public static boolean isConcrete(Class<?> type){  int mod=type.getModifiers();  return (mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0;}  }
class C{  public void addTuner(Tuner tuner){  if (!mTuners.contains(tuner)) {    TunerConfiguration config=mTunerConfigurationModel.getTunerConfiguration(tuner.getTunerType(),tuner.getUniqueID());    try {      tuner.getTunerController().apply(config);      mTuners.add(tuner);      int index=mTuners.indexOf(tuner);      fireTableRowsInserted(index,index);      tuner.addTunerChangeListener(this);    } catch (    SourceException se) {      mLog.error("Couldn't apply tuner configuration to tuner - [" + tuner.getTunerType().name() + "] with id ["+ tuner.getUniqueID()+ "] - tuner will not be included");    }  }}  }
class C{  @Override public int hashCode(){  int result;  result=this.seriesKeys.hashCode();  result=29 * result + this.seriesList.hashCode();  return result;}  }
class C{  public static Map<String,Object> updateContentAssocMethod(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=FastMap.newInstance();  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  String contentIdFrom=(String)context.get("contentId");  String contentIdTo=(String)context.get("contentIdTo");  String contentId=(String)context.get("contentId");  String contentAssocTypeId=(String)context.get("contentAssocTypeId");  Timestamp fromDate=(Timestamp)context.get("fromDate");  GenericValue contentAssoc=null;  try {    contentAssoc=EntityQuery.use(delegator).from("ContentAssoc").where("contentId",contentId,"contentIdTo",contentIdTo,"contentAssocTypeId",contentAssocTypeId,"fromDate",fromDate).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Entity Error:" + e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocRetrievingError",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  if (contentAssoc == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocUpdateError",locale));  }  contentAssoc.put("contentAssocPredicateId",context.get("contentAssocPredicateId"));  contentAssoc.put("dataSourceId",context.get("dataSourceId"));  contentAssoc.set("thruDate",context.get("thruDate"));  contentAssoc.set("sequenceNum",context.get("sequenceNum"));  contentAssoc.put("mapKey",context.get("mapKey"));  String upperCoordinateStr=(String)context.get("upperCoordinate");  if (UtilValidate.isEmpty(upperCoordinateStr)) {    contentAssoc.put("upperCoordinate",null);  } else {    contentAssoc.setString("upperCoordinate",upperCoordinateStr);  }  String leftCoordinateStr=(String)context.get("leftCoordinate");  if (UtilValidate.isEmpty(leftCoordinateStr)) {    contentAssoc.put("leftCoordinate",null);  } else {    contentAssoc.setString("leftCoordinate",leftCoordinateStr);  }  GenericValue userLogin=(GenericValue)context.get("userLogin");  String userLoginId=(String)userLogin.get("userLoginId");  String lastModifiedByUserLogin=userLoginId;  Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();  contentAssoc.put("lastModifiedByUserLogin",lastModifiedByUserLogin);  contentAssoc.put("lastModifiedDate",lastModifiedDate);  String permissionStatus=null;  Map<String,Object> serviceInMap=FastMap.newInstance();  serviceInMap.put("userLogin",context.get("userLogin"));  serviceInMap.put("targetOperationList",targetOperationList);  serviceInMap.put("contentPurposeList",contentPurposeList);  serviceInMap.put("entityOperation",context.get("entityOperation"));  serviceInMap.put("contentIdTo",contentIdTo);  serviceInMap.put("contentIdFrom",contentIdFrom);  Map<String,Object> permResults=null;  try {    permResults=dispatcher.runSync("checkAssocPermission",serviceInMap);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem checking permissions","ContentServices");    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentPermissionNotGranted",locale));  }  permissionStatus=(String)permResults.get("permissionStatus");  if (permissionStatus != null && permissionStatus.equals("granted")) {    try {      contentAssoc.store();    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(e.getMessage());    }  } else {    String errorMsg=ContentWorker.prepPermissionErrorMsg(permResults);    return ServiceUtil.returnError(errorMsg);  }  return result;}  }
class C{  private static void hideDisposableMessage(final String messageKey){  MessageService.instance().hideDisposableMessage(messageKey);}  }
class C{  private boolean verifyVersion1(char[] cleartext,String hash) throws PasswordException {  String[] parts=split(hash);  int id=Integer.parseInt(parts[1],RADIX_HEX);  byte[] salt=Base64.decode(parts[2]);  HashAlgorithmConfig config=configCoder.decode(parts[3]);  byte[] hashBytes=Base64.decode(parts[4]);  HashAlgorithm hashAlgorithm;  try {    hashAlgorithm=hashAlgorithmRegistry.getAlgorithm(id);  } catch (  AlgorithmException e) {    throw new PasswordException(e);  }  byte[] hashedCleartext;  try {    hashedCleartext=hashAlgorithm.hash(cleartext,salt,config);  } catch (  AlgorithmException e) {    throw new PasswordException(e);  }  return slowEquals(hashedCleartext,hashBytes);}  }
class C{  public void printTable(TableEntry entry){  out.println("-- id: " + entry.getId() + "  title: "+ entry.getTitle().getPlainText());  out.println("<title>" + entry.getTitle().getPlainText() + "</title>");  out.println("<summary>" + entry.getSummary().getPlainText() + "</summary>");  out.println("<worksheet>" + entry.getWorksheet().getName() + "</worksheet>");  out.println("<header>" + entry.getHeader().getRow() + "</header>");  Data data=entry.getData();  out.println("<data> insertionMode=" + data.getInsertionMode().name() + " startRow="+ data.getStartIndex()+ " numRows="+ data.getNumberOfRows());  for (  Column col : data.getColumns()) {    out.println("     <column>" + col.getIndex() + " "+ col.getName()+ "</column>");  }  out.println("</data>");}  }
class C{  private static ParseResults parseMediaRange(String range){  ParseResults results=parseMimeType(range);  String q=results.params.get("q");  float f=toFloat(q,1);  if (isBlank(q) || f < 0 || f > 1) {    results.params.put("q","1");  }  return results;}  }
class C{  public final long readLong() throws IOException {  mPosition+=8;  d.readFully(w,0,8);  return (long)(w[7]) << 56 | (long)(w[6] & 0xff) << 48 | (long)(w[5] & 0xff) << 40 | (long)(w[4] & 0xff) << 32 | (long)(w[3] & 0xff) << 24 | (long)(w[2] & 0xff) << 16 | (long)(w[1] & 0xff) << 8 | (long)(w[0] & 0xff);}  }
class C{  public A first(){  return a;}  }
class C{  @Override public RegularTimePeriod next(){  if (this.year < Year.MAXIMUM_YEAR) {    return new Year(this.year + 1);  } else {    return null;  }}  }
class C{  public CWindowsMenu(final JFrame parent,final IViewSwitcher viewSwitcher){  super("Window");  setMnemonic("HK_MENU_WINDOW".charAt(0));  add(CActionProxy.proxy(new CSwitchToStandardView(viewSwitcher)));  add(CActionProxy.proxy(new CSwitchToDebugView(viewSwitcher)));  addSeparator();  add(new JMenuItem(new CShowHotkeysAction(parent)));  add(new JMenuItem(new CActionContextHelp(parent)));}  }
class C{  public Url(String url){  super(url);}  }
class C{  private static SpokenTextMomentData parseSpokenTextMoment(String momentId,Element momentElement) throws MissionParseException {  String textToSpeak=parseTextToSpeakElement(findSingleChildElementByTag(momentElement,ELEMENT_TEXT_TO_SPEAK));  String nextMomentId=getNextMomentId(momentElement);  ArrayList<String> fictionalProgress=parseMomentFictionalProgress(momentElement);  return new SpokenTextMomentData(momentId,nextMomentId,fictionalProgress,textToSpeak);}  }
class C{  public synchronized void replaceTemplates(CodeTemplate[] newTemplates){  templates.clear();  if (newTemplates != null) {    for (int i=0; i < newTemplates.length; i++) {      templates.add(newTemplates[i]);    }  }  sortTemplates();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:43.064 -0500",hash_original_method="3B748B9308D21E215FBA6A9497941AC3",hash_generated_method="25EC51EE2C87AF7A5ECF7D193BCE282F") @Override protected void finalize(){  try {    if (mWindow != null) {      if (mStackTrace != null) {        int len=mQuery.mSql.length();        StrictMode.onSqliteObjectLeaked("Finalizing a Cursor that has not been deactivated or closed. " + "database = " + mQuery.mDatabase.getPath() + ", table = "+ mEditTable+ ", query = "+ mQuery.mSql.substring(0,(len > 1000) ? 1000 : len),mStackTrace);      }      close();      SQLiteDebug.notifyActiveCursorFinalized();    } else {      if (false) {        Log.v(TAG,"Finalizing cursor on database = " + mQuery.mDatabase.getPath() + ", table = "+ mEditTable+ ", query = "+ mQuery.mSql);      }    }  }  finally {    super.finalize();  }}  }
class C{  private static int checkFormalTypeParameters(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkFormalTypeParameter(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkFormalTypeParameter(signature,pos);  }  return pos + 1;}  }
class C{  public void testGetTag(){  SeeedStudioRfidProtocol instance=new SeeedStudioRfidProtocol();  assertEquals("7800652CC9",instance.getTag(msgStandalone));}  }
class C{  public final static int hashLatLon(float lat,float lon){  if (lat == -0f)   lat=0f;  if (lon == -0f)   lon=0f;  int tmp=Float.floatToIntBits(lat);  int hash=(tmp << 5) | (tmp >> 27);  return hash ^ Float.floatToIntBits(lon);}  }
class C{  @Deprecated public String(byte[] data,int high){  this(data,high,0,data.length);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  IntDoublePair other=(IntDoublePair)obj;  return (this.first == other.first) && (this.second == other.second);}  }
class C{  public void run(Paragraph paragraph,String appId){  executor.execute(new RunApplication(paragraph,appId));}  }
class C{  public static String replaceShortname(String input,boolean removeIfUnsupported){  Matcher matcher=SHORTNAME_PATTERN.matcher(input);  boolean supported=Build.VERSION.SDK_INT >= 16;  while (matcher.find()) {    String unicode=_shortNameToUnicode.get(matcher.group(1));    if (unicode == null) {      continue;    }    if (supported) {      input=input.replace(matcher.group(1),unicode);    } else     if (!supported && removeIfUnsupported) {      input=input.replace(matcher.group(1),"");    }  }  return input;}  }
class C{  public void addDecorator(final OperatorDrawDecorator decorator){  if (decorator == null) {    throw new IllegalArgumentException("decorator must not be null!");  }  operatorDecorators.add(decorator);}  }
class C{  public static QueryAssociatedCapabilityForFileSystemResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryAssociatedCapabilityForFileSystemResponse object=new QueryAssociatedCapabilityForFileSystemResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryAssociatedCapabilityForFileSystemResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryAssociatedCapabilityForFileSystemResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(VasaAssociationObject.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(VasaAssociationObject.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((VasaAssociationObject[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(VasaAssociationObject.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected Page(Wikipedia wiki,int pageID) throws WikiApiException {  this.wiki=wiki;  this.pageDAO=new PageDAO(wiki);  fetchByPageId(pageID);}  }
class C{  public PrefixCompletionQuery(Analyzer analyzer,Term term,BitsProducer filter){  super(term,filter);  if (!(analyzer instanceof CompletionAnalyzer)) {    this.analyzer=new CompletionAnalyzer(analyzer);  } else {    this.analyzer=(CompletionAnalyzer)analyzer;  }}  }
class C{  private boolean isUnconfirmed(){  int no=DB.getSQLValue(null,"SELECT COUNT(*) FROM M_InOutLineConfirm WHERE AD_Client_ID=?",Env.getAD_Client_ID(Env.getCtx()));  if (no > 0)   return true;  no=DB.getSQLValue(null,"SELECT COUNT(*) FROM M_MovementLineConfirm WHERE AD_Client_ID=?",Env.getAD_Client_ID(Env.getCtx()));  return no > 0;}  }
class C{  protected void rollback(){  final ManagedJournal journal=resourceManager.getLiveJournal();  journal.rollback();}  }
class C{  private void purgeOldPages(){  Iterator<DataPageMain> iter=_dataPages.values().iterator();  while (iter.hasNext()) {    DataPageMain dpMain=iter.next();    if (dpMain != _rootPage) {      iter.remove();      if (_dataPages.size() <= MAX_CACHE_SIZE) {        break;      }    }  }}  }
class C{  protected Rectangle computePopupBounds(int px,int py,int pw,int ph){  Toolkit toolkit=Toolkit.getDefaultToolkit();  Rectangle screenBounds;  GraphicsConfiguration gc=comboBox.getGraphicsConfiguration();  Point p=new Point();  SwingUtilities.convertPointFromScreen(p,comboBox);  if (gc != null) {    Insets screenInsets=toolkit.getScreenInsets(gc);    screenBounds=gc.getBounds();    screenBounds.width-=(screenInsets.left + screenInsets.right);    screenBounds.height-=(screenInsets.top + screenInsets.bottom);    screenBounds.x+=(p.x + screenInsets.left);    screenBounds.y+=(p.y + screenInsets.top);  } else {    screenBounds=new Rectangle(p,toolkit.getScreenSize());  }  Rectangle rect=new Rectangle(px,py,pw,ph);  if (py + ph > screenBounds.y + screenBounds.height && ph < screenBounds.height) {    rect.y=-rect.height;  }  return rect;}  }
class C{  public static void main(String[] args){  Adempiere.startup(true);  int C_Country_ID=216;  MCountry country=new MCountry(Env.getCtx(),C_Country_ID,null);  MRegion temp=new MRegion(country,"\u5317\u6d77\u9053");  temp.setDescription("\u5317\u6d77\u9053(Hokkaido)");  temp.saveEx();  temp=new MRegion(country,"\u9752\u68ee\u770c");  temp.setDescription("\u9752\u68ee\u770c(Aomori)");  temp.saveEx();  temp=new MRegion(country,"\u5ca9\u624b\u770c");  temp.setDescription("\u5ca9\u624b\u770c(Iwate)");  temp.saveEx();  temp=new MRegion(country,"\u5bae\u57ce\u770c");  temp.setDescription("\u5bae\u57ce\u770c(Miyagi)");  temp.saveEx();  temp=new MRegion(country,"\u79cb\u7530\u770c");  temp.setDescription("\u79cb\u7530\u770c(Akita)");  temp.saveEx();  temp=new MRegion(country,"\u5c71\u5f62\u770c");  temp.setDescription("\u5c71\u5f62\u770c(Yamagata)");  temp.saveEx();  temp=new MRegion(country,"\u798f\u5cf6\u770c");  temp.setDescription("\u798f\u5cf6\u770c(Fukushima)");  temp.saveEx();  temp=new MRegion(country,"\u8328\u57ce\u770c");  temp.setDescription("\u8328\u57ce\u770c(Ibaraki)");  temp.saveEx();  temp=new MRegion(country,"\u7fa4\u99ac\u770c");  temp.setDescription("\u7fa4\u99ac\u770c(Gunma)");  temp.saveEx();  temp=new MRegion(country,"\u57fc\u7389\u770c");  temp.setDescription("\u57fc\u7389\u770c(Saitama)");  temp.saveEx();  temp=new MRegion(country,"\u5343\u8449\u770c");  temp.setDescription("\u5343\u8449\u770c(Chiba)");  temp.saveEx();  temp=new MRegion(country,"\u6771\u4eac\u90fd");  temp.setDescription("\u6771\u4eac\u90fd(Tokyo)");  temp.saveEx();  temp=new MRegion(country,"\u795e\u5948\u5ddd\u770c");  temp.setDescription("\u795e\u5948\u5ddd\u770c(Kanagawa)");  temp.saveEx();  temp=new MRegion(country,"\u65b0\u6f5f\u770c");  temp.setDescription("\u65b0\u6f5f\u770c(Niigata)");  temp.saveEx();  temp=new MRegion(country,"\u5bcc\u5c71\u770c");  temp.setDescription("\u5bcc\u5c71\u770c(Toyama)");  temp.saveEx();  temp=new MRegion(country,"\u77f3\u5ddd\u770c");  temp.setDescription("\u77f3\u5ddd\u770c(Ishikawa)");  temp.saveEx();  temp=new MRegion(country,"\u798f\u4e95\u770c");  temp.setDescription("\u798f\u4e95\u770c(Fukui)");  temp.saveEx();  temp=new MRegion(country,"\u5c71\u68a8\u770c");  temp.setDescription("\u5c71\u68a8\u770c(Yamanashi)");  temp.saveEx();  temp=new MRegion(country,"\u5c90\u961c\u770c");  temp.setDescription("\u5c90\u961c\u770c(Gifu)");  temp.saveEx();  temp=new MRegion(country,"\u9759\u5ca1\u770c");  temp.setDescription("\u9759\u5ca1\u770c(Shizuoka)");  temp.saveEx();  temp=new MRegion(country,"\u611b\u77e5\u770c");  temp.setDescription("\u611b\u77e5\u770c(Aichi)");  temp.saveEx();  temp=new MRegion(country,"\u4e09\u91cd\u770c");  temp.setDescription("\u4e09\u91cd\u770c(Mie)");  temp.saveEx();  temp=new MRegion(country,"\u6ecb\u8cc0\u770c");  temp.setDescription("\u6ecb\u8cc0\u770c(Siga)");  temp.saveEx();  temp=new MRegion(country,"\u4eac\u90fd\u5e9c");  temp.setDescription("\u4eac\u90fd\u5e9c(Kyoto)");  temp.saveEx();  temp=new MRegion(country,"\u5927\u962a\u5e9c");  temp.setDescription("\u5927\u962a\u5e9c(Osaka)");  temp.saveEx();  temp=new MRegion(country,"\u5175\u5eab\u770c");  temp.setDescription("\u5175\u5eab\u770c(Hyogo)");  temp.saveEx();  temp=new MRegion(country,"\u5948\u826f\u770c");  temp.setDescription("\u5948\u826f\u770c(Nara)");  temp.saveEx();  temp=new MRegion(country,"\u548c\u6b4c\u5c71\u770c");  temp.setDescription("\u548c\u6b4c\u5c71\u770c(Wakayama)");  temp.saveEx();  temp=new MRegion(country,"\u9ce5\u53d6\u770c");  temp.setDescription("\u9ce5\u53d6\u770c(Tottori)");  temp.saveEx();  temp=new MRegion(country,"\u5cf6\u6839\u770c");  temp.setDescription("\u5cf6\u6839\u770c(Shimane)");  temp.saveEx();  temp=new MRegion(country,"\u5ca1\u5c71\u770c");  temp.setDescription("\u5ca1\u5c71\u770c(Okayama)");  temp.saveEx();  temp=new MRegion(country,"\u5e83\u5cf6\u770c");  temp.setDescription("\u5e83\u5cf6\u770c(Hiroshima)");  temp.saveEx();  temp=new MRegion(country,"\u5c71\u53e3\u770c");  temp.setDescription("\u5c71\u53e3\u770c(Yamaguchi)");  temp.saveEx();  temp=new MRegion(country,"\u5fb3\u5cf6\u770c");  temp.setDescription("\u5fb3\u5cf6\u770c(Tokushima)");  temp.saveEx();  temp=new MRegion(country,"\u9999\u5ddd\u770c");  temp.setDescription("\u9999\u5ddd\u770c(Kagawa)");  temp.saveEx();  temp=new MRegion(country,"\u611b\u5a9b\u770c");  temp.setDescription("\u611b\u5a9b\u770c(Ehime)");  temp.saveEx();  temp=new MRegion(country,"\u9ad8\u77e5\u770c");  temp.setDescription("\u9ad8\u77e5\u770c(Kouchi)");  temp.saveEx();  temp=new MRegion(country,"\u798f\u5ca1\u770c");  temp.setDescription("\u798f\u5ca1\u770c(Fukuoka)");  temp.saveEx();  temp=new MRegion(country,"\u4f50\u8cc0\u770c");  temp.setDescription("\u4f50\u8cc0\u770c(Saga)");  temp.saveEx();  temp=new MRegion(country,"\u9577\u5d0e\u770c");  temp.setDescription("\u9577\u5d0e\u770c(Nagasaki)");  temp.saveEx();  temp=new MRegion(country,"\u718a\u672c\u770c");  temp.setDescription("\u718a\u672c\u770c(Kumamoto)");  temp.saveEx();  temp=new MRegion(country,"\u5927\u5206\u770c");  temp.setDescription("\u5927\u5206\u770c(Ohita)");  temp.saveEx();  temp=new MRegion(country,"\u5bae\u5d0e\u770c");  temp.setDescription("\u5bae\u5d0e\u770c(Miyasaki)");  temp.saveEx();  temp=new MRegion(country,"\u9e7f\u5150\u5cf6\u770c");  temp.setDescription("\u9e7f\u5150\u5cf6\u770c(Kagoshima)");  temp.saveEx();  temp=new MRegion(country,"\u6c96\u7e04\u770c");  temp.setDescription("\u6c96\u7e04\u770c(Okinawa)");  temp.saveEx();}  }
class C{  public static IndexKeyRange around(IndexRowType indexRowType,IndexBound lo){  if (lo == null) {    throw new IllegalArgumentException("IndexBound argument must not be null");  }  return new IndexKeyRange(indexRowType,lo,true,null,false,IndexKind.SPATIAL_COORDS);}  }
class C{  @Interruptible public static String longAsHexString(long number){  char[] buf=new char[18];  int index=18;  while (--index > 1) {    int digit=(int)(number & 0x000000000000000fL);    buf[index]=digit <= 9 ? (char)('0' + digit) : (char)('a' + digit - 10);    number>>=4;  }  buf[index--]='x';  buf[index]='0';  return new String(buf);}  }
class C{  public static MDDOrder copyFrom(MDDOrder from,Timestamp dateDoc,int C_DocTypeTarget_ID,boolean isSOTrx,boolean counter,boolean copyASI,String trxName){  MDDOrder to=new MDDOrder(from.getCtx(),0,trxName);  to.set_TrxName(trxName);  PO.copyValues(from,to,from.getAD_Client_ID(),from.getAD_Org_ID());  to.set_ValueNoCheck("DD_Order_ID",I_ZERO);  to.set_ValueNoCheck("DocumentNo",null);  to.setDocStatus(DOCSTATUS_Drafted);  to.setDocAction(DOCACTION_Complete);  to.setC_DocType_ID(0);  to.setIsSOTrx(isSOTrx);  to.setIsSelected(false);  to.setDateOrdered(dateDoc);  to.setDatePromised(dateDoc);  to.setDatePrinted(null);  to.setIsPrinted(false);  to.setIsApproved(false);  to.setIsDelivered(false);  to.setPosted(false);  to.setProcessed(false);  if (counter)   to.setRef_Order_ID(from.getDD_Order_ID()); else   to.setRef_Order_ID(0);  if (!to.save(trxName))   throw new IllegalStateException("Could not create Order");  if (counter)   from.setRef_Order_ID(to.getDD_Order_ID());  if (to.copyLinesFrom(from,counter,copyASI) == 0)   throw new IllegalStateException("Could not create Order Lines");  return to;}  }
class C{  private void processCmapTable(Font font){  CmapTable cmap=font.getCmapTable();  if (cmap != null) {    if (forceAscii) {      cmapFmt=cmap.getCmapFormat(Table.platformMacintosh,Table.encodingRoman);      platformID=PLATFORM_MACINTOSH;      encodingID=ENCODING_ROMAN;    } else {      cmapFmt=cmap.getCmapFormat(Table.platformMicrosoft,Table.encodingUGL);      if (cmapFmt == null) {        cmapFmt=cmap.getCmapFormat(Table.platformMicrosoft,Table.encodingUndefined);        platformID=PLATFORM_MICROSOFT;        encodingID=ENCODING_UNDEFINED;      } else {        platformID=PLATFORM_MICROSOFT;        encodingID=ENCODING_UGL;      }    }  }  if (cmapFmt == null) {    throw new RuntimeException("Cannot find a suitable cmap table");  }}  }
class C{  public void addSeparator(Dimension size){  JToolBar.Separator s=new JToolBar.Separator(size);  add(s);}  }
class C{  public static void serialize(Node node,Writer w){  serialize(asString(node),w);}  }
class C{  public static void transformBooleanField(){  transformedBooleanField++;}  }
class C{  public Clock(int format){  this(true,format);}  }
class C{  public int print(Graphics graphics,PageFormat pageFormat,int pageIndex){  double scale=1.0;  Graphics2D graphics2D;  View rootView;  graphics2D=(Graphics2D)graphics;  m_PrintPane.setSize((int)pageFormat.getImageableWidth(),Integer.MAX_VALUE);  m_PrintPane.validate();  rootView=m_PrintPane.getUI().getRootView(m_PrintPane);  if ((m_ScaleWidthToFit) && (m_PrintPane.getMinimumSize().getWidth() > pageFormat.getImageableWidth())) {    scale=pageFormat.getImageableWidth() / m_PrintPane.getMinimumSize().getWidth();    graphics2D.scale(scale,scale);  }  graphics2D.setClip((int)(pageFormat.getImageableX() / scale),(int)(pageFormat.getImageableY() / scale),(int)(pageFormat.getImageableWidth() / scale),(int)(pageFormat.getImageableHeight() / scale));  if (pageIndex > m_CurrentPage) {    m_CurrentPage=pageIndex;    m_PageStartY+=m_PageEndY;    m_PageEndY=graphics2D.getClipBounds().getHeight();  }  graphics2D.translate(graphics2D.getClipBounds().getX(),graphics2D.getClipBounds().getY());  Rectangle allocation=new Rectangle(0,(int)-m_PageStartY,(int)(m_PrintPane.getMinimumSize().getWidth()),(int)(m_PrintPane.getPreferredSize().getHeight()));  if (printView(graphics2D,allocation,rootView)) {    return Printable.PAGE_EXISTS;  } else {    m_PageStartY=0;    m_PageEndY=0;    m_CurrentPage=-1;    return Printable.NO_SUCH_PAGE;  }}  }
class C{  public SimpleCountingIdlingResource(String resourceName){  if (resourceName == null) {    throw new NullPointerException();  }  mResourceName="ok";}  }
class C{  OneStepIteratorForward(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);  int firstStepPos=OpMap.getFirstChildPos(opPos);  m_axis=WalkerFactory.getAxisFromStep(compiler,firstStepPos);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.345 -0500",hash_original_method="ADCC890B33FED57666957B09D938712A",hash_generated_method="067860CEF2731268BF82E79DD06A1655") public static void cursorLongToContentValues(Cursor cursor,String field,ContentValues values){  cursorLongToContentValues(cursor,field,values,field);}  }
class C{  public void submitCloudletList(List<? extends Cloudlet> list){  getCloudletList().addAll(list);}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  ObjectStreamField(String name,String signature,boolean unshared){  if (name == null) {    throw new NullPointerException();  }  this.name=name;  this.signature=signature.intern();  this.unshared=unshared;  field=null;switch (signature.charAt(0)) {case 'Z':    type=Boolean.TYPE;  break;case 'B':type=Byte.TYPE;break;case 'C':type=Character.TYPE;break;case 'S':type=Short.TYPE;break;case 'I':type=Integer.TYPE;break;case 'J':type=Long.TYPE;break;case 'F':type=Float.TYPE;break;case 'D':type=Double.TYPE;break;case 'L':case '[':type=Object.class;break;default :throw new IllegalArgumentException("illegal signature");}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.182 -0500",hash_original_method="C4C41F7CADA2DF58870780D8F849030A",hash_generated_method="3FC899A81DEB4320CE19F932A798DED6") public int valueAt(int index){  return mValues[index];}  }
class C{  public ContinuousSigmoidalRule(){  super();}  }
class C{  public void test_getBitsFromByteArray_01(){  final byte[] b=new byte[4];  assertEquals(0x00000000,getBits(b,0,0));  assertEquals(0x00000000,getBits(b,0,1));  assertEquals(0x00000000,getBits(b,0,31));  assertEquals(0x00000000,getBits(b,0,32));}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.FUNCTION_EXPRESSION___GET_ANNOTATIONS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == Expression.class) {switch (baseOperationID) {case N4JSPackage.EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:  return N4JSPackage.FUNCTION_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET;default :return -1;}}if (baseClass == AnnotableExpression.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_EXPRESSION___GET_ANNOTATIONS:return N4JSPackage.FUNCTION_EXPRESSION___GET_ANNOTATIONS;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.FUNCTION_EXPRESSION___GET_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeNamespaceAliases(this);}  }
class C{  public TranslatableComponent(String translate,Object... with){  this.translate=translate;  List<BaseComponent> temp=new ArrayList<>(with.length);  for (  Object w : with) {    if ((w instanceof String)) {      temp.add(new TextComponent((String)w));    } else {      temp.add((BaseComponent)w);    }  }  this.setWith(temp);}  }
class C{  protected void calculateStatesPartialsPruning(int[] states1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3){  int u=0;  int v=0;  int w=0;  for (int l=0; l < matrixCount; l++) {    for (int k=0; k < patternCount; k++) {      int state1=states1[k];      if (state1 < 4) {        double sum;        sum=matrices2[w] * partials2[v];        sum+=matrices2[w + 1] * partials2[v + 1];        sum+=matrices2[w + 2] * partials2[v + 2];        sum+=matrices2[w + 3] * partials2[v + 3];        partials3[u]=matrices1[w + state1] * sum;        u++;        sum=matrices2[w + 4] * partials2[v];        sum+=matrices2[w + 5] * partials2[v + 1];        sum+=matrices2[w + 6] * partials2[v + 2];        sum+=matrices2[w + 7] * partials2[v + 3];        partials3[u]=matrices1[w + 4 + state1] * sum;        u++;        sum=matrices2[w + 8] * partials2[v];        sum+=matrices2[w + 9] * partials2[v + 1];        sum+=matrices2[w + 10] * partials2[v + 2];        sum+=matrices2[w + 11] * partials2[v + 3];        partials3[u]=matrices1[w + 8 + state1] * sum;        u++;        sum=matrices2[w + 12] * partials2[v];        sum+=matrices2[w + 13] * partials2[v + 1];        sum+=matrices2[w + 14] * partials2[v + 2];        sum+=matrices2[w + 15] * partials2[v + 3];        partials3[u]=matrices1[w + 12 + state1] * sum;        u++;        v+=4;      } else {        double sum;        sum=matrices2[w] * partials2[v];        sum+=matrices2[w + 1] * partials2[v + 1];        sum+=matrices2[w + 2] * partials2[v + 2];        sum+=matrices2[w + 3] * partials2[v + 3];        partials3[u]=sum;        u++;        sum=matrices2[w + 4] * partials2[v];        sum+=matrices2[w + 5] * partials2[v + 1];        sum+=matrices2[w + 6] * partials2[v + 2];        sum+=matrices2[w + 7] * partials2[v + 3];        partials3[u]=sum;        u++;        sum=matrices2[w + 8] * partials2[v];        sum+=matrices2[w + 9] * partials2[v + 1];        sum+=matrices2[w + 10] * partials2[v + 2];        sum+=matrices2[w + 11] * partials2[v + 3];        partials3[u]=sum;        u++;        sum=matrices2[w + 12] * partials2[v];        sum+=matrices2[w + 13] * partials2[v + 1];        sum+=matrices2[w + 14] * partials2[v + 2];        sum+=matrices2[w + 15] * partials2[v + 3];        partials3[u]=sum;        u++;        v+=4;      }    }    w+=matrixSize;  }}  }
class C{  public static void assertNoBillingEvents(){  assertThat(getBillingEvents()).isEmpty();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case FunctionblockPackage.FUNCTION_BLOCK__CONFIGURATION:    return basicSetConfiguration(null,msgs);case FunctionblockPackage.FUNCTION_BLOCK__STATUS:  return basicSetStatus(null,msgs);case FunctionblockPackage.FUNCTION_BLOCK__FAULT:return basicSetFault(null,msgs);case FunctionblockPackage.FUNCTION_BLOCK__EVENTS:return ((InternalEList<?>)getEvents()).basicRemove(otherEnd,msgs);case FunctionblockPackage.FUNCTION_BLOCK__OPERATIONS:return ((InternalEList<?>)getOperations()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void write(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(bytes.length,byteOffset,byteCount);  if (byteCount == 0) {    return;  }  try {    while (byteCount > 0) {      int bytesWritten=Libcore.os.write(fd,bytes,byteOffset,byteCount);      byteCount-=bytesWritten;      byteOffset+=bytesWritten;    }  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  public String createMonoVdcId(){  return String.format("%1$s%2$s",VDC_ID_PREFIX,nextVdcId());}  }
class C{  @DELETE public boolean delete(@PathParam(PROJECT_PARAM_NAME) String projectId,@PathParam(ANNOTATION_PARAM_NAME) String annotationId){  return delegate.delete(userContext,new AnnotationPK(userContext.getCustomerId(),projectId,annotationId));}  }
class C{  static public String[] concatTwoStringArray(String[] first,String[] second){  List<String> both=new ArrayList<String>(first.length + second.length);  Collections.addAll(both,first);  Collections.addAll(both,second);  return both.toArray(new String[both.size()]);}  }
class C{  private void wait(int s){  try {    Thread.sleep(s * 1000);  } catch (  Exception e) {    output.error("Exception: " + e);  }}  }
class C{  protected void updateCursorForDragEnd(){  getShell().setCursor(Raptor.getInstance().getCursorRegistry().getDefaultCursor());}  }
class C{  @Surrogate private void onArrowImpact(CallbackInfo ci,Vec3d vecA,Vec3d vecB,RayTraceResult hitResult){  this.arrowImpact(ci,hitResult);}  }
class C{  @Override public void onDismissed(Snackbar snackbar,@DismissEvent int event){  if (callback != null) {    callback.onDismissed(snackbar,event);  }}  }
class C{  public static Bitmap loadBitmap(String fileName,int minW,int minH) throws ImageLoadException {  return loadBitmapOptimized(new FileSource(fileName),minW,minH);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  public BaseLineAndCompareQueryPerfJUnitTest(){}  }
class C{  public int score(){  return score;}  }
class C{  public FatalError(JCDiagnostic d,Throwable t){  super(d.toString(),t);}  }
class C{  private void doGzipResponse(final HttpServletRequest req,final HttpServletResponse response,final FilterChain chain) throws IOException, ServletException {  LOG.debug("Applying gzip on resource: " + req.getRequestURI());  response.setHeader(HttpHeader.CONTENT_ENCODING.toString(),"gzip");  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final CountingOutputStream countingStream=new CountingOutputStream(new GZIPOutputStream(new BufferedOutputStream(baos)));  final HttpServletResponseWrapper wrappedResponse=new RedirectedStreamServletResponseWrapper(countingStream,response);  chain.doFilter(req,wrappedResponse);  countingStream.close();  response.setContentLength(countingStream.getCount());  if (countingStream.getCount() > 0) {    IOUtils.write(baos.toByteArray(),response.getOutputStream());  }}  }
class C{  public void fillRect(int x,int y,int width,int height){  impl.fillRect(nativeGraphics,xTranslate + x,yTranslate + y,width,height);}  }
class C{  public static void clearCache(){  cache.clear();}  }
class C{  private void checkSearch(String inputGraph,String outputGraph){  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  GraphSearch search=new Cpc(independence);  Graph resultGraph=search.search();  Graph trueGraph=GraphConverter.convert(outputGraph);  resultGraph=GraphUtils.replaceNodes(resultGraph,trueGraph.getNodes());  if (!(resultGraph.equals(trueGraph))) {    fail();  }}  }
class C{  protected void validateScript(){  try {    dmlTranslator.validateParseTree(dmlProgram);  } catch (  LanguageException e) {    throw new MLContextException("Exception occurred while validating script",e);  }catch (  ParseException e) {    throw new MLContextException("Exception occurred while validating script",e);  }catch (  IOException e) {    throw new MLContextException("Exception occurred while validating script",e);  }}  }
class C{  public ParetoDistr(Random seed,double shape,double location){  this(shape,location);  numGen.reseedRandomGenerator(seed.nextLong());}  }
class C{  @Override public CurrentCycleViewHolder newViewHolder(ViewGroup viewGroup){  View currentCycleView=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.data_current_cycle,viewGroup,false);  return new CurrentCycleViewHolder(currentCycleView);}  }
class C{  public boolean createNewBlock(){  rawData.clear();  writeBlockComment("building block data file");  this.writeBlockData("BlockVersion","" + BuildingBlock.version);  writeBlockComment("#Write the version number just in case...");  this.writeBlockData("Version","MAM0");  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getPR();}  }
class C{  public boolean remove(Object key){  if (key == null) {    String msg=Logging.getMessage("nullValue.KeyIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Entry entry=this.entryMap.remove(key);  if (entry != null) {    this.doRemove(entry);  }  return entry != null;}  }
class C{  private void calcEntryCountIncludingStacks(List<BarEntry> yVals){  mEntryCountStacks=0;  for (int i=0; i < yVals.size(); i++) {    float[] vals=yVals.get(i).getVals();    if (vals == null)     mEntryCountStacks++; else     mEntryCountStacks+=vals.length;  }}  }
class C{  public boolean hasDefClearPathFromMethodEntry(Use duVertex){  if (!graph.containsVertex(duVertex))   throw new IllegalArgumentException("vertex not in graph");  if (duVertex.isLocalDU())   return false;  return hasDefClearPathFromMethodEntry(duVertex,duVertex,new HashSet<BytecodeInstruction>());}  }
class C{  @Override public void validate(final IDescription vd){  if (vd.hasFacet(SIZE)) {    final IExpression size=vd.getFacetExpr(SIZE);    IExpression fill=vd.getFacetExpr(FILL_WITH);    if (fill == null) {      fill=IExpressionFactory.NIL_EXPR;    }    final IType<?> type=vd.getType();switch (type.id()) {case IType.LIST:      if (size.getType().id() != IType.INT) {        vd.error("Facet 'size:' must be of type int",IGamlIssue.WRONG_TYPE,SIZE,"int");        return;      }    IExpression init=GAML.getExpressionFactory().createOperator("list_with",vd,null,size,fill);  vd.setFacet(INIT,init);break;case IType.MATRIX:if (size.getType().id() != IType.POINT) {vd.error("Facet 'size:' must be of type point",IGamlIssue.WRONG_TYPE,SIZE,"point");return;}init=GAML.getExpressionFactory().createOperator("matrix_with",vd,null,size,fill);vd.setFacet(INIT,init);break;default :vd.error("Facet 'size:' can only be used for lists and matrices",IGamlIssue.UNKNOWN_FACET,SIZE);return;}} else if (vd.hasFacet(FILL_WITH)) {vd.error("Facet 'size:' missing. A container cannot be filled if no size is provided",IGamlIssue.MISSING_FACET,FILL_WITH);return;}super.validate(vd);}  }
class C{  private int center(Component c,Insets insets,int x,boolean trailing){  Dimension pref=c.getPreferredSize();  int width=pref.width;  if (c instanceof JButton && ((JButton)c).getIcon() != null) {    width=((JButton)c).getIcon().getIconWidth();  }  if (trailing) {    x-=width;  }  int y=1;  c.setBounds(x,y,pref.width,pref.height);  if (pref.width > 0) {    if (!trailing) {      return x + width;    }  }  return x;}  }
class C{  @Override public void clear(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (DEBUG) {      Log.d(LOG_TAG,"Memory cache cleared");    }  }}  }
class C{  public boolean includeTab(GridController gc,APanel aPanel,GridSynchronizer sync){  GridController detail=gc;  detail.setDetailGrid(true);  detail.addMouseListener(detail);  detail.enableEvents(AWTEvent.HIERARCHY_EVENT_MASK + AWTEvent.MOUSE_EVENT_MASK);  vPanel.includeTab(detail);  gc.setGCParent(this);  gc.getGCParent().setPreferredSize(vPanel.getPreferredSize());  synchronizerList.add(sync);  return true;}  }
class C{  private void initialize(){  this.setSize(300,200);  this.setResizable(false);  this.setContentPane(getJContentPane());}  }
class C{  public File mapUriToFile(Uri uri){  assertBackgroundThread();switch (getUriType(uri)) {case URI_TYPE_FILE:    return new File(uri.getPath());case URI_TYPE_CONTENT:{    Cursor cursor=contentResolver.query(uri,LOCAL_FILE_PROJECTION,null,null,null);    if (cursor != null) {      try {        int columnIndex=cursor.getColumnIndex(LOCAL_FILE_PROJECTION[0]);        if (columnIndex != -1 && cursor.getCount() > 0) {          cursor.moveToFirst();          String realPath=cursor.getString(columnIndex);          if (realPath != null) {            return new File(realPath);          }        }      }  finally {        cursor.close();      }    }  }}return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION_CLASS_CONTENT___COMMENT_1:    getComment_1().clear();  return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___CLASS_DEFINITION_1:getClassDefinition_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___POSITION_1:getPosition_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___DISPLAY_COLOR_1:getDisplayColor_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___INVARIANT_1:getInvariant_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___SOFTWARE_PATTERN_1:getSoftwarePattern_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___DEPEND_1:getDepend_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___SINGLE_ASSOCIATION_END_1:getSingleAssociationEnd_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___STATE_MACHINE_1:getStateMachine_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___ATTRIBUTE_1:getAttribute_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___ASSOCIATION_1:getAssociation_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___INLINE_ASSOCIATION_1:getInlineAssociation_1().clear();return;case UmplePackage.ASSOCIATION_CLASS_CONTENT___EXTRA_CODE_1:getExtraCode_1().clear();return;}super.eUnset(featureID);}  }
class C{  public ColumnList addCounter(ICounter counter){  return this.addCounter(counter.family(),counter.qualifier(),counter.increment());}  }
class C{  public XMLView(XMLContext context,Element elem){  super(elem);  this.context=context;}  }
class C{  public static void logReadTaskOutOfMemoryError(final Logger logger,final Task<Revision> task,final OutOfMemoryError e){  if (task != null) {    logger.logError(Level.WARNING,"Error while reading a task: " + task.toString(),e);  } else {    logger.logError(Level.WARNING,"Error while reading an unknown task",e);  }}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  @Override public int compareTo(CharsRef other){  if (this == other)   return 0;  final char[] aChars=this.chars;  int aUpto=this.offset;  final char[] bChars=other.chars;  int bUpto=other.offset;  final int aStop=aUpto + Math.min(this.length,other.length);  while (aUpto < aStop) {    int aInt=aChars[aUpto++];    int bInt=bChars[bUpto++];    if (aInt > bInt) {      return 1;    } else     if (aInt < bInt) {      return -1;    }  }  return this.length - other.length;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.779 -0500",hash_original_method="25FD33E3054230667E9A8F92C1B17418",hash_generated_method="4F53B863B4D61FA5B305775BC5B25700") public ReferencesParser(String references){  super(references);}  }
class C{  public void addCluster(String clusterId){  if (!clusters.contains(clusterId)) {    clusters.add(clusterId);  }}  }
class C{  public boolean isDefaultRailroadName(){  return this.getRailRoadName().equals(Bundle.getMessage("DefaultRailroadName"));}  }
class C{  public AmplifierType addAmplifierType(String enumName,String name){  return EnumHelper.addEnum(AmplifierType.class,enumName,new Class[]{String.class},name);}  }
class C{  public void hyperlinkUpdate(HyperlinkEvent e){  if (e.getURL().getProtocol() == null || (!e.getURL().getProtocol().equals("http") && !e.getURL().getProtocol().equals("mailto"))) {    return;  }  try {    Desktop desktop=Desktop.getDesktop();    if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {      URI uri=e.getURL().toURI();      if (e.getURL().getProtocol().equals("http")) {        desktop.browse(uri);      } else       if (e.getURL().getProtocol().equals("mailto")) {        desktop.mail(uri);      }    }  } catch (  Exception x) {    x.printStackTrace();  }}  }
class C{  public void onMouseOver(){  if (pressed) {    return;  }  if (enabled && hasVisibleItems) {    element.setClassName(css.menuBarItemOver());    hovered=true;  }}  }
class C{  public void write() throws IOException, BadLocationException {  styleNameMapping=new Hashtable<String,String>();  writeStartTag("<html>");  writeHeader();  writeBody();  writeEndTag("</html>");}  }
class C{  public FloatMatrix put(FloatMatrix rindices,FloatMatrix cindices,FloatMatrix v){  return put(rindices.findIndices(),cindices.findIndices(),v);}  }
class C{  public TunnelProxy(int threads,int cperthread,int port) throws IOException {  schan=ServerSocketChannel.open();  InetSocketAddress addr=new InetSocketAddress(port);  schan.socket().bind(addr);  this.threads=threads;  this.cperthread=cperthread;  servers=new Server[threads];  for (int i=0; i < threads; i++) {    servers[i]=new Server(schan,cperthread);    servers[i].start();  }}  }
class C{  public PDFObject find(String key) throws IOException {  return find(root,key);}  }
class C{  private SchemaFactory _newFactory(String schemaLanguage){  SchemaFactory sf;  String propertyName=SERVICE_CLASS.getName() + ":" + schemaLanguage;  try {    if (debug)     debugPrintln("Looking up system property '" + propertyName + "'");    String r=System.getProperty(propertyName);    if (r != null && r.length() > 0) {      if (debug)       debugPrintln("The value is '" + r + "'");      sf=createInstance(r);      if (sf != null)       return sf;    } else     if (debug) {      debugPrintln("The property is undefined.");    }  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    if (debug) {      debugPrintln("failed to look up system property '" + propertyName + "'");      t.printStackTrace();    }  }  String javah=System.getProperty("java.home");  String configFile=javah + File.separator + "lib"+ File.separator+ "jaxp.properties";  String factoryClassName=null;  try {    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          File f=new File(configFile);          firstTime=false;          if (f.exists()) {            if (debug)             debugPrintln("Read properties file " + f);            cacheProps.load(new FileInputStream(f));          }        }      }    }    factoryClassName=cacheProps.getProperty(propertyName);    if (debug)     debugPrintln("found " + factoryClassName + " in $java.home/jaxp.properties");    if (factoryClassName != null) {      sf=createInstance(factoryClassName);      if (sf != null) {        return sf;      }    }  } catch (  Exception ex) {    if (debug) {      ex.printStackTrace();    }  }  for (  URL resource : createServiceFileIterator()) {    if (debug)     debugPrintln("looking into " + resource);    try {      sf=loadFromServicesFile(schemaLanguage,resource.toExternalForm(),resource.openStream());      if (sf != null)       return sf;    } catch (    IOException e) {      if (debug) {        debugPrintln("failed to read " + resource);        e.printStackTrace();      }    }  }  if (schemaLanguage.equals(XMLConstants.W3C_XML_SCHEMA_NS_URI) || schemaLanguage.equals(W3C_XML_SCHEMA10_NS_URI)) {    if (debug)     debugPrintln("attempting to use the platform default XML Schema 1.0 validator");    return createInstance("org.apache.xerces.jaxp.validation.XMLSchemaFactory");  } else   if (schemaLanguage.equals(W3C_XML_SCHEMA11_NS_URI)) {    if (debug)     debugPrintln("attempting to use the platform default XML Schema 1.1 validator");    return createInstance("org.apache.xerces.jaxp.validation.XMLSchema11Factory");  }  if (debug)   debugPrintln("all things were tried, but none was found. bailing out.");  return null;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MDiscountSchemaBreak[");  sb.append(get_ID()).append("-Seq=").append(getSeqNo());  if (getM_Product_Category_ID() != 0)   sb.append(",M_Product_Category_ID=").append(getM_Product_Category_ID());  if (getM_Product_ID() != 0)   sb.append(",M_Product_ID=").append(getM_Product_ID());  sb.append(",Break=").append(getBreakValue());  if (isBPartnerFlatDiscount())   sb.append(",FlatDiscount"); else   sb.append(",Discount=").append(getBreakDiscount());  sb.append("]");  return sb.toString();}  }
class C{  public void specifyNewRoute(final RouteSpecification routeSpecification){  Validate.notNull(routeSpecification,"Route specification is required");  this.routeSpecification=routeSpecification;  this.delivery=delivery.updateOnRouting(this.routeSpecification,this.itinerary);}  }
class C{  public ConfirmPanel(boolean withCancelButton,boolean withRefreshButton,boolean withResetButton,boolean withCustomizeButton,boolean withHistoryButton,boolean withZoomButton){  this(withCancelButton,withRefreshButton,withResetButton,withCustomizeButton,withHistoryButton,withZoomButton,false);}  }
class C{  public boolean isCreated(){  return this.created;}  }
class C{  public void toCharArray(char[] b,int offset,int length){  if (buffer.length == 0)   return;  int t=Math.min(length,len);  int toEnd=Math.min(t,buffer.length - start);  System.arraycopy(buffer,start,b,offset,toEnd);  if (toEnd < t)   System.arraycopy(buffer,0,b,offset + toEnd,t - toEnd);}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  int stackMapFrames(int pos,int nth) throws BadBytecode {  int type=info[pos] & 0xff;  if (type < 64) {    sameFrame(pos,type);    pos++;  } else   if (type < 128)   pos=sameLocals(pos,type); else   if (type < 247)   throw new BadBytecode("bad frame_type in StackMapTable"); else   if (type == 247)   pos=sameLocals(pos,type); else   if (type < 251) {    int offset=ByteArray.readU16bit(info,pos + 1);    chopFrame(pos,offset,251 - type);    pos+=3;  } else   if (type == 251) {    int offset=ByteArray.readU16bit(info,pos + 1);    sameFrame(pos,offset);    pos+=3;  } else   if (type < 255)   pos=appendFrame(pos,type); else   pos=fullFrame(pos);  return pos;}  }
class C{  public Line(Color color){  setColor(color);  initSize();}  }
class C{  public void initializeShardTable(Database database) throws SQLException {  if (database.findTungstenTable(shardTable.getSchema(),shardTable.getName()) == null) {    if (logger.isDebugEnabled())     logger.debug("Creating shard table");    database.createTable(this.shardTable,false,tableType);  }}  }
class C{  public int peekErrorErrno(){  return (byteBuffer[ERROR_NUMBER_OFFSET] & 0xff) | ((byteBuffer[ERROR_NUMBER_OFFSET + 1] & 0xff) << 8);}  }
class C{  public static final boolean isInvisibleRaiseMethod(RVMMethod m){  if (!m.isRuntimeServiceMethod()) {    return false;  }  NormalMethod nm=(NormalMethod)m;  return nm == raiseAbstractMethodError || nm == raiseArithmeticException || nm == raiseArithmeticException || nm == raiseNullPointerException || nm == raiseIllegalAccessError;}  }
class C{  @RequestProcessing(value="/admin/articles",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showArticles(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/articles.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.PAGE_SIZE;  final int windowSize=Symphonys.WINDOW_SIZE;  final JSONObject requestJSONObject=new JSONObject();  requestJSONObject.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  requestJSONObject.put(Pagination.PAGINATION_PAGE_SIZE,pageSize);  requestJSONObject.put(Pagination.PAGINATION_WINDOW_SIZE,windowSize);  final String articleId=request.getParameter("id");  if (!Strings.isEmptyOrNull(articleId)) {    requestJSONObject.put(Keys.OBJECT_ID,articleId);  }  final Map<String,Class<?>> articleFields=new HashMap<String,Class<?>>();  articleFields.put(Keys.OBJECT_ID,String.class);  articleFields.put(Article.ARTICLE_TITLE,String.class);  articleFields.put(Article.ARTICLE_PERMALINK,String.class);  articleFields.put(Article.ARTICLE_CREATE_TIME,Long.class);  articleFields.put(Article.ARTICLE_VIEW_CNT,Integer.class);  articleFields.put(Article.ARTICLE_COMMENT_CNT,Integer.class);  articleFields.put(Article.ARTICLE_AUTHOR_EMAIL,String.class);  articleFields.put(Article.ARTICLE_AUTHOR_ID,String.class);  articleFields.put(Article.ARTICLE_TAGS,String.class);  articleFields.put(Article.ARTICLE_STATUS,Integer.class);  final JSONObject result=articleQueryService.getArticles(requestJSONObject,articleFields);  dataModel.put(Article.ARTICLES,CollectionUtils.jsonArrayToList(result.optJSONArray(Article.ARTICLES)));  final JSONObject pagination=result.optJSONObject(Pagination.PAGINATION);  final int pageCount=pagination.optInt(Pagination.PAGINATION_PAGE_COUNT);  final JSONArray pageNums=pagination.optJSONArray(Pagination.PAGINATION_PAGE_NUMS);  dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.opt(0));  dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.opt(pageNums.length() - 1));  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,CollectionUtils.jsonArrayToList(pageNums));  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public int read(char[] outputBuffer,int offset,int size) throws IOException {  try {    int charsRead=0;    int bufferLength=this.buffer.length();    if ((offset + size) > outputBuffer.length) {      size=outputBuffer.length - offset;    }    while (charsRead < size) {      String str="";      char ch;      if (this.bufferIndex >= bufferLength) {        str=XMLUtil.read(this.reader,'&');        ch=str.charAt(0);      } else {        ch=this.buffer.charAt(this.bufferIndex);        this.bufferIndex++;        outputBuffer[charsRead]=ch;        charsRead++;        continue;      }      if (ch == '<') {        this.reader.unread(ch);        break;      }      if ((ch == '&') && (str.length() > 1)) {        if (str.charAt(1) == '#') {          ch=XMLUtil.processCharLiteral(str);        } else {          XMLUtil.processEntity(str,this.reader,this.resolver);          continue;        }      }      outputBuffer[charsRead]=ch;      charsRead++;    }    if (charsRead == 0) {      charsRead=-1;    }    return charsRead;  } catch (  XMLParseException e) {    throw new IOException(e.getMessage());  }}  }
class C{  public static void testConcurrentReadWrites(IntToIntArrayMap map,Map<Integer,ArrayList<Integer>> keysToValueMap){  int numReaders=keysToValueMap.size();  ExecutorService executor=Executors.newFixedThreadPool(numReaders + 1);  List<CountDownLatch> readerStartLatches=Lists.newArrayListWithCapacity(numReaders);  List<CountDownLatch> readerDoneLatches=Lists.newArrayListWithCapacity(numReaders);  List<IntToIntArrayMapReader> readers=Lists.newArrayListWithCapacity(numReaders);  Iterator<Map.Entry<Integer,ArrayList<Integer>>> iterator=keysToValueMap.entrySet().iterator();  while (iterator.hasNext()) {    CountDownLatch startLatch=new CountDownLatch(1);    CountDownLatch doneLatch=new CountDownLatch(1);    IntToIntArrayMapReader mapReader=new IntToIntArrayMapReader(map,startLatch,doneLatch,iterator.next().getKey(),0);    readers.add(mapReader);    executor.submit(mapReader);    readerStartLatches.add(startLatch);    readerDoneLatches.add(doneLatch);  }  Iterator<Map.Entry<Integer,ArrayList<Integer>>> writerIterator=keysToValueMap.entrySet().iterator();  for (int i=0; i < numReaders; i++) {    CountDownLatch startLatch=(i > 0) ? readerDoneLatches.get(i - 1) : new CountDownLatch(0);    CountDownLatch doneLatch=readerStartLatches.get(i);    Map.Entry<Integer,ArrayList<Integer>> entry=writerIterator.next();    Map<Integer,ArrayList<Integer>> writerKeysToValueMap=new TreeMap<Integer,ArrayList<Integer>>();    writerKeysToValueMap.put(entry.getKey(),entry.getValue());    executor.submit(new IntToIntArrayMapWriter(map,new MapWriterInfo(writerKeysToValueMap,startLatch,doneLatch)));  }  try {    readerDoneLatches.get(numReaders - 1).await();  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for last reader was interrupted: ",e);  }  for (  IntToIntArrayMapReader reader : readers) {    IntIterator iter=map.get(reader.key);    ArrayList<Integer> expectedValue=new ArrayList<Integer>();    while (iter.hasNext()) {      expectedValue.add(iter.next());    }    assertTrue(reader.getValue().equals(expectedValue));  }}  }
class C{  private RemoveAction createRemoveAction(MetaProperty metaProperty,Table table){  RemoveAction result;switch (metaProperty.getType()) {case COMPOSITION:    result=new com.haulmont.cuba.gui.components.actions.RemoveAction(table);  break;case ASSOCIATION:result=new com.haulmont.cuba.gui.components.actions.ExcludeAction(table);result.setShortcut(configuration.getConfig(ClientConfig.class).getTableRemoveShortcut());break;default :throw new IllegalArgumentException("property must contain an entity");}result.setAutocommit(false);return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.006 -0500",hash_original_method="0715328D7F7BB9D5550B9E381C496C43",hash_generated_method="790B23600F4BF572A29424D925C154B4") @SuppressWarnings("unchecked") public synchronized Reference<? extends T> poll(){  if (head == null) {    return null;  }  Reference<? extends T> ret;  ret=head;  if (head == head.queueNext) {    head=null;  } else {    head=head.queueNext;  }  ret.queueNext=null;  return ret;}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("SizeCriterion ( ").append("operator = ").append(this.operator).append(TAB).append(" )");  return retValue.toString();}  }
class C{  private PhysicalNAS findPhysicalNasByNativeId(StorageSystem system,String nativeId){  PhysicalNAS physicalNas=null;  URIQueryResultList results=new URIQueryResultList();  String nasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,nativeId,NativeGUIDGenerator.PHYSICAL_NAS);  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getPhysicalNasByNativeGuidConstraint(nasNativeGuid),results);  PhysicalNAS tmpNas=null;  Iterator<URI> iter=results.iterator();  while (iter.hasNext()) {    tmpNas=_dbClient.queryObject(PhysicalNAS.class,iter.next());    if (tmpNas != null && !tmpNas.getInactive()) {      physicalNas=tmpNas;      _log.info("found physical NAS {}",physicalNas.getNativeGuid() + ":" + physicalNas.getNasName());      break;    }  }  return physicalNas;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void newOrder(MRequisitionLine rLine,int C_BPartner_ID) throws Exception {  if (m_order != null) {    closeOrder();  }  if (m_bpartner == null || C_BPartner_ID != m_bpartner.get_ID()) {    m_bpartner=MBPartner.get(getCtx(),C_BPartner_ID);  }  Timestamp DateRequired=rLine.getDateRequired();  int M_PriceList_ID=rLine.getParent().getM_PriceList_ID();  MultiKey key=new MultiKey(C_BPartner_ID,DateRequired,M_PriceList_ID);  m_order=m_cacheOrders.get(key);  if (m_order == null) {    m_order=new MOrder(getCtx(),0,get_TrxName());    m_order.setAD_Org_ID(rLine.getAD_Org_ID());    m_order.setM_Warehouse_ID(rLine.getParent().getM_Warehouse_ID());    m_order.setDatePromised(DateRequired);    m_order.setIsSOTrx(false);    m_order.setC_DocTypeTarget_ID();    m_order.setBPartner(m_bpartner);    m_order.setM_PriceList_ID(M_PriceList_ID);    if (!p_ConsolidateDocument) {      m_order.setDescription(Msg.getElement(getCtx(),"M_Requisition_ID") + ": " + rLine.getParent().getDocumentNo());    }    m_order.saveEx();    m_cacheOrders.put(key,m_order);  }  m_M_Requisition_ID=rLine.getM_Requisition_ID();}  }
class C{  private void checkGlobalHotkeyWarning(){  if (globalHotkeyErrorWarning == null) {    return;  }  for (  Hotkey hotkey : hotkeys) {    if (doesHotkeyHaveAction(hotkey) && hotkey.type == Type.GLOBAL) {      LOGGER.log(Logging.USERINFO,globalHotkeyErrorWarning + " " + "[You are getting this message because you have a "+ "global hotkey configured. If you don't use it you "+ "can ignore this warning.]");      globalHotkeyErrorWarning=null;      return;    }  }}  }
class C{  public static void scaleFit(Bitmap src,Bitmap dest){  scaleFit(src,dest,CLEAR_COLOR);}  }
class C{  public boolean hasValue(){  return value != null;}  }
class C{  public boolean areAllLocationSettingsEnabled(){  return isChromeLocationSettingEnabled() && isSystemLocationSettingEnabled();}  }
class C{  public static Date nextGivenSecondDate(Date date,int secondBase){  if (secondBase < 0 || secondBase > 59) {    throw new IllegalArgumentException("secondBase must be >=0 and <= 59");  }  if (date == null) {    date=new Date();  }  Calendar c=Calendar.getInstance();  c.setTime(date);  c.setLenient(true);  if (secondBase == 0) {    c.set(Calendar.MINUTE,c.get(Calendar.MINUTE) + 1);    c.set(Calendar.SECOND,0);    c.set(Calendar.MILLISECOND,0);    return c.getTime();  }  int second=c.get(Calendar.SECOND);  int arItr=second / secondBase;  int nextSecondOccurance=secondBase * (arItr + 1);  if (nextSecondOccurance < 60) {    c.set(Calendar.SECOND,nextSecondOccurance);    c.set(Calendar.MILLISECOND,0);    return c.getTime();  } else {    c.set(Calendar.MINUTE,c.get(Calendar.MINUTE) + 1);    c.set(Calendar.SECOND,0);    c.set(Calendar.MILLISECOND,0);    return c.getTime();  }}  }
class C{  public RectF stroke(Path s){  return state.strokePaint.fill(this,g,s);}  }
class C{  @Override public void launchStreamProcessor(SamzaResource resource,CommandBuilder builder) throws SamzaContainerLaunchException {  String containerIDStr=builder.buildEnvironment().get(ShellCommandConfig.ENV_CONTAINER_ID());  int containerID=Integer.parseInt(containerIDStr);  log.info("Received launch request for {} on hostname {}",containerID,resource.getHost());synchronized (lock) {    Container container=allocatedResources.get(resource);    if (container == null) {      log.info("Resource {} already released. ",resource);      return;    }    state.runningYarnContainers.put(containerID,new YarnContainer(container));    yarnContainerRunner.runContainer(containerID,container,builder);  }}  }
class C{  protected boolean isBufferedImageSource(){  return this.getImageSource() instanceof BufferedImage;}  }
class C{  @Override public void propertyChange(PropertyChangeEvent event){  landscapePath=null;  if (event.getPropertyName().equals(JFileChooser.DIRECTORY_CHANGED_PROPERTY)) {    File f=(File)event.getNewValue();    if (f == null) {      return;    }    landscapePath=f.getAbsolutePath();    File idFile=new File(f,".landscape");    if (idFile.exists()) {      lastPath=f.getParent();      close();    }    return;  }  if (!event.getPropertyName().equals(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY)) {    return;  }  File f=(File)event.getNewValue();  if (f == null) {    return;  }  File idFile=new File(f,".landscape");  if (!idFile.exists()) {    return;  }  landscapePath=f.getAbsolutePath();  okButton.setEnabled(true);}  }
class C{  public static boolean isPublic(int accflags){  return (accflags & PUBLIC) != 0;}  }
class C{  public final AGeneralOperationAccessor initialSGetPath(String initialSGetPath){  this.initialSGetPath=initialSGetPath;  return this;}  }
class C{  private void countCategoriesWithUnread(){  Cursor c=null;  final SQLiteDatabase db=getOpenHelper().getWritableDatabase();  try {    db.beginTransaction();    final ContentValues cv=new ContentValues(1);    c=db.query(TABLE_FEEDS,new String[]{"categoryId","sum(unread)"},"categoryId>=0",null,"categoryId",null,null,null);    while (c.moveToNext()) {      int categoryId=c.getInt(0);      int unreadCount=c.getInt(1);      cv.put(COL_UNREAD,unreadCount);      db.update(TABLE_CATEGORIES,cv,"_id=" + categoryId,null);    }    db.setTransactionSuccessful();  }  finally {    close(c);    db.endTransaction();  }}  }
class C{  public void put(String[] localFiles,String remoteTargetDirectory) throws IOException {  put(localFiles,remoteTargetDirectory,"0600");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void printProgressInfo(int counter,int size,int step,ProgressInfoMode mode,String text){  if (size < step) {    return;  }  if (counter % (size / step) == 0) {    double progressPercent=counter * 100 / size;    progressPercent=1 + Math.round(progressPercent * 100) / 100.0;    if (mode.equals(ApiUtilities.ProgressInfoMode.TEXT)) {      logger.info(text + ": " + progressPercent+ " - "+ OS.getUsedMemory()+ " MB");    } else     if (mode.equals(ApiUtilities.ProgressInfoMode.DOTS)) {      System.out.print(".");      if (progressPercent >= 100) {        System.out.println();      }    }  }}  }
class C{  private boolean isDone(){  return lastCommentIndex >= comments.size();}  }
class C{  public boolean isReceipt(){  Object oo=get_Value(COLUMNNAME_IsReceipt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  @Override @Interruptible public final void notifyExit(int value){  super.notifyExit(value);  finalDead=true;  traceInducedGC=false;  deathScan=true;  TraceGenerator.notifyExit(value);}  }
class C{  private void addSourceHtml(Entry source,StringBuilder result,SourceEmbedContext embedContext,String prefix,int resultNumber,String rootId) throws IOException {  final String url=source.getSourceUrl();  final StringBuilder header=new StringBuilder();  final StringBuilder footer=new StringBuilder();  if (embedContext == SourceEmbedContext.InQuotation || embedContext == SourceEmbedContext.InQuotations) {    header.append("<div class=\"listItemFooter\">");    footer.append("</div>");  } else   if (embedContext == SourceEmbedContext.InSources) {    startItemListItem(result,rootId,source.getId());    header.append("<table class=\"magic nopadding\"><tr><td class=\"resultNumber\">");    header.append(getItemMetaDataJsonHtml(source.getType(),source.getId()).toString());    header.append(resultNumber + ".</td>");    header.append("<td><input type=\"checkbox\" class=\"justDrag aloneCheckbox\" onclick=\"checkboxOnClick(event); return true;\"></td>");    header.append("<td class=\"listItem\">");    footer.append("</td></tr></table>");    finishItemListItem(footer);  } else {    header.append("<div>");    footer.append("</div>");  }  result.append(header);  if (prefix != null) {    result.append(prefix);  }  if (embedContext == SourceEmbedContext.InQuotation || embedContext == SourceEmbedContext.InQuotation) {    result.append(servletText.fragmentFrom());    result.append(" ");  }  String domain=null;  try {    if (url != null) {      final URI uri=new URI(url);      domain=uri.getHost();    }  } catch (  final URISyntaxException e) {  }  if (embedContext == SourceEmbedContext.InSources) {    result.append("<div class=\"sourceHeader\">");  }  result.append("<div class=\"sourceTitle\">");  if (domain != null && embedContext != SourceEmbedContext.InSources) {    result.append("<a onclick=\"newTab(event); return false;\" target=\"_blank\" title=\"" + servletText.showExternalSourceLinkTooltip() + "\" href=\"");    result.append(StringEscapeUtils.escapeHtml4(url));    result.append("\">");  }  String title=source.getSourceTitle();  if (title == null || title.isEmpty()) {    title=servletText.fragmentBlankTitle();  }  if (embedContext == SourceEmbedContext.InSource) {    title=servletText.fragmentVisitExternalSource();  }  result.append(StringEscapeUtils.escapeHtml4(title));  if (domain != null && embedContext != SourceEmbedContext.InSources) {    result.append("</a>");  }  result.append("</div>");  result.append(" ");  if (domain != null) {    result.append("<span class=\"domain\">");    if (embedContext != SourceEmbedContext.InSource) {      result.append("(");    }    result.append(domain);    if (embedContext != SourceEmbedContext.InSource) {      result.append(")");    }    result.append("</span>");  }  if (embedContext == SourceEmbedContext.InQuotation || embedContext == SourceEmbedContext.InQuotations || embedContext == SourceEmbedContext.InSources) {    result.append(" <a onclick=\"newPaneForLink(event, 'Source', '" + source.getId() + "'); return false;\" class=\"sourceMore\" title=\""+ servletText.moreFromThisSourceTooltip()+ "\" href=\"/source/");    result.append(source.getId());    result.append("\">");    result.append(servletText.buttonMoreQuotations());    result.append("</a>");  }  if (embedContext == SourceEmbedContext.InSources) {    result.append("</div>");  }  if (embedContext == SourceEmbedContext.InSource || embedContext == SourceEmbedContext.InSources) {    result.append("<div class=\"" + (embedContext == SourceEmbedContext.InSource ? "sourceFooter" : "listItemFooter") + "\">");    result.append(servletText.fragmentLastModified() + " <span>");    result.append(formatDateAndTime(source.getModTime()) + "<span class=\"rawDateTime\">" + source.getModTime()+ "</span></span></div>");  }  result.append(footer);}  }
class C{  public boolean hasCode(){  return super.hasAttribute(CODE);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_INVARIANT_2__CONSTRAINT_1:    return ((InternalEList<?>)getConstraint_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  Vector putElemNumber(ElemNumber numberElem){  Vector counters=new Vector();  this.put(numberElem,counters);  return counters;}  }
class C{  public ResultSet executeQuery(Statement stmt,String sqlCommand){  ResultSet rs=null;  if (s_dbEngine.isDBError())   return null;  if (stmt == null)   return null;  if (sqlCommand == null || sqlCommand.length() == 0)   return null;  try {    s_logger.log(Level.FINEST,sqlCommand);    rs=stmt.executeQuery(sqlCommand);  } catch (  SQLException e) {    s_dbEngine.setTransactionErrors(1);    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"executeQuerySqlError",new Object[]{sqlCommand,e.getMessage()});    rs=null;  }  return rs;}  }
class C{  public long swapKeys(@Nullable String spaceName,Set<Integer> parts) throws IgniteCheckedException {  try {    return getSpi().count(spaceName,parts);  } catch (  IgniteSpiException e) {    throw new IgniteCheckedException("Failed to get swap keys count for space: " + spaceName,e);  }}  }
class C{  public static LanguageVersion languageVersion(){  return LanguageVersion.JAVA_1_5;}  }
class C{  public ObdCodeItem(int numericCode,String description){  setKeyAttribute(FIELDS[0]);  put(FID_CODE,getPCode(numericCode));  put(FID_DESCRIPT,description);}  }
class C{  public SwingSetRunnable(SwingSet2 swingset,Object obj){  this.swingset=swingset;  this.obj=obj;}  }
class C{  public NoSuchElementException(){  super();}  }
class C{  public EntryDestroyedException(Throwable ex){  super(ex);}  }
class C{  public void testSinglePolygonManyPointsManyHolesRoundTrip() throws SQLException {  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setGenerationAlgorithm(PolygonGenerator.BOX);  pg.setNumberPoints(100);  pg.setNumberHoles(100);  Polygon pt=(Polygon)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  Polygon pt2=(Polygon)or.read(st);  assertTrue("The input polygon is not the same as the output polygon",pt.equals(pt2));}  }
class C{  public static BooleanVal create(boolean b){  return new BooleanVal(b);}  }
class C{  @Inline private void processCodeLocation(ObjectReference code,Address ipLoc){  if (VALIDATE_REFS) {    Address ip=ipLoc.loadAddress();    Offset offset=ip.diff(code.toAddress());    if (offset.sLT(Offset.zero()) || offset.sGT(Offset.fromIntZeroExtend(ObjectModel.getObjectSize(code)))) {      Log.writeln("ERROR: Suspiciously large offset of interior pointer from object base");      Log.write("       object base = ");      Log.writeln(code);      Log.write("       interior reference = ");      Log.writeln(ip);      Log.write("       offset = ");      Log.writeln(offset);      Log.write("       interior ref loc = ");      Log.writeln(ipLoc);      if (!failed)       failed=true;    }  }  trace.processInteriorEdge(code,ipLoc,true);}  }
class C{  public void addPropertyChangeListener(String name,PropertyChangeListener pcl){  pcSupport.addPropertyChangeListener(name,pcl);}  }
class C{  public VNXeCommandResult detachLunSnapSync(String snapId) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_DETACH);  _url=urlBuilder.toString();  return postRequestSync(null);}  }
class C{  public void addItem(Playlist p){  mPlaylists.add(p);}  }
class C{  protected boolean parseAuthentication(final byte[] authResult) throws ProtocolException {  if (authResult == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: null result");    }    throw new ProtocolException(100);  }  if (new String(authResult).contains(M.e("<html>"))) {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: Fake answer");    }    throw new ProtocolException(14);  }  if (Cfg.DEBUG) {    Check.ensures(authResult.length == 64,"authResult.length=" + authResult.length);  }  final byte[] cypherKs=new byte[32];  System.arraycopy(authResult,0,cypherKs,0,cypherKs.length);  try {    final byte[] Ks=cryptoConf.decryptData(cypherKs);    final SHA1Digest digest=new SHA1Digest();    digest.update(Keys.self().getConfKey());    digest.update(Ks);    digest.update(Kd);    final byte[] K=new byte[16];    System.arraycopy(digest.getDigest(),0,K,0,K.length);    cryptoK.init(K);    final byte[] cypherNonceCap=new byte[32];    System.arraycopy(authResult,32,cypherNonceCap,0,cypherNonceCap.length);    final byte[] plainNonceCap=cryptoK.decryptData(cypherNonceCap);    final boolean nonceOK=ByteArray.equals(Nonce,0,plainNonceCap,0,Nonce.length);    if (nonceOK) {      final int cap=ByteArray.byteArrayToInt(plainNonceCap,16);      if (cap == Proto.OK) {        if (Cfg.DEBUG) {          Check.log(TAG + " decodeAuth Proto OK");        }      } else       if (cap == Proto.UNINSTALL) {        if (Cfg.DEBUG) {          Check.log(TAG + " decodeAuth Proto Uninstall");        }        return true;      } else {        if (Cfg.DEBUG) {          Check.log(TAG + " decodeAuth error: " + cap);        }        throw new ProtocolException(11);      }    } else {      throw new ProtocolException(12);    }  } catch (  final CryptoException ex) {    if (Cfg.EXCEPTION) {      Check.log(ex);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error: parseAuthentication: " + ex);    }    throw new ProtocolException(13);  }  return false;}  }
class C{  public void close(final SocketChannel channel){  try {    final Socket s=channel.socket();    if (!s.isInputShutdown()) {      s.shutdownInput();    }    if (!s.isOutputShutdown()) {      s.shutdownOutput();    }    if (!s.isClosed()) {      s.close();    }    channel.close();  } catch (  final IOException e1) {    s_logger.log(Level.FINE,"error closing channel",e1);  }  m_decoder.closed(channel);  m_writer.closed(channel);  m_reader.closed(channel);}  }
class C{  public Boolean isOK(){  return ok;}  }
class C{  public h3 removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void removeBinders(){  getBinders().clear();  notifyDataSetChanged();}  }
class C{  public Request single(final CharSequence name) throws HttpException {  final Iterator<Request> parts=this.part(name).iterator();  if (!parts.hasNext()) {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("form param \"%s\" is mandatory",name));  }  return parts.next();}  }
class C{  public void rebuildTransientIndexes(){  LOG.info("Rebuilding transient indices.");  int nStops=stopIdForIndex.size();  patternsForStop=new ArrayList<>(nStops);  for (int i=0; i < nStops; i++) {    patternsForStop.add(new TIntArrayList());  }  int p=0;  for (  TripPattern pattern : tripPatterns) {    for (    int stopIndex : pattern.stops) {      if (!patternsForStop.get(stopIndex).contains(p)) {        patternsForStop.get(stopIndex).add(p);      }    }    p++;  }  stopForStreetVertex=new TIntIntHashMap(streetVertexForStop.size(),0.5f,-1,-1);  for (int s=0; s < streetVertexForStop.size(); s++) {    stopForStreetVertex.put(streetVertexForStop.get(s),s);  }  indexForStopId=new TObjectIntHashMap<>(stopIdForIndex.size(),0.5f,-1);  for (int s=0; s < stopIdForIndex.size(); s++) {    indexForStopId.put(stopIdForIndex.get(s),s);  }  frequencyEntryIndexForId=new HashMap<>();  for (int patternIdx=0; patternIdx < tripPatterns.size(); patternIdx++) {    TripPattern pattern=tripPatterns.get(patternIdx);    for (int tripScheduleIdx=0; tripScheduleIdx < pattern.tripSchedules.size(); tripScheduleIdx++) {      TripSchedule schedule=pattern.tripSchedules.get(tripScheduleIdx);      if (schedule.headwaySeconds == null)       continue;      for (int frequencyEntryIdx=0; frequencyEntryIdx < schedule.headwaySeconds.length; frequencyEntryIdx++) {        frequencyEntryIndexForId.put(schedule.frequencyEntryIds[frequencyEntryIdx],new int[]{patternIdx,tripScheduleIdx,frequencyEntryIdx});      }    }  }  LOG.info("Done rebuilding transient indices.");}  }
class C{  private static CacheConfiguration atomicsSystemCache(AtomicConfiguration cfg){  CacheConfiguration ccfg=new CacheConfiguration();  ccfg.setName(CU.ATOMICS_CACHE_NAME);  ccfg.setAtomicityMode(TRANSACTIONAL);  ccfg.setSwapEnabled(false);  ccfg.setRebalanceMode(SYNC);  ccfg.setWriteSynchronizationMode(FULL_SYNC);  ccfg.setCacheMode(cfg.getCacheMode());  ccfg.setNodeFilter(CacheConfiguration.ALL_NODES);  ccfg.setRebalanceOrder(-1);  if (cfg.getCacheMode() == PARTITIONED)   ccfg.setBackups(cfg.getBackups());  return ccfg;}  }
class C{  private void newConf(final boolean cap) throws TransportException, ProtocolException, CommandException {  if (cap) {    if (Cfg.DEBUG) {      Check.log(TAG + " Info: ***** NewConf *****");    }    final byte[] response=command(Proto.NEW_CONF);    int ret=parseNewConf(response);    byte[] data;    if (ret != Proto.NO) {      if (ret == Proto.OK) {        data=ByteArray.intToByteArray(Proto.OK);      } else {        data=ByteArray.intToByteArray(Proto.NO);      }      if (Cfg.DEBUG) {        Check.log(TAG + " (newConf): sending conf answer: " + ret);      }      command(Proto.NEW_CONF,data);    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " (newConf): no conf, no need to write another message");      }    }  }}  }
class C{  public E value(){  return value;}  }
class C{  final public void write(char[] buf,int offset,int length){  try {    _out.print(buf,offset,length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  private void checkLog(String... lines) throws Exception {  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(LOG_FILE)));  List<String> logLines=new ArrayList<>(lines.length);  String nextLogLine;  while ((nextLogLine=br.readLine()) != null)   logLines.add(nextLogLine);  U.closeQuiet(br);  assertEquals(lines.length + 1,logLines.size());  assertEquals(logLines.get(0),HDR);  for (int i=0; i < lines.length; i++) {    String logLine=logLines.get(i + 1);    logLine=logLine.substring(logLine.indexOf(DELIM_FIELD,logLine.indexOf(DELIM_FIELD) + 1) + 1);    assertEquals(lines[i],logLine);  }}  }
class C{  public void close(){  try {    dis.close();  } catch (  Exception e) {    System.err.println("Can't close input stream:");    e.printStackTrace();    System.exit(1);  }}  }
class C{  public AbstractFigure(){}  }
class C{  public int next(){  return this.icuIterator.next();}  }
class C{  public void removeCellEditorListener(CellEditorListener l){  listenerList.remove(CellEditorListener.class,l);}  }
class C{  public SignalServiceAddress(String e164number,Optional<String> relay){  this.e164number=e164number;  this.relay=relay;}  }
class C{  final boolean acquireQueued(final Node node,int arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public HttpSendSocket(String host,int port) throws IOException {  this(host,port,new URL("http",host,port,"/"));}  }
class C{  private void genArticleAuthor(final JSONObject article) throws RepositoryException {  final String authorId=article.optString(Article.ARTICLE_AUTHOR_ID);  JSONObject author=userCache.getUser(authorId);  if (null == author) {    author=userRepository.get(authorId);  }  final int articleType=article.optInt(Article.ARTICLE_TYPE);  if (Article.ARTICLE_TYPE_C_JOURNAL_CHAPTER == articleType || Article.ARTICLE_TYPE_C_JOURNAL_SECTION == articleType) {    article.put(Article.ARTICLE_T_AUTHOR_THUMBNAIL_URL,AvatarQueryService.DEFAULT_AVATAR_URL);  } else {    article.put(Article.ARTICLE_T_AUTHOR_THUMBNAIL_URL,avatarQueryService.getAvatarURLByUser(author));  }  article.put(Article.ARTICLE_T_AUTHOR,author);  article.put(Article.ARTICLE_T_AUTHOR_NAME,author.optString(User.USER_NAME));  article.put(Article.ARTICLE_T_AUTHOR_REAL_NAME,author.optString(UserExt.USER_REAL_NAME));}  }
class C{  public ECKey(){  ECKeyPairGenerator generator=new ECKeyPairGenerator();  ECKeyGenerationParameters keygenParams=new ECKeyGenerationParameters(CURVE,secureRandom);  generator.init(keygenParams);  AsymmetricCipherKeyPair keypair=generator.generateKeyPair();  ECPrivateKeyParameters privParams=(ECPrivateKeyParameters)keypair.getPrivate();  ECPublicKeyParameters pubParams=(ECPublicKeyParameters)keypair.getPublic();  priv=privParams.getD();  ECPoint uncompressed=pubParams.getQ();  ECPoint compressed=compressPoint(uncompressed);  pub=compressed.getEncoded();  creationTimeSeconds=Utils.currentTimeMillis() / 1000;}  }
class C{  public ZyGraphOrthogonalSettings(final ZyGraphOrthogonalSettings settings){  m_type=null;  m_mininmumNodeDistance=settings.getMinimumNodeDistance();  m_orientation=settings.getOrientation();  m_style=settings.getStyle();}  }
class C{  protected BasicDirImpl(int id,String name){  _id=id;  _name=name;}  }
class C{  @Override protected void process(final DistributionManager dm){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"InterestEventReplyMessage process invoking reply processor with processorId: {}",this.processorId);  }  try {    ReplyProcessor21 processor=ReplyProcessor21.getProcessor(this.processorId);    if (processor == null) {      if (logger.isTraceEnabled(LogMarker.DM)) {        logger.trace(LogMarker.DM,"InterestEventReplyMessage processor not found");      }      return;    }    processor.process(this);    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.debug("{} processed {}",processor,this);    }  }  finally {    dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);  }}  }
class C{  public boolean compute(){  boolean augmented=false;  while (searchMethod.findAugmentingPath(network.vertices)) {    processPath(network.vertices);    augmented=true;  }  return augmented;}  }
class C{  public void addElement(Element element,int sortOrder){  final String deepName=getDeepName(element);  elementNameSortOrderMap.put(deepName,sortOrder);}  }
class C{  public boolean isLimitEnabled(){  return m_enableLimit;}  }
class C{  public CTextArea(int rows,int columns){  this(new JTextArea(rows,columns));}  }
class C{  public void paint(Graphics g,Shape allocation){  Container host=getContainer();  if (host != null && visible != ((JTextComponent)host).isEditable()) {    visible=((JTextComponent)host).isEditable();  }  if (!isVisible()) {    return;  }  super.paint(g,allocation);}  }
class C{  public boolean isActiveUserAvailable(){synchronized (this) {    return activeUser != null;  }}  }
class C{  public StringPrintWriter(){  this(new StringBuilder(),null);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMTextElement(prefix,(AbstractDocument)doc);}  }
class C{  private void addNotes(CnATreeElement cnATreeElement,List<NotizenMassnahmeResult> remainingNotes) throws CommandException {  for (  NotizenMassnahmeResult notiz : remainingNotes) {    LOG.debug("Adding note for " + cnATreeElement.getTitle());    saveNewNote(cnATreeElement.getDbId(),cnATreeElement.getTitle(),cnATreeElement.getTitle(),notiz.notiz.getNotizText());    appendDescription(cnATreeElement,notiz.notiz.getNotizText());  }}  }
class C{  public static int size(TableModel self){  return self.getRowCount();}  }
class C{  public void run(){  while (true) {    try {      StyledDocument doc=m_Output.getStyledDocument();      doc.insertString(doc.getLength(),m_Input.readLine() + '\n',doc.getStyle(getStyleName()));      m_Output.setCaretPosition(doc.getLength());    } catch (    Exception ex) {      try {        sleep(100);      } catch (      Exception e) {      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double minStreamLength=0;  boolean blnRemoveStream=false;  int stopRow, stopCol;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      minStreamLength=Double.parseDouble(args[i]);    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    double gridResX=streams.getCellSizeX();    double gridResY=streams.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streams.getMaximumValue();    minStreamLength=minStreamLength / ((gridResX + gridResY) / 2);    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        output.setValue(row,col,streams.getValue(row,col));      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    byte numNeighbouringStreamCells=0;    double linkLength=0;    int x2, y2;    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            linkLength=0;            blnRemoveStream=false;            x=col;            y=row;            stopRow=-1;            stopCol=-1;            flag=true;            do {              numNeighbouringStreamCells=0;              for (c=0; c < 8; c++) {                x2=x + dX[c];                y2=y + dY[c];                if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[c]) {                  numNeighbouringStreamCells++;                }              }              if (numNeighbouringStreamCells > 1) {                if (linkLength < minStreamLength) {                  stopRow=y;                  stopCol=x;                  blnRemoveStream=true;                }                flag=false;                break;              }              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                if (linkLength > minStreamLength) {                  flag=false;                } else {                  x+=dX[c];                  y+=dY[c];                  if (streams.getValue(y,x) <= 0) {                    flag=false;                  }                }              } else {                flag=false;              }            } while (flag);            if (blnRemoveStream) {              x=col;              y=row;              flag=true;              do {                if (x == stopCol && y == stopRow) {                  flag=false;                  break;                }                output.setValue(y,x,noData);                flowDir=pntr.getValue(y,x);                if (flowDir > 0) {                  c=(int)(Math.log(flowDir) / LnOf2);                  x+=dX[c];                  y+=dY[c];                  if (streams.getValue(y,x) <= 0) {                    flag=false;                  }                } else {                  flag=false;                }              } while (flag);            }          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  String input(String prompt) throws Exception {  System.out.print(prompt);  return new BufferedReader(new InputStreamReader(System.in)).readLine();}  }
class C{  @Override public void beforeCompletion(){  LOGGER.debug("Transaction beforeCompletion");  RUNNABLES.remove();}  }
class C{  static int findDominantColorByHue(Bitmap bitmap,int samples){  final int height=bitmap.getHeight();  final int width=bitmap.getWidth();  int sampleStride=(int)Math.sqrt((height * width) / samples);  if (sampleStride < 1) {    sampleStride=1;  }  float[] hsv=new float[3];  float[] hueScoreHistogram=new float[360];  float highScore=-1;  int bestHue=-1;  for (int y=0; y < height; y+=sampleStride) {    for (int x=0; x < width; x+=sampleStride) {      int argb=bitmap.getPixel(x,y);      int alpha=0xFF & (argb >> 24);      if (alpha < 0x80) {        continue;      }      int rgb=argb | 0xFF000000;      Color.colorToHSV(rgb,hsv);      int hue=(int)hsv[0];      if (hue < 0 || hue >= hueScoreHistogram.length) {        continue;      }      float score=hsv[1] * hsv[2];      hueScoreHistogram[hue]+=score;      if (hueScoreHistogram[hue] > highScore) {        highScore=hueScoreHistogram[hue];        bestHue=hue;      }    }  }  SparseArray<Float> rgbScores=new SparseArray<Float>();  int bestColor=0xff000000;  highScore=-1;  for (int y=0; y < height; y+=sampleStride) {    for (int x=0; x < width; x+=sampleStride) {      int rgb=bitmap.getPixel(x,y) | 0xff000000;      Color.colorToHSV(rgb,hsv);      int hue=(int)hsv[0];      if (hue == bestHue) {        float s=hsv[1];        float v=hsv[2];        int bucket=(int)(s * 100) + (int)(v * 10000);        float score=s * v;        Float oldTotal=rgbScores.get(bucket);        float newTotal=oldTotal == null ? score : oldTotal + score;        rgbScores.put(bucket,newTotal);        if (newTotal > highScore) {          highScore=newTotal;          bestColor=rgb;        }      }    }  }  return bestColor;}  }
class C{  @NotNull public PsiQuery parents(@NotNull final String name){  throw new RuntimeException("Not implemented");}  }
class C{  protected ReentrantReadWriteLock lockFactory(T name){  if (name == null)   throw new IllegalArgumentException();  ReentrantReadWriteLock lock;synchronized (locks) {    lock=locks.get(name);    if (lock == null) {      lock=new ReentrantReadWriteLock();      locks.put(name,lock);    }  }  return lock;}  }
class C{  public DisjunctionMaxWeight(IndexSearcher searcher,boolean needsScores,float boost) throws IOException {  super(DisjunctionMaxQuery.this);  for (  Query disjunctQuery : disjuncts) {    weights.add(searcher.createWeight(disjunctQuery,needsScores,boost));  }  this.needsScores=needsScores;}  }
class C{  public boolean isVelocimacro(String vmName,String templateName){  return vmFactory.isVelocimacro(vmName,templateName);}  }
class C{  public int compareTo(DoubleArrayListWritable other){  if (other == null) {    return 1;  }  if (this.size() < other.size()) {    return -1;  }  if (this.size() > other.size()) {    return 1;  }  for (int i=0; i < this.size(); i++) {    if (this.get(i) == null && other.get(i) == null) {      continue;    }    if (this.get(i) == null) {      return -1;    }    if (other.get(i) == null) {      return 1;    }    if (this.get(i).get() < other.get(i).get()) {      return -1;    }    if (this.get(i).get() > other.get(i).get()) {      return 1;    }  }  return 0;}  }
class C{  private void syncMetaTransients(){  if (m_metaTransientBits == null || m_metaTransientBits.length != m_metaBits.length) {    m_metaTransientBits=(int[])m_metaBits.clone();  } else {    System.arraycopy(m_metaBits,0,m_metaTransientBits,0,m_metaTransientBits.length);  }}  }
class C{  private JComponent createPreviewContent(){  buttonBarCardPanel=new ButtonBarCardPanel();  buttonBarCardPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY,1));  int showingIndex=-1;  int index=0;  for (  PrintableComponent comp : components) {    if (comp.getExportComponent() != null) {      PrintPreviewPanel previewPanel=new PrintPreviewPanel(comp,pageFormat);      buttonBarCardPanel.addCard(new PrintableComponentCard(comp),previewPanel);      previewPanels.add(previewPanel);      if (showingIndex == -1 && comp.isShowing()) {        showingIndex=index;      }      ++index;    }  }  if (showingIndex != -1 && showingIndex <= index) {    buttonBarCardPanel.setSelectedCard(showingIndex);  }  return buttonBarCardPanel;}  }
class C{  public boolean isSlavesConnection(){  return this.currentConnection != null && this.currentConnection == this.slavesConnection;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.traceTest=true;  test.config.big=true;  test.test();}  }
class C{  public void topologySnapshot(long topVer,Collection<ClusterNode> topSnapshot){  this.topVer=topVer;  this.topSnapshot=topSnapshot;}  }
class C{  public static boolean mergePackageName(PsiBuilder b,int l){  IElementType tokenType=b.getTokenType();  if (tokenType == PACKAGE) {    b.advanceLexer();    return true;  } else   if (PACKAGE_TOKENS.contains(tokenType) && CONVERTABLE_TOKENS.contains(b.lookAhead(1))) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    b.advanceLexer();    m.collapse(PACKAGE);    return true;  } else   if (PACKAGE_TOKENS.contains(tokenType) || CONVERTABLE_TOKENS.contains(tokenType)) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    m.collapse(PACKAGE);    return true;  }  return false;}  }
class C{  public static ProjectionComponent open(InputStream input,final String name,final String format){  ProjectionModel model=(ProjectionModel)ProjectionModel.getXStream().fromXML(input);  return new ProjectionComponent(model,name);}  }
class C{  public AlgorithmIdentifier(String algorithm,String algorithmName){  this(algorithm,null,null);  this.algorithmName=algorithmName;}  }
class C{  public double borderDistanceSqr(double lat,double lon){  double nsdistance;  double ewdistance;  if (south <= lat && lat <= north) {    nsdistance=0.0;  } else {    nsdistance=Math.min((Math.abs(lat - north)),(Math.abs(lat - south)));  }  if (west <= lon && lon <= east) {    ewdistance=0.0;  } else {    ewdistance=Math.min((Math.abs(lon - east)),(Math.abs(lon - west)));  }  if (nsdistance == 0.0 && ewdistance == 0.0)   return 0.0;  double dx=ewdistance * ewdistance;  double dy=nsdistance * nsdistance;  return dx * dx + dy * dy;}  }
class C{  public boolean isUpperInclusive(){  return upperInclusive;}  }
class C{  @Override protected void paintAxesLabels(){  super.paintAxesLabels();  final int assistLinesCount=drawingRect.height < ASSIST_LINES_MIN_DISTANCE ? 1 : drawingRect.height / ASSIST_LINES_MIN_DISTANCE;  final Stroke oldStroke=g.getStroke();  g.setStroke(STROKE_DASHED);  Font oldFont=null;  if (valueMax > 9999) {    oldFont=g.getFont();    g.setFont(oldFont.deriveFont(9f));  } else   if (valueMax > 999) {    oldFont=g.getFont();    g.setFont(oldFont.deriveFont(10f));  }  final FontMetrics fontMetrics=g.getFontMetrics();  final int fontAscent=fontMetrics.getAscent();  for (int i=assistLinesCount - 1; i >= 0; i--) {    final int y=drawingRect.y1 + i * drawingRect.dy / assistLinesCount;    g.setColor(COLOR_ASSIST_LINES);    g.drawLine(drawingRect.x1 + 1,y,drawingRect.x2,y);    g.setColor(COLOR_AXIS_LABELS);    final String label=Integer.toString(valueMax * (assistLinesCount - i) / assistLinesCount);    g.drawString(label,drawingRect.x1 - fontMetrics.stringWidth(label) - 1,y + fontAscent / 2 - 1);  }  if (oldFont != null)   g.setFont(oldFont);  g.setStroke(oldStroke);}  }
class C{  @Deprecated @Override public final void remove(){  throw new UnsupportedOperationException();}  }
class C{  public String key(){  if (message instanceof DCPMessage) {    return ((DCPMessage)message).key();  } else {    return null;  }}  }
class C{  HasPackageNameView(Document parent,Map<String,Object> data,Class<? extends Document> mainInterface){  super(parent,data,mainInterface);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.410 -0400",hash_original_method="43F1953459ED4A6D7CC6DB0D2AF14731",hash_generated_method="92A00B9BBBAE9E5C3293B909A1EA1F62") public static long readSwappedUnsignedInteger(byte[] data,int offset){  long low=(((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16));  long high=data[offset + 3] & 0xff;  return (high << 24) + (0xffffffffL & low);}  }
class C{  public void deleteTreeQuota(String volume,String path){  if (log.isDebugEnabled()) {    log.debug("Deleting tree quota for " + path);  }  QuotaCommands commands=new QuotaCommands(server.getNaServer());  commands.deleteTreeQuota(volume,path);}  }
class C{  public GenericMetricEntityDecompactionStreamReader(String metricName,SearchCondition condition) throws InstantiationException, IllegalAccessException, ParseException {  ed=EntityDefinitionManager.getEntityByServiceName(serviceName);  checkIsMetric(ed);  reader=new GenericEntityStreamReader(serviceName,condition,metricName);  start=DateTimeUtil.humanDateToSeconds(condition.getStartTime()) * 1000;  end=DateTimeUtil.humanDateToSeconds(condition.getEndTime()) * 1000;}  }
class C{  public List<TurinFileWithSource> parseAllIn(File file) throws IOException {  if (file.isFile()) {    return ImmutableList.of(new TurinFileWithSource(file,parse(new FileInputStream(file))));  } else   if (file.isDirectory()) {    List<TurinFileWithSource> result=new ArrayList<>();    for (    File child : file.listFiles()) {      result.addAll(parseAllIn(child));    }    return result;  } else {    throw new IllegalArgumentException("Neither a file or a directory: " + file.getPath());  }}  }
class C{  public static int compare(Date left,Date right){  return compare(left.getTime() / 1000,right.getTime() / 1000);}  }
class C{  public void addWith(String text){  addWith(new TextComponent(text));}  }
class C{  @Override public Object baseServiceProcess(ProceedingJoinPoint pjp) throws AuthorityException, ServiceException, Throwable {  return pjp.proceed();}  }
class C{  public void dispose(){}  }
class C{  public boolean isLastPublishedVersionAssignedGBIFSupportedLicense(Resource resource){  List<VersionHistory> history=resource.getVersionHistory();  if (!history.isEmpty()) {    VersionHistory latestVersionHistory=history.get(0);    BigDecimal latestVersion=new BigDecimal(latestVersionHistory.getVersion());    File emlFile=cfg.getDataDir().resourceEmlFile(resource.getShortname(),latestVersion);    if (emlFile.exists()) {      try {        LOG.debug("Loading EML from file: " + emlFile.getAbsolutePath());        InputStream in=new FileInputStream(emlFile);        Eml eml=EmlFactory.build(in);        if (eml.parseLicenseUrl() != null) {          LOG.debug("Checking if license (URL=" + eml.parseLicenseUrl() + ") is supported by GBIF..");          return Constants.GBIF_SUPPORTED_LICENSES.contains(eml.parseLicenseUrl());        }      } catch (      Exception e) {        LOG.error("Failed to check if last published version of resource has been assigned a GBIF-supported license: " + e.getMessage(),e);      }    }  }  return false;}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public void insert(LogLine object,int index){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.add(index,object);      if (mNotifyOnChange)       notifyDataSetChanged();    }  } else {    mObjects.add(index,object);    if (mNotifyOnChange)     notifyDataSetChanged();  }}  }
class C{  public void remove(Renderable item){  this.extentTree.remove(item);}  }
class C{  public static Object parsePrimitiveValue(String value,PrimitiveType primitiveType) throws ODataException {switch (primitiveType) {case BOOLEAN:    return Boolean.valueOf(value);case BYTE:  try {    final Integer v=Integer.valueOf(value);    if (v < 0 || v > PARSE_INDEX) {      throwParseException(value,primitiveType,null);    }    return v.byteValue();  } catch (  NumberFormatException e) {    throwParseException(value,primitiveType,e);  }break;case DATE:try {return LocalDate.parse(value);} catch (IllegalArgumentException e) {throwParseException(value,primitiveType,e);}break;case DATE_TIME_OFFSET:try {return ZonedDateTime.parse(value);} catch (IllegalArgumentException e) {throwParseException(value,primitiveType,e);}break;case DURATION:try {return Period.parse(value);} catch (IllegalArgumentException e) {throwParseException(value,primitiveType,e);}break;case TIME_OF_DAY:try {return LocalTime.parse(value);} catch (IllegalArgumentException e) {throwParseException(value,primitiveType,e);}break;case DECIMAL:try {return new BigDecimal(value);} catch (NumberFormatException e) {throwParseException(value,primitiveType,e);}break;case DOUBLE:try {return Double.parseDouble(value);} catch (NumberFormatException e) {throwParseException(value,primitiveType,e);}break;case SINGLE:try {return Float.parseFloat(value);} catch (NumberFormatException e) {throwParseException(value,primitiveType,e);}break;case GUID:try {return UUID.fromString(value);} catch (IllegalArgumentException e) {throwParseException(value,primitiveType,e);}break;case INT16:try {return Short.valueOf(value);} catch (NumberFormatException e) {throwParseException(value,primitiveType,e);}break;case INT32:try {return Integer.valueOf(value);} catch (NumberFormatException e) {throwParseException(value,primitiveType,e);}break;case INT64:try {return Long.valueOf(value);} catch (NumberFormatException e) {throwParseException(value,primitiveType,e);}break;case STRING:return value;case SBYTE:try {return Byte.valueOf(value);} catch (NumberFormatException e) {throwParseException(value,primitiveType,e);}break;default :throw new ODataNotImplementedException("Unsupported primitive type: " + primitiveType + " for value: "+ value);}return null;}  }
class C{  public void init() throws ServletException {}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0) {    usage();    return;  }  Command cmd;  try {    cmd=Command.valueOf(args[0].trim().toUpperCase());  } catch (  IllegalArgumentException e) {    System.err.println("Invalid command " + args[0]);    usage();    return;  }  try {switch (cmd) {case PATH:      if (args.length < 2) {        throw new IllegalArgumentException("The path substring is missing");      }    processZkCmdArgs(args);  initZkCmdHandler(host,port,withData);zkCmdHandler.printNodes(path);break;case SET:if (args.length < 2) {throw new IllegalArgumentException("The path and/or data substring is missing");}processZkCmdArgs(args);initZkCmdHandler(host,port,withData);zkCmdHandler.setNodeData(path);break;case EPHEMERAL:processZkCmdArgs(args);initZkCmdHandler(host,port,withData);zkCmdHandler.printEphemeralNodes();break;case ROLLBACK_DATA_REVISION:if (args.length > 1) {throw new IllegalArgumentException("Invalid paramerters");}System.out.println(rollbackWarnMessage);System.out.print("Do you still want to continue [y/n]:");Scanner userInput=new Scanner(System.in);String answer=userInput.nextLine();if (answer == null || !answer.equals("y")) {System.out.println("You have aborted rollback operation");System.exit(1);}initZkCmdHandler(host,port,withData);zkCmdHandler.rollbackDataRevision();break;case TUNE_DR_CONFIG:if (args.length != 3) {throw new IllegalArgumentException("Invalid parameters");}String key=args[1] != null ? args[1].trim() : "";String value=args[2] != null ? args[2].trim() : "";if (key.isEmpty() || value.isEmpty()) {throw new IllegalArgumentException("Invalid parameters");}processZkCmdArgs(args);initZkCmdHandler(host,port,withData);zkCmdHandler.tuneDrConfig(key,value);break;case GETLASTVALIDZXID:if (args.length > 1) {throw new IllegalArgumentException("Invalid parameters");}initZkTxnHandler();zkTxnHandler.getLastValidZxid();break;case TRUNCATETXNLOG:if (args.length > 2) {throw new IllegalArgumentException("Invalid parameters");}initZkTxnHandler();boolean success=false;if (args.length < 2) {success=zkTxnHandler.truncateToZxid();} else {success=zkTxnHandler.truncateToZxid(args[1]);}if (!success) {System.exit(1);}break;case LOCK:processLockCmdArgs(args);initLockCmdHandler();lockCmdHandler.aquireUpgradeLocks();System.out.println("If you want to upgrade, " + "Please kill this thread and use 'release' command");break;case HOLD:processLockCmdArgs(args);initLockCmdHandler();lockCmdHandler.aquireUpgradeLockByLoop();System.out.println("If you want to continue, Please use 'release' command");stop();break;case RELEASE:processLockCmdArgs(args);initLockCmdHandler();lockCmdHandler.releaseAllLocks();stop();break;case INFO:processLockCmdArgs(args);initLockCmdHandler();lockCmdHandler.getUpgradeLockOwner();stop();break;case RESET:MigrationStatus status=processServiceCmdArgs(args);initServiceCmdHandler();serviceCmdHandler.resetMigrationStatus(status);break;case GETKEYANDCERT:if (args.length > 1) {throw new IllegalArgumentException("Invalid parameters");}initKeystoreCmdHandler();keystoreCmdHandler.getViPRKey();System.out.println();keystoreCmdHandler.getViPRCertificate();break;case EXPORTKEYSTORE:if (args.length > 1) {throw new IllegalArgumentException("Invalid parameters");}initKeystoreCmdHandler();try {keystoreCmdHandler.exportKeystore();} catch (Exception e) {log.error(e.getMessage(),e);System.err.println("Exception e=" + e);System.exit(1);}break;default :throw new IllegalArgumentException("Invalid command");}} catch (Exception e) {System.err.println("Exception e=" + e);usage();} finally {if (!cmd.equals(Command.LOCK)) {stop();}}}  }
class C{  public static void printf(String fmt,double x){  System.out.print(new Format(fmt).format(x));}  }
class C{  public void testLongsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.longs(size).parallel().forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  public void testInit03() throws Exception {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  byte[] bbRes1;  byte[] bbRes2;  byte[] bbRes3;  SecureRandom randomNull=null;  SecureRandom random=new SecureRandom();  for (int i=0; i < kAgs.length; i++) {    kAgs[i].init(privKey);    kAgs[i].doPhase(publKey,true);    bbRes1=kAgs[i].generateSecret();    kAgs[i].init(privKey,random);    kAgs[i].doPhase(publKey,true);    bbRes2=kAgs[i].generateSecret();    assertEquals("Incorrect byte array length",bbRes1.length,bbRes2.length);    for (int j=0; j < bbRes1.length; j++) {      assertEquals("Incorrect byte (index: ".concat(Integer.toString(i)).concat(")"),bbRes1[j],bbRes2[j]);    }    kAgs[i].init(privKey,randomNull);    kAgs[i].doPhase(publKey,true);    bbRes3=kAgs[i].generateSecret();    assertEquals("Incorrect byte array length",bbRes1.length,bbRes3.length);    for (int j=0; j < bbRes1.length; j++) {      assertEquals("Incorrect byte (index: ".concat(Integer.toString(i)).concat(")"),bbRes1[j],bbRes3[j]);    }  }}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public static int createHash(byte[] data,MessageDigest digestFunction){  return createHashes(data,1,digestFunction)[0];}  }
class C{  protected UseStatement_Impl(){  super();}  }
class C{  @Override protected void initData(){}  }
class C{  public void reinitHttpClients(){  httpClientStore.reinit();}  }
class C{  private static void ensurePackages(File pkg) throws IOException {  if (!pkg.exists() && !pkg.mkdirs())   throw new IOException("Failed to create folders for package: " + pkg);}  }
class C{  public void updateReaderAccessibleInfoLeftNodeEdgePool(EdgePool newLeftNodeEdgePool){  leftIndexedReaderAccessibleInfo=new LeftIndexedReaderAccessibleInfo(leftIndexedReaderAccessibleInfo.getLeftNodesToIndexBiMap(),leftIndexedReaderAccessibleInfo.getRightNodesToIndexBiMap(),newLeftNodeEdgePool);}  }
class C{  @POST @Path("apply") @Produces("application/json") @Consumes("application/json") public RefactoringResult applyRefactoring(RefactoringSession session) throws RefactoringException, JavaModelException {  return manager.applyRefactoring(session.getSessionId());}  }
class C{  public List<ConsoleHandler> consoleHandlers(){  return subresources().consoleHandlers();}  }
class C{  @Override public void onCancel(DialogInterface dialog){  super.onCancel(dialog);  if (mListener != null) {    mListener.onDialogCancel();  }}  }
class C{  public static XmlJmapper readAtDevelopmentTime(String xmlPath) throws FileNotFoundException {  return toXmlJmapper(xmlPath,new FileInputStream(searchFile(xmlPath)));}  }
class C{  public void renameDocument(int docId,String name) throws Exception {  m_fdr.getDocumentTree().renameDocument(docId,name);}  }
class C{  public CertificateNotYetValidException(String message){  super(message);}  }
class C{  public List<Integer> emit(Collection<Tuple> anchors,List<Object> tuple){  return emit(Utils.DEFAULT_STREAM_ID,anchors,tuple);}  }
class C{  public long prefixSum(final long index){  return super.getLong(index);}  }
class C{  public void addListener(INotifyChangedListener notifyChangedListener){  changeNotifier.addListener(notifyChangedListener);}  }
class C{  public HomePage loginAs(String userName,String password) throws IOException {  log.info("Login as " + userName);  WebElement userNameField=driver.findElement(By.name(uiElementMapper.getElement("login.username")));  WebElement passwordField=driver.findElement(By.name(uiElementMapper.getElement("login.password")));  userNameField.sendKeys(userName);  passwordField.sendKeys(password);  driver.findElement(By.className(uiElementMapper.getElement("login.sign.in.button"))).click();  return new HomePage(driver);}  }
class C{  public <T extends Serializable>Observable<T> observe(final Task<T> task,final Object routingKey){  return Observable.create(null);}  }
class C{  private void hideSuggestionsIfNecessary(final @NonNull QueryToken currentQuery,final @NonNull TokenSource source){  String queryTS=currentQuery.getTokenString();  String currentTS=source.getCurrentTokenString();  if (!isWaitingForResults(currentQuery) && queryTS != null && queryTS.equals(currentTS)) {    mSuggestionsVisibilityManager.displaySuggestions(false);  }}  }
class C{  public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {  if (jpegStream == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  doExifStreamIO(jpegStream,s);  s.flush();}  }
class C{  private static String escape(String str){  if (str.indexOf(kindSeparator) < 0 && str.indexOf(compSeparator) < 0 && str.indexOf(escapeChar) < 0) {    return str;  } else {    int len=str.length();    int j=0;    char[] newStr=new char[len + len];    for (int i=0; i < len; i++) {      if (isMeta(str.charAt(i))) {        newStr[j++]=escapeChar;      }      newStr[j++]=str.charAt(i);    }    return new String(newStr,0,j);  }}  }
class C{  @Override protected void closing(){}  }
class C{  public BufferedBlockCipher(BlockCipher cipher){  this.cipher=cipher;  buf=new byte[cipher.getBlockSize()];  bufOff=0;  String name=cipher.getAlgorithmName();  int idx=name.indexOf('/') + 1;  pgpCFB=(idx > 0 && name.startsWith("PGP",idx));  if (pgpCFB) {    partialBlockOkay=true;  } else {    partialBlockOkay=(idx > 0 && (name.startsWith("CFB",idx) || name.startsWith("OFB",idx) || name.startsWith("OpenPGP",idx)|| name.startsWith("SIC",idx)|| name.startsWith("GCTR",idx)));  }}  }
class C{  @Override protected void keyTyped(char par1,int par2){  commandBox.textboxKeyTyped(par1,par2);}  }
class C{  private table fillTable_Lookup_Rows(WebSessionCtx wsc,String columnName,int fieldRefId,table table1,String targetBase,boolean mandatory,boolean onlyValidated,boolean onlyActive,boolean temporary,int page){  StringBuffer sqlSelect=null;  StringBuffer sqlCount=null;  String sql=null;  String colKey=null;  String colDisplay=null;  if (fieldRefId > 0) {    sql="SELECT AD_Table_ID, AD_Key, AD_Display, WhereClause, OrderByClause FROM AD_Ref_Table WHERE AD_Reference_ID = " + fieldRefId;    int tableID=0;    String whereClause=null;    String orderBy=null;    try {      PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);      ResultSet rs=pstmt.executeQuery();      if (rs.next()) {        tableID=rs.getInt(1);        whereClause=rs.getString(4);        orderBy=rs.getString(5);        sql="Select ColumnName FROM AD_Column Where AD_Column_ID = ? AND AD_Table_ID = ?";        colKey=DB.getSQLValueString(null,sql,rs.getInt(2),tableID);        colDisplay=DB.getSQLValueString(null,sql,rs.getInt(3),tableID);      }      rs.close();      pstmt.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,sql.toString(),e);    }    sql="Select TableName FROM AD_Table Where AD_Table_ID = ?";    String tableName=DB.getSQLValueString(null,sql,tableID);    sqlSelect=new StringBuffer("SELECT " + m_HeaderSelect + " FROM "+ tableName+ " WHERE AD_Client_ID=?");    sqlCount=new StringBuffer("SELECT count(*) FROM " + tableName + " WHERE AD_Client_ID=?");    if (whereClause != null) {      sqlSelect.append(" AND " + whereClause);      sqlCount.append(" AND " + whereClause);    }    if (orderBy != null)     sqlSelect.append(" ORDER BY " + orderBy);  } else {    sqlSelect=new StringBuffer("SELECT " + m_HeaderSelect + " FROM "+ columnName.replace("_ID","")+ " WHERE AD_Client_ID=?");    sqlCount=new StringBuffer("SELECT count(*) FROM " + columnName.replace("_ID","") + " WHERE AD_Client_ID=?");    colKey=columnName;    if (m_HeaderSelect.toString().contains("Name"))     colDisplay="Name"; else     colDisplay="Description";  }  try {    PreparedStatement pstmt=DB.prepareStatement(sqlSelect.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY,null);    pstmt.setInt(1,Env.getAD_Client_ID(wsc.ctx));    ResultSet rs=pstmt.executeQuery();    log.info("This is the page number " + page);    log.info("This is the MAX_LINES " + MAX_LINES);    while (rs.next()) {      button button=new button();      button.addElement("&gt;");      StringBuffer script=new StringBuffer();      script.append("startLookUpdate(").append(targetBase).append("F',").append(targetBase).append("D','").append(rs.getString(colKey)).append("',").append(targetBase).append("F','").append(rs.getString(colDisplay)).append("');startUpdate(").append(targetBase).append("');return false;");      button.setOnClick(script.toString());      tr line=new tr();      line.addElement(new td(button));      for (int i=1; i <= m_colCount; i++) {        line.addElement(new td(rs.getString(i)));      }      table1.addElement(line);    }    m_recordCount=DB.getSQLValue(null,sqlCount.toString(),Env.getAD_Client_ID(wsc.ctx));    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  return table1;}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  if (dataset != null) {    return DatasetUtilities.findRangeBounds(dataset,true);  } else {    return null;  }}  }
class C{  public LinearDelayStrategy(final int minDelay,final int maxDelay,final int iterations){  super(iterations);  this.minDelay=minDelay;  this.delayStep=(float)(maxDelay - minDelay) / (iterations - 1);}  }
class C{  public ForgeDirection directionTo(WorldCoord loc){  int ox=this.x - loc.x;  int oy=this.y - loc.y;  int oz=this.z - loc.z;  int xlen=Math.abs(ox);  int ylen=Math.abs(oy);  int zlen=Math.abs(oz);  if (loc.isEqual(this.copy().add(ForgeDirection.EAST,xlen))) {    return ForgeDirection.EAST;  }  if (loc.isEqual(this.copy().add(ForgeDirection.WEST,xlen))) {    return ForgeDirection.WEST;  }  if (loc.isEqual(this.copy().add(ForgeDirection.NORTH,zlen))) {    return ForgeDirection.NORTH;  }  if (loc.isEqual(this.copy().add(ForgeDirection.SOUTH,zlen))) {    return ForgeDirection.SOUTH;  }  if (loc.isEqual(this.copy().add(ForgeDirection.UP,ylen))) {    return ForgeDirection.UP;  }  if (loc.isEqual(this.copy().add(ForgeDirection.DOWN,ylen))) {    return ForgeDirection.DOWN;  }  return null;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"lodsd");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a lodsd instruction (invalid number of operand)");  }  new LodsGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.DWORD,instructions);}  }
class C{  public void exportAllPackagesTo(JLRModule module){  if (this != module) {    for (    String pkg : getPackages()) {      if (!isExported(pkg,module)) {        addExports(pkg,module);      }    }  }}  }
class C{  @Override public int bulkInsertCharacters(Uri uri,ContentValues[] cvsArray){  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();  int returnCount=0;  db.beginTransaction();  try {    for (    ContentValues cvs : cvsArray) {      final long id=db.insert(CharacterContract.CharacterEntry.TABLE_NAME,null,cvs);      if (id != -1)       returnCount++;    }    db.setTransactionSuccessful();  }  finally {    db.endTransaction();  }  return returnCount;}  }
class C{  private void appendTypeParameters(final List<String> types){  boolean first=true;  for (  final String typeValue : types) {    if (VCardConfig.isVersion30(mVCardType) || VCardConfig.isVersion40(mVCardType)) {      final String encoded=(VCardConfig.isVersion40(mVCardType) ? VCardUtils.toStringAsV40ParamValue(typeValue) : VCardUtils.toStringAsV30ParamValue(typeValue));      if (TextUtils.isEmpty(encoded)) {        continue;      }      if (first) {        first=false;      } else {        mBuilder.append(VCARD_PARAM_SEPARATOR);      }      appendTypeParameter(encoded);    } else {      if (!VCardUtils.isV21Word(typeValue)) {        continue;      }      if (first) {        first=false;      } else {        mBuilder.append(VCARD_PARAM_SEPARATOR);      }      appendTypeParameter(typeValue);    }  }}  }
class C{  private void checkClient(){  if (client == null) {    throw new IllegalStateException("LazyConnectExchangeClient state error. the client has not be init .url:" + url);  }}  }
class C{  private void ruleR3(){  List<Node> nodes=graph.getNodes();  for (  Node B : nodes) {    List<Node> intoBArrows=graph.getNodesInTo(B,Endpoint.ARROW);    List<Node> intoBCircles=graph.getNodesInTo(B,Endpoint.CIRCLE);    for (    Node D : intoBCircles) {      if (intoBArrows.size() < 2) {        continue;      }      ChoiceGenerator gen=new ChoiceGenerator(intoBArrows.size(),2);      int[] choice;      while ((choice=gen.next()) != null) {        Node A=intoBArrows.get(choice[0]);        Node C=intoBArrows.get(choice[1]);        if (graph.isAdjacentTo(A,C)) {          continue;        }        if (!graph.isAdjacentTo(A,D) || !graph.isAdjacentTo(C,D)) {          continue;        }        if (graph.getEndpoint(A,D) != Endpoint.CIRCLE) {          continue;        }        if (graph.getEndpoint(C,D) != Endpoint.CIRCLE) {          continue;        }        if (!isArrowpointAllowed(D,B)) {          continue;        }        graph.setEndpoint(D,B,Endpoint.ARROW);        logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Double triangle",graph.getEdge(D,B)));        changeFlag=true;      }    }  }}  }
class C{  public void dropCachedString(){  this.cachedToString=null;}  }
class C{  public static void main(String[] args){  GenericObjectEditorDialog dialog=new GenericObjectEditorDialog((Frame)null,"Object editor",true);  dialog.setDefaultCloseOperation(GenericObjectEditorDialog.DISPOSE_ON_CLOSE);  dialog.getGOEEditor().setClassType(meka.classifiers.multilabel.MultiLabelClassifier.class);  dialog.getGOEEditor().setCanChangeClassInDialog(true);  dialog.setCurrent(new meka.classifiers.multilabel.BR());  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);  if (dialog.getResult() == APPROVE_OPTION)   System.out.println(dialog.getCurrent());}  }
class C{  int calculateWidth(int height,double ratio){  return (int)Math.round(height * ratio);}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.958 -0500",hash_original_method="5042F246D8D2B46884C265425E52DAB1",hash_generated_method="4E7506FBCEA4CF0F1FB89CF1297ECA6A") public void sendDataMessage(String destinationAddress,String scAddress,short destinationPort,byte[] data,PendingIntent sentIntent,PendingIntent deliveryIntent){  if (TextUtils.isEmpty(destinationAddress)) {    throw new IllegalArgumentException("Invalid destinationAddress");  }  if (data == null || data.length == 0) {    throw new IllegalArgumentException("Invalid message data");  }  try {    ISms iccISms=ISms.Stub.asInterface(ServiceManager.getService("isms"));    if (iccISms != null) {      iccISms.sendData(destinationAddress,scAddress,destinationPort & 0xFFFF,data,sentIntent,deliveryIntent);    }  } catch (  RemoteException ex) {  }}  }
class C{  @RequestMapping(path="utils/i18n/localesAndTimezones",method=RequestMethod.GET) LocalesAndTimezonesWrapper availableLocalesAndTimezones(){  return new LocalesAndTimezonesWrapper(Arrays.asList(Locale.getAvailableLocales()),Arrays.asList(TimeZone.getAvailableIDs()));}  }
class C{  public SegmentKelp createSegment(int length,byte[] tableKey,long sequence){  SegmentMeta segmentMeta=findSegmentMeta(length);  SegmentKelp segment;  SegmentExtent extent=segmentMeta.allocate();  if (extent == null) {    extent=allocateSegment(segmentMeta);  }  segment=new SegmentKelp(extent,sequence,tableKey,this);  segment.writing();  segmentMeta.addLoaded(segment);  return segment;}  }
class C{  public Range(Range range){  if (range == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Range","constructor","missingRange"));  }  this.lower=range.lower;  this.upper=range.upper;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + (int)(est ^ (est >>> 32));  return result;}  }
class C{  protected EncodedImage(int width,int height){  super(null);  this.width=width;  this.height=height;}  }
class C{  public static boolean checkCGCreatedOnBackEndArray(Volume volume){  return (volume != null && NullColumnValueGetter.isNotNullValue(volume.getReplicationGroupInstance()));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.588 -0500",hash_original_method="68BC2FB84293153DDA759DD543D07116",hash_generated_method="E9D95458346F1EDE704F92515B0B8589") private static boolean checkOtaSpNumBasedOnSysSelCode(int sysSelCodeInt,String sch[]){  boolean isOtaSpNum=false;  try {    int selRc=Integer.parseInt((String)sch[1]);    for (int i=0; i < selRc; i++) {      if (!TextUtils.isEmpty(sch[i + 2]) && !TextUtils.isEmpty(sch[i + 3])) {        int selMin=Integer.parseInt((String)sch[i + 2]);        int selMax=Integer.parseInt((String)sch[i + 3]);        if ((sysSelCodeInt >= selMin) && (sysSelCodeInt <= selMax)) {          isOtaSpNum=true;          break;        }      }    }  } catch (  NumberFormatException ex) {    Log.e(LOG_TAG,"checkOtaSpNumBasedOnSysSelCode, error",ex);  }  return isOtaSpNum;}  }
class C{  public synchronized void stop(){  doStop();}  }
class C{  public void quickSortFromTo(int from,int to){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  cern.colt.Sorting.quickSort(elements,from,to + 1);}  }
class C{  public static void ensureCollection(JsonNode resource){  JsonNode node=ensureDataNode(resource);  if (!node.isArray() && !node.isNull()) {    throw new IllegalArgumentException("'data' node is not an array!");  }}  }
class C{  public void registerAttribute(A attribute){  if (null == attribute)   return;  boolean listeningAlready=false;  for (  PropertyChangeListener listener : attribute.getPropertyChangeListeners(Attribute.QUALIFIER_PROPERTY)) {    if (ATTRIBUTE_WORKER == listener) {      listeningAlready=true;      break;    }  }  if (!listeningAlready) {    attribute.addPropertyChangeListener(Attribute.QUALIFIER_PROPERTY,ATTRIBUTE_WORKER);  }  addAttributeByQualifier(attribute);  addAttributeById(attribute);}  }
class C{  public IgfsPath suffix(String suffix){  A.ensure(!F.isEmpty(suffix),"'suffix' is null or empty.");  A.ensure(!suffix.contains(SLASH),"'suffix' contains file's separator '" + SLASH + "'");  return new IgfsPath(path + suffix);}  }
class C{  public Beans(){}  }
class C{  protected void prepareBlockCleanup(final Exchange exchange){  if (executor.isShutdown()) {    LOGGER.info("Endpoint is being destroyed: skipping block clean-up");    return;  }  BlockCleanupTask task=new BlockCleanupTask(exchange);  ScheduledFuture<?> f=executor.schedule(task,block_timeout,TimeUnit.MILLISECONDS);  exchange.setBlockCleanupHandle(f);}  }
class C{  protected void initBPartner(boolean forInvoice) throws Exception {  int AD_Column_ID=3499;  MLookup lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,AD_Column_ID,DisplayType.Search);  bPartnerField=new WSearchEditor("C_BPartner_ID",true,false,true,lookup);  int C_BPartner_ID=Env.getContextAsInt(Env.getCtx(),p_WindowNo,"C_BPartner_ID");  bPartnerField.setValue(new Integer(C_BPartner_ID));  initBPOrderDetails(C_BPartner_ID,forInvoice);}  }
class C{  public int toHashCode(){  return iTotal;}  }
class C{  public void write(Buffer buffer) throws Exception {  MediaSample sample=new MediaSample((byte[])buffer.getData(),buffer.getTimeStamp(),buffer.getSequenceNumber());  renderer.writeSample(sample);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return XBoolean.S_TRUE;}  }
class C{  public static boolean isAlphaSpace(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if ((Character.isLetter(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {      return false;    }  }  return true;}  }
class C{  @Override @Inline public final void processEdge(ObjectReference source,Address slot){  ObjectReference object=VM.activePlan.global().loadObjectReference(slot);  ObjectReference newObject=traceObject(object,false);  if (overwriteReferenceDuringTrace()) {    VM.activePlan.global().storeObjectReference(slot,newObject);  }}  }
class C{  public static int[] HSLtoRGB(float h,float s,float l,int[] rgb){  if (rgb == null) {    rgb=new int[3];  } else   if (rgb.length < 3) {    throw new IllegalArgumentException("rgb array must have a length of" + " at least 3");  }  if (h < 0)   h=0.0f; else   if (h > 1.0f)   h=1.0f;  if (s < 0)   s=0.0f; else   if (s > 1.0f)   s=1.0f;  if (l < 0)   l=0.0f; else   if (l > 1.0f)   l=1.0f;  int R, G, B;  if (s - 0.01f <= 0.0f) {    R=(int)(l * 255.0f);    G=(int)(l * 255.0f);    B=(int)(l * 255.0f);  } else {    float var_1, var_2;    if (l < 0.5f) {      var_2=l * (1 + s);    } else {      var_2=(l + s) - (s * l);    }    var_1=2 * l - var_2;    R=(int)(255.0f * hue2RGB(var_1,var_2,h + (1.0f / 3.0f)));    G=(int)(255.0f * hue2RGB(var_1,var_2,h));    B=(int)(255.0f * hue2RGB(var_1,var_2,h - (1.0f / 3.0f)));  }  rgb[0]=R;  rgb[1]=G;  rgb[2]=B;  return rgb;}  }
class C{  public NoSuchElementException(java.lang.String s){}  }
class C{  public SubscriptionAlreadyExistsException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public MemberDefinition lookupSig(Identifier name,Type type){  Iterator matches=lookupName(name);  MemberDefinition candidate;  while (matches.hasNext()) {    candidate=(MemberDefinition)matches.next();    if (candidate.getType().equalArguments(type)) {      return candidate;    }  }  return null;}  }
class C{  private void cancelPreviousWebRtcNotifications(){  Set<String> notificationIds=mSharedPreferences.getStringSet(MEDIA_NOTIFICATION_IDS,null);  if (notificationIds == null)   return;  Iterator<String> iterator=notificationIds.iterator();  while (iterator.hasNext()) {    mNotificationManager.cancel(NOTIFICATION_NAMESPACE,Integer.parseInt(iterator.next()));  }  SharedPreferences.Editor sharedPreferenceEditor=mSharedPreferences.edit();  sharedPreferenceEditor.remove(MediaNotificationService.MEDIA_NOTIFICATION_IDS);  sharedPreferenceEditor.apply();}  }
class C{  @Interruptible public static void stopAll(){  stopAllCounters();  Stats.printStats();  if (Options.xmlStats.getValue()) {    Xml.begin();    Xml.closeTag("mmtk-stats");    Xml.end();  }}  }
class C{  public boolean inStylusButtonPressed(){  return mIsButtonPressed;}  }
class C{  public ComplexPrimeCICDecimate(int decimation,int order,int passFrequency,int attenuation,WindowType windowType){  assert (decimation <= 700);  List<Integer> stageSizes=getPrimeFactors(decimation);  for (int x=0; x < stageSizes.size(); x++) {    DecimatingStage stage=new DecimatingStage(stageSizes.get(x),order);    mDecimatingStages.add(stage);    if (x == 0) {      mFirstDecimatingStage=stage;    } else {      mDecimatingStages.get(x - 1).setListener(stage);    }  }  mOutput=new Output(48000,passFrequency,attenuation,windowType);  mDecimatingStages.get(mDecimatingStages.size() - 1).setListener(mOutput);}  }
class C{  public void insertElementAt(int value,int at){  if (null == m_map) {    m_map=new int[m_blocksize];    m_mapSize=m_blocksize;  } else   if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  public static List<AnnotatedTypeMirror> expandVarArgs(AnnotatedTypeFactory atypeFactory,AnnotatedExecutableType method,List<? extends ExpressionTree> args){  List<AnnotatedTypeMirror> parameters=method.getParameterTypes();  if (!method.getElement().isVarArgs()) {    return parameters;  }  AnnotatedArrayType varargs=(AnnotatedArrayType)parameters.get(parameters.size() - 1);  if (parameters.size() == args.size()) {    AnnotatedTypeMirror lastArg=atypeFactory.getAnnotatedType(args.get(args.size() - 1));    if (lastArg.getKind() == TypeKind.ARRAY && getArrayDepth(varargs) == getArrayDepth((AnnotatedArrayType)lastArg)) {      return parameters;    }  }  parameters=new ArrayList<>(parameters.subList(0,parameters.size() - 1));  for (int i=args.size() - parameters.size(); i > 0; --i) {    parameters.add(varargs.getComponentType());  }  return parameters;}  }
class C{  AlignmentPattern find() throws NotFoundException {  int startX=this.startX;  int height=this.height;  int maxJ=startX + width;  int middleI=startY + (height >> 1);  int[] stateCount=new int[3];  for (int iGen=0; iGen < height; iGen++) {    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) >> 1 : -((iGen + 1) >> 1));    stateCount[0]=0;    stateCount[1]=0;    stateCount[2]=0;    int j=startX;    while (j < maxJ && !image.get(j,i)) {      j++;    }    int currentState=0;    while (j < maxJ) {      if (image.get(j,i)) {        if (currentState == 1) {          stateCount[currentState]++;        } else {          if (currentState == 2) {            if (foundPatternCross(stateCount)) {              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);              if (confirmed != null) {                return confirmed;              }            }            stateCount[0]=stateCount[2];            stateCount[1]=1;            stateCount[2]=0;            currentState=1;          } else {            stateCount[++currentState]++;          }        }      } else {        if (currentState == 1) {          currentState++;        }        stateCount[currentState]++;      }      j++;    }    if (foundPatternCross(stateCount)) {      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);      if (confirmed != null) {        return confirmed;      }    }  }  if (!possibleCenters.isEmpty()) {    return possibleCenters.get(0);  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public static void main(String[] args){  try {    Reader r=null;    if (args.length != 1) {      throw (new Exception("Usage: XMLInstances <filename>"));    } else {      InputStream in=new FileInputStream(args[0]);      if (args[0].endsWith(".gz")) {        in=new GZIPInputStream(in);      }      r=new BufferedReader(new InputStreamReader(in));    }    if (args[0].endsWith(Instances.FILE_EXTENSION)) {      XMLInstances i=new XMLInstances(new Instances(r));      System.out.println(i.toString());    } else {      Instances i=new XMLInstances(r).getInstances();      System.out.println(i.toSummaryString());    }  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public static Angle average(Angle a,Angle b){  if (a == null || b == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return Angle.fromDegrees(0.5 * (a.degrees + b.degrees));}  }
class C{  final public void println(int v){  try {    _out.println(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public static double mixDouble(double amount,double value1,double value2){  if (amount < 0)   return value1; else   if (amount > 1)   return value2;  return value1 * (1.0 - amount) + value2 * amount;}  }
class C{  public REPLMessage(String key,String value){  this();  map.put(key,value);}  }
class C{  public static boolean isNodeAfter(Node node1,Node node2){  if (node1 == node2 || isNodeTheSame(node1,node2))   return true;  boolean isNodeAfter=true;  Node parent1=getParentOfNode(node1);  Node parent2=getParentOfNode(node2);  if (parent1 == parent2 || isNodeTheSame(parent1,parent2)) {    if (null != parent1)     isNodeAfter=isNodeAfterSibling(parent1,node1,node2); else {    }  } else {    int nParents1=2, nParents2=2;    while (parent1 != null) {      nParents1++;      parent1=getParentOfNode(parent1);    }    while (parent2 != null) {      nParents2++;      parent2=getParentOfNode(parent2);    }    Node startNode1=node1, startNode2=node2;    if (nParents1 < nParents2) {      int adjust=nParents2 - nParents1;      for (int i=0; i < adjust; i++) {        startNode2=getParentOfNode(startNode2);      }    } else     if (nParents1 > nParents2) {      int adjust=nParents1 - nParents2;      for (int i=0; i < adjust; i++) {        startNode1=getParentOfNode(startNode1);      }    }    Node prevChild1=null, prevChild2=null;    while (null != startNode1) {      if (startNode1 == startNode2 || isNodeTheSame(startNode1,startNode2)) {        if (null == prevChild1) {          isNodeAfter=(nParents1 < nParents2) ? true : false;          break;        } else {          isNodeAfter=isNodeAfterSibling(startNode1,prevChild1,prevChild2);          break;        }      }      prevChild1=startNode1;      startNode1=getParentOfNode(startNode1);      prevChild2=startNode2;      startNode2=getParentOfNode(startNode2);    }  }  return isNodeAfter;}  }
class C{  public RotateLogEvent(byte[] buffer,int eventLength,FormatDescriptionLogEvent descriptionEvent,String currentPosition) throws ReplicatorException {  super(buffer,descriptionEvent,MysqlBinlog.START_EVENT_V3);  this.startPosition=currentPosition;  type=MysqlBinlog.ROTATE_EVENT;  int headerSize=descriptionEvent.commonHeaderLength;  int postHeaderLength=descriptionEvent.postHeaderLength[MysqlBinlog.ROTATE_EVENT - 1];  int filenameOffset=headerSize + postHeaderLength;  if (eventLength < headerSize) {    throw new MySQLExtractException("Rotate event length is too short");  }  filenameLength=eventLength - filenameOffset;  if (descriptionEvent.useChecksum()) {    filenameLength-=4;  }  if (filenameLength > MysqlBinlog.FN_REFLEN - 1) {    filenameLength=MysqlBinlog.FN_REFLEN - 1;  }  filename=new String(buffer,filenameOffset,filenameLength);  if (logger.isDebugEnabled())   logger.debug("New binlog file is : " + filename);  doChecksum(buffer,filenameOffset + filenameLength,descriptionEvent);}  }
class C{  public static String saveCSV(Context context){  FileOutputStream foStream=null;  PrintStream printStream=null;  ZipOutputStream zipOutputStream=null;  String zipFilename=null;  try {    final String databaseName=new Configuration.Builder(context).create().getDatabaseName();    final String dir=getExternalDir(context);    makeSureDirectoryExists(dir);    final StringBuilder sb=new StringBuilder();    sb.append(dir);    sb.append("/exportCSV");    sb.append(DateFormat.format("yyyyMMdd-kkmmss",System.currentTimeMillis()));    sb.append(".zip");    zipFilename=sb.toString();    final File sd=Environment.getExternalStorageDirectory();    if (sd.canWrite()) {      final File zipOutputFile=new File(zipFilename);      foStream=new FileOutputStream(zipOutputFile);      zipOutputStream=new ZipOutputStream(new BufferedOutputStream(foStream));      zipOutputStream.putNextEntry(new ZipEntry("export" + DateFormat.format("yyyyMMdd-kkmmss",System.currentTimeMillis()) + ".csv"));      printStream=new PrintStream(zipOutputStream);      printStream.println("DAY;TIME;UDT_CGMS");      SQLiteDatabase db=Cache.openDatabase();      Cursor cur=db.query("bgreadings",new String[]{"timestamp","calculated_value"},null,null,null,null,null);      double value;      long timestamp;      java.text.DateFormat df=new SimpleDateFormat("dd.MM.yyyy;HH:mm;");      Date date=new Date();      if (cur.moveToFirst()) {        do {          timestamp=cur.getLong(0);          value=cur.getDouble(1);          if (value > 13) {            date.setTime(timestamp);            printStream.println(df.format(date) + Math.round(value));          }        } while (cur.moveToNext());      }      printStream.flush();    } else {      toastText(context,"SD card not writable!");      Log.d(TAG,"SD card not writable!");    }  } catch (  IOException e) {    toastText(context,"SD card not writable!");    Log.e(TAG,"Exception while writing DB",e);  } finally {    if (printStream != null) {      printStream.close();    }    if (zipOutputStream != null)     try {      zipOutputStream.close();    } catch (    IOException e1) {      Log.e(TAG,"Something went wrong closing: ",e1);    }  }  return zipFilename;}  }
class C{  private boolean readMetaTable(ReadStream is,int crc) throws IOException {  byte[] key=new byte[TABLE_KEY_SIZE];  is.read(key,0,key.length);  crc=Crc32Caucho.generate(crc,key);  int rowLength=BitsUtil.readInt16(is);  crc=Crc32Caucho.generateInt16(crc,rowLength);  int keyOffset=BitsUtil.readInt16(is);  crc=Crc32Caucho.generateInt16(crc,keyOffset);  int keyLength=BitsUtil.readInt16(is);  crc=Crc32Caucho.generateInt16(crc,keyLength);  int dataLength=BitsUtil.readInt16(is);  crc=Crc32Caucho.generateInt16(crc,dataLength);  byte[] data=new byte[dataLength];  is.read(data);  crc=Crc32Caucho.generate(crc,data);  int crcFile=BitsUtil.readInt(is);  if (crcFile != crc) {    log.fine("meta-table crc mismatch");    System.out.println("meta-table crc mismatch");    return false;  }  RowUpgrade row=new RowUpgrade10(keyOffset,keyLength).read(data);  TableEntry10 table=new TableEntry10(key,rowLength,keyOffset,keyLength,row);  _tableList.add(table);  return true;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public boolean slotsAreEmpty(@Nonnull IInventory inv,@Nonnull int[] slots){  for (  int slot : slots) {    if (inv.getStackInSlot(slot) != null)     return false;  }  return true;}  }
class C{  public FunctionScoreQueryBuilder maxBoost(float maxBoost){  this.maxBoost=maxBoost;  return this;}  }
class C{  public static boolean isValidExpression(String cronExpression){  try {    new CronExpression(cronExpression);  } catch (  ParseException pe) {    return false;  }  return true;}  }
class C{  public EventFilterResult clone(){  EventFilterResult result=new EventFilterResult();  result.SelectClauseResults=SelectClauseResults == null ? null : SelectClauseResults.clone();  result.SelectClauseDiagnosticInfos=SelectClauseDiagnosticInfos == null ? null : SelectClauseDiagnosticInfos.clone();  result.WhereClauseResult=WhereClauseResult == null ? null : WhereClauseResult.clone();  return result;}  }
class C{  public boolean shouldRenderSelection(Component c){  if (c.isCellRenderer()) {    return shouldRenderSelection();  }  return !pureTouch || lastInteractionWasKeypad || (pointerPressedAndNotReleasedOrDragged && c.contains(pointerX,pointerY));}  }
class C{  public _ContinuousIntegrationType(){  super();}  }
class C{  public static String generateNoteTitle(String content){  return getLineWithoutMarkDown(content,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.267 -0500",hash_original_method="49572B82831972D93E19442EBCB45603",hash_generated_method="13E65AD99B01F913396CAB401CA08CE1") public PackedIntVector(int columns){  mColumns=columns;  mRows=0;  mRowGapStart=0;  mRowGapLength=mRows;  mValues=null;  mValueGap=new int[2 * columns];}  }
class C{  public XValues intersect(XValues other,boolean nanPriority){  Double maxLeft=left;  Double minRight=right;  if (nanPriority) {    if (other.left.equals(Double.NaN) || other.left > left) {      maxLeft=other.left;    }    if (other.right.equals(Double.NaN) || other.right < right) {      minRight=other.right;    }  } else {    if (left.equals(Double.NaN) || other.left > left) {      maxLeft=other.left;    }    if (right.equals(Double.NaN) || other.right < right) {      minRight=other.right;    }  }  return new XValues(maxLeft,minRight);}  }
class C{  public T displayadId(String value){  setString(DISPLAY_ADS_ID,value);  return (T)this;}  }
class C{  public boolean isAccept(int format){  return accept != null && accept == format;}  }
class C{  public void testHllOptions() throws Exception {  SolrCore core=h.getCore();  SchemaField field_l=core.getLatestSchema().getField("field_l");  SchemaField field_d=core.getLatestSchema().getField("field_d");  SchemaField field_dt=core.getLatestSchema().getField("field_dt");  SchemaField field_s=core.getLatestSchema().getField("field_s");  SchemaField field_i=core.getLatestSchema().getField("field_i");  SchemaField field_f=core.getLatestSchema().getField("field_f");  SchemaField field_severity=core.getLatestSchema().getField("severity");  assertNull(HllOptions.parseHllOptions(params(),field_l));  assertNull(HllOptions.parseHllOptions(params("cardinality","false"),field_l));  assertEquals("HLL Changed definition min for log2m, " + "need to note in upgrade instructions and maybe adjust accuracy hueristic",4,HLL.MINIMUM_LOG2M_PARAM);  assertEquals("HLL Changed definition max for log2m, " + "need to note in upgrade instructions and maybe adjust accuracy hueristic",30,HLL.MAXIMUM_LOG2M_PARAM);  assertEquals("HLL Changed definition min for regwidth, " + "need to note in upgrade instructions and probably adjust hueristic",1,HLL.MINIMUM_REGWIDTH_PARAM);  assertEquals("HLL Changed definition max for regwidth, " + "need to note in upgrade instructions and probably adjust hueristic",8,HLL.MAXIMUM_REGWIDTH_PARAM);  SolrParams[] longDefaultParams=new SolrParams[]{params("cardinality","true"),params("cardinality","0.33"),params("cardinality","true","hllLog2m","13"),params("cardinality","true","hllRegwidth","6"),params("cardinality","true","hllPreHash","false"),params("cardinality","true","hllLog2m","13","hllRegwidth","6","hllPreHash","false"),params("cardinality","1.0","hllLog2m","13","hllRegwidth","6"),params("cardinality","0.0","hllLog2m","13","hllRegwidth","6","hllPreHash","false")};  for (  SchemaField field : new SchemaField[]{field_l,field_d,field_dt,field_s}) {    final String f=field.getName();    for (    SolrParams p : longDefaultParams) {      HllOptions opts=HllOptions.parseHllOptions(p,field);      assertEquals(f + " long defaults: " + p,13,opts.getLog2m());      assertEquals(f + " long defaults: " + p,6,opts.getRegwidth());      assertNotNull(f + " long defaults: " + p,opts.getHasher());    }    HllOptions optsMin=HllOptions.parseHllOptions(params("cardinality","0"),field);    assertEquals(f + " min log2m",HLL.MINIMUM_LOG2M_PARAM,optsMin.getLog2m());    assertEquals(f + " min regwidth",5,optsMin.getRegwidth());    HllOptions optsMax=HllOptions.parseHllOptions(params("cardinality","1"),field);    assertEquals(f + " max log2m",HLL.MAXIMUM_LOG2M_PARAM,optsMax.getLog2m());    assertEquals(f + " max regwidth",HLL.MAXIMUM_REGWIDTH_PARAM,optsMax.getRegwidth());  }  SolrParams[] intDefaultParams=new SolrParams[]{params("cardinality","true"),params("cardinality","0.33"),params("cardinality","true","hllLog2m","13"),params("cardinality","true","hllRegwidth","5"),params("cardinality","true","hllPreHash","false"),params("cardinality","true","hllLog2m","13","hllRegwidth","5","hllPreHash","false"),params("cardinality","1.0","hllLog2m","13","hllRegwidth","5"),params("cardinality","0.0","hllLog2m","13","hllRegwidth","5","hllPreHash","false")};  for (  SchemaField field : new SchemaField[]{field_i,field_f,field_severity,null}) {    final String f=null == field ? "(func)" : field.getName();    for (    SolrParams p : intDefaultParams) {      HllOptions opts=HllOptions.parseHllOptions(p,field);      assertEquals(f + " int defaults: " + p,13,opts.getLog2m());      assertEquals(f + " int defaults: " + p,5,opts.getRegwidth());      assertNotNull(f + " int defaults: " + p,opts.getHasher());    }    HllOptions optsMin=HllOptions.parseHllOptions(params("cardinality","0"),field);    assertEquals(f + " min log2m",HLL.MINIMUM_LOG2M_PARAM,optsMin.getLog2m());    assertEquals(f + " min regwidth",4,optsMin.getRegwidth());    HllOptions optsMax=HllOptions.parseHllOptions(params("cardinality","1"),field);    assertEquals(f + " max log2m",HLL.MAXIMUM_LOG2M_PARAM,optsMax.getLog2m());    assertEquals(f + " max regwidth",HLL.MAXIMUM_REGWIDTH_PARAM,optsMax.getRegwidth());  }  assertNotNull(HllOptions.parseHllOptions(params("cardinality","true"),field_l).getHasher());  assertNotNull(HllOptions.parseHllOptions(params("cardinality","true","hllPreHashed","false"),field_l).getHasher());  assertNull(HllOptions.parseHllOptions(params("cardinality","true","hllPreHashed","true"),field_l).getHasher());}  }
class C{  public SphericalPolarCoordinates(double latitude,double longitude){  this(latitude,longitude,VOLUMETRIC_RADIUS_OF_EARTH);}  }
class C{  public void start(){  if (context instanceof Application) {    ((Application)context).registerActivityLifecycleCallbacks(callbacks);    callbacksIsRegistered=true;  } else {    utils.logIssue("EventTracker could not start.  Context is not of type Application",null);  }}  }
class C{  public static InputLocationMessageContentBuilder builder(){  return new InputLocationMessageContentBuilder();}  }
class C{  public void onConfigurationChanged(){  int curFirst=pager.getCurrentScreen() * PAGE_SIZE;  calPageSize();  int newPage=curFirst / PAGE_SIZE;  removeViewAt(1);  afterPlatformListGot();  pager.setCurrentScreen(newPage);}  }
class C{  public WriteException(Collection<WriteRequest> requests,String message,Throwable cause){  super(message);  initCause(cause);  this.requests=asRequestList(requests);}  }
class C{  protected User(){  super();  loadLazy();}  }
class C{  @Override public void visitTree(JCTree tree){  result=null;}  }
class C{  @RequestMapping(value="/stub/admin/users") public ResponseEntity<?> usersList(@RequestParam(value="filter",defaultValue="") String filter,@RequestParam(value="offset",defaultValue="0") int start,@RequestParam(value="limit",defaultValue="") int count) throws UserServiceException {  fr.gael.dhus.service.UserService userService=ApplicationContextProvider.getBean(fr.gael.dhus.service.UserService.class);  try {    Iterator<User> it=userService.getUsersByFilter(filter,start);    List<UserData> userDatas=convertUserToUserData(it,count);    return new ResponseEntity<>(userDatas,HttpStatus.OK);  } catch (  AccessDeniedException e) {    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    throw new UserServiceException(e.getMessage());  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  protected void assertSenderConfig(String config) throws Exception {  Thread.currentThread().setContextClassLoader(SpringTest.class.getClassLoader());  context=new ClassPathXmlApplicationContext(config);  consumer=(SpringConsumer)context.getBean("consumer");  assertTrue("Found a valid consumer",consumer != null);  consumer.start();  Thread.sleep(1000);  consumer.flushMessages();  producer=(SpringProducer)context.getBean("producer");  assertTrue("Found a valid producer",producer != null);  producer.start();  consumer.waitForMessagesToArrive(producer.getMessageCount());  List<Message> messages=consumer.flushMessages();  LOG.info("Consumer has received messages....");  for (Iterator<Message> iter=messages.iterator(); iter.hasNext(); ) {    Object message=iter.next();    LOG.info("Received: " + message);  }  assertEquals("Message count",producer.getMessageCount(),messages.size());}  }
class C{  public synchronized Iterator<Relationship> orderedAllRelationships(){  return new RelationshipIterator(true);}  }
class C{  public Task<VcenterDataCenterRestRep> detachStorage(URI id){  return postTask(PathConstants.DATACENTER_DETACH_STORAGE_URL,id);}  }
class C{  public static boolean contains(Coordinate coord,Coordinate[] p){  int wn=getWindingNumber(coord,p);  return wn != 0;}  }
class C{  private static <T extends AbstractBlockBase<T>>void addPathToCodeEmittingOrder(T initialBlock,List<T> order,PriorityQueue<T> worklist,BitSet visitedBlocks){  T block=initialBlock;  while (block != null) {    if (!skipLoopHeader(block)) {      if (block.isLoopHeader()) {        block.setAlign(true);      }      addBlock(block,order);    }    Loop<T> loop=block.getLoop();    if (block.isLoopEnd() && skipLoopHeader(loop.getHeader())) {      addBlock(loop.getHeader(),order);      for (      T successor : loop.getHeader().getSuccessors()) {        if (successor.getLoopDepth() == block.getLoopDepth()) {          successor.setAlign(true);        }      }    }    T mostLikelySuccessor=findAndMarkMostLikelySuccessor(block,visitedBlocks);    enqueueSuccessors(block,worklist,visitedBlocks);    block=mostLikelySuccessor;  }}  }
class C{  public boolean isTextList(){  return label.isTextList();}  }
class C{  private void addVolumesToParkingStorageGroup(StorageSystem storage,String policyName,Set<String> volumeDeviceIds) throws Exception {  String[] tokens=policyName.split(Constants.SMIS_PLUS_REGEX);  CIMObjectPath groupPath=_helper.getVolumeGroupBasedOnSLO(storage,storage,tokens[0],tokens[1],tokens[2]);  if (groupPath == null) {    groupPath=_helper.createVolumeGroupBasedOnSLO(storage,storage,tokens[0],tokens[1],tokens[2]);  }  CIMArgument[] inArgs=_helper.getAddVolumesToMaskingGroupInputArguments(storage,groupPath,volumeDeviceIds);  CIMArgument[] outArgs=new CIMArgument[5];  SmisJob addVolumesToSGJob=new SmisSynchSubTaskJob(null,storage.getId(),SmisConstants.ADD_MEMBERS);  _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"AddMembers",inArgs,outArgs,addVolumesToSGJob);}  }
class C{  public static Object create(int dsfid,DataInput in) throws IOException, ClassNotFoundException {switch (dsfid) {case REGION:    return (DataSerializableFixedID)DataSerializer.readRegion(in);case END_OF_STREAM_TOKEN:  return Token.END_OF_STREAM;case DLOCK_REMOTE_TOKEN:return DLockRemoteToken.createFromDataInput(in);case TRANSACTION_ID:return TXId.createFromData(in);case INTEREST_RESULT_POLICY:return readInterestResultPolicy(in);case UNDEFINED:return readUndefined(in);case RESULTS_BAG:return readResultsBag(in);case TOKEN_INVALID:return Token.INVALID;case TOKEN_LOCAL_INVALID:return Token.LOCAL_INVALID;case TOKEN_DESTROYED:return Token.DESTROYED;case TOKEN_REMOVED:return Token.REMOVED_PHASE1;case TOKEN_REMOVED2:return Token.REMOVED_PHASE2;case TOKEN_TOMBSTONE:return Token.TOMBSTONE;case NULL_TOKEN:return readNullToken(in);case CONFIGURATION_REQUEST:return readConfigurationRequest(in);case CONFIGURATION_RESPONSE:return readConfigurationResponse(in);case PR_DESTROY_ON_DATA_STORE_MESSAGE:return readDestroyOnDataStore(in);default :final Constructor<?> cons;if (dsfid >= Byte.MIN_VALUE && dsfid <= Byte.MAX_VALUE) {cons=dsfidMap[dsfid + Byte.MAX_VALUE + 1];} else {cons=(Constructor<?>)dsfidMap2.get(dsfid);}if (cons != null) {try {Object ds=cons.newInstance((Object[])null);InternalDataSerializer.invokeFromData(ds,in);return ds;} catch (InstantiationException ie) {throw new IOException(ie.getMessage(),ie);}catch (IllegalAccessException iae) {throw new IOException(iae.getMessage(),iae);}catch (InvocationTargetException ite) {Throwable targetEx=ite.getTargetException();if (targetEx instanceof IOException) {throw (IOException)targetEx;} else if (targetEx instanceof ClassNotFoundException) {throw (ClassNotFoundException)targetEx;} else {throw new IOException(ite.getMessage(),targetEx);}}}throw new DSFIDNotFoundException("Unknown DataSerializableFixedID: " + dsfid,dsfid);}}  }
class C{  protected PlainAccessOfAliasedImportDescription(IEObjectDescription delegate,String alias){  super(delegate);  this.alias=alias;}  }
class C{  private final void consumeExpected(String expected) throws javax.xml.transform.TransformerException {  if (tokenIs(expected)) {    nextToken();  } else {    error(XPATHErrorResources.ER_EXPECTED_BUT_FOUND,new Object[]{expected,m_token});    throw new XPathProcessorException(CONTINUE_AFTER_FATAL_ERROR);  }}  }
class C{  public final void add(float scalar,Matrix4f m1){  this.m00=m1.m00 + scalar;  this.m01=m1.m01 + scalar;  this.m02=m1.m02 + scalar;  this.m03=m1.m03 + scalar;  this.m10=m1.m10 + scalar;  this.m11=m1.m11 + scalar;  this.m12=m1.m12 + scalar;  this.m13=m1.m13 + scalar;  this.m20=m1.m20 + scalar;  this.m21=m1.m21 + scalar;  this.m22=m1.m22 + scalar;  this.m23=m1.m23 + scalar;  this.m30=m1.m30 + scalar;  this.m31=m1.m31 + scalar;  this.m32=m1.m32 + scalar;  this.m33=m1.m33 + scalar;}  }
class C{  public static void close(){synchronized (INSTANCE_LOCK) {    if (INSTANCE != null) {      Logger innerLogger=INSTANCE.logger;      cleanupLogger(innerLogger);    }    INSTANCE=null;  }}  }
class C{  public static Certificate[] verifySignature(InputStream signature,InputStream signatureBlock) throws IOException, GeneralSecurityException {  BerInputStream bis=new BerInputStream(signatureBlock);  ContentInfo info=(ContentInfo)ContentInfo.ASN1.decode(bis);  SignedData signedData=info.getSignedData();  if (signedData == null) {    throw new IOException("No SignedData found");  }  Collection<org.apache.harmony.security.x509.Certificate> encCerts=signedData.getCertificates();  if (encCerts.isEmpty()) {    return null;  }  X509Certificate[] certs=new X509Certificate[encCerts.size()];  int i=0;  for (  org.apache.harmony.security.x509.Certificate encCert : encCerts) {    certs[i++]=new X509CertImpl(encCert);  }  List<SignerInfo> sigInfos=signedData.getSignerInfos();  SignerInfo sigInfo;  if (!sigInfos.isEmpty()) {    sigInfo=sigInfos.get(0);  } else {    return null;  }  X500Principal issuer=sigInfo.getIssuer();  BigInteger snum=sigInfo.getSerialNumber();  int issuerSertIndex=0;  for (i=0; i < certs.length; i++) {    if (issuer.equals(certs[i].getIssuerDN()) && snum.equals(certs[i].getSerialNumber())) {      issuerSertIndex=i;      break;    }  }  if (i == certs.length) {    return null;  }  if (certs[issuerSertIndex].hasUnsupportedCriticalExtension()) {    throw new SecurityException("Can not recognize a critical extension");  }  final String daOid=sigInfo.getDigestAlgorithm();  final String daName=sigInfo.getDigestAlgorithmName();  final String deaOid=sigInfo.getDigestEncryptionAlgorithm();  String alg=null;  Signature sig=null;  if (daOid != null && deaOid != null) {    alg=daOid + "with" + deaOid;    try {      sig=Signature.getInstance(alg);    } catch (    NoSuchAlgorithmException e) {    }    if (sig == null) {      final String deaName=sigInfo.getDigestEncryptionAlgorithmName();      alg=daName + "with" + deaName;      try {        sig=Signature.getInstance(alg);      } catch (      NoSuchAlgorithmException e) {      }    }  }  if (sig == null && daOid != null) {    alg=daOid;    try {      sig=Signature.getInstance(alg);    } catch (    NoSuchAlgorithmException e) {    }    if (sig == null && daName != null) {      alg=daName;      try {        sig=Signature.getInstance(alg);      } catch (      NoSuchAlgorithmException e) {      }    }  }  if (sig == null) {    return null;  }  sig.initVerify(certs[issuerSertIndex]);  List<AttributeTypeAndValue> atr=sigInfo.getAuthenticatedAttributes();  byte[] sfBytes=new byte[signature.available()];  signature.read(sfBytes);  if (atr == null) {    sig.update(sfBytes);  } else {    sig.update(sigInfo.getEncodedAuthenticatedAttributes());    byte[] existingDigest=null;    for (    AttributeTypeAndValue a : atr) {      if (Arrays.equals(a.getType().getOid(),MESSAGE_DIGEST_OID)) {        if (existingDigest != null) {          throw new SecurityException("Too many MessageDigest attributes");        }        Collection<?> entries=a.getValue().getValues(ASN1OctetString.getInstance());        if (entries.size() != 1) {          throw new SecurityException("Too many values for MessageDigest attribute");        }        existingDigest=(byte[])entries.iterator().next();      }    }    if (existingDigest == null) {      throw new SecurityException("Missing MessageDigest in Authenticated Attributes");    }    MessageDigest md=null;    if (daOid != null) {      md=MessageDigest.getInstance(daOid);    }    if (md == null && daName != null) {      md=MessageDigest.getInstance(daName);    }    if (md == null) {      return null;    }    byte[] computedDigest=md.digest(sfBytes);    if (!Arrays.equals(existingDigest,computedDigest)) {      throw new SecurityException("Incorrect MD");    }  }  if (!sig.verify(sigInfo.getEncryptedDigest())) {    throw new SecurityException("Incorrect signature");  }  return createChain(certs[issuerSertIndex],certs);}  }
class C{  protected void initBeanWrapper(BeanWrapper bw){  bw.setConversionService(conversionService);}  }
class C{  @Override public void writeXML(XMLOutput xmlOutput) throws IOException {  writeXML(xmlOutput,true);}  }
class C{  private void buildConnectionPassword(Map<String,String> propertyMap) throws EmbeddingLDAPException {  connectionPassword=propertyMap.get("connectionPassword");  if (connectionPassword == null) {    throw new EmbeddingLDAPException("Connection password not specified in the " + "configuration file.");  }}  }
class C{  @Override public synchronized void cancelRowUpdates() throws SQLException {  checkClosed();  if (this.doingUpdates) {    this.doingUpdates=false;    this.updater.clearParameters();  }}  }
class C{  public String formatDate(Date date){  return dateFormat.format(date);}  }
class C{  public static QueryUniqueIdentifiersForEntityResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryUniqueIdentifiersForEntityResponse object=new QueryUniqueIdentifiersForEntityResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryUniqueIdentifiersForEntityResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryUniqueIdentifiersForEntityResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.set_return((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override protected void reloadSummaries(){  super.reloadSummaries();  boolean local, global;  local=mDPM.getStorageEncryption(mDeviceAdminSample);  global=mDPM.getStorageEncryption(null);  mRequireEncryption.setSummary(localGlobalSummary(local,global));  int deviceStatusCode=mDPM.getStorageEncryptionStatus();  String deviceStatus=statusCodeToString(deviceStatusCode);  String status=mActivity.getString(R.string.status_device_encryption,deviceStatus);  mActivateEncryption.setSummary(status);}  }
class C{  private void returnOrCloseDirect(NettyChannelContext context,boolean isClose){  Channel ch=context.getChannel();  if (this.isHttp2Only) {    isClose=isClose || !ch.isOpen() || !context.isValid();  } else {    isClose=isClose || !ch.isWritable() || !ch.isOpen();  }  NettyChannelGroup group=this.channelGroups.get(context.getKey());  if (group == null) {    LOGGER.warning("Cound not find group for " + context.getKey());    context.close();    return;  }  returnOrCloseDirect(context,group,isClose);}  }
class C{  @SuppressWarnings("deprecation") public String toString(){  int hour=super.getHours();  int minute=super.getMinutes();  int second=super.getSeconds();  String hourString;  String minuteString;  String secondString;  if (hour < 10) {    hourString="0" + hour;  } else {    hourString=Integer.toString(hour);  }  if (minute < 10) {    minuteString="0" + minute;  } else {    minuteString=Integer.toString(minute);  }  if (second < 10) {    secondString="0" + second;  } else {    secondString=Integer.toString(second);  }  return (hourString + ":" + minuteString+ ":"+ secondString);}  }
class C{  public Act2ModeWithPlanCoordAnalysis(Scenario sc,Set<Id> personsOfInterest,int slotSize,String targetCoordinateSystem){  super(Act2ModeWithPlanCoordAnalysis.class.getSimpleName());  this.scenario=sc;  this.handler=new Act2ModeWithPlanCoordAnalysisHandler(this.scenario,personsOfInterest);  this.slotSize=slotSize;  this.targetCoordinateSystem=targetCoordinateSystem;}  }
class C{  private void checkBasicConstraints(X509Certificate currCert) throws CertPathValidatorException {  String msg="basic constraints";  if (debug != null) {    debug.println("---checking " + msg + "...");    debug.println("i = " + i + ", maxPathLength = "+ maxPathLength);  }  if (i < certPathLength) {    int pathLenConstraint=-1;    if (currCert.getVersion() < 3) {      if (i == 1) {        if (X509CertImpl.isSelfIssued(currCert)) {          pathLenConstraint=Integer.MAX_VALUE;        }      }    } else {      pathLenConstraint=currCert.getBasicConstraints();    }    if (pathLenConstraint == -1) {      throw new CertPathValidatorException(msg + " check failed: this is not a CA certificate",null,null,-1,PKIXReason.NOT_CA_CERT);    }    if (!X509CertImpl.isSelfIssued(currCert)) {      if (maxPathLength <= 0) {        throw new CertPathValidatorException(msg + " check failed: pathLenConstraint violated - " + "this cert must be the last cert in the "+ "certification path",null,null,-1,PKIXReason.PATH_TOO_LONG);      }      maxPathLength--;    }    if (pathLenConstraint < maxPathLength)     maxPathLength=pathLenConstraint;  }  if (debug != null) {    debug.println("after processing, maxPathLength = " + maxPathLength);    debug.println(msg + " verified.");  }}  }
class C{  public void insert(EdgeEnd e){  EdgeEndBundle eb=(EdgeEndBundle)edgeMap.get(e);  if (eb == null) {    eb=new EdgeEndBundle(e);    insertEdgeEnd(e,eb);  } else {    eb.insert(e);  }}  }
class C{  public static CTrackingResult track(final INaviView view,final INaviInstruction startInstruction,final String trackedRegister,final RegisterTrackingOptions options) throws InternalTranslationException {  Preconditions.checkNotNull(view,"IE01660: View argument can not be null");  Preconditions.checkNotNull(startInstruction,"IE01661: Start instruction argument can not be null");  Preconditions.checkNotNull(trackedRegister,"IE01662: Register argument can not be null");  final MonoReilSolverResult<RegisterSetLatticeElement> result=RegisterTracker.track(view.getContent().getReilCode(),startInstruction,trackedRegister,options);  final Map<IAddress,INaviInstruction> instructionMap=CRegisterTrackingHelper.getInstructionMap(view);  final List<CInstructionResult> instructionResultList=new ArrayList<CInstructionResult>();  final Map<IAddress,RegisterSetLatticeElement> perInstructionElement=result.generateAddressToStateMapping(startInstruction,options.trackIncoming());  for (  final Map.Entry<IAddress,RegisterSetLatticeElement> addressToStateMapEntry : perInstructionElement.entrySet()) {    final RegisterSetLatticeElement element=addressToStateMapEntry.getValue();    if (!element.getReadRegisters().isEmpty() || !element.getNewlyTaintedRegisters().isEmpty() || !element.getUntaintedRegisters().isEmpty()|| !element.getUpdatedRegisters().isEmpty()) {      final CAddress concreteAddress=new CAddress(addressToStateMapEntry.getKey().toLong() >> 8);      instructionResultList.add(new CInstructionResult(instructionMap.get(concreteAddress),addressToStateMapEntry.getValue()));    }  }  return new CTrackingResult(startInstruction,trackedRegister,instructionResultList);}  }
class C{  public List<Url> detect(){  readDefault();  return _urlList;}  }
class C{  public boolean isInteractive(int row){  return getBoolean(row,VisualItem.INTERACTIVE);}  }
class C{  public TLongArrayList inverseGrep(TLongProcedure condition){  TLongArrayList list=new TLongArrayList();  for (int i=0; i < _pos; i++) {    if (!condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  public GenericPlanStrategyImpl(final PlanSelector<T,I> planSelector){  this.planSelector=planSelector;}  }
class C{  @Deprecated public void showDoneButton(boolean showDone){  setProgressButtonEnabled(showDone);}  }
class C{  public void writeStatistics(){  makeDirs();  writeCSV();}  }
class C{  public void initialize(double ratio){  if (!(ratio > 0 && ratio < Double.POSITIVE_INFINITY)) {    LOG.warning("Invalid ratio: " + ratio,new Throwable());    ratio=1.4;  }  this.ratio=ratio;  if (plot != null) {    LOG.warning("Already initialized.");    lazyRefresh();    return;  }  reinitialize();  context.addResultListener(this);  context.addVisualizationListener(this);}  }
class C{  @Override public void reset(){}  }
class C{  public void paintColorChooserBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public final void writeDouble(double v) throws IOException {  writeLong(Double.doubleToLongBits(v));}  }
class C{  public boolean processIt(String processAction,String docAction){  m_message=null;  m_action=null;  if (isValidAction(processAction))   m_action=processAction; else   if (isValidAction(docAction))   m_action=docAction; else   if (processAction.equals(ACTION_None) || docAction.equals(ACTION_None)) {    if (m_document != null)     m_document.get_Logger().info("**** No Action (Prc=" + processAction + "/Doc="+ docAction+ ") "+ m_document);    return true;  } else {    throw new IllegalStateException("Status=" + getDocStatus() + " - Invalid Actions: Process="+ processAction+ ", Doc="+ docAction);  }  if (m_document != null)   m_document.get_Logger().info("**** Action=" + m_action + " (Prc="+ processAction+ "/Doc="+ docAction+ ") "+ m_document);  boolean success=processIt(m_action);  if (m_document != null)   m_document.get_Logger().fine("**** Action=" + m_action + " - Success="+ success);  return success;}  }
class C{  public final void advanceMove(int delta){  while (delta > 0) {    if (!whiteToMove)     currentMove++;    whiteToMove=!whiteToMove;    delta--;  }  while (delta < 0) {    whiteToMove=!whiteToMove;    if (!whiteToMove)     currentMove--;    delta++;  }}  }
class C{  public void moveUpwardExposedRegsToFront(BasicBlock block){  LiveIntervalElement prev=getFirstLiveIntervalElement(block);  if (prev == null) {    return;  }  LiveIntervalElement elem=prev.getNext();  while (elem != null) {    if (elem.getBegin() == null) {      prev.setNext(elem.getNext());      prependLiveIntervalElement(block,elem);      elem=prev.getNext();    } else {      prev=elem;      elem=elem.getNext();    }  }}  }
class C{  public static Recipe fromCursor(Cursor cursor){  Recipe recipe=new Recipe(null);  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeTable.ID_COLUMN)) {      recipe.id=cursor.getString(c);    } else     if (columnName.equals(RecipeTable.TITLE_COLUMN)) {      recipe.setTitle(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.DESCRIPTION_COLUMN)) {      recipe.setDescription(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PHOTO_COLUMN)) {      recipe.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PREP_TIME_COLUMN)) {      recipe.setPrepTime(cursor.getString(c));    }  }  return recipe;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 2250) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static Table read(String fileName,boolean header,char delimiter) throws IOException {  ColumnType[] columnTypes=detectColumnTypes(fileName,header,delimiter);  return read(columnTypes,true,delimiter,fileName);}  }
class C{  public byte[] pack() throws Exception {  int len=1 + 4 + 4+ 4+ 8+ 4+ 4;  byte[] eventCreationAsBytes=null;  getEventCreationPointAsString();  if (this.eventCreationPointDesc != null) {    eventCreationAsBytes=StringUtils.getBytes(this.eventCreationPointDesc,"ISO8859_1");    len+=(4 + eventCreationAsBytes.length);  } else {    len+=4;  }  byte[] messageAsBytes=null;  if (this.message != null) {    messageAsBytes=StringUtils.getBytes(this.message,"ISO8859_1");    len+=(4 + messageAsBytes.length);  } else {    len+=4;  }  byte[] durationUnitsAsBytes=null;  if (this.durationUnits != null) {    durationUnitsAsBytes=StringUtils.getBytes(this.durationUnits,"ISO8859_1");    len+=(4 + durationUnitsAsBytes.length);  } else {    len+=4;    durationUnitsAsBytes=StringUtils.getBytes("","ISO8859_1");  }  byte[] buf=new byte[len];  int pos=0;  buf[pos++]=this.eventType;  pos=writeLong(this.connectionId,buf,pos);  pos=writeInt(this.statementId,buf,pos);  pos=writeInt(this.resultSetId,buf,pos);  pos=writeLong(this.eventCreationTime,buf,pos);  pos=writeLong(this.eventDuration,buf,pos);  pos=writeBytes(durationUnitsAsBytes,buf,pos);  pos=writeInt(this.eventCreationPointIndex,buf,pos);  if (eventCreationAsBytes != null) {    pos=writeBytes(eventCreationAsBytes,buf,pos);  } else {    pos=writeInt(0,buf,pos);  }  if (messageAsBytes != null) {    pos=writeBytes(messageAsBytes,buf,pos);  } else {    pos=writeInt(0,buf,pos);  }  return buf;}  }
class C{  @Override public void perform(IR ir){  if (ir.hasReachableExceptionHandlers() || GCP.tooBig(ir)) {    return;  }  verbose=ir.options.DEBUG_GCP;  this.ir=ir;  dominator=ir.HIRInfo.dominatorTree;  (new GlobalValueNumber()).perform(ir);  valueNumbers=ir.HIRInfo.valueNumbers;  if (verbose)   VM.sysWrite("in GCSE for " + ir.method + "\n");  DefUse.computeDU(ir);  Simple.copyPropagation(ir);  DefUse.computeDU(ir);  globalCSE(ir.firstBasicBlockInCodeOrder());  if (VM.VerifyAssertions) {    boolean isEmpty=avail.isEmpty();    if (!isEmpty) {      String msg=avail.toString();      VM._assert(isEmpty,msg);    }  }  ir.actualSSAOptions.setScalarValid(false);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"FILES\" ("+ "\"FILE_TYPE\" TEXT NOT NULL ,"+ "\"FILE_URL\" TEXT NOT NULL UNIQUE ,"+ "\"FILE_LOCAL_URL\" TEXT NOT NULL ,"+ "\"FILE_LEN\" TEXT NOT NULL ,"+ "\"FILE_STATUS\" INTEGER NOT NULL );");}  }
class C{  public void testDoCheckWithHtml4Doctype(){  System.out.println("doCheck with html4 doctype");  testChecker("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",TestSolution.NOT_APPLICABLE,"");  testChecker("<!DOCTYPE   html>",TestSolution.NOT_APPLICABLE,"");}  }
