class C{  private static StsdData parseStsd(ParsableByteArray stsd,long durationUs,int rotationDegrees,String language){  stsd.setPosition(Atom.FULL_HEADER_SIZE);  int numberOfEntries=stsd.readInt();  StsdData out=new StsdData(numberOfEntries);  for (int i=0; i < numberOfEntries; i++) {    int childStartPosition=stsd.getPosition();    int childAtomSize=stsd.readInt();    Assertions.checkArgument(childAtomSize > 0,"childAtomSize should be positive");    int childAtomType=stsd.readInt();    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263) {      parseVideoSampleEntry(stsd,childStartPosition,childAtomSize,durationUs,rotationDegrees,out,i);    } else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl) {      parseAudioSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,durationUs,out,i);    } else     if (childAtomType == Atom.TYPE_TTML) {      out.mediaFormat=MediaFormat.createTextFormat(MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,language,durationUs);    } else     if (childAtomType == Atom.TYPE_tx3g) {      out.mediaFormat=MediaFormat.createTextFormat(MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,language,durationUs);    } else     if (childAtomType == Atom.TYPE_stpp) {      out.mediaFormat=MediaFormat.createTextFormat(MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,language,durationUs,0);    }    stsd.setPosition(childStartPosition + childAtomSize);  }  return out;}  }
class C{  public static void copyToClipboard(Context context,CharSequence text){  ClipboardManager clipboard=(ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);  clipboard.setPrimaryClip(ClipData.newPlainText("",text));  Toast.makeText(context,context.getString(R.string.copied_to_clipboard),Toast.LENGTH_SHORT).show();}  }
class C{  @Override public boolean checkModifiers(MouseEvent e){  return (e.getModifiers() & modifiers) != 0;}  }
class C{  public static int ECANCELED(){  return 125;}  }
class C{  @Override public Enumeration<Option> listOptions(){  return new Vector<Option>(0).elements();}  }
class C{  @Override public void declareOutputFields(OutputFieldsDeclarer declarer){  declarer.declare(new Fields("jobId","message"));}  }
class C{  public void addBinding(Property<?> value){  if (value.getName() == null || value.getName().isEmpty()) {    throw new IllegalArgumentException("property name must not be empty");  }  getBindings().put(value.getName(),value);}  }
class C{  private void cleanupTargetInfo(){  targetAction=DnDConstants.ACTION_NONE;  dragProtocol=null;  targetRootSubwindow=0;}  }
class C{  public BriefUnitGraph(Body body){  super(body);  int size=unitChain.size();  if (Options.v().time())   Timers.v().graphTimer.start();  unitToSuccs=new HashMap(size * 2 + 1,0.7f);  unitToPreds=new HashMap(size * 2 + 1,0.7f);  buildUnexceptionalEdges(unitToSuccs,unitToPreds);  makeMappedListsUnmodifiable(unitToSuccs);  makeMappedListsUnmodifiable(unitToPreds);  buildHeadsAndTails();  if (Options.v().time())   Timers.v().graphTimer.end();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Local newLocal(String prefix,Type type){  int suffix=0;  if (prefix == this.prefix || prefix.equals(this.prefix)) {    suffix=counter;  }  while (locals.contains(prefix + suffix))   suffix++;  if (prefix == this.prefix || prefix.equals(this.prefix)) {    counter=suffix + 1;  }  String newName=prefix + suffix;  Local newLocal=Jimple.v().newLocal(newName,type);  localChain.addLast(newLocal);  locals.add(newName);  return newLocal;}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public int zoom(){  if (zoom == null)   return NO_ZOOM;  return zoom;}  }
class C{  private void createRelationLayer(JCas aJcas,Map<Type,Type> relationayers,Map<Type,Map<String,List<AnnotationFS>>> tokenAnnotations,Map<Type,Map<String,List<String>>> relationTargets){  for (  Type layer : relationayers.keySet()) {    if (relationTargets.get(layer) == null) {      continue;    }    Feature dependentFeature=layer.getFeatureByBaseName("Dependent");    Feature governorFeature=layer.getFeatureByBaseName("Governor");    Map<String,List<String>> tokenIdMaps=relationTargets.get(layer);    Map<String,List<AnnotationFS>> tokenAnnos=tokenAnnotations.get(relationayers.get(layer));    Map<String,List<AnnotationFS>> relationAnnos=tokenAnnotations.get(layer);    for (    String dependnetId : tokenIdMaps.keySet()) {      int i=0;      for (      String governorId : tokenIdMaps.get(dependnetId)) {        AnnotationFS relationAnno=relationAnnos.get(dependnetId).get(i);        AnnotationFS dependentAnno=tokenAnnos.get(dependnetId).get(0);        AnnotationFS governorAnno=tokenAnnos.get(governorId).get(0);        if (layer.getName().equals(Dependency.class.getName())) {          Type tokenType=getType(aJcas.getCas(),Token.class.getName());          Feature attachFeature=tokenType.getFeatureByBaseName("pos");          AnnotationFS posDependentAnno=dependentAnno;          dependentAnno=CasUtil.selectCovered(aJcas.getCas(),tokenType,dependentAnno.getBegin(),dependentAnno.getEnd()).get(0);          dependentAnno.setFeatureValue(attachFeature,posDependentAnno);          AnnotationFS posGovernorAnno=governorAnno;          governorAnno=CasUtil.selectCovered(aJcas.getCas(),tokenType,governorAnno.getBegin(),governorAnno.getEnd()).get(0);          governorAnno.setFeatureValue(attachFeature,posGovernorAnno);        }        if (dependentAnno.getEnd() <= governorAnno.getEnd()) {          ((Annotation)relationAnno).setBegin(dependentAnno.getBegin());          ((Annotation)relationAnno).setEnd(governorAnno.getEnd());        } else {          ((Annotation)relationAnno).setBegin(governorAnno.getBegin());          ((Annotation)relationAnno).setEnd(dependentAnno.getEnd());        }        relationAnno.setFeatureValue(dependentFeature,dependentAnno);        relationAnno.setFeatureValue(governorFeature,governorAnno);        i++;      }    }  }}  }
class C{  private boolean foundOperators(List<Clause> clauses,boolean lowercaseOperators){  for (  Clause clause : clauses) {    if (clause.must == '+')     return true;    if (clause.must == '-')     return true;    if (clause.isBareWord()) {      String s=clause.val;      if ("OR".equals(s)) {        return true;      } else       if ("NOT".equals(s)) {        return true;      } else       if (lowercaseOperators && "or".equals(s)) {        return true;      }    }  }  return false;}  }
class C{  public boolean isPlotable(LatLonPoint llpoint){  return isPlotable(llpoint.getY(),llpoint.getX());}  }
class C{  public boolean isSetStatus(){  return this.status != null;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((carbonTableIdentifier == null) ? 0 : carbonTableIdentifier.hashCode());  result=prime * result + ((storePath == null) ? 0 : storePath.hashCode());  return result;}  }
class C{  public Boolean isVFlashSupported(){  return vFlashSupported;}  }
class C{  public <T>GridCloseableIterator<T> iterator(@Nullable String spaceName,CX2<T2<Long,Integer>,T2<Long,Integer>,T> c,int part){  assert c != null;  GridOffHeapPartitionedMap m=offheap(spaceName);  return m == null ? new GridEmptyCloseableIterator<T>() : m.iterator(c,part);}  }
class C{  public List<TimestampedValue<OutputT>> peekOutputElementsInWindow(BoundedWindow window){  return peekOutputElementsInWindow(mainOutputTag,window);}  }
class C{  public synchronized Iterator<Long> handles(final String stack) throws IOException {  Stack s=getStack(stack);  if (s == null)   return null;  return s.handles();}  }
class C{  public void clearViewIndexCache(){  viewIndexCache=null;}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int index=getViewIndex(pos,b);  Shape ca=locator.getChildAllocation(index,a);  ChildState cs=getChildState(index);synchronized (cs) {    View cv=cs.getChildView();    Shape v=cv.modelToView(pos,ca,b);    return v;  }}  }
class C{  protected void stopScanning(){  running=false;}  }
class C{  protected void moveToNextEntry() throws IOException {  ZipEntry nextEntry=this.zipStream.getNextEntry();  if (nextEntry == null && this.currentEntry != null)   this.zipStream.close();  this.currentEntry=nextEntry;}  }
class C{  public void scale(float x,float y){  impl.scale(nativeGraphics,x,y);  scaleX=x;  scaleY=y;}  }
class C{  @Override public void rollback(){  mockS3Buckets.clear();}  }
class C{  public void seriesChanged(SeriesChangeEvent event){  Object series=event.getSource();  if (series instanceof CandleSeries) {    CandleSeries candleSeries=(CandleSeries)series;    if (!candleSeries.isEmpty()) {      CombinedDomainXYPlot combinedXYplot=(CombinedDomainXYPlot)this.chart.getPlot();      @SuppressWarnings("unchecked") List<XYPlot> subplots=combinedXYplot.getSubplots();      XYPlot xyplot=subplots.get(0);      CandleItem candleItem=(CandleItem)candleSeries.getDataItem(candleSeries.getItemCount() - 1);      String msg="Time: " + TradingCalendar.getFormattedDate(candleItem.getLastUpdateDate(),TIME_FORMAT) + " Open: "+ new Money(candleItem.getOpen())+ " High: "+ new Money(candleItem.getHigh())+ " Low: "+ new Money(candleItem.getLow())+ " Close: "+ new Money(candleItem.getClose())+ " Vwap: "+ new Money(candleItem.getVwap());      titleLegend2.setText(msg);      valueMarker.setValue(candleItem.getClose());      double x=TradingCalendar.geMillisFromZonedDateTime(TradingCalendar.getDateAtTime(candleItem.getPeriod().getStart(),candleSeries.getStartTime()));      String annotationText="(" + TradingCalendar.getFormattedDate(candleItem.getLastUpdateDate(),TIME_FORMAT) + ", "+ new Money(candleItem.getClose())+ ")";      if (null == closePriceLine) {        closePriceLine=new XYTextAnnotation(annotationText,x,candleItem.getY());        closePriceLine.setTextAnchor(TextAnchor.BOTTOM_RIGHT);        xyplot.addAnnotation(closePriceLine);        xyplot.addRangeMarker(valueMarker);      } else {        closePriceLine.setText(annotationText);        closePriceLine.setX(x);        closePriceLine.setY(candleItem.getY());      }      this.chart.fireChartChanged();    }  }}  }
class C{  public void addValue(IFitsHeader key,String val) throws HeaderCardException {  addValue(key.key(),val,key.comment());}  }
class C{  public static IPath createFrancaIDLFile(IResourceSetProvider resourceSetProvider,Map<String,Object> parameters){  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  IResource containerResource=root.findMember(new Path((String)parameters.get("containerName")));  ResourceSet resourceSet=resourceSetProvider.get(containerResource.getProject());  IPath filePath=containerResource.getFullPath().append(((String)parameters.get("packageName")).replaceAll("\\.","/")).append((String)parameters.get("fileName"));  String fullPath=filePath.toString();  URI fileURI=URI.createPlatformResourceURI(fullPath,false);  Resource resource=resourceSet.createResource(fileURI);  FModel model=FrancaFactory.eINSTANCE.createFModel();  model.setName((String)parameters.get("packageName"));  String interfaceName=(String)parameters.get("interfaceName");  String typeCollectionName=(String)parameters.get("typeCollectionName");  if (interfaceName != null && interfaceName.length() > 0) {    FInterface _interface=FrancaFactory.eINSTANCE.createFInterface();    _interface.setName(interfaceName);    model.getInterfaces().add(_interface);  }  if (typeCollectionName != null && typeCollectionName.length() > 0) {    FTypeCollection typeCollection=FrancaFactory.eINSTANCE.createFTypeCollection();    typeCollection.setName(typeCollectionName);    model.getTypeCollections().add(typeCollection);  }  resource.getContents().add(model);  try {    resource.save(Collections.EMPTY_MAP);    containerResource.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);    return filePath;  } catch (  IOException e) {    e.printStackTrace();    return null;  }catch (  CoreException e) {    e.printStackTrace();    return null;  }}  }
class C{  public IllegalConfigurationValueException(Throwable cause){  super(cause);}  }
class C{  private synchronized void addLock(FileLock lock) throws OverlappingFileLockException {  long lockEnd=lock.position() + lock.size();  for (  FileLock existingLock : locks) {    if (existingLock.position() > lockEnd) {      break;    }    if (existingLock.overlaps(lock.position(),lock.size())) {      throw new OverlappingFileLockException();    }  }  locks.add(lock);}  }
class C{  public static RegionAttributes createRegionAttrsForPR(int red,int localMaxMem){  AttributesFactory attr=new AttributesFactory();  attr.setMirrorType(MirrorType.NONE);  PartitionAttributesFactory paf=new PartitionAttributesFactory();  PartitionAttributes prAttr=paf.setRedundantCopies(red).setLocalMaxMemory(localMaxMem).create();  attr.setPartitionAttributes(prAttr);  return attr.create();}  }
class C{  public boolean markSupported(){  return in.markSupported();}  }
class C{  protected final static int rhumbStep(Point2D pt1,Point2D pt2){  int step=(int)DrawUtil.distance(pt1.getX(),pt1.getY(),pt2.getX(),pt2.getY());  if (step > 8192) {    step=512;  } else {    step>>=3;  }  return (step == 0) ? 1 : step;}  }
class C{  public GVTGlyphVector createGlyphVector(FontRenderContext frc,CharacterIterator ci){  AttributedCharacterIterator aci=null;  if (ci instanceof AttributedCharacterIterator) {    aci=(AttributedCharacterIterator)ci;  }  List glyphs=new ArrayList();  char c=ci.first();  while (c != CharacterIterator.DONE) {    boolean foundMatchingGlyph=false;    for (int i=0; i < glyphUnicodes.length; i++) {      if (glyphUnicodes[i].indexOf(c) == 0 && languageMatches(glyphLangs[i]) && orientationMatches(glyphOrientations[i]) && formMatches(glyphUnicodes[i],glyphForms[i],aci,ci.getIndex())) {        if (glyphUnicodes[i].length() == 1) {          Element glyphElement=glyphElements[i];          SVGGlyphElementBridge glyphBridge=(SVGGlyphElementBridge)ctx.getBridge(glyphElement);          TextPaintInfo tpi=null;          if (aci != null) {            tpi=(TextPaintInfo)aci.getAttribute(PAINT_INFO);          }          Glyph glyph=glyphBridge.createGlyph(ctx,glyphElement,textElement,i,fontSize,fontFace,tpi);          glyphs.add(glyph);          foundMatchingGlyph=true;          break;        } else {          int current=ci.getIndex();          boolean matched=true;          for (int j=1; j < glyphUnicodes[i].length(); j++) {            c=ci.next();            if (glyphUnicodes[i].charAt(j) != c) {              matched=false;              break;            }          }          if (matched) {            Element glyphElement=glyphElements[i];            SVGGlyphElementBridge glyphBridge=(SVGGlyphElementBridge)ctx.getBridge(glyphElement);            TextPaintInfo tpi=null;            if (aci != null) {              aci.setIndex(ci.getIndex());              tpi=(TextPaintInfo)aci.getAttribute(PAINT_INFO);            }            Glyph glyph=glyphBridge.createGlyph(ctx,glyphElement,textElement,i,fontSize,fontFace,tpi);            glyphs.add(glyph);            foundMatchingGlyph=true;            break;          } else {            c=ci.setIndex(current);          }        }      }    }    if (!foundMatchingGlyph) {      SVGGlyphElementBridge glyphBridge=(SVGGlyphElementBridge)ctx.getBridge(missingGlyphElement);      TextPaintInfo tpi=null;      if (aci != null) {        aci.setIndex(ci.getIndex());        tpi=(TextPaintInfo)aci.getAttribute(PAINT_INFO);      }      Glyph glyph=glyphBridge.createGlyph(ctx,missingGlyphElement,textElement,-1,fontSize,fontFace,tpi);      glyphs.add(glyph);    }    c=ci.next();  }  int numGlyphs=glyphs.size();  Glyph[] glyphArray=(Glyph[])glyphs.toArray(new Glyph[numGlyphs]);  return new SVGGVTGlyphVector(this,glyphArray,frc);}  }
class C{  public Builder histogramQuantiles(double... quantiles){  histogramPercentiles=new HashSet<>();  for (  double q : quantiles) {    histogramPercentiles.add(new Percentile(q));  }  return this;}  }
class C{  public static String encodeBase64String(final byte[] binaryData){  return StringUtils.newStringUtf8(encodeBase64(binaryData,false));}  }
class C{  public ChunkedOutputStream(final SessionOutputBuffer out,int bufferSize) throws IOException {  super();  this.cache=new byte[bufferSize];  this.out=out;}  }
class C{  private static void generateSnapshotHeader(String processName,PackageInfo packageInfo,PrintStream out){  out.println("Version: 3");  out.println("Process: " + processName);  if (packageInfo != null) {    out.println("Package: " + packageInfo.packageName);    out.println("Package-Version: " + packageInfo.versionCode);  }  out.println("Build: " + Build.FINGERPRINT);  out.println();}  }
class C{  void checkRequests(int axis){  if ((axis != X_AXIS) && (axis != Y_AXIS)) {    throw new IllegalArgumentException("Invalid axis: " + axis);  }  if (axis == majorAxis) {    if (!majorReqValid) {      majorRequest=calculateMajorAxisRequirements(axis,majorRequest);      majorReqValid=true;    }  } else   if (!minorReqValid) {    minorRequest=calculateMinorAxisRequirements(axis,minorRequest);    minorReqValid=true;  }}  }
class C{  public void testSendTwoTracksWithSameActivity(){  String testActivity="(TestActivity)";  EndToEndTestUtils.activityType=testActivity;  GoogleUtils.deleteSpreadsheets(EndToEndTestUtils.trackListActivity.getApplicationContext(),GoogleUtils.ACCOUNT_1);  EndToEndTestUtils.createSimpleTrack(1,false);  boolean result=sendToGoogle(activityMyTracks.getString(R.string.export_google_maps)) && sendToGoogle(activityMyTracks.getString(R.string.export_google_fusion_tables)) && sendToGoogle(activityMyTracks.getString(R.string.export_google_spreadsheets));  result=result && sendToGoogle(activityMyTracks.getString(R.string.export_google_maps)) && sendToGoogle(activityMyTracks.getString(R.string.export_google_fusion_tables))&& sendToGoogle(activityMyTracks.getString(R.string.export_google_spreadsheets));  if (result) {    List<File> fileList=GoogleUtils.searchSpreadsheets(activityMyTracks.getApplicationContext(),GoogleUtils.ACCOUNT_1);    assertEquals(1,fileList.size());  }}  }
class C{  public TypedPosition(int offset,int length,String type){  super(offset,length);  fType=type;}  }
class C{  public static void closeSilently(Reader reader){  if (reader != null) {    try {      reader.close();    } catch (    Exception e) {    }  }}  }
class C{  public MatrixStack scale(double x,double y,double z){  current=current.preMultiply(TransformUtil.scaleMatrix(x,y,z));  return this;}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  TryStatement s=(TryStatement)clone();  if (body != null) {    s.body=body.copyInline(ctx,valNeeded);  }  s.args=new Statement[args.length];  for (int i=0; i < args.length; i++) {    if (args[i] != null) {      s.args[i]=args[i].copyInline(ctx,valNeeded);    }  }  return s;}  }
class C{  private void checkPayments(MBPartner bp){  int changed=0;  MPayment[] payments=MPayment.getOfBPartner(getCtx(),bp.getC_BPartner_ID(),get_TrxName());  for (int i=0; i < payments.length; i++) {    MPayment payment=payments[i];    if (payment.testAllocation()) {      payment.saveEx();      changed++;    }  }  if (changed != 0)   addLog(0,null,new BigDecimal(payments.length),Msg.getElement(getCtx(),"C_Payment_ID") + " - #" + changed);}  }
class C{  public void recordException(Throwable e){  if (pendingException == null || e == null) {    pendingException=e;    hasPendingException=(e != null) ? 1 : 0;  }}  }
class C{  public static void closeQuiet(@Nullable SelectionKey rsrc){  if (rsrc != null)   closeQuiet(rsrc.channel());}  }
class C{  public static CpimMessage extractCpimMessage(SipRequest request){  Multipart multi=new Multipart(request.getContent(),request.getBoundaryContentType());  if (!multi.isMultipart()) {    return null;  }  String cpimPart=multi.getPart(CpimMessage.MIME_TYPE);  if (cpimPart == null) {    return null;  }  return new CpimParser(cpimPart.getBytes(UTF8)).getCpimMessage();}  }
class C{  public void cfgComputeDigest(ConfigurationValue cv,boolean b){  computeDigest=b;}  }
class C{  public void deleteTask(TaskHandle task){  try {    queue.deleteTask(task);  } catch (  TransientFailureException|DeadlineExceededException e) {    logger.severe(e,"Failed deleting tasks too fast");  }}  }
class C{  public static void copy(InputStream i,OutputStream o) throws IOException {  copy(i,o,8192);}  }
class C{  public RangeQueryBuilder lt(float to){  this.to=to;  this.includeUpper=false;  return this;}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public boolean startsWith(CharSeq prefix){  return str.startsWith(prefix.str);}  }
class C{  public ShapePickSupport(VisualizationServer<V,E> vv){  this.vv=vv;  this.pickSize=2;}  }
class C{  @Override public final boolean isLocal(){  if (this.isFile())   return true;  return Domains.isLocal(this.host,this.hostAddress);}  }
class C{  public void trimToSize(){  elements=cern.colt.Arrays.trimToCapacity(elements,size());}  }
class C{  public static <A>double[] samLMR(A sorted,NumberArrayAdapter<?,A> adapter,int nmom){  final int n=adapter.size(sorted);  final double[] sum=new double[nmom];  nmom=n < nmom ? n : nmom;  for (int i=0; i < n; i++) {    double term=adapter.getDouble(sorted,i);    if (Double.isInfinite(term) || Double.isNaN(term)) {      continue;    }    sum[0]+=term;    for (int j=1, z=i; j < nmom; j++, z--) {      term*=z;      sum[j]+=term;    }  }  sum[0]/=n;  double z=n;  for (int j=1; j < nmom; j++) {    z*=n - j;    sum[j]/=z;  }  for (int k=nmom - 1; k >= 1; --k) {    double p=((k & 1) == 0) ? +1 : -1;    double temp=p * sum[0];    for (int i=0; i < k; i++) {      double ai=i + 1.;      p*=-(k + ai) * (k - i) / (ai * ai);      temp+=p * sum[i + 1];    }    sum[k]=temp;  }  if (sum[1] == 0) {    for (int i=2; i < nmom; i++) {      sum[i]=0.;    }    return sum;  }  for (int i=2; i < nmom; i++) {    sum[i]/=sum[1];  }  return sum;}  }
class C{  public Openable createOpenable(String resourcePath,IJavaSearchScope scope){  int separatorIndex;  if ((separatorIndex=resourcePath.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR)) > -1) {    int rootPathLength;    if (this.lastPkgFragmentRootPath == null || (rootPathLength=this.lastPkgFragmentRootPath.length()) != resourcePath.length() || !resourcePath.regionMatches(0,this.lastPkgFragmentRootPath,0,rootPathLength)) {      String jarPath=resourcePath.substring(0,separatorIndex);      PackageFragmentRoot root=getJarPkgFragmentRoot(resourcePath,separatorIndex,jarPath,scope);      if (root == null)       return null;      this.lastPkgFragmentRootPath=jarPath;      this.lastPkgFragmentRoot=root;      this.packageHandles=new HashtableOfArrayToObject(5);    }    String classFilePath=resourcePath.substring(separatorIndex + 1);    String[] simpleNames=new Path(classFilePath).segments();    String[] pkgName;    int length=simpleNames.length - 1;    if (length > 0) {      pkgName=new String[length];      System.arraycopy(simpleNames,0,pkgName,0,length);    } else {      pkgName=CharOperation.NO_STRINGS;    }    IPackageFragment pkgFragment=(IPackageFragment)this.packageHandles.get(pkgName);    if (pkgFragment == null) {      pkgFragment=this.lastPkgFragmentRoot.getPackageFragment(pkgName);      this.packageHandles.put(pkgName,pkgFragment);    }    IClassFile classFile=pkgFragment.getClassFile(simpleNames[length]);    return (Openable)classFile;  } else {    int rootPathLength=-1;    if (this.lastPkgFragmentRootPath == null || !(resourcePath.startsWith(this.lastPkgFragmentRootPath) && !org.eclipse.jdt.internal.compiler.util.Util.isExcluded(resourcePath.toCharArray(),this.lastPkgFragmentRoot.fullInclusionPatternChars(),this.lastPkgFragmentRoot.fullExclusionPatternChars(),false) && (rootPathLength=this.lastPkgFragmentRootPath.length()) > 0 && resourcePath.charAt(rootPathLength) == '/')) {      PackageFragmentRoot root=getPkgFragmentRoot(resourcePath);      if (root == null)       return null;      this.lastPkgFragmentRoot=root;      this.lastPkgFragmentRootPath=this.lastPkgFragmentRoot.internalPath().toString();      this.packageHandles=new HashtableOfArrayToObject(5);    }    resourcePath=resourcePath.substring(this.lastPkgFragmentRootPath.length() + 1);    String[] simpleNames=new Path(resourcePath).segments();    String[] pkgName;    int length=simpleNames.length - 1;    if (length > 0) {      pkgName=new String[length];      System.arraycopy(simpleNames,0,pkgName,0,length);    } else {      pkgName=CharOperation.NO_STRINGS;    }    IPackageFragment pkgFragment=(IPackageFragment)this.packageHandles.get(pkgName);    if (pkgFragment == null) {      pkgFragment=this.lastPkgFragmentRoot.getPackageFragment(pkgName);      this.packageHandles.put(pkgName,pkgFragment);    }    String simpleName=simpleNames[length];    if (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(simpleName)) {      ICompilationUnit unit=pkgFragment.getCompilationUnit(simpleName);      return (Openable)unit;    } else     if (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(simpleName)) {      IClassFile classFile=pkgFragment.getClassFile(simpleName);      return (Openable)classFile;    }    return null;  }}  }
class C{  protected void endNode(int node) throws org.xml.sax.SAXException {  super.endNode(node);  if (DTM.ELEMENT_NODE == m_dtm.getNodeType(node)) {    m_transformer.getXPathContext().popCurrentNode();  }}  }
class C{  public Charset charset(){  return TextUtils.isEmpty(charset) ? null : Charset.forName(charset);}  }
class C{  public EpsilonBoxObjectiveComparator(double epsilon){  this.epsilons=new double[]{epsilon};}  }
class C{  public static TypedProperties readBodyMap(ActiveMQBuffer message){  TypedProperties map=new TypedProperties();  readBodyMap(message,map);  return map;}  }
class C{  public InetSocketAddress remoteAddress(){  return remoteAddress;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.TRY_STATEMENT;}  }
class C{  private boolean checkBoard(){  for (  NineSwitchesGameSwitch gameSwitch : switches) {    if (gameSwitch.getState() == 0) {      return false;    }  }  return true;}  }
class C{  private void buildHeader(){  final Header header=new Header(this.shell,SWT.NONE);  final GridData gd=new GridData(GridData.FILL,GridData.BEGINNING,true,false);  gd.heightHint=80;  header.setLayoutData(gd);  header.setTitle(ResourceManager.getLabel(ResourceManager.DID_YOU_KNOW));  if (this.image == null) {    final Image img=SWTGraphicUtil.createImageFromFile(YELLOW_LIGHT_BULB);    header.setImage(img);    SWTGraphicUtil.addDisposer(this.shell,img);  } else {    header.setImage(this.image);  }}  }
class C{  private boolean initSpriteMap(){  if (spriteMap == null) {    if (tileset != null) {      spriteMap=new Sprite[map.length];      int i=spriteMap.length;      while (i-- != 0) {        spriteMap[i]=tileset.getSprite(map[i]);      }    } else {      return false;    }  }  return true;}  }
class C{  public void addColumn(Column column){  columns.add(column);}  }
class C{  public void waitForReady(){  if (!isLoaded) {synchronized (LOAD_LOCK) {      if (!isLoaded) {        try {          long start=Runtime.getActorTime();          LOAD_LOCK.wait();          Log.d(TAG,"Waited for startup in " + (Runtime.getActorTime() - start) + " ms");        } catch (        InterruptedException e) {          e.printStackTrace();        }      }    }  }}  }
class C{  protected static void analyzeAndNode(ExprAndNode andNode,QueryGraph queryGraph,boolean isOuterJoin){  for (  ExprNode childNode : andNode.getChildNodes()) {    analyze(childNode,queryGraph,isOuterJoin);  }}  }
class C{  public ServiceCompatibilityException(){}  }
class C{  public void writeToPreferences(Context context,String preferenceFileName,String key,long value){  SharedPreferences sharedPreferences=context.getSharedPreferences(preferenceFileName,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=sharedPreferences.edit();  editor.putLong(key,value);  editor.apply();}  }
class C{  public FastStringBuffer(String s,int additionalSize){  this.count=s.length();  value=new char[this.count + additionalSize];  s.getChars(0,this.count,value,0);}  }
class C{  public SelectAllAction(){  this(null);}  }
class C{  @Override public synchronized T create(T dto) throws Exception {  long rowid=db.insert(transformer.getTableName(),null,transformer.transform(dto));  Log.i(this.getClass().getName(),"ROW ID: " + rowid);  if (rowid == -1)   throw new SQLiteException("Error inserting " + dto.getClass().toString());  return transformer.setId(dto,(int)rowid);}  }
class C{  public void joinGroup(InetAddress groupAddr) throws IOException {  checkJoinOrLeave(groupAddr);  impl.join(groupAddr);}  }
class C{  private void storeRequestId(String requestId,String key){  requestIds.put(requestId,key);}  }
class C{  private Map<ExportMask,ExportMaskPolicy> applyVolumesToMasksUsingRPVMAXRules(StorageSystem storage,ExportGroup exportGroup,Map<ExportMask,ExportMaskPolicy> masksMap){  Map<ExportMask,ExportMaskPolicy> matchingMaskMap=new HashMap<ExportMask,ExportMaskPolicy>();  final String RECOVERPOINT_JOURNAL="journal";  if (exportGroup.checkInternalFlags(Flag.RECOVERPOINT) && !exportGroup.checkInternalFlags(Flag.RECOVERPOINT_JOURNAL) && exportGroup.getHosts() == null && exportGroup.getClusters() == null) {    _log.info("ExportGroup doesnt specify any hosts/clusters to which the volumes are exported, follow normal guidelines");    for (    Entry<ExportMask,ExportMaskPolicy> maskMap : masksMap.entrySet()) {      ExportMask rpMaskingView=maskMap.getKey();      if (rpMaskingView.getMaskName().toLowerCase().contains(RECOVERPOINT_JOURNAL)) {        _log.info(String.format("Not considering %s for this RP export",rpMaskingView.getMaskName()));        continue;      }      matchingMaskMap.put(maskMap.getKey(),maskMap.getValue());    }    return matchingMaskMap;  }  if (exportGroup.checkInternalFlags(Flag.RECOVERPOINT_JOURNAL)) {    _log.info("Looking for masks with JOURNAL keyword since this export group is intended for journal volumes only");    for (    Entry<ExportMask,ExportMaskPolicy> maskMap : masksMap.entrySet()) {      ExportMask rpMaskingView=maskMap.getKey();      if (rpMaskingView.getMaskName().toLowerCase().contains(RECOVERPOINT_JOURNAL)) {        matchingMaskMap.put(maskMap.getKey(),maskMap.getValue());      }    }    return matchingMaskMap;  }  List<String> initiators=getComputeResourceInitiators(exportGroup);  Map<String,Set<URI>> crMaskingViews=getDevice().findExportMasks(storage,initiators,false);  Map<URI,ExportMask> crMaskingViewMap=new HashMap<URI,ExportMask>();  for (  Entry<String,Set<URI>> crMaskingViewEntry : crMaskingViews.entrySet()) {    Set<URI> crMaskingView=crMaskingViewEntry.getValue();    for (    URI crMaskingViewUri : crMaskingView) {      crMaskingViewMap.put(crMaskingViewUri,_dbClient.queryObject(ExportMask.class,crMaskingViewUri));    }  }  for (  Entry<ExportMask,ExportMaskPolicy> maskMap : masksMap.entrySet()) {    ExportMask rpMaskingView=maskMap.getKey();    if (rpMaskingView.getMaskName().toLowerCase().contains(RECOVERPOINT_JOURNAL)) {      _log.info(String.format("%s is a journal mask, not considering it for RP source/target copy volume",rpMaskingView.getMaskName()));      continue;    }    for (    Entry<URI,ExportMask> crMaskingViewMapEntry : crMaskingViewMap.entrySet()) {      ExportMask crMaskingView=crMaskingViewMapEntry.getValue();      if (crMaskingView.getStoragePorts().size() >= rpMaskingView.getStoragePorts().size() && crMaskingView.getStoragePorts().containsAll(rpMaskingView.getStoragePorts())) {        if (!matchingMaskMap.containsKey(rpMaskingView)) {          _log.info(String.format("Found a RP masking view %s that has the same storage ports as the computer resource (host/cluster) mask %s to which we are exporting the volume. " + "OK to use the RP masking view.",rpMaskingView.getMaskName(),crMaskingView.getMaskName()));          matchingMaskMap.put(rpMaskingView,maskMap.getValue());        }      }    }  }  if (matchingMaskMap.isEmpty()) {    _log.info("No RP masks found that align with to the compute resources' masks");    if (!masksMap.isEmpty()) {      _log.info("There are existing RP masks but none align with the masks for the compute resource. Check to see if they can be re-used");      return masksMap;    } else {      _log.info("No existing masks found for the compute resource, proceed as normal");    }  }  return matchingMaskMap;}  }
class C{  public int find(String string){  if (string == null) {    return -1;  }  for (int i=0; i != m_stringOffsets.length; ++i) {    int offset=m_stringOffsets[i];    int length=getShort(m_strings,offset);    if (length != string.length()) {      continue;    }    int j=0;    for (; j != length; ++j) {      offset+=2;      if (string.charAt(j) != getShort(m_strings,offset)) {        break;      }    }    if (j == length) {      return i;    }  }  return -1;}  }
class C{  public static void displayLocalHtmlInBrowser(final String url){  try {    java.awt.Desktop.getDesktop().browse(new File(url).toURI());  } catch (  IOException e) {    System.err.println("Problem loading URL: " + url);    e.printStackTrace();  }}  }
class C{  public RemoveContainerParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  private Object readResolve(){  return Hours.hours(getValue());}  }
class C{  public boolean release(long offset){  Assert.argNot(offset < 0,"offset must be positive");  if (bits.size() <= offset) {    while (bits.size() <= offset) {      bits.resize(bits.size() * 2);    }  }  return bits.set(offset);}  }
class C{  public boolean deleteRequiredFile(final String filename){  boolean result=false;  if (getRequiredFiles() == null) {    return result;  }  for (int i=0; i < getRequiredFiles().size(); i++) {    final String temp=getRequiredFiles().get(i);    if (temp.equals(filename)) {      getRequiredFiles().remove(i);      result=true;      break;    }  }  return result;}  }
class C{  public static boolean isInRange(final double min,final double max,final double a){  return min <= a && a <= max;}  }
class C{  public static void replaceMissingWithMAX_VALUE(double[] array){  for (int i=0; i < array.length; i++) {    if (isMissingValue(array[i])) {      array[i]=Double.MAX_VALUE;    }  }}  }
class C{  boolean userOK(String entry,String filename,String fullFileName){  return (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(_who,java.text.MessageFormat.format(ResourceBundle.getBundle("jmri.jmrit.roster.JmritRosterBundle").getString("DeletePrompt"),entry,fullFileName),java.text.MessageFormat.format(ResourceBundle.getBundle("jmri.jmrit.roster.JmritRosterBundle").getString("DeleteTitle"),entry),JOptionPane.YES_NO_OPTION));}  }
class C{  private AFTPClient actionListDir() throws PageException, IOException {  required("name",name);  required("directory",directory);  AFTPClient client=getClient();  FTPFile[] files=client.listFiles(directory);  if (files == null)   files=new FTPFile[0];  pageContext.setVariable(name,toQuery(files,"ftp",directory,client.getRemoteAddress().getHostName()));  writeCfftp(client);  return client;}  }
class C{  public boolean release(long index){  assertSegmentOpen();  long offset=offsetIndex.find(relativeOffset(index));  return offset != -1 && offsetPredicate.release(offset);}  }
class C{  public static Date ceiling(final Object date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  if (date instanceof Date) {    return ceiling((Date)date,field);  } else   if (date instanceof Calendar) {    return ceiling((Calendar)date,field).getTime();  } else {    throw new ClassCastException("Could not find ceiling of for type: " + date.getClass());  }}  }
class C{  public boolean isZoomEnabled(){  return isZoomXEnabled() || isZoomYEnabled();}  }
class C{  public int add(E o){  return add(o,0);}  }
class C{  public void add(CharsRef current){  assert stateRegistry != null : "Automaton already built.";  assert previous == null || comparator.compare(previous,current) <= 0 : "Input must be in sorted UTF-8 order: " + previous + " >= "+ current;  assert setPrevious(current);  int pos=0, max=current.length();  State next, state=root;  while (pos < max && (next=state.lastChild(Character.codePointAt(current,pos))) != null) {    state=next;    pos+=Character.charCount(Character.codePointAt(current,pos));  }  if (state.hasChildren())   replaceOrRegister(state);  addSuffix(state,current,pos);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    this.lexer.match(TokenTypes.CALL_ID);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    CallID callID=new CallID();    this.lexer.SPorHT();    String rest=lexer.getRest();    callID.setCallId(rest.trim());    return callID;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  protected AbstractSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  final public MutableString insert(final int index,final MutableString s){  final int length=length();  if (index > length)   throw new StringIndexOutOfBoundsException();  final int l=s.length();  if (l == 0)   return this;  final int newLength=length + l;  expand(newLength);  System.arraycopy(array,index,array,index + l,length - index);  System.arraycopy(s.array,0,array,index,l);  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  public void modifyEnergyStored(int energy){  this.energy+=energy;  if (this.energy > capacity) {    this.energy=capacity;  } else   if (this.energy < 0) {    this.energy=0;  }}  }
class C{  private GridVmNodesStarter(){}  }
class C{  public RelationshipBuilder addColumns(Column fromCol,Column toCol){  return addColumns(fromCol.getName(),toCol.getName());}  }
class C{  public DynamicRows(){  list=new ArrayList();}  }
class C{  public void rollback() throws IllegalStateException, SecurityException, SystemException {  tm.rollback();}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}labels[label].line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public BufferOverflowException(){  super();}  }
class C{  @Override public int read(char[] cbuf,int off,int len) throws IOException {  int i=0;  InputStream is=_is;  if (is == null)   return -1;  for (i=0; i < len; i++) {    if (i > 0 && is.available() < 1)     return i;    int ch=read();    if (ch < 0)     return i == 0 ? -1 : i;    cbuf[off + i]=(char)ch;  }  return i;}  }
class C{  protected void init(String sidc){  this.symbol1=new FEBASymbol(sidc);  this.symbol2=new FEBASymbol(sidc);  this.symbol1.setAttributes(this.activeSymbolAttributes);  this.symbol2.setAttributes(this.activeSymbolAttributes);}  }
class C{  public boolean isBridge(){  return testAllFlags(IS_METHOD | BRIDGE);}  }
class C{  int peek() throws IOException {  final int lookaheadChar=in.read();  in.unread(lookaheadChar);  return lookaheadChar;}  }
class C{  private static ContainerDatacenterBroker createBroker(int overBookingFactor){  ContainerDatacenterBroker broker=null;  try {    broker=new ContainerDatacenterBroker("Broker",overBookingFactor);  } catch (  Exception var2) {    var2.printStackTrace();    System.exit(0);  }  return broker;}  }
class C{  public Module(final Database database,final INaviModule module,final TagManager nodeTagManager,final TagManager viewTagManager){  m_database=Preconditions.checkNotNull(database,"Error: Database argument can't be null");  m_module=Preconditions.checkNotNull(module,"Error: Module argument can't be null");  m_nodeTagManager=Preconditions.checkNotNull(nodeTagManager,"Error: Node tag manager argument can't be null");  m_viewTagManager=Preconditions.checkNotNull(viewTagManager,"Error: View tag manager argument can't be null");  if (m_module.getConfiguration().getDebugger() != null) {    m_debugger=new Debugger(m_module.getConfiguration().getDebugger());  }  if (module.isLoaded()) {    convertData();  }  module.addListener(m_listener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:45.947 -0500",hash_original_method="A5B2D8696143266ED24B145CF029F206",hash_generated_method="E7B57C0AFB5FD682336B63E149C8CCF1") public boolean deliverSelfNotifications(){  return false;}  }
class C{  private static Sector sectorFromCentroid(double centroidLat,double centroidLon,double deltaLat,double deltaLon){  return Sector.fromDegrees(centroidLat - deltaLat / 2,centroidLon - deltaLon / 2,deltaLat,deltaLon);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public static void sort(byte[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){  super.declareExtensions(extProfile);}  }
class C{  public void checkinConnection(DBConnectionWrapper conn){  if (conn == null)   return;  conn.setCurrentStatement(null);  conn.setInuse(false);}  }
class C{  public boolean isInteriorRight(){  double diff=v0.point.y - v1.point.y;  if (diff == 0.0) {    if (v0.point.x < v1.point.x) {      return true;    } else {      return false;    }  } else   if (diff > 0.0) {    return true;  } else {    return false;  }}  }
class C{  public PayloadAttributeImpl(){}  }
class C{  public RefCountedAutoCloseable(T object){  if (object == null)   throw new NullPointerException();  mObject=object;}  }
class C{  public String source(){  return this.source;}  }
class C{  public FPSTextureView removeChildAt(int location){  DisplayBase removed=mDisplayList.remove(location);  if (removed != null) {    removed.disable();  }  return this;}  }
class C{  public TokenScanner(IScanner scanner){  this(scanner,null);}  }
class C{  public static void makeGrid(Container parent,int rows,int cols,int initialX,int initialY,int xPad,int yPad){  SpringLayout layout;  try {    layout=(SpringLayout)parent.getLayout();  } catch (  ClassCastException exc) {    System.err.println("The first argument to makeGrid must use SpringLayout.");    return;  }  Spring xPadSpring=Spring.constant(xPad);  Spring yPadSpring=Spring.constant(yPad);  Spring initialXSpring=Spring.constant(initialX);  Spring initialYSpring=Spring.constant(initialY);  int max=rows * cols;  Spring maxWidthSpring=layout.getConstraints(parent.getComponent(0)).getWidth();  Spring maxHeightSpring=layout.getConstraints(parent.getComponent(0)).getHeight();  for (int i=1; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    maxWidthSpring=Spring.max(maxWidthSpring,cons.getWidth());    maxHeightSpring=Spring.max(maxHeightSpring,cons.getHeight());  }  for (int i=0; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    cons.setWidth(maxWidthSpring);    cons.setHeight(maxHeightSpring);  }  SpringLayout.Constraints lastCons=null;  SpringLayout.Constraints lastRowCons=null;  for (int i=0; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    if (i % cols == 0) {      lastRowCons=lastCons;      cons.setX(initialXSpring);    } else {      cons.setX(Spring.sum(lastCons.getConstraint(SpringLayout.EAST),xPadSpring));    }    if (i / cols == 0) {      cons.setY(initialYSpring);    } else {      cons.setY(Spring.sum(lastRowCons.getConstraint(SpringLayout.SOUTH),yPadSpring));    }    lastCons=cons;  }  SpringLayout.Constraints pCons=layout.getConstraints(parent);  pCons.setConstraint(SpringLayout.SOUTH,Spring.sum(Spring.constant(yPad),lastCons.getConstraint(SpringLayout.SOUTH)));  pCons.setConstraint(SpringLayout.EAST,Spring.sum(Spring.constant(xPad),lastCons.getConstraint(SpringLayout.EAST)));}  }
class C{  public static void rebootSafeMode(final Context context,boolean confirm){  mReboot=true;  mRebootSafeMode=true;  mRebootReason=null;  shutdownInner(context,confirm);}  }
class C{  public void advanceInputWatermark(TimerCallback timerCallback,Instant newInputWatermark) throws Exception {  checkNotNull(newInputWatermark);  checkState(!newInputWatermark.isBefore(inputWatermarkTime),"Cannot move input watermark time backwards from %s to %s",inputWatermarkTime,newInputWatermark);  WindowTracing.trace("TestTimerInternals.advanceInputWatermark: from {} to {}",inputWatermarkTime,newInputWatermark);  inputWatermarkTime=newInputWatermark;  advanceAndFire(timerCallback,newInputWatermark,TimeDomain.EVENT_TIME);}  }
class C{  public void logout() throws LoginException {  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(new SecurityPermission("authProvider." + this.getName()));  }  if (hasValidToken() == false) {    return;  }  if ((token.tokenInfo.flags & CKF_LOGIN_REQUIRED) == 0) {    if (debug != null) {      debug.println("logout operation not required for token - " + "ignoring logout request");    }    return;  }  try {    if (token.isLoggedInNow(null) == false) {      if (debug != null) {        debug.println("user not logged in");      }      return;    }  } catch (  PKCS11Exception e) {  }  Session session=null;  try {    session=token.getOpSession();    p11.C_Logout(session.id());    if (debug != null) {      debug.println("logout succeeded");    }  } catch (  PKCS11Exception pe) {    if (pe.getErrorCode() == CKR_USER_NOT_LOGGED_IN) {      if (debug != null) {        debug.println("user not logged in");      }      return;    }    LoginException le=new LoginException();    le.initCause(pe);    throw le;  } finally {    token.releaseSession(session);  }}  }
class C{  public void addMapElementState(MapElementState[] state){  for (int i=0; i < state.length; ++i) {    addMapElementState(state[i]);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.TRANSITION_ROOT__DEF:    setDef((TransitionSpecification)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static AlertDialog.Builder showUpdateAvailableDialog(final Activity activity,int titleResId,int messageResId,int labelYesResId,int labelNoResId){  return showUpdateAvailableDialog(activity,activity.getString(titleResId),activity.getString(messageResId),activity.getString(labelYesResId),activity.getString(labelNoResId));}  }
class C{  @Field(14) public Pointer<SAFEARRAY> parray(){  return this.io.getPointerField(this,14);}  }
class C{  private boolean isLongMIN_VALUE(){  if (decimalAt != count || count != MAX_COUNT) {    return false;  }  for (int i=0; i < count; ++i) {    if (digits[i] != LONG_MIN_REP[i])     return false;  }  return true;}  }
class C{  public boolean shipsLoad(String load,String type){  if (_shipLoadOption.equals(ALL_LOADS)) {    return true;  }  if (_shipLoadOption.equals(INCLUDE_LOADS)) {    return _shipLoadList.contains(load) || _shipLoadList.contains(type + CarLoad.SPLIT_CHAR + load);  }  return !_shipLoadList.contains(load) && !_shipLoadList.contains(type + CarLoad.SPLIT_CHAR + load);}  }
class C{  public GoogleRelayedCandidate(TransportAddress transportAddress,GoogleTurnCandidateHarvest turnCandidateHarvest,TransportAddress mappedAddress,String username,String password){  super(transportAddress,turnCandidateHarvest.hostCandidate.getParentComponent(),CandidateType.RELAYED_CANDIDATE,CandidateExtendedType.GOOGLE_TURN_RELAYED_CANDIDATE,turnCandidateHarvest.hostCandidate.getParentComponent().findLocalCandidate(mappedAddress));  if (transportAddress.getTransport() == Transport.TCP) {    super.setExtendedType(CandidateExtendedType.GOOGLE_TCP_TURN_RELAYED_CANDIDATE);  }  this.turnCandidateHarvest=turnCandidateHarvest;  this.username=username;  this.password=password;  setBase(this);  setRelayServerAddress(turnCandidateHarvest.harvester.stunServer);  setMappedAddress(mappedAddress);}  }
class C{  private long sumGCTimes(){  long sum=0;  for (  java.lang.management.GarbageCollectorMXBean mxBean : gcMXBeans) {    sum+=mxBean.getCollectionTime();  }  return sum;}  }
class C{  private boolean isReadOnlyKey(Collection.Key key){  return (key.equals(KeyConstants._java) || key.equals(KeyConstants._separator) || key.equals(KeyConstants._os)|| key.equals(KeyConstants._coldfusion)|| key.equals(KeyConstants._lucee));}  }
class C{  boolean isAbstract(){  return dot == null;}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  @Override protected void finalize() throws Throwable {  mView=null;  mElement=null;  mScreenPoint=null;  mScene3DPoint=null;  mTouchStatus=null;  super.finalize();}  }
class C{  protected int determineNumAttributes(double[] values,int num) throws Exception {  int result;  int count;  result=num;  count=values.length;  if (count > result)   result=count;  return result;}  }
class C{  private void loadDiceServer(final GameData data){  final List<IRemoteDiceServer> diceRollers=new ArrayList<>(PropertiesDiceRoller.loadFromFile());  diceRollers.add(new InternalDiceServer());  for (  final IRemoteDiceServer diceRoller : diceRollers) {    final IRemoteDiceServer cached=(IRemoteDiceServer)LocalBeanCache.INSTANCE.getSerializable(diceRoller.getDisplayName());    if (cached != null) {      diceRoller.setCcAddress(cached.getCcAddress());      diceRoller.setToAddress(cached.getToAddress());      diceRoller.setGameId(cached.getGameId());    }  }  m_diceServerEditor.setBeans(diceRollers);  if (m_gameSelectorModel.isSavedGame()) {    final IRemoteDiceServer roller=(IRemoteDiceServer)data.getProperties().get(DICE_ROLLER);    if (roller != null) {      m_diceServerEditor.setSelectedBean(roller);    }  }}  }
class C{  public static float staticNextFloatFromTo(float from,float to){synchronized (shared) {    return shared.nextFloatFromTo(from,to);  }}  }
class C{  public NumberAxis(String label){  super(label,NumberAxis.createStandardTickUnits());  this.rangeType=RangeType.FULL;  this.autoRangeIncludesZero=DEFAULT_AUTO_RANGE_INCLUDES_ZERO;  this.autoRangeStickyZero=DEFAULT_AUTO_RANGE_STICKY_ZERO;  this.tickUnit=DEFAULT_TICK_UNIT;  this.numberFormatOverride=null;  this.markerBand=null;}  }
class C{  public void clear(){  removeTextChangedListener(mEditTextWatcher);  Editable editable=getText();  int selectionEnd=getSelectionEnd();  int selectionStart=getSelectionStart();  setText(editable.toString());  setSelection(selectionStart,selectionEnd);}  }
class C{  @Override public void ortho(float left,float right,float bottom,float top,float near,float far){  float w=right - left;  float h=top - bottom;  float d=far - near;  flush();  float x=+2.0f / w;  float y=+2.0f / h;  float z=-2.0f / d;  float tx=-(right + left) / w;  float ty=-(top + bottom) / h;  float tz=-(far + near) / d;  projection.set(x,0,0,tx,0,-y,0,ty,0,0,z,tz,0,0,0,1);  updateProjmodelview();}  }
class C{  public Variable[] findLocalVariables(String clazz){  List<Variable> matches=new ArrayList<Variable>();  for (ListIterator<Variable> iterator=fLocalVariables.listIterator(fLocalVariables.size()); iterator.hasPrevious(); ) {    Variable localVariable=iterator.previous();    if (localVariable.isSubtypeOf(clazz))     matches.add(localVariable);  }  return matches.toArray(new Variable[matches.size()]);}  }
class C{  public void flushAnimation(Runnable r){  if (isAnimating()) {    postAnimations.add(r);  } else {    r.run();  }}  }
class C{  public void drawButton(Minecraft par1Minecraft,int par2,int par3){  if (this.visible) {    boolean flag=par2 >= this.xPosition && par3 >= this.yPosition && par2 < this.xPosition + this.width && par3 < this.yPosition + this.height;    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);    par1Minecraft.getTextureManager().bindTexture(bookGuiTextures);    int k=0;    int l=192;    if (flag) {      k+=23;    }    if (!this.nextPage) {      l+=13;    }    this.drawTexturedModalRect(this.xPosition,this.yPosition,k,l,23,13);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(java.lang.Math.floor(m_arg0.execute(xctxt).num()));}  }
class C{  @Override public void processTuple(ArrayList<Object> tuple){  tableToDocument.clear();  BasicDBObject doc=null;  for (int i=0; i < tuple.size(); i++) {    String table=tableMapping.get(i);    if ((doc=tableToDocument.get(table)) == null) {      doc=new BasicDBObject();      doc.put(columnList.get(i),tuple.get(i));    } else {      doc.put(columnList.get(i),tuple.get(i));    }    tableToDocument.put(table,doc);  }  processTupleCommon();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void removeParentPropertyChangeListener(PropertyChangeListener listener){  if (rootParent instanceof JFrame) {    ((JFrame)rootParent).removePropertyChangeListener(listener);  } else   if (rootParent instanceof JDialog) {    ((JDialog)rootParent).removePropertyChangeListener(listener);  }}  }
class C{  private void changePosition(String direction){  int newPosition=0;  if (direction.equals("Left")) {    newPosition=currentPosition - 1;  } else   if (direction.equals("Right")) {    newPosition=currentPosition + 1;  } else   if (direction.equals("Forward")) {    newPosition=currentPosition - GRID_SIZE;  } else   if (direction.equals("Backward")) {    newPosition=currentPosition + GRID_SIZE;  }  if (newPosition >= 0 && newPosition < GRID_SIZE * GRID_SIZE) {    ((JLabel)frame.getContentPane().getComponent(currentPosition)).setText(" ");    currentPosition=newPosition;    ((JLabel)frame.getContentPane().getComponent(currentPosition)).setText(" HERE");  }}  }
class C{  protected boolean validate(final char[] component,final BitSet generous){  return validate(component,0,-1,generous);}  }
class C{  public static MosaicDescriptor readFrom(final Deserializer deserializer,final String label){  return new MosaicDescriptor(deserializer.readString(label,MAX_DESCRIPTION_LENGTH));}  }
class C{  @Override public void writeNdefNotWritable(){  toast(getString(R.string.tagNotWritable));}  }
class C{  public School primarySchool(){  return primarySchool;}  }
class C{  public static DBIDRange generateStaticDBIDRange(int size){  return DBIDFactory.FACTORY.generateStaticDBIDRange(size);}  }
class C{  @UiHandler("firstChoiceButton") public void handleFirstChoiceClick(final ClickEvent event){  this.actionDelegate.firstChoiceClicked();}  }
class C{  public double doOperation() throws OperatorFailedException {  double newValue;  final Bounds<Double> bounds=variable.getBounds();  final int dim=variable.getSize();  if (updateAllIndependently) {    for (int i=0; i < dim; i++) {      newValue=gamma.nextGamma();      while (newValue == 0.0) {        newValue=gamma.nextGamma();      }      if (newValue < bounds.getLowerLimit(i) || newValue > bounds.getUpperLimit(i)) {        throw new OperatorFailedException("proposed value outside boundaries");      }      variable.setValue(i,newValue);    }  }  return 0;}  }
class C{  public int port(int defaultPort){  ensureSingle();  validatePort("defaultPort",defaultPort);  return port != 0 ? port : defaultPort;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-29 15:18:50.110 -0500",hash_original_method="D9E098017BDD3A062F96DACECBFE33D0",hash_generated_method="8C9C0A073213EF6E79CE5BFC2500C0C1") public void sample(String tag,long delta){  long[] array=getArray(tag);  final int index=(int)array[mSampleSize]++;  array[index]=delta;  if (array[mSampleSize] == mSampleSize) {    long totalDelta=0;    for (    long d : array) {      totalDelta+=d / mScaleFactor;    }    array[mSampleSize]=0;    Log.i(TAG,tag + " average = " + totalDelta / mSampleSize);  }}  }
class C{  public RequestHandle put(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(null,url,params,responseHandler);}  }
class C{  public void saveToKeyStore(Cert cert,File file,String privateKeyPassword,String keyStorePassword,String keyStoreType) throws IOException, KeyStoreException, NoSuchProviderException, NoSuchAlgorithmException, CertificateException {  String alias="key";  CertificateUtils.saveToProtectedStore(getPrivateKey(),cert.getCertificate(),file,alias,privateKeyPassword,keyStorePassword,keyStoreType);}  }
class C{  private static void usage(Throwable t,String format,Object... args){  System.out.print("ERROR: ");  System.out.printf(format,args);  System.out.println();  System.out.println(options.usage());  if (t != null)   t.printStackTrace();  System.exit(-1);}  }
class C{  public void addRaster(float lt,float ln,int offset_x1,int offset_y1,Image image,int image_width,int image_height,LinkProperties properties) throws IOException, InterruptedException {  LinkRaster.write(lt,ln,offset_x1,offset_y1,image,image_width,image_height,properties,link.dos);}  }
class C{  public static boolean isSourceFolder(ItemReference item,HasProjectDescriptor projectNode){  if ("folder".equals(item.getType())) {    ProjectDescriptor projectDescriptor=projectNode.getProjectDescriptor();    BuildersDescriptor builders=projectDescriptor.getBuilders();    Map<String,List<String>> attributes=projectDescriptor.getAttributes();    if (builders != null) {      boolean isSrcDir=false;      boolean isTestDir=false;      if (attributes.containsKey(builders.getDefault() + ".source.folder")) {        isSrcDir=(projectDescriptor.getPath() + "/" + attributes.get(builders.getDefault() + ".source.folder").get(0)).equals(item.getPath());      }      if (attributes.containsKey(builders.getDefault() + ".test.source.folder")) {        isTestDir=(projectDescriptor.getPath() + "/" + attributes.get(builders.getDefault() + ".test.source.folder").get(0)).equals(item.getPath());      }      return isSrcDir || isTestDir;    }  }  return false;}  }
class C{  public JPrefuseTree(Tree t,String labelField){  super();  m_tree=t;  m_field=labelField;  PrefuseTreeModel model=new PrefuseTreeModel();  super.setModel(model);  m_tree.addGraphModelListener(model);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CSVFormat withCommentStart(final Character commentStart){  if (isLineBreak(commentStart)) {    throw new IllegalArgumentException("The comment start character cannot be a line break");  }  return new CSVFormat(delimiter,quoteChar,quotePolicy,commentStart,escape,ignoreSurroundingSpaces,ignoreEmptyLines,recordSeparator,nullString,header,skipHeaderRecord);}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  @Deprecated protected final DccChat dccAcceptChatRequest(String sourceNick,long address,int port){  throw new RuntimeException("dccAcceptChatRequest is deprecated, please use onIncomingChatRequest");}  }
class C{  public static byte min(byte a,final byte b,final byte c){  if (b < a) {    a=b;  }  if (c < a) {    a=c;  }  return a;}  }
class C{  public static Map<String,Object> copyPartyContactMechs(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String partyIdFrom=(String)context.get("partyIdFrom");  String partyIdTo=(String)context.get("partyIdTo");  Locale locale=(Locale)context.get("locale");  try {    List<Map<String,Object>> valueMaps=ContactMechWorker.getPartyContactMechValueMaps(delegator,partyIdFrom,false);    for (    Map<String,Object> thisMap : valueMaps) {      GenericValue contactMech=(GenericValue)thisMap.get("contactMech");      GenericValue partyContactMech=(GenericValue)thisMap.get("partyContactMech");      List<GenericValue> partyContactMechPurposes=UtilGenerics.checkList(thisMap.get("partyContactMechPurposes"));      String contactMechId=contactMech.getString("contactMechId");      Map<String,Object> serviceResults=dispatcher.runSync("createPartyContactMech",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"userLogin",userLogin,"contactMechId",contactMechId,"fromDate",UtilDateTime.nowTimestamp(),"allowSolicitation",partyContactMech.getString("allowSolicitation"),"extension",partyContactMech.getString("extension")));      if (ServiceUtil.isError(serviceResults)) {        return serviceResults;      }      for (      GenericValue purpose : partyContactMechPurposes) {        Map<String,Object> input=UtilMisc.toMap("partyId",partyIdTo,"contactMechId",contactMechId,"userLogin",userLogin);        input.put("contactMechPurposeTypeId",purpose.getString("contactMechPurposeTypeId"));        serviceResults=dispatcher.runSync("createPartyContactMechPurpose",input);        if (ServiceUtil.isError(serviceResults)) {          return serviceResults;        }      }    }  } catch (  GenericServiceException e) {    Debug.logError(e,e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyCannotCopyPartyContactMech",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  private void addToSet(ObjectXmlPersist persist,IFile file,String setName) throws IOException, CoreException {  Collection<RelationSetDescriptor> updateSet=loadRelationSets(persist,file);  persistUpdatedBundle(persist,file,updateSet,setName);}  }
class C{  public Envelope3D translate(final double transX,final double transY,final double transZ){  if (isNull()) {    return this;  }  init(getMinX() + transX,getMaxX() + transX,getMinY() + transY,getMaxY() + transY,getMinZ() + transZ,getMaxZ() + transZ);  return this;}  }
class C{  public final int hashCode(){  return System.identityHashCode(this);}  }
class C{  public void report(Reader r) throws IOException, Importer.ImportException {  System.err.println("making report");  ArrayList<Tree> referenceTrees=new ArrayList<Tree>();  BufferedReader reader=new BufferedReader(r);  String line=reader.readLine();  if (line.toUpperCase().startsWith("#NEXUS")) {    NexusImporter importer=new NexusImporter(reader);    Tree[] trees=importer.importTrees(null);    for (    Tree tree : trees) {      referenceTrees.add(tree);      SimpleTree sTree=new SimpleTree(tree);      System.out.println("Estimated marginal posterior by condiational clade frequencies:");      System.out.println(getTreeProbability(sTree) + "\t\t" + sTree);    }  } else {    throw new RuntimeException("Could not read reference tree. Only Nexus format is supported.");  }  System.out.flush();}  }
class C{  public Class create(){  setUseCache(false);  return (Class)super.create(this);}  }
class C{  public void createUdaDefinition() throws SaaSApplicationException {  ArgumentValidator.notNull("UdaDefinitionDetails",model);  VOUdaDefinition udaDefitionDetails=UdaModelConverter.convertUdaDefDetailsToVoUdaDefinition(model.getNewUdaDefinition());  if (model.getUdaType().equals(UdaBean.CUSTOMER)) {    udaDefitionDetails.setTargetType(UdaBean.CUSTOMER);  } else {    udaDefitionDetails.setTargetType(UdaBean.CUSTOMER_SUBSCRIPTION);  }  persistUda(udaDefitionDetails,true);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.TYPE__NAME:    setName(NAME_EDEFAULT);  return;case DatatypePackage.TYPE__NAMESPACE:setNamespace(NAMESPACE_EDEFAULT);return;case DatatypePackage.TYPE__VERSION:setVersion(VERSION_EDEFAULT);return;case DatatypePackage.TYPE__REFERENCES:getReferences().clear();return;case DatatypePackage.TYPE__DESCRIPTION:setDescription(DESCRIPTION_EDEFAULT);return;case DatatypePackage.TYPE__DISPLAYNAME:setDisplayname(DISPLAYNAME_EDEFAULT);return;case DatatypePackage.TYPE__CATEGORY:setCategory(CATEGORY_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public AttributeTable(String fileName,DBFField[] fields,boolean destroy) throws DBFException, IOException {  this.signature=SIG_DBASE_III;  this.terminator1=0x0D;  this.fileName=fileName;  createDBFFile(new File(fileName),destroy);  setFields(fields);  write();  initialize();}  }
class C{  public UserRoleAssignmentException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public String removeReviewByMarketplaceAdmin() throws OperationNotPermittedException, ObjectNotFoundException {  HttpServletRequest httpRequest=getRequest();  if (manageReviewModel.getServiceReview() != null) {    getReviewService().deleteReviewByMarketplaceOwner(manageReviewModel.getServiceReview(),manageReviewModel.getDeletionReason());  }  setForwardUrl(httpRequest);  return OUTCOME_MARKETPLACE_REDIRECT;}  }
class C{  public static String toString(DelaunayVertex[] matrix){  StringBuilder buf=new StringBuilder("{");  for (  DelaunayVertex row : matrix) {    buf.append(" " + row);  }  buf.append(" }");  return buf.toString();}  }
class C{  public float modelY(float x,float y,float z){  showMissingWarning("modelY");  return 0;}  }
class C{  void mapOneToOne(Register A,Register B){  Register aFriend=getMapping(A);  Register bFriend=getMapping(B);  if (aFriend != null) {    aFriend.mapsToRegister=null;  }  if (bFriend != null) {    bFriend.mapsToRegister=null;  }  A.mapsToRegister=B;  B.mapsToRegister=A;}  }
class C{  public boolean add(E item){  addLast(item);  return true;}  }
class C{  public synchronized void removeDataStatusListener(DataStatusListener l){  listenerList.remove(DataStatusListener.class,l);}  }
class C{  private boolean isDeploymentMessage(GridIoMessage msg){  Object origMsg=msg.message();  boolean dep=(origMsg instanceof GridDeploymentRequest) || (origMsg instanceof GridDeploymentResponse);  if (dep)   info(">>> Got deployment message: " + origMsg);  return dep;}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public DbClient.EntityListAndCursorResult mockPhotoList(){  List<DatastoreV1.Entity> photoList=new ArrayList<>();  photoList.add(mockPhotoEntity("user_id_2"));  photoList.add(mockPhotoEntity("user_id_3"));  return new DbClient.EntityListAndCursorResult(photoList,null);}  }
class C{  private RdapSearchResults searchByDomainName(final RdapSearchPattern partialStringQuery,final DateTime now){  if (!partialStringQuery.getHasWildcard()) {    DomainResource domainResource=loadByForeignKey(DomainResource.class,partialStringQuery.getInitialString(),now);    ImmutableList<DomainResource> results=(domainResource == null) ? ImmutableList.<DomainResource>of() : ImmutableList.of(domainResource);    return makeSearchResults(results,false,now);  } else {    List<DomainResource> domainList=new ArrayList<>();    Query<DomainResource> query=ofy().load().type(DomainResource.class).filter("fullyQualifiedDomainName <",partialStringQuery.getNextInitialString()).filter("fullyQualifiedDomainName >=",partialStringQuery.getInitialString());    if (partialStringQuery.getSuffix() != null) {      query=query.filter("tld",partialStringQuery.getSuffix());    }    for (    DomainResource domain : query.limit(RESULT_SET_SIZE_SCALING_FACTOR * rdapResultSetMaxSize)) {      if (EppResourceUtils.isActive(domain,now)) {        if (domainList.size() >= rdapResultSetMaxSize) {          return makeSearchResults(ImmutableList.copyOf(domainList),true,now);        }        domainList.add(domain);      }    }    return makeSearchResults(ImmutableList.copyOf(domainList),false,now);  }}  }
class C{  public HashEntry<K,V> createEntry(HashEntry<K,V> next,int hashCode,K key,V value){  return new ReferenceEntry<K,V>(this,(ReferenceEntry<K,V>)next,hashCode,key,value);}  }
class C{  public static Icon brighten(Icon icon){  Image img=getImage(icon);  if (img == null)   return icon;  img=brighten(img);  return new IconUIResource(new ImageIcon(img));}  }
class C{  private boolean tryReplacingWithConstant(NormalSsaInsn insn){  Insn originalRopInsn=insn.getOriginalRopInsn();  Rop opcode=originalRopInsn.getOpcode();  RegisterSpec result=insn.getResult();  if (result != null && !ssaMeth.isRegALocal(result) && opcode.getOpcode() != RegOps.CONST) {    TypeBearer type=insn.getResult().getTypeBearer();    if (type.isConstant() && type.getBasicType() == Type.BT_INT) {      replacePlainInsn(insn,RegisterSpecList.EMPTY,RegOps.CONST,(Constant)type);      if (opcode.getOpcode() == RegOps.MOVE_RESULT_PSEUDO) {        int pred=insn.getBlock().getPredecessors().nextSetBit(0);        ArrayList<SsaInsn> predInsns=ssaMeth.getBlocks().get(pred).getInsns();        NormalSsaInsn sourceInsn=(NormalSsaInsn)predInsns.get(predInsns.size() - 1);        replacePlainInsn(sourceInsn,RegisterSpecList.EMPTY,RegOps.GOTO,null);      }      return true;    }  }  return false;}  }
class C{  public DividerBuilder with(Drawable drawable){  for (  Direction direction : Direction.values()) {    sublayers.put(direction,new Sublayer(drawable));  }  return this;}  }
class C{  public void endVisit(ExpressionStatement node){}  }
class C{  public String postImmediate(Properties ctx,int AD_Client_ID,int AD_Table_ID,int Record_ID,boolean force,String trxName){  log.info("[" + m_no + "] Table="+ AD_Table_ID+ ", Record="+ Record_ID);  m_postCount++;  MAcctSchema[] ass=MAcctSchema.getClientAcctSchema(ctx,AD_Client_ID);  return Doc.postImmediate(ass,AD_Table_ID,Record_ID,force,null);}  }
class C{  public CStringBuilder deleteCharAt(int index){  deleteCharAt0(index);  return this;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public HashConversion(Map data){  hashData.putAll(data);}  }
class C{  private void placeSoupFor(final Player player){  final Item soup=SingletonRepository.getEntityManager().getItem("soup");  final IRPZone zone=SingletonRepository.getRPWorld().getZone("int_fado_tavern");  soup.setPosition(17,23);  soup.setBoundTo(player.getName());  soup.put("amount",player.getBaseHP());  zone.add(soup);}  }
class C{  @Override public String toString(){  return "[" + action + " "+ start+ " "+ length+ " "+ text+ "]\n";}  }
class C{  public boolean isDrop(){  return isDrop;}  }
class C{  public void testVerifyWeblogicHomeWhenFileInsteadOfDirectory() throws Exception {  this.fsManager.resolveFile(WL_HOME + "/server/lib").createFile();  this.container.setFileHandler(this.fileHandler);  try {    this.container.verifyWeblogicHome();    fail("Should have thrown an exception here");  } catch (  ContainerException expected) {    assertEquals("Invalid WebLogic installation. The [" + WL_HOME + "/server/lib] path should be a "+ "directory. Make sure the WL_HOME directory you have specified "+ "points to the right location (It's currently pointing to ["+ WL_HOME+ "])",expected.getMessage());  }}  }
class C{  public boolean isBullet(){  return body.isBullet();}  }
class C{  private void ensureOpen() throws IOException {  if (out == null)   throw new IOException("Stream closed");}  }
class C{  private void processDependencies(GridField changedField){  String columnName=changedField.getColumnName();  for (  GridField field : m_mFields) {    if (field == null || field == changedField)     continue;    verifyChangedField(field,columnName);  }  for (  GridField field : m_mFields2) {    if (field == null || field == changedField)     continue;    verifyChangedField(field,columnName);  }}  }
class C{  public void removeCache(PImage image){  cacheMap.remove(image);}  }
class C{  public static Map<String,List<Volume>> groupVolumesByArrayGroup(List<Volume> volumes){  Map<String,List<Volume>> arrayGroupToVolumes=new HashMap<String,List<Volume>>();  for (  Volume volume : volumes) {    String repGroupName=volume.getReplicationGroupInstance();    if (arrayGroupToVolumes.get(repGroupName) == null) {      arrayGroupToVolumes.put(repGroupName,new ArrayList<Volume>());    }    arrayGroupToVolumes.get(repGroupName).add(volume);  }  return arrayGroupToVolumes;}  }
class C{  public void testNearSpansAdvanceLikeNext() throws Exception {  SpanNearQuery q=makeQuery();  Spans span=q.createWeight(searcher,false,1f).getSpans(searcher.getIndexReader().leaves().get(0),SpanWeight.Postings.POSITIONS);  assertEquals(0,span.advance(0));  assertEquals(0,span.nextStartPosition());  assertEquals(s(0,0,3),s(span));  assertEquals(1,span.advance(1));  assertEquals(0,span.nextStartPosition());  assertEquals(s(1,0,4),s(span));  assertEquals(Spans.NO_MORE_DOCS,span.advance(2));}  }
class C{  public static void deepCopyOnto(JsonObject source,JsonObject destination,boolean replace){  if (source == null || destination == null) {    throw new RuntimeException("Both source and destination must exist while copying values from one to another.");  }  JsonObject sourceCopy=new JsonParser().parse(source.toString()).getAsJsonObject();  deepCopyOnto(sourceCopy,destination,replace,true);}  }
class C{  public List<NamedRelatedResourceRep> listByVirtualArray(URI virtualArrayId){  return getList(PathConstants.STORAGE_PORT_BY_VARRAY_URL,virtualArrayId);}  }
class C{  public OutlierResult run(Relation<V> relation){  DoubleMinMax mm=new DoubleMinMax();  WritableDoubleDataStore oscores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT);  CovarianceMatrix temp=CovarianceMatrix.make(relation);  double[] mean=temp.getMeanVector(relation).toArray();  double[][] covarianceMatrix=temp.destroyToNaiveMatrix();  double[][] covarianceTransposed=inverse(covarianceMatrix);  double det=new LUDecomposition(covarianceMatrix).det();  final double fakt=(1.0 / (Math.sqrt(MathUtil.powi(MathUtil.TWOPI,RelationUtil.dimensionality(relation)) * det)));  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double[] x=minusEquals(relation.get(iditer).toArray(),mean);    final double mDist=transposeTimesTimes(x,covarianceTransposed,x);    final double prob=fakt * Math.exp(-mDist * .5);    mm.put(prob);    oscores.putDouble(iditer,prob);  }  final OutlierScoreMeta meta;  if (invert) {    double max=mm.getMax() != 0 ? mm.getMax() : 1.;    for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {      oscores.putDouble(iditer,(max - oscores.doubleValue(iditer)) / max);    }    meta=new BasicOutlierScoreMeta(0.0,1.0);  } else {    meta=new InvertedOutlierScoreMeta(mm.getMin(),mm.getMax(),0.0,Double.POSITIVE_INFINITY);  }  DoubleRelation res=new MaterializedDoubleRelation("Gaussian Model Outlier Score","gaussian-model-outlier",oscores,relation.getDBIDs());  return new OutlierResult(meta,res);}  }
class C{  public void testFourNodeSubmitCommand() throws Throwable {  testSubmitCommand(4);}  }
class C{  public void add(String line){  if (headerBuilder == null) {    headerBuilder=new Headers.Builder();  }  headerBuilder.add(line);}  }
class C{  public DTMConfigurationException(String msg){  super(msg);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isStopScrollWhenTouch(){  return stopScrollWhenTouch;}  }
class C{  public String toString(){  return "Converter[" + (getSupportedType() == null ? "null" : getSupportedType().getName()) + "]";}  }
class C{  public boolean isGrowable(){  return growable;}  }
class C{  public ValueConverter mappingConverterFor(Table table,Column column){  return mappingConverterFor(table.id(),column);}  }
class C{  private boolean quiesce(final long timeout,final TimeUnit unit) throws InterruptedException {  if (!isPaused())   throw new IllegalStateException();  if (!lock.isHeldByCurrentThread()) {    throw new IllegalMonitorStateException();  }  long nanos=unit.toNanos(timeout);  long lastTime=System.nanoTime();  final long beginNanos=lastTime;  int nwaits=0;  final int beforeCount=nrunning.get();  while (true) {    final long now=System.nanoTime();    nanos-=now - lastTime;    lastTime=now;    if (nanos <= 0) {      break;    }    if (nrunning.get() == 0) {      return true;    }    waiting.awaitNanos(nanos);    nwaits++;  }  final AbstractTask<?>[] a=active.values().toArray(new AbstractTask[0]);  final TaskAndTime[] b=new TaskAndTime[a.length];  long maxElapsedRunning=0;  for (int i=0; i < a.length; i++) {    final TaskAndTime t=b[i]=new TaskAndTime(a[i],lastTime);    if (t.state == TaskAndTime.State.Running && t.elapsedRunTime >= maxElapsedRunning) {      maxElapsedRunning=t.elapsedRunTime;    }  }  Arrays.sort(b);  log.error("Timeout! : timeout=" + unit.toMillis(timeout) + "ms,elapsed="+ TimeUnit.NANOSECONDS.toMillis(lastTime - beginNanos)+ "ms,nwaits="+ nwaits+ ",runningBefore="+ beforeCount+ ",runningNow="+ nrunning.get()+ ",maxElapsedRunning="+ maxElapsedRunning+ ",::runningTasks="+ Arrays.toString(b));  return false;}  }
class C{  public void addEdge(LineString lineString){  if (lineString.isEmpty()) {    return;  }  Coordinate[] coordinates=CoordinateArrays.removeRepeatedPoints(lineString.getCoordinates());  if (coordinates.length <= 1)   return;  Coordinate startCoordinate=coordinates[0];  Coordinate endCoordinate=coordinates[coordinates.length - 1];  Node startNode=getNode(startCoordinate);  Node endNode=getNode(endCoordinate);  DirectedEdge directedEdge0=new LineMergeDirectedEdge(startNode,endNode,coordinates[1],true);  DirectedEdge directedEdge1=new LineMergeDirectedEdge(endNode,startNode,coordinates[coordinates.length - 2],false);  Edge edge=new LineMergeEdge(lineString);  edge.setDirectedEdges(directedEdge0,directedEdge1);  add(edge);}  }
class C{  public DisabledHandler(IElementUpdater updater){  this.updater=updater;}  }
class C{  public static NbtOutputStream writeDeflated(NbtTag tag,File file,boolean append,Deflater def) throws IOException {  createFile(file);  NbtOutputStream out=new NbtOutputStream(new DeflaterOutputStream(new FileOutputStream(file,append),def));  out.write(tag);  return out;}  }
class C{  public boolean isServerEMail(){  Object oo=get_Value(COLUMNNAME_IsServerEMail);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected boolean isValidFormat(){  boolean result;  result=false;  try {    new SimpleDateFormat(m_FormatText.getText());    result=true;  } catch (  Exception e) {  }  return result;}  }
class C{  public AnnotationMember(String name,Object val,Class type,Method m){  this(name,val);  definingMethod=m;  if (type == int.class) {    elementType=Integer.class;  } else   if (type == boolean.class) {    elementType=Boolean.class;  } else   if (type == char.class) {    elementType=Character.class;  } else   if (type == float.class) {    elementType=Float.class;  } else   if (type == double.class) {    elementType=Double.class;  } else   if (type == long.class) {    elementType=Long.class;  } else   if (type == short.class) {    elementType=Short.class;  } else   if (type == byte.class) {    elementType=Byte.class;  } else {    elementType=type;  }}  }
class C{  protected int readIntReply() throws java.io.IOException {  sockBuf.clear().limit(4);  try {    TimeoutHandler.registerTimeout(timeout,clientSocket);    do {      int x=clientSocket.read(sockBuf);      if (x < 0)       throw new java.io.EOFException();    } while (sockBuf.remaining() > 0);  }  finally {    TimeoutHandler.clearTimeout(clientSocket);  }  sockBuf.flip();  return sockBuf.getInt();}  }
class C{  public static PriceModelContext create(List<String> contextKeys,List<String> contextValues){  PriceModelContext pmContext=new PriceModelContext();  for (int i=0; i < contextKeys.size(); i++) {    String key=contextKeys.get(i);    if (key.startsWith(SERVICE_PARAMETERS_PREFIX)) {      key=key.substring(SERVICE_PARAMETERS_PREFIX.length());switch (key) {case SERVICE_PAR_INSTANCE_TYPE:        pmContext.setInstanceType(contextValues.get(i));      break;case SERVICE_PAR_REGION:    pmContext.setRegion(contextValues.get(i));  break;case SERVICE_PAR_OS:pmContext.setOs(contextValues.get(i));break;default :break;}} else if (key.equals(PAR_CUSTOMER_ID)) {pmContext.setCustomerId(contextValues.get(i));} else if (key.equals(PAR_SUBSCRIPTION_ID)) {pmContext.setSubscriptionId(contextValues.get(i));}}return pmContext;}  }
class C{  public static boolean handleCommit(SolrQueryRequest req,UpdateRequestProcessor processor,SolrParams params,boolean force) throws IOException {  if (params == null) {    params=new MapSolrParams(new HashMap<String,String>());  }  boolean optimize=params.getBool(UpdateParams.OPTIMIZE,false);  boolean commit=params.getBool(UpdateParams.COMMIT,false);  boolean softCommit=params.getBool(UpdateParams.SOFT_COMMIT,false);  boolean prepareCommit=params.getBool(UpdateParams.PREPARE_COMMIT,false);  if (optimize || commit || softCommit|| prepareCommit|| force) {    CommitUpdateCommand cmd=new CommitUpdateCommand(req,optimize);    updateCommit(cmd,params);    processor.processCommit(cmd);    return true;  }  return false;}  }
class C{  public static void switchSerializerIfHTML(TransformerImpl transformer,String ns,String localName) throws TransformerException {  if (null == transformer)   return;  if (((null == ns) || (ns.length() == 0)) && localName.equalsIgnoreCase("html")) {    if (null != transformer.getOutputPropertyNoDefault(OutputKeys.METHOD))     return;    Properties prevProperties=transformer.getOutputFormat().getProperties();    OutputProperties htmlOutputProperties=new OutputProperties(Method.HTML);    htmlOutputProperties.copyFrom(prevProperties,true);    Properties htmlProperties=htmlOutputProperties.getProperties();    try {      Serializer oldSerializer=null;      if (null != oldSerializer) {        Serializer serializer=SerializerFactory.getSerializer(htmlProperties);        Writer writer=oldSerializer.getWriter();        if (null != writer)         serializer.setWriter(writer); else {          OutputStream os=oldSerializer.getOutputStream();          if (null != os)           serializer.setOutputStream(os);        }        ContentHandler ch=serializer.asContentHandler();        transformer.setContentHandler(ch);      }    } catch (    java.io.IOException e) {      throw new TransformerException(e);    }  }}  }
class C{  public T width(String value){  return attr("width",value);}  }
class C{  protected void visitChildren(ExtensionVisitor ev) throws ExtensionVisitor.StoppedException {  for (  Extension ext : nonRepeatingExtensionMap.values()) {    visitChild(ev,ext);  }  for (  List<Extension> extList : repeatingExtensionMap.values()) {    for (    Extension ext : extList) {      visitChild(ev,ext);    }  }}  }
class C{  @Override public Vertex parseCaseByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex vertex=network.createTemporyVertex();  vertex.addRelationship(Primitive.INSTANTIATION,Primitive.CASE);  long id=dataStream.readLong();  if (id == 0) {    return vertex;  }  Object[] result=new Object[3];  result[0]=id;  parseArgumentByteCode(result,dataStream,null,network);  id=(Long)result[0];  Vertex variable=(Vertex)result[2];  if (variable == null) {    return vertex;  }  if (variable.is(Primitive.PATTERN)) {    if (id == 0) {      return vertex;    }    variable=network.findById(id);    if (variable == null) {      return vertex;    }    vertex.addRelationship(Primitive.PATTERN,variable);    id=dataStream.readLong();  } else {    vertex.addRelationship(Primitive.CASE,variable);  }  while (id > 0) {    Vertex type=network.findById(id);    if (type == null) {      return vertex;    }    id=dataStream.readLong();    if (type.is(Primitive.GOTO) || type.is(Primitive.FOR)) {      while (id > 0) {        Vertex element=network.findById(id);        if (element == null) {          id=dataStream.readLong();          continue;        }        vertex.addRelationship(type,element);        id=dataStream.readLong();      }      id=dataStream.readLong();      continue;    } else {      result[0]=id;      result[1]=null;      result[2]=null;      parseArgumentByteCode(result,dataStream,null,network);      id=(Long)result[0];      Vertex argument=(Vertex)result[2];      if (argument != null) {        vertex.addRelationship(type,argument,Integer.MAX_VALUE);      }    }  }  return vertex;}  }
class C{  public static List<Tuple<Integer,Integer>> readInputList(String inputPath,String fileName,String extension){  String filePathAndName=inputPath + fileName + "/"+ fileName+ extension;  log.info("Reading edge list list from " + filePathAndName);  List<Tuple<Integer,Integer>> edgeList=new ArrayList<Tuple<Integer,Integer>>();  try {    BufferedReader br=IOUtils.getBufferedReader(filePathAndName);    String lines;    while ((lines=br.readLine()) != null) {      String[] inputString=lines.split("	");      int source=Integer.parseInt(inputString[0]);      int destination=Integer.parseInt(inputString[1]);      Tuple<Integer,Integer> thisEdgeTuple=new Tuple<Integer,Integer>(source,destination);      edgeList.add(thisEdgeTuple);    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return edgeList;}  }
class C{  private void fireCouplingAdded(Coupling<?> coupling){  for (  CouplingListener listeners : couplingListeners) {    listeners.couplingAdded(coupling);  }}  }
class C{  @Override public void startEntity(){}  }
class C{  public static void close(){  if (thread != null && thread.isAlive()) {    thread.close=true;  }}  }
class C{  private static void displayUsage() throws OpenStegoException {  PluginManager.loadPlugins();  System.err.print(labelUtil.getString("appName") + " " + labelUtil.getString("appVersion")+ ". ");  System.err.println(labelUtil.getString("copyright") + "\n");  System.err.println(labelUtil.getString("cmd.usage",File.separator));}  }
class C{  private final void init(){  this.xIcon=new ClickableIcon(new ImageIcon(this.getClass().getResource("/images/navigate_cross.png")),this,this.mouseListener);  this.setXiconTabPaneAdapter(this.defaultAdapter);  this.mapKeyActions();}  }
class C{  private void assertBetterCandidate(int direction,Rect srcRect,Rect expectedBetter,Rect expectedWorse){  String directionStr=validateAndGetStringFor(direction);  String assertMsg=String.format("expected %s to be a better focus search candidate than " + "%s when searching " + "from %s in direction %s",expectedBetter,expectedWorse,srcRect,directionStr);  assertTrue(assertMsg,mFocusFinder.isBetterCandidate(direction,srcRect,expectedBetter,expectedWorse));  assertMsg=String.format("expected %s to not be a better focus search candidate than " + "%s when searching " + "from %s in direction %s",expectedWorse,expectedBetter,srcRect,directionStr);  assertFalse(assertMsg,mFocusFinder.isBetterCandidate(direction,srcRect,expectedWorse,expectedBetter));}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private String receive() throws IOException {  try {    String line=mBufferedReader.readLine();    mLastReceiveTime=SystemClock.elapsedRealtime();    return line;  } catch (  IOException e) {    log.error("receive() IOException");    throw e;  }}  }
class C{  public QueryStringQueryBuilder fuzziness(Fuzziness fuzziness){  this.fuzziness=fuzziness;  return this;}  }
class C{  public String titleize(String words){  StringBuilder sb=new StringBuilder(words.length());  boolean capitalize=true;  for (int i=0; i < words.length(); i++) {    char ch=words.charAt(i);    if (Character.isWhitespace(ch)) {      sb.append(' ');      capitalize=true;    } else     if (ch == '-') {      sb.append(' ');      capitalize=true;    } else     if (capitalize) {      sb.append(Character.toUpperCase(ch));      capitalize=false;    } else {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  public void testEmptyWithFeature() throws Exception {  ObjectMapper mapper=new ObjectMapper();  assertTrue(mapper.getSerializationConfig().isEnabled(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS));  mapper.configure(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS,false);  assertEquals("{}",serializeAsString(mapper,new Empty()));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.FORMAL_PARAMETER__DECLARED_TYPE_REF:    return getDeclaredTypeRef();case N4JSPackage.FORMAL_PARAMETER__BOGUS_TYPE_REF:  return getBogusTypeRef();case N4JSPackage.FORMAL_PARAMETER__NAME:return getName();case N4JSPackage.FORMAL_PARAMETER__ANNOTATIONS:return getAnnotations();case N4JSPackage.FORMAL_PARAMETER__VARIADIC:return isVariadic();case N4JSPackage.FORMAL_PARAMETER__DEFINED_TYPE_ELEMENT:if (resolve) return getDefinedTypeElement();return basicGetDefinedTypeElement();case N4JSPackage.FORMAL_PARAMETER__INITIALIZER:return getInitializer();case N4JSPackage.FORMAL_PARAMETER__BINDING_PATTERN:return getBindingPattern();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override void recreateIndexData() throws IMQException {  throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());}  }
class C{  public String encode(){  return new StringBuffer(scheme).append(SP).append(authParams.encode()).toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element entRefAddr;  Node entRefNode;  String entRefValue;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  entRefAddr=(Element)elementList.item(1);  entRefNode=entRefAddr.getFirstChild();  nodeType=(int)entRefNode.getNodeType();  if (equals(3,nodeType)) {    entRefNode=doc.createEntityReference("ent2");    assertNotNull("createdEntRefNotNull",entRefNode);  }  entRefValue=entRefNode.getNodeValue();  assertNull("entRefNodeValue",entRefValue);}  }
class C{  public void testSetPublicKey2() throws Exception {  Identity i2=new IdentityStub("testSetPublicKey2_2",IdentityScope.getSystemScope());  new PublicKeyStub("kkk","testSetPublicKey2",new byte[]{1,2,3,4,5});  try {    i2.setPublicKey(null);  } catch (  KeyManagementException ok) {  }}  }
class C{  public static String encode(byte[] data){  Preconditions.checkNotNull(data,"data");  return org.apache.commons.codec.binary.Base64.encodeBase64String(data);}  }
class C{  public void initialize(){  moduleStore=new DoubleHashedTable(101);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tBall splitting algorithm to use.","S",1,"-S <classname and options>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public Result run(Database database,Relation<O> relation,Relation<NumberVector> radrel){  if (queries != null) {    throw new AbortException("This 'run' method will not use the given query set!");  }  DistanceQuery<O> distQuery=database.getDistanceQuery(relation,getDistanceFunction());  RangeQuery<O> rangeQuery=database.getRangeQuery(distQuery);  final DBIDs sample=DBIDUtil.randomSample(relation.getDBIDs(),sampling,random);  FiniteProgress prog=LOG.isVeryVerbose() ? new FiniteProgress("kNN queries",sample.size(),LOG) : null;  int hash=0;  MeanVariance mv=new MeanVariance();  for (DBIDIter iditer=sample.iter(); iditer.valid(); iditer.advance()) {    double r=radrel.get(iditer).doubleValue(0);    DoubleDBIDList rres=rangeQuery.getRangeForDBID(iditer,r);    int ichecksum=0;    for (DBIDIter it=rres.iter(); it.valid(); it.advance()) {      ichecksum+=DBIDUtil.asInteger(it);    }    hash=Util.mixHashCodes(hash,ichecksum);    mv.put(rres.size());    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  if (LOG.isStatistics()) {    LOG.statistics("Result hashcode: " + hash);    LOG.statistics("Mean number of results: " + mv.getMean() + " +- "+ mv.getNaiveStddev());  }  return null;}  }
class C{  public void delete(){  m_selectedColorPanel.removeListener(m_colorPanelListener);  m_selectedColorPanel.removeMouseListener(m_colorPanelListener);  for (  final ColorPanel cp : m_colorPanels) {    cp.removeListener(m_colorPanelListener);    cp.removeMouseListener(m_colorPanelListener);  }}  }
class C{  public void hidePieceJail(){  for (  PieceJailChessSquare pieceJailSquare : pieceJailSquares) {    if (pieceJailSquare != null) {      pieceJailSquare.setVisible(false);    }  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildBakery(zone);}  }
class C{  private static int calcScale(int proteinLength,int maxNumScaleMarkers){  int scale=1;  while (true) {    if (proteinLength / (scale) <= maxNumScaleMarkers) {      return scale;    } else     if (proteinLength / (scale * 2) <= maxNumScaleMarkers) {      return scale * 2;    } else     if (proteinLength / (scale * 5) <= maxNumScaleMarkers) {      return scale * 5;    }    scale*=10;  }}  }
class C{  public Value createClob(Reader x,long length){  if (x == null) {    return ValueNull.INSTANCE;  }  if (length <= 0) {    length=-1;  }  Value v=ValueLobDb.createTempClob(x,length);  session.addTemporaryLob(v);  return v;}  }
class C{  public void close(){  final DefaultStreamMessage<T> m=new DefaultStreamMessage<>();  m.close();  delegate(m);}  }
class C{  public String search() throws Exception {  executeQuery();  return SUCCESS;}  }
class C{  javax.xml.transform.Templates processFromNode(Node node,String systemID) throws TransformerConfigurationException {  m_DOMsystemID=systemID;  return processFromNode(node);}  }
class C{  public void messageItemDetails(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){  HashMap<Integer,String> options=new HashMap<Integer,String>(msgOption.length);  for (int i=0; i < msgOption.length; i++) {    options.put(msgNumber[i],msgOption[i]);  }  messageItemDetails(strClass,description,item,options,defaultOption);}  }
class C{  public static <I,A>Parser<I,A> fail(String msg){  return null;}  }
class C{  public IgniteDeploymentCheckedException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public boolean isValid(){  if (valid == null) {    getDate();  }  return valid.booleanValue();}  }
class C{  public void disconnectFromDatabase() throws Exception {  if (m_Debug) {    System.err.println("Disconnecting from " + m_DatabaseURL);  }  if (m_Connection != null) {    m_Connection.close();    m_Connection=null;  }}  }
class C{  public RequestHandle head(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return head(null,url,params,responseHandler);}  }
class C{  public int functionEvaluation(){  return this.functionEvaluation_;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.OPERATION__NAME:    return getName();case FunctionblockPackage.OPERATION__PARAMS:  return getParams();case FunctionblockPackage.OPERATION__RETURN_TYPE:return getReturnType();case FunctionblockPackage.OPERATION__DESCRIPTION:return getDescription();case FunctionblockPackage.OPERATION__BREAKABLE:return isBreakable();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected List<BindingSet> makeList(){  return new ArrayList<BindingSet>();}  }
class C{  public void tickOptionComputation(int reqId,int field,double impliedVol,double delta,double optPrice,double pvDividend,double gamma,double vega,double theta,double undPrice){  _log.debug("tickOptionComputation:" + reqId);}  }
class C{  public final void addElement(Object element){  Object[] newObjects;  if (m_Size == m_Objects.length) {    newObjects=new Object[(int)m_CapacityMultiplier * (m_Objects.length + m_CapacityIncrement)];    System.arraycopy(m_Objects,0,newObjects,0,m_Size);    m_Objects=newObjects;  }  m_Objects[m_Size]=element;  m_Size++;}  }
class C{  private static Shape rightEdge(BufferedImage image,GeneralPath path,int start){  int lastj=0;  Point2D p1=path.getCurrentPoint();  Point2D p2=null;  Line2D line=new Line2D.Float();  for (int i=start; i >= 0; i-=sample) {    boolean aPointExistsOnThisLine=false;    for (int j=image.getWidth() - 1; j >= 0; j-=sample) {      if ((image.getRGB(j,i) & 0xff000000) != 0) {        Point2D p=new Point2D.Float(j,i);        aPointExistsOnThisLine=true;        p2=detectLine(p1,p2,p,line,path);        lastj=j;        break;      }    }    if (aPointExistsOnThisLine == false) {      break;    }  }  return topEdge(image,path,lastj);}  }
class C{  @CheckReturnValue public <T>Subject1<T> as(Function3<A,B,C,T> mapping){  return new MappingTheoryBuilder<>(this.state,combine(),null,null,null);}  }
class C{  public void testSHA1(){  Digest oldDigest=new SHA1Digest();  Digest newDigest=new OpenSSLDigest.SHA1();  doTestMessageDigest(oldDigest,newDigest);}  }
class C{  public static void checkFieldValueFromSystemType(final String value,final String fieldName,final Collection<DiscoveredDataObject.Type> expected){  for (  DiscoveredDataObject.Type e : expected) {    if (e.name().equals(value)) {      return;    }  }  throw APIException.badRequests.invalidParameterValueWithExpected(fieldName,value,expected.toArray());}  }
class C{  public String fixBrokenEntities(String rawText,FilePosition textPos){  return rawText;}  }
class C{  public static int hash(int seed,boolean aBoolean){  return (PRIME * seed) + (aBoolean ? 1231 : 1237);}  }
class C{  @SuppressWarnings("unchecked") public int compareTo(final IdentityArrayList<? extends K> l){  final int s1=size(), s2=l.size();  final K a1[]=a, a2[]=l.a;  K e1, e2;  int r, i;  for (i=0; i < s1 && i < s2; i++) {    e1=a1[i];    e2=a2[i];    if ((r=(((Comparable<K>)(e1)).compareTo(e2))) != 0)     return r;  }  return i < s2 ? -1 : (i < s1 ? 1 : 0);}  }
class C{  public boolean isPad(){  return pad;}  }
class C{  public String description(){  return description;}  }
class C{  public CGraphToolBarNavigationPanel(final ZyGraph graph,final List<INaviModule> modules,final JFrame parent){  super(new BorderLayout());  m_gotoField=new CGotoAddressField(graph,modules,parent);  m_searchPanel=new CToolbarSearchPanel(graph);  final JPanel pBorderPanel=new JPanel(new BorderLayout());  pBorderPanel.setBorder(new EmptyBorder(new Insets(1,1,1,1)));  final JPanel pFields=new JPanel(new BorderLayout());  pFields.setBorder(new TitledBorder(""));  final JPanel pSearchField=new JPanel(new BorderLayout());  pSearchField.add(new CHelpLabel("   " + "Search" + " ",new CSearchFieldHelp()),BorderLayout.WEST);  pSearchField.add(m_searchPanel,BorderLayout.CENTER);  pSearchField.setPreferredSize(new Dimension(200,20));  pSearchField.setMinimumSize(new Dimension(200,20));  pFields.add(pSearchField,BorderLayout.CENTER);  final JPanel pGotoField=new JPanel(new BorderLayout());  pGotoField.add(new CHelpLabel("  " + "Address" + " ",new CGotoAddressHelp()),BorderLayout.WEST);  pGotoField.add(m_gotoField,BorderLayout.CENTER);  pGotoField.setPreferredSize(new Dimension(200,20));  pGotoField.setMinimumSize(new Dimension(200,20));  pFields.add(pGotoField,BorderLayout.WEST);  pBorderPanel.add(pFields,BorderLayout.CENTER);  pBorderPanel.setPreferredSize(new Dimension(400,20));  pBorderPanel.setMinimumSize(new Dimension(400,20));  add(pBorderPanel);}  }
class C{  public ClassMap(){  parent=null;}  }
class C{  public void introduceMyself(){  check();  Intent intent=new Intent(context,IntroductionActivity.class);  Bundle bundle=new Bundle();  bundle.putParcelableArrayList(BUNDLE_SLIDES,slides);  bundle.putSerializable(BUNDLE_STYLE,style);  bundle.putInt(BUNDLE_ORIENTATION,orientation);  bundle.putBoolean(BUNDLE_SHOW_PREVIOUS_BUTTON,showPreviousButton);  bundle.putBoolean(BUNDLE_SHOW_INDICATOR,showIndicator);  bundle.putString(BUNDLE_SKIP_STRING,skipString);  bundle.putBoolean(BUNDLE_ALLOW_BACK_PRESS,allowBackPress);  if (skipResource != null) {    bundle.putInt(BUNDLE_SKIP_RESOURCE,skipResource);  }  intent.putExtras(bundle);  Activity parent=context.getParent();  if (parent != null) {    context=parent;  }  context.startActivityForResult(intent,INTRODUCTION_REQUEST_CODE);}  }
class C{  @Override protected boolean isPrepared(final Player player){  if (player.isEquipped(NEEDED_EQUIPMENT)) {    return true;  }  player.sendPrivateText("You need a fishing rod for fishing.");  return false;}  }
class C{  void clearTableModelCache(){  tableModelCache.clear();}  }
class C{  public UmlStateMachineModelFactory(Resource resource){  Assert.notNull(resource,"Resource must be set");  this.resource=resource;}  }
class C{  public void invalidate(){  bounds=null;}  }
class C{  public RingerModeAndScreenMonitor(FeedbackController feedbackController,MenuManager menuManager,ShakeDetector shakeDetector,SpeechController speechController,TalkBackService context){  if (feedbackController == null)   throw new IllegalStateException();  if (menuManager == null)   throw new IllegalStateException();  if (speechController == null)   throw new IllegalStateException();  if (shakeDetector == null)   throw new IllegalStateException();  mContext=context;  mFeedbackController=feedbackController;  mMenuManager=menuManager;  mSpeechController=speechController;  mShakeDetector=shakeDetector;  mAudioManager=(AudioManager)context.getSystemService(Service.AUDIO_SERVICE);  mTelephonyManager=(TelephonyManager)context.getSystemService(Service.TELEPHONY_SERVICE);  mIsScreenOn=((PowerManager)context.getSystemService(Context.POWER_SERVICE)).isScreenOn();}  }
class C{  public static IndexType createShardingKey(boolean hash){  IndexType type=new IndexType();  type.shardingKey=true;  type.primaryKey=false;  type.hash=hash;  type.unique=true;  return type;}  }
class C{  private static byte divmod(byte[] number,int firstDigit,int base,int divisor){  int remainder=0;  for (int i=firstDigit; i < number.length; i++) {    int digit=(int)number[i] & 0xFF;    int temp=remainder * base + digit;    number[i]=(byte)(temp / divisor);    remainder=temp % divisor;  }  return (byte)remainder;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.193 -0400",hash_original_method="F65239B395BF4DB687722F10CCB87FAF",hash_generated_method="935E7B794D5252EC3D3F1E2EB6C97A6E") private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  public void close(){}  }
class C{  public void test_ticket_1007_subquery() throws Exception {  new TestHelper("ticket-1007-subquery","ticket-1007-subquery.rq","ticket-1007-subquery.trig","ticket-1007-subquery.srx",false).runTest();}  }
class C{  public CoverageIntVdt(String t,String a,int v){  table=t.toLowerCase().intern();  attribute=a.toLowerCase().intern();  value=v;}  }
class C{  public AnonymousTypeProposalInfo(IJavaProject project,CompletionProposal proposal){  super(project,proposal);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE__TYPE:    return getType();case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE__VALUE:  if (resolve)   return getValue();return basicGetValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int hashCode(){  int hash=mask;  if (rangeSet != null) {    hash&=CONTEXTUAL_MASK;    hash^=rangeSet.hashCode();  }  return hash;}  }
class C{  public final void checkWholePageClip(final int max_y){  if ((current_clipping_shape != null && current_clipping_shape.getBounds().getHeight() > max_y + 2) && (current_clipping_shape.getBounds().y >= 0)) {    current_clipping_shape=null;    hasClipChanged=true;    if (debugClip) {      System.out.println("[checkWholePageClip] current_clipping_shape=" + current_clipping_shape);      if (current_clipping_shape == null) {        System.out.println("Null shape");      } else {        System.out.println("Shape bounds= " + current_clipping_shape.getBounds());      }    }  }}  }
class C{  public static TreebankNode selectHighestCoveredTreebankNode(JCas jCas,Annotation annotation){  TreebankNode highestNode=null;  int smallestDepth=Integer.MAX_VALUE;  for (  TreebankNode node : JCasUtil.selectCovered(jCas,TreebankNode.class,annotation)) {    if (annotation.getBegin() <= node.getBegin() && node.getEnd() <= annotation.getEnd()) {      int depth=getDepth(node);      if (depth < smallestDepth) {        highestNode=node;        smallestDepth=depth;      }    }  }  return highestNode;}  }
class C{  public Task<FileShareRestRep> createFileContinuousCopies(URI id,FileReplicationCreateParam input){  TaskResourceRep task=client.post(TaskResourceRep.class,input,getContinuousCopiesUrl() + "/create",id);  return new Task<FileShareRestRep>(client,task,FileShareRestRep.class);}  }
class C{  public void revert(){  fCustomTemplate=fOriginalTemplate;  fCustomIsEnabled=fOriginalIsEnabled;  fIsDeleted=false;}  }
class C{  public boolean isHiddenFromSelectors(){  return false;}  }
class C{  public static boolean equals(byte[] array1,byte[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @Override public void clear(){  super.clear();  head=tail=null;}  }
class C{  public synchronized void addSeries(XYSeries series){  mSeries.add(series);}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void updateTempPacketSize(final int read){  mRepeatTempPckSize+=read;}  }
class C{  public static ProbCNFGrammar buildExampleGrammarOne(){  ProbCNFGrammar g=new ProbCNFGrammar();  ArrayList<Rule> rules=new ArrayList<Rule>();  rules.add(new Rule("S","Y,Z",(float)0.10));  rules.add(new Rule("B","B,D",(float)0.10));  rules.add(new Rule("B","G,D",(float)0.10));  rules.add(new Rule("C","E,C",(float)0.10));  rules.add(new Rule("C","E,H",(float)0.10));  rules.add(new Rule("E","M,N",(float)0.10));  rules.add(new Rule("D","M,N",(float)0.10));  rules.add(new Rule("Y","E,C",(float)0.10));  rules.add(new Rule("Z","E,C",(float)0.10));  rules.add(new Rule("M","m",(float)1.0));  rules.add(new Rule("N","n",(float)1.0));  rules.add(new Rule("B","a",(float)0.25));  rules.add(new Rule("B","b",(float)0.25));  rules.add(new Rule("B","c",(float)0.25));  rules.add(new Rule("B","d",(float)0.25));  rules.add(new Rule("G","a",(float)0.50));  rules.add(new Rule("G","d",(float)0.50));  rules.add(new Rule("C","x",(float)0.20));  rules.add(new Rule("C","y",(float)0.20));  rules.add(new Rule("C","z",(float)0.60));  rules.add(new Rule("H","u",(float)0.50));  rules.add(new Rule("H","z",(float)0.50));  if (!g.addRules(rules)) {    return null;  }  return g;}  }
class C{  @Override public void collect(int doc) throws IOException {  if (multiValued) {    boolean exists=false;    if (setValues != null) {      if (doc > setValues.docID()) {        setValues.advance(doc);      }      if (doc == setValues.docID()) {        int term;        while ((term=(int)setValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {          exists=true;          final BytesRef value=setValues.lookupOrd(term);          parent.collectField(doc,name,parser.parse(value));        }      }    }    if (!exists) {      parent.collectField(doc,name,FacetingAccumulator.MISSING_VALUE);    }  } else {    if (numField) {      if (numValues != null) {        int valuesDocID=numValues.docID();        if (valuesDocID < doc) {          valuesDocID=numValues.advance(doc);        }        if (valuesDocID == doc) {          parent.collectField(doc,name,((NumericParser)parser).parseNum(numValues.longValue()));        } else {          parent.collectField(doc,name,FacetingAccumulator.MISSING_VALUE);        }      } else {        parent.collectField(doc,name,FacetingAccumulator.MISSING_VALUE);      }    } else {      if (sortValues != null) {        if (doc > sortValues.docID()) {          sortValues.advance(doc);        }        if (doc == sortValues.docID()) {          parent.collectField(doc,name,parser.parse(sortValues.lookupOrd(sortValues.ordValue())));        } else {          parent.collectField(doc,name,FacetingAccumulator.MISSING_VALUE);        }      } else {        parent.collectField(doc,name,FacetingAccumulator.MISSING_VALUE);      }    }  }}  }
class C{  public static String decodeModifiedUTF7(String string){  return X_MODIFIED_UTF_7_CHARSET.decode(ByteBuffer.wrap(string.getBytes())).toString();}  }
class C{  public void add(double value,double n){  sum+=value * n;  sumSq+=value * value * n;  count+=n;  if (Double.isNaN(min)) {    min=max=value;  } else   if (value < min) {    min=value;  } else   if (value > max) {    max=value;  }}  }
class C{  public void add(AbstractOption option){  add(options.size(),option);}  }
class C{  static int[] identityList(int n){  int[] integers=new int[n];  for (int i=0; i < n; i++) {    integers[i]=i;  }  return integers;}  }
class C{  public ScaleAndIndexes indexes(Collection<Integer> indexes){  return new ScaleAndIndexes(scale,Ints.toArray(indexes));}  }
class C{  public void closeSequence(int tag){  final int end=stackBuf[--stackTop];  putLength(end - start);  putTag(tag);}  }
class C{  public String dump(){  return "RRA:" + consolFun + ":"+ xff+ ":"+ steps+ ":"+ rows;}  }
class C{  public static void resetDeltaInvokationCounters(){  resetToDeltaCounter();  resetFromDeltaCounter();  resetFailureCounter();}  }
class C{  public synchronized CompositeTransaction recreateCompositeTransaction(Propagation context,boolean orphancheck,boolean heur_commit) throws SysException {  CompositeTransaction ct=null;  ct=getCurrentTx();  if (ct != null) {    LOGGER.logWarning("Recreating a transaction with existing transaction: " + ct.getTid());  }  ct=getTransactionService().recreateCompositeTransaction(context,orphancheck,heur_commit);  Thread t=Thread.currentThread();  setThreadMappings(ct,t);  return ct;}  }
class C{  static void appendLengthInfo(int numLetters,Version version,Mode mode,BitArray bits) throws WriterException {  int numBits=mode.getCharacterCountBits(version);  if (numLetters >= (1 << numBits)) {    throw new WriterException(numLetters + " is bigger than " + ((1 << numBits) - 1));  }  bits.appendBits(numLetters,numBits);}  }
class C{  protected float[] parseKeySplines(){  String keySplinesString=element.getAttributeNS(null,SVG_KEY_SPLINES_ATTRIBUTE);  int len=keySplinesString.length();  if (len == 0) {    return null;  }  List keySplines=new ArrayList(7);  int count=0, i=0, start=0, end;  char c;  outer:   while (i < len) {    while (keySplinesString.charAt(i) == ' ') {      i++;      if (i == len) {        break outer;      }    }    start=i++;    if (i != len) {      c=keySplinesString.charAt(i);      while (c != ' ' && c != ',' && c != ';') {        i++;        if (i == len) {          break;        }        c=keySplinesString.charAt(i);      }      end=i++;      if (c == ' ') {        do {          if (i == len) {            break;          }          c=keySplinesString.charAt(i++);        } while (c == ' ');        if (c != ';' && c != ',') {          i--;        }      }      if (c == ';') {        if (count == 3) {          count=0;        } else {          throw new BridgeException(ctx,element,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_KEY_SPLINES_ATTRIBUTE,keySplinesString});        }      } else {        count++;      }    } else {      end=i++;    }    try {      float keySplineValue=Float.parseFloat(keySplinesString.substring(start,end));      keySplines.add(new Float(keySplineValue));    } catch (    NumberFormatException nfEx) {      throw new BridgeException(ctx,element,nfEx,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_KEY_SPLINES_ATTRIBUTE,keySplinesString});    }  }  len=keySplines.size();  float[] ret=new float[len];  for (int j=0; j < len; j++) {    ret[j]=((Float)keySplines.get(j)).floatValue();  }  return ret;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.762 -0500",hash_original_method="C74862F858F8C9C5BB339033A2D07A66",hash_generated_method="ECFE1B63481F82251B331729028554D2") public float descent(){  return getTaintFloat();}  }
class C{  public static long highestOneBit(long lng){  lng|=(lng >> 1);  lng|=(lng >> 2);  lng|=(lng >> 4);  lng|=(lng >> 8);  lng|=(lng >> 16);  lng|=(lng >> 32);  return (lng & ~(lng >>> 1));}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  static void generateField(String fieldName,String type,int modifiers,ClassWriter cw){  cw.visitField(modifiers,fieldName,type,null);}  }
class C{  public static void interrupt(final Thread thread){  if (thread != null) {    thread.interrupt();  }}  }
class C{  public static ConnectionManager createConnectionManager(final Object config){  final ConnectionManager connectionManager;  if (config instanceof SingleServerConfig) {    connectionManager=new SingleConnectionManager((SingleServerConfig)config,new Config());  } else {    throw new IllegalArgumentException("Server(s) address(es) not defined!");  }  return connectionManager;}  }
class C{  public boolean definitelyDifferent(TypeReference that){  if (this == that)   return false;  if (name != that.name)   return true;  RVMType mine=peekType();  RVMType theirs=that.peekType();  if (mine == null || theirs == null)   return false;  return mine != theirs;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=super.hashCode();  result=prime * result + (tenant == null ? 0 : tenant.hashCode());  return result;}  }
class C{  public boolean translateFilesRecursive(final File sourceDir,final File destDir,final File translationFile,final String extensions,final String notdir){  final List<File> dirList=FileUtils.getDirsRecursive(sourceDir,notdir);  dirList.add(sourceDir);  final Map<String,Map<String,String>> translationLists=loadTranslationsLists(translationFile);  boolean erg=true;  for (  final File file : dirList) {    if (file.isDirectory() && !file.getName().equals(notdir)) {      File file2=new File(destDir,file.getPath().substring(sourceDir.getPath().length()));      erg&=translateFiles(file,file2,sourceDir,translationLists,extensions);    }  }  return erg;}  }
class C{  public HttpsURL(final String user,final String password,final String host) throws URIException {  this(user,password,host,-1,null,null,null);}  }
class C{  public void unsetMatchColumn(String columnName) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  void onClick(){  if (useNativeTextInput && Display.getInstance().isNativeInputSupported()) {    super.onClick();  }}  }
class C{  public boolean nextBoolean(){  return org.evosuite.runtime.Random.nextBoolean();}  }
class C{  @Inline private void traceObjectWithoutMoving(TransitiveClosure trace,ObjectReference object){  byte markValue=markState;  byte oldMarkState=ObjectHeader.testAndMark(object,markValue);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!defrag.inDefrag() || defrag.spaceExhausted() || !isDefragSource(object));  if (oldMarkState != markValue) {    if (!MARK_LINE_AT_SCAN_TIME)     markLines(object);    trace.processNode(object);  }  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!ForwardingWord.isForwardedOrBeingForwarded(object));  if (VM.VERIFY_ASSERTIONS && HeaderByte.NEEDS_UNLOGGED_BIT)   VM.assertions._assert(HeaderByte.isUnlogged(object));}  }
class C{  CryptoPermissions(){  perms=new ConcurrentHashMap<>(7);}  }
class C{  public String cpuInfo(){  return m_cpuInfo;}  }
class C{  protected void flushCache() throws IOException {  if (this.cachePosition > 0) {    this.out.writeLine(Integer.toHexString(this.cachePosition));    this.out.write(this.cache,0,this.cachePosition);    this.out.writeLine("");    this.cachePosition=0;  }}  }
class C{  public void addFieldValue(int fldId,Object val) throws Exception {  m_flds.addFieldValue(fldId,val);}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    VolumeItem dataItem=(VolumeItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Volume: "+ dataItem.getVolume());  }}  }
class C{  public void takeRegionSnapshot(String regionName,int snapshotId){  sendAsync(AppCacheSnapshotMessage.create(regionName,snapshotId));}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  StandardEntityCollection clone=(StandardEntityCollection)super.clone();  clone.entities=new java.util.ArrayList(this.entities.size());  for (int i=0; i < this.entities.size(); i++) {    ChartEntity entity=(ChartEntity)this.entities.get(i);    clone.entities.add(entity.clone());  }  return clone;}  }
class C{  public static LatLon linearEndPosition(LatLon p,Angle linearAzimuth,Angle pathLength){  if (p == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (linearAzimuth == null || pathLength == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat1=p.getLatitude().radians;  double lon1=p.getLongitude().radians;  double azimuth=linearAzimuth.radians;  double distance=pathLength.radians;  if (distance == 0)   return p;  double lat2=lat1 + distance * Math.cos(azimuth);  if (Math.abs(lat2) > Math.PI / 2.0) {    lat2=lat2 > 0 ? Math.PI - lat2 : -Math.PI - lat2;  }  double lon2=(lon1 + distance * Math.sin(azimuth) + Math.PI) % (2 * Math.PI) - Math.PI;  if (Double.isNaN(lat2) || Double.isNaN(lon2))   return p;  return new LatLon(Angle.fromRadians(lat2).normalizedLatitude(),Angle.fromRadians(lon2).normalizedLongitude());}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  @Override public List<StoragePool> matchStoragePoolsWithAttributeOn(List<StoragePool> pools,Map<String,Object> attributeMap,StringBuffer errorMessage){  _logger.info("Pools Matching VPool Type Started: {}",Joiner.on("\t").join(getNativeGuidFromPools(pools)));  List<StoragePool> matchedPools=new ArrayList<StoragePool>();  Iterator<StoragePool> poolIterator=pools.iterator();  String vpoolType=attributeMap.get(Attributes.vpool_type.toString()).toString();  while (poolIterator.hasNext()) {    StoragePool pool=poolIterator.next();    if (null != pool && pool.getPoolServiceType().contains(vpoolType)) {      matchedPools.add(pool);    }  }  if (CollectionUtils.isEmpty(matchedPools)) {    errorMessage.append(String.format("No matching pools found with Virtual Pool Type attribute : %s. ",vpoolType));    _logger.error(errorMessage.toString());  }  _logger.info("Pools Matching VPoolType Ended: {}",Joiner.on("\t").join(getNativeGuidFromPools(matchedPools)));  return matchedPools;}  }
class C{  public IssueExpectations(){  this.inverted=false;}  }
class C{  public void initializeSkylight(Cube cube){  if (cube.getCubicWorld().getProvider().getHasNoSky()) {    return;  }  IHeightMap opacityIndex=cube.getColumn().getOpacityIndex();  int cubeMinY=cubeToMinBlock(cube.getY());  for (int localX=0; localX < Cube.SIZE; ++localX) {    for (int localZ=0; localZ < Cube.SIZE; ++localZ) {      for (int localY=Cube.SIZE - 1; localY >= 0; --localY) {        if (opacityIndex.isOccluded(localX,cubeMinY + localY,localZ)) {          break;        }        cube.setSkylight(localX,localY,localZ,15);      }    }  }}  }
class C{  public double train(double X_[][],int batchSize,Random r) throws Exception {  initWeights(X_);  X_=MatrixUtils.addBias(X_);  int N=X_.length;  int N_n=(int)Math.ceil(N * 1. / batchSize);  Matrix X_n[]=new Matrix[N_n];  for (int n=0, i=0; n < N; n+=batchSize, i++) {    X_n[i]=new Matrix(Arrays.copyOfRange(X_,n,Math.min(n + batchSize,N)));  }  for (int e=0; e < m_E; e++) {    for (int i=0; i < N_n; i++) {      update(X_n[r.nextInt(N_n)]);    }  }  return 1.0;}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    View v=mView.get();    if (v != null) {      v.invalidate();    }  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      setValue(values.mNameConstant,value);    }  }  View v=mView.get();  if (v != null) {    v.invalidate();  }}  }
class C{  static boolean isToolBarButton(JComponent c){  return (c.getParent() instanceof JToolBar);}  }
class C{  public LinkServerStarter(){  serverPort=DEFAULT_PORT;}  }
class C{  public ArrayList<Person> filterPeopleWithFloor(String filter,int floor){  ArrayList<Person> filteredPeople=new ArrayList<>();  filter=filter.toLowerCase();  for (  Person person : people) {    if (VorUtils.getName(person.getEmail()).toLowerCase().contains(filter) && person.getFloor() == floor) {      filteredPeople.add(person);    }  }  return filteredPeople;}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public void onBind(Compiler.Mapping mapping,Object object,View view,int direction){  Object value=getValue(mapping,object,view,direction);  Object parsedValue=parseValue(mapping,value,direction);  if (direction == Binder.DIRECTION_OBJECT_TO_VIEWS)   setViewValue(mapping,view,parsedValue); else   setValue(mapping,object,parsedValue);}  }
class C{  public static void installLnfs(){  UIManager.installLookAndFeel("JGoodies Plastic 3D",Plastic3DLookAndFeel.class.getName());  if (OperatingSystem.isWindows()) {    UIManager.installLookAndFeel("JGoodies Windows",com.jgoodies.looks.windows.WindowsLookAndFeel.class.getName());  }  if (isDarculaAvailable()) {    UIManager.installLookAndFeel("Darcula",DARCULA_LAF_CLASS);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("WFNode[");  sb.append(getAD_WF_Node_ID()).append("-").append(m_name).append(",").append(getBounds()).append("]");  return sb.toString();}  }
class C{  private void checkFocus(int focusDirection){  if (hasFocus()) {    View currentFocused=findFocus();    ItemInfo ii=currentFocused != null ? infoForAnyChild(currentFocused) : null;    if (ii == null || ii.position != currentItem) {      for (int i=0; i < getChildCount(); i++) {        View child=getChildAt(i);        ii=infoForChild(child);        if (ii != null && ii.position == currentItem) {          if (child.requestFocus(focusDirection)) {            break;          }        }      }    }  }}  }
class C{  protected void removeScriptingListenersOn(Element elt){  NodeEventTarget target=(NodeEventTarget)elt;  if (SVGConstants.SVG_NAMESPACE_URI.equals(elt.getNamespaceURI())) {    if (SVGConstants.SVG_SVG_TAG.equals(elt.getLocalName())) {      target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGAbort",svgAbortListener,false);      target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGError",svgErrorListener,false);      target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGResize",svgResizeListener,false);      target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGScroll",svgScrollListener,false);      target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGUnload",svgUnloadListener,false);      target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGZoom",svgZoomListener,false);    } else {      String name=elt.getLocalName();      if (name.equals(SVGConstants.SVG_SET_TAG) || name.startsWith("animate")) {        target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"beginEvent",beginListener,false);        target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"endEvent",endListener,false);        target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"repeatEvent",repeatListener,false);        return;      }    }  }  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusIn",focusinListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusOut",focusoutListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMActivate",activateListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"click",clickListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mousedown",mousedownListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseup",mouseupListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseover",mouseoverListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseout",mouseoutListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mousemove",mousemoveListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"keypress",keypressListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"keydown",keydownListener,false);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"keyup",keyupListener,false);}  }
class C{  protected String paramString(){  String isViewSizeSetString=(isViewSizeSet ? "true" : "false");  String lastPaintPositionString=(lastPaintPosition != null ? lastPaintPosition.toString() : "");  String scrollUnderwayString=(scrollUnderway ? "true" : "false");  return super.paramString() + ",isViewSizeSet=" + isViewSizeSetString+ ",lastPaintPosition="+ lastPaintPositionString+ ",scrollUnderway="+ scrollUnderwayString;}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public void move(ModelRenderer box,float x,float y,float z){  if (!this.correctAnimation) {    return;  }  this.getTransform(box).addOffset(x,y,z);}  }
class C{  public static void ccDrawPoint(GL10 gl,CGPoint pnt){  FloatBuffer vertices=getVertices(2 * 1);  vertices.put(pnt.x);  vertices.put(pnt.y);  vertices.position(0);  gl.glDisable(GL10.GL_TEXTURE_2D);  gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glDisableClientState(GL10.GL_COLOR_ARRAY);  gl.glVertexPointer(2,GL_FLOAT,0,vertices);  gl.glDrawArrays(GL_POINTS,0,1);  gl.glEnableClientState(GL10.GL_COLOR_ARRAY);  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glEnable(GL10.GL_TEXTURE_2D);}  }
class C{  public boolean handleTimeout(AbstractMRMessage m,AbstractMRListener l){  return false;}  }
class C{  public int size(){  return mSize;}  }
class C{  @SmallTest public void testChangeMapping(){  TestSimpleCursorAdapter ca=new TestSimpleCursorAdapter(mContext,mLayout,mCursor2x2,mFrom,mTo);  assertEquals(2,ca.getCount());  String[] singleFrom=new String[]{"Column1"};  int[] singleTo=new int[]{com.android.internal.R.id.text1};  ca.changeCursorAndColumns(mCursor2x2,singleFrom,singleTo);  int[] columns=ca.getConvertedFrom();  assertEquals(1,columns.length);  assertEquals(0,columns[0]);  int[] viewIds=ca.getTo();  assertEquals(1,viewIds.length);  assertEquals(com.android.internal.R.id.text1,viewIds[0]);  singleFrom=new String[]{"Column2"};  singleTo=new int[]{com.android.internal.R.id.text2};  ca.changeCursorAndColumns(mCursor2x2,singleFrom,singleTo);  columns=ca.getConvertedFrom();  assertEquals(1,columns.length);  assertEquals(1,columns[0]);  viewIds=ca.getTo();  assertEquals(1,viewIds.length);  assertEquals(com.android.internal.R.id.text2,viewIds[0]);}  }
class C{  public List<NamedRelatedResourceRep> listByVirtualArray(URI varrayId){  StoragePoolList response=client.get(StoragePoolList.class,String.format(ID_URL_FORMAT,VARRAY_URL) + "/storage-pools",varrayId);  return defaultList(response.getPools());}  }
class C{  public WhitespaceTokenizerFactory(Map<String,String> args){  super(args);  rule=get(args,"rule",RULE_NAMES,RULE_JAVA);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public Id<Node> convertNotExpandedCrossingNodeId2NodeId(Id<DgCrossingNode> crossingNodeId){  Integer ksIntCrossingNodeId=Integer.parseInt(crossingNodeId.toString());  String matsimStringCrossingNodeId=this.idPool.getStringId(ksIntCrossingNodeId);  return Id.create(matsimStringCrossingNodeId,Node.class);}  }
class C{  private boolean checkClassModifiersCompliance(){  int reflectionModifier=mClass.getModifiers();  int apiModifier=mModifier;  if (((apiModifier & Modifier.ABSTRACT) == 0) && ((reflectionModifier & Modifier.ABSTRACT) != 0) && !isEnumType()) {    return false;  }  reflectionModifier&=~Modifier.ABSTRACT;  apiModifier&=~Modifier.ABSTRACT;  if (isAnnotation()) {    reflectionModifier&=~CLASS_MODIFIER_ANNOTATION;  }  if (mClass.isInterface()) {    reflectionModifier&=~(Modifier.INTERFACE);  }  if (isEnumType() && mClass.isEnum()) {    reflectionModifier&=~CLASS_MODIFIER_ENUM;  }  return ((reflectionModifier == apiModifier) && (isEnumType() == mClass.isEnum()));}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultBoxAndWhiskerXYDataset clone=(DefaultBoxAndWhiskerXYDataset)super.clone();  clone.dates=new java.util.ArrayList(this.dates);  clone.items=new java.util.ArrayList(this.items);  return clone;}  }
class C{  public BlockTransformExtent(Extent extent,Transform transform,BlockRegistry blockRegistry){  super(extent);  checkNotNull(transform);  checkNotNull(blockRegistry);  this.transform=transform;  this.blockRegistry=blockRegistry;  BLOCK_TRANSFORM=new BaseBlock[FaweCache.CACHE_BLOCK.length];  BLOCK_TRANSFORM_INVERSE=new BaseBlock[FaweCache.CACHE_BLOCK.length];  Transform inverse=transform.inverse();  for (int i=0; i < BLOCK_TRANSFORM.length; i++) {    BaseBlock block=FaweCache.CACHE_BLOCK[i];    if (block != null) {      BLOCK_TRANSFORM[i]=transform(new BaseBlock(block),transform,blockRegistry);      BLOCK_TRANSFORM_INVERSE[i]=transform(new BaseBlock(block),inverse,blockRegistry);    }  }}  }
class C{  protected boolean mustRecomputeSize(Dimension frameSize){  return this.mustRecomputeSize || (this.previousSizeBounds == null && frameSize != null) || (frameSize != null && this.previousSizeBounds.width != frameSize.width);}  }
class C{  public StepSwitcher(Context context,AttributeSet attrs){  super(context,attrs);  init();}  }
class C{  public static final CButton createRefreshButton(String text){  AppsAction aa=new AppsAction(A_REFRESH,KeyStroke.getKeyStroke(KeyEvent.VK_F5,0),text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  private static long CallStaticLongMethod(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallStaticLongMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(methodID,TypeReference.Long);    return Reflection.unwrapLong(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0L;  }}  }
class C{  public PerformanceLogger(){  time1=System.currentTimeMillis();}  }
class C{  public static List<NameValuePair> toNameValuePair(Object parent,Map<String,String> map){  List<NameValuePair> list=new ArrayList<NameValuePair>();  for (  String key : map.keySet()) {    NameValuePair nvp=new NameValuePair(parent,key,map.get(key));    list.add(nvp);  }  return list;}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof Rule) {    return id.equals(((Rule)o).getRuleId()) && ruleType.equals(((Rule)o).getRuleType()) && cases.equals(((Rule)o).cases);  }  return false;}  }
class C{  public static final int binarySearch(Object[] a,Object key,int begin,int end){  int x1=begin;  int x2=end;  int i=x1 + (x2 - x1) / 2, c;  while (x1 < x2) {    c=((Comparable)a[i]).compareTo(key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  @Override public void end(){  super.end();  final GameData data=getData();  if (GameStepPropertiesHelper.isRemoveAirThatCanNotLand(data)) {    removeAirThatCantLand();  }  if (GameStepPropertiesHelper.isFireRockets(data)) {    if (m_needToDoRockets && TechTracker.hasRocket(m_bridge.getPlayerID())) {      final RocketsFireHelper helper=new RocketsFireHelper();      helper.fireRockets(m_bridge,m_bridge.getPlayerID());      m_needToDoRockets=false;    }  }  if (GameStepPropertiesHelper.isResetUnitStateAtEnd(data)) {    resetUnitStateAndDelegateState();  }  m_needToInitialize=true;  m_needToDoRockets=true;}  }
class C{  public static String utf8BytesToStr(byte[] arr,int off,int len){  int c, charArrCnt=0, total=off + len;  int c2, c3;  char[] res=new char[len];  while (off < total) {    c=(int)arr[off] & 0xff;    if (c > 127)     break;    off++;    res[charArrCnt++]=(char)c;  }  while (off < total) {    c=(int)arr[off] & 0xff;switch (c >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:      off++;    res[charArrCnt++]=(char)c;  break;case 12:case 13:off+=2;if (off > total) throw new BinaryObjectException("Malformed input: partial character at end");c2=(int)arr[off - 1];if ((c2 & 0xC0) != 0x80) throw new BinaryObjectException("Malformed input around byte: " + off);res[charArrCnt++]=(char)(((c & 0x1F) << 6) | (c2 & 0x3F));break;case 14:off+=3;if (off > total) throw new BinaryObjectException("Malformed input: partial character at end");c2=(int)arr[off - 2];c3=(int)arr[off - 1];if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) throw new BinaryObjectException("Malformed input around byte: " + (off - 1));res[charArrCnt++]=(char)(((c & 0x0F) << 12) | ((c2 & 0x3F) << 6) | (c3 & 0x3F));break;default :throw new BinaryObjectException("Malformed input around byte: " + off);}}return len == charArrCnt ? new String(res) : new String(res,0,charArrCnt);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction action=new RPAction();  action.put("type","away");  if (remainder.length() != 0) {    action.put("message",remainder);  }  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  public FacebookAuthorizationException(Throwable throwable){  super(throwable);}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  public static boolean unGzipOdex(File odex,File parentFile){  boolean success=false;  try {    success=TarGzUtils.unGzip(odex,parentFile).exists();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  return success;}  }
class C{  static final double honeyToNectar(double honey){  return honey * honeyExpandFactor;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public TIntHashSet(int initialCapacity){  super(initialCapacity);}  }
class C{  public static int robustCCW(S2Point a,S2Point b,S2Point c,S2Point aCrossB){  final double kMinAbsValue=1.6e-15;  double det=aCrossB.dotProd(c);  if (det > kMinAbsValue) {    return 1;  }  if (det < -kMinAbsValue) {    return -1;  }  return expensiveCCW(a,b,c);}  }
class C{  public boolean isSwitched(){synchronized (switchLock) {    return !switching;  }}  }
class C{  public void stop() throws CqClosedException, CqException {  boolean isStopped=false;synchronized (this.cqState) {    if (this.isClosed()) {      throw new CqClosedException(LocalizedStrings.CqQueryImpl_CQ_IS_CLOSED_CQNAME_0.toLocalizedString(this.cqName));    }    if (!(this.isRunning())) {      throw new IllegalStateException(LocalizedStrings.CqQueryImpl_CQ_IS_NOT_IN_RUNNING_STATE_STOP_CQ_DOES_NOT_APPLY_CQNAME_0.toLocalizedString(this.cqName));    }    Exception exception=null;    try {      if (this.proxyCache != null) {        if (this.proxyCache.isClosed()) {          throw new CacheClosedException("Cache is closed for this user.");        }        UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());      }      cqProxy.stop(this);      isStopped=true;    } catch (    Exception e) {      exception=e;    } finally {      UserAttributes.userAttributes.set(null);    }    if (cqProxy == null || isStopped) {      this.cqState.setState(CqStateImpl.STOPPED);      this.cqService.stats.incCqsStopped();      this.cqService.stats.decCqsActive();      if (logger.isDebugEnabled()) {        logger.debug("Successfully stopped the CQ. {}",cqName);      }    } else {      if (exception != null) {        throw new CqException(LocalizedStrings.CqQueryImpl_FAILED_TO_STOP_THE_CQ_CQNAME_0_ERROR_FROM_LAST_SERVER_1.toLocalizedString(new Object[]{this.cqName,exception.getLocalizedMessage()}),exception.getCause());      } else {        throw new CqException(LocalizedStrings.CqQueryImpl_FAILED_TO_STOP_THE_CQ_CQNAME_0_THE_SERVER_ENDPOINTS_ON_WHICH_THIS_CQ_WAS_REGISTERED_WERE_NOT_FOUND.toLocalizedString(this.cqName));      }    }  }}  }
class C{  @SideOnly(Side.CLIENT) public static void drawGradientRect(int x,int y,float z,int par3,int par4,int par5,int par6){  float var7=(par5 >> 24 & 255) / 255F;  float var8=(par5 >> 16 & 255) / 255F;  float var9=(par5 >> 8 & 255) / 255F;  float var10=(par5 & 255) / 255F;  float var11=(par6 >> 24 & 255) / 255F;  float var12=(par6 >> 16 & 255) / 255F;  float var13=(par6 >> 8 & 255) / 255F;  float var14=(par6 & 255) / 255F;  GlStateManager.disableTexture2D();  GlStateManager.enableBlend();  GlStateManager.disableAlpha();  GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA,GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);  GlStateManager.shadeModel(GL11.GL_SMOOTH);  Tessellator tessellator=Tessellator.getInstance();  VertexBuffer vertexBuffer=tessellator.getBuffer();  vertexBuffer.begin(7,DefaultVertexFormats.POSITION_TEX_COLOR);  vertexBuffer.color(var8,var9,var10,var7);  vertexBuffer.pos(par3,y,z);  vertexBuffer.pos(x,y,z);  vertexBuffer.color(var12,var13,var14,var11);  vertexBuffer.pos(x,par4,z);  vertexBuffer.pos(par3,par4,z);  tessellator.draw();  GlStateManager.shadeModel(GL11.GL_FLAT);  GlStateManager.disableBlend();  GlStateManager.enableAlpha();  GlStateManager.enableTexture2D();}  }
class C{  protected Node newNode(){  return new SVGOMTextElement();}  }
class C{  public synchronized void remove(int index){  super.remove(index);  double removedValue=mValue.remove(index);  if (removedValue == mMinValue || removedValue == mMaxValue) {    initRange();  }}  }
class C{  public void testSameHash() throws Exception {  doTest(true);}  }
class C{  @Override public void doRunKeys(int run) throws Exception {  if (m_Instances == null) {    throw new Exception("No Instances set");  }  Object[] seKey=m_SplitEvaluator.getKey();  Object[] key=new Object[seKey.length + 3];  key[0]=Utils.backQuoteChars(m_Instances.relationName());  key[2]="" + (((run - 1) % m_NumFolds) + 1);  key[1]="" + (((run - 1) / m_NumFolds) + 1);  System.arraycopy(seKey,0,key,3,seKey.length);  if (m_ResultListener.isResultRequired(this,key)) {    try {      m_ResultListener.acceptResult(this,key,null);    } catch (    Exception ex) {      throw ex;    }  }}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  Record removeImageRecord(PDFPage page,ImageInfo info){  Integer pageNumber=new Integer(page.getPageNumber());  PageRecord pageRec=getPageRecord(pageNumber);  if (pageRec != null) {    SoftReference ref=pageRec.images.remove(info);    if (ref != null) {      return (Record)ref.get();    }  }  return null;}  }
class C{  public static SmsUdhIei valueOf(byte value){switch (value) {case 0x00:    return CONCATENATED_8BIT;case 0x01:  return SPECIAL_MESSAGE;case 0x04:return APP_PORT_8BIT;case 0x05:return APP_PORT_16BIT;case 0x06:return SMSC_CONTROL_PARAMS;case 0x07:return UDH_SOURCE_INDICATOR;case 0x08:return CONCATENATED_16BIT;case 0x09:return WCMP;case 0x20:return RFC822_EMAIL_HEADER;case 0x21:return HYPERLINK_FORMAT;default :{if (value < InfoEleNameList.length) {return new SmsUdhIei(value,InfoEleNameList[value]);}return new SmsUdhIei(value,String.valueOf(value));}}}  }
class C{  private void updateSaveButton(){  final boolean userChanged=!databaseUserField.getText().equals(database.getConfiguration().getUser());  final boolean descriptionChanged=!databaseDescriptionField.getText().equals(database.getConfiguration().getDescription());  final boolean hostChanged=!databaseHostField.getText().equals(database.getConfiguration().getHost());  final boolean nameChanged=!databaseNameField.getText().equals(database.getConfiguration().getName());  final boolean passwordChanged=!new String(passwordField.getPassword()).equals(database.getConfiguration().getPassword());  final boolean savePasswordChanged=savePasswordBox.isSelected() != database.getConfiguration().isSavePassword();  final boolean autoConnectChanged=autoConnectBox.isSelected() != database.getConfiguration().isAutoConnect();  final boolean identityChanged=!databaseIdentityField.getText().equals(database.getConfiguration().getIdentity());  databaseDescriptionField.setModified(descriptionChanged);  databaseHostField.setModified(hostChanged);  databaseNameField.setModified(nameChanged);  databaseUserField.setModified(userChanged);  passwordField.setModified(passwordChanged);  savePasswordBox.setModified(savePasswordChanged);  autoConnectBox.setModified(autoConnectChanged);  databaseIdentityField.setModified(identityChanged);  saveButton.setEnabled(descriptionChanged || hostChanged || nameChanged|| userChanged|| passwordChanged|| savePasswordChanged|| autoConnectChanged|| identityChanged);  saveLabel.setVisible(saveButton.isEnabled());  final boolean connectionChanged=hostChanged || nameChanged || userChanged|| passwordChanged;  for (  final IDatabaseSettingsPanelListener listener : listeners) {    try {      listener.changedConnectionSettings(this,connectionChanged);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public ShowClampToolBarAction(final NetworkPanel networkPanel){  super("Clamp Toolbar");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;}  }
class C{  @Override public int error_sym(){  return 1;}  }
class C{  public CheckBoxGroup(final Composite parent,final int style){  super(parent,style);  super.setLayout(new GridLayout());  this.selectionListeners=new ArrayList<SelectionListener>();  createCheckBoxButton();  this.content=new Composite(this,style);  this.content.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true));  this.addPaintListener(this);}  }
class C{  private SecurityRoleEntity createSecurityRoleEntity(String code){  SecurityRoleEntity securityRoleEntity=new SecurityRoleEntity();  securityRoleEntity.setCode(code);  return herdDao.saveAndRefresh(securityRoleEntity);}  }
class C{  public String reserveIPAddress(String vcenter,String datacenter,String cluster,String vlan) throws Exception {  logger.debug("vcenter: " + vcenter + "  datacenter: "+ datacenter+ "  cluster: "+ cluster);  if (vcenter == null) {    throw new Exception("vCenter not defined");  }  if (datacenter == null) {    throw new Exception("datacenter not defined");  }  if (cluster == null) {    throw new Exception("cluster not defined");  }  if (vlan == null) {    throw new Exception("vlan not defined");  }  String ipaddress=null;  String query2="SELECT IP_ADDRESS,VLAN_TKEY FROM IPPOOL WHERE VLAN_TKEY = (SELECT TKEY from VLAN WHERE NAME = ? AND CLUSTER_TKEY = ?) AND IN_USE = FALSE LIMIT 1";  String query3="UPDATE IPPOOL SET IN_USE = TRUE WHERE IP_ADDRESS = ? AND VLAN_TKEY = ?";  try (Connection con=getDatasource().getConnection()){    int cluster_tkey=getClusterTKey(con,vcenter,datacenter,cluster);    if (cluster_tkey == -1) {      logger.error("Failed to reserve IP address. Unknown cluster " + cluster);      String message=Messages.get(locale,"error_db_reserve_ip_unknown_cluster",cluster);      throw new Exception(message);    }    logger.debug("retrieved tkey " + cluster_tkey + " for cluster "+ cluster);    int vlanTKey=-1;    try (PreparedStatement stmt=con.prepareStatement(query2)){      stmt.setString(1,vlan);      stmt.setInt(2,cluster_tkey);      ResultSet rs=stmt.executeQuery();      while (rs.next()) {        ipaddress=rs.getString("IP_ADDRESS");        vlanTKey=rs.getInt("VLAN_TKEY");      }    }     logger.debug("retrieved vlan tkey " + vlanTKey + " and ip address: "+ ipaddress);    if (vlanTKey == -1) {      logger.error("Failed to reserve IP address for vcenter: " + vcenter + "  datacenter: "+ datacenter+ "  cluster: "+ cluster+ " vlan: "+ vlan);      String message=Messages.get(locale,"error_db_reserve_ip_unknown_vlan",vlan);      throw new Exception(message);    }    if (ipaddress == null) {      logger.error("Failed to reserve IP address. No free IP address available in VLAN " + vlan);      String message=Messages.get(locale,"error_db_no_free_ipaddress",vlan);      throw new Exception(message);    } else {      try (PreparedStatement stmt=con.prepareStatement(query3)){        stmt.setString(1,ipaddress);        stmt.setInt(2,vlanTKey);        stmt.executeUpdate();      }     }  }   logger.debug("reserved IP address: " + ipaddress + " in VLAN "+ vlan);  return ipaddress;}  }
class C{  public static List<String> sort(List<String> strings){  Collections.sort(strings);  return strings;}  }
class C{  @Override @Deprecated public boolean complete(T value){  return super.complete(value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.419 -0500",hash_original_method="D55AE22798B058ABD6A02EB9DF9528CC",hash_generated_method="7D49F64D11B4FD6D4882534B751D74B0") protected Locale determineLocale(HttpContext context){  return Locale.getDefault();}  }
class C{  public final double dotProduct(){  double s=0.0;  for (int i=0; i < NDIM; i++) {    s+=data[i] * data[i];  }  return s;}  }
class C{  public static void assumeFalse(boolean assumption) throws TestAbortedException {  assumeFalse(null);}  }
class C{  public @CheckForNull Block createNewBlock(@Nonnull String userName){  int nextAutoBlockRef=lastAutoBlockRef + 1;  StringBuilder b=new StringBuilder("IB:AUTO:");  String nextNumber=paddedNumber.format(nextAutoBlockRef);  b.append(nextNumber);  return createNewBlock(b.toString(),userName);}  }
class C{  public Builder addPropertySchema(final String propName,final Schema schema){  requireNonNull(propName,"propName cannot be null");  requireNonNull(schema,"schema cannot be null");  propertySchemas.put(propName,schema);  return this;}  }
class C{  private int rank(ASTNode node){  int relativeRank=node.getStartPosition() + node.getLength() - pos;  if (relativeRank < 0)   return Integer.MAX_VALUE + relativeRank; else   return relativeRank;}  }
class C{  private void writeAverageLinkTolls(){  CausedDelayAnalyzer delayAnalyzer=new CausedDelayAnalyzer(eventsFile,scenario,noOfTimeBins,new AreaFilter());  delayAnalyzer.run();  SortedMap<Double,Map<Id<Link>,Double>> timeBin2LinkId2Delay=delayAnalyzer.getTimeBin2LinkId2Delay();  SortedMap<Double,Map<Id<Link>,Set<Id<Person>>>> timeBin2LinkCount=delayAnalyzer.getTimeBin2Link2CausingPersons();  BufferedWriter writer=IOUtils.getBufferedWriter(runDir + "/analysis/linkId2Toll_" + noOfTimeBins+ "Bins_"+ pricingScenario+ suffixForSoring+ ".txt");  try {    writer.write("timeBin \t linkId \t avgLinkTollEURO \n");    for (    double d : timeBin2LinkId2Delay.keySet()) {      for (      Id<Link> linkId : timeBin2LinkId2Delay.get(d).keySet()) {        double delay=timeBin2LinkId2Delay.get(d).get(linkId);        int count=timeBin2LinkCount.get(d).get(linkId).size();        double avgToll=0;        if ((delay != 0 && count == 0) || (delay == 0 && count != 0))         throw new RuntimeException("Zero delay with non zero person count or converese can not happen. Aborting..."); else         if (delay != 0 && count != 0) {          avgToll=vttsCar * (delay / count);        }        writer.write(d + "\t" + linkId+ "\t"+ avgToll+ "\n");      }    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written in file. Reason: " + e);  }}  }
class C{  @Experimental public CallSpec<List<Group>,HttpError> findGroupByKeyword(String keywords){  return Resource.<List<Group>,HttpError>newGetSpec(api,"/v1/groups/find").responseAs(list(single(Group.class,"group"),"groups","items")).queryParam("keywords",keywords).build();}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  Node(Node<K,V> next){  this.key=null;  this.value=this;  this.next=next;}  }
class C{  private void replaceTop(JsonScope topOfStack){  stack.set(stack.size() - 1,topOfStack);}  }
class C{  public CustomAnalyzer build(){  if (tokenizer.get() == null) {    throw new IllegalStateException("You have to set at least a tokenizer.");  }  return new CustomAnalyzer(defaultMatchVersion.get(),charFilters.toArray(new CharFilterFactory[charFilters.size()]),tokenizer.get(),tokenFilters.toArray(new TokenFilterFactory[tokenFilters.size()]),posIncGap.get(),offsetGap.get());}  }
class C{  JmxMBeanServer(String domain,MBeanServer outer,MBeanServerDelegate delegate,MBeanInstantiator instantiator,boolean interceptors){  this(domain,outer,delegate,instantiator,interceptors,true);}  }
class C{  private boolean useRefunds(){  return versionSelector == PaymentChannelClient.VersionSelector.VERSION_1;}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public int[] shuffled(int l){  int[] array=new int[l];  for (int i=0; i < l; i++) {    array[i]=i;  }  shuffle(array);  return array;}  }
class C{  public MusicNavigatorView(){}  }
class C{  public void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  private byte[] crypt(Cipher cipher,byte[] input) throws IllegalBlockSizeException, BadPaddingException {  return cipher.doFinal(input);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("StartDate"))     p_StartDate=(Timestamp)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public void irvineHash(byte[] buff){  irvineHash(buff,0,buff.length);}  }
class C{  public Property millisOfDay(){  return new Property(this,getChronology().millisOfDay());}  }
class C{  @SuppressWarnings("unchecked") @ValidationErrorPage(value="view") @Action(value="/reports/collectionSummaryReport-list") public void list() throws ParseException, IOException {  List<CollectionSummaryReportResult> resultList=new ArrayList<CollectionSummaryReportResult>();  String result=null;  final Query query=prepareQuery();  resultList=prepareOutput(query.list());  result=new StringBuilder("{ \"data\":").append(toJSON(resultList,CollectionSummaryReportResult.class,CollectionSummaryReportHelperAdaptor.class)).append("}").toString();  final HttpServletResponse response=ServletActionContext.getResponse();  response.setContentType(MediaType.APPLICATION_JSON_VALUE);  IOUtils.write(result,response.getWriter());}  }
class C{  public int randomInt(int low,int high){  return 0;}  }
class C{  public void readCpMaps(BufferedReader fin) throws IOException {  if (cpStr2Int != null) {    cpStr2Int.clear();  } else {    cpStr2Int=new HashMap();  }  if (cpInt2Str != null) {    cpInt2Str.clear();  } else {    cpInt2Str=new HashMap();  }  String line;  if ((line=fin.readLine()) == null) {    System.out.println("No context predicate map size information");    return;  }  int numCps=Integer.parseInt(line);  if (numCps <= 0) {    System.out.println("Invalid context predicate mapping size");    return;  }  System.out.println("Reading the context predicate maps ...");  for (int i=0; i < numCps; i++) {    line=fin.readLine();    if (line == null) {      System.out.println("Invalid context predicate mapping line");      return;    }    StringTokenizer strTok=new StringTokenizer(line," \t\r\n");    if (strTok.countTokens() != 2) {      continue;    }    String cpStr=strTok.nextToken();    String cpInt=strTok.nextToken();    cpStr2Int.put(cpStr,new Integer(cpInt));    cpInt2Str.put(new Integer(cpInt),cpStr);  }  System.out.println("Reading context predicate maps (" + Integer.toString(cpStr2Int.size()) + " entries) completed!");  line=fin.readLine();  option.numCps=cpStr2Int.size();}  }
class C{  private boolean isTxtTblMultCreated(){  boolean isMTxt=false;  if (_flds.getMultFldsCount() > 0) {    for (int i=0; i < _flds.count(); i++) {      ArchiveFldImpl fld=(ArchiveFldImpl)_flds.get(i);      if (fld.isMult()) {        int type=fld.getType();        if (type == ArchiveFldType.SHORT_TEXT)         isMTxt=true;      }    }  }  return isMTxt;}  }
class C{  public long position(){  return this.position;}  }
class C{  public static byte[] Bitmap2Bytes(Bitmap bm){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  bm.compress(Bitmap.CompressFormat.PNG,100,baos);  return baos.toByteArray();}  }
class C{  public void updateUserName(final String userId,final JSONObject user) throws ServiceException {  final String newUserName=user.optString(User.USER_NAME);  final Transaction transaction=userRepository.beginTransaction();  try {    if (!UserExt.NULL_USER_NAME.equals(newUserName) && null != userRepository.getByName(newUserName)) {      throw new ServiceException(langPropsService.get("duplicatedUserNameLabel") + " [" + newUserName+ "]");    }    userRepository.update(userId,user);    transaction.commit();  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates username of the user[id=" + userId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  public Object execute(ExecutionEvent event) throws ExecutionException {  this.editor=EditorUtil.getTLAEditorWithFocus();  this.doc=editor.getDocumentProvider().getDocument(editor.getEditorInput());  this.selectionProvider=editor.getSelectionProvider();  this.selection=(TextSelection)selectionProvider.getSelection();  this.offset=selection.getOffset();  String moduleName=editor.getModuleName();  this.moduleNode=ResourceHelper.getModuleNode(moduleName);  boolean proceed=UIHelper.promptUserForDirtyModules();  if (!proceed) {    return null;  }  if (editor == null) {    Activator.getDefault().logDebug("getTLAEditorWithFocus returned null");    return null;  }  editorIFile=((FileEditorInput)editor.getEditorInput()).getFile();  ParseResult parseResult=ResourceHelper.getValidParseResult(editorIFile);  if (parseResult == null) {    parseResult=new ModuleParserLauncher().parseModule(editorIFile,new NullProgressMonitor());  }  DecomposeProofRunnable runnable=new DecomposeProofRunnable(this);  UIHelper.runUISync(runnable);  return null;}  }
class C{  public static boolean isWeakKey(byte[] key,int offset){  return isWeakKey(key,offset,key.length - offset);}  }
class C{  public static boolean isNameEndChar(int codePoint){  return isPN_CHARS(codePoint) || codePoint == ':';}  }
class C{  @DELETE @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) @Path("/{uuid}") public Response remove(@PathParam("uuid") String uuid){  SiteIdListParam param=new SiteIdListParam();  param.getIds().add(uuid);  return remove(param);}  }
class C{  public static String percentFrom(final double a,final double b){  double bVal=b;  if (bVal == 0.) {    bVal=1.;  }  StringBuilder rep=new StringBuilder();  double d=((long)((a / bVal) * 10000) / 100.);  if (d < 10.0) {    rep.append('0');  }  rep.append(d);  while (rep.length() < 5) {    rep.append('0');  }  return rep + "%";}  }
class C{  synchronized static void initialize(){  if (CertPathHelper.instance == null) {    CertPathHelper.instance=new CertPathHelperImpl();  }}  }
class C{  public static void sort(List<?> collection,Sort sort){  for (int i=sort.getOrders().size() - 1; i >= 0; i--) {    Collections.sort(collection,new PropertyComparator(sort.getOrders().get(i)));  }}  }
class C{  public static void destroyHost(String host){  Computer computer=ComputerHandler.getInstance().find(host);  if (computer == null)   return;  computer.destroy(true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node createdNode;  int expectedLength;  int length;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  expectedLength=(int)childList.getLength();  expectedLength+=1;  createdNode=doc.createElement("text3");  employeeNode=employeeNode.appendChild(createdNode);  length=(int)childList.getLength();  assertEquals("childNodeLength",expectedLength,length);}  }
class C{  @Override public int size(){  return this.heapSize;}  }
class C{  public static ByteBuffer writeStringData(ByteBuffer buff,String s,int len){  buff=DataUtils.ensureCapacity(buff,3 * len);  for (int i=0; i < len; i++) {    int c=s.charAt(i);    if (c < 0x80) {      buff.put((byte)c);    } else     if (c >= 0x800) {      buff.put((byte)(0xe0 | (c >> 12)));      buff.put((byte)(((c >> 6) & 0x3f)));      buff.put((byte)(c & 0x3f));    } else {      buff.put((byte)(0xc0 | (c >> 6)));      buff.put((byte)(c & 0x3f));    }  }  return buff;}  }
class C{  protected void createFieldEditors(){  addField(new BooleanFieldEditor(IPreferenceConstants.I_PARSER_POPUP_ERRORS,"&Always pop up Parsing Errors view",getFieldEditorParent()));  addField(new BooleanFieldEditor(IPreferenceConstants.I_PARSE_MODULE_ON_MODIFY,"&Re-parse module on save",getFieldEditorParent()));  parseSpecField=new BooleanFieldEditor(IPreferenceConstants.I_PARSE_SPEC_ON_MODIFY,"&Re-parse specification on spec module save",getFieldEditorParent());  if (!getPreferenceStore().getBoolean(IPreferenceConstants.I_PARSE_MODULE_ON_MODIFY)) {    parseSpecField.setEnabled(false,getFieldEditorParent());  }  addField(parseSpecField);}  }
class C{  private void createLookAndFeelMenuItems(JMenu menu){  LookAndFeel current=UIManager.getLookAndFeel();  for (  LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {    JMenuItem mnuLaF=new JMenuItem(info.getName());    if (current.getClass().getName().equals(info.getClassName())) {      mnuLaF.setIcon(Icons.CHECK);    }    mnuLaF.setActionCommand("laf+" + info.getClassName());    mnuLaF.addActionListener(this);    menu.add(mnuLaF);  }}  }
class C{  public void remove(HGHandle handle){  HGLiveHandle lhdl=null;  if (handle instanceof HGLiveHandle)   lhdl=(HGLiveHandle)handle; else   lhdl=get(handle.getPersistent());  if (lhdl != null) {    incidenceSets.remove(lhdl.getPersistent());    atoms.remove(lhdl.getRef());    liveHandles.remove(lhdl.getPersistent());    queueThread.addAction(new AtomDetachAction((LiveHandle)lhdl));    ((LiveHandle)lhdl).setRef(null);  }}  }
class C{  private void updateGui(){  m_tidBox.removeAllItems();  final IDebugger debugger=m_debugPerspectiveModel.getCurrentSelectedDebugger();  if (debugger == null) {    m_tidBox.setEnabled(false);  } else {    final List<TargetProcessThread> threads=debugger.getProcessManager().getThreads();    for (    final TargetProcessThread thread : threads) {      m_tidBox.addItem(thread);    }    if (!threads.isEmpty()) {      m_tidBox.setSelectedIndex(0);    }    m_tidBox.setEnabled(true);  }}  }
class C{  public Variable[] findLocalIterables(){  List<Variable> iterables=new ArrayList<Variable>();  for (ListIterator<Variable> iterator=fLocalVariables.listIterator(fLocalVariables.size()); iterator.hasPrevious(); ) {    Variable localVariable=iterator.previous();    if (localVariable.isArray() || localVariable.isIterable())     iterables.add(localVariable);  }  return iterables.toArray(new Variable[iterables.size()]);}  }
class C{  public String baselineSample(){  return mBaselineSample;}  }
class C{  private boolean checkAttributeValuesChanged(FileVirtualPoolUpdateParam param,VirtualPool vpool){  return super.checkAttributeValuesChanged(param,vpool) || checkLongTermRetentionChanged(param.getLongTermRetention(),vpool.getLongTermRetention() || checkProtectionChanged(vpool,param.getProtection()));}  }
class C{  public void createDirectory(File dir){  if (!dir.exists()) {    log.info("Creating directory: {}",dir);    if (!dir.mkdirs()) {      log.error("Failed to create directory: {}",dir);    }  }}  }
class C{  private static Set<PsiClassType> createParameterTypes(Project project){  Set<PsiClassType> parameterTypes=new HashSet<PsiClassType>();  parameterTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("java.lang.Enum"));  parameterTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("java.lang.String"));  parameterTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("java.lang.Boolean"));  parameterTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("java.lang.Integer"));  parameterTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("java.lang.Long"));  parameterTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("java.lang.Float"));  parameterTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("java.lang.Double"));  parameterTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("java.util.Date"));  parameterTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("com.google.api.server.spi.types.DateAndTime"));  parameterTypes.add(JavaPsiFacade.getElementFactory(project).createTypeByFQClassName("com.google.api.server.spi.types.SimpleDate"));  return Collections.unmodifiableSet(parameterTypes);}  }
class C{  public void tokenizeLines(){  tokenizeLines(0,getDefaultRootElement().getElementCount());}  }
class C{  public static <T>void loadPlugins(final Window parent,final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final String startPath,final ConfigManager configFile){  Preconditions.checkNotNull(pluginInterface,"IE02089: Plugin interface argument can not be null");  Preconditions.checkNotNull(registry,"IE02090: Registry argument can not be null");  Preconditions.checkNotNull(startPath,"IE02091: Start path argument can not be null");  Preconditions.checkNotNull(configFile,"IE02092: Config file argument can not be null");  final List<String> pluginPaths=Lists.newArrayList(startPath + File.separator + "plugins",startPath + File.separator + "userplugins");  for (  final String pluginPath : pluginPaths) {    NaviLogger.info(String.format("Loading plugins from %s",pluginPath));  }  final PluginLoaderThread<T> thread=new PluginLoaderThread<T>(parent,startPath,pluginPaths,pluginInterface,registry,configFile);  CProgressDialog.show(parent,"Loading plugins ...",thread);  if (thread.getException() != null) {    CUtilityFunctions.logException(thread.getException());    final String message="E00104: " + "An unexpected problem occurred while the plugins were loaded";    final String description=CUtilityFunctions.createDescription("It is unclear what caused this problem. Please check the stack trace for more " + "information. If the stack trace does not help you fix this problem please contact " + "the BinNavi support.",new String[]{},new String[]{});    NaviErrorDialog.show(null,message,description,thread.getException());  }}  }
class C{  public boolean applyOptions() throws IOException {  iTunesSettings.ITUNES_SUPPORT_ENABLED.setValue(CHECK_BOX.isSelected());  return false;}  }
class C{  private static Map<String,SortedSet<String>> parseQuerystring(String queryString){  Map<String,SortedSet<String>> map=new TreeMap<String,SortedSet<String>>();  if ((queryString == null) || (queryString.equals(EMPTY_STRING))) {    return map;  }  String[] params=new String[20];  if (queryString.contains(AMP))   params=queryString.split(AMP); else   if (queryString.length() > 0)   params=new String[]{queryString};  if (params != null) {    for (    String param : params) {      try {        String[] keyValuePair=param.split(EQUALS,0);        String name=URLDecoder.decode(keyValuePair[0],UTF_8);        if (name == "") {          continue;        }        String value=keyValuePair.length > 1 ? URLDecoder.decode(keyValuePair[1],UTF_8) : EMPTY_STRING;        if (map.containsKey(name)) {          SortedSet<String> tempSet=map.get(name);          tempSet.add(value);        } else {          SortedSet<String> tmpSet=new TreeSet<String>();          tmpSet.add(value);          map.put(name,tmpSet);        }      } catch (      UnsupportedEncodingException e) {        throw new MCApiRuntimeException(e);      }    }  }  return map;}  }
class C{  @Override public void A(final Object raw,FormObject formObj,final int eventType){  if (showMethods) {    System.out.println("DefaultActionHandler.A() ");  }switch (eventType) {case MOUSEENTERED:    javascript.execute(formObj,PdfDictionary.E,ActionHandler.TODO,' ');  break;case MOUSEEXITED:javascript.execute(formObj,PdfDictionary.X,ActionHandler.TODO,' ');break;case MOUSEPRESSED:javascript.execute(formObj,PdfDictionary.D,ActionHandler.TODO,' ');break;case MOUSERELEASED:javascript.execute(formObj,PdfDictionary.A,ActionHandler.TODO,' ');javascript.execute(formObj,PdfDictionary.U,ActionHandler.TODO,' ');break;default :break;}PdfObject aData=null;if (eventType == MOUSERELEASED) {aData=formObj.getDictionary(PdfDictionary.A);}if (aData == null) {aData=formObj.getDictionary(PdfDictionary.AA);if (aData != null) {switch (eventType) {case MOUSEENTERED:aData=aData.getDictionary(PdfDictionary.E);break;case MOUSEEXITED:aData=aData.getDictionary(PdfDictionary.X);break;case MOUSEPRESSED:aData=aData.getDictionary(PdfDictionary.D);break;case MOUSERELEASED:aData=aData.getDictionary(PdfDictionary.U);break;default :break;}}}gotoDest(formObj,eventType,PdfDictionary.Dest);final int subtype=formObj.getParameterConstant(PdfDictionary.Subtype);final int formType=formObj.getNameAsConstant(PdfDictionary.FT);final int popupFlag=formObj.getActionFlag();if (formType == PdfDictionary.Sig) {} else if (eventType == MOUSECLICKED && (popupFlag == FormObject.POPUP || subtype == PdfDictionary.Text)) {if (formObj.getDictionary(PdfDictionary.IRT) != null && formObj.getNameAsConstant(PdfDictionary.RT) == PdfDictionary.Group) {final FormObject IRT=(FormObject)formObj.getDictionary(PdfDictionary.IRT);currentPdfFile.checkResolved(IRT);formObj=IRT;}popup(raw,formObj,currentPdfFile);} else {if (aData == null) {return;}final int command=aData.getNameAsConstant(PdfDictionary.S);switch (command) {case PdfDictionary.Named:additionalAction_Named(aData);break;case PdfDictionary.GoTo:gotoDest(aData,eventType,command);break;case PdfDictionary.GoToR:gotoDest(aData,eventType,command);break;case PdfDictionary.ResetForm:additionalAction_ResetForm(aData);break;case PdfDictionary.SubmitForm:additionalAction_SubmitForm(aData);break;case PdfDictionary.JavaScript:break;case PdfDictionary.Hide:additionalAction_Hide(aData);break;case PdfDictionary.URI:break;case PdfDictionary.Launch:LogWriter.writeFormLog("{stream} launch activate action NOT IMPLEMENTED",FormStream.debugUnimplemented);if (FormStream.debugUnimplemented) {System.out.println("{internal only} launch activate action NOT IMPLEMENTED");}break;case PdfDictionary.SetOCGState:additionalAction_OCState(eventType,aData);break;case PdfDictionary.Sound:if (eventType == MOUSECLICKED || eventType == MOUSERELEASED) {additionalAction_Sound(aData);}break;case PdfDictionary.Unknown:LogWriter.writeFormLog("{stream} Activate Action UNKNOWN command " + aData.getName(PdfDictionary.S) + ' '+ formObj.getObjectRefAsString(),FormStream.debugUnimplemented);break;default :LogWriter.writeFormLog("{stream} UNKNOWN Command " + aData.getName(PdfDictionary.S) + " Action",FormStream.debugUnimplemented);}}}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (on) {    eezeFrame.setGlassPane(originalGlassPane);    gridGlassPane.setVisible(false);  } else {    originalGlassPane=eezeFrame.getGlassPane();    eezeFrame.setGlassPane(gridGlassPane);    gridGlassPane.setVisible(true);  }  on=!on;}  }
class C{  private List<String> defaultArgs(){  List<String> args=new ArrayList<>();  args.add("--non-interactive");  args.add("--trust-server-cert");  return args;}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(getURI(url));  if (headers != null)   delete.setHeaders(headers);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  boolean isDifferentFromExistingValue(Parameter oldPara,Parameter newPara){  String oldValue=oldPara.getValue() == null ? "" : oldPara.getValue();  boolean oldUserOption=oldPara.isConfigurable();  String newValue=newPara.getValue() == null ? "" : newPara.getValue();  boolean newUserOption=newPara.isConfigurable();  if (oldValue.equals(newValue) && oldUserOption == newUserOption) {    return false;  }  return true;}  }
class C{  public String cleanMarkup(String markup){  final String noDivOrSpan=mStripDivSpanPattern.matcher(markup).replaceAll("");  final String noEntities=mStripEntitiesPattern.matcher(noDivOrSpan).replaceAll(" ");  final String tagsClosed=mCloseTagPattern.matcher(noEntities).replaceAll("$1/>");  return String.format(XML_TEMPLATE,tagsClosed);}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=PKIXExtensions.InvalidityDate_Id;    this.critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public void syncIpsecKeyToLocal(String ipsecKey) throws LocalRepositoryException {  final String prefix="syncIpsecKeyToLocal(): ";  _log.debug(prefix);  final String[] cmd={_IPSECTOOL_CMD,IPSEC_SYNC_KEY,ipsecKey};  exec(prefix,cmd);  _log.info(prefix + "Success!");}  }
class C{  public void popParser(){  BridgeXmlBlockParser parser=mParserStack.pop();  if (ParserFactory.LOG_PARSER) {    System.out.println("POPD " + parser.getParser().toString());  }}  }
class C{  public void exclude(R rule){  addRule(rule,false);}  }
class C{  protected Node export(Node n,AbstractDocument d){  GenericElementNS ge=(GenericElementNS)super.export(n,d);  ge.nodeName=nodeName;  return n;}  }
class C{  public boolean isVirtualColumn(){  String s=getColumnSQL();  return s != null && s.length() > 0;}  }
class C{  @Override @CanIgnoreReturnValue public int read(byte[] bytes,int off,int len) throws IOException {  int numOfBytesRead=in.read(bytes,off,len);  if (numOfBytesRead != -1) {    hasher.putBytes(bytes,off,numOfBytesRead);  }  return numOfBytesRead;}  }
class C{  public boolean isNewer(String o){  return (compareTo(o) == 1);}  }
class C{  protected void sequence_TypeVariableWithDefSiteVariance(ISerializationContext context,TypeVariable semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void sortMovieSets(){synchronized (root) {    root.sort();    TreeModelEvent event=new TreeModelEvent(this,root.getPath());    for (    TreeModelListener listener : listeners) {      listener.treeStructureChanged(event);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatasubstringvalue.class,args);}  }
class C{  public static Property asProperty(Resource resource){  if (resource instanceof Property) {    return (Property)resource;  } else {    return new PropertyImpl(resource.asNode(),(EnhGraph)resource.getModel());  }}  }
class C{  protected String parseStabilityOperationsSymCode(String symCode){  StringBuilder sb=new StringBuilder();  String s=symCode.substring(0,1);  if (s != null && s.equalsIgnoreCase(SymbologyConstants.SCHEME_STABILITY_OPERATIONS))   this.setScheme(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.scheme"));  s=symCode.substring(1,2);  if (SymbologyConstants.STANDARD_IDENTITY_ALL.contains(s.toUpperCase()))   this.setStandardIdentity(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.standardIdentity"));  s=symCode.substring(2,3);  if (SymbologyConstants.CATEGORY_ALL_STABILITY_OPERATIONS.contains(s.toUpperCase()))   this.setCategory(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.category"));  s=symCode.substring(3,4);  if (SymbologyConstants.STATUS_ALL_UEI_SIGINT_SO_EM.contains(s.toUpperCase()))   this.setStatus(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.status"));  s=symCode.substring(4,10);  if (!"------".equals(s))   this.setFunctionId(s);  s=symCode.substring(10,12);  if (this.isUnitsAndEquipmentSymbolModifier(s) || SymbologyConstants.INSTALLATION_ALL.contains(s.toUpperCase()))   this.setSymbolModifier(s); else   if (!"--".equals(s))   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.symbolModifier"));  s=symCode.substring(12,14);  if (!"--".equals(s))   this.setCountryCode(s);  s=symCode.substring(14,15);  if (SymbologyConstants.ORDER_OF_BATTLE_ALL_UEI_SIGINT_SO_EM.contains(s.toUpperCase()))   this.setOrderOfBattle(s); else   if (!"-".equals(s))   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.orderOfBattle"));  return sb.length() > 0 ? Logging.getMessage("Symbology.SymbolCodeFieldsUnrecognized",sb.toString(),symCode) : null;}  }
class C{  @Override public String purchase(final IntegerMap<ProductionRule> productionRules){  final IntegerMap<Resource> costs=getCosts(productionRules,m_player);  final IntegerMap<NamedAttachable> results=getResults(productionRules);  if (!(canAfford(costs,m_player))) {    return NOT_ENOUGH_RESOURCES;  }  final Iterator<NamedAttachable> iter2=results.keySet().iterator();  while (iter2.hasNext()) {    final Object next=iter2.next();    if (!(next instanceof Resource)) {      final UnitType type=(UnitType)next;      final int quantity=results.getInt(type);      final UnitAttachment ua=UnitAttachment.get(type);      final int maxBuilt=ua.getMaxBuiltPerPlayer();      if (maxBuilt == 0) {        return "May not build any of this unit right now: " + type.getName();      } else       if (maxBuilt > 0) {        int currentlyBuilt=m_player.getUnits().countMatches(Matches.unitIsOfType(type));        final CompositeMatch<Unit> unitTypeOwnedBy=new CompositeMatchAnd<>(Matches.unitIsOfType(type),Matches.unitIsOwnedBy(m_player));        final Collection<Territory> allTerrs=getData().getMap().getTerritories();        for (        final Territory t : allTerrs) {          currentlyBuilt+=t.getUnits().countMatches(unitTypeOwnedBy);        }        final int allowedBuild=maxBuilt - currentlyBuilt;        if (allowedBuild - quantity < 0) {          return "May only build " + allowedBuild + " of "+ type.getName()+ " this turn, may only build "+ maxBuilt+ " total";        }      }    }  }  final Iterator<NamedAttachable> iter=results.keySet().iterator();  final Collection<Unit> totalUnits=new ArrayList<>();  final Collection<UnitType> totalUnitTypes=new ArrayList<>();  final Collection<Resource> totalResources=new ArrayList<>();  final Collection<NamedAttachable> totalAll=new ArrayList<>();  final CompositeChange changes=new CompositeChange();  while (iter.hasNext()) {    final Object next=iter.next();    if (next instanceof Resource) {      final Resource resource=(Resource)next;      final int quantity=results.getInt(resource);      final Change change=ChangeFactory.changeResourcesChange(m_player,resource,quantity);      changes.add(change);      for (int i=0; i < quantity; i++) {        totalResources.add(resource);      }    } else {      final UnitType type=(UnitType)next;      final int quantity=results.getInt(type);      final Collection<Unit> units=type.create(quantity,m_player);      totalUnits.addAll(units);      for (int i=0; i < quantity; i++) {        totalUnitTypes.add(type);      }    }  }  totalAll.addAll(totalUnitTypes);  totalAll.addAll(totalResources);  if (!totalUnits.isEmpty()) {    final Change change=ChangeFactory.addUnits(m_player,totalUnits);    changes.add(change);  }  final String remaining=removeFromPlayer(m_player,costs,changes);  String transcriptText;  if (!totalUnits.isEmpty()) {    transcriptText=m_player.getName() + " buy " + MyFormatter.defaultNamedToTextList(totalAll,", ",true)+ "; "+ remaining;  } else {    transcriptText=m_player.getName() + " buy nothing; " + remaining;  }  m_bridge.getHistoryWriter().startEvent(transcriptText,totalUnits);  m_bridge.addChange(changes);  return null;}  }
class C{  private static BoundSize[] parseGaps(String s){  BoundSize[] ret=new BoundSize[4];  int ix=startsWithLenient(s,"gaptop",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[0]=parseBoundSize(s,true,false);    return ret;  }  ix=startsWithLenient(s,"gapleft",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[1]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,"gapbottom",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[2]=parseBoundSize(s,true,false);    return ret;  }  ix=startsWithLenient(s,"gapright",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[3]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,"gapbefore",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[1]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,"gapafter",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[3]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,new String[]{"gapx","gapy"},null,true);  if (ix > -1) {    boolean x=s.charAt(3) == 'x';    String[] gaps=toTrimmedTokens(s.substring(ix).trim(),' ');    ret[x ? 1 : 0]=parseBoundSize(gaps[0],true,x);    if (gaps.length > 1)     ret[x ? 3 : 2]=parseBoundSize(gaps[1],true,!x);    return ret;  }  ix=startsWithLenient(s,"gap ",1,true);  if (ix > -1) {    String[] gaps=toTrimmedTokens(s.substring(ix).trim(),' ');    ret[1]=parseBoundSize(gaps[0],true,true);    if (gaps.length > 1) {      ret[3]=parseBoundSize(gaps[1],true,false);      if (gaps.length > 2) {        ret[0]=parseBoundSize(gaps[2],true,true);        if (gaps.length > 3)         ret[2]=parseBoundSize(gaps[3],true,false);      }    }    return ret;  }  throw new IllegalArgumentException("Unknown Gap part: '" + s + "'");}  }
class C{  public void cancelShapes(){  if (m_splitListener == null) {    m_submit.setText("Reset");    m_submit.setActionCommand("Reset");    if (m_originalPlot == null || m_originalPlot.m_plotInstances == m_plotInstances) {      m_submit.setEnabled(false);    } else {      m_submit.setEnabled(true);    }  } else {    m_submit.setEnabled(false);  }  m_createShape=false;  m_shapePoints=null;  m_shapes=null;  this.repaint();}  }
class C{  public boolean isSameMember(ThreadIdentifier other){  return Arrays.equals(this.membershipID,other.membershipID);}  }
class C{  public static long sumToLong(char[] array){  long sum=0;  for (  char x : array) {    sum+=x;  }  return sum;}  }
class C{  public boolean isFramebufferObjectAvailable(){  return this.isFramebufferObjectAvailable;}  }
class C{  protected void initScenes(){  CGSize s=CCDirector.sharedDirector().winSize();  inScene.setPosition(-(s.width - ADJUST_FACTOR),0);}  }
class C{  public final void testValidateLowercaseAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.LOWERCASE,true,allowedCharacters);  assertFalse(characterValidator.validate("Ab c-"));}  }
class C{  public static Element svgCircleSegment(SVGPlot svgp,double centerx,double centery,double angleStart,double angleDelta,double innerRadius,double outerRadius){  double sin1st=Math.sin(angleStart);  double cos1st=MathUtil.sinToCos(angleStart,sin1st);  double sin2nd=Math.sin(angleStart + angleDelta);  double cos2nd=MathUtil.sinToCos(angleStart + angleDelta,sin2nd);  double inner1stx=centerx + (innerRadius * sin1st);  double inner1sty=centery - (innerRadius * cos1st);  double outer1stx=centerx + (outerRadius * sin1st);  double outer1sty=centery - (outerRadius * cos1st);  double inner2ndx=centerx + (innerRadius * sin2nd);  double inner2ndy=centery - (innerRadius * cos2nd);  double outer2ndx=centerx + (outerRadius * sin2nd);  double outer2ndy=centery - (outerRadius * cos2nd);  double largeArc=0;  if (angleDelta >= Math.PI) {    largeArc=1;  }  SVGPath path=new SVGPath(inner1stx,inner1sty);  path.lineTo(outer1stx,outer1sty);  path.ellipticalArc(outerRadius,outerRadius,0,largeArc,1,outer2ndx,outer2ndy);  path.lineTo(inner2ndx,inner2ndy);  if (innerRadius > 0) {    path.ellipticalArc(innerRadius,innerRadius,0,largeArc,0,inner1stx,inner1sty);  }  return path.makeElement(svgp);}  }
class C{  public static void main(String[] args) throws Throwable {  logger.severe("Start");  startTime=System.currentTimeMillis();  Agent localAgent=createAgent(3030);  localAgent.setControlling(false);  localAgent.setNominationStrategy(NominationStrategy.NOMINATE_HIGHEST_PRIO);  localAgent.addStateChangeListener(new IceProcessingListener());  String localSDP=SdpUtils.createSDPDescription(localAgent);  System.out.println("=================== feed the following" + " to the remote agent ===================");  System.out.println(localSDP);  System.out.println("======================================" + "========================================\n");  Thread.sleep(60000);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="prefix:newAttr";  Document doc;  Node arg;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node retnode;  String value;  Node setNode;  doc=(Document)load("staffNS",true);  arg=doc.createAttributeNS(namespaceURI,qualifiedName);  arg.setNodeValue("newValue");  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(0);  attributes=testAddress.getAttributes();  setNode=attributes.setNamedItemNS(arg);  retnode=attributes.getNamedItemNS(namespaceURI,"newAttr");  value=retnode.getNodeValue();  assertEquals("throw_Equals","newValue",value);}  }
class C{  public static String encodeUtf8UriParam(final String value){  if (value != null) {    final StringBuilder safe=new StringBuilder(value.length() * 3);    boolean changed=false;    for (int i=0; i < value.length(); i++) {      char c=value.charAt(i);      int b=c;      if (b <= 31 || b == 127) {        changed=true;        continue;      }      if ("\"'$&+,/:;=?@<>#%{} |\\^~[]`".indexOf(c) != -1) {        changed=true;        safe.append('%');        char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16));        char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16));        safe.append(hex1);        safe.append(hex2);      } else {        safe.append(c);      }    }    if (changed) {      return safe.toString();    }    return value;  }  return null;}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  public void clear(){  table.clear();}  }
class C{  public final double sampleMax(){  long max=_max.getAndSet(0);  return _scale * max;}  }
class C{  public void terminate(){  while (isBuilt()) {    move();  }}  }
class C{  private void checkDistance(){  if (!isCloseEnough()) {    close();  }}  }
class C{  protected String stringify(IN4JSProject project){  return project.toString();}  }
class C{  @Override public void test(String t) throws ParameterException {  for (  String constraint : testStrings) {    if (t.equalsIgnoreCase(constraint)) {      return;    }  }  throw new WrongParameterValueException("Parameter Constraint Error.\n" + "Parameter value must be one of the following values: " + constraintStrings());}  }
class C{  public ResourceHandlerImpl(){  creationTime=System.currentTimeMillis();  webconfig=WebConfiguration.getInstance();  ExternalContext extContext=FacesContext.getCurrentInstance().getExternalContext();  manager=ApplicationAssociate.getInstance(extContext).getResourceManager();  initExclusions(extContext.getApplicationMap());  initMaxAge();}  }
class C{  @Override public void onDraw(Canvas c,RecyclerView parent,RecyclerView.State state){  if (mOrientation == VERTICAL_LIST) {    drawVertical(c,parent);  } else {    drawHorizontal(c,parent);  }}  }
class C{  public void increment(){  value++;}  }
class C{  public void initializeAndInitEditor() throws EditorInitException {  reset(Scheduler.get());  ArgumentCaptor<Scheduler.ScheduledCommand> commandCaptor=ArgumentCaptor.forClass(Scheduler.ScheduledCommand.class);  ArgumentCaptor<EditorInitCallback> callBackCaptor=ArgumentCaptor.forClass(EditorInitCallback.class);  ArgumentCaptor<WidgetInitializedCallback> widgetInitializedCallbackCaptor=ArgumentCaptor.forClass(WidgetInitializedCallback.class);  doReturn(editorWidget).when(editorWidgetFactory).createEditorWidget(Matchers.<List<String>>anyObject(),Matchers.<WidgetInitializedCallback>anyObject());  doReturn(document).when(editorWidget).getDocument();  embeddedTextEditorPresenter.initialize(configuration,notificationManager);  embeddedTextEditorPresenter.init(editorInput);  verify(Scheduler.get()).scheduleDeferred(commandCaptor.capture());  Scheduler.ScheduledCommand sheScheduledCommand=commandCaptor.getValue();  sheScheduledCommand.execute();  verify(documentStorage).getDocument(any(VirtualFile.class),callBackCaptor.capture());  EditorInitCallback editorInitCallBack=callBackCaptor.getValue();  editorInitCallBack.onReady("test");  verify(editorWidgetFactory).createEditorWidget(anyListOf(String.class),widgetInitializedCallbackCaptor.capture());  WidgetInitializedCallback callback=widgetInitializedCallbackCaptor.getValue();  callback.initialized(editorWidget);}  }
class C{  public List arguments(){  return this.arguments;}  }
class C{  private void inspect(Class clas){  Field[] fields=clas.getFields();  for (int i=0; i < fields.length; i++) {    int mod=fields[i].getModifiers();    if (Modifier.isStatic(mod) && Modifier.isPublic(mod)) {      fieldHash.put(fields[i].getName(),fields[i]);      classHash.put(fields[i].getName(),clas);    }  }}  }
class C{  private void addLicense(Paragraph p,Eml eml) throws DocumentException {  String licenseTitle=eml.parseLicenseTitle();  String licenseUrl=eml.parseLicenseUrl();  if (!Strings.isNullOrEmpty(licenseTitle) && !Strings.isNullOrEmpty(licenseUrl)) {    p.add(new Phrase(getText("rtf.license") + ": ",fontTitle));    Anchor licenseLink=new Anchor(eml.parseLicenseTitle(),fontLink);    licenseLink.setReference(eml.parseLicenseUrl());    p.add(licenseLink);    p.add(Chunk.NEWLINE);  }}  }
class C{  protected void sequence_ProjectDependency(ISerializationContext context,ProjectDependency semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean isLowerThan(int apiLevel){  return Build.VERSION.SDK_INT < apiLevel;}  }
class C{  private static synchronized AsyncTimeout awaitTimeout() throws InterruptedException {  AsyncTimeout node=head.next;  if (node == null) {    AsyncTimeout.class.wait();    return null;  }  long waitNanos=node.remainingNanos(System.nanoTime());  if (waitNanos > 0) {    long waitMillis=waitNanos / 1000000L;    waitNanos-=(waitMillis * 1000000L);    AsyncTimeout.class.wait(waitMillis,(int)waitNanos);    return null;  }  head.next=node.next;  node.next=null;  return node;}  }
class C{  @Override @Unpreemptible("Deliver exception possibly from unpreemptible code") public void unwindStackFrame(CompiledMethod cm,AbstractRegisters registers){  Address fp=registers.getInnermostFramePointer();  OptCompiledMethod compiledMethod=(OptCompiledMethod)cm;  Offset frameOffset=Offset.fromIntSignExtend(compiledMethod.getUnsignedNonVolatileOffset());  int firstInteger=compiledMethod.getFirstNonVolatileGPR();  if (firstInteger >= 0) {    if (VM.BuildFor64Addr) {      frameOffset=frameOffset.plus(7).toWord().and(Word.fromIntSignExtend(~7)).toOffset();    }    for (int i=firstInteger; i < 32; i++) {      registers.getGPRs().set(i,fp.loadWord(frameOffset));      frameOffset=frameOffset.plus(BYTES_IN_ADDRESS);    }  }  int firstFloat=compiledMethod.getFirstNonVolatileFPR();  if (firstFloat >= 0) {    frameOffset=frameOffset.plus(7).toWord().and(Word.fromIntSignExtend(~7)).toOffset();    for (int i=firstFloat; i < 32; i++) {      long temp=Magic.getLongAtOffset(Magic.addressAsObject(fp),frameOffset);      registers.getFPRs()[i]=Magic.longBitsAsDouble(temp);      frameOffset=frameOffset.plus(BYTES_IN_DOUBLE);    }  }  registers.unwindStackFrame();}  }
class C{  private final synchronized void processEngineOutput(UCIEngine uci,String s){  if (Thread.currentThread().isInterrupted())   return;  if (s == null) {    shutdownEngine();    return;  }  if (s.length() == 0)   return;switch (engineState.state) {case READ_OPTIONS:{      if (readUCIOption(uci,s)) {        pendingOptions.clear();        uci.initOptions(engineOptions);        uci.applyIniFile();        uci.writeLineToEngine("ucinewgame");        uci.writeLineToEngine("isready");        engineState.setState(MainState.WAIT_READY);      }      break;    }case WAIT_READY:{    if ("readyok".equals(s)) {      engineState.setState(MainState.IDLE);      handleIdleState();    }    break;  }case SEARCH:case PONDER:case ANALYZE:{  String[] tokens=tokenize(s);  if (tokens[0].equals("info")) {    parseInfoCmd(tokens);  } else   if (tokens[0].equals("bestmove")) {    String bestMove=tokens[1];    String nextPonderMoveStr="";    if ((tokens.length >= 4) && (tokens[2].equals("ponder")))     nextPonderMoveStr=tokens[3];    Move nextPonderMove=TextIO.UCIstringToMove(nextPonderMoveStr);    if (engineState.state == MainState.SEARCH)     reportMove(bestMove,nextPonderMove);    engineState.setState(MainState.IDLE);    searchRequest=null;    handleIdleState();  }  break;}case STOP_SEARCH:{String[] tokens=tokenize(s);if (tokens[0].equals("bestmove")) {  uci.writeLineToEngine("isready");  engineState.setState(MainState.WAIT_READY);}break;}default :}}  }
class C{  public Instances dataset(){  return m_Dataset;}  }
class C{  private int unsignedBytesToInt(byte b0,byte b1,byte b2,byte b3){  return (unsignedByteToInt(b0) + (unsignedByteToInt(b1) << 8)) + (unsignedByteToInt(b2) << 16) + (unsignedByteToInt(b3) << 24);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  private int parseKeyProviderInfo(final byte[] b,final int off) throws ParseException {  final int bytesToParseLen=b.length - off;  if (bytesToParseLen >= keyProviderInfoLen_) {    keyProviderInfo_=Arrays.copyOfRange(b,off,off + keyProviderInfoLen_);    return keyProviderInfoLen_;  } else {    throw new ParseException("Not enough bytes to parse key provider info");  }}  }
class C{  public s addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public Edge findEqualEdge(Edge e){  OrientedCoordinateArray oca=new OrientedCoordinateArray(e.getCoordinates());  Edge matchEdge=(Edge)ocaMap.get(oca);  return matchEdge;}  }
class C{  public AbstractProblem(int numberOfVariables,int numberOfObjectives,int numberOfConstraints){  super();  this.numberOfVariables=numberOfVariables;  this.numberOfObjectives=numberOfObjectives;  this.numberOfConstraints=numberOfConstraints;}  }
class C{  public StringIndexOutOfBoundsException(int sourceLength,int index){  super("length=" + sourceLength + "; index="+ index);}  }
class C{  public final void popCurrentNodeAndExpression(){  m_currentNodes.quickPop(1);  m_currentExpressionNodes.quickPop(1);}  }
class C{  public void addMessageBatch(byte[][] commands,MessageContext[] msgCtx,int lastConsensusId){  if (position < messageBatches.length) {    messageBatches[position]=new CommandsInfo(commands,msgCtx);    position++;  }  setLastCID(lastConsensusId);}  }
class C{  public static <I0,I1,O>Function<tuple2<I0,I1>,O> Function(Class<?> theClass,String methodName,Class<?> parameterType0,Class<?> parameterType1){  return FunctionUtils.Function(theClass,methodName,parameterType0,parameterType1);}  }
class C{  private int binarySearchFirstIntersectionY(int y1,int y2,int start,int end){  if (start >= end) {    return -1;  }  int pos=(start + end) / 2;  Component c=components.get(pos);  Rectangle bounds=c.getBounds();  int cy1=bounds.getY();  int cy2=bounds.getY() + bounds.getHeight();  if ((cy1 >= y1 && cy1 <= y2) || (cy2 >= y1 && cy2 <= y2) || (cy1 <= y1 && cy2 >= y2)) {    while (pos > start && cy1 > y1) {      c=components.get(--pos);      cy1=c.getBounds().getY();    }    return pos;  } else   if (cy1 > y2) {    return binarySearchFirstIntersectionY(y1,y2,start,pos);  } else {    return binarySearchFirstIntersectionY(y1,y2,pos + 1,end);  }}  }
class C{  public static Connection createConnection(boolean autoCommit,int trxLevel){  Connection conn=s_cc.getConnection(autoCommit,trxLevel);  if (CLogMgt.isLevelFinest()) {  }  try {    if (conn != null && conn.getAutoCommit() != autoCommit) {      throw new IllegalStateException("Failed to set the requested auto commit mode on connection. [autoCommit=" + autoCommit + "]");    }  } catch (  SQLException e) {  }  return conn;}  }
class C{  public Graph(Table nodes,boolean directed){  this(nodes,directed,DEFAULT_NODE_KEY,DEFAULT_SOURCE_KEY,DEFAULT_TARGET_KEY);}  }
class C{  public static <T>T doPrivileged(PrivilegedExceptionAction<T> action,AccessControlContext context) throws PrivilegedActionException {  try {    T result=action.run();    keepalive(context);    return result;  } catch (  RuntimeException ex) {    throw ex;  }catch (  Exception ex) {    throw new PrivilegedActionException(ex);  }}  }
class C{  private void restoreTerminal(){  Perspective perspective=perspectiveManager.getActivePerspective();  if (perspective != null) {    perspective.restoreParts();  }}  }
class C{  public UnaryExpression createUnaryExpression(){  UnaryExpressionImpl unaryExpression=new UnaryExpressionImpl();  return unaryExpression;}  }
class C{  private int computeQueuingMode(Utterance utterance,AccessibilityEvent event){  final Bundle metadata=utterance.getMetadata();  final int eventType=event.getEventType();  if (((event.getEventType() & AccessibilityEventProcessor.AUTOMATIC_AFTER_STATE_CHANGE) != 0) && ((event.getEventTime() - mLastWindowStateChanged) < AccessibilityEventProcessor.DELAY_AUTO_AFTER_STATE)) {    return SpeechController.QUEUE_MODE_QUEUE;  }  if (eventType == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED) {    AccessibilityRecordCompat record=AccessibilityEventCompat.asRecord(event);    AccessibilityNodeInfoCompat node=record.getSource();    if (node != null) {      int liveRegionMode=node.getLiveRegion();      if (liveRegionMode == View.ACCESSIBILITY_LIVE_REGION_POLITE) {        return SpeechController.QUEUE_MODE_QUEUE;      }    }  }  int queueMode=metadata.getInt(Utterance.KEY_METADATA_QUEUING,SpeechController.QUEUE_MODE_INTERRUPT);  if (mLastEventType == eventType && queueMode != SpeechController.QUEUE_MODE_UNINTERRUPTIBLE) {    return SpeechController.QUEUE_MODE_INTERRUPT;  }  mLastEventType=eventType;  return queueMode;}  }
class C{  public void stop(){  logger.info("Stop mqtt broker.");  mqttBroker.stopServer();}  }
class C{  void resetCaches(){  this.cachedNextLinkId=null;  this.cachedRouteLinkIds=null;  this.cachedDestinationLinkId=null;  PlanElement currentPlanElement=this.getPlanElements().get(this.currentPlanElementIndex);  if (currentPlanElement instanceof Leg) {    this.currentLeg=((Leg)currentPlanElement);    this.cachedRouteLinkIds=null;    Route route=currentLeg.getRoute();    if (route == null) {      log.error("The agent " + this.getId() + " has no route in its leg. Removing the agent from the simulation.");      this.state=MobsimAgent.State.ABORT;      return;    }    this.cachedDestinationLinkId=route.getEndLinkId();  } else {    this.calculateAndSetDepartureTime((Activity)this.getCurrentPlanElement());  }}  }
class C{  private void processPricedEvent(TechnicalProduct techProduct,Product product,String qName,Attributes atts){  String type=getMandatoryValue(atts,ATTRIBUTE_TYPE);  String id=atts.getValue(ATTRIBUTE_ID);  String price=getMandatoryValue(atts,ATTRIBUTE_PRICE);  if (isBlank(type) || isBlank(id) || isBlank(price)|| techProduct == null || product == null) {    return;  }  Event event=null;  if (type.equals(EventType.PLATFORM_EVENT.toString()) && id.equals(PlatformEventIdentifier.USER_LOGIN_TO_SERVICE)) {    event=getPlatformEvent(id);  } else   if (type.equals(EventType.PLATFORM_EVENT.toString()) && id.equals(PlatformEventIdentifier.USER_LOGOUT_FROM_SERVICE)) {    event=getPlatformEvent(id);  } else   if (type.equals(EventType.SERVICE_EVENT.toString())) {    List<Event> events=techProduct.getEvents();    event=findEvent(events,id);  } else {    addError(qName,"Unknown event type '" + type + "'");  }  if (event != null) {    PricedEvent pricedEvent=new PricedEvent();    pricedEvent.setPriceModel(product.getPriceModel());    pricedEvent.setEvent(event);    pricedEvent.setEventPrice(new BigDecimal(price));    persist(pricedEvent);  } else {    addError(qName,"Unknown event type:'" + type + "' id:'"+ id+ "'");  }}  }
class C{  void appendStartElement(int namespaceIndex,int localNameIndex,int prefixIndex){  int w0=(namespaceIndex << 16) | ELEMENT_NODE;  int w1=currentParent;  int w2=0;  int w3=localNameIndex | prefixIndex << 16;  System.out.println("set w3=" + w3 + " "+ (w3 >> 16)+ "/"+ (w3 & 0xffff));  int ourslot=appendNode(w0,w1,w2,w3);  currentParent=ourslot;  previousSibling=0;  if (m_docElement == NULL)   m_docElement=ourslot;}  }
class C{  private static void compareDescriptions(List<VOLocalizedText> expected,VOServiceLocalization localization,String localeToIgnore){  Map<String,String> localeToDesc=new HashMap<String,String>();  for (  VOLocalizedText txt : localization.getDescriptions()) {    localeToDesc.put(txt.getLocale(),txt.getText());  }  for (  VOLocalizedText txt : expected) {    String locale=txt.getLocale();    if (!localeToIgnore.equals(locale)) {      String text=localeToDesc.get(locale);      assertNotNull(text);      assertEquals(txt.getText(),text);    }  }}  }
class C{  public static CascadedStyle createLayoutStyle(PropertyDeclaration[] decls){  return new CascadedStyle(Arrays.asList(decls).iterator());}  }
class C{  public static String removeChars(String src,char... chars){  int i=src.length();  StringBuilder sb=new StringBuilder(i);  mainloop:   for (int j=0; j < i; j++) {    char c=src.charAt(j);    for (    char aChar : chars) {      if (c == aChar) {        continue mainloop;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  private static CimConnectionInfo createConnectionInfo(){  CimConnectionInfo connectionInfo=new CimConnectionInfo();  connectionInfo.setType(CimConstants.ECOM_FILE_CONNECTION_TYPE);  connectionInfo.setHost(PROVIDER_IP);  connectionInfo.setPort(PROVIDER_PORT);  connectionInfo.setUser(PROVIDER_USER);  connectionInfo.setPassword(PROVIDER_PW);  connectionInfo.setInteropNS(PROVIDER_INTEROP_NS);  connectionInfo.setImplNS(PROVIDER_IMPL_NS);  connectionInfo.setUseSSL(true);  return connectionInfo;}  }
class C{  public static @Nonnull Set<XMethod> resolveMethodCallTargets(InvokeInstruction invokeInstruction,TypeFrame typeFrame,ConstantPoolGen cpg) throws DataflowAnalysisException, ClassNotFoundException {  short opcode=invokeInstruction.getOpcode();  if (opcode == Constants.INVOKESTATIC) {    return Util.emptyOrNonnullSingleton(findInvocationLeastUpperBound(invokeInstruction,cpg,STATIC_METHOD));  }  if (!typeFrame.isValid()) {    return Collections.<XMethod>emptySet();  }  if (opcode == Constants.INVOKEDYNAMIC) {    return Collections.<XMethod>emptySet();  }  Type receiverType;  boolean receiverTypeIsExact;  if (opcode == Constants.INVOKESPECIAL) {    receiverType=ObjectTypeFactory.getInstance(invokeInstruction.getClassName(cpg));    receiverTypeIsExact=false;  } else {    int instanceStackLocation=typeFrame.getInstanceStackLocation(invokeInstruction,cpg);    receiverType=typeFrame.getStackValue(instanceStackLocation);    if (!(receiverType instanceof ReferenceType)) {      return Collections.<XMethod>emptySet();    }    receiverTypeIsExact=typeFrame.isExact(instanceStackLocation);  }  if (DEBUG_METHOD_LOOKUP) {    System.out.println("[receiver type is " + receiverType + ", "+ (receiverTypeIsExact ? "exact]" : " not exact]"));  }  return resolveMethodCallTargets((ReferenceType)receiverType,invokeInstruction,cpg,receiverTypeIsExact);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public static boolean doesUserNeedUpgrading(){  boolean needsUpgrade=false;  int versionCode=Settings.getAppVersion();  if (versionCode == BuildConfig.VERSION_CODE)   return false;  while (versionCode <= BuildConfig.VERSION_CODE) {    needsUpgrade=needsUpgrade || VersionNeedsUpgrade.contains(versionCode);    versionCode++;    if (needsUpgrade)     break;  }  return needsUpgrade;}  }
class C{  public Object[] executeQueries(String qarr[]) throws Exception {  QueryService qs=cache.getQueryService();  Object[] result=new Object[qarr.length];  String query=null;  int j=0;  for (int i=0; i < qarr.length; i++) {    query=queries.get(qarr[i]);    result[j++]=qs.newQuery(query).execute();  }  return result;}  }
class C{  private void initParameterLocalesForProjection(){  parameterLocaleSet=false;  parameterDefaultLocaleSet=false;}  }
class C{  public static Sentence parseAsMatchingSource(final String text){  Sentence sentence=parse(text,new ConvCtxForMatchingSource());  return sentence;}  }
class C{  public static void write(OutputStream out,InputStream is,long length,boolean noBackslashEscapes) throws IOException {  out.write(QUOTE);  byte[] buffer=new byte[1024];  long bytesLeft=length;  int len;  for (; ; ) {    int bytesToRead=(int)Math.min(bytesLeft,buffer.length);    if (bytesToRead == 0) {      break;    }    len=is.read(buffer,0,bytesToRead);    if (len <= 0) {      break;    }    writeBytesEscaped(out,buffer,len,noBackslashEscapes);    bytesLeft-=len;  }  out.write(QUOTE);}  }
class C{  public ZoomHandlerFX(String id,ChartViewer parent){  this(id,parent,false,false,false,false);}  }
class C{  protected void testServletThatIssuesGetConnectionFrom(DataSourceFixture fixture,String type) throws MalformedURLException {  addDataSourceToConfigurationViaProperty(fixture);  testWar(type);}  }
class C{  public void warn(XPathContext xctxt,int sourceNode,String msg,Object[] args) throws javax.xml.transform.TransformerException {  String fmsg=XSLMessages.createXPATHWarning(msg,args);  ErrorListener ehandler=xctxt.getErrorListener();  if (null != ehandler) {    ehandler.warning(new TransformerException(fmsg,(SAXSourceLocator)xctxt.getSAXLocator()));  }}  }
class C{  @Deprecated public InsecureStore(){  this(null);}  }
class C{  public double doubleValue(){  return toNumber().doubleValue();}  }
class C{  private static Object value(FieldMapper mapper,Object value){  if (mapper instanceof DateFieldMapper) {    return new Date(((DateFieldMapper)mapper).fieldType().value(value));  } else   if (mapper instanceof IpFieldMapper) {    Long ip=(Long)((IpFieldMapper)mapper).fieldType().value(value);    return com.google.common.net.InetAddresses.forString(IpFieldMapper.longToIp(ip));  } else   if (mapper instanceof GeoShapeFieldMapper) {    return value.toString();  } else {    Object v=mapper.fieldType().value(value);    if (v instanceof Uid) {      return ((Uid)v).id();    } else {      return v;    }  }}  }
class C{  public void testProximityNegative(){  assertFalse(sh.isDefaultSuggestion("arout","about"));  assertFalse(sh.isDefaultSuggestion("ire","are"));}  }
class C{  public boolean canBeLongAddress(int address){  return (address >= 1);}  }
class C{  public boolean processClientMessage(XClientMessageEvent xclient){  if (xclient.get_message_type() != MotifDnDConstants.XA_MOTIF_DRAG_AND_DROP_MESSAGE.getAtom()) {    return false;  }  long data=xclient.get_data();  byte reason=(byte)(unsafe.getByte(data) & MotifDnDConstants.MOTIF_MESSAGE_REASON_MASK);  byte origin=(byte)(unsafe.getByte(data) & MotifDnDConstants.MOTIF_MESSAGE_SENDER_MASK);  byte byteOrder=unsafe.getByte(data + 1);  boolean swapNeeded=byteOrder != MotifDnDConstants.getByteOrderByte();  int action=DnDConstants.ACTION_NONE;  int x=0;  int y=0;  if (origin != MotifDnDConstants.MOTIF_MESSAGE_FROM_RECEIVER) {    return false;  }switch (reason) {case MotifDnDConstants.DROP_SITE_ENTER:case MotifDnDConstants.DROP_SITE_LEAVE:case MotifDnDConstants.DRAG_MOTION:case MotifDnDConstants.OPERATION_CHANGED:    break;default :  return false;}int t=unsafe.getInt(data + 4);if (swapNeeded) {t=MotifDnDConstants.Swapper.swap(t);}long time=t & 0xffffffffL;if (targetEnterServerTime == XConstants.CurrentTime || time < targetEnterServerTime) {return true;}if (reason != MotifDnDConstants.DROP_SITE_LEAVE) {short flags=unsafe.getShort(data + 2);if (swapNeeded) {  flags=MotifDnDConstants.Swapper.swap(flags);}byte status=(byte)((flags & MotifDnDConstants.MOTIF_DND_STATUS_MASK) >> MotifDnDConstants.MOTIF_DND_STATUS_SHIFT);byte motif_action=(byte)((flags & MotifDnDConstants.MOTIF_DND_ACTION_MASK) >> MotifDnDConstants.MOTIF_DND_ACTION_SHIFT);if (status == MotifDnDConstants.MOTIF_VALID_DROP_SITE) {  action=MotifDnDConstants.getJavaActionsForMotifActions(motif_action);} else {  action=DnDConstants.ACTION_NONE;}short tx=unsafe.getShort(data + 8);short ty=unsafe.getShort(data + 10);if (swapNeeded) {  tx=MotifDnDConstants.Swapper.swap(tx);  ty=MotifDnDConstants.Swapper.swap(ty);}x=tx;y=ty;}getProtocolListener().handleDragReply(action,x,y);return true;}  }
class C{  protected void putRules(String name,Rule... rules){  grammar.put(name,rules);}  }
class C{  public static byte[] toBytes(char x){  return toBytes(x,new byte[2],0);}  }
class C{  public boolean isZoomYEnabled(){  return mZoomYEnabled;}  }
class C{  protected void addToPortMap(IOFSwitch sw,MacAddress mac,VlanVid vlan,OFPort portVal){  Map<MacVlanPair,OFPort> swMap=macVlanToSwitchPortMap.get(sw);  if (vlan == VlanVid.FULL_MASK || vlan == null) {    vlan=VlanVid.ofVlan(0);  }  if (swMap == null) {    swMap=Collections.synchronizedMap(new LRULinkedHashMap<MacVlanPair,OFPort>(MAX_MACS_PER_SWITCH));    macVlanToSwitchPortMap.put(sw,swMap);  }  swMap.put(new MacVlanPair(mac,vlan),portVal);}  }
class C{  public Analyzer includeGenerationalDistance(){  includeGenerationalDistance=true;  return this;}  }
class C{  @Override public V remove(final Object key){  if (key == null) {    return null;  }  purgeBeforeWrite();  return super.remove(key);}  }
class C{  private void overlayUserGroup(UserGroup to,UserGroupUpdateParam from){  if (from == null || to == null) {    throw APIException.badRequests.resourceEmptyConfiguration("user group");  }  if (!to.getLabel().equalsIgnoreCase(from.getLabel())) {    throw APIException.badRequests.cannotRenameUserGroup(to.getLabel());  }  if (!to.getDomain().equalsIgnoreCase(from.getDomain())) {    checkForActiveUsageOfUserGroup(to.getDomain(),to.getLabel());  }  to.setDomain(from.getDomain());  to.setLabel(from.getLabel());  Map<String,UserAttributeParam> userAttributeParamMap=getUserAttributesToMap(to.getAttributes());  Map<String,UserAttributeParam> FromUserAttributeParamMap=getUserAttributesToMap(from.getAddAttributes());  if (!CollectionUtils.isEmpty(FromUserAttributeParamMap)) {    for (    Map.Entry<String,UserAttributeParam> addAttribute : FromUserAttributeParamMap.entrySet()) {      addToMapIfNotExist(userAttributeParamMap,addAttribute);    }  }  if (!CollectionUtils.isEmpty(from.getRemoveAttributes())) {    for (    String removeAttribute : from.getRemoveAttributes()) {      userAttributeParamMap.remove(removeAttribute);    }  }  if (CollectionUtils.isEmpty(userAttributeParamMap)) {    ArgValidator.checkFieldNotEmpty(userAttributeParamMap,"Attempt to remove the last attribute is not allowed.  At least one attribute must be in the user group.");  }  StringSet attributesToAdd=new StringSet();  for (  UserAttributeParam userAttributeParam : userAttributeParamMap.values()) {    attributesToAdd.add(userAttributeParam.toString());  }  to.getAttributes().replace(attributesToAdd);}  }
class C{  public void colorMode(int mode){  colorMode(mode,colorModeX,colorModeY,colorModeZ,colorModeA);}  }
class C{  public boolean save(){  p_properties.setProperty("ADEMPIERE_MAIN_VERSION",Adempiere.MAIN_VERSION);  p_properties.setProperty("ADEMPIERE_DATE_VERSION",Adempiere.DATE_VERSION);  p_properties.setProperty("ADEMPIERE_DB_VERSION",Adempiere.DB_VERSION);  log.finest(p_properties.toString());  Ini.setClient(false);  String fileName=m_adempiereHome.getAbsolutePath() + File.separator + Ini.ADEMPIERE_PROPERTY_FILE;  Ini.loadProperties(fileName);  fileName=m_adempiereHome.getAbsolutePath() + File.separator + ADEMPIERE_ENV_FILE;  try {    FileOutputStream fos=new FileOutputStream(new File(fileName));    p_properties.store(fos,ADEMPIERE_ENV_FILE);    fos.flush();    fos.close();  } catch (  Exception e) {    log.severe("Cannot save Properties to " + fileName + " - "+ e.toString());    if (p_panel != null)     JOptionPane.showConfirmDialog(p_panel,ConfigurationPanel.res.getString("ErrorSave"),ConfigurationPanel.res.getString("AdempiereServerSetup"),JOptionPane.DEFAULT_OPTION,JOptionPane.ERROR_MESSAGE); else     System.err.println(ConfigurationPanel.res.getString("ErrorSave"));    return false;  }catch (  Throwable t) {    log.severe("Cannot save Properties to " + fileName + " - "+ t.toString());    if (p_panel != null)     JOptionPane.showConfirmDialog(p_panel,ConfigurationPanel.res.getString("ErrorSave"),ConfigurationPanel.res.getString("AdempiereServerSetup"),JOptionPane.DEFAULT_OPTION,JOptionPane.ERROR_MESSAGE); else     System.err.println(ConfigurationPanel.res.getString("ErrorSave"));    return false;  }  log.info(fileName);  return saveIni();}  }
class C{  boolean doTCPCheckMember(InternalDistributedMember suspectMember,int port){  Socket clientSocket=null;  InternalDistributedSystem internalDistributedSystem=InternalDistributedSystem.getConnectedInstance();  try {    logger.debug("Checking member {} with TCP socket connection {}:{}.",suspectMember,suspectMember.getInetAddress(),port);    clientSocket=SocketCreatorFactory.getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER).connect(suspectMember.getInetAddress(),port,(int)memberTimeout,new ConnectTimeoutTask(services.getTimer(),memberTimeout),false,-1,false);    clientSocket.setTcpNoDelay(true);    return doTCPCheckMember(suspectMember,clientSocket);  } catch (  IOException e) {  }catch (  IllegalStateException e) {    if (!isStopping) {      logger.trace("Unexpected exception",e);    }  } finally {    try {      if (clientSocket != null) {        clientSocket.setSoLinger(true,0);        clientSocket.close();      }    } catch (    IOException e) {    }  }  return false;}  }
class C{  int addInv(int x){  return (0 - x) & MASK;}  }
class C{  public void exposeTopologyEndpoint(boolean exposeTopologyEndpoint){  this.exposeTopologyEndpoint=exposeTopologyEndpoint;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public LocalStringWriter(){  buf=new StringBuffer();  lock=buf;}  }
class C{  public static DigestCalculator createDigestCalculator(AlgorithmIdentifier algorithm) throws OperatorCreationException {  return DIGEST_PROVIDER.get(algorithm);}  }
class C{  public int read(byte[] buf,int off,int len) throws IOException {  if (off < 0 || len < 0 || off + len < 0 || off + len > buf.length)   throw new IndexOutOfBoundsException();  if (len == 0)   return 0;  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  int size=0;  try {    if (seekNeeded)     seek();    if (endReached)     return -1;    while (len > 0) {      if (blockDecoder == null) {        seek();        if (endReached)         break;      }      int ret=blockDecoder.read(buf,off,len);      if (ret > 0) {        curPos+=ret;        size+=ret;        off+=ret;        len-=ret;      } else       if (ret == -1) {        blockDecoder=null;      }    }  } catch (  IOException e) {    if (e instanceof EOFException)     e=new CorruptedInputException();    exception=e;    if (size == 0)     throw e;  }  return size;}  }
class C{  public SimpleDegreeDistribution(List<Integer> degrees){  this.degrees.addAll(degrees);}  }
class C{  private ReplyConstants(){}  }
class C{  public StringBuffer appendTail(StringBuffer sb){  return matcher.appendTail(sb);}  }
class C{  private void calculateTravelDistanceDistributionByMode(MatsimServices controler){  this.network=controler.getScenario().getNetwork();  travelDistanceDistributionByMode=new TreeMap<String,Bins>();  Map<Id<Person>,? extends Person> persons=controler.getScenario().getPopulation().getPersons();  for (  Id<Person> id : persons.keySet()) {    run(persons.get(id).getSelectedPlan());  }}  }
class C{  public static float distanceBetween(final Location start,final Location end){  final float[] results=new float[1];  Location.distanceBetween(start.getLatitude(),start.getLongitude(),end.getLatitude(),end.getLongitude(),results);  return results[0];}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SVGPath relativeLineTo(double x,double y){  if (x > Double.NEGATIVE_INFINITY && x < Double.POSITIVE_INFINITY && y > Double.NEGATIVE_INFINITY && y < Double.POSITIVE_INFINITY) {    append(PATH_LINE_TO_RELATIVE,x,y);  }  return this;}  }
class C{  public ToStringBuilder append(String fieldName,Object obj){  style.append(buffer,fieldName,obj,null);  return this;}  }
class C{  private void firePortMenuWillOpen(final JPopupMenu m,final Port port){  List<ProcessInteractionListener> copy=new LinkedList<>(processInteractionListeners);  for (  ProcessInteractionListener l : copy) {    l.portContextMenuWillOpen(m,port);  }}  }
class C{  public static void checkValueType(HCatSchema schema,String fieldName) throws IOException {  HCatFieldSchema valueType=schema.get(fieldName);  if (valueType.getCategory() == HCatFieldSchema.Category.MAP) {    if (valueType.getMapValueSchema().get(0).getCategory() != HCatFieldSchema.Category.PRIMITIVE) {      throw new IllegalArgumentException("map value type must be a primitive type");    }  }  if (valueType.getCategory() == HCatFieldSchema.Category.ARRAY) {    if (valueType.getArrayElementSchema().get(0).getCategory() != HCatFieldSchema.Category.PRIMITIVE) {      throw new IllegalArgumentException("array element type must be a primitive type");    }  }  if (valueType.getCategory() == HCatFieldSchema.Category.STRUCT) {    HCatSchema structSchema=valueType.getStructSubSchema();    for (    HCatFieldSchema f : structSchema.getFields()) {      if (f.getCategory() != HCatFieldSchema.Category.PRIMITIVE) {        throw new IllegalArgumentException("struct element type must be a primitive type");      }    }  }}  }
class C{  public final boolean isFocusCycleRoot(){  return true;}  }
class C{  static int tieBreakOrder(Object a,Object b){  int d;  if (a == null || b == null || (d=a.getClass().getName().compareTo(b.getClass().getName())) == 0)   d=(System.identityHashCode(a) <= System.identityHashCode(b) ? -1 : 1);  return d;}  }
class C{  private void drawEllipse(Point2D point,double oRadius,Graphics2D g2){  Ellipse2D dot=new Ellipse2D.Double(point.getX() + oRadius / 2,point.getY(),oRadius,oRadius);  g2.draw(dot);}  }
class C{  public int hashCode(){  int hash=1;  hash=hash * 31 + m_code.hashCode();  hash=hash * 31 + (m_message == null ? 0 : m_message.hashCode());  return hash;}  }
class C{  public boolean isSoftwareInternetScsiEnabled(){  return softwareInternetScsiEnabled;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.021 -0500",hash_original_method="D1D350F2DDD3147BCAFA3C9F1D37A8D5",hash_generated_method="69BD9BFC77D63852CB66187408365DAF") static BigInteger multiplyByPositiveInt(BigInteger val,int factor){  BigInt bi=val.getBigInt().copy();  bi.multiplyByPositiveInt(factor);  return new BigInteger(bi);}  }
class C{  public void removeIncomingBytestreamListener(String initiatorJID){  this.userListeners.remove(initiatorJID);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.FUNCTION_DEFINITION;}  }
class C{  private void executeDrill(MQuery query,Component component){  int AD_Table_ID=AReport.getAD_Table_ID(query.getTableName());  if (!MRole.getDefault().isCanReport(AD_Table_ID)) {    FDialog.error(m_WindowNo,this,"AccessCannotReport",query.getTableName());    return;  }  if (AD_Table_ID != 0)   new WReport(AD_Table_ID,query,component,0); else   log.warning("No Table found for " + query.getWhereClause(true));}  }
class C{  public static int stringToActionData(String str){  if (str.equals(rbx.getString("TurnoutClosed"))) {    return Turnout.CLOSED;  } else   if (str.equals(rbx.getString("TurnoutThrown"))) {    return Turnout.THROWN;  } else   if (str.equals(Bundle.getMessage("SensorStateActive"))) {    return Sensor.ACTIVE;  } else   if (str.equals(Bundle.getMessage("SensorStateInactive"))) {    return Sensor.INACTIVE;  } else   if (str.equals(rbx.getString("LightOn"))) {    return Light.ON;  } else   if (str.equals(rbx.getString("LightOff"))) {    return Light.OFF;  } else   if (str.equals(rbx.getString("TurnoutUnlock"))) {    return Turnout.UNLOCKED;  } else   if (str.equals(rbx.getString("TurnoutLock"))) {    return Turnout.LOCKED;  } else   if (str.equals(Bundle.getMessage("SignalHeadStateRed"))) {    return SignalHead.RED;  } else   if (str.equals(Bundle.getMessage("SignalHeadStateYellow"))) {    return SignalHead.YELLOW;  } else   if (str.equals(Bundle.getMessage("SignalHeadStateGreen"))) {    return SignalHead.GREEN;  } else   if (str.equals(Bundle.getMessage("SignalHeadStateDark"))) {    return SignalHead.DARK;  } else   if (str.equals(Bundle.getMessage("SignalHeadStateFlashingRed"))) {    return SignalHead.FLASHRED;  } else   if (str.equals(Bundle.getMessage("SignalHeadStateFlashingYellow"))) {    return SignalHead.FLASHYELLOW;  } else   if (str.equals(Bundle.getMessage("SignalHeadStateFlashingGreen"))) {    return SignalHead.FLASHGREEN;  } else   if (str.equals(Bundle.getMessage("SignalHeadStateLunar"))) {    return SignalHead.LUNAR;  } else   if (str.equals(Bundle.getMessage("SignalHeadStateFlashingLunar"))) {    return SignalHead.FLASHLUNAR;  } else   if (str.equals(rbx.getString("AudioSourcePlay"))) {    return Audio.CMD_PLAY;  } else   if (str.equals(rbx.getString("AudioSourceStop"))) {    return Audio.CMD_STOP;  } else   if (str.equals(rbx.getString("AudioSourcePlayToggle"))) {    return Audio.CMD_PLAY_TOGGLE;  } else   if (str.equals(rbx.getString("AudioSourcePause"))) {    return Audio.CMD_PAUSE;  } else   if (str.equals(rbx.getString("AudioSourceResume"))) {    return Audio.CMD_RESUME;  } else   if (str.equals(rbx.getString("AudioSourcePauseToggle"))) {    return Audio.CMD_PAUSE_TOGGLE;  } else   if (str.equals(rbx.getString("AudioSourceRewind"))) {    return Audio.CMD_REWIND;  } else   if (str.equals(rbx.getString("AudioSourceFadeIn"))) {    return Audio.CMD_FADE_IN;  } else   if (str.equals(rbx.getString("AudioSourceFadeOut"))) {    return Audio.CMD_FADE_OUT;  } else   if (str.equals(rbx.getString("AudioResetPosition"))) {    return Audio.CMD_RESET_POSITION;  }  if (str.length() > 0) {    log.warn("Unexpected parameter to stringToActionData(" + str + ")");  }  return -1;}  }
class C{  private void clearCache(){  if (!cumulative) {    sums=0;  }}  }
class C{  public Matrix3d(Matrix3d m1){  this.m00=m1.m00;  this.m01=m1.m01;  this.m02=m1.m02;  this.m10=m1.m10;  this.m11=m1.m11;  this.m12=m1.m12;  this.m20=m1.m20;  this.m21=m1.m21;  this.m22=m1.m22;}  }
class C{  public GetResponseMessage(GetResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetValues()) {    List<VersionedValue> __this__values=new ArrayList<VersionedValue>();    for (    VersionedValue other_element : other.values) {      __this__values.add(new VersionedValue(other_element));    }    this.values=__this__values;  }  if (other.isSetError()) {    this.error=new SyncError(other.error);  }}  }
class C{  public static EverythingMatcher<JobKey> allJobs(){  return new EverythingMatcher<JobKey>();}  }
class C{  public static boolean testAabPlane(float minX,float minY,float minZ,float maxX,float maxY,float maxZ,float a,float b,float c,float d){  float pX, pY, pZ, nX, nY, nZ;  if (a > 0.0f) {    pX=maxX;    nX=minX;  } else {    pX=minX;    nX=maxX;  }  if (b > 0.0f) {    pY=maxY;    nY=minY;  } else {    pY=minY;    nY=maxY;  }  if (c > 0.0f) {    pZ=maxZ;    nZ=minZ;  } else {    pZ=minZ;    nZ=maxZ;  }  float distN=d + a * nX + b * nY + c * nZ;  float distP=d + a * pX + b * pY + c * pZ;  return distN <= 0.0f && distP >= 0.0f;}  }
class C{  @Deprecated public void updateSearch(SavedSearch search,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"updateSearch",mAuthenticationToken,search);}  }
class C{  private static void mkdirs(@Nonnull IResource resource,IProgressMonitor monitor) throws CoreException {  IContainer container=resource.getParent();  if (container.getType() == IResource.FOLDER && !container.exists()) {    if (!container.getParent().exists()) {      mkdirs(container,monitor);    }    ((IFolder)container).create(true,true,monitor);  }}  }
class C{  private String convertLL(double latLon){  if (Double.isNaN(latLon))   return "";  return DirectoryFormatter.parseLatLon(latLon);}  }
class C{  void addCaseProofs(Vector<String[]> pfStepVec,Vector<NodeRepresentation> childVec,String[] assumpArray,String[] proofText){  int newAssumpCount=assumpArray.length;  NodeRepresentation lastChildNode=childVec.elementAt(childVec.size() - 1);  int lenOfChildAssumps=childVec.size();  if (lastChildNode.nodeType == NodeRepresentation.OR_DECOMP) {    lenOfChildAssumps--;  }  for (int i=0; i < lenOfChildAssumps; i++) {    newAssumpCount=newAssumpCount + childVec.elementAt(i).primedNodeText().length;  }  String[] newAssumpArray=new String[newAssumpCount];  for (int i=0; i < assumpArray.length; i++) {    newAssumpArray[i]=assumpArray[i];  }  if (lenOfChildAssumps > 0) {    if (assumpArray.length > 0) {      newAssumpArray[assumpArray.length - 1]=newAssumpArray[assumpArray.length - 1] + ",";    }    int idx=assumpArray.length;    for (int i=0; i < lenOfChildAssumps; i++) {      String[] assump=childVec.elementAt(i).primedNodeText();      for (int j=0; j < assump.length; j++) {        newAssumpArray[idx]=assump[j];        idx++;      }      if (i != lenOfChildAssumps - 1) {        newAssumpArray[idx - 1]=newAssumpArray[idx - 1] + ",";      }    }  }  if (lastChildNode.nodeType == NodeRepresentation.OR_DECOMP) {    for (int i=0; i < lastChildNode.children.size(); i++) {      addCaseProofs(pfStepVec,lastChildNode.children.elementAt(i),newAssumpArray,proofText);    }  } else {    String[] step;    if (newAssumpArray.length == 1 && useCaseButton.getSelection()) {      step=prependToStringArray(lastChildNode.primedNodeText(),"CASE ");    } else {      step=concatStringArrays(prependToStringArray(newAssumpArray,"ASSUME "),prependToStringArray(this.goalRep.primedNodeText(),"PROVE  "));    }    String stepNum=proofLevelString + (pfStepVec.size() + 1);    step=prependToStringArray(step,stepNum + STEP_NUMBER_PUNCTUATION + " ");    if (proofText != null) {      String[] newProofText=proofText.clone();      addStepNumToProof(stepNum,newProofText);      step=concatStringArrays(step,newProofText);    }    pfStepVec.add(step);  }}  }
class C{  public final boolean contains(LatLon latLon){  if (latLon == null) {    throw new IllegalArgumentException("LatLon Is Null");  }  return this.contains(latLon.getLatitude(),latLon.getLongitude());}  }
class C{  public boolean isInScroll(){  return mInScroll;}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeAttributeSets(this);}  }
class C{  public static List<Initiator> validatePortConnectivity(DbClient dbClient,ExportGroup exportGroup,List<Initiator> initiators){  Map<URI,Map<URI,Integer>> storageMap=getStorageToVolumeMap(dbClient,exportGroup,false);  List<Initiator> validInitiators=Lists.newArrayList();  for (  URI storage : storageMap.keySet()) {    StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storage);    List<URI> varrays=new ArrayList<URI>();    varrays.add(exportGroup.getVirtualArray());    if (storageSystem.getSystemType().equals(DiscoveredDataObject.Type.vplex.name())) {      List<URI> haVarrays=ExportUtils.getVarraysForStorageSystemVolumes(exportGroup,storage,dbClient);      varrays.addAll(haVarrays);    }    for (    Initiator initiator : initiators) {      if (hasConnectivityToSystem(storageSystem,varrays,initiator,dbClient)) {        validInitiators.add(initiator);      }    }  }  return validInitiators;}  }
class C{  public SchedulingThread(String name,LockType lockType){  super(name);  this.lockType=lockType;}  }
class C{  private HttpClientBuilder configCredentials(HttpClientBuilder httpClientBuilder,final String url) throws DSSException {  final CredentialsProvider credentialsProvider=new BasicCredentialsProvider();  for (  final Map.Entry<HttpHost,UsernamePasswordCredentials> entry : authenticationMap.entrySet()) {    final HttpHost httpHost=entry.getKey();    final UsernamePasswordCredentials usernamePasswordCredentials=entry.getValue();    final AuthScope authscope=new AuthScope(httpHost.getHostName(),httpHost.getPort());    credentialsProvider.setCredentials(authscope,usernamePasswordCredentials);  }  httpClientBuilder=httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);  httpClientBuilder=configureProxy(httpClientBuilder,credentialsProvider,url);  return httpClientBuilder;}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public static boolean isNative(int mod){  return (mod & NATIVE) != 0;}  }
class C{  public static String formatPercentage(int percentage){  return formatPercentage(((double)percentage) / 100.0);}  }
class C{  public synchronized boolean seek(long seqno,short fragno) throws ReplicatorException, InterruptedException {  assertNotDone();  if (cursor != null) {    cursor.release();    cursor=null;  }  pendingEvent.clear();  pendingSeqno=UNINITIALIZED;  LogFile logFile=diskLog.getLogFile(seqno);  if (logFile == null) {    if (logger.isDebugEnabled()) {      logger.debug("Log is uninitialized and does not contain seqno: seqno=" + seqno);    }    return false;  }  logFile.openRead();  cursor=new LogCursor(logFile,seqno);  cursor.setRotateNext(true);  if (logger.isDebugEnabled()) {    logger.debug("Using log file " + logFile.getFile().getName() + " - seeking event "+ seqno+ "/"+ fragno);  }  if (seqno == FIRST) {    if (logger.isDebugEnabled()) {      logger.debug("Seeking seqno in newly initialized log: seqno=" + seqno);    }    pendingSeqno=seqno;    return true;  }  LogRecord previousLogRecord=null;  long lastSeqno=logFile.getBaseSeqno();  while (true) {    try {      LogRecord logRecord=logFile.readRecord(0);      if (logRecord.isEmpty()) {        if (lastSeqno == UNINITIALIZED && lastSeqno < 0) {          if (logger.isDebugEnabled()) {            logger.debug("Seeking seqno in newly initialized log: seqno=" + seqno);          }          pendingSeqno=seqno;          return true;        } else         if (seqno > lastSeqno) {          if (previousLogRecord != null) {            THLEvent trialEvent=this.deserialize(previousLogRecord);            ReplEvent replEvent=trialEvent.getReplEvent();            if (replEvent instanceof ReplDBMSFilteredEvent) {              ReplDBMSFilteredEvent filterEvent=(ReplDBMSFilteredEvent)replEvent;              if (seqno <= filterEvent.getSeqnoEnd()) {                if (logger.isDebugEnabled()) {                  logger.debug("Found containing filtered event: seqno=" + seqno);                }                pendingEvent.add(trialEvent);                return true;              }            }          }          if (logger.isDebugEnabled()) {            logger.debug("Seeking seqno past end of log: seqno=" + seqno + " end seqno="+ lastSeqno);          }          pendingSeqno=seqno;          return true;        } else         break;      }      byte[] bytes=logRecord.getData();      byte recordType=bytes[0];      if (recordType == LogRecord.EVENT_REPL) {        LogEventReplReader eventReader=new LogEventReplReader(logRecord,eventSerializer,doChecksum);        if (eventReader.getSeqno() == seqno && eventReader.getFragno() == fragno) {          if (logger.isDebugEnabled())           logger.debug("Found requested event (" + seqno + "/"+ fragno+ ")");          pendingEvent.add(deserialize(logRecord));          break;        } else         if (eventReader.getSeqno() > seqno && previousLogRecord != null) {          if (logger.isDebugEnabled())           logger.debug("Found filtered event (" + seqno + "/"+ fragno+ ")");          pendingEvent.add(deserialize(previousLogRecord));          pendingEvent.add(deserialize(logRecord));          break;        } else         if (eventReader.getSeqno() > seqno || (eventReader.getSeqno() == seqno && eventReader.getFragno() > fragno)) {          if (logger.isDebugEnabled())           logger.debug("Requested event (" + seqno + "/"+ fragno+ ") not found. Found event "+ eventReader.getSeqno()+ "/"+ eventReader.getFragno()+ " instead");          break;        } else {          if (logger.isDebugEnabled())           logger.debug("Requested event (" + seqno + "/"+ fragno+ ") not reached. Current position "+ eventReader.getSeqno()+ "/"+ eventReader.getFragno());          lastSeqno=eventReader.getSeqno();          previousLogRecord=logRecord;        }      } else       if (recordType == LogRecord.EVENT_ROTATE) {        if (previousLogRecord != null) {          if (logger.isDebugEnabled())           logger.debug("Found suspected filtered event (" + seqno + "/"+ fragno+ ")");          pendingEvent.add(deserialize(previousLogRecord));        }        break;      } else {        throw new THLException("Unable to extract a valid record type; log appears to be corrupted: file=" + logFile.getFile().getName() + " offset="+ logRecord.getOffset()+ " record type="+ recordType);      }    } catch (    IOException e) {      throw new THLException("Failed to extract event from log",e);    }  }  return (pendingEvent.size() > 0);}  }
class C{  public static ArrayList<byte[]> byteStringsToArrays(List<ByteString> byteStrings){  if (byteStrings == null) {    return null;  }  ArrayList<byte[]> byteArrays=new ArrayList<byte[]>();  for (  ByteString string : byteStrings) {    byteArrays.add(string.toByteArray());  }  return byteArrays;}  }
class C{  public PLTexture(PLIImage image){  this(image,PLTextureColorFormat.PLTextureColorFormatUnknown,true);}  }
class C{  private Bundle messageToBundle(String messageId,String topic,MqttMessage message){  Bundle result=new Bundle();  result.putString(MqttServiceConstants.CALLBACK_MESSAGE_ID,messageId);  result.putString(MqttServiceConstants.CALLBACK_DESTINATION_NAME,topic);  result.putParcelable(MqttServiceConstants.CALLBACK_MESSAGE_PARCEL,new ParcelableMqttMessage(message));  return result;}  }
class C{  @SuppressWarnings("rawtypes") public synchronized Vertex createVertex(Object data){  if ((data instanceof String) && ((String)data).length() > MAX_TEXT) {    data=((String)data).substring(0,MAX_TEXT);  }  if (data instanceof Class) {    data=new Primitive(((Class)data).getName());  }  Vertex vertex=findByData(data);  if (vertex != null) {    return vertex;  }  if (data instanceof Primitive) {    vertex=new BasicVertex();    vertex.setData(data);    vertex.setNetwork(this);    return vertex;  }  throwReadOnly();  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void doneTurn(){  state.advanceTurn();}  }
class C{  public JFileChooser(){  this((File)null,(FileSystemView)null);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  private void abortWithError(Element element,String msg,Object... args) throws AbortProcessingException {  error(element,msg,args);  throw new AbortProcessingException();}  }
class C{  public UniqueIdentifierMap(final String prefix){  this.prefix=prefix;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!newRecord && !isProcessing() && is_ValueChanged("IsProcessing")) {    long ms=System.currentTimeMillis() - getCreated().getTime();    int seconds=(int)(ms / 1000);    if (seconds < 1)     seconds=1;    MProcess prc=MProcess.get(getCtx(),getAD_Process_ID());    prc.addStatistics(seconds);    if (prc.get_ID() != 0 && prc.save())     log.fine("afterSave - Process Statistics updated Sec=" + seconds); else     log.warning("afterSave - Process Statistics not updated");  }  return success;}  }
class C{  void gcspyGatherData(AbstractDriver driver){  Address cur=head;  while (!cur.isZero()) {    driver.scan(cur);    cur=cur.loadAddress(NEXT_OFFSET);  }}  }
class C{  private String convertMethodName(String name){  String[] r=SPLIT_METHOD_PATTERN.split(name,0);  StringBuilder builder=new StringBuilder();  String first=r[0];  builder.append(Character.toUpperCase(first.charAt(0)));  builder.append(first.substring(1));  for (int i=1; i < r.length; i++) {    builder.append(' ');    builder.append(r[i]);  }  return builder.toString();}  }
class C{  public final void readFieldsFromNative(StructObject struct){  desc.build();  if (!desc.hasFieldFields)   return;  try {    for (    StructFieldDescription fd : desc.fields) {      if (fd.field == null)       continue;      Pointer ptr=struct.peer.offset(fd.byteOffset);      Type tpe=fd.isNativeObject || fd.isArray ? fd.nativeTypeOrPointerTargetType : fd.field.getGenericType();      ptr=ptr.as(tpe);      ptr=fixIntegralTypeIOToMatchLength(ptr,fd.byteLength,fd.arrayLength);      Object value;      if (fd.isArray) {        ptr=ptr.validElements(fd.arrayLength);        value=ptr;      } else {        value=ptr.get();      }      fd.field.set(struct,value);      if (value instanceof NativeObject) {        if (value != null)         BridJ.readFromNative((NativeObject)value);      }    }  } catch (  Throwable th) {    throw new RuntimeException("Unexpected error while reading fields from struct " + Utils.toString(desc.structType) + " ("+ getPointer(struct)+ ") : "+ th,th);  }}  }
class C{  public GoogleCookie(URI uri,String cookieHeader){  String attributes[]=cookieHeader.split(";");  String nameValue=attributes[0].trim();  int equals=nameValue.indexOf('=');  if (equals < 0) {    throw new IllegalArgumentException("Cookie is not a name/value pair");  }  this.name=nameValue.substring(0,equals);  this.value=nameValue.substring(equals + 1);  this.path="/";  this.domain=uri.getHost();  for (int i=1; i < attributes.length; i++) {    nameValue=attributes[i].trim();    equals=nameValue.indexOf('=');    if (equals == -1) {      continue;    }    String name=nameValue.substring(0,equals);    String value=nameValue.substring(equals + 1);    if (name.equalsIgnoreCase("domain")) {      if (uri.getPort() > 0) {        int colon=value.lastIndexOf(':');        if (colon > 0) {          value=value.substring(0,colon);        }      }      String uriDomain=uri.getHost();      if (uriDomain.equals(value)) {        this.domain=value;      } else {        if (!matchDomain(uriDomain,value)) {          throw new IllegalArgumentException("Trying to set foreign cookie");        }      }      this.domain=value;    } else     if (name.equalsIgnoreCase("path")) {      this.path=value;    } else     if (name.equalsIgnoreCase("expires")) {      try {        this.expires=new SimpleDateFormat("E, dd-MMM-yyyy k:m:s 'GMT'",Locale.US).parse(value);      } catch (      java.text.ParseException e) {        try {          this.expires=new SimpleDateFormat("E, dd MMM yyyy k:m:s 'GMT'",Locale.US).parse(value);        } catch (        java.text.ParseException e2) {          throw new IllegalArgumentException("Bad date format in header: " + value);        }      }    }  }}  }
class C{  public void onGetDescriptor(String address,int srvcType,int srvcInstId,ParcelUuid srvcUuid,int charInstId,ParcelUuid charUuid,ParcelUuid descUuid){  if (DBG)   Log.d(TAG,"onGetDescriptor() - Device=" + address + " UUID="+ descUuid);  if (!address.equals(mDevice.getAddress())) {    return;  }  BluetoothGattService service=getService(mDevice,srvcUuid.getUuid(),srvcInstId,srvcType);  if (service == null)   return;  BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid.getUuid());  if (characteristic == null)   return;  characteristic.addDescriptor(new BluetoothGattDescriptor(characteristic,descUuid.getUuid(),0));}  }
class C{  public void hide(){  Component component=getComponent();  if (component instanceof JWindow) {    component.hide();    ((JWindow)component).getContentPane().removeAll();  }  dispose();}  }
class C{  @Override public synchronized void write(byte b[]) throws IOException {  String s=new String(b);  appendMessage(s);  flushTextArea();}  }
class C{  public static char highSurrogate(int c){  return (char)(((c - 0x00010000) >> 10) + 0xD800);}  }
class C{  public CSVReaderBuilder(final Reader reader){  if (reader == null) {    throw new IllegalArgumentException("Reader may not be null");  }  this.reader=reader;}  }
class C{  public static String delete(String str,String[] set){  if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {    return str;  }  return modify(str,set,false);}  }
class C{  @Override public void writeBatch() throws IOException {  if (getInstances() == null) {    throw new IOException("No instances to save");  }  if (getRetrieval() == INCREMENTAL) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  setRetrieval(BATCH);  setWriteMode(WRITE);  if (retrieveFile() == null && getWriter() == null) {    if (!getNoHeaderRow()) {      for (int i=0; i < getInstances().numAttributes(); i++) {        System.out.print(getInstances().attribute(i).name());        if (i < getInstances().numAttributes() - 1) {          System.out.print(m_FieldSeparator);        } else {          System.out.println();        }      }    }    for (int i=0; i < getInstances().numInstances(); i++) {      System.out.println(instanceToString(getInstances().instance(i)));    }    setWriteMode(WAIT);    return;  }  PrintWriter outW=new PrintWriter(getWriter());  if (!getNoHeaderRow()) {    for (int i=0; i < getInstances().numAttributes(); i++) {      outW.print(Utils.quote(getInstances().attribute(i).name()));      if (i < getInstances().numAttributes() - 1) {        outW.print(m_FieldSeparator);      } else {        outW.println();      }    }  }  for (int i=0; i < getInstances().numInstances(); i++) {    outW.println(instanceToString((getInstances().instance(i))));  }  outW.flush();  outW.close();  setWriteMode(WAIT);  outW=null;  resetWriter();  setWriteMode(CANCEL);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.177 -0500",hash_original_method="3EF74B5B3A471F2849137326FEF0ADD2",hash_generated_method="5716256425AE587F4F61E2781BD91808") static public Allocation createFromBitmap(RenderScript rs,Bitmap b,MipmapControl mips,int usage){  rs.validate();  Type t=typeFromBitmap(rs,b,mips);  int id=rs.nAllocationCreateFromBitmap(t.getID(),mips.mID,b,usage);  if (id == 0) {    throw new RSRuntimeException("Load failed.");  }  return new Allocation(id,rs,t,usage);}  }
class C{  public void testColocatedQueryWrong(){  IgniteCache<AffinityUuid,Purchase> c=ignite(0).cache(null);  Random rnd=new GridRandom(SEED);  for (int i=0; i < PURCHASES; i++) {    Purchase p=new Purchase();    p.productId=rnd.nextInt(PRODUCTS);    p.price=rnd.nextInt(MAX_PRICE);    c.put(new AffinityUuid(rnd.nextInt(PRODUCTS)),p);  }  List<List<?>> res1=query(c,false);  List<List<?>> res2=query(c,true);  X.println("res1: " + res1);  X.println("res2: " + res2);  assertFalse(res1.isEmpty());  assertFalse(res1.equals(res2));}  }
class C{  public void beforePrimaryIdentificationFromBackup(){}  }
class C{  private static Object parse(XMLTokener x,boolean arrayForm,JSONArray ja) throws JSONException {  String attribute;  char c;  String closeTag=null;  int i;  JSONArray newja=null;  JSONObject newjo=null;  Object token;  String tagName=null;  while (true) {    if (!x.more()) {      throw x.syntaxError("Bad XML");    }    token=x.nextContent();    if (token == XML.LT) {      token=x.nextToken();      if (token instanceof Character) {        if (token == XML.SLASH) {          token=x.nextToken();          if (!(token instanceof String)) {            throw new JSONException("Expected a closing name instead of '" + token + "'.");          }          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped close tag");          }          return token;        } else         if (token == XML.BANG) {          c=x.next();          if (c == '-') {            if (x.next() == '-') {              x.skipPast("-->");            } else {              x.back();            }          } else           if (c == '[') {            token=x.nextToken();            if (token.equals("CDATA") && x.next() == '[') {              if (ja != null) {                ja.put(x.nextCDATA());              }            } else {              throw x.syntaxError("Expected 'CDATA['");            }          } else {            i=1;            do {              token=x.nextMeta();              if (token == null) {                throw x.syntaxError("Missing '>' after '<!'.");              } else               if (token == XML.LT) {                i+=1;              } else               if (token == XML.GT) {                i-=1;              }            } while (i > 0);          }        } else         if (token == XML.QUEST) {          x.skipPast("?>");        } else {          throw x.syntaxError("Misshaped tag");        }      } else {        if (!(token instanceof String)) {          throw x.syntaxError("Bad tagName '" + token + "'.");        }        tagName=(String)token;        newja=new JSONArray();        newjo=new JSONObject();        if (arrayForm) {          newja.put(tagName);          if (ja != null) {            ja.put(newja);          }        } else {          newjo.put("tagName",tagName);          if (ja != null) {            ja.put(newjo);          }        }        token=null;        for (; ; ) {          if (token == null) {            token=x.nextToken();          }          if (token == null) {            throw x.syntaxError("Misshaped tag");          }          if (!(token instanceof String)) {            break;          }          attribute=(String)token;          if (!arrayForm && ("tagName".equals(attribute) || "childNode".equals(attribute))) {            throw x.syntaxError("Reserved attribute.");          }          token=x.nextToken();          if (token == XML.EQ) {            token=x.nextToken();            if (!(token instanceof String)) {              throw x.syntaxError("Missing value");            }            newjo.accumulate(attribute,XML.stringToValue((String)token));            token=null;          } else {            newjo.accumulate(attribute,"");          }        }        if (arrayForm && newjo.length() > 0) {          newja.put(newjo);        }        if (token == XML.SLASH) {          if (x.nextToken() != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          if (ja == null) {            if (arrayForm) {              return newja;            } else {              return newjo;            }          }        } else {          if (token != XML.GT) {            throw x.syntaxError("Misshaped tag");          }          closeTag=(String)parse(x,arrayForm,newja);          if (closeTag != null) {            if (!closeTag.equals(tagName)) {              throw x.syntaxError("Mismatched '" + tagName + "' and '"+ closeTag+ "'");            }            tagName=null;            if (!arrayForm && newja.length() > 0) {              newjo.put("childNodes",newja);            }            if (ja == null) {              if (arrayForm) {                return newja;              } else {                return newjo;              }            }          }        }      }    } else {      if (ja != null) {        ja.put(token instanceof String ? XML.stringToValue((String)token) : token);      }    }  }}  }
class C{  public void stop(){}  }
class C{  private static List<Unit> findPlaneAttackersThatCanLand(final Territory start,final int maxDistance,final PlayerID player,final GameData data,final List<Territory> ignore,final List<Territory> checked){  if (checked.isEmpty()) {    return new ArrayList<>();  }  final IntegerMap<Territory> distance=new IntegerMap<>();  final IntegerMap<Unit> unitDistance=new IntegerMap<>();  final List<Unit> units=new ArrayList<>();  final Queue<Territory> q=new LinkedList<>();  Territory lz=null, ac=null;  final CompositeMatch<Unit> enemyPlane=new CompositeMatchAnd<>(Matches.UnitIsAir,Matches.unitIsOwnedBy(player),Matches.UnitCanMove);  final CompositeMatch<Unit> enemyCarrier=new CompositeMatchAnd<>(Matches.UnitIsCarrier,Matches.unitIsOwnedBy(player),Matches.UnitCanMove);  q.add(start);  Territory current=null;  distance.put(start,0);  while (!q.isEmpty()) {    current=q.remove();    if (distance.getInt(current) == maxDistance) {      break;    }    for (    final Territory neighbor : data.getMap().getNeighbors(current,TerritoryIsNotImpassableToAirUnits(data))) {      if (!distance.keySet().contains(neighbor)) {        q.add(neighbor);        distance.put(neighbor,distance.getInt(current) + 1);        if (lz == null && Matches.isTerritoryAllied(player,data).match(neighbor) && !neighbor.isWater()) {          lz=neighbor;        }        if ((ignore != null && ignore.contains(neighbor)) || (checked != null && checked.contains(neighbor))) {          for (          final Unit u : neighbor.getUnits()) {            if (ac == null && enemyCarrier.match(u)) {              ac=neighbor;            }          }        } else {          for (          final Unit u : neighbor.getUnits()) {            if (ac == null && enemyCarrier.match(u)) {              ac=neighbor;            }            if (enemyPlane.match(u)) {              unitDistance.put(u,distance.getInt(neighbor));            }          }        }      }    }  }  for (  final Unit u : unitDistance.keySet()) {    if (lz != null && Matches.UnitHasEnoughMovementForRoute(checked).match(u)) {      units.add(u);    } else     if (ac != null && Matches.UnitCanLandOnCarrier.match(u) && Matches.UnitHasEnoughMovementForRoute(checked).match(u)) {      units.add(u);    }  }  return units;}  }
class C{  protected Tasks<T> postTasks(Object request,String path,Object... args){  TaskList tasks=client.post(TaskList.class,request,path,args);  return new Tasks<T>(client,tasks.getTaskList(),resourceClass);}  }
class C{  public int findLastVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public static java.util.concurrent.ThreadPoolExecutor newSingleThreadExecutor(ThreadFactory factory){  ThreadPoolExecutor tpe=new ThreadPoolExecutor(1,1,5L,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),factory);  tpe.allowCoreThreadTimeOut(true);  return tpe;}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  @Override public void close(){  try {    channel.disconnect();  }  finally {    try {      session.disconnect();    }  finally {      super.close();    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void openLogFile(String logPath){  if (logPath == null) {    printStream=System.out;  } else {    try {      printStream=new PrintStream(new File(logPath));    } catch (    FileNotFoundException e) {      throw new IllegalArgumentException("Log file " + logPath + " was not found",e);    }  }}  }
class C{  public static void convoluteLines(Image outputImg,Image inputImg,Filter filter,int method){  for (int i=0; i < inputImg.getHeight(); i++) {switch (method) {case Filter.METHOD_CUTOFF:      filterCutOff(inputImg,inputImg.getWidth() * i,inputImg.getWidth(),1,outputImg,outputImg.getWidth() * i,outputImg.getWidth(),1,filter);    break;case Filter.METHOD_INVCUTOFF:  filterInvCutOff(inputImg,inputImg.getWidth() * i,inputImg.getWidth(),1,outputImg,outputImg.getWidth() * i,outputImg.getWidth(),1,filter);break;case Filter.METHOD_PERIODICAL:filterPeriodical(inputImg,inputImg.getWidth() * i,inputImg.getWidth(),1,outputImg,outputImg.getWidth() * i,outputImg.getWidth(),1,filter);break;case Filter.METHOD_INVPERIODICAL:filterInvPeriodical(inputImg,inputImg.getWidth() * i,inputImg.getWidth(),1,outputImg,outputImg.getWidth() * i,outputImg.getWidth(),1,filter);break;case Filter.METHOD_MIRROR:filterMirror(inputImg,inputImg.getWidth() * i,inputImg.getWidth(),1,outputImg,outputImg.getWidth() * i,outputImg.getWidth(),1,filter);break;case Filter.METHOD_INVMIRROR:filterInvMirror(inputImg,inputImg.getWidth() * i,inputImg.getWidth(),1,outputImg,outputImg.getWidth() * i,outputImg.getWidth(),1,filter);break;}}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void rankResponses(MRfQ rfq,MRfQResponse[] responses){  int ranking=1;  for (int ii=0; ii < responses.length; ii++) {    MRfQResponse response=responses[ii];    if (response.getPrice() != null && response.getPrice().compareTo(Env.ZERO) > 0) {      if (response.isSelectedWinner() != (ranking == 1))       response.setIsSelectedWinner(ranking == 1);      response.setRanking(ranking);      ranking++;    } else {      response.setRanking(999);      if (response.isSelectedWinner())       response.setIsSelectedWinner(false);    }    response.saveEx();    log.fine("rankResponse - " + response);  }}  }
class C{  public X509Principal(boolean reverse,Hashtable lookUp,String dirName){  super(reverse,lookUp,dirName);}  }
class C{  private double computeReferenceAngle(){  double r1=((SandboxBody)this.cmbBody1.getSelectedItem()).getTransform().getRotation();  double r2=((SandboxBody)this.cmbBody2.getSelectedItem()).getTransform().getRotation();  return r1 - r2;}  }
class C{  void calculateValue(float fraction){  mAnimatedValue=mKeyframeSet.getValue(fraction);}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  public static void transformBooleanReturnValue(){  transformedBooleanReturn++;}  }
class C{  public void sendSerialMessage(SerialMessage m,SerialListener reply){  sendMessage(m,reply);}  }
class C{  static public U64 makeCookie(int application,int user){  if (!appIdMap.containsKey(application)) {    throw new AppIDNotRegisteredException(application);  }  long longApp=application;  long longUser=user & USER_MASK;  return U64.of((longApp << APP_ID_SHIFT) | longUser);}  }
class C{  public String sqlObjectDetail_dropColumnNullable(String vendorName,String catalogName,String schemaName,String tableName,String columnName){  columnName=normalizeColumnName(vendorName,columnName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_dropColumnNullable(catalogName,schemaName,tableName,columnName);}  }
class C{  public static boolean isOpen(Properties ctx,Timestamp DateAcct,String DocBaseType){  return isOpen(ctx,DateAcct,DocBaseType,0);}  }
class C{  public long write(final byte[] bits,final long offset,final long len) throws IOException {  final int initial=(int)(8 - (offset & 0x7));  if (initial == 8)   return writeByteOffset(bits,(int)offset / 8,len);  if (len <= initial)   return writeInt((0xFF & bits[(int)(offset / 8)]) >>> (initial - len),(int)len);  return writeInt(bits[(int)(offset / 8)],initial) + writeByteOffset(bits,(int)(offset / 8 + 1),len - initial);}  }
class C{  public void open() throws IOException {  if (cache == null) {    isCloseCache=true;    cache=new SolrClientCache();  } else {    isCloseCache=false;  }  this.cloudSolrClient=this.cache.getCloudSolrClient(zkHost);  this.executorService=ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory("FeaturesSelectionStream"));}  }
class C{  public static MessageRange all(){  return new MessageRange(Type.ALL,MessageUid.MIN_VALUE,MessageUid.MAX_VALUE);}  }
class C{  public NetworkStats fetchDataFromProc(int uid){  String root_filepath="/proc/uid_stat/" + uid + "/";  File rcv_stat=new File(root_filepath + "tcp_rcv");  int rx=BandwidthTestUtil.parseIntValueFromFile(rcv_stat);  File snd_stat=new File(root_filepath + "tcp_snd");  int tx=BandwidthTestUtil.parseIntValueFromFile(snd_stat);  NetworkStats stats=new NetworkStats(SystemClock.elapsedRealtime(),1);  stats.addValues(NetworkStats.IFACE_ALL,uid,NetworkStats.SET_DEFAULT,NetworkStats.TAG_NONE,rx,0,tx,0,0);  return stats;}  }
class C{  public void add(final FieldDescriptor type){  if (type.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {    throw new IllegalArgumentException("ExtensionRegistry.add() must be provided a default instance when " + "adding an embedded message extension.");  }  add(new ExtensionInfo(type,null));}  }
class C{  public boolean isConsistent(){  return mapping == null ? true : mapping.size() == values.length;}  }
class C{  public TLCChainedPreferenceStore(IPreferenceStore[] preferenceStores){  Assert.isTrue(preferenceStores != null && preferenceStores.length > 0);  fPreferenceStores=new IPreferenceStore[preferenceStores.length];  System.arraycopy(preferenceStores,0,fPreferenceStores,0,preferenceStores.length);  for (int i=0, length=fPreferenceStores.length; i < length; i++) {    PropertyChangeListener listener=new PropertyChangeListener(fPreferenceStores[i]);    fChildListeners.add(listener);  }}  }
class C{  private double drawLabel(Graphics2D graphics,String text,Font font,double x,double baseY,double maxWidth){  FontMetrics fontMetrics=graphics.getFontMetrics(font);  Rectangle2D label=fontMetrics.getStringBounds(text,graphics);  double offset=label.getWidth() / 2.0d;  double y=baseY + label.getHeight();  if (offset > (maxWidth / 2.0d)) {    label.setRect(x - (maxWidth / 2.0d),y - label.getHeight(),maxWidth,label.getHeight());    graphics.setClip(label);    graphics.drawString(text,(float)(x - (maxWidth / 2.0d)),(float)y);    graphics.setClip(null);  } else {    graphics.drawString(text,(float)(x - offset),(float)y);  }  return label.getHeight();}  }
class C{  public CompanyObject(){  super();}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  public static int pxToDp(int px,Context context){  float density=context.getResources().getDisplayMetrics().density;  int dp=Math.round(px / density);  return dp;}  }
class C{  private void correctTooLow(int childCount){  if (mFirstPosition == 0 && childCount > 0) {    final int firstTop=getScrollChildTop();    final int start=mListPadding.top;    final int end=(getBottom() - getTop()) - mListPadding.bottom;    int topOffset=firstTop - start;    final int lastBottom=getScrollChildBottom();    int lastPosition=mFirstPosition + childCount - 1;    if (topOffset > 0) {      if (lastPosition < mItemCount - 1 || lastBottom > end) {        if (lastPosition == mItemCount - 1) {          topOffset=Math.min(topOffset,lastBottom - end);        }        tryOffsetChildrenTopAndBottom(-topOffset);        if (lastPosition < mItemCount - 1) {          fillDown(lastPosition + 1,getFillChildBottom() + mDividerHeight);          adjustViewsUpOrDown();        }      } else       if (lastPosition == mItemCount - 1) {        adjustViewsUpOrDown();      }    }  }}  }
class C{  public HessianOutput(OutputStream os){  init(os);}  }
class C{  @Override protected void assertSame(String regexp) throws IOException {  RegexpQuery fieldCache=new RegexpQuery(new Term(fieldName,regexp),RegExp.NONE);  fieldCache.setRewriteMethod(new DocValuesRewriteMethod());  RegexpQuery filter=new RegexpQuery(new Term(fieldName,regexp),RegExp.NONE);  filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);  TopDocs fieldCacheDocs=searcher1.search(fieldCache,25);  TopDocs filterDocs=searcher2.search(filter,25);  CheckHits.checkEqual(fieldCache,fieldCacheDocs.scoreDocs,filterDocs.scoreDocs);}  }
class C{  @Unpreemptible final boolean enqueue(Reference<? extends T> ref){  lock.lockWithHandshake();  boolean result=enqueueInternal(ref);  lock.unlock();  return result;}  }
class C{  public Iterator<String> iterator(){  return mMap.values().iterator();}  }
class C{  private Element createSignatureAndSignAssertion(Assertion assertion,SignatureAlgorithm signatureAlgorithm,SignInfo signInfo){  assert assertion != null;  assert signatureAlgorithm != null;  XMLSignatureFactory factory=XMLSignatureFactory.getInstance();  Element assertionElement=marshallAssertion(assertion);  List<Transform> transforms=createTransforms();  Reference ref=createReference(transforms,assertionElement.getAttribute(Assertion.ID_ATTRIB_NAME),signatureAlgorithm.getDigestMethod().toString());  SignedInfo signedInfo=createSignedInfo(Collections.singletonList(ref),signatureAlgorithm);  DOMSignContext signingContext=new DOMSignContext(signInfo.getPrivateKey(),assertionElement);  signingContext.putNamespacePrefix(SignatureConstants.TRANSFORM_C14N_EXCL_OMIT_COMMENTS,"ec");  signingContext.putNamespacePrefix(XMLSignature.XMLNS,"ds");  Node subjectNode=assertionElement.getChildNodes().item(1);  signingContext.setNextSibling(subjectNode);  log.debug("Set SigningContext into assertion (after Issuer or as a first child in the assertion DOM).");  final KeyInfo keyInfo=createKeyInfo(signInfo);  XMLSignature xmlSignature=factory.newXMLSignature(signedInfo,keyInfo);  try {    final long start=System.nanoTime();    xmlSignature.sign(signingContext);    perfLog.trace("'signature.sign' took {} ms.",TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));  } catch (  MarshalException e) {    throw new IllegalStateException(e);  }catch (  XMLSignatureException e) {    throw new IllegalStateException(e);  }  log.debug("Created Signature and sign it.");  return assertionElement;}  }
class C{  private @NonNull ScriptableObject initJsScope(){  final Context jsContext=JsRuntimeRepl.enterJsContext();  try {    ScriptableObject scope=initJsScope(jsContext);    return scope;  }  finally {    Context.exit();  }}  }
class C{  static Map<TypeParameter,Type> createTypeArguments(final Tree.StaticMemberOrTypeExpression expr){  List<TypeParameter> tparams=null;  Declaration declaration=expr.getDeclaration();  if (declaration instanceof Generic) {    tparams=((Generic)declaration).getTypeParameters();  } else   if (declaration instanceof TypedDeclaration && ((TypedDeclaration)declaration).getType() != null && ((TypedDeclaration)declaration).getType().isTypeConstructor()) {    tparams=((TypedDeclaration)declaration).getType().getDeclaration().getTypeParameters();  } else {    expr.addUnexpectedError("Getting type parameters from unidentified declaration type " + declaration,Backend.JavaScript);    return null;  }  final HashMap<TypeParameter,Type> targs=new HashMap<>();  TypeArguments typeArguments=expr.getTypeArguments();  if (typeArguments != null) {    List<Type> typeModels=typeArguments.getTypeModels();    if (typeModels != null) {      final Iterator<Type> iter=typeModels.iterator();      for (      TypeParameter tp : tparams) {        Type pt=iter.hasNext() ? iter.next() : tp.getDefaultTypeArgument();        targs.put(tp,pt);      }    }  }  return targs;}  }
class C{  public DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException {  BitMatrix matrix=image.getBlackMatrix();  boolean tryHarder=hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);  ResultPoint[] vertices=findVertices(matrix,tryHarder);  if (vertices == null) {    vertices=findVertices180(matrix,tryHarder);    if (vertices != null) {      correctCodeWordVertices(vertices,true);    }  } else {    correctCodeWordVertices(vertices,false);  }  if (vertices == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleWidth=computeModuleWidth(vertices);  if (moduleWidth < 1.0f) {    throw NotFoundException.getNotFoundInstance();  }  int dimension=computeDimension(vertices[4],vertices[6],vertices[5],vertices[7],moduleWidth);  if (dimension < 1) {    throw NotFoundException.getNotFoundInstance();  }  int ydimension=computeYDimension(vertices[4],vertices[6],vertices[5],vertices[7],moduleWidth);  ydimension=ydimension > dimension ? ydimension : dimension;  BitMatrix bits=sampleGrid(matrix,vertices[4],vertices[5],vertices[6],vertices[7],dimension,ydimension);  return new DetectorResult(bits,new ResultPoint[]{vertices[5],vertices[4],vertices[6],vertices[7]});}  }
class C{  public boolean canExecuteMore(){  return currentSchedule.canExecuteMore();}  }
class C{  public void doGetFetchMedia(HttpServletRequest request,HttpServletResponse response,String type,String location,String item,boolean asThumb) throws ServletException, IOException {  if (item == null) {    response.sendError(HttpServletResponse.SC_NOT_FOUND,"No id");    return;  }  try {    Uri uri=MediaType.getContentUriByType(type,location);    Uri content=Uri.withAppendedPath(uri,item);    if (asThumb) {      Cursor c=null;      try {        c=MediaStore.Images.Thumbnails.queryMiniThumbnail(resolver,Long.parseLong(item),MediaStore.Images.Thumbnails.MINI_KIND,null);        if (c != null && c.moveToFirst()) {          int i=c.getColumnIndex(MediaStore.Images.Thumbnails.DATA);          String s=c.getString(i);          if (s != null) {            File f=new File(s);            FileInputStream fis=new FileInputStream(f);            response.setStatus(HttpServletResponse.SC_OK);            OutputStream os=response.getOutputStream();            if (resolver.getType(content) == "image/gif") {              response.setContentType("image/gif");            } else {              response.setContentType("image/png");            }            try {              IO.copy(fis,os);            }  finally {              fis.close();            }          } else           response.sendError(HttpServletResponse.SC_NO_CONTENT);        }      }  finally {        if (c != null)         c.close();      }    } else {      Log.i(TAG,"Exporting original media");      long size=-1;      Cursor c=null;      try {        c=resolver.query(content,new String[]{MediaStore.MediaColumns.SIZE},null,null,null);        if (c != null && c.moveToFirst())         size=c.getLong(c.getColumnIndexOrThrow(MediaStore.MediaColumns.SIZE));      }  finally {        if (c != null)         c.close();      }      InputStream stream=null;      try {        response.setContentType(resolver.getType(content));        response.setHeader("connection","close");        if (size > -1)         response.setContentLength((int)size);        stream=resolver.openInputStream(content);        OutputStream os=response.getOutputStream();        response.setStatus(HttpServletResponse.SC_OK);        IO.copy(stream,os);      }  finally {        if (stream != null)         stream.close();      }    }  } catch (  Exception e) {    Log.i(TAG,"Failed to fetch media " + e.getMessage());    response.setStatus(HttpServletResponse.SC_NOT_FOUND);  }}  }
class C{  public String executeRun(){  Timestamp dateDoc=getDateNextRun();  if (!calculateRuns())   throw new IllegalStateException("No Runs Left");  MRecurringRun run=new MRecurringRun(getCtx(),this);  String msg="@Created@ ";  if (getRecurringType().equals(MRecurring.RECURRINGTYPE_Order)) {    MOrder from=new MOrder(getCtx(),getC_Order_ID(),get_TrxName());    MOrder order=MOrder.copyFrom(from,dateDoc,from.getC_DocType_ID(),from.isSOTrx(),false,false,get_TrxName());    run.setC_Order_ID(order.getC_Order_ID());    msg+=order.getDocumentNo();  } else   if (getRecurringType().equals(MRecurring.RECURRINGTYPE_Invoice)) {    MInvoice from=new MInvoice(getCtx(),getC_Invoice_ID(),get_TrxName());    MInvoice invoice=MInvoice.copyFrom(from,dateDoc,dateDoc,from.getC_DocType_ID(),from.isSOTrx(),false,get_TrxName(),false);    run.setC_Invoice_ID(invoice.getC_Invoice_ID());    msg+=invoice.getDocumentNo();  } else   if (getRecurringType().equals(MRecurring.RECURRINGTYPE_Project)) {    MProject project=MProject.copyFrom(getCtx(),getC_Project_ID(),dateDoc,get_TrxName());    run.setC_Project_ID(project.getC_Project_ID());    msg+=project.getValue();  } else   if (getRecurringType().equals(MRecurring.RECURRINGTYPE_GLJournal)) {    MJournalBatch journal=MJournalBatch.copyFrom(getCtx(),getGL_JournalBatch_ID(),dateDoc,get_TrxName());    run.setGL_JournalBatch_ID(journal.getGL_JournalBatch_ID());    msg+=journal.getDocumentNo();  } else   return "Invalid @RecurringType@ = " + getRecurringType();  run.save(get_TrxName());  setDateLastRun(run.getUpdated());  setRunsRemaining(getRunsRemaining() - 1);  setDateNextRun();  save(get_TrxName());  return msg;}  }
class C{  private static void removeUri(Map<String,RamlResource> resources,String urlPrefixToIgnore){  for (  RamlResource resource : resources.values()) {    resource.setParentUri(resource.getParentUri().replace(urlPrefixToIgnore,""));    resource.setRelativeUri(resource.getRelativeUri().replace(urlPrefixToIgnore,""));    removeUri(resource.getResources(),urlPrefixToIgnore);  }}  }
class C{  public LOSGenerator(TerrainLayer tLayer){  layer=tLayer;  init();}  }
class C{  public Boolean isRotation(){  return rotation;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_3__MORE_CODE_1:    getMoreCode_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public void writeGraphics(ObjectOutputStream objectstream) throws IOException {synchronized (graphics) {    for (Iterator<OMGraphic> it=iterator(); it.hasNext(); ) {      OMGraphic g=it.next();      try {        objectstream.writeObject(g);      } catch (      IOException e) {        Debug.error("OMGraphicList: Couldn't write object " + g + "\nOMGraphicList: Reason: "+ e.toString());      }    }  }  objectstream.close();}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  int start_old=start;  if (m_inEntityRef)   return;  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  } else   if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  try {    final int limit=start + length;    boolean wasDash=false;    if (m_cdataTagOpen)     closeCDATA();    if (shouldIndent())     indent();    final java.io.Writer writer=m_writer;    writer.write(COMMENT_BEGIN);    for (int i=start; i < limit; i++) {      if (wasDash && ch[i] == '-') {        writer.write(ch,start,i - start);        writer.write(" -");        start=i + 1;      }      wasDash=(ch[i] == '-');    }    if (length > 0) {      final int remainingChars=(limit - start);      if (remainingChars > 0)       writer.write(ch,start,remainingChars);      if (ch[limit - 1] == '-')       writer.write(' ');    }    writer.write(COMMENT_END);  } catch (  IOException e) {    throw new SAXException(e);  }  m_startNewLine=true;  if (m_tracer != null)   super.fireCommentEvent(ch,start_old,length);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.PRECONDITION___CONSTRAINT_1:    return ((InternalEList<?>)getConstraint_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void evolve(Subset s1,Subset s2){  int k=s1.getK();  Set<Integer> p1set=s1.getSet();  Set<Integer> p2set=s2.getSet();  for (int i=0; i < k; i++) {    if (!p1set.contains(s2.get(i)) && !p2set.contains(s1.get(i)) && PRNG.nextBoolean()) {      int temp=s1.get(i);      s1.set(i,s2.get(i));      s2.set(i,temp);    }  }}  }
class C{  private Object[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    Object[] newArray=new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  public Vector(){  this(DEFAULT_SIZE,0);}  }
class C{  public static <T>void link(Class<T> type,Supplier<? super T> supplier,String name,boolean isRestricted){  ScriptLibrary library=new ScriptLibrary(name,isRestricted,null);  Script.LIBS.put(name,library);}  }
class C{  private void parseLastConsonant(){  if (!validViSyll)   return;  if (iCurPos > strSyllable.length())   strLastConsonant=ZERO;  String strCon=strSyllable.substring(iCurPos,strSyllable.length());  if (strCon.length() > 3) {    validViSyll=false;    return;  }  Iterator iter=alLastConsonants.iterator();  while (iter.hasNext()) {    String tempLastCon=(String)iter.next();    if (strCon.equals(tempLastCon)) {      strLastConsonant=tempLastCon;      iCurPos+=strLastConsonant.length();      return;    }  }  strLastConsonant=ZERO;  if (iCurPos >= strSyllable.length())   validViSyll=true; else   validViSyll=false;  return;}  }
class C{  public SavePlotAsAction(final GuiComponent component){  super("Save As...");  if (component == null) {    throw new IllegalArgumentException("Desktop component must not be null");  }  this.component=component;}  }
class C{  protected Position computePickPosition(DrawContext dc,Vec4 locationSW,Dimension mapSize){  Position pickPosition=null;  this.pickedSample=-1;  Point pickPoint=dc.getPickPoint();  if (pickPoint != null && this.positions != null && !this.follow.equals(FOLLOW_CURSOR)) {    Rectangle viewport=dc.getView().getViewport();    if (pickPoint.getX() >= locationSW.getX() && pickPoint.getX() < locationSW.getX() + mapSize.width && viewport.height - pickPoint.getY() >= locationSW.getY() && viewport.height - pickPoint.getY() < locationSW.getY() + mapSize.height) {      int sample=(int)(((double)(pickPoint.getX() - locationSW.getX()) / mapSize.width) * this.samples);      if (sample >= 0 && sample < this.samples) {        pickPosition=this.positions[sample];        this.pickedSample=sample;        ArrayList<Position> posList=new ArrayList<Position>();        posList.add(positions[sample]);        posList.add(new Position(positions[sample].getLatitude(),positions[sample].getLongitude(),positions[sample].getElevation() + this.length / 10));        if (this.pickedShape == null) {          this.pickedShape=new Polyline(posList);          this.pickedShape.setPathType(Polyline.LINEAR);          this.pickedShape.setLineWidth(2);          this.pickedShape.setColor(new Color(this.color.getRed(),this.color.getGreen(),(int)(this.color.getBlue() * .8),(int)(255 * .8)));        } else         this.pickedShape.setPositions(posList);      }    }  }  return pickPosition;}  }
class C{  public void addRowSet(RowSet rowset,int columnIdx) throws SQLException {  ((CachedRowSetImpl)rowset).setMatchColumn(columnIdx);  addRowSet((Joinable)rowset);}  }
class C{  public DataTypeAttributes clone(){  DataTypeAttributes result=new DataTypeAttributes();  result.SpecifiedAttributes=SpecifiedAttributes;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  result.IsAbstract=IsAbstract;  return result;}  }
class C{  public CardNotPresentException(Throwable cause){  super(cause);}  }
class C{  private void printLIR(AbstractBlockBase<?> block){  if (lir == null) {    return;  }  List<LIRInstruction> lirInstructions=lir.getLIRforBlock(block);  if (lirInstructions == null) {    return;  }  begin("IR");  out.println("LIR");  for (int i=0; i < lirInstructions.size(); i++) {    LIRInstruction inst=lirInstructions.get(i);    printLIRInstruction(inst);  }  end("IR");}  }
class C{  public void reset(final EvolutionState state){  if (!(state instanceof EvolutionAgent))   state.output.fatal("DRMStatistics requires an  EvolutionAgent, reset failed",null,null);  EvolutionAgent agent=(EvolutionAgent)state;  if (agent.iamroot) {    logtable=new Hashtable();  } else   defaultlog=-2;}  }
class C{  public boolean isEmpty(){  if (size() == 0) {    return true;  }  return false;}  }
class C{  public void testResettingOptions() throws Exception {  if (m_OptionTester.getOptionHandler() != null) {    if (!m_OptionTester.checkSetOptions()) {      fail(getClassname() + ": " + "Resetting of options failed");    }  }}  }
class C{  public synchronized boolean hasConfidence(){  return confidence != null && confidence.getConfidenceType() != TransactionConfidence.ConfidenceType.UNKNOWN;}  }
class C{  public boolean isPanEnabled(){  return isPanXEnabled() || isPanYEnabled();}  }
class C{  private void writeSequenceRegionPart(final NucleotideSequence nucleotideSequence) throws IOException {  for (  OpenReadingFrame orf : nucleotideSequence.getOpenReadingFrames()) {    Protein protein=orf.getProtein();    int sequenceLength=protein.getSequenceLength();    String md5=protein.getMd5();    String date=dmyFormat.format(new Date());    Set<Match> matches=protein.getMatches();    List<String> proteinIdsFromGetOrf=getProteinAccessions(protein);    for (    String proteinIdFromGetorf : proteinIdsFromGetOrf) {      proteinIdFromGetorf=getValidGFF3SeqId(proteinIdFromGetorf);      if (matches.size() > 0) {        final StringBuilder concatenatedNucSeqIdentifiers=new StringBuilder();        for (        final NucleotideSequenceXref nucleotideSequenceXref : nucleotideSequence.getCrossReferences()) {          String nucleotideSequenceXrefId=nucleotideSequenceXref.getIdentifier();          for (          ProteinXref proteinXref : protein.getCrossReferences()) {            String strippedProteinId=XrefParser.stripOfFinalUnderScore(proteinXref.getIdentifier());            strippedProteinId=XrefParser.stripOfVersionNumberIfExists(strippedProteinId);            if ((nucleotideSequenceXrefId.equals(strippedProteinId))) {              if (concatenatedNucSeqIdentifiers.length() > 0) {                concatenatedNucSeqIdentifiers.append(VALUE_SEPARATOR);              }              concatenatedNucSeqIdentifiers.append(nucleotideSequenceXrefId);            }          }        }        String concatenatedNucSeqIdentifiersStr=concatenatedNucSeqIdentifiers.toString();        if (concatenatedNucSeqIdentifiersStr.length() > 0) {          setNucleotideId(concatenatedNucSeqIdentifiersStr);          super.gffWriter.write("##sequence-region " + concatenatedNucSeqIdentifiersStr + " 1 "+ nucleotideSequence.getSequence().length());          super.gffWriter.write(getNucleicAcidLine(nucleotideSequence));          String proteinIdForGFF=buildProteinIdentifier(orf);          proteinIdForGFF=getValidGFF3SeqId(proteinIdForGFF);          addFASTASeqToMap(proteinIdForGFF,protein.getSequence());          super.gffWriter.write(getORFLine(orf,proteinIdFromGetorf,proteinIdForGFF,sequenceLength));          super.gffWriter.write(getPolypeptideLine(sequenceLength,proteinIdForGFF,md5));          processMatches(protein.getMatches(),proteinIdForGFF,date,protein,getNucleotideId());        } else {          throw new IllegalStateException("Cannot find the ORF object that maps to protein with PK / MD5: " + protein.getId() + " / "+ protein.getMd5());        }      }    }  }}  }
class C{  public DERExternal(ASN1ObjectIdentifier directReference,ASN1Integer indirectReference,ASN1Primitive dataValueDescriptor,int encoding,ASN1Primitive externalData){  setDirectReference(directReference);  setIndirectReference(indirectReference);  setDataValueDescriptor(dataValueDescriptor);  setEncoding(encoding);  setExternalContent(externalData.toASN1Primitive());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public MovieSet(){  super();}  }
class C{  @Override public void nodeDown(Topology topology,long eventUID,String nodeID){  if (targetServerID.equals(nodeID)) {    decideOnAction(topology);  }}  }
class C{  protected static boolean deleteDir(File dir){  if (dir.isDirectory()) {    String[] children=dir.list();    for (int i=0; i < children.length; i++) {      boolean success=deleteDir(new File(dir,children[i]));      if (!success) {        return false;      }    }  }  return dir.delete();}  }
class C{  private float computeAcceleratingDuration(float targetProgress,float frameTimeSec){  if (targetProgress == 1.0f) {    return frameTimeSec;  } else {    float maxAcceleratingDuration=CONSTANT_1 * mVelocity + (float)Math.sqrt(CONSTANT_2 * (targetProgress - mProgress) + CONSTANT_3 * mVelocity * mVelocity);    return Math.max(0,Math.min(frameTimeSec,maxAcceleratingDuration));  }}  }
class C{  public MFRecord(Name name,int dclass,long ttl,Name mailAgent){  super(name,Type.MF,dclass,ttl,mailAgent,"mail agent");}  }
class C{  public static void checkNeedForAssignedCast(BlockScope scope,TypeBinding expectedType,CastExpression rhs){  if (scope.compilerOptions().getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) {    return;  }  TypeBinding castedExpressionType=rhs.expression.resolvedType;  if (castedExpressionType == null || rhs.resolvedType.isBaseType()) {    return;  }  if (castedExpressionType.isCompatibleWith(expectedType)) {    scope.problemReporter().unnecessaryCast(rhs);  }}  }
class C{  public SymbolAtom(String name,int type,boolean del){  this.name=name;  this.type=type;  if (type == TeXConstants.TYPE_BIG_OPERATOR)   this.type_limits=TeXConstants.SCRIPT_NORMAL;  delimiter=del;}  }
class C{  public static boolean hasErrorsInProblemsView(SWTWorkbenchBot bot){  bot.menu("Window").menu("Show View").menu("Problems").click();  SWTBotView view=bot.viewByTitle("Problems");  view.show();  SWTBotTree tree=view.bot().tree();  for (  SWTBotTreeItem item : tree.getAllItems()) {    String text=item.getText();    if (text != null && text.startsWith("Errors")) {      return true;    }  }  return false;}  }
class C{  public boolean processHarbormaster(){  final boolean harbormasterSuccess=buildResult.isBetterOrEqualTo(Result.SUCCESS);  if (runHarbormaster) {    logger.info("harbormaster","Sending Harbormaster BUILD_URL via PHID: " + phid);    Task.Result sendUriResult=new SendHarbormasterUriTask(logger,diffClient,phid,buildUrl).run();    if (sendUriResult != Task.Result.SUCCESS) {      logger.info(LOGGING_TAG,"Unable to send BUILD_URL to Harbormaster. " + "This can be safely ignored, and is usually because it's already set.");    }    if (unitResults != null) {      logger.info(LOGGING_TAG,String.format("Publishing unit results to Harbormaster for %d tests.",unitResults.getResults().size()));    }    if (harbormasterCoverage != null) {      logger.info(LOGGING_TAG,String.format("Publishing coverage data to Harbormaster for %d files.",harbormasterCoverage.size()));    }    if (lintResults != null) {      logger.info(LOGGING_TAG,String.format("Publishing lint results for %d violations",lintResults.getResults().size()));    }    logger.info(LOGGING_TAG,String.format("Sending build result to Harbormaster with PHID %s, success: %s",phid,harbormasterSuccess));    Task.Result result=new SendHarbormasterResultTask(logger,diffClient,phid,harbormasterSuccess,unitResults,harbormasterCoverage,lintResults).run();    if (result != Task.Result.SUCCESS) {      return false;    }  } else {    logger.info("uberalls","Harbormaster integration not enabled for this build.");    if (buildResult.isBetterOrEqualTo(Result.SUCCESS)) {      commentAction="resign";    } else     if (buildResult.isWorseOrEqualTo(Result.UNSTABLE)) {      commentAction="reject";    }  }  return true;}  }
class C{  public boolean equalsContents(Object o){  if (this == o) {    return true;  }  if (o == null) {    return false;  }  if (o.getClass() != getClass()) {    return false;  }  Struct obj=(Struct)o;  if (!typeName.equals(obj.getTypeName())) {    return false;  }  if (!values.equals(obj.getValuesMap())) {    return false;  }  return true;}  }
class C{  public BasicImageRecyclerAdapter(JsonArray jsonArray,Context ctx){  jarr=jsonArray;  c=ctx.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,null,null,null,null);}  }
class C{  public void putPtr(long val) throws ArrayIndexOutOfBoundsException {  put(val,getSizeofPtr());}  }
class C{  public void addAttribute(Attribute attribute){  regularAttributes.add(attribute);}  }
class C{  private RelNode createModify(RelOptTable targetTable,RelNode source){  final ModifiableTable modifiableTable=targetTable.unwrap(ModifiableTable.class);  if (modifiableTable != null) {    return modifiableTable.toModificationRel(cluster,targetTable,catalogReader,source,LogicalTableModify.Operation.INSERT,null,false);  }  final ModifiableView modifiableView=targetTable.unwrap(ModifiableView.class);  if (modifiableView != null) {    final Table delegateTable=modifiableView.getTable();    final RelDataType delegateRowType=delegateTable.getRowType(typeFactory);    final RelOptTable delegateRelOptTable=RelOptTableImpl.create(null,delegateRowType,delegateTable,modifiableView.getTablePath());    final RelNode newSource=createSource(targetTable,source,modifiableView,delegateRowType);    return createModify(delegateRelOptTable,newSource);  }  return LogicalTableModify.create(targetTable,catalogReader,source,LogicalTableModify.Operation.INSERT,null,false);}  }
class C{  public String key(){  return this.serviceInfo().getKey();}  }
class C{  public void mouseExit(MouseEvent e){}  }
class C{  public long insertOrReplace(String table,ContentValues values){  try {    openDB();    return mSQLiteDatabase.replaceOrThrow(table,null,values);  } catch (  Exception ex) {    ex.printStackTrace();    return -1;  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void configure(){  TrafficController tc=new MergTrafficController();  try {    tc.setCanId(Integer.parseInt(getOptionState(option2Name)));  } catch (  Exception e) {    log.error("Cannot parse CAN ID - check your preference settings " + e);    log.error("Now using default CAN ID");  }  this.getSystemConnectionMemo().setTrafficController(tc);  log.debug("Connecting port");  tc.connectPort(this);  this.getSystemConnectionMemo().setProtocol(getOptionState(option1Name));  this.getSystemConnectionMemo().configureManagers();}  }
class C{  public ResultSet read(Reader reader,String[] colNames) throws IOException {  init(null,null);  this.input=reader;  return readResultSet(colNames);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public EventTimeInputBuilder<T> emit(T record){  if (record == null) {    throw new IllegalArgumentException("Elem has to be not null!");  }  add(new StreamRecord<T>(record,getLastTimestamp()));  return this;}  }
class C{  public void addFloor(Floor floor){  LOGGER.debug("BuildUpFloor.addFloor");  if (floor != null) {    getFloorDetails().add(floor);    noofFloors=getFloorDetails().size();  }}  }
class C{  public boolean handle(CallbackQuery query,int button){  if (button < 0 || button > buttons.size()) {    return false;  }  buttonAt(button).handlePress(query);  return true;}  }
class C{  public void insertInstance(int index){  ((DataTableModel)getModel()).insertInstance(index);}  }
class C{  public JButton createButton(Action a){  JButton b=new JButton();  b.putClientProperty("displayActionText",Boolean.TRUE);  b.setAction(a);  return b;}  }
class C{  public boolean isFunctionColumn(String columnName){  if (columnName == null || m_functions.size() == 0)   return false;  for (int i=0; i < m_functions.size(); i++) {    String f=(String)m_functions.get(i);    if (f.startsWith(columnName))     return true;  }  return false;}  }
class C{  public void addShape3D(float x,float y,float z,Shape2D shape,float depth,int shapeTextureWidth,int shapeTextureHeight,int sideTextureWidth,int sideTextureHeight,int direction){  addShape3D(x,y,z,shape,depth,shapeTextureWidth,shapeTextureHeight,sideTextureWidth,sideTextureHeight,direction,null);}  }
class C{  void fixSize(){  Dimension d=textArea.getPreferredSize();  Rectangle r=null;  try {    r=textArea.modelToView(textArea.getDocument().getLength() - 1);    d.height=r.y + r.height;    d=textArea.getPreferredSize();    d.width=Math.min(d.width + 25,320);    d.height=Math.min(d.height,150);    textArea.setPreferredSize(d);  } catch (  BadLocationException ble) {    ble.printStackTrace();  }  pack();}  }
class C{  public synchronized Relationship addRelationship(Relationship relationship,boolean internal){  return addRelationship(relationship,internal,false,0.5f);}  }
class C{  static String authReplyFor(String... schemes){  String reply="HTTP/1.1 401 Unauthorized" + CRLF + "Content-Length: 0"+ CRLF+ "Connection: close"+ CRLF;  for (  String s : schemes) {switch (s) {case "Basic":      reply+="WWW-Authenticate: Basic realm=\"wallyworld\"" + CRLF;    break;case "Digest":  reply+="WWW-Authenticate: Digest" + " realm=\"wallyworld\"" + " domain=/"+ " nonce=\"abcdefghijklmnopqrstuvwxyz\""+ " qop=\"auth\""+ CRLF;break;case "NTLM":reply+="WWW-Authenticate: NTLM" + CRLF;break;default :throw new RuntimeException("Should not get here");}}reply+=CRLF;return reply;}  }
class C{  private void ManageCrlCacheChecker() throws Exception {  if (smartCardAuthnEnabled()) {    if (null == this._crlCacheChecker) {      this._crlCacheChecker=new IdmCrlCachePeriodicChecker();      this._crlCacheChecker.start();      logger.info("Started CrlCacheChecker thread");    }  } else {    if (null != this._crlCacheChecker) {      this._crlCacheChecker=null;      logger.info("Stopped CrlCacheChecker thread");    }  }}  }
class C{  private void readOkMapNodeTypes(Settings settings){  if (settings.contains(MAP_SELECT_S)) {    this.okMapNodeTypes=settings.getCsvInts(MAP_SELECT_S);    for (    int i : okMapNodeTypes) {      if (i < MapNode.MIN_TYPE || i > MapNode.MAX_TYPE) {        throw new SettingsError("Map type selection '" + i + "' is out of range for setting "+ settings.getFullPropertyName(MAP_SELECT_S));      }      if (i > nrofMapFilesRead) {        throw new SettingsError("Can't use map type selection '" + i + "' for setting "+ settings.getFullPropertyName(MAP_SELECT_S)+ " because only "+ nrofMapFilesRead+ " map files are read");      }    }  } else {    this.okMapNodeTypes=null;  }}  }
class C{  public boolean acceptCallTransfer(){  return super.isActive() ? mSession.acceptTransfer() : false;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public ServiceExceptionCancelled rethrow(String msg){  return new ServiceExceptionCancelled(msg,this);}  }
class C{  private static Position nextTokenPos(Position pos,Token[][] spec){  if (pos == null) {    return null;  }  int nextItem=pos.item + 1;  if ((nextItem < spec[pos.line].length) && ((pos.line < pcalEnd.line) || (nextItem < pcalEnd.item))) {    return new Position(pos.line,nextItem);  }  int nextLine=pos.line + 1;  while ((nextLine < spec.length) && (spec[nextLine].length == 0)) {    nextLine++;  }  if ((nextLine < spec.length) && ((nextLine < pcalEnd.line) || ((nextLine == pcalEnd.line) && (0 < pcalEnd.item)))) {    return new Position(nextLine,0);  }  return null;}  }
class C{  public static JSONArray readJSONArray(final JSONObject jsonObject,final String key,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonObject.getJSONArray(key);  }  if (notNull && jsonObject.isNull(key)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_OBJECT,key));  }  JSONArray value=null;  if (!jsonObject.isNull(key)) {    value=jsonObject.getJSONArray(key);  }  return value;}  }
class C{  public Matrix compute(Matrix loghyper,Matrix X){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  final double ell=Math.exp(loghyper.get(0,0));  final double em2=1 / (ell * ell);  final double oneplusem2=1 + em2;  final double sf2=Math.exp(2 * loghyper.get(1,0));  final int m=X.getRowDimension();  final int n=X.getColumnDimension();  double[][] x=X.getArray();  q=new double[m][m];  for (int i=0; i < m; i++) {    for (int j=0; j < m; j++) {      double t=0;      for (int k=0; k < n; k++) {        t+=x[i][k] * x[j][k] * em2;      }      q[i][j]=t;    }  }  double[] dq=new double[m];  for (int i=0; i < m; i++) {    dq[i]=Math.sqrt(oneplusem2 + q[i][i]);  }  Matrix A=new Matrix(m,m);  double[][] k=new double[m][m];  double[][] a=A.getArray();  for (int i=0; i < m; i++) {    final double dqi=dq[i];    for (int j=0; j < m; j++) {      final double t=(em2 + q[i][j]) / (dqi * dq[j]);      k[i][j]=t;      a[i][j]=sf2 * Math.asin(t);    }  }  return A;}  }
class C{  public void addArc(float latPoint,float lonPoint,int offset_x1,int offset_y1,int w,int h,float s,float e,LinkProperties properties) throws IOException {  LinkArc.write(latPoint,lonPoint,offset_x1,offset_y1,w,h,s,e,properties,link.dos);}  }
class C{  public DistributionLocatorImpl(DistributionLocatorConfig config,AdminDistributedSystemImpl system){  this.config=(DistributionLocatorConfigImpl)config;  this.config.validate();  this.config.setManagedEntity(this);  this.id=getNewId();  this.controller=system.getEntityController();  this.system=system;}  }
class C{  @DSComment("Backup subsystem") @DSSpec(DSCat.BACKUP_SUBSYSTEM) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:48.074 -0500",hash_original_method="85561994F0AAB46E3AEAAB82C9107690",hash_generated_method="6E365403833B142A6AA999CAEB020FAC") public BackupManager(Context context){  mContext=context;  dsBackupAgent=new BackupAgentHelper();}  }
class C{  public GeneralCatalog createTemporaryTasteProfile() throws EchoNestException {  String profileName=Long.toString(SystemClock.uptimeMillis()) + new Random().nextLong() + System.currentTimeMillis();  GeneralCatalog profile=mEchoNest.createGeneralCatalog(profileName);  CatalogUpdater updater=new CatalogUpdater();  final ProviderAggregator aggregator=ProviderAggregator.getDefault();  final List<Playlist> playlists=aggregator.getAllPlaylists();  int tracksCount=0;  List<String> knownTracks=new ArrayList<>();  for (  Playlist p : playlists) {    Iterator<String> songIt=p.songs();    while (songIt.hasNext()) {      String songRef=songIt.next();      if (knownTracks.contains(songRef)) {        continue;      } else {        knownTracks.add(songRef);      }      Song song=aggregator.retrieveSong(songRef,p.getProvider());      if (song != null) {        SongCatalogItem item=new SongCatalogItem(songRef);        com.fastbootmobile.encore.model.Artist artist=aggregator.retrieveArtist(song.getArtist(),p.getProvider());        if (artist != null && artist.isLoaded() && artist.getName() != null && !artist.getName().trim().isEmpty()) {          item.setArtistName(artist.getName());        }        Album album=aggregator.retrieveAlbum(song.getAlbum(),p.getProvider());        if (album != null && album.isLoaded() && album.getName() != null) {          item.setRelease(album.getName());        }        item.setSongName(song.getTitle());        item.setUrl(songRef);        updater.update(item);        tracksCount++;      }    }  }  if (DEBUG) {    Log.d(TAG,"Pushing " + tracksCount + " tracks data to EchoNest Profile");  }  long startTime=SystemClock.uptimeMillis();  String ticket=profile.update(updater);  if (profile.waitForUpdates(ticket,10000)) {    Log.i(TAG,"Profile update completed in " + (SystemClock.uptimeMillis() - startTime) + " ms");  } else {    Log.w(TAG,"Profile update not done after 10 seconds! Bucket data might be wrong " + "until it fully completes!");  }  return profile;}  }
class C{  @Override public void onMarkerDragEnd(Marker marker){  handleMarkerEvent("didEndDraggingMarker",marker);}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667;  H2=0xbb67ae85;  H3=0x3c6ef372;  H4=0xa54ff53a;  H5=0x510e527f;  H6=0x9b05688c;  H7=0x1f83d9ab;  H8=0x5be0cd19;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public boolean isClosed(){  return nodes.get(0).equals(nodes.get(nodes.size() - 1));}  }
class C{  private void serviceInfoFromProperties(Provider.Service s){  super.remove(s.type + "." + s.algorithm);  if (s.aliases != null) {    for (Iterator<String> i=s.aliases.iterator(); i.hasNext(); ) {      super.remove("Alg.Alias." + s.type + "."+ i.next());    }  }  if (s.attributes != null) {    for (    Map.Entry<String,String> entry : s.attributes.entrySet()) {      super.remove(s.type + "." + s.algorithm+ " "+ entry.getKey());    }  }  if (providerNumber != -1) {    Services.setNeedRefresh();  }}  }
class C{  protected void validatePut(Region region){  ((LocalRegion)region).getDiskRegion().flushForTesting();  try {    ((LocalRegion)region).getValueOnDisk("testKey");  } catch (  Exception ex) {    ex.printStackTrace();    fail("Failed to get the value on disk");  }}  }
class C{  private void initializeGraphAsEmpty(){  int max=Math.max(getMaxInDegree() + getMaxOutDegree(),getMaxDegree());  max+=1;  parentMatrix=new int[getNumNodes()][max];  childMatrix=new int[getNumNodes()][max];  for (int i=0; i < getNumNodes(); i++) {    parentMatrix[i][0]=1;    childMatrix[i][0]=1;  }  for (int i=0; i < getNumNodes(); i++) {    for (int j=1; j < max; j++) {      parentMatrix[i][j]=-5;      childMatrix[i][j]=-5;    }  }}  }
class C{  @Override public List<BaseContentEntry<?>> parsePage(File file){  Document document=null;  try {    document=documentProvider.getDocument(file);  } catch (  IOException e) {    LOGGER.log(Level.WARNING,"Error parsing file: " + file);    return null;  }  List<BaseContentEntry<?>> entries=Lists.newLinkedList();  parseElement(document.getDocumentElement(),entries);  for (  BaseContentEntry<?> entry : entries) {    if (isPage(entry) && entry.getTitle() == null) {      NodeList nodeList=document.getElementsByTagName("title");      for (int i=0; i < nodeList.getLength(); i++) {        Node node=nodeList.item(i);        if (node.getNodeType() == Node.ELEMENT_NODE) {          Element title=(Element)node;          entry.setTitle(new PlainTextConstruct(title.getTextContent()));          System.out.println(entry);        }      }    }  }  return entries;}  }
class C{  public static void sync(){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }}  }
class C{  public static void main(String[] args){  int[][] weeklyHours={{2,4,3,4,5,8,8},{7,3,4,3,3,4,4},{3,3,4,3,3,2,2},{9,3,4,7,3,4,1},{3,5,4,3,6,3,8},{3,4,4,6,3,4,4},{3,7,4,8,3,8,4},{6,3,5,9,2,7,9}};  int[][] totalHours=sumRows(weeklyHours);  sort(totalHours);  print(totalHours);}  }
class C{  protected static final boolean classEquals(Class<?> clz1,Class<?> clz2){  if (clz1 == null || clz2 == null) {    throw new NullPointerException();  }  return clz1 == clz2 || clz1.getName().equals(clz2.getName());}  }
class C{  public Lake(){  super();}  }
class C{  public static boolean isEmpty(String str,boolean trimWhitespaces){  if (str == null)   return true;  if (trimWhitespaces)   return str.trim().length() == 0; else   return str.length() == 0;}  }
class C{  public Address allocateArray(RVMArray array,int numElements,boolean needsIdentityHash,int identityHashValue,int align,int alignCode){  numObjects++;  BootImageWriter.logAllocation(array,array.getInstanceSize(numElements));  return ObjectModel.allocateArray(this,array,numElements,needsIdentityHash,identityHashValue,align,alignCode);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void rest(int ms){  long start=getElapsed();  while (start + ms > getElapsed()) {    try {      Thread.sleep(1);    } catch (    InterruptedException e) {    }  }}  }
class C{  public SafeAsyncTask(Handler handler){  this.handler=handler;  this.executor=DEFAULT_EXECUTOR;}  }
class C{  public void testSetBitPositiveInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=20;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.add(new Option("\tThe number of arcs to use. (default " + defaultNumArcs() + ")","A",1,"-A <num>"));  result.add(new Option("\tThe cardinality of the attributes and the class. (default " + defaultCardinality() + ")","C",1,"-C <num>"));  return result.elements();}  }
class C{  public static <K,V>V addIfAbsent(ConcurrentMap<K,V> map,K key,V val){  A.notNull(map,"map",key,"key",val,"val");  V v=map.putIfAbsent(key,val);  if (v != null)   val=v;  return val;}  }
class C{  private MonitoringConf() throws RuntimeException {  MonitoringParameters p=getMonitoringParameters();}  }
class C{  public Address mobilePhone(Phone mobilePhone){  this.mobilePhone=mobilePhone;  return this;}  }
class C{  public SecurityRestApi(){  super();}  }
class C{  public boolean isSetClose(){  return EncodingUtils.testBit(__isset_bitfield,__CLOSE_ISSET_ID);}  }
class C{  public void packagePrivateMethod(){}  }
class C{  void tryScheduleAction(Runnable action){  try {    eventLoop.submit(action);  } catch (  RejectedExecutionException e) {  }}  }
class C{  public void handleGatewayReceiverStop(GatewayReceiver recv) throws ManagementException {  if (!isServiceInitialised("handleGatewayReceiverStop")) {    return;  }  GatewayReceiverMBean mbean=(GatewayReceiverMBean)service.getLocalGatewayReceiverMXBean();  GatewayReceiverMBeanBridge bridge=mbean.getBridge();  bridge.stopServer();  Notification notification=new Notification(JMXNotificationType.GATEWAY_RECEIVER_STOPPED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.GATEWAY_RECEIVER_STOPPED_PREFIX);  memberLevelNotifEmitter.sendNotification(notification);}  }
class C{  public ProjectHostingReadDemo(ProjectHostingService service,String project,String username,String password) throws AuthenticationException, MalformedURLException {  client=new ProjectHostingClient(service,project,username,password);}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Console createInstance(){  instance=new Console();  return (instance);}  }
class C{  public Builder withPhoneNumber(String phoneNumber){  this.phoneNumber=phoneNumber;  return this;}  }
class C{  public void startUpload(final String hostname,final String uri,final int fileSizeOctet,final int reportInterval){  startUpload(hostname,SpeedTestConst.HTTP_DEFAULT_PORT,uri,fileSizeOctet,reportInterval);}  }
class C{  public void testComplexeUrlValid(){  setParameterToInitMockMethod("http://myurl.com/a/b/c/index.html?param=myParam",TestSolution.PASSED);  SeoRule01081 test=new SeoRule01081();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public boolean isRequired(){  return label.isRequired();}  }
class C{  private boolean saveLOBDataToFileSystem(){  if (m_attachmentPathRoot == null || "".equals(m_attachmentPathRoot)) {    log.severe("no attachmentPath defined");    return false;  }  if (m_items == null || m_items.size() == 0) {    setBinaryData(null);    return true;  }  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  try {    final DocumentBuilder builder=factory.newDocumentBuilder();    final Document document=builder.newDocument();    final Element root=document.createElement("attachments");    document.appendChild(root);    document.setXmlStandalone(true);    for (int i=0; i < m_items.size(); i++) {      log.fine(m_items.get(i).toString());      File entryFile=m_items.get(i).getFile();      final String path=entryFile.getAbsolutePath();      log.fine(path + " - " + m_attachmentPathRoot);      if (!path.startsWith(m_attachmentPathRoot)) {        log.fine("move file: " + path);        FileChannel in=null;        FileChannel out=null;        try {          final File destFolder=new File(m_attachmentPathRoot + File.separator + getAttachmentPathSnippet());          if (!destFolder.exists()) {            if (!destFolder.mkdirs()) {              log.warning("unable to create folder: " + destFolder.getPath());            }          }          final File destFile=new File(m_attachmentPathRoot + File.separator + getAttachmentPathSnippet()+ File.separator+ entryFile.getName());          in=new FileInputStream(entryFile).getChannel();          out=new FileOutputStream(destFile).getChannel();          in.transferTo(0,in.size(),out);          in.close();          out.close();          if (entryFile.exists()) {            if (!entryFile.delete()) {              entryFile.deleteOnExit();            }          }          entryFile=destFile;        } catch (        IOException e) {          e.printStackTrace();          log.severe("unable to copy file " + entryFile.getAbsolutePath() + " to "+ m_attachmentPathRoot+ File.separator+ getAttachmentPathSnippet()+ File.separator+ entryFile.getName());        } finally {          if (in != null && in.isOpen()) {            in.close();          }          if (out != null && out.isOpen()) {            out.close();          }        }      }      final Element entry=document.createElement("entry");      entry.setAttribute("name",getEntryName(i));      String filePathToStore=entryFile.getAbsolutePath();      filePathToStore=filePathToStore.replaceFirst(m_attachmentPathRoot.replaceAll("\\\\","\\\\\\\\"),ATTACHMENT_FOLDER_PLACEHOLDER);      log.fine(filePathToStore);      entry.setAttribute("file",filePathToStore);      root.appendChild(entry);    }    final Source source=new DOMSource(document);    final ByteArrayOutputStream bos=new ByteArrayOutputStream();    final Result result=new StreamResult(bos);    final Transformer xformer=TransformerFactory.newInstance().newTransformer();    xformer.transform(source,result);    final byte[] xmlData=bos.toByteArray();    log.fine(bos.toString());    setBinaryData(xmlData);    return true;  } catch (  Exception e) {    log.log(Level.SEVERE,"saveLOBData",e);  }  setBinaryData(null);  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsLinkIDHeader=null;  String pointerHeader=null;  String DEMHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  double z;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsLinkIDHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      DEMHeader=args[i];    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((streamsLinkIDHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streamID=new WhiteboxRaster(streamsLinkIDHeader,"r");    int rows=streamID.getNumberRows();    int cols=streamID.getNumberColumns();    double noData=streamID.getNoDataValue();    double gridResX=streamID.getCellSizeX();    double gridResY=streamID.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streamID.getMaximumValue();    double[] linkLengths=new double[(int)maxLinkID + 1];    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsLinkIDHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[][] linkRelief=new double[3][(int)maxLinkID + 1];    for (c=0; c <= maxLinkID; c++) {      linkRelief[0][c]=99999999;      linkRelief[1][c]=-99999999;    }    byte numNeighbouringStreamCells=0;    double currentID=0;    double linkLength=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streamID.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            linkLength=0;            currentID=streamID.getValue(y,x);            flag=true;            do {              z=DEM.getValue(y,x);              if (z < linkRelief[0][(int)currentID]) {                linkRelief[0][(int)currentID]=z;              }              if (z > linkRelief[1][(int)currentID]) {                linkRelief[1][(int)currentID]=z;              }              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (streamID.getValue(y,x) != currentID) {                  linkLengths[(int)(currentID)]=linkLength;                  currentID=streamID.getValue(y,x);                  if (currentID != noData) {                    linkLength=0;                    if (linkLengths[(int)currentID] > 0) {                      flag=false;                    }                  } else {                    flag=false;                  }                }              } else {                linkLengths[(int)currentID]=linkLength;                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (i=1; i <= maxLinkID; i++) {      linkRelief[2][i]=(linkRelief[1][i] - linkRelief[0][i]) / linkLengths[i] * 100;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          currentID=streamID.getValue(row,col);          output.setValue(row,col,linkRelief[2][(int)currentID]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streamID.close();    output.close();    returnData(outputHeader);    String retData="Stream Link Slope Output\n";    for (i=1; i <= maxLinkID; i++) {      retData=retData + i + "\t"+ linkRelief[2][i]+ "\n";    }    returnData(retData);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String toJvmName(String classname){  return classname.replace('.','/');}  }
class C{  public void valid() throws CertificateNotYetValidException, CertificateExpiredException {  Date now=new Date();  valid(now);}  }
class C{  public ParseException(String detailMessage,int location){  super(detailMessage + (" (at offset " + location + ")"));  errorOffset=location;}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((PLAHeaderViewListAdapter)mAdapter).removeHeader(v)) {      mDataSetObserver.onChanged();      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public TextComponent(TextComponent textComponent){  super(textComponent);  setText(textComponent.getText());}  }
class C{  private void addFillet(Coordinate p,Coordinate p0,Coordinate p1,int direction,double radius){  double dx0=p0.x - p.x;  double dy0=p0.y - p.y;  double startAngle=Math.atan2(dy0,dx0);  double dx1=p1.x - p.x;  double dy1=p1.y - p.y;  double endAngle=Math.atan2(dy1,dx1);  if (direction == CGAlgorithms.CLOCKWISE) {    if (startAngle <= endAngle)     startAngle+=2.0 * Math.PI;  } else {    if (startAngle >= endAngle)     startAngle-=2.0 * Math.PI;  }  segList.addPt(p0);  addFillet(p,startAngle,endAngle,direction,radius);  segList.addPt(p1);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildnewchildexists.class,args);}  }
class C{  private void renderAnimations(){  Keyframe kf0, kf1, kf2, kf3;  float midwayPoint=0.2f;  int duration=500;  kf0=Keyframe.ofFloat(0f,1);  kf1=Keyframe.ofFloat(midwayPoint,mTransitionMidRadiusMultiplier);  kf2=Keyframe.ofFloat(1f,mTransitionEndRadiusMultiplier);  PropertyValuesHolder radiusDisappear=PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier",kf0,kf1,kf2);  kf0=Keyframe.ofFloat(0f,1f);  kf1=Keyframe.ofFloat(1f,0f);  PropertyValuesHolder fadeOut=PropertyValuesHolder.ofKeyframe("alpha",kf0,kf1);  mDisappearAnimator=ObjectAnimator.ofPropertyValuesHolder(this,radiusDisappear,fadeOut).setDuration(duration);  mDisappearAnimator.addUpdateListener(mInvalidateUpdateListener);  float delayMultiplier=0.25f;  float transitionDurationMultiplier=1f;  float totalDurationMultiplier=transitionDurationMultiplier + delayMultiplier;  int totalDuration=(int)(duration * totalDurationMultiplier);  float delayPoint=(delayMultiplier * duration) / totalDuration;  midwayPoint=1 - (midwayPoint * (1 - delayPoint));  kf0=Keyframe.ofFloat(0f,mTransitionEndRadiusMultiplier);  kf1=Keyframe.ofFloat(delayPoint,mTransitionEndRadiusMultiplier);  kf2=Keyframe.ofFloat(midwayPoint,mTransitionMidRadiusMultiplier);  kf3=Keyframe.ofFloat(1f,1);  PropertyValuesHolder radiusReappear=PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier",kf0,kf1,kf2,kf3);  kf0=Keyframe.ofFloat(0f,0f);  kf1=Keyframe.ofFloat(delayPoint,0f);  kf2=Keyframe.ofFloat(1f,1f);  PropertyValuesHolder fadeIn=PropertyValuesHolder.ofKeyframe("alpha",kf0,kf1,kf2);  mReappearAnimator=ObjectAnimator.ofPropertyValuesHolder(this,radiusReappear,fadeIn).setDuration(totalDuration);  mReappearAnimator.addUpdateListener(mInvalidateUpdateListener);}  }
class C{  public AdventureIslandRemover(StendhalRPZone zone){  this.zone=zone;}  }
class C{  public DataStreamConnection(Socket socket,int id){  super(socket,id);}  }
class C{  public boolean forEach(TDoubleProcedure procedure){  byte[] states=_states;  double[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  static boolean linkClicked(TabLaunchType type){  return type == TabLaunchType.FROM_LINK || type == TabLaunchType.FROM_LONGPRESS_FOREGROUND || type == TabLaunchType.FROM_LONGPRESS_BACKGROUND;}  }
class C{  public static char[] toCharArray(boolean[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? (char)1 : (char)0;  }  return result;}  }
class C{  public static CreateWalletResponse create(String password,String apiCode,String privateKey,String label,String email) throws IOException, APIException {  Map<String,String> params=new HashMap<String,String>();  params.put("password",password);  params.put("api_code",apiCode);  if (privateKey != null) {    params.put("priv",privateKey);  }  if (label != null) {    params.put("label",label);  }  if (email != null) {    params.put("email",email);  }  String response=HttpClient.getInstance().post("api/v2/create_wallet",params);  JsonObject jsonObj=new JsonParser().parse(response).getAsJsonObject();  return new CreateWalletResponse(jsonObj.get("guid").getAsString(),jsonObj.get("address").getAsString(),jsonObj.get("link").getAsString());}  }
class C{  public static boolean isNumericString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if (('0' <= ch && ch <= '9') || ch == ' ') {      continue;    }    return false;  }  return true;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (!(o instanceof BayesPm)) {    return false;  }  BayesPm bayesPm=(BayesPm)o;  return bayesPm.dag.equals(this.dag) && bayesPm.nodesToVariables.equals(this.nodesToVariables);}  }
class C{  public void testPosPosSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-128,56,100,4,4,17,37,16,1,64,1,10,3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public String formatLongDate(Date date){  return DateFormat.getDateInstance(DateFormat.LONG).format(date);}  }
class C{  public static Map<Class<?>,Set<HGQueryCondition>> find(Collection<HGQueryCondition> C,Class<?>... condType){  HashMap<Class<?>,Set<HGQueryCondition>> M=new HashMap<Class<?>,Set<HGQueryCondition>>();  for (  HGQueryCondition c : C) {    for (int i=0; i < condType.length; i++)     if (condType[i].isAssignableFrom(c.getClass())) {      Set<HGQueryCondition> S=M.get(condType[i]);      if (S == null) {        S=new HashSet<HGQueryCondition>();        M.put(condType[i],S);      }      S.add(c);    }  }  return M;}  }
class C{  public boolean mouseOver(OMGraphic omg,MouseEvent me){  if (DEBUG) {    Debug.output("mouseOver(" + omg.getClass().getName() + ") at "+ me.getX()+ ", "+ me.getY());  }  if (grp != null && !me.isConsumed()) {    handleToolTip(grp.getToolTipTextFor(omg),me);    handleInfoLine(grp.getInfoText(omg));    if (grp.isHighlightable(omg)) {      grp.highlight(omg);    }  }  return true;}  }
class C{  protected static JSONNode toJSON(Instances inst,Attribute att){  JSONNode result;  JSONNode labels;  int i;  result=new JSONNode();  result.addPrimitive(NAME,att.name());  result.addPrimitive(TYPE,Attribute.typeToString(att));  result.addPrimitive(CLASS,(att.index() == inst.classIndex()));  result.addPrimitive(WEIGHT,att.weight());  if (att.isNominal()) {    labels=result.addArray(LABELS);    for (i=0; i < att.numValues(); i++) {      if (att.value(i).equals(MISSING_VALUE))       labels.addArrayElement("'" + att.value(i) + "'"); else       labels.addArrayElement(att.value(i));    }  }  if (att.isDate())   result.addPrimitive(DATEFORMAT,att.getDateFormat());  return result;}  }
class C{  public Builder withId(long id){  buffer.writeLong(0,id);  return this;}  }
class C{  public TermsByQueryRequest maxTermsPerShard(Integer maxTermsPerShard){  this.maxTermsPerShard=maxTermsPerShard;  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TFORMAL_PARAMETER__ANNOTATIONS:    return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd,msgs);case TypesPackage.TFORMAL_PARAMETER__TYPE_REF:  return basicSetTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Builder<T> store(final ChunkedHashStore<T> chunkedHashStore){  this.chunkedHashStore=chunkedHashStore;  return this;}  }
class C{  public EditableOMGraphicList(){  this(new OMGraphicList());}  }
class C{  private void processGuardedUnary(Instruction s){  RegisterOperand result=GuardedUnary.getResult(s);  ValueGraphVertex v=findOrCreateVertex(result.getRegister());  v.setLabel(s.operator(),1);  Operand val=GuardedUnary.getVal(s);  val=bypassMoves(val);  link(v,findOrCreateVertex(val),0);}  }
class C{  public SocketHandler(String host,int port) throws IOException {  sealed=false;  configure();  sealed=true;  this.port=port;  this.host=host;  connect();}  }
class C{  public ExceptionOccurredParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_EXCEPTION_OCCURED);}  }
class C{  public Node popNode(Class<? extends Node> cls,String uri){synchronized (nodeStack) {    if (suppress) {      if (!suppressedNodeStack.isEmpty()) {        Node suppressed=popNode(suppressedNodeStack,cls,uri);        if (suppressed != null) {          return suppressed;        }      } else {        suppress=false;      }    }    return popNode(nodeStack,cls,uri);  }}  }
class C{  public PickPointFrustum transformBy(Matrix matrix){  if (matrix == null) {    String msg=Logging.getMessage("nullValue.MatrixIsNull");    Logging.logger().fine(msg);    throw new IllegalArgumentException(msg);  }  return new PickPointFrustum(super.transformBy(matrix),this.screenRect);}  }
class C{  public Builder port(String port){  this.port=port;  return this;}  }
class C{  private void updateDiskGCRVV(RegionVersionVector diskRVV,RegionVersionVector inMemoryRVV,VersionSource member){  long diskVersion=diskRVV.getVersionForMember(member);  long memoryGCVersion=inMemoryRVV.getGCVersion(member);  if (memoryGCVersion <= diskVersion) {    diskRVV.recordGCVersion(member,memoryGCVersion);  }}  }
class C{  public boolean dataSave(int newRow,boolean manualCmd){  log.fine("Row=" + newRow + ", Changed="+ m_rowChanged+ "/"+ m_changed);  if (!m_changed && m_rowChanged == -1)   return true;  if (newRow == m_rowChanged)   return true;  return (dataSave(manualCmd) == SAVE_OK);}  }
class C{  public static BucketSizeResponse send(InternalDistributedMember recipient,PartitionedRegion r,int bucketId) throws ForceReattemptException {  Assert.assertTrue(recipient != null,"BucketSizeMessage NULL reply message");  BucketSizeResponse p=new BucketSizeResponse(r.getSystem(),Collections.singleton(recipient));  BucketSizeMessage m=new BucketSizeMessage(recipient,r.getPRId(),p,bucketId);  Set failures=r.getDistributionManager().putOutgoing(m);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException(LocalizedStrings.BucketSizeMessage_FAILED_SENDING_0.toLocalizedString(m));  }  return p;}  }
class C{  public boolean isTagDependent(){  return isTagDependent;}  }
class C{  @Override public void endLine(){  m_ticketcurrent.endLine();}  }
class C{  public QuotaNotFoundException(Throwable cause){  super(cause);}  }
class C{  public void done(final boolean isInternalReturnEdge){  if (isDone)   throw new IllegalStateException("Can't call done() more than once");  if (points.size() < 3)   throw new IllegalArgumentException("Polygon needs at least three points.");  if (isInternalReturnEdge)   isInternalEdges.set(points.size() - 1);  isDone=true;  edges=new SidedPlane[points.size()];  invertedEdges=new SidedPlane[points.size()];  notableEdgePoints=new GeoPoint[points.size()][];  for (int i=0; i < points.size(); i++) {    final GeoPoint start=points.get(i);    final GeoPoint end=points.get(legalIndex(i + 1));    final Plane planeToFind=new Plane(start,end);    int endPointIndex=-1;    for (int j=0; j < points.size(); j++) {      final int index=legalIndex(j + i + 2);      if (!planeToFind.evaluateIsZero(points.get(index))) {        endPointIndex=index;        break;      }    }    if (endPointIndex == -1) {      throw new IllegalArgumentException("Polygon points are all coplanar");    }    final GeoPoint check=points.get(endPointIndex);    edges[i]=new SidedPlane(check,false,start,end);    invertedEdges[i]=new SidedPlane(edges[i]);    notableEdgePoints[i]=new GeoPoint[]{start,end};  }  eitherBounds=new HashMap<>(edges.length);  prevBrotherMap=new HashMap<>(edges.length);  nextBrotherMap=new HashMap<>(edges.length);  for (int edgeIndex=0; edgeIndex < edges.length; edgeIndex++) {    final SidedPlane edge=edges[edgeIndex];    final SidedPlane invertedEdge=invertedEdges[edgeIndex];    int bound1Index=legalIndex(edgeIndex + 1);    while (invertedEdges[legalIndex(bound1Index)].isNumericallyIdentical(invertedEdge)) {      bound1Index++;    }    int bound2Index=legalIndex(edgeIndex - 1);    while (invertedEdges[legalIndex(bound2Index)].isNumericallyIdentical(invertedEdge)) {      bound2Index--;    }    bound1Index=legalIndex(bound1Index);    bound2Index=legalIndex(bound2Index);    int startingIndex=bound2Index;    while (true) {      startingIndex=legalIndex(startingIndex + 1);      if (startingIndex == bound1Index) {        break;      }      final GeoPoint interiorPoint=points.get(startingIndex);      if (!invertedEdges[bound1Index].isWithin(interiorPoint) || !invertedEdges[bound2Index].isWithin(interiorPoint)) {        throw new IllegalArgumentException("Concave polygon has a side that is more than 180 degrees");      }    }    eitherBounds.put(edge,new EitherBound(invertedEdges[bound1Index],invertedEdges[bound2Index]));    nextBrotherMap.put(invertedEdge,invertedEdges[bound1Index]);    prevBrotherMap.put(invertedEdge,invertedEdges[bound2Index]);  }  int edgePointCount=1;  if (holes != null) {    for (    final GeoPolygon hole : holes) {      edgePointCount+=hole.getEdgePoints().length;    }  }  edgePoints=new GeoPoint[edgePointCount];  edgePointCount=0;  edgePoints[edgePointCount++]=points.get(0);  if (holes != null) {    for (    final GeoPolygon hole : holes) {      final GeoPoint[] holeEdgePoints=hole.getEdgePoints();      for (      final GeoPoint p : holeEdgePoints) {        edgePoints[edgePointCount++]=p;      }    }  }  if (isWithinHoles(points.get(0))) {    throw new IllegalArgumentException("Polygon edge intersects a polygon hole; not allowed");  }}  }
class C{  protected AbstractGraph(List<Edge> edges,int numberOfVertices){  for (int i=0; i < numberOfVertices; i++)   addVertex((V)(new Integer(i)));  createAdjacencyLists(edges,numberOfVertices);}  }
class C{  public PeerAddress(InetAddress addr){  this(addr,MainNetParams.get().getPort());}  }
class C{  private void updateCurrentState(final StateVector<GraphNode,LatticeElement> newState){  for (  final GraphNode node : newState) {    state.setState(node,newState.getState(node));  }}  }
class C{  public synchronized Iterator<NSObject> objectIterator(){  return set.iterator();}  }
class C{  protected Map<?,?> convertFromProperty(Properties properties) throws IOException {  return new HashMap<Object,Object>(properties);}  }
class C{  public final static char[] encodeToChar(byte[] sArr,boolean lineSep){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new char[0];  int eLen=(sLen / 3) * 3;  int cCnt=((sLen - 1) / 3 + 1) << 2;  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);  char[] dArr=new char[dLen];  for (int s=0, d=0, cc=0; s < eLen; ) {    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);    dArr[d++]=CA[(i >>> 18) & 0x3f];    dArr[d++]=CA[(i >>> 12) & 0x3f];    dArr[d++]=CA[(i >>> 6) & 0x3f];    dArr[d++]=CA[i & 0x3f];    if (lineSep && ++cc == 19 && d < dLen - 2) {      dArr[d++]='\r';      dArr[d++]='\n';      cc=0;    }  }  int left=sLen - eLen;  if (left > 0) {    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);    dArr[dLen - 4]=CA[i >> 12];    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';    dArr[dLen - 1]='=';  }  return dArr;}  }
class C{  @Override public String toString(){  return String.format("Module '%s'",getName());}  }
class C{  public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  public static <T,C>List<T> satisfy(List<T> input,Function<? super T,? extends C> idFunction,Function<? super T,? extends OrderingConstraints<C>> constraintSupplier){  ConstrainedList<T,C> constrained=new ConstrainedList<>();  for (  T value : input) {    constrained.add(value,idFunction.apply(value),constraintSupplier.apply(value));  }  return constrained.satisfyAndGet().stream().map(null).collect(Collectors.toList());}  }
class C{  public void writeGraphics(String graphicsSaveFile) throws IOException {  FileOutputStream ostream=new FileOutputStream(graphicsSaveFile);  ObjectOutputStream objectstream=new ObjectOutputStream(ostream);  writeGraphics(objectstream);  objectstream.close();}  }
class C{  private int checkFlow(Map<String,Object> rows){  int state=0;  boolean dl_type=false;  boolean nw_proto=false;  boolean nw_layer=false;  boolean icmp6_type=false;  boolean icmp6_code=false;  boolean nd_target=false;  boolean nd_sll=false;  boolean nd_tll=false;  boolean ip6=false;  boolean ip4=false;  int eth_type=-1;  int nw_protocol=-1;  int icmp_type=-1;  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_DL_TYPE)) {    if (((String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE)).startsWith("0x")) {      eth_type=Integer.parseInt(((String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE)).replaceFirst("0x",""),16);      dl_type=true;    } else {      eth_type=Integer.parseInt((String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE));      dl_type=true;    }    if (eth_type == 0x86dd) {      ip6=true;      dl_type=true;    } else     if (eth_type == 0x800 || eth_type == 0x806 || eth_type == 0x8035) {      ip4=true;      dl_type=true;    }  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC)) {    nw_layer=true;    ip4=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP_CODE) || rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP_TYPE) || rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_DHA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_SHA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_SPA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_DPA)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_ARP_OPCODE)) {    ip4=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW6_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW6_DST)) {    nw_layer=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)) {    nw_proto=true;    if (((String)rows.get(StaticFlowEntryPusher.COLUMN_NW_PROTO)).startsWith("0x")) {      nw_protocol=Integer.parseInt(((String)rows.get(StaticFlowEntryPusher.COLUMN_NW_PROTO)).replaceFirst("0x",""),16);    } else {      nw_protocol=Integer.parseInt((String)rows.get(StaticFlowEntryPusher.COLUMN_NW_PROTO));    }  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP6_CODE)) {    icmp6_code=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE)) {    icmp6_type=true;    ip6=true;    if (((String)rows.get(StaticFlowEntryPusher.COLUMN_ICMP_TYPE)).startsWith("0x")) {      icmp_type=Integer.parseInt(((String)rows.get(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE)).replaceFirst("0x",""),16);    } else {      icmp_type=Integer.parseInt((String)rows.get(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE));    }  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ND_SLL)) {    nd_sll=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ND_TLL)) {    nd_tll=true;    ip6=true;  }  if (rows.containsKey(StaticFlowEntryPusher.COLUMN_ND_TARGET)) {    nd_target=true;    ip6=true;  }  if (nw_layer == true || nw_proto == true) {    if (dl_type == true) {      if (!(ip4 == true || ip6 == true)) {        state=2;        return state;      }    } else {      state=1;      return state;    }  }  if (icmp6_type == true || icmp6_code == true) {    if (nw_proto == true) {      if (nw_protocol != 0x3A) {        state=4;        return state;      }    } else {      state=3;      return state;    }  }  if (nd_sll == true || nd_tll == true || nd_target == true) {    if (icmp6_type == true) {      if (nd_target == true) {        if (!(icmp_type == 135 || icmp_type == 136)) {          state=6;          return state;        }      } else       if (nd_tll == true) {        if (!(icmp_type == 136)) {          state=6;          return state;        }      } else       if (nd_sll == true) {        if (!(icmp_type == 135)) {          state=6;          return state;        }      }    } else {      state=5;      return state;    }  }  int result=checkActions(rows);  if ((ip4 == true && ip6 == true) || (result == -1) || (result == 1 && ip6 == true)|| (result == 2 && ip4 == true)) {    state=7;    return state;  }  return state;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Px<T> wrapFuseable(Publisher<? extends T> source){  if (source instanceof Px) {    return onAssembly((Px<T>)source);  }  return onAssembly(new PxFuseableWrapper<>(source));}  }
class C{  public void init(boolean forWrapping,CipherParameters param){  this.forWrapping=forWrapping;  this.engine=new CBCBlockCipher(new DESedeEngine());  SecureRandom sr;  if (param instanceof ParametersWithRandom) {    ParametersWithRandom pr=(ParametersWithRandom)param;    param=pr.getParameters();    sr=pr.getRandom();  } else {    sr=new SecureRandom();  }  if (param instanceof KeyParameter) {    this.param=(KeyParameter)param;    if (this.forWrapping) {      this.iv=new byte[8];      sr.nextBytes(iv);      this.paramPlusIV=new ParametersWithIV(this.param,this.iv);    }  } else   if (param instanceof ParametersWithIV) {    this.paramPlusIV=(ParametersWithIV)param;    this.iv=this.paramPlusIV.getIV();    this.param=(KeyParameter)this.paramPlusIV.getParameters();    if (this.forWrapping) {      if ((this.iv == null) || (this.iv.length != 8)) {        throw new IllegalArgumentException("IV is not 8 octets");      }    } else {      throw new IllegalArgumentException("You should not supply an IV for unwrapping");    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TaskSeries)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  TaskSeries that=(TaskSeries)obj;  if (!this.tasks.equals(that.tasks)) {    return false;  }  return true;}  }
class C{  protected static MVStore openStore(String fileName){  return openStore(fileName,1000);}  }
class C{  public static Point decodeBitmapDimension(InputStream is){  Point size=null;  BitmapFactory.Options justBoundsOpts=new BitmapFactory.Options();  justBoundsOpts.inJustDecodeBounds=true;  BitmapFactory.decodeStream(is,null,justBoundsOpts);  if (justBoundsOpts.outWidth > 0 && justBoundsOpts.outHeight > 0) {    size=new Point(justBoundsOpts.outWidth,justBoundsOpts.outHeight);  } else {    Log.e(TAG,"Bitmap dimension decoding failed");  }  return size;}  }
class C{  public boolean isIncidentEdgeInResult(){  for (Iterator it=getEdges().getEdges().iterator(); it.hasNext(); ) {    DirectedEdge de=(DirectedEdge)it.next();    if (de.getEdge().isInResult())     return true;  }  return false;}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  public boolean isMPS(){  Object oo=get_Value(COLUMNNAME_IsMPS);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void connectAction(Bundle data){  MqttConnectOptions conOpt=new MqttConnectOptions();  String server=(String)data.get(ActivityConstants.server);  String clientId=(String)data.get(ActivityConstants.clientId);  int port=Integer.parseInt((String)data.get(ActivityConstants.port));  boolean cleanSession=(Boolean)data.get(ActivityConstants.cleanSession);  boolean ssl=(Boolean)data.get(ActivityConstants.ssl);  String ssl_key=(String)data.get(ActivityConstants.ssl_key);  String uri=null;  if (ssl) {    Log.e("SSLConnection","Doing an SSL Connect");    uri="ssl://";  } else {    uri="tcp://";  }  uri=uri + server + ":"+ port;  MqttAndroidClient client;  client=Connections.getInstance(this).createClient(this,uri,clientId);  if (ssl) {    try {      if (ssl_key != null && !ssl_key.equalsIgnoreCase("")) {        FileInputStream key=new FileInputStream(ssl_key);        conOpt.setSocketFactory(client.getSSLSocketFactory(key,"mqtttest"));      }    } catch (    MqttSecurityException e) {      Log.e(this.getClass().getCanonicalName(),"MqttException Occured: ",e);    }catch (    FileNotFoundException e) {      Log.e(this.getClass().getCanonicalName(),"MqttException Occured: SSL Key file not found",e);    }  }  String clientHandle=uri + clientId;  String message=(String)data.get(ActivityConstants.message);  String topic=(String)data.get(ActivityConstants.topic);  Integer qos=(Integer)data.get(ActivityConstants.qos);  Boolean retained=(Boolean)data.get(ActivityConstants.retained);  String username=(String)data.get(ActivityConstants.username);  String password=(String)data.get(ActivityConstants.password);  int timeout=(Integer)data.get(ActivityConstants.timeout);  int keepalive=(Integer)data.get(ActivityConstants.keepalive);  Connection connection=new Connection(clientHandle,clientId,server,port,this,client,ssl);  arrayAdapter.add(connection);  connection.registerChangeListener(changeListener);  String[] actionArgs=new String[1];  actionArgs[0]=clientId;  connection.changeConnectionStatus(ConnectionStatus.CONNECTING);  conOpt.setCleanSession(cleanSession);  conOpt.setConnectionTimeout(timeout);  conOpt.setKeepAliveInterval(keepalive);  if (!username.equals(ActivityConstants.empty)) {    conOpt.setUserName(username);  }  if (!password.equals(ActivityConstants.empty)) {    conOpt.setPassword(password.toCharArray());  }  final ActionListener callback=new ActionListener(this,ActionListener.Action.CONNECT,clientHandle,actionArgs);  boolean doConnect=true;  if ((!message.equals(ActivityConstants.empty)) || (!topic.equals(ActivityConstants.empty))) {    try {      conOpt.setWill(topic,message.getBytes(),qos.intValue(),retained.booleanValue());    } catch (    Exception e) {      Log.e(this.getClass().getCanonicalName(),"Exception Occured",e);      doConnect=false;      callback.onFailure(null,e);    }  }  client.setCallback(new MqttCallbackHandler(this,clientHandle));  client.setTraceCallback(new MqttTraceCallback());  connection.addConnectionOptions(conOpt);  Connections.getInstance(this).addConnection(connection);  if (doConnect) {    try {      client.connect(conOpt,null,callback);    } catch (    MqttException e) {      Log.e(this.getClass().getCanonicalName(),"MqttException Occured",e);    }  }}  }
class C{  public SetContribution(){  super();}  }
class C{  public static boolean isManipulator(TileEntity tile){  if (tile != null)   return tile instanceof IEnergyManipulator;  return false;}  }
class C{  private boolean addColumn(String recordKey,CompositeColumnName column,Object val,RowMutator mutator,DataObject obj){  if (_encrypt && _parentType.getEncryptionProvider() != null) {    val=_parentType.getEncryptionProvider().encrypt((String)val);  }  ColumnListMutation<CompositeColumnName> recordColList=mutator.getRecordColumnList(_parentType.getCF(),recordKey);  ColumnValue.setColumn(recordColList,column,val,_ttl);  if (_index == null || val == null) {    return false;  }  return _index.addColumn(recordKey,column,val,_parentType.getDataObjectClass().getSimpleName(),mutator,_ttl,obj);}  }
class C{  public SiteNode addPath(HistoryReference ref,HttpMessage msg){  if (Constant.isLowMemoryOptionSet()) {    throw new InvalidParameterException("SiteMap should not be accessed when the low memory option is set");  }  if (View.isInitialised() && Constant.isDevBuild() && !EventQueue.isDispatchThread()) {    log.error("SiteMap.addPath not on EDT " + Thread.currentThread().getName(),new Exception());  }  URI uri=msg.getRequestHeader().getURI();  log.debug("addPath " + uri.toString());  SiteNode parent=(SiteNode)getRoot();  SiteNode leaf=null;  String folder="";  try {    String host=getHostName(uri);    parent=findAndAddChild(parent,host,ref,msg);    List<String> path=model.getSession().getTreePath(msg);    for (int i=0; i < path.size(); i++) {      folder=path.get(i);      if (folder != null && !folder.equals("")) {        if (i == path.size() - 1) {          leaf=findAndAddLeaf(parent,folder,ref,msg);          ref.setSiteNode(leaf);        } else {          parent=findAndAddChild(parent,folder,ref,msg);        }      }    }    if (leaf == null) {      parent.setHistoryReference(ref);      leaf=parent;    }  } catch (  Exception e) {    log.error("Exception adding " + uri.toString() + " "+ e.getMessage(),e);  }  if (hrefMap.get(ref.getHistoryId()) == null) {    hrefMap.put(ref.getHistoryId(),leaf);  }  return leaf;}  }
class C{  public static void main(String... args) throws Exception {  TestBase.createCaller().init().test();  new TestStringCache().runBenchmark();}  }
class C{  private SortedMap<Double,Double> personalIncome2Scores(SortedMap<Id,WinnerLoserAnalysisRow> populationInformation){  SortedMap<Double,Double> result=new TreeMap<Double,Double>();  for (  Entry<Id,WinnerLoserAnalysisRow> entry : populationInformation.entrySet()) {    WinnerLoserAnalysisRow winnerLoserAnalysisRow=entry.getValue();    Double personalIncome=winnerLoserAnalysisRow.getPersonalIncome();    Double scoreDiff=winnerLoserAnalysisRow.getScoreDiff();    result.put(personalIncome,scoreDiff);  }  return result;}  }
class C{  public static DigestURL robotsURL(String urlHostPort){  if (urlHostPort.endsWith(":80"))   urlHostPort=urlHostPort.substring(0,urlHostPort.length() - 3);  DigestURL robotsURL=null;  try {    robotsURL=new DigestURL((urlHostPort.endsWith(":443") ? "https://" : "http://") + urlHostPort + ROBOTS_TXT_PATH);  } catch (  final MalformedURLException e) {    log.severe("Unable to generate robots.txt URL for host:port '" + urlHostPort + "'.",e);    robotsURL=null;  }  return robotsURL;}  }
class C{  public void testStemmingInflectional() throws Exception {  Reader reader=new StringReader("dibukukannya");  TokenStream stream=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)stream).setReader(reader);  stream=tokenFilterFactory("IndonesianStem","stemDerivational","false").create(stream);  assertTokenStreamContents(stream,new String[]{"dibukukan"});}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getCategoryDao() : null;}  }
class C{  public Consumer<?> createConsumer(){  return getParent().getAttributeManager().createConsumer(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:28.565 -0500",hash_original_method="1CEDD42C8B2FBCD0475C0CDDE7D9C910",hash_generated_method="D1F9A3C528664A4811E23CEB5B4F8B3B") public void copyFrom(Surface o){  addTaint(o.getTaint());}  }
class C{  public static void resetCache(){  allClasses.clear();  allFunctions.clear();  allUnits.clear();  unresolvedCalls.clear();}  }
class C{  public DAddExtensions(JDialog parent,X509ExtensionSet extensions,PublicKey authorityPublicKey,X500Name authorityCertName,BigInteger authorityCertSerialNumber,PublicKey subjectPublicKey){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  setTitle(res.getString("DAddExtensions.Title"));  this.extensions=(X509ExtensionSet)extensions.clone();  this.authorityPublicKey=authorityPublicKey;  this.authorityCertName=authorityCertName;  this.authorityCertSerialNumber=authorityCertSerialNumber;  this.subjectPublicKey=subjectPublicKey;  initComponents();}  }
class C{  public ActiveMQRAQueueSender(final QueueSender producer,final ActiveMQRASession session){  super(producer,session);  if (ActiveMQRAQueueSender.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + producer + ", "+ session+ ")");  }}  }
class C{  protected boolean waitForDownloadOrTimeoutNoThrow(long id,long poll,long timeoutMillis){  try {    doWaitForDownloadsOrTimeout(new Query().setFilterById(id),poll,timeoutMillis);    waitForReceiverNotifications(1);  } catch (  TimeoutException e) {    return false;  }  return true;}  }
class C{  private void addTable(Hashtable<String,Object> table){  if ((table != null) && !table.isEmpty()) {    getTable().putAll(table);  }}  }
class C{  public Matrix plusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] + B.A[i][j];    }  }  return this;}  }
class C{  public static String dumpGraph(AtlasGraph<?,?> graph) throws Exception {  File tempFile=File.createTempFile("graph",".gson");  System.out.println("tempFile.getPath() = " + tempFile.getPath());  GraphHelper.dumpToLog(graph);  FileOutputStream os=null;  try {    os=new FileOutputStream(tempFile);    graph.exportToGson(os);  }  finally {    if (os != null) {      try {        os.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }  return tempFile.getPath();}  }
class C{  public ListTypeVersioningV1(ListTypeVersioningV1 other){  if (other.isSetMyints()) {    List<Integer> __this__myints=new ArrayList<Integer>(other.myints);    this.myints=__this__myints;  }  if (other.isSetHello()) {    this.hello=other.hello;  }}  }
class C{  public boolean isModified(){  Object oo=get_Value(COLUMNNAME_IsModified);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public WarpScriptExecutor store(String key,Object value){  this.symbolTable.put(key,value);  return this;}  }
class C{  private void collectDiffChanges() throws VcsException {  Collection<FilePath> dirtyPaths=dirtyPaths(true);  if (dirtyPaths.isEmpty()) {    return;  }  try {    String output=GitChangeUtils.getDiffOutput(myProject,myVcsRoot,"HEAD",dirtyPaths);    GitChangeUtils.parseChanges(myProject,myVcsRoot,null,GitChangeUtils.resolveReference(myProject,myVcsRoot,"HEAD"),output,myChanges,myUnmergedNames);  } catch (  VcsException ex) {    if (!GitChangeUtils.isHeadMissing(ex)) {      throw ex;    }    GitSimpleHandler handler=new GitSimpleHandler(myProject,myVcsRoot,GitCommand.LS_FILES);    handler.addParameters("--cached");    handler.setSilent(true);    handler.setStdoutSuppressed(true);    String output=handler.run();    if (output.length() > 0) {      StringTokenizer tokenizer=new StringTokenizer(output,"\n\r");      while (tokenizer.hasMoreTokens()) {        final String s=tokenizer.nextToken();        Change ch=new Change(null,GitContentRevision.createRevision(myVcsRoot,s,null,myProject,false,false,true),FileStatus.ADDED);        myChanges.add(ch);      }    }  }}  }
class C{  public ProtocolReplEventRequest(long seqNo,long prefetchRange){  super(null);  this.seqNo=seqNo;  this.prefetchRange=prefetchRange;}  }
class C{  private void readCentralDir() throws IOException {  ByteBuffer raf=this.raf;  long scanOffset=raf.limit() - ENDHDR;  if (scanOffset < 0) {    throw new ZipException("File too short to be a zip file: " + raf.limit());  }  long stopOffset=scanOffset - 65536;  if (stopOffset < 0) {    stopOffset=0;  }  while (true) {    raf.position((int)scanOffset);    if (raf.getInt() == ENDSIG) {      break;    }    scanOffset--;    if (scanOffset < stopOffset) {      throw new ZipException("End Of Central Directory signature not found");    }  }  int diskNumber=raf.getShort() & 0xffff;  int diskWithCentralDir=raf.getShort() & 0xffff;  int numEntries=raf.getShort() & 0xffff;  int totalNumEntries=raf.getShort() & 0xffff;  skip(raf,4);  long centralDirOffset=((long)raf.getInt()) & 0xffffffffL;  int commentLength=raf.getShort() & 0xffff;  if (numEntries != totalNumEntries || diskNumber != 0 || diskWithCentralDir != 0) {    throw new ZipException("Spanned archives not supported");  }  boolean skipCommentsAndExtra=true;  if (commentLength > 0) {    if (skipCommentsAndExtra) {      skip(raf,commentLength);    } else {      byte[] commentBytes=new byte[commentLength];      raf.get(commentBytes);      comment=new String(commentBytes,0,commentBytes.length,StandardCharsets.UTF_8);    }  }  ByteBuffer buf=(ByteBuffer)raf.duplicate().order(ByteOrder.LITTLE_ENDIAN).position((int)centralDirOffset);  entries=new ArrayList<>(numEntries);  for (int i=0; i < numEntries; ++i) {    ZipEntry newEntry=new ZipEntry(buf,skipCommentsAndExtra);    if (newEntry.localHeaderRelOffset >= centralDirOffset) {    } else {      entries.add(newEntry);    }  }}  }
class C{  protected SimpleProjectDescriptionImpl(){  super();}  }
class C{  public static void assertNothingIsEqual(Object... objects){  assertNothingIsEqual(Arrays.asList(objects));}  }
class C{  private void drawBar(Canvas canvas,float xMin,float yMin,float xMax,float yMax,int scale,int seriesIndex,Paint paint){  float temp;  if (xMin > xMax) {    temp=xMin;    xMin=xMax;    xMax=temp;  }  if (yMin > yMax) {    temp=yMin;    yMin=yMax;    yMax=temp;  }  SimpleSeriesRenderer renderer=mRenderer.getSeriesRendererAt(seriesIndex);  if (renderer.isGradientEnabled()) {    float minY=(float)toScreenPoint(new double[]{0,renderer.getGradientStopValue()},scale)[1];    float maxY=(float)toScreenPoint(new double[]{0,renderer.getGradientStartValue()},scale)[1];    float gradientMinY=Math.max(minY,Math.min(yMin,yMax));    float gradientMaxY=Math.min(maxY,Math.max(yMin,yMax));    int gradientMinColor=renderer.getGradientStopColor();    int gradientMaxColor=renderer.getGradientStartColor();    int gradientStartColor=gradientMaxColor;    int gradientStopColor=gradientMinColor;    if (yMin < minY) {      paint.setColor(gradientMinColor);      canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(gradientMinY),paint);    } else {      gradientStopColor=getGradientPartialColor(gradientMinColor,gradientMaxColor,(maxY - gradientMinY) / (maxY - minY));    }    if (yMax > maxY) {      paint.setColor(gradientMaxColor);      canvas.drawRect(Math.round(xMin),Math.round(gradientMaxY),Math.round(xMax),Math.round(yMax),paint);    } else {      gradientStartColor=getGradientPartialColor(gradientMaxColor,gradientMinColor,(gradientMaxY - minY) / (maxY - minY));    }    GradientDrawable gradient=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{gradientStartColor,gradientStopColor});    gradient.setBounds(Math.round(xMin),Math.round(gradientMinY),Math.round(xMax),Math.round(gradientMaxY));    gradient.draw(canvas);  } else {    if (Math.abs(yMin - yMax) < 1) {      if (yMin < yMax) {        yMax=yMin + 1;      } else {        yMax=yMin - 1;      }    }    canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(yMax),paint);  }}  }
class C{  public MethodNode addMethod(String name,int modifiers,ClassNode returnType,Parameter[] parameters,ClassNode[] exceptions,Statement code){  MethodNode other=getDeclaredMethod(name,parameters);  if (other != null) {    return other;  }  MethodNode node=new MethodNode(name,modifiers,returnType,parameters,exceptions,code);  addMethod(node);  return node;}  }
class C{  public static void applyToOrSetGone(ImageHolder imageHolder,ImageView imageView,String tag){  boolean imageSet=applyTo(imageHolder,imageView,tag);  if (imageView != null) {    if (imageSet) {      imageView.setVisibility(View.VISIBLE);    } else {      imageView.setVisibility(View.GONE);    }  }}  }
class C{  public void delete() throws IOException {  close();  IOUtil.deleteContents(directory);}  }
class C{  private static int gallopRight(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (key.compareTo(a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  private boolean isResourceExist(ClassLoader ldr,String clsName){  assert ldr != null;  assert clsName != null;  String rsrcName=clsName.replaceAll("\\.","/") + ".class";  InputStream in=null;  try {    in=ldr.getResourceAsStream(rsrcName);    return in != null;  }  finally {    U.closeQuiet(in);  }}  }
class C{  public void deleteFile(Path filePath) throws IOException {  new FileUtils().deleteDir(dirPath.resolve(filePath));}  }
class C{  public int num2index(double value,double[] cuts){  int count=0;  while ((count < cuts.length) && (cuts[count] <= value)) {    count++;  }  return count;}  }
class C{  public boolean isImage(String name){  byte b=((Byte)resourceTypes.get(name)).byteValue();  return b == MAGIC_IMAGE_LEGACY || b == MAGIC_ANIMATION_LEGACY || b == MAGIC_INDEXED_IMAGE_LEGACY || b == MAGIC_IMAGE || b == MAGIC_TIMELINE;}  }
class C{  private void skipToEndOfLine(){  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n') {      pos++;      break;    }  }}  }
class C{  public boolean adjustValue(int key,double amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public static Validator<CharSequence> domainName(@NonNull final Context context,@StringRes final int resourceId){  return new DomainNameValidator(context,resourceId);}  }
class C{  public static ExoMediaPlayer.RendererBuilder createRendererBuilder(Context context,Media media){  final String userAgent=Util.getUserAgent(context,"Toro");  int contentType=inferContentType(media.getMediaUri(),"");switch (contentType) {case Util.TYPE_SS:    return new SmoothStreamingRendererBuilder(context,userAgent,media.getMediaUri().toString(),new SmoothStreamingTestMediaDrmCallback());case Util.TYPE_HLS:  return new HlsRendererBuilder(context,userAgent,media.getMediaUri().toString());case Util.TYPE_DASH:WidevineTestMediaDrmCallback callback=media instanceof ExoVideo ? new WidevineTestMediaDrmCallback(((ExoVideo)media).getContentId(),((ExoVideo)media).getProvider()) : new WidevineTestMediaDrmCallback(null,null);return new DashRendererBuilder(context,userAgent,media.getMediaUri().toString(),callback);case Util.TYPE_OTHER:return new ExtractorRendererBuilder(context,userAgent,media.getMediaUri());default :throw new IllegalStateException("Unsupported type: " + contentType);}}  }
class C{  private Object readResolve(){  return INSTANCE;}  }
class C{  public void hexCursor(BoardViewEvent b){}  }
class C{  public void log(@GuardSatisfied Level level,String msg,Object params[]){  throw new RuntimeException();}  }
class C{  public ExtendableMap(){  links=new LabeledGraph<String,Double>();  locationPositions=new Hashtable<String,Point2D>();}  }
class C{  @Override public void shrinkToMinScore(final int minScore){synchronized (this.map) {    final Iterator<Map.Entry<E,AtomicInteger>> i=this.map.entrySet().iterator();    Map.Entry<E,AtomicInteger> entry;    while (i.hasNext()) {      entry=i.next();      if (entry.getValue().intValue() < minScore)       i.remove();    }  }}  }
class C{  public static BitmapRegionDecoderCompat newInstance(String pathName,boolean isShareable) throws IOException {  return new BitmapRegionDecoderCompat(isAPI10() ? BitmapRegionDecoderNative.newInstance(pathName,isShareable) : BitmapRegionDecoderGinger.newInstance(pathName,isShareable));}  }
class C{  public FixedsizeForgetfulHashSet(int size){  map=new FixedsizeForgetfulHashMap<E,Object>(size);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.754 -0500",hash_original_method="E723E071866ECCDFA5A86BCF8A6012B5",hash_generated_method="C38F869CE1A4085986CDE3EF2701AD8C") public static boolean isEmailAddress(String address){  if (TextUtils.isEmpty(address)) {    return false;  }  String s=extractAddrSpec(address);  Matcher match=Patterns.EMAIL_ADDRESS.matcher(s);  return match.matches();}  }
class C{  public Yaml(Representer representer,DumperOptions dumperOptions){  this(new Constructor(),representer,dumperOptions,new Resolver());}  }
class C{  public void testEmptyTokenSeparator() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","tokenSeparator","").create(stream);  assertTokenStreamContents(stream,new String[]{"this","thisis","is","isa","a","atest","test"});}  }
class C{  public List<MLetContent> parseURL(String urlname) throws IOException {  URL url;  if (urlname.indexOf(':') <= 1) {    String userDir=System.getProperty("user.dir");    String prot;    if (userDir.charAt(0) == '/' || userDir.charAt(0) == File.separatorChar) {      prot="file:";    } else {      prot="file:/";    }    url=new URL(prot + userDir.replace(File.separatorChar,'/') + "/");    url=new URL(url,urlname);  } else {    url=new URL(urlname);  }  return parse(url);}  }
class C{  public Rational(Rational r){  mNumerator=r.mNumerator;  mDenominator=r.mDenominator;}  }
class C{  public DrawerBuilder withTranslucentNavigationBarProgrammatically(boolean translucentNavigationBarProgrammatically){  this.mTranslucentNavigationBarProgrammatically=translucentNavigationBarProgrammatically;  if (translucentNavigationBarProgrammatically) {    this.mTranslucentNavigationBar=true;  }  return this;}  }
class C{  public final void requestReplayDet(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator())   replayDetState=value;}  }
class C{  private Map<URI,Set<URI>> mapVpoolVolumes(){  Set<URI> volumes=getVolumes();  Map<URI,Set<URI>> vpoolVolumes=Maps.newHashMap();  for (  URI volume : volumes) {    VolumeRestRep vol=getClient().blockVolumes().get(volume);    if (!vpoolVolumes.containsKey(vol.getVirtualPool().getId())) {      vpoolVolumes.put(vol.getVirtualPool().getId(),new HashSet<URI>());    }    vpoolVolumes.get(vol.getVirtualPool().getId()).add(vol.getId());  }  return vpoolVolumes;}  }
class C{  public Map<String,Object> shallowCopy(){  return new LinkedHashMap<>(propMap);}  }
class C{  public boolean prepare(@Nullable Pass<ExtractMethodProcessor> pass) throws PrepareFailedException {  myExpression=null;  if (myElements.length == 1 && myElements[0] instanceof PsiExpression) {    final PsiExpression expression=(PsiExpression)myElements[0];    if (expression instanceof PsiAssignmentExpression && expression.getParent() instanceof PsiExpressionStatement) {      myElements[0]=expression.getParent();    } else {      myExpression=expression;    }  }  final PsiElement codeFragment=ControlFlowUtil.findCodeFragment(myElements[0]);  myCodeFragmentMember=codeFragment.getUserData(ElementToWorkOn.PARENT);  if (myCodeFragmentMember == null) {    myCodeFragmentMember=codeFragment.getParent();  }  if (myCodeFragmentMember == null) {    myCodeFragmentMember=ControlFlowUtil.findCodeFragment(codeFragment.getContext()).getParent();  }  myControlFlowWrapper=new ControlFlowWrapper(myProject,codeFragment,myElements);  try {    myExitStatements=myControlFlowWrapper.prepareExitStatements(myElements);    if (myControlFlowWrapper.isGenerateConditionalExit()) {      myGenerateConditionalExit=true;    } else {      myHasReturnStatement=myExpression == null && myControlFlowWrapper.isReturnPresentBetween();    }    myFirstExitStatementCopy=myControlFlowWrapper.getFirstExitStatementCopy();  } catch (  ControlFlowWrapper.ExitStatementsNotSameException e) {    myExitStatements=myControlFlowWrapper.getExitStatements();    myNotNullConditionalCheck=areAllExitPointsAreNotNull(getExpectedReturnType());    if (!myNotNullConditionalCheck) {      showMultipleExitPointsMessage();      return false;    }  }  myOutputVariables=myControlFlowWrapper.getOutputVariables();  return chooseTargetClass(codeFragment,pass);}  }
class C{  public synchronized void load() throws Exception {  load(getConfFileName());}  }
class C{  protected TeXIcon(Box b,float size){  this(b,size,false);}  }
class C{  public boolean isPaused(){  return recordingTrackPaused;}  }
class C{  public void done(){}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  private JMenu createToolsMenu(){  JMenuItem menuItem;  JMenu menu;  menu=new JMenu(ResourceManager.translate("tools.menu"));  menu.setMnemonic(KeyStroke.getKeyStroke(ResourceManager.translate("tools.menu.mnem")).getKeyCode());  menu.getAccessibleContext().setAccessibleDescription(ResourceManager.translate("tools.menu.description"));  add(menu);  longMenuItem=new JMenuItem(ResourceManager.translate("tools.longrunning"),KeyStroke.getKeyStroke(ResourceManager.translate("tools.longrunning.mnem")).getKeyCode());  longMenuItem.setIcon(TDA.createImageIcon("FindLRThreads.png"));  longMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L,ActionEvent.ALT_MASK));  longMenuItem.getAccessibleContext().setAccessibleDescription("Find long running threads...");  longMenuItem.addActionListener(listener);  longMenuItem.setEnabled(false);  menu.add(longMenuItem);  menu.addSeparator();  menuItem=new JMenuItem("Filters",KeyEvent.VK_F);  menuItem.setIcon(TDA.createImageIcon("Filters.png"));  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,ActionEvent.ALT_MASK));  menuItem.getAccessibleContext().setAccessibleDescription("Setup Filter");  menuItem.addActionListener(listener);  menu.add(menuItem);  menuItem=new JMenuItem("Categories",KeyEvent.VK_F);  menuItem.setIcon(TDA.createImageIcon("CustomCat.png"));  menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G,ActionEvent.ALT_MASK));  menuItem.getAccessibleContext().setAccessibleDescription("Setup Categories");  menuItem.addActionListener(listener);  menu.add(menuItem);  menu.addSeparator();  menuItem=new JMenuItem(ResourceManager.translate("file.preferences"),KeyStroke.getKeyStroke(ResourceManager.translate("file.preferences.mnem")).getKeyCode());  menuItem.setIcon(TDA.createImageIcon("Preferences.png"));  menuItem.getAccessibleContext().setAccessibleDescription(ResourceManager.translate("file.preferences.description"));  menuItem.addActionListener(listener);  menu.add(menuItem);  return (menu);}  }
class C{  public static CustomWebViewDialog create(String dialogTitle,String htmlFileName,int accentColor,String positiveText,DialogInterface.OnClickListener positiveListener,String neutralText,DialogInterface.OnClickListener neutralListener){  CustomWebViewDialog dialog=new CustomWebViewDialog();  Bundle args=new Bundle();  args.putString("dialogTitle",dialogTitle);  args.putString("htmlFileName",htmlFileName);  args.putInt("accentColor",accentColor);  args.putString("positiveText",positiveText);  dialog.setPositiveClickCallback(positiveListener);  args.putString("neutralText",neutralText);  dialog.setNeutralClickCallback(neutralListener);  dialog.setArguments(args);  return dialog;}  }
class C{  @Override public boolean containsKey(final Object key){  for (int i=0; i < contents.length; i+=2) {    final String k=contents[i];    if (k.equals(key)) {      return true;    }  }  return false;}  }
class C{  public static void initNamespaces(PrefixMapping prefixMapping){  prefixMapping.setNsPrefix("rdf",RDF.getURI());  prefixMapping.setNsPrefix("rdfs",RDFS.getURI());  prefixMapping.setNsPrefix("owl",OWL.getURI());  prefixMapping.setNsPrefix("xsd",XSD.getURI());}  }
class C{  public static org.apache.nutch.storage.WebPage.Builder newBuilder(org.apache.nutch.storage.WebPage other){  return new org.apache.nutch.storage.WebPage.Builder(other);}  }
class C{  public VariableConfigResource addConfig(String variableName,String variableValue){  variableSubstitutions.add(new Tuple2<>(variableName,variableValue));  return this;}  }
class C{  public void addOutgoingEdge(final EdgeType edge){  Preconditions.checkNotNull(edge,"Error: Edge argument can not be null");  Preconditions.checkArgument(!m_outgoingEdges.contains(edge),"Error: Outgoing edge was added before");  m_outgoingEdges.add(edge);}  }
class C{  public static int executeUpdate(String sql,String trxName){  return executeUpdate(sql,trxName,0);}  }
class C{  public void add(DEREncodedKeyValue derEncodedKeyValue){  this.constructionElement.appendChild(derEncodedKeyValue.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  @Override protected String compute(String text,double index){  if (text == null) {    return null;  } else   if (Double.isNaN(index)) {    index=0;  } else   if (index >= text.length() || index < 0) {    return text;  }  return text.substring(Math.max(0,text.length() - (int)index));}  }
class C{  public void doNextOp(DhcpStateMachine machine){  machine.onOfferReceived(mBroadcast,mTransId,mClientMac,mYourIp,mServerIdentifier);}  }
class C{  public AndPredicate(Predicate<T> first,Predicate<T> second){  this.first=first;  this.second=second;}  }
class C{  public static String bytesToHex(byte[] bytes,boolean upperCase){  char[] hexChars=new char[bytes.length * 2];  int v;  for (int j=0; j < bytes.length; j++) {    v=bytes[j] & 0xFF;    hexChars[j * 2]=Constants.HEXES_ARRAY[v >>> 4];    hexChars[j * 2 + 1]=Constants.HEXES_ARRAY[v & 0x0F];  }  if (upperCase) {    return new String(hexChars);  }  return new String(hexChars).toLowerCase();}  }
class C{  public boolean isAutoCommitModeForLastIdentityValueReading(){  return autoCommitModeForLastIdentityValueReading;}  }
class C{  public void readExif(InputStream inStream) throws IOException {  if (inStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  ExifData d=null;  try {    d=new ExifReader(this).read(inStream);  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }  mData=d;}  }
class C{  @Override public void scatter(final IGASState<SSSP.VS,SSSP.ES,Integer> state,final IGASScheduler sch,final Value u,final Statement e){  final Value other=state.getOtherVertex(u,e);  final VS selfState=state.getState(u);  final VS otherState=state.getState(other);  final Literal l=state.getLinkAttr(u,e);  final double edgeLength;  if (l != null) {    if (log.isDebugEnabled())     log.debug(l);    edgeLength=l.doubleValue();  } else {    edgeLength=EDGE_LENGTH;  }  final double newDist=selfState.dist() + edgeLength;  final double otherDist=otherState.dist();  if (newDist < otherDist) {    if (otherState.scatter(u,newDist)) {      if (log.isDebugEnabled())       log.debug("u=" + u + " @ "+ selfState.dist()+ ", scheduling: "+ other+ " with newDist="+ newDist);      sch.schedule(other);    }  }}  }
class C{  @Override public void onUpdateComplete(int taskId,Object cookie,int updateCount){}  }
class C{  @RequestMapping(method=RequestMethod.GET) public ResultVO all(@And({@Spec(path="name",spec=Like.class),@Spec(path="validFlag",constVal="VALID",spec=In.class),@Spec(path="createdDate",params={"createdDateAfter, createdDateBefore"},spec=DateBetween.class)}) Specification<Group> groupSpecification,GroupParam param){  try {    if (param.getPageNo() == null) {      return resultHelper.successResp(groupDomain.getAll(groupSpecification,QueryHelper.getSort(param.getSortBy()),GroupVO.class));    }    return resultHelper.successResp(groupDomain.getPage(groupSpecification,QueryHelper.getPageRequest(param),GroupVO.class));  } catch (  CommonsException e) {    return resultHelper.infoResp(logger,e.getErrorType(),e.getMessage());  }catch (  Exception e) {    return resultHelper.errorResp(logger,e,ErrorType.UNKNOWN,e.getMessage());  }}  }
class C{  public String globalInfo(){  return "A supervised attribute filter that can be used to select " + "attributes. It is very flexible and allows various search " + "and evaluation methods to be combined.";}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public void deleteProject(Serializable projectId) throws IOException {  String tailUrl=GitlabProject.URL + "/" + sanitizeProjectId(projectId);  retrieve().method("DELETE").to(tailUrl,null);}  }
class C{  public final static VersionInfo loadVersionInfo(final String pckg,ClassLoader clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  if (clsldr == null)   clsldr=Thread.currentThread().getContextClassLoader();  Properties vip=null;  try {    InputStream is=clsldr.getResourceAsStream(pckg.replace('.','/') + "/" + VERSION_PROPERTY_FILE);    if (is != null) {      try {        Properties props=new Properties();        props.load(is);        vip=props;      }  finally {        is.close();      }    }  } catch (  IOException ex) {  }  VersionInfo result=null;  if (vip != null)   result=fromMap(pckg,vip,clsldr);  return result;}  }
class C{  public static String toDateString(java.util.Date date,String format){  if (date == null)   return "";  SimpleDateFormat dateFormat=null;  if (format != null) {    dateFormat=new SimpleDateFormat(format);  } else {    dateFormat=new SimpleDateFormat();  }  Calendar calendar=Calendar.getInstance();  calendar.setTime(date);  return dateFormat.format(date);}  }
class C{  protected void preorder(TreeNode<E> root){  if (root == null)   return;  System.out.print(root.element + " ");  preorder(root.left);  preorder(root.right);}  }
class C{  public final short readShort() throws IOException {  readFully(scratch,0,SizeOf.SHORT);  return Memory.peekShort(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  public int readUnary() throws IOException {  if (ASSERTS)   assert fill < 32 : fill + " >= " + 32;  int x;  if (fill < 16)   refill();  if (fill != 0) {    final int currentLeftAligned=current << 32 - fill;    if (currentLeftAligned != 0) {      if ((currentLeftAligned & 0xFF000000) != 0)       x=8 - Fast.BYTEMSB[currentLeftAligned >>> 24]; else       if ((currentLeftAligned & 0xFF0000) != 0)       x=16 - Fast.BYTEMSB[currentLeftAligned >>> 16]; else       if ((currentLeftAligned & 0xFF00) != 0)       x=24 - Fast.BYTEMSB[currentLeftAligned >>> 8]; else       x=32 - Fast.BYTEMSB[currentLeftAligned & 0xFF];      readBits+=x;      fill-=x;      return x - 1;    }  }  x=fill;  while ((current=read()) == 0)   x+=8;  x+=7 - (fill=Fast.BYTEMSB[current]);  readBits+=x + 1;  return x;}  }
class C{  public static void invokeInEveryVMRepeatingIfNecessary(final RepeatableRunnable runnable,final long repeatTimeoutMs){  for (int h=0; h < Host.getHostCount(); h++) {    Host host=Host.getHost(h);    for (int v=0; v < host.getVMCount(); v++) {      VM vm=host.getVM(v);      vm.invokeRepeatingIfNecessary(runnable,repeatTimeoutMs);    }  }}  }
class C{  public void nonMatchingParams(int param1,int param2){}  }
class C{  protected void shutdown(){  this.initiationListenerExecutor.shutdownNow();}  }
class C{  public void testBug24360() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  Connection c=null;  Properties props=new Properties();  props.setProperty("useServerPrepStmts","true");  try {    c=getConnectionWithProps(props);    this.pstmt=c.prepareStatement("SHOW PROCESSLIST");    this.pstmt.setFetchSize(5);    this.pstmt.execute();  }  finally {    if (c != null) {      c.close();    }  }}  }
class C{  public static void upgradeToJerseyConfigBean(List<Config> configs){  List<Config> configsToAdd=new ArrayList<>();  List<Config> configsToRemove=new ArrayList<>();  List<String> movedConfigs=ImmutableList.of("conf.requestTimeoutMillis","conf.numThreads","conf.authType","conf.oauth","conf.basicAuth","conf.useProxy","conf.proxy","conf.sslConfig");  for (  Config config : configs) {    if (hasPrefixIn(movedConfigs,config.getName())) {      configsToRemove.add(config);      configsToAdd.add(new Config(config.getName().replace("conf.","conf.client."),config.getValue()));    }  }  configsToAdd.add(new Config("conf.client.transferEncoding",RequestEntityProcessing.CHUNKED));  configs.removeAll(configsToRemove);  configs.addAll(configsToAdd);}  }
class C{  @Override public void processAttribute(String namespace,String localName,String value) throws ParseException {  if (namespace.equals("")) {    if (localName.equals("type")) {      try {        mimeType=new ContentType(value);      } catch (      IllegalArgumentException e) {        throw new ParseException(CoreErrorDomain.ERR.invalidMimeType,e);      }    }  }}  }
class C{  private void updateOnFontChange(){  Container top=this.getTopLevelAncestor();  if (top != null && top.isVisible()) {    update();  }}  }
class C{  public PaddedBufferedBlockCipher(BlockCipher cipher,BlockCipherPadding padding){  this.cipher=cipher;  this.padding=padding;  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public Double valueAt(int index){  if (mGarbage) {    gc();  }  return mValues[index];}  }
class C{  public EntropyCalculatorMultiVariateGaussian(){}  }
class C{  public RowList(Session session){  this.session=session;  if (session.getDatabase().isPersistent()) {    maxMemory=session.getDatabase().getMaxOperationMemory();  } else {    maxMemory=0;  }}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){  extProfile.declare(ListEntry.class,CustomElementCollection.getDefaultDescription());}  }
class C{  public boolean isSupported(Version latestAllowedVersion){  return compareTo(latestAllowedVersion) <= 0;}  }
class C{  @Override public void mouseClicked(MouseEvent e){  if (mouseClickedListener != null && e.getClickCount() == 1 && !e.isAltDown() && !e.isAltGraphDown()) {    mouseClickedListener.mouseClicked();  }}  }
class C{  public static void closeSilently(ResultSet rs){  if (rs != null) {    try {      rs.close();    } catch (    SQLException e) {    }  }}  }
class C{  public void close(){  if (container != null) {    for (    SolrCore c : container.getCores()) {      if (c.getOpenCount() > 1)       throw new RuntimeException("SolrCore.getOpenCount()==" + c.getOpenCount());    }  }  if (container != null) {    container.shutdown();    container=null;  }}  }
class C{  public String invertSelectionTipText(){  return "Whether to invert the selection.";}  }
class C{  @Override public VertexProperty readVertexProperty(final InputStream inputStream,final Function<Attachable<VertexProperty>,VertexProperty> vertexPropertyAttachMethod) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  @Override public Response listEnvironments(){  Set<Environment> environments=environmentManager.getEnvironments();  Set<EnvironmentDto> environmentDtos=Sets.newHashSet();  for (  Environment environment : environments) {    try {      EnvironmentDto environmentDto=new EnvironmentDto(environment.getId(),environment.getName(),environment.getStatus(),convertContainersToContainerJson(environment.getContainerHosts()),environment.getClass().getName());      environmentDtos.add(environmentDto);    } catch (    Exception e) {      LOG.error("Error JSON-ifying environment {}: {}",environment.getId(),e.getMessage());    }  }  return Response.ok(JsonUtil.toJson(environmentDtos)).build();}  }
class C{  public int numLabels(){  if (lbStr2Int == null) {    return 0;  } else {    return lbStr2Int.size();  }}  }
class C{  public boolean isTags(){  return tags;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static String validateString(Map<String,Object> map,String key,String errorPrefix) throws IOException {  Object value=map.get(key);  if (value == null) {    throw new IOException(String.format(VALUE_NOT_FOUND_MESSAGE,errorPrefix,key));  }  if (!(value instanceof String)) {    throw new IOException(String.format(VALUE_WRONG_TYPE_MESSAGE,errorPrefix,"string",key));  }  return (String)value;}  }
class C{  public String testForLoop(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value,Object oldValue){  if (isCalloutActive() || value == null)   return "";  Integer productCategoryId=(Integer)mTab.getValue(MProductCategory.COLUMNNAME_M_Product_Category_ID);  if (productCategoryId == null)   productCategoryId=new Integer(0);  if (productCategoryId.intValue() > 0) {    MProductCategory pc=new MProductCategory(ctx,productCategoryId.intValue(),null);    pc.setM_Product_Category_Parent_ID(((Integer)value).intValue());    if (pc.hasLoopInTree())     return "ProductCategoryLoopDetected";  }  return "";}  }
class C{  public BERSet(){}  }
class C{  public static CorrelationMatrix serializableInstance(){  return new CorrelationMatrix(new LinkedList<Node>(),new TetradMatrix(0,0),1);}  }
class C{  private void undeployFile(String directory,String file){  String fileName=getFileHandler().append(directory,file);  if (fileExists(fileName)) {    getLogger().info("Undeploying [" + fileName + "]...",this.getClass().getName());    getFileHandler().delete(fileName);  } else {    getLogger().info("Couldn't not find file to undeploy [" + fileName + "]",this.getClass().getName());  }}  }
class C{  public Configuration createInitializedConfig(FlowProcess<Configuration> flowProcess,Configuration parentConfig){  this.env.getConfig().registerKryoType(Tuple.class);  Configuration config=parentConfig == null ? new JobConf() : HadoopUtil.copyJobConf(parentConfig);  config.set("cascading.flow.step.num",Integer.toString(getOrdinal()));  HadoopUtil.setIsInflow(config);  this.setConfig(config);  return config;}  }
class C{  public static Result fromContent(Element content) throws IllegalArgumentException {  if (content == null) {    throw new IllegalArgumentException("content cannot be null");  }  return fromContent(new XMLContent(content));}  }
class C{  public static org.oscm.vo.VOParameterDefinition convertToApi(org.oscm.internal.vo.VOParameterDefinition oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOParameterDefinition newVO=new org.oscm.vo.VOParameterDefinition();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameterOptions(convertToApiVOParameterOption(oldVO.getParameterOptions()));  newVO.setDefaultValue(oldVO.getDefaultValue());  newVO.setMinValue(oldVO.getMinValue());  newVO.setMaxValue(oldVO.getMaxValue());  newVO.setMandatory(oldVO.isMandatory());  newVO.setConfigurable(oldVO.isConfigurable());  newVO.setParameterType(EnumConverter.convert(oldVO.getParameterType(),org.oscm.types.enumtypes.ParameterType.class));  newVO.setParameterId(oldVO.getParameterId());  newVO.setValueType(EnumConverter.convert(oldVO.getValueType(),org.oscm.types.enumtypes.ParameterValueType.class));  newVO.setModificationType(EnumConverter.convert(oldVO.getModificationType(),org.oscm.types.enumtypes.ParameterModificationType.class));  newVO.setDescription(oldVO.getDescription());  return newVO;}  }
class C{  private void optimizeBasicBlockLIR(IR ir,BasicBlock bb){  AvExCache cache=new AvExCache(ir.options,false);  for (Instruction inst=bb.firstRealInstruction(), sentinel=bb.lastInstruction(), nextInstr=null; inst != sentinel; inst=nextInstr) {    nextInstr=inst.nextInstructionInCodeOrder();    if (isExpression(inst)) {      expressionHelper(ir,cache,inst);    } else     if (isCheck(inst)) {      checkHelper(ir,cache,inst);    }    cache.eliminate(inst);  }}  }
class C{  public MissingDataException(final String message){  super(message);}  }
class C{  public static Object invoke(Object obj,String methodName,boolean newValue) throws NoSuchMethodException {  try {    Method method=obj.getClass().getMethod(methodName,new Class[]{Boolean.TYPE});    return method.invoke(obj,new Object[]{newValue});  } catch (  IllegalAccessException e) {    throw new NoSuchMethodException(methodName + " is not accessible");  }catch (  InvocationTargetException e) {    throw new InternalError(e.getMessage());  }}  }
class C{  public DataFilterCriterion.Builder<Select<Model>> and(){  return new DataFilterCriterion.Builder<Select<Model>>(this,DataFilterClause.DataFilterConjunction.AND);}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public boolean isMedianVisible(){  return this.medianVisible;}  }
class C{  public SetBoundsEdit(AbstractFigure owner,Point2D.Double oldAnchor,Point2D.Double oldLead,Point2D.Double newAnchor,Point2D.Double newLead){  this.owner=owner;  this.oldAnchor=oldAnchor;  this.oldLead=oldLead;  this.newAnchor=newAnchor;  this.newLead=newLead;}  }
class C{  public Company industries(List<Industry> industries){  this.industries=industries;  return this;}  }
class C{  public static int testIfRead1Snippet(int a){  int res=container.a;  if (a < 0) {    container.a=10;  }  return res;}  }
class C{  boolean isPersisted(int id){  int bit=1 << id;  return (persisted & bit) != 0;}  }
class C{  public boolean extractEigenvectors(Vec3 result1,Vec3 result2,Vec3 result3){  if (result1 == null || result2 == null || result3 == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","extractEigenvectors","missingResult"));  }  if (this.m[1] != this.m[4] || this.m[2] != this.m[8] || this.m[6] != this.m[9]) {    return false;  }  final double EPSILON=1.0e-10;  final int MAX_SWEEPS=32;  double m11=this.m[0];  double m12=this.m[1];  double m13=this.m[2];  double m22=this.m[5];  double m23=this.m[6];  double m33=this.m[10];  double[][] r=new double[3][3];  r[0][0]=r[1][1]=r[2][2]=1d;  for (int a=0; a < MAX_SWEEPS; a++) {    if (Math.abs(m12) < EPSILON && Math.abs(m13) < EPSILON && Math.abs(m23) < EPSILON) {      break;    }    if (m12 != 0) {      double u=(m22 - m11) * 0.5 / m12;      double u2=u * u;      double u2p1=u2 + 1;      double t=(u2p1 != u2) ? ((u < 0) ? -1 : 1) * (Math.sqrt(u2p1) - Math.abs(u)) : 0.5 / u;      double c=1 / Math.sqrt(t * t + 1);      double s=c * t;      m11-=t * m12;      m22+=t * m12;      m12=0;      double temp=c * m13 - s * m23;      m23=s * m13 + c * m23;      m13=temp;      for (int i=0; i < 3; i++) {        temp=c * r[i][0] - s * r[i][1];        r[i][1]=s * r[i][0] + c * r[i][1];        r[i][0]=temp;      }    }    if (m13 != 0) {      double u=(m33 - m11) * 0.5 / m13;      double u2=u * u;      double u2p1=u2 + 1;      double t=(u2p1 != u2) ? ((u < 0) ? -1 : 1) * (Math.sqrt(u2p1) - Math.abs(u)) : 0.5 / u;      double c=1 / Math.sqrt(t * t + 1);      double s=c * t;      m11-=t * m13;      m33+=t * m13;      m13=0;      double temp=c * m12 - s * m23;      m23=s * m12 + c * m23;      m12=temp;      for (int i=0; i < 3; i++) {        temp=c * r[i][0] - s * r[i][2];        r[i][2]=s * r[i][0] + c * r[i][2];        r[i][0]=temp;      }    }    if (m23 != 0) {      double u=(m33 - m22) * 0.5 / m23;      double u2=u * u;      double u2p1=u2 + 1;      double t=(u2p1 != u2) ? ((u < 0) ? -1 : 1) * (Math.sqrt(u2p1) - Math.abs(u)) : 0.5 / u;      double c=1 / Math.sqrt(t * t + 1);      double s=c * t;      m22-=t * m23;      m33+=t * m23;      m23=0;      double temp=c * m12 - s * m13;      m13=s * m12 + c * m13;      m12=temp;      for (int i=0; i < 3; i++) {        temp=c * r[i][1] - s * r[i][2];        r[i][2]=s * r[i][1] + c * r[i][2];        r[i][1]=temp;      }    }  }  int i1=0;  int i2=1;  int i3=2;  int itemp;  double temp;  if (m11 < m22) {    temp=m11;    m11=m22;    m22=temp;    itemp=i1;    i1=i2;    i2=itemp;  }  if (m22 < m33) {    temp=m22;    m22=m33;    m33=temp;    itemp=i2;    i2=i3;    i3=itemp;  }  if (m11 < m22) {    temp=m11;    m11=m22;    m22=temp;    itemp=i1;    i1=i2;    i2=itemp;  }  result1.set(r[0][i1],r[1][i1],r[2][i1]);  result2.set(r[0][i2],r[1][i2],r[2][i2]);  result3.set(r[0][i3],r[1][i3],r[2][i3]);  result1.normalize();  result2.normalize();  result3.normalize();  result1.multiply(m11);  result2.multiply(m22);  result3.multiply(m33);  return true;}  }
class C{  public void startAutoHideTimer(){  autoHideTimer.start();}  }
class C{  private String write(Object value,int length) throws Exception {  StringBuilder text=new StringBuilder(length);  for (int i=0; i < length; i++) {    Object entry=Array.get(value,i);    if (entry != null) {      text.append(entry);    }  }  return text.toString();}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public String shortFormatDayTime(Date dt){  if (dt == null) {    return "";  }  Date now=new Date();  dt=new Date(dt.getTime());  if (mDate.format(now).equals(mDate.format(dt))) {    return sTime.format(dt);  } else   if (Math.abs(now.getTime() - dt.getTime()) < ONE_YEAR) {    return sdtFmt.format(dt);  } else {    return mDate.format(dt);  }}  }
class C{  public UIHelp(){  initComponents();  helpContainerPanel.setEnabledAt(0,false);  helpContainerPanel.setEnabledAt(1,false);}  }
class C{  private void initSeq(int sequenceNumber){  baseSeq=sequenceNumber;  maxSeq=sequenceNumber;  badSeq=RTP_SEQ_MOD + 1;  cycles=0;  received=0;  receivedPrior=0;  expectedPrior=0;}  }
class C{  public ContraryObservationCountAnnotation(){  super("COC","Contrary observation count",AnnotationDataType.INTEGER);}  }
class C{  public boolean isDomainPattern(){  return _domain_pattern;}  }
class C{  public void testGetDomainMBeanName(){  try {    String objectName=deployer.getDomainMBeanName("foo").toString();    assertEquals("foo:j2eeType=J2EEDomain,name=foo",objectName);  } catch (  MalformedObjectNameException e) {    fail("No error should be thrown");  }  try {    deployer.getDomainMBeanName(null).toString();    fail("error should be thrown");  } catch (  MalformedObjectNameException expected) {  }  try {    deployer.getDomainMBeanName("").toString();    fail("error should be thrown");  } catch (  MalformedObjectNameException expected) {  }}  }
class C{  @ObjectiveCName("onConversationClosedWithPeer:") public void onConversationClosed(@NotNull Peer peer){  modules.getEvents().post(new PeerChatClosed(peer));}  }
class C{  public Vector2d fma(double a,Vector2dc b){  x+=a * b.x();  y+=a * b.y();  return this;}  }
class C{  @Override public void panDomainAxes(double percent,PlotRenderingInfo info,Point2D source){  if (!isDomainPannable() || this.domainAxis == null) {    return;  }  double length=this.domainAxis.getRange().getLength();  double adj=percent * length;  if (this.domainAxis.isInverted()) {    adj=-adj;  }  this.domainAxis.setRange(this.domainAxis.getLowerBound() + adj,this.domainAxis.getUpperBound() + adj);}  }
class C{  public boolean persist(@NonNull final String module,@NonNull final String key,@Nullable final String previousKey,@Nullable final String value){  final Uri uri=mTrayUri.builder().setModule(module).setKey(key).build();  return persist(uri,value,previousKey);}  }
class C{  public String loadImplementation(String uuidControl){  ServerInitializer.inheritVeriniceContextState();  String implementation=null;  try {    LoadElementByUuid<Control> command=new LoadElementByUuid(Control.TYPE_ID,uuidControl,RetrieveInfo.getPropertyInstance());    command=getCommandService().executeCommand(command);    Control control=command.getElement();    implementation=control.getImplementation();  } catch (  Exception t) {    log.error("Error while loading implementation.",t);  }  if (log.isDebugEnabled()) {    log.debug("uuid control: " + uuidControl + ", implementation: "+ implementation);  }  return implementation;}  }
class C{  private SpeechletResponse handleCityDialogRequest(final Intent intent,final Session session){  CityDateValues<String,String> cityStation;  try {    cityStation=getCityStationFromIntent(intent,false);  } catch (  Exception e) {    String speechOutput="Currently, I know tide information for these coastal cities: " + getAllStationsText() + "Which city would you like tide information for?";    return newAskResponse(speechOutput,speechOutput);  }  if (session.getAttributes().containsKey(SESSION_DATE_DISPLAY)) {    String displayDate=(String)session.getAttribute(SESSION_DATE_DISPLAY);    String requestDateParam=(String)session.getAttribute(SESSION_DATE_REQUEST);    CityDateValues<String,String> dateObject=new CityDateValues<String,String>(displayDate,requestDateParam);    return getFinalTideResponse(cityStation,dateObject);  } else {    session.setAttribute(SESSION_CITY,cityStation.speechValue);    session.setAttribute(SESSION_STATION,cityStation.apiValue);    String speechOutput="For which date?";    String repromptText="For which date would you like tide information for " + cityStation.speechValue + "?";    return newAskResponse(speechOutput,repromptText);  }}  }
class C{  public Object clone(){  Coordinate[] cloneCoordinates=new Coordinate[size()];  for (int i=0; i < coordinates.length; i++) {    cloneCoordinates[i]=(Coordinate)coordinates[i].clone();  }  return new DefaultCoordinateSequence(cloneCoordinates);}  }
class C{  public void testPutAllMultupleEntitiesAndStreamerDfltOffHeapRowCacheSize(){  doStreamerBatchTest(50,1_000,new Class<?>[]{Integer.class,CacheOffheapBatchIndexingBaseTest.Person.class,Integer.class,CacheOffheapBatchIndexingBaseTest.Organization.class},CacheConfiguration.DFLT_SQL_ONHEAP_ROW_CACHE_SIZE,true);}  }
