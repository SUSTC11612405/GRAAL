class C{  private void writeIt(String prefix,String msg,Throwable th){  if (debugFile == null) {    String debugFileName=resolveDebugFileName();    debugFile=debugFileProvider.getInstance(debugFileName);  }  try {    if (this.debugLevel == DebugLevel.ON) {      stdoutDebugFile.writeIt(prefix,msg,th);    } else {      try {        this.debugFile.writeIt(prefix,msg,th);      } catch (      IOException e) {        if (lastDirectoryIssue + DIR_ISSUE_ERROR_INTERVAL_IN_MS < currentTimeMillis()) {          lastDirectoryIssue=currentTimeMillis();          stdoutDebugFile.writeIt(prefix,"Debug file can't be written : " + e.getMessage(),null);        }        stdoutDebugFile.writeIt(prefix,msg,th);      }    }  } catch (  IOException ioex) {    StdDebugFile.printError(DebugImpl.class.getSimpleName(),ioex.getMessage(),ioex);  }}  }
class C{  public FloatHolder(){}  }
class C{  protected boolean checkParam(final String reqParam) throws ConnectorException {  if (reqParam == null || reqParam.equals("")) {    return true;  }  if (Pattern.compile(Constants.INVALID_PATH_REGEX).matcher(reqParam).find()) {    this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_NAME;    return false;  }  return true;}  }
class C{  public void addHost(String name,String host,String port,String type) throws ConfigurationException {  for (Iterator i=hosts.iterator(); i.hasNext(); ) {    ServerObject test=(ServerObject)i.next();    if (test.name.equals(name)) {      String[] param={name};      throw new ConfigurationException("exception.serverconfig.xml.server.name.exist",param);    }  }  try {    Integer.parseInt(port);  } catch (  NumberFormatException ex) {    String[] param={port};    throw new ConfigurationException("exception.serverconfig.xml.port.number.no.integer",param);  }  ServerObject obj=new ServerObject();  obj.name=name;  obj.host=host;  obj.port=port;  obj.type=type;  hosts.add(obj);}  }
class C{  public boolean isOperational(){  return this.isOperational;}  }
class C{  boolean verifyDeveloperPayload(Purchase p){  String payload=p.getDeveloperPayload();  return true;}  }
class C{  private String doSASLAnonymous(ByteSequence bindDN,Map<String,List<String>> saslProperties,List<Control> requestControls,List<Control> responseControls) throws ClientException, LDAPException {  String trace=null;  if (saslProperties != null) {    for (    Entry<String,List<String>> entry : saslProperties.entrySet()) {      String name=entry.getKey();      List<String> values=entry.getValue();      if (name.equalsIgnoreCase(SASL_PROPERTY_TRACE)) {        trace=getSingleValue(values,ERR_LDAPAUTH_TRACE_SINGLE_VALUED);      } else {        LocalizableMessage message=ERR_LDAPAUTH_INVALID_SASL_PROPERTY.get(name,SASL_MECHANISM_ANONYMOUS);        throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);      }    }  }  ByteString saslCredentials=trace != null ? ByteString.valueOfUtf8(trace) : null;  sendBindRequest(SASL_MECHANISM_ANONYMOUS,bindDN,saslCredentials,requestControls);  LDAPMessage responseMessage=readBindResponse(ERR_LDAPAUTH_CANNOT_READ_BIND_RESPONSE);  responseControls.addAll(responseMessage.getControls());  checkConnected(responseMessage);  checkSuccessfulBind(responseMessage,SASL_MECHANISM_ANONYMOUS);  return null;}  }
class C{  @Override public void onSaveInstanceState(@NonNull Bundle bundle){}  }
class C{  public int hashCode(){  return attrType.hashCode();}  }
class C{  public String encode(){  String encoded_string="";  if (address != null) {    encoded_string=address.encode();    if (Host.isIPv6Reference(encoded_string)) {      encoded_string=encoded_string.substring(1,encoded_string.length() - 1);    }  }  if (ttl != 0 && port != 0) {    encoded_string+=Separators.SLASH + ttl + Separators.SLASH+ port;  } else   if (ttl != 0) {    encoded_string+=Separators.SLASH + ttl;  }  return encoded_string;}  }
class C{  public static MatchedValuesFilter createExtensibleMatchFilter(String rawAttributeType,String matchingRuleID,ByteString rawAssertionValue){  Reject.ifNull(rawAttributeType,matchingRuleID,rawAssertionValue);  return new MatchedValuesFilter(EXTENSIBLE_MATCH_TYPE,rawAttributeType,rawAssertionValue,null,null,null,matchingRuleID);}  }
class C{  @AfterClass public void shutDownEmbeddedServerServer() throws Exception {  for (int i=0; i < 5; i++) {    if (i != 3) {      TestCaseUtils.deleteEntry(DN.valueOf("uid=user." + i + ", o=test"));    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  NamedNodeMap nodeMap;  DocumentType docType;  doc=(Document)load("staff",true);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  nodeMap=docType.getEntities();  assertNotNull("entitiesNotNull",nodeMap);  newNode=nodeMap.getNamedItem("ent1");  assertNotNull("entityNotNull",newNode);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  MultipartStream(InputStream input,byte[] boundary,ProgressNotifier pNotifier){  this(input,boundary,DEFAULT_BUFSIZE,pNotifier);}  }
class C{  public FileFilter(String[] p_extensions){  extensions=p_extensions;}  }
class C{  private void logAccessMessage(Level level,String message,SSOToken token){  try {    if (accessLogger == null) {      accessLogger=(com.sun.identity.log.Logger)Logger.getLogger("amRemotePolicy.access");      if (accessLogger == null) {        if (debug.warningEnabled()) {          debug.warning("PolicyEvaluator.logAccessMessage:" + "Failed to create Logger");        }        return;      }    }    LogRecord lr=new LogRecord(level,message,token);    accessLogger.log(lr,appSSOToken);  } catch (  Throwable ex) {    if (debug.warningEnabled()) {      debug.warning("PolicyEvaluator.logAccessMessage:Error" + " writing access logs");    }  }}  }
class C{  public FormatterInitException(){  super();}  }
class C{  public void error(SAXParseException e) throws SAXException {  throw e;}  }
class C{  private boolean QNameEquals(String uri,String localName){  return (equalsMayBeNullOrZeroLen(m_namespace,uri) && (equalsMayBeNullOrZeroLen(m_name,localName) || equalsMayBeNullOrZeroLen(m_nameAlias,localName)));}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < in.length) {    in[inOff]=code;    inOff++;  }  return code;}  }
class C{  public ServerFaultException(final String messageCode){  super(null,messageCode,null);}  }
class C{  public int next(){  if (_startNode == _currentNode)   return NULL;  _currentNode=_startNode;  return returnNode(_startNode);}  }
class C{  public static void main(String[] args) throws Exception {  String outputDir=args[0];  String scanPath=args[0];  String fileName=args[1];  String scanResult=outputDir + File.separator + fileName;  scanPath(scanPath,scanResult);}  }
class C{  public void cancel_state(){  if (board_is_read_only)   return;  StateInteractive new_state=interactive_state.cancel();  if (new_state != interactive_state) {    set_interactive_state(new_state);    repaint();  }}  }
class C{  public static void maybeEmbedVersionInfo(int version,ByteMatrix matrix) throws WriterException {  if (version < 7) {    return;  }  BitVector versionInfoBits=new BitVector();  makeVersionInfoBits(version,versionInfoBits);  int bitIndex=6 * 3 - 1;  for (int i=0; i < 6; ++i) {    for (int j=0; j < 3; ++j) {      int bit=versionInfoBits.at(bitIndex);      bitIndex--;      matrix.set(i,matrix.getHeight() - 11 + j,bit);      matrix.set(matrix.getHeight() - 11 + j,i,bit);    }  }}  }
class C{  public boolean contains(Object child){  return children.contains(child);}  }
class C{  public Name add(Rdn comp){  return add(size(),comp);}  }
class C{  public boolean removeAll(java.util.Collection<?> collection){  return this.hlist.removeAll(collection);}  }
class C{  public boolean nextBoolean(){  clearCaches();  return Boolean.parseBoolean(next(boolPattern()));}  }
class C{  public AddResponseProtocolOp(int resultCode){  this.resultCode=resultCode;}  }
class C{  public void onLoginFailure(Map requestParamsMap,HttpServletRequest req,HttpServletResponse res) throws AuthenticationException {  debug.message("FirstTimeLogin.onLoginFailure: called");}  }
class C{  public TripleDESPasswordStorageSchemeTestCase(){  super("cn=3DES,cn=Password Storage Schemes,cn=config");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node child;  String nodeName;  java.util.Collection htmlExpected=new java.util.ArrayList();  htmlExpected.add("title");  htmlExpected.add("class");  java.util.Collection expected=new java.util.ArrayList();  expected.add("title");  expected.add("class");  expected.add("dir");  java.util.Collection actual=new java.util.ArrayList();  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(1);  attributes=testAddress.getAttributes();  for (int indexN10070=0; indexN10070 < attributes.getLength(); indexN10070++) {    child=(Node)attributes.item(indexN10070);    nodeName=child.getNodeName();    actual.add(nodeName);  }  if (("text/html".equals(getContentType()))) {    assertEqualsIgnoreCase("attrName_html",htmlExpected,actual);  } else {    assertEquals("attrName",expected,actual);  }}  }
class C{  public FrameBodyTSSE(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  <C extends ConfigurationClient,S extends Configuration>ServerManagedObject<? extends S> decode(ManagedObjectPath<C,S> path,Entry configEntry,Entry newConfigEntry) throws DefinitionDecodingException, ServerManagedObjectDecodingException {  DefinitionResolver resolver=new MyDefinitionResolver(configEntry);  AbstractManagedObjectDefinition<C,S> d=path.getManagedObjectDefinition();  ManagedObjectDefinition<? extends C,? extends S> mod=d.resolveManagedObjectDefinition(resolver);  List<PropertyException> exceptions=new LinkedList<>();  Map<PropertyDefinition<?>,SortedSet<?>> properties=new HashMap<>();  for (  PropertyDefinition<?> propertyDef : mod.getAllPropertyDefinitions()) {    List<String> attributeValues=getAttributeValues(mod,propertyDef,configEntry);    try {      SortedSet<?> pvalues=decodeProperty(path,propertyDef,attributeValues,newConfigEntry);      properties.put(propertyDef,pvalues);    } catch (    PropertyException e) {      exceptions.add(e);    }  }  ServerManagedObject<? extends S> managedObject=decodeAux(path,mod,properties,configEntry.getName());  if (exceptions.isEmpty()) {    return managedObject;  } else {    throw new ServerManagedObjectDecodingException(managedObject,exceptions);  }}  }
class C{  public int hashCode(){  return super.hashCode();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.PrivateKeyProtectionType createPrivateKeyProtectionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrivateKeyProtectionTypeImpl();}  }
class C{  public boolean includeAttribute(AttributeType attributeType){  return (excludeAttributes.isEmpty() || !excludeAttributes.contains(attributeType)) && (includeAttributes.isEmpty() || includeAttributes.contains(attributeType));}  }
class C{  public void requestSecondsUntilPasswordResetLockout(){  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_PASSWORD_RESET_LOCKOUT);}  }
class C{  public void initializeLoggerConfig() throws ConfigException, InitializationException {  RootCfg root=serverContext.getRootConfig();  root.addLogPublisherAddListener(this);  root.addLogPublisherDeleteListener(this);  List<DebugLogPublisherCfg> debugPublisherCfgs=new ArrayList<>();  List<AccessLogPublisherCfg> accessPublisherCfgs=new ArrayList<>();  List<HTTPAccessLogPublisherCfg> httpAccessPublisherCfgs=new ArrayList<>();  List<ErrorLogPublisherCfg> errorPublisherCfgs=new ArrayList<>();  for (  String name : root.listLogPublishers()) {    LogPublisherCfg config=root.getLogPublisher(name);    if (config instanceof DebugLogPublisherCfg) {      debugPublisherCfgs.add((DebugLogPublisherCfg)config);    } else     if (config instanceof AccessLogPublisherCfg) {      accessPublisherCfgs.add((AccessLogPublisherCfg)config);    } else     if (config instanceof HTTPAccessLogPublisherCfg) {      httpAccessPublisherCfgs.add((HTTPAccessLogPublisherCfg)config);    } else     if (config instanceof ErrorLogPublisherCfg) {      errorPublisherCfgs.add((ErrorLogPublisherCfg)config);    } else {      throw new ConfigException(ERR_CONFIG_LOGGER_INVALID_OBJECTCLASS.get(config.dn()));    }  }  if (accessPublisherCfgs.isEmpty()) {    logger.warn(WARN_CONFIG_LOGGER_NO_ACTIVE_ACCESS_LOGGERS);  }  if (errorPublisherCfgs.isEmpty()) {    logger.warn(WARN_CONFIG_LOGGER_NO_ACTIVE_ERROR_LOGGERS);  }  DebugLogger.getInstance().initializeLogger(debugPublisherCfgs,serverContext);  AccessLogger.getInstance().initializeLogger(accessPublisherCfgs,serverContext);  HTTPAccessLogger.getInstance().initializeLogger(httpAccessPublisherCfgs,serverContext);  ErrorLogger.getInstance().initializeLogger(errorPublisherCfgs,serverContext);  julToSlf4jManager.adjustJulLevel();}  }
class C{  void checkRequests(int axis){  if ((axis != X_AXIS) && (axis != Y_AXIS)) {    throw new IllegalArgumentException("Invalid axis: " + axis);  }  if (axis == majorAxis) {    if (!majorReqValid) {      majorRequest=calculateMajorAxisRequirements(axis,majorRequest);      majorReqValid=true;    }  } else   if (!minorReqValid) {    minorRequest=calculateMinorAxisRequirements(axis,minorRequest);    minorReqValid=true;  }}  }
class C{  public <T>T parse(InputStream in,Class<?>... clas){  try {    JAXBContext jaxbContext=JAXBContext.newInstance(clas);    Unmarshaller jaxbUnmarshaller=jaxbContext.createUnmarshaller();    T t=(T)jaxbUnmarshaller.unmarshal(in);    return t;  } catch (  JAXBException e) {    throw new JKException(e);  }}  }
class C{  @Override protected void exportBackend(OutputStream output) throws DirectoryException {  exportBackend(output,false);}  }
class C{  public JMXServiceURL(String serviceURL) throws MalformedURLException {  final int serviceURLLength=serviceURL.length();  for (int i=0; i < serviceURLLength; i++) {    char c=serviceURL.charAt(i);    if (c < 32 || c >= 127) {      throw new MalformedURLException("Service URL contains " + "non-ASCII character 0x" + Integer.toHexString(c));    }  }  final String requiredPrefix="service:jmx:";  final int requiredPrefixLength=requiredPrefix.length();  if (!serviceURL.regionMatches(true,0,requiredPrefix,0,requiredPrefixLength)) {    throw new MalformedURLException("Service URL must start with " + requiredPrefix);  }  final int protoStart=requiredPrefixLength;  final int protoEnd=indexOf(serviceURL,':',protoStart);  this.protocol=serviceURL.substring(protoStart,protoEnd).toLowerCase();  if (!serviceURL.regionMatches(protoEnd,"://",0,3)) {    throw new MalformedURLException("Missing \"://\" after " + "protocol name");  }  final int hostStart=protoEnd + 3;  final int hostEnd;  if (hostStart < serviceURLLength && serviceURL.charAt(hostStart) == '[') {    hostEnd=serviceURL.indexOf(']',hostStart) + 1;    if (hostEnd == 0)     throw new MalformedURLException("Bad host name: [ without ]");    this.host=serviceURL.substring(hostStart + 1,hostEnd - 1);    if (!isNumericIPv6Address(this.host)) {      throw new MalformedURLException("Address inside [...] must " + "be numeric IPv6 address");    }  } else {    hostEnd=indexOfFirstNotInSet(serviceURL,hostNameBitSet,hostStart);    this.host=serviceURL.substring(hostStart,hostEnd);  }  final int portEnd;  if (hostEnd < serviceURLLength && serviceURL.charAt(hostEnd) == ':') {    if (this.host.length() == 0) {      throw new MalformedURLException("Cannot give port number " + "without host name");    }    final int portStart=hostEnd + 1;    portEnd=indexOfFirstNotInSet(serviceURL,numericBitSet,portStart);    final String portString=serviceURL.substring(portStart,portEnd);    try {      this.port=Integer.parseInt(portString);    } catch (    NumberFormatException e) {      throw new MalformedURLException("Bad port number: \"" + portString + "\": "+ e);    }  } else {    portEnd=hostEnd;    this.port=0;  }  final int urlPathStart=portEnd;  if (urlPathStart < serviceURLLength)   this.urlPath=serviceURL.substring(urlPathStart); else   this.urlPath="";  validate();}  }
class C{  public void stopBundle(Bundle bundle) throws UpdateException {  try {    bundle.stop();  } catch (  BundleException e) {    throw new UpdateException("Cannot stop bundle " + bundle.toString(),e);  }}  }
class C{  public void connectToHost(String bindDN,String bindPassword,AtomicInteger nextMessageID,int timeout) throws LDAPConnectionException {  Socket socket;  Socket startTLSSocket=null;  int resultCode;  ArrayList<Control> requestControls=new ArrayList<>();  ArrayList<Control> responseControls=new ArrayList<>();  if (connectionOptions.isVerbose()) {    JDKLogging.enableVerboseConsoleLoggingForOpenDJ();  } else {    JDKLogging.disableLogging();  }  if (connectionOptions.useStartTLS()) {    try {      startTLSSocket=createSocket();      ldapWriter=new LDAPWriter(startTLSSocket);      ldapReader=new LDAPReader(startTLSSocket);    } catch (    LDAPConnectionException e) {      throw e;    }catch (    Exception ex) {      logger.traceException(ex);      throw new LDAPConnectionException(LocalizableMessage.raw(ex.getMessage()),ex);    }    ExtendedRequestProtocolOp extendedRequest=new ExtendedRequestProtocolOp(OID_START_TLS_REQUEST);    LDAPMessage msg=new LDAPMessage(nextMessageID.getAndIncrement(),extendedRequest);    try {      ldapWriter.writeMessage(msg);      msg=ldapReader.readMessage();    } catch (    LDAPException e) {      logger.traceException(e);      throw new LDAPConnectionException(e.getMessageObject(),e.getResultCode(),null,e);    }catch (    Exception e) {      logger.traceException(e);      throw new LDAPConnectionException(LocalizableMessage.raw(e.getMessage()),e);    }    if (msg == null) {      throw new LDAPConnectionException(ERR_STARTTLS_FAILED.get(),CLIENT_SIDE_CONNECT_ERROR,null);    }    ExtendedResponseProtocolOp res=msg.getExtendedResponseProtocolOp();    resultCode=res.getResultCode();    if (resultCode != SUCCESS) {      throw new LDAPConnectionException(res.getErrorMessage(),resultCode,res.getErrorMessage(),res.getMatchedDN(),null);    }  }  SSLConnectionFactory sslConnectionFactory=connectionOptions.getSSLConnectionFactory();  try {    socket=createSSLOrBasicSocket(startTLSSocket,sslConnectionFactory);    ldapWriter=new LDAPWriter(socket);    ldapReader=new LDAPReader(socket);  } catch (  UnknownHostException|ConnectException e) {    LocalizableMessage msg=INFO_RESULT_CLIENT_SIDE_CONNECT_ERROR.get();    throw new LDAPConnectionException(msg,CLIENT_SIDE_CONNECT_ERROR,null,e);  }catch (  LDAPConnectionException e) {    throw e;  }catch (  Exception ex2) {    logger.traceException(ex2);    throw new LDAPConnectionException(LocalizableMessage.raw(ex2.getMessage()),ex2);  }  try {    socket.setSoLinger(true,1);    socket.setReuseAddress(true);    if (timeout > 0) {      socket.setSoTimeout(timeout);    }  } catch (  IOException e) {    logger.traceException(e);  }  if (connectionOptions.getReportAuthzID()) {    requestControls.add(new LDAPControl(OID_AUTHZID_REQUEST));  }  if (connectionOptions.usePasswordPolicyControl()) {    requestControls.add(new LDAPControl(OID_PASSWORD_POLICY_CONTROL));  }  LDAPAuthenticationHandler handler=new LDAPAuthenticationHandler(ldapReader,ldapWriter,hostName,nextMessageID);  try {    ByteString bindDNBytes=bindDN != null ? ByteString.valueOfUtf8(bindDN) : ByteString.empty();    ByteString bindPW=bindPassword != null ? ByteString.valueOfUtf8(bindPassword) : null;    String result=null;    if (connectionOptions.useSASLExternal()) {      result=handler.doSASLExternal(bindDNBytes,connectionOptions.getSASLProperties(),requestControls,responseControls);    } else     if (connectionOptions.getSASLMechanism() != null) {      result=handler.doSASLBind(bindDNBytes,bindPW,connectionOptions.getSASLMechanism(),connectionOptions.getSASLProperties(),requestControls,responseControls);    } else     if (bindDN != null) {      result=handler.doSimpleBind(versionNumber,bindDNBytes,bindPW,requestControls,responseControls);    }    if (result != null) {      out.println(result);    }    for (    Control c : responseControls) {      if (c.getOID().equals(OID_AUTHZID_RESPONSE)) {        AuthorizationIdentityResponseControl control=decode(c,AuthorizationIdentityResponseControl.DECODER);        out.println(INFO_BIND_AUTHZID_RETURNED.get(control.getAuthorizationID()));      } else       if (c.getOID().equals(OID_NS_PASSWORD_EXPIRED)) {        out.println(INFO_BIND_PASSWORD_EXPIRED.get());      } else       if (c.getOID().equals(OID_NS_PASSWORD_EXPIRING)) {        PasswordExpiringControl control=decode(c,PasswordExpiringControl.DECODER);        LocalizableMessage timeString=secondsToTimeString(control.getSecondsUntilExpiration());        out.println(INFO_BIND_PASSWORD_EXPIRING.get(timeString));      } else       if (c.getOID().equals(OID_PASSWORD_POLICY_CONTROL)) {        PasswordPolicyResponseControl pwPolicyControl=decode(c,PasswordPolicyResponseControl.DECODER);        PasswordPolicyErrorType errorType=pwPolicyControl.getErrorType();        if (errorType != null) {switch (errorType) {case PASSWORD_EXPIRED:            out.println(INFO_BIND_PASSWORD_EXPIRED.get());          break;case ACCOUNT_LOCKED:        out.println(INFO_BIND_ACCOUNT_LOCKED.get());      break;case CHANGE_AFTER_RESET:    out.println(INFO_BIND_MUST_CHANGE_PASSWORD.get());  break;}}PasswordPolicyWarningType warningType=pwPolicyControl.getWarningType();if (warningType != null) {switch (warningType) {case TIME_BEFORE_EXPIRATION:LocalizableMessage timeString=secondsToTimeString(pwPolicyControl.getWarningValue());out.println(INFO_BIND_PASSWORD_EXPIRING.get(timeString));break;case GRACE_LOGINS_REMAINING:out.println(INFO_BIND_GRACE_LOGINS_REMAINING.get(pwPolicyControl.getWarningValue()));break;}}}}} catch (ClientException ce) {logger.traceException(ce);throw new LDAPConnectionException(ce.getMessageObject(),ce.getReturnCode(),null,ce);}catch (LDAPException le) {throw new LDAPConnectionException(le.getMessageObject(),le.getResultCode(),le.getErrorMessage(),le.getMatchedDN(),le.getCause());}catch (DirectoryException de) {throw new LDAPConnectionException(de.getMessageObject(),de.getResultCode().intValue(),null,de.getMatchedDN(),de.getCause());}catch (Exception ex) {logger.traceException(ex);throw new LDAPConnectionException(LocalizableMessage.raw(ex.getLocalizedMessage()),ex);} finally {if (timeout > 0) {try {socket.setSoTimeout(0);} catch (SocketException e) {e.printStackTrace();logger.traceException(e);}}}}  }
class C{  public boolean removeAll(Collection<?> c){  return al.removeAll(c);}  }
class C{  public void downFocusCycle(Container aContainer){  if (aContainer != null && aContainer.isFocusCycleRoot()) {    aContainer.transferFocusDownCycle();  }}  }
class C{  public RMIConnectorServer(JMXServiceURL url,Map<String,?> environment,RMIServerImpl rmiServerImpl,MBeanServer mbeanServer) throws IOException {  super(mbeanServer);  if (url == null)   throw new IllegalArgumentException("Null JMXServiceURL");  if (rmiServerImpl == null) {    final String prt=url.getProtocol();    if (prt == null || !(prt.equals("rmi") || prt.equals("iiop"))) {      final String msg="Invalid protocol type: " + prt;      throw new MalformedURLException(msg);    }    final String urlPath=url.getURLPath();    if (!urlPath.equals("") && !urlPath.equals("/") && !urlPath.startsWith("/jndi/")) {      final String msg="URL path must be empty or start with " + "/jndi/";      throw new MalformedURLException(msg);    }  }  if (environment == null)   this.attributes=Collections.emptyMap(); else {    EnvHelp.checkAttributes(environment);    this.attributes=Collections.unmodifiableMap(environment);  }  this.address=url;  this.rmiServerImpl=rmiServerImpl;}  }
class C{  public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static StringArgument certNickNameArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_CERT_NICKNAME).shortIdentifier(OPTION_SHORT_CERT_NICKNAME).description(INFO_ARGUMENT_DESCRIPTION_CERT_NICKNAME.get()).multiValued().valuePlaceholder(INFO_NICKNAME_PLACEHOLDER.get()).buildArgument();}  }
class C{  @Override public void onChatFragmentInteraction(){}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  public Map<String,String> parse(final String str,char separator){  if (str == null) {    return new HashMap<>();  }  return parse(str.toCharArray(),separator);}  }
class C{  public GrizzlyLDAPListener(final InetSocketAddress address,final ServerConnectionFactory<LDAPClientContext,Integer> factory,final Options options) throws IOException {  this(address,factory,options,null);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.AgreementMethodType.RecipientKeyInfo createAgreementMethodTypeRecipientKeyInfo() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.AgreementMethodTypeImpl.RecipientKeyInfoImpl();}  }
class C{  @Override public void onPause(){  Log.d(TAG,"start FmRadioActivity.onPause");  mIsActivityForeground=false;  mIsNeedShowSearchDlg=true;  dismissSearchDialog();  FmRecordDialogFragment df=(FmRecordDialogFragment)mFragmentManager.findFragmentByTag(TAG_SAVE_RECORDINGD);  if (null != df && df.getShowsDialog()) {    Log.d(TAG,"onPause.dismissSaveRecordingDialog()");    if (mService != null) {      mService.setModifiedRecordingName(df.getRecordingNameToSave());    }    dismissSaveRecordingDialog();    mIsNeedShowRecordDlg=true;  }  if (dismissNoAntennaDialog()) {    mIsNeedShowNoAntennaDlg=true;  }  Log.d(TAG,"end FmRadioActivity.onPause");  super.onPause();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_arg0.execute(xctxt).xstr().startsWith(m_arg1.execute(xctxt).xstr()) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public static ImageData create(java.awt.Image image,java.awt.Color color,boolean forceBW) throws java.io.IOException {  return AwtImageDataFactory.create(image,color,forceBW);}  }
class C{  @Inject public IdentityManager(OAuth2ProviderSettingsFactory providerSettingsFactory){  this.providerSettingsFactory=providerSettingsFactory;}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(3000);  String NS="";  String appendNS="";  if (declareNS) {    NS=IFSConstants.LIB_12_NAMESPACE_STRING;  }  if (includeNS) {    appendNS=IFSConstants.LIB_PREFIX;  }  String dateStr=null;  if (_issueInstant != null) {    dateStr=DateUtils.toUTCDateFormat(_issueInstant);  }  xml.append("<").append(appendNS).append("EncryptableNameIdentifier").append(NS);  if ((_nameQualifier != null) && (!(_nameQualifier.length() == 0))) {    xml.append(" ").append("NameQualifier").append("=\"").append(_nameQualifier).append("\"");  }  if ((_format != null) && (!(_format.length() == 0))) {    xml.append(" ").append("Format").append("=\"").append(_format).append("\"");  }  if ((_nonce != null) && (!(_nonce.length() == 0))) {    xml.append(" ").append("Nonce").append("=\"").append(_nonce).append("\"");  }  if ((_issueInstant != null) && (dateStr.length() != 0)) {    xml.append(" ").append("IssueInstant").append("=\"").append(dateStr).append("\"");  }  xml.append(">").append(_name);  xml.append("</").append(appendNS).append("EncryptableNameIdentifier").append(">");  return xml.toString();}  }
class C{  public static void test_getResourceAsStream() throws IOException {  ClassLoader cl=TestMethods.class.getClassLoader();  InputStream in=cl.getResourceAsStream("test/Resource1.txt");  byte[] contents=readFully(in);  String s=new String(contents,"UTF-8");  assertSame("Muffins are tasty!\n",s.intern());}  }
class C{  public ConnectionClosedException(final String message){  super(message);}  }
class C{  public XPathProcessorException(String message){  super(message);}  }
class C{  public void checkAbandoned(){  try {    createPool().checkAbandoned();  } catch (  SQLException x) {    throw new RuntimeException(x);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic256Rsa15Element createBasic256Rsa15Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic256Rsa15ElementImpl();}  }
class C{  public boolean isServiceIdentifier(){  return (as.isServiceIdentifier());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(1000);  sb.append("<ServiceInstance xmlns=\"").append(DiscoConstants.DISCO_NS).append("\"><ServiceType>").append(serviceType).append("</ServiceType><ProviderID>").append(providerID).append("</ProviderID>");  if (descriptions != null) {    Iterator iter=descriptions.iterator();    while (iter.hasNext()) {      sb.append(((Description)iter.next()).toString());    }  }  sb.append("</ServiceInstance>");  return sb.toString();}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public static MemoryNotificationInfo from(CompositeData cd){  if (cd == null) {    return null;  }  if (cd instanceof MemoryNotifInfoCompositeData) {    return ((MemoryNotifInfoCompositeData)cd).getMemoryNotifInfo();  } else {    return new MemoryNotificationInfo(cd);  }}  }
class C{  public FrameBodyTOFN(){}  }
class C{  protected void registerLayer(PdfLayer layer){  if (layer == null)   throw new IllegalArgumentException("layer argument is null");  layers.add(layer);}  }
class C{  public static void assertNotNull(Object param) throws XMPException {  if (param == null) {    throw new XMPException("Parameter must not be null",XMPError.BADPARAM);  } else   if ((param instanceof String) && ((String)param).length() == 0) {    throw new XMPException("Parameter must not be null or empty",XMPError.BADPARAM);  }}  }
class C{  public WebServiceException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean implies(Permission permission){  return all_allowed;}  }
class C{  public FacebookOperationCanceledException(Throwable throwable){  super(throwable);}  }
class C{  public int size(){  return (tail - head) & (elements.length - 1);}  }
class C{  public StatusMessageImpl(String xml) throws XACMLException {  Document document=XMLUtils.toDOMDocument(xml,XACMLSDKUtils.debug);  if (document != null) {    Element rootElement=document.getDocumentElement();    processElement(rootElement);    makeImmutable();  } else {    XACMLSDKUtils.debug.error("StatusMessageImpl.processElement(): invalid XML input");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("errorObtainingElement"));  }}  }
class C{  public final boolean hasSetting(DOMDocumentBuilderFactory factory){  return strategy.hasSetting(factory) == value;}  }
class C{  public void paintEditorPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  protected boolean updateNextIndex(){  if (nextIndex == -1 && !parent.isExpanded())   return false;  if (childCount == 0)   return false; else   if (++nextIndex >= childCount)   return false;  TreeStateNode child=(TreeStateNode)parent.getChildAt(nextIndex);  if (child != null && child.isExpanded()) {    parent=child;    nextIndex=-1;    childCount=child.getChildCount();  }  return true;}  }
class C{  private EnumUtil(){}  }
class C{  public static String printByte(byte val){  if (theConverter == null)   initConverter();  return theConverter.printByte(val);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public void parse(InputSource input) throws IOException, SAXException {  if (parsing) {    throw new SAXException("Parser is already in use");  }  setupParser();  parsing=true;  try {    parser.parse(input);  }  finally {    parsing=false;  }  parsing=false;}  }
class C{  public static ModifyRequest unmodifiableModifyRequest(final ModifyRequest request){  if (request instanceof UnmodifiableModifyRequestImpl) {    return request;  }  return new UnmodifiableModifyRequestImpl(request);}  }
class C{  public StatusMessage createStatusMessage(String xml) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_MESSAGE,xml);  if (object == null) {    return new StatusMessageImpl(xml);  } else {    return (StatusMessage)object;  }}  }
class C{  public static String serializeToString(XMPMeta xmp,SerializeOptions options) throws XMPException {  assertImplementation(xmp);  return XMPSerializerHelper.serializeToString((XMPMetaImpl)xmp,options);}  }
class C{  public static boolean isValidQName(String localPart){  QName parseqn=DatatypeConverter.parseQName(localPart,nsc);  return parseqn != null;}  }
class C{  public InvalidFrameException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  public boolean next(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("next",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    return $self.next();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static Entry addObjectClass(Entry entry){  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);  if (attribute == null) {    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);  }  return entry;}  }
class C{  public final void testOn() throws IOException {  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      dos.on(false);      for (int i=0; i < MY_MESSAGE_LEN - 1; i++) {        dos.write(myMessage[i]);      }      dos.on(true);      dos.write(myMessage[MY_MESSAGE_LEN - 1]);      byte[] digest=dos.getMessageDigest().digest();      assertFalse(Arrays.equals(digest,MDGoldenData.getDigest(algorithmName[k])));      assertFalse(Arrays.equals(digest,MDGoldenData.getDigest(algorithmName[k] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  private E dequeue(){  final Object[] items=this.items;  @SuppressWarnings("unchecked") E x=(E)items[takeIndex];  items[takeIndex]=null;  takeIndex=inc(takeIndex);  count--;  if (itrs != null)   itrs.elementDequeued();  notFull.signal();  return x;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode10.class,args);}  }
class C{  public Cursor fetchAll(String actionName,Long appID){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (actionName != null) {    qb.appendWhere(" AND " + KEY_ACTIONNAME + " = ");    qb.appendWhereEscapeString(actionName);  }  if (appID != null) {    qb.appendWhere(" AND " + KEY_APPID + " = "+ appID);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childValue;  int childLength;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  childValue=child.getData();  childLength=childValue.length();  assertEquals("characterdataGetLengthAssert",15,childLength);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.ManifestElement createManifestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.ManifestElementImpl();}  }
class C{  public void paintButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private int extensibleHashCode(){  int hashCode=0;  if (getAttributeType() != null) {    hashCode+=getAttributeType().hashCode();  }  if (dnAttributes) {    hashCode++;  }  if (matchingRuleID != null) {    hashCode+=matchingRuleID.hashCode();  }  if (assertionValue != null) {    hashCode+=assertionValue.hashCode();  }  return hashCode;}  }
class C{  public LoginConfiguration indexType(AuthIndexType indexType){  this.indexType=indexType;  return this;}  }
class C{  private void fillInWindow(long index){  if (!window.isEmpty()) {    Long lastKey=window.lastKey();    for (lastKey=lastKey + 1; lastKey <= index; lastKey++) {      window.putIfAbsent(lastKey,new AtomicLong(0));    }    window.headMap(window.lastKey() - size,true).clear();  }}  }
class C{  public Builder oid(final String oid){  this.oid=oid;  return this;}  }
class C{  private void updateIndexRequiredMessages(RawFilter filter,Collection<LocalizableMessage> msgs){switch (filter.getFilterType()) {case AND:case OR:    if (filter.getFilterComponents() != null) {      for (      RawFilter f : filter.getFilterComponents()) {        updateIndexRequiredMessages(f,msgs);      }    }  break;case NOT:updateIndexRequiredMessages(filter.getNOTComponent(),msgs);break;default :FilterType[] filterTypes={FilterType.EQUALITY,FilterType.SUBSTRING,FilterType.GREATER_OR_EQUAL,FilterType.LESS_OR_EQUAL,FilterType.PRESENT,FilterType.APPROXIMATE_MATCH,FilterType.EXTENSIBLE_MATCH};IndexType[] indexTypes={EQUALITY,SUBSTRING,ORDERING,ORDERING,PRESENCE,APPROXIMATE,null};LocalizableMessage[] indexTypeNames={INFO_CTRL_PANEL_VLV_INDEX_EQUALITY_TYPE.get(),INFO_CTRL_PANEL_VLV_INDEX_SUBSTRING_TYPE.get(),INFO_CTRL_PANEL_VLV_INDEX_ORDERING_TYPE.get(),INFO_CTRL_PANEL_VLV_INDEX_ORDERING_TYPE.get(),INFO_CTRL_PANEL_VLV_INDEX_PRESENCE_TYPE.get(),INFO_CTRL_PANEL_VLV_INDEX_APPROXIMATE_TYPE.get(),null};for (int i=0; i < filterTypes.length; i++) {if (filterTypes[i] == filter.getFilterType()) {IndexDescriptor index=getIndex(filter.getAttributeType());if (index != null) {IndexType type=indexTypes[i];if (type != null && !index.getTypes().contains(type)) {msgs.add(INFO_CTRL_PANEL_MUST_UPDATE_INDEX_DEFINITION_TYPE.get(filter.getAttributeType(),indexTypeNames[i]));}} else {LocalizableMessage type=indexTypeNames[i];if (type != null) {msgs.add(INFO_CTRL_PANEL_MUST_DEFINE_INDEX_TYPE.get(filter.getAttributeType(),type));} else {msgs.add(INFO_CTRL_PANEL_MUST_DEFINE_INDEX.get(filter.getAttributeType()));}}}}}}  }
class C{  public boolean keepout_outside_outline_generated(){  return keepout_outside_outline;}  }
class C{  public void createBufferStrategy(int numBuffers){  super.createBufferStrategy(numBuffers);}  }
class C{  public void endEntity(String name) throws SAXException {  if (m_firstTagNotEmitted) {    emitFirstTag();  }  m_handler.endEntity(name);}  }
class C{  public static synchronized String[][] read(String logName,String logType,String timeStamp,Object userCrdential) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {  queryResult=read(logName,logType,timeStamp,null,userCrdential);  return queryResult;}  }
class C{  public ProxySubject(SubjectConfirmation subjectConfirmation) throws SAMLException {  super(subjectConfirmation);}  }
class C{  private void ensureLegacyParsed(){  if ((legacyChanged == false) || (legacyStrings == null)) {    return;  }  serviceSet=null;  if (legacyMap == null) {    legacyMap=new LinkedHashMap<ServiceKey,Service>();  } else {    legacyMap.clear();  }  for (  Map.Entry<String,String> entry : legacyStrings.entrySet()) {    parseLegacyPut(entry.getKey(),entry.getValue());  }  removeInvalidServices(legacyMap);  legacyChanged=false;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  PWResetQuestionModel model=(PWResetQuestionModel)getModel();  String orgDN=(String)getPageSessionAttribute(ORG_DN);  String userDN=(String)getPageSessionAttribute(USER_DN);  PWResetQuestionTiledView tView=(PWResetQuestionTiledView)getChild(PASSWORD_RESET_TILEDVIEW);  tView.populateQuestionsList(userDN,orgDN);  String value=(String)getPageSessionAttribute(USER_ATTR_VALUE);  setDisplayFieldValue(PW_QUESTION_TITLE,model.getPWQuestionTitleString(value));  setDisplayFieldValue(BUTTON_OK,model.getOKBtnLabel());  setDisplayFieldValue(BUTTON_PREVIOUS,model.getPreviousBtnLabel());}  }
class C{  public boolean enabled(){  for (  PublisherSettings settings : publisherSettings) {    if (shouldLog(settings.classSettings) || settings.methodSettings != null) {      return true;    }  }  return false;}  }
class C{  public boolean isStartTls(){  return getConnectionType() == START_TLS;}  }
class C{  final int hash(Object k){  int h=k.hashCode();  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public JsonValue notifyCreate(Context context,String resourceContainer,String resourceId,JsonValue value) throws SynchronizationException {  if (isSourceObject(resourceContainer,resourceId)) {    if (value == null || value.getObject() == null) {      value=LazyObjectAccessor.rawReadObject(connectionFactory,context,resourceContainer,resourceId);    }    return doSourceSync(context,resourceId,value);  }  return json(null);}  }
class C{  public static void main(final String[] args){  final int retCode=new LDAPModify().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  public void close(){  try {    writer.close();    JNAOpus.INSTANCE.opus_encoder_destroy(this.opusEncoder);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public HashMap<String,String> readFile(String fileName){  HashMap<String,String> storage=new HashMap<String,String>();  try {    InputStream is=new FileInputStream(fileName);    int c=is.read();    StringBuffer str=new StringBuffer();    int i=0;    while (c != -1) {      if ((char)c == SEPARATOR_DATA) {        if (i < KEYS.length) {          storage.put(KEYS[i],str.toString());          str.setLength(0);          i++;        }      } else {        str.append((char)c);      }      try {        c=is.read();      } catch (      Exception e) {        c=-1;      }    }    try {      is.close();    } catch (    IOException e) {    }  } catch (  IOException ioe) {    System.out.println("IOException during processing the file: " + fileName);  }  return storage;}  }
class C{  private Object doPrivileged(final String methodName,final Object[] params){  try {    return invokeMethod(context,methodName,params);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    throw new RuntimeException(t.getMessage(),t);  }}  }
class C{  static int capacityForInitSize(int size){  int result=(size >> 1) + size;  return (result & ~(MAXIMUM_CAPACITY - 1)) == 0 ? result : MAXIMUM_CAPACITY;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.StElement createStElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.StElementImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrgetvalue2.class,args);}  }
class C{  public boolean findPattern(String pattern){  for (int i=0; i < patterns.length; i++) {    if (patterns[i].equals(pattern))     return true;  }  return false;}  }
class C{  public void testField(){  checkPBEKey key=new checkPBEKey();  assertEquals("Incorrect serialVersionUID",key.getSerVerUID(),-1430015993304333921L);}  }
class C{  @Override public void removeByUuid_C(String uuid,long companyId){  for (  Foo foo : findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  public void paintCode(){  int maxErr, lenErr, tot, pad;  if ((options & PDF417_USE_RAW_CODEWORDS) != 0) {    if (lenCodewords > MAX_DATA_CODEWORDS || lenCodewords < 1 || lenCodewords != codewords[0]) {      throw new PdfException(PdfException.InvalidCodewordSize);    }  } else {    if (code == null)     throw new PdfException(PdfException.TextCannotBeNull);    if (code.length > ABSOLUTE_MAX_TEXT_SIZE) {      throw new PdfException(PdfException.TextIsTooBig);    }    segmentList=new SegmentList();    breakString();    assemble();    segmentList=null;    codewords[0]=lenCodewords=cwPtr;  }  maxErr=maxPossibleErrorLevel(MAX_DATA_CODEWORDS + 2 - lenCodewords);  if ((options & PDF417_USE_ERROR_LEVEL) == 0) {    if (lenCodewords < 41)     errorLevel=2; else     if (lenCodewords < 161)     errorLevel=3; else     if (lenCodewords < 321)     errorLevel=4; else     errorLevel=5;  }  if (errorLevel < 0)   errorLevel=0; else   if (errorLevel > maxErr)   errorLevel=maxErr;  if (codeColumns < 1)   codeColumns=1; else   if (codeColumns > 30)   codeColumns=30;  if (codeRows < 3)   codeRows=3; else   if (codeRows > 90)   codeRows=90;  lenErr=2 << errorLevel;  boolean fixedColumn=(options & PDF417_FIXED_ROWS) == 0;  boolean skipRowColAdjust=false;  tot=lenCodewords + lenErr;  if ((options & PDF417_FIXED_RECTANGLE) != 0) {    tot=codeColumns * codeRows;    if (tot > MAX_DATA_CODEWORDS + 2) {      tot=getMaxSquare();    }    if (tot < lenCodewords + lenErr)     tot=lenCodewords + lenErr; else     skipRowColAdjust=true;  } else   if ((options & (PDF417_FIXED_COLUMNS | PDF417_FIXED_ROWS)) == 0) {    double c, b;    fixedColumn=true;    if (aspectRatio < 0.001)     aspectRatio=0.001f; else     if (aspectRatio > 1000)     aspectRatio=1000;    b=73 * aspectRatio - 4;    c=(-b + Math.sqrt(b * b + 4 * 17 * aspectRatio* (lenCodewords + lenErr)* yHeight)) / (2 * 17 * aspectRatio);    codeColumns=(int)(c + 0.5);    if (codeColumns < 1)     codeColumns=1; else     if (codeColumns > 30)     codeColumns=30;  }  if (!skipRowColAdjust) {    if (fixedColumn) {      codeRows=(tot - 1) / codeColumns + 1;      if (codeRows < 3)       codeRows=3; else       if (codeRows > 90) {        codeRows=90;        codeColumns=(tot - 1) / 90 + 1;      }    } else {      codeColumns=(tot - 1) / codeRows + 1;      if (codeColumns > 30) {        codeColumns=30;        codeRows=(tot - 1) / 30 + 1;      }    }    tot=codeRows * codeColumns;  }  if (tot > MAX_DATA_CODEWORDS + 2) {    tot=getMaxSquare();  }  errorLevel=maxPossibleErrorLevel(tot - lenCodewords);  lenErr=2 << errorLevel;  pad=tot - lenErr - lenCodewords;  if ((options & PDF417_USE_MACRO) != 0) {    System.arraycopy(codewords,macroIndex,codewords,macroIndex + pad,pad);    cwPtr=lenCodewords + pad;    while (pad-- != 0)     codewords[macroIndex++]=TEXT_MODE;  } else {    cwPtr=lenCodewords;    while (pad-- != 0)     codewords[cwPtr++]=TEXT_MODE;  }  codewords[0]=lenCodewords=cwPtr;  calculateErrorCorrection(lenCodewords);  lenCodewords=tot;  outPaintCode();}  }
class C{  public Request createRequest(){  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.REQUEST);  if (obj == null) {    return new RequestImpl();  } else {    return (Request)obj;  }}  }
class C{  @Override public HijrahDate date(int prolepticYear,int month,int dayOfMonth){  return HijrahDate.of(this,prolepticYear,month,dayOfMonth);}  }
class C{  private List<RawModification> generateModifications(int numAttributes){  List<RawModification> modifies=new ArrayList<>();  for (int i=0; i < numAttributes; i++) {    LDAPAttribute attribute=new LDAPAttribute("testAttribute" + i);    modifies.add(new LDAPModification(toModificationType(i),attribute));  }  return modifies;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeAttributeSets(this);}  }
class C{  protected void storeKeyPair(String alias,KeyPair keyPair) throws ResourceException {  try {    JsonValue keyPairValue=new JsonValue(new HashMap<String,Object>());    keyPairValue.put("value",KeyRepresentation.toPem(keyPair));    JsonValue encrypted=cryptoService.encrypt(keyPairValue,cryptoCipher,cryptoAlias);    JsonValue keyMap=new JsonValue(new HashMap<String,Object>());    keyMap.put("keyPair",encrypted.getObject());    storeInRepo(KEYS_CONTAINER,alias,keyMap);  } catch (  Exception e) {    throw new InternalServerErrorException(e.getMessage(),e);  }}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  private boolean isShuttingDown(){  return stopRequested;}  }
class C{  @Override public void onClick(View v){  Bundle result=new Bundle();  int toggle=mToggles.getSelectedItemPosition();  result.putString("varID",(toggle == 0) ? "%toggle" : mAdapter.getItem(toggle));  int state=mNewState.getSelectedItemPosition();  result.putString("state",(state == 0) ? "%state" : ((state == 1) ? "true" : "false"));  String countText=mCountText.getText().toString();  result.putString("count",countText.isEmpty() ? "%count" : countText);  result.putString("net.dinglisch.android.tasker.extras.VARIABLE_REPLACE_KEYS","varID state count");  String info=String.format(Locale.ENGLISH,"Set %s to %s",(toggle == 0) ? "current toggle" : mAdapter.getItem(toggle),new String[]{"new state","on","off"}[state]);  setResult(RESULT_OK,new Intent().putExtra(EXTRA_STRING_BLURB,info).putExtra(EXTRA_BUNDLE,result));  finish();}  }
class C{  public Callback[] createChoiceCallback() throws AuthException {  debug.message("In createChoiceCallback");  String[] moduleList=getModuleList();  Callback[] callbacks=new Callback[1];  try {    ChoiceCallback choiceCallback=new ChoiceCallback(Locale.getString(rb,"modulePrompt",debug),moduleList,0,false);    callbacks[0]=choiceCallback;  } catch (  IllegalArgumentException ie) {    debug.error("Number of arguments not correct",ie);    throw new AuthException("callbackError",null);  }catch (  Exception e) {    debug.error("Error: ",e);    throw new AuthException("callbackError",null);  }  if (debug.messageEnabled()) {    debug.message("Callback is.. :" + callbacks[0]);  }  return callbacks;}  }
class C{  private static void updateCertificateOptions(SecurityOptions ops,boolean enableSSL,boolean enableStartTLS,int sslPort,Collection<String> aliasesToUse){  if (!enableSSL && !enableStartTLS) {    throw new IllegalArgumentException("You must enable SSL or StartTLS to use a certificate.");  }  ops.setEnableSSL(enableSSL);  ops.setEnableStartTLS(enableStartTLS);  ops.setSslPort(sslPort);  ops.setAliasToUse(aliasesToUse);}  }
class C{  public SQLException(String theReason,String theSQLState,Throwable theCause){  super(theReason,theCause);  SQLState=theSQLState;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiMenuBarUI();  return MultiLookAndFeel.createUIs(mui,((MultiMenuBarUI)mui).uis,a);}  }
class C{  public PdfWin(PdfString f,PdfString d,PdfString o,PdfString p){  this(new PdfDictionary());  getPdfObject().put(PdfName.F,f);  getPdfObject().put(PdfName.D,d);  getPdfObject().put(PdfName.O,o);  getPdfObject().put(PdfName.P,p);}  }
class C{  public final void testPSSParameterSpec0102(){  try {    new PSSParameterSpec(-1);    fail("Expected IAE not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public PKCS8EncodedKeySpec(byte[] encodedKey){  super(encodedKey);}  }
class C{  public int read() throws IOException {  return in.read();}  }
class C{  public String nextString() throws DecodeException {  if (!hasNext(GSER_STRING)) {    final LocalizableMessage msg=WARN_GSER_NO_VALID_STRING.get(gserValue.substring(pos,length));    throw DecodeException.error(msg);  }  String str=next(GSER_STRING);  return str.substring(1,str.length() - 1).replace("\"\"","\"");}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public void removeHandler(Handler handler) throws SecurityException {  checkPermission();  if (handler == null) {    return;  }  handlers.remove(handler);}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  while (i < end) {    while (i < end && ignore((char)data[i])) {      i++;    }    b1=decodingTable[data[i++]];    while (i < end && ignore((char)data[i])) {      i++;    }    b2=decodingTable[data[i++]];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex data");    }    out.write((b1 << 4) | b2);    outLen++;  }  return outLen;}  }
class C{  public void auditAccessMessage(String resource,String action,SSOToken token){  init();  if (accessLogger != null && msgProvider != null) {    final LogRecord record=msgProvider.createLogRecord("ATTEMPT_ACCESS",new String[]{resource,action},token);    if (record != null) {      accessLogger.log(record,AccessController.doPrivileged(AdminTokenAction.getInstance()));    }  }}  }
class C{  public SubjectNoneEditViewBean(){  super("SubjectNoneEdit",DEFAULT_DISPLAY_URL);}  }
class C{  public boolean isVisible(TreePath path){  if (path != null) {    TreePath parentPath=path.getParentPath();    if (parentPath != null)     return isExpanded(parentPath);    return true;  }  return false;}  }
class C{  private ResultCode addEntry(String... ldif) throws Exception {  Entry entry=TestCaseUtils.makeEntry(ldif);  AddOperation addOp=connection.processAdd(entry);  entriesToCleanup.add(entry.getName());  return addOp.getResultCode();}  }
class C{  public GUID(final byte[] value){  assert value != null;  final int[] tmp=new int[value.length];  for (int i=0; i < value.length; i++) {    tmp[i]=(0xFF & value[i]);  }  setGUID(tmp);}  }
class C{  private int indexOf(Object x){  if (x != null) {    if (x instanceof ScheduledFutureTask) {      int i=((ScheduledFutureTask)x).heapIndex;      if (i >= 0 && i < size && queue[i] == x)       return i;    } else {      for (int i=0; i < size; i++)       if (x.equals(queue[i]))       return i;    }  }  return -1;}  }
class C{  public boolean isPropertyValuePattern(){  return _property_value_pattern;}  }
class C{  public void incrementActiveSessions(){  monitoringOperations.incrementActiveSessions();}  }
class C{  public PaddingException(){}  }
class C{  private TabStop calculateTab(IRenderer childRenderer,float curWidth,float lineWidth){  TabStop nextTabStop=getNextTabStop(curWidth);  if (nextTabStop == null) {    processDefaultTab(childRenderer,curWidth,lineWidth);    return null;  }  childRenderer.setProperty(Property.TAB_LEADER,nextTabStop.getTabLeader());  childRenderer.setProperty(Property.WIDTH,UnitValue.createPointValue(nextTabStop.getTabPosition() - curWidth));  childRenderer.setProperty(Property.HEIGHT,maxAscent - maxDescent);  if (nextTabStop.getTabAlignment() == TabAlignment.LEFT) {    return null;  }  return nextTabStop;}  }
class C{  public boolean containsAttribute(Object name,Object value){  return value.equals(getAttribute(name));}  }
class C{  public final void mouseReleased(MouseEvent e){  dragActive=false;  fire();}  }
class C{  public void mark(int readAheadLimit) throws IOException {  if (readAheadLimit < 0) {    throw new IllegalArgumentException("Read-ahead limit < 0");  }synchronized (lock) {    ensureOpen();    mark=next;  }}  }
class C{  private void reInitiateOnWSOpenFailure(){  if (clientEndPoint != null) {    System.out.println("WebsocketThread.reInitiateOnWSOpenFailure(): Force closing previous WS session");    clientEndPoint.forceClose(false);  } else {    System.out.println("WebsocketThread.reInitiateOnWSOpenFailure(): ERROR: clientEndPoint is null");  }}  }
class C{  public static ByteString wrap(final byte[] bytes){  return new ByteString(bytes,0,bytes.length);}  }
class C{  protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){  updateGrid();  calculateColumnRequirements(axis);  if (r == null) {    r=new SizeRequirements();  }  long min=0;  long pref=0;  int n=columnRequirements.length;  for (int i=0; i < n; i++) {    SizeRequirements req=columnRequirements[i];    min+=req.minimum;    pref+=req.preferred;  }  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;  min+=adjust;  pref+=adjust;  r.minimum=(int)min;  r.preferred=(int)pref;  r.maximum=(int)pref;  AttributeSet attr=getAttributes();  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {    if (r.minimum < (int)min) {      r.maximum=r.minimum=r.preferred=(int)min;    }  }  totalColumnRequirements.minimum=r.minimum;  totalColumnRequirements.preferred=r.preferred;  totalColumnRequirements.maximum=r.maximum;  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);  if (o != null) {    String ta=o.toString();    if (ta.equals("left")) {      r.alignment=0;    } else     if (ta.equals("center")) {      r.alignment=0.5f;    } else     if (ta.equals("right")) {      r.alignment=1;    } else {      r.alignment=0;    }  } else {    r.alignment=0;  }  return r;}  }
class C{  public SASLResponse processSASLRequest(SASLRequest saslReq,Message message,String respMessageID){  if (debug.messageEnabled()) {    debug.message("CramMD5MechanismHandler.processSASLRequest: ");  }  String refToMessageID=saslReq.getRefToMessageID();  boolean isFirstRequest=(refToMessageID == null || refToMessageID.length() == 0);  if (debug.messageEnabled()) {    debug.message("CramMD5MechanismHandler.processSASLRequest: " + "refToMessageID = " + refToMessageID);  }  SASLResponse saslResp=null;  byte[] data=saslReq.getData();  if (data == null) {    if (isFirstRequest) {      saslResp=new SASLResponse(SASLResponse.CONTINUE);      saslResp.setServerMechanism(AuthnSvcConstants.MECHANISM_CRAMMD5);      byte[] challenge=generateChallenge();      if (debug.messageEnabled()) {        debug.message("CramMD5MechanismHandler.processSASLRequest:" + " add respMessageID: " + respMessageID);      }      challengeMap.put(respMessageID,challenge);      saslResp.setData(challenge);    } else {      saslResp=new SASLResponse(SASLResponse.ABORT);    }  } else {    String dataStr=null;    try {      dataStr=new String(data,"UTF-8");    } catch (    Exception ex) {      debug.error("CramMD5MechanismHandler.processSASLRequest: ",ex);    }    if (dataStr == null) {      saslResp=new SASLResponse(SASLResponse.ABORT);    } else {      saslResp=authenticate(dataStr,message);    }    if (isFirstRequest) {      saslResp.setServerMechanism(AuthnSvcConstants.MECHANISM_PLAIN);    }  }  return saslResp;}  }
class C{  public void normalizeDocument(){}  }
class C{  public static void copyAttributes(Application sourceApp,Application destApp){  if (destApp == null || sourceApp == null) {    return;  }  destApp.addAllResourceTypeUuids(sourceApp.getResourceTypeUuids());}  }
class C{  void pushNewNamespaceSupport(){  m_nsSupportStack.push(new NamespaceSupport2());}  }
class C{  @Override public void addInterceptor(ChannelInterceptor interceptor){  if (interceptors == null) {    interceptors=interceptor;    interceptors.setNext(coordinator);    interceptors.setPrevious(null);    coordinator.setPrevious(interceptors);  } else {    ChannelInterceptor last=interceptors;    while (last.getNext() != coordinator) {      last=last.getNext();    }    last.setNext(interceptor);    interceptor.setNext(coordinator);    interceptor.setPrevious(last);    coordinator.setPrevious(interceptor);  }}  }
class C{  public static Node selectSingleNode(Node contextNode,String str,Node namespaceNode) throws TransformerException {  NodeIterator nl=selectNodeIterator(contextNode,str,namespaceNode);  return nl.nextNode();}  }
class C{  public synchronized void write(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (off < 0 || len < 0 || off > b.length - len) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  if (current == null) {    throw new ZipException("no current ZIP entry");  }  ZipEntry entry=current.entry;switch (entry.method) {case DEFLATED:    super.write(b,off,len);  break;case STORED:written+=len;if (written - locoff > entry.size) {throw new ZipException("attempt to write past end of STORED entry");}out.write(b,off,len);break;default :throw new ZipException("invalid compression method");}crc.update(b,off,len);}  }
class C{  public static JRadioButton createRadioButton(LocalizableMessage text){  JRadioButton button=new JRadioButton(text.toString());  button.setOpaque(false);  button.setForeground(ColorAndFontConstants.buttonForeground);  button.getAccessibleContext().setAccessibleName(text.toString());  return button;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof JobAttributes)) {    return false;  }  JobAttributes rhs=(JobAttributes)obj;  if (fileName == null) {    if (rhs.fileName != null) {      return false;    }  } else {    if (!fileName.equals(rhs.fileName)) {      return false;    }  }  if (pageRanges == null) {    if (rhs.pageRanges != null) {      return false;    }  } else {    if (rhs.pageRanges == null || pageRanges.length != rhs.pageRanges.length) {      return false;    }    for (int i=0; i < pageRanges.length; i++) {      if (pageRanges[i][0] != rhs.pageRanges[i][0] || pageRanges[i][1] != rhs.pageRanges[i][1]) {        return false;      }    }  }  if (printer == null) {    if (rhs.printer != null) {      return false;    }  } else {    if (!printer.equals(rhs.printer)) {      return false;    }  }  return (copies == rhs.copies && defaultSelection == rhs.defaultSelection && destination == rhs.destination && dialog == rhs.dialog && fromPage == rhs.fromPage && maxPage == rhs.maxPage && minPage == rhs.minPage && multipleDocumentHandling == rhs.multipleDocumentHandling && prFirst == rhs.prFirst && prLast == rhs.prLast && sides == rhs.sides && toPage == rhs.toPage);}  }
class C{  public PdfLayerMembership(PdfDocument doc){  super(new PdfDictionary());  makeIndirect(doc);  getPdfObject().put(PdfName.Type,PdfName.OCMD);}  }
class C{  public Graphics create(){  DebugGraphics debugGraphics;  debugGraphics=new DebugGraphics();  debugGraphics.graphics=graphics.create();  debugGraphics.debugOptions=debugOptions;  debugGraphics.buffer=buffer;  return debugGraphics;}  }
class C{  static boolean canBootstrap() throws ConfiguratorException {  String bsFile=getBootStrapFile();  return bsFile != null;}  }
class C{  public ByteBufferOutputStream append(double d){  append(formatDouble(d,this));  return this;}  }
class C{  public boolean isWrapperFor(ServletResponse wrapped){  if (response == wrapped) {    return true;  }  if (response instanceof ServletResponseWrapper) {    return ((ServletResponseWrapper)response).isWrapperFor(wrapped);  }  return false;}  }
class C{  public void update(int b,ManifestEntryVerifier mev) throws IOException {  if (b != -1) {    if (parsingBlockOrSF) {      baos.write(b);    } else {      mev.update((byte)b);    }  } else {    processEntry(mev);  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("SetNextRule[");  sb.append("methodName=");  sb.append(methodName);  sb.append(", paramType=");  sb.append(paramType);  sb.append("]");  return (sb.toString());}  }
class C{  public void paintButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected boolean isDeployed(String name) throws Exception {  String[] params={name};  String[] signature={"java.lang.String"};  Boolean result=(Boolean)mBeanServer.invoke(oname,"isDeployed",params,signature);  return result.booleanValue();}  }
class C{  public static void removeByField2(boolean field2){  getPersistence().removeByField2(field2);}  }
class C{  public HostnameVerifier hostnameVerifier(){  return hostnameVerifier;}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  public static boolean isWReplyURLValid(HttpServletRequest request,String relayState){  String metaAlias=WSFederationMetaUtils.getMetaAliasByUri(request.getRequestURI());  try {    WSFederationMetaManager metaManager=new WSFederationMetaManager();    return isWReplyURLValid(metaAlias,relayState,metaManager.getRoleByMetaAlias(metaAlias));  } catch (  WSFederationMetaException e) {    debug.warning("Can't get metaManager.",e);    return false;  }}  }
class C{  public boolean hasSeenEntry(){  return this.seenEntry;}  }
class C{  public FSArtifactStats(Map table,String realm,String providerId){  this.table=table;  this.providerId=providerId;  this.realm=realm;}  }
class C{  boolean defineChar2StringMapping(String outputString,char inputChar){  CharKey character=new CharKey(inputChar);  m_charToString.put(character,outputString);  set(inputChar);  boolean extraMapping=extraEntity(outputString,inputChar);  return extraMapping;}  }
class C{  public long insert(String parameterName,Long actionID,Long dataTypeID){  if (parameterName == null || actionID == null || dataTypeID == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_ACTIONPARAMETERNAME,parameterName);  initialValues.put(KEY_ACTIONID,actionID);  initialValues.put(KEY_DATATYPEID,dataTypeID);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public void refreshInstance(String jsonData){  if (jsonData == null) {    return;  }  mRefreshStartTime=System.currentTimeMillis();  if (mLastRefreshData != null) {    mLastRefreshData.isDirty=true;  }  mLastRefreshData=new WXRefreshData(jsonData,false);  WXSDKManager.getInstance().refreshInstance(mInstanceId,mLastRefreshData);}  }
class C{  public boolean removeAci(Entry entry,boolean hasAci,boolean hasGlobalAci){  lock.writeLock().lock();  try {    DN entryDN=entry.getName();    if (hasGlobalAci && entryDN.equals(configDN) && aciList.remove(DN.rootDN()) == null) {      return false;    }    if (hasAci || !hasGlobalAci) {      return aciList.removeSubtree(entryDN,null);    }    return true;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  private boolean deleteResource(String path,HttpServletRequest req,HttpServletResponse resp,boolean setStatus) throws IOException {  String ifHeader=req.getHeader("If");  if (ifHeader == null)   ifHeader="";  String lockTokenHeader=req.getHeader("Lock-Token");  if (lockTokenHeader == null)   lockTokenHeader="";  if (isLocked(path,ifHeader + lockTokenHeader)) {    resp.sendError(WebdavStatus.SC_LOCKED);    return false;  }  WebResource resource=resources.getResource(path);  if (!resource.exists()) {    resp.sendError(WebdavStatus.SC_NOT_FOUND);    return false;  }  if (!resource.isDirectory()) {    if (!resource.delete()) {      resp.sendError(WebdavStatus.SC_INTERNAL_SERVER_ERROR);      return false;    }  } else {    Hashtable<String,Integer> errorList=new Hashtable<>();    deleteCollection(req,path,errorList);    if (!resource.delete()) {      errorList.put(path,Integer.valueOf(WebdavStatus.SC_INTERNAL_SERVER_ERROR));    }    if (!errorList.isEmpty()) {      sendReport(req,resp,errorList);      return false;    }  }  if (setStatus) {    resp.setStatus(WebdavStatus.SC_NO_CONTENT);  }  return true;}  }
class C{  public boolean isLightWeightPopupEnabled(){  return lightWeightPopupEnabled;}  }
class C{  public AMLogException(String message){  super(message);}  }
class C{  public XACMLAuthzDecisionStatementImpl(){}  }
class C{  public boolean isPartialReturn(){  return partialReturn;}  }
class C{  private boolean checkFilterForLDAPSubEntry(SearchFilter filter,int depth){  if (depth >= MAX_NESTED_FILTER_DEPTH) {    if (logger.isTraceEnabled()) {      logger.trace("Exceeded maximum filter depth");    }    return false;  }switch (filter.getFilterType()) {case EQUALITY:    if (filter.getAttributeType().isObjectClass()) {      ByteString v=filter.getAssertionValue();      String stringValueLC=toLowerCase(v.toString());      if (OC_LDAP_SUBENTRY_LC.equals(stringValueLC) || OC_SUBENTRY.equals(stringValueLC)) {        return true;      }    }  break;case AND:case OR:for (SearchFilter f : filter.getFilterComponents()) {  if (checkFilterForLDAPSubEntry(f,depth + 1)) {    return true;  }}break;}return false;}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,(short)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'C':av.visit(name,(char)readInt(items[readUnsignedShort(v)]));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  public Set createSubGroupContainers(Set groupContainerNames) throws AMException, SSOException {  Iterator iter=groupContainerNames.iterator();  Set groupContainers=new HashSet();  while (iter.hasNext()) {    String groupContainerDN=AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER) + "=" + ((String)iter.next())+ ","+ entryDN;    AMGroupContainerImpl groupContainerImpl=new AMGroupContainerImpl(token,groupContainerDN);    groupContainerImpl.create();    groupContainers.add(groupContainerImpl);  }  return groupContainers;}  }
class C{  public ClientException(ReturnCode exitCode,LocalizableMessage message){  super(message.toString());  this.returnCode=exitCode;  this.message=message;}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(bitmap);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    serverTransaction=sipProvider.getNewServerTransaction(request);    dialog=(DialogExt)sipProvider.getNewDialog(serverTransaction);    dialog.disableSequenceNumberValidation();  } catch (  Exception e) {    e.printStackTrace();  }  try {    Response okResponse=messageFactory.createResponse(Response.OK,request);    FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);    from.removeParameter("tag");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);    fromHeader.setTag("12345");    okResponse.addHeader(contactHeader);    serverTransaction.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public FieldFrameBodyUnsupported(ByteBuffer byteBuffer) throws InvalidTagException {  this.read(byteBuffer);}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  final AuthPropertiesModel model=getAuthModel();  final String instance=(String)getPageSessionAttribute(SERVICE_TYPE);  final AMPropertySheet propertySheet=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  Map valueMap=unsavedAttributeValues;  if (model != null && propertySheet != null) {    if (!dynamicRequest) {      valueMap=model.getInstanceValues(instance);    }    if (valueMap != null) {      propertySheet.setAttributeValues(valueMap,model);    }  }}  }
class C{  public static ReferencePropertyMapper reference(final AttributeDescription attribute,final String baseDnTemplate,final AttributeDescription primaryKey,final PropertyMapper mapper){  return new ReferencePropertyMapper(Schema.getDefaultSchema(),attribute,baseDnTemplate,primaryKey,mapper);}  }
class C{  public void test_GetGenerator(){  assertEquals("wrong generator was returned",ecpoint,ecps.getGenerator());}  }
class C{  private Object findOffsetInfo(LocalDateTime dt,ZoneOffsetTransition trans){  LocalDateTime localTransition=trans.getDateTimeBefore();  if (trans.isGap()) {    if (dt.isBefore(localTransition)) {      return trans.getOffsetBefore();    }    if (dt.isBefore(trans.getDateTimeAfter())) {      return trans;    } else {      return trans.getOffsetAfter();    }  } else {    if (dt.isBefore(localTransition) == false) {      return trans.getOffsetAfter();    }    if (dt.isBefore(trans.getDateTimeAfter())) {      return trans.getOffsetBefore();    } else {      return trans;    }  }}  }
class C{  public static int _printBase64Binary(byte[] input,int offset,int len,byte[] out,int ptr){  byte[] buf=out;  int remaining=len;  int i;  for (i=offset; remaining >= 3; remaining-=3, i+=3) {    buf[ptr++]=encodeByte(input[i] >> 2);    buf[ptr++]=encodeByte(((input[i] & 0x3) << 4) | ((input[i + 1] >> 4) & 0xF));    buf[ptr++]=encodeByte(((input[i + 1] & 0xF) << 2) | ((input[i + 2] >> 6) & 0x3));    buf[ptr++]=encodeByte(input[i + 2] & 0x3F);  }  if (remaining == 1) {    buf[ptr++]=encodeByte(input[i] >> 2);    buf[ptr++]=encodeByte(((input[i]) & 0x3) << 4);    buf[ptr++]='=';    buf[ptr++]='=';  }  if (remaining == 2) {    buf[ptr++]=encodeByte(input[i] >> 2);    buf[ptr++]=encodeByte(((input[i] & 0x3) << 4) | ((input[i + 1] >> 4) & 0xF));    buf[ptr++]=encodeByte((input[i + 1] & 0xF) << 2);    buf[ptr++]='=';  }  return ptr;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.usa.com";  String localName="domest";  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr newAttr;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  newAttr=(Attr)attributes.getNamedItemNS(namespaceURI,localName);  assertNull("throw_Null",newAttr);}  }
class C{  @Override public void addChild(Container child){  Wrapper oldJspServlet=null;  if (!(child instanceof Wrapper)) {    throw new IllegalArgumentException(sm.getString("standardContext.notWrapper"));  }  boolean isJspServlet="jsp".equals(child.getName());  if (isJspServlet) {    oldJspServlet=(Wrapper)findChild("jsp");    if (oldJspServlet != null) {      removeChild(oldJspServlet);    }  }  super.addChild(child);  if (isJspServlet && oldJspServlet != null) {    String[] jspMappings=oldJspServlet.findMappings();    for (int i=0; jspMappings != null && i < jspMappings.length; i++) {      addServletMappingDecoded(jspMappings[i],child.getName());    }  }}  }
class C{  private boolean needAdditionalLengthBytesState(final boolean isBlocking,final boolean throwEofException) throws IOException {  if (!isBlocking && (in.available() < lengthBytesNeeded)) {    return false;  }  int readByte;  while (lengthBytesNeeded > 0) {    readByte=in.read();    if (readByte == -1) {      state=ASN1.ELEMENT_READ_STATE_NEED_ADDITIONAL_LENGTH_BYTES;      if (throwEofException) {        final LocalizableMessage message=ERR_ASN1_TRUNCATED_LENGTH_BYTES.get(lengthBytesNeeded);        throw DecodeException.fatalError(message);      }      return false;    }    peekLength=(peekLength << 8) | (readByte & 0xFF);    lengthBytesNeeded--;  }  if (maxElementSize > 0 && peekLength > maxElementSize) {    final LocalizableMessage message=ERR_LDAP_CLIENT_DECODE_MAX_REQUEST_SIZE_EXCEEDED.get(peekLength,maxElementSize);    throw DecodeException.fatalError(message);  }  state=ASN1.ELEMENT_READ_STATE_NEED_VALUE_BYTES;  return true;}  }
class C{  public void drawPolygon(int xPoints[],int yPoints[],int nPoints){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing polygon: " + " nPoints: "+ nPoints+ " X's: "+ xPoints+ " Y's: "+ yPoints);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawPolygon(xPoints,yPoints,nPoints);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawPolygon(xPoints,yPoints,nPoints);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawPolygon(xPoints,yPoints,nPoints);}  }
class C{  public String configure(){  if (isConfigured()) {    return baseDir;  }  configData.put("DEPLOYMENT_URI",uri);  configData.put("BASE_DIR",baseDir);  return AMSetupServlet.configure(servletct,configData);}  }
class C{  public static Mode chooseMode(String content){  return chooseMode(content,null);}  }
class C{  protected void open() throws SQLException {  if (conn != null) {    return;  }  if (driver == null) {    try {      Class<?> clazz=Class.forName(driverName);      driver=(Driver)clazz.newInstance();    } catch (    Throwable e) {      ExceptionUtils.handleThrowable(e);      throw new SQLException(e.getMessage(),e);    }  }  Properties props=new Properties();  if (connectionName != null) {    props.put("user",connectionName);  }  if (connectionPassword != null) {    props.put("password",connectionPassword);  }  conn=driver.connect(connectionURL,props);  conn.setAutoCommit(true);  String logPattern=pattern;  if (logPattern.equals("common")) {    ps=conn.prepareStatement("INSERT INTO " + tableName + " ("+ remoteHostField+ ", "+ userField+ ", "+ timestampField+ ", "+ queryField+ ", "+ statusField+ ", "+ bytesField+ ") VALUES(?, ?, ?, ?, ?, ?)");  } else   if (logPattern.equals("combined")) {    ps=conn.prepareStatement("INSERT INTO " + tableName + " ("+ remoteHostField+ ", "+ userField+ ", "+ timestampField+ ", "+ queryField+ ", "+ statusField+ ", "+ bytesField+ ", "+ virtualHostField+ ", "+ methodField+ ", "+ refererField+ ", "+ userAgentField+ ") VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");  }}  }
class C{  public void removeUserType(){  if (uriParms != null)   uriParms.delete(USER);}  }
class C{  public void repaint(Rectangle r){}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node newChild;  NodeList elementList;  Node elementNode;  Node appendedChild;  doc1=(Document)load("staff",false);  doc2=(Document)load("staff",true);  newChild=doc1.createElement("newChild");  elementList=doc2.getElementsByTagName("employee");  elementNode=elementList.item(1);{    boolean success=false;    try {      appendedChild=elementNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public Object clone(){  try {    ArrayList<?> v=(ArrayList<?>)super.clone();    v.elementData=Arrays.copyOf(elementData,size);    v.modCount=0;    return v;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public BasicEditorPaneUI(){  super();}  }
class C{  public static boolean isTargetApplicable(Aci aci,AciTargets targets,DN entryDN){  DN targetDN=aci.getDN();  Target target=targets.getTarget();  if (target != null && !target.isPattern() && target.getOperator() != NOT_EQUALITY) {    targetDN=target.getDN();  }  if (!isInScopeOf(entryDN,targetDN,targets.getTargetScope())) {    return false;  }  if (target != null) {    if (!target.isPattern() && target.getOperator() == NOT_EQUALITY && entryDN.isSubordinateOrEqualTo(target.getDN())) {      return false;    }    if (target.isPattern()) {      final boolean ret=target.matchesPattern(entryDN);      if (target.getOperator() == NOT_EQUALITY) {        return !ret;      }      return ret;    }  }  return true;}  }
class C{  @Override public void removeAll(){  for (  Foo foo : findAll()) {    remove(foo);  }}  }
class C{  public PdfCanvas beginMarkedContent(PdfName tag){  return beginMarkedContent(tag,null);}  }
class C{  public void insert_char(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_char",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_char(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public int end(int group){  if (first < 0)   throw new IllegalStateException("No match available");  if (group < 0 || group > groupCount())   throw new IndexOutOfBoundsException("No group " + group);  return groups[group * 2 + 1];}  }
class C{  public String buildJvmVersion(){  return properties.getProperty("build.jvm.version");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitSessionType createActivationLimitSessionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitSessionTypeImpl();}  }
class C{  private static boolean insert_logical_parts(DsnReadScopeParameters p_par){  RoutingBoard routing_board=p_par.i_board.get_routing_board();  for (  DsnLogicalPart next_part : p_par.logical_parts) {    LibPackage lib_package=search_lib_package(next_part.name,p_par.logical_part_mappings,routing_board);    if (lib_package == null) {      return false;    }    LibLogicalPin[] board_part_pins=new LibLogicalPin[next_part.part_pins.size()];    int curr_index=0;    for (    DsnPartPin curr_part_pin : next_part.part_pins) {      int pin_no=lib_package.get_pin_no(curr_part_pin.pin_name);      if (pin_no < 0) {        System.out.println("Network.insert_logical_parts: package pin not found");        return false;      }      board_part_pins[curr_index]=new LibLogicalPin(pin_no,curr_part_pin.pin_name,curr_part_pin.gate_name,curr_part_pin.gate_swap_code,curr_part_pin.gate_pin_name,curr_part_pin.gate_pin_swap_code);      ++curr_index;    }    routing_board.brd_library.logical_parts.add(next_part.name,board_part_pins);  }  for (  DsnLogicalPartMapping next_mapping : p_par.logical_part_mappings) {    LibLogicalPart curr_logical_part=routing_board.brd_library.logical_parts.get(next_mapping.name);{      if (curr_logical_part == null) {        System.out.println("Network.insert_logical_parts: logical part not found");      }    }    for (    String curr_cmp_name : next_mapping.components) {      BrdComponent curr_component=routing_board.brd_components.get(curr_cmp_name);      if (curr_component != null) {        curr_component.set_logical_part(curr_logical_part);      } else {        System.out.println("Network.insert_logical_parts: board component not found");      }    }  }  return true;}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (c.compare(a[cursor2],tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  public int viewToModel(JTextComponent a,Point b,Position.Bias[] c){  int returnValue=((TextUI)(uis.elementAt(0))).viewToModel(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).viewToModel(a,b,c);  }  return returnValue;}  }
class C{  public static boolean isWindows(){  return false;}  }
class C{  public void paintListBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static boolean isEmpty(final String s){  return (s == null || s.length() == 0);}  }
class C{  public void handleTblServerConfigXMLUserButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  String serverName=(String)getPageSessionAttribute(ServerEditViewBeanBase.PG_ATTR_SERVER_NAME);  ServerSiteModel model=(ServerSiteModel)getModel();  try {    ServerConfigXML xmlObj=model.getServerConfigObject(serverName);    ServerConfigXML.ServerGroup defaultServerGroup=xmlObj.getDefaultServerGroup();    CCActionTable table=(CCActionTable)getChild(TBL_USERS);    table.restoreStateData();    Integer[] selected=tblUserModel.getSelectedRows();    if (selected.length >= defaultServerGroup.hosts.size()) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("exception.cannot,delete.all.servers"));    } else {      for (int i=selected.length - 1; i >= 0; --i) {        defaultServerGroup.hosts.remove(selected[i].intValue());      }      model.setServerConfigXML(serverName,xmlObj.toXML());      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","serverconfig.updated");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public boolean isPrivate(){  return this.backend != null && this.backend.isPrivateBackend();}  }
class C{  LEAuthLevelCondition(Debug debug,CoreWrapper authUtils){  super(debug,authUtils);}  }
class C{  public DoubleMetaphone(){  super();}  }
class C{  public boolean removeSubtree(DN key,Collection<? super T> values){  final Node<T> node=ditCacheMap.remove(key);  if (node != null) {    fixNodeReferences(node);    adjustSizeAndCollectElements(node,values);    return true;  }  return false;}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  @Activate public void activate(ComponentContext context){  config=enhancedConfig.getConfigurationAsJson(context);  for (  final List<MessageSubscriber<?>> messageSubscribers : from(config.get(SUBSCRIBERS).expect(List.class)).filter(enabledMessengers).transform(toSubscribedMessageSubscribers)) {    subscribers.addAll(messageSubscribers);  }  logger.debug("OpenIDM MessagingService activated with {} activated subscribers.",subscribers.size());}  }
class C{  @Override public Restlet createInboundRoot(){  final Router root=new RestletRealmRouter();  root.attach("/webfinger",auditWithOAuthFilter(new GuicedRestlet(getContext(),OpenIDConnectDiscovery.class)));  return root;}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer,false);  return buffer.toString();}  }
class C{  public void nodeStructureChanged(TreeNode node){  if (node != null) {    fireTreeStructureChanged(this,getPathToRoot(node),null,null);  }}  }
class C{  public void authenticateRequester(HttpServletRequest request,HttpServletResponse response,AttributeQuery attrQuery,String attrAuthorityEntityID,String realm) throws SAML2Exception {  AttributeQueryUtil.validateEntityRequester(attrQuery,attrAuthorityEntityID,realm);}  }
class C{  public synchronized int compare(String source,String target){  if (source == null || target == null) {    throw new NullPointerException();  }  int result=Collator.EQUAL;  if (sourceCursor == null) {    sourceCursor=getCollationElementIterator(source);  } else {    sourceCursor.setText(source);  }  if (targetCursor == null) {    targetCursor=getCollationElementIterator(target);  } else {    targetCursor.setText(target);  }  int sOrder=0, tOrder=0;  boolean initialCheckSecTer=getStrength() >= Collator.SECONDARY;  boolean checkSecTer=initialCheckSecTer;  boolean checkTertiary=getStrength() >= Collator.TERTIARY;  boolean gets=true, gett=true;  while (true) {    if (gets)     sOrder=sourceCursor.next(); else     gets=true;    if (gett)     tOrder=targetCursor.next(); else     gett=true;    if ((sOrder == CollationElementIterator.NULLORDER) || (tOrder == CollationElementIterator.NULLORDER))     break;    int pSOrder=CollationElementIterator.primaryOrder(sOrder);    int pTOrder=CollationElementIterator.primaryOrder(tOrder);    if (sOrder == tOrder) {      if (tables.isFrenchSec() && pSOrder != 0) {        if (!checkSecTer) {          checkSecTer=initialCheckSecTer;          checkTertiary=false;        }      }      continue;    }    if (pSOrder != pTOrder) {      if (sOrder == 0) {        gett=false;        continue;      }      if (tOrder == 0) {        gets=false;        continue;      }      if (pSOrder == 0) {        if (checkSecTer) {          result=Collator.GREATER;          checkSecTer=false;        }        gett=false;      } else       if (pTOrder == 0) {        if (checkSecTer) {          result=Collator.LESS;          checkSecTer=false;        }        gets=false;      } else {        if (pSOrder < pTOrder) {          return Collator.LESS;        } else {          return Collator.GREATER;        }      }    } else {      if (checkSecTer) {        short secSOrder=CollationElementIterator.secondaryOrder(sOrder);        short secTOrder=CollationElementIterator.secondaryOrder(tOrder);        if (secSOrder != secTOrder) {          result=(secSOrder < secTOrder) ? Collator.LESS : Collator.GREATER;          checkSecTer=false;        } else {          if (checkTertiary) {            short terSOrder=CollationElementIterator.tertiaryOrder(sOrder);            short terTOrder=CollationElementIterator.tertiaryOrder(tOrder);            if (terSOrder != terTOrder) {              result=(terSOrder < terTOrder) ? Collator.LESS : Collator.GREATER;              checkTertiary=false;            }          }        }      }    }  }  if (sOrder != CollationElementIterator.NULLORDER) {    do {      if (CollationElementIterator.primaryOrder(sOrder) != 0) {        return Collator.GREATER;      } else       if (CollationElementIterator.secondaryOrder(sOrder) != 0) {        if (checkSecTer) {          result=Collator.GREATER;          checkSecTer=false;        }      }    } while ((sOrder=sourceCursor.next()) != CollationElementIterator.NULLORDER);  } else   if (tOrder != CollationElementIterator.NULLORDER) {    do {      if (CollationElementIterator.primaryOrder(tOrder) != 0)       return Collator.LESS; else       if (CollationElementIterator.secondaryOrder(tOrder) != 0) {        if (checkSecTer) {          result=Collator.LESS;          checkSecTer=false;        }      }    } while ((tOrder=targetCursor.next()) != CollationElementIterator.NULLORDER);  }  if (result == 0 && getStrength() == IDENTICAL) {    int mode=getDecomposition();    Normalizer.Form form;    if (mode == CANONICAL_DECOMPOSITION) {      form=Normalizer.Form.NFD;    } else     if (mode == FULL_DECOMPOSITION) {      form=Normalizer.Form.NFKD;    } else {      return source.compareTo(target);    }    String sourceDecomposition=Normalizer.normalize(source,form);    String targetDecomposition=Normalizer.normalize(target,form);    return sourceDecomposition.compareTo(targetDecomposition);  }  return result;}  }
class C{  protected void tearDown(){}  }
class C{  public static String join(String separator,Object... elements){  return join(separator,Arrays.asList(elements));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Element element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)elementList.item(1);  attributes=element.getAttributes();  element.removeAttributeNS("http://www.nist.gov","domestic");{    boolean success=false;    try {      attribute=(Attr)attributes.removeNamedItemNS("http://www.nist.gov","domestic");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public void testGetNamespaceURI2() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrNamespaceURI;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddressNotNull",testAddr);  addrAttr=testAddr.getAttributeNodeNS("http://www.nist.gov","domestic");  attrNamespaceURI=addrAttr.getNamespaceURI();  assertEquals("namespaceURI","http://www.nist.gov",attrNamespaceURI);}  }
class C{  private int normalize(){  Name[] oldNames=null;  int maxOutArity=0;  int changesStart=0;  for (int i=0; i < names.length; i++) {    Name n=names[i];    if (!n.initIndex(i)) {      if (oldNames == null) {        oldNames=names.clone();        changesStart=i;      }      names[i]=n.cloneWithIndex(i);    }    if (n.arguments != null && maxOutArity < n.arguments.length)     maxOutArity=n.arguments.length;  }  if (oldNames != null) {    int startFixing=arity;    if (startFixing <= changesStart)     startFixing=changesStart + 1;    for (int i=startFixing; i < names.length; i++) {      Name fixed=names[i].replaceNames(oldNames,names,changesStart,i);      names[i]=fixed.newIndex(i);    }  }  assert (nameRefsAreLegal());  int maxInterned=Math.min(arity,INTERNED_ARGUMENT_LIMIT);  boolean needIntern=false;  for (int i=0; i < maxInterned; i++) {    Name n=names[i], n2=internArgument(n);    if (n != n2) {      names[i]=n2;      needIntern=true;    }  }  if (needIntern) {    for (int i=arity; i < names.length; i++) {      names[i].internArguments();    }  }  assert (nameRefsAreLegal());  return maxOutArity;}  }
class C{  private int hash(GraphicsConfiguration config,int w,int h,Object... args){  int hash;  hash=(config != null ? config.hashCode() : 0);  hash=31 * hash + w;  hash=31 * hash + h;  hash=31 * hash + Arrays.deepHashCode(args);  return hash;}  }
class C{  public FrameBodyTDEN(){}  }
class C{  private static Class<?> loadClass(String className,boolean initialize) throws ClassNotFoundException {  return Class.forName(className,initialize,ConfigurationFramework.getInstance().getClassLoader());}  }
class C{  private ConcurrentSkipListMap.Node<K,V> hiNode(){  if (hi == null)   return m.findLast(); else   if (hiInclusive)   return m.findNear(hi,LT | EQ); else   return m.findNear(hi,LT);}  }
class C{  public JsonValue initiateAuthentication(HttpServletRequest request,HttpServletResponse response,String authIndexType,String indexValue,String sessionUpgradeSSOTokenId) throws RestAuthException {  return authenticate(request,response,null,authIndexType,indexValue,sessionUpgradeSSOTokenId);}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode03.class,args);}  }
class C{  private DocGenerationHelper(){}  }
class C{  public static LogoutResponse processLogoutRequest(LogoutRequest logoutReq,String spEntityID,String realm,HttpServletRequest request,HttpServletResponse response,boolean isLBReq,String binding,boolean isVerified){  return processLogoutRequest(logoutReq,spEntityID,realm,request,response,isLBReq,true,binding,isVerified);}  }
class C{  public static boolean isDN(String candidateDN,int minNumComponent){  try {    return newDN(candidateDN).size() > minNumComponent;  } catch (  LocalizedIllegalArgumentException e) {    DEBUG.error("LDAPUtils.isDN: Invalid DN",e);  }  return false;}  }
class C{  public static int[] parseIntArray(int[] dest,String value){  String[] parts=value.split(",");  if (dest == null) {    dest=new int[parts.length];  }  for (int i=0; i < dest.length; i++) {    dest[i]=Integer.parseInt(parts[i]);  }  return dest;}  }
class C{  public void connectFailed(Connection connection,IOException failure){  Route failedRoute=connection.getRoute();  if (failedRoute.getProxy().type() != Proxy.Type.DIRECT && proxySelector != null) {    proxySelector.connectFailed(uri,failedRoute.getProxy().address(),failure);  }  routeDatabase.failed(failedRoute,failure);}  }
class C{  public Instant plusMillis(long millisToAdd){  return plus(millisToAdd / 1000,(millisToAdd % 1000) * 1000_000);}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public AuthenticationException(){  super(ERR_AUTHENTICATION_EXCEPTION_DEFAULT.get());}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.PGPDataElement createPGPDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.PGPDataElementImpl();}  }
class C{  public boolean isEmpty(){  return type == EMPTY;}  }
class C{  public void write(RandomAccessFile file) throws IOException {  logger.config("Saving ID3v11 tag to file");  byte[] buffer=new byte[TAG_LENGTH];  int i;  String str;  delete(file);  file.seek(file.length());  System.arraycopy(TAG_ID,FIELD_TAGID_POS,buffer,FIELD_TAGID_POS,TAG_ID.length);  int offset=FIELD_TITLE_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveTitle()) {    str=ID3Tags.truncate(title,FIELD_TITLE_LENGTH);    for (i=0; i < str.length(); i++) {      buffer[i + offset]=(byte)str.charAt(i);    }  }  offset=FIELD_ARTIST_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveArtist()) {    str=ID3Tags.truncate(artist,FIELD_ARTIST_LENGTH);    for (i=0; i < str.length(); i++) {      buffer[i + offset]=(byte)str.charAt(i);    }  }  offset=FIELD_ALBUM_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveAlbum()) {    str=ID3Tags.truncate(album,FIELD_ALBUM_LENGTH);    for (i=0; i < str.length(); i++) {      buffer[i + offset]=(byte)str.charAt(i);    }  }  offset=FIELD_YEAR_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveYear()) {    str=ID3Tags.truncate(year,FIELD_YEAR_LENGTH);    for (i=0; i < str.length(); i++) {      buffer[i + offset]=(byte)str.charAt(i);    }  }  offset=FIELD_COMMENT_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveComment()) {    str=ID3Tags.truncate(comment,FIELD_COMMENT_LENGTH);    for (i=0; i < str.length(); i++) {      buffer[i + offset]=(byte)str.charAt(i);    }  }  offset=FIELD_TRACK_POS;  buffer[offset]=track;  offset=FIELD_GENRE_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveGenre()) {    buffer[offset]=genre;  }  file.write(buffer);  logger.config("Saved ID3v11 tag to file");}  }
class C{  private Todo wrapObject(Todo todo,RoutingContext context){  int id=todo.getId();  if (id > Todo.getIncId()) {    Todo.setIncIdWith(id);  } else   if (id == 0)   todo.setIncId();  todo.setUrl(context.request().absoluteURI() + "/" + todo.getId());  return todo;}  }
class C{  private void initUIComponents(){  root=new Group();  stageContainer=new Group();  menuContainer=new StackPane();  quitDialog=new VBox(16);  quitDialog.setAlignment(Pos.CENTER);  menuContainer.setId("menuContainer");  scene=new Scene(root,WIDTH,HEIGHT,Color.rgb(107,140,255));  play=new Button("PLAY");  hScore=new Button("STATS");  credits=new Button("CREDITS");  quit=new Button("QUIT");  quitY=new Button("YES");  quitN=new Button("NO");  HBox quitOptions=new HBox(12,quitY,quitN);  quitOptions.setAlignment(Pos.CENTER);  quitConfirm=new Label("Are you sure you want to quit?");  quitConfirm.setId("quitConfirmLbl");  quitConfirm.setStyle("-fx-font-size: " + (9.955 * REL_HEIGHT));  quitDialog.getChildren().addAll(quitConfirm,quitOptions);  quitDialog.setId("quitDialog");  quitDialog.setVisible(false);  buttonContainer=new HBox(22,play,hScore,credits,quit);  buttonContainer.setAlignment(Pos.BOTTOM_CENTER);  buttonContainer.setPadding(new Insets(0,0,(REL_HEIGHT * 20.0),0));  splashView=new ImageView(splash);  creditsView=new ImageView(creditsImg);  creditsView.setVisible(false);  scoresView=new ImageView(new Image(getClass().getResource("/res/score_bg.png").toString(),WIDTH,HEIGHT,true,false,false));  scoresView.setVisible(false);  scoresDisplay=new Label("SCORE\n0000000");  scoresDisplay.setStyle("-fx-font-size: " + (5.6 * REL_HEIGHT) + "px");  scoresDisplay.setVisible(false);  scoresDisplay.setId("scoresDisplayLabel");  pauseLabel=new Label("Game Paused");  pauseLabel.setVisible(false);  pauseLabel.setStyle("-fx-text-fill: white");  pauseLabelBox=new HBox(pauseLabel);  pauseLabelBox.setId("pauseLbl");  pauseLabelBox.setAlignment(Pos.TOP_CENTER);  pauseLabelBox.setPadding(new Insets((REL_HEIGHT * 20.0),0,0,0));  coinCount=new Label("x0");  coinsDisplay=new HBox(5,statsCoin,coinCount);  coinCount.setStyle("-fx-font-size: " + (5.6 * REL_HEIGHT) + "px");  coinsDisplay.setVisible(false);  coinCount.setId("scoresDisplayLabel");  menuContainer.setPrefSize(WIDTH,HEIGHT);  menuContainer.getChildren().addAll(quitDialog,splashView,scoresView,stats,creditsView,buttonContainer,pauseLabelBox);  stageFloorBase=new StageFloorBase(new String[]{" M " + RelCoordinates.getRelCoords(768,136) + " L "+ RelCoordinates.getRelCoords(768,136,768,148)+ RelCoordinates.getRelCoords(768,148,766,160)+ RelCoordinates.getRelCoords(766,160,766,200)+ RelCoordinates.getRelCoords(766,200,914,200)+ RelCoordinates.getRelCoords(914,200,914,160)+ RelCoordinates.getRelCoords(914,160,912,148)+ RelCoordinates.getRelCoords(912,148,912,136)+ RelCoordinates.getRelCoords(912,136,944,136)+ RelCoordinates.getRelCoords(944,136,944,148)+ RelCoordinates.getRelCoords(944,148,942,160)+ RelCoordinates.getRelCoords(942,160,942,200)+ RelCoordinates.getRelCoords(942,200,1104,200)+ RelCoordinates.getRelCoords(1104,200,1104,224)+ RelCoordinates.getRelCoords(1104,224,0,224)+ RelCoordinates.getRelCoords(0,224,0,200)+ RelCoordinates.getRelCoords(0,200,450,200)+ RelCoordinates.getRelCoords(450,200,450,190)+ RelCoordinates.getRelCoords(450,190,448,181)+ RelCoordinates.getRelCoords(448,181,448,168)+ RelCoordinates.getRelCoords(448,168,480,168)+ RelCoordinates.getRelCoords(480,168,480,181)+ RelCoordinates.getRelCoords(480,181,478,187)+ RelCoordinates.getRelCoords(478,187,478,200)+ RelCoordinates.getRelCoords(478,200,610,200)+ RelCoordinates.getRelCoords(610,200,610,176)+ RelCoordinates.getRelCoords(610,176,608,164)+ RelCoordinates.getRelCoords(608,164,608,152)+ RelCoordinates.getRelCoords(608,152,640,152)+ RelCoordinates.getRelCoords(640,152,640,164)+ RelCoordinates.getRelCoords(640,164,638,176)+ RelCoordinates.getRelCoords(638,176,638,200)+ RelCoordinates.getRelCoords(638,200,738,200)+ RelCoordinates.getRelCoords(738,200,738,160)+ RelCoordinates.getRelCoords(738,160,736,148)+ RelCoordinates.getRelCoords(736,148,736,136)+ RelCoordinates.getRelCoords(736,136,768,136)+ " Z"," M " + RelCoordinates.getRelCoords(1376,200) + " L "+ RelCoordinates.getRelCoords(1376,200,1376,224)+ RelCoordinates.getRelCoords(1376,224,1136,224)+ RelCoordinates.getRelCoords(1136,224,1136,200)+ RelCoordinates.getRelCoords(1136,200,1376,200)+ " Z"," M " + RelCoordinates.getRelCoords(2208,136) + " L "+ RelCoordinates.getRelCoords(2208,136,2208,200)+ RelCoordinates.getRelCoords(2208,200,2240,200)+ RelCoordinates.getRelCoords(2240,200,2240,136)+ RelCoordinates.getRelCoords(2240,136,2256,136)+ RelCoordinates.getRelCoords(2256,136,2256,152)+ RelCoordinates.getRelCoords(2256,152,2272,152)+ RelCoordinates.getRelCoords(2272,152,2272,168)+ RelCoordinates.getRelCoords(2272,168,2288,168)+ RelCoordinates.getRelCoords(2288,168,2288,184)+ RelCoordinates.getRelCoords(2288,184,2304,184)+ RelCoordinates.getRelCoords(2304,184,2304,200)+ RelCoordinates.getRelCoords(2304,200,2368,200)+ RelCoordinates.getRelCoords(2368,200,2368,184)+ RelCoordinates.getRelCoords(2368,184,2384,184)+ RelCoordinates.getRelCoords(2384,184,2384,168)+ RelCoordinates.getRelCoords(2384,168,2400,168)+ RelCoordinates.getRelCoords(2400,168,2400,152)+ RelCoordinates.getRelCoords(2400,152,2416,152)+ RelCoordinates.getRelCoords(2416,152,2416,136)+ RelCoordinates.getRelCoords(2416,136,2448,136)+ RelCoordinates.getRelCoords(2448,136,2448,224)+ RelCoordinates.getRelCoords(2448,224,1424,224)+ RelCoordinates.getRelCoords(1424,224,1424,200)+ RelCoordinates.getRelCoords(1424,200,2144,200)+ RelCoordinates.getRelCoords(2144,200,2144,184)+ RelCoordinates.getRelCoords(2144,184,2160,184)+ RelCoordinates.getRelCoords(2160,184,2160,168)+ RelCoordinates.getRelCoords(2160,168,2176,168)+ RelCoordinates.getRelCoords(2176,168,2176,152)+ RelCoordinates.getRelCoords(2176,152,2192,152)+ RelCoordinates.getRelCoords(2192,152,2192,136)+ RelCoordinates.getRelCoords(2192,136,2208,136)+ " Z","M " + RelCoordinates.getRelCoords(3040,72) + " L "+ RelCoordinates.getRelCoords(3040,72,3040,200)+ RelCoordinates.getRelCoords(3040,200,3392,200)+ RelCoordinates.getRelCoords(3168,200,3168,184)+ RelCoordinates.getRelCoords(3168,184,3184,184)+ RelCoordinates.getRelCoords(3184,184,3184,200)+ RelCoordinates.getRelCoords(3184,200,3392,200)+ RelCoordinates.getRelCoords(3392,200,3392,224)+ RelCoordinates.getRelCoords(3392,224,2480,224)+ RelCoordinates.getRelCoords(2480,224,2480,136)+ RelCoordinates.getRelCoords(2480,136,2496,136)+ RelCoordinates.getRelCoords(2496,136,2496,152)+ RelCoordinates.getRelCoords(2496,152,2512,152)+ RelCoordinates.getRelCoords(2512,152,2512,168)+ RelCoordinates.getRelCoords(2512,168,2528,168)+ RelCoordinates.getRelCoords(2528,168,2528,184)+ RelCoordinates.getRelCoords(2528,184,2544,184)+ RelCoordinates.getRelCoords(2544,184,2544,200)+ RelCoordinates.getRelCoords(2544,200,2610,200)+ RelCoordinates.getRelCoords(2610,200,2610,190)+ RelCoordinates.getRelCoords(2610,190,2608,181)+ RelCoordinates.getRelCoords(2608,181,2608,168)+ RelCoordinates.getRelCoords(2608,181,2608,168)+ RelCoordinates.getRelCoords(2608,168,2641,168)+ RelCoordinates.getRelCoords(2641,168,2641,183)+ RelCoordinates.getRelCoords(2641,183,2638,183)+ RelCoordinates.getRelCoords(2638,183,2638,200)+ RelCoordinates.getRelCoords(2638,200,2866,200)+ RelCoordinates.getRelCoords(2866,200,2866,190)+ RelCoordinates.getRelCoords(2866,190,2864,181)+ RelCoordinates.getRelCoords(2864,181,2864,168)+ RelCoordinates.getRelCoords(2864,168,2896,168)+ RelCoordinates.getRelCoords(2896,168,2896,181)+ RelCoordinates.getRelCoords(2896,181,2894,187)+ RelCoordinates.getRelCoords(2894,187,2894,200)+ RelCoordinates.getRelCoords(2894,200,2896,200)+ RelCoordinates.getRelCoords(2896,200,2896,184)+ RelCoordinates.getRelCoords(2896,184,2912,184)+ RelCoordinates.getRelCoords(2912,184,2912,168)+ RelCoordinates.getRelCoords(2912,168,2928,168)+ RelCoordinates.getRelCoords(2928,168,2928,152)+ RelCoordinates.getRelCoords(2928,152,2944,152)+ RelCoordinates.getRelCoords(2944,152,2944,136)+ RelCoordinates.getRelCoords(2944,136,2960,136)+ RelCoordinates.getRelCoords(2960,136,2960,120)+ RelCoordinates.getRelCoords(2960,120,2976,120)+ RelCoordinates.getRelCoords(2976,120,2976,104)+ RelCoordinates.getRelCoords(2976,104,2992,104)+ RelCoordinates.getRelCoords(2992,104,2992,88)+ RelCoordinates.getRelCoords(2992,88,3008,88)+ RelCoordinates.getRelCoords(3008,88,3008,72)+ RelCoordinates.getRelCoords(3008,72,3040,72)+ " Z","M " + RelCoordinates.getRelCoords(3277,200) + " L "+ RelCoordinates.getRelCoords(3277,100)},floorBase);  aura=new Aura(root,auraScaleY,auraScaleX,auraWindEffects,auraSprites);  player=new Mario(this,new String[]{"M " + 2.0 * REL_HEIGHT + "," + -5.0 * REL_HEIGHT + " L " + (MARIOSCALEX_s - (2.0 * REL_HEIGHT)) + "," + -5.0 * REL_HEIGHT,"M " + (MARIOSCALEX_s) + ","+ 2.0 * REL_HEIGHT + " L " + (MARIOSCALEX_s) + "," + (MARIOSCALEY_s - (3.0 * REL_HEIGHT)),"M " + (1.3 * REL_HEIGHT) + ","+ MARIOSCALEY_s+ " L "+ (MARIOSCALEX_s - (1.3 * REL_HEIGHT))+ ","+ (MARIOSCALEY_s),"M 0," + 2.0 * REL_HEIGHT + " L 0," + (MARIOSCALEY_s - (3.0 * REL_HEIGHT)),"M " + (MARIOSCALEX_s - (5.0 * REL_HEIGHT)) + ","+ (MARIOSCALEY_s - 1)+ " L "+ (5.0 * REL_HEIGHT)+ ","+ (MARIOSCALEY_s - 1),"M 0,0 L " + MARIOSCALEX_s + ",0 "+ MARIOSCALEX_s+ ","+ (MARIOSCALEY_s - (2.24 * REL_HEIGHT))+ " 0,"+ (MARIOSCALEY_s - (2.24 * REL_HEIGHT))+ " Z"},new String[]{"M " + 2.0 * REL_HEIGHT + "," + -5.0 * REL_HEIGHT + " L " + (MARIOSCALEY_s - (2.0 * REL_HEIGHT)) + "," + -5.0 * REL_HEIGHT,"M " + (MARIOSCALEY_s) + ","+ 2.0 * REL_HEIGHT + " L " + (MARIOSCALEY_s) + "," + (MARIOSCALEY_b - (3.0 * REL_HEIGHT)),"M " + (1.3 * REL_HEIGHT) + ","+ MARIOSCALEY_b+ " L "+ (MARIOSCALEY_s - (1.3 * REL_HEIGHT))+ ","+ (MARIOSCALEY_b),"M 0," + 2.0 * REL_HEIGHT + " L 0," + (MARIOSCALEY_b - (3.0 * REL_HEIGHT)),"M " + (MARIOSCALEY_s - (5.0 * REL_HEIGHT)) + ","+ (MARIOSCALEY_b - 1)+ " L "+ (5.0 * REL_HEIGHT)+ ","+ (MARIOSCALEY_b - 1),"M 0,0 L " + MARIOSCALEY_s + ",0 "+ MARIOSCALEY_s+ ","+ (MARIOSCALEY_b - (2.24 * REL_HEIGHT))+ " 0,"+ (MARIOSCALEY_b - (2.24 * REL_HEIGHT))+ " Z"},RelCoordinates.getRelX(20),-200,(float)1.5 * REL_HEIGHT,(float)(12.0 * REL_HEIGHT),mario0,mario1,mario2,mario3,mario4,mario5,mario6,mario7,mario8,mario9,mario10,mario11,mario12,mario13,mario14,mario15,mario16,mario17,mario18,mario19,mario20,mario21,mario22,mario23,mario24);  player.getSpriteFrame().setVisible(false);  starBrickSprites=new Image[]{brick0,tile4};  gameLoop=new GameLoop(this);  flag=new FlagPole("M " + RelCoordinates.getRelCoords(35,11) + " L "+ RelCoordinates.getRelCoords(35,11,35,172)+ RelCoordinates.getRelCoords(35,172,21,172)+ RelCoordinates.getRelCoords(21,172,21,11)+ RelCoordinates.getRelCoords(21,11,35,11),RelCoordinates.getRelX((int)(3175 - REL_HEIGHT)),RelCoordinates.getRelY(28),flagPoleSprites);  stageContainer.getChildren().addAll(stageFloorBase.getSpriteFrame(),stageFloorBase.getSpriteBoundsArray()[0],stageFloorBase.getSpriteBoundsArray()[1],stageFloorBase.getSpriteBoundsArray()[2],stageFloorBase.getSpriteBoundsArray()[3],stageFloorBase.getSpriteBoundsArray()[4],flag.getSpriteBounds(),flag.getSpriteFrame());  root.getChildren().addAll(stageContainer,menuContainer,player.getSpriteBoundsArray()[0],player.getSpriteBoundsArray()[1],player.getSpriteBoundsArray()[2],player.getSpriteBoundsArray()[3],player.getSpriteBoundsArray()[4],player.getSpriteBoundsArray()[5],player.getSpriteFrame(),jumpEffect,jumpTrail,scoresDisplay,coinsDisplay);  root.getStylesheets().add(getClass().getResource("/main/Styles.css").toString());  setMainMenuFocus(true);}  }
class C{  public static <I,M,E extends Exception>Set<M> transformSet(final Collection<I> values,final Function<I,M,E> mapper) throws E {  Reject.ifNull(values,mapper);  final Set<M> newSet=new HashSet<M>(values.size());  for (  I value : values) {    newSet.add(mapper.apply(value));  }  return newSet;}  }
class C{  public void init(KeyGenerationParameters param){  this.random=param.getRandom();  this.strength=(param.getStrength() + 7) / 8;  if (strength == 0 || strength == (168 / 8)) {    strength=DESedeParameters.DES_EDE_KEY_LENGTH;  } else   if (strength == (112 / 8)) {    strength=2 * DESedeParameters.DES_KEY_LENGTH;  } else   if (strength != DESedeParameters.DES_EDE_KEY_LENGTH && strength != (2 * DESedeParameters.DES_KEY_LENGTH)) {    throw new IllegalArgumentException("DESede key must be " + (DESedeParameters.DES_EDE_KEY_LENGTH * 8) + " or "+ (2 * 8 * DESedeParameters.DES_KEY_LENGTH)+ " bits long.");  }}  }
class C{  private final void nextToken(){  if (m_queueMark < m_ops.getTokenQueueSize()) {    m_token=(String)m_ops.m_tokenQueue.elementAt(m_queueMark++);    m_tokenChar=m_token.charAt(0);  } else {    m_token=null;    m_tokenChar=0;  }}  }
class C{  private BigDecimal convertIntToBigDecimal(int quoteParam){  BigDecimal quoteParamBigDecimal=new BigDecimal(quoteParam).divide(new BigDecimal(100),new MathContext(8,RoundingMode.HALF_DOWN));  return quoteParamBigDecimal;}  }
class C{  @Override public String toJson(){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionSerializer());  return gson.create().toJson(this);}  }
class C{  @Override public int size(){  return size;}  }
class C{  public static FSNameIdentifierMappingResponse parseXML(String xml) throws FSMsgException {  Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);  if (doc == null) {    FSUtils.debug.error("FSNameIdentifierMappingResponse.parseXML: " + "error while parsing input xml string");    throw new FSMsgException("parseError",null);  }  Element root=doc.getDocumentElement();  return new FSNameIdentifierMappingResponse(root);}  }
class C{  public void logDebug(String message){  logger.debug(message);}  }
class C{  public void enter(Thread threadId,MetricReference metricReference){  HashMap<MetricReference,Object> attribs=getAttributes(threadId);  attribs.put(metricReference,System.currentTimeMillis());}  }
class C{  public static Status parseStatus(org.w3c.dom.Element elem) throws DiscoveryException {  if (elem == null) {    debug.message("DiscoUtils.parseStatus: nullInput");    throw new DiscoveryException(bundle.getString("nullInput"));  }  String nameSpaceURI=elem.getNamespaceURI();  String prefix=elem.getPrefix();  Status status=new Status(nameSpaceURI,prefix);  String code=elem.getAttribute("code");  if ((code == null) || (code.length() == 0)) {    debug.message("DiscoUtils.parseStatus: missing status code.");    throw new DiscoveryException(bundle.getString("missingStatusCode"));  }  String codeNS=nameSpaceURI;  String codePrefix=prefix;  String localPart=code;  if (code.indexOf(":") != -1) {    StringTokenizer st=new StringTokenizer(code,":");    if (st.countTokens() != 2) {      debug.message("DiscoUtils.parseStatus: wrong status code.");      throw new DiscoveryException(bundle.getString("wrongInput"));    }    codePrefix=st.nextToken();    localPart=st.nextToken();  }  if ((codePrefix != null) && (prefix != null) && (!codePrefix.equals(prefix))) {    codeNS=elem.getAttribute("xmlns:" + codePrefix);  }  if ((codeNS != null) && (codeNS.length() != 0)) {    if ((codePrefix != null) && (codePrefix.length() != 0)) {      status.setCode(new QName(codeNS,localPart,codePrefix));    } else {      status.setCode(new QName(codeNS,localPart));    }  } else {    status.setCode(new QName(localPart));  }  status.setComment(elem.getAttribute("comment"));  status.setRef(elem.getAttribute("ref"));  List subStatusL=XMLUtils.getElementsByTagNameNS1(elem,DiscoConstants.DISCO_NS,"Status");  int num=subStatusL.size();  if (num != 0) {    if (num == 1) {      status.setSubStatus(parseStatus((Element)subStatusL.get(0)));    } else {      if (debug.messageEnabled()) {        debug.message("DiscoUtils.parseStatus: included more than " + "one sub status.");      }      throw new DiscoveryException(bundle.getString("moreElement"));    }  }  return status;}  }
class C{  public void removeRow(int row){  dataVector.removeElementAt(row);  fireTableRowsDeleted(row,row);}  }
class C{  public String toString(){  return "AudioFile " + getFile().getAbsolutePath() + "  --------\n"+ audioHeader.toString()+ "\n"+ ((tag == null) ? "" : tag.toString())+ "\n-------------------";}  }
class C{  public Event35.Builder clearEventID(){  eventID=null;  fieldSetFlags()[1]=false;  return this;}  }
class C{  private void constrainSize(int axis,SizeRequirements want,SizeRequirements min){  if (min.minimum > want.minimum) {    want.minimum=want.preferred=min.minimum;    want.maximum=Math.max(want.maximum,min.maximum);  }}  }
class C{  public void ensureCapacity(int additionalCapacity){  int sizeNeeded=size + additionalCapacity;  if (sizeNeeded >= threshold)   resize(nextPowerOfTwo((int)(sizeNeeded / loadFactor)));}  }
class C{  String formatRomanDigit(int level,int digit){  String result="";  if (digit == 9) {    result=result + romanChars[level][0];    result=result + romanChars[level + 1][0];    return result;  } else   if (digit == 4) {    result=result + romanChars[level][0];    result=result + romanChars[level][1];    return result;  } else   if (digit >= 5) {    result=result + romanChars[level][1];    digit-=5;  }  for (int i=0; i < digit; i++) {    result=result + romanChars[level][0];  }  return result;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ModifyType createModifyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ModifyTypeImpl();}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.CipherReferenceElement createCipherReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.CipherReferenceElementImpl();}  }
class C{  boolean changeNumberIsInRange(long changeNumber){  return highestChangeNumber == -1 || changeNumber <= highestChangeNumber;}  }
class C{  static void recycleWriter(LDAPWriter<ASN1BufferWriter> writer){  writer.getASN1Writer().recycle();  ThreadCache.putToCache(WRITER_INDEX,writer);}  }
class C{  public void testReceive_UnconnectedNull() throws Exception {  assertFalse(this.channel1.isConnected());  try {    this.channel1.receive(null);    fail("Should throw a NPE here.");  } catch (  NullPointerException e) {  }}  }
class C{  public boolean isBorderOpaque(){  return true;}  }
class C{  public static void load(List<LicenseEntry> entries){  new LoadLicenseTask().execute(entries.toArray(new LicenseEntry[entries.size()]));}  }
class C{  @Override public int read(char[] chr,int st,int len) throws IOException {  try {    beforeRead(len);    int n=in.read(chr,st,len);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public void unassignAllPolicies(String serviceName,Set policyDNs) throws AMException, SSOException {  throw new UnsupportedOperationException();}  }
class C{  public void actionPerformed(ActionEvent e){  if (ADJUSTTIMER) {    long time=System.currentTimeMillis();    if (lastCall > 0) {      int nextDelay=(int)(previousDelay - time + lastCall + getRepaintInterval());      if (nextDelay < MINIMUM_DELAY) {        nextDelay=MINIMUM_DELAY;      }      timer.setInitialDelay(nextDelay);      previousDelay=nextDelay;    }    timer.start();    lastCall=time;  }  incrementAnimationIndex();}  }
class C{  public static BooleanArgument doNotStartArgument() throws ArgumentException {  return BooleanArgument.builder("doNotStart").shortIdentifier('O').description(INFO_SETUP_DESCRIPTION_DO_NOT_START.get()).buildArgument();}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    return -1;  }  int receivedLength;  int copiedLength;  if (bytes == null) {    bytes=domain.receiveEntryBytes();    if (bytes == null) {      closed=true;      return -1;    }    receivedLength=bytes.length;    index=0;  } else {    receivedLength=bytes.length - index;  }  if (receivedLength <= len) {    copiedLength=receivedLength;  } else {    copiedLength=len;  }  System.arraycopy(bytes,index,b,off,copiedLength);  index+=copiedLength;  if (index == bytes.length) {    bytes=null;  }  return copiedLength;}  }
class C{  public static String renameFileWithBadExt(final ResourceType type,final String fileName){  if (type == null || fileName == null) {    return null;  }  if (fileName.indexOf('.') == -1) {    return fileName;  }  StringTokenizer tokens=new StringTokenizer(fileName,".");  String cfileName=tokens.nextToken();  String currToken;  while (tokens.hasMoreTokens()) {    currToken=tokens.nextToken();    if (tokens.hasMoreElements()) {      cfileName=cfileName.concat(checkSingleExtension(currToken,type) ? "." : "_");      cfileName=cfileName.concat(currToken);    } else {      cfileName=cfileName.concat(".".concat(currToken));    }  }  return cfileName;}  }
class C{  private void stopRecording(){  try {    mLogcatViewerService.stopRecording();  } catch (  RemoteException e) {    Log.e(LOG_TAG,"StopRecording:Trouble writing the log to a file");  }}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.InteractionRequestElement createInteractionRequestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InteractionRequestElementImpl();}  }
class C{  public boolean isLoaded(){  return (getViewCount() != 0);}  }
class C{  protected Type(String name){  super(name);}  }
class C{  public Event35Id.Builder clearDescription(){  description=null;  fieldSetFlags()[0]=false;  return this;}  }
class C{  public static ManagementContext newManagementContext(Connection connection,LDAPProfile profile){  Reject.ifNull(connection,profile);  LDAPDriver driver=new LDAPDriver(connection,profile);  LDAPManagementContext context=new LDAPManagementContext(driver);  driver.setManagementContext(context);  return context;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetdoctype.class,args);}  }
class C{  boolean isValidCOTName(String realm,String name) throws COTException {  String classMethod="COTManager.isValidCOTName: ";  if ((name == null) || (name.trim().length() == 0) || !getAllCirclesOfTrust(realm).contains(name)) {    debug.error(classMethod + "invalid circle of trust name :" + name);    String[] data={realm,name};    LogUtil.error(Level.INFO,LogUtil.INVALID_COT_NAME,data);    throw new COTException("invalidCOTName",data);  }  return true;}  }
class C{  public byte[] composeString(byte[] oldString,byte newString){  int length=oldString.length;  byte[] string=new byte[length + 1];  System.arraycopy(oldString,0,string,0,length);  string[length]=newString;  return string;}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endPrefixMapping: " + prefix);  if (m_contentHandler != null) {    m_contentHandler.endPrefixMapping(prefix);  }}  }
class C{  private static float[] HSLtoRGB(float[] hsl,float[] rgb){  if (rgb == null) {    rgb=new float[3];  }  float hue=hsl[0];  float saturation=hsl[1];  float lightness=hsl[2];  if (saturation > 0.0f) {    hue=(hue < 1.0f) ? hue * 6.0f : 0.0f;    float q=lightness + saturation * ((lightness > 0.5f) ? 1.0f - lightness : lightness);    float p=2.0f * lightness - q;    rgb[0]=normalize(q,p,(hue < 4.0f) ? (hue + 2.0f) : (hue - 4.0f));    rgb[1]=normalize(q,p,hue);    rgb[2]=normalize(q,p,(hue < 2.0f) ? (hue + 4.0f) : (hue - 2.0f));  } else {    rgb[0]=lightness;    rgb[1]=lightness;    rgb[2]=lightness;  }  return rgb;}  }
class C{  DOMStringListImpl(String[] params){  fStrings=new Vector();  if (params != null) {    for (int i=0; i < params.length; i++) {      fStrings.add(params[i]);    }  }}  }
class C{  public MultipartMimeContentImpl(ContentTypeHeader contentTypeHeader){  this.multipartMimeContentTypeHeader=contentTypeHeader;  this.boundary=contentTypeHeader.getParameter(BOUNDARY);}  }
class C{  protected Object createSubtreeEvaluationMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  subtreePolicyEvaluation=new SubtreeEvaluationImpl(this);  return subtreePolicyEvaluation;}  }
class C{  private void cleanupCache(){  if (delegationCache.size() > 0) {    delegationCache.clear();    if (DelegationManager.debug.messageEnabled()) {      DelegationManager.debug.message("DelegationPolicyImpl.cleanupCache(): cache cleared");    }  }  if (SubjectEvaluationCache.subjectEvalCacheTTL > 0 && !SubjectEvaluationCache.subjectEvaluationCache.isEmpty()) {    SubjectEvaluationCache.subjectEvaluationCache.clear();    if (DelegationManager.debug.messageEnabled()) {      DelegationManager.debug.message("DelegationPolicyImpl.cleanupCache(): subjectEvaluationCache cleared");    }  }}  }
class C{  public boolean isMemoryAvailable(long size){  if (allowOvercommit) {    return true;  }  if (acquireMemory(size)) {    releaseMemory(size);    return true;  }  return false;}  }
class C{  public SQLTransientException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public boolean isExpired(){  return isExpired(ticker.read());}  }
class C{  public void update(Syntax syntax,Schema schema){  String n=syntax.getName();  if (n == null) {    n=NOT_APPLICABLE.toString();  }  titlePanel.setDetails(LocalizableMessage.raw(n));  name.setText(n);  oid.setText(syntax.getOID());  n=syntax.getDescription();  if (n == null) {    n=NOT_APPLICABLE.toString();  }  description.setText(n);  Comparator<String> lowerCaseComparator=new LowerCaseComparator();  TreeSet<String> attributes=new TreeSet<>(lowerCaseComparator);  for (  AttributeType attr : schema.getAttributeTypes()) {    if (syntax == attr.getSyntax()) {      attributes.add(attr.getNameOrOID());    }  }  DefaultListModel model=(DefaultListModel)usedByAttributes.getModel();  model.clear();  for (  String attr : attributes) {    model.addElement(attr);  }}  }
class C{  @NonNull public final Agera observeOnMain(boolean coalesce){  return observeOn(Looper.getMainLooper(),coalesce);}  }
class C{  public synchronized StringBuffer delete(int start,int end){  delete0(start,end);  return this;}  }
class C{  public Builder requiredAttributes(final Collection<String> nameOrOIDs){  this.requiredAttributes.addAll(nameOrOIDs);  return this;}  }
class C{  @Override public void backgroundProcess(){  if (started) {    if (watchEnabled) {      count=(count + 1) % processDeployFrequency;      if (count == 0) {        watcher.check();      }    }    removeInvalidFileFactories();  }}  }
class C{  private void execute(final HttpServletRequest request,final HttpServletResponse response,final IConfiguration configuration,final ServletContext sc,final Object... params) throws ConnectorException {  Command com;  try {    com=command.getClass().newInstance();  } catch (  IllegalAccessException e1) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_COMMAND);  }catch (  InstantiationException e1) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_COMMAND);  }  if (com == null) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_COMMAND);  }  com.runCommand(request,response,configuration,params);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.QueryResponseElement createQueryResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.QueryResponseElementImpl();}  }
class C{  public void skippedEntity(String name) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#skippedEntity: " + name);  if (m_contentHandler != null) {    m_contentHandler.skippedEntity(name);  }}  }
class C{  public T add(T elem){  if (elem == null)   throw new NullPointerException();  T interned;  WeakEntry<T> e=new WeakEntry<>(elem,stale);  do {    expungeStaleElements();    WeakEntry<T> exist=map.putIfAbsent(e,e);    interned=(exist == null) ? elem : exist.get();  } while (interned == null);  return interned;}  }
class C{  void endPaint(){  if (isPaintingThread()) {    PaintManager paintManager=null;synchronized (this) {      if (--paintDepth == 0) {        paintManager=getPaintManager();      }    }    if (paintManager != null) {      paintManager.endPaint();synchronized (this) {        paintThread=null;      }    }  }}  }
class C{  public static String ensureLeft(final String value,final String prefix){  return ensureLeft(value,prefix,true);}  }
class C{  @Override public boolean allowedInBranch(){  return true;}  }
class C{  public LogWriter(final File file) throws ChangelogException {  this.file=file;  try {    FileOutputStream fos=new FileOutputStream(file,true);    this.stream=new MeteredStream(fos,file.length());    this.fileDescriptor=fos.getFD();  } catch (  Exception e) {    throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_OPEN_LOG_FILE.get(file.getPath()));  }}  }
class C{  @Override public List<Foo> findByField2(boolean field2){  return findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  void writeLine(BufferedWriter writer,String line) throws IOException {  writer.write(line);  writer.newLine();}  }
class C{  public static NSObject parse(InputStream is) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {  DocumentBuilder docBuilder=getDocBuilder();  Document doc=docBuilder.parse(is);  return parse(doc);}  }
class C{  public InvalidAttributeValueException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);  resourceBundleName=rbName;  errCode=errorCode;  if (args.length > 2) {    this.rbName=(String)args[1];    this.attributeI18nKey=(String)args[2];  }}  }
class C{  public void deleteSubGroupContainers(Set groupContainers) throws AMException, SSOException {  Iterator iter=groupContainers.iterator();  while (iter.hasNext()) {    String groupContainerDN=(String)iter.next();    AMGroupContainer groupContainer=new AMGroupContainerImpl(token,groupContainerDN);    groupContainer.delete();  }}  }
class C{  static String stringFromPacket(DatagramPacket packet){  return new String(packet.getData(),0,packet.getLength());}  }
class C{  public long insert(String appName,String pkgName,Boolean enabled,Boolean loginEnabled,String username,String password){  if (appName == null || pkgName == null || enabled == null || loginEnabled == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_APPNAME,appName);  initialValues.put(KEY_PKGNAME,pkgName);  initialValues.put(KEY_ENABLED,enabled);  initialValues.put(KEY_LOGIN,loginEnabled);  initialValues.put(KEY_USERNAME,username);  initialValues.put(KEY_PASSWORD,password);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public static EntryReader newEntryCollectionReader(final Collection<Entry> entries){  return new EntryIteratorReader(entries.iterator());}  }
class C{  private boolean processAddRequest(LDAPMessage message,List<Control> controls){  if (ldapVersion == 2 && !controls.isEmpty()) {    AddResponseProtocolOp responseOp=new AddResponseProtocolOp(LDAPResultCode.PROTOCOL_ERROR,ERR_LDAPV2_CONTROLS_NOT_ALLOWED.get());    sendLDAPMessage(message,responseOp);    disconnectControlsNotAllowed();    return false;  }  AddRequestProtocolOp protocolOp=message.getAddRequestProtocolOp();  AddOperationBasis addOp=new AddOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls,protocolOp.getDN(),protocolOp.getAttributes());  try {    addOperationInProgress(addOp);  } catch (  DirectoryException de) {    logger.traceException(de);    AddResponseProtocolOp responseOp=new AddResponseProtocolOp(de.getResultCode().intValue(),de.getMessageObject(),de.getMatchedDN(),de.getReferralURLs());    sendLDAPMessage(new LDAPMessage(message.getMessageID(),responseOp,addOp.getResponseControls()));  }  return connectionValid;}  }
class C{  private String modifyEntry(String entry,String element,DSTString dstString){  StringBuffer sb=new StringBuffer(100);  StringTokenizer st=new StringTokenizer(entry,"|");  while (st.hasMoreTokens()) {    String token=st.nextToken();    StringTokenizer tokenizer=new StringTokenizer(token,"=");    String newToken=tokenizer.nextToken();    if (element.equals(newToken)) {      String value=null;      if (dstString != null) {        value=dstString.getValue();      }      if (value != null) {        sb.append(element).append("=").append(dstString.getValue()).append("|");      }    } else {      sb.append(token).append("|");    }  }  return sb.toString();}  }
class C{  public String toGnuStepASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCIIGnuStep(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  public void resume(){  setPaused(false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementreplaceattributewithself.class,args);}  }
class C{  public ObjectSlot[] slots(){  return slotsToSerialize;}  }
class C{  private Attributes updateAttributes(Attributes list){  if (list.getLength() == 0) {    return list;  }  AttributesImpl newAttrs=new AttributesImpl(list);  int nAttributes=newAttrs.getLength();  for (int i=0; i < nAttributes; ++i) {    String value=newAttrs.getValue(i);    try {      String newValue=IntrospectionUtils.replaceProperties(value,null,source);      if (value != newValue) {        newAttrs.setValue(i,newValue);      }    } catch (    Exception e) {    }  }  return newAttrs;}  }
class C{  protected String int2singlealphaCount(long val,CharArrayWrapper table){  int radix=table.getLength();  if (val > radix) {    return getZeroString();  } else   return (new Character(table.getChar((int)val - 1))).toString();}  }
class C{  public static Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByField2_Last(field2,orderByComparator);}  }
class C{  public void list(PrintWriter out){  out.println("-- listing properties --");  Hashtable<String,Object> h=new Hashtable<>();  enumerate(h);  for (Enumeration<String> e=h.keys(); e.hasMoreElements(); ) {    String key=e.nextElement();    String val=(String)h.get(key);    if (val.length() > 40) {      val=val.substring(0,37) + "...";    }    out.println(key + "=" + val);  }}  }
class C{  public UserNamePasswordValidationException(Throwable t){  super(t);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.paste();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.X509TokenElement createX509TokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.X509TokenElementImpl();}  }
class C{  public static void convertToGnuStepASCII(File in,File out) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  NSObject root=parse(in);  if (root instanceof NSDictionary) {    saveAsGnuStepASCII((NSDictionary)root,out);  } else   if (root instanceof NSArray) {    saveAsGnuStepASCII((NSArray)root,out);  } else {    throw new PropertyListFormatException("The root of the given input property list " + "is neither a Dictionary nor an Array!");  }}  }
class C{  private PlaPointInt try_neckdown_at_end(PlaPointInt p_from_corner,PlaPointInt p_to_corner){  if (!(nearest_target_item instanceof BrdAbitPin))   return p_from_corner;  BrdAbitPin target_pin=(BrdAbitPin)nearest_target_item;  if (!target_pin.is_on_layer(layer_active_no))   return p_from_corner;  PlaPointFloat pin_center=target_pin.center_get().to_float();  double curr_clearance=r_board.brd_rules.clearance_matrix.value_at(clearance_class,target_pin.clearance_idx(),layer_active_no);  double pin_neck_down_distance=2 * (0.5 * target_pin.get_max_width(layer_active_no) + curr_clearance);  if (pin_center.distance(p_from_corner.to_float()) >= pin_neck_down_distance) {    return p_from_corner;  }  int neck_down_halfwidth=target_pin.get_trace_neckdown_halfwidth(layer_active_no);  if (neck_down_halfwidth >= pen_half_width_arr[layer_active_no]) {    return p_from_corner;  }  TimeLimit time_limit=new TimeLimit(s_CHECK_FORCED_TRACE_TIME_MAX);  PlaPointInt ok_point=r_board.insert_trace(p_from_corner,p_to_corner,neck_down_halfwidth,layer_active_no,net_nos,clearance_class,max_shove_trace_recursion_depth,max_shove_via_recursion_depth,max_spring_over_recursion_depth,itera_settings.trace_pullt_min_move,!is_stitch_mode,time_limit);  return ok_point;}  }
class C{  Object processNUMBER(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    Double val;    AVT avt=null;    try {      avt=new AVT(handler,uri,name,rawName,value,owner);      if (avt.isSimple()) {        val=Double.valueOf(value);      }    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }catch (    NumberFormatException nfe) {      handleError(handler,XSLTErrorResources.INVALID_NUMBER,new Object[]{name,value},nfe);      return null;    }    return avt;  } else {    try {      return Double.valueOf(value);    } catch (    NumberFormatException nfe) {      handleError(handler,XSLTErrorResources.INVALID_NUMBER,new Object[]{name,value},nfe);      return null;    }  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeSchemaName=getStringOptionValue(IArgument.ATTRIBUTE_SCHEMA);  String url=getStringOptionValue(ARGUMENT_URL);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName,url};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MODIFY_ATTRIBUTE_SCHEMA_PROPERTIES_VIEW_BEAN_URL",params);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeSchemaName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,url,"attribute schema does not exist"};      attributeSchemaNoExist(attributeSchemaName,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_PROPERTIES_VIEW_BEAN_URL",args);    }    attrSchema.setPropertiesViewBeanUR(url);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_MODIFY_ATTRIBUTE_SCHEMA_PROPERTIES_VIEW_BEAN_URL",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-modify-properties-view-bean-url-key-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,url,e.getMessage()};    debugError("ModifyAttributeSchemaPropertiesViewBeanURL.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_PROPERTIES_VIEW_BEAN_URL",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,url,e.getMessage()};    debugError("ModifyAttributeSchemaPropertiesViewBeanURL.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_PROPERTIES_VIEW_BEAN_URL",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  protected DateTimeSyntax(Date value){  if (value == null) {    throw new NullPointerException("value is null");  }  this.value=value;}  }
class C{  protected void reconcileIDs() throws SAXException {  if (!validateID)   return;  for (Iterator itr=IDREFs.entrySet().iterator(); itr.hasNext(); ) {    Map.Entry e=(Map.Entry)itr.next();    if (IDs.contains(e.getKey()))     continue;    ValidatableObject source=(ValidatableObject)e.getValue();    reportEvent(source,new NotIdentifiableEventImpl(ValidationEvent.ERROR,Messages.format(Messages.ID_NOT_FOUND,e.getKey()),new ValidationEventLocatorImpl(source)));  }  IDREFs.clear();}  }
class C{  public void startRetransmitTimer(SIPServerTransaction sipServerTx,Response response){  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("startRetransmitTimer() " + response.getStatusCode() + " method "+ sipServerTx.getMethod());  }  if (sipServerTx.isInviteTransaction() && response.getStatusCode() / 100 == 2) {    this.startTimer(sipServerTx);  }}  }
class C{  private static int compareVersions(String v1,String majorV2,String minorV2,String patchV2,String supplementaryV2){  String[] v1Parts=v1.split("-",2);  String[] v1Identifiers=v1Parts[0].split("\\.");  String majorV1=v1Identifiers[0];  String minorV1=v1Identifiers.length > 1 ? v1Identifiers[1] : "0";  String patchV1=v1Identifiers.length > 2 ? v1Identifiers[2] : "0";  String supplementaryV1=v1Parts.length > 1 ? v1Parts[1] : "";  v1Identifiers=new String[]{majorV1,minorV1,patchV1};  String[] v2Identifiers={majorV2,minorV2,patchV2};  if (supplementaryV1.equals(supplementaryV2)) {    return compareVersions(v1Identifiers,v2Identifiers);  }  if (supplementaryV1.isEmpty()) {    return +1;  }  if (supplementaryV2.isEmpty()) {    return -1;  }  return supplementaryV1.compareTo(supplementaryV2);}  }
class C{  public boolean visitVariableRef(ExpressionOwner owner,Variable var){  return true;}  }
class C{  public Mp4TrackField(String trackValue) throws FieldDataInvalidException {  super(Mp4FieldKey.TRACK.getFieldName(),trackValue);  numbers=new ArrayList<Short>();  numbers.add(new Short("0"));  String values[]=trackValue.split("/");switch (values.length) {case 1:    try {      numbers.add(Short.parseShort(values[0]));    } catch (    NumberFormatException nfe) {      throw new FieldDataInvalidException("Value of:" + values[0] + " is invalid for field:"+ id);    }  numbers.add(new Short("0"));numbers.add(new Short("0"));break;case 2:try {numbers.add(Short.parseShort(values[0]));} catch (NumberFormatException nfe) {throw new FieldDataInvalidException("Value of:" + values[0] + " is invalid for field:"+ id);}try {numbers.add(Short.parseShort(values[1]));} catch (NumberFormatException nfe) {throw new FieldDataInvalidException("Value of:" + values[1] + " is invalid for field:"+ id);}numbers.add(new Short("0"));break;default :throw new FieldDataInvalidException("Value is invalid for field:" + id);}}  }
class C{  public synchronized Object send(String functionName,Object params[],String cookies) throws Exception {  return (send(encodeMessage(functionName,params),cookies));}  }
class C{  protected Media(int value){  super(value);}  }
class C{  public void closeAllSubpaths(){  for (  Subpath subpath : subpaths) {    subpath.setClosed(true);  }}  }
class C{  public void fireTableStructureChanged(){  fireTableChanged(new TableModelEvent(this,TableModelEvent.HEADER_ROW));}  }
class C{  public void resetBuffer(){  if (response != null) {    this.response.resetBuffer();  }}  }
class C{  public void last(Container parent){synchronized (parent.getTreeLock()) {    checkLayout(parent);    int ncomponents=parent.getComponentCount();    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      if (comp.isVisible()) {        comp.setVisible(false);        break;      }    }    if (ncomponents > 0) {      currentCard=ncomponents - 1;      parent.getComponent(currentCard).setVisible(true);      parent.validate();    }  }}  }
class C{  public void appendPath(String p_addToPath) throws MalformedURIException {  if (p_addToPath == null || p_addToPath.trim().length() == 0) {    return;  }  if (!isURIString(p_addToPath)) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_INVALID_CHAR,new Object[]{p_addToPath}));  }  if (m_path == null || m_path.trim().length() == 0) {    if (p_addToPath.startsWith("/")) {      m_path=p_addToPath;    } else {      m_path="/" + p_addToPath;    }  } else   if (m_path.endsWith("/")) {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath.substring(1));    } else {      m_path=m_path.concat(p_addToPath);    }  } else {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath);    } else {      m_path=m_path.concat("/" + p_addToPath);    }  }}  }
class C{  ElemTemplateElement popElemTemplateElement(){  return (ElemTemplateElement)m_elems.pop();}  }
class C{  public ContentLanguageParser(String contentLanguage){  super(contentLanguage);}  }
class C{  public EasyNetworkMod(final Context context){  this.context=context;}  }
class C{  static int difference(StringEncoder encoder,String s1,String s2) throws EncoderException {  return differenceEncoded(encoder.encode(s1),encoder.encode(s2));}  }
class C{  public void testValueOfLongPositive1(){  long longVal=268209772258930018L;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={3,-72,-33,93,-24,-56,45,98};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public static SearchFilter createPresenceFilter(AttributeType attributeType){  return new SearchFilter(FilterType.PRESENT,null,null,attributeType,null,null,null,null,null,null,false);}  }
class C{  private void publish(String msg,String stack){  StringBuilder buf=new StringBuilder();  buf.append(dateFormat.format(System.currentTimeMillis()));  buf.append(" ");  buf.append("trace ");  buf.append(msg);  buf.append(ServerConstants.EOL);  if (stack != null) {    buf.append("\nStack Trace:\n");    buf.append(stack);  }  err.print(buf);}  }
class C{  public void releaseConnection(SQLiteConnection connection){synchronized (mLock) {    AcquiredConnectionStatus status=mAcquiredConnections.remove(connection);    if (status == null) {      throw new IllegalStateException("Cannot perform this operation " + "because the specified connection was not acquired " + "from this pool or has already been released.");    }    if (!mIsOpen) {      closeConnectionAndLogExceptionsLocked(connection);    } else     if (connection.isPrimaryConnection()) {      if (recycleConnectionLocked(connection,status)) {        assert mAvailablePrimaryConnection == null;        mAvailablePrimaryConnection=connection;      }      wakeConnectionWaitersLocked();    } else     if (mAvailableNonPrimaryConnections.size() >= mMaxConnectionPoolSize - 1) {      closeConnectionAndLogExceptionsLocked(connection);    } else {      if (recycleConnectionLocked(connection,status)) {        mAvailableNonPrimaryConnections.add(connection);      }      wakeConnectionWaitersLocked();    }  }}  }
class C{  public void updateStats(RemoteViews views,WidgetSetting settings,AbstractTracker tracker,int pos,int colorId){}  }
class C{  public static Set findProtocolsForEntity(String entityId,String realm){  try {    Set retSet=new HashSet();    CircleOfTrustManager manager=new CircleOfTrustManager();    Set idffSet=manager.getAllEntities(realm,COTConstants.IDFF);    if (idffSet.contains(entityId)) {      retSet.add(COTConstants.IDFF);    }    Set saml2Set=manager.getAllEntities(realm,COTConstants.SAML2);    if ((saml2Set != null) && saml2Set.contains(entityId)) {      retSet.add(COTConstants.SAML2);    }    return retSet;  } catch (  COTException e) {    debug.error("COTUtils.findProtocolsForEntity",e);    return null;  }}  }
class C{  public static String formatDate(Date date,Locale locale){  return new SimpleDateFormat("dd MMMM yyyy",locale).format(date).replaceFirst("^0*","");}  }
class C{  public static CallSite altMetafactory(MethodHandles.Lookup caller,String invokedName,MethodType invokedType,Object... args){  throw new UnsupportedOperationException();}  }
class C{  public SAMLRequestVersionTooHighException(String s){  super(s);}  }
class C{  public WWWAuthenticateHeader createWWWAuthenticateHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("null scheme");  WWWAuthenticate www=new WWWAuthenticate();  www.setScheme(scheme);  return www;}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.RINGING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this),1000);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  private boolean closeInternal(ErrorCode errorCode){  assert (!Thread.holdsLock(this));synchronized (this) {    if (this.errorCode != null) {      return false;    }    if (source.finished && sink.finished) {      return false;    }    this.errorCode=errorCode;    notifyAll();  }  connection.removeStream(id);  return true;}  }
class C{  private Object invokeRemoteMethod(Object proxy,Method method,Object[] args) throws Exception {  try {    if (!(proxy instanceof Remote)) {      throw new IllegalArgumentException("proxy not Remote instance");    }    return ref.invoke((Remote)proxy,method,args,getMethodHash(method));  } catch (  Exception e) {    if (!(e instanceof RuntimeException)) {      Class<?> cl=proxy.getClass();      try {        method=cl.getMethod(method.getName(),method.getParameterTypes());      } catch (      NoSuchMethodException nsme) {        throw (IllegalArgumentException)new IllegalArgumentException().initCause(nsme);      }      Class<?> thrownType=e.getClass();      for (      Class<?> declaredType : method.getExceptionTypes()) {        if (declaredType.isAssignableFrom(thrownType)) {          throw e;        }      }      e=new UnexpectedException("unexpected exception",e);    }    throw e;  }}  }
class C{  public static boolean isNative(int mod){  return (mod & ACC_NATIVE) != 0;}  }
class C{  public static BigInteger[] convertListToArray(List<BigInteger> list){  BigInteger[] result=new BigInteger[list.size()];  for (int i=0; i < list.size(); i++) {    result[i]=list.get(i);  }  return result;}  }
class C{  public Object clone(){  PageFormat newPage;  try {    newPage=(PageFormat)super.clone();    newPage.mPaper=(Paper)mPaper.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();    newPage=null;  }  return newPage;}  }
class C{  public ConfigurationFramework initialize(final String installAndInstancePath) throws ConfigException {  return initialize(installAndInstancePath,installAndInstancePath);}  }
class C{  public static AccessTokenResolver newCtsAccessTokenResolver(final ConnectionFactory connectionFactory,final String ctsBaseDNTemplate){  return new CtsAccessTokenResolver(connectionFactory,ctsBaseDNTemplate);}  }
class C{  @Override public String toString(){  return "CrestQuery{" + "queryId='" + queryId + '\''+ ", queryFilter="+ queryFilter+ ", fields="+ fields+ '}';}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  static String swapRealmTag(String realm,String value){  return value.replace(REALM_NAME_TAG,realm);}  }
class C{  public String toString(){  long ncompleted;  int nworkers, nactive;  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    ncompleted=completedTaskCount;    nactive=0;    nworkers=workers.size();    for (    Worker w : workers) {      ncompleted+=w.completedTasks;      if (w.isLocked())       ++nactive;    }  }  finally {    mainLock.unlock();  }  int c=ctl.get();  String rs=(runStateLessThan(c,SHUTDOWN) ? "Running" : (runStateAtLeast(c,TERMINATED) ? "Terminated" : "Shutting down"));  return super.toString() + "[" + rs+ ", pool size = "+ nworkers+ ", active threads = "+ nactive+ ", queued tasks = "+ workQueue.size()+ ", completed tasks = "+ ncompleted+ "]";}  }
class C{  private String quote(String p_string){  return string_quote + p_string + string_quote;}  }
class C{  public void test_getStatus(){  int[] pos={0,1,1000,Integer.MAX_VALUE,(Integer.MAX_VALUE - 1)};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  SSLEngineResult.HandshakeStatus[] enHS=SSLEngineResult.HandshakeStatus.values();  for (int i=0; i < enS.length; i++) {    for (int j=0; j < enHS.length; j++) {      for (int n=0; n < pos.length; n++) {        for (int l=0; l < pos.length; ++l) {          SSLEngineResult res=new SSLEngineResult(enS[i],enHS[j],pos[n],pos[l]);          assertEquals("Incorrect Status",enS[i],res.getStatus());        }      }    }  }}  }
class C{  public AbstractInsnNode[] toArray(){  int i=0;  AbstractInsnNode elem=first;  AbstractInsnNode[] insns=new AbstractInsnNode[size];  while (elem != null) {    insns[i]=elem;    elem.index=i++;    elem=elem.next;  }  return insns;}  }
class C{  public static short parseShort(String lexicalXSDShort){  if (theConverter == null)   initConverter();  return theConverter.parseShort(lexicalXSDShort);}  }
class C{  public Request createRequest(javax.sip.address.URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,byte[] content) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("missing parameters");  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  sipRequest.setContent(content,contentType);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  public static String encode(ByteSequence rawData){  ifNull(rawData);  StringBuilder buffer=new StringBuilder(4 * rawData.length() / 3);  int pos=0;  int iterations=rawData.length() / 3;  for (int i=0; i < iterations; i++) {    int value=((rawData.byteAt(pos++) & 0xFF) << 16) | ((rawData.byteAt(pos++) & 0xFF) << 8) | (rawData.byteAt(pos++) & 0xFF);    buffer.append(BASE64_ALPHABET[(value >>> 18) & 0x3F]);    buffer.append(BASE64_ALPHABET[(value >>> 12) & 0x3F]);    buffer.append(BASE64_ALPHABET[(value >>> 6) & 0x3F]);    buffer.append(BASE64_ALPHABET[value & 0x3F]);  }switch (rawData.length() % 3) {case 1:    buffer.append(BASE64_ALPHABET[(rawData.byteAt(pos) >>> 2) & 0x3F]);  buffer.append(BASE64_ALPHABET[(rawData.byteAt(pos) << 4) & 0x3F]);buffer.append("==");break;case 2:int value=((rawData.byteAt(pos++) & 0xFF) << 8) | (rawData.byteAt(pos) & 0xFF);buffer.append(BASE64_ALPHABET[(value >>> 10) & 0x3F]);buffer.append(BASE64_ALPHABET[(value >>> 4) & 0x3F]);buffer.append(BASE64_ALPHABET[(value << 2) & 0x3F]);buffer.append("=");break;}return buffer.toString();}  }
class C{  int process(Callback[] callbacks,int state) throws AuthLoginException {switch (state) {case ISAuthConstants.LOGIN_START:{      if (devicePrintProfile == null || devicePrintProfile.isEmpty()) {        return ISAuthConstants.LOGIN_SUCCEED;      } else       if (autoStoreProfiles) {        profilePersister.saveDevicePrint(devicePrintProfile);        return ISAuthConstants.LOGIN_SUCCEED;      } else {        return SAVE_PROFILE_STATE;      }    }case SAVE_PROFILE_STATE:{    ChoiceCallback choiceCallback=(ChoiceCallback)callbacks[0];    if (choiceCallback.getSelectedIndexes()[0] == STORE_PROFILE_CHOICE) {      return NAME_PROFILE_STATE;    }    return ISAuthConstants.LOGIN_SUCCEED;  }case NAME_PROFILE_STATE:{  NameCallback nameCallback=(NameCallback)callbacks[0];  String name=nameCallback.getName();  profilePersister.saveDevicePrint(name,devicePrintProfile);  return ISAuthConstants.LOGIN_SUCCEED;}default :{throw new AuthLoginException(BUNDLE_NAME,"invalidauthstate",null);}}}  }
class C{  @Override public Expected<T> ifAbsent(final Runnable runnable){  if (isAbsent()) {    runnable.run();  }  return this;}  }
class C{  private static boolean evaluateOptionsRules(List reqOptions,List regOptions){  if (reqOptions == null || regOptions == null || (reqOptions.size() == 0)) {    return true;  }  Iterator i=reqOptions.iterator();  while (i.hasNext()) {    String option=(String)i.next();    if (regOptions.contains(option)) {      return true;    }  }  return false;}  }
class C{  public boolean contains(UpdateMsg msg){synchronized (lock) {    return map.containsKey(msg.getCSN());  }}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("line iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=line.getX1();    coords[1]=line.getY1();    type=SEG_MOVETO;  } else {    coords[0]=line.getX2();    coords[1]=line.getY2();    type=SEG_LINETO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,1);  }  return type;}  }
class C{  protected void completeEditing(boolean messageStop,boolean messageCancel,boolean messageTree){  if (stopEditingInCompleteEditing && editingComponent != null) {    Component oldComponent=editingComponent;    TreePath oldPath=editingPath;    TreeCellEditor oldEditor=cellEditor;    Object newValue=oldEditor.getCellEditorValue();    Rectangle editingBounds=getPathBounds(tree,editingPath);    boolean requestFocus=(tree != null && (tree.hasFocus() || SwingUtilities.findFocusOwner(editingComponent) != null));    editingComponent=null;    editingPath=null;    if (messageStop)     oldEditor.stopCellEditing(); else     if (messageCancel)     oldEditor.cancelCellEditing();    tree.remove(oldComponent);    if (editorHasDifferentSize) {      treeState.invalidatePathBounds(oldPath);      updateSize();    } else     if (editingBounds != null) {      editingBounds.x=0;      editingBounds.width=tree.getSize().width;      tree.repaint(editingBounds);    }    if (requestFocus)     tree.requestFocus();    if (messageTree)     treeModel.valueForPathChanged(oldPath,newValue);  }}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj != null && obj instanceof IndexedPropertyDescriptor) {    IndexedPropertyDescriptor other=(IndexedPropertyDescriptor)obj;    Method otherIndexedReadMethod=other.getIndexedReadMethod();    Method otherIndexedWriteMethod=other.getIndexedWriteMethod();    if (!compareMethods(getIndexedReadMethod(),otherIndexedReadMethod)) {      return false;    }    if (!compareMethods(getIndexedWriteMethod(),otherIndexedWriteMethod)) {      return false;    }    if (getIndexedPropertyType() != other.getIndexedPropertyType()) {      return false;    }    return super.equals(obj);  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataappenddata.class,args);}  }
class C{  public void send() throws MessagingException {  send(DirectoryServer.getMailServerPropertySets());}  }
class C{  public Texture2dProgram(ProgramType programType){  mProgramType=programType;switch (programType) {case TEXTURE_2D:    mTextureTarget=GLES20.GL_TEXTURE_2D;  mProgramHandle=GlUtil.createProgram(VERTEX_SHADER,FRAGMENT_SHADER_2D);break;case TEXTURE_EXT:mTextureTarget=GLES11Ext.GL_TEXTURE_EXTERNAL_OES;mProgramHandle=GlUtil.createProgram(VERTEX_SHADER,FRAGMENT_SHADER_EXT);break;case TEXTURE_EXT_BW:mTextureTarget=GLES11Ext.GL_TEXTURE_EXTERNAL_OES;mProgramHandle=GlUtil.createProgram(VERTEX_SHADER,FRAGMENT_SHADER_EXT_BW);break;case TEXTURE_EXT_FILT:mTextureTarget=GLES11Ext.GL_TEXTURE_EXTERNAL_OES;mProgramHandle=GlUtil.createProgram(VERTEX_SHADER,FRAGMENT_SHADER_EXT_FILT);break;default :throw new RuntimeException("Unhandled type " + programType);}if (mProgramHandle == 0) {throw new RuntimeException("Unable to create program");}Log.d(TAG,"Created program " + mProgramHandle + " ("+ programType+ ")");maPositionLoc=GLES20.glGetAttribLocation(mProgramHandle,"aPosition");GlUtil.checkLocation(maPositionLoc,"aPosition");maTextureCoordLoc=GLES20.glGetAttribLocation(mProgramHandle,"aTextureCoord");GlUtil.checkLocation(maTextureCoordLoc,"aTextureCoord");muMVPMatrixLoc=GLES20.glGetUniformLocation(mProgramHandle,"uMVPMatrix");GlUtil.checkLocation(muMVPMatrixLoc,"uMVPMatrix");muTexMatrixLoc=GLES20.glGetUniformLocation(mProgramHandle,"uTexMatrix");GlUtil.checkLocation(muTexMatrixLoc,"uTexMatrix");muKernelLoc=GLES20.glGetUniformLocation(mProgramHandle,"uKernel");if (muKernelLoc < 0) {muKernelLoc=-1;muTexOffsetLoc=-1;muColorAdjustLoc=-1;} else {muTexOffsetLoc=GLES20.glGetUniformLocation(mProgramHandle,"uTexOffset");GlUtil.checkLocation(muTexOffsetLoc,"uTexOffset");muColorAdjustLoc=GLES20.glGetUniformLocation(mProgramHandle,"uColorAdjust");GlUtil.checkLocation(muColorAdjustLoc,"uColorAdjust");setKernel(new float[]{0f,0f,0f,0f,1f,0f,0f,0f,0f},0f);setTexSize(256,256);}}  }
class C{  public byte[] writeByteArray(){  logger.finer("Writing MultipleTextEncodedStringNullTerminated");  int localSize=0;  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  try {    for (ListIterator<String> li=((Values)value).getList().listIterator(); li.hasNext(); ) {      TextEncodedStringNullTerminated next=new TextEncodedStringNullTerminated(identifier,frameBody,li.next());      buffer.write(next.writeByteArray());      localSize+=next.getSize();    }  } catch (  IOException ioe) {    logger.log(Level.SEVERE,"IOException in MultipleTextEncodedStringNullTerminated when writing byte array",ioe);    throw new RuntimeException(ioe);  }  size=localSize;  logger.finer("Written MultipleTextEncodedStringNullTerminated");  return buffer.toByteArray();}  }
class C{  private void shareRecordedLogFiles(){  if (mListView.getCheckedItemCount() == 0) {    Toast.makeText(getApplicationContext(),"First select log entry!",Toast.LENGTH_LONG).show();    return;  }  Intent emailIntent=new Intent(android.content.Intent.ACTION_SEND_MULTIPLE);  emailIntent.setData(Uri.parse("mailto:"));  emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,"[" + getAppName() + "] Logcat Logs");  emailIntent.setType("text/plain");  emailIntent.putExtra(android.content.Intent.EXTRA_TEXT,"Please find attached logcat logs file.");  SparseBooleanArray checkedItemPositions=mRecordsListView.getCheckedItemPositions();  int cnt=checkedItemPositions.size();  LogRecordsListAdapter logRecordsListAdapter=(LogRecordsListAdapter)mRecordsListView.getAdapter();  ArrayList<Uri> uris=new ArrayList<Uri>();  for (int index=0; index < cnt; index++) {    if (checkedItemPositions.valueAt(index)) {      File file=(File)logRecordsListAdapter.getItem(checkedItemPositions.keyAt(index));      uris.add(Uri.fromFile(file));    }  }  emailIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);  emailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  hide(StandOutWindow.DEFAULT_ID);  startActivity(emailIntent);}  }
class C{  private void initAll(AttributedCharacterIterator text){  fStart=text.getBeginIndex();  fChars=new char[text.getEndIndex() - fStart];  int n=0;  for (char c=text.first(); c != CharacterIterator.DONE; c=text.next()) {    fChars[n++]=c;  }  text.first();  fBidi=new Bidi(text);  if (fBidi.isLeftToRight()) {    fBidi=null;  }  text.first();  Map<? extends Attribute,?> paragraphAttrs=text.getAttributes();  NumericShaper shaper=AttributeValues.getNumericShaping(paragraphAttrs);  if (shaper != null) {    shaper.shape(fChars,0,fChars.length);  }  fParagraph=new StyledParagraph(text,fChars);{    fJustifyRatio=AttributeValues.getJustification(paragraphAttrs);    boolean haveFont=TextLine.advanceToFirstFont(text);    if (haveFont) {      Font defaultFont=TextLine.getFontAtCurrentPos(text);      int charsStart=text.getIndex() - text.getBeginIndex();      LineMetrics lm=defaultFont.getLineMetrics(fChars,charsStart,charsStart + 1,fFrc);      fBaseline=(byte)lm.getBaselineIndex();      fBaselineOffsets=lm.getBaselineOffsets();    } else {      GraphicAttribute graphic=(GraphicAttribute)paragraphAttrs.get(TextAttribute.CHAR_REPLACEMENT);      fBaseline=TextLayout.getBaselineFromGraphic(graphic);      Hashtable<Attribute,?> fmap=new Hashtable<>(5,(float)0.9);      Font dummyFont=new Font(fmap);      LineMetrics lm=dummyFont.getLineMetrics(" ",0,1,fFrc);      fBaselineOffsets=lm.getBaselineOffsets();    }    fBaselineOffsets=TextLine.getNormalizedOffsets(fBaselineOffsets,fBaseline);  }  invalidateComponents();}  }
class C{  public void removeSipProvider(){  this.sipProvider=null;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_arg1)   m_arg1.fixupVariables(vars,globalsSize);}  }
class C{  protected void fireEndDoc() throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDDOCUMENT);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"URL_COLLECT\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"URL\" TEXT NOT NULL ,"+ "\"COMMENT\" TEXT,"+ "\"DATE\" INTEGER,"+ "\"G_TYPE\" TEXT,"+ "\"G_AUTHOR\" TEXT);");}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public XPathFunctionException(Throwable cause){  super(cause);}  }
class C{  private ImageCache(ImageCacheParams cacheParams){  init(cacheParams);}  }
class C{  public boolean isRootVisible(){  return rootVisible;}  }
class C{  private Object writeReplace(){  return new SerializationProxy(this);}  }
class C{  @NonNull public final Agera observeOn(@NonNull Looper looper,boolean coalesce){  return new AgeraObserveOnLooper(this,looper,coalesce);}  }
class C{  boolean shouldUpdateSelectedStateFromAction(){  return true;}  }
class C{  public boolean isRecursiveAttrSet(ElemAttributeSet attrSet){  if (null == m_attrSetStack) {    m_attrSetStack=new Stack();  }  if (!m_attrSetStack.empty()) {    int loc=m_attrSetStack.search(attrSet);    if (loc > -1) {      return true;    }  }  return false;}  }
class C{  public final long determinant(PlaPointInt p_other){  return (long)v_x * p_other.v_y - (long)v_y * p_other.v_x;}  }
class C{  public static boolean isMyAppLauncherDefault(Context context){  final IntentFilter filter=new IntentFilter(Intent.ACTION_MAIN);  filter.addCategory(Intent.CATEGORY_HOME);  List<IntentFilter> filters=new ArrayList<IntentFilter>();  filters.add(filter);  final String myPackageName=context.getPackageName();  List<ComponentName> activities=new ArrayList<ComponentName>();  final PackageManager packageManager=context.getPackageManager();  packageManager.getPreferredActivities(filters,activities,null);  for (  ComponentName activity : activities) {    if (myPackageName.equals(activity.getPackageName())) {      return true;    }  }  return false;}  }
class C{  public boolean equals(XObject obj2){  int t=obj2.getType();  try {    if (t == XObject.CLASS_NODESET)     return obj2.equals(this); else     if (t == XObject.CLASS_BOOLEAN)     return obj2.bool() == bool(); else     return m_val == obj2.num();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  protected void connected(Connection connection){  policy.setSelectedProxy(connection.getRoute().getProxy());  connected=true;}  }
class C{  public static void afterCall(URL url,Request request,boolean success,long procTimeMills){  String uri=url.getUri();  onAfterCall(getServiceStat(uri),success,procTimeMills);  onAfterCall(getMethodStat(uri,request.getMethodName(),request.getParamtersDesc()),success,procTimeMills);}  }
class C{  public static Clause not(Clause clause){  return new NotClause(clause);}  }
class C{  public SingleClientConnManager(HttpParams params,SchemeRegistry schreg){  if (schreg == null) {    throw new IllegalArgumentException("Scheme registry must not be null.");  }  this.schemeRegistry=schreg;  this.connOperator=createConnectionOperator(schreg);  this.uniquePoolEntry=new PoolEntry();  this.managedConn=null;  this.lastReleaseTime=-1L;  this.alwaysShutDown=false;  this.isShutDown=false;}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.InitiatorSignatureTokenElement createInitiatorSignatureTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.InitiatorSignatureTokenElementImpl();}  }
class C{  protected void paintChildren(Graphics g){  Graphics sg=g;synchronized (getTreeLock()) {    int i=getComponentCount() - 1;    if (i < 0) {      return;    }    if (paintingChild != null && (paintingChild instanceof JComponent) && paintingChild.isOpaque()) {      for (; i >= 0; i--) {        if (getComponent(i) == paintingChild) {          break;        }      }    }    Rectangle tmpRect=fetchRectangle();    boolean checkSiblings=(!isOptimizedDrawingEnabled() && checkIfChildObscuredBySibling());    Rectangle clipBounds=null;    if (checkSiblings) {      clipBounds=sg.getClipBounds();      if (clipBounds == null) {        clipBounds=new Rectangle(0,0,getWidth(),getHeight());      }    }    boolean printing=getFlag(IS_PRINTING);    final Window window=SwingUtilities.getWindowAncestor(this);    final boolean isWindowOpaque=window == null || window.isOpaque();    for (; i >= 0; i--) {      Component comp=getComponent(i);      if (comp == null) {        continue;      }      final boolean isJComponent=comp instanceof JComponent;      if ((!isWindowOpaque || isJComponent || isLightweightComponent(comp)) && comp.isVisible()) {        Rectangle cr;        cr=comp.getBounds(tmpRect);        boolean hitClip=g.hitClip(cr.x,cr.y,cr.width,cr.height);        if (hitClip) {          if (checkSiblings && i > 0) {            int x=cr.x;            int y=cr.y;            int width=cr.width;            int height=cr.height;            SwingUtilities.computeIntersection(clipBounds.x,clipBounds.y,clipBounds.width,clipBounds.height,cr);            if (getObscuredState(i,cr.x,cr.y,cr.width,cr.height) == COMPLETELY_OBSCURED) {              continue;            }            cr.x=x;            cr.y=y;            cr.width=width;            cr.height=height;          }          Graphics cg=sg.create(cr.x,cr.y,cr.width,cr.height);          cg.setColor(comp.getForeground());          cg.setFont(comp.getFont());          boolean shouldSetFlagBack=false;          try {            if (isJComponent) {              if (getFlag(ANCESTOR_USING_BUFFER)) {                ((JComponent)comp).setFlag(ANCESTOR_USING_BUFFER,true);                shouldSetFlagBack=true;              }              if (getFlag(IS_PAINTING_TILE)) {                ((JComponent)comp).setFlag(IS_PAINTING_TILE,true);                shouldSetFlagBack=true;              }              if (!printing) {                comp.paint(cg);              } else {                if (!getFlag(IS_PRINTING_ALL)) {                  comp.print(cg);                } else {                  comp.printAll(cg);                }              }            } else {              if (!printing) {                comp.paint(cg);              } else {                if (!getFlag(IS_PRINTING_ALL)) {                  comp.print(cg);                } else {                  comp.printAll(cg);                }              }            }          }  finally {            cg.dispose();            if (shouldSetFlagBack) {              ((JComponent)comp).setFlag(ANCESTOR_USING_BUFFER,false);              ((JComponent)comp).setFlag(IS_PAINTING_TILE,false);            }          }        }      }    }    recycleRectangle(tmpRect);  }}  }
class C{  public static boolean normalize(MessageBytes uriMB){  ByteChunk uriBC=uriMB.getByteChunk();  final byte[] b=uriBC.getBytes();  final int start=uriBC.getStart();  int end=uriBC.getEnd();  if (start == end) {    return false;  }  if ((end - start == 1) && b[start] == (byte)'*') {    return true;  }  int pos=0;  int index=0;  for (pos=start; pos < end; pos++) {    if (b[pos] == (byte)'\\') {      if (ALLOW_BACKSLASH) {        b[pos]=(byte)'/';      } else {        return false;      }    }    if (b[pos] == (byte)0) {      return false;    }  }  if (b[start] != (byte)'/') {    return false;  }  for (pos=start; pos < (end - 1); pos++) {    if (b[pos] == (byte)'/') {      while ((pos + 1 < end) && (b[pos + 1] == (byte)'/')) {        copyBytes(b,pos,pos + 1,end - pos - 1);        end--;      }    }  }  if (((end - start) >= 2) && (b[end - 1] == (byte)'.')) {    if ((b[end - 2] == (byte)'/') || ((b[end - 2] == (byte)'.') && (b[end - 3] == (byte)'/'))) {      b[end]=(byte)'/';      end++;    }  }  uriBC.setEnd(end);  index=0;  while (true) {    index=uriBC.indexOf("/./",0,3,index);    if (index < 0) {      break;    }    copyBytes(b,start + index,start + index + 2,end - start - index- 2);    end=end - 2;    uriBC.setEnd(end);  }  index=0;  while (true) {    index=uriBC.indexOf("/../",0,4,index);    if (index < 0) {      break;    }    if (index == 0) {      return false;    }    int index2=-1;    for (pos=start + index - 1; (pos >= 0) && (index2 < 0); pos--) {      if (b[pos] == (byte)'/') {        index2=pos;      }    }    copyBytes(b,start + index2,start + index + 3,end - start - index- 3);    end=end + index2 - index - 3;    uriBC.setEnd(end);    index=index2;  }  return true;}  }
class C{  public boolean hasName(final String name){  for (  final String n : names) {    if (n.equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public AmazonSNSClient produce(PushNotificationServiceConfig config){  AmazonSNSClient service=new AmazonSNSClient(new BasicAWSCredentials(config.getAccessKey(),config.getSecret()));  service.setRegion(Region.getRegion(Regions.fromName(config.getRegion())));  return service;}  }
class C{  public <T>LocalizableMessage print(PropertyDefinition<T> pd){  DefaultVisitor<T> v=new DefaultVisitor<>();  return pd.getDefaultBehaviorProvider().accept(v,pd);}  }
class C{  @Override public synchronized void reload(){  if (!getState().isAvailable())   throw new IllegalStateException(sm.getString("standardContext.notStarted",getName()));  if (log.isInfoEnabled())   log.info(sm.getString("standardContext.reloadingStarted",getName()));  setPaused(true);  try {    stop();  } catch (  LifecycleException e) {    log.error(sm.getString("standardContext.stoppingContext",getName()),e);  }  try {    start();  } catch (  LifecycleException e) {    log.error(sm.getString("standardContext.startingContext",getName()),e);  }  setPaused(false);  if (log.isInfoEnabled())   log.info(sm.getString("standardContext.reloadingCompleted",getName()));}  }
class C{  public void removeAdjustmentListener(AdjustmentListener l){  listenerList.remove(AdjustmentListener.class,l);}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  @DataProvider private static Object[][] errorResponsesFromAccessingTheResource(){  return new Object[][]{{new Response(TEAPOT)},{new Response(BAD_GATEWAY)},{new Response(FORBIDDEN)},{new Response(INTERNAL_SERVER_ERROR)},{buildOAuth2ErrorResponse(UNAUTHORIZED,E_INVALID_CLIENT,"Invalid client")}};}  }
class C{  protected ContentModel defContentModel(int type,Object obj,ContentModel next){  return new ContentModel(type,obj,next);}  }
class C{  public GSERParser readEndSequence() throws GSERException {  skip(GSER_SP);  next(GSER_SEQUENCE_END);  return this;}  }
class C{  public FrameBodyTSOC(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  protected static Long convertTimepointToBucketingLong(Date timepointToBeConverted){  if (timepointToBeConverted == null) {    return null;  }  Long toReturn=timepointToBeConverted.getTime() - PrimaryIndexBucketGeneratorImpl.TIMEPOINT_MIN;  if (toReturn < 0l) {    return 0l;  } else   if (toReturn > PrimaryIndexBucketGeneratorImpl.TIMEPOINT_MAX) {    return PrimaryIndexBucketGeneratorImpl.TIMEPOINT_MAX;  } else {    return toReturn;  }}  }
class C{  public static void resetPeakThreadCount(){  threadMXBean.resetPeakThreadCount();}  }
class C{  public static NodeList selectNodeList(Node contextNode,String str) throws TransformerException {  return selectNodeList(contextNode,str,contextNode);}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg,Object param1){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  Object params[]={param1};  lr.setParameters(params);  doLog(lr);}  }
class C{  public static boolean isMiddleMouseButton(MouseEvent anEvent){  return ((anEvent.getModifiersEx() & InputEvent.BUTTON2_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON2);}  }
class C{  public static boolean isXML11ValidNmtoken(String nmtoken){  int length=nmtoken.length();  if (length == 0)   return false;  for (int i=0; i < length; ++i) {    char ch=nmtoken.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=nmtoken.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }  }  return true;}  }
class C{  private Callback createQRCodeCallback(OathDeviceSettings settings,AMIdentity id,int callbackIndex) throws AuthLoginException {  try {    final String authenticatorAppRegistrationUri=getAuthenticatorAppRegistrationUri(settings,id);    final String callback="callback_" + callbackIndex;    return new ScriptTextOutputCallback(GenerationUtils.getQRCodeGenerationJavascriptForAuthenticatorAppRegistration(callback,authenticatorAppRegistrationUri));  } catch (  IOException e) {    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }}  }
class C{  public FrameBodyWPUB(String urlLink){  super(urlLink);}  }
class C{  public javax.sdp.URI createURI(URL value) throws SdpException {  URIField uriImpl=new URIField();  uriImpl.set(value);  return uriImpl;}  }
class C{  public void read(Reader in,Document doc,int pos) throws IOException, BadLocationException {  char[] buff=new char[4096];  int nch;  boolean lastWasCR=false;  boolean isCRLF=false;  boolean isCR=false;  int last;  boolean wasEmpty=(doc.getLength() == 0);  AttributeSet attr=getInputAttributes();  while ((nch=in.read(buff,0,buff.length)) != -1) {    last=0;    for (int counter=0; counter < nch; counter++) {switch (buff[counter]) {case '\r':        if (lastWasCR) {          isCR=true;          if (counter == 0) {            doc.insertString(pos,"\n",attr);            pos++;          } else {            buff[counter - 1]='\n';          }        } else {          lastWasCR=true;        }      break;case '\n':    if (lastWasCR) {      if (counter > (last + 1)) {        doc.insertString(pos,new String(buff,last,counter - last - 1),attr);        pos+=(counter - last - 1);      }      lastWasCR=false;      last=counter;      isCRLF=true;    }  break;default :if (lastWasCR) {  isCR=true;  if (counter == 0) {    doc.insertString(pos,"\n",attr);    pos++;  } else {    buff[counter - 1]='\n';  }  lastWasCR=false;}break;}}if (last < nch) {if (lastWasCR) {if (last < (nch - 1)) {doc.insertString(pos,new String(buff,last,nch - last - 1),attr);pos+=(nch - last - 1);}} else {doc.insertString(pos,new String(buff,last,nch - last),attr);pos+=(nch - last);}}}if (lastWasCR) {doc.insertString(pos,"\n",attr);isCR=true;}if (wasEmpty) {if (isCRLF) {doc.putProperty(EndOfLineStringProperty,"\r\n");} else if (isCR) {doc.putProperty(EndOfLineStringProperty,"\r");} else {doc.putProperty(EndOfLineStringProperty,"\n");}}}  }
class C{  @Override public synchronized void close() throws SQLException {  if (isClosedInternal()) {    return;  }  boolean isUnderlyingConectionClosed;  try {    isUnderlyingConectionClosed=getDelegateInternal().isClosed();  } catch (  final SQLException e) {    try {      _pool.invalidateObject(this);    } catch (    final IllegalStateException ise) {      passivate();      getInnermostDelegate().close();    }catch (    final Exception ie) {    }    throw new SQLException("Cannot close connection (isClosed check failed)",e);  }  if (isUnderlyingConectionClosed) {    try {      _pool.invalidateObject(this);    } catch (    final IllegalStateException e) {      passivate();      getInnermostDelegate().close();    }catch (    final Exception e) {      throw new SQLException("Cannot close connection (invalidating pooled object failed)",e);    }  } else {    try {      _pool.returnObject(this);    } catch (    final IllegalStateException e) {      passivate();      getInnermostDelegate().close();    }catch (    final SQLException e) {      throw e;    }catch (    final RuntimeException e) {      throw e;    }catch (    final Exception e) {      throw new SQLException("Cannot close connection (return to pool failed)",e);    }  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(SAMLConstants.DEFAULT_ENCODING).append("\" ?>\n");  }  String prefixAC="";  String prefixLIB="";  String uriAC="";  String uriLIB="";  if (includeNS) {    prefixLIB=IFSConstants.LIB_PREFIX;    prefixAC=IFSConstants.AC_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uriLIB=IFSConstants.LIB_12_NAMESPACE_STRING;      uriAC=IFSConstants.AC_12_NAMESPACE_STRING;    } else {      uriLIB=IFSConstants.LIB_NAMESPACE_STRING;      uriAC=IFSConstants.AC_NAMESPACE_STRING;    }  }  xml.append("<").append(prefixLIB);  if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    xml.append("RequestAuthnContext");  } else {    xml.append("AuthnContext");  }  xml.append(uriLIB).append(">\n");  if ((authnContextClassRefList != null) && (authnContextClassRefList != Collections.EMPTY_LIST)) {    if ((authnContextStatementRefList != null) && (authnContextClassRefList != Collections.EMPTY_LIST)) {      throw new FSMsgException("ExclusiveEntries",null);    }    Iterator j=authnContextClassRefList.iterator();    while (j.hasNext()) {      xml.append("<").append(prefixLIB).append("AuthnContextClassRef").append(">");      xml.append((String)j.next());      xml.append("</").append(prefixLIB).append("AuthnContextClassRef").append(">\n");    }  }  if ((authnContextStatementRefList != null) && (authnContextStatementRefList != Collections.EMPTY_LIST)) {    Iterator j=authnContextStatementRefList.iterator();    while (j.hasNext()) {      xml.append("<").append(prefixLIB).append("AuthnContextStatementRef").append(">");      xml.append((String)j.next());      xml.append("</").append(prefixLIB).append("AuthnContextStatementRef").append(">\n");    }  }  if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    xml.append("<").append(prefixLIB).append("AuthnContextComparison").append(">").append(authnContextComparison).append("</").append(prefixLIB).append("AuthnContextComparison").append(">\n");  }  xml.append("</").append(prefixLIB);  if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    xml.append("RequestAuthnContext").append(">\n");  } else {    xml.append("AuthnContext").append(">\n");  }  return xml.toString();}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public void test_insertElementAtLjava_lang_ObjectI(){  Vector v=vectorClone(tVector);  String prevElement=(String)v.elementAt(99);  v.insertElementAt("Inserted Element",99);  assertEquals("Element not inserted","Inserted Element",((String)v.elementAt(99)));  assertTrue("Elements shifted incorrectly",((String)v.elementAt(100)).equals(prevElement));  v.insertElementAt(null,20);  assertNull("null not inserted",v.elementAt(20));  try {    tVector.insertElementAt(null,-5);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.insertElementAt(null,tVector.size() + 1);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.OneTimeUseElement createOneTimeUseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.OneTimeUseElementImpl();}  }
class C{  public boolean visitStringLiteral(ExpressionOwner owner,XString str){  return true;}  }
class C{  public boolean isUnumberedLink(){  return networkNumber == UN_NUMBERED;}  }
class C{  public RedundentExprEliminator(){  m_isSameContext=true;  m_absPaths=new Vector();  m_paths=null;}  }
class C{  @Override public String open(String path,OutputStream os) throws MalformedURLException, IOException, AuthenticationException {  ensureValidToken();  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),MessageFormat.format("/webhdfs/v1/{0}?op=OPEN",URLUtil.encodePath(path))),token);  conn.setRequestMethod("GET");  conn.setRequestProperty("Content-Type","application/octet-stream");  conn.connect();  InputStream is=conn.getInputStream();  copy(is,os);  is.close();  os.close();  String resp=result(conn,false);  conn.disconnect();  return resp;}  }
class C{  public static void forceMkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      String message="File " + directory + " exists and is "+ "not a directory. Unable to create directory.";      throw new IOException(message);    }  } else {    if (!directory.mkdirs()) {      if (!directory.isDirectory()) {        String message="Unable to create directory " + directory;        throw new IOException(message);      }    }  }}  }
class C{  private static int typeMapping(int smsType){switch (smsType) {case ServiceListener.ADDED:    return ConfigurationActionEvent.ADDED;case ServiceListener.REMOVED:  return ConfigurationActionEvent.DELETED;case ServiceListener.MODIFIED:return ConfigurationActionEvent.MODIFIED;}return smsType;}  }
class C{  public void install(JTextComponent c){  component=c;  removeAllHighlights();}  }
class C{  private TemplateEntry templateEntry(DN dn){  TemplateEntry templateEntry=mock(TemplateEntry.class);  when(templateEntry.getDN()).thenReturn(dn);  return templateEntry;}  }
class C{  private void parse_twoVarOperation() throws SyntaxException {  Element opNode=(Element)current;  String op=opNode.getContent();  LineCol lineCol=current.getLineCol();  parsedExpsNotEmpty(opNode);  Expression e1=parsedExps.pop();  if (!last1VarUnaryOps.empty()) {    parsedExps.push(e1);    return;  }  if (!last2VarOps.empty() && twoVar_higherOrEqual(last2VarOps.peek(),op)) {    parsedExps.push(e1);    last2VarOps.pop();    return;  }  last2VarOps.push(op);  Expression e2=next_exp(false);  TwoVariableOperation tvo=new TwoVariableOperation(op,e1,e2,lineCol);  parsedExps.push(tvo);  parse_expression();}  }
class C{  public BrdTracep next_substitute_trace_piece(){  ShoveTraceEntryPoint[] entries=pop_piece();  if (entries == null)   return null;  BrdTracep curr_trace=entries[0].trace;  ShapeTile offset_shape;  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  if (search_tree.is_clearance_compensation_used()) {    double curr_offset=curr_trace.get_compensated_half_width(search_tree) + c_offset_add;    offset_shape=shape.offset(curr_offset);  } else {    offset_shape=shape.offset(curr_trace.get_half_width());    double cl_offset=r_board.get_clearance(curr_trace.clearance_idx(),cl_class,layer) + c_offset_add;    offset_shape=offset_shape.offset(cl_offset);  }  int edge_count=shape.border_line_count();  int edge_diff=entries[1].edge_no - entries[0].edge_no;  PlaLineInt[] piece_lines=new PlaLineInt[edge_diff + 3];  piece_lines[0]=entries[0].trace.polyline().plaline(entries[0].trace_line_no);  piece_lines[piece_lines.length - 1]=entries[1].trace.polyline().plaline(entries[1].trace_line_no);  int curr_edge_no=entries[0].edge_no % edge_count;  for (int index=1; index < piece_lines.length - 1; ++index) {    piece_lines[index]=offset_shape.border_line(curr_edge_no);    if (curr_edge_no == edge_count - 1) {      curr_edge_no=0;    } else {      ++curr_edge_no;    }  }  try {    Polyline piece_polyline=new Polyline(piece_lines);    return new BrdTracep(piece_polyline,layer,curr_trace.get_half_width(),curr_trace.net_nos,curr_trace.clearance_idx(),0,ItemFixState.UNFIXED,r_board);  } catch (  Exception exc) {    System.err.println("Check this out");    return next_substitute_trace_piece();  }}  }
class C{  void uninitialize(){  UIManager.removePropertyChangeListener(defaultsListener);  UIManager.getDefaults().removePropertyChangeListener(colorTree);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.BinarySecurityTokenElement createBinarySecurityTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.BinarySecurityTokenElementImpl();}  }
class C{  protected void startCollapseHeightAnimation(ArrayList<Integer> viewHeights,int partAnimationDuration){  if (viewHeights == null || viewHeights.isEmpty())   throw new IllegalArgumentException("ViewHeights array must have at least 2 elements");  ArrayList<Animation> heightAnimations=new ArrayList<>();  int fromHeight=viewHeights.get(0);  for (int i=1; i < viewHeights.size(); i++) {    int toHeight=fromHeight + viewHeights.get(i);    heightAnimations.add(new HeightAnimation(this,toHeight,fromHeight,partAnimationDuration).withInterpolator(new DecelerateInterpolator()));    fromHeight=toHeight;  }  Collections.reverse(heightAnimations);  createAnimationChain(heightAnimations,this);  this.startAnimation(heightAnimations.get(0));}  }
class C{  public int substitute_trace_count(){  return trace_piece_count;}  }
class C{  public final void testIsStatePreserved2(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  byte[] encodedKeyCopy=encodedKey.clone();  X509EncodedKeySpec meks=new X509EncodedKeySpec(encodedKeyCopy);  byte[] ek=meks.getEncoded();  ek[3]=(byte)5;  byte[] ek1=meks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek1));}  }
class C{  public boolean equals(Object other){  if (this == other) {    return true;  }  if (other instanceof ECPoint) {    if (this.affineX != null) {      ECPoint otherPoint=(ECPoint)other;      return this.affineX.equals(otherPoint.affineX) && this.affineY.equals(otherPoint.affineY);    } else {      return other == POINT_INFINITY;    }  }  return false;}  }
class C{  public void test_getModulus() throws Exception {  KeyFactory gen=KeyFactory.getInstance("RSA");  final BigInteger n=BigInteger.valueOf(3233);  final BigInteger d=BigInteger.valueOf(2753);  final BigInteger e=BigInteger.valueOf(17);  RSAKey key=null;  key=(RSAKey)gen.generatePrivate(new RSAPrivateKeySpec(n,d));  assertEquals("invalid modulus",n,key.getModulus());  key=(RSAKey)gen.generatePublic(new RSAPublicKeySpec(n,e));  assertEquals("invalid modulus",n,key.getModulus());}  }
class C{  public static void fill(int[] array,int value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void draw(Graphics2D g){  g.setStroke(new BasicStroke((float)thickness,BasicStroke.CAP_ROUND,BasicStroke.JOIN_MITER));  g.setColor(new Color(colorR & 0xFF,colorG & 0xFF,colorB & 0xFF,colorA & 0xFF));  if (x1 == x2 && y1 == y2) {    Arc2D arc=new Arc2D.Double(x1,y1,0,0,0d,360d,Arc2D.OPEN);    g.draw(arc);  } else   if (type == 1 || type == 2) {    Line2D line=new Line2D.Double(x1,y1,x2,y2);    g.draw(line);  } else   if (type == 3 || type == 4) {    double x1=this.x1, x2=this.x2, y1=this.y1, y2=this.y2;    if (x1 > x2) {      x1=this.x2;      x2=this.x1;    }    if (y1 > y2) {      y1=this.y2;      y2=this.y1;    }    if (type == 3) {      Rectangle2D rect=new Rectangle2D.Double(x1,y1,x2 - x1,y2 - y1);      g.draw(rect);    } else     if (type == 4) {      Arc2D arc=new Arc2D.Double(x1,y1,x2 - x1,y2 - y1,0d,360d,Arc2D.OPEN);      g.draw(arc);    }  }}  }
class C{  public RADIUSPrincipal(String name){  if (name == null) {    throw new NullPointerException("illegal null input");  }  this.name=name;}  }
class C{  public int read() throws IOException {  ensureOpen();  return read(singleByteBuf,0,1) == -1 ? -1 : Byte.toUnsignedInt(singleByteBuf[0]);}  }
class C{  public boolean isAccessibleChildSelected(int i){  return isSelectedIndex(i);}  }
class C{  public void addModification(Modification mod){  mods.add(mod);}  }
class C{  public SecurityCollection[] findCollections(){  return (collections);}  }
class C{  private final void appendContents(StringBuffer buf,CharacterIterator iterator){  int index=iterator.getBeginIndex();  int end=iterator.getEndIndex();  while (index < end) {    iterator.setIndex(index++);    buf.append(iterator.current());  }}  }
class C{  public static Activity.Marketplace from(final Api api){  return new Activity.Marketplace(api.getLoans());}  }
class C{  public OpendsCertificateException(String msg,X509Certificate[] chain){  super(msg);  this.chain=chain;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LEmergencyContactElement createLEmergencyContactElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LEmergencyContactElementImpl();}  }
class C{  @Deprecated public static boolean isFocusManagerEnabled(){  return enabled;}  }
class C{  private int handleGH(String value,DoubleMetaphoneResult result,int index){  if (index > 0 && !isVowel(charAt(value,index - 1))) {    result.append('K');    index+=2;  } else   if (index == 0) {    if (charAt(value,index + 2) == 'I') {      result.append('J');    } else {      result.append('K');    }    index+=2;  } else   if ((index > 1 && contains(value,index - 2,1,"B","H","D")) || (index > 2 && contains(value,index - 3,1,"B","H","D")) || (index > 3 && contains(value,index - 4,1,"B","H"))) {    index+=2;  } else {    if (index > 2 && charAt(value,index - 1) == 'U' && contains(value,index - 3,1,"C","G","L","R","T")) {      result.append('F');    } else     if (index > 0 && charAt(value,index - 1) != 'I') {      result.append('K');    }    index+=2;  }  return index;}  }
class C{  private Backupable buildBackupableForMultipleDirectoriesCase(Path sourceDirectory,int numberOfFiles) throws Exception {  List<Path> files=createFilesInDirectoryToBackup(sourceDirectory,numberOfFiles);  Path subdir=sourceDirectory.resolve("subdir");  Files.createDirectory(subdir);  List<Path> subdirFiles=createFilesInDirectoryToBackup(subdir,numberOfFiles);  files.addAll(subdirFiles);  Backupable backupable=mock(Backupable.class);  when(backupable.getDirectory()).thenReturn(sourceDirectory.toFile());  when(backupable.getFilesToBackup()).thenReturn(files.listIterator());  return backupable;}  }
class C{  public void removeDragSourceListener(DragSourceListener dsl){  if (dsl != null) {synchronized (this) {      listener=DnDEventMulticaster.remove(listener,dsl);    }  }}  }
class C{  public byte[] reverse(byte[] data) throws TokenStrategyFailedException {  return apply(reverseStrategies,false,data);}  }
class C{  public com.sun.identity.saml2.jaxb.metadataextquery.QueryDescriptorType createQueryDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadataextquery.impl.QueryDescriptorTypeImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns01.class,args);}  }
class C{  public Object[] toArray(){synchronized (children) {    return children.keySet().toArray();  }}  }
class C{  private static PendingInstallShortcutInfo convertToLauncherActivityIfPossible(PendingInstallShortcutInfo original){  if (original.isLuncherActivity()) {    return original;  }  if (!Utilities.isLauncherAppTarget(original.launchIntent) || !original.user.equals(UserHandleCompat.myUserHandle())) {    return original;  }  PackageManager pm=original.mContext.getPackageManager();  ResolveInfo info=pm.resolveActivity(original.launchIntent,0);  if (info == null) {    return original;  }  LauncherActivityInfoCompat launcherInfo=LauncherActivityInfoCompat.fromResolveInfo(info,original.mContext);  return new PendingInstallShortcutInfo(launcherInfo,original.mContext);}  }
class C{  public static int countByUuid(java.lang.String uuid){  return getPersistence().countByUuid(uuid);}  }
class C{  protected synchronized void bcsPreDeserializationHook(ObjectInputStream ois) throws IOException, ClassNotFoundException {  serializable=ois.readInt();  int count=serializable;  while (count > 0) {    services.put(ois.readObject(),ois.readObject());    count--;  }}  }
class C{  public void findMethodFromClassWithArguments(String name,List<Value> argList,STypeDef invokeOn,SClassDef sClassDef,int mode,List<SMethodDef> matchedMethods,boolean checkSuper) throws SyntaxException {  if (!sClassDef.modifiers().contains(SModifier.PUBLIC)) {    if (sClassDef.modifiers().contains(SModifier.PROTECTED)) {      if (!sClassDef.isAssignableFrom(invokeOn) && !sClassDef.pkg().equals(invokeOn.pkg()))       return;    } else     if (sClassDef.modifiers().contains(SModifier.PRIVATE))     return; else {      if (!sClassDef.pkg().equals(invokeOn.pkg()))       return;    }  }  out:   for (  SMethodDef m : sClassDef.methods()) {    if (!m.name().equals(name))     continue;    if (mode == FIND_MODE_STATIC) {      if (!m.modifiers().contains(SModifier.STATIC))       continue;    } else     if (mode == FIND_MODE_NON_STATIC) {      if (m.modifiers().contains(SModifier.STATIC))       continue;    }    List<SParameter> parameters=m.getParameters();    if (parameters.size() == argList.size()) {      for (int i=0; i < parameters.size(); ++i) {        SParameter param=parameters.get(i);        Value v=argList.get(i);        if (!param.type().isAssignableFrom(v.type())) {          if (!(param.type() instanceof PrimitiveTypeDef) && v.type() instanceof PrimitiveTypeDef) {            v=boxPrimitive(v,LineCol.SYNTHETIC);            if (!param.type().isAssignableFrom(v.type()))             continue out;          } else           continue out;        }      }      if (m.modifiers().contains(SModifier.PRIVATE)) {        if (!invokeOn.equals(sClassDef))         continue;      } else       if (m.modifiers().contains(SModifier.PROTECTED)) {        if (!sClassDef.isAssignableFrom(invokeOn) && !sClassDef.pkg().equals(invokeOn.pkg()))         continue;      } else       if (!m.modifiers().contains(SModifier.PUBLIC)) {        if (!sClassDef.pkg().equals(invokeOn.pkg()))         continue;      }      if (!whetherTheMethodIsOverriddenByMethodsInTheList(m,matchedMethods)) {        STypeDef type=m.getReturnType();        boolean canAccess=false;        if (type instanceof SClassDef) {          if (((SClassDef)type).modifiers().contains(SModifier.PUBLIC)) {            canAccess=true;          } else           if (((SClassDef)type).modifiers().contains(SModifier.PROTECTED)) {            if (type.isAssignableFrom(invokeOn) || type.pkg().equals(invokeOn.pkg())) {              canAccess=true;            }          } else           if (!((SClassDef)type).modifiers().contains(SModifier.PUBLIC)) {            if (type.pkg().equals(invokeOn.pkg())) {              canAccess=true;            }          }        } else {          canAccess=true;        }        if (canAccess) {          matchedMethods.add(m);        }      }    }  }  if (checkSuper) {    if (sClassDef.parent() != null) {      findMethodFromClassWithArguments(name,argList,invokeOn,sClassDef.parent(),mode,matchedMethods,true);    }    for (    SInterfaceDef i : sClassDef.superInterfaces()) {      findMethodFromInterfaceWithArguments(name,argList,i,mode,matchedMethods,true);    }  }}  }
class C{  public Rectangle modelToView(JTextComponent a,int b,Position.Bias c) throws BadLocationException {  Rectangle returnValue=((TextUI)(uis.elementAt(0))).modelToView(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).modelToView(a,b,c);  }  return returnValue;}  }
class C{  public static void handleException(String emsg){  new Exception().printStackTrace();  System.err.println("Unexepcted INTERNAL ERROR !!");  System.err.println(emsg);  throw new RuntimeException(emsg);}  }
class C{  final boolean tokenIs(String s){  return (m_token != null) ? (m_token.equals(s)) : (s == null);}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(ADD_BUTTON,CCButton.class);  registerChild(DELETE_BUTTON,CCButton.class);  registerChild(TEXTFIELD,TextField.class);}  }
class C{  private EntryIDSet evaluateLogicalOrFilter(SearchFilter orFilter){  ArrayList<EntryIDSet> candidateSets=new ArrayList<>(orFilter.getFilterComponents().size());  for (  SearchFilter filter : orFilter.getFilterComponents()) {    EntryIDSet set=evaluateFilter(filter);    if (!set.isDefined()) {      return set;    }    candidateSets.add(set);  }  return newSetFromUnion(candidateSets);}  }
class C{  public void gdi_update_join(ShapeTileBox p_box){  if (p_box == null)   return;  update_box=update_box.union(p_box);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenodeancestor.class,args);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof InterfaceAddress)) {    return false;  }  InterfaceAddress rhs=(InterfaceAddress)obj;  return ((address == null) ? rhs.address == null : address.equals(rhs.address)) && (rhs.prefixLength == prefixLength) && ((broadcastAddress == null) ? rhs.broadcastAddress == null : broadcastAddress.equals(rhs.broadcastAddress));}  }
class C{  public int hashCode(){  int result=choiceLimits.length;  if (choiceFormats.length > 0) {    result^=choiceFormats[choiceFormats.length - 1].hashCode();  }  return result;}  }
class C{  public boolean passed(){  return getSkippedTestCases().isEmpty() && getFailedTestCases().isEmpty();}  }
class C{  @Override public void removeWatchedResource(String name){synchronized (watchedResourcesLock) {    int n=-1;    for (int i=0; i < watchedResources.length; i++) {      if (watchedResources[i].equals(name)) {        n=i;        break;      }    }    if (n < 0)     return;    int j=0;    String results[]=new String[watchedResources.length - 1];    for (int i=0; i < watchedResources.length; i++) {      if (i != n)       results[j++]=watchedResources[i];    }    watchedResources=results;  }  fireContainerEvent("removeWatchedResource",name);}  }
class C{  public String toString(){  StringBuilder str=new StringBuilder();  str.append("Server Name=").append(serverName);  str.append(" Server Port=").append(serverPort);  str.append(" Status=").append(serverStatus);  return str.toString();}  }
class C{  private void readObject(ObjectInputStream in) throws IOException {  throw new NotSerializableException();}  }
class C{  public static boolean isBase64(final String base64){  return isBase64(StringUtils.getBytesUtf8(base64));}  }
class C{  public static Thread start(Thread thread,long timeout){  Thread monitor=null;  if (timeout > 0) {    ThreadMonitor timout=new ThreadMonitor(thread,timeout);    monitor=new Thread(timout,ThreadMonitor.class.getSimpleName());    monitor.setDaemon(true);    monitor.start();  }  return monitor;}  }
class C{  public void testPosZero(){  String numA="27384627835298756289327365";  String numB="0";  String res="27384627835298756289327365";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (logger.isLoggingEnabled())   logger.logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(ContentLength.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("Encountered Bad Message \n" + sipMessage.toString());    }    String msgString=sipMessage.toString();    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {      if (socketChannel != null) {        if (logger.isLoggingEnabled(LogWriter.TRACE_ERROR)) {          logger.logError("Malformed mandatory headers: closing socket! :" + socketChannel.toString());        }        try {          socketChannel.close();        } catch (        IOException ie) {          if (logger.isLoggingEnabled(LogWriter.TRACE_ERROR)) {            logger.logError("Exception while closing socket! :" + socketChannel.toString() + ":"+ ie.toString());          }        }      }    }    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  @Deprecated public static IOFileFilter orFileFilter(IOFileFilter filter1,IOFileFilter filter2){  return new OrFileFilter(filter1,filter2);}  }
class C{  public static String toAsciiString(byte[] raw){  return new String(toAsciiChars(raw));}  }
class C{  private void reset(){  _handler=null;  _depth=0;  _mapping.clear();  _stateInfos.clear();  _colorTypes.clear();  _statePainters.clear();  _stylePainters.clear();}  }
class C{  private boolean evalEntryAttr(Entry e,AciEvalContext evalCtx,AttributeType attributeType){switch (userAttrType) {case USERDN:    return UserDN.evaluate(e,evalCtx.getClientDN(),attributeType);case GROUPDN:  return GroupDN.evaluate(e,evalCtx,attributeType,null);default :return false;}}  }
class C{  public void invokeShutdownPlugins(LocalizableMessage reason){  for (  DirectoryServerPlugin p : shutdownPlugins) {    try {      p.doShutdown(reason);    } catch (    Exception e) {      logger.traceException(e);      logger.error(ERR_PLUGIN_SHUTDOWN_PLUGIN_EXCEPTION,p.getPluginEntryDN(),stackTraceToSingleLineString(e));    }  }}  }
class C{  void addToParent(Element headerE){  Document doc=headerE.getOwnerDocument();  Element siuHeaderE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING_11,SOAPBindingConstants.PTAG_SERVICE_INSTANCE_UPDATE);  headerE.appendChild(siuHeaderE);  if (!securityMechIDs.isEmpty()) {    for (Iterator iter=securityMechIDs.iterator(); iter.hasNext(); ) {      String securityMechID=(String)iter.next();      Element secMechIDE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING_11,SOAPBindingConstants.PTAG_SECURITY_MECH_ID);      secMechIDE.appendChild(doc.createTextNode(securityMechID));      siuHeaderE.appendChild(secMechIDE);    }  }  if (!credentials.isEmpty()) {    for (Iterator iter=credentials.iterator(); iter.hasNext(); ) {      Credential credential=(Credential)iter.next();      credential.addToParent(siuHeaderE);    }  }  if (endpoint != null) {    Element endpointE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING_11,SOAPBindingConstants.PTAG_ENDPOINT);    endpointE.appendChild(doc.createTextNode(endpoint));    siuHeaderE.appendChild(endpointE);  }  if (id != null) {    siuHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_id,id);  }  if (mustUnderstand != null) {    siuHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_MUSTUNDERSTAND,Utils.BooleanToString(mustUnderstand));  }  if (actor != null) {    siuHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_ACTOR,actor);  }}  }
class C{  @Override public void processExtendedOperation(ExtendedOperation operation){  int idToCancel;  ByteString requestValue=operation.getRequestValue();  if (requestValue == null) {    operation.setResultCode(ResultCode.PROTOCOL_ERROR);    operation.appendErrorMessage(ERR_EXTOP_CANCEL_NO_REQUEST_VALUE.get());    return;  }  try {    ASN1Reader reader=ASN1.getReader(requestValue);    reader.readStartSequence();    idToCancel=(int)reader.readInteger();    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    operation.setResultCode(ResultCode.PROTOCOL_ERROR);    LocalizableMessage message=ERR_EXTOP_CANCEL_CANNOT_DECODE_REQUEST_VALUE.get(getExceptionMessage(e));    operation.appendErrorMessage(message);    return;  }  LocalizableMessage cancelReason=INFO_EXTOP_CANCEL_REASON.get(operation.getMessageID());  CancelRequest cancelRequest=new CancelRequest(true,cancelReason);  ClientConnection clientConnection=operation.getClientConnection();  CancelResult cancelResult=clientConnection.cancelOperation(idToCancel,cancelRequest);  ResultCode resultCode=cancelResult.getResultCode();  operation.setResultCode(resultCode == ResultCode.CANCELLED ? ResultCode.SUCCESS : resultCode);  operation.appendErrorMessage(cancelResult.getResponseMessage());}  }
class C{  public ReplaceTokens(String sourceFile,String destFile,Map tokens) throws Exception {  setSourceFile(sourceFile);  setDestinationFile(destFile);  checkSourceAndDestFiles();  setTokens(new HashMap());  getTokens().putAll(tokens);}  }
class C{  public Tasker addUITask(Task task){  tasks.add(task);  task.setRunType(THREAD_TYPE.UI);  lastAddedTask=task;  return this;}  }
class C{  ServerGroupConfiguration(ServerGroup group,ServerInstance instance){  this.group=group;  this.instance=instance;}  }
class C{  protected void eleminateRedundent(ElemTemplateElement psuedoVarRecipient,Vector paths){  int n=paths.size();  int numPathsEliminated=0;  int numUniquePathsEliminated=0;  for (int i=0; i < n; i++) {    ExpressionOwner owner=(ExpressionOwner)paths.elementAt(i);    if (null != owner) {      int found=findAndEliminateRedundant(i + 1,i,owner,psuedoVarRecipient,paths);      if (found > 0)       numUniquePathsEliminated++;      numPathsEliminated+=found;    }  }  eleminateSharedPartialPaths(psuedoVarRecipient,paths);  if (DIAGNOSE_NUM_PATHS_REDUCED)   diagnoseNumPaths(paths,numPathsEliminated,numUniquePathsEliminated);}  }
class C{  @Override public TagField createField(FieldKey genericKey,String value) throws KeyNotFoundException, FieldDataInvalidException {  if (genericKey == null) {    throw new KeyNotFoundException();  }  if (genericKey == FieldKey.GENRE) {    if (value == null) {      throw new IllegalArgumentException(ErrorMessage.GENERAL_INVALID_NULL_ARGUMENT.getMsg());    }    FrameAndSubId formatKey=getFrameAndSubIdFromGenericKey(genericKey);    AbstractID3v2Frame frame=createFrame(formatKey.getFrameId());    FrameBodyTCON framebody=(FrameBodyTCON)frame.getBody();    framebody.setV23Format();    if (TagOptionSingleton.getInstance().isWriteMp3GenresAsText()) {      framebody.setText(value);    } else {      framebody.setText(FrameBodyTCON.convertGenericToID3v23Genre(value));    }    return frame;  } else   if (genericKey == FieldKey.YEAR) {    if (value.length() == 1) {      AbstractID3v2Frame tyer=createFrame(ID3v23Frames.FRAME_ID_V3_TYER);      ((AbstractFrameBodyTextInfo)tyer.getBody()).setText("000" + value);      return tyer;    } else     if (value.length() == 2) {      AbstractID3v2Frame tyer=createFrame(ID3v23Frames.FRAME_ID_V3_TYER);      ((AbstractFrameBodyTextInfo)tyer.getBody()).setText("00" + value);      return tyer;    } else     if (value.length() == 3) {      AbstractID3v2Frame tyer=createFrame(ID3v23Frames.FRAME_ID_V3_TYER);      ((AbstractFrameBodyTextInfo)tyer.getBody()).setText("0" + value);      return tyer;    } else     if (value.length() == 4) {      AbstractID3v2Frame tyer=createFrame(ID3v23Frames.FRAME_ID_V3_TYER);      ((AbstractFrameBodyTextInfo)tyer.getBody()).setText(value);      return tyer;    } else     if (value.length() > 4) {      AbstractID3v2Frame tyer=createFrame(ID3v23Frames.FRAME_ID_V3_TYER);      ((AbstractFrameBodyTextInfo)tyer.getBody()).setText(value.substring(0,4));      if (value.length() >= 10) {        String month=value.substring(5,7);        String day=value.substring(8,10);        AbstractID3v2Frame tdat=createFrame(ID3v23Frames.FRAME_ID_V3_TDAT);        ((AbstractFrameBodyTextInfo)tdat.getBody()).setText(day + month);        TyerTdatAggregatedFrame ag=new TyerTdatAggregatedFrame();        ag.addFrame(tyer);        ag.addFrame(tdat);        return ag;      } else       if (value.length() >= 7) {        String month=value.substring(5,7);        String day="01";        AbstractID3v2Frame tdat=createFrame(ID3v23Frames.FRAME_ID_V3_TDAT);        ((AbstractFrameBodyTextInfo)tdat.getBody()).setText(day + month);        TyerTdatAggregatedFrame ag=new TyerTdatAggregatedFrame();        ag.addFrame(tyer);        ag.addFrame(tdat);        return ag;      } else {        return tyer;      }    } else {      return null;    }  } else {    return super.createField(genericKey,value);  }}  }
class C{  public void onDirectoryDelete(final File directory){}  }
class C{  public void test_getTrustManagers(){  try {    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(getDefaultAlgorithm());    KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());    ks.load(null,null);    trustMF.init(ks);    TrustManager[] tm=trustMF.getTrustManagers();    assertNotNull("Result has not be null",tm);    assertTrue("Length of result TrustManager array should not be 0",(tm.length > 0));  } catch (  Exception ex) {    fail("Unexpected exception " + ex.toString());  }}  }
class C{  public AudioPermission(String name){  super(name);}  }
class C{  static String escapeStringForASCII(String s){  String out="";  char[] cArray=s.toCharArray();  for (int i=0; i < cArray.length; i++) {    char c=cArray[i];    if (c > 127) {      out+="\\U";      String hex=Integer.toHexString(c);      while (hex.length() < 4)       hex="0" + hex;      out+=hex;    } else     if (c == '\\') {      out+="\\\\";    } else     if (c == '\"') {      out+="\\\"";    } else     if (c == '\b') {      out+="\\b";    } else     if (c == '\n') {      out+="\\n";    } else     if (c == '\r') {      out+="\\r";    } else     if (c == '\t') {      out+="\\t";    } else {      out+=c;    }  }  return out;}  }
class C{  public PdfEncryption(Certificate[] certs,int[] permissions,int encryptionType){  super(new PdfDictionary());  int revision=setCryptoMode(encryptionType);switch (revision) {case STANDARD_ENCRYPTION_40:    securityHandler=new PubSecHandlerUsingStandard40(this.getPdfObject(),certs,permissions,encryptMetadata,embeddedFilesOnly);  break;case STANDARD_ENCRYPTION_128:securityHandler=new PubSecHandlerUsingStandard128(this.getPdfObject(),certs,permissions,encryptMetadata,embeddedFilesOnly);break;case AES_128:securityHandler=new PubSecHandlerUsingAes128(this.getPdfObject(),certs,permissions,encryptMetadata,embeddedFilesOnly);break;case AES_256:securityHandler=new PubSecHandlerUsingAes256(this.getPdfObject(),certs,permissions,encryptMetadata,embeddedFilesOnly);break;}}  }
class C{  public void onLogout(HttpServletRequest req,HttpServletResponse res,SSOToken ssoToken) throws AuthenticationException {}  }
class C{  protected void cleanUpReplicationServersDB() throws Exception {  for (  ReplicationServer rs : ReplicationServer.getAllInstances()) {    clearChangelogDB(rs);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.EncryptableNameIdentifierType createEncryptableNameIdentifierType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.EncryptableNameIdentifierTypeImpl();}  }
class C{  public void copy_selected_items(Point2D p_from_location){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  StateSelectedItem curr_state=(StateSelectedItem)interactive_state;  curr_state.extent_to_whole_components();  Collection<BrdItem> item_list=curr_state.get_item_list();  PlaPointFloat from_location=gdi_context.coordinate_transform.screen_to_board(p_from_location);  StateInteractive new_state=StateCopyItem.get_instance(from_location,item_list,interactive_state.return_state,this,actlog);  set_interactive_state(new_state);}  }
class C{  public boolean seek(int index){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("seek",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.seek(index);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public OperationRejectedException(OperationType type,LocalizableMessage ufn,Collection<LocalizableMessage> messages){  super(getDefaultMessage(messages));  this.messages=new ArrayList<>(messages);  this.type=type;  this.ufn=ufn;}  }
class C{  @NonNull public final Agera takeUntil(@NonNull Observable other){  return new AgeraTakeUntil(this,other);}  }
class C{  @Override public byte[] unwrap(final byte[] incoming,final int offset,final int len) throws LdapException {  final byte[] copy=new byte[len];  System.arraycopy(incoming,offset,copy,0,len);  return copy;}  }
class C{  public String recordHistoryReport(Record record){  StringBuilder report=new StringBuilder();  report.append("--- Records history\n");  for (  Map.Entry<Date,RecordStatus> entry : record.getRecordsHistory().entrySet()) {    report.append(dateFormat.format(entry.getKey())).append(" -> ").append(entry.getValue()).append("\n");  }  return report.toString();}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.PDPDescriptorElement createPDPDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.PDPDescriptorElementImpl();}  }
class C{  private byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  @VisibleForTesting void writeSession(Session session){  Reject.ifNull(session);  Reject.ifNull(session.getID());  sessionCullerTable.put(session.getID(),new SessionCuller(session));  sessionTable.put(session.getID(),session);}  }
class C{  public GitHubService(GitHubClient client){  if (client == null)   throw new IllegalArgumentException("Client cannot be null");  this.client=client;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.EmailAddressElement createEmailAddressElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.EmailAddressElementImpl(value);}  }
class C{  @Override public void write(byte[] b,int off,int len){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  NodeList childNodes;  doc=(Document)load("hc_staff",false);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  childNodes=titleAttr.getChildNodes();  assertSize("childNodesSize",1,childNodes);  textNode=(Text)childNodes.item(0);  value=textNode.getNodeValue();  assertEquals("child1IsYes","Yes",value);  textNode=(Text)childNodes.item(1);  assertNull("secondItemIsNull",textNode);}  }
class C{  private MemberName loadMethod(byte[] classFile){  Class<?> invokerClass=loadAndInitializeInvokerClass(classFile,cpPatches(classFile));  return resolveInvokerMember(invokerClass,invokerName,invokerType);}  }
class C{  public void uninstallUI(JComponent c){  uninstallKeyboardActions();  uninstallListeners();  uninstallDefaults();  dividerLocationIsSet=false;  dividerKeyboardResize=false;  splitPane=null;}  }
class C{  public Set listCircleOfTrustMember(String realm,String cotName,String protocolType) throws COTException {  String classMethod="COTManager.listCircleOfTrustMember: ";  if ((cotName == null) || (cotName.trim().length() == 0)) {    String[] data={realm};    LogUtil.error(Level.INFO,LogUtil.NULL_COT_NAME_LIST_COT,data);    throw new COTException("invalidCOTName",null);  }  if (realm == null) {    realm="/";  }  Set trustedProviders=new HashSet();  try {    CircleOfTrustDescriptor cotDesc=null;    Map attrs=configInst.getConfiguration(realm,cotName);    if (attrs == null) {      return null;    } else {      isValidProtocolType(protocolType);      cotDesc=new CircleOfTrustDescriptor(cotName,realm,attrs);      trustedProviders=cotDesc.getTrustedProviders(protocolType);    }  } catch (  ConfigurationException e) {    debug.error(classMethod,e);    String[] data={e.getMessage(),cotName,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_LIST_COT_MEMBER,data);    throw new COTException(e);  }  return trustedProviders;}  }
class C{  public void paintPanelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static <T>List<T> singletonList(T o){  return new SingletonList<>(o);}  }
class C{  private void deleteIndex(AbstractIndexDescriptor index) throws OpenDsException {  final String backendId="ds-cfg-backend-id" + "=" + index.getBackend().getBackendID();  String dn;  if (isVLVIndex(index)) {    dn="ds-cfg-name" + "=" + index.getName() + ",cn=VLV Index,"+ backendId+ ",cn=Backends,cn=config";  } else {    dn="ds-cfg-attribute" + "=" + index.getName() + ",cn=Index,"+ backendId+ ",cn=Backends,cn=config";  }  DirectoryServer.getConfigurationHandler().deleteEntry(DN.valueOf(dn));}  }
class C{  private void addTriggerGroupName(String groupName) throws JobPersistenceException, ResourceException {  addRepoListName(groupName,TRIGGER_GROUP_NAMES_RESOURCE_PATH,"names");}  }
class C{  private boolean nodeModelContains(DefaultMutableTreeNode node,String text){  @SuppressWarnings("unchecked") Enumeration<DefaultMutableTreeNode> e=node.children();  while (e.hasMoreElements()) {    DefaultMutableTreeNode dmtn=e.nextElement();    if (dmtn.isLeaf() && dmtn.toString().toLowerCase().contains(text)) {      return true;    }  }  return false;}  }
class C{  public void fireIndexedPropertyChange(String propertyName,int index,int oldValue,int newValue){  if (oldValue != newValue) {    fireIndexedPropertyChange(propertyName,index,Integer.valueOf(oldValue),Integer.valueOf(newValue));  }}  }
class C{  public SubtreeDeleteControl(boolean isCritical){  super(OID_SUBTREE_DELETE_CONTROL,isCritical);}  }
class C{  public boolean isWatchMode() throws MojoExecutionException {  return runningWithGoal("fabric8:watch-spring-boot","fabric8:watch");}  }
class C{  private static void checkConfigProperties(){  String overrideAMC=SystemProperties.get(SetupConstants.AMC_OVERRIDE_PROPERTY);  isConfiguredFlag=overrideAMC == null || overrideAMC.equalsIgnoreCase("false");  if (!isConfiguredFlag && servletCtx != null) {    String baseDir=getBaseDir();    try {      if (canBootstrap()) {        isConfiguredFlag=Bootstrap.load(new BootstrapData(baseDir),false);      } else       if (baseDir != null) {        isConfiguredFlag=loadAMConfigProperties(baseDir + "/" + SetupConstants.AMCONFIG_PROPERTIES);      }    } catch (    ConfiguratorException e) {      System.out.println("checkConfigProperties :" + e);    }catch (    Exception e) {      Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupServlet.checkConfigProperties",e);    }  }}  }
class C{  public boolean run(final EventTypes eventTyp,final EventArgs args,final IConfiguration configuration) throws ConnectorException {  for (  EventCommandData eventCommandData : eventHandlers.get(eventTyp)) {    try {      IEventHandler events;      if (eventCommandData.getPluginInfo() != null) {        events=eventCommandData.getEventListener().getConstructor(PluginInfo.class).newInstance(eventCommandData.getPluginInfo());      } else {        events=eventCommandData.getEventListener().newInstance();      }      if (!events.runEventHandler(args,configuration)) {        return false;      }    } catch (    Exception e) {      throw new ConnectorException(e);    }  }  return true;}  }
class C{  @Override public int intValue(){  return value;}  }
class C{  public RequirementsBuilder addRequireProperty(String name,RequirementsBuilder builder){  addProperty(name,builder);  requiredProperties.add(name);  return this;}  }
class C{  void registerFont(String path,String alias){  try {    if (path.toLowerCase().endsWith(".ttf") || path.toLowerCase().endsWith(".otf") || path.toLowerCase().indexOf(".ttc,") > 0) {      FontProgram fontProgram=FontProgramFactory.createFont(path);      Object[] allNames=new Object[]{fontProgram.getFontNames().getFontName(),fontProgram.getFontNames().getFamilyName(),fontProgram.getFontNames().getFullName()};      fontNames.put(((String)allNames[0]).toLowerCase(),path);      if (alias != null) {        String lcAlias=alias.toLowerCase();        fontNames.put(lcAlias,path);        if (lcAlias.endsWith("regular")) {          saveCopyOfRegularFont(lcAlias,path);        }      }      String[][] names=(String[][])allNames[2];      for (      String[] name : names) {        String lcName=name[3].toLowerCase();        fontNames.put(lcName,path);        if (lcName.endsWith("regular")) {          saveCopyOfRegularFont(lcName,path);        }      }      String fullName;      String familyName=null;      names=(String[][])allNames[1];      for (int k=0; k < TTFamilyOrder.length; k+=3) {        for (        String[] name : names) {          if (TTFamilyOrder[k].equals(name[0]) && TTFamilyOrder[k + 1].equals(name[1]) && TTFamilyOrder[k + 2].equals(name[2])) {            familyName=name[3].toLowerCase();            k=TTFamilyOrder.length;            break;          }        }      }      if (familyName != null) {        String lastName="";        names=(String[][])allNames[2];        for (        String[] name : names) {          for (int k=0; k < TTFamilyOrder.length; k+=3) {            if (TTFamilyOrder[k].equals(name[0]) && TTFamilyOrder[k + 1].equals(name[1]) && TTFamilyOrder[k + 2].equals(name[2])) {              fullName=name[3];              if (fullName.equals(lastName))               continue;              lastName=fullName;              registerFontFamily(familyName,fullName,null);              break;            }          }        }      }    } else     if (path.toLowerCase().endsWith(".ttc")) {      TrueTypeCollection ttc=new TrueTypeCollection(path);      for (int i=0; i < ttc.getTTCSize(); i++) {        String fullPath=path + "," + i;        if (alias != null) {          registerFont(fullPath,alias + "," + i);        } else {          registerFont(fullPath);        }      }    } else     if (path.toLowerCase().endsWith(".afm") || path.toLowerCase().endsWith(".pfm")) {      FontProgram fontProgram=FontProgramFactory.createFont(path);      String fullName=fontProgram.getFontNames().getFullName()[0][3].toLowerCase();      String familyName=fontProgram.getFontNames().getFamilyName()[0][3].toLowerCase();      String psName=fontProgram.getFontNames().getFontName().toLowerCase();      registerFontFamily(familyName,fullName,null);      fontNames.put(psName,path);      fontNames.put(fullName,path);    }    LOGGER.trace(MessageFormat.format("Registered {0}",path));  } catch (  java.io.IOException e) {    throw new IOException(e);  }}  }
class C{  @Override public boolean accept(File file){  return file.canWrite();}  }
class C{  private <T extends MonitorProviderCfg>MonitorProvider<T> loadMonitor(String className,T configuration) throws InitializationException {  try {    MonitorProviderCfgDefn definition=MonitorProviderCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    @SuppressWarnings("unchecked") Class<? extends MonitorProvider<T>> providerClass=(Class<? extends MonitorProvider<T>>)propertyDefinition.loadClass(className,MonitorProvider.class);    MonitorProvider<T> monitor=providerClass.newInstance();    if (configuration != null) {      monitor.initializeMonitorProvider(configuration);    }    return monitor;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_MONITOR_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  private void deregister(final K k){  ObjectDeque<T> objectDeque;  objectDeque=poolMap.get(k);  final long numInterested=objectDeque.getNumInterested().decrementAndGet();  if (numInterested == 0 && objectDeque.getCreateCount().get() == 0) {    final Lock writeLock=keyLock.writeLock();    writeLock.lock();    try {      if (objectDeque.getCreateCount().get() == 0 && objectDeque.getNumInterested().get() == 0) {        poolMap.remove(k);        poolKeyList.remove(k);      }    }  finally {      writeLock.unlock();    }  }}  }
class C{  public boolean isConnected(){  return connected.get();}  }
class C{  public boolean addAll(Attribute attribute){  boolean wasModified=false;  for (  ByteString v : attribute) {    wasModified|=add(v);  }  return wasModified;}  }
class C{  private void tryAcquireExclusiveLocks() throws ConfigureDSException {  if (!LockFileManager.acquireExclusiveLock(serverLockFileName,failureReason)) {    throw new ConfigureDSException(ERR_CONFIGDS_CANNOT_ACQUIRE_SERVER_LOCK.get(serverLockFileName,failureReason));  }}  }
class C{  public FrameBodyTEXT(){}  }
class C{  private boolean validateLdapFilterCollection(Collection ldapFilterSet) throws PolicyException {  if (ldapFilterSet.isEmpty()) {    String args[]={LDAP_FILTER};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_empty_values",args,null);  }  if (ldapFilterSet.size() > 1) {    String args[]={LDAP_FILTER};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_multiple_values",args,null);  }  try {    ldapConditionFilter=(String)(ldapFilterSet.iterator().next());  } catch (  ClassCastException e) {    String args[]={LDAP_FILTER};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_String",args,null);  }  return true;}  }
class C{  @Override public void save(User u){  if (this.u == null) {    this.u=getUser(0);  }  this.u.setId(u.getId());  this.u.setFirstName(u.getFirstName());  this.u.setLastName(u.getLastName());}  }
class C{  public String parameter(String name){  if (!parameters().containsKey(name) || parameters.get(name).size() <= 0) {    return null;  }  return parameters().get(name).get(0);}  }
class C{  public static RequirementsBuilder oneOf(JsonValue... oneOfElements){  RequirementsBuilder newBuilder=new RequirementsBuilder(BuilderType.ONE_OF,null);  newBuilder.addOneOfElements(oneOfElements);  return newBuilder;}  }
class C{  public void handleBtnFilterRequest(RequestInvocationEvent event){  CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);  setPageSessionAttribute(ENTITY_TYPE,(String)menu.getValue());  bFilter=true;  submitCycle=true;  forwardTo();}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static TempLogFile newTempLogFile(final String prefix){  try {    return new TempLogFile(File.createTempFile(prefix,".log"));  } catch (  final IOException e) {    localizedLogger.error(LocalizableMessage.raw("Unable to create temp log file because: " + e.getMessage()),e);    return new TempLogFile();  }}  }
class C{  private void addTable(Hashtable<String,Object> table){  if ((table != null) && !table.isEmpty()) {    getTable().putAll(table);  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AudienceRestrictionType createAudienceRestrictionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AudienceRestrictionTypeImpl();}  }
class C{  private <T>T readChild(HierarchicalStreamReader r,UnmarshallingContext context,Class<T> type,Object parent){  String classAttribute=r.getAttribute(mapper.aliasForAttribute("class"));  if (classAttribute != null) {    type=mapper.realClass(classAttribute);  }  return type.cast(context.convertAnother(parent,type));}  }
class C{  public HashMap(){  this.loadFactor=DEFAULT_LOAD_FACTOR;}  }
class C{  public void cut(){  if (isEditable() && isEnabled()) {    invokeAction("cut",TransferHandler.getCutAction());  }}  }
class C{  public static synchronized CoderResult unmappableForLength(int length) throws IllegalArgumentException {  if (length > 0) {    Integer key=Integer.valueOf(length);synchronized (_unmappableErrors) {      CoderResult r=_unmappableErrors.get(key);      if (r == null) {        r=new CoderResult(TYPE_UNMAPPABLE_CHAR,length);        _unmappableErrors.put(key,r);      }      return r;    }  }  throw new IllegalArgumentException("length <= 0: " + length);}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append(crossFeedResolution);  result.append('x');  result.append(feedResolution);  result.append(" dphi");  return result.toString();}  }
class C{  private void editSharedPreferences(String key,long time){  SharedPreferences sharedPreferences=getSharedPreferences(REFS_NAME,0);  SharedPreferences.Editor editor=sharedPreferences.edit();  editor.putLong(key,time);  editor.commit();}  }
class C{  @Override public boolean supportsPredictiveItemAnimations(){  return false;}  }
class C{  public static Class<?> loadClass(String className) throws ClassNotFoundException {  MBEANSERVER_LOGGER.logp(Level.FINEST,DefaultLoaderRepository.class.getName(),"loadClass",className);  return load(null,className);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  String csName=(String)s.readObject();  byte[] data=(byte[])s.readObject();  int cspace=0;  boolean isKnownPredefinedCS=false;  if (csName != null) {    isKnownPredefinedCS=true;    if (csName.equals("CS_sRGB")) {      cspace=ColorSpace.CS_sRGB;    } else     if (csName.equals("CS_CIEXYZ")) {      cspace=ColorSpace.CS_CIEXYZ;    } else     if (csName.equals("CS_PYCC")) {      cspace=ColorSpace.CS_PYCC;    } else     if (csName.equals("CS_GRAY")) {      cspace=ColorSpace.CS_GRAY;    } else     if (csName.equals("CS_LINEAR_RGB")) {      cspace=ColorSpace.CS_LINEAR_RGB;    } else {      isKnownPredefinedCS=false;    }  }  if (isKnownPredefinedCS) {    resolvedDeserializedProfile=getInstance(cspace);  } else {    resolvedDeserializedProfile=getInstance(data);  }}  }
class C{  static void checkSupportedControls(Connection connection) throws LdapException {  controls=RootDSE.readRootDSE(connection).getSupportedControls();}  }
class C{  public final void put(String key,int value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;    int newValues[]=new int[m_mapSize];    System.arraycopy(m_values,0,newValues,0,m_firstFree + 1);    m_values=newValues;  }  m_map[m_firstFree]=key;  m_values[m_firstFree]=value;  m_firstFree++;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.SubjectQueryAbstractType createSubjectQueryAbstractType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.SubjectQueryAbstractTypeImpl();}  }
class C{  public void paintSpinnerBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public PlaPointFloat nearest_point(PlaPointFloat p_from_point){  double x;  if (p_from_point.v_x <= box_ll.v_x)   x=box_ll.v_x; else   if (p_from_point.v_x >= box_ur.v_x)   x=box_ur.v_x; else   x=p_from_point.v_x;  double y;  if (p_from_point.v_y <= box_ll.v_y)   y=box_ll.v_y; else   if (p_from_point.v_y >= box_ur.v_y)   y=box_ur.v_y; else   y=p_from_point.v_y;  return new PlaPointFloat(x,y);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns02.class,args);}  }
class C{  private Descriptor validDescriptor(final Descriptor in) throws RuntimeOperationsException {  Descriptor clone;  boolean defaulted=(in == null);  if (defaulted) {    clone=new DescriptorSupport();    MODELMBEAN_LOGGER.finer("Null Descriptor, creating new.");  } else {    clone=(Descriptor)in.clone();  }  if (defaulted && clone.getFieldValue("name") == null) {    clone.setField("name",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor name to " + this.getName());  }  if (defaulted && clone.getFieldValue("descriptorType") == null) {    clone.setField("descriptorType","operation");    MODELMBEAN_LOGGER.finer("Defaulting descriptorType to \"operation\"");  }  if (clone.getFieldValue("displayName") == null) {    clone.setField("displayName",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor displayName to " + this.getName());  }  if (clone.getFieldValue("role") == null) {    clone.setField("role","operation");    MODELMBEAN_LOGGER.finer("Defaulting Descriptor role field to \"operation\"");  }  if (!clone.isValid()) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The isValid() method of the Descriptor object itself returned false," + "one or more required fields are invalid. Descriptor:" + clone.toString());  }  if (!getName().equalsIgnoreCase((String)clone.getFieldValue("name"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"name\" field does not match the object described. " + " Expected: " + this.getName() + " , was: "+ clone.getFieldValue("name"));  }  if (!"operation".equalsIgnoreCase((String)clone.getFieldValue("descriptorType"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"descriptorType\" field does not match the object described. " + " Expected: \"operation\" ," + " was: "+ clone.getFieldValue("descriptorType"));  }  final String role=(String)clone.getFieldValue("role");  if (!(role.equalsIgnoreCase("operation") || role.equalsIgnoreCase("setter") || role.equalsIgnoreCase("getter"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"role\" field does not match the object described. " + " Expected: \"operation\", \"setter\", or \"getter\" ," + " was: "+ clone.getFieldValue("role"));  }  final Object targetValue=clone.getFieldValue("targetType");  if (targetValue != null) {    if (!(targetValue instanceof java.lang.String)) {      throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor field \"targetValue\" is invalid class. " + " Expected: java.lang.String, " + " was: "+ targetValue.getClass().getName());    }  }  return clone;}  }
class C{  public boolean isConfigured(){  return AMSetupServlet.isConfigured(baseDir);}  }
class C{  private void readExtendedHeader(ByteBuffer buffer,int size){  int extendedHeaderSize=buffer.getInt();  if (extendedHeaderSize == TAG_EXT_HEADER_DATA_LENGTH) {    byte extFlag=buffer.get();    crcDataFlag=(extFlag & MASK_V23_CRC_DATA_PRESENT) != 0;    if (crcDataFlag) {      logger.warning(ErrorMessage.ID3_TAG_CRC_FLAG_SET_INCORRECTLY.getMsg(getLoggingFilename()));    }    buffer.get();    paddingSize=buffer.getInt();    if (paddingSize > 0) {      logger.config(ErrorMessage.ID3_TAG_PADDING_SIZE.getMsg(getLoggingFilename(),paddingSize));    }    size=size - (paddingSize + TAG_EXT_HEADER_LENGTH);  } else   if (extendedHeaderSize == TAG_EXT_HEADER_DATA_LENGTH + TAG_EXT_HEADER_CRC_LENGTH) {    logger.config(ErrorMessage.ID3_TAG_CRC.getMsg(getLoggingFilename()));    byte extFlag=buffer.get();    crcDataFlag=(extFlag & MASK_V23_CRC_DATA_PRESENT) != 0;    if (!crcDataFlag) {      logger.warning(ErrorMessage.ID3_TAG_CRC_FLAG_SET_INCORRECTLY.getMsg(getLoggingFilename()));    }    buffer.get();    paddingSize=buffer.getInt();    if (paddingSize > 0) {      logger.config(ErrorMessage.ID3_TAG_PADDING_SIZE.getMsg(getLoggingFilename(),paddingSize));    }    size=size - (paddingSize + TAG_EXT_HEADER_LENGTH + TAG_EXT_HEADER_CRC_LENGTH);    crc32=buffer.getInt();    logger.config(ErrorMessage.ID3_TAG_CRC_SIZE.getMsg(getLoggingFilename(),crc32));  } else {    logger.warning(ErrorMessage.ID3_EXTENDED_HEADER_SIZE_INVALID.getMsg(getLoggingFilename(),extendedHeaderSize));    buffer.position(buffer.position() - FIELD_TAG_EXT_SIZE_LENGTH);  }}  }
class C{  public void addResourceEnvRef(ContextResourceEnvRef resource){  if (entries.contains(resource.getName())) {    return;  } else {    if (!checkResourceType(resource)) {      throw new IllegalArgumentException(sm.getString("namingResources.resourceTypeFail",resource.getName(),resource.getType()));    }    entries.add(resource.getName());  }synchronized (resourceEnvRefs) {    resource.setNamingResources(this);    resourceEnvRefs.put(resource.getName(),resource);  }  support.firePropertyChange("resourceEnvRef",null,resource);}  }
class C{  public void testSetScaleRoundHalfEven(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_HALF_EVEN);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  String systemId;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation1");  systemId=notationNode.getSystemId();  assertNull("systemId",systemId);}  }
class C{  public JKNamespace(final String url){  this(url,createPrefix(url));}  }
class C{  public FrameBodyTPOS(byte textEncoding,String text){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,textEncoding);  setObjectValue(DataTypes.OBJ_TEXT,new PartOfSet.PartOfSetValue(text));}  }
class C{  protected byte postDecryption(long position) throws IOException {  byte padding=0;  if (cipherReset) {    resetCipher(position);    padding=getPadding(position);    inBuffer.position(padding);  }  return padding;}  }
class C{  @Override public void onLowMemory(){  delegate.onLowMemory();}  }
class C{  public void add(Component component,Object constraints,int index){  if (!(component instanceof UIResource)) {    Icon icon=constraints instanceof Icon ? (Icon)constraints : null;    String title=constraints instanceof String ? (String)constraints : null;    insertTab(title,icon,component,null,index == -1 ? getTabCount() : index);  } else {    super.add(component,constraints,index);  }}  }
class C{  private Node<E> nextNode(Node<E> p){  for (; ; ) {    Node<E> s=p.next;    if (s == p)     return head.next;    if (s == null || s.item != null)     return s;    p=s;  }}  }
class C{  private void initialSearchFromChangeNumber(final ChangeNumberEntrySender entrySender) throws ChangelogException, DirectoryException {  if (!sendBaseChangelogEntry(entrySender.searchOp)) {    return;  }  final AtomicReference<MultiDomainDBCursor> replicaUpdatesCursor=new AtomicReference<>();  try (DBCursor<ChangeNumberIndexRecord> cnIndexDBCursor=getCNIndexDBCursor(entrySender.lowestChangeNumber)){    final MultiDomainServerState cookie=new MultiDomainServerState();    if (sendChangeNumberEntriesFromCursors(entrySender,cnIndexDBCursor,replicaUpdatesCursor,cookie)) {      entrySender.transitioningToPersistentSearchPhase();      sendChangeNumberEntriesFromCursors(entrySender,cnIndexDBCursor,replicaUpdatesCursor,cookie);    }  }  finally {    entrySender.finalizeInitialSearch();    StaticUtils.close(replicaUpdatesCursor.get());  }}  }
class C{  public SchemaBuilder addToSchemaOverwrite(){  return getSchemaBuilder().addNameForm(new NameForm(this),true);}  }
class C{  static Integer readRuleID(final SubstringReader reader) throws DecodeException {  int length=0;  reader.skipWhitespaces();  reader.mark();  try {    while (reader.read() != ' ') {      length++;    }    if (length == 0) {      throw DecodeException.error(ERR_ATTR_SYNTAX_RULE_ID_NO_VALUE1.get(reader.pos() - 1));    }    reader.reset();    final String ruleID=reader.read(length);    try {      return Integer.valueOf(ruleID);    } catch (    final NumberFormatException e) {      throw DecodeException.error(ERR_ATTR_SYNTAX_RULE_ID_INVALID1.get(ruleID));    }  } catch (  final StringIndexOutOfBoundsException e) {    throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());  }}  }
class C{  public boolean equals(Object p){  if (!(p instanceof URLPermission)) {    return false;  }  URLPermission that=(URLPermission)p;  if (!this.scheme.equals(that.scheme)) {    return false;  }  if (!this.getActions().equals(that.getActions())) {    return false;  }  if (!this.authority.equals(that.authority)) {    return false;  }  if (this.path != null) {    return this.path.equals(that.path);  } else {    return that.path == null;  }}  }
class C{  @Override public void onMapReady(GoogleMap googleMap){  mMap=googleMap;  LatLng sydney=new LatLng(-34,151);  mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));  mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));}  }
class C{  public void runTest() throws Throwable {  Document doc;  ProcessingInstruction pi;  boolean success;  doc=(Document)load("staffNS",false);  pi=doc.createProcessingInstruction("PITarget","PIData");  success=pi.isSupported("-","+");  assertFalse("nodeissupported05",success);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public synchronized StringBuffer append(char[] chars,int start,int length){  append0(chars,start,length);  return this;}  }
class C{  public boolean isReplicated(){  return serverId != -1;}  }
class C{  void add(CTSOperation operation){  OperationMonitor rate;synchronized (operationRate) {    rate=operationRate.get(operation);    if (rate == null) {      rate=operationRateFactory.createOperationRate();      operationRate.put(operation,rate);    }  }  rate.increment();}  }
class C{  public static void clear(){  sigHash.clear();  encHash.clear();}  }
class C{  public void makeImmutable(){  if (isMutable) {    super.makeImmutable();    if ((baseId != null) && (baseId.isMutable())) {      baseId.makeImmutable();    }    if ((nameId != null) && (nameId.isMutable())) {      nameId.makeImmutable();    }    isMutable=false;  }}  }
class C{  private void idRequired(String id) throws ForbiddenException {  if (id == null) {    throw new ForbiddenException("Operation not allowed on entire object set");  }}  }
class C{  public ConnectException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {  HttpServletRequest httpRequest=(HttpServletRequest)request;  HttpServletResponse httpResponse=(HttpServletResponse)response;  try {    if (httpRequest.getRequestURI().endsWith(SETUP_URI)) {      passThrough=true;      filterChain.doFilter(httpRequest,httpResponse);    } else     if (passThrough) {      filterChain.doFilter(httpRequest,httpResponse);    } else     if (!isConfigured) {      String url=httpRequest.getScheme() + "://" + httpRequest.getServerName()+ ":"+ httpRequest.getServerPort()+ httpRequest.getContextPath()+ SETUP_URI;      httpResponse.sendRedirect(url);      passThrough=true;    } else {      filterChain.doFilter(httpRequest,httpResponse);    }  } catch (  Exception ex) {    throw new ServletException("ClientConfiguratorFilter.doFilter",ex);  }}  }
class C{  public void post(Runnable runnable){synchronized (mQueue) {    mQueue.add(runnable);    if (mQueue.size() == 1) {      scheduleNextLocked();    }  }}  }
class C{  public java.lang.String toString(){  return toString(namespaceURI);}  }
class C{  public static boolean isWhiteSpace(String s){  if (null != s) {    int n=s.length();    for (int i=0; i < n; i++) {      if (!isWhiteSpace(s.charAt(i)))       return false;    }  }  return true;}  }
class C{  public void run(){  try {    TimerAlarmClockNotification notif=new TimerAlarmClockNotification(this);    listener.notifyAlarmClock(notif);  } catch (  Exception e) {    TIMER_LOGGER.logp(Level.FINEST,Timer.class.getName(),"run","Got unexpected exception when sending a notification",e);  }}  }
class C{  public ObjectName isRelationMBean(String relationId) throws IllegalArgumentException, RelationNotFoundException {  if (relationId == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"isRelationMBean",relationId);  Object result=getRelation(relationId);  if (result instanceof ObjectName) {    return ((ObjectName)result);  } else {    return null;  }}  }
class C{  private Pair<String,Integer> parseSubordinateTemplate(final int lineNumber,final String line,final Element element,final String elementName,final List<LocalizableMessage> warnings) throws DecodeException {  final int colonPos=line.indexOf(':',SUBORDINATE_TEMPLATE_LABEL.length());  final String templateName;  int numEntries=INFINITE_ENTRIES;  if (colonPos <= SUBORDINATE_TEMPLATE_LABEL.length()) {    templateName=line.substring(SUBORDINATE_TEMPLATE_LABEL.length(),line.length()).trim();  } else {    templateName=line.substring(SUBORDINATE_TEMPLATE_LABEL.length(),colonPos).trim();    try {      numEntries=Integer.parseInt(line.substring(colonPos + 1).trim());      if (numEntries == 0) {        warnings.add(WARN_ENTRY_GENERATOR_SUBORDINATE_ZERO_ENTRIES.get(lineNumber + 1,element.getLabel(),elementName,templateName));      }    } catch (    NumberFormatException nfe) {      throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_SUBORDINATE_CANT_PARSE_NUMENTRIES.get(templateName,lineNumber + 1,element.getLabel(),elementName));    }  }  return Pair.of(templateName,numEntries);}  }
class C{  static ObjectName createObjectName(String domain,Role role) throws MalformedObjectNameException {  ObjectName name=new ObjectName(domain + ":type=Role,rolename=" + ObjectName.quote(role.getRolename())+ ",database="+ role.getUserDatabase().getId());  return name;}  }
class C{  public void handleTblSubConfigButtonAddRequest(RequestInvocationEvent event){  SubConfigModel model=(SubConfigModel)getModel();  Map createable=model.getCreateableSubSchemaNames();  if (!createable.isEmpty()) {    if (createable.size() > 1) {      SubSchemaTypeSelectViewBean vb=(SubSchemaTypeSelectViewBean)getViewBean(SubSchemaTypeSelectViewBean.class);      addViewBeanClassToPageSession();      unlockPageTrail();      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    } else {      String subSchema=(String)createable.keySet().iterator().next();      setPageSessionAttribute(AMServiceProfile.PG_SESSION_SUB_SCHEMA_NAME,subSchema);      SubConfigAddViewBean vb=(SubConfigAddViewBean)getViewBean(SubConfigAddViewBean.class);      addViewBeanClassToPageSession();      unlockPageTrail();      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    }  } else {    forwardTo();  }}  }
class C{  public PdfImageXObject put(PdfName key,PdfObject value){  getPdfObject().put(key,value);  return this;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterInfo);}  }
class C{  @LargeTest public void testCursorWindowFailureWhenTooManyCursorWindowsLeftOpen(){  mDatabase.execSQL("CREATE TABLE test (_id INTEGER PRIMARY KEY, data TEXT);");  mDatabase.execSQL("INSERT INTO test values(1, 'test');");  int N=1024;  ArrayList<Cursor> cursorList=new ArrayList<>();  for (int i=0; i < N; i++) {    try {      Cursor cursor=mDatabase.rawQuery("select * from test",null);      cursor.getCount();      cursorList.add(cursor);    } catch (    CursorWindowAllocationException e) {      break;    }catch (    Exception e) {      fail("unexpected exception: " + e.getMessage());      e.printStackTrace();      break;    }  }  for (  Cursor c : cursorList) {    c.close();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild=null;  Node newChild=null;  String childName;  Node childNode;  int length;  java.util.List actual=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  java.util.List expectedWithoutWhitespace=new java.util.ArrayList();  expectedWithoutWhitespace.add("name");  expectedWithoutWhitespace.add("position");  expectedWithoutWhitespace.add("salary");  expectedWithoutWhitespace.add("gender");  expectedWithoutWhitespace.add("employeeId");  java.util.List expectedWithWhitespace=new java.util.ArrayList();  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("name");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("position");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("salary");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("gender");  expectedWithWhitespace.add("#text");  expectedWithWhitespace.add("employeeId");  expectedWithWhitespace.add("#text");  Node replacedChild;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  if (equals(13,length)) {    newChild=childList.item(1);    oldChild=childList.item(11);    expected=expectedWithWhitespace;  } else {    newChild=childList.item(0);    oldChild=childList.item(5);    expected=expectedWithoutWhitespace;  }  replacedChild=employeeNode.replaceChild(newChild,oldChild);  assertSame("return_value_same",oldChild,replacedChild);  for (int indexN100DE=0; indexN100DE < childList.getLength(); indexN100DE++) {    childNode=(Node)childList.item(indexN100DE);    childName=childNode.getNodeName();    actual.add(childName);  }  assertEquals("childNames",expected,actual);}  }
class C{  public void preProcess(final HttpRequest request,final HttpProcessor processor,final HttpContext context) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (processor == null) {    throw new IllegalArgumentException("HTTP processor may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  processor.process(request,context);}  }
class C{  public SAML2ConfigBuilder keystoreFile(String keystoreFileName){  this.keystoreFileName=keystoreFileName;  return this;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthnStatementType createAuthnStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementTypeImpl();}  }
class C{  public static <T extends Object & Comparable<? super T>>T min(Collection<? extends T> coll){  Iterator<? extends T> i=coll.iterator();  T candidate=i.next();  while (i.hasNext()) {    T next=i.next();    if (next.compareTo(candidate) < 0)     candidate=next;  }  return candidate;}  }
class C{  public ManageNameIDRequest createManageNameIDRequest(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.MANAGE_NAMEID_REQUEST,value);  if (obj == null) {    return new ManageNameIDRequestImpl(value);  } else {    return (ManageNameIDRequest)obj;  }}  }
class C{  @Override public void onDrawFrame(GL10 gl10){  GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);  GLES20.glEnable(GLES20.GL_CULL_FACE);  GLES20.glEnable(GLES20.GL_BLEND);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  long currentTimeMillis=System.currentTimeMillis();  updateWithDelta(currentTimeMillis - lastTimeMillis);  lastTimeMillis=currentTimeMillis;}  }
class C{  public void message(SourceLocator srcLctr,String msg,boolean terminate) throws TransformerException {  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler) {    errHandler.warning(new TransformerException(msg,srcLctr));  } else {    if (terminate)     throw new TransformerException(msg,srcLctr); else     System.out.println(msg);  }}  }
class C{  public FieldDataInvalidException(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Attr districtNode;  String attrName;  Node setNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  newAttribute=doc.createAttribute("district");  attributes=testAddress.getAttributes();  setNode=attributes.setNamedItem(newAttribute);  districtNode=(Attr)attributes.getNamedItem("district");  attrName=districtNode.getNodeName();  assertEquals("namednodemapSetNamedItemAssert","district",attrName);}  }
class C{  public void testCertificateFactory12(){  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  InputStream is1=null;  InputStream is2=new ByteArrayInputStream(new byte[10]);  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCertPath(is1);      fail("generateCertificate must thrown CertificateException or NullPointerException when input stream is null");    } catch (    CertificateException e) {    }catch (    NullPointerException e) {    }    try {      certFs[i].generateCertPath(is2);      fail("generateCertificate must thrown CertificateException when input stream contains invalid datas");    } catch (    CertificateException e) {    }    Iterator<String> it=certFs[i].getCertPathEncodings();    while (it.hasNext()) {      String enc=it.next();      try {        certFs[i].generateCertPath(is1,enc);        fail("generateCertificate must thrown CertificateException or NullPointerException when input stream is null and encodings ".concat(enc));      } catch (      CertificateException e) {      }catch (      NullPointerException e) {      }      try {        certFs[i].generateCertPath(is2,enc);        fail("generateCertificate must thrown CertificateException when input stream contains invalid datas  and encodings ".concat(enc));      } catch (      CertificateException e) {      }    }  }}  }
class C{  public static LameFrame parseLameFrame(ByteBuffer bb){  ByteBuffer lameHeader=bb.slice();  String id=Utils.getString(lameHeader,0,LAME_ID_SIZE,TextEncoding.CHARSET_ISO_8859_1);  lameHeader.rewind();  if (id.equals(LAME_ID)) {    LameFrame lameFrame=new LameFrame(lameHeader);    return lameFrame;  }  return null;}  }
class C{  JapaneseDate(LocalDate isoDate){  if (isoDate.isBefore(MEIJI_6_ISODATE)) {    throw new DateTimeException("JapaneseDate before Meiji 6 is not supported");  }  LocalGregorianCalendar.Date jdate=toPrivateJapaneseDate(isoDate);  this.era=JapaneseEra.toJapaneseEra(jdate.getEra());  this.yearOfEra=jdate.getYear();  this.isoDate=isoDate;}  }
class C{  public void handleTblCharsetAliasButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  setSubmitCycle(true);  CCActionTable table=(CCActionTable)getChild(SMG11NModelImpl.ATTRIBUTE_NAME_CHARSET_ALIAS);  table.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(SMG11NModelImpl.ATTRIBUTE_NAME_CHARSET_ALIAS);  Integer[] selected=tblModel.getSelectedRows();  if ((selected != null) && (selected.length > 0)) {    OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(SMG11NModelImpl.ATTRIBUTE_NAME_CHARSET_ALIAS);    tblValues.removeAll(selected);    setPageSessionAttribute(SMG11NModelImpl.ATTRIBUTE_NAME_CHARSET_ALIAS,tblValues);    populateCharsetAliasTable(tblValues);  }  forwardTo();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrreplacedataoffsetnegative.class,args);}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(rSeqNumber).append(SP).append(cSeqNumber).append(SP).append(method);}  }
class C{  public boolean hasAttributeType(AttributeType attributeType){  for (  AVA ava : avas) {    if (ava.getAttributeType().equals(attributeType)) {      return true;    }  }  return false;}  }
class C{  public boolean isMemoryLocking(){  return memoryLocking;}  }
class C{  public Dimension minimumLayoutSize(Container parent){  GridBagLayoutInfo info=getLayoutInfo(parent,MINSIZE);  return getMinSize(parent,info);}  }
class C{  public void onDirectoryChange(final File directory){}  }
class C{  public static PolicyService sendPLLRequest(URL policyServiceUrl,PolicyRequest preq) throws SendRequestException, PolicyException {  String lbcookie=null;  try {    lbcookie=getLBCookie(preq);  } catch (  Exception e) {    throw new SendRequestException(e);  }  PolicyService policyService=new PolicyService();  policyService.setMethodID(PolicyService.POLICY_REQUEST_ID);  policyService.setPolicyRequest(preq);  String xmlString=policyService.toXMLString();  Request request=new Request(xmlString);  RequestSet requestSet=new RequestSet(PolicyService.POLICY_SERVICE);  requestSet.addRequest(request);  if (debug.messageEnabled()) {    debug.message("ResourceResultCache.sendPLLRequest:" + "sending PLL request to URL=" + policyServiceUrl + ":\nPLL message="+ xmlString);  }  Vector responses=PLLClient.send(policyServiceUrl,lbcookie,requestSet);  Response response=(Response)responses.elementAt(0);  PolicyService ps=PolicyService.parseXML(response.getContent());  if (debug.messageEnabled()) {    debug.message("ResourceResultCache.sendPLLRequest:" + "result=" + ps.toXMLString());  }  return ps;}  }
class C{  public Object clone(){  AMIdentityMembershipCondition theClone=null;  try {    theClone=(AMIdentityMembershipCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.ResourceIDElement createResourceIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.ResourceIDElementImpl();}  }
class C{  public void detach(){  if (m_allowDetach) {    AxesWalker walker=m_firstWalker;    while (null != walker) {      walker.detach();      walker=walker.getNextWalker();    }    m_lastUsedWalker=null;    super.detach();  }}  }
class C{  public void removeSubject(Subject subject){  String subjectName=users.getSubjectName(subject);  if (subjectName != null) {    removeSubject(subjectName);  }}  }
class C{  protected void deregister(String ssoId){  SingleSignOnEntry sso=cache.remove(ssoId);  if (sso == null) {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.deregisterFail",ssoId));    }    return;  }  Set<SingleSignOnSessionKey> ssoKeys=sso.findSessions();  if (ssoKeys.size() == 0) {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.deregisterNone",ssoId));    }  }  for (  SingleSignOnSessionKey ssoKey : ssoKeys) {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.deregister",ssoKey,ssoId));    }    expire(ssoKey);  }}  }
class C{  protected boolean processSocket(long socket,SocketEvent event){  SocketWrapperBase<Long> socketWrapper=connections.get(Long.valueOf(socket));  return processSocket(socketWrapper,event,true);}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  @Override public void write(byte[] b,int off,int len) throws IOException {  while (len > 0) {    int c=Math.min(len,decoderIn.remaining());    decoderIn.put(b,off,c);    processInput(false);    len-=c;    off+=c;  }  if (writeImmediately) {    flushOutput();  }}  }
class C{  public void enableLogging(){  this.needsLogging=true;}  }
class C{  public void drawString(String aString,int x,int y){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing string: \"" + aString+ "\" at: "+ new Point(x,y));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawString(aString,x,y);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawString(aString,x,y);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawString(aString,x,y);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public final String toString(){  return name;}  }
class C{  public int addAci(List<? extends Entry> entries,LinkedList<LocalizableMessage> failedACIMsgs){  lock.writeLock().lock();  try {    int validAcis=0;    for (    Entry entry : entries) {      DN dn=entry.getName();      List<Attribute> attributeList=entry.getOperationalAttribute(AciHandler.aciType);      validAcis+=addAciAttributeList(aciList,dn,configDN,attributeList,failedACIMsgs);    }    return validAcis;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public TextRenderInfo(PdfString str,CanvasGraphicsState gs,Matrix textMatrix,Stack<CanvasTag> canvasTagHierarchy){  this.string=str;  this.textToUserSpaceTransformMatrix=textMatrix.multiply(gs.getCtm());  this.gs=gs;  this.canvasTagHierarchy=Collections.<CanvasTag>unmodifiableList(new ArrayList<>(canvasTagHierarchy));  this.fontMatrix=gs.getFont().getFontMatrix();}  }
class C{  public int available() throws IOException {  ensureOpen();  if (reachEOF) {    return 0;  } else {    return 1;  }}  }
class C{  public Pair<String,String> parse(String entry){  if (entry.length() > 0) {    Matcher m=pattern.matcher(entry);    if (m.matches()) {      String name=m.group(1);      String value=m.group(2);      if (name != null) {        name=name.trim();        if (value == null) {          value="";        } else {          value=value.trim();        }        return Pair.of(name,value);      }    }  }  return null;}  }
class C{  public void testConstructorSignBytesZero3(){  byte aBytes[]={-0,0,+0,0,0,00,000};  int aSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public boolean equals(Object obj){  try {    return equals((FontRenderContext)obj);  } catch (  ClassCastException e) {    return false;  }}  }
class C{  @Override public void close() throws IOException {  try {    out.close();  }  finally {    lockFile.delete();  }}  }
class C{  protected JButton createDecreaseButton(int orientation){  decreaseButton=new MetalScrollButton(orientation,scrollBarWidth,isFreeStanding);  return decreaseButton;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size);  int entriesToBeWritten=size;  for (int i=0; entriesToBeWritten > 0; i++) {    if (null != vals[i]) {      s.writeObject(keyUniverse[i]);      s.writeObject(unmaskNull(vals[i]));      entriesToBeWritten--;    }  }}  }
class C{  private void addEntry(String... ldifLines) throws Exception {  Entry entry=TestCaseUtils.makeEntry(ldifLines);  debugInfo("AddEntry " + entry.getName());  AddOperation addOp=connection.processAdd(entry);  waitOpResult(addOp,ResultCode.SUCCESS);  assertNotNull(getEntry(entry.getName(),1000,true));}  }
class C{  public Leaves(final Material type,TreeSpecies species){  this(type,species,DEFAULT_DECAYABLE);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  String xmlStr=null;  if ((statusDetailList != null) && (!statusDetailList.isEmpty())) {    StringBuffer xmlString=new StringBuffer(500);    xmlString.append(SAML2Constants.START_TAG);    if (includeNSPrefix) {      xmlString.append(SAML2Constants.PROTOCOL_PREFIX);    }    xmlString.append(SAML2Constants.STATUS_DETAIL);    if (declareNS) {      xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);    }    xmlString.append(SAML2Constants.END_TAG);    Iterator sdIterator=statusDetailList.iterator();    while (sdIterator.hasNext()) {      String sdString=(String)sdIterator.next();      xmlString.append(SAML2Constants.NEWLINE).append(sdString);    }    xmlString.append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.STATUS_DETAIL).append(SAML2Constants.END_TAG);    xmlStr=xmlString.toString();  }  return xmlStr;}  }
class C{  protected void saveRequest(Request request,Session session) throws IOException {  SavedRequest saved=new SavedRequest();  Cookie cookies[]=request.getCookies();  if (cookies != null) {    for (int i=0; i < cookies.length; i++) {      saved.addCookie(cookies[i]);    }  }  Enumeration<String> names=request.getHeaderNames();  while (names.hasMoreElements()) {    String name=names.nextElement();    Enumeration<String> values=request.getHeaders(name);    while (values.hasMoreElements()) {      String value=values.nextElement();      saved.addHeader(name,value);    }  }  Enumeration<Locale> locales=request.getLocales();  while (locales.hasMoreElements()) {    Locale locale=locales.nextElement();    saved.addLocale(locale);  }  request.getResponse().sendAcknowledgement();  ByteChunk body=new ByteChunk();  body.setLimit(request.getConnector().getMaxSavePostSize());  byte[] buffer=new byte[4096];  int bytesRead;  InputStream is=request.getInputStream();  while ((bytesRead=is.read(buffer)) >= 0) {    body.append(buffer,0,bytesRead);  }  if (body.getLength() > 0) {    saved.setContentType(request.getContentType());    saved.setBody(body);  }  saved.setMethod(request.getMethod());  saved.setQueryString(request.getQueryString());  saved.setRequestURI(request.getRequestURI());  saved.setDecodedRequestURI(request.getDecodedRequestURI());  session.setNote(Constants.FORM_REQUEST_NOTE,saved);}  }
class C{  public MitM_Dialog(java.awt.Frame parent,boolean modal,ProtocolMessage pm,String connectionEnd){  super(parent,modal);  this.pm=pm;  this.connectionEnd=connectionEnd;  title=pm.getClass().toString();  pmBytes=pm.getCompleteResultingMessage().getValue();  origMessage=ArrayConverter.bytesToHexString(pmBytes);  messageAsString=pm.toString();  initComponents();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretDynamicPlaintextElement createSharedSecretDynamicPlaintextElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretDynamicPlaintextElementImpl();}  }
class C{  public double length_approx(){  return length_approx(0,plaline_len(-2));}  }
class C{  protected void checkLogFileStatus(boolean isCreated,String logName){  String fullPath=debugDirectory + File.separator + logName;  if (isCreated != isFileExist(logName)) {    failAndPrintFolderStatusReport("Log '" + fullPath + "' exist != "+ isCreated+ " !\n");  }}  }
class C{  private void testEqualsIgnoreCase(Locale locale){  Locale defaultLocale=Locale.getDefault();  Locale.setDefault(locale);  try {    for (    String a : LATIN_I_VARIANTS) {      for (      String b : LATIN_I_VARIANTS) {        if (!a.equalsIgnoreCase(b)) {          fail("Expected " + a + " to equal "+ b+ " in "+ locale);        }      }    }  }  finally {    Locale.setDefault(defaultLocale);  }}  }
class C{  public void mouseEntered(MouseEvent e){  hasMouseOver=true;  repaint();}  }
class C{  public PropertyXMLBuilder(String serviceName,AMModel model,Set attributeSchemas,SchemaType schemaType) throws SMSException, SSOException {  this.model=model;  this.serviceName=serviceName;  svcSchemaManager=new ServiceSchemaManager(serviceName,model.getUserSSOToken());  if (schemaType != null) {    if (loadSectionOrder()) {      schemaTypes=new HashSet<SchemaType>();      schemaTypes.add(schemaType);      getSectionsForType();    }  }  getServiceResourceBundle();  if (serviceBundle != null) {    mapTypeToAttributeSchema=new HashMap(attributeSchemas.size() * 2);    mapTypeToAttributeSchema.put(NULL_TYPE,attributeSchemas);  }}  }
class C{  @Override public ConnectionEntryWriter writeComment(final CharSequence comment){  Reject.ifNull(comment);  return this;}  }
class C{  public void paintPasswordFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private Set actionsInSet(String actions){  if (actionSet == null) {    actionSet=Collections.synchronizedSet(new HashSet());  } else {    return actionSet;  }  if (actions != null) {    StringTokenizer st=new StringTokenizer(actions,",");    while (st.hasMoreTokens()) {      String action=(String)st.nextToken();      actionSet.add(action);    }  }  return actionSet;}  }
class C{  public static void inflateDialog(LinearLayout layout){  WindowManager wm=(WindowManager)layout.getContext().getSystemService(Context.WINDOW_SERVICE);  Display display=wm.getDefaultDisplay();  layout.setMinimumWidth(display.getWidth() - 30);  layout.setMinimumHeight(display.getHeight() - 40);}  }
class C{  public AgeFileFilter(File cutoffReference,boolean acceptOlder){  this(cutoffReference.lastModified(),acceptOlder);}  }
class C{  public boolean isExclusive(){  return exclusive;}  }
class C{  public static void insertStationToDb(Context context,String stationName,int stationFreq,int stationType){  Log.d(TAG,"FmRadioStation.insertStationToDb start");  final int size=3;  ContentValues values=new ContentValues(size);  values.put(Station.COLUMN_STATION_NAME,stationName);  values.put(Station.COLUMN_STATION_FREQ,stationFreq);  values.put(Station.COLUMN_STATION_TYPE,stationType);  context.getContentResolver().insert(Station.CONTENT_URI,values);  Log.d(TAG,"FmRadioStation.insertStationToDb end");}  }
class C{  public SQLTransientException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public static void configureSocket(Socket s) throws Exception {  s.setSoTimeout(60 * 1000);}  }
class C{  final boolean indexesDeletedNode(){  return node.value == null;}  }
class C{  public MaterialBarcodeScannerBuilder withEnableAutoFocus(boolean enabled){  mAutoFocusEnabled=enabled;  return this;}  }
class C{  public boolean beginTfGroupFilterDisplay(ChildDisplayEvent event){  return !is2dot2Agent() && !isAgentAuthenticator();}  }
class C{  public synchronized void log(String message){  if (DO_LOG && (out != null)) {    out.println("[" + this + "]: "+ message);  }}  }
class C{  private StringBuffer processString(String field){  if ((field == null) || (field.length() == 0)) {    return new StringBuffer(LogConstants.NOTAVAIL);  }  StringBuffer sbuffer=new StringBuffer();  int len=field.length();  boolean hasUniqueChar=false;  for (int i=0; i < len; i++) {    char currentCharacter=field.charAt(i);    if (currentCharacter == '"') {      sbuffer.append("\"\"");      hasUniqueChar=true;    }    if (currentCharacter == '\r') {      sbuffer.append("\\\\r");      hasUniqueChar=true;    }    if (currentCharacter == '\n') {      sbuffer.append("\\\\n");      hasUniqueChar=true;    }    if (!hasUniqueChar) {      sbuffer.append(currentCharacter);    }    hasUniqueChar=false;  }  return sbuffer;}  }
class C{  public boolean encryptData(){  return encryptData;}  }
class C{  public int indexOf(GenericObject gobj){  return hlist.indexOf(gobj);}  }
class C{  public Point add(Point p,Point q,boolean checkInfinity) throws DivisionException {  if (checkInfinity) {    if (p == null || p.isInfinity()) {      return q;    }    if (q == null || q.isInfinity()) {      return p;    }    if (p.getX().equals(q.getX())) {      if (p.getY().equals(q.getY())) {        return dbl(p,true);      } else {        return new Point(true);      }    }  }  return add(p,q);}  }
class C{  public KeyImpl(KerberosPrincipal principal,char[] password,String algorithm){  try {    PrincipalName princ=new PrincipalName(principal.getName());    EncryptionKey key=new EncryptionKey(password,princ.getSalt(),algorithm);    this.keyBytes=key.getBytes();    this.keyType=key.getEType();  } catch (  KrbException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  public boolean containsAttributes(AttributeSet attrs){  boolean result=true;  Enumeration names=attrs.getAttributeNames();  while (result && names.hasMoreElements()) {    Object name=names.nextElement();    result=attrs.getAttribute(name).equals(getAttribute(name));  }  return result;}  }
class C{  public PluginDescriptionFile(final String pluginName,final String pluginVersion,final String mainClass){  name=pluginName.replace(' ','_');  version=pluginVersion;  main=mainClass;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.IPSecElement createIPSecElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPSecElementImpl();}  }
class C{  private void initializeManagers(){  stream(D.getAll(MirrorAppScope.class,MirrorManager.class,null)).filter(null).forEach((Action1<MirrorManager>)null);  webServerRefresh();  mManagersInitialized=true;  tryToStart();}  }
class C{  private String hexAV() throws IOException {  if (pos + 4 >= chars.length) {    throw new IOException("Invalid distinguished name string");  }  beg=pos;  pos++;  while (true) {    if (pos == chars.length || chars[pos] == '+' || chars[pos] == ',' || chars[pos] == ';') {      end=pos;      break;    }    if (chars[pos] == ' ') {      end=pos;      pos++;      for (; pos < chars.length && chars[pos] == ' '; pos++) {      }      break;    } else     if (chars[pos] >= 'A' && chars[pos] <= 'F') {      chars[pos]+=32;    }    pos++;  }  int hexLen=end - beg;  if (hexLen < 5 || (hexLen & 1) == 0) {    throw new IOException("Invalid distinguished name string");  }  encoded=new byte[hexLen / 2];  for (int i=0, p=beg + 1; i < encoded.length; p+=2, i++) {    encoded[i]=(byte)getByte(p);  }  return new String(chars,beg,hexLen);}  }
class C{  protected void startDocumentInternal() throws org.xml.sax.SAXException {  super.startDocumentInternal();  m_needToCallStartDocument=false;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  GreenNewsDao.createTable(db,ifNotExists);  GreenStrategyDao.createTable(db,ifNotExists);  GreenUpdateDao.createTable(db,ifNotExists);  GreenVideoDao.createTable(db,ifNotExists);  GreenWatchedVideoDao.createTable(db,ifNotExists);}  }
class C{  protected AbstractDecorator(final String name){  this.name=name;}  }
class C{  public void notationDecl(String name,String publicId,String systemId){  getCurrentProcessor().notationDecl(this,name,publicId,systemId);}  }
class C{  public void checkout(String userId,Handler<AsyncResult<CheckoutResult>> handler){  delegate.checkout(userId,handler);}  }
class C{  public String toString(){  StringBuffer str=new StringBuffer("Address Type: " + addrType + "\n");  str.append("AddressContents: ");  for (int i=0; i < buf.length && i < 32; i++) {    str.append(Integer.toHexString(buf[i]) + " ");  }  if (buf.length >= 32)   str.append(" ...\n");  return (str.toString());}  }
class C{  @Override public Class<?> loadClass(String name) throws ClassNotFoundException {  return (loadClass(name,false));}  }
class C{  private void readFractionalConfig(ReplicationDomainCfg configuration,boolean allowReconnection){  FractionalConfig newFractionalConfig;  try {    newFractionalConfig=FractionalConfig.toFractionalConfig(configuration);  } catch (  ConfigException e) {    logger.info(NOTE_ERR_FRACTIONAL,getBaseDN(),stackTraceToSingleLineString(e));    return;  }  boolean needReconnection;  try {    needReconnection=!FractionalConfig.isFractionalConfigEquivalent(fractionalConfig,newFractionalConfig);  } catch (  ConfigException e) {    logger.info(NOTE_ERR_FRACTIONAL,getBaseDN(),stackTraceToSingleLineString(e));    return;  }  final boolean needRestart=needReconnection && allowReconnection;  if (needRestart) {    disableService();  }  int newFractionalMode=newFractionalConfig.fractionalConfigToInt();  fractionalConfig.setFractional(newFractionalMode != FractionalConfig.NOT_FRACTIONAL);  if (fractionalConfig.isFractional()) {    fractionalConfig.setFractionalExclusive(newFractionalMode == FractionalConfig.EXCLUSIVE_FRACTIONAL);    fractionalConfig.setFractionalSpecificClassesAttributes(newFractionalConfig.getFractionalSpecificClassesAttributes());    fractionalConfig.setFractionalAllClassesAttributes(newFractionalConfig.fractionalAllClassesAttributes);  } else {    fractionalConfig.setFractionalExclusive(true);    fractionalConfig.setFractionalSpecificClassesAttributes(new HashMap<String,Set<String>>());    fractionalConfig.setFractionalAllClassesAttributes(new HashSet<String>());  }  if (needRestart) {    enableService();  }}  }
class C{  public NotOwnerException(){}  }
class C{  private boolean write_rules_file(String p_design_name,interactive.IteraBoard p_board_handling){  String rules_file_name=p_design_name + RULES_FILE_EXTENSION;  File rules_file=new File(get_parent(),rules_file_name);  stat.userPrintln("board write rule to " + rules_file);  try {    OutputStream output_stream=new FileOutputStream(rules_file);    RulesFile.write(p_board_handling,output_stream,p_design_name);  } catch (  java.io.IOException e) {    System.out.println("unable to create rules file");    return false;  }  return true;}  }
class C{  private void showAlert(String message){  AlertDialog.Builder builder=new AlertDialog.Builder(this);  builder.setMessage(message);  builder.show();}  }
class C{  public void inserts(String extFile,String origFileName) throws IOException {  String content=getMatched(extFile);  if ((content != null) && (content.length() > 0)) {    String orig=getFileContentInserted(origFileName,content);    writeToFile(origFileName,orig);  }}  }
class C{  private static Class<?> forName(String name) throws ReflectException {  try {    return Class.forName(name);  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  public Table addCell(Cell cell){  while (true) {    if (currentColumn >= columnWidths.length) {      startNewRow();    }    if (rows.get(currentRow - rowWindowStart)[currentColumn] != null) {      currentColumn++;    } else {      break;    }  }  childElements.add(cell);  cell.updateCellIndexes(currentRow,currentColumn,columnWidths.length);  while (currentRow - rowWindowStart + cell.getRowspan() > rows.size()) {    rows.add(new Cell[columnWidths.length]);  }  for (int i=currentRow; i < currentRow + cell.getRowspan(); i++) {    Cell[] row=rows.get(i - rowWindowStart);    for (int j=currentColumn; j < currentColumn + cell.getColspan(); j++) {      if (row[j] == null) {        row[j]=cell;      }    }  }  currentColumn+=cell.getColspan();  return this;}  }
class C{  public void testConstrDouble(){  double a=732546982374982347892379283571094797.287346782359284756;  int aScale=0;  BigInteger bA=new BigInteger("732546982374982285073458350476230656");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public void notifyObservers(Object arg){  Object[] arrLocal;synchronized (this) {    if (!changed)     return;    arrLocal=obs.toArray();    clearChanged();  }  for (int i=arrLocal.length - 1; i >= 0; i--)   ((Observer)arrLocal[i]).update(this,arg);}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public boolean isDefined(Object key){  Object[] a=attributes;  int n=a.length;  for (int i=0; i < n; i+=2) {    if (key.equals(a[i])) {      return true;    }  }  return false;}  }
class C{  protected void AndExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  EqualityExpr(-1);  if ((null != m_token) && tokenIs("and")) {    nextToken();    insertOp(opPos,2,OpCodes.OP_AND);    AndExpr();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);  }}  }
class C{  protected TableColumnModel createDefaultColumnModel(){  return new DefaultTableColumnModel();}  }
class C{  protected void storeInProfilesMap(Client client){  Set parentSet=client.getProperties(PARENT_ID);  String clientType=client.getClientType();  Map m=getStylesProfileMap(clientType,parentSet);  if (m != null) {    m.put(clientType,client);  }  return;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfNumber copyTo(PdfDocument document){  return (PdfNumber)super.copyTo(document,true);}  }
class C{  public void removeChildPeopleContainer(PeopleContainer pc) throws AccessRightsException, EntryNotFoundException, UMSException {  super.removeChild(pc);}  }
class C{  public static AccessToken createFromNativeLinkingIntent(Intent intent){  Validate.notNull(intent,"intent");  if (intent.getExtras() == null) {    return null;  }  return createFromBundle(null,intent.getExtras(),AccessTokenSource.FACEBOOK_APPLICATION_WEB,new Date());}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.lang.String id) throws XMLSignatureException {  return signXML(doc,certAlias,algorithm,DEF_ID_ATTRIBUTE,id,false,null);}  }
class C{  public static void registerSupportedControl(String controlOID){synchronized (directoryServer.supportedControls) {    directoryServer.supportedControls.add(controlOID);  }}  }
class C{  public static String encryptPassword(String text){  return JKEncDec.encode(text);}  }
class C{  public DefaultPooledObjectInfo(final PooledObject<?> pooledObject){  this.pooledObject=pooledObject;}  }
class C{  public org.omg.CORBA.Object _set_policy_override(org.omg.CORBA.Policy[] policies,org.omg.CORBA.SetOverrideType set_add){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  public static FSAuthnRequest parseXML(String xml) throws FSMsgException {  Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);  if (doc == null) {    FSUtils.debug.error("FSAuthnRequest.parseXML:Error " + "while parsing input xml string");    throw new FSMsgException("parseError",null);  }  Element root=doc.getDocumentElement();  return new FSAuthnRequest(root);}  }
class C{  public Cursor fetch(Long attributeID){  if (attributeID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_EVENTATTRIBUTEID + "=" + attributeID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  private ByteLookupTable createByteLut(float scale[],float off[],int nBands,int nElems){  byte[][] lutData=new byte[scale.length][nElems];  for (int band=0; band < scale.length; band++) {    float bandScale=scale[band];    float bandOff=off[band];    byte[] bandLutData=lutData[band];    for (int i=0; i < nElems; i++) {      int val=(int)(i * bandScale + bandOff);      if ((val & 0xffffff00) != 0) {        if (val < 0) {          val=0;        } else {          val=255;        }      }      bandLutData[i]=(byte)val;    }  }  return new ByteLookupTable(0,lutData);}  }
class C{  private StartSessionMsg waitAndProcessStartSessionFromRemoteDS() throws Exception {  ReplicationMsg msg=session.receive();  if (msg instanceof StopMsg) {    return null;  } else   if (!(msg instanceof StartSessionMsg)) {    LocalizableMessage message=LocalizableMessage.raw("Protocol error: StartSessionMsg required." + msg + " received.");    abortStart(message);    return null;  }  StartSessionMsg startSessionMsg=(StartSessionMsg)msg;  this.status=startSessionMsg.getStatus();  if (!isValidInitialStatus(this.status)) {    throw new DirectoryException(ResultCode.OTHER,ERR_RS_INVALID_INIT_STATUS.get(this.status,getBaseDN(),serverId));  }  this.refUrls=startSessionMsg.getReferralsURLs();  this.assuredFlag=startSessionMsg.isAssured();  this.assuredMode=startSessionMsg.getAssuredMode();  this.safeDataLevel=startSessionMsg.getSafeDataLevel();  this.eclIncludes=startSessionMsg.getEclIncludes();  this.eclIncludesForDeletes=startSessionMsg.getEclIncludesForDeletes();  generationId=tmpGenerationId;  if (localGenerationId > 0) {    if (generationId != localGenerationId) {      logger.warn(WARN_BAD_GENERATION_ID_FROM_DS,serverId,session.getReadableRemoteAddress(),generationId,getBaseDN(),getReplicationServerId(),localGenerationId);    }  } else {    if (generationId > 0 && !getServerState().isEmpty()) {      logger.warn(WARN_BAD_GENERATION_ID_FROM_DS,serverId,session.getReadableRemoteAddress(),generationId,getBaseDN(),getReplicationServerId(),localGenerationId);    } else {      oldGenerationId=replicationServerDomain.changeGenerationId(generationId);    }  }  return startSessionMsg;}  }
class C{  public boolean checkTable(Identifier id){  boolean dbExists;  dbExists=tables.exists(id);  return dbExists;}  }
class C{  public Class<?> loadTagFilePrototype() throws JasperException {  ctxt.setPrototypeMode(true);  try {    return loadTagFile();  }  finally {    ctxt.setPrototypeMode(false);  }}  }
class C{  static void drawDark3DBorder(Graphics g,int x,int y,int w,int h){  g.translate(x,y);  drawFlush3DBorder(g,0,0,w,h);  g.setColor(MetalLookAndFeel.getControl());  g.drawLine(1,1,1,h - 2);  g.drawLine(1,1,w - 2,1);  g.setColor(MetalLookAndFeel.getControlShadow());  g.drawLine(1,h - 2,1,h - 2);  g.drawLine(w - 2,1,w - 2,1);  g.translate(-x,-y);}  }
class C{  @Override public Class<?> findClass(String name) throws ClassNotFoundException {  if (log.isDebugEnabled())   log.debug("    findClass(" + name + ")");  checkStateForClassLoading(name);  if (securityManager != null) {    int i=name.lastIndexOf('.');    if (i >= 0) {      try {        if (log.isTraceEnabled())         log.trace("      securityManager.checkPackageDefinition");        securityManager.checkPackageDefinition(name.substring(0,i));      } catch (      Exception se) {        if (log.isTraceEnabled())         log.trace("      -->Exception-->ClassNotFoundException",se);        throw new ClassNotFoundException(name,se);      }    }  }  Class<?> clazz=null;  try {    if (log.isTraceEnabled())     log.trace("      findClassInternal(" + name + ")");    try {      if (securityManager != null) {        PrivilegedAction<Class<?>> dp=new PrivilegedFindClassByName(name);        clazz=AccessController.doPrivileged(dp);      } else {        clazz=findClassInternal(name);      }    } catch (    AccessControlException ace) {      log.warn("WebappClassLoader.findClassInternal(" + name + ") security exception: "+ ace.getMessage(),ace);      throw new ClassNotFoundException(name,ace);    }catch (    RuntimeException e) {      if (log.isTraceEnabled())       log.trace("      -->RuntimeException Rethrown",e);      throw e;    }    if ((clazz == null) && hasExternalRepositories) {      try {        clazz=super.findClass(name);      } catch (      AccessControlException ace) {        log.warn("WebappClassLoader.findClassInternal(" + name + ") security exception: "+ ace.getMessage(),ace);        throw new ClassNotFoundException(name,ace);      }catch (      RuntimeException e) {        if (log.isTraceEnabled())         log.trace("      -->RuntimeException Rethrown",e);        throw e;      }    }    if (clazz == null) {      if (log.isDebugEnabled())       log.debug("    --> Returning ClassNotFoundException");      throw new ClassNotFoundException(name);    }  } catch (  ClassNotFoundException e) {    if (log.isTraceEnabled())     log.trace("    --> Passing on ClassNotFoundException");    throw e;  }  if (log.isTraceEnabled())   log.debug("      Returning class " + clazz);  if (log.isTraceEnabled()) {    ClassLoader cl;    if (Globals.IS_SECURITY_ENABLED) {      cl=AccessController.doPrivileged(new PrivilegedGetClassLoader(clazz));    } else {      cl=clazz.getClassLoader();    }    log.debug("      Loaded by " + cl.toString());  }  return (clazz);}  }
class C{  private void checkConnection(int dsId,int rsId,String msg) throws Exception {  LDAPReplicationDomain rd=null;switch (dsId) {case DS1_ID:    rd=rd1;  break;case DS2_ID:rd=rd2;break;default :fail("Unknown replication domain server id.");}int rsPort=-1;switch (rsId) {case RS1_ID:rsPort=rs1Port;break;case RS2_ID:rsPort=rs2Port;break;default :fail("Unknown replication server id.");}waitConnected(dsId,rsId,rsPort,rd,msg);}  }
class C{  private void sendNotification(String to,String subject,String message,String realm,String confirmationLink) throws ResourceException {  ServiceConfig mailscm=getMailServiceConfig(realm);  Map<String,Set<String>> mailattrs=mailscm.getAttributes();  String attr=mailattrs.get(MAIL_IMPL_CLASS).iterator().next();  MailServer mailServer;  try {    mailServer=mailServerLoader.load(attr,realm);  } catch (  IllegalStateException e) {    debug.error("{} :: Failed to load mail server implementation: {}",SEND_NOTIF_TAG,attr,e);    throw new InternalServerErrorException("Failed to load mail server implementation: " + attr,e);  }  try {    if (StringUtils.isBlank(subject)) {      subject=mailattrs.get(MAIL_SUBJECT).iterator().next();    }  } catch (  Exception e) {    if (debug.warningEnabled()) {      debug.warning("{} no subject found ",SEND_NOTIF_TAG,e);    }    subject="";  }  try {    if (StringUtils.isBlank(message)) {      message=mailattrs.get(MAIL_MESSAGE).iterator().next();    }    message=message + System.getProperty("line.separator") + confirmationLink;  } catch (  Exception e) {    if (debug.warningEnabled()) {      debug.warning("{} no message found",SEND_NOTIF_TAG,e);    }    message=confirmationLink;  }  try {    mailServer.sendEmail(to,subject,message);  } catch (  MessagingException e) {    if (debug.errorEnabled()) {      debug.error("{} Failed to send mail",SEND_NOTIF_TAG,e);    }    throw new InternalServerErrorException("Failed to send mail",e);  }}  }
class C{  @Override public final boolean equals(Object p_ob){  if (!(p_ob instanceof PlaPointRational))   return false;  PlaPointRational other=(PlaPointRational)p_ob;  BigInteger det=MathAux.determinant(rp_x,other.rp_x,rp_z,other.rp_z);  if (det.signum() != 0)   return false;  det=MathAux.determinant(rp_y,other.rp_y,rp_z,other.rp_z);  return (det.signum() == 0);}  }
class C{  public Scanner useDelimiter(Pattern pattern){  delimPattern=pattern;  return this;}  }
class C{  public static String toRomanLowerCase(int number){  return convert(number);}  }
class C{  public boolean isFlavorJavaFileListType(){  if (mimeType == null || representationClass == null)   return false;  return java.util.List.class.isAssignableFrom(representationClass) && mimeType.match(javaFileListFlavor.mimeType);}  }
class C{  public boolean checkFolderACL(final String resourceType,final String folder,final String currentUserRole,final int acl){  return ((checkACLForRole(resourceType,folder,currentUserRole) & acl) == acl);}  }
class C{  public void removePluginConfig(String name,String pluginSchemaName,String interfaceName,String orgName) throws SMSException, SSOException {  PluginConfig pci=getPluginConfig(name,pluginSchemaName,interfaceName,orgName);  if (pci != null) {    pci.delete();  }}  }
class C{  @Override protected synchronized void afterRead(int n){  if (n != -1) {    this.count+=n;  }}  }
class C{  @SuppressWarnings("unchecked") public Enumeration<Permission> elements(){synchronized (this) {    return (Enumeration)Collections.enumeration(perms.values());  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  SerializationHandler rhandler=transformer.getSerializationHandler();  XPathContext xctxt=transformer.getXPathContext();  int sourceNode=xctxt.getCurrentNode();  String nodeName=m_name_avt == null ? null : m_name_avt.evaluate(xctxt,sourceNode,this);  String prefix=null;  String nodeNamespace="";  if ((nodeName != null) && (!m_name_avt.isSimple()) && (!XML11Char.isXML11ValidQName(nodeName))) {    transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_NAME,nodeName});    nodeName=null;  } else   if (nodeName != null) {    prefix=QName.getPrefixPart(nodeName);    if (null != m_namespace_avt) {      nodeNamespace=m_namespace_avt.evaluate(xctxt,sourceNode,this);      if (null == nodeNamespace || (prefix != null && prefix.length() > 0 && nodeNamespace.length() == 0))       transformer.getMsgMgr().error(this,XSLTErrorResources.ER_NULL_URI_NAMESPACE); else {        prefix=resolvePrefix(rhandler,prefix,nodeNamespace);        if (null == prefix)         prefix="";        if (prefix.length() > 0)         nodeName=(prefix + ":" + QName.getLocalPart(nodeName)); else         nodeName=QName.getLocalPart(nodeName);      }    } else {      try {        nodeNamespace=getNamespaceForPrefix(prefix);        if ((null == nodeNamespace) && (prefix.length() == 0))         nodeNamespace=""; else         if (null == nodeNamespace) {          transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_COULD_NOT_RESOLVE_PREFIX,new Object[]{prefix});          nodeName=null;        }      } catch (      Exception ex) {        transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_COULD_NOT_RESOLVE_PREFIX,new Object[]{prefix});        nodeName=null;      }    }  }  constructNode(nodeName,prefix,nodeNamespace,transformer);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  Set attributeNames=new HashSet();  attributeNames.addAll(rc.getOption(IArgument.ATTRIBUTE_NAMES));  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName,attributeNames.toString()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_SCHEMA_ATTR_DEFAULTS",params);    ss.removeAttributeDefaults(attributeNames);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_SCHEMA_ATTR_DEFAULTS",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("schema-remove-attribute-defaults-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeNames.toString(),e.getMessage()};    debugError("RemoveAttributeDefaults.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SCHEMA_ATTR_DEFAULTS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeNames.toString(),e.getMessage()};    debugError("RemoveAttributeDefaults.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SCHEMA_ATTR_DEFAULTS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void testSimpleLiterals() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  SmileGenerator gen=smileGenerator(out,false);  assertEquals(0,gen.getOutputBuffered());  gen.writeBoolean(true);  assertEquals(1,gen.getOutputBuffered());  gen.close();  assertEquals(0,gen.getOutputBuffered());  _verifyBytes(out.toByteArray(),SmileConstants.TOKEN_LITERAL_TRUE);  out=new ByteArrayOutputStream();  gen=smileGenerator(out,false);  gen.writeBoolean(false);  gen.close();  _verifyBytes(out.toByteArray(),SmileConstants.TOKEN_LITERAL_FALSE);  out=new ByteArrayOutputStream();  gen=smileGenerator(out,false);  gen.writeNull();  gen.close();  _verifyBytes(out.toByteArray(),SmileConstants.TOKEN_LITERAL_NULL);  out=new ByteArrayOutputStream();  gen=smileGenerator(out,true);  gen.writeBoolean(true);  gen.close();  int b4=HEADER_BYTE_4 | SmileConstants.HEADER_BIT_HAS_SHARED_NAMES;  _verifyBytes(out.toByteArray(),HEADER_BYTE_1,HEADER_BYTE_2,HEADER_BYTE_3,(byte)b4,SmileConstants.TOKEN_LITERAL_TRUE);  out=new ByteArrayOutputStream();  gen=smileGenerator(out,true);  gen.enable(SmileGenerator.Feature.WRITE_END_MARKER);  gen.writeNull();  assertEquals(5,gen.getOutputBuffered());  gen.close();  _verifyBytes(out.toByteArray(),HEADER_BYTE_1,HEADER_BYTE_2,HEADER_BYTE_3,(byte)b4,TOKEN_LITERAL_NULL,BYTE_MARKER_END_OF_CONTENT);}  }
class C{  protected void createThreads(int threadsToCreate){  if (threadsToCreate > poolSize) {    threadsToCreate=poolSize;  }  for (int i=currentThreadCount; i < threadsToCreate; i++) {    threads[i - busyThreadCount]=new WorkerThread(poolName,this);    threads[i - busyThreadCount].setDaemon(daemon);    threads[i - busyThreadCount].start();  }  currentThreadCount=threadsToCreate;}  }
class C{  @NonNull public final Agera subscribeOn(@NonNull Looper looper){  return new AgeraSubscribeOnLooper(this,looper);}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String providerAlias=request.getParameter(IFSConstants.META_ALIAS);  if (providerAlias == null || providerAlias.length() < 1) {    FSUtils.debug.error("Unable to retrieve alias, Hosted Provider. " + "Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("aliasNotFound"));    return;  }  if (metaManager == null) {    FSUtils.debug.error("Cannot retrieve hosted descriptor. " + "Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  ProviderDescriptorType hostedProviderDesc=null;  BaseConfigType hostedConfig=null;  String hostedRole=null;  String hostedEntityId=null;  String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);  try {    hostedRole=metaManager.getProviderRoleByMetaAlias(providerAlias);    hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);    if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP)) {      hostedProviderDesc=metaManager.getSPDescriptor(realm,hostedEntityId);      hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);    } else     if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {      hostedProviderDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);      hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);    }    if (hostedProviderDesc == null) {      throw new IDFFMetaException((String)null);    }  } catch (  IDFFMetaException eam) {    FSUtils.debug.error("Unable to find Hosted Provider. not process request",eam);    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  boolean isIDP=false;  if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {    isIDP=true;  }  if (FSUtils.needSetLBCookieAndRedirect(request,response,isIDP)) {    return;  }  this.request=request;  setRegistrationURL(hostedConfig,providerAlias);  doRegistrationInitiation(request,response,hostedProviderDesc,hostedConfig,hostedEntityId,hostedRole,providerAlias);}  }
class C{  void processPLLNotifications(Vector notifications){  for (int i=0; i < notifications.size(); i++) {    Notification notification=(Notification)notifications.elementAt(i);    if (debug.messageEnabled()) {      debug.message("PolicyNotificationHandler." + "processPLLNotifications():" + "got notification: "+ notification.getContent());    }    try {      PolicyService ps=PolicyService.parseXML(notification.getContent());      PolicyNotification pn=ps.getPolicyNotification();      if (pn != null) {        processPolicyNotification(pn);      }    } catch (    PolicyException pe) {      debug.error("PolicyNotificationHandler." + "processPLLNotifications():" + "invalid notifcation format",pe);    }  }}  }
class C{  public void error(String msg,Object[] args){  System.out.println("DOM ERROR! class: " + this.getClass().getName());  throw new RuntimeException(XMLMessages.createXMLMessage(msg,args));}  }
class C{  private boolean defineEntity(String name,char value){  StringBuffer sb=new StringBuffer("&");  sb.append(name);  sb.append(';');  String entityString=sb.toString();  boolean extra=defineChar2StringMapping(entityString,value);  return extra;}  }
class C{  public DefaultComboBoxModel(Vector<E> v){  objects=v;  if (getSize() > 0) {    selectedObject=getElementAt(0);  }}  }
class C{  public void warn(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {  String formattedMsg=XSLMessages.createWarning(msg,args);  ErrorListener errHandler=xctxt.getErrorListener();  TransformerException spe=new TransformerException(formattedMsg,(SourceLocator)xctxt.getSAXLocator());  if (null != errHandler)   errHandler.warning(spe); else   System.out.println(formattedMsg);}  }
class C{  public void updateUI(){  setUI((TreeUI)UIManager.getUI(this));  SwingUtilities.updateRendererOrEditorUI(getCellRenderer());  SwingUtilities.updateRendererOrEditorUI(getCellEditor());}  }
class C{  public Executor wd(File wd){  this.wd=wd;  return this;}  }
class C{  public void testNegNegFirstShorter(){  String numA="293478573489347658763745839457637";  String numB="2837462783428374767845648748973847593874837948575684767";  String res="2837462783428374767845615168483972194300564226167553530";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public String chooseServerAlias(String keyType,Principal[] issuers,Socket socket){  return defaultX509KM.chooseServerAlias(keyType,issuers,socket);}  }
class C{  public void testCertPathValidator13() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator certPV;  for (int i=0; i < validValues.length; i++) {    certPV=CertPathValidator.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);    try {      certPV=CertPathValidator.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchAlgorithmException " + e.getMessage());    }    certPV=CertPathValidator.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);  }}  }
class C{  public PolicyEvaluationException(String message,String reqId){  super(message);  this.reqId=reqId;}  }
class C{  public void removeAttributes(AttributeSet attributes){  if (attributes == this) {    table.clear();  } else {    Enumeration names=attributes.getAttributeNames();    while (names.hasMoreElements()) {      Object name=names.nextElement();      Object value=attributes.getAttribute(name);      if (value.equals(getAttribute(name)))       removeAttribute(name);    }  }}  }
class C{  public InvocationTargetException(Throwable target){  super((Throwable)null);  this.target=target;}  }
class C{  @Override public void removeValve(Valve valve){  Valve current;  if (first == valve) {    first=first.getNext();    current=null;  } else {    current=first;  }  while (current != null) {    if (current.getNext() == valve) {      current.setNext(valve.getNext());      break;    }    current=current.getNext();  }  if (first == basic)   first=null;  if (valve instanceof Contained)   ((Contained)valve).setContainer(null);  if (valve instanceof Lifecycle) {    if (getState().isAvailable()) {      try {        ((Lifecycle)valve).stop();      } catch (      LifecycleException e) {        log.error("StandardPipeline.removeValve: stop: ",e);      }    }    try {      ((Lifecycle)valve).destroy();    } catch (    LifecycleException e) {      log.error("StandardPipeline.removeValve: destroy: ",e);    }  }  container.fireContainerEvent(Container.REMOVE_VALVE_EVENT,valve);}  }
class C{  public MARSHAL(){  this("");}  }
class C{  public LockFactory(){  lockCache=new WeakHashMap<Key<K>,Reference<Lock>>();}  }
class C{  protected void bindIdentifier(BoundStatement bs,Identifier identifier){  bs.bind(identifier.components().toArray());}  }
class C{  private void writeLargeDataToFile(File file,int size) throws FileNotFoundException, IOException {  FileOutputStream fos=new FileOutputStream(file);  byte[] buf=new byte[size];  try {    fos.write(buf);  }  finally {    fos.close();  }}  }
class C{  public boolean isEncrypted(){  return isEncrypted;}  }
class C{  int boundedIndexOf(String string,char search,int start,int end){  int retValue=string.indexOf(search,start);  if (retValue >= end) {    return -1;  }  return retValue;}  }
class C{  protected void entryEvicted(K key,V value){}  }
class C{  public PlaPointFloat change_length(PlaPointFloat p_to_point,double p_new_length){  double dx=p_to_point.v_x - v_x;  double dy=p_to_point.v_y - v_y;  if (dx == 0 && dy == 0) {    System.out.println("IntPoint.change_length: Points are equal");    return p_to_point;  }  double length=Math.sqrt(dx * dx + dy * dy);  double new_x=v_x + (dx * p_new_length) / length;  double new_y=v_y + (dy * p_new_length) / length;  return new PlaPointFloat(new_x,new_y);}  }
class C{  private PropertyHelpCallback(ManagedObjectDefinition<?,?> d,PropertyDefinition<?> pd){  this.d=d;  this.pd=pd;}  }
class C{  private String headersToString(){  StringBuilder result=new StringBuilder();  for (  Map.Entry<String,String> entry : headers.entrySet()) {    result.append(entry.getKey());    result.append(": ");    if (entry.getKey().toLowerCase().contains("password")) {      result.append("***************");    } else {      result.append(entry.getValue());    }    result.append("\n");  }  return result.toString();}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrnotspecifiedvalue.class,args);}  }
class C{  static void freeDirectBuffer(ByteBuffer buffer){  try {    final String SUN_CLASS="sun.nio.ch.DirectBuffer";    Class<?>[] interfaces=buffer.getClass().getInterfaces();    for (    Class<?> clazz : interfaces) {      if (clazz.getName().equals(SUN_CLASS)) {        final Object[] NO_PARAM=new Object[0];        Method getCleaner=Class.forName(SUN_CLASS).getMethod("cleaner");        Object cleaner=getCleaner.invoke(buffer,NO_PARAM);        Method cleanMethod=Class.forName("sun.misc.Cleaner").getMethod("clean");        cleanMethod.invoke(cleaner,NO_PARAM);        return;      }    }  } catch (  ReflectiveOperationException e) {  }}  }
class C{  public boolean isBoolean(){  return type == BOOLEAN;}  }
class C{  void capture(final Context context,final Request request,final CapturePoint mode){  StringWriter out=new StringWriter();  PrintWriter writer=new PrintWriter(out);  String id=context.getId();switch (mode) {case REQUEST:    captureRequest(writer,request,id);  break;case FILTERED_REQUEST:captureFilteredRequest(writer,request,id);break;default :throw new IllegalArgumentException("The given mode is not accepted: " + mode.name());}if (captureContext) {writer.println("Context's content as JSON:");captureContextAsJson(writer,context);}logger.info(out.toString());}  }
class C{  public int read(byte[] b,int off,int len) throws java.io.IOException {  if (len == 0)   return 0;  int count=0;  if (isBack && len > 0) {    isBack=false;    b[off++]=back;    --len;    count++;  }  if (len > 0) {    int byteSourceCount=byteSource.get(byteSourcePosition,b,off,len);    if (byteSourceCount > 0) {      count+=byteSourceCount;      byteSourcePosition+=byteSourceCount;    }  }  if (count == 0)   return -1;  return count;}  }
class C{  @Override public void initializeForBranch(TemplateFile templateFile,Branch branch,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  initializeInternal(templateFile,arguments,lineNumber,warnings);}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  public final void init(KeyStore ks,char[] password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {  spiImpl.engineInit(ks,password);}  }
class C{  public void initialize(Map configParams) throws PolicyException {}  }
class C{  public java.lang.String toXMLString() throws com.sun.identity.saml2.common.SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public static void addDefaultProfile(SpringApplication app){  Map<String,Object> defProperties=new HashMap<>();  defProperties.put(SPRING_PROFILE_DEFAULT,Constants.SPRING_PROFILE_DEVELOPMENT);  app.setDefaultProperties(defProperties);}  }
class C{  private long completedSize(long target){  if (completed)   return thisNodeSize; else {    SliceTask<P_IN,P_OUT> left=leftChild;    SliceTask<P_IN,P_OUT> right=rightChild;    if (left == null || right == null) {      return thisNodeSize;    } else {      long leftSize=left.completedSize(target);      return (leftSize >= target) ? leftSize : leftSize + right.completedSize(target);    }  }}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  final boolean isOwnedBy(AbstractQueuedLongSynchronizer sync){  return sync == AbstractQueuedLongSynchronizer.this;}  }
class C{  public UnbindOperationWrapper(UnbindOperation unbind){  super(unbind);}  }
class C{  public void addColumn(final Object columnName){  addColumn(columnName,(Vector)null);}  }
class C{  @Inject public AuthorizationCodeResponseTypeHandler(TokenStore tokenStore){  this.tokenStore=tokenStore;}  }
class C{  public TriggerWrapper(final Trigger trigger,final boolean paused) throws JobPersistenceException {  this(trigger.getName(),trigger.getGroup(),RepoJobStoreUtils.serialize(trigger),paused);}  }
class C{  private byte[] writeCheckedBytes(MessageNano proto){  BackupProtos.CheckedMessage wrapper=new BackupProtos.CheckedMessage();  wrapper.payload=MessageNano.toByteArray(proto);  CRC32 checksum=new CRC32();  checksum.update(wrapper.payload);  wrapper.checksum=checksum.getValue();  return MessageNano.toByteArray(wrapper);}  }
class C{  public boolean satisfiesRequirement(String version){  return validator.apply(version);}  }
class C{  DeadEvent(@NonNull EventBus eventBus,@NonNull Object event){  this.eventBus=eventBus;  this.event=event;}  }
class C{  public void insert_reference(org.omg.CORBA.Object value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_reference",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_reference(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected void CreateCharset(OffsetItem charsetRef,int nglyphs){  OutputList.addLast(new MarkerItem(charsetRef));  OutputList.addLast(new UInt8Item((char)2));  OutputList.addLast(new UInt16Item((char)1));  OutputList.addLast(new UInt16Item((char)(nglyphs - 1)));}  }
class C{  private SingletonIterator(final M value){  this.value=value;}  }
class C{  public FixedMetadataValue(Plugin owningPlugin,final Object value){  super(owningPlugin);  this.internalValue=value;}  }
class C{  @Override public Foo fetchByUUID_G(String uuid,long groupId){  return fetchByUUID_G(uuid,groupId,true);}  }
class C{  public void onEventMainThread(Message msg){  String join_insert_type;  String meetingId;switch (EventType.values()[msg.what]) {case MSG_ININT_SUCCESS:    if (mDebug) {      Log.i(TAG,"MSG_ININT_SUCCESS");    }  mSign=TeamMeetingApp.getmSelfData().getAuthorization();mNetWork.getRoomLists(mSign,1 + "",20 + "");chatMessageInint();break;case MSG_ININT_FAILED:if (mDebug) {Log.e(TAG,"MSG_ININT_FAILED");}break;case MSG_SIGNOUT_SUCCESS:if (mDebug) {Log.e(TAG,"MSG_SIGNOUT_SUCCESS");}finish();System.exit(0);break;case MSG_SIGNOUT_FAILED:if (mDebug) {Log.e(TAG,"MSG_SIGNOUT_FAILED");}break;case MSG_GET_ROOM_LIST_SUCCESS:if (mDebug) {Log.e(TAG,"MSG_GET_ROOM_LIST_SUCCESS");}interfacejump(msg);break;case MSG_GET_ROOM_LIST_FAILED:if (mDebug) {Log.e(TAG,"MSG_GET_ROOM_LIST_FAILED");}break;case MSG_NET_WORK_TYPE:if (mDebug) {Log.e(TAG,"MSG_NET_WORK_TYPE");}int type=msg.getData().getInt("net_type");netWorkTypeStart(type);break;case MSG_RESPONS_ESTR_NULl:if (mDebug) {Log.e(TAG,"MSG_RESPONS_ESTR_NULl");}mNetErrorSweetAlertDialog.show();break;case MSG_GET_MEETING_INFO_SUCCESS:if (mDebug) {Log.e(TAG,"MSG_GET_MEETING_INFO_SUCCESS ");}if (msg.getData().getString(JoinActType.JOIN_TYPE).equals(JoinActType.JOIN_URL_ACTVITY)) {getMeetingInfoSuccess(msg);}break;default :break;}}  }
class C{  public void updateSessionMaps(InternalSession session){  if (null == session) {    return;  }  SessionID sessionID=session.getID();  String primaryID=sessionID.getExtension().getPrimaryID();  if (!serverConfig.isLocalServer(primaryID)) {    add(sessionID);  }  session.putProperty(sessionCookies.getLBCookieName(),serverConfig.getLBCookieValue());}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  String prefix="", ns="", localName=target;  int colon=target.indexOf(':');  if (colon >= 0) {    ns=getNamespaceForPrefix(prefix=target.substring(0,colon));    localName=target.substring(colon + 1);  }  try {    if ("xalan-doc-cache-off".equals(target) || "xalan:doc-cache-off".equals(target) || ("doc-cache-off".equals(localName) && ns.equals("org.apache.xalan.xslt.extensions.Redirect"))) {      if (!(m_elems.peek() instanceof ElemForEach))       throw new TransformerException("xalan:doc-cache-off not allowed here!",getLocator());      ElemForEach elem=(ElemForEach)m_elems.peek();      elem.m_doc_cache_off=true;    }  } catch (  Exception e) {  }  flushCharacters();  getCurrentProcessor().processingInstruction(this,target,data);}  }
class C{  private void parseMinorVersion(String minorVer) throws SAMLException, FSMsgException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSResponse(Element): invalid " + "MinorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_SAML_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("FSResponse(Element):MinorVersion of" + " the Response is too high.");    throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_SAML_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("FSResponse(Element):MinorVersion of" + " the Response is too low.");    throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooLow",null);  }}  }
class C{  @Indexable(type=IndexableType.REINDEX) @Override public Foo updateFoo(Foo foo){  return fooPersistence.update(foo);}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  private void rehash(){  int oldCapacity=table.length;  Object oldMap[]=table;  int newCapacity=oldCapacity * 2 + 1;  Object newMap[]=new Object[newCapacity];  for (int i=oldCapacity; i-- > 0; )   if (oldMap[i] != null) {    int index=(System.identityHashCode(oldMap[i]) & 0x7FFFFFFF) % newMap.length;    while (newMap[index] != null)     index=(index + 1) % newMap.length;    newMap[index]=oldMap[i];  }  threshold=(int)(newCapacity * loadFactor);  table=newMap;}  }
class C{  public static boolean equals(int[] array1,int[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void mouseClicked(MouseEvent e){  ((MouseListener)a).mouseClicked(e);  ((MouseListener)b).mouseClicked(e);}  }
class C{  public FrameBodyWXXX(){  this.setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  this.setObjectValue(DataTypes.OBJ_DESCRIPTION,"");  this.setObjectValue(DataTypes.OBJ_URLLINK,"");}  }
class C{  public void addAttachment(final Attachment attachment){  this.attachements.add(attachment);}  }
class C{  public CopyOnWriteArrayList(Collection<? extends E> c){  Object[] elements;  if (c.getClass() == CopyOnWriteArrayList.class)   elements=((CopyOnWriteArrayList<?>)c).getArray(); else {    elements=c.toArray();    if (elements.getClass() != Object[].class)     elements=Arrays.copyOf(elements,elements.length,Object[].class);  }  setArray(elements);}  }
class C{  public boolean canBeEncoded(){  byte textEncoding=this.getBody().getTextEncoding();  String charSetName=TextEncoding.getInstanceOf().getValueForId(textEncoding);  CharsetEncoder encoder=Charset.forName(charSetName).newEncoder();  if (encoder.canEncode((String)value)) {    return true;  } else {    logger.finest("Failed Trying to decode" + value + "with"+ encoder.toString());    return false;  }}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.EntityDescriptorElement createEntityDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.EntityDescriptorElementImpl();}  }
class C{  private void refreshServiceRoute(int type,String svcName,String svcVersion){  try {switch (type) {case SMSObjectListener.DELETE:      if (serviceRoutes.containsKey(svcName)) {        removeService(svcName);      }    break;case SMSObjectListener.ADD:  if (!serviceRoutes.containsKey(svcName)) {    serviceRoutes.put(svcName,addService(getServiceManager(),svcName,svcVersion));  }break;case SMSObjectListener.MODIFY:try {write.lock();removeService(svcName);serviceRoutes.put(svcName,addService(getServiceManager(),svcName,svcVersion));}  finally {write.unlock();}break;default :throw new IllegalArgumentException("Unknown modification type: " + type);}} catch (SSOException|SMSException e) {debug.error("Could not update SMS REST services for change to " + svcName,e);}}  }
class C{  private void initialize(){  frmSkidfuscator=new JFrame();  frmSkidfuscator.setTitle("Skidfuscator");  frmSkidfuscator.setBounds(100,100,704,535);  frmSkidfuscator.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  JTabbedPane tabbedPane=new JTabbedPane(JTabbedPane.LEFT);  tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);  frmSkidfuscator.getContentPane().add(tabbedPane,BorderLayout.CENTER);  pnlInputs.setLayout(new BorderLayout(0,0));  addDropZones(pnlInputs);  settingsPanels.add(pnlObfuscation);  settingsPanels.add(pnlOptimization);  tabbedPane.addTab("Inputs",null,pnlInputs,"Where the inputs are chosen");  tabbedPane.addTab("Obfuscation",null,scrollable(pnlObfuscation),"Options for obfuscation");  tabbedPane.addTab("Optimization",null,scrollable(pnlOptimization),"Options for optimization");}  }
class C{  public Result performSearch(Connection connection,SearchRequest request,Collection<Entry> entries) throws QueryFailedException {  try {    return connection.search(request,entries);  } catch (  LdapException e) {    if (!entries.isEmpty()) {      if (!ResultCode.SIZE_LIMIT_EXCEEDED.equals(e.getResult().getResultCode()) && debug.warningEnabled()) {        debug.warning("Search abandoned due to error. Returning incomplete search results.",e);      }      return e.getResult();    }    throw new QueryFailedException(connection,ldapConfig.getTokenStoreRootSuffix(),request.getFilter(),e);  }}  }
class C{  public static boolean isXuiAdminConsoleEnabled(){  return InjectorHolder.getInstance(XUIState.class).isXUIAdminEnabled();}  }
class C{  @Override public void cacheResult(Foo foo){  entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey(),foo);  finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,new Object[]{foo.getUuid(),foo.getGroupId()},foo);  foo.resetOriginalValues();}  }
class C{  static void deleteNode(XMPNode node){  XMPNode parent=node.getParent();  if (node.getOptions().isQualifier()) {    parent.removeQualifier(node);  } else {    parent.removeChild(node);  }  if (!parent.hasChildren() && parent.getOptions().isSchemaNode()) {    parent.getParent().removeChild(parent);  }}  }
class C{  protected SOAPMessage signRegistrationRequest(SOAPMessage msg,String idAttrName,String id) throws SAMLException, FSMsgException {  FSUtils.debug.message("Entered FSNameRegistrationHandler::signRegistrationRequest");  String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);  if (certAlias == null || certAlias.length() == 0) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::" + "signRegistrationRequest: couldn't obtain " + "this site's cert alias.");    }    throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSNameRegistrationHandler.signRegistration" + "Request Provider's certAlias is found: " + certAlias);  }  XMLSignatureManager manager=XMLSignatureManager.getInstance();  Document doc=(Document)FSServiceUtils.createSOAPDOM(msg);  String xpath="//*[local-name()=\'ProviderID\']";  manager.signXML(doc,certAlias,SystemConfigurationUtil.getProperty(SAMLConstants.XMLSIG_ALGORITHM),idAttrName,id,false,xpath);  return FSServiceUtils.convertDOMToSOAP(doc);}  }
class C{  public static void deregisterSupportedExtension(String oid){  DirectoryServer.deregisterSupportedExtension(oid);}  }
class C{  private void readObject(ObjectInputStream s) throws ObjectStreamException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("[\n");  if (unmodTrustAnchors != null) {    sb.append("  Trust Anchors: " + unmodTrustAnchors.toString() + "\n");  }  if (unmodInitialPolicies != null) {    if (unmodInitialPolicies.isEmpty()) {      sb.append("  Initial Policy OIDs: any\n");    } else {      sb.append("  Initial Policy OIDs: [" + unmodInitialPolicies.toString() + "]\n");    }  }  sb.append("  Validity Date: " + String.valueOf(date) + "\n");  sb.append("  Signature Provider: " + String.valueOf(sigProvider) + "\n");  sb.append("  Default Revocation Enabled: " + revocationEnabled + "\n");  sb.append("  Explicit Policy Required: " + explicitPolicyRequired + "\n");  sb.append("  Policy Mapping Inhibited: " + policyMappingInhibited + "\n");  sb.append("  Any Policy Inhibited: " + anyPolicyInhibited + "\n");  sb.append("  Policy Qualifiers Rejected: " + policyQualifiersRejected + "\n");  sb.append("  Target Cert Constraints: " + String.valueOf(certSelector) + "\n");  if (certPathCheckers != null)   sb.append("  Certification Path Checkers: [" + certPathCheckers.toString() + "]\n");  if (certStores != null)   sb.append("  CertStores: [" + certStores.toString() + "]\n");  sb.append("]");  return sb.toString();}  }
class C{  public ReplicationParameters replicationPortDestination(int port){  this.replicationPortDestination=port;  return this;}  }
class C{  private boolean needGestureDetector(String type){  if (mHost != null) {    for (    WXGestureType gesture : WXGestureType.LowLevelGesture.values()) {      if (type.equals(gesture.toString())) {        return true;      }    }    for (    WXGestureType gesture : WXGestureType.HighLevelGesture.values()) {      if (type.equals(gesture.toString())) {        return true;      }    }  }  return false;}  }
class C{  public String toString(){  StringBuffer uriSpecString=new StringBuffer();  if (m_scheme != null) {    uriSpecString.append(m_scheme);    uriSpecString.append(':');  }  uriSpecString.append(getSchemeSpecificPart());  return uriSpecString.toString();}  }
class C{  public void intervalRemoved(ListDataEvent e){}  }
class C{  protected boolean popNamespace(String prefix){  try {    if (m_prefixMap.popNamespace(prefix)) {      m_saxHandler.endPrefixMapping(prefix);      return true;    }  } catch (  SAXException e) {  }  return false;}  }
class C{  private void add(long socket,long timeout,int flags){  if (log.isDebugEnabled()) {    String msg=sm.getString("endpoint.debug.pollerAdd",Long.valueOf(socket),Long.valueOf(timeout),Integer.valueOf(flags));    if (log.isTraceEnabled()) {      log.trace(msg,new Exception());    } else {      log.debug(msg);    }  }  if (timeout <= 0) {    timeout=Integer.MAX_VALUE;  }synchronized (this) {    if (addList.add(socket,timeout,flags)) {      this.notify();    }  }}  }
class C{  public void checkIdle(){  try {    createPool().checkIdle();  } catch (  SQLException x) {    throw new RuntimeException(x);  }}  }
class C{  public static String byteArrayToHexString(byte[] byteArray){  int readBytes=byteArray.length;  StringBuffer hexData=new StringBuffer();  int onebyte;  for (int i=0; i < readBytes; i++) {    onebyte=((0x000000ff & byteArray[i]) | 0xffffff00);    hexData.append(Integer.toHexString(onebyte).substring(6));  }  return hexData.toString();}  }
class C{  public static Map<String,Set<String>> removeValidators(Map<String,Set<String>> attributeDefaults,ServiceSchema serviceSchema){  final Map<String,Set<String>> subset=new HashMap<String,Set<String>>();  for (  Map.Entry<String,Set<String>> entry : attributeDefaults.entrySet()) {    final String name=entry.getKey();    if (!AttributeSchema.Type.VALIDATOR.equals(serviceSchema.getAttributeSchema(name).getType())) {      subset.put(name,new HashSet<String>(entry.getValue()));    }  }  return subset;}  }
class C{  public boolean isHidden(){  return isHidden;}  }
class C{  private synchronized void flush(AbstractNodeTask task){  if (task == null) {    throw new IllegalArgumentException("null argument");  }  workingList.remove(task.getNode());  cancelList.remove(task.getNode());  notify();}  }
class C{  private static String encodeHistorical(CSN csn,String operationType){  return "dn:" + csn + ":"+ operationType;}  }
class C{  static String byteArrayToAltBase64(byte[] a){  return byteArrayToBase64(a,true);}  }
class C{  @Override public void run(){  boolean interrupted=false;  dumpBannerToLog();  while (!terminated && !interrupted) {    try {      final ByteBuffer bfr=ByteBuffer.allocate(RadiusServerConstants.MAX_PACKET_SIZE);      bfr.order(ByteOrder.BIG_ENDIAN);      InetSocketAddress iAddr=null;      try {        iAddr=(InetSocketAddress)channel.receive(bfr);        if (iAddr == null) {          LOG.message("DatagramChannel receive returned null. No datagram available.");          continue;        } else {          eventBus.post(new PacketReceivedEvent());        }      } catch (      final ClosedByInterruptException c) {        interrupted=true;        continue;      }catch (      final IOException e) {        LOG.warning("Exception Receiving RADIUS packet. Ignoring.",e);        continue;      }catch (      final SecurityException e) {        LOG.error("a security manager has been installed and it does not permit datagrams to be " + " accepted from the datagram's sender. Ignoring",e);        continue;      }      final String ipAddr=iAddr.getAddress().toString();      final ClientConfig clientConfig=config.findClient(ipAddr);      if (clientConfig == null) {        LOG.warning("No Defined RADIUS Client matches IP address " + ipAddr + ". Dropping request.");        eventBus.post(new PacketDroppedSilentlyEvent());        continue;      }      if (!clientConfig.isClassIsValid()) {        LOG.warning("Declared Handler Class for Client '" + clientConfig.getName() + "' is not valid. See earlier loading exception. Dropping request.");        eventBus.post(new PacketDroppedSilentlyEvent());        continue;      }      bfr.flip();      final RadiusRequestContext reqCtx=new RadiusRequestContext(clientConfig,channel,iAddr);      final RadiusRequestHandler requestHandler=new RadiusRequestHandler(accessRequestHandlerFactory,reqCtx,bfr,eventBus);      executorService.execute(requestHandler);    } catch (    final Exception t) {      LOG.error("Error receiving request.",t);    }  }  if (interrupted) {    Thread.currentThread().interrupt();  }  try {    channel.close();  } catch (  final Exception e) {    LOG.error("Failed to close the Listener's UDP channel",e);  }  LOG.message("RADIUS Listener Exited.");  this.listenerThread=null;}  }
class C{  protected ReverbType(String name,int earlyReflectionDelay,float earlyReflectionIntensity,int lateReflectionDelay,float lateReflectionIntensity,int decayTime){  this.name=name;  this.earlyReflectionDelay=earlyReflectionDelay;  this.earlyReflectionIntensity=earlyReflectionIntensity;  this.lateReflectionDelay=lateReflectionDelay;  this.lateReflectionIntensity=lateReflectionIntensity;  this.decayTime=decayTime;}  }
class C{  private void checkEntryFilteredAfterModify(Entry entry,int fractionalMode,String... fractionalConf) throws Exception {{    String objectClassStr=fractionalConf[0];    if (!objectClassStr.equals("*")) {      ObjectClass objectClass=DirectoryServer.getSchema().getObjectClass(objectClassStr);      assertTrue(entry.hasObjectClass(objectClass));    }    boolean first=true;switch (fractionalMode) {case EXCLUDE_FRAC_MODE:      for (      String fracAttr : fractionalConf) {        if (!first) {          assertFalse(entry.hasAttribute(DirectoryServer.getSchema().getAttributeType(fracAttr)));        }        first=false;      }    checkEntryAttributeValue(entry,OPTIONAL_ATTR,OPTIONAL_ATTR + "NewValue");  break;case INCLUDE_FRAC_MODE:for (String fracAttr : fractionalConf) {  if (!first) {    checkEntryAttributeValue(entry,fracAttr,fracAttr + "NewValue");  }  first=false;}assertFalse(entry.hasAttribute(DirectoryServer.getSchema().getAttributeType(OPTIONAL_ATTR)));break;default :fail("Unexpected fractional mode.");}checkEntryAttributeValue(entry,SYNCHRO_OPTIONAL_ATTR,SYNCHRO_OPTIONAL_ATTR + "Value");}}  }
class C{  public DefaultDebugRecorderForTest(ExecutorServiceFactory executorServiceFactory){  super(executorServiceFactory);}  }
class C{  public void testSetNullIntintString() throws SQLException {  String typeCreationStmtUDT="CREATE TYPE addressType AS " + "( street INTEGER, zip TEXT);";  String personTableCreateUDT="CREATE TABLE person (name TEXT, address addressType);";  Statement st=null;  PreparedStatement ps=null;  try {    st=conn.createStatement();    st.execute(typeCreationStmtUDT);    st.execute(personTableCreateUDT);    fail("UDTs and Ref Types not supported");    String query="insert into person (name, address) values ('Hans', ?);";    ps=conn.prepareStatement(query);    try {      ps.setNull(1,Types.DATALINK);      ps.execute();    } catch (    SQLException sqle) {      fail("SQLException is thrown: " + sqle.getMessage());      sqle.printStackTrace();    } finally {      try {        st.close();      } catch (      Exception ee) {      }    }  } catch (  SQLException e) {  } finally {    try {      st.execute("drop table if exists person");      ps.close();    } catch (    Exception ee) {    }  }  String personTableCreate="create table person (name TEXT, Address TEXT)";  try {    st=conn.createStatement();    st.execute(personTableCreate);    String insert="insert into person (name, address) values (?, '1600 Amphitheatre Mountain View');";    ps=conn.prepareStatement(insert);    try {      ps.setNull(1,1,"");      ps.execute();    } catch (    SQLException sqle) {      assertEquals("SQLite.Exception: error in step",sqle.getMessage());    } finally {      try {        st.close();      } catch (      Exception ee) {      }    }  }  finally {    try {      st.execute("drop table if exists person");      ps.close();    } catch (    Exception ee) {    }  }  personTableCreate="create table person (name TEXT, Address TEXT)";  try {    st=conn.createStatement();    st.execute("drop table if exists person");    st.execute(personTableCreate);    String insert="insert into person (name, address) values (?, '1600 Amphitheatre Mountain View');";    ps=conn.prepareStatement(insert);    try {      ps.setNull(1,1,"");      ps.execute();    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }  }  finally {    try {      st.execute("drop table if exists person");      ps.close();    } catch (    Exception ee) {    }  }}  }
class C{  public void printMessage(String str){  buff.append(str).append("\n");}  }
class C{  public static void main(final String[] args){  parseArgs(args);  if (useStartTLS) {    connectStartTLS();  } else   if (useSSL) {    connectSSL();  } else {    connect();  }}  }
class C{  public void close() throws IOException {  maxStreamPos=cache.length();  seek(maxStreamPos);  flushBefore(maxStreamPos);  super.close();  cache.close();  cache=null;  cacheFile.delete();  cacheFile=null;  stream.flush();  stream=null;  StreamCloser.removeFromQueue(closeAction);}  }
class C{  public void stop(){  try {    if (useShutdownHook) {      Runtime.getRuntime().removeShutdownHook(shutdownHook);      LogManager logManager=LogManager.getLogManager();      if (logManager instanceof ClassLoaderLogManager) {        ((ClassLoaderLogManager)logManager).setUseShutdownHook(true);      }    }  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);  }  try {    Server s=getServer();    LifecycleState state=s.getState();    if (LifecycleState.STOPPING_PREP.compareTo(state) <= 0 && LifecycleState.DESTROYED.compareTo(state) >= 0) {    } else {      s.stop();      s.destroy();    }  } catch (  LifecycleException e) {    log.error("Catalina.stop",e);  }}  }
class C{  private void rehash(){  expungeStaleEntries();  if (size >= threshold - threshold / 4)   resize();}  }
class C{  private static void initializeDefaultLAF(Properties swingProps){  if (getLAFState().lookAndFeel != null) {    return;  }  String lafName=null;  HashMap lafData=(HashMap)AppContext.getAppContext().remove("swing.lafdata");  if (lafData != null) {    lafName=(String)lafData.remove("defaultlaf");  }  if (lafName == null) {    lafName=getCrossPlatformLookAndFeelClassName();  }  lafName=swingProps.getProperty(defaultLAFKey,lafName);  try {    setLookAndFeel(lafName);  } catch (  Exception e) {    throw new Error("Cannot load " + lafName);  }  if (lafData != null) {    for (    Object key : lafData.keySet()) {      UIManager.put(key,lafData.get(key));    }  }}  }
class C{  public ClientFaultException(final String messageCode){  super(null,messageCode,null);}  }
class C{  @Override public void invalidate(final PooledConnection pc) throws SQLException {  final PooledConnectionAndInfo pci=pcMap.get(pc);  if (pci == null) {    throw new IllegalStateException(NO_KEY_MESSAGE);  }  try {    _pool.invalidateObject(pci);    _pool.close();  } catch (  final Exception ex) {    throw new SQLException("Error invalidating connection",ex);  }}  }
class C{  private static String addComplianceModeFilters(String originalFilter,int objectType,boolean ignoreComplianceFilter){  try {    String modifiedFilter=originalFilter;    if (!ignoreComplianceFilter && AMCompliance.isComplianceUserDeletionEnabled()) {      StringBuilder sb=new StringBuilder();switch (objectType) {case AMObject.USER:        sb.append("(&").append(originalFilter);      sb.append("(!(inetuserstatus=deleted)))");    modifiedFilter=sb.toString();  break;case AMObject.ORGANIZATION:sb.append("(&").append(originalFilter);sb.append("(!(inetdomainstatus=deleted)))");modifiedFilter=sb.toString();break;case AMObject.STATIC_GROUP:case AMObject.DYNAMIC_GROUP:case AMObject.ASSIGNABLE_DYNAMIC_GROUP:case AMObject.GROUP:sb.append("(&").append(originalFilter);sb.append("(!(inetgroupstatus=deleted)))");modifiedFilter=sb.toString();break;}if (debug.messageEnabled()) {debug.message("AMSearchFilterManager." + "" + "addComplainceModeFilters() - objectType = " + objectType + ", Original Filter = "+ originalFilter+ ", Modified Filter = "+ modifiedFilter);}return modifiedFilter;}} catch (AMException ae) {if (debug.warningEnabled()) {debug.warning("AMSearchFilterManager." + "addComplianceModeFilters() Unable to determine if " + "\"User Compliance deletion mode\" is enabled or "+ "disabled. Exception : ",ae);}}return originalFilter;}  }
class C{  private void disconnectRemovedReplicationServers(Set<HostPort> oldRSAddresses){  final Collection<HostPort> serversToDisconnect=new ArrayList<>();  final Set<HostPort> newRSAddresses=getConfiguredRSAddresses();  for (  HostPort oldRSAddress : oldRSAddresses) {    if (!newRSAddresses.contains(oldRSAddress)) {      serversToDisconnect.add(oldRSAddress);    }  }  if (serversToDisconnect.isEmpty()) {    return;  }  for (  ReplicationServerDomain domain : getReplicationServerDomains()) {    domain.stopReplicationServers(serversToDisconnect);  }}  }
class C{  @Override public void removeByUuid(String uuid){  for (  Foo foo : findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  protected Container createMessageArea(){  JPanel top=new JPanel();  Border topBorder=(Border)DefaultLookup.get(optionPane,this,"OptionPane.messageAreaBorder");  if (topBorder != null) {    top.setBorder(topBorder);  }  top.setLayout(new BorderLayout());  Container body=new JPanel(new GridBagLayout());  Container realBody=new JPanel(new BorderLayout());  body.setName("OptionPane.body");  realBody.setName("OptionPane.realBody");  if (getIcon() != null) {    JPanel sep=new JPanel();    sep.setName("OptionPane.separator");    sep.setPreferredSize(new Dimension(15,1));    realBody.add(sep,BorderLayout.BEFORE_LINE_BEGINS);  }  realBody.add(body,BorderLayout.CENTER);  GridBagConstraints cons=new GridBagConstraints();  cons.gridx=cons.gridy=0;  cons.gridwidth=GridBagConstraints.REMAINDER;  cons.gridheight=1;  cons.anchor=DefaultLookup.getInt(optionPane,this,"OptionPane.messageAnchor",GridBagConstraints.CENTER);  cons.insets=new Insets(0,0,3,0);  addMessageComponents(body,cons,getMessage(),getMaxCharactersPerLineCount(),false);  top.add(realBody,BorderLayout.CENTER);  addIcon(top);  return top;}  }
class C{  public long toHours(){  return seconds / SECONDS_PER_HOUR;}  }
class C{  public void removeAllElements(){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.removeAllElements();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.AgreementMethodType.RecipientKeyInfo createAgreementMethodTypeRecipientKeyInfo() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.AgreementMethodTypeImpl.RecipientKeyInfoImpl();}  }
class C{  public ServiceSchemaManagerFactory(){  this.adminToken=AccessController.doPrivileged(AdminTokenAction.getInstance());}  }
class C{  static public void addListHeader(Class<? extends SIPHeader> sipHeaderClass,Class<? extends SIPHeaderList<? extends SIPHeader>> sipHeaderListClass){  headerListTable.put(sipHeaderClass,sipHeaderListClass);}  }
class C{  public static boolean isAuthnContextMatching(List requestedACClassRefs,String acClassRef,String comparison,Map acClassRefLevelMap){  Integer levelInt=(Integer)acClassRefLevelMap.get(acClassRef);  if (levelInt == null) {    if (debug.messageEnabled()) {      debug.message("SAML2Utils.isAuthnContextMatching: " + "AuthnContextClassRef " + acClassRef + " is not supported.");    }    return false;  }  int level=levelInt.intValue();  if ((comparison == null) || (comparison.length() == 0) || (comparison.equals("exact"))) {    for (Iterator iter=requestedACClassRefs.iterator(); iter.hasNext(); ) {      String requstedACClassRef=(String)iter.next();      if (requstedACClassRef.equals(acClassRef)) {        return true;      }    }    return false;  }  debug.message("SAML2Utils.isAuthnContextMatching: acClassRef = {}, level = {}, comparison = {}",acClassRef,level,comparison);  if (comparison.equals("minimum")) {    for (Iterator iter=requestedACClassRefs.iterator(); iter.hasNext(); ) {      String requstedACClassRef=(String)iter.next();      Integer requestedLevelInt=(Integer)acClassRefLevelMap.get(requstedACClassRef);      int requestedLevel=(requestedLevelInt == null) ? 0 : requestedLevelInt.intValue();      if (debug.messageEnabled()) {        debug.message("SAML2Utils." + "isAuthnContextMatching: requstedACClassRef = " + requstedACClassRef + ", level = "+ requestedLevel);      }      if (level >= requestedLevel) {        return true;      }    }    return false;  } else   if (comparison.equals("better")) {    for (Iterator iter=requestedACClassRefs.iterator(); iter.hasNext(); ) {      String requstedACClassRef=(String)iter.next();      Integer requestedLevelInt=(Integer)acClassRefLevelMap.get(requstedACClassRef);      int requestedLevel=(requestedLevelInt == null) ? 0 : requestedLevelInt.intValue();      if (debug.messageEnabled()) {        debug.message("SAML2Utils." + "isAuthnContextMatching: requstedACClassRef = " + requstedACClassRef + ", level = "+ requestedLevel);      }      if (level <= requestedLevel) {        return false;      }    }    return true;  } else   if (comparison.equals("maximum")) {    for (Iterator iter=requestedACClassRefs.iterator(); iter.hasNext(); ) {      String requstedACClassRef=(String)iter.next();      Integer requestedLevelInt=(Integer)acClassRefLevelMap.get(requstedACClassRef);      int requestedLevel=(requestedLevelInt == null) ? 0 : requestedLevelInt.intValue();      if (debug.messageEnabled()) {        debug.message("SAML2Utils." + "isAuthnContextMatching: requstedACClassRef = " + requstedACClassRef + ", level = "+ requestedLevel);      }      if (level <= requestedLevel) {        return true;      }    }    return false;  }  return false;}  }
class C{  public SoftReference(T r,ReferenceQueue<? super T> q){  super(r,q);}  }
class C{  private static void test_init(Configuration config){  createInstance(config);  int expectedFiles=config.expectedFiles;  int actualFiles=OPTIMIZED_DIR.listFiles().length;  assertEquals(expectedFiles,actualFiles);}  }
class C{  public void paintRadioButtonMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void initializeConfigurationFramework() throws org.opends.server.config.ConfigException {  if (!ConfigurationFramework.getInstance().isInitialized()) {    try {      ConfigurationFramework.getInstance().initialize();    } catch (    ConfigException ce) {      throw new org.opends.server.config.ConfigException(ce.getMessageObject(),ce);    }  }}  }
class C{  public LibPadstack add(ShapeConvex[] p_shapes){  int pad_no=count() + 1;  String new_name="padstack#" + pad_no;  return add(new_name,p_shapes,false,false);}  }
class C{  public void replaceEntry(final Entry oldEntry,final Entry newEntry) throws DirectoryException {  final DN newEntryDN=newEntry.getName();  if (!backend.contains(newEntryDN)) {    throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,ERR_CONFIG_FILE_MODIFY_NO_SUCH_ENTRY.get(oldEntry),getMatchedDN(newEntryDN),null);  }  if (!Entries.getStructuralObjectClass(oldEntry,serverContext.getSchema()).equals(Entries.getStructuralObjectClass(newEntry,serverContext.getSchema()))) {    throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,ERR_CONFIG_FILE_MODIFY_STRUCTURAL_CHANGE_NOT_ALLOWED.get(oldEntry.getName()));  }  final List<ConfigChangeListener> changeListeners=getChangeListeners(newEntryDN);  final LocalizableMessageBuilder unacceptableReason=new LocalizableMessageBuilder();  for (  ConfigChangeListener listeners : changeListeners) {    if (!listeners.configChangeIsAcceptable(newEntry,unacceptableReason)) {      throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,ERR_CONFIG_FILE_MODIFY_REJECTED_BY_CHANGE_LISTENER.get(newEntryDN,unacceptableReason));    }  }  ModifyRequest modifyRequest=Entries.diffEntries(oldEntry,newEntry,Entries.diffOptions().attributes("*","+"));  final ConfigLdapResultHandler resultHandler=new ConfigLdapResultHandler();  backend.handleModify(UNCANCELLABLE_REQUEST_CONTEXT,modifyRequest,null,resultHandler);  if (!resultHandler.hasCompletedSuccessfully()) {    LdapException ex=resultHandler.getResultError();    throw new DirectoryException(ex.getResult().getResultCode(),ERR_CONFIG_FILE_MODIFY_FAILED.get(newEntryDN,newEntryDN,ex.getLocalizedMessage()),ex);  }  writeUpdatedConfig();  final ConfigChangeResult ccr=new ConfigChangeResult();  for (  final ConfigChangeListener listener : changeListeners) {    if (!changeListeners.contains(listener)) {      continue;    }    final ConfigChangeResult result=listener.applyConfigurationChange(newEntry);    ccr.aggregate(result);    handleConfigChangeResult(result,newEntryDN,listener.getClass().getName(),"applyConfigurationChange");  }  if (ccr.getResultCode() != ResultCode.SUCCESS) {    String reasons=Utils.joinAsString(".  ",ccr.getMessages());    throw new DirectoryException(ccr.getResultCode(),ERR_CONFIG_FILE_MODIFY_APPLY_FAILED.get(reasons));  }}  }
class C{  @Override public String toString(){  return " at character " + pos + " of "+ in;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public TextEncodedStringNullTerminated(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  public static File toFile(URL url){  if (url == null || !"file".equalsIgnoreCase(url.getProtocol())) {    return null;  } else {    String filename=url.getFile().replace('/',File.separatorChar);    filename=decodeUrl(filename);    return new File(filename);  }}  }
class C{  public OpenDJLoggerAdapter(final String name){  this.tracer=DebugLogger.getTracer(name);  this.name=LoggingCategoryNames.getCategoryName(name);}  }
class C{  public void actionPerformed(ActionEvent x){  JComponent component=Autoscroller.component;  if (component == null || !component.isShowing() || (event == null)) {    _stop(component);    return;  }  Point screenLocation=component.getLocationOnScreen();  MouseEvent e=new MouseEvent(component,event.getID(),event.getWhen(),event.getModifiers(),event.getX() - screenLocation.x,event.getY() - screenLocation.y,event.getXOnScreen(),event.getYOnScreen(),event.getClickCount(),event.isPopupTrigger(),MouseEvent.NOBUTTON);  component.superProcessMouseMotionEvent(e);}  }
class C{  public ServerStatus processNewStatus(ChangeStatusMsg csMsg){  ServerStatus reqStatus=csMsg.getNewStatus();  StatusMachineEvent event=StatusMachineEvent.statusToEvent(reqStatus);  if (event == StatusMachineEvent.INVALID_EVENT) {    logger.error(ERR_RS_INVALID_NEW_STATUS,reqStatus,getBaseDN(),serverId);    return ServerStatus.INVALID_STATUS;  }  ServerStatus newStatus=StatusMachine.computeNewStatus(status,event);  if (newStatus == ServerStatus.INVALID_STATUS) {    logger.error(ERR_RS_CANNOT_CHANGE_STATUS,getBaseDN(),serverId,status,event);    return ServerStatus.INVALID_STATUS;  }  status=newStatus;  return status;}  }
class C{  private ServiceType(){}  }
class C{  public static boolean exists(){  return getFile().exists();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.CipherReferenceElement createCipherReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.CipherReferenceElementImpl();}  }
class C{  public boolean expectMoreValues(){  if (++_index == _expEntryCount) {    return false;  }  return true;}  }
class C{  public MeteredStream(OutputStream out,long written){  this.out=out;  this.written=written;}  }
class C{  public java.sql.Time readTime() throws SQLException {  return (java.sql.Time)getNextAttribute();}  }
class C{  protected static void checkInitialization() throws SSOException {  if (tokenManager == null) {synchronized (lock) {      if (tokenManager == null) {        try {          tokenManager=SSOTokenManager.getInstance();          oCache=new Cache(1000);        } catch (        SSOException ssoe) {          EntityUtils.debug.error("EntityObjectImpl:checkInitialization() " + ": Unable to get SSOTokenManager",ssoe);          throw (ssoe);        }      }    }  }}  }
class C{  public PatternParser(IPatternConsumer consumer) throws HyphenationException {  this();  this.consumer=consumer;}  }
class C{  public Callback[] handleResponseCallbacks(HttpServletRequest request,HttpServletResponse response,Callback[] originalCallbacks,JsonValue jsonRequestObject) throws RestAuthException {  for (  Callback originalCallback : originalCallbacks) {    RestAuthCallbackHandler restAuthCallbackHandler=restAuthCallbackHandlerFactory.getRestAuthCallbackHandler(originalCallback.getClass());    restAuthCallbackHandler.handle(request,response,jsonRequestObject,originalCallback);  }  return originalCallbacks;}  }
class C{  @Override public int read() throws IOException {  bytik=in.get() & 0x00FF;  consumed++;  return bytik;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetownerdocument.class,args);}  }
class C{  public WSPersonalProfileServiceModelImpl(HttpServletRequest req,Map map) throws AMConsoleException {  super(req,SERVICE_NAME,map);}  }
class C{  public int sMaxAgeSeconds(){  return sMaxAgeSeconds;}  }
class C{  protected <R>Handler<AsyncResult<SQLConnection>> connHandler(Handler<AsyncResult<R>> h1,Handler<SQLConnection> h2){  return null;}  }
class C{  public static boolean resolveHostNameEnabled(){  return resolveHostName;}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (!other.getClass().equals(this.getClass())) {    return false;  }  CallIdentifier that=(CallIdentifier)other;  if (this.localId.compareTo(that.localId) != 0) {    return false;  }  if (this.host == that.host)   return true;  if ((this.host == null && that.host != null) || (this.host != null && that.host == null))   return false;  if (host.compareToIgnoreCase(that.host) != 0) {    return false;  }  return true;}  }
class C{  static public void assertEquals(float expected,float actual,float delta){  assertEquals(null,expected,actual,delta);}  }
class C{  public int jmxPort(){  return values.jmxPort;}  }
class C{  public NullTrustManagerProvider(){}  }
class C{  public void readPWResetProfile(String realm){  String value=null;  try {    value=getAttributeValue(realm,PW_RESET_ENABLED_ATTR);  } catch (  SSOException e) {    debug.warning("PWResetModelImpl.readPWResetProfile",e);  }catch (  SMSException e) {    debug.error("PWResetModelImpl.readPWResetProfile",e);  }  if ((value == null) || !value.equals(STRING_TRUE)) {    pwResetEnable=false;    informationMsg=getLocalizedString("pwResetDisabled.message");  }}  }
class C{  private void parseAttributes(TypedArray a){  DisplayMetrics metrics=getContext().getResources().getDisplayMetrics();  barWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,barWidth,metrics);  rimWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,rimWidth,metrics);  circleRadius=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,circleRadius,metrics);  circleRadius=(int)a.getDimension(R.styleable.ProgressWheel_circleRadius,circleRadius);  fillRadius=a.getBoolean(R.styleable.ProgressWheel_fillRadius,false);  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_barWidth,barWidth);  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_rimWidth,rimWidth);  float baseSpinSpeed=a.getFloat(R.styleable.ProgressWheel_spinSpeed,spinSpeed / 360.0f);  spinSpeed=baseSpinSpeed * 360;  barSpinCycleTime=a.getInt(R.styleable.ProgressWheel_barSpinCycleTime,(int)barSpinCycleTime);  barColor=a.getColor(R.styleable.ProgressWheel_barColor,barColor);  rimColor=a.getColor(R.styleable.ProgressWheel_rimColor,rimColor);  linearProgress=a.getBoolean(R.styleable.ProgressWheel_linearProgress,false);  if (a.getBoolean(R.styleable.ProgressWheel_progressIndeterminate,false)) {    spin();  }  a.recycle();}  }
class C{  @Inject public StatefulTokenStore(OAuthTokenStore tokenStore,OAuth2ProviderSettingsFactory providerSettingsFactory,OAuth2UrisFactory oauth2UrisFactory,OpenIdConnectClientRegistrationStore clientRegistrationStore,RealmNormaliser realmNormaliser,SSOTokenManager ssoTokenManager,CookieExtractor cookieExtractor,OAuth2AuditLogger auditLogger,@Named(OAuth2Constants.DEBUG_LOG_NAME) Debug logger,SecureRandom secureRandom,ClientAuthenticationFailureFactory failureFactory,RecoveryCodeGenerator recoveryCodeGenerator,OAuth2Utils utils){  this.tokenStore=tokenStore;  this.providerSettingsFactory=providerSettingsFactory;  this.oauth2UrisFactory=oauth2UrisFactory;  this.clientRegistrationStore=clientRegistrationStore;  this.realmNormaliser=realmNormaliser;  this.ssoTokenManager=ssoTokenManager;  this.cookieExtractor=cookieExtractor;  this.auditLogger=auditLogger;  this.logger=logger;  this.secureRandom=secureRandom;  this.failureFactory=failureFactory;  this.recoveryCodeGenerator=recoveryCodeGenerator;  this.utils=utils;}  }
class C{  @Override public synchronized void updateSTSInstance(String stsInstanceId,String realm,T instance) throws STSPublishException {  ServiceConfig baseService;  try {    baseService=new ServiceConfigManager(serviceName,getAdminToken()).getOrganizationConfig(realm,null);    if (baseService != null) {      ServiceConfig serviceConfig=baseService.getSubConfig(stsInstanceId);      if (serviceConfig != null) {        serviceConfig.setAttributes(instanceConfigMarshaller.toMap(instance));        logger.debug(restOrSoap() + "sts instance " + stsInstanceId+ " in realm "+ realm+ " updated in persistent store.");      } else {        throw new STSPublishException(ResourceException.NOT_FOUND,"Could not create ServiceConfig for realm " + realm + " in order to update "+ restOrSoap()+ " sts instance with id "+ stsInstanceId);      }    } else {      throw new STSPublishException(ResourceException.NOT_FOUND,"Could not create ServiceConfigManager for realm " + realm + " in order to update "+ restOrSoap()+ " sts instance with id "+ stsInstanceId);    }  } catch (  SMSException|SSOException e) {    throw new STSPublishException(ResourceException.INTERNAL_ERROR,"Exception caught updating " + restOrSoap() + " sts instance with id "+ stsInstanceId+ " in realm "+ realm+ ". Exception: "+ e,e);  }}  }
class C{  public UEncoder(SafeCharsSet safeCharsSet){  this.safeChars=safeCharsSet.getSafeChars();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocument04.class,args);}  }
class C{  public void register(String elemname,String classname){  if (elemmap == null)   elemmap=new Hashtable();  elemmap.put(elemname,classname);}  }
class C{  @SuppressWarnings("unused") public static boolean withinRange(float value,float startValue,float endValue){  return value == ScWidget.valueRangeLimit(value,startValue,endValue);}  }
class C{  private synchronized void addLock(FileLock lock) throws OverlappingFileLockException {  long lockEnd=lock.position() + lock.size();  for (  FileLock existingLock : locks) {    if (existingLock.position() > lockEnd) {      break;    }    if (existingLock.overlaps(lock.position(),lock.size())) {      throw new OverlappingFileLockException();    }  }  locks.add(lock);}  }
class C{  @Override public void init() throws ServletException {  registry=Registry.getRegistry(null,null);  mBeanServer=Registry.getRegistry(null,null).getMBeanServer();}  }
class C{  public void testConstructorBytesNegative2(){  byte aBytes[]={-12,56,100};  byte rBytes[]={-12,56,100};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public Vector(){  this(DEFAULT_SIZE,0);}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitVariableOrParamDecl(this);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childValue;  int childLength;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  childValue=child.getData();  childLength=childValue.length();  assertEquals("characterdataGetLengthAssert",15,childLength);}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  private static <T>void displayPropertyValues(ConsoleApplication app,PropertyDefinition<T> pd,Collection<T> values){  TableBuilder builder=new TableBuilder();  PropertyValuePrinter valuePrinter=new PropertyValuePrinter(null,null,false);  int sz=values.size();  boolean useMultipleColumns=(sz >= MULTI_COLUMN_THRESHOLD);  int rows=sz;  if (useMultipleColumns) {    rows/=2;    rows+=sz % 2;  }  List<T> vl=new ArrayList<>(values);  for (int i=0, j=rows; i < rows; i++, j++) {    builder.startRow();    builder.appendCell("*)");    builder.appendCell(valuePrinter.print(pd,vl.get(i)));    if (useMultipleColumns && j < sz) {      builder.appendCell();      builder.appendCell("*)");      builder.appendCell(valuePrinter.print(pd,vl.get(j)));    }  }  TextTablePrinter printer=new TextTablePrinter(app.getErrorStream());  printer.setDisplayHeadings(false);  printer.setIndentWidth(4);  printer.setColumnWidth(1,0);  if (useMultipleColumns) {    printer.setColumnWidth(2,2);    printer.setColumnWidth(4,0);  }  builder.print(printer);}  }
class C{  public synchronized void addServiced(String name){  serviced.add(name);}  }
class C{  private JAXBElement<ErrorResponse> createErrorResponse(ObjectFactory objFactory,Throwable t){  ErrorResponse errorResponse=objFactory.createErrorResponse();  errorResponse.setMessage(String.valueOf(t));  if (t instanceof LDAPException) {switch (((LDAPException)t).getResultCode()) {case LDAPResultCode.AUTHORIZATION_DENIED:case LDAPResultCode.INAPPROPRIATE_AUTHENTICATION:case LDAPResultCode.INVALID_CREDENTIALS:case LDAPResultCode.STRONG_AUTH_REQUIRED:      errorResponse.setType(AUTHENTICATION_FAILED);    break;case LDAPResultCode.CLIENT_SIDE_CONNECT_ERROR:  errorResponse.setType(COULD_NOT_CONNECT);break;case LDAPResultCode.UNWILLING_TO_PERFORM:errorResponse.setType(NOT_ATTEMPTED);break;default :errorResponse.setType(MALFORMED_REQUEST);break;}} else if (t instanceof LDAPConnectionException) {errorResponse.setType(COULD_NOT_CONNECT);} else if (t instanceof IOException) {errorResponse.setType(UNRESOLVABLE_URI);} else {errorResponse.setType(GATEWAY_INTERNAL_ERROR);}return objFactory.createBatchResponseErrorResponse(errorResponse);}  }
class C{  private void cleanUp(Object resource,String name,String closeMethod){  Method m=null;  try {    m=resource.getClass().getMethod(closeMethod,(Class<?>[])null);  } catch (  SecurityException e) {    log.debug(sm.getString("namingResources.cleanupCloseSecurity",closeMethod,name,container));    return;  }catch (  NoSuchMethodException e) {    log.debug(sm.getString("namingResources.cleanupNoClose",name,container,closeMethod));    return;  }  try {    m.invoke(resource,(Object[])null);  } catch (  IllegalArgumentException|IllegalAccessException e) {    log.warn(sm.getString("namingResources.cleanupCloseFailed",closeMethod,name,container),e);  }catch (  InvocationTargetException e) {    Throwable t=ExceptionUtils.unwrapInvocationTargetException(e);    ExceptionUtils.handleThrowable(t);    log.warn(sm.getString("namingResources.cleanupCloseFailed",closeMethod,name,container),t);  }}  }
class C{  public ClassNotFoundException(String s){  super(s,null);}  }
class C{  @DataProvider(name="createRDNEqualityData") public Object[][] createRDNEqualityData(){  return new Object[][]{{"cn=hello world","cn=hello world",0},{"cn=hello world","CN=hello world",0},{"cn=hello   world","cn=hello world",0},{"  cn =  hello world  ","cn=hello world",0},{"cn=hello world\\ ","cn=hello world",0},{"cn=HELLO WORLD","cn=hello world",0},{"cn=HELLO+sn=WORLD","sn=world+cn=hello",0},{"cn=HELLO+sn=WORLD","cn=hello+sn=nurse",1},{"cn=HELLO+sn=WORLD","cn=howdy+sn=yall",-1},{"cn=hello","cn=hello+sn=world",-1},{"cn=hello+sn=world","cn=hello",1},{"cn=hello+sn=world","cn=hello+description=world",1},{"cn=hello","sn=world",-1},{"sn=hello","cn=world",1},{"governingStructureRule=10","governingStructureRule=9",1},{"governingStructureRule=999","governingStructureRule=1000",-1},{"governingStructureRule=-1","governingStructureRule=0",-1},{"governingStructureRule=0","governingStructureRule=-1",1},{"cn=aaa","cn=aaaa",-1},{"cn=AAA","cn=aaaa",-1},{"cn=aaa","cn=AAAA",-1},{"cn=aaaa","cn=aaa",1},{"cn=AAAA","cn=aaa",1},{"cn=aaaa","cn=AAA",1},{"cn=aaab","cn=aaaa",1},{"cn=aaaa","cn=aaab",-1},{RDN.maxValue(),RDN.maxValue(),0},{RDN.maxValue(),"cn=aaa",1},{"cn=aaa",RDN.maxValue(),-1}};}  }
class C{  public void paintCheckBoxMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public NotificationMessageNotificationMessageTemplateElement(){}  }
class C{  private Executors(){}  }
class C{  public void testSignerString() throws Exception {  Signer s=new SignerStub("sss3");  assertNotNull(s);  assertEquals("sss3",s.getName());  assertNull(s.getPrivateKey());  Signer s2=new SignerStub(null);  assertNull(s2.getName());}  }
class C{  public void testMac11() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException, ShortBufferException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};  SecretKeySpec scs=new SecretKeySpec(b,"SHA1");  for (int i=0; i < macs.length; i++) {    macs[i].init(scs);    byte[] res1=macs[i].doFinal();    byte[] res2=new byte[res1.length + 10];    macs[i].doFinal(res2,0);    for (int j=0; j < res1.length; j++) {      assertEquals("Not equals byte number: ".concat(Integer.toString(j)),res1[j],res2[j]);    }  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiScrollBarUI();  return MultiLookAndFeel.createUIs(mui,((MultiScrollBarUI)mui).uis,a);}  }
class C{  public static JLabel createInlineHelpLabel(LocalizableMessage text){  JLabel label=new JLabel(text.toString());  label.setFont(ColorAndFontConstants.inlineHelpFont);  label.setForeground(ColorAndFontConstants.foreground);  return label;}  }
class C{  public static void resetAllCounters(){  resetPreParseCount();  resetPreOperationCount();  resetPostOperationCount();  resetPostResponseCount();  resetPostSynchronizationCount();  resetSearchEntryCount();  resetSearchReferenceCount();  resetSubordinateModifyDNCount();  resetIntermediateResponseCount();  resetPostConnectCount();  resetPostDisconnectCount();  resetLDIFImportCount();  resetLDIFExportCount();}  }
class C{  public MLetObjectInputStream(InputStream in,MLet loader) throws IOException, StreamCorruptedException {  super(in);  if (loader == null) {    throw new IllegalArgumentException("Illegal null argument to MLetObjectInputStream");  }  this.loader=loader;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  System.out.println("shootme: got an ACK! ");  System.out.println("Dialog State = " + dialog.getState());}  }
class C{  public CaptureFilter(final Filter delegate,final MessageCapture capture,final Set<CapturePoint> points){  this.delegate=delegate;  this.capture=capture;  this.points=checkNotNull(points);}  }
class C{  Point adjustPopupLocationToFitScreen(int xPosition,int yPosition){  Point popupLocation=new Point(xPosition,yPosition);  if (popupPostionFixDisabled == true || GraphicsEnvironment.isHeadless()) {    return popupLocation;  }  Rectangle scrBounds;  GraphicsConfiguration gc=getCurrentGraphicsConfiguration(popupLocation);  Toolkit toolkit=Toolkit.getDefaultToolkit();  if (gc != null) {    scrBounds=gc.getBounds();  } else {    scrBounds=new Rectangle(toolkit.getScreenSize());  }  Dimension popupSize=JPopupMenu.this.getPreferredSize();  long popupRightX=(long)popupLocation.x + (long)popupSize.width;  long popupBottomY=(long)popupLocation.y + (long)popupSize.height;  int scrWidth=scrBounds.width;  int scrHeight=scrBounds.height;  if (!canPopupOverlapTaskBar()) {    Insets scrInsets=toolkit.getScreenInsets(gc);    scrBounds.x+=scrInsets.left;    scrBounds.y+=scrInsets.top;    scrWidth-=scrInsets.left + scrInsets.right;    scrHeight-=scrInsets.top + scrInsets.bottom;  }  int scrRightX=scrBounds.x + scrWidth;  int scrBottomY=scrBounds.y + scrHeight;  if (popupRightX > (long)scrRightX) {    popupLocation.x=scrRightX - popupSize.width;  }  if (popupBottomY > (long)scrBottomY) {    popupLocation.y=scrBottomY - popupSize.height;  }  if (popupLocation.x < scrBounds.x) {    popupLocation.x=scrBounds.x;  }  if (popupLocation.y < scrBounds.y) {    popupLocation.y=scrBounds.y;  }  return popupLocation;}  }
class C{  public InsertBreakAction(){  super(insertBreakAction);}  }
class C{  public String toString(){  return Integer.toString(get());}  }
class C{  public LogMessageID(Level logLevel,String prefix,int id,String name,String description,List<String> dataInfoColumns){  this.logLevel=logLevel;  this.prefix=prefix;  this.id=id;  this.name=name;  this.description=description;  this.dataInfoSize=dataInfoColumns.size();  this.dataInfoColumns=dataInfoColumns;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataType.X509Certificate createX509DataTypeX509Certificate() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl.X509CertificateImpl();}  }
class C{  public TRANSIENT(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public synchronized void removeConsumer(ImageConsumer ic){  theConsumers.removeElement(ic);}  }
class C{  public SQLClientInfoException(Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(cause != null ? cause.toString() : null);  initCause(cause);  this.failedProperties=failedProperties;}  }
class C{  public static WindowMessage show(String p_message){  String[] message_arr=new String[1];  message_arr[0]=p_message;  return new WindowMessage(message_arr);}  }
class C{  public PotionEffect(PotionEffectType type,int duration,int amplifier,boolean ambient,boolean particles){  this(type,duration,amplifier,ambient,particles,null);}  }
class C{  public void clearPasswordExpirationWarnedTime(){  operations.add(PasswordPolicyStateOperationType.CLEAR_PASSWORD_EXPIRATION_WARNED_TIME);}  }
class C{  private Graphics debugGraphics(){  DebugGraphics debugGraphics;  DebugGraphicsInfo info=info();  JFrame debugFrame;  if (info.debugFrame == null) {    info.debugFrame=new JFrame();    info.debugFrame.setSize(500,500);  }  debugFrame=info.debugFrame;  debugFrame.show();  debugGraphics=new DebugGraphics(debugFrame.getGraphics());  debugGraphics.setFont(getFont());  debugGraphics.setColor(getColor());  debugGraphics.translate(xOffset,yOffset);  debugGraphics.setClip(getClipBounds());  if (debugFlash()) {    debugGraphics.setDebugOptions(FLASH_OPTION);  }  return debugGraphics;}  }
class C{  public static String decode(String s){  String str=null;  try {    str=decode(s,"UTF8");  } catch (  UnsupportedEncodingException e) {  }  return str;}  }
class C{  public String toString(){  return (getDurationToString());}  }
class C{  public boolean duringEveryday(OmniDate userDefinedValue){  if (userDefinedValue.afterEveryday(new OmniDate(startTime)) && userDefinedValue.beforeEveryday(new OmniDate(endTime))) {    return true;  }  return false;}  }
class C{  public static void access(Level level,String msgId,String data[]){  access(level,msgId,data,null);}  }
class C{  private void publish(String signature,String sourceLocation,String msg,String stack){  Thread thread=Thread.currentThread();  StringBuilder buf=new StringBuilder();  buf.append("[");  buf.append(TimeThread.getLocalTime());  buf.append("] ");  buf.append(globalSequenceNumber++);  buf.append(" ");  buf.append("trace ");  buf.append("thread={");  buf.append(thread.getName());  buf.append("(");  buf.append(thread.getId());  buf.append(")} ");  if (thread instanceof DirectoryThread) {    buf.append("threadDetail={");    for (    Map.Entry<String,String> entry : ((DirectoryThread)thread).getDebugProperties().entrySet()) {      buf.append(entry.getKey());      buf.append("=");      buf.append(entry.getValue());      buf.append(" ");    }    buf.append("} ");  }  buf.append("method={");  buf.append(signature);  buf.append("(");  buf.append(sourceLocation);  buf.append(")} ");  buf.append(msg);  if (stack != null) {    buf.append("\nStack Trace:\n");    buf.append(stack);  }  writer.writeRecord(buf.toString());}  }
class C{  public void put(int index,byte val){  array[index]=val;}  }
class C{  public static void inflateData(byte[] deflated,byte[] inflated){  Inflater inflater=new Inflater();  inflater.setInput(deflated);  try {    inflater.inflate(inflated);  } catch (  DataFormatException dfe) {    throw new IOException(IOException.CannotInflateTiffImage);  }}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignatureType createSignatureType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureTypeImpl();}  }
class C{  public boolean removeCSN(DN baseDN,CSN expectedCSN){  final ServerState ss=list.get(baseDN);  return ss != null && ss.removeCSN(expectedCSN);}  }
class C{  @SuppressWarnings("unchecked") private LDAPReplicationDomain createReplicationDomain(int dsId) throws Exception {  SortedSet<String> replServers=new TreeSet<>();  replServers.add("localhost:" + rs1Port);  DomainFakeCfg domainConf=new DomainFakeCfg(EXAMPLE_DN_,dsId,replServers);  LDAPReplicationDomain replicationDomain=MultimasterReplication.createNewDomain(domainConf);  replicationDomain.start();  SynchronizationProvider<SynchronizationProviderCfg> provider=DirectoryServer.getSynchronizationProviders().get(0);  if (provider instanceof ConfigurationChangeListener) {    ConfigurationChangeListener<ReplicationSynchronizationProviderCfg> mmr=(ConfigurationChangeListener<ReplicationSynchronizationProviderCfg>)provider;    mmr.applyConfigurationChange(mock(ReplicationSynchronizationProviderCfg.class));  }  return replicationDomain;}  }
class C{  public void testConstrStringWithoutExpPos2(){  String a="+732546982374982347892379283571094797.287346782359284756";  int aScale=18;  BigInteger bA=new BigInteger("732546982374982347892379283571094797287346782359284756");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  private void populateDB() throws Exception {  TestCaseUtils.clearBackend("userRoot","dc=example,dc=com");  TestCaseUtils.addEntries("dn: uid=albert.zimmerman,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: albert.zimmerman","givenName: Albert","sn: Zimmerman","cn: Albert Zimmerman","","dn: uid=albert.smith,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: albert.smith","givenName: Albert","sn: Smith","cn: Albert Smith","","dn: uid=aaron.zimmerman,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: albert.zimmerman","givenName: Aaron","givenName: Zeke","sn: Zimmerman","cn: Aaron Zimmerman","","dn: uid=mary.jones,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: mary.jones","givenName: Mary","sn: Jones","cn: Mary Jones","","dn: uid=margaret.jones,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: margaret.jones","givenName: Margaret","givenName: Maggie","sn: Jones","sn: Smith","cn: Maggie Jones-Smith","","dn: uid=aaccf.johnson,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: aaccf.johnson","givenName: Aaccf","sn: Johnson","cn: Aaccf Johnson","","dn: uid=sam.zweck,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: sam.zweck","givenName: Sam","sn: Zweck","cn: Sam Zweck","","dn: uid=lowercase.mcgee,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: lowercase.mcgee","givenName: lowercase","sn: mcgee","cn: lowercase mcgee","","dn: uid=zorro,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: zorro","sn: Zorro","cn: Zorro");}  }
class C{  @Override Object writeReplace(){  return super.writeReplace();}  }
class C{  public static void addSubConfig(String serviceName,String parentConfigName,String subConfigName,String subConfigID,Map attrValues,int priority) throws UpgradeException {  String classMethod="UpgradeUtils:addSubConfig";  try {    ServiceConfigManager scm=new ServiceConfigManager(serviceName,ssoToken);    ServiceConfig sc=scm.getGlobalConfig(null);    ServiceConfig sc1=sc.getSubConfig(parentConfigName);    if (sc != null) {      sc1.addSubConfig(subConfigName,subConfigID,priority,attrValues);    } else {      debug.error(classMethod + "Error adding sub cofiguration" + subConfigName);      throw new UpgradeException("Error adding subconfig");    }  } catch (  SSOException ssoe) {    throw new UpgradeException(classMethod + "invalid sso token");  }catch (  SMSException sm) {    debug.error(classMethod + "Error loading subconfig",sm);    throw new UpgradeException(classMethod + "error adding subconfig");  }}  }
class C{  public boolean newDNIsEqual(DN targetDN){  try {    DN newDN=computeNewDN();    return newDN.equals(targetDN);  } catch (  LocalizedIllegalArgumentException e) {    return false;  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.IssuerNamesOfferedElement createIssuerNamesOfferedElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.IssuerNamesOfferedElementImpl();}  }
class C{  public void signXML() throws SAMLException {  String certAlias=SystemConfigurationUtil.getProperty(Constants.SAML_XMLSIG_CERT_ALIAS);  signXML(certAlias);}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void add(String keyword,byte id){  add(keyword.toCharArray(),id);}  }
class C{  public void componentShown(ComponentEvent e){}  }
class C{  public Object clone(){  DefaultMutableTreeNode newNode=null;  try {    newNode=(DefaultMutableTreeNode)super.clone();    newNode.children=null;    newNode.parent=null;  } catch (  CloneNotSupportedException e) {    throw new Error(e.toString());  }  return newNode;}  }
class C{  public boolean isDefined(){  return type == Type.DEFINED;}  }
class C{  public boolean containsKey(Object key){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k)     return true;    if (item == null)     return false;    i=nextKeyIndex(i,len);  }}  }
class C{  private void output(String string) throws IOException {  int length=string.length();  if (tempChars == null || tempChars.length < length) {    tempChars=new char[length];  }  string.getChars(0,length,tempChars,0);  super.output(tempChars,0,length);}  }
class C{  public static void addToSite(String serverInstance,String siteId) throws UpgradeException {  try {    ServerConfiguration.addToSite(ssoToken,serverInstance,siteId);  } catch (  ConfigurationException ce) {    throw new UpgradeException("Unable to add to site");  }catch (  SMSException sme) {    throw new UpgradeException("Unable to add to site");  }catch (  SSOException ssoe) {    throw new UpgradeException("Unable to add to site");  }}  }
class C{  public NodeSet(Node node){  this(32);  addNode(node);}  }
class C{  public void clearTimingCodes(){  ((List<EventTimingCode>)getObjectValue(DataTypes.OBJ_TIMED_EVENT_LIST)).clear();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  Entry<Object,Object> entryStack=null;synchronized (this) {    s.defaultWriteObject();    s.writeInt(table.length);    s.writeInt(count);    for (int index=0; index < table.length; index++) {      Entry<?,?> entry=table[index];      while (entry != null) {        entryStack=new Entry<>(0,entry.key,entry.value,entryStack);        entry=entry.next;      }    }  }  while (entryStack != null) {    s.writeObject(entryStack.key);    s.writeObject(entryStack.value);    entryStack=entryStack.next;  }}  }
class C{  public X509CRLHolder(InputStream crlStream) throws IOException {  this(parseStream(crlStream));}  }
class C{  protected int findOffsetToCharactersInString(char[] string,int start){  int stringLength=string.length;  int end=getEndOffset();  Segment seg=new Segment();  try {    getDocument().getText(start,end - start,seg);  } catch (  BadLocationException ble) {    return -1;  }  for (int counter=seg.offset, maxCounter=seg.offset + seg.count; counter < maxCounter; counter++) {    char currentChar=seg.array[counter];    for (int subCounter=0; subCounter < stringLength; subCounter++) {      if (currentChar == string[subCounter])       return counter - seg.offset + start;    }  }  return -1;}  }
class C{  private void readLDIF() throws InitializationException {  File ldifFile=getFileForPath(ldifFilePath);  if (!ldifFile.exists()) {    if (logger.isTraceEnabled()) {      logger.trace("LDIF backend starting empty because LDIF file " + ldifFilePath + " does not exist");    }    entryMap.clear();    childDNs.clear();    return;  }  try {    importLDIF(new LDIFImportConfig(ldifFile.getAbsolutePath()),false);  } catch (  DirectoryException de) {    throw new InitializationException(de.getMessageObject(),de);  }}  }
class C{  public boolean isSchemaEnabled(){  return isSchemaEnabled;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer sb=new StringBuffer(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(ISSUER_ELEMENT).append(NS);  String nameQualifier=getNameQualifier();  if ((nameQualifier != null) && (nameQualifier.trim().length() != 0)) {    sb.append(" ").append(NAME_QUALIFIER_ATTR).append("=\"").append(nameQualifier).append("\"");  }  String spNameQualifier=getSPNameQualifier();  if ((spNameQualifier != null) && (spNameQualifier.trim().length() != 0)) {    sb.append(" ").append(SP_NAME_QUALIFIER_ATTR).append("=\"").append(spNameQualifier).append("\"");  }  String format=getFormat();  if ((format != null) && (format.trim().length() != 0)) {    sb.append(" ").append(FORMAT_ATTR).append("=\"").append(format).append("\"");  }  String spProvidedID=getSPProvidedID();  if ((spProvidedID != null) && (spProvidedID.trim().length() != 0)) {    sb.append(" ").append(SP_PROVIDED_ID_ATTR).append("=\"").append(spProvidedID);  }  sb.append(">");  String value=getValue();  if ((value != null) && (value.trim().length() != 0)) {    sb.append(value);  } else {    SAML2SDKUtils.debug.error("IssuerImpl.processElement(): name identifier is missing");    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missing_name_identifier"));  }  sb.append("</").append(appendNS).append(ISSUER_ELEMENT).append(">");  return sb.toString();}  }
class C{  public ItemEvent(ItemSelectable source,int id,Object item,int stateChange){  super(source,id);  this.item=item;  this.stateChange=stateChange;}  }
class C{  public FrameBodyTOLY(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static DefinitionKind from_int(int i){switch (i) {case _dk_none:    return dk_none;case _dk_all:  return dk_all;case _dk_Attribute:return dk_Attribute;case _dk_Constant:return dk_Constant;case _dk_Exception:return dk_Exception;case _dk_Interface:return dk_Interface;case _dk_Module:return dk_Module;case _dk_Operation:return dk_Operation;case _dk_Typedef:return dk_Typedef;case _dk_Alias:return dk_Alias;case _dk_Struct:return dk_Struct;case _dk_Union:return dk_Union;case _dk_Enum:return dk_Enum;case _dk_Primitive:return dk_Primitive;case _dk_String:return dk_String;case _dk_Sequence:return dk_Sequence;case _dk_Array:return dk_Array;case _dk_Repository:return dk_Repository;case _dk_Wstring:return dk_Wstring;case _dk_Fixed:return dk_Fixed;case _dk_Value:return dk_Value;case _dk_ValueBox:return dk_ValueBox;case _dk_ValueMember:return dk_ValueMember;case _dk_Native:return dk_Native;default :throw new org.omg.CORBA.BAD_PARAM();}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS05.class,args);}  }
class C{  public void reset(){  Cell[] as=cells;  Cell a;  base=0L;  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       a.value=0L;    }  }}  }
class C{  public void init(Subject subject,Map sharedState,Map options){  System.out.println("SMAuthModule initialization" + options);  smCookieName=CollectionHelper.getMapAttr(options,COOKIE_NAME,"SMSESSION");  sharedSecret=CollectionHelper.getMapAttr(options,SHARED_SECRET);  policyServerIP=CollectionHelper.getMapAttr(options,SERVER_IP);  checkRemoteUserOnly=Boolean.valueOf(CollectionHelper.getMapAttr(options,CHECK_REMOTE_USER_ONLY,"false")).booleanValue();  hostName=CollectionHelper.getMapAttr(options,TRUST_HOSTNAME);  configuredHTTPHeaders=(Set)options.get("HTTPHeaders");  try {    String tmp=CollectionHelper.getMapAttr(options,ACCOUNT_PORT,"44443");    accountingPort=Integer.parseInt(tmp);    tmp=CollectionHelper.getMapAttr(options,AUTHN_PORT,"44442");    authenticationPort=Integer.parseInt(tmp);    tmp=CollectionHelper.getMapAttr(options,AUTHZ_PORT,"44441");    authorizationPort=Integer.parseInt(tmp);    tmp=CollectionHelper.getMapAttr(options,MIN_CONNECTION);    connectionMin=Integer.parseInt(tmp);    tmp=CollectionHelper.getMapAttr(options,MAX_CONNECTION);    connectionMax=Integer.parseInt(tmp);    tmp=CollectionHelper.getMapAttr(options,STEP_CONNECTION);    connectionStep=Integer.parseInt(tmp);    tmp=CollectionHelper.getMapAttr(options,REQUEST_TIMEOUT);    timeout=Integer.parseInt(tmp);  } catch (  Exception e) {    e.printStackTrace();  }  remoteUserHeader=CollectionHelper.getMapAttr(options,REMOTE_USER_HEADER_NAME,"REMOTE_USER");}  }
